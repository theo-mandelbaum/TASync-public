/**
 * Sched API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The QuestionCreateSchema model module.
 * @module model/QuestionCreateSchema
 * @version 1.0
 */
class QuestionCreateSchema {
    /**
     * Constructs a new <code>QuestionCreateSchema</code>.
     * @alias module:model/QuestionCreateSchema
     * @param questionText {String} 
     */
    constructor(questionText) { 
        
        QuestionCreateSchema.initialize(this, questionText);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, questionText) { 
        obj['question_text'] = questionText;
    }

    /**
     * Constructs a <code>QuestionCreateSchema</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/QuestionCreateSchema} obj Optional instance to populate.
     * @return {module:model/QuestionCreateSchema} The populated <code>QuestionCreateSchema</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new QuestionCreateSchema();

            if (data.hasOwnProperty('question_text')) {
                obj['question_text'] = ApiClient.convertToType(data['question_text'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>QuestionCreateSchema</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>QuestionCreateSchema</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of QuestionCreateSchema.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['question_text'] && !(typeof data['question_text'] === 'string' || data['question_text'] instanceof String)) {
            throw new Error("Expected the field `question_text` to be a primitive type in the JSON string but got " + data['question_text']);
        }

        return true;
    }


}

QuestionCreateSchema.RequiredProperties = ["question_text"];

/**
 * @member {String} question_text
 */
QuestionCreateSchema.prototype['question_text'] = undefined;






export default QuestionCreateSchema;

