/**
 * Sched API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CommentCreateSchema from '../model/CommentCreateSchema';
import CommentSchema from '../model/CommentSchema';
import Error from '../model/Error';
import GroupSchema from '../model/GroupSchema';
import QuestionCreateSchema from '../model/QuestionCreateSchema';
import QuestionSchema from '../model/QuestionSchema';
import ScheduleSchema from '../model/ScheduleSchema';
import SchoolSchema from '../model/SchoolSchema';
import ShiftSchema from '../model/ShiftSchema';
import ShiftSchemaCreate from '../model/ShiftSchemaCreate';
import SubjectCreateSchema from '../model/SubjectCreateSchema';
import SubjectSchema from '../model/SubjectSchema';
import Success from '../model/Success';
import SwapRequestSchema from '../model/SwapRequestSchema';
import UserSchema from '../model/UserSchema';

/**
* Default service.
* @module api/DefaultApi
* @version 1.0
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the backendSchedApiViewsAddGroup operation.
     * @callback module:api/DefaultApi~backendSchedApiViewsAddGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add Group
     * @param {Number} groupId 
     * @param {module:api/DefaultApi~backendSchedApiViewsAddGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserSchema}
     */
    backendSchedApiViewsAddGroup(groupId, callback) {
      let postBody = null;
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling backendSchedApiViewsAddGroup");
      }

      let pathParams = {
        'group_id': groupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UserSchema;
      return this.apiClient.callApi(
        '/sched_api/add_group/{group_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the backendSchedApiViewsAddStudentToShift operation.
     * @callback module:api/DefaultApi~backendSchedApiViewsAddStudentToShiftCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ShiftSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add Student To Shift
     * @param {String} shiftId 
     * @param {module:api/DefaultApi~backendSchedApiViewsAddStudentToShiftCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ShiftSchema}
     */
    backendSchedApiViewsAddStudentToShift(shiftId, callback) {
      let postBody = null;
      // verify the required parameter 'shiftId' is set
      if (shiftId === undefined || shiftId === null) {
        throw new Error("Missing the required parameter 'shiftId' when calling backendSchedApiViewsAddStudentToShift");
      }

      let pathParams = {
        'shift_id': shiftId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ShiftSchema;
      return this.apiClient.callApi(
        '/sched_api/add_student_to_shift/{shift_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the backendSchedApiViewsAddTaToShift operation.
     * @callback module:api/DefaultApi~backendSchedApiViewsAddTaToShiftCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ShiftSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add Ta To Shift
     * @param {String} shiftId 
     * @param {module:api/DefaultApi~backendSchedApiViewsAddTaToShiftCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ShiftSchema}
     */
    backendSchedApiViewsAddTaToShift(shiftId, callback) {
      let postBody = null;
      // verify the required parameter 'shiftId' is set
      if (shiftId === undefined || shiftId === null) {
        throw new Error("Missing the required parameter 'shiftId' when calling backendSchedApiViewsAddTaToShift");
      }

      let pathParams = {
        'shift_id': shiftId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ShiftSchema;
      return this.apiClient.callApi(
        '/sched_api/add_ta_to_shift/{shift_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the backendSchedApiViewsAnswerQuestion operation.
     * @callback module:api/DefaultApi~backendSchedApiViewsAnswerQuestionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/QuestionSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Answer Question
     * @param {String} questionId 
     * @param {module:api/DefaultApi~backendSchedApiViewsAnswerQuestionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/QuestionSchema}
     */
    backendSchedApiViewsAnswerQuestion(questionId, callback) {
      let postBody = null;
      // verify the required parameter 'questionId' is set
      if (questionId === undefined || questionId === null) {
        throw new Error("Missing the required parameter 'questionId' when calling backendSchedApiViewsAnswerQuestion");
      }

      let pathParams = {
        'question_id': questionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = QuestionSchema;
      return this.apiClient.callApi(
        '/sched_api/answer_question/{question_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the backendSchedApiViewsCommentQuestion operation.
     * @callback module:api/DefaultApi~backendSchedApiViewsCommentQuestionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CommentSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Comment Question
     * @param {String} questionId 
     * @param {module:model/CommentCreateSchema} commentCreateSchema 
     * @param {module:api/DefaultApi~backendSchedApiViewsCommentQuestionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CommentSchema}
     */
    backendSchedApiViewsCommentQuestion(questionId, commentCreateSchema, callback) {
      let postBody = commentCreateSchema;
      // verify the required parameter 'questionId' is set
      if (questionId === undefined || questionId === null) {
        throw new Error("Missing the required parameter 'questionId' when calling backendSchedApiViewsCommentQuestion");
      }
      // verify the required parameter 'commentCreateSchema' is set
      if (commentCreateSchema === undefined || commentCreateSchema === null) {
        throw new Error("Missing the required parameter 'commentCreateSchema' when calling backendSchedApiViewsCommentQuestion");
      }

      let pathParams = {
        'question_id': questionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CommentSchema;
      return this.apiClient.callApi(
        '/sched_api/comment/{question_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the backendSchedApiViewsCreateQuestion operation.
     * @callback module:api/DefaultApi~backendSchedApiViewsCreateQuestionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/QuestionSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Question
     * @param {String} subjectId 
     * @param {module:model/QuestionCreateSchema} questionCreateSchema 
     * @param {module:api/DefaultApi~backendSchedApiViewsCreateQuestionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/QuestionSchema}
     */
    backendSchedApiViewsCreateQuestion(subjectId, questionCreateSchema, callback) {
      let postBody = questionCreateSchema;
      // verify the required parameter 'subjectId' is set
      if (subjectId === undefined || subjectId === null) {
        throw new Error("Missing the required parameter 'subjectId' when calling backendSchedApiViewsCreateQuestion");
      }
      // verify the required parameter 'questionCreateSchema' is set
      if (questionCreateSchema === undefined || questionCreateSchema === null) {
        throw new Error("Missing the required parameter 'questionCreateSchema' when calling backendSchedApiViewsCreateQuestion");
      }

      let pathParams = {
        'subject_id': subjectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = QuestionSchema;
      return this.apiClient.callApi(
        '/sched_api/question/{subject_id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the backendSchedApiViewsCreateSchedule operation.
     * @callback module:api/DefaultApi~backendSchedApiViewsCreateScheduleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScheduleSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Schedule
     * @param {String} subjectId 
     * @param {module:api/DefaultApi~backendSchedApiViewsCreateScheduleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScheduleSchema}
     */
    backendSchedApiViewsCreateSchedule(subjectId, callback) {
      let postBody = null;
      // verify the required parameter 'subjectId' is set
      if (subjectId === undefined || subjectId === null) {
        throw new Error("Missing the required parameter 'subjectId' when calling backendSchedApiViewsCreateSchedule");
      }

      let pathParams = {
        'subject_id': subjectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ScheduleSchema;
      return this.apiClient.callApi(
        '/sched_api/schedule/{subject_id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the backendSchedApiViewsCreateSubject operation.
     * @callback module:api/DefaultApi~backendSchedApiViewsCreateSubjectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SubjectSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Subject
     * @param {Boolean} isTaHours 
     * @param {module:model/SubjectCreateSchema} subjectCreateSchema 
     * @param {module:api/DefaultApi~backendSchedApiViewsCreateSubjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SubjectSchema}
     */
    backendSchedApiViewsCreateSubject(isTaHours, subjectCreateSchema, callback) {
      let postBody = subjectCreateSchema;
      // verify the required parameter 'isTaHours' is set
      if (isTaHours === undefined || isTaHours === null) {
        throw new Error("Missing the required parameter 'isTaHours' when calling backendSchedApiViewsCreateSubject");
      }
      // verify the required parameter 'subjectCreateSchema' is set
      if (subjectCreateSchema === undefined || subjectCreateSchema === null) {
        throw new Error("Missing the required parameter 'subjectCreateSchema' when calling backendSchedApiViewsCreateSubject");
      }

      let pathParams = {
        'is_ta_hours': isTaHours
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SubjectSchema;
      return this.apiClient.callApi(
        '/sched_api/subject/{is_ta_hours}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the backendSchedApiViewsCreateSwapRequest operation.
     * @callback module:api/DefaultApi~backendSchedApiViewsCreateSwapRequestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SwapRequestSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Swap Request
     * @param {String} fromShiftId 
     * @param {String} toShiftId 
     * @param {String} toUserId 
     * @param {module:api/DefaultApi~backendSchedApiViewsCreateSwapRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SwapRequestSchema}
     */
    backendSchedApiViewsCreateSwapRequest(fromShiftId, toShiftId, toUserId, callback) {
      let postBody = null;
      // verify the required parameter 'fromShiftId' is set
      if (fromShiftId === undefined || fromShiftId === null) {
        throw new Error("Missing the required parameter 'fromShiftId' when calling backendSchedApiViewsCreateSwapRequest");
      }
      // verify the required parameter 'toShiftId' is set
      if (toShiftId === undefined || toShiftId === null) {
        throw new Error("Missing the required parameter 'toShiftId' when calling backendSchedApiViewsCreateSwapRequest");
      }
      // verify the required parameter 'toUserId' is set
      if (toUserId === undefined || toUserId === null) {
        throw new Error("Missing the required parameter 'toUserId' when calling backendSchedApiViewsCreateSwapRequest");
      }

      let pathParams = {
      };
      let queryParams = {
        'from_shift_id': fromShiftId,
        'to_shift_id': toShiftId,
        'to_user_id': toUserId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SwapRequestSchema;
      return this.apiClient.callApi(
        '/sched_api/create_swap_request', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the backendSchedApiViewsCreateTaShift operation.
     * @callback module:api/DefaultApi~backendSchedApiViewsCreateTaShiftCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ShiftSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Ta Shift
     * @param {String} scheduleId 
     * @param {module:model/ShiftSchemaCreate} shiftSchemaCreate 
     * @param {module:api/DefaultApi~backendSchedApiViewsCreateTaShiftCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ShiftSchema}
     */
    backendSchedApiViewsCreateTaShift(scheduleId, shiftSchemaCreate, callback) {
      let postBody = shiftSchemaCreate;
      // verify the required parameter 'scheduleId' is set
      if (scheduleId === undefined || scheduleId === null) {
        throw new Error("Missing the required parameter 'scheduleId' when calling backendSchedApiViewsCreateTaShift");
      }
      // verify the required parameter 'shiftSchemaCreate' is set
      if (shiftSchemaCreate === undefined || shiftSchemaCreate === null) {
        throw new Error("Missing the required parameter 'shiftSchemaCreate' when calling backendSchedApiViewsCreateTaShift");
      }

      let pathParams = {
        'schedule_id': scheduleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ShiftSchema;
      return this.apiClient.callApi(
        '/sched_api/ta_shift/{schedule_id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the backendSchedApiViewsGetUserGroup operation.
     * @callback module:api/DefaultApi~backendSchedApiViewsGetUserGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GroupSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get User Group
     * @param {module:api/DefaultApi~backendSchedApiViewsGetUserGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GroupSchema}
     */
    backendSchedApiViewsGetUserGroup(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GroupSchema;
      return this.apiClient.callApi(
        '/sched_api/user_group', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the backendSchedApiViewsHandleSwapRequest operation.
     * @callback module:api/DefaultApi~backendSchedApiViewsHandleSwapRequestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Handle Swap Request
     * @param {String} swapRequestId 
     * @param {Boolean} accepted 
     * @param {module:api/DefaultApi~backendSchedApiViewsHandleSwapRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Success}
     */
    backendSchedApiViewsHandleSwapRequest(swapRequestId, accepted, callback) {
      let postBody = null;
      // verify the required parameter 'swapRequestId' is set
      if (swapRequestId === undefined || swapRequestId === null) {
        throw new Error("Missing the required parameter 'swapRequestId' when calling backendSchedApiViewsHandleSwapRequest");
      }
      // verify the required parameter 'accepted' is set
      if (accepted === undefined || accepted === null) {
        throw new Error("Missing the required parameter 'accepted' when calling backendSchedApiViewsHandleSwapRequest");
      }

      let pathParams = {
        'swap_request_id': swapRequestId,
        'accepted': accepted
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Success;
      return this.apiClient.callApi(
        '/sched_api/handle_swap_request/{swap_request_id}/{accepted}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the backendSchedApiViewsListAllShifts operation.
     * @callback module:api/DefaultApi~backendSchedApiViewsListAllShiftsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ShiftSchema>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List All Shifts
     * @param {module:api/DefaultApi~backendSchedApiViewsListAllShiftsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ShiftSchema>}
     */
    backendSchedApiViewsListAllShifts(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ShiftSchema];
      return this.apiClient.callApi(
        '/sched_api/all_shifts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the backendSchedApiViewsListGroups operation.
     * @callback module:api/DefaultApi~backendSchedApiViewsListGroupsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GroupSchema>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Groups
     * @param {module:api/DefaultApi~backendSchedApiViewsListGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GroupSchema>}
     */
    backendSchedApiViewsListGroups(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GroupSchema];
      return this.apiClient.callApi(
        '/sched_api/groups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the backendSchedApiViewsListIncomingSwapRequests operation.
     * @callback module:api/DefaultApi~backendSchedApiViewsListIncomingSwapRequestsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SwapRequestSchema>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Incoming Swap Requests
     * @param {module:api/DefaultApi~backendSchedApiViewsListIncomingSwapRequestsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SwapRequestSchema>}
     */
    backendSchedApiViewsListIncomingSwapRequests(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [SwapRequestSchema];
      return this.apiClient.callApi(
        '/sched_api/incoming_swap_requests', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the backendSchedApiViewsListOutgoingSwapRequests operation.
     * @callback module:api/DefaultApi~backendSchedApiViewsListOutgoingSwapRequestsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SwapRequestSchema>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Outgoing Swap Requests
     * @param {module:api/DefaultApi~backendSchedApiViewsListOutgoingSwapRequestsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SwapRequestSchema>}
     */
    backendSchedApiViewsListOutgoingSwapRequests(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [SwapRequestSchema];
      return this.apiClient.callApi(
        '/sched_api/outgoing_swap_requests', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the backendSchedApiViewsListQuestions operation.
     * @callback module:api/DefaultApi~backendSchedApiViewsListQuestionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/QuestionSchema>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Questions
     * @param {String} subjectId 
     * @param {module:api/DefaultApi~backendSchedApiViewsListQuestionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/QuestionSchema>}
     */
    backendSchedApiViewsListQuestions(subjectId, callback) {
      let postBody = null;
      // verify the required parameter 'subjectId' is set
      if (subjectId === undefined || subjectId === null) {
        throw new Error("Missing the required parameter 'subjectId' when calling backendSchedApiViewsListQuestions");
      }

      let pathParams = {
        'subject_id': subjectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [QuestionSchema];
      return this.apiClient.callApi(
        '/sched_api/questions/{subject_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the backendSchedApiViewsListSchedules operation.
     * @callback module:api/DefaultApi~backendSchedApiViewsListSchedulesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ScheduleSchema>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Schedules
     * @param {String} subjectId 
     * @param {module:api/DefaultApi~backendSchedApiViewsListSchedulesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ScheduleSchema>}
     */
    backendSchedApiViewsListSchedules(subjectId, callback) {
      let postBody = null;
      // verify the required parameter 'subjectId' is set
      if (subjectId === undefined || subjectId === null) {
        throw new Error("Missing the required parameter 'subjectId' when calling backendSchedApiViewsListSchedules");
      }

      let pathParams = {
        'subject_id': subjectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ScheduleSchema];
      return this.apiClient.callApi(
        '/sched_api/schedules/{subject_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the backendSchedApiViewsListSchools operation.
     * @callback module:api/DefaultApi~backendSchedApiViewsListSchoolsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SchoolSchema>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Schools
     * @param {module:api/DefaultApi~backendSchedApiViewsListSchoolsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SchoolSchema>}
     */
    backendSchedApiViewsListSchools(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [SchoolSchema];
      return this.apiClient.callApi(
        '/sched_api/schools', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the backendSchedApiViewsListSchoolsPaginated operation.
     * @callback module:api/DefaultApi~backendSchedApiViewsListSchoolsPaginatedCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SchoolSchema>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Schools Paginated
     * @param {Object} opts Optional parameters
     * @param {Number} [page = 1)] 
     * @param {Number} [pageSize = 10)] 
     * @param {module:api/DefaultApi~backendSchedApiViewsListSchoolsPaginatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SchoolSchema>}
     */
    backendSchedApiViewsListSchoolsPaginated(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'page_size': opts['pageSize']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [SchoolSchema];
      return this.apiClient.callApi(
        '/sched_api/schools_paginated', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the backendSchedApiViewsListShiftStudents operation.
     * @callback module:api/DefaultApi~backendSchedApiViewsListShiftStudentsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UserSchema>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Shift Students
     * @param {String} shiftId 
     * @param {module:api/DefaultApi~backendSchedApiViewsListShiftStudentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UserSchema>}
     */
    backendSchedApiViewsListShiftStudents(shiftId, callback) {
      let postBody = null;
      // verify the required parameter 'shiftId' is set
      if (shiftId === undefined || shiftId === null) {
        throw new Error("Missing the required parameter 'shiftId' when calling backendSchedApiViewsListShiftStudents");
      }

      let pathParams = {
        'shift_id': shiftId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [UserSchema];
      return this.apiClient.callApi(
        '/sched_api/shift_students/{shift_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the backendSchedApiViewsListShiftTas operation.
     * @callback module:api/DefaultApi~backendSchedApiViewsListShiftTasCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UserSchema>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Shift Tas
     * @param {String} shiftId 
     * @param {module:api/DefaultApi~backendSchedApiViewsListShiftTasCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UserSchema>}
     */
    backendSchedApiViewsListShiftTas(shiftId, callback) {
      let postBody = null;
      // verify the required parameter 'shiftId' is set
      if (shiftId === undefined || shiftId === null) {
        throw new Error("Missing the required parameter 'shiftId' when calling backendSchedApiViewsListShiftTas");
      }

      let pathParams = {
        'shift_id': shiftId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [UserSchema];
      return this.apiClient.callApi(
        '/sched_api/shift_tas/{shift_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the backendSchedApiViewsListSubjects operation.
     * @callback module:api/DefaultApi~backendSchedApiViewsListSubjectsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SubjectSchema>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Subjects
     * @param {module:api/DefaultApi~backendSchedApiViewsListSubjectsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SubjectSchema>}
     */
    backendSchedApiViewsListSubjects(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [SubjectSchema];
      return this.apiClient.callApi(
        '/sched_api/subjects', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the backendSchedApiViewsListTaHourSchedule operation.
     * @callback module:api/DefaultApi~backendSchedApiViewsListTaHourScheduleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScheduleSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Ta Hour Schedule
     * @param {module:api/DefaultApi~backendSchedApiViewsListTaHourScheduleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScheduleSchema}
     */
    backendSchedApiViewsListTaHourSchedule(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ScheduleSchema;
      return this.apiClient.callApi(
        '/sched_api/ta_hour_schedule', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the backendSchedApiViewsListTaHourShift operation.
     * @callback module:api/DefaultApi~backendSchedApiViewsListTaHourShiftCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ShiftSchema>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Ta Hour Shift
     * @param {module:api/DefaultApi~backendSchedApiViewsListTaHourShiftCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ShiftSchema>}
     */
    backendSchedApiViewsListTaHourShift(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ShiftSchema];
      return this.apiClient.callApi(
        '/sched_api/ta_hour_shift', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the backendSchedApiViewsListTaShifts operation.
     * @callback module:api/DefaultApi~backendSchedApiViewsListTaShiftsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ShiftSchema>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Ta Shifts
     * @param {String} subjectId 
     * @param {module:api/DefaultApi~backendSchedApiViewsListTaShiftsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ShiftSchema>}
     */
    backendSchedApiViewsListTaShifts(subjectId, callback) {
      let postBody = null;
      // verify the required parameter 'subjectId' is set
      if (subjectId === undefined || subjectId === null) {
        throw new Error("Missing the required parameter 'subjectId' when calling backendSchedApiViewsListTaShifts");
      }

      let pathParams = {
        'subject_id': subjectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ShiftSchema];
      return this.apiClient.callApi(
        '/sched_api/ta_shifts/{subject_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the backendSchedApiViewsListUserShifts operation.
     * @callback module:api/DefaultApi~backendSchedApiViewsListUserShiftsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ShiftSchema>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List User Shifts
     * @param {String} userId 
     * @param {module:api/DefaultApi~backendSchedApiViewsListUserShiftsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ShiftSchema>}
     */
    backendSchedApiViewsListUserShifts(userId, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling backendSchedApiViewsListUserShifts");
      }

      let pathParams = {
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ShiftSchema];
      return this.apiClient.callApi(
        '/sched_api/user_shifts/{user_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the backendSchedApiViewsListUsers operation.
     * @callback module:api/DefaultApi~backendSchedApiViewsListUsersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UserSchema>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Users
     * @param {module:api/DefaultApi~backendSchedApiViewsListUsersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UserSchema>}
     */
    backendSchedApiViewsListUsers(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [UserSchema];
      return this.apiClient.callApi(
        '/sched_api/users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the backendSchedApiViewsRemoveStudentFromShift operation.
     * @callback module:api/DefaultApi~backendSchedApiViewsRemoveStudentFromShiftCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ShiftSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove Student From Shift
     * @param {String} shiftId 
     * @param {module:api/DefaultApi~backendSchedApiViewsRemoveStudentFromShiftCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ShiftSchema}
     */
    backendSchedApiViewsRemoveStudentFromShift(shiftId, callback) {
      let postBody = null;
      // verify the required parameter 'shiftId' is set
      if (shiftId === undefined || shiftId === null) {
        throw new Error("Missing the required parameter 'shiftId' when calling backendSchedApiViewsRemoveStudentFromShift");
      }

      let pathParams = {
        'shift_id': shiftId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ShiftSchema;
      return this.apiClient.callApi(
        '/sched_api/remove_student_from_shift/{shift_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the backendSchedApiViewsRemoveTaFromShift operation.
     * @callback module:api/DefaultApi~backendSchedApiViewsRemoveTaFromShiftCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ShiftSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove Ta From Shift
     * @param {String} shiftId 
     * @param {module:api/DefaultApi~backendSchedApiViewsRemoveTaFromShiftCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ShiftSchema}
     */
    backendSchedApiViewsRemoveTaFromShift(shiftId, callback) {
      let postBody = null;
      // verify the required parameter 'shiftId' is set
      if (shiftId === undefined || shiftId === null) {
        throw new Error("Missing the required parameter 'shiftId' when calling backendSchedApiViewsRemoveTaFromShift");
      }

      let pathParams = {
        'shift_id': shiftId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ShiftSchema;
      return this.apiClient.callApi(
        '/sched_api/remove_ta_from_shift/{shift_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the backendSchedApiViewsUnanswerQuestion operation.
     * @callback module:api/DefaultApi~backendSchedApiViewsUnanswerQuestionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/QuestionSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unanswer Question
     * @param {String} questionId 
     * @param {module:api/DefaultApi~backendSchedApiViewsUnanswerQuestionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/QuestionSchema}
     */
    backendSchedApiViewsUnanswerQuestion(questionId, callback) {
      let postBody = null;
      // verify the required parameter 'questionId' is set
      if (questionId === undefined || questionId === null) {
        throw new Error("Missing the required parameter 'questionId' when calling backendSchedApiViewsUnanswerQuestion");
      }

      let pathParams = {
        'question_id': questionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = QuestionSchema;
      return this.apiClient.callApi(
        '/sched_api/unanswer_question/{question_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
