{"index.html":"<html><head><script src=\"https://cdn.syncfusion.com/ej2/28.1.33/dist/ej2.min.js\" type=\"text/javascript\"></script>\n    <link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\">\n\n    <style>\n            body{\n                touch-action:none;\n            }\n            .control-section{\n                margin-top:100px;\n            }\n        </style></head><body><div class=\"stackblitz-container {{theme}}\"><div class=\"control-section\" id=\"e-pv-redact-sb-panel\">\n    <div class=\"content-wrapper\">\n        <div class=\"flex-container\">\n        </div>\n        <div class=\"default-appbar-container\">\n            <div class=\"row\">\n                <div class=\"col-md-12\">\n                    <header id=\"defaultAppBar\">\n                        <span class=\"regular\">Redaction</span>\n                        <div class=\"e-appbar-spacer\"></div>\n                        <button id=\"defaultButtonDownload\">\n                        </button>\n                    </header>\n                </div>\n            </div>\n        </div>\n\n        <div id=\"e-pv-redact-sb-toolbar\"></div>\n\n    </div>\n    <div class=\"e-pv-secondary-toolbar\" id=\"e-pv-redact-sb-toolbar-secondary\">\n        <input type=\"file\" id=\"fileUpload\" name=\"UploadFiles\" style=\"display: none;\">\n    </div>\n\n\n    <div id=\"pdfViewer\" style=\"height:640px; width:100%;\"></div>\n    <div id=\"e-pv-redact-sb-dialog\">\n        <div id=\"e-pv-redact-sb-defaultfileupload\">\n            <div class=\"drop-area-wrap\" id=\"e-pv-redact-sb-drop-area-wrap\">\n                <input type=\"file\" name=\"UploadFiles\" id=\"fileupload\">\n                <div>(Only JPG and PNG images will be accepted)</div>\n            </div>\n            <div class=\"e-pv-redact-sb-image-list\">\n                <div id=\"imageContainer\" class=\"e-pv-redact-sb-image-container\">\n                    <img id=\"imageView\" class=\"e-pv-redact-sb-image-source\" style=\"display:none\">\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n</div>\n\n\n\n\n\n<style>\n    #e-pv-redact-sb-panel.control-section .e-appbar {\n        height: 36px;\n        font-size: 14px !important;\n    }\n\n    #e-pv-redact-sb-toolbar.e-toolbar .e-toolbar-item .e-tbar-btn.e-tbtn-txt .e-icons.e-btn-icon {\n        padding: 4px !important;\n    }\n\n    #e-pv-redact-sb-toolbar.e-toolbar .e-toolbar-item .e-tbar-btn {\n        flex-direction: column;\n    }\n\n    #e-pv-redact-sb-toolbar.e-toolbar .e-toolbar-item .e-tbar-btn .e-icons.e-btn-icon {\n        font-size: 18px;\n    }\n    \n    #e-pv-redact-sb-toolbar\n    {\n        height: 72px !important;\n        padding: 0 9px;\n    }\n\n    #e-pv-redact-sb-toolbar .e-toolbar-items {\n        gap: 5px;\n    }\n\n    #e-pv-redact-sb-toolbar .e-toolbar-item.e-separator {\n        height: 48px !important;\n    }\n   \n    #e-pv-redact-sb-toolbar,\n    .e-toolbar {\n        border-left-width: 1px !important;\n        border-right-width: 1px !important;\n    }\n\n    #e-pv-redact-sb-toolbar-secondary.e-toolbar {\n        border-top-width: 1px !important;\n    }\n\n    #e-pv-redact-sb-currentPage {\n        font-size: 12px;\n    }\n\n    #e-pv-redact-sb-totalPage {\n        font-weight: 400;\n    }\n\n    .e-pv-redact-sb-black-out-container .black-out {\n        background-color: black;\n        width: 18px !important;\n        height: 18px !important;\n        border: 1px solid white;\n        border-radius: 3px;\n        margin: 4px !important;\n    }\n\n    .e-pv-redact-sb-white-out-container .white-out {\n        background-color: white;\n        width: 18px !important;\n        height: 18px !important;\n        border: 1px solid black;\n        border-radius: 3px;\n        margin: 4px !important;\n    }\n\n    .e-bigger .e-pv-redact-sb-black-out-container .black-out,\n    .e-bigger .e-pv-redact-sb-white-out-container .white-out {\n        position: relative;\n        top: -4px;\n    }\n\n    .e-bigger .e-toolbar .e-toolbar-item.e-pv-redact-sb-black-out-container .e-tbar-btn.e-btn,\n    .e-bigger .e-toolbar .e-toolbar-item.e-pv-redact-sb-white-out-container .e-tbar-btn.e-btn {\n        padding-top: 5px !important;\n    }\n\n    .e-bigger .e-pv-redact-sb-black-out-container .e-tbar-btn .e-tbar-btn-text,\n    .e-bigger .e-pv-redact-sb-white-out-container .e-tbar-btn .e-tbar-btn-text {\n        padding: 2px 4px 7px 4px !important;\n    }\n\n    /*upload image*/\n    #e-pv-redact-sb-dialog.e-dialog #e-pv-redact-sb-defaultfileupload.e-upload-files {\n        border: none !important;\n    }\n\n    #e-pv-redact-sb-panel.control-section #file-uploader {\n        display: flex;\n        border: 1px dashed #c8c6c4;\n        flex-direction: column;\n        justify-content: center;\n        align-items: center;\n        gap: 12px;\n        padding: 16px;\n        border-radius: 6px;\n    }\n\n    #e-pv-redact-sb-dialog.e-dialog .e-dlg-header-content {\n        border-bottom: 1px solid #C4C7C5 !important;\n        padding: 15px !important;\n    }\n\n    #e-pv-redact-sb-dialog.e-dialog .e-footer-content {\n        border-top: 1px solid #C4C7C5 !important;\n        padding: 10px;\n    }\n\n    #e-pv-redact-sb-dialog.e-dialog .e-dlg-header-content+.e-dlg-content {\n        padding: 20px !important;\n    }\n\n    #e-pv-redact-sb-panel.control-section .e-file-select-wrap {\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n    }\n\n    #e-pv-redact-sb-dialog.e-dialog .e-footer-content .e-btn {\n        background: rgba(0, 0, 0, 0);\n        border-color: rgba(0, 0, 0, 0);\n        box-shadow: none;\n        color: #242424;\n    }\n\n    #e-pv-redact-sb-drop-area-wrap .e-upload-file-list {\n        display: none;\n    }\n\n    #e-pv-redact-sb-defaultfileupload .e-upload-files {\n        border: none !important;\n    }\n\n    .e-pv-redact-sb-image-source {\n        width: 70px;\n        height: 70px;\n    }\n\n    .e-pv-redact-sb-image-container {\n        box-shadow: 0px 10px 15px -3px rgba(0, 0, 0, 0.1), 0px 10px 15px -3px rgba(0, 0, 0, 0.1);\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        padding: 4px;\n        gap: 5px;\n        border-radius: 4px;\n    }\n\n    .e-pv-redact-sb-image-list {\n        display: flex;\n        justify-content: center;\n        padding: 24px 15px;\n        gap: 35px;\n    }\n\n    .e-pv-redact-sb-image-container-selected {\n        border: 1px solid #757575 !important;\n    }\n\n    .e-pv-redact-sb-image-container:hover {\n        border: 1px solid #757575;\n    }\n\n    #e-pv-redact-sb-drop-area-wrap\n    {\n        display: flex;\n        border: 1px dashed #c8c6c4;\n        flex-direction: column;\n        justify-content: center;\n        align-items: center;\n        gap: 12px;\n        padding: 16px;\n        border-radius: 6px;\n    }\n\n    #e-pv-redact-sb-panel.control-section .e-file-select-wrap {\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n    }\n\n    #e-pv-redact-sb-defaultfileupload .e-upload {\n        border: none;\n        margin-top: 10px;\n        width: 100%;\n        height: 100%;\n    }\n\n    #e-pv-redact-sb-panel .e-dlg-container {\n        --color-sf-overlay-bg-color: none !important;\n    }\n\n    #e-pv-redact-sb-toolbar-secondary .e-input-group\n    {\n        border: none !important;\n    }\n\n    #e-pv-redact-sb-toolbar-secondary .e-toolbar-items .e-template \n    {\n        min-width: 0px !important;\n    }\n    \n    #e-pv-redact-sb-dialog\n    {\n        max-height: 600px !important;\n    }\n</style></body></html>","index.js":"{{ripple}}\n    // Render the PDF viewer control\n    var viewer = new ej.pdfviewer.PdfViewer({\n        enableToolbar: false,\n        enableNavigationToolbar: false,\n        enableThumbnail: false,\n        enableCommentPanel: false,\n        enableAnnotationToolbar: false,\n        documentPath: 'https://cdn.syncfusion.com/content/pdf/programmatical-annotations.pdf',\n        resourceUrl: 'https://cdn.syncfusion.com/ej2/27.1.55/dist/ej2-pdfviewer-lib'\n    });\n    viewer.appendTo('#pdfViewer');\n\n    //Event listener for the download button\n    document.getElementById('defaultButtonDownload').addEventListener('click', downloadClicked);\n\n    //Creation of appbar\n    var defaultAppBarObj = new ej.navigations.AppBar({\n        colorMode: 'Primary'\n    });\n    defaultAppBarObj.appendTo('#defaultAppBar');\n\n    //Creation download button\n    var defaultButtonDownloadObj = new ej.buttons.Button({ cssClass: 'e-inherit', iconCss: 'e-icons e-download e-btn-icon e-icon-left', content: 'Download' });\n    defaultButtonDownloadObj.appendTo('#defaultButtonDownload');\n\n    var redactionCount = 0;\n    var annotation;\n    var fileName = \"programmatical-annotations.pdf\";\n    var url = \"http://localhost:62728/api/pdfviewer/Redaction\";\n    //Creation of Toolbar with open , text , image , pattern , blackout, whiteout and redaction buttons\n    var primaryToolbarObj = new ej.navigations.Toolbar({\n        items: [\n            { prefixIcon: 'e-icon e-folder', tooltipText: 'Open', cssClass: 'e-pv-redact-sb-open-container', id: 'pdfviewer_open', text: 'Open', click: openDocumentClicked.bind(this) },\n            {\n                type: 'Separator'\n            },\n            {\n                prefixIcon: 'e-icon e-text-annotation', tooltipText: 'Text', cssClass: 'e-pv-redact-sb-font-container', text: 'Text', click: addText.bind(this)\n            },\n            {\n                prefixIcon: 'e-icons e-image', tooltipText: 'Image', cssClass: 'e-pv-redact-sb-image-btn', text: 'Image', id: 'targetButton'\n            },\n            {\n                prefixIcon: 'e-icons e-opacity', tooltipText: 'Pattern', cssClass: 'e-pv-redact-sb-pattern-container', text: 'Pattern', click: addPattern.bind(this)\n            },\n            {\n                prefixIcon: 'e-icons black-out', tooltipText: 'Black out', cssClass: 'e-pv-redact-sb-black-out-container', text: 'Blackout', click: addBlackout.bind(this)\n            },\n            {\n                prefixIcon: 'e-icons white-out', tooltipText: 'White Out', cssClass: 'e-pv-redact-sb-white-out-container', text: 'Whiteout', click: addWhiteout.bind(this)\n            },\n            {\n                type: 'Separator'\n            },\n            {\n                prefixIcon: 'e-icons e-redact', cssClass: 'e-pv-redact-sb-redaction-container', tooltipText: 'Redaction' , text: 'Redact', id: 'redacticon', click: redaction.bind(this), disabled: true \n            }\n        ]\n    });\n    primaryToolbarObj.appendTo('#e-pv-redact-sb-toolbar');\n\n    var CurrentpageNumber = '<div><span id=\"e-pv-redact-sb-currentPage\" title=\"Current Page\">1 </span><span id=\"e-pv-redact-sb-totalPage\" title=\"Total Page\">/ 1</span></div>';\n    var zoomList = ['10%', '25%', '50%', '75%', '100%', '200%', '400%'];\n\n    //Creation of toolbar with navigations and zoom dropdown\n    var secondaryToolbarObj = new ej.navigations.Toolbar({\n        items: [\n            {\n                prefixIcon: 'e-icon e-chevron-left', cssClass: 'e-pv-redact-sb-previous-container', id: 'previousPage', click: previousClicked.bind(this), disabled: true , tooltipText: 'Previous Page'\n            },\n            {\n                template: CurrentpageNumber\n            },\n            {\n                prefixIcon: 'e-icon e-chevron-right', cssClass: 'e-pv-redact-sb-next-container', id: 'nextPage', click: nextClicked.bind(this), disabled: true , tooltipText: 'Next Page'\n            },\n            {\n                type: 'Separator'\n            },\n            {\n                type: 'Input', tooltipText: 'Zoom', cssClass: 'percentage', align: 'Left', template: new ej.dropdowns.ComboBox({ width: 88, value: '100%', dataSource: zoomList, popupWidth: 85, showClearButton: false, readonly: false, change: zoomValueChange.bind(this) }), id: 'zoomBox'\n            }\n        ]\n    });\n    secondaryToolbarObj.appendTo(\"#e-pv-redact-sb-toolbar-secondary\");\n\n    //To create dialog box to upload the image\n    var icontemp = '<button id=\"cancelButton\" class=\"e-control e-btn e-primary\" data-ripple=\"true\">' + 'Cancel</button>';\n    var headerimg = '<span class=\"header-content\"></span>';\n    var cancelButton = new ej.buttons.Button();\n    var dialog = new ej.popups.Dialog({\n        header: headerimg + '<div id=\"dlg-template\" title=\"upload\" class=\"e-icon-settings\"> Upload Image </div>',\n        footerTemplate: icontemp,\n        showCloseIcon: true,\n        visible: false,\n        target: '#e-pv-redact-sb-panel',\n        width: '477px',\n        isModal: true\n    });\n    dialog.appendTo(\"#e-pv-redact-sb-dialog\");\n    cancelButton.appendTo(\"#cancelButton\");\n    document.getElementById(\"targetButton\").onclick = function () {\n        dialog.show();\n    };\n\n    document.getElementById(\"cancelButton\").onclick = function () {\n        dialog.hide();\n    };\n\n\n    //To select image from file manager and displaying to the pdf\n    var customStampSource = \"\";\n    var dropElement = document.getElementsByClassName(\n        'drop-area-wrap'\n    )[0];\n\n    var uploadObj = new ej.inputs.Uploader({\n        asyncSettings: {\n            saveUrl:\n                'http://localhost:62728/api/FileUploader/Save',\n            removeUrl:\n                'http://localhost:62728/api/FileUploader/Remove',\n        },\n        dropArea: dropElement,\n        change: onFileChange,\n        allowedExtensions: '.png, .jpg, .jpeg',\n        multiple: false\n    });\n    uploadObj.appendTo('#fileupload');\n\n    //When the selected image is clicked\n    function handleImageClick(args) {\n        customStampSource = imageSrc;\n        dialog.hide();\n        addImage();\n    }\n\n    var imageSrc;\n    function onFileChange(args) {\n        var file = args.file[0].rawFile;\n        var imageElement = document.getElementById('imageView');\n        var imageElementContainer = document.getElementById('imageContainer');\n        var reader = new FileReader();\n        reader.onload = function (e) {\n            var base64String = e.target ? e.target.result : null;\n            imageSrc = base64String;\n            customStampSource = imageSrc;\n            (imageElement).src = imageSrc;\n            imageElementContainer.className =\n                'image-container e-pv-redact-sb-image-container-selected';\n            (imageElement).style.display = 'block';\n            // Bind click event to the image element\n            imageElement.addEventListener('click', handleImageClick);\n        };\n        reader.readAsDataURL(file);\n    }\n    document.getElementById('fileUpload').addEventListener('change', readFile, false);\n\n    //To get the curret page number\n    var currentPageBox;\n    currentPageBox = document.getElementById('e-pv-redact-sb-currentPage');\n    (currentPageBox).value = '1';\n    var totalPageBox;\n    totalPageBox = document.getElementById('e-pv-redact-sb-totalPage');\n    (totalPageBox).value = '1';\n\n    //Updating the total number of pages while loading\n    viewer.documentLoad = function (args) {\n        (document.getElementById('e-pv-redact-sb-currentPage')).textContent = viewer.currentPageNumber.toString();\n        document.getElementById('e-pv-redact-sb-totalPage').textContent = ' / ' + viewer.pageCount;\n        updatePageNavigation();\n        updateRedaction();\n\n    };\n\n    //Updating the number of redaction while the annotation has been added\n    viewer.annotationAdd = function (args) {\n        var pdfAnnotationList = [];\n        pdfAnnotationList = viewer.annotationCollection;\n        var selectedAnnotationIndex = pdfAnnotationList.findIndex(function (item) {\n            return item.annotationId == args.annotationId;\n        });\n        if (selectedAnnotationIndex != -1) {\n            annotation = pdfAnnotationList[selectedAnnotationIndex];\n        }\n        if (annotation.author == \"Redaction\" || annotation.customStampName == \"Image\" || annotation.author == \"Pattern\" || annotation.author == \"Text\") {\n            redactionCount = redactionCount + 1;\n            updateRedaction();\n        }\n\n    };\n\n    //Updating the number of redaction while the annotation has been removed\n    viewer.annotationRemove = function (args) {\n        if (annotation.author == \"Redaction\" || annotation.customStampName == \"Image\" || annotation.author == \"Pattern\" || annotation.author == \"Text\") {\n            redactionCount = redactionCount - 1;\n            updateRedaction();\n        }\n\n    };\n\n    //Updating the current page number while changing the page\n    viewer.pageChange = function (args) {\n        (currentPageBox).value = viewer.currentPageNumber.toString();\n        (document.getElementById('e-pv-redact-sb-currentPage')).textContent = viewer.currentPageNumber.toString() + ' ';\n        updatePageNavigation();\n    };\n\n    //Updating the navigation button based on the page number either \"enabled\" or \"disabled\"\n    function updatePageNavigation() {\n        if (viewer.currentPageNumber === 1) {\n            secondaryToolbarObj.items[0].disabled = true;\n            secondaryToolbarObj.items[2].disabled = false;\n\n        }\n        else if (viewer.currentPageNumber === viewer.pageCount) {\n            secondaryToolbarObj.items[0].disabled = false;\n            secondaryToolbarObj.items[2].disabled = true;\n        }\n        else {\n            secondaryToolbarObj.items[0].disabled = false;\n            secondaryToolbarObj.items[2].disabled = false;\n        }\n    }\n    //To enable the redaction button based on count\n    function updateRedaction() {\n        if (redactionCount <= 0) {\n            primaryToolbarObj.items[8].disabled = true;\n        }\n        else {\n            primaryToolbarObj.items[8].disabled = false;\n        }\n\n    }\n\n    //Method for moving to next page \n    function nextClicked(args) {\n        viewer.navigation.goToNextPage();\n    }\n\n    //Method for moving to previous page\n    function previousClicked(args) {\n        viewer.navigation.goToPreviousPage();\n    }\n\n    //Zoom values changes when the percentage is selected from the dropdown\n    function zoomValueChange(args) {\n        var zoom = (args).value;\n        var previousZoom = (args).previousItemData.value;\n        if (zoom !== null || previousZoom !== null) {\n            var zoomchange = parseInt(zoom.replace(\"%\", \"\"), 10);\n            viewer.magnificationModule.zoomTo(zoomchange);\n        }\n    }\n\n    //To download the redacted pdf \n    function downloadClicked() {\n        viewer.saveAsBlob().then(function (value) {\n            var reader = new FileReader();\n            reader.readAsDataURL(value);\n            reader.onload = function (e) {\n                var base64String = e.target ? e.target.result : null;\n                var xhr = new XMLHttpRequest();\n                xhr.open('POST', url, true);\n                xhr.setRequestHeader('Content-type', 'application/json; charset=UTF-8');\n                var requestData = JSON.stringify({ base64String: base64String });\n                xhr.onload = function () {\n                    if (xhr.status === 200) {\n                        var blobUrl = createBlobUrl(xhr.responseText.split('base64,')[1], 'application/pdf');\n                        downloadDocument(blobUrl);\n                    }\n                    else {\n                        console.error('Download failed:', xhr.statusText);\n                    }\n                };\n                xhr.onerror = function () {\n                    console.error('An error occurred during the download:', xhr.statusText);\n                };\n                xhr.send(requestData);\n            };\n        }).catch(function (error) {\n            console.error('Error saving Blob:', error);\n        });\n    }\n\n    function createBlobUrl(base64String, contentType) {\n        var sliceSize = 512;\n        var byteCharacters = atob(base64String);\n        var byteArrays = [];\n        for (var offset = 0; offset < byteCharacters.length; offset += sliceSize) {\n            var slice = byteCharacters.slice(offset, offset + sliceSize);\n            var byteNumbers = new Array(slice.length);\n            for (var i = 0; i < slice.length; i++) {\n                byteNumbers[parseInt(i.toString(), 10)] = slice.charCodeAt(i);\n            }\n            var byteArray = new Uint8Array(byteNumbers);\n            byteArrays.push(byteArray);\n        }\n        var blob = new Blob(byteArrays, { type: contentType });\n        return blob;\n    }\n\n    function downloadDocument(blobUrl) {\n        var Url = URL || webkitURL;\n        blobUrl = Url.createObjectURL(blobUrl);\n        viewer.fileName = fileName;\n        var anchorElement = document.createElement('a');\n        if (anchorElement.click) {\n            (anchorElement).href = blobUrl;\n            (anchorElement).target = '_parent';\n            if ('download' in anchorElement) {\n                var downloadFileName = viewer.fileName || 'downloadedFile.pdf';\n                if (downloadFileName) {\n                    if (downloadFileName.endsWith('.pdf')) {\n                        (anchorElement).download = downloadFileName;\n                    }\n                    else {\n                        var splitPdf = downloadFileName.split('.pdf')[0] + '.pdf';\n                        (anchorElement).download = splitPdf;\n                    }\n                }\n                else {\n                    (anchorElement).download = 'Default.pdf';\n                }\n            }\n            (document.body || document.documentElement).appendChild(anchorElement);\n            anchorElement.click();\n        }\n        else {\n            if (window.top === window &&\n                blobUrl.split('#')[0] === window.location.href.split('#')[0]) {\n                var padCharacter = blobUrl.indexOf('?') === -1 ? '?' : '&';\n                blobUrl = blobUrl.replace(/#|$/, padCharacter + '$&');\n            }\n            window.open(blobUrl, '_parent');\n        }\n    }\n\n    function readFile(args) {\n        // tslint:disable-next-line\n        var upoadedFiles = args.target.files;\n        if (args.target.files[0] !== null) {\n            var uploadedFile = upoadedFiles[0];\n            fileName = upoadedFiles[0].name;\n            if (uploadedFile) {\n                var reader = new FileReader();\n                reader.readAsDataURL(uploadedFile);\n                // tslint:disable-next-line\n                reader.onload = function (e) {\n                    var uploadedFileUrl = e.currentTarget.result;\n                    viewer.documentPath = uploadedFileUrl;\n                    viewer.fileName = fileName;\n                    viewer.downloadFileName = fileName;\n                    currentPageBox.value = '1';\n                    totalPageBox.value = '1';\n                };\n            }\n        }\n    }\n\n    //To open a file from viewer\n    function openDocumentClicked(args) {\n        var textSearchToolbarElement = document.getElementById('textSearchToolbar');\n        if (textSearchToolbarElement !== null && textSearchToolbarElement.style.display === 'block') {\n            textSearchToolbarElement.style.display = 'none';\n        }\n        document.getElementById('fileUpload').click();\n    }\n\n    //Method to create rectangle annotation when \"Text\" button is clicked\n    function addText(args) {\n        viewer.rectangleSettings = {\n            fillColor: '#a3a2a0',\n            strokeColor: '#a3a2a0',\n            author: 'Text'\n        };\n        viewer.annotation.setAnnotationMode('Rectangle');\n\n    }\n\n    //Adding the image to the pdf\n    function addImage() {\n        viewer.stampSettings.author = \"Image\";\n        viewer.customStampSettings = {\n            width: 200,\n            author: 'Image',\n            height: 125,\n            isAddToMenu: false,\n            enableCustomStamp: false\n\n        };\n        viewer.customStamp = [\n            {\n                customStampName: 'Image',\n                customStampImageSource: customStampSource\n            },\n        ];\n    }\n\n    //Method to create rectangle annotation when the \"Pattern\" button is clicked\n    function addPattern(args) {\n        viewer.rectangleSettings = {\n            fillColor: '#dedfe0',\n            strokeColor: '#dedfe0',\n            author: 'Pattern'\n        };\n        viewer.annotation.setAnnotationMode('Rectangle');\n    }\n\n    //Method to create rectangle annotation when the \"Blackout\" button is clicked\n    function addBlackout(args) {\n        viewer.rectangleSettings = {\n            fillColor: '#000000',\n            strokeColor: '#000000',\n            author: 'Redaction'\n        };\n        viewer.annotation.setAnnotationMode('Rectangle');\n\n    }\n    //Method to create rectangle annotation when the \"Whiteout\" button is clicked\n    function addWhiteout(args) {\n        viewer.rectangleSettings = {\n            fillColor: '#ffffff',\n            strokeColor: '#ffffff',\n            author: 'Redaction'\n        };\n        viewer.annotation.setAnnotationMode('Rectangle');\n\n    }\n\n    //To redact the pdf in server side using the button click event\n    function redaction() {\n        if (redactionCount > 0) {\n            viewer.saveAsBlob().then(function (value) {\n                var data = value;\n                var reader = new FileReader();\n                reader.readAsDataURL(data);\n                reader.onload = function (e) {\n                    var base64String = e.target ? e.target.result : null;\n                    var xhr = new XMLHttpRequest();\n                    xhr.open('POST', url, true);\n                    xhr.setRequestHeader('Content-type', 'application/json; charset=UTF-8');\n                    var requestData = JSON.stringify({ base64String: base64String });\n                    xhr.onload = function () {\n                        if (xhr.status === 200) {\n                            viewer.load(xhr.responseText, null);\n                        }\n                        else {\n                            console.error('Redaction failed:', xhr.statusText);\n                        }\n                    };\n                    xhr.onerror = function () {\n                        console.error('An error occurred during the redaction:', xhr.statusText);\n                    };\n                    xhr.send(requestData);\n                };\n            });\n            redactionCount = 0;\n            updateRedaction();\n        }\n    }\n\n"}