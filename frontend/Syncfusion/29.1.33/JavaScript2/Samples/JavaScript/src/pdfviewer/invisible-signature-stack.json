{"index.html":"<html><head><script src=\"https://cdn.syncfusion.com/ej2/28.1.33/dist/ej2.min.js\" type=\"text/javascript\"></script>\n    <link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\">\n\n    <style>\n            body{\n                touch-action:none;\n            }\n            .control-section{\n                margin-top:100px;\n            }\n        </style></head><body><div class=\"stackblitz-container {{theme}}\"><div class=\"control-section\">\n    <div id=\"topToolbar\" style=\"top:0px\">\n    </div>\n    <div id=\"msg_success\"></div>\n    <div id=\"msg_warning\"></div>\n    <div id=\"msg_error\"></div>\n    <div id=\"pdfViewer\" style=\"height:640px; width:100%;\"></div>\n    <input type=\"file\" id=\"fileUpload\" style=\"display:block;visibility:hidden;width:0;height:0;\">\n</div>\n\n\n\n\n\n<style>\n#topToolbar {\ntop: 0px;\nz-index: 1001;\n}\n\n\n</style></div></body></html>","index.js":"{{ripple}}var ej = window.ej; \nvar _this = this;\nvar toolbarObj;\nvar viewer;\nvar msgWarning;\nvar msgError;\nvar msgSuccess;\n//Specifies the visibility of the complete signing.\nvar buttonVisibility = true;\n  //Specifies the visibility of the download icon\nvar downloadVisibility = true;\nvar successVisible = false;\nvar errorVisible = false;\nvar warningVisible = false;\nvar documentData;\n // Specifies whether the document has a digital signature or not.\nvar hasDigitalSignature = false;\nvar openDocument;\nvar fileName;\n\n    toolbarObj = new ej.navigations.Toolbar({\n        items: [\n            { prefixIcon: 'e-icons e-folder-open', cssClass: \"e-pv-open-document-container\", tooltipText: 'Open file', id: 'openButton', click: openDocument.bind(_this), align: \"Left\" },\n                { text: \"Complete Signing\", width: \"150px\", disabled: buttonVisibility, align: \"Right\", tooltipText: \"Finish Signing\", id: \"pdfviewer_sign\", click: signDocument.bind(_this), cssClass: \"e-pv-button-container\" },\n                { prefixIcon: 'e-icons e-download', tooltipText: 'Download', align: 'Right', click: downloadClicked.bind(_this), disabled: downloadVisibility, cssClass: \"e-pv-download-document-container\" }\n        ]\n    });\n    toolbarObj.appendTo('#topToolbar');\n    viewer = new ej.pdfviewer.PdfViewer({\n        enableToolbar: false,\n        enableNavigationToolbar: false,\n        enableThumbnail: false,\n        enableAnnotationToolbar: false,\n        documentPath: 'https://cdn.syncfusion.com/content/pdf/InvisibleDigitalSignature.pdf',\n        resourceUrl: 'https://cdn.syncfusion.com/ej2/27.2.2/dist/ej2-pdfviewer-lib'\n    });\n    ej.pdfviewer.PdfViewer.Inject(ej.pdfviewer.FormDesigner, ej.pdfviewer.FormFields, ej.pdfviewer.TextSearch, ej.pdfviewer.Print, ej.pdfviewer.Navigation, ej.pdfviewer.Magnification, ej.pdfviewer.Annotation, ej.pdfviewer.BookmarkView, ej.pdfviewer.ThumbnailView, ej.pdfviewer.LinkAnnotation,ej.pdfviewer.PageOrganizer);\n    viewer.enableTextSelection = false;\n    viewer.downloadFileName = 'InvisibleDigitalSignature.pdf';\n      //Triggers while adding the signature in signature field.\n    viewer.addSignature = function (args) {\n        var field;\n        field = viewer.retrieveFormFields();\n        var signatureFieldCount = 0;\n        var signaturesCount = 0;\n        for (var i = 0; i < field.Count; i++) {\n            if (field[i].Type.ToString() == (\"SignatureField\")) {\n                signatureFieldCount++;\n            }\n            if (field[i].Value != \"\" && field[i].Value != null && field[i].Type.ToString() == (\"SignatureField\")) {\n                signaturesCount++;\n            }\n        }\n        if (signatureFieldCount == signaturesCount) {\n            if (!hasDigitalSignature) {\n                buttonVisibility = false;\n                toolbarObj.items[1].disabled = false;\n            }\n        }\n    };\n    //Loads a PDF document.\n    viewer.documentLoad = function (args) {\n        fileName = args.documentName;\n        var postData = {\n            documentData: documentData\n        };\n        var options = {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify(postData)\n        };\n        var apiUrl = 'http://localhost:62728/api/pdfviewer/ValidateSignature';\n        fetch(apiUrl, options)\n            .then(function (response) { return response.json(); })\n            .then(function (body) {\n            if (body.successVisible || body.warningVisible || body.errorVisible)\n                toolbarObj.items[1].disabled = true;\n            if (!body.downloadVisibility)\n                toolbarObj.items[2].disabled = false;\n            if ((body.successVisible)) {\n                setTimeout(function () {\n                    msgSuccess.content = body.message;\n                    msgSuccess.visible = true;\n                }, 1000);\n                setTimeout(function () {\n                    msgSuccess.visible = false;\n                }, 5000);\n            }\n            if ((body.warningVisible)) {\n                msgWarning.content = body.message;\n                msgWarning.visible = true;\n            }\n            if (body.errorVisible) {\n                msgError.content = body.message;\n                msgError.visible = true;\n            }\n        });\n    };\n    viewer.appendTo('#pdfViewer');\n    document.getElementById('fileUpload').addEventListener('change', readFile, false);\n    msgSuccess = new ej.notifications.Message({\n        severity: \"Success\",\n        visible: successVisible\n    });\n    msgSuccess.appendTo('#msg_success');\n\n    msgWarning = new ej.notifications.Message({\n        severity: \"Warning\",\n        visible: warningVisible\n    });\n    msgWarning.appendTo('#msg_warning');\n\n    msgError = new ej.notifications.Message({\n        severity: \"Error\",\n        visible: errorVisible\n    });\n    msgError.appendTo('#msg_error');\n   //Triggers while validating the signature in the document.\n    function signDocument(e) {\n        var url = \"http://localhost:62728/api/pdfviewer/AddSignature\";\n        viewer.saveAsBlob().then(function (value) {\n            var reader = new FileReader();\n            reader.readAsDataURL(value);\n            reader.onload = function (e) {\n                var base64String = e.target ? e.target.result : null;\n                var xhr = new XMLHttpRequest();\n                xhr.open('POST', url, true);\n                xhr.setRequestHeader('Content-type', 'application/json; charset=UTF-8');\n                var requestData = JSON.stringify({ base64String: base64String });\n                xhr.onload = function () {\n                    if (xhr.status === 200) {\n                    documentData = xhr.responseText;\n                    viewer.load(xhr.responseText, null);\n                    toolbarObj.items[1].disabled = true;\n                    toolbarObj.items[2].disabled = false;\n                    viewer.fileName = fileName;\n                    viewer.downloadFileName = fileName;\n                    }\n                    else {\n                        console.error('Error in AddSignature API:', xhr.statusText);\n                    }\n                };\n                xhr.onerror = function () {\n                    console.error('Error reading Blob as Base64.', xhr.statusText);\n                };\n                xhr.send(requestData);\n            };\n        }).catch(function (error) {\n            console.error('Error saving Blob:', error);\n        });\n    }\n//Downloads the PDF document being loaded in the PDFViewer.\nfunction downloadClicked(args) {\n    viewer.download();\n}\n\nfunction readFile(args) {\n    // tslint:disable-next-line\n    var upoadedFiles = args.target.files;\n    if (args.target.files[0] !== null) {\n        var uploadedFile = upoadedFiles[0];\n        fileName = upoadedFiles[0].name;\n        if (uploadedFile) {\n            var reader = new FileReader();\n            reader.readAsDataURL(uploadedFile);\n            // tslint:disable-next-line\n            reader.onload = function (e) {\n                toolbarObj.items[2].disabled = true;\n                var uploadedFileUrl = e.currentTarget.result;\n                documentData = uploadedFileUrl;\n                viewer.load(uploadedFileUrl, null);\n                viewer.fileName = fileName;\n                viewer.downloadFileName = fileName;\n            };\n        }\n    }\n}\nfunction openDocument() {\n    document.getElementById('fileUpload').click();\n}\n"}