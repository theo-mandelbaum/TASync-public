{"index.html":"<html><head><script src=\"https://cdn.syncfusion.com/ej2/28.1.33/dist/ej2.min.js\" type=\"text/javascript\"></script>\n    <link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\">\n\n    <style>\n            body{\n                touch-action:none;\n            }\n            .control-section{\n                margin-top:100px;\n            }\n        </style></head><body><div class=\"stackblitz-container {{theme}}\"><div class=\"col-lg-9 control-section pdfviewer-control-section\">\n    <div class=\"content-wrapper\">\n        <div class=\"flex-container\">\n            <label class=\"switchLabel\" for=\"checked\">Standalone PDF Viewer</label>\n            <div class=\"e-message render-mode-info\">\n                <span class=\"e-msg-icon render-mode-info-icon\" title=\"Turn OFF to render the PDF Viewer as server-backed\"></span>\n            </div>\n            <input id=\"checked\" class=\"buttonSwitch\" type=\"checkbox\">\n        </div>\n        <div id=\"pdfViewer\" style=\"height:640px; width:100%;\">\n        </div>\n    </div>\n</div>\n<div class=\"col-lg-3 property-section-pdfviewer\">\n    <div class=\"pdfviewer-property-container\">\n        <h5><b>Properties</b></h5>\n    </div>\n    <table>\n        <tbody><tr>\n            <td class=\"pdfviewer-contextmenu-checkbox-label\">Hide Default Context Menu</td>\n            <td><input type=\"checkbox\" id=\"hide-default-context-menu\"></td>\n        </tr>\n        <tr>\n            <td class=\"pdfviewer-contextmenu-checkbox-label\">Add Custom option at bottom</td>\n            <td><input type=\"checkbox\" id=\"show-custom-menu-bottom\"></td>\n        </tr>\n    </tbody></table>\n</div>\n\n\n\n\n\n<style>\n    .flex-container {\n        display: flex;\n        justify-content: flex-end;\n        align-items: center;\n    }\n\n    .render-mode-info {\n        background: none;\n        border: none;\n        padding-left: 0px;\n    }\n\n    .render-mode-info .render-mode-info-icon {\n        height: 16px;\n        width: 16px;\n    }\n\n    .switchLabel {\n        font-family: \"Segoe UI\", \"GeezaPro\", \"DejaVu Serif\", sans-serif;\n        font-weight: 400;\n        line-height: 20px;\n        letter-spacing: 0.24px;\n        text-align: right;\n        font-size: 14px;\n        margin-bottom: 3px;\n    }\n\n    .render-mode-info .render-mode-info-icon::before {\n        line-height: normal;\n    }\n\n    .buttonSwitch {\n        Width: 40px;\n        Height: 24px;\n    }\n\n    .property-section-pdfviewer{\n        padding: 20px 15px;\n    }\n\n    .pdfviewer-contextmenu-checkbox-label{\n        padding: 10px;\n    }\n\n    .pdfviewer-control-section {\n        border-right: 1px solid #D7D7D7;\n    }\n\n    .pdfviewer-property-container{\n        padding-bottom: 30px;\n    }\n\n\n</style></div></body></html>","index.js":"{{ripple}}\n    // Render the PDF viewer control\n    var viewer = new ej.pdfviewer.PdfViewer({\n        documentPath: \"https://cdn.syncfusion.com/content/pdf/pdf-succinctly.pdf\",\n        resourceUrl: 'https://cdn.syncfusion.com/ej2/23.2.6/dist/ej2-pdfviewer-lib'\n\n    });\n    ej.pdfviewer.PdfViewer.Inject(ej.pdfviewer.Toolbar, ej.pdfviewer.Magnification, ej.pdfviewer.BookmarkView, ej.pdfviewer.ThumbnailView, ej.pdfviewer.TextSelection, ej.pdfviewer.TextSearch, ej.pdfviewer.Print, ej.pdfviewer.Navigation, ej.pdfviewer.LinkAnnotation, ej.pdfviewer.Annotation, ej.pdfviewer.FormFields, ej.pdfviewer.FormDesigner);\n\n    var menuItems = [\n        {\n            text: 'Search In Google',\n            id: 'search_in_google',\n            iconCss: 'e-icons e-de-ctnr-find'\n        },\n        {\n            text: 'Lock Annotation',\n            iconCss: 'e-icons e-lock',\n            id: 'lock_annotation'\n        },\n        {\n            text: 'Unlock Annotation',\n            iconCss: 'e-icons e-unlock',\n            id: 'unlock_annotation'\n        },\n        {\n            text: 'Lock Form Fields',\n            iconCss: 'e-icons e-lock',\n            id: 'read_only_true'\n        },\n        {\n            text: 'UnLock Form Fields',\n            iconCss: 'e-icons e-unlock',\n            id: 'read_only_false'\n        },\n    ];\n\n    var switchObj = new ejs.buttons.Switch({ checked: true });\n    switchObj.appendTo('#checked');\n\n    switchObj.change = function (args) {\n        if (args.checked) {\n            viewer.serviceUrl = '';\n        } else {\n            viewer.serviceUrl = 'http://localhost:62728/api/pdfviewer';\n        }\n        viewer.dataBind();\n        viewer.load(viewer.documentPath, null);\n    };\n    viewer.appendTo('#pdfViewer');\n\n    viewer.documentLoad = function (args) {\n        viewer.addCustomMenu(menuItems, false, false);\n    };\n\n    viewer.customContextMenuSelect = function (args) {\n        switch (args.id) {\n            case 'search_in_google':\n                for (var i = 0; i < viewer.textSelectionModule.selectionRangeArray.length; i++) {\n                    var content = viewer.textSelectionModule.selectionRangeArray[i].textContent;\n                    if ((viewer.textSelectionModule.isTextSelection) && (/\\S/.test(content))) {\n                        window.open('http://google.com/search?q=' + content);\n                    }\n                }\n                break;\n            case 'lock_annotation':\n                lockAnnotations(args);\n                break;\n            case 'unlock_annotation':\n                unlockAnnotations(args);\n                break;\n            case 'read_only_true':\n                setReadOnlyTrue(args);\n                break;\n            case 'read_only_false':\n                setReadOnlyFalse(args);\n                break;\n            case 'formfield properties':\n                break;\n            default:\n                break;\n        }\n    };\n\n    viewer.customContextMenuBeforeOpen = function (args) {\n        for (var i = 0; i < args.ids.length; i++) {\n            var search = document.getElementById(args.ids[i]);\n            if (search) {\n                search.style.display = 'none';\n                if (args.ids[i] === 'search_in_google' && (viewer.textSelectionModule) && viewer.textSelectionModule.isTextSelection) {\n                    search.style.display = 'block';\n                } else if (args.ids[i] === \"lock_annotation\" || args.ids[i] === \"unlock_annotation\") {\n                    var isLockOption = args.ids[i] === \"lock_annotation\";\n                    for (var j = 0; j < viewer.selectedItems.annotations.length; j++) {\n                        var selectedAnnotation = viewer.selectedItems.annotations[j];\n                        if (selectedAnnotation && selectedAnnotation.annotationSettings) {\n                            var shouldDisplay = (isLockOption && !selectedAnnotation.annotationSettings.isLock) ||\n                                (!isLockOption && selectedAnnotation.annotationSettings.isLock);\n                            search.style.display = shouldDisplay ? 'block' : 'none';\n                        }\n                    }\n                } else if ((args.ids[i] === \"read_only_true\" || args.ids[i] === \"read_only_false\") && viewer.selectedItems.formFields.length !== 0) {\n                    var isReadOnlyOption = args.ids[i] === \"read_only_true\";\n                    for (var k = 0; k < viewer.selectedItems.formFields.length; k++) {\n                        var selectedFormFields = viewer.selectedItems.formFields[k];\n                        if (selectedFormFields) {\n                            var selectedFormField = viewer.selectedItems.formFields[k].isReadonly;\n                            var displayMenu = (isReadOnlyOption && !selectedFormField) || (!isReadOnlyOption && selectedFormField);\n                            search.style.display = displayMenu ? 'block' : 'none';\n                        }\n                    }\n                } else if (args.ids[i] === 'formfield properties' && viewer.selectedItems.formFields.length !== 0) {\n                    search.style.display = 'block';\n                }\n            }\n        }\n    };\n\n    function lockAnnotations(args) {\n        for (var i = 0; i < viewer.annotationCollection.length; i++) {\n            if (viewer.annotationCollection[i].uniqueKey === viewer.selectedItems.annotations[0].id) {\n                viewer.annotationCollection[i].annotationSettings.isLock = true;\n                viewer.annotationCollection[i].isCommentLock = true;\n                viewer.annotation.editAnnotation(viewer.annotationCollection[i]);\n            }\n            args.cancel = false;\n        }\n    }\n\n    function unlockAnnotations(args) {\n        for (var i = 0; i < viewer.annotationCollection.length; i++) {\n            if (viewer.annotationCollection[i].uniqueKey === viewer.selectedItems.annotations[0].id) {\n                viewer.annotationCollection[i].annotationSettings.isLock = false;\n                viewer.annotationCollection[i].isCommentLock = false;\n                viewer.annotation.editAnnotation(viewer.annotationCollection[i]);\n            }\n            args.cancel = false;\n        }\n    }\n \n    function setReadOnlyTrue(args) {\n        var selectedFormFields = viewer.selectedItems.formFields;\n        for (var i = 0; i < selectedFormFields.length; i++) {\n            var selectFormFields = selectedFormFields[i];\n            if (selectFormFields) {\n                viewer.formDesignerModule.updateFormField(selectFormFields, {\n                    isReadOnly: true,\n                });\n            }\n            args.cancel = false;\n        }\n    }\n\n    function setReadOnlyFalse(args) {\n        var selectedFormFields = viewer.selectedItems.formFields;\n        for (var i = 0; i < selectedFormFields.length; i++) {\n            var selectFormFields = selectedFormFields[i];\n            if (selectFormFields) {\n                viewer.formDesignerModule.updateFormField(selectFormFields, {\n                    isReadOnly: false,\n                });\n            }\n            args.cancel = false;\n        }\n    }\n\n    var defaultCheckBoxObj = new ej.buttons.CheckBox({\n        change: contextmenuHelper,\n        cssClass: 'multiline',\n    });\n    defaultCheckBoxObj.appendTo('#hide-default-context-menu');\n\n    var positionCheckBoxObj = new ej.buttons.CheckBox({\n        change: contextmenuHelper,\n        cssClass: 'multiline',\n    });\n    positionCheckBoxObj.appendTo('#show-custom-menu-bottom');\n\n    function contextmenuHelper(args) {\n        viewer.addCustomMenu(menuItems, defaultCheckBoxObj.checked, positionCheckBoxObj.checked);\n    }\n"}