{"data-source.js":"var loadProgressBarTheme = function (args) {\n    var selectedTheme = location.hash.split('/')[1];\n    selectedTheme = selectedTheme ? selectedTheme : 'Tailwind3';\n    args.progressBar.theme = (selectedTheme.charAt(0).toUpperCase() +\n    selectedTheme.slice(1)).replace(/-dark/i, 'Dark').replace(/contrast/i, 'Contrast').replace(/-highContrast/i, 'HighContrast');\n        return selectedTheme;\n};","index.html":"<html><head><script src=\"//npmci.syncfusion.com/development/demos/progress-bar/angle/datasource.js\" type=\"text/javascript\"></script>\n<script src=\"https://cdn.syncfusion.com/ej2/28.1.33/dist/ej2.min.js\" type=\"text/javascript\"></script>\n    <link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\">\n\n    <style>\n            body{\n                touch-action:none;\n            }\n            .control-section{\n                margin-top:100px;\n            }\n        </style></head><body><div class=\"stackblitz-container {{theme}}\"><div class=\"control-section progress-bar-parent\">\n    <div class=\"row\" style=\"margin-top: 8%\">\n        <div class=\"col-lg-3 col-md-3 col-3\" align=\"center\">\n            <div id=\"angle-container\"></div>\n\n        </div>\n        <div class=\"col-lg-3 col-md-3 col-3\" align=\"center\">\n            <div id=\"vertical-container\"></div>\n        </div>\n        <div class=\"col-lg-3 col-md-3 col-3\" align=\"center\">\n\n            <div id=\"vsemi-container\"></div>\n\n        </div>\n        <div class=\"col-lg-3 col-md-3 col-3\" align=\"center\">\n            <div id=\"semi-container\"></div>\n        </div>\n    </div>\n    <div class=\"row\" align=\"center\">\n        <button id=\"reLoad\" class=\"e-control e-btn e-lib e-outline e-primary\">Reload</button>\n    </div>\n</div>\n\n\n<style>\n     #control-container {\n        padding: 0px !important;\n    }\n\n    #reLoad {\n        border-radius: 4px;\n        text-transform: capitalize;\n        margin-top: 3%;\n    }\n</style></div></body></html>","index.js":"{{ripple}}import './data-source';\n\n    function annotationElementContent(color, controlID) {\n        var content;\n        switch (controlID) {\n            case 'angle-container':\n                content = '100%';\n                break;\n            case 'vertical-container':\n                content = '100%';\n                break;\n            case 'vsemi-container':\n                content = '100%';\n                break;\n            case 'semi-container':\n                content = '100%';\n                break;\n        }\n        return ('<div id=\"point1\" style=\"font-size:24px;font-weight:bold;color: ' + color + ' \"><span>' + content + '</span></div>');\n    }\n    var progressLoad = function (args) {\n        var angleTheme = loadProgressBarTheme(args).toLowerCase();\n        switch (angleTheme) {\n            case 'material':\n                args.progressBar.annotations[0].content = annotationElementContent(annotationColors[0], args.progressBar.element.id);\n                break;\n            case 'fabric':\n                args.progressBar.annotations[0].content = annotationElementContent(annotationColors[1], args.progressBar.element.id);\n                break;\n            case 'bootstrap':\n                args.progressBar.annotations[0].content = annotationElementContent(annotationColors[2], args.progressBar.element.id);\n                break;\n            case 'bootstrap4':\n                args.progressBar.annotations[0].content = annotationElementContent(annotationColors[3], args.progressBar.element.id);\n                break;\n            case 'tailwind':\n            case 'tailwind3':\n                args.progressBar.annotations[0].content = annotationElementContent(annotationColors[4], args.progressBar.element.id);\n                break;\n            case 'bootstrap-dark':\n            case 'fabric-dark':\n            case 'material-dark':\n                args.progressBar.annotations[0].content = annotationElementContent(annotationColors[6], args.progressBar.element.id);\n                break;\n            case 'fluent':\n            case 'fluent-dark':\n            case 'bootstrap5':\n            case 'bootstrap5-dark':\n                args.progressBar.annotations[0].content = annotationElementContent(annotationColors[8], args.progressBar.element.id);\n                break;\n            case 'tailwind-dark':\n                args.progressBar.annotations[0].content = annotationElementContent(annotationColors[7], args.progressBar.element.id);\n                break;\n            case 'material3':\n                args.progressBar.annotations[0].content = annotationElementContent(annotationColors[9], args.progressBar.element.id);\n                break;\n            case 'material3-dark':\n                args.progressBar.annotations[0].content = annotationElementContent(annotationColors[10], args.progressBar.element.id);\n                break;\n            case \"fluent2\":\n                args.progressBar.annotations[0].content = annotationElementContent(annotationColors[11], args.progressBar.element.id);\n                break;\n            case \"fluent2-highcontrast\":\n                args.progressBar.annotations[0].content = annotationElementContent(annotationColors[12], args.progressBar.element.id);\n                break;\n            case \"fluent2-dark\":\n                args.progressBar.annotations[0].content = annotationElementContent(annotationColors[13], args.progressBar.element.id);\n                break;\n            case 'tailwind3-dark':\n                args.progressBar.annotations[0].content = annotationElementContent(annotationColors[14], args.progressBar.element.id);\n                break;\n            default:\n                args.progressBar.annotations[0].content = annotationElementContent(annotationColors[5], args.progressBar.element.id);\n                break;\n        }\n    };\n    var annotationColors = ['#e91e63', '#0078D6', '#317ab9', '#007bff', '#4F46E5', '#FFD939', '#9A9A9A', '#22D3EE', '#0D6EFD', '#6750A4', '#D0BCFF', '#0F6CBD', '#1AEBFF', '#115EA3', '#6366F1'];\n    var button = new ej.buttons.Button();\n    button = new ej.buttons.Button({ cssClass: 'e-outline', isPrimary: true });\n    button.appendTo('#reLoad');\n    var inverseSemiProgress = new ej.progressbar.ProgressBar({\n        type: 'Circular',\n        startAngle: 240,\n        endAngle: 120,\n        minimum: 0,\n        width: '160px',\n        height: '160px',\n        maximum: 100,\n        value: 100,\n        cornerRadius: 'Round',\n        trackThickness: 5,\n        progressThickness: 5,\n        animation: {\n            enable: true,\n            duration: 2000,\n            delay: 0,\n        },\n        annotations: [\n            {\n                content: '<div id=\"point1\" style=\"font-size:24px;font-weight:bold;color:#0078D6;fill:#0078D6\"><span>100%</span></div>'\n            },\n        ],\n        load: progressLoad\n    });\n    inverseSemiProgress.appendTo('#angle-container');\n    var verticalProgress = new ej.progressbar.ProgressBar({\n        type: 'Circular',\n        startAngle: 180,\n        endAngle: 0,\n        minimum: 0,\n        width: '160px',\n        height: '160px',\n        maximum: 100,\n        value: 100,\n        cornerRadius: 'Round',\n        trackThickness: 5,\n        progressThickness: 5,\n        animation: {\n            enable: true,\n            duration: 2000,\n            delay: 0,\n        },\n        annotations: [\n            {\n                content: '<div id=\"point1\" style=\"font-size:24px;font-weight:bold;color:#0078D6;fill:#0078D6\"><span>100%</span></div>'\n            },\n        ],\n        load: progressLoad\n    });\n    verticalProgress.appendTo('#vertical-container');\n    var verticalOppose = new ej.progressbar.ProgressBar({\n        type: 'Circular',\n        startAngle: 0,\n        endAngle: 180,\n        minimum: 0,\n        width: '160px',\n        height: '160px',\n        maximum: 100,\n        value: 100,\n        cornerRadius: 'Round',\n        trackThickness: 5,\n        progressThickness: 5,\n        animation: {\n            enable: true,\n            duration: 2000,\n            delay: 0,\n        },\n        annotations: [\n            {\n                content: '<div id=\"point1\" style=\"font-size:24px;font-weight:bold;color:#0078D6;fill:#0078D6\"><span>100%</span></div>'\n            },\n        ],\n        load: progressLoad\n    });\n    verticalOppose.appendTo('#vsemi-container');\n    var semiProgress = new ej.progressbar.ProgressBar({\n        type: 'Circular',\n        startAngle: 270,\n        endAngle: 90,\n        width: '160px',\n        height: '160px',\n        minimum: 0,\n        maximum: 100,\n        value: 100,\n        cornerRadius: 'Round',\n        trackThickness: 5,\n        progressThickness: 5,\n        animation: {\n            enable: true,\n            duration: 2000,\n            delay: 0,\n        },\n        annotations: [\n            {\n                content: '<div id=\"point1\" style=\"font-size:24px;font-weight:bold;color:#0078D6;fill:#0078D6\"><span>100%</span></div>'\n            },\n        ],\n        load: progressLoad\n    });\n    semiProgress.appendTo('#semi-container');\n    var replayBtn = document.getElementById('reLoad');\n    replayBtn.onclick = function () {\n        inverseSemiProgress.refresh();\n        verticalProgress.refresh();\n        verticalOppose.refresh();\n        semiProgress.refresh();\n    };\n"}