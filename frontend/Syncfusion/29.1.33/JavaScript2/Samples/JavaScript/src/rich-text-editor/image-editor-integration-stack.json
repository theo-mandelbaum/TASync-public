{"index.html":"<html><head><script src=\"https://cdn.syncfusion.com/ej2/28.1.33/dist/ej2.min.js\" type=\"text/javascript\"></script>\n    <link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\">\n\n    <style>\n            body{\n                touch-action:none;\n            }\n            .control-section{\n                margin-top:100px;\n            }\n        </style></head><body><div class=\"stackblitz-container {{theme}}\"><div class=\"control-section\">\n    <div class=\"sample-container\">\n        <div class=\"default-section\">\n            <div id=\"defaultRTE\">\n                <p>\n                  An image can be edited within a Rich Text Editor using an Image Editor.\n                  <img id=\"img1\" style=\"height: 350px;\" src=\"https://ej2.syncfusion.com/angular/demos/assets/image-editor/images/default.png\" aria-label=\"Bridge\">\n                </p>\n                <p>\n                  It allows users to quickly and easily add an Image Editor to their Rich Text Editor.\n                  It provides a variety of features, including image cropping, resizing, rotation, and more.\n                  Additionally, it supports a wide range of image formats, including JPEG, PNG, and GIF.\n                </p>\n              </div>\n            <div id=\"defaultDialog\">\n                <div id=\"imageeditor\">\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n\n\n\n</div></body></html>","index.js":"{{ripple}}/**\r\n * Rich Text Editor Image Editor integration sample\r\n */\r\n \r\n \r\n    var selection = new ej.richtexteditor.NodeSelection();\r\n    var header = 'Image Editor';\r\n    var range;\r\n    var saveSelection;\r\n    var dataURL;\r\n    var isLoaded = false;\r\n    var imageEditorObj;\r\n    var imageELement;\r\n\r\n    var dlgButtons = [\r\n        {\r\n            buttonModel: {\r\n                content: 'Insert',\r\n                isPrimary: true\r\n            },\r\n            click: onInsert.bind(this),\r\n        },\r\n        {\r\n            buttonModel: {\r\n                content: 'Cancel'\r\n            },\r\n            click: onCancel\r\n        },\r\n    ];\r\n\r\n    var defaultRTE = new ej.richtexteditor.RichTextEditor({\r\n        quickToolbarSettings: {\r\n            image: [\r\n                'Replace',\r\n                'Align',\r\n                'Caption',\r\n                'Remove',\r\n                '-',\r\n                'InsertLink',\r\n                'OpenImageLink',\r\n                'EditImageLink',\r\n                'RemoveImageLink',\r\n                'Display',\r\n                'AltText',\r\n                {\r\n                    tooltipText: 'Image Editor',\r\n                    template: '<button class=\"e-tbar-btn e-btn\" id=\"imageEditor\"><span class=\"e-btn-icon e-icons e-rte-image-editor\"></span>',\r\n                },\r\n            ],\r\n        },\r\n        toolbarClick: onToolbarClick\r\n    });\r\n    defaultRTE.appendTo('#defaultRTE');\r\n\r\n    var dialogObj = new ej.popups.Dialog({\r\n        buttons: dlgButtons,\r\n        open:open,\r\n        beforeOpen: OnBeforeOpen,\r\n        header: header,\r\n        visible: false,\r\n        showCloseIcon: true,\r\n        width: '800px',\r\n        height: '800px',\r\n        isModal: true,\r\n        close: onclose\r\n    });\r\n    dialogObj.appendTo('#defaultDialog');\r\n\r\n    function onToolbarClick(args){\r\n        if (args.item.tooltipText === 'Image Editor') {\r\n            range = selection.getRange(document);\r\n            saveSelection = selection.save(range, document);\r\n            dialogObj.show();\r\n            defaultRTE.quickToolbarModule.imageQTBar.hidePopup();\r\n          }\r\n    }\r\n\r\n    function onInsert() {\r\n        if (defaultRTE.formatter.getUndoRedoStack().length === 0) {\r\n          defaultRTE.formatter.saveData();\r\n        }\r\n        saveSelection.restore();\r\n        var canvas = document.createElement('CANVAS');\r\n        var ctx = canvas.getContext('2d');\r\n        var imgData = imageEditorObj.getImageData();\r\n        canvas.height = imgData.height;\r\n        canvas.width = imgData.width;\r\n        ctx.putImageData(imgData, 0, 0);\r\n        isLoaded = true;\r\n        defaultRTE.executeCommand('editImage', {\r\n          url: canvas.toDataURL(),\r\n          width: { width: canvas.width },\r\n          height: { height: canvas.height },\r\n          selection: saveSelection,\r\n          cssClass: imageELement.getAttribute('class').replace('e-rte-image', '')\r\n        });\r\n        defaultRTE.formatter.saveData();\r\n        defaultRTE.formatter.enableUndo(defaultRTE);\r\n        dispose();\r\n        dialogObj.hide();\r\n    }\r\n\r\n    function onCancel() {\r\n        dispose();\r\n        dialogObj.hide();\r\n        isLoaded = true;\r\n    }\r\n    function onclose() {\r\n        dispose();\r\n        dialogObj.hide();\r\n        isLoaded = true;\r\n    }\r\n    function open() {\r\n        imageEditorObj.update();\r\n        imageEditorObj.open(dataURL);\r\n    }\r\n\r\n    function OnBeforeOpen() {\r\n            isLoaded = false;\r\n        var selectNodes =\r\n            defaultRTE.formatter.editorManager.nodeSelection.getNodeCollection(range);\r\n        if (selectNodes.length == 1 && selectNodes[0].tagName == 'IMG') {\r\n            imageELement = selectNodes[0];\r\n            imageELement.crossOrigin = 'anonymous';\r\n            var canvas = document.createElement('CANVAS');\r\n            var ctx = canvas.getContext('2d');\r\n            canvas.height = imageELement.offsetHeight;\r\n            canvas.width = imageELement.offsetWidth;\r\n            imageELement.onload = function () {\r\n                ctx.drawImage(imageELement, 0, 0, canvas.width, canvas.height);\r\n                dataURL = canvas.toDataURL();\r\n            };\r\n            if (!isLoaded) {\r\n                imageEditorObj = new ej.imageeditor.ImageEditor({\r\n                    height: '450px'\r\n                });\r\n                imageEditorObj.appendTo('#imageeditor');\r\n            }\r\n        }\r\n    }\r\n\r\n    function dispose() {\r\n        if (imageEditorObj !== null && imageEditorObj !== undefined) {\r\n            var imageEditorInstance = ej.base.getComponent(document.getElementById('imageeditor'), 'image-editor');\r\n            if (imageEditorInstance !== null && imageEditorInstance !== undefined) {\r\n                imageEditorInstance.destroy();\r\n            }\r\n        }\r\n    }\r\n\r\n"}