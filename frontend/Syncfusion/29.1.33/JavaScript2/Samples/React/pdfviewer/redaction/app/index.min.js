/******/ (function(modules) { // webpackBootstrap
/******/ 	// install a JSONP callback for chunk loading
/******/ 	function webpackJsonpCallback(data) {
/******/ 		var chunkIds = data[0];
/******/ 		var moreModules = data[1];
/******/ 		var executeModules = data[2];
/******/
/******/ 		// add "moreModules" to the modules object,
/******/ 		// then flag all "chunkIds" as loaded and fire callback
/******/ 		var moduleId, chunkId, i = 0, resolves = [];
/******/ 		for(;i < chunkIds.length; i++) {
/******/ 			chunkId = chunkIds[i];
/******/ 			if(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 				resolves.push(installedChunks[chunkId][0]);
/******/ 			}
/******/ 			installedChunks[chunkId] = 0;
/******/ 		}
/******/ 		for(moduleId in moreModules) {
/******/ 			if(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {
/******/ 				modules[moduleId] = moreModules[moduleId];
/******/ 			}
/******/ 		}
/******/ 		if(parentJsonpFunction) parentJsonpFunction(data);
/******/
/******/ 		while(resolves.length) {
/******/ 			resolves.shift()();
/******/ 		}
/******/
/******/ 		// add entry modules from loaded chunk to deferred list
/******/ 		deferredModules.push.apply(deferredModules, executeModules || []);
/******/
/******/ 		// run deferred modules when all chunks ready
/******/ 		return checkDeferredModules();
/******/ 	};
/******/ 	function checkDeferredModules() {
/******/ 		var result;
/******/ 		for(var i = 0; i < deferredModules.length; i++) {
/******/ 			var deferredModule = deferredModules[i];
/******/ 			var fulfilled = true;
/******/ 			for(var j = 1; j < deferredModule.length; j++) {
/******/ 				var depId = deferredModule[j];
/******/ 				if(installedChunks[depId] !== 0) fulfilled = false;
/******/ 			}
/******/ 			if(fulfilled) {
/******/ 				deferredModules.splice(i--, 1);
/******/ 				result = __webpack_require__(__webpack_require__.s = deferredModule[0]);
/******/ 			}
/******/ 		}
/******/
/******/ 		return result;
/******/ 	}
/******/
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// object to store loaded and loading chunks
/******/ 	// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 	// Promise = chunk loading, 0 = chunk loaded
/******/ 	var installedChunks = {
/******/ 		"./samples/pdfviewer/redaction/app/index.min": 0
/******/ 	};
/******/
/******/ 	var deferredModules = [];
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	var jsonpArray = window["webpackJsonp"] = window["webpackJsonp"] || [];
/******/ 	var oldJsonpFunction = jsonpArray.push.bind(jsonpArray);
/******/ 	jsonpArray.push = webpackJsonpCallback;
/******/ 	jsonpArray = jsonpArray.slice();
/******/ 	for(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);
/******/ 	var parentJsonpFunction = oldJsonpFunction;
/******/
/******/
/******/ 	// add entry module to deferred list
/******/ 	deferredModules.push(["./samples/pdfviewer/redaction/app/index.tsx","pdfviewer.min"]);
/******/ 	// run deferred modules when ready
/******/ 	return checkDeferredModules();
/******/ })
/************************************************************************/
/******/ ({

/***/ "./samples/pdfviewer/redaction/app/index.tsx":
/*!***************************************************!*\
  !*** ./samples/pdfviewer/redaction/app/index.tsx ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Redaction = void 0;\nvar client_1 = __webpack_require__(/*! react-dom/client */ \"./node_modules/react-dom/client.js\");\nvar React = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\nvar ej2_react_pdfviewer_1 = __webpack_require__(/*! @syncfusion/ej2-react-pdfviewer */ \"./node_modules/@syncfusion/ej2-react-pdfviewer/index.js\");\nvar ej2_react_navigations_1 = __webpack_require__(/*! @syncfusion/ej2-react-navigations */ \"./node_modules/@syncfusion/ej2-react-navigations/index.js\");\nvar sample_base_1 = __webpack_require__(/*! ./sample-base */ \"./samples/pdfviewer/redaction/app/sample-base.tsx\");\nvar ej2_react_buttons_1 = __webpack_require__(/*! @syncfusion/ej2-react-buttons */ \"./node_modules/@syncfusion/ej2-react-buttons/index.js\");\nvar ej2_react_dropdowns_1 = __webpack_require__(/*! @syncfusion/ej2-react-dropdowns */ \"./node_modules/@syncfusion/ej2-react-dropdowns/index.js\");\nvar ej2_react_popups_1 = __webpack_require__(/*! @syncfusion/ej2-react-popups */ \"./node_modules/@syncfusion/ej2-react-popups/index.js\");\nvar ej2_react_inputs_1 = __webpack_require__(/*! @syncfusion/ej2-react-inputs */ \"./node_modules/@syncfusion/ej2-react-inputs/index.js\");\nvar viewer;\nvar Redaction = /** @class */ (function (_super) {\n    __extends(Redaction, _super);\n    function Redaction(props) {\n        var _this_1 = _super.call(this, props) || this;\n        _this_1.currentPageNumber = '1';\n        _this_1.fileName = 'programmatical-annotations.pdf';\n        _this_1.redactionCount = 0;\n        _this_1.asyncSettings = {\n            saveUrl: 'https://services.syncfusion.com/react/production/api/FileUploader/Save',\n            removeUrl: 'https://services.syncfusion.com/react/production/api/FileUploader/Remove'\n        };\n        _this_1.dropAreaRef = document.getElementsByClassName('drop-area-wrap')[0];\n        _this_1.allowedExtensions = '.png, .jpg, .jpeg';\n        _this_1.url = \"https://services.syncfusion.com/react/production/api/pdfviewer/Redaction\";\n        //To update page number when page has been changed\n        _this_1.onPageChange = function () {\n            _this_1.currentPageNumber = viewer.currentPageNumber.toString();\n            document.getElementById('e-pv-redact-sb-currentPage').textContent = _this_1.viewer.currentPageNumber.toString() + ' ';\n            _this_1.updatePageNavigation.bind(_this_1);\n        };\n        //Updating the total number of pages while loading\n        _this_1.documentLoaded = function () {\n            _this_1.viewer = document.getElementById('container').ej2_instances[0];\n            var pageCount = document.getElementById('e-pv-redact-sb-totalPage');\n            pageCount.textContent = '/ ' + viewer.pageCount;\n            (document.getElementById('e-pv-redact-sb-currentPage')).textContent = _this_1.viewer.currentPageNumber.toString();\n            _this_1.updatePageNavigation();\n            _this_1.updateRedaction();\n        };\n        //To update page number when the previous and next button is clicked\n        _this_1.updatePageNavigation = function () {\n            if (_this_1.viewer.currentPageNumber === 1) {\n                _this_1.toolbar.enableItems(document.getElementById('previousPage').parentElement, false);\n                _this_1.toolbar.enableItems(document.getElementById('nextPage').parentElement, true);\n            }\n            else if (viewer.currentPageNumber === viewer.pageCount) {\n                _this_1.toolbar.enableItems(document.getElementById('previousPage').parentElement, true);\n                _this_1.toolbar.enableItems(document.getElementById('nextPage').parentElement, false);\n            }\n            else {\n                _this_1.toolbar.enableItems(document.getElementById('previousPage').parentElement, true);\n                _this_1.toolbar.enableItems(document.getElementById('nextPage').parentElement, true);\n            }\n        };\n        //To update the redaction count\n        _this_1.updateRedaction = function () {\n            if (_this_1.redactionCount <= 0) {\n                _this_1.toolbar.enableItems(document.getElementById('redacticon').parentElement, false);\n            }\n            else {\n                _this_1.toolbar.enableItems(document.getElementById('redacticon').parentElement, true);\n            }\n        };\n        //Updating the number of redaction while the annotation has been added\n        _this_1.annotationAdd = function (e) {\n            var pdfAnnotationList = new Array();\n            pdfAnnotationList = _this_1.viewer.annotationCollection;\n            var selectedAnnotationIndex = pdfAnnotationList.findIndex(function (item) { return item.annotationId == e.annotationId; });\n            if (selectedAnnotationIndex != -1) {\n                _this_1.annotation = pdfAnnotationList[selectedAnnotationIndex];\n            }\n            if (_this_1.annotation.author == \"Redaction\" || _this_1.annotation.customStampName == \"Image\" || _this_1.annotation.author == \"Pattern\" || _this_1.annotation.author == \"Text\") {\n                _this_1.redactionCount = _this_1.redactionCount + 1;\n                _this_1.updateRedaction();\n            }\n        };\n        //Updating the number of redaction while the annotation has been removed\n        _this_1.annotationRemove = function () {\n            if (_this_1.annotation.author == \"Redaction\" || _this_1.annotation.customStampName == \"Image\" || _this_1.annotation.author == \"Pattern\" || _this_1.annotation.author == \"Text\") {\n                _this_1.redactionCount = _this_1.redactionCount - 1;\n                _this_1.updateRedaction();\n            }\n        };\n        _this_1.downloadDocument = function (blobUrl) {\n            var Url = URL || webkitURL;\n            blobUrl = Url.createObjectURL(blobUrl);\n            viewer.fileName = _this_1.fileName;\n            var anchorElement = document.createElement('a');\n            if (anchorElement.click) {\n                anchorElement.href = blobUrl;\n                anchorElement.target = '_parent';\n                if ('download' in anchorElement) {\n                    var downloadFileName = viewer.fileName || 'downloadedFile.pdf';\n                    if (downloadFileName) {\n                        if (downloadFileName.endsWith('.pdf')) {\n                            anchorElement.download = downloadFileName;\n                        }\n                        else {\n                            var splitPdf = downloadFileName.split('.pdf')[0] + '.pdf';\n                            anchorElement.download = splitPdf;\n                        }\n                    }\n                    else {\n                        anchorElement.download = 'Default.pdf';\n                    }\n                }\n                (document.body || document.documentElement).appendChild(anchorElement);\n                anchorElement.click();\n            }\n            else {\n                if (window.top === window &&\n                    blobUrl.split('#')[0] === window.location.href.split('#')[0]) {\n                    var padCharacter = blobUrl.indexOf('?') === -1 ? '?' : '&';\n                    blobUrl = blobUrl.replace(/#|$/, padCharacter + '$&');\n                }\n                window.open(blobUrl, '_parent');\n            }\n        };\n        //To download the redacted pdf\n        _this_1.download = function () {\n            var _this = _this_1;\n            viewer.saveAsBlob().then(function (value) {\n                var reader = new FileReader();\n                reader.readAsDataURL(value);\n                reader.onload = function (e) {\n                    var _a;\n                    var base64String = (_a = e.target) === null || _a === void 0 ? void 0 : _a.result;\n                    var xhr = new XMLHttpRequest();\n                    xhr.open('POST', _this.url, true);\n                    xhr.setRequestHeader('Content-type', 'application/json; charset=UTF-8');\n                    var requestData = JSON.stringify({ base64String: base64String });\n                    xhr.onload = function () {\n                        if (xhr.status === 200) {\n                            var blobUrl = _this.createBlobUrl(xhr.responseText.split('base64,')[1], 'application/pdf');\n                            _this.downloadDocument(blobUrl);\n                        }\n                        else {\n                            console.error('Download failed:', xhr.statusText);\n                        }\n                    };\n                    xhr.onerror = function () {\n                        console.error('An error occurred during the download:', xhr.statusText);\n                    };\n                    xhr.send(requestData);\n                };\n            }).catch(function (error) {\n                console.error('Error saving Blob:', error);\n            });\n        };\n        _this_1.createBlobUrl = function (base64String, contentType) {\n            var sliceSize = 512;\n            var byteCharacters = atob(base64String);\n            var byteArrays = [];\n            for (var offset = 0; offset < byteCharacters.length; offset += sliceSize) {\n                var slice = byteCharacters.slice(offset, offset + sliceSize);\n                var byteNumbers = new Array(slice.length);\n                for (var i = 0; i < slice.length; i++) {\n                    byteNumbers[parseInt(i.toString(), 10)] = slice.charCodeAt(i);\n                }\n                var byteArray = new Uint8Array(byteNumbers);\n                byteArrays.push(byteArray);\n            }\n            var blob = new Blob(byteArrays, { type: contentType });\n            return blob;\n        };\n        _this_1.uploadObj = React.createRef();\n        return _this_1;\n    }\n    Redaction.prototype.componentDidMount = function () {\n        viewer = document.getElementById('container').ej2_instances[0];\n    };\n    Redaction.prototype.render = function () {\n        var _this_1 = this;\n        var data = ['10%', '25%', '50%', '75%', '100%', '200%', '400%'];\n        function template() {\n            return (React.createElement(\"div\", null,\n                React.createElement(\"span\", { id: \"e-pv-redact-sb-currentPage\", title: \"Current Page\" }, \"1 \"),\n                React.createElement(\"span\", { id: \"e-pv-redact-sb-totalPage\", title: \"Total Page\" }, \"/ 1\")));\n        }\n        var clickHandler = function (args) {\n            switch (args.item.id) {\n                case 'pdfviewer_open':\n                    {\n                        var fileUpload = document.getElementById('fileUpload');\n                        fileUpload.click();\n                        break;\n                    }\n                case 'text_annot':\n                    {\n                        this.viewer.rectangleSettings.fillColor = '#a3a2a0';\n                        this.viewer.rectangleSettings.strokeColor = '#a3a2a0';\n                        this.viewer.rectangleSettings.author = 'Text';\n                        this.viewer.annotation.setAnnotationMode('Rectangle');\n                        break;\n                    }\n                case 'image_annot':\n                    {\n                        this.dialogInstance.show();\n                        break;\n                    }\n                case 'pattern_annot':\n                    {\n                        this.viewer.rectangleSettings.fillColor = '#dedfe0';\n                        this.viewer.rectangleSettings.strokeColor = '#dedfe0';\n                        this.viewer.rectangleSettings.author = 'Pattern';\n                        this.viewer.annotation.setAnnotationMode('Rectangle');\n                        break;\n                    }\n                case 'black_annot':\n                    {\n                        this.viewer.rectangleSettings.fillColor = '#000000';\n                        this.viewer.rectangleSettings.strokeColor = '#000000';\n                        this.viewer.rectangleSettings.author = 'Redaction';\n                        this.viewer.annotation.setAnnotationMode('Rectangle');\n                        break;\n                    }\n                case 'white_annot':\n                    {\n                        this.viewer.rectangleSettings.fillColor = '#ffffff';\n                        this.viewer.rectangleSettings.strokeColor = '#ffffff';\n                        this.viewer.rectangleSettings.author = 'Redaction';\n                        this.viewer.annotation.setAnnotationMode('Rectangle');\n                        break;\n                    }\n                case 'previousPage':\n                    {\n                        viewer.navigation.goToPreviousPage();\n                        break;\n                    }\n                case 'nextPage':\n                    {\n                        viewer.navigation.goToNextPage();\n                        break;\n                    }\n                case 'redacticon':\n                    {\n                        if (this.redactionCount > 0) {\n                            var _this_2 = this;\n                            viewer.saveAsBlob().then(function (value) {\n                                var data = value;\n                                var reader = new FileReader();\n                                reader.readAsDataURL(data);\n                                reader.onload = function (e) {\n                                    var _a;\n                                    var base64String = (_a = e.target) === null || _a === void 0 ? void 0 : _a.result;\n                                    var xhr = new XMLHttpRequest();\n                                    xhr.open('POST', _this_2.url, true);\n                                    xhr.setRequestHeader('Content-type', 'application/json; charset=UTF-8');\n                                    var requestData = JSON.stringify({ base64String: base64String });\n                                    xhr.onload = function () {\n                                        if (xhr.status === 200) {\n                                            viewer.load(xhr.responseText, null);\n                                        }\n                                        else {\n                                            console.error('Redaction failed:', xhr.statusText);\n                                        }\n                                    };\n                                    xhr.onerror = function () {\n                                        console.error('An error occurred during the redaction:', xhr.statusText);\n                                    };\n                                    xhr.send(requestData);\n                                };\n                            });\n                            this.redactionCount = 0;\n                            this.updateRedaction();\n                        }\n                        break;\n                    }\n            }\n        };\n        //To get the header in upload image dialog box\n        var header = function () {\n            return (React.createElement(\"div\", null,\n                React.createElement(\"div\", { id: \"dlg-template\", title: \"Upload image\", className: \"e-icon-settings\" }, \"Upload Image\")));\n        };\n        //When the cancel button is clicked\n        var CloseDialog = function () {\n            this.dialogInstance.hide();\n        };\n        //To get the footer content in upload image dialog box\n        var footerTemplate = function () {\n            return (React.createElement(\"div\", null,\n                React.createElement(\"button\", { id: \"cancelButton\", className: \"e-control e-btn e-primary\", \"data-ripple\": \"true\", onClick: CloseDialog.bind(_this_1) }, \"Cancel\")));\n        };\n        //To get the content of dialog box\n        var contentTemplate = function () {\n            return (React.createElement(\"div\", { id: 'dialog' },\n                React.createElement(\"div\", { id: 'e-pv-redact-sb-defaultfileupload' },\n                    React.createElement(\"div\", { className: \"drop-area-wrap\", id: 'e-pv-redact-sb-drop-area-wrap' },\n                        React.createElement(\"div\", null,\n                            React.createElement(ej2_react_inputs_1.UploaderComponent, { id: 'fileupload', type: 'file', ref: function (scope) { _this_1.uploadObj.current = scope; }, asyncSettings: _this_1.asyncSettings, change: onFileChange.bind(_this_1), dropArea: _this_1.dropAreaRef, allowedExtensions: _this_1.allowedExtensions })),\n                        React.createElement(\"div\", null, \"(Only JPG and PNG images will be accepted)\")),\n                    React.createElement(\"div\", { className: \"e-pv-redact-sb-image-list\" },\n                        React.createElement(\"div\", { id: 'imageContainer', className: \"e-pv-redact-sb-image-container\" },\n                            React.createElement(\"img\", { id: 'imageView', className: \"e-pv-redact-sb-image-source\", style: { 'display': 'none' } }))))));\n        };\n        //When the zoom dropdown is changed\n        var zoomValueChange = function (args) {\n            var zoom = (args).value;\n            var previousZoom = (args).previousItemData.value;\n            if (zoom !== null || previousZoom !== null) {\n                var zoomchange = parseInt(zoom.replace(\"%\", \"\"), 10);\n                viewer.magnificationModule.zoomTo(zoomchange);\n            }\n        };\n        //To display the zoom percentage dropdown\n        var dropDown = function () {\n            return (React.createElement(\"div\", null,\n                React.createElement(ej2_react_dropdowns_1.ComboBoxComponent, { width: 88, popupWidth: 80, value: '100%', dataSource: data, showClearButton: false, change: zoomValueChange.bind(this) })));\n        };\n        var imageSrc;\n        var customStampSource;\n        var onFileChange = function (args) {\n            var file = args.file[0].rawFile;\n            var imageElement = document.getElementById('imageView');\n            var imageElementContainer = document.getElementById('imageContainer');\n            var reader = new FileReader();\n            var _this = this;\n            reader.onload = function (e) {\n                var base64String = e.target ? e.target.result : null;\n                imageSrc = base64String;\n                customStampSource = imageSrc;\n                (imageElement).src = imageSrc;\n                imageElementContainer.className =\n                    'image-container image-container-selected';\n                (imageElement).style.display = 'block';\n                // Bind click event to the image element\n                imageElement.addEventListener('click', handleImageClick.bind(_this));\n            };\n            reader.readAsDataURL(file);\n        };\n        var handleImageClick = function () {\n            customStampSource = imageSrc;\n            this.dialogInstance.hide();\n            addImage();\n        };\n        //To add the image in pdf\n        var addImage = function () {\n            viewer.stampSettings.author = \"Image\";\n            viewer.customStampSettings = {\n                width: 200,\n                author: 'Image',\n                height: 125,\n                isAddToMenu: false,\n                enableCustomStamp: false\n            };\n            viewer.customStamp = [\n                {\n                    customStampName: 'Image',\n                    customStampImageSource: customStampSource\n                },\n            ];\n        };\n        return (React.createElement(\"div\", null,\n            React.createElement(\"div\", { className: \"control-section\", id: 'e-pv-redact-sb-panel' },\n                React.createElement(\"div\", { className: \"flex-container\", id: \"e-pv-redact-sb-flexContainer\" }),\n                React.createElement(\"div\", { className: 'control-container' },\n                    React.createElement(ej2_react_navigations_1.AppBarComponent, { colorMode: \"Primary\" },\n                        React.createElement(\"span\", { className: \"regular\" }, \"Redaction\"),\n                        React.createElement(\"div\", { className: \"e-appbar-spacer\" }),\n                        React.createElement(ej2_react_buttons_1.ButtonComponent, { cssClass: 'e-inherit ', iconCss: 'e-icons e-download e-btn-icon e-icon-left', id: 'download_pdf', onClick: this.download }, \"Download\"))),\n                React.createElement(\"div\", { className: 'primaryToolbar', id: 'toolbar_default' },\n                    React.createElement(ej2_react_navigations_1.ToolbarComponent, { ref: function (scope) { _this_1.primaryToolbar = scope; }, clicked: clickHandler.bind(this), id: 'e-pv-redact-sb-toolbar' },\n                        React.createElement(ej2_react_navigations_1.ItemsDirective, null,\n                            React.createElement(ej2_react_navigations_1.ItemDirective, { prefixIcon: 'e-icon e-folder', tooltipText: 'Open', cssClass: 'e-pv-redact-sb-open-container', id: 'pdfviewer_open', text: 'Open' }),\n                            React.createElement(ej2_react_navigations_1.ItemDirective, { type: 'Separator' }),\n                            React.createElement(ej2_react_navigations_1.ItemDirective, { prefixIcon: 'e-icon e-text-annotation', tooltipText: 'Text', cssClass: 'e-pv-redact-sb-font-container', text: 'Text', id: 'text_annot' }),\n                            React.createElement(ej2_react_navigations_1.ItemDirective, { prefixIcon: 'e-icons e-image', tooltipText: 'Image', cssClass: 'e-pv-redact-sb-image-container', text: 'Image', id: 'image_annot' }),\n                            React.createElement(ej2_react_navigations_1.ItemDirective, { prefixIcon: 'e-icons e-opacity', tooltipText: 'Pattern', cssClass: 'e-pv-redact-sb-pattern-container', text: 'Pattern', id: 'pattern_annot' }),\n                            React.createElement(ej2_react_navigations_1.ItemDirective, { prefixIcon: 'e-icons black-out', tooltipText: 'Blackout', cssClass: 'e-pv-redact-sb-black-out-container', text: 'Blackout', id: 'black_annot' }),\n                            React.createElement(ej2_react_navigations_1.ItemDirective, { prefixIcon: 'e-icons white-out', tooltipText: 'Whiteout', cssClass: 'e-pv-redact-sb-white-out-container', text: 'Whiteout', id: 'white_annot' }),\n                            React.createElement(ej2_react_navigations_1.ItemDirective, { type: 'Separator' }),\n                            React.createElement(ej2_react_navigations_1.ItemDirective, { prefixIcon: 'e-icons e-redact', tooltipText: 'Redaction', cssClass: 'e-pv-redact-sb-redaction-container', text: 'Redact', id: 'redacticon', disabled: true })))),\n                React.createElement(\"div\", { className: 'e-pv-redact-sb-secondary-toolbar', id: 'toolbar_secondary' },\n                    React.createElement(ej2_react_navigations_1.ToolbarComponent, { ref: function (scope) { _this_1.toolbar = scope; }, clicked: clickHandler.bind(this), id: 'e-pv-redact-sb-toolbar-secondary' },\n                        React.createElement(ej2_react_navigations_1.ItemsDirective, null,\n                            React.createElement(ej2_react_navigations_1.ItemDirective, { prefixIcon: 'e-icons e-chevron-left', cssClass: 'e-pv-redact-sb-previous-container', tooltipText: \"Previous Page\", id: 'previousPage', disabled: true }),\n                            React.createElement(ej2_react_navigations_1.ItemDirective, { template: template, tooltipText: \"Page Number\" }),\n                            React.createElement(ej2_react_navigations_1.ItemDirective, { prefixIcon: 'e-icon e-chevron-right', cssClass: 'e-pv-redact-sb-next-container', tooltipText: \"Next Page\", id: 'nextPage', disabled: true }),\n                            React.createElement(ej2_react_navigations_1.ItemDirective, { cssClass: 'percentage', type: \"Input\", tooltipText: \"Zoom\", template: dropDown, align: \"Left\" })))),\n                React.createElement(\"div\", { id: \"targetDialog\", className: \"dialog-element\" },\n                    React.createElement(ej2_react_popups_1.DialogComponent, { header: header, footerTemplate: footerTemplate, content: contentTemplate, showCloseIcon: true, target: \"#targetDialog\", width: '437px', height: '255px', visible: false, isModal: true, ref: function (scope) { _this_1.dialogInstance = scope; }, id: 'e-pv-redact-sb-dialog' })),\n                React.createElement(ej2_react_pdfviewer_1.PdfViewerComponent, { ref: function (scope) { _this_1.viewer = scope; }, id: \"container\", documentPath: \"https://cdn.syncfusion.com/content/pdf/programmatical-annotations.pdf\", resourceUrl: \"https://cdn.syncfusion.com/ej2/27.1.55/dist/ej2-pdfviewer-lib\", style: { 'height': '640px' }, enableToolbar: false, enableNavigationToolbar: false, enableAnnotationToolbar: false, enableCommentPanel: false, documentLoad: this.documentLoaded, pageChange: this.onPageChange, annotationAdd: this.annotationAdd, annotationRemove: this.annotationRemove },\n                    React.createElement(ej2_react_pdfviewer_1.Inject, { services: [ej2_react_pdfviewer_1.Toolbar, ej2_react_pdfviewer_1.Magnification, ej2_react_pdfviewer_1.Navigation, ej2_react_pdfviewer_1.LinkAnnotation, ej2_react_pdfviewer_1.BookmarkView, ej2_react_pdfviewer_1.ThumbnailView, ej2_react_pdfviewer_1.Print, ej2_react_pdfviewer_1.TextSelection, ej2_react_pdfviewer_1.TextSearch, ej2_react_pdfviewer_1.Annotation, ej2_react_pdfviewer_1.FormFields, ej2_react_pdfviewer_1.FormDesigner, ej2_react_pdfviewer_1.PageOrganizer] })),\n                React.createElement(\"input\", { type: \"file\", id: \"fileUpload\", accept: \".pdf\", onChange: this.readFile.bind(this), style: { 'display': 'block', 'visibility': 'hidden', 'width': '0', 'height': '0' } }))));\n    };\n    //To read the file when loaded\n    Redaction.prototype.readFile = function (evt) {\n        var proxy = this;\n        var uploadedFiles = evt.target.files;\n        var uploadedFile = uploadedFiles[0];\n        this.fileName = uploadedFile.name;\n        var reader = new FileReader();\n        reader.readAsDataURL(uploadedFile);\n        reader.onload = function (e) {\n            var uploadedFileUrl = e.currentTarget.result;\n            viewer.documentPath = uploadedFileUrl;\n            viewer.fileName = proxy.fileName;\n            viewer.downloadFileName = proxy.fileName;\n        };\n    };\n    return Redaction;\n}(sample_base_1.SampleBase));\nexports.Redaction = Redaction;\nvar root = (0, client_1.createRoot)(document.getElementById('sample'));\nroot.render(React.createElement(Redaction, null));\n\n\n//# sourceURL=webpack:///./samples/pdfviewer/redaction/app/index.tsx?");

/***/ }),

/***/ "./samples/pdfviewer/redaction/app/sample-base.tsx":
/*!*********************************************************!*\
  !*** ./samples/pdfviewer/redaction/app/sample-base.tsx ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.updateSampleSection = exports.SampleBase = void 0;\nvar React = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\nvar ej2_base_1 = __webpack_require__(/*! @syncfusion/ej2-base */ \"./node_modules/@syncfusion/ej2-base/index.js\");\n(0, ej2_base_1.enableRipple)(window.ripple);\nvar SampleBase = /** @class */ (function (_super) {\n    __extends(SampleBase, _super);\n    function SampleBase() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    SampleBase.prototype.rendereComplete = function () {\n        /**custom render complete function */\n    };\n    SampleBase.prototype.componentDidMount = function () {\n        var _this = this;\n        setTimeout(function () {\n            _this.rendereComplete();\n        });\n    };\n    return SampleBase;\n}(React.PureComponent));\nexports.SampleBase = SampleBase;\nfunction updateSampleSection() { }\nexports.updateSampleSection = updateSampleSection;\n\n\n//# sourceURL=webpack:///./samples/pdfviewer/redaction/app/sample-base.tsx?");

/***/ })

/******/ });