/******/ (function(modules) { // webpackBootstrap
/******/ 	// install a JSONP callback for chunk loading
/******/ 	function webpackJsonpCallback(data) {
/******/ 		var chunkIds = data[0];
/******/ 		var moreModules = data[1];
/******/ 		var executeModules = data[2];
/******/
/******/ 		// add "moreModules" to the modules object,
/******/ 		// then flag all "chunkIds" as loaded and fire callback
/******/ 		var moduleId, chunkId, i = 0, resolves = [];
/******/ 		for(;i < chunkIds.length; i++) {
/******/ 			chunkId = chunkIds[i];
/******/ 			if(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 				resolves.push(installedChunks[chunkId][0]);
/******/ 			}
/******/ 			installedChunks[chunkId] = 0;
/******/ 		}
/******/ 		for(moduleId in moreModules) {
/******/ 			if(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {
/******/ 				modules[moduleId] = moreModules[moduleId];
/******/ 			}
/******/ 		}
/******/ 		if(parentJsonpFunction) parentJsonpFunction(data);
/******/
/******/ 		while(resolves.length) {
/******/ 			resolves.shift()();
/******/ 		}
/******/
/******/ 		// add entry modules from loaded chunk to deferred list
/******/ 		deferredModules.push.apply(deferredModules, executeModules || []);
/******/
/******/ 		// run deferred modules when all chunks ready
/******/ 		return checkDeferredModules();
/******/ 	};
/******/ 	function checkDeferredModules() {
/******/ 		var result;
/******/ 		for(var i = 0; i < deferredModules.length; i++) {
/******/ 			var deferredModule = deferredModules[i];
/******/ 			var fulfilled = true;
/******/ 			for(var j = 1; j < deferredModule.length; j++) {
/******/ 				var depId = deferredModule[j];
/******/ 				if(installedChunks[depId] !== 0) fulfilled = false;
/******/ 			}
/******/ 			if(fulfilled) {
/******/ 				deferredModules.splice(i--, 1);
/******/ 				result = __webpack_require__(__webpack_require__.s = deferredModule[0]);
/******/ 			}
/******/ 		}
/******/
/******/ 		return result;
/******/ 	}
/******/
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// object to store loaded and loading chunks
/******/ 	// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 	// Promise = chunk loading, 0 = chunk loaded
/******/ 	var installedChunks = {
/******/ 		"./samples/diagram/grouping-and-ordering-functional/app/index.min": 0
/******/ 	};
/******/
/******/ 	var deferredModules = [];
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	var jsonpArray = window["webpackJsonp"] = window["webpackJsonp"] || [];
/******/ 	var oldJsonpFunction = jsonpArray.push.bind(jsonpArray);
/******/ 	jsonpArray.push = webpackJsonpCallback;
/******/ 	jsonpArray = jsonpArray.slice();
/******/ 	for(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);
/******/ 	var parentJsonpFunction = oldJsonpFunction;
/******/
/******/
/******/ 	// add entry module to deferred list
/******/ 	deferredModules.push(["./samples/diagram/grouping-and-ordering-functional/app/index.tsx","diagrams.min"]);
/******/ 	// run deferred modules when ready
/******/ 	return checkDeferredModules();
/******/ })
/************************************************************************/
/******/ ({

/***/ "./samples/diagram/grouping-and-ordering-functional/app/index.tsx":
/*!************************************************************************!*\
  !*** ./samples/diagram/grouping-and-ordering-functional/app/index.tsx ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar client_1 = __webpack_require__(/*! react-dom/client */ \"./node_modules/react-dom/client.js\");\n// Import React and necessary components from Syncfusion's EJ2 React Diagrams library for building diagrams.\nvar React = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\nvar ej2_react_diagrams_1 = __webpack_require__(/*! @syncfusion/ej2-react-diagrams */ \"./node_modules/@syncfusion/ej2-react-diagrams/index.js\");\nvar sample_base_1 = __webpack_require__(/*! ./sample-base */ \"./samples/diagram/grouping-and-ordering-functional/app/sample-base.tsx\");\n// Importing CSS for font icons\nvar ej2_react_navigations_1 = __webpack_require__(/*! @syncfusion/ej2-react-navigations */ \"./node_modules/@syncfusion/ej2-react-navigations/index.js\");\nvar ej2_react_dropdowns_1 = __webpack_require__(/*! @syncfusion/ej2-react-dropdowns */ \"./node_modules/@syncfusion/ej2-react-dropdowns/index.js\");\nvar ej2_react_inputs_1 = __webpack_require__(/*! @syncfusion/ej2-react-inputs */ \"./node_modules/@syncfusion/ej2-react-inputs/index.js\");\n// Holds instances of DiagramComponent, ToolbarComponent, and HTMLElements for palette icons and spaces.\nvar diagramInstance;\nvar toolbarEditor;\nvar paletteIconInstance;\nvar paletteSpaceInstance;\n// Creates a basic shape node for the diagram.\nvar createNode = function (id, offsetX, offsetY, width, height, shape, annotations, cornerRadius) {\n    if (annotations === void 0) { annotations = []; }\n    if (cornerRadius === void 0) { cornerRadius = 0; }\n    return ({\n        id: id,\n        offsetX: offsetX,\n        offsetY: offsetY,\n        width: width,\n        height: height,\n        shape: { type: \"Basic\", shape: shape, cornerRadius: cornerRadius },\n        annotations: annotations,\n    });\n};\n// Creates a group node for organizing multiple nodes.\nvar createGroupNode = function (id, children, padding, annotations) { return ({\n    id: id,\n    children: children,\n    padding: padding,\n    annotations: annotations\n}); };\n// Initializes nodes representing key elements in a diagram.\nvar nodes = [\n    createNode('Diamond', 350, 250, 100, 100, 'Diamond', [{ content: 'Decision' }]),\n    createNode('ellipse', 150, 250, 100, 60, 'Ellipse', [{ content: 'Start/Stop' }]),\n    createNode('rectangle', 150, 400, 100, 60, 'Rectangle', [{ content: 'Process' }]),\n    createNode('node1', 150, 100, 100, 55, 'Rectangle'),\n    createNode('node2', 350, 100, 90, 55, 'Rectangle', [], 5),\n    createGroupNode('group', ['node1', 'node2'], { left: 10, right: 10, top: 10, bottom: 10 }, [{ content: 'Group 1' }])\n];\n// Creates basic shapes for the symbol palette.\nvar createBasicShape = function (id, shape) { return ({\n    id: id,\n    shape: { type: \"Basic\", shape: shape },\n    style: { strokeWidth: 2 }\n}); };\n// Initializes basic shapes for use in the symbol palette.\nvar basicShapes = [\n    createBasicShape('Rectangle', 'Rectangle'),\n    createBasicShape('Ellipse', 'Ellipse'),\n    createBasicShape('Hexagon', 'Hexagon'),\n    createBasicShape('Parallelogram', 'Parallelogram'),\n    createBasicShape('Triangle', 'Triangle'),\n    createBasicShape('Plus', 'Plus'),\n    createBasicShape('Star', 'Star'),\n    createBasicShape('Pentagon', 'Pentagon'),\n    createBasicShape('Heptagon', 'Heptagon'),\n    createBasicShape('Octagon', 'Octagon'),\n    createBasicShape('Trapezoid', 'Trapezoid'),\n    createBasicShape('Decagon', 'Decagon'),\n    createBasicShape('RightTriangle', 'RightTriangle'),\n    createBasicShape('Cylinder', 'Cylinder'),\n    createBasicShape('Diamond', 'Diamond')\n];\n// Initializes user handles for interaction with diagram elements.\nvar handles = [\n    {\n        name: 'Clone',\n        pathData: 'M0,2.4879999 L0.986,2.4879999 0.986,9.0139999 6.9950027,9.0139999 6.9950027,10 0.986,10 C0.70400238,10 0.47000122,9.9060001 0.28100207,9.7180004 0.09400177,9.5300007 0,9.2959995 0,9.0139999 z M3.0050011,0 L9.0140038,0 C9.2960014,0 9.5300026,0.093999863 9.7190018,0.28199956 9.906002,0.47000027 10,0.70399952 10,0.986 L10,6.9949989 C10,7.2770004 9.906002,7.5160007 9.7190018,7.7110004 9.5300026,7.9069996 9.2960014,8.0049992 9.0140038,8.0049992 L3.0050011,8.0049992 C2.7070007,8.0049992 2.4650002,7.9069996 2.2770004,7.7110004 2.0890007,7.5160007 1.9950027,7.2770004 1.9950027,6.9949989 L1.9950027,0.986 C1.9950027,0.70399952 2.0890007,0.47000027 2.2770004,0.28199956 2.4650002,0.093999863 2.7070007,0 3.0050011,0 z',\n        tooltip: { content: 'Clone' },\n        visible: true,\n        offset: 1,\n        side: 'Bottom',\n        margin: { top: 0, bottom: 0, left: 0, right: 0 },\n    },\n    {\n        name: 'Delete',\n        pathData: 'M0.54700077,2.2130003 L7.2129992,2.2130003 7.2129992,8.8800011 C7.2129992,9.1920013 7.1049975,9.4570007 6.8879985,9.6739998 6.6709994,9.8910007 6.406,10 6.0939997,10 L1.6659999,10 C1.3539997,10 1.0890004,9.8910007 0.87200136,9.6739998 0.65500242,9.4570007 0.54700071,9.1920013 0.54700077,8.8800011 z M2.4999992,0 L5.2600006,0 5.8329986,0.54600048 7.7599996,0.54600048 7.7599996,1.6660004 0,1.6660004 0,0.54600048 1.9270014,0.54600048 z',\n        tooltip: { content: 'Delete' },\n        visible: true,\n        offset: 0,\n        side: 'Bottom',\n        margin: { top: 0, bottom: 0, left: 0, right: 0 },\n    },\n    {\n        name: 'Draw',\n        pathData: 'M3.9730001,0 L8.9730001,5.0000007 3.9730001,10.000001 3.9730001,7.0090005 0,7.0090005 0,2.9910006 3.9730001,2.9910006 z',\n        tooltip: { content: 'Draw' },\n        visible: true,\n        offset: 0.5,\n        side: 'Right',\n        margin: { top: 0, bottom: 0, left: 0, right: 0 },\n    },\n];\nvar drawingNode;\n// CSS styles for the sample application's layout and appearance.\nvar sample_css = \"\\n\\n/* For toolbar size */\\n.db-toolbar-container {\\n    width: 100% ;\\n   height: 44px;\\n}\\n\\n/* Palette Container */\\n.db-palette-parent {\\n    background-color:#fafafa;\\n    width: 255px!important;\\n    float: left;\\n    height:calc(100% - 28px);\\n}\\n\\n/* Diagram Container */\\n.db-diagram-container {\\n    width:calc(100% - 260px);\\n    height: 100%;\\n    float: right;\\n}\\n\\n/* For making toolbar selection */\\n.e-toolbar .e-toolbar-items .e-toolbar-item.tb-item-selected .e-tbar-btn.e-btn,\\n.e-toolbar .e-toolbar-items .e-toolbar-item .e-dropdown-btn.tb-item-selected {\\n    background: #5f6161;\\n}\\n\\n/* Toolbar icons color */\\n.e-toolbar .e-toolbar-items .e-toolbar-item.tb-item-selected .e-tbar-btn .e-icons.e-btn-icon,\\n.e-toolbar .e-toolbar-items .e-toolbar-item .e-dropdown-btn.tb-item-selected .e-btn-icon {\\n    color: #ffffff;\\n}\";\n// Define the function GroupandOrder\nfunction GroupandOrder() {\n    React.useEffect(function () {\n        // Call functions to update sample section and render completion\n        (0, sample_base_1.updateSampleSection)();\n        initializeMobileEvents();\n    }, []);\n    // Variables for managing diagram drawing state and font properties.\n    var fontColor;\n    var fontFamily;\n    var fontSize;\n    var fontType = [\n        { type: 'Arial', text: 'Arial' },\n        { type: 'Aharoni', text: 'Aharoni' },\n        { type: 'Bell MT', text: 'Bell MT' },\n        { type: 'Fantasy', text: 'Fantasy' },\n        { type: 'Segoe UI', text: 'Segoe UI' },\n        { type: 'Times New Roman', text: 'Times New Roman' },\n        { type: 'Verdana', text: 'Verdana' },\n    ];\n    var fields = { value: 'type', text: 'text' };\n    var isMobile;\n    // Initialize toolbar items with icons, tooltips, and other properties.\n    var toolbarItems = [\n        { prefixIcon: 'e-icons e-group-1', tooltipText: 'Group', disabled: true, id: 'Group' },\n        { prefixIcon: 'e-icons e-ungroup-1', tooltipText: 'UnGroup', disabled: true, id: 'UnGroup' },\n        { type: 'Separator' },\n        { prefixIcon: 'e-icons e-bring-forward', tooltipText: 'Bring Forward', disabled: true, id: 'BringForward' },\n        { prefixIcon: 'e-icons e-bring-to-front', tooltipText: 'Bring To Front', disabled: true, id: 'BringToFront' },\n        { prefixIcon: 'e-icons e-send-backward', tooltipText: 'Send Backward', disabled: true, id: 'SendBackward' },\n        { prefixIcon: 'e-icons e-send-to-back', tooltipText: 'Send To Back', disabled: true, id: 'SendToBack' },\n        { type: 'Separator' },\n        { id: 'FontStyle', type: 'Input', align: 'Left', tooltipText: 'Font Style', disabled: true, template: renderFontFamilyDropdown },\n        { id: 'FontSize', tooltipText: 'Font Size', align: 'Left', disabled: true, template: renderFontSizeNumericBox },\n        { prefixIcon: 'e-icons e-bold', tooltipText: 'Bold', cssClass: 'tb-item-start', disabled: true, id: 'Bold' },\n        { prefixIcon: 'e-icons e-italic', tooltipText: 'Italic', cssClass: 'tb-item-middle', disabled: true, id: 'Italic' },\n        { prefixIcon: 'e-icons e-underline', tooltipText: 'Underline', cssClass: 'tb-item-end', disabled: true, id: 'Underline' },\n        { id: 'FontColor', tooltipText: 'Font Color', align: 'Left', disabled: true, template: renderFontColorPicker }\n    ];\n    // Checks and applies mobile-specific behaviors.\n    function initializeMobileEvents() {\n        // Check if device is mobile\n        isMobile = window.matchMedia('(max-width:550px)').matches;\n        if (isMobile && paletteIconInstance) {\n            paletteIconInstance.addEventListener('click', openPalette, false);\n        }\n    }\n    // Toggles the palette's visibility on mobile devices.\n    function openPalette() {\n        isMobile = window.matchMedia('(max-width:550px)').matches;\n        if (isMobile) {\n            if (!paletteSpaceInstance.classList.contains('sb-mobile-palette-open')) {\n                // Open palette\n                paletteSpaceInstance.classList.add('sb-mobile-palette-open');\n            }\n            else {\n                // Close palette\n                paletteSpaceInstance.classList.remove('sb-mobile-palette-open');\n            }\n        }\n    }\n    // Executes actions based on the toolbar item clicked.\n    function handleToolbarClick(args) {\n        // Switch based on the tooltip text of the item\n        switch (args.item.tooltipText) {\n            // Group selected items\n            case 'Group':\n                diagramInstance.group();\n                updateToolbarItems(['Group'], true);\n                updateToolbarItems(['UnGroup'], false);\n                break;\n            // Ungroup selected items\n            case 'UnGroup':\n                diagramInstance.unGroup();\n                break;\n            // Bring selected item(s) forward\n            case 'Bring Forward':\n                diagramInstance.moveForward();\n                break;\n            // Bring selected item(s) to front\n            case 'Bring To Front':\n                diagramInstance.bringToFront();\n                break;\n            // Send selected item(s) backward\n            case 'Send Backward':\n                diagramInstance.sendBackward();\n                break;\n            // Send selected item(s) to back\n            case 'Send To Back':\n                diagramInstance.sendToBack();\n                break;\n            // Toggle bold style for selected annotation(s)\n            case 'Bold':\n                updateAnnotationValue('bold', args.value, null);\n                break;\n            // Toggle italic style for selected annotation(s)\n            case 'Italic':\n                updateAnnotationValue('italic', args.value, null);\n                break;\n            // Toggle underline style for selected annotation(s)\n            case 'Underline':\n                updateAnnotationValue('underline', args.value, null);\n                break;\n        }\n        diagramInstance.dataBind();\n    }\n    // Updates annotation style attributes based on the provided value.\n    function updateAnnotationValue(value, fontSize, fontFamily) {\n        // Iterate through selected nodes in the diagram\n        for (var i = 0; i < diagramInstance.selectedItems.nodes.length; i++) {\n            var node = diagramInstance.selectedItems.nodes[i];\n            // Iterate through annotations of each node\n            for (var j = 0; j < node.annotations.length; j++) {\n                var annotationStyle = node.annotations[j].style;\n                // Update style attributes based on the provided value\n                if (value === 'fontsize') {\n                    annotationStyle.fontSize = fontSize;\n                }\n                else if (value === 'fontfamily') {\n                    annotationStyle.fontFamily = fontFamily.toString();\n                }\n                else if (value === 'bold') {\n                    annotationStyle.bold = !annotationStyle.bold;\n                }\n                else if (value === 'italic') {\n                    annotationStyle.italic = !annotationStyle.italic;\n                }\n                else if (value === 'underline') {\n                    annotationStyle.textDecoration = annotationStyle.textDecoration === 'None' ? 'Underline' : 'None';\n                }\n            }\n        }\n        diagramInstance.dataBind();\n    }\n    // Handles custom user interactions with diagram elements.\n    function onUserHandleMouseDown(args) {\n        switch (args.element.name) {\n            case 'Delete':\n                // Remove selected elements\n                diagramInstance.remove();\n                break;\n            case 'Clone':\n                // Clone selected elements\n                diagramInstance.paste(diagramInstance.selectedItems.selectedObjects);\n                break;\n            case 'Draw':\n                // Sets drawing mode and source ID for drawing elements\n                var drawingObject = diagramInstance.drawingObject;\n                drawingObject.shape = {};\n                drawingObject.type = drawingObject.type || 'Orthogonal';\n                drawingObject.sourceID = drawingNode.id;\n                diagramInstance.dataBind();\n                break;\n        }\n    }\n    // Updates toolbar items based on diagram selection changes.\n    function selectionChange(args) {\n        if (args.state === 'Changed') {\n            var selectedItems = diagramInstance.selectedItems.nodes;\n            selectedItems = selectedItems.concat(diagramInstance.selectedItems.connectors);\n            // Define toolbar item IDs for easy management\n            var toolbarItemIds = ['Group', 'UnGroup', 'BringForward', 'BringToFront', 'SendBackward', 'SendToBack', 'FontStyle', 'FontSize', 'Bold', 'Italic', 'Underline', 'FontColor'];\n            // Disabling toolbar items when no items are selected\n            if (selectedItems.length === 0) {\n                updateToolbarItems(toolbarItemIds, true);\n            }\n            // Handling single item selection\n            else if (selectedItems.length === 1) {\n                enableToolbarItems();\n                disableToolbarItemsForMultiSelection(selectedItems);\n                // Enabling or disabling specific toolbar items based on selection type\n                var isGroup = selectedItems[0].children !== undefined && selectedItems[0].children.length > 0;\n                updateToolbarItems(['UnGroup'], !isGroup);\n            }\n            // Handling multiple items selection\n            else if (selectedItems.length > 1) {\n                enableToolbarItems();\n                updateToolbarItems(['Group'], false);\n                updateToolbarItems(['UnGroup'], true);\n                disableToolbarItemsForMultiSelection(selectedItems);\n            }\n            // Handling specific scenarios when nodes are selected\n            if (args.newValue.length > 0 && args.newValue[0] instanceof ej2_react_diagrams_1.Node) {\n                diagramInstance.selectedItems = {\n                    constraints: ej2_react_diagrams_1.SelectorConstraints.All | ej2_react_diagrams_1.SelectorConstraints.UserHandle,\n                    userHandles: handles,\n                };\n                // Manipulating selected nodes and their properties\n                if (diagramInstance.selectedItems.nodes.length > 0) {\n                    drawingNode = diagramInstance.selectedItems.nodes[diagramInstance.selectedItems.nodes.length - 1];\n                }\n            }\n            else {\n                // Resetting selection constraints when other types are selected\n                diagramInstance.selectedItems = {\n                    constraints: ej2_react_diagrams_1.SelectorConstraints.All & ~ej2_react_diagrams_1.SelectorConstraints.UserHandle,\n                };\n            }\n        }\n    }\n    // Enable or disable specific toolbar items\n    function updateToolbarItems(itemIds, disabled) {\n        itemIds.forEach(function (itemId) {\n            var item = toolbarEditor.items.find(function (item) { return item.id === itemId; });\n            if (item) {\n                item.disabled = disabled;\n            }\n        });\n    }\n    // Enables specific toolbar items.\n    function enableToolbarItems() {\n        updateToolbarItems(['BringForward', 'BringToFront', 'SendBackward', 'SendToBack'], false);\n    }\n    // Disables toolbar items for multi-selected elements without annotations.\n    function disableToolbarItemsForMultiSelection(selectedItems) {\n        var annotationRelatedItems = ['FontStyle', 'FontSize', 'Bold', 'Italic', 'Underline', 'FontColor'];\n        // Iterate through selected items\n        for (var i = 0; i < selectedItems.length; i++) {\n            // Check if the selected item has annotations\n            if (selectedItems[i].annotations[0] !== undefined) {\n                // Enable toolbar items for annotation-related functionalities\n                updateToolbarItems(annotationRelatedItems, false);\n            }\n            else {\n                // Disable toolbar items for annotation-related functionalities\n                updateToolbarItems(annotationRelatedItems, true);\n            }\n        }\n    }\n    // Renders a dropdown for font family selection.\n    function renderFontFamilyDropdown() {\n        return (React.createElement(\"div\", { className: \"col-xs-4 column-style\", style: { marginLeft: '4px' } },\n            React.createElement(ej2_react_dropdowns_1.DropDownListComponent, { id: \"fontfamily\", popupWidth: 150, width: '150px', fields: fields, placeholder: 'select a font type', index: 0, dataSource: fontType, change: function (args) {\n                    updateAnnotationValue('fontfamily', null, args.value.toString());\n                }, ref: function (fontfamily) { return (fontFamily = fontfamily); } })));\n    }\n    // Renders a numeric textbox for font size selection.\n    function renderFontSizeNumericBox() {\n        return (React.createElement(\"div\", { className: \"col-xs-4 column-style\" },\n            React.createElement(ej2_react_inputs_1.NumericTextBoxComponent, { id: \"fontSize\", width: '110px', value: 12, min: 1, max: 30, step: 2, format: \"##.##\", change: function (args) {\n                    updateAnnotationValue('fontsize', args.value);\n                }, ref: function (fontsize) { return (fontSize = fontsize); } })));\n    }\n    // Renders a color picker for font color selection.\n    function renderFontColorPicker() {\n        return (React.createElement(\"div\", { className: \"col-xs-4 column-style\" },\n            React.createElement(ej2_react_inputs_1.ColorPickerComponent, { id: \"fontcolor\", value: \"#000\", mode: \"Palette\", change: function (arg) {\n                    diagramInstance.selectedItems.nodes.forEach(function (node) {\n                        node.annotations.forEach(function (annotation) {\n                            annotation.style.color = arg.currentValue.rgba;\n                        });\n                    });\n                    diagramInstance.dataBind();\n                }, ref: function (fontcolor) { return (fontColor = fontcolor); } })));\n    }\n    return (React.createElement(\"div\", { className: \"control-pane\" },\n        React.createElement(\"style\", null, sample_css),\n        React.createElement(\"div\", { className: \"control-section\" },\n            React.createElement(\"div\", { style: { width: '100%' } },\n                React.createElement(\"div\", { className: \"db-toolbar-container\" },\n                    React.createElement(ej2_react_navigations_1.ToolbarComponent, { ref: function (toolbar) { return (toolbarEditor = toolbar); }, id: \"toolbar_diagram\", clicked: handleToolbarClick, items: toolbarItems })),\n                React.createElement(\"div\", { className: \"sb-mobile-palette-bar\" },\n                    React.createElement(\"div\", { id: \"paletteIcon\", ref: function (paletteIcon) { return (paletteIconInstance = paletteIcon); }, style: { float: 'right' }, className: \"e-ddb-icons1 e-toggle-palette\" })),\n                React.createElement(\"div\", { id: \"paletteSpace\", ref: function (paletteSpace) { return (paletteSpaceInstance = paletteSpace); }, className: \"db-palette-parent\" },\n                    React.createElement(ej2_react_diagrams_1.SymbolPaletteComponent, { id: \"symbolpalette\", expandMode: \"Multiple\", \n                        // Initialize a default shape in symbol palettes\n                        palettes: [\n                            {\n                                id: 'Basic',\n                                expanded: true,\n                                symbols: basicShapes,\n                                title: 'Basic Shapes',\n                            },\n                        ], width: '100%', height: '500px', symbolHeight: 50, symbolWidth: 50, symbolMargin: { left: 5, right: 5, top: 5, bottom: 10 } })),\n                React.createElement(\"div\", { id: \"diagram-space\", className: \"db-diagram-container\" },\n                    React.createElement(ej2_react_diagrams_1.DiagramComponent, { id: \"diagram\", ref: function (diagram) { return (diagramInstance = diagram); }, width: '100%', height: '500px', selectedItems: { constraints: ej2_react_diagrams_1.SelectorConstraints.UserHandle, userHandles: handles }, rulerSettings: { showRulers: true }, onUserHandleMouseDown: function (args) { onUserHandleMouseDown(args); }, selectionChange: function (args) { selectionChange(args); }, drawingObject: { type: 'Orthogonal' }, nodes: nodes }))))));\n}\nexports.default = GroupandOrder;\nvar root = (0, client_1.createRoot)(document.getElementById('sample'));\nroot.render(React.createElement(GroupandOrder, null));\n\n\n//# sourceURL=webpack:///./samples/diagram/grouping-and-ordering-functional/app/index.tsx?");

/***/ }),

/***/ "./samples/diagram/grouping-and-ordering-functional/app/sample-base.tsx":
/*!******************************************************************************!*\
  !*** ./samples/diagram/grouping-and-ordering-functional/app/sample-base.tsx ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.updateSampleSection = exports.SampleBase = void 0;\nvar React = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\nvar ej2_base_1 = __webpack_require__(/*! @syncfusion/ej2-base */ \"./node_modules/@syncfusion/ej2-base/index.js\");\n(0, ej2_base_1.enableRipple)(window.ripple);\nvar SampleBase = /** @class */ (function (_super) {\n    __extends(SampleBase, _super);\n    function SampleBase() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    SampleBase.prototype.rendereComplete = function () {\n        /**custom render complete function */\n    };\n    SampleBase.prototype.componentDidMount = function () {\n        var _this = this;\n        setTimeout(function () {\n            _this.rendereComplete();\n        });\n    };\n    return SampleBase;\n}(React.PureComponent));\nexports.SampleBase = SampleBase;\nfunction updateSampleSection() { }\nexports.updateSampleSection = updateSampleSection;\n\n\n//# sourceURL=webpack:///./samples/diagram/grouping-and-ordering-functional/app/sample-base.tsx?");

/***/ })

/******/ });