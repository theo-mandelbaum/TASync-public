/******/ (function(modules) { // webpackBootstrap
/******/ 	// install a JSONP callback for chunk loading
/******/ 	function webpackJsonpCallback(data) {
/******/ 		var chunkIds = data[0];
/******/ 		var moreModules = data[1];
/******/ 		var executeModules = data[2];
/******/
/******/ 		// add "moreModules" to the modules object,
/******/ 		// then flag all "chunkIds" as loaded and fire callback
/******/ 		var moduleId, chunkId, i = 0, resolves = [];
/******/ 		for(;i < chunkIds.length; i++) {
/******/ 			chunkId = chunkIds[i];
/******/ 			if(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 				resolves.push(installedChunks[chunkId][0]);
/******/ 			}
/******/ 			installedChunks[chunkId] = 0;
/******/ 		}
/******/ 		for(moduleId in moreModules) {
/******/ 			if(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {
/******/ 				modules[moduleId] = moreModules[moduleId];
/******/ 			}
/******/ 		}
/******/ 		if(parentJsonpFunction) parentJsonpFunction(data);
/******/
/******/ 		while(resolves.length) {
/******/ 			resolves.shift()();
/******/ 		}
/******/
/******/ 		// add entry modules from loaded chunk to deferred list
/******/ 		deferredModules.push.apply(deferredModules, executeModules || []);
/******/
/******/ 		// run deferred modules when all chunks ready
/******/ 		return checkDeferredModules();
/******/ 	};
/******/ 	function checkDeferredModules() {
/******/ 		var result;
/******/ 		for(var i = 0; i < deferredModules.length; i++) {
/******/ 			var deferredModule = deferredModules[i];
/******/ 			var fulfilled = true;
/******/ 			for(var j = 1; j < deferredModule.length; j++) {
/******/ 				var depId = deferredModule[j];
/******/ 				if(installedChunks[depId] !== 0) fulfilled = false;
/******/ 			}
/******/ 			if(fulfilled) {
/******/ 				deferredModules.splice(i--, 1);
/******/ 				result = __webpack_require__(__webpack_require__.s = deferredModule[0]);
/******/ 			}
/******/ 		}
/******/
/******/ 		return result;
/******/ 	}
/******/
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// object to store loaded and loading chunks
/******/ 	// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 	// Promise = chunk loading, 0 = chunk loaded
/******/ 	var installedChunks = {
/******/ 		"./samples/diagram/scrolling-functional/app/index.min": 0
/******/ 	};
/******/
/******/ 	var deferredModules = [];
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	var jsonpArray = window["webpackJsonp"] = window["webpackJsonp"] || [];
/******/ 	var oldJsonpFunction = jsonpArray.push.bind(jsonpArray);
/******/ 	jsonpArray.push = webpackJsonpCallback;
/******/ 	jsonpArray = jsonpArray.slice();
/******/ 	for(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);
/******/ 	var parentJsonpFunction = oldJsonpFunction;
/******/
/******/
/******/ 	// add entry module to deferred list
/******/ 	deferredModules.push(["./samples/diagram/scrolling-functional/app/index.tsx","diagrams.min"]);
/******/ 	// run deferred modules when ready
/******/ 	return checkDeferredModules();
/******/ })
/************************************************************************/
/******/ ({

/***/ "./samples/diagram/scrolling-functional/app/index.tsx":
/*!************************************************************!*\
  !*** ./samples/diagram/scrolling-functional/app/index.tsx ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar client_1 = __webpack_require__(/*! react-dom/client */ \"./node_modules/react-dom/client.js\");\nvar React = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\nvar ej2_react_diagrams_1 = __webpack_require__(/*! @syncfusion/ej2-react-diagrams */ \"./node_modules/@syncfusion/ej2-react-diagrams/index.js\");\nvar sample_base_1 = __webpack_require__(/*! ./sample-base */ \"./samples/diagram/scrolling-functional/app/sample-base.tsx\");\nvar ej2_react_inputs_1 = __webpack_require__(/*! @syncfusion/ej2-react-inputs */ \"./node_modules/@syncfusion/ej2-react-inputs/index.js\");\nvar ej2_react_dropdowns_1 = __webpack_require__(/*! @syncfusion/ej2-react-dropdowns */ \"./node_modules/@syncfusion/ej2-react-dropdowns/index.js\");\nvar ej2_react_buttons_1 = __webpack_require__(/*! @syncfusion/ej2-react-buttons */ \"./node_modules/@syncfusion/ej2-react-buttons/index.js\");\nej2_react_diagrams_1.Diagram.Inject(ej2_react_diagrams_1.UndoRedo);\n/**\n * Diagram Default sample\n */\n//Initialize the basicshapes for the symbol palatte\nvar basicShapes = [\n    {\n        id: 'rectangle',\n        shape: { type: 'Basic', shape: 'Rectangle' },\n    },\n    {\n        id: 'ellipse',\n        shape: { type: 'Basic', shape: 'Ellipse' },\n    },\n    {\n        id: 'triangle',\n        shape: { type: 'Basic', shape: 'Triangle' },\n    },\n    {\n        id: 'plus',\n        shape: { type: 'Basic', shape: 'Plus' },\n    },\n    {\n        id: 'star',\n        shape: { type: 'Basic', shape: 'Star' },\n    },\n    {\n        id: 'pentagon',\n        shape: { type: 'Basic', shape: 'Pentagon' },\n    },\n    {\n        id: 'heptagon',\n        shape: { type: 'Basic', shape: 'Heptagon' },\n    },\n    {\n        id: 'octagon',\n        shape: { type: 'Basic', shape: 'Octagon' },\n    },\n    {\n        id: 'trapezoid',\n        shape: { type: 'Basic', shape: 'Trapezoid' },\n    },\n    {\n        id: 'decagon',\n        shape: { type: 'Basic', shape: 'Decagon' },\n    },\n    {\n        id: 'rightTriangle',\n        shape: { type: 'Basic', shape: 'RightTriangle' },\n    },\n    {\n        id: 'parallelogram',\n        shape: { type: 'Basic', shape: 'Parallelogram' },\n    },\n];\n//Initialize the flowshapes for the symbol palatte\nvar flowShapes = [\n    { id: 'terminator1', shape: { type: 'Flow', shape: 'Terminator' } },\n    { id: 'process1', shape: { type: 'Flow', shape: 'Process' } },\n    { id: 'extract1', shape: { type: 'Flow', shape: 'Extract' } },\n    { id: 'manualOperation1', shape: { type: 'Flow', shape: 'ManualOperation' } },\n    { id: 'merge1', shape: { type: 'Flow', shape: 'Merge' } },\n    {\n        id: 'offPageReference1',\n        shape: { type: 'Flow', shape: 'OffPageReference' },\n    },\n    {\n        id: 'sequentialAccessStorage1',\n        shape: { type: 'Flow', shape: 'SequentialAccessStorage' },\n    },\n    { id: 'annotation1', shape: { type: 'Flow', shape: 'Annotation' } },\n    { id: 'annotation21', shape: { type: 'Flow', shape: 'Annotation2' } },\n    { id: 'data1', shape: { type: 'Flow', shape: 'Data' } },\n    { id: 'summingJunction1', shape: { type: 'Flow', shape: 'SummingJunction' } },\n    { id: 'or1', shape: { type: 'Flow', shape: 'Or' } },\n    { id: 'internalStorage1', shape: { type: 'Flow', shape: 'InternalStorage' } },\n    { id: 'card1', shape: { type: 'Flow', shape: 'Card' } },\n    { id: 'delay1', shape: { type: 'Flow', shape: 'Delay' } },\n    { id: 'decision1', shape: { type: 'Flow', shape: 'Decision' } },\n    { id: 'document1', shape: { type: 'Flow', shape: 'Document' } },\n    {\n        id: 'preDefinedProcess1',\n        shape: { type: 'Flow', shape: 'PreDefinedProcess' },\n    },\n    { id: 'paperTap1', shape: { type: 'Flow', shape: 'PaperTap' } },\n    { id: 'directData1', shape: { type: 'Flow', shape: 'DirectData' } },\n    { id: 'sequentialData1', shape: { type: 'Flow', shape: 'SequentialData' } },\n    { id: 'sort1', shape: { type: 'Flow', shape: 'Sort' } },\n    { id: 'multiDocument1', shape: { type: 'Flow', shape: 'MultiDocument' } },\n    { id: 'collate1', shape: { type: 'Flow', shape: 'Collate' } },\n];\n//Initialize the connector for the symbol palatte\nvar connectorSymbols = [\n    {\n        id: \"orthogonal\",\n        type: \"Orthogonal\",\n        sourcePoint: { x: 0, y: 0 },\n        targetPoint: { x: 60, y: 60 },\n        targetDecorator: { style: { fill: '#757575' } },\n    },\n    {\n        id: \"Orthogonal\",\n        type: \"Orthogonal\",\n        sourcePoint: { x: 0, y: 0 },\n        targetPoint: { x: 60, y: 60 },\n        targetDecorator: { shape: \"None\" },\n    },\n    {\n        id: \"straight\",\n        type: \"Straight\",\n        sourcePoint: { x: 0, y: 0 },\n        targetPoint: { x: 60, y: 60 },\n        targetDecorator: { style: { fill: '#757575' } },\n    },\n    {\n        id: \"Straight\",\n        type: \"Straight\",\n        sourcePoint: { x: 0, y: 0 },\n        targetPoint: { x: 60, y: 60 },\n        targetDecorator: { shape: \"None\" }\n    },\n    {\n        id: \"bezier\",\n        type: \"Bezier\",\n        sourcePoint: { x: 0, y: 0 },\n        targetPoint: { x: 60, y: 60 },\n        targetDecorator: { shape: \"None\" }\n    }\n];\nvar sample_css = \"\\n  \\n  .diagram-scroll .db-text-input {\\n      width: calc(100% - 15px);\\n      padding: 2px 2px 0px 0px;\\n  }\\n  \\n  .diagram-scroll .row{\\n    margin-right:-15px;\\n    margin-left:-15px;\\n  }\";\nvar diagramInstance;\nvar fontFamily;\nvar scrollableDivInstance;\nvar autoScrollDivInstance;\nvar paletteIconInstance;\nvar paletteSpaceInstance;\nfunction ScrollingSample() {\n    React.useEffect(function () {\n        (0, sample_base_1.updateSampleSection)();\n        rendereComplete();\n    }, []);\n    function rendereComplete() {\n        addEvents();\n    }\n    var fields = { text: 'text', value: 'value' };\n    var scrollLimitDatasource = [\n        { text: 'Infinity', value: 'Infinity' },\n        { text: 'Diagram', value: 'Diagram' },\n        { text: 'Limited', value: 'Limited' },\n    ];\n    var scrollableArea = new ej2_react_diagrams_1.Rect(0, 0, 1500, 1500);\n    var isMobile;\n    //To enhance the functionality of a webpage for mobile devices by adding a click event listener \n    function addEvents() {\n        isMobile = window.matchMedia('(max-width:550px)').matches;\n        if (isMobile) {\n            var paletteIcon = paletteIconInstance;\n            if (paletteIcon) {\n                paletteIcon.addEventListener('click', openPalette, false);\n            }\n        }\n    }\n    //To manage the visibility state of the palette space on a webpage for mobile devices\n    function openPalette() {\n        var paletteSpace = paletteSpaceInstance;\n        isMobile = window.matchMedia('(max-width:550px)').matches;\n        if (isMobile) {\n            if (!paletteSpace.classList.contains('sb-mobile-palette-open')) {\n                paletteSpace.classList.add('sb-mobile-palette-open');\n            }\n            else {\n                paletteSpace.classList.remove('sb-mobile-palette-open');\n            }\n        }\n    }\n    var color = '#757575';\n    //Sets the default values of a connector\n    function getConnectorDefaults(connector) {\n        connector.style.strokeWidth = 1;\n        connector.style.strokeColor = color;\n        connector.targetDecorator.style.fill = color;\n        connector.targetDecorator.style.strokeColor = color;\n    }\n    return (React.createElement(\"div\", { className: \"control-pane diagram-scroll\" },\n        React.createElement(\"style\", null, sample_css),\n        React.createElement(\"div\", { className: \"control-section\" },\n            React.createElement(\"div\", { style: { width: '100%' } },\n                React.createElement(\"div\", { className: \"sb-mobile-palette-bar\" },\n                    React.createElement(\"div\", { id: \"palette-icon\", ref: function (paletteIcon) { return (paletteIconInstance = paletteIcon); }, style: { float: 'right' }, className: \"e-ddb-icons1 e-toggle-palette\" })),\n                React.createElement(\"div\", { id: \"palette-space\", ref: function (paletteSpace) { return (paletteSpaceInstance = paletteSpace); }, className: \"sb-mobile-palette\", style: { width: '20%', float: 'left' } },\n                    React.createElement(ej2_react_diagrams_1.SymbolPaletteComponent, { id: \"symbolpalette\", expandMode: \"Single\", palettes: [\n                            {\n                                id: 'basic',\n                                expanded: true,\n                                symbols: basicShapes,\n                                iconCss: 'e-diagram-icons1 e-diagram-basic',\n                                title: 'Basic Shapes',\n                            },\n                            {\n                                id: 'flow',\n                                expanded: false,\n                                symbols: flowShapes,\n                                iconCss: 'e-diagram-icons1 e-diagram-flow',\n                                title: 'Flow Shapes',\n                            },\n                            {\n                                id: \"connectors\",\n                                expanded: false,\n                                symbols: connectorSymbols,\n                                iconCss: \"e-diagram-icons1 e-diagram-connector\",\n                                title: \"Connectors\"\n                            }\n                        ], width: '100%', height: '700px', symbolHeight: 60, symbolWidth: 60, getNodeDefaults: function (symbol) {\n                            var obj = symbol;\n                            if (obj.id === 'terminator1' || obj.id === 'process1') {\n                                obj.width = 80;\n                                obj.height = 40;\n                            }\n                            else if (obj.id === 'decision1' ||\n                                obj.id === 'document1' ||\n                                obj.id === 'preDefinedProcess1' ||\n                                obj.id === 'paperTap1' ||\n                                obj.id === 'directData1' ||\n                                obj.id === 'multiDocument1' ||\n                                obj.id === 'data1') {\n                                obj.width = 50;\n                                obj.height = 40;\n                            }\n                            else {\n                                obj.width = 50;\n                                obj.height = 50;\n                            }\n                            obj.style.strokeColor = '#757575';\n                        }, getConnectorDefaults: getConnectorDefaults, symbolMargin: { left: 15, right: 15, top: 15, bottom: 15 }, getSymbolInfo: function (symbol) {\n                            return { fit: true };\n                        } })),\n                React.createElement(\"div\", { id: \"diagram-space\", className: \"sb-mobile-diagram\", style: { width: '59%', float: 'left' } },\n                    React.createElement(ej2_react_diagrams_1.DiagramComponent, { id: \"diagram\", ref: function (diagram) { return (diagramInstance = diagram); }, width: '100%', height: '700px', rulerSettings: { showRulers: true }, pageSettings: { width: 1500, height: 1500 }, scrollSettings: {\n                            scrollLimit: 'Infinity',\n                            canAutoScroll: true,\n                            autoScrollBorder: { left: 30, right: 30, top: 30, bottom: 30 },\n                            scrollableArea: scrollableArea,\n                        }, getConnectorDefaults: getConnectorDefaults, created: function () {\n                            var scrollElement = scrollableDivInstance;\n                            scrollElement.className = 'disabledbutton';\n                        }, \n                        //Sets the node style for DragEnter element.\n                        dragEnter: function (args) {\n                            var obj = args.element;\n                            if (obj instanceof ej2_react_diagrams_1.Node) {\n                                var oWidth = obj.width;\n                                var oHeight = obj.height;\n                                var ratio = 100 / obj.width;\n                                obj.width = 100;\n                                obj.height *= ratio;\n                                obj.offsetX += (obj.width - oWidth) / 2;\n                                obj.offsetY += (obj.height - oHeight) / 2;\n                                obj.style = { fill: '#357BD2', strokeColor: 'white' };\n                                obj.annotations = [\n                                    { style: { color: 'white', fill: 'transparent' } },\n                                ];\n                            }\n                        } },\n                        React.createElement(ej2_react_diagrams_1.Inject, { services: [ej2_react_diagrams_1.UndoRedo] }))),\n                React.createElement(\"div\", { id: \"properties\", style: { width: '20%', float: 'right' } },\n                    React.createElement(\"div\", { className: \"property-panel-header\" }, \"Properties\"),\n                    React.createElement(\"div\", { className: \"row db-prop-row\" },\n                        React.createElement(\"div\", { className: \"col-xs-5 db-col-right db-prop-text-style\", style: { paddingTop: '10px' } },\n                            React.createElement(\"span\", { className: \"db-prop-text-style db-spacing-text\" }, \"Scroll Limit\")),\n                        React.createElement(\"div\", { className: \"col-xs-7 db-col-left\", style: { paddingTop: '5px', paddingRight: '0px' } },\n                            React.createElement(\"div\", { className: \"db-text-input\" },\n                                React.createElement(ej2_react_dropdowns_1.DropDownListComponent, { id: \"scrollLimit\", fields: fields, value: 'Infinity', dataSource: scrollLimitDatasource, change: function (args) {\n                                        var element = scrollableDivInstance;\n                                        element.className =\n                                            args.value === 'Limited' ? '' : 'disabledbutton';\n                                        diagramInstance.scrollSettings.scrollLimit = args.value;\n                                    }, ref: function (fontfamily) { return (fontFamily = fontfamily); } })))),\n                    React.createElement(\"div\", { id: \"scrollableDiv\", ref: function (scrollableDiv) { return (scrollableDivInstance = scrollableDiv); } },\n                        React.createElement(\"div\", { className: \"property-panel-header\" }, \"Scrollable Area\"),\n                        React.createElement(\"div\", { className: \"row db-prop-row\", style: { paddingTop: '10px' } },\n                            React.createElement(\"div\", { className: \"col-xs-6\", style: { paddingRight: '15px', width: '175px' } },\n                                React.createElement(\"div\", { style: { width: '40%', float: 'left', marginTop: '5px' } },\n                                    React.createElement(\"span\", { className: \"texstyle\", style: { display: 'block' } }, \"X\")),\n                                React.createElement(\"div\", { style: {\n                                        width: '60%',\n                                        float: 'right',\n                                        paddingLeft: '20px',\n                                    } },\n                                    React.createElement(ej2_react_inputs_1.TextBoxComponent, { id: \"x\", value: \"10\", change: function (args) {\n                                            diagramInstance.scrollSettings.scrollableArea.x =\n                                                Number(args.value);\n                                        } })))),\n                        React.createElement(\"div\", { className: \"row db-prop-row\", style: { paddingTop: '10px' } },\n                            React.createElement(\"div\", { className: \"col-xs-6\", style: { paddingRight: '15px', width: '175px' } },\n                                React.createElement(\"div\", { style: { width: '40%', float: 'left', marginTop: '5px' } },\n                                    React.createElement(\"span\", { className: \"texstyle\", style: { width: 'fit-content' } }, \"Y\")),\n                                React.createElement(\"div\", { style: {\n                                        width: '60%',\n                                        float: 'right',\n                                        paddingLeft: '20px',\n                                    } },\n                                    React.createElement(ej2_react_inputs_1.TextBoxComponent, { id: \"y\", value: \"10\", change: function (args) {\n                                            diagramInstance.scrollSettings.scrollableArea.y =\n                                                Number(args.value);\n                                        } })))),\n                        React.createElement(\"div\", { className: \"row db-prop-row\", style: { paddingTop: '10px' } },\n                            React.createElement(\"div\", { className: \"col-xs-6 db-col-left\", style: { width: '175px' } },\n                                React.createElement(\"div\", { style: { width: '40%', float: 'left', marginTop: '5px' } },\n                                    React.createElement(\"span\", { className: \"texstyle\" }, \"Width\")),\n                                React.createElement(\"div\", { style: {\n                                        width: '60%',\n                                        float: 'right',\n                                        paddingLeft: '20px',\n                                    } },\n                                    React.createElement(ej2_react_inputs_1.TextBoxComponent, { id: \"width\", value: \"1500\", change: function (args) {\n                                            diagramInstance.scrollSettings.scrollableArea.width =\n                                                Number(args.value);\n                                        } })))),\n                        React.createElement(\"div\", { className: \"row db-prop-row\", style: { paddingTop: '10px' } },\n                            React.createElement(\"div\", { className: \"col-xs-6 db-col-right\", style: { width: '175px' } },\n                                React.createElement(\"div\", { style: { width: '40%', float: 'left', marginTop: '5px' } },\n                                    React.createElement(\"span\", { className: \"texstyle\" }, \"Height\")),\n                                React.createElement(\"div\", { style: {\n                                        width: '60%',\n                                        float: 'right',\n                                        paddingLeft: '20px',\n                                    } },\n                                    React.createElement(ej2_react_inputs_1.TextBoxComponent, { id: \"height\", value: \"1500\", change: function (args) {\n                                            diagramInstance.scrollSettings.scrollableArea.height =\n                                                Number(args.value);\n                                        } }))))),\n                    React.createElement(\"div\", { style: { paddingTop: '5px', marginTop: '20px' } },\n                        React.createElement(\"div\", { style: { float: 'left' } }, \"Enable AutoScroll\"),\n                        React.createElement(\"div\", { style: { float: 'left', marginLeft: '10px' } },\n                            React.createElement(ej2_react_buttons_1.CheckBoxComponent, { id: \"EnableScroll\", checked: true, change: function (args) {\n                                    var autoScrollElement = autoScrollDivInstance;\n                                    if (args.checked) {\n                                        autoScrollElement.className = '';\n                                        diagramInstance.scrollSettings.canAutoScroll = true;\n                                    }\n                                    else {\n                                        autoScrollElement.className = 'disabledbutton';\n                                        diagramInstance.scrollSettings.canAutoScroll = false;\n                                    }\n                                } }))),\n                    React.createElement(\"div\", { id: \"autoScrollDiv\", style: { marginTop: '30px' }, ref: function (autoScrollDiv) { return (autoScrollDivInstance = autoScrollDiv); } },\n                        React.createElement(\"div\", { className: \"property-panel-header\" }, \"AutoScroll border\"),\n                        React.createElement(\"div\", { className: \"row db-prop-row\", style: { paddingTop: '10px' } },\n                            React.createElement(\"div\", { className: \"col-xs-6 db-col-left\", style: { width: '175px' } },\n                                React.createElement(\"div\", { style: { width: '40%', float: 'left', marginTop: '5px' } },\n                                    React.createElement(\"span\", null, \"Left\")),\n                                React.createElement(\"div\", { style: {\n                                        width: '60%',\n                                        float: 'right',\n                                        paddingLeft: '20px',\n                                    } },\n                                    React.createElement(ej2_react_inputs_1.TextBoxComponent, { id: \"left\", value: \"30\", change: function (args) {\n                                            diagramInstance.scrollSettings.autoScrollBorder.left =\n                                                Number(args.value);\n                                        } })))),\n                        React.createElement(\"div\", { className: \"row db-prop-row\", style: { paddingTop: '10px' } },\n                            React.createElement(\"div\", { className: \"col-xs-6 db-col-right\", style: { width: '175px' } },\n                                React.createElement(\"div\", { style: { width: '40%', float: 'left', marginTop: '5px' } },\n                                    React.createElement(\"span\", null, \"Top\")),\n                                React.createElement(\"div\", { style: {\n                                        width: '60%',\n                                        float: 'right',\n                                        paddingLeft: '20px',\n                                    } },\n                                    React.createElement(ej2_react_inputs_1.TextBoxComponent, { id: \"top\", value: \"30\", change: function (args) {\n                                            diagramInstance.scrollSettings.autoScrollBorder.top =\n                                                Number(args.value);\n                                        } })))),\n                        React.createElement(\"div\", { className: \"row db-prop-row\", style: { paddingTop: '10px' } },\n                            React.createElement(\"div\", { className: \"col-xs-6 db-col-left\", style: { width: '175px' } },\n                                React.createElement(\"div\", { style: { width: '40%', float: 'left', marginTop: '5px' } },\n                                    React.createElement(\"span\", null, \"Right\")),\n                                React.createElement(\"div\", { style: {\n                                        width: '60%',\n                                        float: 'right',\n                                        paddingLeft: '20px',\n                                    } },\n                                    React.createElement(ej2_react_inputs_1.TextBoxComponent, { id: \"right\", value: \"30\", change: function (args) {\n                                            diagramInstance.scrollSettings.autoScrollBorder.right =\n                                                Number(args.value);\n                                        } })))),\n                        React.createElement(\"div\", { className: \"row db-prop-row\", style: { paddingTop: '10px' } },\n                            React.createElement(\"div\", { className: \"col-xs-6 db-col-right\", style: { width: '175px' } },\n                                React.createElement(\"div\", { style: { width: '40%', float: 'left', marginTop: '5px' } },\n                                    React.createElement(\"span\", null, \"Bottom\")),\n                                React.createElement(\"div\", { style: {\n                                        width: '60%',\n                                        float: 'right',\n                                        paddingLeft: '20px',\n                                    } },\n                                    React.createElement(ej2_react_inputs_1.TextBoxComponent, { id: \"bottom\", value: \"30\", change: function (args) {\n                                            diagramInstance.scrollSettings.autoScrollBorder.bottom =\n                                                Number(args.value);\n                                        } }))))))))));\n}\nexports.default = ScrollingSample;\nvar root = (0, client_1.createRoot)(document.getElementById('sample'));\nroot.render(React.createElement(ScrollingSample, null));\n\n\n//# sourceURL=webpack:///./samples/diagram/scrolling-functional/app/index.tsx?");

/***/ }),

/***/ "./samples/diagram/scrolling-functional/app/sample-base.tsx":
/*!******************************************************************!*\
  !*** ./samples/diagram/scrolling-functional/app/sample-base.tsx ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.updateSampleSection = exports.SampleBase = void 0;\nvar React = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\nvar ej2_base_1 = __webpack_require__(/*! @syncfusion/ej2-base */ \"./node_modules/@syncfusion/ej2-base/index.js\");\n(0, ej2_base_1.enableRipple)(window.ripple);\nvar SampleBase = /** @class */ (function (_super) {\n    __extends(SampleBase, _super);\n    function SampleBase() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    SampleBase.prototype.rendereComplete = function () {\n        /**custom render complete function */\n    };\n    SampleBase.prototype.componentDidMount = function () {\n        var _this = this;\n        setTimeout(function () {\n            _this.rendereComplete();\n        });\n    };\n    return SampleBase;\n}(React.PureComponent));\nexports.SampleBase = SampleBase;\nfunction updateSampleSection() { }\nexports.updateSampleSection = updateSampleSection;\n\n\n//# sourceURL=webpack:///./samples/diagram/scrolling-functional/app/sample-base.tsx?");

/***/ })

/******/ });