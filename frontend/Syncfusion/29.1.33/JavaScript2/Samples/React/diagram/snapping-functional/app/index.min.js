/******/ (function(modules) { // webpackBootstrap
/******/ 	// install a JSONP callback for chunk loading
/******/ 	function webpackJsonpCallback(data) {
/******/ 		var chunkIds = data[0];
/******/ 		var moreModules = data[1];
/******/ 		var executeModules = data[2];
/******/
/******/ 		// add "moreModules" to the modules object,
/******/ 		// then flag all "chunkIds" as loaded and fire callback
/******/ 		var moduleId, chunkId, i = 0, resolves = [];
/******/ 		for(;i < chunkIds.length; i++) {
/******/ 			chunkId = chunkIds[i];
/******/ 			if(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 				resolves.push(installedChunks[chunkId][0]);
/******/ 			}
/******/ 			installedChunks[chunkId] = 0;
/******/ 		}
/******/ 		for(moduleId in moreModules) {
/******/ 			if(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {
/******/ 				modules[moduleId] = moreModules[moduleId];
/******/ 			}
/******/ 		}
/******/ 		if(parentJsonpFunction) parentJsonpFunction(data);
/******/
/******/ 		while(resolves.length) {
/******/ 			resolves.shift()();
/******/ 		}
/******/
/******/ 		// add entry modules from loaded chunk to deferred list
/******/ 		deferredModules.push.apply(deferredModules, executeModules || []);
/******/
/******/ 		// run deferred modules when all chunks ready
/******/ 		return checkDeferredModules();
/******/ 	};
/******/ 	function checkDeferredModules() {
/******/ 		var result;
/******/ 		for(var i = 0; i < deferredModules.length; i++) {
/******/ 			var deferredModule = deferredModules[i];
/******/ 			var fulfilled = true;
/******/ 			for(var j = 1; j < deferredModule.length; j++) {
/******/ 				var depId = deferredModule[j];
/******/ 				if(installedChunks[depId] !== 0) fulfilled = false;
/******/ 			}
/******/ 			if(fulfilled) {
/******/ 				deferredModules.splice(i--, 1);
/******/ 				result = __webpack_require__(__webpack_require__.s = deferredModule[0]);
/******/ 			}
/******/ 		}
/******/
/******/ 		return result;
/******/ 	}
/******/
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// object to store loaded and loading chunks
/******/ 	// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 	// Promise = chunk loading, 0 = chunk loaded
/******/ 	var installedChunks = {
/******/ 		"./samples/diagram/snapping-functional/app/index.min": 0
/******/ 	};
/******/
/******/ 	var deferredModules = [];
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	var jsonpArray = window["webpackJsonp"] = window["webpackJsonp"] || [];
/******/ 	var oldJsonpFunction = jsonpArray.push.bind(jsonpArray);
/******/ 	jsonpArray.push = webpackJsonpCallback;
/******/ 	jsonpArray = jsonpArray.slice();
/******/ 	for(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);
/******/ 	var parentJsonpFunction = oldJsonpFunction;
/******/
/******/
/******/ 	// add entry module to deferred list
/******/ 	deferredModules.push(["./samples/diagram/snapping-functional/app/index.tsx","diagrams.min"]);
/******/ 	// run deferred modules when ready
/******/ 	return checkDeferredModules();
/******/ })
/************************************************************************/
/******/ ({

/***/ "./samples/diagram/snapping-functional/app/index.tsx":
/*!***********************************************************!*\
  !*** ./samples/diagram/snapping-functional/app/index.tsx ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar client_1 = __webpack_require__(/*! react-dom/client */ \"./node_modules/react-dom/client.js\");\n// Import necessary React and Syncfusion components\nvar React = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\nvar ej2_react_diagrams_1 = __webpack_require__(/*! @syncfusion/ej2-react-diagrams */ \"./node_modules/@syncfusion/ej2-react-diagrams/index.js\");\nvar sample_base_1 = __webpack_require__(/*! ./sample-base */ \"./samples/diagram/snapping-functional/app/sample-base.tsx\");\nvar ej2_react_buttons_1 = __webpack_require__(/*! @syncfusion/ej2-react-buttons */ \"./node_modules/@syncfusion/ej2-react-buttons/index.js\");\nvar ej2_react_inputs_1 = __webpack_require__(/*! @syncfusion/ej2-react-inputs */ \"./node_modules/@syncfusion/ej2-react-inputs/index.js\");\n// Inject necessary diagram modules for snapping and editing features\nej2_react_diagrams_1.Diagram.Inject(ej2_react_diagrams_1.Snapping, ej2_react_diagrams_1.ConnectorEditing);\nej2_react_diagrams_1.Diagram.Inject(ej2_react_diagrams_1.UndoRedo);\n// Declaration of global variables for diagram instance and UI components\nvar diagramInstance;\nvar checkboxObj;\nvar snapToObj;\nvar drawingNode;\nvar fontSize;\nvar fontColor;\nvar fontSize1;\n// Creates a node with specified parameters and returns the NodeModel\nfunction createNode(id, offsetX, offsetY, content, width, height, ports) {\n    if (width === void 0) { width = 100; }\n    if (height === void 0) { height = 100; }\n    if (ports === void 0) { ports = []; }\n    return {\n        id: \"node_\".concat(id),\n        width: width,\n        height: height,\n        offsetX: offsetX,\n        offsetY: offsetY,\n        ports: ports.map(function (port) { return (__assign(__assign({}, port), { visibility: ej2_react_diagrams_1.PortVisibility.Visible, style: { fill: 'black' }, constraints: ej2_react_diagrams_1.PortConstraints.Default | ej2_react_diagrams_1.PortConstraints.Draw })); }),\n        annotations: [{\n                content: content,\n                offset: { x: 0.5, y: 1.2 },\n                style: { bold: true },\n            }],\n    };\n}\n// Initializes the nodes to be used in the diagram\nvar nodes = [\n    createNode('1', 350, 250, 'Shape 1', 100, 100, [\n        { id: 'port1', offset: { x: 0.5, y: 0.5 } }\n    ]),\n    createNode('2', 650, 250, 'Shape 2', 100, 100, [\n        { id: 'port11', offset: { x: 0.5, y: 0.5 } },\n        { id: 'port2', offset: { x: 0, y: 0.5 }, height: 100, width: 7 }\n    ]),\n    createNode('3', 500, 400, 'Shape 3'),\n];\n// Initializes the connectors to be used in the diagram\nvar connectors = [\n    {\n        id: 'connector_1',\n        sourceID: 'node_1',\n        targetID: 'node_3',\n        type: 'Orthogonal',\n    },\n];\n// Defines custom user handles for interaction\nvar handles = [\n    {\n        name: 'Clone',\n        pathData: 'M0,2.4879999 L0.986,2.4879999 0.986,9.0139999 6.9950027,9.0139999 6.9950027,10 0.986,10 C0.70400238,10 0.47000122,9.9060001 0.28100207,9.7180004 0.09400177,9.5300007 0,9.2959995 0,9.0139999 z M3.0050011,0 L9.0140038,0 C9.2960014,0 9.5300026,0.093999863 9.7190018,0.28199956 9.906002,0.47000027 10,0.70399952 10,0.986 L10,6.9949989 C10,7.2770004 9.906002,7.5160007 9.7190018,7.7110004 9.5300026,7.9069996 9.2960014,8.0049992 9.0140038,8.0049992 L3.0050011,8.0049992 C2.7070007,8.0049992 2.4650002,7.9069996 2.2770004,7.7110004 2.0890007,7.5160007 1.9950027,7.2770004 1.9950027,6.9949989 L1.9950027,0.986 C1.9950027,0.70399952 2.0890007,0.47000027 2.2770004,0.28199956 2.4650002,0.093999863 2.7070007,0 3.0050011,0 z',\n        visible: true,\n        offset: 1,\n        side: 'Bottom',\n        margin: { top: 0, bottom: 0, left: 0, right: 0 },\n    },\n    {\n        name: 'Delete',\n        pathData: 'M0.54700077,2.2130003 L7.2129992,2.2130003 7.2129992,8.8800011 C7.2129992,9.1920013 7.1049975,9.4570007 6.8879985,9.6739998 6.6709994,9.8910007 6.406,10 6.0939997,10 L1.6659999,10 C1.3539997,10 1.0890004,9.8910007 0.87200136,9.6739998 0.65500242,9.4570007 0.54700071,9.1920013 0.54700077,8.8800011 z M2.4999992,0 L5.2600006,0 5.8329986,0.54600048 7.7599996,0.54600048 7.7599996,1.6660004 0,1.6660004 0,0.54600048 1.9270014,0.54600048 z',\n        visible: true,\n        offset: 0,\n        side: 'Bottom',\n        margin: { top: 0, bottom: 0, left: 0, right: 0 },\n    },\n    {\n        name: 'Draw',\n        pathData: 'M3.9730001,0 L8.9730001,5.0000007 3.9730001,10.000001 3.9730001,7.0090005 0,7.0090005 0,2.9910006 3.9730001,2.9910006 z',\n        visible: true,\n        offset: 0.5,\n        side: 'Right',\n        margin: { top: 0, bottom: 0, left: 0, right: 0 },\n    },\n];\n// CSS styles for the property panel and diagram components\nvar sample_css = \"\\n  .row {\\n    margin-left: 0px;\\n    margin-right: 0px;\\n  }\\n    .db-prop-text-style {\\n      font-size: 13px;\\n      font-weight: normal;\\n      font-family: 'Calibri';\\n      margin-top: 25px;\\n    }\\n    .radio-text-style {\\n      font-size: 13px;\\n      font-weight: normal;\\n      font-family: 'Calibri';\\n      margin-top: 10px;\\n    }\\n    .text-content {\\n      margin-left: 10px;\\n    }\\n    #properties_Container {\\n      width: 300px;\\n      float: left;\\n      height: 600px;\\n      margin-top: 30px;\\n    }\\n  .row-header {\\n    font-size: 15px;\\n    font-weight: 500;\\n  }\\n  .property-section .e-remove-selection {\\n    cursor: not-allowed;\\n  }\\n  .property-panel-header {\\n    padding-top: 15px;\\n    padding-bottom: 15px;\\n  }\";\n// Function for SnappingSample component\nfunction SnappingSample() {\n    React.useEffect(function () {\n        (0, sample_base_1.updateSampleSection)();\n    }, []); // Empty dependency array ensures the effect runs only once after the initial render\n    // Adjusts the scale of the diagram's gridlines based on the selected snapping interval.\n    function adjustGridlineScale() {\n        diagramInstance.snapSettings.horizontalGridlines.scaledIntervals[0] =\n            fontSize.value;\n        diagramInstance.snapSettings.verticalGridlines.scaledIntervals[0] =\n            fontSize.value;\n        diagramInstance.dataBind();\n    }\n    // Handle the snap constraints by checking whether the checkbox are checked or not\n    function checkbox() {\n        diagramInstance.snapSettings.constraints = ej2_react_diagrams_1.SnapConstraints.All;\n        if (!checkboxObj.checked) {\n            diagramInstance.snapSettings.constraints &= ~ej2_react_diagrams_1.SnapConstraints.ShowLines;\n        }\n        if (!snapToObj.checked) {\n            diagramInstance.snapSettings.constraints &= ~ej2_react_diagrams_1.SnapConstraints.SnapToObject;\n        }\n    }\n    // Handles changes in snapping options based on user input.\n    function handleSnapToLinesChange(args) {\n        checkbox();\n        switch (args.value) {\n            case 'Snap To Gridlines':\n                // Enable SnapToLines constraint and adjust based on checkbox states\n                diagramInstance.snapSettings.constraints |= ej2_react_diagrams_1.SnapConstraints.SnapToLines;\n                break;\n            case 'Snap To Horizontal Gridlines':\n                // Toggle SnapToHorizontalLines constraint\n                diagramInstance.snapSettings.constraints ^=\n                    ej2_react_diagrams_1.SnapConstraints.SnapToVerticalLines;\n                break;\n            case 'Snap To Vertical Gridlines':\n                // Toggle SnapToVerticalLines constraint\n                diagramInstance.snapSettings.constraints ^=\n                    ej2_react_diagrams_1.SnapConstraints.SnapToHorizontalLines;\n                break;\n            case 'None':\n                // Disable all snap to line constraints\n                diagramInstance.snapSettings.constraints &=\n                    ~(ej2_react_diagrams_1.SnapConstraints.SnapToHorizontalLines |\n                        ej2_react_diagrams_1.SnapConstraints.SnapToVerticalLines |\n                        ej2_react_diagrams_1.SnapConstraints.SnapToLines);\n                break;\n        }\n        diagramInstance.dataBind();\n        adjustGridlineScale();\n    }\n    return (React.createElement(\"div\", { className: \"control-pane diagram-control-pane\" },\n        React.createElement(\"style\", null, sample_css),\n        React.createElement(\"div\", { className: \"col-lg-8 control-section\" },\n            React.createElement(\"div\", { className: \"content-wrapper\", style: { width: '100%' } },\n                React.createElement(ej2_react_diagrams_1.DiagramComponent, { id: \"diagram\", ref: function (diagram) { return (diagramInstance = diagram); }, width: '100%', height: '645px', nodes: nodes, drawingObject: { type: 'Orthogonal' }, connectors: connectors, selectedItems: {\n                        constraints: ej2_react_diagrams_1.SelectorConstraints.UserHandle,\n                        userHandles: handles,\n                    }, \n                    // Enables infinite scrolling for the diagram.\n                    scrollSettings: {\n                        scrollLimit: 'Infinity',\n                    }, contextMenuSettings: {\n                        show: true,\n                    }, \n                    // Initializes the diagram with specific settings when created.\n                    created: function () {\n                        diagramInstance.fitToPage({ mode: 'Width' });\n                    }, \n                    // Sets default styles for nodes.\n                    getNodeDefaults: function (node) {\n                        node.style = { fill: 'orange', strokeColor: 'orange' };\n                        return node;\n                    }, \n                    // Sets default constraints for connectors.\n                    getConnectorDefaults: function (connector) {\n                        connector.constraints =\n                            ej2_react_diagrams_1.ConnectorConstraints.Default |\n                                ej2_react_diagrams_1.ConnectorConstraints.DragSegmentThumb;\n                        return connector;\n                    }, \n                    // Handles rotation changes for diagram elements.\n                    rotateChange: function (args) {\n                        if (args.state === 'Start' || args.state === 'Progress') {\n                            diagramInstance.selectedItems = {\n                                constraints: ej2_react_diagrams_1.SelectorConstraints.All & ~ej2_react_diagrams_1.SelectorConstraints.UserHandle,\n                            };\n                        }\n                        else if (args.state === 'Completed') {\n                            diagramInstance.selectedItems = {\n                                constraints: ej2_react_diagrams_1.SelectorConstraints.All | ej2_react_diagrams_1.SelectorConstraints.UserHandle,\n                                userHandles: handles,\n                            };\n                        }\n                    }, \n                    // Defines custom actions for user handles.\n                    onUserHandleMouseDown: function (args) {\n                        switch (args.element.name) {\n                            case 'Delete':\n                                diagramInstance.remove();\n                                break;\n                            case 'Clone':\n                                diagramInstance.paste(diagramInstance.selectedItems.selectedObjects);\n                                break;\n                            case 'Draw':\n                                diagramInstance.drawingObject.shape = {};\n                                diagramInstance.drawingObject.type = diagramInstance.drawingObject.type || 'Orthogonal';\n                                diagramInstance.drawingObject.sourceID = drawingNode.id;\n                                diagramInstance.dataBind();\n                                break;\n                        }\n                    }, \n                    // Manages selection changes within the diagram.\n                    selectionChange: function (args) {\n                        if (args.state === 'Changed') {\n                            var selectedNodes = diagramInstance.selectedItems.nodes;\n                            var selectedConnectors = diagramInstance.selectedItems.connectors;\n                            var selectedItems = __spreadArray(__spreadArray([], selectedNodes, true), selectedConnectors, true);\n                            if (selectedItems.length > 0) {\n                                if (args.newValue.length > 0 && args.newValue[0] instanceof ej2_react_diagrams_1.Node) {\n                                    diagramInstance.selectedItems = {\n                                        constraints: ej2_react_diagrams_1.SelectorConstraints.All | ej2_react_diagrams_1.SelectorConstraints.UserHandle,\n                                        userHandles: handles,\n                                    };\n                                    if (selectedNodes.length > 0) {\n                                        drawingNode = selectedNodes[selectedNodes.length - 1];\n                                    }\n                                }\n                                else {\n                                    diagramInstance.selectedItems = {\n                                        constraints: ej2_react_diagrams_1.SelectorConstraints.All & ~ej2_react_diagrams_1.SelectorConstraints.UserHandle,\n                                    };\n                                }\n                            }\n                        }\n                    }, snapSettings: { snapAngle: 5 } },\n                    React.createElement(ej2_react_diagrams_1.Inject, { services: [ej2_react_diagrams_1.DiagramContextMenu, ej2_react_diagrams_1.UndoRedo, ej2_react_diagrams_1.Snapping] })))),\n        React.createElement(\"div\", { className: \"col-lg-4 property-section\" },\n            React.createElement(\"div\", { id: \"properties_Container\" },\n                React.createElement(\"div\", { className: \"property-panel-header\" }, \" Properties \"),\n                React.createElement(\"div\", { className: \"db-prop-row\" },\n                    React.createElement(\"div\", { className: \"db-prop-text-style\" },\n                        React.createElement(\"span\", { className: \"db-prop-text-style text-content\" }, \"Snapping Interval\"),\n                        React.createElement(\"div\", { className: \"db-text-input\", style: { float: 'right', marginRight: '10px' } },\n                            React.createElement(ej2_react_inputs_1.NumericTextBoxComponent, { id: \"snappingInterval\", width: 150, value: 20, min: 1, step: 1, format: \"n0\", \n                                // Sets the snapping interval\n                                change: function (args) {\n                                    diagramInstance.snapSettings.horizontalGridlines.snapIntervals[0] =\n                                        args.value;\n                                    diagramInstance.snapSettings.verticalGridlines.snapIntervals[0] =\n                                        args.value;\n                                    diagramInstance.snapSettings.horizontalGridlines.scaledIntervals[0] =\n                                        args.value;\n                                    diagramInstance.snapSettings.verticalGridlines.scaledIntervals[0] =\n                                        args.value;\n                                    diagramInstance.dataBind();\n                                }, ref: function (fontsize) { return (fontSize = fontsize); } }))),\n                    React.createElement(\"div\", { className: \"db-prop-text-style\" },\n                        React.createElement(\"span\", { className: \"db-prop-text-style text-content\" }, \"Snapping Angle\"),\n                        React.createElement(\"div\", { className: \"db-text-input\", style: { float: 'right', marginRight: '10px' } },\n                            React.createElement(ej2_react_inputs_1.NumericTextBoxComponent, { id: \"snappingAngle\", width: 150, value: 5, min: 1, step: 1, format: \"n0\", \n                                // Sets the snapping angle\n                                change: function (args) {\n                                    diagramInstance.snapSettings.snapAngle = args.value;\n                                    diagramInstance.dataBind();\n                                }, ref: function (fontsize) { return (fontSize1 = fontsize); } }))),\n                    React.createElement(\"div\", { className: \"db-prop-text-style\" },\n                        React.createElement(\"span\", { className: \"db-prop-text-style text-content\" }, \"Snapping Line Color\"),\n                        React.createElement(\"div\", { className: \"db-text-input\", style: { float: 'right', marginRight: '10px' } },\n                            React.createElement(ej2_react_inputs_1.ColorPickerComponent, { id: \"snappingLineColor\", value: \"#07EDE1\", mode: \"Palette\", showButtons: false, \n                                // Change the color of the snap lines\n                                change: function (args) {\n                                    diagramInstance.snapSettings.snapLineColor = args.value;\n                                    diagramInstance.dataBind();\n                                }, ref: function (fontcolor) { return (fontColor = fontcolor); } }))),\n                    React.createElement(\"div\", { className: \"db-prop-text-style\" },\n                        React.createElement(\"div\", { className: \"row\", style: { marginLeft: '10px' } },\n                            React.createElement(ej2_react_buttons_1.CheckBoxComponent, { id: \"showGridlines\", label: 'Show Gridline', checked: true, \n                                // Toggle the visibility of grid lines\n                                change: function () {\n                                    diagramInstance.snapSettings.constraints =\n                                        diagramInstance.snapSettings.constraints ^\n                                            ej2_react_diagrams_1.SnapConstraints.ShowLines;\n                                    diagramInstance.dataBind();\n                                    adjustGridlineScale();\n                                }, ref: function (scope) { checkboxObj = scope; } }))),\n                    React.createElement(\"div\", { className: \"db-prop-text-style\", style: { marginTop: '7px' } },\n                        React.createElement(\"div\", { className: \"row\", style: { marginLeft: '10px' } },\n                            React.createElement(ej2_react_buttons_1.CheckBoxComponent, { id: \"snapToObject\", label: 'Snapping To Objects', checked: true, \n                                // Toggle the snapping to objects\n                                change: function () {\n                                    diagramInstance.snapSettings.constraints =\n                                        diagramInstance.snapSettings.constraints ^\n                                            ej2_react_diagrams_1.SnapConstraints.SnapToObject;\n                                    diagramInstance.dataBind();\n                                    adjustGridlineScale();\n                                }, ref: function (scope) { snapToObj = scope; } }))),\n                    React.createElement(\"div\", { className: \"db-prop-text-style\" },\n                        React.createElement(\"div\", { className: \"db-prop-text-style text-content\", style: { fontWeight: 'bold' } }, \"Snapping To Lines\")),\n                    React.createElement(\"div\", { className: \"row radio-text-style\", style: { marginLeft: '7px' } },\n                        React.createElement(\"div\", null,\n                            React.createElement(ej2_react_buttons_1.RadioButtonComponent, { id: \"radio1\", name: \"snapToLines\", checked: true, value: \"Snap To Gridlines\", label: \"Snap To Gridlines\", change: function (args) {\n                                    handleSnapToLinesChange(args);\n                                } }))),\n                    React.createElement(\"div\", { className: \"row radio-text-style\", style: { marginLeft: '7px' } },\n                        React.createElement(\"div\", null,\n                            React.createElement(ej2_react_buttons_1.RadioButtonComponent, { id: \"radio2\", name: \"snapToLines\", value: \"Snap To Horizontal Gridlines\", label: \"Snap To Horizontal Gridlines\", change: function (args) {\n                                    handleSnapToLinesChange(args);\n                                } }))),\n                    React.createElement(\"div\", { className: \"row radio-text-style\", style: { marginLeft: '7px' } },\n                        React.createElement(\"div\", null,\n                            React.createElement(ej2_react_buttons_1.RadioButtonComponent, { id: \"radio3\", name: \"snapToLines\", value: \"Snap To Vertical Gridlines\", label: \"Snap To Vertical Gridlines\", change: function (args) {\n                                    handleSnapToLinesChange(args);\n                                } }))),\n                    React.createElement(\"div\", { className: \"row radio-text-style\", style: { marginLeft: '7px' } },\n                        React.createElement(\"div\", null,\n                            React.createElement(ej2_react_buttons_1.RadioButtonComponent, { id: \"radio4\", name: \"snapToLines\", value: \"None\", label: \"None\", change: function (args) {\n                                    handleSnapToLinesChange(args);\n                                } }))))))));\n}\nexports.default = SnappingSample;\nvar root = (0, client_1.createRoot)(document.getElementById('sample'));\nroot.render(React.createElement(SnappingSample, null));\n\n\n//# sourceURL=webpack:///./samples/diagram/snapping-functional/app/index.tsx?");

/***/ }),

/***/ "./samples/diagram/snapping-functional/app/sample-base.tsx":
/*!*****************************************************************!*\
  !*** ./samples/diagram/snapping-functional/app/sample-base.tsx ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.updateSampleSection = exports.SampleBase = void 0;\nvar React = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\nvar ej2_base_1 = __webpack_require__(/*! @syncfusion/ej2-base */ \"./node_modules/@syncfusion/ej2-base/index.js\");\n(0, ej2_base_1.enableRipple)(window.ripple);\nvar SampleBase = /** @class */ (function (_super) {\n    __extends(SampleBase, _super);\n    function SampleBase() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    SampleBase.prototype.rendereComplete = function () {\n        /**custom render complete function */\n    };\n    SampleBase.prototype.componentDidMount = function () {\n        var _this = this;\n        setTimeout(function () {\n            _this.rendereComplete();\n        });\n    };\n    return SampleBase;\n}(React.PureComponent));\nexports.SampleBase = SampleBase;\nfunction updateSampleSection() { }\nexports.updateSampleSection = updateSampleSection;\n\n\n//# sourceURL=webpack:///./samples/diagram/snapping-functional/app/sample-base.tsx?");

/***/ })

/******/ });