/******/ (function(modules) { // webpackBootstrap
/******/ 	// install a JSONP callback for chunk loading
/******/ 	function webpackJsonpCallback(data) {
/******/ 		var chunkIds = data[0];
/******/ 		var moreModules = data[1];
/******/ 		var executeModules = data[2];
/******/
/******/ 		// add "moreModules" to the modules object,
/******/ 		// then flag all "chunkIds" as loaded and fire callback
/******/ 		var moduleId, chunkId, i = 0, resolves = [];
/******/ 		for(;i < chunkIds.length; i++) {
/******/ 			chunkId = chunkIds[i];
/******/ 			if(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 				resolves.push(installedChunks[chunkId][0]);
/******/ 			}
/******/ 			installedChunks[chunkId] = 0;
/******/ 		}
/******/ 		for(moduleId in moreModules) {
/******/ 			if(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {
/******/ 				modules[moduleId] = moreModules[moduleId];
/******/ 			}
/******/ 		}
/******/ 		if(parentJsonpFunction) parentJsonpFunction(data);
/******/
/******/ 		while(resolves.length) {
/******/ 			resolves.shift()();
/******/ 		}
/******/
/******/ 		// add entry modules from loaded chunk to deferred list
/******/ 		deferredModules.push.apply(deferredModules, executeModules || []);
/******/
/******/ 		// run deferred modules when all chunks ready
/******/ 		return checkDeferredModules();
/******/ 	};
/******/ 	function checkDeferredModules() {
/******/ 		var result;
/******/ 		for(var i = 0; i < deferredModules.length; i++) {
/******/ 			var deferredModule = deferredModules[i];
/******/ 			var fulfilled = true;
/******/ 			for(var j = 1; j < deferredModule.length; j++) {
/******/ 				var depId = deferredModule[j];
/******/ 				if(installedChunks[depId] !== 0) fulfilled = false;
/******/ 			}
/******/ 			if(fulfilled) {
/******/ 				deferredModules.splice(i--, 1);
/******/ 				result = __webpack_require__(__webpack_require__.s = deferredModule[0]);
/******/ 			}
/******/ 		}
/******/
/******/ 		return result;
/******/ 	}
/******/
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// object to store loaded and loading chunks
/******/ 	// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 	// Promise = chunk loading, 0 = chunk loaded
/******/ 	var installedChunks = {
/******/ 		"./samples/diagram/constraints-functional/app/index.min": 0
/******/ 	};
/******/
/******/ 	var deferredModules = [];
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	var jsonpArray = window["webpackJsonp"] = window["webpackJsonp"] || [];
/******/ 	var oldJsonpFunction = jsonpArray.push.bind(jsonpArray);
/******/ 	jsonpArray.push = webpackJsonpCallback;
/******/ 	jsonpArray = jsonpArray.slice();
/******/ 	for(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);
/******/ 	var parentJsonpFunction = oldJsonpFunction;
/******/
/******/
/******/ 	// add entry module to deferred list
/******/ 	deferredModules.push(["./samples/diagram/constraints-functional/app/index.tsx","diagrams.min"]);
/******/ 	// run deferred modules when ready
/******/ 	return checkDeferredModules();
/******/ })
/************************************************************************/
/******/ ({

/***/ "./samples/diagram/constraints-functional/app/index.tsx":
/*!**************************************************************!*\
  !*** ./samples/diagram/constraints-functional/app/index.tsx ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar client_1 = __webpack_require__(/*! react-dom/client */ \"./node_modules/react-dom/client.js\");\nvar React = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\nvar ej2_react_diagrams_1 = __webpack_require__(/*! @syncfusion/ej2-react-diagrams */ \"./node_modules/@syncfusion/ej2-react-diagrams/index.js\");\nvar sample_base_1 = __webpack_require__(/*! ./sample-base */ \"./samples/diagram/constraints-functional/app/sample-base.tsx\");\nvar ej2_react_buttons_1 = __webpack_require__(/*! @syncfusion/ej2-react-buttons */ \"./node_modules/@syncfusion/ej2-react-buttons/index.js\");\nej2_react_diagrams_1.Diagram.Inject(ej2_react_diagrams_1.ConnectorEditing);\nvar diagramInstance;\nvar SAMPLE_CSS = \"\\n\\n.diagram-property-tab .row {\\n    margin-left: 0px;\\n    margin-right: 0px;\\n    padding-top: 8px;\\n  }\";\nvar handles = [\n    {\n        name: 'delete',\n        pathData: 'M 7.04 22.13 L 92.95 22.13 L 92.95 88.8 C 92.95 91.92 91.55 94.58 88.76 96.74 C 85.97 98.91 82.55 100 78.52 100 L 21.48 100 C 17.45 100 14.03 98.91 11.24 96.74 C 8.45 94.58 7.04 91.92 7.04 88.8 z M 32.22 0 L 67.78 0 L 75.17 5.47 L 100 5.47 L 100 16.67 L 0 16.67 L 0 5.47 L 24.83 5.47 z',\n        visible: true,\n        offset: 0.5,\n        side: 'Bottom',\n        margin: { top: 0, bottom: 0, left: 0, right: 0 },\n    },\n];\n//Initialize Diagram Nodes\nvar nodes = [\n    {\n        id: 'textNode1',\n        // Position of the node\n        offsetX: 340,\n        offsetY: 50,\n        // Size of the node\n        width: 550,\n        height: 50,\n        //Sets type of the node\n        shape: {\n            type: 'Text',\n            content: 'Use Node Constraints to restrict end-users from performing certain operations on Node.',\n        },\n        //Customizes the appearances such as text, font, fill, and stroke.\n        style: {\n            strokeColor: 'none',\n            fill: 'none',\n            color: 'black',\n            textAlign: 'Center',\n        },\n        constraints: ej2_react_diagrams_1.NodeConstraints.None,\n    },\n    {\n        id: 'rectangle',\n        offsetX: 80,\n        offsetY: 160,\n        height: 65,\n        shape: { type: 'Basic', shape: 'Rectangle' },\n        annotations: [{ content: 'Selection = False' }],\n        constraints: ej2_react_diagrams_1.NodeConstraints.Default & ~ej2_react_diagrams_1.NodeConstraints.Select,\n    },\n    {\n        id: 'ellipse',\n        offsetX: 190,\n        offsetY: 160,\n        height: 80,\n        shape: { type: 'Basic', shape: 'Ellipse', cornerRadius: 10 },\n        annotations: [{ content: 'Dragging = False' }],\n        constraints: ej2_react_diagrams_1.NodeConstraints.Default & ~ej2_react_diagrams_1.NodeConstraints.Drag,\n    },\n    {\n        id: 'heptagon',\n        offsetX: 295,\n        offsetY: 160,\n        height: 80,\n        shape: { type: 'Basic', shape: 'Heptagon' },\n        annotations: [{ content: 'Delete = False' }],\n        constraints: ej2_react_diagrams_1.NodeConstraints.Default & ~ej2_react_diagrams_1.NodeConstraints.Delete,\n    },\n    {\n        id: 'directData',\n        offsetX: 410,\n        offsetY: 160,\n        height: 80,\n        rotateAngle: -45,\n        shape: { type: 'Flow', shape: 'DirectData' },\n        annotations: [{ content: 'Rotate = False' }],\n        constraints: ej2_react_diagrams_1.NodeConstraints.Default & ~ej2_react_diagrams_1.NodeConstraints.Rotate,\n    },\n    {\n        id: 'Plus',\n        offsetX: 530,\n        offsetY: 160,\n        height: 80,\n        shape: { type: 'Basic', shape: 'Plus' },\n        annotations: [\n            {\n                content: 'TextEdit = False',\n                constraints: ej2_react_diagrams_1.AnnotationConstraints.ReadOnly,\n            },\n        ],\n    },\n    {\n        id: 'decision',\n        offsetX: 630,\n        offsetY: 160,\n        height: 80,\n        shape: { type: 'Flow', shape: 'Decision' },\n        annotations: [{ content: 'Resizing = False' }],\n        constraints: ej2_react_diagrams_1.NodeConstraints.Default & ~ej2_react_diagrams_1.NodeConstraints.Resize,\n    },\n    {\n        id: 'textNode2',\n        // Position of the node\n        offsetX: 350,\n        offsetY: 280,\n        // Size of the node\n        width: 550,\n        height: 50,\n        //Sets type of the node\n        shape: {\n            type: 'Text',\n            content: 'Use Connector Constraints to restrict end-users from performing certain operations on Connector.',\n        },\n        //Customizes the appearances such as text, font, fill, and stroke.\n        style: {\n            strokeColor: 'none',\n            fill: 'none',\n            color: 'black',\n            textAlign: 'Center',\n        },\n        constraints: ej2_react_diagrams_1.NodeConstraints.None,\n    },\n];\n//Initialize Diagram connectors\nvar connectors = [\n    {\n        id: 'select',\n        type: 'Orthogonal',\n        annotations: [\n            {\n                content: 'Selection = False',\n                horizontalAlignment: 'Right',\n                verticalAlignment: 'Bottom',\n            },\n        ],\n        constraints: ej2_react_diagrams_1.ConnectorConstraints.Default & ~ej2_react_diagrams_1.ConnectorConstraints.Select,\n        sourcePoint: {\n            x: 40,\n            y: 350,\n        },\n        targetPoint: {\n            x: 120,\n            y: 430,\n        },\n    },\n    {\n        id: 'connector2',\n        type: 'Orthogonal',\n        annotations: [\n            {\n                content: 'Dragging = True',\n                horizontalAlignment: 'Right',\n                verticalAlignment: 'Bottom',\n            },\n        ],\n        constraints: ej2_react_diagrams_1.ConnectorConstraints.Default |\n            ej2_react_diagrams_1.ConnectorConstraints.DragSegmentThumb |\n            ej2_react_diagrams_1.ConnectorConstraints.Drag,\n        sourcePoint: {\n            x: 140,\n            y: 350,\n        },\n        targetPoint: {\n            x: 220,\n            y: 430,\n        },\n    },\n    {\n        id: 'delete',\n        type: 'Orthogonal',\n        annotations: [\n            {\n                content: 'Delete = False',\n                horizontalAlignment: 'Right',\n                verticalAlignment: 'Bottom',\n            },\n        ],\n        constraints: (ej2_react_diagrams_1.ConnectorConstraints.Default | ej2_react_diagrams_1.ConnectorConstraints.DragSegmentThumb) &\n            ~(ej2_react_diagrams_1.ConnectorConstraints.Delete | ej2_react_diagrams_1.ConnectorConstraints.Drag),\n        sourcePoint: {\n            x: 250,\n            y: 350,\n        },\n        targetPoint: {\n            x: 320,\n            y: 430,\n        },\n    },\n    {\n        id: 'endThumb',\n        type: 'Orthogonal',\n        annotations: [\n            {\n                content: 'EndThumb = False',\n                horizontalAlignment: 'Right',\n                verticalAlignment: 'Bottom',\n            },\n        ],\n        constraints: ej2_react_diagrams_1.SelectorConstraints.All &\n            ~(ej2_react_diagrams_1.SelectorConstraints.ConnectorSourceThumb |\n                ej2_react_diagrams_1.SelectorConstraints.ConnectorTargetThumb),\n        sourcePoint: {\n            x: 360,\n            y: 350,\n        },\n        targetPoint: {\n            x: 440,\n            y: 430,\n        },\n    },\n    {\n        id: 'draggable',\n        type: 'Orthogonal',\n        annotations: [\n            {\n                content: 'EndDraggable = False',\n                horizontalAlignment: 'Right',\n                verticalAlignment: 'Bottom',\n            },\n        ],\n        constraints: (ej2_react_diagrams_1.ConnectorConstraints.Default | ej2_react_diagrams_1.ConnectorConstraints.DragSegmentThumb) &\n            ~(ej2_react_diagrams_1.ConnectorConstraints.DragSourceEnd | ej2_react_diagrams_1.ConnectorConstraints.DragTargetEnd),\n        sourcePoint: {\n            x: 460,\n            y: 350,\n        },\n        targetPoint: {\n            x: 540,\n            y: 430,\n        },\n    },\n    {\n        id: 'segmentThumb',\n        type: 'Orthogonal',\n        annotations: [\n            {\n                content: 'SegmentThumb = False',\n                horizontalAlignment: 'Right',\n                verticalAlignment: 'Bottom',\n            },\n        ],\n        constraints: ej2_react_diagrams_1.ConnectorConstraints.Default & ~ej2_react_diagrams_1.ConnectorConstraints.Drag,\n        sourcePoint: {\n            x: 580,\n            y: 350,\n        },\n        targetPoint: {\n            x: 660,\n            y: 430,\n        },\n    },\n];\nfunction ConstraintsSample() {\n    // React useEffect hook to run once on component mount\n    React.useEffect(function () {\n        (0, sample_base_1.updateSampleSection)();\n        rendereComplete(); // Call rendereComplete function\n    }, []);\n    // Function to complete rendering actions\n    function rendereComplete() {\n        diagramInstance.fitToPage({ mode: 'Width' });\n    }\n    //Setting default nodes values\n    function getNodeDefaults(nodes) {\n        if (nodes.id !== \"textNode1\" && nodes.id !== \"textNode2\") {\n            nodes.width = 80;\n            nodes.style.fill = '#C7E6FF';\n            nodes.style.strokeColor = '#1587FF';\n        }\n    }\n    //Setting default connector values\n    function getConnectorDefaults(connectors) {\n        connectors.style.strokeColor = '#6BA5D7';\n        connectors.style.fill = '#6BA5D7';\n        connectors.style.strokeWidth = 2;\n        connectors.targetDecorator.style.strokeColor = '#6BA5D7';\n        connectors.targetDecorator.style.fill = '#6BA5D7';\n        return connectors;\n    }\n    // Retrieves a tool based on the specified action and performs an operation if action is 'delete'  \n    function getTool(action) {\n        var tool;\n        if (action === 'delete') {\n            diagramInstance.remove();\n        }\n        return tool;\n    }\n    // Adjusts diagramInstance constraints to toggle Zoom capability based on args\n    function Zoomchanged(args) {\n        diagramInstance.constraints =\n            diagramInstance.constraints ^ ej2_react_diagrams_1.DiagramConstraints.Zoom;\n    }\n    // Adjusts diagramInstance constraints to toggle UndoRedo capability based on args\n    function undoRedo(args) {\n        diagramInstance.constraints =\n            diagramInstance.constraints ^ ej2_react_diagrams_1.DiagramConstraints.UndoRedo;\n    }\n    // Toggles read-only mode for annotations on nodes and connectors based on args.checked\n    function textedit(args) {\n        for (var i = 0; i < diagramInstance.nodes.length; i++) {\n            var node = diagramInstance.nodes[i];\n            if (node.annotations.length > 0 && node.annotations[0].content) {\n                if (args.checked) {\n                    if (node.id !== 'Plus') {\n                        node.annotations[0].constraints =\n                            node.annotations[0].constraints ^\n                                ej2_react_diagrams_1.AnnotationConstraints.ReadOnly;\n                    }\n                }\n                else {\n                    node.annotations[0].constraints =\n                        node.annotations[0].constraints | ej2_react_diagrams_1.AnnotationConstraints.ReadOnly;\n                }\n            }\n        }\n        for (var x = 0; x < diagramInstance.connectors.length; x++) {\n            var connector = diagramInstance.connectors[x];\n            if (connector.annotations.length > 0 && connector.annotations[0].content) {\n                if (args.checked) {\n                    if (connector.id === 'select') {\n                        connector.constraints =\n                            connector.constraints & ~ej2_react_diagrams_1.ConnectorConstraints.Select;\n                    }\n                    else {\n                        connector.annotations[0].constraints =\n                            connector.annotations[0].constraints ^\n                                ej2_react_diagrams_1.AnnotationConstraints.ReadOnly;\n                    }\n                }\n                else {\n                    connector.annotations[0].constraints =\n                        connector.annotations[0].constraints ^\n                            ej2_react_diagrams_1.AnnotationConstraints.ReadOnly;\n                }\n            }\n        }\n        diagramInstance.dataBind();\n    }\n    // Controls the visibility of the context menu in diagramInstance based on args.checked\n    function contextMenu(args) {\n        if (args.checked) {\n            diagramInstance.contextMenuSettings.show = true;\n            diagramInstance.refresh();\n        }\n        else {\n            diagramInstance.contextMenuSettings.show = false;\n        }\n        diagramInstance.dataBind();\n    }\n    // Enables or disables node and connector selection based on args.checked, excluding the id 'rectangle' and 'select'\n    function selectable(args) {\n        for (var i = 0; i < diagramInstance.nodes.length; i++) {\n            var node = diagramInstance.nodes[i];\n            if (node.id != 'rectangle') {\n                if (args.checked) {\n                    node.constraints = node.constraints | ej2_react_diagrams_1.NodeConstraints.Select;\n                }\n                else {\n                    node.constraints = node.constraints & ~ej2_react_diagrams_1.NodeConstraints.Select;\n                }\n            }\n            diagramInstance.dataBind();\n        }\n        for (var j = 0; j < diagramInstance.connectors.length; j++) {\n            var connector = diagramInstance.connectors[j];\n            if (connector.id != 'select') {\n                if (args.checked) {\n                    connector.constraints =\n                        connector.constraints | ej2_react_diagrams_1.ConnectorConstraints.Select;\n                }\n                else {\n                    connector.constraints =\n                        connector.constraints & ~ej2_react_diagrams_1.ConnectorConstraints.Select;\n                }\n            }\n            diagramInstance.dataBind();\n        }\n    }\n    // Controls draggable behavior for nodes and connectors based on args.checked\n    function draggable(args) {\n        for (var i = 0; i < diagramInstance.nodes.length; i++) {\n            var nodes_1 = diagramInstance.nodes[i];\n            if (args.checked) {\n                if (nodes_1.id === 'ellipse') {\n                    nodes_1.constraints = ej2_react_diagrams_1.NodeConstraints.Default & ~ej2_react_diagrams_1.NodeConstraints.Drag;\n                }\n                else {\n                    nodes_1.constraints = nodes_1.constraints | ej2_react_diagrams_1.NodeConstraints.Drag;\n                }\n            }\n            else {\n                nodes_1.constraints = nodes_1.constraints & ~ej2_react_diagrams_1.NodeConstraints.Drag;\n            }\n            diagramInstance.dataBind();\n        }\n        for (var j = 0; j < diagramInstance.connectors.length; j++) {\n            var connectors_1 = diagramInstance.connectors[j];\n            if (args.checked) {\n                connectors_1.constraints =\n                    connectors_1.constraints | ej2_react_diagrams_1.ConnectorConstraints.Drag;\n            }\n            else {\n                connectors_1.constraints =\n                    connectors_1.constraints & ~ej2_react_diagrams_1.ConnectorConstraints.Drag;\n            }\n            diagramInstance.dataBind();\n        }\n    }\n    return (React.createElement(\"div\", { className: \"control-pane diagram-control-pane\" },\n        React.createElement(\"style\", null, SAMPLE_CSS),\n        React.createElement(\"div\", { className: \"col-lg-10 control-section\" },\n            React.createElement(\"div\", { className: \"control-wrapper\" },\n                React.createElement(\"div\", { className: \"content-wrapper\", style: { width: '100%', background: 'white' } },\n                    React.createElement(ej2_react_diagrams_1.DiagramComponent, { id: \"diagram\", ref: function (diagram) { return (diagramInstance = diagram); }, width: '100%', height: '550px', nodes: nodes, connectors: connectors, selectedItems: {\n                            constraints: ej2_react_diagrams_1.SelectorConstraints.UserHandle,\n                            userHandles: handles,\n                        }, contextMenuSettings: {\n                            show: true,\n                        }, rulerSettings: { showRulers: true }, getNodeDefaults: getNodeDefaults, getConnectorDefaults: getConnectorDefaults, getCustomTool: getTool, created: function () {\n                            for (var i = 0; i < diagramInstance.connectors.length; i++) {\n                                if (diagramInstance.connectors[i].id === 'endThumb') {\n                                    diagramInstance.connectors[i].constraints =\n                                        (ej2_react_diagrams_1.ConnectorConstraints.Default |\n                                            ej2_react_diagrams_1.ConnectorConstraints.DragSegmentThumb) &\n                                            ~ej2_react_diagrams_1.ConnectorConstraints.Drag;\n                                }\n                            }\n                        }, selectionChange: function (args) {\n                            {\n                                if (args.state === 'Changing') {\n                                    if (args.type === 'Addition') {\n                                        if (args.newValue[0].id === 'endThumb') {\n                                            diagramInstance.selectedItems.constraints =\n                                                ej2_react_diagrams_1.SelectorConstraints.All &\n                                                    ~(ej2_react_diagrams_1.SelectorConstraints.ConnectorSourceThumb |\n                                                        ej2_react_diagrams_1.SelectorConstraints.ConnectorTargetThumb);\n                                        }\n                                        else {\n                                            diagramInstance.selectedItems.constraints =\n                                                ej2_react_diagrams_1.SelectorConstraints.All;\n                                        }\n                                    }\n                                    else {\n                                        diagramInstance.selectedItems.constraints =\n                                            ej2_react_diagrams_1.SelectorConstraints.All;\n                                    }\n                                }\n                                if (args.state === 'Changed') {\n                                    if (args.newValue.length > 0 &&\n                                        args.newValue[0] instanceof ej2_react_diagrams_1.Node) {\n                                        diagramInstance.selectedItems = {\n                                            constraints: ej2_react_diagrams_1.SelectorConstraints.All |\n                                                ej2_react_diagrams_1.SelectorConstraints.UserHandle,\n                                            userHandles: handles,\n                                        };\n                                    }\n                                    else {\n                                        if (args.newValue.length > 0 && args.newValue[0].id !== 'endThumb') {\n                                            diagramInstance.selectedItems = {\n                                                constraints: ej2_react_diagrams_1.SelectorConstraints.All &\n                                                    ~ej2_react_diagrams_1.SelectorConstraints.UserHandle,\n                                            };\n                                        }\n                                        else {\n                                            diagramInstance.selectedItems = {\n                                                constraints: ej2_react_diagrams_1.SelectorConstraints.All &\n                                                    ~(ej2_react_diagrams_1.SelectorConstraints.UserHandle |\n                                                        ej2_react_diagrams_1.SelectorConstraints.ConnectorSourceThumb |\n                                                        ej2_react_diagrams_1.SelectorConstraints.ConnectorTargetThumb),\n                                            };\n                                        }\n                                    }\n                                }\n                            }\n                        } },\n                        React.createElement(ej2_react_diagrams_1.Inject, { services: [ej2_react_diagrams_1.DiagramContextMenu, ej2_react_diagrams_1.UndoRedo] }))))),\n        React.createElement(\"div\", { className: \"col-lg-2 diagram-property-tab\" },\n            React.createElement(\"div\", { className: \"property-panel-header\" }, \"Diagram Constraints\"),\n            React.createElement(\"div\", { className: \"row property-panel-content\", style: { paddingTop: '10px' } },\n                React.createElement(\"div\", { className: \"row\" },\n                    React.createElement(ej2_react_buttons_1.CheckBoxComponent, { checked: true, label: \"Zooming\", id: \"zooming\", change: Zoomchanged })),\n                React.createElement(\"div\", { className: \"row\" },\n                    React.createElement(ej2_react_buttons_1.CheckBoxComponent, { checked: true, label: \"Undo/Redo\", id: \"undoRedo\", change: undoRedo })),\n                React.createElement(\"div\", { className: \"row\" },\n                    React.createElement(ej2_react_buttons_1.CheckBoxComponent, { checked: true, label: \"Text Edit\", id: \"textedit\", change: textedit })),\n                React.createElement(\"div\", { className: \"row\" },\n                    React.createElement(ej2_react_buttons_1.CheckBoxComponent, { checked: true, label: \"Context Menu\", id: \"contextMenu\", change: contextMenu })),\n                React.createElement(\"div\", { className: \"row\" },\n                    React.createElement(ej2_react_buttons_1.CheckBoxComponent, { checked: true, label: \"Selectable\", id: \"selectable\", change: selectable })),\n                React.createElement(\"div\", { className: \"row\" },\n                    React.createElement(ej2_react_buttons_1.CheckBoxComponent, { checked: true, label: \"Draggable\", id: \"draggable\", change: draggable }))))));\n}\nexports.default = ConstraintsSample;\nvar root = (0, client_1.createRoot)(document.getElementById('sample'));\nroot.render(React.createElement(ConstraintsSample, null));\n\n\n//# sourceURL=webpack:///./samples/diagram/constraints-functional/app/index.tsx?");

/***/ }),

/***/ "./samples/diagram/constraints-functional/app/sample-base.tsx":
/*!********************************************************************!*\
  !*** ./samples/diagram/constraints-functional/app/sample-base.tsx ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.updateSampleSection = exports.SampleBase = void 0;\nvar React = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\nvar ej2_base_1 = __webpack_require__(/*! @syncfusion/ej2-base */ \"./node_modules/@syncfusion/ej2-base/index.js\");\n(0, ej2_base_1.enableRipple)(window.ripple);\nvar SampleBase = /** @class */ (function (_super) {\n    __extends(SampleBase, _super);\n    function SampleBase() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    SampleBase.prototype.rendereComplete = function () {\n        /**custom render complete function */\n    };\n    SampleBase.prototype.componentDidMount = function () {\n        var _this = this;\n        setTimeout(function () {\n            _this.rendereComplete();\n        });\n    };\n    return SampleBase;\n}(React.PureComponent));\nexports.SampleBase = SampleBase;\nfunction updateSampleSection() { }\nexports.updateSampleSection = updateSampleSection;\n\n\n//# sourceURL=webpack:///./samples/diagram/constraints-functional/app/sample-base.tsx?");

/***/ })

/******/ });