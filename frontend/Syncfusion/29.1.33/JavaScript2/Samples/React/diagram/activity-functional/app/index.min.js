/******/ (function(modules) { // webpackBootstrap
/******/ 	// install a JSONP callback for chunk loading
/******/ 	function webpackJsonpCallback(data) {
/******/ 		var chunkIds = data[0];
/******/ 		var moreModules = data[1];
/******/ 		var executeModules = data[2];
/******/
/******/ 		// add "moreModules" to the modules object,
/******/ 		// then flag all "chunkIds" as loaded and fire callback
/******/ 		var moduleId, chunkId, i = 0, resolves = [];
/******/ 		for(;i < chunkIds.length; i++) {
/******/ 			chunkId = chunkIds[i];
/******/ 			if(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 				resolves.push(installedChunks[chunkId][0]);
/******/ 			}
/******/ 			installedChunks[chunkId] = 0;
/******/ 		}
/******/ 		for(moduleId in moreModules) {
/******/ 			if(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {
/******/ 				modules[moduleId] = moreModules[moduleId];
/******/ 			}
/******/ 		}
/******/ 		if(parentJsonpFunction) parentJsonpFunction(data);
/******/
/******/ 		while(resolves.length) {
/******/ 			resolves.shift()();
/******/ 		}
/******/
/******/ 		// add entry modules from loaded chunk to deferred list
/******/ 		deferredModules.push.apply(deferredModules, executeModules || []);
/******/
/******/ 		// run deferred modules when all chunks ready
/******/ 		return checkDeferredModules();
/******/ 	};
/******/ 	function checkDeferredModules() {
/******/ 		var result;
/******/ 		for(var i = 0; i < deferredModules.length; i++) {
/******/ 			var deferredModule = deferredModules[i];
/******/ 			var fulfilled = true;
/******/ 			for(var j = 1; j < deferredModule.length; j++) {
/******/ 				var depId = deferredModule[j];
/******/ 				if(installedChunks[depId] !== 0) fulfilled = false;
/******/ 			}
/******/ 			if(fulfilled) {
/******/ 				deferredModules.splice(i--, 1);
/******/ 				result = __webpack_require__(__webpack_require__.s = deferredModule[0]);
/******/ 			}
/******/ 		}
/******/
/******/ 		return result;
/******/ 	}
/******/
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// object to store loaded and loading chunks
/******/ 	// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 	// Promise = chunk loading, 0 = chunk loaded
/******/ 	var installedChunks = {
/******/ 		"./samples/diagram/activity-functional/app/index.min": 0
/******/ 	};
/******/
/******/ 	var deferredModules = [];
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	var jsonpArray = window["webpackJsonp"] = window["webpackJsonp"] || [];
/******/ 	var oldJsonpFunction = jsonpArray.push.bind(jsonpArray);
/******/ 	jsonpArray.push = webpackJsonpCallback;
/******/ 	jsonpArray = jsonpArray.slice();
/******/ 	for(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);
/******/ 	var parentJsonpFunction = oldJsonpFunction;
/******/
/******/
/******/ 	// add entry module to deferred list
/******/ 	deferredModules.push(["./samples/diagram/activity-functional/app/index.tsx","diagrams.min"]);
/******/ 	// run deferred modules when ready
/******/ 	return checkDeferredModules();
/******/ })
/************************************************************************/
/******/ ({

/***/ "./samples/diagram/activity-functional/app/index.tsx":
/*!***********************************************************!*\
  !*** ./samples/diagram/activity-functional/app/index.tsx ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar client_1 = __webpack_require__(/*! react-dom/client */ \"./node_modules/react-dom/client.js\");\n// Importing React and necessary components from Syncfusion's EJ2 React Diagrams library for building the UML Activity diagram.\nvar React = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\nvar ej2_react_diagrams_1 = __webpack_require__(/*! @syncfusion/ej2-react-diagrams */ \"./node_modules/@syncfusion/ej2-react-diagrams/index.js\");\nvar sample_base_1 = __webpack_require__(/*! ./sample-base */ \"./samples/diagram/activity-functional/app/sample-base.tsx\");\n// Creates a UML activity node with specified properties\nvar createNode = function (id, offsetX, offsetY, shapeType, width, height, content) {\n    if (width === void 0) { width = 40; }\n    if (height === void 0) { height = 40; }\n    if (content === void 0) { content = ''; }\n    return ({\n        id: id,\n        width: width,\n        height: height,\n        offsetX: offsetX,\n        offsetY: offsetY,\n        shape: { type: \"UmlActivity\", shape: shapeType },\n        annotations: content ? [{ content: content }] : []\n    });\n};\n// Initializes nodes representing the flow of a customer service call process\nvar nodes = [\n    createNode(\"Start\", 300, 20, \"InitialNode\"),\n    createNode(\"ReceiveCall\", 300, 100, \"Action\", 105, 40, \"Receive Customer Call\"),\n    createNode(\"ForkNode\", 300, 170, \"ForkNode\", 70, 10),\n    createNode(\"Determine\", 190, 250, \"Action\", 105, 40, \"Determine Type of Call\"),\n    createNode(\"Log\", 410, 250, \"Action\", 105, 40, \"Customer Logging a Call\"),\n    createNode(\"Decision\", 190, 350, \"Decision\", 50, 50),\n    createNode(\"transfer_sales\", 100, 450, \"Action\", 105, 40, \"Transfer the Call to Sales\"),\n    createNode(\"transfer_desk\", 280, 450, \"Action\", 105, 40, \"Transfer the Call to Help Desk\"),\n    createNode(\"MergeNode\", 190, 540, \"MergeNode\", 50, 50),\n    createNode(\"JoinNode\", 300, 630, \"JoinNode\", 70, 10),\n    createNode(\"CloseCall\", 300, 710, \"Action\", 105, 40, \"Close Call\"),\n    createNode(\"FinalNode\", 300, 800, \"FinalNode\")\n];\n// Creates a UML activity diagram connector with specified properties\nvar createConnector = function (id, sourceID, targetID, sourcePortID, targetPortID, additionalProps) {\n    if (sourcePortID === void 0) { sourcePortID = \"\"; }\n    if (targetPortID === void 0) { targetPortID = \"\"; }\n    if (additionalProps === void 0) { additionalProps = {}; }\n    return (__assign({ id: id, sourceID: sourceID, targetID: targetID, sourcePortID: sourcePortID, targetPortID: targetPortID }, additionalProps));\n};\n// Defines common segments for connectors\nvar commonSegments = {\n    orthogonalShort: [{ type: \"Orthogonal\", length: 20, direction: \"Bottom\" }],\n    orthogonalLongLeft: [{ type: \"Orthogonal\", length: 50, direction: \"Left\" }],\n    orthogonalLongRight: [{ type: \"Orthogonal\", length: 50, direction: \"Right\" }],\n    orthogonalBottom: [{ type: \"Orthogonal\", length: 50, direction: \"Bottom\" }]\n};\n// Initializes connectors for transitions between activities\nvar connectors = [\n    createConnector(\"connector1\", \"Start\", \"ReceiveCall\"),\n    createConnector(\"connector2\", \"ReceiveCall\", \"ForkNode\"),\n    createConnector(\"connector3\", \"ForkNode\", \"Determine\", \"port1\", \"portTop\", {\n        segments: __spreadArray(__spreadArray([], commonSegments.orthogonalShort, true), commonSegments.orthogonalLongLeft, true)\n    }),\n    createConnector(\"connector4\", \"ForkNode\", \"Log\", \"port2\", \"portTop\", {\n        segments: __spreadArray(__spreadArray([], commonSegments.orthogonalShort, true), commonSegments.orthogonalLongRight, true)\n    }),\n    createConnector(\"connector5\", \"Determine\", \"Decision\"),\n    createConnector(\"connector6\", \"Decision\", \"transfer_sales\", \"portLeft\", \"portTop\", {\n        shape: { type: \"UmlActivity\", flow: \"Association\" },\n        annotations: [{\n                id: \"connector6Label\", content: \"type=New Customer\", offset: 0.715,\n                style: { fill: \"white\", color: \"black\", textWrapping: 'NoWrap' }\n            }]\n    }),\n    createConnector(\"connector7\", \"Decision\", \"transfer_desk\", \"portRight\", \"portTop\", {\n        shape: { type: \"UmlActivity\", flow: \"Association\" },\n        annotations: [{\n                id: \"connector7Label\", content: \"type=Existing Customer\", offset: 0.75,\n                style: { fill: \"white\", color: \"black\", textWrapping: 'NoWrap' }\n            }]\n    }),\n    createConnector(\"connector8\", \"transfer_sales\", \"MergeNode\", \"portBottom\", \"portLeft\", {\n        segments: commonSegments.orthogonalBottom\n    }),\n    createConnector(\"connector9\", \"transfer_desk\", \"MergeNode\", \"portBottom\", \"portRight\", {\n        segments: commonSegments.orthogonalBottom\n    }),\n    createConnector(\"connector10\", \"MergeNode\", \"JoinNode\", \"portBottom\", \"port3\"),\n    createConnector(\"connector11\", \"Log\", \"JoinNode\", \"portBottom\", \"port4\", {\n        segments: __spreadArray([\n            { type: \"Orthogonal\", length: 265, direction: \"Bottom\" }\n        ], commonSegments.orthogonalLongLeft, true)\n    }),\n    createConnector(\"connector12\", \"JoinNode\", \"CloseCall\"),\n    createConnector(\"connector13\", \"CloseCall\", \"FinalNode\")\n];\n// Holds instances of DiagramComponent and HTMLElement for diagram manipulation and UI interaction\nvar diagramInstance;\nvar diagramSpaceInstance;\nvar paletteIconInstance;\nvar paletteSpaceInstance;\n// Initializes an array of UML activity shapes for the symbol palette\nvar umlActivityShapes = [\n    'Action', 'Decision', 'MergeNode', 'InitialNode', 'FinalNode', 'ForkNode',\n    'JoinNode', 'TimeEvent', 'AcceptingEvent', 'SendSignal', 'ReceiveSignal',\n    'StructuredNode', 'Note'\n].map(function (shape) { return ({ id: shape, shape: { type: 'UmlActivity', shape: shape } }); });\n// Defines a base connector symbol to standardize connector creation\nvar baseConnector = {\n    sourcePoint: { x: 0, y: 0 }, targetPoint: { x: 40, y: 40 },\n    targetDecorator: { shape: 'Arrow', style: { strokeColor: '#757575', fill: '#757575' } },\n    style: { strokeWidth: 2, strokeColor: '#757575' }\n};\n// Initializes connector symbols with varying styles for the symbol palette\nvar connectorSymbols = [\n    __assign(__assign({}, baseConnector), { id: 'Link1', type: 'Orthogonal' }),\n    __assign(__assign({}, baseConnector), { id: 'Link2', type: 'Orthogonal', style: __assign(__assign({}, baseConnector.style), { strokeDashArray: '4 4' }) }),\n    __assign(__assign({}, baseConnector), { id: 'Link3', type: 'Straight' })\n];\n// CSS styles for the diagram editor's layout, enhancing mobile responsiveness\nvar SAMPLE_CSS = \"\\n.sb-mobile-palette {\\n  width: 210px;\\n  height: 100%;\\n  float: left;\\n}\\n\\n.sb-mobile-palette-bar {\\n  display: none;\\n}\\n\\n.sb-mobile-diagram {\\n  width: calc(100% - 212px);\\n  height: 100%;\\n  float: left;\\n  border: 1px solid rgba(0, 0, 0, 0.12);\\n  border-left: none;\\n}\\n\\n@media (max-width: 550px) {\\n\\n  .sb-mobile-palette {\\n      z-index: 19;\\n      position: absolute;\\n      display: none;\\n      transition: transform 300ms linear, visibility 0s linear 300ms;\\n      width: 39%;\\n      height: 100%;\\n  }\\n\\n  .sb-mobile-palette-bar {\\n      display: block;\\n      width: 100%;\\n      background: #fafafa;\\n      padding: 10px 10px;\\n      border: 0.5px solid #e0e0e0;\\n      min-height: 40px;\\n  }\\n\\n  .sb-mobile-diagram {\\n      width: 100%;\\n      height: 100%;\\n      float: left;\\n      left: 0px;\\n  }\\n\\n  #paletteIcon {\\n      font-size: 20px;\\n  }\\n}\\n\\n.sb-mobile-palette-open {\\n  position: absolute;\\n  display: block;\\n  right: 15px;\\n}\\n\\n.e-toggle-palette::before {\\n  content: \\\"e700\\\"\\n}\";\n// Define the function UmlActivityDiagram\nfunction UmlActivityDiagram() {\n    React.useEffect(function () {\n        // Call functions to update sample section and render completion\n        (0, sample_base_1.updateSampleSection)();\n        rendereComplete();\n    }, []);\n    // Adds mobile-specific event listeners and centers the diagram upon rendering completion.\n    function rendereComplete() {\n        addMobileEvents();\n        var rect = diagramSpaceInstance.getBoundingClientRect();\n        var panX = (rect.width - rect.x) / 2;\n        // Pan diagram to center horizontally\n        diagramInstance.pan(panX, 0);\n    }\n    // Determines the port positions for a node based on its type.\n    function getNodePorts(node) {\n        if (node.id === 'ForkNode' || node.id === 'JoinNode') {\n            // Ports for ForkNode and JoinNode\n            var node2Ports = [\n                { id: 'port1', offset: { x: 0.2, y: 1 } },\n                { id: 'port2', offset: { x: 0.8, y: 1 } },\n                { id: 'port3', offset: { x: 0.2, y: 0 } },\n                { id: 'port4', offset: { x: 0.8, y: 0 } },\n            ];\n            return node2Ports;\n        }\n        else {\n            var ports = [\n                // Default ports for other nodes\n                { id: 'portLeft', offset: { x: 0, y: 0.5 } },\n                { id: 'portRight', offset: { x: 1, y: 0.5 } },\n                { id: 'portBottom', offset: { x: 0.5, y: 1 } },\n                { id: 'portTop', offset: { x: 0.5, y: 0 } },\n            ];\n            return ports;\n        }\n    }\n    // Indicates whether the current device is mobile based on the screen width.\n    var isMobile;\n    // Adds event listeners for mobile-specific interactions.\n    function addMobileEvents() {\n        isMobile = window.matchMedia('(max-width:550px)').matches;\n        // Check if device is mobile\n        if (isMobile && paletteIconInstance) {\n            paletteIconInstance.addEventListener('click', togglePalette, false);\n        }\n    }\n    // Toggles the symbol palette's visibility on mobile devices.\n    function togglePalette() {\n        isMobile = window.matchMedia('(max-width:550px)').matches;\n        if (isMobile) {\n            if (!paletteSpaceInstance.classList.contains('sb-mobile-palette-open')) {\n                // Open palette\n                paletteSpaceInstance.classList.add('sb-mobile-palette-open');\n            }\n            else {\n                // Close palette\n                paletteSpaceInstance.classList.remove('sb-mobile-palette-open');\n            }\n        }\n    }\n    // Renders the UML Activity Diagram component.\n    return (React.createElement(\"div\", { className: \"control-pane\" },\n        React.createElement(\"style\", null, SAMPLE_CSS),\n        React.createElement(\"div\", { className: \"control-section\" },\n            React.createElement(\"div\", { id: \"umlActivityDiagram\", style: { width: \"100%\", height: \"521px\" } },\n                React.createElement(\"div\", { className: \"sb-mobile-palette-bar\" },\n                    React.createElement(\"div\", { id: \"paletteIcon\", ref: function (paletteIcon) { return (paletteIconInstance = paletteIcon); }, style: { float: \"right\" }, className: \"e-ddb-icons1 e-toggle-palette\" })),\n                React.createElement(\"div\", { id: \"paletteSpace\", ref: function (paletteSpace) { return (paletteSpaceInstance = paletteSpace); }, className: \"sb-mobile-palette\" },\n                    React.createElement(ej2_react_diagrams_1.SymbolPaletteComponent, { id: \"symbolpalette\", expandMode: \"Multiple\", palettes: [\n                            {\n                                id: \"umlActivity\",\n                                expanded: true,\n                                symbols: umlActivityShapes,\n                                title: \"UML Shapes\"\n                            },\n                            {\n                                id: \"connectors\",\n                                expanded: true,\n                                symbols: connectorSymbols,\n                                title: \"Connectors\"\n                            }\n                        ], width: \"100%\", height: \"505px\", \n                        // Sets the default values for nodes\n                        getNodeDefaults: function (symbol) {\n                            if (symbol.id === 'JoinNode') {\n                                symbol.width = 20;\n                                symbol.height = 50;\n                            }\n                            else if (symbol.id === 'ForkNode') {\n                                symbol.width = 50;\n                                symbol.height = 20;\n                            }\n                            else if (symbol.id === 'Decision' || symbol.id === 'MergeNode') {\n                                symbol.width = 50;\n                                symbol.height = 40;\n                            }\n                            else {\n                                symbol.width = 50;\n                                symbol.height = 50;\n                            }\n                            if (symbol.id === 'InitialNode' || symbol.id === 'FinalNode' || symbol.id === 'JoinNode' || symbol.id === 'ForkNode') {\n                                symbol.style.fill = '#757575';\n                            }\n                            symbol.style.strokeColor = '#757575';\n                        }, symbolHeight: 55, symbolWidth: 55, symbolMargin: { left: 15, right: 15, top: 15, bottom: 15 }, getSymbolInfo: function (symbol) {\n                            return { fit: true };\n                        } },\n                        React.createElement(ej2_react_diagrams_1.Inject, { services: [ej2_react_diagrams_1.UndoRedo] }))),\n                React.createElement(\"div\", { id: \"diagramSpace\", ref: function (diagramSpace) { return (diagramSpaceInstance = diagramSpace); }, className: \"sb-mobile-diagram\" },\n                    React.createElement(ej2_react_diagrams_1.DiagramComponent, { id: \"diagram\", ref: function (diagram) { return (diagramInstance = diagram); }, width: \"100%\", height: \"100%\", nodes: nodes, connectors: connectors, snapSettings: { constraints: ej2_react_diagrams_1.SnapConstraints.None }, \n                        // Sets the default values for nodes\n                        getNodeDefaults: function (node) {\n                            node.ports = getNodePorts(node);\n                            if (node.ports) {\n                                for (var i = 0; i < node.ports.length; i++) {\n                                    node.ports[i].visibility = ej2_react_diagrams_1.PortVisibility.Hidden;\n                                }\n                            }\n                            if (node.id === 'Start' || node.id === 'ForkNode' || node.id === 'JoinNode' || node.id === 'FinalNode') {\n                                node.style.fill = '#444';\n                            }\n                            node.style.strokeColor = '#444';\n                            return node;\n                        }, \n                        // Sets the default values for connectors\n                        getConnectorDefaults: function (connector) {\n                            if (connector.id.indexOf('connector') !== -1) {\n                                connector.type = 'Orthogonal';\n                                connector.cornerRadius = 10;\n                                connector.targetDecorator = { shape: 'OpenArrow', style: { strokeColor: '#444', fill: '#444' } };\n                            }\n                        } },\n                        React.createElement(ej2_react_diagrams_1.Inject, { services: [ej2_react_diagrams_1.UndoRedo] })))))));\n}\nexports.default = UmlActivityDiagram;\nvar root = (0, client_1.createRoot)(document.getElementById('sample'));\nroot.render(React.createElement(UmlActivityDiagram, null));\n\n\n//# sourceURL=webpack:///./samples/diagram/activity-functional/app/index.tsx?");

/***/ }),

/***/ "./samples/diagram/activity-functional/app/sample-base.tsx":
/*!*****************************************************************!*\
  !*** ./samples/diagram/activity-functional/app/sample-base.tsx ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.updateSampleSection = exports.SampleBase = void 0;\nvar React = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\nvar ej2_base_1 = __webpack_require__(/*! @syncfusion/ej2-base */ \"./node_modules/@syncfusion/ej2-base/index.js\");\n(0, ej2_base_1.enableRipple)(window.ripple);\nvar SampleBase = /** @class */ (function (_super) {\n    __extends(SampleBase, _super);\n    function SampleBase() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    SampleBase.prototype.rendereComplete = function () {\n        /**custom render complete function */\n    };\n    SampleBase.prototype.componentDidMount = function () {\n        var _this = this;\n        setTimeout(function () {\n            _this.rendereComplete();\n        });\n    };\n    return SampleBase;\n}(React.PureComponent));\nexports.SampleBase = SampleBase;\nfunction updateSampleSection() { }\nexports.updateSampleSection = updateSampleSection;\n\n\n//# sourceURL=webpack:///./samples/diagram/activity-functional/app/sample-base.tsx?");

/***/ })

/******/ });