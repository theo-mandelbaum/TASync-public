/******/ (function(modules) { // webpackBootstrap
/******/ 	// install a JSONP callback for chunk loading
/******/ 	function webpackJsonpCallback(data) {
/******/ 		var chunkIds = data[0];
/******/ 		var moreModules = data[1];
/******/ 		var executeModules = data[2];
/******/
/******/ 		// add "moreModules" to the modules object,
/******/ 		// then flag all "chunkIds" as loaded and fire callback
/******/ 		var moduleId, chunkId, i = 0, resolves = [];
/******/ 		for(;i < chunkIds.length; i++) {
/******/ 			chunkId = chunkIds[i];
/******/ 			if(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 				resolves.push(installedChunks[chunkId][0]);
/******/ 			}
/******/ 			installedChunks[chunkId] = 0;
/******/ 		}
/******/ 		for(moduleId in moreModules) {
/******/ 			if(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {
/******/ 				modules[moduleId] = moreModules[moduleId];
/******/ 			}
/******/ 		}
/******/ 		if(parentJsonpFunction) parentJsonpFunction(data);
/******/
/******/ 		while(resolves.length) {
/******/ 			resolves.shift()();
/******/ 		}
/******/
/******/ 		// add entry modules from loaded chunk to deferred list
/******/ 		deferredModules.push.apply(deferredModules, executeModules || []);
/******/
/******/ 		// run deferred modules when all chunks ready
/******/ 		return checkDeferredModules();
/******/ 	};
/******/ 	function checkDeferredModules() {
/******/ 		var result;
/******/ 		for(var i = 0; i < deferredModules.length; i++) {
/******/ 			var deferredModule = deferredModules[i];
/******/ 			var fulfilled = true;
/******/ 			for(var j = 1; j < deferredModule.length; j++) {
/******/ 				var depId = deferredModule[j];
/******/ 				if(installedChunks[depId] !== 0) fulfilled = false;
/******/ 			}
/******/ 			if(fulfilled) {
/******/ 				deferredModules.splice(i--, 1);
/******/ 				result = __webpack_require__(__webpack_require__.s = deferredModule[0]);
/******/ 			}
/******/ 		}
/******/
/******/ 		return result;
/******/ 	}
/******/
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// object to store loaded and loading chunks
/******/ 	// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 	// Promise = chunk loading, 0 = chunk loaded
/******/ 	var installedChunks = {
/******/ 		"./samples/diagram/port/app/index.min": 0
/******/ 	};
/******/
/******/ 	var deferredModules = [];
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	var jsonpArray = window["webpackJsonp"] = window["webpackJsonp"] || [];
/******/ 	var oldJsonpFunction = jsonpArray.push.bind(jsonpArray);
/******/ 	jsonpArray.push = webpackJsonpCallback;
/******/ 	jsonpArray = jsonpArray.slice();
/******/ 	for(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);
/******/ 	var parentJsonpFunction = oldJsonpFunction;
/******/
/******/
/******/ 	// add entry module to deferred list
/******/ 	deferredModules.push(["./samples/diagram/port/app/index.tsx","diagrams.min"]);
/******/ 	// run deferred modules when ready
/******/ 	return checkDeferredModules();
/******/ })
/************************************************************************/
/******/ ({

/***/ "./samples/diagram/port/app/index.tsx":
/*!********************************************!*\
  !*** ./samples/diagram/port/app/index.tsx ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Port = void 0;\nvar client_1 = __webpack_require__(/*! react-dom/client */ \"./node_modules/react-dom/client.js\");\n// Import React and necessary components from Syncfusion's EJ2 React Diagrams library for building the diagram.\nvar React = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\nvar ej2_react_diagrams_1 = __webpack_require__(/*! @syncfusion/ej2-react-diagrams */ \"./node_modules/@syncfusion/ej2-react-diagrams/index.js\");\nvar sample_base_1 = __webpack_require__(/*! ./sample-base */ \"./samples/diagram/port/app/sample-base.tsx\");\nvar ej2_react_dropdowns_1 = __webpack_require__(/*! @syncfusion/ej2-react-dropdowns */ \"./node_modules/@syncfusion/ej2-react-dropdowns/index.js\");\nvar ej2_react_inputs_1 = __webpack_require__(/*! @syncfusion/ej2-react-inputs */ \"./node_modules/@syncfusion/ej2-react-inputs/index.js\");\n// Global variables for diagram and property panel instances, and UI components.\nvar diagramInstance;\nvar propertypanelInstance;\nvar portVisibilityDrop;\nvar portFillDrop;\nvar portBorderDrop;\nvar portShapeDrop;\nvar portSizeNum;\nvar portWidthNum;\n// Creates a node with specified properties and ports.\nfunction createNode(id, offsetX, offsetY, annotationContent, ports) {\n    return {\n        id: id,\n        offsetX: offsetX,\n        offsetY: offsetY,\n        annotations: [{ content: annotationContent }],\n        ports: ports\n    };\n}\n// Creates a connector linking two ports of different nodes.\nfunction createConnector(id, sourceID, sourcePortID, targetID, targetPortID) {\n    return {\n        id: id,\n        sourceID: sourceID,\n        sourcePortID: sourcePortID,\n        targetID: targetID,\n        targetPortID: targetPortID\n    };\n}\n// Creates a port with specified properties.\nfunction createPort(id, shape, offsetX, offsetY, text) {\n    return {\n        id: id,\n        shape: shape,\n        offset: { x: offsetX, y: offsetY },\n        height: 8,\n        width: 8,\n        visibility: ej2_react_diagrams_1.PortVisibility.Visible,\n        text: text\n    };\n}\n// Predefined ports for nodes.\nvar node1Port = [\n    createPort('port1', 'Circle', 0, 0.5, 'In - 1'),\n    createPort('port2', 'Circle', 1, 0.5, 'OUT - 1'),\n    createPort('port3', 'Circle', 0.25, 1, 'In - 2'),\n    createPort('port4', 'Circle', 0.5, 1, 'OUT - 2'),\n    createPort('port5', 'Circle', 0.75, 1, 'In - 3')\n];\nvar node2Port = [\n    createPort('port6', 'Circle', 0, 0.5, 'In - 1'),\n    createPort('port7', 'Circle', 1, 0.35, 'OUT - 1'),\n    createPort('port8', 'Circle', 1, 0.70, 'In - 2'),\n    createPort('port9', 'Circle', 0.5, 1, 'OUT - 2')\n];\nvar node3Port = [\n    createPort('port10', 'Circle', 0, 0.5, 'Out - 1'),\n    createPort('port11', 'Circle', 0.5, 0, 'In - 1'),\n    createPort('port12', 'Circle', 0.5, 1, 'OUT - 2')\n];\nvar node4Port = [\n    createPort('port13', 'Circle', 0, 0.5, 'In - 1'),\n    createPort('port14', 'Circle', 0.5, 0, 'In - 2'),\n    createPort('port15', 'Circle', 0.5, 1, 'OUT - 1')\n];\nvar node5Port = [\n    createPort('port16', 'Circle', 0, 0.5, 'out - 1'),\n    createPort('port17', 'Circle', 0.5, 0, 'In - 1'),\n    createPort('port18', 'Circle', 1, 0.5, 'OUT - 2')\n];\nvar node6Port = [\n    createPort('port19', 'Circle', 0, 0.35, 'In - 1'),\n    createPort('port20', 'Circle', 0.5, 1, 'Out - 1')\n];\nvar node7Port = [\n    createPort('port21', 'Circle', 0.5, 0, 'In - 1'),\n    createPort('port22', 'Circle', 0.5, 1, 'Out - 1')\n];\n// Basic shapes for nodes.\nvar shape1 = { type: \"Basic\", shape: \"Rectangle\" };\nvar shape2 = { type: \"Basic\", shape: \"Diamond\" };\n// Node definitions for the diagram.\nvar nodes = [\n    createNode('node1', 100, 100, 'Publisher', node1Port),\n    createNode('node2', 300, 100, 'Completed Book', node2Port),\n    createNode('node3', 300, 200, '1st Review', node3Port),\n    createNode('node4', 300, 300, 'Legal Terms', node4Port),\n    createNode('node5', 300, 400, '2nd Review', node5Port),\n    createNode('node6', 500, 100, 'Board', node6Port),\n    createNode('node7', 500, 200, 'Approval', node7Port)\n];\n// Connector definitions for the diagram.\nvar connectors = [\n    createConnector('connector1', 'node1', 'port2', 'node2', 'port6'),\n    createConnector('connector2', 'node1', 'port4', 'node4', 'port13'),\n    createConnector('connector3', 'node2', 'port9', 'node3', 'port11'),\n    createConnector('connector4', 'node2', 'port7', 'node6', 'port19'),\n    createConnector('connector5', 'node3', 'port10', 'node1', 'port5'),\n    createConnector('connector6', 'node3', 'port12', 'node4', 'port14'),\n    createConnector('connector7', 'node4', 'port15', 'node5', 'port17'),\n    createConnector('connector8', 'node5', 'port18', 'node2', 'port8'),\n    createConnector('connector9', 'node5', 'port16', 'node1', 'port3'),\n    createConnector('connector10', 'node6', 'port20', 'node7', 'port21'),\n    createConnector('connector11', 'node7', 'port22', 'node1', 'port1')\n];\n// Port visibility options for the dropdown.\nvar visibility = [\n    { PortVisibility: ej2_react_diagrams_1.PortVisibility.Visible, text: \"Visible\" },\n    { PortVisibility: ej2_react_diagrams_1.PortVisibility.Hidden, text: \"Hidden\" },\n    { PortVisibility: ej2_react_diagrams_1.PortVisibility.Hover, text: \"Hover\" },\n    { PortVisibility: ej2_react_diagrams_1.PortVisibility.Connect, text: \"Connect\" }\n];\n// Port shape options for the dropdown.\nvar shape = [\n    { shape: \"X\", text: \"X\" },\n    { shape: \"Circle\", text: \"Circle\" },\n    { shape: \"Square\", text: \"Square\" },\n    { shape: \"Custom\", text: \"Custom\" }\n];\n// CSS styles for the property panel.\nvar sample_css = \" \\n.sb-child-row {\\n  margin-top: 8px;\\n}\\n\\n.property-panel-header {\\n  padding-top: 15px;\\n  padding-bottom: 15px;\\n}\\n\\n.property-section .e-remove-selection{\\n  cursor: not-allowed;\\n}\\n\\n.row-header {\\n  font-size: 13px;\\n  font-weight: 500;\\n  padding-left: 10px\\n}\\n\\n.e-remove-selection .property-section-content {\\n  pointer-events: none;\\n}\";\nvar Port = /** @class */ (function (_super) {\n    __extends(Port, _super);\n    function Port() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    // This method is called after the component is rendered.\n    // It fits the diagram content within the diagram viewport and selects the first node.\n    Port.prototype.rendereComplete = function () {\n        diagramInstance.fitToPage();\n        diagramInstance.select([diagramInstance.nodes[0]]);\n    };\n    // Renders the diagram and property panel UI components.\n    Port.prototype.render = function () {\n        return (React.createElement(\"div\", { className: \"control-pane\" },\n            React.createElement(\"style\", null, sample_css),\n            React.createElement(\"div\", { className: \"col-lg-8 control-section\" },\n                React.createElement(ej2_react_diagrams_1.DiagramComponent, { id: \"diagram\", ref: function (diagram) { return (diagramInstance = diagram); }, width: \"100%\", height: 580, nodes: nodes, connectors: connectors, selectionChange: onSelectionChange, snapSettings: { constraints: 0 }, \n                    // Sets default properties for nodes, including shape, size, and style.\n                    getNodeDefaults: function (node) {\n                        // Initialize shape based on node ID.\n                        if (node.id === \"node1\" || node.id === \"node2\" ||\n                            node.id === \"node4\" || node.id === \"node6\") {\n                            node.shape = shape1;\n                        }\n                        else if (node.id === \"node3\" || node.id === \"node5\" ||\n                            node.id === \"node7\") {\n                            node.shape = shape2;\n                        }\n                        // Sets height, width, and style for nodes.\n                        node.height = 65;\n                        node.width = 100;\n                        node.style = { fill: \"#ebf8fb\", strokeColor: \"#baeaf5\" };\n                        // Sets styles for the ports of the node.\n                        node.ports.forEach(function (port) {\n                            port.style = {\n                                fill: \"#366f8c\",\n                                strokeColor: \"#366f8c\"\n                            };\n                            port.width = 6;\n                            port.height = 6;\n                        });\n                        // Sets style for the node annotations.\n                        node.annotations[0].style = {\n                            bold: true,\n                            fontSize: 13,\n                            color: \"black\"\n                        };\n                    }, \n                    // Sets default properties for connectors, including type and style.\n                    getConnectorDefaults: function (connector) {\n                        // Defines type and style of the connectors.\n                        connector.type = \"Orthogonal\";\n                        connector.style = { strokeColor: \"#8cdcef\", strokeWidth: 1 };\n                        // Sets the target decorator style.\n                        connector.targetDecorator = {\n                            width: 5,\n                            height: 5,\n                            style: { fill: \"#8cdcef\", strokeColor: \"#8cdcef\" }\n                        };\n                    } })),\n            React.createElement(\"div\", { className: \"col-lg-4 property-section\" },\n                React.createElement(\"div\", { className: \"property-panel-header\" }, \"Properties\"),\n                React.createElement(\"div\", { className: \"property-panel-content\" },\n                    React.createElement(\"div\", { id: \"propertypanel\", className: \"e-remove-selection\", ref: function (propertypanel) { return (propertypanelInstance = propertypanel); } },\n                        React.createElement(\"div\", { className: \"property-section-content\" },\n                            React.createElement(\"div\", { className: \"row row-header\", style: { fontSize: \"13px\" } }, \"Port Customization\"),\n                            React.createElement(\"div\", { className: \"row sb-child-row\" },\n                                React.createElement(\"div\", { className: \"col-lg-6\" },\n                                    React.createElement(\"div\", { style: { paddingBottom: \"8px\" } }, \"Visibility\"),\n                                    React.createElement(\"div\", null,\n                                        React.createElement(ej2_react_dropdowns_1.DropDownListComponent, { id: \"portsVisiblity\", enabled: true, dataSource: visibility, fields: { value: \"PortVisibility\", text: \"text\" }, change: onPortVisibilityChange, ref: function (portVisibilityref) { portVisibilityDrop = portVisibilityref; } },\n                                            React.createElement(ej2_react_dropdowns_1.Inject, { services: [ej2_react_dropdowns_1.CheckBoxSelection] })))),\n                                React.createElement(\"div\", { className: \"col-lg-6\" },\n                                    React.createElement(\"div\", { style: { paddingBottom: \"8px\" } }, \"Shape\"),\n                                    React.createElement(\"div\", null,\n                                        React.createElement(ej2_react_dropdowns_1.DropDownListComponent, { id: \"shape\", enabled: true, placeholder: \"Select a Shape\", dataSource: shape, value: \"Circle\", fields: { value: \"shape\", text: \"text\" }, change: onPortShapeChange, ref: function (portShapeDropref) {\n                                                return (portShapeDrop = portShapeDropref);\n                                            } })))),\n                            React.createElement(\"div\", { className: \"row sb-child-row\" },\n                                React.createElement(\"div\", { className: \"col-lg-6\" },\n                                    React.createElement(\"div\", { style: { paddingBottom: \"8px\" } }, \"Fill Color\"),\n                                    React.createElement(\"div\", { style: { paddingBottom: \"8px\" } },\n                                        React.createElement(ej2_react_inputs_1.ColorPickerComponent, { id: \"fillcolor\", value: \"#000\", disabled: false, change: function (arg) {\n                                                var port = getSelectedPort();\n                                                port.forEach(function (p) {\n                                                    p.style.fill = arg.currentValue.rgba;\n                                                });\n                                            }, ref: function (fillcolor) { return (portFillDrop = fillcolor); } }))),\n                                React.createElement(\"div\", { className: \"col-lg-6\" },\n                                    React.createElement(\"div\", { style: { paddingBottom: \"8px\" } }, \"Stroke Color\"),\n                                    React.createElement(\"div\", { style: { paddingBottom: \"8px\" } },\n                                        React.createElement(ej2_react_inputs_1.ColorPickerComponent, { id: \"strokecolor\", value: \"#000\", disabled: false, change: function (arg) {\n                                                var port = getSelectedPort();\n                                                port.forEach(function (p) {\n                                                    p.style.strokeColor = arg.currentValue.rgba;\n                                                });\n                                            }, ref: function (strokecolor) { return (portBorderDrop = strokecolor); } })))),\n                            React.createElement(\"div\", { className: \"row sb-child-row\" },\n                                React.createElement(\"div\", { className: \"col-lg-6\" },\n                                    React.createElement(\"div\", { style: { paddingBottom: \"8px\" } }, \"Stroke Width\"),\n                                    React.createElement(\"div\", { style: { paddingBottom: \"8px\" } },\n                                        React.createElement(ej2_react_inputs_1.NumericTextBoxComponent, { ref: function (widthRef) { return (portWidthNum = widthRef); }, id: \"width\", enabled: true, format: \"###.##\", value: 1, step: 0.5, max: 20, min: 1, change: function (args) {\n                                                applyPortStyle(\"strokewidth\");\n                                            } }))),\n                                React.createElement(\"div\", { className: \"col-lg-6\" },\n                                    React.createElement(\"div\", { style: { paddingBottom: \"8px\" } }, \"Size\"),\n                                    React.createElement(\"div\", { style: { paddingBottom: \"8px\" } },\n                                        React.createElement(ej2_react_inputs_1.NumericTextBoxComponent, { ref: function (sizeRef) { return (portSizeNum = sizeRef); }, id: \"size\", enabled: true, format: \"###.##\", value: 6, step: 1, max: 30, min: 1, change: function (args) {\n                                                applyPortStyle(\"size\");\n                                            } }))))))))));\n    };\n    return Port;\n}(sample_base_1.SampleBase));\nexports.Port = Port;\n// Handles changes in selection within the diagram.\n// It updates the property panel based on the selected node's port properties.\nfunction onSelectionChange(args) {\n    if (args.state === \"Changed\") {\n        var selectedElement = document.getElementsByClassName(\"e-remove-selection\");\n        if (args.newValue) {\n            if (!propertypanelInstance.classList.contains(\"e-remove-selection\")) {\n                propertypanelInstance.classList.add(\"e-remove-selection\");\n            }\n            if (args.newValue[0] instanceof ej2_react_diagrams_1.Node && selectedElement.length) {\n                selectedElement[0].classList.remove(\"e-remove-selection\");\n                var port = getSelectedPort()[0];\n                // Update UI components with the selected port's properties.\n                portVisibilityDrop.value = port.visibility;\n                portVisibilityDrop.dataBind();\n                portFillDrop.value = port.style.fill;\n                portFillDrop.dataBind();\n                portBorderDrop.value = port.style.strokeColor;\n                portBorderDrop.dataBind();\n                portShapeDrop.value = port.shape;\n                portShapeDrop.dataBind();\n                portSizeNum.value = port.height;\n                portSizeNum.dataBind();\n                portWidthNum.value = port.style.strokeWidth;\n                portWidthNum.dataBind();\n            }\n        }\n    }\n}\n// Retrieves the ports of the currently selected node in the diagram.\nfunction getSelectedPort() {\n    var node = diagramInstance.selectedItems.nodes[0];\n    var port = [];\n    if (node) {\n        port = node.ports;\n    }\n    return port;\n}\n// Updates the visibility of the selected port(s) based on the user's selection in the dropdown.\nfunction onPortVisibilityChange(args) {\n    var port = getSelectedPort();\n    if (port) {\n        for (var j = 0; j < port.length; j++) {\n            port[j].visibility = portVisibilityDrop.value;\n            diagramInstance.dataBind();\n        }\n    }\n}\n// Updates the shape of the selected port(s) based on the user's selection in the dropdown.\nfunction onPortShapeChange(args) {\n    var port = getSelectedPort();\n    for (var j = 0; j < port.length; j++) {\n        switch (portShapeDrop.value) {\n            case \"X\":\n                port[j].shape = \"X\";\n                break;\n            case \"Circle\":\n                port[j].shape = \"Circle\";\n                break;\n            case \"Square\":\n                port[j].shape = \"Square\";\n                break;\n            case \"Custom\":\n                port[j].shape = \"Custom\";\n                port[j].pathData = \"M6.805,0L13.61,10.703L0,10.703z\";\n                break;\n        }\n        diagramInstance.dataBind();\n    }\n}\n// Applies the selected style (size or stroke width) to the selected port(s).\nfunction applyPortStyle(value) {\n    var port = getSelectedPort();\n    for (var j = 0; j < port.length; j++) {\n        if (value === \"size\" && portSizeNum) {\n            port[j].height = portSizeNum.value;\n            port[j].width = portSizeNum.value;\n        }\n        else if (value === \"strokewidth\" && portWidthNum) {\n            port[j].style.strokeWidth = portWidthNum.value;\n        }\n    }\n    diagramInstance.dataBind();\n}\nvar root = (0, client_1.createRoot)(document.getElementById('sample'));\nroot.render(React.createElement(Port, null));\n\n\n//# sourceURL=webpack:///./samples/diagram/port/app/index.tsx?");

/***/ }),

/***/ "./samples/diagram/port/app/sample-base.tsx":
/*!**************************************************!*\
  !*** ./samples/diagram/port/app/sample-base.tsx ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.updateSampleSection = exports.SampleBase = void 0;\nvar React = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\nvar ej2_base_1 = __webpack_require__(/*! @syncfusion/ej2-base */ \"./node_modules/@syncfusion/ej2-base/index.js\");\n(0, ej2_base_1.enableRipple)(window.ripple);\nvar SampleBase = /** @class */ (function (_super) {\n    __extends(SampleBase, _super);\n    function SampleBase() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    SampleBase.prototype.rendereComplete = function () {\n        /**custom render complete function */\n    };\n    SampleBase.prototype.componentDidMount = function () {\n        var _this = this;\n        setTimeout(function () {\n            _this.rendereComplete();\n        });\n    };\n    return SampleBase;\n}(React.PureComponent));\nexports.SampleBase = SampleBase;\nfunction updateSampleSection() { }\nexports.updateSampleSection = updateSampleSection;\n\n\n//# sourceURL=webpack:///./samples/diagram/port/app/sample-base.tsx?");

/***/ })

/******/ });