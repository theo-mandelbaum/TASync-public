/******/ (function(modules) { // webpackBootstrap
/******/ 	// install a JSONP callback for chunk loading
/******/ 	function webpackJsonpCallback(data) {
/******/ 		var chunkIds = data[0];
/******/ 		var moreModules = data[1];
/******/ 		var executeModules = data[2];
/******/
/******/ 		// add "moreModules" to the modules object,
/******/ 		// then flag all "chunkIds" as loaded and fire callback
/******/ 		var moduleId, chunkId, i = 0, resolves = [];
/******/ 		for(;i < chunkIds.length; i++) {
/******/ 			chunkId = chunkIds[i];
/******/ 			if(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 				resolves.push(installedChunks[chunkId][0]);
/******/ 			}
/******/ 			installedChunks[chunkId] = 0;
/******/ 		}
/******/ 		for(moduleId in moreModules) {
/******/ 			if(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {
/******/ 				modules[moduleId] = moreModules[moduleId];
/******/ 			}
/******/ 		}
/******/ 		if(parentJsonpFunction) parentJsonpFunction(data);
/******/
/******/ 		while(resolves.length) {
/******/ 			resolves.shift()();
/******/ 		}
/******/
/******/ 		// add entry modules from loaded chunk to deferred list
/******/ 		deferredModules.push.apply(deferredModules, executeModules || []);
/******/
/******/ 		// run deferred modules when all chunks ready
/******/ 		return checkDeferredModules();
/******/ 	};
/******/ 	function checkDeferredModules() {
/******/ 		var result;
/******/ 		for(var i = 0; i < deferredModules.length; i++) {
/******/ 			var deferredModule = deferredModules[i];
/******/ 			var fulfilled = true;
/******/ 			for(var j = 1; j < deferredModule.length; j++) {
/******/ 				var depId = deferredModule[j];
/******/ 				if(installedChunks[depId] !== 0) fulfilled = false;
/******/ 			}
/******/ 			if(fulfilled) {
/******/ 				deferredModules.splice(i--, 1);
/******/ 				result = __webpack_require__(__webpack_require__.s = deferredModule[0]);
/******/ 			}
/******/ 		}
/******/
/******/ 		return result;
/******/ 	}
/******/
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// object to store loaded and loading chunks
/******/ 	// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 	// Promise = chunk loading, 0 = chunk loaded
/******/ 	var installedChunks = {
/******/ 		"./samples/diagram/activity-class-functional/app/index.min": 0
/******/ 	};
/******/
/******/ 	var deferredModules = [];
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	var jsonpArray = window["webpackJsonp"] = window["webpackJsonp"] || [];
/******/ 	var oldJsonpFunction = jsonpArray.push.bind(jsonpArray);
/******/ 	jsonpArray.push = webpackJsonpCallback;
/******/ 	jsonpArray = jsonpArray.slice();
/******/ 	for(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);
/******/ 	var parentJsonpFunction = oldJsonpFunction;
/******/
/******/
/******/ 	// add entry module to deferred list
/******/ 	deferredModules.push(["./samples/diagram/activity-class-functional/app/index.tsx","diagrams.min"]);
/******/ 	// run deferred modules when ready
/******/ 	return checkDeferredModules();
/******/ })
/************************************************************************/
/******/ ({

/***/ "./samples/diagram/activity-class-functional/app/index.tsx":
/*!*****************************************************************!*\
  !*** ./samples/diagram/activity-class-functional/app/index.tsx ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar client_1 = __webpack_require__(/*! react-dom/client */ \"./node_modules/react-dom/client.js\");\nvar React = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\nvar ej2_react_diagrams_1 = __webpack_require__(/*! @syncfusion/ej2-react-diagrams */ \"./node_modules/@syncfusion/ej2-react-diagrams/index.js\");\nvar sample_base_1 = __webpack_require__(/*! ./sample-base */ \"./samples/diagram/activity-class-functional/app/sample-base.tsx\");\nvar diagramInstance;\nvar paletteIconInstance;\nvar paletteSpaceInstance;\n//Initialize nodes for the diagram.\nvar nodes = [\n    {\n        id: 'Patient',\n        shape: {\n            type: 'UmlClassifier',\n            classShape: {\n                name: 'Patient',\n                attributes: [\n                    createProperty('accepted', 'Date'),\n                    createProperty('sickness', 'History'),\n                    createProperty('prescription', 'String[*]'),\n                    createProperty('allergies', 'String[*]')\n                ],\n                methods: [createMethods('getHistory', 'History')]\n            },\n            classifier: 'Class'\n        },\n        offsetX: 200,\n        offsetY: 250\n    },\n    {\n        id: 'Doctor',\n        shape: {\n            type: 'UmlClassifier',\n            classShape: {\n                name: 'Doctor',\n                attributes: [\n                    createProperty('specialist', 'String[*]'),\n                    createProperty('locations', 'String[*]')\n                ]\n            },\n            classifier: 'Class'\n        },\n        offsetX: 240,\n        offsetY: 545\n    },\n    {\n        id: 'Person',\n        shape: {\n            type: 'UmlClassifier',\n            classShape: {\n                name: 'Person',\n                attributes: [\n                    createProperty('name', 'Name'),\n                    createProperty('title', 'String[*]'),\n                    createProperty('gender', 'Gender')\n                ]\n            },\n            classifier: 'Class'\n        },\n        offsetX: 405,\n        offsetY: 105\n    },\n    {\n        id: 'Hospital',\n        shape: {\n            type: 'UmlClassifier',\n            classShape: {\n                name: 'Hospital',\n                attributes: [\n                    createProperty('name', 'Name'),\n                    createProperty('address', 'Address'),\n                    createProperty('phone', 'Phone')\n                ],\n                methods: [createMethods('getDepartment', 'String')]\n            },\n            classifier: 'Class'\n        },\n        offsetX: 638,\n        offsetY: 100\n    },\n    {\n        id: 'Department',\n        shape: {\n            type: 'UmlClassifier',\n            classShape: {\n                name: 'Department',\n                methods: [createMethods('getStaffCount', 'Int')]\n            },\n            classifier: 'Class'\n        },\n        offsetX: 638,\n        offsetY: 280\n    },\n    {\n        id: 'Staff',\n        shape: {\n            type: 'UmlClassifier',\n            classShape: {\n                name: 'Staff',\n                attributes: [\n                    createProperty('joined', 'Date'),\n                    createProperty('education', 'string[*]'),\n                    createProperty('certification', 'string[*]'),\n                    createProperty('languages', 'string[*]')\n                ],\n                methods: [\n                    createMethods('isDoctor', 'bool'),\n                    createMethods('getHistory', 'bool')\n                ]\n            },\n            classifier: 'Class'\n        },\n        offsetX: 635,\n        offsetY: 455\n    },\n    createNode('OperationStaff', 410, 455, 'OperationStaff'),\n    createNode('Nurse', 410, 545, 'Nurse'),\n    createNode('Surgeon', 240, 665, 'Surgeon'),\n    createNode('AdministrativeStaff', 632, 605, 'AdministrativeStaff'),\n    createNode('FrontDeskStaff', 630, 695, 'FrontDeskStaff'),\n    createNode('TechnicalStaff', 928, 445, 'TechnicalStaff'),\n    createNode('Technician', 815, 535, 'Technician'),\n    createNode('Technologist', 1015, 535, 'Technologist'),\n    createNode('SurgicalTechnologist', 1015, 630, 'SurgicalTechnologist')\n];\n//Initialize connector for the diagram.\nvar connectors = [\n    createConnector('connect1', 'Patient', 'Person'),\n    createConnector('connect2', 'Person', 'Hospital'),\n    createConnector('connect3', 'Department', 'Hospital'),\n    createConnector('connect4', 'OperationStaff', 'Patient'),\n    createConnector('connect5', 'Doctor', 'OperationStaff'),\n    createConnector('connect6', 'Nurse', 'OperationStaff'),\n    createConnector('connect7', 'Surgeon', 'Doctor'),\n    createConnector('connect8', 'FrontDeskStaff', 'AdministrativeStaff'),\n    createConnector('connect9', 'Technician', 'TechnicalStaff'),\n    createConnector('connect10', 'Technologist', 'TechnicalStaff'),\n    createConnector('connect11', 'SurgicalTechnologist', 'Technologist'),\n    createConnector('connect12', 'Staff', 'Department'),\n    createConnector('connect13', 'Staff', 'Person'),\n    createConnector('connect14', 'OperationStaff', 'Staff'),\n    createConnector('connect15', 'AdministrativeStaff', 'Staff'),\n    createConnector('connect16', 'TechnicalStaff', 'Staff')\n];\n//Create a connector.\nfunction createConnector(id, sourceID, targetID) {\n    var connector = {};\n    connector.id = id;\n    connector.sourceID = sourceID;\n    connector.targetID = targetID;\n    return connector;\n}\n//Create class Diagram shapes.\nfunction createNode(id, offsetX, offsetY, className) {\n    var node = {};\n    node.id = id;\n    node.offsetX = offsetX;\n    node.offsetY = offsetY;\n    node.shape = {\n        type: 'UmlClassifier',\n        classShape: {\n            name: className\n        },\n        classifier: 'Class'\n    };\n    return node;\n}\n//create class Property\nfunction createProperty(name, type) {\n    return { name: name, type: type };\n}\n//create class Methods\nfunction createMethods(name, type) {\n    return { name: name, type: type };\n}\nfunction UMLClassDiagram() {\n    React.useEffect(function () {\n        (0, sample_base_1.updateSampleSection)();\n        renderComplete();\n    }, []);\n    function renderComplete() {\n        addEvents();\n        diagramInstance.fitToPage();\n    }\n    var isMobile;\n    //To enhance the functionality of a webpage for mobile devices by adding a click event listener \n    function addEvents() {\n        isMobile = window.matchMedia('(max-width:550px)').matches;\n        if (isMobile) {\n            var paletteIcon = paletteIconInstance;\n            if (paletteIcon) {\n                paletteIcon.addEventListener('click', openPalette, false);\n            }\n        }\n    }\n    //To manage the visibility state of the palette space on a webpage for mobile devices\n    function openPalette() {\n        var paletteSpace = paletteSpaceInstance;\n        isMobile = window.matchMedia('(max-width:550px)').matches;\n        if (isMobile) {\n            if (!paletteSpace.classList.contains('sb-mobile-palette-open')) {\n                paletteSpace.classList.add('sb-mobile-palette-open');\n            }\n            else {\n                paletteSpace.classList.remove('sb-mobile-palette-open');\n            }\n        }\n    }\n    // Initializes the palettes to be displayed in the symbol palette.\n    var palettes = [\n        {\n            id: 'UmlActivity', expanded: true, title: 'UML Classifier Nodes', symbols: [\n                {\n                    id: 'class',\n                    shape: {\n                        type: 'UmlClassifier',\n                        classShape: {\n                            attributes: [\n                                { name: 'accepted', type: 'Date', isSeparator: true },\n                                { name: 'sickness', type: 'History' },\n                                { name: 'prescription', type: 'String[*]' },\n                                { name: 'allergies', type: 'String[*]' }\n                            ],\n                            methods: [{ name: 'getHistory', style: {}, parameters: [{ name: 'Date', style: {} }], type: 'History' }],\n                            name: 'Patient'\n                        },\n                        classifier: 'Class'\n                    },\n                },\n                {\n                    id: 'Interface',\n                    shape: {\n                        type: 'UmlClassifier',\n                        interfaceShape: {\n                            name: \"Bank Account\",\n                            attributes: [{\n                                    name: \"owner\",\n                                    type: \"String[*]\", style: {}\n                                },\n                                {\n                                    name: \"balance\",\n                                    type: \"Dollars\"\n                                }],\n                            methods: [{\n                                    name: \"deposit\", style: {},\n                                    parameters: [{\n                                            name: \"amount\",\n                                            type: \"Dollars\",\n                                            style: {}\n                                        }],\n                                }]\n                        },\n                        classifier: 'Interface'\n                    },\n                },\n                {\n                    id: 'Enumeration',\n                    shape: {\n                        type: 'UmlClassifier',\n                        enumerationShape: {\n                            name: 'AccountType',\n                            members: [\n                                {\n                                    name: 'Checking Account', style: {}\n                                },\n                                {\n                                    name: 'Savings Account'\n                                },\n                                {\n                                    name: 'Credit Account'\n                                }\n                            ]\n                        },\n                        classifier: 'Enumeration'\n                    },\n                },\n            ]\n        },\n        {\n            id: 'umlConnectorrs', expanded: true, title: 'UML Classifier Connectors', symbols: [\n                {\n                    id: 'Composition',\n                    sourcePoint: { x: 100, y: 200 },\n                    targetPoint: { x: 200, y: 300 },\n                    type: 'Straight',\n                    shape: { type: 'UmlClassifier', relationship: 'Composition' }\n                },\n                {\n                    id: 'BiDirectional',\n                    type: 'Straight',\n                    sourcePoint: { x: 300, y: 200 },\n                    targetPoint: { x: 400, y: 300 },\n                    shape: { type: 'UmlClassifier', relationship: 'Aggregation', associationType: 'BiDirectional' }\n                },\n                {\n                    id: 'Directional',\n                    type: 'Straight',\n                    sourcePoint: { x: 500, y: 200 },\n                    targetPoint: { x: 600, y: 300 },\n                    shape: { type: 'UmlClassifier', relationship: 'Association', associationType: 'Directional' }\n                },\n                {\n                    id: 'Association',\n                    type: 'Straight',\n                    sourcePoint: { x: 700, y: 200 },\n                    targetPoint: { x: 800, y: 300 },\n                    shape: { type: 'UmlClassifier', relationship: 'Association' }\n                },\n                {\n                    id: 'Inheritance',\n                    type: 'Straight',\n                    sourcePoint: { x: 900, y: 200 },\n                    targetPoint: { x: 1000, y: 300 },\n                    shape: { type: 'UmlClassifier', relationship: 'Inheritance' }\n                },\n                {\n                    id: 'Interfaces',\n                    type: 'Straight',\n                    sourcePoint: { x: 100, y: 400 },\n                    targetPoint: { x: 200, y: 500 },\n                    shape: { type: 'UmlClassifier', relationship: 'Interface' }\n                },\n                {\n                    id: 'Dependency',\n                    type: 'Straight',\n                    sourcePoint: { x: 300, y: 400 },\n                    targetPoint: { x: 400, y: 500 },\n                    shape: { type: 'UmlClassifier', relationship: 'Dependency' }\n                },\n                {\n                    id: 'Realization',\n                    type: 'Straight',\n                    sourcePoint: { x: 500, y: 400 },\n                    targetPoint: { x: 600, y: 500 },\n                    shape: { type: 'UmlClassifier', relationship: 'Realization' }\n                },\n                {\n                    id: \"OneToMany\",\n                    type: 'Straight',\n                    sourcePoint: {\n                        x: 700,\n                        y: 400\n                    },\n                    targetPoint: {\n                        x: 800,\n                        y: 500\n                    },\n                    annotations: [{\n                            margin: {\n                                top: 10,\n                                left: 10,\n                                right: 10,\n                                bottom: 20\n                            }\n                        }\n                    ],\n                    shape: {\n                        type: \"UmlClassifier\",\n                        relationship: 'Dependency',\n                        multiplicity: {\n                            type: 'OneToMany',\n                            source: {\n                                optional: true,\n                                lowerBounds: '89',\n                                upperBounds: '67'\n                            },\n                            target: { optional: true, lowerBounds: '78', upperBounds: '90' }\n                        }\n                    }\n                },\n                {\n                    id: \"ManyToMany\",\n                    sourcePoint: {\n                        x: 900,\n                        y: 400\n                    },\n                    targetPoint: {\n                        x: 1000,\n                        y: 500\n                    },\n                    annotations: [{\n                            margin: {\n                                top: 10,\n                                left: 10,\n                                right: 10,\n                                bottom: 20\n                            }\n                        }\n                    ],\n                    shape: {\n                        type: \"UmlClassifier\",\n                        relationship: 'Dependency',\n                        multiplicity: {\n                            type: 'ManyToMany',\n                            source: {\n                                optional: true,\n                                lowerBounds: '89',\n                                upperBounds: '67'\n                            },\n                            target: { optional: true, lowerBounds: '78', upperBounds: '90' }\n                        }\n                    }\n                },\n                {\n                    id: \"OneToOne\",\n                    sourcePoint: { x: 100, y: 600 },\n                    targetPoint: { x: 200, y: 700 },\n                    annotations: [{\n                            margin: {\n                                top: 10,\n                                left: 10,\n                                right: 10,\n                                bottom: 20\n                            }\n                        }\n                    ],\n                    shape: {\n                        type: \"UmlClassifier\",\n                        relationship: 'Dependency',\n                        multiplicity: {\n                            type: 'OneToOne',\n                            source: {\n                                optional: true,\n                                lowerBounds: '89',\n                                upperBounds: '67'\n                            },\n                            target: { optional: true, lowerBounds: '78', upperBounds: '90' }\n                        }\n                    }\n                },\n                {\n                    id: \"ManyToOne\",\n                    sourcePoint: { x: 300, y: 600 },\n                    targetPoint: { x: 400, y: 700 },\n                    annotations: [{\n                            margin: {\n                                top: 10,\n                                left: 10,\n                                right: 10,\n                                bottom: 20\n                            }\n                        }\n                    ],\n                    shape: {\n                        type: \"UmlClassifier\",\n                        relationship: 'Dependency',\n                        multiplicity: {\n                            type: 'ManyToOne',\n                            source: {\n                                optional: true,\n                                lowerBounds: '89',\n                                upperBounds: '67'\n                            },\n                            target: { optional: true, lowerBounds: '78', upperBounds: '90' }\n                        }\n                    }\n                },\n                {\n                    id: \"OneToMany\",\n                    sourcePoint: { x: 500, y: 600 },\n                    targetPoint: { x: 600, y: 700 },\n                    annotations: [{\n                            margin: {\n                                top: 10,\n                                left: 10,\n                                right: 10,\n                                bottom: 20\n                            }\n                        }\n                    ],\n                    shape: {\n                        type: \"UmlClassifier\",\n                        relationship: 'Dependency',\n                        multiplicity: {\n                            type: 'OneToMany',\n                        }\n                    }\n                }\n            ]\n        }\n    ];\n    return (React.createElement(\"div\", { className: \"control-pane\" },\n        React.createElement(\"div\", { className: \"control-section\" },\n            React.createElement(\"div\", { style: { width: \"100%\" } },\n                React.createElement(\"div\", { className: \"sb-mobile-palette-bar\" },\n                    React.createElement(\"div\", { id: \"palette-icon\", style: { float: \"right\" }, className: \"e-ddb-icons1 e-toggle-palette\" })),\n                React.createElement(\"div\", { id: \"palette-space\", className: \"sb-mobile-palette\" },\n                    React.createElement(ej2_react_diagrams_1.SymbolPaletteComponent, { id: \"symbolpalette\", expandMode: \"Multiple\", palettes: palettes, width: \"100%\", height: \"700px\", symbolHeight: 90, symbolWidth: 90, getNodeDefaults: function (symbol) {\n                            symbol.width = 100;\n                            symbol.height = 100;\n                        }, symbolMargin: { left: 12, right: 12, top: 12, bottom: 12 }, getSymbolInfo: function (symbol) {\n                            return { fit: true, description: { text: symbol.id, }, tooltip: symbol.addInfo ? symbol.addInfo['tooltip'] : symbol.id };\n                        } })),\n                React.createElement(\"div\", { id: \"diagram-space\", className: \"sb-mobile-diagram\" },\n                    React.createElement(ej2_react_diagrams_1.DiagramComponent, { id: \"diagram\", ref: function (diagram) { return (diagramInstance = diagram); }, width: \"100%\", height: \"700px\", nodes: nodes, connectors: connectors, \n                        //Sets the default values of a connector\n                        getConnectorDefaults: function (connector) {\n                            return connector;\n                        }, \n                        //Sets the Node style for DragEnter element.\n                        dragEnter: function (args) {\n                            if (args.element instanceof ej2_react_diagrams_1.Connector) {\n                                args.element.targetPoint.x += 100;\n                                args.element.targetPoint.y += 20;\n                            }\n                        }, \n                        //Sets the default values of a node\n                        getNodeDefaults: function (node) {\n                            node.style = { fill: '#26A0DA', strokeColor: 'white' };\n                            if (node.annotations && node.annotations.length > 0) {\n                                for (var i = 0; i < node.annotations.length; i++) {\n                                    var annotation = node.annotations[i];\n                                    if (annotation && annotation.style) {\n                                        annotation.style.color = 'white';\n                                    }\n                                }\n                            }\n                            return node;\n                        } }))))));\n}\nexports.default = UMLClassDiagram;\nvar root = (0, client_1.createRoot)(document.getElementById('sample'));\nroot.render(React.createElement(UMLClassDiagram, null));\n\n\n//# sourceURL=webpack:///./samples/diagram/activity-class-functional/app/index.tsx?");

/***/ }),

/***/ "./samples/diagram/activity-class-functional/app/sample-base.tsx":
/*!***********************************************************************!*\
  !*** ./samples/diagram/activity-class-functional/app/sample-base.tsx ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.updateSampleSection = exports.SampleBase = void 0;\nvar React = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\nvar ej2_base_1 = __webpack_require__(/*! @syncfusion/ej2-base */ \"./node_modules/@syncfusion/ej2-base/index.js\");\n(0, ej2_base_1.enableRipple)(window.ripple);\nvar SampleBase = /** @class */ (function (_super) {\n    __extends(SampleBase, _super);\n    function SampleBase() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    SampleBase.prototype.rendereComplete = function () {\n        /**custom render complete function */\n    };\n    SampleBase.prototype.componentDidMount = function () {\n        var _this = this;\n        setTimeout(function () {\n            _this.rendereComplete();\n        });\n    };\n    return SampleBase;\n}(React.PureComponent));\nexports.SampleBase = SampleBase;\nfunction updateSampleSection() { }\nexports.updateSampleSection = updateSampleSection;\n\n\n//# sourceURL=webpack:///./samples/diagram/activity-class-functional/app/sample-base.tsx?");

/***/ })

/******/ });