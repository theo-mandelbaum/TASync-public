/******/ (function(modules) { // webpackBootstrap
/******/ 	// install a JSONP callback for chunk loading
/******/ 	function webpackJsonpCallback(data) {
/******/ 		var chunkIds = data[0];
/******/ 		var moreModules = data[1];
/******/ 		var executeModules = data[2];
/******/
/******/ 		// add "moreModules" to the modules object,
/******/ 		// then flag all "chunkIds" as loaded and fire callback
/******/ 		var moduleId, chunkId, i = 0, resolves = [];
/******/ 		for(;i < chunkIds.length; i++) {
/******/ 			chunkId = chunkIds[i];
/******/ 			if(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 				resolves.push(installedChunks[chunkId][0]);
/******/ 			}
/******/ 			installedChunks[chunkId] = 0;
/******/ 		}
/******/ 		for(moduleId in moreModules) {
/******/ 			if(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {
/******/ 				modules[moduleId] = moreModules[moduleId];
/******/ 			}
/******/ 		}
/******/ 		if(parentJsonpFunction) parentJsonpFunction(data);
/******/
/******/ 		while(resolves.length) {
/******/ 			resolves.shift()();
/******/ 		}
/******/
/******/ 		// add entry modules from loaded chunk to deferred list
/******/ 		deferredModules.push.apply(deferredModules, executeModules || []);
/******/
/******/ 		// run deferred modules when all chunks ready
/******/ 		return checkDeferredModules();
/******/ 	};
/******/ 	function checkDeferredModules() {
/******/ 		var result;
/******/ 		for(var i = 0; i < deferredModules.length; i++) {
/******/ 			var deferredModule = deferredModules[i];
/******/ 			var fulfilled = true;
/******/ 			for(var j = 1; j < deferredModule.length; j++) {
/******/ 				var depId = deferredModule[j];
/******/ 				if(installedChunks[depId] !== 0) fulfilled = false;
/******/ 			}
/******/ 			if(fulfilled) {
/******/ 				deferredModules.splice(i--, 1);
/******/ 				result = __webpack_require__(__webpack_require__.s = deferredModule[0]);
/******/ 			}
/******/ 		}
/******/
/******/ 		return result;
/******/ 	}
/******/
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// object to store loaded and loading chunks
/******/ 	// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 	// Promise = chunk loading, 0 = chunk loaded
/******/ 	var installedChunks = {
/******/ 		"./samples/treemap/color-mapping/app/index.min": 0
/******/ 	};
/******/
/******/ 	var deferredModules = [];
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	var jsonpArray = window["webpackJsonp"] = window["webpackJsonp"] || [];
/******/ 	var oldJsonpFunction = jsonpArray.push.bind(jsonpArray);
/******/ 	jsonpArray.push = webpackJsonpCallback;
/******/ 	jsonpArray = jsonpArray.slice();
/******/ 	for(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);
/******/ 	var parentJsonpFunction = oldJsonpFunction;
/******/
/******/
/******/ 	// add entry module to deferred list
/******/ 	deferredModules.push(["./samples/treemap/color-mapping/app/index.tsx","treemap.min"]);
/******/ 	// run deferred modules when ready
/******/ 	return checkDeferredModules();
/******/ })
/************************************************************************/
/******/ ({

/***/ "./samples/treemap/color-mapping/app/index.tsx":
/*!*****************************************************!*\
  !*** ./samples/treemap/color-mapping/app/index.tsx ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ColorMapping = void 0;\nvar client_1 = __webpack_require__(/*! react-dom/client */ \"./node_modules/react-dom/client.js\");\n/**\n * Color Mapping sample for treemap\n */\nvar React = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\nvar ej2_react_buttons_1 = __webpack_require__(/*! @syncfusion/ej2-react-buttons */ \"./node_modules/@syncfusion/ej2-react-buttons/index.js\");\nvar ej2_react_dropdowns_1 = __webpack_require__(/*! @syncfusion/ej2-react-dropdowns */ \"./node_modules/@syncfusion/ej2-react-dropdowns/index.js\");\nvar ej2_react_treemap_1 = __webpack_require__(/*! @syncfusion/ej2-react-treemap */ \"./node_modules/@syncfusion/ej2-react-treemap/index.js\");\nvar property_pane_1 = __webpack_require__(/*! ./property-pane */ \"./samples/treemap/color-mapping/app/property-pane.tsx\");\nvar sample_base_1 = __webpack_require__(/*! ./sample-base */ \"./samples/treemap/color-mapping/app/sample-base.tsx\");\nvar data = __webpack_require__(/*! ./treemap-data/color.json */ \"./samples/treemap/color-mapping/app/treemap-data/color.json\");\nvar datasource = data;\nvar SAMPLE_CSS = \"\\n    .colorMappingPadding {\\n        margin-left: -10px;margin-top: -10px;padding-left: 10px;\\n    }\\n    .e-view.fluent2-highcontrast #property .colorMappingPadding {\\n        margin-left: -18px;\\n    }\\n    .e-view.fluent2 #property .colorMappingPadding, .e-view.fluent2-dark #property .colorMappingPadding {\\n        margin-left: -8px;margin-top: -10px;padding-left: 0px;\\n    }\";\nvar ColorMapping = /** @class */ (function (_super) {\n    __extends(ColorMapping, _super);\n    function ColorMapping() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        // Code for Property Panel\n        _this.dropList = [\n            { text: 'Range', value: 'RangeColorMapping' },\n            { text: 'Equal', value: 'EqualColorMapping' },\n            { text: 'Desaturation', value: 'DesaturationColorMapping' }\n        ];\n        return _this;\n    }\n    ColorMapping.prototype.minOpacityChange = function () {\n        if (this.opacityElement.checked && !this.opacityElement.disabled) {\n            var slider = document.getElementById('minOpacity');\n            var minOpacity = parseFloat(slider.value);\n            this.treemapInstance.leafItemSettings.colorMapping[0].minOpacity = minOpacity;\n            this.treemapInstance.leafItemSettings.colorMapping[1].minOpacity = minOpacity;\n            this.treemapInstance.refresh();\n        }\n    };\n    ColorMapping.prototype.maxOpacityChange = function () {\n        if (this.opacityElement.checked && !this.opacityElement.disabled) {\n            var slider = document.getElementById('maxOpacity');\n            var maxOpacity = parseFloat(slider.value);\n            this.treemapInstance.leafItemSettings.colorMapping[0].maxOpacity = maxOpacity;\n            this.treemapInstance.leafItemSettings.colorMapping[1].maxOpacity = maxOpacity;\n            this.treemapInstance.refresh();\n        }\n    };\n    ColorMapping.prototype.opacityChange = function (args) {\n        var value = args.checked;\n        var minOpacity = parseFloat(this.minOpacityElement.value.toString());\n        var maxOpacity = parseFloat(this.maxOpacityElement.value.toString());\n        if (value) {\n            this.treemapInstance.leafItemSettings.colorMapping[0].minOpacity = minOpacity;\n            this.treemapInstance.leafItemSettings.colorMapping[0].maxOpacity = maxOpacity;\n            this.treemapInstance.leafItemSettings.colorMapping[1].minOpacity = minOpacity;\n            this.treemapInstance.leafItemSettings.colorMapping[1].maxOpacity = maxOpacity;\n            this.minOpacityElement.disabled = false;\n            this.maxOpacityElement.disabled = false;\n        }\n        else {\n            this.treemapInstance.leafItemSettings.colorMapping[0].minOpacity = null;\n            this.treemapInstance.leafItemSettings.colorMapping[0].maxOpacity = null;\n            this.treemapInstance.leafItemSettings.colorMapping[1].minOpacity = null;\n            this.treemapInstance.leafItemSettings.colorMapping[1].maxOpacity = null;\n            this.minOpacityElement.disabled = true;\n            this.maxOpacityElement.disabled = true;\n        }\n        this.treemapInstance.refresh();\n    };\n    ColorMapping.prototype.typeChange = function () {\n        var value = this.typeElement.value.toString();\n        if (value === 'RangeColorMapping') {\n            this.opacityElement.disabled = true;\n            this.treemapInstance.rangeColorValuePath = 'Area';\n            this.treemapInstance.leafItemSettings.colorMapping[2].minOpacity = null;\n            this.treemapInstance.leafItemSettings.colorMapping[2].maxOpacity = null;\n            this.treemapInstance.leafItemSettings.colorMapping[1].minOpacity = null;\n            this.treemapInstance.leafItemSettings.colorMapping[1].maxOpacity = null;\n            this.treemapInstance.leafItemSettings.colorMapping[4].minOpacity = null;\n            this.treemapInstance.leafItemSettings.colorMapping[4].maxOpacity = null;\n            this.treemapInstance.leafItemSettings.colorMapping[3].minOpacity = null;\n            this.treemapInstance.leafItemSettings.colorMapping[3].maxOpacity = null;\n            this.treemapInstance.leafItemSettings.colorMapping[5].minOpacity = null;\n            this.treemapInstance.leafItemSettings.colorMapping[5].maxOpacity = null;\n            this.treemapInstance.leafItemSettings.colorMapping[0].from = 100000;\n            this.treemapInstance.leafItemSettings.colorMapping[0].to = 250000;\n            this.treemapInstance.leafItemSettings.colorMapping[0].value = null;\n            this.treemapInstance.leafItemSettings.colorMapping[0].minOpacity = null;\n            this.treemapInstance.leafItemSettings.colorMapping[0].maxOpacity = null;\n            this.treemapInstance.leafItemSettings.colorMapping[1].value = null;\n            this.treemapInstance.leafItemSettings.colorMapping[2].value = null;\n            this.treemapInstance.leafItemSettings.colorMapping[0].label = '0.1M - 0.25M';\n            this.treemapInstance.leafItemSettings.colorMapping[0].color = '#547C84';\n            this.treemapInstance.leafItemSettings.colorMapping[1].from = 250000;\n            this.treemapInstance.leafItemSettings.colorMapping[1].to = 500000;\n            this.treemapInstance.leafItemSettings.colorMapping[1].label = '0.25M - 0.50M';\n            this.treemapInstance.leafItemSettings.colorMapping[1].color = '#37AFAB';\n            this.treemapInstance.leafItemSettings.colorMapping[2].from = 500000;\n            this.treemapInstance.leafItemSettings.colorMapping[2].to = 750000;\n            this.treemapInstance.leafItemSettings.colorMapping[2].label = '0.5M - 0.75M';\n            this.treemapInstance.leafItemSettings.colorMapping[2].color = '#A4D6AD';\n            this.treemapInstance.leafItemSettings.colorMapping[2].value = null;\n            this.treemapInstance.leafItemSettings.colorMapping[3].from = 750000;\n            this.treemapInstance.leafItemSettings.colorMapping[3].to = 2200000;\n            this.treemapInstance.leafItemSettings.colorMapping[3].label = '0.75M - 2M';\n            this.treemapInstance.leafItemSettings.colorMapping[3].color = '#DEEBAE';\n            this.treemapInstance.leafItemSettings.colorMapping[4].from = null;\n            this.treemapInstance.leafItemSettings.colorMapping[3].value = null;\n            this.treemapInstance.leafItemSettings.colorMapping[4].to = null;\n            this.treemapInstance.leafItemSettings.colorMapping[4].label = null;\n            this.treemapInstance.leafItemSettings.colorMapping[4].value = null;\n            this.treemapInstance.leafItemSettings.colorMapping[4].color = null;\n            this.treemapInstance.leafItemSettings.colorMapping[5].to = null;\n            this.treemapInstance.leafItemSettings.colorMapping[5].label = null;\n            this.treemapInstance.leafItemSettings.colorMapping[5].value = null;\n            this.treemapInstance.leafItemSettings.colorMapping[5].color = null;\n            this.treemapInstance.leafItemSettings.colorMapping[5].from = null;\n            this.treemapInstance.legendSettings.title.text = 'Area';\n            this.treemapInstance.refresh();\n        }\n        else if (value === 'EqualColorMapping') {\n            this.opacityElement.disabled = true;\n            this.treemapInstance.rangeColorValuePath = null;\n            this.treemapInstance.leafItemSettings.colorMapping[0].from = null;\n            this.treemapInstance.leafItemSettings.colorMapping[0].to = null;\n            this.treemapInstance.leafItemSettings.colorMapping[0].label = null;\n            this.treemapInstance.leafItemSettings.colorMapping[1].label = null;\n            this.treemapInstance.leafItemSettings.colorMapping[2].label = null;\n            this.treemapInstance.leafItemSettings.colorMapping[3].label = null;\n            this.treemapInstance.leafItemSettings.colorMapping[4].label = null;\n            this.treemapInstance.leafItemSettings.colorMapping[0].value = 'North America';\n            this.treemapInstance.leafItemSettings.colorMapping[0].color = '#DEEBAE';\n            this.treemapInstance.leafItemSettings.colorMapping[1].from = null;\n            this.treemapInstance.leafItemSettings.colorMapping[1].to = null;\n            this.treemapInstance.leafItemSettings.colorMapping[1].value = 'Oceania';\n            this.treemapInstance.leafItemSettings.colorMapping[1].color = '#A4D6AD';\n            this.treemapInstance.leafItemSettings.colorMapping[2].from = null;\n            this.treemapInstance.leafItemSettings.colorMapping[2].to = null;\n            this.treemapInstance.leafItemSettings.colorMapping[2].value = 'Asia';\n            this.treemapInstance.leafItemSettings.colorMapping[2].color = '#37AFAB';\n            this.treemapInstance.leafItemSettings.colorMapping[3].from = null;\n            this.treemapInstance.leafItemSettings.colorMapping[3].to = null;\n            this.treemapInstance.leafItemSettings.colorMapping[3].value = 'Africa';\n            this.treemapInstance.leafItemSettings.colorMapping[3].color = '#547C84';\n            this.treemapInstance.leafItemSettings.colorMapping[4].from = null;\n            this.treemapInstance.leafItemSettings.colorMapping[4].to = null;\n            this.treemapInstance.leafItemSettings.colorMapping[4].value = 'Europe';\n            this.treemapInstance.leafItemSettings.colorMapping[4].color = '#CEBF93';\n            this.treemapInstance.leafItemSettings.colorMapping[0].minOpacity = null;\n            this.treemapInstance.leafItemSettings.colorMapping[0].maxOpacity = null;\n            this.treemapInstance.leafItemSettings.colorMapping[1].minOpacity = null;\n            this.treemapInstance.leafItemSettings.colorMapping[1].maxOpacity = null;\n            this.treemapInstance.leafItemSettings.colorMapping[2].minOpacity = null;\n            this.treemapInstance.leafItemSettings.colorMapping[2].maxOpacity = null;\n            this.treemapInstance.leafItemSettings.colorMapping[3].minOpacity = null;\n            this.treemapInstance.leafItemSettings.colorMapping[3].maxOpacity = null;\n            this.treemapInstance.leafItemSettings.colorMapping[4].minOpacity = null;\n            this.treemapInstance.leafItemSettings.colorMapping[4].maxOpacity = null;\n            this.treemapInstance.equalColorValuePath = 'Location';\n            this.treemapInstance.legendSettings.title.text = 'Continent';\n            this.treemapInstance.refresh();\n        }\n        else if (value === 'DesaturationColorMapping') {\n            this.opacityElement.disabled = false;\n            this.treemapInstance.rangeColorValuePath = 'Area';\n            this.treemapInstance.equalColorValuePath = null;\n            var minOpacity = document.getElementById('minOpacity');\n            var maxOpacity = document.getElementById('maxOpacity');\n            this.treemapInstance.leafItemSettings.colorMapping[2].from = null;\n            this.treemapInstance.leafItemSettings.colorMapping[2].to = null;\n            this.treemapInstance.leafItemSettings.colorMapping[1].from = null;\n            this.treemapInstance.leafItemSettings.colorMapping[1].to = null;\n            this.treemapInstance.leafItemSettings.colorMapping[1].label = null;\n            this.treemapInstance.leafItemSettings.colorMapping[3].from = null;\n            this.treemapInstance.leafItemSettings.colorMapping[3].to = null;\n            this.treemapInstance.leafItemSettings.colorMapping[0].from = 100000;\n            this.treemapInstance.leafItemSettings.colorMapping[0].to = 2230800;\n            this.treemapInstance.leafItemSettings.colorMapping[0].label = '0.1M - 2M';\n            this.treemapInstance.leafItemSettings.colorMapping[0].value = null;\n            this.treemapInstance.leafItemSettings.colorMapping[1].value = null;\n            this.treemapInstance.leafItemSettings.colorMapping[2].value = null;\n            this.treemapInstance.leafItemSettings.colorMapping[3].value = null;\n            this.treemapInstance.leafItemSettings.colorMapping[2].color = null;\n            this.treemapInstance.leafItemSettings.colorMapping[1].color = null;\n            this.treemapInstance.leafItemSettings.colorMapping[3].color = null;\n            this.treemapInstance.leafItemSettings.colorMapping[0].color = ['#F0D6AD', '#19547B'];\n            if (this.opacityElement.checked) {\n                this.treemapInstance.leafItemSettings.colorMapping[0].minOpacity = parseFloat(minOpacity.value);\n                this.treemapInstance.leafItemSettings.colorMapping[0].maxOpacity = parseFloat(maxOpacity.value);\n            }\n            else {\n                this.treemapInstance.leafItemSettings.colorMapping[0].minOpacity = null;\n                this.treemapInstance.leafItemSettings.colorMapping[0].maxOpacity = null;\n            }\n            this.treemapInstance.legendSettings.title.text = 'Area';\n            this.treemapInstance.refresh();\n        }\n    };\n    ColorMapping.prototype.load = function (args) {\n        // custom code start\n        var theme = location.hash.split('/')[1];\n        theme = theme ? theme : 'Material';\n        args.treemap.theme = ((theme.charAt(0).toUpperCase() +\n            theme.slice(1)).replace(/-dark/i, 'Dark').replace(/-high/i, 'High').replace(/contrast/i, 'Contrast').replace(/5.3/i, '5'));\n        var sliderMin = document.getElementById('hideOne');\n        var sliderMax = document.getElementById('hideTwo');\n        var opacityCheck = document.getElementById('hideThree');\n        var dropListValue = document.getElementById('Type');\n        var opacityChecked = document.getElementById('opacity');\n        if (dropListValue.value === 'Desaturation') {\n            sliderMin.style.visibility = \"visible\";\n            if (opacityChecked.checked) {\n                sliderMax.style.visibility = \"visible\";\n                opacityCheck.style.visibility = \"visible\";\n            }\n            else {\n                sliderMax.style.visibility = \"hidden\";\n                opacityCheck.style.visibility = \"hidden\";\n            }\n        }\n        else {\n            sliderMin.style.visibility = \"hidden\";\n            sliderMax.style.visibility = \"hidden\";\n            opacityCheck.style.visibility = \"hidden\";\n        }\n        // custom code end\n    };\n    ColorMapping.prototype.render = function () {\n        var _this = this;\n        return (React.createElement(\"main\", null,\n            React.createElement(\"div\", { className: 'control-pane' },\n                React.createElement(\"style\", null, SAMPLE_CSS),\n                React.createElement(\"div\", { className: 'control-section' },\n                    React.createElement(\"div\", { className: 'col-md-9' },\n                        React.createElement(ej2_react_treemap_1.TreeMapComponent, { load: this.load.bind(this), id: 'treemap-container', ref: function (m) { return _this.treemapInstance = m; }, titleSettings: {\n                                text: 'Top 10 largest islands in the World',\n                                textStyle: { size: '15px' }\n                            }, format: \"n\", useGroupingSeparator: true, rangeColorValuePath: 'Area', dataSource: datasource.color, legendSettings: {\n                                visible: true,\n                                position: 'Bottom',\n                                mode: 'Interactive',\n                                height: '10',\n                                title: {\n                                    text: 'Area'\n                                }\n                            }, tooltipSettings: {\n                                visible: true,\n                                format: 'Name: ${Name}<br>Area: ${Area} per square kms<br>Continent: ${Location}',\n                                opacity: 0.8\n                            }, weightValuePath: 'Area', leafItemSettings: {\n                                labelPath: 'Name',\n                                border: { color: 'white', width: 0.5 },\n                                colorMapping: [\n                                    { from: 100000, to: 250000, label: '0.1M - 0.25M', color: '#547C84' },\n                                    { from: 250000, to: 550000, label: '0.25M - 0.55M', color: '#37AFAB' },\n                                    { from: 550000, to: 750000, label: '0.55M - 0.75M', color: '#A4D6AD' },\n                                    { from: 750000, to: 2250000, label: '0.75M - 2M', color: '#DEEBAE' },\n                                    { to: null, from: null, color: 'null' },\n                                    { to: null, from: null, color: 'null' },\n                                ]\n                            } },\n                            React.createElement(ej2_react_treemap_1.Inject, { services: [ej2_react_treemap_1.TreeMapLegend, ej2_react_treemap_1.TreeMapTooltip] }))),\n                    React.createElement(\"div\", { className: 'col-md-3 property-section' },\n                        React.createElement(property_pane_1.PropertyPane, { title: 'Properties' },\n                            React.createElement(\"table\", { id: 'property', role: 'none', title: 'Properties', className: 'property-panel-table', style: { width: '100%', marginBottom: '20px' } },\n                                React.createElement(\"tbody\", null,\n                                    React.createElement(\"tr\", null,\n                                        React.createElement(\"td\", null,\n                                            React.createElement(\"div\", { style: { paddingLeft: '0px' } }, \"Color Mapping Type\")),\n                                        React.createElement(\"td\", null,\n                                            React.createElement(\"div\", null,\n                                                React.createElement(ej2_react_dropdowns_1.DropDownListComponent, { id: \"Type\", width: \"100%\", index: 0, change: this.typeChange.bind(this), ref: function (d) { return _this.typeElement = d; }, dataSource: this.dropList, fields: { text: 'text', value: 'value' } })))),\n                                    React.createElement(\"tr\", { id: \"hideOne\", style: { height: '50px' } },\n                                        React.createElement(\"td\", null,\n                                            React.createElement(\"div\", { style: { paddingLeft: '0px' } }, \"Change Opacity\")),\n                                        React.createElement(\"td\", null,\n                                            React.createElement(\"div\", { className: \"colorMappingPadding\" },\n                                                React.createElement(ej2_react_buttons_1.CheckBoxComponent, { id: 'opacity', checked: false, change: this.opacityChange.bind(this), ref: function (d) { return _this.opacityElement = d; }, disabled: true, style: { paddingLeft: '0px' } })))),\n                                    React.createElement(\"tr\", { id: \"hideTwo\", style: { height: '50px' } },\n                                        React.createElement(\"td\", null,\n                                            React.createElement(\"div\", { style: { paddingLeft: '0px' } }, \"Min Opacity\")),\n                                        React.createElement(\"td\", null,\n                                            React.createElement(\"div\", null,\n                                                React.createElement(\"input\", { type: \"range\", id: 'minOpacity', disabled: true, onChange: this.minOpacityChange.bind(this), ref: function (d) { return _this.minOpacityElement = d; }, min: \"0\", max: \"1\", step: \"0.1\", defaultValue: \"0.5\" })))),\n                                    React.createElement(\"tr\", { id: \"hideThree\", style: { height: '50px' } },\n                                        React.createElement(\"td\", null,\n                                            React.createElement(\"div\", { style: { paddingLeft: '0px' } }, \"Max Opacity\")),\n                                        React.createElement(\"td\", null,\n                                            React.createElement(\"div\", null,\n                                                React.createElement(\"input\", { type: \"range\", id: 'maxOpacity', disabled: true, onChange: this.maxOpacityChange.bind(this), ref: function (d) { return _this.maxOpacityElement = d; }, min: \"0\", max: \"1\", step: \"0.1\", defaultValue: \"1\" })))))))))),\n            React.createElement(\"section\", { id: \"action-description\", \"aria-label\": \"Description of TreeMap sample\" },\n                React.createElement(\"p\", null, \"This sample visualizes the top 10 largest islands in the world based on area. The color mapping is applied to the items to differentiate them from other items.\")),\n            React.createElement(\"section\", { id: \"description\", \"aria-label\": \"Description of the TreeMap features demonstrated in this sample\" },\n                React.createElement(\"p\", null,\n                    \"In this example, you can see how to render a tree map with color mapping. The range color mapping and desaturation color mapping group the shapes based on the area size, whereas the equal color mapping groups the shapes based on the continent value. The legend is enabled in this example to represent each color mapping.\",\n                    React.createElement(\"br\", null),\n                    React.createElement(\"br\", null),\n                    \"The tooltip is enabled in this example. To see the tooltip in action, hover the mouse over an item or tap an item in touch enabled devices.\"),\n                React.createElement(\"br\", null),\n                React.createElement(\"p\", { className: 'description-header' }, \"Injecting Module\"),\n                React.createElement(\"p\", null,\n                    \"The TreeMap component features are segregated into individual modules by feature. To use a legend, inject the \",\n                    React.createElement(\"code\", null, \"Legend\"),\n                    \" module using the \",\n                    React.createElement(\"code\", null, \"TreeMap.Inject(TreeMapLegend)\"),\n                    \" method.\"))));\n    };\n    return ColorMapping;\n}(sample_base_1.SampleBase));\nexports.ColorMapping = ColorMapping;\nvar root = (0, client_1.createRoot)(document.getElementById('sample'));\nroot.render(React.createElement(ColorMapping, null));\n\n\n//# sourceURL=webpack:///./samples/treemap/color-mapping/app/index.tsx?");

/***/ }),

/***/ "./samples/treemap/color-mapping/app/property-pane.tsx":
/*!*************************************************************!*\
  !*** ./samples/treemap/color-mapping/app/property-pane.tsx ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PropertyPane = void 0;\nvar ReactDOM = __webpack_require__(/*! react-dom */ \"./node_modules/react-dom/index.js\");\nvar React = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\nvar ej2_base_1 = __webpack_require__(/*! @syncfusion/ej2-base */ \"./node_modules/@syncfusion/ej2-base/index.js\");\nvar PropertyPane = /** @class */ (function (_super) {\n    __extends(PropertyPane, _super);\n    function PropertyPane() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    PropertyPane.prototype.render = function () {\n        var mobilePropPane = (0, ej2_base_1.select)('.sb-mobile-prop-pane');\n        var isMobile = window.matchMedia('(max-width:550px)').matches;\n        return isMobile && mobilePropPane ?\n            ReactDOM.createPortal(React.createElement(\"div\", { className: 'property-panel-section' },\n                React.createElement(\"div\", { className: \"property-panel-header\" }, this.props.title),\n                React.createElement(\"div\", { className: \"property-panel-content\" }, this.props.children)), mobilePropPane)\n            :\n                (React.createElement(\"div\", { className: 'property-panel-section' },\n                    React.createElement(\"div\", { className: \"property-panel-header\" }, this.props.title),\n                    React.createElement(\"div\", { className: \"property-panel-content\" }, this.props.children)));\n    };\n    return PropertyPane;\n}(React.Component));\nexports.PropertyPane = PropertyPane;\n\n\n//# sourceURL=webpack:///./samples/treemap/color-mapping/app/property-pane.tsx?");

/***/ }),

/***/ "./samples/treemap/color-mapping/app/sample-base.tsx":
/*!***********************************************************!*\
  !*** ./samples/treemap/color-mapping/app/sample-base.tsx ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.updateSampleSection = exports.SampleBase = void 0;\nvar React = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\nvar ej2_base_1 = __webpack_require__(/*! @syncfusion/ej2-base */ \"./node_modules/@syncfusion/ej2-base/index.js\");\n(0, ej2_base_1.enableRipple)(window.ripple);\nvar SampleBase = /** @class */ (function (_super) {\n    __extends(SampleBase, _super);\n    function SampleBase() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    SampleBase.prototype.rendereComplete = function () {\n        /**custom render complete function */\n    };\n    SampleBase.prototype.componentDidMount = function () {\n        var _this = this;\n        setTimeout(function () {\n            _this.rendereComplete();\n        });\n    };\n    return SampleBase;\n}(React.PureComponent));\nexports.SampleBase = SampleBase;\nfunction updateSampleSection() { }\nexports.updateSampleSection = updateSampleSection;\n\n\n//# sourceURL=webpack:///./samples/treemap/color-mapping/app/sample-base.tsx?");

/***/ }),

/***/ "./samples/treemap/color-mapping/app/treemap-data/color.json":
/*!*******************************************************************!*\
  !*** ./samples/treemap/color-mapping/app/treemap-data/color.json ***!
  \*******************************************************************/
/*! exports provided: color, default */
/***/ (function(module) {

eval("module.exports = JSON.parse(\"{\\\"color\\\":[{\\\"Name\\\":\\\"Greenland\\\",\\\"Area\\\":2130800,\\\"Population\\\":56483,\\\"Location\\\":\\\"North America\\\"},{\\\"Name\\\":\\\"New Guinea\\\",\\\"Area\\\":785753,\\\"Population\\\":1306940,\\\"Location\\\":\\\"Oceania\\\"},{\\\"Name\\\":\\\"Borneo\\\",\\\"Area\\\":743330,\\\"Population\\\":19804064,\\\"Location\\\":\\\"Asia\\\"},{\\\"Name\\\":\\\"Madagascar\\\",\\\"Area\\\":587713,\\\"Population\\\":22005222,\\\"Location\\\":\\\"Africa\\\"},{\\\"Name\\\":\\\"Baffin Island\\\",\\\"Area\\\":507451,\\\"Population\\\":10745,\\\"Location\\\":\\\"North America\\\"},{\\\"Name\\\":\\\"Sumatra\\\",\\\"Area\\\":443066,\\\"Population\\\":50000000,\\\"Location\\\":\\\"Asia\\\"},{\\\"Name\\\":\\\"Honshu\\\",\\\"Area\\\":225800,\\\"Population\\\":103000000,\\\"Location\\\":\\\"Asia\\\"},{\\\"Name\\\":\\\"Victoria Island\\\",\\\"Area\\\":217291,\\\"Population\\\":1875,\\\"Location\\\":\\\"North America\\\"},{\\\"Name\\\":\\\"Great Britain\\\",\\\"Area\\\":209331,\\\"Population\\\":60800000,\\\"Location\\\":\\\"Europe\\\"},{\\\"Name\\\":\\\"Ellesmere Island\\\",\\\"Area\\\":183965,\\\"Population\\\":146,\\\"Location\\\":\\\"North America\\\"}]}\");\n\n//# sourceURL=webpack:///./samples/treemap/color-mapping/app/treemap-data/color.json?");

/***/ })

/******/ });