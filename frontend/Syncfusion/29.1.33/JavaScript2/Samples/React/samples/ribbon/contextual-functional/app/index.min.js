/******/ (function(modules) { // webpackBootstrap
/******/ 	// install a JSONP callback for chunk loading
/******/ 	function webpackJsonpCallback(data) {
/******/ 		var chunkIds = data[0];
/******/ 		var moreModules = data[1];
/******/ 		var executeModules = data[2];
/******/
/******/ 		// add "moreModules" to the modules object,
/******/ 		// then flag all "chunkIds" as loaded and fire callback
/******/ 		var moduleId, chunkId, i = 0, resolves = [];
/******/ 		for(;i < chunkIds.length; i++) {
/******/ 			chunkId = chunkIds[i];
/******/ 			if(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 				resolves.push(installedChunks[chunkId][0]);
/******/ 			}
/******/ 			installedChunks[chunkId] = 0;
/******/ 		}
/******/ 		for(moduleId in moreModules) {
/******/ 			if(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {
/******/ 				modules[moduleId] = moreModules[moduleId];
/******/ 			}
/******/ 		}
/******/ 		if(parentJsonpFunction) parentJsonpFunction(data);
/******/
/******/ 		while(resolves.length) {
/******/ 			resolves.shift()();
/******/ 		}
/******/
/******/ 		// add entry modules from loaded chunk to deferred list
/******/ 		deferredModules.push.apply(deferredModules, executeModules || []);
/******/
/******/ 		// run deferred modules when all chunks ready
/******/ 		return checkDeferredModules();
/******/ 	};
/******/ 	function checkDeferredModules() {
/******/ 		var result;
/******/ 		for(var i = 0; i < deferredModules.length; i++) {
/******/ 			var deferredModule = deferredModules[i];
/******/ 			var fulfilled = true;
/******/ 			for(var j = 1; j < deferredModule.length; j++) {
/******/ 				var depId = deferredModule[j];
/******/ 				if(installedChunks[depId] !== 0) fulfilled = false;
/******/ 			}
/******/ 			if(fulfilled) {
/******/ 				deferredModules.splice(i--, 1);
/******/ 				result = __webpack_require__(__webpack_require__.s = deferredModule[0]);
/******/ 			}
/******/ 		}
/******/
/******/ 		return result;
/******/ 	}
/******/
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// object to store loaded and loading chunks
/******/ 	// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 	// Promise = chunk loading, 0 = chunk loaded
/******/ 	var installedChunks = {
/******/ 		"./samples/ribbon/contextual-functional/app/index.min": 0
/******/ 	};
/******/
/******/ 	var deferredModules = [];
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	var jsonpArray = window["webpackJsonp"] = window["webpackJsonp"] || [];
/******/ 	var oldJsonpFunction = jsonpArray.push.bind(jsonpArray);
/******/ 	jsonpArray.push = webpackJsonpCallback;
/******/ 	jsonpArray = jsonpArray.slice();
/******/ 	for(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);
/******/ 	var parentJsonpFunction = oldJsonpFunction;
/******/
/******/
/******/ 	// add entry module to deferred list
/******/ 	deferredModules.push(["./samples/ribbon/contextual-functional/app/index.tsx","navigations.min"]);
/******/ 	// run deferred modules when ready
/******/ 	return checkDeferredModules();
/******/ })
/************************************************************************/
/******/ ({

/***/ "./samples/ribbon/contextual-functional/app/index.tsx":
/*!************************************************************!*\
  !*** ./samples/ribbon/contextual-functional/app/index.tsx ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar client_1 = __webpack_require__(/*! react-dom/client */ \"./node_modules/react-dom/client.js\");\nvar React = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\nvar react_1 = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\nvar ej2_react_ribbon_1 = __webpack_require__(/*! @syncfusion/ej2-react-ribbon */ \"./node_modules/@syncfusion/ej2-react-ribbon/index.js\");\nvar ej2_react_ribbon_2 = __webpack_require__(/*! @syncfusion/ej2-react-ribbon */ \"./node_modules/@syncfusion/ej2-react-ribbon/index.js\");\nvar ej2_react_notifications_1 = __webpack_require__(/*! @syncfusion/ej2-react-notifications */ \"./node_modules/@syncfusion/ej2-react-notifications/index.js\");\nvar ej2_react_lists_1 = __webpack_require__(/*! @syncfusion/ej2-react-lists */ \"./node_modules/@syncfusion/ej2-react-lists/index.js\");\nvar sample_base_1 = __webpack_require__(/*! ./sample-base */ \"./samples/ribbon/contextual-functional/app/sample-base.tsx\");\nvar Contextual = function () {\n    (0, react_1.useEffect)(function () {\n        (0, sample_base_1.updateSampleSection)();\n        tableElementRef.current.onclick = function (args) {\n            ribbonObj.current.showTab('TableDesign', true);\n            ribbonObj.current.showTab('TableLayout', true);\n            ribbonObj.current.selectTab('TableDesign');\n            ribbonObj.current.hideTab('Format', true);\n            if (selectedCell) {\n                selectedCell.classList.remove('e-table-selected');\n            }\n            args.target.classList.add('e-table-selected');\n            selectedCell = args.currentTarget.querySelector('.e-table-selected');\n            imageElementRef.current.classList.remove('e-image-selected');\n        };\n        imageElementRef.current.onclick = function (e) {\n            e.stopPropagation();\n            ribbonObj.current.showTab('Format', true);\n            ribbonObj.current.selectTab('Format');\n            ribbonObj.current.hideTab('TableDesign', true);\n            ribbonObj.current.hideTab('TableLayout', true);\n            updateSelectedState('Image');\n        };\n        placeholderElementRef.current.onclick = function (args) {\n            if (args.target.nodeName !== 'TD' && args.target.nodeName !== 'IMG') {\n                ribbonObj.current.hideTab('TableDesign', true);\n                ribbonObj.current.hideTab('TableLayout', true);\n                ribbonObj.current.hideTab('Format', true);\n                updateSelectedState('Table');\n            }\n        };\n    }, []);\n    var ribbonObj = (0, react_1.useRef)(null);\n    var selectedCell = null;\n    var tableElementRef = (0, react_1.useRef)(null);\n    var imageElementRef = (0, react_1.useRef)(null);\n    var placeholderElementRef = (0, react_1.useRef)(null);\n    var pasteOptions = [{ text: \"Keep Source Format\" }, { text: \"Merge Format\" }, { text: \"Keep Text Only\" }];\n    var findOptions = [{ text: \"Find\", iconCss: \"e-icons e-search\" }, { text: \"Advanced Find\", iconCss: \"e-icons e-search\" }, { text: \"Go to\", iconCss: \"e-icons e-arrow-right\" }];\n    var selectOptions = [{ text: \"Select All\" }, { text: \"Select Objects\" }];\n    var dictateOptions = [{ text: \"Chinese\" }, { text: \"English\" }, { text: \"German\" }, { text: \"French\" }];\n    var tableOptions = [{ text: \"Insert Table\" }, { text: \"Draw Table\" }, { text: \"Convert Table\" }, { text: \"Excel SpreadSheet\" }];\n    var shapeOptions = [{ text: \"Lines\" }, { text: \"Rectangles\" }, { text: \"Basic Arrows\" }, { text: \"Basic Shapes\" }, { text: \"FlowChart\" }];\n    var headerOptions = [{ text: \"Insert Header\" }, { text: \"Edit Header\" }, { text: \"Remove Header\" }];\n    var footerOptions = [{ text: \"Insert Footer\" }, { text: \"Edit Footer\" }, { text: \"Remove Footer\" }];\n    var pageOptions = [{ text: \"Insert Top of page\" }, { text: \"Insert Bottom of page\" }, { text: \"Format Page Number\" }];\n    var linkOptions = [{ text: \"Insert Link\", iconCss: \"e-icons e-link\" }, { text: \"Recent Links\", iconCss: \"e-icons e-clock\" }, { text: \"Bookmarks\", iconCss: \"e-icons e-bookmark\" }];\n    var tableDropdownOptions = [{ text: \"Header Row\" }, { text: \"Banded Rows\" }, { text: \"Banded Columns\" }];\n    var borderDropdownOptions = [\n        { text: 'Border Right', iconCss: 'e-icons e-border-right' },\n        { text: 'Border Left', iconCss: 'e-icons e-border-left' },\n        { text: 'Border Bottom', iconCss: 'e-icons e-border-bottom' },\n        { text: 'Border Top', iconCss: 'e-icons e-border-top' }\n    ];\n    var mergeDropdownOptions = [{ text: 'Merge Cells', iconCss: 'e-icons e-merge-cells' }, { text: 'Split Cells', iconCss: 'e-icons e-split-horizontal' }];\n    var fontSize = [\"8\", \"9\", \"10\", \"11\", \"12\", \"14\", \"16\", \"18\", \"20\", \"22\", \"24\", \"26\", \"28\", \"36\", \"48\", \"72\", \"96\"];\n    var fontStyle = [\"Algerian\", \"Arial\", \"Calibri\", \"Cambria\", \"Cambria Math\", \"Courier New\", \"Candara\", \"Georgia\", \"Impact\", \"Segoe Print\", \"Segoe Script\", \"Segoe UI\", \"Symbol\", \"Times New Roman\", \"Verdana\", \"Windings\"];\n    var fileOptions = [{ text: \"New\", iconCss: \"e-icons e-file-new\", id: \"new\" },\n        { text: \"Open\", iconCss: \"e-icons e-folder-open\", id: \"Open\" },\n        { text: \"Rename\", iconCss: \"e-icons e-rename\", id: \"rename\" },\n        {\n            text: \"Save as\", iconCss: \"e-icons e-save\", id: \"save\",\n            items: [\n                { text: \"Microsoft Word (.docx)\", iconCss: \"sf-icon-word\", id: \"newword\" },\n                { text: \"Microsoft Word 97-2003(.doc)\", iconCss: \"sf-icon-word\", id: \"oldword\" },\n                { text: \"Download as PDF\", iconCss: \"e-icons e-export-pdf\", id: \"pdf\" }\n            ]\n        }];\n    var toastInstance = (0, react_1.useRef)(null);\n    var isPasteDisabled = true;\n    var enablePaste = function () {\n        if (!isPasteDisabled) {\n            return;\n        }\n        ribbonObj.current.enableItem('pastebtn');\n        isPasteDisabled = false;\n    };\n    var updateContent = function (args) {\n        toastInstance.current.show({ content: \"Last clicked item is \" + args });\n    };\n    var fileSelect = function (args) {\n        if (args.item.id === \"newword\" || args.item.id === \"oldword\" || args.item.id === \"pdf\") {\n            updateContent(\"File -> Save as -> \" + args.item.text);\n        }\n        else {\n            updateContent(\"File -> \" + args.item.text);\n        }\n    };\n    var launchClick = function (args) {\n        if (args.groupId == \"clipboard\") {\n            updateContent(\"Clipboard Launcher Icon\");\n        }\n        else if (args.groupId == \"illustration\") {\n            updateContent(\"Illustration Launcher Icon\");\n        }\n        else if (args.groupId == \"header_footer\") {\n            updateContent(\"Header & Footer Launcher Icon\");\n        }\n    };\n    var updateSelectedState = function (args) {\n        if (selectedCell) {\n            selectedCell.classList.remove('e-table-selected');\n            selectedCell = null;\n        }\n        imageElementRef.current.classList[args === 'Image' ? 'add' : 'remove']('e-image-selected');\n    };\n    return (React.createElement(\"div\", { className: 'control-pane' },\n        React.createElement(\"div\", { className: 'col-lg-12 control-section contextual-tab' },\n            React.createElement(\"div\", { id: \"contextual-ribbonContainer\" },\n                React.createElement(ej2_react_ribbon_1.RibbonComponent, { id: 'ribbon', ref: ribbonObj, enablePersistence: true, fileMenu: { visible: true, menuItems: fileOptions, select: fileSelect }, launcherIconClick: launchClick },\n                    React.createElement(ej2_react_ribbon_1.RibbonTabsDirective, null,\n                        React.createElement(ej2_react_ribbon_1.RibbonTabDirective, { header: 'Home' },\n                            React.createElement(ej2_react_ribbon_1.RibbonGroupsDirective, null,\n                                React.createElement(ej2_react_ribbon_1.RibbonGroupDirective, { header: \"Clipboard\", id: \"clipboard\", groupIconCss: \"e-icons e-paste\", showLauncherIcon: true },\n                                    React.createElement(ej2_react_ribbon_1.RibbonCollectionsDirective, null,\n                                        React.createElement(ej2_react_ribbon_1.RibbonCollectionDirective, null,\n                                            React.createElement(ej2_react_ribbon_1.RibbonItemsDirective, null,\n                                                React.createElement(ej2_react_ribbon_1.RibbonItemDirective, { type: \"SplitButton\", disabled: true, id: \"pastebtn\", allowedSizes: ej2_react_ribbon_2.RibbonItemSize.Large, splitButtonSettings: { iconCss: \"e-icons e-paste\", items: pasteOptions, content: \"Paste\", select: function (args) { updateContent(\"Paste -> \" + args.item.text); }, click: function () { updateContent(\"Paste\"); } } }))),\n                                        React.createElement(ej2_react_ribbon_1.RibbonCollectionDirective, null,\n                                            React.createElement(ej2_react_ribbon_1.RibbonItemsDirective, null,\n                                                React.createElement(ej2_react_ribbon_1.RibbonItemDirective, { type: \"Button\", buttonSettings: { iconCss: \"e-icons e-cut\", content: \"Cut\", clicked: function () { updateContent(\"Cut\"); enablePaste(); } } }),\n                                                React.createElement(ej2_react_ribbon_1.RibbonItemDirective, { type: \"Button\", buttonSettings: { iconCss: \"e-icons e-copy\", content: \"Copy\", clicked: function () { updateContent(\"Copy\"); enablePaste(); } } }),\n                                                React.createElement(ej2_react_ribbon_1.RibbonItemDirective, { type: \"Button\", buttonSettings: { iconCss: \"e-icons e-format-painter\", content: \"Format Painter\", clicked: function () { updateContent(\"Format Painter\"); } } }))))),\n                                React.createElement(ej2_react_ribbon_1.RibbonGroupDirective, { header: \"Font\", overflowHeader: \"More Font Options\", groupIconCss: \"e-icons e-bold\", isCollapsible: false, enableGroupOverflow: true, orientation: \"Row\", cssClass: 'font-group' },\n                                    React.createElement(ej2_react_ribbon_1.RibbonCollectionsDirective, null,\n                                        React.createElement(ej2_react_ribbon_1.RibbonCollectionDirective, null,\n                                            React.createElement(ej2_react_ribbon_1.RibbonItemsDirective, null,\n                                                React.createElement(ej2_react_ribbon_1.RibbonItemDirective, { type: \"ComboBox\", comboBoxSettings: { dataSource: fontStyle, index: 3, label: 'Font Style', width: '115px', popupWidth: '150px', allowFiltering: true, change: function (args) { if (args.itemData) {\n                                                            updateContent(\"Font Style -> \" + args.itemData.text);\n                                                        } } } }),\n                                                React.createElement(ej2_react_ribbon_1.RibbonItemDirective, { type: \"ComboBox\", comboBoxSettings: { dataSource: fontSize, index: 3, label: 'Font Size', width: '65px', popupWidth: '85px', allowFiltering: true, change: function (args) { if (args.itemData) {\n                                                            updateContent(\"Font Size -> \" + args.itemData.text);\n                                                        } } } }))),\n                                        React.createElement(ej2_react_ribbon_1.RibbonCollectionDirective, null,\n                                            React.createElement(ej2_react_ribbon_1.RibbonItemsDirective, null,\n                                                React.createElement(ej2_react_ribbon_1.RibbonItemDirective, { type: \"GroupButton\", allowedSizes: ej2_react_ribbon_2.RibbonItemSize.Small, groupButtonSettings: { selection: ej2_react_ribbon_2.RibbonGroupButtonSelection.Multiple, header: 'Format Styles', items: [{ iconCss: 'e-icons e-bold', content: 'Bold', selected: true, click: function () { updateContent(\"Bold\"); } }, { iconCss: 'e-icons e-italic', content: 'Italic', click: function () { updateContent(\"Italic\"); } }, { iconCss: 'e-icons e-underline', content: 'Underline', click: function () { updateContent(\"Underline\"); } }, { iconCss: 'e-icons e-strikethrough', content: 'Strikethrough', click: function () { updateContent(\"Strikethrough\"); } }, { iconCss: 'e-icons e-change-case', content: 'Change Case', click: function () { updateContent(\"Change Case\"); } }] } }),\n                                                React.createElement(ej2_react_ribbon_1.RibbonItemDirective, { type: \"ColorPicker\", allowedSizes: ej2_react_ribbon_2.RibbonItemSize.Small, displayOptions: ej2_react_ribbon_1.DisplayMode.Simplified | ej2_react_ribbon_1.DisplayMode.Classic, colorPickerSettings: { value: '#123456', change: function (args) { updateContent(args.currentValue.hex + \" color\"); } } }))))),\n                                React.createElement(ej2_react_ribbon_1.RibbonGroupDirective, { header: \"Paragraph\", groupIconCss: \"e-icons e-align-center\", orientation: \"Row\" },\n                                    React.createElement(ej2_react_ribbon_1.RibbonCollectionsDirective, null,\n                                        React.createElement(ej2_react_ribbon_1.RibbonCollectionDirective, null,\n                                            React.createElement(ej2_react_ribbon_1.RibbonItemsDirective, null,\n                                                React.createElement(ej2_react_ribbon_1.RibbonItemDirective, { type: \"Button\", allowedSizes: ej2_react_ribbon_2.RibbonItemSize.Small, buttonSettings: { iconCss: \"e-icons e-decrease-indent\", content: 'Decrease Indent', clicked: function () { updateContent(\"Decrease Indent\"); } } }),\n                                                React.createElement(ej2_react_ribbon_1.RibbonItemDirective, { type: \"Button\", allowedSizes: ej2_react_ribbon_2.RibbonItemSize.Small, buttonSettings: { iconCss: \"e-icons e-increase-indent\", content: 'Increase Indent', clicked: function () { updateContent(\"Increase Indent\"); } } }),\n                                                React.createElement(ej2_react_ribbon_1.RibbonItemDirective, { type: \"Button\", allowedSizes: ej2_react_ribbon_2.RibbonItemSize.Small, buttonSettings: { iconCss: \"e-icons e-paragraph\", content: 'Paragraph', clicked: function () { updateContent(\"Paragraph Mark\"); } } }))),\n                                        React.createElement(ej2_react_ribbon_1.RibbonCollectionDirective, null,\n                                            React.createElement(ej2_react_ribbon_1.RibbonItemsDirective, null,\n                                                React.createElement(ej2_react_ribbon_1.RibbonItemDirective, { type: \"GroupButton\", allowedSizes: ej2_react_ribbon_2.RibbonItemSize.Small, groupButtonSettings: { selection: ej2_react_ribbon_2.RibbonGroupButtonSelection.Single, header: 'Alignment', items: [{ iconCss: 'e-icons e-align-left', selected: true, click: function () { updateContent(\"Align Left\"); } }, { iconCss: 'e-icons e-align-center', click: function () { updateContent(\"Align Center\"); } }, { iconCss: 'e-icons e-align-right', click: function () { updateContent(\"Align Right\"); } }, { iconCss: 'e-icons e-justify', click: function () { updateContent(\"Justify\"); } }] } }))))),\n                                React.createElement(ej2_react_ribbon_1.RibbonGroupDirective, { header: \"Editing\", groupIconCss: \"e-icons e-edit\", orientation: \"Column\" },\n                                    React.createElement(ej2_react_ribbon_1.RibbonCollectionsDirective, null,\n                                        React.createElement(ej2_react_ribbon_1.RibbonCollectionDirective, null,\n                                            React.createElement(ej2_react_ribbon_1.RibbonItemsDirective, null,\n                                                React.createElement(ej2_react_ribbon_1.RibbonItemDirective, { type: \"SplitButton\", splitButtonSettings: { iconCss: \"e-icons e-search\", items: findOptions, content: \"Find\", select: function (args) { updateContent(\"Find -> \" + args.item.text); }, click: function () { updateContent(\"Find\"); } } }),\n                                                React.createElement(ej2_react_ribbon_1.RibbonItemDirective, { type: \"Button\", buttonSettings: { iconCss: \"e-icons e-replace\", content: 'Replace', clicked: function () { updateContent(\"Replace\"); } } }),\n                                                React.createElement(ej2_react_ribbon_1.RibbonItemDirective, { type: \"SplitButton\", splitButtonSettings: { iconCss: \"e-icons e-mouse-pointer\", items: selectOptions, content: \"Select\", select: function (args) { updateContent(\"Select -> \" + args.item.text); }, click: function () { updateContent(\"Select\"); } } }))))),\n                                React.createElement(ej2_react_ribbon_1.RibbonGroupDirective, { header: \"Voice\", groupIconCss: \"sf-icon-dictate\", isCollapsible: false },\n                                    React.createElement(ej2_react_ribbon_1.RibbonCollectionsDirective, null,\n                                        React.createElement(ej2_react_ribbon_1.RibbonCollectionDirective, null,\n                                            React.createElement(ej2_react_ribbon_1.RibbonItemsDirective, null,\n                                                React.createElement(ej2_react_ribbon_1.RibbonItemDirective, { type: \"SplitButton\", allowedSizes: ej2_react_ribbon_2.RibbonItemSize.Large, splitButtonSettings: { iconCss: \"sf-icon-dictate\", items: dictateOptions, content: \"Dictate\", select: function (args) { updateContent(\"Dictate -> \" + args.item.text); }, click: function () { updateContent(\"Dictate\"); } } }))))),\n                                React.createElement(ej2_react_ribbon_1.RibbonGroupDirective, { header: \"Editor\", groupIconCss: \"sf-icon-editor\", isCollapsible: false },\n                                    React.createElement(ej2_react_ribbon_1.RibbonCollectionsDirective, null,\n                                        React.createElement(ej2_react_ribbon_1.RibbonCollectionDirective, null,\n                                            React.createElement(ej2_react_ribbon_1.RibbonItemsDirective, null,\n                                                React.createElement(ej2_react_ribbon_1.RibbonItemDirective, { type: \"Button\", allowedSizes: ej2_react_ribbon_2.RibbonItemSize.Large, buttonSettings: { iconCss: \"sf-icon-editor\", content: \"Editor\", clicked: function () { updateContent(\"Editor\"); } } }))))),\n                                React.createElement(ej2_react_ribbon_1.RibbonGroupDirective, { header: \"Reuse Files\", groupIconCss: \"sf-icon-reuse\", isCollapsible: false },\n                                    React.createElement(ej2_react_ribbon_1.RibbonCollectionsDirective, null,\n                                        React.createElement(ej2_react_ribbon_1.RibbonCollectionDirective, null,\n                                            React.createElement(ej2_react_ribbon_1.RibbonItemsDirective, null,\n                                                React.createElement(ej2_react_ribbon_1.RibbonItemDirective, { type: \"Button\", disabled: true, allowedSizes: ej2_react_ribbon_2.RibbonItemSize.Large, buttonSettings: { iconCss: \"sf-icon-reuse\", content: \"Reuse Files\", clicked: function () { updateContent(\"Reuse Files\"); } } }))))))),\n                        React.createElement(ej2_react_ribbon_1.RibbonTabDirective, { header: 'Insert' },\n                            React.createElement(ej2_react_ribbon_1.RibbonGroupsDirective, null,\n                                React.createElement(ej2_react_ribbon_1.RibbonGroupDirective, { header: \"Tables\", isCollapsible: false },\n                                    React.createElement(ej2_react_ribbon_1.RibbonCollectionsDirective, null,\n                                        React.createElement(ej2_react_ribbon_1.RibbonCollectionDirective, null,\n                                            React.createElement(ej2_react_ribbon_1.RibbonItemsDirective, null,\n                                                React.createElement(ej2_react_ribbon_1.RibbonItemDirective, { type: \"DropDown\", allowedSizes: ej2_react_ribbon_2.RibbonItemSize.Large, dropDownSettings: { iconCss: \"e-icons e-table\", items: tableOptions, content: \"Table\", select: function (args) { updateContent(\"Table -> \" + args.item.text); } } }))))),\n                                React.createElement(ej2_react_ribbon_1.RibbonGroupDirective, { header: \"Illustration\", overflowHeader: \"Illustrations\", id: \"illustration\", groupIconCss: \"e-icons e-image\", enableGroupOverflow: true, orientation: \"Row\" },\n                                    React.createElement(ej2_react_ribbon_1.RibbonCollectionsDirective, null,\n                                        React.createElement(ej2_react_ribbon_1.RibbonCollectionDirective, null,\n                                            React.createElement(ej2_react_ribbon_1.RibbonItemsDirective, null,\n                                                React.createElement(ej2_react_ribbon_1.RibbonItemDirective, { id: 'pictureddl', type: \"DropDown\", dropDownSettings: { iconCss: \"e-icons e-image\", content: \"Pictures\", target: '#pictureList' } }),\n                                                React.createElement(ej2_react_ribbon_1.RibbonItemDirective, { type: \"DropDown\", dropDownSettings: { iconCss: \"sf-icon-shapes\", items: shapeOptions, content: \"Shapes\", select: function (args) { updateContent(\"Shapes -> \" + args.item.text); } } }),\n                                                React.createElement(ej2_react_ribbon_1.RibbonItemDirective, { type: \"Button\", buttonSettings: { iconCss: \"sf-icon-3d-model\", content: \"3D Models\", clicked: function () { updateContent(\"3D Models\"); } } }),\n                                                React.createElement(ej2_react_ribbon_1.RibbonItemDirective, { type: \"Button\", buttonSettings: { iconCss: \"sf-icon-smart-art\", content: \"Smart Art\", clicked: function () { updateContent(\"Smart Art\"); } } }),\n                                                React.createElement(ej2_react_ribbon_1.RibbonItemDirective, { type: \"Button\", buttonSettings: { iconCss: \"sf-icon-chart\", content: \"Charts\", clicked: function () { updateContent(\"Chart\"); } } }),\n                                                React.createElement(ej2_react_ribbon_1.RibbonItemDirective, { type: \"Button\", buttonSettings: { iconCss: \"sf-icon-screenshot\", content: \"Screenshot\", clicked: function () { updateContent(\"Screenshot\"); } } }))))),\n                                React.createElement(ej2_react_ribbon_1.RibbonGroupDirective, { header: \"Header & Footer\", id: \"header_footer\", groupIconCss: \"e-icons e-table\", orientation: \"Column\", showLauncherIcon: true },\n                                    React.createElement(ej2_react_ribbon_1.RibbonCollectionsDirective, null,\n                                        React.createElement(ej2_react_ribbon_1.RibbonCollectionDirective, null,\n                                            React.createElement(ej2_react_ribbon_1.RibbonItemsDirective, null,\n                                                React.createElement(ej2_react_ribbon_1.RibbonItemDirective, { type: \"DropDown\", dropDownSettings: { iconCss: \"e-icons e-header\", items: headerOptions, content: \"Header\", select: function (args) { updateContent(\"Header -> \" + args.item.text); } } }),\n                                                React.createElement(ej2_react_ribbon_1.RibbonItemDirective, { type: \"DropDown\", dropDownSettings: { iconCss: \"e-icons e-footer\", items: footerOptions, content: \"Footer\", select: function (args) { updateContent(\"Footer -> \" + args.item.text); } } }),\n                                                React.createElement(ej2_react_ribbon_1.RibbonItemDirective, { type: \"DropDown\", dropDownSettings: { iconCss: \"e-icons e-page-numbering\", items: pageOptions, content: \"Page Numbering\", select: function (args) { updateContent(\"Page Numbering -> \" + args.item.text); } } }))))),\n                                React.createElement(ej2_react_ribbon_1.RibbonGroupDirective, { header: \"Comments\", isCollapsible: false },\n                                    React.createElement(ej2_react_ribbon_1.RibbonCollectionsDirective, null,\n                                        React.createElement(ej2_react_ribbon_1.RibbonCollectionDirective, null,\n                                            React.createElement(ej2_react_ribbon_1.RibbonItemsDirective, null,\n                                                React.createElement(ej2_react_ribbon_1.RibbonItemDirective, { type: \"Button\", allowedSizes: ej2_react_ribbon_2.RibbonItemSize.Large, buttonSettings: { iconCss: \"e-icons e-comment-add\", content: \"New Comment\", clicked: function () { updateContent(\"New Comment\"); } } }))))),\n                                React.createElement(ej2_react_ribbon_1.RibbonGroupDirective, { header: \"Links\", groupIconCss: \"e-icons e-link\", isCollapsible: false },\n                                    React.createElement(ej2_react_ribbon_1.RibbonCollectionsDirective, null,\n                                        React.createElement(ej2_react_ribbon_1.RibbonCollectionDirective, null,\n                                            React.createElement(ej2_react_ribbon_1.RibbonItemsDirective, null,\n                                                React.createElement(ej2_react_ribbon_1.RibbonItemDirective, { type: \"DropDown\", allowedSizes: ej2_react_ribbon_2.RibbonItemSize.Large, dropDownSettings: { iconCss: \"e-icons e-link\", items: linkOptions, content: \"Link\", select: function (args) { updateContent(\"Link -> \" + args.item.text); } } }))))))),\n                        React.createElement(ej2_react_ribbon_1.RibbonTabDirective, { header: 'View' },\n                            React.createElement(ej2_react_ribbon_1.RibbonGroupsDirective, null,\n                                React.createElement(ej2_react_ribbon_1.RibbonGroupDirective, { header: \"Views\", groupIconCss: 'e-icons e-print', orientation: 'Row' },\n                                    React.createElement(ej2_react_ribbon_1.RibbonCollectionsDirective, null,\n                                        React.createElement(ej2_react_ribbon_1.RibbonCollectionDirective, null,\n                                            React.createElement(ej2_react_ribbon_1.RibbonItemsDirective, null,\n                                                React.createElement(ej2_react_ribbon_1.RibbonItemDirective, { type: \"Button\", buttonSettings: { iconCss: \"sf-icon-read\", content: \"Read Mode\", clicked: function () { updateContent(\"Read Mode\"); } } }),\n                                                React.createElement(ej2_react_ribbon_1.RibbonItemDirective, { type: \"Button\", buttonSettings: { iconCss: \"e-icons e-print\", content: \"Print Layout\", clicked: function () { updateContent(\"Print Layout\"); } } }),\n                                                React.createElement(ej2_react_ribbon_1.RibbonItemDirective, { type: \"Button\", buttonSettings: { iconCss: \"sf-icon-web-layout\", content: \"Web Layout\", clicked: function () { updateContent(\"Web Layout\"); } } }))))),\n                                React.createElement(ej2_react_ribbon_1.RibbonGroupDirective, { header: \"Zoom\", groupIconCss: \"e-icons e-zoom-to-fit\", orientation: \"Row\" },\n                                    React.createElement(ej2_react_ribbon_1.RibbonCollectionsDirective, null,\n                                        React.createElement(ej2_react_ribbon_1.RibbonCollectionDirective, null,\n                                            React.createElement(ej2_react_ribbon_1.RibbonItemsDirective, null,\n                                                React.createElement(ej2_react_ribbon_1.RibbonItemDirective, { type: \"Button\", buttonSettings: { iconCss: \"e-icons e-zoom-in\", content: \"Zoom in\", clicked: function () { updateContent(\"Zoom in\"); } } }),\n                                                React.createElement(ej2_react_ribbon_1.RibbonItemDirective, { type: \"Button\", buttonSettings: { iconCss: \"e-icons e-zoom-out\", content: \"Zoom out\", clicked: function () { updateContent(\"Zoom out\"); } } }))))),\n                                React.createElement(ej2_react_ribbon_1.RibbonGroupDirective, { header: \"Show\", isCollapsible: true },\n                                    React.createElement(ej2_react_ribbon_1.RibbonCollectionsDirective, null,\n                                        React.createElement(ej2_react_ribbon_1.RibbonCollectionDirective, null,\n                                            React.createElement(ej2_react_ribbon_1.RibbonItemsDirective, null,\n                                                React.createElement(ej2_react_ribbon_1.RibbonItemDirective, { type: \"CheckBox\", checkBoxSettings: { label: \"Ruler\", checked: false, change: function () { updateContent(\"Ruler\"); } } }),\n                                                React.createElement(ej2_react_ribbon_1.RibbonItemDirective, { type: \"CheckBox\", checkBoxSettings: { label: \"Gridlines\", checked: false, change: function () { updateContent(\"Gridlines\"); } } }),\n                                                React.createElement(ej2_react_ribbon_1.RibbonItemDirective, { type: \"CheckBox\", checkBoxSettings: { label: \"Navigation Pane\", checked: true, change: function () { updateContent(\"Navigation Pane\"); } } }))))),\n                                React.createElement(ej2_react_ribbon_1.RibbonGroupDirective, { header: \"Dark Mode\", isCollapsible: false },\n                                    React.createElement(ej2_react_ribbon_1.RibbonCollectionsDirective, null,\n                                        React.createElement(ej2_react_ribbon_1.RibbonCollectionDirective, null,\n                                            React.createElement(ej2_react_ribbon_1.RibbonItemsDirective, null,\n                                                React.createElement(ej2_react_ribbon_1.RibbonItemDirective, { type: \"Button\", buttonSettings: { iconCss: \"sf-icon-mode\", content: \"Dark Mode\", clicked: function () { updateContent(\"Dark Mode\"); } } })))))))),\n                    React.createElement(ej2_react_ribbon_1.RibbonContextualTabsDirective, null,\n                        React.createElement(ej2_react_ribbon_1.RibbonContextualTabDirective, { visible: true },\n                            React.createElement(ej2_react_ribbon_1.RibbonTabsDirective, null,\n                                React.createElement(ej2_react_ribbon_1.RibbonTabDirective, { id: \"TableDesign\", header: 'Table Design' },\n                                    React.createElement(ej2_react_ribbon_1.RibbonGroupsDirective, null,\n                                        React.createElement(ej2_react_ribbon_1.RibbonGroupDirective, { header: \"Table Style\", groupIconCss: \"e-icons e-field-settings\" },\n                                            React.createElement(ej2_react_ribbon_1.RibbonCollectionsDirective, null,\n                                                React.createElement(ej2_react_ribbon_1.RibbonCollectionDirective, null,\n                                                    React.createElement(ej2_react_ribbon_1.RibbonItemsDirective, null,\n                                                        React.createElement(ej2_react_ribbon_1.RibbonItemDirective, { type: \"DropDown\", allowedSizes: ej2_react_ribbon_2.RibbonItemSize.Large, dropDownSettings: { iconCss: \"e-icons e-field-settings\", content: \"Table Style\", items: tableDropdownOptions, select: function (args) { updateContent(\"Table Style -> \" + args.item.text); } } }))))),\n                                        React.createElement(ej2_react_ribbon_1.RibbonGroupDirective, { header: \"Borders Style\", groupIconCss: \"e-icons e-field-settings\" },\n                                            React.createElement(ej2_react_ribbon_1.RibbonCollectionsDirective, null,\n                                                React.createElement(ej2_react_ribbon_1.RibbonCollectionDirective, null,\n                                                    React.createElement(ej2_react_ribbon_1.RibbonItemsDirective, null,\n                                                        React.createElement(ej2_react_ribbon_1.RibbonItemDirective, { type: \"DropDown\", allowedSizes: ej2_react_ribbon_2.RibbonItemSize.Large, dropDownSettings: { iconCss: \"e-icons e-border-all\", content: \"Borders\", items: borderDropdownOptions, select: function (args) { updateContent(\"Borders -> \" + args.item.text); } } }))))))),\n                                React.createElement(ej2_react_ribbon_1.RibbonTabDirective, { id: \"TableLayout\", header: 'Table Layout' },\n                                    React.createElement(ej2_react_ribbon_1.RibbonGroupsDirective, null,\n                                        React.createElement(ej2_react_ribbon_1.RibbonGroupDirective, { header: \"Data\", groupIconCss: \"e-icons e-custom-sort\" },\n                                            React.createElement(ej2_react_ribbon_1.RibbonCollectionsDirective, null,\n                                                React.createElement(ej2_react_ribbon_1.RibbonCollectionDirective, null,\n                                                    React.createElement(ej2_react_ribbon_1.RibbonItemsDirective, null,\n                                                        React.createElement(ej2_react_ribbon_1.RibbonItemDirective, { type: \"Button\", allowedSizes: ej2_react_ribbon_2.RibbonItemSize.Large, buttonSettings: { iconCss: \"e-icons e-sort-ascending\", content: \"Sort Table Ascending\", clicked: function () { updateContent(\"Sort Table Ascending\"); } } }))),\n                                                React.createElement(ej2_react_ribbon_1.RibbonCollectionDirective, null,\n                                                    React.createElement(ej2_react_ribbon_1.RibbonItemsDirective, null,\n                                                        React.createElement(ej2_react_ribbon_1.RibbonItemDirective, { type: \"Button\", allowedSizes: ej2_react_ribbon_2.RibbonItemSize.Large, buttonSettings: { iconCss: \"e-icons e-sort-descending\", content: \"Sort Table Descending\", clicked: function () { updateContent(\"Sort Table Descending\"); } } }))))),\n                                        React.createElement(ej2_react_ribbon_1.RibbonGroupDirective, { header: \"Merge\", groupIconCss: \"e-icons e-merge-cells\" },\n                                            React.createElement(ej2_react_ribbon_1.RibbonCollectionsDirective, null,\n                                                React.createElement(ej2_react_ribbon_1.RibbonCollectionDirective, null,\n                                                    React.createElement(ej2_react_ribbon_1.RibbonItemsDirective, null,\n                                                        React.createElement(ej2_react_ribbon_1.RibbonItemDirective, { type: \"DropDown\", allowedSizes: ej2_react_ribbon_2.RibbonItemSize.Large, dropDownSettings: { iconCss: \"e-icons e-merge-cells\", content: \"Merge\", items: mergeDropdownOptions, select: function (args) { updateContent(\"Merge -> \" + args.item.text); } } }))))))))),\n                        React.createElement(ej2_react_ribbon_1.RibbonContextualTabDirective, { visible: false },\n                            React.createElement(ej2_react_ribbon_1.RibbonTabsDirective, null,\n                                React.createElement(ej2_react_ribbon_1.RibbonTabDirective, { id: \"Format\", header: 'Picture Format' },\n                                    React.createElement(ej2_react_ribbon_1.RibbonGroupsDirective, null,\n                                        React.createElement(ej2_react_ribbon_1.RibbonGroupDirective, { header: \"Background\", groupIconCss: \"e-icons e-image\" },\n                                            React.createElement(ej2_react_ribbon_1.RibbonCollectionsDirective, null,\n                                                React.createElement(ej2_react_ribbon_1.RibbonCollectionDirective, null,\n                                                    React.createElement(ej2_react_ribbon_1.RibbonItemsDirective, null,\n                                                        React.createElement(ej2_react_ribbon_1.RibbonItemDirective, { type: \"Button\", allowedSizes: ej2_react_ribbon_2.RibbonItemSize.Large, buttonSettings: { iconCss: \"e-icons e-image\", content: \"Remove Background\", clicked: function () { updateContent(\"Remove Background\"); } } })))))))))),\n                    React.createElement(ej2_react_ribbon_2.Inject, { services: [ej2_react_ribbon_2.RibbonFileMenu, ej2_react_ribbon_1.RibbonColorPicker, ej2_react_ribbon_1.RibbonContextualTab] })),\n                React.createElement(\"div\", { id: \"contextual-ribbonPlaceHolder\", ref: placeholderElementRef },\n                    React.createElement(\"div\", { className: \"content-wrap\" },\n                        React.createElement(\"div\", { className: \"table-content\", style: { backgroundColor: \"white\" } },\n                            React.createElement(\"table\", { border: 1, className: \"ribbon-table\" },\n                                React.createElement(\"caption\", { className: \"table-header\" }, \"Click on the table or image to show contextual tabs.\"),\n                                React.createElement(\"tbody\", { className: \"table-body\", ref: tableElementRef },\n                                    React.createElement(\"tr\", { id: \"tableRow1\" },\n                                        React.createElement(\"td\", null),\n                                        React.createElement(\"td\", null),\n                                        React.createElement(\"td\", null)),\n                                    React.createElement(\"tr\", { id: \"tableRow2\" },\n                                        React.createElement(\"td\", null),\n                                        React.createElement(\"td\", null),\n                                        React.createElement(\"td\", null)),\n                                    React.createElement(\"tr\", { id: \"tableRow3\" },\n                                        React.createElement(\"td\", null),\n                                        React.createElement(\"td\", null),\n                                        React.createElement(\"td\", null)))),\n                            React.createElement(\"img\", { id: \"ribbonImage\", ref: imageElementRef, className: \"ribbon-image\", src: \"https://ej2.syncfusion.com/react/demos/src/ribbon/images/empire-state-building.png\", alt: \"image\" }))),\n                    React.createElement(ej2_react_notifications_1.ToastComponent, { id: 'toast', ref: toastInstance, position: { X: 'Right' }, width: 'auto', height: 25, timeOut: 2000, cssClass: 'e-toast-info', showCloseButton: true, target: \"#contextual-ribbonPlaceHolder\", newestOnTop: true, animation: { show: { effect: 'FadeIn' }, hide: { effect: 'FadeOut' } } })),\n                React.createElement(ej2_react_lists_1.ListViewComponent, { id: 'pictureList', dataSource: ['This Device', 'Stock Images', 'Online Images'], showHeader: true, headerTitle: \"Insert Picture From\", select: function (args) { updateContent(\"Picture -> \" + args.text); } })))));\n};\nexports.default = Contextual;\nvar root = (0, client_1.createRoot)(document.getElementById('sample'));\nroot.render(React.createElement(Contextual, null));\n\n\n//# sourceURL=webpack:///./samples/ribbon/contextual-functional/app/index.tsx?");

/***/ }),

/***/ "./samples/ribbon/contextual-functional/app/sample-base.tsx":
/*!******************************************************************!*\
  !*** ./samples/ribbon/contextual-functional/app/sample-base.tsx ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.updateSampleSection = exports.SampleBase = void 0;\nvar React = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\nvar ej2_base_1 = __webpack_require__(/*! @syncfusion/ej2-base */ \"./node_modules/@syncfusion/ej2-base/index.js\");\n(0, ej2_base_1.enableRipple)(window.ripple);\nvar SampleBase = /** @class */ (function (_super) {\n    __extends(SampleBase, _super);\n    function SampleBase() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    SampleBase.prototype.rendereComplete = function () {\n        /**custom render complete function */\n    };\n    SampleBase.prototype.componentDidMount = function () {\n        var _this = this;\n        setTimeout(function () {\n            _this.rendereComplete();\n        });\n    };\n    return SampleBase;\n}(React.PureComponent));\nexports.SampleBase = SampleBase;\nfunction updateSampleSection() { }\nexports.updateSampleSection = updateSampleSection;\n\n\n//# sourceURL=webpack:///./samples/ribbon/contextual-functional/app/sample-base.tsx?");

/***/ })

/******/ });