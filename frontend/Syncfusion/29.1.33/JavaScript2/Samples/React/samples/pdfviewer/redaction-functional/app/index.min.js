/******/ (function(modules) { // webpackBootstrap
/******/ 	// install a JSONP callback for chunk loading
/******/ 	function webpackJsonpCallback(data) {
/******/ 		var chunkIds = data[0];
/******/ 		var moreModules = data[1];
/******/ 		var executeModules = data[2];
/******/
/******/ 		// add "moreModules" to the modules object,
/******/ 		// then flag all "chunkIds" as loaded and fire callback
/******/ 		var moduleId, chunkId, i = 0, resolves = [];
/******/ 		for(;i < chunkIds.length; i++) {
/******/ 			chunkId = chunkIds[i];
/******/ 			if(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 				resolves.push(installedChunks[chunkId][0]);
/******/ 			}
/******/ 			installedChunks[chunkId] = 0;
/******/ 		}
/******/ 		for(moduleId in moreModules) {
/******/ 			if(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {
/******/ 				modules[moduleId] = moreModules[moduleId];
/******/ 			}
/******/ 		}
/******/ 		if(parentJsonpFunction) parentJsonpFunction(data);
/******/
/******/ 		while(resolves.length) {
/******/ 			resolves.shift()();
/******/ 		}
/******/
/******/ 		// add entry modules from loaded chunk to deferred list
/******/ 		deferredModules.push.apply(deferredModules, executeModules || []);
/******/
/******/ 		// run deferred modules when all chunks ready
/******/ 		return checkDeferredModules();
/******/ 	};
/******/ 	function checkDeferredModules() {
/******/ 		var result;
/******/ 		for(var i = 0; i < deferredModules.length; i++) {
/******/ 			var deferredModule = deferredModules[i];
/******/ 			var fulfilled = true;
/******/ 			for(var j = 1; j < deferredModule.length; j++) {
/******/ 				var depId = deferredModule[j];
/******/ 				if(installedChunks[depId] !== 0) fulfilled = false;
/******/ 			}
/******/ 			if(fulfilled) {
/******/ 				deferredModules.splice(i--, 1);
/******/ 				result = __webpack_require__(__webpack_require__.s = deferredModule[0]);
/******/ 			}
/******/ 		}
/******/
/******/ 		return result;
/******/ 	}
/******/
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// object to store loaded and loading chunks
/******/ 	// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 	// Promise = chunk loading, 0 = chunk loaded
/******/ 	var installedChunks = {
/******/ 		"./samples/pdfviewer/redaction-functional/app/index.min": 0
/******/ 	};
/******/
/******/ 	var deferredModules = [];
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	var jsonpArray = window["webpackJsonp"] = window["webpackJsonp"] || [];
/******/ 	var oldJsonpFunction = jsonpArray.push.bind(jsonpArray);
/******/ 	jsonpArray.push = webpackJsonpCallback;
/******/ 	jsonpArray = jsonpArray.slice();
/******/ 	for(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);
/******/ 	var parentJsonpFunction = oldJsonpFunction;
/******/
/******/
/******/ 	// add entry module to deferred list
/******/ 	deferredModules.push(["./samples/pdfviewer/redaction-functional/app/index.tsx","pdfviewer.min"]);
/******/ 	// run deferred modules when ready
/******/ 	return checkDeferredModules();
/******/ })
/************************************************************************/
/******/ ({

/***/ "./samples/pdfviewer/redaction-functional/app/index.tsx":
/*!**************************************************************!*\
  !*** ./samples/pdfviewer/redaction-functional/app/index.tsx ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar client_1 = __webpack_require__(/*! react-dom/client */ \"./node_modules/react-dom/client.js\");\nvar React = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\nvar ej2_react_pdfviewer_1 = __webpack_require__(/*! @syncfusion/ej2-react-pdfviewer */ \"./node_modules/@syncfusion/ej2-react-pdfviewer/index.js\");\nvar ej2_react_navigations_1 = __webpack_require__(/*! @syncfusion/ej2-react-navigations */ \"./node_modules/@syncfusion/ej2-react-navigations/index.js\");\nvar ej2_react_buttons_1 = __webpack_require__(/*! @syncfusion/ej2-react-buttons */ \"./node_modules/@syncfusion/ej2-react-buttons/index.js\");\nvar sample_base_1 = __webpack_require__(/*! ./sample-base */ \"./samples/pdfviewer/redaction-functional/app/sample-base.tsx\");\nvar ej2_react_dropdowns_1 = __webpack_require__(/*! @syncfusion/ej2-react-dropdowns */ \"./node_modules/@syncfusion/ej2-react-dropdowns/index.js\");\nvar ej2_react_popups_1 = __webpack_require__(/*! @syncfusion/ej2-react-popups */ \"./node_modules/@syncfusion/ej2-react-popups/index.js\");\nvar ej2_react_inputs_1 = __webpack_require__(/*! @syncfusion/ej2-react-inputs */ \"./node_modules/@syncfusion/ej2-react-inputs/index.js\");\nfunction Redaction() {\n    React.useEffect(function () {\n        (0, sample_base_1.updateSampleSection)();\n    }, []);\n    var viewer;\n    var toolbar;\n    var primaryToolbar;\n    var dropdown;\n    var dialogInstance = React.useRef(null);\n    var uploadObj = React.useRef(null);\n    var asyncSettings;\n    asyncSettings = {\n        saveUrl: 'https://ej2services.syncfusion.com/production/web-services/api/FileUploader/Save',\n        removeUrl: 'https://ej2services.syncfusion.com/production/web-services/api/FileUploader/Remove'\n    };\n    var currentPageNumber = '1';\n    var fileName = 'programmatical-annotations.pdf';\n    var data = ['10%', '25%', '50%', '75%', '100%', '200%', '400%'];\n    var redactionCount = 0;\n    var annotation;\n    var customStampSource = '';\n    var dropAreaRef = document.getElementsByClassName('drop-area-wrap')[0];\n    var allowedExtensions = '.png, .jpg, .jpeg';\n    var url = \"https://ej2services.syncfusion.com/production/web-services/api/pdfviewer/Redaction\";\n    function template() {\n        return (React.createElement(\"div\", null,\n            React.createElement(\"span\", { id: \"e-pv-redact-sb-currentPage\", title: \"Current Page\" }, \"1 \"),\n            React.createElement(\"span\", { id: \"e-pv-redact-sb-totalPage\", title: \"Total Page\" }, \"/ 1\")));\n    }\n    function clickHandler(args) {\n        switch (args.item.id) {\n            case 'pdfviewer_open':\n                {\n                    var fileUpload = document.getElementById('fileUpload');\n                    fileUpload.click();\n                    break;\n                }\n            case 'text_annot':\n                {\n                    viewer.rectangleSettings.fillColor = '#a3a2a0';\n                    viewer.rectangleSettings.strokeColor = '#a3a2a0';\n                    viewer.rectangleSettings.author = 'Text';\n                    viewer.annotation.setAnnotationMode('Rectangle');\n                    break;\n                }\n            case 'image_annot':\n                {\n                    dialogInstance.current.show();\n                    break;\n                }\n            case 'pattern_annot':\n                {\n                    viewer.rectangleSettings.fillColor = '#dedfe0';\n                    viewer.rectangleSettings.strokeColor = '#dedfe0';\n                    viewer.rectangleSettings.author = 'Pattern';\n                    viewer.annotation.setAnnotationMode('Rectangle');\n                    break;\n                }\n            case 'black_annot':\n                {\n                    viewer.rectangleSettings.fillColor = '#000000';\n                    viewer.rectangleSettings.strokeColor = '#000000';\n                    viewer.rectangleSettings.author = 'Redaction';\n                    viewer.annotation.setAnnotationMode('Rectangle');\n                    break;\n                }\n            case 'white_annot':\n                {\n                    viewer.rectangleSettings.fillColor = '#ffffff';\n                    viewer.rectangleSettings.strokeColor = '#ffffff';\n                    viewer.rectangleSettings.author = 'Redaction';\n                    viewer.annotation.setAnnotationMode('Rectangle');\n                    break;\n                }\n            case 'previousPage':\n                {\n                    viewer.navigation.goToPreviousPage();\n                    break;\n                }\n            case 'nextPage':\n                {\n                    viewer.navigation.goToNextPage();\n                    break;\n                }\n            case 'redacticon':\n                {\n                    if (redactionCount > 0) {\n                        viewer.saveAsBlob().then(function (value) {\n                            var data = value;\n                            var reader = new FileReader();\n                            reader.readAsDataURL(data);\n                            reader.onload = function (e) {\n                                var _a;\n                                var base64String = (_a = e.target) === null || _a === void 0 ? void 0 : _a.result;\n                                var xhr = new XMLHttpRequest();\n                                xhr.open('POST', url, true);\n                                xhr.setRequestHeader('Content-type', 'application/json; charset=UTF-8');\n                                var requestData = JSON.stringify({ base64String: base64String });\n                                xhr.onload = function () {\n                                    if (xhr.status === 200) {\n                                        viewer.load(xhr.responseText, null);\n                                    }\n                                    else {\n                                        console.error('Redaction failed:', xhr.statusText);\n                                    }\n                                };\n                                xhr.onerror = function () {\n                                    console.error('An error occurred during the redaction:', xhr.statusText);\n                                };\n                                xhr.send(requestData);\n                            };\n                        });\n                        redactionCount = 0;\n                        updateRedaction();\n                    }\n                    break;\n                }\n        }\n    }\n    //To download the redacted pdf\n    function download() {\n        viewer.saveAsBlob().then(function (value) {\n            var reader = new FileReader();\n            reader.readAsDataURL(value);\n            reader.onload = function (e) {\n                var _a;\n                var base64String = (_a = e.target) === null || _a === void 0 ? void 0 : _a.result;\n                var xhr = new XMLHttpRequest();\n                xhr.open('POST', url, true);\n                xhr.setRequestHeader('Content-type', 'application/json; charset=UTF-8');\n                var requestData = JSON.stringify({ base64String: base64String });\n                xhr.onload = function () {\n                    if (xhr.status === 200) {\n                        var blobUrl = createBlobUrl(xhr.responseText.split('base64,')[1], 'application/pdf');\n                        downloadDocument(blobUrl);\n                    }\n                    else {\n                        console.error('Download failed:', xhr.statusText);\n                    }\n                };\n                xhr.onerror = function () {\n                    console.error('An error occurred during the download:', xhr.statusText);\n                };\n                xhr.send(requestData);\n            };\n        }).catch(function (error) {\n            console.error('Error saving Blob:', error);\n        });\n    }\n    function createBlobUrl(base64String, contentType) {\n        var sliceSize = 512;\n        var byteCharacters = atob(base64String);\n        var byteArrays = [];\n        for (var offset = 0; offset < byteCharacters.length; offset += sliceSize) {\n            var slice = byteCharacters.slice(offset, offset + sliceSize);\n            var byteNumbers = new Array(slice.length);\n            for (var i = 0; i < slice.length; i++) {\n                byteNumbers[parseInt(i.toString(), 10)] = slice.charCodeAt(i);\n            }\n            var byteArray = new Uint8Array(byteNumbers);\n            byteArrays.push(byteArray);\n        }\n        var blob = new Blob(byteArrays, { type: contentType });\n        return blob;\n    }\n    function downloadDocument(blobUrl) {\n        var Url = URL || webkitURL;\n        blobUrl = Url.createObjectURL(blobUrl);\n        viewer.fileName = fileName;\n        var anchorElement = document.createElement('a');\n        if (anchorElement.click) {\n            anchorElement.href = blobUrl;\n            anchorElement.target = '_parent';\n            if ('download' in anchorElement) {\n                var downloadFileName = viewer.fileName || 'downloadedFile.pdf';\n                if (downloadFileName) {\n                    if (downloadFileName.endsWith('.pdf')) {\n                        anchorElement.download = downloadFileName;\n                    }\n                    else {\n                        var splitPdf = downloadFileName.split('.pdf')[0] + '.pdf';\n                        anchorElement.download = splitPdf;\n                    }\n                }\n                else {\n                    anchorElement.download = 'Default.pdf';\n                }\n            }\n            (document.body || document.documentElement).appendChild(anchorElement);\n            anchorElement.click();\n        }\n        else {\n            if (window.top === window &&\n                blobUrl.split('#')[0] === window.location.href.split('#')[0]) {\n                var padCharacter = blobUrl.indexOf('?') === -1 ? '?' : '&';\n                blobUrl = blobUrl.replace(/#|$/, padCharacter + '$&');\n            }\n            window.open(blobUrl, '_parent');\n        }\n    }\n    //Updating the number of redaction while the annotation has been added\n    function annotationAdd(e) {\n        var pdfAnnotationList = new Array();\n        pdfAnnotationList = viewer.annotationCollection;\n        var selectedAnnotationIndex = pdfAnnotationList.findIndex(function (item) { return item.annotationId == e.annotationId; });\n        if (selectedAnnotationIndex != -1) {\n            annotation = pdfAnnotationList[selectedAnnotationIndex];\n        }\n        if (annotation.author == \"Redaction\" || annotation.customStampName == \"Image\" || annotation.author == \"Pattern\" || annotation.author == \"Text\") {\n            redactionCount = redactionCount + 1;\n            updateRedaction();\n        }\n    }\n    //Updating the number of redaction while the annotation has been removed\n    function annotationRemove(e) {\n        if (annotation.author == \"Redaction\" || annotation.customStampName == \"Image\" || annotation.author == \"Pattern\" || annotation.author == \"Text\") {\n            redactionCount = redactionCount - 1;\n            updateRedaction();\n        }\n    }\n    //To update page number when the previous and next button is clicked\n    function updatePageNavigation() {\n        if (viewer.currentPageNumber === 1) {\n            toolbar.items[0].disabled = true;\n            toolbar.items[2].disabled = false;\n        }\n        else if (viewer.currentPageNumber === viewer.pageCount) {\n            toolbar.items[0].disabled = false;\n            toolbar.items[2].disabled = true;\n        }\n        else {\n            toolbar.items[0].disabled = false;\n            toolbar.items[2].disabled = false;\n        }\n    }\n    //To update the redaction count\n    function updateRedaction() {\n        if (redactionCount <= 0) {\n            primaryToolbar.items[8].disabled = true;\n        }\n        else {\n            primaryToolbar.items[8].disabled = false;\n        }\n    }\n    //To update page number when page has been changed\n    function onPageChange() {\n        currentPageNumber = viewer.currentPageNumber.toString();\n        document.getElementById('e-pv-redact-sb-currentPage').textContent = viewer.currentPageNumber.toString() + ' ';\n        updatePageNavigation();\n    }\n    //Updating the total number of pages while loading\n    function documentLoaded() {\n        toolbar = document.getElementById('e-pv-redact-sb-toolbar-secondary').ej2_instances[0];\n        primaryToolbar = document.getElementById('e-pv-redact-sb-toolbar').ej2_instances[0];\n        document.getElementById('e-pv-redact-sb-currentPage').textContent = viewer.currentPageNumber.toString();\n        document.getElementById('e-pv-redact-sb-totalPage').textContent = ' / ' + viewer.pageCount;\n        updatePageNavigation();\n        updateRedaction();\n    }\n    //Zoom values changes when the percentage is selected from the dropdown\n    function zoomValueChange(args) {\n        var zoom = (args).value;\n        var previousZoom = (args).previousItemData.value;\n        if (zoom !== null || previousZoom !== null) {\n            var zoomchange = parseInt(zoom.replace(\"%\", \"\"), 10);\n            viewer.magnificationModule.zoomTo(zoomchange);\n        }\n    }\n    function dropDown() {\n        return (React.createElement(\"div\", null,\n            React.createElement(ej2_react_dropdowns_1.ComboBoxComponent, { width: 88, popupWidth: 80, value: '100%', dataSource: data, showClearButton: false, change: zoomValueChange })));\n    }\n    //dialog header\n    function header() {\n        return (React.createElement(\"div\", null,\n            React.createElement(\"div\", { id: \"dlg-template\", title: \"Upload image\", className: \"e-icon-settings\" }, \"Upload Image\")));\n    }\n    //When cancel button is clicked\n    function CloseDialog() {\n        dialogInstance.current.hide();\n    }\n    //To get the footer content in dialog box\n    function footerTemplate() {\n        return (React.createElement(\"div\", null,\n            React.createElement(\"button\", { id: \"cancelButton\", className: \"e-control e-btn e-primary\", \"data-ripple\": \"true\", onClick: CloseDialog }, \"Cancel\")));\n    }\n    //To get content in dialog box\n    function contentTemplate() {\n        return (React.createElement(\"div\", { id: 'dialog' },\n            React.createElement(\"div\", { id: 'e-pv-redact-sb-defaultfileupload' },\n                React.createElement(\"div\", { className: \"drop-area-wrap\", id: 'e-pv-redact-sb-drop-area-wrap' },\n                    React.createElement(\"div\", null,\n                        React.createElement(ej2_react_inputs_1.UploaderComponent, { id: 'fileupload', type: 'file', ref: uploadObj, asyncSettings: asyncSettings, change: onFileChange, dropArea: dropAreaRef, allowedExtensions: allowedExtensions })),\n                    React.createElement(\"div\", null, \"(Only JPG and PNG images will be accepted)\")),\n                React.createElement(\"div\", { className: \"e-pv-redact-sb-image-list\" },\n                    React.createElement(\"div\", { id: 'imageContainer', className: \"e-pv-redact-sb-image-container\" },\n                        React.createElement(\"img\", { id: 'imageView', className: \"e-pv-redact-sb-image-source\", style: { 'display': 'none' } }))))));\n    }\n    //To add the image in pdf\n    function addImage() {\n        viewer.stampSettings.author = \"Image\";\n        viewer.customStampSettings = {\n            width: 200,\n            author: 'Image',\n            height: 125,\n            isAddToMenu: false,\n            enableCustomStamp: false\n        };\n        viewer.customStamp = [\n            {\n                customStampName: 'Image',\n                customStampImageSource: customStampSource\n            },\n        ];\n    }\n    var imageSrc;\n    function onFileChange(args) {\n        var file = args.file[0].rawFile;\n        var imageElement = document.getElementById('imageView');\n        var imageElementContainer = document.getElementById('imageContainer');\n        var reader = new FileReader();\n        reader.onload = function (e) {\n            var base64String = e.target ? e.target.result : null;\n            imageSrc = base64String;\n            customStampSource = imageSrc;\n            (imageElement).src = imageSrc;\n            imageElementContainer.className =\n                'image-container e-pv-redact-sb-image-container-selected';\n            (imageElement).style.display = 'block';\n            // Bind click event to the image element\n            imageElement.addEventListener('click', handleImageClick);\n        };\n        reader.readAsDataURL(file);\n    }\n    function handleImageClick() {\n        customStampSource = imageSrc;\n        dialogInstance.current.hide();\n        addImage();\n    }\n    return (React.createElement(\"div\", null,\n        React.createElement(\"div\", { className: 'control-section', id: 'e-pv-redact-sb-panel' },\n            React.createElement(\"div\", { className: \"flex-container\", id: \"e-pv-redact-sb-flexContainer\" }),\n            React.createElement(\"div\", { className: 'control-container' },\n                React.createElement(ej2_react_navigations_1.AppBarComponent, { colorMode: \"Primary\" },\n                    React.createElement(\"span\", { className: \"regular\" }, \"Redaction\"),\n                    React.createElement(\"div\", { className: \"e-appbar-spacer\" }),\n                    React.createElement(ej2_react_buttons_1.ButtonComponent, { cssClass: 'e-inherit login', iconCss: 'e-icons e-download e-btn-icon e-icon-left', id: 'download_pdf', onClick: download }, \"Download\"))),\n            React.createElement(\"div\", { className: 'primaryToolbar', id: 'toolbar_default' },\n                React.createElement(ej2_react_navigations_1.ToolbarComponent, { ref: function (scope) { toolbar = scope; }, clicked: clickHandler.bind(this), id: 'e-pv-redact-sb-toolbar' },\n                    React.createElement(ej2_react_navigations_1.ItemsDirective, null,\n                        React.createElement(ej2_react_navigations_1.ItemDirective, { prefixIcon: 'e-icon e-folder', tooltipText: 'Open', cssClass: 'e-pv-redact-sb-open-container', id: 'pdfviewer_open', text: 'Open' }),\n                        React.createElement(ej2_react_navigations_1.ItemDirective, { type: 'Separator' }),\n                        React.createElement(ej2_react_navigations_1.ItemDirective, { prefixIcon: 'e-icon e-text-annotation', tooltipText: 'Text', cssClass: 'e-pv-redact-sb-font-container', text: 'Text', id: 'text_annot' }),\n                        React.createElement(ej2_react_navigations_1.ItemDirective, { prefixIcon: 'e-icons e-image', tooltipText: 'Image', cssClass: 'e-pv-redact-sb-image-btn', text: 'Image', id: 'image_annot' }),\n                        React.createElement(ej2_react_navigations_1.ItemDirective, { prefixIcon: 'e-icons e-opacity', tooltipText: 'Pattern', cssClass: 'e-pv-redact-sb-pattern-container', text: 'Pattern', id: 'pattern_annot' }),\n                        React.createElement(ej2_react_navigations_1.ItemDirective, { prefixIcon: 'e-icons black-out', tooltipText: 'Blackout', cssClass: 'e-pv-redact-sb-black-out-container', text: 'Blackout', id: 'black_annot' }),\n                        React.createElement(ej2_react_navigations_1.ItemDirective, { prefixIcon: 'e-icons white-out', tooltipText: 'Whiteout', cssClass: 'e-pv-redact-sb-white-out-container', text: 'Whiteout', id: 'white_annot' }),\n                        React.createElement(ej2_react_navigations_1.ItemDirective, { type: 'Separator' }),\n                        React.createElement(ej2_react_navigations_1.ItemDirective, { prefixIcon: 'e-icons e-redact', tooltipText: 'Redaction', cssClass: 'e-pv-redact-sb-redaction-container', text: 'Redact', id: 'redacticon', disabled: true })))),\n            React.createElement(\"div\", { className: 'e-pv-secondary-toolbar', id: 'toolbar_secondary' },\n                React.createElement(ej2_react_navigations_1.ToolbarComponent, { ref: function (scope) { toolbar = scope; }, clicked: clickHandler.bind(this), id: 'e-pv-redact-sb-toolbar-secondary' },\n                    React.createElement(ej2_react_navigations_1.ItemsDirective, null,\n                        React.createElement(ej2_react_navigations_1.ItemDirective, { prefixIcon: 'e-icons e-chevron-left', cssClass: 'e-pv-redact-sb-previous-container', tooltipText: \"Previous Page\", id: 'previousPage', disabled: true }),\n                        React.createElement(ej2_react_navigations_1.ItemDirective, { template: template, tooltipText: \"Page Number\" }),\n                        React.createElement(ej2_react_navigations_1.ItemDirective, { prefixIcon: 'e-icon e-chevron-right', cssClass: 'e-pv-redact-sb-next-container', tooltipText: \"Next Page\", id: 'nextPage', disabled: true }),\n                        React.createElement(ej2_react_navigations_1.ItemDirective, { type: 'Separator' }),\n                        React.createElement(ej2_react_navigations_1.ItemDirective, { cssClass: 'percentage', type: \"Input\", tooltipText: \"Zoom\", template: dropDown, align: \"Left\" })))),\n            React.createElement(\"div\", { id: \"targetDialog\", className: \"dialog-element\" },\n                React.createElement(ej2_react_popups_1.DialogComponent, { header: header, footerTemplate: footerTemplate, content: contentTemplate, showCloseIcon: true, target: \"#targetDialog\", width: '477px', ref: dialogInstance, visible: false, isModal: true, id: 'e-pv-redact-sb-dialog' })),\n            React.createElement(ej2_react_pdfviewer_1.PdfViewerComponent, { ref: function (scope) { viewer = scope; }, id: \"container\", documentPath: \"https://cdn.syncfusion.com/content/pdf/programmatical-annotations.pdf\", resourceUrl: \"https://cdn.syncfusion.com/ej2/27.1.55/dist/ej2-pdfviewer-lib\", style: { 'height': '640px' }, enableToolbar: false, enableNavigationToolbar: false, enableAnnotationToolbar: false, enableCommentPanel: false, documentLoad: documentLoaded, pageChange: onPageChange, annotationAdd: annotationAdd, annotationRemove: annotationRemove },\n                React.createElement(ej2_react_pdfviewer_1.Inject, { services: [ej2_react_pdfviewer_1.Toolbar, ej2_react_pdfviewer_1.Magnification, ej2_react_pdfviewer_1.Navigation, ej2_react_pdfviewer_1.LinkAnnotation, ej2_react_pdfviewer_1.BookmarkView, ej2_react_pdfviewer_1.ThumbnailView, ej2_react_pdfviewer_1.Print, ej2_react_pdfviewer_1.TextSelection, ej2_react_pdfviewer_1.TextSearch, ej2_react_pdfviewer_1.Annotation, ej2_react_pdfviewer_1.FormFields, ej2_react_pdfviewer_1.FormDesigner, ej2_react_pdfviewer_1.PageOrganizer] })),\n            React.createElement(\"input\", { type: \"file\", id: \"fileUpload\", accept: \".pdf\", onChange: readFile.bind(this), style: { 'display': 'block', 'visibility': 'hidden', 'width': '0', 'height': '0' } }))));\n    //To read the file when changed\n    function readFile(evt) {\n        var uploadedFiles = evt.target.files;\n        var uploadedFile = uploadedFiles[0];\n        fileName = uploadedFile.name;\n        var reader = new FileReader();\n        reader.readAsDataURL(uploadedFile);\n        var uploadedFileName = fileName;\n        reader.onload = function (e) {\n            var uploadedFileUrl = e.currentTarget.result;\n            viewer.documentPath = uploadedFileUrl;\n            viewer.fileName = fileName;\n            viewer.downloadFileName = fileName;\n        };\n    }\n}\nexports.default = Redaction;\nvar root = (0, client_1.createRoot)(document.getElementById('sample'));\nroot.render(React.createElement(Redaction, null));\n\n\n//# sourceURL=webpack:///./samples/pdfviewer/redaction-functional/app/index.tsx?");

/***/ }),

/***/ "./samples/pdfviewer/redaction-functional/app/sample-base.tsx":
/*!********************************************************************!*\
  !*** ./samples/pdfviewer/redaction-functional/app/sample-base.tsx ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.updateSampleSection = exports.SampleBase = void 0;\nvar React = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\nvar ej2_base_1 = __webpack_require__(/*! @syncfusion/ej2-base */ \"./node_modules/@syncfusion/ej2-base/index.js\");\n(0, ej2_base_1.enableRipple)(window.ripple);\nvar SampleBase = /** @class */ (function (_super) {\n    __extends(SampleBase, _super);\n    function SampleBase() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    SampleBase.prototype.rendereComplete = function () {\n        /**custom render complete function */\n    };\n    SampleBase.prototype.componentDidMount = function () {\n        var _this = this;\n        setTimeout(function () {\n            _this.rendereComplete();\n        });\n    };\n    return SampleBase;\n}(React.PureComponent));\nexports.SampleBase = SampleBase;\nfunction updateSampleSection() { }\nexports.updateSampleSection = updateSampleSection;\n\n\n//# sourceURL=webpack:///./samples/pdfviewer/redaction-functional/app/sample-base.tsx?");

/***/ })

/******/ });