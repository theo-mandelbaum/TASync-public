/******/ (function(modules) { // webpackBootstrap
/******/ 	// install a JSONP callback for chunk loading
/******/ 	function webpackJsonpCallback(data) {
/******/ 		var chunkIds = data[0];
/******/ 		var moreModules = data[1];
/******/ 		var executeModules = data[2];
/******/
/******/ 		// add "moreModules" to the modules object,
/******/ 		// then flag all "chunkIds" as loaded and fire callback
/******/ 		var moduleId, chunkId, i = 0, resolves = [];
/******/ 		for(;i < chunkIds.length; i++) {
/******/ 			chunkId = chunkIds[i];
/******/ 			if(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 				resolves.push(installedChunks[chunkId][0]);
/******/ 			}
/******/ 			installedChunks[chunkId] = 0;
/******/ 		}
/******/ 		for(moduleId in moreModules) {
/******/ 			if(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {
/******/ 				modules[moduleId] = moreModules[moduleId];
/******/ 			}
/******/ 		}
/******/ 		if(parentJsonpFunction) parentJsonpFunction(data);
/******/
/******/ 		while(resolves.length) {
/******/ 			resolves.shift()();
/******/ 		}
/******/
/******/ 		// add entry modules from loaded chunk to deferred list
/******/ 		deferredModules.push.apply(deferredModules, executeModules || []);
/******/
/******/ 		// run deferred modules when all chunks ready
/******/ 		return checkDeferredModules();
/******/ 	};
/******/ 	function checkDeferredModules() {
/******/ 		var result;
/******/ 		for(var i = 0; i < deferredModules.length; i++) {
/******/ 			var deferredModule = deferredModules[i];
/******/ 			var fulfilled = true;
/******/ 			for(var j = 1; j < deferredModule.length; j++) {
/******/ 				var depId = deferredModule[j];
/******/ 				if(installedChunks[depId] !== 0) fulfilled = false;
/******/ 			}
/******/ 			if(fulfilled) {
/******/ 				deferredModules.splice(i--, 1);
/******/ 				result = __webpack_require__(__webpack_require__.s = deferredModule[0]);
/******/ 			}
/******/ 		}
/******/
/******/ 		return result;
/******/ 	}
/******/
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// object to store loaded and loading chunks
/******/ 	// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 	// Promise = chunk loading, 0 = chunk loaded
/******/ 	var installedChunks = {
/******/ 		"./samples/diagram/default-functionality-functional/app/index.min": 0
/******/ 	};
/******/
/******/ 	var deferredModules = [];
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	var jsonpArray = window["webpackJsonp"] = window["webpackJsonp"] || [];
/******/ 	var oldJsonpFunction = jsonpArray.push.bind(jsonpArray);
/******/ 	jsonpArray.push = webpackJsonpCallback;
/******/ 	jsonpArray = jsonpArray.slice();
/******/ 	for(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);
/******/ 	var parentJsonpFunction = oldJsonpFunction;
/******/
/******/
/******/ 	// add entry module to deferred list
/******/ 	deferredModules.push(["./samples/diagram/default-functionality-functional/app/index.tsx","diagrams.min"]);
/******/ 	// run deferred modules when ready
/******/ 	return checkDeferredModules();
/******/ })
/************************************************************************/
/******/ ({

/***/ "./samples/diagram/default-functionality-functional/app/index.tsx":
/*!************************************************************************!*\
  !*** ./samples/diagram/default-functionality-functional/app/index.tsx ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar client_1 = __webpack_require__(/*! react-dom/client */ \"./node_modules/react-dom/client.js\");\nvar React = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\nvar ej2_react_diagrams_1 = __webpack_require__(/*! @syncfusion/ej2-react-diagrams */ \"./node_modules/@syncfusion/ej2-react-diagrams/index.js\");\nvar sample_base_1 = __webpack_require__(/*! ./sample-base */ \"./samples/diagram/default-functionality-functional/app/sample-base.tsx\");\nvar ej2_react_navigations_1 = __webpack_require__(/*! @syncfusion/ej2-react-navigations */ \"./node_modules/@syncfusion/ej2-react-navigations/index.js\");\nvar ej2_react_splitbuttons_1 = __webpack_require__(/*! @syncfusion/ej2-react-splitbuttons */ \"./node_modules/@syncfusion/ej2-react-splitbuttons/index.js\");\nvar ej2_react_inputs_1 = __webpack_require__(/*! @syncfusion/ej2-react-inputs */ \"./node_modules/@syncfusion/ej2-react-inputs/index.js\");\n/**\n * Diagram Default sample\n */\n// Function to create nodes\nfunction createFlowNode(id, offsetX, offsetY, shape, content, height, margin) {\n    if (height === void 0) { height = 60; }\n    if (margin === void 0) { margin = null; }\n    return {\n        id: id,\n        height: height,\n        offsetX: offsetX,\n        offsetY: offsetY,\n        shape: { type: \"Flow\", shape: shape },\n        annotations: [\n            __assign({ content: content }, (margin && { margin: margin }) // Conditionally spread the margin property if it exists\n            )\n        ]\n    };\n}\n// Initializing nodes\nvar nodes = [\n    createFlowNode(\"NewIdea\", 300, 80, \"Terminator\", \"Place Order\"),\n    createFlowNode(\"Meeting\", 300, 160, \"Process\", \"Start Transaction\"),\n    createFlowNode(\"BoardDecision\", 300, 240, \"Process\", \"Verification\"),\n    createFlowNode(\"Project\", 300, 330, \"Decision\", \"Credit card valid?\"),\n    createFlowNode(\"End\", 300, 430, \"Decision\", \"Funds available?\"),\n    createFlowNode(\"Payment_method\", 545, 330, \"Process\", \"Enter payment method\"),\n    createFlowNode(\"transaction_entered\", 300, 630, \"Terminator\", \"Log transaction\"),\n    createFlowNode(\"Reconcile_entries\", 480, 630, \"Process\", \"Reconcile the entries\"),\n    createFlowNode(\"transaction_completed\", 300, 530, \"Process\", \"Complete Transaction\"),\n    createFlowNode(\"Data\", 110, 530, \"Data\", \"Send e-mail\", 45, { left: 25, right: 25 }),\n    createFlowNode(\"Database\", 475, 530, \"DirectData\", \"Customer Database\", 70, { left: 25, right: 25 }) // Custom height of 70 with margin\n];\n// Function to create connectors\nfunction createConnector(id, sourceID, targetID, annotations, type, segments, style) {\n    if (annotations === void 0) { annotations = []; }\n    if (type === void 0) { type = 'Straight'; }\n    if (segments === void 0) { segments = []; }\n    if (style === void 0) { style = {}; }\n    return {\n        id: id,\n        sourceID: sourceID,\n        targetID: targetID,\n        annotations: annotations,\n        type: type,\n        segments: segments,\n        style: style\n    };\n}\n// Initializing connectors\nvar connectors = [\n    createConnector(\"connector1\", \"NewIdea\", \"Meeting\"),\n    createConnector(\"connector2\", \"Meeting\", \"BoardDecision\"),\n    createConnector(\"connector3\", \"BoardDecision\", \"Project\"),\n    createConnector(\"connector4\", \"Project\", \"End\", [{ content: \"Yes\", style: { fill: \"white\" } }]),\n    createConnector(\"connector5\", \"End\", \"transaction_completed\", [{ content: \"Yes\", style: { fill: \"white\" } }]),\n    createConnector(\"connector6\", \"transaction_completed\", \"transaction_entered\"),\n    createConnector(\"connector7\", \"transaction_completed\", \"Data\"),\n    createConnector(\"connector8\", \"transaction_completed\", \"Database\"),\n    createConnector(\"connector9\", \"Payment_method\", \"Meeting\", [], 'Orthogonal', [{ direction: \"Top\", type: 'Orthogonal', length: 120 }]),\n    createConnector(\"connector10\", \"End\", \"Payment_method\", [{ content: \"No\", style: { fill: \"white\" } }], 'Orthogonal', [{ direction: \"Right\", type: 'Orthogonal', length: 100 }]),\n    createConnector(\"connector11\", \"Project\", \"Payment_method\", [{ content: \"No\", style: { fill: \"white\" } }]),\n    createConnector(\"connector12\", \"transaction_entered\", \"Reconcile_entries\", [], 'Straight', [], { strokeDashArray: \"2,2\" })\n];\n//Initialize the flowshapes for the symbol palatte\nvar flowshapes = [\n    { id: \"Terminator\", shape: { type: \"Flow\", shape: \"Terminator\" } },\n    { id: \"Process\", shape: { type: \"Flow\", shape: \"Process\" } },\n    { id: \"Decision\", shape: { type: \"Flow\", shape: \"Decision\" } },\n    { id: \"Document\", shape: { type: \"Flow\", shape: \"Document\" } },\n    {\n        id: \"PreDefinedProcess\",\n        shape: { type: \"Flow\", shape: \"PreDefinedProcess\" }\n    },\n    { id: \"PaperTap\", shape: { type: \"Flow\", shape: \"PaperTap\" } },\n    { id: \"DirectData\", shape: { type: \"Flow\", shape: \"DirectData\" } },\n    { id: \"SequentialData\", shape: { type: \"Flow\", shape: \"SequentialData\" } },\n    { id: \"Sort\", shape: { type: \"Flow\", shape: \"Sort\" } },\n    { id: \"MultiDocument\", shape: { type: \"Flow\", shape: \"MultiDocument\" } },\n    { id: \"Collate\", shape: { type: \"Flow\", shape: \"Collate\" } },\n    { id: \"SummingJunction\", shape: { type: \"Flow\", shape: \"SummingJunction\" } },\n    { id: \"Or\", shape: { type: \"Flow\", shape: \"Or\" } },\n    { id: \"InternalStorage\", shape: { type: \"Flow\", shape: \"InternalStorage\" } },\n    { id: \"Extract\", shape: { type: \"Flow\", shape: \"Extract\" } },\n    { id: \"ManualOperation\", shape: { type: \"Flow\", shape: \"ManualOperation\" } },\n    { id: \"Merge\", shape: { type: \"Flow\", shape: \"Merge\" } },\n    {\n        id: \"OffPageReference\",\n        shape: { type: \"Flow\", shape: \"OffPageReference\" }\n    },\n    {\n        id: \"SequentialAccessStorage\",\n        shape: { type: \"Flow\", shape: \"SequentialAccessStorage\" }\n    },\n    { id: \"Annotation\", shape: { type: \"Flow\", shape: \"Annotation\" } },\n    { id: \"Annotation2\", shape: { type: \"Flow\", shape: \"Annotation2\" } },\n    { id: \"Data\", shape: { type: \"Flow\", shape: \"Data\" } },\n    { id: \"Card\", shape: { type: \"Flow\", shape: \"Card\" } },\n    { id: \"Delay\", shape: { type: \"Flow\", shape: \"Delay\" } }\n];\n// function to create a connector symbol for the palette\nfunction paletteConnectorSymbols(id, type, targetDecoratorShape, strokeColor) {\n    if (targetDecoratorShape === void 0) { targetDecoratorShape = \"Arrow\"; }\n    if (strokeColor === void 0) { strokeColor = '#757575'; }\n    return {\n        id: id,\n        type: type,\n        sourcePoint: { x: 0, y: 0 },\n        targetPoint: { x: 60, y: 60 },\n        style: { strokeWidth: 1, strokeColor: strokeColor },\n        targetDecorator: { shape: targetDecoratorShape, style: { strokeColor: strokeColor, fill: strokeColor } }\n    };\n}\n// Initializes connector symbols for the symbol palette\nvar connectorSymbols = [\n    paletteConnectorSymbols(\"Link1\", \"Orthogonal\"),\n    paletteConnectorSymbols(\"link2\", \"Orthogonal\", \"None\"),\n    paletteConnectorSymbols(\"Link3\", \"Straight\"),\n    paletteConnectorSymbols(\"lin4\", \"Straight\", \"None\"),\n    paletteConnectorSymbols(\"link5\", \"Bezier\", \"None\")\n];\nvar interval;\ninterval = [\n    1, 9, 0.25, 9.75, 0.25,\n    9.75, 0.25, 9.75, 0.25,\n    9.75, 0.25, 9.75, 0.25,\n    9.75, 0.25, 9.75, 0.25,\n    9.75, 0.25, 9.75\n];\nvar gridlines = {\n    lineColor: \"#e0e0e0\",\n    lineIntervals: interval\n};\nvar diagramInstance;\nvar toolbarEditor;\nvar toolbarItems = [\n    { prefixIcon: 'e-icons e-circle-add', tooltipText: 'New Diagram', id: 'New_Diagram' },\n    { prefixIcon: 'e-icons e-folder-open', tooltipText: 'Open Diagram', id: 'Open_diagram' },\n    { prefixIcon: 'e-icons e-save', tooltipText: 'Save Diagram', id: 'Save' },\n    { prefixIcon: 'e-print e-icons', tooltipText: 'Print Diagram', id: 'Print' },\n    { type: 'Input', tooltipText: 'Export Diagram', template: '<button id=\"diagramexportBtn\" style=\"width:100%;\"></button>', id: 'Export' },\n    { type: 'Separator' },\n    { disabled: true, prefixIcon: 'e-cut e-icons', tooltipText: 'Cut', cssClass: 'tb-item-middle tb-item-lock-category', id: 'Cut' },\n    { disabled: true, prefixIcon: 'e-copy e-icons', tooltipText: 'Copy', cssClass: 'tb-item-middle tb-item-lock-category', id: 'Copy' },\n    { prefixIcon: 'e-icons e-paste', tooltipText: 'Paste', disabled: true, id: 'Paste' },\n    { type: 'Separator' },\n    { disabled: true, prefixIcon: 'e-icons e-undo', tooltipText: 'Undo', id: 'Undo' },\n    { disabled: true, prefixIcon: 'e-icons e-redo', tooltipText: 'Redo', id: 'Redo' },\n    { type: 'Separator', },\n    { prefixIcon: 'e-pan e-icons', tooltipText: 'Pan Tool', cssClass: 'tb-item-start pan-item', id: 'Pan_tool' },\n    { prefixIcon: 'e-mouse-pointer e-icons', tooltipText: 'Select Tool', cssClass: 'tb-item-middle tb-item-selected', id: 'Select_tool' },\n    { tooltipText: 'Change Connector Type', template: '<button id=\"conTypeBtn\" style=\"width:100%;\"></button>', cssClass: 'tb-item-middle', id: 'Draw_con' },\n    { tooltipText: 'Draw Shapes', template: '<button id=\"shapesBtn\" style=\"width:100%;\"></button>', cssClass: 'tb-item-middle', id: 'Draw_shapes' },\n    { prefixIcon: 'e-caption e-icons', tooltipText: 'Text Tool', cssClass: 'tb-item-end', id: 'Text_tool' },\n    { type: 'Separator', },\n    { disabled: true, prefixIcon: 'e-icons e-lock', tooltipText: 'Lock', cssClass: 'tb-item-middle tb-item-lock-category', id: 'Lock' },\n    { disabled: true, prefixIcon: 'e-trash e-icons', tooltipText: 'Delete', cssClass: 'tb-item-middle tb-item-lock-category', id: 'Delete' },\n    { type: 'Separator', align: 'Center' },\n    { disabled: true, type: 'Input', tooltipText: 'Align Objects', template: '<button id=\"alignBtn\" style=\"width:100%;\"></button>', cssClass: 'tb-item-middle  tb-item-align-category', id: 'Align_objects' },\n    { disabled: true, type: 'Input', tooltipText: 'Distribute Objects', template: '<button id=\"distributeBtn\" style=\"width:100%;\"></button>', cssClass: 'tb-item-middle tb-item-space-category', id: 'Distribute_objects' },\n    { type: 'Separator', },\n    { disabled: true, type: 'Input', tooltipText: 'Order Commands', template: '<button id=\"orderBtn\" style=\"width:100%;\"></button>', cssClass: 'tb-item-middle tb-item-lock-category', id: 'Order' },\n    { type: 'Separator' },\n    { disabled: true, type: 'Input', tooltipText: 'Group/Ungroup', template: '<button id=\"groupBtn\" style=\"width:100%;\"></button>', cssClass: 'tb-item-middle tb-item-align-category', id: 'Group' },\n    { type: 'Separator' },\n    { disabled: true, type: 'Input', tooltipText: 'Rotate', template: '<button id=\"rotateBtn\" style=\"width:100%;\"></button>', cssClass: 'tb-item-middle tb-item-lock-category', id: 'Rotate' },\n    { type: 'Separator' },\n    { disabled: true, type: 'Input', tooltipText: 'Flip', template: '<button id=\"flipBtn\" style=\"width:100%;\"></button>', cssClass: 'tb-item-middle tb-item-lock-category', id: 'Flip' },\n    { type: 'Separator' },\n    {\n        cssClass: 'tb-item-end tb-zoom-dropdown-btn', id: 'Zoom', template: '<button id=\"btnZoomIncrement\"></button>',\n    },\n];\nfunction Default() {\n    React.useEffect(function () {\n        (0, sample_base_1.updateSampleSection)();\n        rendereComplete();\n    }, []);\n    function rendereComplete() {\n        addEvents();\n        diagramInstance.fitToPage();\n    }\n    //Create and add ports for node.\n    function getPorts() {\n        var ports = [\n            { id: \"port1\", shape: \"Circle\", offset: { x: 0, y: 0.5 } },\n            { id: \"port2\", shape: \"Circle\", offset: { x: 0.5, y: 1 } },\n            { id: \"port3\", shape: \"Circle\", offset: { x: 1, y: 0.5 } },\n            { id: \"port4\", shape: \"Circle\", offset: { x: 0.5, y: 0 } }\n        ];\n        return ports;\n    }\n    //To handle toolbar click\n    function toolbarClick(args) {\n        var item = args.item.tooltipText;\n        switch (item) {\n            case 'Undo':\n                diagramInstance.undo();\n                break;\n            case 'Redo':\n                diagramInstance.redo();\n                break;\n            case 'Lock':\n                lockObject(args);\n                break;\n            case 'Cut':\n                diagramInstance.cut();\n                var pasteIndex = toolbarEditor.items.findIndex(function (item) { return item.id === 'Paste'; });\n                if (pasteIndex !== -1) {\n                    toolbarEditor.items[pasteIndex].disabled = false;\n                }\n                break;\n            case 'Copy':\n                diagramInstance.copy();\n                var pasteIndex = toolbarEditor.items.findIndex(function (item) { return item.id === 'Paste'; });\n                if (pasteIndex !== -1) {\n                    toolbarEditor.items[pasteIndex].disabled = false;\n                }\n                break;\n            case 'Paste':\n                diagramInstance.paste();\n                break;\n            case 'Delete':\n                diagramInstance.remove();\n                break;\n            case 'Select Tool':\n                diagramInstance.clearSelection();\n                diagramInstance.tool = ej2_react_diagrams_1.DiagramTools.Default;\n                break;\n            case 'Text Tool':\n                diagramInstance.clearSelection();\n                diagramInstance.selectedItems.userHandles = [];\n                diagramInstance.drawingObject = { shape: { type: 'Text' } };\n                diagramInstance.tool = ej2_react_diagrams_1.DiagramTools.ContinuousDraw;\n                break;\n            case 'Pan Tool':\n                diagramInstance.clearSelection();\n                diagramInstance.tool = ej2_react_diagrams_1.DiagramTools.ZoomPan;\n                break;\n            case 'New Diagram':\n                diagramInstance.clear();\n                historyChange(args);\n                break;\n            case 'Print Diagram':\n                printDiagram(args);\n                break;\n            case 'Save Diagram':\n                download(diagramInstance.saveDiagram());\n                break;\n            case 'Open Diagram':\n                document\n                    .getElementsByClassName('e-file-select-wrap')[0]\n                    .querySelector('button')\n                    .click();\n                break;\n        }\n        diagramInstance.dataBind();\n    }\n    //To print diagram \n    function printDiagram(args) {\n        var options = {\n            mode: 'Download',\n            region: 'Content',\n            multiplePage: diagramInstance.pageSettings.multiplePage,\n            pageHeight: diagramInstance.pageSettings.height,\n            pageWidth: diagramInstance.pageSettings.width,\n        };\n        diagramInstance.print(options);\n    }\n    //To enable toolbar items.\n    function enableItems() {\n        var itemIds = ['Cut', 'Copy', 'Lock', 'Delete', 'Order', 'Rotate', 'Flip'];\n        itemIds.forEach(function (itemId) {\n            var item = toolbarEditor.items.find(function (item) { return item.id === itemId; });\n            if (item) {\n                item.disabled = false;\n            }\n        });\n    }\n    //To disable toolbar items while multiselection.\n    function disableMultiselectedItems() {\n        var itemIds = ['Align_objects', 'Distribute_objects', 'Group'];\n        itemIds.forEach(function (itemId) {\n            var item = toolbarEditor.items.find(function (item) { return item.id === itemId; });\n            if (item) {\n                item.disabled = true;\n            }\n        });\n    }\n    var asyncSettings;\n    //To handle selection of connectors.\n    function onConnectorSelect(args) {\n        diagramInstance.clearSelection();\n        diagramInstance.drawingObject = { type: args.item.text };\n        diagramInstance.tool = ej2_react_diagrams_1.DiagramTools.ContinuousDraw;\n        diagramInstance.selectedItems.userHandles = [];\n        diagramInstance.dataBind();\n    }\n    //To handle selection of shapes.\n    function onShapesSelect(args) {\n        diagramInstance.clearSelection();\n        diagramInstance.drawingObject = { shape: { shape: args.item.text } };\n        diagramInstance.tool = ej2_react_diagrams_1.DiagramTools.ContinuousDraw;\n        diagramInstance.selectedItems.userHandles = [];\n        diagramInstance.dataBind();\n    }\n    //Export the diagraming object based on the format.\n    function onselectExport(args) {\n        var exportOptions = {\n            format: args.item.text,\n            mode: 'Download',\n            region: 'PageSettings',\n            fileName: 'Export',\n            margin: { left: 0, top: 0, bottom: 0, right: 0 }\n        };\n        diagramInstance.exportDiagram(exportOptions);\n    }\n    //To perform group and ungroup diagram objects.\n    function onSelectGroup(args) {\n        if (args.item.text === 'Group') {\n            diagramInstance.group();\n        }\n        else if (args.item.text === 'Ungroup') {\n            diagramInstance.unGroup();\n        }\n    }\n    //To align selelcted diagram objects.\n    function onSelectAlignObjects(args) {\n        var item = args.item.text;\n        var alignType = item.replace('Align', '');\n        var alignType1 = alignType.charAt(0).toUpperCase() + alignType.slice(1);\n        diagramInstance.align(alignType1.trim());\n    }\n    //To distribute selected objects horizontally and vertically.\n    function onSelectDistributeObjects(args) {\n        args.item.text === 'Distribute Objects Vertically'\n            ? diagramInstance.distribute('BottomToTop')\n            : diagramInstance.distribute('RightToLeft');\n    }\n    //To execute order commands\n    function onSelectOrder(args) {\n        switch (args.item.text) {\n            case 'Bring Forward':\n                diagramInstance.moveForward();\n                break;\n            case 'Bring To Front':\n                diagramInstance.bringToFront();\n                break;\n            case 'Send Backward':\n                diagramInstance.sendBackward();\n                break;\n            case 'Send To Back':\n                diagramInstance.sendToBack();\n                break;\n        }\n    }\n    //To Rotate the selected diagram objects.\n    function onSelectRotate(args) {\n        args.item.text === 'Rotate Clockwise'\n            ? diagramInstance.rotate(diagramInstance.selectedItems, 90)\n            : diagramInstance.rotate(diagramInstance.selectedItems, -90);\n    }\n    function onSelectFlip(args) {\n        flipObjects(args.item.text);\n    }\n    // To flip diagram objects\n    function flipObjects(flipType) {\n        var selectedObjects = diagramInstance.selectedItems.nodes.concat(diagramInstance.selectedItems.connectors);\n        for (var i = 0; i < selectedObjects.length; i++) {\n            selectedObjects[i].flip ^= flipType === 'Flip Horizontal' ? ej2_react_diagrams_1.FlipDirection.Horizontal : ej2_react_diagrams_1.FlipDirection.Vertical;\n        }\n        diagramInstance.dataBind();\n    }\n    //Function to download the diagram.\n    function download(data) {\n        if (window.navigator.msSaveBlob) {\n            var blob = new Blob([data], { type: 'data:text/json;charset=utf-8,' });\n            window.navigator.msSaveOrOpenBlob(blob, 'Diagram.json');\n        }\n        else {\n            var dataString = 'data:text/json;charset=utf-8,' + encodeURIComponent(data);\n            var ele = document.createElement('a');\n            ele.href = dataString;\n            ele.download = 'Diagram.json';\n            document.body.appendChild(ele);\n            ele.click();\n            ele.remove();\n        }\n    }\n    //To lock and unlock selected objects\n    function lockObject(args) {\n        var isChecked;\n        for (var i = 0; i < diagramInstance.selectedItems.nodes.length; i++) {\n            var node = diagramInstance.selectedItems.nodes[i];\n            if (node.constraints & ej2_react_diagrams_1.NodeConstraints.Drag) {\n                node.constraints = ej2_react_diagrams_1.NodeConstraints.PointerEvents | ej2_react_diagrams_1.NodeConstraints.Select | ej2_react_diagrams_1.NodeConstraints.ReadOnly;\n                isChecked = true;\n            }\n            else {\n                node.constraints = ej2_react_diagrams_1.NodeConstraints.Default;\n                isChecked = false;\n            }\n        }\n        for (var j = 0; j < diagramInstance.selectedItems.connectors.length; j++) {\n            var connector = diagramInstance.selectedItems.connectors[j];\n            if (connector.constraints & ej2_react_diagrams_1.ConnectorConstraints.Drag) {\n                connector.constraints = ej2_react_diagrams_1.ConnectorConstraints.PointerEvents | ej2_react_diagrams_1.ConnectorConstraints.Select | ej2_react_diagrams_1.ConnectorConstraints.ReadOnly;\n                isChecked = true;\n            }\n            else {\n                connector.constraints = ej2_react_diagrams_1.ConnectorConstraints.Default;\n                isChecked = false;\n            }\n        }\n        updateToolbarState(isChecked);\n        diagramInstance.dataBind();\n    }\n    // Function to update the toolbar state based on selected nodes constraints\n    function updateToolbarState(isLocked) {\n        var itemIds = ['Cut', 'Copy', 'Delete', 'Order', 'Rotate', 'Flip'];\n        itemIds.forEach(function (itemId) {\n            var item = toolbarEditor.items.find(function (item) { return item.id === itemId; });\n            if (item) {\n                item.disabled = isLocked;\n            }\n        });\n        var Index = toolbarEditor.items.findIndex(function (item) { return item.id === 'Lock'; });\n        if (Index !== -1) {\n            toolbarEditor.items[Index].disabled = false;\n        }\n    }\n    //To change diagram zoom.\n    function zoomChange(args) {\n        var zoomCurrentValue = document.getElementById(\"btnZoomIncrement\").ej2_instances[0];\n        var currentZoom = diagramInstance.scrollSettings.currentZoom;\n        var zoom = {};\n        switch (args.item.text) {\n            case 'Zoom In':\n                diagramInstance.zoomTo({ type: 'ZoomIn', zoomFactor: 0.2 });\n                zoomCurrentValue.content = (diagramInstance.scrollSettings.currentZoom * 100).toFixed() + '%';\n                break;\n            case 'Zoom Out':\n                diagramInstance.zoomTo({ type: 'ZoomOut', zoomFactor: 0.2 });\n                zoomCurrentValue.content = (diagramInstance.scrollSettings.currentZoom * 100).toFixed() + '%';\n                break;\n            case 'Zoom to Fit':\n                zoom.zoomFactor = 1 / currentZoom - 1;\n                diagramInstance.zoomTo(zoom);\n                zoomCurrentValue.content = diagramInstance.scrollSettings.currentZoom;\n                break;\n            case 'Zoom to 50%':\n                if (currentZoom === 0.5) {\n                    currentZoom = 0;\n                    zoom.zoomFactor = (0.5 / currentZoom) - 1;\n                    diagramInstance.zoomTo(zoom);\n                }\n                else {\n                    zoom.zoomFactor = (0.5 / currentZoom) - 1;\n                    diagramInstance.zoomTo(zoom);\n                }\n                break;\n            case 'Zoom to 100%':\n                if (currentZoom === 1) {\n                    currentZoom = 0;\n                    zoom.zoomFactor = (1 / currentZoom) - 1;\n                    diagramInstance.zoomTo(zoom);\n                }\n                else {\n                    zoom.zoomFactor = (1 / currentZoom) - 1;\n                    diagramInstance.zoomTo(zoom);\n                }\n                break;\n            case 'Zoom to 200%':\n                if (currentZoom === 2) {\n                    currentZoom = 0;\n                    zoom.zoomFactor = (2 / currentZoom) - 1;\n                    diagramInstance.zoomTo(zoom);\n                }\n                else {\n                    zoom.zoomFactor = (2 / currentZoom) - 1;\n                    diagramInstance.zoomTo(zoom);\n                }\n                break;\n        }\n        zoomCurrentValue.content = Math.round(diagramInstance.scrollSettings.currentZoom * 100) + ' %';\n    }\n    var isMobile;\n    function addEvents() {\n        isMobile = window.matchMedia('(max-width:550px)').matches;\n        if (isMobile) {\n            var paletteIcon = document.getElementById('palette-icon');\n            if (paletteIcon) {\n                paletteIcon.addEventListener('click', openPalette, false);\n            }\n        }\n    }\n    function openPalette() {\n        var paletteSpace = document.getElementById('palette-space');\n        isMobile = window.matchMedia('(max-width:550px)').matches;\n        if (isMobile) {\n            if (!paletteSpace.classList.contains('sb-mobile-palette-open')) {\n                paletteSpace.classList.add('sb-mobile-palette-open');\n            }\n            else {\n                paletteSpace.classList.remove('sb-mobile-palette-open');\n            }\n        }\n    }\n    //To refresh the overflow of the toolbar after a delay.\n    function refreshOverflow() {\n        setTimeout(function () {\n            toolbarEditor.refreshOverflow();\n        }, 100);\n    }\n    asyncSettings = {\n        saveUrl: 'https://ej2services.syncfusion.com/production/web-services/api/FileUploader/Save',\n        removeUrl: 'https://ej2services.syncfusion.com/production/web-services/api/FileUploader/Remove'\n    };\n    //set up uploaded file and call loadDiagram.\n    function onUploadSuccess(args) {\n        var file = args.file;\n        var rawFile = file.rawFile;\n        var reader = new FileReader();\n        reader.readAsText(rawFile);\n        reader.onloadend = loadDiagram;\n    }\n    //Load the diagraming object.\n    function loadDiagram(event) {\n        diagramInstance.loadDiagram(event.target.result);\n    }\n    //To enable and disable undo/redo button.\n    function historyChange(args) {\n        var undoItem = toolbarEditor.items.find(function (item) { return item.id === 'Undo'; });\n        if (undoItem) {\n            undoItem.disabled = diagramInstance.historyManager.undoStack.length > 0 ? false : true;\n        }\n        var redoItem = toolbarEditor.items.find(function (item) { return item.id === 'Redo'; });\n        if (redoItem) {\n            redoItem.disabled = diagramInstance.historyManager.redoStack.length > 0 ? false : true;\n        }\n    }\n    return (React.createElement(\"div\", { className: \"control-pane\" },\n        React.createElement(\"div\", { className: \"control-section\" },\n            React.createElement(\"div\", { style: { width: \"100%\" } },\n                React.createElement(\"div\", { style: { display: 'none' } },\n                    React.createElement(ej2_react_inputs_1.UploaderComponent, { id: \"fileUpload\", type: \"file\", showFileList: false, asyncSettings: asyncSettings, success: onUploadSuccess })),\n                React.createElement(\"div\", { className: \"db-toolbar-container\" },\n                    React.createElement(ej2_react_navigations_1.ToolbarComponent, { ref: function (toolbar) { return (toolbarEditor = toolbar); }, id: \"toolbar_diagram\", created: function () {\n                            if (diagramInstance !== undefined) {\n                                var conTypeBtn = new ej2_react_splitbuttons_1.DropDownButton({\n                                    items: [\n                                        { text: 'Straight', iconCss: 'e-icons e-line' },\n                                        { text: 'Orthogonal', iconCss: 'sf-diagram-icon-orthogonal' },\n                                        { text: 'Bezier', iconCss: 'sf-diagram-icon-bezier' }\n                                    ], iconCss: 'e-diagram-icons1 e-diagram-connector e-icons',\n                                    select: function (args) { onConnectorSelect(args); }\n                                });\n                                conTypeBtn.appendTo('#conTypeBtn');\n                                var btnZoomIncrement = new ej2_react_splitbuttons_1.DropDownButton({\n                                    items: [\n                                        { text: 'Zoom In' }, { text: 'Zoom Out' }, { text: 'Zoom to Fit' }, { text: 'Zoom to 50%' },\n                                        { text: 'Zoom to 100%' }, { text: 'Zoom to 200%' }\n                                    ], content: Math.round(diagramInstance.scrollSettings.currentZoom * 100) + ' %', select: zoomChange,\n                                });\n                                btnZoomIncrement.appendTo('#btnZoomIncrement');\n                                var shapesBtn = new ej2_react_splitbuttons_1.DropDownButton({\n                                    items: [\n                                        { text: 'Rectangle', iconCss: 'e-rectangle e-icons' },\n                                        { text: 'Ellipse', iconCss: ' e-circle e-icons' },\n                                        { text: 'Polygon', iconCss: 'e-line e-icons' }\n                                    ], iconCss: 'e-shapes e-icons',\n                                    select: function (args) { onShapesSelect(args); }\n                                });\n                                shapesBtn.appendTo('#shapesBtn');\n                                var exportBtn = new ej2_react_splitbuttons_1.DropDownButton({\n                                    items: [\n                                        { text: 'JPG' }, { text: 'PNG' }, { text: 'SVG' }\n                                    ], iconCss: 'e-icons e-export', select: function (args) { onselectExport(args); },\n                                });\n                                exportBtn.appendTo('#diagramexportBtn');\n                                var groupBtn = new ej2_react_splitbuttons_1.DropDownButton({\n                                    items: [\n                                        { text: 'Group', iconCss: 'e-icons e-group-1' }, { text: 'Ungroup', iconCss: 'e-icons e-ungroup-1' }\n                                    ], iconCss: 'e-icons e-group-1', select: function (args) { onSelectGroup(args); }\n                                });\n                                groupBtn.appendTo('#groupBtn');\n                                var alignBtn = new ej2_react_splitbuttons_1.DropDownButton({\n                                    items: [\n                                        { iconCss: 'sf-diagram-icon-align-left-1', text: 'Align Left', },\n                                        { iconCss: 'sf-diagram-icon-align-center-1', text: 'Align Center', },\n                                        { iconCss: 'sf-diagram-icon-align-right-1', text: 'Align Right', },\n                                        { iconCss: 'sf-diagram-icon-align-top-1', text: 'Align Top', },\n                                        { iconCss: 'sf-diagram-icon-align-middle-1', text: 'Align Middle', },\n                                        { iconCss: 'sf-diagram-icon-align-bottom-1', text: 'Align Bottom', },\n                                    ], iconCss: 'e-icons e-restart-at-1', select: function (args) { onSelectAlignObjects(args); }\n                                });\n                                alignBtn.appendTo('#alignBtn');\n                                var distributeBtn = new ej2_react_splitbuttons_1.DropDownButton({\n                                    items: [\n                                        { iconCss: 'sf-diagram-icon-distribute-horizontal', text: 'Distribute Objects Vertically', },\n                                        { iconCss: 'sf-diagram-icon-distribute-vertical', text: 'Distribute Objects Horizontally', },\n                                    ], iconCss: 'e-icons e-stroke-width', select: function (args) { onSelectDistributeObjects(args); }\n                                });\n                                distributeBtn.appendTo('#distributeBtn');\n                                var orderBtn = new ej2_react_splitbuttons_1.DropDownButton({\n                                    items: [\n                                        { iconCss: 'e-icons e-bring-forward', text: 'Bring Forward' },\n                                        { iconCss: 'e-icons e-bring-to-front', text: 'Bring To Front' },\n                                        { iconCss: 'e-icons e-send-backward', text: 'Send Backward' },\n                                        { iconCss: 'e-icons e-send-to-back', text: 'Send To Back' }\n                                    ], iconCss: 'e-icons e-order', select: function (args) { onSelectOrder(args); }\n                                });\n                                orderBtn.appendTo('#orderBtn');\n                                var rotateBtn = new ej2_react_splitbuttons_1.DropDownButton({\n                                    items: [\n                                        { iconCss: 'e-icons e-transform-right', text: 'Rotate Clockwise' },\n                                        { iconCss: 'e-icons e-transform-left', text: 'Rotate Counter-Clockwise' }\n                                    ], iconCss: 'e-icons e-repeat', select: function (args) { onSelectRotate(args); }\n                                });\n                                rotateBtn.appendTo('#rotateBtn');\n                                var flipBtn = new ej2_react_splitbuttons_1.DropDownButton({\n                                    items: [\n                                        { iconCss: 'e-icons e-flip-horizontal', text: 'Flip Horizontal' },\n                                        { iconCss: 'e-icons e-flip-vertical', text: 'Flip Vertical' }\n                                    ], iconCss: 'e-icons e-flip-horizontal', select: function (args) { onSelectFlip(args); }\n                                });\n                                flipBtn.appendTo('#flipBtn');\n                                refreshOverflow();\n                            }\n                        }, clicked: toolbarClick, items: toolbarItems, overflowMode: 'Scrollable', width: '100%' })),\n                React.createElement(\"div\", { className: \"sb-mobile-palette-bar\" },\n                    React.createElement(\"div\", { id: \"palette-icon\", style: { float: \"right\" }, className: \"e-ddb-icons1 e-toggle-palette\" })),\n                React.createElement(\"div\", { id: \"palette-space\", className: \"sb-mobile-palette\" },\n                    React.createElement(ej2_react_diagrams_1.SymbolPaletteComponent, { id: \"symbolpalette\", expandMode: \"Multiple\", palettes: [\n                            {\n                                id: \"flow\",\n                                expanded: true,\n                                symbols: flowshapes,\n                                iconCss: \"e-diagram-icons1 e-diagram-flow\",\n                                title: \"Flow Shapes\"\n                            },\n                            {\n                                id: \"connectors\",\n                                expanded: true,\n                                symbols: connectorSymbols,\n                                iconCss: \"e-diagram-icons1 e-diagram-connector\",\n                                title: \"Connectors\"\n                            }\n                        ], width: \"100%\", height: \"700px\", symbolHeight: 60, symbolWidth: 60, enableSearch: true, getNodeDefaults: function (symbol) {\n                            if (symbol.id === \"Terminator\" ||\n                                symbol.id === \"Process\" ||\n                                symbol.id === \"Delay\") {\n                                symbol.width = 80;\n                                symbol.height = 40;\n                            }\n                            else if (symbol.id === \"Decision\" ||\n                                symbol.id === \"Document\" ||\n                                symbol.id === \"PreDefinedProcess\" ||\n                                symbol.id === \"PaperTap\" ||\n                                symbol.id === \"DirectData\" ||\n                                symbol.id === \"MultiDocument\" ||\n                                symbol.id === \"Data\") {\n                                symbol.width = 50;\n                                symbol.height = 40;\n                            }\n                            else {\n                                symbol.width = 50;\n                                symbol.height = 50;\n                            }\n                            symbol.style.strokeColor = '#757575';\n                        }, symbolMargin: { left: 15, right: 15, top: 15, bottom: 15 }, getSymbolInfo: function (symbol) {\n                            return { fit: true };\n                        } })),\n                React.createElement(\"div\", { id: \"diagram-space\", className: \"sb-mobile-diagram\" },\n                    React.createElement(ej2_react_diagrams_1.DiagramComponent, { id: \"diagram\", ref: function (diagram) { return (diagramInstance = diagram); }, width: \"100%\", height: \"700px\", snapSettings: {\n                            horizontalGridlines: gridlines,\n                            verticalGridlines: gridlines\n                        }, nodes: nodes, connectors: connectors, getNodeDefaults: function (node) {\n                            if (node.width === undefined) {\n                                node.width = 145;\n                            }\n                            node.style = { fill: '#357BD2', strokeColor: 'white' };\n                            for (var i = 0; i < node.annotations.length; i++) {\n                                node.annotations[i].style = {\n                                    color: 'white',\n                                    fill: 'transparent',\n                                };\n                            }\n                            //Set ports\n                            node.ports = getPorts();\n                            return node;\n                        }, getConnectorDefaults: function (obj) {\n                            if (obj.id.indexOf(\"connector\") !== -1) {\n                                obj.targetDecorator = {\n                                    shape: \"Arrow\",\n                                    width: 10,\n                                    height: 10\n                                };\n                            }\n                        }, scrollChange: function (args) {\n                            if (args.panState !== 'Start') {\n                                var zoomCurrentValue = document.getElementById('btnZoomIncrement')\n                                    .ej2_instances[0];\n                                zoomCurrentValue.content =\n                                    Math.round(diagramInstance.scrollSettings.currentZoom * 100) + ' %';\n                            }\n                        }, historyChange: function (args) {\n                            historyChange(args);\n                        }, selectionChange: function (args) {\n                            if (args.state === 'Changed') {\n                                var selectedItems = diagramInstance.selectedItems.nodes;\n                                selectedItems = selectedItems.concat(diagramInstance.selectedItems.connectors);\n                                if (selectedItems.length === 0) {\n                                    var itemIds = ['Cut', 'Copy', 'Lock', 'Delete', 'Order', 'Rotate', 'Flip'];\n                                    itemIds.forEach(function (itemId) {\n                                        var item = toolbarEditor.items.find(function (item) { return item.id === itemId; });\n                                        if (item) {\n                                            item.disabled = true;\n                                        }\n                                    });\n                                    disableMultiselectedItems();\n                                }\n                                if (selectedItems.length === 1) {\n                                    enableItems();\n                                    disableMultiselectedItems();\n                                    if (selectedItems[0].children !== undefined && selectedItems[0].children.length > 0) {\n                                        var Index = toolbarEditor.items.findIndex(function (item) { return item.id === 'Group'; });\n                                        if (Index !== -1) {\n                                            toolbarEditor.items[Index].disabled = false;\n                                        }\n                                    }\n                                    else {\n                                        var Index = toolbarEditor.items.findIndex(function (item) { return item.id === 'Group'; });\n                                        if (Index !== -1) {\n                                            toolbarEditor.items[Index].disabled = true;\n                                        }\n                                    }\n                                }\n                                if (selectedItems.length > 1) {\n                                    enableItems();\n                                    var itemIds = ['Align_objects', 'Group'];\n                                    itemIds.forEach(function (itemId) {\n                                        var item = toolbarEditor.items.find(function (item) { return item.id === itemId; });\n                                        if (item) {\n                                            item.disabled = false;\n                                        }\n                                    });\n                                    //To enable distribute objcets when selected items length is greater than 2\n                                    if (selectedItems.length > 2) {\n                                        var Index = toolbarEditor.items.findIndex(function (item) { return item.id === 'Distribute_objects'; });\n                                        if (Index !== -1) {\n                                            toolbarEditor.items[Index].disabled = false;\n                                        }\n                                    }\n                                    else {\n                                        var Index = toolbarEditor.items.findIndex(function (item) { return item.id === 'Distribute_objects'; });\n                                        if (Index !== -1) {\n                                            toolbarEditor.items[Index].disabled = true;\n                                        }\n                                    }\n                                }\n                            }\n                        }, \n                        //Sets the Node style for DragEnter element.\n                        dragEnter: function (args) {\n                            var obj = args.element;\n                            if (obj instanceof ej2_react_diagrams_1.Node) {\n                                var objWidth = obj.width;\n                                var objHeight = obj.height;\n                                var ratio = 100 / obj.width;\n                                obj.width = 100;\n                                obj.height *= ratio;\n                                obj.offsetX += (obj.width - objWidth) / 2;\n                                obj.offsetY += (obj.height - objHeight) / 2;\n                                obj.style = { fill: \"#357BD2\", strokeColor: \"white\" };\n                            }\n                        } },\n                        React.createElement(ej2_react_diagrams_1.Inject, { services: [ej2_react_diagrams_1.PrintAndExport, ej2_react_diagrams_1.UndoRedo] })))))));\n}\nexports.default = Default;\nvar root = (0, client_1.createRoot)(document.getElementById('sample'));\nroot.render(React.createElement(Default, null));\n\n\n//# sourceURL=webpack:///./samples/diagram/default-functionality-functional/app/index.tsx?");

/***/ }),

/***/ "./samples/diagram/default-functionality-functional/app/sample-base.tsx":
/*!******************************************************************************!*\
  !*** ./samples/diagram/default-functionality-functional/app/sample-base.tsx ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.updateSampleSection = exports.SampleBase = void 0;\nvar React = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\nvar ej2_base_1 = __webpack_require__(/*! @syncfusion/ej2-base */ \"./node_modules/@syncfusion/ej2-base/index.js\");\n(0, ej2_base_1.enableRipple)(window.ripple);\nvar SampleBase = /** @class */ (function (_super) {\n    __extends(SampleBase, _super);\n    function SampleBase() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    SampleBase.prototype.rendereComplete = function () {\n        /**custom render complete function */\n    };\n    SampleBase.prototype.componentDidMount = function () {\n        var _this = this;\n        setTimeout(function () {\n            _this.rendereComplete();\n        });\n    };\n    return SampleBase;\n}(React.PureComponent));\nexports.SampleBase = SampleBase;\nfunction updateSampleSection() { }\nexports.updateSampleSection = updateSampleSection;\n\n\n//# sourceURL=webpack:///./samples/diagram/default-functionality-functional/app/sample-base.tsx?");

/***/ })

/******/ });