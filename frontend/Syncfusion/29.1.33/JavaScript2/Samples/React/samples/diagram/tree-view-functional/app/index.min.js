/******/ (function(modules) { // webpackBootstrap
/******/ 	// install a JSONP callback for chunk loading
/******/ 	function webpackJsonpCallback(data) {
/******/ 		var chunkIds = data[0];
/******/ 		var moreModules = data[1];
/******/ 		var executeModules = data[2];
/******/
/******/ 		// add "moreModules" to the modules object,
/******/ 		// then flag all "chunkIds" as loaded and fire callback
/******/ 		var moduleId, chunkId, i = 0, resolves = [];
/******/ 		for(;i < chunkIds.length; i++) {
/******/ 			chunkId = chunkIds[i];
/******/ 			if(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 				resolves.push(installedChunks[chunkId][0]);
/******/ 			}
/******/ 			installedChunks[chunkId] = 0;
/******/ 		}
/******/ 		for(moduleId in moreModules) {
/******/ 			if(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {
/******/ 				modules[moduleId] = moreModules[moduleId];
/******/ 			}
/******/ 		}
/******/ 		if(parentJsonpFunction) parentJsonpFunction(data);
/******/
/******/ 		while(resolves.length) {
/******/ 			resolves.shift()();
/******/ 		}
/******/
/******/ 		// add entry modules from loaded chunk to deferred list
/******/ 		deferredModules.push.apply(deferredModules, executeModules || []);
/******/
/******/ 		// run deferred modules when all chunks ready
/******/ 		return checkDeferredModules();
/******/ 	};
/******/ 	function checkDeferredModules() {
/******/ 		var result;
/******/ 		for(var i = 0; i < deferredModules.length; i++) {
/******/ 			var deferredModule = deferredModules[i];
/******/ 			var fulfilled = true;
/******/ 			for(var j = 1; j < deferredModule.length; j++) {
/******/ 				var depId = deferredModule[j];
/******/ 				if(installedChunks[depId] !== 0) fulfilled = false;
/******/ 			}
/******/ 			if(fulfilled) {
/******/ 				deferredModules.splice(i--, 1);
/******/ 				result = __webpack_require__(__webpack_require__.s = deferredModule[0]);
/******/ 			}
/******/ 		}
/******/
/******/ 		return result;
/******/ 	}
/******/
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// object to store loaded and loading chunks
/******/ 	// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 	// Promise = chunk loading, 0 = chunk loaded
/******/ 	var installedChunks = {
/******/ 		"./samples/diagram/tree-view-functional/app/index.min": 0
/******/ 	};
/******/
/******/ 	var deferredModules = [];
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	var jsonpArray = window["webpackJsonp"] = window["webpackJsonp"] || [];
/******/ 	var oldJsonpFunction = jsonpArray.push.bind(jsonpArray);
/******/ 	jsonpArray.push = webpackJsonpCallback;
/******/ 	jsonpArray = jsonpArray.slice();
/******/ 	for(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);
/******/ 	var parentJsonpFunction = oldJsonpFunction;
/******/
/******/
/******/ 	// add entry module to deferred list
/******/ 	deferredModules.push(["./samples/diagram/tree-view-functional/app/index.tsx","diagrams.min"]);
/******/ 	// run deferred modules when ready
/******/ 	return checkDeferredModules();
/******/ })
/************************************************************************/
/******/ ({

/***/ "./samples/diagram/tree-view-functional/app/index.tsx":
/*!************************************************************!*\
  !*** ./samples/diagram/tree-view-functional/app/index.tsx ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar client_1 = __webpack_require__(/*! react-dom/client */ \"./node_modules/react-dom/client.js\");\nvar React = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\nvar ej2_react_diagrams_1 = __webpack_require__(/*! @syncfusion/ej2-react-diagrams */ \"./node_modules/@syncfusion/ej2-react-diagrams/index.js\");\nvar sample_base_1 = __webpack_require__(/*! ./sample-base */ \"./samples/diagram/tree-view-functional/app/sample-base.tsx\");\nvar ej2_data_1 = __webpack_require__(/*! @syncfusion/ej2-data */ \"./node_modules/@syncfusion/ej2-data/index.js\");\nvar ej2_react_buttons_1 = __webpack_require__(/*! @syncfusion/ej2-react-buttons */ \"./node_modules/@syncfusion/ej2-react-buttons/index.js\");\nvar ej2_react_navigations_1 = __webpack_require__(/*! @syncfusion/ej2-react-navigations */ \"./node_modules/@syncfusion/ej2-react-navigations/index.js\");\nvar diagramInstance;\n//Collection of working data\nvar workingData = [\n    { Name: 'Plant Manager', Id: '1', hasChild: true, expanded: true },\n    {\n        Name: 'Production Manager',\n        Id: '2',\n        ParentId: '1',\n        hasChild: true,\n        expanded: true,\n    },\n    {\n        Name: 'Control Room',\n        Id: '3',\n        ParentId: '2',\n        hasChild: true,\n        expanded: true,\n    },\n    { Name: 'Foreman1', Id: '4', ParentId: '3', hasChild: true, expanded: true },\n    { Name: 'Craft Personnel5', Id: '5', ParentId: '4' },\n    { Name: 'Craft Personnel6', Id: '6', ParentId: '4' },\n    {\n        Name: 'Plant Operator',\n        Id: '7',\n        ParentId: '2',\n        hasChild: true,\n        expanded: true,\n    },\n    { Name: 'Foreman2', Id: '8', ParentId: '7', hasChild: true, expanded: true },\n    { Name: 'Craft Personnel7', Id: '9', ParentId: '8' },\n    { Name: 'Administrative Officer', Id: '10', ParentId: '1' },\n    {\n        Name: 'Maintenance Manager',\n        Id: '11',\n        ParentId: '1',\n        hasChild: true,\n        expanded: true,\n    },\n    {\n        Name: 'Electrical Supervisor',\n        Id: '12',\n        ParentId: '11',\n        hasChild: true,\n        expanded: true,\n    },\n    { Name: 'Craft Personnel1', Id: '13', ParentId: '12' },\n    { Name: 'Craft Personnel2', Id: '14', ParentId: '12' },\n    {\n        Name: 'Mechanical Supervisor',\n        Id: '15',\n        ParentId: '11',\n        hasChild: true,\n        expanded: true,\n    },\n    { Name: 'Craft Personnel3', Id: '16', ParentId: '15' },\n    { Name: 'Craft Personnel4', Id: '17', ParentId: '15' },\n];\nvar items = new ej2_data_1.DataManager(workingData, new ej2_data_1.Query().take(7));\nfunction TreeViewSample() {\n    React.useEffect(function () {\n        (0, sample_base_1.updateSampleSection)();\n    }, []);\n    var index = 1;\n    var deleteButton;\n    var addButton;\n    var treeObj;\n    var targetNodeId;\n    var elementNodeId;\n    var fields = {\n        dataSource: workingData,\n        id: 'Id',\n        text: 'Name',\n        parentID: 'ParentId',\n        hasChildren: 'hasChild',\n    };\n    //add function\n    function add() {\n        var nodeId;\n        if (diagramInstance.selectedItems.nodes.length > 0) {\n            nodeId = diagramInstance.selectedItems.nodes[0].id;\n            addNode(nodeId);\n        }\n        else if (treeObj.selectedNodes.length > 0) {\n            nodeId = treeObj.selectedNodes[0];\n            addNode(nodeId);\n        }\n    }\n    //remove function\n    function remove() {\n        var nodeId;\n        if (diagramInstance.selectedItems.nodes.length > 0) {\n            nodeId = diagramInstance.selectedItems.nodes[0].id;\n            removeSubChild(diagramInstance.selectedItems.nodes[0], true);\n            diagramInstance.doLayout();\n        }\n        else if (treeObj.selectedNodes.length > 0) {\n            nodeId = treeObj.selectedNodes[0];\n            treeObj.removeNodes([nodeId]);\n            var node = diagramInstance.getObject(nodeId);\n            removeSubChild(node, false);\n        }\n        for (var i = workingData.length - 1; i >= 0; i--) {\n            if (workingData[i].id === nodeId) {\n                workingData.splice(i, 1);\n            }\n        }\n        diagramInstance.doLayout();\n    }\n    //remove sub child function\n    function removeSubChild(node, canDelete) {\n        var childNode;\n        var connector;\n        for (var i = node.outEdges.length - 1; i >= 0; i--) {\n            connector = diagramInstance.getObject(node.outEdges[i]);\n            childNode = diagramInstance.getObject(connector.targetID);\n            if (childNode != null && childNode.outEdges.length > 0) {\n                removeSubChild(childNode, canDelete);\n            }\n            else {\n                diagramInstance.remove(childNode);\n                if (canDelete) {\n                    treeObj.removeNodes([childNode.id]);\n                }\n                for (var j = workingData.length - 1; j >= 0; j--) {\n                    if (workingData[j].id === childNode.id) {\n                        workingData.splice(j, 1);\n                    }\n                }\n            }\n        }\n        for (var k = node.inEdges.length - 1; k >= 0; k--) {\n            var connector_1 = diagramInstance.getObject(node.inEdges[k]);\n            var childNode_1 = diagramInstance.getObject(connector_1.sourceID);\n            var index_1 = childNode_1.outEdges.indexOf(connector_1.id);\n            if (childNode_1.outEdges.length > 1 && index_1 === 0) {\n                index_1 = childNode_1.outEdges.length;\n            }\n            if (index_1 > 0) {\n                var node1 = childNode_1.outEdges[index_1 - 1];\n                var connector1 = diagramInstance.getObject(node1);\n                var node2 = diagramInstance.getObject(connector1.targetID);\n                diagramInstance.select([node2]);\n            }\n            else {\n                diagramInstance.select([childNode_1]);\n            }\n        }\n        diagramInstance.remove(node);\n        if (canDelete) {\n            treeObj.removeNodes([node.id]);\n        }\n        for (var t = workingData.length - 1; t >= 0; t--) {\n            if (workingData[t].id === node.id) {\n                workingData.splice(t, 1);\n            }\n        }\n    }\n    //filter Node Data Function\n    function filterNodeData(a) {\n        return a.data.Id === targetNodeId;\n    }\n    //add Node Function\n    function addNode(nodeId) {\n        targetNodeId = nodeId ? nodeId : treeObj.selectedNodes[0];\n        var tempData = workingData.filter(checkData);\n        tempData[0].hasChild = true;\n        tempData[0].expanded = true;\n        var id = 'tree_' + index;\n        var item = {\n            Name: 'Node',\n            Id: id,\n            ParentId: targetNodeId,\n            hasChild: false,\n            expanded: false,\n        };\n        treeObj.addNodes([item], targetNodeId, null);\n        treeObj.beginEdit(id);\n        var node = { id: id, data: item };\n        var targetId;\n        if (diagramInstance.selectedItems.nodes.length > 0) {\n            targetId = diagramInstance.selectedItems.nodes[0].id;\n        }\n        else {\n            var temp = diagramInstance.nodes.filter(filterNodeData);\n            targetId = temp[0].id;\n        }\n        var connector = { sourceID: targetId, targetID: id };\n        diagramInstance.add(node);\n        diagramInstance.add(connector);\n        diagramInstance.doLayout();\n        index++;\n        workingData.push(item);\n    }\n    //node selected event\n    function nodeSelected(args) {\n        deleteButton.disabled = false;\n        addButton.disabled = false;\n    }\n    //node click event\n    function nodeClicked(args) {\n        var node = diagramInstance.getObject(treeObj.selectedNodes[0]);\n        diagramInstance.select([node]);\n    }\n    // Key Press Event\n    function keyPress(args) {\n        if (args.event.key === 'Enter') {\n            add();\n        }\n    }\n    //node edited event\n    function nodeEdited(args) {\n        var node = diagramInstance.getObject(args.nodeData.id);\n        node.annotations[0].content = args.newText;\n        treeObj.selectedNodes = [args.nodeData.id];\n    }\n    //check data function\n    function checkData(a) {\n        return a.Id === targetNodeId;\n    }\n    //check element data function\n    function checkElementData(a) {\n        return a.Id === elementNodeId;\n    }\n    //Initially disable add node button\n    function initialAddButton() {\n        addButton.disabled = true;\n    }\n    //Initially disable delete node button\n    function initialDeleteButton() {\n        deleteButton.disabled = true;\n    }\n    return (React.createElement(\"div\", { className: \"control-pane\" },\n        React.createElement(\"div\", { className: \"control-section row uploadpreview\" },\n            React.createElement(\"div\", { style: { width: '100%', height: '50px', marginBottom: '5px' } },\n                React.createElement(\"div\", { className: \"group-button\", style: { width: '70%', float: 'left' } },\n                    React.createElement(ej2_react_buttons_1.ButtonComponent, { ref: function (scope) {\n                            addButton = scope;\n                        }, isPrimary: true, created: initialAddButton, onClick: add }, \"Add Node\"),\n                    React.createElement(ej2_react_buttons_1.ButtonComponent, { ref: function (scope) {\n                            deleteButton = scope;\n                        }, created: initialDeleteButton, isPrimary: true, onClick: remove }, \"Delete Node\")),\n                React.createElement(\"div\", { style: { width: '30%', float: 'right', fontSize: '16px' } },\n                    React.createElement(\"div\", { className: \"col-xs-9 db-col-right db-prop-text-style\", style: { paddingTop: '10px' } },\n                        React.createElement(\"span\", { style: { marginLeft: '10px' } }, \"Diagram Binding with Treeview\")),\n                    React.createElement(\"div\", { className: \"col-xs-3 db-col-left\" },\n                        React.createElement(\"svg\", { height: \"45\", width: \"47\" },\n                            React.createElement(\"path\", { d: \"M27.573,21.885726 C26.039659,21.885726 24.796639,23.128786 24.796639,24.662178 L24.796639,37.3311 C24.796639,38.864491 26.039659,40.107552 27.573,40.107552 L40.064701,40.107552 C41.598042,40.107552 42.841061,38.864491 42.841061,37.3311 L42.841061,24.662178 C42.841061,23.128786 41.598042,21.885726 40.064701,21.885726 z M3.9060001,2.3436508 C2.9710598,2.3436508 2.2131386,3.1015863 2.2131386,4.0365477 L2.2131386,11.76122 C2.2131386,12.69618 2.9710598,13.454117 3.9060001,13.454117 L11.522699,13.454117 C12.457641,13.454117 13.21556,12.69618 13.21556,11.76122 L13.21556,4.0365477 C13.21556,3.1015863 12.457641,2.3436508 11.522699,2.3436508 z M2.7341995,0 L12.8898,0 C14.399857,0 15.624,1.2241688 15.624,2.7342587 L15.624,12.737741 C15.624,14.247831 14.399857,15.472 12.8898,15.472 L8.75,15.472 8.75,29.653 21.167,29.653 21.167,22.526347 C21.167,20.049711 23.174645,18.042 25.6512,18.042 L42.306801,18.042 C44.783356,18.042 46.791,20.049711 46.791,22.526347 L46.791,38.932653 C46.791,41.40929 44.783356,43.417 42.306801,43.417 L25.6512,43.417 C23.174645,43.417 21.167,41.40929 21.167,38.932653 L21.167,32.403 7.3190002,32.403 C6.5596085,32.403 5.9440002,31.787392 5.9440002,31.028 5.9440002,30.933076 5.953619,30.840399 5.9719353,30.75089 L6,30.641743 6,15.472 2.7341995,15.472 C1.2241421,15.472 0,14.247831 0,12.737741 L0,2.7342587 C0,1.2241688 1.2241421,0 2.7341995,0 z\", fill: \"#FF8FABCA\" }))))),\n            React.createElement(\"div\", { className: \"content-wrapper\", style: { width: '100%' } },\n                React.createElement(\"div\", { id: \"palette-space\", style: {\n                        width: '27%',\n                        float: 'left',\n                        height: '700px',\n                        overflow: 'hidden',\n                    } },\n                    React.createElement(\"div\", { id: \"tree\", style: { width: '90%' } },\n                        React.createElement(ej2_react_navigations_1.TreeViewComponent, { fields: fields, ref: function (treeview) {\n                                treeObj = treeview;\n                            }, allowEditing: true, keyPress: keyPress, nodeEdited: nodeEdited, nodeSelected: nodeSelected, allowDragAndDrop: true, nodeClicked: nodeClicked }))),\n                React.createElement(\"div\", { id: \"diagram-space\", style: { width: '72%', float: 'right' } },\n                    React.createElement(ej2_react_diagrams_1.DiagramComponent, { id: \"diagram\", ref: function (diagram) { return (diagramInstance = diagram); }, width: '100%', height: '700px', snapSettings: { constraints: ej2_react_diagrams_1.SnapConstraints.None }, dataSourceSettings: {\n                            id: 'Id',\n                            parentId: 'ParentId',\n                            dataSource: items,\n                            doBinding: function (nodeModel, data, diagram) {\n                                nodeModel.id = data.Id;\n                            },\n                        }, layout: {\n                            type: 'HierarchicalTree',\n                            verticalSpacing: 50,\n                            horizontalSpacing: 40,\n                        }, getNodeDefaults: function (node) {\n                            node.width = 100;\n                            node.height = 40;\n                            node.style = {\n                                strokeWidth: 1,\n                                strokeColor: 'whitesmoke',\n                                fill: 'CornflowerBlue',\n                            };\n                            node.annotations = [\n                                { content: node.data.Name, style: { color: 'white' } },\n                            ];\n                            node.constraints =\n                                ej2_react_diagrams_1.NodeConstraints.Default | ej2_react_diagrams_1.NodeConstraints.AllowDrop;\n                            return node;\n                        }, getConnectorDefaults: function (obj) {\n                            obj.type = 'Orthogonal';\n                            obj.style = { strokeColor: 'CornflowerBlue' };\n                            obj.targetDecorator = {\n                                shape: 'Arrow',\n                                height: 10,\n                                width: 10,\n                                style: { fill: 'CornflowerBlue', strokeColor: 'white' },\n                            };\n                        }, selectionChange: function (args) {\n                            if (args.state === 'Changed') {\n                                if (args.type === 'Addition') {\n                                    deleteButton.disabled = false;\n                                    addButton.disabled = false;\n                                }\n                                else {\n                                    deleteButton.disabled = true;\n                                    addButton.disabled = true;\n                                }\n                                var selectedItems = diagramInstance.selectedItems.nodes.concat(diagramInstance.selectedItems.connectors);\n                                if (selectedItems.length == 0) {\n                                    treeObj.selectedNodes = [];\n                                }\n                            }\n                        }, click: function (args) {\n                            if (args.element instanceof ej2_react_diagrams_1.Node) {\n                                treeObj.selectedNodes = [args.element.data.Id];\n                            }\n                        }, textEdit: function (args) {\n                            setTimeout(function () {\n                                if (args.annotation) {\n                                    elementNodeId = args.element.id;\n                                    var tempData = workingData.filter(checkElementData);\n                                    var node = treeObj.getNode(tempData[0].Id);\n                                    treeObj.updateNode(tempData[0].Id, args.annotation.content);\n                                }\n                            }, 0);\n                        }, drop: function (args) {\n                            var connector;\n                            var tempData;\n                            setTimeout(function () {\n                                targetNodeId = args.target.id;\n                                tempData = workingData.filter(checkData);\n                                if (tempData.length > 0) {\n                                    tempData[0].hasChild = true;\n                                    tempData[0].expanded = true;\n                                }\n                                if (args.element.inEdges.length === 0) {\n                                    var id = args.element.id;\n                                    var item = {\n                                        Name: args.element.annotations[0].content,\n                                        Id: args.element.id,\n                                        ParentId: targetNodeId,\n                                        hasChild: false,\n                                        expanded: false,\n                                    };\n                                    treeObj.addNodes([item], targetNodeId, null);\n                                    connector = { sourceID: targetNodeId, targetID: id };\n                                    diagramInstance.add(connector);\n                                    diagramInstance.doLayout();\n                                    index++;\n                                    workingData.push(item);\n                                }\n                                else {\n                                    connector = diagramInstance.getObject(args.element.inEdges[0]);\n                                    connector.sourceID = targetNodeId;\n                                    diagramInstance.dataBind();\n                                    diagramInstance.doLayout();\n                                    elementNodeId = args.element.id;\n                                    tempData = workingData.filter(checkElementData);\n                                    tempData[0].ParentId = targetNodeId;\n                                    treeObj.fields = {\n                                        dataSource: workingData,\n                                        id: 'Id',\n                                        text: 'Name',\n                                        parentID: 'ParentId',\n                                        hasChildren: 'hasChild',\n                                    };\n                                    treeObj.refresh();\n                                }\n                            }, 0);\n                        }, dragEnter: function (args) {\n                            var label = '';\n                            if (args.dragData) {\n                                label = args.dragData.text;\n                            }\n                            var node = {\n                                id: 'node' + index,\n                                data: { Name: label, Id: 'node' + index },\n                                annotations: [{ content: label }],\n                            };\n                            args.dragItem = node;\n                        } },\n                        React.createElement(ej2_react_diagrams_1.Inject, { services: [ej2_react_diagrams_1.UndoRedo, ej2_react_diagrams_1.DataBinding, ej2_react_diagrams_1.HierarchicalTree] })))))));\n}\nexports.default = TreeViewSample;\nvar root = (0, client_1.createRoot)(document.getElementById('sample'));\nroot.render(React.createElement(TreeViewSample, null));\n\n\n//# sourceURL=webpack:///./samples/diagram/tree-view-functional/app/index.tsx?");

/***/ }),

/***/ "./samples/diagram/tree-view-functional/app/sample-base.tsx":
/*!******************************************************************!*\
  !*** ./samples/diagram/tree-view-functional/app/sample-base.tsx ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.updateSampleSection = exports.SampleBase = void 0;\nvar React = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\nvar ej2_base_1 = __webpack_require__(/*! @syncfusion/ej2-base */ \"./node_modules/@syncfusion/ej2-base/index.js\");\n(0, ej2_base_1.enableRipple)(window.ripple);\nvar SampleBase = /** @class */ (function (_super) {\n    __extends(SampleBase, _super);\n    function SampleBase() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    SampleBase.prototype.rendereComplete = function () {\n        /**custom render complete function */\n    };\n    SampleBase.prototype.componentDidMount = function () {\n        var _this = this;\n        setTimeout(function () {\n            _this.rendereComplete();\n        });\n    };\n    return SampleBase;\n}(React.PureComponent));\nexports.SampleBase = SampleBase;\nfunction updateSampleSection() { }\nexports.updateSampleSection = updateSampleSection;\n\n\n//# sourceURL=webpack:///./samples/diagram/tree-view-functional/app/sample-base.tsx?");

/***/ })

/******/ });