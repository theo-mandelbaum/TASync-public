/******/ (function(modules) { // webpackBootstrap
/******/ 	// install a JSONP callback for chunk loading
/******/ 	function webpackJsonpCallback(data) {
/******/ 		var chunkIds = data[0];
/******/ 		var moreModules = data[1];
/******/ 		var executeModules = data[2];
/******/
/******/ 		// add "moreModules" to the modules object,
/******/ 		// then flag all "chunkIds" as loaded and fire callback
/******/ 		var moduleId, chunkId, i = 0, resolves = [];
/******/ 		for(;i < chunkIds.length; i++) {
/******/ 			chunkId = chunkIds[i];
/******/ 			if(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 				resolves.push(installedChunks[chunkId][0]);
/******/ 			}
/******/ 			installedChunks[chunkId] = 0;
/******/ 		}
/******/ 		for(moduleId in moreModules) {
/******/ 			if(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {
/******/ 				modules[moduleId] = moreModules[moduleId];
/******/ 			}
/******/ 		}
/******/ 		if(parentJsonpFunction) parentJsonpFunction(data);
/******/
/******/ 		while(resolves.length) {
/******/ 			resolves.shift()();
/******/ 		}
/******/
/******/ 		// add entry modules from loaded chunk to deferred list
/******/ 		deferredModules.push.apply(deferredModules, executeModules || []);
/******/
/******/ 		// run deferred modules when all chunks ready
/******/ 		return checkDeferredModules();
/******/ 	};
/******/ 	function checkDeferredModules() {
/******/ 		var result;
/******/ 		for(var i = 0; i < deferredModules.length; i++) {
/******/ 			var deferredModule = deferredModules[i];
/******/ 			var fulfilled = true;
/******/ 			for(var j = 1; j < deferredModule.length; j++) {
/******/ 				var depId = deferredModule[j];
/******/ 				if(installedChunks[depId] !== 0) fulfilled = false;
/******/ 			}
/******/ 			if(fulfilled) {
/******/ 				deferredModules.splice(i--, 1);
/******/ 				result = __webpack_require__(__webpack_require__.s = deferredModule[0]);
/******/ 			}
/******/ 		}
/******/
/******/ 		return result;
/******/ 	}
/******/
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// object to store loaded and loading chunks
/******/ 	// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 	// Promise = chunk loading, 0 = chunk loaded
/******/ 	var installedChunks = {
/******/ 		"./samples/diagram/swim-lane/app/index.min": 0
/******/ 	};
/******/
/******/ 	var deferredModules = [];
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	var jsonpArray = window["webpackJsonp"] = window["webpackJsonp"] || [];
/******/ 	var oldJsonpFunction = jsonpArray.push.bind(jsonpArray);
/******/ 	jsonpArray.push = webpackJsonpCallback;
/******/ 	jsonpArray = jsonpArray.slice();
/******/ 	for(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);
/******/ 	var parentJsonpFunction = oldJsonpFunction;
/******/
/******/
/******/ 	// add entry module to deferred list
/******/ 	deferredModules.push(["./samples/diagram/swim-lane/app/index.tsx","diagrams.min"]);
/******/ 	// run deferred modules when ready
/******/ 	return checkDeferredModules();
/******/ })
/************************************************************************/
/******/ ({

/***/ "./samples/diagram/swim-lane/app/index.tsx":
/*!*************************************************!*\
  !*** ./samples/diagram/swim-lane/app/index.tsx ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SwimLane = void 0;\nvar client_1 = __webpack_require__(/*! react-dom/client */ \"./node_modules/react-dom/client.js\");\nvar React = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\nvar ej2_react_diagrams_1 = __webpack_require__(/*! @syncfusion/ej2-react-diagrams */ \"./node_modules/@syncfusion/ej2-react-diagrams/index.js\");\nvar sample_base_1 = __webpack_require__(/*! ./sample-base */ \"./samples/diagram/swim-lane/app/sample-base.tsx\");\n/**\n * Diagram swimlane sample\n */\nvar diagram;\nvar paletteIconInstance;\nvar paletteSpaceInstance;\nvar pathData = 'M 120 24.9999 C 120 38.8072 109.642 50 96.8653 50 L 23.135' +\n    ' 50 C 10.3578 50 0 38.8072 0 24.9999 L 0 24.9999 C' +\n    '0 11.1928 10.3578 0 23.135 0 L 96.8653 0 C 109.642 0 120 11.1928 120 24.9999 Z';\n//Create and add ports for the node.\nvar port = [\n    { id: 'Port1', offset: { x: 0, y: 0.5 }, visibility: ej2_react_diagrams_1.PortVisibility.Connect | ej2_react_diagrams_1.PortVisibility.Hover, constraints: ej2_react_diagrams_1.PortConstraints.Default | ej2_react_diagrams_1.PortConstraints.Draw },\n    { id: 'Port2', offset: { x: 0.5, y: 0 }, visibility: ej2_react_diagrams_1.PortVisibility.Connect | ej2_react_diagrams_1.PortVisibility.Hover, constraints: ej2_react_diagrams_1.PortConstraints.Default | ej2_react_diagrams_1.PortConstraints.Draw },\n    { id: 'Port3', offset: { x: 1, y: 0.5 }, visibility: ej2_react_diagrams_1.PortVisibility.Connect | ej2_react_diagrams_1.PortVisibility.Hover, constraints: ej2_react_diagrams_1.PortConstraints.Default | ej2_react_diagrams_1.PortConstraints.Draw },\n    { id: 'Port4', offset: { x: 0.5, y: 1 }, visibility: ej2_react_diagrams_1.PortVisibility.Connect | ej2_react_diagrams_1.PortVisibility.Hover, constraints: ej2_react_diagrams_1.PortConstraints.Default | ej2_react_diagrams_1.PortConstraints.Draw }\n];\nvar SAMPLE_CSS = \".diagram-Swimlane .sb-mobile-palette {\\n  width: 195px;\\n            height: 559px;\\n            float: left;\\n}\\n #palette-space {\\n  border: 1px solid rgba(0, 0, 0, 0.12);\\n}\";\n//Initializes nodes for the diagram.\nvar nodes = [\n    {\n        id: 'swimlane',\n        shape: {\n            type: 'SwimLane',\n            orientation: 'Horizontal',\n            header: {\n                annotation: { content: 'SALES PROCESS FLOW CHART', style: { fill: 'transparent' } },\n                height: 50, style: { fontSize: 11 },\n            },\n            lanes: [\n                {\n                    id: 'stackCanvas1',\n                    header: {\n                        annotation: { content: 'Consumer' }, width: 50,\n                        style: { fontSize: 11 }\n                    },\n                    height: 100,\n                    children: [\n                        {\n                            id: 'node1',\n                            annotations: [\n                                {\n                                    content: 'Consumer learns \\n of product',\n                                    style: { fontSize: 11 }\n                                }\n                            ],\n                            margin: { left: 60, top: 30 },\n                            height: 40, width: 100, ports: port\n                        },\n                        {\n                            id: 'node2',\n                            shape: { type: 'Flow', shape: 'Decision' },\n                            annotations: [\n                                {\n                                    content: 'Does \\n Consumer want \\nthe product',\n                                    style: { fontSize: 11 }\n                                }\n                            ],\n                            margin: { left: 200, top: 20 },\n                            height: 60, width: 120, ports: port\n                        },\n                        {\n                            id: 'node3',\n                            annotations: [\n                                {\n                                    content: 'No sales lead',\n                                    style: { fontSize: 11 }\n                                }\n                            ],\n                            margin: { left: 370, top: 30 }, shape: { type: 'Path', data: pathData },\n                            height: 40, width: 100, ports: port\n                        },\n                        {\n                            id: 'node4',\n                            annotations: [\n                                {\n                                    content: 'Sell to consumer',\n                                    style: { fontSize: 11 }\n                                }\n                            ],\n                            margin: { left: 510, top: 30 },\n                            height: 40, width: 100, ports: port\n                        }\n                    ],\n                },\n                {\n                    id: 'stackCanvas2',\n                    header: {\n                        annotation: { content: 'Marketing' }, width: 50,\n                        style: { fontSize: 11 }\n                    },\n                    height: 100,\n                    children: [\n                        {\n                            id: 'node5',\n                            annotations: [{ content: 'Create marketing campaigns' }],\n                            margin: { left: 60, top: 20 },\n                            height: 40, width: 100, ports: port\n                        },\n                        {\n                            id: 'node6',\n                            annotations: [{ content: 'Marketing finds sales leads' }],\n                            margin: { left: 210, top: 20 },\n                            height: 40, width: 100, ports: port\n                        }\n                    ],\n                },\n                {\n                    id: 'stackCanvas3',\n                    header: {\n                        annotation: { content: 'Sales' }, width: 50,\n                        style: { fontSize: 11 }\n                    },\n                    height: 100,\n                    children: [\n                        {\n                            id: 'node7',\n                            annotations: [{ content: 'Sales receives lead' }],\n                            margin: { left: 210, top: 30 },\n                            height: 40, width: 100, ports: port\n                        }\n                    ],\n                },\n                {\n                    id: 'stackCanvas4',\n                    header: {\n                        annotation: { content: 'Success' }, width: 50,\n                        style: { fontSize: 11 }\n                    },\n                    height: 100,\n                    children: [\n                        {\n                            id: 'node8',\n                            annotations: [{ content: 'Success helps \\n retain consumer \\n as a customer' }],\n                            margin: { left: 510, top: 20 },\n                            height: 50, width: 100, ports: port\n                        }\n                    ],\n                },\n            ],\n            phases: [\n                {\n                    id: 'phase1', offset: 170,\n                    header: { annotation: { content: 'Phase' } }\n                }\n            ],\n            phaseSize: 20,\n        },\n        offsetX: 360, offsetY: 320,\n        height: 100,\n        width: 650\n    },\n];\n//Initializes connectors for the diagram.\nvar connectors = [\n    {\n        id: 'connector1', sourceID: 'node1',\n        targetID: 'node2'\n    },\n    {\n        id: 'connector2', sourceID: 'node2',\n        targetID: 'node3', annotations: [{ content: 'No', style: { fill: 'white' } }]\n    },\n    {\n        id: 'connector3', sourceID: 'node4',\n        targetID: 'node8'\n    },\n    {\n        id: 'connector4', sourceID: 'node2',\n        targetID: 'node6', annotations: [{ content: 'Yes', style: { fill: 'white' } }]\n    },\n    {\n        id: 'connector5', sourceID: 'node5',\n        targetID: 'node1'\n    },\n    {\n        id: 'connector6', sourceID: 'node6',\n        targetID: 'node7'\n    },\n    {\n        id: 'connector7', sourcePortID: 'Port1', targetPortID: 'Port3', sourceID: 'node4',\n        targetID: 'node7',\n    },\n];\n//Initialize the palettes for the symbol palette\nvar palettes = [\n    {\n        id: 'flow', expanded: true, title: 'Flow Shapes', symbols: [\n            {\n                id: 'Terminator', addInfo: { tooltip: 'Terminator' }, width: 50, height: 60, shape: { type: 'Flow', shape: 'Terminator' }, ports: port\n            },\n            {\n                id: 'Process', addInfo: { tooltip: 'Process' }, width: 50, height: 60, shape: { type: 'Flow', shape: 'Process' }, ports: port\n            },\n            {\n                id: 'Decision', addInfo: { tooltip: 'Decision' }, width: 50, height: 50, shape: { type: 'Flow', shape: 'Decision' }, ports: port\n            },\n            {\n                id: 'Document', addInfo: { tooltip: 'Document' }, width: 50, height: 50, shape: { type: 'Flow', shape: 'Document' }, ports: port\n            },\n            {\n                id: 'PreDefinedProcess', addInfo: { tooltip: 'Predefined process' }, width: 50, height: 50, shape: { type: 'Flow', shape: 'PreDefinedProcess' }, ports: port\n            },\n            {\n                id: 'data', width: 50, height: 50, addInfo: { tooltip: 'Data' }, shape: { type: 'Flow', shape: 'Data' }, ports: port\n            },\n        ]\n    },\n    {\n        id: 'swimlaneShapes', expanded: true,\n        title: 'Swimlane Shapes',\n        symbols: [\n            {\n                id: 'Horizontalswimlane', addInfo: { tooltip: 'Horizontal swimlane' },\n                shape: {\n                    type: 'SwimLane', lanes: [\n                        {\n                            id: 'lane1',\n                            height: 60, width: 150,\n                            header: { width: 50, height: 50, style: { fontSize: 11 } },\n                        }\n                    ],\n                    orientation: 'Horizontal', isLane: true\n                },\n                height: 60,\n                width: 140,\n                offsetX: 70,\n                offsetY: 30,\n            }, {\n                id: 'Verticalswimlane', addInfo: { tooltip: 'Vertical swimlane' },\n                shape: {\n                    type: 'SwimLane',\n                    lanes: [\n                        {\n                            id: 'lane1',\n                            height: 150, width: 60,\n                            header: { width: 50, height: 50, style: { fontSize: 11 } },\n                        }\n                    ],\n                    orientation: 'Vertical', isLane: true\n                },\n                height: 140,\n                width: 60,\n                offsetX: 70,\n                offsetY: 30,\n            }, {\n                id: 'verticalPhase', addInfo: { tooltip: 'Vertical phase' },\n                shape: {\n                    type: 'SwimLane',\n                    phases: [{ style: { strokeWidth: 1, strokeDashArray: '3,3' }, }],\n                    annotations: [{ text: '' }],\n                    orientation: 'Vertical', isPhase: true,\n                },\n                height: 60,\n                width: 140,\n            }, {\n                id: 'horizontalPhase', addInfo: { tooltip: 'Horizontal phase' },\n                shape: {\n                    type: 'SwimLane',\n                    phases: [{ style: { strokeWidth: 1, strokeDashArray: '3,3', }, }],\n                    annotations: [{ text: '' }],\n                    orientation: 'Horizontal', isPhase: true\n                },\n                height: 60,\n                width: 140,\n            }\n        ]\n    },\n    {\n        id: 'connectors', expanded: true, symbols: [\n            {\n                id: 'orthogonal', type: 'Orthogonal', sourcePoint: { x: 0, y: 0 }, targetPoint: { x: 40, y: 40 },\n            },\n            {\n                id: 'Orthogonaldashed', type: 'Orthogonal', sourcePoint: { x: 0, y: 0 }, targetPoint: { x: 40, y: 40 },\n                style: { strokeDashArray: '4 4' }\n            },\n            {\n                id: 'straight', type: 'Straight', sourcePoint: { x: 0, y: 0 }, targetPoint: { x: 60, y: 60 },\n            },\n            {\n                id: 'straightdashed', type: 'Straight', sourcePoint: { x: 0, y: 0 }, targetPoint: { x: 60, y: 60 },\n                style: { strokeDashArray: '4 4' }\n            }\n        ], title: 'Connectors'\n    }\n];\n//Define custom menu items\nvar contextMenu = {\n    show: true, items: [\n        {\n            text: 'Copy', id: 'Copy', target: '.e-diagramcontent', iconCss: 'e-icons e-copy'\n        },\n        {\n            text: 'Cut', id: 'Cut', target: '.e-diagramcontent', iconCss: 'e-icons e-cut'\n        },\n        {\n            text: 'Paste', id: 'Paste', target: '.e-diagramcontent', iconCss: 'e-icons e-paste'\n        },\n        {\n            text: 'InsertLaneBefore', id: 'InsertLaneBefore', target: '.e-diagramcontent',\n        },\n        {\n            text: 'InsertLaneAfter', id: 'InsertLaneAfter', target: '.e-diagramcontent',\n        }\n    ],\n    showCustomMenuOnly: true,\n};\nvar diagramInstance;\nvar SwimLane = /** @class */ (function (_super) {\n    __extends(SwimLane, _super);\n    function SwimLane() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    SwimLane.prototype.renderComplete = function () {\n        addEvents();\n        diagramInstance.fitToPage();\n    };\n    SwimLane.prototype.render = function () {\n        return (React.createElement(\"div\", { className: \"control-pane diagram-Swimlane\" },\n            React.createElement(\"style\", null, SAMPLE_CSS),\n            React.createElement(\"div\", { className: \"control-section\" },\n                React.createElement(\"div\", { style: { width: \"100%\" } },\n                    React.createElement(\"div\", { className: \"sb-mobile-palette-bar\" },\n                        React.createElement(\"div\", { id: \"palette-icon\", ref: function (paletteIcon) { return (paletteIconInstance = paletteIcon); }, style: { float: \"right\" }, className: \"e-ddb-icons1 e-toggle-palette\" })),\n                    React.createElement(\"div\", { id: \"palette-space\", ref: function (paletteSpace) { return (paletteSpaceInstance = paletteSpace); }, className: \"sb-mobile-palette\" },\n                        React.createElement(ej2_react_diagrams_1.SymbolPaletteComponent, { id: \"symbolpalette\", expandMode: \"Multiple\", palettes: palettes, getNodeDefaults: getNodeDefaults, getConnectorDefaults: getConnectorDefaults, width: \"100%\", height: \"560px\", symbolHeight: 48, symbolWidth: 48, symbolMargin: { left: 8, right: 8, top: 8, bottom: 8 }, getSymbolInfo: function (symbol) {\n                                return { tooltip: symbol.addInfo ? symbol.addInfo['tooltip'] : symbol.id };\n                            } })),\n                    React.createElement(\"div\", { id: \"diagram-space\", className: \"sb-mobile-diagram\" },\n                        React.createElement(ej2_react_diagrams_1.DiagramComponent, { id: \"diagram\", ref: function (diagram) { return (diagramInstance = diagram); }, width: \"100%\", height: \"560px\", snapSettings: { constraints: ej2_react_diagrams_1.SnapConstraints.None }, nodes: nodes, connectors: connectors, getNodeDefaults: getNodeDefaults, getConnectorDefaults: getConnectorDefaults, contextMenuSettings: contextMenu, contextMenuOpen: contextMenuOpen, contextMenuClick: contextMenuClick, \n                            //Sets the node properties for DragEnter element.\n                            dragEnter: function (args) {\n                                var obj = args.element;\n                                var shape = obj.shape;\n                                if (shape.isLane) {\n                                    if (shape.orientation === \"Horizontal\") {\n                                        shape.lanes[0].height = 100;\n                                        shape.lanes[0].width = 500;\n                                    }\n                                    else if (shape.orientation === \"Vertical\") {\n                                        shape.lanes[0].height = 500;\n                                        shape.lanes[0].width = 100;\n                                    }\n                                }\n                            }, selectedItems: { constraints: ej2_react_diagrams_1.SelectorConstraints.All & ~ej2_react_diagrams_1.SelectorConstraints.Rotate } },\n                            React.createElement(ej2_react_diagrams_1.Inject, { services: [ej2_react_diagrams_1.UndoRedo, ej2_react_diagrams_1.DiagramContextMenu] })))))));\n    };\n    return SwimLane;\n}(sample_base_1.SampleBase));\nexports.SwimLane = SwimLane;\nvar isMobile;\n//Enhances webpage functionality for mobile devices with a click event listener.\nfunction addEvents() {\n    isMobile = window.matchMedia('(max-width:550px)').matches;\n    if (isMobile) {\n        var paletteIcon = paletteIconInstance;\n        if (paletteIcon) {\n            paletteIcon.addEventListener('click', openPalette, false);\n        }\n    }\n}\n// Manages the visibility state of the palette space on the webpage for mobile devices.\nfunction openPalette() {\n    var paletteSpace = paletteSpaceInstance;\n    isMobile = window.matchMedia('(max-width:550px)').matches;\n    if (isMobile) {\n        if (!paletteSpace.classList.contains('sb-mobile-palette-open')) {\n            paletteSpace.classList.add('sb-mobile-palette-open');\n        }\n        else {\n            paletteSpace.classList.remove('sb-mobile-palette-open');\n        }\n    }\n}\n//Opens the context menu items\nfunction contextMenuOpen(args) {\n    diagram = diagramInstance;\n    for (var _i = 0, _a = args.items; _i < _a.length; _i++) {\n        var item = _a[_i];\n        if ((diagram.selectedItems.connectors.length + diagram.selectedItems.nodes.length) > 0) {\n            if (item.id === 'InsertLaneBefore' || item.id === 'InsertLaneAfter') {\n                if (diagram.selectedItems.connectors.length || (diagram.selectedItems.nodes.length && !diagram.selectedItems.nodes[0].isLane)) {\n                    args.hiddenItems.push(item.text);\n                }\n            }\n        }\n        else {\n            args.hiddenItems.push(item.text);\n        }\n    }\n}\n//Handles click events on menu items.\nfunction contextMenuClick(args) {\n    diagram = diagramInstance;\n    if (args.item.id === 'InsertLaneBefore' || args.item.id === 'InsertLaneAfter') {\n        if (diagram.selectedItems.nodes.length > 0 && diagram.selectedItems.nodes[0].isLane) {\n            var index = void 0;\n            var node = diagram.selectedItems.nodes[0];\n            var swimlane = diagram.getObject(diagram.selectedItems.nodes[0].parentId);\n            var shape = swimlane.shape;\n            var existingLane = (0, ej2_react_diagrams_1.cloneObject)(shape.lanes[0]);\n            var newLane = {\n                id: (0, ej2_react_diagrams_1.randomId)(),\n                header: {\n                    width: existingLane.header.width, height: existingLane.header.height,\n                    style: existingLane.header.style\n                },\n                style: existingLane.style,\n                height: existingLane.height, width: existingLane.width,\n            };\n            if (shape.orientation === 'Horizontal') {\n                var exclude = 0;\n                exclude += (shape.header) ? 1 : 0;\n                exclude += (shape.phases.length) ? 1 : 0;\n                index = node.rowIndex - exclude;\n                newLane.header.width = existingLane.header.width;\n                newLane.header.height = existingLane.height;\n            }\n            else {\n                index = node.columnIndex - (shape.phases.length) ? 1 : 0;\n                newLane.header.width = existingLane.width;\n                newLane.header.height = existingLane.header.height;\n            }\n            if (args.item.id === 'InsertLaneBefore') {\n                diagram.addLanes(swimlane, [newLane], index);\n            }\n            else {\n                diagram.addLanes(swimlane, [newLane], index + 1);\n            }\n            diagram.clearSelection();\n        }\n    }\n    else if (args.item.id === 'Cut') {\n        diagram.cut();\n    }\n    else if (args.item.id === 'Copy') {\n        diagram.copy();\n    }\n    else if (args.item.id === 'Paste') {\n        diagram.paste();\n    }\n}\n// Sets the default values for a Connector.\nfunction getConnectorDefaults(connector) {\n    if ((connector.id.indexOf(\"straight\") !== -1) || (connector.id.indexOf(\"straightdashed\") !== -1)) {\n        connector.type = 'Straight';\n    }\n    else {\n        connector.type = 'Orthogonal';\n    }\n    setConnectorStyles(connector, '#717171');\n    return connector;\n}\n//set styles for connector\nfunction setConnectorStyles(connector, color) {\n    connector.style.strokeWidth = 1;\n    connector.style.strokeColor = color;\n    connector.targetDecorator.style.fill = color;\n    connector.targetDecorator.style.strokeColor = color;\n}\n// Sets the default values for a node.\nfunction getNodeDefaults(node) {\n    node.style.strokeColor = '#717171';\n    return node;\n}\nvar root = (0, client_1.createRoot)(document.getElementById('sample'));\nroot.render(React.createElement(SwimLane, null));\n\n\n//# sourceURL=webpack:///./samples/diagram/swim-lane/app/index.tsx?");

/***/ }),

/***/ "./samples/diagram/swim-lane/app/sample-base.tsx":
/*!*******************************************************!*\
  !*** ./samples/diagram/swim-lane/app/sample-base.tsx ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.updateSampleSection = exports.SampleBase = void 0;\nvar React = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\nvar ej2_base_1 = __webpack_require__(/*! @syncfusion/ej2-base */ \"./node_modules/@syncfusion/ej2-base/index.js\");\n(0, ej2_base_1.enableRipple)(window.ripple);\nvar SampleBase = /** @class */ (function (_super) {\n    __extends(SampleBase, _super);\n    function SampleBase() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    SampleBase.prototype.rendereComplete = function () {\n        /**custom render complete function */\n    };\n    SampleBase.prototype.componentDidMount = function () {\n        var _this = this;\n        setTimeout(function () {\n            _this.rendereComplete();\n        });\n    };\n    return SampleBase;\n}(React.PureComponent));\nexports.SampleBase = SampleBase;\nfunction updateSampleSection() { }\nexports.updateSampleSection = updateSampleSection;\n\n\n//# sourceURL=webpack:///./samples/diagram/swim-lane/app/sample-base.tsx?");

/***/ })

/******/ });