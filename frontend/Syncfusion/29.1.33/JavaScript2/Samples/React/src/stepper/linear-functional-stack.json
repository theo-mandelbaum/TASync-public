{"index.css":"@font-face {\n    font-family: 'Linear_flow';\n    src:\n    url(data:application/x-font-ttf;charset=utf-8;base64,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) format('truetype');\n    font-weight: normal;\n    font-style: normal;\n}\n\n.linear-stepper-control [class^=\"sf-icon-\"], .linear-stepper-control [class*=\" sf-icon-\"] {\n    font-family: 'Linear_flow' !important;\n    speak: none;\n    font-style: normal;\n    font-weight: normal;\n    font-variant: normal;\n    text-transform: none;\n    line-height: inherit;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n}\n\n.linear-stepper-control .sf-icon-form:before { content: \"\\e700\"; }\n.linear-stepper-control .sf-icon-tasksheet:before { content: \"\\e701\"; }\n.linear-stepper-control .sf-icon-progress:before { content: \"\\e702\"; }\n.linear-stepper-control .sf-icon-submit:before { content: \"\\e703\"; }\n\n#linear-stepper-section {\n    text-align: center;\n}\n\n.linear-stepper-control {\n    margin: 45px 100px;\n}\n\n.linear-stepper-options {\n    margin: 30px 100px;\n}\n\n#linear-stepper-content {\n    height: 120px;\n    width: 75%;\n    margin: 0px 105px;\n}\n\n@media only screen and (max-width: 965px) {\n    .linear-stepper-control {\n        width: 100%;\n        margin: 30px auto;\n    }\n    #linear-stepper-content, .linear-stepper-options {\n        margin: 30px 0px 0px 0px;\n        width: auto;\n        height: auto;\n        left: 25%;\n    }\n}","index.html":"<!DOCTYPE html>\n<html>\n<head>\n    <title>Syncfusion React Sample</title>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\n    <meta name=\"author\" content=\"Syncfusion\" />\n    <link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\n</head>\n\n<body class=\"{{theme}}\">\n     <style>\n            .control-section\n            {\n                margin-top: 100px;\n            }\n    </style>\n    <div id='sample'>\n</body>\n</html>\n","index.js":"import { createRoot } from 'react-dom/client';\nimport './index.css';\nimport * as React from 'react';\nimport { useEffect, useRef } from 'react';\nimport { StepperComponent, StepsDirective, StepDirective } from '@syncfusion/ej2-react-navigations';\n\n\nconst Linear = () => {\n    const stepperObj = useRef(null);\n    let stepperContentEle;\n    let stepperOptionsEle;\n    let stepperContentRef = element => { stepperContentEle = element; };\n    let stepperOptionsRef = element => { stepperOptionsEle = element; };\n    const updateBack = () => {\n        stepperObj.current.previousStep();\n        updateContent(stepperObj.current.activeStep);\n    };\n    const updateNext = () => {\n        stepperObj.current.nextStep();\n        updateContent(stepperObj.current.activeStep);\n    };\n    const toggleNavigationButtons = (activeStep) => {\n        stepperOptionsEle.querySelector('#previousStep').style.display = (activeStep !== 0) ? 'block' : 'none';\n        stepperOptionsEle.querySelector('#nextStep').style.display = (activeStep !== 3) ? 'block' : 'none';\n    };\n    const updateContent = (args) => {\n        switch (args) {\n            case 0:\n                stepperContentEle.innerHTML = `<b>Description:</b> <br/><br/> <ul><li>During this phase, the project's scope and objectives are clearly defined, along with the establishment of initial settings and parameters.</li><li>This step involves outlining the primary goals, deliverables, and the overall vision of the project to ensure a comprehensive understanding among all stakeholders.</li></ul>`;\n                break;\n            case 1:\n                stepperContentEle.innerHTML = `<b>Description:</b> <br/><br/> <ul><li>Task planning involves creating a comprehensive roadmap that outlines specific tasks, sets achievable milestones, and allocates responsibilities among team members. </li>\n                <li>This phase requires a detailed breakdown of the project's requirements, resources, and a strategic timeline to ensure a systematic and efficient execution of tasks.</li>\n                </ul>`;\n                break;\n            case 2:\n                stepperContentEle.innerHTML = `<b>Description:</b> <br/><br/> <ul><li>In this phase, project managers closely monitor the progress of individual tasks, track the overall project's advancement, and regularly update task statuses.</li><li>Continuous assessment of the project's timeline and potential challenges allows for timely adjustments, ensuring that the project stays on course and within the predefined parameters.</li></ul>`;\n                break;\n            case 3:\n                stepperContentEle.innerHTML = `<b>Description:</b> <br/><br/> <ul><li>\n                The final phase focuses on the comprehensive evaluation of the project's success, completion of all deliverables, and documentation of lessons learned. </li><li>Analyzing the outcomes and documenting the experiences gained during the project's lifecycle are crucial for improving future project management processes and enhancing overall organizational efficiency.</li>`;\n                break;\n            default:\n                break;\n        }\n        toggleNavigationButtons(args);\n    };\n    const updateLinear = (args) => {\n        stepperObj.current.linear = (/true/).test(args.currentTarget.value) ? true : false;\n        stepperObj.current.reset();\n        updateContent(stepperObj.current.activeStep);\n    };\n    return (<div className='control-pane'>\n            <div className='control-section'>\n                <div id=\"linear-stepper-section\">\n                    <div className=\"e-btn-group\">\n                        <input type=\"radio\" id=\"linear\" name=\"Linear\" value=\"true\" onClick={updateLinear} defaultChecked/>\n                        <label className=\"e-btn\" htmlFor=\"linear\">Linear</label>\n                        <input type=\"radio\" id=\"nonLinear\" name=\"Linear\" value=\"false\" onClick={updateLinear}/>\n                        <label className=\"e-btn\" htmlFor=\"nonLinear\">Non-Linear</label>\n                    </div>\n                </div>\n                <div className=\"linear-stepper-control\">\n                    <StepperComponent ref={stepperObj} linear={true} stepChanged={(args) => updateContent(args.activeStep)}>\n                        <StepsDirective>\n                            <StepDirective iconCss={'sf-icon-form'} label={'Project Setup'}/>\n                            <StepDirective iconCss={'sf-icon-tasksheet'} label={'Task Planning'}/>\n                            <StepDirective iconCss={'sf-icon-progress'} label={'Progress Tracking'}/>\n                            <StepDirective iconCss={'sf-icon-submit'} label={'Project Completion'}/>\n                        </StepsDirective>\n                    </StepperComponent>\n                </div>\n                <div id=\"linear-stepper-content\" ref={stepperContentRef}>\n                    <b>Description:</b> <br /><br /> <ul><li>During this phase, the project's scope and objectives are clearly defined, along with the establishment of initial settings and parameters.</li><li>This step involves outlining the primary goals, deliverables, and the overall vision of the project to ensure a comprehensive understanding among all stakeholders.</li></ul>\n                </div>\n                <div className=\"linear-stepper-options\" style={{ display: \"inline-flex\" }} ref={stepperOptionsRef}>\n                    <button id=\"previousStep\" style={{ marginRight: \"15px\", display: \"none\" }} onClick={updateBack} className=\"e-btn\">Back</button>\n                    <button id=\"nextStep\" style={{ display: \"block\" }} onClick={updateNext} className=\"e-btn\">Next</button>\n                </div>\n            </div>\n        </div>);\n};\nexport default Linear;\n\nconst root = createRoot(document.getElementById('sample'));\nroot.render(<Linear />);","dependencies":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-react-base\":\"*\",\"@syncfusion/ej2-navigations\":\"*\",\"@syncfusion/ej2-react-navigations\":\"*\",\"@syncfusion/ej2-react-charts\":\"*\",\"@syncfusion/ej2/base\":\"*\",\"@syncfusion/ej2-charts'; // Import the necessary types from Syncfusion\":\"*\",\"@syncfusion/ej2-lists\":\"*\",\"@syncfusion/ej2-documenteditor\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-splitbuttons\":\"*\",\"@syncfusion/ej2-react-popups\":\"*\",\"@syncfusion/ej2-pivotview\":\"*\",\"@syncfusion/ej2-react-progressbar\":\"*\",\"@syncfusion/ej2-schedule\":\"*\",\"@syncfusion/ej2-data\":\"*\"}"}