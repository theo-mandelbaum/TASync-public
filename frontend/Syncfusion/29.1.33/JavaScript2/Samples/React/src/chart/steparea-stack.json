{"index.css":"/* css */","index.html":"<!DOCTYPE html>\n<html>\n<head>\n    <title>Syncfusion React Sample</title>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\n    <meta name=\"author\" content=\"Syncfusion\" />\n    <link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\n</head>\n\n<body class=\"{{theme}}\">\n     <style>\n            .control-section\n            {\n                margin-top: 100px;\n            }\n    </style>\n    <div id='sample'>\n</body>\n</html>\n","index.js":"import { createRoot } from 'react-dom/client';\nimport './index.css';\n/**\n * Sample for Step Area Series\n */\nimport * as React from 'react';\nimport { ChartComponent, SeriesCollectionDirective, SeriesDirective, Inject, Tooltip, StepAreaSeries, DataLabel, DateTime } from '@syncfusion/ej2-react-charts';\nimport { SampleBase } from './sample-base';\nexport let stepAreaData = [\n    { period: new Date(2023, 1, 1), unit: 137 },\n    { period: new Date(2023, 2, 1), unit: 163 },\n    { period: new Date(2023, 3, 1), unit: 145 },\n    { period: new Date(2023, 4, 1), unit: 175 },\n    { period: new Date(2023, 5, 1), unit: 151 },\n    { period: new Date(2023, 6, 1), unit: 159 },\n    { period: new Date(2023, 7, 1), unit: 168 },\n    { period: new Date(2023, 8, 1), unit: 168 },\n    { period: new Date(2023, 9, 1), unit: 177 },\n    { period: new Date(2023, 10, 1), unit: 147 },\n    { period: new Date(2023, 11, 1), unit: 172 },\n    { period: new Date(2024, 0, 1), unit: 173 },\n    { period: new Date(2024, 1, 2), unit: 143 }\n];\nconst SAMPLE_CSS = `\n    .control-fluid {\n         padding: 0px !important;\n     }`;\nexport class StepArea extends SampleBase {\n    render() {\n        return (<div className=\"control-pane\">\n                <style>{SAMPLE_CSS}</style>\n                <div className=\"control-section\">\n                    <ChartComponent id=\"charts\" style={{ textAlign: 'center' }} primaryXAxis={{ valueType: 'DateTime', plotOffsetLeft: 50, plotOffsetRight: 50, labelFormat: 'MMM-yy', majorGridLines: { width: 0 }, majorTickLines: { width: 0 } }} primaryYAxis={{ title: 'Units', opposedPosition: true, labelFormat: 'n0', minimum: 120, maximum: 200, interval: 20, lineStyle: { width: 0 }, majorTickLines: { width: 0 } }} width='90%' chartArea={{ border: { width: 0 } }} tooltip={{ enable: true, showNearestTooltip: true, header: 'Unit Sold', format: '${point.x} : <b>${point.y}' }} title='Unit Sold Trend' subTitle='CM vs LM | By Month' titleStyle={{ textAlignment: 'Near' }} subTitleStyle={{ textAlignment: 'Near' }} load={this.load.bind(this)} loaded={this.onChartLoad.bind(this)} axisLabelRender={this.axisLabelRender.bind(this)} textRender={this.textRender.bind(this)}>\n                        <Inject services={[StepAreaSeries, Tooltip, DataLabel, DateTime]}/>\n                        <SeriesCollectionDirective>\n                            <SeriesDirective dataSource={stepAreaData} xName=\"period\" yName=\"unit\" step='Center' width={3} type=\"StepArea\" opacity={0.5} marker={{ visible: true, width: 7, height: 7, isFilled: true, dataLabel: { visible: true, position: 'Auto', template: '<div>${point.y}K</div>' } }} border={{ width: 2 }}></SeriesDirective>\n                        </SeriesCollectionDirective>\n                    </ChartComponent>\n                </div>\n            </div>);\n    }\n    previousYValue = null;\n    onChartLoad(args) {\n        let chart = document.getElementById('charts');\n        chart.setAttribute('title', '');\n        this.previousYValue = null;\n    }\n    ;\n    load(args) {\n        let selectedTheme = location.hash.split('/')[1];\n        selectedTheme = selectedTheme ? selectedTheme : 'Tailwind3';\n        args.chart.theme = (selectedTheme.charAt(0).toUpperCase() + selectedTheme.slice(1)).replace(/-dark/i, \"Dark\").replace(/contrast/i, 'Contrast').replace(/-highContrast/i, 'HighContrast');\n    }\n    ;\n    axisLabelRender(args) {\n        if (args.axis.name === 'primaryYAxis') {\n            args.text = args.text + 'K';\n        }\n    }\n    ;\n    textRender(args) {\n        const point = args.point;\n        if (this.previousYValue !== null) {\n            const difference = point.y - this.previousYValue;\n            const triangleDirection = difference >= 0 ? 'border-bottom' : 'border-top';\n            const triangleColor = difference >= 0 ? 'green' : 'red';\n            const percentage = `${((difference / this.previousYValue) * 100).toFixed(1)}%`;\n            args.template = `\n                <div>${point.y}K</div>\n                <div style=\"display: inline-block; vertical-align: middle;\">\n                    <div class=\"triangle\" style=\"width: 0; height: 0; border-left: 5px solid transparent; border-right: 5px solid transparent; ${triangleDirection}: 10px solid ${triangleColor}; display: inline-block; margin-right: 5px;\"></div>\n                </div>${percentage}`;\n        }\n        this.previousYValue = point.y;\n    }\n    ;\n}\n\nconst root = createRoot(document.getElementById('sample'));\nroot.render(<StepArea />);","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n                this.rendereComplete();\n            });\n        }\n    }\n    export function updateSampleSection(){}\n    ","dependencies":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-react-base\":\"*\",\"@syncfusion/ej2-charts\":\"*\",\"@syncfusion/ej2-react-charts\":\"*\",\"@syncfusion/ej2/base\":\"*\",\"@syncfusion/ej2-charts'; // Import the necessary types from Syncfusion\":\"*\"}"}