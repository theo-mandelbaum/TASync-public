{"index.css":"/* css */","index.html":"<!DOCTYPE html>\n<html>\n<head>\n    <title>Syncfusion React Sample</title>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\n    <meta name=\"author\" content=\"Syncfusion\" />\n    <link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\n</head>\n\n<body class=\"{{theme}}\">\n     <style>\n            .control-section\n            {\n                margin-top: 100px;\n            }\n    </style>\n    <div id='sample'>\n</body>\n</html>\n","index.js":"import { createRoot } from 'react-dom/client';\nimport './index.css';\n/**\n * Sample for local data\n */\nimport * as React from \"react\";\nimport { ChartComponent, SeriesCollectionDirective, SeriesDirective, Inject, LineSeries, DateTime, Legend, Tooltip, Crosshair } from '@syncfusion/ej2-react-charts';\nimport { Browser } from '@syncfusion/ej2-base';\nimport { SampleBase } from './sample-base';\nexport function GetLocalData() {\n    let series1 = [];\n    let series2 = [];\n    let point1;\n    let point2;\n    let value = 80;\n    let value1 = 90;\n    let i;\n    for (i = 1; i < 500; i++) {\n        if (Math.random() > .5) {\n            value += Math.random();\n            value1 += Math.random();\n        }\n        else {\n            value -= Math.random();\n            value1 -= Math.random();\n        }\n        point1 = { x: new Date(1960, (i + 1), i), y: Math.round(value) };\n        point2 = { x: new Date(1960, (i + 1), i), y: Math.round(value1) };\n        series1.push(point1);\n        series2.push(point2);\n    }\n    return { 'series1': series1, 'series2': series2 };\n}\nexport let data1 = GetLocalData().series1;\nexport let data2 = GetLocalData().series2;\nconst SAMPLE_CSS = `\n    .control-fluid {\n\t\tpadding: 0px !important;\n    }`;\nexport class LocalData extends SampleBase {\n    render() {\n        return (<div className='control-pane'>\n                <style>\n                    {SAMPLE_CSS}\n                </style>\n                <div className='control-section'>\n                    <ChartComponent id='charts' style={{ textAlign: \"center\" }} primaryXAxis={{\n                title: 'Years',\n                skeleton: 'y',\n                majorGridLines: { width: 0 },\n                valueType: 'DateTime',\n                edgeLabelPlacement: 'Shift'\n            }} load={this.load.bind(this)} primaryYAxis={{\n                title: 'Price',\n                labelFormat: '${value}',\n                rangePadding: 'None',\n                lineStyle: { width: 0 },\n                majorTickLines: { width: 0 },\n                minorTickLines: { width: 0 }\n            }} crosshair={{\n                enable: true,\n                line: {\n                    color: 'rgba(204,214,235,0.25)',\n                    width: Browser.isDevice ? 50 : 20,\n                },\n                lineType: 'Vertical'\n            }} chartArea={{ border: { width: 0 } }} tooltip={{ enable: true, shared: true }} width={Browser.isDevice ? '100%' : '75%'} title='Stock Price Analysis' loaded={this.onChartLoad.bind(this)}>\n                        <Inject services={[LineSeries, DateTime, Legend, Crosshair, Tooltip]}/>\n                        <SeriesCollectionDirective>\n                            <SeriesDirective dataSource={data1} xName='x' yName='y' width={2} name='Product X' animation={{ enable: true }} type='Line'>\n                            </SeriesDirective>\n                            <SeriesDirective dataSource={data2} xName='x' yName='y' width={2} name='Product Y' animation={{ enable: true }} type='Line'>\n                            </SeriesDirective>\n                        </SeriesCollectionDirective>\n                    </ChartComponent>\n                </div>\n            </div>);\n    }\n    onChartLoad(args) {\n        let chart = document.getElementById('charts');\n        chart.setAttribute('title', '');\n    }\n    ;\n    load(args) {\n        let selectedTheme = location.hash.split('/')[1];\n        selectedTheme = selectedTheme ? selectedTheme : 'Fluent2';\n        args.chart.theme = (selectedTheme.charAt(0).toUpperCase() + selectedTheme.slice(1)).\n            replace(/-dark/i, \"Dark\").replace(/contrast/i, 'Contrast').replace(/-highContrast/i, 'HighContrast');\n    }\n    ;\n}\n\nconst root = createRoot(document.getElementById('sample'));\nroot.render(<LocalData />);","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n                this.rendereComplete();\n            });\n        }\n    }\n    export function updateSampleSection(){}\n    ","dependencies":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-react-base\":\"*\",\"@syncfusion/ej2-charts\":\"*\",\"@syncfusion/ej2-react-charts\":\"*\",\"@syncfusion/ej2-icons\":\"*\",\"markdown-spellcheck\":\"^1.3.1\",\"@syncfusion/ej2/base\":\"*\",\"@syncfusion/ej2-charts'; // Import the necessary types from Syncfusion\":\"*\"}"}