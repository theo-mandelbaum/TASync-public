{"index.css":"/* css */","property-pane.js":"import * as ReactDOM from 'react-dom';\nimport * as React from 'react';\nimport { select } from '@syncfusion/ej2-base';\nexport class PropertyPane extends React.Component {\n    render() {\n        const mobilePropPane = select('.sb-mobile-prop-pane');\n        const isMobile = window.matchMedia('(max-width:550px)').matches;\n        return isMobile && mobilePropPane ?\n            ReactDOM.createPortal(<div className='property-panel-section'>\n                    <div className=\"property-panel-header\">\n                        {this.props.title}\n                    </div>\n                    <div className=\"property-panel-content\">\n                        {this.props.children}\n                    </div>\n                </div>, mobilePropPane)\n            :\n                (<div className='property-panel-section'>\n                    <div className=\"property-panel-header\">\n                        {this.props.title}\n                    </div>\n                    <div className=\"property-panel-content\">\n                        {this.props.children}\n                    </div>\n                </div>);\n    }\n}\n","index.html":"<!DOCTYPE html>\n<html>\n<head>\n    <title>Syncfusion React Sample</title>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\n    <meta name=\"author\" content=\"Syncfusion\" />\n    <link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\n</head>\n\n<body class=\"{{theme}}\">\n     <style>\n            .control-section\n            {\n                margin-top: 100px;\n            }\n    </style>\n    <div id='sample'>\n</body>\n</html>\n","index.js":"import { createRoot } from 'react-dom/client';\nimport './index.css';\n/**\n * Samples for Trendlines\n */\nimport * as React from \"react\";\nimport { ChartComponent, SeriesCollectionDirective, SeriesDirective, TrendlineDirective, TrendlinesDirective, Inject, Tooltip, LineSeries, ScatterSeries, SplineSeries, Trendlines, Category, Legend } from '@syncfusion/ej2-react-charts';\nimport { SampleBase } from './sample-base';\nimport { Browser } from \"@syncfusion/ej2/base\";\nlet series1 = [\n    { Period: 1947, Rupees: 4.76 },\n    { Period: 1967, Rupees: 7.50 },\n    { Period: 1974, Rupees: 8.10 },\n    { Period: 1989, Rupees: 16.64 },\n    { Period: 1990, Rupees: 17.32 },\n    { Period: 2000, Rupees: 43.56 },\n    { Period: 2007, Rupees: 39.27 },\n    { Period: 2013, Rupees: 56.57 },\n    { Period: 2019, Rupees: 71.74 },\n    { Period: 2020, Rupees: 76.67 },\n    { Period: 2021, Rupees: 72.75 },\n];\nlet powerData = [\n    { x: 1, y: 10 }, { x: 2, y: 50 }, { x: 3, y: 80 }, { x: 4, y: 110 },\n    { x: 5, y: 180 }, { x: 6, y: 220 }, { x: 7, y: 300 }, { x: 8, y: 370 }, { x: 9, y: 490 }, { x: 10, y: 500 }\n];\nconst SAMPLE_CSS = `\n    .control-fluid {\n\t\tpadding: 0px !important;\n    }\n    #charts_Series_0_TrendLine_0 {\n        stroke-dasharray: 10px 10px;\n        stroke-linejoin: round; stroke-linecap: round;\n        -webkit-animation: dash 1s linear infinite;\n        animation: dash 1s linear infinite;\n    }\n    @-webkit-keyframes dash {\n        100% {\n            stroke-dashoffset: -20px;\n        }\n    }\n\n    @keyframes dash {\n        100% {\n            stroke-dashoffset: -20px;\n        }\n    }`;\nexport class Trend extends SampleBase {\n    chartInstance;\n    dropElement;\n    checkElement;\n    forwardElement;\n    backwardElement;\n    polynomialElement;\n    periodElement;\n    loaded;\n    forwardForecast = false;\n    backwardForecast = false;\n    polynomialOrder = true;\n    period = true;\n    change(e) {\n        let type = document.getElementById('trendLineType');\n        this.chartInstance.series[0].dataSource = [];\n        this.chartInstance.series[0].animation.enable = false;\n        this.chartInstance.series[0].trendlines[0].type = type.value;\n        this.chartInstance.series[0].trendlines[0].name = type.value;\n        if (type.value !== 'Power') {\n            this.chartInstance.series[0].dataSource = series1;\n            this.chartInstance.series[0].name = 'Rupees';\n            this.chartInstance.primaryXAxis.title = '';\n            this.chartInstance.primaryYAxis.interval = 10;\n            this.chartInstance.primaryYAxis.title = 'Rupees against Dollars';\n            this.chartInstance.title = 'Historical Indian Rupee Rate (INR USD)';\n            if (type.value === 'MovingAverage') {\n                this.chartInstance.series[0].trendlines[0].marker.visible = false;\n            }\n        }\n        else {\n            this.chartInstance.series[0].dataSource = powerData;\n            this.chartInstance.series[0].name = 'Meters';\n            this.chartInstance.primaryXAxis.title = 'Seconds';\n            this.chartInstance.primaryYAxis.title = 'Meters';\n            this.chartInstance.primaryYAxis.interval = 100;\n            this.chartInstance.title = 'Distance Measurement';\n        }\n        if (type.value !== 'Polynomial' && type.value !== 'MovingAverage') {\n            this.period = this.polynomialOrder = true;\n            this.forwardForecast = this.backwardForecast = false;\n        }\n        else if (type.value === 'MovingAverage') {\n            this.period = false;\n            this.forwardForecast = this.backwardForecast = this.polynomialOrder = true;\n        }\n        else {\n            this.forwardForecast = this.backwardForecast = this.polynomialOrder = false;\n            this.period = true;\n        }\n        this.forwardElement.enabled = !this.forwardForecast;\n        this.backwardElement.enabled = !this.backwardForecast;\n        this.polynomialElement.enabled = !this.polynomialOrder;\n        this.periodElement.enabled = !this.period;\n        this.chartInstance.refresh();\n    }\n    checkForwardForecast(e) {\n        let value = Number(document.getElementById('forwardForecast').value);\n        this.chartInstance.series[0].trendlines[0].forwardForecast = value;\n        this.chartInstance.series[0].animation.enable = false;\n        this.chartInstance.refresh();\n    }\n    checkBackwardForecast(e) {\n        let value = Number(document.getElementById('backwardForecast').value);\n        this.chartInstance.series[0].trendlines[0].backwardForecast = value;\n        this.chartInstance.series[0].animation.enable = false;\n        this.chartInstance.refresh();\n    }\n    checkPolynomialOrder(e) {\n        let value = Number(document.getElementById('polynomial').value);\n        this.chartInstance.series[0].trendlines[0].polynomialOrder = value;\n        this.chartInstance.series[0].animation.enable = false;\n        this.chartInstance.refresh();\n    }\n    checkPeriod(e) {\n        let value = Number(document.getElementById('period').value);\n        this.chartInstance.series[0].trendlines[0].period = value;\n        this.chartInstance.series[0].animation.enable = false;\n        this.chartInstance.refresh();\n    }\n    droplist = [\n        { value: 'Linear' },\n        { value: 'Exponential' },\n        { value: 'Power' },\n        { value: 'Logarithmic' },\n        { value: 'Polynomial' },\n        { value: 'MovingAverage' }\n    ];\n    render() {\n        return (<div className='control-pane'>\n                <style>{SAMPLE_CSS}</style>\n                <div className='control-section '>               \n                    <ChartComponent id='charts' style={{ textAlign: \"center\" }} load={this.load.bind(this)} primaryXAxis={{ valueType: 'Category', edgeLabelPlacement: 'Shift', majorGridLines: { width: 0 }, majorTickLines: { width: 0 }, lineStyle: { width: 1 } }} primaryYAxis={{ minimum: 0, maximum: 80, interval: 10, labelFormat: \"â‚¹{value}\", title: 'Rupees against Dollars', minorTickLines: { width: 0 }, lineStyle: { width: 0 }, majorTickLines: { width: 0 } }} chartArea={{ border: { width: 0 } }} tooltip={{ enable: true, showNearestTooltip: true, enableHighlight: true }} width={Browser.isDevice ? '100%' : '75%'} title='USD to INR Rates' loaded={this.onChartLoad.bind(this)}>\n                        <Inject services={[Category, ScatterSeries, SplineSeries, LineSeries, Tooltip, Trendlines, Category, Legend]}/>\n                        <SeriesCollectionDirective>\n                            <SeriesDirective dataSource={series1} xName='Period' yName='Rupees' name='Rupees' type='Spline' marker={{ visible: true, isFilled: true, height: 7, width: 7 }}>\n                                <TrendlinesDirective>\n                                    <TrendlineDirective type='Linear' width={3} name='Trends' fill='#C64A75'/>\n                                </TrendlinesDirective>\n                            </SeriesDirective>\n                        </SeriesCollectionDirective>\n                    </ChartComponent>\n                </div>\n            </div>);\n    }\n    onChartLoad(args) {\n        document.getElementById('charts').setAttribute('title', '');\n    }\n    ;\n    load(args) {\n        let selectedTheme = location.hash.split('/')[1];\n        selectedTheme = selectedTheme ? selectedTheme : 'Fluent2';\n        args.chart.theme = (selectedTheme.charAt(0).toUpperCase() + selectedTheme.slice(1)).replace(/-dark/i, \"Dark\").replace(/contrast/i, 'Contrast').replace(/-highContrast/i, 'HighContrast');\n    }\n    ;\n}\n\nconst root = createRoot(document.getElementById('sample'));\nroot.render(<Trend />);","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n                this.rendereComplete();\n            });\n        }\n    }\n    export function updateSampleSection(){}\n    ","dependencies":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-react-base\":\"*\",\"@syncfusion/ej2-charts\":\"*\",\"@syncfusion/ej2-react-charts\":\"*\",\"@syncfusion/ej2-dropdowns\":\"*\",\"@syncfusion/ej2-react-dropdowns\":\"*\",\"@syncfusion/ej2-inputs\":\"*\",\"@syncfusion/ej2-react-inputs\":\"*\",\"@syncfusion/ej2-icons\":\"*\",\"markdown-spellcheck\":\"^1.3.1\",\"@syncfusion/ej2/base\":\"*\",\"@syncfusion/ej2-charts'; // Import the necessary types from Syncfusion\":\"*\"}"}