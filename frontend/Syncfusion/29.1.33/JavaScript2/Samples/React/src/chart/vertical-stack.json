{"index.css":"/* css */","index.html":"<!DOCTYPE html>\n<html>\n<head>\n    <title>Syncfusion React Sample</title>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\n    <meta name=\"author\" content=\"Syncfusion\" />\n    <link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\n</head>\n\n<body class=\"{{theme}}\">\n     <style>\n            .control-section\n            {\n                margin-top: 100px;\n            }\n    </style>\n    <div id='sample'>\n</body>\n</html>\n","index.js":"import { createRoot } from 'react-dom/client';\nimport './index.css';\n/**\n * Samples for vertical chart\n */\nimport * as React from \"react\";\nimport { ChartComponent, SeriesCollectionDirective, SeriesDirective, Inject, Legend, LineSeries, getElement, Tooltip, AxesDirective, AxisDirective, Category, ColumnSeries } from '@syncfusion/ej2-react-charts';\nimport { SampleBase } from './sample-base';\nimport { Browser } from '@syncfusion/ej2-base';\nconst SAMPLE_CSS = `\n    .control-fluid {\n\t\tpadding: 0px !important;\n    }`;\nexport class VerticalChart extends SampleBase {\n    chartInstance;\n    count = 0;\n    clrInterval;\n    render() {\n        return (<div className='control-pane'>\n                <style>\n                    {SAMPLE_CSS}\n                </style>\n                <div className='control-section'>\n                <ChartComponent id='charts-vertical' style={{ textAlign: \"center\" }} primaryXAxis={{ valueType: 'Category', majorGridLines: { width: 0 }, majorTickLines: { width: 0 }, minorTickLines: { width: 0 } }} load={this.load.bind(this)} primaryYAxis={{ title: 'Sales in Billion', majorGridLines: { width: 0 }, minimum: 11000, maximum: 15000, interval: 500, lineStyle: { width: 0 }, majorTickLines: { width: 0 } }} chartArea={{ border: { width: 0 } }} isTransposed={true} legendSettings={{ visible: false }} tooltip={{ enable: true, enableHighlight: true }} width={Browser.isDevice ? '100%' : '75%'} title='Sales Vs Profit Margins' loaded={this.onChartLoad.bind(this)}>\n                    <Inject services={[LineSeries, Tooltip, Category, Legend, ColumnSeries]}/>\n                    <AxesDirective>\n                        <AxisDirective majorGridLines={{ width: 0 }} opposedPosition={true} title='Profit(In Percentage)' lineStyle={{ width: 0 }} minimum={0} maximum={4} interval={0.5} majorTickLines={{ width: 0 }} name='yAxis2' labelFormat='{value}%'/>\n                    </AxesDirective>\n                    <SeriesCollectionDirective>\n                        <SeriesDirective width={2} dataSource={[{ Year: \"2016\", column: 13600 }, { Year: \"2017\", column: 12900 }, { Year: \"2018\", column: 12500 }, { Year: \"2019\", column: 14500 }, { Year: \"2020\", column: 14500 }, { Year: \"2021\", column: 12000 }]} xName='Year' name=\"Sales\" yName='column' type='Column'/>\n                        <SeriesDirective width={2} dataSource={[{ Year: \"2016\", column: 13600, series: 0.5 }, { Year: \"2017\", series: 1.5 }, { Year: \"2018\", series: 3.5 }, { Year: \"2019\", series: 1.5 }, { Year: \"2020\", series: 3 }, { Year: \"2021\", series: 2.5 }]} yAxisName=\"yAxis2\" name=\"Profit Margin\" xName='Year' yName='series' type='Line' marker={{ visible: true, width: 7, height: 7, isFilled: true }}/>\n                    </SeriesCollectionDirective>\n                </ChartComponent>\n                </div>\n            </div>);\n    }\n    onChartLoad(args) {\n        //let chart: Element = document.getElementById('charts-vertical');\n        args.chart.loaded = null;\n        //chart.setAttribute('title', '');\n        this.clrInterval =\n            +setInterval(() => {\n                args.chart.series[0].dataSource = this.liveData(args.chart.series[0].dataSource, args.chart.series[0]);\n                args.chart.refresh();\n            }, \n            // tslint:disable-next-line:align\n            10);\n    }\n    ;\n    load(args) {\n        let selectedTheme = location.hash.split('/')[1];\n        selectedTheme = selectedTheme ? selectedTheme : 'Fluent2';\n        args.chart.theme = (selectedTheme.charAt(0).toUpperCase() + selectedTheme.slice(1)).replace(/-dark/i, \"Dark\").replace(/contrast/i, 'Contrast').replace(/-highContrast/i, 'HighContrast');\n    }\n    ;\n    liveData(data, series) {\n        this.count = this.count + 1;\n        let newData = data;\n        if (this.count > 350 || getElement('charts-vertical') === null) {\n            clearInterval(this.clrInterval);\n        }\n        else if (this.count > 300) {\n            newData.push({ x: this.getXValue(data), y: this.getRandomArbitrary(0, 0) });\n        }\n        else if (this.count > 250) {\n            newData.push({ x: this.getXValue(data), y: this.getRandomArbitrary(-2, 1) });\n        }\n        else if (this.count > 180) {\n            newData.push({ x: this.getXValue(data), y: this.getRandomArbitrary(-3, 2) });\n        }\n        else if (this.count > 100) {\n            newData.push({ x: this.getXValue(data), y: this.getRandomArbitrary(-7, 6) });\n        }\n        else if (this.count < 50) {\n            newData.push({ x: this.getXValue(data), y: this.getRandomArbitrary(-3, 3) });\n        }\n        else {\n            newData.push({ x: this.getXValue(data), y: this.getRandomArbitrary(-9, 9) });\n        }\n        return newData;\n    }\n    getRandomArbitrary(min, max) {\n        return Math.random() * (max - min) + min;\n    }\n    getXValue(data) {\n        return data.length;\n    }\n}\n\nconst root = createRoot(document.getElementById('sample'));\nroot.render(<VerticalChart />);","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n                this.rendereComplete();\n            });\n        }\n    }\n    export function updateSampleSection(){}\n    ","dependencies":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-react-base\":\"*\",\"@syncfusion/ej2-charts\":\"*\",\"@syncfusion/ej2-react-charts\":\"*\",\"@syncfusion/ej2-icons\":\"*\",\"markdown-spellcheck\":\"^1.3.1\",\"@syncfusion/ej2/base\":\"*\",\"@syncfusion/ej2-charts'; // Import the necessary types from Syncfusion\":\"*\"}"}