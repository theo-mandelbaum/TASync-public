{"index.css":"/* css */","theme-color.js":"export let themes = ['bootstrap5', 'bootstrap5dark', 'tailwind', 'tailwinddark', 'material', 'materialdark', 'bootstrap4', 'bootstrap', 'bootstrapdark', 'fabric', 'fabricdark', 'highcontrast', 'fluent', 'fluentdark', 'material3', 'material3dark', 'fluent2', 'fluent2dark', 'fluent2highcontrast'];\nexport let borderColor = ['#FD7E14', '#FD7E14', '#5A61F6', '#8B5CF6', '#00bdae', '#9ECB08', '#a16ee5', '#a16ee5', '#a16ee5', '#4472c4', '#4472c4', '#79ECE4', '#1AC9E6', '#1AC9E6', '#6355C7', '#4EAAFF', '#6200EE', '#9BB449', '#9BB449'];\nexport let loadChartTheme = (args, isGradient) => {\n    let selectedTheme = location.hash.split('/')[1] || 'Tailwind3';\n    let theme = (selectedTheme.charAt(0).toUpperCase() + selectedTheme.slice(1))\n        .replace(/-dark/i, 'Dark')\n        .replace(/contrast/i, 'Contrast')\n        .replace(/-highContrast/i, 'HighContrast');\n    if (args) {\n        args.chart.theme = theme;\n        return isGradient ? selectedTheme : args.chart.theme;\n    }\n    if (isGradient && !args) {\n        return selectedTheme;\n    }\n};\nexport let loadAccumulationChartTheme = (args) => {\n    let selectedTheme = location.hash.split('/')[1];\n    selectedTheme = selectedTheme ? selectedTheme : 'Tailwind3';\n    if (args) {\n        args.accumulation.theme = (selectedTheme.charAt(0).toUpperCase() + selectedTheme.slice(1)).replace(/-dark/i, \"Dark\").replace(/light/i, \"Light\").replace(/contrast/i, 'Contrast').replace(/-highContrast/i, 'HighContrast');\n        return args.chart.theme;\n    }\n    else {\n        return selectedTheme;\n    }\n};\nexport let layoutColor;\nexport let accPointRender = (args) => {\n    let selectedTheme = location.hash.split('/')[1];\n    let layoutColor;\n    selectedTheme = selectedTheme ? selectedTheme : 'Tailwind3';\n    if (selectedTheme.indexOf('dark') > -1) {\n        if (selectedTheme.indexOf('material') > -1) {\n            args.border.color = '#303030';\n            layoutColor = '#303030';\n        }\n        else if (selectedTheme.indexOf('bootstrap5') > -1) {\n            args.border.color = '#212529';\n            layoutColor = '#212529';\n        }\n        else if (selectedTheme.indexOf('bootstrap') > -1) {\n            args.border.color = '#1A1A1A';\n            layoutColor = '#1A1A1A';\n        }\n        else if (selectedTheme.indexOf('fabric') > -1) {\n            args.border.color = '#201f1f';\n            layoutColor = '#201f1f';\n        }\n        else if (selectedTheme.indexOf('fluent') > -1) {\n            args.border.color = '#252423';\n            layoutColor = '#252423';\n        }\n        else if (selectedTheme.indexOf('bootstrap') > -1) {\n            args.border.color = '#1A1A1A';\n            layoutColor = '#1A1A1A';\n        }\n        else if (selectedTheme.indexOf('tailwind') > -1) {\n            args.border.color = '#1F2937';\n            layoutColor = '#1F2937';\n        }\n        else {\n            args.border.color = '#222222';\n            layoutColor = '#222222';\n        }\n    }\n    else if (selectedTheme.indexOf('highcontrast') > -1) {\n        args.border.color = '#000000';\n        layoutColor = '#000000';\n    }\n    else {\n        args.border.color = '#FFFFFF';\n        layoutColor = '#FFFFFF';\n    }\n    if (selectedTheme.indexOf('highcontrast') > -1 || selectedTheme.indexOf('dark') > -1) {\n        let columnHeaderElement = document.querySelector('#header1');\n        columnHeaderElement.style.color = '#F3F2F1';\n        let pieHeaderElement = document.querySelector('#header2');\n        pieHeaderElement.style.color = '#F3F2F1';\n        let splineHeaderElement = document.querySelector('#header3');\n        splineHeaderElement.style.color = '#F3F2F1';\n    }\n    let columnLayoutTemplate = document.querySelector('#layout_0template');\n    columnLayoutTemplate.style.background = layoutColor;\n    let columnLayout = document.querySelector('#layout_0_body');\n    columnLayout.style.background = layoutColor;\n    let pieLayoutTemplate = document.querySelector('#layout_1template');\n    pieLayoutTemplate.style.background = layoutColor;\n    let pieLayout = document.querySelector('#layout_1_body');\n    pieLayout.style.background = layoutColor;\n    let splineLayoutTemplate = document.querySelector('#layout_2template');\n    splineLayoutTemplate.style.background = layoutColor;\n    let splineLayout = document.querySelector('#layout_2_body');\n    splineLayout.style.background = layoutColor;\n};\nexport let accpatternPointRender = (args) => {\n    if (args.point.index == 0) {\n        args.pattern = 'DiagonalBackward';\n    }\n    else if (args.point.index == 1) {\n        args.pattern = 'DiagonalForward';\n    }\n    else if (args.point.index == 2) {\n        args.pattern = 'HorizontalStripe';\n    }\n    else if (args.point.index == 3) {\n        args.pattern = 'VerticalStripe';\n    }\n    else if (args.point.index == 4) {\n        args.pattern = 'HorizontalDash';\n    }\n    let selectedTheme = location.hash.split('/')[1];\n    selectedTheme = selectedTheme ? selectedTheme : 'Tailwind3';\n    if (selectedTheme.indexOf('dark') > -1) {\n        if (selectedTheme.indexOf('material') > -1) {\n            args.border.color = '#303030';\n        }\n        else if (selectedTheme.indexOf('bootstrap5') > -1) {\n            args.border.color = '#212529';\n        }\n        else if (selectedTheme.indexOf('bootstrap') > -1) {\n            args.border.color = '#1A1A1A';\n        }\n        else if (selectedTheme.indexOf('tailwind') > -1) {\n            args.border.color = '#1F2937';\n        }\n        else if (selectedTheme.indexOf('fluent') > -1) {\n            args.border.color = '#252423';\n        }\n        else if (selectedTheme.indexOf('fabric') > -1) {\n            args.border.color = '#201f1f';\n        }\n        else {\n            args.border.color = '#222222';\n        }\n    }\n    else if (selectedTheme.indexOf('highcontrast') > -1) {\n        args.border.color = '#000000';\n    }\n    else {\n        args.border.color = '#FFFFFF';\n    }\n};\nlet seriesColor = ['#FFE066', \"#FAB666\", \"#F68F6A\", \"#F3646A\", \"#CC555A\", \"#9C4649\"];\nexport let donutPointRender = (args) => {\n    let selectedTheme = location.hash.split('/')[1];\n    selectedTheme = selectedTheme ? selectedTheme : 'Tailwind3';\n    if (selectedTheme === 'fluent') {\n        args.fill = seriesColor[args.point.index % 10];\n    }\n    else if (selectedTheme === 'bootstrap5') {\n        args.fill = seriesColor[args.point.index % 10];\n    }\n    if (selectedTheme.indexOf('dark') > -1) {\n        if (selectedTheme.indexOf('material') > -1) {\n            args.border.color = '#303030';\n        }\n        else if (selectedTheme.indexOf('bootstrap5') > -1) {\n            args.border.color = '#212529';\n        }\n        else if (selectedTheme.indexOf('bootstrap') > -1) {\n            args.border.color = '#1A1A1A';\n        }\n        else if (selectedTheme.indexOf('fabric') > -1) {\n            args.border.color = '#201f1f';\n        }\n        else if (selectedTheme.indexOf('fluent') > -1) {\n            args.border.color = '#252423';\n        }\n        else if (selectedTheme.indexOf('bootstrap') > -1) {\n            args.border.color = '#1A1A1A';\n        }\n        else if (selectedTheme.indexOf('tailwind') > -1) {\n            args.border.color = '#1F2937';\n        }\n        else {\n            args.border.color = '#222222';\n        }\n    }\n    else if (selectedTheme.indexOf('highcontrast') > -1) {\n        args.border.color = '#000000';\n    }\n    else if (selectedTheme.indexOf('fluent2') > -1) {\n        args.fill = seriesColor[args.point.index % 10];\n    }\n    else {\n        args.border.color = '#FFFFFF';\n    }\n};\nexport let roundedCornnerPointRender = (args) => {\n    let selectedTheme = location.hash.split('/')[1];\n    selectedTheme = selectedTheme ? selectedTheme : 'Tailwind3';\n    if (selectedTheme.indexOf('dark') > -1) {\n        if (selectedTheme.indexOf('material') > -1) {\n            args.border.color = '#303030';\n        }\n        else if (selectedTheme.indexOf('bootstrap5') > -1) {\n            args.border.color = '#212529';\n        }\n        else if (selectedTheme.indexOf('bootstrap') > -1) {\n            args.border.color = '#1A1A1A';\n        }\n        else if (selectedTheme.indexOf('fabric') > -1) {\n            args.border.color = '#201f1f';\n        }\n        else if (selectedTheme.indexOf('fluent') > -1) {\n            args.border.color = '#252423';\n        }\n        else if (selectedTheme.indexOf('bootstrap') > -1) {\n            args.border.color = '#1A1A1A';\n        }\n        else if (selectedTheme.indexOf('tailwind') > -1) {\n            args.border.color = '#1F2937';\n        }\n        else {\n            args.border.color = '#222222';\n        }\n    }\n    else if (selectedTheme.indexOf('highcontrast') > -1) {\n        args.border.color = '#000000';\n    }\n    else {\n        args.border.color = '#FFFFFF';\n    }\n};\nexport let pointRenderEvent = (args) => {\n    let selectedTheme = location.hash.split('/')[1];\n    selectedTheme = selectedTheme ? selectedTheme : 'Tailwind3';\n    if (selectedTheme && selectedTheme.indexOf('fabric') > -1) {\n        args.fill = pointFabricColors[args.point.index % 10];\n        ;\n    }\n    else if (selectedTheme === 'material-dark') {\n        args.fill = pointMaterialDarkColors[args.point.index % 10];\n        ;\n    }\n    else if (selectedTheme === 'material') {\n        args.fill = pointMaterialColors[args.point.index % 10];\n    }\n    else if (selectedTheme === 'bootstrap5-dark') {\n        args.fill = pointBootstrap5DarkColors[args.point.index % pointBootstrap5DarkColors.length];\n    }\n    else if (selectedTheme === 'bootstrap5') {\n        args.fill = pointBootstrap5Colors[args.point.index % pointBootstrap5Colors.length];\n    }\n    else if (selectedTheme === 'bootstrap') {\n        args.fill = pointBootstrapColors[args.point.index % pointBootstrapColors.length];\n    }\n    else if (selectedTheme === 'bootstrap4') {\n        args.fill = pointBootstrapColors[args.point.index % pointBootstrapColors.length];\n    }\n    else if (selectedTheme === 'bootstrap-dark') {\n        args.fill = pointBootstrapColors[args.point.index % pointBootstrapColors.length];\n    }\n    else if (selectedTheme === 'highcontrast') {\n        args.fill = pointHighContrastColors[args.point.index % 10];\n    }\n    else if (selectedTheme === 'fluent-dark') {\n        args.fill = pointFluentDarkColors[args.point.index % 10];\n    }\n    else if (selectedTheme === 'fluent') {\n        args.fill = pointFluentColors[args.point.index % 10];\n    }\n    else if (selectedTheme === 'tailwind-dark') {\n        args.fill = pointTailwindDarkColors[args.point.index % 10];\n    }\n    else if (selectedTheme === 'tailwind') {\n        args.fill = pointTailwindColors[args.point.index % 10];\n    }\n    else if (selectedTheme === 'material3-dark') {\n        args.fill = pointMaterial3DarkColors[args.point.index % 10];\n    }\n    else if (selectedTheme === 'material3') {\n        args.fill = pointMaterial3Colors[args.point.index % 10];\n    }\n    else if (selectedTheme === 'fluent2') {\n        args.fill = pointFluent2Colors[args.point.index % 10];\n    }\n    else if (selectedTheme === 'fluent2-highcontrast' || selectedTheme === 'fluent2-dark') {\n        args.fill = pointFluent2HighContrastColors[args.point.index % 10];\n    }\n    else if (selectedTheme === 'tailwind3-dark') {\n        args.fill = pointTailwind3DarkColors[args.point.index % 10];\n    }\n    else if (selectedTheme === 'tailwind3') {\n        args.fill = pointTailwind3Colors[args.point.index % 10];\n    }\n    ;\n};\nexport let bubblePointRender = (args) => {\n    let selectedTheme = location.hash.split('/')[1];\n    selectedTheme = selectedTheme ? selectedTheme : 'Tailwind3';\n    if (selectedTheme && selectedTheme.indexOf('fabric') > -1) {\n        args.fill = bubbleFabricColors[args.point.index % 10];\n        args.border.color = pointFabricColors[args.point.index % 10];\n        ;\n    }\n    else if (selectedTheme === 'material-dark') {\n        args.fill = bubbleMaterialDarkColors[args.point.index % 10];\n        args.border.color = pointMaterialDarkColors[args.point.index % 10];\n        ;\n    }\n    else if (selectedTheme === 'material') {\n        args.fill = bubbleMaterialColors[args.point.index % 10];\n        args.border.color = pointMaterialColors[args.point.index % 10];\n    }\n    else if (selectedTheme === 'bootstrap5-dark') {\n        args.fill = bubbleBootstrap5DarkColors[args.point.index % 10];\n        args.border.color = pointBootstrap5DarkColors[args.point.index % 10];\n    }\n    else if (selectedTheme === 'bootstrap5') {\n        args.fill = bubbleBootstrap5Colors[args.point.index % 10];\n        args.border.color = pointBootstrap5Colors[args.point.index % 10];\n    }\n    else if (selectedTheme === 'bootstrap') {\n        args.fill = bubbleBootstrapColors[args.point.index % 10];\n        args.border.color = pointBootstrapColors[args.point.index % 10];\n    }\n    else if (selectedTheme === 'bootstrap4') {\n        args.fill = bubbleBootstrapColors[args.point.index % 10];\n        args.border.color = pointBootstrapColors[args.point.index % 10];\n    }\n    else if (selectedTheme === 'bootstrap-dark') {\n        args.fill = bubbleBootstrapColors[args.point.index % 10];\n        args.border.color = pointBootstrapColors[args.point.index % 10];\n    }\n    else if (selectedTheme === 'highcontrast') {\n        args.fill = bubbleHighContrastColors[args.point.index % 10];\n        args.border.color = pointHighContrastColors[args.point.index % 10];\n    }\n    else if (selectedTheme === 'fluent-dark') {\n        args.fill = bubbleFluentDarkColors[args.point.index % 10];\n        args.border.color = pointFluentDarkColors[args.point.index % 10];\n    }\n    else if (selectedTheme === 'fluent') {\n        args.fill = bubbleFluentColors[args.point.index % 10];\n        args.border.color = pointFluentColors[args.point.index % 10];\n    }\n    else if (selectedTheme === 'tailwind-dark') {\n        args.fill = bubbleTailwindDarkColors[args.point.index % 10];\n        args.border.color = pointTailwindDarkColors[args.point.index % 10];\n    }\n    else if (selectedTheme === 'tailwind') {\n        args.fill = bubbleTailwindColors[args.point.index % 10];\n        args.border.color = pointTailwindColors[args.point.index % 10];\n    }\n    else if (selectedTheme === 'material3') {\n        args.fill = bubbleMaterial3Colors[args.point.index % 10];\n        args.border.color = pointMaterial3Colors[args.point.index % 10];\n    }\n    else if (selectedTheme === 'material3-dark') {\n        args.fill = bubbleMaterial3DarkColors[args.point.index % 10];\n        args.border.color = pointMaterial3DarkColors[args.point.index % 10];\n    }\n    else if (selectedTheme === 'fluent2') {\n        args.fill = bubbleFluent2Colors[args.point.index % 10];\n        args.border.color = pointFluent2Colors[args.point.index % 10];\n    }\n    else if (selectedTheme === 'fluent2-highcontrast') {\n        args.fill = bubbleFluent2HighContrastColors[args.point.index % 10];\n        args.border.color = pointFluent2HighContrastColors[args.point.index % 10];\n    }\n    else if (selectedTheme === 'fluent2-dark') {\n        args.fill = bubbleFluent2DarkColors[args.point.index % 10];\n        args.border.color = pointFluent2DarkColors[args.point.index % 10];\n    }\n    else if (selectedTheme === 'tailwind3-dark') {\n        args.fill = bubbleTailwind3DarkColors[args.point.index % 10];\n        args.border.color = pointTailwind3DarkColors[args.point.index % 10];\n    }\n    else if (selectedTheme === 'tailwind3') {\n        args.fill = bubbleTailwind3Colors[args.point.index % 10];\n        args.border.color = pointTailwind3Colors[args.point.index % 10];\n    }\n};\nexport let roundedPointRender = (args) => {\n    let selectedTheme = location.hash.split('/')[1];\n    selectedTheme = selectedTheme ? selectedTheme : 'Tailwind3';\n    if (selectedTheme && selectedTheme.indexOf('fabric-dark') > -1) {\n        if (args.series.yName == \"Rate\")\n            args.fill = \"f9fafb\";\n    }\n    else if (selectedTheme && selectedTheme.indexOf('fabric') > -1) {\n        if (args.series.yName == \"Rate\")\n            args.fill = \"grey\";\n    }\n    else if (selectedTheme === 'material-dark') {\n        if (args.series.yName == \"Rate\")\n            args.fill = \"f9fafb\";\n    }\n    else if (selectedTheme === 'material') {\n        if (args.series.yName == \"Rate\")\n            args.fill = \"grey\";\n    }\n    else if (selectedTheme === 'bootstrap5-dark') {\n        if (args.series.yName == \"Rate\")\n            args.fill = \"#f9fafb\";\n    }\n    else if (selectedTheme === 'bootstrap5') {\n        if (args.series.yName == \"Rate\")\n            args.fill = \"grey\";\n    }\n    else if (selectedTheme === 'bootstrap-dark') {\n        if (args.series.yName == \"Rate\")\n            args.fill = \"f9fafb\";\n    }\n    else if (selectedTheme === 'bootstrap') {\n        if (args.series.yName == \"Rate\")\n            args.fill = \"grey\";\n    }\n    else if (selectedTheme === 'highcontrast') {\n        if (args.series.yName == \"Rate\")\n            args.fill = \"#f9fafb\";\n    }\n    else if (selectedTheme === 'fluent-dark') {\n        if (args.series.yName == \"Rate\")\n            args.fill = \"#f9fafb\";\n    }\n    else if (selectedTheme === 'fluent') {\n        if (args.series.yName == \"Rate\")\n            args.fill = \"grey\";\n    }\n    else if (selectedTheme === 'tailwind-dark') {\n        if (args.series.yName == \"Rate\")\n            args.fill = \"#f9fafb\";\n    }\n    else if (selectedTheme === 'tailwind') {\n        if (args.series.yName == \"Rate\")\n            args.fill = \"grey\";\n    }\n    else if (selectedTheme === 'material3-dark') {\n        if (args.series.yName == \"Rate\")\n            args.fill = \"f9fafb\";\n    }\n    else if (selectedTheme === 'material3') {\n        if (args.series.yName == \"Rate\")\n            args.fill = \"grey\";\n    }\n    else if (selectedTheme === 'fluent2-highcontrast' || selectedTheme === 'fluent2-dark') {\n        if (args.series.yName == \"Rate\")\n            args.fill = \"#f9fafb\";\n    }\n    else if (selectedTheme === 'fluent2') {\n        if (args.series.yName == \"Rate\")\n            args.fill = \"grey\";\n    }\n    else if (selectedTheme === 'tailwind3-dark') {\n        if (args.series.yName == \"Rate\")\n            args.fill = \"#f9fafb\";\n    }\n    else if (selectedTheme === 'tailwind3') {\n        if (args.series.yName == \"Rate\")\n            args.fill = \"grey\";\n    }\n    else {\n        if (args.series.yName == \"Rate\")\n            args.fill = \"grey\";\n    }\n};\nexport let funnelPointRender = (args) => {\n    let selectedTheme = location.hash.split('/')[1];\n    selectedTheme = selectedTheme ? selectedTheme : 'Tailwind3';\n    if (selectedTheme && selectedTheme.indexOf('fabric') > -1) {\n        args.fill = pointFabricColors[0];\n    }\n    else if (selectedTheme === 'material-dark') {\n        args.fill = pointMaterialDarkColors[0];\n        ;\n    }\n    else if (selectedTheme === 'material') {\n        args.fill = pointMaterialColors[0];\n    }\n    else if (selectedTheme === 'bootstrap5-dark') {\n        args.fill = pointBootstrap5DarkColors[0];\n    }\n    else if (selectedTheme === 'bootstrap5') {\n        args.fill = pointBootstrap5Colors[0];\n    }\n    else if (selectedTheme === 'bootstrap') {\n        args.fill = pointBootstrapColors[0];\n    }\n    else if (selectedTheme === 'bootstrap4') {\n        args.fill = pointBootstrapColors[0];\n    }\n    else if (selectedTheme === 'bootstrap-dark') {\n        args.fill = pointBootstrapColors[0];\n    }\n    else if (selectedTheme === 'highcontrast') {\n        args.fill = pointHighContrastColors[0];\n    }\n    else if (selectedTheme === 'fluent-dark') {\n        args.fill = pointFluentDarkColors[0];\n    }\n    else if (selectedTheme === 'fluent') {\n        args.fill = pointFluentColors[0];\n    }\n    else if (selectedTheme === 'tailwind-dark') {\n        args.fill = pointTailwindDarkColors[0];\n    }\n    else if (selectedTheme === 'tailwind') {\n        args.fill = pointTailwindColors[0];\n    }\n    else if (selectedTheme === 'material3-dark') {\n        args.fill = pointMaterial3DarkColors[0];\n    }\n    else if (selectedTheme === 'material3') {\n        args.fill = pointMaterial3Colors[0];\n    }\n    else if (selectedTheme === 'fluent2') {\n        args.fill = pointFluent2Colors[0];\n    }\n    else if (selectedTheme === 'fluent2-highcontrast' || selectedTheme === 'fluent2-dark') {\n        args.fill = pointFluent2HighContrastColors[0];\n    }\n    else if (selectedTheme === 'tailwind3-dark') {\n        args.fill = pointTailwind3DarkColors[0];\n    }\n    else if (selectedTheme === 'tailwind3') {\n        args.fill = pointTailwind3Colors[0];\n    }\n    ;\n};\nexport let materialColors = ['#00bdae', '#404041', '#357cd2', '#e56590', '#f8b883', '#70ad47', '#dd8abd', '#7f84e8', '#7bb4eb',\n    '#ea7a57', '#404041', '#00bdae'];\nexport let fabricColors = ['#4472c4', '#ed7d31', '#ffc000', '#70ad47', '#5b9bd5',\n    '#c1c1c1', '#6f6fe2', '#e269ae', '#9e480e', '#997300', '#4472c4', '#70ad47', '#ffc000', '#ed7d31'];\nexport let bootstrapColors = ['#a16ee5', '#f7ce69', '#55a5c2', '#7ddf1e', '#ff6ea6',\n    '#7953ac', '#b99b4f', '#407c92', '#5ea716', '#b91c52'];\nexport let highContrastColors = ['#79ECE4', '#E98272', '#DFE6B6', '#C6E773', '#BA98FF',\n    '#FA83C3', '#00C27A', '#43ACEF', '#D681EF', '#D8BC6E'];\nexport let fluentColors = ['#1AC9E6', '#DA4CB2', '#EDBB40', '#AF4BCF', '#FF7266', '#1BD565', '#EE993D', '#5887FF', '#EC548D',\n    '#7D39C0'];\nexport let fluentDarkColors = ['#1AC9E6', '#DA4CB2', '#EDBB40', '#AF4BCF', '#FF7266', '#1BD565', '#EE993D', '#5887FF', '#EC548D',\n    '#7D39C0'];\nexport let bootstrap5Colors = ['#FD7E14', '#6610F2', '#6F42C1', '#D63384', '#DC3545',\n    '#FFC107', '#198754', '#0DCAF0', '#FD7E14', '#6610F2'];\nexport let bootstrap5DarkColors = ['#8F80F4', '#FFD46D', '#6CBDFF', '#FF7F71', '#FF6DB3', '#63F5D2', '#FCAA65', '#ECFF77', '#EF8EFF',\n    '#5F82FD'];\nexport let bubbleMaterialColors = [\"rgba(0, 189, 174, 0.5)\", \"rgba(64, 64, 65, 0.5)\", \"rgba(53, 124, 210, 0.5)\", \"rgba(229, 101, 144, 0.5)\", \"rgba(248, 184, 131, 0.5)\", \"rgba(112, 173, 71, 0.5)\", \"rgba(221, 138, 189, 0.5)\",\n    \"rgba(127, 132, 232, 0.5)\", \"rgba(123, 180, 235, 0.5)\", \"rgba(234, 122, 87, 0.5)\", \"rgba(64, 64, 65, 0.5)\", \"rgba(0, 189, 174, 0.5)\"];\nexport let bubbleFabricColors = [\"rgba(68, 114, 196, 0.5)\", \"rgba(237, 125, 49, 0.5)\", \"rgba(255, 192, 0, 0.5)\", \"rgba(112, 173, 71, 0.5)\", \"rgba(91, 155, 213, 0.5)\", \"rgba(193, 193, 193, 0.5)\", \"rgba(111, 111, 226, 0.5)\",\n    \"rgba(226, 105, 174, 0.5)\", \"rgba(158, 72, 14, 0.5)\", \"rgba(153, 115, 0, 0.5)\", \"rgba(68, 114, 196, 0.5)\", \"rgba(112, 173, 71, 0.5)\", \"rgba(255, 192, 0, 0.5)\", \"rgba(237, 125, 49, 0.5)\"];\nexport let bubbleBootstrapColors = [\"rgba(161, 110, 229, 0.5)\", \"rgba(247, 206, 105, 0.5)\", \"rgba(85, 165, 194, 0.5)\", \"rgba(125, 223, 30, 0.5)\", \"rgba(255, 110, 166, 0.5)\", \"rgba(121, 83, 172, 0.5)\",\n    \"rgba(185, 155, 79, 0.5)\", \"rgba(64, 124, 146, 0.5)\", \"rgba(94, 167, 22, 0.5)\", \"rgba(185, 28, 82, 0.5)\"];\nexport let bubbleHighContrastColors = [\"rgba(121, 236, 228, 0.5)\", \"rgba(233, 130, 114, 0.5)\", \"rgba(223, 230, 182, 0.5)\", \"rgba(198, 231, 115, 0.5)\", \"rgba(186, 152, 255, 0.5)\", \"rgba(250, 131, 195, 0.5)\", \"rgba(0, 194, 122, 0.5)\",\n    \"rgba(67, 172, 239, 0.5)\", \"rgba(214, 129, 239, 0.5)\", \"rgba(216, 188, 110, 0.5)\"];\nexport let bubbleFluentColors = [\"rgba(26, 201, 230, 0.5)\", \"rgba(218, 76, 178, 0.5)\", \"rgba(237, 187, 64, 0.5)\", \"rgba(175, 75, 207, 0.5)\", \"rgba(255, 114, 102, 0.5)\", \"rgba(27, 213, 101, 0.5)\", \"rgba(238, 153, 61, 0.5)\",\n    \"rgba(88, 135, 255, 0.5)\", \"rgba(236, 84, 141, 0.5)\", \"rgba(125, 57, 192, 0.5)\"];\nexport let bubbleMaterialDarkColors = [\"rgba(158, 203, 8, 0.5)\", \"rgba(86, 174, 255, 0.5)\", \"rgba(197, 122, 255, 0.5)\", \"rgba(97, 234, 169, 0.5)\", \"rgba(235, 187, 62, 0.5)\", \"rgba(244, 92, 92, 0.5)\", \"rgba(138, 119, 255, 0.5)\",\n    \"rgba(99, 199, 255, 0.5)\", \"rgba(255, 132, 176, 0.5)\", \"rgba(247, 201, 40, 0.5)\"];\nexport let bubbleFluentDarkColors = [\"rgba(26, 201, 230, 0.5)\", \"rgba(218, 76, 178, 0.5)\", \"rgba(237, 187, 64, 0.5)\", \"rgba(175, 75, 207, 0.5)\", \"rgba(255, 114, 102, 0.5)\", \"rgba(27, 213, 101, 0.5)\", \"rgba(238, 153, 61, 0.5)\",\n    \"rgba(88, 135, 255, 0.5)\", \"rgba(236, 84, 141, 0.5)\", \"rgba(125, 57, 192, 0.5)\"];\nexport let bubbleTailwindColors = [\"rgba(90, 97, 246, 0.5)\", \"rgba(101, 163, 13, 0.5)\", \"rgba(51, 65, 85, 0.5)\", \"rgba(20, 184, 166, 0.5)\", \"rgba(139, 92, 246, 0.5)\", \"rgba(3, 105, 161, 0.5)\", \"rgba(249, 115, 22, 0.5)\",\n    \"rgba(147, 51, 234, 0.5)\", \"rgba(245, 158, 11, 0.5)\", \"rgba(21, 128, 61, 0.5)\"];\nexport let bubbleTailwindDarkColors = [\"rgba(139, 92, 246, 0.5)\", \"rgba(34, 211, 238, 0.5)\", \"rgba(248, 113, 113, 0.5)\", \"rgba(74, 222, 128, 0.5)\", \"rgba(232, 121, 249, 0.5)\", \"rgba(252, 211, 77, 0.5)\", \"rgba(249, 115, 22, 0.5)\",\n    \"rgba(45, 212, 191, 0.5)\", \"rgba(244, 114, 182, 0.5)\", \"rgba(16, 185, 129, 0.5)\"];\nexport let bubbleTailwind3Colors = [\"rgba(47, 64, 116, 0.5)\", \"rgba(3, 180, 180, 0.5)\", \"rgba(13, 114, 222, 0.5)\", \"rgba(255, 87, 51, 0.5)\", \"rgba(214, 51, 132, 0.5)\", \"rgba(243, 156, 18, 0.5)\", \"rgba(239, 41, 31, 0.5)\", \"rgba(145, 200, 34, 0.5)\", \"rgba(47, 64, 116, 0.5)\", \"rgba(3, 180, 180, 0.5)\"];\nexport let bubbleTailwind3DarkColors = [\"rgba(128, 41, 241, 0.5)\", \"rgba(26, 188, 156, 0.5)\", \"rgba(13, 114, 222, 0.5)\", \"rgba(255, 87, 51, 0.5)\", \"rgba(214, 51, 132, 0.5)\", \"rgba(243, 156, 18, 0.5)\", \"rgba(239, 41, 31, 0.5)\", \"rgba(145, 200, 34, 0.5)\", \"rgba(128, 41, 241, 0.5)\", \"rgba(26, 188, 156, 0.5)\"];\nexport let bubbleBootstrap5Colors = ['rgba(253, 126, 20, 0.5)', 'rgba(102, 16, 242, 0.5)', 'rgba(111, 66, 193, 0.5)', 'rgba(214, 51, 132, 0.5)', 'rgba(220, 53, 69, 0.5)', 'rgba(255, 193, 7, 0.5)', 'rgba(25, 135, 84, 0.5)', 'rgba(13, 202, 240, 0.5)', 'rgba(253, 126, 20, 0.5)', 'rgba(102, 16, 242, 0.5)', 'rgba(111, 66, 193, 0.5)', 'rgba(214, 51, 132, 0.5)', 'rgba(220, 53, 69, 0.5)'];\nexport let bubbleBootstrap5DarkColors = ['rgba(253, 126, 20, 0.5)', 'rgba(102, 16, 242, 0.5)', 'rgba(111, 66, 193, 0.5)', 'rgba(214, 51, 132, 0.5)', 'rgba(220, 53, 69, 0.5)', 'rgba(255, 193, 7, 0.5)', 'rgba(25, 135, 84, 0.5)', 'rgba(13, 202, 240, 0.5)', 'rgba(253, 126, 20, 0.5)', 'rgba(102, 16, 242, 0.5)', 'rgba(111, 66, 193, 0.5)', 'rgba(214, 51, 132, 0.5)', 'rgba(220, 53, 69, 0.5)'];\nexport let bubbleMaterial3Colors = [\"rgba(99, 85, 199, 0.5)\", \"rgba(0, 174, 224, 0.5)\", \"rgba(255, 180, 0, 0.5)\", \"rgba(247, 82, 63, 0.5)\", \"rgba(150, 60, 112, 0.5)\", \"rgba(253, 116, 0, 0.5)\", \"rgba(75, 224, 188, 0.5)\",\n    \"rgba(33, 150, 245, 0.5)\", \"rgba(222, 61, 138, 0.5)\", \"rgba(22, 47, 136, 0.5)\"];\nexport let bubbleMaterial3DarkColors = [\"rgba(78, 170, 255, 0.5)\", \"rgba(250, 78, 171, 0.5)\", \"rgba(255, 245, 0, 0.5)\", \"rgba(23, 234, 88, 0.5)\", \"rgba(56, 255, 231, 0.5)\", \"rgba(255, 158, 69, 0.5)\", \"rgba(179, 243, 47, 0.5)\",\n    \"rgba(185, 60, 228, 0.5)\", \"rgba(252, 86, 100, 0.5)\", \"rgba(155, 85, 255, 0.5)\"];\nexport let bubbleFluent2DarkColors = [\"rgba(155, 180, 73, 0.5)\", \"rgba(42, 114, 213, 0.5)\", \"rgba(67, 183, 134, 0.5)\", \"rgba(63, 87, 154, 0.5)\", \"rgba(88, 78, 198, 0.5)\", \"rgba(232, 95, 156, 0.5)\", \"rgba(110, 122, 137, 0.5)\", \"rgba(234, 98, 102, 0.5)\",\n    \"rgba(11, 106, 11, 0.5)\", \"rgba(193, 156, 0, 0.5)\"];\nexport let keyFabricDark = [\"#4472C4\", \"#ED7D31\", \"#FFC000\", \"#70AD47\"];\nexport let keyBootstrap4Colors = ['#a16ee5', '#f7ce69', '#55a5c2', '#7ddf1e', '#ff6ea6', '#7953ac', '#b99b4f', '#407c92', '#5ea716', '#b91c52'];\nexport let keyBootstrapdarkColors = [\"#a16ee5\", \"#f7ce69\", \"#55a5c2\", \"#7ddf1e\", \"#ff6ea6\", \"#7953ac\", \"#b99b4f\", \"#407c92\", \"#5ea716\", \"#b91c52\"];\nexport let pointMaterialColors = [\"#00bdae\", \"#404041\", \"#357cd2\", \"#e56590\", \"#f8b883\", \"#70ad47\", \"#dd8abd\", \"#7f84e8\", \"#7bb4eb\",\n    \"#ea7a57\", \"#404041\", \"#00bdae\"];\nexport let pointFabricColors = [\"#4472c4\", \"#ed7d31\", \"#ffc000\", \"#70ad47\", \"#5b9bd5\", \"#c1c1c1\", \"#6f6fe2\", \"#e269ae\", \"#9e480e\",\n    \"#997300\", \"#4472c4\", \"#70ad47\", \"#ffc000\", \"#ed7d31\"];\nexport let pointBootstrapColors = [\"#a16ee5\", \"#f7ce69\", \"#55a5c2\", \"#7ddf1e\", \"#ff6ea6\", \"#7953ac\", \"#b99b4f\", \"#407c92\", \"#5ea716\",\n    \"#b91c52\"];\nexport let pointHighContrastColors = [\"#79ECE4\", \"#E98272\", \"#DFE6B6\", \"#C6E773\", \"#BA98FF\", \"#FA83C3\", \"#00C27A\", \"#43ACEF\", \"#D681EF\",\n    \"#D8BC6E\"];\nexport let pointFluentColors = ['#1AC9E6', '#DA4CB2', '#EDBB40', '#AF4BCF', '#FF7266', '#1BD565', '#EE993D', '#5887FF', '#EC548D',\n    '#7D39C0'];\nexport let pointMaterialDarkColors = [\"#9ECB08\", \"#56AEFF\", \"#C57AFF\", \"#61EAA9\", \"#EBBB3E\", \"#F45C5C\", \"#8A77FF\", \"#63C7FF\", \"#FF84B0\",\n    \"#F7C928\"];\nexport let pointFluentDarkColors = ['#1AC9E6', '#DA4CB2', '#EDBB40', '#AF4BCF', '#FF7266', '#1BD565', '#EE993D', '#5887FF', '#EC548D',\n    '#7D39C0'];\nexport let pointTailwindColors = [\"#5A61F6\", \"#65A30D\", \"#334155\", \"#14B8A6\", \"#8B5CF6\", \"#0369A1\", \"#F97316\", \"#9333EA\", \"#F59E0B\", \"#15803D\"];\nexport let pointTailwindDarkColors = [\"#8B5CF6\", \"#22D3EE\", \"#F87171\", \"#4ADE80\", \"#E879F9\", \"#FCD34D\", \"#F97316\", \"#2DD4BF\", \"#F472B6\", \"#10B981\"];\nexport let pointTailwind3Colors = ['#2F4074', '#03B4B4', '#0D72DE', '#FF5733', '#D63384', '#F39C12', '#EF291F', '#91C822', '#2F4074', '#03B4B4'];\nexport let pointTailwind3DarkColors = ['#8029F1', '#1ABC9C', '#0D72DE', '#FF5733', '#D63384', '#F39C12', '#EF291F', '#91C822', '#8029F1', '#1ABC9C'];\nexport let pointBootstrap5Colors = ['#FD7E14', '#6610F2', '#6F42C1', '#D63384', '#DC3545', '#FFC107', '#198754', '#0DCAF0'];\nexport let pointBootstrap5DarkColors = ['#FD7E14', '#6610F2', '#6F42C1', '#D63384', '#DC3545', '#FFC107', '#198754', '#0DCAF0'];\nexport let pointMaterial3Colors = [\"#6355C7\", \"#00AEE0\", \"#FFB400\", \"#F7523F\", \"#963C70\", \"#FD7400\", \"#4BE0BC\", \"#2196F5\", \"#DE3D8A\", \"#162F88\"];\nexport let pointMaterial3DarkColors = [\"#4EAAFF\", \"#FA4EAB\", \"#FFF500\", \"#17EA58\", \"#38FFE7\", \"#FF9E45\", \"#B3F32F\", \"#B93CE4\", \"#FC5664\", \"#9B55FF\"];\nexport let fluent2Colors = [\"#6200EE\", \"#09AF74\", \"#0076E5\", \"#CB3587\", \"#E7910F\", \"#0364DE\", \"#66CD15\", \"#F3A93C\", \"#107C10\",\n    \"#C19C00\"];\nexport let fluent2HighContrastColors = [\"#9BB449\", \"#2A72D5\", \"#43B786\", \"#3F579A\", \"#584EC6\", \"#E85F9C\", \"#6E7A89\", \"#EA6266\",\n    \"#0B6A0B\", \"#C19C00\"];\nexport let fluent2DarkColors = [\"#9BB449\", \"#2A72D5\", \"#43B786\", \"#3F579A\", \"#584EC6\", \"#E85F9C\", \"#6E7A89\", \"#EA6266\",\n    \"#0B6A0B\", \"#C19C00\"];\nexport let bubbleFluent2Colors = [\"rgba(98, 0, 238, 0.5)\", \"rgba(9, 175, 116, 0.5)\", \"rgba(0, 118, 229, 0.5)\", \"rgba(203, 53, 135, 0.5)\", \"rgba(231, 145, 15, 0.5)\", \"rgba(3, 100, 222, 0.5)\", \"rgba(102, 205, 21, 0.5)\", \"rgba(243, 169, 60, 0.5)\",\n    \"rgba(16, 124, 16, 0.5)\", \"rgba(193, 156, 0, 0.5)\"];\nexport let bubbleFluent2HighContrastColors = [\"rgba(155, 180, 73, 0.5)\", \"rgba(42, 114, 213, 0.5)\", \"rgba(67, 183, 134, 0.5)\", \"rgba(63, 87, 154, 0.5)\", \"rgba(88, 78, 198, 0.5)\", \"rgba(232, 95, 156, 0.5)\", \"rgba(110, 122, 137, 0.5)\", \"rgba(234, 98, 102, 0.5)\",\n    \"rgba(11, 106, 11, 0.5)\", \"rgba(193, 156, 0, 0.5)\"];\nexport let pointFluent2Colors = [\"#6200EE\", \"#09AF74\", \"#0076E5\", \"#CB3587\", \"#E7910F\", \"#0364DE\", \"#66CD15\", \"#F3A93C\", \"#107C10\",\n    \"#C19C00\"];\nexport let pointFluent2HighContrastColors = [\"#9BB449\", \"#2A72D5\", \"#43B786\", \"#3F579A\", \"#584EC6\", \"#E85F9C\", \"#6E7A89\", \"#EA6266\",\n    \"#0B6A0B\", \"#C19C00\"];\nexport let pointFluent2DarkColors = [\"#9BB449\", \"#2A72D5\", \"#43B786\", \"#3F579A\", \"#584EC6\", \"#E85F9C\", \"#6E7A89\", \"#EA6266\", \"#0B6A0B\", \"#C19C00\"];\n","index.html":"<!DOCTYPE html>\n<html>\n<head>\n    <title>Syncfusion React Sample</title>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\n    <meta name=\"author\" content=\"Syncfusion\" />\n    <link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\n</head>\n\n<body class=\"{{theme}}\">\n     <style>\n            .control-section\n            {\n                margin-top: 100px;\n            }\n    </style>\n    <div id='sample'>\n</body>\n</html>\n","index.js":"import { createRoot } from 'react-dom/client';\nimport './index.css';\n/**\n * Sample for SplineAnimation series\n */\nimport * as React from \"react\";\nimport { ChartComponent, SeriesCollectionDirective, SplineAreaSeries, BubbleSeries, StepLineSeries, ScatterSeries, BarSeries, RangeColumnSeries, ColumnSeries, SeriesDirective, Inject, LineSeries, SplineSeries, Category, DataLabel, Highlight } from '@syncfusion/ej2-react-charts';\nimport { SampleBase } from './sample-base';\nimport { TabComponent, TabItemDirective, TabItemsDirective } from '@syncfusion/ej2-react-navigations';\nimport { loadChartTheme, bubblePointRender } from './theme-color';\nexport let splinedata = [\n    { x: '1', y: 30 },\n    { x: '2', y: 10 },\n    { x: '3', y: 80 },\n    { x: '4', y: 20 },\n    { x: '5', y: 30, },\n    { x: '6', y: 5 },\n    { x: '7', y: 69 },\n    { x: '8', y: 15 },\n    { x: '9', y: 60 },\n    { x: '10', y: 70 }\n];\nexport let linedata = [\n    { x: '1', y: 10 },\n    { x: '2', y: 30 },\n    { x: '3', y: 80 },\n    { x: '4', y: 20 },\n    { x: '5', y: 30, },\n    { x: '6', y: 40 },\n    { x: '7', y: 69 },\n    { x: '8', y: 15 },\n    { x: '9', y: 60 },\n    { x: '10', y: 70 }\n];\nexport let columndata = [\n    { x: '1', y: 90 },\n    { x: '2', y: 10 },\n    { x: '3', y: 50 },\n    { x: '4', y: 20 },\n    { x: '5', y: 30, },\n    { x: '6', y: 70 },\n    { x: '7', y: 9 }\n];\nexport let areadata = [\n    { x: '1', y: 10 },\n    { x: '2', y: 20 },\n    { x: '3', y: 80 },\n    { x: '4', y: 15 },\n    { x: '5', y: 30, },\n    { x: '6', y: 40 },\n    { x: '7', y: 69 },\n    { x: '8', y: 15 }\n];\nexport let bardata = [\n    { x: '1', y: 90 },\n    { x: '2', y: 10 },\n    { x: '3', y: 50 },\n    { x: '4', y: 20 },\n    { x: '5', y: 30, },\n    { x: '6', y: 70 },\n    { x: '7', y: 9 }\n];\nexport let rangecolumndata = [\n    { x: '1', low: 30, high: 60 },\n    { x: '2', low: 42, high: 73 },\n    { x: '3', low: 35, high: 80 },\n    { x: '4', low: 20, high: 50 },\n    { x: '5', low: 30, high: 80 },\n    { x: '6', low: 10, high: 40 },\n    { x: '7', low: 15, high: 69 }\n];\nexport let steplinedata = [\n    { x: '1', y: 10 },\n    { x: '2', y: 30 },\n    { x: '3', y: 80 },\n    { x: '4', y: 20 },\n    { x: '5', y: 30, },\n    { x: '6', y: 40 },\n    { x: '7', y: 69 },\n    { x: '8', y: 15 },\n    { x: '9', y: 60 },\n    { x: '10', y: 70 }\n];\nexport let bubbledata = [\n    { x: '1.5', y: 80, size: 5 },\n    { x: '2', y: 60, size: 10 },\n    { x: '3', y: 70, size: 8 },\n    { x: '4', y: 13, size: 6 },\n    { x: '5', y: 30, size: 9 },\n    { x: '6', y: 20, size: 7 },\n    { x: '6.5', y: 40, size: 11 }\n];\nfunction shuffleArray(array) {\n    for (let i = array.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [array[i], array[j]] = [array[j], array[i]];\n    }\n    return array;\n}\n;\n;\nexport let scatterdata = shuffleArray([\n    { x: '1', y: 15, y1: 10 },\n    { x: '1.25', y: 35, y1: 20 },\n    { x: '1.5', y: 60, y1: 50 },\n    { x: '1.75', y: 25, y1: 15 },\n    { x: '2', y: 25, y1: 35 },\n    { x: '2.25', y: 30, y1: 30 },\n    { x: '2.5', y: 45, y1: 30 },\n    { x: '2.75', y: 40, y1: 20 },\n    { x: '3', y: 30, y1: 45 },\n    { x: '3.25', y: 55, y1: 35 },\n    { x: '3.5', y: 65, y1: 20 },\n    { x: '3.75', y: 40, y1: 50 },\n    { x: '4', y: 40, y1: 60 },\n    { x: '4.25', y: 60, y1: 25 },\n    { x: '4.5', y: 15, y1: 25 },\n    { x: '4.75', y: 75, y1: 55 },\n    { x: '5', y: 50, y1: 40 },\n    { x: '5.25', y: 45, y1: 30 },\n    { x: '5.5', y: 20, y1: 15 },\n    { x: '5.75', y: 65, y1: 35 },\n    { x: '6', y: 65, y1: 65 },\n    { x: '6.25', y: 35, y1: 50 },\n    { x: '6.5', y: 70, y1: 35 },\n    { x: '6.75', y: 50, y1: 40 },\n    { x: '7', y: 25, y1: 60 },\n    { x: '7.25', y: 60, y1: 45 },\n    { x: '7.5', y: 45, y1: 20 },\n    { x: '7.75', y: 30, y1: 15 },\n    { x: '8', y: 60, y1: 50 },\n    { x: '8.25', y: 25, y1: 35 },\n    { x: '8.5', y: 30, y1: 10 },\n    { x: '8.75', y: 45, y1: 25 },\n    { x: '9', y: 75, y1: 45 },\n    { x: '9.25', y: 40, y1: 50 },\n    { x: '9.5', y: 20, y1: 15 },\n    { x: '9.75', y: 30, y1: 40 },\n    { x: '10', y: 60, y1: 25 }\n]);\nexport let scatterdata1 = shuffleArray([\n    { x: '1', y: 60, y1: 45 },\n    { x: '1.25', y: 40, y1: 30 },\n    { x: '1.5', y: 25, y1: 10 },\n    { x: '1.75', y: 15, y1: 50 },\n    { x: '2', y: 15, y1: 65 },\n    { x: '2.25', y: 35, y1: 50 },\n    { x: '2.5', y: 40, y1: 30 },\n    { x: '2.75', y: 60, y1: 25 },\n    { x: '3', y: 65, y1: 25 },\n    { x: '3.25', y: 30, y1: 15 },\n    { x: '3.5', y: 20, y1: 60 },\n    { x: '3.75', y: 50, y1: 40 },\n    { x: '4', y: 50, y1: 35 },\n    { x: '4.25', y: 55, y1: 50 },\n    { x: '4.5', y: 75, y1: 15 },\n    { x: '4.75', y: 45, y1: 60 },\n    { x: '5', y: 45, y1: 50 },\n    { x: '5.25', y: 35, y1: 30 },\n    { x: '5.5', y: 30, y1: 20 },\n    { x: '5.75', y: 55, y1: 40 },\n    { x: '6', y: 70, y1: 55 },\n    { x: '6.25', y: 60, y1: 25 },\n    { x: '6.5', y: 15, y1: 40 },\n    { x: '6.75', y: 40, y1: 15 },\n    { x: '7', y: 30, y1: 25 },\n    { x: '7.25', y: 60, y1: 35 },\n    { x: '7.5', y: 60, y1: 35 },\n    { x: '7.75', y: 25, y1: 15 },\n    { x: '8', y: 25, y1: 10 },\n    { x: '8.25', y: 50, y1: 30 },\n    { x: '8.5', y: 45, y1: 65 },\n    { x: '8.75', y: 55, y1: 20 },\n    { x: '9', y: 50, y1: 60 },\n    { x: '9.25', y: 30, y1: 45 },\n    { x: '9.5', y: 10, y1: 20 },\n    { x: '9.75', y: 40, y1: 35 },\n    { x: '10', y: 55, y1: 15 }\n]);\nexport let scatterdata2 = shuffleArray([\n    { x: '1', y: 70, y1: 25 },\n    { x: '1.25', y: 55, y1: 40 },\n    { x: '1.5', y: 45, y1: 40 },\n    { x: '1.75', y: 30, y1: 45 },\n    { x: '2', y: 20, y1: 55 },\n    { x: '2.25', y: 30, y1: 45 },\n    { x: '2.5', y: 10, y1: 35 },\n    { x: '2.75', y: 25, y1: 15 },\n    { x: '3', y: 50, y1: 20 },\n    { x: '3.25', y: 60, y1: 30 },\n    { x: '3.5', y: 25, y1: 60 },\n    { x: '3.75', y: 50, y1: 45 },\n    { x: '4', y: 30, y1: 15 },\n    { x: '4.25', y: 55, y1: 20 },\n    { x: '4.5', y: 65, y1: 75 },\n    { x: '4.75', y: 45, y1: 35 },\n    { x: '5', y: 60, y1: 45 },\n    { x: '5.25', y: 35, y1: 10 },\n    { x: '5.5', y: 15, y1: 30 },\n    { x: '5.75', y: 30, y1: 60 },\n    { x: '6', y: 55, y1: 50 },\n    { x: '6.25', y: 25, y1: 45 },\n    { x: '6.5', y: 35, y1: 10 },\n    { x: '6.75', y: 20, y1: 30 },\n    { x: '7', y: 40, y1: 65 },\n    { x: '7.25', y: 30, y1: 45 },\n    { x: '7.5', y: 30, y1: 60 },\n    { x: '7.75', y: 45, y1: 30 },\n    { x: '8', y: 60, y1: 45 },\n    { x: '8.25', y: 50, y1: 40 },\n    { x: '8.5', y: 20, y1: 25 },\n    { x: '8.75', y: 70, y1: 15 },\n    { x: '9', y: 75, y1: 15 },\n    { x: '9.25', y: 30, y1: 50 },\n    { x: '9.5', y: 50, y1: 35 },\n    { x: '9.75', y: 55, y1: 20 },\n    { x: '10', y: 15, y1: 70 }\n]);\nexport let scatterdata3 = shuffleArray([\n    { x: '1', y: 20, y1: 30 },\n    { x: '1.25', y: 30, y1: 20 },\n    { x: '1.5', y: 35, y1: 60 },\n    { x: '1.75', y: 40, y1: 30 },\n    { x: '2', y: 55, y1: 20 },\n    { x: '2.25', y: 45, y1: 35 },\n    { x: '2.5', y: 60, y1: 45 },\n    { x: '2.75', y: 25, y1: 30 },\n    { x: '3', y: 45, y1: 15 },\n    { x: '3.25', y: 50, y1: 45 },\n    { x: '3.5', y: 50, y1: 35 },\n    { x: '3.75', y: 15, y1: 40 },\n    { x: '4', y: 15, y1: 70 },\n    { x: '4.25', y: 45, y1: 55 },\n    { x: '4.5', y: 75, y1: 10 },\n    { x: '4.75', y: 60, y1: 25 },\n    { x: '5', y: 30, y1: 55 },\n    { x: '5.25', y: 45, y1: 35 },\n    { x: '5.5', y: 60, y1: 25 },\n    { x: '5.75', y: 40, y1: 45 },\n    { x: '6', y: 10, y1: 50 },\n    { x: '6.25', y: 20, y1: 65 },\n    { x: '6.5', y: 65, y1: 40 },\n    { x: '6.75', y: 30, y1: 30 },\n    { x: '7', y: 25, y1: 65 },\n    { x: '7.25', y: 35, y1: 40 },\n    { x: '7.5', y: 20, y1: 45 },\n    { x: '7.75', y: 60, y1: 50 },\n    { x: '8', y: 35, y1: 60 },\n    { x: '8.25', y: 25, y1: 45 },\n    { x: '8.5', y: 30, y1: 15 },\n    { x: '8.75', y: 50, y1: 70 },\n    { x: '9', y: 45, y1: 75 },\n    { x: '9.25', y: 20, y1: 35 },\n    { x: '9.5', y: 40, y1: 50 },\n    { x: '9.75', y: 45, y1: 30 },\n    { x: '10', y: 50, y1: 25 }\n]);\nexport let scatterdata4 = shuffleArray([\n    { x: '1', y: 50, y1: 60 },\n    { x: '1.25', y: 45, y1: 55 },\n    { x: '1.5', y: 15, y1: 30 },\n    { x: '1.75', y: 55, y1: 20 },\n    { x: '2', y: 60, y1: 45 },\n    { x: '2.25', y: 55, y1: 35 },\n    { x: '2.5', y: 55, y1: 20 },\n    { x: '2.75', y: 30, y1: 50 },\n    { x: '3', y: 70, y1: 50 },\n    { x: '3.25', y: 25, y1: 35 },\n    { x: '3.5', y: 30, y1: 35 },\n    { x: '3.75', y: 45, y1: 60 },\n    { x: '4', y: 65, y1: 15 },\n    { x: '4.25', y: 20, y1: 70 },\n    { x: '4.5', y: 25, y1: 75 },\n    { x: '4.75', y: 35, y1: 25 },\n    { x: '5', y: 40, y1: 60 },\n    { x: '5.25', y: 50, y1: 30 },\n    { x: '5.5', y: 20, y1: 10 },\n    { x: '5.75', y: 35, y1: 40 },\n    { x: '6', y: 35, y1: 45 },\n    { x: '6.25', y: 30, y1: 25 },\n    { x: '6.5', y: 30, y1: 70 },\n    { x: '6.75', y: 60, y1: 20 },\n    { x: '7', y: 45, y1: 25 },\n    { x: '7.25', y: 40, y1: 35 },\n    { x: '7.5', y: 20, y1: 55 },\n    { x: '7.75', y: 50, y1: 40 },\n    { x: '8', y: 50, y1: 40 },\n    { x: '8.25', y: 35, y1: 55 },\n    { x: '8.5', y: 60, y1: 35 },\n    { x: '8.75', y: 30, y1: 60 },\n    { x: '9', y: 10, y1: 65 },\n    { x: '9.25', y: 25, y1: 50 },\n    { x: '9.5', y: 40, y1: 50 },\n    { x: '9.75', y: 30, y1: 25 },\n    { x: '10', y: 65, y1: 30 },\n]);\nexport let headertext = [\n    { text: \"Line\" },\n    { text: \"Column\" },\n    { text: \"Spline\" },\n    { text: \"Area\" },\n    { text: \"Bar\" },\n    { text: \"Bubble\" },\n    { text: \"Scatter\" },\n    { text: \"Step line\" },\n    { text: \"Range column\" }\n];\nconst SAMPLE_CSS = `\n    .control-fluid {\n\t\tpadding: 0px !important;\n\t}`;\nexport class SeriesAnimation extends SampleBase {\n    intervalId = null;\n    splineIntervalId = null;\n    columnIntervalId = null;\n    areaIntervalId = null;\n    barIntervalId = null;\n    rangeIntervalId = null;\n    stepIntervalId = null;\n    scatterIntervalId = null;\n    bubbleIntervalId = null;\n    componentWillUnmount() {\n        this.clearIntervalFn();\n        this.splineClearIntervalFn();\n        this.columnClearIntervalFn();\n        this.areaClearIntervalFn();\n        this.barClearIntervalFn();\n        this.rangeClearIntervalFn();\n        this.stepClearIntervalFn();\n        this.scatterClearIntervalFn();\n        this.bubbleClearIntervalFn();\n    }\n    render() {\n        return (<div className=\"control-pane\">\n                <div className=\"control-section\">\n                    <TabComponent cssClass='responsive-mode' heightAdjustMode='None' overflowMode={\"Scrollable\"} headerPlacement=\"Top\" height=\"500px\" selected={this.tabSelected.bind(this)}>\n                        <TabItemsDirective>\n                            <TabItemDirective header={headertext[0]} content={() => <this.LineTemplate />}/>\n                            <TabItemDirective header={headertext[1]} content={() => <this.ColumnTemplate />}/>\n                            <TabItemDirective header={headertext[2]} content={() => <this.SplineTemplate />}/>\n                            <TabItemDirective header={headertext[3]} content={() => <this.AreaTemplate />}/>\n                            <TabItemDirective header={headertext[4]} content={() => <this.BarTemplate />}/>\n                            <TabItemDirective header={headertext[5]} content={() => <this.BubbleTemplate />}/>\n                            <TabItemDirective header={headertext[6]} content={() => <this.ScatterTemplate />}/>\n                            <TabItemDirective header={headertext[7]} content={() => <this.StepLineTemplate />}/>\n                            <TabItemDirective header={headertext[8]} content={() => <this.RangeColumnTemplate />}/>\n                        </TabItemsDirective>\n                    </TabComponent>\n                </div>\n            </div>);\n    }\n    pointRender(args) {\n        bubblePointRender(args);\n    }\n    ;\n    onsplineLoad(args) {\n        let chart = document.getElementById('splineCharts');\n        chart.setAttribute('title', '');\n    }\n    ;\n    splineLoad(args) {\n        loadChartTheme(args);\n        this.splineClearIntervalFn();\n        this.splineIntervalId = setInterval(() => {\n            let container = document.getElementById('splineCharts');\n            if (container && container.children.length > 0 && container.id === args.chart.element.id) {\n                const newData = splinedata.map((item) => {\n                    const min = 10;\n                    const max = 90;\n                    const value = Math.floor(Math.random() * (max - min + 1)) + min;\n                    return { x: item.x, y: value };\n                });\n                if (args.chart.series.length > 0) {\n                    args.chart.series[0].setData(newData, 1400);\n                }\n            }\n            else {\n                this.splineClearIntervalFn();\n            }\n        }, 2000);\n    }\n    ;\n    splineClearIntervalFn = () => {\n        if (this.splineIntervalId) {\n            clearInterval(this.splineIntervalId);\n            this.splineIntervalId = null;\n        }\n    };\n    generateRandomValues(item) {\n        const min = 10;\n        const max = 95;\n        const value = Math.floor(Math.random() * (max - min + 1)) + min;\n        return { x: item.x, y: value };\n    }\n    ;\n    generateRandomBubbleData(item) {\n        const minYValue = 5;\n        const maxYValue = 95;\n        const randomYValue = Math.random() * (maxYValue - minYValue) + minYValue;\n        const minSize = 3.5;\n        const maxSize = 9.5;\n        const randomSize = Math.random() * (maxSize - minSize) + minSize;\n        return { ...item, y: randomYValue, size: randomSize };\n    }\n    ;\n    onlineLoad(args) {\n        let chart = document.getElementById('lineCharts');\n        chart.setAttribute('title', '');\n    }\n    ;\n    lineload(args) {\n        loadChartTheme(args);\n        this.clearIntervalFn();\n        this.intervalId = setInterval(() => {\n            let container = document.getElementById('lineCharts');\n            if (container && container.children.length > 0 && container.id === args.chart.element.id) {\n                const newData = linedata.map(this.generateRandomValues);\n                if (args.chart && args.chart.series.length > 0) {\n                    args.chart.series[0].setData(newData, 1400);\n                }\n            }\n            else {\n                this.clearIntervalFn();\n            }\n        }, 2000);\n    }\n    ;\n    clearIntervalFn = () => {\n        if (this.intervalId) {\n            clearInterval(this.intervalId);\n            this.intervalId = null;\n        }\n    };\n    oncolumnLoad(args) {\n        let chart = document.getElementById('columnCharts');\n        chart.setAttribute('title', '');\n    }\n    ;\n    columnload(args) {\n        loadChartTheme(args);\n        this.columnClearIntervalFn();\n        this.columnIntervalId = setInterval(() => {\n            let container = document.getElementById('columnCharts');\n            if (container && container.children.length > 0 && container.id === args.chart.element.id) {\n                const newData = columndata.map(this.generateRandomValues);\n                if (args.chart.series.length > 0) {\n                    args.chart.series[0].setData(newData, 1400);\n                }\n            }\n            else {\n                this.columnClearIntervalFn();\n            }\n        }, 2000);\n    }\n    ;\n    columnClearIntervalFn = () => {\n        if (this.columnIntervalId) {\n            clearInterval(this.columnIntervalId);\n            this.columnIntervalId = null;\n        }\n    };\n    onareaLoad(args) {\n        let chart = document.getElementById('areaCharts');\n        chart.setAttribute('title', '');\n    }\n    ;\n    areaload(args) {\n        loadChartTheme(args);\n        this.areaClearIntervalFn();\n        this.areaIntervalId = setInterval(() => {\n            let container = document.getElementById('areaCharts');\n            if (container && container.children.length > 0 && container.id === args.chart.element.id) {\n                const newData = areadata.map(this.generateRandomValues);\n                if (args.chart.series.length > 0) {\n                    args.chart.series[0].setData(newData, 1400);\n                }\n            }\n            else {\n                this.areaClearIntervalFn();\n            }\n        }, 2000);\n    }\n    ;\n    areaClearIntervalFn = () => {\n        if (this.areaIntervalId) {\n            clearInterval(this.areaIntervalId);\n            this.areaIntervalId = null;\n        }\n    };\n    onbarLoad(args) {\n        let chart = document.getElementById('barcharts');\n        chart.setAttribute('title', '');\n    }\n    ;\n    barload(args) {\n        loadChartTheme(args);\n        this.barClearIntervalFn();\n        this.barIntervalId = setInterval(() => {\n            let container = document.getElementById('barcharts');\n            if (container && container.children.length > 0 && container.id === args.chart.element.id) {\n                const newData = bardata.map(this.generateRandomValues);\n                if (args.chart.series.length > 0) {\n                    args.chart.series[0].setData(newData, 1400);\n                }\n            }\n            else {\n                this.barClearIntervalFn();\n            }\n        }, 2000);\n    }\n    ;\n    barClearIntervalFn = () => {\n        if (this.barIntervalId) {\n            clearInterval(this.barIntervalId);\n            this.barIntervalId = null;\n        }\n    };\n    onrangeLoad(args) {\n        let chart = document.getElementById('rangecharts');\n        chart.setAttribute('title', '');\n    }\n    ;\n    rangeload(args) {\n        loadChartTheme(args);\n        this.rangeClearIntervalFn();\n        this.rangeIntervalId = setInterval(() => {\n            let container = document.getElementById('rangecharts');\n            if (container && container.children.length > 0 && container.id === args.chart.element.id) {\n                const newData = rangecolumndata.map((item) => {\n                    const highMin = 50;\n                    const highMax = 95;\n                    const lowMin = 5;\n                    const lowMax = 45;\n                    const highValue = Math.floor(Math.random() * (highMax - highMin + 1)) + highMin;\n                    const lowValue = Math.floor(Math.random() * (lowMax - lowMin + 1)) + lowMin;\n                    return { x: item.x, high: highValue, low: lowValue };\n                });\n                if (args.chart.series.length > 0) {\n                    args.chart.series[0].setData(newData, 1400);\n                }\n            }\n            else {\n                this.rangeClearIntervalFn();\n            }\n        }, 2000);\n    }\n    ;\n    rangeClearIntervalFn = () => {\n        if (this.rangeIntervalId) {\n            clearInterval(this.rangeIntervalId);\n            this.rangeIntervalId = null;\n        }\n    };\n    onStepLoad(args) {\n        let chart = document.getElementById('stepcharts');\n        chart.setAttribute('title', '');\n    }\n    ;\n    stepLoad(args) {\n        loadChartTheme(args);\n        this.stepClearIntervalFn();\n        this.stepIntervalId = setInterval(() => {\n            let container = document.getElementById('stepcharts');\n            if (container && container.children.length > 0 && container.id === args.chart.element.id) {\n                const newData = steplinedata.map(this.generateRandomValues);\n                if (args.chart.series.length > 0) {\n                    args.chart.series[0].setData(newData, 1400);\n                }\n            }\n            else {\n                this.stepClearIntervalFn();\n            }\n        }, 2000);\n    }\n    ;\n    stepClearIntervalFn = () => {\n        if (this.stepIntervalId) {\n            clearInterval(this.stepIntervalId);\n            this.stepIntervalId = null;\n        }\n    };\n    onScatterLoad(args) {\n        let chart = document.getElementById('scattercharts');\n        chart.setAttribute('title', '');\n    }\n    ;\n    scatterLoad(args) {\n        loadChartTheme(args);\n        let index = 1;\n        const datasets = [scatterdata, scatterdata1, scatterdata2, scatterdata3, scatterdata4];\n        this.scatterClearIntervalFn();\n        this.scatterIntervalId = setInterval(() => {\n            let container = document.getElementById('scattercharts');\n            if (container && container.children.length > 0 && container.id === args.chart.element.id) {\n                const scatterDataSource = datasets[index % datasets.length];\n                index++;\n                args.chart.series[0].setData(scatterDataSource, 2000);\n                args.chart.series[1].setData(scatterDataSource, 2000);\n            }\n            else {\n                this.scatterClearIntervalFn();\n            }\n        }, 2000);\n    }\n    ;\n    scatterClearIntervalFn = () => {\n        if (this.scatterIntervalId) {\n            clearInterval(this.scatterIntervalId);\n            this.scatterIntervalId = null;\n        }\n    };\n    onBubbleLoad(args) {\n        let chart = document.getElementById('bubblecharts');\n        chart.setAttribute('title', '');\n    }\n    ;\n    bubbleLoad = (args) => {\n        loadChartTheme(args);\n        this.bubbleClearIntervalFn();\n        this.bubbleIntervalId = setInterval(() => {\n            let container = document.getElementById('bubblecharts');\n            if (container && container.children.length > 0 && container.id === args.chart.element.id) {\n                if (args.chart.series.length > 0) {\n                    let newBubbleData = bubbledata.map(this.generateRandomBubbleData);\n                    newBubbleData = shuffleArray(newBubbleData);\n                    args.chart.series[0].setData(newBubbleData, 1400);\n                }\n            }\n            else {\n                this.bubbleClearIntervalFn();\n            }\n        }, 2000);\n    };\n    bubbleClearIntervalFn = () => {\n        if (this.bubbleIntervalId) {\n            clearInterval(this.bubbleIntervalId);\n            this.bubbleIntervalId = null;\n        }\n    };\n    tabSelected = (e) => {\n        const chartIds = [\n            'lineCharts',\n            'splineCharts',\n            'columnCharts',\n            'areaCharts',\n            'barcharts',\n            'rangecharts',\n            'stepcharts',\n            'scattercharts',\n            'bubblecharts'\n        ];\n        chartIds.forEach((id, index) => {\n            if (index === e.selectedIndex) {\n                let chartElement = document.getElementById(id);\n                if (chartElement) {\n                    let chart = chartElement.ej2_instances[0];\n                    chart.refresh();\n                }\n            }\n        });\n    };\n    SplineTemplate = () => (<ChartComponent id='splineCharts' style={{ marginTop: '10px' }} primaryXAxis={{ valueType: 'Category', majorGridLines: { width: 0 }, majorTickLines: { width: 0 }, minorTickLines: { width: 0 } }} primaryYAxis={{ labelFormat: '{value}', maximum: 100, minimum: 0, edgeLabelPlacement: 'Shift', lineStyle: { width: 0 }, majorTickLines: { width: 0 } }} loaded={this.onsplineLoad.bind(this)} load={this.splineLoad.bind(this)} chartArea={{ border: { width: 0 } }}>\n            <Inject services={[SplineSeries, Category, DataLabel, Highlight]}/>\n            <SeriesCollectionDirective>\n                <SeriesDirective dataSource={splinedata} width={2.5} marker={{ visible: true, height: 8, width: 8, dataLabel: { visible: true, position: 'Outer' } }} xName='x' yName=\"y\" type='Spline' animation={{ enable: true }}/>\n            </SeriesCollectionDirective>\n        </ChartComponent>);\n    LineTemplate = () => (<ChartComponent id='lineCharts' style={{ marginTop: '10px' }} primaryXAxis={{ valueType: 'Category', majorGridLines: { width: 0 }, majorTickLines: { width: 0 }, minorTickLines: { width: 0 } }} primaryYAxis={{ labelFormat: '{value}', maximum: 100, minimum: 0, edgeLabelPlacement: 'Shift', lineStyle: { width: 0 }, majorTickLines: { width: 0 } }} loaded={this.onlineLoad.bind(this)} load={this.lineload.bind(this)} chartArea={{ border: { width: 0 } }}>\n            <Inject services={[LineSeries, Category, DataLabel, Highlight]}/>\n            <SeriesCollectionDirective>\n                <SeriesDirective dataSource={linedata} width={2.5} marker={{ visible: true, height: 8, width: 8, dataLabel: { visible: true, position: 'Outer' } }} xName='x' yName=\"y\" type='Line' animation={{ enable: true }}/>\n            </SeriesCollectionDirective>\n        </ChartComponent>);\n    ColumnTemplate = () => (<ChartComponent id='columnCharts' style={{ marginTop: '10px' }} primaryXAxis={{ valueType: 'Category', majorGridLines: { width: 0 }, majorTickLines: { width: 0 }, minorTickLines: { width: 0 } }} primaryYAxis={{ labelFormat: '{value}', maximum: 100, minimum: 0, edgeLabelPlacement: 'Shift', lineStyle: { width: 0 }, majorTickLines: { width: 0 } }} loaded={this.oncolumnLoad.bind(this)} load={this.columnload.bind(this)} chartArea={{ border: { width: 0 } }}>\n            <Inject services={[ColumnSeries, Category, DataLabel, Highlight]}/>\n            <SeriesCollectionDirective>\n                <SeriesDirective dataSource={columndata} xName='x' yName=\"y\" type='Column' animation={{ enable: true }} marker={{ dataLabel: { visible: true, position: 'Outer' } }} cornerRadius={{ topLeft: 4, topRight: 4 }}/>\n            </SeriesCollectionDirective>\n        </ChartComponent>);\n    AreaTemplate = () => (<ChartComponent id='areaCharts' style={{ marginTop: '10px' }} primaryXAxis={{ valueType: 'Category', majorGridLines: { width: 0 }, majorTickLines: { width: 0 }, minorTickLines: { width: 0 } }} primaryYAxis={{ labelFormat: '{value}', maximum: 100, minimum: 0, edgeLabelPlacement: 'Shift', lineStyle: { width: 0 }, majorTickLines: { width: 0 } }} loaded={this.onareaLoad.bind(this)} load={this.areaload.bind(this)} chartArea={{ border: { width: 0 } }}>\n            <Inject services={[SplineAreaSeries, Category, DataLabel, Highlight]}/>\n            <SeriesCollectionDirective>\n                <SeriesDirective dataSource={areadata} xName='x' yName=\"y\" type='SplineArea' animation={{ enable: true }} marker={{ dataLabel: { visible: true, position: 'Outer' } }}/>\n            </SeriesCollectionDirective>\n        </ChartComponent>);\n    BarTemplate = () => (<ChartComponent id='barcharts' style={{ marginTop: '10px' }} primaryXAxis={{ valueType: 'Category', majorGridLines: { width: 0 }, majorTickLines: { width: 0 }, minorTickLines: { width: 0 } }} primaryYAxis={{ lineStyle: { width: 0 }, labelFormat: '{value}', maximum: 100, minimum: 0, edgeLabelPlacement: 'Shift', majorTickLines: { width: 0 } }} loaded={this.onbarLoad.bind(this)} load={this.barload.bind(this)} chartArea={{ border: { width: 0 } }}>\n            <Inject services={[BarSeries, Category, DataLabel, Highlight]}/>\n            <SeriesCollectionDirective>\n                <SeriesDirective dataSource={bardata} xName='x' yName=\"y\" type='Bar' animation={{ enable: true }} marker={{ dataLabel: { visible: true, position: 'Outer' } }} cornerRadius={{ bottomRight: 4, topRight: 4 }}/>\n            </SeriesCollectionDirective>\n        </ChartComponent>);\n    RangeColumnTemplate = () => (<ChartComponent id='rangecharts' style={{ marginTop: '10px' }} primaryXAxis={{ valueType: 'Category', majorGridLines: { width: 0 }, majorTickLines: { width: 0 }, minorTickLines: { width: 0 } }} primaryYAxis={{ labelFormat: '{value}', maximum: 100, minimum: 0, edgeLabelPlacement: 'Shift', lineStyle: { width: 0 }, majorTickLines: { width: 0 } }} loaded={this.onrangeLoad.bind(this)} load={this.rangeload.bind(this)} chartArea={{ border: { width: 0 } }}>\n            <Inject services={[RangeColumnSeries, Category, DataLabel, Highlight]}/>\n            <SeriesCollectionDirective>\n                <SeriesDirective dataSource={rangecolumndata} high=\"high\" low=\"low\" xName='x' columnSpacing={0.1} type='RangeColumn' animation={{ enable: true }} marker={{ dataLabel: { visible: true, position: 'Outer' } }} cornerRadius={{ bottomRight: 4, bottomLeft: 4, topLeft: 4, topRight: 4 }}/>\n            </SeriesCollectionDirective>\n        </ChartComponent>);\n    StepLineTemplate = () => (<ChartComponent id='stepcharts' style={{ marginTop: '10px' }} primaryXAxis={{ valueType: 'Category', majorGridLines: { width: 0 }, majorTickLines: { width: 0 }, minorTickLines: { width: 0 } }} primaryYAxis={{ labelFormat: '{value}', maximum: 100, minimum: 0, edgeLabelPlacement: 'Shift', lineStyle: { width: 0 }, majorTickLines: { width: 0 } }} loaded={this.onStepLoad.bind(this)} load={this.stepLoad.bind(this)} chartArea={{ border: { width: 0 } }}>\n            <Inject services={[StepLineSeries, Category, DataLabel, Highlight]}/>\n            <SeriesCollectionDirective>\n                <SeriesDirective dataSource={steplinedata} width={2.5} xName='x' yName=\"y\" type='StepLine' animation={{ enable: true }} marker={{ dataLabel: { visible: false, position: 'Outer' } }}/>\n            </SeriesCollectionDirective>\n        </ChartComponent>);\n    ScatterTemplate = () => (<ChartComponent id='scattercharts' style={{ marginTop: '10px' }} primaryXAxis={{ minimum: 1, interval: 1, maximum: 10, majorGridLines: { width: 0 }, majorTickLines: { width: 0 }, edgeLabelPlacement: 'Shift' }} primaryYAxis={{ majorTickLines: { width: 0 }, lineStyle: { width: 0 }, minimum: 0, maximum: 80, interval: 10, rangePadding: 'None' }} load={this.scatterLoad.bind(this)} loaded={this.onScatterLoad.bind(this)} chartArea={{ border: { width: 0 } }}>\n            <Inject services={[ScatterSeries, Category, Highlight]}/>\n            <SeriesCollectionDirective>\n                <SeriesDirective dataSource={scatterdata} xName='x' yName='y' type='Scatter' marker={{ visible: false, width: 8, height: 8, shape: 'Circle' }} animation={{ enable: true }}/>\n                <SeriesDirective dataSource={scatterdata} xName='x' yName='y1' type='Scatter' marker={{ visible: false, width: 8, height: 8, shape: 'Circle' }} animation={{ enable: true }}/>\n            </SeriesCollectionDirective>\n        </ChartComponent>);\n    BubbleTemplate = () => (<ChartComponent id='bubblecharts' style={{ marginTop: '10px' }} pointRender={this.pointRender.bind(this)} chartArea={{ border: { width: 0 } }} primaryXAxis={{ minimum: 1, maximum: 7, interval: 1, majorGridLines: { width: 0 }, majorTickLines: { width: 0 } }} load={this.bubbleLoad.bind(this)} primaryYAxis={{ minimum: 0, maximum: 100, lineStyle: { width: 0 }, majorTickLines: { width: 0 } }} legendSettings={{ visible: false }} loaded={this.onBubbleLoad.bind(this)}>\n            <Inject services={[BubbleSeries, Category]}/>\n            <SeriesCollectionDirective>\n                <SeriesDirective dataSource={bubbledata} type='Bubble' border={{ width: 2 }} xName='x' yName='y' size='size' animation={{ enable: true }}/>\n            </SeriesCollectionDirective>\n        </ChartComponent>);\n}\n\nconst root = createRoot(document.getElementById('sample'));\nroot.render(<SeriesAnimation />);","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n                this.rendereComplete();\n            });\n        }\n    }\n    export function updateSampleSection(){}\n    ","dependencies":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-react-base\":\"*\",\"@syncfusion/ej2-charts\":\"*\",\"@syncfusion/ej2-react-charts\":\"*\",\"@syncfusion/ej2-navigations\":\"*\",\"@syncfusion/ej2-react-navigations\":\"*\",\"@syncfusion/ej2-icons\":\"*\",\"markdown-spellcheck\":\"^1.3.1\",\"@syncfusion/ej2/base\":\"*\",\"@syncfusion/ej2-charts'; // Import the necessary types from Syncfusion\":\"*\"}"}