{"index.css":"/* css */","index.html":"<!DOCTYPE html>\n<html>\n<head>\n    <title>Syncfusion React Sample</title>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\n    <meta name=\"author\" content=\"Syncfusion\" />\n    <link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\n</head>\n\n<body class=\"{{theme}}\">\n     <style>\n            .control-section\n            {\n                margin-top: 100px;\n            }\n    </style>\n    <div id='sample'>\n</body>\n</html>\n","index.js":"import { createRoot } from 'react-dom/client';\nimport './index.css';\nimport * as React from 'react';\nimport { SampleBase } from './sample-base';\nimport { AccumulationChartComponent, AccumulationSeriesCollectionDirective, AccumulationSeriesDirective, PieSeries, AccumulationDataLabel, Inject } from '@syncfusion/ej2-react-charts';\nimport { Browser } from '@syncfusion/ej2-base';\nexport let pointRender = (args) => {\n    let selectedTheme = location.hash.split('/')[1];\n    selectedTheme = selectedTheme ? selectedTheme : 'material';\n    if (selectedTheme === 'fluent' || selectedTheme === 'bootstrap5') {\n        args.fill = seriesColor[args.point.index % 10];\n    }\n    if (selectedTheme.indexOf('dark') > -1) {\n        if (selectedTheme.indexOf('material') > -1) {\n            args.border.color = '#303030';\n        }\n        else if (selectedTheme.indexOf('bootstrap5') > -1) {\n            args.border.color = '#212529';\n        }\n        else if (selectedTheme.indexOf('bootstrap') > -1) {\n            args.border.color = '#1A1A1A';\n        }\n        else if (selectedTheme.indexOf('fabric') > -1) {\n            args.border.color = '#201f1f';\n        }\n        else if (selectedTheme.indexOf('fluent') > -1) {\n            args.border.color = '#252423';\n        }\n        else if (selectedTheme.indexOf('bootstrap') > -1) {\n            args.border.color = '#1A1A1A';\n        }\n        else if (selectedTheme.indexOf('tailwind') > -1) {\n            args.border.color = '#1F2937';\n        }\n        else {\n            args.border.color = '#222222';\n        }\n    }\n    else if (selectedTheme.indexOf('highcontrast') > -1) {\n        args.border.color = '#000000';\n    }\n    else {\n        args.border.color = '#FFFFFF';\n    }\n};\nlet seriesColor = ['#FFE066', \"#FAB666\", \"#F68F6A\", \"#F3646A\", \"#CC555A\", \"#9C4649\"];\nexport let data1 = [{ x: 'Chrome', y: 61.3, text: 'Chrome: 61.3%' },\n    { x: 'Safari', y: 24.6, text: Browser.isDevice ? 'Safari: <br> 24.6%' : 'Safari: 24.6%' },\n    { x: 'Edge', y: 5.0, text: 'Edge: 5.0%' },\n    { x: 'Samsung Internet', y: 2.7, text: Browser.isDevice ? 'Samsung <br> Internet: 2.7%' : 'Samsung Internet: 2.7%' },\n    { x: 'Firefox', y: 2.6, text: Browser.isDevice ? 'Firefox: <br> 2.6%' : 'Firefox: 2.6%' },\n    { x: 'Others', y: 3.6, text: Browser.isDevice ? 'Others: <br> 3.6%' : 'Others: 3.6%' }];\nexport class AccumulationDoughnut extends SampleBase {\n    pie;\n    render() {\n        return (<div className='control-pane'>\n            <div className='control-section'>\n                <AccumulationChartComponent id=\"pie-chart\" centerLabel={{ text: 'Mobile<br>Browsers<br>Statistics', hoverTextFormat: '${point.x}<br>Browser Share<br>${point.y}%', textStyle: { fontWeight: '600', size: Browser.isDevice ? '7px' : '15px' } }} enableSmartLabels={true} load={this.load.bind(this)} loaded={this.onChartLoad.bind(this)} pointRender={pointRender} enableBorderOnMouseMove={false} legendSettings={{ visible: false }}>\n                    <Inject services={[PieSeries, AccumulationDataLabel]}/>\n                    <AccumulationSeriesCollectionDirective>\n                        <AccumulationSeriesDirective dataSource={data1} xName='x' yName='y' innerRadius='65%' border={{ width: 1 }} startAngle={Browser.isDevice ? 30 : 62} dataLabel={{ visible: true, position: 'Outside', name: 'text', font: { fontWeight: '600' }, connectorStyle: { length: '20px', type: 'Curve' } }} radius={Browser.isDevice ? '40%' : '70%'}/>\n                    </AccumulationSeriesCollectionDirective>\n                </AccumulationChartComponent>\n            </div>\n        </div>);\n    }\n    onChartLoad(args) {\n        document.getElementById('pie-chart').setAttribute('title', '');\n    }\n    ;\n    load(args) {\n        let selectedTheme = location.hash.split('/')[1];\n        selectedTheme = selectedTheme ? selectedTheme : 'Fluent2';\n        args.accumulation.theme = (selectedTheme.charAt(0).toUpperCase() + selectedTheme.slice(1)).replace(/-dark/i, \"Dark\").\n            replace(/light/i, \"Light\").replace(/contrast/i, 'Contrast').replace(/-highContrast/i, 'HighContrast');\n    }\n    ;\n}\n\nconst root = createRoot(document.getElementById('sample'));\nroot.render(<AccumulationDoughnut />);","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n                this.rendereComplete();\n            });\n        }\n    }\n    export function updateSampleSection(){}\n    ","dependencies":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-react-base\":\"*\",\"@syncfusion/ej2-charts\":\"*\",\"@syncfusion/ej2-react-charts\":\"*\",\"@syncfusion/ej2-icons\":\"*\",\"markdown-spellcheck\":\"^1.3.1\",\"@syncfusion/ej2/base\":\"*\",\"@syncfusion/ej2-charts'; // Import the necessary types from Syncfusion\":\"*\"}"}