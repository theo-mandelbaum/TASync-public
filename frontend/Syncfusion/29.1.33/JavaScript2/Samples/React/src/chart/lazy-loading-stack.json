{"index.css":"/* css */","property-pane.js":"import * as ReactDOM from 'react-dom';\nimport * as React from 'react';\nimport { select } from '@syncfusion/ej2-base';\nexport class PropertyPane extends React.Component {\n    render() {\n        const mobilePropPane = select('.sb-mobile-prop-pane');\n        const isMobile = window.matchMedia('(max-width:550px)').matches;\n        return isMobile && mobilePropPane ?\n            ReactDOM.createPortal(<div className='property-panel-section'>\n                    <div className=\"property-panel-header\">\n                        {this.props.title}\n                    </div>\n                    <div className=\"property-panel-content\">\n                        {this.props.children}\n                    </div>\n                </div>, mobilePropPane)\n            :\n                (<div className='property-panel-section'>\n                    <div className=\"property-panel-header\">\n                        {this.props.title}\n                    </div>\n                    <div className=\"property-panel-content\">\n                        {this.props.children}\n                    </div>\n                </div>);\n    }\n}\n","index.html":"<!DOCTYPE html>\n<html>\n<head>\n    <title>Syncfusion React Sample</title>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\n    <meta name=\"author\" content=\"Syncfusion\" />\n    <link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\n</head>\n\n<body class=\"{{theme}}\">\n     <style>\n            .control-section\n            {\n                margin-top: 100px;\n            }\n    </style>\n    <div id='sample'>\n</body>\n</html>\n","index.js":"import { createRoot } from 'react-dom/client';\nimport './index.css';\n/**\n * Sample for Lazy Loading\n */\nimport * as React from \"react\";\nimport { ChartComponent, SeriesCollectionDirective, SeriesDirective, Inject, ScrollBar, Zoom, LineSeries, Tooltip, DateTime, Crosshair } from '@syncfusion/ej2-react-charts';\nimport { Internationalization } from '@syncfusion/ej2-base';\nimport { DropDownListComponent } from '@syncfusion/ej2-react-dropdowns';\nimport { DatePickerComponent } from '@syncfusion/ej2-react-calendars';\nimport { NumericTextBoxComponent } from '@syncfusion/ej2-react-inputs';\nimport { SampleBase } from './sample-base';\nimport { PropertyPane } from './property-pane';\nconst SAMPLE_CSS = `\n    .control-fluid {\n        padding: 0px !important;\n    }\n        `;\nexport class LazyLoading extends SampleBase {\n    chart;\n    intl = new Internationalization();\n    dropElement;\n    minDate;\n    maxDate;\n    pointslength;\n    lazymode;\n    droplist = [\n        { value: 'Range' },\n        { value: 'Points Length' }\n    ];\n    minChange(args) {\n        this.chart.primaryXAxis.scrollbarSettings.range.minimum = args.value;\n        this.chart.refresh();\n    }\n    ;\n    maxChange(args) {\n        this.chart.primaryXAxis.scrollbarSettings.range.maximum = args.value;\n        this.chart.refresh();\n    }\n    ;\n    pointChange(args) {\n        this.chart.primaryXAxis.scrollbarSettings.pointsLength = args.value;\n        this.chart.refresh();\n    }\n    ;\n    modeChange(arg) {\n        let min;\n        let max;\n        if (arg.value === 'Range') {\n            this.chart.primaryXAxis.valueType = 'DateTime';\n            min = this.chart.primaryXAxis.scrollbarSettings.range.minimum = new Date(2009, 0, 1);\n            max = this.chart.primaryXAxis.scrollbarSettings.range.maximum = new Date(2014, 0, 1);\n            this.chart.series[0].dataSource = this.GetDateTimeData(new Date(2009, 0, 1), new Date(2009, 8, 1));\n            this.chart.refresh();\n            this.minDate.enabled = true;\n            this.maxDate.enabled = true;\n            this.pointslength.enabled = false;\n        }\n        else {\n            this.chart.primaryXAxis.valueType = 'Double';\n            this.chart.primaryXAxis.scrollbarSettings.range.minimum = null;\n            this.chart.primaryXAxis.scrollbarSettings.range.maximum = null;\n            this.chart.primaryXAxis.scrollbarSettings.pointsLength = 1000;\n            this.chart.series[0].dataSource = this.GetNumericData(1, 200);\n            this.chart.refresh();\n            this.minDate.enabled = false;\n            this.maxDate.enabled = false;\n            this.pointslength.enabled = true;\n        }\n    }\n    ;\n    GetDateTimeData(start, end) {\n        let series1 = [];\n        let date;\n        let value = 30;\n        let option = {\n            skeleton: 'full',\n            type: 'dateTime'\n        };\n        let dateParser = this.intl.getDateParser(option);\n        let dateFormatter = this.intl.getDateFormat(option);\n        for (let i = 0; start <= end; i++) {\n            date = Date.parse(dateParser(dateFormatter(start)));\n            if (Math.random() > .5) {\n                value += (Math.random() * 10 - 5);\n            }\n            else {\n                value -= (Math.random() * 10 - 5);\n            }\n            if (value < 0) {\n                value = this.getRandomInt(20, 40);\n            }\n            let point1 = { x: new Date(date), y: Math.round(value) };\n            new Date(start.setDate(start.getDate() + 1));\n            series1.push(point1);\n        }\n        return series1;\n    }\n    GetNumericData(start, end) {\n        let series1 = [];\n        let value = 30;\n        for (let i = start; i <= end; i++) {\n            if (Math.random() > .5) {\n                value += (Math.random() * 10 - 5);\n            }\n            else {\n                value -= (Math.random() * 10 - 5);\n            }\n            if (value < 0) {\n                value = this.getRandomInt(20, 40);\n            }\n            let point = { x: i, y: Math.round(value) };\n            series1.push(point);\n        }\n        return series1;\n    }\n    getRandomInt(min, max) {\n        return Math.floor(Math.random() * (max - min + 1)) + min;\n    }\n    render() {\n        return (<div className='control-pane'>\n                <style>\n                    {SAMPLE_CSS}\n                </style>\n                    <div className='control-section'>\n                    <div className='col-md-8'>\n                        <ChartComponent id='charts' ref={chart => this.chart = chart} primaryXAxis={{\n                valueType: 'DateTime',\n                edgeLabelPlacement: 'Shift',\n                skeleton: 'yMMM',\n                skeletonType: 'Date',\n                majorGridLines: { width: 0 },\n                scrollbarSettings: {\n                    range: {\n                        minimum: new Date(2009, 0, 1),\n                        maximum: new Date(2014, 0, 1)\n                    },\n                    enable: true,\n                    pointsLength: 1000,\n                    enableZoom: false,\n                    height: 14\n                }\n            }} primaryYAxis={{\n                title: 'Server Load',\n                labelFormat: '{value}MB',\n                majorTickLines: { width: 0 },\n                lineStyle: { width: 0 }\n            }} chartArea={{ border: { width: 0 } }} tooltip={{ enable: true, showNearestTooltip: true, header: '<b>${point.x}</b>', format: 'Server load : <b>${point.y}</b>', enableHighlight: true }} legendSettings={{ visible: true }} scrollEnd={this.scrollEnd.bind(this)} load={this.load.bind(this)} title='Network Load' height='450' width='100%'>\n                            <Inject services={[LineSeries, DateTime, Tooltip, ScrollBar, Zoom, Crosshair]}/>\n                            <SeriesCollectionDirective>\n                                <SeriesDirective dataSource={this.GetDateTimeData(new Date(2009, 0, 1), new Date(2009, 8, 1))} xName='x' yName='y' type='Line' animation={{ enable: false }}>\n                                </SeriesDirective>\n                            </SeriesCollectionDirective>\n                        </ChartComponent>\n                    </div>\n                    <div className='col-md-4 property-section'>\n                    <PropertyPane title='Properties'>\n                        <table id=\"property\" title=\"Properties\" style={{ width: '100%' }}>\n                        <tbody><tr style={{ height: '50px' }}>\n                                <td style={{ width: '40%' }}>\n                                    <div>Lazy Load </div>\n                                </td>\n                                <td style={{ width: '40%' }}>\n                                    <div>\n                                        <DropDownListComponent index={0} width={120} id=\"lazymode\" ref={drop => this.lazymode = drop} style={{ \"width\": \"auto\" }} change={this.modeChange.bind(this)} dataSource={this.droplist} fields={{ text: 'value', value: 'value' }} value=\"Range\"/>\n                                    </div>\n                                </td>\n                            </tr>\n                            <tr style={{ height: '50px' }}>\n                                <td>\n                                    <div>Min </div>\n                                </td>\n                                <td style={{ width: '40%' }}>\n                                    <div>\n                                        <DatePickerComponent width={120} ref={min => this.minDate = min} id=\"datepickermin\" style={{ \"width\": \"auto\" }} change={this.minChange.bind(this)} value={new Date(2009, 0, 1)}/>\n                                    </div>\n                                </td>\n                            </tr>\n                            <tr style={{ height: '50px' }}>\n                                <td>\n                                    <div>Max </div>\n                                </td>\n                                <td style={{ width: '40%' }}>\n                                    <div>\n                                        <DatePickerComponent width={120} ref={max => this.maxDate = max} id=\"datepickermax\" style={{ \"width\": \"auto\" }} change={this.maxChange.bind(this)} value={new Date(2014, 0, 1)}/>\n                                    </div>\n                                </td>\n                            </tr>\n                            <tr style={{ width: '40%' }}> \n                                <td>\n                                    <div id=\"pointLength\">Point Length </div>\n                                </td>\n                                <td style={{ width: '40%' }}>\n                                    <div>\n                                        <NumericTextBoxComponent min={1000} max={10000} value={1000} step={100} enabled={false} format={'n'} width={120} ref={point => this.pointslength = point} id=\"pointslength\" style={{ \"width\": \"auto\" }} change={this.pointChange.bind(this)} aria-labelledby=\"Text\"/>\n                                    </div>\n                                </td>\n                            </tr></tbody>\n                        </table>\n                        </PropertyPane>\n                    </div>\n                </div>\n            </div>);\n    }\n    scrollEnd(args) {\n        if (this.lazymode.value === 'Range') {\n            this.chart.series[0].dataSource = this.GetDateTimeData(args.currentRange.minimum, args.currentRange.maximum);\n        }\n        else {\n            this.chart.series[0].dataSource = this.GetNumericData(args.currentRange.minimum, args.currentRange.maximum);\n        }\n        this.chart.dataBind();\n    }\n    ;\n    load(args) {\n        let selectedTheme = location.hash.split('/')[1];\n        selectedTheme = selectedTheme ? selectedTheme : 'Fluent2';\n        args.chart.theme = (selectedTheme.charAt(0).toUpperCase() + selectedTheme.slice(1)).\n            replace(/-dark/i, \"Dark\").replace(/contrast/i, 'Contrast').replace(/-highContrast/i, 'HighContrast');\n    }\n    ;\n}\n\nconst root = createRoot(document.getElementById('sample'));\nroot.render(<LazyLoading />);","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n                this.rendereComplete();\n            });\n        }\n    }\n    export function updateSampleSection(){}\n    ","dependencies":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-react-base\":\"*\",\"@syncfusion/ej2-charts\":\"*\",\"@syncfusion/ej2-react-charts\":\"*\",\"@syncfusion/ej2-icons\":\"*\",\"markdown-spellcheck\":\"^1.3.1\",\"@syncfusion/ej2-dropdowns\":\"*\",\"@syncfusion/ej2-react-dropdowns\":\"*\",\"@syncfusion/ej2-calendars\":\"*\",\"@syncfusion/ej2-react-calendars\":\"*\",\"@syncfusion/ej2-inputs\":\"*\",\"@syncfusion/ej2-react-inputs\":\"*\",\"@syncfusion/ej2/base\":\"*\",\"@syncfusion/ej2-charts'; // Import the necessary types from Syncfusion\":\"*\"}"}