{"index.css":"/* css */","property-pane.js":"import * as ReactDOM from 'react-dom';\nimport * as React from 'react';\nimport { select } from '@syncfusion/ej2-base';\nexport class PropertyPane extends React.Component {\n    render() {\n        const mobilePropPane = select('.sb-mobile-prop-pane');\n        const isMobile = window.matchMedia('(max-width:550px)').matches;\n        return isMobile && mobilePropPane ?\n            ReactDOM.createPortal(<div className='property-panel-section'>\n                    <div className=\"property-panel-header\">\n                        {this.props.title}\n                    </div>\n                    <div className=\"property-panel-content\">\n                        {this.props.children}\n                    </div>\n                </div>, mobilePropPane)\n            :\n                (<div className='property-panel-section'>\n                    <div className=\"property-panel-header\">\n                        {this.props.title}\n                    </div>\n                    <div className=\"property-panel-content\">\n                        {this.props.children}\n                    </div>\n                </div>);\n    }\n}\n","index.html":"<!DOCTYPE html>\n<html>\n<head>\n    <title>Syncfusion React Sample</title>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\n    <meta name=\"author\" content=\"Syncfusion\" />\n    <link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\n</head>\n\n<body class=\"{{theme}}\">\n     <style>\n            .control-section\n            {\n                margin-top: 100px;\n            }\n    </style>\n    <div id='sample'>\n</body>\n</html>\n","index.js":"import { createRoot } from 'react-dom/client';\nimport './index.css';\n/**\n * Sample for Indexed Category Axis\n */\nimport * as React from \"react\";\nimport { ChartComponent, SeriesCollectionDirective, SeriesDirective, Inject, Legend, Category, LineSeries, ColumnSeries, Crosshair, DataLabel } from '@syncfusion/ej2-react-charts';\nimport { PropertyPane } from './property-pane';\nimport { SampleBase } from './sample-base';\nexport let data1 = [\n    { x: 'Myanmar', y: 7.3 },\n    { x: 'India', y: 7.9 },\n    { x: 'Bangladesh', y: 6.8 },\n    { x: 'Cambodia', y: 7.0 },\n    { x: 'China', y: 6.9 },\n];\nexport let data2 = [\n    { x: 'Poland', y: 2.7 },\n    { x: 'Australia', y: 2.5 },\n    { x: 'Singapore', y: 2.0 },\n    { x: 'Canada', y: 1.4 },\n    { x: 'Germany', y: 1.8 }\n];\nconst SAMPLE_CSS = `\n    .control-fluid {\n\t\tpadding: 0px !important;\n\t}`;\nexport class IndexedAxis extends SampleBase {\n    chartInstance;\n    dropElement;\n    loaded;\n    onChange() {\n        this.chartInstance.primaryXAxis.isIndexed = this.dropElement.checked;\n        if (this.chartInstance.primaryXAxis.isIndexed) {\n            this.chartInstance.tooltip.shared = false;\n            this.chartInstance.series[0].type = 'Column';\n            this.chartInstance.series[1].type = 'Column';\n            this.chartInstance.series[0].marker.visible = false;\n            this.chartInstance.series[1].marker.visible = false;\n            this.chartInstance.primaryXAxis.labelRotation = 0;\n            this.chartInstance.crosshair.line.width = 1;\n        }\n        else {\n            this.chartInstance.series[0].type = 'Line';\n            this.chartInstance.series[1].type = 'Line';\n            this.chartInstance.series[0].marker.visible = true;\n            this.chartInstance.series[1].marker.visible = true;\n            this.chartInstance.primaryXAxis.labelRotation = 90;\n            this.chartInstance.crosshair.line.width = 0;\n            this.chartInstance.tooltip.enable = true;\n            this.chartInstance.tooltip.shared = false;\n        }\n        this.chartInstance.refresh();\n    }\n    ;\n    render() {\n        return (<div className='control-pane'>\n                <style>\n                    {SAMPLE_CSS}\n                </style>\n                <div className='control-section row'>\n                    <div className='col-md-9'>\n                        <ChartComponent id='charts' ref={chart => this.chartInstance = chart} primaryXAxis={{\n                valueType: 'Category',\n                interval: 1,\n                edgeLabelPlacement: 'Shift',\n                crosshairTooltip: { enable: false },\n                isIndexed: true,\n                majorGridLines: { width: 0 }\n            }} primaryYAxis={{\n                labelFormat: '{value}%',\n                majorTickLines: { width: 0 },\n                lineStyle: { width: 0 }\n            }} chartArea={{ border: { width: 0 } }} load={this.load.bind(this)} title=\"Real GDP Growth\" loaded={this.onChartLoad.bind(this)} tooltip={{ enable: false, shared: true }} crosshair={{ enable: false, lineType: 'Vertical' }}>\n                            <Inject services={[Legend, Category, LineSeries, ColumnSeries, Crosshair, DataLabel]}/>\n                            <SeriesCollectionDirective>\n                                <SeriesDirective dataSource={data1} xName='x' yName='y' name='2015' width={2} type='Column' marker={{\n                dataLabel: {\n                    visible: true,\n                    position: 'Top',\n                    font: { fontWeight: '600' },\n                }\n            }}>\n                                </SeriesDirective>\n                                <SeriesDirective dataSource={data2} xName='x' yName='y' name='2016' width={2} type='Column' marker={{\n                dataLabel: {\n                    visible: true,\n                    position: 'Top',\n                    font: { fontWeight: '600' },\n                }\n            }}>\n                                </SeriesDirective>\n                            </SeriesCollectionDirective>\n                        </ChartComponent>\n                    </div>\n                    <div className='col-md-3 property-section'>\n                        <PropertyPane title='Properties'>\n                            <table id='property' title='Properties' className='property-panel-table' style={{ width: '100%' }}>\n                            <tbody><tr style={{ height: '50px' }}>\n                                    <td style={{ width: '60%' }}>\n                                        <div id=\"indexed\">Indexed:</div>\n                                    </td>\n                                    <td style={{ width: '40%' }}>\n                                        <div>\n                                            <input type=\"checkbox\" id=\"isIndexed\" defaultChecked={true} onChange={this.onChange.bind(this)} style={{ marginLeft: '-5px' }} ref={d => this.dropElement = d} aria-labelledby=\"Checkbox checked\"/>\n                                        </div>\n                                    </td>\n                                </tr></tbody>\n                            </table>\n                        </PropertyPane>\n                    </div>\n                </div>\n            </div>);\n    }\n    onChartLoad(args) {\n        document.getElementById('charts').setAttribute('title', '');\n    }\n    ;\n    load(args) {\n        let selectedTheme = location.hash.split('/')[1];\n        selectedTheme = selectedTheme ? selectedTheme : 'Fluent2';\n        args.chart.theme = (selectedTheme.charAt(0).toUpperCase() + selectedTheme.slice(1)).\n            replace(/-dark/i, \"Dark\").replace(/contrast/i, 'Contrast').replace(/-highContrast/i, 'HighContrast');\n    }\n    ;\n}\n\nconst root = createRoot(document.getElementById('sample'));\nroot.render(<IndexedAxis />);","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n                this.rendereComplete();\n            });\n        }\n    }\n    export function updateSampleSection(){}\n    ","dependencies":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-react-base\":\"*\",\"@syncfusion/ej2-charts\":\"*\",\"@syncfusion/ej2-react-charts\":\"*\",\"@syncfusion/ej2-icons\":\"*\",\"markdown-spellcheck\":\"^1.3.1\",\"@syncfusion/ej2/base\":\"*\",\"@syncfusion/ej2-charts'; // Import the necessary types from Syncfusion\":\"*\"}"}