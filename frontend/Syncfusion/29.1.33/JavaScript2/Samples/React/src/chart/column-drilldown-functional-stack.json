{"index.css":"/* css */","theme-color.js":"export let themes = ['bootstrap5', 'bootstrap5dark', 'tailwind', 'tailwinddark', 'material', 'materialdark', 'bootstrap4', 'bootstrap', 'bootstrapdark', 'fabric', 'fabricdark', 'highcontrast', 'fluent', 'fluentdark', 'material3', 'material3dark', 'fluent2', 'fluent2dark', 'fluent2highcontrast'];\nexport let borderColor = ['#FD7E14', '#FD7E14', '#5A61F6', '#8B5CF6', '#00bdae', '#9ECB08', '#a16ee5', '#a16ee5', '#a16ee5', '#4472c4', '#4472c4', '#79ECE4', '#1AC9E6', '#1AC9E6', '#6355C7', '#4EAAFF', '#6200EE', '#9BB449', '#9BB449'];\nexport let loadChartTheme = (args, isGradient) => {\n    let selectedTheme = location.hash.split('/')[1] || 'Tailwind3';\n    let theme = (selectedTheme.charAt(0).toUpperCase() + selectedTheme.slice(1))\n        .replace(/-dark/i, 'Dark')\n        .replace(/contrast/i, 'Contrast')\n        .replace(/-highContrast/i, 'HighContrast');\n    if (args) {\n        args.chart.theme = theme;\n        return isGradient ? selectedTheme : args.chart.theme;\n    }\n    if (isGradient && !args) {\n        return selectedTheme;\n    }\n};\nexport let loadAccumulationChartTheme = (args) => {\n    let selectedTheme = location.hash.split('/')[1];\n    selectedTheme = selectedTheme ? selectedTheme : 'Tailwind3';\n    if (args) {\n        args.accumulation.theme = (selectedTheme.charAt(0).toUpperCase() + selectedTheme.slice(1)).replace(/-dark/i, \"Dark\").replace(/light/i, \"Light\").replace(/contrast/i, 'Contrast').replace(/-highContrast/i, 'HighContrast');\n        return args.chart.theme;\n    }\n    else {\n        return selectedTheme;\n    }\n};\nexport let layoutColor;\nexport let accPointRender = (args) => {\n    let selectedTheme = location.hash.split('/')[1];\n    let layoutColor;\n    selectedTheme = selectedTheme ? selectedTheme : 'Tailwind3';\n    if (selectedTheme.indexOf('dark') > -1) {\n        if (selectedTheme.indexOf('material') > -1) {\n            args.border.color = '#303030';\n            layoutColor = '#303030';\n        }\n        else if (selectedTheme.indexOf('bootstrap5') > -1) {\n            args.border.color = '#212529';\n            layoutColor = '#212529';\n        }\n        else if (selectedTheme.indexOf('bootstrap') > -1) {\n            args.border.color = '#1A1A1A';\n            layoutColor = '#1A1A1A';\n        }\n        else if (selectedTheme.indexOf('fabric') > -1) {\n            args.border.color = '#201f1f';\n            layoutColor = '#201f1f';\n        }\n        else if (selectedTheme.indexOf('fluent') > -1) {\n            args.border.color = '#252423';\n            layoutColor = '#252423';\n        }\n        else if (selectedTheme.indexOf('bootstrap') > -1) {\n            args.border.color = '#1A1A1A';\n            layoutColor = '#1A1A1A';\n        }\n        else if (selectedTheme.indexOf('tailwind') > -1) {\n            args.border.color = '#1F2937';\n            layoutColor = '#1F2937';\n        }\n        else {\n            args.border.color = '#222222';\n            layoutColor = '#222222';\n        }\n    }\n    else if (selectedTheme.indexOf('highcontrast') > -1) {\n        args.border.color = '#000000';\n        layoutColor = '#000000';\n    }\n    else {\n        args.border.color = '#FFFFFF';\n        layoutColor = '#FFFFFF';\n    }\n    if (selectedTheme.indexOf('highcontrast') > -1 || selectedTheme.indexOf('dark') > -1) {\n        let columnHeaderElement = document.querySelector('#header1');\n        columnHeaderElement.style.color = '#F3F2F1';\n        let pieHeaderElement = document.querySelector('#header2');\n        pieHeaderElement.style.color = '#F3F2F1';\n        let splineHeaderElement = document.querySelector('#header3');\n        splineHeaderElement.style.color = '#F3F2F1';\n    }\n    let columnLayoutTemplate = document.querySelector('#layout_0template');\n    columnLayoutTemplate.style.background = layoutColor;\n    let columnLayout = document.querySelector('#layout_0_body');\n    columnLayout.style.background = layoutColor;\n    let pieLayoutTemplate = document.querySelector('#layout_1template');\n    pieLayoutTemplate.style.background = layoutColor;\n    let pieLayout = document.querySelector('#layout_1_body');\n    pieLayout.style.background = layoutColor;\n    let splineLayoutTemplate = document.querySelector('#layout_2template');\n    splineLayoutTemplate.style.background = layoutColor;\n    let splineLayout = document.querySelector('#layout_2_body');\n    splineLayout.style.background = layoutColor;\n};\nexport let accpatternPointRender = (args) => {\n    if (args.point.index == 0) {\n        args.pattern = 'DiagonalBackward';\n    }\n    else if (args.point.index == 1) {\n        args.pattern = 'DiagonalForward';\n    }\n    else if (args.point.index == 2) {\n        args.pattern = 'HorizontalStripe';\n    }\n    else if (args.point.index == 3) {\n        args.pattern = 'VerticalStripe';\n    }\n    else if (args.point.index == 4) {\n        args.pattern = 'HorizontalDash';\n    }\n    let selectedTheme = location.hash.split('/')[1];\n    selectedTheme = selectedTheme ? selectedTheme : 'Tailwind3';\n    if (selectedTheme.indexOf('dark') > -1) {\n        if (selectedTheme.indexOf('material') > -1) {\n            args.border.color = '#303030';\n        }\n        else if (selectedTheme.indexOf('bootstrap5') > -1) {\n            args.border.color = '#212529';\n        }\n        else if (selectedTheme.indexOf('bootstrap') > -1) {\n            args.border.color = '#1A1A1A';\n        }\n        else if (selectedTheme.indexOf('tailwind') > -1) {\n            args.border.color = '#1F2937';\n        }\n        else if (selectedTheme.indexOf('fluent') > -1) {\n            args.border.color = '#252423';\n        }\n        else if (selectedTheme.indexOf('fabric') > -1) {\n            args.border.color = '#201f1f';\n        }\n        else {\n            args.border.color = '#222222';\n        }\n    }\n    else if (selectedTheme.indexOf('highcontrast') > -1) {\n        args.border.color = '#000000';\n    }\n    else {\n        args.border.color = '#FFFFFF';\n    }\n};\nlet seriesColor = ['#FFE066', \"#FAB666\", \"#F68F6A\", \"#F3646A\", \"#CC555A\", \"#9C4649\"];\nexport let donutPointRender = (args) => {\n    let selectedTheme = location.hash.split('/')[1];\n    selectedTheme = selectedTheme ? selectedTheme : 'Tailwind3';\n    if (selectedTheme === 'fluent') {\n        args.fill = seriesColor[args.point.index % 10];\n    }\n    else if (selectedTheme === 'bootstrap5') {\n        args.fill = seriesColor[args.point.index % 10];\n    }\n    if (selectedTheme.indexOf('dark') > -1) {\n        if (selectedTheme.indexOf('material') > -1) {\n            args.border.color = '#303030';\n        }\n        else if (selectedTheme.indexOf('bootstrap5') > -1) {\n            args.border.color = '#212529';\n        }\n        else if (selectedTheme.indexOf('bootstrap') > -1) {\n            args.border.color = '#1A1A1A';\n        }\n        else if (selectedTheme.indexOf('fabric') > -1) {\n            args.border.color = '#201f1f';\n        }\n        else if (selectedTheme.indexOf('fluent') > -1) {\n            args.border.color = '#252423';\n        }\n        else if (selectedTheme.indexOf('bootstrap') > -1) {\n            args.border.color = '#1A1A1A';\n        }\n        else if (selectedTheme.indexOf('tailwind') > -1) {\n            args.border.color = '#1F2937';\n        }\n        else {\n            args.border.color = '#222222';\n        }\n    }\n    else if (selectedTheme.indexOf('highcontrast') > -1) {\n        args.border.color = '#000000';\n    }\n    else if (selectedTheme.indexOf('fluent2') > -1) {\n        args.fill = seriesColor[args.point.index % 10];\n    }\n    else {\n        args.border.color = '#FFFFFF';\n    }\n};\nexport let roundedCornnerPointRender = (args) => {\n    let selectedTheme = location.hash.split('/')[1];\n    selectedTheme = selectedTheme ? selectedTheme : 'Tailwind3';\n    if (selectedTheme.indexOf('dark') > -1) {\n        if (selectedTheme.indexOf('material') > -1) {\n            args.border.color = '#303030';\n        }\n        else if (selectedTheme.indexOf('bootstrap5') > -1) {\n            args.border.color = '#212529';\n        }\n        else if (selectedTheme.indexOf('bootstrap') > -1) {\n            args.border.color = '#1A1A1A';\n        }\n        else if (selectedTheme.indexOf('fabric') > -1) {\n            args.border.color = '#201f1f';\n        }\n        else if (selectedTheme.indexOf('fluent') > -1) {\n            args.border.color = '#252423';\n        }\n        else if (selectedTheme.indexOf('bootstrap') > -1) {\n            args.border.color = '#1A1A1A';\n        }\n        else if (selectedTheme.indexOf('tailwind') > -1) {\n            args.border.color = '#1F2937';\n        }\n        else {\n            args.border.color = '#222222';\n        }\n    }\n    else if (selectedTheme.indexOf('highcontrast') > -1) {\n        args.border.color = '#000000';\n    }\n    else {\n        args.border.color = '#FFFFFF';\n    }\n};\nexport let pointRenderEvent = (args) => {\n    let selectedTheme = location.hash.split('/')[1];\n    selectedTheme = selectedTheme ? selectedTheme : 'Tailwind3';\n    if (selectedTheme && selectedTheme.indexOf('fabric') > -1) {\n        args.fill = pointFabricColors[args.point.index % 10];\n        ;\n    }\n    else if (selectedTheme === 'material-dark') {\n        args.fill = pointMaterialDarkColors[args.point.index % 10];\n        ;\n    }\n    else if (selectedTheme === 'material') {\n        args.fill = pointMaterialColors[args.point.index % 10];\n    }\n    else if (selectedTheme === 'bootstrap5-dark') {\n        args.fill = pointBootstrap5DarkColors[args.point.index % pointBootstrap5DarkColors.length];\n    }\n    else if (selectedTheme === 'bootstrap5') {\n        args.fill = pointBootstrap5Colors[args.point.index % pointBootstrap5Colors.length];\n    }\n    else if (selectedTheme === 'bootstrap') {\n        args.fill = pointBootstrapColors[args.point.index % pointBootstrapColors.length];\n    }\n    else if (selectedTheme === 'bootstrap4') {\n        args.fill = pointBootstrapColors[args.point.index % pointBootstrapColors.length];\n    }\n    else if (selectedTheme === 'bootstrap-dark') {\n        args.fill = pointBootstrapColors[args.point.index % pointBootstrapColors.length];\n    }\n    else if (selectedTheme === 'highcontrast') {\n        args.fill = pointHighContrastColors[args.point.index % 10];\n    }\n    else if (selectedTheme === 'fluent-dark') {\n        args.fill = pointFluentDarkColors[args.point.index % 10];\n    }\n    else if (selectedTheme === 'fluent') {\n        args.fill = pointFluentColors[args.point.index % 10];\n    }\n    else if (selectedTheme === 'tailwind-dark') {\n        args.fill = pointTailwindDarkColors[args.point.index % 10];\n    }\n    else if (selectedTheme === 'tailwind') {\n        args.fill = pointTailwindColors[args.point.index % 10];\n    }\n    else if (selectedTheme === 'material3-dark') {\n        args.fill = pointMaterial3DarkColors[args.point.index % 10];\n    }\n    else if (selectedTheme === 'material3') {\n        args.fill = pointMaterial3Colors[args.point.index % 10];\n    }\n    else if (selectedTheme === 'fluent2') {\n        args.fill = pointFluent2Colors[args.point.index % 10];\n    }\n    else if (selectedTheme === 'fluent2-highcontrast' || selectedTheme === 'fluent2-dark') {\n        args.fill = pointFluent2HighContrastColors[args.point.index % 10];\n    }\n    else if (selectedTheme === 'tailwind3-dark') {\n        args.fill = pointTailwind3DarkColors[args.point.index % 10];\n    }\n    else if (selectedTheme === 'tailwind3') {\n        args.fill = pointTailwind3Colors[args.point.index % 10];\n    }\n    ;\n};\nexport let bubblePointRender = (args) => {\n    let selectedTheme = location.hash.split('/')[1];\n    selectedTheme = selectedTheme ? selectedTheme : 'Tailwind3';\n    if (selectedTheme && selectedTheme.indexOf('fabric') > -1) {\n        args.fill = bubbleFabricColors[args.point.index % 10];\n        args.border.color = pointFabricColors[args.point.index % 10];\n        ;\n    }\n    else if (selectedTheme === 'material-dark') {\n        args.fill = bubbleMaterialDarkColors[args.point.index % 10];\n        args.border.color = pointMaterialDarkColors[args.point.index % 10];\n        ;\n    }\n    else if (selectedTheme === 'material') {\n        args.fill = bubbleMaterialColors[args.point.index % 10];\n        args.border.color = pointMaterialColors[args.point.index % 10];\n    }\n    else if (selectedTheme === 'bootstrap5-dark') {\n        args.fill = bubbleBootstrap5DarkColors[args.point.index % 10];\n        args.border.color = pointBootstrap5DarkColors[args.point.index % 10];\n    }\n    else if (selectedTheme === 'bootstrap5') {\n        args.fill = bubbleBootstrap5Colors[args.point.index % 10];\n        args.border.color = pointBootstrap5Colors[args.point.index % 10];\n    }\n    else if (selectedTheme === 'bootstrap') {\n        args.fill = bubbleBootstrapColors[args.point.index % 10];\n        args.border.color = pointBootstrapColors[args.point.index % 10];\n    }\n    else if (selectedTheme === 'bootstrap4') {\n        args.fill = bubbleBootstrapColors[args.point.index % 10];\n        args.border.color = pointBootstrapColors[args.point.index % 10];\n    }\n    else if (selectedTheme === 'bootstrap-dark') {\n        args.fill = bubbleBootstrapColors[args.point.index % 10];\n        args.border.color = pointBootstrapColors[args.point.index % 10];\n    }\n    else if (selectedTheme === 'highcontrast') {\n        args.fill = bubbleHighContrastColors[args.point.index % 10];\n        args.border.color = pointHighContrastColors[args.point.index % 10];\n    }\n    else if (selectedTheme === 'fluent-dark') {\n        args.fill = bubbleFluentDarkColors[args.point.index % 10];\n        args.border.color = pointFluentDarkColors[args.point.index % 10];\n    }\n    else if (selectedTheme === 'fluent') {\n        args.fill = bubbleFluentColors[args.point.index % 10];\n        args.border.color = pointFluentColors[args.point.index % 10];\n    }\n    else if (selectedTheme === 'tailwind-dark') {\n        args.fill = bubbleTailwindDarkColors[args.point.index % 10];\n        args.border.color = pointTailwindDarkColors[args.point.index % 10];\n    }\n    else if (selectedTheme === 'tailwind') {\n        args.fill = bubbleTailwindColors[args.point.index % 10];\n        args.border.color = pointTailwindColors[args.point.index % 10];\n    }\n    else if (selectedTheme === 'material3') {\n        args.fill = bubbleMaterial3Colors[args.point.index % 10];\n        args.border.color = pointMaterial3Colors[args.point.index % 10];\n    }\n    else if (selectedTheme === 'material3-dark') {\n        args.fill = bubbleMaterial3DarkColors[args.point.index % 10];\n        args.border.color = pointMaterial3DarkColors[args.point.index % 10];\n    }\n    else if (selectedTheme === 'fluent2') {\n        args.fill = bubbleFluent2Colors[args.point.index % 10];\n        args.border.color = pointFluent2Colors[args.point.index % 10];\n    }\n    else if (selectedTheme === 'fluent2-highcontrast') {\n        args.fill = bubbleFluent2HighContrastColors[args.point.index % 10];\n        args.border.color = pointFluent2HighContrastColors[args.point.index % 10];\n    }\n    else if (selectedTheme === 'fluent2-dark') {\n        args.fill = bubbleFluent2DarkColors[args.point.index % 10];\n        args.border.color = pointFluent2DarkColors[args.point.index % 10];\n    }\n    else if (selectedTheme === 'tailwind3-dark') {\n        args.fill = bubbleTailwind3DarkColors[args.point.index % 10];\n        args.border.color = pointTailwind3DarkColors[args.point.index % 10];\n    }\n    else if (selectedTheme === 'tailwind3') {\n        args.fill = bubbleTailwind3Colors[args.point.index % 10];\n        args.border.color = pointTailwind3Colors[args.point.index % 10];\n    }\n};\nexport let roundedPointRender = (args) => {\n    let selectedTheme = location.hash.split('/')[1];\n    selectedTheme = selectedTheme ? selectedTheme : 'Tailwind3';\n    if (selectedTheme && selectedTheme.indexOf('fabric-dark') > -1) {\n        if (args.series.yName == \"Rate\")\n            args.fill = \"f9fafb\";\n    }\n    else if (selectedTheme && selectedTheme.indexOf('fabric') > -1) {\n        if (args.series.yName == \"Rate\")\n            args.fill = \"grey\";\n    }\n    else if (selectedTheme === 'material-dark') {\n        if (args.series.yName == \"Rate\")\n            args.fill = \"f9fafb\";\n    }\n    else if (selectedTheme === 'material') {\n        if (args.series.yName == \"Rate\")\n            args.fill = \"grey\";\n    }\n    else if (selectedTheme === 'bootstrap5-dark') {\n        if (args.series.yName == \"Rate\")\n            args.fill = \"#f9fafb\";\n    }\n    else if (selectedTheme === 'bootstrap5') {\n        if (args.series.yName == \"Rate\")\n            args.fill = \"grey\";\n    }\n    else if (selectedTheme === 'bootstrap-dark') {\n        if (args.series.yName == \"Rate\")\n            args.fill = \"f9fafb\";\n    }\n    else if (selectedTheme === 'bootstrap') {\n        if (args.series.yName == \"Rate\")\n            args.fill = \"grey\";\n    }\n    else if (selectedTheme === 'highcontrast') {\n        if (args.series.yName == \"Rate\")\n            args.fill = \"#f9fafb\";\n    }\n    else if (selectedTheme === 'fluent-dark') {\n        if (args.series.yName == \"Rate\")\n            args.fill = \"#f9fafb\";\n    }\n    else if (selectedTheme === 'fluent') {\n        if (args.series.yName == \"Rate\")\n            args.fill = \"grey\";\n    }\n    else if (selectedTheme === 'tailwind-dark') {\n        if (args.series.yName == \"Rate\")\n            args.fill = \"#f9fafb\";\n    }\n    else if (selectedTheme === 'tailwind') {\n        if (args.series.yName == \"Rate\")\n            args.fill = \"grey\";\n    }\n    else if (selectedTheme === 'material3-dark') {\n        if (args.series.yName == \"Rate\")\n            args.fill = \"f9fafb\";\n    }\n    else if (selectedTheme === 'material3') {\n        if (args.series.yName == \"Rate\")\n            args.fill = \"grey\";\n    }\n    else if (selectedTheme === 'fluent2-highcontrast' || selectedTheme === 'fluent2-dark') {\n        if (args.series.yName == \"Rate\")\n            args.fill = \"#f9fafb\";\n    }\n    else if (selectedTheme === 'fluent2') {\n        if (args.series.yName == \"Rate\")\n            args.fill = \"grey\";\n    }\n    else if (selectedTheme === 'tailwind3-dark') {\n        if (args.series.yName == \"Rate\")\n            args.fill = \"#f9fafb\";\n    }\n    else if (selectedTheme === 'tailwind3') {\n        if (args.series.yName == \"Rate\")\n            args.fill = \"grey\";\n    }\n    else {\n        if (args.series.yName == \"Rate\")\n            args.fill = \"grey\";\n    }\n};\nexport let funnelPointRender = (args) => {\n    let selectedTheme = location.hash.split('/')[1];\n    selectedTheme = selectedTheme ? selectedTheme : 'Tailwind3';\n    if (selectedTheme && selectedTheme.indexOf('fabric') > -1) {\n        args.fill = pointFabricColors[0];\n    }\n    else if (selectedTheme === 'material-dark') {\n        args.fill = pointMaterialDarkColors[0];\n        ;\n    }\n    else if (selectedTheme === 'material') {\n        args.fill = pointMaterialColors[0];\n    }\n    else if (selectedTheme === 'bootstrap5-dark') {\n        args.fill = pointBootstrap5DarkColors[0];\n    }\n    else if (selectedTheme === 'bootstrap5') {\n        args.fill = pointBootstrap5Colors[0];\n    }\n    else if (selectedTheme === 'bootstrap') {\n        args.fill = pointBootstrapColors[0];\n    }\n    else if (selectedTheme === 'bootstrap4') {\n        args.fill = pointBootstrapColors[0];\n    }\n    else if (selectedTheme === 'bootstrap-dark') {\n        args.fill = pointBootstrapColors[0];\n    }\n    else if (selectedTheme === 'highcontrast') {\n        args.fill = pointHighContrastColors[0];\n    }\n    else if (selectedTheme === 'fluent-dark') {\n        args.fill = pointFluentDarkColors[0];\n    }\n    else if (selectedTheme === 'fluent') {\n        args.fill = pointFluentColors[0];\n    }\n    else if (selectedTheme === 'tailwind-dark') {\n        args.fill = pointTailwindDarkColors[0];\n    }\n    else if (selectedTheme === 'tailwind') {\n        args.fill = pointTailwindColors[0];\n    }\n    else if (selectedTheme === 'material3-dark') {\n        args.fill = pointMaterial3DarkColors[0];\n    }\n    else if (selectedTheme === 'material3') {\n        args.fill = pointMaterial3Colors[0];\n    }\n    else if (selectedTheme === 'fluent2') {\n        args.fill = pointFluent2Colors[0];\n    }\n    else if (selectedTheme === 'fluent2-highcontrast' || selectedTheme === 'fluent2-dark') {\n        args.fill = pointFluent2HighContrastColors[0];\n    }\n    else if (selectedTheme === 'tailwind3-dark') {\n        args.fill = pointTailwind3DarkColors[0];\n    }\n    else if (selectedTheme === 'tailwind3') {\n        args.fill = pointTailwind3Colors[0];\n    }\n    ;\n};\nexport let materialColors = ['#00bdae', '#404041', '#357cd2', '#e56590', '#f8b883', '#70ad47', '#dd8abd', '#7f84e8', '#7bb4eb',\n    '#ea7a57', '#404041', '#00bdae'];\nexport let fabricColors = ['#4472c4', '#ed7d31', '#ffc000', '#70ad47', '#5b9bd5',\n    '#c1c1c1', '#6f6fe2', '#e269ae', '#9e480e', '#997300', '#4472c4', '#70ad47', '#ffc000', '#ed7d31'];\nexport let bootstrapColors = ['#a16ee5', '#f7ce69', '#55a5c2', '#7ddf1e', '#ff6ea6',\n    '#7953ac', '#b99b4f', '#407c92', '#5ea716', '#b91c52'];\nexport let highContrastColors = ['#79ECE4', '#E98272', '#DFE6B6', '#C6E773', '#BA98FF',\n    '#FA83C3', '#00C27A', '#43ACEF', '#D681EF', '#D8BC6E'];\nexport let fluentColors = ['#1AC9E6', '#DA4CB2', '#EDBB40', '#AF4BCF', '#FF7266', '#1BD565', '#EE993D', '#5887FF', '#EC548D',\n    '#7D39C0'];\nexport let fluentDarkColors = ['#1AC9E6', '#DA4CB2', '#EDBB40', '#AF4BCF', '#FF7266', '#1BD565', '#EE993D', '#5887FF', '#EC548D',\n    '#7D39C0'];\nexport let bootstrap5Colors = ['#FD7E14', '#6610F2', '#6F42C1', '#D63384', '#DC3545',\n    '#FFC107', '#198754', '#0DCAF0', '#FD7E14', '#6610F2'];\nexport let bootstrap5DarkColors = ['#8F80F4', '#FFD46D', '#6CBDFF', '#FF7F71', '#FF6DB3', '#63F5D2', '#FCAA65', '#ECFF77', '#EF8EFF',\n    '#5F82FD'];\nexport let bubbleMaterialColors = [\"rgba(0, 189, 174, 0.5)\", \"rgba(64, 64, 65, 0.5)\", \"rgba(53, 124, 210, 0.5)\", \"rgba(229, 101, 144, 0.5)\", \"rgba(248, 184, 131, 0.5)\", \"rgba(112, 173, 71, 0.5)\", \"rgba(221, 138, 189, 0.5)\",\n    \"rgba(127, 132, 232, 0.5)\", \"rgba(123, 180, 235, 0.5)\", \"rgba(234, 122, 87, 0.5)\", \"rgba(64, 64, 65, 0.5)\", \"rgba(0, 189, 174, 0.5)\"];\nexport let bubbleFabricColors = [\"rgba(68, 114, 196, 0.5)\", \"rgba(237, 125, 49, 0.5)\", \"rgba(255, 192, 0, 0.5)\", \"rgba(112, 173, 71, 0.5)\", \"rgba(91, 155, 213, 0.5)\", \"rgba(193, 193, 193, 0.5)\", \"rgba(111, 111, 226, 0.5)\",\n    \"rgba(226, 105, 174, 0.5)\", \"rgba(158, 72, 14, 0.5)\", \"rgba(153, 115, 0, 0.5)\", \"rgba(68, 114, 196, 0.5)\", \"rgba(112, 173, 71, 0.5)\", \"rgba(255, 192, 0, 0.5)\", \"rgba(237, 125, 49, 0.5)\"];\nexport let bubbleBootstrapColors = [\"rgba(161, 110, 229, 0.5)\", \"rgba(247, 206, 105, 0.5)\", \"rgba(85, 165, 194, 0.5)\", \"rgba(125, 223, 30, 0.5)\", \"rgba(255, 110, 166, 0.5)\", \"rgba(121, 83, 172, 0.5)\",\n    \"rgba(185, 155, 79, 0.5)\", \"rgba(64, 124, 146, 0.5)\", \"rgba(94, 167, 22, 0.5)\", \"rgba(185, 28, 82, 0.5)\"];\nexport let bubbleHighContrastColors = [\"rgba(121, 236, 228, 0.5)\", \"rgba(233, 130, 114, 0.5)\", \"rgba(223, 230, 182, 0.5)\", \"rgba(198, 231, 115, 0.5)\", \"rgba(186, 152, 255, 0.5)\", \"rgba(250, 131, 195, 0.5)\", \"rgba(0, 194, 122, 0.5)\",\n    \"rgba(67, 172, 239, 0.5)\", \"rgba(214, 129, 239, 0.5)\", \"rgba(216, 188, 110, 0.5)\"];\nexport let bubbleFluentColors = [\"rgba(26, 201, 230, 0.5)\", \"rgba(218, 76, 178, 0.5)\", \"rgba(237, 187, 64, 0.5)\", \"rgba(175, 75, 207, 0.5)\", \"rgba(255, 114, 102, 0.5)\", \"rgba(27, 213, 101, 0.5)\", \"rgba(238, 153, 61, 0.5)\",\n    \"rgba(88, 135, 255, 0.5)\", \"rgba(236, 84, 141, 0.5)\", \"rgba(125, 57, 192, 0.5)\"];\nexport let bubbleMaterialDarkColors = [\"rgba(158, 203, 8, 0.5)\", \"rgba(86, 174, 255, 0.5)\", \"rgba(197, 122, 255, 0.5)\", \"rgba(97, 234, 169, 0.5)\", \"rgba(235, 187, 62, 0.5)\", \"rgba(244, 92, 92, 0.5)\", \"rgba(138, 119, 255, 0.5)\",\n    \"rgba(99, 199, 255, 0.5)\", \"rgba(255, 132, 176, 0.5)\", \"rgba(247, 201, 40, 0.5)\"];\nexport let bubbleFluentDarkColors = [\"rgba(26, 201, 230, 0.5)\", \"rgba(218, 76, 178, 0.5)\", \"rgba(237, 187, 64, 0.5)\", \"rgba(175, 75, 207, 0.5)\", \"rgba(255, 114, 102, 0.5)\", \"rgba(27, 213, 101, 0.5)\", \"rgba(238, 153, 61, 0.5)\",\n    \"rgba(88, 135, 255, 0.5)\", \"rgba(236, 84, 141, 0.5)\", \"rgba(125, 57, 192, 0.5)\"];\nexport let bubbleTailwindColors = [\"rgba(90, 97, 246, 0.5)\", \"rgba(101, 163, 13, 0.5)\", \"rgba(51, 65, 85, 0.5)\", \"rgba(20, 184, 166, 0.5)\", \"rgba(139, 92, 246, 0.5)\", \"rgba(3, 105, 161, 0.5)\", \"rgba(249, 115, 22, 0.5)\",\n    \"rgba(147, 51, 234, 0.5)\", \"rgba(245, 158, 11, 0.5)\", \"rgba(21, 128, 61, 0.5)\"];\nexport let bubbleTailwindDarkColors = [\"rgba(139, 92, 246, 0.5)\", \"rgba(34, 211, 238, 0.5)\", \"rgba(248, 113, 113, 0.5)\", \"rgba(74, 222, 128, 0.5)\", \"rgba(232, 121, 249, 0.5)\", \"rgba(252, 211, 77, 0.5)\", \"rgba(249, 115, 22, 0.5)\",\n    \"rgba(45, 212, 191, 0.5)\", \"rgba(244, 114, 182, 0.5)\", \"rgba(16, 185, 129, 0.5)\"];\nexport let bubbleTailwind3Colors = [\"rgba(47, 64, 116, 0.5)\", \"rgba(3, 180, 180, 0.5)\", \"rgba(13, 114, 222, 0.5)\", \"rgba(255, 87, 51, 0.5)\", \"rgba(214, 51, 132, 0.5)\", \"rgba(243, 156, 18, 0.5)\", \"rgba(239, 41, 31, 0.5)\", \"rgba(145, 200, 34, 0.5)\", \"rgba(47, 64, 116, 0.5)\", \"rgba(3, 180, 180, 0.5)\"];\nexport let bubbleTailwind3DarkColors = [\"rgba(128, 41, 241, 0.5)\", \"rgba(26, 188, 156, 0.5)\", \"rgba(13, 114, 222, 0.5)\", \"rgba(255, 87, 51, 0.5)\", \"rgba(214, 51, 132, 0.5)\", \"rgba(243, 156, 18, 0.5)\", \"rgba(239, 41, 31, 0.5)\", \"rgba(145, 200, 34, 0.5)\", \"rgba(128, 41, 241, 0.5)\", \"rgba(26, 188, 156, 0.5)\"];\nexport let bubbleBootstrap5Colors = ['rgba(253, 126, 20, 0.5)', 'rgba(102, 16, 242, 0.5)', 'rgba(111, 66, 193, 0.5)', 'rgba(214, 51, 132, 0.5)', 'rgba(220, 53, 69, 0.5)', 'rgba(255, 193, 7, 0.5)', 'rgba(25, 135, 84, 0.5)', 'rgba(13, 202, 240, 0.5)', 'rgba(253, 126, 20, 0.5)', 'rgba(102, 16, 242, 0.5)', 'rgba(111, 66, 193, 0.5)', 'rgba(214, 51, 132, 0.5)', 'rgba(220, 53, 69, 0.5)'];\nexport let bubbleBootstrap5DarkColors = ['rgba(253, 126, 20, 0.5)', 'rgba(102, 16, 242, 0.5)', 'rgba(111, 66, 193, 0.5)', 'rgba(214, 51, 132, 0.5)', 'rgba(220, 53, 69, 0.5)', 'rgba(255, 193, 7, 0.5)', 'rgba(25, 135, 84, 0.5)', 'rgba(13, 202, 240, 0.5)', 'rgba(253, 126, 20, 0.5)', 'rgba(102, 16, 242, 0.5)', 'rgba(111, 66, 193, 0.5)', 'rgba(214, 51, 132, 0.5)', 'rgba(220, 53, 69, 0.5)'];\nexport let bubbleMaterial3Colors = [\"rgba(99, 85, 199, 0.5)\", \"rgba(0, 174, 224, 0.5)\", \"rgba(255, 180, 0, 0.5)\", \"rgba(247, 82, 63, 0.5)\", \"rgba(150, 60, 112, 0.5)\", \"rgba(253, 116, 0, 0.5)\", \"rgba(75, 224, 188, 0.5)\",\n    \"rgba(33, 150, 245, 0.5)\", \"rgba(222, 61, 138, 0.5)\", \"rgba(22, 47, 136, 0.5)\"];\nexport let bubbleMaterial3DarkColors = [\"rgba(78, 170, 255, 0.5)\", \"rgba(250, 78, 171, 0.5)\", \"rgba(255, 245, 0, 0.5)\", \"rgba(23, 234, 88, 0.5)\", \"rgba(56, 255, 231, 0.5)\", \"rgba(255, 158, 69, 0.5)\", \"rgba(179, 243, 47, 0.5)\",\n    \"rgba(185, 60, 228, 0.5)\", \"rgba(252, 86, 100, 0.5)\", \"rgba(155, 85, 255, 0.5)\"];\nexport let bubbleFluent2DarkColors = [\"rgba(155, 180, 73, 0.5)\", \"rgba(42, 114, 213, 0.5)\", \"rgba(67, 183, 134, 0.5)\", \"rgba(63, 87, 154, 0.5)\", \"rgba(88, 78, 198, 0.5)\", \"rgba(232, 95, 156, 0.5)\", \"rgba(110, 122, 137, 0.5)\", \"rgba(234, 98, 102, 0.5)\",\n    \"rgba(11, 106, 11, 0.5)\", \"rgba(193, 156, 0, 0.5)\"];\nexport let keyFabricDark = [\"#4472C4\", \"#ED7D31\", \"#FFC000\", \"#70AD47\"];\nexport let keyBootstrap4Colors = ['#a16ee5', '#f7ce69', '#55a5c2', '#7ddf1e', '#ff6ea6', '#7953ac', '#b99b4f', '#407c92', '#5ea716', '#b91c52'];\nexport let keyBootstrapdarkColors = [\"#a16ee5\", \"#f7ce69\", \"#55a5c2\", \"#7ddf1e\", \"#ff6ea6\", \"#7953ac\", \"#b99b4f\", \"#407c92\", \"#5ea716\", \"#b91c52\"];\nexport let pointMaterialColors = [\"#00bdae\", \"#404041\", \"#357cd2\", \"#e56590\", \"#f8b883\", \"#70ad47\", \"#dd8abd\", \"#7f84e8\", \"#7bb4eb\",\n    \"#ea7a57\", \"#404041\", \"#00bdae\"];\nexport let pointFabricColors = [\"#4472c4\", \"#ed7d31\", \"#ffc000\", \"#70ad47\", \"#5b9bd5\", \"#c1c1c1\", \"#6f6fe2\", \"#e269ae\", \"#9e480e\",\n    \"#997300\", \"#4472c4\", \"#70ad47\", \"#ffc000\", \"#ed7d31\"];\nexport let pointBootstrapColors = [\"#a16ee5\", \"#f7ce69\", \"#55a5c2\", \"#7ddf1e\", \"#ff6ea6\", \"#7953ac\", \"#b99b4f\", \"#407c92\", \"#5ea716\",\n    \"#b91c52\"];\nexport let pointHighContrastColors = [\"#79ECE4\", \"#E98272\", \"#DFE6B6\", \"#C6E773\", \"#BA98FF\", \"#FA83C3\", \"#00C27A\", \"#43ACEF\", \"#D681EF\",\n    \"#D8BC6E\"];\nexport let pointFluentColors = ['#1AC9E6', '#DA4CB2', '#EDBB40', '#AF4BCF', '#FF7266', '#1BD565', '#EE993D', '#5887FF', '#EC548D',\n    '#7D39C0'];\nexport let pointMaterialDarkColors = [\"#9ECB08\", \"#56AEFF\", \"#C57AFF\", \"#61EAA9\", \"#EBBB3E\", \"#F45C5C\", \"#8A77FF\", \"#63C7FF\", \"#FF84B0\",\n    \"#F7C928\"];\nexport let pointFluentDarkColors = ['#1AC9E6', '#DA4CB2', '#EDBB40', '#AF4BCF', '#FF7266', '#1BD565', '#EE993D', '#5887FF', '#EC548D',\n    '#7D39C0'];\nexport let pointTailwindColors = [\"#5A61F6\", \"#65A30D\", \"#334155\", \"#14B8A6\", \"#8B5CF6\", \"#0369A1\", \"#F97316\", \"#9333EA\", \"#F59E0B\", \"#15803D\"];\nexport let pointTailwindDarkColors = [\"#8B5CF6\", \"#22D3EE\", \"#F87171\", \"#4ADE80\", \"#E879F9\", \"#FCD34D\", \"#F97316\", \"#2DD4BF\", \"#F472B6\", \"#10B981\"];\nexport let pointTailwind3Colors = ['#2F4074', '#03B4B4', '#0D72DE', '#FF5733', '#D63384', '#F39C12', '#EF291F', '#91C822', '#2F4074', '#03B4B4'];\nexport let pointTailwind3DarkColors = ['#8029F1', '#1ABC9C', '#0D72DE', '#FF5733', '#D63384', '#F39C12', '#EF291F', '#91C822', '#8029F1', '#1ABC9C'];\nexport let pointBootstrap5Colors = ['#FD7E14', '#6610F2', '#6F42C1', '#D63384', '#DC3545', '#FFC107', '#198754', '#0DCAF0'];\nexport let pointBootstrap5DarkColors = ['#FD7E14', '#6610F2', '#6F42C1', '#D63384', '#DC3545', '#FFC107', '#198754', '#0DCAF0'];\nexport let pointMaterial3Colors = [\"#6355C7\", \"#00AEE0\", \"#FFB400\", \"#F7523F\", \"#963C70\", \"#FD7400\", \"#4BE0BC\", \"#2196F5\", \"#DE3D8A\", \"#162F88\"];\nexport let pointMaterial3DarkColors = [\"#4EAAFF\", \"#FA4EAB\", \"#FFF500\", \"#17EA58\", \"#38FFE7\", \"#FF9E45\", \"#B3F32F\", \"#B93CE4\", \"#FC5664\", \"#9B55FF\"];\nexport let fluent2Colors = [\"#6200EE\", \"#09AF74\", \"#0076E5\", \"#CB3587\", \"#E7910F\", \"#0364DE\", \"#66CD15\", \"#F3A93C\", \"#107C10\",\n    \"#C19C00\"];\nexport let fluent2HighContrastColors = [\"#9BB449\", \"#2A72D5\", \"#43B786\", \"#3F579A\", \"#584EC6\", \"#E85F9C\", \"#6E7A89\", \"#EA6266\",\n    \"#0B6A0B\", \"#C19C00\"];\nexport let fluent2DarkColors = [\"#9BB449\", \"#2A72D5\", \"#43B786\", \"#3F579A\", \"#584EC6\", \"#E85F9C\", \"#6E7A89\", \"#EA6266\",\n    \"#0B6A0B\", \"#C19C00\"];\nexport let bubbleFluent2Colors = [\"rgba(98, 0, 238, 0.5)\", \"rgba(9, 175, 116, 0.5)\", \"rgba(0, 118, 229, 0.5)\", \"rgba(203, 53, 135, 0.5)\", \"rgba(231, 145, 15, 0.5)\", \"rgba(3, 100, 222, 0.5)\", \"rgba(102, 205, 21, 0.5)\", \"rgba(243, 169, 60, 0.5)\",\n    \"rgba(16, 124, 16, 0.5)\", \"rgba(193, 156, 0, 0.5)\"];\nexport let bubbleFluent2HighContrastColors = [\"rgba(155, 180, 73, 0.5)\", \"rgba(42, 114, 213, 0.5)\", \"rgba(67, 183, 134, 0.5)\", \"rgba(63, 87, 154, 0.5)\", \"rgba(88, 78, 198, 0.5)\", \"rgba(232, 95, 156, 0.5)\", \"rgba(110, 122, 137, 0.5)\", \"rgba(234, 98, 102, 0.5)\",\n    \"rgba(11, 106, 11, 0.5)\", \"rgba(193, 156, 0, 0.5)\"];\nexport let pointFluent2Colors = [\"#6200EE\", \"#09AF74\", \"#0076E5\", \"#CB3587\", \"#E7910F\", \"#0364DE\", \"#66CD15\", \"#F3A93C\", \"#107C10\",\n    \"#C19C00\"];\nexport let pointFluent2HighContrastColors = [\"#9BB449\", \"#2A72D5\", \"#43B786\", \"#3F579A\", \"#584EC6\", \"#E85F9C\", \"#6E7A89\", \"#EA6266\",\n    \"#0B6A0B\", \"#C19C00\"];\nexport let pointFluent2DarkColors = [\"#9BB449\", \"#2A72D5\", \"#43B786\", \"#3F579A\", \"#584EC6\", \"#E85F9C\", \"#6E7A89\", \"#EA6266\", \"#0B6A0B\", \"#C19C00\"];\n","index.html":"<!DOCTYPE html>\n<html>\n<head>\n    <title>Syncfusion React Sample</title>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\n    <meta name=\"author\" content=\"Syncfusion\" />\n    <link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\n</head>\n\n<body class=\"{{theme}}\">\n     <style>\n            .control-section\n            {\n                margin-top: 100px;\n            }\n    </style>\n    <div id='sample'>\n</body>\n</html>\n","index.js":"import { createRoot } from 'react-dom/client';\nimport './index.css';\nimport { useEffect, useRef } from 'react';\nimport * as React from 'react';\nimport { ChartComponent, SeriesCollectionDirective, SeriesDirective, Inject, ColumnSeries, DataLabel, Category, Legend, Tooltip, Highlight } from '@syncfusion/ej2-react-charts';\nimport { Browser } from '@syncfusion/ej2-base';\n\nimport { bubbleFabricColors, pointFabricColors, pointMaterialDarkColors, bubbleMaterialDarkColors, bubbleMaterialColors, pointMaterialColors, bubbleBootstrap5DarkColors, pointBootstrap5DarkColors, bubbleBootstrap5Colors, pointBootstrap5Colors, bubbleBootstrapColors, pointBootstrapColors, bubbleHighContrastColors, pointHighContrastColors, bubbleFluentDarkColors, pointFluentDarkColors, bubbleFluentColors, pointFluentColors, bubbleTailwindDarkColors, pointTailwindDarkColors, bubbleTailwindColors, pointTailwindColors, bubbleMaterial3Colors, pointMaterial3Colors, bubbleMaterial3DarkColors, pointMaterial3DarkColors, bubbleFluent2Colors, pointFluent2Colors, bubbleFluent2HighContrastColors, pointFluent2HighContrastColors, bubbleFluent2DarkColors, pointFluent2DarkColors, pointTailwind3Colors, pointTailwind3DarkColors, loadChartTheme, bubbleTailwind3DarkColors, bubbleTailwind3Colors } from './theme-color';\nconst SAMPLE_CSS = `\n   #control-container {\n        padding: 0px !important;\n    }\n\n    .no-underline {\n      text-decoration: none !important;\n      cursor: auto !important;\n\n    }\n\n    #drilldown0_AxisLabel_0,\n    #drilldown0_AxisLabel_1,\n    #drilldown0_AxisLabel_2,\n    #drilldown0_AxisLabel_3,\n    #drilldown0_AxisLabel_4,\n    #drilldown_Series_0_Point_0,\n    #drilldown_Series_0_Point_1,\n    #drilldown_Series_0_Point_2,\n    #drilldown_Series_0_Point_3,\n    #drilldown_Series_0_Point_4,\n    #drilldown0_AxisLabel_5 {\n           text-decoration: underline;\n           cursor: pointer;\n\n    }\n\n    #category:hover {\n        cursor: pointer;\n    }`;\nconst ColumnDrilldown = () => {\n    const chartRef = useRef(null);\n    let clicked = false;\n    let data = ([\n        { y: 4778, drilldown: 'Asia' },\n        { y: 1481, drilldown: 'Africa' },\n        { y: 746, drilldown: 'Europe' },\n        { y: 379, drilldown: 'North America' },\n        { y: 46, drilldown: 'Oceania' }\n    ]);\n    let title = 'Top Populated Continents of 2023';\n    let subTitle = 'A Look at Population Rankings and Trends in 2023';\n    let categoryText = '';\n    const loaded = (args) => {\n        let chart = document.getElementById('drilldown');\n        chart.setAttribute('title', '');\n        if (clicked) {\n            for (let i = 0; i <= 6; i++) {\n                const axisLabel = document.getElementById(`drilldown0_AxisLabel_${i}`);\n                if (axisLabel) {\n                    axisLabel.classList.add('no-underline');\n                }\n                const seriesElement = document.getElementById(`drilldown_Series_0_Point_${i}`);\n                if (seriesElement) {\n                    seriesElement.classList.add('no-underline');\n                }\n            }\n        }\n    };\n    const onLoad = (args) => {\n        loadChartTheme(args);\n    };\n    const onPointRender = (args) => {\n        if (!clicked) {\n            let selectedTheme = location.hash.split('/')[1];\n            selectedTheme = selectedTheme ? selectedTheme : 'material';\n            const colorSet = {\n                'fabric': [bubbleFabricColors, pointFabricColors],\n                'material-dark': [bubbleMaterialDarkColors, pointMaterialDarkColors],\n                'material': [bubbleMaterialColors, pointMaterialColors],\n                'bootstrap5-dark': [bubbleBootstrap5DarkColors, pointBootstrap5DarkColors],\n                'bootstrap5': [bubbleBootstrap5Colors, pointBootstrap5Colors],\n                'bootstrap': [bubbleBootstrapColors, pointBootstrapColors],\n                'highcontrast': [bubbleHighContrastColors, pointHighContrastColors],\n                'fluent-dark': [bubbleFluentDarkColors, pointFluentDarkColors],\n                'fluent': [bubbleFluentColors, pointFluentColors],\n                'tailwind-dark': [bubbleTailwindDarkColors, pointTailwindDarkColors],\n                'tailwind': [bubbleTailwindColors, pointTailwindColors],\n                'material3': [bubbleMaterial3Colors, pointMaterial3Colors],\n                'material3-dark': [bubbleMaterial3DarkColors, pointMaterial3DarkColors],\n                'fluent2': [bubbleFluent2Colors, pointFluent2Colors],\n                'fluent2-highcontrast': [bubbleFluent2HighContrastColors, pointFluent2HighContrastColors],\n                'fluent2-dark': [bubbleFluent2DarkColors, pointFluent2DarkColors],\n                'tailwind3-dark': [bubbleTailwind3DarkColors, pointTailwind3DarkColors],\n                'tailwind3': [bubbleTailwind3Colors, pointTailwind3Colors]\n            };\n            const themeColors = colorSet[selectedTheme] || [bubbleMaterialColors, pointMaterialColors];\n            args.fill = themeColors[1][args.point.index % 10];\n            args.border.color = themeColors[1][args.point.index % 10];\n        }\n    };\n    const pointClick = (args) => {\n        args.series.fill = args.point.color;\n        if (args.point.index !== 6) {\n            args.series.yAxis.interval = null;\n            if (!args.series.chart.theme.includes('Dark') && args.series.chart.theme !== 'HighContrast' && args.series.chart.theme !== 'Fluent2HighContrast') {\n                args.series.chart.primaryXAxis.labelStyle.color = \"black\";\n            }\n            else if (args.series.chart.theme === 'Material3Dark') {\n                args.series.chart.primaryXAxis.labelStyle.color = \"#CAC4D0\";\n            }\n            else if (args.series.chart.theme === 'FluentDark') {\n                args.series.chart.primaryXAxis.labelStyle.color = \"#C8C6C4\";\n            }\n            else if (args.series.chart.theme === 'Fluent2Dark') {\n                args.series.chart.primaryXAxis.labelStyle.color = \"#ADADAD\";\n            }\n            else if (args.series.chart.theme === 'Bootstrap5Dark') {\n                args.series.chart.primaryXAxis.labelStyle.color = \"#DEE2E6\";\n            }\n            else if (args.series.chart.theme === 'TailwindDark') {\n                args.series.chart.primaryXAxis.labelStyle.color = \"#9CA3AF\";\n            }\n            else if (args.series.chart.theme === 'Tailwind3Dark') {\n                args.series.chart.primaryXAxis.labelStyle.color = \"#D1D5DB\";\n            }\n            else if (args.series.chart.theme === 'HighContrast') {\n                args.series.chart.primaryXAxis.labelStyle.color = \"#969696\";\n            }\n            else if (args.series.chart.theme === 'Fluent2HighContrast') {\n                args.series.chart.primaryXAxis.labelStyle.color = \"#FFFFFF\";\n            }\n            if (!clicked) {\n                document.getElementById(\"text\").innerHTML = String(args.point.x);\n                document.getElementById(\"category\").style.visibility = \"visible\";\n                document.getElementById(\"symbol\").style.visibility = \"visible\";\n                document.getElementById(\"text\").style.visibility = \"visible\";\n                if (args.point.index === 0) {\n                    args.series.chart.title = \"Top Populated Countries of Asia - 2023\";\n                    args.series.chart.subTitle = \"A Look at Population Rankings and Trends in 2023\";\n                    clicked = true;\n                    args.series.chart.series[0].dataSource = [{\n                            y: 1422,\n                            drilldown: 'China'\n                        },\n                        {\n                            y: 1438,\n                            drilldown: 'India'\n                        },\n                        {\n                            y: 278,\n                            drilldown: 'Indonesia'\n                        },\n                        {\n                            y: 240,\n                            drilldown: 'Pakistan'\n                        },\n                        {\n                            y: 173,\n                            drilldown: 'Bangladesh'\n                        },\n                        {\n                            y: 125,\n                            drilldown: 'Japan'\n                        },\n                        {\n                            y: 117,\n                            drilldown: 'Philippines'\n                        },\n                        {\n                            y: 99,\n                            drilldown: 'Vietnam'\n                        }\n                    ];\n                }\n                if (args.point.index === 1) {\n                    args.series.chart.title = \"Top Populated Countries of Africa - 2023\";\n                    args.series.chart.subTitle = \"A Look at Population Rankings and Trends in 2023\";\n                    clicked = true;\n                    args.series.chart.series[0].dataSource = [{\n                            y: 223,\n                            drilldown: 'Nigeria'\n                        },\n                        {\n                            y: 126,\n                            drilldown: 'Ethiopia'\n                        },\n                        {\n                            y: 113,\n                            drilldown: 'Egypt'\n                        },\n                        {\n                            y: 68,\n                            drilldown: 'Tanzania'\n                        },\n                        {\n                            y: 60,\n                            drilldown: 'South Africa'\n                        },\n                        {\n                            y: 55,\n                            drilldown: 'Kenya'\n                        },\n                        {\n                            y: 48,\n                            drilldown: 'Uganda'\n                        }\n                    ];\n                }\n                if (args.point.index === 2) {\n                    args.series.chart.title = \"Top Populated Countries of Europe - 2023\";\n                    args.series.chart.subTitle = \"A Look at Population Rankings and Trends in 2023\";\n                    clicked = true;\n                    args.series.chart.series[0].dataSource = [{\n                            y: 143,\n                            drilldown: 'Russia'\n                        },\n                        {\n                            y: 84,\n                            drilldown: 'Germany'\n                        },\n                        {\n                            y: 67,\n                            drilldown: 'United Kingdom'\n                        },\n                        {\n                            y: 65,\n                            drilldown: 'France'\n                        },\n                        {\n                            y: 59,\n                            drilldown: 'Italy'\n                        },\n                        {\n                            y: 47,\n                            drilldown: 'Spain'\n                        }\n                    ];\n                }\n                if (args.point.index === 3) {\n                    args.series.chart.title = \"Top Populated Countries of North America - 2023\";\n                    args.series.chart.subTitle = \"A Look at Population Rankings and Trends in 2023\";\n                    clicked = true;\n                    args.series.chart.series[0].dataSource = [{\n                            y: 339,\n                            drilldown: 'United States'\n                        },\n                        {\n                            y: 127,\n                            drilldown: 'Mexico'\n                        },\n                        {\n                            y: 39,\n                            drilldown: 'Canada'\n                        },\n                        {\n                            y: 19,\n                            drilldown: 'Guatemala'\n                        },\n                        {\n                            y: 10,\n                            drilldown: 'Honduras'\n                        },\n                        {\n                            y: 6,\n                            drilldown: 'El Salvador'\n                        },\n                        {\n                            y: 6,\n                            drilldown: 'Nicaragua'\n                        },\n                        {\n                            y: 5,\n                            drilldown: 'Costa Rica'\n                        }\n                    ];\n                }\n                if (args.point.index === 4) {\n                    args.series.chart.title = \"Top Populated Countries of Oceania - 2023\";\n                    args.series.chart.subTitle = \"A Look at Population Rankings and Trends in 2023\";\n                    clicked = true;\n                    args.series.chart.series[0].dataSource = [{\n                            y: 26,\n                            drilldown: 'Australia'\n                        },\n                        {\n                            y: 9,\n                            drilldown: 'Papua New Guinea'\n                        },\n                        {\n                            y: 5,\n                            drilldown: 'New Zealand'\n                        }\n                    ];\n                }\n            }\n        }\n    };\n    const onAxisLabelClick = (args) => {\n        if (args.axis.name === \"primaryXAxis\") {\n            args.chart.series[0].fill = args.chart.series[0].points[args.index].color;\n            if (args.index !== 6) {\n                args.chart.primaryYAxis.interval = null;\n                if (!args.chart.theme.includes('Dark') && args.chart.theme !== 'HighContrast' && args.chart.theme !== 'Fluent2HighContrast') {\n                    args.chart.primaryXAxis.labelStyle.color = \"black\";\n                }\n                else if (args.chart.theme === 'Material3Dark') {\n                    args.chart.primaryXAxis.labelStyle.color = \"#CAC4D0\";\n                }\n                else if (args.chart.theme === 'FluentDark') {\n                    args.chart.primaryXAxis.labelStyle.color = \"#C8C6C4\";\n                }\n                else if (args.chart.theme === 'Fluent2Dark') {\n                    args.chart.primaryXAxis.labelStyle.color = \"#ADADAD\";\n                }\n                else if (args.chart.theme === 'Bootstrap5Dark') {\n                    args.chart.primaryXAxis.labelStyle.color = \"#DEE2E6\";\n                }\n                else if (args.chart.theme === 'TailwindDark') {\n                    args.chart.primaryXAxis.labelStyle.color = \"#9CA3AF\";\n                }\n                else if (args.chart.theme === 'Tailwind3Dark') {\n                    args.chart.primaryXAxis.labelStyle.color = \"#D1D5DB\";\n                }\n                else if (args.chart.theme === 'HighContrast') {\n                    args.chart.primaryXAxis.labelStyle.color = \"#969696\";\n                }\n                else if (args.chart.theme === 'Fluent2HighContrast') {\n                    args.chart.primaryXAxis.labelStyle.color = \"#FFFFFF\";\n                }\n                if (!clicked) {\n                    document.getElementById(\"text\").innerHTML = args.text;\n                    document.getElementById(\"category\").style.visibility = \"visible\";\n                    document.getElementById(\"symbol\").style.visibility = \"visible\";\n                    document.getElementById(\"text\").style.visibility = \"visible\";\n                    if (args.index === 0) {\n                        args.chart.title = \"Top Populated Countries of Asia - 2023\";\n                        args.chart.subTitle = \"A Look at Population Rankings and Trends in 2023\";\n                        clicked = true;\n                        args.chart.series[0].dataSource = [{\n                                y: 1422,\n                                drilldown: 'China'\n                            },\n                            {\n                                y: 1438,\n                                drilldown: 'India'\n                            },\n                            {\n                                y: 278,\n                                drilldown: 'Indonesia'\n                            },\n                            {\n                                y: 240,\n                                drilldown: 'Pakistan'\n                            },\n                            {\n                                y: 173,\n                                drilldown: 'Bangladesh'\n                            },\n                            {\n                                y: 125,\n                                drilldown: 'Japan'\n                            },\n                            {\n                                y: 117,\n                                drilldown: 'Philippines'\n                            },\n                            {\n                                y: 99,\n                                drilldown: 'Vietnam'\n                            }\n                        ];\n                    }\n                    if (args.index === 1) {\n                        args.chart.title = \"Top Populated Countries of Africa - 2023\";\n                        args.chart.subTitle = \"A Look at Population Rankings and Trends in 2023\";\n                        clicked = true;\n                        args.chart.series[0].dataSource = [{\n                                y: 223,\n                                drilldown: 'Nigeria'\n                            },\n                            {\n                                y: 126,\n                                drilldown: 'Ethiopia'\n                            },\n                            {\n                                y: 113,\n                                drilldown: 'Egypt'\n                            },\n                            {\n                                y: 68,\n                                drilldown: 'Tanzania'\n                            },\n                            {\n                                y: 60,\n                                drilldown: 'South Africa'\n                            },\n                            {\n                                y: 55,\n                                drilldown: 'Kenya'\n                            },\n                            {\n                                y: 48,\n                                drilldown: 'Uganda'\n                            }\n                        ];\n                    }\n                    if (args.index === 2) {\n                        args.chart.title = \"Top Populated Countries of Europe - 2023\";\n                        args.chart.subTitle = \"A Look at Population Rankings and Trends in 2023\";\n                        clicked = true;\n                        args.chart.series[0].dataSource = [{\n                                y: 143,\n                                drilldown: 'Russia'\n                            },\n                            {\n                                y: 84,\n                                drilldown: 'Germany'\n                            },\n                            {\n                                y: 67,\n                                drilldown: 'United Kingdom'\n                            },\n                            {\n                                y: 65,\n                                drilldown: 'France'\n                            },\n                            {\n                                y: 59,\n                                drilldown: 'Italy'\n                            },\n                            {\n                                y: 47,\n                                drilldown: 'Spain'\n                            }\n                        ];\n                    }\n                    if (args.index === 3) {\n                        args.chart.title = \"Top Populated Countries of North America - 2023\";\n                        args.chart.subTitle = \"A Look at Population Rankings and Trends in 2023\";\n                        clicked = true;\n                        args.chart.series[0].dataSource = [{\n                                y: 339,\n                                drilldown: 'United States'\n                            },\n                            {\n                                y: 127,\n                                drilldown: 'Mexico'\n                            },\n                            {\n                                y: 39,\n                                drilldown: 'Canada'\n                            },\n                            {\n                                y: 19,\n                                drilldown: 'Guatemala'\n                            },\n                            {\n                                y: 10,\n                                drilldown: 'Honduras'\n                            },\n                            {\n                                y: 6,\n                                drilldown: 'El Salvador'\n                            },\n                            {\n                                y: 6,\n                                drilldown: 'Nicaragua'\n                            },\n                            {\n                                y: 5,\n                                drilldown: 'Costa Rica'\n                            }\n                        ];\n                    }\n                    if (args.index === 4) {\n                        args.chart.title = \"Top Populated Countries of Oceania - 2023\";\n                        args.chart.subTitle = \"A Look at Population Rankings and Trends in 2023\";\n                        clicked = true;\n                        args.chart.series[0].dataSource = [{\n                                y: 26,\n                                drilldown: 'Australia'\n                            },\n                            {\n                                y: 9,\n                                drilldown: 'Papua New Guinea'\n                            },\n                            {\n                                y: 5,\n                                drilldown: 'New Zealand'\n                            }\n                        ];\n                    }\n                }\n            }\n        }\n    };\n    const goBack = (e) => {\n        const chart = chartRef.current;\n        chart.title = \"Top Populated Continents of 2023\";\n        chart.subTitle = \"A Look at Population Rankings and Trends in 2023\";\n        chart.primaryXAxis.labelStyle.color = \"blue\";\n        chart.primaryYAxis.interval = 1000;\n        chart.series[0].dataSource = data;\n        clicked = false;\n        e.target.style.visibility = 'hidden';\n        document.getElementById(('symbol')).style.visibility = 'hidden';\n        document.getElementById(('text')).style.visibility = 'hidden';\n    };\n    const tooltipRender = (args) => {\n        args.text = args.text.replace(/\\d+/g, (num) => Number(num).toLocaleString('en-US'));\n    };\n    return (<div className='control-pane'>\n             <style>{SAMPLE_CSS}</style>\n            <div className='control-section'>\n                <div id=\"link\">\n                    <a id=\"category\" style={{ visibility: clicked ? 'visible' : 'hidden', display: 'inline-block', cursor: 'pointer' }} onClick={goBack}>Population</a>\n                    <p style={{ visibility: clicked ? 'visible' : 'hidden', display: 'inline-block' }} id=\"symbol\">&nbsp;&gt;&gt;&nbsp;</p>\n                    <p id=\"text\" style={{ visibility: clicked ? 'visible' : 'hidden', display: 'inline-block' }}>{categoryText}</p>\n                </div>\n\n                <ChartComponent id=\"drilldown\" style={{ textAlign: \"center\" }} ref={chartRef} primaryXAxis={{\n            valueType: 'Category',\n            labelStyle: { color: 'blue' },\n            interval: 1,\n            majorGridLines: { width: 0 },\n            labelIntersectAction: Browser.isDevice ? 'None' : 'Rotate90',\n            labelRotation: Browser.isDevice ? -45 : 0,\n            majorTickLines: { width: 0 },\n            minorTickLines: { width: 0 }\n        }} primaryYAxis={{\n            interval: 1000,\n            title: 'Population (in Millions)',\n            majorTickLines: { width: 0 },\n            lineStyle: { width: 0 }\n        }} width={Browser.isDevice ? '100%' : '75%'} title={title} subTitle={subTitle} tooltip={{ enable: true, header: \"<b>Population - 2023</b>\", format: '${point.x}: <b>${point.y}M</b>' }} legendSettings={{ visible: false }} chartArea={{ border: { width: 0 } }} load={onLoad.bind(this)} loaded={loaded.bind(this)} pointRender={onPointRender} pointClick={pointClick} axisLabelClick={onAxisLabelClick} tooltipRender={tooltipRender.bind(this)}>\n                    <Inject services={[ColumnSeries, DataLabel, Category, Legend, Tooltip, Highlight]}/>\n                    <SeriesCollectionDirective>\n                        <SeriesDirective dataSource={data} xName='drilldown' yName='y' name='Population' type='Column' cornerRadius={{ topLeft: 5, topRight: 5 }} marker={{\n            dataLabel: {\n                visible: true,\n                position: 'Outer',\n            }\n        }} width={2}/>\n                    </SeriesCollectionDirective>\n                </ChartComponent>\n            </div>\n        </div>);\n};\nexport default ColumnDrilldown;\n\nconst root = createRoot(document.getElementById('sample'));\nroot.render(<ColumnDrilldown />);","dependencies":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-react-base\":\"*\",\"@syncfusion/ej2-charts\":\"*\",\"@syncfusion/ej2-react-charts\":\"*\",\"@syncfusion/ej2-icons\":\"*\",\"markdown-spellcheck\":\"^1.3.1\",\"@syncfusion/ej2/base\":\"*\",\"@syncfusion/ej2-charts'; // Import the necessary types from Syncfusion\":\"*\"}"}