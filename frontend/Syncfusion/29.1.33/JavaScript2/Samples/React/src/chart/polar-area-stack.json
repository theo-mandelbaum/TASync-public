{"index.css":"/* css */","property-pane.js":"import * as ReactDOM from 'react-dom';\nimport * as React from 'react';\nimport { select } from '@syncfusion/ej2-base';\nexport class PropertyPane extends React.Component {\n    render() {\n        const mobilePropPane = select('.sb-mobile-prop-pane');\n        const isMobile = window.matchMedia('(max-width:550px)').matches;\n        return isMobile && mobilePropPane ?\n            ReactDOM.createPortal(<div className='property-panel-section'>\n                    <div className=\"property-panel-header\">\n                        {this.props.title}\n                    </div>\n                    <div className=\"property-panel-content\">\n                        {this.props.children}\n                    </div>\n                </div>, mobilePropPane)\n            :\n                (<div className='property-panel-section'>\n                    <div className=\"property-panel-header\">\n                        {this.props.title}\n                    </div>\n                    <div className=\"property-panel-content\">\n                        {this.props.children}\n                    </div>\n                </div>);\n    }\n}\n","index.html":"<!DOCTYPE html>\n<html>\n<head>\n    <title>Syncfusion React Sample</title>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\n    <meta name=\"author\" content=\"Syncfusion\" />\n    <link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\n</head>\n\n<body class=\"{{theme}}\">\n     <style>\n            .control-section\n            {\n                margin-top: 100px;\n            }\n    </style>\n    <div id='sample'>\n</body>\n</html>\n","index.js":"import { createRoot } from 'react-dom/client';\nimport './index.css';\n/**\n * Sample for Polar Series with drawType Area\n */\nimport * as React from \"react\";\nimport { ChartComponent, SeriesCollectionDirective, SeriesDirective, Inject, Legend, Category, AreaSeries, PolarSeries, RadarSeries, Tooltip, Highlight } from '@syncfusion/ej2-react-charts';\nimport { PropertyPane } from './property-pane';\nimport { DropDownListComponent } from '@syncfusion/ej2-react-dropdowns';\nimport { Browser } from '@syncfusion/ej2-base';\nimport { SampleBase } from './sample-base';\nexport let data1 = [{ x: '2000', y: 4 }, { x: '2001', y: 3.0 },\n    { x: '2002', y: 3.8 }, { x: '2003', y: 3.4 },\n    { x: '2004', y: 3.2 }, { x: '2005', y: 3.9 }];\nexport let data2 = [{ x: '2000', y: 2.6 }, { x: '2001', y: 2.8 },\n    { x: '2002', y: 2.6 }, { x: '2003', y: 3 },\n    { x: '2004', y: 3.6 }, { x: '2005', y: 3 }];\nexport let data3 = [{ x: '2000', y: 2.8 }, { x: '2001', y: 2.5 },\n    { x: '2002', y: 2.8 }, { x: '2003', y: 3.2 },\n    { x: '2004', y: 2.9 }, { x: '2005', y: 2 }];\nconst SAMPLE_CSS = `\n    .control-fluid {\n\t\tpadding: 0px !important;\n\t}`;\nexport class PolarArea extends SampleBase {\n    chartInstance;\n    dropElement;\n    loaded;\n    change() {\n        this.chartInstance.series[0].type = this.dropElement.value;\n        this.chartInstance.series[1].type = this.dropElement.value;\n        this.chartInstance.series[2].type = this.dropElement.value;\n        this.chartInstance.refresh();\n    }\n    ;\n    droplist = [\n        { value: 'Polar' },\n        { value: 'Radar' }\n    ];\n    render() {\n        return (<div className='control-pane'>\n                <style>{SAMPLE_CSS}</style>\n                <div className='control-section row'>\n                    <div className='col-md-8'>\n                        <ChartComponent id='charts' ref={chart => this.chartInstance = chart} primaryXAxis={{ valueType: 'Category', labelPlacement: 'OnTicks', interval: 1, coefficient: Browser.isDevice ? 80 : 100 }} primaryYAxis={{ title: 'Revenue in Millions', labelFormat: '{value}M' }} legendSettings={{ visible: true, enableHighlight: true }} tooltip={{ enable: true, enableHighlight: true }} load={this.load.bind(this)} title=\"Average Sales Comparison\" loaded={this.onChartLoad.bind(this)}>\n                            <Inject services={[AreaSeries, Legend, Category, PolarSeries, RadarSeries, Highlight, Tooltip]}/>\n                            <SeriesCollectionDirective>\n                                <SeriesDirective dataSource={data1} xName='x' yName='y' name='Product A' width={2} opacity={0.5} type='Polar' drawType='Area' border={{ color: 'transparent' }}/>\n                                <SeriesDirective dataSource={data2} xName='x' yName='y' name='Product B' width={2} opacity={0.5} type='Polar' drawType='Area' border={{ color: 'transparent' }}/>\n                                <SeriesDirective dataSource={data3} xName='x' yName='y' name='Product C' width={2} opacity={0.5} type='Polar' drawType='Area' border={{ color: 'transparent' }}/>\n                            </SeriesCollectionDirective>\n                        </ChartComponent>\n                    </div>\n                    <div className='col-md-4 property-section'>\n                        <PropertyPane title='Properties'>\n                            <table id='property' title='Properties' className='property-panel-table' style={{ width: '100%' }}>\n                            <tbody><tr style={{ height: '50px' }}>\n                                    <td style={{ width: '60%' }}>\n                                        <div>Series Type:</div>\n                                    </td>\n                                    <td style={{ width: '40%' }}>\n                                        <div>\n                                            <DropDownListComponent width={120} id=\"selmode\" change={this.change.bind(this)} ref={d => this.dropElement = d} dataSource={this.droplist} fields={{ text: 'value', value: 'value' }} value='Polar'/>\n                                        </div>\n                                    </td>\n                                </tr></tbody>\n                            </table>\n                        </PropertyPane>\n                    </div>\n                </div>\n            </div>);\n    }\n    onChartLoad(args) {\n        document.getElementById('charts').setAttribute('title', '');\n    }\n    ;\n    load(args) {\n        let selectedTheme = location.hash.split('/')[1];\n        selectedTheme = selectedTheme ? selectedTheme : 'Fluent2';\n        args.chart.theme = (selectedTheme.charAt(0).toUpperCase() + selectedTheme.slice(1)).replace(/-dark/i, \"Dark\").replace(/contrast/i, 'Contrast').replace(/-highContrast/i, 'HighContrast');\n    }\n    ;\n}\n\nconst root = createRoot(document.getElementById('sample'));\nroot.render(<PolarArea />);","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n                this.rendereComplete();\n            });\n        }\n    }\n    export function updateSampleSection(){}\n    ","dependencies":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-react-base\":\"*\",\"@syncfusion/ej2-charts\":\"*\",\"@syncfusion/ej2-react-charts\":\"*\",\"@syncfusion/ej2-dropdowns\":\"*\",\"@syncfusion/ej2-react-dropdowns\":\"*\",\"@syncfusion/ej2-icons\":\"*\",\"markdown-spellcheck\":\"^1.3.1\",\"@syncfusion/ej2/base\":\"*\",\"@syncfusion/ej2-charts'; // Import the necessary types from Syncfusion\":\"*\"}"}