{"index.css":"/* css */","property-pane.js":"import * as ReactDOM from 'react-dom';\nimport * as React from 'react';\nimport { select } from '@syncfusion/ej2-base';\nexport class PropertyPane extends React.Component {\n    render() {\n        const mobilePropPane = select('.sb-mobile-prop-pane');\n        const isMobile = window.matchMedia('(max-width:550px)').matches;\n        return isMobile && mobilePropPane ?\n            ReactDOM.createPortal(<div className='property-panel-section'>\n                    <div className=\"property-panel-header\">\n                        {this.props.title}\n                    </div>\n                    <div className=\"property-panel-content\">\n                        {this.props.children}\n                    </div>\n                </div>, mobilePropPane)\n            :\n                (<div className='property-panel-section'>\n                    <div className=\"property-panel-header\">\n                        {this.props.title}\n                    </div>\n                    <div className=\"property-panel-content\">\n                        {this.props.children}\n                    </div>\n                </div>);\n    }\n}\n","index.html":"<!DOCTYPE html>\n<html>\n<head>\n    <title>Syncfusion React Sample</title>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\n    <meta name=\"author\" content=\"Syncfusion\" />\n    <link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\n</head>\n\n<body class=\"{{theme}}\">\n     <style>\n            .control-section\n            {\n                margin-top: 100px;\n            }\n    </style>\n    <div id='sample'>\n</body>\n</html>\n","index.js":"import { createRoot } from 'react-dom/client';\nimport './index.css';\n/**\n * Sample for stripline recurrence\n */\nimport * as React from \"react\";\nimport { ChartComponent, SeriesCollectionDirective, SeriesDirective, Inject, Legend, Category, ColumnSeries, DateTime, Tooltip, StripLine } from '@syncfusion/ej2-react-charts';\nimport { PropertyPane } from './property-pane';\nimport { SampleBase } from './sample-base';\nexport let data1 = [\n    { x: new Date(1970, 1, 1), y: 16500 }, { x: new Date(1975, 1, 1), y: 16000 }, { x: new Date(1980, 1, 1), y: 15400 },\n    { x: new Date(1985, 1, 1), y: 15800 }, { x: new Date(1990, 1, 1), y: 14000 }, { x: new Date(1995, 1, 1), y: 10500 },\n    { x: new Date(2000, 1, 1), y: 13300 }, { x: new Date(2005, 1, 1), y: 12800 }\n];\nexport let data2 = [{ x: new Date(1970, 1, 1), y: 8000 }, { x: new Date(1975, 1, 1), y: 7600 }, { x: new Date(1980, 1, 1), y: 6400 },\n    { x: new Date(1985, 1, 1), y: 3700 }, { x: new Date(1990, 1, 1), y: 7200 }, { x: new Date(1995, 1, 1), y: 2300 },\n    { x: new Date(2000, 1, 1), y: 4000 }, { x: new Date(2005, 1, 1), y: 4800 }];\nconst SAMPLE_CSS = `\n    .control-container {\n\t\tpadding: 0px !important;\n    }`;\nexport class Striplinerecurrence extends SampleBase {\n    chartInstance;\n    xcheckElement;\n    ycheckElement;\n    loaded;\n    xIndex() {\n        this.chartInstance.primaryXAxis.stripLines[0].visible = this.xcheckElement.checked;\n    }\n    ;\n    yIndex() {\n        this.chartInstance.primaryYAxis.stripLines[0].visible = this.ycheckElement.checked;\n    }\n    ;\n    render() {\n        return (<div className='control-pane'>\n                <style>\n                    {SAMPLE_CSS}\n                </style>\n                <div className='control-section row'>\n                    <div className='col-md-8'>\n                        <ChartComponent id='charts' ref={chart => this.chartInstance = chart} primaryXAxis={{\n                valueType: 'DateTime', interval: 5, intervalType: 'Years', majorGridLines: { width: 0 },\n                edgeLabelPlacement: 'Shift',\n                minimum: new Date(1965, 1, 1), maximum: new Date(2010, 1, 1),\n                stripLines: [{\n                        startFromAxis: true, size: 5, sizeType: 'Years', isRepeat: true, repeatEvery: 10, visible: true,\n                        color: 'rgba(167,169,171, 0.1)'\n                    }]\n            }} chartArea={{ border: { width: 0 } }} load={this.load.bind(this)} primaryYAxis={{\n                minimum: 0, maximum: 18000, interval: 2000, majorGridLines: { color: 'rgba(167,169,171, 0.3)' },\n                majorTickLines: { width: 0 }, lineStyle: { width: 0 }, labelStyle: { color: 'transparent' },\n                stripLines: [\n                    {\n                        startFromAxis: true, size: 2000, isRepeat: true, repeatEvery: 4000, visible: true,\n                        color: 'rgba(167,169,171, 0.1)'\n                    }\n                ]\n            }} tooltip={{\n                enable: true,\n                format: ' Year: ${point.x}<br> Tons Per Day: ${point.y}',\n                enableHighlight: true\n            }} loaded={this.onChartLoad.bind(this)} title='World Pollution Report'>\n                            <Inject services={[ColumnSeries, DateTime, Category, Legend, Tooltip, StripLine]}/>\n                            <SeriesCollectionDirective>\n                                <SeriesDirective dataSource={data1} xName='x' yName='y' width={2} type='Column' name='AllSources'>\n                                </SeriesDirective>\n                                <SeriesDirective dataSource={data2} xName='x' yName='y' width={2} type='Column' name='Autos & Light Trucks'>\n                                </SeriesDirective>\n                            </SeriesCollectionDirective>\n                        </ChartComponent>\n                    </div>\n                    <div className='col-md-4 property-section'>\n                        <PropertyPane title='Properties'>\n                            <table id='property' title='Properties' className='property-panel-table' style={{ width: '100%' }}>\n                            <tbody><tr style={{ height: '50px' }}>\n                                    <td style={{ width: '60%' }}>\n                                        <div id=\"xAxis\">X Axis:</div>\n                                    </td>\n                                    <td style={{ width: '40%' }}>\n                                        <div>\n                                            <input type=\"checkbox\" id=\"xIndex\" defaultChecked={true} onChange={this.xIndex.bind(this)} style={{ marginLeft: '-5px' }} ref={d => this.xcheckElement = d} aria-labelledby=\"Checkbox checked\"/>\n                                        </div>\n                                    </td>\n                                </tr>\n                                <tr style={{ height: '50px' }}>\n                                    <td style={{ width: '60%' }}>\n                                        <div id=\"yAxis\">Y Axis:</div>\n                                    </td>\n                                    <td style={{ width: '40%' }}>\n                                        <div>\n                                            <input type=\"checkbox\" id=\"yIndex\" defaultChecked={true} onChange={this.yIndex.bind(this)} style={{ marginLeft: '-5px' }} ref={d => this.ycheckElement = d} aria-labelledby=\"Checkbox checked\"/>\n                                        </div>\n                                    </td>\n                                </tr></tbody>\n                            </table>\n                        </PropertyPane>\n                    </div>\n                </div>\n            </div>);\n    }\n    onChartLoad(args) {\n        document.getElementById('charts').setAttribute('title', '');\n    }\n    ;\n    load(args) {\n        let selectedTheme = location.hash.split('/')[1];\n        selectedTheme = selectedTheme ? selectedTheme : 'Fluent2';\n        args.chart.theme = (selectedTheme.charAt(0).toUpperCase() + selectedTheme.slice(1)).replace(/-dark/i, \"Dark\").replace(/contrast/i, 'Contrast').replace(/-highContrast/i, 'HighContrast');\n    }\n    ;\n}\n\nconst root = createRoot(document.getElementById('sample'));\nroot.render(<Striplinerecurrence />);","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n                this.rendereComplete();\n            });\n        }\n    }\n    export function updateSampleSection(){}\n    ","dependencies":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-react-base\":\"*\",\"@syncfusion/ej2-charts\":\"*\",\"@syncfusion/ej2-react-charts\":\"*\",\"@syncfusion/ej2-dropdowns\":\"*\",\"@syncfusion/ej2-react-dropdowns\":\"*\",\"@syncfusion/ej2-icons\":\"*\",\"markdown-spellcheck\":\"^1.3.1\",\"@syncfusion/ej2/base\":\"*\",\"@syncfusion/ej2-charts'; // Import the necessary types from Syncfusion\":\"*\"}"}