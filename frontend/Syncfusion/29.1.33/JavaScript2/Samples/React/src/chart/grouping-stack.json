{"index.css":"/* css */","property-pane.js":"import * as ReactDOM from 'react-dom';\nimport * as React from 'react';\nimport { select } from '@syncfusion/ej2-base';\nexport class PropertyPane extends React.Component {\n    render() {\n        const mobilePropPane = select('.sb-mobile-prop-pane');\n        const isMobile = window.matchMedia('(max-width:550px)').matches;\n        return isMobile && mobilePropPane ?\n            ReactDOM.createPortal(<div className='property-panel-section'>\n                    <div className=\"property-panel-header\">\n                        {this.props.title}\n                    </div>\n                    <div className=\"property-panel-content\">\n                        {this.props.children}\n                    </div>\n                </div>, mobilePropPane)\n            :\n                (<div className='property-panel-section'>\n                    <div className=\"property-panel-header\">\n                        {this.props.title}\n                    </div>\n                    <div className=\"property-panel-content\">\n                        {this.props.children}\n                    </div>\n                </div>);\n    }\n}\n","index.html":"<!DOCTYPE html>\n<html>\n<head>\n    <title>Syncfusion React Sample</title>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\n    <meta name=\"author\" content=\"Syncfusion\" />\n    <link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\n</head>\n\n<body class=\"{{theme}}\">\n     <style>\n            .control-section\n            {\n                margin-top: 100px;\n            }\n    </style>\n    <div id='sample'>\n</body>\n</html>\n","index.js":"import { createRoot } from 'react-dom/client';\nimport './index.css';\nimport * as React from 'react';\nimport { SampleBase } from './sample-base';\nimport { PropertyPane } from './property-pane';\nimport { AccumulationChartComponent, AccumulationSeriesCollectionDirective, AccumulationSeriesDirective, AccumulationLegend, PieSeries, AccumulationTooltip, Inject, AccumulationDataLabel } from '@syncfusion/ej2-react-charts';\nimport { DropDownListComponent } from '@syncfusion/ej2-react-dropdowns';\nexport let data1 = [\n    { 'x': 'Australia', y: 26, text: 'Australia: 26' },\n    { 'x': 'Russia', y: 19, text: 'Russia: 19' },\n    { 'x': 'Germany', y: 17, text: 'Germany: 17' },\n    { 'x': 'Japan', y: 12, text: 'Japan: 12' },\n    { 'x': 'China', y: 10, text: 'China: 10' },\n    { 'x': 'South Korea', y: 9, text: 'South Korea: 9' },\n    { 'x': 'Great Britain', y: 27, text: 'Great Britain: 27' },\n    { 'x': 'Italy', y: 8, text: 'Italy: 8' },\n    { 'x': 'France', y: 8, text: 'France: 8' },\n    { 'x': 'Spain', y: 7, text: 'Spain: 7' },\n    { 'x': 'Hungary', y: 8, text: 'Hungary: 8' },\n    { 'x': 'Brazil', y: 7, text: 'Brazil: 7' },\n    { 'x': 'Netherlands', y: 8, text: 'Netherlands: 8' },\n    { 'x': 'Kenya', y: 6, text: 'Kenya: 6' },\n];\nexport class Grouping extends SampleBase {\n    pie;\n    slider;\n    dropElement;\n    change() {\n        this.pie.series[0].groupMode = this.dropElement.value;\n        let currentValue = this.dropElement.value === 'Point' ? 9 : 8;\n        this.pie.series[0].groupTo = currentValue.toString();\n        this.pie.series[0].animation.enable = false;\n        document.getElementById('clubtext').innerHTML = currentValue.toString();\n        this.slider.value = currentValue.toString();\n        this.pie.removeSvg();\n        this.pie.refreshSeries();\n        this.pie.refreshChart();\n    }\n    ;\n    droplist = [\n        { value: 'Point' },\n        { value: 'Value' }\n    ];\n    render() {\n        return (<div className='control-pane'>\n        <div className='control-section row'>\n        <div className='col-lg-9'>\n            <AccumulationChartComponent id='pie-chart' ref={pie => this.pie = pie} title='Rio Olympic Gold Medals' load={this.load.bind(this)} tooltip={{ enable: true, format: \"<b>${point.x}</b><br> Gold Medals: <b>${point.y}</b>\", enableHighlight: true }} legendSettings={{ visible: false }} textRender={this.onTextRender.bind(this)} pointRender={this.onPointRender.bind(this)} enableSmartLabels={true} loaded={this.onChartLoad.bind(this)} enableBorderOnMouseMove={false}>\n              <Inject services={[AccumulationLegend, PieSeries, AccumulationTooltip, AccumulationDataLabel]}/>\n              <AccumulationSeriesCollectionDirective>\n                <AccumulationSeriesDirective dataSource={data1} xName='x' yName='y' animation={{ enable: true }} explode={true} radius='70%' groupTo='9' groupMode='Point' startAngle={0} endAngle={360} innerRadius='0%' dataLabel={{ visible: true, position: 'Outside', connectorStyle: { type: 'Curve', length: '20px' }, font: { fontWeight: '600' } }}>\n                </AccumulationSeriesDirective>\n              </AccumulationSeriesCollectionDirective>\n            </AccumulationChartComponent>\n        </div>\n        <div className='col-lg-3 property-section'>\n            <PropertyPane title='Properties'>\n              <table id='property' title='Properties' className='property-panel-table' style={{ width: '100%' }}>\n              <tbody><tr style={{ height: '50px' }}>\n                  <td style={{ width: '50%' }}>\n                    <div>Mode: </div>\n                  </td>\n                  <td style={{ padding: 10, width: '50%' }}>\n                    <DropDownListComponent width={120} id=\"modes\" change={this.change.bind(this)} ref={d => this.dropElement = d} dataSource={this.droplist} fields={{ text: 'value', value: 'value' }} value=\"Point\"/>\n                  </td>\n                </tr>\n                <tr style={{ height: '50px' }}>\n                  <td style={{ width: '60%' }}>\n                    <div id=\"groupValue\">Group To:\n                        <p id=\"clubtext\" style={{ fontWeight: 'normal' }}>9</p>\n                    </div>\n                  </td>\n                  <td style={{ width: '40%' }}>\n                    <div>\n                      <input type=\"range\" name=\"clubvalue\" onChange={this.onClubvalue.bind(this)} ref={slider => this.slider = slider} defaultValue=\"9\" min=\"0\" max=\"27\" id=\"clubvalue\" style={{ marginLeft: '-5px' }} aria-labelledby=\"Slider\"/>\n                    </div>\n                  </td>\n                </tr>\n                </tbody>\n              </table>\n            </PropertyPane>\n      </div>\n      </div>\n      \n      </div>);\n    }\n    onTextRender(args) {\n        args.text = args.point.x + ' ' + args.point.y;\n    }\n    ;\n    onPointRender(args) {\n        if (args.point.isClubbed || args.point.isSliced) {\n            args.fill = '#D3D3D3';\n        }\n    }\n    ;\n    onChartLoad(args) {\n        document.getElementById('pie-chart').setAttribute('title', '');\n    }\n    ;\n    onClubvalue(e) {\n        let clubvalue = document.getElementById('clubvalue').value;\n        this.pie.series[0].groupTo = clubvalue;\n        this.pie.series[0].animation.enable = false;\n        document.getElementById('clubtext').innerHTML = clubvalue;\n        this.pie.removeSvg();\n        this.pie.refreshSeries();\n        this.pie.refreshChart();\n    }\n    ;\n    load(args) {\n        let selectedTheme = location.hash.split('/')[1];\n        selectedTheme = selectedTheme ? selectedTheme : 'Fluent2';\n        args.accumulation.theme = (selectedTheme.charAt(0).toUpperCase() + selectedTheme.slice(1)).replace(/-dark/i, \"Dark\").replace(/contrast/i, 'Contrast');\n    }\n    ;\n}\n\nconst root = createRoot(document.getElementById('sample'));\nroot.render(<Grouping />);","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n                this.rendereComplete();\n            });\n        }\n    }\n    export function updateSampleSection(){}\n    ","dependencies":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-react-base\":\"*\",\"@syncfusion/ej2-charts\":\"*\",\"@syncfusion/ej2-react-charts\":\"*\",\"@syncfusion/ej2-dropdowns\":\"*\",\"@syncfusion/ej2-react-dropdowns\":\"*\",\"@syncfusion/ej2/base\":\"*\",\"@syncfusion/ej2-charts'; // Import the necessary types from Syncfusion\":\"*\"}"}