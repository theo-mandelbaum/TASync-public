{"index.css":"/* css */","property-pane.js":"import * as ReactDOM from 'react-dom';\nimport * as React from 'react';\nimport { select } from '@syncfusion/ej2-base';\nexport class PropertyPane extends React.Component {\n    render() {\n        const mobilePropPane = select('.sb-mobile-prop-pane');\n        const isMobile = window.matchMedia('(max-width:550px)').matches;\n        return isMobile && mobilePropPane ?\n            ReactDOM.createPortal(<div className='property-panel-section'>\n                    <div className=\"property-panel-header\">\n                        {this.props.title}\n                    </div>\n                    <div className=\"property-panel-content\">\n                        {this.props.children}\n                    </div>\n                </div>, mobilePropPane)\n            :\n                (<div className='property-panel-section'>\n                    <div className=\"property-panel-header\">\n                        {this.props.title}\n                    </div>\n                    <div className=\"property-panel-content\">\n                        {this.props.children}\n                    </div>\n                </div>);\n    }\n}\n","index.html":"<!DOCTYPE html>\n<html>\n<head>\n    <title>Syncfusion React Sample</title>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\n    <meta name=\"author\" content=\"Syncfusion\" />\n    <link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\n</head>\n\n<body class=\"{{theme}}\">\n     <style>\n            .control-section\n            {\n                margin-top: 100px;\n            }\n    </style>\n    <div id='sample'>\n</body>\n</html>\n","index.js":"import { createRoot } from 'react-dom/client';\nimport './index.css';\n/**\n * Sample for Update DataSource.\n */\nimport * as React from \"react\";\nimport { ChartComponent, SeriesCollectionDirective, SeriesDirective, Inject, SplineSeries, DateTime, DataLabel } from '@syncfusion/ej2-react-charts';\nimport { Browser } from '@syncfusion/ej2-base';\nimport { SampleBase } from './sample-base';\nlet data = (function () {\n    let data = [];\n    let time = new Date().getTime();\n    for (let i = -10; i <= 0; i += 1) {\n        let cpuValue = Math.max(17, Math.random() * 100);\n        data.push({\n            x: time + i * 1000,\n            y: cpuValue\n        });\n    }\n    return data;\n}());\nconst SAMPLE_CSS = `\n    .control-fluid {\n\t\tpadding: 0px !important;\n    }\n    #container_Series_0_Point_10_Symbol {\n        -webkit-animation: opac 1s ease-out infinite;\n        animation: opac 1s ease-out infinite;\n    }\n    @keyframes opac {\n        0% {\n            stroke-opacity: 1;\n            stroke-width: 10px;\n        }\n        100% {\n            stroke-opacity: 0;\n            stroke-width: 20px;\n        }\n    }`;\nexport class UpdateSpline extends SampleBase {\n    render() {\n        return (<div className='control-pane'>\n                <style>\n                    {SAMPLE_CSS}\n                </style>\n                <div className='control-section'>\n                    <ChartComponent id='spline' style={{ textAlign: \"center\" }} primaryXAxis={{ valueType: 'DateTime', interval: 2, edgeLabelPlacement: Browser.isDevice ? 'None' : 'Shift', labelRotation: Browser.isDevice ? 45 : 0, majorGridLines: { width: 0 } }} primaryYAxis={{\n                title: 'Value', interval: 20, lineStyle: { width: 0 }, majorTickLines: { width: 0 }\n            }} axisRangeCalculated={this.axisRangeCalculated.bind(this)} chartArea={{ border: { width: 0 } }} load={this.load.bind(this)} loaded={this.onChartLoad.bind(this)} width={Browser.isDevice ? '100%' : '75%'} title='Live data'>\n                        <Inject services={[SplineSeries, DateTime, DataLabel]}/>\n                        <SeriesCollectionDirective>\n                            <SeriesDirective dataSource={data} xName='x' yName='y' type='Spline' width={2} marker={{ visible: true, isFilled: true, width: 7, height: 7 }}>\n                            </SeriesDirective>\n                        </SeriesCollectionDirective>\n                    </ChartComponent>\n                </div>\n            </div>);\n    }\n    onChartLoad(args) {\n        let chart = document.getElementById('spline');\n        chart.setAttribute('title', '');\n    }\n    ;\n    axisRangeCalculated(args) {\n        if (args.axis.name === 'primaryXAxis') {\n            let lastPoint = args.axis.series[0].points[args.axis.series[0].points.length - 1].x;\n            args.maximum = new Date(Number(lastPoint)).getTime() + 500;\n        }\n    }\n    ;\n    load(args) {\n        let selectedTheme = location.hash.split('/')[1];\n        selectedTheme = selectedTheme ? selectedTheme : 'Fluent2';\n        args.chart.theme = (selectedTheme.charAt(0).toUpperCase() + selectedTheme.slice(1)).replace(/-dark/i, \"Dark\").replace(/contrast/i, 'Contrast').replace(/-highContrast/i, 'HighContrast');\n        setInterval(function () {\n            let x = (new Date()).getTime();\n            let y = Math.max(17, Math.random() * 100);\n            if (args.chart.series.length > 0) {\n                args.chart.series[0].addPoint({ x: x, y: y });\n                args.chart.series[0].removePoint(0);\n            }\n        }, 1000);\n    }\n    ;\n}\n\nconst root = createRoot(document.getElementById('sample'));\nroot.render(<UpdateSpline />);","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n                this.rendereComplete();\n            });\n        }\n    }\n    export function updateSampleSection(){}\n    ","dependencies":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-react-base\":\"*\",\"@syncfusion/ej2-charts\":\"*\",\"@syncfusion/ej2-react-charts\":\"*\",\"@syncfusion/ej2-icons\":\"*\",\"markdown-spellcheck\":\"^1.3.1\",\"@syncfusion/ej2/base\":\"*\",\"@syncfusion/ej2-charts'; // Import the necessary types from Syncfusion\":\"*\"}"}