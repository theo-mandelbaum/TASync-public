{"index.css":"/* css */","property-pane.js":"import * as ReactDOM from 'react-dom';\nimport * as React from 'react';\nimport { select } from '@syncfusion/ej2-base';\nexport class PropertyPane extends React.Component {\n    render() {\n        const mobilePropPane = select('.sb-mobile-prop-pane');\n        const isMobile = window.matchMedia('(max-width:550px)').matches;\n        return isMobile && mobilePropPane ?\n            ReactDOM.createPortal(<div className='property-panel-section'>\n                    <div className=\"property-panel-header\">\n                        {this.props.title}\n                    </div>\n                    <div className=\"property-panel-content\">\n                        {this.props.children}\n                    </div>\n                </div>, mobilePropPane)\n            :\n                (<div className='property-panel-section'>\n                    <div className=\"property-panel-header\">\n                        {this.props.title}\n                    </div>\n                    <div className=\"property-panel-content\">\n                        {this.props.children}\n                    </div>\n                </div>);\n    }\n}\n","index.html":"<!DOCTYPE html>\n<html>\n<head>\n    <title>Syncfusion React Sample</title>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\n    <meta name=\"author\" content=\"Syncfusion\" />\n    <link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\n</head>\n\n<body class=\"{{theme}}\">\n     <style>\n            .control-section\n            {\n                margin-top: 100px;\n            }\n    </style>\n    <div id='sample'>\n</body>\n</html>\n","index.js":"import { createRoot } from 'react-dom/client';\nimport './index.css';\n/**\n * Sample for stripline\n */\nimport * as React from \"react\";\nimport { ChartComponent, SeriesCollectionDirective, SeriesDirective, Inject, Legend, DateTimeCategory, SplineSeries, Tooltip, StripLine } from '@syncfusion/ej2-react-charts';\nimport { PropertyPane } from './property-pane';\nimport { DropDownListComponent } from '@syncfusion/ej2-react-dropdowns';\nimport { SampleBase } from './sample-base';\nimport { Browser } from '@syncfusion/ej2-base';\nexport let data = [\n    { x: new Date(2023, 4, 1), wind: 19 },\n    { x: new Date(2023, 4, 2), wind: 17 },\n    { x: new Date(2023, 4, 3), wind: 14 },\n    { x: new Date(2023, 4, 4), wind: 9 },\n    { x: new Date(2023, 4, 5), wind: 10 },\n    { x: new Date(2023, 4, 6), wind: 8 },\n    { x: new Date(2023, 4, 7), wind: 8 },\n    { x: new Date(2023, 4, 8), wind: 16 },\n    { x: new Date(2023, 4, 9), wind: 9 },\n    { x: new Date(2023, 4, 10), wind: 13 },\n    { x: new Date(2023, 4, 11), wind: 7 },\n    { x: new Date(2023, 4, 12), wind: 12 },\n    { x: new Date(2023, 4, 13), wind: 10 },\n    { x: new Date(2023, 4, 14), wind: 5 },\n    { x: new Date(2023, 4, 15), wind: 8 }\n];\nexport let data1 = [\n    { x: new Date(2023, 4, 1), gust: 30 },\n    { x: new Date(2023, 4, 2), gust: 28 },\n    { x: new Date(2023, 4, 3), gust: 26 },\n    { x: new Date(2023, 4, 4), gust: 19 },\n    { x: new Date(2023, 4, 5), gust: 21 },\n    { x: new Date(2023, 4, 6), gust: 14 },\n    { x: new Date(2023, 4, 7), gust: 13 },\n    { x: new Date(2023, 4, 8), gust: 29 },\n    { x: new Date(2023, 4, 9), gust: 19 },\n    { x: new Date(2023, 4, 10), gust: 20 },\n    { x: new Date(2023, 4, 11), gust: 15 },\n    { x: new Date(2023, 4, 12), gust: 25 },\n    { x: new Date(2023, 4, 13), gust: 20 },\n    { x: new Date(2023, 4, 14), gust: 10 },\n    { x: new Date(2023, 4, 15), gust: 15 }\n];\nconst SAMPLE_CSS = `\n    .control-fluid {\n\t\tpadding: 0px !important;\n    }\n    #winter stop {\n        stop-color: #4ca1af;\n    }\n\n    #winter stop[offset=\"0\"] {\n        stop-color: #c4e0e5;\n    }\n\n    #winter stop[offset=\"1\"] {\n        stop-color: #4ca1af;\n    }\n\n    #summer stop {\n        stop-color: #ffa751;\n    }\n\n    #summer stop[offset=\"0\"] {\n        stop-color: #ffe259;\n    }\n\n    #summer stop[offset=\"1\"] {\n        stop-color: #ffa751;\n    }\n\n    #spring stop {\n        stop-color: #1d976c;\n    }\n\n    #spring stop[offset=\"0\"] {\n        stop-color: #93f9b9;\n    }\n\n    #spring stop[offset=\"1\"] {\n        stop-color: #1d976c;\n    }\n\n    #autumn stop {\n        stop-color: #603813;\n    }\n\n    #autumn stop[offset=\"0\"] {\n        stop-color: #b29f94;\n    }\n\n    #autumn stop[offset=\"1\"] {\n        stop-color: #603813;\n    }`;\nexport class Stripline extends SampleBase {\n    chartInstance;\n    dropElement;\n    droplist = [\n        { value: 'Vertical' },\n        { value: 'Horizontal' },\n        { value: 'Segment' }\n    ];\n    loaded;\n    change() {\n        this.chartInstance.series[0].fill = 'white';\n        this.chartInstance.series[0].marker.fill = 'black';\n        this.chartInstance.series[0].marker.border.color = 'white';\n        for (let i = 0; i < 3; i++) {\n            this.chartInstance.primaryYAxis.stripLines[i].visible = false;\n        }\n        if (this.dropElement.value === 'Vertical') {\n            for (let i = 0; i <= 7; i++) {\n                this.chartInstance.primaryXAxis.stripLines[i].visible = !this.chartInstance.primaryXAxis.stripLines[i].isSegmented;\n            }\n        }\n        else if (this.dropElement.value === 'Horizontal') {\n            for (let i = 0; i < 3; i++) {\n                this.chartInstance.primaryYAxis.stripLines[i].visible = true;\n            }\n            for (let i = 0; i <= 7; i++) {\n                this.chartInstance.primaryXAxis.stripLines[i].visible = false;\n            }\n        }\n        else {\n            for (let i = 0; i <= 7; i++) {\n                this.chartInstance.primaryXAxis.stripLines[i].visible = this.chartInstance.primaryXAxis.stripLines[i].isSegmented;\n            }\n            this.chartInstance.series[0].fill = 'black';\n            this.chartInstance.series[0].marker.fill = 'white';\n            this.chartInstance.series[0].marker.border.color = 'black';\n        }\n        this.chartInstance.refresh();\n    }\n    ;\n    render() {\n        return (<div className='control-pane'>\n                <style>\n                    {SAMPLE_CSS}\n                </style>\n\n                <svg style={{ height: 0 }}>\n                    <defs>\n                        <linearGradient id=\"winter\" x1=\"0\" x2=\"0\" y1=\"0\" y2=\"1\">\n                            <stop offset=\"0\"/>\n                            <stop offset=\"1\"/>\n                        </linearGradient>\n                        <linearGradient id=\"summer\" x1=\"0\" x2=\"0\" y1=\"0\" y2=\"1\">\n                            <stop offset=\"0\"/>\n                            <stop offset=\"1\"/>\n                        </linearGradient>\n                        <linearGradient id=\"spring\" x1=\"0\" x2=\"0\" y1=\"0\" y2=\"1\">\n                            <stop offset=\"0\"/>\n                            <stop offset=\"1\"/>\n                        </linearGradient>\n                        <linearGradient id=\"autumn\" x1=\"0\" x2=\"0\" y1=\"0\" y2=\"1\">\n                            <stop offset=\"0\"/>\n                            <stop offset=\"1\"/>\n                        </linearGradient>\n                    </defs>\n                </svg>\n                <div className='control-section row'>\n                    <div className='col-md-8'>\n                        <ChartComponent id='charts' ref={chart => this.chartInstance = chart} primaryXAxis={{\n                valueType: 'DateTimeCategory', majorGridLines: { width: 0 }, majorTickLines: { width: 0 }, labelFormat: 'E dd/MM', labelRotation: -90, labelIntersectAction: Browser.isDevice ? 'Rotate90' : 'None',\n            }} load={this.load.bind(this)} primaryYAxis={{\n                minimum: 0, maximum: 30, interval: 10, title: 'Wind Speed and Gust (km/h)',\n                lineStyle: { width: 0 }, rangePadding: 'None', majorGridLines: { width: 0 }, majorTickLines: { width: 0 },\n                stripLines: [\n                    {\n                        start: 0, end: 5, text: 'Calm', color: 'rgba(68, 170, 213, 0.1)', visible: true, horizontalAlignment: 'Start',\n                        textStyle: { size: '13px' }, border: { width: 0 },\n                    },\n                    {\n                        start: 5, end: 8, text: 'Light Air', color: 'rgba(0, 0, 0, 0)', visible: true, horizontalAlignment: 'Start',\n                        textStyle: { size: '13px' }, border: { width: 0 },\n                    },\n                    {\n                        start: 8, end: 11, text: 'Light Breeze', visible: true, horizontalAlignment: 'Start',\n                        textStyle: { size: '13px' }, border: { width: 0 }, color: 'rgba(68, 170, 213, 0.1)'\n                    },\n                    {\n                        start: 11, end: 18, text: 'Gentle Breeze', color: 'rgba(0, 0, 0, 0)', visible: true, horizontalAlignment: 'Start',\n                        textStyle: { size: '13px' }, border: { width: 0 },\n                    },\n                    {\n                        start: 18, end: 28, text: 'Moderate Breeze', visible: true, horizontalAlignment: 'Start',\n                        textStyle: { size: '13px' }, border: { width: 0 }, color: 'rgba(68, 170, 213, 0.1)'\n                    },\n                    {\n                        start: 28, end: 30, text: 'Fresh Breeze', visible: true, horizontalAlignment: 'Start',\n                        textStyle: { size: '13px' }, border: { width: 0 }, color: 'rgba(0, 0, 0, 0)'\n                    }\n                ]\n            }} tooltip={{\n                enable: true,\n                header: '',\n                format: '<b>${point.x}</b> <br> ${series.name} : <b>${point.y}</b',\n                enableMarker: false,\n                enableHighlight: true,\n                showNearestTooltip: true\n            }} chartArea={{\n                border: { width: 0 }\n            }} legendSettings={{ visible: true, enableHighlight: true, shapeHeight: 6, shapeWidth: 15 }} loaded={this.onChartLoad.bind(this)} title='Wind Speed and Gust (km/h)' titleStyle={{ position: 'Bottom', textAlignment: 'Far' }} subTitle='WorldWeatherOnline.com'>\n                            <Inject services={[DateTimeCategory, SplineSeries, Legend, Tooltip, StripLine]}/>\n                            <SeriesCollectionDirective>\n                                <SeriesDirective dataSource={data} xName='x' yName='wind' width={4} legendShape=\"HorizontalLine\" type='Spline' name='Wind Speed (km/h)'>\n                                </SeriesDirective>\n                                <SeriesDirective dataSource={data1} xName='x' yName='gust' width={4} legendShape=\"HorizontalLine\" type='Spline' name='Wind Gust (km/h)'>\n                                </SeriesDirective>\n                            </SeriesCollectionDirective>\n                        </ChartComponent>\n                    </div>\n                    <div className='col-md-4 property-section'>\n                        <PropertyPane title='Properties'>\n                            <table id='property' title='Properties' className='property-panel-table' style={{ width: '100%' }}>\n                            <tbody><tr style={{ height: '50px' }}>\n                                    <td style={{ width: '60%' }}>\n                                        <div>StripLine Types:</div>\n                                    </td>\n                                    <td style={{ width: '40%' }}>\n                                        <div>\n                                            <DropDownListComponent width={120} id=\"selmode\" style={{ \"width\": \"auto\" }} change={this.change.bind(this)} ref={d => this.dropElement = d} dataSource={this.droplist} fields={{ text: 'value', value: 'value' }} value=\"Vertical\"/>\n                                        </div>\n                                    </td>\n                                </tr></tbody>\n                            </table>\n                        </PropertyPane>\n                    </div>\n                </div>\n            </div>);\n    }\n    onChartLoad(args) {\n        document.getElementById('charts').setAttribute('title', '');\n    }\n    ;\n    load(args) {\n        let selectedTheme = location.hash.split('/')[1];\n        selectedTheme = selectedTheme ? selectedTheme : 'Fluent2';\n        args.chart.theme = (selectedTheme.charAt(0).toUpperCase() + selectedTheme.slice(1)).replace(/-dark/i, \"Dark\").replace(/contrast/i, 'Contrast').replace(/-highContrast/i, 'HighContrast');\n    }\n    ;\n}\n\nconst root = createRoot(document.getElementById('sample'));\nroot.render(<Stripline />);","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n                this.rendereComplete();\n            });\n        }\n    }\n    export function updateSampleSection(){}\n    ","dependencies":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-react-base\":\"*\",\"@syncfusion/ej2-charts\":\"*\",\"@syncfusion/ej2-react-charts\":\"*\",\"@syncfusion/ej2-dropdowns\":\"*\",\"@syncfusion/ej2-react-dropdowns\":\"*\",\"@syncfusion/ej2-icons\":\"*\",\"markdown-spellcheck\":\"^1.3.1\",\"@syncfusion/ej2/base\":\"*\",\"@syncfusion/ej2-charts'; // Import the necessary types from Syncfusion\":\"*\"}"}