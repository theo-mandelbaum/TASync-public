{"index.css":"/* css */","index.html":"<!DOCTYPE html>\n<html>\n<head>\n    <title>Syncfusion React Sample</title>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\n    <meta name=\"author\" content=\"Syncfusion\" />\n    <link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\n</head>\n\n<body class=\"{{theme}}\">\n     <style>\n            .control-section\n            {\n                margin-top: 100px;\n            }\n    </style>\n    <div id='sample'>\n</body>\n</html>\n","index.js":"import { createRoot } from 'react-dom/client';\nimport './index.css';\n/**\n * Sample for RangeColumn series\n */\nimport * as React from \"react\";\nimport { ChartComponent, SeriesCollectionDirective, SeriesDirective, Inject, StripLine, ColumnSeries, Category, Zoom, Selection, DataLabel, Tooltip, Legend, } from '@syncfusion/ej2-react-charts';\nimport { SampleBase } from './sample-base';\nimport { Browser } from '@syncfusion/ej2-base';\nexport let data = [\n    { xValue: \"Jan 15\", yValue: 10 },\n    { xValue: \"Jan 31\", yValue: 15 },\n    { xValue: \"Feb 15\", yValue: 15 },\n    { xValue: \"Feb 28\", yValue: 20 },\n    { xValue: \"March 15\", yValue: 20 },\n    { xValue: \"March 31\", yValue: 25 },\n    { xValue: \"March\", yValue: null }\n];\nexport let data1 = [\n    { xValue: \"Apr 15\", yValue: 36 },\n    { xValue: \"Apr 30\", yValue: 48 },\n    { xValue: \"May 15\", yValue: 43 },\n    { xValue: \"May 31\", yValue: 59 },\n    { xValue: \"Jun 15\", yValue: 35 },\n    { xValue: \"Jun 30\", yValue: 50 },\n    { xValue: \"Jun\", yValue: null }\n];\nexport let data2 = [\n    { xValue: \"Jul 15\", yValue: 30 },\n    { xValue: \"Jul 31\", yValue: 45 },\n    { xValue: \"Aug 15\", yValue: 30 },\n    { xValue: \"Aug 31\", yValue: 55 },\n    { xValue: \"Sep 15\", yValue: 57 },\n    { xValue: \"Sep 30\", yValue: 60 },\n    { xValue: \"Sep\", yValue: null }\n];\nexport let data3 = [\n    { xValue: \"Oct 15\", yValue: 60 },\n    { xValue: \"Oct 31\", yValue: 70 },\n    { xValue: \"Nov 15\", yValue: 70 },\n    { xValue: \"Nov 30\", yValue: 70 },\n    { xValue: \"Dec 15\", yValue: 90 },\n    { xValue: \"Dec 31\", yValue: 100 }\n];\nexport let FontColor = \"#353535\";\nexport let seriesIndex = 0;\nexport let Segments = [[0, 5], [7, 12], [14, 19], [21, 26]];\nlet materialColors = [\"#00bdae\", \"#404041\", \"#357cd2\", \"#e56590\", \"#f8b883\", \"#70ad47\", \"#dd8abd\", \"#7f84e8\", \"#7bb4eb\",\n    \"#ea7a57\", \"#404041\", \"#00bdae\"];\nlet materialDarkColors = [\"#9ECB08\", \"#56AEFF\", \"#C57AFF\", \"#61EAA9\", \"#EBBB3E\", \"#F45C5C\", \"#8A77FF\", \"#63C7FF\", \"#FF84B0\",\n    \"#F7C928\"];\nlet fabricColors = [\"#4472c4\", \"#ed7d31\", \"#ffc000\", \"#70ad47\", \"#5b9bd5\", \"#c1c1c1\", \"#6f6fe2\", \"#e269ae\", \"#9e480e\",\n    \"#997300\", \"#4472c4\", \"#70ad47\", \"#ffc000\", \"#ed7d31\"];\nlet bootstrapColors = [\"#a16ee5\", \"#f7ce69\", \"#55a5c2\", \"#7ddf1e\", \"#ff6ea6\", \"#7953ac\", \"#b99b4f\", \"#407c92\", \"#5ea716\",\n    \"#b91c52\"];\nlet highContrastColors = [\"#79ECE4\", \"#E98272\", \"#DFE6B6\", \"#C6E773\", \"#BA98FF\", \"#FA83C3\", \"#00C27A\", \"#43ACEF\", \"#D681EF\",\n    \"#D8BC6E\"];\nlet bootstrap5Colors = ['#FD7E14', '#6610F2', '#6F42C1', '#D63384', '#DC3545', '#FFC107', '#198754', '#0DCAF0'];\nlet bootstrap5DarkColors = ['#FD7E14', '#6610F2', '#6F42C1', '#D63384', '#DC3545', '#FFC107', '#198754', '#0DCAF0'];\nlet fluentColors = [\"#614570\", \"#4C6FB1\", \"#CC6952\", \"#3F579A\", \"#4EA09B\", \"#6E7A89\", \"#D4515C\", \"#E6AF5D\", \"#639751\",\n    \"#9D4D69\"];\nlet fluentDarkColors = [\"#8AB113\", \"#2A72D5\", \"#43B786\", \"#584EC6\", \"#E85F9C\", \"#6E7A89\", \"#EA6266\", \"#EBA844\", \"#26BC7A\",\n    \"#BC4870\"];\nlet tailwindColors = [\"#5A61F6\", \"#65A30D\", \"#334155\", \"#14B8A6\", \"#8B5CF6\", \"#0369A1\", \"#F97316\", \"#9333EA\", \"#F59E0B\", \"#15803D\"];\nlet tailwindDarkColors = [\"#8B5CF6\", \"#22D3EE\", \"#F87171\", \"#4ADE80\", \"#E879F9\", \"#FCD34D\", \"#F97316\", \"#2DD4BF\", \"#F472B6\", \"#10B981\"];\nlet tailwind3Colors = ['#2F4074', '#03B4B4', '#0D72DE', '#FF5733', '#D63384', '#F39C12', '#EF291F', '#91C822', '#2F4074', '#03B4B4'];\nlet tailwind3DarkColors = ['#8029F1', '#1ABC9C', '#0D72DE', '#FF5733', '#D63384', '#F39C12', '#EF291F', '#91C822', '#8029F1', '#1ABC9C'];\nlet material3Colors = [\"#6355C7\", \"#00AEE0\", \"#FFB400\", \"#F7523F\", \"#963C70\", \"#FD7400\", \"#4BE0BC\", \"#2196F5\", \"#DE3D8A\",\n    \"#162F88\"];\nlet material3DarkColors = [\"#4EAAFF\", \"#FA4EAB\", \"#FFF500\", \"#17EA58\", \"#38FFE7\", \"#FF9E45\", \"#B3F32F\", \"#B93CE4\", \"#FC5664\",\n    \"#9B55FF\"];\nlet fluent2Colors = [\"#6200EE\", \"#09AF74\", \"#0076E5\", \"#CB3587\", \"#E7910F\", \"#0364DE\", \"#66CD15\", \"#F3A93C\", \"#107C10\",\n    \"#C19C00\"];\nlet fluent2HighContrastColors = [\"#9BB449\", \"#2A72D5\", \"#43B786\", \"#3F579A\", \"#584EC6\", \"#E85F9C\", \"#6E7A89\", \"#EA6266\",\n    \"#0B6A0B\", \"#C19C00\"];\nconst SAMPLE_CSS = `\n    .control-fluid {\n\t\tpadding: 0px !important;\n\t}`;\nexport class KeyboardNavigation extends SampleBase {\n    chartInstance;\n    render() {\n        return (<div className='control-pane'>\n                <style>\n                    {SAMPLE_CSS}\n                </style>\n                <div className='control-section'>\n                    <ChartComponent id='keyboard_charts' ref={chart => this.chartInstance = chart} style={{ textAlign: \"center\" }} selectionMode='Point' selectionPattern='DiagonalForward' enableSideBySidePlacement={false} enableAnimation={false} legendClick={this.legendClick.bind(this)} load={this.load.bind(this)} loaded={this.loaded.bind(this)} primaryXAxis={{ title: \"Manager\",\n                valueType: 'Category',\n                majorGridLines: { width: 0 },\n                labelStyle: { size: \"0px\" },\n                majorTickLines: { width: 0 }\n            }} primaryYAxis={{ maximum: 120, title: \"Sales in Percentage\",\n                labelFormat: \"{value}%\",\n                lineStyle: { width: 0 },\n                majorTickLines: { width: 0 },\n                stripLines: [\n                    { isSegmented: true, start: 33, end: 35.5, visible: true, segmentStart: 0, segmentEnd: 5 },\n                    { isSegmented: true, start: 39, end: 39.2, visible: true, text: \"Jan - Mar\", color: \"transparent\", segmentStart: 0, segmentEnd: 5 },\n                    { isSegmented: true, start: 65, end: 67.5, visible: true, segmentStart: 7, segmentEnd: 12 },\n                    { isSegmented: true, start: 70, end: 70.2, visible: true, text: \"Apr - Jun\", segmentStart: 7, segmentEnd: 12, color: \"transparent\" },\n                    { isSegmented: true, start: 65, end: 67.5, visible: true, segmentStart: 14, segmentEnd: 19 },\n                    { isSegmented: true, start: 70, end: 70.2, visible: true, text: \"Jul - Sep\", segmentStart: 14, segmentEnd: 19, color: \"transparent\" },\n                    { isSegmented: true, start: 104, end: 106.5, visible: true, segmentStart: 21, segmentEnd: 26 },\n                    { isSegmented: true, start: 109, end: 109.2, visible: true, text: \"Oct - Dec\", segmentStart: 21, segmentEnd: 26, color: \"transparent\" }\n                ]\n            }} zoomSettings={{ enableSelectionZooming: true }} title=\"Quarterly Sales Chart\" chartArea={{ border: { width: 0 } }} width={Browser.isDevice ? '100%' : '75%'} tooltip={{\n                enable: true\n            }}>\n                        <Inject services={[ColumnSeries, Selection, StripLine, DataLabel, Tooltip, Zoom, Category, Legend]}/>\n                        <SeriesCollectionDirective>\n                            <SeriesDirective dataSource={data} name='Quarter 1' xName='xValue' yName='yValue' type='Column'>\n                            </SeriesDirective>\n                            <SeriesDirective dataSource={data1} name='Quarter 2' xName='xValue' yName='yValue' type='Column'>\n                            </SeriesDirective>\n                            <SeriesDirective dataSource={data2} name='Quarter 3' xName='xValue' yName='yValue' type='Column'>\n                            </SeriesDirective>\n                            <SeriesDirective dataSource={data3} name='Quarter 4' xName='xValue' yName='yValue' type='Column'>\n                            </SeriesDirective>\n                        </SeriesCollectionDirective>\n                    </ChartComponent>\n                </div>\n            </div>);\n    }\n    legendClick(args) {\n        seriesIndex = 0;\n        this.getStriplineValues(args.series.name);\n    }\n    getStriplineValues(legendClickedName) {\n        let chart = this.chartInstance;\n        for (var i = 0; i < chart.series.length; i++) {\n            var name = chart.series[i].name;\n            var visible = name === legendClickedName ? !chart.series[i].visible : chart.series[i].visible;\n            if (seriesIndex > 3) {\n                seriesIndex = 0;\n            }\n            if (name == \"Quarter 1\") {\n                chart.primaryYAxis.stripLines[0].visible = chart.primaryYAxis.stripLines[1].visible = visible;\n                if (chart.primaryYAxis.stripLines[0].visible) {\n                    chart.primaryYAxis.stripLines[0].segmentStart = chart.primaryYAxis.stripLines[1].segmentStart = Segments[seriesIndex][0];\n                    chart.primaryYAxis.stripLines[0].segmentEnd = chart.primaryYAxis.stripLines[1].segmentEnd = Segments[seriesIndex][1];\n                    seriesIndex++;\n                }\n            }\n            else if (name == \"Quarter 2\") {\n                chart.primaryYAxis.stripLines[2].visible = chart.primaryYAxis.stripLines[3].visible = visible;\n                if (chart.primaryYAxis.stripLines[2].visible) {\n                    chart.primaryYAxis.stripLines[2].segmentStart = chart.primaryYAxis.stripLines[3].segmentStart = Segments[seriesIndex][0];\n                    chart.primaryYAxis.stripLines[2].segmentEnd = chart.primaryYAxis.stripLines[3].segmentEnd = Segments[seriesIndex][1];\n                    seriesIndex++;\n                }\n            }\n            else if (name == \"Quarter 3\") {\n                chart.primaryYAxis.stripLines[4].visible = chart.primaryYAxis.stripLines[5].visible = visible;\n                if (chart.primaryYAxis.stripLines[4].visible) {\n                    chart.primaryYAxis.stripLines[4].segmentStart = chart.primaryYAxis.stripLines[5].segmentStart = Segments[seriesIndex][0];\n                    chart.primaryYAxis.stripLines[4].segmentEnd = chart.primaryYAxis.stripLines[5].segmentEnd = Segments[seriesIndex][1];\n                    seriesIndex++;\n                }\n            }\n            else {\n                chart.primaryYAxis.stripLines[6].visible = chart.primaryYAxis.stripLines[7].visible = visible;\n                if (chart.primaryYAxis.stripLines[6].visible) {\n                    chart.primaryYAxis.stripLines[6].segmentStart = chart.primaryYAxis.stripLines[7].segmentStart = Segments[seriesIndex][0];\n                    chart.primaryYAxis.stripLines[6].segmentEnd = chart.primaryYAxis.stripLines[7].segmentEnd = Segments[seriesIndex][1];\n                    seriesIndex++;\n                }\n            }\n        }\n        chart.refresh();\n    }\n    ;\n    load(args) {\n        let selectedTheme = location.hash.split('/')[1];\n        selectedTheme = selectedTheme ? selectedTheme : 'Fluent2';\n        args.chart.theme = (selectedTheme.charAt(0).toUpperCase() + selectedTheme.slice(1)).replace(/-dark/i, \"Dark\").replace(/contrast/i, 'Contrast').replace(/-highContrast/i, 'HighContrast');\n        FontColor = args.chart.theme.indexOf(\"Dark\") > -1 || args.chart.theme.indexOf(\"HighContrast\") > -1 ? \"#F3F2F1\" : \"#353535\";\n        let FillColors;\n        if (args.chart.theme === 'MaterialDark') {\n            FillColors = materialDarkColors;\n        }\n        else if (args.chart.theme === 'Material') {\n            FillColors = materialColors;\n        }\n        else if (args.chart.theme.indexOf(\"fabric\") > -1) {\n            FillColors = fabricColors;\n        }\n        else if (args.chart.theme === 'Bootstrap5Dark') {\n            FillColors = bootstrap5DarkColors;\n        }\n        else if (args.chart.theme === 'Bootstrap5') {\n            FillColors = bootstrap5Colors;\n        }\n        else if (args.chart.theme.indexOf(\"bootstrap\") > -1) {\n            FillColors = bootstrapColors;\n        }\n        else if (args.chart.theme === 'TailwindDark') {\n            FillColors = tailwindDarkColors;\n        }\n        else if (args.chart.theme === 'Tailwind') {\n            FillColors = tailwindColors;\n        }\n        else if (args.chart.theme === \"HighContrast\") {\n            FillColors = highContrastColors;\n        }\n        else if (args.chart.theme === 'FluentDark') {\n            FillColors = fluentDarkColors;\n        }\n        else if (args.chart.theme === 'Material3') {\n            FillColors = material3Colors;\n            FontColor = \"#000000\";\n        }\n        else if (args.chart.theme === 'Material3Dark') {\n            FillColors = material3DarkColors;\n        }\n        else if (args.chart.theme === 'Fluent2') {\n            FillColors = fluent2Colors;\n        }\n        else if (args.chart.theme === 'Fluent2HighContrast' || args.chart.theme === 'Fluent2Dark') {\n            FillColors = fluent2HighContrastColors;\n            FontColor = \"#FFFFFF\";\n        }\n        else if (args.chart.theme === 'Tailwind3Dark') {\n            FillColors = tailwind3DarkColors;\n            FontColor = \"#FFFFFF\";\n        }\n        else if (args.chart.theme === 'Tailwind3') {\n            FillColors = tailwind3Colors;\n            FontColor = \"#000000\";\n        }\n        else {\n            FillColors = fluentColors;\n        }\n        args.chart.primaryYAxis.stripLines[0].color = FillColors[0 % 10];\n        args.chart.primaryYAxis.stripLines[2].color = FillColors[1 % 10];\n        args.chart.primaryYAxis.stripLines[4].color = FillColors[2 % 10];\n        args.chart.primaryYAxis.stripLines[6].color = FillColors[3 % 10];\n        args.chart.primaryYAxis.stripLines[1].textStyle.color = FontColor;\n        args.chart.primaryYAxis.stripLines[3].textStyle.color = FontColor;\n        args.chart.primaryYAxis.stripLines[5].textStyle.color = FontColor;\n        args.chart.primaryYAxis.stripLines[7].textStyle.color = FontColor;\n    }\n    ;\n    loaded(args) {\n        let chart = document.getElementById('keyboard_charts');\n        chart.setAttribute('title', '');\n    }\n    ;\n}\n\nconst root = createRoot(document.getElementById('sample'));\nroot.render(<KeyboardNavigation />);","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n                this.rendereComplete();\n            });\n        }\n    }\n    export function updateSampleSection(){}\n    ","dependencies":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-react-base\":\"*\",\"@syncfusion/ej2-charts\":\"*\",\"@syncfusion/ej2-react-charts\":\"*\",\"@syncfusion/ej2-icons\":\"*\",\"markdown-spellcheck\":\"^1.3.1\",\"@syncfusion/ej2/base\":\"*\",\"@syncfusion/ej2-charts'; // Import the necessary types from Syncfusion\":\"*\"}"}