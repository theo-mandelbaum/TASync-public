{"index.css":"/* css */","property-pane.js":"import * as ReactDOM from 'react-dom';\nimport * as React from 'react';\nimport { select } from '@syncfusion/ej2-base';\nexport class PropertyPane extends React.Component {\n    render() {\n        const mobilePropPane = select('.sb-mobile-prop-pane');\n        const isMobile = window.matchMedia('(max-width:550px)').matches;\n        return isMobile && mobilePropPane ?\n            ReactDOM.createPortal(<div className='property-panel-section'>\n                    <div className=\"property-panel-header\">\n                        {this.props.title}\n                    </div>\n                    <div className=\"property-panel-content\">\n                        {this.props.children}\n                    </div>\n                </div>, mobilePropPane)\n            :\n                (<div className='property-panel-section'>\n                    <div className=\"property-panel-header\">\n                        {this.props.title}\n                    </div>\n                    <div className=\"property-panel-content\">\n                        {this.props.children}\n                    </div>\n                </div>);\n    }\n}\n","index.html":"<!DOCTYPE html>\n<html>\n<head>\n    <title>Syncfusion React Sample</title>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\n    <meta name=\"author\" content=\"Syncfusion\" />\n    <link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\n</head>\n\n<body class=\"{{theme}}\">\n     <style>\n            .control-section\n            {\n                margin-top: 100px;\n            }\n    </style>\n    <div id='sample'>\n</body>\n</html>\n","index.js":"import { createRoot } from 'react-dom/client';\nimport './index.css';\n/**\n * Sample for Selection in chart\n */\nimport * as React from \"react\";\nimport { ChartComponent, SeriesCollectionDirective, SeriesDirective, Inject, Selection, ColumnSeries, Legend, Category, ScatterSeries, Highlight } from '@syncfusion/ej2-react-charts';\nimport { PropertyPane } from './property-pane';\nimport { DropDownListComponent } from '@syncfusion/ej2-react-dropdowns';\nimport { ColorPickerComponent, } from '@syncfusion/ej2-react-inputs';\nimport { SampleBase } from './sample-base';\nexport let data1 = [\n    { x: 'CHN', y: 17 }, { x: 'USA', y: 19 },\n    { x: 'IDN', y: 29 }, { x: 'JAP', y: 13 },\n    { x: 'BRZ', y: 24 }\n];\nexport let data2 = [\n    { x: 'CHN', y: 54 }, { x: 'USA', y: 67 },\n    { x: 'IDN', y: 65 }, { x: 'JAP', y: 61 },\n    { x: 'BRZ', y: 68 }\n];\nexport let data3 = [\n    { x: 'CHN', y: 9 }, { x: 'USA', y: 14 },\n    { x: 'IDN', y: 6 }, { x: 'JAP', y: 26 },\n    { x: 'BRZ', y: 8 }\n];\nexport class SelectionChart extends SampleBase {\n    chartInstance;\n    dropElement;\n    patternDropDownList;\n    highlightDropDownList;\n    droplist = [\n        { value: 'Point' },\n        { value: 'Series' },\n        { value: 'Cluster' }\n    ];\n    patternTypes = [\n        { value: 'None' },\n        { value: 'DiagonalForward' },\n        { value: 'Chessboard' },\n        { value: 'Triangle' },\n        { value: 'Box' },\n        { value: 'HorizontalDash' }\n    ];\n    patternTypes2 = [\n        { value: 'None' },\n        { value: 'Dots' },\n        { value: 'Chessboard' },\n        { value: 'Triangle' },\n        { value: 'Tile' },\n        { value: 'Grid' }\n    ];\n    checkElement;\n    change() {\n        let checkBox = document.getElementById('highlightCheckbox');\n        this.chartInstance.selectionMode = this.dropElement.value;\n        if (checkBox.checked) {\n            this.chartInstance.highlightMode = this.dropElement.value;\n        }\n        else {\n            this.chartInstance.highlightMode = 'None';\n        }\n        this.chartInstance.dataBind();\n    }\n    check() {\n        this.chartInstance.isMultiSelect = this.checkElement.checked;\n    }\n    selectionChange() {\n        this.chartInstance.selectionPattern = this.patternDropDownList.value;\n    }\n    hightlightPatternChange() {\n        let checkBox = document.getElementById('highlightCheckbox');\n        if (checkBox.checked) {\n            this.chartInstance.highlightPattern = this.highlightDropDownList.value;\n        }\n        else {\n            this.chartInstance.highlightPattern = 'None';\n        }\n    }\n    highlightChange(e) {\n        if (e.target.checked) {\n            this.chartInstance.highlightMode = this.chartInstance.selectionMode;\n            this.chartInstance.highlightPattern = this.highlightDropDownList.value;\n        }\n        else {\n            this.chartInstance.highlightMode = this.chartInstance.highlightPattern = 'None';\n        }\n    }\n    // function to handle the ColorPicker change event\n    onChange(args) {\n        this.chartInstance.highlightColor = args.currentValue.hex;\n        this.chartInstance.dataBind();\n    }\n    render() {\n        return (<div className='control-pane'>\n                <div className='control-section row'>\n                    <div className='col-md-8'>\n                        <ChartComponent id='charts' ref={chart => this.chartInstance = chart} style={{ textAlign: \"center\" }} primaryXAxis={{\n                title: 'Countries',\n                valueType: 'Category',\n                interval: 1,\n                labelIntersectAction: 'Rotate90',\n                majorGridLines: { width: 0 }\n            }} primaryYAxis={{\n                title: 'Distribution',\n                labelFormat: '{value}%',\n                interval: 20,\n                lineStyle: { width: 0 },\n                majorTickLines: { width: 0 }\n            }} load={this.load.bind(this)} title='Age Distribution by Country' loaded={this.onChartLoad.bind(this)} legendSettings={{ visible: true, toggleVisibility: false }} selectionMode='Point' highlightMode='None' selectionPattern='None' highlightPattern='None'>\n                            <Inject services={[Selection, ColumnSeries, Legend, Category, ScatterSeries, Highlight]}/>\n                            <SeriesCollectionDirective>\n                                <SeriesDirective dataSource={data1} xName='x' width={2} yName='y' name='Age 0-14' type='Column'>\n                                </SeriesDirective>\n                                <SeriesDirective dataSource={data2} xName='x' width={2} yName='y' name='Age 15-64' type='Column'>\n                                </SeriesDirective>\n                                <SeriesDirective dataSource={data3} xName='x' width={2} yName='y' name='Age 65 & Above' type='Column'>\n                                </SeriesDirective>\n                            </SeriesCollectionDirective>\n                        </ChartComponent>\n                    </div>\n                    <div className='col-md-4 property-section'>\n                        <PropertyPane title='Properties'>\n                            <table id='property' title='Properties' className='property-panel-table' style={{ width: '100%' }}>\n                            <tbody> <tr style={{ height: '50px' }}>\n                                    <td style={{ width: '60%' }}>\n                                        <div>Selection Mode:</div>\n                                    </td>\n                                    <td style={{ width: '40%' }}>\n                                        <div>\n                                            <DropDownListComponent width=\"120px\" id=\"selmode\" change={this.change.bind(this)} ref={d => this.dropElement = d} dataSource={this.droplist} fields={{ text: 'value', value: 'value' }} value=\"Point\"/>\n                                        </div>\n                                    </td>\n                                </tr>\n                                <tr style={{ height: '50px' }}>\n                                    <td style={{ width: '80%' }}>\n                                        <div id=\"multiSelection\">Enable Multi-selection:</div>\n                                    </td>\n                                    <td style={{ width: '20%' }}>\n                                        <div><input type=\"checkbox\" id=\"select\" onChange={this.check.bind(this)} ref={d => this.checkElement = d} aria-labelledby=\"Checkbox unchecked\"/></div>\n                                    </td>\n                                </tr>\n                                <tr style={{ height: '50px' }}>\n                                    <td style={{ width: '60%' }}>\n                                        <div>Selection Patterns:</div>\n                                    </td>\n                                    <td style={{ width: '40%' }}>\n                                        <div>\n                                            <DropDownListComponent width=\"120px\" id=\"patternMode\" change={this.selectionChange.bind(this)} ref={d => this.patternDropDownList = d} dataSource={this.patternTypes} fields={{ text: 'value', value: 'value' }} value=\"None\"/>\n                                        </div>\n                                    </td>\n                                </tr>\n                                <tr style={{ height: '50px' }}>\n                                    <td style={{ width: '60%' }}>\n                                        <div>Highlight Color:</div>\n                                    </td>\n                                    <td style={{ width: '40%' }}>\n                                        <ColorPickerComponent id=\"inline-palette\" mode=\"Palette\" value=\"null\" change={this.onChange.bind(this)}></ColorPickerComponent>\n                                    </td>\n                                </tr>\n                                <tr style={{ height: '50px' }}>\n                                    <td style={{ width: '80%' }}>\n                                        <div id=\"highLight\">Enable Hightlight Pattern:</div>\n                                    </td>\n                                    <td style={{ width: '20%' }}>\n                                        <div><input type=\"checkbox\" id=\"highlightCheckbox\" onChange={this.highlightChange.bind(this)} aria-labelledby=\"Checkbox unchecked\"/></div>\n                                    </td>\n                                </tr>\n                                <tr style={{ height: '50px' }}>\n                                    <td style={{ width: '60%' }}>\n                                        <div>Highlight Patterns:</div>\n                                    </td>\n                                    <td style={{ width: '40%' }}>\n                                        <div>\n                                            <DropDownListComponent width=\"120px\" id=\"highpattern\" change={this.hightlightPatternChange.bind(this)} ref={d => this.highlightDropDownList = d} dataSource={this.patternTypes2} fields={{ text: 'value', value: 'value' }} value=\"None\"/>\n                                        </div>\n                                    </td>\n                                </tr></tbody>\n                            </table>\n                        </PropertyPane>\n                    </div>\n                </div>\n            </div>);\n    }\n    onChartLoad(args) {\n        let chart = document.getElementById('charts');\n        chart.setAttribute('title', '');\n        chart.setAttribute('align', 'center');\n    }\n    ;\n    load(args) {\n        let selectedTheme = location.hash.split('/')[1];\n        selectedTheme = selectedTheme ? selectedTheme : 'Fluent2';\n        args.chart.theme = (selectedTheme.charAt(0).toUpperCase() + selectedTheme.slice(1)).replace(/-dark/i, \"Dark\").replace(/contrast/i, 'Contrast').replace(/-highContrast/i, 'HighContrast');\n    }\n    ;\n}\n\nconst root = createRoot(document.getElementById('sample'));\nroot.render(<SelectionChart />);","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n                this.rendereComplete();\n            });\n        }\n    }\n    export function updateSampleSection(){}\n    ","dependencies":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-react-base\":\"*\",\"@syncfusion/ej2-charts\":\"*\",\"@syncfusion/ej2-react-charts\":\"*\",\"@syncfusion/ej2-dropdowns\":\"*\",\"@syncfusion/ej2-react-dropdowns\":\"*\",\"@syncfusion/ej2-inputs\":\"*\",\"@syncfusion/ej2-react-inputs\":\"*\",\"@syncfusion/ej2/base\":\"*\",\"@syncfusion/ej2-charts'; // Import the necessary types from Syncfusion\":\"*\"}"}