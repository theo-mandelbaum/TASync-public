{"index.css":"/* css */","index.html":"<!DOCTYPE html>\n<html>\n<head>\n    <title>Syncfusion React Sample</title>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\n    <meta name=\"author\" content=\"Syncfusion\" />\n    <link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\n</head>\n\n<body class=\"{{theme}}\">\n     <style>\n            .control-section\n            {\n                margin-top: 100px;\n            }\n    </style>\n    <div id='sample'>\n</body>\n</html>\n","index.js":"import { createRoot } from 'react-dom/client';\nimport './index.css';\n/**\n * Sample for Column series\n */\nimport * as React from \"react\";\nimport { ChartComponent, SeriesCollectionDirective, SeriesDirective, Inject, LineSeries, DataLabel, Tooltip } from '@syncfusion/ej2-react-charts';\nimport { Browser } from '@syncfusion/ej2-base';\nimport { SampleBase } from './sample-base';\nlet chartData = [\n    { x: 20, y: 20 }, { x: 80, y: 80 }\n];\nconst SAMPLE_CSS = `\n    .control-fluid {\n\t\tpadding: 0px !important;\n    }`;\nexport class ClickAddPoint extends SampleBase {\n    chartInstance;\n    render() {\n        return (<div className='control-pane'>\n                <style>\n                    {SAMPLE_CSS}\n                </style>\n                <div className='control-section'>\n                    <ChartComponent id='AddPoint' ref={chart => this.chartInstance = chart} style={{ textAlign: \"center\" }} primaryXAxis={{\n                edgeLabelPlacement: 'Shift',\n                rangePadding: 'Additional',\n                majorGridLines: { width: 0 }\n            }} primaryYAxis={{\n                title: 'Value', interval: 20, lineStyle: { width: 0 }, majorTickLines: { width: 0 }\n            }} chartMouseClick={this.chartMouseClick.bind(this)} axisRangeCalculated={this.axisRangeCalculated.bind(this)} tooltip={{ enable: true, enableHighlight: true }} chartArea={{ border: { width: 0 } }} load={this.load.bind(this)} loaded={this.loaded.bind(this)} width={Browser.isDevice ? '100%' : '70%'} title='User supplied data'>\n                        <Inject services={[LineSeries, DataLabel, Tooltip]}/>\n                        <SeriesCollectionDirective>\n                            <SeriesDirective dataSource={chartData} xName='x' yName='y' type='Line' width={3} marker={{ visible: true, isFilled: true, border: { width: 2, color: 'White' }, width: 13, height: 13 }}>\n                            </SeriesDirective>\n                        </SeriesCollectionDirective>\n                    </ChartComponent>\n                </div>\n            </div>);\n    }\n    chartMouseClick(args) {\n        let isRemoved = false;\n        if (args.axisData) {\n            for (let i = 0; i < this.chartInstance.series[0].points.length; i++) {\n                const markerWidth = this.chartInstance.series[0].marker.width / 2;\n                if (Math.round(args.axisData['primaryXAxis']) + markerWidth === Math.round(this.chartInstance.series[0].points[i].x) + markerWidth &&\n                    Math.round(args.axisData['primaryYAxis']) + markerWidth === Math.round(this.chartInstance.series[0].points[i].y) + markerWidth) {\n                    if (this.chartInstance.series[0].points.length > 1) {\n                        this.chartInstance.series[0].removePoint(i);\n                    }\n                    isRemoved = true;\n                }\n            }\n            if (!isRemoved) {\n                this.chartInstance.series[0].addPoint({ x: Math.round(args.axisData['primaryXAxis']), y: Math.round(args.axisData['primaryYAxis']) });\n            }\n        }\n    }\n    ;\n    axisRangeCalculated(args) {\n        if (args.axis.name === 'primaryXAxis') {\n            if (args.interval < 10) {\n                args.maximum = args.maximum + 10;\n                args.minimum = args.minimum - 10;\n                args.interval = 10;\n            }\n        }\n    }\n    ;\n    load(args) {\n        let selectedTheme = location.hash.split('/')[1];\n        selectedTheme = selectedTheme ? selectedTheme : 'Fluent2';\n        args.chart.theme = (selectedTheme.charAt(0).toUpperCase() + selectedTheme.slice(1)).replace(/-dark/i, \"Dark\").replace(/contrast/i, 'Contrast').replace(/-highContrast/i, 'HighContrast');\n    }\n    ;\n    loaded(args) {\n        let chart = document.getElementById('AddPoint');\n        chart.setAttribute('title', '');\n    }\n    ;\n}\n\nconst root = createRoot(document.getElementById('sample'));\nroot.render(<ClickAddPoint />);","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n                this.rendereComplete();\n            });\n        }\n    }\n    export function updateSampleSection(){}\n    ","dependencies":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-react-base\":\"*\",\"@syncfusion/ej2-charts\":\"*\",\"@syncfusion/ej2-react-charts\":\"*\",\"@syncfusion/ej2-icons\":\"*\",\"markdown-spellcheck\":\"^1.3.1\",\"@syncfusion/ej2/base\":\"*\",\"@syncfusion/ej2-charts'; // Import the necessary types from Syncfusion\":\"*\"}"}