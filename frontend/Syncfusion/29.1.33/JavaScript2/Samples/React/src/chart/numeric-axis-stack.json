{"index.css":"/* css */","index.html":"<!DOCTYPE html>\n<html>\n<head>\n    <title>Syncfusion React Sample</title>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\n    <meta name=\"author\" content=\"Syncfusion\" />\n    <link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\n</head>\n\n<body class=\"{{theme}}\">\n     <style>\n            .control-section\n            {\n                margin-top: 100px;\n            }\n    </style>\n    <div id='sample'>\n</body>\n</html>\n","index.js":"import { createRoot } from 'react-dom/client';\nimport './index.css';\n/**\n * Sample for numeric axis\n */\nimport * as React from \"react\";\nimport { ChartComponent, SeriesCollectionDirective, SeriesDirective, Inject, ColumnSeries, DataLabel, Tooltip, Legend } from '@syncfusion/ej2-react-charts';\nimport { Browser } from '@syncfusion/ej2-base';\nimport { SampleBase } from './sample-base';\nexport let data1 = [\n    { x: 16, y: 2 }, { x: 17, y: 14 },\n    { x: 18, y: 7 }, { x: 19, y: 7 },\n    { x: 20, y: 10 }\n];\nexport let data2 = [\n    { x: 16, y: 7 }, { x: 17, y: 7 },\n    { x: 18, y: 11 }, { x: 19, y: 8 },\n    { x: 20, y: 24 }\n];\nexport let labelRender = (args) => {\n    if (args.axis.orientation === 'Horizontal') {\n        args.cancel = args.value === 15 || args.value === 21;\n    }\n};\nconst SAMPLE_CSS = `\n    .control-fluid {\n\t\tpadding: 0px !important;\n\t}`;\nexport class Numeric extends SampleBase {\n    render() {\n        return (<div className='control-pane'>\n                <style>\n                    {SAMPLE_CSS}\n                </style>\n                <div className='control-section'>\n                    <ChartComponent id='charts' style={{ textAlign: \"center\" }} primaryXAxis={{\n                title: 'Death Overs',\n                minimum: 15,\n                maximum: 21,\n                interval: 1,\n                majorGridLines: { width: 0 }\n            }} load={this.load.bind(this)} primaryYAxis={{\n                majorGridLines: { width: 0 },\n                majorTickLines: { width: 0 },\n                lineStyle: { width: 0 },\n                labelStyle: {\n                    color: 'transparent'\n                }\n            }} axisLabelRender={labelRender} width={Browser.isDevice ? '100%' : '75%'} chartArea={{ border: { width: 0 } }} title='England vs West Indies' loaded={this.onChartLoad.bind(this)} tooltip={{ enable: true, format: '${point.x}th Over : <b>${point.y} Runs</b>', enableHighlight: true }}>\n                        <Inject services={[ColumnSeries, Legend, Tooltip, DataLabel]}/>\n                        <SeriesCollectionDirective>\n                            <SeriesDirective dataSource={data1} xName='x' yName='y' fill='#1e90ff' marker={{\n                dataLabel: {\n                    visible: true,\n                    position: 'Top',\n                    font: {\n                        fontWeight: '600'\n                    }\n                }\n            }} name='England' type='Column' width={2}>\n                            </SeriesDirective>\n                            <SeriesDirective dataSource={data2} xName='x' yName='y' fill='#b22222' marker={{\n                dataLabel: {\n                    visible: true,\n                    position: 'Top',\n                    font: {\n                        fontWeight: '600'\n                    }\n                }\n            }} name='West Indies' type='Column' width={2}>\n                            </SeriesDirective>\n                        </SeriesCollectionDirective>\n                    </ChartComponent>\n                    <div style={{ float: 'right', marginRight: '10px' }}>Source: &nbsp;\n                         <a href=\"http://www.espncricinfo.com/icc-world-twenty20-2016/engine/current/match/951373.html\" target=\"_blank\" aria-label=\"Navigate to the documentation for espncricinfo\">www.espncricinfo.com</a>\n                    </div>\n                </div>\n            </div>);\n    }\n    onChartLoad(args) {\n        let chart = document.getElementById('charts');\n        chart.setAttribute('title', '');\n    }\n    ;\n    load(args) {\n        let selectedTheme = location.hash.split('/')[1];\n        selectedTheme = selectedTheme ? selectedTheme : 'Fluent2';\n        args.chart.theme = (selectedTheme.charAt(0).toUpperCase() + selectedTheme.slice(1)).replace(/-dark/i, \"Dark\").replace(/contrast/i, 'Contrast').replace(/-highContrast/i, 'HighContrast');\n        if (selectedTheme === 'highcontrast') {\n            args.chart.series[0].fill = '#57BCFF';\n            args.chart.series[1].fill = '#E58184';\n        }\n    }\n    ;\n}\n\nconst root = createRoot(document.getElementById('sample'));\nroot.render(<Numeric />);","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n                this.rendereComplete();\n            });\n        }\n    }\n    export function updateSampleSection(){}\n    ","dependencies":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-react-base\":\"*\",\"@syncfusion/ej2-charts\":\"*\",\"@syncfusion/ej2-react-charts\":\"*\",\"@syncfusion/ej2-icons\":\"*\",\"markdown-spellcheck\":\"^1.3.1\",\"@syncfusion/ej2/base\":\"*\",\"@syncfusion/ej2-charts'; // Import the necessary types from Syncfusion\":\"*\"}"}