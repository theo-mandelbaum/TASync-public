{"index.css":"/* css */","property-pane.js":"import * as ReactDOM from 'react-dom';\nimport * as React from 'react';\nimport { select } from '@syncfusion/ej2-base';\nexport class PropertyPane extends React.Component {\n    render() {\n        const mobilePropPane = select('.sb-mobile-prop-pane');\n        const isMobile = window.matchMedia('(max-width:550px)').matches;\n        return isMobile && mobilePropPane ?\n            ReactDOM.createPortal(<div className='property-panel-section'>\n                    <div className=\"property-panel-header\">\n                        {this.props.title}\n                    </div>\n                    <div className=\"property-panel-content\">\n                        {this.props.children}\n                    </div>\n                </div>, mobilePropPane)\n            :\n                (<div className='property-panel-section'>\n                    <div className=\"property-panel-header\">\n                        {this.props.title}\n                    </div>\n                    <div className=\"property-panel-content\">\n                        {this.props.children}\n                    </div>\n                </div>);\n    }\n}\n","index.html":"<!DOCTYPE html>\n<html>\n<head>\n    <title>Syncfusion React Sample</title>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\n    <meta name=\"author\" content=\"Syncfusion\" />\n    <link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\n</head>\n\n<body class=\"{{theme}}\">\n     <style>\n            .control-section\n            {\n                margin-top: 100px;\n            }\n    </style>\n    <div id='sample'>\n</body>\n</html>\n","index.js":"import { createRoot } from 'react-dom/client';\nimport './index.css';\n/**\n * Sample for smart axis labels\n */\nimport * as React from \"react\";\nimport { ChartComponent, SeriesCollectionDirective, SeriesDirective, LineSeries, ScatterSeries, SplineSeries, Tooltip, Legend, Inject } from '@syncfusion/ej2-react-charts';\nimport { PropertyPane } from './property-pane';\nimport { SampleBase } from './sample-base';\nimport { DropDownListComponent } from '@syncfusion/ej2-react-dropdowns';\nimport { NumericTextBoxComponent } from '@syncfusion/ej2-react-inputs';\nexport let data1 = [{ x: -6, y: 2 }, { x: -3, y: -4 }, { x: 1.5, y: 3.5 }, { x: 6, y: 4.5 }];\nexport let data2 = [{ x: -6, y: 2 }, { x: -5, y: 0 }, { x: -4.511, y: -0.977 }, { x: -3, y: -4 }, { x: -1.348, y: -1.247 },\n    { x: -0.6, y: 0 }, { x: 0, y: 1 }, { x: 1.5, y: 3.5 }, { x: 6, y: 4.5 }];\nexport let data3 = [{ x: -6, y: 2 }, { x: -5.291, y: 0 }, { x: -5, y: -0.774 }, { x: -3, y: -4 }, { x: -0.6, y: -0.965 },\n    { x: -0.175, y: 0 }, { x: 0, y: 0.404 }, { x: 1.5, y: 3.5 }, { x: 3.863, y: 5.163 }, { x: 6, y: 4.5 }];\nconst SAMPLE_CSS = `\n    .control-fluid {\n\t\tpadding: 0px !important;\n\t}`;\nexport class AxisCrossing extends SampleBase {\n    chartInstance;\n    dropElement;\n    checkboxElement;\n    numericValue;\n    isChecked = true;\n    droplist = [\n        { value: 'X' },\n        { value: 'Y' },\n    ];\n    change() {\n        if (this.dropElement.value === 'X') {\n            this.checkboxElement.checked = this.chartInstance.primaryXAxis.placeNextToAxisLine;\n            this.numericValue.value = +this.chartInstance.primaryXAxis.crossesAt;\n        }\n        else {\n            this.checkboxElement.checked = this.chartInstance.primaryYAxis.placeNextToAxisLine;\n            this.numericValue.value = +this.chartInstance.primaryYAxis.crossesAt;\n        }\n        this.chartInstance.dataBind();\n    }\n    ;\n    crosshingValue() {\n        if (this.dropElement.index === 0) {\n            this.chartInstance.primaryXAxis.crossesAt = this.numericValue.value;\n        }\n        else {\n            this.chartInstance.primaryYAxis.crossesAt = this.numericValue.value;\n        }\n        this.chartInstance.dataBind();\n    }\n    ;\n    handleCheckboxChange = (e) => {\n        if (this.dropElement.index === 0) {\n            this.chartInstance.primaryXAxis.placeNextToAxisLine = this.checkboxElement.checked;\n        }\n        else {\n            this.chartInstance.primaryYAxis.placeNextToAxisLine = this.checkboxElement.checked;\n        }\n        this.chartInstance.dataBind();\n    };\n    render() {\n        return (<div className='control-pane'>\n                <style>\n                    {SAMPLE_CSS}\n                </style>\n                <div className='control-section row'>\n                    <div className='col-md-8'>\n                        <ChartComponent id='charts' ref={chart => this.chartInstance = chart} style={{ textAlign: \"center\" }} primaryXAxis={{\n                minimum: -8, maximum: 8, interval: 2,\n                valueType: 'Double',\n                lineStyle: {\n                    width: 2\n                },\n                minorTickLines: { width: 0 },\n                majorTickLines: { width: 0 },\n                crossesAt: 0,\n                minorTicksPerInterval: 3\n            }} chartArea={{ border: { width: 0 } }} primaryYAxis={{\n                minimum: -8, maximum: 8, interval: 2,\n                lineStyle: {\n                    width: 2\n                },\n                majorTickLines: { width: 0 },\n                minorTickLines: { width: 0 },\n                crossesAt: 0,\n                minorTicksPerInterval: 3,\n            }} load={this.load.bind(this)} title=\"Spline Interpolation\" tooltip={{ enable: true, enableHighlight: true }} loaded={this.onChartLoad.bind(this)}>\n                            <Inject services={[LineSeries, ScatterSeries, SplineSeries, Tooltip, Legend]}/>\n                            <SeriesCollectionDirective>\n                                <SeriesDirective dataSource={data1} xName='x' yName='y' name=\"Linear Interpolation\" type='Line' width={2} enableTooltip={false} fill='Blue'>\n                                </SeriesDirective>\n                                <SeriesDirective dataSource={data1} xName='x' yName='y' name=\"Cubic Spline Interpolation\" type='Spline' width={2} enableTooltip={false} fill='Green'>\n                                </SeriesDirective>\n                                <SeriesDirective dataSource={data1} xName='x' yName='y' name=\"Data Points\" type='Scatter' width={2} marker={{ visible: false, width: 12, height: 12 }} fill='red'>\n                                </SeriesDirective>                                \n                            </SeriesCollectionDirective>\n                        </ChartComponent>\n                    </div>\n                    <div className='col-md-4 property-section'>\n                        <PropertyPane title='Properties'>\n                            <table id='property' title='Properties' className='property-panel-table' style={{ width: '100%' }}>\n                            <tbody>\n                                <tr style={{ height: '50px' }}>\n                                    <td>\n                                        <div>Axis: </div>\n                                    </td>\n                                    <td>\n                                        <div>\n                                            <DropDownListComponent index={0} width=\"120px\" id=\"selmode\" change={this.change.bind(this)} ref={d => this.dropElement = d} dataSource={this.droplist} fields={{ text: 'value', value: 'value' }} value=\"X\"/>\n                                        </div>\n                                    </td>\n                                </tr>\n                                <tr style={{ height: '50px' }}>\n                                    <td style={{ width: '60%' }}>\n                                        <div id=\"crossValue\">Crosses Value:</div>\n                                    </td>\n                                    <td style={{ width: '40%' }}>\n                                        <div>\n                                            <NumericTextBoxComponent value={0} min={-8} max={8} width={120} step={2} change={this.crosshingValue.bind(this)} style={{ marginLeft: '-5px' }} ref={d => this.numericValue = d} aria-labelledby=\"Text\"/>\n                                        </div>\n                                    </td>\n                                </tr>\n                                <tr style={{ height: '50px' }}>\n                                    <td style={{ width: '60%' }}>\n                                        <div id=\"axis\">Placing Label Near to Axis Line:</div>\n                                    </td>\n                                    <td style={{ width: '40%' }}>\n                                        <div>\n                                            <input type=\"checkbox\" id=\"axisElements\" onChange={(e) => this.handleCheckboxChange(e)} style={{ marginLeft: '-5px' }} defaultChecked={true} ref={d => this.checkboxElement = d} aria-labelledby=\"Checkbox checked\"/>\n                                        </div>\n                                    </td>\n                                </tr>\n                                </tbody>\n                            </table>\n                        </PropertyPane>\n                    </div>\n                </div>\n            </div>);\n    }\n    onChartLoad(args) {\n        let chart = document.getElementById('charts');\n        chart.setAttribute('title', '');\n    }\n    ;\n    load(args) {\n        let selectedTheme = location.hash.split('/')[1];\n        selectedTheme = selectedTheme ? selectedTheme : 'Fluent2';\n        args.chart.theme = (selectedTheme.charAt(0).toUpperCase() + selectedTheme.slice(1)).\n            replace(/-dark/i, \"Dark\").replace(/contrast/i, 'Contrast').replace(/-highContrast/i, 'HighContrast');\n    }\n    ;\n}\n\nconst root = createRoot(document.getElementById('sample'));\nroot.render(<AxisCrossing />);","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n                this.rendereComplete();\n            });\n        }\n    }\n    export function updateSampleSection(){}\n    ","dependencies":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-react-base\":\"*\",\"@syncfusion/ej2-charts\":\"*\",\"@syncfusion/ej2-react-charts\":\"*\",\"@syncfusion/ej2-icons\":\"*\",\"markdown-spellcheck\":\"^1.3.1\",\"@syncfusion/ej2-dropdowns\":\"*\",\"@syncfusion/ej2-react-dropdowns\":\"*\",\"@syncfusion/ej2-inputs\":\"*\",\"@syncfusion/ej2-react-inputs\":\"*\",\"@syncfusion/ej2/base\":\"*\",\"@syncfusion/ej2-charts'; // Import the necessary types from Syncfusion\":\"*\"}"}