{"index.css":"/* css */","index.html":"<!DOCTYPE html>\n<html>\n<head>\n    <title>Syncfusion React Sample</title>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\n    <meta name=\"author\" content=\"Syncfusion\" />\n    <link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\n</head>\n\n<body class=\"{{theme}}\">\n     <style>\n            .control-section\n            {\n                margin-top: 100px;\n            }\n    </style>\n    <div id='sample'>\n</body>\n</html>\n","index.js":"import { createRoot } from 'react-dom/client';\nimport './index.css';\n/**\n * Sample for Area series with empty points\n */\nimport * as React from 'react';\nimport { ChartComponent, SeriesCollectionDirective, SeriesDirective, Inject, Tooltip, AnnotationsDirective, AnnotationDirective, DateTime, MultiColoredAreaSeries, ChartAnnotation, SegmentsDirective, SegmentDirective, } from '@syncfusion/ej2-react-charts';\nimport { Browser } from '@syncfusion/ej2-base';\nimport { SampleBase } from './sample-base';\nexport let dataValues = [];\n[150, 71.5, 106.4, 100.25, 70.0, 106.0, 85.6, 78.5, 76.4, 86.1, 155.6, 160.4,].map((value, index) => {\n    dataValues.push({ XValue: new Date(2016, index, 1), YValue: value });\n});\nlet content = \"<div style='color:#4ca1af; font-weight:bold'>Winter</div>\";\nlet content1 = \"<div style='color:#ffa751; font-weight:bold'>Summer</div>\";\nlet content2 = \"<div style='color:#1d976c; font-weight:bold'>Spring</div>\";\nconst SAMPLE_CSS = `\n     .control-fluid {\n         padding: 0px !important;\n     }\n     #control-container {\n         padding: 0px !important;\n     }\n \n     #control-container {\n         padding: 0px !important;\n     }\n \n     #winter stop {\n         stop-color: #4ca1af;\n     }\n \n     #winter stop[offset=\"0\"] {\n         stop-color: #c4e0e5;\n     }\n \n     #winter stop[offset=\"1\"] {\n         stop-color: #4ca1af;\n     }\n \n     #summer stop {\n         stop-color: #ffa751;\n     }\n \n     #summer stop[offset=\"0\"] {\n         stop-color: #ffe259;\n     }\n \n     #summer stop[offset=\"1\"] {\n         stop-color: #ffa751;\n     }\n \n     #spring stop {\n         stop-color: #1d976c;\n     }\n \n     #spring stop[offset=\"0\"] {\n         stop-color: #93f9b9;\n     }\n \n     #spring stop[offset=\"1\"] {\n         stop-color: #1d976c;\n     }`;\n/**\n * Area empty sample\n */\nexport class AreaMultiColored extends SampleBase {\n    render() {\n        return (<div className=\"control-pane\">\n        <style>{SAMPLE_CSS}</style>\n        <div className=\"control-section\">\n          <ChartComponent id=\"charts\" style={{ textAlign: 'center' }} primaryXAxis={{ valueType: 'DateTime', labelFormat: 'MMM', intervalType: 'Months', edgeLabelPlacement: 'Shift', majorGridLines: { width: 0 } }} primaryYAxis={{ labelFormat: '${value}K', rangePadding: 'None', minimum: 0, maximum: 200, interval: 50, lineStyle: { width: 0 }, majorTickLines: { width: 0 }, minorTickLines: { width: 0 } }} tooltip={{ enable: true, format: '${point.x} : <b>${point.y}</b>', showNearestTooltip: true }} legendSettings={{ visible: false }} chartArea={{ border: { width: 0 } }} load={this.load.bind(this)} width={Browser.isDevice ? '100%' : '75%'} title=\"US Season Retail Sales Growth\" loaded={this.onChartLoad.bind(this)}>\n            <Inject services={[MultiColoredAreaSeries, DateTime, Tooltip, ChartAnnotation,]}/>\n            <AnnotationsDirective>\n            <AnnotationDirective content={content} region=\"Series\" x=\"18%\" y=\"43%\"></AnnotationDirective>\n              <AnnotationDirective content={content1} region=\"Series\" x=\"46%\" y=\"43%\"></AnnotationDirective>\n              <AnnotationDirective content={content2} region=\"Series\" x=\"90%\" y=\"18%\"></AnnotationDirective>\n            </AnnotationsDirective>\n            <SeriesCollectionDirective>\n              <SeriesDirective dataSource={dataValues} xName=\"XValue\" yName=\"YValue\" name=\"US\" type=\"MultiColoredArea\" segmentAxis=\"X\">\n                <SegmentsDirective>\n                  <SegmentDirective value={new Date(2016, 4, 1)} color=\"url(#winter)\"></SegmentDirective>\n                  <SegmentDirective value={new Date(2016, 8, 1)} color=\"url(#summer)\"></SegmentDirective>\n                  <SegmentDirective color=\"url(#spring)\"></SegmentDirective>\n                </SegmentsDirective>\n              </SeriesDirective>\n            </SeriesCollectionDirective>\n          </ChartComponent>\n                </div>\n                <svg style={{ height: 0 }}>\n                    <defs>\n                        <linearGradient id=\"winter\" x1=\"0\" x2=\"0\" y1=\"0\" y2=\"1\">\n                            <stop offset=\"0\"></stop>\n                            <stop offset=\"1\"></stop>\n                        </linearGradient>\n                        <linearGradient id=\"summer\" x1=\"0\" x2=\"0\" y1=\"0\" y2=\"1\">\n                            <stop offset=\"0\"></stop>\n                            <stop offset=\"1\"></stop>\n                        </linearGradient>\n                        <linearGradient id=\"spring\" x1=\"0\" x2=\"0\" y1=\"0\" y2=\"1\">\n                            <stop offset=\"0\"></stop>\n                            <stop offset=\"1\"></stop>\n                        </linearGradient>\n                    </defs>\n                </svg>\n            </div>);\n    }\n    onChartLoad(args) {\n        let chart = document.getElementById('charts');\n        chart.setAttribute('title', '');\n    }\n    ;\n    load(args) {\n        let selectedTheme = location.hash.split('/')[1];\n        selectedTheme = selectedTheme ? selectedTheme : 'Fluent2';\n        args.chart.theme = (selectedTheme.charAt(0).toUpperCase() + selectedTheme.slice(1)).\n            replace(/-dark/i, \"Dark\").replace(/contrast/i, 'Contrast').replace(/-highContrast/i, 'HighContrast');\n    }\n    ;\n}\n\nconst root = createRoot(document.getElementById('sample'));\nroot.render(<AreaMultiColored />);","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n                this.rendereComplete();\n            });\n        }\n    }\n    export function updateSampleSection(){}\n    ","dependencies":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-react-base\":\"*\",\"@syncfusion/ej2-charts\":\"*\",\"@syncfusion/ej2-react-charts\":\"*\",\"@syncfusion/ej2-icons\":\"*\",\"markdown-spellcheck\":\"^1.3.1\",\"@syncfusion/ej2/base\":\"*\",\"@syncfusion/ej2-charts'; // Import the necessary types from Syncfusion\":\"*\"}"}