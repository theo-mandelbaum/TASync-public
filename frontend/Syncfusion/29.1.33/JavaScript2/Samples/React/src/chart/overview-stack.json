{"index.css":"/* css */","index.html":"<!DOCTYPE html>\n<html>\n<head>\n    <title>Syncfusion React Sample</title>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\n    <meta name=\"author\" content=\"Syncfusion\" />\n    <link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\n</head>\n\n<body class=\"{{theme}}\">\n     <style>\n            .control-section\n            {\n                margin-top: 100px;\n            }\n    </style>\n    <div id='sample'>\n</body>\n</html>\n","index.js":"import { createRoot } from 'react-dom/client';\nimport './index.css';\nimport { DashboardLayoutComponent, PanelsDirective, PanelDirective } from '@syncfusion/ej2-react-layouts';\nimport * as React from 'react';\nimport { AccumulationChartComponent, AccumulationSeriesCollectionDirective, AccumulationSeriesDirective, Inject, AccumulationLegend, PieSeries, AccumulationTooltip, ColumnSeries, SeriesCollectionDirective, SeriesDirective, AccumulationDataLabel, ChartComponent, Legend, Category, Tooltip, Highlight, DataLabel, SplineAreaSeries, ChartAnnotation, } from '@syncfusion/ej2-react-charts';\nimport { SampleBase } from './sample-base';\nconst SAMPLE_CSS = `\n.e-dashboardlayout {\n  padding: 20px;\n  z-index: 0;\n}\n.e-panel {\n  cursor: auto !important;\n}\n.e-panel-header{\n  border: none !important;\n  height: 50px !important;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n} \n.template{\n  height: 100%;\n  width: 100%;\n}\n\n#control-container {\n    padding: 0px !important;\n}\n#gradient-chart stop {\n    stop-color: #2485FA;        \n}\n#gradient-chart1 stop{\n    stop-color: #FEC200;\n} \n.ellipse[id*=_Trackball_1] {\n  strokeWidth: 1 !important;\n}\n.e-chart-focused:focus {\n  outline: none !important;\n}\n.title{\n  font-size: 15px;\n  font-weight: bold;\n  color: #737373;\n}\n\n}`;\nlet argument;\nexport class OverView extends SampleBase {\n    columnTemplate() {\n        return (<div className=\"template\">\n        <ChartComponent style={{ \"height\": \"100%\", \"width\": \"100%\", }} primaryXAxis={{ valueType: 'Category', majorGridLines: { width: 0 }, labelStyle: { size: '11px' } }} load={this.load.bind(this)} primaryYAxis={{\n                minimum: 0, maximum: 100, interval: 20, majorTickLines: { width: 0 }, labelFormat: '{value}%', lineStyle: { width: 0 }, labelStyle: { size: '11px' }, titleStyle: { size: '13px' },\n            }} tooltip={{ enable: true, enableHighlight: true }} legendSettings={{ padding: 5, shapeHeight: 8, shapeWidth: 8 }} chartArea={{ border: { width: 0 } }}>\n          <Inject services={[ColumnSeries, Legend, Tooltip, Category, DataLabel]}></Inject>\n          <SeriesCollectionDirective>\n            <SeriesDirective type=\"Column\" dataSource={[\n                { Period: '2017', Percentage: 60 },\n                { Period: '2018', Percentage: 56 },\n                { Period: '2019', Percentage: 71 },\n                { Period: '2020', Percentage: 85 },\n                { Period: '2021', Percentage: 73 },\n            ]} name=\"Online\" xName=\"Period\" yName=\"Percentage\" fill='#2485FA' marker={{ dataLabel: { visible: true, position: 'Middle', font: { color: 'white' } } }}></SeriesDirective>\n            <SeriesDirective type=\"Column\" dataSource={[\n                { Period: '2017', Percentage: 40 },\n                { Period: '2018', Percentage: 44 },\n                { Period: '2019', Percentage: 29 },\n                { Period: '2020', Percentage: 15 },\n                { Period: '2021', Percentage: 27 },\n            ]} name=\"Retail\" xName=\"Period\" yName=\"Percentage\" fill='#FEC200' marker={{ dataLabel: { visible: true, position: 'Middle', font: { color: 'white' } } }}></SeriesDirective>\n          </SeriesCollectionDirective>\n        </ChartComponent>\n      </div>);\n    }\n    splineTemplate() {\n        return (<div className=\"template\">\n        <ChartComponent style={{ \"height\": \"100%\", \"width\": \"100%\" }} primaryXAxis={{ majorTickLines: { width: 0 }, valueType: \"Category\", majorGridLines: { width: 0 }, labelStyle: { size: '11px' } }} load={this.load.bind(this)} primaryYAxis={{\n                majorTickLines: { width: 0 },\n                minimum: 0, maximum: 12000, interval: 2000, edgeLabelPlacement: 'Shift', labelFormat: '${value}', lineStyle: { width: 0 }, labelStyle: { size: '11px' }, titleStyle: { size: '13px' }\n            }} legendSettings={{ enableHighlight: true }} tooltip={{ enable: true, enableHighlight: true, showNearestTooltip: true, enableMarker: false }} chartArea={{ border: { width: 0 } }}>\n          <Inject services={[SplineAreaSeries, Legend, Tooltip, Category, ChartAnnotation, Highlight]}></Inject>\n          <SeriesCollectionDirective>\n            <SeriesDirective type=\"SplineArea\" dataSource={[{ period: 'Jan', percentage: 3600 }, { period: 'Feb', percentage: 6200 },\n                { period: 'Mar', percentage: 8100 }, { period: 'Apr', percentage: 5900 },\n                { period: 'May', percentage: 8900 }, { period: 'Jun', percentage: 7200 },\n                { period: 'Jul', percentage: 4300 }, { period: 'Aug', percentage: 4600 },\n                { period: 'Sep', percentage: 5500 }, { period: 'Oct', percentage: 6350 },\n                { period: 'Nov', percentage: 5700 }, { period: 'Dec', percentage: 8000 },]} xName=\"period\" yName=\"percentage\" name=\"Online\" width={2.5} marker={{ visible: false }} fill=\"#2485FA\" opacity={0.3} border={{ width: 2.75, color: '#2485FA' }}></SeriesDirective>\n                <SeriesDirective type=\"SplineArea\" dataSource={[{ period: 'Jan', percentage: 6400 }, { period: 'Feb', percentage: 5300 },\n                { period: 'Mar', percentage: 4900 }, { period: 'Apr', percentage: 5300 },\n                { period: 'May', percentage: 4200 }, { period: 'Jun', percentage: 6500 },\n                { period: 'Jul', percentage: 7900 }, { period: 'Aug', percentage: 3800 },\n                { period: 'Sep', percentage: 6800 }, { period: 'Oct', percentage: 3400 },\n                { period: 'Nov', percentage: 6400 }, { period: 'Dec', percentage: 6800 },]} xName=\"period\" yName=\"percentage\" name=\"Retail\" width={2.5} marker={{ visible: false }} fill=\"#FEC200\" opacity={0.3} border={{ width: 2.75, color: '#FEC200' }}></SeriesDirective>\n          </SeriesCollectionDirective>\n        </ChartComponent>\n      </div>);\n    }\n    pieTemplate() {\n        return (<div className=\"template\">\n        <AccumulationChartComponent style={{ \"height\": \"100%\", \"width\": \"100%\" }} legendSettings={{ visible: false }} load={this.accumulationload.bind(this)} tooltip={{ enable: true, format: \"${point.tooltip}\", enableHighlight: true }} pointRender={this.onPointRender.bind(this)} enableSmartLabels={true} enableBorderOnMouseMove={false}>\n          <Inject services={[PieSeries, AccumulationTooltip, AccumulationDataLabel, AccumulationLegend, PieSeries, AccumulationTooltip, AccumulationDataLabel]}></Inject>\n          <AccumulationSeriesCollectionDirective>\n\n            <AccumulationSeriesDirective tooltipMappingName='r' dataLabel={{\n                visible: true,\n                position: 'Outside', name: 'Product',\n                connectorStyle: { length: '10px', type: 'Curve' }\n            }} type=\"Pie\" palettes={[\"#61EFCD\", \"#CDDE1F\", \"#FEC200\", \"#CA765A\", \"#2485FA\", \"#F57D7D\", \"#C152D2\",\n                \"#8854D9\", \"#3D4EB8\", \"#00BCD7\", \"#4472c4\", \"#ed7d31\", \"#ffc000\", \"#70ad47\", \"#5b9bd5\", \"#c1c1c1\", \"#6f6fe2\", \"#e269ae\", \"#9e480e\", \"#997300\"]} dataSource={[\n                { Product: \"TV : 12%\", Percentage: 12, r: 'TV, 30 (12%)' },\n                { Product: \"PC : 8%\", Percentage: 8, r: 'PC : 20 (8%)' },\n                { Product: \"Laptop : 16%\", Percentage: 16, r: 'Laptop : 40 (16%)' },\n                { Product: \"Mobile : 36%\", Percentage: 36, r: 'Mobile : 90 (36%)' },\n                { Product: \"Camera : 11%\", Percentage: 11, r: 'Camera : 27 (11%)' },\n            ]} xName=\"Product\" yName=\"Percentage\" startAngle={270} innerRadius=\"40%\" border={{ width: 3, color: 'transparent' }}></AccumulationSeriesDirective>\n          </AccumulationSeriesCollectionDirective>\n        </AccumulationChartComponent>\n      </div>);\n    }\n    cellSpacing;\n    layoutColor;\n    constructor() {\n        super(argument);\n        this.cellSpacing = [15, 15];\n    }\n    render() {\n        return (<div>\n    \n      <div className=\"control-section\">\n      <style>{SAMPLE_CSS}</style>\n        <DashboardLayoutComponent cellSpacing={this.cellSpacing} cellAspectRatio={0.8} columns={8}>\n          <PanelsDirective>\n            <PanelDirective sizeX={5} sizeY={2} row={0} col={0} content={this.columnTemplate.bind(this)} header='<div class=\"title\" id=\"header1\";>Sales - Yearly Performance</div>'></PanelDirective>\n            <PanelDirective sizeX={3} sizeY={2} row={0} col={5} content={this.pieTemplate.bind(this)} header='<div class=\"title\" id=\"header2\">Product Wise Sales - 2021</div>'></PanelDirective>\n            <PanelDirective sizeX={8} sizeY={3} row={4} col={0} content={this.splineTemplate.bind(this)} header='<div class=\"title\" id=\"header3\">Monthly Sales for 2021</div>'></PanelDirective>\n          </PanelsDirective>\n        </DashboardLayoutComponent>\n      </div>\n        <svg style={{ height: '0' }}>\n    <defs>       \n        <linearGradient id=\"gradient-chart\" style={{ opacity: 0.75 }} className=\"chart-gradient\" x1=\"0\" x2=\"0\" y1=\"0\" y2=\"1\">\n            <stop offset=\"0\"></stop>\n            <stop offset=\"1\"></stop>\n        </linearGradient>\n         <linearGradient id=\"gradient-chart1\" style={{ opacity: 0.75 }} className=\"chart-gradient\" x1=\"0\" x2=\"0\" y1=\"0\" y2=\"1\">\n            <stop offset=\"0\"></stop>\n            <stop offset=\"1\"></stop>\n        </linearGradient>\n    </defs>\n        </svg>\n    </div>);\n    }\n    load(args) {\n        let selectedTheme = location.hash.split('/')[1];\n        selectedTheme = selectedTheme ? selectedTheme : 'Fluent2';\n        args.chart.theme = (selectedTheme.charAt(0).toUpperCase() + selectedTheme.slice(1)).replace(/-dark/i, \"Dark\").replace(/contrast/i, 'Contrast').replace(/-highContrast/i, 'HighContrast');\n        args.chart.series[0].fill = 'url(#' + 'gradient-chart)';\n        args.chart.series[1].fill = 'url(#' + 'gradient-chart1)';\n    }\n    ;\n    accumulationload(args) {\n        let selectedTheme = location.hash.split('/')[1];\n        selectedTheme = selectedTheme ? selectedTheme : 'Material';\n        args.accumulation.theme = (selectedTheme.charAt(0).toUpperCase() + selectedTheme.slice(1)).\n            replace(/-dark/i, \"Dark\").replace(/contrast/i, 'Contrast').replace(/-highContrast/i, 'HighContrast');\n    }\n    ;\n    onPointRender(args) {\n        let selectedTheme = location.hash.split('/')[1];\n        selectedTheme = selectedTheme ? selectedTheme : 'Material';\n        if (selectedTheme.indexOf('dark') > -1) {\n            if (selectedTheme.indexOf('material') > -1) {\n                args.border.color = '#303030';\n                this.layoutColor = '#303030';\n            }\n            else if (selectedTheme.indexOf('bootstrap5') > -1) {\n                args.border.color = '#343a40';\n                this.layoutColor = '#343a40';\n            }\n            else if (selectedTheme.indexOf('bootstrap') > -1) {\n                args.border.color = '#1A1A1A';\n                this.layoutColor = '#1A1A1A';\n            }\n            else if (selectedTheme.indexOf('fabric') > -1) {\n                args.border.color = '#201f1f';\n                this.layoutColor = '#201f1f';\n            }\n            else if (selectedTheme.indexOf('fluent') > -1) {\n                args.border.color = '#252423';\n                this.layoutColor = '#252423';\n            }\n            else if (selectedTheme.indexOf('bootstrap') > -1) {\n                args.border.color = '#1A1A1A';\n                this.layoutColor = '#1A1A1A';\n            }\n            else if (selectedTheme.indexOf('tailwind') > -1) {\n                args.border.color = '#1F2937';\n                this.layoutColor = '#1F2937';\n            }\n            else {\n                args.border.color = '#222222';\n                this.layoutColor = '#222222';\n            }\n        }\n        else if (selectedTheme.indexOf('highcontrast') > -1) {\n            args.border.color = '#000000';\n            this.layoutColor = '#000000';\n        }\n        else {\n            args.border.color = '#FFFFFF';\n            this.layoutColor = '#FFFFFF';\n        }\n        if (selectedTheme.indexOf('highcontrast') > -1 || selectedTheme.indexOf('dark') > -1) {\n            let element = document.querySelector('#header1');\n            element.style.color = '#F3F2F1';\n            let element1 = document.querySelector('#header2');\n            element1.style.color = '#F3F2F1';\n            let element2 = document.querySelector('#header3');\n            element2.style.color = '#F3F2F1';\n        }\n        let element = document.querySelector('#layout_0template');\n        element.style.background = this.layoutColor;\n        let element1 = document.querySelector('#layout_1template');\n        element1.style.background = this.layoutColor;\n        let element2 = document.querySelector('#layout_2template');\n        element2.style.background = this.layoutColor;\n    }\n    ;\n}\n\nconst root = createRoot(document.getElementById('sample'));\nroot.render(<OverView />);","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n                this.rendereComplete();\n            });\n        }\n    }\n    export function updateSampleSection(){}\n    ","dependencies":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-react-base\":\"*\",\"@syncfusion/ej2-layouts\":\"*\",\"@syncfusion/ej2-react-layouts\":\"*\",\"@syncfusion/ej2-icons\":\"*\",\"markdown-spellcheck\":\"^1.3.1\",\"@syncfusion/ej2-charts\":\"*\",\"@syncfusion/ej2-react-charts\":\"*\",\"@syncfusion/ej2/base\":\"*\",\"@syncfusion/ej2-charts'; // Import the necessary types from Syncfusion\":\"*\"}"}