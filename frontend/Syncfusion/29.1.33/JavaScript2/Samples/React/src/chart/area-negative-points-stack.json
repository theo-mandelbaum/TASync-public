{"index.css":"/* css */","index.html":"<!DOCTYPE html>\n<html>\n<head>\n    <title>Syncfusion React Sample</title>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\n    <meta name=\"author\" content=\"Syncfusion\" />\n    <link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\n</head>\n\n<body class=\"{{theme}}\">\n     <style>\n            .control-section\n            {\n                margin-top: 100px;\n            }\n    </style>\n    <div id='sample'>\n</body>\n</html>\n","index.js":"import { createRoot } from 'react-dom/client';\nimport './index.css';\n/**\n * Sample for Area series with empty points\n */\nimport * as React from 'react';\nimport { ChartComponent, SeriesCollectionDirective, SeriesDirective, Highlight, Inject, Tooltip, Category, AreaSeries, Legend } from '@syncfusion/ej2-react-charts';\nimport { Browser } from '@syncfusion/ej2-base';\nimport { SampleBase } from './sample-base';\nexport let data1 = [\n    { x: 'Onion', y: 3000 }, { x: 'Potato', y: 4000 },\n    { x: 'Tomato', y: -4000 }, { x: 'Corn', y: -2000 },\n    { x: 'Carrot', y: 5000 }\n];\nexport let data2 = [\n    { x: 'Onion', y: 2000 }, { x: 'Potato', y: 3000 },\n    { x: 'Tomato', y: 4000 }, { x: 'Corn', y: 2000 },\n    { x: 'Carrot', y: 3000 }\n];\nexport let data3 = [\n    { x: 'Onion', y: 2000 }, { x: 'Potato', y: -1000 },\n    { x: 'Tomato', y: -3000 }, { x: 'Corn', y: 4000 },\n    { x: 'Carrot', y: 1000 }\n];\nconst SAMPLE_CSS = `\n     .control-fluid {\n         padding: 0px !important;\n     }`;\n/**\n * Area empty sample\n */\nexport class AreaNegative extends SampleBase {\n    render() {\n        return (<div className=\"control-pane\">\n        <style>{SAMPLE_CSS}</style>\n        <div className=\"control-section\">\n          <ChartComponent id=\"charts\" style={{ textAlign: 'center' }} primaryXAxis={{ valueType: 'Category', majorGridLines: { width: 0 }, edgeLabelPlacement: 'Shift' }} primaryYAxis={{ labelFormat: '${value}', minimum: -4000, maximum: 8000, interval: 2000, lineStyle: { width: 0 }, majorTickLines: { width: 0 }, minorTickLines: { width: 0 } }} chartArea={{ border: { width: 0 } }} legendSettings={{ enableHighlight: true }} load={this.load.bind(this)} margin={{ left: Browser.isDevice ? 2 : 10, right: Browser.isDevice ? 2 : 10, top: Browser.isDevice ? 2 : 10, bottom: Browser.isDevice ? 2 : 10 }} width={Browser.isDevice ? '100%' : '75%'} title=\"Profit and Loss\" tooltip={{ enable: true, enableHighlight: true, showNearestTooltip: true }} loaded={this.onChartLoad.bind(this)}>\n            <Inject services={[AreaSeries, Category, Tooltip, Legend, Highlight]}/>\n            <SeriesCollectionDirective>\n              <SeriesDirective dataSource={data1} xName=\"x\" yName=\"y\" name=\"Company A\" opacity={0.75} marker={{ visible: true, shape: 'Circle', isFilled: true, width: 7, height: 7 }} type=\"Area\" width={2} border={{ width: 2 }}></SeriesDirective>\n              <SeriesDirective dataSource={data2} xName=\"x\" yName=\"y\" name=\"Company B\" opacity={0.75} marker={{ visible: true, shape: 'Diamond', isFilled: true, width: 7, height: 7 }} type=\"Area\" width={2} border={{ width: 2 }}></SeriesDirective>\n              <SeriesDirective dataSource={data3} xName=\"x\" yName=\"y\" name=\"Company C\" opacity={0.75} marker={{ visible: true, shape: 'Rectangle', isFilled: true, width: 5, height: 5 }} type=\"Area\" width={2} border={{ width: 2 }}></SeriesDirective>\n            </SeriesCollectionDirective>\n          </ChartComponent>\n           </div>\n            </div>);\n    }\n    onChartLoad(args) {\n        let chart = document.getElementById('charts');\n        chart.setAttribute('title', '');\n    }\n    ;\n    load(args) {\n        let selectedTheme = location.hash.split('/')[1];\n        selectedTheme = selectedTheme ? selectedTheme : 'Fluent2';\n        args.chart.theme = (selectedTheme.charAt(0).toUpperCase() + selectedTheme.slice(1)).\n            replace(/-dark/i, \"Dark\").replace(/contrast/i, 'Contrast').replace(/-highContrast/i, 'HighContrast');\n    }\n    ;\n}\n\nconst root = createRoot(document.getElementById('sample'));\nroot.render(<AreaNegative />);","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n                this.rendereComplete();\n            });\n        }\n    }\n    export function updateSampleSection(){}\n    ","dependencies":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-react-base\":\"*\",\"@syncfusion/ej2-charts\":\"*\",\"@syncfusion/ej2-react-charts\":\"*\",\"@syncfusion/ej2-icons\":\"*\",\"markdown-spellcheck\":\"^1.3.1\",\"@syncfusion/ej2/base\":\"*\",\"@syncfusion/ej2-charts'; // Import the necessary types from Syncfusion\":\"*\"}"}