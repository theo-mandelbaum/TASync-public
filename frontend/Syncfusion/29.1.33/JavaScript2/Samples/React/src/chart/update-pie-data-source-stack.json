{"index.css":"/* css */","index.html":"<!DOCTYPE html>\n<html>\n<head>\n    <title>Syncfusion React Sample</title>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\n    <meta name=\"author\" content=\"Syncfusion\" />\n    <link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\n</head>\n\n<body class=\"{{theme}}\">\n     <style>\n            .control-section\n            {\n                margin-top: 100px;\n            }\n    </style>\n    <div id='sample'>\n</body>\n</html>\n","index.js":"import { createRoot } from 'react-dom/client';\nimport './index.css';\nimport * as React from 'react';\nimport { SampleBase } from './sample-base';\nimport { AccumulationChartComponent, AccumulationSeriesCollectionDirective, AccumulationSeriesDirective, Inject, AccumulationDataLabel, PieSeries, AccumulationLegend } from '@syncfusion/ej2-react-charts';\nimport { Browser } from '@syncfusion/ej2-base';\nconst SAMPLE_CSS = `\n  .control-fluid {\n    padding: 0px !important;\n  }\n  .donut-chart {\n    align: center;\n  }\n`;\nlet updatedData = [\n    { x: 'Apple', y: 7.8451 },\n    { x: 'Google', y: 13.4167 },\n    { x: 'Amazon', y: 6.9403 },\n    { x: 'Microsoft', y: 20.7127 },\n    { x: 'IBM', y: 76.2822 },\n    { x: 'Oracle', y: 21.0090 },\n    { x: 'Netflix', y: 16.8242 }\n];\nlet updatedData2 = [\n    { x: 'Apple', y: 10.9899 },\n    { x: 'Google', y: 14.2521 },\n    { x: 'Amazon', y: 9.8100 },\n    { x: 'Microsoft', y: 20.4205 },\n    { x: 'IBM', y: 100.6536 },\n    { x: 'Oracle', y: 26.0708 },\n    { x: 'Netflix', y: 27.4937 }\n];\nlet updatedData3 = [\n    { x: 'Apple', y: 17.4344 },\n    { x: 'Google', y: 16.1018 },\n    { x: 'Amazon', y: 10.9887 },\n    { x: 'Microsoft', y: 24.0142 },\n    { x: 'IBM', y: 117.6709 },\n    { x: 'Oracle', y: 24.9828 },\n    { x: 'Netflix', y: 11.8551 }\n];\nlet updatedData4 = [\n    { x: 'Apple', y: 14.5929 },\n    { x: 'Google', y: 22.1492 },\n    { x: 'Amazon', y: 14.8658 },\n    { x: 'Microsoft', y: 26.9842 },\n    { x: 'IBM', y: 118.2763 },\n    { x: 'Oracle', y: 28.5474 },\n    { x: 'Netflix', y: 35.2718 }\n];\nlet updatedData5 = [\n    { x: 'Apple', y: 20.4231 },\n    { x: 'Google', y: 28.3890 },\n    { x: 'Amazon', y: 16.5876 },\n    { x: 'Microsoft', y: 36.2762 },\n    { x: 'IBM', y: 113.4907 },\n    { x: 'Oracle', y: 34.4296 },\n    { x: 'Netflix', y: 57.4951 }\n];\nlet updatedData6 = [\n    { x: 'Apple', y: 27.0239 },\n    { x: 'Google', y: 30.9638 },\n    { x: 'Amazon', y: 23.8494 },\n    { x: 'Microsoft', y: 40.9778 },\n    { x: 'IBM', y: 99.4267 },\n    { x: 'Oracle', y: 35.4508 },\n    { x: 'Netflix', y: 91.8956 }\n];\nlet updatedData7 = [\n    { x: 'Apple', y: 24.0368 },\n    { x: 'Google', y: 38.1172 },\n    { x: 'Amazon', y: 34.8921 },\n    { x: 'Microsoft', y: 49.8084 },\n    { x: 'IBM', y: 100.0202 },\n    { x: 'Oracle', y: 34.6261 },\n    { x: 'Netflix', y: 102.0304 }\n];\nlet updatedData8 = [\n    { x: 'Apple', y: 35.2487 },\n    { x: 'Google', y: 46.9350 },\n    { x: 'Amazon', y: 48.2920 },\n    { x: 'Microsoft', y: 66.5079 },\n    { x: 'IBM', y: 108.4717 },\n    { x: 'Oracle', y: 41.7164 },\n    { x: 'Netflix', y: 165.3743 }\n];\nlet updatedData9 = [\n    { x: 'Apple', y: 44.9396 },\n    { x: 'Google', y: 56.0381 },\n    { x: 'Amazon', y: 81.8891 },\n    { x: 'Microsoft', y: 95.1360 },\n    { x: 'IBM', y: 103.0934 },\n    { x: 'Oracle', y: 43.7122 },\n    { x: 'Netflix', y: 319.2903 }\n];\nlet updatedData10 = [\n    { x: 'Apple', y: 50.2883 },\n    { x: 'Google', y: 59.4929 },\n    { x: 'Amazon', y: 89.2447 },\n    { x: 'Microsoft', y: 124.6044 },\n    { x: 'IBM', y: 103.0097 },\n    { x: 'Oracle', y: 49.6689 },\n    { x: 'Netflix', y: 328.8713 }\n];\nclass UpdatePieDataSource extends SampleBase {\n    pie;\n    intervalId;\n    year = 10;\n    yearIndex = 2;\n    updateClearInterval = () => {\n        if (this.intervalId !== null) {\n            clearInterval(this.intervalId);\n        }\n    };\n    onChartLoad = (args) => {\n        let chart = document.getElementById('donut-container');\n        chart.setAttribute('title', '');\n    };\n    load(args) {\n        this.yearIndex = 2;\n        this.year = 10;\n        args.accumulation.centerLabel.text = \"2010\";\n        let selectedTheme = location.hash.split('/')[1];\n        selectedTheme = selectedTheme ? selectedTheme : 'Fluent2';\n        args.accumulation.theme = (selectedTheme.charAt(0).toUpperCase() + selectedTheme.slice(1)).replace(/-dark/i, 'Dark').replace(/contrast/i, 'Contrast').replace(/-highContrast/i, 'HighContrast');\n        this.updateData(args);\n    }\n    updateData(args) {\n        this.updateClearInterval();\n        this.intervalId = setInterval(() => {\n            let container = document.getElementById('donut-container');\n            if (container && container.id === args.chart.element.id) {\n                let newData = (eval('updatedData' + this.yearIndex) || []).map(function (item) {\n                    return { x: item.x, y: item.y };\n                });\n                this.year = this.year < 20 ? this.year + 1 : 10;\n                args.accumulation.centerLabel.text = \"20\" + this.year;\n                if (args.accumulation.series.length > 0) {\n                    args.accumulation.series[0].setData(newData, 500);\n                }\n                this.yearIndex = this.yearIndex < 10 ? this.yearIndex + 1 : 2;\n            }\n            else {\n                this.updateClearInterval();\n            }\n        }, 1500);\n    }\n    textRender(args) {\n        args.text = Browser.isDevice ? String(args.point.x) : String(args.point.x + \": \" + \"$\" + args.text);\n    }\n    render() {\n        return (<div className='control-pane'>\n                <style>{SAMPLE_CSS}</style>\n                <div className='control-section row'>\n                    <AccumulationChartComponent id='donut-container' ref={chart => this.pie = chart} style={{ textAlign: 'center' }} title='Average Stock Market Prices of Leading Tech Giants' titleStyle={{ size: '18px' }} load={this.load.bind(this)} loaded={this.onChartLoad.bind(this)} textRender={this.textRender.bind(this)} centerLabel={{\n                text: '2010',\n                textStyle: {\n                    fontWeight: '600',\n                    size: Browser.isDevice ? '25px' : '40px'\n                }\n            }} legendSettings={{ visible: false }} width={Browser.isDevice ? '100%' : '75%'} enableBorderOnMouseMove={false}>\n                        <Inject services={[PieSeries, AccumulationDataLabel, AccumulationLegend]}/>\n                        <AccumulationSeriesCollectionDirective>\n                            <AccumulationSeriesDirective dataSource={updatedData} xName='x' yName='y' radius='75%' innerRadius='65%' dataLabel={{ visible: true, position: 'Outside', font: { fontWeight: '600' }, connectorStyle: { type: 'Line', width: 2, length: '18' } }}/>\n                        </AccumulationSeriesCollectionDirective>\n                    </AccumulationChartComponent>\n                </div>\n            </div>);\n    }\n}\nexport default UpdatePieDataSource;\n\nconst root = createRoot(document.getElementById('sample'));\nroot.render(<UpdatePieDataSource />);","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n                this.rendereComplete();\n            });\n        }\n    }\n    export function updateSampleSection(){}\n    ","dependencies":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-react-base\":\"*\",\"@syncfusion/ej2-charts\":\"*\",\"@syncfusion/ej2-react-charts\":\"*\",\"@syncfusion/ej2-icons\":\"*\",\"markdown-spellcheck\":\"^1.3.1\",\"@syncfusion/ej2/base\":\"*\",\"@syncfusion/ej2-charts'; // Import the necessary types from Syncfusion\":\"*\"}"}