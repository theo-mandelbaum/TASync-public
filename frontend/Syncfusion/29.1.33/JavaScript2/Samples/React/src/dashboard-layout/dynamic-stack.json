{"index.css":"#edit_dashboard .template{\n    height: 100%;\n    width: 100%;\n}\n\n#edit_target #dialogBtn {\n    display: none;\n}\n\n#edit_target .dialog-text {\n    height: 35px;\n    border: 1px solid #80808029;\n    vertical-align: middle;\n    line-height: 35px;\n    border-radius: 4px;\n    padding-left: 12px;\n    margin-bottom: 5%;\n    cursor: pointer;\n}\n\n@media (max-width: 650px) {\n    #togglebtn{\n        width: 90px !important;\n    }\n}\n\n#edit_target .add-widget-button {\n    padding: 10px;\n    text-align: center;\n    margin-bottom: 10px;\n    cursor: pointer;\n    font-size: 15px;\n}\n\nbody.fluent.e-bigger #edit_target .e-btn.e-primary,  body.fluent-dark.e-bigger #edit_target .e-btn.e-primary{\n    width : 100px !important;\n    margin: -8px;\n}\n\n#edit_dashboard.e-dashboardlayout.e-control .e-panel:hover span {\n    display: block;\n}\n\n#edit_dashboard.e-dashboardlayout.e-control .e-panel .e-panel-container .e-panel-header {\n    height: 35px;\n    padding: 0 15px 0 15px;\n    border-bottom: 2px solid #e6e9ed !important;\n    line-height:35px;\n}\n\n#edit_dashboard .e-panel-content {\n    height: calc(100% - 37px) !important;\n    overflow: hidden;\n    width:100%;\n}\n\n\n.bootstrap5-dark .dialog-text,\n.highcontrast .dialog-text,\n.tailwind-dark .dialog-text,\n.fabric-dark .dialog-text,\n.bootstrap-dark .dialog-text {\n    border: 1px solid #FFFFFF;\n}\n\n\n#edit_dashboard.e-dashboardlayout.e-control .e-panel,\n#edit_dashboard.e-dashboardlayout.e-control .e-panel:hover,\n#edit_dashboard.e-dashboardlayout.e-control .e-panel:active {\n    border: 1px solid #bbb;\n}\n\n#edit_target .e-dialog .e-dlg-header-content {\n    border-bottom: none;\n    padding: 18px 18px 18px 20px;\n}\n\n#edit_target .edit::before {\n    content: '\\e501';\n    font-family: 'e-sb-icons';\n    margin-left: -7px;\n    vertical-align: middle;\n}\n\n#edit_target .save::before {\n    content: '\\e500';\n    font-family: 'e-sb-icons';\n    margin-left: -7px;\n    vertical-align: middle;\n}\n/* custom code start*/\n@font-face {\n    font-family: 'e-sb-icons';\n    src: url(data:application/x-font-ttf;charset=utf-8;base64,AAEAAAAKAIAAAwAgT1MvMjttR/MAAAEoAAAAVmNtYXDlEOVaAAABjAAAADhnbHlmAM1kuQAAAcwAAAD8aGVhZBRipc8AAADQAAAANmhoZWEIUQQEAAAArAAAACRobXR4DAAAAAAAAYAAAAAMbG9jYQA6AH4AAAHEAAAACG1heHABEQA4AAABCAAAACBuYW1lWD3y/QAAAsgAAAIlcG9zdNvk7cwAAATwAAAANQABAAAEAAAAAFwEAAAAAAAD9AABAAAAAAAAAAAAAAAAAAAAAwABAAAAAQAApr5cCV8PPPUACwQAAAAAANioMG8AAAAA2KgwbwAAAAAD9AP0AAAACAACAAAAAAAAAAEAAAADACwABAAAAAAAAgAAAAoACgAAAP8AAAAAAAAAAQQAAZAABQAAAokCzAAAAI8CiQLMAAAB6wAyAQgAAAIABQMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUGZFZABA5QDlAQQAAAAAXAQAAAAAAAABAAAAAAAABAAAAAQAAAAEAAAAAAAAAgAAAAMAAAAUAAMAAQAAABQABAAkAAAABAAEAAEAAOUB//8AAOUA//8AAAABAAQAAAABAAIAAAAAADoAfgAEAAAAAAP0A/MAAwALABkAIwAAAREhEQEVMzUzFSE1IxEhETMVMxEjESERIxEjERUhESM1IzUhAx79xAEeR0j+m0gB9I9HR/02SEcD6EdI/KcBcf7iAR4CPI+P19f+4gEeSPzuAWb+mgNa/KZHA1lIRwAAAAMAAAAAA/QD9AADAAgAKwAACQEnCQEDJQEnNwcXPwc1Lw8PBgLH/ko2Abb9uT4BGQJC2m0/2z8HBgUFAwMCAQIEBQcICQoLDA0NDw8PEA0NDQwLCwsCkf5KNgG2/l7+5z4CQ9puP9s/CgsLCwwNDQ0QDw8PDQ0MCwoJCAcFBAIBAQEDAwUFBgAAABIA3gABAAAAAAAAAAEAAAABAAAAAAABAAcAAQABAAAAAAACAAcACAABAAAAAAADAAcADwABAAAAAAAEAAcAFgABAAAAAAAFAAsAHQABAAAAAAAGAAcAKAABAAAAAAAKACwALwABAAAAAAALABIAWwADAAEECQAAAAIAbQADAAEECQABAA4AbwADAAEECQACAA4AfQADAAEECQADAA4AiwADAAEECQAEAA4AmQADAAEECQAFABYApwADAAEECQAGAA4AvQADAAEECQAKAFgAywADAAEECQALACQBIyBlai1pY29uUmVndWxhcmVqLWljb25lai1pY29uVmVyc2lvbiAxLjBlai1pY29uRm9udCBnZW5lcmF0ZWQgdXNpbmcgU3luY2Z1c2lvbiBNZXRybyBTdHVkaW93d3cuc3luY2Z1c2lvbi5jb20AIABlAGoALQBpAGMAbwBuAFIAZQBnAHUAbABhAHIAZQBqAC0AaQBjAG8AbgBlAGoALQBpAGMAbwBuAFYAZQByAHMAaQBvAG4AIAAxAC4AMABlAGoALQBpAGMAbwBuAEYAbwBuAHQAIABnAGUAbgBlAHIAYQB0AGUAZAAgAHUAcwBpAG4AZwAgAFMAeQBuAGMAZgB1AHMAaQBvAG4AIABNAGUAdAByAG8AIABTAHQAdQBkAGkAbwB3AHcAdwAuAHMAeQBuAGMAZgB1AHMAaQBvAG4ALgBjAG8AbQAAAAACAAAAAAAAAAoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMBAgEDAQQABHNhdmUEZWRpdAAAAAAA) format('truetype');\n    font-weight: normal;\n    font-style: normal;\n}\n\n[class^=\"sf-icon-\"],\n[class*=\" sf-icon-\"] {\n    font-family: 'e-sb-icons' !important;\n    speak: none;\n    font-size: 55px;\n    font-style: normal;\n    font-weight: normal;\n    font-variant: normal;\n    text-transform: none;\n    line-height: 1;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n}\n/* custom code end*/\n#edit_dashboard{\n    display: block;\n}\n\n.e-bigger.bootstrap5 #togglebtn.e-btn .e-btn-icon.e-icon-left,\n.e-bigger.bootstrap5-dark #togglebtn.e-btn .e-btn-icon.e-icon-left,\n.e-bigger.material #togglebtn.e-btn .e-btn-icon.e-icon-left,\n.e-bigger.material-dark #togglebtn.e-btn .e-btn-icon.e-icon-left,\n.material3 #togglebtn.e-btn .e-btn-icon.e-icon-left,\n.material3-dark #togglebtn.e-btn .e-btn-icon.e-icon-left {\n    margin-left: 0em;\n    width: 1em;\n}\n\n.e-bigger.material3 #togglebtn.e-btn .e-btn-icon.e-icon-left,\n.e-bigger.material3-dark #togglebtn.e-btn .e-btn-icon.e-icon-left,\n.e-bigger.tailwind-dark #togglebtn.e-btn .e-btn-icon.e-icon-left,\n.e-bigger.fabric #togglebtn.e-btn .e-btn-icon.e-icon-left,\n.e-bigger.fabric-dark #togglebtn.e-btn .e-btn-icon.e-icon-left {\n    margin-left: -0.5em;\n    width: 1em;\n}\n\n.e-bigger.tailwind #togglebtn.e-btn .e-btn-icon.e-icon-left,\n.e-bigger.tailwind-dark #togglebtn.e-btn .e-btn-icon.e-icon-left {\n    margin-left: -0.2em;\n    width: 1em;\n}\n","index.html":"<!DOCTYPE html>\n<html>\n<head>\n    <title>Syncfusion React Sample</title>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\n    <meta name=\"author\" content=\"Syncfusion\" />\n    <link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\n</head>\n\n<body class=\"{{theme}}\">\n     <style>\n            .control-section\n            {\n                margin-top: 100px;\n            }\n    </style>\n    <div id='sample'>\n</body>\n</html>\n","index.js":"import { createRoot } from 'react-dom/client';\nimport './index.css';\nimport * as React from \"react\";\nimport { SampleBase } from './sample-base';\nimport { DashboardLayoutComponent, PanelsDirective, PanelDirective } from \"@syncfusion/ej2-react-layouts\";\nimport { ButtonComponent } from \"@syncfusion/ej2-react-buttons\";\nimport { DialogComponent } from '@syncfusion/ej2-react-popups';\nimport { AccumulationChartComponent, AccumulationSeriesCollectionDirective, AccumulationSeriesDirective, Inject, AccumulationLegend, PieSeries, AccumulationTooltip, ColumnSeries, SeriesCollectionDirective, SeriesDirective, AccumulationDataLabel, ChartComponent, Legend, Category, Tooltip, DataLabel, SplineAreaSeries, DateTime } from \"@syncfusion/ej2-react-charts\";\n\nexport class DynamicWidget extends SampleBase {\n    btnobj;\n    dashboardObj;\n    dialogObj;\n    constructor(props) {\n        super(props);\n        this.state = {\n            hideDialog: false\n        };\n    }\n    btnClick() {\n        if (this.btnobj.element.classList.contains('e-active')) {\n            this.dashboardObj.allowDragging = true;\n            this.dashboardObj.allowResizing = true;\n            this.btnobj.content = \"Save\";\n            this.btnobj.iconCss = 'save';\n            document.getElementById('dialogBtn').style.display = 'block';\n        }\n        else {\n            this.dashboardObj.allowDragging = false;\n            this.dashboardObj.allowResizing = false;\n            this.btnobj.content = \"Edit\";\n            this.btnobj.iconCss = 'edit';\n            document.getElementById('dialogBtn').style.display = 'none';\n        }\n    }\n    onPanelResize(args) {\n        if (args.element && args.element.querySelector('.e-panel-container .e-panel-content div div')) {\n            let chartObj = (args.element.querySelector('.e-panel-container .e-panel-content div div')).ej2_instances[0];\n            chartObj.height = '95%';\n            chartObj.width = '100%';\n            chartObj.refresh();\n        }\n    }\n    content(data) {\n        return (<div id=\"dialogcontent\">\n                <div>\n                    <div id=\"linetemplate\">\n                        <p className=\"dialog-text\">Linechart (1x1) </p>\n                    </div>\n                    <div id=\"pietemplate\">\n                        <p className=\"dialog-text\">Piechart (1x1) </p>\n                    </div>\n                    <div id=\"splinetemplate\">\n                        <p className=\"dialog-text\">Splinechart (2x1) </p>\n                    </div>\n                </div>\n            </div>);\n    }\n    count = 4;\n    onAdd() {\n        let proxy = this;\n        let panel = [{\n                \"id\": this.count.toString() + \"_layout\", \"sizeX\": 2, \"sizeY\": 2, \"row\": 0, \"col\": 0,\n                header: \"<div>Panel\" + this.count.toString() + \"</div>\", content: \"<div></div>\"\n            }];\n        this.count = this.count + 1;\n        proxy.dashboardObj.addPanel(panel[0]);\n    }\n    splineTemplate() {\n        let splineData1 = [\n            { x: new Date(2002, 0, 1), y: 2.2 }, { x: new Date(2003, 0, 1), y: 3.4 },\n            { x: new Date(2004, 0, 1), y: 2.8 }, { x: new Date(2005, 0, 1), y: 1.6 },\n            { x: new Date(2006, 0, 1), y: 2.3 }, { x: new Date(2007, 0, 1), y: 2.5 },\n            { x: new Date(2008, 0, 1), y: 2.9 }, { x: new Date(2009, 0, 1), y: 3.8 },\n            { x: new Date(2010, 0, 1), y: 1.4 }, { x: new Date(2011, 0, 1), y: 3.1 }\n        ];\n        let splineData2 = [\n            { x: new Date(2002, 0, 1), y: 2 }, { x: new Date(2003, 0, 1), y: 1.7 },\n            { x: new Date(2004, 0, 1), y: 1.8 }, { x: new Date(2005, 0, 1), y: 2.1 },\n            { x: new Date(2006, 0, 1), y: 2.3 }, { x: new Date(2007, 0, 1), y: 1.7 },\n            { x: new Date(2008, 0, 1), y: 1.5 }, { x: new Date(2009, 0, 1), y: 2.8 },\n            { x: new Date(2010, 0, 1), y: 1.5 }, { x: new Date(2011, 0, 1), y: 2.3 }\n        ];\n        return (<div className=\"template\">\n            <ChartComponent style={{ \"height\": \"100%\", \"width\": \"100%\", textAlign: \"center\" }} primaryXAxis={{\n                valueType: 'DateTime',\n                labelFormat: 'MMM',\n                majorGridLines: { width: 0 },\n                intervalType: 'Months',\n                edgeLabelPlacement: 'Shift'\n            }} primaryYAxis={{\n                labelFormat: '{value}%',\n                lineStyle: { width: 0 },\n                maximum: 4, interval: 1,\n                majorTickLines: { width: 0 },\n                minorTickLines: { width: 0 }\n            }} load={this.load.bind(this)} chartArea={{ border: { width: 0 } }}>\n                        <Inject services={[SplineAreaSeries, DateTime, Legend]}/>\n                        <SeriesCollectionDirective>\n                            <SeriesDirective dataSource={splineData1} xName='x' yName='y' name='Jan' opacity={0.5} type='SplineArea' width={2} fill='rgb(239, 183, 202)'>\n                            </SeriesDirective>\n                            <SeriesDirective dataSource={splineData2} xName='x' yName='y' name='Feb' opacity={0.5} type='SplineArea' width={2} fill='rgb(0, 189, 174)'>\n                            </SeriesDirective>\n                        </SeriesCollectionDirective>\n                    </ChartComponent>\n            </div>);\n    }\n    lineTemplate() {\n        let data1 = [{ x: 'Jan', y: 46 }, { x: 'Feb', y: 27 }, { x: 'Mar', y: 26 }];\n        let data2 = [{ x: 'Jan', y: 37 }, { x: 'Feb', y: 23 }, { x: 'Mar', y: 18 }];\n        let data3 = [{ x: 'Jan', y: 38 }, { x: 'Feb', y: 17 }, { x: 'Mar', y: 26 }];\n        return (<div className=\"template\">\n                <ChartComponent style={{ \"height\": \"100%\", \"width\": \"100%\" }} load={this.load.bind(this)} primaryXAxis={{ valueType: 'Category', interval: 1, majorGridLines: { width: 0 } }} primaryYAxis={{\n                majorGridLines: { width: 0 },\n                majorTickLines: { width: 0 }, lineStyle: { width: 0 }, labelStyle: { color: 'transparent' }\n            }} chartArea={{ border: { width: 0 } }} tooltip={{ enable: true }}>\n                        <Inject services={[ColumnSeries, Legend, Tooltip, Category, DataLabel]}/>\n                        <SeriesCollectionDirective>\n                            <SeriesDirective dataSource={data1} xName='x' yName='y' name='Jan' type='Column' marker={{ dataLabel: { visible: false } }} fill='#00bdae'>\n                            </SeriesDirective>\n                            <SeriesDirective dataSource={data2} xName='x' yName='y' name='Feb' type='Column' marker={{ dataLabel: { visible: false } }} fill='#e56691'>\n                            </SeriesDirective>\n                            <SeriesDirective dataSource={data3} xName='x' yName='y' name='Mar' type='Column' marker={{ dataLabel: { visible: false } }} fill='#357cd2'>\n                            </SeriesDirective>\n                        </SeriesCollectionDirective>\n                    </ChartComponent>\n            </div>);\n    }\n    pieTemplate() {\n        let pieData = [\n            { \"x\": \"Jan\", y: 12.5, text: \"January\" },\n            { \"x\": \"Feb\", y: 25, text: \"February\" },\n            { \"x\": \"Mar\", y: 50, text: \"March\" },\n        ];\n        let piePalette = [\"#00bdaed1\", \"#357cd2bf\", \"#e56691e8\"];\n        return (<div className=\"template\">\n            <AccumulationChartComponent style={{ \"height\": \"100%\", \"width\": \"100%\" }} legendSettings={{ visible: false }} enableSmartLabels={true} enableAnimation={true} center={{ x: '50%', y: '50%' }} load={this.Pieload.bind(this)} tooltip={{ enable: true, header: '<b>${point.x}</b>', format: 'Composition : <b>${point.y}%</b>' }}>\n              <Inject services={[AccumulationLegend, PieSeries, AccumulationTooltip, AccumulationDataLabel]}/>\n              <AccumulationSeriesCollectionDirective>\n                <AccumulationSeriesDirective dataSource={pieData} name='Earnings' xName='x' yName='y' dataLabel={{ visible: true, position: 'Inside', name: 'value', font: { fontWeight: '600' } }} radius='100%' innerRadius=\"40%\" palettes={['#00bdae', '#357cd2', '#e56691']}>\n                </AccumulationSeriesDirective>\n              </AccumulationSeriesCollectionDirective>\n            </AccumulationChartComponent>\n        </div>);\n    }\n    cellSpacing = [10, 10];\n    render() {\n        return (<div>\n                <div id='edit_target' className=\"control-section\">\n                <div>\n                    <div style={{ \"width\": \"100%\", \"marginBottom\": \"10px\", \"marginTop\": \"10px\", \"height\": \"30px\" }}>\n                        <ButtonComponent id=\"togglebtn\" cssClass='e-outline e-flat e-primary' ref={(scope) => { this.btnobj = scope; }} iconCss='edit' isToggle={true} onClick={this.btnClick.bind(this)} style={{ \"float\": \"right\", \"width\": \"75px\" }}>\n                            Edit\n                        </ButtonComponent>\n                    </div>\n                    <div style={{ \"padding\": \"5px\", \"marginBottom\": \"5px\", \"textAlign\": \"end\" }}>\n                        <div id=\"dialogBtn\" className=\"add-widget-button e-control e-btn e-lib\" onClick={this.dlgClick.bind(this)}>\n                            Add New Widget\n                        </div>\n                    </div>\n                </div>\n                <DashboardLayoutComponent id=\"edit_dashboard\" columns={2} cellSpacing={this.cellSpacing} ref={(scope) => { this.dashboardObj = scope; }} resizeStop={this.onPanelResize.bind(this)} allowResizing={false} allowDragging={false}>\n                <PanelsDirective>\n                    <PanelDirective sizeX={1} sizeY={1} row={0} col={0} content={this.lineTemplate.bind(this)} header=\"<div>Line Chart</div>\"></PanelDirective>\n                    <PanelDirective sizeX={1} sizeY={1} row={0} col={1} content={this.pieTemplate.bind(this)} header=\"<div>Pie Chart</div>\"></PanelDirective>\n                    <PanelDirective sizeX={2} sizeY={1} row={1} col={0} content={this.splineTemplate.bind(this)} header=\"<div>Spline Chart</div>\"></PanelDirective>\n                </PanelsDirective>\n                </DashboardLayoutComponent>\n                </div>\n                <DialogComponent id=\"listdialog\" width=\"500px\" height=\"260px\" visible={false} header={\"Add a widget\"} showCloseIcon={true} animationSettings={{ effect: 'Zoom' }} isModal={true} target='#edit_target' ref={(scope) => { this.dialogObj = scope; }} content={this.content}>\n                </DialogComponent>\n            </div>);\n    }\n    dlgClick() {\n        this.dialogObj.visible = true;\n        document.getElementById('linetemplate').onclick = () => {\n            let countValue = this.count.toString();\n            let panel = [{\n                    'id': '_layout' + countValue, 'sizeX': 1, 'sizeY': 1, 'row': 0, 'col': 0,\n                    header: '<div>Line Chart</div>', content: this.lineTemplate.bind(this)\n                }];\n            this.count = this.count + 1;\n            this.dashboardObj.addPanel(panel[0]);\n            this.dialogObj.visible = false;\n            setTimeout(function () {\n                document.getElementById(\"_layout\" + countValue).querySelector(\".e-control.e-chart\").ej2_instances[0].refresh();\n            }, 20);\n        };\n        document.getElementById('pietemplate').onclick = () => {\n            let countValue = this.count.toString();\n            let panel = [{\n                    'id': '_layout' + countValue, 'sizeX': 1, 'sizeY': 1, 'row': 0, 'col': 0,\n                    header: '<div>Pie Chart</div>', content: this.pieTemplate.bind(this)\n                }];\n            this.count = this.count + 1;\n            this.dashboardObj.addPanel(panel[0]);\n            this.dialogObj.visible = false;\n            setTimeout(function () {\n                document.getElementById(\"_layout\" + countValue).querySelector(\".e-control.e-accumulationchart\").ej2_instances[0].refresh();\n            }, 20);\n        };\n        document.getElementById('splinetemplate').onclick = () => {\n            let countValue = this.count.toString();\n            let panel = [{\n                    'id': '_layout' + countValue, 'sizeX': 2, 'sizeY': 1, 'row': 0, 'col': 0,\n                    header: '<div>Spline Chart</div>', content: this.splineTemplate.bind(this)\n                }];\n            this.count = this.count + 1;\n            this.dashboardObj.addPanel(panel[0]);\n            this.dialogObj.visible = false;\n            setTimeout(function () {\n                document.getElementById(\"_layout\" + countValue).querySelector(\".e-control.e-chart\").ej2_instances[0].refresh();\n            }, 20);\n        };\n    }\n    load(args) {\n        let selectedTheme = location.hash.split('/')[1];\n        selectedTheme = selectedTheme ? selectedTheme : 'Material';\n        args.chart.theme = (selectedTheme.charAt(0).toUpperCase() + selectedTheme.slice(1)).replace(/-dark/i, \"Dark\");\n    }\n    ;\n    Pieload(args) {\n        let selectedTheme = location.hash.split('/')[1];\n        selectedTheme = selectedTheme ? selectedTheme : 'Material';\n        args.accumulation.theme = (selectedTheme.charAt(0).toUpperCase() + selectedTheme.slice(1)).replace(/-dark/i, \"Dark\");\n    }\n}\n\nconst root = createRoot(document.getElementById('sample'));\nroot.render(<DynamicWidget />);","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n                this.rendereComplete();\n            });\n        }\n    }\n    export function updateSampleSection(){}\n    ","dependencies":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-react-base\":\"*\",\"@syncfusion/ej2-layouts\":\"*\",\"@syncfusion/ej2-react-layouts\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-react-buttons\":\"*\",\"@syncfusion/ej2-popups\":\"*\",\"@syncfusion/ej2-react-popups\":\"*\",\"@syncfusion/ej2-charts\":\"*\",\"@syncfusion/ej2-react-charts\":\"*\",\"@syncfusion/ej2/base\":\"*\",\"@syncfusion/ej2-charts'; // Import the necessary types from Syncfusion\":\"*\"}"}