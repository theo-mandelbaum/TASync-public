{"index.css":"    \n    #api_property .form-label {\n        margin-bottom: 0;\n        font-size: 12px;\n        line-height: 1.5;\n        font-size: 13px;\n        font-weight: 500;\n    }\n\n    #api_property .row .e-btn {\n        display: inline;\n    }\n\n    #api_dashboard {\n        padding: 10px;\n        width: 100%;\n    }\n    #api_dashboard .panel-content {\n        vertical-align: middle;\n        font-size: 15px;\n        font-size: 15px;\n        font-weight: 500;\n        color: rgba(0, 0, 0, 0.61);\n        text-align: center;\n    }\n\n    #api_dashboard .e-panel-content {\n        height: calc(100% - 28px);\n        width: 100%;\n        display: block;\n    }\n    \n    #api_dashboard .e-panel .e-header-text {\n        padding: 12px 0 12px 0;\n    }\n    \n    #api_dashboard.e-dashboardlayout.e-control .e-panel .e-panel-header {\n        font-size: 15px;\n        font-weight: 500;\n        height: 37px;\n        padding: 10px;\n        vertical-align: middle;\n        background-color: rgba(0, 0, 0, .03);\n        border-bottom: 0.5px solid #e3e3e3;\n    }\n    \n    #api_property .row {\n        margin-left: 0px;\n        margin-right: 0px;\n    }\n    \n    #api_property .row-header {\n        font-size: 13px;\n        font-weight: 500;\n    }\n    \n    #api_dashboard .e-panel-content {\n        padding: 15px;\n    }\n    \n    #api_dashboard #reset {\n        display: block;\n        margin: 0 auto;\n        width: 90px;\n    }\n    \n    div#control_dash {\n        border: 1px solid lightgray;\n    }\n    \n    .property-section.dashboard .e-input-group.e-control-wrapper {\n        width:122px;\n    }\n","index.html":"<!DOCTYPE html>\n<html>\n<head>\n    <title>Syncfusion React Sample</title>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\n    <meta name=\"author\" content=\"Syncfusion\" />\n    <link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\n</head>\n\n<body class=\"{{theme}}\">\n     <style>\n            .control-section\n            {\n                margin-top: 100px;\n            }\n    </style>\n    <div id='sample'>\n</body>\n</html>\n","index.js":"import { createRoot } from 'react-dom/client';\nimport './index.css';\nimport * as React from 'react';\nimport { useEffect, useState, useRef } from 'react';\n\nimport { DashboardLayoutComponent, PanelsDirective, PanelDirective } from '@syncfusion/ej2-react-layouts';\nimport { ButtonComponent, CheckBoxComponent } from '@syncfusion/ej2-react-buttons';\nimport { NumericTextBoxComponent } from '@syncfusion/ej2-react-inputs';\n\nconst Properties = () => {\n    const [isResize, setIsResize] = useState(true);\n    const [isFloat, setIsFloat] = useState(true);\n    const [cellSpace, setCellSpace] = useState([5, 5]);\n    let count = 5;\n    let dashboardObj = useRef(null);\n    const onAdd = () => {\n        count = count + 1;\n        let panel = [{\n                'id': count.toString() + '_layout', 'sizeX': 2, 'sizeY': 2, 'row': 0, 'col': 0,\n                header: '<div>Panel ' + count.toString() + '</div>', content: '<div></div>'\n            }];\n        dashboardObj.current.addPanel(panel[0]);\n    };\n    const remove = () => {\n        if (dashboardObj.current.panels.length > 0) {\n            for (let i = dashboardObj.current.panels.length - 1; i < dashboardObj.current.panels.length; i++) {\n                dashboardObj.current.removePanel(dashboardObj.current.panels[dashboardObj.current.panels.length - 1 - i].id);\n            }\n        }\n    };\n    const onCellChange = (args) => {\n        setCellSpace([parseInt(args.value, 10), parseInt(args.value, 10)]);\n    };\n    const onChange = (args) => {\n        if (args.event.currentTarget.firstChild.childNodes[0].id === 'floating') {\n            setIsFloat(args.checked);\n        }\n        if (args.event.currentTarget.firstChild.childNodes[0].id === 'resizing') {\n            setIsResize(args.checked);\n        }\n    };\n    const onCreate = () => {\n        if (document.querySelector('.container-fluid.custom')) {\n            document.querySelector('.container-fluid').classList.remove('custom');\n        }\n    };\n    return (<div>\r\n            <div className=\"col-lg-8 control-section\" id=\"control_dash\">\r\n                <div className=\"content-wrapper\" style={{ \"maxWidth\": \"100%\" }}>\r\n                <DashboardLayoutComponent created={onCreate.bind(this)} id=\"api_dashboard\" columns={6} cellSpacing={cellSpace} ref={dashboardObj} allowResizing={isResize} allowFloating={isFloat}>\r\n                    <PanelsDirective>\r\n                        <PanelDirective header=\"<div>Panel 1</div>\" content=\"<div></div>\" sizeX={2} sizeY={2} row={0} col={0}></PanelDirective>\r\n                        <PanelDirective header=\"<div>Panel 2</div>\" content=\"<div></div>\" sizeX={2} sizeY={2} row={0} col={2}></PanelDirective>\r\n                        <PanelDirective header=\"<div>Panel 3</div>\" content=\"<div></div>\" sizeX={2} sizeY={2} row={0} col={4}></PanelDirective>\r\n                        <PanelDirective header=\"<div>Panel 4</div>\" content=\"<div></div>\" sizeX={4} sizeY={2} row={2} col={0}></PanelDirective>\r\n                        <PanelDirective header=\"<div>Panel 5</div>\" content=\"<div></div>\" sizeX={2} sizeY={2} row={2} col={4}></PanelDirective>\r\n                    </PanelsDirective>\r\n                </DashboardLayoutComponent>\r\n                </div>\r\n            </div>\r\n            <div className=\"col-lg-4 property-section dashboard\" id=\"api_property\">\r\n                <div className=\"property-panel-header\"> Properties </div>\r\n                <div className=\"row property-panel-content\">\r\n                    <div className=\"card-body\">\r\n                        <div className=\"form-group row\">\r\n                            <label className=\"col-sm-4 col-form-label form-label\">CellSpacing</label>\r\n                            <span className=\"col-sm-8\">\r\n                                <NumericTextBoxComponent className=\"col-sm-4\" type=\"text\" placeholder={\"Ex: 10\"} value={10} min={1} max={20} floatLabelType=\"Never\" id=\"cellSpacing\" change={onCellChange.bind(this)}/>\r\n                            </span>\r\n                        </div>\r\n                        <div className=\"form-group row\">\r\n                            <label className=\"col-sm-4 col-form-label form-label\">AllowFloating</label>\r\n                            <span className=\"col-sm-8\">\r\n                                <CheckBoxComponent className=\"col-sm-8\" name=\"floating\" id=\"floating\" checked={true} change={onChange.bind(this)}/>\r\n                            </span>\r\n                        </div>\r\n                        <div className=\"form-group row\">\r\n                            <label className=\"col-sm-4 col-form-label form-label\">AllowResizing</label>\r\n                            <span className=\"col-sm-8\">\r\n                                <CheckBoxComponent name=\"resizing\" id=\"resizing\" checked={true} change={onChange.bind(this)}/>\r\n                            </span>\r\n                        </div>\r\n                        <div className=\"form-group row\">\r\n                            <div className=\"col-sm-12\">\r\n                                <ButtonComponent onClick={onAdd.bind(this)} cssClass=\"e-primary\">Add Panel</ButtonComponent>\r\n                                <ButtonComponent onClick={remove.bind(this)} cssClass=\"e-danger\" style={{ \"marginLeft\": \"3px\" }}>Remove Panel</ButtonComponent>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>);\n};\nexport default Properties;\n\nconst root = createRoot(document.getElementById('sample'));\nroot.render(<Properties />);","dependencies":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-react-base\":\"*\",\"@syncfusion/ej2-layouts\":\"*\",\"@syncfusion/ej2-react-layouts\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-react-buttons\":\"*\",\"@syncfusion/ej2-inputs\":\"*\",\"@syncfusion/ej2-react-inputs\":\"*\",\"@syncfusion/ej2-react-charts\":\"*\",\"@syncfusion/ej2/base\":\"*\",\"@syncfusion/ej2-charts'; // Import the necessary types from Syncfusion\":\"*\"}"}