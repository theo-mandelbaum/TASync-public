{"index.css":".api-otp-wrapper {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    padding-top: 20px;\n    padding-bottom: 20px;\n    min-height: 350px;\n}\n\n#otp-container {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    width: 50%;\n}\n\n.form-container {\n    height: 220px;\n    padding: 1rem 3rem;\n    box-shadow: 0 1px 3px #d4d4d5, 0 0 0 1px #d4d4d5;\n    border-radius: 4px;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n}\n\n.form-container>div {\n    margin: 17px 0px;\n}\n\n.form-container .otp-header {\n    display: inline-block;\n    font-size: 1.4em;\n    font-weight: 500;\n    margin: 10px 0px;\n}\n\n.form-container .otp-actions {\n    display: flex;\n    gap: 20px;\n}\n\n.otp-actions button {\n    width: 80px;\n}\n\n.property-panel-content td {\n    padding: 10px 0px;\n    width: 35%;\n}","property-pane.js":"import * as ReactDOM from 'react-dom';\nimport * as React from 'react';\nimport { select } from '@syncfusion/ej2-base';\nexport class PropertyPane extends React.Component {\n    render() {\n        const mobilePropPane = select('.sb-mobile-prop-pane');\n        const isMobile = window.matchMedia('(max-width:550px)').matches;\n        return isMobile && mobilePropPane ?\n            ReactDOM.createPortal(<div className='property-panel-section'>\n                    <div className=\"property-panel-header\">\n                        {this.props.title}\n                    </div>\n                    <div className=\"property-panel-content\">\n                        {this.props.children}\n                    </div>\n                </div>, mobilePropPane)\n            :\n                (<div className='property-panel-section'>\n                    <div className=\"property-panel-header\">\n                        {this.props.title}\n                    </div>\n                    <div className=\"property-panel-content\">\n                        {this.props.children}\n                    </div>\n                </div>);\n    }\n}\n","index.html":"<!DOCTYPE html>\n<html>\n<head>\n    <title>Syncfusion React Sample</title>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\n    <meta name=\"author\" content=\"Syncfusion\" />\n    <link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\n</head>\n\n<body class=\"{{theme}}\">\n     <style>\n            .control-section\n            {\n                margin-top: 100px;\n            }\n    </style>\n    <div id='sample'>\n</body>\n</html>\n","index.js":"import { createRoot } from 'react-dom/client';\nimport './index.css';\nimport * as React from 'react';\nimport { OtpInputComponent, NumericTextBoxComponent } from '@syncfusion/ej2-react-inputs';\nimport { SampleBase } from './sample-base';\nimport { PropertyPane } from './property-pane';\n\nimport { SwitchComponent } from '@syncfusion/ej2-react-buttons';\nimport { DropDownListComponent } from '@syncfusion/ej2-react-dropdowns';\nexport class OtpAPI extends SampleBase {\n    constructor(props) {\n        super(props);\n        this.state = {\n            separator: \"-\",\n            placeholder: \"X\",\n            length: 4,\n            disabled: false,\n            modeValue: \"outlined\",\n            validationValue: \"\",\n            resetDisabled: true,\n            verifyDisabled: true\n        };\n    }\n    modeData = [\n        { Mode: 'outlined', Text: 'Outlined' },\n        { Mode: 'underlined', Text: 'Underlined' },\n        { Mode: 'filled', Text: 'Filled' }\n    ];\n    fields = { value: 'Mode', text: 'Text' };\n    validationData = [\n        { Status: '', Text: 'None' },\n        { Status: 'e-success', Text: 'Success' },\n        { Status: 'e-warning', Text: 'Warning' },\n        { Status: 'e-error', Text: 'Error' }\n    ];\n    validationFields = { value: 'Status', text: 'Text' };\n    otpRef = null;\n    handleOtpChange(event) {\n        const otpLength = event.value.toString().length;\n        this.setState({ verifyDisabled: otpLength !== this.state.length });\n        this.setState({ resetDisabled: !otpLength });\n    }\n    handleResetClick() {\n        if (this.otpRef) {\n            this.otpRef.value = \"\";\n        }\n        this.setState({ verifyDisabled: true });\n        this.setState({ resetDisabled: true });\n    }\n    ;\n    handleVerifyClick() {\n        if (this.otpRef) {\n            alert(`Entered OTP value is : ${this.otpRef.value}`);\n        }\n    }\n    ;\n    render() {\n        return (<div className='control-pane'>\n                <div className='control-section'>\n                    <div className=\"col-lg-8\">\n                    <div className=\"api-otp-wrapper\">\n                        <div id=\"otp-container\">\n                            <div className=\"form-container\">\n                                <span className=\"otp-header\"> Enter verification code </span>\n                                <OtpInputComponent ref={def => { this.otpRef = def; }} separator={this.state.separator} placeholder={this.state.placeholder} disabled={this.state.disabled} length={this.state.length} cssClass={this.state.validationValue} stylingMode={this.state.modeValue} input={this.handleOtpChange.bind(this)}>\n                                </OtpInputComponent>\n                                <div className=\"otp-actions\">\n                                    <button className=\"e-btn\" type=\"button\" disabled={this.state.resetDisabled} onClick={this.handleResetClick.bind(this)}> Clear </button>\n                                    <button className=\"e-btn e-primary\" type=\"button\" disabled={this.state.verifyDisabled} onClick={this.handleVerifyClick.bind(this)}> Verify </button>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                    </div>\n                    <div className=\"col-lg-4 property-section\">\n                        <PropertyPane title='Properties'>\n                            <table id=\"property\" title=\"Properties\">\n                                <tbody>\n                                    <tr>\n                                        <td> Styling Mode </td>\n                                        <td>\n                                            <DropDownListComponent dataSource={this.modeData} fields={this.fields} value={this.state.modeValue} change={(args) => this.setState({ modeValue: args.value })}/>\n                                        </td>\n                                    </tr>\n                                    <tr>\n                                        <td> Validation Status </td>\n                                        <td>\n                                            <DropDownListComponent dataSource={this.validationData} fields={this.validationFields} value={this.state.validationValue} change={(args) => this.setState({ validationValue: args.value })}/>\n                                        </td>\n                                    </tr>\n                                    <tr>\n                                        <td> Placeholder </td>\n                                        <td> <input className='e-input' type=\"text\" value={this.state.placeholder} maxLength={this.state.length} onInput={(args) => this.setState({ placeholder: args.target.value })}/> </td>\n                                    </tr>\n                                    <tr>\n                                        <td> Separator </td>\n                                        <td> <input className='e-input' type=\"text\" value={this.state.separator} maxLength={1} onInput={(args) => this.setState({ separator: args.target.value })}/> </td>\n                                    </tr>\n                                    <tr>\n                                        <td> Length </td>\n                                        <td> <NumericTextBoxComponent min={1} max={6} format=\"0\" value={this.state.length} change={(args) => this.setState({ length: args.value | 1 })}/> </td>\n                                    </tr>\n                                    <tr>\n                                        <td> Disabled </td>\n                                        <td> <SwitchComponent checked={this.state.disabled} change={(args) => this.setState({ disabled: args.checked })}/> </td>\n                                    </tr>\n                                </tbody>\n                            </table>\n                        </PropertyPane>\n                    </div>\n\n                </div>\n            </div>);\n    }\n}\n\nconst root = createRoot(document.getElementById('sample'));\nroot.render(<OtpAPI />);","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n                this.rendereComplete();\n            });\n        }\n    }\n    export function updateSampleSection(){}\n    ","dependencies":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-react-base\":\"*\",\"@syncfusion/ej2-inputs\":\"*\",\"@syncfusion/ej2-react-inputs\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-react-buttons\":\"*\",\"@syncfusion/ej2-dropdowns\":\"*\",\"@syncfusion/ej2-react-dropdowns\":\"*\",\"@syncfusion/ej2-react-charts\":\"*\",\"@syncfusion/ej2/base\":\"*\",\"@syncfusion/ej2-charts'; // Import the necessary types from Syncfusion\":\"*\",\"@syncfusion/ej2-lists\":\"*\",\"@syncfusion/ej2-documenteditor\":\"*\",\"@syncfusion/ej2-splitbuttons\":\"*\",\"@syncfusion/ej2-navigations\":\"*\",\"@syncfusion/ej2-react-popups\":\"*\"}"}