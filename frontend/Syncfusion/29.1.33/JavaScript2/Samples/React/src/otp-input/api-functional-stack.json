{"index.css":".api-otp-wrapper {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    padding-top: 20px;\n    padding-bottom: 20px;\n    min-height: 350px;\n}\n\n#otp-container {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    width: 50%;\n}\n\n.form-container {\n    height: 220px;\n    padding: 1rem 3rem;\n    box-shadow: 0 1px 3px #d4d4d5, 0 0 0 1px #d4d4d5;\n    border-radius: 4px;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n}\n\n.form-container>div {\n    margin: 17px 0px;\n}\n\n.form-container .otp-header {\n    display: inline-block;\n    font-size: 1.4em;\n    font-weight: 500;\n    margin: 10px 0px;\n}\n\n.form-container .otp-actions {\n    display: flex;\n    gap: 20px;\n}\n\n.otp-actions button {\n    width: 80px;\n}\n\n.property-panel-content td {\n    padding: 10px 0px;\n    width: 35%;\n}","property-pane.js":"import * as ReactDOM from 'react-dom';\nimport * as React from 'react';\nimport { select } from '@syncfusion/ej2-base';\nexport class PropertyPane extends React.Component {\n    render() {\n        const mobilePropPane = select('.sb-mobile-prop-pane');\n        const isMobile = window.matchMedia('(max-width:550px)').matches;\n        return isMobile && mobilePropPane ?\n            ReactDOM.createPortal(<div className='property-panel-section'>\n                    <div className=\"property-panel-header\">\n                        {this.props.title}\n                    </div>\n                    <div className=\"property-panel-content\">\n                        {this.props.children}\n                    </div>\n                </div>, mobilePropPane)\n            :\n                (<div className='property-panel-section'>\n                    <div className=\"property-panel-header\">\n                        {this.props.title}\n                    </div>\n                    <div className=\"property-panel-content\">\n                        {this.props.children}\n                    </div>\n                </div>);\n    }\n}\n","index.html":"<!DOCTYPE html>\n<html>\n<head>\n    <title>Syncfusion React Sample</title>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\n    <meta name=\"author\" content=\"Syncfusion\" />\n    <link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\n</head>\n\n<body class=\"{{theme}}\">\n     <style>\n            .control-section\n            {\n                margin-top: 100px;\n            }\n    </style>\n    <div id='sample'>\n</body>\n</html>\n","index.js":"import { createRoot } from 'react-dom/client';\nimport './index.css';\nimport * as React from 'react';\nimport { useEffect, useState } from 'react';\nimport { OtpInputComponent, NumericTextBoxComponent } from '@syncfusion/ej2-react-inputs';\n\nimport { SwitchComponent } from '@syncfusion/ej2-react-buttons';\nimport { PropertyPane } from './property-pane';\nimport { DropDownListComponent } from '@syncfusion/ej2-react-dropdowns';\n\nconst Default = () => {\n    const [separator, setSeparator] = useState(\"-\");\n    const [placeholder, setPlaceholder] = useState(\"X\");\n    const [length, setLength] = useState(4);\n    const [disabled, setDisabled] = useState(false);\n    const [validationValue, setValidationvalue] = useState(\"\");\n    const [modeValue, setModevalue] = useState(\"outlined\");\n    const [verifyDisabled, setVerifyDisabled] = useState(true);\n    const [resetDisabled, setResetDisabled] = useState(true);\n    const modeData = [\n        { Mode: 'outlined', Text: 'Outlined' },\n        { Mode: 'underlined', Text: 'Underlined' },\n        { Mode: 'filled', Text: 'Filled' }\n    ];\n    const modeFields = { value: 'Mode', text: 'Text' };\n    const validationData = [\n        { Status: '', Text: 'None' },\n        { Status: 'e-success', Text: 'Success' },\n        { Status: 'e-warning', Text: 'Warning' },\n        { Status: 'e-error', Text: 'Error' }\n    ];\n    const validationFields = { value: 'Status', text: 'Text' };\n    const otpRef = React.useRef(null);\n    function handleOtpChange(event) {\n        const otpLength = event.value.toString().length;\n        setVerifyDisabled(otpLength !== length);\n        setResetDisabled(!otpLength);\n    }\n    const handleResetClick = () => {\n        if (otpRef && otpRef.current) {\n            otpRef.current.value = \"\";\n        }\n        setVerifyDisabled(true);\n        setResetDisabled(true);\n    };\n    const handleVerifyClick = () => {\n        if (otpRef && otpRef.current) {\n            alert(`Entered OTP value is : ${otpRef.current.value}`);\n        }\n    };\n    return (<div className='control-pane'>\n            <div className='control-section'>\n                <div className=\"col-lg-8\">\n                <div className=\"api-otp-wrapper\">\n                    <div id=\"otp-container\">\n                        <div className=\"form-container\">\n                            <span className=\"otp-header\"> Enter verification code </span>\n                            <OtpInputComponent ref={otpRef} separator={separator} placeholder={placeholder} disabled={disabled} length={length} cssClass={validationValue} stylingMode={modeValue} input={handleOtpChange}>\n                            </OtpInputComponent>\n                            <div className=\"otp-actions\">\n                                <button className=\"e-btn\" type=\"button\" disabled={resetDisabled} onClick={handleResetClick}> Clear </button>\n                                <button className=\"e-btn e-primary\" type=\"button\" disabled={verifyDisabled} onClick={handleVerifyClick}> Verify </button>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                </div>\n                <div className=\"col-lg-4 property-section\">\n                    <PropertyPane title='Properties'>\n                        <table id=\"property\" title=\"Properties\">\n                            <tbody>\n                                <tr>\n                                    <td> Styling Mode </td>\n                                    <td>\n                                        <DropDownListComponent dataSource={modeData} fields={modeFields} value={modeValue} change={(args) => setModevalue(args.value)}> </DropDownListComponent>\n                                    </td>\n                                </tr>\n                                <tr>\n                                    <td> Validation Status </td>\n                                    <td>\n                                        <DropDownListComponent dataSource={validationData} fields={validationFields} value={validationValue} change={(args) => setValidationvalue(args.value)}> </DropDownListComponent>\n                                    </td>\n                                </tr>\n                                <tr>\n                                    <td> Placeholder </td>\n                                    <td>\n                                        <input className='e-input' value={placeholder} maxLength={length} onInput={(args) => setPlaceholder(args.target.value)}/>\n                                    </td>\n                                </tr>\n                                <tr>\n                                    <td> Separator </td>\n                                    <td> <input className='e-input' value={separator} maxLength={1} onInput={(args) => setSeparator(args.target.value)}/> </td>\n                                </tr>\n                                <tr>\n                                    <td> Length </td>\n                                    <td> <NumericTextBoxComponent min={1} max={6} value={length} format='0' change={(args) => setLength(args.value || 1)}> </NumericTextBoxComponent> </td>\n                                </tr>\n                                <tr>\n                                    <td> Disabled </td>\n                                    <td> <SwitchComponent checked={disabled} change={(args) => setDisabled(args.checked)}> </SwitchComponent> </td>\n                                </tr>\n                            </tbody>\n                        </table>\n                    </PropertyPane>\n                </div>\n\n            </div>\n        </div>);\n};\nexport default Default;\n\nconst root = createRoot(document.getElementById('sample'));\nroot.render(<Default />);","dependencies":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-react-base\":\"*\",\"@syncfusion/ej2-inputs\":\"*\",\"@syncfusion/ej2-react-inputs\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-react-buttons\":\"*\",\"@syncfusion/ej2-dropdowns\":\"*\",\"@syncfusion/ej2-react-dropdowns\":\"*\",\"@syncfusion/ej2-react-charts\":\"*\",\"@syncfusion/ej2/base\":\"*\",\"@syncfusion/ej2-charts'; // Import the necessary types from Syncfusion\":\"*\",\"@syncfusion/ej2-lists\":\"*\",\"@syncfusion/ej2-documenteditor\":\"*\",\"@syncfusion/ej2-splitbuttons\":\"*\",\"@syncfusion/ej2-navigations\":\"*\",\"@syncfusion/ej2-react-popups\":\"*\"}"}