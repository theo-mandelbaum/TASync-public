{"index.css":".inplace-control-section.drop-down-layout .control_wrapper  label {\n    padding: 15px;\n    text-align: left;\n    font-weight: 400;\n    font-size: 14px;\n    margin-bottom: 0px;\n}\n\n.inplace-control-section.drop-down-layout .control_wrapper {\n    margin: auto;\n    max-width: 400px;\n}\n\n.inplace-control-section.drop-down-layout .control_wrapper table {\n    margin: auto;\n}\n\n.inplace-control-section.drop-down-layout .control_wrapper table td {\n    width: 200px;\n    height: 100px;\n}\n\n#dropdownProperty table td {\n    width: 50%;\n}\n\n#dropdownProperty .property-panel-table div {\n    padding-left: 10px;\n    padding-top: 10px;\n}\n\n.inplace-control-section.drop-down-layout .e-inplaceeditor .e-editable-component .e-clear-icon-hide,\n.e-inplaceeditor-tip .e-editable-component  .e-input-group .e-clear-icon.e-clear-icon-hide {\n    display: block;\n    visibility: hidden;\n}","property-pane.js":"import * as ReactDOM from 'react-dom';\nimport * as React from 'react';\nimport { select } from '@syncfusion/ej2-base';\nexport class PropertyPane extends React.Component {\n    render() {\n        const mobilePropPane = select('.sb-mobile-prop-pane');\n        const isMobile = window.matchMedia('(max-width:550px)').matches;\n        return isMobile && mobilePropPane ?\n            ReactDOM.createPortal(<div className='property-panel-section'>\n                    <div className=\"property-panel-header\">\n                        {this.props.title}\n                    </div>\n                    <div className=\"property-panel-content\">\n                        {this.props.children}\n                    </div>\n                </div>, mobilePropPane)\n            :\n                (<div className='property-panel-section'>\n                    <div className=\"property-panel-header\">\n                        {this.props.title}\n                    </div>\n                    <div className=\"property-panel-content\">\n                        {this.props.children}\n                    </div>\n                </div>);\n    }\n}\n","index.html":"<!DOCTYPE html>\n<html>\n<head>\n    <title>Syncfusion React Sample</title>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\n    <meta name=\"author\" content=\"Syncfusion\" />\n    <link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\n</head>\n\n<body class=\"{{theme}}\">\n     <style>\n            .control-section\n            {\n                margin-top: 100px;\n            }\n    </style>\n    <div id='sample'>\n</body>\n</html>\n","index.js":"import { createRoot } from 'react-dom/client';\nimport './index.css';\nimport * as React from 'react';\nimport { PropertyPane } from './property-pane';\nimport { DropDownListComponent } from '@syncfusion/ej2-react-dropdowns';\nimport { InPlaceEditorComponent, Inject, AutoComplete, MultiSelect, ComboBox } from '@syncfusion/ej2-react-inplace-editor';\n\n\n// tslint:disable:max-line-length\nfunction DropDowns() {\n    let editObj;\n    let multiObj;\n    let comboObbj;\n    let dropObj;\n    let editorMode;\n    let popupSettings = { model: { width: 'auto' } };\n    let multiValue = ['Canada', 'Bermuda'];\n    // define the array of string\n    let dropDownData = ['Australia', 'Bermuda', 'Canada', 'Cameroon', 'Denmark', 'Finland', 'Greenland', 'Poland'];\n    let dropDownModel = { dataSource: dropDownData, placeholder: 'Find a country' };\n    let autoCompleteModel = { dataSource: dropDownData, placeholder: ' Type to search country' };\n    let comboBoxModel = { dataSource: dropDownData, placeholder: 'Find a country' };\n    let multiSelectModel = { dataSource: dropDownData, placeholder: 'Choose the countries', mode: 'Box', width: 150 };\n    // Mapping DropDownList dataSource property\n    let editorData = [\n        { 'value': 'Inline', 'text': 'Inline' }, { 'value': 'Popup', 'text': 'Popup' }\n    ];\n    // Mapping DropDownList fields property\n    let dropDownFields = { text: 'text', value: 'value' };\n    // Mapping DropDownList value property\n    let dropDownVal = 'Inline';\n    // Change event funtion for DropDownList component   \n    function changeEditorMode(e) {\n        let mode = editorMode.value;\n        editObj.mode = mode;\n        multiObj.mode = mode;\n        comboObbj.mode = mode;\n        dropObj.mode = mode;\n        editObj.dataBind();\n        multiObj.dataBind();\n        comboObbj.dataBind();\n        dropObj.dataBind();\n    }\n    function rendereComplete() {\n        let rightPane = document.getElementById('right-pane');\n        if (rightPane) {\n            rightPane.addEventListener('scroll', scrollRightPane);\n        }\n    }\n    function componentWillUnmount() {\n        let rightPane = document.getElementById('right-pane');\n        if (rightPane) {\n            rightPane.removeEventListener('scroll', scrollRightPane);\n        }\n    }\n    function scrollRightPane() {\n        let mode = document.getElementById('editorMode');\n        if (mode && mode.value === 'Inline') {\n            return;\n        }\n        if (editObj && (editObj.element.querySelectorAll('.e-editable-open').length > 0)) {\n            editObj.enableEditMode = false;\n        }\n        if (multiObj && (multiObj.element.querySelectorAll('.e-editable-open').length > 0)) {\n            multiObj.enableEditMode = false;\n        }\n        if (dropObj && (dropObj.element.querySelectorAll('.e-editable-open').length > 0)) {\n            dropObj.enableEditMode = false;\n        }\n        if (comboObbj && (comboObbj.element.querySelectorAll('.e-editable-open').length > 0)) {\n            comboObbj.enableEditMode = false;\n        }\n    }\n    return (<div className='control-pane'>\n                <div className=\"col-lg-8 control-section inplace-control-section drop-down-layout\">\n                    <div className=\"control_wrapper\">\n                        <table>\n                            <thead>\n                                <tr>\n                                <th></th>\n                                <th></th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                <tr>\n                                    <td>\n                                        <label className=\"control-label\">\n                                            DropDownList </label>\n                                    </td>\n                                    <td>\n                                        <InPlaceEditorComponent ref={(drop) => { dropObj = drop; }} id='dropdownEle' mode='Inline' type='DropDownList' value='Canada' model={dropDownModel}>\n                                        </InPlaceEditorComponent>\n                                    </td>\n                                </tr>\n                                <tr>\n                                    <td>\n                                        <label className=\"control-label\">\n                                            AutoComplete </label>\n                                    </td>\n                                    <td>\n                                        <InPlaceEditorComponent ref={(edit) => { editObj = edit; }} id='autoCompleteEle' mode='Inline' type='AutoComplete' value='Australia' model={autoCompleteModel}>\n                                            <Inject services={[AutoComplete]}/>\n                                        </InPlaceEditorComponent>\n                                    </td>\n                                </tr>\n                                <tr>\n                                    <td>\n                                        <label className=\"control-label\">\n                                            ComboBox </label>\n                                    </td>\n                                    <td>\n                                        <InPlaceEditorComponent ref={(combo) => { comboObbj = combo; }} id='comboBoxEle' mode='Inline' type='ComboBox' value='Finland' model={comboBoxModel}>\n                                            <Inject services={[ComboBox]}/>\n                                        </InPlaceEditorComponent>\n                                    </td>\n                                </tr>\n                                <tr>\n                                    <td>\n                                        <label className=\"control-label\">\n                                            MultiSelect </label>\n                                    </td>\n                                    <td>\n                                        <InPlaceEditorComponent ref={(multi) => { multiObj = multi; }} id='multiSelectEle' mode='Inline' type='MultiSelect' value={multiValue} model={multiSelectModel} popupSettings={popupSettings}>\n                                            <Inject services={[MultiSelect]}/>\n                                        </InPlaceEditorComponent>\n                                    </td>\n                                </tr>\n                            </tbody>\n                        </table>\n                    </div>\n                </div>\n                <div className='col-lg-4 property-section' id=\"dropdownProperty\">\n                    <PropertyPane title='Properties'>\n                        <table id=\"property\" title=\"Properties\" className=\"property-panel-table\">\n                            <tbody>\n                                <tr>\n                                    <td>\n                                        <div>Mode</div>\n                                    </td>\n                                    <td>\n                                        <div>\n                                            {/* Render the DropDownList Component */}\n                                            <DropDownListComponent ref={(drop) => { editorMode = drop; }} id='editorMode' className='form-control' dataSource={editorData} fields={dropDownFields} value={dropDownVal} width={'90%'} change={changeEditorMode.bind(this)}/>\n                                        </div>\n                                    </td>\n                                </tr>\n                            </tbody>\n                        </table>\n                    </PropertyPane>\n                </div>\n            </div>);\n}\nexport default DropDowns;\n\nconst root = createRoot(document.getElementById('sample'));\nroot.render(<DropDowns />);","dependencies":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-react-base\":\"*\",\"@syncfusion/ej2-dropdowns\":\"*\",\"@syncfusion/ej2-react-dropdowns\":\"*\",\"@syncfusion/ej2-inplace-editor\":\"*\",\"@syncfusion/ej2-react-inplace-editor\":\"*\",\"@syncfusion/ej2-inplace-editor/src/inplace-editor/base/models-model\":\"*\",\"@syncfusion/ej2-react-charts\":\"*\",\"@syncfusion/ej2/base\":\"*\",\"@syncfusion/ej2-charts'; // Import the necessary types from Syncfusion\":\"*\",\"@syncfusion/ej2-lists\":\"*\",\"@syncfusion/ej2-documenteditor\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-splitbuttons\":\"*\",\"@syncfusion/ej2-navigations\":\"*\",\"@syncfusion/ej2-react-popups\":\"*\"}"}