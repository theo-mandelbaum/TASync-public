{"index.css":".inplace-control-section.pickers-layout .control_wrapper {\n    margin: auto;\n    max-width: 400px;\n}\n\n.inplace-control-section.pickers-layout .control_wrapper table {\n    margin: auto;\n}\n\n.inplace-control-section.pickers-layout .control_wrapper table td {\n    width: 200px;\n    height: 100px;\n}\n\n.inplace-control-section.pickers-layout .control_wrapper table td .control-label {\n    margin-bottom: 0px;\n}\n\n.e-bigger .e-inplaceeditor .e-editable-value-wrapper .e-editable-value{\n    margin-right: 0px;\n}\n\n@media (max-width: 768px) {\n    .inplace-control-section.pickers-layout {\n        padding-left: 0;\n        padding-right: 0;\n    }\n\n    .inplace-control-section.pickers-layout .control_wrapper table tr td:nth-child(1) {\n        width: 130px;\n    }\n\n    .inplace-control-section.pickers-layout .control_wrapper table tr td:nth-child(2) {\n        width: 200px;\n    }\n}\n\n#pickerProperty table td {\n    width: 50%;\n}\n\n#pickerProperty .property-panel-table div {\n    padding-left: 10px;\n    padding-top: 10px;\n}\n\n.e-inplaceeditor-tip .e-editable-component .e-input-group .e-clear-icon.e-clear-icon-hide,\n.inplace-control-section.pickers-layout .e-inplaceeditor .e-editable-component .e-clear-icon-hide {\ndisplay: block;\nvisibility: hidden;\n}","property-pane.js":"import * as ReactDOM from 'react-dom';\nimport * as React from 'react';\nimport { select } from '@syncfusion/ej2-base';\nexport class PropertyPane extends React.Component {\n    render() {\n        const mobilePropPane = select('.sb-mobile-prop-pane');\n        const isMobile = window.matchMedia('(max-width:550px)').matches;\n        return isMobile && mobilePropPane ?\n            ReactDOM.createPortal(<div className='property-panel-section'>\n                    <div className=\"property-panel-header\">\n                        {this.props.title}\n                    </div>\n                    <div className=\"property-panel-content\">\n                        {this.props.children}\n                    </div>\n                </div>, mobilePropPane)\n            :\n                (<div className='property-panel-section'>\n                    <div className=\"property-panel-header\">\n                        {this.props.title}\n                    </div>\n                    <div className=\"property-panel-content\">\n                        {this.props.children}\n                    </div>\n                </div>);\n    }\n}\n","index.html":"<!DOCTYPE html>\n<html>\n<head>\n    <title>Syncfusion React Sample</title>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\n    <meta name=\"author\" content=\"Syncfusion\" />\n    <link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\n</head>\n\n<body class=\"{{theme}}\">\n     <style>\n            .control-section\n            {\n                margin-top: 100px;\n            }\n    </style>\n    <div id='sample'>\n</body>\n</html>\n","index.js":"import { createRoot } from 'react-dom/client';\nimport './index.css';\nimport { DropDownListComponent } from '@syncfusion/ej2-react-dropdowns';\nimport { DateRangePicker, Inject, InPlaceEditorComponent, TimePicker } from '@syncfusion/ej2-react-inplace-editor';\nimport * as React from 'react';\nimport { PropertyPane } from './property-pane';\n\n\n// tslint:disable:max-line-length\nfunction Pickers() {\n    let dateObj;\n    let timeObj;\n    let dateTimeObj;\n    let dateRangeObj;\n    let editorMode;\n    let dateValue = new Date('5/23/2017');\n    let dateTimeValue = new Date('5/23/2017 12:00 PM');\n    let dateRangeValue = [new Date('5/23/2017'), new Date('7/5/2017')];\n    let datePickerModel = { placeholder: 'Select a date' };\n    let timePickerModel = { placeholder: 'Select a time', value: new Date('5/23/2017,12:00 PM') };\n    let dateTimePickerModel = { placeholder: 'Select a date and time' };\n    let dateRangePickerModel = { placeholder: 'Select a date range' };\n    // Mapping DropDownList dataSource property\n    let editorData = [\n        { 'value': 'Inline', 'text': 'Inline' }, { 'value': 'Popup', 'text': 'Popup' }\n    ];\n    // Mapping DropDownList fields property\n    let dropDownFields = { text: 'text', value: 'value' };\n    // Mapping DropDownList value property\n    let dropDownVal = 'Inline';\n    // Change event funtion for DropDownList component   \n    function changeEditorMode(e) {\n        let mode = editorMode.value;\n        dateObj.mode = mode;\n        timeObj.mode = mode;\n        dateTimeObj.mode = mode;\n        dateRangeObj.mode = mode;\n        dateObj.dataBind();\n        timeObj.dataBind();\n        dateTimeObj.dataBind();\n        dateRangeObj.dataBind();\n    }\n    function rendereComplete() {\n        let rightPane = document.getElementById('right-pane');\n        if (rightPane) {\n            rightPane.addEventListener('scroll', scrollRightPane);\n        }\n    }\n    function componentWillUnmount() {\n        let rightPane = document.getElementById('right-pane');\n        if (rightPane) {\n            rightPane.removeEventListener('scroll', scrollRightPane);\n        }\n    }\n    function scrollRightPane() {\n        let mode = document.getElementById('editorMode');\n        if (mode && mode.value === 'Inline') {\n            return;\n        }\n        if (dateObj && (dateObj.element.querySelectorAll('.e-editable-open').length > 0)) {\n            dateObj.enableEditMode = false;\n        }\n        if (timeObj && (timeObj.element.querySelectorAll('.e-editable-open').length > 0)) {\n            timeObj.enableEditMode = false;\n        }\n        if (dateTimeObj && (dateTimeObj.element.querySelectorAll('.e-editable-open').length > 0)) {\n            dateTimeObj.enableEditMode = false;\n        }\n        if (dateRangeObj && (dateRangeObj.element.querySelectorAll('.e-editable-open').length > 0)) {\n            dateRangeObj.enableEditMode = false;\n        }\n    }\n    return (<div className='control-pane'>\n                <div className=\"col-lg-8 control-section inplace-control-section pickers-layout\">\n                    <div className=\"control_wrapper form-horizontal\">\n                        <table>\n                            <thead>\n                                <tr>\n                                <th></th>\n                                <th></th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                <tr>\n                                    <td>\n                                        <label className=\"control-label\" style={{ textAlign: 'left', fontSize: '14px', fontWeight: 400 }}>\n                                            DatePicker </label>\n                                    </td>\n                                    <td>\n                                        <InPlaceEditorComponent ref={(date) => { dateObj = date; }} id='datePickerEle' mode='Inline' type='Date' value={dateValue} model={datePickerModel}>\n                                        </InPlaceEditorComponent>\n                                    </td>\n                                </tr>\n                                <tr>\n                                    <td>\n                                        <label className=\"control-label\" style={{ textAlign: 'left', fontSize: '14px', fontWeight: 400 }}>\n                                            TimePicker </label>\n                                    </td>\n                                    <td>\n                                        <InPlaceEditorComponent ref={(time) => { timeObj = time; }} id='timePickerEle' mode='Inline' type='Time' value={dateValue} model={timePickerModel}>\n                                            <Inject services={[TimePicker]}/>\n                                        </InPlaceEditorComponent>\n                                    </td>\n                                </tr>\n                                <tr>\n                                    <td>\n                                        <label className=\"control-label\" style={{ textAlign: 'left', fontSize: '14px', fontWeight: 400 }}>\n                                            DateTimePicker </label>\n                                    </td>\n                                    <td>\n                                        <InPlaceEditorComponent ref={(dateTime) => { dateTimeObj = dateTime; }} id='dateTimePickerEle' mode='Inline' type='DateTime' value={dateTimeValue} model={dateTimePickerModel}>\n                                        </InPlaceEditorComponent>\n                                    </td>\n                                </tr>\n                                <tr>\n                                    <td>\n                                        <label className=\"control-label\" style={{ textAlign: 'left', fontSize: '14px', fontWeight: 400 }}>\n                                            DateRangePicker </label>\n                                    </td>\n                                    <td>\n                                        <InPlaceEditorComponent ref={(dateRange) => { dateRangeObj = dateRange; }} id='dateRangePickerEle' mode='Inline' type='DateRange' value={dateRangeValue} model={dateRangePickerModel}>\n                                            <Inject services={[DateRangePicker]}/>\n                                        </InPlaceEditorComponent>\n                                    </td>\n                                </tr>\n                            </tbody>\n                        </table>\n                    </div>\n                </div>\n                <div className='col-lg-4 property-section' id=\"pickerProperty\">\n                    <PropertyPane title='Properties'>\n                        <table id=\"property\" title=\"Properties\" className=\"property-panel-table\">\n                            <tbody>\n                                <tr>\n                                    <td>\n                                        <div>Mode</div>\n                                    </td>\n                                    <td>\n                                        <div>\n                                            {/* Render the DropDownList Component */}\n                                            <DropDownListComponent ref={(drop) => { editorMode = drop; }} id='editorMode' className='form-control' dataSource={editorData} fields={dropDownFields} value={dropDownVal} width={'90%'} change={changeEditorMode.bind(this)}/>\n                                        </div>\n                                    </td>\n                                </tr>\n                            </tbody>\n                        </table>\n                    </PropertyPane>\n                </div>\n            </div>);\n}\nexport default Pickers;\n\nconst root = createRoot(document.getElementById('sample'));\nroot.render(<Pickers />);","dependencies":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-inputs\":\"*\",\"@syncfusion/ej2-lists\":\"*\",\"@syncfusion/ej2-popups\":\"*\",\"markdown-spellcheck\":\"^1.3.1\",\"@syncfusion/ej2-calendars\":\"*\",\"@syncfusion/ej2-react-base\":\"*\",\"@syncfusion/ej2-dropdowns\":\"*\",\"@syncfusion/ej2-react-dropdowns\":\"*\",\"@syncfusion/ej2-inplace-editor\":\"*\",\"@syncfusion/ej2-react-inplace-editor\":\"*\",\"@syncfusion/ej2-react-charts\":\"*\",\"@syncfusion/ej2/base\":\"*\",\"@syncfusion/ej2-charts'; // Import the necessary types from Syncfusion\":\"*\",\"@syncfusion/ej2-documenteditor\":\"*\",\"@syncfusion/ej2-splitbuttons\":\"*\",\"@syncfusion/ej2-navigations\":\"*\",\"@syncfusion/ej2-react-popups\":\"*\"}"}