{"index.css":".inplace-control-section.default_layout .control_wrapper {\n    width: 100%;\n    max-width: 400px;\n    margin: auto;\n}\n\n.inplace-control-section.default_layout .control-wrapper {\n    width: 100%;\n}\n\n.inplace-control-section.default_layout .control_wrapper .control-center {\n    text-align: center;\n}\n\n.inplace-control-section.default_layout .e-inplaceeditor {\n    height: auto;\n}\n\n.inplace-control-section.default_layout .control_wrapper table td {\n    width: 200px;\n    height: 100px;\n}\n\n.inplace-control-section.default_layout .control_wrapper table td .control-label {\n    margin-bottom: 0px;\n}\n\n#defaultProperty table td {\n    width: 50%;\n}\n\n@media (max-width: 1200px) {\n    .inplace-control-section.default_layout  {\n        width: 100%;\n    }\n}\n\n@media (max-width: 768px) {\n    .inplace-control-section.default_layout .control_wrapper table tr td:nth-child(1) {\n        width: 130px;\n    }\n\n    .inplace-control-section.default_layout .control_wrapper table tr td:nth-child(2) {\n        width: 200px;\n    }\n}\n\n#defaultProperty .property-panel-table div {\n    padding-left: 10px;\n    padding-top: 10px;\n}\n\n.inplace-control-section.default_layout .e-inplaceeditor .e-editable-component .e-clear-icon-hide,\n.e-inplaceeditor-tip .e-editable-component .e-input-group .e-clear-icon.e-clear-icon-hide {\n    display: block;\n    visibility: hidden;\n}\n\n.inplace-overview .property-panel-content {\n    min-height: 0px;\n    overflow: hidden;\n}","property-pane.js":"import * as ReactDOM from 'react-dom';\nimport * as React from 'react';\nimport { select } from '@syncfusion/ej2-base';\nexport class PropertyPane extends React.Component {\n    render() {\n        const mobilePropPane = select('.sb-mobile-prop-pane');\n        const isMobile = window.matchMedia('(max-width:550px)').matches;\n        return isMobile && mobilePropPane ?\n            ReactDOM.createPortal(<div className='property-panel-section'>\n                    <div className=\"property-panel-header\">\n                        {this.props.title}\n                    </div>\n                    <div className=\"property-panel-content\">\n                        {this.props.children}\n                    </div>\n                </div>, mobilePropPane)\n            :\n                (<div className='property-panel-section'>\n                    <div className=\"property-panel-header\">\n                        {this.props.title}\n                    </div>\n                    <div className=\"property-panel-content\">\n                        {this.props.children}\n                    </div>\n                </div>);\n    }\n}\n","index.html":"<!DOCTYPE html>\n<html>\n<head>\n    <title>Syncfusion React Sample</title>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\n    <meta name=\"author\" content=\"Syncfusion\" />\n    <link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\n</head>\n\n<body class=\"{{theme}}\">\n     <style>\n            .control-section\n            {\n                margin-top: 100px;\n            }\n    </style>\n    <div id='sample'>\n</body>\n</html>\n","index.js":"import { createRoot } from 'react-dom/client';\nimport './index.css';\nimport * as React from 'react';\nimport { PropertyPane } from './property-pane';\nimport { InPlaceEditorComponent } from '@syncfusion/ej2-react-inplace-editor';\nimport { DropDownListComponent } from '@syncfusion/ej2-react-dropdowns';\nimport { CheckBoxComponent } from '@syncfusion/ej2-react-buttons';\nimport { SampleBase } from './sample-base';\n\n// tslint:disable:max-line-length\nexport class Default extends SampleBase {\n    textObj;\n    numericObj;\n    maskObj;\n    editableon;\n    editorMode;\n    textModel = { placeholder: 'Enter employee name' };\n    popupSettings = { title: 'Enter Employee Name' };\n    numericModel = { format: 'c2', value: 100, placeholder: 'Currency format' };\n    maskModel = { mask: '000-000-0000' };\n    // Mapping DropDownList dataSource property\n    dropDownData = [\n        { 'value': 'Inline', 'text': 'Inline' }, { 'value': 'popup', 'text': 'Popup' }\n    ];\n    // Mapping DropDownList fields property\n    dropDownFields = { text: 'text', value: 'value' };\n    // Mapping DropDownList value property\n    dropDownVal = 'Inline';\n    // Mapping DropDownList dataSource property\n    editableData = [\n        { 'value': 'Click', 'text': 'Click' }, { 'value': 'DblClick', 'text': 'Double Click' }, { 'value': 'EditIconClick', 'text': 'Edit Icon Click' }\n    ];\n    // Mapping DropDownList fields property\n    editableFields = { text: 'text', value: 'value' };\n    // Mapping DropDownList value property\n    editableVal = 'Click';\n    // Change event funtion for DropDownList component   \n    changeEditorMode(e) {\n        let mode = this.editorMode.value;\n        this.textObj.mode = this.numericObj.mode = this.maskObj.mode = mode;\n        this.textObj.dataBind();\n        this.numericObj.dataBind();\n        this.maskObj.dataBind();\n    }\n    rendereComplete() {\n        let rightPane = document.getElementById('right-pane');\n        if (rightPane) {\n            rightPane.addEventListener('scroll', this.scrollRightPane);\n        }\n    }\n    componentWillUnmount() {\n        let rightPane = document.getElementById('right-pane');\n        if (rightPane) {\n            rightPane.removeEventListener('scroll', this.scrollRightPane);\n        }\n    }\n    scrollRightPane = () => {\n        let mode = document.getElementById('editorMode');\n        if (mode && mode.value === 'Inline') {\n            return;\n        }\n        if (this.textObj && (this.textObj.element.querySelectorAll('.e-editable-open').length > 0)) {\n            this.textObj.enableEditMode = false;\n        }\n        if (this.numericObj && (this.numericObj.element.querySelectorAll('.e-editable-open').length > 0)) {\n            this.numericObj.enableEditMode = false;\n        }\n        if (this.maskObj && (this.maskObj.element.querySelectorAll('.e-editable-open').length > 0)) {\n            this.maskObj.enableEditMode = false;\n        }\n    };\n    // Change event funtion for DropDownList component   \n    onEditableOn(e) {\n        let editableValue = this.editableon.value;\n        this.textObj.editableOn = this.numericObj.editableOn = this.maskObj.editableOn = editableValue;\n        this.textObj.dataBind();\n        this.numericObj.dataBind();\n        this.maskObj.dataBind();\n    }\n    // Change event funtion for CheckBox component\n    onChange(e) {\n        e.checked ? this.textObj.showButtons = this.numericObj.showButtons = this.maskObj.showButtons = true : this.textObj.showButtons = this.numericObj.showButtons = this.maskObj.showButtons = false;\n    }\n    // Change event funtion for CheckBox component\n    onChangeEnable(e) {\n        e.checked ? this.textObj.disabled = this.numericObj.disabled = this.maskObj.disabled = true : this.textObj.disabled = this.numericObj.disabled = this.maskObj.disabled = false;\n    }\n    render() {\n        return (<div className='control-pane'>\n                <div className=\"col-lg-8 control-section inplace-control-section default_layout\">\n                    <div className=\"control_wrapper\">\n                        <table>\n                            <thead>\n                                <tr>\n                                <th></th>\n                                <th></th>\n                                </tr>\n                            </thead>\n                            <tr>\n                                <td>\n                                    <label className=\"control-label\" style={{ textAlign: 'left', fontSize: '14px', fontWeight: 400 }}>\n                                        TextBox </label>\n                                </td>\n                                <td>\n                                    <InPlaceEditorComponent ref={(text) => { this.textObj = text; }} id='textboxEle' mode='Inline' type='Text' value='Andrew' model={this.textModel} popupSettings={this.popupSettings}>\n                                    </InPlaceEditorComponent>\n                                </td>\n                            </tr>\n                            <tr>\n                                <td>\n                                    <label className=\"control-label\" style={{ textAlign: 'left', fontSize: '14px', fontWeight: 400 }}>\n                                        NumericTextBox </label>\n                                </td>\n                                <td>\n                                    <InPlaceEditorComponent ref={(numeric) => { this.numericObj = numeric; }} id='numericTextBoxEle' mode='Inline' type='Numeric' value='$100.00' model={this.numericModel}>\n                                    </InPlaceEditorComponent>\n                                </td>\n                            </tr>\n                            <tr>\n                                <td>\n                                    <label className=\"control-label\" style={{ textAlign: 'left', fontSize: '14px', fontWeight: 400 }}>\n                                        MaskedTextBox </label>\n                                </td>\n                                <td>\n                                    <InPlaceEditorComponent ref={(mask) => { this.maskObj = mask; }} id='maskedTextBoxEle' mode='Inline' type='Mask' value='012-345-6789' model={this.maskModel}>\n                                    </InPlaceEditorComponent>\n                                </td>\n                            </tr>\n                        </table>\n                    </div>\n                </div>\n                <div className='col-lg-4 property-section inplace-overview' id=\"defaultProperty\">\n                    <PropertyPane title='Properties'>\n                        <table id=\"property\" title=\"Properties\" className=\"property-panel-table\">\n                            <tbody>\n                                <tr>\n                                    <td>\n                                        <div>Mode</div>\n                                    </td>\n                                    <td>\n                                        <div>\n                                            {/* Render the DropDownList Component */}\n                                            <DropDownListComponent ref={(edit) => { this.editorMode = edit; }} id='editorMode' className='form-control' dataSource={this.dropDownData} fields={this.dropDownFields} value={this.dropDownVal} width={'90%'} change={this.changeEditorMode.bind(this)}/>\n                                        </div>\n                                    </td>\n                                </tr>\n                                <tr>\n                                    <td>\n                                        <div>Editable On</div>\n                                    </td>\n                                    <td>\n                                        <div>\n                                            {/* Render the DropDownList Component */}\n                                            <DropDownListComponent ref={(edit) => { this.editableon = edit; }} id='editableon' className='form-control' dataSource={this.editableData} fields={this.editableFields} value={this.editableVal} width={'90%'} change={this.onEditableOn.bind(this)}/>\n                                        </div>\n                                    </td>\n                                </tr>\n                                <tr>\n                                    <td>\n                                        <div>Show Buttons</div>\n                                    </td>\n                                    <td>\n                                        <div>\n                                            {/* Render the CheckBox Component */}\n                                            <CheckBoxComponent id='showbuttons' checked={true} labelPosition='Before' change={this.onChange.bind(this)}/>\n                                        </div>\n                                    </td>\n                                </tr>\n                                <tr>\n                                    <td>\n                                        <div>Disable</div>\n                                    </td>\n                                    <td>\n                                        <div>\n                                            {/* Render the CheckBox Component */}\n                                            <CheckBoxComponent id='editorEnable' checked={false} labelPosition='Before' change={this.onChangeEnable.bind(this)}/>\n                                        </div>\n                                    </td>\n                                </tr>\n                            </tbody>\n                        </table>\n                    </PropertyPane>\n                </div>\n            </div>);\n    }\n}\n\nconst root = createRoot(document.getElementById('sample'));\nroot.render(<Default />);","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n                this.rendereComplete();\n            });\n        }\n    }\n    export function updateSampleSection(){}\n    ","dependencies":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-react-base\":\"*\",\"@syncfusion/ej2-inplace-editor\":\"*\",\"@syncfusion/ej2-react-inplace-editor\":\"*\",\"@syncfusion/ej2-inputs\":\"*\",\"@syncfusion/ej2-react-inputs\":\"*\",\"@syncfusion/ej2-dropdowns\":\"*\",\"@syncfusion/ej2-react-dropdowns\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-react-buttons\":\"*\",\"@syncfusion/ej2-inplace-editor/src/inplace-editor/base/models-model\":\"*\",\"@syncfusion/ej2-react-charts\":\"*\",\"@syncfusion/ej2/base\":\"*\",\"@syncfusion/ej2-charts'; // Import the necessary types from Syncfusion\":\"*\",\"@syncfusion/ej2-lists\":\"*\",\"@syncfusion/ej2-documenteditor\":\"*\",\"@syncfusion/ej2-splitbuttons\":\"*\",\"@syncfusion/ej2-navigations\":\"*\",\"@syncfusion/ej2-react-popups\":\"*\"}"}