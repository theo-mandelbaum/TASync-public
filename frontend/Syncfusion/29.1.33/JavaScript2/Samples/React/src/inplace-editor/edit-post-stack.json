{"index.css":".inplace-editor-control-section.form-layout #confirmation {\n    max-width: 500px;\n    margin: auto;\n}\n\n.inplace-editor-control-section.form-layout #formId {\n    padding-top: 20px;\n    margin-bottom: 45px;\n    border: 1px solid #ccc;\n    box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.36);\n    border-radius: 5px;\n}\n\n.inplace-editor-control-section.form-layout .form-horizontal .form-group {\n    margin: 0 20px;\n}\n\n.inplace-editor-control-section.form-layout .form-horizontal .form-group:last-child {\n    padding-bottom: 40px;\n}\n\n.inplace-editor-control-section.form-layout .form-title {\n    width: 100%;\n    text-align: center;\n    padding: 10px;\n    font-size: 16px;\n    font-weight: 500;\n    color: rgba(0, 0, 0, 0.70);\n}\n\n.inplace-editor-control-section.form-layout .submit {\n    margin: auto;\n    width: 50%;\n    text-align: center;\n}\n\n.inplace-editor-control-section.form-layout .form-horizontal .control-label {\n    padding: 15px 15px 15px 0;\n    font-weight: 600;\n    font-size: 14px;\n}\n\n.inplace-editor-control-section.form-layout .form-horizontal .form-group > * {\n    width: 100%;\n}\n\n@media (max-width: 768px) {\n    .inplace-editor-control-section.form-layout .form-horizontal .control-label {\n        padding-top: 7px;\n        margin-bottom: 0;\n    }\n}\n\n#editorProperty table td {\n    width: 50%;\n}\n\n#editorProperty .property-panel-table div {\n    padding-left: 10px;\n    padding-top: 10px;\n}\n\n.inplace-editor-control-section.form-layout .e-inplaceeditor .e-editable-component .e-clear-icon-hide,\n.e-inplaceeditor-tip .e-editable-component .e-input-group .e-clear-icon.e-clear-icon-hide {\n    display: block;\n    visibility: hidden;\n}","property-pane.js":"import * as ReactDOM from 'react-dom';\nimport * as React from 'react';\nimport { select } from '@syncfusion/ej2-base';\nexport class PropertyPane extends React.Component {\n    render() {\n        const mobilePropPane = select('.sb-mobile-prop-pane');\n        const isMobile = window.matchMedia('(max-width:550px)').matches;\n        return isMobile && mobilePropPane ?\n            ReactDOM.createPortal(<div className='property-panel-section'>\n                    <div className=\"property-panel-header\">\n                        {this.props.title}\n                    </div>\n                    <div className=\"property-panel-content\">\n                        {this.props.children}\n                    </div>\n                </div>, mobilePropPane)\n            :\n                (<div className='property-panel-section'>\n                    <div className=\"property-panel-header\">\n                        {this.props.title}\n                    </div>\n                    <div className=\"property-panel-content\">\n                        {this.props.children}\n                    </div>\n                </div>);\n    }\n}\n","index.html":"<!DOCTYPE html>\n<html>\n<head>\n    <title>Syncfusion React Sample</title>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\n    <meta name=\"author\" content=\"Syncfusion\" />\n    <link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\n</head>\n\n<body class=\"{{theme}}\">\n     <style>\n            .control-section\n            {\n                margin-top: 100px;\n            }\n    </style>\n    <div id='sample'>\n</body>\n</html>\n","index.js":"import { createRoot } from 'react-dom/client';\nimport './index.css';\nimport { DropDownListComponent } from '@syncfusion/ej2-react-dropdowns';\nimport { Inject, InPlaceEditorComponent, MultiSelect, Rte } from '@syncfusion/ej2-react-inplace-editor';\nimport * as React from 'react';\nimport { PropertyPane } from './property-pane';\nimport { SampleBase } from './sample-base';\n\n// tslint:disable:max-line-length\nexport class UseCase extends SampleBase {\n    inplaceEditorControlEle;\n    inplaceEditorControlRef;\n    constructor(props) {\n        super(props);\n        this.inplaceEditorControlEle = null;\n        this.inplaceEditorControlRef = element => {\n            this.inplaceEditorControlEle = element;\n        };\n    }\n    titleObj;\n    tagObj;\n    rteObj;\n    editorMode;\n    popupSettings = { model: { width: 300 } };\n    multiValue = ['TypeScript', 'JavaScript'];\n    // define the array of string\n    multiData = ['Android', 'JavaScript', 'jQuery', 'TypeScript', 'Angular', 'React', 'Vue', 'Ionic'];\n    textValidationRules = { Title: { required: [true, 'Enter valid title'] } };\n    textModel = { placeholder: 'Enter your question title' };\n    rteValidationRules = { rte: { required: [true, 'Enter valid comments'] } };\n    rteModel = {\n        toolbarSettings: {\n            enableFloating: false,\n            items: ['Bold', 'Italic', 'Underline', 'FontColor', 'BackgroundColor',\n                'LowerCase', 'UpperCase', '|', 'OrderedList', 'UnorderedList']\n        }\n    };\n    selectValidationRules = { Tag: { required: [true, 'Enter valid tags'] } };\n    selectModel = { dataSource: this.multiData, placeholder: 'Enter your tags', mode: 'Box', };\n    // Mapping DropDownList dataSource property\n    editorData = [\n        { 'value': 'Inline', 'text': 'Inline' }, { 'value': 'Popup', 'text': 'Popup' }\n    ];\n    // Mapping DropDownList fields property\n    dropDownFields = { text: 'text', value: 'value' };\n    // Mapping DropDownList value property\n    dropDownVal = 'Inline';\n    // Change event funtion for DropDownList component   \n    changeEditorMode(e) {\n        let mode = this.editorMode.value;\n        this.titleObj.mode = mode;\n        this.tagObj.mode = mode;\n        this.rteObj.mode = mode;\n        this.titleObj.dataBind();\n        this.tagObj.dataBind();\n        this.rteObj.dataBind();\n    }\n    selectionActionSuccess(e) {\n        e.value = this.chipCreation(e.value.split(','));\n    }\n    create() {\n        this.rteObj.popupSettings.model.width = this.inplaceEditorControlEle.offsetWidth;\n        this.chipOnCreate();\n    }\n    chipOnCreate() {\n        this.tagObj.element.querySelector('.e-editable-value').innerHTML = this.chipCreation(this.tagObj.value);\n    }\n    chipCreation(data) {\n        let value = '<div class=\"e-chip-list\">';\n        [].slice.call(data).forEach((val) => {\n            value += '<div class=\"e-chip\"> <span class=\"e-chip-text\"> ' + val + '</span></div>';\n        });\n        value += '</div>';\n        return value;\n    }\n    rendereComplete() {\n        let rightPane = document.getElementById('right-pane');\n        if (rightPane) {\n            rightPane.addEventListener('scroll', this.scrollRightPane);\n        }\n    }\n    componentWillUnmount() {\n        let rightPane = document.getElementById('right-pane');\n        if (rightPane) {\n            rightPane.removeEventListener('scroll', this.scrollRightPane);\n        }\n    }\n    scrollRightPane = () => {\n        let mode = document.getElementById('editorMode');\n        if (mode && mode.value === 'Inline') {\n            return;\n        }\n        if (this.titleObj && this.titleObj.element.querySelectorAll('.e-editable-open')) {\n            this.titleObj.enableEditMode = false;\n        }\n        if (this.tagObj && this.tagObj.element.querySelectorAll('.e-editable-open')) {\n            this.tagObj.enableEditMode = false;\n        }\n        if (this.rteObj && this.rteObj.element.querySelectorAll('.e-editable-open')) {\n            this.rteObj.enableEditMode = false;\n        }\n    };\n    render() {\n        return (<div className='control-pane'>\n                <div className=\"col-lg-8 control-section inplace-editor-control-section form-layout\" ref={this.inplaceEditorControlRef} id='inplace-editor-control'>\n                    <div className=\"content-wrapper\" style={{ marginBottom: \"25px\" }}>\n                        <div id=\"confirmation\">\n                            <div id=\"submitDialog\"></div>\n                            <form id=\"formId\" className=\"form-horizontal\">\n                                <div className=\"form-group\">\n                                    <label className=\"col-sm-6 control-label\" style={{ textAlign: \"left\", fontSize: \"14px\", fontWeight: 700 }}>\n                                        Title</label>\n                                    <InPlaceEditorComponent ref={(title) => { this.titleObj = title; }} id='inplace_title_editor' data-underline='false' mode='Inline' emptyText='Enter your question title' name='Title' value='Succinctly E-Book about TypeScript' validationRules={this.textValidationRules} model={this.textModel}>\n                                    </InPlaceEditorComponent>\n                                </div>\n                                <div className=\"form-group\">\n                                    <label className=\"col-sm-6 control-label\" style={{ textAlign: \"left\", fontSize: \"14px\", fontWeight: 700 }}>\n                                        Comments</label>\n                                    <InPlaceEditorComponent ref={(rte) => { this.rteObj = rte; }} id='inplace_comment_editor' data-underline='false' mode='Inline' type='RTE' editableOn='EditIconClick' submitOnEnter={false} value='The extensive adoption of JavaScript for application development, and the ability to use HTML and JavaScript to create Windows Store apps, has made JavaScript a vital part of the Windows development ecosystem. Microsoft has done extensive work to make JavaScript easier to use.' emptyText='Enter your comment' name='rte' validationRules={this.rteValidationRules} model={this.rteModel} popupSettings={this.popupSettings}>\n                                        <Inject services={[Rte]}/>\n                                    </InPlaceEditorComponent>\n                                </div>\n                                <div className=\"form-group\">\n                                    <label className=\"col-sm-6 control-label\" style={{ textAlign: \"left\", fontSize: \"14px\", fontWeight: 700 }}>\n                                        Tags</label>\n                                    <InPlaceEditorComponent ref={(tag) => { this.tagObj = tag; }} id='inplace_tag_editor' data-underline='false' mode='Inline' type='MultiSelect' created={this.create.bind(this)} value={this.multiValue} emptyText='Enter your tags' name='Tag' actionSuccess={this.selectionActionSuccess.bind(this)} validationRules={this.selectValidationRules} model={this.selectModel}>\n                                        <Inject services={[MultiSelect]}/>\n                                    </InPlaceEditorComponent>\n                                </div>\n                            </form>\n                        </div>\n                    </div>\n                </div>\n                <div className='col-lg-4 property-section' id=\"editorProperty\">\n                    <PropertyPane title='Properties'>\n                        <table id=\"property\" title=\"Properties\" className=\"property-panel-table\">\n                            <tbody>\n                                <thead>\n                                    <tr>\n                                    <th></th>\n                                    <th></th>\n                                    </tr>\n                                </thead>\n                                <tr>\n                                    <td>\n                                        <div>Mode</div>\n                                    </td>\n                                    <td>\n                                        <div>\n                                            {/* Render the DropDownList Component */}\n                                            <DropDownListComponent ref={(drop) => { this.editorMode = drop; }} id='editorMode' className='form-control' dataSource={this.editorData} fields={this.dropDownFields} value={this.dropDownVal} width={'90%'} change={this.changeEditorMode.bind(this)}/>\n                                        </div>\n                                    </td>\n                                </tr>\n                            </tbody>\n                        </table>\n                    </PropertyPane>\n                </div>\n            </div>);\n    }\n}\n\nconst root = createRoot(document.getElementById('sample'));\nroot.render(<UseCase />);","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n                this.rendereComplete();\n            });\n        }\n    }\n    export function updateSampleSection(){}\n    ","dependencies":"{\"@syncfusion/ej2-inplace-editor/src/inplace-editor/base/models-model\":\"*\",\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-popups\":\"*\",\"@syncfusion/ej2-splitbuttons\":\"*\",\"markdown-spellcheck\":\"^1.3.1\",\"@syncfusion/ej2-inputs\":\"*\",\"@syncfusion/ej2-react-base\":\"*\",\"@syncfusion/ej2-dropdowns\":\"*\",\"@syncfusion/ej2-react-dropdowns\":\"*\",\"@syncfusion/ej2-inplace-editor\":\"*\",\"@syncfusion/ej2-react-inplace-editor\":\"*\",\"@syncfusion/ej2-filemanager\":\"*\",\"@syncfusion/ej2-navigations\":\"*\",\"@syncfusion/ej2-richtexteditor\":\"*\",\"@syncfusion/ej2-react-charts\":\"*\",\"@syncfusion/ej2/base\":\"*\",\"@syncfusion/ej2-charts'; // Import the necessary types from Syncfusion\":\"*\",\"@syncfusion/ej2-lists\":\"*\",\"@syncfusion/ej2-documenteditor\":\"*\",\"@syncfusion/ej2-react-popups\":\"*\"}"}