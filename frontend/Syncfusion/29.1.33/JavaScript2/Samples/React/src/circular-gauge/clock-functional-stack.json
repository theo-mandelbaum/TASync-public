{"index.css":"/* css */","index.html":"<!DOCTYPE html>\n<html>\n<head>\n    <title>Syncfusion React Sample</title>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\n    <meta name=\"author\" content=\"Syncfusion\" />\n    <link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\n</head>\n\n<body class=\"{{theme}}\">\n     <style>\n            .control-section\n            {\n                margin-top: 100px;\n            }\n    </style>\n    <div id='sample'>\n</body>\n</html>\n","index.js":"import { createRoot } from 'react-dom/client';\nimport './index.css';\nimport * as React from 'react';\nimport { useEffect, useRef } from 'react';\nimport { CircularGaugeComponent, AxesDirective, AxisDirective, Inject, Annotations, PointersDirective, PointerDirective, AnnotationsDirective, AnnotationDirective } from '@syncfusion/ej2-react-circulargauge';\n\nimport { CircularGauge } from '@syncfusion/ej2-circulargauge';\nimport { isNullOrUndefined } from '@syncfusion/ej2-base';\nconst SAMPLE_CSS = `\n    .control-fluid {\n\t\tpadding: 0px !important;\n    }`;\nconst Clock = () => {\n    let gauge = useRef(null);\n    let pointerInterval;\n    let refreshTimeout;\n    let annotationGaugeOne = useRef(null);\n    let annotationGaugeTwo = useRef(null);\n    let NeedlePointer = 0.2;\n    const load = (args) => {\n    };\n    const onChartLoad = (args) => {\n        renderGauges();\n        if (isNullOrUndefined(pointerInterval)) {\n            pointerInterval = setInterval(() => {\n                if (document.getElementById('axis-background')) {\n                    if (NeedlePointer <= 12) {\n                        gauge.current.setPointerValue(0, 2, NeedlePointer);\n                        NeedlePointer += 0.2;\n                    }\n                    else {\n                        NeedlePointer = 0.2;\n                    }\n                }\n                else {\n                    clearInterval(+pointerInterval);\n                }\n            }, 1000);\n        }\n    };\n    const onResized = () => {\n        window.clearTimeout(refreshTimeout);\n        refreshTimeout = setTimeout(() => {\n            if (document.getElementById('axis-background')) {\n                renderGauges();\n            }\n            else {\n                window.clearTimeout(+refreshTimeout);\n            }\n        }, 1000);\n    };\n    const renderGauges = () => {\n        annotationGaugeOne.current = new CircularGauge({\n            width: '150px',\n            height: '150px',\n            background: 'transparent',\n            axes: [{\n                    labelStyle: { hiddenLabel: 'First', font: { fontFamily: 'inherit', size: '7px' }, offset: -5 },\n                    majorTicks: { interval: 2, offset: 2 },\n                    minorTicks: { interval: 0.4, offset: 2 }, minimum: 0, maximum: 12,\n                    pointers: [{\n                            value: 5,\n                            radius: '50%', pointerWidth: 2, color: '#00A8B5',\n                            animation: { enable: false }, cap: { radius: 0 }, needleTail: { length: '0%' }\n                        }], startAngle: 0, endAngle: 0, radius: '70%', lineStyle: { width: 2 }\n                }],\n            load: (args) => {\n            }\n        });\n        annotationGaugeOne.current.appendTo('#subGaugeOne');\n        annotationGaugeTwo.current = new CircularGauge({\n            width: '150px',\n            height: '150px',\n            background: 'transparent',\n            axes: [{\n                    labelStyle: { hiddenLabel: 'First', font: { fontFamily: 'inherit', size: '7px' }, offset: -5 },\n                    majorTicks: { offset: 2, interval: 2 },\n                    minorTicks: { offset: 2, interval: 0.4 }, minimum: 0, maximum: 12,\n                    pointers: [{\n                            value: 8,\n                            radius: '50%', pointerWidth: 2, color: '#00A8B5',\n                            animation: { enable: false }, cap: { radius: 0 }, needleTail: { length: '0%' }\n                        }], startAngle: 0, endAngle: 0, radius: '70%', lineStyle: { width: 2 }\n                }],\n            load: (args) => {\n            }\n        });\n        annotationGaugeTwo.current.appendTo('#subGaugeTwo');\n    };\n    return (<main><div className='control-pane'>\n            <style>{SAMPLE_CSS}</style>\n            <div className='control-section'>\n                <CircularGaugeComponent loaded={onChartLoad.bind(this)} resized={onResized.bind(this)} load={load.bind(this)} id='axis-background' background='transparent' ref={gauge}>\n                    <Inject services={[Annotations]}/>\n                    <AxesDirective>\n                        <AxisDirective startAngle={0} endAngle={0} radius='90%' minimum={0} maximum={12} majorTicks={{ height: 15, width: 2, interval: 1, offset: 5 }} lineStyle={{ width: 2 }} minorTicks={{ height: 10, width: 1, interval: 0.2, offset: 5 }} labelStyle={{ hiddenLabel: 'First', offset: 10, font: { fontFamily: 'inherit' } }}>\n                            <PointersDirective>\n                                <PointerDirective radius='70%' value={10.2} pointerWidth={3} needleStartWidth={2} animation={{ enable: false }} cap={{ radius: 5, color: 'white', border: { width: 1, color: '#00A8B5' } }} needleTail={{ length: '0%' }}/>\n                                <PointerDirective radius='100%' value={2} pointerWidth={3} needleStartWidth={1} animation={{ enable: false }} cap={{ radius: 5, color: 'white', border: { width: 1, color: '#00A8B5' } }} needleTail={{ length: '0%' }}/>\n                                <PointerDirective radius='90%' value={12} pointerWidth={3} needleStartWidth={1} animation={{ enable: false }} color='#00A8B5' cap={{ radius: 5, color: 'white', border: { width: 1, color: '#00A8B5' } }} needleTail={{ length: '25%', color: '#00A8B5' }}/>\n                            </PointersDirective>\n                            <AnnotationsDirective>\n                                <AnnotationDirective description='Sub gauge one' content='<div id=\"subGaugeOne\" style=\"margin-left: -50%\"></div>' angle={290} radius='0%' zIndex='1'/>\n                                <AnnotationDirective description='Sub gauge two' content='<div id=\"subGaugeTwo\" style=\"margin-left: -110%;margin-top: -50%;\"></div>' angle={90} radius='0%' zIndex='1'/>\n                            </AnnotationsDirective>\n                        </AxisDirective>\n                    </AxesDirective>\n                </CircularGaugeComponent>\n            </div>\n        </div>\n            <section id=\"action-description\" aria-label=\"Description of Circular Gauge sample\">\n                <p>This sample demonstrates how to create an analog clock that displays the time.</p>\n            </section>\n            <section id=\"description\" aria-label=\"Description of the Circular Gauge features demonstrated in this sample\">\n                <p>In this example, a clock has been created by adding axis, minor ticks, major ticks, and needles in a circular gauge and customizing it accordingly. In addition, the clock ticks, displaying the time in a lively manner.</p>\n                <p>\n                    More information on the circular gauge can be found in this <a target=\"_blank\" href=\"https://ej2.syncfusion.com/react/documentation/circular-gauge/getting-started/\">documentation section</a>.\n                </p>\n            </section>\n    </main>);\n};\nexport default Clock;\n\nconst root = createRoot(document.getElementById('sample'));\nroot.render(<Clock />);","dependencies":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-react-base\":\"*\",\"@syncfusion/ej2-circulargauge\":\"*\",\"@syncfusion/ej2-react-circulargauge\":\"*\",\"@syncfusion/ej2-pdf-export\":\"*\",\"@syncfusion/ej2-svg-base\":\"*\",\"markdown-spellcheck\":\"^1.3.1\",\"@syncfusion/ej2-icons\":\"*\",\"@syncfusion/ej2-react-charts\":\"*\",\"@syncfusion/ej2/base\":\"*\",\"@syncfusion/ej2-charts'; // Import the necessary types from Syncfusion\":\"*\"}"}