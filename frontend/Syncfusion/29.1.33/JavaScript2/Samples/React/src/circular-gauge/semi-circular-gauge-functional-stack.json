{"index.css":"/* css */","property-pane.js":"import * as ReactDOM from 'react-dom';\nimport * as React from 'react';\nimport { select } from '@syncfusion/ej2-base';\nexport class PropertyPane extends React.Component {\n    render() {\n        const mobilePropPane = select('.sb-mobile-prop-pane');\n        const isMobile = window.matchMedia('(max-width:550px)').matches;\n        return isMobile && mobilePropPane ?\n            ReactDOM.createPortal(<div className='property-panel-section'>\n                    <div className=\"property-panel-header\">\n                        {this.props.title}\n                    </div>\n                    <div className=\"property-panel-content\">\n                        {this.props.children}\n                    </div>\n                </div>, mobilePropPane)\n            :\n                (<div className='property-panel-section'>\n                    <div className=\"property-panel-header\">\n                        {this.props.title}\n                    </div>\n                    <div className=\"property-panel-content\">\n                        {this.props.children}\n                    </div>\n                </div>);\n    }\n}\n","index.html":"<!DOCTYPE html>\n<html>\n<head>\n    <title>Syncfusion React Sample</title>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\n    <meta name=\"author\" content=\"Syncfusion\" />\n    <link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\n</head>\n\n<body class=\"{{theme}}\">\n     <style>\n            .control-section\n            {\n                margin-top: 100px;\n            }\n    </style>\n    <div id='sample'>\n</body>\n</html>\n","index.js":"import { createRoot } from 'react-dom/client';\nimport './index.css';\nimport * as React from \"react\";\nimport { useEffect, useRef, useState } from \"react\";\nimport { CircularGaugeComponent, AxesDirective, AxisDirective, PointersDirective, PointerDirective } from '@syncfusion/ej2-react-circulargauge';\nimport { CheckBoxComponent } from \"@syncfusion/ej2-react-buttons\";\nimport { PropertyPane } from './property-pane';\n\nconst SAMPLE_CSS = `\n    .angleCheckBox {\n        padding-top: 0px !important;\n        padding-left: 0px !important;\n        margin-left: 0px\n    }\n    .e-view.fluent2 #property .angleCheckBox, .e-view.fluent2-dark #property .angleCheckBox {\n        padding-top: 0px; padding-left: 0px; margin-left: -8px\n    }\n    .e-view.fluent2-highcontrast #property .angleCheckBox {\n        margin-left: -8px !important;\n    }\n    `;\nconst SemiGauge = () => {\n    const [xValue, setXValue] = useState('50%');\n    const [yValue, setYValue] = useState('50%');\n    const [rangestart, setRangeStart] = useState('270째');\n    const [rangeEnd, setRangeEnd] = useState('90째');\n    const [radius1, setRadius] = useState('100%');\n    const [xCenter, setXCenter] = useState('50%');\n    const [yCenter, setYCenter] = useState('50%');\n    const [isMoveToCenter, setIsMoveToCenter] = useState(false);\n    const [disabled, setDisabled] = useState(false);\n    let gauge = useRef(null);\n    let startElement = useRef(null);\n    let endElement = useRef(null);\n    let xElement = useRef(null);\n    let yElement = useRef(null);\n    let radiusElement = useRef(null);\n    const load = (args) => {\n    };\n    const angleChange = (e) => {\n        if (e.checked) {\n            gauge.current.centerX = null;\n            gauge.current.centerY = null;\n            gauge.current.moveToCenter = true;\n            setDisabled(true);\n        }\n        else {\n            gauge.current.centerX = xElement.current.value + '%';\n            gauge.current.centerY = yElement.current.value + '%';\n            setDisabled(false);\n            gauge.current.moveToCenter = false;\n        }\n        gauge.current.refresh();\n    };\n    const start = () => {\n        let min = +startElement.current.value;\n        setRangeStart(min + '째');\n        gauge.current.axes[0].startAngle = min;\n        gauge.current.refresh();\n    };\n    const end = () => {\n        let max = +endElement.current.value;\n        setRangeEnd(max + '째');\n        gauge.current.axes[0].endAngle = max;\n        gauge.current.refresh();\n    };\n    const radius = () => {\n        let radius = +radiusElement.current.value;\n        setRadius(radius + '%');\n        gauge.current.axes[0].radius = '' + radius + '%';\n        gauge.current.refresh();\n    };\n    const centerX = () => {\n        let max = +xElement.current.value;\n        setXCenter(max + '%');\n        gauge.current.centerX = '' + max + '%';\n        gauge.current.refresh();\n    };\n    const centerY = () => {\n        let max = +yElement.current.value;\n        setYCenter(max + '%');\n        gauge.current.centerY = '' + max + '%';\n        gauge.current.refresh();\n    };\n    const hideLabel = (args) => {\n        gauge.current.axes[0].hideIntersectingLabel = args.checked;\n        gauge.current.refresh();\n    };\n    return (<main><div className='control-pane'>\n            <style>{SAMPLE_CSS}</style>\n            <div className='col-lg-8 control-section'>\n                <CircularGaugeComponent centerX={xValue} centerY={yValue} moveToCenter={isMoveToCenter} background='transparent' load={load.bind(this)} ref={gauge} id='gauge'>\n                    <AxesDirective>\n                        <AxisDirective radius='100%' startAngle={270} endAngle={90} minimum={0} maximum={100} hideIntersectingLabel={true} lineStyle={{ width: 3 }} labelStyle={{ font: { fontWeight: 'normal', fontFamily: 'inherit' }, format: \"{value}%\", position: 'Outside', autoAngle: true }} majorTicks={{ position: 'Inside', width: 2, height: 15, interval: 10 }} minorTicks={{ position: 'Inside', width: 1, height: 8, interval: 2 }}>\n                            <PointersDirective>\n                                <PointerDirective animation={{ enable: false }} value={30} radius='75%' pointerWidth={7} cap={{ radius: 8, border: { width: 0 } }} needleTail={{ length: '13%' }}/>\n                            </PointersDirective>\n                        </AxisDirective>\n                    </AxesDirective>\n                </CircularGaugeComponent>\n            </div>\n            {/* Property Panel */}\n            <div className='col-lg-4 property-section'>\n                <PropertyPane title='Properties'>\n                    <table id='property' role='none' title='Properties' className='property-panel-table' style={{ width: '100%', overflow: 'hidden' }}>\n                        <tbody>\n                            <tr style={{ height: '50px' }}>\n                                <td>\n                                    <div style={{ width: '110px', marginLeft: \"-10px\", fontSize: \"14px\" }}>Start Angle </div>\n                                </td>\n                                <td style={{ width: '40% ' }}>\n                                    <div>\n                                        <input type=\"range\" id=\"start\" defaultValue=\"270\" min=\"0\" max=\"360\" style={{ width: '85%' }} onChange={start.bind(this)} ref={startElement}/>\n                                    </div>\n                                </td>\n                                <td style={{ width: '10%' }}>\n                                    <div style={{ textAlign: 'center', paddingLeft: \"0px\", marginLeft: '-10px', fontSize: \"14px\" }}>\n                                        <span id='rangeStart'>{rangestart}</span>\n                                    </div>\n                                </td>\n                            </tr>\n                            <tr style={{ height: '50px' }}>\n                                <td>\n                                    <div style={{ width: '110px', marginLeft: \"-10px\", fontSize: \"14px\" }}>End Angle </div>\n                                </td>\n                                <td style={{ width: '40% ' }}>\n                                    <div>\n                                        <input type=\"range\" id=\"end\" defaultValue=\"90\" min=\"0\" max=\"360\" style={{ width: '85%' }} onChange={end.bind(this)} ref={endElement}/>\n                                    </div>\n                                </td>\n                                <td style={{ width: '10%' }}>\n                                    <div style={{ textAlign: 'center', paddingLeft: \"0px\", marginLeft: '-10px', fontSize: \"14px\" }}>\n                                        <span id='rangeEnd'>{rangeEnd}</span>\n                                    </div>\n                                </td>\n                            </tr>\n                            <tr style={{ height: '50px' }}>\n                                <td>\n                                    <div style={{ width: '110px', marginLeft: \"-10px\", fontSize: \"14px\" }}>Radius </div>\n                                </td>\n                                <td style={{ width: '40% ' }}>\n                                    <div>\n                                        <input type=\"range\" id=\"radius\" defaultValue=\"100\" min=\"30\" max=\"100\" style={{ width: '85%' }} onChange={radius.bind(this)} ref={radiusElement}/>\n                                    </div>\n                                </td>\n                                <td style={{ width: '10%' }}>\n                                    <div style={{ textAlign: 'center', paddingLeft: \"0px\", marginLeft: '-10px', fontSize: \"14px\" }}>\n                                        <span id='radius1'>{radius1}</span>\n                                    </div>\n                                </td>\n                            </tr>\n                            <tr>\n                                <td>\n                                    <div style={{ marginLeft: \"-10px\", fontSize: \"14px\" }}>Radius based on angle</div>\n                                </td>\n                                <td style={{ width: '40% ' }}>\n                                    <div className=\"angleCheckBox\">\n                                        <CheckBoxComponent id='angle' change={angleChange.bind(this)} style={{ paddingLeft: '0px' }}/>\n                                    </div>\n                                </td>\n                            </tr>\n                            <tr style={{ height: '50px' }}>\n                                <td>\n                                    <div style={{ width: '110px', marginLeft: \"-10px\", fontSize: \"14px\" }}>Center X </div>\n                                </td>\n                                <td style={{ width: '40% ' }}>\n                                    <div>\n                                        <input type=\"range\" id=\"centerX\" defaultValue=\"50\" min=\"0\" max=\"100\" style={{ width: '85%' }} onChange={centerX.bind(this)} ref={xElement} disabled={disabled}/>\n                                    </div>\n                                </td>\n                                <td style={{ width: '10%' }}>\n                                    <div style={{ textAlign: 'center', paddingLeft: \"0px\", marginLeft: '-10px', fontSize: \"14px\" }}>\n                                        <span id='center1'>{xCenter}</span>\n                                    </div>\n                                </td>\n                            </tr>\n                            <tr style={{ height: '50px' }}>\n                                <td>\n                                    <div style={{ width: '110px', marginLeft: \"-10px\", fontSize: \"14px\" }}>Center Y </div>\n                                </td>\n                                <td style={{ width: '40% ' }}>\n                                    <div>\n                                        <input type=\"range\" id=\"centerY\" defaultValue=\"50\" min=\"0\" max=\"100\" style={{ width: '85%' }} onChange={centerY.bind(this)} ref={yElement} disabled={disabled}/>\n                                    </div>\n                                </td>\n                                <td style={{ width: '10%' }}>\n                                    <div style={{ textAlign: 'center', paddingLeft: \"0px\", marginLeft: '-10px', fontSize: \"14px\" }}>\n                                        <span id='center2'>{yCenter}</span>\n                                    </div>\n                                </td>\n                            </tr>\n                            <tr>\n                                <td>\n                                    <div style={{ marginLeft: \"-10px\", fontSize: \"14px\" }}>Hide Intersecting Labels</div>\n                                </td>\n                                <td style={{ width: '40% ' }}>\n                                    <div className=\"angleCheckBox\">\n                                        <CheckBoxComponent id='hidelabel' checked={true} change={hideLabel.bind(this)} style={{ paddingLeft: '0px' }}/>\n                                    </div>\n                                </td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </PropertyPane>\n            </div>\n        </div>\n            <section id=\"action-description\" aria-label=\"Description of Circular Gauge sample\">\n                <p>This sample shows how to create semi-circular or quarter-circular gauges by modifying a circular gauge with different start and end angles.</p>\n            </section>\n            <section id=\"description\" aria-label=\"Description of the Circular Gauge features demonstrated in this sample\">\n                <p>In this example, a circular gauge is rendered with different start and end angles to create semi-circular or quarter-circular gauges. The radius, start angle, end angle, and center position of the circular gauge can all be customized using the options in the properties panel.</p>\n                <p>\n                    More information on the semi-circular or quarter-circular gauges can be found in this <a target=\"_blank\" href=\"https://ej2.syncfusion.com/react/documentation/circular-gauge/gauge-appearance/#radius-calculation-based-on-angles\">documentation section </a>.\n                </p>\n            </section>\n        </main>);\n};\nexport default SemiGauge;\n\nconst root = createRoot(document.getElementById('sample'));\nroot.render(<SemiGauge />);","dependencies":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-react-base\":\"*\",\"@syncfusion/ej2-circulargauge\":\"*\",\"@syncfusion/ej2-react-circulargauge\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-react-buttons\":\"*\",\"@syncfusion/ej2-pdf-export\":\"*\",\"@syncfusion/ej2-svg-base\":\"*\",\"markdown-spellcheck\":\"^1.3.1\",\"@syncfusion/ej2-react-charts\":\"*\",\"@syncfusion/ej2/base\":\"*\",\"@syncfusion/ej2-charts'; // Import the necessary types from Syncfusion\":\"*\"}"}