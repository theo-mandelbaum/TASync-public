{"index.css":"/* css */","property-pane.js":"import * as ReactDOM from 'react-dom';\nimport * as React from 'react';\nimport { select } from '@syncfusion/ej2-base';\nexport class PropertyPane extends React.Component {\n    render() {\n        const mobilePropPane = select('.sb-mobile-prop-pane');\n        const isMobile = window.matchMedia('(max-width:550px)').matches;\n        return isMobile && mobilePropPane ?\n            ReactDOM.createPortal(<div className='property-panel-section'>\n                    <div className=\"property-panel-header\">\n                        {this.props.title}\n                    </div>\n                    <div className=\"property-panel-content\">\n                        {this.props.children}\n                    </div>\n                </div>, mobilePropPane)\n            :\n                (<div className='property-panel-section'>\n                    <div className=\"property-panel-header\">\n                        {this.props.title}\n                    </div>\n                    <div className=\"property-panel-content\">\n                        {this.props.children}\n                    </div>\n                </div>);\n    }\n}\n","index.html":"<!DOCTYPE html>\n<html>\n<head>\n    <title>Syncfusion React Sample</title>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\n    <meta name=\"author\" content=\"Syncfusion\" />\n    <link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\n</head>\n\n<body class=\"{{theme}}\">\n     <style>\n            .control-section\n            {\n                margin-top: 100px;\n            }\n    </style>\n    <div id='sample'>\n</body>\n</html>\n","index.js":"import { createRoot } from 'react-dom/client';\nimport './index.css';\nimport * as React from \"react\";\nimport { CircularGaugeComponent, AxesDirective, AxisDirective, Inject, AnnotationDirective, PointersDirective, PointerDirective, RangesDirective, RangeDirective, AnnotationsDirective, Annotations } from '@syncfusion/ej2-react-circulargauge';\nimport { CheckBoxComponent } from \"@syncfusion/ej2-react-buttons\";\nimport { PropertyPane } from './property-pane';\nimport { SampleBase } from './sample-base';\nconst SAMPLE_CSS = `\n    .control-fluid {\n\t\tpadding: 0px !important;\n    }`;\nvar style1 = {\n    'height': '0px',\n    'width': '0px'\n};\nvar style2 = {\n    'stopColor': '#82b944',\n    'stopOpacity': 1\n};\nvar style3 = {\n    'stopColor': 'rgb(255,255,0)',\n    'stopOpacity': 1\n};\nvar style4 = {\n    'stopColor': 'red',\n    'stopOpacity': 1\n};\nexport class Speedometer extends SampleBase {\n    gauge;\n    pointerInterval;\n    rangeElement;\n    gapElement;\n    pointerValue = 40;\n    load(args) {\n    }\n    loaded(args) {\n        this.pointerInterval = setInterval(() => {\n            if (document.getElementById('container')) {\n                let dynamicPointerValue = Math.abs(this.pointerValue + ((Math.random() * 20) - 10));\n                if (this.gauge) {\n                    this.gauge.setPointerValue(0, 0, dynamicPointerValue);\n                    this.gauge.setAnnotationValue(0, 0, '<div style=\"width:90px;text-align:center;font-size:20px;font-family:inherit\">' + Math.round(dynamicPointerValue).toString() + 'km/h' + '</div>');\n                }\n            }\n            else {\n                clearInterval(+this.pointerInterval);\n            }\n        }, 2000);\n    }\n    rangeChange() {\n        if (this.rangeElement.checked === true) {\n            this.gapElement.disabled = true;\n            this.gauge.axes[0].ranges[0].start = 0;\n            this.gauge.axes[0].ranges[0].end = 120;\n            this.gauge.axes[0].ranges[0].startWidth = 5;\n            this.gauge.axes[0].ranges[0].endWidth = 35;\n            this.gauge.axes[0].ranges[0].color = 'url(#grad1)';\n            this.gauge.axes[0].ranges[1].start = null;\n            this.gauge.axes[0].ranges[1].end = null;\n            this.gauge.axes[0].ranges[1].startWidth = '';\n            this.gauge.axes[0].ranges[1].endWidth = '';\n            this.gauge.axes[0].ranges[1].color = '';\n            this.gauge.axes[0].ranges[2].start = null;\n            this.gauge.axes[0].ranges[2].end = null;\n            this.gauge.axes[0].ranges[2].startWidth = '';\n            this.gauge.axes[0].ranges[2].endWidth = '';\n            this.gauge.axes[0].ranges[2].color = '';\n            this.gauge.axes[0].ranges[3].start = null;\n            this.gauge.axes[0].ranges[3].end = null;\n            this.gauge.axes[0].ranges[3].startWidth = '';\n            this.gauge.axes[0].ranges[3].endWidth = '';\n            this.gauge.axes[0].ranges[3].color = '';\n            this.gauge.axes[0].ranges[4].start = null;\n            this.gauge.axes[0].ranges[4].end = null;\n            this.gauge.axes[0].ranges[4].startWidth = '';\n            this.gauge.axes[0].ranges[4].endWidth = '';\n            this.gauge.axes[0].ranges[4].color = '';\n            this.gauge.axes[0].ranges[5].start = null;\n            this.gauge.axes[0].ranges[5].end = null;\n            this.gauge.axes[0].ranges[5].startWidth = '';\n            this.gauge.axes[0].ranges[5].endWidth = '';\n            this.gauge.axes[0].ranges[5].color = '';\n            this.gauge.refresh();\n        }\n        else {\n            this.gapElement.disabled = false;\n            this.gauge.axes[0].ranges[0].start = 0;\n            this.gauge.axes[0].ranges[0].end = 20;\n            this.gauge.axes[0].ranges[0].startWidth = 5;\n            this.gauge.axes[0].ranges[0].endWidth = 10;\n            this.gauge.axes[0].ranges[0].color = '#82b944';\n            this.gauge.axes[0].ranges[1].start = 20;\n            this.gauge.axes[0].ranges[1].end = 40;\n            this.gauge.axes[0].ranges[1].startWidth = 10;\n            this.gauge.axes[0].ranges[1].endWidth = 15;\n            this.gauge.axes[0].ranges[1].color = '#a1cb43';\n            this.gauge.axes[0].ranges[2].start = 40;\n            this.gauge.axes[0].ranges[2].end = 60;\n            this.gauge.axes[0].ranges[2].startWidth = 15;\n            this.gauge.axes[0].ranges[2].endWidth = 20;\n            this.gauge.axes[0].ranges[2].color = '#ddec12';\n            this.gauge.axes[0].ranges[3].start = 60;\n            this.gauge.axes[0].ranges[3].end = 80;\n            this.gauge.axes[0].ranges[3].startWidth = 20;\n            this.gauge.axes[0].ranges[3].endWidth = 25;\n            this.gauge.axes[0].ranges[3].color = '#ffbc00';\n            this.gauge.axes[0].ranges[4].start = 80;\n            this.gauge.axes[0].ranges[4].end = 100;\n            this.gauge.axes[0].ranges[4].startWidth = 25;\n            this.gauge.axes[0].ranges[4].endWidth = 30;\n            this.gauge.axes[0].ranges[4].color = '#ff6000';\n            this.gauge.axes[0].ranges[5].start = 100;\n            this.gauge.axes[0].ranges[5].end = 120;\n            this.gauge.axes[0].ranges[5].startWidth = 30;\n            this.gauge.axes[0].ranges[5].endWidth = 35;\n            this.gauge.axes[0].ranges[5].color = 'red';\n            this.gauge.refresh();\n        }\n    }\n    gapChange() {\n        if (this.gapElement.checked) {\n            this.gauge.axes[0].rangeGap = 5;\n        }\n        else {\n            this.gauge.axes[0].rangeGap = null;\n        }\n        this.gauge.refresh();\n    }\n    render() {\n        return (<main><div className='control-pane'>\n                <style>\n                    {SAMPLE_CSS}\n                </style>\n                <div className='col-lg-8 control-section'>\n                    <svg style={style1}>\n                        <defs>\n                            <linearGradient id=\"grad1\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"0%\">\n                                <stop offset=\"0%\" style={style2}/>\n                                <stop offset=\"50%\" style={style3}/>\n                                <stop offset=\"100%\" style={style4}/>\n                            </linearGradient>\n                        </defs>\n                    </svg>\n                    <CircularGaugeComponent title='Speedometer' titleStyle={{ size: '18px', fontFamily: 'inherit' }} background='transparent' centerY='75%' load={this.load.bind(this)} loaded={this.loaded.bind(this)} ref={gauge => this.gauge = gauge} id='container'>\n                        <Inject services={[Annotations]}/>\n                        <AxesDirective>\n                            <AxisDirective radius='120%' startAngle={270} endAngle={90} minimum={0} maximum={120} lineStyle={{ width: 0 }} labelStyle={{\n                font: {\n                    size: '13px',\n                    fontFamily: 'inherit'\n                },\n                position: 'Outside',\n                autoAngle: true,\n            }} majorTicks={{ width: 0 }} minorTicks={{ width: 0 }}>\n                                <PointersDirective>\n                                    <PointerDirective animation={{ enable: false }} value={40} radius='80%' color='#757575' pointerWidth={7} cap={{\n                radius: 8,\n                color: '#757575',\n                border: { width: 0 }\n            }} needleTail={{\n                color: '#757575',\n                length: '15%'\n            }}/>\n                                </PointersDirective>\n                                <AnnotationsDirective>\n                                    <AnnotationDirective content='<div style=\"width:90px;text-align:center;font-size:20px;font-family:inherit\">40 km/h</div>' angle={0} zIndex='1' radius='30%'/>\n                                </AnnotationsDirective>\n                                <RangesDirective>\n                                    <RangeDirective start={0} end={20} startWidth={5} endWidth={10} radius='102%' color='#82b944'/>\n                                    <RangeDirective start={20} end={40} startWidth={10} endWidth={15} radius='102%' color='#a1cb43'/>\n                                    <RangeDirective start={40} end={60} startWidth={15} endWidth={20} radius='102%' color='#ddec12'/>\n                                    <RangeDirective start={60} end={80} startWidth={20} endWidth={25} radius='102%' color='#ffbc00'/>\n                                    <RangeDirective start={80} end={100} startWidth={25} endWidth={30} radius='102%' color='#ff6000'/>\n                                    <RangeDirective start={100} end={120} startWidth={30} endWidth={35} radius='102%' color='red'/>\n                                </RangesDirective>\n                            </AxisDirective>\n                        </AxesDirective>\n                    </CircularGaugeComponent>\n                </div>\n                {/* Property Panel */}\n                <div className='col-lg-4 property-section'>\n                    <PropertyPane title='Properties'>\n                        <table id='property' role='none' title='Properties' style={{ width: '100%' }}>\n                            <tbody>\n                                <tr style={{ height: '50px' }}>\n                                    <td style={{ width: '60%', fontSize: '14px' }}>\n                                        <div>Combine Ranges</div>\n                                    </td>\n                                    <td>\n                                        <div>\n                                            <CheckBoxComponent id='combineRange' change={this.rangeChange.bind(this)} ref={d => this.rangeElement = d}/>\n                                        </div>\n                                    </td>\n                                </tr>\n                                <tr style={{ height: '35px' }}>\n                                    <td style={{ width: '60%', fontSize: '14px' }}>\n                                        <div>Gap Between Ranges</div>\n                                    </td>\n                                    <td>\n                                        <div>\n                                            <CheckBoxComponent id='range' change={this.gapChange.bind(this)} ref={d => this.gapElement = d}/>\n                                        </div>\n                                    </td>\n                                </tr>\n                            </tbody>\n                        </table>\n                    </PropertyPane>\n                </div>\n            </div>\n                <section id=\"action-description\" aria-label=\"Description of Circular Gauge sample\">\n                    <p>\n                        This sample depicts the appearance of a speedometer rendered using the circular gauge. The pointer value is dynamically updated with random values in this case.\n                    </p>\n                </section>\n                <section id=\"description\" aria-label=\"Description of the Circular Gauge features demonstrated in this sample\">\n                    <p>\n                        In this example, you can see how to make a circular gauge look like a speedometer. Using the options in the properties panel, a gap can be added between ranges or ranges can be combined to form a single range.\n                    </p>\n                    <p>\n                        More information on the circular gauge can be found in this <a target=\"_blank\" href=\"https://ej2.syncfusion.com/react/documentation/circular-gauge/getting-started/\">documentation section </a>.\n                    </p>\n                </section>\n            </main>);\n    }\n}\n\nconst root = createRoot(document.getElementById('sample'));\nroot.render(<Speedometer />);","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n                this.rendereComplete();\n            });\n        }\n    }\n    export function updateSampleSection(){}\n    ","dependencies":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-react-base\":\"*\",\"@syncfusion/ej2-circulargauge\":\"*\",\"@syncfusion/ej2-react-circulargauge\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-react-buttons\":\"*\",\"@syncfusion/ej2-pdf-export\":\"*\",\"@syncfusion/ej2-svg-base\":\"*\",\"markdown-spellcheck\":\"^1.3.1\",\"@syncfusion/ej2-react-charts\":\"*\",\"@syncfusion/ej2/base\":\"*\",\"@syncfusion/ej2-charts'; // Import the necessary types from Syncfusion\":\"*\"}"}