{"index.css":"/* css */","property-pane.js":"import * as ReactDOM from 'react-dom';\nimport * as React from 'react';\nimport { select } from '@syncfusion/ej2-base';\nexport class PropertyPane extends React.Component {\n    render() {\n        const mobilePropPane = select('.sb-mobile-prop-pane');\n        const isMobile = window.matchMedia('(max-width:550px)').matches;\n        return isMobile && mobilePropPane ?\n            ReactDOM.createPortal(<div className='property-panel-section'>\n                    <div className=\"property-panel-header\">\n                        {this.props.title}\n                    </div>\n                    <div className=\"property-panel-content\">\n                        {this.props.children}\n                    </div>\n                </div>, mobilePropPane)\n            :\n                (<div className='property-panel-section'>\n                    <div className=\"property-panel-header\">\n                        {this.props.title}\n                    </div>\n                    <div className=\"property-panel-content\">\n                        {this.props.children}\n                    </div>\n                </div>);\n    }\n}\n","index.html":"<!DOCTYPE html>\n<html>\n<head>\n    <title>Syncfusion React Sample</title>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\n    <meta name=\"author\" content=\"Syncfusion\" />\n    <link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\n</head>\n\n<body class=\"{{theme}}\">\n     <style>\n            .control-section\n            {\n                margin-top: 100px;\n            }\n    </style>\n    <div id='sample'>\n</body>\n</html>\n","index.js":"import { createRoot } from 'react-dom/client';\nimport './index.css';\nimport * as React from \"react\";\nimport { useEffect, useRef } from \"react\";\nimport { CircularGaugeComponent, AxesDirective, AxisDirective, Inject, PointersDirective, PointerDirective, RangesDirective, RangeDirective, Print, PdfExport, ImageExport } from '@syncfusion/ej2-react-circulargauge';\n\nimport { ButtonComponent } from '@syncfusion/ej2-react-buttons';\nimport { DropDownListComponent } from '@syncfusion/ej2-react-dropdowns';\nimport { PropertyPane } from './property-pane';\nimport { TextBoxComponent } from \"@syncfusion/ej2-react-inputs\";\nconst SAMPLE_CSS = `\n    .control-fluid {\n\t\tpadding: 0px !important;\n    }`;\nconst Export = () => {\n    let mode = useRef(null);\n    let gauge = useRef(null);\n    let textElement;\n    let type = [\n        { value: 'JPEG' },\n        { value: 'PNG' },\n        { value: 'SVG' },\n        { value: 'PDF' }\n    ];\n    const load = (args) => {\n    };\n    const onClickPrint = (e) => {\n        gauge.current.print();\n    };\n    const onClickExport = (e) => {\n        gauge.current.export(mode.current.value, textElement.value);\n    };\n    return (<main><div className='control-pane'>\n            <style>{SAMPLE_CSS}</style>\n            <div className='control-section row'>\n                <div className='col-lg-8'>\n                    <CircularGaugeComponent load={load.bind(this)} id='gauge' background='transparent' allowPrint={true} allowPdfExport={true} allowImageExport={true} ref={gauge}>\n                        <Inject services={[Print, PdfExport, ImageExport]}/>\n                        <AxesDirective>\n                            <AxisDirective radius='80%' startAngle={0} endAngle={0} direction={'AntiClockWise'} majorTicks={{ width: 1, height: 25, interval: 10, position: \"Outside\", useRangeColor: true }} lineStyle={{ width: 0 }} minorTicks={{ width: 1, height: 8, interval: 2, position: \"Outside\", useRangeColor: true }} labelStyle={{ hiddenLabel: 'Last', offset: 2, font: { fontFamily: 'inherit' }, position: 'Outside', useRangeColor: true }}>\n                                <RangesDirective>\n                                    <RangeDirective start={0} end={32} radius='90%' startWidth={10} endWidth={35} color='#F8A197'/>\n                                    <RangeDirective start={32} end={70} radius='90%' startWidth={10} endWidth={35} color='#C45072'/>\n                                    <RangeDirective start={70} end={100} radius='90%' startWidth={10} endWidth={35} color='#1B679F'/>\n                                </RangesDirective>\n                                <PointersDirective>\n                                    <PointerDirective radius='0%' cap={{ radius: 0 }}/>\n                                </PointersDirective>\n                            </AxisDirective>\n                        </AxesDirective>\n                    </CircularGaugeComponent>\n                </div>\n                {/* Property Panel */}\n                <div className='col-lg-4 property-section'>\n                    <PropertyPane title='Properties'>\n                        <table id='property' role='none' title='Properties' className='property-panel-table' style={{ width: '100%' }}>\n                          <tbody>\n                            <tr style={{ height: \"50px\" }}>\n                                <td>\n                                    <div style={{ paddingLeft: '0px', fontSize: '14px' }}>Export Type</div>\n                                </td>\n                                <td>\n                                    <div>\n                                        <DropDownListComponent width={'100%'} id=\"etype\" value=\"JPEG\" ref={mode} dataSource={type} fields={{ text: 'value', value: 'value' }} placeholder=\"JPEG\"/>\n                                    </div>\n                                </td>\n                            </tr>\n                            <tr style={{ height: \"50px\" }}>\n                                <td>\n                                    <div style={{ paddingLeft: '0px', fontSize: '14px' }}>File Name</div>\n                                </td>\n                                <td>\n                                    <div style={{ 'marginTop': '0px' }}>\n                                        <TextBoxComponent className=\"e-input\" value='Circular Gauge' style={{ width: '100%', padding: '0px', paddingLeft: '5px' }} id=\"fileName\" ref={d => textElement = d}></TextBoxComponent>\n                                    </div>\n                                </td>\n                            </tr>\n                            <tr style={{ height: '60px' }}>\n                                <td align=\"right\" style={{ paddingRight: '5%' }}>\n                                    <ButtonComponent onClick={onClickExport.bind(this)} isPrimary={true}>Export</ButtonComponent>\n                                </td>\n                                <td align=\"left\" style={{ paddingLeft: '5%' }}>\n                                    <ButtonComponent onClick={onClickPrint.bind(this)} isPrimary={true}>Print</ButtonComponent>\n                                </td>\n                            </tr>\n                          </tbody>\n                        </table>\n                    </PropertyPane>\n                </div>\n            </div>\n        </div>\n            <section id=\"action-description\" aria-label=\"Description of Circular Gauge sample\">\n                <p>This sample demonstrates the print and export functionalities of the circular gauge.</p>\n            </section>\n            <section id=\"description\" aria-label=\"Description of the Circular Gauge features demonstrated in this sample\">\n                <p>\n                    In this example, you can see how to print and export the rendered circular gauge. You can add print functionality by using the <a target=\"_blank\" href=\"https://ej2.syncfusion.com/react/documentation/api/circular-gauge/#print\">print</a> method when <a target=\"_blank\" href=\"https://ej2.syncfusion.com/react/documentation/api/circular-gauge/#allowprint\">allowPrint</a> is set as <b>true</b>. Also, you can add export functionality by using the <a target=\"_blank\" href=\"https://ej2.syncfusion.com/react/documentation/api/circular-gauge/#export\">export</a> method when <a target=\"_blank\" href=\"https://ej2.syncfusion.com/react/documentation/api/circular-gauge/#allowimageexport\">allowImageExport</a> and <a target=\"_blank\" href=\"https://ej2.syncfusion.com/react/documentation/api/circular-gauge/#allowpdfexport\">allowPdfExport</a> are set as <b>true</b>. The circular gauge can be exported to JPEG, PNG, SVG, and PDF formats.\n                </p>\n                <p>\n                    More information about print and export can be found in this <a target=\"_blank\" href=\"https://ej2.syncfusion.com/react/documentation/circular-gauge/gauge-print-and-export/\">documentation section</a>.\n                </p>\n            </section>\n        </main>);\n};\nexport default Export;\n\nconst root = createRoot(document.getElementById('sample'));\nroot.render(<Export />);","dependencies":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-react-base\":\"*\",\"@syncfusion/ej2-circulargauge\":\"*\",\"@syncfusion/ej2-react-circulargauge\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-react-buttons\":\"*\",\"@syncfusion/ej2-dropdowns\":\"*\",\"@syncfusion/ej2-react-dropdowns\":\"*\",\"@syncfusion/ej2-inputs\":\"*\",\"@syncfusion/ej2-react-inputs\":\"*\",\"@syncfusion/ej2-react-charts\":\"*\",\"@syncfusion/ej2/base\":\"*\",\"@syncfusion/ej2-charts'; // Import the necessary types from Syncfusion\":\"*\"}"}