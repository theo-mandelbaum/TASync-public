{"index.css":"/* css */","property-pane.js":"import * as ReactDOM from 'react-dom';\nimport * as React from 'react';\nimport { select } from '@syncfusion/ej2-base';\nexport class PropertyPane extends React.Component {\n    render() {\n        const mobilePropPane = select('.sb-mobile-prop-pane');\n        const isMobile = window.matchMedia('(max-width:550px)').matches;\n        return isMobile && mobilePropPane ?\n            ReactDOM.createPortal(<div className='property-panel-section'>\n                    <div className=\"property-panel-header\">\n                        {this.props.title}\n                    </div>\n                    <div className=\"property-panel-content\">\n                        {this.props.children}\n                    </div>\n                </div>, mobilePropPane)\n            :\n                (<div className='property-panel-section'>\n                    <div className=\"property-panel-header\">\n                        {this.props.title}\n                    </div>\n                    <div className=\"property-panel-content\">\n                        {this.props.children}\n                    </div>\n                </div>);\n    }\n}\n","index.html":"<!DOCTYPE html>\n<html>\n<head>\n    <title>Syncfusion React Sample</title>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\n    <meta name=\"author\" content=\"Syncfusion\" />\n    <link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\n</head>\n\n<body class=\"{{theme}}\">\n     <style>\n            .control-section\n            {\n                margin-top: 100px;\n            }\n    </style>\n    <div id='sample'>\n</body>\n</html>\n","index.js":"import { createRoot } from 'react-dom/client';\nimport './index.css';\nimport * as React from \"react\";\nimport { CircularGaugeComponent, AxesDirective, AxisDirective, PointersDirective, PointerDirective } from '@syncfusion/ej2-react-circulargauge';\nimport { CheckBoxComponent } from \"@syncfusion/ej2-react-buttons\";\nimport { PropertyPane } from './property-pane';\nimport { SampleBase } from './sample-base';\nconst SAMPLE_CSS = `\n    .angleCheckBox {\n        padding-top: 0px !important;\n        padding-left: 0px !important;\n        margin-left: 0px\n    }\n    .e-view.fluent2 #property .angleCheckBox, .e-view.fluent2-dark #property .angleCheckBox {\n        padding-top: 0px; padding-left: 0px; margin-left: -8px\n    }\n    .e-view.fluent2-highcontrast #property .angleCheckBox {\n        margin-left: -8px !important;\n    }\n    `;\nexport class SemiGauge extends SampleBase {\n    gauge;\n    startElement;\n    endElement;\n    xElement;\n    yElement;\n    radiusElement;\n    angleElement;\n    load(args) {\n    }\n    angleChange(e) {\n        let centerX = document.getElementById('centerX');\n        let centerY = document.getElementById('centerY');\n        if (e.checked) {\n            this.gauge.centerX = null;\n            this.gauge.centerY = null;\n            this.gauge.moveToCenter = true;\n            centerX.disabled = true;\n            centerY.disabled = true;\n        }\n        else {\n            this.gauge.centerX = centerX.value + '%';\n            this.gauge.centerY = centerY.value + '%';\n            centerX.disabled = false;\n            centerY.disabled = false;\n            this.gauge.moveToCenter = false;\n        }\n        this.gauge.refresh();\n    }\n    start() {\n        let min = +this.startElement.value;\n        document.getElementById('rangeStart').innerHTML = min + '째';\n        this.gauge.axes[0].startAngle = min;\n        this.gauge.refresh();\n    }\n    end() {\n        let max = +this.endElement.value;\n        document.getElementById('rangeEnd').innerHTML = max + '째';\n        this.gauge.axes[0].endAngle = max;\n        this.gauge.refresh();\n    }\n    radius() {\n        let radius = +this.radiusElement.value;\n        document.getElementById('radius1').innerHTML = radius + '%';\n        this.gauge.axes[0].radius = '' + radius + '%';\n        this.gauge.refresh();\n    }\n    centerX() {\n        let max = +this.xElement.value;\n        document.getElementById('center1').innerHTML = max + '%';\n        this.gauge.centerX = '' + max + '%';\n        this.gauge.refresh();\n    }\n    centerY() {\n        let max = +this.yElement.value;\n        document.getElementById('center2').innerHTML = max + '%';\n        this.gauge.centerY = '' + max + '%';\n        this.gauge.refresh();\n    }\n    hideLabel() {\n        let labelIntersect = document.getElementById('hidelabel').checked;\n        this.gauge.axes[0].hideIntersectingLabel = labelIntersect;\n        this.gauge.refresh();\n    }\n    render() {\n        return (<main><div className='control-pane'>\n                <style>\n                    {SAMPLE_CSS}\n                </style>\n                <div className='col-lg-8 control-section'>\n                    <CircularGaugeComponent centerX='50%' centerY='50%' moveToCenter={false} background='transparent' load={this.load.bind(this)} ref={gauge => this.gauge = gauge} id='gauge'>\n                        <AxesDirective>\n                            <AxisDirective radius='100%' startAngle={270} endAngle={90} minimum={0} maximum={100} hideIntersectingLabel={true} lineStyle={{ width: 3 }} labelStyle={{\n                font: {\n                    fontWeight: 'normal',\n                    fontFamily: 'inherit'\n                },\n                format: \"{value}%\",\n                position: 'Outside',\n                autoAngle: true\n            }} majorTicks={{ position: 'Inside', width: 2, height: 15, interval: 10 }} minorTicks={{ position: 'Inside', width: 1, height: 8, interval: 2 }}>\n                                <PointersDirective>\n                                    <PointerDirective animation={{ enable: false }} value={30} radius='75%' pointerWidth={7} cap={{\n                radius: 8,\n                border: { width: 0 }\n            }} needleTail={{\n                length: '13%'\n            }}/>\n                                </PointersDirective>\n                            </AxisDirective>\n                        </AxesDirective>\n                    </CircularGaugeComponent>\n                </div>\n                {/* Property Panel */}\n                <div className='col-lg-4 property-section'>\n                    <PropertyPane title='Properties'>\n                        <table id='property' role='none' title='Properties' className='property-panel-table' style={{ width: '100%', overflow: 'hidden' }}>\n                            <tbody>\n                                <tr style={{ height: '50px' }}>\n                                    <td>\n                                        <div style={{ width: '110px', marginLeft: \"-10px\", fontSize: \"14px\" }}>Start Angle </div>\n                                    </td>\n                                    <td style={{ width: '40% ' }}>\n                                        <div>\n                                            <input type=\"range\" id=\"start\" defaultValue=\"270\" min=\"0\" max=\"360\" style={{ width: '85%' }} onChange={this.start.bind(this)} ref={d => this.startElement = d}/>\n                                        </div>\n                                    </td>\n                                    <td style={{ width: '10%' }}>\n                                        <div style={{ textAlign: 'center', paddingLeft: \"0px\", marginLeft: '-10px', fontSize: \"14px\" }}>\n                                            <span id='rangeStart'>270째</span>\n                                        </div>\n                                    </td>\n                                </tr>\n                                <tr style={{ height: '50px' }}>\n                                    <td>\n                                        <div style={{ width: '110px', marginLeft: \"-10px\", fontSize: \"14px\" }}>End Angle </div>\n                                    </td>\n                                    <td style={{ width: '40% ' }}>\n                                        <div>\n                                            <input type=\"range\" id=\"end\" defaultValue=\"90\" min=\"0\" max=\"360\" style={{ width: '85%' }} onChange={this.end.bind(this)} ref={d => this.endElement = d}/>\n                                        </div>\n                                    </td>\n                                    <td style={{ width: '10%' }}>\n                                        <div style={{ textAlign: 'center', paddingLeft: \"0px\", marginLeft: '-10px', fontSize: \"14px\" }}>\n                                            <span id='rangeEnd'>90째</span>\n                                        </div>\n                                    </td>\n                                </tr>\n                                <tr style={{ height: '50px' }}>\n                                    <td>\n                                        <div style={{ width: '110px', marginLeft: \"-10px\", fontSize: \"14px\" }}>Radius </div>\n                                    </td>\n                                    <td style={{ width: '40% ' }}>\n                                        <div>\n                                            <input type=\"range\" id=\"radius\" defaultValue=\"100\" min=\"30\" max=\"100\" style={{ width: '85%' }} onChange={this.radius.bind(this)} ref={d => this.radiusElement = d}/>\n                                        </div>\n                                    </td>\n                                    <td style={{ width: '10%' }}>\n                                        <div style={{ textAlign: 'center', paddingLeft: \"0px\", marginLeft: '-10px', fontSize: \"14px\" }}>\n                                            <span id='radius1'>100%</span>\n                                        </div>\n                                    </td>\n                                </tr>\n                                <tr>\n                                    <td>\n                                        <div style={{ marginLeft: \"-10px\", fontSize: \"14px\" }}>Radius based on angle</div>\n                                    </td>\n                                    <td style={{ width: '40% ' }}>\n                                        <div className=\"angleCheckBox\">\n                                            <CheckBoxComponent id='angle' change={this.angleChange.bind(this)} ref={d => this.angleElement = d} style={{ paddingLeft: '0px' }}/>\n                                        </div>\n                                    </td>\n                                </tr>\n                                <tr style={{ height: '50px' }}>\n                                    <td>\n                                        <div style={{ width: '110px', marginLeft: \"-10px\", fontSize: \"14px\" }}>Center X </div>\n                                    </td>\n                                    <td style={{ width: '40% ' }}>\n                                        <div>\n                                            <input type=\"range\" id=\"centerX\" defaultValue=\"50\" min=\"0\" max=\"100\" style={{ width: '85%' }} onChange={this.centerX.bind(this)} ref={d => this.xElement = d}/>\n                                        </div>\n                                    </td>\n                                    <td style={{ width: '10%' }}>\n                                        <div style={{ textAlign: 'center', paddingLeft: \"0px\", marginLeft: '-10px', fontSize: \"14px\" }}>\n                                            <span id='center1'>50%</span>\n                                        </div>\n                                    </td>\n                                </tr>\n                                <tr style={{ height: '50px' }}>\n                                    <td>\n                                        <div style={{ width: '110px', marginLeft: \"-10px\", fontSize: \"14px\" }}>Center Y </div>\n                                    </td>\n                                    <td style={{ width: '40% ' }}>\n                                        <div>\n                                            <input type=\"range\" id=\"centerY\" defaultValue=\"50\" min=\"0\" max=\"100\" style={{ width: '85%' }} onChange={this.centerY.bind(this)} ref={d => this.yElement = d}/>\n                                        </div>\n                                    </td>\n                                    <td style={{ width: '10%' }}>\n                                        <div style={{ textAlign: 'center', paddingLeft: \"0px\", marginLeft: '-10px', fontSize: \"14px\" }}>\n                                            <span id='center2'>50%</span>\n                                        </div>\n                                    </td>\n                                </tr>\n                                <tr>\n                                    <td>\n                                        <div style={{ marginLeft: \"-10px\", fontSize: \"14px\" }}>Hide Intersecting Labels</div>\n                                    </td>\n                                    <td style={{ width: '40% ' }}>\n                                        <div className=\"angleCheckBox\">\n                                            <CheckBoxComponent id='hidelabel' checked={true} change={this.hideLabel.bind(this)} ref={d => this.angleElement = d} style={{ paddingLeft: '0px' }}/>\n                                        </div>\n                                    </td>\n                                </tr>\n                            </tbody>\n                        </table>\n                    </PropertyPane>\n                </div>\n            </div>\n                <section id=\"action-description\" aria-label=\"Description of Circular Gauge sample\">\n                    <p>\n                        This sample shows how to create semi-circular or quarter-circular gauges by modifying a circular gauge with different start and end angles.\n                    </p>\n                </section>\n                <section id=\"description\" aria-label=\"Description of the Circular Gauge features demonstrated in this sample\">\n                    <p>\n                        In this example, a circular gauge is rendered with different start and end angles to create semi-circular or quarter-circular gauges. The radius, start angle, end angle, and center position of the circular gauge can all be customized using the options in the properties panel.\n                    </p>\n                    <p>\n                        More information on the semi-circular or quarter-circular gauges can be found in this <a target=\"_blank\" href=\"https://ej2.syncfusion.com/react/documentation/circular-gauge/gauge-appearance/#radius-calculation-based-on-angles\">documentation section </a>.\n                    </p>\n                </section>\n            </main>);\n    }\n}\n\nconst root = createRoot(document.getElementById('sample'));\nroot.render(<SemiGauge />);","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n                this.rendereComplete();\n            });\n        }\n    }\n    export function updateSampleSection(){}\n    ","dependencies":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-react-base\":\"*\",\"@syncfusion/ej2-circulargauge\":\"*\",\"@syncfusion/ej2-react-circulargauge\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-react-buttons\":\"*\",\"@syncfusion/ej2-pdf-export\":\"*\",\"@syncfusion/ej2-svg-base\":\"*\",\"markdown-spellcheck\":\"^1.3.1\",\"@syncfusion/ej2-react-charts\":\"*\",\"@syncfusion/ej2/base\":\"*\",\"@syncfusion/ej2-charts'; // Import the necessary types from Syncfusion\":\"*\"}"}