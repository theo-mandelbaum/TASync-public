{"index.css":"/* css */","property-pane.js":"import * as ReactDOM from 'react-dom';\nimport * as React from 'react';\nimport { select } from '@syncfusion/ej2-base';\nexport class PropertyPane extends React.Component {\n    render() {\n        const mobilePropPane = select('.sb-mobile-prop-pane');\n        const isMobile = window.matchMedia('(max-width:550px)').matches;\n        return isMobile && mobilePropPane ?\n            ReactDOM.createPortal(<div className='property-panel-section'>\n                    <div className=\"property-panel-header\">\n                        {this.props.title}\n                    </div>\n                    <div className=\"property-panel-content\">\n                        {this.props.children}\n                    </div>\n                </div>, mobilePropPane)\n            :\n                (<div className='property-panel-section'>\n                    <div className=\"property-panel-header\">\n                        {this.props.title}\n                    </div>\n                    <div className=\"property-panel-content\">\n                        {this.props.children}\n                    </div>\n                </div>);\n    }\n}\n","index.html":"<!DOCTYPE html>\n<html>\n<head>\n    <title>Syncfusion React Sample</title>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\n    <meta name=\"author\" content=\"Syncfusion\" />\n    <link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\n</head>\n\n<body class=\"{{theme}}\">\n     <style>\n            .control-section\n            {\n                margin-top: 100px;\n            }\n    </style>\n    <div id='sample'>\n</body>\n</html>\n","index.js":"import { createRoot } from 'react-dom/client';\nimport './index.css';\nimport * as React from 'react';\nimport { PropertyPane } from './property-pane';\nimport { CircularGaugeComponent, AxesDirective, AxisDirective, Inject, AnnotationsDirective, AnnotationDirective, PointersDirective, PointerDirective, RangesDirective, RangeDirective, Annotations, } from '@syncfusion/ej2-react-circulargauge';\nimport { CheckBoxComponent } from \"@syncfusion/ej2-react-buttons\";\nimport { SampleBase } from './sample-base';\nconst SAMPLE_CSS = `\n    .pointerDragCheckBox {\n        padding-left: 10px;\n        margin-left: -4px;\n        padding-top: 0px;\n    }\n    .e-view.fluent2 #property .pointerDragCheckBox, .e-view.fluent2-dark #property .pointerDragCheckBox {\n        padding-left: 0px;\n        margin-left: -4px !important;\n        padding-top: 0px;\n    }\n    .e-view.fluent2-highcontrast #property .pointerDragCheckBox {\n        margin-left: -12px !important;\n    }\n    `;\nexport class Drag extends SampleBase {\n    gauge;\n    drag;\n    pointerDrag;\n    rangesDrag;\n    content = '<div style=\"font-size: 14px;color:#E5C31C;font-weight: lighter;font-style: oblique;\"><span>';\n    onChartLoad(args) {\n        document.getElementById('drag-container').setAttribute('title', '');\n    }\n    ;\n    dragMove(args) {\n        if (args.type.indexOf('pointer') > -1) {\n            document.getElementById('pointerValue').innerHTML = String(Math.round(args.currentValue));\n            this.drag.value = Math.round(args.currentValue).toString();\n            this.gauge.setAnnotationValue(0, 0, this.content + Math.round(args.currentValue) + ' MPH</span></div > ');\n        }\n    }\n    ;\n    dragEnd(args) {\n        if (isNaN(args.rangeIndex)) {\n            this.setPointersValue(this.gauge, Math.round(args.currentValue));\n        }\n    }\n    ;\n    load(args) {\n    }\n    dragChange() {\n        let pointerValue = +this.drag.value;\n        document.getElementById('pointerValue').innerHTML = String(Math.round(pointerValue));\n        this.setPointersValue(this.gauge, pointerValue);\n    }\n    pointerDragChange() {\n        let value = this.pointerDrag.checked;\n        this.gauge.enablePointerDrag = value;\n    }\n    rangesDragChange() {\n        let value = this.rangesDrag.checked;\n        this.gauge.enableRangeDrag = value;\n    }\n    setPointersValue(circulargauge, pointerValue) {\n        let color;\n        if (pointerValue >= 0 && pointerValue <= 40) {\n            color = '#30B32D';\n        }\n        else if (pointerValue >= 40 && pointerValue <= 100) {\n            color = '#E5C31C';\n        }\n        else {\n            color = '#F03E3E';\n        }\n        circulargauge.axes[0].pointers[0].color = color;\n        circulargauge.axes[0].pointers[1].color = color;\n        circulargauge.axes[0].pointers[0].animation.enable = false;\n        circulargauge.axes[0].pointers[1].animation.enable = false;\n        circulargauge.axes[0].pointers[0].needleTail.color = color;\n        circulargauge.axes[0].pointers[1].needleTail.color = color;\n        circulargauge.axes[0].pointers[0].cap.border.color = color;\n        circulargauge.axes[0].pointers[1].cap.border.color = color;\n        circulargauge.setPointerValue(0, 1, pointerValue);\n        circulargauge.setPointerValue(0, 0, pointerValue);\n        this.content = '<div style=\"font-size: 14px;color:' + color + ';font-weight: lighter;font-style: oblique;\"><span>';\n        circulargauge.setAnnotationValue(0, 0, this.content + pointerValue + ' MPH</span></div>');\n    }\n    render() {\n        return (<main><div className='control-pane'>\n                <div className='control-section row'>\n                    <div className='col-lg-8'>\n\n                        <CircularGaugeComponent load={this.load.bind(this)} loaded={this.onChartLoad.bind(this)} background='transparent' dragMove={this.dragMove.bind(this)} dragEnd={this.dragEnd.bind(this)} id='drag-container' ref={gauge => this.gauge = gauge} enablePointerDrag={true} enableRangeDrag={false}>\n                            <Inject services={[Annotations]}/>\n                            <AxesDirective>\n                                <AxisDirective startAngle={220} endAngle={140} radius='80%' minimum={0} maximum={120} majorTicks={{\n                useRangeColor: true\n            }} lineStyle={{ width: 0 }} minorTicks={{\n                useRangeColor: true\n            }} labelStyle={{\n                useRangeColor: true,\n                font: {\n                    fontFamily: 'inherit'\n                }\n            }}>\n                                    <AnnotationsDirective>\n                                        <AnnotationDirective content='<div style=\"font-size: 14px;color:#E5C31C;font-weight: lighter;font-style: oblique;margin-left:-20px;\"><span>70 MPH</span></div>' angle={180} radius='45%' zIndex='1'>\n                                        </AnnotationDirective>\n                                    </AnnotationsDirective>\n                                    <PointersDirective>\n                                        <PointerDirective value={70} radius='60%' markerWidth={5} cap={{\n                radius: 10, border: { width: 5, color: '#E5C31C' }\n            }} needleTail={{\n                length: '0%', color: '#E5C31C'\n            }} color='#E5C31C'/>\n                                        <PointerDirective description='Marker pointer value : 70' value={70} radius='110%' color='#E5C31C' markerWidth={20} markerHeight={20} type='Marker' markerShape='InvertedTriangle'></PointerDirective>\n                                    </PointersDirective>\n                                    <PointerDirective description='Needle pointer value : 70' value={70} type=\"Marker\" markerShape='InvertedTriangle' radius='110%' markerHeight={20} color='#E5C31C' markerWidth={20}/>\n                                    <RangesDirective>\n                                        <RangeDirective start={0} end={40} radius='108%' color='#30B32D' startWidth={8} endWidth={8}/>\n                                        <RangeDirective start={40} end={100} radius='108%' color='#E5C31C' startWidth={8} endWidth={8}/>\n                                        <RangeDirective start={100} end={120} radius='108%' color='#F03E3E' startWidth={8} endWidth={8}/>\n                                    </RangesDirective>\n                                </AxisDirective>\n                            </AxesDirective>\n                        </CircularGaugeComponent>\n                    </div>\n                    {/* Property Panel */}\n                    <div className='col-lg-4 property-section'>\n                        <PropertyPane title='Properties'>\n                            <table id='property' role='none' title='Properties' className='property-panel-table' style={{ width: '100%', marginLeft: \"-10px\" }}>\n                                <tbody>\n                                    <tr style={{ height: \"50px\" }}>\n                                        <td style={{ width: \"50%\" }}>\n                                            <div style={{ width: \"110%\", fontSize: \"14px\" }}>Pointer Value </div>\n                                        </td>\n                                        <td style={{ width: \"40%\" }}>\n                                            <div style={{ marginLeft: '5px' }}>\n                                                <input type=\"range\" id=\"value\" onChange={this.dragChange.bind(this)} ref={d => this.drag = d} defaultValue=\"70\" min=\"0\" max=\"120\" style={{ width: \"100%\", paddingLeft: '0px' }}/>\n                                            </div>\n                                        </td>\n                                        <td style={{ width: '10%' }}>\n                                            <div style={{ textAlign: 'center' }}>\n                                                <span id='pointerValue' style={{ fontSize: \"14px\" }}>70</span>\n                                            </div>\n                                        </td>\n                                    </tr>\n                                    <tr style={{ height: \"50px\" }}>\n                                        <td style={{ width: \"20%\" }}>\n                                            <div id='enablePointer' style={{ width: \"90%\", fontSize: \"14px\" }}>Allow Pointer Drag</div>\n                                        </td>\n                                        <td style={{ width: \"49%\" }}>\n                                            <div className='pointerDragCheckBox'>\n                                                <CheckBoxComponent id='enable' checked={true} change={this.pointerDragChange.bind(this)} ref={d => this.pointerDrag = d}/>\n                                            </div>\n                                        </td>\n                                    </tr>\n                                    <tr style={{ height: \"50px\" }}>\n                                        <td style={{ width: \"20%\" }}>\n                                            <div id='enablePointer' style={{ width: \"90%\", fontSize: \"14px\" }}>Allow Ranges Drag</div>\n                                        </td>\n                                        <td style={{ width: \"40%\" }}>\n                                            <div className='pointerDragCheckBox'>\n                                                <CheckBoxComponent id='rangeDragEnable' checked={false} change={this.rangesDragChange.bind(this)} ref={d => this.rangesDrag = d}/>\n                                            </div>\n                                        </td>\n                                    </tr>\n                                </tbody>\n                            </table>\n                        </PropertyPane>\n                    </div>\n                </div>\n            </div>\n                <section id=\"action-description\" aria-label=\"Description of Circular Gauge sample\">\n                    <p>\n                        This sample illustrates dragging a pointer and a range in a circular gauge. End-user can drag the pointer and the range by enabling the pointer drag and range drag options.\n                    </p>\n                </section>\n                <section id=\"description\" aria-label=\"Description of the Circular Gauge features demonstrated in this sample\">\n                    <p>\n                        In this example, you can see how to move the pointer and range in the circular gauge via drag action. The <a target='_blank' href='https://ej2.syncfusion.com/react/documentation/api/circular-gauge/#enablepointerdrag'>enablePointerDrag</a> property can be used to enable or disable the pointer drag functionality. Similarly, the <a target='_blank' href='https://ej2.syncfusion.com/react/documentation/api/circular-gauge/#enablerangedrag'>enableRangeDrag</a> property can be used to enable or disable the range drag functionality.\n                    </p>\n                    <p>\n                        More information on the pointer drag can be found in this <a target=\"_blank\" href=\"https://ej2.syncfusion.com/react/documentation/circular-gauge/gauge-pointers/#dragging-pointer\">documentation section</a>. Likewise, the range drag information can be found in this <a target=\"_blank\" href=\"https://ej2.syncfusion.com/react/documentation/circular-gauge/gauge-ranges/#dragging-range\">documentation section</a>.\n                    </p>\n                </section>\n            </main>);\n    }\n}\n\nconst root = createRoot(document.getElementById('sample'));\nroot.render(<Drag />);","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n                this.rendereComplete();\n            });\n        }\n    }\n    export function updateSampleSection(){}\n    ","dependencies":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-react-base\":\"*\",\"@syncfusion/ej2-circulargauge\":\"*\",\"@syncfusion/ej2-react-circulargauge\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-react-buttons\":\"*\",\"@syncfusion/ej2-react-charts\":\"*\",\"@syncfusion/ej2/base\":\"*\",\"@syncfusion/ej2-charts'; // Import the necessary types from Syncfusion\":\"*\"}"}