{"index.css":"/* css */","property-pane.js":"import * as ReactDOM from 'react-dom';\nimport * as React from 'react';\nimport { select } from '@syncfusion/ej2-base';\nexport class PropertyPane extends React.Component {\n    render() {\n        const mobilePropPane = select('.sb-mobile-prop-pane');\n        const isMobile = window.matchMedia('(max-width:550px)').matches;\n        return isMobile && mobilePropPane ?\n            ReactDOM.createPortal(<div className='property-panel-section'>\n                    <div className=\"property-panel-header\">\n                        {this.props.title}\n                    </div>\n                    <div className=\"property-panel-content\">\n                        {this.props.children}\n                    </div>\n                </div>, mobilePropPane)\n            :\n                (<div className='property-panel-section'>\n                    <div className=\"property-panel-header\">\n                        {this.props.title}\n                    </div>\n                    <div className=\"property-panel-content\">\n                        {this.props.children}\n                    </div>\n                </div>);\n    }\n}\n","index.html":"<!DOCTYPE html>\n<html>\n<head>\n    <title>Syncfusion React Sample</title>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\n    <meta name=\"author\" content=\"Syncfusion\" />\n    <link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\n</head>\n\n<body class=\"{{theme}}\">\n     <style>\n            .control-section\n            {\n                margin-top: 100px;\n            }\n    </style>\n    <div id='sample'>\n</body>\n</html>\n","index.js":"import { createRoot } from 'react-dom/client';\nimport './index.css';\nimport * as React from 'react';\nimport { CircularGaugeComponent, AxesDirective, AxisDirective, Inject, PointersDirective, PointerDirective, RangesDirective, RangeDirective, GaugeTooltip, } from '@syncfusion/ej2-react-circulargauge';\nimport { SampleBase } from './sample-base';\nconst SAMPLE_CSS = `\n    .control-fluid {\n\t\tpadding: 0px !important;\n    }\n    #templateWrap img {\n        border-radius: 30px;\n        width: 30px;\n        height: 30px;\n        margin: 0 auto;\n    }\n\t #templateWrap {\n        background: #fff;\n        padding: 3px;\n        border-radius: 2px;\n    }\n    #templateWrap .des {\n        float: right;\n        padding-left: 10px;\n        line-height: 30px;\n    }`;\nexport class Tooltip extends SampleBase {\n    gauge;\n    onChartLoad(args) {\n        document.getElementById('tooltip-container').setAttribute('title', '');\n    }\n    ;\n    load(args) {\n    }\n    dragEnd(args) {\n        if (args.currentValue >= 0 && args.currentValue <= 50) {\n            args.pointer.color = \"#3A5DC8\";\n            args.pointer.cap.border.color = \"#3A5DC8\";\n        }\n        else {\n            args.pointer.color = \"#33BCBD\";\n            args.pointer.cap.border.color = \"#33BCBD\";\n        }\n        args.pointer.value = args.currentValue;\n        args.pointer.animation.enable = false;\n        this.gauge.refresh();\n    }\n    ;\n    render() {\n        return (<main><div className='control-pane'>\n                <style>\n                    {SAMPLE_CSS}\n                </style>\n                <div className='control-section row'>\n                    <div className='col-lg-12'>\n                        <CircularGaugeComponent background='transparent' animationDuration={2000} loaded={this.onChartLoad.bind(this)} dragEnd={this.dragEnd.bind(this)} id='tooltip-container' ref={gauge => this.gauge = gauge} enablePointerDrag={true} load={this.load.bind(this)} tooltip={{\n                enable: true,\n                type: ['Range', 'Pointer'],\n                showAtMousePosition: true,\n                format: 'Current Value:  {value}',\n                enableAnimation: false,\n                textStyle: {\n                    size: '13px',\n                    fontFamily: 'inherit'\n                },\n                rangeSettings: {\n                    showAtMousePosition: true, format: \"Start Value: {start} <br/> End Value: {end}\", textStyle: {\n                        size: '13px',\n                        fontFamily: 'inherit'\n                    }\n                }\n            }}>\n                            <Inject services={[GaugeTooltip]}/>\n                            <AxesDirective>\n                                <AxisDirective startAngle={240} endAngle={120} radius='90%' minimum={0} maximum={120} majorTicks={{\n                color: 'white', offset: -4, height: 10\n            }} lineStyle={{ width: 0 }} minorTicks={{\n                width: 0\n            }} labelStyle={{\n                useRangeColor: true, font: { fontFamily: 'inherit' }\n            }}>\n                                    <PointersDirective>\n                                        <PointerDirective value={70} radius='60%' cap={{\n                radius: 10, border: { color: '#33BCBD', width: 5 }\n            }} animation={{\n                enable: true, duration: 1500\n            }} color='#33BCBD'/>\n                                    </PointersDirective>\n                                    <RangesDirective>\n                                        <RangeDirective start={0} end={50} radius='102%' color='#3A5DC8' startWidth={10} endWidth={10}/>\n                                        <RangeDirective start={50} end={120} radius='102%' color='#33BCBD' startWidth={10} endWidth={10}/>\n                                    </RangesDirective>\n                                </AxisDirective>\n                            </AxesDirective>\n                        </CircularGaugeComponent>\n                    </div>\n                </div>\n            </div>\n                <section id=\"action-description\" aria-label=\"Description of Circular Gauge sample\">\n                    <p>\n                        This sample helps in visualizing the tooltip of the pointer and the range in a circular gauge.\n                    </p>\n                </section>\n                <section id=\"description\" aria-label=\"Description of the Circular Gauge features demonstrated in this sample\">\n                    <p>\n                        In this example, you can see how to display the tooltip for the pointer and the range in a circular gauge. The <a target='_blank' href='https://ej2.syncfusion.com/react/documentation/api/circular-gauge/tooltipSettingsModel/'>tooltip</a> settings is used to enable and customize the tooltip. To see the tooltip in action, hover your mouse over the pointer or the range, or tap them on touch-enabled devices.\n                    </p>\n                    <p>\n                        More information on the tooltip can be found in this <a target=\"_blank\" href=\"https://ej2.syncfusion.com/react/documentation/circular-gauge/gauge-user-interaction/\">documentation section</a>.\n                    </p>\n                </section>\n            </main>);\n    }\n}\n\nconst root = createRoot(document.getElementById('sample'));\nroot.render(<Tooltip />);","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n                this.rendereComplete();\n            });\n        }\n    }\n    export function updateSampleSection(){}\n    ","dependencies":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-react-base\":\"*\",\"@syncfusion/ej2-circulargauge\":\"*\",\"@syncfusion/ej2-react-circulargauge\":\"*\",\"@syncfusion/ej2-react-charts\":\"*\",\"@syncfusion/ej2/base\":\"*\",\"@syncfusion/ej2-charts'; // Import the necessary types from Syncfusion\":\"*\"}"}