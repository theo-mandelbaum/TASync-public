{"index.css":"/* css */","index.html":"<!DOCTYPE html>\n<html>\n<head>\n    <title>Syncfusion React Sample</title>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\n    <meta name=\"author\" content=\"Syncfusion\" />\n    <link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\n</head>\n\n<body class=\"{{theme}}\">\n     <style>\n            .control-section\n            {\n                margin-top: 100px;\n            }\n    </style>\n    <div id='sample'>\n</body>\n</html>\n","index.js":"import { createRoot } from 'react-dom/client';\nimport './index.css';\nimport * as React from 'react';\nimport { CircularGaugeComponent, AxesDirective, AxisDirective, Inject, Gradient, PointersDirective, PointerDirective, RangesDirective, RangeDirective } from '@syncfusion/ej2-react-circulargauge';\nimport { SampleBase } from './sample-base';\nconst SAMPLE_CSS = `\n    .control-fluid {\n\t\tpadding: 0px !important;\n    }`;\nexport class CustomLabels extends SampleBase {\n    textValues = ['0', '2', '5', '10', '20', '50', '100', '150', '200'];\n    rangeLinearGradient = {\n        startValue: '0%',\n        endValue: '100%',\n        colorStop: [\n            { color: '#9e40dc', offset: '0%', opacity: 1 },\n            { color: '#d93c95', offset: '70%', opacity: 1 },\n        ]\n    };\n    pointerLinearGradient = {\n        startValue: '0%',\n        endValue: '100%',\n        colorStop: [\n            { color: '#9e40dc', offset: '0%', opacity: 0.2 },\n            { color: '#9e40dc', offset: '70%', opacity: 0.5 }\n        ]\n    };\n    load(args) {\n    }\n    axisLabelRender(args) {\n        args.text = this.textValues[(args.value)];\n    }\n    render() {\n        return (<main><div className='control-pane'>\n                <style>\n                    {SAMPLE_CSS}\n                </style>\n                <div className='control-section'>\n                    <CircularGaugeComponent load={this.load.bind(this)} animationDuration={2000} axisLabelRender={this.axisLabelRender.bind(this)} id='custom-labels' background='transparent'>\n                        <Inject services={[Gradient]}/>\n                        <AxesDirective>\n                            <AxisDirective startAngle={210} endAngle={150} radius='80%' minimum={0} maximum={8} majorTicks={{\n                width: 0, interval: 1\n            }} lineStyle={{ width: 0 }} minorTicks={{\n                width: 0\n            }} labelStyle={{\n                offset: 10,\n                font: {\n                    fontFamily: 'inherit'\n                }\n            }}>\n                                <PointersDirective>\n                                    <PointerDirective pointerWidth={10} radius='85%' needleStartWidth={10} needleEndWidth={5} value={6.2} color='#E63B86' cap={{ radius: 0, border: { width: 0 } }} needleTail={{ length: '0%' }} animation={{ enable: false }} linearGradient={this.pointerLinearGradient}>\n                                    </PointerDirective>\n                                </PointersDirective>\n                                <RangesDirective>\n                                    <RangeDirective start={0} end={6.2} color='#E63B86' startWidth={22} endWidth={22} linearGradient={this.rangeLinearGradient}>\n                                    </RangeDirective>\n                                    <RangeDirective start={6.2} end={8} color='#E0E0E0' startWidth={22} endWidth={22}></RangeDirective>\n                                </RangesDirective>\n                            </AxisDirective>\n                        </AxesDirective>\n                    </CircularGaugeComponent>\n                </div>\n            </div>\n                <section id=\"action-description\" aria-label=\"Description of Circular Gauge sample\">\n                    <p>\n                        This example demonstrates how to introduce and position custom labels in a circular gauge. In addition, gradient colors are used on the circular gauge elements such as the pointer and range.\n                    </p>\n                </section>\n                <section id=\"description\" aria-label=\"Description of the Circular Gauge features demonstrated in this sample\">\n                    <p>\n                        In this example, you can see how to render and configure custom labels in the circular gauge. The label text can be modified using the <a target='_blank' href='https://ej2.syncfusion.com/react/documentation/api/circular-gauge/#axislabelrender'>axisLabelRender</a> event which will be triggered everytime when a label is rendered.\n                    </p>\n                    <p>\n                        More information on the labels can be found in this <a target=\"_blank\" href=\"https://ej2.syncfusion.com/react/documentation/circular-gauge/gauge-axes/#labels\">documentation section</a>.\n                    </p>\n                </section>\n        </main>);\n    }\n}\n\nconst root = createRoot(document.getElementById('sample'));\nroot.render(<CustomLabels />);","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n                this.rendereComplete();\n            });\n        }\n    }\n    export function updateSampleSection(){}\n    ","dependencies":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-react-base\":\"*\",\"@syncfusion/ej2-circulargauge\":\"*\",\"@syncfusion/ej2-react-circulargauge\":\"*\",\"@syncfusion/ej2-pdf-export\":\"*\",\"@syncfusion/ej2-svg-base\":\"*\",\"markdown-spellcheck\":\"^1.3.1\",\"@syncfusion/ej2-react-charts\":\"*\",\"@syncfusion/ej2/base\":\"*\",\"@syncfusion/ej2-charts'; // Import the necessary types from Syncfusion\":\"*\"}"}