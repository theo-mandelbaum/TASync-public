{"index.css":"/* css */","index.html":"<!DOCTYPE html>\n<html>\n<head>\n    <title>Syncfusion React Sample</title>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\n    <meta name=\"author\" content=\"Syncfusion\" />\n    <link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\n</head>\n\n<body class=\"{{theme}}\">\n     <style>\n            .control-section\n            {\n                margin-top: 100px;\n            }\n    </style>\n    <div id='sample'>\n</body>\n</html>\n","index.js":"import { createRoot } from 'react-dom/client';\nimport './index.css';\nimport * as React from \"react\";\nimport { CircularGaugeComponent, AxesDirective, AxisDirective, Inject, PointersDirective, PointerDirective, RangesDirective, RangeDirective, Annotations, AnnotationDirective, AnnotationsDirective, } from '@syncfusion/ej2-react-circulargauge';\nimport { GridComponent, ColumnsDirective, ColumnDirective } from '@syncfusion/ej2-react-grids';\nimport { SampleBase } from './sample-base';\nconst SAMPLE_CSS = `\n    .imageStyle {\n        width: 16px;\n        height: 16px;\n        margin-top: 4px;\n    }\n        \n    .fontDes {\n        float: right;\n        padding-left: 5px;\n        font-size:20px;\n        font-family:inherit\";\n    }\n    .fontDes1 {\n        color:#9E9E9E;\n        font-size:16px;\n        font-family: inherit\";\n    }\n    `;\nexport class SampleData extends SampleBase {\n    dataGrid;\n    sampleGaugeOne;\n    sampleGaugeTwo;\n    sampleGaugeThree;\n    dataIntervalOne;\n    dataIntervalTwo;\n    orderData = [\n        {\n            'Country': 'Germany',\n            'Sales': 500,\n            'Target': 400,\n            'vsTarget': 300\n        }, {\n            'Country': 'USA',\n            'Sales': 1000,\n            'Target': 600,\n            'vsTarget': 360\n        }, {\n            'Country': 'UK',\n            'Sales': 600,\n            'Target': 700,\n            'vsTarget': -100\n        }\n    ];\n    load(args) {\n    }\n    onChartLoad(args) {\n        this.dataIntervalOne = setInterval(() => {\n            let randomValue = Math.random();\n            let value1 = Math.round((randomValue * 35) + 55);\n            let value2 = Math.round((randomValue * 15) + 60);\n            let value3 = Math.round((randomValue * 30) + 10);\n            let gridData1 = 4 * value1;\n            let gridData2 = 6 * value2;\n            let gridData3 = -7 * value3;\n            let newVal = Math.random() * (90 - 20) + 20;\n            if (document.getElementById('sample1-container')) {\n                this.sampleGaugeOne.axes[0].pointers[0].animation.enable = true;\n                this.sampleGaugeTwo.axes[0].pointers[0].animation.enable = true;\n                this.sampleGaugeThree.axes[0].pointers[0].animation.enable = true;\n                this.sampleGaugeOne.setPointerValue(0, 0, value1);\n                this.sampleGaugeTwo.setPointerValue(0, 0, value2);\n                this.sampleGaugeThree.setPointerValue(0, 0, -value3);\n                this.sampleGaugeOne.setAnnotationValue(0, 0, this.sampleGaugeOne.axes[0].annotations[0].content);\n                this.sampleGaugeTwo.setAnnotationValue(0, 0, this.sampleGaugeTwo.axes[0].annotations[0].content);\n                this.sampleGaugeThree.setAnnotationValue(0, 0, this.sampleGaugeThree.axes[0].annotations[0].content);\n                this.orderData = [\n                    {\n                        'Country': 'Germany',\n                        'Sales': 500,\n                        'Target': 400,\n                        'vsTarget': gridData1\n                    }, {\n                        'Country': 'USA',\n                        'Sales': 1000,\n                        'Target': 600,\n                        'vsTarget': gridData2\n                    }, {\n                        'Country': 'UK',\n                        'Sales': 600,\n                        'Target': 700,\n                        'vsTarget': gridData3\n                    }\n                ];\n            }\n            else {\n                clearInterval(+this.dataIntervalOne);\n            }\n        }, 2000);\n    }\n    ;\n    onGridLoad(args) {\n        this.dataIntervalTwo = setInterval(() => {\n            if (document.getElementById('sample1-container')) {\n                this.dataGrid.dataSource = this.orderData;\n                this.dataGrid.refresh();\n            }\n            else {\n                clearInterval(+this.dataIntervalTwo);\n            }\n        }, 2000);\n    }\n    render() {\n        return (<main><div className='control-pane'>\n                <style>\n                    {SAMPLE_CSS}\n                </style>\n                <div className='control-section'>\n                    <div className=\"row\">\n                        <div className=\"col-sm-12\">\n                            <div className=\"row\">\n                                <div className=\"col-sm-4\">\n                                    <CircularGaugeComponent load={this.load.bind(this)} style={{ height: \"250px\" }} background='transparent' ref={gauge => this.sampleGaugeOne = gauge} id='sample1-container'>\n                                        <Inject services={[Annotations]}/>\n                                        <AxesDirective>\n                                            <AxisDirective startAngle={230} endAngle={130} minimum={-100} maximum={100} lineStyle={{\n                width: 0,\n                color: 'transparent'\n            }} majorTicks={{\n                width: 0,\n                height: 0\n            }} minorTicks={{\n                width: 0,\n                height: 0\n            }} labelStyle={{\n                format: 'positive {value}',\n                position: 'Outside',\n                font: { size: '0', color: 'transparent' }\n            }}>\n                                                <AnnotationsDirective>\n                                                    <AnnotationDirective description='Positive arrow' content='<div id=\"templateWrap\"><img class=\"imageStyle\" src=\"https://ej2.syncfusion.com/react/demos/src/circular-gauge/images/positive.png\" alt=\"Positive value for Germany\"/><div class=\"fontDes\">${pointers[0].value}%</div></div></div>' angle={180} zIndex='1' radius='30%'/>\n                                                    <AnnotationDirective description='Germany' content='<div class=\"fontDes1\">Germany</div>' angle={180} zIndex='1' radius='65%'/>\n                                                </AnnotationsDirective>\n                                                <RangesDirective>\n                                                    <RangeDirective start={-100} end={0} startWidth={15} endWidth={15} color='#EC121C'/>\n                                                    <RangeDirective start={0} end={100} startWidth={15} endWidth={15} color='#45EA0C'/>\n                                                </RangesDirective>\n                                                <PointersDirective>\n                                                    <PointerDirective value={75} radius='60%' color='#777777' animation={{ enable: false, duration: 900 }} pointerWidth={5} cap={{\n                radius: 6, color: '#777777',\n                border: { width: 0 }\n            }} needleTail={{\n                length: '25%', color: '#777777'\n            }}>\n                                                    </PointerDirective>\n                                                </PointersDirective>\n                                            </AxisDirective>\n                                        </AxesDirective>\n                                    </CircularGaugeComponent>\n                                </div>\n                                <div className=\"col-sm-4\">\n                                    <CircularGaugeComponent load={this.load.bind(this)} style={{ height: \"250px\" }} background='transparent' ref={gauge => this.sampleGaugeTwo = gauge} id='sample2-container'>\n                                        <Inject services={[Annotations]}/>\n                                        <AxesDirective>\n                                            <AxisDirective startAngle={230} endAngle={130} minimum={-100} maximum={100} lineStyle={{\n                width: 0,\n                color: 'transparent'\n            }} majorTicks={{\n                width: 0,\n                height: 0\n            }} minorTicks={{\n                width: 0,\n                height: 0\n            }} labelStyle={{\n                format: 'positive {value} ',\n                position: 'Outside',\n                font: { size: '0', color: 'transprent' }\n            }}>\n                                                <AnnotationsDirective>\n                                                    <AnnotationDirective description=' Positive arrow ' content='<div id=\"templateWrap\"><img class=\"imageStyle\" src=\"https://ej2.syncfusion.com/react/demos/src/circular-gauge/images/positive.png\" alt=\"Positive value for USA\" /><div class=\"fontDes\">${pointers[0].value}%</div></div></div>' angle={180} zIndex='1' radius='30%'/>\n                                                    <AnnotationDirective description='USA' content='<div class=\"fontDes1\">USA</div>' angle={180} zIndex='1' radius='65%'/>\n                                                </AnnotationsDirective>\n                                                <RangesDirective>\n                                                    <RangeDirective start={-100} end={0} startWidth={15} endWidth={15} color='#EC121C'/>\n                                                    <RangeDirective start={0} end={100} startWidth={15} endWidth={15} color='#45EA0C'/>\n                                                </RangesDirective>\n                                                <PointersDirective>\n                                                    <PointerDirective value={60} radius='60%' color='#777777' animation={{ enable: false, duration: 900 }} pointerWidth={5} cap={{\n                radius: 6, color: '#777777',\n                border: { width: 0 }\n            }} needleTail={{\n                length: '25%', color: '#777777'\n            }}>\n                                                    </PointerDirective>\n                                                </PointersDirective>\n                                            </AxisDirective>\n                                        </AxesDirective>\n                                    </CircularGaugeComponent>\n                                </div>\n                                <div className=\"col-sm-4\">\n                                    <CircularGaugeComponent load={this.load.bind(this)} style={{ height: \"250px\" }} background='transparent' ref={gauge => this.sampleGaugeThree = gauge} loaded={this.onChartLoad.bind(this)} id='sample3-container'>\n                                        <Inject services={[Annotations]}/>\n                                        <AxesDirective>\n                                            <AxisDirective startAngle={230} endAngle={130} minimum={-100} maximum={100} lineStyle={{\n                width: 0,\n                color: 'transparent'\n            }} majorTicks={{\n                width: 0,\n                height: 0\n            }} minorTicks={{\n                width: 0,\n                height: 0\n            }} labelStyle={{\n                format: 'negative {value}',\n                position: 'Outside',\n                font: { size: '0', color: 'transparent' }\n            }}>\n                                                <AnnotationsDirective>\n                                                    <AnnotationDirective description='Negative arrow' content='<div id=\"templateWrap\"><img class=\"imageStyle\" src=\"https://ej2.syncfusion.com/react/demos/src/circular-gauge/images/negative.png\" alt=\"Negative value for UK\" /><div class=\"fontDes\">${pointers[0].value}%</div></div></div>' angle={180} zIndex='1' radius='30%'/>\n                                                    <AnnotationDirective description='UK' content='<div class=\"fontDes1\">UK</div>' angle={180} zIndex='1' radius='65%'/>\n                                                </AnnotationsDirective>\n                                                <RangesDirective>\n                                                    <RangeDirective start={-100} end={0} startWidth={15} endWidth={15} color='#EC121C'/>\n                                                    <RangeDirective start={0} end={100} startWidth={15} endWidth={15} color='#45EA0C'/>\n                                                </RangesDirective>\n                                                <PointersDirective>\n                                                    <PointerDirective value={25} radius='60%' color='#777777' animation={{ enable: false, duration: 900 }} pointerWidth={5} cap={{\n                radius: 6, color: '#777777',\n                border: { width: 0 }\n            }} needleTail={{\n                length: '25%', color: '#777777'\n            }}>\n                                                    </PointerDirective>\n                                                </PointersDirective>\n                                            </AxisDirective>\n                                        </AxesDirective>\n                                    </CircularGaugeComponent>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"row\">\n                        <div className=\"col-sm-12\">\n                            <div className=\"row\">\n                                <GridComponent dataBound={this.onGridLoad.bind(this)} ref={grid => this.dataGrid = grid} dataSource={this.orderData.slice(0, 30)}>\n                                    <ColumnsDirective>\n                                        <ColumnDirective field='Country' headerText='Country' width='80'></ColumnDirective>\n                                        <ColumnDirective field='Sales' headerText='Sales $' width='80'></ColumnDirective>\n                                        <ColumnDirective field='Target' headerText='Target $' width='80'/>\n                                        <ColumnDirective field='vsTarget' headerText='vs Target' width='80'/>\n                                    </ColumnsDirective>\n                                </GridComponent>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n                <section id=\"action-description\" aria-label=\"Description of Circular Gauge sample\">\n                    <p>\n                        This sample shows live stock price data displayed in multiple circular gauges.\n                    </p>\n                </section>\n                <section id=\"description\" aria-label=\"Description of the Circular Gauge features demonstrated in this sample\">\n                    <p>\n                        The pointer value in the circular gauge can be dynamically updated using the <a target=\"_blank\" href=\"https://ej2.syncfusion.com/react/documentation/api/circular-gauge/#setpointervalue\">setPointerValue</a> method. In this example, the stock price changes across countries are displayed in multiple circular gauges.\n                    </p>\n                    <p>\n                        More information on the circular gauge can be found in this <a target=\"_blank\" href=\"https://ej2.syncfusion.com/react/documentation/circular-gauge/getting-started/\">documentation section</a>.\n                    </p>\n                </section>\n        </main>);\n    }\n}\n\nconst root = createRoot(document.getElementById('sample'));\nroot.render(<SampleData />);","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n                this.rendereComplete();\n            });\n        }\n    }\n    export function updateSampleSection(){}\n    ","dependencies":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-react-base\":\"*\",\"@syncfusion/ej2-circulargauge\":\"*\",\"@syncfusion/ej2-react-circulargauge\":\"*\",\"@syncfusion/ej2-grids\":\"*\",\"@syncfusion/ej2-react-grids\":\"*\",\"@syncfusion/ej2-react-charts\":\"*\",\"@syncfusion/ej2/base\":\"*\",\"@syncfusion/ej2-charts'; // Import the necessary types from Syncfusion\":\"*\"}"}