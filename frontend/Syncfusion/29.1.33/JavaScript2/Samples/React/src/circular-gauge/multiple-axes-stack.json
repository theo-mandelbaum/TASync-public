{"index.css":"/* css */","property-pane.js":"import * as ReactDOM from 'react-dom';\nimport * as React from 'react';\nimport { select } from '@syncfusion/ej2-base';\nexport class PropertyPane extends React.Component {\n    render() {\n        const mobilePropPane = select('.sb-mobile-prop-pane');\n        const isMobile = window.matchMedia('(max-width:550px)').matches;\n        return isMobile && mobilePropPane ?\n            ReactDOM.createPortal(<div className='property-panel-section'>\n                    <div className=\"property-panel-header\">\n                        {this.props.title}\n                    </div>\n                    <div className=\"property-panel-content\">\n                        {this.props.children}\n                    </div>\n                </div>, mobilePropPane)\n            :\n                (<div className='property-panel-section'>\n                    <div className=\"property-panel-header\">\n                        {this.props.title}\n                    </div>\n                    <div className=\"property-panel-content\">\n                        {this.props.children}\n                    </div>\n                </div>);\n    }\n}\n","index.html":"<!DOCTYPE html>\n<html>\n<head>\n    <title>Syncfusion React Sample</title>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\n    <meta name=\"author\" content=\"Syncfusion\" />\n    <link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\n</head>\n\n<body class=\"{{theme}}\">\n     <style>\n            .control-section\n            {\n                margin-top: 100px;\n            }\n    </style>\n    <div id='sample'>\n</body>\n</html>\n","index.js":"import { createRoot } from 'react-dom/client';\nimport './index.css';\nimport * as React from 'react';\nimport { PropertyPane } from './property-pane';\nimport { CircularGaugeComponent, AxesDirective, AxisDirective, isCompleteAngle, PointersDirective, PointerDirective } from '@syncfusion/ej2-react-circulargauge';\nimport { SampleBase } from './sample-base';\nimport { DropDownList } from '@syncfusion/ej2-dropdowns';\nconst SAMPLE_CSS = `\n    .control-fluid {\n\t\tpadding: 0px !important;\n    }`;\nexport class Axes extends SampleBase {\n    gauge;\n    start;\n    end;\n    axisIndex = 0;\n    loaded = false;\n    axis;\n    direction;\n    load(args) {\n    }\n    onChartLoad(args) {\n        let id = args.gauge.element.id;\n        document.getElementById(id).setAttribute('title', '');\n        if (!this.loaded) {\n            this.loaded = true;\n            this.axis = new DropDownList({\n                index: 0, width: '127%',\n                change: () => {\n                    this.axisIndex = +this.axis.value;\n                    this.direction.value = this.gauge.axes[this.axisIndex].direction;\n                    let startAngle = this.gauge.axes[this.axisIndex].startAngle;\n                    let endAngle = this.gauge.axes[this.axisIndex].endAngle;\n                    document.getElementById('start').innerHTML = String(startAngle);\n                    document.getElementById('end').innerHTML = String(endAngle);\n                    this.start.value = startAngle.toString();\n                    this.end.value = endAngle.toString();\n                }\n            });\n            this.axis.appendTo('#axisIndex');\n            this.direction = new DropDownList({\n                index: 0, width: '127%',\n                change: () => {\n                    this.gauge.axes[this.axisIndex].direction = this.direction.value == 'ClockWise' ? 'ClockWise' : 'AntiClockWise';\n                    this.gauge.axes[0].pointers[0].animation.enable = false;\n                    this.gauge.axes[1].pointers[0].animation.enable = false;\n                    this.gauge.refresh();\n                }\n            });\n            this.direction.appendTo('#axisDirection');\n        }\n    }\n    ;\n    startAngle() {\n        let value = +this.start.value;\n        this.gauge.axes[0].pointers[0].animation.enable = false;\n        this.gauge.axes[1].pointers[0].animation.enable = false;\n        this.gauge.axes[this.axisIndex].startAngle = value;\n        document.getElementById('start').innerHTML = String(value);\n        this.gauge.axes[this.axisIndex].labelStyle.hiddenLabel =\n            isCompleteAngle(this.gauge.axes[this.axisIndex].startAngle, this.gauge.axes[this.axisIndex].endAngle) ?\n                'First' : 'None';\n        this.gauge.refresh();\n    }\n    endAngle() {\n        let value = +this.end.value;\n        this.gauge.axes[0].pointers[0].animation.enable = false;\n        this.gauge.axes[1].pointers[0].animation.enable = false;\n        this.gauge.axes[this.axisIndex].endAngle = value;\n        document.getElementById('end').innerHTML = String(value);\n        this.gauge.axes[this.axisIndex].labelStyle.hiddenLabel =\n            isCompleteAngle(this.gauge.axes[this.axisIndex].startAngle, this.gauge.axes[this.axisIndex].endAngle) ?\n                'First' : 'None';\n        this.gauge.refresh();\n    }\n    render() {\n        return (<main><div className='control-pane'>\n                <style>\n                    {SAMPLE_CSS}\n                </style>\n                <div className='control-section row'>\n                    <div className='col-lg-8'>\n                        <CircularGaugeComponent load={this.load.bind(this)} id='range-container' background='transparent' ref={gauge => this.gauge = gauge} loaded={this.onChartLoad.bind(this)}>\n                            <AxesDirective>\n                                <AxisDirective lineStyle={{ width: 1.5 }} radius='95%' direction='ClockWise' startAngle={220} endAngle={140} minimum={0} maximum={160} majorTicks={{\n                position: 'Inside',\n                width: 2, height: 10\n            }} minorTicks={{\n                position: 'Inside', width: 2,\n                height: 5\n            }} labelStyle={{\n                position: 'Inside', autoAngle: true,\n                font: {\n                    fontFamily: 'inherit'\n                }\n            }}>\n                                    <PointersDirective>\n                                        <PointerDirective value={80} radius='100%' markerHeight={15} markerWidth={15} type='Marker' markerShape='Triangle'/>\n                                    </PointersDirective>\n                                </AxisDirective>\n                                <AxisDirective lineStyle={{ width: 1.5, color: ' #E84011' }} radius='95%' direction='ClockWise' startAngle={220} endAngle={140} minimum={0} maximum={240} majorTicks={{\n                position: 'Outside', width: 2, height: 10,\n                color: '#E84011'\n            }} minorTicks={{\n                position: 'Outside', width: 2,\n                height: 5, color: '#E84011'\n            }} labelStyle={{\n                position: 'Outside', autoAngle: true, offset: 5,\n                font: { fontFamily: 'inherit' }\n            }}>\n                                    <PointersDirective>\n                                        <PointerDirective value={120} radius='100%' color='#E84011' markerHeight={15} markerWidth={15} type='Marker' markerShape='InvertedTriangle'/>\n                                    </PointersDirective>\n                                </AxisDirective>\n                            </AxesDirective>\n                        </CircularGaugeComponent>\n                    </div>\n                    {/* Property Panel */}\n                    <div className='col-lg-4 property-section'>\n                        <PropertyPane title='Properties'>\n                            <table id='property' role='none' title='Properties' className='property-panel-table' style={{ width: '100%', marginLeft: \"-10px\" }}>\n                                <tbody>\n                                    <tr>\n                                        <td>\n                                            <div style={{ fontSize: '14px' }}> Axis </div>\n                                        </td>\n                                        <td style={{ width: '40% ' }}>\n                                            <div>\n                                                <select id=\"axisIndex\" className=\"form-control\" style={{ width: \"90%\" }}>\n                                                    <option value=\"0\">Axis 1</option>\n                                                    <option value=\"1\">Axis 2</option>\n                                                </select>\n                                            </div>\n                                        </td>\n                                    </tr>\n                                    <tr>\n                                        <td>\n                                            <div style={{ fontSize: '14px' }}> Direction </div>\n                                        </td>\n                                        <td style={{ width: '40% ' }}>\n                                            <div>\n                                                <select id=\"axisDirection\" className=\"form-control\" style={{ width: \"90%\" }}>\n                                                    <option value=\"ClockWise\">Clockwise</option>\n                                                    <option value=\"AntiClockWise\">Anti-clockwise</option>\n                                                </select>\n                                            </div>\n                                        </td>\n                                    </tr>\n                                    <tr style={{ height: '50px' }}>\n                                        <td>\n                                            <div style={{ fontSize: '14px' }}>Start Angle </div>\n                                        </td>\n                                        <td style={{ width: '40% ' }}>\n                                            <div>\n                                                <input type=\"range\" id=\"startAngle\" onChange={this.startAngle.bind(this)} ref={d => this.start = d} defaultValue=\"220\" min=\"0\" max=\"360\" style={{ width: \"90%\" }}/>\n                                            </div>\n                                        </td>\n                                        <td style={{ width: \"10%\" }}>\n                                            <div style={{ textAlign: 'center', paddingLeft: '0px', marginLeft: '-10px' }}>\n                                                <span id='start'>220</span>\n                                            </div>\n                                        </td>\n                                    </tr>\n                                    <tr style={{ height: '50px' }}>\n                                        <td>\n                                            <div style={{ fontSize: '14px' }}>End Angle </div>\n                                        </td>\n                                        <td style={{ width: '40% ' }}>\n                                            <div>\n                                                <input type=\"range\" id=\"endAngle\" onChange={this.endAngle.bind(this)} ref={d => this.end = d} defaultValue=\"140\" min=\"0\" max=\"360\" style={{ width: \"90%\" }}/>\n                                            </div>\n                                        </td>\n                                        <td style={{ width: \"10%\" }}>\n                                            <div style={{ textAlign: 'center', paddingLeft: '0px', marginLeft: '-10px' }}>\n                                                <span id='end'>140</span>\n                                            </div>\n                                        </td>\n                                    </tr>\n                                </tbody>\n                            </table>\n                        </PropertyPane>\n                    </div>\n                </div>\n            </div>\n                <section id=\"action-description\" aria-label=\"Description of Circular Gauge sample\">\n                    <p>\n                        This sample illustrates the multiple axes in the circular gauge as well as the options for changing the direction, start, and end angle of an axis.\n                    </p>\n                </section>\n                <section id=\"description\" aria-label=\"Description of the Circular Gauge features demonstrated in this sample\">\n                    <p>\n                        In this example, you can see how to render and configure multiple axes in the circular gauge. To render multiple axes in the circular gauge, use the axes collection, and each axis can be customized with pointers and ticks.\n                    </p>\n                    <p>\n                        More information on the multiple axes can be found in this <a target=\"_blank\" href=\"https://ej2.syncfusion.com/react/documentation/circular-gauge/gauge-axes/#multiple-axes\">documentation section</a>.\n                    </p>\n                </section>\n            </main>);\n    }\n}\n\nconst root = createRoot(document.getElementById('sample'));\nroot.render(<Axes />);","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n                this.rendereComplete();\n            });\n        }\n    }\n    export function updateSampleSection(){}\n    ","dependencies":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-react-base\":\"*\",\"@syncfusion/ej2-circulargauge\":\"*\",\"@syncfusion/ej2-react-circulargauge\":\"*\",\"@syncfusion/ej2-data\":\"*\",\"@syncfusion/ej2-inputs\":\"*\",\"@syncfusion/ej2-lists\":\"*\",\"@syncfusion/ej2-navigations\":\"*\",\"@syncfusion/ej2-notifications\":\"*\",\"@syncfusion/ej2-popups\":\"*\",\"markdown-spellcheck\":\"^1.3.1\",\"@syncfusion/ej2-dropdowns\":\"*\",\"@syncfusion/ej2-react-charts\":\"*\",\"@syncfusion/ej2/base\":\"*\",\"@syncfusion/ej2-charts'; // Import the necessary types from Syncfusion\":\"*\"}"}