{"index.css":"/* css */","property-pane.js":"import * as ReactDOM from 'react-dom';\nimport * as React from 'react';\nimport { select } from '@syncfusion/ej2-base';\nexport class PropertyPane extends React.Component {\n    render() {\n        const mobilePropPane = select('.sb-mobile-prop-pane');\n        const isMobile = window.matchMedia('(max-width:550px)').matches;\n        return isMobile && mobilePropPane ?\n            ReactDOM.createPortal(<div className='property-panel-section'>\n                    <div className=\"property-panel-header\">\n                        {this.props.title}\n                    </div>\n                    <div className=\"property-panel-content\">\n                        {this.props.children}\n                    </div>\n                </div>, mobilePropPane)\n            :\n                (<div className='property-panel-section'>\n                    <div className=\"property-panel-header\">\n                        {this.props.title}\n                    </div>\n                    <div className=\"property-panel-content\">\n                        {this.props.children}\n                    </div>\n                </div>);\n    }\n}\n","index.html":"<!DOCTYPE html>\n<html>\n<head>\n    <title>Syncfusion React Sample</title>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\n    <meta name=\"author\" content=\"Syncfusion\" />\n    <link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\n</head>\n\n<body class=\"{{theme}}\">\n     <style>\n            .control-section\n            {\n                margin-top: 100px;\n            }\n    </style>\n    <div id='sample'>\n</body>\n</html>\n","index.js":"import { createRoot } from 'react-dom/client';\nimport './index.css';\nimport * as React from 'react';\nimport { PropertyPane } from './property-pane';\nimport { CircularGaugeComponent, AxesDirective, AxisDirective, Inject, PointersDirective, PointerDirective, RangesDirective, RangeDirective, Annotations, AnnotationsDirective, AnnotationDirective, } from '@syncfusion/ej2-react-circulargauge';\nimport { SampleBase } from './sample-base';\nimport { DropDownList } from '@syncfusion/ej2-dropdowns';\nconst SAMPLE_CSS = `\n    .property-panel-table td {\n        width: inherit;\n    }\n    `;\nexport class Range extends SampleBase {\n    gauge;\n    startWidthElement;\n    endWidthElement;\n    enableElement;\n    radiusElement;\n    loaded = false;\n    startElementOne;\n    endElementOne;\n    listObj;\n    selectedRange;\n    startRangeValue = \"0\";\n    endRangeValue = \"40\";\n    endMinimum = \"0\";\n    endMaximum = \"40\";\n    load(args) {\n    }\n    onChartLoad(args) {\n        if (!this.loaded) {\n            this.loaded = true;\n            this.listObj = new DropDownList({\n                index: 0, width: '90%',\n                change: () => {\n                    let index = parseFloat(this.listObj.value.toString());\n                    this.selectedRange = this.listObj.text;\n                    if (this.selectedRange == \"Low\") {\n                        document.getElementById('startone').min = \"0\";\n                        document.getElementById('startone').max = \"40\";\n                        document.getElementById('endone').min = \"0\";\n                        document.getElementById('endone').max = \"40\";\n                    }\n                    else if (this.selectedRange == \"Medium\") {\n                        document.getElementById('startone').min = \"40\";\n                        document.getElementById('startone').max = \"80\";\n                        document.getElementById('endone').min = \"40\";\n                        document.getElementById('endone').max = \"80\";\n                    }\n                    else {\n                        document.getElementById('startone').min = \"80\";\n                        document.getElementById('startone').max = \"120\";\n                        document.getElementById('endone').min = \"80\";\n                        document.getElementById('endone').max = \"120\";\n                    }\n                    this.endWidthElement.value = this.gauge.axes[0].ranges[index].endWidth.toString();\n                    document.getElementById('rangeEndWidth').innerHTML = String(this.gauge.axes[0].ranges[index].endWidth);\n                    this.startWidthElement.value = this.gauge.axes[0].ranges[index].startWidth.toString();\n                    document.getElementById('rangeStartWidth').innerHTML = String(this.gauge.axes[0].ranges[index].startWidth);\n                    document.getElementById('startone').value = this.gauge.axes[0].ranges[index].start.toString();\n                    document.getElementById('endone').value = this.gauge.axes[0].ranges[index].end.toString();\n                    document.getElementById('rangeEnd').innerHTML = this.gauge.axes[0].ranges[index].end.toString();\n                    document.getElementById('rangeStart').innerHTML = this.gauge.axes[0].ranges[index].start.toString();\n                    this.radiusElement.value = this.gauge.axes[0].ranges[index].roundedCornerRadius.toString();\n                    document.getElementById('roundedRadius').innerHTML = String(this.gauge.axes[0].ranges[index].roundedCornerRadius);\n                }\n            });\n            this.listObj.appendTo('#rangeSelect');\n        }\n    }\n    ;\n    start() {\n        let index = parseFloat(this.listObj.value.toString());\n        let min = parseInt(this.startElementOne.value);\n        this.startElementOne.value = min.toString();\n        document.getElementById('rangeStart').innerHTML = min.toString();\n        this.gauge.axes[0].ranges[index].start = min;\n        this.gauge.axes[0].pointers[0].animation.enable = false;\n        this.gauge.refresh();\n    }\n    end() {\n        let index = parseFloat(this.listObj.value.toString());\n        let max = parseInt(this.endElementOne.value);\n        document.getElementById('rangeEnd').innerHTML = String(max);\n        this.gauge.axes[0].ranges[index].end = max;\n        this.gauge.axes[0].pointers[0].animation.enable = false;\n        this.gauge.refresh();\n    }\n    startWidth() {\n        let index = parseFloat(this.listObj.value.toString());\n        let startWidth = parseFloat(this.startWidthElement.value);\n        document.getElementById('rangeStartWidth').innerHTML = String(startWidth);\n        this.gauge.axes[0].ranges[index].startWidth = startWidth;\n        this.gauge.axes[0].pointers[0].animation.enable = false;\n        this.gauge.refresh();\n    }\n    endWidth() {\n        let index = parseFloat(this.listObj.value.toString());\n        let endWidth = parseFloat(this.endWidthElement.value.toString());\n        document.getElementById('rangeEndWidth').innerHTML = String(endWidth);\n        this.gauge.axes[0].ranges[index].endWidth = endWidth;\n        this.gauge.axes[0].pointers[0].animation.enable = false;\n        this.gauge.refresh();\n    }\n    radius() {\n        let index = parseFloat(this.listObj.value.toString());\n        let radius = parseFloat(this.radiusElement.value.toString());\n        document.getElementById('roundedRadius').innerHTML = String(radius);\n        this.gauge.axes[0].ranges[index].roundedCornerRadius = radius;\n        this.gauge.axes[0].pointers[0].animation.enable = false;\n        this.gauge.refresh();\n    }\n    render() {\n        return (<main><div className='control-pane'>\n            <style>\n                {SAMPLE_CSS}\n            </style>\n                <div className='control-section row'>\n                    <div className='col-lg-8'>\n                        <CircularGaugeComponent load={this.load.bind(this)} id='range-container' background='transparent' ref={gauge => this.gauge = gauge} loaded={this.onChartLoad.bind(this)}>\n                            <Inject services={[Annotations]}/>\n                            <AxesDirective>\n                                <AxisDirective startAngle={210} radius='80%' endAngle={150} minimum={0} maximum={120} majorTicks={{\n                height: 10, offset: 5,\n            }} lineStyle={{ width: 10, color: 'transparent' }} minorTicks={{\n                height: 0,\n                width: 0\n            }} labelStyle={{\n                font: {\n                    fontFamily: 'inherit',\n                }\n            }}>\n                                    <PointersDirective>\n                                        <PointerDirective value={65} radius='60%' pointerWidth={8} needleTail={{\n                length: '18%'\n            }} cap={{\n                radius: 7\n            }} animation={{ enable: true }}/>\n                                    </PointersDirective>\n                                    <RangesDirective>\n                                        <RangeDirective start={0} end={40} color='#30B32D' startWidth={10} endWidth={10} roundedCornerRadius={0}/>\n                                        <RangeDirective start={40} end={80} color='#FFDD00' startWidth={10} endWidth={10} roundedCornerRadius={0}/>\n                                        <RangeDirective start={80} end={120} color='#F03E3E' startWidth={10} endWidth={10} roundedCornerRadius={0}/>\n                                    </RangesDirective>\n                                    <AnnotationsDirective>\n                                        <AnnotationDirective content='<div><span class=\"templateText\" style=\"font-size:14px;\">Speedometer</span></div>' angle={0} zIndex='1' radius='30%'>\n                                        </AnnotationDirective>\n                                        <AnnotationDirective content='<div><span class=\"templateText\" style=\"font-size:20px;\">65 MPH</span></div>' angle={180} zIndex='1' radius='40%'>\n                                        </AnnotationDirective>\n                                    </AnnotationsDirective>\n                                </AxisDirective>\n                            </AxesDirective>\n                        </CircularGaugeComponent>\n                    </div>\n                    {/* Property Panel */}\n                    <div className='col-lg-4 property-section'>\n                        <PropertyPane title='Properties'>\n                            <table id='property' role='none' title='Properties' className='property-panel-table' style={{ width: '100%' }}>\n                                <tbody>\n                                    <tr style={{ height: '50px' }}>\n                                        <td style={{ width: '30%' }}>\n                                            <div style={{ marginLeft: '-10px', fontSize: \"14px\", marginTop: \"-8px\" }}> Select Range </div>\n                                        </td>\n                                        <td style={{ width: '40%' }}>\n                                            <select id=\"rangeSelect\" className=\"form-control\">\n                                                <option value=\"0\">Low</option>\n                                                <option value=\"1\">Medium</option>\n                                                <option value=\"2\">High</option>\n                                            </select>\n                                        </td>\n                                    </tr>\n                                </tbody>\n                            </table>\n                            <table id='property1' role='none' title='Properties' className='property-panel-table' style={{ width: '100%' }}>\n                                <colgroup>\n                                    <col span={1} style={{ width: \"35%\" }}></col>\n                                    <col span={1} style={{ width: \"45%\" }}></col>\n                                    <col span={1} style={{ width: \"20%\" }}></col>\n                                </colgroup>\n                                   <tbody>\n                                    <tr style={{ height: '50px' }}>\n                                        <td style={{ width: \"35%\" }}>\n                                            <div style={{ marginTop: \"-10px\", marginLeft: \"-10px\", fontSize: \"14px\" }}>Range Start </div>\n                                        </td>\n                                        <td style={{ width: '46%' }}>\n                                            <div style={{ marginTop: \"-10px\", marginLeft: \"10px\" }}>\n                                                <input type=\"range\" id=\"startone\" min=\"0\" max=\"40\" defaultValue=\"0\" style={{ width: '90%' }} onChange={this.start.bind(this)} ref={d => this.startElementOne = d}/>\n                                            </div>\n                                        </td>\n                                        <td>\n                                            <div style={{ textAlign: 'center', paddingTop: \"0px\", paddingLeft: '0px' }}>\n                                                <span id='rangeStart' style={{ fontSize: \"14px\" }}>0</span>\n                                            </div>\n                                        </td>\n                                    </tr>\n\n                                    <tr style={{ height: '50px' }}>\n                                        <td>\n                                            <div style={{ marginTop: \"-10px\", marginLeft: \"-10px\", fontSize: \"14px\" }}>Range End </div>\n                                        </td>\n                                        <td style={{ width: '40%' }}>\n                                            <div style={{ marginLeft: \"10px\", marginTop: \"-10px\" }}>\n                                                <input type=\"range\" id=\"endone\" min=\"0\" max=\"40\" defaultValue=\"40\" style={{ width: '100%' }} onChange={this.end.bind(this)} ref={d => this.endElementOne = d}/>\n                                            </div>\n                                        </td>\n                                        <td>\n                                            <div style={{ textAlign: 'center', paddingTop: \"0px\", paddingLeft: '0px' }}>\n                                                <span id='rangeEnd' style={{ fontSize: \"14px\" }}>40</span>\n                                            </div>\n                                        </td>\n                                    </tr>\n                                    <tr style={{ height: '50px' }}>\n                                        <td>\n                                            <div style={{ marginTop: \"-10px\", marginLeft: \"-10px\", fontSize: \"14px\" }}>Start Width </div>\n                                        </td>\n                                        <td style={{ width: '40%' }}>\n                                            <div style={{ marginTop: \"-10px\", marginLeft: \"10px\" }}>\n                                                <input type=\"range\" id=\"startWidth\" defaultValue=\"10\" min=\"0\" max=\"30\" style={{ width: '100%' }} onChange={this.startWidth.bind(this)} ref={d => this.startWidthElement = d}/>\n                                            </div>\n                                        </td>\n                                        <td>\n                                            <div style={{ textAlign: 'center', paddingTop: \"0px\", paddingLeft: '0px' }}>\n                                                <span id='rangeStartWidth' style={{ fontSize: \"14px\" }}>10</span>\n                                            </div>\n                                        </td>\n                                    </tr>\n                                    <tr style={{ height: '50px' }}>\n                                        <td>\n                                            <div style={{ marginTop: \"-10px\", marginLeft: \"-10px\", fontSize: \"14px\" }}>End Width </div>\n                                        </td>\n                                        <td style={{ width: '40%' }}>\n                                            <div style={{ marginTop: \"-10px\", marginLeft: \"10px\" }}>\n                                                <input type=\"range\" id=\"endWidth\" defaultValue=\"10\" min=\"0\" max=\"30\" style={{ width: '100%' }} onChange={this.endWidth.bind(this)} ref={d => this.endWidthElement = d}/>\n                                            </div>\n                                        </td>\n                                        <td>\n                                            <div style={{ textAlign: 'center', paddingTop: \"0px\", paddingLeft: '0px' }}>\n                                                <span id='rangeEndWidth' style={{ fontSize: \"14px\" }}>10</span>\n                                            </div>\n                                        </td>\n                                    </tr>\n                                    <tr style={{ height: '50px' }}>\n                                        <td>\n                                            <div style={{ marginTop: \"-10px\", marginLeft: \"-10px\", fontSize: \"14px\" }}>Corner Radius </div>\n                                        </td>\n                                        <td style={{ width: '40%' }}>\n                                            <div style={{ marginTop: \"-10px\", marginLeft: \"10px\" }}>\n                                                <input type=\"range\" id=\"radius\" defaultValue=\"0\" min=\"0\" max=\"12\" step=\"1\" style={{ width: '100%' }} onChange={this.radius.bind(this)} ref={d => this.radiusElement = d}/>\n                                            </div>\n                                        </td>\n                                        <td>\n                                            <div style={{ textAlign: 'center', paddingTop: \"0px\", paddingLeft: '0px' }}>\n                                                <span id='roundedRadius' style={{ fontSize: \"14px\" }}>0</span>\n                                            </div>\n                                        </td>\n                                    </tr>\n                                </tbody>\n                            </table>\n                        </PropertyPane>\n                    </div>\n                </div>\n            </div>\n                <section id=\"action-description\" aria-label=\"Description of Circular Gauge sample\">\n                    <p>\n                        This sample demonstrates how to highlight a region in an axis using ranges in the circular gauge. The width, corner radius, and start and end range of a range can all be customized.\n                    </p>\n                </section>\n                <section id=\"description\" aria-label=\"Description of the Circular Gauge features demonstrated in this sample\">\n                    <p>\n                        In this example, you can see how to render and configure the ranges in the circular gauge. Ranges are used to group the axis values, and you can use <a target=\"_blank\" href=\"https://ej2.syncfusion.com/react/documentation/api/circular-gauge/rangeModel/#start\">start</a>, <a target=\"_blank\" href=\"https://ej2.syncfusion.com/react/documentation/api/circular-gauge/rangeModel/#end\">end</a>, <a target=\"_blank\" href=\"https://ej2.syncfusion.com/react/documentation/api/circular-gauge/rangeModel/#color\">color</a>, <a target=\"_blank\" href=\"https://ej2.syncfusion.com/react/documentation/api/circular-gauge/rangeModel/#startwidth\">startWidth</a>, <a target=\"_blank\" href=\"https://ej2.syncfusion.com/react/documentation/api/circular-gauge/rangeModel/#endwidth\">endWidth</a>, <a target=\"_blank\" href=\"https://ej2.syncfusion.com/react/documentation/api/circular-gauge/rangeModel/#radius\">radius</a> and <a target=\"_blank\" href=\"https://ej2.syncfusion.com/react/documentation/api/circular-gauge/rangeModel/#roundedcornerradius\">roundedCornerRadius</a> properties to customize them. In addition, an axis with multiple ranges is shown in the circular gauge component, as well as options to customize the range properties via the property panel.\n                    </p>\n                    <p>\n                        More information on the ranges can be found in this <a target=\"_blank\" href=\"https://ej2.syncfusion.com/react/documentation/circular-gauge/gauge-ranges/\">documentation section</a>.\n                    </p>\n                </section>\n            </main>);\n    }\n}\n\nconst root = createRoot(document.getElementById('sample'));\nroot.render(<Range />);","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n                this.rendereComplete();\n            });\n        }\n    }\n    export function updateSampleSection(){}\n    ","dependencies":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-react-base\":\"*\",\"@syncfusion/ej2-circulargauge\":\"*\",\"@syncfusion/ej2-react-circulargauge\":\"*\",\"@syncfusion/ej2-data\":\"*\",\"@syncfusion/ej2-inputs\":\"*\",\"@syncfusion/ej2-lists\":\"*\",\"@syncfusion/ej2-navigations\":\"*\",\"@syncfusion/ej2-notifications\":\"*\",\"@syncfusion/ej2-popups\":\"*\",\"markdown-spellcheck\":\"^1.3.1\",\"@syncfusion/ej2-dropdowns\":\"*\",\"@syncfusion/ej2-react-charts\":\"*\",\"@syncfusion/ej2/base\":\"*\",\"@syncfusion/ej2-charts'; // Import the necessary types from Syncfusion\":\"*\"}"}