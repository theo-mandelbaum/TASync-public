{"index.css":"/* css */","property-pane.js":"import * as ReactDOM from 'react-dom';\nimport * as React from 'react';\nimport { select } from '@syncfusion/ej2-base';\nexport class PropertyPane extends React.Component {\n    render() {\n        const mobilePropPane = select('.sb-mobile-prop-pane');\n        const isMobile = window.matchMedia('(max-width:550px)').matches;\n        return isMobile && mobilePropPane ?\n            ReactDOM.createPortal(<div className='property-panel-section'>\n                    <div className=\"property-panel-header\">\n                        {this.props.title}\n                    </div>\n                    <div className=\"property-panel-content\">\n                        {this.props.children}\n                    </div>\n                </div>, mobilePropPane)\n            :\n                (<div className='property-panel-section'>\n                    <div className=\"property-panel-header\">\n                        {this.props.title}\n                    </div>\n                    <div className=\"property-panel-content\">\n                        {this.props.children}\n                    </div>\n                </div>);\n    }\n}\n","index.html":"<!DOCTYPE html>\n<html>\n<head>\n    <title>Syncfusion React Sample</title>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\n    <meta name=\"author\" content=\"Syncfusion\" />\n    <link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\n</head>\n\n<body class=\"{{theme}}\">\n     <style>\n            .control-section\n            {\n                margin-top: 100px;\n            }\n    </style>\n    <div id='sample'>\n</body>\n</html>\n","index.js":"import { createRoot } from 'react-dom/client';\nimport './index.css';\nimport * as React from 'react';\nimport { PropertyPane } from './property-pane';\nimport { CircularGaugeComponent, AxesDirective, AxisDirective, Inject, PointersDirective, PointerDirective, RangesDirective, RangeDirective, Annotations, Legend } from '@syncfusion/ej2-react-circulargauge';\nimport { SampleBase } from './sample-base';\nimport { DropDownListComponent, DropDownList } from '@syncfusion/ej2-react-dropdowns';\nimport { CheckBoxComponent } from \"@syncfusion/ej2-react-buttons\";\nconst SAMPLE_CSS = `\n    .legendPadding {\n        padding-top: 0px; margin-left: 0px; margin-top: 3px; padding-left:10px\n    }\n    .e-view.fluent2 #property .legendPadding, .e-view.fluent2-dark #property .legendPadding {\n        padding-top: 0px; margin-left: 0px !important; margin-top: 3px; padding-left:0px !important;\n    }\n    .e-view.fluent2-highcontrast #property .legendPadding {\n        margin-left: -8px !important;\n    }\n    `;\nexport class Circle extends SampleBase {\n    gauge;\n    dropElement;\n    alignElement;\n    positionElement;\n    legendPosition;\n    rangeColor;\n    pointerColor;\n    loaded = false;\n    positionlist = [\n        { value: 'Bottom' },\n        { value: 'Top' },\n        { value: 'Left' },\n        { value: 'Right' },\n        { value: 'Auto' }\n    ];\n    position() {\n        this.gauge.legendSettings.position = this.positionElement.value;\n    }\n    alignlist = [\n        { value: 'Center' },\n        { value: 'Far' },\n        { value: 'Near' }\n    ];\n    alignment() {\n        this.gauge.legendSettings.alignment = this.alignElement.value;\n    }\n    shapelist = [\n        { value: 'Circle', text: 'Circle' },\n        { value: 'Rectangle', text: 'Rectangle' },\n        { value: 'Triangle', text: 'Triangle' },\n        { value: 'Diamond', text: 'Diamond' },\n        { value: 'InvertedTriangle', text: 'Inverted Triangle' }\n    ];\n    shape() {\n        this.gauge.legendSettings.shape = this.dropElement.value;\n    }\n    load(args) {\n    }\n    onChartLoad(args) {\n        if (!this.loaded) {\n            this.loaded = true;\n            this.legendPosition = new DropDownList({\n                index: 0,\n                width: 130,\n                change: () => {\n                    let position = this.legendPosition.value.toString();\n                }\n            });\n            this.legendPosition.appendTo('#legendPosition');\n        }\n    }\n    enableToggleLegend(args) {\n        this.gauge.legendSettings.toggleVisibility = args.checked;\n    }\n    enableLegend(args) {\n        this.gauge.legendSettings.visible = args.checked;\n        this.gauge.refresh();\n    }\n    render() {\n        return (<main><div className='control-pane'>\n                <div className='control-section row'>\n                    <div className='col-lg-8'>\n\n                        <CircularGaugeComponent load={this.load.bind(this)} background='transparent' id='range-container' loaded={this.onChartLoad.bind(this)} title='Measure of wind speed in km/h' titleStyle={{ fontFamily: 'inherit' }} legendSettings={{\n                visible: true, position: \"Bottom\",\n                textStyle: {\n                    fontFamily: 'inherit',\n                    size: '12px'\n                }\n            }} ref={gauge => this.gauge = gauge}>\n                            <Inject services={[Annotations, Legend]}/>\n                            <AxesDirective>\n                                <AxisDirective startAngle={210} endAngle={150} radius='80%' minimum={0} maximum={120} majorTicks={{\n                color: '#9E9E9E', height: 16, interval: 20\n            }} lineStyle={{ width: 2 }} minorTicks={{\n                height: 8, interval: 10\n            }} labelStyle={{\n                position: 'Inside', useRangeColor: false,\n                font: {\n                    fontFamily: 'inherit'\n                }\n            }}>\n                                    <RangesDirective>\n                                        <RangeDirective start={0} end={5} color='#ccffff' radius='110%' legendText='Light Air'/>\n                                        <RangeDirective start={5} end={11} color='#99ffff' radius='110%' legendText='Light Breeze'/>\n                                        <RangeDirective start={11} end={19} color='#99ff99' radius='110%' legendText='Gentle Breeze'/>\n                                        <RangeDirective start={19} end={28} color='#79ff4d' radius='110%' legendText='Moderate Breeze'/>\n                                        <RangeDirective start={28} end={49} color='#c6ff1a' radius='110%' legendText='Strong Breeze'/>\n                                        <RangeDirective start={49} end={74} color='#e6ac00' radius='110%' legendText='Gale'/>\n                                        <RangeDirective start={74} end={102} color='#ff6600' radius='110%' legendText='Storm'/>\n                                        <RangeDirective start={102} end={120} color='#ff0000' radius='110%' legendText='Hurricane Force'/>\n                                    </RangesDirective>\n                                    <PointersDirective>\n                                        <PointerDirective value={70} radius='60%' pointerWidth={8} animation={{ enable: true }} cap={{\n                radius: 7\n            }} needleTail={{ length: '18%' }}/>\n                                    </PointersDirective>\n                                </AxisDirective>\n                            </AxesDirective>\n                        </CircularGaugeComponent>\n                    </div>\n                    {/* Property Panel */}\n                    <div className='col-lg-4 property-section'>\n                        <PropertyPane title='Properties'>\n                            <table id='property' role='none' title='Properties' className='property-panel-table' style={{ width: '100%', marginLeft: '-10px' }}>\n                                <tbody>\n                                    <tr style={{ height: '50px' }}>\n                                        <td style={{ width: '20%' }}>\n                                            <div id='enablePointer' style={{ fontSize: \"14px\" }}>Show Legend</div>\n                                        </td>\n                                        <td style={{ width: '40%' }}>\n                                            <div className='legendPadding'>\n                                                <CheckBoxComponent id='enable' checked={true} change={this.enableLegend.bind(this)}/>\n                                            </div>\n                                        </td>\n                                    </tr>\n                                    <tr style={{ height: '50px' }}>\n                                        <td style={{ width: '20%' }}>\n                                            <div id='enable' style={{ fontSize: \"14px\" }}>Show range when the legend item is toggled</div>\n                                        </td>\n                                        <td style={{ width: '40%' }}>\n                                            <div className='legendPadding'>\n                                                <CheckBoxComponent id='enableToggle' checked={true} change={this.enableToggleLegend.bind(this)}/>\n                                            </div>\n                                        </td>\n                                    </tr>\n                                    <tr style={{ height: '50px' }}>\n                                        <td>\n                                            <div id='position' style={{ fontSize: \"14px\" }}>Position</div>\n                                        </td>\n                                        <td>\n                                            <div style={{ paddingLeft: '20px' }}>\n                                                <DropDownListComponent width=\"100%\" index={0} change={this.position.bind(this)} ref={d => this.positionElement = d} dataSource={this.positionlist} fields={{ text: 'value', value: 'value' }}/>\n                                            </div>\n                                        </td>\n                                    </tr>\n                                    <tr style={{ height: '50px' }}>\n                                        <td>\n                                            <div id='range' style={{ fontSize: \"14px\" }}>Alignment</div>\n                                        </td>\n                                        <td>\n                                            <div style={{ paddingLeft: '20px' }}>\n                                                <DropDownListComponent width=\"100%\" index={0} change={this.alignment.bind(this)} ref={d => this.alignElement = d} dataSource={this.alignlist} fields={{ text: 'value', value: 'value' }}/>\n                                            </div>\n                                        </td>\n                                    </tr>\n                                    <tr style={{ height: '50px' }}>\n                                        <td>\n                                            <div id='pointColor' style={{ fontSize: \"14px\" }}>Shape</div>\n                                        </td>\n                                        <td>\n                                            <div style={{ paddingLeft: '20px' }}>\n                                                <DropDownListComponent width=\"100%\" index={0} change={this.shape.bind(this)} ref={d => this.dropElement = d} dataSource={this.shapelist} fields={{ text: 'text', value: 'value' }}/>\n                                            </div>\n                                        </td>\n                                    </tr>\n                                </tbody>\n                            </table>\n                        </PropertyPane>\n                    </div>\n                </div>\n            </div>\n                <section id=\"action-description\" aria-label=\"Description of Circular Gauge sample\">\n                    <p>\n                        This sample directs the visualization of moving wind types based on their speed via the legend of the circular gauge component. The visibility, shape, alignment, and position of the legend can all be customized.\n                    </p>\n                </section>\n                <section id=\"description\" aria-label=\"Description of the Circular Gauge features demonstrated in this sample\">\n                    <p>\n                        The legend provides useful information for interpreting what the circular gauge's axis range displays, and it can be represented in a variety of colors, shapes, and other identifiers depending on the data. To do so, use the <a target='_blank' href='https://ej2.syncfusion.com/react/documentation/api/circular-gauge/legendSettingsModel/'>legendSettings</a> and its properties.\n                    </p>\n                    <p>\n                        More information on the legend can be found in this <a target=\"_blank\" href=\"https://ej2.syncfusion.com/react/documentation/circular-gauge/gauge-legend/\">documentation section</a>.\n                    </p>\n                </section>\n        </main>);\n    }\n}\n\nconst root = createRoot(document.getElementById('sample'));\nroot.render(<Circle />);","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n                this.rendereComplete();\n            });\n        }\n    }\n    export function updateSampleSection(){}\n    ","dependencies":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-react-base\":\"*\",\"@syncfusion/ej2-circulargauge\":\"*\",\"@syncfusion/ej2-react-circulargauge\":\"*\",\"@syncfusion/ej2-dropdowns\":\"*\",\"@syncfusion/ej2-react-dropdowns\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-react-buttons\":\"*\",\"@syncfusion/ej2-react-charts\":\"*\",\"@syncfusion/ej2/base\":\"*\",\"@syncfusion/ej2-charts'; // Import the necessary types from Syncfusion\":\"*\"}"}