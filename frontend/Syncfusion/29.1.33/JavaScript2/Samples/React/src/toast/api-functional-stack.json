{"index.css":" .toast-api-section {\n        padding-top: 0;\n    }\n    .toast-api-section .input-form {\n        margin: 33px 0;\n    }\n\n    .toast-api-section .group-form {\n        margin: 25px 0;\n    }\n\n    .toast-api-section .group-form.e-group {\n        margin-top: 35px;\n    }\n    .toast-api-section .row .padding {\n        padding: 0 15px;\n    }\n    .toast-api-section .row.center {\n        text-align: center;\n    }\n    .toast-api-section .row {\n        padding: 0 15px;\n    }\n    .input-form .h4,\n    .input-form.e-group .h4 {\n      font-size: 16px;\n      margin: 0 0 10px;\n  } ","index.html":"<!DOCTYPE html>\n<html>\n<head>\n    <title>Syncfusion React Sample</title>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\n    <meta name=\"author\" content=\"Syncfusion\" />\n    <link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\n</head>\n\n<body class=\"{{theme}}\">\n     <style>\n            .control-section\n            {\n                margin-top: 100px;\n            }\n    </style>\n    <div id='sample'>\n</body>\n</html>\n","index.js":"import { createRoot } from 'react-dom/client';\nimport './index.css';\nimport * as React from 'react';\nimport { ToastComponent } from '@syncfusion/ej2-react-notifications';\nimport { isNullOrUndefined } from '@syncfusion/ej2-base';\nimport { DropDownListComponent } from '@syncfusion/ej2-react-dropdowns';\nimport { CheckBoxComponent, ButtonComponent } from '@syncfusion/ej2-react-buttons';\n\n\nfunction Api() {\n    React.useEffect(() => {\n        rendereComplete();\n    }, []);\n    let toastInputTitleEle;\n    let toastInputContentEle;\n    let showDurationEle;\n    let hideDurationEle;\n    let timeOutEle;\n    let toastInputTitleRef = (element) => {\n        toastInputTitleEle = element;\n    };\n    let toastInputContentRef = (element) => {\n        toastInputContentEle = element;\n    };\n    let showDurationRef = (element) => {\n        showDurationEle = element;\n    };\n    let hideDurationRef = (element) => {\n        hideDurationEle = element;\n    };\n    let timeOutRef = (element) => {\n        timeOutEle = element;\n    };\n    let toastObj;\n    let dropDownListShowEase;\n    let dropDownListHideEase;\n    let dropDownListProgressDirection;\n    let dropDownListShow;\n    let dropDownListHide;\n    let toastBtnShow;\n    let toastBtnHide;\n    let position = { X: 'Right', Y: 'Bottom' };\n    let prevDuplicates = false;\n    let showData = [\n        { Id: 'ease', Text: 'Ease' },\n        { Id: 'linear', Text: 'Linear' }\n    ];\n    const directionData = [\n        { Id: 'Rtl', Text: 'Right to Left' },\n        { Id: 'Ltr', Text: 'Left to Right' }\n    ];\n    const animationData = [\n        { Id: 'SlideBottomIn', Effect: 'Slide Bottom In' },\n        { Id: 'FadeIn', Effect: 'Fade In' },\n        { Id: 'FadeZoomIn', Effect: 'Fade Zoom In' },\n        { Id: 'FadeZoomOut', Effect: 'Fade Zoom Out' },\n        { Id: 'FlipLeftDownIn', Effect: 'Flip Left Down In' },\n        { Id: 'FlipLeftDownOut', Effect: 'Flip Left Down Out' },\n        { Id: 'FlipLeftUpIn', Effect: 'Flip Left Up In' },\n        { Id: 'FlipLeftUpOut', Effect: 'Flip Left Up Out' },\n        { Id: 'FlipRightDownIn', Effect: 'Flip Right Down In' },\n        { Id: 'FlipRightDownOut', Effect: 'Flip Right Down Out' },\n        { Id: 'FlipRightUpIn', Effect: 'Flip Right Up In' },\n        { Id: 'FlipRightUpOut', Effect: 'Flip Right Up Out' },\n        { Id: 'SlideBottomOut', Effect: 'Slide Bottom Out' },\n        { Id: 'SlideLeftIn', Effect: 'Slide Left In' },\n        { Id: 'SlideLeftOut', Effect: 'Slide Left Out' },\n        { Id: 'SlideRightIn', Effect: 'Slide Right In' },\n        { Id: 'SlideRightOut', Effect: 'Slide Right Out' },\n        { Id: 'SlideTopIn', Effect: 'Slide Top In' },\n        { Id: 'SlideTopOut', Effect: 'Slide Top Out' },\n        { Id: 'ZoomIn', Effect: 'Zoom In' },\n        { Id: 'ZoomOut', Effect: 'Zoom Out' }\n    ];\n    const animationData1 = [\n        { Id: 'SlideBottomOut', Effect: 'Slide Bottom Out' },\n        { Id: 'FadeIn', Effect: 'Fade In' },\n        { Id: 'FadeZoomIn', Effect: 'Fade Zoom In' },\n        { Id: 'FadeZoomOut', Effect: 'Fade Zoom Out' },\n        { Id: 'FlipLeftDownIn', Effect: 'Flip Left Down In' },\n        { Id: 'FlipLeftDownOut', Effect: 'Flip Left Down Out' },\n        { Id: 'FlipLeftUpIn', Effect: 'Flip Left Up In' },\n        { Id: 'FlipLeftUpOut', Effect: 'Flip Left Up Out' },\n        { Id: 'FlipRightDownIn', Effect: 'Flip Right Down In' },\n        { Id: 'FlipRightDownOut', Effect: 'Flip Right Down Out' },\n        { Id: 'FlipRightUpIn', Effect: 'Flip Right Up In' },\n        { Id: 'FlipRightUpOut', Effect: 'Flip Right Up Out' },\n        { Id: 'SlideBottomIn', Effect: 'Slide Bottom In' },\n        { Id: 'SlideLeftIn', Effect: 'Slide Left In' },\n        { Id: 'SlideLeftOut', Effect: 'Slide Left Out' },\n        { Id: 'SlideRightIn', Effect: 'Slide Right In' },\n        { Id: 'SlideRightOut', Effect: 'Slide Right Out' },\n        { Id: 'SlideTopIn', Effect: 'Slide Top In' },\n        { Id: 'SlideTopOut', Effect: 'Slide Top Out' },\n        { Id: 'ZoomIn', Effect: 'Zoom In' },\n        { Id: 'ZoomOut', Effect: 'Zoom Out' }\n    ];\n    let showFields = { text: 'Text', value: 'Id' };\n    let directionFields = { text: 'Text', value: 'Id' };\n    let animationFields = { text: 'Effect', value: 'Id' };\n    let easeValue = 'ease';\n    let directionValue = 'Rtl';\n    let animationValue = 'SlideBottomIn';\n    let animationHideValue = 'SlideBottomOut';\n    function closeOnChange(e) {\n        e.checked ? toastObj.showCloseButton = true : toastObj.showCloseButton = false;\n    }\n    function OnProgressChange(e) {\n        e.checked ? toastObj.showProgressBar = true : toastObj.showProgressBar = false;\n    }\n    function closeNewestOnChange(e) {\n        e.checked ? toastObj.newestOnTop = true : toastObj.newestOnTop = false;\n    }\n    function OnPrevDubChange(e) {\n        prevDuplicates = e.checked;\n    }\n    function OnactionBtnChange(e) {\n        if (e.checked) {\n            toastObj.buttons = [{ model: { content: '<div class=\"e-toast-btn\"> Click Here </div>' }, click: onActionBtnClick }];\n        }\n        else {\n            toastObj.buttons = [];\n        }\n    }\n    function onActionBtnClick(e) {\n        alert('Action button is clicked');\n    }\n    function showToast() {\n        let title = toastInputTitleEle.value;\n        let content = toastInputContentEle.value;\n        if (title === '' && content === '') {\n            content = 'You have created a Toast message';\n        }\n        let showDuration = parseInt(showDurationEle.value, 10);\n        let hideDuration = parseInt(hideDurationEle.value, 10);\n        let timeOut = parseInt(timeOutEle.value, 10);\n        toastObj.show({\n            title: title, content: content, timeOut: timeOut,\n            animation: {\n                show: { duration: showDuration },\n                hide: { duration: hideDuration }\n            }\n        });\n    }\n    function onShowEase() {\n        toastObj.animation.show.easing = dropDownListShowEase.value.toString();\n    }\n    function onProgressDirection() {\n        toastObj.progressDirection = dropDownListProgressDirection.value.toString();\n    }\n    function showChange() {\n        toastObj.animation.show.effect = dropDownListShow.value;\n    }\n    function hideChange() {\n        toastObj.animation.hide.effect = dropDownListHide.value;\n    }\n    function onHideEase() {\n        toastObj.animation.hide.easing = dropDownListHideEase.value.toString();\n    }\n    function showBtnClick() {\n        showToast();\n    }\n    function hideBtnClick() {\n        toastObj.hide('All');\n    }\n    function onbeforeOpen(e) {\n        toastBtnHide.element.style.display = 'inline-block';\n        if (prevDuplicates) {\n            e.cancel = preventDuplicate(e);\n        }\n    }\n    function onclose(e) {\n        if (e.toastContainer.childElementCount === 0) {\n            toastBtnHide.element.style.display = 'none';\n        }\n    }\n    function preventDuplicate(e) {\n        let toastEle = e.element;\n        let toasts = e.toastObj.element.children;\n        for (let i = 0; i < toasts.length; i++) {\n            let toastTitle = toasts[i].querySelector('.e-toast-title');\n            let toastMessage = toasts[i].querySelector('.e-toast-message');\n            if (toastTitle && toastTitle.isEqualNode(toastEle.querySelector('.e-toast-title'))) {\n                return true;\n            }\n            if (!toastTitle && toastMessage && toastMessage.isEqualNode(toastEle.querySelector('.e-toast-message'))) {\n                return true;\n            }\n        }\n        return false;\n    }\n    function rendereComplete() {\n        document.addEventListener('click', function (e) {\n            if (!isNullOrUndefined(toastObj) && e.target !== toastBtnShow.element) {\n                toastObj.hide('All');\n            }\n        }.bind(this));\n    }\n    return (<div className='control-pane'>\n            <div className=\"col-lg-12 control-section toast-api-section\">\n                <div className=\"e-sample-resize-container\">\n                    <ToastComponent ref={(toast) => { toastObj = toast; }} id='toastApi' position={position} close={onclose.bind(this)} beforeOpen={onbeforeOpen.bind(this)} newestOnTop={true}></ToastComponent>\n                    <div className=\"row\">\n                        <div className=\"col-lg-6 padding\">\n                            <div className=\"input-form\">\n                                <div className=\"e-float-input\">\n                                    <input id=\"toast_input_title\" ref={toastInputTitleRef} aria-label=\"title\" className='e-input' required/>\n                                    <span className=\"e-float-line\"></span>\n                                    <label className=\"e-float-text\">Enter the title</label>\n                                </div>\n                            </div>\n                            <div className=\"input-form\">\n                                <div className=\"e-float-input\">\n                                    <textarea className='e-input' ref={toastInputContentRef} aria-label=\"content\" id='toast_input_content' rows={3} required></textarea>\n                                    <label className=\"e-float-text\">Enter the content</label>\n                                </div>\n                            </div>\n                            <div className=\"group-form e-group\">\n                                <CheckBoxComponent id='closeButton' label='Show Close Button' change={closeOnChange.bind(this)}></CheckBoxComponent>\n                            </div>\n                            <div className=\"group-form e-group\">\n                                <CheckBoxComponent id='progressBar' label='Show Progress Bar' change={OnProgressChange.bind(this)}></CheckBoxComponent>\n                            </div>\n                            <div className=\"group-form e-group\">\n                                <CheckBoxComponent id='newestOnTop' checked={true} label='Newest On Top' change={closeNewestOnChange.bind(this)}></CheckBoxComponent>\n                            </div>\n                            <div className=\"group-form e-group\">\n                                <CheckBoxComponent id='prevDuplicates' label='Prevent Duplicates' change={OnPrevDubChange.bind(this)}></CheckBoxComponent>\n                            </div>\n                            <div className=\"group-form e-group\">\n                                <CheckBoxComponent id='actionButtons' label='Action Buttons' change={OnactionBtnChange.bind(this)}></CheckBoxComponent>\n                            </div>\n                            <div className=\"input-form\">\n                                <DropDownListComponent ref={(dropdownlist) => { dropDownListProgressDirection = dropdownlist; }} id=\"ProgressDirection\" floatLabelType=\"Auto\" dataSource={directionData} fields={directionFields} placeholder=\"ProgressDirection\" change={onProgressDirection.bind(this)} value={directionValue}/>\n                            </div>\n                            <div className=\"input-form\">\n                                <div className=\"e-float-input e-input-group\">\n                                    <input className=\"e-input\" id=\"timeOut\" ref={timeOutRef} name=\"Digits\" defaultValue=\"5000\" required/>\n                                    <span className=\"e-float-line\"></span>\n                                    <label className=\"e-float-text\">TimeOut</label>\n                                </div>\n                            </div>\n                        </div>\n                        <div className=\"col-lg-6 padding\">\n                            <div className=\"input-form\">\n                                <h1 className=\"h4\"> Show Animation</h1>\n                                <div className=\"e-float-input\">\n                                    <input className=\"e-input\" id=\"showDuration\" ref={showDurationRef} defaultValue=\"400\" required/>\n                                    <span className=\"e-float-line\"></span>\n                                    <label className=\"e-float-text\">Duration</label>\n                                </div>\n                            </div>\n                            <div className=\"input-form\">\n                                <DropDownListComponent ref={(dropdownlist) => { dropDownListShowEase = dropdownlist; }} id=\"ShowEasing\" dataSource={showData} fields={showFields} placeholder=\"Select an Easing\" change={onShowEase.bind(this)} value={easeValue}/>\n                            </div>\n                            <div className=\"input-form\">\n                                <DropDownListComponent ref={(dropdownlist) => { dropDownListShow = dropdownlist; }} id=\"ShowAnimation\" dataSource={animationData} fields={animationFields} placeholder=\"Select an Animation\" change={showChange.bind(this)} value={animationValue}/>\n                            </div>\n                            <div className=\"input-form e-group\">\n                                <h2 className=\"h4\"> Hide Animation</h2>\n                                <div className=\"e-float-input\">\n                                    <input className=\"e-input\" id=\"hideDuration\" ref={hideDurationRef} defaultValue=\"400\" required/>\n                                    <span className=\"e-float-line\"></span>\n                                    <label className=\"e-float-text\">Duration</label>\n                                </div>\n                            </div>\n                            <div className=\"input-form\">\n                                <DropDownListComponent ref={(dropdownlist) => { dropDownListHideEase = dropdownlist; }} id=\"HideEasing\" dataSource={showData} fields={showFields} placeholder=\"Select an Easing\" change={onHideEase.bind(this)} value={easeValue}/>\n                            </div>\n                            <div className=\"input-form\">\n                                <DropDownListComponent ref={(dropdownlist) => { dropDownListHide = dropdownlist; }} id=\"HideAnimation\" dataSource={animationData1} fields={animationFields} placeholder=\"Select an Animation\" change={hideChange.bind(this)} value={animationHideValue}/>\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"row center\">\n                        <ButtonComponent id='toastBtnShow' ref={(btn) => { toastBtnShow = btn; }} className='e-btn e-primary' onClick={showBtnClick.bind(this)} style={{ marginRight: '15px' }}>Show Toasts</ButtonComponent>\n                        <ButtonComponent id='toastBtnHide' ref={(btn) => { toastBtnHide = btn; }} className='e-btn e-primary' onClick={hideBtnClick.bind(this)} style={{ display: 'none' }}> Hide All</ButtonComponent>\n                    </div>\n                </div>\n            </div>\n            <br />\n        </div>);\n}\nexport default Api;\n\nconst root = createRoot(document.getElementById('sample'));\nroot.render(<Api />);","dependencies":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-react-base\":\"*\",\"@syncfusion/ej2-notifications\":\"*\",\"@syncfusion/ej2-react-notifications\":\"*\",\"@syncfusion/ej2-icons\":\"*\",\"markdown-spellcheck\":\"^1.3.1\",\"@syncfusion/ej2-dropdowns\":\"*\",\"@syncfusion/ej2-react-dropdowns\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-react-buttons\":\"*\",\"@syncfusion/ej2-popups\":\"*\",\"@syncfusion/ej2-react-charts\":\"*\",\"@syncfusion/ej2/base\":\"*\",\"@syncfusion/ej2-charts'; // Import the necessary types from Syncfusion\":\"*\",\"@syncfusion/ej2-lists\":\"*\",\"@syncfusion/ej2-documenteditor\":\"*\",\"@syncfusion/ej2-splitbuttons\":\"*\",\"@syncfusion/ej2-navigations\":\"*\",\"@syncfusion/ej2-react-popups\":\"*\",\"@syncfusion/ej2-pivotview\":\"*\",\"@syncfusion/ej2-react-progressbar\":\"*\",\"@syncfusion/ej2-schedule\":\"*\",\"@syncfusion/ej2-data\":\"*\"}"}