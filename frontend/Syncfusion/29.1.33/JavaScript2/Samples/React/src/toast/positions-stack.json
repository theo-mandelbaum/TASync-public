{"index.css":".toast-pos-section #toast_pos_property {\n        height: 500px;\n        border: none;\n        margin: auto;\n    }\n\n    #toast_pos_property td {\n        width: 50%;\n    }\n\n    .e-toast-icon.e-laura.e-icons {\n        border-radius: 50%;\n        background-image: url('https://ej2.syncfusion.com/react/demos/src/toast/resource/laura.png');\n        background-repeat: no-repeat;\n        background-size: cover;\n        height: 50px !important;\n        width: 68px !important;\n        background-size: 50px 50px;\n        margin: 0;\n    }\n\n\n    @media (min-width: 740px) {\n        #toast_pos_property {\n            width: 450px;\n        }\n    }\n\n    .bootstrap5 .e-toast-icon.e-laura.e-icons,\n    .bootstrap5-dark .e-toast-icon.e-laura.e-icons,\n    .bootstrap5.3 .e-toast-icon.e-laura.e-icons,\n    .bootstrap5.3-dark .e-toast-icon.e-laura.e-icons {\n        margin-top: 13px;\n        margin-right: 14px;\n    }\n\n    .bootstrap5 #toast_pos.e-toast-container .e-toast .e-toast-icon,\n    .bootstrap5-dark #toast_pos.e-toast-container .e-toast .e-toast-icon,\n    .bootstrap5.3 #toast_pos.e-toast-container .e-toast .e-toast-icon,\n    .bootstrap5.3-dark #toast_pos.e-toast-container .e-toast .e-toast-icon {\n        position: relative;\n    }\n\n    .bootstrap5 #toast_pos.e-toast-container .e-toast .e-toast-message,\n    .bootstrap5-dark #toast_pos.e-toast-container .e-toast .e-toast-message,\n    .bootstrap5.3 #toast_pos.e-toast-container .e-toast .e-toast-message,\n    .bootstrap5.3-dark #toast_pos.e-toast-container .e-toast .e-toast-message {\n        padding-left: 10px;\n    }\n\n    .bootstrap5 #toast_pos.e-toast-container .e-toast.e-toast-header-icon .e-toast-message .e-toast-title:first-child,\n    .bootstrap5-dark #toast_pos.e-toast-container .e-toast.e-toast-header-icon .e-toast-message .e-toast-title:first-child,\n    .bootstrap5.3 #toast_pos.e-toast-container .e-toast.e-toast-header-icon .e-toast-message .e-toast-title:first-child,\n    .bootstrap5.3-dark #toast_pos.e-toast-container .e-toast.e-toast-header-icon .e-toast-message .e-toast-title:first-child {\n        padding-left: 12px;\n    }","index.html":"<!DOCTYPE html>\n<html>\n<head>\n    <title>Syncfusion React Sample</title>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\n    <meta name=\"author\" content=\"Syncfusion\" />\n    <link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\n</head>\n\n<body class=\"{{theme}}\">\n     <style>\n            .control-section\n            {\n                margin-top: 100px;\n            }\n    </style>\n    <div id='sample'>\n</body>\n</html>\n","index.js":"import { createRoot } from 'react-dom/client';\nimport './index.css';\nimport * as React from 'react';\nimport { SampleBase } from './sample-base';\nimport { isNullOrUndefined } from '@syncfusion/ej2-base';\nimport { ButtonComponent, RadioButtonComponent } from '@syncfusion/ej2-react-buttons';\nimport { DropDownListComponent } from '@syncfusion/ej2-react-dropdowns';\nimport { ToastComponent } from '@syncfusion/ej2-react-notifications';\n\nexport class Positions extends SampleBase {\n    dropdownEle;\n    dropdownRef;\n    customChooseEle;\n    customChooseRef;\n    xPosEle;\n    xPosRef;\n    yPosEle;\n    yPosRef;\n    constructor(props) {\n        super(props);\n        this.dropdownRef = element => {\n            this.dropdownEle = element;\n        };\n        this.customChooseRef = element => {\n            this.customChooseEle = element;\n        };\n        this.xPosRef = element => {\n            this.xPosEle = element;\n        };\n        this.yPosRef = element => {\n            this.yPosEle = element;\n        };\n    }\n    toastBtnShow;\n    toastBtnHide;\n    toastObj;\n    dropDownObj;\n    dropRadioObj;\n    customRadioObj;\n    radio1;\n    radio2;\n    position = { X: 'Right', Y: 'Bottom' };\n    target = document.body;\n    initialWid = '';\n    customFlag = false;\n    dropData = [\n        { Id: 'topleft', Text: 'Top Left' },\n        { Id: 'topright', Text: 'Top Right' },\n        { Id: 'topcenter', Text: 'Top Center' },\n        { Id: 'topfullwidth', Text: 'Top Full Width' },\n        { Id: 'bottomleft', Text: 'Bottom Left' },\n        { Id: 'bottomright', Text: 'Bottom Right' },\n        { Id: 'bottomcenter', Text: 'Bottom Center' },\n        { Id: 'bottomfullwidth', Text: 'Bottom Full Width' },\n    ];\n    dropFields = { text: 'Text', value: 'Id' };\n    value = 'bottomright';\n    checkboxChange(e) {\n        if (this.radio1.checked) {\n            this.toastObj.hide('All');\n            this.toastObj.target = '#toast_pos_target';\n            this.toastShow(1000);\n        }\n    }\n    toastShow(timeOutDelay) {\n        setTimeout(function () {\n            this.toastObj.show();\n        }.bind(this), timeOutDelay);\n    }\n    checkboxChange1(e) {\n        if (this.radio2.checked) {\n            this.toastObj.hide('All');\n            this.toastObj.target = document.body;\n            this.toastShow(1000);\n        }\n    }\n    checkboxChange2(e) {\n        if (this.dropRadioObj.checked) {\n            this.toastObj.hide('All');\n            this.dropdownEle.style.display = 'table-cell';\n            this.customChooseEle.style.display = 'none';\n            this.setToastPosValue(this.dropDownObj.value.toString());\n            this.customFlag = false;\n            this.toastShow(1000);\n        }\n    }\n    checkboxChange3(e) {\n        if (this.customRadioObj.checked) {\n            this.toastObj.hide('All');\n            this.dropdownEle.style.display = 'none';\n            this.customChooseEle.style.display = 'table-cell';\n            this.setcustomPosValue();\n            this.customFlag = true;\n            this.toastShow(1000);\n        }\n    }\n    valueChange(e) {\n        this.toastObj.hide('All');\n        this.setToastPosValue(e.value.toString());\n        this.toastShow(1000);\n    }\n    setcustomPosValue() {\n        this.toastObj.width = this.initialWid;\n        this.toastObj.position.X = parseInt(this.xPosEle.value, 10);\n        this.toastObj.position.Y = parseInt(this.yPosEle.value, 10);\n    }\n    showBtnClick() {\n        if (this.customFlag) {\n            this.setcustomPosValue();\n        }\n        this.toastObj.show();\n    }\n    setToastPosValue(value) {\n        this.toastObj.width = this.initialWid;\n        switch (value) {\n            case 'topleft':\n                this.toastObj.position.X = 'Left';\n                this.toastObj.position.Y = 'Top';\n                break;\n            case 'topright':\n                this.toastObj.position.X = 'Right';\n                this.toastObj.position.Y = 'Top';\n                break;\n            case 'topcenter':\n                this.toastObj.position.X = 'Center';\n                this.toastObj.position.Y = 'Top';\n                break;\n            case 'topfullwidth':\n                this.toastObj.width = '100%';\n                this.toastObj.position.X = 'Center';\n                this.toastObj.position.Y = 'Top';\n                break;\n            case 'bottomleft':\n                this.toastObj.position.X = 'Left';\n                this.toastObj.position.Y = 'Bottom';\n                break;\n            case 'bottomright':\n                this.toastObj.position.X = 'Right';\n                this.toastObj.position.Y = 'Bottom';\n                break;\n            case 'bottomcenter':\n                this.toastObj.position.X = 'Center';\n                this.toastObj.position.Y = 'Bottom';\n                break;\n            case 'bottomfullwidth':\n                this.toastObj.width = '100%';\n                this.toastObj.position.X = 'Center';\n                this.toastObj.position.Y = 'Bottom';\n                break;\n        }\n    }\n    hideBtnClick() {\n        this.toastObj.hide('All');\n    }\n    created() {\n        setTimeout(function () {\n            this.toastShow(200);\n            this.initialWid = this.toastObj.width.toString();\n        }.bind(this), 200);\n    }\n    onclose(e) {\n        if (e.toastContainer.childElementCount === 0) {\n            this.toastBtnHide.element.style.display = 'none';\n        }\n    }\n    onbeforeOpen() {\n        this.toastBtnHide.element.style.display = 'inline-block';\n    }\n    render() {\n        document.addEventListener('click', function (e) {\n            if (!isNullOrUndefined(this.toastObj) && e.target !== this.toastBtnShow.element && this.toastObj.target === document.body) {\n                this.toastObj.hide('All');\n            }\n        }.bind(this));\n        return (<div className='control-pane'>\n                <div className='col-lg-12 control-section toast-pos-section'>\n                    <div className=\"e-sample-resize-container\" id=\"toast_pos_target\">\n                        <ToastComponent ref={(toast) => { this.toastObj = toast; }} id='toast_pos' title='Matt sent you a friend request' content='You have a friend request yet to accept.' icon='e-laura' position={this.position} target={this.target} created={this.created.bind(this)} close={this.onclose.bind(this)} beforeOpen={this.onbeforeOpen.bind(this)}></ToastComponent>\n                        <div id=\"toast_pos_property\">\n                            <table style={{ 'width': '100%' }}>\n                                <tbody>\n                                    <tr>\n                                        <td>\n                                            <div style={{ 'padding': '25px 0 0 0' }}>\n                                                <RadioButtonComponent ref={(scope) => { this.dropRadioObj = scope; }} id='dropdownRadio' checked={true} label='Position' name='toastPos' value=\"Position\" change={this.checkboxChange2.bind(this)}></RadioButtonComponent>\n                                            </div>\n                                        </td>\n                                        <td>\n                                            <div style={{ 'padding': '25px 0 0 0' }}>\n                                                <RadioButtonComponent ref={(scope) => { this.customRadioObj = scope; }} id='customRedio' label='Custom' name='toastPos' value=\"Custom\" change={this.checkboxChange3.bind(this)}></RadioButtonComponent>\n                                            </div>\n                                        </td>\n                                    </tr>\n                                </tbody>\n                            </table>\n                            <div id=\"dropdownChoose\">\n                                <div id=\"dropdown\" ref={this.dropdownRef} style={{ paddingTop: '25px' }}>\n                                    <DropDownListComponent ref={(dropdownlist) => { this.dropDownObj = dropdownlist; }} id=\"position\" dataSource={this.dropData} fields={this.dropFields} placeholder=\"Select a position\" change={this.valueChange.bind(this)} value={this.value} index={5} popupHeight='200px'/>\n                                </div>\n                            </div>\n                            <table style={{ 'width': '100%' }}>\n                                <tbody>\n                                    <tr>\n                                        <td id=\"customChoose\" ref={this.customChooseRef} style={{ display: 'none' }}>\n                                            <form id=\"formId\" className=\"form-horizontal\">\n                                                <div className=\"e-row\">\n                                                    <div className=\"e-float-input\">\n                                                        <input className=\"e-input\" id=\"xPos\" ref={this.xPosRef} name=\"Digits\" defaultValue=\"50\" required/>\n                                                        <span className=\"e-float-line\"></span>\n                                                        <label className=\"e-float-text\">X Position</label>\n                                                    </div>\n                                                </div>\n                                                <div className=\"e-row\">\n                                                    <div className=\"e-float-input\">\n                                                        <input className=\"e-input\" id=\"yPos\" ref={this.yPosRef} name=\"Digits\" defaultValue=\"50\" required/>\n                                                        <span className=\"e-float-line\"></span>\n                                                        <label className=\"e-float-text\">Y Position</label>\n                                                    </div>\n                                                </div>\n                                            </form>\n                                        </td>\n                                    </tr>\n                                    <tr>\n                                        <td>\n                                            <div style={{ 'padding': '25px 0 0 0' }}>\n                                                <RadioButtonComponent ref={(scope) => { this.radio1 = scope; }} id='radio1' label='Target' name='toast' value='Target' change={this.checkboxChange.bind(this)}></RadioButtonComponent>\n                                            </div>\n                                        </td>\n                                        <td>\n                                            <div style={{ 'padding': '25px 0 0 0' }}>\n                                                <RadioButtonComponent ref={(scope) => { this.radio2 = scope; }} id='radio2' checked={true} label='Global' name='toast' value='Global' change={this.checkboxChange1.bind(this)}></RadioButtonComponent>\n                                            </div>\n                                        </td>\n                                    </tr>\n                                </tbody>\n                            </table>\n                            <div id=\"toast_btn\" style={{ paddingTop: '25px' }}>\n                                <ButtonComponent className=\"e-btn e-control\" id='show_Toast' ref={(btn) => { this.toastBtnShow = btn; }} style={{ marginRight: '15px' }} onClick={this.showBtnClick.bind(this)}>Show Toasts</ButtonComponent>\n                                <ButtonComponent className=\"e-btn e-control\" id='hideTosat' ref={(btn) => { this.toastBtnHide = btn; }} onClick={this.hideBtnClick.bind(this)}>Hide All</ButtonComponent>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>);\n    }\n}\n\nconst root = createRoot(document.getElementById('sample'));\nroot.render(<Positions />);","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n                this.rendereComplete();\n            });\n        }\n    }\n    export function updateSampleSection(){}\n    ","dependencies":"{\"@syncfusion/ej2-icons\":\"*\",\"markdown-spellcheck\":\"^1.3.1\",\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-react-base\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-react-buttons\":\"*\",\"@syncfusion/ej2-dropdowns\":\"*\",\"@syncfusion/ej2-react-dropdowns\":\"*\",\"@syncfusion/ej2-notifications\":\"*\",\"@syncfusion/ej2-react-notifications\":\"*\",\"@syncfusion/ej2-popups\":\"*\",\"@syncfusion/ej2-react-charts\":\"*\",\"@syncfusion/ej2/base\":\"*\",\"@syncfusion/ej2-charts'; // Import the necessary types from Syncfusion\":\"*\",\"@syncfusion/ej2-lists\":\"*\",\"@syncfusion/ej2-documenteditor\":\"*\",\"@syncfusion/ej2-splitbuttons\":\"*\",\"@syncfusion/ej2-navigations\":\"*\",\"@syncfusion/ej2-react-popups\":\"*\",\"@syncfusion/ej2-pivotview\":\"*\",\"@syncfusion/ej2-react-progressbar\":\"*\",\"@syncfusion/ej2-schedule\":\"*\",\"@syncfusion/ej2-data\":\"*\"}"}