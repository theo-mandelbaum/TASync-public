{"index.css":" .toast-api-section {\n        padding-top: 0;\n    }\n    .toast-api-section .input-form {\n        margin: 33px 0;\n    }\n\n    .toast-api-section .group-form {\n        margin: 25px 0;\n    }\n\n    .toast-api-section .group-form.e-group {\n        margin-top: 35px;\n    }\n    .toast-api-section .row .padding {\n        padding: 0 15px;\n    }\n    .toast-api-section .row.center {\n        text-align: center;\n    }\n    .toast-api-section .row {\n        padding: 0 15px;\n    }\n    .input-form .h4,\n    .input-form.e-group .h4 {\n      font-size: 16px;\n      margin: 0 0 10px;\n  } ","index.html":"<!DOCTYPE html>\n<html>\n<head>\n    <title>Syncfusion React Sample</title>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\n    <meta name=\"author\" content=\"Syncfusion\" />\n    <link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\n</head>\n\n<body class=\"{{theme}}\">\n     <style>\n            .control-section\n            {\n                margin-top: 100px;\n            }\n    </style>\n    <div id='sample'>\n</body>\n</html>\n","index.js":"import { createRoot } from 'react-dom/client';\nimport './index.css';\nimport * as React from 'react';\nimport { SampleBase } from './sample-base';\nimport { ToastComponent } from '@syncfusion/ej2-react-notifications';\nimport { isNullOrUndefined } from '@syncfusion/ej2-base';\nimport { DropDownListComponent } from '@syncfusion/ej2-react-dropdowns';\nimport { CheckBoxComponent, ButtonComponent } from '@syncfusion/ej2-react-buttons';\n\nexport class Api extends SampleBase {\n    toastInputTitleEle;\n    toastInputTitleRef;\n    toastInputContentEle;\n    toastInputContentRef;\n    showDurationEle;\n    showDurationRef;\n    hideDurationEle;\n    hideDurationRef;\n    timeOutEle;\n    timeOutRef;\n    constructor(props) {\n        super(props);\n        this.toastInputTitleRef = element => {\n            this.toastInputTitleEle = element;\n        };\n        this.toastInputContentRef = element => {\n            this.toastInputContentEle = element;\n        };\n        this.showDurationRef = element => {\n            this.showDurationEle = element;\n        };\n        this.hideDurationRef = element => {\n            this.hideDurationEle = element;\n        };\n        this.timeOutRef = element => {\n            this.timeOutEle = element;\n        };\n    }\n    toastObj;\n    dropDownListShowEase;\n    dropDownListHideEase;\n    dropDownListProgressDirection;\n    dropDownListShow;\n    dropDownListHide;\n    toastBtnShow;\n    toastBtnHide;\n    position = { X: 'Right', Y: 'Bottom' };\n    prevDuplicates = false;\n    showData = [\n        { Id: 'ease', Text: 'Ease' },\n        { Id: 'linear', Text: 'Linear' }\n    ];\n    directionData = [\n        { Id: 'Rtl', Text: 'Right to Left' },\n        { Id: 'Ltr', Text: 'Left to Right' }\n    ];\n    animationData = [\n        { Id: 'SlideBottomIn', Effect: 'Slide Bottom In' },\n        { Id: 'FadeIn', Effect: 'Fade In' },\n        { Id: 'FadeZoomIn', Effect: 'Fade Zoom In' },\n        { Id: 'FadeZoomOut', Effect: 'Fade Zoom Out' },\n        { Id: 'FlipLeftDownIn', Effect: 'Flip Left Down In' },\n        { Id: 'FlipLeftDownOut', Effect: 'Flip Left Down Out' },\n        { Id: 'FlipLeftUpIn', Effect: 'Flip Left Up In' },\n        { Id: 'FlipLeftUpOut', Effect: 'Flip Left Up Out' },\n        { Id: 'FlipRightDownIn', Effect: 'Flip Right Down In' },\n        { Id: 'FlipRightDownOut', Effect: 'Flip Right Down Out' },\n        { Id: 'FlipRightUpIn', Effect: 'Flip Right Up In' },\n        { Id: 'FlipRightUpOut', Effect: 'Flip Right Up Out' },\n        { Id: 'SlideBottomOut', Effect: 'Slide Bottom Out' },\n        { Id: 'SlideLeftIn', Effect: 'Slide Left In' },\n        { Id: 'SlideLeftOut', Effect: 'Slide Left Out' },\n        { Id: 'SlideRightIn', Effect: 'Slide Right In' },\n        { Id: 'SlideRightOut', Effect: 'Slide Right Out' },\n        { Id: 'SlideTopIn', Effect: 'Slide Top In' },\n        { Id: 'SlideTopOut', Effect: 'Slide Top Out' },\n        { Id: 'ZoomIn', Effect: 'Zoom In' },\n        { Id: 'ZoomOut', Effect: 'Zoom Out' }\n    ];\n    animationData1 = [\n        { Id: 'SlideBottomOut', Effect: 'Slide Bottom Out' },\n        { Id: 'FadeIn', Effect: 'Fade In' },\n        { Id: 'FadeZoomIn', Effect: 'Fade Zoom In' },\n        { Id: 'FadeZoomOut', Effect: 'Fade Zoom Out' },\n        { Id: 'FlipLeftDownIn', Effect: 'Flip Left Down In' },\n        { Id: 'FlipLeftDownOut', Effect: 'Flip Left Down Out' },\n        { Id: 'FlipLeftUpIn', Effect: 'Flip Left Up In' },\n        { Id: 'FlipLeftUpOut', Effect: 'Flip Left Up Out' },\n        { Id: 'FlipRightDownIn', Effect: 'Flip Right Down In' },\n        { Id: 'FlipRightDownOut', Effect: 'Flip Right Down Out' },\n        { Id: 'FlipRightUpIn', Effect: 'Flip Right Up In' },\n        { Id: 'FlipRightUpOut', Effect: 'Flip Right Up Out' },\n        { Id: 'SlideBottomIn', Effect: 'Slide Bottom In' },\n        { Id: 'SlideLeftIn', Effect: 'Slide Left In' },\n        { Id: 'SlideLeftOut', Effect: 'Slide Left Out' },\n        { Id: 'SlideRightIn', Effect: 'Slide Right In' },\n        { Id: 'SlideRightOut', Effect: 'Slide Right Out' },\n        { Id: 'SlideTopIn', Effect: 'Slide Top In' },\n        { Id: 'SlideTopOut', Effect: 'Slide Top Out' },\n        { Id: 'ZoomIn', Effect: 'Zoom In' },\n        { Id: 'ZoomOut', Effect: 'Zoom Out' }\n    ];\n    showFields = { text: 'Text', value: 'Id' };\n    directionFields = { text: 'Text', value: 'Id' };\n    animationFields = { text: 'Effect', value: 'Id' };\n    easeValue = 'ease';\n    directionValue = 'Rtl';\n    animationValue = 'SlideBottomIn';\n    animationHideValue = 'SlideBottomOut';\n    closeOnChange(e) {\n        e.checked ? this.toastObj.showCloseButton = true : this.toastObj.showCloseButton = false;\n    }\n    OnProgressChange(e) {\n        e.checked ? this.toastObj.showProgressBar = true : this.toastObj.showProgressBar = false;\n    }\n    closeNewestOnChange(e) {\n        e.checked ? this.toastObj.newestOnTop = true : this.toastObj.newestOnTop = false;\n    }\n    OnPrevDubChange(e) {\n        this.prevDuplicates = e.checked;\n    }\n    OnactionBtnChange(e) {\n        if (e.checked) {\n            this.toastObj.buttons = [{ model: { content: '<div class=\"e-toast-btn\"> Click Here </div>' }, click: this.onActionBtnClick }];\n        }\n        else {\n            this.toastObj.buttons = [];\n        }\n    }\n    onActionBtnClick(e) {\n        alert('Action button is clicked');\n    }\n    showToast() {\n        let title = this.toastInputTitleEle.value;\n        let content = this.toastInputContentEle.value;\n        if (title === '' && content === '') {\n            content = 'You have created a Toast message';\n        }\n        let showDuration = parseInt(this.showDurationEle.value, 10);\n        let hideDuration = parseInt(this.hideDurationEle.value, 10);\n        let timeOut = parseInt(this.timeOutEle.value, 10);\n        this.toastObj.show({\n            title: title, content: content, timeOut: timeOut,\n            animation: {\n                show: { duration: showDuration },\n                hide: { duration: hideDuration }\n            }\n        });\n    }\n    onShowEase() {\n        this.toastObj.animation.show.easing = this.dropDownListShowEase.value.toString();\n    }\n    onProgressDirection() {\n        this.toastObj.progressDirection = this.dropDownListProgressDirection.value.toString();\n    }\n    showChange() {\n        this.toastObj.animation.show.effect = this.dropDownListShow.value;\n    }\n    hideChange() {\n        this.toastObj.animation.hide.effect = this.dropDownListHide.value;\n    }\n    onHideEase() {\n        this.toastObj.animation.hide.easing = this.dropDownListHideEase.value.toString();\n    }\n    showBtnClick() {\n        this.showToast();\n    }\n    hideBtnClick() {\n        this.toastObj.hide('All');\n    }\n    onbeforeOpen(e) {\n        this.toastBtnHide.element.style.display = 'inline-block';\n        if (this.prevDuplicates) {\n            e.cancel = this.preventDuplicate(e);\n        }\n    }\n    onclose(e) {\n        if (e.toastContainer.childElementCount === 0) {\n            this.toastBtnHide.element.style.display = 'none';\n        }\n    }\n    preventDuplicate(e) {\n        let toastEle = e.element;\n        let toasts = e.toastObj.element.children;\n        for (let i = 0; i < toasts.length; i++) {\n            let toastTitle = toasts[i].querySelector('.e-toast-title');\n            let toastMessage = toasts[i].querySelector('.e-toast-message');\n            if (toastTitle && toastTitle.isEqualNode(toastEle.querySelector('.e-toast-title'))) {\n                return true;\n            }\n            if (!toastTitle && toastMessage && toastMessage.isEqualNode(toastEle.querySelector('.e-toast-message'))) {\n                return true;\n            }\n        }\n        return false;\n    }\n    rendereComplete() {\n        document.addEventListener('click', function (e) {\n            if (!isNullOrUndefined(this.toastObj) && e.target !== this.toastBtnShow.element) {\n                this.toastObj.hide('All');\n            }\n        }.bind(this));\n    }\n    render() {\n        return (<div className='control-pane'>\n                <div className=\"col-lg-12 control-section toast-api-section\">\n                    <div className=\"e-sample-resize-container\">\n                        <ToastComponent ref={(toast) => { this.toastObj = toast; }} id='toastApi' position={this.position} close={this.onclose.bind(this)} beforeOpen={this.onbeforeOpen.bind(this)} newestOnTop={true}></ToastComponent>\n                        <div className=\"row\">\n                            <div className=\"col-lg-6 padding\">\n                                <div className=\"input-form\">\n                                    <div className=\"e-float-input\">\n                                        <input id=\"toast_input_title\" ref={this.toastInputTitleRef} className='e-input' required/>\n                                        <span className=\"e-float-line\"></span>\n                                        <label className=\"e-float-text\">Enter the title</label>\n                                    </div>\n                                </div>\n                                <div className=\"input-form\">\n                                    <div className=\"e-float-input\">\n                                        <textarea className='e-input' ref={this.toastInputContentRef} id='toast_input_content' rows={3} required></textarea>\n                                        <label className=\"e-float-text\">Enter the content</label>\n                                    </div>\n                                </div>\n                                <div className=\"group-form e-group\">\n                                    <CheckBoxComponent id='closeButton' label='Show Close Button' change={this.closeOnChange.bind(this)}></CheckBoxComponent>\n                                </div>\n                                <div className=\"group-form e-group\">\n                                    <CheckBoxComponent id='progressBar' label='Show Progress Bar' change={this.OnProgressChange.bind(this)}></CheckBoxComponent>\n                                </div>\n                                <div className=\"group-form e-group\">\n                                    <CheckBoxComponent id='newestOnTop' checked={true} label='Newest On Top' change={this.closeNewestOnChange.bind(this)}></CheckBoxComponent>\n                                </div>\n                                <div className=\"group-form e-group\">\n                                    <CheckBoxComponent id='prevDuplicates' label='Prevent Duplicates' change={this.OnPrevDubChange.bind(this)}></CheckBoxComponent>\n                                </div>\n                                <div className=\"group-form e-group\">\n                                    <CheckBoxComponent id='actionButtons' label='Action Buttons' change={this.OnactionBtnChange.bind(this)}></CheckBoxComponent>\n                                </div>\n                                <div className=\"input-form\">\n                                    <DropDownListComponent ref={(dropdownlist) => { this.dropDownListProgressDirection = dropdownlist; }} id=\"ProgressDirection\" floatLabelType=\"Auto\" dataSource={this.directionData} fields={this.directionFields} placeholder=\"ProgressDirection\" change={this.onProgressDirection.bind(this)} value={this.directionValue}/>\n                                </div>\n                                <div className=\"input-form\">\n                                    <div className=\"e-float-input e-input-group\">\n                                        <input className=\"e-input\" id=\"timeOut\" ref={this.timeOutRef} name=\"Digits\" defaultValue=\"5000\" required/>\n                                        <span className=\"e-float-line\"></span>\n                                        <label className=\"e-float-text\">TimeOut</label>\n                                    </div>\n                                </div>\n                            </div>\n                            <div className=\"col-lg-6 padding\">\n                                <div className=\"input-form\">\n                                    <h4> Show Animation</h4>\n                                    <div className=\"e-float-input\">\n                                        <input className=\"e-input\" id=\"showDuration\" ref={this.showDurationRef} defaultValue=\"400\" required/>\n                                        <span className=\"e-float-line\"></span>\n                                        <label className=\"e-float-text\">Duration</label>\n                                    </div>\n                                </div>\n                                <div className=\"input-form\">\n                                    <DropDownListComponent ref={(dropdownlist) => { this.dropDownListShowEase = dropdownlist; }} id=\"ShowEasing\" dataSource={this.showData} fields={this.showFields} placeholder=\"Select an Easing\" change={this.onShowEase.bind(this)} value={this.easeValue}/>\n                                </div>\n                                <div className=\"input-form\">\n                                    <DropDownListComponent ref={(dropdownlist) => { this.dropDownListShow = dropdownlist; }} id=\"ShowAnimation\" dataSource={this.animationData} fields={this.animationFields} placeholder=\"Select an Animation\" change={this.showChange.bind(this)} value={this.animationValue}/>\n                                </div>\n                                <div className=\"input-form e-group\">\n                                    <h4> Hide Animation</h4>\n                                    <div className=\"e-float-input\">\n                                        <input className=\"e-input\" id=\"hideDuration\" ref={this.hideDurationRef} defaultValue=\"400\" required/>\n                                        <span className=\"e-float-line\"></span>\n                                        <label className=\"e-float-text\">Duration</label>\n                                    </div>\n                                </div>\n                                <div className=\"input-form\">\n                                    <DropDownListComponent ref={(dropdownlist) => { this.dropDownListHideEase = dropdownlist; }} id=\"HideEasing\" dataSource={this.showData} fields={this.showFields} placeholder=\"Select an Easing\" change={this.onHideEase.bind(this)} value={this.easeValue}/>\n                                </div>\n                                <div className=\"input-form\">\n                                    <DropDownListComponent ref={(dropdownlist) => { this.dropDownListHide = dropdownlist; }} id=\"HideAnimation\" dataSource={this.animationData1} fields={this.animationFields} placeholder=\"Select an Animation\" change={this.hideChange.bind(this)} value={this.animationHideValue}/>\n                                </div>\n                            </div>\n                        </div>\n                        <div className=\"row center\">\n                            <ButtonComponent id='toastBtnShow' ref={(btn) => { this.toastBtnShow = btn; }} className='e-btn e-primary' onClick={this.showBtnClick.bind(this)} style={{ marginRight: '15px' }}>Show Toasts</ButtonComponent>\n                            <ButtonComponent id='toastBtnHide' ref={(btn) => { this.toastBtnHide = btn; }} className='e-btn e-primary' onClick={this.hideBtnClick.bind(this)} style={{ display: 'none' }}> Hide All</ButtonComponent>\n                        </div>\n                    </div>\n                </div>\n                <br />\n            </div>);\n    }\n}\n\nconst root = createRoot(document.getElementById('sample'));\nroot.render(<Api />);","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n                this.rendereComplete();\n            });\n        }\n    }\n    export function updateSampleSection(){}\n    ","dependencies":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-react-base\":\"*\",\"@syncfusion/ej2-notifications\":\"*\",\"@syncfusion/ej2-react-notifications\":\"*\",\"@syncfusion/ej2-icons\":\"*\",\"markdown-spellcheck\":\"^1.3.1\",\"@syncfusion/ej2-dropdowns\":\"*\",\"@syncfusion/ej2-react-dropdowns\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-react-buttons\":\"*\",\"@syncfusion/ej2-popups\":\"*\",\"@syncfusion/ej2-react-charts\":\"*\",\"@syncfusion/ej2/base\":\"*\",\"@syncfusion/ej2-charts'; // Import the necessary types from Syncfusion\":\"*\",\"@syncfusion/ej2-lists\":\"*\",\"@syncfusion/ej2-documenteditor\":\"*\",\"@syncfusion/ej2-splitbuttons\":\"*\",\"@syncfusion/ej2-navigations\":\"*\",\"@syncfusion/ej2-react-popups\":\"*\",\"@syncfusion/ej2-pivotview\":\"*\",\"@syncfusion/ej2-react-progressbar\":\"*\",\"@syncfusion/ej2-schedule\":\"*\",\"@syncfusion/ej2-data\":\"*\"}"}