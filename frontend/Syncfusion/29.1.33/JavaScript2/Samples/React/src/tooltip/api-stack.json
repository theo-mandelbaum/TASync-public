{"index.css":".userselect {\n  -webkit-user-select: none;\n  /* Safari 3.1+ */\n  -moz-user-select: none;\n  /* Firefox 2+ */\n  -ms-user-select: none;\n  /* IE 10+ */\n  user-select: none;\n  /* Standard syntax */\n}\n\n.tooltip-api #property {\n  padding-top: 200px;\n}\n\n#defaultTooltip {\n  width: 130px;\n  margin: 100px auto;\n}\n\n#tooltipContentValue {\n  height: 34px;\n  width: 136px;\n  padding-left: 10px;\n}\n\n.highcontrast #tooltipContentValue {\n  border: 1px solid;\n  border-width: 1px;\n  color: #fff;\n  background: #000;\n}\n","property-pane.js":"import * as ReactDOM from 'react-dom';\nimport * as React from 'react';\nimport { select } from '@syncfusion/ej2-base';\nexport class PropertyPane extends React.Component {\n    render() {\n        const mobilePropPane = select('.sb-mobile-prop-pane');\n        const isMobile = window.matchMedia('(max-width:550px)').matches;\n        return isMobile && mobilePropPane ?\n            ReactDOM.createPortal(<div className='property-panel-section'>\n                    <div className=\"property-panel-header\">\n                        {this.props.title}\n                    </div>\n                    <div className=\"property-panel-content\">\n                        {this.props.children}\n                    </div>\n                </div>, mobilePropPane)\n            :\n                (<div className='property-panel-section'>\n                    <div className=\"property-panel-header\">\n                        {this.props.title}\n                    </div>\n                    <div className=\"property-panel-content\">\n                        {this.props.children}\n                    </div>\n                </div>);\n    }\n}\n","index.html":"<!DOCTYPE html>\n<html>\n<head>\n    <title>Syncfusion React Sample</title>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\n    <meta name=\"author\" content=\"Syncfusion\" />\n    <link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\n</head>\n\n<body class=\"{{theme}}\">\n     <style>\n            .control-section\n            {\n                margin-top: 100px;\n            }\n    </style>\n    <div id='sample'>\n</body>\n</html>\n","index.js":"import { createRoot } from 'react-dom/client';\nimport './index.css';\n/**\n * Loading API sample\n */\nimport { ButtonComponent, CheckBoxComponent } from \"@syncfusion/ej2-react-buttons\";\nimport { DropDownListComponent } from \"@syncfusion/ej2-react-dropdowns\";\nimport { NumericTextBoxComponent } from \"@syncfusion/ej2-react-inputs\";\nimport { TooltipComponent } from \"@syncfusion/ej2-react-popups\";\nimport * as React from \"react\";\nimport { PropertyPane } from './property-pane';\nimport { SampleBase } from './sample-base';\n\nexport class ApiTooltip extends SampleBase {\n    tooltip;\n    sticky;\n    ddl;\n    height;\n    width;\n    text;\n    data = [\"Click\", \"Hover\", \"Auto\"];\n    onClick(args) {\n        if (this.tooltip != null) {\n            if (!args.target.classList.contains(\"e-control\") && !args.target.classList.contains(\"e-btn\")) {\n                if (!this.tooltip.isSticky && document.getElementsByClassName(\"e-tooltip-wrap\").length > 0) {\n                    this.tooltip.close();\n                }\n            }\n        }\n    }\n    onScroll() {\n        if (this.tooltip != null) {\n            if (document.getElementsByClassName(\"e-tooltip-wrap\").length > 0) {\n                this.tooltip.close();\n            }\n        }\n    }\n    created() {\n        if (document.getElementById(\"right-pane\")) {\n            document.getElementById(\"right-pane\").addEventListener(\"click\", this.onClick.bind(this));\n            document.getElementById(\"right-pane\").addEventListener(\"scroll\", this.onScroll.bind(this));\n        }\n    }\n    onModeChange(args) {\n        this.tooltip.close();\n        this.tooltip.opensOn = args.value;\n    }\n    onHeightChange(args) {\n        this.tooltip.close();\n        this.tooltip.height = args.value;\n        this.tooltip.refresh(this.tooltip.element);\n    }\n    onWidthChange(args) {\n        this.tooltip.close();\n        this.tooltip.width = args.value;\n        this.tooltip.refresh(this.tooltip.element);\n    }\n    handleKeyPress(args) {\n        this.tooltip.close();\n        this.tooltip.content = args.currentTarget.value;\n    }\n    checkboxChange(args) {\n        if (this.tooltip != null) {\n            this.tooltip.close();\n            this.tooltip.isSticky = args.checked;\n        }\n    }\n    render() {\n        return (<div className=\"control-pane\">\n                <div className=\"control-section\">\n                    <div className=\"col-lg-8 control-section\">\n                        <TooltipComponent created={this.created.bind(this)} id=\"defaultTooltip\" ref={t => (this.tooltip = t)} opensOn=\"Click\" content=\"Tooltip content\">\n                            <ButtonComponent>Show Tooltip</ButtonComponent>\n                        </TooltipComponent>\n                    </div>\n\n                    <div className=\"col-lg-4 property-section tooltip-api\">\n                        <PropertyPane title=\"Properties\">\n                            <table id=\"property\" title=\"Properties\">\n                                <tbody>\n                                    <tr>\n                                        <td style={{ width: \"50%\" }}>\n                                            <div className=\"userselect\">Content</div>\n                                        </td>\n                                        <td style={{ width: \"50%\", paddingRight: \"10px\" }}>\n                                            <div>\n                                                <input id=\"tooltipContentValue\" ref={t => (this.text = t)} onKeyUp={this.handleKeyPress.bind(this)} type=\"text\" className=\"e-input\" placeholder=\"Tooltip content\"/>\n                                            </div>\n                                        </td>\n                                    </tr>\n                                    <tr>\n                                        <td style={{ width: \"50%\" }}>\n                                            <div className=\"userselect\">Height</div>\n                                        </td>\n                                        <td style={{ width: \"50%\", paddingRight: \"10px\" }}>\n                                            <div>\n                                                <NumericTextBoxComponent id=\"height\" ref={t => (this.height = t)} value={45} change={this.onHeightChange.bind(this)} aria-label=\"height value\"/>\n                                            </div>\n                                        </td>\n                                    </tr>\n                                    <tr>\n                                        <td style={{ width: \"50%\" }}>\n                                            <div className=\"userselect\">Width</div>\n                                        </td>\n                                        <td style={{ width: \"50%\", paddingRight: \"10px\" }}>\n                                            <div>\n                                                <NumericTextBoxComponent id=\"width\" ref={t => (this.width = t)} className=\"e-input\" value={100} change={this.onWidthChange.bind(this)} aria-label=\"width value\"/>\n                                            </div>\n                                        </td>\n                                    </tr>\n                                    <tr>\n                                        <td style={{ width: \"50%\" }}>\n                                            <div className=\"userselect\">Open Mode</div>\n                                        </td>\n                                        <td style={{ width: \"50%\", paddingRight: \"10px\" }}>\n                                            <div>\n                                                <DropDownListComponent dataSource={this.data} ref={t => (this.ddl = t)} placeholder=\"Select mode\" change={this.onModeChange.bind(this)} id=\"ddlelement\"/>\n                                            </div>\n                                        </td>\n                                    </tr>\n                                    <tr>\n                                        <td style={{ width: \"50%\" }}>\n                                            <div className=\"userselect\">Sticky Mode</div>\n                                        </td>\n                                        <td style={{ width: \"50%\", paddingRight: \"10px\" }}>\n                                            <div>\n                                                <CheckBoxComponent id=\"sticky\" ref={t => (this.sticky = t)} change={this.checkboxChange.bind(this)} aria-label=\"sticky\"/>\n                                            </div>\n                                        </td>\n                                    </tr>\n                                </tbody>\n                            </table>\n                        </PropertyPane>\n                    </div>\n                </div>\n\n\n            </div>);\n    }\n}\n\nconst root = createRoot(document.getElementById('sample'));\nroot.render(<ApiTooltip />);","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n                this.rendereComplete();\n            });\n        }\n    }\n    export function updateSampleSection(){}\n    ","dependencies":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-react-base\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-react-buttons\":\"*\",\"@syncfusion/ej2-dropdowns\":\"*\",\"@syncfusion/ej2-react-dropdowns\":\"*\",\"@syncfusion/ej2-inputs\":\"*\",\"@syncfusion/ej2-react-inputs\":\"*\",\"@syncfusion/ej2-popups\":\"*\",\"@syncfusion/ej2-react-popups\":\"*\",\"@syncfusion/ej2-react-charts\":\"*\",\"@syncfusion/ej2/base\":\"*\",\"@syncfusion/ej2-charts'; // Import the necessary types from Syncfusion\":\"*\",\"@syncfusion/ej2-lists\":\"*\",\"@syncfusion/ej2-documenteditor\":\"*\",\"@syncfusion/ej2-splitbuttons\":\"*\",\"@syncfusion/ej2-navigations\":\"*\",\"@syncfusion/ej2-pivotview\":\"*\",\"@syncfusion/ej2-react-progressbar\":\"*\",\"@syncfusion/ej2-schedule\":\"*\",\"@syncfusion/ej2-data\":\"*\"}"}