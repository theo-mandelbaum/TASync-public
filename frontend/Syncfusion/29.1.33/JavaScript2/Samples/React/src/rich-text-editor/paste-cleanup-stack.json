{"index.css":"#rteAPIProperty .property-panel-content div {\n    padding-left: 10px;\n    padding-top: 10px;\n}\n\n.property-panel-table td {\n    width: 50%;\n    margin-top: 3px;\n}\n\n#rteAPIProperty .property-panel-content {\n    overflow: inherit;\n}\n\n#rteAPIProperty .property-panel-header {\n    padding-top: 40px;\n    padding-bottom: 20px;\n}\n\n#rteAPI .content-wrapper {\n    width: auto;\n    margin: 0;\n}\n\n.pasteStyle td label {\n    margin-top: -30px;\n}","property-pane.js":"import * as ReactDOM from 'react-dom';\nimport * as React from 'react';\nimport { select } from '@syncfusion/ej2-base';\nexport class PropertyPane extends React.Component {\n    render() {\n        const mobilePropPane = select('.sb-mobile-prop-pane');\n        const isMobile = window.matchMedia('(max-width:550px)').matches;\n        return isMobile && mobilePropPane ?\n            ReactDOM.createPortal(<div className='property-panel-section'>\n                    <div className=\"property-panel-header\">\n                        {this.props.title}\n                    </div>\n                    <div className=\"property-panel-content\">\n                        {this.props.children}\n                    </div>\n                </div>, mobilePropPane)\n            :\n                (<div className='property-panel-section'>\n                    <div className=\"property-panel-header\">\n                        {this.props.title}\n                    </div>\n                    <div className=\"property-panel-content\">\n                        {this.props.children}\n                    </div>\n                </div>);\n    }\n}\n","index.html":"<!DOCTYPE html>\n<html>\n<head>\n    <title>Syncfusion React Sample</title>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\n    <meta name=\"author\" content=\"Syncfusion\" />\n    <link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\n</head>\n\n<body class=\"{{theme}}\">\n     <style>\n            .control-section\n            {\n                margin-top: 100px;\n            }\n    </style>\n    <div id='sample'>\n</body>\n</html>\n","index.js":"import { createRoot } from 'react-dom/client';\nimport './index.css';\n/**\n * Rich Text Editor Paste Cleanup sample\n */\nimport { DropDownListComponent } from '@syncfusion/ej2-react-dropdowns';\nimport { HtmlEditor, Image, Inject, Link, PasteCleanup, QuickToolbar, RichTextEditorComponent, Toolbar, Table, Video, Audio } from '@syncfusion/ej2-react-richtexteditor';\nimport * as React from 'react';\nimport { PropertyPane } from './property-pane';\nimport { SampleBase } from './sample-base';\nimport { isNullOrUndefined } from '@syncfusion/ej2-base';\n\nexport class PasteCleanupRTE extends SampleBase {\n    rteObj;\n    formatOption;\n    pasteCleanupSettings = {\n        prompt: true,\n        plainText: false,\n        keepFormat: false\n    };\n    allowedStylePropertiesEle;\n    allowedStylePropertiesRef;\n    deniedTagsEle;\n    deniedTagsRef;\n    deniedAttributesEle;\n    deniedAttributesRef;\n    constructor(props) {\n        super(props);\n        this.allowedStylePropertiesEle = null;\n        this.allowedStylePropertiesRef = element => {\n            this.allowedStylePropertiesEle = element;\n        };\n        this.deniedTagsEle = null;\n        this.deniedTagsRef = element => {\n            this.deniedTagsEle = element;\n        };\n        this.deniedAttributesEle = null;\n        this.deniedAttributesRef = element => {\n            this.deniedAttributesEle = element;\n        };\n    }\n    popupHeight = '200px';\n    value = \"prompt\";\n    fields = { text: \"text\", value: \"value\" };\n    formatData = [\n        { text: 'Prompt', value: 'prompt' },\n        { text: 'Plain Text', value: 'plainText' },\n        { text: 'Keep Format', value: 'keepFormat' },\n        { text: 'Clean Format', value: 'cleanFormat' }\n    ];\n    formatChange = () => {\n        if (this.formatOption.value === 'prompt') {\n            this.rteObj.pasteCleanupSettings.prompt = true;\n        }\n        else if (this.formatOption.value === 'plainText') {\n            this.rteObj.pasteCleanupSettings.prompt = false;\n            this.rteObj.pasteCleanupSettings.plainText = true;\n        }\n        else if (this.formatOption.value === 'keepFormat') {\n            this.rteObj.pasteCleanupSettings.prompt = false;\n            this.rteObj.pasteCleanupSettings.plainText = false;\n            this.rteObj.pasteCleanupSettings.keepFormat = true;\n        }\n        else if (this.formatOption.value === 'cleanFormat') {\n            this.rteObj.pasteCleanupSettings.prompt = false;\n            this.rteObj.pasteCleanupSettings.plainText = false;\n            this.rteObj.pasteCleanupSettings.keepFormat = false;\n        }\n    };\n    rendereComplete() {\n        let allowedStylePropsElem = this.allowedStylePropertiesEle;\n        let deniedTagsElem = this.deniedTagsEle;\n        let deniedAttrsElem = this.deniedAttributesEle;\n        allowedStylePropsElem.addEventListener('blur', (e) => {\n            this.onPasteCleanupSettingsChange(e.target.value, 'allowedStyleProps');\n        });\n        deniedAttrsElem.addEventListener('blur', (e) => {\n            this.onPasteCleanupSettingsChange(e.target.value, 'deniedAttrs');\n        });\n        deniedTagsElem.addEventListener('blur', (e) => {\n            this.onPasteCleanupSettingsChange(e.target.value, 'deniedTags');\n        });\n    }\n    onPasteCleanupSettingsChange(value, settingsProperty) {\n        if (!isNullOrUndefined(value)) {\n            const arrayValue = value.split(',').map((item) => item.trim().replace(/^['\"]|['\"]$/g, ''));\n            this.rteObj.pasteCleanupSettings[settingsProperty] = arrayValue.filter((prop) => prop !== '');\n        }\n    }\n    render() {\n        return (<div className='control-pane'>\n                <div className='col-lg-8'>\n                    <div className='control-section' id=\"rteAPI\">\n                        <div className='rte-control-section'>\n                            <RichTextEditorComponent id=\"PasteCleanup\" ref={(richtexteditor) => { this.rteObj = richtexteditor; }} pasteCleanupSettings={this.pasteCleanupSettings}>\n                                <h4>Paste Cleanup in Rich Text Editor<br /></h4><p>The Rich Text Editor automatically <strong>cleans up formatted content</strong> when you paste from external sources like Word, Google Docs, or web pages.</p><p><b>Paste Cleanup properties:</b></p>\n                                <ul>\n                                    <li><strong>Prompt </strong>- specifies whether to enable the prompt when pasting in Rich Text Editor\n                                    </li>\n                                    <li><strong>Plain Text </strong>- specifies whether to paste as plain text or not in Rich Text Editor.\n                                    </li>\n                                    <li><strong>Keep Format</strong>- specifies whether to keep or remove the format when pasting in Rich Text Editor.\n                                    </li>\n                                    <li><strong>Denied Tags</strong> - specifies the tags to restrict when pasting in Rich Text Editor.\n                                    </li>\n                                    <li><strong>Denied Attributes</strong> - specifies the attributes to restrict when pasting in Rich Text Editor.\n                                    </li>\n                                    <li><strong>Allowed Style Properties</strong> - specifies the allowed style properties when pasting in Rich Text Editor.\n                                    </li>\n                                </ul>\n                                <p><span><strong>Try It Out!</strong></span></p><p>Copy content from a web page or document and paste it here. The editor will display a prompt and allow you to input your options.</p>\n                                <Inject services={[Toolbar, Image, Link, HtmlEditor, QuickToolbar, PasteCleanup, Table, Video, Audio]}/>\n                            </RichTextEditorComponent>\n                        </div>\n                    </div>\n                </div>\n                <div className='col-lg-4 property-section' id=\"rteAPIProperty\">\n                    <PropertyPane title='Properties'>\n                        <table id=\"property\" title=\"Properties\" className=\"pasteStyle\" style={{ width: '100%', margin: '10px' }}>\n                            <tbody>\n                                <tr>\n                                    <td style={{ padding: '8px', width: '50%' }}><div>Prompt </div></td>\n                                    <td>\n                                        <div style={{ paddingLeft: '10px' }}>\n                                            <DropDownListComponent id=\"formattingOption\" dataSource={this.formatData} ref={(dropdownlist) => { this.formatOption = dropdownlist; }} fields={this.fields} change={this.formatChange.bind(this)} value={this.value} popupHeight={this.popupHeight}/>\n                                        </div>\n                                    </td>\n                                </tr>\n                                <tr>\n                                    <td style={{ padding: '8px', width: '50%' }}><div>Denied Tags </div></td>\n                                    <td>\n                                        <div style={{ paddingLeft: '10px' }}>\n                                            <input type=\"text\" id=\"deniedTags\" ref={this.deniedTagsRef} className=\"e-input\" placeholder=\"'img[!href]', 'h1'\"/>\n                                        </div>\n                                    </td>\n                                </tr>\n                                <tr>\n                                    <td style={{ padding: '8px', width: '50%' }}><div>Denied Attributes </div></td>\n                                    <td>\n                                        <div style={{ paddingLeft: '10px' }}>\n                                            <input id=\"deniedAttributes\" ref={this.deniedAttributesRef} type=\"text\" className=\"e-input\" placeholder=\"'id', 'title'\"/>\n                                        </div>\n                                    </td>\n                                </tr>\n                                <tr>\n                                    <td style={{ padding: '8px', width: '50%' }}><div>Allowed Style Properties </div></td>\n                                    <td>\n                                        <div style={{ paddingLeft: '10px' }}>\n                                            <input id=\"allowedStyleProperties\" ref={this.allowedStylePropertiesRef} type=\"text\" className=\"e-input\" placeholder=\"'href', 'style'\"/>\n                                        </div>\n                                    </td>\n                                </tr>\n\n                            </tbody>\n                        </table>\n                    </PropertyPane>\n                </div>\n\n            </div>);\n    }\n}\n\nconst root = createRoot(document.getElementById('sample'));\nroot.render(<PasteCleanupRTE />);","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n                this.rendereComplete();\n            });\n        }\n    }\n    export function updateSampleSection(){}\n    ","dependencies":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-react-base\":\"*\",\"@syncfusion/ej2-dropdowns\":\"*\",\"@syncfusion/ej2-react-dropdowns\":\"*\",\"@syncfusion/ej2-richtexteditor\":\"*\",\"@syncfusion/ej2-react-richtexteditor\":\"*\",\"@syncfusion/ej2-icons\":\"*\",\"markdown-spellcheck\":\"^1.3.1\",\"@syncfusion/ej2-react-charts\":\"*\",\"@syncfusion/ej2/base\":\"*\",\"@syncfusion/ej2-charts'; // Import the necessary types from Syncfusion\":\"*\",\"@syncfusion/ej2-lists\":\"*\",\"@syncfusion/ej2-documenteditor\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-splitbuttons\":\"*\",\"@syncfusion/ej2-navigations\":\"*\",\"@syncfusion/ej2-react-popups\":\"*\",\"@syncfusion/ej2-pivotview\":\"*\",\"@syncfusion/ej2-react-progressbar\":\"*\",\"codemirror\":\"5.3.0\"}"}