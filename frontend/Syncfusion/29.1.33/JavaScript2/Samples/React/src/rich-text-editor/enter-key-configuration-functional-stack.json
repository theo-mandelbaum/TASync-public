{"index.css":".api {\n    width: 75%;\n}\n.api td {\n    padding-right: 100px;\n    margin-top: 3px;\n}\n@media only screen and (max-width: 600px) {\n    .api {\n        width: 100%;\n    }\n    .api td {\n        display: block;\n    }\n}\n@media only screen and (min-width: 600px) and (max-width: 1000px) {\n    .api {\n        width: 100%;\n    }\n}\n.default-section {\n    padding: 20px;\n}\n.codeView {\n    border: 1px solid rgba(0,0,0,0.12);\n    height: 200px;\n    width: 100%;\n}\n.codeView .CodeMirror {\n    height: 190px !important;\n}\n.codeViewContent {\n    padding-left: 16px;\n}\n.control-section.enter-key .e-popup.e-popup-open.e-dialog {\n    height: 387px !important;\n}\n.control-section.enter-key .e-dialog .e-dlg-content {\n    overflow: inherit;\n    overflow-x: inherit;\n}\n.bootstrap-dark .CodeMirror-scroll, .bootstrap5-dark .CodeMirror-scroll,.bootstrap5\\.3-dark .CodeMirror-scroll, .fluent-dark .CodeMirror-scroll, .fluent2-dark .CodeMirror-scroll, .material3-dark .CodeMirror-scroll, .fabric-dark .CodeMirror-scroll, .material-dark .CodeMirror-scroll, .tailwind-dark .CodeMirror-scroll, .tailwind3-dark .CodeMirror-scroll, .highcontrast .CodeMirror-scroll, .fluent2-highcontrast .CodeMirror-scroll{\n    color: #fff;\n}\n.bootstrap-dark .CodeMirror-scroll{\n   background-color: #1b1b1b;\n}\n.bootstrap5-dark .CodeMirror-scrol,\n.bootstrap5\\.3-dark .CodeMirror-scrol{\n   background-color: #212529;\n}\n.fluent-dark .CodeMirror-scroll,\n.fluent2-dark .CodeMirror-scroll{\n   background-color: #1b1a19;\n}\n.material3-dark .CodeMirror-scroll{\n    background-color: #1C1B1F;\n }\n.fabric-dark .CodeMirror-scroll{\n   background-color: #242424;\n}\n.material-dark .CodeMirror-scroll{\n   background-color: #383838;\n}\n.tailwind-dark .CodeMirror-scroll,\n.tailwind3-dark .CodeMirror-scroll{\n   background-color:#1f2937;\n}\n.highcontrast .CodeMirror-scroll,\n.fluent2-highcontrast .CodeMirror-scroll{\n   background-color:#000000;\n}\n.bootstrap5\\.3-dark .codeView .CodeMirror {\n    background: rgb(40, 45, 49);\n    color:#fff\n}","index.html":"<!DOCTYPE html>\n<html>\n<head>\n    <title>Syncfusion React Sample</title>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\n    <meta name=\"author\" content=\"Syncfusion\" />\n    <link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\n</head>\n\n<body class=\"{{theme}}\">\n     <style>\n            .control-section\n            {\n                margin-top: 100px;\n            }\n    </style>\n    <div id='sample'>\n</body>\n</html>\n","index.js":"import { createRoot } from 'react-dom/client';\nimport './index.css';\n/**\n * Rich Text Editor Enter Key Configuration sample\n */\nimport { HtmlEditor, Image, Inject, Link, QuickToolbar, RichTextEditorComponent, Toolbar, PasteCleanup, Table, Video, Audio } from '@syncfusion/ej2-react-richtexteditor';\nimport { DropDownListComponent } from '@syncfusion/ej2-react-dropdowns';\nimport * as React from 'react';\n\nimport { createElement } from '@syncfusion/ej2-base';\nimport * as CodeMirror from 'codemirror';\nimport 'codemirror/mode/javascript/javascript';\nimport 'codemirror/mode/css/css.js';\nimport 'codemirror/mode/htmlmixed/htmlmixed.js';\n\nfunction EnterKeyConfiguration() {\n    let state = {\n        textAreaValue: `<p>In Rich text Editor, the enter key and shift + enter key actions can be customized using the enterKey and shiftEnterKey APIs. And the possible values are as follows:</p><ul><li>P - When 'P' is configured, pressing enter or shift + enter will create a 'p' tag</li><li>DIV - When 'DIV' is configured, pressing enter or shift + enter will create a 'div' tag</li><li>BR - When 'BR' is configured, pressing enter or shift + enter will create a 'br' tag</li></ul>`\n    };\n    let rteObj;\n    let enterList;\n    let shiftEnterList;\n    const rteValue = `<p>In Rich text Editor, the enter key and shift + enter key actions can be customized using the enterKey and shiftEnterKey APIs. And the possible values are as follows:</p><ul><li>P - When 'P' is configured, pressing enter or shift + enter will create a 'p' tag</li><li>DIV - When 'DIV' is configured, pressing enter or shift + enter will create a 'div' tag</li><li>BR - When 'BR' is configured, pressing enter or shift + enter will create a 'br' tag</li></ul>`;\n    const popupHeight = '200px';\n    const enterValue = \"P\";\n    const shiftEnterValue = \"BR\";\n    const enterPlaceholder = \"When pressing the enter key\";\n    const shiftEnterPlaceholder = \"When pressing the shift + enter key\";\n    const fields = { text: \"text\", value: \"value\" };\n    const enterData = [\n        { text: 'Create a new <p>', value: 'P' },\n        { text: 'Create a new <div>', value: 'DIV' },\n        { text: 'Create a new <br>', value: 'BR' }\n    ];\n    const shiftEnterData = [\n        { text: 'Create a new <br>', value: 'BR' },\n        { text: 'Create a new <div>', value: 'DIV' },\n        { text: 'Create a new <p>', value: 'P' }\n    ];\n    const enterChange = () => {\n        if (enterList.value === 'P') {\n            rteObj.enterKey = 'P';\n            rteObj.value = `<p>In Rich text Editor, the enter key and shift + enter key actions can be customized using the enterKey and shiftEnterKey APIs. And the possible values are as follows:</p><ul><li>P - When 'P' is configured, pressing enter or shift + enter will create a 'p' tag</li><li>DIV - When 'DIV' is configured, pressing enter or shift + enter will create a 'div' tag</li><li>BR - When 'BR' is configured, pressing enter or shift + enter will create a 'br' tag</li></ul>`;\n        }\n        else if (enterList.value === 'DIV') {\n            rteObj.enterKey = 'DIV';\n            rteObj.value = `<div>In Rich text Editor, the enter key and shift + enter key actions can be customized using the enterKey and shiftEnterKey APIs. And the possible values are as follows:</div><ul><li>P - When 'P' is configured, pressing enter or shift + enter will create a 'p' tag</li><li>DIV - When 'DIV' is configured, pressing enter or shift + enter will create a 'div' tag</li><li>BR - When 'BR' is configured, pressing enter or shift + enter will create a 'br' tag</li></ul>`;\n        }\n        else if (enterList.value === 'BR') {\n            rteObj.enterKey = 'BR';\n            rteObj.value = `In Rich text Editor, the enter key and shift + enter key actions can be customized using the enterKey and shiftEnterKey APIs. And the possible values are as follows:<ul><li>P - When 'P' is configured, pressing enter or shift + enter will create a 'p' tag</li><li>DIV - When 'DIV' is configured, pressing enter or shift + enter will create a 'div' tag</li><li>BR - When 'BR' is configured, pressing enter or shift + enter will create a 'br' tag</li></ul>`;\n        }\n        onChange();\n    };\n    const shiftEnterChange = () => {\n        if (shiftEnterList.value === 'BR') {\n            rteObj.shiftEnterKey = 'BR';\n        }\n        else if (shiftEnterList.value === 'DIV') {\n            rteObj.shiftEnterKey = 'DIV';\n        }\n        else if (shiftEnterList.value === 'P') {\n            rteObj.shiftEnterKey = 'P';\n        }\n    };\n    const onCreate = () => {\n        onChange();\n    };\n    const onChange = () => {\n        let id = rteObj.getID() + 'mirror-view';\n        let codeView = document.getElementById('codeView');\n        let mirrorView;\n        if (document.getElementById(id)) {\n            mirrorView = document.getElementById(id);\n            mirrorView.innerHTML = '';\n        }\n        else {\n            mirrorView = createElement('div', { className: 'e-content codeViewContent' });\n            mirrorView.id = id;\n            codeView.appendChild(mirrorView);\n        }\n        mirrorView.style.display = 'block';\n        if (rteObj.value !== null) {\n            CodeMirror(mirrorView, {\n                value: rteObj.value,\n                mode: 'text/html',\n                lineWrapping: true,\n                readOnly: true\n            });\n        }\n    };\n    return (<div className='control-pane'>\n            <div className='control-section enter-key' id=\"rte\">\n                <div className='rte-control-section'>\n                    <table className='api'>\n                        <tbody>\n                            <tr>\n                                <td>\n                                    <div>\n                                        <DropDownListComponent id=\"enterOption\" dataSource={enterData} ref={(dropdownlist) => { enterList = dropdownlist; }} fields={fields} change={enterChange.bind(this)} value={enterValue} popupHeight={popupHeight} placeholder={enterPlaceholder} floatLabelType=\"Always\"/>\n                                    </div>\n                                </td>\n                                <td>\n                                    <div>\n                                        <DropDownListComponent id=\"shiftEnterOption\" dataSource={shiftEnterData} ref={(dropdownlist) => { shiftEnterList = dropdownlist; }} fields={fields} change={shiftEnterChange.bind(this)} value={shiftEnterValue} popupHeight={popupHeight} placeholder={shiftEnterPlaceholder} floatLabelType=\"Always\"/>\n                                    </div>\n                                </td>\n                            </tr>\n                        </tbody>\n                    </table>\n                    <br />\n                    <RichTextEditorComponent id=\"defaultRTE\" ref={(richtexteditor) => { rteObj = richtexteditor; }} change={onChange.bind(this)} created={onCreate.bind(this)} height={220} saveInterval={1} value={rteValue}>\n                        <Inject services={[HtmlEditor, Toolbar, Image, Link, QuickToolbar, PasteCleanup, Table, Video, Audio]}/>\n                    </RichTextEditorComponent>\n                    <br />\n                    <label>Code View </label>\n                    <div id=\"codeView\" className=\"codeView\"></div>\n                </div>\n            </div>\n\n        </div>);\n}\nexport default EnterKeyConfiguration;\n\nconst root = createRoot(document.getElementById('sample'));\nroot.render(<EnterKeyConfiguration />);","dependencies":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-react-base\":\"*\",\"@syncfusion/ej2-richtexteditor\":\"*\",\"@syncfusion/ej2-react-richtexteditor\":\"*\",\"@syncfusion/ej2-dropdowns\":\"*\",\"@syncfusion/ej2-react-dropdowns\":\"*\",\"@syncfusion/ej2-icons\":\"*\",\"markdown-spellcheck\":\"^1.3.1\",\"@syncfusion/ej2-react-charts\":\"*\",\"@syncfusion/ej2/base\":\"*\",\"@syncfusion/ej2-charts'; // Import the necessary types from Syncfusion\":\"*\",\"@syncfusion/ej2-lists\":\"*\",\"@syncfusion/ej2-documenteditor\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-splitbuttons\":\"*\",\"@syncfusion/ej2-navigations\":\"*\",\"@syncfusion/ej2-react-popups\":\"*\",\"@syncfusion/ej2-pivotview\":\"*\",\"@syncfusion/ej2-react-progressbar\":\"*\",\"codemirror\":\"5.3.0\"}"}