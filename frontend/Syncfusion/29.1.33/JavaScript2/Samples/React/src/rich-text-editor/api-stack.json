{"index.css":"#rteAPIProperty .property-panel-content div {\n    padding-left: 10px;\n    padding-top: 10px;\n}\n\n.property-panel-table td {\n    width: 50%;\n    margin-top: 3px;\n}\n\n#rteAPIProperty .property-panel-content {\n    overflow: inherit;\n}\n\n#rteAPIProperty .property-panel-header {\n    padding-top: 40px;\n    padding-bottom: 20px;\n}\n\n#rteAPI .content-wrapper {\n    width: auto;\n    margin: 0;\n}","property-pane.js":"import * as ReactDOM from 'react-dom';\nimport * as React from 'react';\nimport { select } from '@syncfusion/ej2-base';\nexport class PropertyPane extends React.Component {\n    render() {\n        const mobilePropPane = select('.sb-mobile-prop-pane');\n        const isMobile = window.matchMedia('(max-width:550px)').matches;\n        return isMobile && mobilePropPane ?\n            ReactDOM.createPortal(<div className='property-panel-section'>\n                    <div className=\"property-panel-header\">\n                        {this.props.title}\n                    </div>\n                    <div className=\"property-panel-content\">\n                        {this.props.children}\n                    </div>\n                </div>, mobilePropPane)\n            :\n                (<div className='property-panel-section'>\n                    <div className=\"property-panel-header\">\n                        {this.props.title}\n                    </div>\n                    <div className=\"property-panel-content\">\n                        {this.props.children}\n                    </div>\n                </div>);\n    }\n}\n","index.html":"<!DOCTYPE html>\n<html>\n<head>\n    <title>Syncfusion React Sample</title>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\n    <meta name=\"author\" content=\"Syncfusion\" />\n    <link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\n</head>\n\n<body class=\"{{theme}}\">\n     <style>\n            .control-section\n            {\n                margin-top: 100px;\n            }\n    </style>\n    <div id='sample'>\n</body>\n</html>\n","index.js":"import { createRoot } from 'react-dom/client';\nimport './index.css';\nimport { ButtonComponent, CheckBoxComponent } from '@syncfusion/ej2-react-buttons';\nimport { NumericTextBoxComponent } from '@syncfusion/ej2-react-inputs';\nimport { Count, HtmlEditor, Image, Inject, Link, QuickToolbar, RichTextEditorComponent, Toolbar, PasteCleanup, Table, Video, Audio } from '@syncfusion/ej2-react-richtexteditor';\nimport * as React from 'react';\nimport { PropertyPane } from './property-pane';\nimport { SampleBase } from './sample-base';\n\nexport class RTEApi extends SampleBase {\n    rteObj;\n    getVal;\n    selectHtml;\n    selectall;\n    Numericvalue = 1000;\n    min = 555;\n    max = 2000;\n    placeholder = \"Maximum Length\";\n    format = 'n0';\n    numericChange = (e) => {\n        this.rteObj.maxLength = e.value;\n    };\n    readonlyChecked = false;\n    readonlyChange = (args) => {\n        this.rteObj.readonly = args.checked;\n    };\n    enableChecked = true;\n    enableChange = (args) => {\n        this.rteObj.enabled = args.checked;\n    };\n    htmlChecked = false;\n    htmlChange = (args) => {\n        this.rteObj.enableHtmlEncode = args.checked;\n    };\n    getValue = () => {\n        alert(this.rteObj.value);\n    };\n    getSelection = () => {\n        alert(this.rteObj.getSelection());\n    };\n    selectAll = () => {\n        this.rteObj.selectAll();\n    };\n    render() {\n        return (<div className='control-pane'>\n                <div className='col-lg-8'>\n                    <div className='control-section' id=\"rteAPI\">\n                        <div className='rte-control-section'>\n                            <RichTextEditorComponent id=\"API\" ref={(richtexteditor) => { this.rteObj = richtexteditor; }} showCharCount={true} maxLength={1000}>\n                                <p>Rich Text Editor is a WYSIWYG editing control which will reduce the effort for users while trying to express their formatting word content as HTML or Markdown format.</p>\n                                <p><b>APIâ€™s:</b></p>\n                                <ul>\n                                    <li>\n                                        <p>maxLength - allows restricting the maximum length to be entered.</p>\n                                    </li>\n                                    <li>\n                                        <p>readOnly - allows to change it as a non-editable state.</p>\n                                    </li>\n                                    <li>\n                                        <p>enabled - enable or disable the RTE component.</p>\n                                    </li>\n                                    <li>\n                                        <p>enableHtmlEncode - Get the encoded string value through value property and source code panel</p>\n                                    </li>\n                                    <li>\n                                        <p>getValue - get the value of RTE.</p>\n                                    </li>\n                                    <li>\n                                        <p>getSelection - get the selected text of RTE.</p>\n                                    </li>\n                                    <li>\n                                        <p>selectAll - select all content in RTE.</p>\n                                    </li>\n                                </ul>\n                                <Inject services={[Toolbar, Image, Link, HtmlEditor, Count, QuickToolbar, PasteCleanup, Table, Video, Audio]}/>\n                            </RichTextEditorComponent>\n                        </div>\n                    </div>\n                </div>\n                <div className='col-lg-4 property-section' id=\"rteAPIProperty\">\n                    <PropertyPane title='Properties'>\n                        <table id=\"property\" title=\"Properties\" style={{ width: '100%', margin: '10px' }}>\n                            <tbody>\n                                <tr>\n                                    <td style={{ padding: '8px', width: '50%' }}><div>Max Length </div></td>\n                                    <td>\n                                        <div style={{ paddingLeft: '10px' }}>\n                                            <NumericTextBoxComponent id=\"maxlength\" min={this.min} max={this.max} format={this.format} change={this.numericChange.bind(this)} value={this.Numericvalue}></NumericTextBoxComponent>\n                                        </div>\n                                    </td>\n                                </tr>\n                                <tr>\n                                    <td style={{ padding: '8px', width: '50%' }}><div>Readonly</div></td>\n                                    <td>\n                                        <div style={{ paddingLeft: '10px' }}>\n                                            <CheckBoxComponent id=\"readonly\" checked={this.readonlyChecked} change={this.readonlyChange.bind(this)}></CheckBoxComponent>\n                                        </div>\n                                    </td>\n                                </tr>\n                                <tr>\n                                    <td style={{ padding: '8px', width: '50%' }}><div>Enable</div></td>\n                                    <td>\n                                        <div style={{ paddingLeft: '10px' }}>\n                                            <CheckBoxComponent id=\"enable\" checked={this.enableChecked} change={this.enableChange.bind(this)}></CheckBoxComponent>\n                                        </div>\n                                    </td>\n                                </tr>\n                                <tr>\n                                    <td style={{ padding: '8px', width: '50%' }}>\n                                        <div>Enable HTML Encode </div>\n                                    </td>\n                                    <td>\n                                        <div style={{ paddingLeft: '10px' }}>\n                                            <CheckBoxComponent id=\"enablehtml\" checked={this.htmlChecked} change={this.htmlChange.bind(this)}></CheckBoxComponent>\n                                        </div>\n                                    </td>\n                                </tr>\n                                <tr>\n                                    <td></td>\n                                    <td>\n                                        <div style={{ paddingTop: '10px' }}>\n                                            <ButtonComponent id=\"getVal\" ref={(btn) => { this.getVal = btn; }} onClick={this.getValue.bind(this)} className=\"btn btn-default\">Get Value</ButtonComponent>\n                                        </div>\n                                    </td>\n                                </tr>\n                                <tr>\n                                    <td></td>\n                                    <td>\n                                        <div style={{ paddingTop: '10px' }}>\n                                            <ButtonComponent id=\"selectHtml\" ref={(btn) => { this.selectHtml = btn; }} onClick={this.getSelection.bind(this)} className=\"btn btn-default\">Get Selection</ButtonComponent>\n                                        </div>\n                                    </td>\n                                </tr>\n                                <tr>\n                                    <td></td>\n                                    <td>\n                                        <div style={{ paddingTop: '10px' }}>\n                                            <ButtonComponent id=\"selectall\" ref={(btn) => { this.selectall = btn; }} onClick={this.selectAll.bind(this)} className=\"btn btn-default\">Select All </ButtonComponent>\n                                        </div>\n                                    </td>\n                                </tr>\n                            </tbody>\n                        </table>\n                    </PropertyPane>\n                </div>\n\n            </div>);\n    }\n}\n\nconst root = createRoot(document.getElementById('sample'));\nroot.render(<RTEApi />);","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n                this.rendereComplete();\n            });\n        }\n    }\n    export function updateSampleSection(){}\n    ","dependencies":"{\"@syncfusion/ej2-base\":\"*\",\"markdown-spellcheck\":\"^1.3.1\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-popups\":\"*\",\"@syncfusion/ej2-splitbuttons\":\"*\",\"@syncfusion/ej2-inputs\":\"*\",\"@syncfusion/ej2-react-base\":\"*\",\"@syncfusion/ej2-react-buttons\":\"*\",\"@syncfusion/ej2-react-inputs\":\"*\",\"@syncfusion/ej2-richtexteditor\":\"*\",\"@syncfusion/ej2-react-richtexteditor\":\"*\",\"@syncfusion/ej2-react-charts\":\"*\",\"@syncfusion/ej2/base\":\"*\",\"@syncfusion/ej2-charts'; // Import the necessary types from Syncfusion\":\"*\",\"@syncfusion/ej2-lists\":\"*\",\"@syncfusion/ej2-documenteditor\":\"*\",\"@syncfusion/ej2-navigations\":\"*\",\"@syncfusion/ej2-react-popups\":\"*\",\"@syncfusion/ej2-pivotview\":\"*\",\"@syncfusion/ej2-react-progressbar\":\"*\",\"codemirror\":\"5.3.0\"}"}