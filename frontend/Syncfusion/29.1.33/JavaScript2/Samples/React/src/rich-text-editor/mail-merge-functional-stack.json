{"index.css":".tailwind3 #merge_data,\n.tailwind3-dark #merge_data {\n    font-weight:400;\n}","index.html":"<!DOCTYPE html>\n<html>\n<head>\n    <title>Syncfusion React Sample</title>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\n    <meta name=\"author\" content=\"Syncfusion\" />\n    <link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\n</head>\n\n<body class=\"{{theme}}\">\n     <style>\n            .control-section\n            {\n                margin-top: 100px;\n            }\n    </style>\n    <div id='sample'>\n</body>\n</html>\n","index.js":"import { createRoot } from 'react-dom/client';\nimport './index.css';\nimport { HtmlEditor, Image, Inject, Link, QuickToolbar, RichTextEditorComponent, Toolbar, NodeSelection, Table, PasteCleanup } from '@syncfusion/ej2-react-richtexteditor';\nimport * as React from 'react';\nimport { DropDownButtonComponent } from '@syncfusion/ej2-react-splitbuttons';\nimport { MentionComponent } from '@syncfusion/ej2-react-dropdowns';\n\n\nfunction MailMerge() {\n    let value = `<p>Dear <span contenteditable=\"false\" class=\"e-mention-chip\"><span>{{FirstName}}</span></span> <span contenteditable=\"false\" class=\"e-mention-chip\"><span>{{LastName}}</span></span>,</p>\n  <p>We are thrilled to have you with us! Your unique promotional code for this month is: <span contenteditable=\"false\" class=\"e-mention-chip\"><span>{{PromoCode}}</span></span>.</p>\n  <p>Your current subscription plan is: <span contenteditable=\"false\" class=\"e-mention-chip\"><span>{{SubscriptionPlan}}</span></span>.</p>\n  <p>Your customer ID is: <span contenteditable=\"false\" class=\"e-mention-chip\"><span>{{CustomerID}}</span></span>.</p>\n  <p>Your promotional code expires on: <span contenteditable=\"false\" class=\"e-mention-chip\"><span>{{ExpirationDate}}</span></span>.</p>\n  <p>Feel free to browse our latest offerings and updates. If you need any assistance, don't hesitate to contact us at <a href=\"mailto:{{SupportEmail}}\"><span contenteditable=\"false\" class=\"e-mention-chip\"><span>{{SupportEmail}}</span></span></a> or call us at <span contenteditable=\"false\" class=\"e-mention-chip\"><span>{{SupportPhoneNumber}}</span></span>.</p>\n  <p>Best regards,<br>The <span contenteditable=\"false\" class=\"e-mention-chip\"><span>{{CompanyName}}</span></span> Team</p>`;\n    const items = ['Bold', 'Italic', 'Underline', '|', 'Formats', 'Alignments', 'OrderedList', 'UnorderedList', '|',\n        'CreateLink', 'Image', 'CreateTable', '|',\n        { tooltipText: 'Merge Data', template: '#merge_data' },\n        { tooltipText: 'Insert Field', template: '#insertField' },\n        'SourceCode', '|', 'Undo', 'Redo'\n    ];\n    //Rich Text Editor ToolbarSettings\n    const toolbarSettings = {\n        items: items\n    };\n    let mentionChar = \"{{\";\n    let rteObj;\n    let mentionObj;\n    let range = new Range();\n    let selection = new NodeSelection();\n    let saveSelection;\n    let itemsName = [\n        { text: 'First Name' },\n        { text: 'Last Name' },\n        { text: 'Support Email' },\n        { text: 'Company Name' },\n        { text: 'Promo Code' },\n        { text: 'Support Phone Number' },\n        { text: 'Customer ID' },\n        { text: 'Expiration Date' },\n        { text: 'Subscription Plan' },\n    ];\n    const placeholderData = {\n        FirstName: 'John',\n        LastName: 'Doe',\n        PromoCode: 'ABC123',\n        SubscriptionPlan: 'Premium',\n        CustomerID: '123456',\n        ExpirationDate: '2024-12-31',\n        SupportEmail: 'support@example.com',\n        SupportPhoneNumber: '+1-800-555-5555',\n        CompanyName: 'Example Inc.'\n    };\n    let textToValueMap = {\n        'First Name': 'FirstName',\n        'Last Name': 'LastName',\n        'Support Email': 'SupportEmail',\n        'Company Name': 'CompanyName',\n        'Promo Code': 'PromoCode',\n        'Support Phone Number': 'SupportPhoneNumber',\n        'Customer ID': 'CustomerID',\n        'Expiration Date': 'ExpirationDate',\n        'Subscription Plan': 'SubscriptionPlan'\n    };\n    let data = [\n        { text: 'First Name', value: 'FirstName' },\n        { text: 'Last Name', value: 'LastName' },\n        { text: 'Support Email', value: 'SupportEmail' },\n        { text: 'Company Name', value: 'CompanyName' },\n        { text: 'Promo Code', value: 'PromoCode' },\n        { text: 'Support Phone Number', value: 'SupportPhoneNumber' },\n        { text: 'Customer ID', value: 'CustomerID' },\n        { text: 'Expiration Date', value: 'ExpirationDate' },\n        { text: 'Subscription Plan', value: 'SubscriptionPlan' },\n    ];\n    const fieldsData = { text: 'text', value: 'value' };\n    function displayTemplate(data) {\n        return (<React.Fragment>\n            {data.value}&#125;&#125;\n        </React.Fragment>);\n    }\n    function actionBegin(args) {\n        if (args.requestType === 'EnterAction' &&\n            mentionObj.element.classList.contains('e-popup-open')) {\n            args.cancel = true;\n        }\n    }\n    function actionComplete(e) {\n        if (e.requestType === 'SourceCode') {\n            rteObj.getToolbar().querySelector('#merge_data').parentElement.classList.add('e-overlay');\n            rteObj.getToolbar().querySelector('#insertField').parentElement.classList.add('e-overlay');\n        }\n        else if (e.requestType === 'Preview') {\n            rteObj.getToolbar().querySelector('#merge_data').parentElement.classList.remove('e-overlay');\n            rteObj.getToolbar().querySelector('#insertField').parentElement.classList.remove('e-overlay');\n        }\n    }\n    function blur() {\n        const range = selection.getRange(document);\n        const saveSelection = selection.save(range, document);\n    }\n    function onItemSelect(args) {\n        if (args.item.text != null) {\n            const value = textToValueMap[args.item.text];\n            const trimmedValue = value.trim();\n            rteObj.formatter.editorManager.nodeSelection.restore();\n            rteObj.executeCommand('insertHTML', `<span contenteditable=\"false\" class=\"e-mention-chip\"><span>{{${trimmedValue}}}</span></span>&nbsp;`, { undo: true });\n        }\n    }\n    function onClickHandler(args) {\n        if (rteObj) {\n            let editorContent = rteObj.value;\n            let mergedContent = replacePlaceholders(editorContent, placeholderData);\n            if (rteObj.formatter.getUndoRedoStack().length === 0) {\n                rteObj.formatter.saveData();\n            }\n            rteObj.value = mergedContent;\n            rteObj.formatter.saveData();\n        }\n        else {\n            console.log('MailMergeEditor is not initialized.');\n        }\n    }\n    ;\n    function replacePlaceholders(template, data) {\n        return template.replace(/{{\\s*(\\w+)\\s*}}/g, (match, key) => {\n            const value = data[key.trim()];\n            return value !== undefined ? value : match;\n        });\n    }\n    ;\n    return (<div>\n            <RichTextEditorComponent ref={(richtexteditor) => { rteObj = richtexteditor; }} value={value} id=\"mailMergeEditor\" toolbarSettings={toolbarSettings} placeholder=\"Type @ and tag the name\" blur={blur} actionBegin={actionBegin} actionComplete={actionComplete} saveInterval={1}>\n                <Inject services={[HtmlEditor, Toolbar, Image, Link, QuickToolbar, Table, PasteCleanup]}/>\n            </RichTextEditorComponent>\n            <button className=\"e-control e-lib e-btn e-formats-tbar-btn e-rte-elements e-tbar-btn\" tabIndex={-1} id=\"merge_data\" style={{ width: '100%' }} onClick={onClickHandler}>\n                <span style={{ display: 'inline-flex' }}>\n                    <span className=\"e-tbar-btn-text\">Merge Data</span>\n                </span>\n            </button>\n            <DropDownButtonComponent className=\"e-rte-dropdown-btn e-control e-dropdown-btn e-lib e-btn e-rte-dropdown-popup e-rte-dropdown-items e-formats-tbar-btn e-rte-elements e-tbar-btn \" items={itemsName} content='<span style=\"display: inline-flex;\"><span class=\"e-rte-dropdown-btn-text\">Insert Field</span></span>' select={onItemSelect} id=\"insertField\"></DropDownButtonComponent>\n            <MentionComponent ref={(scope) => { mentionObj = scope; }} id=\"mentionEditor\" target=\"#mailMergeEditor\" mentionChar={mentionChar} showMentionChar={true} allowSpaces={true} dataSource={data} fields={fieldsData} popupWidth=\"250px\" popupHeight=\"200px\" displayTemplate={displayTemplate}></MentionComponent>\n        </div>);\n}\nexport default MailMerge;\n\nconst root = createRoot(document.getElementById('sample'));\nroot.render(<MailMerge />);","dependencies":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-react-base\":\"*\",\"@syncfusion/ej2-richtexteditor\":\"*\",\"@syncfusion/ej2-react-richtexteditor\":\"*\",\"@syncfusion/ej2-splitbuttons\":\"*\",\"@syncfusion/ej2-react-splitbuttons\":\"*\",\"@syncfusion/ej2-dropdowns\":\"*\",\"@syncfusion/ej2-react-dropdowns\":\"*\",\"@syncfusion/ej2-react-charts\":\"*\",\"@syncfusion/ej2/base\":\"*\",\"@syncfusion/ej2-charts'; // Import the necessary types from Syncfusion\":\"*\",\"@syncfusion/ej2-lists\":\"*\",\"@syncfusion/ej2-documenteditor\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-navigations\":\"*\",\"@syncfusion/ej2-react-popups\":\"*\",\"@syncfusion/ej2-pivotview\":\"*\",\"@syncfusion/ej2-react-progressbar\":\"*\",\"codemirror\":\"5.3.0\"}"}