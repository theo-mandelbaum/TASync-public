{"index.css":".e-rte-quick-popup .e-rte-quick-toolbar .e-rte-image-editor::before {\r\n    content: '\\e730';\r\n}\r\n\r\n.material .e-rte-quick-popup .e-rte-quick-toolbar .e-rte-image-editor::before,\r\n.material-dark .e-rte-quick-popup .e-rte-quick-toolbar .e-rte-image-editor::before {\r\n    content: '\\e891';\r\n}\r\n\r\n.bootstrap4 .e-rte-quick-popup .e-rte-quick-toolbar .e-rte-image-editor::before {\r\n    content: '\\e78f';\r\n}\r\n\r\n.bootstrap .e-rte-quick-popup .e-rte-quick-toolbar .e-rte-image-editor::before,\r\n.bootstrap-dark .e-rte-quick-popup .e-rte-quick-toolbar .e-rte-image-editor::before {\r\n    content: '\\e944';\r\n}\r\n\r\n.fabric .e-rte-quick-popup .e-rte-quick-toolbar .e-rte-image-editor::before,\r\n.fabric-dark .e-rte-quick-popup .e-rte-quick-toolbar .e-rte-image-editor::before {\r\n    content: '\\e97c';\r\n}","index.html":"<!DOCTYPE html>\n<html>\n<head>\n    <title>Syncfusion React Sample</title>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\n    <meta name=\"author\" content=\"Syncfusion\" />\n    <link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\n</head>\n\n<body class=\"{{theme}}\">\n     <style>\n            .control-section\n            {\n                margin-top: 100px;\n            }\n    </style>\n    <div id='sample'>\n</body>\n</html>\n","index.js":"import { createRoot } from 'react-dom/client';\nimport './index.css';\n/**\n * Rich Text Editor Image Editor Integration sample\n */\nimport { HtmlEditor, Image, Inject, Link, QuickToolbar, RichTextEditorComponent, Toolbar, NodeSelection, PasteCleanup, Table, Video, Audio } from '@syncfusion/ej2-react-richtexteditor';\nimport * as React from 'react';\nimport { SampleBase } from './sample-base';\nimport { DialogComponent } from '@syncfusion/ej2-react-popups';\nimport { ImageEditorComponent } from '@syncfusion/ej2-react-image-editor';\nimport { getComponent } from '@syncfusion/ej2-base';\nimport { ImageEditor } from '@syncfusion/ej2-image-editor';\n\nexport class ImageEditorIntegration extends SampleBase {\n    selection = new NodeSelection();\n    rteObj;\n    dialogObj;\n    imageEditorObj;\n    range;\n    saveSelection;\n    dataURL;\n    isLoaded = false;\n    header = 'Image Editor';\n    imageELement;\n    dlgButtons = [\n        {\n            buttonModel: { content: 'Save', isPrimary: true },\n            click: this.onInsert.bind(this),\n        },\n        { buttonModel: { content: 'Cancel' }, click: this.onCancel.bind(this) },\n    ];\n    toolbar = ['Undo', 'Redo', 'Crop', 'Annotate', 'ZoomIn', 'ZoomOut',\n        'Reset', 'Pan', 'Finetune', 'Filter', 'Pen', 'Line', 'Rectangle', 'Ellipse', 'Arrow',\n        'Path', 'Text', 'CustomSelection', 'CircleSelection', 'SquareSelection', 'RatioSelection',\n        'Default', 'Chrome', 'Cold', 'Warm', 'Grayscale', 'Sepia', 'Invert', 'Brightness', 'Contrast',\n        'Hue', 'Saturation', 'Exposure', 'Opacity', 'Blur'];\n    onInsert() {\n        if (this.rteObj.formatter.getUndoRedoStack().length === 0) {\n            this.rteObj.formatter.saveData();\n        }\n        this.saveSelection.restore();\n        var canvas = document.createElement('CANVAS');\n        var ctx = canvas.getContext('2d');\n        const imgData = this.imageEditorObj.getImageData();\n        canvas.height = imgData.height;\n        canvas.width = imgData.width;\n        ctx.putImageData(imgData, 0, 0);\n        this.isLoaded = true;\n        this.rteObj.executeCommand('editImage', {\n            url: canvas.toDataURL(),\n            width: { width: canvas.width },\n            height: { height: canvas.height },\n            selection: this.saveSelection,\n            cssClass: this.imageELement.getAttribute('class').replace('e-rte-image', ''),\n        });\n        this.rteObj.formatter.saveData();\n        this.rteObj.formatter.enableUndo(this.rteObj);\n        this.dispose();\n        this.dialogObj.hide();\n    }\n    onCancel() {\n        this.dispose();\n        this.dialogObj.hide();\n        this.isLoaded = true;\n    }\n    quickToolbarSettings = {\n        image: [\n            'Replace',\n            'Align',\n            'Caption',\n            'Remove',\n            '-',\n            'InsertLink',\n            'OpenImageLink',\n            'EditImageLink',\n            'RemoveImageLink',\n            'Display',\n            'AltText',\n            {\n                tooltipText: 'Image Editor',\n                template: '<button class=\"e-tbar-btn e-btn\" id=\"imageEditor\"><span class=\"e-btn-icon e-icons e-rte-image-editor\"></span></button>',\n            },\n        ],\n    };\n    onToolbarClick(args) {\n        if (args.item.tooltipText === 'Image Editor') {\n            this.range = this.selection.getRange(document);\n            this.saveSelection = this.selection.save(this.range, document);\n            this.dialogObj.show();\n            this.rteObj.quickToolbarModule.imageQTBar.hidePopup();\n        }\n    }\n    dispose() {\n        const imageEditorInstance = getComponent(document.getElementById('image-editor'), 'image-editor');\n        if (imageEditorInstance !== null && imageEditorInstance !== undefined) {\n            imageEditorInstance.destroy();\n        }\n    }\n    onClose() {\n        this.dispose();\n        this.dialogObj.hide();\n        this.isLoaded = true;\n    }\n    open() {\n        this.imageEditorObj.update();\n        this.imageEditorObj.open(this.dataURL);\n    }\n    OnBeforeOpen() {\n        this.dispose();\n        this.isLoaded = false;\n        var selectNodes = this.rteObj.formatter.editorManager.nodeSelection.getNodeCollection(this.range);\n        if (selectNodes.length == 1 && selectNodes[0].tagName == 'IMG') {\n            this.imageELement = selectNodes[0];\n            this.imageELement.crossOrigin = 'anonymous';\n            var canvas = document.createElement('CANVAS');\n            var ctx = canvas.getContext('2d');\n            canvas.height = this.imageELement.offsetHeight;\n            canvas.width = this.imageELement.offsetWidth;\n            var imageELe = this.imageELement;\n            var isLoded = this.isLoaded;\n            var proxy = this;\n            this.imageELement.onload = function () {\n                ctx.drawImage(imageELe, 0, 0, canvas.width, canvas.height);\n                proxy.dataURL = canvas.toDataURL();\n            };\n            if (!isLoded) {\n                this.imageEditorObj = new ImageEditor({\n                    height: '450px'\n                });\n                this.imageEditorObj.appendTo('#image-editor');\n                isLoded = true;\n            }\n            ;\n        }\n    }\n    render() {\n        return (<div className='control-pane'>\r\n        <div className='control-section' id=\"rte\">\r\n          <div className='rte-control-section'>\r\n          <RichTextEditorComponent id=\"rteImageEditor\" ref={(richtexteditor) => { this.rteObj = richtexteditor; }} quickToolbarSettings={this.quickToolbarSettings} toolbarClick={this.onToolbarClick.bind(this)}>\r\n                <p>\r\n                An image can be edited within a Rich Text Editor using an Image Editor.\r\n                <img id=\"img1\" style={{ height: 335 }} src=\"https://ej2.syncfusion.com/angular/demos/assets/image-editor/images/default.png\" aria-label=\"Bridge\"></img>\r\n                </p>\r\n                <p>\r\n                It allows users to quickly and easily add an Image Editor to their Rich Text Editor.\r\n                It provides a variety of features, including image cropping, resizing, rotation, and more.\r\n                Additionally, it supports a wide range of image formats, including JPEG, PNG, and GIF.\r\n                </p>\r\n                <Inject services={[Toolbar, Image, Link, HtmlEditor, QuickToolbar, PasteCleanup, Table, Video, Audio]}/>\r\n            </RichTextEditorComponent>\r\n            <DialogComponent id=\"ImageEditorDialog\" ref={(dialog) => { this.dialogObj = dialog; }} buttons={this.dlgButtons} open={this.open.bind(this)} beforeOpen={this.OnBeforeOpen.bind(this)} header={this.header} visible={false} showCloseIcon={true} width=\"800px\" height=\"550px\" isModal={true} close={this.onClose.bind(this)}>\r\n                <div className=\"dialogContent\">\r\n                <ImageEditorComponent id=\"image-editor\" height=\"400px\" ref={(imageEditor) => { this.imageEditorObj = imageEditor; }} toolbar={this.toolbar}/>\r\n                </div>\r\n            </DialogComponent>\r\n          </div>\r\n        </div>\r\n\r\n       \r\n\r\n      </div>);\n    }\n}\n\nconst root = createRoot(document.getElementById('sample'));\nroot.render(<ImageEditorIntegration />);","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n                this.rendereComplete();\n            });\n        }\n    }\n    export function updateSampleSection(){}\n    ","dependencies":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-react-base\":\"*\",\"@syncfusion/ej2-richtexteditor\":\"*\",\"@syncfusion/ej2-react-richtexteditor\":\"*\",\"@syncfusion/ej2-popups\":\"*\",\"@syncfusion/ej2-react-popups\":\"*\",\"@syncfusion/ej2-image-editor\":\"*\",\"@syncfusion/ej2-react-image-editor\":\"*\",\"@syncfusion/ej2-icons\":\"*\",\"markdown-spellcheck\":\"^1.3.1\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-dropdowns\":\"*\",\"@syncfusion/ej2-inputs\":\"*\",\"@syncfusion/ej2-navigations\":\"*\",\"@syncfusion/ej2-splitbuttons\":\"*\",\"@syncfusion/ej2-react-charts\":\"*\",\"@syncfusion/ej2/base\":\"*\",\"@syncfusion/ej2-charts'; // Import the necessary types from Syncfusion\":\"*\",\"@syncfusion/ej2-lists\":\"*\",\"@syncfusion/ej2-documenteditor\":\"*\",\"@syncfusion/ej2-pivotview\":\"*\",\"@syncfusion/ej2-react-progressbar\":\"*\",\"codemirror\":\"5.3.0\"}"}