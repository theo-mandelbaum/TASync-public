{"index.css":"#rteTypes .property-section {\n    top: -20px;\n    width: 200px;\n}\n\n.sb-header {\n    z-index: 100 !important;\n}\n\n#rteTypes .e-richtexteditor .e-rte-content .e-content {\n    float: left;\n    width: 100%;\n}\n\n#rteTypes .e-richtexteditor .e-rte-content {\n    height: 100%;\n}\n\n#rteTypes {\n    padding-right: 10px;\n}\n\n#rteTypes .property-panel-content {\n    overflow: inherit;\n    min-height: 0;\n}\n\n#rteTypes .content-wrapper {\n    width: auto;\n    margin: 0;\n}\n\n#rteTypes .property-panel-header {\n    padding-top: 22px;\n    padding-bottom: 20px;\n}\n\n#rteTypes .property-panel-content div {\n    padding-left: 0;\n}\n\n.sb-content.e-view.hide-header {\n    top: 0 !important;\n}\n\n.sb-header.e-view.hide-header {\n    display: none;\n}","property-pane.js":"import * as ReactDOM from 'react-dom';\nimport * as React from 'react';\nimport { select } from '@syncfusion/ej2-base';\nexport class PropertyPane extends React.Component {\n    render() {\n        const mobilePropPane = select('.sb-mobile-prop-pane');\n        const isMobile = window.matchMedia('(max-width:550px)').matches;\n        return isMobile && mobilePropPane ?\n            ReactDOM.createPortal(<div className='property-panel-section'>\n                    <div className=\"property-panel-header\">\n                        {this.props.title}\n                    </div>\n                    <div className=\"property-panel-content\">\n                        {this.props.children}\n                    </div>\n                </div>, mobilePropPane)\n            :\n                (<div className='property-panel-section'>\n                    <div className=\"property-panel-header\">\n                        {this.props.title}\n                    </div>\n                    <div className=\"property-panel-content\">\n                        {this.props.children}\n                    </div>\n                </div>);\n    }\n}\n","index.html":"<!DOCTYPE html>\n<html>\n<head>\n    <title>Syncfusion React Sample</title>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\n    <meta name=\"author\" content=\"Syncfusion\" />\n    <link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\n</head>\n\n<body class=\"{{theme}}\">\n     <style>\n            .control-section\n            {\n                margin-top: 100px;\n            }\n    </style>\n    <div id='sample'>\n</body>\n</html>\n","index.js":"import { createRoot } from 'react-dom/client';\nimport './index.css';\n/**\n * Rich Text Editor toolbar types sample\n */\nimport { addClass, Browser, removeClass } from '@syncfusion/ej2-base';\nimport { CheckBoxComponent } from '@syncfusion/ej2-react-buttons';\nimport { DropDownListComponent } from '@syncfusion/ej2-react-dropdowns';\nimport { HtmlEditor, Image, Inject, Link, QuickToolbar, RichTextEditorComponent, Toolbar, ToolbarType, EmojiPicker, PasteCleanup, Audio, Video, FormatPainter, Table } from '@syncfusion/ej2-react-richtexteditor';\nimport * as React from 'react';\nimport { PropertyPane } from './property-pane';\n\n\nfunction Type() {\n    let rteObj;\n    let listObj;\n    let checkboxObj;\n    // Rich Text Editor items list\n    const items = ['Bold', 'Italic', 'Underline', 'StrikeThrough', 'SuperScript', 'SubScript', '|',\n        'FontName', 'FontSize', 'FontColor', 'BackgroundColor', '|',\n        'LowerCase', 'UpperCase', '|',\n        'Formats', 'Alignments', 'Blockquote', '|', 'NumberFormatList', 'BulletFormatList', '|',\n        'Outdent', 'Indent', '|', 'CreateLink', 'Image', 'Video', 'Audio', 'CreateTable', '|', 'FormatPainter', 'ClearFormat',\n        '|', 'EmojiPicker', 'Print', '|',\n        'SourceCode', 'FullScreen', '|', 'Undo', 'Redo'];\n    //Rich Text Editor ToolbarSettings\n    const toolbarSettings = {\n        type: ToolbarType.Expand,\n        items: items,\n        enableFloating: false\n    };\n    function onChange(args) {\n        switch (args.value) {\n            case '1':\n                rteObj.toolbarSettings.type = ToolbarType.Expand;\n                break;\n            case '2':\n                rteObj.toolbarSettings.type = ToolbarType.MultiRow;\n                break;\n            case '3':\n                rteObj.toolbarSettings.type = ToolbarType.Scrollable;\n                break;\n        }\n    }\n    function onFloatChange(args) {\n        rteObj.toolbarSettings.enableFloating = args.checked;\n    }\n    const ddlValue = [\n        { Id: '1', Text: 'Expand' },\n        { Id: '2', Text: 'MultiRow' },\n        { Id: '3', Text: 'Scrollable' }\n    ];\n    // maps the appropriate column to fields property\n    const fields = { text: 'Text', value: 'Id' };\n    // set the value to select an item based on mapped value at initial rendering\n    const ddlSelectedValue = '1';\n    function handleFullScreen(e) {\n        let sbCntEle = document.querySelector('.sb-content.e-view');\n        let sbHdrEle = document.querySelector('.sb-header.e-view');\n        let leftBar;\n        let transformElement;\n        if (Browser.isDevice) {\n            leftBar = document.querySelector('#right-sidebar');\n            transformElement = document.querySelector('.sample-browser.e-view.e-content-animation');\n        }\n        else {\n            leftBar = document.querySelector('#left-sidebar');\n            transformElement = document.querySelector('#right-pane');\n        }\n        if (e.targetItem === 'Maximize') {\n            if (Browser.isDevice && Browser.isIos) {\n                addClass([sbCntEle, sbHdrEle], ['hide-header']);\n            }\n            addClass([leftBar], ['e-close']);\n            removeClass([leftBar], ['e-open']);\n            if (!Browser.isDevice) {\n                transformElement.style.marginLeft = '0px';\n            }\n            transformElement.style.transform = 'inherit';\n        }\n        else if (e.targetItem === 'Minimize') {\n            if (Browser.isDevice && Browser.isIos) {\n                removeClass([sbCntEle, sbHdrEle], ['hide-header']);\n            }\n            removeClass([leftBar], ['e-close']);\n            if (!Browser.isDevice) {\n                addClass([leftBar], ['e-open']);\n                transformElement.style.marginLeft = leftBar.offsetWidth + 'px';\n            }\n            transformElement.style.transform = 'translateX(0px)';\n        }\n    }\n    function actionCompleteHandler() {\n        setTimeout(() => { rteObj.toolbarModule.refreshToolbarOverflow(); }, 400);\n    }\n    return (<div className='control-pane'>\n            <div className='control-section' id='rteTypes'>\n                <div className='col-lg-8' style={{ paddingBottom: '20px' }}>\n                    <RichTextEditorComponent id=\"typesRTE\" ref={(scope) => { rteObj = scope; }} floatingToolbarOffset={0} toolbarSettings={toolbarSettings} actionBegin={handleFullScreen.bind(this)} actionComplete={actionCompleteHandler.bind(this)}>\n                        <p>The Rich Text Editor is a WYSIWYG (\"what you see is what you get\") editor useful to create and edit content, and return the valid HTML markup or markdown of the content</p>\n                        <p><b>Toolbar</b></p>\n                        <ol>\n                            <li>\n                                <p>The Toolbar contains commands to align the text, insert a link, insert an image, insert list, undo/redo operations, HTML view, etc </p>\n                            </li>\n                            <li>\n                                <p>The Toolbar is fully customizable </p>\n                            </li>\n                        </ol>\n                        <p><b>Links</b></p>\n                        <ol>\n                            <li>\n                                <p>You can insert a hyperlink with its corresponding dialog </p>\n                            </li>\n                            <li>\n                                <p>Attach a hyperlink to the displayed text. </p>\n                            </li>\n                            <li>\n                                <p>Customize the quick toolbar based on the hyperlink </p>\n                            </li>\n                        </ol>\n                        <p><b>Validation</b></p>\n                        <ul>\n                            <li>\n                                <p>The editorâ€™s content can be validated on form submission by applying validation rules and validation message</p>\n                            </li>\n                        </ul>\n                        <p><b>Locale.</b></p>\n                        <ul>\n                            <li>\n                                <p>The editor provides an option to localize its static strings to adapt the editor to a local language.</p>\n                            </li>\n                        </ul>\n                        <p><b>Image.</b></p>\n                        <ol>\n                            <li>\n                                <p>Allows you to insert images from an online source as well as the local computer </p>\n                            </li>\n                            <li>\n                                <p>You can upload an image </p>\n                            </li>\n                            <li>\n                                <p>Provides an option to customize the quick toolbar for an image </p>\n                            </li>\n                        </ol>\n                        <img alt=\"Logo\" style={{ width: '300px' }} src=\"https://ej2.syncfusion.com/react/demos/src/rich-text-editor/images/RTEImage-Feather.png\"/>\n                        <Inject services={[Toolbar, Image, Link, HtmlEditor, QuickToolbar, EmojiPicker, PasteCleanup, Audio, Video, FormatPainter, Table]}/>\n                    </RichTextEditorComponent>\n                </div>\n                <div className='col-lg-4 property-section'>\n                    <PropertyPane title='Properties'>\n                        <table id=\"property\" title=\"Properties\" style={{ width: '100%', margin: '10px' }}>\n                            <tbody>\n                                <tr>\n                                    <td>\n                                        <div style={{ paddingLeft: '10px', paddingBottom: '10px' }}>\n                                            <DropDownListComponent id=\"types\" dataSource={ddlValue} ref={(dropdownlist) => { listObj = dropdownlist; }} fields={fields} change={onChange.bind(this)} floatLabelType='Auto' placeholder=\"Types\" index={0} popupHeight='220px'/>\n                                        </div>\n                                    </td>\n                                </tr>\n                                <tr>\n                                    <td>\n                                        <div style={{ paddingLeft: '10px' }}>\n                                            <CheckBoxComponent checked={false} label='Enable Floating' ref={(scope) => { checkboxObj = scope; }} change={onFloatChange.bind(this)}></CheckBoxComponent>\n                                        </div>\n                                    </td>\n                                </tr>\n                            </tbody>\n                        </table>\n                    </PropertyPane>\n                </div>\n            </div>\n        </div>);\n}\nexport default Type;\n\nconst root = createRoot(document.getElementById('sample'));\nroot.render(<Type />);","dependencies":"{\"@syncfusion/ej2-icons\":\"*\",\"markdown-spellcheck\":\"^1.3.1\",\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-react-base\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-react-buttons\":\"*\",\"@syncfusion/ej2-dropdowns\":\"*\",\"@syncfusion/ej2-react-dropdowns\":\"*\",\"@syncfusion/ej2-richtexteditor\":\"*\",\"@syncfusion/ej2-react-richtexteditor\":\"*\",\"@syncfusion/ej2-react-charts\":\"*\",\"@syncfusion/ej2/base\":\"*\",\"@syncfusion/ej2-charts'; // Import the necessary types from Syncfusion\":\"*\",\"@syncfusion/ej2-lists\":\"*\",\"@syncfusion/ej2-documenteditor\":\"*\",\"@syncfusion/ej2-splitbuttons\":\"*\",\"@syncfusion/ej2-navigations\":\"*\",\"@syncfusion/ej2-react-popups\":\"*\",\"@syncfusion/ej2-pivotview\":\"*\",\"@syncfusion/ej2-react-progressbar\":\"*\",\"codemirror\":\"5.3.0\"}"}