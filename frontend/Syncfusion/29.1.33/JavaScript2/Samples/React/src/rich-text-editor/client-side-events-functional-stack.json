{"index.css":".rte-event-panel #EventLog b{\n    color: #388e3c;\n    word-break: normal;\n}\n.rte-event-panel hr {\n    margin: 1px 10px 1px 0px;\n    border-top: 1px solid #eee;\n}\n.rte-event-panel .eventarea {\n    height: 245px;\n    overflow: auto;\n}\n.rte-event-panel .evtbtn {\n    padding-bottom: 10px;\n}\n.rte-control-section {\n    margin: 0 auto;\n}\n\n.property-section .right-side {\n    padding-left: 10px;\n}\n\n.property-section .left-side {\n    padding: 5px;\n    width: 25%\n}\n\n.sb-header {\n    z-index: 100 !important;\n}\n\n#rteEvent .e-richtexteditor .e-rte-content .e-content {\n    float: left;\n    width: 100%;\n}\n\n#rteEvent.control-section {\n    padding-right: 10px;\n}\n\n#rteEvent .content-wrapper {\n    width: auto;\n    margin: 0;\n}\n\n#rteEventProperty .property-panel-content {\n    overflow: inherit;\n}\n\n#rteEventProperty .property-panel-header {\n    padding-top: 40px;\n    padding-bottom: 20px;\n}\n\n.sb-content.e-view.hide-header {\n    top: 0 !important;\n}\n\n.sb-header.e-view.hide-header {\n    display: none;\n}","property-pane.js":"import * as ReactDOM from 'react-dom';\nimport * as React from 'react';\nimport { select } from '@syncfusion/ej2-base';\nexport class PropertyPane extends React.Component {\n    render() {\n        const mobilePropPane = select('.sb-mobile-prop-pane');\n        const isMobile = window.matchMedia('(max-width:550px)').matches;\n        return isMobile && mobilePropPane ?\n            ReactDOM.createPortal(<div className='property-panel-section'>\n                    <div className=\"property-panel-header\">\n                        {this.props.title}\n                    </div>\n                    <div className=\"property-panel-content\">\n                        {this.props.children}\n                    </div>\n                </div>, mobilePropPane)\n            :\n                (<div className='property-panel-section'>\n                    <div className=\"property-panel-header\">\n                        {this.props.title}\n                    </div>\n                    <div className=\"property-panel-content\">\n                        {this.props.children}\n                    </div>\n                </div>);\n    }\n}\n","index.html":"<!DOCTYPE html>\n<html>\n<head>\n    <title>Syncfusion React Sample</title>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\n    <meta name=\"author\" content=\"Syncfusion\" />\n    <link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\n</head>\n\n<body class=\"{{theme}}\">\n     <style>\n            .control-section\n            {\n                margin-top: 100px;\n            }\n    </style>\n    <div id='sample'>\n</body>\n</html>\n","index.js":"import { createRoot } from 'react-dom/client';\nimport './index.css';\n/**\n * Rich Text Editor events sample\n */\nimport * as React from 'react';\nimport { ButtonComponent } from '@syncfusion/ej2-react-buttons';\nimport { addClass, removeClass, Browser } from '@syncfusion/ej2-base';\nimport { RichTextEditorComponent, HtmlEditor, Table, Inject, Toolbar, Link, Image, QuickToolbar, EmojiPicker, PasteCleanup, Audio, Video, FormatPainter, FileManager } from '@syncfusion/ej2-react-richtexteditor';\n\nimport { PropertyPane } from './property-pane';\n\nfunction RTEEvents() {\n    let rteObj;\n    let clear;\n    let EventLogEle;\n    let EventLogRef = element => {\n        EventLogEle = element;\n    };\n    // Rich Text Editor items list\n    const items = ['Bold', 'Italic', 'Underline', 'StrikeThrough', 'SuperScript', 'SubScript', '|',\n        'FontName', 'FontSize', 'FontColor', 'BackgroundColor', '|',\n        'LowerCase', 'UpperCase', '|',\n        'Formats', 'Alignments', 'Blockquote', '|', 'NumberFormatList', 'BulletFormatList', '|',\n        'Outdent', 'Indent', '|', 'CreateLink', 'Image', 'FileManager', 'Video', 'Audio', 'CreateTable', '|', 'FormatPainter', 'ClearFormat',\n        '|', 'EmojiPicker', 'Print', '|',\n        'SourceCode', 'FullScreen', '|', 'Undo', 'Redo'];\n    const fileManagerSettings = {\n        enable: true,\n        path: '/Pictures/Food',\n        ajaxSettings: {\n            url: 'https://ej2-aspcore-service.azurewebsites.net/api/FileManager/FileOperations',\n            getImageUrl: 'https://ej2-aspcore-service.azurewebsites.net/api/FileManager/GetImage',\n            uploadUrl: 'https://ej2-aspcore-service.azurewebsites.net/api/FileManager/Upload',\n            downloadUrl: 'https://ej2-aspcore-service.azurewebsites.net/api/FileManager/Download'\n        }\n    };\n    //Rich Text Editor ToolbarSettings\n    const toolbarSettings = {\n        items: items\n    };\n    function ClearClick() {\n        EventLogEle.innerHTML = '';\n    }\n    function create() {\n        appendElement('Rich Text Editor <b>create</b> event called<hr>');\n    }\n    function actionBegin(args) {\n        appendElement('<b>' + args.requestType + '</b> action is called<hr>');\n        handleFullScreen(args);\n    }\n    function actionComplete(args) {\n        appendElement('<b>' + args.requestType + '</b> action is completed<hr>');\n        actionCompleteHandler();\n    }\n    function focus() {\n        appendElement('Rich Text Editor <b>focus</b> event called<hr>');\n    }\n    function blur() {\n        appendElement('Rich Text Editor <b>blur</b> event called<hr>');\n    }\n    function change() {\n        appendElement('Rich Text Editor <b>change</b> event called<hr>');\n    }\n    function toolbarClick() {\n        appendElement('Rich Text Editor <b>toolbar click</b> event called<hr>');\n    }\n    function beforeDialogOpen() {\n        appendElement('Rich Text Editor <b>beforeDialogOpen</b> event called<hr>');\n    }\n    function dialogOpen() {\n        appendElement('Rich Text Editor <b>dialogOpen</b> event called<hr>');\n    }\n    function dialogClose() {\n        appendElement('Rich Text Editor <b>dialogClose</b> event called<hr>');\n    }\n    function beforeQuickToolbarOpen() {\n        appendElement('Rich Text Editor <b>beforeQuickToolbarOpen</b> event called<hr>');\n    }\n    function quickToolbarOpen() {\n        appendElement('Rich Text Editor <b>quickToolbarOpen</b> event called<hr>');\n    }\n    function quickToolbarClose() {\n        appendElement('Rich Text Editor <b>quickToolbarClose</b> event called<hr>');\n    }\n    function imageSelected() {\n        appendElement('Rich Text Editor <b>imageSelected</b> event called<hr>');\n    }\n    function imageUploading() {\n        appendElement('Rich Text Editor <b>imageUploading</b> event called<hr>');\n    }\n    function imageUploadSuccess() {\n        appendElement('Rich Text Editor <b>imageUploadSuccess</b> event called<hr>');\n    }\n    function imageUploadFailed() {\n        appendElement('Rich Text Editor <b>imageUploadFailed</b> event called<hr>');\n    }\n    function imageRemoving() {\n        appendElement('Rich Text Editor <b>imageRemoving</b> event called<hr>');\n    }\n    function destroyed() {\n        appendElement('Rich Text Editor <b>destroyed</b> event called<hr>');\n    }\n    function beforeSanitizeHtml() {\n        appendElement('Rich Text Editor <b>beforeSanitizeHtml</b> event called<hr>');\n    }\n    function resizing() {\n        appendElement('Rich Text Editor <b>resizing</b> event called<hr>');\n    }\n    function resizeStart() {\n        appendElement('Rich Text Editor <b>resizeStart</b> event called<hr>');\n    }\n    function resizeStop() {\n        appendElement('Rich Text Editor <b>resizeStop</b> event called<hr>');\n    }\n    function appendElement(html) {\n        if (EventLogEle) {\n            let span = document.createElement('span');\n            span.innerHTML = html;\n            EventLogEle.insertBefore(span, EventLogEle.firstChild);\n        }\n    }\n    function handleFullScreen(e) {\n        let sbCntEle = document.querySelector('.sb-content.e-view');\n        let sbHdrEle = document.querySelector('.sb-header.e-view');\n        let leftBar;\n        let transformElement;\n        if (Browser.isDevice) {\n            leftBar = document.querySelector('#right-sidebar');\n            transformElement = document.querySelector('.sample-browser.e-view.e-content-animation');\n        }\n        else {\n            leftBar = document.querySelector('#left-sidebar');\n            transformElement = document.querySelector('#right-pane');\n        }\n        if (e.targetItem === 'Maximize') {\n            if (Browser.isDevice && Browser.isIos) {\n                addClass([sbCntEle, sbHdrEle], ['hide-header']);\n            }\n            addClass([leftBar], ['e-close']);\n            removeClass([leftBar], ['e-open']);\n            if (!Browser.isDevice) {\n                transformElement.style.marginLeft = '0px';\n            }\n            transformElement.style.transform = 'inherit';\n        }\n        else if (e.targetItem === 'Minimize') {\n            if (Browser.isDevice && Browser.isIos) {\n                removeClass([sbCntEle, sbHdrEle], ['hide-header']);\n            }\n            removeClass([leftBar], ['e-close']);\n            if (!Browser.isDevice) {\n                addClass([leftBar], ['e-open']);\n                transformElement.style.marginLeft = leftBar.offsetWidth + 'px';\n            }\n            transformElement.style.transform = 'translateX(0px)';\n        }\n    }\n    function actionCompleteHandler() {\n        setTimeout(() => {\n            rteObj.toolbarModule.refreshToolbarOverflow();\n        }, 400);\n    }\n    return (<div className='control-pane'>\n            <div className='col-lg-8 control-section' id='rteEvent'>\n                <div className='rte-control-section'>\n                    <RichTextEditorComponent id=\"clientsideRTE\" ref={(richtexteditor) => { rteObj = richtexteditor; }} toolbarSettings={toolbarSettings} fileManagerSettings={fileManagerSettings} created={create.bind(this)} actionBegin={actionBegin.bind(this)} actionComplete={actionComplete.bind(this)} focus={focus.bind(this)} blur={blur.bind(this)} change={change.bind(this)} toolbarClick={toolbarClick.bind(this)} beforeDialogOpen={beforeDialogOpen.bind(this)} dialogOpen={dialogOpen.bind(this)} dialogClose={dialogClose.bind(this)} beforeQuickToolbarOpen={beforeQuickToolbarOpen.bind(this)} quickToolbarOpen={quickToolbarOpen.bind(this)} quickToolbarClose={quickToolbarClose.bind(this)} imageSelected={imageSelected.bind(this)} imageUploading={imageUploading.bind(this)} imageUploadSuccess={imageUploadSuccess.bind(this)} imageUploadFailed={imageUploadFailed.bind(this)} imageRemoving={imageRemoving.bind(this)} destroyed={destroyed.bind(this)} beforeSanitizeHtml={beforeSanitizeHtml.bind(this)} resizing={resizing.bind(this)} resizeStart={resizeStart.bind(this)} resizeStop={resizeStop.bind(this)}>\n                        <p>The Rich Text Editor component is a WYSIWYG (\"what you see is what you get\") editor that provides the best user experience to create and update the content.\n                            Users can format their content using standard toolbar commands.</p>\n                        <p><b>Key features:</b></p>\n                        <ul>\n                            <li>\n                                <p>Provides &lt;IFRAME&gt; and &lt;DIV&gt; modes</p>\n                            </li>\n                            <li>\n                                <p>Capable of handling markdown editing.</p>\n                            </li>\n                            <li>\n                                <p>Contains a modular library to load the necessary functionality on demand.</p>\n                            </li>\n                            <li>\n                                <p>Provides a fully customizable toolbar.</p>\n                            </li>\n                            <li>\n                                <p>Provides HTML view to edit the source directly for developers.</p>\n                            </li>\n                            <li>\n                                <p>Supports third-party library integration.</p>\n                            </li>\n                            <li>\n                                <p>Allows a preview of modified content before saving it.</p>\n                            </li>\n                            <li>\n                                <p>Handles images, hyperlinks, video, hyperlinks, uploads, etc.</p>\n                            </li>\n                            <li>\n                                <p>Contains undo/redo manager.</p>\n                            </li>\n                            <li>\n                                <p>Creates bulleted and numbered lists.</p>\n                            </li>\n                        </ul>\n                        <Inject services={[HtmlEditor, Toolbar, Link, Table, Image, QuickToolbar, EmojiPicker, PasteCleanup, Audio, Video, FormatPainter, FileManager]}/>\n                    </RichTextEditorComponent>\n                </div>\n            </div>\n            <div className='col-lg-4 property-section' id=\"rteEventProperty\">\n                <PropertyPane title='Properties'>\n                    <table id=\"property\" title=\"Event Trace\" className='property-panel-table rte-event-panel'>\n                        <tbody><tr>\n                            <td>\n                                <div className=\"eventarea\" style={{ height: '245px', overflow: 'auto' }}>\n                                    <span className=\"EventLog\" ref={EventLogRef} id=\"EventLog\" style={{ wordBreak: 'normal' }}></span>\n                                </div>\n                            </td>\n                        </tr>\n                            <tr>\n                                <td>\n                                    <div className=\"evtbtn\" style={{ paddingBottom: '10px' }}>\n                                        <ButtonComponent id=\"clear\" ref={(btn) => { clear = btn; }} onClick={ClearClick.bind(this)}>Clear</ButtonComponent>\n                                    </div>\n                                </td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </PropertyPane>\n            </div>\n\n        </div>);\n}\nexport default RTEEvents;\n\nconst root = createRoot(document.getElementById('sample'));\nroot.render(<RTEEvents />);","dependencies":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-react-base\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-react-buttons\":\"*\",\"@syncfusion/ej2-icons\":\"*\",\"markdown-spellcheck\":\"^1.3.1\",\"@syncfusion/ej2-richtexteditor\":\"*\",\"@syncfusion/ej2-react-richtexteditor\":\"*\",\"@syncfusion/ej2-dropdowns\":\"*\",\"@syncfusion/ej2-filemanager\":\"*\",\"@syncfusion/ej2-inputs\":\"*\",\"@syncfusion/ej2-navigations\":\"*\",\"@syncfusion/ej2-popups\":\"*\",\"@syncfusion/ej2-splitbuttons\":\"*\",\"@syncfusion/ej2-react-charts\":\"*\",\"@syncfusion/ej2/base\":\"*\",\"@syncfusion/ej2-charts'; // Import the necessary types from Syncfusion\":\"*\",\"@syncfusion/ej2-lists\":\"*\",\"@syncfusion/ej2-documenteditor\":\"*\",\"@syncfusion/ej2-react-popups\":\"*\",\"@syncfusion/ej2-pivotview\":\"*\",\"@syncfusion/ej2-react-progressbar\":\"*\",\"codemirror\":\"5.3.0\"}"}