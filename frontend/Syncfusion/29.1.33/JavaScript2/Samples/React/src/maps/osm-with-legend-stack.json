{"index.css":"/* css */","index.html":"<!DOCTYPE html>\n<html>\n<head>\n    <title>Syncfusion React Sample</title>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\n    <meta name=\"author\" content=\"Syncfusion\" />\n    <link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\n</head>\n\n<body class=\"{{theme}}\">\n     <style>\n            .control-section\n            {\n                margin-top: 100px;\n            }\n    </style>\n    <div id='sample'>\n</body>\n</html>\n","index.js":"import { createRoot } from 'react-dom/client';\nimport './index.css';\n/**\n * OSM with legend sample\n */\nimport * as React from \"react\";\nimport { MapsComponent, Inject, LayersDirective, LayerDirective, MapsTooltip, Marker, Zoom, MarkerDirective, MarkersDirective, Legend } from '@syncfusion/ej2-react-maps';\nimport { SampleBase } from './sample-base';\nconst SAMPLE_CSS = `\n     .control-fluid {\n         padding: 0px !important;\n     }`;\nexport class OSMLegend extends SampleBase {\n    render() {\n        return (<main><div className='control-pane'>\n                 <style>\n                     {SAMPLE_CSS}\n                 </style>\n                 <div className='control-section row'>\n                     <div className='col-md-12'>\n                         <MapsComponent id=\"maps\" load={this.load} useGroupingSeparator={true} format={\"n\"} titleSettings={{ text: 'Top 10 populated cities in the World', textStyle: { size: '16px', fontFamily: 'inherit' } }} legendSettings={{\n                visible: true, position: 'Float',\n                location: { x: 10, y: 262 },\n                textStyle: { color: '#000000', fontFamily: 'inherit' },\n                height: '170px', type: 'Markers', background: '#E6E6E6'\n            }} zoomSettings={{ zoomFactor: 2, enable: true }}>\n                             <Inject services={[Marker, Legend, MapsTooltip, Zoom]}/>\n                             <LayersDirective>\n                                 <LayerDirective urlTemplate=\"https://tile.openstreetmap.org/level/tileX/tileY.png\">\n                                    <MarkersDirective>\n                                        <MarkerDirective visible={true} shape='Circle' legendText='name' height={15} width={15} colorValuePath='color' tooltipSettings={{\n                visible: true, valuePath: 'population', format: 'City Name: ${name} <br> Population: ${population} million',\n                textStyle: { fontFamily: 'inherit' }\n            }} dataSource={[\n                { name: 'Tokyo', latitude: 35.6805245924747, longitude: 139.76770396213337, population: 37435191, color: '#2EB6C8' },\n                { name: 'Delhi', latitude: 28.644800, longitude: 77.216721, population: 29399141, color: '#4A97F4' },\n                { name: 'Shanghai', latitude: 31.224361, longitude: 121.469170, population: 26317104, color: '#498082' },\n                { name: 'Sao Paulo', latitude: -23.550424484747914, longitude: -46.646471636488315, population: 21846507, color: '#FB9E67' },\n                { name: 'Mexico City', latitude: 19.427402397418774, longitude: -99.131123716666, population: 21671908, color: '#8F9DE3' },\n                { name: 'Cairo ', latitude: 30.033333, longitude: 31.233334, population: 20484965, color: '#7B9FB0' },\n                { name: 'Dhaka', latitude: 23.777176, longitude: 90.399452, population: 20283552, color: '#4DB647' },\n                { name: 'Mumbai', latitude: 19.08492049646163, longitude: 72.87449446319248, population: 20185064, color: '#30BEFF' },\n                { name: 'Beijing', latitude: 39.90395970055848, longitude: 116.38831272088059, population: 20035455, color: '#Ac72AD' },\n                { name: 'Osaka', latitude: 34.69024500601642, longitude: 135.50746225677142, population: 19222665, color: '#EFE23E' }\n            ]}>\n                                        </MarkerDirective>\n                                    </MarkersDirective>\n                                </LayerDirective>\n                             </LayersDirective>\n                         </MapsComponent>\n                     </div>\n                 </div>   \n            </div>              \n                 <section id=\"action-description\" aria-label=\"Description of Maps sample\">\n                     <p>\n                     This sample illustrates the world's top 10 most populated cities by displaying markers in their locations and legend with the city names.\n                     </p>\n                 </section>\n                 <section id=\"description\" aria-label=\"Description of the Maps features demonstrated in this sample\">\n                     <p>\n                        In this example, you can see how to display markers and a legend on the OpenStreetMap. To enable the legend, set the <code>visible</code> property in <code>legendSettings</code> to <b>true</b>, and then use properties like <code>title</code>, <code>position</code>, <code>type</code>, <code>height</code>, <code>width</code>, and so on to customize the legend.\n                     </p>\n                     <br />\n                     <p style={{ fontWeight: 500 }}>Injecting Module</p>\n                     <p>\n                        The maps component features are segregated into individual modules by feature. To use markers and a legend, we need to inject the <code>Marker</code> and <code>Legend</code> module into services.\n                     </p>\n                 </section>\n            </main>);\n    }\n    load(args) {\n    }\n    ;\n}\n\nconst root = createRoot(document.getElementById('sample'));\nroot.render(<OSMLegend />);","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n                this.rendereComplete();\n            });\n        }\n    }\n    export function updateSampleSection(){}\n    ","dependencies":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-compression\":\"*\",\"@syncfusion/ej2-data\":\"*\",\"@syncfusion/ej2-file-utils\":\"*\",\"@syncfusion/ej2-pdf-export\":\"*\",\"@syncfusion/ej2-svg-base\":\"*\",\"markdown-spellcheck\":\"^1.3.1\",\"@syncfusion/ej2-maps\":\"*\",\"@syncfusion/ej2-react-base\":\"*\",\"@syncfusion/ej2-react-maps\":\"*\",\"@syncfusion/ej2-react-charts\":\"*\",\"@syncfusion/ej2/base\":\"*\",\"@syncfusion/ej2-charts'; // Import the necessary types from Syncfusion\":\"*\",\"@syncfusion/ej2-lists\":\"*\",\"@syncfusion/ej2-documenteditor\":\"*\",\"@syncfusion/ej2-splitbuttons\":\"*\",\"@syncfusion/ej2-navigations\":\"*\",\"@syncfusion/ej2-react-popups\":\"*\"}"}