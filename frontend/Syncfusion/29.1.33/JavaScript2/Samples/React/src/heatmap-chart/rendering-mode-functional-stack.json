{"index.css":"/* css */","property-pane.js":"import * as ReactDOM from 'react-dom';\nimport * as React from 'react';\nimport { select } from '@syncfusion/ej2-base';\nexport class PropertyPane extends React.Component {\n    render() {\n        const mobilePropPane = select('.sb-mobile-prop-pane');\n        const isMobile = window.matchMedia('(max-width:550px)').matches;\n        return isMobile && mobilePropPane ?\n            ReactDOM.createPortal(<div className='property-panel-section'>\n                    <div className=\"property-panel-header\">\n                        {this.props.title}\n                    </div>\n                    <div className=\"property-panel-content\">\n                        {this.props.children}\n                    </div>\n                </div>, mobilePropPane)\n            :\n                (<div className='property-panel-section'>\n                    <div className=\"property-panel-header\">\n                        {this.props.title}\n                    </div>\n                    <div className=\"property-panel-content\">\n                        {this.props.children}\n                    </div>\n                </div>);\n    }\n}\n","render-mode-data.json":"{\n    \"renderModeData\":  [\n        [7.6, 5.9, -3.7, 2.2, 8.9, 6.0, 14.2, 6.1, -3.2, 4.2],\n        [3.9, 1.9, 2.6, 14.2, 2.3, 3.5, -2.8, 2.7, 4.2, 3.9],\n        [9.2, 3.4, 5.2, 14.5, 1.0, -5.9, -0.2, -1.7, -3.3, 4.6],\n        [-2.3, 7.2, -3.2, 15.1, 2.7, 2.9, 3.9, -1.2, 8.2, 6.0],\n        [-1.8, 5.0, -3.5, 3.2, 2.5, -1.8, 14.7, 3.0, 8.8, -3.3],\n        [-2.5, 3.4, 4.2, -1.9, 7.5, 4.6, 2.4, 10.9, 8.0, -3.0],\n        [7.1, 2.5, 7.9, 7.4, 15.2, 7.0, 5.8, -2.3, -3.9, -4.1],\n        [4.7, 3.3, 14.3, 5.5, 3.0, -3.5, -5.3, -6.8, -2.3, 5.7],\n        [2.2, 13.8, 3.0, -2.2, 3.8, 14.2, 3.7, 4.0, -4.9, 7.8],\n        [4.3, 15.3, 3.1, 1.7, 4.2, -3.6, 2.3, -3.2, 10.7, 2.3],\n        [-2.3, 3.4, 6.1, -1.3, 13.3, 3.7, -1.7, 8.2, 7.6, 4.1]\n    ]\n}","index.html":"<!DOCTYPE html>\n<html>\n<head>\n    <title>Syncfusion React Sample</title>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\n    <meta name=\"author\" content=\"Syncfusion\" />\n    <link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\n</head>\n\n<body class=\"{{theme}}\">\n     <style>\n            .control-section\n            {\n                margin-top: 100px;\n            }\n    </style>\n    <div id='sample'>\n</body>\n</html>\n","index.js":"import { createRoot } from 'react-dom/client';\nimport './index.css';\nimport * as React from \"react\";\nimport { useEffect, useRef, useState } from \"react\";\nimport { HeatMapComponent, Legend, Tooltip, Inject } from '@syncfusion/ej2-react-heatmap';\nimport * as data from './render-mode-data.json';\n\nimport { PropertyPane } from './property-pane';\nimport { RadioButtonComponent } from \"@syncfusion/ej2-react-buttons\";\nconst RenderMode = () => {\n    const [renderingMode, setRenderingMode] = useState('SVG');\n    let heatmap = useRef(null);\n    let title = {\n        text: 'Net Migration Rate of Northern Europe From 1965 to 2015',\n        textStyle: {\n            size: '15px',\n            fontWeight: '500',\n            fontStyle: 'Normal',\n            fontFamily: 'inherit'\n        }\n    };\n    let xAxis = {\n        labels: ['Channel Isl', 'Denmark', 'Estonia', 'Finland', 'Iceland', 'Ireland', 'Latvia', 'Lithuania', 'Norway', 'Sweden', 'UK'],\n        labelRotation: -90,\n        labelIntersectAction: 'None',\n        textStyle: {\n            fontFamily: 'inherit'\n        }\n    };\n    let yAxis = {\n        labels: ['1965-1970', '1970-1975', '1975-1980', '1980-1985', '1985-1990', '1990-1995', '1995-2000', '2000-2005', '2005-2010', '2010-2015'],\n        textStyle: {\n            fontFamily: 'inherit'\n        }\n    };\n    let paletteSettings = {\n        palette: [\n            { color: '#C06C84' },\n            { color: '#355C7D' }\n        ]\n    };\n    let cellSettings = {\n        border: {\n            width: 0\n        },\n        showLabel: false,\n        format: '{value} %'\n    };\n    let legendSettings = {\n        position: 'Bottom',\n        width: '200px',\n        textStyle: {\n            fontFamily: 'inherit'\n        }\n    };\n    const svg = () => {\n        setRenderingMode('SVG');\n        heatmap.current.dataBind();\n    };\n    const canvas = () => {\n        setRenderingMode('Canvas');\n        heatmap.current.dataBind();\n    };\n    const load = (args) => {\n    };\n    return (<main><div>\n            <div className='col-md-9 control-section'>\n\n                <HeatMapComponent id='heatmap-container' ref={heatmap} titleSettings={title} tooltipSettings={{ textStyle: { fontFamily: 'inherit' } }} xAxis={xAxis} yAxis={yAxis} dataSource={data.renderModeData} paletteSettings={paletteSettings} renderingMode={renderingMode} cellSettings={cellSettings} load={load.bind(this)} legendSettings={legendSettings}>\n                    <Inject services={[Legend, Tooltip]}/>\n                </HeatMapComponent>\n            </div>\n            <div className=\"col-md-3 property-section\">\n                <PropertyPane title='Properties'>\n                    <table id='property' role='none' title='Properties' className='property-panel-table' style={{ width: '100%', marginLeft: -10 }}>\n                        <tbody>\n                            <tr style={{ height: '50px' }}>\n                                <td style={{ width: '60%' }}>\n                                    <div>Rendering Mode:</div>\n                                </td>\n                                <td style={{ width: '40%' }}>\n                                    <div className='row'>\n                                        <RadioButtonComponent id='svg' checked={true} label='SVG' name='renderingmode' value=\"SVG\" change={svg}/>\n                                    </div>\n                                    <div className='row'>\n                                        <RadioButtonComponent id='canvas' label='Canvas' name='renderingmode' value=\"Canvas\" change={canvas}/>\n                                    </div>\n                                </td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </PropertyPane>\n            </div>\n        </div>\n            <section id=\"action-description\" aria-label=\"Description of HeatMap sample\">\n                <p>\n                    This sample visualizes the net migration rate for the northern European countries over the years. The data label\n                    is disabled in this sample, the tooltip displays the data point values.  In property panel, the options are\n                    available to change the rendering mode between Canvas and SVG means of radio button.\n                </p>\n            </section>\n            <section id=\"description\" aria-label=\"Description of the HeatMap features demonstrated in this sample\">\n                <p>\n                    In this example, you can see how to change the rendering mode between <code>Canvas</code> and <code>SVG</code> types in Heatmap. You can change the rendering mode using the <a href=\"https://ej2.syncfusion.com/react/documentation/heatmap-chart/rendering-mode\" target=\"_blank\">renderingMode</a> property.\n                </p>\n                <p>The tooltip is enabled in this example. To see the tooltip in action, hover the mouse over an item or tap an item on touch-enabled devices.</p>\n                <br></br>\n                <p><b>Injecting Module</b></p>\n                <p>\n                        Heatmap component features are separated into discrete feature-based modules. To use a tooltip and the legend, inject the <a target=\"_blank\" href=\"https://ej2.syncfusion.com/react/documentation/heatmap-chart/tooltip\">Tooltip</a> and <a target=\"_blank\" href=\"https://ej2.syncfusion.com/react/documentation/heatmap-chart/legend\">Legend</a> module using the <code>{'<Inject services={[Tooltip, Legend]} />'}</code> method.\n                </p>\n            </section>\n        </main>);\n};\nexport default RenderMode;\n\nconst root = createRoot(document.getElementById('sample'));\nroot.render(<RenderMode />);","dependencies":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-react-base\":\"*\",\"@syncfusion/ej2-heatmap\":\"*\",\"@syncfusion/ej2-react-heatmap\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-react-buttons\":\"*\",\"@syncfusion/ej2-react-charts\":\"*\",\"@syncfusion/ej2/base\":\"*\",\"@syncfusion/ej2-charts'; // Import the necessary types from Syncfusion\":\"*\",\"@syncfusion/ej2-lists\":\"*\",\"@syncfusion/ej2-documenteditor\":\"*\",\"@syncfusion/ej2-splitbuttons\":\"*\",\"@syncfusion/ej2-navigations\":\"*\",\"@syncfusion/ej2-react-popups\":\"*\"}"}