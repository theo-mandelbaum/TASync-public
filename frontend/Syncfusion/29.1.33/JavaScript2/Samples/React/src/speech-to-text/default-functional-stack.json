{"index.css":".default-speechToText-section,\n.default-speechToText-section .output-container {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n}\n\n.default-speechToText-section {\n    gap: 50px;\n    margin: 50px auto;\n}\n\n.default-speechToText-section .output-container {\n    width: 75%;\n    gap: 10px;\n}\n\n.default-speechToText-section .output-container h4 {\n    margin: 0;\n    align-self: baseline;\n}\n\n.default-speechToText-section .speech-recognition-status {\n    font-size: 12px;\n}\n\n.default-speechToText .property-panel-content td {\n    padding: 10px 0px;\n    width: 50%;\n}\n\n.default-speechToText-section .output-options {\n    display: flex;\n    gap: 5px;\n}\n\n.default-speechToText-section .speechToText-container {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    gap: 15px;\n}\n\n#transcript-copy-button:disabled {\n    opacity: 0.5;\n    cursor: not-allowed;\n}\n\n@media only screen and (max-width: 750px) {\n    .default-speechToText-section .output-container {\n        width: 100%;\n    }\n\n    .default-speechToText-section .output-options {\n        width: 100%;\n        display: flex;\n        flex-direction: column;\n        gap: 10px;\n    }\n}","index.html":"<!DOCTYPE html>\n<html>\n<head>\n    <title>Syncfusion React Sample</title>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\n    <meta name=\"author\" content=\"Syncfusion\" />\n    <link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\n</head>\n\n<body class=\"{{theme}}\">\n     <style>\n            .control-section\n            {\n                margin-top: 100px;\n            }\n    </style>\n    <div id='sample'>\n</body>\n</html>\n","index.js":"import { createRoot } from 'react-dom/client';\nimport './index.css';\nimport { DropDownListComponent } from '@syncfusion/ej2-react-dropdowns';\nimport { ButtonComponent, SwitchComponent } from '@syncfusion/ej2-react-buttons';\nimport { SpeechToTextComponent, TextAreaComponent } from '@syncfusion/ej2-react-inputs';\nimport * as React from 'react';\n\nimport { useEffect, useRef, useState } from 'react';\n\nconst Default = () => {\n    const [isSupportedBrowser, setIsSupportBrowser] = useState(true);\n    const [languageDropdownEnabled, setLanguageDropdownEnabled] = useState(true);\n    const [interimSwitchDisabled, setInterimSwitchDisabled] = useState(false);\n    const speechToTextObj = useRef(null);\n    const textareaObj = useRef(null);\n    const copyButtonObj = useRef(null);\n    const miColor = [\n        { text: \"Normal\", value: \"\" },\n        { text: \"Primary\", value: \"e-primary\" },\n        { text: \"Success\", value: \"e-success\" },\n        { text: \"Warning\", value: \"e-warning\" },\n        { text: \"Danger\", value: \"e-danger\" },\n        { text: \"Flat\", value: \"e-flat\" },\n        { text: \"Info\", value: \"e-info\" }\n    ];\n    const languageTypes = [\n        { text: \"English, US\", value: \"en-US\" },\n        { text: \"German, DE\", value: \"de-DE\" },\n        { text: \"Chinese, CN\", value: \"zh-CN\" },\n        { text: \"French, FR\", value: \"fr-FR\" },\n        { text: \"Arabic, SA\", value: \"ar-SA\" }\n    ];\n    const micField = { text: \"text\", value: \"value\" };\n    const languageField = { text: \"text\", value: \"value\" };\n    const onTranscriptChanged = (args) => {\n        if (!args.isInterimResult)\n            args.transcript += ' ';\n        textareaObj.current.value = args.transcript;\n        toggleCopyButtonState();\n    };\n    const onListeningStart = () => {\n        if (isSupportedBrowser) {\n            if (textareaObj.current.value)\n                speechToTextObj.current.transcript = textareaObj.current.value + '\\n';\n            updateStatus('Listening... Speak now...');\n        }\n        else {\n            updateStatus('For unsupported browsers, use event callbacks to handle Speech-to-Text actions.');\n        }\n        setLanguageDropdownEnabled(false);\n        setInterimSwitchDisabled(true);\n    };\n    const onListeningStop = (args) => {\n        if (isSupportedBrowser) {\n            if (args.isInteracted)\n                updateStatus('Click the mic button to start speaking...');\n        }\n        else {\n            updateStatus('For unsupported browsers, use event callbacks to handle Speech-to-Text actions.');\n        }\n        setLanguageDropdownEnabled(true);\n        setInterimSwitchDisabled(false);\n    };\n    const onErrorHandler = (args) => {\n        updateStatus(args.errorMessage);\n        if (args.error === 'unsupported-browser')\n            setIsSupportBrowser(false);\n    };\n    const updateStatus = (status) => {\n        document.querySelector('.speech-recognition-status').innerText = status;\n    };\n    const handleMiColor = (args) => {\n        speechToTextObj.current.cssClass = args.value;\n    };\n    const handleLanguageType = (args) => {\n        speechToTextObj.current.lang = args.value;\n    };\n    const handleAllowInterimResults = (args) => {\n        speechToTextObj.current.allowInterimResults = args.checked;\n    };\n    const handleShowTooltip = (args) => {\n        speechToTextObj.current.showTooltip = args.checked;\n    };\n    const handleIconWithText = (args) => {\n        speechToTextObj.current.buttonSettings = {\n            content: args.checked ? 'Start Listening' : '',\n            stopContent: args.checked ? 'Stop Listening' : ''\n        };\n    };\n    const handleCopyButton = () => {\n        const copyText = textareaObj.current.value;\n        const copyBtnElem = document.querySelector('#transcript-copy-button');\n        if (copyText && navigator.clipboard) {\n            navigator.clipboard.writeText(copyText).then(function () {\n                copyBtnElem.innerText = 'Copied!';\n                setTimeout(function () {\n                    copyBtnElem.innerText = 'Copy';\n                }, 1000);\n            }).catch(function (err) {\n                console.error('Clipboard write failed', err);\n            });\n        }\n    };\n    const handleClearButton = () => {\n        textareaObj.current.value = speechToTextObj.current.transcript = '';\n        toggleCopyButtonState();\n    };\n    const toggleCopyButtonState = () => {\n        var hasText = textareaObj.current.element.value.trim() !== '';\n        copyButtonObj.current.disabled = hasText ? false : true;\n    };\n    return (<div className=\"control-pane\">\n            <div className=\"col-lg-8 control-section\">\n                <div className=\"default-speechToText-section\">\n                    <div className=\"speechToText-container\">\n                        <SpeechToTextComponent id=\"speech-to-text\" ref={speechToTextObj} transcriptChanged={onTranscriptChanged} onStart={onListeningStart} onStop={onListeningStop} onError={onErrorHandler}/>\n                        <mark className=\"speech-recognition-status\">Click the mic button to start speaking...</mark>\n                    </div> \n                    <div className=\"output-container\">\n                        <h4>Live Speech Transcription</h4>\n                        <TextAreaComponent id=\"output-textarea\" ref={textareaObj} cssClass=\"e-outline\" resizeMode=\"None\" rows={10} placeholder=\"Transcribed text will appear here...\" input={toggleCopyButtonState}/>\n                        <div className=\"output-options\">\n                            <ButtonComponent id=\"transcript-copy-button\" className=\"e-btn\" onClick={handleCopyButton} disabled={true} ref={copyButtonObj}>Copy</ButtonComponent>\n                            <ButtonComponent id=\"transcript-clear-button\" className=\"e-btn\" onClick={handleClearButton}>Clear</ButtonComponent>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div className=\"col-lg-4 default-speechToText property-section\">\n                <div className=\"property-panel-header\">Properties</div>\n                <div className=\"property-panel-content\">\n                    <table>\n                        <tbody>\n                            <tr>\n                                <td>Styling</td>\n                                <td>\n                                    <DropDownListComponent id=\"stt-styling-ddl\" dataSource={miColor} fields={micField} change={handleMiColor} index={0}/>\n                                </td>\n                            </tr>\n                            <tr>\n                                <td>Language</td>\n                                <td>\n                                    <DropDownListComponent id=\"stt-lang-ddl\" dataSource={languageTypes} fields={languageField} change={handleLanguageType} index={0} enabled={languageDropdownEnabled}/>\n                                </td>\n                            </tr>\n                            <tr>\n                                <td>Interim results</td>\n                                <td>\n                                    <SwitchComponent id=\"interim-switch\" type=\"checkbox\" checked={true} change={handleAllowInterimResults} disabled={interimSwitchDisabled}/>\n                                </td>\n                            </tr>\n                            <tr>\n                                <td>Show tooltip</td>\n                                <td>\n                                    <SwitchComponent id=\"tooltip-switch\" type=\"checkbox\" checked={true} change={handleShowTooltip}/>\n                                </td>\n                            </tr>\n                            <tr>\n                                <td>Show icon with text</td>\n                                <td>\n                                    <SwitchComponent id=\"icon-with-text-switch\" type=\"checkbox\" checked={false} change={handleIconWithText}/>\n                                </td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n\n        </div>);\n};\nexport default Default;\n\nconst root = createRoot(document.getElementById('sample'));\nroot.render(<Default />);","dependencies":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-react-base\":\"*\",\"@syncfusion/ej2-dropdowns\":\"*\",\"@syncfusion/ej2-react-dropdowns\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-react-buttons\":\"*\",\"@syncfusion/ej2-inputs\":\"*\",\"@syncfusion/ej2-react-inputs\":\"*\",\"@syncfusion/ej2-react-charts\":\"*\",\"@syncfusion/ej2/base\":\"*\",\"@syncfusion/ej2-charts'; // Import the necessary types from Syncfusion\":\"*\",\"@syncfusion/ej2-lists\":\"*\",\"@syncfusion/ej2-documenteditor\":\"*\",\"@syncfusion/ej2-splitbuttons\":\"*\",\"@syncfusion/ej2-navigations\":\"*\",\"@syncfusion/ej2-react-popups\":\"*\",\"@syncfusion/ej2-pivotview\":\"*\",\"@syncfusion/ej2-react-progressbar\":\"*\",\"@syncfusion/ej2-schedule\":\"*\"}"}