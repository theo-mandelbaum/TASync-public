{"index.css":".default-speechToText-section,\n.default-speechToText-section .output-container {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n}\n\n.default-speechToText-section {\n    gap: 50px;\n    margin: 50px auto;\n}\n\n.default-speechToText-section .output-container {\n    width: 75%;\n    gap: 10px;\n}\n\n.default-speechToText-section .output-container h4 {\n    margin: 0;\n    align-self: baseline;\n}\n\n.default-speechToText-section .speech-recognition-status {\n    font-size: 12px;\n}\n\n.default-speechToText .property-panel-content td {\n    padding: 10px 0px;\n    width: 50%;\n}\n\n.default-speechToText-section .output-options {\n    display: flex;\n    gap: 5px;\n}\n\n.default-speechToText-section .speechToText-container {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    gap: 15px;\n}\n\n#transcript-copy-button:disabled {\n    opacity: 0.5;\n    cursor: not-allowed;\n}\n\n@media only screen and (max-width: 750px) {\n    .default-speechToText-section .output-container {\n        width: 100%;\n    }\n\n    .default-speechToText-section .output-options {\n        width: 100%;\n        display: flex;\n        flex-direction: column;\n        gap: 10px;\n    }\n}","index.html":"<!DOCTYPE html>\n<html>\n<head>\n    <title>Syncfusion React Sample</title>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\n    <meta name=\"author\" content=\"Syncfusion\" />\n    <link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\n</head>\n\n<body class=\"{{theme}}\">\n     <style>\n            .control-section\n            {\n                margin-top: 100px;\n            }\n    </style>\n    <div id='sample'>\n</body>\n</html>\n","index.js":"import { createRoot } from 'react-dom/client';\nimport './index.css';\nimport * as React from 'react';\nimport { SampleBase } from './sample-base';\nimport { SpeechToTextComponent, TextAreaComponent } from '@syncfusion/ej2-react-inputs';\nimport { ButtonComponent, SwitchComponent } from '@syncfusion/ej2-react-buttons';\n\nimport { DropDownListComponent } from '@syncfusion/ej2-react-dropdowns';\nexport class Default extends SampleBase {\n    speechToTextObj;\n    textareaObj;\n    copyButtonObj;\n    isSupportedBrowser = true;\n    constructor(props) {\n        super(props);\n        this.state = {\n            languageDropdownEnabled: true,\n            interimSwitchDisabled: false\n        };\n    }\n    miColor = [\n        { text: \"Normal\", value: \"\" },\n        { text: \"Primary\", value: \"e-primary\" },\n        { text: \"Success\", value: \"e-success\" },\n        { text: \"Warning\", value: \"e-warning\" },\n        { text: \"Danger\", value: \"e-danger\" },\n        { text: \"Flat\", value: \"e-flat\" },\n        { text: \"Info\", value: \"e-info\" }\n    ];\n    languageTypes = [\n        { text: \"English, US\", value: \"en-US\" },\n        { text: \"German, DE\", value: \"de-DE\" },\n        { text: \"Chinese, CN\", value: \"zh-CN\" },\n        { text: \"French, FR\", value: \"fr-FR\" },\n        { text: \"Arabic, SA\", value: \"ar-SA\" }\n    ];\n    micField = { text: \"text\", value: \"value\" };\n    languageField = { text: \"text\", value: \"value\" };\n    onTranscriptChanged = (args) => {\n        if (!args.isInterimResult)\n            args.transcript += ' ';\n        this.textareaObj.value = args.transcript;\n        this.toggleCopyButtonState();\n    };\n    onListeningStart = () => {\n        if (this.isSupportedBrowser) {\n            if (this.textareaObj.value)\n                this.speechToTextObj.transcript = this.textareaObj.value + '\\n';\n            this.updateStatus('Listening... Speak now...');\n        }\n        else {\n            this.updateStatus('For unsupported browsers, use event callbacks to handle Speech-to-Text actions.');\n        }\n        this.setState({\n            languageDropdownEnabled: false,\n            interimSwitchDisabled: true\n        });\n    };\n    onListeningStop = (args) => {\n        if (this.isSupportedBrowser) {\n            if (args.isInteracted)\n                this.updateStatus('Click the mic button to start speaking...');\n        }\n        else {\n            this.updateStatus('For unsupported browsers, use event callbacks to handle Speech-to-Text actions.');\n        }\n        this.setState({\n            languageDropdownEnabled: true,\n            interimSwitchDisabled: false\n        });\n    };\n    onErrorHandler = (args) => {\n        this.updateStatus(args.errorMessage);\n        if (args.error === 'unsupported-browser')\n            this.isSupportedBrowser = false;\n    };\n    updateStatus = (status) => {\n        document.querySelector('.speech-recognition-status').innerText = status;\n    };\n    handleMiColor = (args) => {\n        this.speechToTextObj.cssClass = args.value;\n    };\n    handleLanguageType = (args) => {\n        this.speechToTextObj.lang = args.value;\n    };\n    handleAllowInterimResults = (args) => {\n        this.speechToTextObj.allowInterimResults = args.checked;\n    };\n    handleShowTooltip = (args) => {\n        this.speechToTextObj.showTooltip = args.checked;\n    };\n    handleIconWithText = (args) => {\n        this.speechToTextObj.buttonSettings = {\n            content: args.checked ? 'Start Listening' : '',\n            stopContent: args.checked ? 'Stop Listening' : ''\n        };\n    };\n    handleCopyButton = () => {\n        const copyText = this.textareaObj.value;\n        const copyBtnElem = document.querySelector('#transcript-copy-button');\n        if (copyText && navigator.clipboard) {\n            navigator.clipboard.writeText(copyText).then(function () {\n                copyBtnElem.innerText = 'Copied!';\n                setTimeout(function () {\n                    copyBtnElem.innerText = 'Copy';\n                }, 1000);\n            }).catch(function (err) {\n                console.error('Clipboard write failed', err);\n            });\n        }\n    };\n    handleClearButton = () => {\n        this.textareaObj.value = this.speechToTextObj.transcript = '';\n        this.toggleCopyButtonState();\n    };\n    innerText;\n    toggleCopyButtonState = () => {\n        var hasText = this.textareaObj.element.value.trim() !== '';\n        this.copyButtonObj.disabled = hasText ? false : true;\n    };\n    render() {\n        return (<div className=\"control-pane\">\n                <div className=\"col-lg-8 control-section\">\n                    <div className=\"default-speechToText-section\">\n                        <div className=\"speechToText-container\">\n                            <SpeechToTextComponent id=\"speech-to-text\" ref={(speechtotext) => { this.speechToTextObj = speechtotext; }} transcriptChanged={this.onTranscriptChanged} onStart={this.onListeningStart} onStop={this.onListeningStop} onError={this.onErrorHandler}/>\n                            <mark className=\"speech-recognition-status\">Click the mic button to start speaking...</mark>\n                        </div>  \n                        <div className=\"output-container\">\n                            <h4>Live Speech Transcription</h4>\n                            <mark className=\"speech-recognition-status\">Click the above mic button to start speaking...</mark>\n                            <TextAreaComponent id=\"output-textarea\" ref={(textarea) => { this.textareaObj = textarea; }} cssClass=\"e-outline\" resizeMode=\"None\" rows={10} placeholder=\"Transcribed text will appear here...\" input={this.toggleCopyButtonState}/>\n                            <div className=\"output-options\">\n                                <ButtonComponent id=\"transcript-copy-button\" ref={(button) => { this.copyButtonObj = button; }} disabled={true} onClick={this.handleCopyButton} className=\"e-btn\">Copy</ButtonComponent>\n                                <ButtonComponent id=\"transcript-clear-button\" onClick={this.handleClearButton} className=\"e-btn\">Clear</ButtonComponent>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"col-lg-4 default-speechToText property-section\">\n                    <div className=\"property-panel-header\">Properties</div>\n                    <div className=\"property-panel-content\">\n                        <table>\n                            <tbody>\n                                <tr>\n                                    <td>Styling</td>\n                                    <td>\n                                        <DropDownListComponent id=\"stt-styling-ddl\" dataSource={this.miColor} fields={this.micField} change={this.handleMiColor} index={0}/>\n                                    </td>\n                                </tr>\n                                <tr>\n                                    <td>Language</td>\n                                    <td>\n                                        <DropDownListComponent id=\"stt-lang-ddl\" dataSource={this.languageTypes} fields={this.languageField} change={this.handleLanguageType} index={0} enabled={this.state.languageDropdownEnabled}/>\n                                    </td>\n                                </tr>\n                                <tr>\n                                    <td>Interim results</td>\n                                    <td>\n                                        <SwitchComponent id=\"interim-switch\" type=\"checkbox\" checked={true} change={this.handleAllowInterimResults} disabled={this.state.interimSwitchDisabled}/>\n                                    </td>\n                                </tr>\n                                <tr>\n                                    <td>Show tooltip</td>\n                                    <td>\n                                        <SwitchComponent id=\"tooltip-switch\" type=\"checkbox\" checked={true} change={this.handleShowTooltip}/>\n                                    </td>\n                                </tr>\n                                <tr>\n                                    <td>Show icon with text</td>\n                                    <td>\n                                        <SwitchComponent id=\"icon-with-text-switch\" type=\"checkbox\" checked={false} change={this.handleIconWithText}/>\n                                    </td>\n                                </tr>\n                            </tbody>\n                        </table>\n                    </div>\n                </div>\n\n            </div>);\n    }\n}\n\nconst root = createRoot(document.getElementById('sample'));\nroot.render(<Default />);","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n                this.rendereComplete();\n            });\n        }\n    }\n    export function updateSampleSection(){}\n    ","dependencies":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-react-base\":\"*\",\"@syncfusion/ej2-inputs\":\"*\",\"@syncfusion/ej2-react-inputs\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-react-buttons\":\"*\",\"@syncfusion/ej2-dropdowns\":\"*\",\"@syncfusion/ej2-react-dropdowns\":\"*\",\"@syncfusion/ej2-react-charts\":\"*\",\"@syncfusion/ej2/base\":\"*\",\"@syncfusion/ej2-charts'; // Import the necessary types from Syncfusion\":\"*\",\"@syncfusion/ej2-lists\":\"*\",\"@syncfusion/ej2-documenteditor\":\"*\",\"@syncfusion/ej2-splitbuttons\":\"*\",\"@syncfusion/ej2-navigations\":\"*\",\"@syncfusion/ej2-react-popups\":\"*\",\"@syncfusion/ej2-pivotview\":\"*\",\"@syncfusion/ej2-react-progressbar\":\"*\",\"@syncfusion/ej2-schedule\":\"*\"}"}