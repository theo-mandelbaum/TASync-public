{"index.css":".usecase-speechToText-section,\n.e-bigger .usecase-speechToText-section {\n    width: 90%;\n    height: 55vh;\n    margin: 0 auto;\n    padding: 0;\n    display: flex;\n}\n\n.usecase-speechToText-section #transcript-content {\n    border: none;\n    border-top-right-radius: 8px;\n    border-bottom-right-radius: 8px;\n}\n\n.usecase-speechToText-section .stt-container {\n    width: 70%;\n    height: 100%;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    gap: 40px;\n}\n\n.usecase-speechToText-section .e-speech-to-text.usecase-stt-btn {\n    width: 100px;\n    height: 100px;\n    position: relative;\n}\n\n.usecase-speechToText-section .usecase-stt-btn .e-btn-icon,\n.e-bigger .usecase-speechToText-section .usecase-stt-btn .e-btn-icon {\n    font-size: 50px;\n}\n\n.usecase-speechToText-section .transcript-container {\n    width: 30%;\n    height: 100%;\n}\n\n/* Create wave effect using pseudo-elements */\n.usecase-stt-btn::before,\n.usecase-stt-btn::after {\n    content: \"\";\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    width: 100%;\n    height: 100%;\n    border-radius: 50%;\n    background: #9b9b9b;\n    transform: translate(-50%, -50%) scale(1);\n    opacity: 0;\n    pointer-events: none;\n}\n\n.usecase-speechToText-section .stt-listening-state::before {\n    animation: stt-wave-ring 1.5s infinite ease-out;\n}\n\n.usecase-speechToText-section .stt-listening-state::after {\n    animation: stt-wave-ring 1.5s 0.75s infinite ease-out;\n    /* Slight delay for second wave */\n}\n\n@keyframes stt-wave-ring {\n    0% {\n        transform: translate(-50%, -50%) scale(1);\n        opacity: 0.8;\n    }\n\n    100% {\n        transform: translate(-50%, -50%) scale(2);\n        opacity: 0;\n    }\n}\n\n.usecase-speechToText-section .empty-chat {\n    width: 90%;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    font-size: 15px;\n    flex-direction: column;\n    gap: 10px;\n    text-align: center;\n    margin: auto;\n}\n\n.usecase-speechToText-section .empty-chat .e-multiple-comment {\n    font-size: 50px;\n}\n\n.usecase-speechToText-section #transcript-content.e-chat-ui .e-message-group {\n    max-width: 95%;\n}\n\n@media only screen and (max-width: 850px) {\n\n    .usecase-speechToText-section,\n    .e-bigger .usecase-speechToText-section {\n        flex-direction: column;\n        height: 70vh;\n    }\n\n    .usecase-speechToText-section .transcript-container {\n        width: 100%;\n        height: 70vh;\n        overflow: scroll;\n    }\n\n    .usecase-speechToText-section .stt-container {\n        width: 100%;\n        height: 55%;\n    }\n}","index.html":"<!DOCTYPE html>\n<html>\n<head>\n    <title>Syncfusion React Sample</title>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\n    <meta name=\"author\" content=\"Syncfusion\" />\n    <link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\n</head>\n\n<body class=\"{{theme}}\">\n     <style>\n            .control-section\n            {\n                margin-top: 100px;\n            }\n    </style>\n    <div id='sample'>\n</body>\n</html>\n","index.js":"import { createRoot } from 'react-dom/client';\nimport './index.css';\nimport { SpeechToTextComponent } from '@syncfusion/ej2-react-inputs';\nimport * as React from 'react';\n\nimport { ChatUIComponent } from '@syncfusion/ej2-react-interactive-chat';\nimport { SampleBase } from './sample-base';\nexport class Default extends SampleBase {\n    speechToTextObj;\n    chatUIObj;\n    msgIdx = -1;\n    isIndicatorVisible = false;\n    emptyChatTemplate = () => {\n        <div className=\"empty-chat\">\n            <span className=\"e-icons e-multiple-comment\"></span>\n            No transcript available. Start speaking to generate a transcript.\n        </div>;\n    };\n    typingIndicatorTemplate = () => {\n        <div className=\"e-typing-indicator \">\n            <span className=\"e-user-text\">Transcripting</span> \n            <div className=\"e-indicator-wrapper\">\n                <span className=\"e-indicator\"></span>\n                <span className=\"e-indicator\">\n                </span><span className=\"e-indicator\">\n                </span>\n            </div>\n        </div>;\n    };\n    buttonSettings = {\n        stopIconCss: 'e-icons e-listen-icon'\n    };\n    onTranscriptChange = (args) => {\n        var existingMsg = this.chatUIObj.messages[this.msgIdx];\n        if (existingMsg) {\n            this.chatUIObj.updateMessage({ text: args.transcript }, existingMsg.id);\n            this.chatUIObj.scrollToBottom();\n        }\n        else {\n            var newMsg = { id: 'msg-' + (this.msgIdx + 1), text: args.transcript, author: { id: 'testing-user', user: 'Testing User' } };\n            this.chatUIObj.addMessage(newMsg);\n        }\n        // Show typing indicator only if itâ€™s not visible\n        if (!this.isIndicatorVisible) {\n            this.chatUIObj.typingUsers = [{ id: 'testing-user', user: 'Testing User' }];\n            this.isIndicatorVisible = true;\n        }\n        // Final transcript\n        if (!args.isInterimResult) {\n            this.msgIdx + 1;\n            this.speechToTextObj.transcript = '';\n            this.chatUIObj.typingUsers = [];\n            this.isIndicatorVisible = false;\n        }\n    };\n    // Event handler for listening start\n    onListeningStart = () => {\n        var sttElement = document.querySelector('#speechToText');\n        this.msgIdx = this.chatUIObj.messages.length;\n        sttElement.classList.add('stt-listening-state');\n        this.updateStatus('Listening... Speak now...');\n    };\n    // Event handler for listening stop\n    onListeningStop = (args) => {\n        var sttElement = document.querySelector('#speechToText');\n        sttElement.classList.remove('stt-listening-state');\n        this.chatUIObj.typingUsers = [];\n        if (args.isInteracted)\n            this.updateStatus('Click the mic button to start speaking...');\n    };\n    // Event handler for errors\n    onErrorHandler = (args) => {\n        this.updateStatus(args.errorMessage);\n        if (args.error === 'unsupported-browser') {\n            this.speechToTextObj.disabled = true;\n        }\n    };\n    // Function to updates the speech recognition status message\n    updateStatus = (status) => {\n        document.querySelector('.speech-recognition-status').innerText = status;\n    };\n    render() {\n        return (<div className=\"control-pane\">\n                <div className=\"control-section\">\n                    <div className=\"usecase-speechToText-section e-message\">\n                        <div className=\"stt-container\">\n                            <SpeechToTextComponent id=\"speechToText\" ref={(speechtotext) => { this.speechToTextObj = speechtotext; }} buttonSettings={this.buttonSettings} transcriptChanged={this.onTranscriptChange} onStart={this.onListeningStart} onStop={this.onListeningStop} onError={this.onErrorHandler} cssClass={\"usecase-stt-btn\"}/>\n                            <span className=\"speech-recognition-status\">Click the mic button to start speaking...</span>\n                        </div>\n                        <div className=\"transcript-container\">\n                            <ChatUIComponent id=\"transcript-content\" ref={(chatui) => { this.chatUIObj = chatui; }} showHeader={false} showFooter={false} timeStampFormat={\"MMM d, h:mm a\"} autoScrollToBottom={true} emptyChatTemplate={this.emptyChatTemplate} typingUsersTemplate={this.typingIndicatorTemplate}/>\n                        </div>\n                    </div>\n                </div>\n                \n            </div>);\n    }\n}\n\nconst root = createRoot(document.getElementById('sample'));\nroot.render(<Default />);","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n                this.rendereComplete();\n            });\n        }\n    }\n    export function updateSampleSection(){}\n    ","dependencies":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-react-base\":\"*\",\"@syncfusion/ej2-inputs\":\"*\",\"@syncfusion/ej2-react-inputs\":\"*\",\"@syncfusion/ej2-interactive-chat\":\"*\",\"@syncfusion/ej2-react-interactive-chat\":\"*\",\"@syncfusion/ej2-react-charts\":\"*\",\"@syncfusion/ej2/base\":\"*\",\"@syncfusion/ej2-charts'; // Import the necessary types from Syncfusion\":\"*\",\"@syncfusion/ej2-lists\":\"*\",\"@syncfusion/ej2-documenteditor\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-splitbuttons\":\"*\",\"@syncfusion/ej2-navigations\":\"*\",\"@syncfusion/ej2-react-popups\":\"*\",\"@syncfusion/ej2-pivotview\":\"*\",\"@syncfusion/ej2-react-progressbar\":\"*\",\"@syncfusion/ej2-schedule\":\"*\"}"}