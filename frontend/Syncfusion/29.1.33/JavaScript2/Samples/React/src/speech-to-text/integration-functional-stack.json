{"index.css":".integration-speechToText-section {\n    height: 550px;\n    width: 550px;\n    margin: 0 auto;\n}\n\n.integration-speechToText-section .banner-info .e-listen-icon:before {\n    font-size: 35px;\n}\n\n.integration-speechToText-section .banner-info {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    height: 330px;\n    text-align: center;\n}\n\n.integration-speechToText-section .e-footer-wrapper #assistview-sendButton {\n    width: 40px;\n    height: 40px;\n    font-size: 20px;\n    border: none;\n    background: none;\n    cursor: pointer;\n}\n\n.integration-speechToText-section .e-footer-wrapper #speechToText.visible,\n.integration-speechToText-section .e-footer-wrapper #assistview-sendButton.visible {\n    display: inline-block;\n}\n\n.integration-speechToText-section .e-footer-wrapper #speechToText,\n.integration-speechToText-section .e-footer-wrapper #assistview-sendButton {\n    display: none;\n}\n\n@media only screen and (max-width: 750px) {\n    .integration-speechToText-section {\n        width: 100%;\n    }\n}\n\n.integration-speechToText-section .e-footer-wrapper {\n    display: flex;\n    border: 1px solid #c1c1c1;\n    padding: 5px 5px 5px 10px;\n    margin: 5px 5px 0 5px;\n    border-radius: 30px;\n}\n\n.integration-speechToText-section .e-footer-wrapper .content-editor {\n    width: 100%;\n    overflow-y: auto;\n    font-size: 14px;\n    min-height: 25px;\n    max-height: 200px;\n    padding: 10px;\n    scrollbar-color: #c1c1c1 transparent;\n}\n\n.integration-speechToText-section .e-footer-wrapper .content-editor[contentEditable=true]:empty:before {\n    content: attr(placeholder)\n}\n\n.integration-speechToText-section .option-container {\n    align-self: flex-end;\n}","index.html":"<!DOCTYPE html>\n<html>\n<head>\n    <title>Syncfusion React Sample</title>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\n    <meta name=\"author\" content=\"Syncfusion\" />\n    <link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\n</head>\n\n<body class=\"{{theme}}\">\n     <style>\n            .control-section\n            {\n                margin-top: 100px;\n            }\n    </style>\n    <div id='sample'>\n</body>\n</html>\n","index.js":"import { createRoot } from 'react-dom/client';\nimport './index.css';\nimport { ButtonComponent } from '@syncfusion/ej2-react-buttons';\nimport { SpeechToTextComponent } from '@syncfusion/ej2-react-inputs';\nimport * as React from 'react';\n\nimport { AIAssistViewComponent } from '@syncfusion/ej2-react-interactive-chat';\nimport { ToastComponent } from '@syncfusion/ej2-react-notifications';\n\nimport { useEffect } from 'react';\nconst Integration = () => {\n    const aiAssistViewObj = React.useRef(null);\n    const speechToTextObj = React.useRef(null);\n    const toastObj = React.useRef(null);\n    const toolbarSettings = {\n        items: [{ iconCss: 'e-icons e-refresh', align: 'Right' }],\n        itemClicked: (args) => toolbarItemClicked(args)\n    };\n    const bannerTemplate = () => {\n        return (<div className=\"banner-info\">\n                <div className=\"e-icons e-listen-icon\"></div>\n                <h3>Speech To Text</h3>\n                <i>Click the below mic-button to convert your voice to text.</i>\n            </div>);\n    };\n    const footerTemplate = () => {\n        return (<div className=\"e-footer-wrapper\">\n                <div id=\"assistview-footer\" className=\"content-editor\" contentEditable=\"true\" placeholder=\"Click to speak or start typing...\" onInput={toggleButtons} onKeyDown={handleKeyDown}></div>\n                <div className=\"option-container\">\n                    <SpeechToTextComponent id=\"speechToText\" ref={speechToTextObj} cssClass={'e-flat'} transcriptChanged={onTranscriptChange} onStop={onListeningStop} created={onCreated} onError={onErrorHandler}/>\n                    <ButtonComponent id=\"assistview-sendButton\" className=\"e-assist-send e-icons\" onClick={sendIconClicked}/>\n                </div>\n            </div>);\n    };\n    const onPromptRequest = () => {\n        const defaultAiassist = aiAssistViewObj.current;\n        setTimeout(() => {\n            defaultAiassist.addPromptResponse('For real-time prompt processing, connect the AIAssistView component to your preferred AI service.');\n            toggleButtons();\n        }, 2000);\n    };\n    const toolbarItemClicked = (args) => {\n        if (args.item.iconCss === 'e-icons e-refresh') {\n            aiAssistViewObj.current.prompts = [];\n        }\n    };\n    const sendIconClicked = () => {\n        const assistviewFooter = document.getElementById('assistview-footer');\n        aiAssistViewObj.current.executePrompt(assistviewFooter.innerText);\n        assistviewFooter.innerText = \"\";\n    };\n    const onTranscriptChange = (args) => {\n        const assistviewFooter = document.getElementById('assistview-footer');\n        assistviewFooter.innerText = args.transcript;\n    };\n    const onListeningStop = () => {\n        toggleButtons();\n    };\n    const onCreated = () => {\n        toggleButtons();\n    };\n    const toggleButtons = () => {\n        const assistviewFooter = document.querySelector('#assistview-footer');\n        const sendButton = document.querySelector('#assistview-sendButton');\n        const speechButton = document.querySelector('#speechToText');\n        const hasText = assistviewFooter.innerText.trim() !== '';\n        sendButton.classList.toggle('visible', hasText);\n        speechButton.classList.toggle('visible', !hasText);\n        if (!hasText) {\n            if ((assistviewFooter.innerHTML === '<br>' || assistviewFooter.innerHTML.trim() === '')) {\n                assistviewFooter.innerHTML = '';\n            }\n        }\n    };\n    const handleKeyDown = (event) => {\n        if (event.key === 'Enter' && !event.shiftKey) {\n            sendIconClicked();\n            event.preventDefault(); // Prevent the default behavior of the Enter key\n        }\n    };\n    const onErrorHandler = (args) => {\n        toastObj.current.content = args.errorMessage;\n        if (args.error === 'unsupported-browser') {\n            speechToTextObj.current.disabled = true;\n            toastObj.current.show({ timeOut: 0 });\n        }\n        else {\n            toastObj.current.show({ timeOut: 5000 });\n        }\n    };\n    return (<div className=\"control-pane\">\n            <div className=\"control-section integration-control-section\">\n                <div className='control-wrapper'>\n                    <div className=\"integration-speechToText-section\">\n                        <ToastComponent id=\"stt-toast\" ref={toastObj} cssClass={\"e-toast-danger\"} target={'.integration-control-section'} position={{ X: 'Right' }}/>\n                        <AIAssistViewComponent id=\"aiAssistView\" ref={aiAssistViewObj} promptRequest={onPromptRequest} bannerTemplate={bannerTemplate} footerTemplate={footerTemplate} toolbarSettings={toolbarSettings}></AIAssistViewComponent>\n                    </div>\n                </div>\n            </div>\n        </div>);\n};\nexport default Integration;\n\nconst root = createRoot(document.getElementById('sample'));\nroot.render(<Integration />);","dependencies":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-react-base\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-react-buttons\":\"*\",\"@syncfusion/ej2-inputs\":\"*\",\"@syncfusion/ej2-react-inputs\":\"*\",\"@syncfusion/ej2-interactive-chat\":\"*\",\"@syncfusion/ej2-react-interactive-chat\":\"*\",\"@syncfusion/ej2-notifications\":\"*\",\"@syncfusion/ej2-react-notifications\":\"*\",\"@syncfusion/ej2-react-charts\":\"*\",\"@syncfusion/ej2/base\":\"*\",\"@syncfusion/ej2-charts'; // Import the necessary types from Syncfusion\":\"*\",\"@syncfusion/ej2-lists\":\"*\",\"@syncfusion/ej2-documenteditor\":\"*\",\"@syncfusion/ej2-splitbuttons\":\"*\",\"@syncfusion/ej2-navigations\":\"*\",\"@syncfusion/ej2-react-popups\":\"*\",\"@syncfusion/ej2-pivotview\":\"*\",\"@syncfusion/ej2-react-progressbar\":\"*\",\"@syncfusion/ej2-schedule\":\"*\"}"}