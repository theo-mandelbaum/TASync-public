{"index.css":".default-speechToText-section,\n.default-speechToText-section .output-container {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n}\n\n.default-speechToText-section {\n    gap: 50px;\n    margin: 50px auto;\n}\n\n.default-speechToText-section .output-container {\n    width: 75%;\n    gap: 10px;\n}\n\n.default-speechToText-section .output-container h4 {\n    margin: 0;\n    align-self: baseline;\n}\n\n.default-speechToText-section .speech-recognition-status {\n    font-size: 12px;\n}\n\n.default-speechToText .property-panel-content td {\n    padding: 10px 0px;\n    width: 50%;\n}\n\n.default-speechToText-section .output-options {\n    display: flex;\n    gap: 5px;\n}\n\n.default-speechToText-section .speechToText-container {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    gap: 15px;\n}\n\n#transcript-copy-button:disabled {\n    opacity: 0.5;\n    cursor: not-allowed;\n}\n\n@media only screen and (max-width: 750px) {\n    .default-speechToText-section .output-container {\n        width: 100%;\n    }\n\n    .default-speechToText-section .output-options {\n        width: 100%;\n        display: flex;\n        flex-direction: column;\n        gap: 10px;\n    }\n}","index.html":"<!DOCTYPE html>\n<html>\n<head>\n    <title>Syncfusion React Sample</title>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\n    <meta name=\"author\" content=\"Syncfusion\" />\n    <link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\n</head>\n\n<body class=\"{{theme}}\">\n     <style>\n            .control-section\n            {\n                margin-top: 100px;\n            }\n    </style>\n    <div id='sample'>\n</body>\n</html>\n","index.js":"import { createRoot } from 'react-dom/client';\nimport './index.css';\nimport { ButtonComponent } from '@syncfusion/ej2-react-buttons';\nimport { SpeechToTextComponent } from '@syncfusion/ej2-react-inputs';\nimport * as React from 'react';\n\nimport { SampleBase } from './sample-base';\nimport { AIAssistViewComponent } from '@syncfusion/ej2-react-interactive-chat';\nimport { ToastComponent } from '@syncfusion/ej2-react-notifications';\nexport class Default extends SampleBase {\n    aiAssistViewObj;\n    speechToTextObj;\n    toastObj;\n    toolbarSettings = {\n        items: [{ iconCss: 'e-icons e-refresh', align: 'Right' }],\n        itemClicked: (args) => this.toolbarItemClicked(args)\n    };\n    bannerTemplate = () => {\n        return (<div className=\"banner-info\">\n            <div className=\"e-icons e-listen-icon\"></div>\n            <h3>Speech To Text</h3>\n            <i>Click the below mic-button to convert your voice to text.</i>\n        </div>);\n    };\n    footerTemplate = () => {\n        return (<div className=\"e-footer-wrapper\">\n                <div id=\"assistview-footer\" className=\"content-editor\" contentEditable=\"true\" placeholder=\"Click to speak or start typing...\" onInput={this.toggleButtons} onKeyDown={this.handleKeyDown}></div>\n                <div className=\"option-container\">\n                    <SpeechToTextComponent id=\"speechToText\" ref={(speechtotext) => { this.speechToTextObj = speechtotext; }} transcriptChanged={this.onTranscriptChange} onStop={this.onListeningStop} created={this.onCreated} onError={this.onErrorHandler}/>\n                    <ButtonComponent id=\"assistview-sendButton\" className=\"e-assist-send e-icons\" onClick={this.sendIconClicked}/>\n                </div>\n            </div>);\n    };\n    onPromptRequest = () => {\n        const defaultAiassist = this.aiAssistViewObj;\n        setTimeout(() => {\n            defaultAiassist.addPromptResponse('For real-time prompt processing, connect the AIAssistView component to your preferred AI service.');\n            this.toggleButtons();\n        }, 2000);\n    };\n    toolbarItemClicked = (args) => {\n        if (args.item.iconCss === 'e-icons e-refresh') {\n            this.aiAssistViewObj.prompts = [];\n        }\n    };\n    sendIconClicked = () => {\n        const assistviewFooter = document.getElementById('assistview-footer');\n        this.aiAssistViewObj.executePrompt(assistviewFooter.innerText);\n        assistviewFooter.innerText = \"\";\n    };\n    onTranscriptChange = (args) => {\n        const assistviewFooter = document.getElementById('assistview-footer');\n        assistviewFooter.innerText = args.transcript;\n    };\n    onListeningStop = () => {\n        this.toggleButtons();\n    };\n    onCreated = () => {\n        this.toggleButtons();\n    };\n    toggleButtons = () => {\n        const assistviewFooter = document.querySelector('#assistview-footer');\n        const sendButton = document.querySelector('#assistview-sendButton');\n        const speechButton = document.querySelector('#speech-to-text');\n        const hasText = assistviewFooter.innerText.trim() !== '';\n        sendButton.classList.toggle('visible', hasText);\n        speechButton.classList.toggle('visible', !hasText);\n        if (!hasText) {\n            if ((assistviewFooter.innerHTML === '<br>' || assistviewFooter.innerHTML.trim() === '')) {\n                assistviewFooter.innerHTML = '';\n            }\n        }\n    };\n    handleKeyDown = (e) => {\n        if (e.key === 'Enter' && !e.shiftKey) {\n            this.sendIconClicked();\n            e.preventDefault();\n        }\n    };\n    onErrorHandler = (args) => {\n        this.toastObj.content = args.errorMessage;\n        if (args.error === 'unsupported-browser') {\n            this.speechToTextObj.disabled = true;\n            this.toastObj.show({ timeOut: 0 });\n        }\n        else {\n            this.toastObj.show({ timeOut: 5000 });\n        }\n    };\n    render() {\n        return (<div className=\"control-pane\">\n                <div className=\"control-section integration-control-section\">\n                    <div className='control-wrapper'>\n                        <div className=\"integration-speechToText-section\">\n                            <ToastComponent id=\"stt-toast\" ref={(toast) => { this.toastObj = toast; }} cssClass={\"e-toast-danger\"} target={'.integration-control-section'} position={{ X: 'Right' }}/>\n                            <AIAssistViewComponent id=\"aiAssistView\" ref={(assistview) => { this.aiAssistViewObj = assistview; }} promptRequest={this.onPromptRequest} bannerTemplate={this.bannerTemplate} footerTemplate={this.footerTemplate} toolbarSettings={this.toolbarSettings}></AIAssistViewComponent>\n                        </div>\n                    </div>\n                </div>\n            </div>);\n    }\n}\n\nconst root = createRoot(document.getElementById('sample'));\nroot.render(<Default />);","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n                this.rendereComplete();\n            });\n        }\n    }\n    export function updateSampleSection(){}\n    ","dependencies":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-react-base\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-react-buttons\":\"*\",\"@syncfusion/ej2-inputs\":\"*\",\"@syncfusion/ej2-react-inputs\":\"*\",\"@syncfusion/ej2-interactive-chat\":\"*\",\"@syncfusion/ej2-react-interactive-chat\":\"*\",\"@syncfusion/ej2-notifications\":\"*\",\"@syncfusion/ej2-react-notifications\":\"*\",\"@syncfusion/ej2-react-charts\":\"*\",\"@syncfusion/ej2/base\":\"*\",\"@syncfusion/ej2-charts'; // Import the necessary types from Syncfusion\":\"*\",\"@syncfusion/ej2-lists\":\"*\",\"@syncfusion/ej2-documenteditor\":\"*\",\"@syncfusion/ej2-splitbuttons\":\"*\",\"@syncfusion/ej2-navigations\":\"*\",\"@syncfusion/ej2-react-popups\":\"*\",\"@syncfusion/ej2-pivotview\":\"*\",\"@syncfusion/ej2-react-progressbar\":\"*\",\"@syncfusion/ej2-schedule\":\"*\"}"}