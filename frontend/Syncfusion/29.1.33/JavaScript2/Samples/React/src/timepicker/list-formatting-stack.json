{"index.css":".timepicker-control-section {\n    max-width: 300px;\n    margin: 0 auto;\n    padding: 2% 0;\n}\n\n.control-pane.default .control-section\n{\n    height: 100%;\n}\n\n.e-bigger .control-pane.default .control-section {\n    margin-top: 60px;\n}\n\n/*list formatting samples styles*/\n\n.e-timepicker.e-popup li span {\n    color: #b7b1b1;\n}\n\n.e-custom-style.e-timepicker.e-popup li.e-disabled span {\n    height: 25px;\n    width: 25px;\n    font-size: 15px;\n}\n\n/*list formatting samples styles*/\n\n.e-custom-style.e-timepicker.e-popup li.e-disabled span {\n    color: #b7b1b1;\n}\n\n.e-custom-style.e-timepicker.e-popup li span {\n    color: #727070;\n}\n\nbody.bootstrap4 .e-custom-style.e-timepicker.e-popup li span {\n    color: #6c757d;\n}\n\nbody.bootstrap4 .e-custom-style.e-timepicker.e-popup li.e-disabled span {\n    color: #adb5bd;\n}\n\n\n.highcontrast .e-custom-style.e-timepicker.e-popup li.e-hover span:hover,\n.highcontrast .e-custom-style.e-timepicker.e-popup li.e-active.e-hover span {\n    color: #fff;\n}\nbody.bootstrap4 .e-custom-style.e-timepicker.e-popup li.e-hover span:hover,\nbody.bootstrap4 .e-custom-style.e-timepicker.e-popup li.e-active.e-hover span {\n    color: #6c757d;\n}\n\n.highcontrast .e-custom-style.e-timepicker.e-popup li.e-active span {\n    color: #000;\n}\n\nbody.bootstrap4 .e-custom-style.e-timepicker.e-popup li.e-active span {\n    color: #fff;\n}\n\n/* end of custom generated icons styles */","index.html":"<!DOCTYPE html>\n<html>\n<head>\n    <title>Syncfusion React Sample</title>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\n    <meta name=\"author\" content=\"Syncfusion\" />\n    <link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\n</head>\n\n<body class=\"{{theme}}\">\n     <style>\n            .control-section\n            {\n                margin-top: 100px;\n            }\n    </style>\n    <div id='sample'>\n</body>\n</html>\n","index.js":"import { createRoot } from 'react-dom/client';\nimport './index.css';\nimport * as React from 'react';\nimport { TimePickerComponent } from '@syncfusion/ej2-react-calendars';\nimport { SampleBase } from './sample-base';\n\nexport class Formatting extends SampleBase {\n    //initial time variable declaration\n    startTime;\n    value = new Date();\n    timeObj;\n    // scrollTo value will be assigned only if the timepicker value is not null or undefined and is a valid value.\n    onOpen(args) {\n        if (this.timeObj.value && !isNaN(+this.timeObj.value))\n            //assign the current value as the scrollTo value\n            this.timeObj.scrollTo = this.timeObj.value;\n    }\n    //item render event handler\n    itemRenderHandler(args) {\n        // inner element declaration for text\n        let span = document.createElement('span');\n        if (args.value.getHours() === 0 && args.value.getMinutes() === 0 && args.value.getSeconds() === 0) {\n            //assign the initial value to the variable\n            this.startTime = args.value;\n        }\n        //get the minutes details\n        let minutes = (+args.value - +this.startTime) / 60000;\n        //get the hours details\n        let hours = parseInt('' + (minutes / 60), 10);\n        let mins = (minutes % 60) / 6;\n        //displayed text formation for each LI element.\n        let minText;\n        if (minutes === 0 || minutes === 30) {\n            minText = minutes + ' mins';\n        }\n        else {\n            minText = (mins > 0) ? ('.' + mins) : '';\n        }\n        span.innerHTML = ' (' + ((hours > 0) ? (hours + minText + ' hrs') : ('' + ' mins')) + ')';\n        //disable the specific time from the selection\n        if ((minutes / 60) % 3 === 0) {\n            //disable the time values by addeding the e-disabled class.\n            args.element.classList.add('e-disabled');\n        }\n        //append the custom SPAN element into LI element\n        args.element.appendChild(span);\n    }\n    render() {\n        return (<div className='control-pane default'>\n                <div className='control-section'>\n                    <div className='timepicker-control-section'>\n                        <TimePickerComponent cssClass='e-custom-style' value={this.value} ref={Timepicker => this.timeObj = Timepicker} open={this.onOpen.bind(this)} itemRender={this.itemRenderHandler.bind(this)}></TimePickerComponent>\n                    </div>\n                </div>\n            </div>);\n    }\n}\n\nconst root = createRoot(document.getElementById('sample'));\nroot.render(<Formatting />);","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n                this.rendereComplete();\n            });\n        }\n    }\n    export function updateSampleSection(){}\n    ","dependencies":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-react-base\":\"*\",\"@syncfusion/ej2-calendars\":\"*\",\"@syncfusion/ej2-react-calendars\":\"*\",\"@syncfusion/ej2-react-charts\":\"*\",\"@syncfusion/ej2/base\":\"*\",\"@syncfusion/ej2-charts'; // Import the necessary types from Syncfusion\":\"*\",\"@syncfusion/ej2-lists\":\"*\",\"@syncfusion/ej2-documenteditor\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-splitbuttons\":\"*\",\"@syncfusion/ej2-navigations\":\"*\",\"@syncfusion/ej2-react-popups\":\"*\",\"@syncfusion/ej2-pivotview\":\"*\",\"@syncfusion/ej2-react-progressbar\":\"*\",\"@syncfusion/ej2-schedule\":\"*\",\"@syncfusion/ej2-data\":\"*\"}"}