{"index.css":"#checkboxgroup #multigroup {\n    margin: 0 auto;\n    width: 300px !important;\n    padding-top: 15px;\n}\n\n.e-specific.e-multiselect.e-input-group .e-ddl-icon::before {\n    transform: translateY(1px);\n}\n\n.e-bigger .e-specific.e-multiselect.e-input-group .e-ddl-icon::before {\n    transform: translateY(2px);\n}\n.control-styles .h4 {\n    font-size: 16px;\n    margin: 0 0 10px;\n    font-weight: bold;\n}\n","index.html":"<!DOCTYPE html>\n<html>\n<head>\n    <title>Syncfusion React Sample</title>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\n    <meta name=\"author\" content=\"Syncfusion\" />\n    <link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\n</head>\n\n<body class=\"{{theme}}\">\n     <style>\n            .control-section\n            {\n                margin-top: 100px;\n            }\n    </style>\n    <div id='sample'>\n</body>\n</html>\n","index.js":"import { createRoot } from 'react-dom/client';\nimport './index.css';\nimport * as React from 'react';\nimport { MultiSelectComponent, CheckBoxSelection, Inject } from '@syncfusion/ej2-react-dropdowns';\nimport { SampleBase } from './sample-base';\n\nexport class CheckBoxGrouping extends SampleBase {\n    //define the data with category\n    vegetables = [\n        { \"Vegetable\": \"Cabbage\", \"Category\": \"Leafy and Salad\", \"Id\": \"item1\" },\n        { \"Vegetable\": \"Chickpea\", \"Category\": \"Beans\", \"Id\": \"item2\" },\n        { \"Vegetable\": \"Garlic\", \"Category\": \"Bulb and Stem\", \"Id\": \"item3\" },\n        { \"Vegetable\": \"Green bean\", \"Category\": \"Beans\", \"Id\": \"item4\" },\n        { \"Vegetable\": \"Horse gram\", \"Category\": \"Beans\", \"Id\": \"item5\" },\n        { \"Vegetable\": \"Nopal\", \"Category\": \"Bulb and Stem\", \"Id\": \"item6\" },\n        { \"Vegetable\": \"Onion\", \"Category\": \"Bulb and Stem\", \"Id\": \"item7\" },\n        { \"Vegetable\": \"Pumpkins\", \"Category\": \"Leafy and Salad\", \"Id\": \"item8\" },\n        { \"Vegetable\": \"Spinach\", \"Category\": \"Leafy and Salad\", \"Id\": \"item9\" },\n        { \"Vegetable\": \"Wheat grass\", \"Category\": \"Leafy and Salad\", \"Id\": \"item10\" },\n        { \"Vegetable\": \"Yarrow\", \"Category\": \"Leafy and Salad\", \"Id\": \"item11\" }\n    ];\n    mulObj;\n    // map the groupBy field with category column\n    checkFields = { groupBy: 'Category', text: 'Vegetable', value: 'Id' };\n    // set the placeholder to the MultiSelect input\n    checkWaterMark = 'Select vegetables';\n    // set enableGroupCheckBox value to the Multiselect input\n    enableGroupCheckBox = true;\n    // set mode value to the multiselect input\n    mode = 'CheckBox';\n    // set the placeholder to the filter bar\n    filterBarPlaceholder = 'Search Vegetables';\n    render() {\n        return (<div id=\"checkboxgroup\" className='control-pane'>\n        <div className='control-section col-lg-12'>\n          <div id=\"multigroup\" className=\"control-styles\">\n            <h4>Grouping with CheckBox</h4>\n            <MultiSelectComponent id=\"checkbox\" cssClass=\"e-specific\" dataSource={this.vegetables} filterBarPlaceholder={this.filterBarPlaceholder} fields={this.checkFields} placeholder={this.checkWaterMark} mode={this.mode} showSelectAll={true} enableGroupCheckBox={this.enableGroupCheckBox} showDropDownIcon={true} enableSelectionOrder={false}>\n              <Inject services={[CheckBoxSelection]}/>\n            </MultiSelectComponent>\n          </div>\n        </div>\n\n      </div>);\n    }\n}\n\nconst root = createRoot(document.getElementById('sample'));\nroot.render(<CheckBoxGrouping />);","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n                this.rendereComplete();\n            });\n        }\n    }\n    export function updateSampleSection(){}\n    ","dependencies":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-react-base\":\"*\",\"@syncfusion/ej2-dropdowns\":\"*\",\"@syncfusion/ej2-react-dropdowns\":\"*\",\"@syncfusion/ej2-react-charts\":\"*\",\"@syncfusion/ej2/base\":\"*\",\"@syncfusion/ej2-charts'; // Import the necessary types from Syncfusion\":\"*\",\"@syncfusion/ej2-lists\":\"*\",\"@syncfusion/ej2-documenteditor\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-splitbuttons\":\"*\",\"@syncfusion/ej2-navigations\":\"*\",\"@syncfusion/ej2-react-popups\":\"*\"}"}