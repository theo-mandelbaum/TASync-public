{"index.css":"/* css */","index.html":"<!DOCTYPE html>\n<html>\n<head>\n    <title>Syncfusion React Sample</title>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\n    <meta name=\"author\" content=\"Syncfusion\" />\n    <link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\n</head>\n\n<body class=\"{{theme}}\">\n     <style>\n            .control-section\n            {\n                margin-top: 100px;\n            }\n    </style>\n    <div id='sample'>\n</body>\n</html>\n","index.js":"import { createRoot } from 'react-dom/client';\nimport './index.css';\nimport * as React from 'react';\nimport { GridComponent, ColumnsDirective, ColumnDirective, Page, Sort, Inject, Filter } from '@syncfusion/ej2-react-grids';\nimport { DataManager, ODataV4Adaptor } from '@syncfusion/ej2-data';\nimport { DropDownListComponent } from '@syncfusion/ej2-react-dropdowns';\nimport { SampleBase } from './sample-base';\nexport class LoadingAnimation extends SampleBase {\n    data = new DataManager({ url: 'https://services.odata.org/V4/Northwind/Northwind.svc/Orders', adaptor: new ODataV4Adaptor });\n    gridInstance;\n    indicatortypes = [\n        { id: 'Shimmer', name: 'Shimmer' },\n        { id: 'Spinner', name: 'Spinner' }\n    ];\n    fields = { text: 'name', value: 'id' };\n    indicatorDropDown;\n    indicatorChange(e) {\n        if (this.indicatorDropDown.value === 'Shimmer') {\n            this.gridInstance.loadingIndicator.indicatorType = 'Shimmer';\n            this.gridInstance.refresh();\n        }\n        else {\n            this.gridInstance.loadingIndicator.indicatorType = 'Spinner';\n            this.gridInstance.refresh();\n        }\n    }\n    ;\n    render() {\n        return (<div className='control-pane'>\n                <div className='control-section'>\n                <div style={{ paddingBottom: '20px' }}>\n                <div style={{ display: 'inline-block', paddingRight: '10px' }}>\n                  <div style={{ display: 'inline-block', paddingRight: '10px' }}>\n                    <span>\n                     Indicator Type\n                        </span>\n                  </div>\n                  <div style={{ display: 'inline-block', paddingRight: '10px' }}>\n                    <DropDownListComponent dataSource={this.indicatortypes} value=\"Shimmer\" change={this.indicatorChange.bind(this)} fields={this.fields} ref={(indicatorDropDown) => { this.indicatorDropDown = indicatorDropDown; }}/>\n                  </div>\n                </div>\n              </div>\n                    <GridComponent id=\"Grid\" dataSource={this.data} ref={grid => this.gridInstance = grid} allowPaging={true} pageSettings={{ pageCount: 3 }} loadingIndicator={{ indicatorType: 'Shimmer' }} allowFiltering={true} allowSorting={true}>\n                        <ColumnsDirective>\n                            <ColumnDirective field='OrderID' headerText='Order ID' width='130' textAlign='Right'></ColumnDirective>\n                            <ColumnDirective field='CustomerID' headerText='Customer ID' width='150'></ColumnDirective>\n                            <ColumnDirective field='EmployeeID' headerText='Employee ID' width='100' textAlign='Right'/>\n                            <ColumnDirective field='Freight' headerText='Freight' width='100' format='C2' textAlign='Right'/>\n                            <ColumnDirective field='ShipCountry' headerText='Ship Country' width='150'></ColumnDirective>\n                        </ColumnsDirective>\n                        <Inject services={[Page, Sort, Filter]}/>\n                    </GridComponent>\n                </div>\n            </div>);\n    }\n}\n\nconst root = createRoot(document.getElementById('sample'));\nroot.render(<LoadingAnimation />);","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n                this.rendereComplete();\n            });\n        }\n    }\n    export function updateSampleSection(){}\n    ","dependencies":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-react-base\":\"*\",\"@syncfusion/ej2-grids\":\"*\",\"@syncfusion/ej2-react-grids\":\"*\",\"@syncfusion/ej2-data\":\"*\",\"@syncfusion/ej2-dropdowns\":\"*\",\"@syncfusion/ej2-react-dropdowns\":\"*\",\"@syncfusion/ej2-react-charts\":\"*\",\"@syncfusion/ej2/base\":\"*\",\"@syncfusion/ej2-charts'; // Import the necessary types from Syncfusion\":\"*\",\"@syncfusion/ej2-lists\":\"*\",\"@syncfusion/ej2-documenteditor\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-splitbuttons\":\"*\",\"@syncfusion/ej2-navigations\":\"*\",\"@syncfusion/ej2-react-popups\":\"*\"}"}