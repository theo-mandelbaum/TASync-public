{"index.css":".fabric .empimg{\n    background-color:#0078d6; \n}\n.material .empimg{\n    background-color:#e3165b; \n}\n.highcontrast .empimg{\n    background-color:#ffd939; \n}\n_:-ms-fullscreen, :root .highcontrast .e-userimg.sf-icon-Male::before,\n_:-ms-fullscreen, :root .highcontrast .e-userimg.sf-icon-FeMale::before{\n    color: black;\n}\n.highcontrast .e-userimg.sf-icon-Male::before,\n.highcontrast .e-userimg.sf-icon-FeMale::before{       \n    color: black;\n}\n.bootstrap .empimg{\n    background-color:#0078d6; \n}\n\n.bootstrap4 .empimg,\n.bootstrap5 .empimg {\n    background-color:#0078d6; \n}\n\n.tailwind .empimg{\n    background-color:#4f46e5;  \n}\n\n.fluent .empimg{\n    background-color:#106EBE;\n}\n.tailwind3 .empimg,\n.tailwind3-dark .empimg{\n    background-color:rgba(79, 70, 229);\n}\n\n#Emptext{\ntop: -14px;\nleft: 41px;\nposition: relative;\n}\n.empimg{\nheight: 27px;\nwidth: 29px;\nborder-radius: 14px;\nbackground-color:#e3165b;\n}\n#overviewgrid.e-rtl #Emptext{\n    top: -14px;\n    left: -41px;\n    position: relative;\n}\n\n.e-userimg.sf-icon-Male::before,\n.e-userimg.sf-icon-FeMale::before{\n    font-size: 13px;\n}\n.e-userimg.sf-icon-Male, .e-userimg.sf-icon-FeMale {  \n    margin: 0px 8px;\n    line-height: 26px;\n    color: white; \n    font-size: 13px;\n}\n\n.e-userimg.sf-icon-Male::before{\n    content: '\\e700';      \n}\n.e-userimg.sf-icon-FeMale::before{\n    content: '\\e701';      \n}\n\n\n.highcontrast #overviewgrid td.e-rowcell.e-selectionbackground.e-active,\n.fluent2-highcontrast #overviewgrid td.e-rowcell.e-selectionbackground.e-active {\n    background-color: transparent;\n    color: white;\n}\n\n.e-bigger #overviewgrid .statustxt{\n    position: relative;\n}\n\n#overviewgrid td.e-rowcell.e-selectionbackground.e-active {\n    background-color: transparent;\n}\n\n.Mapimage .e-image {\n    height: 13px;\n    width: 14px;\n}\n\ntd.e-rowcell .statustxt.e-activecolor {\n    color: #00cc00;\n    position: relative;\n    top: 9px;\n}\n\ntd.e-rowcell .statustxt.e-inactivecolor {\n    color: #e60000;\n    position: relative;\n    top: 9px;\n}\n\n.bootstrap5 td.e-rowcell .statustxt.e-inactivecolor,\n.bootstrap5 td.e-rowcell .statustxt.e-activecolor {\n  top: 8px;\n}\n\n.bootstrap5 .e-checkboxfiltertext .statustemp .statustxt.e-activecolor,\n.bootstrap5 .e-checkboxfiltertext .statustemp .statustxt.e-inactivecolor {\n  position: relative;\n  top: 1.5px;\n}\n\n.e-bigger.bootstrap5 .e-checkboxfiltertext .statustemp .statustxt.e-activecolor,\n.e-bigger.bootstrap5 .e-checkboxfiltertext .statustemp .statustxt.e-inactivecolor {\n  top: -0.5px;\n}\n\n.bootstrap5 .e-checkboxfiltertext #Trusttext {\n  margin-left: -4px;\n}\n\n.statustemp.e-inactivecolor {\n    background-color: #ffd7cc;\n    width: 64px;\n}\n\n.statustemp.e-activecolor {\n    background-color: #ccffcc;\n    width: 57px;\n}\n\n.statustxt.e-activecolor {\n    color: #00cc00;\n}\n\n.statustxt.e-inactivecolor {\n    color: #e60000;\n}\n\n.statustemp {\n    position: relative;\n    height: 19px;\n    border-radius: 5px;\n    text-align: center\n}\n\n.highcontrast #msg {\n    color: #FFFFFF\n}\n\n#msg {\n    font-family: \"Segoe UI\", \"GeezaPro\", \"DejaVu Serif\", sans-serif;\n    font-size: 14px;\n    font-weight: 400;\n    opacity: 0.95;\n    color: #333;\n    float: right;\n    margin-top: 3px;\n}\n\n.fabric-dark #msg, .bootstrap-dark #msg, .tailwind-dark #msg, .bootstrap5-dark #msg, .material-dark #msg, .material3-dark #msg, .fluent-dark #msg, .fluent2-dark #msg, .fluent2-highcontrast #msg {\n    color: #ffffff !important;\n}\n\n@media only screen and (max-width: 370px) {\n    #msg {           \n        float: left;\n        margin-top: 3px;\n    }\n    #overviewgrid{\n        margin-top:36px;\n    }\n}\n\n#samplecontainer {\n    padding-top: 5px;\n}\n\n#myProgress {\n    position: relative;\n    height: 18px;\n    width: 10em;\n    text-align: left;\n    background-color: white;\n  }\n  .highcontrast #overviewgrid #myProgress{\n    background-color: black;\n  }\n  \n  #myBar {\n    position: absolute;\n    width: 10%;\n    height: 100%;\n    background-color: #00b300;\n  }\n  #myBar.progressdisable {\n    background-color: #df2222;\n  }\n  #pbarlabel {\n    position: relative;\n    left:10px;\n    line-height: 18px;\n    font-size: 11px;\n    color: white;\n  }\n  .custom-rating.e-rating-container .e-rating-item-container ,\n  .e-bigger .custom-rating.e-rating-container .e-rating-item-container .e-rating-icon,\n  .e-bigger.custom-rating.e-rating-container .e-rating-item-container .e-rating-icon {\n      font-size: 11px;\n  }\n  .custom-rating.e-rating-container .e-rating-item-container .e-rating-icon {\n      -webkit-text-fill-color: lightgrey;\n      -webkit-text-stroke: 1px lightgrey;\n   }\n\n   .custom-rating.e-rating-container .e-rating-item-container.e-rating-selected .e-rating-icon {\n      background: linear-gradient(to right, #ffa600 var(--rating-value), #ffa600 var(--rating-value));\n      -webkit-background-clip: text;\n      -webkit-text-fill-color: transparent;\n      -webkit-text-stroke: 1px #ffa600;\n   }\n\n   @-moz-document url-prefix() {     \n    #overviewgrid.e-grid.e-grid-min-height .e-rowcell {       \n        line-height: 0!important;\n  } }\n  @-moz-document url-prefix() {    \n    #overviewgrid.e-grid.e-grid-min-height .e-rowcell {         \n        line-height: 0!important;\n  } }\n","index.html":"<!DOCTYPE html>\n<html>\n<head>\n    <title>Syncfusion React Sample</title>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\n    <meta name=\"author\" content=\"Syncfusion\" />\n    <link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\n</head>\n\n<body class=\"{{theme}}\">\n     <style>\n            .control-section\n            {\n                margin-top: 100px;\n            }\n    </style>\n    <div id='sample'>\n</body>\n</html>\n","index.js":"import { createRoot } from 'react-dom/client';\nimport './index.css';\nimport * as React from 'react';\nimport { closest, isNullOrUndefined } from '@syncfusion/ej2-base';\nimport { GridComponent, ColumnsDirective, ColumnDirective, Filter, Inject, VirtualScroll, Sort } from '@syncfusion/ej2-react-grids';\nimport { DropDownListComponent } from '@syncfusion/ej2-react-dropdowns';\nimport { RatingComponent } from '@syncfusion/ej2-react-inputs';\nimport { SampleBase } from './sample-base';\nimport { Query, DataManager, UrlAdaptor } from '@syncfusion/ej2-data';\n\nfunction statusTemplate(props) {\n    return (<div>{props.Status === \"Active\" ?\n            <div id=\"status\" className=\"statustemp e-activecolor\">\n        <span className=\"statustxt e-activecolor\">{props.Status}</span>\n      </div> :\n            <div id=\"status\" className=\"statustemp e-inactivecolor\">\n        <span className=\"statustxt e-inactivecolor\">{props.Status}</span>\n      </div>}</div>);\n}\nfunction ratingTemplate(props) {\n    return (<div><RatingComponent value={props.Rating} cssClass={'custom-rating'} readOnly={true}/></div>);\n}\nfunction progessTemplate(props) {\n    let percentage = props[props.column.field];\n    if (percentage <= 20) {\n        percentage = percentage + 30;\n    }\n    return (<div id=\"myProgress\" className=\"pbar\">\n    {props.Status === \"Inactive\" ?\n            <div id=\"myBar\" className=\"bar progressdisable\" style={{ width: percentage + \"%\" }}>\n      <div id=\"pbarlabel\" className=\"barlabel\">{percentage + \"%\"}</div>\n    </div> :\n            <div id=\"myBar\" className=\"bar\" style={{ width: percentage + \"%\" }}>\n      <div id=\"pbarlabel\" className=\"barlabel\">{percentage + \"%\"}</div>\n    </div>}\n    </div>);\n}\nlet loc = { width: '31px', height: '24px' };\nfunction trustTemplate(props) {\n    var Trustworthiness = props.Trustworthiness == \"Sufficient\" ? 'https://ej2.syncfusion.com/react/demos/src/grid/images/Sufficient.png' : props.Trustworthiness == \"Insufficient\" ? 'https://ej2.syncfusion.com/react/demos/src/grid/images/Insufficient.png' : 'https://ej2.syncfusion.com/react/demos/src/grid/images/Perfect.png';\n    return (<div> <img style={loc} src={Trustworthiness} alt=\"\"/>\n  <span id=\"Trusttext\">{props.Trustworthiness}</span></div>);\n}\nfunction empTemplate(props) {\n    return (<div>\n    {props.EmployeeImg === 'usermale' ?\n            <div className=\"empimg\">\n          <span className=\"e-userimg sf-icon-Male\"/>\n        </div> :\n            <div className=\"empimg\">\n          <span className=\"e-userimg sf-icon-FeMale\"/>\n        </div>}\n    <span id=\"Emptext\">{props.Employees}</span>\n  </div>);\n}\nfunction coltemplate(props) {\n    return (<div className=\"Mapimage\">\n  <img src=\"https://ej2.syncfusion.com/react/demos/src/grid/images/Map.png\" className=\"e-image\" alt=\"\"/> <span>  </span> \n  <span id=\"locationtext\">{props.Location}</span>\n    </div>);\n}\nfunction trustdetails(props) {\n    if (props.Trustworthiness === \"Select All\") {\n        return (<span></span>);\n    }\n    let loc = { width: '31px', height: '24px' };\n    let Trustworthiness = props.Trustworthiness == \"Sufficient\" ? 'https://ej2.syncfusion.com/react/demos/src/grid/images/Sufficient.png' : props.Trustworthiness == \"Insufficient\" ? 'https://ej2.syncfusion.com/react/demos/src/grid/images/Insufficient.png' : 'https://ej2.syncfusion.com/react/demos/src/grid/images/Perfect.png';\n    return (<div><img style={loc} src={Trustworthiness} alt=\"\"/> <span id=\"Trusttext\">{props.Trustworthiness}</span></div>);\n}\nfunction ratingDetails(props) {\n    return (<RatingComponent value={props.Rating} cssClass={'custom-rating'} readOnly={true}/>);\n}\nfunction statusdetails(props) {\n    if (props.Status === \"Select All\") {\n        return (<span>Select All</span>);\n    }\n    if (props.Status === \"Active\") {\n        return (<div className=\"statustemp e-activecolor\">\n            <span className=\"statustxt e-activecolor\">Active</span>\n            </div>);\n    }\n    if (props.Status === \"Inactive\") {\n        return (<div className=\"statustemp e-inactivecolor\">\n          <span className=\"statustxt e-inactivecolor\">Inactive</span>\n          </div>);\n    }\n}\nexport class OverView extends SampleBase {\n    dReady = false;\n    dtTime = false;\n    isDataBound = false;\n    isDataChanged = true;\n    intervalFun;\n    clrIntervalFun;\n    clrIntervalFun1;\n    clrIntervalFun2;\n    dropSlectedIndex = null;\n    ddObj;\n    gridInstance;\n    stTime;\n    ddlData = [\n        { text: '1,000 Rows and 11 Columns', value: '1000' },\n        { text: '10,000 Rows and 11 Columns', value: '10000' },\n        { text: '1,00,000 Rows and 11 Columns', value: '100000' }\n    ];\n    fields = { text: 'text', value: 'value' };\n    onDataBound() {\n        clearTimeout(this.clrIntervalFun);\n        clearInterval(this.intervalFun);\n        this.dtTime = true;\n    }\n    onComplete(args) {\n        if (args.requestType === \"filterchoicerequest\") {\n            if (args.filterModel.options.field === \"Trustworthiness\" || args.filterModel.options.field === \"Rating\" || args.filterModel.options.field === \"Status\") {\n                var span = args.filterModel.dialogObj.element.querySelectorAll('.e-selectall')[0];\n                if (!isNullOrUndefined(span)) {\n                    closest(span, '.e-ftrchk').classList.add(\"e-hide\");\n                }\n            }\n        }\n    }\n    hostUrl = 'http://localhost:62728/';\n    data = new DataManager({ url: this.hostUrl + 'api/UrlDataSource', adaptor: new UrlAdaptor });\n    query = new Query().addParams('dataCount', '1000');\n    onChange() {\n        this.ddObj.hidePopup();\n        this.dropSlectedIndex = null;\n        let index = this.ddObj.value;\n        clearTimeout(this.clrIntervalFun2);\n        this.clrIntervalFun2 = setTimeout(() => {\n            this.isDataChanged = true;\n            this.stTime = null;\n            let contentElement = this.gridInstance.contentModule.getPanel().firstChild;\n            contentElement.scrollLeft = 0;\n            contentElement.scrollTop = 0;\n            this.gridInstance.pageSettings.currentPage = 1;\n            this.stTime = performance.now();\n            if (this.gridInstance.query.params.length > 1) {\n                for (let i = 0; i < this.gridInstance.query.params.length; i++) {\n                    if (this.gridInstance.query.params[i].key === 'dataCount') {\n                        this.gridInstance.query.params[i].value = index.toString();\n                        break;\n                    }\n                }\n            }\n            else {\n                this.gridInstance.query.params[0].value = index.toString();\n            }\n            this.gridInstance.setProperties({ dataSource: this.data });\n        }, 100);\n    }\n    check = {\n        type: 'CheckBox'\n    };\n    select = {\n        persistSelection: true,\n        type: \"Multiple\",\n        checkboxOnly: true\n    };\n    onLoad(args) {\n        document.getElementById('overviewgrid').ej2_instances[0].on('data-ready', () => {\n            this.dReady = true;\n            this.stTime = performance.now();\n        });\n        var observer = new MutationObserver((mutations) => {\n            mutations.forEach(() => {\n                if (this.dReady && this.stTime && this.isDataChanged) {\n                    let msgEle = document.getElementById('msg');\n                    let val = (performance.now() - this.stTime).toFixed(0);\n                    this.stTime = null;\n                    this.dReady = false;\n                    this.dtTime = false;\n                    this.isDataChanged = false;\n                    msgEle.innerHTML = 'Load Time: ' + \"<b>\" + val + \"</b>\" + '<b>ms</b>';\n                    msgEle.classList.remove('e-hide');\n                }\n            });\n        });\n        observer.observe(document.getElementById('overviewgrid'), {\n            attributes: true,\n            childList: true,\n            subtree: true,\n        });\n    }\n    Filter = {\n        type: 'Menu'\n    };\n    status = {\n        type: 'CheckBox',\n        itemTemplate: statusdetails\n    };\n    trust = {\n        type: 'CheckBox',\n        itemTemplate: trustdetails\n    };\n    rating = {\n        type: 'CheckBox',\n        itemTemplate: ratingDetails\n    };\n    render() {\n        return (<div className='control-pane'>\n        <div className='control-section'>\n        <div style={{ paddingBottom: '18px' }}>\n        <DropDownListComponent id=\"games\" width='220' dataSource={this.ddlData} index={0} ref={(dropdownlist) => { this.ddObj = dropdownlist; }} fields={this.fields} change={this.onChange.bind(this)} placeholder=\"Select a Data Range\" popupHeight=\"240px\"/>\n        <span id='msg'></span>\n        <br />\n        </div>\n          <GridComponent id=\"overviewgrid\" dataSource={this.data} query={this.query} enableHover={false} enableVirtualization={true} loadingIndicator={{ indicatorType: 'Shimmer' }} rowHeight={38} height='400' ref={(g) => { this.gridInstance = g; }} actionComplete={this.onComplete.bind(this)} load={this.onLoad.bind(this)} dataBound={this.onDataBound.bind(this)} filterSettings={this.Filter} allowFiltering={true} allowSorting={true} allowSelection={true} selectionSettings={this.select}>\n            <ColumnsDirective>\n            <ColumnDirective type='checkbox' allowSorting={false} allowFiltering={false} width='60'></ColumnDirective>\n              <ColumnDirective field='EmployeeID' visible={false} headerText='Employee ID' isPrimaryKey={true} width='130'></ColumnDirective>\n              <ColumnDirective field='Employees' headerText='Employee Name' width='230' clipMode='EllipsisWithTooltip' template={empTemplate}/>\n              <ColumnDirective field='Designation' headerText='Designation' width='170' clipMode='EllipsisWithTooltip'/>\n              <ColumnDirective field='Mail' headerText='Mail' width='230'></ColumnDirective>\n              <ColumnDirective field='Location' headerText='Location' width='140' template={coltemplate}></ColumnDirective>\n              <ColumnDirective field='Status' headerText='Status' template={statusTemplate} width='130'></ColumnDirective>\n              <ColumnDirective field='Trustworthiness' headerText='Trustworthiness' template={trustTemplate} width='160'></ColumnDirective>\n              <ColumnDirective field='Rating' headerText='Rating' template={ratingTemplate} width='220'/>\n              <ColumnDirective field='Software' allowFiltering={false} allowSorting={false} headerText='Software Proficiency' width='180' template={progessTemplate} format='C2'/>\n              <ColumnDirective field='CurrentSalary' headerText='Current Salary' width='160' format='C2'></ColumnDirective>\n              <ColumnDirective field='Address' headerText='Address' width='240' clipMode=\"EllipsisWithTooltip\"></ColumnDirective>\n            </ColumnsDirective>\n            <Inject services={[Filter, VirtualScroll, Sort]}/>\n          </GridComponent>\n        </div>  \n        <style>\n            @import 'https://ej2.syncfusion.com/react/demos/src/grid/Grid/style.css';\n        </style>\n\n        </div>);\n    }\n}\n\nconst root = createRoot(document.getElementById('sample'));\nroot.render(<OverView />);","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n                this.rendereComplete();\n            });\n        }\n    }\n    export function updateSampleSection(){}\n    ","dependencies":"{\"@syncfusion/ej2-icons\":\"*\",\"markdown-spellcheck\":\"^1.3.1\",\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-react-base\":\"*\",\"@syncfusion/ej2-grids\":\"*\",\"@syncfusion/ej2-react-grids\":\"*\",\"@syncfusion/ej2-dropdowns\":\"*\",\"@syncfusion/ej2-react-dropdowns\":\"*\",\"@syncfusion/ej2-inputs\":\"*\",\"@syncfusion/ej2-react-inputs\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-react-buttons\":\"*\",\"@syncfusion/ej2-data\":\"*\",\"@syncfusion/ej2-react-charts\":\"*\",\"@syncfusion/ej2/base\":\"*\",\"@syncfusion/ej2-charts'; // Import the necessary types from Syncfusion\":\"*\",\"@syncfusion/ej2-lists\":\"*\",\"@syncfusion/ej2-documenteditor\":\"*\",\"@syncfusion/ej2-splitbuttons\":\"*\",\"@syncfusion/ej2-navigations\":\"*\",\"@syncfusion/ej2-react-popups\":\"*\"}"}