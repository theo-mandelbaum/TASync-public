{"index.css":"/* css */","property-pane.js":"import * as ReactDOM from 'react-dom';\nimport * as React from 'react';\nimport { select } from '@syncfusion/ej2-base';\nexport class PropertyPane extends React.Component {\n    render() {\n        const mobilePropPane = select('.sb-mobile-prop-pane');\n        const isMobile = window.matchMedia('(max-width:550px)').matches;\n        return isMobile && mobilePropPane ?\n            ReactDOM.createPortal(<div className='property-panel-section'>\n                    <div className=\"property-panel-header\">\n                        {this.props.title}\n                    </div>\n                    <div className=\"property-panel-content\">\n                        {this.props.children}\n                    </div>\n                </div>, mobilePropPane)\n            :\n                (<div className='property-panel-section'>\n                    <div className=\"property-panel-header\">\n                        {this.props.title}\n                    </div>\n                    <div className=\"property-panel-content\">\n                        {this.props.children}\n                    </div>\n                </div>);\n    }\n}\n","index.html":"<!DOCTYPE html>\n<html>\n<head>\n    <title>Syncfusion React Sample</title>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\n    <meta name=\"author\" content=\"Syncfusion\" />\n    <link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\n</head>\n\n<body class=\"{{theme}}\">\n     <style>\n            .control-section\n            {\n                margin-top: 100px;\n            }\n    </style>\n    <div id='sample'>\n</body>\n</html>\n","index.js":"import { createRoot } from 'react-dom/client';\nimport './index.css';\nimport * as React from 'react';\nimport { useRef, useEffect, useState } from \"react\";\nimport { SliderComponent } from '@syncfusion/ej2-react-inputs';\n\nimport { PropertyPane } from './property-pane';\nimport { isNullOrUndefined } from '@syncfusion/ej2-base';\nconst slidercss = `\r\n.content-wrapper {\r\n    width: 52%;\r\n    margin: 0 auto;\r\n    min-width: 185px;\r\n}\r\n\r\n.sliderwrap {\r\n    margin-top: 60px;\r\n}\r\n\r\n.userselect {\r\n    -webkit-user-select: none;\r\n    /* Safari 3.1+ */\r\n    -moz-user-select: none;\r\n    /* Firefox 2+ */\r\n    -ms-user-select: none;\r\n    /* IE 10+ */\r\n    user-select: none;\r\n    /* Standard syntax */\r\n}\r\n\r\n#EventLog b {\r\n    color: #388e3c;\r\n}\r\n\r\nhr {\r\n    margin-top: 6px;\r\n    margin-bottom: 6px;\r\n}\r\n`;\nconst Events = () => {\n    const [eventLog, setEventLog] = useState('');\n    let defaultObj = useRef(null);\n    let defaultTooltip = { isVisible: true, placement: 'Before', showOn: 'Focus' };\n    let defaultTicks = { placement: 'Both', largeStep: 20, smallStep: 5, showSmallTicks: true };\n    //Handler for create event trace\n    const onCreated = () => {\n        appendElement('Slider control has been <b>created</b><hr>');\n    };\n    //Handler for change event trace\n    const onChange = (args) => {\n        appendElement('Slider value is <b>changing</b> from ' + args.previousValue + '  to  ' + args.value + '<hr>');\n    };\n    //Handler for changed event trace\n    const onChanged = (args) => {\n        appendElement('Slider value has been <b>changed</b> from ' + args.previousValue + '  to  ' + args.value + '<hr>');\n    };\n    //Display event log\n    const appendElement = (html) => {\n        setEventLog(prevLog => `${html}${prevLog}`);\n    };\n    // Clears the event log details\n    const onclick = () => {\n        setEventLog('');\n    };\n    const refreshTooltip = (e) => {\n        if (defaultObj.current) {\n            defaultObj.current.refreshTooltip(defaultObj.tooltipTarget);\n        }\n    };\n    if (!isNullOrUndefined(document.getElementById('right-pane'))) {\n        document.getElementById('right-pane').addEventListener('scroll', refreshTooltip.bind(this));\n    }\n    return (<div className='control-pane'>\r\n            <style>{slidercss}</style>\r\n            <div className='control-section'>\r\n                <div className='col-lg-8'>\r\n                    <div className=\"content-wrapper\">\r\n                        <div className='sliderwrap'>\r\n                            {/* Initialize Slider Component with type MinRange */}\r\n                            <SliderComponent id='minrange' value={30} type='MinRange' tooltip={defaultTooltip} ticks={defaultTicks} ref={defaultObj} changed={onChanged.bind(this)} created={onCreated.bind(this)} change={onChange.bind(this)}/>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div id=\"slider_event\" className=\"col-lg-4 property-section\">\r\n                    <PropertyPane title='Properties'>\r\n                        <table id=\"property\" title=\"Event Trace\" className='property-panel-table' style={{ width: '100%' }}>\r\n                            <tbody>\r\n                                <tr>\r\n                                    <td>\r\n                                        <div className=\"eventarea\" style={{ height: '245px', overflow: 'auto' }}>\r\n                                            {/* Event log element  */}\r\n                                            <span className=\"EventLog\" id=\"EventLog\" style={{ wordBreak: \"normal\" }} dangerouslySetInnerHTML={{ __html: eventLog }}></span>\r\n                                        </div>\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td>\r\n                                        <div className=\"evtbtn\" style={{ paddingBottom: '10px' }}>\r\n                                            {/* Event log element  */}\r\n                                            <input id=\"clear\" type=\"button\" className=\"btn btn-default\" value=\"Clear\" onClick={onclick}/>\r\n                                        </div>\r\n                                    </td>\r\n                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n                    </PropertyPane>\r\n                </div>\r\n            </div>\r\n        </div>);\n};\nexport default Events;\n\nconst root = createRoot(document.getElementById('sample'));\nroot.render(<Events />);","dependencies":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-react-base\":\"*\",\"@syncfusion/ej2-inputs\":\"*\",\"@syncfusion/ej2-react-inputs\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-react-buttons\":\"*\",\"@syncfusion/ej2-icons\":\"*\",\"markdown-spellcheck\":\"^1.3.1\",\"@syncfusion/ej2-react-charts\":\"*\",\"@syncfusion/ej2/base\":\"*\",\"@syncfusion/ej2-charts'; // Import the necessary types from Syncfusion\":\"*\",\"@syncfusion/ej2-lists\":\"*\",\"@syncfusion/ej2-documenteditor\":\"*\",\"@syncfusion/ej2-splitbuttons\":\"*\",\"@syncfusion/ej2-navigations\":\"*\",\"@syncfusion/ej2-react-popups\":\"*\",\"@syncfusion/ej2-pivotview\":\"*\",\"@syncfusion/ej2-react-progressbar\":\"*\"}"}