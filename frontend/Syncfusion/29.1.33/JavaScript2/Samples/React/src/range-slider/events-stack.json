{"index.css":"/* css */","property-pane.js":"import * as ReactDOM from 'react-dom';\nimport * as React from 'react';\nimport { select } from '@syncfusion/ej2-base';\nexport class PropertyPane extends React.Component {\n    render() {\n        const mobilePropPane = select('.sb-mobile-prop-pane');\n        const isMobile = window.matchMedia('(max-width:550px)').matches;\n        return isMobile && mobilePropPane ?\n            ReactDOM.createPortal(<div className='property-panel-section'>\n                    <div className=\"property-panel-header\">\n                        {this.props.title}\n                    </div>\n                    <div className=\"property-panel-content\">\n                        {this.props.children}\n                    </div>\n                </div>, mobilePropPane)\n            :\n                (<div className='property-panel-section'>\n                    <div className=\"property-panel-header\">\n                        {this.props.title}\n                    </div>\n                    <div className=\"property-panel-content\">\n                        {this.props.children}\n                    </div>\n                </div>);\n    }\n}\n","index.html":"<!DOCTYPE html>\n<html>\n<head>\n    <title>Syncfusion React Sample</title>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\n    <meta name=\"author\" content=\"Syncfusion\" />\n    <link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\n</head>\n\n<body class=\"{{theme}}\">\n     <style>\n            .control-section\n            {\n                margin-top: 100px;\n            }\n    </style>\n    <div id='sample'>\n</body>\n</html>\n","index.js":"import { createRoot } from 'react-dom/client';\nimport './index.css';\nimport * as React from 'react';\nimport { SliderComponent } from '@syncfusion/ej2-react-inputs';\nimport { SampleBase } from './sample-base';\nimport { PropertyPane } from './property-pane';\nimport { isNullOrUndefined } from '@syncfusion/ej2-base';\nconst slidercss = `\n.content-wrapper {\n    width: 52%;\n    margin: 0 auto;\n    min-width: 185px;\n}\n\n.sliderwrap {\n    margin-top: 60px;\n}\n\n.userselect {\n    -webkit-user-select: none;\n    /* Safari 3.1+ */\n    -moz-user-select: none;\n    /* Firefox 2+ */\n    -ms-user-select: none;\n    /* IE 10+ */\n    user-select: none;\n    /* Standard syntax */\n}\n\n#EventLog b {\n    color: #388e3c;\n}\n\nhr {\n    margin-top: 6px;\n    margin-bottom: 6px;\n}\n\n`;\nexport class Events extends SampleBase {\n    defaultObj;\n    defaultTooltip = { isVisible: true, placement: 'Before', showOn: 'Focus' };\n    defaultTicks = { placement: 'Both', largeStep: 20, smallStep: 5, showSmallTicks: true };\n    //Handler for create event trace\n    onCreated() {\n        this.appendElement('Slider control has been <b>created</b><hr>');\n    }\n    //Handler for change event trace\n    onChange(args) {\n        this.appendElement('Slider value is <b>changing</b> from ' + args.previousValue + '  to  ' + args.value + '<hr>');\n    }\n    //Handler for changed event trace\n    onChanged(args) {\n        this.appendElement('Slider value has been <b>changed</b> from ' + args.previousValue + '  to  ' + args.value + '<hr>');\n    }\n    //Display event log\n    appendElement(html) {\n        let span = document.createElement('span');\n        span.innerHTML = html;\n        let log = document.getElementById('EventLog');\n        log.insertBefore(span, log.firstChild);\n    }\n    // Clears the event log details\n    onclick() {\n        document.getElementById('EventLog').innerHTML = '';\n    }\n    refreshTooltip(e) {\n        if (this.defaultObj) {\n            this.defaultObj.refreshTooltip(this.defaultObj.tooltipTarget);\n        }\n    }\n    render() {\n        if (!isNullOrUndefined(document.getElementById('right-pane'))) {\n            document.getElementById('right-pane').addEventListener('scroll', this.refreshTooltip.bind(this));\n        }\n        return (<div className='control-pane'>\n                <style>{slidercss}</style>\n                <div className='control-section'>\n                    <div className='col-lg-8'>\n                        <div className=\"content-wrapper\">\n                            <div className='sliderwrap'>\n                                {/* Initialize Slider Component with type MinRange */}\n                                <SliderComponent id='minrange' value={30} type='MinRange' tooltip={this.defaultTooltip} ticks={this.defaultTicks} ref={(slider) => { this.defaultObj = slider; }} changed={this.onChanged.bind(this)} created={this.onCreated.bind(this)} change={this.onChange.bind(this)}/>\n                            </div>\n                        </div>\n                    </div>\n                    <div id=\"slider_event\" className=\"col-lg-4 property-section\">\n                        <PropertyPane title='Properties'>\n                            <table id=\"property\" title=\"Event Trace\" className='property-panel-table' style={{ width: '100%' }}>\n                                <tbody>\n                                    <tr>\n                                        <td>\n                                            <div className=\"eventarea\" style={{ height: '245px', overflow: 'auto' }}>\n                                                {/* Event log element  */}\n                                                <span className=\"EventLog\" id=\"EventLog\" style={{ wordBreak: 'normal' }}></span>\n                                            </div>\n                                        </td>\n                                    </tr>\n                                    <tr>\n                                        <td>\n                                            <div className=\"evtbtn\" style={{ paddingBottom: '10px' }}>\n                                                {/* Event log element  */}\n                                                <input id=\"clear\" type=\"button\" className=\"btn btn-default\" value=\"Clear\" onClick={this.onclick}/>\n                                            </div>\n                                        </td>\n                                    </tr>\n                                </tbody>\n                            </table>\n                        </PropertyPane>\n                    </div>\n                </div>\n\n\n            </div>);\n    }\n}\n\nconst root = createRoot(document.getElementById('sample'));\nroot.render(<Events />);","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n                this.rendereComplete();\n            });\n        }\n    }\n    export function updateSampleSection(){}\n    ","dependencies":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-react-base\":\"*\",\"@syncfusion/ej2-inputs\":\"*\",\"@syncfusion/ej2-react-inputs\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-react-buttons\":\"*\",\"@syncfusion/ej2-icons\":\"*\",\"markdown-spellcheck\":\"^1.3.1\",\"@syncfusion/ej2-react-charts\":\"*\",\"@syncfusion/ej2/base\":\"*\",\"@syncfusion/ej2-charts'; // Import the necessary types from Syncfusion\":\"*\",\"@syncfusion/ej2-lists\":\"*\",\"@syncfusion/ej2-documenteditor\":\"*\",\"@syncfusion/ej2-splitbuttons\":\"*\",\"@syncfusion/ej2-navigations\":\"*\",\"@syncfusion/ej2-react-popups\":\"*\",\"@syncfusion/ej2-pivotview\":\"*\",\"@syncfusion/ej2-react-progressbar\":\"*\"}"}