{"index.css":"/* css */","property-pane.js":"import * as ReactDOM from 'react-dom';\nimport * as React from 'react';\nimport { select } from '@syncfusion/ej2-base';\nexport class PropertyPane extends React.Component {\n    render() {\n        const mobilePropPane = select('.sb-mobile-prop-pane');\n        const isMobile = window.matchMedia('(max-width:550px)').matches;\n        return isMobile && mobilePropPane ?\n            ReactDOM.createPortal(<div className='property-panel-section'>\n                    <div className=\"property-panel-header\">\n                        {this.props.title}\n                    </div>\n                    <div className=\"property-panel-content\">\n                        {this.props.children}\n                    </div>\n                </div>, mobilePropPane)\n            :\n                (<div className='property-panel-section'>\n                    <div className=\"property-panel-header\">\n                        {this.props.title}\n                    </div>\n                    <div className=\"property-panel-content\">\n                        {this.props.children}\n                    </div>\n                </div>);\n    }\n}\n","index.html":"<!DOCTYPE html>\n<html>\n<head>\n    <title>Syncfusion React Sample</title>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\n    <meta name=\"author\" content=\"Syncfusion\" />\n    <link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\n</head>\n\n<body class=\"{{theme}}\">\n     <style>\n            .control-section\n            {\n                margin-top: 100px;\n            }\n    </style>\n    <div id='sample'>\n</body>\n</html>\n","index.js":"import { createRoot } from 'react-dom/client';\nimport './index.css';\nimport * as React from 'react';\nimport { SliderComponent } from '@syncfusion/ej2-react-inputs';\nimport { SampleBase } from './sample-base';\nimport { isNullOrUndefined } from '@syncfusion/ej2-base';\nconst slidercss = `\n.sliderwrap .label-text {\n    font-weight: 500;\n}\n\n.content-wrapper {\n    width: 80%;\n    margin: 0 auto;\n    min-width: 185px;\n}\n\n.sliderwrap {\n    margin-top: 40px;\n}\n\n#slider01 .e-handle,\n#out .e-handle,\n.bootstrap #out .e-handle,\n.bootstrap #slider01 .e-handle,\n.fabric #out .e-handle,\n.fabric #slider01 .e-handle,\n.highcontrast #out .e-handle,\n.highcontrast #slider01 .e-handle {\n    background-color: #ffd939;\n    border-color: #ffd939;\n    z-index: 1;\n}\n\n.e-bigger .content-wrapper {\n    width: 80%;\n}\n\n.sliderwrap label {\n    padding-bottom: 26px;\n    font-size: 13px;\n    font-weight: 500;\n    margin-top: 15px;\n}\n\n.userselect {\n    -webkit-user-select: none;\n    /* Safari 3.1+ */\n    -moz-user-select: none;\n    /* Firefox 2+ */\n    -ms-user-select: none;\n    /* IE 10+ */\n    user-select: none;\n    /* Standard syntax */\n}\n\n\n\n.e-slider-tooltip.e-tooltip-wrap.e-popup.e-slider-tooltip .e-tip-content,\n.e-slider-tooltip.e-tooltip-wrap.e-popup.e-material-range .e-tip-content.e-material-tooltip-show {\n    color: #333;\n}\n\n.e-tooltip-cutomization.e-slider-tooltip.e-tooltip-wrap.e-popup .e-arrow-tip-inner{\n    color: #ffd939;\n}\n\n.e-tooltip-cutomization.e-slider-tooltip.e-tooltip-wrap.e-popup .e-arrow-tip-outer {\n    border-top-color: #ffd939;\n}\n\n.e-tooltip-cutomization.e-slider-tooltip.e-tooltip-wrap.e-popup .e-arrow-tip-outer {\n    border-bottom-color: #ffd939;\n}\n\n.e-slider-container .e-slider#slider01 .e-range,\n.e-slider-container .e-slider#out .e-range {\n    background-color: #0375be;\n    z-index: unset;\n}\n.e-tooltip-cutomization.e-slider-tooltip.e-tooltip-wrap.e-popup.e-material-default.e-slider-horizontal-after,\n.e-tooltip-cutomization.e-slider-tooltip.e-tooltip-wrap.e-popup.e-material-default.e-slider-horizontal-before,\n.e-tooltip-cutomization.e-slider-tooltip.e-tooltip-wrap.e-popup {\n    background-color: #ffd939;\n    border-color: #ffd939;\n}\n\n.bootstrap .e-tooltip-cutomization.e-slider-tooltip.e-tooltip-wrap.e-popup .e-arrow-tip-outer {\n    border-top-color: #ffd939;\n}\n\n.bootstrap .e-tooltip-cutomization.e-slider-tooltip.e-tooltip-wrap.e-popup .e-arrow-tip-inner {\n    color: #ffd939;\n}\n\nbody.fluent2-highcontrast .sliderwrap .e-scale,\nbody.fluent2 .sliderwrap .e-scale,\nbody.fluent2-dark .sliderwrap .e-scale {\n    top: 2px;\n}\n\nbody.tailwind3 .sliderwrap .e-tick-after.e-scale.e-h-scale .e-tick,\nbody.tailwind3-dark .sliderwrap .e-tick-after.e-scale.e-h-scale .e-tick,\nbody.tailwind3.e-bigger .sliderwrap .e-tick-after.e-scale.e-h-scale .e-tick\nbody.tailwind3-dark.e-bigger .sliderwrap .e-tick-after.e-scale.e-h-scale .e-tick {\n    top: 0px;\n}\n`;\nexport class TooltipCustomization extends SampleBase {\n    // Set slider minimum and maximum values\n    // new Date(Year, Month, day, hours, minutes, seconds, millseconds)\n    min = new Date(2013, 6, 13, 11).getTime();\n    sliderMin = new Date(2013, 6, 13, 11).getTime();\n    sliderMax = new Date(2013, 6, 13, 23).getTime();\n    max = new Date(2013, 6, 13, 23).getTime();\n    // Initialize ticks with placement, largestep, smallste\n    value = [new Date(2013, 6, 13, 12).getTime(), new Date(2013, 6, 13, 18).getTime()];\n    sliderValue = new Date(2013, 6, 13, 17).getTime();\n    ticks = {\n        placement: 'After',\n        // 3 * 3600000 milliseconds = 3 Hour\n        largeStep: 3 * 3600000,\n        smallStep: 3600000, showSmallTicks: true\n    };\n    // Initialize tooltip with placement\n    tooltip = {\n        placement: 'Before', isVisible: true, cssClass: 'e-tooltip-cutomization'\n    };\n    sliderTooltip = {\n        placement: 'Before', isVisible: true, cssClass: 'e-tooltip-cutomization'\n    };\n    timeObj;\n    sliderObj;\n    tooltipChangeHandler(args) {\n        /**\n         * toLocaleTimeString is predefined javascript date function, which is used to\n         * customize the date in different format\n         */\n        let custom = { hour: '2-digit', minute: '2-digit' };\n        // Splitting the range values from the tooltip using space into an array.\n        if (args.text.indexOf('-') !== -1) {\n            let totalMiliSeconds = args.text.split(' ');\n            // First part is the first handle value\n            let firstPart = totalMiliSeconds[0];\n            // Second part is the second handle value\n            let secondPart = totalMiliSeconds[2];\n            firstPart = new Date(Number(firstPart)).toLocaleTimeString('en-us', custom);\n            secondPart = new Date(Number(secondPart)).toLocaleTimeString('en-us', custom);\n            // Assigning our custom text to the tooltip value.\n            args.text = firstPart + ' - ' + secondPart;\n        }\n        else {\n            args.text = 'Until ' + new Date(Number(args.text)).toLocaleTimeString('en-us', custom);\n        }\n    }\n    sliderTicks = {\n        placement: 'After',\n        // 3 * 3600000 milliseconds = 3 Hour\n        largeStep: 3 * 3600000,\n        smallStep: 3600000, showSmallTicks: true\n    };\n    onRenderingTicks(args) {\n        let totalMiliSeconds = Number(args.value);\n        /**\n         * toLocaleTimeString is predefined javascript date function, which is used to\n         * customize the date in different format\n         */\n        let custom = { hour: '2-digit', minute: '2-digit' };\n        // Assigning our custom text to the tick value.\n        args.text = new Date(totalMiliSeconds).toLocaleTimeString('en-us', custom);\n    }\n    // Handler used to reposition the tooltip on page scroll\n    onScroll() {\n        if (this.sliderObj && this.timeObj) {\n            this.timeObj.refreshTooltip(this.timeObj.tooltipTarget);\n            this.sliderObj.refreshTooltip(this.sliderObj.tooltipTarget);\n        }\n    }\n    render() {\n        if (!isNullOrUndefined(document.getElementById('right-pane'))) {\n            document.getElementById('right-pane').addEventListener('scroll', this.onScroll.bind(this));\n        }\n        return (<div className='control-pane'>\n                <style>{slidercss}</style>\n                <div className='col-lg-12-control-section'>\n                    <div className=\"content-wrapper\">\n                        <div className=\"sliderwrap\">\n                            <label className=\"labeltext userselect\">\n                                <span className=\"label-text\">Background color</span>\n                            </label>\n\n                            <SliderComponent id=\"slider01\" value={this.value} min={this.min} max={this.max} step={3600000 / 6} ticks={this.ticks} type=\"Range\" tooltip={this.tooltip} tooltipChange={this.tooltipChangeHandler.bind(this)} ref={(slider) => { this.timeObj = slider; }} renderingTicks={this.onRenderingTicks.bind(this)}/>\n                        </div>\n                        <div className=\"sliderwrap\">\n                            <label className=\"labeltext userselect\">\n                                <span className=\"label-text\">Color and text</span>\n                            </label>\n                            {/* Ticks slider element - */}\n                            <SliderComponent id=\"out\" value={new Date(2013, 6, 13, 17).getTime()} min={this.sliderMin} max={this.sliderMax} step={3600000 / 6} ticks={this.sliderTicks} type=\"MinRange\" tooltip={this.sliderTooltip} tooltipChange={this.tooltipChangeHandler.bind(this)} ref={(slider) => { this.sliderObj = slider; }} renderingTicks={this.onRenderingTicks.bind(this)}/>\n                        </div>\n                    </div>\n                </div>\n\n            </div>);\n    }\n}\n\nconst root = createRoot(document.getElementById('sample'));\nroot.render(<TooltipCustomization />);","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n                this.rendereComplete();\n            });\n        }\n    }\n    export function updateSampleSection(){}\n    ","dependencies":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-react-base\":\"*\",\"@syncfusion/ej2-inputs\":\"*\",\"@syncfusion/ej2-react-inputs\":\"*\",\"@syncfusion/ej2-dropdowns\":\"*\",\"@syncfusion/ej2-react-dropdowns\":\"*\",\"@syncfusion/ej2-icons\":\"*\",\"markdown-spellcheck\":\"^1.3.1\",\"@syncfusion/ej2-react-charts\":\"*\",\"@syncfusion/ej2/base\":\"*\",\"@syncfusion/ej2-charts'; // Import the necessary types from Syncfusion\":\"*\",\"@syncfusion/ej2-lists\":\"*\",\"@syncfusion/ej2-documenteditor\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-splitbuttons\":\"*\",\"@syncfusion/ej2-navigations\":\"*\",\"@syncfusion/ej2-react-popups\":\"*\",\"@syncfusion/ej2-pivotview\":\"*\",\"@syncfusion/ej2-react-progressbar\":\"*\"}"}