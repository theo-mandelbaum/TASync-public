{"index.css":"/* css */","index.html":"<!DOCTYPE html>\n<html>\n<head>\n    <title>Syncfusion React Sample</title>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\n    <meta name=\"author\" content=\"Syncfusion\" />\n    <link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\n</head>\n\n<body class=\"{{theme}}\">\n     <style>\n            .control-section\n            {\n                margin-top: 100px;\n            }\n    </style>\n    <div id='sample'>\n</body>\n</html>\n","index.js":"import { createRoot } from 'react-dom/client';\nimport './index.css';\nimport * as React from 'react';\nimport { SliderComponent } from '@syncfusion/ej2-react-inputs';\nimport { SampleBase } from './sample-base';\nimport { isNullOrUndefined } from '@syncfusion/ej2-base';\nconst slidercss = `\n.content-wrapper {\n    width: 40%;\n    margin: 0 auto;\n    min-width: 185px;\n}\n\n.sliderwrap {\n    margin-top: 40px;\n}\n.e-bigger .content-wrapper {\n    width: 80%;\n}\n.sliderwrap label {\n    padding-bottom: 26px;\n    font-size: 13px;\n    font-weight: 500;\n    margin-top: 15px;\n    text-align: left;\n    width: 100%;\n}\nbody.fluent2-highcontrast .sliderwrap .e-scale,\nbody.fluent2 .sliderwrap .e-scale,\nbody.fluent2-dark .sliderwrap .e-scale {\n    top: 2px;\n}\n    \nbody.tailwind3 .sliderwrap .e-tick-after.e-scale.e-h-scale .e-tick,\nbody.tailwind3-dark .sliderwrap .e-tick-after.e-scale.e-h-scale .e-tick,\nbody.tailwind3.e-bigger .sliderwrap .e-tick-after.e-scale.e-h-scale .e-tick\nbody.tailwind3-dark.e-bigger .sliderwrap .e-tick-after.e-scale.e-h-scale .e-tick {\n    top: 0px;\n}\n`;\nexport class Format extends SampleBase {\n    currencyObj;\n    kilometerObj;\n    timeObj;\n    currencyTicks = {\n        placement: 'After', largeStep: 25, smallStep: 5, showSmallTicks: true,\n        // Formatting ticks value in currency with 3-decimal specifier.\n        format: 'c1'\n    };\n    currencyTooltip = {\n        placement: 'Before', isVisible: true,\n        // Formatting tooltip value in currency with 2-decimal specifier.\n        format: 'c2'\n    };\n    kilometerTicks = {\n        placement: 'After',\n        largeStep: 400,\n        smallStep: 200,\n        showSmallTicks: true,\n        /**\n         * Formatting ticks value in numeric with 2-decimal specifier if the any decimal values occurred.\n         * Zeros will be filled if the values are not in 4-digits in the fractional part.\n         */\n        format: '00##.## km'\n    };\n    kilometerTooltip = {\n        placement: 'Before',\n        isVisible: true,\n        /**\n         * Formatting tooltip value in numeric with 2-decimal specifier if the any decimal values occurred.\n         * Zeros will be filled if the values are not in 4-digits in the fractional part.\n         */\n        format: '00##.## km'\n    };\n    minValue = new Date(2013, 6, 13, 11).getTime();\n    maxValue = new Date(2013, 6, 13, 23).getTime();\n    // 3600000 milliseconds = 1 Hour, 3600000 / 6 milliseconds = 10 Minutes\n    stepValue = 3600000 / 6;\n    value = [new Date(2013, 6, 13, 12).getTime(), new Date(2013, 6, 13, 18).getTime()];\n    timeTooltip = {\n        placement: 'Before', isVisible: true\n    };\n    timeTicks = {\n        placement: 'After',\n        // 3 * 3600000 milliseconds = 3 Hour\n        largeStep: 3 * 3600000,\n        smallStep: 3600000, showSmallTicks: true\n    };\n    tooltipChangeHandler(args) {\n        // Splitting the range values from the tooltip using space into an array.\n        let totalMiliSeconds = args.text.split(' ');\n        // First part is the first handle value\n        let firstPart = totalMiliSeconds[0];\n        // Second part is the second handle value\n        let secondPart = totalMiliSeconds[2];\n        /**\n         * toLocaleTimeString is predefined javascript date function, which is used to\n         * customize the date in different format\n         */\n        let custom = { hour: '2-digit', minute: '2-digit' };\n        firstPart = new Date(Number(firstPart)).toLocaleTimeString('en-us', custom);\n        secondPart = new Date(Number(secondPart)).toLocaleTimeString('en-us', custom);\n        // Assigning our custom text to the tooltip value.\n        args.text = firstPart + ' - ' + secondPart;\n    }\n    renderingTicksHandler(args) {\n        let totalMiliSeconds = Number(args.value);\n        /**\n         * toLocaleTimeString is predefined javascript date function, which is used to\n         * customize the date in different format\n         */\n        let custom = { hour: '2-digit', minute: '2-digit' };\n        // Assigning our custom text to the tick value.\n        args.text = new Date(totalMiliSeconds).toLocaleTimeString('en-us', custom);\n    }\n    // Handler used to reposition the tooltip on page scroll\n    onScroll() {\n        if (this.currencyObj && this.kilometerObj && this.timeObj) {\n            for (let slider of [this.currencyObj, this.kilometerObj, this.timeObj]) {\n                slider.refreshTooltip(slider.tooltipTarget);\n            }\n        }\n    }\n    render() {\n        if (!isNullOrUndefined(document.getElementById('right-pane'))) {\n            document.getElementById('right-pane').addEventListener('scroll', this.onScroll.bind(this));\n        }\n        return (<div>\n                <div className=\"col-lg-12 control-section\">\n                    <div className=\"content-wrapper\">\n                        <style>{slidercss}</style>\n                        <div className='sliderwrap'>\n                            <label>Currency Slider</label>\n                            {/* Initialize Slider Component with type Range */}\n                            <SliderComponent id=\"slider01\" value={[20, 80]} min={0} max={100} ticks={this.currencyTicks} tooltip={this.currencyTooltip} type='Range' ref={(slider) => { this.currencyObj = slider; }}/>\n                        </div>\n                        <div className='sliderwrap'>\n                            <label>Kilometer Slider</label>\n                            {/* Initialize Slider Component with type Range */}\n                            <SliderComponent id=\"slider02\" value={[1100, 1850]} min={900} max={2100} ticks={this.kilometerTicks} type='Range' tooltip={this.kilometerTooltip} ref={(slider) => { this.kilometerObj = slider; }}/>\n                        </div>\n                        <div className='sliderwrap'>\n                            <label>Time Slider</label>\n                            {/* Initialize Slider Component with type Range */}\n                            <SliderComponent id=\"slider03\" value={this.value} min={this.minValue} max={this.maxValue} ticks={this.timeTicks} type='Range' step={this.stepValue} tooltip={this.timeTooltip} tooltipChange={this.tooltipChangeHandler.bind(this)} renderingTicks={this.renderingTicksHandler.bind(this)} ref={(slider) => { this.timeObj = slider; }}/>\n                        </div>\n                    </div>\n                </div>\n\n\n\n            </div>);\n    }\n}\n\nconst root = createRoot(document.getElementById('sample'));\nroot.render(<Format />);","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n                this.rendereComplete();\n            });\n        }\n    }\n    export function updateSampleSection(){}\n    ","dependencies":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-react-base\":\"*\",\"@syncfusion/ej2-inputs\":\"*\",\"@syncfusion/ej2-react-inputs\":\"*\",\"@syncfusion/ej2-dropdowns\":\"*\",\"@syncfusion/ej2-react-dropdowns\":\"*\",\"@syncfusion/ej2-icons\":\"*\",\"markdown-spellcheck\":\"^1.3.1\",\"@syncfusion/ej2-react-charts\":\"*\",\"@syncfusion/ej2/base\":\"*\",\"@syncfusion/ej2-charts'; // Import the necessary types from Syncfusion\":\"*\",\"@syncfusion/ej2-lists\":\"*\",\"@syncfusion/ej2-documenteditor\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-splitbuttons\":\"*\",\"@syncfusion/ej2-navigations\":\"*\",\"@syncfusion/ej2-react-popups\":\"*\",\"@syncfusion/ej2-pivotview\":\"*\",\"@syncfusion/ej2-react-progressbar\":\"*\"}"}