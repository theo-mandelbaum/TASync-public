{"index.css":"/* css */","property-pane.js":"import * as ReactDOM from 'react-dom';\nimport * as React from 'react';\nimport { select } from '@syncfusion/ej2-base';\nexport class PropertyPane extends React.Component {\n    render() {\n        const mobilePropPane = select('.sb-mobile-prop-pane');\n        const isMobile = window.matchMedia('(max-width:550px)').matches;\n        return isMobile && mobilePropPane ?\n            ReactDOM.createPortal(<div className='property-panel-section'>\n                    <div className=\"property-panel-header\">\n                        {this.props.title}\n                    </div>\n                    <div className=\"property-panel-content\">\n                        {this.props.children}\n                    </div>\n                </div>, mobilePropPane)\n            :\n                (<div className='property-panel-section'>\n                    <div className=\"property-panel-header\">\n                        {this.props.title}\n                    </div>\n                    <div className=\"property-panel-content\">\n                        {this.props.children}\n                    </div>\n                </div>);\n    }\n}\n","index.html":"<!DOCTYPE html>\n<html>\n<head>\n    <title>Syncfusion React Sample</title>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\n    <meta name=\"author\" content=\"Syncfusion\" />\n    <link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\n</head>\n\n<body class=\"{{theme}}\">\n     <style>\n            .control-section\n            {\n                margin-top: 100px;\n            }\n    </style>\n    <div id='sample'>\n</body>\n</html>\n","index.js":"import { createRoot } from 'react-dom/client';\nimport './index.css';\nimport * as React from 'react';\nimport { SliderComponent } from '@syncfusion/ej2-react-inputs';\nimport { SampleBase } from './sample-base';\nimport { CheckBoxComponent } from '@syncfusion/ej2-react-buttons';\nimport { PropertyPane } from './property-pane';\nimport { isNullOrUndefined } from '@syncfusion/ej2-base';\nconst slidercss = `\n.content-wrapper {\n    width: 80%;\n    margin: 0 auto;\n    min-width: 185px;\n}\n\n.sliderwrap {\n    height: 375px;\n    margin-top: 10px;\n    width: 60%;\n    margin: auto;\n}\n\n.e-bigger .content-wrapper {\n    width: 80%;\n}\n\n.sliderwrap .e-lbl {\n    display: block;\n    font-size: 11px;\n    font-weight: 500;\n    margin-top: 15px;\n    margin-left: -10px;\n}\n\n.sliderwrap:last-child .e-lbl {\n    margin-left: -2px;\n}\n\n.slider_table td {\n    text-align: center;\n}\n\n.slider_table {\n    border: 0;\n    width: 100%\n}\n`;\nexport class Orientation extends SampleBase {\n    //Instance of the components\n    defaultObj;\n    rangeObj;\n    minRangeObj;\n    reverseObj;\n    ticks = { placement: 'Before', largeStep: 20, smallStep: 5, showSmallTicks: true };\n    tooltip = { isVisible: true, placement: 'Before' };\n    // Checkbox Instance\n    checkbox;\n    // Checkbox change handlers\n    enableDisableTicks(args) {\n        for (let slider of [this.defaultObj, this.minRangeObj, this.rangeObj, this.reverseObj]) {\n            // Assigning ticks values to each slider\n            slider.ticks.placement = args.checked ? 'Before' : 'None';\n        }\n    }\n    enableDisableTooltip(args) {\n        for (let slider of [this.defaultObj, this.minRangeObj, this.rangeObj, this.reverseObj]) {\n            // Assigning tooltip values to each slider\n            slider.tooltip.isVisible = args.checked;\n        }\n    }\n    refreshTooltip(e) {\n        if (this.defaultObj && this.rangeObj && this.minRangeObj && this.reverseObj) {\n            this.defaultObj.refreshTooltip(this.defaultObj.tooltipTarget);\n            this.minRangeObj.refreshTooltip(this.minRangeObj.tooltipTarget);\n            this.rangeObj.refreshTooltip(this.rangeObj.tooltipTarget);\n            this.reverseObj.refreshTooltip(this.reverseObj.tooltipTarget);\n        }\n    }\n    render() {\n        if (!isNullOrUndefined(document.getElementById('right-pane'))) {\n            document.getElementById('right-pane').addEventListener('scroll', this.refreshTooltip.bind(this));\n        }\n        return (<div className='control-pane' style={{ overflow: 'hidden' }}>\n                <style>{slidercss}</style>\n                <div className='control-section'>\n                    <div className='col-lg-8'>\n                        <div className=\"content-wrapper\">\n                            <table className=\"slider_table\">\n                                <tbody><tr>\n                                    <td>\n                                        <div className=\"sliderwrap\">\n                                            {/* Initialize Slider component with Vertical orientation */}\n                                            <SliderComponent id={\"slider01\"} value={30} orientation='Vertical' ticks={this.ticks} tooltip={this.tooltip} ref={(slider) => { this.defaultObj = slider; }}/>\n                                        </div>\n                                    </td>\n                                    <td>\n                                        <div className=\"sliderwrap\">\n                                            {/* Initialize  Slider component with type MinRange and Vertical orientation */}\n                                            <SliderComponent id={\"slider02\"} value={30} type='MinRange' orientation='Vertical' ticks={this.ticks} tooltip={this.tooltip} ref={(slider) => { this.minRangeObj = slider; }}/>\n                                        </div>\n                                    </td>\n                                    <td>\n                                        <div className=\"sliderwrap\">\n                                            {/* Initialize Range Slider component with type Range and Vertical orientation */}\n                                            <SliderComponent id={\"slider03\"} value={[30, 70]} type='Range' orientation='Vertical' ticks={this.ticks} tooltip={this.tooltip} ref={(slider) => { this.rangeObj = slider; }}/>\n                                        </div>\n                                    </td>\n                                    <td>\n                                        <div className=\"sliderwrap\">\n                                            {/* Initialize Range Slider component with type Range and Vertical orientation */}\n                                            <SliderComponent id={\"slider04\"} value={[30, 70]} min={100} max={0} type='Range' orientation='Vertical' ticks={this.ticks} tooltip={this.tooltip} ref={(slider) => { this.reverseObj = slider; }}/>\n                                        </div>\n                                    </td>\n                                </tr>\n                                </tbody></table>\n                        </div>\n                    </div>\n\n                    <div id=\"slider_event\" className=\"col-lg-4 property-section\">\n                        <PropertyPane title='Properties'>\n                            <table id=\"property\" title=\"Properties\" className='property-panel-table' style={{ width: '100%' }}>\n                                <tbody>\n                                    <tr>\n                                        <td style={{ width: '50%', paddingTop: '10px' }}>\n                                            <div className=\"userselect\">Ticks</div>\n                                        </td>\n                                        <td style={{ width: '50%', paddingRight: '10px' }}>\n                                            <div>\n                                                {/* Initialize Range CheckBox component */}\n                                                <CheckBoxComponent checked={true} change={this.enableDisableTicks.bind(this)}/>\n                                            </div>\n                                        </td>\n                                    </tr>\n                                    <tr>\n                                        <td style={{ width: '50%', paddingTop: '10px' }}>\n                                            <div className=\"userselect\">Tooltip</div>\n                                        </td>\n                                        <td style={{ width: '50%', paddingRight: '10px' }}>\n                                            <div style={{ paddingLeft: 0, paddingTop: 0 }}>\n                                                {/* Initialize Range CheckBox component */}\n                                                <CheckBoxComponent checked={true} change={this.enableDisableTooltip.bind(this)}/>\n                                            </div>\n                                        </td>\n                                    </tr>\n                                </tbody>\n                            </table>\n                        </PropertyPane>\n                    </div>\n                </div>\n\n\n            </div>);\n    }\n}\n\nconst root = createRoot(document.getElementById('sample'));\nroot.render(<Orientation />);","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n                this.rendereComplete();\n            });\n        }\n    }\n    export function updateSampleSection(){}\n    ","dependencies":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-react-base\":\"*\",\"@syncfusion/ej2-inputs\":\"*\",\"@syncfusion/ej2-react-inputs\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-react-buttons\":\"*\",\"markdown-spellcheck\":\"^1.3.1\",\"@syncfusion/ej2-icons\":\"*\",\"@syncfusion/ej2-react-charts\":\"*\",\"@syncfusion/ej2/base\":\"*\",\"@syncfusion/ej2-charts'; // Import the necessary types from Syncfusion\":\"*\",\"@syncfusion/ej2-lists\":\"*\",\"@syncfusion/ej2-documenteditor\":\"*\",\"@syncfusion/ej2-splitbuttons\":\"*\",\"@syncfusion/ej2-navigations\":\"*\",\"@syncfusion/ej2-react-popups\":\"*\",\"@syncfusion/ej2-pivotview\":\"*\",\"@syncfusion/ej2-react-progressbar\":\"*\"}"}