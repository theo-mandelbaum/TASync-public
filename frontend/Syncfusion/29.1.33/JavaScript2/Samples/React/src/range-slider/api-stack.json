{"index.css":"/* css */","property-pane.js":"import * as ReactDOM from 'react-dom';\nimport * as React from 'react';\nimport { select } from '@syncfusion/ej2-base';\nexport class PropertyPane extends React.Component {\n    render() {\n        const mobilePropPane = select('.sb-mobile-prop-pane');\n        const isMobile = window.matchMedia('(max-width:550px)').matches;\n        return isMobile && mobilePropPane ?\n            ReactDOM.createPortal(<div className='property-panel-section'>\n                    <div className=\"property-panel-header\">\n                        {this.props.title}\n                    </div>\n                    <div className=\"property-panel-content\">\n                        {this.props.children}\n                    </div>\n                </div>, mobilePropPane)\n            :\n                (<div className='property-panel-section'>\n                    <div className=\"property-panel-header\">\n                        {this.props.title}\n                    </div>\n                    <div className=\"property-panel-content\">\n                        {this.props.children}\n                    </div>\n                </div>);\n    }\n}\n","index.html":"<!DOCTYPE html>\n<html>\n<head>\n    <title>Syncfusion React Sample</title>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\n    <meta name=\"author\" content=\"Syncfusion\" />\n    <link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\n</head>\n\n<body class=\"{{theme}}\">\n     <style>\n            .control-section\n            {\n                margin-top: 100px;\n            }\n    </style>\n    <div id='sample'>\n</body>\n</html>\n","index.js":"import { createRoot } from 'react-dom/client';\nimport './index.css';\nimport * as React from 'react';\nimport { SliderComponent, NumericTextBoxComponent } from '@syncfusion/ej2-react-inputs';\nimport { SampleBase } from './sample-base';\nimport { PropertyPane } from './property-pane';\nimport { CheckBoxComponent } from '@syncfusion/ej2-react-buttons';\nimport { isNullOrUndefined } from '@syncfusion/ej2-base';\nconst slidercss = `\n.content-wrapper {\n    width: 52%;\n    margin: 0 auto;\n    min-width: 185px;\n}\n\n.sliderwrap {\n    margin-top: 30px;\n}\n\n.sb-mobile-prop-pane #property #desktop-checkbox-row-1,\n.sb-mobile-prop-pane #property #desktop-checkbox-row-2 {\n    display: none;\n\n}\n\n.sb-mobile-prop-pane #property #mobile-checkbox-row-1,\n.sb-mobile-prop-pane #property #mobile-checkbox-row-2,\n.sb-mobile-prop-pane #property #mobile-checkbox-row-3,\n.sb-mobile-prop-pane #property #mobile-checkbox-row-4 {\n    display: table-row;\n\n}\n\n#all-option-table #mobile-checkbox-row-1,\n#all-option-table #mobile-checkbox-row-2,\n#all-option-table #mobile-checkbox-row-3,\n#all-option-table #mobile-checkbox-row-4 {\n    display: none;\n\n}\n\n#all-option-table .property-panel-section .property-panel-content table#property tr {\n    height: 50px;\n}\n\n#all-option-sample .e-slider-container.e-horizontal {\n    margin-top: 160px;\n}\n\n#all-option-sample .e-slider-container.e-vertical {\n    margin-left: 40%;\n}\n\n#all-option-sample.content-wrapper {\n    height: 363px;\n    width: 50%;\n    margin: 0 auto;\n    min-width: 185px;\n}\n\n.sliderwrap {\n    height: 340px;\n}\n\n.e-bigger .content-wrapper {\n    width: 50%;\n}\n\n.sliderwrap label {\n    padding-bottom: 26px;\n    font-size: 13px;\n    font-weight: 500;\n    margin-top: 15px;\n    text-align: left;\n    width: 100%;\n}\n\n.userselect {\n    -webkit-user-select: none;\n    /* Safari 3.1+ */\n    -moz-user-select: none;\n    /* Firefox 2+ */\n    -ms-user-select: none;\n    /* IE 10+ */\n    user-select: none;\n    /* Standard syntax */\n}\n\n.e-bigger .e-sidebar .sb-mobile-right-pane .property-section .e-numerictextbox {\n    display: flex;\n    padding-left: 0;\n    text-align: center;\n}\n    \nbody.tailwind3 .sliderwrap .e-tick-after.e-scale.e-h-scale .e-tick,\nbody.tailwind3-dark .sliderwrap .e-tick-after.e-scale.e-h-scale .e-tick,\nbody.tailwind3.e-bigger .sliderwrap .e-tick-after.e-scale.e-h-scale .e-tick\nbody.tailwind3-dark.e-bigger .sliderwrap .e-tick-after.e-scale.e-h-scale .e-tick {\n    top: 0px;\n}\n`;\nexport class APIs extends SampleBase {\n    /**\n * slider property customization\n */\n    defaultObj;\n    tooltip = { placement: 'Before', isVisible: true, showOn: 'Hover' };\n    ticks = { placement: 'Before', largeStep: 20 };\n    tooltipplacement = [{ text: 'Before', value: 'Before' }, { text: 'After', value: 'After' }];\n    ticksplacement = [{ text: 'Before', value: 'Before' }, { text: 'After', value: 'After' }, { text: 'Both', value: 'Both' }, { text: 'None', value: 'None' }];\n    fields = { value: 'value', text: 'text' };\n    numbericValue;\n    onValueChange(args) {\n        this.defaultObj.value = args.value;\n    }\n    onMinChange(args) {\n        this.defaultObj.min = args.value;\n    }\n    onMaxChange(args) {\n        this.defaultObj.max = args.value;\n    }\n    onStepChange(args) {\n        this.defaultObj.step = args.value;\n    }\n    onChange(args) {\n        this.defaultObj.tooltip.isVisible = args.checked;\n    }\n    onOrientationChange(args) {\n        args.checked ? this.defaultObj.orientation = 'Vertical' : this.defaultObj.orientation = 'Horizontal';\n    }\n    onReadonlyChange(args) {\n        this.defaultObj.readonly = args.checked;\n    }\n    onDisableChange(args) {\n        this.defaultObj.enabled = !args.checked;\n    }\n    onTicksChange(args) {\n        this.defaultObj.ticks = { placement: args.value };\n    }\n    onTooltipChange(args) {\n        this.defaultObj.tooltip = { placement: args.value };\n    }\n    onButtonChange(args) {\n        args.checked ? this.defaultObj.showButtons = true : this.defaultObj.showButtons = false;\n    }\n    refreshTooltip(e) {\n        if (this.defaultObj) {\n            this.defaultObj.refreshTooltip(this.defaultObj.tooltipTarget);\n        }\n    }\n    sliderChange(args) {\n        this.numbericValue.value = args.value;\n    }\n    render() {\n        if (!isNullOrUndefined(document.getElementById('right-pane'))) {\n            document.getElementById('right-pane').addEventListener('scroll', this.refreshTooltip.bind(this));\n        }\n        return (<div className='control-pane'>\n                <style>{slidercss}</style>\n                <div className='control-section'>\n                    <div className='col-lg-8'>\n                        <div className=\"content-wrapper\" id=\"all-option-sample\">\n                            <div className='sliderwrap'>\n                                <SliderComponent id='slider' value={30} min={0} max={100} change={this.sliderChange.bind(this)} ticks={this.ticks} tooltip={this.tooltip} type='MinRange' ref={(slider) => { this.defaultObj = slider; }}/>\n                            </div>\n                        </div>\n                    </div>\n                    <div id=\"all-option-table\" className=\"col-lg-4 property-section\">\n                        <PropertyPane title='Properties'>\n                            <table id=\"property\" title=\"Properties\" className='property-panel-table' style={{ width: \"100%\" }}>\n                                <tbody>\n                                    <tr>\n                                        <td style={{ width: '50%' }}>\n                                            <div id=\"valueLabel\" className=\"userselect\">Value</div>\n                                        </td>\n                                        <td style={{ width: '50%' }}>\n                                            <div>\n                                                <NumericTextBoxComponent value={30} format='n0' change={this.onValueChange.bind(this)} ref={(value) => { this.numbericValue = value; }} aria-labelledby=\"valueLabel\"/>\n                                            </div>\n                                        </td>\n                                    </tr>\n                                    <tr>\n                                        <td style={{ width: '50%' }}>\n                                            <div id=\"minLabel\" className=\"userselect\">Min</div>\n                                        </td>\n                                        <td style={{ width: '50%' }}>\n                                            <div>\n                                                <NumericTextBoxComponent value={0} format='n0' change={this.onMinChange.bind(this)} aria-labelledby=\"minLabel\"/>\n                                            </div>\n                                        </td>\n                                    </tr>\n                                    <tr>\n                                        <td style={{ width: '50%' }}>\n                                            <div id=\"maxLabel\" className=\"userselect\">Max</div>\n                                        </td>\n                                        <td style={{ width: '50%' }}>\n                                            <div>\n                                                <NumericTextBoxComponent value={100} format='n0' change={this.onMaxChange.bind(this)} aria-labelledby=\"maxLabel\"/>\n                                            </div>\n                                        </td>\n                                    </tr>\n                                    <tr>\n                                        <td style={{ width: '50%' }}>\n                                            <div id=\"stepLabel\" className=\"userselect\">Step</div>\n                                        </td>\n                                        <td style={{ width: '50%' }}>\n                                            <div>\n                                                <NumericTextBoxComponent value={1} change={this.onStepChange.bind(this)} aria-labelledby=\"stepLabel\"/>\n                                            </div>\n                                        </td>\n                                    </tr>\n                                    <tr id=\"desktop-checkbox-row-1\">\n                                        <td style={{ width: \"50%\" }}>\n                                            <div className=\"userselect\" style={{ paddingLeft: \"0\" }}>\n                                                <CheckBoxComponent id=\"button\" label={\"Show Buttons\"} checked={false} change={this.onButtonChange.bind(this)}/>\n                                            </div>\n                                        </td>\n                                        <td style={{ width: \"50%\", paddingRight: '10px' }}>\n                                            <div style={{ paddingLeft: \"0\", paddingTop: \"10\" }}>\n                                                <CheckBoxComponent id=\"disabled\" label={\"Disable\"} checked={false} change={this.onDisableChange.bind(this)}/>\n                                            </div>\n                                        </td>\n                                    </tr>\n\n                                    <tr id=\"desktop-checkbox-row-2\">\n                                        <td style={{ width: \"50%\", paddingRight: '10px' }}>\n                                            <div style={{ paddingLeft: \"0\", paddingTop: \"0\" }}>\n                                                <CheckBoxComponent id=\"readOnly\" label={\"Read Only\"} checked={false} change={this.onReadonlyChange.bind(this)}/>\n                                            </div>\n                                        </td>\n                                        <td style={{ width: \"50%\" }}>\n                                            <div className=\"userselect\" style={{ paddingLeft: \"0\" }}>\n                                                <CheckBoxComponent id=\"orientation\" label={\"Vertical Orientation\"} checked={false} change={this.onOrientationChange.bind(this)}/>\n                                            </div>\n                                        </td>\n                                    </tr>\n\n                                    <tr id=\"mobile-checkbox-row-1\">\n                                        <td style={{ width: \"50%\" }}>\n                                            <div className=\"userselect\" style={{ paddingLeft: \"0\" }}>Show Buttons\n                                            </div>\n                                        </td>\n                                        <td style={{ width: \"50%\", paddingRight: '10px' }}>\n                                            <div style={{ paddingLeft: \"0\", paddingTop: \"0\" }}>\n                                                <CheckBoxComponent id=\"mb-button\" checked={false} change={this.onButtonChange.bind(this)}/>\n                                            </div>\n                                        </td>\n                                    </tr>\n\n                                    <tr id=\"mobile-checkbox-row-2\">\n                                        <td style={{ width: \"50%\" }}>\n                                            <div className=\"userselect\" style={{ paddingLeft: \"0\" }}>Disabled\n                                            </div>\n                                        </td>\n                                        <td style={{ width: \"50%\", paddingRight: '10px' }}>\n                                            <div style={{ paddingLeft: \"0\", paddingTop: \"0\" }}>\n                                                <CheckBoxComponent id=\"mb-disabled\" checked={false} change={this.onDisableChange.bind(this)}/>\n                                            </div>\n                                        </td>\n                                    </tr>\n\n                                    <tr id=\"mobile-checkbox-row-3\">\n                                        <td style={{ width: \"50%\" }}>\n                                            <div className=\"userselect\" style={{ paddingLeft: \"0\" }}>Vertical Orientation\n                                            </div>\n                                        </td>\n                                        <td style={{ width: \"50%\", paddingRight: '10px' }}>\n                                            <div style={{ paddingLeft: \"0\", paddingTop: \"0\" }}>\n                                                <CheckBoxComponent id=\"mb-orientation\" checked={false} change={this.onOrientationChange.bind(this)}/>\n                                            </div>\n                                        </td>\n                                    </tr>\n\n                                    <tr id=\"mobile-checkbox-row-4\">\n                                        <td style={{ width: \"50%\" }}>\n                                            <div className=\"userselect\" style={{ paddingLeft: \"0\" }}>Readonly\n                                            </div>\n                                        </td>\n                                        <td style={{ width: \"50%\", paddingRight: '10px' }}>\n                                            <div style={{ paddingLeft: \"0\", paddingTop: \"0\" }}>\n                                                <CheckBoxComponent id=\"mb-readOnly\" checked={false} change={this.onReadonlyChange.bind(this)}/>\n                                            </div>\n                                        </td>\n                                    </tr>\n                                </tbody>\n                            </table>\n                        </PropertyPane>\n                    </div>\n                </div>\n\n            </div>);\n    }\n}\n\nconst root = createRoot(document.getElementById('sample'));\nroot.render(<APIs />);","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n                this.rendereComplete();\n            });\n        }\n    }\n    export function updateSampleSection(){}\n    ","dependencies":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-react-base\":\"*\",\"@syncfusion/ej2-inputs\":\"*\",\"@syncfusion/ej2-react-inputs\":\"*\",\"@syncfusion/ej2-dropdowns\":\"*\",\"@syncfusion/ej2-react-dropdowns\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-react-buttons\":\"*\",\"markdown-spellcheck\":\"^1.3.1\",\"@syncfusion/ej2-icons\":\"*\",\"@syncfusion/ej2-react-charts\":\"*\",\"@syncfusion/ej2/base\":\"*\",\"@syncfusion/ej2-charts'; // Import the necessary types from Syncfusion\":\"*\",\"@syncfusion/ej2-lists\":\"*\",\"@syncfusion/ej2-documenteditor\":\"*\",\"@syncfusion/ej2-splitbuttons\":\"*\",\"@syncfusion/ej2-navigations\":\"*\",\"@syncfusion/ej2-react-popups\":\"*\",\"@syncfusion/ej2-pivotview\":\"*\",\"@syncfusion/ej2-react-progressbar\":\"*\"}"}