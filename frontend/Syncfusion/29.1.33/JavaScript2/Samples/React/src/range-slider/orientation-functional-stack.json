{"index.css":"/* css */","property-pane.js":"import * as ReactDOM from 'react-dom';\nimport * as React from 'react';\nimport { select } from '@syncfusion/ej2-base';\nexport class PropertyPane extends React.Component {\n    render() {\n        const mobilePropPane = select('.sb-mobile-prop-pane');\n        const isMobile = window.matchMedia('(max-width:550px)').matches;\n        return isMobile && mobilePropPane ?\n            ReactDOM.createPortal(<div className='property-panel-section'>\n                    <div className=\"property-panel-header\">\n                        {this.props.title}\n                    </div>\n                    <div className=\"property-panel-content\">\n                        {this.props.children}\n                    </div>\n                </div>, mobilePropPane)\n            :\n                (<div className='property-panel-section'>\n                    <div className=\"property-panel-header\">\n                        {this.props.title}\n                    </div>\n                    <div className=\"property-panel-content\">\n                        {this.props.children}\n                    </div>\n                </div>);\n    }\n}\n","index.html":"<!DOCTYPE html>\n<html>\n<head>\n    <title>Syncfusion React Sample</title>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\n    <meta name=\"author\" content=\"Syncfusion\" />\n    <link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\n</head>\n\n<body class=\"{{theme}}\">\n     <style>\n            .control-section\n            {\n                margin-top: 100px;\n            }\n    </style>\n    <div id='sample'>\n</body>\n</html>\n","index.js":"import { createRoot } from 'react-dom/client';\nimport './index.css';\nimport * as React from 'react';\nimport { useState, useRef, useEffect } from 'react';\nimport { SliderComponent } from '@syncfusion/ej2-react-inputs';\n\nimport { CheckBoxComponent } from '@syncfusion/ej2-react-buttons';\nimport { PropertyPane } from './property-pane';\nimport { isNullOrUndefined } from '@syncfusion/ej2-base';\nconst slidercss = `\r\n.content-wrapper {\r\n    width: 80%;\r\n    margin: 0 auto;\r\n    min-width: 185px;\r\n}\r\n\r\n.sliderwrap {\r\n    height: 375px;\r\n    margin-top: 10px;\r\n    width: 60%;\r\n    margin: auto;\r\n}\r\n\r\n.e-bigger .content-wrapper {\r\n    width: 80%;\r\n}\r\n\r\n.sliderwrap .e-lbl {\r\n    display: block;\r\n    font-size: 11px;\r\n    font-weight: 500;\r\n    margin-top: 15px;\r\n    margin-left: -10px;\r\n}\r\n\r\n.sliderwrap:last-child .e-lbl {\r\n    margin-left: -2px;\r\n}\r\n\r\n.slider_table td {\r\n    text-align: center;\r\n}\r\n\r\n.slider_table {\r\n    border: 0;\r\n    width: 100%\r\n}\r\n`;\nconst Orientation = () => {\n    const [tooltip, setTooltip] = useState({\n        isVisible: true,\n        placement: 'Before'\n    });\n    const [ticks, setTicks] = useState({\n        placement: 'Before',\n        largeStep: 20,\n        smallStep: 5,\n        showSmallTicks: true\n    });\n    //Instance of the components\n    let defaultObj = useRef(null);\n    let rangeObj = useRef(null);\n    let minRangeObj = useRef(null);\n    let reverseObj = useRef(null);\n    // Checkbox change handlers\n    const enableDisableTicks = (args) => {\n        setTicks({ ...ticks, placement: args.checked ? 'Before' : 'None' });\n    };\n    const enableDisableTooltip = (args) => {\n        setTooltip({ ...tooltip, isVisible: args.checked });\n    };\n    const refreshTooltip = (e) => {\n        if (rangeObj.current && defaultObj.current && minRangeObj.current && reverseObj.current) {\n            defaultObj.current.refreshTooltip(defaultObj.tooltipTarget);\n            minRangeObj.current.refreshTooltip(minRangeObj.tooltipTarget);\n            rangeObj.current.refreshTooltip(rangeObj.tooltipTarget);\n            reverseObj.current.refreshTooltip(reverseObj.tooltipTarget);\n        }\n    };\n    if (!isNullOrUndefined(document.getElementById('right-pane'))) {\n        document.getElementById('right-pane').addEventListener('scroll', refreshTooltip.bind(this));\n    }\n    return (<div className='control-pane' style={{ overflow: 'hidden' }}>\r\n            <style>{slidercss}</style>\r\n            <div className='control-section'>\r\n                <div className='col-lg-8'>\r\n                    <div className=\"content-wrapper\">\r\n                        <table className=\"slider_table\">\r\n                            <tbody>\r\n                                <tr>\r\n                                    <td>\r\n                                        <div className=\"sliderwrap\">\r\n                                            {/* Initialize Slider component with Vertical orientation */}\r\n                                            <SliderComponent id={\"slider01\"} value={30} orientation='Vertical' ticks={ticks} tooltip={tooltip} ref={defaultObj}/>\r\n                                        </div>\r\n                                    </td>\r\n                                    <td>\r\n                                        <div className=\"sliderwrap\">\r\n                                            {/* Initialize  Slider component with type MinRange and Vertical orientation */}\r\n                                            <SliderComponent id={\"slider02\"} value={30} type='MinRange' orientation='Vertical' ticks={ticks} tooltip={tooltip} ref={minRangeObj}/>\r\n                                        </div>\r\n                                    </td>\r\n                                    <td>\r\n                                        <div className=\"sliderwrap\">\r\n                                            {/* Initialize Range Slider component with type Range and Vertical orientation */}\r\n                                            <SliderComponent id={\"slider03\"} value={[30, 70]} type='Range' orientation='Vertical' ticks={ticks} tooltip={tooltip} ref={rangeObj}/>\r\n                                        </div>\r\n                                    </td>\r\n                                    <td>\r\n                                        <div className=\"sliderwrap\">\r\n                                            {/* Initialize Range Slider component with type Range and Vertical orientation */}\r\n                                            <SliderComponent id={\"slider04\"} value={[30, 70]} min={100} max={0} type='Range' orientation='Vertical' ticks={ticks} tooltip={tooltip} ref={reverseObj}/>\r\n                                        </div>\r\n                                    </td>\r\n                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                </div>\r\n                <div id=\"slider_event\" className=\"col-lg-4 property-section\">\r\n                    <PropertyPane title='Properties'>\r\n                        <table id=\"property\" title=\"Properties\" className='property-panel-table' style={{ width: '100%' }}>\r\n                            <tbody>\r\n                                <tr>\r\n                                    <td style={{ width: '50%', paddingTop: '10px' }}>\r\n                                        <div className=\"userselect\">Ticks</div>\r\n                                    </td>\r\n                                    <td style={{ width: '50%', paddingRight: '10px' }}>\r\n                                        <div>\r\n                                            {/* Initialize Range CheckBox component */}\r\n                                            <CheckBoxComponent checked={true} change={enableDisableTicks.bind(this)}/>\r\n                                        </div>\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td style={{ width: '50%', paddingTop: '10px' }}>\r\n                                        <div className=\"userselect\">Tooltip</div>\r\n                                    </td>\r\n                                    <td style={{ width: '50%', paddingRight: '10px' }}>\r\n                                        <div style={{ paddingLeft: 0, paddingTop: 0 }}>\r\n                                            {/* Initialize Range CheckBox component */}\r\n                                            <CheckBoxComponent checked={true} change={enableDisableTooltip.bind(this)}/>\r\n                                        </div>\r\n                                    </td>\r\n                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n                    </PropertyPane>\r\n                </div>\r\n            </div>\r\n        </div>);\n};\nexport default Orientation;\n\nconst root = createRoot(document.getElementById('sample'));\nroot.render(<Orientation />);","dependencies":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-react-base\":\"*\",\"@syncfusion/ej2-inputs\":\"*\",\"@syncfusion/ej2-react-inputs\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-react-buttons\":\"*\",\"markdown-spellcheck\":\"^1.3.1\",\"@syncfusion/ej2-icons\":\"*\",\"@syncfusion/ej2-react-charts\":\"*\",\"@syncfusion/ej2/base\":\"*\",\"@syncfusion/ej2-charts'; // Import the necessary types from Syncfusion\":\"*\",\"@syncfusion/ej2-lists\":\"*\",\"@syncfusion/ej2-documenteditor\":\"*\",\"@syncfusion/ej2-splitbuttons\":\"*\",\"@syncfusion/ej2-navigations\":\"*\",\"@syncfusion/ej2-react-popups\":\"*\",\"@syncfusion/ej2-pivotview\":\"*\",\"@syncfusion/ej2-react-progressbar\":\"*\"}"}