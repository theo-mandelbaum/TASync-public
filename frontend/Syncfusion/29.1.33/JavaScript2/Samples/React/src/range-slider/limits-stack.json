{"index.css":"/* css */","property-pane.js":"import * as ReactDOM from 'react-dom';\nimport * as React from 'react';\nimport { select } from '@syncfusion/ej2-base';\nexport class PropertyPane extends React.Component {\n    render() {\n        const mobilePropPane = select('.sb-mobile-prop-pane');\n        const isMobile = window.matchMedia('(max-width:550px)').matches;\n        return isMobile && mobilePropPane ?\n            ReactDOM.createPortal(<div className='property-panel-section'>\n                    <div className=\"property-panel-header\">\n                        {this.props.title}\n                    </div>\n                    <div className=\"property-panel-content\">\n                        {this.props.children}\n                    </div>\n                </div>, mobilePropPane)\n            :\n                (<div className='property-panel-section'>\n                    <div className=\"property-panel-header\">\n                        {this.props.title}\n                    </div>\n                    <div className=\"property-panel-content\">\n                        {this.props.children}\n                    </div>\n                </div>);\n    }\n}\n","index.html":"<!DOCTYPE html>\n<html>\n<head>\n    <title>Syncfusion React Sample</title>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\n    <meta name=\"author\" content=\"Syncfusion\" />\n    <link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\n</head>\n\n<body class=\"{{theme}}\">\n     <style>\n            .control-section\n            {\n                margin-top: 100px;\n            }\n    </style>\n    <div id='sample'>\n</body>\n</html>\n","index.js":"import { createRoot } from 'react-dom/client';\nimport './index.css';\nimport * as React from 'react';\nimport { SliderComponent, NumericTextBoxComponent } from '@syncfusion/ej2-react-inputs';\nimport { SampleBase } from './sample-base';\nimport { CheckBoxComponent } from '@syncfusion/ej2-react-buttons';\nimport { PropertyPane } from './property-pane';\nimport { isNullOrUndefined } from '@syncfusion/ej2-base';\nconst slidercss = `\n.content-wrapper {\n    width: 52%;\n    margin: 0 auto;\n    min-width: 185px;\n}\n\n.sliderwrap {\n    margin-top: 45px;\n}\n.e-bigger .content-wrapper {\n    width: 80%;\n}\n.sliderwrap label {\n    padding-bottom: 50px;\n    font-size: 13px;\n    font-weight: 500;\n    margin-top: 15px;\n}\n.userselect {\n    -webkit-user-select: none;\n    /* Safari 3.1+ */\n    -moz-user-select: none;\n    /* Firefox 2+ */\n    -ms-user-select: none;\n    /* IE 10+ */\n    user-select: none;\n    /* Standard syntax */\n}\n.property-custom td {\n    padding: 5px;\n}\n.property-custom .property-panel-content {\n    height: 320px;\n}\nbody.fluent2-highcontrast .sliderwrap .e-tick-before.e-scale.e-h-scale .e-tick,\nbody.fluent2 .sliderwrap .e-tick-before.e-scale.e-h-scale .e-tick,\nbody.fluent2-dark .sliderwrap .e-tick-before.e-scale.e-h-scale .e-tick {\n    top: -5px;\n}\n`;\nexport class Limits extends SampleBase {\n    // Instance of the control\n    minRangeObj;\n    rangeObj;\n    minStartObj;\n    minEndObj;\n    maxStartObj;\n    maxEndObj;\n    fixOneObj;\n    fixTwoObj;\n    // Initialize ticks with placement, largestep, smallstep\n    ticks = { placement: 'After', largeStep: 20, smallStep: 5, showSmallTicks: true };\n    tooltip = { isVisible: true, placement: 'Before' };\n    minRangeLimits = { enabled: true, minStart: 10, minEnd: 40 };\n    rangeLimits = { enabled: true, minStart: 10, minEnd: 40, maxStart: 60, maxEnd: 90 };\n    minStart(args) {\n        this.minRangeObj.limits.minStart = args.value;\n        this.rangeObj.limits.minStart = args.value;\n    }\n    minEnd(args) {\n        this.minRangeObj.limits.minEnd = args.value;\n        this.rangeObj.limits.minEnd = args.value;\n    }\n    maxStart(args) {\n        this.minRangeObj.limits.maxStart = args.value;\n        this.rangeObj.limits.maxStart = args.value;\n    }\n    maxEnd(args) {\n        this.minRangeObj.limits.maxEnd = args.value;\n        this.rangeObj.limits.maxEnd = args.value;\n    }\n    fixOneChange(args) {\n        this.minRangeObj.limits.startHandleFixed = args.checked;\n        this.rangeObj.limits.startHandleFixed = args.checked;\n    }\n    fixTwoChange(args) {\n        this.minRangeObj.limits.endHandleFixed = args.checked;\n        this.rangeObj.limits.endHandleFixed = args.checked;\n    }\n    refreshTooltip(e) {\n        if (this.minEndObj && this.rangeObj) {\n            this.minRangeObj.refreshTooltip(this.minRangeObj.tooltipTarget);\n            this.rangeObj.refreshTooltip(this.rangeObj.tooltipTarget);\n        }\n    }\n    render() {\n        if (!isNullOrUndefined(document.getElementById('right-pane'))) {\n            document.getElementById('right-pane').addEventListener('scroll', this.refreshTooltip.bind(this));\n        }\n        return (<div className='control-pane'>\n                <div className='control-section'>\n                    <div className='col-lg-8'>\n                        <div className=\"content-wrapper\">\n                            <style>{slidercss}</style>\n                            <div className='sliderwrap'>\n                                <label>MinRange Slider With Limits</label>\n                                {/* Initialize Slider Component with ticks with placement, largestep, smallstep */}\n                                <SliderComponent id='minrange' value={25} min={0} max={100} ticks={this.ticks} limits={this.minRangeLimits} ref={(slider) => { this.minRangeObj = slider; }} tooltip={this.tooltip}/>\n                            </div>\n                            <div className='sliderwrap'>\n                                <label>Range Slider With Limits</label>\n                                {/* Initialize Range Slider Component with ticks with placement, largestep, smallstep */}\n                                <SliderComponent id='range' value={[25, 75]} min={0} max={100} type='Range' limits={this.rangeLimits} ticks={this.ticks} tooltip={this.tooltip} ref={(slider) => { this.rangeObj = slider; }}/>\n                            </div>\n                        </div>\n                    </div>\n                    <div id=\"#slider_event\" className='col-lg-4 property-section property-custom'>\n                        <PropertyPane title='Properties'>\n                            <table id=\"property\" title=\"Properties\">\n                                <tbody>\n                                    <tr>\n                                        <td style={{ width: '50%' }}>\n                                            <div id=\"minStartLabel\" className=\"userselect\">MinStart</div>\n                                        </td>\n                                        <td style={{ width: '50%' }}>\n                                            <NumericTextBoxComponent value={10} min={0} max={100} change={this.minStart.bind(this)} ref={(obj) => {\n                this.minStartObj = obj;\n            }} aria-labelledby=\"minStartLabel\"/>\n                                        </td>\n                                    </tr>\n                                    <tr>\n                                        <td style={{ width: '50%' }}>\n                                            <div id=\"minEndLabel\" className=\"userselect\">MinEnd</div>\n                                        </td>\n                                        <td style={{ width: '50%' }}>\n                                            <NumericTextBoxComponent value={40} min={0} max={100} change={this.minEnd.bind(this)} ref={(obj) => {\n                this.minEndObj = obj;\n            }} aria-labelledby=\"minEndLabel\"/>\n                                        </td>\n                                    </tr>\n                                    <tr>\n                                        <td style={{ width: '50%' }}>\n                                            <div id=\"maxStartLabel\" className=\"userselect\">MaxStart</div>\n                                        </td>\n                                        <td style={{ width: '50%' }}>\n                                            <NumericTextBoxComponent value={60} min={0} max={100} change={this.maxStart.bind(this)} ref={(obj) => {\n                this.maxStartObj = obj;\n            }} aria-labelledby=\"maxStartLabel\"/>\n                                        </td>\n                                    </tr>\n                                    <tr>\n                                        <td style={{ width: '50%' }}>\n                                            <div id=\"maxEndLabel\" className=\"userselect\">MaxEnd</div>\n                                        </td>\n                                        <td style={{ width: '50%' }}>\n                                            <NumericTextBoxComponent value={90} min={0} max={100} change={this.maxEnd.bind(this)} ref={(obj) => {\n                this.maxEndObj = obj;\n            }} aria-labelledby=\"maxEndLabel\"/>\n                                        </td>\n                                    </tr>\n                                    <tr>\n                                        <td style={{ width: '50%' }}>\n                                            <div id=\"lockFirstHandleLabel\" className=\"userselect\">Lock First Handle</div>\n                                        </td>\n                                        <td style={{ width: '50%' }}>\n                                            <CheckBoxComponent ref={(scope) => { this.fixOneObj = scope; }} change={this.fixOneChange.bind(this)} aria-labelledby=\"lockFirstHandleLabel\"/>\n                                        </td>\n                                    </tr>\n                                    <tr>\n                                        <td style={{ width: '50%' }}>\n                                            <div id=\"lockSecondHandleLabel\" className=\"userselect\">Lock Second Handle</div>\n                                        </td>\n                                        <td style={{ width: '50%' }}>\n                                            <CheckBoxComponent ref={(scope) => { this.fixTwoObj = scope; }} change={this.fixTwoChange.bind(this)} aria-labelledby=\"lockSecondHandleLabel\"/>\n                                        </td>\n                                    </tr>\n                                </tbody>\n                            </table>\n                        </PropertyPane>\n                    </div>\n\n\n                </div>\n            </div>);\n    }\n}\n\nconst root = createRoot(document.getElementById('sample'));\nroot.render(<Limits />);","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n                this.rendereComplete();\n            });\n        }\n    }\n    export function updateSampleSection(){}\n    ","dependencies":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-react-base\":\"*\",\"@syncfusion/ej2-inputs\":\"*\",\"@syncfusion/ej2-react-inputs\":\"*\",\"@syncfusion/ej2-dropdowns\":\"*\",\"@syncfusion/ej2-react-dropdowns\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-react-buttons\":\"*\",\"markdown-spellcheck\":\"^1.3.1\",\"@syncfusion/ej2-popups\":\"*\",\"@syncfusion/ej2-splitbuttons\":\"*\",\"@syncfusion/ej2-icons\":\"*\",\"@syncfusion/ej2-react-charts\":\"*\",\"@syncfusion/ej2/base\":\"*\",\"@syncfusion/ej2-charts'; // Import the necessary types from Syncfusion\":\"*\",\"@syncfusion/ej2-lists\":\"*\",\"@syncfusion/ej2-documenteditor\":\"*\",\"@syncfusion/ej2-navigations\":\"*\",\"@syncfusion/ej2-react-popups\":\"*\",\"@syncfusion/ej2-pivotview\":\"*\",\"@syncfusion/ej2-react-progressbar\":\"*\"}"}