{"index.css":"/* css */","index.html":"<!DOCTYPE html>\n<html>\n<head>\n    <title>Syncfusion React Sample</title>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\n    <meta name=\"author\" content=\"Syncfusion\" />\n    <link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\n</head>\n\n<body class=\"{{theme}}\">\n     <style>\n            .control-section\n            {\n                margin-top: 100px;\n            }\n    </style>\n    <div id='sample'>\n</body>\n</html>\n","index.js":"import { createRoot } from 'react-dom/client';\nimport './index.css';\nimport * as React from 'react';\nimport { useRef } from \"react\";\nimport { SliderComponent } from '@syncfusion/ej2-react-inputs';\n\nimport { isNullOrUndefined } from '@syncfusion/ej2-base';\nconst slidercss = `\r\n.sliderwrap .label-text {\r\n    font-weight: 500;\r\n}\r\n\r\n.content-wrapper {\r\n    width: 80%;\r\n    margin: 0 auto;\r\n    min-width: 185px;\r\n}\r\n\r\n.sliderwrap {\r\n    margin-top: 40px;\r\n}\r\n\r\n#slider01 .e-handle,\r\n#out .e-handle,\r\n.bootstrap #out .e-handle,\r\n.bootstrap #slider01 .e-handle,\r\n.fabric #out .e-handle,\r\n.fabric #slider01 .e-handle,\r\n.highcontrast #out .e-handle,\r\n.highcontrast #slider01 .e-handle {\r\n    background-color: #ffd939;\r\n    border-color: #ffd939;\r\n    z-index: 1;\r\n}\r\n\r\n.e-bigger .content-wrapper {\r\n    width: 80%;\r\n}\r\n\r\n.sliderwrap label {\r\n    padding-bottom: 26px;\r\n    font-size: 13px;\r\n    font-weight: 500;\r\n    margin-top: 15px;\r\n}\r\n\r\n.userselect {\r\n    -webkit-user-select: none;\r\n    /* Safari 3.1+ */\r\n    -moz-user-select: none;\r\n    /* Firefox 2+ */\r\n    -ms-user-select: none;\r\n    /* IE 10+ */\r\n    user-select: none;\r\n    /* Standard syntax */\r\n}\r\n\r\n.e-slider-tooltip.e-tooltip-wrap.e-popup.e-slider-tooltip .e-tip-content,\r\n.e-slider-tooltip.e-tooltip-wrap.e-popup.e-material-range .e-tip-content.e-material-tooltip-show {\r\n    color: #333;\r\n}\r\n\r\n.e-tooltip-cutomization.e-slider-tooltip.e-tooltip-wrap.e-popup .e-arrow-tip-inner{\r\n    color: #ffd939;\r\n}\r\n\r\n.e-tooltip-cutomization.e-slider-tooltip.e-tooltip-wrap.e-popup .e-arrow-tip-outer {\r\n    border-top-color: #ffd939;\r\n}\r\n\r\n.e-tooltip-cutomization.e-slider-tooltip.e-tooltip-wrap.e-popup .e-arrow-tip-outer {\r\n    border-bottom-color: #ffd939;\r\n}\r\n\r\n.e-slider-container .e-slider#slider01 .e-range,\r\n.e-slider-container .e-slider#out .e-range {\r\n    background-color: #0375be;\r\n    z-index: unset;\r\n}\r\n.e-tooltip-cutomization.e-slider-tooltip.e-tooltip-wrap.e-popup.e-material-default.e-slider-horizontal-after,\r\n.e-tooltip-cutomization.e-slider-tooltip.e-tooltip-wrap.e-popup.e-material-default.e-slider-horizontal-before,\r\n.e-tooltip-cutomization.e-slider-tooltip.e-tooltip-wrap.e-popup {\r\n    background-color: #ffd939;\r\n    border-color: #ffd939;\r\n}\r\n\r\n.bootstrap .e-tooltip-cutomization.e-slider-tooltip.e-tooltip-wrap.e-popup .e-arrow-tip-outer {\r\n    border-top-color: #ffd939;\r\n}\r\n\r\n.bootstrap .e-tooltip-cutomization.e-slider-tooltip.e-tooltip-wrap.e-popup .e-arrow-tip-inner {\r\n    color: #ffd939;\r\n}\r\n\r\nbody.fluent2-highcontrast .sliderwrap .e-scale,\r\nbody.fluent2 .sliderwrap .e-scale,\r\nbody.fluent2-dark .sliderwrap .e-scale {\r\n    top: 2px;\r\n}\r\n\r\nbody.tailwind3 .sliderwrap .e-tick-after.e-scale.e-h-scale .e-tick,\r\nbody.tailwind3-dark .sliderwrap .e-tick-after.e-scale.e-h-scale .e-tick,\r\nbody.tailwind3.e-bigger .sliderwrap .e-tick-after.e-scale.e-h-scale .e-tick\r\nbody.tailwind3-dark.e-bigger .sliderwrap .e-tick-after.e-scale.e-h-scale .e-tick {\r\n    top: 0px;\r\n}\r\n`;\nconst TooltipCustomization = () => {\n    // Set slider minimum and maximum values\n    // new Date(Year, Month, day, hours, minutes, seconds, millseconds)\n    let min = new Date(2013, 6, 13, 11).getTime();\n    let sliderMin = new Date(2013, 6, 13, 11).getTime();\n    let sliderMax = new Date(2013, 6, 13, 23).getTime();\n    let max = new Date(2013, 6, 13, 23).getTime();\n    // Initialize ticks with placement, largestep, smallste\n    let value = [new Date(2013, 6, 13, 12).getTime(), new Date(2013, 6, 13, 18).getTime()];\n    let ticks = {\n        placement: 'After',\n        // 3 * 3600000 milliseconds = 3 Hour\n        largeStep: 3 * 3600000,\n        smallStep: 3600000, showSmallTicks: true\n    };\n    // Initialize tooltip with placement\n    let tooltip = {\n        placement: 'Before', isVisible: true, cssClass: 'e-tooltip-cutomization'\n    };\n    let sliderTooltip = {\n        placement: 'Before', isVisible: true, cssClass: 'e-tooltip-cutomization'\n    };\n    let timeObj = useRef(null);\n    let sliderObj = useRef(null);\n    const tooltipChangeHandler = (args) => {\n        /**\n         * toLocaleTimeString is predefined javascript date function, which is used to\n         * customize the date in different format\n         */\n        let custom = { hour: '2-digit', minute: '2-digit' };\n        // Splitting the range values from the tooltip using space into an array.\n        if (args.text.indexOf('-') !== -1) {\n            let totalMiliSeconds = args.text.split(' ');\n            // First part is the first handle value\n            let firstPart = totalMiliSeconds[0];\n            // Second part is the second handle value\n            let secondPart = totalMiliSeconds[2];\n            firstPart = new Date(Number(firstPart)).toLocaleTimeString('en-us', custom);\n            secondPart = new Date(Number(secondPart)).toLocaleTimeString('en-us', custom);\n            // Assigning our custom text to the tooltip value.\n            args.text = firstPart + ' - ' + secondPart;\n        }\n        else {\n            args.text = 'Until ' + new Date(Number(args.text)).toLocaleTimeString('en-us', custom);\n        }\n    };\n    let sliderTicks = {\n        placement: 'After',\n        // 3 * 3600000 milliseconds = 3 Hour\n        largeStep: 3 * 3600000,\n        smallStep: 3600000, showSmallTicks: true\n    };\n    const onRenderingTicks = (args) => {\n        let totalMiliSeconds = Number(args.value);\n        /**\n         * toLocaleTimeString is predefined javascript date function, which is used to\n         * customize the date in different format\n         */\n        let custom = { hour: '2-digit', minute: '2-digit' };\n        // Assigning our custom text to the tick value.\n        args.text = new Date(totalMiliSeconds).toLocaleTimeString('en-us', custom);\n    };\n    // Handler used to reposition the tooltip on page scroll\n    const onScroll = () => {\n        if (sliderObj.current && timeObj.current) {\n            timeObj.current.refreshTooltip(timeObj.tooltipTarget);\n            sliderObj.current.refreshTooltip(sliderObj.tooltipTarget);\n        }\n    };\n    if (!isNullOrUndefined(document.getElementById('right-pane'))) {\n        document.getElementById('right-pane').addEventListener('scroll', onScroll.bind(this));\n    }\n    return (<div className='control-pane'>\r\n            <style>{slidercss}</style>\r\n            <div className='col-lg-12-control-section'>\r\n                <div className=\"content-wrapper\">\r\n                    <div className=\"sliderwrap\">\r\n                        <label className=\"labeltext userselect\">\r\n                            <span className=\"label-text\">Background color</span>\r\n                        </label>\r\n                        <SliderComponent id=\"slider01\" value={value} min={min} max={max} step={3600000 / 6} ticks={ticks} type=\"Range\" tooltip={tooltip} tooltipChange={tooltipChangeHandler.bind(this)} ref={timeObj} renderingTicks={onRenderingTicks.bind(this)}/>\r\n                    </div>\r\n                    <div className=\"sliderwrap\">\r\n                        <label className=\"labeltext userselect\">\r\n                            <span className=\"label-text\">Color and text</span>\r\n                        </label>\r\n                        {/* Ticks slider element - */}\r\n                        <SliderComponent id=\"out\" value={new Date(2013, 6, 13, 17).getTime()} min={sliderMin} max={sliderMax} step={3600000 / 6} ticks={sliderTicks} type=\"MinRange\" tooltip={sliderTooltip} tooltipChange={tooltipChangeHandler.bind(this)} ref={sliderObj} renderingTicks={onRenderingTicks.bind(this)}/>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>);\n};\nexport default TooltipCustomization;\n\nconst root = createRoot(document.getElementById('sample'));\nroot.render(<TooltipCustomization />);","dependencies":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-react-base\":\"*\",\"@syncfusion/ej2-inputs\":\"*\",\"@syncfusion/ej2-react-inputs\":\"*\",\"@syncfusion/ej2-icons\":\"*\",\"markdown-spellcheck\":\"^1.3.1\",\"@syncfusion/ej2-react-charts\":\"*\",\"@syncfusion/ej2/base\":\"*\",\"@syncfusion/ej2-charts'; // Import the necessary types from Syncfusion\":\"*\",\"@syncfusion/ej2-lists\":\"*\",\"@syncfusion/ej2-documenteditor\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-splitbuttons\":\"*\",\"@syncfusion/ej2-navigations\":\"*\",\"@syncfusion/ej2-react-popups\":\"*\",\"@syncfusion/ej2-pivotview\":\"*\",\"@syncfusion/ej2-react-progressbar\":\"*\"}"}