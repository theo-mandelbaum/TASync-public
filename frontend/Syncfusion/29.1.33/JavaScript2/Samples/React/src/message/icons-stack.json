{"index.css":".msg-icon-section .content-section {\n    margin: 0 auto;\n    max-width: 520px;\n    padding-top: 10px;\n}\n\n.msg-icon-section .e-message {\n    margin: 10px 0;\n}\n\n.msg-icon-section .e-btn {\n    display: block;\n    margin: 10px 0;\n}\n\n.msg-icon-section .e-btn.msg-hidden {\n    display: none;\n}\n","property-pane.js":"import * as ReactDOM from 'react-dom';\nimport * as React from 'react';\nimport { select } from '@syncfusion/ej2-base';\nexport class PropertyPane extends React.Component {\n    render() {\n        const mobilePropPane = select('.sb-mobile-prop-pane');\n        const isMobile = window.matchMedia('(max-width:550px)').matches;\n        return isMobile && mobilePropPane ?\n            ReactDOM.createPortal(<div className='property-panel-section'>\n                    <div className=\"property-panel-header\">\n                        {this.props.title}\n                    </div>\n                    <div className=\"property-panel-content\">\n                        {this.props.children}\n                    </div>\n                </div>, mobilePropPane)\n            :\n                (<div className='property-panel-section'>\n                    <div className=\"property-panel-header\">\n                        {this.props.title}\n                    </div>\n                    <div className=\"property-panel-content\">\n                        {this.props.children}\n                    </div>\n                </div>);\n    }\n}\n","index.html":"<!DOCTYPE html>\n<html>\n<head>\n    <title>Syncfusion React Sample</title>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\n    <meta name=\"author\" content=\"Syncfusion\" />\n    <link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\n</head>\n\n<body class=\"{{theme}}\">\n     <style>\n            .control-section\n            {\n                margin-top: 100px;\n            }\n    </style>\n    <div id='sample'>\n</body>\n</html>\n","index.js":"import { createRoot } from 'react-dom/client';\nimport './index.css';\nimport * as React from 'react';\nimport { SampleBase } from './sample-base';\nimport { MessageComponent } from '@syncfusion/ej2-react-notifications';\nimport { ButtonComponent, CheckBoxComponent } from '@syncfusion/ej2-react-buttons';\nimport { getComponent } from '@syncfusion/ej2-base';\n\nimport { PropertyPane } from './property-pane';\nexport class Icons extends SampleBase {\n    msgDefault;\n    msgSuccess;\n    msgInfo;\n    msgWarning;\n    msgError;\n    defaultBtn;\n    warningBtn;\n    successBtn;\n    infoBtn;\n    errorBtn;\n    defaultClick() {\n        this.show(this.msgDefault, this.defaultBtn);\n    }\n    defaultClosed() {\n        this.defaultBtn.element.classList.remove('msg-hidden');\n    }\n    infoClick() {\n        this.show(this.msgInfo, this.infoBtn);\n    }\n    infoClosed() {\n        this.infoBtn.element.classList.remove('msg-hidden');\n    }\n    successClick() {\n        this.show(this.msgSuccess, this.successBtn);\n    }\n    successClosed() {\n        this.successBtn.element.classList.remove('msg-hidden');\n    }\n    warningClick() {\n        this.show(this.msgWarning, this.warningBtn);\n    }\n    warningClosed() {\n        this.warningBtn.element.classList.remove('msg-hidden');\n    }\n    errorClick() {\n        this.show(this.msgError, this.errorBtn);\n    }\n    errorClosed() {\n        this.errorBtn.element.classList.remove('msg-hidden');\n    }\n    severityIconChange(args) {\n        let msgTypes = [\"default\", \"info\", \"success\", \"warning\", \"error\"];\n        for (let i = 0; i <= 4; i++) {\n            let msgObj = getComponent(document.getElementById(\"msg_\" + msgTypes[i] + \"_icon\"), \"message\");\n            if (msgObj) {\n                if (args.checked) {\n                    msgObj.showIcon = true;\n                }\n                else {\n                    msgObj.showIcon = false;\n                }\n            }\n        }\n    }\n    closeIconChange(args) {\n        let msgTypes = [\"default\", \"info\", \"success\", \"warning\", \"error\"];\n        for (let i = 0; i <= 4; i++) {\n            let msgObj = getComponent(document.getElementById(\"msg_\" + msgTypes[i] + \"_icon\"), \"message\");\n            if (msgObj) {\n                if (args.checked) {\n                    msgObj.showCloseIcon = true;\n                }\n                else {\n                    msgObj.showCloseIcon = false;\n                }\n            }\n        }\n    }\n    show(message, btn) {\n        message.visible = true;\n        btn.element.classList.add('msg-hidden');\n    }\n    render() {\n        return (<div className='control-pane'>\n                <div className=\"col-lg-8 control-section msg-icon-section\">\n                    <div className=\"content-section\">\n                        <ButtonComponent id=\"btn1\" ref={(scope) => { this.defaultBtn = scope; }} content=\"Show Default Message\" cssClass=\"e-outline e-primary msg-hidden\" onClick={this.defaultClick.bind(this)}></ButtonComponent>\n                        <MessageComponent id=\"msg_default_icon\" ref={(scope) => { this.msgDefault = scope; }} showCloseIcon={true} closed={this.defaultClosed.bind(this)}>Editing is restricted</MessageComponent>\n                        <ButtonComponent id=\"btn2\" ref={(scope) => { this.infoBtn = scope; }} content=\"Show Info Message\" cssClass=\"e-outline e-primary e-info msg-hidden\" onClick={this.infoClick.bind(this)}></ButtonComponent>\n                        <MessageComponent id=\"msg_info_icon\" severity=\"Info\" ref={(scope) => { this.msgInfo = scope; }} showCloseIcon={true} closed={this.infoClosed.bind(this)}>Please read the comments carefully</MessageComponent>\n                        <ButtonComponent id=\"btn3\" ref={(scope) => { this.successBtn = scope; }} content=\"Show Success Message\" cssClass=\"e-outline e-primary e-success msg-hidden\" onClick={this.successClick.bind(this)}></ButtonComponent>\n                        <MessageComponent id=\"msg_success_icon\" severity=\"Success\" ref={(scope) => { this.msgSuccess = scope; }} showCloseIcon={true} closed={this.successClosed.bind(this)}> Your message has been sent successfully</MessageComponent>\n                        <ButtonComponent id=\"btn4\" ref={(scope) => { this.warningBtn = scope; }} content=\"Show Warning Message\" cssClass=\"e-outline e-primary e-warning msg-hidden\" onClick={this.warningClick.bind(this)}></ButtonComponent>\n                        <MessageComponent id=\"msg_warning_icon\" severity=\"Warning\" ref={(scope) => { this.msgWarning = scope; }} showCloseIcon={true} closed={this.warningClosed.bind(this)}>There was a problem with your network connection</MessageComponent>\n                        <ButtonComponent id=\"btn5\" ref={(scope) => { this.errorBtn = scope; }} content=\"Show Error Message\" cssClass=\"e-outline e-primary e-error msg-hidden\" onClick={this.errorClick.bind(this)}></ButtonComponent>\n                        <MessageComponent id=\"msg_error_icon\" severity=\"Error\" ref={(scope) => { this.msgError = scope; }} showCloseIcon={true} closed={this.errorClosed.bind(this)}>A problem occurred while submitting your data</MessageComponent>\n                    </div>\n                </div>\n\n                <div className=\"col-lg-4 property-section\">\n                    <PropertyPane title='Properties'>\n                        <table id=\"property\" title=\"Properties\">\n                            <tbody>\n                                <tr>\n                                    <td style={{ padding: '10px' }}>\n                                        <CheckBoxComponent label='Severity Icon' checked={true} change={this.severityIconChange}></CheckBoxComponent>\n                                    </td>\n                                </tr>\n                                <tr>\n                                    <td style={{ padding: '10px' }}>\n                                        <CheckBoxComponent label='Close Icon' checked={true} change={this.closeIconChange}></CheckBoxComponent>\n                                    </td>\n                                </tr>\n                            </tbody>\n                        </table>\n                    </PropertyPane>\n                </div>\n            </div>);\n    }\n}\n\nconst root = createRoot(document.getElementById('sample'));\nroot.render(<Icons />);","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n                this.rendereComplete();\n            });\n        }\n    }\n    export function updateSampleSection(){}\n    ","dependencies":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-react-base\":\"*\",\"@syncfusion/ej2-notifications\":\"*\",\"@syncfusion/ej2-react-notifications\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-react-buttons\":\"*\",\"@syncfusion/ej2-icons\":\"*\",\"markdown-spellcheck\":\"^1.3.1\",\"@syncfusion/ej2-react-charts\":\"*\",\"@syncfusion/ej2/base\":\"*\",\"@syncfusion/ej2-charts'; // Import the necessary types from Syncfusion\":\"*\",\"@syncfusion/ej2-lists\":\"*\",\"@syncfusion/ej2-documenteditor\":\"*\",\"@syncfusion/ej2-splitbuttons\":\"*\",\"@syncfusion/ej2-navigations\":\"*\",\"@syncfusion/ej2-react-popups\":\"*\"}"}