{"index.css":"/* css */","index.html":"<!DOCTYPE html>\n<html>\n<head>\n    <title>Syncfusion React Sample</title>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\n    <meta name=\"author\" content=\"Syncfusion\" />\n    <link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\n</head>\n\n<body class=\"{{theme}}\">\n     <style>\n            .control-section\n            {\n                margin-top: 100px;\n            }\n    </style>\n    <div id='sample'>\n</body>\n</html>\n","index.js":"import { createRoot } from 'react-dom/client';\nimport './index.css';\nimport * as React from 'react';\nimport { SampleBase } from './sample-base';\nimport { FileManagerComponent, Inject, NavigationPane, DetailsView, Toolbar, ToolbarItemsDirective, ToolbarItemDirective } from '@syncfusion/ej2-react-filemanager';\nimport { DropDownButtonComponent } from '@syncfusion/ej2-react-splitbuttons';\n/**\n * File Manager folder upload sample\n */\nexport class DirectoryUpload extends SampleBase {\n    fmObj;\n    hostUrl = \"https://ej2-aspcore-service.azurewebsites.net/\";\n    items = [{ text: 'Folder' }, { text: 'Files' }];\n    uploadTemplate() {\n        return (<DropDownButtonComponent id=\"dropButton\" items={this.items} iconCss='e-icons e-fe-upload' cssClass=\"e-tbar-btn e-tbtn-txt\" select={this.onSelect.bind(this)} onClick={this.uploadClick.bind(this)}>\n                <span className=\"e-tbar-btn-text\">Upload</span>\n            </DropDownButtonComponent>);\n    }\n    uploadClick(e) {\n        e.stopPropagation();\n    }\n    onSelect(args) {\n        if (args.item.text === 'Folder') {\n            this.fmObj.uploadSettings.directoryUpload = true;\n        }\n        else {\n            this.fmObj.uploadSettings.directoryUpload = false;\n        }\n        setTimeout(function () {\n            let uploadBtn = document.querySelector('.e-file-select-wrap button');\n            uploadBtn.click();\n        }, 100);\n    }\n    render() {\n        return (<div>\n                <div className=\"control-section\">\n                    <FileManagerComponent id=\"file\" ref={(scope) => { this.fmObj = scope; }} ajaxSettings={{\n                url: this.hostUrl + \"api/FileManager/FileOperations\",\n                getImageUrl: this.hostUrl + \"api/FileManager/GetImage\",\n                uploadUrl: this.hostUrl + 'api/FileManager/Upload',\n                downloadUrl: this.hostUrl + 'api/FileManager/Download'\n            }} contextMenuSettings={{\n                file: ['Cut', 'Copy', '|', 'Delete', 'Download', 'Rename', '|', 'Details'],\n                visible: true\n            }}>\n                        <ToolbarItemsDirective>\n                            <ToolbarItemDirective name='NewFolder'/>\n                            <ToolbarItemDirective template={this.uploadTemplate.bind(this)} name=\"Upload\"/>\n                            <ToolbarItemDirective name=\"SortBy\"/>\n                            <ToolbarItemDirective name=\"Refresh\"/>\n                            <ToolbarItemDirective name=\"Cut\"/>\n                            <ToolbarItemDirective name=\"Copy\"/>\n                            <ToolbarItemDirective name=\"Paste\"/>\n                            <ToolbarItemDirective name=\"Delete\"/>\n                            <ToolbarItemDirective name=\"Download\"/>\n                            <ToolbarItemDirective name=\"Rename\"/>\n                            <ToolbarItemDirective name=\"Selection\"/>\n                            <ToolbarItemDirective name=\"View\"/>\n                            <ToolbarItemDirective name=\"Details\"/>\n                        </ToolbarItemsDirective>\n                            <Inject services={[NavigationPane, DetailsView, Toolbar]}/>\n                    </FileManagerComponent>\n\n                </div>\n            </div>);\n    }\n}\n\nconst root = createRoot(document.getElementById('sample'));\nroot.render(<DirectoryUpload />);","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n                this.rendereComplete();\n            });\n        }\n    }\n    export function updateSampleSection(){}\n    ","dependencies":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-react-base\":\"*\",\"@syncfusion/ej2-filemanager\":\"*\",\"@syncfusion/ej2-react-filemanager\":\"*\",\"@syncfusion/ej2-splitbuttons\":\"*\",\"@syncfusion/ej2-react-splitbuttons\":\"*\",\"@syncfusion/ej2-react-charts\":\"*\",\"@syncfusion/ej2/base\":\"*\",\"@syncfusion/ej2-charts'; // Import the necessary types from Syncfusion\":\"*\",\"@syncfusion/ej2-lists\":\"*\",\"@syncfusion/ej2-documenteditor\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-navigations\":\"*\",\"@syncfusion/ej2-react-popups\":\"*\"}"}