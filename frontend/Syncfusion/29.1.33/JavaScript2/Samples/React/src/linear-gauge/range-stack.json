{"index.css":"/* css */","index.html":"<!DOCTYPE html>\n<html>\n<head>\n    <title>Syncfusion React Sample</title>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\n    <meta name=\"author\" content=\"Syncfusion\" />\n    <link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\n</head>\n\n<body class=\"{{theme}}\">\n     <style>\n            .control-section\n            {\n                margin-top: 100px;\n            }\n    </style>\n    <div id='sample'>\n</body>\n</html>\n","index.js":"import { createRoot } from 'react-dom/client';\nimport './index.css';\nimport * as React from \"react\";\nimport { LinearGaugeComponent, AxesDirective, AxisDirective, Inject, PointersDirective, Gradient, PointerDirective, RangesDirective, RangeDirective } from '@syncfusion/ej2-react-lineargauge';\nimport { SampleBase } from './sample-base';\nconst SAMPLE_CSS = `\n     .control-fluid {\n         padding: 0px !important;\n     }`;\nexport class Ranges extends SampleBase {\n    defaultRange;\n    exponentialRange;\n    concaveRange;\n    gradientRange;\n    multipleRange;\n    load(args) {\n    }\n    horizontalGauge(e) {\n        this.defaultRange.width = this.exponentialRange.width = this.concaveRange.width = this.gradientRange.width = this.multipleRange.width = '450px';\n        this.defaultRange.height = this.exponentialRange.height = this.concaveRange.height = this.gradientRange.height = this.multipleRange.height = '150px';\n        this.defaultRange.orientation = this.exponentialRange.orientation = this.concaveRange.orientation = this.gradientRange.orientation = this.multipleRange.orientation = \"Horizontal\";\n        if (e.currentTarget != null) {\n            e.currentTarget['style']['color'] = \"white\";\n            e.currentTarget['style']['backgroundColor'] = \"#0074E3\";\n            document.getElementById('vertical').style.color = \"black\";\n            document.getElementById('vertical').style.backgroundColor = \"white\";\n            document.getElementById('containerDefault').className = document.getElementById('containerExponential').className =\n                document.getElementById('containerConcave').className = document.getElementById('containerGradient').className =\n                    document.getElementById('containerMultiple').className = \"col-xs-12 col-sm-12 col-lg-12 col-md-12\";\n            document.getElementById('containerBox').style.padding = \"0%\";\n        }\n    }\n    verticalGauge(e) {\n        this.defaultRange.width = this.exponentialRange.width = this.concaveRange.width = this.gradientRange.width = this.multipleRange.width = '150px';\n        this.defaultRange.height = this.exponentialRange.height = this.concaveRange.height = this.gradientRange.height = this.multipleRange.height = '350px';\n        this.defaultRange.orientation = this.exponentialRange.orientation = this.concaveRange.orientation = this.gradientRange.orientation = this.multipleRange.orientation = \"Vertical\";\n        if (e.currentTarget != null) {\n            e.currentTarget['style']['color'] = \"white\";\n            e.currentTarget['style']['backgroundColor'] = \"#0074E3\";\n            document.getElementById('horizontal')['style']['color'] = \"black\";\n            document.getElementById('horizontal')['style']['backgroundColor'] = \"white\";\n            document.getElementById('containerDefault').className = document.getElementById('containerExponential').className =\n                document.getElementById('containerConcave').className = document.getElementById('containerGradient').className =\n                    document.getElementById('containerMultiple').className = \"col-xs-4 col-sm-4 col-lg-2 col-md-2\";\n            document.getElementById('containerBox').style.display = \"flex\";\n            document.getElementById('containerBox').style.padding = \"4%\";\n        }\n    }\n    rangeLinearGradient = {\n        startValue: \"0%\",\n        endValue: \"100%\",\n        colorStop: [\n            { color: \"#FB7D55\", offset: \"0%\", opacity: 1 },\n            { color: \"#ECC85B\", offset: \"50%\", opacity: 1 },\n            { color: \"#6FC78A\", offset: \"100%\", opacity: 1 }\n        ]\n    };\n    render() {\n        return (<main><div className='control-pane'>\n                <style>\n                    {SAMPLE_CSS}\n                </style>\n                <div className=\"control-section\">\n                    <div className=\"col-xs-12 col-sm-12 col-lg-12 col-md-12\" style={{ display: 'flex', justifyContent: 'center', alignItems: 'center' }}>\n                        <div style={{ margin: 'auto', padding: '10px' }}>\n                            <table role='none'>\n                                <tbody>\n                                    <tr>\n                                        <td>\n                                            <div id='horizontal' style={{ padding: '6px', cursor: 'pointer', width: '86px', color: 'black', fontSize: '15px', border: '1px solid #0074E3', backgroundColor: 'white', textAlign: 'center' }} onClick={this.horizontalGauge.bind(this)}>Horizontal</div>\n                                        </td>\n                                        <td>\n                                            <div id='vertical' style={{ padding: '6px', cursor: 'pointer', width: '86px', color: 'white', fontSize: '15px', border: '1px solid #0074E3', backgroundColor: '#0074E3', textAlign: 'center' }} onClick={this.verticalGauge.bind(this)}>Vertical</div>\n                                        </td>\n                                    </tr>\n                                </tbody>\n                            </table>\n                        </div>\n                    </div>\n                    <pre style={{ border: 'hidden', backgroundColor: 'inherit' }}></pre>\n                    <div id=\"containerBox\" style={{ float: 'left', padding: '4%' }}></div>\n                    <div id='containerDefault' className=\"col-xs-4 col-sm-4 col-lg-2 col-md-2\" style={{ display: 'flex', justifyContent: 'center', alignItems: 'center' }}>\n                        <LinearGaugeComponent load={this.load.bind(this)} animationDuration={2000} id='defaultRange' title='Default' titleStyle={{ fontFamily: 'inherit', fontWeight: '499' }} orientation='Vertical' width='150px' height='350px' background='transparent' ref={defaultRange => this.defaultRange = defaultRange}>\n                            <AxesDirective>\n                                <AxisDirective line={{ width: 5 }} minorTicks={{ interval: 10, height: 3, position: 'Outside' }} majorTicks={{ interval: 20, height: 7, width: 1, position: 'Outside' }} labelStyle={{ position: 'Outside', font: { fontFamily: 'inherit' } }} minimum={0} maximum={100} opposedPosition={true}>\n                                    <PointersDirective>\n                                        <PointerDirective width={0}>\n                                        </PointerDirective>\n                                    </PointersDirective>\n                                    <RangesDirective>\n                                        <RangeDirective start={0} end={100} startWidth={10} endWidth={10} color='#F45656' offset={5}>\n                                        </RangeDirective>\n                                    </RangesDirective>\n                                </AxisDirective>\n                            </AxesDirective>\n                        </LinearGaugeComponent>\n                    </div>\n                    <div id='containerExponential' className=\"col-xs-4 col-sm-4 col-lg-2 col-md-2\" style={{ display: 'flex', justifyContent: 'center', alignItems: 'center' }}>\n                        <LinearGaugeComponent load={this.load.bind(this)} animationDuration={2000} title='Exponential' titleStyle={{ fontFamily: 'inherit', fontWeight: '499' }} id='exponentialRange' orientation='Vertical' width='150px' height='350px' background='transparent' ref={exponentialRange => this.exponentialRange = exponentialRange}>\n                            <AxesDirective>\n                                <AxisDirective line={{ width: 5 }} minorTicks={{ interval: 10, height: 3, position: 'Outside' }} majorTicks={{ interval: 20, height: 7, width: 1, position: 'Outside' }} labelStyle={{ position: 'Outside', font: { fontFamily: 'inherit' } }} minimum={0} maximum={100} opposedPosition={true}>\n                                    <PointersDirective>\n                                        <PointerDirective width={0}>\n                                        </PointerDirective>\n                                    </PointersDirective>\n                                    <RangesDirective>\n                                        <RangeDirective start={0} end={50} startWidth={2} endWidth={15} color='#F45656' offset={5}>\n                                        </RangeDirective>\n                                        <RangeDirective start={50} end={100} startWidth={15} endWidth={50} color='#F45656' offset={5}>\n                                        </RangeDirective>\n                                    </RangesDirective>\n                                </AxisDirective>\n                            </AxesDirective>\n                        </LinearGaugeComponent>\n                    </div>\n                    <div id='containerConcave' className=\"col-xs-4 col-sm-4 col-lg-2 col-md-2\" style={{ display: 'flex', justifyContent: 'center', alignItems: 'center' }}>\n                        <LinearGaugeComponent load={this.load.bind(this)} animationDuration={2000} title='Concave' titleStyle={{ fontFamily: 'inherit', fontWeight: '499' }} id='concaveRange' orientation='Vertical' width='150px' height='350px' background='transparent' ref={concaveRange => this.concaveRange = concaveRange}>\n                            <AxesDirective>\n                                <AxisDirective line={{ width: 5 }} minorTicks={{ interval: 10, height: 3, position: 'Outside' }} majorTicks={{ interval: 20, height: 7, width: 1, position: 'Outside' }} labelStyle={{ position: 'Outside', font: { fontFamily: 'inherit' } }} minimum={0} maximum={100} opposedPosition={true}>\n                                    <PointersDirective>\n                                        <PointerDirective width={0}>\n                                        </PointerDirective>\n                                    </PointersDirective>\n                                    <RangesDirective>\n                                        <RangeDirective start={0} end={50} color='#F45656' startWidth={50} endWidth={20} offset={5}></RangeDirective>\n                                        <RangeDirective start={50} end={100} color='#F45656' startWidth={20} endWidth={50} offset={5}></RangeDirective>\n                                    </RangesDirective>\n                                </AxisDirective>\n                            </AxesDirective>\n                        </LinearGaugeComponent>\n                    </div>\n                    <div id='containerGradient' className=\"col-xs-4 col-sm-4 col-lg-2 col-md-2\" style={{ display: 'flex', justifyContent: 'center', alignItems: 'center' }}>\n                        <LinearGaugeComponent load={this.load.bind(this)} animationDuration={2000} title='Gradient shader' titleStyle={{ fontFamily: 'inherit', fontWeight: '499' }} id='gradientRange' orientation='Vertical' width='150px' height='350px' background='transparent' ref={gradientRange => this.gradientRange = gradientRange}>\n                            <Inject services={[Gradient]}/>\n                            <AxesDirective>\n                                <AxisDirective line={{ width: 5 }} minorTicks={{ interval: 10, height: 3, position: 'Outside' }} majorTicks={{ interval: 20, height: 7, width: 1, position: 'Outside' }} labelStyle={{ position: 'Outside', font: { fontFamily: 'inherit' } }} minimum={0} maximum={100} opposedPosition={true}>\n                                    <PointersDirective>\n                                        <PointerDirective width={0}>\n                                        </PointerDirective>\n                                    </PointersDirective>\n                                    <RangesDirective>\n                                        <RangeDirective start={0} end={100} startWidth={50} endWidth={50} offset={5} linearGradient={this.rangeLinearGradient}></RangeDirective>\n                                    </RangesDirective>\n                                </AxisDirective>\n                            </AxesDirective>\n                        </LinearGaugeComponent>\n                    </div>\n                    <div id='containerMultiple' className=\"col-xs-4 col-sm-4 col-lg-2 col-md-2\" style={{ display: 'flex', justifyContent: 'center', alignItems: 'center' }}>\n                        <LinearGaugeComponent load={this.load.bind(this)} animationDuration={2000} title='Multiple ranges' titleStyle={{ fontFamily: 'inherit', fontWeight: '499' }} id='multipleRange' orientation='Vertical' width='150px' height='350px' background='transparent' ref={multipleRange => this.multipleRange = multipleRange}>\n                            <AxesDirective>\n                                <AxisDirective line={{ width: 5 }} minorTicks={{ interval: 10, height: 3, position: 'Outside' }} majorTicks={{ interval: 20, height: 7, width: 1, position: 'Outside' }} labelStyle={{ position: 'Outside', font: { fontFamily: 'inherit' } }} minimum={0} maximum={100} opposedPosition={true}>\n                                    <PointersDirective>\n                                        <PointerDirective width={0}>\n                                        </PointerDirective>\n                                    </PointersDirective>\n                                    <RangesDirective>\n                                        <RangeDirective start={0} end={30} color='#FB7D55' startWidth={50} endWidth={50} offset={5}></RangeDirective>\n                                        <RangeDirective start={30} end={65} color='#ECC85B' startWidth={50} endWidth={50} offset={5}></RangeDirective>\n                                        <RangeDirective start={65} end={100} color='#6FC78A' startWidth={50} endWidth={50} offset={5}></RangeDirective>\n                                    </RangesDirective>\n                                </AxisDirective>\n                            </AxesDirective>\n                        </LinearGaugeComponent>\n                    </div>\n                </div>\n            </div>\n                <section id=\"action-description\" aria-label=\"Description of Linear Gauge sample\">\n                    <p>\n                        This sample demonstrates the various customization options for the linear gauge's range. For example, an exponential appearance, a gradient color, and a multiple range.\n                    </p>\n                </section>\n                <section id=\"description\" aria-label=\"Description of the Linear Gauge features demonstrated in this sample\">\n                    <p>\n                        In this example, you can see how to render and configure ranges in the linear gauge. The <a target=\"_blank\" href=\"https://ej2.syncfusion.com/react/documentation/api/linear-gauge/rangeModel/\">RangesDirective</a>, <a target=\"_blank\" href=\"https://ej2.syncfusion.com/react/documentation/api/linear-gauge/rangeModel/\">RangeDirective</a> and <a target=\"_blank\" href=\"https://ej2.syncfusion.com/react/documentation/api/linear-gauge/linearGradientModel/\">linearGradient</a> are used to display multiple ranges, perform range customization, and apply gradient colors, respectively.\n                    </p>\n                    <p>\n                        More information on the ranges can be found in this <a target=\"_blank\" href=\"https://ej2.syncfusion.com/react/documentation/linear-gauge/ranges/\">documentation section</a>.\n                    </p>\n                </section>\n        </main>);\n    }\n}\n\nconst root = createRoot(document.getElementById('sample'));\nroot.render(<Ranges />);","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n                this.rendereComplete();\n            });\n        }\n    }\n    export function updateSampleSection(){}\n    ","dependencies":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-react-base\":\"*\",\"@syncfusion/ej2-lineargauge\":\"*\",\"@syncfusion/ej2-react-lineargauge\":\"*\",\"@syncfusion/ej2-react-charts\":\"*\",\"@syncfusion/ej2/base\":\"*\",\"@syncfusion/ej2-charts'; // Import the necessary types from Syncfusion\":\"*\",\"@syncfusion/ej2-lists\":\"*\",\"@syncfusion/ej2-documenteditor\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-splitbuttons\":\"*\",\"@syncfusion/ej2-navigations\":\"*\",\"@syncfusion/ej2-react-popups\":\"*\"}"}