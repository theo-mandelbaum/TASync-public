{"index.css":"/* css */","property-pane.js":"import * as ReactDOM from 'react-dom';\nimport * as React from 'react';\nimport { select } from '@syncfusion/ej2-base';\nexport class PropertyPane extends React.Component {\n    render() {\n        const mobilePropPane = select('.sb-mobile-prop-pane');\n        const isMobile = window.matchMedia('(max-width:550px)').matches;\n        return isMobile && mobilePropPane ?\n            ReactDOM.createPortal(<div className='property-panel-section'>\n                    <div className=\"property-panel-header\">\n                        {this.props.title}\n                    </div>\n                    <div className=\"property-panel-content\">\n                        {this.props.children}\n                    </div>\n                </div>, mobilePropPane)\n            :\n                (<div className='property-panel-section'>\n                    <div className=\"property-panel-header\">\n                        {this.props.title}\n                    </div>\n                    <div className=\"property-panel-content\">\n                        {this.props.children}\n                    </div>\n                </div>);\n    }\n}\n","index.html":"<!DOCTYPE html>\n<html>\n<head>\n    <title>Syncfusion React Sample</title>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\n    <meta name=\"author\" content=\"Syncfusion\" />\n    <link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\n</head>\n\n<body class=\"{{theme}}\">\n     <style>\n            .control-section\n            {\n                margin-top: 100px;\n            }\n    </style>\n    <div id='sample'>\n</body>\n</html>\n","index.js":"import { createRoot } from 'react-dom/client';\nimport './index.css';\nimport * as React from \"react\";\nimport { useEffect, useRef, useState } from \"react\";\nimport { LinearGaugeComponent, AxesDirective, AxisDirective, PointersDirective, PointerDirective } from '@syncfusion/ej2-react-lineargauge';\nimport { PropertyPane } from './property-pane';\n\nimport { DropDownListComponent } from '@syncfusion/ej2-react-dropdowns';\nconst Container = () => {\n    const [orientation, setOrientation] = useState('Vertical');\n    const [containerType, setContainerType] = useState('Thermometer');\n    let gaugeInstance = useRef(null);\n    let orientationElement = useRef(null);\n    let containerElement = useRef(null);\n    let droplist = [\n        { value: 'Vertical' },\n        { value: 'Horizontal' }\n    ];\n    let modelist = [\n        { value: 'Thermometer', text: 'Thermometer' },\n        { value: 'Normal', text: 'Normal' },\n        { value: 'RoundedRectangle', text: 'Rounded Rectangle' }\n    ];\n    const load = (args) => {\n    };\n    const orienatationChange = (args) => {\n        setOrientation(args.value);\n    };\n    const containerChange = (args) => {\n        setContainerType(args.value);\n    };\n    return (<main><div className='control-pane'>\n            <div className='control-section row'>\n                <div className='col-lg-8'>\n                    <LinearGaugeComponent orientation={orientation} load={load.bind(this)} id='gauge' background='transparent' ref={gaugeInstance} title='Temperature Measure' titleStyle={{ fontFamily: 'inherit' }} container={{ width: 13, type: containerType, roundedCornerRadius: 5 }}>\n                        <AxesDirective>\n                            <AxisDirective minimum={0} maximum={180} line={{ width: 0 }} minorTicks={{ color: '#9e9e9e', height: 10, interval: 10 }} majorTicks={{ interval: 20, color: '#9e9e9e', height: 20 }} labelStyle={{ font: { fontFamily: 'inherit' } }}>\n                                <PointersDirective>\n                                    <PointerDirective value={90} height={13} width={13} type='Bar' color='#f02828'/>\n                                </PointersDirective>\n                            </AxisDirective>\n                            <AxisDirective minimum={0} maximum={180} opposedPosition={true} line={{ width: 0 }} majorTicks={{ color: '#9e9e9e', interval: 20, height: 20 }} minorTicks={{ height: 10, interval: 10, color: '#9e9e9e' }} labelStyle={{ font: { fontFamily: 'inherit' } }}>\n                                <PointersDirective>\n                                    <PointerDirective width={0}/>\n                                </PointersDirective>\n                            </AxisDirective>\n                        </AxesDirective>\n                    </LinearGaugeComponent>\n                </div>\n                <div className='col-lg-4 property-section'>\n                    {/* Property Panel */}\n                    <PropertyPane title='Properties'>\n                        <table id='property' role=\"none\" title='Properties' className='property-panel-table' style={{ width: '100%', marginTop: '5px' }}>\n                            <colgroup>\n                                <col span={1} style={{ width: \"40%\" }}></col>\n                                <col span={1} style={{ width: \"60%\" }}></col>\n                            </colgroup>\n                            <tbody>\n                            <tr style={{ height: '42px' }}>\n                                <td>\n                                    <div style={{ paddingLeft: '0px', fontSize: \"14px\" }}>Orientation</div>\n                                </td>\n                                <td>\n                                    <div style={{ width: \"90%\", paddingLeft: \"0px\" }}>\n                                        <DropDownListComponent width={'110%'} id=\"orientationMode\" style={{ \"width\": \"100%\" }} change={orienatationChange} className=\"form-control\" ref={orientationElement} dataSource={droplist} fields={{ text: 'value', value: 'value' }} value=\"Vertical\"/>\n                                    </div>\n                                </td>\n                            </tr>\n                            <tr style={{ height: '50px', paddingTop: '15px' }}>\n                                <td>\n                                    <div style={{ marginTop: \"-20px\", paddingLeft: '0px', fontSize: \"14px\" }}>Container Type</div>\n                                </td>\n                                <td>\n                                    <div style={{ paddingBottom: '20px', width: '90%', paddingLeft: \"0px\" }}>\n                                        <DropDownListComponent width={'110%'} id=\"containerMode\" style={{ \"width\": \"90%\" }} change={containerChange} className=\"form-control\" ref={containerElement} dataSource={modelist} fields={{ text: 'text', value: 'value' }} value=\"Thermometer\"/>\n                                    </div>\n                                </td>\n                            </tr>\n                           </tbody>\n                        </table>\n                    </PropertyPane>\n                </div>\n            </div>\n        </div>\n            <section id=\"action-description\" aria-label=\"Description of Linear Gauge sample\">\n                <p>This sample shows the different types of containers, such as normal, thermometer, and rounded rectangle. The linear gauge's orientation can also be changed from vertical to horizontal.</p>\n            </section>\n            <section id=\"description\" aria-label=\"Description of the Linear Gauge features demonstrated in this sample\">\n                <p>\n                    The linear gauge can be rendered vertically or horizontally depending on the option selected in the <b>Orientation</b> drop-down list. You can also select the container type from the <b>Container Type</b> drop-down list.\n                </p>\n                <p>\n                    More information on the containers can be found in this <a target=\"_blank\" href=\"https://ej2.syncfusion.com/react/documentation/linear-gauge/appearance/#customizing-the-linear-gauge-container\">documentation section</a>. Likewise, information about orientation can be found in this <a target=\"_blank\" href=\"https://ej2.syncfusion.com/react/documentation/linear-gauge/axis/#orientation\">documentation section</a>.\n                </p>\n            </section>\n    </main>);\n};\nexport default Container;\n\nconst root = createRoot(document.getElementById('sample'));\nroot.render(<Container />);","dependencies":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-react-base\":\"*\",\"@syncfusion/ej2-lineargauge\":\"*\",\"@syncfusion/ej2-react-lineargauge\":\"*\",\"@syncfusion/ej2-dropdowns\":\"*\",\"@syncfusion/ej2-react-dropdowns\":\"*\",\"@syncfusion/ej2-react-charts\":\"*\",\"@syncfusion/ej2/base\":\"*\",\"@syncfusion/ej2-charts'; // Import the necessary types from Syncfusion\":\"*\",\"@syncfusion/ej2-lists\":\"*\",\"@syncfusion/ej2-documenteditor\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-splitbuttons\":\"*\",\"@syncfusion/ej2-navigations\":\"*\",\"@syncfusion/ej2-react-popups\":\"*\"}"}