{"index.css":"/* css */","property-pane.js":"import * as ReactDOM from 'react-dom';\nimport * as React from 'react';\nimport { select } from '@syncfusion/ej2-base';\nexport class PropertyPane extends React.Component {\n    render() {\n        const mobilePropPane = select('.sb-mobile-prop-pane');\n        const isMobile = window.matchMedia('(max-width:550px)').matches;\n        return isMobile && mobilePropPane ?\n            ReactDOM.createPortal(<div className='property-panel-section'>\n                    <div className=\"property-panel-header\">\n                        {this.props.title}\n                    </div>\n                    <div className=\"property-panel-content\">\n                        {this.props.children}\n                    </div>\n                </div>, mobilePropPane)\n            :\n                (<div className='property-panel-section'>\n                    <div className=\"property-panel-header\">\n                        {this.props.title}\n                    </div>\n                    <div className=\"property-panel-content\">\n                        {this.props.children}\n                    </div>\n                </div>);\n    }\n}\n","index.html":"<!DOCTYPE html>\n<html>\n<head>\n    <title>Syncfusion React Sample</title>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\n    <meta name=\"author\" content=\"Syncfusion\" />\n    <link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\n</head>\n\n<body class=\"{{theme}}\">\n     <style>\n            .control-section\n            {\n                margin-top: 100px;\n            }\n    </style>\n    <div id='sample'>\n</body>\n</html>\n","index.js":"import { createRoot } from 'react-dom/client';\nimport './index.css';\nimport * as React from \"react\";\nimport { LinearGaugeComponent, AxesDirective, AxisDirective, Inject, PointersDirective, PointerDirective, Annotations, RangeDirective, RangesDirective, Print, PdfExport, ImageExport } from '@syncfusion/ej2-react-lineargauge';\nimport { SampleBase } from './sample-base';\nimport { ButtonComponent } from '@syncfusion/ej2-react-buttons';\nimport { DropDownListComponent } from '@syncfusion/ej2-react-dropdowns';\nimport { PropertyPane } from './property-pane';\nimport { TextBoxComponent } from \"@syncfusion/ej2-react-inputs\";\nconst SAMPLE_CSS = `\n    .control-fluid {\n\t\tpadding: 0px !important;\n    }\n    \n    #btn-control {\n        width: 100%;\n        text-align: center;\n        text-transform:none !important;\n    }\n\n    .e-play-icon::before {\n        content: '\\\\e728';\n    }\n\n\t.e-play-icon1::before {\n        content: \"\\\\e34b\";\n    }\n\n    .e-view.fluent .e-play-icon::before, .e-view.fluent-dark .e-play-icon::before {\n        content: '\\\\e72e';\n    }\n\n    .e-view.fluent .e-play-icon1::before, .e-view.fluent-dark .e-play-icon1::before {\n        content: '\\\\e75d';\n    }\n   \n    .e-view.fabric .e-play-icon1::before, .e-view.fabric-dark .e-play-icon1::before\n    {\n        content: '\\\\e7df';\n    }\n\n    .e-view.fabric .e-play-icon::before, .e-view.fabric-dark .e-play-icon::before \n    {\n        content: '\\\\e710';\n    }\n\n    .e-view.bootstrap .e-play-icon1::before {\n        content: '\\\\ebd2';\n    }\n\n    .e-view.bootstrap4 .e-play-icon::before {\n        content: '\\\\e780';\n    }\n\n    .e-view.bootstrap4 .e-play-icon1::before {\n        content: '\\\\e743';\n    }\n\n    .e-view.highcontrast .e-play-icon1::before {\n        content: '\\\\ebf9';\n    }\n\n    .e-view.highcontrast .e-play-icon::before {\n        content: '\\\\e710';\n    }\n\n    .e-view.bootstrap5 .e-play-icon::before, .e-view.bootstrap5-dark .e-play-icon::before {\n        content: '\\\\e72e';\n    }\n\n    .e-view.bootstrap5 .e-play-icon1::before, .e-view.bootstrap5-dark .e-play-icon1::before {\n        content: '\\\\e75d';\n    }`;\nexport class Export extends SampleBase {\n    gauge;\n    mode;\n    textElement;\n    type = [\n        { value: 'JPEG' },\n        { value: 'PNG' },\n        { value: 'SVG' },\n        { value: 'PDF' }\n    ];\n    load(args) {\n    }\n    onClickPrint(e) {\n        this.gauge.print();\n    }\n    onClickExport(e) {\n        let fileName = this.textElement.value;\n        this.gauge.export(this.mode.value, fileName);\n    }\n    render() {\n        return (<main><div className='control-pane'>\n                <style>\n                    {SAMPLE_CSS}\n                </style>\n                <div className='control-section row'>\n                    <div className='col-lg-8'>\n                        <LinearGaugeComponent load={this.load.bind(this)} id='gauge' allowPrint={true} allowPdfExport={true} allowImageExport={true} title='Speedometer' titleStyle={{ fontFamily: 'inherit' }} orientation='Horizontal' ref={gauge => this.gauge = gauge}>\n                            <Inject services={[Annotations, Print, PdfExport, ImageExport]}/>\n                            <AxesDirective>\n                                <AxisDirective minimum={0} maximum={120} line={{ width: 0 }} minorTicks={{ height: 7, width: 0, interval: 4 }} majorTicks={{ height: 0, width: 0, interval: 20 }} labelStyle={{ position: \"Outside\", font: { fontFamily: 'inherit' }, offset: 4 }}>\n                                    <RangesDirective>\n                                        <RangeDirective start={0} end={20} startWidth={15} endWidth={25} color='#82b944'>\n                                        </RangeDirective>\n                                        <RangeDirective start={20} end={40} startWidth={25} endWidth={35} color='#a1cb43'>\n                                        </RangeDirective>\n                                        <RangeDirective start={40} end={60} startWidth={35} endWidth={45} color='#ddec12'>\n                                        </RangeDirective>\n                                        <RangeDirective start={60} end={80} startWidth={45} endWidth={55} color='#ffbc00'>\n                                        </RangeDirective>\n                                        <RangeDirective start={80} end={100} startWidth={55} endWidth={65} color='#ff6000'>\n                                        </RangeDirective>\n                                        <RangeDirective start={100} end={120} startWidth={65} endWidth={75} color='red'>\n                                        </RangeDirective>\n                                    </RangesDirective>\n                                    <PointersDirective>\n                                        <PointerDirective value={80} height={23} width={35} offset={-55} markerType='Triangle' border={{ width: 2, color: 'white' }}>\n                                        </PointerDirective>\n                                    </PointersDirective>\n                                </AxisDirective>\n                            </AxesDirective>\n                        </LinearGaugeComponent>\n                    </div>\n                    {/* Property Panel */}\n                    <div className='col-lg-4 property-section'>\n                        <PropertyPane title='Properties'>\n                            <table id='property' role=\"none\" title='Properties' className='property-panel-table' style={{ width: '100%' }}>\n                              <tbody>\n                                <tr style={{ height: \"50px\" }}>\n                                    <td>\n                                        <div style={{ width: '80%', marginLeft: '-10px' }}>Export Type</div>\n                                    </td>\n                                    <td>\n                                        <div>\n                                            <DropDownListComponent width={'100%'} id=\"etype\" value=\"JPEG\" ref={d => this.mode = d} dataSource={this.type} fields={{ text: 'value', value: 'value' }} placeholder=\"JPEG\"/>\n                                        </div>\n                                    </td>\n                                </tr>\n                                <tr style={{ height: \"50px\" }}>\n                                    <td>\n                                        <div style={{ width: '80%', marginLeft: '-10px' }}>File Name</div>\n                                    </td>\n                                    <td>\n                                        <div style={{ 'marginTop': '0px', height: '45px' }}>\n                                            <TextBoxComponent className=\"e-input\" value='Linear Gauge' style={{ width: '100%', padding: \"0px\", paddingLeft: '5px' }} id=\"fileName\" ref={d => this.textElement = d}></TextBoxComponent>\n                                        </div>\n                                    </td>\n                                </tr>\n                                <tr style={{ height: '60px' }}>\n                                    <td style={{ width: '50%' }}>\n                                        <div id=\"btn-control\">\n                                            <ButtonComponent onClick={this.onClickExport.bind(this)} style={{ marginLeft: '30%' }} isPrimary={true}>Export</ButtonComponent>\n                                        </div>\n                                    </td>\n                                    <td style={{ width: '50%' }}>\n                                        <div id=\"btn-control\">\n                                            <ButtonComponent onClick={this.onClickPrint.bind(this)} style={{ marginLeft: '-20%' }} isPrimary={true}>Print</ButtonComponent>\n                                        </div>\n                                    </td>\n                                </tr>\n                              </tbody>\n                            </table>\n                        </PropertyPane>\n                    </div>\n                </div>\n            </div>\n                <section id=\"action-description\" aria-label=\"Description of Linear Gauge sample\">\n                    <p>\n                        This sample demonstrates the print and export functionalities of the linear gauge.\n                    </p>\n                </section>\n                <section id=\"description\" aria-label=\"Description of the Linear Gauge features demonstrated in this sample\">\n                    <p>\n                        In this example, you can see how to print and export the rendered linear gauge. You can add print functionality by using the <a target=\"_blank\" href=\"https://ej2.syncfusion.com/react/documentation/api/linear-gauge/#print\">print</a> method when <a target=\"_blank\" href=\"https://ej2.syncfusion.com/react/documentation/api/linear-gauge/#allowprint\">allowPrint</a> is set as <b>true</b>. Also, you can add export functionality by using the <a target=\"_blank\" href=\"https://ej2.syncfusion.com/react/documentation/api/linear-gauge/#export\">export</a> method when <a target=\"_blank\" href=\"https://ej2.syncfusion.com/react/documentation/api/linear-gauge/#allowimageexport\">allowImageExport</a> and <a target=\"_blank\" href=\"https://ej2.syncfusion.com/react/documentation/api/linear-gauge/#allowpdfexport\">allowPdfExport</a> are set as <b>true</b>. The linear gauge can be exported to JPEG, PNG, SVG, and PDF formats.\n                    </p>\n                    <p>\n                        More information about print and export can be found in this <a target=\"_blank\" href=\"https://ej2.syncfusion.com/react/documentation/linear-gauge/print-and-export/\">documentation section</a>.\n                    </p>\n                </section>\n        </main>);\n    }\n}\n\nconst root = createRoot(document.getElementById('sample'));\nroot.render(<Export />);","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n                this.rendereComplete();\n            });\n        }\n    }\n    export function updateSampleSection(){}\n    ","dependencies":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-react-base\":\"*\",\"@syncfusion/ej2-lineargauge\":\"*\",\"@syncfusion/ej2-react-lineargauge\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-react-buttons\":\"*\",\"@syncfusion/ej2-dropdowns\":\"*\",\"@syncfusion/ej2-react-dropdowns\":\"*\",\"@syncfusion/ej2-inputs\":\"*\",\"@syncfusion/ej2-react-inputs\":\"*\",\"@syncfusion/ej2-react-charts\":\"*\",\"@syncfusion/ej2/base\":\"*\",\"@syncfusion/ej2-charts'; // Import the necessary types from Syncfusion\":\"*\",\"@syncfusion/ej2-lists\":\"*\",\"@syncfusion/ej2-documenteditor\":\"*\",\"@syncfusion/ej2-splitbuttons\":\"*\",\"@syncfusion/ej2-navigations\":\"*\",\"@syncfusion/ej2-react-popups\":\"*\"}"}