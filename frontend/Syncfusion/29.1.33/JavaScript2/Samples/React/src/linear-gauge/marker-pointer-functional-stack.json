{"index.css":"/* css */","index.html":"<!DOCTYPE html>\n<html>\n<head>\n    <title>Syncfusion React Sample</title>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\n    <meta name=\"author\" content=\"Syncfusion\" />\n    <link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\n</head>\n\n<body class=\"{{theme}}\">\n     <style>\n            .control-section\n            {\n                margin-top: 100px;\n            }\n    </style>\n    <div id='sample'>\n</body>\n</html>\n","index.js":"import { createRoot } from 'react-dom/client';\nimport './index.css';\nimport * as React from \"react\";\nimport { useEffect, useState, useRef } from \"react\";\nimport { LinearGaugeComponent, AxesDirective, AxisDirective, PointersDirective, PointerDirective } from '@syncfusion/ej2-react-lineargauge';\n\nconst SAMPLE_CSS = `\n    .control-fluid {\n        padding: 0px !important;\n    }`;\nconst MarkerPointer = () => {\n    const [gaugeWidth, setGaugeWidth] = useState(\"150px\");\n    const [gaugeTextWidth, setGaugeTextWidth] = useState(\"168px\");\n    const [gaugeHeight, setGaugeHeight] = useState(\"350px\");\n    const [gaugeOriention, setOrientation] = useState('Vertical');\n    const [verticalColor, setVerticalColor] = useState(\"white\");\n    const [verticalBgColor, setVerticalBgColor] = useState(\"#0074E3\");\n    const [horizontalColor, setHorizontalColor] = useState(\"black\");\n    const [horizontalBgColor, setHorizontalBgColor] = useState(\"white\");\n    const [classStyle, setClassStyle] = useState(\"col-xs-4 col-sm-4 col-lg-2 col-md-2\");\n    const [display, setDisplay] = useState(\"flex\");\n    const [padding, setPadding] = useState(\"4%\");\n    let invertedPointer = useRef(null);\n    let circlePointer = useRef(null);\n    let textPointer = useRef(null);\n    let rectanglePointer = useRef(null);\n    let multiplePointer = useRef(null);\n    const horizontalGauge = (e) => {\n        setGaugeWidth('450px');\n        setGaugeTextWidth('450px');\n        setGaugeHeight('150px');\n        setOrientation(\"Horizontal\");\n        if (e.currentTarget != null) {\n            setHorizontalColor(\"white\");\n            setHorizontalBgColor(\"#0074E3\");\n            setVerticalColor(\"black\");\n            setVerticalBgColor(\"white\");\n            setClassStyle(\"col-xs-12 col-sm-12 col-lg-12 col-md-12\");\n            setDisplay(\"\");\n            setPadding(\"0%\");\n        }\n    };\n    const verticalGauge = (e) => {\n        setGaugeWidth('150px');\n        setGaugeTextWidth('168px');\n        setGaugeHeight('350px');\n        setOrientation(\"Vertical\");\n        if (e.currentTarget != null) {\n            setVerticalColor(\"white\");\n            setVerticalBgColor(\"#0074E3\");\n            setHorizontalColor(\"black\");\n            setHorizontalBgColor(\"white\");\n            setClassStyle(\"col-xs-4 col-sm-4 col-lg-2 col-md-2\");\n            setDisplay(\"flex\");\n            setPadding(\"4%\");\n        }\n    };\n    const load = (args) => {\n    };\n    const dragStartTriangle = (args) => {\n        invertedPointer.current.axes[0].pointers[0].animationDuration = 0;\n        invertedPointer.current.axes[0].pointers[1].animationDuration = 0;\n    };\n    const dragEndTriangle = (args) => {\n        invertedPointer.current.axes[0].pointers[0].animationDuration = 1500;\n        invertedPointer.current.axes[0].pointers[1].animationDuration = 1500;\n    };\n    const dragMoveTriangle = (args) => {\n        if (args.pointerIndex == 1) {\n            invertedPointer.current.setPointerValue(0, 0, args.currentValue);\n        }\n    };\n    const dragEndCircle = (args) => {\n        circlePointer.current.axes[0].pointers[0].animationDuration = 1500;\n        circlePointer.current.axes[0].pointers[1].animationDuration = 1500;\n    };\n    const dragStartCircle = (args) => {\n        circlePointer.current.axes[0].pointers[0].animationDuration = 0;\n        circlePointer.current.axes[0].pointers[1].animationDuration = 0;\n    };\n    const dragMoveCircle = (args) => {\n        if (args.pointerIndex == 1) {\n            circlePointer.current.setPointerValue(0, 0, args.currentValue);\n        }\n    };\n    const dragEndText = (args) => {\n        textPointer.current.axes[0].pointers[0].animationDuration = 1500;\n        textPointer.current.axes[0].pointers[1].animationDuration = 1500;\n    };\n    const dragStartText = (args) => {\n        textPointer.current.axes[0].pointers[0].animationDuration = 0;\n        textPointer.current.axes[0].pointers[1].animationDuration = 0;\n    };\n    const dragMoveText = (args) => {\n        if (args.pointerIndex == 1) {\n            textPointer.current.axes[0].pointers[1].text = Math.round(args.currentValue).toString() + \" Points\";\n            textPointer.current.setPointerValue(0, 0, args.currentValue);\n        }\n    };\n    const dragEndRectangle = (args) => {\n        rectanglePointer.current.axes[0].pointers[0].animationDuration = 1500;\n        rectanglePointer.current.axes[0].pointers[1].animationDuration = 1500;\n    };\n    const dragStartRectangle = (args) => {\n        rectanglePointer.current.axes[0].pointers[0].animationDuration = 0;\n        rectanglePointer.current.axes[0].pointers[1].animationDuration = 0;\n    };\n    const dragMoveRectangle = (args) => {\n        if (args.pointerIndex == 1) {\n            rectanglePointer.current.setPointerValue(0, 0, args.currentValue);\n        }\n    };\n    const dragEndMultiple = (args) => {\n        if (args.pointerIndex == 1) {\n            multiplePointer.current.axes[0].pointers[0].animationDuration = 1500;\n            multiplePointer.current.axes[0].pointers[1].animationDuration = 1500;\n        }\n    };\n    const dragStartMultiple = (args) => {\n        if (args.pointerIndex == 1) {\n            multiplePointer.current.axes[0].pointers[0].animationDuration = 0;\n            multiplePointer.current.axes[0].pointers[1].animationDuration = 0;\n        }\n    };\n    const dragMoveMultiple = (args) => {\n        if (args.pointerIndex == 1) {\n            multiplePointer.current.setPointerValue(0, 0, args.currentValue);\n        }\n    };\n    return (<main>\n        <div className='control-pane'>\n            <style>{SAMPLE_CSS}</style>\n            <div className=\"control-section\">\n                <div className=\"col-xs-12 col-sm-12 col-lg-12 col-md-12\" style={{ display: 'flex', justifyContent: 'center', alignItems: 'center' }}>\n                    <div style={{ margin: 'auto', padding: '10px' }}>\n                        <table role='none'>\n                            <tbody>\n                                <tr>\n                                    <td>\n                                        <div id='horizontal' style={{ padding: '6px', cursor: 'pointer', width: '86px', color: horizontalColor, fontSize: '15px', border: '1px solid #0074E3', backgroundColor: horizontalBgColor, textAlign: 'center' }} onClick={horizontalGauge.bind(this)}>Horizontal</div>\n                                    </td>\n                                    <td>\n                                        <div id='vertical' style={{ padding: '6px', cursor: 'pointer', width: '86px', color: verticalColor, fontSize: '15px', border: '1px solid #0074E3', backgroundColor: verticalBgColor, textAlign: 'center' }} onClick={verticalGauge.bind(this)}>Vertical</div>\n                                    </td>\n                                </tr>\n                            </tbody>\n                        </table>\n                    </div>\n                </div>\n                <pre style={{ border: 'hidden', backgroundColor: 'inherit' }}></pre>\n                <div id=\"containerBox\" className=\"row\" style={{ float: 'left', padding: padding, display: display }}></div>\n                <div id='containerInverted' className={classStyle} style={{ display: 'flex', justifyContent: 'center', alignItems: 'center' }}>\n                    <LinearGaugeComponent animationDuration={2000} dragEnd={dragEndTriangle} dragStart={dragStartTriangle} dragMove={dragMoveTriangle} load={load} id='invertedMarker' title='Inverted triangle' titleStyle={{ fontFamily: 'inherit', fontWeight: '499' }} orientation={gaugeOriention} width={gaugeWidth} height={gaugeHeight} background='transparent' ref={invertedPointer}>\n                        <AxesDirective>\n                            <AxisDirective line={{ width: 5 }} minorTicks={{ interval: 10, height: 3 }} majorTicks={{ interval: 20, height: 7, width: 1 }} labelStyle={{ font: { fontFamily: 'inherit' } }} minimum={0} maximum={100} opposedPosition={true}>\n                                <PointersDirective>\n                                    <PointerDirective value={40} height={5} width={5} placement='Near' type='Bar' animationDuration={1500} offset='12' color='#0074E3'/>\n                                    <PointerDirective value={40} enableDrag={true} height={15} width={15} placement='Near' markerType='Triangle' animationDuration={1500}/>\n                                </PointersDirective>\n                            </AxisDirective>\n                        </AxesDirective>\n                    </LinearGaugeComponent>\n                </div>\n                <div id='containerCircle' className={classStyle} style={{ display: 'flex', justifyContent: 'center', alignItems: 'center' }}>\n                    <LinearGaugeComponent animationDuration={2000} dragStart={dragStartCircle} dragEnd={dragEndCircle} dragMove={dragMoveCircle} load={load} title='Circle' titleStyle={{ fontFamily: 'inherit', fontWeight: '499' }} id='circleMarker' orientation={gaugeOriention} width={gaugeWidth} height={gaugeHeight} background='transparent' ref={circlePointer}>\n                        <AxesDirective>\n                            <AxisDirective line={{ width: 5 }} minorTicks={{ interval: 10, height: 3 }} majorTicks={{ interval: 20, height: 7, width: 1 }} labelStyle={{ font: { fontFamily: 'inherit' } }} minimum={0} maximum={100} opposedPosition={true}>\n                                <PointersDirective>\n                                    <PointerDirective value={20} height={5} width={5} placement='Near' type='Bar' animationDuration={1500} offset='12' color='#0074E3'/>\n                                    <PointerDirective value={20} enableDrag={true} height={15} width={15} placement='Near' markerType='Circle' animationDuration={1500}/>\n                                </PointersDirective>\n                            </AxisDirective>\n                        </AxesDirective>\n                    </LinearGaugeComponent>\n                </div>\n                <div id='containerRectangle' className={classStyle} style={{ display: 'flex', justifyContent: 'center', alignItems: 'center' }}>\n                    <LinearGaugeComponent animationDuration={2000} dragStart={dragStartRectangle} dragEnd={dragEndRectangle} dragMove={dragMoveRectangle} load={load} title='Rectangle' titleStyle={{ fontFamily: 'inherit', fontWeight: '499' }} id='rectangleMarker' orientation={gaugeOriention} width={gaugeWidth} height={gaugeHeight} background='transparent' ref={rectanglePointer}>\n                        <AxesDirective>\n                            <AxisDirective line={{ width: 5 }} minorTicks={{ interval: 10, height: 3 }} majorTicks={{ interval: 20, height: 7, width: 1 }} labelStyle={{ font: { fontFamily: 'inherit' } }} minimum={0} maximum={100} opposedPosition={true}>\n                                <PointersDirective>\n                                    <PointerDirective value={30} height={5} width={5} placement='Near' type='Bar' animationDuration={1500} offset='12' color='#0074E3'/>\n                                    <PointerDirective value={30} enableDrag={true} height={5} width={15} placement='Near' markerType='Rectangle' animationDuration={1500}/>\n                                </PointersDirective>\n                            </AxisDirective>\n                        </AxesDirective>\n                    </LinearGaugeComponent>\n                </div>\n                <div id='containerText' className={classStyle} style={{ display: 'flex', justifyContent: 'center', alignItems: 'center' }}>\n                    <LinearGaugeComponent dragStart={dragStartText} animationDuration={2000} dragEnd={dragEndText} dragMove={dragMoveText} load={load} title='Text' titleStyle={{ fontFamily: 'inherit', fontWeight: '499' }} id='TextMarker' orientation={gaugeOriention} width={gaugeTextWidth} height={gaugeHeight} background='transparent' ref={textPointer}>\n                        <AxesDirective>\n                            <AxisDirective line={{ width: 5 }} minorTicks={{ interval: 10, height: 3 }} majorTicks={{ interval: 20, height: 7, width: 1 }} labelStyle={{ font: { fontFamily: 'inherit' } }} minimum={0} maximum={100} opposedPosition={true}>\n                                <PointersDirective>\n                                    <PointerDirective value={50} height={5} width={5} placement='Near' type='Bar' animationDuration={1500} offset='12' color='#0074E3'/>\n                                    <PointerDirective value={50} enableDrag={true} height={15} width={15} placement='Near' offset={-10} markerType='Text' text=\"50 Points\" animationDuration={1500}/>\n                                </PointersDirective>\n                            </AxisDirective>\n                        </AxesDirective>\n                    </LinearGaugeComponent>\n                </div>\n                <div id='containerMultiple' className={classStyle} style={{ display: 'flex', justifyContent: 'center', alignItems: 'center' }}>\n                    <LinearGaugeComponent animationDuration={2000} dragStart={dragStartMultiple} dragEnd={dragEndMultiple} dragMove={dragMoveMultiple} load={load} title='Multiple pointers' titleStyle={{ fontFamily: 'inherit', fontWeight: '499' }} id='multipleMarkers' orientation={gaugeOriention} width={gaugeWidth} height={gaugeHeight} background='transparent' ref={multiplePointer}>\n                        <AxesDirective>\n                            <AxisDirective line={{ width: 5 }} minorTicks={{ interval: 10, height: 3 }} majorTicks={{ interval: 20, height: 7, width: 1 }} labelStyle={{ font: { fontFamily: 'inherit' } }} minimum={0} maximum={100} opposedPosition={true}>\n                                <PointersDirective>\n                                    <PointerDirective value={10} height={5} width={5} placement='Near' type='Bar' animationDuration={1500} offset='12' color='#0074E3'/>\n                                    <PointerDirective value={10} enableDrag={true} height={15} width={15} placement='Near' markerType='Triangle' animationDuration={1500}/>\n                                    <PointerDirective value={100} enableDrag={true} height={15} width={15} placement='Near' markerType='Diamond' animationDuration={1500}/>\n                                </PointersDirective>\n                            </AxisDirective>\n                        </AxesDirective>\n                    </LinearGaugeComponent>\n                </div>\n            </div>\n        </div>\n            <section id=\"action-description\" aria-label=\"Description of Linear Gauge sample\">\n                <p>This sample shows the various marker pointer shapes available in the linear gauge. Additionally, multiple marker pointer, animation and drag support are enabled.</p>\n            </section>\n            <section id=\"description\" aria-label=\"Description of the Linear Gauge features demonstrated in this sample\">\n                <p>\n                    In this example, you can see how to render and configure marker pointer in the linear gauge. The <a target=\"_blank\" href=\"https://ej2.syncfusion.com/react/documentation/api/linear-gauge/pointerModel/\">PointersDirective</a> collection is useful for displaying multiple pointers. The properties available in <a target=\"_blank\" href=\"https://ej2.syncfusion.com/react/documentation/api/linear-gauge/pointerModel/\">PointerDirective</a> help in the customization of the marker pointer in the linear gauge. Drag pointers are assisted by the <a target=\"_blank\" href=\"https://ej2.syncfusion.com/react/documentation/api/linear-gauge/#dragstart\">dragStart</a> and <a target=\"_blank\" href=\"https://ej2.syncfusion.com/react/documentation/api/linear-gauge/#dragend\">dragEnd</a> events.\n                </p>\n                <p>\n                    More information on the marker pointer can be found in this <a target=\"_blank\" href=\"https://ej2.syncfusion.com/react/documentation/linear-gauge/pointers/#marker-pointer\">documentation section</a>.\n                </p>\n            </section>\n    </main>);\n};\nexport default MarkerPointer;\n\nconst root = createRoot(document.getElementById('sample'));\nroot.render(<MarkerPointer />);","dependencies":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-react-base\":\"*\",\"@syncfusion/ej2-lineargauge\":\"*\",\"@syncfusion/ej2-react-lineargauge\":\"*\",\"@syncfusion/ej2-react-charts\":\"*\",\"@syncfusion/ej2/base\":\"*\",\"@syncfusion/ej2-charts'; // Import the necessary types from Syncfusion\":\"*\",\"@syncfusion/ej2-lists\":\"*\",\"@syncfusion/ej2-documenteditor\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-splitbuttons\":\"*\",\"@syncfusion/ej2-navigations\":\"*\",\"@syncfusion/ej2-react-popups\":\"*\"}"}