{"index.css":"/* css */","index.html":"<!DOCTYPE html>\n<html>\n<head>\n    <title>Syncfusion React Sample</title>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\n    <meta name=\"author\" content=\"Syncfusion\" />\n    <link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\n</head>\n\n<body class=\"{{theme}}\">\n     <style>\n            .control-section\n            {\n                margin-top: 100px;\n            }\n    </style>\n    <div id='sample'>\n</body>\n</html>\n","index.js":"import { createRoot } from 'react-dom/client';\nimport './index.css';\nimport * as React from \"react\";\nimport { LinearGaugeComponent, AxesDirective, AxisDirective, PointersDirective, PointerDirective, RangesDirective, RangeDirective } from '@syncfusion/ej2-react-lineargauge';\nimport { SampleBase } from './sample-base';\nconst SAMPLE_CSS = `\n     .control-fluid {\n         padding: 0px !important;\n     }`;\nexport class Labels extends SampleBase {\n    customLabelGauge;\n    textLabelGauge;\n    offsetLabelGauge;\n    customizedLabelGauge;\n    pointerColor = '#E5E7EB';\n    load(args) {\n    }\n    textLabelLoad(args) {\n        this.pointerColor = '#E5E7EB';\n        if (args.gauge.theme === 'Fluent2Dark' || args.gauge.theme == 'Fluent2HighContrast') {\n            this.pointerColor = '#292827';\n        }\n        else if (args.gauge.theme === 'Bootstrap5Dark') {\n            this.pointerColor = '#343A40';\n        }\n        else if (args.gauge.theme === 'Tailwind3Dark') {\n            this.pointerColor = '#282F3C';\n        }\n        else if (args.gauge.theme === 'Material3') {\n            this.pointerColor = '#C4C7C5';\n        }\n        else if (args.gauge.theme === 'Material3Dark') {\n            this.pointerColor = '#938F99';\n        }\n    }\n    axisLabelRender(args) {\n        if (args.text == \"20\")\n            args.text = \"Ordered\";\n        else if (args.text == \"15\")\n            args.text = \"Packed\";\n        else if (args.text == \"10\")\n            args.text = \"Shipped\";\n        else if (args.text == \"5\")\n            args.text = \"Delivered\";\n        else\n            args.text = \" \";\n    }\n    horizontalGauge(e) {\n        this.customLabelGauge.width = this.textLabelGauge.width = this.offsetLabelGauge.width = this.customizedLabelGauge.width = '450px';\n        this.customLabelGauge.height = this.textLabelGauge.height = this.offsetLabelGauge.height = this.customizedLabelGauge.height = '150px';\n        this.customLabelGauge.orientation = this.textLabelGauge.orientation = this.offsetLabelGauge.orientation = this.customizedLabelGauge.orientation = \"Horizontal\";\n        if (e.currentTarget != null) {\n            e.currentTarget['style']['color'] = \"white\";\n            e.currentTarget['style']['backgroundColor'] = \"#0074E3\";\n            document.getElementById('vertical').style.color = \"black\";\n            document.getElementById('vertical').style.backgroundColor = \"white\";\n            document.getElementById('containerCustom').className = document.getElementById('containerText').className =\n                document.getElementById('containerOffset').className = document.getElementById('containerCustomized').className = \"col-xs-12 col-sm-12 col-lg-12 col-md-12\";\n        }\n    }\n    verticalGauge(e) {\n        this.customLabelGauge.width = this.textLabelGauge.width = this.offsetLabelGauge.width = this.customizedLabelGauge.width = '150px';\n        this.customLabelGauge.height = this.textLabelGauge.height = this.offsetLabelGauge.height = this.customizedLabelGauge.height = '350px';\n        this.customLabelGauge.orientation = this.textLabelGauge.orientation = this.offsetLabelGauge.orientation = this.customizedLabelGauge.orientation = \"Vertical\";\n        if (e.currentTarget != null) {\n            e.currentTarget['style']['color'] = \"white\";\n            e.currentTarget['style']['backgroundColor'] = \"#0074E3\";\n            document.getElementById('horizontal')['style']['color'] = \"black\";\n            document.getElementById('horizontal')['style']['backgroundColor'] = \"white\";\n            document.getElementById('containerCustom').className = document.getElementById('containerText').className =\n                document.getElementById('containerOffset').className = document.getElementById('containerCustomized').className =\n                    \"col-xs-5 col-sm-5 col-lg-3 col-md-3\";\n            document.getElementById('containerBox').style.display = \"flex\";\n        }\n    }\n    render() {\n        return (<main><div className='control-pane'>\n                <style>\n                    {SAMPLE_CSS}\n                </style>\n                <div className=\"control-section\">\n                    <div className=\"col-xs-12 col-sm-12 col-lg-12 col-md-12\" style={{ display: 'flex', justifyContent: 'center', alignItems: 'center' }}>\n                        <div style={{ margin: 'auto', padding: '10px' }}>\n                            <table role='none'>\n                                <tbody>\n                                    <tr>\n                                        <td>\n                                            <div id='horizontal' style={{ padding: '6px', cursor: 'pointer', width: '86px', color: 'black', fontSize: '15px', border: '1px solid #0074E3', backgroundColor: 'white', textAlign: 'center' }} onClick={this.horizontalGauge.bind(this)}>Horizontal</div>\n                                        </td>\n                                        <td>\n                                            <div id='vertical' style={{ padding: '6px', cursor: 'pointer', width: '86px', color: 'white', fontSize: '15px', border: '1px solid #0074E3', backgroundColor: '#0074E3', textAlign: 'center' }} onClick={this.verticalGauge.bind(this)}>Vertical</div>\n                                        </td>\n                                    </tr>\n                                </tbody>\n                            </table>\n                        </div>\n                    </div>\n                    <pre style={{ border: 'hidden', backgroundColor: 'inherit' }}></pre>\n                    <div id=\"containerBox\" style={{ float: 'left' }}></div>\n                    <div id=\"containerCustom\" className=\"col-xs-5 col-sm-5 col-lg-3 col-md-3\" style={{ display: 'flex', justifyContent: 'center', alignItems: 'center' }}>\n                        <LinearGaugeComponent load={this.load.bind(this)} animationDuration={1500} id='customLabelGauge' title='Custom labels' titleStyle={{ fontFamily: 'inherit', fontWeight: '499' }} orientation='Vertical' width='150px' height='350px' background='transparent' ref={customLabelGauge => this.customLabelGauge = customLabelGauge}>\n                            <AxesDirective>\n                                <AxisDirective line={{ width: 5 }} minorTicks={{ interval: 2.5, height: 3 }} majorTicks={{ interval: 5, height: 7, width: 1 }} labelStyle={{ format: '${value}', font: { fontFamily: 'inherit' } }} minimum={5} maximum={20} opposedPosition={true}>\n                                    <PointersDirective>\n                                        <PointerDirective width={0}>\n                                        </PointerDirective>\n                                    </PointersDirective>\n                                </AxisDirective>\n                            </AxesDirective>\n                        </LinearGaugeComponent>\n                    </div>\n                    <div id=\"containerText\" className=\"col-xs-5 col-sm-5 col-lg-3 col-md-3\" style={{ display: 'flex', justifyContent: 'center', alignItems: 'center' }}>\n                        <LinearGaugeComponent axisLabelRender={this.axisLabelRender.bind(this)} load={this.textLabelLoad.bind(this)} title='Text labels' titleStyle={{ fontFamily: 'inherit', fontWeight: '499' }} id='textLabelGauge' orientation='Vertical' width='150px' height='350px' background='transparent' ref={textLabelGauge => this.textLabelGauge = textLabelGauge}>\n                            <AxesDirective>\n                                <AxisDirective line={{ width: 5 }} minorTicks={{ interval: 2.5, height: 0 }} majorTicks={{ interval: 5, height: 0 }} labelStyle={{ offset: 10, font: { fontFamily: 'inherit' } }} minimum={5} maximum={20} opposedPosition={true}>\n                                    <PointersDirective>\n                                        <PointerDirective width={15} height={15} value={20} color='#0DC9AB' placement=\"Near\" markerType=\"Circle\" offset={7}>\n                                        </PointerDirective>\n                                        <PointerDirective width={15} height={15} value={15} color='#0DC9AB' placement=\"Near\" markerType=\"Circle\" offset={7}>\n                                        </PointerDirective>\n                                        <PointerDirective width={15} height={15} value={10} color='#0DC9AB' placement=\"Near\" markerType=\"Circle\" offset={7}>\n                                        </PointerDirective>\n                                        <PointerDirective width={15} height={15} value={5} color={this.pointerColor} placement=\"Near\" markerType=\"Circle\" offset={7}>\n                                        </PointerDirective>\n                                    </PointersDirective>\n                                    <RangesDirective>\n                                        <RangeDirective start={15} end={20} startWidth={5} endWidth={5} color='#0DC9AB'></RangeDirective>\n                                        <RangeDirective start={10} end={15} startWidth={5} endWidth={5} color='#0DC9AB'></RangeDirective>\n                                    </RangesDirective>\n                                </AxisDirective>\n                            </AxesDirective>\n                        </LinearGaugeComponent>\n                    </div>\n                    <div id=\"containerOffset\" className=\"col-xs-5 col-sm-5 col-lg-3 col-md-3\" style={{ display: 'flex', justifyContent: 'center', alignItems: 'center' }}>\n                        <LinearGaugeComponent load={this.load.bind(this)} animationDuration={1500} title='Label offset' titleStyle={{ fontFamily: 'inherit', fontWeight: '499' }} id='offsetLabelGauge' orientation='Vertical' width='150px' height='350px' background='transparent' ref={offsetLabelGauge => this.offsetLabelGauge = offsetLabelGauge}>\n                            <AxesDirective>\n                                <AxisDirective line={{ width: 5 }} minorTicks={{ interval: 10, height: 3 }} majorTicks={{ interval: 20, height: 7, width: 1 }} labelStyle={{ offset: 5, font: { fontFamily: 'inherit' } }} minimum={0} maximum={100} opposedPosition={true}>\n                                    <PointersDirective>\n                                        <PointerDirective width={0}>\n                                        </PointerDirective>\n                                    </PointersDirective>\n                                </AxisDirective>\n                            </AxesDirective>\n                        </LinearGaugeComponent>\n                    </div>\n                    <div id=\"containerCustomized\" className=\"col-xs-5 col-sm-5 col-lg-3 col-md-3\" style={{ display: 'flex', justifyContent: 'center', alignItems: 'center' }}>\n                        <LinearGaugeComponent load={this.load.bind(this)} animationDuration={1500} title='Label customization' titleStyle={{ fontFamily: 'inherit', fontWeight: '499' }} id='customizedLabelGauge' orientation='Vertical' width='150px' height='350px' background='transparent' ref={customizedLabelGauge => this.customizedLabelGauge = customizedLabelGauge}>\n                            <AxesDirective>\n                                <AxisDirective line={{ width: 5 }} minorTicks={{ interval: 10, height: 3 }} majorTicks={{ interval: 20, height: 7, width: 1 }} labelStyle={{ font: { color: '#F93106', fontFamily: 'inherit' } }} minimum={0} maximum={100} opposedPosition={true}>\n                                    <PointersDirective>\n                                        <PointerDirective width={0}>\n                                        </PointerDirective>\n                                    </PointersDirective>\n                                </AxisDirective>\n                            </AxesDirective>\n                        </LinearGaugeComponent>\n                    </div>\n                </div>\n            </div>\n                <section id=\"action-description\" aria-label=\"Description of Linear Gauge sample\">\n                    <p>\n                        This sample demonstrates the various options for customizing the axis labels, such as styling, formatting, replacing text, and setting offset in the linear gauge.\n                    </p>\n                </section>\n                <section id=\"description\" aria-label=\"Description of the Linear Gauge features demonstrated in this sample\">\n                    <p>\n                        In this example, you can see how to render and configure axis labels in the linear gauge. The properties in the <a target=\"_blank\" href=\"https://ej2.syncfusion.com/react/documentation/api/linear-gauge/axisModel/#labelstyle\">labelStyle</a> can be used to style, format, and offset the label, while the label's text can be changed dynamically via the <a target=\"_blank\" href=\"https://ej2.syncfusion.com/react/documentation/api/linear-gauge/#axislabelrender\">axisLabelRender</a> event.\n                    </p>\n                    <p>\n                        More information on the axis labels can be found in this <a target=\"_blank\" href=\"https://ej2.syncfusion.com/react/documentation/linear-gauge/axis/#labels-customization\">documentation section</a>.\n                    </p>\n                </section>\n        </main>);\n    }\n}\n\nconst root = createRoot(document.getElementById('sample'));\nroot.render(<Labels />);","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n                this.rendereComplete();\n            });\n        }\n    }\n    export function updateSampleSection(){}\n    ","dependencies":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-react-base\":\"*\",\"@syncfusion/ej2-lineargauge\":\"*\",\"@syncfusion/ej2-react-lineargauge\":\"*\",\"@syncfusion/ej2-react-charts\":\"*\",\"@syncfusion/ej2/base\":\"*\",\"@syncfusion/ej2-charts'; // Import the necessary types from Syncfusion\":\"*\",\"@syncfusion/ej2-lists\":\"*\",\"@syncfusion/ej2-documenteditor\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-splitbuttons\":\"*\",\"@syncfusion/ej2-navigations\":\"*\",\"@syncfusion/ej2-react-popups\":\"*\"}"}