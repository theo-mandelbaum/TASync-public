{"index.css":"/* css */","index.html":"<!DOCTYPE html>\n<html>\n<head>\n    <title>Syncfusion React Sample</title>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\n    <meta name=\"author\" content=\"Syncfusion\" />\n    <link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\n</head>\n\n<body class=\"{{theme}}\">\n     <style>\n            .control-section\n            {\n                margin-top: 100px;\n            }\n    </style>\n    <div id='sample'>\n</body>\n</html>\n","index.js":"import { createRoot } from 'react-dom/client';\nimport './index.css';\nimport * as React from \"react\";\nimport { useEffect, useRef, useState } from \"react\";\nimport { LinearGaugeComponent, GaugeTooltip, AnnotationsDirective, Annotations, Inject, AnnotationDirective, AxesDirective, AxisDirective, PointersDirective, PointerDirective } from '@syncfusion/ej2-react-lineargauge';\n\nconst SAMPLE_CSS = `\n    .control-fluid {\n        padding: 0px !important;\n    }`;\nconst Tooltip = () => {\n    const [gaugeOriention, setOrientation] = useState('Horizontal');\n    let gaugeInstance = useRef(null);\n    const tooltipRender = (args) => {\n        args.content = (args.axis.visibleRange.max === 25) ? Number(args.content).toFixed(1) + ' cm' : Number(args.content).toFixed(1) + ' in';\n    };\n    const gaugeLoad = (args) => {\n        let selectedTheme = location.hash.split('/')[1];\n        selectedTheme = selectedTheme ? selectedTheme : 'Material';\n        args.gauge.theme = ((selectedTheme.charAt(0).toUpperCase() +\n            selectedTheme.slice(1)).replace(/-dark/i, 'Dark').replace(/-high/i, 'High').replace(/contrast/i, 'Contrast').replace(/5.3/i, '5'));\n        if (args.gauge.theme.toLowerCase().indexOf('dark') > 1 || args.gauge.theme.toLowerCase() === 'highcontrast' || args.gauge.theme.toLowerCase() === 'fluent2-highcontrast') {\n            args.gauge.annotations[0].content = '<div id=\"first\"><h1 style=\"font-size:15px; color: #DADADA\">Inches</h1></div>';\n            args.gauge.annotations[1].content = '<div id=\"second\"><h1 style=\"font-size:15px; color: #DADADA\">Centimeters</h1></div>';\n        }\n        let width = Number(args.gauge.element.offsetWidth);\n        if (width < 500) {\n            args.gauge.axes[1].majorTicks.interval = 2;\n            args.gauge.axes[1].minorTicks.interval = 1;\n            args.gauge.annotations[0].x = -57;\n            args.gauge.annotations[0].y = -30;\n            args.gauge.annotations[1].x = 50;\n            args.gauge.annotations[1].y = -45;\n            args.gauge.orientation = \"Vertical\";\n        }\n        else {\n            args.gauge.axes[1].majorTicks.interval = 1;\n            args.gauge.axes[1].minorTicks.interval = 0.2;\n            args.gauge.annotations[0].x = 35;\n            args.gauge.annotations[0].y = -58;\n            args.gauge.annotations[1].x = 50;\n            args.gauge.annotations[1].y = 52;\n            args.gauge.orientation = \"Horizontal\";\n        }\n    };\n    const gaugeLoaded = (args) => {\n        if (document.getElementById('tooltipContainer')) {\n            if (args.gauge.availableSize.width < 500) {\n                document.getElementById('tooltipContainer_Annotation_0').style.transform = 'rotate(270deg)';\n                document.getElementById('tooltipContainer_Annotation_1').style.transform = 'rotate(270deg)';\n            }\n            else {\n                document.getElementById('tooltipContainer_Annotation_0').style.transform = '';\n                document.getElementById('tooltipContainer_Annotation_1').style.transform = '';\n            }\n        }\n    };\n    const labelRender = (args) => {\n        if (args.axis.visibleRange.min === args.value || args.axis.visibleRange.max === args.value) {\n            args.text = '';\n        }\n    };\n    const gaugeResized = (args) => {\n        if (args.currentSize.width < 500) {\n            gaugeInstance.current.axes[1].majorTicks.interval = 2;\n            gaugeInstance.current.axes[1].minorTicks.interval = 1;\n            gaugeInstance.current.annotations[0].x = -57;\n            gaugeInstance.current.annotations[0].y = -30;\n            gaugeInstance.current.annotations[1].x = 50;\n            gaugeInstance.current.annotations[1].y = -45;\n            gaugeInstance.current.orientation = \"Vertical\";\n        }\n        else {\n            gaugeInstance.current.axes[1].majorTicks.interval = 1;\n            gaugeInstance.current.axes[1].minorTicks.interval = 0.2;\n            gaugeInstance.current.annotations[0].x = 35;\n            gaugeInstance.current.annotations[0].y = -58;\n            gaugeInstance.current.annotations[1].x = 50;\n            gaugeInstance.current.annotations[1].y = 52;\n            gaugeInstance.current.orientation = \"Horizontal\";\n        }\n    };\n    return (<main><div className='control-pane'>\n            <style>{SAMPLE_CSS}</style>\n            <div className='control-scxection'>\n                <LinearGaugeComponent id='tooltipContainer' ref={gaugeInstance} background='transparent' orientation={gaugeOriention} axisLabelRender={labelRender.bind(this)} load={gaugeLoad.bind(this)} loaded={gaugeLoaded.bind(this)} resized={gaugeResized.bind(this)} tooltipRender={tooltipRender.bind(this)} container={{ width: 140, border: { width: 2, color: '#a6a6a6' } }} tooltip={{ enable: true, showAtMousePosition: true, textStyle: { fontFamily: 'inherit' } }}>\n                    <Inject services={[Annotations, GaugeTooltip]}/>\n                    <AxesDirective>\n                        <AxisDirective minimum={0} maximum={10} majorTicks={{ interval: 1, height: 20, color: '#9E9E9E' }} minorTicks={{ interval: 0.2, height: 10, color: '#9E9E9E' }} line={{ offset: 140, color: '#a6a6a6' }} labelStyle={{ font: { fontFamily: 'inherit' } }}>\n                            <PointersDirective>\n                                <PointerDirective type='Bar' value={5.4} color='#ff66b3' offset={15}/>\n                            </PointersDirective>\n                        </AxisDirective>\n                        <AxisDirective opposedPosition={true} minimum={0} maximum={25} majorTicks={{ interval: 1, height: 20, color: '#9E9E9E' }} minorTicks={{ interval: 0.2, height: 10, color: '#9E9E9E' }} line={{ offset: -140, color: '#a6a6a6' }} labelStyle={{ font: { fontFamily: 'inherit' } }}>\n                            <PointersDirective>\n                                <PointerDirective type='Bar' value={16.5} color='#4d94ff' offset={-15}/>\n                            </PointersDirective>\n                        </AxisDirective>\n                    </AxesDirective>\n                    <AnnotationsDirective>\n                        <AnnotationDirective content='<div id=\"first\"><h1 style=\"font-size:15px;color:#686868;\">Inches</h1></div>' axisIndex={0} axisValue={5.4} x={35} y={-58} zIndex='1'/>\n                        <AnnotationDirective content='<div id=\"second\"><h1 style=\"font-size:15px;color:#686868;\">Centimeters</h1></div>' axisIndex={1} axisValue={16.5} x={50} y={52} zIndex='1'/>\n                    </AnnotationsDirective>\n                </LinearGaugeComponent>\n            </div>\n        </div>\n            <section id=\"action-description\" aria-label=\"Description of Linear Gauge sample\">\n                <p>This sample depicts the linear gauge as a measuring scale and shows the tooltip in the linear gauge.</p>\n            </section>\n            <section id=\"description\" aria-label=\"Description of the Linear Gauge features demonstrated in this sample\">\n                <p>The tooltip is used to track the current value that is closest to the mouse position or touch contact. When using a touch-enabled device, the tooltip is displayed by hovering or tapping.</p>\n                <p>\n                    More information about tooltip can be found in this <a target=\"_blank\" href=\"https://ej2.syncfusion.com/react/documentation/linear-gauge/user-interaction/#tooltip\">documentation section</a>.\n                </p>\n            </section>\n    </main>);\n};\nexport default Tooltip;\n\nconst root = createRoot(document.getElementById('sample'));\nroot.render(<Tooltip />);","dependencies":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-react-base\":\"*\",\"@syncfusion/ej2-lineargauge\":\"*\",\"@syncfusion/ej2-react-lineargauge\":\"*\",\"@syncfusion/ej2-react-charts\":\"*\",\"@syncfusion/ej2/base\":\"*\",\"@syncfusion/ej2-charts'; // Import the necessary types from Syncfusion\":\"*\",\"@syncfusion/ej2-lists\":\"*\",\"@syncfusion/ej2-documenteditor\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-splitbuttons\":\"*\",\"@syncfusion/ej2-navigations\":\"*\",\"@syncfusion/ej2-react-popups\":\"*\"}"}