{"index.css":"/* css */","index.html":"<!DOCTYPE html>\n<html>\n<head>\n    <title>Syncfusion React Sample</title>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\n    <meta name=\"author\" content=\"Syncfusion\" />\n    <link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\n</head>\n\n<body class=\"{{theme}}\">\n     <style>\n            .control-section\n            {\n                margin-top: 100px;\n            }\n    </style>\n    <div id='sample'>\n</body>\n</html>\n","index.js":"import { createRoot } from 'react-dom/client';\nimport './index.css';\nimport * as React from \"react\";\nimport { LinearGaugeComponent, AxesDirective, AxisDirective, PointersDirective, PointerDirective, RangesDirective, RangeDirective } from '@syncfusion/ej2-react-lineargauge';\nimport { SampleBase } from './sample-base';\nconst SAMPLE_CSS = `\n    .control-fluid {\n\t\tpadding: 0px !important;\n    }`;\nexport class Track extends SampleBase {\n    gaugeDefault;\n    gaugeEdge;\n    gaugeRangeColor;\n    gaugeInversed;\n    gaugeOpposed;\n    classStyle = 'col-xs-4 col-sm-4 col-lg-2 col-md-2';\n    load(args) {\n    }\n    horizontalGauge(e) {\n        this.gaugeDefault.width = this.gaugeEdge.width = this.gaugeRangeColor.width = this.gaugeInversed.width = this.gaugeOpposed.width = '450px';\n        this.gaugeDefault.height = this.gaugeEdge.height = this.gaugeRangeColor.height = this.gaugeInversed.height = this.gaugeOpposed.height = '150px';\n        this.gaugeDefault.orientation = this.gaugeEdge.orientation = this.gaugeRangeColor.orientation = this.gaugeInversed.orientation = this.gaugeOpposed.orientation = \"Horizontal\";\n        if (e.currentTarget != null) {\n            e.currentTarget['style']['color'] = \"white\";\n            e.currentTarget['style']['backgroundColor'] = \"#0074E3\";\n            document.getElementById('vertical').style.color = \"black\";\n            document.getElementById('vertical').style.backgroundColor = \"white\";\n            document.getElementById('containerDefault').className = document.getElementById('containerEdge').className =\n                document.getElementById('containerRangeColor').className = document.getElementById('containerInversed').className =\n                    document.getElementById('containerOpposed').className = \"col-xs-12 col-sm-12 col-lg-12 col-md-12\";\n            document.getElementById('containerBox').style.padding = \"0%\";\n        }\n    }\n    verticalGauge(e) {\n        this.gaugeDefault.width = this.gaugeEdge.width = this.gaugeRangeColor.width = this.gaugeInversed.width = this.gaugeOpposed.width = '150px';\n        this.gaugeDefault.height = this.gaugeEdge.height = this.gaugeRangeColor.height = this.gaugeInversed.height = this.gaugeOpposed.height = '350px';\n        this.gaugeDefault.orientation = this.gaugeEdge.orientation = this.gaugeRangeColor.orientation = this.gaugeInversed.orientation = this.gaugeOpposed.orientation = \"Vertical\";\n        if (e.currentTarget != null) {\n            e.currentTarget['style']['color'] = \"white\";\n            e.currentTarget['style']['backgroundColor'] = \"#0074E3\";\n            document.getElementById('horizontal')['style']['color'] = \"black\";\n            document.getElementById('horizontal')['style']['backgroundColor'] = \"white\";\n            document.getElementById('containerDefault').className = document.getElementById('containerEdge').className =\n                document.getElementById('containerRangeColor').className = document.getElementById('containerInversed').className =\n                    document.getElementById('containerOpposed').className = \"col-xs-4 col-sm-4 col-lg-2 col-md-2\";\n            document.getElementById('containerBox').style.display = \"flex\";\n            document.getElementById('containerBox').style.padding = \"4%\";\n        }\n    }\n    render() {\n        return (<main><div className='control-pane'>\n                <style>\n                    {SAMPLE_CSS}\n                </style>\n                <div className=\"control-section\">\n                    <div className=\"col-xs-12 col-sm-12 col-lg-12 col-md-12\" style={{ display: 'flex', justifyContent: 'center', alignItems: 'center' }}>\n                        <div style={{ margin: 'auto', padding: '10px' }}>\n                            <table role='none'>\n                                <tbody>\n                                    <tr>\n                                        <td>\n                                            <div id='horizontal' style={{ padding: '6px', cursor: 'pointer', width: '86px', color: 'black', fontSize: '15px', border: '1px solid #0074E3', backgroundColor: 'white', textAlign: 'center' }} onClick={this.horizontalGauge.bind(this)}>Horizontal</div>\n                                        </td>\n                                        <td>\n                                            <div id='vertical' style={{ padding: '6px', cursor: 'pointer', width: '86px', color: 'white', fontSize: '15px', border: '1px solid #0074E3', backgroundColor: '#0074E3', textAlign: 'center' }} onClick={this.verticalGauge.bind(this)}>Vertical</div>\n                                        </td>\n                                    </tr>\n                                </tbody>\n                            </table>\n                        </div>\n                    </div>\n                    <pre style={{ border: 'hidden', backgroundColor: 'inherit' }}></pre>\n                    <div id=\"containerBox\" style={{ float: 'left', padding: '4%' }}></div>\n                    <div id='containerDefault' className={this.classStyle} style={{ display: 'flex', justifyContent: 'center', alignItems: 'center' }}>\n                        <LinearGaugeComponent load={this.load.bind(this)} id='gaugeDefault' title='Default axis' titleStyle={{ fontFamily: 'inherit', fontWeight: '499' }} orientation='Vertical' width='150px' height='350px' background='transparent' ref={gaugeDefault => this.gaugeDefault = gaugeDefault}>\n                            <AxesDirective>\n                                <AxisDirective line={{ width: 5 }} minorTicks={{ interval: 10, height: 3 }} majorTicks={{ interval: 20, height: 7, width: 1 }} labelStyle={{ font: { fontFamily: 'inherit' } }} minimum={0} maximum={100} opposedPosition={true}>\n                                    <PointersDirective>\n                                        <PointerDirective width={0}>\n                                        </PointerDirective>\n                                    </PointersDirective>\n                                </AxisDirective>\n                            </AxesDirective>\n                        </LinearGaugeComponent>\n                    </div>\n                    <div id='containerEdge' className={this.classStyle} style={{ display: 'flex', justifyContent: 'center', alignItems: 'center' }}>\n                        <LinearGaugeComponent load={this.load.bind(this)} title='Edge style' container={{ width: 20, roundedCornerRadius: 10, type: 'RoundedRectangle', border: { width: 1 } }} titleStyle={{ fontFamily: 'inherit', fontWeight: '499' }} id='gaugeEdge' orientation='Vertical' width='150px' height='350px' background='transparent' ref={gaugeEdge => this.gaugeEdge = gaugeEdge}>\n                            <AxesDirective>\n                                <AxisDirective line={{ width: 0 }} minorTicks={{ interval: 10, height: 3 }} majorTicks={{ interval: 20, height: 7, width: 1 }} labelStyle={{ font: { fontFamily: 'inherit' } }} minimum={0} maximum={100} opposedPosition={true}>\n                                    <PointersDirective>\n                                        <PointerDirective width={0}>\n                                        </PointerDirective>\n                                    </PointersDirective>\n                                </AxisDirective>\n                            </AxesDirective>\n                        </LinearGaugeComponent>\n                    </div>\n                    <div id='containerRangeColor' className={this.classStyle} style={{ display: 'flex', justifyContent: 'center', alignItems: 'center' }}>\n                        <LinearGaugeComponent load={this.load.bind(this)} title='Range color for axis' titleStyle={{ fontFamily: 'inherit', fontWeight: '499' }} id='gaugeRangeColor' orientation='Vertical' width='150px' height='350px' background='transparent' ref={gaugeRangeColor => this.gaugeRangeColor = gaugeRangeColor}>\n                            <AxesDirective>\n                                <AxisDirective line={{ width: 0 }} minorTicks={{ interval: 10, height: 3 }} majorTicks={{ interval: 20, height: 7, width: 1 }} labelStyle={{ useRangeColor: true, font: { fontFamily: 'inherit' } }} minimum={0} maximum={100} opposedPosition={true}>\n                                    <PointersDirective>\n                                        <PointerDirective width={0}>\n                                        </PointerDirective>\n                                    </PointersDirective>\n                                    <RangesDirective>\n                                        <RangeDirective start={0} end={30} color='#F45656' startWidth={5} endWidth={5} offset={-5}></RangeDirective>\n                                        <RangeDirective start={30} end={60} color='#FFC93E' startWidth={5} endWidth={5} offset={-5}></RangeDirective>\n                                        <RangeDirective start={60} end={100} color='#0DC9AB' startWidth={5} endWidth={5} offset={-5}></RangeDirective>\n                                    </RangesDirective>\n                                </AxisDirective>\n                            </AxesDirective>\n                        </LinearGaugeComponent>\n                    </div>\n                    <div id='containerInversed' className={this.classStyle} style={{ display: 'flex', justifyContent: 'center', alignItems: 'center' }}>\n                        <LinearGaugeComponent load={this.load.bind(this)} title='Inversed axis' titleStyle={{ fontFamily: 'inherit', fontWeight: '499' }} id='gaugeInversed' orientation='Vertical' width='150px' height='350px' background='transparent' ref={gaugeInversed => this.gaugeInversed = gaugeInversed}>\n                            <AxesDirective>\n                                <AxisDirective line={{ width: 5 }} minorTicks={{ interval: 10, height: 3 }} majorTicks={{ interval: 20, height: 7, width: 1 }} labelStyle={{ font: { fontFamily: 'inherit' } }} minimum={0} maximum={100} isInversed={true} opposedPosition={true}>\n                                    <PointersDirective>\n                                        <PointerDirective width={0}>\n                                        </PointerDirective>\n                                    </PointersDirective>\n                                </AxisDirective>\n                            </AxesDirective>\n                        </LinearGaugeComponent>\n                    </div>\n                    <div id='containerOpposed' className={this.classStyle} style={{ display: 'flex', justifyContent: 'center', alignItems: 'center' }}>\n                        <LinearGaugeComponent load={this.load.bind(this)} title='Opposed axis' titleStyle={{ fontFamily: 'inherit', fontWeight: '499' }} id='gaugeOpposed' orientation='Vertical' width='150px' height='350px' background='transparent' ref={gaugeOpposed => this.gaugeOpposed = gaugeOpposed}>\n                            <AxesDirective>\n                                <AxisDirective line={{ width: 5 }} minorTicks={{ interval: 10, height: 3, position: 'Outside' }} majorTicks={{ interval: 20, height: 7, width: 1, position: 'Outside' }} labelStyle={{ position: 'Outside', font: { fontFamily: 'inherit' } }} minimum={0} maximum={100} opposedPosition={true}>\n                                    <PointersDirective>\n                                        <PointerDirective width={0}>\n                                        </PointerDirective>\n                                    </PointersDirective>\n                                </AxisDirective>\n                            </AxesDirective>\n                        </LinearGaugeComponent>\n                    </div>\n                </div>\n            </div>\n                <section id=\"action-description\" aria-label=\"Description of Linear Gauge sample\">\n                    <p>\n                        This sample demonstrates the basic axis, its edge style, range color for axis, inversed and opposed axis.\n                    </p>\n                </section>\n                <section id=\"description\" aria-label=\"Description of the Linear Gauge features demonstrated in this sample\">\n                    <p>\n                        In this example, you can see how to render and configure axis in the linear gauge. The <a target=\"_blank\" href=\"https://ej2.syncfusion.com/react/documentation/api/linear-gauge/containerModel/#roundedcornerradius\"> roundedCornerRadius</a>, <a target=\"_blank\" href=\"https://ej2.syncfusion.com/react/documentation/api/linear-gauge/labelModel/#userangecolor\"> useRangeColor</a>, <a target=\"_blank\" href=\"https://ej2.syncfusion.com/react/documentation/api/linear-gauge/axisModel/#isinversed\"> isInversed</a>, and <a target=\"_blank\" href=\"https://ej2.syncfusion.com/react/documentation/api/linear-gauge/axisModel/#opposedposition\"> opposedPosition</a> properties can be used to set the edge style, range color for axis, inversed and opposed axis respectively.\n                    </p>\n                    <p>\n                        More information on the axis can be found in this <a target=\"_blank\" href=\"https://ej2.syncfusion.com/react/documentation/linear-gauge/axis/#axis-in-react-linear-gauge\">documentation section</a>.\n                    </p>\n                </section>\n        </main>);\n    }\n}\n\nconst root = createRoot(document.getElementById('sample'));\nroot.render(<Track />);","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n                this.rendereComplete();\n            });\n        }\n    }\n    export function updateSampleSection(){}\n    ","dependencies":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-react-base\":\"*\",\"@syncfusion/ej2-lineargauge\":\"*\",\"@syncfusion/ej2-react-lineargauge\":\"*\",\"@syncfusion/ej2-react-charts\":\"*\",\"@syncfusion/ej2/base\":\"*\",\"@syncfusion/ej2-charts'; // Import the necessary types from Syncfusion\":\"*\",\"@syncfusion/ej2-lists\":\"*\",\"@syncfusion/ej2-documenteditor\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-splitbuttons\":\"*\",\"@syncfusion/ej2-navigations\":\"*\",\"@syncfusion/ej2-react-popups\":\"*\"}"}