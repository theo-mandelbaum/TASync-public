{"index.css":"/* css */","index.html":"<!DOCTYPE html>\n<html>\n<head>\n    <title>Syncfusion React Sample</title>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\n    <meta name=\"author\" content=\"Syncfusion\" />\n    <link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\n</head>\n\n<body class=\"{{theme}}\">\n     <style>\n            .control-section\n            {\n                margin-top: 100px;\n            }\n    </style>\n    <div id='sample'>\n</body>\n</html>\n","index.js":"import { createRoot } from 'react-dom/client';\nimport './index.css';\nimport * as React from \"react\";\nimport { LinearGaugeComponent, AxesDirective, AxisDirective, PointersDirective, PointerDirective } from '@syncfusion/ej2-react-lineargauge';\nimport { SampleBase } from './sample-base';\nconst SAMPLE_CSS = `\n     .control-fluid {\n         padding: 0px !important;\n     }`;\nexport class MarkerPointer extends SampleBase {\n    invertedPointer;\n    circlePointer;\n    textPointer;\n    rectanglePointer;\n    multiplePointer;\n    horizontalGauge(e) {\n        this.invertedPointer.width = this.circlePointer.width = this.textPointer.width = this.rectanglePointer.width = this.multiplePointer.width = '450px';\n        this.invertedPointer.height = this.circlePointer.height = this.textPointer.height = this.rectanglePointer.height = this.multiplePointer.height = '150px';\n        this.invertedPointer.orientation = this.circlePointer.orientation = this.textPointer.orientation = this.rectanglePointer.orientation = this.multiplePointer.orientation = \"Horizontal\";\n        if (e.currentTarget != null) {\n            e.currentTarget['style']['color'] = \"white\";\n            e.currentTarget['style']['backgroundColor'] = \"#0074E3\";\n            document.getElementById('vertical').style.color = \"black\";\n            document.getElementById('vertical').style.backgroundColor = \"white\";\n            document.getElementById('containerInverted').className = document.getElementById('containerCircle').className =\n                document.getElementById('containerText').className = document.getElementById('containerRectangle').className =\n                    document.getElementById('containerMultiple').className = \"col-xs-12 col-sm-12 col-lg-12 col-md-12\";\n            document.getElementById('containerBox').style.padding = \"0%\";\n        }\n    }\n    verticalGauge(e) {\n        this.invertedPointer.width = this.circlePointer.width = this.rectanglePointer.width = this.multiplePointer.width = '150px';\n        this.textPointer.width = '168px';\n        this.invertedPointer.height = this.circlePointer.height = this.textPointer.height = this.rectanglePointer.height = this.multiplePointer.height = '350px';\n        this.invertedPointer.orientation = this.circlePointer.orientation = this.textPointer.orientation = this.rectanglePointer.orientation = this.multiplePointer.orientation = \"Vertical\";\n        if (e.currentTarget != null) {\n            e.currentTarget['style']['color'] = \"white\";\n            e.currentTarget['style']['backgroundColor'] = \"#0074E3\";\n            document.getElementById('horizontal')['style']['color'] = \"black\";\n            document.getElementById('horizontal')['style']['backgroundColor'] = \"white\";\n            document.getElementById('containerInverted').className = document.getElementById('containerCircle').className =\n                document.getElementById('containerText').className = document.getElementById('containerRectangle').className =\n                    document.getElementById('containerMultiple').className = \"col-xs-4 col-sm-4 col-lg-2 col-md-2\";\n            document.getElementById('containerBox').style.display = \"flex\";\n            document.getElementById('containerBox').style.padding = \"4%\";\n        }\n    }\n    load(args) {\n    }\n    dragStartTriangle(args) {\n        this.invertedPointer.axes[0].pointers[0].animationDuration = 0;\n        this.invertedPointer.axes[0].pointers[1].animationDuration = 0;\n    }\n    dragEndTriangle(args) {\n        this.invertedPointer.axes[0].pointers[0].animationDuration = 1500;\n        this.invertedPointer.axes[0].pointers[1].animationDuration = 1500;\n    }\n    dragMoveTriangle(args) {\n        if (args.pointerIndex == 1) {\n            this.invertedPointer.setPointerValue(0, 0, args.currentValue);\n        }\n    }\n    dragEndCircle(args) {\n        this.circlePointer.axes[0].pointers[0].animationDuration = 1500;\n        this.circlePointer.axes[0].pointers[1].animationDuration = 1500;\n    }\n    dragStartCircle(args) {\n        this.circlePointer.axes[0].pointers[0].animationDuration = 0;\n        this.circlePointer.axes[0].pointers[1].animationDuration = 0;\n    }\n    dragMoveCircle(args) {\n        if (args.pointerIndex == 1) {\n            this.circlePointer.setPointerValue(0, 0, args.currentValue);\n        }\n    }\n    dragEndText(args) {\n        this.textPointer.axes[0].pointers[0].animationDuration = 1500;\n        this.textPointer.axes[0].pointers[1].animationDuration = 1500;\n    }\n    dragStartText(args) {\n        this.textPointer.axes[0].pointers[0].animationDuration = 0;\n        this.textPointer.axes[0].pointers[1].animationDuration = 0;\n    }\n    dragMoveText(args) {\n        if (args.pointerIndex == 1) {\n            this.textPointer.axes[0].pointers[1].text = Math.round(args.currentValue).toString() + \" Points\";\n            this.textPointer.setPointerValue(0, 0, args.currentValue);\n        }\n    }\n    dragEndRectangle(args) {\n        this.rectanglePointer.axes[0].pointers[0].animationDuration = 1500;\n        this.rectanglePointer.axes[0].pointers[1].animationDuration = 1500;\n    }\n    dragStartRectangle(args) {\n        this.rectanglePointer.axes[0].pointers[0].animationDuration = 0;\n        this.rectanglePointer.axes[0].pointers[1].animationDuration = 0;\n    }\n    dragMoveRectangle(args) {\n        if (args.pointerIndex == 1) {\n            this.rectanglePointer.setPointerValue(0, 0, args.currentValue);\n        }\n    }\n    dragEndMultiple(args) {\n        if (args.pointerIndex == 1) {\n            this.multiplePointer.axes[0].pointers[0].animationDuration = 1500;\n            this.multiplePointer.axes[0].pointers[1].animationDuration = 1500;\n        }\n    }\n    dragStartMultiple(args) {\n        if (args.pointerIndex == 1) {\n            this.multiplePointer.axes[0].pointers[0].animationDuration = 0;\n            this.multiplePointer.axes[0].pointers[1].animationDuration = 0;\n        }\n    }\n    dragMoveMultiple(args) {\n        if (args.pointerIndex == 1) {\n            this.multiplePointer.setPointerValue(0, 0, args.currentValue);\n        }\n    }\n    render() {\n        return (<main><div className='control-pane'>\n                <style>\n                    {SAMPLE_CSS}\n                </style>\n                <div className=\"control-section\">\n                    <div className=\"col-xs-12 col-sm-12 col-lg-12 col-md-12\" style={{ display: 'flex', justifyContent: 'center', alignItems: 'center' }}>\n                        <div style={{ margin: 'auto', padding: '10px' }}>\n                            <table role='none'>\n                                <tbody>\n                                    <tr>\n                                        <td>\n                                            <div id='horizontal' style={{ padding: '6px', cursor: 'pointer', width: '86px', color: 'black', fontSize: '15px', border: '1px solid #0074E3', backgroundColor: 'white', textAlign: 'center' }} onClick={this.horizontalGauge.bind(this)}>Horizontal</div>\n                                        </td>\n                                        <td>\n                                            <div id='vertical' style={{ padding: '6px', cursor: 'pointer', width: '86px', color: 'white', fontSize: '15px', border: '1px solid #0074E3', backgroundColor: '#0074E3', textAlign: 'center' }} onClick={this.verticalGauge.bind(this)}>Vertical</div>\n                                        </td>\n                                    </tr>\n                                </tbody>\n                            </table>\n                        </div>\n                    </div>\n                    <pre style={{ border: 'hidden', backgroundColor: 'inherit' }}></pre>\n                    <div id=\"containerBox\" className=\"row\" style={{ float: 'left', padding: '4%' }}></div>\n                    <div id='containerInverted' className=\"col-xs-4 col-sm-4 col-lg-2 col-md-2\" style={{ display: 'flex', justifyContent: 'center', alignItems: 'center' }}>\n                        <LinearGaugeComponent animationDuration={2000} dragEnd={this.dragEndTriangle.bind(this)} dragStart={this.dragStartTriangle.bind(this)} dragMove={this.dragMoveTriangle.bind(this)} load={this.load.bind(this)} id='invertedMarker' title='Inverted triangle' titleStyle={{ fontFamily: 'inherit', fontWeight: '499' }} orientation='Vertical' width='150px' height='350px' background='transparent' ref={invertedPointer => this.invertedPointer = invertedPointer}>\n                            <AxesDirective>\n                                <AxisDirective line={{ width: 5 }} minorTicks={{ interval: 10, height: 3 }} majorTicks={{ interval: 20, height: 7, width: 1 }} labelStyle={{ font: { fontFamily: 'inherit' } }} minimum={0} maximum={100} opposedPosition={true}>\n                                    <PointersDirective>\n                                        <PointerDirective value={40} height={5} width={5} placement='Near' type='Bar' animationDuration={1500} offset='12' color='#0074E3'>\n                                        </PointerDirective>\n                                        <PointerDirective value={40} enableDrag={true} height={15} width={15} placement='Near' markerType='Triangle' animationDuration={1500}>\n                                        </PointerDirective>\n                                    </PointersDirective>\n                                </AxisDirective>\n                            </AxesDirective>\n                        </LinearGaugeComponent>\n                    </div>\n                    <div id='containerCircle' className=\"col-xs-4 col-sm-4 col-lg-2 col-md-2\" style={{ display: 'flex', justifyContent: 'center', alignItems: 'center' }}>\n                        <LinearGaugeComponent animationDuration={2000} dragStart={this.dragStartCircle.bind(this)} dragEnd={this.dragEndCircle.bind(this)} dragMove={this.dragMoveCircle.bind(this)} load={this.load.bind(this)} title='Circle' titleStyle={{ fontFamily: 'inherit', fontWeight: '499' }} id='circleMarker' orientation='Vertical' width='150px' height='350px' background='transparent' ref={circlePointer => this.circlePointer = circlePointer}>\n                            <AxesDirective>\n                                <AxisDirective line={{ width: 5 }} minorTicks={{ interval: 10, height: 3 }} majorTicks={{ interval: 20, height: 7, width: 1 }} labelStyle={{ font: { fontFamily: 'inherit' } }} minimum={0} maximum={100} opposedPosition={true}>\n                                    <PointersDirective>\n                                        <PointerDirective value={20} height={5} width={5} placement='Near' type='Bar' animationDuration={1500} offset='12' color='#0074E3'>\n                                        </PointerDirective>\n                                        <PointerDirective value={20} enableDrag={true} height={15} width={15} placement='Near' markerType='Circle' animationDuration={1500}>\n                                        </PointerDirective>\n                                    </PointersDirective>\n                                </AxisDirective>\n                            </AxesDirective>\n                        </LinearGaugeComponent>\n                    </div>\n                    <div id='containerRectangle' className=\"col-xs-4 col-sm-4 col-lg-2 col-md-2\" style={{ display: 'flex', justifyContent: 'center', alignItems: 'center' }}>\n                        <LinearGaugeComponent animationDuration={2000} dragStart={this.dragStartRectangle.bind(this)} dragEnd={this.dragEndRectangle.bind(this)} dragMove={this.dragMoveRectangle.bind(this)} load={this.load.bind(this)} title='Rectangle' titleStyle={{ fontFamily: 'inherit', fontWeight: '499' }} id='rectangleMarker' orientation='Vertical' width='150px' height='350px' background='transparent' ref={rectanglePointer => this.rectanglePointer = rectanglePointer}>\n                            <AxesDirective>\n                                <AxisDirective line={{ width: 5 }} minorTicks={{ interval: 10, height: 3 }} majorTicks={{ interval: 20, height: 7, width: 1 }} labelStyle={{ font: { fontFamily: 'inherit' } }} minimum={0} maximum={100} opposedPosition={true}>\n                                    <PointersDirective>\n                                        <PointerDirective value={30} height={5} width={5} placement='Near' type='Bar' animationDuration={1500} offset='12' color='#0074E3'>\n                                        </PointerDirective>\n                                        <PointerDirective value={30} enableDrag={true} height={5} width={15} placement='Near' markerType='Rectangle' animationDuration={1500}>\n                                        </PointerDirective>\n                                    </PointersDirective>\n                                </AxisDirective>\n                            </AxesDirective>\n                        </LinearGaugeComponent>\n                    </div>\n                    <div id='containerText' className=\"col-xs-4 col-sm-4 col-lg-2 col-md-2\" style={{ display: 'flex', justifyContent: 'center', alignItems: 'center' }}>\n                        <LinearGaugeComponent animationDuration={2000} dragStart={this.dragStartText.bind(this)} dragEnd={this.dragEndText.bind(this)} dragMove={this.dragMoveText.bind(this)} load={this.load.bind(this)} title='Text' titleStyle={{ fontFamily: 'inherit', fontWeight: '499' }} id='TextMarker' orientation='Vertical' width='168px' height='350px' background='transparent' ref={textPointer => this.textPointer = textPointer}>\n                            <AxesDirective>\n                                <AxisDirective line={{ width: 5 }} minorTicks={{ interval: 10, height: 3 }} majorTicks={{ interval: 20, height: 7, width: 1 }} labelStyle={{ font: { fontFamily: 'inherit' } }} minimum={0} maximum={100} opposedPosition={true}>\n                                    <PointersDirective>\n                                        <PointerDirective value={50} height={5} width={5} placement='Near' type='Bar' animationDuration={1500} offset='12' color='#0074E3'>\n                                        </PointerDirective>\n                                        <PointerDirective value={50} enableDrag={true} height={15} width={15} placement='Near' markerType='Text' offset={-10} text='50 Points' animationDuration={1500}>\n                                        </PointerDirective>\n                                    </PointersDirective>\n                                </AxisDirective>\n                            </AxesDirective>\n                        </LinearGaugeComponent>\n                    </div>\n                    <div id='containerMultiple' className=\"col-xs-4 col-sm-4 col-lg-2 col-md-2\" style={{ display: 'flex', justifyContent: 'center', alignItems: 'center' }}>\n                        <LinearGaugeComponent animationDuration={2000} dragStart={this.dragStartMultiple.bind(this)} dragEnd={this.dragEndMultiple.bind(this)} dragMove={this.dragMoveMultiple.bind(this)} load={this.load.bind(this)} title='Multiple pointers' titleStyle={{ fontFamily: 'inherit', fontWeight: '499' }} id='multipleMarkers' orientation='Vertical' width='150px' height='350px' background='transparent' ref={multiplePointer => this.multiplePointer = multiplePointer}>\n                            <AxesDirective>\n                                <AxisDirective line={{ width: 5 }} minorTicks={{ interval: 10, height: 3 }} majorTicks={{ interval: 20, height: 7, width: 1 }} labelStyle={{ font: { fontFamily: 'inherit' } }} minimum={0} maximum={100} opposedPosition={true}>\n                                    <PointersDirective>\n                                        <PointerDirective value={10} height={5} width={5} placement='Near' type='Bar' animationDuration={1500} offset='12' color='#0074E3'>\n                                        </PointerDirective>\n                                        <PointerDirective value={10} enableDrag={true} height={15} width={15} placement='Near' markerType='Triangle' animationDuration={1500}>\n                                        </PointerDirective>\n                                        <PointerDirective value={100} enableDrag={true} height={15} width={15} placement='Near' markerType='Diamond' animationDuration={1500}>\n                                        </PointerDirective>\n                                    </PointersDirective>\n                                </AxisDirective>\n                            </AxesDirective>\n                        </LinearGaugeComponent>\n                    </div>\n                </div>\n            </div>\n                <section id=\"action-description\" aria-label=\"Description of Linear Gauge sample\">\n                    <p>\n                        This sample shows the various marker pointer shapes available in the linear gauge. Additionally, multiple marker pointer, animation and drag support are enabled.\n                    </p>\n                </section>\n                <section id=\"description\" aria-label=\"Description of the Linear Gauge features demonstrated in this sample\">\n                    <p>\n                        In this example, you can see how to render and configure marker pointer in the linear gauge. The <a target=\"_blank\" href=\"https://ej2.syncfusion.com/react/documentation/api/linear-gauge/pointerModel/\">PointersDirective</a> collection is useful for displaying multiple pointers. The properties available in <a target=\"_blank\" href=\"https://ej2.syncfusion.com/react/documentation/api/linear-gauge/pointerModel/\">PointerDirective</a> help in the customization of the marker pointer in the linear gauge. Drag pointers are assisted by the <a target=\"_blank\" href=\"https://ej2.syncfusion.com/react/documentation/api/linear-gauge/#dragstart\">dragStart</a> and <a target=\"_blank\" href=\"https://ej2.syncfusion.com/react/documentation/api/linear-gauge/#dragend\">dragEnd</a> events.\n                    </p>\n                    <p>\n                        More information on the marker pointer can be found in this <a target=\"_blank\" href=\"https://ej2.syncfusion.com/react/documentation/linear-gauge/pointers/#marker-pointer\">documentation section</a>.\n                    </p>\n                </section>\n        </main>);\n    }\n}\n\nconst root = createRoot(document.getElementById('sample'));\nroot.render(<MarkerPointer />);","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n                this.rendereComplete();\n            });\n        }\n    }\n    export function updateSampleSection(){}\n    ","dependencies":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-react-base\":\"*\",\"@syncfusion/ej2-lineargauge\":\"*\",\"@syncfusion/ej2-react-lineargauge\":\"*\",\"@syncfusion/ej2-react-charts\":\"*\",\"@syncfusion/ej2/base\":\"*\",\"@syncfusion/ej2-charts'; // Import the necessary types from Syncfusion\":\"*\",\"@syncfusion/ej2-lists\":\"*\",\"@syncfusion/ej2-documenteditor\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-splitbuttons\":\"*\",\"@syncfusion/ej2-navigations\":\"*\",\"@syncfusion/ej2-react-popups\":\"*\"}"}