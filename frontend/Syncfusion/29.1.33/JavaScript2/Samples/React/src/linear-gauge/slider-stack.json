{"index.css":"/* css */","index.html":"<!DOCTYPE html>\n<html>\n<head>\n    <title>Syncfusion React Sample</title>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\n    <meta name=\"author\" content=\"Syncfusion\" />\n    <link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\n</head>\n\n<body class=\"{{theme}}\">\n     <style>\n            .control-section\n            {\n                margin-top: 100px;\n            }\n    </style>\n    <div id='sample'>\n</body>\n</html>\n","index.js":"import { createRoot } from 'react-dom/client';\nimport './index.css';\nimport * as React from \"react\";\nimport { LinearGaugeComponent, Inject, GaugeTooltip, AxesDirective, AxisDirective, PointersDirective, PointerDirective } from '@syncfusion/ej2-react-lineargauge';\nimport { SampleBase } from './sample-base';\nconst SAMPLE_CSS = `\n     .control-fluid {\n         padding: 0px !important;\n     }`;\nexport class Slider extends SampleBase {\n    enableSliderGauge;\n    load(args) {\n    }\n    pointerValue;\n    dragMove(args) {\n        if (args.pointerIndex == 1) {\n            this.enableSliderGauge.setPointerValue(0, 0, args.currentValue);\n        }\n    }\n    render() {\n        return (<main><div className='control-pane'>\n                <style>\n                    {SAMPLE_CSS}\n                </style>\n                <div className='control-section'>\n                    <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center' }}>\n                        <LinearGaugeComponent title='Enabled' titleStyle={{ fontFamily: 'inherit', fontWeight: '499' }} dragMove={this.dragMove.bind(this)} load={this.load.bind(this)} background='transparent' id='enableSliderGauge' height='150px' width='450px' format='N0' orientation='Horizontal' ref={enableSliderGauge => this.enableSliderGauge = enableSliderGauge} tooltip={{ enable: true, showAtMousePosition: true, textStyle: { fontFamily: 'inherit' } }}>\n                            <Inject services={[GaugeTooltip]}/>\n                            <AxesDirective>\n                                <AxisDirective minimum={0} maximum={100} opposedPosition={true} line={{ width: 5, color: '#C2DEF8' }} minorTicks={{ interval: 10, height: 0 }} majorTicks={{ interval: 20, height: 0 }} labelStyle={{ offset: 10, font: { fontFamily: 'inherit' } }}>\n                                    <PointersDirective>\n                                        <PointerDirective value={50} height={5} width={5} color='#0074E3' position='Cross' type='Bar'>\n                                        </PointerDirective>\n                                        <PointerDirective value={50} height={15} width={15} color='#0074E3' placement='Center' enableDrag={true} offset={-10} markerType='Circle'>\n                                        </PointerDirective>\n                                    </PointersDirective>\n                                </AxisDirective>\n                            </AxesDirective>\n                        </LinearGaugeComponent>\n                    </div>\n                    <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center' }}>\n                        <LinearGaugeComponent title='Disabled' titleStyle={{ fontFamily: 'inherit', fontWeight: '499' }} load={this.load.bind(this)} background='transparent' id='disableSliderGauge' height='150px' width='450px' orientation='Horizontal'>\n                            <AxesDirective>\n                                <AxisDirective minimum={0} maximum={100} opposedPosition={true} line={{ width: 5, color: '#E0E0E0' }} minorTicks={{ interval: 10, height: 0 }} majorTicks={{ interval: 20, height: 0 }} labelStyle={{ offset: 10, font: { fontFamily: 'inherit' } }}>\n                                    <PointersDirective>\n                                        <PointerDirective value={50} height={5} width={5} color='#ADADAD' position='Cross' enableDrag={false} type='Bar'>\n                                        </PointerDirective>\n                                        <PointerDirective value={50} height={15} width={15} color='#ADADAD' placement='Center' enableDrag={false} offset={-10} markerType='Circle'>\n                                        </PointerDirective>\n                                    </PointersDirective>\n                                </AxisDirective>\n                            </AxesDirective>\n                        </LinearGaugeComponent>\n                    </div>\n                </div>\n            </div>\n                <section id=\"action-description\" aria-label=\"Description of Linear Gauge sample\">\n                    <p>\n                        This sample demonstrates how to create a slider by utilizing the functionalities available in the linear gauge.\n                    </p>\n                </section>\n                <section id=\"description\" aria-label=\"Description of the Linear Gauge features demonstrated in this sample\">\n                    <p>\n                        In this example, you can see how to render and configure a new slider in the linear gauge. This can be accomplished by combining axis, range, and pointer. The pointer has been made interactive, so the value changes as you drag it.\n                    </p>\n                    <p>\n                        More information on the linear gauge can be found in this <a target=\"_blank\" href=\"https://ej2.syncfusion.com/react/documentation/linear-gauge/getting-started/\">documentation section</a>.\n                    </p>\n                </section>\n        </main>);\n    }\n}\n\nconst root = createRoot(document.getElementById('sample'));\nroot.render(<Slider />);","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n                this.rendereComplete();\n            });\n        }\n    }\n    export function updateSampleSection(){}\n    ","dependencies":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-react-base\":\"*\",\"@syncfusion/ej2-lineargauge\":\"*\",\"@syncfusion/ej2-react-lineargauge\":\"*\",\"@syncfusion/ej2-react-charts\":\"*\",\"@syncfusion/ej2/base\":\"*\",\"@syncfusion/ej2-charts'; // Import the necessary types from Syncfusion\":\"*\",\"@syncfusion/ej2-lists\":\"*\",\"@syncfusion/ej2-documenteditor\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-splitbuttons\":\"*\",\"@syncfusion/ej2-navigations\":\"*\",\"@syncfusion/ej2-react-popups\":\"*\"}"}