{"index.css":"/* css */","theme-colors.js":"export function loadProgressBarTheme(args) {\n    let selectedTheme = location.hash.split('/')[1];\n    selectedTheme = selectedTheme ? selectedTheme : 'Tailwind3';\n    args.progressBar.theme = (selectedTheme.charAt(0).toUpperCase() +\n        selectedTheme.slice(1)).replace(/-dark/i, 'Dark').replace(/contrast/i, 'Contrast').replace(/-highContrast/i, 'HighContrast');\n    return args.progressBar.theme;\n}\n;\n","index.html":"<!DOCTYPE html>\n<html>\n<head>\n    <title>Syncfusion React Sample</title>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\n    <meta name=\"author\" content=\"Syncfusion\" />\n    <link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\n</head>\n\n<body class=\"{{theme}}\">\n     <style>\n            .control-section\n            {\n                margin-top: 100px;\n            }\n    </style>\n    <div id='sample'>\n</body>\n</html>\n","index.js":"import { createRoot } from 'react-dom/client';\nimport './index.css';\nimport * as React from \"react\";\nimport { ProgressBarComponent, ProgressBarAnnotationsDirective, ProgressBarAnnotationDirective, Inject, ProgressAnnotation } from '@syncfusion/ej2-react-progressbar';\nimport { SampleBase } from './sample-base';\nimport { loadProgressBarTheme } from './theme-colors';\nconst SAMPLE_CSS = `\n#control-container {\n    padding: 0px !important;\n}\n\n.linear-parent {\n    text-align: center;\n    width: 75%;\n    margin: auto !important;\n}\n\n.linear-button {\n   text-align: center;\n   padding:2%;\n}\n\n.progressbar-mode {\n    text-align: left;\n    font-family: Roboto-Regular;\n    font-size: 14px;\n    color: #3D3E3C;\n    margin-left: 10px;\n    margin-top: 5%;\n    padding: 0px;\n    top: 20px;\n}\n\n#reLoad {\n    border-radius: 4px;\n    text-transform: capitalize;\n}\n    `;\nexport class ProgressBarProgressSegment extends SampleBase {\n    linearSeg;\n    circularSeg;\n    content = '<div id=\"point1\" style=\"font-size:24px;font-weight:bold;color:#0078D6\"><span></span></div>';\n    load = (args) => {\n        loadProgressBarTheme(args);\n    };\n    progressLoad = (args) => {\n        let selectedTheme = loadProgressBarTheme(args);\n        switch (selectedTheme) {\n            case 'material':\n                args.progressBar.annotations[0].content = '<div id=\"point1\" style=\"font-size:24px;font-weight:bold;color:#e91e63\"><span></span></div>';\n                break;\n            case 'fabric':\n                args.progressBar.annotations[0].content = '<div id=\"point1\" style=\"font-size:24px;font-weight:bold;color:#0078D6\"><span></span></div>';\n                break;\n            case 'bootstrap':\n                args.progressBar.annotations[0].content = '<div id=\"point1\" style=\"font-size:24px;font-weight:bold;color:#317ab9\"><span></span></div>';\n                break;\n            case 'bootstrap4':\n                args.progressBar.annotations[0].content = '<div id=\"point1\" style=\"font-size:24px;font-weight:bold;color:#007bff\"><span></span></div>';\n                break;\n            case 'tailwind':\n            case 'tailwind3':\n                args.progressBar.annotations[0].content = '<div id=\"point1\" style=\"font-size:24px;font-weight:bold;color:#4F46E5\"><span></span></div>';\n                break;\n            case 'bootstrap-dark':\n            case 'fabric-dark':\n            case 'material-dark':\n                args.progressBar.annotations[0].content = '<div id=\"point1\" style=\"font-size:24px;font-weight:bold;color:#9A9A9A\"><span></span></div>';\n                break;\n            case 'bootstrap5':\n            case 'bootstrap5-dark':\n            case 'fluent':\n            case 'fluent-dark':\n                args.progressBar.annotations[0].content = '<div id=\"point1\" style=\"font-size:24px;font-weight:bold;color:#0D6EFD\"><span></span></div>';\n                break;\n            case 'tailwind-dark':\n                args.progressBar.annotations[0].content = '<div id=\"point1\" style=\"font-size:24px;font-weight:bold;color:#22D3EE\"><span></span></div>';\n                break;\n            case 'tailwind3-dark':\n                args.progressBar.annotations[0].content = '<div id=\"point1\" style=\"font-size:24px;font-weight:bold;color:#6366F1\"><span></span></div>';\n                break;\n            case 'material3':\n                args.progressBar.annotations[0].content = '<div id=\"point1\" style=\"font-size:24px;font-weight:bold;color:#6750A4\"><span></span></div>';\n                break;\n            case 'material3-dark':\n                args.progressBar.annotations[0].content = '<div id=\"point1\" style=\"font-size:24px;font-weight:bold;color:#D0BCFF\"><span></span></div>';\n                break;\n            default:\n                args.progressBar.annotations[0].content = '<div id=\"point1\" style=\"font-size:24px;font-weight:bold;color:#FFD939\"><span></span></div>';\n                break;\n        }\n    };\n    timing = () => {\n        if (this.circularSeg.value >= this.circularSeg.maximum) {\n            clearInterval(this.timer);\n        }\n        else {\n            this.circularSeg.value += 20;\n            this.linearSeg.value += 20;\n        }\n    };\n    timer = setInterval(this.timing, 2500);\n    render() {\n        return (<div className='control-pane'>\n                <style>\n                    {SAMPLE_CSS}\n                </style>\n                <div className=\"control-section\">\n                    <div className=\"row linear-parent\">\n                        <div>\n                            <div className=\"col-lg-12 col-sm-12 progressbar-mode\"></div>\n                            <div id=\"linearSegment\">\n                                <ProgressBarComponent id=\"progress-linearSegment\" ref={segment1 => this.linearSeg = segment1} type='Linear' height='30' width='70%' value={40} segmentCount={50} gapWidth={5} trackThickness={15} progressThickness={15} cornerRadius='Square' animation={{\n                enable: true,\n                duration: 2000\n            }} load={this.load.bind(this)}>\n                                </ProgressBarComponent>\n                            </div>\n                        </div>\n                        <div>\n                            <div className=\"col-lg-12 col-sm-12 progressbar-mode\"></div>\n                            <div id=\"circularSegment\">\n                                <ProgressBarComponent id=\"progress-circularSegment\" ref={segment2 => this.circularSeg = segment2} type='Circular' height='200px' width='200px' value={40} segmentCount={50} gapWidth={5} trackThickness={15} progressThickness={15} startAngle={220} endAngle={140} cornerRadius='Square' animation={{\n                enable: true,\n                duration: 2000\n            }} load={this.progressLoad.bind(this)}>\n                                    <Inject services={[ProgressAnnotation]}/>\n                                    <ProgressBarAnnotationsDirective>\n                                        <ProgressBarAnnotationDirective content={this.content}>\n\n                                        </ProgressBarAnnotationDirective>\n                                    </ProgressBarAnnotationsDirective>\n                                </ProgressBarComponent>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>);\n    }\n}\n\nconst root = createRoot(document.getElementById('sample'));\nroot.render(<ProgressBarProgressSegment />);","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n                this.rendereComplete();\n            });\n        }\n    }\n    export function updateSampleSection(){}\n    ","dependencies":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-react-base\":\"*\",\"@syncfusion/ej2-progressbar\":\"*\",\"@syncfusion/ej2-react-progressbar\":\"*\",\"@syncfusion/ej2-icons\":\"*\",\"markdown-spellcheck\":\"^1.3.1\",\"@syncfusion/ej2-react-charts\":\"*\",\"@syncfusion/ej2/base\":\"*\",\"@syncfusion/ej2-charts'; // Import the necessary types from Syncfusion\":\"*\",\"@syncfusion/ej2-lists\":\"*\",\"@syncfusion/ej2-documenteditor\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-splitbuttons\":\"*\",\"@syncfusion/ej2-navigations\":\"*\",\"@syncfusion/ej2-react-popups\":\"*\",\"@syncfusion/ej2-pivotview\":\"*\"}"}