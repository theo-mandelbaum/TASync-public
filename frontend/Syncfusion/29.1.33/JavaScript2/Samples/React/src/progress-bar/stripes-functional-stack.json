{"index.css":"/* css */","theme-colors.js":"export function loadProgressBarTheme(args) {\n    let selectedTheme = location.hash.split('/')[1];\n    selectedTheme = selectedTheme ? selectedTheme : 'Tailwind3';\n    args.progressBar.theme = (selectedTheme.charAt(0).toUpperCase() +\n        selectedTheme.slice(1)).replace(/-dark/i, 'Dark').replace(/contrast/i, 'Contrast').replace(/-highContrast/i, 'HighContrast');\n    return args.progressBar.theme;\n}\n;\n","index.html":"<!DOCTYPE html>\n<html>\n<head>\n    <title>Syncfusion React Sample</title>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\n    <meta name=\"author\" content=\"Syncfusion\" />\n    <link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\n</head>\n\n<body class=\"{{theme}}\">\n     <style>\n            .control-section\n            {\n                margin-top: 100px;\n            }\n    </style>\n    <div id='sample'>\n</body>\n</html>\n","index.js":"import { createRoot } from 'react-dom/client';\nimport './index.css';\nimport * as React from \"react\";\nimport { useEffect, useState } from 'react';\nimport { ProgressBarComponent } from '@syncfusion/ej2-react-progressbar';\n\nimport { loadProgressBarTheme } from './theme-colors';\nconst SAMPLE_CSS = `\n #control-container {\n     padding: 0px !important;\n }\n .linear-parent {\n     text-align: center;\n     margin-top: 2%;\n }\n .linear-button {\n     text-align: center;\n }\n .linear-progress {\n     width: 80%;\n     margin: auto;\n     margin-bottom: 3%;\n }\n #reLoad {\n     border-radius: 4px;\n     text-transform: capitalize;\n }\n     `;\n/**\n * Area sample\n */\nconst ProgressBarStripes = () => {\n    const progressThickness = 20;\n    const trackThickness = 20;\n    const progressLoad = (args) => {\n        let theme = loadProgressBarTheme(args);\n        if (theme === 'Material') {\n            args.progressBar.trackColor = '#eee';\n        }\n        if (theme === 'HighContrast') {\n            args.progressBar.trackColor = '#969696';\n        }\n    };\n    const [animation, setAnimation] = useState({\n        enable: true,\n        duration: 2000,\n        delay: 0,\n    });\n    const [buttonvalue, setButtonValue] = useState(\"Stop Animation\");\n    const replayClick = () => {\n        setAnimation({ ...animation, enable: !animation.enable ? true : false });\n        setButtonValue(!animation.enable ? 'Stop Animation' : 'Start Animation');\n    };\n    return (<div className='control-pane'>\n            <style>\n                {SAMPLE_CSS}\n            </style>\n            <div className='control-section'>\n                <div className=\"row linear-parent\">\n                    <div id=\"success\" className=\"linear-progress\">\n                        <ProgressBarComponent id=\"progress-success\" type='Linear' height='30' width='100%' value={20} progressThickness={progressThickness} trackThickness={trackThickness} role=\"Success\" isStriped={true} animation={animation} load={progressLoad.bind(this)}>\n                        </ProgressBarComponent>\n                    </div>\n                    <div id=\"info\" className=\"linear-progress\">\n                        <ProgressBarComponent id=\"progress-info\" type='Linear' height='30' width='100%' value={40} progressThickness={progressThickness} trackThickness={trackThickness} isStriped={true} role='Info' animation={animation} load={progressLoad.bind(this)}>\n                        </ProgressBarComponent>\n                    </div>\n                    <div id=\"warning\" className=\"linear-progress\">\n                        <ProgressBarComponent id=\"progress-warning\" type='Linear' height='30' width='100%' value={70} progressThickness={progressThickness} trackThickness={trackThickness} isStriped={true} role='Warning' animation={animation} load={progressLoad.bind(this)}>\n                        </ProgressBarComponent>\n                    </div>\n                    <div id=\"danger\" className=\"linear-progress\">\n                        <ProgressBarComponent id=\"progress-danger\" type='Linear' height='30' width='100%' value={100} progressThickness={progressThickness} trackThickness={trackThickness} isStriped={true} role='Danger' animation={animation} load={progressLoad.bind(this)}>\n                        </ProgressBarComponent>\n                    </div>\n                </div>\n                <div style={{ marginTop: '2%', marginLeft: '45.5%' }}>\n                    <button onClick={replayClick.bind(this)} id=\"reLoad\" className=\"e-control e-btn e-lib e-outline e-primary\">\n                        {buttonvalue}\n                    </button>\n                </div>\n            </div>\n        </div>);\n};\nexport default ProgressBarStripes;\n\nconst root = createRoot(document.getElementById('sample'));\nroot.render(<ProgressBarStripes />);","dependencies":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-react-base\":\"*\",\"@syncfusion/ej2-progressbar\":\"*\",\"@syncfusion/ej2-react-progressbar\":\"*\",\"@syncfusion/ej2-icons\":\"*\",\"markdown-spellcheck\":\"^1.3.1\",\"@syncfusion/ej2-react-charts\":\"*\",\"@syncfusion/ej2/base\":\"*\",\"@syncfusion/ej2-charts'; // Import the necessary types from Syncfusion\":\"*\",\"@syncfusion/ej2-lists\":\"*\",\"@syncfusion/ej2-documenteditor\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-splitbuttons\":\"*\",\"@syncfusion/ej2-navigations\":\"*\",\"@syncfusion/ej2-react-popups\":\"*\",\"@syncfusion/ej2-pivotview\":\"*\"}"}