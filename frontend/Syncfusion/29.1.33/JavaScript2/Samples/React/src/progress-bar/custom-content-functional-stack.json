{"index.css":"/* css */","theme-colors.js":"export function loadProgressBarTheme(args) {\n    let selectedTheme = location.hash.split('/')[1];\n    selectedTheme = selectedTheme ? selectedTheme : 'Tailwind3';\n    args.progressBar.theme = (selectedTheme.charAt(0).toUpperCase() +\n        selectedTheme.slice(1)).replace(/-dark/i, 'Dark').replace(/contrast/i, 'Contrast').replace(/-highContrast/i, 'HighContrast');\n    return args.progressBar.theme;\n}\n;\n","index.html":"<!DOCTYPE html>\n<html>\n<head>\n    <title>Syncfusion React Sample</title>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\n    <meta name=\"author\" content=\"Syncfusion\" />\n    <link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\n</head>\n\n<body class=\"{{theme}}\">\n     <style>\n            .control-section\n            {\n                margin-top: 100px;\n            }\n    </style>\n    <div id='sample'>\n</body>\n</html>\n","index.js":"import { createRoot } from 'react-dom/client';\nimport './index.css';\nimport * as React from \"react\";\nimport { useEffect, useRef } from 'react';\nimport { ProgressBarComponent, ProgressBarAnnotationsDirective, ProgressBarAnnotationDirective, Inject, ProgressAnnotation } from '@syncfusion/ej2-react-progressbar';\n\nimport { loadProgressBarTheme } from './theme-colors';\nconst SAMPLE_CSS = `\n         .control-fluid {\n         padding: 0px !important;\n         }\n     #control-container {\n         padding: 0px !important;\n     }\n \n     .progress-bar-parent {\n         margin-top: 8%;\n         text-align: center;\n     }\n \n     .paligncenter {\n         text-align: center;\n     }\n \n     .plabeltxt {\n         font-size: 20px;\n         font-weight: bold;\n     }\n \n     .reload-btn {\n         text-align: center;\n         margin-top: 3%;\n     }\n \n     #reLoad {\n         border-radius: 4px;\n         text-transform: capitalize;\n     }\n     `;\nconst ProgressBarCustomContents = () => {\n    const pausePlay = useRef(null);\n    const annotate = useRef(null);\n    const downloadProgress = useRef(null);\n    let clearTimeout1;\n    let clearTimeout2;\n    const animation = {\n        enable: true,\n        duration: 2000,\n        delay: 0,\n    };\n    const content1 = `<img src=\"https://ej2.syncfusion.com/react/demos/src/progress-bar/images/material-pause.svg\" alt=\"Pause Icon\"></img>`;\n    const content2 = `<img src=\"https://ej2.syncfusion.com/react/demos/src/progress-bar/images/material-Download.svg\" alt=\"Download Icon\"></img>`;\n    const content3 = '<div id=\"point1\" style=\"font-size:20px;font-weight:bold;color:#b52123;fill:#b52123\"><span>80%</span></div>';\n    const annotationColors = { fluent: '#0D6EFD', fluentdark: '#0D6EFD', material: '#e91e63', fabric: '#0078D6', bootstrap: '#317ab9', bootstrap4: '#007bff', highcontrast: '#FFD939', tailwind: '#4F46E5', bootstrap5: '#0D6EFD', bootstrap5dark: '#0D6EFD', bootstrapdark: '#9A9A9A', fabricdark: '#9A9A9A', materialdark: '#9A9A9A', tailwinddark: '#6366F1', material3: '#6750A4', material3dark: '#D0BCFF', fluent2: '#0F6CBD', fluent2highcontrast: '#1AEBFF', fluent2dark: '#115EA3', tailwind3: '#4F46E5', tailwind3dark: '#6366F1' };\n    const progressLoad = (args) => {\n        let theme = loadProgressBarTheme(args);\n        if (args.progressBar.element.id === 'label-container') {\n            // tslint:disable-next-line:max-line-length\n            args.progressBar.annotations[0].content = '<div id=\"point1\" class=\"plabeltxt\" style=\"color: ' + annotationColors[theme.toLocaleLowerCase().replace(/-/i, '')] + ' \"><span>80%</span></div>';\n        }\n        else if (args.progressBar.element.id === 'download-container') {\n            args.progressBar.annotations[0].content = '<img src=\"https://ej2.syncfusion.com/react/demos/src/progress-bar/images/' + theme.toLocaleLowerCase().replace(/-/i, '') + '-Download.svg\" alt=\"Download Icon\"></img>';\n        }\n        else {\n            args.progressBar.annotations[0].content = '<img src=\"https://ej2.syncfusion.com/react/demos/src/progress-bar/images/' + theme.toLocaleLowerCase().replace(/-/i, '') + '-pause.svg\" alt=\"Pause Icon\"></img>';\n        }\n    };\n    const reloadClick = () => {\n        pausePlay.current.refresh();\n        downloadProgress.current.refresh();\n        annotate.current.refresh();\n    };\n    const progressCompleted = () => {\n        clearTimeout(clearTimeout1);\n        clearTimeout1 = +setTimeout(() => {\n            //tslint:disable-next-line\n            pausePlay.current.annotations[0].content = '<img src=\"https://ej2.syncfusion.com/react/demos/src/progress-bar/images/' + (pausePlay.current.theme).toLowerCase() + '-Play.svg\" alt=\"Play Icon\"></img>';\n            pausePlay.current.dataBind();\n        }, 2000);\n    };\n    const progressCompleted2 = () => {\n        clearTimeout(clearTimeout2);\n        clearTimeout2 = +setTimeout(() => {\n            //tslint:disable-next-line\n            downloadProgress.current.annotations[0].content = '<img src=\"https://ej2.syncfusion.com/react/demos/src/progress-bar/images/' + (downloadProgress.current.theme).toLowerCase() + '-Tick.svg\" alt=\"Tick Icon\"></img>';\n            downloadProgress.current.dataBind();\n        }, 2000);\n    };\n    return (<div className='control-pane'>\n            <style>\n                {SAMPLE_CSS}\n            </style>\n            <div className=\"control-section progress-bar-parent\">\n                <div className=\"row\">\n                    <div className=\"col-lg-4 col-md-4 col-sm-4 paligncenter\">\n                        <ProgressBarComponent id=\"label-container\" ref={annotate} type='Circular' width='160px' height='160px' cornerRadius='Round' startAngle={180} endAngle={180} value={80} animation={animation} progressCompleted={progressCompleted.bind(this)} load={progressLoad.bind(this)}>\n                            <Inject services={[ProgressAnnotation]}/>\n                            <ProgressBarAnnotationsDirective>\n                                <ProgressBarAnnotationDirective content={content3}/>\n                            </ProgressBarAnnotationsDirective>\n                        </ProgressBarComponent>\n                    </div>\n                    <div className=\"col-lg-4 col-md-4 col-sm-4 paligncenter\">\n                        <ProgressBarComponent id=\"pause-container\" ref={pausePlay} type='Circular' width='160px' height='160px' value={100} animation={animation} progressCompleted={progressCompleted.bind(this)} load={progressLoad.bind(this)}>\n                            <Inject services={[ProgressAnnotation]}/>\n                            <ProgressBarAnnotationsDirective>\n                                <ProgressBarAnnotationDirective content={content1}/>\n                            </ProgressBarAnnotationsDirective>\n                        </ProgressBarComponent>\n\n                    </div>\n                    <div className=\"col-lg-4 col-md-4 col-sm-4 paligncenter\">\n                        <ProgressBarComponent id=\"download-container\" ref={downloadProgress} type='Circular' width='160px' height='160px' value={100} enableRtl={false} animation={{ enable: true, duration: 2000, delay: 0, }} progressCompleted={progressCompleted2.bind(this)} load={progressLoad.bind(this)}>\n                            <Inject services={[ProgressAnnotation]}/>\n                            <ProgressBarAnnotationsDirective>\n                                <ProgressBarAnnotationDirective content={content2}/>\n                            </ProgressBarAnnotationsDirective>\n                        </ProgressBarComponent>\n\n                    </div>\n                </div>\n                <div className=\"row\">\n                    <div className=\"col-lg-12 col-md-12 col-12 reload-btn\">\n                        <button onClick={reloadClick.bind(this)} id=\"reLoad\" className=\"e-control e-btn e-lib e-outline e-primary\">\n                            Reload\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </div>);\n};\nexport default ProgressBarCustomContents;\n\nconst root = createRoot(document.getElementById('sample'));\nroot.render(<ProgressBarCustomContents />);","dependencies":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-react-base\":\"*\",\"@syncfusion/ej2-progressbar\":\"*\",\"@syncfusion/ej2-react-progressbar\":\"*\",\"@syncfusion/ej2-icons\":\"*\",\"markdown-spellcheck\":\"^1.3.1\",\"@syncfusion/ej2-react-charts\":\"*\",\"@syncfusion/ej2/base\":\"*\",\"@syncfusion/ej2-charts'; // Import the necessary types from Syncfusion\":\"*\",\"@syncfusion/ej2-lists\":\"*\",\"@syncfusion/ej2-documenteditor\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-splitbuttons\":\"*\",\"@syncfusion/ej2-navigations\":\"*\",\"@syncfusion/ej2-react-popups\":\"*\",\"@syncfusion/ej2-pivotview\":\"*\"}"}