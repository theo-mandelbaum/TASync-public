{"index.css":"/* css */","theme-colors.js":"export function loadProgressBarTheme(args) {\n    let selectedTheme = location.hash.split('/')[1];\n    selectedTheme = selectedTheme ? selectedTheme : 'Tailwind3';\n    args.progressBar.theme = (selectedTheme.charAt(0).toUpperCase() +\n        selectedTheme.slice(1)).replace(/-dark/i, 'Dark').replace(/contrast/i, 'Contrast').replace(/-highContrast/i, 'HighContrast');\n    return args.progressBar.theme;\n}\n;\n","index.html":"<!DOCTYPE html>\n<html>\n<head>\n    <title>Syncfusion React Sample</title>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\n    <meta name=\"author\" content=\"Syncfusion\" />\n    <link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\n</head>\n\n<body class=\"{{theme}}\">\n     <style>\n            .control-section\n            {\n                margin-top: 100px;\n            }\n    </style>\n    <div id='sample'>\n</body>\n</html>\n","index.js":"import { createRoot } from 'react-dom/client';\nimport './index.css';\nimport * as React from \"react\";\nimport { useEffect, useRef, useState } from 'react';\nimport { ProgressBarComponent, ProgressBarAnnotationsDirective, ProgressBarAnnotationDirective, Inject, ProgressAnnotation } from '@syncfusion/ej2-react-progressbar';\n\nimport { loadProgressBarTheme } from './theme-colors';\nconst SAMPLE_CSS = `\n #control-container {\n     padding: 0px !important;\n }\n \n .linear-parent {\n     text-align: center;\n     width: 75%;\n     margin: auto !important;\n }\n \n .linear-button {\n    text-align: center;\n    padding:2%;\n }\n \n .progressbar-mode {\n     text-align: left;\n     font-family: Roboto-Regular;\n     font-size: 14px;\n     color: #3D3E3C;\n     margin-left: 10px;\n     margin-top: 5%;\n     padding: 0px;\n     top: 20px;\n }\n \n #reLoad {\n     border-radius: 4px;\n     text-transform: capitalize;\n }\n     `;\nconst ProgressBarProgressSegment = () => {\n    const circularSeg = useRef(null);\n    let [value, setValue] = useState(40);\n    const content = '<div id=\"point1\" style=\"font-size:24px;font-weight:bold;color:#0078D6\"><span></span></div>';\n    const animation = {\n        enable: true,\n        duration: 2000,\n    };\n    const load = (args) => {\n        loadProgressBarTheme(args);\n    };\n    const progressLoad = (args) => {\n        loadProgressBarTheme(args);\n        switch (args.progressBar.theme) {\n            case 'Material':\n                args.progressBar.annotations[0].content = '<div id=\"point1\" style=\"font-size:24px;font-weight:bold;color:#e91e63\"><span></span></div>';\n                break;\n            case 'Fabric':\n                args.progressBar.annotations[0].content = '<div id=\"point1\" style=\"font-size:24px;font-weight:bold;color:#0078D6\"><span></span></div>';\n                break;\n            case 'Bootstrap':\n                args.progressBar.annotations[0].content = '<div id=\"point1\" style=\"font-size:24px;font-weight:bold;color:#317ab9\"><span></span></div>';\n                break;\n            case 'Bootstrap4':\n                args.progressBar.annotations[0].content = '<div id=\"point1\" style=\"font-size:24px;font-weight:bold;color:#007bff\"><span></span></div>';\n                break;\n            case 'Tailwind':\n            case 'Tailwind3':\n                args.progressBar.annotations[0].content = '<div id=\"point1\" style=\"font-size:24px;font-weight:bold;color:#4F46E5\"><span></span></div>';\n                break;\n            case 'BootstrapDark':\n            case 'FabricDark':\n            case 'MaterialDark':\n                args.progressBar.annotations[0].content = '<div id=\"point1\" style=\"font-size:24px;font-weight:bold;color:#9A9A9A\"><span></span></div>';\n                break;\n            case 'Bootstrap5':\n            case 'Bootstrap5Dark':\n            case 'Fluent':\n            case 'FluentDark':\n                args.progressBar.annotations[0].content = '<div id=\"point1\" style=\"font-size:24px;font-weight:bold;color:#0D6EFD\"><span></span></div>';\n                break;\n            case 'TailwindDark':\n                args.progressBar.annotations[0].content = '<div id=\"point1\" style=\"font-size:24px;font-weight:bold;color:#22D3EE\"><span></span></div>';\n                break;\n            case 'Tailwind3Dark':\n                args.progressBar.annotations[0].content = '<div id=\"point1\" style=\"font-size:24px;font-weight:bold;color:#6366F1\"><span></span></div>';\n                break;\n            case 'Material3':\n                args.progressBar.annotations[0].content = '<div id=\"point1\" style=\"font-size:24px;font-weight:bold;color:#6750A4\"><span></span></div>';\n                break;\n            case 'Material3Dark':\n                args.progressBar.annotations[0].content = '<div id=\"point1\" style=\"font-size:24px;font-weight:bold;color:#D0BCFF\"><span></span></div>';\n                break;\n            case \"Fluent2\":\n                args.progressBar.annotations[0].content = '<div id=\"point1\" style=\"font-size:24px;font-weight:bold;color:#0F6CBD\"><span></span></div>';\n                break;\n            case \"Fluent2Dark\":\n                args.progressBar.annotations[0].content = '<div id=\"point1\" style=\"font-size:24px;font-weight:bold;color:#115EA3\"><span></span></div>';\n                break;\n            case \"Fluent2HighContrast\":\n                args.progressBar.annotations[0].content = '<div id=\"point1\" style=\"font-size:24px;font-weight:bold;color:#1AEBFF\"><span></span></div>';\n                break;\n            default:\n                args.progressBar.annotations[0].content = '<div id=\"point1\" style=\"font-size:24px;font-weight:bold;color:#FFD939\"><span></span></div>';\n                break;\n        }\n    };\n    const timing = () => {\n        if (value >= circularSeg.current.maximum) {\n            clearInterval(timer);\n        }\n        else {\n            setValue(value += 20);\n        }\n    };\n    const timer = setInterval(timing, 2500);\n    return (<div className='control-pane'>\n            <style>\n                {SAMPLE_CSS}\n            </style>\n            <div className=\"control-section\">\n                <div className=\"row linear-parent\">\n                    <div>\n                        <div className=\"col-lg-12 col-sm-12 progressbar-mode\"></div>\n                        <div id=\"linearSegment\">\n                            <ProgressBarComponent id=\"progress-linearSegment\" type='Linear' height='30' width='70%' value={value} segmentCount={50} gapWidth={5} trackThickness={15} progressThickness={15} cornerRadius='Square' animation={animation} load={load.bind(this)}>\n                            </ProgressBarComponent>\n                        </div>\n                    </div>\n                    <div>\n                        <div className=\"col-lg-12 col-sm-12 progressbar-mode\"></div>\n                        <div id=\"circularSegment\">\n                            <ProgressBarComponent id=\"progress-circularSegment\" ref={circularSeg} type='Circular' height='200px' width='200px' value={value} segmentCount={50} gapWidth={5} trackThickness={15} progressThickness={15} startAngle={220} endAngle={140} cornerRadius='Square' animation={animation} load={progressLoad.bind(this)}>\n                                <Inject services={[ProgressAnnotation]}/>\n                                <ProgressBarAnnotationsDirective>\n                                    <ProgressBarAnnotationDirective content={content}/>\n                                </ProgressBarAnnotationsDirective>\n                            </ProgressBarComponent>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>);\n};\nexport default ProgressBarProgressSegment;\n\nconst root = createRoot(document.getElementById('sample'));\nroot.render(<ProgressBarProgressSegment />);","dependencies":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-react-base\":\"*\",\"@syncfusion/ej2-progressbar\":\"*\",\"@syncfusion/ej2-react-progressbar\":\"*\",\"@syncfusion/ej2-icons\":\"*\",\"markdown-spellcheck\":\"^1.3.1\",\"@syncfusion/ej2-react-charts\":\"*\",\"@syncfusion/ej2/base\":\"*\",\"@syncfusion/ej2-charts'; // Import the necessary types from Syncfusion\":\"*\",\"@syncfusion/ej2-lists\":\"*\",\"@syncfusion/ej2-documenteditor\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-splitbuttons\":\"*\",\"@syncfusion/ej2-navigations\":\"*\",\"@syncfusion/ej2-react-popups\":\"*\",\"@syncfusion/ej2-pivotview\":\"*\"}"}