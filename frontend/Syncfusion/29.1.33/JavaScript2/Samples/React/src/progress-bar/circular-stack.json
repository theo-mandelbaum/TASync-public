{"index.css":"/* css */","theme-colors.js":"export function loadProgressBarTheme(args) {\n    let selectedTheme = location.hash.split('/')[1];\n    selectedTheme = selectedTheme ? selectedTheme : 'Tailwind3';\n    args.progressBar.theme = (selectedTheme.charAt(0).toUpperCase() +\n        selectedTheme.slice(1)).replace(/-dark/i, 'Dark').replace(/contrast/i, 'Contrast').replace(/-highContrast/i, 'HighContrast');\n    return args.progressBar.theme;\n}\n;\n","index.html":"<!DOCTYPE html>\n<html>\n<head>\n    <title>Syncfusion React Sample</title>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\n    <meta name=\"author\" content=\"Syncfusion\" />\n    <link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\n</head>\n\n<body class=\"{{theme}}\">\n     <style>\n            .control-section\n            {\n                margin-top: 100px;\n            }\n    </style>\n    <div id='sample'>\n</body>\n</html>\n","index.js":"import { createRoot } from 'react-dom/client';\nimport './index.css';\nimport * as React from \"react\";\nimport { ProgressBarComponent } from '@syncfusion/ej2-react-progressbar';\nimport { SampleBase } from './sample-base';\nimport { loadProgressBarTheme } from './theme-colors';\nconst SAMPLE_CSS = `\n    .annotaion-pro {\n            font-family: Roboto-Regular;\n            font-size: 20px;\n            color: #1B1C1A;\n            letter-spacing: 0.01px;\n        }\n        .progress-bar-parent {\n            margin-top: 8%;\n            text-align: center;\n        }\n        .progress-text {\n            display: inline-flex;\n            margin: auto;\n        }\n        .progress-text-align {\n            font-family: Roboto-Regular;\n            font-size: 12px;\n            color: #3D3E3C;\n            letter-spacing: 0;\n            margin: auto;\n        }\n\n        #control-container {\n            padding: 0px !important;\n        }\n\n        .progress-container-align {\n            text-align: center;\n        }\n\n        .reload-btn {\n            text-align: center;\n        }\n\n        #reLoad {\n            border-radius: 4px;\n            text-transform: capitalize;\n            margin-top: 3%;\n        }\n\n        .progress-container {\n            /*height: -webkit-fill-available; */\n            display: inline-flex;\n        }\n    `;\nexport class ProgressBarDefault extends SampleBase {\n    circluar;\n    rtl;\n    track;\n    rounded;\n    content = '<div id=\"point1\" style=\"font-size:20px;font-weight:bold;color:#b52123;fill:#b52123\"><span>80%</span></div>';\n    annotationColors = ['#e91e63', '#0078D6', '#317ab9', '#007bff', '#FFD939'];\n    replayClick() {\n        this.circluar.refresh();\n        this.rtl.refresh();\n        this.track.refresh();\n        this.rounded.refresh();\n    }\n    progressLoad = (args) => {\n        let div = document.getElementsByClassName('progress-text-align');\n        loadProgressBarTheme(args);\n        if (args.progressBar.theme === 'HighContrast' || args.progressBar.theme === 'Bootstrap5Dark' || args.progressBar.theme === 'BootstrapDark' || args.progressBar.theme === 'FabricDark'\n            || args.progressBar.theme === 'TailwindDark' || args.progressBar.theme === 'Tailwind3Dark' || args.progressBar.theme === 'MaterialDark' || args.progressBar.theme === 'FluentDark' || args.progressBar.theme === 'Material3Dark') {\n            for (let i = 0; i < div.length; i++) {\n                div[i].setAttribute('style', 'color:white');\n            }\n        }\n    };\n    render() {\n        return (<div className='control-pane'>\n                <style>\n                    {SAMPLE_CSS}\n                </style>\n                <div className=\"control-section progress-bar-parent\">\n                    <div className=\"row\">\n                        <div className=\"col-lg-3 col-md-3 col-3 progress-container\">\n                            <div className=\"row progress-container-align\">\n                                <div className=\"col-lg-12 col-md-12 col-12\">\n                                    <ProgressBarComponent id=\"circular-container\" ref={progressbar1 => this.circluar = progressbar1} type='Circular' width='160px' height='160px' enableRtl={false} startAngle={180} endAngle={180} value={100} animation={{\n                enable: true,\n                duration: 2000,\n                delay: 0,\n            }} load={this.progressLoad.bind(this)}>\n                                    </ProgressBarComponent>\n                                </div>\n                                <div className=\"col-lg-12 col-md-12 col-12 progress-text\">\n                                    <div className=\"progress-text-align\">Determinate</div>\n                                </div>\n                            </div>\n                        </div>\n                        <div className=\"col-lg-3 col-md-3 col-3 progress-container\">\n                            <div className=\"row progress-container-align\">\n                                <div className=\"col-lg-12 col-md-12 col-12\">\n                                    <ProgressBarComponent id=\"rtl-container\" ref={progressbar2 => this.rtl = progressbar2} type='Circular' width='160px' height='160px' secondaryProgress={90} value={70} animation={{\n                enable: true,\n                duration: 2000,\n                delay: 0,\n            }} load={this.progressLoad.bind(this)}>\n                                    </ProgressBarComponent>\n                                </div>\n                                <div className=\"col-lg-12 col-md-12 col-12 progress-text\">\n                                    <div className=\"progress-text-align\">Buffer </div>\n                                </div>\n                            </div>\n                        </div>\n                        <div className=\"col-lg-3 col-md-3 col-3 progress-container\">\n                            <div className=\"row progress-container-align\">\n                                <div className=\"col-lg-12 col-md-12 col-12\">\n                                    <ProgressBarComponent id=\"track-container\" ref={progressbar3 => this.track = progressbar3} type='Circular' width='160px' height='160px' minimum={0} maximum={100} segmentCount={4} value={100} animation={{\n                enable: true,\n                duration: 2000,\n                delay: 0,\n            }} load={this.progressLoad.bind(this)}>\n                                    </ProgressBarComponent>\n                                </div>\n                                <div className=\"col-lg-12 col-md-12 col-12 progress-text\">\n                                    <div className=\"progress-text-align\">Segment</div>\n                                </div>\n                            </div>\n                        </div>\n                        <div className=\"col-lg-3 col-md-3 col-3 progress-container\">\n                            <div className=\"row progress-container-align\">\n                                <div className=\"col-lg-12 col-md-12 col-12\">\n                                    <ProgressBarComponent id=\"rounded-container\" ref={progressbar4 => this.rounded = progressbar4} type='Circular' width='160px' height='160px' cornerRadius='Round' isIndeterminate={true} value={20} animation={{\n                enable: true,\n                duration: 2000,\n                delay: 0,\n            }} load={this.progressLoad.bind(this)}>\n                                    </ProgressBarComponent>\n\n                                </div>\n                                <div className=\"col-lg-12 col-md-12 col-12 progress-text\">\n                                    <div className=\"progress-text-align\">Indeterminate</div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"row\">\n                        <div className=\"col-lg-12 col-md-12 col-12 reload-btn\">\n                            <button onClick={this.replayClick.bind(this)} id=\"reLoad\" className=\"e-control e-btn e-lib e-outline e-primary\">Reload</button>\n                        </div>\n                    </div>\n                </div>\n            </div>);\n    }\n}\n\nconst root = createRoot(document.getElementById('sample'));\nroot.render(<ProgressBarDefault />);","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n                this.rendereComplete();\n            });\n        }\n    }\n    export function updateSampleSection(){}\n    ","dependencies":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-react-base\":\"*\",\"@syncfusion/ej2-progressbar\":\"*\",\"@syncfusion/ej2-react-progressbar\":\"*\",\"@syncfusion/ej2-icons\":\"*\",\"markdown-spellcheck\":\"^1.3.1\",\"@syncfusion/ej2-react-charts\":\"*\",\"@syncfusion/ej2/base\":\"*\",\"@syncfusion/ej2-charts'; // Import the necessary types from Syncfusion\":\"*\",\"@syncfusion/ej2-lists\":\"*\",\"@syncfusion/ej2-documenteditor\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-splitbuttons\":\"*\",\"@syncfusion/ej2-navigations\":\"*\",\"@syncfusion/ej2-react-popups\":\"*\",\"@syncfusion/ej2-pivotview\":\"*\"}"}