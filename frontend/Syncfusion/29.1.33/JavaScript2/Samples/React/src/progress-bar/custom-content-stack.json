{"index.css":"/* css */","theme-colors.js":"export function loadProgressBarTheme(args) {\n    let selectedTheme = location.hash.split('/')[1];\n    selectedTheme = selectedTheme ? selectedTheme : 'Tailwind3';\n    args.progressBar.theme = (selectedTheme.charAt(0).toUpperCase() +\n        selectedTheme.slice(1)).replace(/-dark/i, 'Dark').replace(/contrast/i, 'Contrast').replace(/-highContrast/i, 'HighContrast');\n    return args.progressBar.theme;\n}\n;\n","index.html":"<!DOCTYPE html>\n<html>\n<head>\n    <title>Syncfusion React Sample</title>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\n    <meta name=\"author\" content=\"Syncfusion\" />\n    <link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\n</head>\n\n<body class=\"{{theme}}\">\n     <style>\n            .control-section\n            {\n                margin-top: 100px;\n            }\n    </style>\n    <div id='sample'>\n</body>\n</html>\n","index.js":"import { createRoot } from 'react-dom/client';\nimport './index.css';\nimport * as React from \"react\";\nimport { ProgressBarComponent, ProgressBarAnnotationsDirective, ProgressBarAnnotationDirective, Inject, ProgressAnnotation } from '@syncfusion/ej2-react-progressbar';\nimport { SampleBase } from './sample-base';\nimport { loadProgressBarTheme } from './theme-colors';\nconst SAMPLE_CSS = `\n        .control-fluid {\n\t\tpadding: 0px !important;\n        }\n    #control-container {\n        padding: 0px !important;\n    }\n\n    .progress-bar-parent {\n        margin-top: 8%;\n        text-align: center;\n    }\n\n    .paligncenter {\n        text-align: center;\n    }\n\n    .plabeltxt {\n        font-size: 20px;\n        font-weight: bold;\n    }\n\n    .reload-btn {\n        text-align: center;\n        margin-top: 3%;\n    }\n\n    #reLoad {\n        border-radius: 4px;\n        text-transform: capitalize;\n    }\n    `;\nexport class ProgressBarCustomContents extends SampleBase {\n    pausePlay;\n    annotate;\n    downloadProgress;\n    clearTimeout1;\n    clearTimeout2;\n    content1 = `<img src=\"https://ej2.syncfusion.com/react/demos/src/progress-bar/images/material-pause.svg\" alt=\"Pause Icon\"></img>`;\n    content2 = `<img src=\"https://ej2.syncfusion.com/react/demos/src/progress-bar/images/material-Download.svg\" alt=\"Download Icon\"></img>`;\n    content3 = '<div id=\"point1\" style=\"font-size:20px;font-weight:bold;color:#b52123;fill:#b52123\"><span>80%</span></div>';\n    annotationColors = { fluent: '#0D6EFD', fluentdark: '#0D6EFD', material: '#e91e63', fabric: '#0078D6', bootstrap: '#317ab9', bootstrap4: '#007bff', highcontrast: '#FFD939', tailwind: '#4F46E5', bootstrap5: '#0D6EFD', bootstrap5dark: '#0D6EFD', bootstrapdark: '#9A9A9A', fabricdark: '#9A9A9A', materialdark: '#9A9A9A', tailwinddark: '#6366F1', material3: '#6750A4', material3dark: '#D0BCFF', tailwind3: '#4F46E5', tailwind3dark: '#6366F1' };\n    progressLoad = (args) => {\n        let theme = loadProgressBarTheme(args);\n        if (args.progressBar.element.id === 'label-container') {\n            // tslint:disable-next-line:max-line-length\n            args.progressBar.annotations[0].content = '<div id=\"point1\" class=\"plabeltxt\" style=\"color: ' + this.annotationColors[theme.toLocaleLowerCase().replace(/-/i, '')] + ' \"><span>80%</span></div>';\n        }\n        else if (args.progressBar.element.id === 'download-container') {\n            args.progressBar.annotations[0].content = '<img src=\"https://ej2.syncfusion.com/react/demos/src/progress-bar/images/' + theme.toLocaleLowerCase().replace(/-/i, '') + '-Download.svg\" alt=\"Download Icon\"></img>';\n        }\n        else {\n            args.progressBar.annotations[0].content = '<img src=\"https://ej2.syncfusion.com/react/demos/src/progress-bar/images/' + theme.toLocaleLowerCase().replace(/-/i, '') + '-pause.svg\" alt=\"Pause Icon\"></img>';\n        }\n    };\n    reloadClick() {\n        this.pausePlay.refresh();\n        this.downloadProgress.refresh();\n        this.annotate.refresh();\n    }\n    progressCompleted = (args) => {\n        clearTimeout(this.clearTimeout1);\n        this.clearTimeout1 = +setTimeout(() => {\n            //tslint:disable-next-line\n            this.pausePlay.annotations[0].content = '<img src=\"https://ej2.syncfusion.com/react/demos/src/progress-bar/images/' + (this.pausePlay.theme).toLowerCase() + '-Play.svg\" alt=\"Play Icon\"></img>';\n            this.pausePlay.dataBind();\n        }, 2000);\n    };\n    progressCompleted2 = (args) => {\n        clearTimeout(this.clearTimeout2);\n        this.clearTimeout2 = +setTimeout(() => {\n            //tslint:disable-next-line\n            this.downloadProgress.annotations[0].content = '<img src=\"https://ej2.syncfusion.com/react/demos/src/progress-bar/images/' + (this.downloadProgress.theme).toLowerCase() + '-Tick.svg\" alt=\"Tick Icon\"></img>';\n            this.downloadProgress.dataBind();\n        }, 2000);\n    };\n    render() {\n        return (<div className='control-pane'>\n                <style>\n                    {SAMPLE_CSS}\n                </style>\n                <div className=\"control-section progress-bar-parent\">\n                    <div className=\"row\">\n                        <div className=\"col-lg-4 col-md-4 col-sm-4 paligncenter\">\n                            <ProgressBarComponent id=\"label-container\" ref={annotation => this.annotate = annotation} type='Circular' width='160px' height='160px' cornerRadius='Round' startAngle={180} endAngle={180} value={80} animation={{\n                enable: true,\n                duration: 2000,\n                delay: 0,\n            }} progressCompleted={this.progressCompleted.bind(this)} load={this.progressLoad.bind(this)}>\n                                <Inject services={[ProgressAnnotation]}/>\n                                <ProgressBarAnnotationsDirective>\n                                    <ProgressBarAnnotationDirective content={this.content3}>\n\n                                    </ProgressBarAnnotationDirective>\n                                </ProgressBarAnnotationsDirective>\n\n                            </ProgressBarComponent>\n                        </div>\n                        <div className=\"col-lg-4 col-md-4 col-sm-4 paligncenter\">\n                            <ProgressBarComponent id=\"pause-container\" ref={pausePlay => this.pausePlay = pausePlay} type='Circular' width='160px' height='160px' value={100} animation={{\n                enable: true,\n                duration: 2000,\n                delay: 0,\n            }} progressCompleted={this.progressCompleted.bind(this)} load={this.progressLoad.bind(this)}>\n                                <Inject services={[ProgressAnnotation]}/>\n                                <ProgressBarAnnotationsDirective>\n                                    <ProgressBarAnnotationDirective content={this.content1}>\n\n                                    </ProgressBarAnnotationDirective>\n                                </ProgressBarAnnotationsDirective>\n\n                            </ProgressBarComponent>\n\n                        </div>\n                        <div className=\"col-lg-4 col-md-4 col-sm-4 paligncenter\">\n                            <ProgressBarComponent id=\"download-container\" ref={downloadProgress => this.downloadProgress = downloadProgress} type='Circular' width='160px' height='160px' value={100} enableRtl={false} animation={{\n                enable: true,\n                duration: 2000,\n                delay: 0,\n            }} progressCompleted={this.progressCompleted2.bind(this)} load={this.progressLoad.bind(this)}>\n                                <Inject services={[ProgressAnnotation]}/>\n                                <ProgressBarAnnotationsDirective>\n                                    <ProgressBarAnnotationDirective content={this.content2}>\n                                    </ProgressBarAnnotationDirective>\n                                </ProgressBarAnnotationsDirective>\n\n                            </ProgressBarComponent>\n\n                        </div>\n                    </div>\n                    <div className=\"row\">\n                        <div className=\"col-lg-12 col-md-12 col-12 reload-btn\">\n                            <button onClick={this.reloadClick.bind(this)} id=\"reLoad\" className=\"e-control e-btn e-lib e-outline e-primary\">Reload</button>\n                        </div>\n                    </div>\n                </div>\n            </div>);\n    }\n}\n\nconst root = createRoot(document.getElementById('sample'));\nroot.render(<ProgressBarCustomContents />);","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n                this.rendereComplete();\n            });\n        }\n    }\n    export function updateSampleSection(){}\n    ","dependencies":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-react-base\":\"*\",\"@syncfusion/ej2-progressbar\":\"*\",\"@syncfusion/ej2-react-progressbar\":\"*\",\"@syncfusion/ej2-icons\":\"*\",\"markdown-spellcheck\":\"^1.3.1\",\"@syncfusion/ej2-react-charts\":\"*\",\"@syncfusion/ej2/base\":\"*\",\"@syncfusion/ej2-charts'; // Import the necessary types from Syncfusion\":\"*\",\"@syncfusion/ej2-lists\":\"*\",\"@syncfusion/ej2-documenteditor\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-splitbuttons\":\"*\",\"@syncfusion/ej2-navigations\":\"*\",\"@syncfusion/ej2-react-popups\":\"*\",\"@syncfusion/ej2-pivotview\":\"*\"}"}