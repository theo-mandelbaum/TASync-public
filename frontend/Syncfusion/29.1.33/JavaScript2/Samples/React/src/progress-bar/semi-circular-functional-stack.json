{"index.css":"/* css */","theme-colors.js":"export function loadProgressBarTheme(args) {\n    let selectedTheme = location.hash.split('/')[1];\n    selectedTheme = selectedTheme ? selectedTheme : 'Tailwind3';\n    args.progressBar.theme = (selectedTheme.charAt(0).toUpperCase() +\n        selectedTheme.slice(1)).replace(/-dark/i, 'Dark').replace(/contrast/i, 'Contrast').replace(/-highContrast/i, 'HighContrast');\n    return args.progressBar.theme;\n}\n;\n","index.html":"<!DOCTYPE html>\n<html>\n<head>\n    <title>Syncfusion React Sample</title>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\n    <meta name=\"author\" content=\"Syncfusion\" />\n    <link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\n</head>\n\n<body class=\"{{theme}}\">\n     <style>\n            .control-section\n            {\n                margin-top: 100px;\n            }\n    </style>\n    <div id='sample'>\n</body>\n</html>\n","index.js":"import { createRoot } from 'react-dom/client';\nimport './index.css';\nimport * as React from \"react\";\nimport { useEffect, useRef } from 'react';\nimport { ProgressBarComponent, ProgressBarAnnotationsDirective, ProgressBarAnnotationDirective, Inject, ProgressAnnotation } from '@syncfusion/ej2-react-progressbar';\n\nimport { loadProgressBarTheme } from './theme-colors';\nconst SAMPLE_CSS = `\n     .control-fluid {\n         padding: 0px !important;\n     }\n     #control-container {\n         padding: 0px !important;\n     }\n     .annotaion-pro {\n             font-family: Roboto-Regular;\n             font-size: 20px;\n             color: #1B1C1A;\n             letter-spacing: 0.01px;\n         }\n         .progress-bar-parent {\n             margin-top: 8%;\n             text-align: center;\n         }\n         .progress-text {\n             display: inline-flex;\n             margin: auto;\n         }\n         .progress-text-align {\n             font-family: Roboto-Regular;\n             font-size: 12px;\n             color: #3D3E3C;\n             letter-spacing: 0;\n             margin: auto;\n         }\n\n         #control-container {\n             padding: 0px !important;\n         }\n\n         .progress-container-align {\n             text-align: center;\n         }\n\n         .reload-btn {\n             text-align: center;\n         }\n\n         #reLoad {\n             border-radius: 4px;\n             text-transform: capitalize;\n             margin-top: 3%;\n         }\n\n     `;\nconst ProgressBarSemiCircular = () => {\n    const annotationColors = ['#e91e63', '#0078D6', '#317ab9', '#007bff', '#4F46E5', '#FFD939', '#9A9A9A', '#22D3EE', '#0D6EFD', '#6750A4', '#D0BCFF', '#0F6CBD', '#1AEBFF', '#115EA3', '#6366F1'];\n    const content1 = '<div id=\"point1\" style=\"font-size:24px;font-weight:bold;color:#0078D6;fill:#0078D6\"><span>100%</span></div>';\n    const content2 = '<div id=\"point1\" style=\"font-size:24px;font-weight:bold;color:#0078D6;fill:#0078D6\"><span>100%</span></div>';\n    const content3 = '<div id=\"point1\" style=\"font-size:24px;font-weight:bold;color:#0078D6;fill:#0078D6\"><span>100%</span></div>';\n    const content4 = '<div id=\"point1\" style=\"font-size:24px;font-weight:bold;color:#0078D6;fill:#0078D6\"><span>100%</span></div>';\n    const thickness = 5;\n    const animation = {\n        enable: true,\n        duration: 2000,\n        delay: 0,\n    };\n    const inverseSemiProgress = useRef(null);\n    const verticalProgress = useRef(null);\n    const semiProgress = useRef(null);\n    const verticalOppose = useRef(null);\n    const onclick = () => {\n        inverseSemiProgress.current.refresh();\n        verticalProgress.current.refresh();\n        verticalOppose.current.refresh();\n        semiProgress.current.refresh();\n    };\n    const annotationElementContent = (color, controlID) => {\n        let content;\n        switch (controlID) {\n            case 'angle-container':\n                content = '100%';\n                break;\n            case 'vertical-container':\n                content = '100%';\n                break;\n            case 'vsemi-container':\n                content = '100%';\n                break;\n            case 'semi-container':\n                content = '100%';\n                break;\n        }\n        return ('<div id=\"point1\" style=\"font-size:24px;font-weight:bold;color: ' + color + ' \"><span>' + content + '</span></div>');\n    };\n    const progressLoad = (args) => {\n        let selectedTheme = loadProgressBarTheme(args);\n        switch (selectedTheme) {\n            case 'Material':\n                args.progressBar.annotations[0].content = annotationElementContent(annotationColors[0], args.progressBar.element.id);\n                break;\n            case 'Fabric':\n                args.progressBar.annotations[0].content = annotationElementContent(annotationColors[1], args.progressBar.element.id);\n                break;\n            case 'Bootstrap':\n                args.progressBar.annotations[0].content = annotationElementContent(annotationColors[2], args.progressBar.element.id);\n                break;\n            case 'Bootstrap4':\n                args.progressBar.annotations[0].content = annotationElementContent(annotationColors[3], args.progressBar.element.id);\n                break;\n            case 'Tailwind':\n            case 'Tailwind3':\n                args.progressBar.annotations[0].content = annotationElementContent(annotationColors[4], args.progressBar.element.id);\n                break;\n            case 'BootstrapDark':\n            case 'FabricDark':\n            case 'MaterialDark':\n                args.progressBar.annotations[0].content = annotationElementContent(annotationColors[6], args.progressBar.element.id);\n                break;\n            case 'Bootstrap5':\n            case 'Bootstrap5Dark':\n            case 'fluent':\n            case 'FluentDark':\n                args.progressBar.annotations[0].content = annotationElementContent(annotationColors[8], args.progressBar.element.id);\n                break;\n            case 'TailwindDark':\n                args.progressBar.annotations[0].content = annotationElementContent(annotationColors[7], args.progressBar.element.id);\n                break;\n            case 'Tailwind3Dark':\n                args.progressBar.annotations[0].content = annotationElementContent(annotationColors[14], args.progressBar.element.id);\n                break;\n            case 'Material3':\n                args.progressBar.annotations[0].content = annotationElementContent(annotationColors[9], args.progressBar.element.id);\n                break;\n            case 'Material3Dark':\n                args.progressBar.annotations[0].content = annotationElementContent(annotationColors[10], args.progressBar.element.id);\n                break;\n            case \"Fluent2\":\n                args.progressBar.annotations[0].content = annotationElementContent(annotationColors[11], args.progressBar.element.id);\n                break;\n            case \"Fluent2HighContrast\":\n                args.progressBar.annotations[0].content = annotationElementContent(annotationColors[12], args.progressBar.element.id);\n                break;\n            case \"Fluent2Dark\":\n                args.progressBar.annotations[0].content = annotationElementContent(annotationColors[13], args.progressBar.element.id);\n                break;\n            default:\n                args.progressBar.annotations[0].content = annotationElementContent(annotationColors[5], args.progressBar.element.id);\n                break;\n        }\n    };\n    return (<div className='control-pane'>\n            <style>\n                {SAMPLE_CSS}\n            </style>\n            <div className=\"control-section progress-bar-parent\">\n                <div className=\"row\">\n                    <div className=\"col-lg-3 col-md-3 col-3 progress-container\">\n                        <div className=\"progress-container-align\">\n                            <ProgressBarComponent id=\"angle-container\" ref={inverseSemiProgress} type='Circular' startAngle={240} endAngle={120} width='160px' height='160px' minimum={0} maximum={100} value={100} cornerRadius='Round' trackThickness={thickness} progressThickness={thickness} animation={animation} load={progressLoad.bind(this)}>\n                                <Inject services={[ProgressAnnotation]}/>\n                                <ProgressBarAnnotationsDirective>\n                                    <ProgressBarAnnotationDirective content={content1}/>\n                                </ProgressBarAnnotationsDirective>\n                            </ProgressBarComponent>\n                        </div>\n                    </div>\n                    <div className=\"col-lg-3 col-md-3 col-3 progress-container\">\n                        <div className=\"progress-container-align\">\n                            <ProgressBarComponent id=\"vertical-container\" ref={verticalProgress} type='Circular' startAngle={180} endAngle={0} width='160px' height='160px' minimum={0} maximum={100} value={100} cornerRadius='Round' trackThickness={thickness} progressThickness={thickness} load={progressLoad.bind(this)} animation={animation}>\n                                <Inject services={[ProgressAnnotation]}/>\n                                <ProgressBarAnnotationsDirective>\n                                    <ProgressBarAnnotationDirective content={content2}/>   \n                                </ProgressBarAnnotationsDirective>\n                            </ProgressBarComponent>\n                        </div>\n                    </div>\n                    <div className=\"col-lg-3 col-md-3 col-3 progress-container\">\n                        <div className=\"progress-container-align\">\n                            <ProgressBarComponent id=\"vsemi-container\" ref={verticalOppose} type='Circular' startAngle={0} width='160px' height='160px' minimum={0} maximum={100} value={100} cornerRadius='Round' trackThickness={thickness} progressThickness={thickness} load={progressLoad.bind(this)} endAngle={180} animation={animation}>\n                                <Inject services={[ProgressAnnotation]}/>\n                                <ProgressBarAnnotationsDirective>\n                                    <ProgressBarAnnotationDirective content={content3}/>                           \n                                </ProgressBarAnnotationsDirective>\n                            </ProgressBarComponent>\n                        </div>\n                    </div>\n                    <div className=\"col-lg-3 col-md-3 col-3 progress-container\">\n                        <div className=\"progress-container-align\">\n                            <ProgressBarComponent id=\"semi-container\" ref={semiProgress} type='Circular' startAngle={270} endAngle={90} width='160px' height='160px' minimum={0} maximum={100} value={100} cornerRadius='Round' trackThickness={thickness} progressThickness={thickness} load={progressLoad.bind(this)} animation={animation}>\n                                <Inject services={[ProgressAnnotation]}/>\n                                <ProgressBarAnnotationsDirective>\n                                    <ProgressBarAnnotationDirective content={content4}/>                                \n                                </ProgressBarAnnotationsDirective>\n                            </ProgressBarComponent>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"row\">\n                    <div className=\"col-lg-12 col-md-12 col-12 reload-btn\">\n                        <button onClick={onclick.bind(this)} id=\"reLoad\" className=\"e-control e-btn e-lib e-outline e-primary\">Reload</button>\n                    </div>\n                </div>\n            </div>\n        </div>);\n};\nexport default ProgressBarSemiCircular;\n\nconst root = createRoot(document.getElementById('sample'));\nroot.render(<ProgressBarSemiCircular />);","dependencies":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-react-base\":\"*\",\"@syncfusion/ej2-progressbar\":\"*\",\"@syncfusion/ej2-react-progressbar\":\"*\",\"@syncfusion/ej2-icons\":\"*\",\"markdown-spellcheck\":\"^1.3.1\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-react-buttons\":\"*\",\"@syncfusion/ej2-react-charts\":\"*\",\"@syncfusion/ej2/base\":\"*\",\"@syncfusion/ej2-charts'; // Import the necessary types from Syncfusion\":\"*\",\"@syncfusion/ej2-lists\":\"*\",\"@syncfusion/ej2-documenteditor\":\"*\",\"@syncfusion/ej2-splitbuttons\":\"*\",\"@syncfusion/ej2-navigations\":\"*\",\"@syncfusion/ej2-react-popups\":\"*\",\"@syncfusion/ej2-pivotview\":\"*\"}"}