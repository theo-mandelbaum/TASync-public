{"index.css":"/* css */","theme-colors.js":"export function loadProgressBarTheme(args) {\n    let selectedTheme = location.hash.split('/')[1];\n    selectedTheme = selectedTheme ? selectedTheme : 'Tailwind3';\n    args.progressBar.theme = (selectedTheme.charAt(0).toUpperCase() +\n        selectedTheme.slice(1)).replace(/-dark/i, 'Dark').replace(/contrast/i, 'Contrast').replace(/-highContrast/i, 'HighContrast');\n    return args.progressBar.theme;\n}\n;\n","index.html":"<!DOCTYPE html>\n<html>\n<head>\n    <title>Syncfusion React Sample</title>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\n    <meta name=\"author\" content=\"Syncfusion\" />\n    <link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\n</head>\n\n<body class=\"{{theme}}\">\n     <style>\n            .control-section\n            {\n                margin-top: 100px;\n            }\n    </style>\n    <div id='sample'>\n</body>\n</html>\n","index.js":"import { createRoot } from 'react-dom/client';\nimport './index.css';\nimport * as React from \"react\";\nimport { useEffect, useRef, useState } from 'react';\nimport { ProgressBarComponent } from '@syncfusion/ej2-react-progressbar';\n\nimport { loadProgressBarTheme } from './theme-colors';\nconst SAMPLE_CSS = `\n     .annotaion-pro {\n             font-family: Roboto-Regular;\n             font-size: 20px;\n             color: #1B1C1A;\n             letter-spacing: 0.01px;\n         }\n         .progress-bar-parent {\n             margin-top: 8%;\n             text-align: center;\n         }\n         .progress-text {\n             display: inline-flex;\n             margin: auto;\n         }\n         .progress-text-align {\n             font-family: Roboto-Regular;\n             font-size: 12px;\n             color: #3D3E3C;\n             letter-spacing: 0;\n             margin: auto;\n         }\n \n         #control-container {\n             padding: 0px !important;\n         }\n \n         .progress-container-align {\n             text-align: center;\n         }\n \n         .reload-btn {\n             text-align: center;\n         }\n \n         #reLoad {\n             border-radius: 4px;\n             text-transform: capitalize;\n             margin-top: 3%;\n         }\n \n         .progress-container {\n             /*height: -webkit-fill-available; */\n             display: inline-flex;\n         }\n     `;\nconst ProgressBarDefault = () => {\n    const circluar = useRef(null);\n    const rtl = useRef(null);\n    const track = useRef(null);\n    const rounded = useRef(null);\n    const [style, setStyle] = useState({ color: \"\" });\n    const animation = {\n        enable: true,\n        duration: 2000,\n        delay: 0,\n    };\n    const replayClick = () => {\n        circluar.current.refresh();\n        rtl.current.refresh();\n        track.current.refresh();\n        rounded.current.refresh();\n    };\n    const progressLoad = (args) => {\n        loadProgressBarTheme(args);\n        if (args.progressBar.theme === 'HighContrast' || args.progressBar.theme === 'Bootstrap5Dark' || args.progressBar.theme === 'BootstrapDark' || args.progressBar.theme === 'FabricDark'\n            || args.progressBar.theme === 'TailwindDark' || args.progressBar.theme === 'Tailwind3Dark' || args.progressBar.theme === 'MaterialDark' || args.progressBar.theme === 'FluentDark' || args.progressBar.theme === 'Material3Dark' || args.progressBar.theme === 'Fluent2Dark' || args.progressBar.theme === 'Fluent2HighContrast') {\n            setStyle({ color: \"White\" });\n        }\n    };\n    return (<div className='control-pane'>\n            <style>\n                {SAMPLE_CSS}\n            </style>\n            <div className=\"control-section progress-bar-parent\">\n                <div className=\"row\">\n                    <div className=\"col-lg-3 col-md-3 col-3 progress-container\">\n                        <div className=\"row progress-container-align\">\n                            <div className=\"col-lg-12 col-md-12 col-12\">\n                                <ProgressBarComponent id=\"circular-container\" ref={circluar} type='Circular' width='160px' height='160px' enableRtl={false} startAngle={180} endAngle={180} value={100} animation={animation} load={progressLoad.bind(this)}>\n                                </ProgressBarComponent>\n                            </div>\n                            <div className=\"col-lg-12 col-md-12 col-12 progress-text\">\n                                <div className=\"progress-text-align\" style={style}>Determinate</div>\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"col-lg-3 col-md-3 col-3 progress-container\">\n                        <div className=\"row progress-container-align\">\n                            <div className=\"col-lg-12 col-md-12 col-12\">\n                                <ProgressBarComponent id=\"rtl-container\" ref={rtl} type='Circular' width='160px' height='160px' secondaryProgress={90} value={70} animation={animation} load={progressLoad.bind(this)}>\n                                </ProgressBarComponent>\n                            </div>\n                            <div className=\"col-lg-12 col-md-12 col-12 progress-text\">\n                                <div className=\"progress-text-align\" style={style}>Buffer </div>\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"col-lg-3 col-md-3 col-3 progress-container\">\n                        <div className=\"row progress-container-align\">\n                            <div className=\"col-lg-12 col-md-12 col-12\">\n                                <ProgressBarComponent id=\"track-container\" ref={track} type='Circular' width='160px' height='160px' minimum={0} maximum={100} segmentCount={4} value={100} animation={animation} load={progressLoad.bind(this)}>\n                                </ProgressBarComponent>\n                            </div>\n                            <div className=\"col-lg-12 col-md-12 col-12 progress-text\">\n                                <div className=\"progress-text-align\" style={style}>Segment</div>\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"col-lg-3 col-md-3 col-3 progress-container\">\n                        <div className=\"row progress-container-align\">\n                            <div className=\"col-lg-12 col-md-12 col-12\">\n                                <ProgressBarComponent id=\"rounded-container\" ref={rounded} type='Circular' width='160px' height='160px' cornerRadius='Round' isIndeterminate={true} value={20} animation={animation} load={progressLoad.bind(this)}>\n                                </ProgressBarComponent>\n\n                            </div>\n                            <div className=\"col-lg-12 col-md-12 col-12 progress-text\">\n                                <div className=\"progress-text-align\" style={style}>Indeterminate</div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"row\">\n                    <div className=\"col-lg-12 col-md-12 col-12 reload-btn\">\n                        <button onClick={replayClick.bind(this)} id=\"reLoad\" className=\"e-control e-btn e-lib e-outline e-primary\">\n                            Reload\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </div>);\n};\nexport default ProgressBarDefault;\n\nconst root = createRoot(document.getElementById('sample'));\nroot.render(<ProgressBarDefault />);","dependencies":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-react-base\":\"*\",\"@syncfusion/ej2-progressbar\":\"*\",\"@syncfusion/ej2-react-progressbar\":\"*\",\"@syncfusion/ej2-icons\":\"*\",\"markdown-spellcheck\":\"^1.3.1\",\"@syncfusion/ej2-react-charts\":\"*\",\"@syncfusion/ej2/base\":\"*\",\"@syncfusion/ej2-charts'; // Import the necessary types from Syncfusion\":\"*\",\"@syncfusion/ej2-lists\":\"*\",\"@syncfusion/ej2-documenteditor\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-splitbuttons\":\"*\",\"@syncfusion/ej2-navigations\":\"*\",\"@syncfusion/ej2-react-popups\":\"*\",\"@syncfusion/ej2-pivotview\":\"*\"}"}