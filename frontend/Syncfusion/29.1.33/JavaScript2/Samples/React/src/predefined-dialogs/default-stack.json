{"index.css":"#predefinedDialogDefault {\n    padding: 25px 0 0 25px;\n}\n#predefinedDialogDefault #statusText{\n    font-size:16px;\n    margin-top: 20px;\n}\n#predefinedDialogDefault .e-btn{\n    margin-right: 10px;\n}\n.e-alert-dialog.e-dialog.e-popup, .e-confirm-dialog.e-dialog.e-popup{\n    margin: 30px auto;\n    width: auto;\n}","index.html":"<!DOCTYPE html>\n<html>\n<head>\n    <title>Syncfusion React Sample</title>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\n    <meta name=\"author\" content=\"Syncfusion\" />\n    <link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\n</head>\n\n<body class=\"{{theme}}\">\n     <style>\n            .control-section\n            {\n                margin-top: 100px;\n            }\n    </style>\n    <div id='sample'>\n</body>\n</html>\n","index.js":"import { createRoot } from 'react-dom/client';\nimport './index.css';\nimport * as React from 'react';\nimport { DialogUtility } from '@syncfusion/ej2-react-popups';\nimport { ButtonComponent } from '@syncfusion/ej2-react-buttons';\nimport { SampleBase } from './sample-base';\n\nlet dialogObj;\nexport class DefaultFunctionalities extends SampleBase {\n    constructor(props) {\n        super(props);\n        this.state = {};\n    }\n    buttonClick(args) {\n        if (args.target.textContent.toLowerCase() == 'alert') {\n            document.getElementById(\"statusText\").style.display = \"none\";\n            dialogObj = DialogUtility.alert({\n                title: 'Low Battery',\n                content: '10% of battery remaining',\n                okButton: { click: this.alertOkAction.bind(this) },\n                position: { X: 'center', Y: 'center' },\n                closeOnEscape: true\n            });\n        }\n        else if (args.target.textContent.toLowerCase() == 'confirm') {\n            document.getElementById(\"statusText\").style.display = \"none\";\n            dialogObj = DialogUtility.confirm({\n                title: ' Delete Multiple Items',\n                content: \"Are you sure you want to permanently delete these items?\",\n                okButton: { click: this.confirmOkAction.bind(this) },\n                cancelButton: { click: this.confirmCancelAction.bind(this) },\n                position: { X: 'center', Y: 'center' },\n                closeOnEscape: true\n            });\n        }\n        else if (args.target.textContent.toLowerCase() == 'prompt') {\n            document.getElementById(\"statusText\").style.display = \"none\";\n            dialogObj = DialogUtility.confirm({\n                title: 'Join Chat Group',\n                content: '<p>Enter your name: </p><input id= \"inputEle\" type=\"text\" name=\"Required\" class=\"e-input\" placeholder=\"Type here..\" />',\n                okButton: { click: this.promptOkAction.bind(this) },\n                cancelButton: { click: this.promptCancelAction.bind(this) },\n                position: { X: 'center', Y: 'center' },\n                closeOnEscape: true\n            });\n        }\n    }\n    alertOkAction() {\n        dialogObj.hide();\n        document.getElementById(\"statusText\").innerHTML = \"The user canceled the dialog box.\";\n        document.getElementById(\"statusText\").style.display = \"block\";\n    }\n    ;\n    confirmOkAction() {\n        dialogObj.hide();\n        document.getElementById(\"statusText\").innerHTML = \" The user confirmed the dialog box\";\n        document.getElementById(\"statusText\").style.display = \"block\";\n    }\n    confirmCancelAction() {\n        dialogObj.hide();\n        document.getElementById(\"statusText\").innerHTML = \"The user canceled the dialog box.\";\n        document.getElementById(\"statusText\").style.display = \"block\";\n    }\n    promptOkAction() {\n        let value;\n        value = document.getElementById(\"inputEle\").value;\n        if (value == \"\") {\n            dialogObj.hide();\n            document.getElementById(\"statusText\").innerHTML = \"The user's input is returned as\\\" \\\" \";\n            document.getElementById(\"statusText\").style.display = \"block\";\n        }\n        else {\n            dialogObj.hide();\n            document.getElementById(\"statusText\").innerHTML = \"The user's input is returned as\" + \" \" + value;\n            document.getElementById(\"statusText\").style.display = \"block\";\n        }\n    }\n    promptCancelAction() {\n        dialogObj.hide();\n        document.getElementById(\"statusText\").innerHTML = \"The user canceled the prompt dialog\";\n        document.getElementById(\"statusText\").style.display = \"block\";\n    }\n    render() {\n        return (<div className='control-pane'>\n                <div id='predefinedDialogDefault' className='col-lg-12 control-section dialog-target'>\n                    {/* Buttons to open the corresponding Predefined Dialog */}\n                    <ButtonComponent id=\"alertBtn\" cssClass=\"e-danger e-control e-btn dlgbtn\" onClick={this.buttonClick.bind(this)}>Alert</ButtonComponent>\n                    <ButtonComponent id=\"confirmBtn\" cssClass=\"e-success e-control e-btn dlgbtn\" onClick={this.buttonClick.bind(this)}>Confirm</ButtonComponent>\n                    <ButtonComponent id=\"promptBtn\" isPrimary cssClass=\"e-control e-btn dlgbtn\" onClick={this.buttonClick.bind(this)}>Prompt</ButtonComponent>\n                    <span id=\"statusText\"></span>             \n                </div>\n            </div>);\n    }\n}\n\nconst root = createRoot(document.getElementById('sample'));\nroot.render(<DefaultFunctionalities />);","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n                this.rendereComplete();\n            });\n        }\n    }\n    export function updateSampleSection(){}\n    ","dependencies":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-react-base\":\"*\",\"@syncfusion/ej2-popups\":\"*\",\"@syncfusion/ej2-react-popups\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-react-buttons\":\"*\",\"@syncfusion/ej2-react-charts\":\"*\",\"@syncfusion/ej2/base\":\"*\",\"@syncfusion/ej2-charts'; // Import the necessary types from Syncfusion\":\"*\",\"@syncfusion/ej2-lists\":\"*\",\"@syncfusion/ej2-documenteditor\":\"*\",\"@syncfusion/ej2-splitbuttons\":\"*\",\"@syncfusion/ej2-navigations\":\"*\",\"@syncfusion/ej2-pivotview\":\"*\"}"}