{"index.css":"/* css */","index.html":"<!DOCTYPE html>\n<html>\n<head>\n    <title>Syncfusion React Sample</title>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\n    <meta name=\"author\" content=\"Syncfusion\" />\n    <link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\n</head>\n\n<body class=\"{{theme}}\">\n     <style>\n            .control-section\n            {\n                margin-top: 100px;\n            }\n    </style>\n    <div id='sample'>\n</body>\n</html>\n","index.js":"import { createRoot } from 'react-dom/client';\nimport './index.css';\n// Import necessary modules and components from Syncfusion and React libraries.\nimport * as React from 'react';\nimport { DiagramComponent, Inject, UndoRedo, SnapConstraints, PortVisibility, DiagramTools, Diagram } from '@syncfusion/ej2-react-diagrams';\nimport { SampleBase } from './sample-base';\n// Enable Undo and Redo functionality in the Diagram component.\nDiagram.Inject(UndoRedo);\n// Declare a variable to hold the instance of the DiagramComponent.\nlet diagramInstance;\n// Creates a text node with specified properties.\nfunction createTextNode(id, width, height, offsetX, offsetY, content, fill, bold) {\n    return {\n        id: id,\n        width: width,\n        height: height,\n        offsetX: offsetX,\n        offsetY: offsetY,\n        shape: { type: \"Text\", content: content },\n        style: { fill: fill, bold: bold }\n    };\n}\n// Creates a port with specified properties.\nfunction createPort(id, offsetX, offsetY) {\n    return {\n        id,\n        offset: { x: offsetX, y: offsetY },\n        visibility: PortVisibility.Hidden,\n    };\n}\n// Creates a basic node (rectangle) with ports.\nfunction createBasicNode(id, width, height, offsetX, offsetY, ports) {\n    return {\n        id: id,\n        shape: { type: 'Basic', shape: 'Rectangle' },\n        width: width,\n        height: height,\n        offsetX: offsetX,\n        offsetY: offsetY,\n        style: { fill: 'orange', strokeColor: 'orange' },\n        ports: ports,\n    };\n}\n// Creates a straight connector between two points.\nfunction createConnector(id, sourceX, sourceY, targetX, targetY) {\n    return {\n        id: id,\n        type: 'Straight',\n        sourcePoint: { x: sourceX, y: sourceY },\n        targetPoint: { x: targetX, y: targetY },\n        targetDecorator: { shape: 'None' },\n        style: { strokeColor: '#A5A6A7' }\n    };\n}\n// Creates a straight connector between two nodes using ports.\nfunction createArrowConnector(id, sourceID, sourcePortID, targetID, targetPortID) {\n    return {\n        id,\n        type: 'Straight',\n        sourceID,\n        sourcePortID,\n        targetID,\n        targetPortID,\n    };\n}\n// Define nodes for the sequence diagram.\nlet nodes = [\n    createTextNode('employee', 100, 60, 100, 100, 'Employee', 'transparent', true),\n    createTextNode('teamLead', 100, 60, 350, 100, 'Team Lead', 'transparent', true),\n    createTextNode('dashboard', 100, 60, 600, 100, 'Dashboard', 'transparent', true),\n    createTextNode('manager', 100, 60, 850, 100, 'Manager', 'transparent', true),\n    createTextNode('leaveRequest', 100, 60, 225, 250, 'Leave Request', 'transparent', false),\n    createTextNode('leaveApproval', 100, 60, 225, 484, 'Leave Approval', 'transparent', false),\n    createTextNode('checkEmplyeeAvail', 175, 30, 470, 345, 'Check Employee availability and task status', 'transparent', false),\n    createTextNode('forwardLeaveMssg', 150, 30, 600, 420, 'Forward Leave Request', 'transparent', false),\n    createTextNode('noObjection', 150, 30, 600, 460, 'No Objection', 'transparent', false),\n    createBasicNode('employeeNode', 10, 250, 100, 350, [\n        createPort('p1', 1, 0.05),\n        createPort('p2', 1, 0.97),\n    ]),\n    createBasicNode('teamLeadNode', 10, 190, 350, 320, [\n        createPort('p1', 0, 0.07),\n        createPort('p2', 1, 0.92),\n        createPort('p3', 1, 0.5),\n    ]),\n    createBasicNode('dashboardNode', 10, 25, 600, 320, [\n        createPort('p1', 0, 0.5),\n    ]),\n    createBasicNode('managerNode', 10, 50, 850, 420, [\n        createPort('p1', 0, 0.1),\n        createPort('p2', 0, 0.9),\n    ])\n];\n// Define connectors for the sequence diagram.\nlet connectors = [\n    createConnector('employeeCon1', 100, 120, 100, 225),\n    createConnector('employeeCon2', 100, 475, 100, 600),\n    createConnector('teamLeanCon1', 350, 120, 350, 225),\n    createConnector('teamLeanCon2', 350, 415, 350, 600),\n    createConnector('dashboardCon1', 600, 120, 600, 307),\n    createConnector('dashboardCon2', 600, 333, 600, 600),\n    createConnector('managerCon1', 850, 120, 850, 395),\n    createConnector('managerCon2', 850, 445, 850, 600),\n    createArrowConnector('empToTeamLead', 'employeeNode', 'p1', 'teamLeadNode', 'p1'),\n    createArrowConnector('teamLeadToDash', 'teamLeadNode', 'p3', 'dashboardNode', 'p1'),\n    createArrowConnector('teamLeadToManager', 'teamLeadNode', 'p2', 'managerNode', 'p1'),\n    {\n        id: 'teamLeadToEmp',\n        type: 'Straight',\n        sourcePoint: { x: 350, y: 465 },\n        style: { strokeDashArray: '4 4' },\n        targetID: 'employeeNode',\n        targetPortID: 'p2',\n    },\n    {\n        id: 'managerToTeamLead',\n        type: 'Straight',\n        sourceID: 'managerNode',\n        sourcePortID: 'p2',\n        targetPoint: { x: 350, y: 440 },\n        style: { strokeDashArray: '4 4' },\n    },\n];\n// SequenceDiagram component renders a UML sequence diagram using Syncfusion's DiagramComponent.\nexport class SequenceDiagram extends SampleBase {\n    render() {\n        return (<div className=\"control-pane diagram-control-pane\">\n                <div>\n                    {/* Initializes and renders diagram control */}\n                    <DiagramComponent id=\"diagram\" ref={(diagram) => (diagramInstance = diagram)} width={'100%'} height={'700px'} nodes={nodes} connectors={connectors} tool={DiagramTools.ZoomPan} created={() => {\n                // Fit the diagram to the page on creation.\n                diagramInstance.fitToPage();\n            }} getConnectorDefaults={(connector) => {\n                // Customize the default appearance of connectors.\n                connector.targetDecorator.style = {\n                    fill: '#489ECC',\n                    strokeColor: '#489ECC',\n                };\n                if (connector.targetDecorator.shape === 'Arrow') {\n                    connector.style = { strokeColor: '#489ECC', strokeWidth: 2 };\n                }\n                return connector;\n            }} snapSettings={{ constraints: SnapConstraints.None }}>\n                        <Inject services={[UndoRedo]}/>\n                    </DiagramComponent>\n                </div>\n            </div>);\n    }\n}\n\nconst root = createRoot(document.getElementById('sample'));\nroot.render(<SequenceDiagram />);","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n                this.rendereComplete();\n            });\n        }\n    }\n    export function updateSampleSection(){}\n    ","dependencies":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-react-base\":\"*\",\"@syncfusion/ej2-diagrams\":\"*\",\"@syncfusion/ej2-react-diagrams\":\"*\",\"@syncfusion/ej2-react-charts\":\"*\",\"@syncfusion/ej2/base\":\"*\",\"@syncfusion/ej2-charts'; // Import the necessary types from Syncfusion\":\"*\",\"@syncfusion/ej2-lists\":\"*\"}"}