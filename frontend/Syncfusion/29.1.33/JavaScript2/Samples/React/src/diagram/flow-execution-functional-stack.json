{"index.css":"/* css */","index.html":"<!DOCTYPE html>\n<html>\n<head>\n    <title>Syncfusion React Sample</title>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\n    <meta name=\"author\" content=\"Syncfusion\" />\n    <link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\n</head>\n\n<body class=\"{{theme}}\">\n     <style>\n            .control-section\n            {\n                margin-top: 100px;\n            }\n    </style>\n    <div id='sample'>\n</body>\n</html>\n","index.js":"import { createRoot } from 'react-dom/client';\nimport './index.css';\nimport * as React from \"react\";\nimport { Node, DataBinding, DiagramComponent, SnapConstraints, Inject } from \"@syncfusion/ej2-react-diagrams\";\n\nimport { RadioButtonComponent } from \"@syncfusion/ej2-react-buttons\";\nlet port1 = { id: 'port1', offset: { x: 0.5, y: 1 } };\nlet port = { id: 'port', offset: { x: 1, y: 0.5 } };\n// Initialize Diagram Nodes\nlet nodes = [];\nnodes.push(createNodes('node1', 100, 125, 'Terminator', 'Begin'));\nnodes.push(createNodes('node2', 300, 125, 'Process', 'Specify collection', [port]));\nnodes.push(createNodes('node3', 500, 125, 'Decision', 'Particulars \\n required?', [port1]));\nnodes.push(createNodes('node4', 730, 125, 'Process', 'Specify particulars'));\nnodes.push(createNodes('node5', 500, 225, 'Process', 'Design collection', [port]));\nnodes.push(createNodes('node6', 500, 320, 'Process', 'Cluster of events'));\nnodes.push(createNodes('node7', 500, 420, 'Process', 'Start the process'));\nnodes.push(createNodes('node8', 730, 320, 'Process', 'Record and analyze \\n results', [port]));\nnodes.push(createNodes('node9', 730, 420, 'Terminator', 'End '));\n// Initialize diagram connectors\nlet connectors = [];\nconnectors.push(createConnector('connector1', 'node1', 'node2', ''));\nconnectors.push(createConnector('connector2', 'node2', 'node3', ''));\nconnectors.push(createConnector('connector3', 'node3', 'node4', 'Yes'));\nconnectors.push(createConnector('connector4', 'node3', 'node5', 'No'));\nconnectors.push(createConnector('connector5', 'node5', 'node6', ''));\nconnectors.push(createConnector('connector6', 'node6', 'node7', ''));\nconnectors.push(createConnector('connector7', 'node8', 'node6', ''));\nconnectors.push(createConnector('connector8', 'node7', 'node9', ''));\nconnectors.push(createConnector('connector10', 'node4', 'node5', '', 'Orthogonal', 'Bottom', 'port', 220));\nlet SAMPLE_CSS = `\n#flowExecitionPropertySection .row {\n            margin-left: 0px;\n            margin-right: 0px;\n        }\n\n        #flowExecitionPropertySection .col-xs-7 {\n            width: 300px;\n        }\n\n        #flowExecitionPropertySection .col-xs-7 {\n            padding-left: 0px;\n            padding-right: 0px;\n        }\n\n        #flowExecitionControlSection.content-wrapper {\n            border: 1px solid #D7D7D7;\n        }\n`;\nlet diagramInstance;\n// Initialize the connector object with basic properties.\nfunction createConnector(name, source, target, content, type, direction, targePort, length) {\n    let connector = {};\n    connector.id = name;\n    connector.sourceID = source;\n    connector.targetID = target;\n    if (targePort) {\n        connector.targetPortID = targePort;\n    }\n    connector.style = { strokeWidth: 2, strokeColor: '#8D8D8D' };\n    let annotation = { content: content, style: { fill: 'white' } };\n    connector.annotations = [annotation];\n    connector.targetDecorator = { style: { strokeColor: '#8D8D8D', fill: '#8D8D8D' } };\n    if (type) {\n        connector.type = type;\n        let segment = { type: type, direction: direction, length: length };\n        connector.segments = [segment];\n    }\n    return connector;\n}\n// Initialize the node object with basic properties.\nfunction createNodes(id, offsetX, offsetY, shapeType, content, ports) {\n    let node = {\n        id,\n        offsetX,\n        offsetY,\n        width: 150,\n        height: 50,\n        style: { fill: '#FBF6E1', strokeColor: '#E8DFB6', strokeWidth: 2 },\n        shape: { type: 'Flow', shape: shapeType }\n    };\n    let annotations = { content: content };\n    node.annotations = [annotations];\n    if (ports) {\n        node.ports = ports;\n    }\n    return node;\n}\nlet highlightedObjects = [];\nlet selectedButton = 'LinksConnected';\nfunction buttonChange(args) {\n    applyChanges(args.event.srcElement.id);\n    selectedButton = args.event.srcElement.id;\n}\n// Function To call respective methods based on user selection.\nfunction applyChanges(id) {\n    Unhighlight();\n    switch (id) {\n        case 'LinksInto':\n            highlightIncomingConnections();\n            break;\n        case 'LinksOutOf':\n            highlightOutgoingConnections();\n            break;\n        case 'LinksConnected':\n            highlightIncomingConnections();\n            highlightOutgoingConnections();\n            break;\n        case 'NodesInto':\n            highlightIncomingNodes();\n            break;\n        case 'NodesOutOf':\n            highlightOutgoingNodes();\n            break;\n        case 'NodesConnected':\n            highlightIncomingNodes();\n            highlightOutgoingNodes();\n            break;\n        case 'NodesReachable':\n            highlightReachableNodes();\n            break;\n    }\n}\n// Highlight connectors\nfunction highlightConnectors(edges) {\n    edges.forEach(edge => {\n        let index = diagramInstance.connectors.indexOf(diagramInstance.nameTable[edge]);\n        highlightedObjects.push(edge);\n        let connector = diagramInstance.connectors[index];\n        connector.style.strokeColor = '#1413F8';\n        connector.targetDecorator.style.strokeColor = '#1413F8';\n        connector.targetDecorator.style.fill = '#1413F8';\n        diagramInstance.dataBind();\n    });\n}\n;\n// Function to display the incoming connectors.\nfunction highlightIncomingConnections() {\n    if (diagramInstance.selectedItems.nodes.length) {\n        let edges = diagramInstance.selectedItems.nodes[0].inEdges;\n        highlightConnectors(edges);\n    }\n}\n// Function to display the outgoing connectors.\nfunction highlightOutgoingConnections() {\n    if (diagramInstance.selectedItems.nodes.length) {\n        let edges = diagramInstance.selectedItems.nodes[0].outEdges;\n        highlightConnectors(edges);\n    }\n}\n// Highlight Nodes\nfunction highlightNodes(edges, edgeType) {\n    edges.forEach(edge => {\n        let nodeId = diagramInstance.nameTable[edge][edgeType];\n        highlightedObjects.push(nodeId);\n        let index = diagramInstance.nodes.indexOf(diagramInstance.nameTable[nodeId]);\n        diagramInstance.nodes[index].style.strokeColor = '#1413F8';\n        diagramInstance.dataBind();\n    });\n}\n;\n// Function to display the incoming Nodes.\nfunction highlightIncomingNodes() {\n    if (diagramInstance.selectedItems.nodes.length) {\n        let edges = diagramInstance.selectedItems.nodes[0].inEdges;\n        highlightNodes(edges, 'sourceID');\n    }\n}\n// Function to display the outgoing Nodes.\nfunction highlightOutgoingNodes() {\n    if (diagramInstance.selectedItems.nodes.length) {\n        let edges = diagramInstance.selectedItems.nodes[0].outEdges;\n        highlightNodes(edges, 'targetID');\n    }\n}\n// Function to display the flow of execution.\nfunction highlightReachableNodes() {\n    if (diagramInstance.selectedItems.nodes.length) {\n        let connectors = diagramInstance.selectedItems.nodes[0].outEdges;\n        let nodeList = findConnectedNodes(connectors, []);\n        highlightConnectors(nodeList);\n    }\n}\n// Function to find the connected nodes.\nfunction findConnectedNodes(edges, nodeList) {\n    for (let i = 0; i < edges.length; i++) {\n        let connector = diagramInstance.nameTable[edges[i]];\n        if (nodeList.indexOf(connector.id) > -1) {\n            break;\n        }\n        if (!connector.annotations[0] || connector.annotations[0].content !== 'No') {\n            nodeList.push(connector.id);\n        }\n        if (diagramInstance.nameTable[connector.targetID].outEdges.length) {\n            if (edges.indexOf(connector.targetID) === -1) {\n                findConnectedNodes(diagramInstance.nameTable[connector.targetID].outEdges, nodeList);\n            }\n        }\n    }\n    return nodeList;\n}\n// Function To unhighlight highlighted objects.\nfunction Unhighlight() {\n    for (let i = highlightedObjects.length - 1; i >= 0; i--) {\n        if (diagramInstance.nameTable[highlightedObjects[i]] instanceof Node) {\n            let index = diagramInstance.nodes.indexOf(diagramInstance.nameTable[highlightedObjects[i]]);\n            diagramInstance.nodes[index].style.strokeColor = '#E8DFB6';\n            diagramInstance.dataBind();\n        }\n        else {\n            let index = diagramInstance.connectors.indexOf(diagramInstance.nameTable[highlightedObjects[i]]);\n            var connector = diagramInstance.connectors[index];\n            connector.style.strokeColor = '#8D8D8D';\n            connector.targetDecorator.style.strokeColor = '#8D8D8D';\n            connector.targetDecorator.style.fill = '#8D8D8D';\n            diagramInstance.dataBind();\n        }\n    }\n    highlightedObjects = [];\n}\nfunction FlowExecution() {\n    React.useEffect(() => {\n        renderComplete();\n    }, []);\n    function renderComplete() {\n        diagramInstance.select([diagramInstance.nodes[2]]);\n        diagramInstance.selectionChange = (arg) => {\n            applyChanges(selectedButton);\n        };\n    }\n    return (<div className=\"control-pane1\">\n            <div className=\"col-lg-8 control-section\">\n                <style>{SAMPLE_CSS}</style>\n                <div id=\"flowExecitionControlSection\" className=\"content-wrapper\" style={{ width: \"100%\" }}>\n                    <DiagramComponent id=\"diagram\" ref={diagram => (diagramInstance = diagram)} width={\"100%\"} height={\"600px\"} nodes={nodes} snapSettings={{ constraints: SnapConstraints.None }} connectors={connectors} created={(args) => {\n            diagramInstance.select([diagramInstance.nodes[2]]);\n        }} selectionChange={(args) => {\n            applyChanges(selectedButton);\n        }}>\n                        <Inject services={[DataBinding]}/>\n                    </DiagramComponent>\n                </div>\n            </div>\n            <div id=\"flowExecitionPropertySection\" className=\"col-lg-4 property-section\">\n                <div className=\"property-panel-header\"> Choose a flow</div>\n                <div className=\"row property-panel-content\" id=\"appearance\">\n                    <div className=\"row property-panel-content\" style={{ overflow: \"hidden\" }}>\n                        {[\n            { id: \"UnhighlightAll\", label: \"None\" },\n            { id: \"LinksInto\", label: \"Incoming connections\" },\n            { id: \"LinksOutOf\", label: \"Outgoing connections\" },\n            { id: \"LinksConnected\", label: \"Incoming and outgoing connections\", checked: true },\n            { id: \"NodesInto\", label: \"Incoming nodes\" },\n            { id: \"NodesOutOf\", label: \"Outgoing nodes\" },\n            { id: \"NodesConnected\", label: \"Incoming and outgoing nodes\" },\n            { id: \"NodesReachable\", label: \"Flow of Execution\" },\n        ].map(({ id, label, checked }, index) => (<div className=\"row\" style={{ paddingTop: index === 0 ? \"0px\" : \"8px\" }}>\n                                <div className=\"col-xs-7\">\n                                    <RadioButtonComponent id={id} name='radio' value={id} label={label} checked={checked} change={(args) => {\n                buttonChange(args);\n            }}/>\n                                </div>\n                            </div>))}\n                    </div>\n                </div>\n            </div>\n        </div>);\n}\nexport default FlowExecution;\n\nconst root = createRoot(document.getElementById('sample'));\nroot.render(<FlowExecution />);","dependencies":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-react-base\":\"*\",\"@syncfusion/ej2-diagrams\":\"*\",\"@syncfusion/ej2-react-diagrams\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-react-buttons\":\"*\",\"@syncfusion/ej2-react-charts\":\"*\",\"@syncfusion/ej2/base\":\"*\",\"@syncfusion/ej2-charts'; // Import the necessary types from Syncfusion\":\"*\",\"@syncfusion/ej2-lists\":\"*\"}"}