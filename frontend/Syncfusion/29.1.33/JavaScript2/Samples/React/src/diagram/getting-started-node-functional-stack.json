{"index.css":"/* css */","index.html":"<!DOCTYPE html>\n<html>\n<head>\n    <title>Syncfusion React Sample</title>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\n    <meta name=\"author\" content=\"Syncfusion\" />\n    <link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\n</head>\n\n<body class=\"{{theme}}\">\n     <style>\n            .control-section\n            {\n                margin-top: 100px;\n            }\n    </style>\n    <div id='sample'>\n</body>\n</html>\n","index.js":"import { createRoot } from 'react-dom/client';\nimport './index.css';\nimport * as React from \"react\";\nimport { DiagramComponent, Inject, UndoRedo, NodeConstraints, ConnectorConstraints, SnapConstraints } from \"@syncfusion/ej2-react-diagrams\";\n\nimport { Point } from \"@syncfusion/ej2-diagrams/src/diagram/primitives/point\";\nimport { CheckBoxComponent } from \"@syncfusion/ej2-react-buttons\";\n//Initializes the nodes for the diagram\nlet sdlc = [\n    { id: \"sdlc\", addInfo: { text: \"SDLC\" } },\n    { id: \"analysis\", addInfo: { text: \"Analysis\" } },\n    { id: \"design\", addInfo: { text: \"Design\" } },\n    { id: \"implement\", addInfo: { text: \"Implement\" } },\n    { id: \"deploy\", addInfo: { text: \"Deploy\" } },\n    { id: \"support\", addInfo: { text: \"Support\" } },\n];\n//arranges the nodes in a circular path\nlet count = 5;\nlet space = 80;\nlet radius = (count * 100 + space * count) / (2 * Math.PI);\nsdlc[0].offsetX = 300;\nsdlc[0].offsetY = 300;\nlet delta = 360 / 5;\nlet angle = 270;\nfor (let i = 1; i < 6; i++) {\n    let offset = Point.transform({ x: 300, y: 300 }, angle, radius);\n    sdlc[i].offsetX = offset.x;\n    sdlc[i].offsetY = offset.y;\n    angle += delta;\n}\n//Initializes the connector for the diagram\nlet connections = [];\nfor (let i = 1; i < 6; i++) {\n    connections.push({ sourceID: sdlc[i].id, targetID: sdlc[(i % 5) + 1].id });\n}\n// CSS styles for the sample\nconst SAMPLE_CSS = `.image-pattern-style {\n        background-color: white;\n        background-size: contain;\n        background-repeat: no-repeat;\n        height: 75px;\n        width: calc((100% - 12px) / 3);\n        cursor: pointer;\n        border: 1px solid #D5D5D5;\n        background-position: center;\n        float: left;\n    }\n\n    .image-pattern-style:hover {\n        border-color: gray;\n        border-width: 2px;\n    }\n\n    .row {\n        margin-left: 0px;\n        margin-right: 0px;\n    }\n\n    .row-header {\n        font-size: 13px;\n        font-weight: 500;\n    }\n\n    .e-selected-style {\n        border-color: #006CE6;\n        border-width: 2px;\n    }\n\n    .e-checkbox-wrapper .e-label {\n        font-size: 12px;\n    }`;\n// Variables for diagram instance, nodes, and components\nlet diagramInstance;\nlet node;\nlet aspectRatioInstance;\nlet appearanceInstance;\n// Functional component for rendering the diagram and properties panel\nfunction GettingStartedNodes() {\n    // useEffect hook to call updateSampleSection and rendereComplete functions on component mount\n    React.useEffect(() => {\n        rendereComplete();\n    }, []);\n    // Function to handle completion of rendering\n    function rendereComplete() {\n        diagramInstance.fitToPage();\n        //Click event for Appearance of the Property Panel\n        appearanceInstance.onclick = (args) => {\n            let target = args.target;\n            let selectedElement = document.getElementsByClassName(\"e-selected-style\");\n            if (selectedElement.length) {\n                selectedElement[0].classList.remove(\"e-selected-style\");\n            }\n            if (target.className === \"image-pattern-style\") {\n                for (let i = 0; i < diagramInstance.nodes.length; i++) {\n                    node = diagramInstance.nodes[i];\n                    switch (target.id) {\n                        case \"preview0\":\n                            applyStyle(node, 0, undefined, ~NodeConstraints.Shadow, undefined, undefined, target);\n                            break;\n                        case \"preview1\":\n                            applyStyle(node, 2, undefined, ~NodeConstraints.Shadow, undefined, undefined, target);\n                            break;\n                        case \"preview2\":\n                            applyStyle(node, 2, \"5 5\", ~NodeConstraints.Shadow, undefined, undefined, target);\n                            break;\n                        case \"preview3\":\n                            applyStyle(node, 2, \"5 5\", ~NodeConstraints.Shadow, \"Radial\", undefined, target);\n                            break;\n                        case \"preview4\":\n                            let shadow = {\n                                angle: 45,\n                                distance: 15,\n                                opacity: 0.3,\n                                color: \"grey\"\n                            };\n                            applyStyle(node, 2, \"5 5\", NodeConstraints.Shadow, undefined, shadow, target);\n                            break;\n                    }\n                }\n            }\n        };\n    }\n    //Function to apply  customStyle for Node.\n    function applyStyle(//it is in dedicated line here.\n    node, width, array, con, type, sh, target) {\n        node.style.fill = \"#37909A\";\n        node.style.strokeWidth = width;\n        node.style.strokeColor = \"#024249\";\n        node.style.strokeDashArray = array;\n        if (!type) {\n            node.style.gradient.type = \"None\";\n        }\n        else {\n            let gradient;\n            gradient = {\n                cx: 50,\n                cy: 50,\n                fx: 50,\n                fy: 50,\n                stops: [\n                    { color: \"#00555b\", offset: 0 },\n                    { color: \"#37909A\", offset: 90 }\n                ],\n                type: \"Radial\"\n            };\n            node.style.gradient = gradient;\n        }\n        if (con & NodeConstraints.Shadow) {\n            node.shadow = { angle: 45, distance: 15, opacity: 0.3, color: \"grey\" };\n            node.constraints |= con;\n        }\n        else {\n            node.constraints &= con;\n        }\n        diagramInstance.dataBind();\n        target.classList.add(\"e-selected-style\");\n    }\n    //Enable or disable the Aspect Ratio Constraints for Node.\n    function setNodeAspectConstraints(args) {\n        for (let i = 0; i < diagramInstance.nodes.length; i++) {\n            let node = diagramInstance.nodes[i];\n            if (args.checked) {\n                node.constraints |= NodeConstraints.AspectRatio;\n            }\n            else {\n                node.constraints &= ~NodeConstraints.AspectRatio;\n            }\n            diagramInstance.dataBind();\n        }\n    }\n    //Enable or disable the Lock Constraints for Node.\n    function setLockConstraints(args) {\n        for (let i = 0; i < diagramInstance.nodes.length; i++) {\n            let node = diagramInstance.nodes[i];\n            if (args.checked) {\n                node.constraints &= ~(NodeConstraints.Resize | NodeConstraints.Rotate | NodeConstraints.Drag | NodeConstraints.Delete);\n                node.constraints |= NodeConstraints.ReadOnly;\n            }\n            else {\n                node.constraints |= NodeConstraints.Default & ~(NodeConstraints.ReadOnly);\n            }\n        }\n        diagramInstance.dataBind();\n        for (let i = 0; i < diagramInstance.connectors.length; i++) {\n            let connector = diagramInstance.connectors[i];\n            if (args.checked) {\n                connector.constraints &= ~(ConnectorConstraints.DragSourceEnd | ConnectorConstraints.DragTargetEnd | ConnectorConstraints.Drag | ConnectorConstraints.Delete);\n                connector.constraints |= ConnectorConstraints.ReadOnly;\n            }\n            else {\n                connector.constraints |= ConnectorConstraints.Default & ~ConnectorConstraints.ReadOnly;\n            }\n        }\n        diagramInstance.dataBind();\n    }\n    // Return the JSX structure for the component\n    return (<div className=\"control-pane\">\n      <style>{SAMPLE_CSS}</style>\n      <div className=\"col-lg-8 control-section\">\n        <div className=\"content-wrapper\" style={{ width: \"100%\" }}>\n          <DiagramComponent id=\"diagram\" ref={diagram => (diagramInstance = diagram)} width={\"100%\"} height={\"645px\"} nodes={sdlc} connectors={connections} getNodeDefaults={(obj) => {\n            //Sets the default values of a node\n            obj.width = 100;\n            obj.height = 100;\n            obj.shape = { type: \"Basic\", shape: \"Ellipse\" };\n            obj.style = { fill: \"#37909A\", strokeColor: \"#024249\" };\n            obj.annotations = [\n                {\n                    content: obj.addInfo.text,\n                    margin: { left: 10, right: 10 },\n                    style: {\n                        color: \"white\",\n                        fill: \"none\",\n                        strokeColor: \"none\",\n                        bold: true\n                    }\n                }\n            ];\n            return obj;\n        }} getConnectorDefaults={(obj) => {\n            //Sets the default values of a Connector\n            obj.targetDecorator.style = {\n                fill: \"#024249\",\n                strokeColor: \"#024249\"\n            };\n            return { style: { strokeColor: \"#024249\", strokeWidth: 2 } };\n        }} snapSettings={{ constraints: SnapConstraints.None }} selectionChange={(args) => {\n            if (args.state === 'Changed') {\n                if (diagramInstance.selectedItems.nodes.length > 1 || diagramInstance.selectedItems.connectors.length > 0) {\n                    aspectRatioInstance.disabled = true;\n                }\n                else {\n                    aspectRatioInstance.disabled = false;\n                }\n            }\n        }}>\n            <Inject services={[UndoRedo]}/>\n          </DiagramComponent>\n        </div>\n      </div>\n      <div className=\"col-lg-4 property-section\">\n        <div className=\"property-panel-header\">Properties</div>\n        <div className=\"row property-panel-content\" id=\"appearance\" ref={appearance => (appearanceInstance = appearance)}>\n          <div className=\"row row-header\" style={{ paddingTop: \"8px\" }}>\n            Appearance\n          </div>\n          <div className=\"row\" style={{ paddingTop: \"3px\" }}>\n            <div className=\"image-pattern-style\" id=\"preview0\" style={{\n            backgroundImage: \"url('https://ej2.syncfusion.com/react/demos/src/diagram/Images/node/Nodes_1.png')\",\n            marginRight: \"3px\"\n        }}/>\n            <div className=\"image-pattern-style\" id=\"preview1\" style={{\n            backgroundImage: \"url('https://ej2.syncfusion.com/react/demos/src/diagram/Images/node/Nodes_2.png')\",\n            marginRight: \"0px 3px\"\n        }}/>\n            <div className=\"image-pattern-style\" id=\"preview2\" style={{\n            backgroundImage: \"url('https://ej2.syncfusion.com/react/demos/src/diagram/Images/node/Nodes_3.png')\",\n            margin: \"0px 3px\"\n        }}/>\n          </div>\n          <div className=\"row\" style={{ paddingTop: \"3px\" }}>\n            <div className=\"image-pattern-style\" id=\"preview3\" style={{\n            backgroundImage: \"url('https://ej2.syncfusion.com/react/demos/src/diagram/Images/node/Nodes_4.png')\",\n            marginRight: \"3px\"\n        }}/>\n            <div className=\"image-pattern-style\" id=\"preview4\" style={{\n            backgroundImage: \"url('https://ej2.syncfusion.com/react/demos/src/diagram/Images/node/Nodes_5.png')\",\n            margin: \"3px\"\n        }}/>\n          </div>\n        </div>\n        <div className=\"row property-panel-content\" style={{ paddingTop: \"10px\" }}>\n          <div className=\"row row-header\">Behavior</div>\n          <div className=\"row\" style={{ paddingTop: \"8px\" }}>\n            {/* Enable or disable the AspectRatio for Node. */}\n            <CheckBoxComponent checked={false} label=\"Aspect ratio\" id=\"aspectRatio\" ref={aspectRatio => (aspectRatioInstance = aspectRatio)} change={setNodeAspectConstraints}/>\n          </div>\n          <div className=\"row\" style={{ paddingTop: \"8px\" }}>\n            {/* Enable or disable the Interaction for Node. */}\n            <CheckBoxComponent checked={false} label=\"Lock\" id=\"lock\" change={setLockConstraints}/>\n          </div>\n        </div>\n      </div>\n    </div>);\n}\nexport default GettingStartedNodes;\n\nconst root = createRoot(document.getElementById('sample'));\nroot.render(<GettingStartedNodes />);","dependencies":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-react-base\":\"*\",\"@syncfusion/ej2-diagrams\":\"*\",\"@syncfusion/ej2-react-diagrams\":\"*\",\"@syncfusion/ej2-diagrams/src/diagram/primitives/point\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-react-buttons\":\"*\",\"@syncfusion/ej2-react-charts\":\"*\",\"@syncfusion/ej2/base\":\"*\",\"@syncfusion/ej2-charts'; // Import the necessary types from Syncfusion\":\"*\",\"@syncfusion/ej2-lists\":\"*\"}"}