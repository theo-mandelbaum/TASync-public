{"index.css":"/* css */","diagram-events-details.js":"export function getEventDetails(args) {\n    let listView = document.getElementById('listview-def');\n    if (listView && listView.ej2_instances) {\n        let listViewComponent = listView.ej2_instances[0];\n        let selectedItems = listViewComponent.getSelectedItems();\n        if (selectedItems.data.length > 0) {\n            let elementName = getName(selectedItems, args);\n            if (elementName) {\n                eventInformation(args);\n            }\n        }\n    }\n}\nfunction getName(selectedItems, args) {\n    for (let i = 0; i < selectedItems.data.length; i++) {\n        let eventName = selectedItems.data[i].id;\n        if (eventName === args.name) {\n            return true;\n        }\n    }\n    return false;\n}\n// tslint:disable-next-line:max-func-body-length\nfunction eventInformation(args) {\n    let span = document.createElement('span');\n    span.innerHTML = 'Diagram ' + args.name.bold() + ' event called' + '<hr>';\n    let log = document.getElementById('EventLog');\n    log.insertBefore(span, log.firstChild);\n}\n","index.html":"<!DOCTYPE html>\n<html>\n<head>\n    <title>Syncfusion React Sample</title>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\n    <meta name=\"author\" content=\"Syncfusion\" />\n    <link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\n</head>\n\n<body class=\"{{theme}}\">\n     <style>\n            .control-section\n            {\n                margin-top: 100px;\n            }\n    </style>\n    <div id='sample'>\n</body>\n</html>\n","index.js":"import { createRoot } from 'react-dom/client';\nimport './index.css';\nimport * as React from \"react\";\n// Importing required Syncfusion Diagram components and services\nimport { UndoRedo, DiagramContextMenu, DiagramComponent, SnapConstraints, Inject, SymbolPaletteComponent, NodeConstraints } from \"@syncfusion/ej2-react-diagrams\";\n// Importing additional Syncfusion components and utilities\n\nimport { ButtonComponent } from \"@syncfusion/ej2-react-buttons\";\nimport { ListViewComponent } from '@syncfusion/ej2-react-lists';\nimport { getEventDetails } from './diagram-events-details';\n/**\n * Diagram Events sample\n */\n// CSS styles for the sample\nconst SAMPLE_CSS = `#diagramEventsControlSection .sb-mobile-palette {\n    width: 200px;\n    height: 100%;\n    float: left;\n  }\n\n #diagramEventsControlSection .sb-mobile-palette-bar {\n    display: none;\n}\n\n #diagramEventsControlSection .sb-mobile-diagram {\n    width: calc(100% - 200px);\n    height: 100%;\n    float: left;\n    border: 1px solid #d9dedd;\n  }\n  \n\n  @media (max-width: 550px) {\n    #diagramEventsControlSection .sb-mobile-palette {\n      z-index: 19;\n      position: absolute;\n      display: none;\n      transition: transform 300ms linear, visibility 0s linear 300ms;\n      width: 39%;\n      height: 100%;\n    }\n\n    #diagramEventsControlSection .sb-mobile-palette-bar {\n      display: block;\n      width: 100%;\n      background: #fafafa;\n      padding: 10px 10px;\n      border: 0.5px solid #e0e0e0;\n      min-height: 40px;\n    }\n\n    #diagramEventsControlSection .sb-mobile-diagram {\n      width: 100%;\n      height: 100%;\n      float: left;\n      left: 0px;\n    }\n\n    #diagramEventsControlSection #palette-icon {\n      font-size: 20px;\n    }\n  }\n\n  #diagramEventsControlSection .sb-mobile-palette-open {\n    position: absolute;\n    display: block;\n    right: 15px;\n  }\n\n  @font-face {\n    font-family: \"e-ddb-icons1\";\n    src: url(data:application/x-font-ttf;charset=utf-8;base64,AAEAAAAKAIAAAwAgT1MvMj1tSfIAAAEoAAAAVmNtYXDnEOdVAAABiAAAADZnbHlmdC1P4gAAAcgAAAAwaGVhZBJhohMAAADQAAAANmhoZWEIVQQDAAAArAAAACRobXR4CAAAAAAAAYAAAAAIbG9jYQAYAAAAAAHAAAAABm1heHABDgAUAAABCAAAACBuYW1lm+wy9gAAAfgAAAK1cG9zdLnsYngAAASwAAAAMAABAAAEAAAAAFwEAAAAAAAD+AABAAAAAAAAAAAAAAAAAAAAAgABAAAAAQAAgNcenF8PPPUACwQAAAAAANelrs4AAAAA16WuzgAAAAAD+AN6AAAACAACAAAAAAAAAAEAAAACAAgAAgAAAAAAAgAAAAoACgAAAP8AAAAAAAAAAQQAAZAABQAAAokCzAAAAI8CiQLMAAAB6wAyAQgAAAIABQMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUGZFZABA5wDnAAQAAAAAXAQAAAAAAAABAAAAAAAABAAAAAQAAAAAAAACAAAAAwAAABQAAwABAAAAFAAEACIAAAAEAAQAAQAA5wD//wAA5wD//wAAAAEABAAAAAEAAAAAAAAAGAAAAAIAAAAAA/gDegACAAcAACUhCQEhATUhAQQC9P6G/YoBMQFF/YqGAjf+hgH0QwAAAAAAEgDeAAEAAAAAAAAAAQAAAAEAAAAAAAEAEwABAAEAAAAAAAIABwAUAAEAAAAAAAMAEwAbAAEAAAAAAAQAEwAuAAEAAAAAAAUACwBBAAEAAAAAAAYAEwBMAAEAAAAAAAoALABfAAEAAAAAAAsAEgCLAAMAAQQJAAAAAgCdAAMAAQQJAAEAJgCfAAMAAQQJAAIADgDFAAMAAQQJAAMAJgDTAAMAAQQJAAQAJgD5AAMAAQQJAAUAFgEfAAMAAQQJAAYAJgE1AAMAAQQJAAoAWAFbAAMAAQQJAAsAJAGzIERpYWdyYW1fU2hhcGVzX0ZPTlRSZWd1bGFyRGlhZ3JhbV9TaGFwZXNfRk9OVERpYWdyYW1fU2hhcGVzX0ZPTlRWZXJzaW9uIDEuMERpYWdyYW1fU2hhcGVzX0ZPTlRGb250IGdlbmVyYXRlZCB1c2luZyBTeW5jZnVzaW9uIE1ldHJvIFN0dWRpb3d3dy5zeW5jZnVzaW9uLmNvbQAgAEQAaQBhAGcAcgBhAG0AXwBTAGgAYQBwAGUAcwBfAEYATwBOAFQAUgBlAGcAdQBsAGEAcgBEAGkAYQBnAHIAYQBtAF8AUwBoAGEAcABlAHMAXwBGAE8ATgBUAEQAaQBhAGcAcgBhAG0AXwBTAGgAYQBwAGUAcwBfAEYATwBOAFQAVgBlAHIAcwBpAG8AbgAgADEALgAwAEQAaQBhAGcAcgBhAG0AXwBTAGgAYQBwAGUAcwBfAEYATwBOAFQARgBvAG4AdAAgAGcAZQBuAGUAcgBhAHQAZQBkACAAdQBzAGkAbgBnACAAUwB5AG4AYwBmAHUAcwBpAG8AbgAgAE0AZQB0AHIAbwAgAFMAdAB1AGQAaQBvAHcAdwB3AC4AcwB5AG4AYwBmAHUAcwBpAG8AbgAuAGMAbwBtAAAAAAIAAAAAAAAACgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgECAQMABlNoYXBlcwAA)\n      format(\"truetype\");\n    font-weight: normal;\n    font-style: normal;\n  }\n\n  .e-ddb-icons1 {\n    font-family: \"e-ddb-icons1\";\n    speak: none;\n    font-size: 16px;\n    font-style: normal;\n    font-weight: normal;\n    font-variant: normal;\n    text-transform: none;\n    line-height: 1;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n  }\n\n  #diagramEventsControlSection .e-toggle-palette::before {\n    content: \"\\e700\";\n  }\n\n  \n  #diagramEventsPropertySection .event-tracer {\n    width: 240px;\n    height: 700px;\n    min-height: 700px;\n    float: left;\n  }\n\n #diagramEventsPropertySection .heading {\n    color: #807f7f;\n    font-size: 15px;\n    height: 50px;\n    width: 100%;\n    border-bottom: 1px solid #d9dedd;\n    padding: 10px;\n  }\n\n  #EventLog b {\n    color: #388e3c;\n  }\n\n  hr {\n    margin: 1px 10px 1px 0px;\n    border-top: 1px solid #eee;\n  }\n\n  .diagramEventsProperty .property-section{\n    padding-top: 20px;\n    padding-bottom: 20px;\n    height: 740px;\n    padding-right: 0px;\n  }\n\n  #diagramEventsPropertySection .evtbtn { \n    float: right; \n  }\n\n  #diagramEventsPropertySection .listbox {\n    width: 100%;\n    height: 50%;\n  }\n\n #diagramEventsPropertySection .event-tracer .prop-grid {\n    width: 100%;\n    height: 50%;\n  }\n\n  .diagramEventsControl .control-section{\n    display: flex;\n  }\n\n #diagramEventsPropertySection #EventLog {\n    height: calc(100% - 50px);\n    padding: 15px;\n    overflow: auto;\n    width: 100%;\n  }`;\nlet diagramInstance;\nlet EventLogInstance;\n//Initialize the basicshapes for the symbol palatte\nlet basicShapes = [\n    { id: 'Rectangle', shape: { type: 'Basic', shape: 'Rectangle' } },\n    { id: 'Ellipse', shape: { type: 'Basic', shape: 'Ellipse' } },\n    { id: 'Parallelogram', shape: { type: 'Basic', shape: 'Parallelogram' } },\n    { id: 'Triangle', shape: { type: 'Basic', shape: 'Triangle' } },\n    { id: 'Hexagon', shape: { type: 'Basic', shape: 'Hexagon' } },\n    { id: 'Pentagon', shape: { type: 'Basic', shape: 'Pentagon' } },\n    { id: 'Cylinder', shape: { type: 'Basic', shape: 'Cylinder' } },\n    { id: 'Plus', shape: { type: 'Basic', shape: 'Plus' } },\n    { id: 'Heptagon', shape: { type: 'Basic', shape: 'Heptagon' } },\n    { id: 'Octagon', shape: { type: 'Basic', shape: 'Octagon' } },\n    { id: 'Trapezoid', shape: { type: 'Basic', shape: 'Trapezoid' } },\n    { id: 'Decagon', shape: { type: 'Basic', shape: 'Decagon' } },\n    { id: 'RightTriangle', shape: { type: 'Basic', shape: 'RightTriangle' } },\n    { id: 'Diamond', shape: { type: 'Basic', shape: 'Diamond' } },\n    { id: 'Star', shape: { type: 'Basic', shape: 'Star' } }\n];\n//Initializes connector symbols for the symbol palette\nlet connectorSymbols = [\n    {\n        id: 'Link1', type: 'Orthogonal', sourcePoint: { x: 0, y: 0 }, targetPoint: { x: 60, y: 60 },\n        targetDecorator: { shape: 'Arrow', style: { strokeColor: '#757575', fill: '#757575' } }\n    },\n    {\n        id: 'link3', type: 'Orthogonal', sourcePoint: { x: 0, y: 0 }, targetPoint: { x: 60, y: 60 },\n        targetDecorator: { shape: 'None' }\n    },\n    {\n        id: 'Link21', type: 'Straight', sourcePoint: { x: 0, y: 0 }, targetPoint: { x: 60, y: 60 },\n        targetDecorator: { shape: 'Arrow', style: { strokeColor: '#757575', fill: '#757575' } }\n    },\n    {\n        id: 'link23', type: 'Straight', sourcePoint: { x: 0, y: 0 }, targetPoint: { x: 60, y: 60 },\n        targetDecorator: { shape: 'None' }\n    },\n    {\n        id: 'link33', type: 'Bezier', sourcePoint: { x: 0, y: 0 }, targetPoint: { x: 60, y: 60 },\n        targetDecorator: { shape: 'None' }\n    },\n];\n//function for handling the diagram events\nfunction Events() {\n    React.useEffect(() => {\n        rendereComplete();\n    }, []);\n    // Data for the list view displaying event names\n    let data = [\n        { text: 'Drag enter', id: 'dragEnter' },\n        { text: 'Drag leave', id: 'dragLeave' },\n        { text: 'Drag over', id: 'dragOver' },\n        { text: 'Click', id: 'click', isChecked: true },\n        { text: 'History change', id: 'historyChange', isChecked: true },\n        { text: 'Double click', id: 'doubleClick' },\n        { text: 'Text edit', id: 'textEdit', isChecked: true },\n        { text: 'Scroll change', id: 'scrollChange' },\n        { text: 'Selection change', id: 'selectionChange', isChecked: true },\n        { text: 'Size change', id: 'sizeChange', isChecked: true },\n        { text: 'Connection change', id: 'connectionChange', isChecked: true },\n        { text: 'SourcePoint change', id: 'sourcePointChange' },\n        { text: 'TargetPoint change', id: 'targetPointChange' },\n        { text: 'Position change', id: 'positionChange', isChecked: true },\n        { text: 'Rotate change', id: 'rotateChange', isChecked: true },\n        { text: 'Collection change', id: 'collectionChange', isChecked: true },\n        { text: 'Mouse enter', id: 'mouseEnter' },\n        { text: 'Mouse leave', id: 'mouseLeave' },\n        { text: 'Mouse over', id: 'mouseOver' },\n        { text: 'Context menu open', id: 'contextMenuOpen' },\n        { text: 'Context menu before item render', id: 'contextMenuBeforeItemRender' },\n        { text: 'Context menu click', id: 'contextMenuClick' }\n    ];\n    // Function to clear event log when clear button is clicked\n    function rendereComplete() {\n        let data = EventLogInstance;\n        for (let i = data.childNodes.length - 1; i >= 0; i--) {\n            data.removeChild(data.childNodes[i]);\n        }\n    }\n    return (<div className=\"control-pane\">\n            <style>{SAMPLE_CSS}</style>\n            <div className=\"diagramEventsControl\">\n            <div className=\"col-lg-8 control-section\">\n                <style>{SAMPLE_CSS}</style>\n                <div id=\"diagramEventsControlSection\" className=\"content-wrapper\" style={{ width: \"100%\", background: \"white\" }}>\n                    <div id=\"palette-space\" className=\"sb-mobile-palette\">\n                        <SymbolPaletteComponent id=\"symbolpalette\" expandMode=\"Multiple\" palettes={[\n            {\n                id: \"basic\",\n                expanded: true,\n                symbols: basicShapes,\n                iconCss: \"e-ddb-icons e-basic\",\n                title: \"Basic Shapes\"\n            },\n            {\n                id: \"connectors\",\n                expanded: true,\n                symbols: connectorSymbols,\n                iconCss: \"e-ddb-icons e-diagram-connector\",\n                title: \"Connectors\"\n            }\n        ]} width={\"100%\"} height={\"700px\"} symbolHeight={60} symbolWidth={60} symbolMargin={{ left: 15, right: 15, top: 15, bottom: 15 }} getNodeDefaults={(symbol) => {\n            symbol.width = 50;\n            symbol.height = 50;\n            symbol.constraints = NodeConstraints.Default | NodeConstraints.AllowDrop;\n            symbol.style.strokeColor = '#757575';\n        }} getConnectorDefaults={(connector) => {\n            connector.style = { strokeWidth: 1, strokeColor: '#757575' };\n        }} getSymbolInfo={(symbol) => {\n            return { fit: true };\n        }}><Inject services={[UndoRedo, DiagramContextMenu]}/>\n                        </SymbolPaletteComponent>\n                    </div>\n                    <div id=\"diagram-space\" className=\"sb-mobile-diagram\">\n                        <DiagramComponent id=\"diagram\" ref={diagram => (diagramInstance = diagram)} width={\"100%\"} height={\"700px\"} dragEnter={(args) => {\n            getEventDetails(args);\n        }} dragLeave={(args) => {\n            getEventDetails(args);\n        }} dragOver={(args) => {\n            if (args.target) {\n                getEventDetails(args);\n            }\n        }} click={(args) => {\n            getEventDetails(args);\n        }} historyChange={(args) => {\n            getEventDetails(args);\n        }} doubleClick={(args) => {\n            getEventDetails(args);\n        }} textEdit={(args) => {\n            getEventDetails(args);\n        }} scrollChange={(args) => {\n            getEventDetails(args);\n        }} selectionChange={(args) => {\n            if (args.state === 'Changed') {\n                getEventDetails(args);\n            }\n        }} sizeChange={(args) => {\n            if (args.state === 'Completed') {\n                getEventDetails(args);\n            }\n        }} connectionChange={(args) => {\n            if (args.state === 'Changed') {\n                getEventDetails(args);\n            }\n        }} sourcePointChange={(args) => {\n            if (args.state === 'Completed') {\n                getEventDetails(args);\n            }\n        }} targetPointChange={(args) => {\n            if (args.state === 'Completed') {\n                getEventDetails(args);\n            }\n        }} propertyChange={(args) => {\n            getEventDetails(args);\n        }} positionChange={(args) => {\n            if (args.state === 'Completed') {\n                getEventDetails(args);\n            }\n        }} rotateChange={(args) => {\n            if (args.state === 'Completed') {\n                getEventDetails(args);\n            }\n        }} collectionChange={(args) => {\n            if (args.state === 'Changed') {\n                getEventDetails(args);\n            }\n        }} mouseEnter={(args) => {\n            getEventDetails(args);\n        }} mouseLeave={(args) => {\n            getEventDetails(args);\n        }} mouseOver={(args) => {\n            getEventDetails(args);\n        }} contextMenuOpen={(args) => {\n            getEventDetails(args);\n        }} contextMenuBeforeItemRender={(args) => {\n            getEventDetails(args);\n        }} contextMenuClick={(args) => {\n            getEventDetails(args);\n        }} contextMenuSettings={{\n            show: true\n        }} \n    //Sets the constraints of the SnapSettings\n    snapSettings={{ constraints: SnapConstraints.None }}>\n                            <Inject services={[UndoRedo, DiagramContextMenu]}/>\n                        </DiagramComponent>\n                    </div>\n                </div>\n            </div>\n            </div>\n              {/* Section for event list and details */}\n            <div className=\"diagramEventsProperty\">\n            <div className=\"col-lg-4 property-section\">\n                <div id=\"diagramEventsPropertySection\" style={{ height: \"100%\", border: \"1px solid #e0e0e0\" }}>\n                    <div className=\"listbox\">\n                        <div className=\"heading\" style={{ height: \"40px\" }}><span>Client-side events</span></div>\n                        <ListViewComponent id='listview-def' dataSource={data} showCheckBox={true} height={'calc(100% - 40px)'}>\n                        </ListViewComponent>\n                    </div>\n                    <div className=\"prop-grid content\" style={{ height: \"50%\", borderTop: \"1px solid #e0e0e0\" }}>\n                        <div className=\"heading\">\n                            <span style={{ display: \"inline-block\", marginTop: \"5px\" }}>Event arguments</span>\n                            <div className=\"evtbtn\">\n                                <ButtonComponent id='clearbtn' content='clear' onClick={rendereComplete}>\n                                </ButtonComponent>\n                            </div>\n                        </div>\n                        <div id=\"EventLog\" ref={EventLog => (EventLogInstance = EventLog)}>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            </div>\n        </div>);\n}\nexport default Events;\n\nconst root = createRoot(document.getElementById('sample'));\nroot.render(<Events />);","dependencies":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-react-base\":\"*\",\"@syncfusion/ej2-diagrams\":\"*\",\"@syncfusion/ej2-react-diagrams\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-react-buttons\":\"*\",\"@syncfusion/ej2-lists\":\"*\",\"@syncfusion/ej2-react-lists\":\"*\",\"@syncfusion/ej2-data\":\"*\",\"@syncfusion/ej2-inputs\":\"*\",\"@syncfusion/ej2-popups\":\"*\",\"markdown-spellcheck\":\"^1.3.1\",\"@syncfusion/ej2-navigations\":\"*\",\"@syncfusion/ej2-react-charts\":\"*\",\"@syncfusion/ej2/base\":\"*\",\"@syncfusion/ej2-charts'; // Import the necessary types from Syncfusion\":\"*\"}"}