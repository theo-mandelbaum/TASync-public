{"index.css":"/* css */","index.html":"<!DOCTYPE html>\n<html>\n<head>\n    <title>Syncfusion React Sample</title>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\n    <meta name=\"author\" content=\"Syncfusion\" />\n    <link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\n</head>\n\n<body class=\"{{theme}}\">\n     <style>\n            .control-section\n            {\n                margin-top: 100px;\n            }\n    </style>\n    <div id='sample'>\n</body>\n</html>\n","index.js":"import { createRoot } from 'react-dom/client';\nimport './index.css';\nimport * as React from \"react\";\nimport { DiagramComponent, Inject, LineRouting, PortVisibility, SnapConstraints, DiagramConstraints, ConnectorBridging } from \"@syncfusion/ej2-react-diagrams\";\nimport { SampleBase } from './sample-base';\n//Initialize Diagram Nodes\nlet nodes = [\n    {\n        id: 'start', offsetX: 115, offsetY: 110,\n        shape: { type: 'Flow', shape: 'Terminator' },\n        style: { fill: '#D5535D' },\n        ports: [{ id: 'port1', offset: { x: 0.5, y: 0 }, visibility: PortVisibility.Hidden }],\n        annotations: [{\n                content: 'Start',\n                style: { color: 'white' }\n            }]\n    },\n    {\n        id: 'process', offsetX: 115, offsetY: 255,\n        shape: { type: 'Flow', shape: 'Process' },\n        style: { fill: \"#65B091\" },\n        annotations: [{\n                content: 'Process',\n                style: { color: 'white' }\n            }]\n    },\n    {\n        id: 'document', offsetX: 115, offsetY: 400,\n        shape: { type: 'Flow', shape: 'Document' },\n        style: { fill: \"#5BA5F0\" },\n        ports: [{ id: 'port1', offset: { x: 0, y: 0.5 }, visibility: PortVisibility.Hidden }],\n        annotations: [{\n                content: 'Document',\n                style: { color: 'white' }\n            }]\n    },\n    {\n        id: 'decision', offsetX: 390, offsetY: 110,\n        shape: { type: 'Flow', shape: 'Decision' },\n        style: { fill: \"#9A8AF7\" },\n        annotations: [{\n                content: 'Decision',\n                style: { color: 'white' }\n            }]\n    },\n    {\n        id: 'document2', offsetX: 390, offsetY: 255,\n        shape: { type: 'Flow', shape: 'Document' },\n        style: { fill: \"#5BA5F0\" },\n        annotations: [{\n                content: 'Document',\n                style: { color: 'white' }\n            }]\n    },\n    {\n        id: 'end', offsetX: 390, offsetY: 400,\n        shape: { type: 'Flow', shape: 'Terminator' },\n        style: { fill: \"#9A8AF7\" },\n        annotations: [{\n                content: 'End',\n                style: { color: 'white' }\n            }]\n    },\n    {\n        id: 'process2', offsetX: 640, offsetY: 110,\n        shape: { type: 'Flow', shape: 'Process' },\n        style: { fill: \"#65B091\" },\n        annotations: [{\n                content: 'Process',\n                style: { color: 'white' }\n            }]\n    },\n    {\n        id: 'card', offsetX: 640, offsetY: 255,\n        shape: { type: 'Flow', shape: 'Card' },\n        style: { fill: \"#9A8AF7\" },\n        annotations: [{\n                content: 'Card',\n                style: { color: 'white' }\n            }],\n        ports: [\n            { id: 'port1', offset: { x: 1, y: 0.5 }, visibility: PortVisibility.Hidden },\n            { id: 'port2', offset: { x: 0.5, y: 1 }, visibility: PortVisibility.Hidden }\n        ],\n    }\n];\n//Initialize Diagram Connectors\nlet connectors = [\n    {\n        id: 'Connector1', sourceID: 'start', targetID: 'process',\n    },\n    {\n        id: 'Connector2', sourceID: 'process', targetID: 'document'\n    },\n    {\n        id: 'Connector3', sourceID: 'document', targetID: 'end',\n    },\n    {\n        id: 'Connector4', sourceID: 'start', targetID: 'decision'\n    },\n    {\n        id: 'Connector5', sourceID: 'decision', targetID: 'process2',\n    },\n    {\n        id: 'Connector6', sourceID: 'process2', targetID: 'card',\n    },\n    {\n        id: 'Connector7', sourceID: 'process', targetID: 'document2'\n    },\n    {\n        id: 'Connector8', sourceID: 'document2', targetID: 'card',\n    },\n    {\n        id: 'Connector9', sourceID: 'start', sourcePortID: \"port1\",\n        targetID: 'card', targetPortID: 'port1'\n    },\n    {\n        id: 'Connector10', sourceID: 'card', sourcePortID: 'port2',\n        targetID: 'document', targetPortID: 'port1'\n    },\n];\nlet diagramInstance;\nexport class LineRoutingSample extends SampleBase {\n    // Method to fit diagramInstance to page width\n    rendereComplete() {\n        diagramInstance.fitToPage({ mode: 'Width' });\n    }\n    // Render method to render JSX\n    render() {\n        return (<div className=\"control-pane\">\n        <div className=\"control-section\">\n          <div className=\"content-wrapper\" style={{ width: \"100%\" }}>\n            <DiagramComponent id=\"diagram\" ref={diagram => (diagramInstance = diagram)} width={\"100%\"} height={\"499px\"} snapSettings={{ constraints: SnapConstraints.None }} constraints={DiagramConstraints.Default | DiagramConstraints.LineRouting | DiagramConstraints.Bridging} nodes={nodes} connectors={connectors} getConnectorDefaults={getConnectorDefaults} getNodeDefaults={getNodeDefaults}>\n              <Inject services={[LineRouting, ConnectorBridging]}/>\n            </DiagramComponent>\n          </div>\n        </div>\n      </div>);\n    }\n}\n// Function to define defaults for nodes in the diagram\nfunction getNodeDefaults(node) {\n    node.height = 50;\n    if (node.id === 'decision') {\n        node.height = 70;\n    }\n    node.width = 120;\n    node.style = { strokeColor: 'transparent' };\n    return node;\n}\n// Function to define defaults for connectors in the diagram\nfunction getConnectorDefaults(connector) {\n    connector.type = 'Orthogonal';\n    connector.style = { strokeColor: '#707070 ', strokeWidth: 1.25 };\n    connector.targetDecorator = { style: { fill: '#707070 ', strokeColor: '#707070 ' } };\n    return connector;\n}\n\nconst root = createRoot(document.getElementById('sample'));\nroot.render(<LineRoutingSample />);","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n                this.rendereComplete();\n            });\n        }\n    }\n    export function updateSampleSection(){}\n    ","dependencies":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-react-base\":\"*\",\"@syncfusion/ej2-diagrams\":\"*\",\"@syncfusion/ej2-react-diagrams\":\"*\",\"@syncfusion/ej2-react-charts\":\"*\",\"@syncfusion/ej2/base\":\"*\",\"@syncfusion/ej2-charts'; // Import the necessary types from Syncfusion\":\"*\",\"@syncfusion/ej2-lists\":\"*\"}"}