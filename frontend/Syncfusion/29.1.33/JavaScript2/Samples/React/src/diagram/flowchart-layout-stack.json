{"index.css":"/* css */","index.html":"<!DOCTYPE html>\n<html>\n<head>\n    <title>Syncfusion React Sample</title>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\n    <meta name=\"author\" content=\"Syncfusion\" />\n    <link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\n</head>\n\n<body class=\"{{theme}}\">\n     <style>\n            .control-section\n            {\n                margin-top: 100px;\n            }\n    </style>\n    <div id='sample'>\n</body>\n</html>\n","index.js":"import { createRoot } from 'react-dom/client';\nimport './index.css';\nimport * as React from 'react';\nimport { Diagram, ConnectorEditing, DiagramComponent, Inject, FlowchartLayout, DataBinding, DiagramTools, } from '@syncfusion/ej2-react-diagrams';\nimport { SampleBase } from './sample-base';\nimport { DropDownListComponent } from '@syncfusion/ej2-react-dropdowns';\nimport { NumericTextBoxComponent } from '@syncfusion/ej2-react-inputs';\nimport { DataManager } from '@syncfusion/ej2-data';\nDiagram.Inject(ConnectorEditing);\nlet diagramInstance;\nconst SAMPLE_CSS = `\n  /* Container for diagram and property panel */\n    .control-section {\n        width: 75%;\n        float: left; /* Keep the diagram section on the left */\n        border-right: 1px solid #D5D5D5;\n    }\n    .property-panel-header {\n        font-size: larger;\n        margin-left: 10px;\n    }\n    /* Diagram content style */\n    .content-wrapper {\n        width: 100%;\n        background: white;\n        border: 1px solid #D5D5D5;\n    }\n    .input-element {\n        margin-left: 10px;\n        width: 50%;\n    }\n\n    /* Property panel style */\n    .flow-property-section {\n        width: 24%; /* Adjusted to fill the remaining space */\n        float: right; /* Ensure the property panel is on the right */\n        padding: 10px;\n    }\n\n    /* Align labels and inputs within the property panel */\n    .row {\n        margin-left: 0;\n        margin-right: 0;\n        padding-top: 8px;\n    }\n\n    .property-panel-content .row {\n        display: flex;\n        align-items: center;\n        margin-bottom: 8px;\n    }\n\n    .property-panel-content label {\n        flex: 1;\n        font-weight: normal;\n        margin-left: 10px;\n    }\n\n    .property-panel-content input {\n        flex: 2;\n        padding: 5px;\n        border: 1px solid #ccc;\n        border-radius: 4px;\n    } \n`;\n//Initializes the data source for the layout\nconst flowchartData = [\n    { id: \"A\", name: \"Start\", shape: \"Terminator\", color: \"#90EE90\", parentId: null, stroke: \"#333\", strokeWidth: 1 },\n    { id: \"B\", name: \"Open the browser and go to Amazon site\", shape: \"Rectangle\", color: \"#1759B7\", parentId: [\"A\"], arrowType: \"single-line-arrow\", stroke: \"#333\", strokeWidth: 1 },\n    { id: \"C\", name: \"Already a customer?\", shape: \"Decision\", color: \"#2F95D8\", parentId: [\"B\"], arrowType: \"single-line-arrow\", stroke: \"#333\", strokeWidth: 1 },\n    { id: \"D\", name: \"Create an account\", shape: \"Rectangle\", color: \"#70AF16\", parentId: [\"C\"], label: [\"No\"], arrowType: \"single-line-arrow\", stroke: \"#333\", strokeWidth: 1 },\n    { id: \"E\", name: \"Enter login information\", shape: \"Rectangle\", color: \"#70AF16\", parentId: [\"C\"], label: [\"Yes\"], arrowType: \"single-line-arrow\", stroke: \"#333\", strokeWidth: 1 },\n    { id: \"F\", name: \"Search for the book in the search bar\", shape: \"Predefined Process\", color: \"#1759B7\", parentId: [\"E\", \"D\"], arrowType: \"single-line-arrow\", label: [\"\", \"\"], stroke: \"#333\", strokeWidth: 1 },\n    { id: \"G\", name: \"Select the preferred book\", shape: \"Rectangle\", color: \"#1759B7\", parentId: [\"F\"], arrowType: \"single-line-arrow\", stroke: \"#333\", strokeWidth: 1 },\n    { id: \"H\", name: \"Is the book new or used?\", shape: \"Rectangle\", color: \"#2F95D8\", parentId: [\"G\"], arrowType: \"single-line-arrow\", stroke: \"#333\", strokeWidth: 1 },\n    { id: \"I\", name: \"Select the new book\", shape: \"Rectangle\", color: \"#70AF16\", parentId: [\"H\"], label: [\"Yes\"], arrowType: \"single-line-arrow\", stroke: \"#333\", strokeWidth: 1 },\n    { id: \"J\", name: \"Select the used book\", shape: \"Rectangle\", color: \"#70AF16\", parentId: [\"H\"], label: [\"No\"], arrowType: \"single-line-arrow\", stroke: \"#333\", strokeWidth: 1 },\n    { id: \"K\", name: \"Add to Cart & Proceed to Checkout\", shape: \"Rectangle\", color: \"#1759B7\", parentId: [\"I\", \"J\"], arrowType: \"single-line-arrow\", label: [\"\", \"\"], stroke: \"#333\", strokeWidth: 1 },\n    { id: \"L\", name: \"Enter shipping and payment details\", shape: \"Rectangle\", color: \"#1759B7\", parentId: [\"K\", \"M\"], arrowType: \"single-line-arrow\", label: [\"\", \"\"], stroke: \"#333\", strokeWidth: 1 },\n    { id: \"M\", name: \"Is the information correct?\", shape: \"Decision\", color: \"#2F95D8\", parentId: [\"L\"], arrowType: \"single-line-arrow\", stroke: \"#333\", strokeWidth: 1 },\n    { id: \"N\", name: \"Review and place the order\", shape: \"Rectangle\", color: \"#1759B7\", parentId: [\"M\"], label: [\"True\"], arrowType: \"single-line-arrow\", stroke: \"#333\", strokeWidth: 1 },\n    { id: \"O\", name: \"End\", shape: \"Terminator\", color: \"#8E44CC\", parentId: [\"N\"], arrowType: \"single-line-arrow\", stroke: \"#333\", strokeWidth: 1 }\n];\nexport class FlowchartLayoutSample extends SampleBase {\n    // Method to fit diagramInstance to page width\n    rendereComplete() {\n        diagramInstance.fitToPage({ mode: 'Width' });\n    }\n    render() {\n        return (<div>\n                <style>{SAMPLE_CSS}</style>\n                <div className=\"control-section\">\n                    <div className=\"control-wrapper\">\n                        <div className=\"content-wrapper\" style={{ width: '100%', background: 'white' }}>\n                            <DiagramComponent id=\"diagram\" ref={(diagram) => (diagramInstance = diagram)} width={'100%'} height={'1500px'} scrollSettings={{ scrollLimit: 'Infinity' }} rulerSettings={{ showRulers: true }} getNodeDefaults={getNodeDefaults} getConnectorDefaults={getConnectorDefaults} tool={DiagramTools.ZoomPan} layout={{\n                type: 'Flowchart',\n                orientation: 'TopToBottom',\n                flowchartLayoutSettings: {\n                    yesBranchDirection: 'LeftInFlow',\n                    noBranchDirection: 'RightInFlow',\n                    yesBranchValues: ['Yes', 'True'],\n                    noBranchValues: ['No', 'False']\n                },\n                verticalSpacing: 50,\n                horizontalSpacing: 50\n            }} dataSourceSettings={{\n                id: 'id',\n                parentId: 'parentId',\n                dataSource: new DataManager(flowchartData)\n            }}>\n                                <Inject services={[FlowchartLayout, DataBinding]}/>\n                            </DiagramComponent>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"flow-property-section\">\n                    <div className=\"property-panel-header\" style={{ marginLeft: '10px' }}>Properties</div>\n                    <div className=\"row property-panel-content\" style={{ paddingTop: '10px' }}>\n                        <div className=\"row\">\n                            <label>Orientation</label>\n                            <div className=\"input-element\">\n                                <DropDownListComponent id=\"orientation\" index={0} change={orientationChange} dataSource={[{ text: 'Top to bottom', value: 'TopToBottom' }, { text: 'Left to right', value: 'LeftToRight' }]}/>\n                            </div>\n                        </div>\n                        <div className=\"row\">\n                            <label>Yes branch direction</label>\n                            <div className=\"input-element\">\n                                <DropDownListComponent id=\"yesBranchDirection\" index={0} change={yesBranchDirectionChange} dataSource={[{ text: 'Left in flow', value: 'LeftInFlow' }, { text: 'Right in flow', value: 'RightInFlow' }, { text: 'Same as flow', value: 'SameAsFlow' }]}/>\n                            </div>\n                        </div>\n                        <div className=\"row\">\n                            <label>No branch direction</label>\n                            <div className=\"input-element\">\n                                <DropDownListComponent id=\"noBranchDirection\" index={1} change={noBranchDirectionChange} dataSource={[{ text: 'Left in flow', value: 'LeftInFlow' }, { text: 'Right in flow', value: 'RightInFlow' }, { text: 'Same as flow', value: 'SameAsFlow' }]}/>\n                            </div>\n                        </div>\n                        <div className=\"row\">\n                            <label>Horizontal spacing</label>\n                            <div className=\"input-element\">\n                                <NumericTextBoxComponent id=\"horizontalSpacing\" change={horizontalSpacingChange} min={20} max={120} value={50} format='###.##'/>\n                            </div>\n                        </div>\n                        <div className=\"row\">\n                            <label>Vertical spacing</label>\n                            <div className=\"input-element\">\n                                <NumericTextBoxComponent id=\"verticalSpacing\" change={verticalSpacingChange} min={30} max={120} value={50} format='###.##'/>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>);\n    }\n}\nfunction getNodeDefaults(node) {\n    node.width = 150;\n    node.height = 50;\n    if (node.shape.shape === 'Decision') {\n        node.width = 120;\n        node.height = 100;\n    }\n    return node;\n}\n//Setting default connector values\nfunction getConnectorDefaults(connector) {\n    connector.type = 'Orthogonal';\n    if (connector.annotations && connector.annotations.length > 0) {\n        connector.annotations[0].style.fill = 'white';\n        connector.annotations[0].style.color = 'black';\n    }\n    return connector;\n}\nfunction orientationChange(args) {\n    let value = args.value;\n    diagramInstance.layout.orientation = value === 'Top to bottom' ? 'TopToBottom' : 'LeftToRight';\n    diagramInstance.dataBind();\n}\nfunction yesBranchDirectionChange(args) {\n    let value = args.value;\n    diagramInstance.layout.flowchartLayoutSettings.yesBranchDirection = value === 'Same as flow' ? 'SameAsFlow' : value === 'Right in flow' ? 'RightInFlow' : 'LeftInFlow';\n    diagramInstance.doLayout();\n}\nfunction noBranchDirectionChange(args) {\n    let value = args.value;\n    diagramInstance.layout.flowchartLayoutSettings.noBranchDirection = value === 'Same as flow' ? 'SameAsFlow' : value === 'Right in flow' ? 'RightInFlow' : 'LeftInFlow';\n    diagramInstance.doLayout();\n}\nfunction horizontalSpacingChange(args) {\n    let value = args.value;\n    diagramInstance.layout.horizontalSpacing = value;\n    diagramInstance.dataBind();\n}\nfunction verticalSpacingChange(args) {\n    let value = args.value;\n    diagramInstance.layout.verticalSpacing = value;\n    diagramInstance.dataBind();\n}\n\nconst root = createRoot(document.getElementById('sample'));\nroot.render(<FlowchartLayoutSample />);","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n                this.rendereComplete();\n            });\n        }\n    }\n    export function updateSampleSection(){}\n    ","dependencies":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-react-base\":\"*\",\"@syncfusion/ej2-diagrams\":\"*\",\"@syncfusion/ej2-react-diagrams\":\"*\",\"@syncfusion/ej2-dropdowns\":\"*\",\"@syncfusion/ej2-react-dropdowns\":\"*\",\"@syncfusion/ej2-inputs\":\"*\",\"@syncfusion/ej2-react-inputs\":\"*\",\"@syncfusion/ej2-data\":\"*\",\"@syncfusion/ej2-react-charts\":\"*\",\"@syncfusion/ej2/base\":\"*\",\"@syncfusion/ej2-charts'; // Import the necessary types from Syncfusion\":\"*\",\"@syncfusion/ej2-lists\":\"*\"}"}