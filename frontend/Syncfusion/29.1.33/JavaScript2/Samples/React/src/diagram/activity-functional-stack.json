{"index.css":"/* css */","index.html":"<!DOCTYPE html>\n<html>\n<head>\n    <title>Syncfusion React Sample</title>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\n    <meta name=\"author\" content=\"Syncfusion\" />\n    <link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\n</head>\n\n<body class=\"{{theme}}\">\n     <style>\n            .control-section\n            {\n                margin-top: 100px;\n            }\n    </style>\n    <div id='sample'>\n</body>\n</html>\n","index.js":"import { createRoot } from 'react-dom/client';\nimport './index.css';\n// Importing React and necessary components from Syncfusion's EJ2 React Diagrams library for building the UML Activity diagram.\nimport * as React from \"react\";\nimport { SnapConstraints, PortVisibility, SymbolPaletteComponent, DiagramComponent, Inject, UndoRedo, } from \"@syncfusion/ej2-react-diagrams\";\n\n// Creates a UML activity node with specified properties\nconst createNode = (id, offsetX, offsetY, shapeType, width = 40, height = 40, content = '') => ({\n    id,\n    width,\n    height,\n    offsetX,\n    offsetY,\n    shape: { type: \"UmlActivity\", shape: shapeType },\n    annotations: content ? [{ content }] : []\n});\n// Initializes nodes representing the flow of a customer service call process\nlet nodes = [\n    createNode(\"Start\", 300, 20, \"InitialNode\"),\n    createNode(\"ReceiveCall\", 300, 100, \"Action\", 105, 40, \"Receive Customer Call\"),\n    createNode(\"ForkNode\", 300, 170, \"ForkNode\", 70, 10),\n    createNode(\"Determine\", 190, 250, \"Action\", 105, 40, \"Determine Type of Call\"),\n    createNode(\"Log\", 410, 250, \"Action\", 105, 40, \"Customer Logging a Call\"),\n    createNode(\"Decision\", 190, 350, \"Decision\", 50, 50),\n    createNode(\"transfer_sales\", 100, 450, \"Action\", 105, 40, \"Transfer the Call to Sales\"),\n    createNode(\"transfer_desk\", 280, 450, \"Action\", 105, 40, \"Transfer the Call to Help Desk\"),\n    createNode(\"MergeNode\", 190, 540, \"MergeNode\", 50, 50),\n    createNode(\"JoinNode\", 300, 630, \"JoinNode\", 70, 10),\n    createNode(\"CloseCall\", 300, 710, \"Action\", 105, 40, \"Close Call\"),\n    createNode(\"FinalNode\", 300, 800, \"FinalNode\")\n];\n// Creates a UML activity diagram connector with specified properties\nconst createConnector = (id, sourceID, targetID, sourcePortID = \"\", targetPortID = \"\", additionalProps = {}) => ({\n    id,\n    sourceID,\n    targetID,\n    sourcePortID,\n    targetPortID,\n    ...additionalProps\n});\n// Defines common segments for connectors\nconst commonSegments = {\n    orthogonalShort: [{ type: \"Orthogonal\", length: 20, direction: \"Bottom\" }],\n    orthogonalLongLeft: [{ type: \"Orthogonal\", length: 50, direction: \"Left\" }],\n    orthogonalLongRight: [{ type: \"Orthogonal\", length: 50, direction: \"Right\" }],\n    orthogonalBottom: [{ type: \"Orthogonal\", length: 50, direction: \"Bottom\" }]\n};\n// Initializes connectors for transitions between activities\nlet connectors = [\n    createConnector(\"connector1\", \"Start\", \"ReceiveCall\"),\n    createConnector(\"connector2\", \"ReceiveCall\", \"ForkNode\"),\n    createConnector(\"connector3\", \"ForkNode\", \"Determine\", \"port1\", \"portTop\", {\n        segments: [...commonSegments.orthogonalShort, ...commonSegments.orthogonalLongLeft]\n    }),\n    createConnector(\"connector4\", \"ForkNode\", \"Log\", \"port2\", \"portTop\", {\n        segments: [...commonSegments.orthogonalShort, ...commonSegments.orthogonalLongRight]\n    }),\n    createConnector(\"connector5\", \"Determine\", \"Decision\"),\n    createConnector(\"connector6\", \"Decision\", \"transfer_sales\", \"portLeft\", \"portTop\", {\n        shape: { type: \"UmlActivity\", flow: \"Association\" },\n        annotations: [{\n                id: \"connector6Label\", content: \"type=New Customer\", offset: 0.715,\n                style: { fill: \"white\", color: \"black\", textWrapping: 'NoWrap' }\n            }]\n    }),\n    createConnector(\"connector7\", \"Decision\", \"transfer_desk\", \"portRight\", \"portTop\", {\n        shape: { type: \"UmlActivity\", flow: \"Association\" },\n        annotations: [{\n                id: \"connector7Label\", content: \"type=Existing Customer\", offset: 0.75,\n                style: { fill: \"white\", color: \"black\", textWrapping: 'NoWrap' }\n            }]\n    }),\n    createConnector(\"connector8\", \"transfer_sales\", \"MergeNode\", \"portBottom\", \"portLeft\", {\n        segments: commonSegments.orthogonalBottom\n    }),\n    createConnector(\"connector9\", \"transfer_desk\", \"MergeNode\", \"portBottom\", \"portRight\", {\n        segments: commonSegments.orthogonalBottom\n    }),\n    createConnector(\"connector10\", \"MergeNode\", \"JoinNode\", \"portBottom\", \"port3\"),\n    createConnector(\"connector11\", \"Log\", \"JoinNode\", \"portBottom\", \"port4\", {\n        segments: [\n            { type: \"Orthogonal\", length: 265, direction: \"Bottom\" },\n            ...commonSegments.orthogonalLongLeft\n        ]\n    }),\n    createConnector(\"connector12\", \"JoinNode\", \"CloseCall\"),\n    createConnector(\"connector13\", \"CloseCall\", \"FinalNode\")\n];\n// Holds instances of DiagramComponent and HTMLElement for diagram manipulation and UI interaction\nlet diagramInstance;\nlet diagramSpaceInstance;\nlet paletteIconInstance;\nlet paletteSpaceInstance;\n// Initializes an array of UML activity shapes for the symbol palette\nconst umlActivityShapes = [\n    'Action', 'Decision', 'MergeNode', 'InitialNode', 'FinalNode', 'ForkNode',\n    'JoinNode', 'TimeEvent', 'AcceptingEvent', 'SendSignal', 'ReceiveSignal',\n    'StructuredNode', 'Note'\n].map(shape => ({ id: shape, shape: { type: 'UmlActivity', shape } }));\n// Defines a base connector symbol to standardize connector creation\nconst baseConnector = {\n    sourcePoint: { x: 0, y: 0 }, targetPoint: { x: 40, y: 40 },\n    targetDecorator: { shape: 'Arrow', style: { strokeColor: '#757575', fill: '#757575' } },\n    style: { strokeWidth: 2, strokeColor: '#757575' }\n};\n// Initializes connector symbols with varying styles for the symbol palette\nlet connectorSymbols = [\n    { ...baseConnector, id: 'Link1', type: 'Orthogonal' },\n    { ...baseConnector, id: 'Link2', type: 'Orthogonal', style: { ...baseConnector.style, strokeDashArray: '4 4' } },\n    { ...baseConnector, id: 'Link3', type: 'Straight' }\n];\n// CSS styles for the diagram editor's layout, enhancing mobile responsiveness\nconst SAMPLE_CSS = `\n.sb-mobile-palette {\n  width: 210px;\n  height: 100%;\n  float: left;\n}\n\n.sb-mobile-palette-bar {\n  display: none;\n}\n\n.sb-mobile-diagram {\n  width: calc(100% - 212px);\n  height: 100%;\n  float: left;\n  border: 1px solid rgba(0, 0, 0, 0.12);\n  border-left: none;\n}\n\n@media (max-width: 550px) {\n\n  .sb-mobile-palette {\n      z-index: 19;\n      position: absolute;\n      display: none;\n      transition: transform 300ms linear, visibility 0s linear 300ms;\n      width: 39%;\n      height: 100%;\n  }\n\n  .sb-mobile-palette-bar {\n      display: block;\n      width: 100%;\n      background: #fafafa;\n      padding: 10px 10px;\n      border: 0.5px solid #e0e0e0;\n      min-height: 40px;\n  }\n\n  .sb-mobile-diagram {\n      width: 100%;\n      height: 100%;\n      float: left;\n      left: 0px;\n  }\n\n  #paletteIcon {\n      font-size: 20px;\n  }\n}\n\n.sb-mobile-palette-open {\n  position: absolute;\n  display: block;\n  right: 15px;\n}\n\n.e-toggle-palette::before {\n  content: \"\\e700\"\n}`;\n// Define the function UmlActivityDiagram\nfunction UmlActivityDiagram() {\n    React.useEffect(() => {\n        // Call functions to update sample section and render completion\n        rendereComplete();\n    }, []);\n    // Adds mobile-specific event listeners and centers the diagram upon rendering completion.\n    function rendereComplete() {\n        addMobileEvents();\n        let rect = diagramSpaceInstance.getBoundingClientRect();\n        let panX = (rect.width - rect.x) / 2;\n        // Pan diagram to center horizontally\n        diagramInstance.pan(panX, 0);\n    }\n    // Determines the port positions for a node based on its type.\n    function getNodePorts(node) {\n        if (node.id === 'ForkNode' || node.id === 'JoinNode') {\n            // Ports for ForkNode and JoinNode\n            let node2Ports = [\n                { id: 'port1', offset: { x: 0.2, y: 1 } },\n                { id: 'port2', offset: { x: 0.8, y: 1 } },\n                { id: 'port3', offset: { x: 0.2, y: 0 } },\n                { id: 'port4', offset: { x: 0.8, y: 0 } },\n            ];\n            return node2Ports;\n        }\n        else {\n            let ports = [\n                // Default ports for other nodes\n                { id: 'portLeft', offset: { x: 0, y: 0.5 } },\n                { id: 'portRight', offset: { x: 1, y: 0.5 } },\n                { id: 'portBottom', offset: { x: 0.5, y: 1 } },\n                { id: 'portTop', offset: { x: 0.5, y: 0 } },\n            ];\n            return ports;\n        }\n    }\n    // Indicates whether the current device is mobile based on the screen width.\n    let isMobile;\n    // Adds event listeners for mobile-specific interactions.\n    function addMobileEvents() {\n        isMobile = window.matchMedia('(max-width:550px)').matches;\n        // Check if device is mobile\n        if (isMobile && paletteIconInstance) {\n            paletteIconInstance.addEventListener('click', togglePalette, false);\n        }\n    }\n    // Toggles the symbol palette's visibility on mobile devices.\n    function togglePalette() {\n        isMobile = window.matchMedia('(max-width:550px)').matches;\n        if (isMobile) {\n            if (!paletteSpaceInstance.classList.contains('sb-mobile-palette-open')) {\n                // Open palette\n                paletteSpaceInstance.classList.add('sb-mobile-palette-open');\n            }\n            else {\n                // Close palette\n                paletteSpaceInstance.classList.remove('sb-mobile-palette-open');\n            }\n        }\n    }\n    // Renders the UML Activity Diagram component.\n    return (<div className=\"control-pane\">\n            {/* Injects CSS styles for layout */}\n            <style>{SAMPLE_CSS}</style>\n            <div className=\"control-section\">\n                <div id=\"umlActivityDiagram\" style={{ width: \"100%\", height: \"521px\" }}>\n                    {/* Mobile palette bar for toggling symbol palette */}\n                    <div className=\"sb-mobile-palette-bar\">\n                        <div id=\"paletteIcon\" ref={paletteIcon => (paletteIconInstance = paletteIcon)} style={{ float: \"right\" }} className=\"e-ddb-icons1 e-toggle-palette\"></div>\n                    </div>\n                    <div id=\"paletteSpace\" ref={paletteSpace => (paletteSpaceInstance = paletteSpace)} className=\"sb-mobile-palette\">\n                        {/* Symbol Palette Component for UML activity shapes and connectors */}\n                        <SymbolPaletteComponent id=\"symbolpalette\" expandMode=\"Multiple\" palettes={[\n            {\n                id: \"umlActivity\",\n                expanded: true,\n                symbols: umlActivityShapes,\n                title: \"UML Shapes\"\n            },\n            {\n                id: \"connectors\",\n                expanded: true,\n                symbols: connectorSymbols,\n                title: \"Connectors\"\n            }\n        ]} width={\"100%\"} height={\"505px\"} \n    // Sets the default values for nodes\n    getNodeDefaults={(symbol) => {\n            if (symbol.id === 'JoinNode') {\n                symbol.width = 20;\n                symbol.height = 50;\n            }\n            else if (symbol.id === 'ForkNode') {\n                symbol.width = 50;\n                symbol.height = 20;\n            }\n            else if (symbol.id === 'Decision' || symbol.id === 'MergeNode') {\n                symbol.width = 50;\n                symbol.height = 40;\n            }\n            else {\n                symbol.width = 50;\n                symbol.height = 50;\n            }\n            if (symbol.id === 'InitialNode' || symbol.id === 'FinalNode' || symbol.id === 'JoinNode' || symbol.id === 'ForkNode') {\n                symbol.style.fill = '#757575';\n            }\n            symbol.style.strokeColor = '#757575';\n        }} symbolHeight={55} symbolWidth={55} symbolMargin={{ left: 15, right: 15, top: 15, bottom: 15 }} getSymbolInfo={(symbol) => {\n            return { fit: true };\n        }}>\n                            <Inject services={[UndoRedo]}/>\n                        </SymbolPaletteComponent>\n                    </div>\n\n                    <div id=\"diagramSpace\" ref={diagramSpace => (diagramSpaceInstance = diagramSpace)} className=\"sb-mobile-diagram\">\n                        {/* Diagram Component for UML Activity Diagram */}\n                        <DiagramComponent id=\"diagram\" ref={diagram => (diagramInstance = diagram)} width={\"100%\"} height={\"100%\"} nodes={nodes} connectors={connectors} snapSettings={{ constraints: SnapConstraints.None }} \n    // Sets the default values for nodes\n    getNodeDefaults={(node) => {\n            node.ports = getNodePorts(node);\n            if (node.ports) {\n                for (let i = 0; i < node.ports.length; i++) {\n                    node.ports[i].visibility = PortVisibility.Hidden;\n                }\n            }\n            if (node.id === 'Start' || node.id === 'ForkNode' || node.id === 'JoinNode' || node.id === 'FinalNode') {\n                node.style.fill = '#444';\n            }\n            node.style.strokeColor = '#444';\n            return node;\n        }} \n    // Sets the default values for connectors\n    getConnectorDefaults={(connector) => {\n            if (connector.id.indexOf('connector') !== -1) {\n                connector.type = 'Orthogonal';\n                connector.cornerRadius = 10;\n                connector.targetDecorator = { shape: 'OpenArrow', style: { strokeColor: '#444', fill: '#444' } };\n            }\n        }}>\n                            <Inject services={[UndoRedo]}/>\n                        </DiagramComponent>\n                    </div>\n                </div>\n            </div>\n        </div>);\n}\nexport default UmlActivityDiagram;\n\nconst root = createRoot(document.getElementById('sample'));\nroot.render(<UmlActivityDiagram />);","dependencies":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-react-base\":\"*\",\"@syncfusion/ej2-diagrams\":\"*\",\"@syncfusion/ej2-react-diagrams\":\"*\",\"@syncfusion/ej2-react-charts\":\"*\",\"@syncfusion/ej2/base\":\"*\",\"@syncfusion/ej2-charts'; // Import the necessary types from Syncfusion\":\"*\"}"}