{"index.css":"/* css */","index.html":"<!DOCTYPE html>\n<html>\n<head>\n    <title>Syncfusion React Sample</title>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\n    <meta name=\"author\" content=\"Syncfusion\" />\n    <link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\n</head>\n\n<body class=\"{{theme}}\">\n     <style>\n            .control-section\n            {\n                margin-top: 100px;\n            }\n    </style>\n    <div id='sample'>\n</body>\n</html>\n","index.js":"import { createRoot } from 'react-dom/client';\nimport './index.css';\nimport * as React from \"react\";\nimport { SnapConstraints, DiagramComponent, DiagramTools } from \"@syncfusion/ej2-react-diagrams\";\n\n// Basic shape configuration for nodes\nconst basicShape = { type: \"Basic\", shape: \"Ellipse\" };\n// Creates a node with specified properties.\nfunction createNode(id, offsetX, offsetY, width, height, annotations, style) {\n    return {\n        id,\n        offsetX,\n        offsetY,\n        width,\n        height,\n        shape: basicShape,\n        annotations,\n        style\n    };\n}\n// Styles for different node categories\nconst styles = {\n    dataScience: { fill: \"#f2f2f2\", strokeColor: \"#acacac\", strokeWidth: 1 },\n    trignometry: { fill: \"#feb42f\", opacity: 0.2, strokeColor: \"#feb42f\" },\n    expertise: { fill: \"#6acbd4\", opacity: 0.2, strokeColor: \"#6acbd4\" },\n    programming: { fill: \"#ed1d79\", opacity: 0.2, strokeColor: \"#ed1d79\" }\n};\n// Nodes initialization with specific properties\nlet nodes = [\n    createNode(\"datascience\", 450, 232, 400, 400, [{ content: \"Data Science\", offset: { x: 0.5, y: 0.1 } }], styles.dataScience),\n    createNode(\"trignometry\", 515, 205, 200, 200, [\n        { content: \"Trignometry\", offset: { x: 0.5, y: 0.4 }, horizontalAlignment: \"Left\" },\n        { content: \"Thesis\", offset: { x: 0.45, y: 0.8 } }\n    ], styles.trignometry),\n    createNode(\"expertise\", 445, 290, 200, 200, [{ content: \"Expertise\", offset: { x: 0.5, y: 0.7 }, verticalAlignment: \"Top\" }], styles.expertise),\n    createNode(\"programming\", 388, 205, 200, 200, [\n        { content: \"Programming\", offset: { x: 0.5, y: 0.4 }, horizontalAlignment: \"Right\" },\n        { content: \"Assembly\", offset: { x: 0.7, y: 0.35 }, horizontalAlignment: \"Left\" },\n        { content: \"Horizon\", offset: { x: 0.7, y: 0.6 }, horizontalAlignment: \"Left\" },\n        { content: \"Middleware\", offset: { x: 0.5, y: 0.8 } }\n    ], styles.programming)\n];\nlet diagramInstance;\nfunction VennDiagram() {\n    React.useEffect(() => {\n        rendereComplete();\n    }, []);\n    // Adjusts the diagram view to fit the page\n    function rendereComplete() {\n        diagramInstance.fitToPage();\n    }\n    return (<div className=\"control-pane\">\n            <div className=\"control-section\">\n                <div className=\"content-wrapper\" style={{ width: \"100%\" }}>\n                    <DiagramComponent id=\"diagram\" ref={diagram => (diagramInstance = diagram)} width={\"100%\"} height={\"580\"} nodes={nodes} snapSettings={{ constraints: SnapConstraints.None }} tool={DiagramTools.ZoomPan}/>\n                </div>\n            </div>\n        </div>);\n}\nexport default VennDiagram;\n\nconst root = createRoot(document.getElementById('sample'));\nroot.render(<VennDiagram />);","dependencies":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-react-base\":\"*\",\"@syncfusion/ej2-diagrams\":\"*\",\"@syncfusion/ej2-react-diagrams\":\"*\",\"@syncfusion/ej2-react-charts\":\"*\",\"@syncfusion/ej2/base\":\"*\",\"@syncfusion/ej2-charts'; // Import the necessary types from Syncfusion\":\"*\",\"@syncfusion/ej2-lists\":\"*\"}"}