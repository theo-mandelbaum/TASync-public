{"index.css":"/* css */","index.html":"<!DOCTYPE html>\n<html>\n<head>\n    <title>Syncfusion React Sample</title>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\n    <meta name=\"author\" content=\"Syncfusion\" />\n    <link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\n</head>\n\n<body class=\"{{theme}}\">\n     <style>\n            .control-section\n            {\n                margin-top: 100px;\n            }\n    </style>\n    <div id='sample'>\n</body>\n</html>\n","index.js":"import { createRoot } from 'react-dom/client';\nimport './index.css';\nimport * as React from \"react\";\nimport { MoveTool, randomId, SelectorConstraints, cloneObject, DiagramComponent, Node, SnapConstraints, Connector } from \"@syncfusion/ej2-react-diagrams\";\nimport { SampleBase } from './sample-base';\nconst SAMPLE_CSS = `.diagram-userhandle .image-pattern-style {\n        background-color: white;\n        background-size: contain;\n        background-repeat: no-repeat;\n        height: 50px;\n        width: calc((100% - 18px) / 3);\n        cursor: pointer;\n        border: 1px solid #D5D5D5;\n        background-position: center;\n        float: left;\n    }\n    .e-remove-selection .property-section-content {\n      pointer-events: none;\n    }\n      .property-section .e-remove-selection {\n      cursor: not-allowed;\n    }\n    .diagram-userhandle .image-pattern-style:hover {\n        border-color: gray;\n        border-width: 2px;\n    }\n\n    .diagram-userhandle .row {\n        margin: 10px 0px 0px 0px;\n    }\n\n    .diagram-userhandle .e-selected-style {\n        border-color: #006CE6;\n        border-width: 2px;\n    }\n\n    .diagram-userhandle .row-header {\n        font-size: 15px;\n        font-weight: 500;\n        margin-top: 10px\n    }\n\n    .diagram-userhandle .property-panel-header {\n        padding-top: 2px;\n        padding-bottom: 5px;\n    }\n\n   .e-checkbox-wrapper .e-label {\n        font-size: 12px;\n    }\n\n   .container-fluid {\n        padding-left: 0px;\n    }\n\n   .diagram-control-pane .col-xs-6 {\n        padding-left: 0px;\n        padding-right: 0px;\n        padding-top: 5px;\n    }`;\nlet diagramInstance;\nlet appearanceInstance;\nlet patternInstance;\n// Define the collection of nodes in the diagram.\nlet nodes = [\n    {\n        id: \"NewIdea\",\n        width: 150,\n        height: 60,\n        offsetX: 300,\n        offsetY: 60,\n        shape: { type: \"Flow\", shape: \"Terminator\" },\n        annotations: [{ content: \"New idea identified\" }]\n    },\n    {\n        id: \"Meeting\",\n        width: 150,\n        height: 60,\n        offsetX: 300,\n        offsetY: 155,\n        shape: { type: \"Flow\", shape: \"Process\" },\n        annotations: [{ content: \"Meeting with board\" }]\n    },\n    {\n        id: \"BoardDecision\",\n        width: 150,\n        height: 110,\n        offsetX: 300,\n        offsetY: 280,\n        shape: { type: \"Flow\", shape: \"Decision\" },\n        annotations: [{ content: \"Board decides \\n whether to proceed\" }]\n    },\n    {\n        id: \"Project\",\n        width: 150,\n        height: 100,\n        offsetX: 300,\n        offsetY: 430,\n        shape: { type: \"Flow\", shape: \"Decision\" },\n        annotations: [{ content: \"Find Project manager\" }]\n    },\n    {\n        id: \"End\",\n        width: 150,\n        height: 60,\n        offsetX: 300,\n        offsetY: 555,\n        shape: { type: \"Flow\", shape: \"Process\" },\n        annotations: [{ content: \"Implement and Deliver\" }]\n    },\n    {\n        id: \"Decision\",\n        width: 250,\n        height: 60,\n        offsetX: 550,\n        offsetY: 60,\n        shape: { type: \"Flow\", shape: \"Card\" },\n        annotations: [{ content: \"Decision process for new software ideas\" }],\n        fixedUserHandles: [{ padding: { left: 2, right: 2, top: 2, bottom: 2 }, offset: { x: 1.1, y: 0.5 }, width: 20, height: 20, }]\n    },\n    {\n        id: \"Reject\",\n        width: 150,\n        height: 60,\n        offsetX: 550,\n        offsetY: 280,\n        shape: { type: \"Flow\", shape: \"Process\" },\n        annotations: [{ content: \"Reject\" }]\n    },\n    {\n        id: \"Resources\",\n        width: 150,\n        height: 60,\n        offsetX: 550,\n        offsetY: 430,\n        shape: { type: \"Flow\", shape: \"Process\" },\n        annotations: [{ content: \"Hire new resources\" }]\n    }\n];\n// Define the collection of connectors in the diagram.\nlet connectors = [\n    {\n        id: \"connector1\",\n        type: \"Straight\",\n        sourceID: \"NewIdea\",\n        targetID: \"Meeting\"\n    },\n    {\n        id: \"connector2\",\n        type: \"Straight\",\n        sourceID: \"Meeting\",\n        targetID: \"BoardDecision\"\n    },\n    {\n        id: \"connector3\",\n        type: \"Straight\",\n        sourceID: \"BoardDecision\",\n        targetID: \"Project\"\n    },\n    { id: \"connector4\", type: \"Straight\", sourceID: \"Project\", targetID: \"End\" },\n    {\n        id: \"connector5\",\n        type: \"Straight\",\n        sourceID: \"BoardDecision\",\n        targetID: \"Reject\"\n    },\n    {\n        id: \"connector6\",\n        type: \"Straight\",\n        sourceID: \"Project\",\n        targetID: \"Resources\"\n    }\n];\n// Define the collection of user handles for nodes in the diagram.\nlet handles = [\n    {\n        name: \"clone\",\n        pathData: \"M60.3,18H27.5c-3,0-5.5,2.4-5.5,5.5v38.2h5.5V23.5h32.7V18z M68.5,28.9h-30c-3,\" +\n            \"0-5.5,2.4-5.5,5.5v38.2c0,3,2.4,5.5,5.5,5.5h30c3,0,5.5-2.4,5.5-5.5V34.4C73.9,31.4,71.5,28.9,68.5,28.9z \" +\n            \"M68.5,72.5h-30V34.4h30V72.5z\",\n        visible: true,\n        offset: 0,\n        side: \"Bottom\",\n        margin: { top: 0, bottom: 0, left: 0, right: 0 },\n        pathColor: \"white\"\n    }\n];\nexport class UserHandle extends SampleBase {\n    rendereComplete() {\n        diagramInstance.fitToPage();\n        diagramInstance.select([diagramInstance.nodes[0]]);\n        appearanceInstance.onclick = (args) => {\n            let target = args.target;\n            let selectedElement = document.getElementsByClassName(\"e-selected-style\");\n            if (selectedElement.length) {\n                selectedElement[0].classList.remove(\"e-selected-style\");\n            }\n            if (target.className === \"image-pattern-style\") {\n                switch (target.id) {\n                    case \"left\":\n                        setUserHandlePosition(0, \"Bottom\", target);\n                        break;\n                    case \"right\":\n                        setUserHandlePosition(1, \"Bottom\", target);\n                        break;\n                    case \"topr\":\n                        setUserHandlePosition(0, \"Right\", target);\n                        break;\n                }\n            }\n            diagramInstance.dataBind();\n        };\n        patternInstance.onclick = (args) => {\n            let target = args.target;\n            let selectedElement = document.getElementsByClassName(\"e-selected-style\");\n            if (selectedElement.length) {\n                selectedElement[0].classList.remove(\"e-selected-style\");\n            }\n            if (target.className === \"image-pattern-style\") {\n                switch (target.id) {\n                    case \"pattern1\":\n                        applyUserHandleStyle(\"#1E90FF\", target);\n                        break;\n                    case \"pattern2\":\n                        applyUserHandleStyle(\"#3CB371\", target);\n                        break;\n                    case \"pattern3\":\n                        applyUserHandleStyle(\"#FF6347\", target);\n                        break;\n                }\n            }\n            diagramInstance.dataBind();\n        };\n    }\n    render() {\n        return (<div className=\"control-pane \">\n        <style>{SAMPLE_CSS}</style>\n        <div className=\"col-lg-8 control-section\">\n          <div className=\"content-wrapper\" style={{ width: \"100%\" }}>\n            <DiagramComponent id=\"diagram\" ref={diagram => (diagramInstance = diagram)} width={\"100%\"} height={\"600px\"} nodes={nodes} connectors={connectors} selectedItems={{\n                constraints: SelectorConstraints.UserHandle,\n                userHandles: handles\n            }} snapSettings={{ constraints: SnapConstraints.None }} \n        //set Node default value\n        getNodeDefaults={(node) => {\n                return {\n                    style: { fill: \"#578CA9\", strokeColor: \"none\" },\n                    annotations: [{ style: { color: \"white\" } }]\n                };\n            }} fixedUserHandleTemplate={fixedUserHandleTemplate.bind(this)} fixedUserHandleClick={() => {\n                diagramInstance.select([diagramInstance.nameTable['Decision']]);\n                diagramInstance.remove();\n            }} \n        //set CustomTool\n        getCustomTool={getTool} \n        // Enable or disable the property panel based on the selection.\n        selectionChange={(arg) => {\n                let propertyAppearance = document.getElementById(\"propertypanel\");\n                let getSelectedElement = document.getElementsByClassName(\"e-remove-selection\");\n                if (arg.newValue) {\n                    // Check if the item in newValue is either a Node or Connector\n                    if ((arg.newValue[0] instanceof Node) || (arg.newValue[0] instanceof Connector)) {\n                        if (getSelectedElement.length > 0) {\n                            getSelectedElement[0].classList.remove(\"e-remove-selection\");\n                        }\n                    }\n                    else {\n                        if (!propertyAppearance.classList.contains(\"e-remove-selection\")) {\n                            propertyAppearance.classList.add(\"e-remove-selection\");\n                        }\n                    }\n                }\n            }}>\n            </DiagramComponent>\n          </div>\n        </div>\n          <div className=\"col-lg-4 property-section diagram-userhandle\">\n             <div id=\"propertypanel\" className=\"e-remove-selection\">\n             <div className=\"property-section-content\">\n            <div className=\"property-panel-header\">Properties</div>\n            <div className=\"row property-panel-content\" id=\"appearance\" ref={(appearance) => (appearanceInstance = appearance)}>\n              <div className=\"row row-header\">Alignment</div>\n              <div className=\"row\" style={{ paddingTop: \"8px\" }}>\n                <div className=\"image-pattern-style e-selected-style\" id=\"left\" style={{\n                backgroundImage: \"url('https://ej2.syncfusion.com/react/demos/src/diagram/Images/user-handle/bottoml.png')\",\n                marginRight: \"4px\"\n            }}/>\n                <div className=\"image-pattern-style\" id=\"right\" style={{\n                backgroundImage: \"url('https://ej2.syncfusion.com/react/demos/src/diagram/Images/user-handle/bottomr.png')\",\n                margin: \"0px 4px\"\n            }}/>\n                <div className=\"image-pattern-style\" id=\"topr\" style={{\n                backgroundImage: \"url('https://ej2.syncfusion.com/react/demos/src/diagram/Images/user-handle/topr.png')\"\n            }}/>\n              </div>\n            </div>\n            <div className=\"row property-panel-content\" id=\"pattern\" ref={(pattern) => (patternInstance = pattern)}>\n              <div className=\"row row-header\">Appearance</div>\n              <div className=\"row\" style={{ paddingTop: \"8px\" }}>\n                <div className=\"image-pattern-style\" id=\"pattern1\" style={{\n                backgroundImage: \"url('https://ej2.syncfusion.com/react/demos/src/diagram/Images/user-handle/pattern1.png')\",\n                marginRight: \"4px\"\n            }}/>\n                <div className=\"image-pattern-style\" id=\"pattern2\" style={{\n                backgroundImage: \"url('https://ej2.syncfusion.com/react/demos/src/diagram/Images/user-handle/pattern2.png')\",\n                margin: \"0px 4px\"\n            }}/>\n                <div className=\"image-pattern-style\" id=\"pattern3\" style={{\n                backgroundImage: \"url('https://ej2.syncfusion.com/react/demos/src/diagram/Images/user-handle/pattern3.png')\"\n            }}/>\n              </div>\n            </div>\n            </div>\n          </div>\n        </div>\n      </div>);\n    }\n}\n// Define the clone tool for copying Nodes/Connectors.\nclass CloneTool extends MoveTool {\n    mouseDown(args) {\n        let newObject;\n        if (diagramInstance.selectedItems.nodes.length > 0) {\n            newObject = cloneObject(diagramInstance.selectedItems.nodes[0]);\n        }\n        else {\n            newObject = cloneObject(diagramInstance.selectedItems.connectors[0]);\n        }\n        newObject.id += randomId();\n        diagramInstance.paste([newObject]);\n        if (diagramInstance.selectedItems.connectors.length > 0) {\n            args.source = diagramInstance.connectors[diagramInstance.connectors.length - 1];\n        }\n        else {\n            args.source = diagramInstance.nodes[diagramInstance.nodes.length - 1];\n        }\n        args.sourceWrapper = args.source.wrapper;\n        super.mouseDown(args);\n        this.inAction = true;\n    }\n}\n// Enable the clone tool for UserHandle.\nfunction getTool(action) {\n    let tool;\n    if (action === \"clone\") {\n        tool = new CloneTool(diagramInstance.commandHandler);\n    }\n    return tool;\n}\n//set the position of the userhandle.\nfunction setUserHandlePosition(offset, side, target) {\n    diagramInstance.selectedItems.userHandles[0].offset = offset;\n    diagramInstance.selectedItems.userHandles[0].side = side;\n    target.classList.add(\"e-selected-style\");\n}\n//set the style of the userhandle.\nfunction applyUserHandleStyle(bgcolor, target) {\n    diagramInstance.selectedItems.userHandles[0].backgroundColor = bgcolor;\n    diagramInstance.selectedItems.userHandles[0].pathColor = \"White\";\n    target.classList.add(\"e-selected-style\");\n}\nfunction fixedUserHandleTemplate(props) {\n    return (<div style={{ width: '100%', height: '100%' }}>\n  <button style={{ backgroundColor: 'black', borderRadius: '50%', width: '25px', height: '25px', border: 'none', cursor: 'context-menu', padding: 0, display: 'flex', alignItems: 'center', justifyContent: 'center', backgroundImage: `url(https://ej2.syncfusion.com/react/demos/src/diagram/Images/user-handle/delete.png)`, backgroundSize: 'cover', backgroundPosition: 'center' }}>\n  </button>\n  </div>);\n}\n\nconst root = createRoot(document.getElementById('sample'));\nroot.render(<UserHandle />);","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n                this.rendereComplete();\n            });\n        }\n    }\n    export function updateSampleSection(){}\n    ","dependencies":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-react-base\":\"*\",\"@syncfusion/ej2-diagrams\":\"*\",\"@syncfusion/ej2-react-diagrams\":\"*\",\"@syncfusion/ej2-react-charts\":\"*\",\"@syncfusion/ej2/base\":\"*\",\"@syncfusion/ej2-charts'; // Import the necessary types from Syncfusion\":\"*\",\"@syncfusion/ej2-lists\":\"*\"}"}