{"index.css":"/* css */","index.html":"<!DOCTYPE html>\n<html>\n<head>\n    <title>Syncfusion React Sample</title>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\n    <meta name=\"author\" content=\"Syncfusion\" />\n    <link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\n</head>\n\n<body class=\"{{theme}}\">\n     <style>\n            .control-section\n            {\n                margin-top: 100px;\n            }\n    </style>\n    <div id='sample'>\n</body>\n</html>\n","index.js":"import { createRoot } from 'react-dom/client';\nimport './index.css';\nimport * as React from \"react\";\nimport { AvoidLineOverlapping, DiagramComponent, DiagramConstraints, DiagramTools, Inject, LineRouting, PortVisibility, SnapConstraints, Snapping } from \"@syncfusion/ej2-react-diagrams\";\nimport { SampleBase } from './sample-base';\nfunction create1to16Node(id, x, y, width, height) {\n    const node = createNode(id, x, y, width, height);\n    addShape(node, 1, 16);\n    addPorts(node, 1, 'in');\n    addPorts(node, 16, 'out');\n    addPortsLabels(node, 16, 'out');\n    return node;\n}\nfunction create16to1Node(id, x, y, width, height) {\n    const node = createNode(id, x, y, width, height);\n    addShape(node, 16, 1);\n    addPorts(node, 16, 'in');\n    addPorts(node, 1, 'out');\n    addPortsLabels(node, 16, 'in');\n    return node;\n}\nfunction create9to5Node(id, x, y, width, height) {\n    const leftLabels = ['A_0', 'A_1', 'A_2', 'A_3', 'B_0', 'B_1', 'B_2', 'B_3', 'Cin'];\n    const rightLabels = ['S_0', 'S_1', 'S_2', 'S_3', 'Cout'];\n    const node = createNode(id, x, y, width, height, '4 Bit\\nRCA');\n    addShape(node, 9, 5);\n    addPorts(node, 9, 'in');\n    addPorts(node, 5, 'out', 9);\n    addPortsLabels(node, 9, 'in', leftLabels);\n    addPortsLabels(node, 5, 'out', rightLabels, 9);\n    return node;\n}\nfunction createInputNode(id, x, y, width, height, label) {\n    const node = createNode(id, x, y, width, height, label);\n    addShape(node, 0, 1);\n    addPorts(node, 1, 'out');\n    const annotation = node.annotations[0];\n    annotation.offset = { x: (width - 25) / (2 * width), y: 0.5 };\n    return node;\n}\nfunction createOutputNode(id, x, y, width, height, label) {\n    const node = createNode(id, x, y, width, height, label);\n    addShape(node, 1, 0);\n    addPorts(node, 1, 'in');\n    const annotation = node.annotations[0];\n    annotation.offset = { x: 1 - ((width - 25) / (2 * width)), y: 0.5 };\n    return node;\n}\nfunction addShape(node, inCount, outCount) {\n    const maxCount = Math.max(inCount, outCount);\n    const rightX = outCount === 0 ? node.width : node.width - 25;\n    let pathData = `M ${rightX} 0 `;\n    if (outCount > 1) {\n        for (let i = 1; i <= outCount; i++) {\n            const portY = ((i / maxCount) - (1 / (2 * maxCount))) * node.height;\n            pathData += `L ${rightX} ${portY} L ${node.width} ${portY} L ${rightX} ${portY} `;\n        }\n    }\n    else if (outCount === 1) {\n        pathData += `L ${rightX} ${node.height * 0.5} L ${node.width} ${node.height * 0.5} L ${rightX} ${node.height * 0.5} `;\n    }\n    const leftX = inCount === 0 ? 0 : 25;\n    pathData += `L ${rightX} ${node.height} L ${leftX} ${node.height} `;\n    if (inCount > 1) {\n        for (let i = inCount; i >= 1; i--) {\n            const portY = ((i / maxCount) - (1 / (2 * maxCount))) * node.height;\n            pathData += `L ${leftX} ${portY} L 0 ${portY} L ${leftX} ${portY} `;\n        }\n    }\n    else if (inCount === 1) {\n        pathData += `L ${leftX} ${node.height * 0.5} L 0 ${node.height * 0.5} L ${leftX} ${node.height * 0.5} `;\n    }\n    pathData += `L ${leftX} 0 Z`;\n    node.shape = { type: 'Path', data: pathData };\n}\nfunction addPorts(node, count, side, factor) {\n    if (factor === undefined) {\n        factor = count;\n    }\n    if (count > 1) {\n        for (let i = 1; i <= count; i++) {\n            const port = {\n                id: `${node.id}_${side}_${(i - 1)}`,\n                offset: { x: side === 'out' ? 1 : 0, y: (i / factor) - (1 / (2 * factor)) },\n                visibility: PortVisibility.Visible,\n                shape: 'Circle',\n                style: { fill: 'black' },\n                width: 8,\n                height: 8\n            };\n            node.ports.push(port);\n        }\n    }\n    else {\n        const port = {\n            id: `${node.id}_${side}_0`,\n            offset: { x: side === 'out' ? 1 : 0, y: 0.5 },\n            visibility: PortVisibility.Visible,\n            shape: 'Circle',\n            style: { fill: 'black' },\n            width: 8,\n            height: 8\n        };\n        node.ports.push(port);\n    }\n}\nfunction addPortsLabels(node, count, side, labels, factor) {\n    if (factor === undefined) {\n        factor = count;\n    }\n    const x = side === 'out' ? (node.width - 25 * 0.5) / node.width : (25 * 0.5) / node.width;\n    for (let i = 1; i <= count; i++) {\n        const label = {\n            content: labels ? labels[i - 1] : `${i - 1}`,\n            offset: { x: x, y: (i / factor) - (1 / (2 * factor)) },\n            style: { fontSize: 7 },\n            verticalAlignment: 'Bottom',\n            margin: { bottom: 2 }\n        };\n        node.annotations.push(label);\n    }\n}\nfunction createNode(id, x, y, width, height, label) {\n    const shapeStyle = { strokeColor: \"black\", strokeWidth: 2 };\n    const diagramNode = {\n        id: id,\n        offsetX: x,\n        offsetY: y,\n        width: width,\n        height: height,\n        style: shapeStyle,\n        shape: { type: 'Basic' },\n        ports: [],\n        annotations: []\n    };\n    if (label) {\n        const annotation = { content: label, style: { fontSize: 14 } };\n        diagramNode.annotations.push(annotation);\n    }\n    return diagramNode;\n}\nfunction createConnector(id, sourceId, targetId, sourcePortIndex, targetPortIndex, strokeColor = null) {\n    let color = strokeColor ? strokeColor : \"green\";\n    if (color === 'lightGreen') {\n        color = '#1AD81A';\n    }\n    else if (color === 'green') {\n        color = '#005100';\n    }\n    const diagramConnector = {\n        id: id,\n        cornerRadius: 5,\n        sourceID: sourceId,\n        targetID: targetId,\n        sourcePortID: sourceId + '_out_' + sourcePortIndex,\n        targetPortID: targetId + '_in_' + targetPortIndex,\n        type: 'Orthogonal',\n        segments: [{ type: 'Orthogonal' }],\n        style: { strokeColor: color, strokeWidth: 2 },\n        targetDecorator: { shape: 'None' }\n    };\n    return diagramConnector;\n}\nlet nodes = [\n    create1to16Node('node1', 205, 180, 80, 240),\n    create1to16Node('node2', 205, 427.5, 80, 240),\n    create9to5Node('node3', 415, 127.5, 100, 135),\n    create9to5Node('node4', 415, 367.5, 100, 135),\n    create9to5Node('node5', 615, 127.5, 100, 135),\n    create9to5Node('node6', 615, 367.5, 100, 135),\n    create16to1Node('node7', 820, 240, 80, 240),\n    createInputNode('node8', 70, 40, 80, 30, 'Cin'),\n    createInputNode('node9', 70, 180, 80, 30, 'A'),\n    createInputNode('node10', 70, 427.5, 80, 30, 'B'),\n    createOutputNode('node11', 950, 240, 80, 30, 'S'),\n    createOutputNode('node12', 950, 367.5, 80, 30, 'Cout')\n];\nlet connectors = [\n    createConnector('connector01', 'node8', 'node3', 0, 8, 'lightGreen'),\n    createConnector('connector02', 'node9', 'node1', 0, 0, 'orange'),\n    createConnector('connector03', 'node10', 'node2', 0, 0, 'orange'),\n    createConnector('connector04', 'node7', 'node11', 0, 0, 'orange'),\n    createConnector('connector05', 'node6', 'node12', 4, 0),\n    createConnector('connector06', 'node3', 'node5', 4, 8),\n    createConnector('connector07', 'node5', 'node4', 4, 8, 'lightGreen'),\n    createConnector('connector08', 'node4', 'node6', 4, 8),\n    createConnector('connector1', 'node1', 'node3', 0, 0),\n    createConnector('connector2', 'node1', 'node3', 1, 1),\n    createConnector('connector3', 'node1', 'node3', 2, 2),\n    createConnector('connector4', 'node1', 'node3', 3, 3),\n    createConnector('connector5', 'node1', 'node5', 4, 0, 'lightGreen'),\n    createConnector('connector6', 'node1', 'node5', 5, 1),\n    createConnector('connector7', 'node1', 'node5', 6, 2),\n    createConnector('connector8', 'node1', 'node5', 7, 3, 'lightGreen'),\n    createConnector('connector9', 'node1', 'node4', 8, 0, 'lightGreen'),\n    createConnector('connector10', 'node1', 'node4', 9, 1, 'lightGreen'),\n    createConnector('connector11', 'node1', 'node4', 10, 2),\n    createConnector('connector12', 'node1', 'node4', 11, 3, 'lightGreen'),\n    createConnector('connector13', 'node1', 'node6', 12, 0),\n    createConnector('connector14', 'node1', 'node6', 13, 1, 'lightGreen'),\n    createConnector('connector15', 'node1', 'node6', 14, 2, 'lightGreen'),\n    createConnector('connector16', 'node1', 'node6', 15, 3),\n    createConnector('connector17', 'node2', 'node3', 0, 4, 'lightGreen'),\n    createConnector('connector18', 'node2', 'node3', 1, 5, 'lightGreen'),\n    createConnector('connector19', 'node2', 'node3', 2, 6),\n    createConnector('connector20', 'node2', 'node3', 3, 7),\n    createConnector('connector21', 'node2', 'node5', 4, 4, 'lightGreen'),\n    createConnector('connector22', 'node2', 'node5', 5, 5, 'lightGreen'),\n    createConnector('connector23', 'node2', 'node5', 6, 6, 'lightGreen'),\n    createConnector('connector24', 'node2', 'node5', 7, 7, 'lightGreen'),\n    createConnector('connector25', 'node2', 'node4', 8, 4),\n    createConnector('connector26', 'node2', 'node4', 9, 5, 'lightGreen'),\n    createConnector('connector27', 'node2', 'node4', 10, 6),\n    createConnector('connector28', 'node2', 'node4', 11, 7),\n    createConnector('connector29', 'node2', 'node6', 12, 4, 'lightGreen'),\n    createConnector('connector30', 'node2', 'node6', 13, 5),\n    createConnector('connector31', 'node2', 'node6', 14, 6),\n    createConnector('connector32', 'node2', 'node6', 15, 7),\n    createConnector('connector33', 'node3', 'node7', 0, 0),\n    createConnector('connector34', 'node3', 'node7', 1, 1),\n    createConnector('connector35', 'node3', 'node7', 2, 2, 'lightGreen'),\n    createConnector('connector36', 'node3', 'node7', 3, 3),\n    createConnector('connector37', 'node5', 'node7', 0, 4),\n    createConnector('connector38', 'node5', 'node7', 1, 5),\n    createConnector('connector39', 'node5', 'node7', 2, 6),\n    createConnector('connector40', 'node5', 'node7', 3, 7, 'lightGreen'),\n    createConnector('connector41', 'node4', 'node7', 0, 8),\n    createConnector('connector42', 'node4', 'node7', 1, 9),\n    createConnector('connector43', 'node4', 'node7', 2, 10, 'lightGreen'),\n    createConnector('connector44', 'node4', 'node7', 3, 11),\n    createConnector('connector45', 'node6', 'node7', 0, 12),\n    createConnector('connector46', 'node6', 'node7', 1, 13),\n    createConnector('connector47', 'node6', 'node7', 2, 14),\n    createConnector('connector48', 'node6', 'node7', 3, 15, 'lightGreen')\n];\nlet diagramInstance;\nexport class AvoidConnectorOverlapDiagram extends SampleBase {\n    /**\n     * Adjusts the diagram view to fit the page on render completion.\n     */\n    rendereComplete() {\n        diagramInstance.fitToPage();\n    }\n    render() {\n        return (<div className=\"control-pane\">\n                <div className=\"control-section\">\n                    <div className=\"content-wrapper\" style={{ width: \"100%\" }}>\n                        <DiagramComponent id=\"diagram\" ref={diagram => (diagramInstance = diagram)} width={\"100%\"} height={\"580\"} snapSettings={{ constraints: SnapConstraints.None }} constraints={DiagramConstraints.Default | DiagramConstraints.LineRouting | DiagramConstraints.AvoidLineOverlapping} nodes={nodes} connectors={connectors} tool={DiagramTools.ZoomPan}>\n                            <Inject services={[LineRouting, AvoidLineOverlapping, Snapping]}></Inject>\n                        </DiagramComponent>\n                    </div>\n                </div>\n            </div>);\n    }\n}\n\nconst root = createRoot(document.getElementById('sample'));\nroot.render(<AvoidConnectorOverlapDiagram />);","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n                this.rendereComplete();\n            });\n        }\n    }\n    export function updateSampleSection(){}\n    ","dependencies":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-react-base\":\"*\",\"@syncfusion/ej2-diagrams\":\"*\",\"@syncfusion/ej2-react-diagrams\":\"*\",\"@syncfusion/ej2-react-charts\":\"*\",\"@syncfusion/ej2/base\":\"*\",\"@syncfusion/ej2-charts'; // Import the necessary types from Syncfusion\":\"*\"}"}