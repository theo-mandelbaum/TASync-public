{"index.css":"/* css */","index.html":"<!DOCTYPE html>\n<html>\n<head>\n    <title>Syncfusion React Sample</title>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\n    <meta name=\"author\" content=\"Syncfusion\" />\n    <link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\n</head>\n\n<body class=\"{{theme}}\">\n     <style>\n            .control-section\n            {\n                margin-top: 100px;\n            }\n    </style>\n    <div id='sample'>\n</body>\n</html>\n","index.js":"import { createRoot } from 'react-dom/client';\nimport './index.css';\n// Import React and necessary components from Syncfusion's EJ2 React Diagrams library for building the diagram.\nimport * as React from \"react\";\nimport { PortVisibility, DiagramComponent, Node, } from \"@syncfusion/ej2-react-diagrams\";\n\nimport { DropDownListComponent, CheckBoxSelection, Inject } from \"@syncfusion/ej2-react-dropdowns\";\nimport { NumericTextBoxComponent, ColorPickerComponent } from \"@syncfusion/ej2-react-inputs\";\n// Global variables for diagram and property panel instances, and UI components.\nlet diagramInstance;\nlet propertypanelInstance;\nlet portVisibilityDrop;\nlet portFillDrop;\nlet portBorderDrop;\nlet portShapeDrop;\nlet portSizeNum;\nlet portWidthNum;\n// Creates a node with specified properties and ports.\nfunction createNode(id, offsetX, offsetY, annotationContent, ports) {\n    return {\n        id: id,\n        offsetX: offsetX,\n        offsetY: offsetY,\n        annotations: [{ content: annotationContent }],\n        ports: ports\n    };\n}\n// Creates a connector linking two ports of different nodes.\nfunction createConnector(id, sourceID, sourcePortID, targetID, targetPortID) {\n    return {\n        id: id,\n        sourceID: sourceID,\n        sourcePortID: sourcePortID,\n        targetID: targetID,\n        targetPortID: targetPortID\n    };\n}\n// Creates a port with specified properties.\nfunction createPort(id, shape, offsetX, offsetY, text) {\n    return {\n        id: id,\n        shape: shape,\n        offset: { x: offsetX, y: offsetY },\n        height: 8,\n        width: 8,\n        visibility: PortVisibility.Visible,\n        text: text\n    };\n}\n// Predefined ports for nodes.\nlet node1Port = [\n    createPort('port1', 'Circle', 0, 0.5, 'In - 1'),\n    createPort('port2', 'Circle', 1, 0.5, 'OUT - 1'),\n    createPort('port3', 'Circle', 0.25, 1, 'In - 2'),\n    createPort('port4', 'Circle', 0.5, 1, 'OUT - 2'),\n    createPort('port5', 'Circle', 0.75, 1, 'In - 3')\n];\nlet node2Port = [\n    createPort('port6', 'Circle', 0, 0.5, 'In - 1'),\n    createPort('port7', 'Circle', 1, 0.35, 'OUT - 1'),\n    createPort('port8', 'Circle', 1, 0.70, 'In - 2'),\n    createPort('port9', 'Circle', 0.5, 1, 'OUT - 2')\n];\nlet node3Port = [\n    createPort('port10', 'Circle', 0, 0.5, 'Out - 1'),\n    createPort('port11', 'Circle', 0.5, 0, 'In - 1'),\n    createPort('port12', 'Circle', 0.5, 1, 'OUT - 2')\n];\nlet node4Port = [\n    createPort('port13', 'Circle', 0, 0.5, 'In - 1'),\n    createPort('port14', 'Circle', 0.5, 0, 'In - 2'),\n    createPort('port15', 'Circle', 0.5, 1, 'OUT - 1')\n];\nlet node5Port = [\n    createPort('port16', 'Circle', 0, 0.5, 'out - 1'),\n    createPort('port17', 'Circle', 0.5, 0, 'In - 1'),\n    createPort('port18', 'Circle', 1, 0.5, 'OUT - 2')\n];\nlet node6Port = [\n    createPort('port19', 'Circle', 0, 0.35, 'In - 1'),\n    createPort('port20', 'Circle', 0.5, 1, 'Out - 1')\n];\nlet node7Port = [\n    createPort('port21', 'Circle', 0.5, 0, 'In - 1'),\n    createPort('port22', 'Circle', 0.5, 1, 'Out - 1')\n];\n// Basic shapes for nodes.\nlet shape1 = { type: \"Basic\", shape: \"Rectangle\" };\nlet shape2 = { type: \"Basic\", shape: \"Diamond\" };\n// Node definitions for the diagram.\nlet nodes = [\n    createNode('node1', 100, 100, 'Publisher', node1Port),\n    createNode('node2', 300, 100, 'Completed Book', node2Port),\n    createNode('node3', 300, 200, '1st Review', node3Port),\n    createNode('node4', 300, 300, 'Legal Terms', node4Port),\n    createNode('node5', 300, 400, '2nd Review', node5Port),\n    createNode('node6', 500, 100, 'Board', node6Port),\n    createNode('node7', 500, 200, 'Approval', node7Port)\n];\n// Connector definitions for the diagram.\nlet connectors = [\n    createConnector('connector1', 'node1', 'port2', 'node2', 'port6'),\n    createConnector('connector2', 'node1', 'port4', 'node4', 'port13'),\n    createConnector('connector3', 'node2', 'port9', 'node3', 'port11'),\n    createConnector('connector4', 'node2', 'port7', 'node6', 'port19'),\n    createConnector('connector5', 'node3', 'port10', 'node1', 'port5'),\n    createConnector('connector6', 'node3', 'port12', 'node4', 'port14'),\n    createConnector('connector7', 'node4', 'port15', 'node5', 'port17'),\n    createConnector('connector8', 'node5', 'port18', 'node2', 'port8'),\n    createConnector('connector9', 'node5', 'port16', 'node1', 'port3'),\n    createConnector('connector10', 'node6', 'port20', 'node7', 'port21'),\n    createConnector('connector11', 'node7', 'port22', 'node1', 'port1')\n];\n// Port visibility options for the dropdown.\nlet visibility = [\n    { PortVisibility: PortVisibility.Visible, text: \"Visible\" },\n    { PortVisibility: PortVisibility.Hidden, text: \"Hidden\" },\n    { PortVisibility: PortVisibility.Hover, text: \"Hover\" },\n    { PortVisibility: PortVisibility.Connect, text: \"Connect\" }\n];\n// Port shape options for the dropdown.\nlet shape = [\n    { shape: \"X\", text: \"X\" },\n    { shape: \"Circle\", text: \"Circle\" },\n    { shape: \"Square\", text: \"Square\" },\n    { shape: \"Custom\", text: \"Custom\" }\n];\n// CSS styles for the property panel.\nconst sample_css = ` \n.sb-child-row {\n  margin-top: 8px;\n}\n\n.property-panel-header {\n  padding-top: 15px;\n  padding-bottom: 15px;\n}\n\n.property-section .e-remove-selection{\n  cursor: not-allowed;\n}\n\n.row-header {\n  font-size: 13px;\n  font-weight: 500;\n  padding-left: 10px\n}\n\n.e-remove-selection .property-section-content {\n  pointer-events: none;\n}`;\n// Handles changes in selection within the diagram.\n// It updates the property panel based on the selected node's port properties.\nfunction onSelectionChange(args) {\n    if (args.state === \"Changed\") {\n        let selectedElement = document.getElementsByClassName(\"e-remove-selection\");\n        if (args.newValue) {\n            if (!propertypanelInstance.classList.contains(\"e-remove-selection\")) {\n                propertypanelInstance.classList.add(\"e-remove-selection\");\n            }\n            if (args.newValue[0] instanceof Node && selectedElement.length) {\n                selectedElement[0].classList.remove(\"e-remove-selection\");\n                let port = getSelectedPort()[0];\n                // Update UI components with the selected port's properties.\n                portVisibilityDrop.value = port.visibility;\n                portVisibilityDrop.dataBind();\n                portFillDrop.value = port.style.fill;\n                portFillDrop.dataBind();\n                portBorderDrop.value = port.style.strokeColor;\n                portBorderDrop.dataBind();\n                portShapeDrop.value = port.shape;\n                portShapeDrop.dataBind();\n                portSizeNum.value = port.height;\n                portSizeNum.dataBind();\n                portWidthNum.value = port.style.strokeWidth;\n                portWidthNum.dataBind();\n            }\n        }\n    }\n}\n// Retrieves the ports of the currently selected node in the diagram.\nfunction getSelectedPort() {\n    let node = diagramInstance.selectedItems.nodes[0];\n    let port = [];\n    if (node) {\n        port = node.ports;\n    }\n    return port;\n}\n// Updates the visibility of the selected port(s) based on the user's selection in the dropdown.\nfunction onPortVisibilityChange(args) {\n    let port = getSelectedPort();\n    if (port) {\n        for (let j = 0; j < port.length; j++) {\n            port[j].visibility = portVisibilityDrop.value;\n            diagramInstance.dataBind();\n        }\n    }\n}\n// Updates the shape of the selected port(s) based on the user's selection in the dropdown.\nfunction onPortShapeChange(args) {\n    let port = getSelectedPort();\n    for (let j = 0; j < port.length; j++) {\n        switch (portShapeDrop.value) {\n            case \"X\":\n                port[j].shape = \"X\";\n                break;\n            case \"Circle\":\n                port[j].shape = \"Circle\";\n                break;\n            case \"Square\":\n                port[j].shape = \"Square\";\n                break;\n            case \"Custom\":\n                port[j].shape = \"Custom\";\n                port[j].pathData = \"M6.805,0L13.61,10.703L0,10.703z\";\n                break;\n        }\n        diagramInstance.dataBind();\n    }\n}\n// Applies the selected style (size or stroke width) to the selected port(s).\nfunction applyPortStyle(value) {\n    let port = getSelectedPort();\n    for (let j = 0; j < port.length; j++) {\n        if (value === \"size\" && portSizeNum) {\n            port[j].height = portSizeNum.value;\n            port[j].width = portSizeNum.value;\n        }\n        else if (value === \"strokewidth\" && portWidthNum) {\n            port[j].style.strokeWidth = portWidthNum.value;\n        }\n    }\n    diagramInstance.dataBind();\n}\n// Component for Port\nfunction Port() {\n    React.useEffect(() => {\n        rendereComplete();\n    }, []);\n    // This method is called after the component is rendered.\n    // It fits the diagram content within the diagram viewport and selects the first node.\n    function rendereComplete() {\n        diagramInstance.fitToPage();\n        diagramInstance.select([diagramInstance.nodes[0]]);\n    }\n    // Renders the diagram and property panel UI components.\n    return (<div className=\"control-pane\">\n            <style>{sample_css}</style>\n            <div className=\"col-lg-8 control-section\">\n                {/* Initializes and renders diagram control */}\n                <DiagramComponent id=\"diagram\" ref={diagram => (diagramInstance = diagram)} width={\"100%\"} height={580} nodes={nodes} connectors={connectors} selectionChange={onSelectionChange} snapSettings={{ constraints: 0 }} \n    // Sets default properties for nodes, including shape, size, and style.\n    getNodeDefaults={(node) => {\n            // Initialize shape based on node ID.\n            if (node.id === \"node1\" || node.id === \"node2\" ||\n                node.id === \"node4\" || node.id === \"node6\") {\n                node.shape = shape1;\n            }\n            else if (node.id === \"node3\" || node.id === \"node5\" ||\n                node.id === \"node7\") {\n                node.shape = shape2;\n            }\n            // Sets height, width, and style for nodes.\n            node.height = 65;\n            node.width = 100;\n            node.style = { fill: \"#ebf8fb\", strokeColor: \"#baeaf5\" };\n            // Sets styles for the ports of the node.\n            node.ports.forEach(port => {\n                port.style = {\n                    fill: \"#366f8c\",\n                    strokeColor: \"#366f8c\"\n                };\n                port.width = 6;\n                port.height = 6;\n            });\n            // Sets style for the node annotations.\n            node.annotations[0].style = {\n                bold: true,\n                fontSize: 13,\n                color: \"black\"\n            };\n        }} \n    // Sets default properties for connectors, including type and style.\n    getConnectorDefaults={(connector) => {\n            // Defines type and style of the connectors.\n            connector.type = \"Orthogonal\";\n            connector.style = { strokeColor: \"#8cdcef\", strokeWidth: 1 };\n            // Sets the target decorator style.\n            connector.targetDecorator = {\n                width: 5,\n                height: 5,\n                style: { fill: \"#8cdcef\", strokeColor: \"#8cdcef\" }\n            };\n        }}/>\n            </div>\n\n            <div className=\"col-lg-4 property-section\">\n                <div className=\"property-panel-header\">Properties</div>\n                <div className=\"property-panel-content\">\n                    <div id=\"propertypanel\" className=\"e-remove-selection\" ref={propertypanel => (propertypanelInstance = propertypanel)}>\n                        <div className=\"property-section-content\">\n                            <div className=\"row row-header\" style={{ fontSize: \"13px\" }}>\n                                Port Customization\n                            </div>\n                            <div className=\"row sb-child-row\">\n                                <div className=\"col-lg-6\">\n                                    <div style={{ paddingBottom: \"8px\" }}>Visibility</div>\n                                    <div>\n                                        {/* Dropdown for selecting port visibility */}\n                                        <DropDownListComponent id=\"portsVisiblity\" enabled={true} dataSource={visibility} fields={{ value: \"PortVisibility\", text: \"text\" }} change={onPortVisibilityChange} ref={(portVisibilityref) => { portVisibilityDrop = portVisibilityref; }}>\n                                            <Inject services={[CheckBoxSelection]}/>\n                                        </DropDownListComponent>\n                                    </div>\n                                </div>\n                                <div className=\"col-lg-6\">\n                                    <div style={{ paddingBottom: \"8px\" }}>Shape</div>\n                                    <div>\n                                        {/* Dropdown for selecting port shape */}\n                                        <DropDownListComponent id=\"shape\" enabled={true} placeholder=\"Select a Shape\" dataSource={shape} value=\"Circle\" fields={{ value: \"shape\", text: \"text\" }} change={onPortShapeChange} ref={portShapeDropref => (portShapeDrop = portShapeDropref)}/>\n                                    </div>\n                                </div>\n                            </div>\n                            <div className=\"row sb-child-row\">\n                                <div className=\"col-lg-6\">\n                                    <div style={{ paddingBottom: \"8px\" }}>Fill Color</div>\n                                    <div style={{ paddingBottom: \"8px\" }}>\n                                        {/* Color picker for selecting port fill color */}\n                                        <ColorPickerComponent id=\"fillcolor\" value=\"#000\" disabled={false} change={(arg) => {\n            let port = getSelectedPort();\n            port.forEach(p => {\n                p.style.fill = arg.currentValue.rgba;\n            });\n        }} ref={fillcolor => (portFillDrop = fillcolor)}/>\n                                    </div>\n                                </div>\n                                <div className=\"col-lg-6\">\n                                    <div style={{ paddingBottom: \"8px\" }}>Stroke Color</div>\n                                    <div style={{ paddingBottom: \"8px\" }}>\n                                        {/* Color picker for selecting port stroke color */}\n                                        <ColorPickerComponent id=\"strokecolor\" value=\"#000\" disabled={false} change={(arg) => {\n            let port = getSelectedPort();\n            port.forEach(p => {\n                p.style.strokeColor = arg.currentValue.rgba;\n            });\n        }} ref={strokecolor => (portBorderDrop = strokecolor)}/>\n                                    </div>\n                                </div>\n                            </div>\n                            <div className=\"row sb-child-row\">\n                                <div className=\"col-lg-6\">\n                                    <div style={{ paddingBottom: \"8px\" }}>Stroke Width</div>\n                                    <div style={{ paddingBottom: \"8px\" }}>\n                                        {/* NumericTextBox for selecting port stroke width */}\n                                        <NumericTextBoxComponent ref={widthRef => (portWidthNum = widthRef)} id=\"width\" enabled={true} format={\"###.##\"} value={1} step={0.5} max={20} min={1} change={(args) => {\n            applyPortStyle(\"strokewidth\");\n        }}/>\n                                    </div>\n                                </div>\n                                <div className=\"col-lg-6\">\n                                    <div style={{ paddingBottom: \"8px\" }}>Size</div>\n                                    <div style={{ paddingBottom: \"8px\" }}>\n                                        {/* NumericTextBox for selecting port size */}\n                                        <NumericTextBoxComponent ref={sizeRef => (portSizeNum = sizeRef)} id=\"size\" enabled={true} format={\"###.##\"} value={6} step={1} max={30} min={1} change={(args) => {\n            applyPortStyle(\"size\");\n        }}/>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>);\n}\nexport default Port;\n\nconst root = createRoot(document.getElementById('sample'));\nroot.render(<Port />);","dependencies":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-react-base\":\"*\",\"@syncfusion/ej2-diagrams\":\"*\",\"@syncfusion/ej2-react-diagrams\":\"*\",\"@syncfusion/ej2-dropdowns\":\"*\",\"@syncfusion/ej2-react-dropdowns\":\"*\",\"@syncfusion/ej2-inputs\":\"*\",\"@syncfusion/ej2-react-inputs\":\"*\",\"@syncfusion/ej2-react-charts\":\"*\",\"@syncfusion/ej2/base\":\"*\",\"@syncfusion/ej2-charts'; // Import the necessary types from Syncfusion\":\"*\",\"@syncfusion/ej2-lists\":\"*\"}"}