{"index.css":"/* css */","index.html":"<!DOCTYPE html>\n<html>\n<head>\n    <title>Syncfusion React Sample</title>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\n    <meta name=\"author\" content=\"Syncfusion\" />\n    <link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\n</head>\n\n<body class=\"{{theme}}\">\n     <style>\n            .control-section\n            {\n                margin-top: 100px;\n            }\n    </style>\n    <div id='sample'>\n</body>\n</html>\n","index.js":"import { createRoot } from 'react-dom/client';\nimport './index.css';\n// Import React and necessary components from Syncfusion's EJ2 React Diagrams library for building the Fishbone diagram.\nimport * as React from \"react\";\nimport { HierarchicalTree, DataBinding, DiagramComponent, SnapConstraints, Inject, DiagramTools } from \"@syncfusion/ej2-react-diagrams\";\n\n// Creates a node with specified properties\nconst createNode = (id, height, width, offsetX, offsetY, content) => ({\n    id,\n    height,\n    width,\n    offsetX,\n    offsetY,\n    annotations: [{ content: content, style: { color: 'white' } }],\n    shape: { type: 'Path', data: 'M 10 0 L 166 0 L 156 44 L 0 44 z' },\n    style: { fill: '#39AFA9', strokeColor: 'black' }\n});\n// Creates an ellipse node with specified properties\nconst createEllipseNode = (id, height, width, offsetX, offsetY, content = \"\", fill = \"white\", strokeColor = '#A52A2A') => ({\n    id,\n    width,\n    height,\n    offsetX,\n    offsetY,\n    annotations: [{ content: content, style: { color: 'white' } }],\n    shape: { type: 'Basic', shape: 'Ellipse' },\n    style: { fill: fill, strokeColor: strokeColor }\n});\n// Creates a text node with specified properties\nconst createTextNode = (id, height, width, offsetX, offsetY, content) => ({\n    id,\n    width,\n    height,\n    offsetX,\n    offsetY,\n    style: { fill: 'transparent', strokeWidth: 0 },\n    shape: { type: 'Text', content: content }\n});\n// Initializes nodes representing key elements in a Fishbone diagram, such as causes and sub-causes\nlet nodes = [\n    createNode('Equipment', 40, 120, 300, 80, 'Equipment'),\n    createNode('Environment', 40, 120, 450, 80, 'Environment'),\n    createNode('Person', 40, 120, 600, 80, 'Person'),\n    createNode('Materials', 40, 120, 300, 600, 'Materials'),\n    createNode('Machine', 40, 120, 450, 600, 'Machine'),\n    createNode('Methods', 40, 120, 600, 600, 'Methods'),\n    createEllipseNode('ellipse1', 20, 20, 290, 130),\n    createEllipseNode('ellipse2', 20, 20, 323, 183),\n    createEllipseNode('ellipse3', 20, 20, 354, 237),\n    createEllipseNode('ellipse4', 20, 20, 440, 130),\n    createEllipseNode('ellipse5', 20, 20, 470, 182),\n    createEllipseNode('ellipse6', 20, 20, 590, 130),\n    createEllipseNode('ellipse7', 20, 20, 622, 179),\n    createEllipseNode('ellipse8', 20, 20, 660, 221),\n    createEllipseNode('ellipse9', 20, 20, 694, 264),\n    createEllipseNode('ellipse10', 20, 20, 354, 460),\n    createEllipseNode('ellipse11', 20, 20, 590, 530),\n    createEllipseNode('ellipse12', 20, 20, 660, 460),\n    createEllipseNode('ellipse13', 20, 20, 440, 530),\n    createEllipseNode('ellipse14', 20, 20, 510, 460),\n    createEllipseNode('ellipse15', 20, 20, 290, 530),\n    createEllipseNode('Colorellipse1', 50, 50, 717, 310),\n    createEllipseNode('Colorellipse2', 50, 50, 560, 310),\n    createEllipseNode('Colorellipse3', 50, 50, 390, 310),\n    createEllipseNode('Colorellipse4', 50, 50, 220, 310),\n    createEllipseNode('Colorellipse5', 90, 140, 900, 310, 'Productivity Increase', \"#39AFA9\", 'black'),\n    createTextNode('TextPrograms', 20, 90, 189, 130, 'Text Programs'),\n    createTextNode('VentilatorsSound', 20, 120, 359, 130, 'Ventilators Sound'),\n    createTextNode('Education', 20, 70, 500, 130, 'Education'),\n    createTextNode('DataBooks', 20, 70, 213, 183, 'DataBooks'),\n    createTextNode('Fixtures', 20, 70, 240, 237, 'Fixtures'),\n    createTextNode('Noise', 20, 70, 390, 182, 'Noise'),\n    createTextNode('Motivation', 20, 70, 535, 182, 'Motivation'),\n    createTextNode('Tiredness', 20, 70, 565, 224, 'Tiredness'),\n    createTextNode('Storer', 20, 70, 606, 264, 'Storer'),\n    createTextNode('Computer', 20, 70, 260, 460, 'Computer'),\n    createTextNode('Quality', 20, 120, 417, 460, 'Quality of Element'),\n    createTextNode('Order', 20, 70, 562, 460, 'Order'),\n    createTextNode('Software', 20, 70, 225, 530, 'Software'),\n    createTextNode('Procurement', 20, 70, 358, 530, 'Procurement'),\n    createTextNode('Standardization', 20, 90, 501, 530, 'Standardization'),\n];\n// Creates a connector model with customizable style and annotations.\nconst createConnector = (id, lineDashArray, source, target, strokeColor) => ({\n    id: id,\n    sourceID: source,\n    targetID: target,\n    style: {\n        strokeColor: strokeColor,\n        strokeWidth: 2,\n        strokeDashArray: lineDashArray,\n    }\n});\n// Initializes connectors to define relationships between elements in the Fishbone diagram.\nlet connectors = [\n    createConnector('connector01', '5,5', 'Equipment', 'ellipse1', '#A52A2A'),\n    createConnector('connector02', '5,5', 'ellipse1', 'ellipse2', '#A52A2A'),\n    createConnector('connector03', '5,5', 'ellipse2', 'ellipse3', '#A52A2A'),\n    createConnector('connector04', '5,5', 'ellipse3', 'Colorellipse3', '#A52A2A'),\n    createConnector('connector05', '5,5', 'Environment', 'ellipse4', '#A52A2A'),\n    createConnector('connector06', '5,5', 'ellipse4', 'ellipse5', '#A52A2A'),\n    createConnector('connector07', '5,5', 'ellipse4', 'ellipse5', '#A52A2A'),\n    createConnector('connector08', '5,5', 'ellipse5', 'Colorellipse2', '#A52A2A'),\n    createConnector('connector09', '5,5', 'Person', 'ellipse6', '#A52A2A'),\n    createConnector('connector10', '5,5', 'ellipse6', 'ellipse7', '#A52A2A'),\n    createConnector('connector11', '5,5', 'ellipse7', 'ellipse8', '#A52A2A'),\n    createConnector('connector12', '5,5', 'ellipse8', 'ellipse9', '#A52A2A'),\n    createConnector('connector13', '5,5', 'ellipse9', 'Colorellipse1', '#A52A2A'),\n    createConnector('connector14', '5,5', 'Materials', 'ellipse15', '#A52A2A'),\n    createConnector('connector15', '5,5', 'ellipse15', 'ellipse10', '#A52A2A'),\n    createConnector('connector16', '5,5', 'ellipse10', 'Colorellipse3', '#A52A2A'),\n    createConnector('connector17', '5,5', 'Machine', 'ellipse13', '#A52A2A'),\n    createConnector('connector18', '5,5', 'ellipse13', 'ellipse14', '#A52A2A'),\n    createConnector('connector19', '5,5', 'ellipse14', 'Colorellipse2', '#A52A2A'),\n    createConnector('connector20', '5,5', 'Methods', 'ellipse11', '#A52A2A'),\n    createConnector('connector21', '5,5', 'ellipse11', 'ellipse12', '#A52A2A'),\n    createConnector('connector22', '5,5', 'ellipse12', 'Colorellipse1', '#A52A2A'),\n    createConnector('connector23', '', 'Colorellipse4', 'Colorellipse3', '#000000'),\n    createConnector('connector24', '', 'Colorellipse3', 'Colorellipse2', '#000000'),\n    createConnector('connector25', '', 'Colorellipse2', 'Colorellipse1', '#000000'),\n    createConnector('connector26', '', 'Colorellipse1', 'Colorellipse5', '#000000'),\n    createConnector('connector27', '5,5', 'TextPrograms', 'ellipse1', '#A52A2A'),\n    createConnector('connector28', '5,5', 'DataBooks', 'ellipse2', '#A52A2A'),\n    createConnector('connector29', '5,5', 'Fixtures', 'ellipse3', '#A52A2A'),\n    createConnector('connector30', '5,5', 'VentilatorsSound', 'ellipse4', '#A52A2A'),\n    createConnector('connector31', '5,5', 'Noise', 'ellipse5', '#A52A2A'),\n    createConnector('connector32', '5,5', 'Education', 'ellipse6', '#A52A2A'),\n    createConnector('connector33', '5,5', 'Motivation', 'ellipse7', '#A52A2A'),\n    createConnector('connector34', '5,5', 'Tiredness', 'ellipse8', '#A52A2A'),\n    createConnector('connector35', '5,5', 'Storer', 'ellipse9', '#A52A2A'),\n    createConnector('connector36', '5,5', 'Software', 'ellipse15', '#A52A2A'),\n    createConnector('connector37', '5,5', 'Computer', 'ellipse10', '#A52A2A'),\n    createConnector('connector38', '5,5', 'Procurement', 'ellipse13', '#A52A2A'),\n    createConnector('connector39', '5,5', 'Quality', 'ellipse14', '#A52A2A'),\n    createConnector('connector40', '5,5', 'Order', 'ellipse12', '#A52A2A'),\n    createConnector('connector41', '5,5', 'Standardization', 'ellipse11', '#A52A2A')\n];\n// Define a variable to hold an instance of the DiagramComponent\nlet diagramInstance;\n// Define the function FishBone\nfunction Fishbone() {\n    React.useEffect(() => {\n        // Call functions to update sample section and render completion\n        renderComplete();\n    }, []);\n    // Adjusts the diagram view to fit the width of the page after rendering is complete.\n    function renderComplete() {\n        diagramInstance.fitToPage({ mode: 'Width' });\n    }\n    // Renders the Fishbone diagram component with predefined settings.\n    return (<div className=\"control-pane\">\n            <div className=\"control-section\">\n                <div style={{ width: \"100%\" }}>\n                    {/* Initializes the DiagramComponent for the Fishbone diagram. */}\n                    <DiagramComponent id=\"diagram\" ref={diagram => (diagramInstance = diagram)} width={\"100%\"} height={\"700px\"} snapSettings={{ constraints: SnapConstraints.None }} nodes={nodes} connectors={connectors} \n    // Sets default properties for connectors.\n    getConnectorDefaults={(connector) => {\n            connector.targetDecorator = { shape: 'Arrow', width: 5, height: 5 };\n            // Customizes target decorator style for specific connectors.\n            if (connector.id !== 'connector23' && connector.id !== 'connector24' &&\n                connector.id !== 'connector25' && connector.id !== 'connector26') {\n                connector.targetDecorator.style = { strokeColor: '#A52A2A', fill: '#A52A2A' };\n            }\n        }} tool={DiagramTools.ZoomPan}>\n                        <Inject services={[DataBinding, HierarchicalTree]}/>\n                    </DiagramComponent>\n                </div>\n            </div>\n        </div>);\n}\nexport default Fishbone;\n\nconst root = createRoot(document.getElementById('sample'));\nroot.render(<Fishbone />);","dependencies":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-react-base\":\"*\",\"@syncfusion/ej2-diagrams\":\"*\",\"@syncfusion/ej2-react-diagrams\":\"*\",\"@syncfusion/ej2-react-charts\":\"*\",\"@syncfusion/ej2/base\":\"*\",\"@syncfusion/ej2-charts'; // Import the necessary types from Syncfusion\":\"*\",\"@syncfusion/ej2-lists\":\"*\"}"}