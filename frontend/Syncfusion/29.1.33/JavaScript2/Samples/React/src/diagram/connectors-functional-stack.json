{"index.css":"/* css */","index.html":"<!DOCTYPE html>\n<html>\n<head>\n    <title>Syncfusion React Sample</title>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\n    <meta name=\"author\" content=\"Syncfusion\" />\n    <link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\n</head>\n\n<body class=\"{{theme}}\">\n     <style>\n            .control-section\n            {\n                margin-top: 100px;\n            }\n    </style>\n    <div id='sample'>\n</body>\n</html>\n","index.js":"import { createRoot } from 'react-dom/client';\nimport './index.css';\nimport * as React from \"react\";\nimport { TextElement, HierarchicalTree, ConnectorConstraints, SnapConstraints, DiagramComponent, randomId, Inject, ConnectorEditing } from \"@syncfusion/ej2-react-diagrams\";\nimport { StackPanel } from \"@syncfusion/ej2-react-diagrams\";\nimport { Diagram, PortVisibility } from \"@syncfusion/ej2-react-diagrams\";\nimport { DropDownListComponent, } from \"@syncfusion/ej2-react-dropdowns\";\nimport { ColorPickerComponent, NumericTextBoxComponent } from \"@syncfusion/ej2-react-inputs\";\n\nDiagram.Inject(ConnectorEditing);\nlet diagramInstance;\nlet sourceDecoratorDropDown;\nlet targetDecoratorDropDown;\nlet appearanceElement;\nlet segmentDecoratorSizeNumericTextBox;\n//Initialize shape\nlet shape = {\n    type: \"Basic\",\n    shape: \"Rectangle\",\n    cornerRadius: 10\n};\n//Initialize Diagram Nodes\nlet nodes = [\n    { id: \"node1\", annotations: [{ content: \"Promotion\" }] },\n    { id: \"node2\", annotations: [{ content: \"Lead\" }] },\n    { id: \"node3\", annotations: [{ content: \"Account\" }] },\n    { id: \"node4\", annotations: [{ content: \"Information\" }] },\n    { id: \"node5\", annotations: [{ content: \"Opportunity\" }] },\n    { id: \"node6\", offsetX: 540, offsetY: 290, excludeFromLayout: true }\n];\n//Initialize Diagram connectors\nlet connectors = [\n    { id: \"connector\", sourceID: \"node1\", targetID: \"node2\" },\n    {\n        id: \"connector1\",\n        sourceID: \"node2\",\n        sourcePortID: \"port1\",\n        targetID: \"node3\",\n        targetPortID: \"portIn\"\n    },\n    {\n        id: \"connector2\",\n        sourceID: \"node2\",\n        sourcePortID: \"port2\",\n        targetID: \"node4\",\n        targetPortID: \"portIn\"\n    },\n    {\n        id: \"connector3\",\n        sourceID: \"node2\",\n        sourcePortID: \"port3\",\n        targetID: \"node5\",\n        targetPortID: \"portIn\"\n    },\n    {\n        id: \"connector4\",\n        sourceID: \"node6\",\n        sourcePortID: \"port4\",\n        targetID: \"node3\",\n        targetPortID: \"portOut\"\n    },\n    {\n        id: \"connector5\",\n        sourceID: \"node6\",\n        sourcePortID: \"port5\",\n        targetID: \"node4\",\n        targetPortID: \"portOut\"\n    },\n    {\n        id: \"connector7\",\n        sourceID: \"node6\",\n        sourcePortID: \"port6\",\n        targetID: \"node5\",\n        targetPortID: \"portOut\"\n    }\n];\n// Shape collection of the decorators.\nlet decoratorShape = [\n    { shape: 'None', text: 'None' },\n    { shape: 'Square', text: 'Square' },\n    { shape: 'Circle', text: 'Circle' },\n    { shape: 'Diamond', text: 'Diamond' },\n    { shape: 'Arrow', text: 'Arrow' },\n    { shape: 'OpenArrow', text: 'Open Arrow' },\n    { shape: 'Fletch', text: 'Fletch' },\n    { shape: 'OpenFetch', text: 'Open Fetch' },\n    { shape: 'IndentedArrow', text: 'Indented Arrow' },\n    { shape: 'OutdentedArrow', text: 'Outdented Arrow' },\n    { shape: 'DoubleArrow', text: 'Double Arrow' }\n];\nconst SAMPLE_CSS = `\n/* For connector type and style change in property panel*/\n.diagram-connector .image-pattern-style {\n        background-color: white;\n        background-size: contain;\n        background-repeat: no-repeat;\n        height: 45px;\n        width: calc((100% - 13px) / 3);\n        cursor: pointer;\n        border: 1px solid #D5D5D5;\n        background-position: center;\n        float: left;\n    }\n\n    .diagram-connector .image-pattern-style:hover {\n        border-color: gray;\n        border-width: 2px;\n    }\n\n    .diagram-connector .row {\n        margin-left: 0px;\n        margin-right: 0px;\n    }\n\n    .diagram-connector .row-header {\n        font-size: 13px;\n        font-weight: 500;\n    }\n\n    .diagram-connector .e-selected-style {\n        border-color: #006CE6;\n        border-width: 2px;\n    }\n\n    .diagram-connector label{\n      display: inline-block;\n      font-size: 13px;\n      font-weight: 400;\n      width: 100%;\n      margin-top: auto;\n    }`;\nfunction Connectors() {\n    React.useEffect(() => {\n        rendereComplete();\n    }, []);\n    let node;\n    let connector;\n    function rendereComplete() {\n        diagramInstance.fitToPage();\n        //Click Event for Appearance of the layout.\n        appearanceElement.onclick = (args) => {\n            let target = args.target;\n            let selectedElement = document.getElementsByClassName(\"e-selected-style\");\n            if (selectedElement.length) {\n                selectedElement[0].classList.remove(\"e-selected-style\");\n            }\n            if (target.className === \"image-pattern-style\") {\n                switch (target.id) {\n                    case \"straightConnector\":\n                        defaultConnectorStyle(\"Straight\", target);\n                        break;\n                    case \"orthogonalConnector\":\n                        defaultConnectorStyle(\"Orthogonal\", target);\n                        break;\n                    case \"bezierConnector\":\n                        defaultConnectorStyle(\"Bezier\", target);\n                        break;\n                    case \"straightConnectorWithStroke\":\n                        applyConnectorStyle(false, false, false, \"Straight\", target);\n                        break;\n                    case \"orthogonalConnectorWithStroke\":\n                        applyConnectorStyle(false, false, false, \"Orthogonal\", target);\n                        break;\n                    case \"bezierConnectorWithStroke\":\n                        applyConnectorStyle(false, false, false, \"Bezier\", target);\n                        break;\n                    case \"straightConnectorWithDasharray\":\n                        applyConnectorStyle(true, false, false, \"Straight\", target);\n                        break;\n                    case \"orthogonalConnectorWithDasharray\":\n                        applyConnectorStyle(true, false, false, \"Orthogonal\", target);\n                        break;\n                    case \"bezierConnectorWithDasharray\":\n                        applyConnectorStyle(true, false, false, \"Bezier\", target);\n                        break;\n                    case \"cornerRadius\":\n                        applyConnectorStyle(false, false, true, \"Orthogonal\", target);\n                        break;\n                    case \"sourceDecorators\":\n                        applyConnectorStyle(false, true, false, \"Straight\", target);\n                        break;\n                    case \"sourceDecoratorWithDasharray\":\n                        applyConnectorStyle(true, true, false, \"Straight\", target);\n                        break;\n                }\n            }\n        };\n    }\n    //Customize the content of the node\n    function setNodeTemplate() {\n        let canvas = new StackPanel();\n        canvas.children = [];\n        canvas.id = randomId();\n        canvas.style.strokeWidth = 0;\n        canvas.style.fill = \"#e6e0eb\";\n        canvas.children.push(getTextElement(\"Events\", \"#a6a1e0\"));\n        canvas.children.push(getTextElement(\"Emails\", \"#db8ec9\"));\n        canvas.children.push(getTextElement(\"Calls\", \"#db8ec9\"));\n        canvas.children.push(getTextElement(\"Smart Contents\", \"#db8ec9\"));\n        return canvas;\n    }\n    //Creation of TextElement for node\n    function getTextElement(text, color) {\n        let textElement = new TextElement();\n        textElement.id = randomId();\n        textElement.width = 80;\n        textElement.height = 35;\n        textElement.content = text;\n        textElement.style.fill = \"#6f409f\";\n        textElement.style.color = \"white\";\n        textElement.style.strokeColor = \"#6f409f\";\n        textElement.cornerRadius = 5;\n        textElement.margin = { top: 10, bottom: 10, left: 10, right: 10 };\n        textElement.relativeMode = \"Object\";\n        return textElement;\n    }\n    //creation of Port for Node.\n    function getPorts(obj) {\n        if (obj.id === \"node2\") {\n            let node2Ports = [\n                {\n                    id: \"port1\",\n                    offset: { x: 1, y: 0.25 },\n                    visibility: PortVisibility.Hidden\n                },\n                {\n                    id: \"port2\",\n                    offset: { x: 1, y: 0.5 },\n                    visibility: PortVisibility.Hidden\n                },\n                {\n                    id: \"port3\",\n                    offset: { x: 1, y: 0.75 },\n                    visibility: PortVisibility.Hidden\n                }\n            ];\n            return node2Ports;\n        }\n        else if (obj.id === \"node6\") {\n            let node6Ports = [\n                {\n                    id: \"port4\",\n                    offset: { x: 0, y: 0.46 },\n                    visibility: PortVisibility.Hidden\n                },\n                {\n                    id: \"port5\",\n                    offset: { x: 0, y: 0.5 },\n                    visibility: PortVisibility.Hidden\n                },\n                {\n                    id: \"port6\",\n                    offset: { x: 0, y: 0.54 },\n                    visibility: PortVisibility.Hidden\n                }\n            ];\n            return node6Ports;\n        }\n        else {\n            let ports = [\n                {\n                    id: \"portIn\",\n                    offset: { x: 0, y: 0.5 },\n                    visibility: PortVisibility.Hidden\n                },\n                {\n                    id: \"portOut\",\n                    offset: { x: 1, y: 0.5 },\n                    visibility: PortVisibility.Hidden\n                }\n            ];\n            return ports;\n        }\n    }\n    //ConnectorStyle customization\n    function applyConnectorStyle(dashedLine, sourceDecorator, isRounded, type, target) {\n        for (let i = 0; i < diagramInstance.connectors.length; i++) {\n            diagramInstance.connectors[i].style.strokeWidth = 2;\n            diagramInstance.connectors[i].type = type;\n            if (isRounded) {\n                diagramInstance.connectors[i].cornerRadius = 5;\n            }\n            if (sourceDecorator) {\n                diagramInstance.connectors[i].sourceDecorator = {\n                    style: {\n                        strokeColor: diagramInstance.connectors[i].style.strokeColor,\n                        fill: diagramInstance.connectors[i].style.strokeColor,\n                        strokeWidth: 2\n                    },\n                    shape: \"Circle\"\n                };\n                sourceDecoratorDropDown.value = 'Circle';\n            }\n            else {\n                diagramInstance.connectors[i].sourceDecorator = { shape: \"None\" };\n                sourceDecoratorDropDown.value = 'None';\n            }\n            if (dashedLine) {\n                diagramInstance.connectors[i].style.strokeDashArray = \"5,5\";\n            }\n            else {\n                diagramInstance.connectors[i].style.strokeDashArray = \"\";\n            }\n            diagramInstance.connectors[i].targetDecorator = {\n                style: {\n                    strokeColor: diagramInstance.connectors[i].style.strokeColor,\n                    fill: diagramInstance.connectors[i].style.strokeColor,\n                    strokeWidth: 2\n                },\n                shape: \"Arrow\"\n            };\n            diagramInstance.dataBind();\n            diagramInstance.updateSelector();\n            targetDecoratorDropDown.value = 'Arrow';\n        }\n        target.classList.add(\"e-selected-style\");\n    }\n    //ConnectorStyle customization\n    function defaultConnectorStyle(type, target) {\n        for (let i = 0; i < diagramInstance.connectors.length; i++) {\n            diagramInstance.connectors[i].style.strokeWidth = 1;\n            diagramInstance.connectors[i].type = type;\n            diagramInstance.connectors[i].sourceDecorator = { shape: \"None\" };\n            diagramInstance.connectors[i].style.strokeDashArray = \"\";\n            diagramInstance.connectors[i].targetDecorator = {\n                style: {\n                    strokeColor: diagramInstance.connectors[i].style.strokeColor,\n                    fill: diagramInstance.connectors[i].style.strokeColor,\n                    strokeWidth: 1\n                },\n                shape: \"Arrow\"\n            };\n            diagramInstance.dataBind();\n            targetDecoratorDropDown.value = 'Arrow';\n        }\n        target.classList.add(\"e-selected-style\");\n    }\n    //Change Source decorator shape\n    function sourceDecoratorShapeChange(args) {\n        for (let i = 0; i < diagramInstance.connectors.length; i++) {\n            diagramInstance.connectors[i].sourceDecorator = {\n                shape: args.itemData.shape,\n                style: {\n                    strokeColor: diagramInstance.connectors[i].style.strokeColor,\n                    fill: diagramInstance.connectors[i].style.strokeColor,\n                }\n            };\n        }\n        diagramInstance.dataBind();\n    }\n    //Change target decorator shape\n    function targetDecoratorShapeChange(args) {\n        for (let i = 0; i < diagramInstance.connectors.length; i++) {\n            diagramInstance.connectors[i].targetDecorator = {\n                shape: args.itemData.shape,\n                style: {\n                    strokeColor: diagramInstance.connectors[i].style.strokeColor,\n                    fill: diagramInstance.connectors[i].style.strokeColor,\n                }\n            };\n            diagramInstance.dataBind();\n        }\n    }\n    //Change segment decorator shape\n    function segmentDecoratorShapeChange(args) {\n        for (let i = 0; i < diagramInstance.connectors.length; i++) {\n            diagramInstance.segmentThumbShape = args.itemData.shape;\n        }\n        diagramInstance.dataBind();\n    }\n    //Change Source decorator size\n    function sourceDecoratorSizeChange(args) {\n        for (let i = 0; i < diagramInstance.connectors.length; i++) {\n            diagramInstance.connectors[i].sourceDecorator.width = args.value;\n            diagramInstance.connectors[i].sourceDecorator.height = args.value;\n        }\n        diagramInstance.dataBind();\n    }\n    //Change target decorator size\n    function targetDecoratorSizeChange(args) {\n        for (let i = 0; i < diagramInstance.connectors.length; i++) {\n            diagramInstance.connectors[i].targetDecorator.width = args.value;\n            diagramInstance.connectors[i].targetDecorator.height = args.value;\n        }\n        diagramInstance.dataBind();\n    }\n    //Change segment decorator size\n    function segmentDecoratorSizeChange(args) {\n        let connector = diagramInstance.selectedItems.connectors[0];\n        diagramInstance.segmentThumbSize = args.value;\n        diagramInstance.clearSelection();\n        diagramInstance.select([diagramInstance.nameTable[connector.id]]);\n        diagramInstance.dataBind();\n    }\n    return (<div className=\"control-pane diagram-connector\">\n      <style>{SAMPLE_CSS}</style>\n      <div className=\"col-lg-8 control-section\">\n        <div className=\"content-wrapper\" style={{ width: \"100%\", background: \"white\" }}>\n          <DiagramComponent id=\"diagram\" ref={diagram => (diagramInstance = diagram)} width={\"100%\"} height={580} nodes={nodes} connectors={connectors} segmentThumbSize={10} selectionChange={() => {\n            if (diagramInstance.selectedItems.connectors.length > 0) {\n                segmentDecoratorSizeNumericTextBox.enabled = true;\n            }\n            else {\n                segmentDecoratorSizeNumericTextBox.enabled = false;\n            }\n        }} \n    //Configrues hierarchical tree layout\n    layout={{\n            type: \"HierarchicalTree\",\n            orientation: \"LeftToRight\",\n            verticalSpacing: 75,\n            margin: { left: 30, right: 0, top: 0, bottom: 0 }\n        }} snapSettings={{ constraints: SnapConstraints.None }} \n    //Sets the default values of nodes\n    getNodeDefaults={(obj) => {\n            if (obj.id !== \"node1\") {\n                //Set ports\n                obj.ports = getPorts(obj);\n            }\n            if (obj.id !== \"node6\") {\n                obj.shape = shape;\n                obj.width = 80;\n                obj.style.strokeWidth = 2;\n                obj.style.strokeColor = \"#6F409F\";\n                obj.height = 35;\n            }\n        }} \n    //Sets the default values of connector\n    getConnectorDefaults={(obj) => {\n            obj.type = \"Bezier\";\n            obj.style.strokeColor = \"#6f409f\";\n            obj.style.strokeWidth = 2;\n            obj.targetDecorator = {\n                style: {\n                    strokeColor: \"#6f409f\",\n                    fill: \"#6f409f\"\n                }\n            };\n            obj.segments = [\n                {\n                    type: 'Bezier',\n                }\n            ],\n                obj.constraints = ConnectorConstraints.Default | ConnectorConstraints.DragSegmentThumb;\n        }} \n    //Customize the content of the node\n    setNodeTemplate={(obj) => {\n            if (obj.id === \"node6\") {\n                return setNodeTemplate();\n            }\n            return null;\n        }}>\n            <Inject services={[HierarchicalTree]}/>\n          </DiagramComponent>\n        </div>\n      </div>\n      <div className=\"col-lg-4 property-section\">\n        <div className=\"property-panel-header\">Properties</div>\n        <div className=\"row property-panel-content\" id=\"appearance\" ref={appearance => (appearanceElement = appearance)}>\n          <div className=\"row row-header\"><b>Connector types</b></div>\n          <div className=\"row\" style={{ paddingTop: \"8px\" }}>\n            <div className=\"image-pattern-style\" id=\"straightConnector\" style={{\n            backgroundImage: \"url('https://ej2.syncfusion.com/react/demos/src/diagram/Images/connector/Connectors_1.png')\",\n            marginRight: \"3px\"\n        }}/>\n            <div className=\"image-pattern-style\" id=\"orthogonalConnector\" style={{\n            backgroundImage: \"url('https://ej2.syncfusion.com/react/demos/src/diagram/Images/connector/Connectors_2.png')\",\n            margin: \"0px 3px\"\n        }}/>\n            <div className=\"image-pattern-style\" id=\"bezierConnector\" style={{\n            backgroundImage: \"url('https://ej2.syncfusion.com/react/demos/src/diagram/Images/connector/Connectors_3.png')\",\n            marginLeft: \"3px\"\n        }}/>\n          </div>\n          <div className=\"row\" style={{ paddingTop: \"8px\" }}>\n            <div className=\"image-pattern-style\" id=\"straightConnectorWithStroke\" style={{\n            backgroundImage: \"url('https://ej2.syncfusion.com/react/demos/src/diagram/Images/connector/Connectors_4.png')\",\n            marginRight: \"3px\"\n        }}/>\n            <div className=\"image-pattern-style\" id=\"orthogonalConnectorWithStroke\" style={{\n            backgroundImage: \"url('https://ej2.syncfusion.com/react/demos/src/diagram/Images/connector/Connectors_5.png')\",\n            margin: \"0px 3px\"\n        }}/>\n            <div className=\"image-pattern-style\" id=\"bezierConnectorWithStroke\" style={{\n            backgroundImage: \"url('https://ej2.syncfusion.com/react/demos/src/diagram/Images/connector/Connectors_6.png')\",\n            marginLeft: \"3px\"\n        }}/>\n          </div>\n          <div className=\"row\" style={{ paddingTop: \"8px\" }}>\n            <div className=\"image-pattern-style\" id=\"straightConnectorWithDasharray\" style={{\n            backgroundImage: \"url('https://ej2.syncfusion.com/react/demos/src/diagram/Images/connector/Connectors_7.png')\",\n            marginRight: \"3px\"\n        }}/>\n            <div className=\"image-pattern-style\" id=\"orthogonalConnectorWithDasharray\" style={{\n            backgroundImage: \"url('https://ej2.syncfusion.com/react/demos/src/diagram/Images/connector/Connectors_8.png')\",\n            margin: \"0px 3px\"\n        }}/>\n            <div className=\"image-pattern-style\" id=\"bezierConnectorWithDasharray\" style={{\n            backgroundImage: \"url('https://ej2.syncfusion.com/react/demos/src/diagram/Images/connector/Connectors_9.png')\",\n            marginLeft: \"3px\"\n        }}/>\n          </div>\n          <div className=\"row\" style={{ paddingTop: \"8px\" }}>\n            <div className=\"image-pattern-style\" id=\"cornerRadius\" style={{\n            backgroundImage: \"url('https://ej2.syncfusion.com/react/demos/src/diagram/Images/connector/Connectors_10.png')\",\n            marginRight: \"3px\"\n        }}/>\n            <div className=\"image-pattern-style\" id=\"sourceDecorators\" style={{\n            backgroundImage: \"url('https://ej2.syncfusion.com/react/demos/src/diagram/Images/connector/Connectors_11.png')\",\n            margin: \"0px 3px\"\n        }}/>\n            <div className=\"image-pattern-style\" id=\"sourceDecoratorWithDasharray\" style={{\n            backgroundImage: \"url('https://ej2.syncfusion.com/react/demos/src/diagram/Images/connector/Connectors_12.png')\",\n            marginLeft: \"3px\"\n        }}/>\n          </div>\n        </div>\n        <div className=\"row property-panel-content\" id=\"decorators\" style={{ paddingTop: \"10px\" }}>\n            <div className=\"row row-header\" style={{ paddingTop: \"8px\" }}>\n              <b>Decorators</b>\n            </div>\n            <div className=\"row\" style={{ paddingTop: \"8px\", display: 'flex' }}>\n              <label>Source Decorators</label>\n              <div>\n                {/* <input type=\"text\" id='sourceDecorator' /> */}\n                <DropDownListComponent id=\"sourceDecorator\" ref={sourceDecorator => (sourceDecoratorDropDown = sourceDecorator)} value=\"None\" dataSource={decoratorShape} change={sourceDecoratorShapeChange}/>\n              </div>\n            </div>\n            <div className=\"row\" style={{ paddingTop: \"8px\", display: 'flex' }}>\n              <label>Target Decorators</label>\n              <div>\n                {/* <input type=\"text\" id='targetDecorator' /> */}\n                <DropDownListComponent id=\"targetDecorator\" ref={targetDecorator => (targetDecoratorDropDown = targetDecorator)} value=\"Arrow\" dataSource={decoratorShape} change={targetDecoratorShapeChange}/>\n              </div>\n            </div>\n            <div className=\"row\" style={{ paddingTop: \"8px\", display: 'flex' }}>\n              <label>Segment Decorators</label>\n              <div>\n                {/* <input type=\"text\" id='segmentDecorator' /> */}\n                <DropDownListComponent id=\"segmentDecorator\" value=\"Circle\" dataSource={decoratorShape} change={segmentDecoratorShapeChange}/>\n              </div>\n            </div>\n        </div>\n        <div className=\"row property-panel-content\" id=\"decorators\" style={{ paddingTop: \"10px\" }}>\n            <div className=\"row row-header\" style={{ paddingTop: \"8px\" }}>\n              <b>Decorators Size</b>\n            </div>\n            <div className=\"row\" style={{ paddingTop: \"8px\", display: 'flex' }}>\n              <label>Source Decorators Size</label>\n              <div>\n                <NumericTextBoxComponent id=\"sourceDecoratorSize\" enabled={true} format={\"###.##\"} value={12} step={1} max={20} min={10} change={sourceDecoratorSizeChange}/>\n              </div>\n            </div>\n            <div className=\"row\" style={{ paddingTop: \"8px\", display: 'flex' }}>\n              <label>Target Decorators Size</label>\n              <div>\n                <NumericTextBoxComponent id=\"targetDecoratorSize\" enabled={true} format={\"###.##\"} value={12} step={1} max={20} min={10} change={targetDecoratorSizeChange}/>\n              </div>\n            </div>\n            <div className=\"row\" style={{ paddingTop: \"8px\", display: 'flex' }}>\n              <label>Segment Decorators Size</label>\n              <div>\n                <NumericTextBoxComponent id=\"segmentDecoratorSize\" ref={segmentDecoratorSize => (segmentDecoratorSizeNumericTextBox = segmentDecoratorSize)} enabled={false} format={\"###.##\"} value={12} step={1} max={20} min={10} change={segmentDecoratorSizeChange}/>\n              </div>\n            </div>\n        </div>\n        <div className=\"row property-panel-content\" style={{ paddingTop: \"8px\" }}>\n            <div className=\"row row-header\">\n              <b>Appearance</b>\n            </div>\n            <div className=\"row\" style={{ paddingTop: \"10px\", display: 'flex' }}>\n            <label>Line Color</label>\n            <ColorPickerComponent id=\"color\" mode=\"Palette\" showButtons={false} modeSwitcher={true} value=\"#6F409F\" change={(args) => {\n            for (let i = 0; i < diagramInstance.connectors.length; i++) {\n                diagramInstance.connectors[i].style.strokeColor = args.currentValue.hex;\n                diagramInstance.connectors[i].targetDecorator.style.strokeColor = args.currentValue.hex;\n                diagramInstance.connectors[i].targetDecorator.style.fill = args.currentValue.hex;\n                diagramInstance.connectors[i].sourceDecorator.style.strokeColor = args.currentValue.hex;\n                diagramInstance.connectors[i].sourceDecorator.style.fill = args.currentValue.hex;\n            }\n            diagramInstance.dataBind();\n        }}/>\n            </div>\n        </div>\n      </div>\n    </div>);\n}\nexport default Connectors;\n\nconst root = createRoot(document.getElementById('sample'));\nroot.render(<Connectors />);","dependencies":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-react-base\":\"*\",\"@syncfusion/ej2-diagrams\":\"*\",\"@syncfusion/ej2-react-diagrams\":\"*\",\"@syncfusion/ej2-dropdowns\":\"*\",\"@syncfusion/ej2-react-dropdowns\":\"*\",\"@syncfusion/ej2-inputs\":\"*\",\"@syncfusion/ej2-react-inputs\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-react-buttons\":\"*\",\"@syncfusion/ej2-react-charts\":\"*\",\"@syncfusion/ej2/base\":\"*\",\"@syncfusion/ej2-charts'; // Import the necessary types from Syncfusion\":\"*\"}"}