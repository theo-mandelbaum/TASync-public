{"index.css":"/* css */","index.html":"<!DOCTYPE html>\n<html>\n<head>\n    <title>Syncfusion React Sample</title>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\n    <meta name=\"author\" content=\"Syncfusion\" />\n    <link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\n</head>\n\n<body class=\"{{theme}}\">\n     <style>\n            .control-section\n            {\n                margin-top: 100px;\n            }\n    </style>\n    <div id='sample'>\n</body>\n</html>\n","index.js":"import { createRoot } from 'react-dom/client';\nimport './index.css';\n// Import necessary React and Syncfusion components\nimport * as React from \"react\";\nimport { DiagramComponent, Node, Diagram, ConnectorConstraints, SnapConstraints, SelectorConstraints, PortConstraints, PortVisibility, ConnectorEditing, DiagramContextMenu, Inject, Snapping, UndoRedo, } from '@syncfusion/ej2-react-diagrams';\n\nimport { RadioButtonComponent, CheckBoxComponent, } from '@syncfusion/ej2-react-buttons';\nimport { NumericTextBoxComponent, ColorPickerComponent, } from '@syncfusion/ej2-react-inputs';\n// Inject necessary diagram modules for snapping and editing features\nDiagram.Inject(Snapping, ConnectorEditing);\nDiagram.Inject(UndoRedo);\n// Declaration of global variables for diagram instance and UI components\nlet diagramInstance;\nlet checkboxObj;\nlet snapToObj;\nlet drawingNode;\nlet fontSize;\nlet fontColor;\nlet fontSize1;\n// Creates a node with specified parameters and returns the NodeModel\nfunction createNode(id, offsetX, offsetY, content, width = 100, height = 100, ports = []) {\n    return {\n        id: `node_${id}`,\n        width,\n        height,\n        offsetX,\n        offsetY,\n        ports: ports.map(port => ({\n            ...port,\n            visibility: PortVisibility.Visible,\n            style: { fill: 'black' },\n            constraints: PortConstraints.Default | PortConstraints.Draw,\n        })),\n        annotations: [{\n                content,\n                offset: { x: 0.5, y: 1.2 },\n                style: { bold: true },\n            }],\n    };\n}\n// Initializes the nodes to be used in the diagram\nlet nodes = [\n    createNode('1', 350, 250, 'Shape 1', 100, 100, [\n        { id: 'port1', offset: { x: 0.5, y: 0.5 } }\n    ]),\n    createNode('2', 650, 250, 'Shape 2', 100, 100, [\n        { id: 'port11', offset: { x: 0.5, y: 0.5 } },\n        { id: 'port2', offset: { x: 0, y: 0.5 }, height: 100, width: 7 }\n    ]),\n    createNode('3', 500, 400, 'Shape 3'),\n];\n// Initializes the connectors to be used in the diagram\nlet connectors = [\n    {\n        id: 'connector_1',\n        sourceID: 'node_1',\n        targetID: 'node_3',\n        type: 'Orthogonal',\n    },\n];\n// Defines custom user handles for interaction\nlet handles = [\n    {\n        name: 'Clone',\n        pathData: 'M0,2.4879999 L0.986,2.4879999 0.986,9.0139999 6.9950027,9.0139999 6.9950027,10 0.986,10 C0.70400238,10 0.47000122,9.9060001 0.28100207,9.7180004 0.09400177,9.5300007 0,9.2959995 0,9.0139999 z M3.0050011,0 L9.0140038,0 C9.2960014,0 9.5300026,0.093999863 9.7190018,0.28199956 9.906002,0.47000027 10,0.70399952 10,0.986 L10,6.9949989 C10,7.2770004 9.906002,7.5160007 9.7190018,7.7110004 9.5300026,7.9069996 9.2960014,8.0049992 9.0140038,8.0049992 L3.0050011,8.0049992 C2.7070007,8.0049992 2.4650002,7.9069996 2.2770004,7.7110004 2.0890007,7.5160007 1.9950027,7.2770004 1.9950027,6.9949989 L1.9950027,0.986 C1.9950027,0.70399952 2.0890007,0.47000027 2.2770004,0.28199956 2.4650002,0.093999863 2.7070007,0 3.0050011,0 z',\n        visible: true,\n        offset: 1,\n        side: 'Bottom',\n        margin: { top: 0, bottom: 0, left: 0, right: 0 },\n    },\n    {\n        name: 'Delete',\n        pathData: 'M0.54700077,2.2130003 L7.2129992,2.2130003 7.2129992,8.8800011 C7.2129992,9.1920013 7.1049975,9.4570007 6.8879985,9.6739998 6.6709994,9.8910007 6.406,10 6.0939997,10 L1.6659999,10 C1.3539997,10 1.0890004,9.8910007 0.87200136,9.6739998 0.65500242,9.4570007 0.54700071,9.1920013 0.54700077,8.8800011 z M2.4999992,0 L5.2600006,0 5.8329986,0.54600048 7.7599996,0.54600048 7.7599996,1.6660004 0,1.6660004 0,0.54600048 1.9270014,0.54600048 z',\n        visible: true,\n        offset: 0,\n        side: 'Bottom',\n        margin: { top: 0, bottom: 0, left: 0, right: 0 },\n    },\n    {\n        name: 'Draw',\n        pathData: 'M3.9730001,0 L8.9730001,5.0000007 3.9730001,10.000001 3.9730001,7.0090005 0,7.0090005 0,2.9910006 3.9730001,2.9910006 z',\n        visible: true,\n        offset: 0.5,\n        side: 'Right',\n        margin: { top: 0, bottom: 0, left: 0, right: 0 },\n    },\n];\n// CSS styles for the property panel and diagram components\nconst sample_css = `\n  .row {\n    margin-left: 0px;\n    margin-right: 0px;\n  }\n    .db-prop-text-style {\n      font-size: 13px;\n      font-weight: normal;\n      font-family: 'Calibri';\n      margin-top: 25px;\n    }\n    .radio-text-style {\n      font-size: 13px;\n      font-weight: normal;\n      font-family: 'Calibri';\n      margin-top: 10px;\n    }\n    .text-content {\n      margin-left: 10px;\n    }\n    #properties_Container {\n      width: 300px;\n      float: left;\n      height: 600px;\n      margin-top: 30px;\n    }\n  .row-header {\n    font-size: 15px;\n    font-weight: 500;\n  }\n  .property-section .e-remove-selection {\n    cursor: not-allowed;\n  }\n  .property-panel-header {\n    padding-top: 15px;\n    padding-bottom: 15px;\n  }`;\n// Function for SnappingSample component\nfunction SnappingSample() {\n    // Adjusts the scale of the diagram's gridlines based on the selected snapping interval.\n    function adjustGridlineScale() {\n        diagramInstance.snapSettings.horizontalGridlines.scaledIntervals[0] =\n            fontSize.value;\n        diagramInstance.snapSettings.verticalGridlines.scaledIntervals[0] =\n            fontSize.value;\n        diagramInstance.dataBind();\n    }\n    // Handle the snap constraints by checking whether the checkbox are checked or not\n    function checkbox() {\n        diagramInstance.snapSettings.constraints = SnapConstraints.All;\n        if (!checkboxObj.checked) {\n            diagramInstance.snapSettings.constraints &= ~SnapConstraints.ShowLines;\n        }\n        if (!snapToObj.checked) {\n            diagramInstance.snapSettings.constraints &= ~SnapConstraints.SnapToObject;\n        }\n    }\n    // Handles changes in snapping options based on user input.\n    function handleSnapToLinesChange(args) {\n        checkbox();\n        switch (args.value) {\n            case 'Snap To Gridlines':\n                // Enable SnapToLines constraint and adjust based on checkbox states\n                diagramInstance.snapSettings.constraints |= SnapConstraints.SnapToLines;\n                break;\n            case 'Snap To Horizontal Gridlines':\n                // Toggle SnapToHorizontalLines constraint\n                diagramInstance.snapSettings.constraints ^=\n                    SnapConstraints.SnapToVerticalLines;\n                break;\n            case 'Snap To Vertical Gridlines':\n                // Toggle SnapToVerticalLines constraint\n                diagramInstance.snapSettings.constraints ^=\n                    SnapConstraints.SnapToHorizontalLines;\n                break;\n            case 'None':\n                // Disable all snap to line constraints\n                diagramInstance.snapSettings.constraints &=\n                    ~(SnapConstraints.SnapToHorizontalLines |\n                        SnapConstraints.SnapToVerticalLines |\n                        SnapConstraints.SnapToLines);\n                break;\n        }\n        diagramInstance.dataBind();\n        adjustGridlineScale();\n    }\n    return (<div className=\"control-pane diagram-control-pane\">\n            <style>{sample_css}</style>\n            <div className=\"col-lg-8 control-section\">\n                <div className=\"content-wrapper\" style={{ width: '100%' }}>\n                    {/* Initializes and renders diagram control */}\n                    <DiagramComponent id=\"diagram\" ref={(diagram) => (diagramInstance = diagram)} width={'100%'} height={'645px'} nodes={nodes} drawingObject={{ type: 'Orthogonal' }} connectors={connectors} selectedItems={{\n            constraints: SelectorConstraints.UserHandle,\n            userHandles: handles,\n        }} \n    // Enables infinite scrolling for the diagram.\n    scrollSettings={{\n            scrollLimit: 'Infinity',\n        }} contextMenuSettings={{\n            show: true,\n        }} \n    // Initializes the diagram with specific settings when created.\n    created={() => {\n            diagramInstance.fitToPage({ mode: 'Width' });\n        }} \n    // Sets default styles for nodes.\n    getNodeDefaults={(node) => {\n            node.style = { fill: 'orange', strokeColor: 'orange' };\n            return node;\n        }} \n    // Sets default constraints for connectors.\n    getConnectorDefaults={(connector) => {\n            connector.constraints =\n                ConnectorConstraints.Default |\n                    ConnectorConstraints.DragSegmentThumb;\n            return connector;\n        }} \n    // Handles rotation changes for diagram elements.\n    rotateChange={(args) => {\n            if (args.state === 'Start' || args.state === 'Progress') {\n                diagramInstance.selectedItems = {\n                    constraints: SelectorConstraints.All & ~SelectorConstraints.UserHandle,\n                };\n            }\n            else if (args.state === 'Completed') {\n                diagramInstance.selectedItems = {\n                    constraints: SelectorConstraints.All | SelectorConstraints.UserHandle,\n                    userHandles: handles,\n                };\n            }\n        }} \n    // Defines custom actions for user handles.\n    onUserHandleMouseDown={(args) => {\n            switch (args.element.name) {\n                case 'Delete':\n                    diagramInstance.remove();\n                    break;\n                case 'Clone':\n                    diagramInstance.paste(diagramInstance.selectedItems.selectedObjects);\n                    break;\n                case 'Draw':\n                    diagramInstance.drawingObject.shape = {};\n                    diagramInstance.drawingObject.type = diagramInstance.drawingObject.type || 'Orthogonal';\n                    diagramInstance.drawingObject.sourceID = drawingNode.id;\n                    diagramInstance.dataBind();\n                    break;\n            }\n        }} \n    // Manages selection changes within the diagram.\n    selectionChange={(args) => {\n            if (args.state === 'Changed') {\n                let selectedNodes = diagramInstance.selectedItems.nodes;\n                let selectedConnectors = diagramInstance.selectedItems.connectors;\n                let selectedItems = [...selectedNodes, ...selectedConnectors];\n                if (selectedItems.length > 0) {\n                    if (args.newValue.length > 0 && args.newValue[0] instanceof Node) {\n                        diagramInstance.selectedItems = {\n                            constraints: SelectorConstraints.All | SelectorConstraints.UserHandle,\n                            userHandles: handles,\n                        };\n                        if (selectedNodes.length > 0) {\n                            drawingNode = selectedNodes[selectedNodes.length - 1];\n                        }\n                    }\n                    else {\n                        diagramInstance.selectedItems = {\n                            constraints: SelectorConstraints.All & ~SelectorConstraints.UserHandle,\n                        };\n                    }\n                }\n            }\n        }} snapSettings={{ snapAngle: 5 }}>\n                        <Inject services={[DiagramContextMenu, UndoRedo, Snapping]}/>\n                    </DiagramComponent>\n                </div>\n            </div>\n\n            <div className=\"col-lg-4 property-section\">\n                <div id=\"properties_Container\">\n                    <div className=\"property-panel-header\"> Properties </div>\n                    <div className=\"db-prop-row\">\n                        <div className=\"db-prop-text-style\">\n                            <span className=\"db-prop-text-style text-content\">\n                                Snapping Interval\n                            </span>\n                            <div className=\"db-text-input\" style={{ float: 'right', marginRight: '10px' }}>\n                                <NumericTextBoxComponent id=\"snappingInterval\" width={150} value={20} min={1} step={1} format=\"n0\" \n    // Sets the snapping interval\n    change={(args) => {\n            diagramInstance.snapSettings.horizontalGridlines.snapIntervals[0] =\n                args.value;\n            diagramInstance.snapSettings.verticalGridlines.snapIntervals[0] =\n                args.value;\n            diagramInstance.snapSettings.horizontalGridlines.scaledIntervals[0] =\n                args.value;\n            diagramInstance.snapSettings.verticalGridlines.scaledIntervals[0] =\n                args.value;\n            diagramInstance.dataBind();\n        }} ref={(fontsize) => (fontSize = fontsize)}/>\n                            </div>\n                        </div>\n                        <div className=\"db-prop-text-style\">\n                            <span className=\"db-prop-text-style text-content\">\n                                Snapping Angle\n                            </span>\n                            <div className=\"db-text-input\" style={{ float: 'right', marginRight: '10px' }}>\n                                <NumericTextBoxComponent id=\"snappingAngle\" width={150} value={5} min={1} step={1} format=\"n0\" \n    // Sets the snapping angle\n    change={(args) => {\n            diagramInstance.snapSettings.snapAngle = args.value;\n            diagramInstance.dataBind();\n        }} ref={(fontsize) => (fontSize1 = fontsize)}/>\n                            </div>\n                        </div>\n                        <div className=\"db-prop-text-style\">\n                            <span className=\"db-prop-text-style text-content\">\n                                Snapping Line Color\n                            </span>\n                            <div className=\"db-text-input\" style={{ float: 'right', marginRight: '10px' }}>\n                                <ColorPickerComponent id=\"snappingLineColor\" value=\"#07EDE1\" mode=\"Palette\" showButtons={false} \n    // Change the color of the snap lines\n    change={(args) => {\n            diagramInstance.snapSettings.snapLineColor = args.value;\n            diagramInstance.dataBind();\n        }} ref={(fontcolor) => (fontColor = fontcolor)}/>\n                            </div>\n                        </div>\n                        <div className=\"db-prop-text-style\">\n                            <div className=\"row\" style={{ marginLeft: '10px' }}>\n                                <CheckBoxComponent id=\"showGridlines\" label={'Show Gridline'} checked={true} \n    // Toggle the visibility of grid lines\n    change={() => {\n            diagramInstance.snapSettings.constraints =\n                diagramInstance.snapSettings.constraints ^\n                    SnapConstraints.ShowLines;\n            diagramInstance.dataBind();\n            adjustGridlineScale();\n        }} ref={(scope) => { checkboxObj = scope; }}/>\n                            </div>\n                        </div>\n                        <div className=\"db-prop-text-style\" style={{ marginTop: '7px' }}>\n                            <div className=\"row\" style={{ marginLeft: '10px' }}>\n                                <CheckBoxComponent id=\"snapToObject\" label={'Snapping To Objects'} checked={true} \n    // Toggle the snapping to objects\n    change={() => {\n            diagramInstance.snapSettings.constraints =\n                diagramInstance.snapSettings.constraints ^\n                    SnapConstraints.SnapToObject;\n            diagramInstance.dataBind();\n            adjustGridlineScale();\n        }} ref={(scope) => { snapToObj = scope; }}/>\n                            </div>\n                        </div>\n\n                        <div className=\"db-prop-text-style\">\n                            <div className=\"db-prop-text-style text-content\" style={{ fontWeight: 'bold' }}>\n                                Snapping To Lines\n                            </div>\n                        </div>\n\n                        <div className=\"row radio-text-style\" style={{ marginLeft: '7px' }}>\n                            <div>\n                                <RadioButtonComponent id=\"radio1\" name=\"snapToLines\" checked={true} value=\"Snap To Gridlines\" label=\"Snap To Gridlines\" change={(args) => {\n            handleSnapToLinesChange(args);\n        }}/>\n                            </div>\n                        </div>\n                        <div className=\"row radio-text-style\" style={{ marginLeft: '7px' }}>\n                            <div>\n                                <RadioButtonComponent id=\"radio2\" name=\"snapToLines\" value=\"Snap To Horizontal Gridlines\" label=\"Snap To Horizontal Gridlines\" change={(args) => {\n            handleSnapToLinesChange(args);\n        }}/>\n                            </div>\n                        </div>\n                        <div className=\"row radio-text-style\" style={{ marginLeft: '7px' }}>\n                            <div>\n                                <RadioButtonComponent id=\"radio3\" name=\"snapToLines\" value=\"Snap To Vertical Gridlines\" label=\"Snap To Vertical Gridlines\" change={(args) => {\n            handleSnapToLinesChange(args);\n        }}/>\n                            </div>\n                        </div>\n                        <div className=\"row radio-text-style\" style={{ marginLeft: '7px' }}>\n                            <div>\n                                <RadioButtonComponent id=\"radio4\" name=\"snapToLines\" value=\"None\" label=\"None\" change={(args) => {\n            handleSnapToLinesChange(args);\n        }}/>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>);\n}\nexport default SnappingSample;\n\nconst root = createRoot(document.getElementById('sample'));\nroot.render(<SnappingSample />);","dependencies":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-react-base\":\"*\",\"@syncfusion/ej2-diagrams\":\"*\",\"@syncfusion/ej2-react-diagrams\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-react-buttons\":\"*\",\"@syncfusion/ej2-inputs\":\"*\",\"@syncfusion/ej2-react-inputs\":\"*\",\"@syncfusion/ej2-react-charts\":\"*\",\"@syncfusion/ej2/base\":\"*\",\"@syncfusion/ej2-charts'; // Import the necessary types from Syncfusion\":\"*\",\"@syncfusion/ej2-lists\":\"*\"}"}