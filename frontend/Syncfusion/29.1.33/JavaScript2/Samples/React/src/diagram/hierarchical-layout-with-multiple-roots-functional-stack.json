{"index.css":"/* css */","index.html":"<!DOCTYPE html>\n<html>\n<head>\n    <title>Syncfusion React Sample</title>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\n    <meta name=\"author\" content=\"Syncfusion\" />\n    <link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\n</head>\n\n<body class=\"{{theme}}\">\n     <style>\n            .control-section\n            {\n                margin-top: 100px;\n            }\n    </style>\n    <div id='sample'>\n</body>\n</html>\n","index.js":"import { createRoot } from 'react-dom/client';\nimport './index.css';\nimport * as React from \"react\";\nimport { HierarchicalTree, DataBinding, DiagramComponent, SnapConstraints, Inject, DiagramTools } from \"@syncfusion/ej2-react-diagrams\";\n\nimport { DataManager } from \"@syncfusion/ej2-data\";\nimport { Query } from \"@syncfusion/ej2-data\";\nlet diagramInstance;\n//Initialize dataSource for diagram\nlet data = [\n    { id: 1, Label: 'Production Manager', color: '#1c5b9b' },\n    { id: 2, Label: 'Control Room', parentId: 1, color: '#18c1be' },\n    { id: 3, Label: 'Plant Operator', parentId: 1, color: '#18c1be' },\n    { id: 4, Label: 'Foreman', parentId: 2, color: '#17a573' },\n    { id: 5, Label: 'Foreman', parentId: 3, color: '#17a573' },\n    { id: 6, Label: 'Craft Personnel', parentId: 4, color: '#73bb34' },\n    { id: 7, Label: 'Craft Personnel', parentId: 4, color: '#73bb34' },\n    { id: 8, Label: 'Craft Personnel', parentId: 5, color: '#73bb34' },\n    { id: 9, Label: 'Craft Personnel', parentId: 5, color: '#73bb34' },\n    { id: 10, Label: 'Administrative Officer', color: '#1c5b9b' },\n    { id: 11, Label: 'Security Supervisor', parentId: 10, color: '#18c1be' },\n    { id: 12, Label: 'HR Supervisor', parentId: 10, color: '#18c1be' },\n    { id: 13, Label: 'Reception Supervisor', parentId: 10, color: '#18c1be' },\n    { id: 14, Label: 'Securities', parentId: 11, color: '#17a573' },\n    { id: 15, Label: 'HR Officer', parentId: 12, color: '#17a573' },\n    { id: 16, Label: 'Receptionist', parentId: 13, color: '#17a573' },\n    { id: 17, Label: 'Maintainence Manager', color: '#1c5b9b' },\n    { id: 18, Label: 'Electrical Supervisor', parentId: 17, color: '#18c1be' },\n    { id: 19, Label: 'Mechanical Supervisor', parentId: 17, color: '#18c1be' },\n    { id: 20, Label: 'Craft Personnel', parentId: 18, color: '#17a573' },\n    { id: 21, Label: 'Craft Personnel', parentId: 19, color: '#17a573' },\n];\nlet items = new DataManager(data, new Query().take(7));\nfunction HierarchicalLayoutWithMultipleRoots() {\n    //sets node default value\n    function nodeDefaults(obj) {\n        obj.style.fill = obj.data.color;\n        obj.backgroundColor = obj.data.color;\n        obj.style.color = 'white';\n        obj.style.strokeWidth = 2;\n        obj.width = 75;\n        obj.height = 35;\n        obj.shape.margin = { left: 5, right: 5, bottom: 5, top: 5 };\n        return obj;\n    }\n    //sets connector default value\n    function connectorDefaults(connector) {\n        connector.style = { strokeColor: 'CornflowerBlue' };\n        connector.targetDecorator = { shape: 'Arrow', height: 10, width: 10, style: { fill: 'CornflowerBlue', strokeColor: 'white' } };\n        connector.type = \"Orthogonal\";\n        return connector;\n    }\n    return (<div className=\"control-pane diagram-control-pane\">\n            <div className=\"content-wrapper\" style={{ width: \"100%\" }}>\n            <DiagramComponent id=\"diagram\" ref={diagram => (diagramInstance = diagram)} width={\"100%\"} height={\"499px\"} snapSettings={{ constraints: SnapConstraints.None }} \n    //configures data source settings\n    dataSourceSettings={{\n            //sets the fields to bind\n            id: \"id\",\n            parentId: \"parentId\",\n            dataSource: items,\n            doBinding: (nodeModel, data) => {\n                nodeModel.shape = {\n                    type: \"Text\",\n                    content: data.Label\n                };\n            }\n        }} //Disables all interactions except zoom and pan\n     tool={DiagramTools.ZoomPan} //Configures automatic layout\n     layout={{\n            type: \"HierarchicalTree\",\n            verticalSpacing: 30,\n            horizontalSpacing: 40\n        }} //Defines the default node and connector properties\n     getNodeDefaults={(obj) => {\n            return nodeDefaults(obj);\n        }} getConnectorDefaults={(connector) => {\n            return connectorDefaults(connector);\n        }}>\n                <Inject services={[DataBinding, HierarchicalTree]}/>\n            </DiagramComponent>\n                </div>\n    </div>);\n}\nexport default HierarchicalLayoutWithMultipleRoots;\n\nconst root = createRoot(document.getElementById('sample'));\nroot.render(<HierarchicalLayoutWithMultipleRoots />);","dependencies":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-react-base\":\"*\",\"@syncfusion/ej2-diagrams\":\"*\",\"@syncfusion/ej2-react-diagrams\":\"*\",\"@syncfusion/ej2-data\":\"*\",\"@syncfusion/ej2-react-charts\":\"*\",\"@syncfusion/ej2/base\":\"*\",\"@syncfusion/ej2-charts'; // Import the necessary types from Syncfusion\":\"*\",\"@syncfusion/ej2-lists\":\"*\"}"}