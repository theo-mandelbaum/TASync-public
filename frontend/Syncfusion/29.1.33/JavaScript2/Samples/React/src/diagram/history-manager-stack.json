{"index.css":"/* css */","index.html":"<!DOCTYPE html>\n<html>\n<head>\n    <title>Syncfusion React Sample</title>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\n    <meta name=\"author\" content=\"Syncfusion\" />\n    <link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\n</head>\n\n<body class=\"{{theme}}\">\n     <style>\n            .control-section\n            {\n                margin-top: 100px;\n            }\n    </style>\n    <div id='sample'>\n</body>\n</html>\n","index.js":"import { createRoot } from 'react-dom/client';\nimport './index.css';\nimport * as React from \"react\";\nimport { DiagramComponent, Inject, UndoRedo, SnapConstraints } from \"@syncfusion/ej2-react-diagrams\";\nimport { SampleBase } from './sample-base';\nimport { ButtonComponent } from \"@syncfusion/ej2-react-buttons\";\nimport { NumericTextBoxComponent } from \"@syncfusion/ej2-react-inputs\";\nimport { ListViewComponent } from \"@syncfusion/ej2-react-lists\";\n// CSS for the history property section\nlet SAMPLE_CSS = `#historyPropertySection .row {\n            margin-left: 0px;\n            margin-right: 0px;\n        }\n        #historyControlSection.content-wrapper {\n            border: 1px solid #D7D7D7;\n        }\n\n        #historyPropertySection .listbox {\n            width: 100%;\n            height: 50%;\n        }\n\n        #historyPropertySection .property-panel-content div:not(.heading) {\n         padding: 0px;\n        }\n\n        #historyPropertySection .heading {\n            color: #4e4949;\n            font-size: 15px;\n            height: 50px;\n            width: 100%;\n            border-bottom: 1px solid #d9dedd;\n            padding: 10px;\n        }`;\n// Helper function to create a NodeModel with default parameters\nfunction createNode(id, offsetX, offsetY, fill, strokeColor, shape, content, width = 70, height = 40, ports = []) {\n    return {\n        id,\n        offsetX,\n        offsetY,\n        style: { fill, strokeColor },\n        width,\n        height,\n        shape: { type: 'Flow', shape: shape },\n        annotations: [{ content }],\n        ports\n    };\n}\n// Initialize Diagram Nodes using the createNode function\nlet nodes = [\n    createNode('node1', 400, 30, '#FFB2B2', '#FFB2B2', 'Terminator', 'Start'),\n    createNode('node2', 400, 100, '#DCDCDC', '#DCDCDC', 'Process', 'Design', undefined, undefined, [{ id: 'designPort', offset: { x: 0, y: 0.5 } }]),\n    createNode('node3', 400, 180, '#DCDCDC', '#DCDCDC', 'Process', 'Coding', undefined, undefined, [{ id: 'codingPort', offset: { x: 0, y: 0.5 } }]),\n    createNode('node4', 400, 260, '#DCDCDC', '#DCDCDC', 'Process', 'Testing'),\n    createNode('node5', 400, 340, '#A2D8B0', '#A2D8B0', 'Decision', 'Errors?', 80, 60),\n    createNode('node6', 400, 430, '#FFB2B2', '#FFB2B2', 'Terminator', 'End'),\n    createNode('node7', 220, 180, '#A2D8B0', '#A2D8B0', 'Decision', 'Design Error?', 100, 60, [\n        { id: 'porterror', offset: { x: 0.5, y: 0 } },\n        { id: 'portcoding', offset: { x: 1, y: 0.5 } },\n        { id: 'portdesign', offset: { x: 0.5, y: 1 } }\n    ])\n];\n// Helper function to create a ConnectorModel with default parameters\nfunction createConnector(id, sourceID, targetID, annotations, segments = [], sourcePortID = '', targetPortID = '') {\n    return {\n        id,\n        sourceID,\n        targetID,\n        annotations,\n        type: 'Orthogonal',\n        segments,\n        sourcePortID,\n        targetPortID\n    };\n}\n// Common labels for connectors\nlet noLabel = [{ content: 'No', style: { fill: 'white' } }];\nlet yesLabel = [{ content: 'Yes', style: { fill: 'white' } }];\n// Initialize Diagram Connectors using the createConnector function\nlet connectors = [\n    createConnector('connector1', 'node1', 'node2', []),\n    createConnector('connector2', 'node2', 'node3', []),\n    createConnector('connector3', 'node3', 'node4', []),\n    createConnector('connector4', 'node4', 'node5', []),\n    createConnector('connector5', 'node5', 'node6', noLabel),\n    createConnector('connector6', 'node5', 'node7', yesLabel, [{ type: 'Orthogonal', length: 150, direction: 'Left' }]),\n    createConnector('connector7', 'node7', 'node3', noLabel, [{ type: 'Orthogonal', length: 10, direction: 'Left' }], 'portcoding', 'codingPort'),\n    createConnector('connector8', 'node7', 'node2', yesLabel, [], 'porterror', 'designPort')\n];\n// Declare variables for components and diagram instance\nlet diagramInstance;\nlet clearHistory;\nlet startActionInstance;\nlet endGroupAction;\nlet redoListInstance;\nlet undoListInstance;\nlet undoInstance;\nlet redoInstance;\n// Define the React component for managing diagram history\nexport class HistoryManager extends SampleBase {\n    // Method called after rendering completes to fit diagram to page and setup event listeners\n    rendereComplete() {\n        diagramInstance.fitToPage({ mode: 'Height' });\n        // Simplify event listener assignments\n        const eventListeners = {\n            \"undo\": () => diagramInstance.undo(),\n            \"redo\": () => diagramInstance.redo(),\n            \"StackLimit\": (args) => diagramInstance.setStackLimit(args.currentTarget.value),\n            \"startGroupAction\": () => toggleGroupAction(),\n            \"clearHistory\": () => {\n                diagramInstance.clearHistory();\n                updateHistoryLists();\n            }\n        };\n        Object.keys(eventListeners).forEach(id => {\n            document.getElementById(id).onclick = eventListeners[id];\n        });\n    }\n    // Method to render the component UI\n    render() {\n        return (<div className=\"control-pane1\">\n                <div className=\"col-lg-8 control-section\">\n                    <div id=\"historyControlSection\" className=\"content-wrapper\" style={{ width: \"100%\" }}>\n                        <style>{SAMPLE_CSS}</style>\n                        <DiagramComponent id=\"diagram\" ref={diagram => (diagramInstance = diagram)} width={\"100%\"} height={\"600px\"} snapSettings={{ constraints: SnapConstraints.None }} nodes={nodes} connectors={connectors} getConnectorDefaults={getConnectorDefaults} historyChange={(arg) => {\n                updateHistoryLists();\n            }} getNodeDefaults={(obj) => {\n                obj.annotations[0].style.color = '#717171';\n                return obj;\n            }}>\n                            <Inject services={[UndoRedo]}/>\n                        </DiagramComponent>\n                    </div>\n                </div>\n                <div id=\"historyPropertySection\" className=\"col-lg-4 property-section\" style={{ paddingRight: \"0px\" }}>\n                    <div className=\"property-panel-header\">\n                        History manager settings\n                    </div>\n                    <div className=\"row property-panel-content\" id=\"appearance\">\n                        <div className=\"row property-panel-content\">\n                            <div className=\"row\">\n                                <div className=\"listbox\" style={{ height: \"100%\", border: \"1px solid #e0e0e0\" }}>\n                                    <div className=\"heading\" style={{ height: \"40px\" }}>\n                                        <span>Undo Stack</span>\n                                        <div style={{ float: \"right\", marginTop: \"-5px\" }}>\n                                            <ButtonComponent id=\"undo\" style={{ width: \"100%\" }} disabled={true} ref={undoBtn => (undoInstance = undoBtn)}>\n                                                Undo\n                                            </ButtonComponent>\n                                        </div>\n                                    </div>\n                                    <div id='undoList'></div>\n                                    <ListViewComponent id='undoList' height={'180px'} ref={undoList => (undoListInstance = undoList)}/>\n                                </div>\n                            </div>\n                            <div className=\"row\" style={{ paddingTop: \"8px\" }}>\n                                <div className=\"listbox\" style={{ height: \"100%\", border: \"1px solid #e0e0e0\" }}>\n                                    <div className=\"heading\" style={{ height: \"40px\" }}>\n                                        <span>Redo Stack</span>\n                                        <div style={{ float: \"right\", marginTop: \"-5px\" }}>\n                                            <ButtonComponent id=\"redo\" style={{ width: \"100%\" }} disabled={true} ref={redoBtn => (redoInstance = redoBtn)}>\n                                                Redo\n                                            </ButtonComponent>\n                                        </div>\n                                    </div>\n                                    <ListViewComponent id='redoList' height={'180px'} ref={redoList => (redoListInstance = redoList)}/>\n                                </div>\n                            </div>\n                            <div className=\"row\" style={{ paddingTop: \"10px\" }}>\n                                <div style={{ display: \"table\", height: \"35px\", paddingLeft: \"0px\" }} className=\"col-xs-6\">\n                                    <div style={{ display: \"table-cell\", verticalAlign: \"middle\" }}>Stack Limit</div>\n                                </div>\n                                <div className=\"col-xs-6\" style={{ paddingLeft: \"0px\", paddingRight: \"0px\" }}>\n                                    <NumericTextBoxComponent id=\"StackLimit\" value={0} min={0} max={50} width='100%' format='##.##' step={1} onChange={handleStackLimitChange}/>\n                                </div>\n                            </div>\n                            <div className=\"row\" style={{ paddingTop: \"10px\" }}>\n                                <div className=\"col-xs-6\" style={{ paddingLeft: \"0px\" }}>\n                                    <ButtonComponent ref={startGroupActionBtn => (startActionInstance = startGroupActionBtn)} id=\"startGroupAction\" title='startGroupAction' style={{ width: \"100%\", overflow: \"hidden\", textOverflow: \"ellipsis\" }} isToggle={true}>\n                                        Start Group Action\n                                    </ButtonComponent>\n                                </div>\n                                <div className=\"col-xs-6\" title='clearHistory' style={{ paddingLeft: \"0px\", paddingRight: \"0px\" }}>\n                                    <ButtonComponent id=\"clearHistory\" style={{ width: \"100%\" }}>\n                                        Clear History\n                                    </ButtonComponent>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>);\n    }\n}\n// Function to define default properties for connectors\nfunction getConnectorDefaults(connector) {\n    connector.type = 'Orthogonal';\n    connector.style.strokeColor = \"#717171\";\n    connector.sourceDecorator.style.strokeColor = \"#717171\";\n    connector.targetDecorator.style.strokeColor = \"#717171\";\n    connector.sourceDecorator.style.fill = \"#717171\";\n    connector.targetDecorator.style.fill = \"#717171\";\n    return connector;\n}\n// Function to update lists and button states based on history\nfunction updateHistoryLists() {\n    // Simplify the process of creating data sources for undo and redo lists\n    const createDataSource = (stack) => stack.map(entry => ({ 'text': entry.type, 'value': entry.type }));\n    const undoDataSource = createDataSource(diagramInstance.historyManager.undoStack);\n    const redoDataSource = createDataSource(diagramInstance.historyManager.redoStack);\n    undoListInstance.dataSource = undoDataSource;\n    undoListInstance.fields = { text: 'text', value: 'text' };\n    undoListInstance.index = 0;\n    undoListInstance.dataBind();\n    undoInstance.disabled = !undoDataSource.length;\n    redoListInstance.dataSource = redoDataSource;\n    redoListInstance.fields = { text: 'text', value: 'text' };\n    redoListInstance.index = 0;\n    redoListInstance.dataBind();\n    redoInstance.disabled = !redoDataSource.length;\n}\n// Toggle between starting and ending a group action\nfunction toggleGroupAction() {\n    if (startActionInstance.element.classList.contains('e-active')) {\n        startActionInstance.content = 'End Group Action';\n        diagramInstance.startGroupAction();\n    }\n    else {\n        diagramInstance.endGroupAction();\n        startActionInstance.content = 'Start Group Action';\n    }\n}\nconst handleStackLimitChange = (event) => {\n    const newValue = event.target.value;\n    diagramInstance.setStackLimit(newValue);\n};\n\nconst root = createRoot(document.getElementById('sample'));\nroot.render(<HistoryManager />);","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n                this.rendereComplete();\n            });\n        }\n    }\n    export function updateSampleSection(){}\n    ","dependencies":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-react-base\":\"*\",\"@syncfusion/ej2-diagrams\":\"*\",\"@syncfusion/ej2-react-diagrams\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-react-buttons\":\"*\",\"@syncfusion/ej2-inputs\":\"*\",\"@syncfusion/ej2-react-inputs\":\"*\",\"@syncfusion/ej2-lists\":\"*\",\"@syncfusion/ej2-react-lists\":\"*\",\"@syncfusion/ej2-react-charts\":\"*\",\"@syncfusion/ej2/base\":\"*\",\"@syncfusion/ej2-charts'; // Import the necessary types from Syncfusion\":\"*\"}"}