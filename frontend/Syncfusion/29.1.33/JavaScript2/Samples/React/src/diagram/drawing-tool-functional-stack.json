{"index.css":"/* css */","index.html":"<!DOCTYPE html>\n<html>\n<head>\n    <title>Syncfusion React Sample</title>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\n    <meta name=\"author\" content=\"Syncfusion\" />\n    <link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\n</head>\n\n<body class=\"{{theme}}\">\n     <style>\n            .control-section\n            {\n                margin-top: 100px;\n            }\n    </style>\n    <div id='sample'>\n</body>\n</html>\n","index.js":"import { createRoot } from 'react-dom/client';\nimport './index.css';\nimport * as React from \"react\";\nimport { DiagramComponent, SnapConstraints, DiagramTools, UndoRedo, Snapping, PortConstraints, PortVisibility, Inject, ConnectorEditing } from \"@syncfusion/ej2-react-diagrams\";\n\nimport { CheckBoxComponent } from \"@syncfusion/ej2-react-buttons\";\nlet node;\nlet diagramInstance;\nlet appearanceInstance;\nlet checkedInstance;\nlet interval = [\n    1,\n    9,\n    0.25,\n    9.75,\n    0.25,\n    9.75,\n    0.25,\n    9.75,\n    0.25,\n    9.75,\n    0.25,\n    9.75,\n    0.25,\n    9.75,\n    0.25,\n    9.75,\n    0.25,\n    9.75,\n    0.25,\n    9.75\n];\nlet gridlines = {\n    lineColor: \"#e0e0e0\",\n    lineIntervals: interval\n};\nlet snapSettings = {\n    snapObjectDistance: 5,\n    constraints: SnapConstraints.SnapToObject |\n        SnapConstraints.SnapToLines |\n        SnapConstraints.ShowLines,\n    horizontalGridlines: gridlines,\n    verticalGridlines: gridlines\n};\nconst SAMPLE_CSS = `\n/* For changing drawing shapes in property panel */\n.diagram-drawingTool .image-pattern-style {\n        background-color: white;\n        background-size: contain;\n        background-repeat: no-repeat;\n        height: 45px;\n        width: calc((100% - 12px) / 3);\n        cursor: pointer;\n        border: 1px solid #D5D5D5;\n        background-position: center;\n        float: left;\n    }\n\n   .diagram-drawingTool .image-pattern-style:hover {\n        border-color: gray;\n        border-width: 2px;\n    }\n\n    .diagram-drawingTool .row {\n        margin-left: 0px;\n        margin-right: 0px;\n    }\n\n    .diagram-drawingTool .row-header {\n        font-size: 12px;\n        font-weight: 500;\n    }\n\n    .diagram-drawingTool .e-checkbox-wrapper .e-label {\n        font-size: 12px;\n    }\n\n    .diagram-drawingTool .property-panel-header {\n        padding-top: 15px;\n        padding-bottom: 5px\n    }\n\n    .diagram-drawingTool .e-selected-style {\n        border-color: #006CE6;\n        border-width: 2px;\n    }\n\n    .diagram-drawingTool .control-section {\n        padding-top: 0px;\n        padding-bottom: 0px;\n        padding-right: 0px;\n    }\n\n `;\nfunction DrawingTools() {\n    React.useEffect(() => {\n        rendereComplete();\n    }, []);\n    function rendereComplete() {\n        // Default shape on load\n        SetShape(\"Rectangle\");\n        diagramInstance.tool = DiagramTools.ContinuousDraw;\n        diagramInstance.dataBind();\n        //Click Event used to decide the drawing object.\n        appearanceInstance.onclick = (args) => {\n            let target = args.target;\n            let selectedElement = document.getElementsByClassName(\"e-selected-style\");\n            if (selectedElement.length &&\n                target.id !== \"\" &&\n                target.id !== \"checked\") {\n                selectedElement[0].classList.remove(\"e-selected-style\");\n            }\n            if (!target.classList.contains(\"e-selected-style\")) {\n                target.classList.add(\"e-selected-style\");\n            }\n            if (target.className === \"image-pattern-style e-selected-style\") {\n                switch (target.id) {\n                    case \"shape1\":\n                        SetShape(\"Rectangle\");\n                        break;\n                    case \"shape2\":\n                        SetShape(\"Ellipse\");\n                        break;\n                    case \"shape3\":\n                        SetShape(\"Hexagon\");\n                        break;\n                    case \"shape4\":\n                        SetShape(\"Pentagon\");\n                        break;\n                    case \"shape5\":\n                        SetShape(\"Triangle\");\n                        break;\n                    case \"straight\":\n                        setdrawobject(null, { type: \"Straight\" });\n                        break;\n                    case \"ortho\":\n                        setdrawobject(null, { type: \"Orthogonal\" });\n                        break;\n                    case \"cubic\":\n                        setdrawobject(null, { type: \"Bezier\" });\n                        break;\n                    case \"freehand\":\n                        setdrawobject(null, { type: \"Freehand\" });\n                        break;\n                    case \"path\":\n                        getPathShape();\n                        target.classList.add(\"e-selected-style\");\n                        break;\n                    case \"image\":\n                        getImageNode();\n                        break;\n                    case \"svg\":\n                        getSVGNode();\n                        break;\n                    case \"text\":\n                        getTextNode();\n                        break;\n                    default:\n                        if (selectedElement.length &&\n                            target.id !== \"\" &&\n                            target.id !== \"checked\") {\n                            selectedElement[0].classList.remove(\"e-selected-style\");\n                        }\n                }\n            }\n        };\n    }\n    function onChange(args) {\n        diagramInstance.tool = args.checked\n            ? DiagramTools.ContinuousDraw\n            : DiagramTools.DrawOnce;\n    }\n    //Enable drawing object.\n    function setdrawobject(node, connector) {\n        if (!checkedInstance.checked) {\n            diagramInstance.tool = DiagramTools.DrawOnce;\n        }\n        if (connector == null) {\n            diagramInstance.drawingObject = node;\n        }\n        else {\n            diagramInstance.drawingObject = connector;\n        }\n        diagramInstance.dataBind();\n    }\n    //Enable drawing Tool.\n    function enableTool() {\n        if (!checkedInstance.checked) {\n            diagramInstance.tool = DiagramTools.DrawOnce;\n        }\n        diagramInstance.dataBind();\n    }\n    //Set the Shape of the drawing Object.\n    function SetShape(obj) {\n        let drawingshape;\n        drawingshape = { type: \"Basic\", shape: obj };\n        node = {\n            shape: drawingshape\n        };\n        diagramInstance.drawingObject = node;\n        enableTool();\n    }\n    //Set TextNode Shape.\n    function getTextNode() {\n        let drawingshape;\n        drawingshape = { type: \"Text\" };\n        node = {\n            shape: drawingshape\n        };\n        setdrawobject(node, null);\n    }\n    //Set SVG Node\n    function getSVGNode() {\n        // tslint:disable-next-line:max-line-length\n        let drawingshape;\n        drawingshape = {\n            type: \"Native\",\n            content: getPath()\n        };\n        node = {\n            shape: drawingshape\n        };\n        setdrawobject(node, null);\n    }\n    function getPath() {\n        let str = '<svg version=\"1.0\" xmlns=\"http://www.w3.org/2000/svg\" width=\"350.000000pt\" ' +\n            'height=\"229.000000pt\" viewBox=\"0 0 350.000000 229.000000\" ' +\n            'preserveAspectRatio=\"xMidYMid meet\"> <metadata>' +\n            \" Created by potrace 1.11, written by Peter Selinger 2001-2013\" +\n            ' </metadata> <g transform=\"translate(0.000000,229.000000) scale(0.100000,-0.100000)\"' +\n            ' fill=\"#de6ca9\" stroke=\"none\"><path d=\"M0 1145 l0 -1145 1750 0 1750 0 0 1145 0 1145' +\n            \" -1750 0 -1750 0 0 -1145z m1434 186 c19 -8 26 -18 26 -37 0 -24 -3 -26\" +\n            \" -27 -19 -16 3 -58 9 -94 12 -63 5 -67 4 -88 -23 -23 -29 -21 -60 6 -81 8\" +\n            \" -6 47 -19 86 -29 55 -13 80 -25 106 -51 31 -31 33 -37 29 -88 -8 -94 -69\" +\n            \" -133 -193 -122 -90 7 -115 20 -115 58 0 26 3 30 18 24 91 -38 168 -41 204\" +\n            \" -8 23 21 23 75 1 96 -10 8 -49 23 -88 33 -88 22 -135 63 -135 118 0 92 67 140\" +\n            \" 181 131 31 -2 68 -9 83 -14z m854 -6 c38 -15 42 -21 42 -51 l0 -33 -47 25\" +\n            \" c-41 22 -58 25 -115 22 -58 -3 -72 -8 -97 -32 -79 -75 -59 -259 32 -297 35\" +\n            \" -15 106 -18 150 -6 26 7 27 10 27 67 l0 60 -50 0 c-47 0 -50 2 -50 25 0 25\" +\n            \" 1 25 80 25 l81 0 -3 -97 -3 -98 -40 -20 c-22 -10 -65 -21 -95 -23 -153 -11\" +\n            \" -242 74 -243 230 0 145 93 235 233 224 30 -2 74 -12 98 -21z m-638 -169 l67\" +\n            \" -178 40 103 c22 57 53 139 69 182 28 75 29 77 62 77 19 0 32 -4 30 -9 -1 -5\" +\n            \" -39 -104 -83 -220 l-80 -211 -37 0 c-35 0 -37 2 -56 53 -11 28 -48 124 -81 \" +\n            '211 -34 87 -61 163 -61 168 0 5 14 8 32 6 31 -3 32 -5 98 -182z\" />' +\n            \"</g> </svg>\";\n        return str;\n    }\n    function getImageNode() {\n        let drawingshape;\n        drawingshape = { type: \"Image\", source: \"https://ej2.syncfusion.com/react/demos/src/diagram/employee.png\" };\n        node = {\n            shape: drawingshape\n        };\n        setdrawobject(node, null);\n    }\n    function getPathShape() {\n        // tslint:disable-next-line:max-line-length\n        let drawingshape;\n        drawingshape = {\n            type: \"Path\",\n            data: \"M540.3643,137.9336L546.7973,159.7016L570.3633,159.7296L550.7723,171.9366L558.9053,194.9966L540.3643,179.4996L521.8223,194.9966L529.9553,171.9366L510.3633,159.7296L533.9313,159.7016L540.3643,137.9336z\"\n        };\n        node = {\n            shape: drawingshape\n        };\n        setdrawobject(node, null);\n    }\n    function getPorts(obj) {\n        let ports = [\n            createPort(\"port1\", { x: 0, y: 0.5 }),\n            createPort(\"port2\", { x: 0.5, y: 1 }),\n            createPort(\"port3\", { x: 1, y: 0.5 }),\n            createPort(\"port4\", { x: 0.5, y: 0 })\n        ];\n        return ports;\n    }\n    function getPathPorts(obj) {\n        let ports = [\n            createPort(\"port1\", { x: 0.5, y: 0 }),\n            createPort(\"port2\", { x: 0, y: 0.39 }),\n            createPort(\"port3\", { x: 1, y: 0.39 }),\n            createPort(\"port4\", { x: 0.2, y: 1 }),\n            createPort(\"port5\", { x: 0.8, y: 1 })\n        ];\n        return ports;\n    }\n    function getHexagonPorts(obj) {\n        let ports = [\n            createPort(\"port1\", { x: 0, y: 0.5 }),\n            createPort(\"port2\", { x: 0.5, y: 0 }),\n            createPort(\"port3\", { x: 0.3, y: 0 }),\n            createPort(\"port4\", { x: 0.7, y: 0 }),\n            createPort(\"port5\", { x: 1, y: 0.5 }),\n            createPort(\"port6\", { x: 0.5, y: 1 }),\n            createPort(\"port7\", { x: 0.3, y: 1 }),\n            createPort(\"port8\", { x: 0.7, y: 1 })\n        ];\n        return ports;\n    }\n    function getPentagonPorts(obj) {\n        let ports = [\n            createPort(\"port1\", { x: 0.5, y: 0 }),\n            createPort(\"port2\", { x: 0, y: 0.4 }),\n            createPort(\"port3\", { x: 1, y: 0.4 }),\n            createPort(\"port4\", { x: 0.2, y: 1 }),\n            createPort(\"port5\", { x: 0.85, y: 1 })\n        ];\n        return ports;\n    }\n    function createPort(id, offset) {\n        let port = {\n            id: id,\n            shape: \"Square\",\n            offset: offset,\n            constraints: PortConstraints.Draw,\n            visibility: PortVisibility.Hover\n        };\n        return port;\n    }\n    return (<div className=\"diagram-drawingTool\">\n    <div className=\"control-pane diagram-control-pane\">\n      <style>{SAMPLE_CSS}</style>\n      <div className=\"col-lg-8 control-section\">\n        <div className=\"content-wrapper\" style={{ width: \"100%\" }}>\n          <DiagramComponent id=\"diagram\" ref={diagram => (diagramInstance = diagram)} width={\"100%\"} height={\"540px\"} snapSettings={snapSettings} rulerSettings={{ showRulers: true }} \n    //Sets the default values of a node\n    getNodeDefaults={(node) => {\n            let obj = node;\n            let basicShape = node.shape;\n            if (basicShape.shape === \"Rectangle\" ||\n                basicShape.shape === \"Ellipse\") {\n                obj.ports = getPorts(node);\n            }\n            else if (basicShape.shape === \"Hexagon\") {\n                obj.ports = getHexagonPorts(node);\n            }\n            else if (basicShape.shape === \"Pentagon\") {\n                obj.ports = getPentagonPorts(node);\n            }\n            else if (basicShape.type === \"Path\") {\n                obj.ports = getPathPorts(node);\n            }\n        }}/>\n          <Inject services={[UndoRedo, Snapping, ConnectorEditing]}/>\n        </div>\n      </div>\n\n      <div className=\"col-lg-4  property-section\">\n        <div className=\"property-panel-header\">Properties</div>\n        <div className=\"row property-panel-content\" id=\"appearance\" ref={appearance => (appearanceInstance = appearance)}>\n          <div className=\"row row-header\" style={{ paddingTop: \"10px\" }}>\n            Shapes\n          </div>\n          <div className=\"row\" style={{ paddingTop: \"8px\" }}>\n            <div title=\"Retangle\" className=\"image-pattern-style e-selected-style\" id=\"shape1\" style={{\n            backgroundImage: \"url('https://ej2.syncfusion.com/react/demos/src/diagram/Images/drawingTool/basicshape/DrawingTool_1.png')\",\n            marginRight: \"3px\"\n        }}/>\n            <div title=\"Ellipse\" className=\"image-pattern-style\" id=\"shape2\" style={{\n            backgroundImage: \"url('https://ej2.syncfusion.com/react/demos/src/diagram/Images/drawingTool/basicshape/DrawingTool_2.png')\",\n            margin: \"0px 3px\"\n        }}/>\n            <div title=\"Hexagon\" className=\"image-pattern-style\" id=\"shape3\" style={{\n            backgroundImage: \"url('https://ej2.syncfusion.com/react/demos/src/diagram/Images/drawingTool/basicshape/DrawingTool_3.png')\"\n        }}/>\n          </div>\n          <div className=\"row\" style={{ paddingTop: \"8px\" }}>\n            <div title=\"Pentagon\" className=\"image-pattern-style\" id=\"shape4\" style={{\n            backgroundImage: \"url('https://ej2.syncfusion.com/react/demos/src/diagram/Images/drawingTool/basicshape/DrawingTool_4.png')\",\n            marginRight: \"3px\"\n        }}/>\n            <div title=\"Triangle\" className=\"image-pattern-style\" id=\"shape5\" style={{\n            backgroundImage: \"url('https://ej2.syncfusion.com/react/demos/src/diagram/Images/drawingTool/basicshape/DrawingTool_5.png')\",\n            margin: \"0px 3px\"\n        }}/>\n            <div title=\"Path\" className=\"image-pattern-style\" id=\"path\" style={{\n            backgroundImage: \"url('https://ej2.syncfusion.com/react/demos/src/diagram/Images/drawingTool/DrawingTool_6.png')\"\n        }}/>\n          </div>\n          <div className=\"row\" style={{ paddingTop: \"8px\" }}>\n            <div title=\"Image\" className=\"image-pattern-style\" id=\"image\" style={{\n            backgroundImage: \"url('https://ej2.syncfusion.com/react/demos/src/diagram/Images/drawingTool/DrawingTool_7.png')\",\n            marginRight: \"3px\"\n        }}/>\n            <div title=\"SVG\" className=\"image-pattern-style\" id=\"svg\" style={{\n            backgroundImage: \"url('https://ej2.syncfusion.com/react/demos/src/diagram/Images/drawingTool/DrawingTool_8.png')\",\n            marginRight: \"3px\"\n        }}/>\n            <div title=\"Text\" className=\"image-pattern-style\" id=\"text\" style={{\n            backgroundImage: \"url('https://ej2.syncfusion.com/react/demos/src/diagram/Images/drawingTool/DrawingTool_9.png')\",\n            marginRight: \"3px\"\n        }}/>\n          </div>\n          <div className=\"row row-header\" style={{ paddingTop: \"10px\" }}>\n            Connector\n          </div>\n          <div className=\"row\" style={{ paddingTop: \"8px\" }}>\n            <div className=\"image-pattern-style\" id=\"straight\" style={{\n            backgroundImage: \"url('https://ej2.syncfusion.com/react/demos/src/diagram/Images/drawingTool/connector/Connectors_1.png')\",\n            marginRight: \"3px\"\n        }}/>\n            <div className=\"image-pattern-style\" id=\"ortho\" style={{\n            backgroundImage: \"url('https://ej2.syncfusion.com/react/demos/src/diagram/Images/drawingTool/connector/Connectors_2.png')\",\n            margin: \"0px 3px\"\n        }}/>\n            <div className=\"image-pattern-style\" id=\"cubic\" style={{\n            backgroundImage: \"url('https://ej2.syncfusion.com/react/demos/src/diagram/Images/drawingTool/connector/Connectors_3.png')\"\n        }}/>\n          </div>\n          <div className=\"row\" style={{ paddingTop: \"8px\" }}>\n            <div className=\"image-pattern-style\" id=\"freehand\" style={{\n            backgroundImage: \"url('https://ej2.syncfusion.com/react/demos/src/diagram/Images/connector/freehand.png')\"\n        }}/>\n          </div>\n          <div className=\"row property-panel-content\" style={{ paddingTop: \"10px\" }}>\n            <CheckBoxComponent id=\"checked\" ref={checked => (checkedInstance = checked)} label=\"Continuous Draw\" checked={true} change={onChange}/>\n          </div>\n        </div>\n      </div>\n\n    </div>\n    </div>);\n}\nexport default DrawingTools;\n\nconst root = createRoot(document.getElementById('sample'));\nroot.render(<DrawingTools />);","dependencies":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-react-base\":\"*\",\"@syncfusion/ej2-diagrams\":\"*\",\"@syncfusion/ej2-react-diagrams\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-react-buttons\":\"*\",\"@syncfusion/ej2-react-charts\":\"*\",\"@syncfusion/ej2/base\":\"*\",\"@syncfusion/ej2-charts'; // Import the necessary types from Syncfusion\":\"*\",\"@syncfusion/ej2-lists\":\"*\"}"}