{"index.css":"/* css */","index.html":"<!DOCTYPE html>\n<html>\n<head>\n    <title>Syncfusion React Sample</title>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\n    <meta name=\"author\" content=\"Syncfusion\" />\n    <link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\n</head>\n\n<body class=\"{{theme}}\">\n     <style>\n            .control-section\n            {\n                margin-top: 100px;\n            }\n    </style>\n    <div id='sample'>\n</body>\n</html>\n","index.js":"import { createRoot } from 'react-dom/client';\nimport './index.css';\nimport * as React from 'react';\nimport { Diagram, Node, ConnectorEditing, NodeConstraints, DiagramComponent, ConnectorConstraints, SelectorConstraints, AnnotationConstraints, DiagramConstraints, DiagramContextMenu, Inject, UndoRedo, } from '@syncfusion/ej2-react-diagrams';\nimport { SampleBase } from './sample-base';\nimport { CheckBoxComponent } from '@syncfusion/ej2-react-buttons';\nDiagram.Inject(ConnectorEditing);\nlet diagramInstance;\nconst SAMPLE_CSS = `\n  .diagram-peoperty-tab .row {\n    margin-left: 0px;\n    margin-right: 0px;\n    padding-top: 8px;\n  }`;\nlet handles = [\n    {\n        name: 'delete',\n        pathData: 'M 7.04 22.13 L 92.95 22.13 L 92.95 88.8 C 92.95 91.92 91.55 94.58 88.76 96.74 C 85.97 98.91 82.55 100 78.52 100 L 21.48 100 C 17.45 100 14.03 98.91 11.24 96.74 C 8.45 94.58 7.04 91.92 7.04 88.8 z M 32.22 0 L 67.78 0 L 75.17 5.47 L 100 5.47 L 100 16.67 L 0 16.67 L 0 5.47 L 24.83 5.47 z',\n        visible: true,\n        offset: 0.5,\n        side: 'Bottom',\n        margin: { top: 0, bottom: 0, left: 0, right: 0 },\n    },\n];\n//Initialize Diagram Nodes\nlet nodes = [\n    {\n        id: 'textNode1',\n        // Position of the node\n        offsetX: 340,\n        offsetY: 50,\n        // Size of the node\n        width: 550,\n        height: 50,\n        //Sets type of the node\n        shape: {\n            type: 'Text',\n            content: 'Use Node Constraints to restrict end-users from performing certain operations on Node.',\n        },\n        //Customizes the appearances such as text, font, fill, and stroke.\n        style: {\n            strokeColor: 'none',\n            fill: 'none',\n            color: 'black',\n            textAlign: 'Center',\n        },\n        constraints: NodeConstraints.None,\n    },\n    {\n        id: 'rectangle',\n        offsetX: 80,\n        offsetY: 160,\n        height: 65,\n        shape: { type: 'Basic', shape: 'Rectangle' },\n        annotations: [{ content: 'Selection = False' }],\n        constraints: NodeConstraints.Default & ~NodeConstraints.Select,\n    },\n    {\n        id: 'ellipse',\n        offsetX: 190,\n        offsetY: 160,\n        height: 80,\n        shape: { type: 'Basic', shape: 'Ellipse', cornerRadius: 10 },\n        annotations: [{ content: 'Dragging = False' }],\n        constraints: NodeConstraints.Default & ~NodeConstraints.Drag,\n    },\n    {\n        id: 'heptagon',\n        offsetX: 295,\n        offsetY: 160,\n        height: 80,\n        shape: { type: 'Basic', shape: 'Heptagon' },\n        annotations: [{ content: 'Delete = False' }],\n        constraints: NodeConstraints.Default & ~NodeConstraints.Delete,\n    },\n    {\n        id: 'directData',\n        offsetX: 410,\n        offsetY: 160,\n        height: 80,\n        rotateAngle: -45,\n        shape: { type: 'Flow', shape: 'DirectData' },\n        annotations: [{ content: 'Rotate = False' }],\n        constraints: NodeConstraints.Default & ~NodeConstraints.Rotate,\n    },\n    {\n        id: 'Plus',\n        offsetX: 530,\n        offsetY: 160,\n        height: 80,\n        shape: { type: 'Basic', shape: 'Plus' },\n        annotations: [\n            {\n                content: 'TextEdit = False',\n                constraints: AnnotationConstraints.ReadOnly,\n            },\n        ],\n    },\n    {\n        id: 'decision',\n        offsetX: 630,\n        offsetY: 160,\n        height: 80,\n        shape: { type: 'Flow', shape: 'Decision' },\n        annotations: [{ content: 'Resizing = False' }],\n        constraints: NodeConstraints.Default & ~NodeConstraints.Resize,\n    },\n    {\n        id: 'textNode2',\n        // Position of the node\n        offsetX: 350,\n        offsetY: 280,\n        // Size of the node\n        width: 550,\n        height: 50,\n        //Sets type of the node\n        shape: {\n            type: 'Text',\n            content: 'Use Connector Constraints to restrict end-users from performing certain operations on Connector.',\n        },\n        //Customizes the appearances such as text, font, fill, and stroke.\n        style: {\n            strokeColor: 'none',\n            fill: 'none',\n            color: 'black',\n            textAlign: 'Center',\n        },\n        constraints: NodeConstraints.None,\n    },\n];\n//Initialize Diagram connectors\nlet connectors = [\n    {\n        id: 'select',\n        type: 'Orthogonal',\n        annotations: [\n            {\n                content: 'Selection = False',\n                horizontalAlignment: 'Right',\n                verticalAlignment: 'Bottom',\n            },\n        ],\n        constraints: ConnectorConstraints.Default & ~ConnectorConstraints.Select,\n        sourcePoint: {\n            x: 40,\n            y: 350,\n        },\n        targetPoint: {\n            x: 120,\n            y: 430,\n        },\n    },\n    {\n        id: 'connector2',\n        type: 'Orthogonal',\n        annotations: [\n            {\n                content: 'Dragging = True',\n                horizontalAlignment: 'Right',\n                verticalAlignment: 'Bottom',\n            },\n        ],\n        constraints: ConnectorConstraints.Default |\n            ConnectorConstraints.DragSegmentThumb |\n            ConnectorConstraints.Drag,\n        sourcePoint: {\n            x: 140,\n            y: 350,\n        },\n        targetPoint: {\n            x: 220,\n            y: 430,\n        },\n    },\n    {\n        id: 'delete',\n        type: 'Orthogonal',\n        annotations: [\n            {\n                content: 'Delete = False',\n                horizontalAlignment: 'Right',\n                verticalAlignment: 'Bottom',\n            },\n        ],\n        constraints: (ConnectorConstraints.Default | ConnectorConstraints.DragSegmentThumb) &\n            ~(ConnectorConstraints.Delete | ConnectorConstraints.Drag),\n        sourcePoint: {\n            x: 250,\n            y: 350,\n        },\n        targetPoint: {\n            x: 320,\n            y: 430,\n        },\n    },\n    {\n        id: 'endThumb',\n        type: 'Orthogonal',\n        annotations: [\n            {\n                content: 'EndThumb = False',\n                horizontalAlignment: 'Right',\n                verticalAlignment: 'Bottom',\n            },\n        ],\n        constraints: SelectorConstraints.All &\n            ~(SelectorConstraints.ConnectorSourceThumb |\n                SelectorConstraints.ConnectorTargetThumb),\n        sourcePoint: {\n            x: 360,\n            y: 350,\n        },\n        targetPoint: {\n            x: 440,\n            y: 430,\n        },\n    },\n    {\n        id: 'draggable',\n        type: 'Orthogonal',\n        annotations: [\n            {\n                content: 'EndDraggable = False',\n                horizontalAlignment: 'Right',\n                verticalAlignment: 'Bottom',\n            },\n        ],\n        constraints: (ConnectorConstraints.Default | ConnectorConstraints.DragSegmentThumb) &\n            ~(ConnectorConstraints.DragSourceEnd | ConnectorConstraints.DragTargetEnd),\n        sourcePoint: {\n            x: 460,\n            y: 350,\n        },\n        targetPoint: {\n            x: 540,\n            y: 430,\n        },\n    },\n    {\n        id: 'segmentThumb',\n        type: 'Orthogonal',\n        annotations: [\n            {\n                content: 'SegmentThumb = False',\n                horizontalAlignment: 'Right',\n                verticalAlignment: 'Bottom',\n            },\n        ],\n        constraints: ConnectorConstraints.Default & ~ConnectorConstraints.Drag,\n        sourcePoint: {\n            x: 580,\n            y: 350,\n        },\n        targetPoint: {\n            x: 660,\n            y: 430,\n        },\n    },\n];\nexport class ConstraintsSample extends SampleBase {\n    // Method to fit diagramInstance to page width\n    rendereComplete() {\n        diagramInstance.fitToPage({ mode: 'Width' });\n    }\n    render() {\n        return (<div className=\"control-pane diagram-control-pane\">\n        <style>{SAMPLE_CSS}</style>\n        <div className=\"col-lg-10 control-section\">\n        <div className=\"control-wrapper\">\n          <div className=\"content-wrapper\" style={{ width: '100%', background: 'white' }}>\n            <DiagramComponent id=\"diagram\" ref={(diagram) => (diagramInstance = diagram)} width={'100%'} height={'550px'} nodes={nodes} connectors={connectors} selectedItems={{\n                constraints: SelectorConstraints.UserHandle,\n                userHandles: handles,\n            }} contextMenuSettings={{\n                show: true,\n            }} rulerSettings={{ showRulers: true }} getNodeDefaults={getNodeDefaults} getConnectorDefaults={getConnectorDefaults} getCustomTool={getTool} created={() => {\n                for (let i = 0; i < diagramInstance.connectors.length; i++) {\n                    if (diagramInstance.connectors[i].id === 'endThumb') {\n                        diagramInstance.connectors[i].constraints =\n                            (ConnectorConstraints.Default |\n                                ConnectorConstraints.DragSegmentThumb) &\n                                ~ConnectorConstraints.Drag;\n                    }\n                }\n            }} selectionChange={(args) => {\n                {\n                    if (args.state === 'Changing') {\n                        if (args.type === 'Addition') {\n                            if (args.newValue.length > 0 && args.newValue[0].id === 'endThumb') {\n                                diagramInstance.selectedItems.constraints =\n                                    SelectorConstraints.All &\n                                        ~(SelectorConstraints.ConnectorSourceThumb |\n                                            SelectorConstraints.ConnectorTargetThumb);\n                            }\n                            else {\n                                diagramInstance.selectedItems.constraints =\n                                    SelectorConstraints.All;\n                            }\n                        }\n                        else {\n                            diagramInstance.selectedItems.constraints =\n                                SelectorConstraints.All;\n                        }\n                    }\n                    if (args.state === 'Changed') {\n                        if (args.newValue.length > 0 &&\n                            args.newValue[0] instanceof Node) {\n                            diagramInstance.selectedItems = {\n                                constraints: SelectorConstraints.All |\n                                    SelectorConstraints.UserHandle,\n                                userHandles: handles,\n                            };\n                        }\n                        else {\n                            if (args.newValue[0].id !== 'endThumb') {\n                                diagramInstance.selectedItems = {\n                                    constraints: SelectorConstraints.All &\n                                        ~SelectorConstraints.UserHandle,\n                                };\n                            }\n                            else {\n                                diagramInstance.selectedItems = {\n                                    constraints: SelectorConstraints.All &\n                                        ~(SelectorConstraints.UserHandle |\n                                            SelectorConstraints.ConnectorSourceThumb |\n                                            SelectorConstraints.ConnectorTargetThumb),\n                                };\n                            }\n                        }\n                    }\n                }\n            }}>\n              <Inject services={[DiagramContextMenu, UndoRedo]}/>\n            </DiagramComponent>\n            </div>\n          </div>\n        </div>\n        <div className=\"col-lg-2 diagram-property-tab\">\n          <div className=\"property-panel-header\">Diagram Constraints</div>\n          <div className=\"row property-panel-content\" style={{ paddingTop: '10px' }}>\n            <div className=\"row\">\n              <CheckBoxComponent checked={true} label=\"Zooming\" id=\"zooming\" change={Zoomchanged}/>\n            </div>\n            <div className=\"row\">\n              <CheckBoxComponent checked={true} label=\"Undo/Redo\" id=\"undoRedo\" change={undoRedo}/>\n            </div>\n            <div className=\"row\">\n              <CheckBoxComponent checked={true} label=\"Text Edit\" id=\"textedit\" change={textedit}/>\n            </div>\n            <div className=\"row\">\n              <CheckBoxComponent checked={true} label=\"Context Menu\" id=\"contextMenu\" change={contextMenu}/>\n            </div>\n            <div className=\"row\">\n              <CheckBoxComponent checked={true} label=\"Selectable\" id=\"selectable\" change={selectable}/>\n            </div>\n            <div className=\"row\">\n              <CheckBoxComponent checked={true} label=\"Draggable\" id=\"draggable\" change={draggable}/>\n            </div>\n          </div>\n        </div>\n      </div>);\n    }\n}\nfunction getNodeDefaults(nodes) {\n    if (nodes.id !== \"textNode1\" && nodes.id !== \"textNode2\") {\n        nodes.width = 80;\n        nodes.style.fill = '#C7E6FF';\n        nodes.style.strokeColor = '#1587FF';\n    }\n}\n//Setting default connector values\nfunction getConnectorDefaults(connectors) {\n    connectors.style.strokeColor = '#6BA5D7';\n    connectors.style.fill = '#6BA5D7';\n    connectors.style.strokeWidth = 2;\n    connectors.targetDecorator.style.strokeColor = '#6BA5D7';\n    connectors.targetDecorator.style.fill = '#6BA5D7';\n    return connectors;\n}\n// Retrieves a tool based on the specified action and performs an operation if action is 'delete'  \nfunction getTool(action) {\n    let tool;\n    if (action === 'delete') {\n        diagramInstance.remove();\n    }\n    return tool;\n}\n// Adjusts diagramInstance constraints to toggle Zoom capability based on args\nfunction Zoomchanged(args) {\n    diagramInstance.constraints =\n        diagramInstance.constraints ^ DiagramConstraints.Zoom;\n}\n// Adjusts diagramInstance constraints to toggle UndoRedo capability based on args\nfunction undoRedo(args) {\n    diagramInstance.constraints =\n        diagramInstance.constraints ^ DiagramConstraints.UndoRedo;\n}\n// Toggles read-only mode for annotations on nodes and connectors based on args.checked\nfunction textedit(args) {\n    for (let i = 0; i < diagramInstance.nodes.length; i++) {\n        var node = diagramInstance.nodes[i];\n        if (node.annotations.length > 0 && node.annotations[0].content) {\n            if (args.checked) {\n                if (node.id !== 'Plus') {\n                    node.annotations[0].constraints =\n                        node.annotations[0].constraints ^\n                            AnnotationConstraints.ReadOnly;\n                }\n            }\n            else {\n                node.annotations[0].constraints =\n                    node.annotations[0].constraints | AnnotationConstraints.ReadOnly;\n            }\n        }\n    }\n    for (let x = 0; x < diagramInstance.connectors.length; x++) {\n        var connector = diagramInstance.connectors[x];\n        if (connector.annotations.length > 0 && connector.annotations[0].content) {\n            if (args.checked) {\n                if (connector.id === 'select') {\n                    connector.constraints =\n                        connector.constraints & ~ConnectorConstraints.Select;\n                }\n                else {\n                    connector.annotations[0].constraints =\n                        connector.annotations[0].constraints ^\n                            AnnotationConstraints.ReadOnly;\n                }\n            }\n            else {\n                connector.annotations[0].constraints =\n                    connector.annotations[0].constraints ^\n                        AnnotationConstraints.ReadOnly;\n            }\n        }\n    }\n    diagramInstance.dataBind();\n}\n// Controls the visibility of the context menu in diagramInstance based on args.checked\nfunction contextMenu(args) {\n    if (args.checked) {\n        diagramInstance.contextMenuSettings.show = true;\n        diagramInstance.refresh();\n    }\n    else {\n        diagramInstance.contextMenuSettings.show = false;\n    }\n    diagramInstance.dataBind();\n}\n// Enables or disables node and connector selection based on args.checked, excluding the id 'rectangle' and 'select'\nfunction selectable(args) {\n    for (let i = 0; i < diagramInstance.nodes.length; i++) {\n        let node = diagramInstance.nodes[i];\n        if (node.id != 'rectangle') {\n            if (args.checked) {\n                node.constraints = node.constraints | NodeConstraints.Select;\n            }\n            else {\n                node.constraints = node.constraints & ~NodeConstraints.Select;\n            }\n        }\n        diagramInstance.dataBind();\n    }\n    for (let j = 0; j < diagramInstance.connectors.length; j++) {\n        let connector = diagramInstance.connectors[j];\n        if (connector.id != 'select') {\n            if (args.checked) {\n                connector.constraints =\n                    connector.constraints | ConnectorConstraints.Select;\n            }\n            else {\n                connector.constraints =\n                    connector.constraints & ~ConnectorConstraints.Select;\n            }\n        }\n        diagramInstance.dataBind();\n    }\n}\n// Controls draggable behavior for nodes and connectors based on args.checked\nfunction draggable(args) {\n    for (let i = 0; i < diagramInstance.nodes.length; i++) {\n        let nodes = diagramInstance.nodes[i];\n        if (args.checked) {\n            if (nodes.id === 'ellipse') {\n                nodes.constraints = NodeConstraints.Default & ~NodeConstraints.Drag;\n            }\n            else {\n                nodes.constraints = nodes.constraints | NodeConstraints.Drag;\n            }\n        }\n        else {\n            nodes.constraints = nodes.constraints & ~NodeConstraints.Drag;\n        }\n        diagramInstance.dataBind();\n    }\n    for (let j = 0; j < diagramInstance.connectors.length; j++) {\n        let connectors = diagramInstance.connectors[j];\n        if (args.checked) {\n            connectors.constraints =\n                connectors.constraints | ConnectorConstraints.Drag;\n        }\n        else {\n            connectors.constraints =\n                connectors.constraints & ~ConnectorConstraints.Drag;\n        }\n        diagramInstance.dataBind();\n    }\n}\n\nconst root = createRoot(document.getElementById('sample'));\nroot.render(<ConstraintsSample />);","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n                this.rendereComplete();\n            });\n        }\n    }\n    export function updateSampleSection(){}\n    ","dependencies":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-react-base\":\"*\",\"@syncfusion/ej2-diagrams\":\"*\",\"@syncfusion/ej2-react-diagrams\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-react-buttons\":\"*\",\"@syncfusion/ej2-react-charts\":\"*\",\"@syncfusion/ej2/base\":\"*\",\"@syncfusion/ej2-charts'; // Import the necessary types from Syncfusion\":\"*\"}"}