{"index.css":"/* css */","index.html":"<!DOCTYPE html>\n<html>\n<head>\n    <title>Syncfusion React Sample</title>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\n    <meta name=\"author\" content=\"Syncfusion\" />\n    <link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\n</head>\n\n<body class=\"{{theme}}\">\n     <style>\n            .control-section\n            {\n                margin-top: 100px;\n            }\n    </style>\n    <div id='sample'>\n</body>\n</html>\n","index.js":"import { createRoot } from 'react-dom/client';\nimport './index.css';\nimport * as React from 'react';\nimport { PivotViewComponent, VirtualScroll, Inject } from '@syncfusion/ej2-react-pivotview';\nimport { SampleBase } from './sample-base';\nimport { Browser } from '@syncfusion/ej2-base';\nimport { DropDownListComponent } from '@syncfusion/ej2-react-dropdowns';\n/**\n * PivotView Performance Sample.\n */\nexport class Performance extends SampleBase {\n    SAMPLE_CSS = `\n        .e-pivotview {\n            width: 100%;\n            height: 100%;\n        }\n\n        #performanceTime {\n            float: right;\n            margin-top: 7px;\n            margin-right: 27px;\n        }\n\n        .e-bigger #performanceTime{\n            margin-top: 8px;\n        }\n\n        @media(max-width: 440px) {\n            .control-pane .control-section .performance-time-container {\n                margin-bottom: 30px !important;\n        \n                #performanceTime {\n                    float: left;\n                }\n            }\n        }`;\n    pivotObj;\n    ddObj;\n    date1;\n    date2;\n    isInit = true;\n    ddlData = [\n        { text: '10,000 Rows and 10 Columns', value: 10000 },\n        { text: '1,00,000 Rows and 10 Columns', value: 100000 },\n        { text: '1,000,000 Rows and 10 Columns', value: 1000000 }\n    ];\n    fields = { text: 'text', value: 'value' };\n    customername = ['TOM', 'Hawk', 'Jon', 'Chandler', 'Monica', 'Rachel', 'Phoebe', 'Gunther',\n        'Ross', 'Geller', 'Joey', 'Bing', 'Tribbiani', 'Janice', 'Bong', 'Perk', 'Green', 'Ken', 'Adams'];\n    city = ['New York', 'Los Angeles', 'Chicago', 'Houston', 'Philadelphia', 'Phoenix', 'San Antonio', 'Austin',\n        'San Francisco', 'Columbus', 'Washington', 'Portland', 'Oklahoma', 'Las Vegas', 'Virginia', 'St. Louis', 'Birmingham'];\n    dataSourceSettings = {\n        dataSource: this.data(10000),\n        enableSorting: false,\n        expandAll: true,\n        formatSettings: [{ name: 'Price', format: 'C0' }],\n        rows: [{ name: 'ProductID' }],\n        columns: [{ name: 'Year' }],\n        values: [{ name: 'Price', caption: 'Unit Price' }, { name: 'Sold', caption: 'Unit Sold' }]\n    };\n    data(count) {\n        let result = [];\n        let dt = 0;\n        for (let i = 1; i < (count + 1); i++) {\n            dt++;\n            let round;\n            let toString = i.toString();\n            if (toString.length === 1) {\n                round = '0000' + (i);\n            }\n            else if (toString.length === 2) {\n                round = '000' + i;\n            }\n            else if (toString.length === 3) {\n                round = '00' + i;\n            }\n            else if (toString.length === 4) {\n                round = '0' + i;\n            }\n            else {\n                round = toString;\n            }\n            result.push({\n                ProductID: 'PRO-' + round,\n                City: this.city[Math.round(Math.random() * this.city.length)] || this.city[0],\n                Year: \"FY \" + (dt + 2013),\n                CustomerName: this.customername[Math.round(Math.random() * this.customername.length)] || this.customername[0],\n                Price: Math.round(Math.random() * 5000) + 5000,\n                Sold: Math.round(Math.random() * 80) + 10,\n            });\n            if (dt / 4 == 1) {\n                dt = 0;\n            }\n        }\n        return result;\n    }\n    ;\n    onChange(args) {\n        this.isInit = true;\n        this.pivotObj.dataSourceSettings.dataSource = this.data(args.value);\n        this.date1 = new Date().getTime();\n    }\n    onDataBound() {\n        if (this.pivotObj.dataSourceSettings.dataSource.length > 0) {\n            if (this.date1 && this.isInit) {\n                this.date2 = new Date().getTime();\n                document.getElementById('performanceTime').innerHTML = 'Time Taken: ' + (this.date2 - this.date1) / 1000 + ' sec';\n            }\n            this.isInit = false;\n        }\n        if (Browser.isDevice && this.pivotObj && this.pivotObj.enableRtl) {\n            document.querySelector('.control-section').classList.add('e-rtl');\n        }\n    }\n    load() {\n        if (this.isInit) {\n            this.date1 = new Date().getTime();\n        }\n    }\n    render() {\n        return (<div className='control-pane'>\n                <style>\n                    {this.SAMPLE_CSS}\n                </style>\n                <div className='control-section'>\n                    <div className='performance-time-container' style={{ marginBottom: '15px' }}>\n                        <DropDownListComponent id=\"performance\" width='220' dataSource={this.ddlData} index={0} ref={(dropdownlist) => { this.ddObj = dropdownlist; }} fields={this.fields} change={this.onChange.bind(this)} placeholder=\"Select a Data Range\" popupHeight=\"240px\">\n                        </DropDownListComponent>\n                        <span id=\"performanceTime\">Time Taken: 0 sec</span>\n                    </div>\n                    <PivotViewComponent id='PivotView' ref={(pivotview) => { this.pivotObj = pivotview; }} dataSourceSettings={this.dataSourceSettings} enableVirtualization={true} width={'100%'} height={300} gridSettings={{ columnWidth: 120 }} dataBound={this.onDataBound.bind(this)} load={this.load.bind(this)}>\n                        <Inject services={[VirtualScroll]}/>\n                    </PivotViewComponent>\n                </div>\n            </div>);\n    }\n}\n\nconst root = createRoot(document.getElementById('sample'));\nroot.render(<Performance />);","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n                this.rendereComplete();\n            });\n        }\n    }\n    export function updateSampleSection(){}\n    ","dependencies":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-react-base\":\"*\",\"@syncfusion/ej2-pivotview\":\"*\",\"@syncfusion/ej2-react-pivotview\":\"*\",\"@syncfusion/ej2-icons\":\"*\",\"markdown-spellcheck\":\"^1.3.1\",\"@syncfusion/ej2-dropdowns\":\"*\",\"@syncfusion/ej2-react-dropdowns\":\"*\",\"@syncfusion/ej2-react-charts\":\"*\",\"@syncfusion/ej2/base\":\"*\",\"@syncfusion/ej2-charts'; // Import the necessary types from Syncfusion\":\"*\",\"@syncfusion/ej2-lists\":\"*\",\"@syncfusion/ej2-documenteditor\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-splitbuttons\":\"*\",\"@syncfusion/ej2-navigations\":\"*\",\"@syncfusion/ej2-react-popups\":\"*\"}"}