{"index.css":".e-pivotview {\n    width: 100%;\n    height: 100%;\n}\n\n@media only screen and (max-width: 400px) {\n    #pivot-table-section {\n        overflow: auto;\n    }\n}\n\n#PivotViewcontainerwrapper {\n    height: auto !important;\n}\n\n.e-pivotview .e-pivotchart-type-dialog {\n    max-width: 380px !important;\n    max-height: 380px !important;\n }","index.html":"<!DOCTYPE html>\n<html>\n<head>\n    <title>Syncfusion React Sample</title>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\n    <meta name=\"author\" content=\"Syncfusion\" />\n    <link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\n</head>\n\n<body class=\"{{theme}}\">\n     <style>\n            .control-section\n            {\n                margin-top: 100px;\n            }\n    </style>\n    <div id='sample'>\n</body>\n</html>\n","index.js":"import { createRoot } from 'react-dom/client';\nimport './index.css';\nimport * as React from 'react';\nimport { PivotViewComponent, Inject, FieldList, CalculatedField, GroupingBar, Toolbar, PDFExport, ExcelExport, ConditionalFormatting } from '@syncfusion/ej2-react-pivotview';\nimport { SampleBase } from './sample-base';\n\n/**\n * PivotView ToolBar Sample Olap.\n */\nlet dataSourceSettings = {\n    catalog: 'Adventure Works DW 2008 SE',\n    cube: 'Adventure Works',\n    providerType: 'SSAS',\n    url: 'https://bi.syncfusion.com/olap/msmdpump.dll',\n    enableSorting: true,\n    columns: [{ name: '[Product].[Product Categories]', caption: 'Product Categories' }, { name: '[Measures]', caption: 'Measures' }],\n    valueSortSettings: { headerDelimiter: ' - ' },\n    values: [{ name: '[Measures].[Customer Count]', caption: 'Customer Count' }, { name: '[Measures].[Internet Sales Amount]', caption: 'Internet Sales Amount' }],\n    rows: [{ name: '[Customer].[Customer Geography]', caption: 'Customer Geography' }],\n    filters: [{ name: '[Date].[Fiscal]', caption: 'Date Fiscal' }]\n};\nexport class OlapSample extends SampleBase {\n    pivotObj;\n    toolbarOptions = ['New', 'Save', 'SaveAs', 'Rename', 'Remove', 'Load',\n        'Grid', 'Chart', 'MDX', 'Export', 'SubTotal', 'GrandTotal', 'ConditionalFormatting', 'FieldList'];\n    fetchReport(args) {\n        let reportsCollection = [];\n        let reeportsList = [];\n        if (localStorage.pivotviewReports && localStorage.pivotviewReports !== \"\") {\n            reportsCollection = JSON.parse(localStorage.pivotviewReports);\n        }\n        reportsCollection.map(function (item) { reeportsList.push(item.reportName); });\n        args.reportName = reeportsList;\n    }\n    saveReport(args) {\n        let report = [];\n        let isSave = false;\n        if (localStorage.pivotviewReports && localStorage.pivotviewReports !== \"\") {\n            report = JSON.parse(localStorage.pivotviewReports);\n        }\n        if (args.report && args.reportName && args.reportName !== '') {\n            report.map(function (item) {\n                if (args.reportName === item.reportName) {\n                    item.report = args.report;\n                    isSave = true;\n                }\n            });\n            if (!isSave) {\n                report.push(args);\n            }\n            localStorage.pivotviewReports = JSON.stringify(report);\n        }\n    }\n    removeReport(args) {\n        let reportsCollection = [];\n        if (localStorage.pivotviewReports && localStorage.pivotviewReports !== \"\") {\n            reportsCollection = JSON.parse(localStorage.pivotviewReports);\n        }\n        for (let i = 0; i < reportsCollection.length; i++) {\n            if (reportsCollection[i].reportName === args.reportName) {\n                reportsCollection.splice(i, 1);\n            }\n        }\n        if (localStorage.pivotviewReports && localStorage.pivotviewReports !== \"\") {\n            localStorage.pivotviewReports = JSON.stringify(reportsCollection);\n        }\n    }\n    loadReport(args) {\n        let reportsCollection = [];\n        if (localStorage.pivotviewReports && localStorage.pivotviewReports !== \"\") {\n            reportsCollection = JSON.parse(localStorage.pivotviewReports);\n        }\n        reportsCollection.map(function (item) {\n            if (args.reportName === item.reportName) {\n                args.report = item.report;\n            }\n        });\n        if (args.report) {\n            this.pivotObj.dataSourceSettings = JSON.parse(args.report).dataSourceSettings;\n        }\n    }\n    renameReport(args) {\n        let reportsCollection = [];\n        if (localStorage.pivotviewReports && localStorage.pivotviewReports !== \"\") {\n            reportsCollection = JSON.parse(localStorage.pivotviewReports);\n        }\n        if (args.isReportExists) {\n            for (let i = 0; i < reportsCollection.length; i++) {\n                if (reportsCollection[i].reportName === args.rename) {\n                    reportsCollection.splice(i, 1);\n                }\n            }\n        }\n        reportsCollection.map(function (item) { if (args.reportName === item.reportName) {\n            item.reportName = args.rename;\n        } });\n        if (localStorage.pivotviewReports && localStorage.pivotviewReports !== \"\") {\n            localStorage.pivotviewReports = JSON.stringify(reportsCollection);\n        }\n    }\n    beforeToolbarRender(args) {\n        args.customToolbar.splice(6, 0, {\n            type: 'Separator'\n        });\n        args.customToolbar.splice(9, 0, {\n            type: 'Separator'\n        });\n    }\n    newReport() {\n        this.pivotObj.setProperties({ dataSourceSettings: { columns: [], rows: [], values: [], filters: [] } }, false);\n    }\n    chartOnLoad(args) {\n        let selectedTheme = location.hash.split(\"/\")[1];\n        selectedTheme = selectedTheme ? selectedTheme : \"Material\";\n        args.chart.theme = (selectedTheme.charAt(0).toUpperCase() + selectedTheme.slice(1)).replace(/-dark/i, \"Dark\").replace(/contrast/i, 'Contrast').replace(/-highContrast/i, 'HighContrast');\n    }\n    render() {\n        return (<div className='control-pane'>\n                <div className='control-section' id='pivot-table-section' style={{ overflow: 'initial' }}>\n                    <PivotViewComponent id='PivotView' ref={(scope) => { this.pivotObj = scope; }} dataSourceSettings={dataSourceSettings} width={'100%'} height={'500'} enableValueSorting={true} showFieldList={true} showGroupingBar={true} gridSettings={{ columnWidth: 140 }} allowExcelExport={true} allowConditionalFormatting={true} allowPdfExport={true} showToolbar={true} enableFieldSearching={true} allowCalculatedField={true} displayOption={{ view: 'Both' }} toolbar={this.toolbarOptions} newReport={this.newReport.bind(this)} renameReport={this.renameReport.bind(this)} removeReport={this.removeReport.bind(this)} loadReport={this.loadReport.bind(this)} fetchReport={this.fetchReport.bind(this)} saveReport={this.saveReport.bind(this)} toolbarRender={this.beforeToolbarRender.bind(this)} chartSettings={{ title: 'Sales Analysis', load: this.chartOnLoad.bind(this) }}>\n                        <Inject services={[FieldList, GroupingBar, CalculatedField, Toolbar, PDFExport, ExcelExport, ConditionalFormatting]}/>\n                    </PivotViewComponent>\n                </div>\n\n            </div>);\n    }\n}\n\nconst root = createRoot(document.getElementById('sample'));\nroot.render(<OlapSample />);","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n                this.rendereComplete();\n            });\n        }\n    }\n    export function updateSampleSection(){}\n    ","dependencies":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-react-base\":\"*\",\"@syncfusion/ej2-pivotview\":\"*\",\"@syncfusion/ej2-react-pivotview\":\"*\",\"@syncfusion/ej2-charts\":\"*\",\"@syncfusion/ej2-react-charts\":\"*\",\"@syncfusion/ej2/base\":\"*\",\"@syncfusion/ej2-charts'; // Import the necessary types from Syncfusion\":\"*\",\"@syncfusion/ej2-lists\":\"*\",\"@syncfusion/ej2-documenteditor\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-splitbuttons\":\"*\",\"@syncfusion/ej2-navigations\":\"*\",\"@syncfusion/ej2-react-popups\":\"*\"}"}