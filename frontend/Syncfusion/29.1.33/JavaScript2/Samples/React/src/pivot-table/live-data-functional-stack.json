{"index.css":".e-pivotview {\n  width: 100%;\n  height: 100%;\n}\n\n#PivotView-LiveData_chart {\n  margin-top: 15px;\n}\n\n.bg-fade {\n  background-color: #FFEBE9 !important;\n  color: #FF3740 !important;\n}\n\n.bg-fade1 {\n  background-color: #DFFFE2 !important;\n  color: #00A653 !important;\n}\n\n.bg-fade2 {\n  color: rgba(0, 0, 0, 0.87);\n}\n\n.update-btn {\n  margin-left: 10px;\n}\n\n/* Mobile mode */\n@media only screen and (max-width: 688px) {\n  .update-btn {\n      margin: 10px 10px 0 0;\n  }\n}","index.html":"<!DOCTYPE html>\n<html>\n<head>\n    <title>Syncfusion React Sample</title>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\n    <meta name=\"author\" content=\"Syncfusion\" />\n    <link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\n</head>\n\n<body class=\"{{theme}}\">\n     <style>\n            .control-section\n            {\n                margin-top: 100px;\n            }\n    </style>\n    <div id='sample'>\n</body>\n</html>\n","index.js":"import { createRoot } from 'react-dom/client';\nimport './index.css';\nimport * as React from 'react';\nimport { PivotViewComponent, PivotChart, Inject } from '@syncfusion/ej2-react-pivotview';\n\nimport { ButtonComponent } from '@syncfusion/ej2-react-buttons';\nimport { NumericTextBoxComponent } from '@syncfusion/ej2-react-inputs';\nimport { isNullOrUndefined } from '@syncfusion/ej2-base';\n\n/**\n * PivotView LiveData Sample.\n */\nfunction LiveData() {\n    let pivotObj;\n    let timerID;\n    let initial = true;\n    let previousPivotValues;\n    let updateButton;\n    let clearButton;\n    let feedDelayInput;\n    let colourScheme = ['bg-fade', 'bg-fade1', 'bg-fade2'];\n    const REGIONS = [\n        {\n            \"Region\": \"North America\",\n            \"Countries\": [\"Canada\", \"United States\", \"Mexico\"]\n        },\n        {\n            \"Region\": \"Middle East\",\n            \"Countries\": [\"Turkey\", \"Saudi Arabia\"]\n        },\n        {\n            \"Region\": \"Europe\",\n            \"Countries\": [\"Russia\", \"Germany\", \"France\", \"United Kingdom\", \"Italy\"]\n        },\n        {\n            \"Region\": \"Africa\",\n            \"Countries\": [\"South Africa\"]\n        },\n        {\n            \"Region\": \"Asia Pacific\",\n            \"Countries\": [\"Australia\", \"China\", \"India\", \"Indonesia\",\n                \"Japan\", \"South Korea\"]\n        },\n        {\n            \"Region\": \"South America\",\n            \"Countries\": [\"Brazil\"]\n        },\n    ];\n    const DATA = [\n        {\n            \"Category\": \"Agriculture\",\n            \"Type\": \"Corn\",\n            \"Spread\": 0.01,\n            \"Open Price\": 379.50,\n            \"Price\": 379.8026,\n            \"Buy\": 379.7976,\n            \"Sell\": 379.8076,\n            \"Change\": 0.3026,\n            \"Change(%)\": 0.0797,\n            \"Volume\": 11266\n        },\n        {\n            \"Category\": \"Agriculture\",\n            \"Type\": \"Rice\",\n            \"Spread\": 0.01,\n            \"Open Price\": 11.245,\n            \"Price\": 10.4154,\n            \"Buy\": 10.4104,\n            \"Sell\": 10.4204,\n            \"Change\": -0.8296,\n            \"Change(%)\": -7.3779,\n            \"Volume\": 220\n        },\n        {\n            \"Category\": \"Agriculture\",\n            \"Type\": \"Wheat\",\n            \"Spread\": 0.01,\n            \"Open Price\": 465.50,\n            \"Price\": 465.52,\n            \"Buy\": 465.50,\n            \"Sell\": 465.50,\n            \"Change\": 0.02,\n            \"Change(%)\": 0.0043,\n            \"Volume\": 4318\n        },\n        {\n            \"Category\": \"Agriculture\",\n            \"Type\": \"Soybean\",\n            \"Spread\": 0.01,\n            \"Open Price\": 1038.00,\n            \"Price\": 1038.6171,\n            \"Buy\": 1038.6121,\n            \"Sell\": 1038.6221,\n            \"Change\": 0.6171,\n            \"Change(%)\": 0.0595,\n            \"Volume\": 20356\n        },\n        {\n            \"Category\": \"Agriculture\",\n            \"Type\": \"Coffee\",\n            \"Spread\": 0.01,\n            \"Open Price\": 125.70,\n            \"Price\": 125.69,\n            \"Buy\": 125.70,\n            \"Sell\": 125.70,\n            \"Change\": -0.01,\n            \"Change(%)\": -0.008,\n            \"Volume\": 1654\n        },\n        {\n            \"Category\": \"Agriculture\",\n            \"Type\": \"Cocoa\",\n            \"Spread\": 0.01,\n            \"Open Price\": 307.00,\n            \"Price\": 307.03,\n            \"Buy\": 307.00,\n            \"Sell\": 307.00,\n            \"Change\": 0.03,\n            \"Change(%)\": 0.001,\n            \"Volume\": 978\n        },\n    ];\n    let dataSourceSettings = {\n        dataSource: generateData(),\n        enableSorting: true,\n        columns: [{ name: 'Type' }],\n        values: [{ name: 'Volume', caption: 'Volume' }, { name: 'Price', caption: 'Price' }, { name: 'Change', type: 'Avg', caption: 'Change(%)' }],\n        rows: [{ name: 'Country' }],\n        filters: [{ name: 'Category' }],\n        formatSettings: [{ name: 'Price', format: 'C2' }, { name: 'Open Price', format: 'C2' }, { name: 'Change', format: \"###.##'%'\" }, { name: 'Volume', format: 'N0' }],\n        expandAll: false,\n        showSubTotals: false,\n        showGrandTotals: false,\n        emptyCellsTextContent: 'Revising',\n        sortSettings: [{ name: 'Type', order: 'Ascending', membersOrder: ['Corn', 'Rice', 'Wheat', 'Soybean', 'Coffee', 'Cocoa'] }]\n    };\n    function generateData() {\n        const count = 1000;\n        const currData = [];\n        let j = 0;\n        for (let i = 0; i < count; i++) {\n            const rand = Math.floor(Math.random() * Math.floor(DATA.length));\n            const region = REGIONS[j];\n            for (let k = 0; k < region.Countries.length; k++) {\n                const data = Object.assign({}, DATA[rand]);\n                const dataObj = {\n                    ...data,\n                    Region: region.Region,\n                    Country: region.Countries[k]\n                };\n                randomizeObjectData(dataObj);\n                currData.push(dataObj);\n            }\n            j++;\n            j = j > 5 ? 0 : j;\n        }\n        return currData;\n    }\n    function onLoad() {\n        this.on('data-ready', () => {\n            if (initial) {\n                document.getElementById('update1')?.click();\n                initial = false;\n                feedDelayInput.element.addEventListener('keypress', (e) => {\n                    if (e && e.key === 'Enter' && feedDelayInput.element.parentElement.classList.contains('e-input-focus')) {\n                        feedDelayInput.value = parseInt(feedDelayInput.element.value);\n                        feedDelayInput.focusOut();\n                        updateButton.element.click();\n                    }\n                });\n            }\n        });\n        this.on('destroy', function () {\n            if (timerID) {\n                clearInterval(timerID);\n                timerID = undefined;\n            }\n        });\n    }\n    function randomizeObjectData(dataObj) {\n        const changeP = \"Change(%)\";\n        const res = generateNewPrice(dataObj.Price, dataObj.Volume);\n        dataObj.Change = res.Price - dataObj.Price;\n        dataObj.Price = res.Price;\n        dataObj[changeP] = res.ChangePercent;\n        dataObj.Volume = res.Volume;\n    }\n    function generateNewPrice(oldPrice, oldVolume) {\n        let rnd = Math.random();\n        rnd = Math.round(rnd * 100) / 100;\n        const volatility = 15;\n        let newPrice = 0;\n        let newVolume = 0;\n        let changePercent = 2 * volatility * rnd;\n        if (changePercent > volatility) {\n            changePercent -= (2 * volatility);\n        }\n        let changeVolumnPercent = 2 * (volatility - 5) * rnd;\n        if (changeVolumnPercent > (volatility - 5)) {\n            changeVolumnPercent -= (2 * (volatility - 5));\n        }\n        let changeAmount = oldPrice * (changePercent / 100);\n        newPrice = oldPrice + changeAmount;\n        let changeVolume = oldVolume * (changeVolumnPercent / 100);\n        newVolume = oldVolume + changeVolume;\n        newPrice = Math.round(newPrice * 100) / 100;\n        newVolume = Math.round((newVolume * 100) / 100);\n        const result = { Price: 0, ChangePercent: 0, Volume: 0 };\n        changePercent = Math.round(changePercent * 100) / 100;\n        result.Price = newPrice;\n        result.ChangePercent = changePercent;\n        result.Volume = newVolume;\n        return result;\n    }\n    function updateCellValues() {\n        if (!isNullOrUndefined(pivotObj)) {\n            if (pivotObj.pivotValues.length > 0) {\n                if (!previousPivotValues) {\n                    previousPivotValues = pivotObj.pivotValues;\n                }\n                previousPivotValues = pivotObj.pivotValues;\n            }\n            pivotObj.dataSourceSettings.dataSource = generateData();\n        }\n    }\n    ;\n    function updateClick() {\n        if (!timerID) {\n            updateButton.disabled = true;\n            feedDelayInput.enabled = false;\n            clearButton.disabled = false;\n            timerID = setInterval(updateCellValues, feedDelayInput.value);\n        }\n    }\n    ;\n    function clearClick() {\n        if (timerID) {\n            updateButton.disabled = false;\n            feedDelayInput.enabled = true;\n            clearButton.disabled = true;\n            clearInterval(timerID);\n            timerID = undefined;\n        }\n    }\n    ;\n    function cellTemplate(args) {\n        if (args != null && args.cellInfo) {\n            if (args.cellInfo.axis === 'value') {\n                if (args.cellInfo.axis === 'value' && !args.cellInfo.isGrandSum && args.cellInfo.actualText === 'Change') {\n                    args.targetCell.classList.add(cellColour(args.cellInfo.value));\n                }\n            }\n        }\n    }\n    ;\n    function cellColour(value) {\n        let colorIndex = value < 0 ? 0 : value > 0 ? 1 : 2;\n        return colourScheme[colorIndex];\n    }\n    ;\n    function chartOnLoad(args) {\n        let selectedTheme = location.hash.split('/')[1];\n        selectedTheme = selectedTheme ? selectedTheme : 'Material';\n        args.chart.theme = (selectedTheme.charAt(0).toUpperCase() + selectedTheme.slice(1)).replace(/-dark/i, \"Dark\").replace(/contrast/i, 'Contrast').replace(/-highContrast/i, 'HighContrast');\n    }\n    ;\n    return (<div className='control-pane'>\n            <div className='control-section'>\n                <div style={{ marginBottom: '10px' }}>\n                    <div style={{ display: 'inline-block', fontSize: '14px', paddingLeft: '5px' }}>\n                     <strong>Feed Delay(ms)</strong>:\n                    </div>\n                    <NumericTextBoxComponent format=\"N0\" value={5000} min={5000} step={1000} width={'150px'} style={{ marginLeft: '7px' }} placeholder={'0'} ref={(scope) => { feedDelayInput = scope; }}/>\n                    <ButtonComponent id=\"update1\" ref={(scope) => { updateButton = scope; }} onClick={updateClick} className='update-btn'>\n                        Start Updating...\n                    </ButtonComponent>\n                    <ButtonComponent id=\"clear\" ref={(scope) => { clearButton = scope; }} onClick={clearClick} className='update-btn'>\n                        Stop Updating...\n                    </ButtonComponent>\n                </div>\n                <PivotViewComponent id='PivotView-LiveData' dataSourceSettings={dataSourceSettings} displayOption={{ view: 'Both' }} width={'100%'} height={'350'} gridSettings={{ columnWidth: 100 }} chartSettings={{\n            value: 'Price',\n            legendSettings: { visible: false },\n            chartSeries: { type: \"Column\" }, load: chartOnLoad.bind(this),\n            zoomSettings: {\n                enableScrollbar: false,\n                toolbarItems: [],\n                enableSelectionZooming: false,\n            },\n        }} load={onLoad} ref={(g) => { pivotObj = g; }} cellTemplate={cellTemplate.bind(this)}>\n                    <Inject services={[PivotChart]}/>\n                </PivotViewComponent>\n            </div>\n        </div>);\n}\n;\nexport default LiveData;\n\nconst root = createRoot(document.getElementById('sample'));\nroot.render(<LiveData />);","dependencies":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-react-base\":\"*\",\"@syncfusion/ej2-pivotview\":\"*\",\"@syncfusion/ej2-react-pivotview\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-react-buttons\":\"*\",\"@syncfusion/ej2-inputs\":\"*\",\"@syncfusion/ej2-react-inputs\":\"*\",\"@syncfusion/ej2-charts\":\"*\",\"@syncfusion/ej2-react-charts\":\"*\",\"@syncfusion/ej2-icons\":\"*\",\"markdown-spellcheck\":\"^1.3.1\",\"@syncfusion/ej2/base\":\"*\",\"@syncfusion/ej2-charts'; // Import the necessary types from Syncfusion\":\"*\",\"@syncfusion/ej2-lists\":\"*\",\"@syncfusion/ej2-documenteditor\":\"*\",\"@syncfusion/ej2-splitbuttons\":\"*\",\"@syncfusion/ej2-navigations\":\"*\",\"@syncfusion/ej2-react-popups\":\"*\"}"}