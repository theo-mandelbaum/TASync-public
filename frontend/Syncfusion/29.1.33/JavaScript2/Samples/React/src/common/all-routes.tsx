import * as ReactDOM from 'react-dom';
import * as React from 'react';
import { HashRouter, Routes, Route, Navigate, Link } from 'react-router-dom';
import { accordionRoutes } from '../accordion/accordion-routes';
import { aiassistviewRoutes } from '../ai-assistview/aiassistview-routes';
import { aicomboboxRoutes } from '../ai-combo-box/aicombobox-routes';
import { aidiagramRoutes } from '../ai-diagram/aidiagram-routes';
import { aidocumenteditorRoutes } from '../ai-document-editor/aidocumenteditor-routes';
import { aiganttRoutes } from '../ai-gantt/aigantt-routes';
import { aigridRoutes } from '../ai-grid/aigrid-routes';
import { aiimageeditorRoutes } from '../ai-image-editor/aiimageeditor-routes';
import { aikanbanRoutes } from '../ai-kanban/aikanban-routes';
import { aimapsRoutes } from '../ai-maps/aimaps-routes';
import { aipdfviewerRoutes } from '../ai-pdfviewer/aipdfviewer-routes';
import { aipivottableRoutes } from '../ai-pivot-table/aipivottable-routes';
import { aiquerybuilderRoutes } from '../ai-querybuilder/aiquerybuilder-routes';
import { airichtexteditorRoutes } from '../ai-rich-text-editor/airichtexteditor-routes';
import { aischeduleRoutes } from '../ai-schedule/aischedule-routes';
import { aismartpasteRoutes } from '../ai-smart-paste/aismartpaste-routes';
import { aismarttextareaRoutes } from '../ai-smart-textarea/aismarttextarea-routes';
import { aispreadsheetRoutes } from '../ai-spreadsheet/aispreadsheet-routes';
import { aitreegridRoutes } from '../ai-tree-grid/aitreegrid-routes';
import { appbarRoutes } from '../appbar/appbar-routes';
import { arcgaugeRoutes } from '../arc-gauge/arcgauge-routes';
import { autocompleteRoutes } from '../auto-complete/autocomplete-routes';
import { avatarRoutes } from '../avatar/avatar-routes';
import { badgeRoutes } from '../badge/badge-routes';
import { barcodeRoutes } from '../barcode/barcode-routes';
import { breadcrumbRoutes } from '../breadcrumb/breadcrumb-routes';
import { bulletchartRoutes } from '../bullet-chart/bulletchart-routes';
import { buttonRoutes } from '../button/button-routes';
import { calendarRoutes } from '../calendar/calendar-routes';
import { cardRoutes } from '../card/card-routes';
import { carouselRoutes } from '../carousel/carousel-routes';
import { chartRoutes } from '../chart/chart-routes';
import { chatuiRoutes } from '../chat-ui/chatui-routes';
import { chipsRoutes } from '../chips/chips-routes';
import { circulargaugeRoutes } from '../circular-gauge/circulargauge-routes';
import { colorpickerRoutes } from '../color-picker/colorpicker-routes';
import { comboboxRoutes } from '../combo-box/combobox-routes';
import { contextmenuRoutes } from '../context-menu/contextmenu-routes';
import { dashboardlayoutRoutes } from '../dashboard-layout/dashboardlayout-routes';
import { datepickerRoutes } from '../datepicker/datepicker-routes';
import { daterangepickerRoutes } from '../daterangepicker/daterangepicker-routes';
import { datetimepickerRoutes } from '../datetimepicker/datetimepicker-routes';
import { diagramRoutes } from '../diagram/diagram-routes';
import { dialogRoutes } from '../dialog/dialog-routes';
import { documenteditorRoutes } from '../document-editor/documenteditor-routes';
import { dropdownlistRoutes } from '../drop-down-list/dropdownlist-routes';
import { dropdowntreeRoutes } from '../drop-down-tree/dropdowntree-routes';
import { filemanagerRoutes } from '../file-manager/filemanager-routes';
import { floatingactionbuttonRoutes } from '../floating-action-button/floatingactionbutton-routes';
import { formvalidatorRoutes } from '../form-validator/formvalidator-routes';
import { ganttRoutes } from '../gantt/gantt-routes';
import { gridRoutes } from '../grid/grid-routes';
import { heatmapchartRoutes } from '../heatmap-chart/heatmapchart-routes';
import { imageeditorRoutes } from '../image-editor/imageeditor-routes';
import { inplaceeditorRoutes } from '../inplace-editor/inplaceeditor-routes';
import { kanbanRoutes } from '../kanban/kanban-routes';
import { lineargaugeRoutes } from '../linear-gauge/lineargauge-routes';
import { listboxRoutes } from '../list-box/listbox-routes';
import { listviewRoutes } from '../listview/listview-routes';
import { mapsRoutes } from '../maps/maps-routes';
import { markdowneditorRoutes } from '../markdown-editor/markdowneditor-routes';
import { maskedtextboxRoutes } from '../maskedtextbox/maskedtextbox-routes';
import { mentionRoutes } from '../mention/mention-routes';
import { menuRoutes } from '../menu/menu-routes';
import { messageRoutes } from '../message/message-routes';
import { multiselectRoutes } from '../multi-select/multiselect-routes';
import { multicolumncomboboxRoutes } from '../multicolumn-combobox/multicolumncombobox-routes';
import { numerictextboxRoutes } from '../numerictextbox/numerictextbox-routes';
import { otpinputRoutes } from '../otp-input/otpinput-routes';
import { pagerRoutes } from '../pager/pager-routes';
import { pdfviewerRoutes } from '../pdfviewer/pdfviewer-routes';
import { pivottableRoutes } from '../pivot-table/pivottable-routes';
import { predefineddialogsRoutes } from '../predefined-dialogs/predefineddialogs-routes';
import { progressbarRoutes } from '../progress-bar/progressbar-routes';
import { querybuilderRoutes } from '../query-builder/querybuilder-routes';
import { rangenavigatorRoutes } from '../range-navigator/rangenavigator-routes';
import { rangesliderRoutes } from '../range-slider/rangeslider-routes';
import { ratingRoutes } from '../rating/rating-routes';
import { ribbonRoutes } from '../ribbon/ribbon-routes';
import { richtexteditorRoutes } from '../rich-text-editor/richtexteditor-routes';
import { scheduleRoutes } from '../schedule/schedule-routes';
import { sidebarRoutes } from '../sidebar/sidebar-routes';
import { signatureRoutes } from '../signature/signature-routes';
import { skeletonRoutes } from '../skeleton/skeleton-routes';
import { smithchartRoutes } from '../smith-chart/smithchart-routes';
import { sparklineRoutes } from '../sparkline/sparkline-routes';
import { speechtotextRoutes } from '../speech-to-text/speechtotext-routes';
import { speeddialRoutes } from '../speed-dial/speeddial-routes';
import { splitterRoutes } from '../splitter/splitter-routes';
import { spreadsheetRoutes } from '../spreadsheet/spreadsheet-routes';
import { stepperRoutes } from '../stepper/stepper-routes';
import { stockchartRoutes } from '../stock-chart/stockchart-routes';
import { tabRoutes } from '../tab/tab-routes';
import { textareaRoutes } from '../textarea/textarea-routes';
import { textboxesRoutes } from '../textboxes/textboxes-routes';
import { threedimensionchartRoutes } from '../three-dimension-chart/threedimensionchart-routes';
import { threedimensioncircularchartRoutes } from '../three-dimension-circular-chart/threedimensioncircularchart-routes';
import { timelineRoutes } from '../timeline/timeline-routes';
import { timepickerRoutes } from '../timepicker/timepicker-routes';
import { toastRoutes } from '../toast/toast-routes';
import { toolbarRoutes } from '../toolbar/toolbar-routes';
import { tooltipRoutes } from '../tooltip/tooltip-routes';
import { treegridRoutes } from '../treegrid/treegrid-routes';
import { treemapRoutes } from '../treemap/treemap-routes';
import { treeviewRoutes } from '../treeview/treeview-routes';
import { uploaderRoutes } from '../uploader/uploader-routes';


export const routes = (
    <HashRouter>
        <Routes>
        {accordionRoutes}
        {aiassistviewRoutes}
        {aicomboboxRoutes}
        {aidiagramRoutes}
        {aidocumenteditorRoutes}
        {aiganttRoutes}
        {aigridRoutes}
        {aiimageeditorRoutes}
        {aikanbanRoutes}
        {aimapsRoutes}
        {aipdfviewerRoutes}
        {aipivottableRoutes}
        {aiquerybuilderRoutes}
        {airichtexteditorRoutes}
        {aischeduleRoutes}
        {aismartpasteRoutes}
        {aismarttextareaRoutes}
        {aispreadsheetRoutes}
        {aitreegridRoutes}
        {appbarRoutes}
        {arcgaugeRoutes}
        {autocompleteRoutes}
        {avatarRoutes}
        {badgeRoutes}
        {barcodeRoutes}
        {breadcrumbRoutes}
        {bulletchartRoutes}
        {buttonRoutes}
        {calendarRoutes}
        {cardRoutes}
        {carouselRoutes}
        {chartRoutes}
        {chatuiRoutes}
        {chipsRoutes}
        {circulargaugeRoutes}
        {colorpickerRoutes}
        {comboboxRoutes}
        {contextmenuRoutes}
        {dashboardlayoutRoutes}
        {datepickerRoutes}
        {daterangepickerRoutes}
        {datetimepickerRoutes}
        {diagramRoutes}
        {dialogRoutes}
        {documenteditorRoutes}
        {dropdownlistRoutes}
        {dropdowntreeRoutes}
        {filemanagerRoutes}
        {floatingactionbuttonRoutes}
        {formvalidatorRoutes}
        {ganttRoutes}
        {gridRoutes}
        {heatmapchartRoutes}
        {imageeditorRoutes}
        {inplaceeditorRoutes}
        {kanbanRoutes}
        {lineargaugeRoutes}
        {listboxRoutes}
        {listviewRoutes}
        {mapsRoutes}
        {markdowneditorRoutes}
        {maskedtextboxRoutes}
        {mentionRoutes}
        {menuRoutes}
        {messageRoutes}
        {multiselectRoutes}
        {multicolumncomboboxRoutes}
        {numerictextboxRoutes}
        {otpinputRoutes}
        {pagerRoutes}
        {pdfviewerRoutes}
        {pivottableRoutes}
        {predefineddialogsRoutes}
        {progressbarRoutes}
        {querybuilderRoutes}
        {rangenavigatorRoutes}
        {rangesliderRoutes}
        {ratingRoutes}
        {ribbonRoutes}
        {richtexteditorRoutes}
        {scheduleRoutes}
        {sidebarRoutes}
        {signatureRoutes}
        {skeletonRoutes}
        {smithchartRoutes}
        {sparklineRoutes}
        {speechtotextRoutes}
        {speeddialRoutes}
        {splitterRoutes}
        {spreadsheetRoutes}
        {stepperRoutes}
        {stockchartRoutes}
        {tabRoutes}
        {textareaRoutes}
        {textboxesRoutes}
        {threedimensionchartRoutes}
        {threedimensioncircularchartRoutes}
        {timelineRoutes}
        {timepickerRoutes}
        {toastRoutes}
        {toolbarRoutes}
        {tooltipRoutes}
        {treegridRoutes}
        {treemapRoutes}
        {treeviewRoutes}
        {uploaderRoutes}

            <Route path= '/' element={<Navigate replace to="tailwind3/grid/overview" />} />
        </Routes>
    </HashRouter>
)

export const category: any = {"accordion": {"default":{"name":"Default Functionalities","category":"Accordion"},"templates":{"name":"Templates","category":"Accordion"},"icon":{"name":"Icons","category":"Accordion"},"keyboard-interaction":{"name":"Keyboard Interaction","category":"Accordion"},"defaultSample":"accordion/default"},
"ai-assistview": {"default":{"name":"Default Functionalities","category":"AI AssistView"},"custom-views":{"name":"Custom Views","category":"AI AssistView"},"streaming":{"name":"Streaming Response","category":"AI AssistView"},"template":{"name":"Template","category":"AI AssistView"},"dialog":{"name":"Dialog","category":"Integration"},"defaultSample":"ai-assistview/default"},
"ai-combo-box": {"semantic-searching":{"name":"Semantic Searching (Embedding)","category":"ComboBox"},"defaultSample":"ai-combo-box/semantic-searching"},
"ai-diagram": {"text-to-flowchart":{"name":"Text to Flowchart","category":"Diagram"},"text-to-mindmap":{"name":"Text to MindMap","category":"Diagram"},"defaultSample":"ai-diagram/text-to-flowchart"},
"ai-document-editor": {"writing-assist":{"name":"Writing Assist","category":"Document Editor"},"smart-editor":{"name":"Smart Editor","category":"Document Editor"},"defaultSample":"ai-document-editor/writing-assist"},
"ai-gantt": {"task-prioritize":{"name":"Smart Task Prioritizer","category":"Gantt Chart"},"progress-predictor":{"name":"Smart Progress Predictor","category":"Gantt Chart"},"resource-manager":{"name":"Smart Resource Allocation","category":"Gantt Chart"},"defaultSample":"ai-gantt/task-prioritize"},
"ai-grid": {"anomaly-detection":{"name":"Anomaly Detection","category":"Data Grid"},"semantic-filtering":{"name":"Semantic Filtering (Embedding)","category":"Data Grid"},"defaultSample":"ai-grid/anomaly-detection"},
"ai-image-editor": {"smart-image-editor":{"name":"Smart Image Editor","category":"Image Editor"},"defaultSample":"ai-image-editor/smart-image-editor"},
"ai-kanban": {"task-recommendation":{"name":"AITask Recommendation","category":"Kanban"},"sentiment-analysis":{"name":"Sentiment Analysis","category":"Kanban"},"defaultSample":"ai-kanban/task-recommendation"},
"ai-maps": {"weather-prediction":{"name":"Weather Prediction","category":"Maps"},"defaultSample":"ai-maps/weather-prediction"},
"ai-pdfviewer": {"smartfill":{"name":"Smart Fill","category":"PDF Viewer"},"smartredact":{"name":"Smart Redact","category":"PDF Viewer"},"summarizer":{"name":"Summarizer","category":"PDF Viewer"},"defaultSample":"ai-pdfviewer/smartfill"},
"ai-pivot-table": {"smart-pivot":{"name":"Smart Pivot","category":"Pivot Table"},"defaultSample":"ai-pivot-table/smart-pivot"},
"ai-querybuilder": {"natural-language-query":{"name":"Natural Language Query","category":"Query Builder"},"defaultSample":"ai-querybuilder/natural-language-query"},
"ai-rich-text-editor": {"assistant":{"name":"AI Assistant","category":"Rich Text Editor"},"defaultSample":"ai-rich-text-editor/assistant"},
"ai-schedule": {"smart-event-window":{"name":"Smart Event Window","category":"Scheduler"},"defaultSample":"ai-schedule/smart-event-window"},
"ai-smart-paste": {"default":{"name":"Default Functionalities","category":"Smart Paste"},"defaultSample":"ai-smart-paste/default"},
"ai-smart-textarea": {"default":{"name":"Smart TextArea","category":"Smart TextArea"},"defaultSample":"ai-smart-textarea/default"},
"ai-spreadsheet": {"smart-spreadsheet":{"name":"Smart Spreadsheet","category":"Spreadsheet"},"defaultSample":"ai-spreadsheet/smart-spreadsheet"},
"ai-tree-grid": {"adaptive-datastructuring":{"name":"Adaptive Data Structuring","category":"Tree Grid"},"defaultSample":"ai-tree-grid/adaptive-datastructuring"},
"appbar": {"default":{"name":"Default Functionalities","category":"AppBar"},"color":{"name":"Color","category":"AppBar"},"defaultSample":"appbar/default"},
"arc-gauge": {"default-functionalities":{"name":"Default Functionalities","category":"Arc Gauge"},"customer-satisfaction-score":{"name":"Customer Satisfaction Score","category":"Arc Gauge"},"key-performance-indicator":{"name":"Key Performance Indicator","category":"Arc Gauge"},"patterns":{"name":"Patterns","category":"Arc Gauge"},"defaultSample":"arc-gauge/default-functionalities"},
"auto-complete": {"default":{"name":"Default Functionalities","category":"AutoComplete"},"grouping-icon":{"name":"Grouping and Icons","category":"AutoComplete"},"data-binding":{"name":"Data Binding","category":"AutoComplete"},"object-value-binding":{"name":"Object Value Binding","category":"AutoComplete"},"disabled-items":{"name":"Disabled Items","category":"AutoComplete"},"template":{"name":"Templates","category":"AutoComplete"},"resize":{"name":"Popup Resize","category":"AutoComplete"},"virtual-scroll":{"name":"Virtualization","category":"AutoComplete"},"highlight":{"name":"Highlight","category":"AutoComplete"},"custom-filtering":{"name":"Custom Filtering","category":"AutoComplete"},"diacritics-filtering":{"name":"Diacritics Filtering","category":"AutoComplete"},"defaultSample":"auto-complete/default"},
"avatar": {"default":{"name":"Default","category":"Avatar"},"types":{"name":"Types","category":"Avatar"},"badge":{"name":"Badge","category":"Integration"},"listview":{"name":"ListView","category":"Integration"},"card":{"name":"Card","category":"Integration"},"defaultSample":"avatar/default"},
"badge": {"default":{"name":"Default","category":"Badge"},"types":{"name":"Types","category":"Badge"},"notification":{"name":"Notification","category":"Badge"},"listview":{"name":"ListView","category":"Integration"},"accordion":{"name":"Accordion","category":"Integration"},"toolbar":{"name":"Toolbar","category":"Integration"},"defaultSample":"badge/default"},
"barcode": {"ean8":{"name":"EAN-8","category":"Getting Started"},"code128":{"name":"Code 128","category":"Getting Started"},"code128A":{"name":"Code 128A","category":"Getting Started"},"code128B":{"name":"Code 128B","category":"Getting Started"},"code128C":{"name":"Code 128C","category":"Getting Started"},"code93":{"name":"Code 93","category":"Getting Started"},"code32":{"name":"Code 32","category":"Getting Started"},"default-functionality":{"name":"Codabar","category":"Getting Started"},"ean13":{"name":"EAN-13","category":"Getting Started"},"upca":{"name":"UPC-A","category":"Getting Started"},"upce":{"name":"UPC-E","category":"Getting Started"},"code39":{"name":"Code39","category":"Getting Started"},"code39Extd":{"name":"Code 39 Extended","category":"Getting Started"},"qrcode":{"name":"QR Code","category":"Getting Started"},"datamatrix":{"name":"Data Matrix","category":"Getting Started"},"defaultSample":"barcode/ean8"},
"breadcrumb": {"default":{"name":"Default Functionalities","category":"Breadcrumb"},"bind-to-location":{"name":"Bind to Location","category":"Breadcrumb"},"template-and-customization":{"name":"Template and Customization","category":"Breadcrumb"},"overflow-modes":{"name":"Overflow Modes","category":"Breadcrumb"},"events":{"name":"Events","category":"Breadcrumb"},"keyboard-navigation":{"name":"Keyboard Navigation","category":"Breadcrumb"},"address-bar":{"name":"Address Bar","category":"Use Case"},"defaultSample":"breadcrumb/default"},
"bullet-chart": {"default":{"name":"Default","category":"Bullet Chart"},"multiple-data":{"name":"Multiple Data","category":"Bullet Chart"},"right-to-left":{"name":"RTL","category":"Bullet Chart"},"bar-customization":{"name":"Feature and Target Bar","category":"Bullet Chart"},"customization":{"name":"Range and Label Settings","category":"Bullet Chart"},"tooltip":{"name":"Tooltip Template","category":"Bullet Chart"},"orientation":{"name":"Orientation","category":"Bullet Chart"},"bullet-legend":{"name":"Legend","category":"Bullet Chart"},"defaultSample":"bullet-chart/default"},
"button": {"default":{"name":"Default Functionalities","category":"Button"},"button-group":{"name":"Button Group","category":"Button"},"checkbox":{"name":"Checkbox","category":"Button"},"radio-button":{"name":"Radio Button","category":"Button"},"dropdown-button":{"name":"Dropdown Menu","category":"Button"},"split-button":{"name":"Split Button","category":"Button"},"switch":{"name":"Switch","category":"Button"},"progress-button":{"name":"Progress Button","category":"Button"},"defaultSample":"button/default"},
"calendar": {"default":{"name":"Default Functionalities","category":"Calendar"},"date-range":{"name":"Date Range","category":"Calendar"},"disabled":{"name":"Disabled Dates","category":"Calendar"},"special-dates":{"name":"Special Dates","category":"Calendar"},"multi-selection":{"name":"Multiple Selection","category":"Calendar"},"month-picker":{"name":"Month Picker","category":"Calendar"},"islamic-calendar":{"name":"Islamic Calendar","category":"Calendar"},"defaultSample":"calendar/default"},
"card": {"basic":{"name":"Basic Card","category":"Cards"},"vertical":{"name":"Vertical Card","category":"Cards"},"horizontal":{"name":"Horizontal Card","category":"Cards"},"swipeable":{"name":"Swipeable Card","category":"Cards"},"flip":{"name":"Flip Card","category":"Cards"},"reveal":{"name":"Reveal Card","category":"Cards"},"tile":{"name":"Tile View","category":"Cards"},"defaultSample":"card/basic"},
"carousel": {"default":{"name":"Default Functionalities","category":"Carousel"},"data-binding":{"name":"Data Binding","category":"Carousel"},"templates":{"name":"Templates","category":"Carousel"},"partial-visible":{"name":"Partial Visible","category":"Carousel"},"indicator-type":{"name":"Indicator Type","category":"Carousel"},"keyboard-navigation":{"name":"Keyboard Navigation","category":"Carousel"},"api":{"name":"API","category":"Carousel"},"defaultSample":"carousel/default"},
"chart": {"overview":{"name":"Overview","category":"Charts"},"line":{"name":"Line","category":"Line Charts"},"spline":{"name":"Spline","category":"Line Charts"},"stepline":{"name":"Step Line","category":"Line Charts"},"dashed-line":{"name":"Dashed Line","category":"Line Charts"},"custom-animation":{"name":"Custom Animation","category":"Line Charts"},"spline-inversed":{"name":"Inversed Spline","category":"Line Charts"},"line-segments":{"name":"Line Zone","category":"Line Charts"},"line-multi-line":{"name":"Multi Colored Line","category":"Line Charts"},"stacked-line":{"name":"Stacked Line","category":"Line Charts"},"stacked-line-100":{"name":"100% Stacked Line","category":"Line Charts"},"area":{"name":"Area","category":"Area Charts"},"spline-area":{"name":"Spline Area","category":"Area Charts"},"steparea":{"name":"Step Area","category":"Area Charts"},"step-line-without-riser":{"name":"Step Without Riser","category":"Area Charts"},"rangesteparea":{"name":"Range Step Area","category":"Area Charts"},"rangearea":{"name":"Range Area","category":"Area Charts"},"spline-range-area":{"name":"Spline Range Area","category":"Area Charts"},"stacked-area":{"name":"Stacked Area","category":"Area Charts"},"stacked-step-area":{"name":"Stacked Step Area","category":"Area Charts"},"stacked-area100":{"name":"100% Stacked Area","category":"Area Charts"},"area-empty":{"name":"Area - Empty Points","category":"Area Charts"},"area-negative-points":{"name":"Area - Negative Points","category":"Area Charts"},"area-segments":{"name":"Area Zone","category":"Area Charts"},"column":{"name":"Column","category":"Bar Charts"},"grouped-column":{"name":"Grouped Column","category":"Bar Charts"},"column-placement":{"name":"Back to Back Column","category":"Bar Charts"},"column-drilldown":{"name":"Column Drilldown","category":"Bar Charts"},"range-column":{"name":"Range Column","category":"Bar Charts"},"range-bar":{"name":"Inversed Range Column","category":"Bar Charts"},"cylindrical-column":{"name":"Cylindrical Column","category":"Bar Charts"},"bar":{"name":"Bar","category":"Bar Charts"},"rounded-column":{"name":"Rounded Bar","category":"Bar Charts"},"stacked-column":{"name":"Stacked Column","category":"Bar Charts"},"stacked-column100":{"name":"100% Stacked Column","category":"Bar Charts"},"stacked-bar":{"name":"Stacked Bar","category":"Bar Charts"},"stacked-bar100":{"name":"100% Stacked Bar","category":"Bar Charts"},"negative-stack":{"name":"Negative Stack","category":"Bar Charts"},"hilo":{"name":"Hilo","category":"Financial Charts"},"hiloopenclose":{"name":"Hilo Open Close","category":"Financial Charts"},"candle":{"name":"Candle","category":"Financial Charts"},"scatter":{"name":"Scatter","category":"Scatter and Bubble"},"bubble":{"name":"Bubble","category":"Scatter and Bubble"},"default-pie":{"name":"Pie","category":"Accumulation Charts"},"pie-radius":{"name":"Pie with Various Radius","category":"Accumulation Charts"},"doughnut":{"name":"Doughnut","category":"Accumulation Charts"},"pyramid":{"name":"Pyramid","category":"Accumulation Charts"},"funnel":{"name":"Funnel","category":"Accumulation Charts"},"pie-legend":{"name":"Pie with Legend","category":"Accumulation Charts"},"semi-pie":{"name":"Semi Pie","category":"Accumulation Charts"},"smartlabels":{"name":"Smart Labels","category":"Accumulation Charts"},"drilldown":{"name":"Drilldown","category":"Accumulation Charts"},"grouping":{"name":"Grouping","category":"Accumulation Charts"},"pie-empty-point":{"name":"Empty Points","category":"Accumulation Charts"},"pie-rounded-corner":{"name":"Rounded Corner","category":"Accumulation Charts"},"pie-with-pattern":{"name":"Pie With Patterns","category":"Accumulation Charts"},"update-pie-data-source":{"name":"Live Update","category":"Accumulation Charts"},"waterfall":{"name":"Waterfall","category":"Other Types"},"horizontal-waterfall":{"name":"Horizontal Waterfall","category":"Other Types"},"histogram":{"name":"Histogram","category":"Other Types"},"box-whisker":{"name":"Box and Whisker","category":"Other Types"},"error-bar":{"name":"Error Bar","category":"Other Types"},"trend-lines":{"name":"Trendlines","category":"Other Types"},"combination-series":{"name":"Combination Series","category":"Other Types"},"pareto":{"name":"Pareto Chart","category":"Other Types"},"adindicator":{"name":"Accumulation Distribution","category":"Technical Indicators"},"atrindicator":{"name":"ATR","category":"Technical Indicators"},"bollinger":{"name":"Bollinger","category":"Technical Indicators"},"ema":{"name":"EMA","category":"Technical Indicators"},"macd":{"name":"MACD","category":"Technical Indicators"},"momentum":{"name":"Momentum","category":"Technical Indicators"},"rsi":{"name":"RSI","category":"Technical Indicators"},"sma":{"name":"SMA","category":"Technical Indicators"},"stochastic":{"name":"Stochastic","category":"Technical Indicators"},"tma":{"name":"TMA","category":"Technical Indicators"},"performance":{"name":"Benchmark","category":"Performance"},"update-spline":{"name":"Spline updating each second","category":"Real-time Charts"},"live-stock-data":{"name":"Live stock data","category":"Real-time Charts"},"update-data-source":{"name":"Update data source","category":"Real-time Charts"},"click-add-point":{"name":"Click to add a point","category":"Real-time Charts"},"live-data-sorting":{"name":"Live Data Sorting","category":"Real-time Charts"},"polar-line":{"name":"Line","category":"Polar Radar"},"polar-spline":{"name":"Spline","category":"Polar Radar"},"polar-area":{"name":"Area","category":"Polar Radar"},"polar-stackedarea":{"name":"Stacked Area","category":"Polar Radar"},"polar-scatter":{"name":"Scatter","category":"Polar Radar"},"polar-column":{"name":"Column","category":"Polar Radar"},"polar-stackedcolumn":{"name":"Wind Rose","category":"Polar Radar"},"polar-rangecolumn":{"name":"Range Column","category":"Polar Radar"},"local-data":{"name":"Local Data","category":"Data Binding"},"remote-data":{"name":"Remote Data","category":"Data Binding"},"lazy-loading":{"name":"Lazy Loading","category":"Data Binding"},"numeric-axis":{"name":"Numeric Axis","category":"Chart Axes"},"datetime":{"name":"DateTime Axis","category":"Chart Axes"},"datetime-category":{"name":"DateTime Category Axis","category":"Chart Axes"},"category":{"name":"Category Axis","category":"Chart Axes"},"indexed-axis":{"name":"Indexed Category Axis","category":"Chart Axes"},"log":{"name":"Log Axis","category":"Chart Axes"},"multiple-axis":{"name":"Multiple Axis","category":"Chart Axes"},"inversed":{"name":"Inversed Axis","category":"Chart Axes"},"stripline":{"name":"Stripline","category":"Chart Axes"},"strip-line-recurrence":{"name":"Strip Line Recurrence","category":"Chart Axes"},"smart-axis-labels":{"name":"Smart Labels","category":"Chart Axes"},"multi-level-label":{"name":"Multi Level Labels","category":"Chart Axes"},"axis-crossing":{"name":"Axes Crossing","category":"Chart Axes"},"sorting":{"name":"Sorting","category":"Chart Customization"},"symbols":{"name":"Symbols","category":"Chart Customization"},"rtl":{"name":"RTL","category":"Chart Customization"},"annotation":{"name":"Annotation","category":"Chart Customization"},"synchronized-chart":{"name":"Synchronized Charts","category":"Chart Customization"},"datalabel-template":{"name":"DataLabel Template","category":"Chart Customization"},"tooltip-template":{"name":"Tooltip Template","category":"Chart Customization"},"vertical":{"name":"Vertical Chart","category":"Chart Customization"},"empty-point":{"name":"Empty Points","category":"Chart Customization"},"range-color-mapping":{"name":"Range Color Mapping","category":"Chart Customization"},"series-animation":{"name":"Animation","category":"Chart Customization"},"print":{"name":"Print","category":"Print and Export"},"export":{"name":"Export","category":"Print and Export"},"selection":{"name":"Selection","category":"User Interaction"},"range-selection":{"name":"Range Selection","category":"User Interaction"},"keyboard":{"name":"Keyboard Navigation","category":"User Interaction"},"crosshair":{"name":"Crosshair","category":"User Interaction"},"trackball":{"name":"Trackball","category":"User Interaction"},"zoom":{"name":"Zooming and Panning","category":"User Interaction"},"pagination":{"name":"Pagination","category":"User Interaction"},"data-editing":{"name":"Data Editing","category":"User Interaction"},"defaultSample":"chart/overview"},
"chat-ui": {"default":{"name":"Default Functionalities","category":"Chat UI"},"loadOn-demand":{"name":"Load On-demand","category":"Chat UI"},"template":{"name":"Template","category":"Chat UI"},"api":{"name":"API","category":"Chat UI"},"chat-integration":{"name":"Use Case","category":"Integration"},"defaultSample":"chat-ui/default"},
"chips": {"default":{"name":"Default Functionalities","category":"Chips"},"api":{"name":"API","category":"Chips"},"draganddrop":{"name":"Draggable Chips","category":"Chips"},"defaultSample":"chips/default"},
"circular-gauge": {"default-functionalities":{"name":"Default Functionalities","category":"Circular Gauge"},"ticks-and-labels":{"name":"Ticks and Labels","category":"Axis"},"multiple-axes":{"name":"Multiple Axes","category":"Axis"},"custom-labels":{"name":"Custom Labels","category":"Axis"},"range-color-for-axis":{"name":"Range Color for Axis","category":"Axis"},"axis-background":{"name":"Axis Background","category":"Axis"},"pointer-types":{"name":"Pointer Types","category":"Pointer"},"text-pointer":{"name":"Text Pointer","category":"Pointer"},"image-pointer":{"name":"Image Pointer","category":"Pointer"},"range-customization":{"name":"Range Customization","category":"Range"},"multiple-ranges":{"name":"Multiple Ranges","category":"Range"},"legend":{"name":"Legend","category":"Range"},"arc-gauge":{"name":"Arc Gauge","category":"Arc Gauge"},"semi-circular-gauge":{"name":"Semi-circular Gauge","category":"Arc Gauge"},"pointer-ranges-drag":{"name":"Pointer & Ranges Drag","category":"User Interaction"},"tooltip":{"name":"Tooltip","category":"User Interaction"},"print-export":{"name":"Print & Export","category":"Print & Export"},"clock":{"name":"Clock","category":"Use Cases"},"radial-slider":{"name":"Radial Slider","category":"Use Cases"},"direction-compass":{"name":"Direction Compass","category":"Use Cases"},"speedometer":{"name":"Speedometer","category":"Use Cases"},"sleep-tracker":{"name":"Sleep Tracker","category":"Use Cases"},"data-sample":{"name":"Data Sample","category":"Use Cases"},"apple-watch-rings":{"name":"Apple Watch Rings","category":"Use Cases"},"defaultSample":"circular-gauge/default-functionalities"},
"color-picker": {"default":{"name":"Default Functionalities","category":"Color Picker"},"inline":{"name":"Inline Mode","category":"Color Picker"},"custom":{"name":"Custom Palettes","category":"Color Picker"},"api":{"name":"API","category":"Color Picker"},"defaultSample":"color-picker/default"},
"combo-box": {"default":{"name":"Default Functionalities","category":"ComboBox"},"grouping-icon":{"name":"Grouping and Icons","category":"ComboBox"},"data-binding":{"name":"Data Binding","category":"ComboBox"},"object-value-binding":{"name":"Object Value Binding","category":"ComboBox"},"disabled-items":{"name":"Disabled Items","category":"ComboBox"},"custom-value":{"name":"Custom Value","category":"ComboBox"},"filtering":{"name":"Filtering","category":"ComboBox"},"template":{"name":"Templates","category":"ComboBox"},"resize":{"name":"Popup Resize","category":"ComboBox"},"virtual-scroll":{"name":"Virtualization","category":"ComboBox"},"cascading":{"name":"Cascading","category":"ComboBox"},"diacritics-filtering":{"name":"Diacritics Filtering","category":"ComboBox"},"defaultSample":"combo-box/default"},
"context-menu": {"default":{"name":"Default Functionalities","category":"Context Menu"},"template":{"name":"Template","category":"Context Menu"},"defaultSample":"context-menu/default"},
"dashboard-layout": {"default":{"name":"Default Functionalities","category":"Dashboard Layout"},"predefined-layouts":{"name":"Predefined Layouts","category":"Dashboard Layout"},"properties":{"name":"API","category":"Dashboard Layout"},"dynamic":{"name":"Editable Dashboard","category":"Dashboard Layout"},"analytics-dashboard":{"name":"SEO Analytics Dashboard","category":"Use Case"},"defaultSample":"dashboard-layout/default"},
"datepicker": {"default":{"name":"Default Functionalities","category":"DatePicker"},"date-range":{"name":"Date Range","category":"DatePicker"},"date-format":{"name":"Format","category":"DatePicker"},"disabled":{"name":"Disabled Dates","category":"DatePicker"},"special-dates":{"name":"Special Dates","category":"DatePicker"},"month-picker":{"name":"Month Picker","category":"DatePicker"},"input-mask":{"name":"Mask Support","category":"DatePicker"},"defaultSample":"datepicker/default"},
"daterangepicker": {"default":{"name":"Default Functionalities","category":"DateRangePicker"},"date-range":{"name":"Date Range","category":"DateRangePicker"},"day-span":{"name":"Day Span","category":"DateRangePicker"},"date-format":{"name":"Format","category":"DateRangePicker"},"presets":{"name":"Preset Ranges","category":"DateRangePicker"},"month-range-picker":{"name":"Month Range Picker","category":"DateRangePicker"},"defaultSample":"daterangepicker/default"},
"datetimepicker": {"default":{"name":"Default Functionalities","category":"DateTimePicker"},"date-time-range":{"name":"DateTime Range","category":"DateTimePicker"},"date-time-format":{"name":"Format","category":"DateTimePicker"},"disabled":{"name":"Disabled Dates","category":"DateTimePicker"},"special-dates":{"name":"Special Dates","category":"DateTimePicker"},"input-mask":{"name":"Mask Support","category":"DateTimePicker"},"defaultSample":"datetimepicker/default"},
"diagram": {"default-functionality":{"name":"Flow Chart","category":"Getting Started"},"shape-gallery":{"name":"Shapes","category":"Getting Started"},"getting-started-node":{"name":"Nodes","category":"Getting Started"},"custom-shapes":{"name":"HTML Shapes","category":"Getting Started"},"connectors":{"name":"Connectors","category":"Getting Started"},"line-routing":{"name":"LineRouting","category":"Getting Started"},"avoid-connector-overlap":{"name":"Avoid Connector Overlap","category":"Getting Started"},"getting-started-annotation":{"name":"Annotations","category":"Getting Started"},"port":{"name":"Ports","category":"Getting Started"},"swim-lane":{"name":"SwimLane","category":"Getting Started"},"grouping-and-ordering":{"name":"Grouping and Ordering","category":"Getting Started"},"diagram-events":{"name":"Events","category":"Getting Started"},"history-manager":{"name":"HistoryManager","category":"Getting Started"},"commands":{"name":"Commands","category":"Getting Started"},"constraints":{"name":"Constraints","category":"Getting Started"},"tool-tip":{"name":"Tooltip","category":"Getting Started"},"symbol-palette":{"name":"Symbol Palette","category":"Getting Started"},"zoom-and-pan":{"name":"Zooming and Panning","category":"Interactive Features"},"snapping":{"name":"Snapping","category":"Interactive Features"},"scrolling":{"name":"Scrolling","category":"Interactive Features"},"drawing-tool":{"name":"Drawing Tools","category":"Interactive Features"},"key-board-functions":{"name":"Keyboard Interaction","category":"Interactive Features"},"quick-commands":{"name":"User Handle","category":"Interactive Features"},"overview":{"name":"Overview Panel","category":"Interactive Features"},"hierarchical-model":{"name":"Hierarchical Tree","category":"Automatic Layouts"},"organization-model":{"name":"Organization Chart","category":"Automatic Layouts"},"flowchart-layout":{"name":"Flowchart Layout","category":"Automatic Layouts"},"radial-tree":{"name":"Radial Tree","category":"Automatic Layouts"},"mind-map":{"name":"Mind Map","category":"Automatic Layouts"},"symmetric-layout":{"name":"Symmetric Layout","category":"Automatic Layouts"},"complex-hierarchical-tree":{"name":"Complex Hierarchical Tree","category":"Automatic Layouts"},"right-to-left-tree":{"name":"RTL Tree","category":"Automatic Layouts"},"pert-chart":{"name":"PERT Chart","category":"Automatic Layouts"},"hierarchical-layout-with-multiple-roots":{"name":"Hierarchical Layout With Multiple Roots","category":"Automatic Layouts"},"local-data":{"name":"Local Data","category":"Data Binding"},"remote-data":{"name":"Remote Data","category":"Data Binding"},"virtualize":{"name":"Virtualization","category":"Performance"},"serialization":{"name":"Serialization","category":"Save and Restore"},"print-export":{"name":"Print and Export","category":"Print and Export"},"bpmn-editor":{"name":"BPMN Editor","category":"Use Case Diagram"},"logic-circuit":{"name":"Logic circuit Diagram","category":"Use Case Diagram"},"activity":{"name":"UML Activity Diagram","category":"Use Case Diagram"},"sequence-diagram":{"name":"UML Sequence Diagram","category":"Use Case Diagram"},"activity-class":{"name":"UML Class Diagram","category":"Use Case Diagram"},"venn-diagram":{"name":"Venn Diagram","category":"Real-Time Diagrams"},"fishbone-diagram":{"name":"Fishbone Diagram","category":"Real-Time Diagrams"},"workflow-editor":{"name":"Workflow Diagram","category":"Real-Time Diagrams"},"network-diagram":{"name":"Network Diagram","category":"Real-Time Diagrams"},"tree-view":{"name":"Diagram Binding With TreeView","category":"Real-Time Diagrams"},"flow-execution":{"name":"Flow Execution","category":"Real-Time Diagrams"},"defaultSample":"diagram/default-functionality"},
"dialog": {"default":{"name":"Default Functionalities","category":"Dialog"},"modal-dialog":{"name":"Modal","category":"Dialog"},"template":{"name":"Template","category":"Dialog"},"dialog-contents-via-ajax":{"name":"Ajax Content","category":"Dialog"},"draggable":{"name":"Draggable","category":"Dialog"},"resizable":{"name":"Resizable","category":"Dialog"},"position":{"name":"Positioning","category":"Dialog"},"animation":{"name":"Animation","category":"Dialog"},"multiple-dialogs":{"name":"Multiple Dialogs","category":"Dialog"},"components-dialog":{"name":"Components inside Dialog","category":"Dialog"},"defaultSample":"dialog/default"},
"document-editor": {"default":{"name":"Default Functionalities","category":"Document Editor"},"bindUI-to-document":{"name":"Bind UI To Document","category":"Document Editor"},"document-list":{"name":"Document List","category":"File Management"},"mail-merge":{"name":"Mail Merge","category":"Mail Merge"},"comments":{"name":"Comments","category":"Review"},"track-changes":{"name":"Track Changes","category":"Review"},"document-protection":{"name":"Document Protection","category":"Security"},"custom-context-menu":{"name":"Custom Context Menu","category":"Customization"},"auto-save":{"name":"Auto Save","category":"Customization"},"toolbar-customization":{"name":"Toolbar Customization","category":"Customization"},"colorpicker-customization":{"name":"Color Picker Customization","category":"Customization"},"right-to-left":{"name":"Right To Left","category":"RTL"},"print":{"name":"Print","category":"Exporting"},"advanced-exporting":{"name":"Advanced Exporting","category":"Exporting"},"table-of-contents":{"name":"Table of Contents","category":"References"},"notes":{"name":"Footnotes and Endnotes","category":"References"},"autoshapes":{"name":"Auto Shapes","category":"Shapes"},"web-layout":{"name":"Web Layout","category":"View"},"ruler":{"name":"Ruler","category":"View"},"heading-navigation":{"name":"Heading Navigation","category":"View"},"character-formatting":{"name":"Character Formatting","category":"Editing Features"},"paragraph-formatting":{"name":"Paragraph Formatting","category":"Editing Features"},"styles":{"name":"Styles","category":"Editing Features"},"bullets-and-numbering":{"name":"Bullets and Numbering","category":"Editing Features"},"links-and-bookmarks":{"name":"Hyperlinks and Bookmarks","category":"Editing Features"},"table-formatting":{"name":"Table Formatting","category":"Editing Features"},"section-formatting":{"name":"Section Formatting","category":"Editing Features"},"headers-and-footers":{"name":"Headers and Footers","category":"Editing Features"},"form-fields":{"name":"Form Fields","category":"Editing Features"},"multiple-columns":{"name":"Multiple Columns","category":"Editing Features"},"chart":{"name":"Chart Preservation","category":"Charts"},"defaultSample":"document-editor/default"},
"drop-down-list": {"default":{"name":"Default Functionalities","category":"Dropdown List"},"grouping-icon":{"name":"Grouping and Icons","category":"Dropdown List"},"data-binding":{"name":"Data Binding","category":"Dropdown List"},"object-value-binding":{"name":"Object Value Binding","category":"Dropdown List"},"disabled-items":{"name":"Disabled Items","category":"Dropdown List"},"filtering":{"name":"Filtering","category":"Dropdown List"},"template":{"name":"Templates","category":"Dropdown List"},"resize":{"name":"Popup Resize","category":"Dropdown List"},"virtual-scroll":{"name":"Virtualization","category":"Dropdown List"},"cascading":{"name":"Cascading","category":"Dropdown List"},"inline":{"name":"Inline","category":"Dropdown List"},"diacritics-filtering":{"name":"Diacritics Filtering","category":"Dropdown List"},"defaultSample":"drop-down-list/default"},
"drop-down-tree": {"default":{"name":"Default Functionalities","category":"Dropdown Tree"},"icons":{"name":"Icons and Images","category":"Dropdown Tree"},"checkbox":{"name":"Checkbox","category":"Dropdown Tree"},"multiple-selection":{"name":"Multiple Selection","category":"Dropdown Tree"},"template":{"name":"Template","category":"Dropdown Tree"},"custom-template":{"name":"Custom Template","category":"Dropdown Tree"},"filtering":{"name":"Filtering","category":"Dropdown Tree"},"local-data":{"name":"Local Data","category":"Data Binding"},"remote-data":{"name":"Remote Data","category":"Data Binding"},"defaultSample":"drop-down-tree/default"},
"file-manager": {"overview":{"name":"Overview","category":"File Manager"},"flat-data":{"name":"Flat Data","category":"File Manager"},"custom-thumbnail":{"name":"Custom Thumbnails","category":"File Manager"},"default":{"name":"API","category":"File Manager"},"drag-drop":{"name":"Drag and Drop","category":"File Manager"},"directory-upload":{"name":"Directory upload","category":"File Manager"},"virtualization":{"name":"Virtualization","category":"File Manager"},"file-upload":{"name":"File Upload","category":"Use Case"},"access-control":{"name":"Access Control","category":"Use Case"},"azure-service":{"name":"Azure Blob Provider","category":"Cloud Service Providers"},"nodejs-file-provider":{"name":"NodeJS File Provider","category":"Cloud Service Providers"},"AmazonS3Provider":{"name":"Amazon S3 File Provider","category":"Cloud Service Providers"},"firebase":{"name":"Firebase Realtime File Provider","category":"Cloud Service Providers"},"ibm-cos-node-file-provider":{"name":"IBM Cloud File Provider","category":"Cloud Service Providers"},"defaultSample":"file-manager/overview"},
"floating-action-button": {"overview":{"name":"Overview","category":"Floating Action Button"},"default":{"name":"Default Functionalities","category":"Floating Action Button"},"position":{"name":"Position","category":"Floating Action Button"},"styles":{"name":"Styles","category":"Floating Action Button"},"defaultSample":"floating-action-button/overview"},
"form-validator": {"default":{"name":"Default Functionalities","category":"Form Validator"},"defaultSample":"form-validator/default"},
"gantt": {"overview":{"name":"Overview","category":"Gantt Chart"},"default":{"name":"Default Functionalities","category":"Gantt Chart"},"editing":{"name":"Editing","category":"Gantt Chart"},"virtual-scroll":{"name":"Virtual Scroll","category":"Gantt Chart"},"undo-redo":{"name":"Undo Redo","category":"Gantt Chart"},"loading-animation":{"name":"Loading Animation","category":"Gantt Chart"},"local-data":{"name":"Local Data","category":"Data Binding"},"load-on-demand":{"name":"Big Data Set","category":"Data Binding"},"remote-data":{"name":"Remote Data","category":"Data Binding"},"self-reference-data":{"name":"Self Reference Data","category":"Data Binding"},"taskMode":{"name":"Task Scheduling Mode","category":"Scheduling Concepts"},"work-week":{"name":"Workweek","category":"Scheduling Concepts"},"working-time-range":{"name":"Working Time Range","category":"Scheduling Concepts"},"holidays":{"name":"Holidays","category":"Scheduling Concepts"},"unscheduled-task":{"name":"Unscheduled Tasks","category":"Scheduling Concepts"},"timezone":{"name":"Timezone","category":"Scheduling Concepts"},"critical-path":{"name":"Critical Path","category":"Scheduling Concepts"},"baseline":{"name":"Baseline","category":"Scheduling Concepts"},"event-markers":{"name":"Event Markers","category":"Scheduling Concepts"},"indicators":{"name":"Indicators","category":"Scheduling Concepts"},"timeline":{"name":"Timeline API","category":"Timeline"},"zooming":{"name":"Zooming","category":"Timeline"},"column-template":{"name":"Column Template","category":"Columns"},"header-template":{"name":"Header Template","category":"Columns"},"reorder":{"name":"Reorder","category":"Columns"},"resizing":{"name":"Resizing","category":"Columns"},"column-menu":{"name":"Column Menu","category":"Columns"},"show-hide-column":{"name":"Show or Hide Column","category":"Columns"},"resource-allocation":{"name":"Resource Allocation","category":"Resource"},"resource-view":{"name":"Resource View","category":"Resource"},"resource-multi-taskbar":{"name":"Resource Multi Taskbar","category":"Resource"},"sorting":{"name":"Default Sorting","category":"Sorting"},"sorting-api":{"name":"Sorting API","category":"Sorting"},"taskbar-template":{"name":"Taskbar Template","category":"Templates"},"timeline-template":{"name":"Timeline Template","category":"Templates"},"tasklabel-template":{"name":"Task Label Template","category":"Templates"},"tooltip-template":{"name":"Tooltip Template","category":"Templates"},"toolbar-template":{"name":"Toolbar Template","category":"Templates"},"filtering":{"name":"Default Filtering","category":"Filtering"},"advanced-filtering":{"name":"Advanced Filtering","category":"Filtering"},"exporting":{"name":"Exporting","category":"Exporting"},"advanced-exporting":{"name":"Advanced Exporting","category":"Exporting"},"selection":{"name":"Selection","category":"Miscellaneous"},"context-menu":{"name":"Context Menu","category":"Miscellaneous"},"drag-and-drop":{"name":"Row Drag and Drop","category":"Miscellaneous"},"split-tasks":{"name":"Split Tasks","category":"Miscellaneous"},"grid-lines":{"name":"Gridlines","category":"Miscellaneous"},"events":{"name":"Events","category":"Miscellaneous"},"keyboard-interactions":{"name":"Keyboard Navigation","category":"Miscellaneous"},"defaultSample":"gantt/overview"},
"grid": {"overview":{"name":"Overview","category":"Data Grid"},"live-data":{"name":"Live Data","category":"Data Grid"},"default":{"name":"Default Functionalities","category":"Data Grid"},"adaptive-layout":{"name":"Adaptive Layout","category":"Data Grid"},"loading-animation":{"name":"Loading Animation","category":"Data Grid"},"empty-record-template":{"name":"Empty Record Template","category":"Data Grid"},"fifa-statistics":{"name":"FIFA Statistics","category":"Product Use Case"},"local-binding":{"name":"Local Data","category":"Data Binding"},"remote-data":{"name":"Remote Data","category":"Data Binding"},"custom-binding":{"name":"Custom Binding","category":"Data Binding"},"column-template":{"name":"Column Template","category":"Columns"},"header-template":{"name":"Header Template","category":"Columns"},"stacked-header":{"name":"Stacked Header","category":"Columns"},"foreign-key":{"name":"Foreign Key Column","category":"Columns"},"reorder":{"name":"Reorder","category":"Columns"},"column-resizing":{"name":"AutoFit and Resizing","category":"Columns"},"column-menu":{"name":"Column Menu","category":"Columns"},"auto-wrap":{"name":"AutoWrap Column cells","category":"Columns"},"column-chooser":{"name":"Column Chooser","category":"Columns"},"show-hide":{"name":"Show or Hide Column","category":"Columns"},"column-spanning":{"name":"Column Spanning","category":"Columns"},"row-template":{"name":"Row Template","category":"Rows"},"detail-template":{"name":"Detail Template","category":"Rows"},"row-drag-drop":{"name":"Drag and Drop","category":"Rows"},"drag-drop-within-grid":{"name":"Drag and Drop within Grid","category":"Rows"},"row-height":{"name":"Row Height","category":"Rows"},"row-spanning":{"name":"Row Spanning","category":"Rows"},"normal-edit":{"name":"Inline Editing","category":"Editing"},"dialog-edit":{"name":"Dialog Editing","category":"Editing"},"dialog-template":{"name":"Dialog Template","category":"Editing"},"batch":{"name":"Batch Editing","category":"Editing"},"command-column":{"name":"CommandColumn","category":"Editing"},"sorting":{"name":"Sorting","category":"Sorting"},"filtering":{"name":"Default Filtering","category":"Filtering"},"filter-template":{"name":"Filter Template","category":"Filtering"},"filter-menu":{"name":"Filter Menu","category":"Filtering"},"searching":{"name":"Search","category":"Filtering"},"paging":{"name":"Paging","category":"Paging"},"grouping":{"name":"Grouping","category":"Grouping"},"aggregate-default":{"name":"Default Aggregate","category":"Aggregates"},"aggregate-group":{"name":"Group and Caption Aggregate","category":"Aggregates"},"reactive-aggregate":{"name":"Reactive Aggregate","category":"Aggregates"},"selection":{"name":"Default Selection","category":"Selection"},"selection-api":{"name":"Selection API","category":"Selection"},"checkbox-selection":{"name":"Checkbox Selection","category":"Selection"},"hierarchy":{"name":"Hierarchy Grid","category":"Relational Binding"},"master-detail":{"name":"Master/Detail","category":"Relational Binding"},"scrolling":{"name":"Default Scrolling","category":"Scrolling"},"sticky-header":{"name":"Sticky Header","category":"Scrolling"},"frozen-rows-columns":{"name":"Frozen Rows and Columns","category":"Scrolling"},"frozen-api":{"name":"Frozen API","category":"Scrolling"},"virtualization":{"name":"Virtual Scrolling","category":"Scrolling"},"infinite-scrolling":{"name":"Infinite Scrolling","category":"Scrolling"},"lazy-load-grouping-with-paging":{"name":"Grouping with Paging","category":"Lazy Load Grouping"},"lazy-load-grouping-with-infinite-scrolling":{"name":"Grouping with Infinite Scrolling","category":"Lazy Load Grouping"},"lazy-load-grouping-with-virtual-scrolling":{"name":"Grouping with Virtual Scrolling","category":"Lazy Load Grouping"},"default-exporting":{"name":"Default Exporting","category":"Exporting"},"advanced-exporting":{"name":"Advanced Exporting","category":"Exporting"},"master-details-export":{"name":"Hierarchy Exporting","category":"Exporting"},"detail-template-exporting":{"name":"Detail Template Exporting","category":"Exporting"},"multiple-export":{"name":"Multiple Exporting","category":"Exporting"},"print":{"name":"Print","category":"Exporting"},"grid-lines":{"name":"GridLines","category":"Miscellaneous"},"context-menu":{"name":"Context Menu","category":"Miscellaneous"},"clipboard":{"name":"Clipboard","category":"Miscellaneous"},"keyboard-navigation":{"name":"Keyboard Navigation","category":"Miscellaneous"},"enable-rtl":{"name":"RTL","category":"Miscellaneous"},"defaultSample":"grid/overview"},
"heatmap-chart": {"default-functionalities":{"name":"Default Functionalities","category":"Heatmap Chart"},"calendar-heatmap":{"name":"Calendar Heatmap","category":"Heatmap Chart"},"bubble-types":{"name":"Bubble Types","category":"Bubble Heatmap"},"color-and-size-attributes":{"name":"Color and Size Attributes","category":"Bubble Heatmap"},"row":{"name":"Row","category":"Data Binding"},"cell":{"name":"Cell","category":"Data Binding"},"json-row":{"name":"JSON Row","category":"Data Binding"},"json-cell":{"name":"JSON Cell","category":"Data Binding"},"empty-points":{"name":"Empty points","category":"Features"},"inversed-axis":{"name":"Inversed Axis","category":"Features"},"opposed-axis":{"name":"Opposed Axis","category":"Features"},"label-template":{"name":"Label Template","category":"Features"},"multi-level-labels":{"name":"Multi Level Labels","category":"Features"},"cell-selection":{"name":"Selection","category":"Features"},"legend-placement":{"name":"Legend Placement","category":"Features"},"large-data":{"name":"Large Data","category":"Features"},"palette-mode":{"name":"Palette Mode","category":"Features"},"color-range":{"name":"Color Range","category":"Features"},"rendering-mode":{"name":"Rendering mode","category":"Features"},"tooltip-template":{"name":"Tooltip Template","category":"Features"},"defaultSample":"heatmap-chart/default-functionalities"},
"image-editor": {"default":{"name":"Default Functionalities","category":"Image Editor"},"profile-picture":{"name":"Profile Picture","category":"Image Editor"},"custom-toolbar":{"name":"Custom Toolbar","category":"Image Editor"},"file-restrict":{"name":"File Restriction","category":"Image Editor"},"defaultSample":"image-editor/default"},
"inplace-editor": {"default":{"name":"Overview","category":"In-place Editor"},"dropdowns":{"name":"DropDown Components","category":"In-place Editor"},"pickers":{"name":"Date Components","category":"In-place Editor"},"edit-post":{"name":"Edit Post","category":"Use Case"},"defaultSample":"inplace-editor/default"},
"kanban": {"overview":{"name":"Overview","category":"Kanban"},"default":{"name":"Default Functionalities","category":"Kanban"},"swimlane":{"name":"Swimlane","category":"Kanban"},"workflow":{"name":"Workflow","category":"Kanban"},"stacked-header":{"name":"Stacked Header","category":"Kanban"},"dialog-editing":{"name":"Dialog Editing","category":"Kanban"},"search-filter":{"name":"Search and Filter Cards","category":"Kanban"},"sorting":{"name":"Sorting Cards","category":"Kanban"},"virtual-scrolling":{"name":"Virtual Scrolling","category":"Kanban"},"local-data":{"name":"Local Data","category":"Data Binding"},"remote-data":{"name":"Remote Data","category":"Data Binding"},"header-template":{"name":"Header Template","category":"Templates"},"swimlane-template":{"name":"Swimlane Template","category":"Templates"},"card-template":{"name":"Card Template","category":"Templates"},"tooltip-template":{"name":"Tooltip Template","category":"Templates"},"toggle-columns":{"name":"Toggle Columns","category":"Columns"},"show-hide":{"name":"Show/Hide Columns","category":"Columns"},"wip-validation":{"name":"WIP Validation","category":"Validation"},"api":{"name":"API","category":"Miscellaneous"},"events":{"name":"Events","category":"Miscellaneous"},"defaultSample":"kanban/overview"},
"linear-gauge": {"default-functionalities":{"name":"Default Functionalities","category":"Linear Gauge"},"container":{"name":"Container","category":"Axis"},"track":{"name":"Track","category":"Axis"},"ticks":{"name":"Ticks","category":"Axis"},"labels":{"name":"Labels","category":"Axis"},"range":{"name":"Range","category":"Range"},"marker-pointer":{"name":"Marker Pointer","category":"Pointer"},"bar-pointer":{"name":"Bar Pointer","category":"Pointer"},"custom-pointer":{"name":"Custom Pointer","category":"Pointer"},"tooltip":{"name":"Tooltip","category":"User Interaction"},"print-export":{"name":"Print & Export","category":"Print & Export"},"progress-bar":{"name":"Progress Bar","category":"Use Cases"},"step-progress-bar":{"name":"Step Progress Bar","category":"Use Cases"},"slider":{"name":"Slider","category":"Use Cases"},"thermometer":{"name":"Thermometer","category":"Use Cases"},"steps-counter":{"name":"Steps Counter","category":"Use Cases"},"volume-settings":{"name":"Volume Settings","category":"Use Cases"},"battery-indicator":{"name":"Battery Indicator","category":"Use Cases"},"defaultSample":"linear-gauge/default-functionalities"},
"list-box": {"default":{"name":"Default Functionalities","category":"List Box"},"dual-list-box":{"name":"Dual ListBox","category":"List Box"},"drag-and-drop":{"name":"Drag And Drop","category":"List Box"},"checkbox":{"name":"Checkbox","category":"List Box"},"template":{"name":"Template","category":"List Box"},"api":{"name":"API","category":"List Box"},"defaultSample":"list-box/default"},
"listview": {"default":{"name":"Default Functionalities","category":"ListView"},"remote-list":{"name":"Remote Data","category":"ListView"},"check-list":{"name":"Checklist","category":"ListView"},"nested-list":{"name":"Nested List","category":"ListView"},"virtualization":{"name":"Virtualization","category":"ListView"},"template":{"name":"Template","category":"Customization"},"group-template":{"name":"Group Template","category":"Customization"},"call-history":{"name":"Call History","category":"Use Case"},"scrolling":{"name":"Scrolling","category":"ListView"},"defaultSample":"listview/default"},
"maps": {"default":{"name":"Default Functionalities","category":"Maps"},"projection":{"name":"Projection","category":"Features"},"multilayer":{"name":"Multi-layers","category":"Features"},"marker":{"name":"Marker","category":"Features"},"marker-template":{"name":"Marker template","category":"Features"},"marker-cluster":{"name":"Marker Clustering","category":"Features"},"label":{"name":"Labels","category":"Features"},"bubble":{"name":"Bubble","category":"Features"},"navigation-line":{"name":"Navigation Lines","category":"Features"},"legend":{"name":"Legend","category":"Features"},"color-mapping":{"name":"Color Mapping","category":"Features"},"annotation":{"name":"Annotations","category":"Features"},"polygon":{"name":"Polygon","category":"Polygon"},"osm":{"name":"OpenStreetMap","category":"Map Providers"},"osm-with-sublayers":{"name":"OSM with Sublayer","category":"Map Providers"},"osm-with-marker-clustering":{"name":"OSM with Marker Clustering","category":"Map Providers"},"osm-with-navigation-lines":{"name":"OSM with Navigation Lines","category":"Map Providers"},"osm-with-legend":{"name":"OSM with Legend","category":"Map Providers"},"tooltip":{"name":"Tooltip","category":"User Interaction"},"selection":{"name":"Selection & Highlight","category":"User Interaction"},"zooming":{"name":"Zooming & Panning","category":"User Interaction"},"programmatic-zoom":{"name":"Zoom to fit all markers","category":"User Interaction"},"drilldown":{"name":"Drill down","category":"User Interaction"},"print":{"name":"Print","category":"Print and Export"},"export":{"name":"Export","category":"Print and Export"},"heatmap":{"name":"Heat Map","category":"Use Cases"},"curved":{"name":"Flight routes","category":"Use Cases"},"earthquake":{"name":"Earthquake indication","category":"Use Cases"},"highlight":{"name":"Highlighted region","category":"Use Cases"},"cyber-attack-map":{"name":"Cyber Attack Map","category":"Use Cases"},"dynamic-marker":{"name":"Dynamic Markers","category":"Use Cases"},"map-pie":{"name":"Map with Pie chart","category":"Use Cases"},"map-with-slider":{"name":"Map with Slider","category":"Use Cases"},"sales-maps":{"name":"Sales map ","category":"Use Cases"},"seat-booking":{"name":"Bus seat booking","category":"Use Cases"},"defaultSample":"maps/default"},
"markdown-editor": {"overview":{"name":"Overview","category":"Markdown Editor"},"default-functionalities":{"name":"Default Functionalities","category":"Markdown Editor"},"custom-format":{"name":"Custom Format","category":"Markdown Editor"},"mention-integration":{"name":"@ Mention","category":"Markdown Editor"},"defaultSample":"markdown-editor/overview"},
"maskedtextbox": {"default":{"name":"Default Functionalities","category":"Input Mask"},"custom-mask":{"name":"Custom Mask","category":"Input Mask"},"formats":{"name":"Formats","category":"Input Mask"},"defaultSample":"maskedtextbox/default"},
"mention": {"default":{"name":"Default Functionalities","category":"Mention"},"multiple-list":{"name":"Multiple List","category":"Mention"},"template":{"name":"Template","category":"Mention"},"disabled-items":{"name":"Disabled Items","category":"Mention"},"defaultSample":"mention/default"},
"menu": {"default":{"name":"Default Functionalities","category":"Menu Bar"},"data-binding":{"name":"Data Binding","category":"Menu Bar"},"scrollable":{"name":"Scrollable","category":"Menu Bar"},"template":{"name":"Template","category":"Menu Bar"},"hamburger-mode":{"name":"Hamburger Mode","category":"Menu Bar"},"api":{"name":"API","category":"Menu Bar"},"toolbar-integration":{"name":"Toolbar Integration","category":"Use Case"},"defaultSample":"menu/default"},
"message": {"default":{"name":"Default Functionalities","category":"Message"},"variants":{"name":"Variants","category":"Message"},"icons":{"name":"Icons","category":"Message"},"customization":{"name":"Customization","category":"Message"},"template":{"name":"Template","category":"Message"},"defaultSample":"message/default"},
"multi-select": {"default":{"name":"Default Functionalities","category":"MultiSelect Dropdown"},"data-binding":{"name":"Data Binding","category":"MultiSelect Dropdown"},"object-value-binding":{"name":"Object Value Binding","category":"MultiSelect Dropdown"},"disabled-items":{"name":"Disabled Items","category":"MultiSelect"},"grouping":{"name":"Grouping","category":"MultiSelect Dropdown"},"template":{"name":"Templates","category":"MultiSelect Dropdown"},"resize":{"name":"Popup Resize","category":"MultiSelect Dropdown"},"filtering":{"name":"Filtering","category":"MultiSelect Dropdown"},"custom-value":{"name":"Custom Values","category":"MultiSelect Dropdown"},"virtual-scroll":{"name":"Virtualization","category":"MultiSelect Dropdown"},"chip-customization":{"name":"Chip Customization","category":"MultiSelect Dropdown"},"checkbox":{"name":"CheckBox","category":"MultiSelect Dropdown"},"grouping-with-checkbox":{"name":"Grouping with CheckBox","category":"MultiSelect Dropdown"},"selection-limit":{"name":"Selection Limit","category":"MultiSelect Dropdown"},"diacritics-filtering":{"name":"Diacritics Filtering","category":"MultiSelect Dropdown"},"defaultSample":"multi-select/default"},
"multicolumn-combobox": {"default":{"name":"Default Functionalities","category":"MultiColumn Combobox"},"remote-databinding":{"name":"Remote Data","category":"MultiColumn Combobox"},"grouping":{"name":"Grouping","category":"MultiColumn Combobox"},"filtering":{"name":"Filtering","category":"MultiColumn Combobox"},"virtualization":{"name":"Virtualization","category":"MultiColumn Combobox"},"sorting":{"name":"Sorting","category":"MultiColumn Combobox"},"rtl":{"name":"RTL","category":"MultiColumn Combobox"},"keyboard-navigation":{"name":"Keyboard Navigation","category":"MultiColumn Combobox"},"template":{"name":"Template","category":"MultiColumn Combobox"},"defaultSample":"multicolumn-combobox/default"},
"numerictextbox": {"default":{"name":"Default Functionalities","category":"Numeric Textbox"},"range-validation":{"name":"Range Validation","category":"Numeric Textbox"},"custom-format":{"name":"Custom Format","category":"Numeric Textbox"},"restrict-decimals":{"name":"Restrict Decimals","category":"Numeric Textbox"},"defaultSample":"numerictextbox/default"},
"otp-input": {"default":{"name":"Default Functionalities","category":"OTP Input"},"api":{"name":"API","category":"OTP Input"},"defaultSample":"otp-input/default"},
"pager": {"default":{"name":"Default Functionalities","category":"PAGER"},"localization":{"name":"Localization","category":"PAGER"},"api":{"name":"API","category":"PAGER"},"defaultSample":"pager/default"},
"pdfviewer": {"default":{"name":"Default Functionalities","category":"PDF Viewer"},"read-only":{"name":"Read-Only","category":"Document Security"},"document-list":{"name":"Document List","category":"File Management"},"multi-format-viewer":{"name":" Multi-Format Viewer","category":"File Management"},"organize-pages":{"name":"Organize Pages","category":"Editor"},"redaction":{"name":"Redaction","category":"Editor"},"custom-toolbar":{"name":"Toolbar","category":"Customization"},"custom-context-menu":{"name":"Context Menu","category":"Customization"},"right-to-left":{"name":"Right To Left","category":"Localization"},"form-filling":{"name":"Form Filling","category":"PDF Form"},"form-designer":{"name":"Form Designer","category":"PDF Form"},"esigning-form-designer":{"name":"eSigning Form Designer","category":"PDF Form"},"esigning-pdf-forms":{"name":"eSigning PDF Forms","category":"PDF Form"},"annotations":{"name":"Annotations","category":"Annotation"},"programmatic-operations":{"name":"Programmatic Operations","category":"Annotation"},"hand-written":{"name":"Handwritten Signature","category":"Signature"},"invisible-signature":{"name":"Invisible Signature","category":"Signature"},"defaultSample":"pdfviewer/default"},
"pivot-table": {"overview":{"name":"Overview","category":"Pivot Table"},"default":{"name":"Default Functionalities","category":"Pivot Table"},"classic-layout":{"name":"Classic Layout","category":"Pivot Table"},"live-data":{"name":"Live Data","category":"Pivot Table"},"local":{"name":"Local Data","category":"Data Binding"},"remote":{"name":"Remote Data","category":"Data Binding"},"server-side-engine":{"name":"Server-side Aggregation","category":"Data Binding"},"olap":{"name":"OLAP","category":"Data Binding"},"performance":{"name":"Performance","category":"Benchmark"},"pivot-chart":{"name":"Pivot Chart","category":"Integration"},"external-binding":{"name":"External Binding","category":"Integration"},"heat-map":{"name":"HeatMap","category":"Integration"},"field-list":{"name":"Field List","category":"User Interaction"},"grouping-bar":{"name":"Grouping Bar","category":"User Interaction"},"conditional-formatting":{"name":"Conditional Formatting","category":"User Interaction"},"selection":{"name":"Selection","category":"User Interaction"},"drill-down":{"name":"Drill Down","category":"User Interaction"},"summary-customization":{"name":"Show/Hide Totals","category":"User Interaction"},"grouping":{"name":"Grouping","category":"User Interaction"},"tool-bar":{"name":"Toolbar","category":"User Interaction"},"keyboard-navigation":{"name":"Keyboard Navigation","category":"Keyboard Navigation"},"calculated-field":{"name":"Calculated Field","category":"Formula"},"aggregation":{"name":"Aggregation","category":"Formula"},"sorting":{"name":"Default Sorting","category":"Sorting"},"custom-sorting":{"name":"Custom Sorting","category":"Sorting"},"value-sorting":{"name":"Value Sorting","category":"Sorting"},"filtering":{"name":"Default Filtering","category":"Filtering"},"label-filtering":{"name":"Label Filtering","category":"Filtering"},"value-filtering":{"name":"Value Filtering","category":"Filtering"},"virtual-scrolling":{"name":"Virtual Scrolling","category":"Scrolling"},"paging":{"name":"Paging","category":"Paging"},"cell-template":{"name":"Cell Template","category":"Customization"},"drill-through":{"name":"Drill Through","category":"Miscellaneous"},"editing":{"name":"Editing","category":"Miscellaneous"},"hyper-link":{"name":"Hyperlink","category":"Miscellaneous"},"defer-update":{"name":"Defer Layout Update","category":"Miscellaneous"},"exporting":{"name":"Export","category":"Miscellaneous"},"defaultSample":"pivot-table/overview"},
"predefined-dialogs": {"default":{"name":"Default Functionalities","category":"Predefined Dialogs"},"customization":{"name":"Customization","category":"Predefined Dialogs"},"animation":{"name":"Animation","category":"Predefined Dialogs"},"defaultSample":"predefined-dialogs/default"},
"progress-bar": {"linear":{"name":"Linear","category":"Progress Bar"},"circular":{"name":"Circular","category":"Progress Bar"},"semi-circular":{"name":"Angle","category":"Progress Bar"},"custom-content":{"name":"Custom Contents","category":"Progress Bar"},"labels":{"name":"Labels","category":"Progress Bar"},"radius":{"name":"Radius","category":"Progress Bar"},"tool-tip":{"name":"Tooltip","category":"Progress Bar"},"stripes":{"name":"Stripes","category":"Progress Bar"},"progress-segment":{"name":"Progress Segment","category":"Progress Bar"},"defaultSample":"progress-bar/linear"},
"query-builder": {"default":{"name":"Default Functionalities","category":"Query Builder"},"complex-databinding":{"name":"Complex Databinding","category":"Query Builder"},"grid":{"name":"Integration with Data Grid","category":"Query Builder"},"mongo-sql":{"name":"Mongo and SQL Query","category":"Query Builder"},"lock-group":{"name":"Lock Group/Rule","category":"Query Builder"},"clone-group":{"name":"Clone Group/Rule","category":"Query Builder"},"drag-drop":{"name":"Drag and Drop","category":"Query Builder"},"separate-connector":{"name":"Separate Connector","category":"Query Builder"},"template":{"name":"Value Template","category":"Template"},"rule-template":{"name":"Rule Template","category":"Template"},"header-template":{"name":"Header Template","category":"Template"},"defaultSample":"query-builder/default"},
"range-navigator": {"default":{"name":"Default","category":"Range Selector"},"light-weight":{"name":"Lightweight","category":"Range Selector"},"date-time":{"name":"DateTime","category":"Axis"},"double":{"name":"Numeric Axis","category":"Axis"},"logarithmic":{"name":"Logarithmic Axis","category":"Axis"},"multilevel":{"name":"Multilevel Labels","category":"Axis"},"period-selector":{"name":"Period Selector","category":"Customization"},"empty-data":{"name":"Empty Points","category":"Customization"},"filter":{"name":"Filter","category":"Customization"},"export":{"name":"Print and Export","category":"Export"},"right-to-left":{"name":"RTL","category":"RTL"},"defaultSample":"range-navigator/default"},
"range-slider": {"default":{"name":"Default Functionalities","category":"Range Slider"},"ticks":{"name":"Ticks","category":"Range Slider"},"tooltip":{"name":"Tooltip","category":"Range Slider"},"orientation":{"name":"Vertical Orientation","category":"Range Slider"},"format":{"name":"Formatting","category":"Range Slider"},"limits":{"name":"Limits","category":"Range Slider"},"api":{"name":"API","category":"Range Slider"},"events":{"name":"Events","category":"Range Slider"},"thumb-customization":{"name":"Thumb","category":"Customization"},"selection-bar-customization":{"name":"Bar","category":"Customization"},"ticks-customization":{"name":"Ticks","category":"Customization"},"tooltip-customization":{"name":"Tooltip","category":"Customization"},"azure-pricing":{"name":"Cloud Pricing","category":"Use Case"},"defaultSample":"range-slider/default"},
"rating": {"default":{"name":"Default Functionalities","category":"Rating"},"precision":{"name":"Precision","category":"Rating"},"tooltip":{"name":"Tooltip","category":"Rating"},"label":{"name":"Label","category":"Rating"},"template":{"name":"Template","category":"Rating"},"keyboard-navigation":{"name":"Keyboard Navigations","category":"Rating"},"defaultSample":"rating/default"},
"ribbon": {"default":{"name":"Default Functionalities","category":"Ribbon"},"simplified":{"name":"Simplified Mode","category":"Ribbon"},"backstage":{"name":"Backstage","category":"Ribbon"},"contextual":{"name":"Contextual Tabs","category":"Ribbon"},"resize":{"name":"Ribbon Resizing","category":"Ribbon"},"keytip":{"name":"Ribbon KeyTips","category":"Ribbon"},"gallery":{"name":"Ribbon Gallery","category":"Ribbon"},"defaultSample":"ribbon/default"},
"rich-text-editor": {"tools":{"name":"Overview","category":"Rich Text Editor"},"rich-text-editor":{"name":"Default Functionalities","category":"Rich Text Editor"},"image":{"name":"Image","category":"Rich Text Editor"},"insert-media":{"name":"Insert Media","category":"Rich Text Editor"},"inline":{"name":"Inline","category":"Rich Text Editor"},"paste-cleanup":{"name":"Paste from MS Word","category":"Rich Text Editor"},"format-painter":{"name":"Format Painter","category":"Rich Text Editor"},"iframe":{"name":"IFrame","category":"Rich Text Editor"},"print":{"name":"Print","category":"Rich Text Editor"},"ajax-load":{"name":"Ajax Content","category":"Rich Text Editor"},"resize-editor":{"name":"Resizable Editor","category":"Rich Text Editor"},"api":{"name":"API","category":"Rich Text Editor"},"enter-key-configuration":{"name":"Enter Key Configuration","category":"Rich Text Editor"},"client-side-events":{"name":"Events","category":"Rich Text Editor"},"blog-posting":{"name":"Use Case","category":"Rich Text Editor"},"auto-save":{"name":"Auto Save","category":"Rich Text Editor"},"file-browser":{"name":"File Browser","category":"Rich Text Editor"},"insert-emoticons":{"name":"Insert Emoticons","category":"Rich Text Editor"},"online-html-editor":{"name":"Online Html Editor","category":"Rich Text Editor"},"image-editor-integration":{"name":"Image Editor Integration","category":"Rich Text Editor"},"mail-merge":{"name":"Mail Merge","category":"Rich Text Editor"},"export-document":{"name":"Export to Word / PDF","category":"Export / Import"},"import-word":{"name":"Import from Word","category":"Export / Import"},"mention-integration":{"name":"@ Mention","category":"Mention Integration"},"smart-suggestion":{"name":"Smart Suggestion","category":"Mention Integration"},"types":{"name":"Type","category":"Toolbar"},"quick-format-toolbar":{"name":"Quick Format Toolbar","category":"Toolbar"},"insert-special-characters":{"name":"Insert Special Characters","category":"Custom Tool"},"defaultSample":"rich-text-editor/tools"},
"schedule": {"overview":{"name":"Overview","category":"Scheduler"},"default":{"name":"Default Functionalities","category":"Scheduler"},"holiday-calendar":{"name":"Holiday Calendar","category":"Product Use Case"},"event-calendar":{"name":"Event Calendar","category":"Product Use Case"},"local-data":{"name":"Local Data","category":"Data Binding"},"remote-data":{"name":"Remote Data","category":"Data Binding"},"calendar-integration":{"name":"Sync Google Calendar","category":"Appointments"},"realtime-binding":{"name":"Real-Time Binding","category":"Appointments"},"recurrence-events":{"name":"Recurring Events","category":"Appointments"},"block-events":{"name":"Blocking Dates and Time","category":"Appointments"},"search-events":{"name":"Search Events","category":"Appointments"},"timezone":{"name":"Timezone","category":"Appointments"},"inline-editing":{"name":"Inline Editing","category":"Appointments"},"overlap-events":{"name":"Conflict Free Event","category":"Appointments"},"external-drag-drop":{"name":"External Drag and Drop","category":"Drag and Drop"},"multi-drag":{"name":"Multiple Events Drag","category":"Drag and Drop"},"schedule-to-schedule-drag-drop":{"name":"Multiple Scheduler","category":"Drag and Drop"},"schedule-to-grid":{"name":"Drag Events From DataGrid","category":"Drag and Drop"},"virtual-scrolling":{"name":"Virtual Scrolling","category":"Scrolling"},"data-virtualization":{"name":"Data Virtualization","category":"Scrolling"},"views":{"name":"Basic Views","category":"Views"},"timeline":{"name":"Timeline Views","category":"Views"},"agenda":{"name":"Agenda View","category":"Views"},"month-agenda":{"name":"Month Agenda View","category":"Views"},"year":{"name":"Year View","category":"Views"},"custom-month-view":{"name":"Custom Month View","category":"Views"},"views-configuration":{"name":"Individual View Settings","category":"Views"},"extended-views":{"name":"View Intervals","category":"Views"},"timeline-resources":{"name":"Room Scheduler","category":"Multiple Resources"},"resources":{"name":"Fare Calendar","category":"Multiple Resources"},"resource":{"name":"Resources","category":"Multiple Resources"},"group-editing":{"name":"Shared Events","category":"Multiple Resources"},"group-custom-work-days":{"name":"Different Work Days","category":"Multiple Resources"},"add-remove-resources":{"name":"Show/Hide Resources","category":"Multiple Resources"},"adaptive-rows":{"name":"Row Auto Height","category":"Multiple Resources"},"resource-grouping":{"name":"Horizontal Grouping","category":"Resource Grouping"},"timeline-resource-grouping":{"name":"Timeline Grouping","category":"Resource Grouping"},"group-by-date":{"name":"Date-wise Grouping","category":"Resource Grouping"},"group-by-child":{"name":"Hierarchical Grouping","category":"Resource Grouping"},"adaptive-grouping":{"name":"Adaptive Grouping","category":"Resource Grouping"},"cell-template":{"name":"Cell","category":"Template"},"date-header-template":{"name":"Date Header","category":"Template"},"event-template":{"name":"Events","category":"Template"},"tooltip":{"name":"Tooltip","category":"Template"},"quick-info-template":{"name":"Quick Info Template","category":"Template"},"editor-validation":{"name":"Field Validation","category":"Editor Window"},"editor-custom-field":{"name":"Additional Fields","category":"Editor Window"},"editor-template":{"name":"Editor Template","category":"Editor Window"},"header-rows":{"name":"Header Rows","category":"Customization"},"time-scale":{"name":"Timescale","category":"Customization"},"context-menu":{"name":"Context Menu","category":"Schedule"},"header-bar":{"name":"Header Bar","category":"Customization"},"scroll-to":{"name":"Scroll Time","category":"Customization"},"work-days":{"name":"Work Days","category":"Customization"},"hide-weekend":{"name":"Hide Non-Working Days","category":"Customization"},"work-hours":{"name":"Work Hours","category":"Customization"},"start-end-hour":{"name":"Day Hour Limit","category":"Customization"},"cell-dimension":{"name":"Cell Dimension","category":"Customization"},"read-only-events":{"name":"Read-only Events","category":"Customization"},"reminder":{"name":"Reminder","category":"Customization"},"excel-export":{"name":"Excel Exporting","category":"Exporting"},"calendar-export-import":{"name":"Export and Import ICS","category":"Exporting"},"print":{"name":"Print","category":"Exporting"},"recurrence-editor-generate-rule":{"name":"Rule Generator","category":"Recurrence Editor"},"recurrence-editor-populate-rule":{"name":"Populate Rule","category":"Recurrence Editor"},"clipboard":{"name":"Clipboard","category":"Miscellaneous"},"keyboard-interaction":{"name":"Keyboard Interaction","category":"Miscellaneous"},"events":{"name":"Events","category":"Miscellaneous"},"defaultSample":"schedule/overview"},
"sidebar": {"default":{"name":"Default Functionalities","category":"Sidebar"},"docking-sidebar":{"name":"Dock","category":"Sidebar"},"api":{"name":"API","category":"Sidebar"},"sidebar-menu":{"name":"Sidebar Menu","category":"Sidebar"},"responsive-panel":{"name":"Responsive Panel","category":"Sidebar"},"sidebar-list":{"name":"Sidebar With ListView","category":"Sidebar"},"defaultSample":"sidebar/default"},
"signature": {"default":{"name":"Default Functionalities","category":"Signature"},"toolbar":{"name":"Toolbar","category":"Signature"},"defaultSample":"signature/default"},
"skeleton": {"default":{"name":"Default Functionalities","category":"Skeleton"},"animation":{"name":"Animation","category":"Skeleton"},"defaultSample":"skeleton/default"},
"smith-chart": {"default":{"name":"Default","category":"Smith Chart"},"custom":{"name":"Customization","category":"Smith Chart"},"print-export":{"name":"Print and Export","category":"Smith Chart"},"defaultSample":"smith-chart/default"},
"sparkline": {"default":{"name":"Default","category":"Sparkline Charts"},"series-types":{"name":"Series Types","category":"Sparkline Charts"},"axis-types":{"name":"Axis Value Types","category":"Sparkline Charts"},"spark-grid":{"name":"Sparkline in Grid","category":"Sparkline Charts"},"customization":{"name":"Customization","category":"Sparkline Charts"},"live-update":{"name":"Live Update","category":"Sparkline Charts"},"range-band":{"name":"Range Band","category":"Sparkline Charts"},"defaultSample":"sparkline/default"},
"speech-to-text": {"default":{"name":"Default Functionalities","category":"Speech To Text"},"use-case":{"name":"Use Case","category":"Integration"},"integration":{"name":"AI AssistView","category":"Integration"},"defaultSample":"speech-to-text/default"},
"speed-dial": {"default":{"name":"Default Functionalities","category":"SpeedDial"},"linear":{"name":"Position (Linear)","category":"SpeedDial"},"radial":{"name":"Radial Menu","category":"SpeedDial"},"styles":{"name":"Styles","category":"SpeedDial"},"template":{"name":"Template","category":"SpeedDial"},"modal":{"name":"Modal","category":"SpeedDial"},"defaultSample":"speed-dial/default"},
"splitter": {"default":{"name":"Default Functionalities","category":"Splitter"},"expand-and-collapse":{"name":"Expand and Collapse","category":"Splitter"},"accordion-navigation-menu":{"name":"Accordion Navigation Menu","category":"Use Case"},"details-view":{"name":"Details View","category":"Use Case"},"outlook-style-layout":{"name":"Outlook-style Layout","category":"Use Case"},"code-editor-layout":{"name":"Code Editor Layout","category":"Use Case"},"defaultSample":"splitter/default"},
"spreadsheet": {"default":{"name":"Default Functionalities","category":"Spreadsheet"},"formula":{"name":"Formula","category":"Spreadsheet"},"protect-sheet":{"name":"Protection","category":"Spreadsheet"},"freeze-pane":{"name":"Freeze Panes","category":"Spreadsheet"},"data-validation":{"name":"Data Validation","category":"Spreadsheet"},"hyperlink":{"name":"Hyperlink","category":"Spreadsheet"},"cell-data-binding":{"name":"Cell Data Binding","category":"Data Binding"},"remote-data-binding":{"name":"Remote Data Binding","category":"Data Binding"},"cell-formatting":{"name":"Cell Formatting","category":"Formatting"},"number-formatting":{"name":"Number Formatting","category":"Formatting"},"conditional-formatting":{"name":"Conditional Formatting","category":"Formatting"},"sorting-and-filtering":{"name":"Sorting and Filtering","category":"Data Analysis"},"chart":{"name":"Chart","category":"Data Visualization"},"image":{"name":"Image","category":"Illustrations"},"cell-template":{"name":"Cell Template","category":"Templates"},"notes":{"name":"Notes","category":"Review"},"print":{"name":"Print","category":"Printing"},"defaultSample":"spreadsheet/default"},
"stepper": {"default":{"name":"Default Functionalities","category":"Stepper"},"orientation":{"name":"Orientation","category":"Stepper"},"validation":{"name":"Validation","category":"Stepper"},"linear":{"name":"Linear Flow","category":"Stepper"},"defaultSample":"stepper/default"},
"stock-chart": {"default":{"name":"Default","category":"Stock Chart"},"ohlc":{"name":"OHLC","category":"Stock Chart"},"multi-pane":{"name":"Candlestick and volume","category":"Stock Chart"},"multiple-series":{"name":"Multiple Series","category":"Stock Chart"},"spline":{"name":"Spline","category":"Stock Chart"},"area":{"name":"Area","category":"Stock Chart"},"spline-area":{"name":"Spline Area","category":"Stock Chart"},"inversed-area":{"name":"Inversed Area","category":"Stock Chart"},"plot-line":{"name":"Plot lines","category":"Stock Chart"},"strip-line":{"name":"Plot band","category":"Stock Chart"},"period-customization":{"name":"Intraday","category":"Stock Chart"},"disabled-navigator":{"name":"Hide Range Selector","category":"Stock Chart"},"disabled-period":{"name":"Hide Period Selector","category":"Stock Chart"},"datetime-category":{"name":"DateTime Category Axis","category":"Stock Chart"},"stock-events":{"name":"Stock Events","category":"Stock Chart"},"defaultSample":"stock-chart/default"},
"tab": {"default":{"name":"Default Functionalities","category":"Tabs"},"orientation":{"name":"Orientation","category":"Tabs"},"responsive-modes":{"name":"Responsive Modes","category":"Tabs"},"wizard":{"name":"Wizard","category":"Tabs"},"drag-and-drop":{"name":"Drag and Drop","category":"Tabs"},"keyboard-interaction":{"name":"Keyboard Interaction","category":"Tabs"},"defaultSample":"tab/default"},
"textarea": {"default":{"name":"Default Functionalities","category":"TextArea"},"floating-label":{"name":"Floating Label","category":"TextArea"},"resize":{"name":"Resize","category":"TextArea"},"api":{"name":"API","category":"TextArea"},"defaultSample":"textarea/default"},
"textboxes": {"default":{"name":"Default Functionalities","category":"TextBox"},"multiline":{"name":"Multiline TextBox","category":"TextBox"},"defaultSample":"textboxes/default"},
"three-dimension-chart": {"column":{"name":"Column","category":"3D Chart"},"column-placement":{"name":"Back to Back Column","category":"3D Chart"},"cylindrical-column":{"name":"Cylindrical Column","category":"3D Chart"},"bar":{"name":"Bar","category":"3D Chart"},"stacked-column":{"name":"Stacking Column with Grouping","category":"3D Chart"},"stacked-column100":{"name":"100% Stacked Column","category":"3D Chart"},"stacked-bar":{"name":"Stacked Bar","category":"3D Chart"},"stacked-bar100":{"name":"100% Stacked Bar","category":"3D Chart"},"empty-point":{"name":"Column with null and 0 values","category":"3D Chart"},"defaultSample":"three-dimension-chart/column"},
"three-dimension-circular-chart": {"pie":{"name":"Pie","category":"3D Circular Chart"},"donut":{"name":"Donut","category":"3D Circular Chart"},"pie-legend":{"name":"Pie with Legend","category":"3D Circular Chart"},"pie-radius":{"name":"Pie with Various Radius","category":"3D Circular Chart"},"selection":{"name":"Selection","category":"3D Circular Chart"},"defaultSample":"three-dimension-circular-chart/pie"},
"timeline": {"default":{"name":"Default Functionalities","category":"Timeline"},"api":{"name":"API","category":"Timeline"},"template":{"name":"Template","category":"Timeline"},"defaultSample":"timeline/default"},
"timepicker": {"default":{"name":"Default Functionalities","category":"TimePicker"},"time-range":{"name":"Time Range","category":"TimePicker"},"time-format":{"name":"Format","category":"TimePicker"},"list-formatting":{"name":"Time Duration","category":"TimePicker"},"input-mask":{"name":"Mask Support","category":"TimePicker"},"defaultSample":"timepicker/default"},
"toast": {"default":{"name":"Default","category":"Toast"},"types":{"name":"Types","category":"Toast"},"templates":{"name":"Templates","category":"Toast"},"positions":{"name":"Positions","category":"Toast"},"api":{"name":"API","category":"Toast"},"defaultSample":"toast/default"},
"toolbar": {"default":{"name":"Default Functionalities","category":"Toolbar"},"popup":{"name":"Popup","category":"Toolbar"},"template":{"name":"Template","category":"Toolbar"},"alignment":{"name":"Alignment","category":"Toolbar"},"keyboard-interaction":{"name":"Keyboard Interaction","category":"Toolbar"},"defaultSample":"toolbar/default"},
"tooltip": {"default":{"name":"Default Functionalities","category":"Tooltip"},"template":{"name":"Template","category":"Tooltip"},"ajaxcontent":{"name":"Ajax Content","category":"Tooltip"},"smartposition":{"name":"Smart Positioning","category":"Tooltip"},"tooltip-menu":{"name":"Tooltip Menu","category":"Tooltip"},"html-content":{"name":"HTML Content","category":"Tooltip"},"api":{"name":"API","category":"Tooltip"},"defaultSample":"tooltip/default"},
"treegrid": {"treegrid-overview":{"name":"Overview","category":"Tree Grid"},"live-data":{"name":"Live Data","category":"Tree Grid"},"default":{"name":"Default Functionalities","category":"Tree Grid"},"adaptive":{"name":"Adaptive Layout ","category":"Tree Grid"},"loading-animation":{"name":"Loading Animation","category":"Tree Grid"},"localdata":{"name":"Local Data","category":"Data Binding"},"remote-data":{"name":"Remote Data","category":"Data Binding"},"selfreference":{"name":"Self Reference Data","category":"Data Binding"},"columntemplate":{"name":"Column Template","category":"Columns"},"header-template":{"name":"Header Template","category":"Columns"},"columnformatting":{"name":"Column Formatting","category":"Columns"},"cellalignment":{"name":"Cell Alignment","category":"Columns"},"reorder":{"name":"Reorder","category":"Columns"},"stacked-header":{"name":"Stacked Header","category":"Columns"},"column-menu":{"name":"Column Menu","category":"Columns"},"autowrap":{"name":"Auto Wrap Column Cells","category":"Columns"},"column-chooser":{"name":"Column Chooser","category":"Columns"},"showhidecolumn":{"name":"Show or Hide Column","category":"Columns"},"checkbox-column":{"name":"Checkbox Column","category":"Columns"},"row-template":{"name":"Row Template","category":"Rows"},"detail-template":{"name":"Detail Template","category":"Rows"},"drag-anddrop":{"name":"Drag and Drop","category":"Rows"},"drag-drop":{"name":"Drag and Drop within Tree Grid","category":"Rows"},"rowhover":{"name":"Row Hover","category":"Rows"},"rowheight":{"name":"Row Height","category":"Rows"},"inline-editing":{"name":"Inline Editing","category":"Editing"},"dialog-editing":{"name":"Dialog Editing","category":"Editing"},"batch-edit":{"name":"Batch Editing","category":"Editing"},"commandcolumn":{"name":"Command Column","category":"Editing"},"celledittype":{"name":"Cell Edit Type","category":"Editing"},"edittemplate":{"name":"Edit Template","category":"Editing"},"lockrow":{"name":"Lock Row","category":"Editing"},"sorting":{"name":"Multi Sorting","category":"Sorting"},"sortingapi":{"name":"Sorting API","category":"Sorting"},"filtering":{"name":"Default Filtering","category":"Filtering"},"filter-menu":{"name":"Menu Filter","category":"Filtering"},"searching":{"name":"Search","category":"Filtering"},"paging":{"name":"Pager Dropdown","category":"Paging"},"pagingapi":{"name":"Paging API","category":"Paging"},"defaultscrolling":{"name":"Default Scrolling","category":"Scrolling"},"frozencolumn":{"name":"Frozen Columns","category":"Scrolling"},"frozen-api":{"name":"Freeze Direction","category":"Scrolling"},"virtualscrolling":{"name":"Virtual Scrolling","category":"Scrolling"},"infinitescrolling":{"name":"Infinite Scrolling","category":"Scrolling"},"aggregate-default":{"name":"Default Aggregate","category":"Aggregates"},"custom-aggregate":{"name":"Custom Aggregate","category":"Aggregates"},"selection":{"name":"Default Selection","category":"Selection"},"selectionapi":{"name":"Selection API","category":"Selection"},"checkbox-selection":{"name":"Checkbox Selection","category":"Selection"},"export":{"name":"Default Exporting","category":"Exporting"},"print":{"name":"Print","category":"Exporting"},"contextmenu":{"name":"Default Context Menu","category":"Context Menu"},"customcontextmenu":{"name":"Custom Context Menu","category":"Context Menu"},"gridlines":{"name":"Gridlines","category":"Miscellaneous"},"clipboard":{"name":"Clipboard","category":"Miscellaneous"},"conditionalformatting":{"name":"Conditional Formatting","category":"Miscellaneous"},"toolbar-template":{"name":"Toolbar Template","category":"Miscellaneous"},"events":{"name":"Events","category":"Miscellaneous"},"keyboard":{"name":"Keyboard Navigation","category":"Miscellaneous"},"defaultSample":"treegrid/treegrid-overview"},
"treemap": {"default":{"name":"Default Functionalities","category":"TreeMap"},"layout":{"name":"Layout","category":"TreeMap"},"drilldown":{"name":"Drilldown","category":"TreeMap"},"customization":{"name":"Customization","category":"TreeMap"},"label":{"name":"Data Label","category":"TreeMap"},"tooltip":{"name":"Tooltip","category":"TreeMap"},"election":{"name":"Legend","category":"TreeMap"},"color-mapping":{"name":"Color Mapping","category":"TreeMap"},"selection":{"name":"Selection & Highlight","category":"TreeMap"},"print":{"name":"Print & Export","category":"TreeMap"},"pie":{"name":"Treemap with Pie","category":"TreeMap"},"rtl":{"name":"RTL","category":"TreeMap"},"defaultSample":"treemap/default"},
"treeview": {"default":{"name":"Default Functionalities","category":"TreeView"},"icons":{"name":"Icons and Images","category":"TreeView"},"check-box":{"name":"Checkbox","category":"TreeView"},"node-editing":{"name":"Node Editing","category":"TreeView"},"multiple-selection":{"name":"Multiple Selection","category":"TreeView"},"drag-and-drop":{"name":"Drag and Drop","category":"TreeView"},"template":{"name":"Template","category":"TreeView"},"local-data":{"name":"Local Data","category":"Data Binding"},"remote-data":{"name":"Remote Data","category":"Data Binding"},"defaultSample":"treeview/default"},
"uploader": {"default":{"name":"Default Functionalities","category":"File Upload"},"chunk-upload":{"name":"Chunk Upload","category":"File Upload"},"custom-file-list":{"name":"Template","category":"File Upload"},"preload-files":{"name":"Preload files","category":"File Upload"},"file-validation":{"name":"File Validation","category":"File Upload"},"image-preview":{"name":"Image Preview","category":"File Upload"},"file-upload-with-forms":{"name":"Form Support","category":"File Upload"},"custom-drop-area":{"name":"Custom Drop Area","category":"File Upload"},"defaultSample":"uploader/default"}
}

export let apiList:any={"accordion/default":[{"name":"items","description":"<p>An array of item that is used to specify Accordion items.</p>\n","type":"AccordionItemModel[]","link":"//ej2.syncfusion.com/react/documentation/api/accordion/#items"}],"accordion/templates":[{"name":"expandMode","description":"<p>Specifies the options to expand single or multiple panel at a time.\nThe possible values are:</p>\n<ul>\n<li><code>Single</code>: Sets to expand only one Accordion item at a time.</li>\n<li><code>Multiple</code>: Sets to expand more than one Accordion item at a time.</li>\n</ul>\n","type":"ExpandMode","link":"//ej2.syncfusion.com/react/documentation/api/accordion/#expandmode"},{"name":"expanding","description":"<p>The event will be fired before the item gets collapsed/expanded.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/accordion/#expanding"}],"accordion/keyboard-interaction":[{"name":"items","description":"<p>An array of item that is used to specify Accordion items.</p>\n","type":"AccordionItemModel[]","link":"//ej2.syncfusion.com/react/documentation/api/accordion/#items"}],"aiassistview/default":[{"name":"promptRequest","description":"<p>Event triggered when a prompt request is made in the AIAssistView component.\nProvides details about the prompt request, including whether it should be cancelled, the prompt text, output, and toolbar items.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/ai-assistview/#promptrequest"},{"name":"promptSuggestions","description":"<p>Specifies the list of prompt suggestions in the AIAssistView component.\nContains suggestions that can be used as prompts.</p>\n","type":"string[]","link":"//ej2.syncfusion.com/react/documentation/api/ai-assistview/#promptsuggestions"},{"name":"bannerTemplate","description":"<p>Specifies the template for the banner in the AIAssistView component.\nRepresents the content or layout used to render the banner. Can be a string or a function.</p>\n","type":"string|Function","link":"//ej2.syncfusion.com/react/documentation/api/ai-assistview/#bannertemplate"},{"name":"toolbarSettings","description":"<p>Specifies the toolbar settings for the AIAssistView component.\nRepresents the configuration for toolbar items and actions within the component.</p>\n","type":"ToolbarSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/ai-assistview/#toolbarsettings"}],"aiassistview/custom-views":[{"name":"views","description":"<p>Specifies the collection of assist view models in the AIAssistView component.\nRepresents the views available in the assist view.</p>\n","type":"AssistViewModel[]","link":"//ej2.syncfusion.com/react/documentation/api/ai-assistview/#views"},{"name":"promptRequest","description":"<p>Event triggered when a prompt request is made in the AIAssistView component.\nProvides details about the prompt request, including whether it should be cancelled, the prompt text, output, and toolbar items.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/ai-assistview/#promptrequest"}],"aiassistview/template":[{"name":"bannerTemplate","description":"<p>Specifies the template for the banner in the AIAssistView component.\nRepresents the content or layout used to render the banner. Can be a string or a function.</p>\n","type":"string|Function","link":"//ej2.syncfusion.com/react/documentation/api/ai-assistview/#bannertemplate"},{"name":"promptItemTemplate","description":"<p>Specifies the template for rendering prompt items in the AIAssistView component.\nDefines the content or layout used to render prompt items, and can be either a string or a function.\nThe template context includes prompt text and toolbar items.</p>\n","type":"string|Function","link":"//ej2.syncfusion.com/react/documentation/api/ai-assistview/#promptitemtemplate"},{"name":"responseItemTemplate","description":"<p>Specifies the template for rendering response items in the AIAssistView component.\nDefines the content or layout used to render response items, and can be either a string or a function.\nThe template context includes the prompt text, response text, and toolbar items.</p>\n","type":"string|Function","link":"//ej2.syncfusion.com/react/documentation/api/ai-assistview/#responseitemtemplate"},{"name":"promptSuggestionItemTemplate","description":"<p>Specifies the template for rendering prompt suggestion items in the AIAssistView component.\nDefines the content or layout used to render prompt suggestion items, and can be either a string or a function.\nThe template context includes the index and suggestion text.</p>\n","type":"string|Function","link":"//ej2.syncfusion.com/react/documentation/api/ai-assistview/#promptsuggestionitemtemplate"},{"name":"promptSuggestions","description":"<p>Specifies the list of prompt suggestions in the AIAssistView component.\nContains suggestions that can be used as prompts.</p>\n","type":"string[]","link":"//ej2.syncfusion.com/react/documentation/api/ai-assistview/#promptsuggestions"},{"name":"promptSuggestionsHeader","description":"<p>Specifies the header text for the prompt suggestions in the AIAssistView component. Provides a header for the list of suggestions.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/ai-assistview/#promptsuggestionsheader"},{"name":"promptRequest","description":"<p>Event triggered when a prompt request is made in the AIAssistView component.\nProvides details about the prompt request, including whether it should be cancelled, the prompt text, output, and toolbar items.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/ai-assistview/#promptrequest"}],"aiassistview/dialog":[{"name":"promptSuggestions","description":"<p>Specifies the list of prompt suggestions in the AIAssistView component.\nContains suggestions that can be used as prompts.</p>\n","type":"string[]","link":"//ej2.syncfusion.com/react/documentation/api/ai-assistview/#promptsuggestions"},{"name":"prompts","description":"<p>Specifies the collection of prompts and their responses in the AIAssistView component.</p>\n","type":"PromptModel[]","link":"//ej2.syncfusion.com/react/documentation/api/ai-assistview/#prompts"},{"name":"promptRequest","description":"<p>Event triggered when a prompt request is made in the AIAssistView component.\nProvides details about the prompt request, including whether it should be cancelled, the prompt text, output, and toolbar items.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/ai-assistview/#promptrequest"},{"name":"toolbarSettings","description":"<p>Specifies the toolbar settings for the AIAssistView component.\nRepresents the configuration for toolbar items and actions within the component.</p>\n","type":"ToolbarSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/ai-assistview/#toolbarsettings"},{"name":"bannerTemplate","description":"<p>Specifies the template for the banner in the AIAssistView component.\nRepresents the content or layout used to render the banner. Can be a string or a function.</p>\n","type":"string|Function","link":"//ej2.syncfusion.com/react/documentation/api/ai-assistview/#bannertemplate"},{"name":"responseToolbarSettings","description":"<p>Specifies the settings for the response toolbar in the AIAssistView component.\nRepresents the configuration for the toolbar associated with response items.</p>\n","type":"ResponseToolbarSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/ai-assistview/#responsetoolbarsettings"},{"name":"cssClass","description":"<p>Specifies custom CSS classes for the AIAssistView component. Allows for additional custom styling.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/ai-assistview/#cssclass"}],"breadcrumb/default":[{"name":"items","description":"<p>Defines the list of Breadcrumb items.</p>\n","type":"BreadcrumbItemModel[]","link":"//ej2.syncfusion.com/react/documentation/api/breadcrumb/#items"}],"breadcrumb/template-and-customization":[{"name":"items","description":"<p>Defines the list of Breadcrumb items.</p>\n","type":"BreadcrumbItemModel[]","link":"//ej2.syncfusion.com/react/documentation/api/breadcrumb/#items"}],"breadcrumb/events":[{"name":"items","description":"<p>Defines the list of Breadcrumb items.</p>\n","type":"BreadcrumbItemModel[]","link":"//ej2.syncfusion.com/react/documentation/api/breadcrumb/#items"}],"breadcrumb/address-bar":[{"name":"items","description":"<p>Defines the list of Breadcrumb items.</p>\n","type":"BreadcrumbItemModel[]","link":"//ej2.syncfusion.com/react/documentation/api/breadcrumb/#items"}],"button/default":[{"name":"isPrimary","description":"<p>Allows the appearance of the Button to be enhanced and visually appealing when set to <code>true</code>.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/button/#isprimary"},{"name":"cssClass","description":"<p>Defines class/multiple classes separated by a space in the Button element. The Button types, styles, and\nsize can be defined by using\n<a href=\"http://ej2.syncfusion.com/documentation/button/howto.html?lang=typescript#create-a-block-button\"><code>this</code></a>.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/button/#cssclass"},{"name":"iconCss","description":"<p>Defines class/multiple classes separated by a space for the Button that is used to include an icon.\nButtons can also include font icon and sprite image.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/button/#iconcss"},{"name":"isToggle","description":"<p>Makes the Button toggle, when set to <code>true</code>. When you click it, the state changes from normal to active.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/button/#istoggle"},{"name":"iconPosition","description":"<p>Positions the icon before/after the text content in the Button.\nThe possible values are:</p>\n<ul>\n<li>Left: The icon will be positioned to the left of the text content.</li>\n<li>Right: The icon will be positioned to the right of the text content.</li>\n</ul>\n","type":"string|IconPosition","link":"//ej2.syncfusion.com/react/documentation/api/button/#iconposition"},{"name":"content","description":"<p>Defines the text <code>content</code> of the Button element.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/button/#content"}],"button/checkbox":[{"name":"label","description":"<p>Defines the caption for the CheckBox, that describes the purpose of the CheckBox.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/check-box/#label"},{"name":"checked","description":"<p>Specifies a value that indicates whether the CheckBox is <code>checked</code> or not.\nWhen set to <code>true</code>, the CheckBox will be in <code>checked</code> state.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/check-box/#checked"},{"name":"indeterminate","description":"<p>Specifies a value that indicates whether the CheckBox is in <code>indeterminate</code> state or not.\nWhen set to <code>true</code>, the CheckBox will be in <code>indeterminate</code> state.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/check-box/#indeterminate"},{"name":"disabled","description":"<p>Specifies a value that indicates whether the CheckBox is <code>disabled</code> or not.\nWhen set to <code>true</code>, the CheckBox will be in <code>disabled</code> state.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/check-box/#disabled"},{"name":"change","description":"<p>Triggers when the CheckBox state has been changed by user interaction.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/check-box/#change"}],"button/radio-button":[{"name":"label","description":"<p>Defines the caption for the RadioButton, that describes the purpose of the RadioButton.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/radio-button/#label"},{"name":"name","description":"<p>Defines <code>name</code> attribute for the RadioButton.\nIt is used to reference form data (RadioButton value) after a form is submitted.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/radio-button/#name"},{"name":"value","description":"<p>Defines <code>value</code> attribute for the RadioButton.\nIt is a form data passed to the server when submitting the form.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/radio-button/#value"},{"name":"checked","description":"<p>Specifies a value that indicates whether the RadioButton is <code>checked</code> or not.\nWhen set to <code>true</code>, the RadioButton will be in <code>checked</code> state.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/radio-button/#checked"}],"button/dropdown-button":[{"name":"items","description":"<p>Specifies action items with its properties which will be rendered as DropDownButton popup.</p>\n","type":"ItemModel[]","link":"//ej2.syncfusion.com/react/documentation/api/drop-down-button/#items"},{"name":"cssClass","description":"<p>Defines class/multiple classes separated by a space in the DropDownButton element. The\nDropDownButton size and styles can be customized by using this.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/drop-down-button/#cssclass"},{"name":"iconCss","description":"<p>Defines class/multiple classes separated by a space for the DropDownButton that is used to\ninclude an icon. DropDownButton can also include font icon and sprite image.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/drop-down-button/#iconcss"}],"button/split-button":[{"name":"items","description":"<p>Specifies action items with its properties which will be rendered as SplitButton secondary button popup.</p>\n","type":"ItemModel[]","link":"//ej2.syncfusion.com/react/documentation/api/split-button/#items"},{"name":"content","description":"<p>Defines the content of the SplitButton primary action button can either be a text or HTML elements.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/split-button/#content"},{"name":"iconCss","description":"<p>Defines class/multiple classes separated by a space for the SplitButton that is used to include an\nicon. SplitButton can also include font icon and sprite image.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/split-button/#iconcss"},{"name":"beforeItemRender","description":"<p>Triggers while rendering each Popup item of SplitButton.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/split-button/#beforeitemrender"}],"button/switch":[{"name":"checked","description":"<p>Specifies a value that indicates whether the Switch is <code>checked</code> or not.\nWhen set to <code>true</code>, the Switch will be in <code>checked</code> state.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/switch/#checked"},{"name":"disabled","description":"<p>Specifies a value that indicates whether the Switch is <code>disabled</code> or not.\nWhen set to <code>true</code>, the Switch will be in <code>disabled</code> state.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/switch/#disabled"}],"button/progress-button":[{"name":"content","description":"<p>Defines the text <code>content</code> of the progress button element.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/progress-button/#content"},{"name":"iconCss","description":"<p>Defines class/multiple classes separated by a space for the progress button that is used to include an icon.\nProgress button can also include font icon and sprite image.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/progress-button/#iconcss"},{"name":"cssClass","description":"<p>Specifies the root CSS class of the progress button that allows customization of component’s appearance.\nThe progress button types, styles, and size can be achieved by using this property.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/progress-button/#cssclass"},{"name":"duration","description":"<p>Specifies the duration of progression in the progress button.</p>\n","type":"number","link":"//ej2.syncfusion.com/react/documentation/api/progress-button/#duration"},{"name":"disabled","description":"<p>Enables or disables the progress button.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/progress-button/#disabled"},{"name":"isPrimary","description":"<p>Allows the appearance of the progress button to be enhanced and visually appealing when set to <code>true</code>.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/progress-button/#isprimary"},{"name":"enableProgress","description":"<p>Enables or disables the background filler UI in the progress button.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/progress-button/#enableprogress"},{"name":"end","description":"<p>Triggers when the progress is completed.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/progress-button/#end"},{"name":"begin","description":"<p>Triggers when the progress starts.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/progress-button/#begin"},{"name":"spinSettings","description":"<p>Specifies a spinner and its related properties.</p>\n","type":"SpinSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/progress-button/#spinsettings"},{"name":"animationSettings","description":"<p>Specifies the animation settings.</p>\n","type":"AnimationSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/progress-button/#animationsettings"}],"calendar/default":[{"name":"change","description":"<p>Triggers when the Calendar value is changed.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/calendar/#change"}],"chatui/default":[{"name":"suggestions","description":"<p>Specifies the list of message suggestions displayed above the input textarea in the Chat UI component.\nThis property represents an array of suggestions that can assist the user in composing messages, providing quick replies.</p>\n","type":"string[]","link":"//ej2.syncfusion.com/react/documentation/api/chat-ui/#suggestions"},{"name":"headerText","description":"<p>Specifies the header text to be displayed in the Chat UI component.\nThis property defines the text that appears in the header, which can indicate the current participant's username or the group name, providing context for the conversation.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/chat-ui/#headertext"},{"name":"headerIconCss","description":"<p>Specifies the CSS class for the header icon in the Chat UI component.\nThis property allows for custom styling of the header icon.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/chat-ui/#headericoncss"},{"name":"messages","description":"<p>Specifies a collection of messages within the Chat UI component.\nEach message is represented by a MessageModel object, containing properties such as text, author, timestamp, and status.</p>\n","type":"MessageModel[]","link":"//ej2.syncfusion.com/react/documentation/api/chat-ui/#messages"},{"name":"user","description":"<p>Represents the current user interacting with the Chat UI.\nUses the <code>UserModel</code> object, which contains current user information.\nMessages from the current user are displayed on the right side of the Chat UI for differentiation from other participants.</p>\n","type":"UserModel","link":"//ej2.syncfusion.com/react/documentation/api/chat-ui/#user"}],"chatui/loadOn-demand":[{"name":"headerText","description":"<p>Specifies the header text to be displayed in the Chat UI component.\nThis property defines the text that appears in the header, which can indicate the current participant's username or the group name, providing context for the conversation.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/chat-ui/#headertext"},{"name":"headerIconCss","description":"<p>Specifies the CSS class for the header icon in the Chat UI component.\nThis property allows for custom styling of the header icon.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/chat-ui/#headericoncss"},{"name":"messages","description":"<p>Specifies a collection of messages within the Chat UI component.\nEach message is represented by a MessageModel object, containing properties such as text, author, timestamp, and status.</p>\n","type":"MessageModel[]","link":"//ej2.syncfusion.com/react/documentation/api/chat-ui/#messages"},{"name":"user","description":"<p>Represents the current user interacting with the Chat UI.\nUses the <code>UserModel</code> object, which contains current user information.\nMessages from the current user are displayed on the right side of the Chat UI for differentiation from other participants.</p>\n","type":"UserModel","link":"//ej2.syncfusion.com/react/documentation/api/chat-ui/#user"},{"name":"loadOnDemand","description":"<p>Enables on-demand loading of messages, typically triggered as the user scrolls through the chat history.\nWhen set to <code>true</code>, older messages will load progressively, improving performance for large message histories by avoiding initial loading of all messages.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/chat-ui/#loadondemand"}],"chatui/template":[{"name":"messages","description":"<p>Specifies a collection of messages within the Chat UI component.\nEach message is represented by a MessageModel object, containing properties such as text, author, timestamp, and status.</p>\n","type":"MessageModel[]","link":"//ej2.syncfusion.com/react/documentation/api/chat-ui/#messages"},{"name":"user","description":"<p>Represents the current user interacting with the Chat UI.\nUses the <code>UserModel</code> object, which contains current user information.\nMessages from the current user are displayed on the right side of the Chat UI for differentiation from other participants.</p>\n","type":"UserModel","link":"//ej2.syncfusion.com/react/documentation/api/chat-ui/#user"},{"name":"emptyChatTemplate","description":"<p>Specifies the template for rendering the empty state of the Chat UI component.\nThis property can accept either a string or a function to customize the appearance when there are no messages to display in the chat.</p>\n","type":"string|Function","link":"//ej2.syncfusion.com/react/documentation/api/chat-ui/#emptychattemplate"},{"name":"messageTemplate","description":"<p>Specifies the template for rendering individual messages in the Chat UI component.\nThis property can accept either a string or a function to customize the appearance of messages. The template context includes message and index.</p>\n","type":"string|Function","link":"//ej2.syncfusion.com/react/documentation/api/chat-ui/#messagetemplate"},{"name":"timeBreakTemplate","description":"<p>Defines a custom template for rendering time breaks in the Chat UI component.\nAccepts a string or function that formats the appearance of date-based separators, allowing customization of how messages are visually grouped by date.</p>\n","type":"string|Function","link":"//ej2.syncfusion.com/react/documentation/api/chat-ui/#timebreaktemplate"},{"name":"showTimeBreak","description":"<p>Specifies whether time breaks are enabled for grouping chat messages by date.\nWhen set to <code>true</code>, messages will be grouped based on their timestamp, creating date-wise separators within the chat.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/chat-ui/#showtimebreak"},{"name":"headerText","description":"<p>Specifies the header text to be displayed in the Chat UI component.\nThis property defines the text that appears in the header, which can indicate the current participant's username or the group name, providing context for the conversation.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/chat-ui/#headertext"},{"name":"headerIconCss","description":"<p>Specifies the CSS class for the header icon in the Chat UI component.\nThis property allows for custom styling of the header icon.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/chat-ui/#headericoncss"},{"name":"messageSend","description":"<p>Event triggered when a message is about to be sent in the Chat UI component.\nThis event allows for cancelling the send action if needed.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/chat-ui/#messagesend"}],"chatui/api":[{"name":"suggestions","description":"<p>Specifies the list of message suggestions displayed above the input textarea in the Chat UI component.\nThis property represents an array of suggestions that can assist the user in composing messages, providing quick replies.</p>\n","type":"string[]","link":"//ej2.syncfusion.com/react/documentation/api/chat-ui/#suggestions"},{"name":"headerText","description":"<p>Specifies the header text to be displayed in the Chat UI component.\nThis property defines the text that appears in the header, which can indicate the current participant's username or the group name, providing context for the conversation.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/chat-ui/#headertext"},{"name":"headerIconCss","description":"<p>Specifies the CSS class for the header icon in the Chat UI component.\nThis property allows for custom styling of the header icon.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/chat-ui/#headericoncss"},{"name":"messages","description":"<p>Specifies a collection of messages within the Chat UI component.\nEach message is represented by a MessageModel object, containing properties such as text, author, timestamp, and status.</p>\n","type":"MessageModel[]","link":"//ej2.syncfusion.com/react/documentation/api/chat-ui/#messages"},{"name":"user","description":"<p>Represents the current user interacting with the Chat UI.\nUses the <code>UserModel</code> object, which contains current user information.\nMessages from the current user are displayed on the right side of the Chat UI for differentiation from other participants.</p>\n","type":"UserModel","link":"//ej2.syncfusion.com/react/documentation/api/chat-ui/#user"}],"chatui/chat-integration":[{"name":"messages","description":"<p>Specifies a collection of messages within the Chat UI component.\nEach message is represented by a MessageModel object, containing properties such as text, author, timestamp, and status.</p>\n","type":"MessageModel[]","link":"//ej2.syncfusion.com/react/documentation/api/chat-ui/#messages"},{"name":"user","description":"<p>Represents the current user interacting with the Chat UI.\nUses the <code>UserModel</code> object, which contains current user information.\nMessages from the current user are displayed on the right side of the Chat UI for differentiation from other participants.</p>\n","type":"UserModel","link":"//ej2.syncfusion.com/react/documentation/api/chat-ui/#user"},{"name":"timeStampFormat","description":"<p>Specifies the format of the value that to be displayed in component.\nBy default, the format will be set based on the culture. You can set the format to &quot;format:'dd/MM/yyyy hh:mm a'&quot; in string.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/chat-ui/#timestampformat"},{"name":"showTimeStamp","description":"<p>Specifies whether timestamps are displayed alongside each message in the Chat UI component.\nWhen set to true, timestamps will appear with each message, helping users track the timing of conversations.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/chat-ui/#showtimestamp"},{"name":"headerText","description":"<p>Specifies the header text to be displayed in the Chat UI component.\nThis property defines the text that appears in the header, which can indicate the current participant's username or the group name, providing context for the conversation.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/chat-ui/#headertext"},{"name":"headerIconCss","description":"<p>Specifies the CSS class for the header icon in the Chat UI component.\nThis property allows for custom styling of the header icon.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/chat-ui/#headericoncss"}],"colorpicker/default":[{"name":"value","description":"<p>It is used to set the color value for ColorPicker. It should be specified as Hex code.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/color-picker/#value"},{"name":"disabled","description":"<p>It is used to enable / disable ColorPicker component. If it is disabled the ColorPicker popup won’t open.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/color-picker/#disabled"}],"colorpicker/inline":[{"name":"value","description":"<p>It is used to set the color value for ColorPicker. It should be specified as Hex code.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/color-picker/#value"},{"name":"mode","description":"<p>It is used to render the ColorPicker with the specified mode.</p>\n","type":"ColorPickerMode","link":"//ej2.syncfusion.com/react/documentation/api/color-picker/#mode"},{"name":"modeSwitcher","description":"<p>It is used to show / hide the mode switcher button of ColorPicker component.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/color-picker/#modeswitcher"},{"name":"inline","description":"<p>It is used to render the ColorPicker component as inline.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/color-picker/#inline"},{"name":"disabled","description":"<p>It is used to enable / disable ColorPicker component. If it is disabled the ColorPicker popup won’t open.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/color-picker/#disabled"}],"colorpicker/custom":[{"name":"value","description":"<p>It is used to set the color value for ColorPicker. It should be specified as Hex code.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/color-picker/#value"},{"name":"mode","description":"<p>It is used to render the ColorPicker with the specified mode.</p>\n","type":"ColorPickerMode","link":"//ej2.syncfusion.com/react/documentation/api/color-picker/#mode"},{"name":"modeSwitcher","description":"<p>It is used to show / hide the mode switcher button of ColorPicker component.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/color-picker/#modeswitcher"},{"name":"inline","description":"<p>It is used to render the ColorPicker component as inline.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/color-picker/#inline"},{"name":"disabled","description":"<p>It is used to enable / disable ColorPicker component. If it is disabled the ColorPicker popup won’t open.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/color-picker/#disabled"},{"name":"presetColors","description":"<p>It is used to load custom colors to palette.</p>\n","type":"Object","link":"//ej2.syncfusion.com/react/documentation/api/color-picker/#presetcolors"}],"colorpicker/api":[{"name":"value","description":"<p>It is used to set the color value for ColorPicker. It should be specified as Hex code.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/color-picker/#value"},{"name":"disabled","description":"<p>It is used to enable / disable ColorPicker component. If it is disabled the ColorPicker popup won’t open.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/color-picker/#disabled"},{"name":"modeSwitcher","description":"<p>It is used to show / hide the mode switcher button of ColorPicker component.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/color-picker/#modeswitcher"},{"name":"mode","description":"<p>It is used to render the ColorPicker with the specified mode.</p>\n","type":"ColorPickerMode","link":"//ej2.syncfusion.com/react/documentation/api/color-picker/#mode"},{"name":"showButtons","description":"<p>It is used to show / hide the control buttons (apply / cancel) of  ColorPicker component.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/color-picker/#showbuttons"}],"contextmenu/default":[{"name":"target","description":"<p>Specifies target element selector in which the ContextMenu should be opened.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/context-menu/#target"},{"name":"items","description":"<p>Specifies menu items with its properties which will be rendered as ContextMenu.</p>\n","type":"MenuItemModel[]","link":"//ej2.syncfusion.com/react/documentation/api/context-menu/#items"},{"name":"beforeItemRender","description":"<p>Triggers while rendering each menu item.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/context-menu/#beforeitemrender"},{"name":"animationSettings","description":"<p>Specifies the animation settings for the sub menu open.</p>\n","type":"MenuAnimationSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/context-menu/#animationsettings"}],"contextmenu/template":[{"name":"target","description":"<p>Specifies target element selector in which the ContextMenu should be opened.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/context-menu/#target"},{"name":"items","description":"<p>Specifies menu items with its properties which will be rendered as ContextMenu.</p>\n","type":"MenuItemModel[]","link":"//ej2.syncfusion.com/react/documentation/api/context-menu/#items"},{"name":"beforeItemRender","description":"<p>Triggers while rendering each menu item.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/context-menu/#beforeitemrender"},{"name":"animationSettings","description":"<p>Specifies the animation settings for the sub menu open.</p>\n","type":"MenuAnimationSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/context-menu/#animationsettings"}],"datepicker/default":[{"name":"placeholder","description":"<p>Specifies the placeholder text that displayed in textbox.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/datepicker/#placeholder"}],"datepicker/input-mask":[{"name":"enableMask","description":"<p>Specifies whether it is a masked datepicker or not.\nBy default the datepicker component render without masked input.\nIf you need masked datepicker input then specify it as true.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/datepicker/#enablemask"}],"daterangepicker/default":[{"name":"placeholder","description":"<p>Specifies the placeholder text that need to be displayed in the DateRangePicker component.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/daterangepicker/#placeholder"}],"datetimepicker/input-mask":[{"name":"enableMask","description":"<p>Specifies whether it is a masked datetimepicker or not.\nBy default the datetimepicker component render without masked input.\nIf you need masked datetimepicker input then specify it as true.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/datetimepicker/#enablemask"}],"floatingactionbutton/overview":[{"name":"iconCss","description":"<p>Defines class/multiple classes separated by a space for the Button that is used to include an icon.\nButtons can also include font icon and sprite image.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/floating-action-button/fabComponent#iconcss"},{"name":"target","description":"<p>Defines the selector that points to an element in which the FAB will be positioned.\nBy default, FAB is positioned based on viewport of browser.\nThe target element must have relative position, else FAB will get positioned based on the closest element which has relative position.</p>\n","type":"string|HTMLElement","link":"//ej2.syncfusion.com/react/documentation/api/floating-action-button/fabComponent#target"}],"floatingactionbutton/default":[{"name":"isPrimary","description":"<p>Defines whether to apply primary style for FAB.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/floating-action-button/fabComponent#isprimary"},{"name":"cssClass","description":"<p>Defines class/multiple classes separated by a space in the Button element. The Button types, styles, and\nsize can be defined by using\n<a href=\"http://ej2.syncfusion.com/documentation/button/howto.html?lang=typescript#create-a-block-button\"><code>this</code></a>.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/floating-action-button/fabComponent#cssclass"},{"name":"iconCss","description":"<p>Defines class/multiple classes separated by a space for the Button that is used to include an icon.\nButtons can also include font icon and sprite image.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/floating-action-button/fabComponent#iconcss"},{"name":"content","description":"<p>Defines the text <code>content</code> of the Button element.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/floating-action-button/fabComponent#content"},{"name":"target","description":"<p>Defines the selector that points to an element in which the FAB will be positioned.\nBy default, FAB is positioned based on viewport of browser.\nThe target element must have relative position, else FAB will get positioned based on the closest element which has relative position.</p>\n","type":"string|HTMLElement","link":"//ej2.syncfusion.com/react/documentation/api/floating-action-button/fabComponent#target"},{"name":"disabled","description":"<p>Specifies a value that indicates whether the Button is <code>disabled</code> or not.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/floating-action-button/fabComponent#disabled"}],"floatingactionbutton/position":[{"name":"position","description":"<p>Defines the position of the FAB relative to target.\nThe possible values are:</p>\n<ul>\n<li>TopLeft: Positions the FAB at the target's top left corner.</li>\n<li>TopCenter: Positions the FAB at the target's top left corner.</li>\n<li>TopRight: Positions the FAB at the target's top left corner.</li>\n<li>MiddleLeft: Positions the FAB at the target's top left corner.</li>\n<li>MiddleCenter: Positions the FAB at the target's top left corner.</li>\n<li>MiddleRight: Positions the FAB at the target's top left corner.</li>\n<li>BottomLeft: Positions the FAB at the target's top left corner.</li>\n<li>BottomCenter: Places the FAB on the bottom-center position of the target.</li>\n<li>BottomRight: Positions the FAB at the target's bottom right corner.</li>\n</ul>\n","type":"string|FabPosition","link":"//ej2.syncfusion.com/react/documentation/api/floating-action-button/fabComponent#position"},{"name":"iconCss","description":"<p>Defines class/multiple classes separated by a space for the Button that is used to include an icon.\nButtons can also include font icon and sprite image.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/floating-action-button/fabComponent#iconcss"},{"name":"content","description":"<p>Defines the text <code>content</code> of the Button element.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/floating-action-button/fabComponent#content"},{"name":"target","description":"<p>Defines the selector that points to an element in which the FAB will be positioned.\nBy default, FAB is positioned based on viewport of browser.\nThe target element must have relative position, else FAB will get positioned based on the closest element which has relative position.</p>\n","type":"string|HTMLElement","link":"//ej2.syncfusion.com/react/documentation/api/floating-action-button/fabComponent#target"}],"floatingactionbutton/styles":[{"name":"isPrimary","description":"<p>Defines whether to apply primary style for FAB.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/floating-action-button/fabComponent#isprimary"},{"name":"cssClass","description":"<p>Defines class/multiple classes separated by a space in the Button element. The Button types, styles, and\nsize can be defined by using\n<a href=\"http://ej2.syncfusion.com/documentation/button/howto.html?lang=typescript#create-a-block-button\"><code>this</code></a>.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/floating-action-button/fabComponent#cssclass"},{"name":"iconCss","description":"<p>Defines class/multiple classes separated by a space for the Button that is used to include an icon.\nButtons can also include font icon and sprite image.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/floating-action-button/fabComponent#iconcss"},{"name":"content","description":"<p>Defines the text <code>content</code> of the Button element.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/floating-action-button/fabComponent#content"},{"name":"target","description":"<p>Defines the selector that points to an element in which the FAB will be positioned.\nBy default, FAB is positioned based on viewport of browser.\nThe target element must have relative position, else FAB will get positioned based on the closest element which has relative position.</p>\n","type":"string|HTMLElement","link":"//ej2.syncfusion.com/react/documentation/api/floating-action-button/fabComponent#target"}],"gantt/overview":[{"name":"dataSource","description":"<p>Defines the data source for the Gantt chart, which is used to render rows and tasks.\nThe <code>dataSource</code> can be an array of JavaScript objects, an instance of <code>DataManager</code>, or a single object.\nThe array of objects should contain the task data with properties such as <code>TaskID</code>, <code>TaskName</code>, <code>StartDate</code>, <code>EndDate</code>, etc.\nThis allows dynamic binding of tasks and their relationships (e.g., dependencies, subtasks, progress) to the Gantt chart.</p>\n","type":"Object[]|DataManager|Object","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#datasource"},{"name":"taskFields","description":"<p>Defines the mapping properties to extract task-related values, such as ID, start date, end date, duration, and progress, from the data source.\nThis allows the Gantt chart to properly map the provided data to the corresponding task fields and render them accordingly.</p>\n","type":"TaskFieldsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#taskfields"},{"name":"height","description":"<p>Defines the height of the Gantt component container.\nThe <code>height</code> property can be set to a specific value (in pixels or percentage) or set to 'auto' for automatic height adjustment based on content.</p>\n","type":"number|string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#height"},{"name":"highlightWeekends","description":"<p>If <code>highlightWeekends</code> is set to true, it highlights all weekend days in the week-day timeline mode.\nThis makes weekends visually distinct in the timeline view.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#highlightweekends"},{"name":"eventMarkers","description":"<p>Defines the events and milestones along the project timeline.\nThese event markers indicate significant events or milestones throughout the project's duration.</p>\n","type":"EventMarkerModel[]","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#eventmarkers"},{"name":"labelSettings","description":"<p>Configures the labels displayed on the right, left, and inside the taskbars in the Gantt chart.</p>\n","type":"LabelSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#labelsettings"},{"name":"projectStartDate","description":"<p>Defines the start date of the project. If the <code>projectStartDate</code> is not set, it will be automatically calculated based on the data source.\nThe date can be provided as a <code>Date</code> object or a string in a valid date format.</p>\n","type":"Date|string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#projectstartdate"},{"name":"projectEndDate","description":"<p>Defines the end date of the project. If the <code>projectEndDate</code> is not set, it will be automatically calculated based on the data source.\nThe date can be provided as a <code>Date</code> object or a string in a valid date format.</p>\n","type":"Date|string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#projectenddate"}],"gantt/default":[{"name":"dataSource","description":"<p>Defines the data source for the Gantt chart, which is used to render rows and tasks.\nThe <code>dataSource</code> can be an array of JavaScript objects, an instance of <code>DataManager</code>, or a single object.\nThe array of objects should contain the task data with properties such as <code>TaskID</code>, <code>TaskName</code>, <code>StartDate</code>, <code>EndDate</code>, etc.\nThis allows dynamic binding of tasks and their relationships (e.g., dependencies, subtasks, progress) to the Gantt chart.</p>\n","type":"Object[]|DataManager|Object","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#datasource"},{"name":"taskFields","description":"<p>Defines the mapping properties to extract task-related values, such as ID, start date, end date, duration, and progress, from the data source.\nThis allows the Gantt chart to properly map the provided data to the corresponding task fields and render them accordingly.</p>\n","type":"TaskFieldsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#taskfields"},{"name":"height","description":"<p>Defines the height of the Gantt component container.\nThe <code>height</code> property can be set to a specific value (in pixels or percentage) or set to 'auto' for automatic height adjustment based on content.</p>\n","type":"number|string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#height"},{"name":"highlightWeekends","description":"<p>If <code>highlightWeekends</code> is set to true, it highlights all weekend days in the week-day timeline mode.\nThis makes weekends visually distinct in the timeline view.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#highlightweekends"},{"name":"eventMarkers","description":"<p>Defines the events and milestones along the project timeline.\nThese event markers indicate significant events or milestones throughout the project's duration.</p>\n","type":"EventMarkerModel[]","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#eventmarkers"},{"name":"labelSettings","description":"<p>Configures the labels displayed on the right, left, and inside the taskbars in the Gantt chart.</p>\n","type":"LabelSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#labelsettings"},{"name":"projectStartDate","description":"<p>Defines the start date of the project. If the <code>projectStartDate</code> is not set, it will be automatically calculated based on the data source.\nThe date can be provided as a <code>Date</code> object or a string in a valid date format.</p>\n","type":"Date|string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#projectstartdate"},{"name":"projectEndDate","description":"<p>Defines the end date of the project. If the <code>projectEndDate</code> is not set, it will be automatically calculated based on the data source.\nThe date can be provided as a <code>Date</code> object or a string in a valid date format.</p>\n","type":"Date|string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#projectenddate"}],"gantt/editing":[{"name":"dataSource","description":"<p>Defines the data source for the Gantt chart, which is used to render rows and tasks.\nThe <code>dataSource</code> can be an array of JavaScript objects, an instance of <code>DataManager</code>, or a single object.\nThe array of objects should contain the task data with properties such as <code>TaskID</code>, <code>TaskName</code>, <code>StartDate</code>, <code>EndDate</code>, etc.\nThis allows dynamic binding of tasks and their relationships (e.g., dependencies, subtasks, progress) to the Gantt chart.</p>\n","type":"Object[]|DataManager|Object","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#datasource"},{"name":"dateFormat","description":"<p>Specifies the date format for displaying dates in the Gantt chart, including in tooltips and grid cells.\nBy default, the format is determined based on the current culture/locale settings.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#dateformat"},{"name":"height","description":"<p>Defines the height of the Gantt component container.\nThe <code>height</code> property can be set to a specific value (in pixels or percentage) or set to 'auto' for automatic height adjustment based on content.</p>\n","type":"number|string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#height"},{"name":"taskFields","description":"<p>Defines the mapping properties to extract task-related values, such as ID, start date, end date, duration, and progress, from the data source.\nThis allows the Gantt chart to properly map the provided data to the corresponding task fields and render them accordingly.</p>\n","type":"TaskFieldsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#taskfields"},{"name":"editSettings","description":"<p>Configures the edit settings for the Gantt chart, such as enabling or disabling task modifications.</p>\n","type":"EditSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#editsettings"},{"name":"toolbar","description":"<p><code>toolbar</code> defines the toolbar items of the Gantt.\nIt contains built-in and custom toolbar items.\nIf an array value is assigned, it is considered as the list of built-in and custom toolbar items in the Gantt's toolbar.\n&lt;br&gt;&lt;br&gt;\nThe available built-in toolbar items are:</p>\n<ul>\n<li>Add: Adds a new record.</li>\n<li>Edit: Edits the selected task.</li>\n<li>Update: Updates the edited task.</li>\n<li>Delete: Deletes the selected task.</li>\n<li>Cancel: Cancels the edit state.</li>\n<li>Search: Searches tasks by the given key.</li>\n<li>ExpandAll: Expands all the task of Gantt.</li>\n<li>CollapseAll: Collapses all the task of Gantt.</li>\n<li>PrevTimeSpan: Extends timeline with one unit before the timeline start date.</li>\n<li>NextTimeSpan: Extends timeline with one unit after the timeline finish date.</li>\n<li>ZoomIn: ZoomIn the Gantt control.</li>\n<li>ZoomOut: ZoomOut the Gantt control.</li>\n<li>ZoomToFit: Display the all tasks within the viewable Gantt chart.</li>\n<li>ExcelExport: To export in Excel format.</li>\n<li>CsvExport : To export in CSV format.</li>\n<li>Indent: To indent a task to one level.</li>\n<li>Outdent: To outdent a task from one level.</li>\n</ul>\n","type":"[]","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#toolbar"},{"name":"columns","description":"<p>Defines the collection of columns displayed in the Gantt chart grid.\nIf the <code>columns</code> declaration is empty, the columns are automatically populated based on the <code>taskSettings</code> values.</p>\n","type":"Column[]|string[]|ColumnModel[]","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#columns"},{"name":"treeColumnIndex","description":"<p>To define expander column index in Grid.</p>\n","type":"number","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#treecolumnindex"},{"name":"allowSelection","description":"<p>If <code>allowSelection</code> is set to true, it enables row selection in the Gantt chart, and the selected rows are highlighted.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#allowselection"},{"name":"gridLines","description":"<p>Configures the grid lines displayed in the TreeGrid and Gantt chart.\nThe <code>gridLines</code> property allows customization of the type of grid lines to be shown, either horizontal, vertical, or both.</p>\n","type":"GridLine","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#gridlines"},{"name":"resourceFields","description":"<p>Defines the mapping properties to extract resource values, such as <code>id</code>, <code>name</code>, <code>unit</code>, and <code>group</code> from the resource collection in the Gantt chart.\nThis helps to map data from a custom resource collection to the appropriate fields for resource allocation.</p>\n","type":"ResourceFieldsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#resourcefields"},{"name":"resources","description":"<p>Defines the collection of resources assigned to the project.</p>\n","type":"object[]","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#resources"},{"name":"highlightWeekends","description":"<p>If <code>highlightWeekends</code> is set to true, it highlights all weekend days in the week-day timeline mode.\nThis makes weekends visually distinct in the timeline view.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#highlightweekends"},{"name":"timelineSettings","description":"<p>Configures timeline settings of Gantt.\nDefines default timeline modes or customized top tier mode and bottom tier mode or single tier only.</p>\n","type":"TimelineSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#timelinesettings"},{"name":"labelSettings","description":"<p>Configures the labels displayed on the right, left, and inside the taskbars in the Gantt chart.</p>\n","type":"LabelSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#labelsettings"},{"name":"labelSettings","description":"<p>Configures the labels displayed on the right, left, and inside the taskbars in the Gantt chart.</p>\n","type":"LabelSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#labelsettings"},{"name":"projectStartDate","description":"<p>Defines the start date of the project. If the <code>projectStartDate</code> is not set, it will be automatically calculated based on the data source.\nThe date can be provided as a <code>Date</code> object or a string in a valid date format.</p>\n","type":"Date|string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#projectstartdate"},{"name":"projectEndDate","description":"<p>Defines the end date of the project. If the <code>projectEndDate</code> is not set, it will be automatically calculated based on the data source.\nThe date can be provided as a <code>Date</code> object or a string in a valid date format.</p>\n","type":"Date|string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#projectenddate"},{"name":"editDialogFields","description":"<p>Defines the tabs and fields to be displayed in the edit dialog.\nIf not specified, the fields will be derived from the <code>taskSettings</code> and <code>columns</code> values.</p>\n","type":"EditDialogFieldSettingsModel[]","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#editdialogfields"},{"name":"eventMarkers","description":"<p>Defines the events and milestones along the project timeline.\nThese event markers indicate significant events or milestones throughout the project's duration.</p>\n","type":"EventMarkerModel[]","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#eventmarkers"},{"name":"splitterSettings","description":"<p>Configures the splitter settings for the Gantt chart.</p>\n","type":"SplitterSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#splittersettings"}],"gantt/virtual-scroll":[{"name":"dataSource","description":"<p>Defines the data source for the Gantt chart, which is used to render rows and tasks.\nThe <code>dataSource</code> can be an array of JavaScript objects, an instance of <code>DataManager</code>, or a single object.\nThe array of objects should contain the task data with properties such as <code>TaskID</code>, <code>TaskName</code>, <code>StartDate</code>, <code>EndDate</code>, etc.\nThis allows dynamic binding of tasks and their relationships (e.g., dependencies, subtasks, progress) to the Gantt chart.</p>\n","type":"Object[]|DataManager|Object","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#datasource"},{"name":"taskFields","description":"<p>Defines the mapping properties to extract task-related values, such as ID, start date, end date, duration, and progress, from the data source.\nThis allows the Gantt chart to properly map the provided data to the corresponding task fields and render them accordingly.</p>\n","type":"TaskFieldsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#taskfields"},{"name":"treeColumnIndex","description":"<p>To define expander column index in Grid.</p>\n","type":"number","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#treecolumnindex"},{"name":"height","description":"<p>Defines the height of the Gantt component container.\nThe <code>height</code> property can be set to a specific value (in pixels or percentage) or set to 'auto' for automatic height adjustment based on content.</p>\n","type":"number|string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#height"},{"name":"highlightWeekends","description":"<p>If <code>highlightWeekends</code> is set to true, it highlights all weekend days in the week-day timeline mode.\nThis makes weekends visually distinct in the timeline view.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#highlightweekends"},{"name":"selectionSettings","description":"<p>Configures the settings for selection in the Gantt chart.</p>\n","type":"SelectionSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#selectionsettings"},{"name":"enableVirtualization","description":"<p>If <code>enableVirtualization</code> is set to true, the Gantt chart will render only the rows visible within the viewport.\nand load subsequent rows as the user scrolls vertically. This improves performance when dealing with large datasets.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#enablevirtualization"}],"gantt/undo-redo":[{"name":"dataSource","description":"<p>Defines the data source for the Gantt chart, which is used to render rows and tasks.\nThe <code>dataSource</code> can be an array of JavaScript objects, an instance of <code>DataManager</code>, or a single object.\nThe array of objects should contain the task data with properties such as <code>TaskID</code>, <code>TaskName</code>, <code>StartDate</code>, <code>EndDate</code>, etc.\nThis allows dynamic binding of tasks and their relationships (e.g., dependencies, subtasks, progress) to the Gantt chart.</p>\n","type":"Object[]|DataManager|Object","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#datasource"},{"name":"taskFields","description":"<p>Defines the mapping properties to extract task-related values, such as ID, start date, end date, duration, and progress, from the data source.\nThis allows the Gantt chart to properly map the provided data to the corresponding task fields and render them accordingly.</p>\n","type":"TaskFieldsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#taskfields"},{"name":"columns","description":"<p>Defines the collection of columns displayed in the Gantt chart grid.\nIf the <code>columns</code> declaration is empty, the columns are automatically populated based on the <code>taskSettings</code> values.</p>\n","type":"Column[]|string[]|ColumnModel[]","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#columns"},{"name":"treeColumnIndex","description":"<p>To define expander column index in Grid.</p>\n","type":"number","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#treecolumnindex"},{"name":"height","description":"<p>Defines the height of the Gantt component container.\nThe <code>height</code> property can be set to a specific value (in pixels or percentage) or set to 'auto' for automatic height adjustment based on content.</p>\n","type":"number|string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#height"},{"name":"highlightWeekends","description":"<p>If <code>highlightWeekends</code> is set to true, it highlights all weekend days in the week-day timeline mode.\nThis makes weekends visually distinct in the timeline view.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#highlightweekends"},{"name":"allowRowDragAndDrop","description":"<p>If <code>allowRowDragAndDrop</code> set to true, then it will allow the user to perform row drag and drop action in Gantt chart.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#allowrowdraganddrop"},{"name":"splitterSettings","description":"<p>Configures the splitter settings for the Gantt chart.</p>\n","type":"SplitterSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#splittersettings"},{"name":"labelSettings","description":"<p>Configures the labels displayed on the right, left, and inside the taskbars in the Gantt chart.</p>\n","type":"LabelSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#labelsettings"},{"name":"projectStartDate","description":"<p>Defines the start date of the project. If the <code>projectStartDate</code> is not set, it will be automatically calculated based on the data source.\nThe date can be provided as a <code>Date</code> object or a string in a valid date format.</p>\n","type":"Date|string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#projectstartdate"},{"name":"projectEndDate","description":"<p>Defines the end date of the project. If the <code>projectEndDate</code> is not set, it will be automatically calculated based on the data source.\nThe date can be provided as a <code>Date</code> object or a string in a valid date format.</p>\n","type":"Date|string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#projectenddate"},{"name":"selectionSettings","description":"<p>Configures the settings for selection in the Gantt chart.</p>\n","type":"SelectionSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#selectionsettings"},{"name":"allowSorting","description":"<p>If <code>allowSorting</code> is set to true, it enables sorting of Gantt chart tasks when the column header is clicked.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#allowsorting"},{"name":"allowFiltering","description":"<p>Enables or disables filtering functionality in the Gantt chart.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#allowfiltering"},{"name":"undoRedoActions","description":"<p><code>undoRedoActions</code> Defines action items that retain for undo and redo operation.</p>\n","type":"GanttAction[]","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#undoredoactions"},{"name":"enableContextMenu","description":"<p>If <code>enableContextMenu</code> is set to true, enables the context menu in the Gantt chart.\nThe context menu provides additional actions that can be accessed by right-clicking on Gantt chart elements</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#enablecontextmenu"},{"name":"enableUndoRedo","description":"<p>Enables or disables the undo and redo functionality in the Gantt chart.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#enableundoredo"},{"name":"editSettings","description":"<p>Configures the edit settings for the Gantt chart, such as enabling or disabling task modifications.</p>\n","type":"EditSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#editsettings"},{"name":"toolbar","description":"<p><code>toolbar</code> defines the toolbar items of the Gantt.\nIt contains built-in and custom toolbar items.\nIf an array value is assigned, it is considered as the list of built-in and custom toolbar items in the Gantt's toolbar.\n&lt;br&gt;&lt;br&gt;\nThe available built-in toolbar items are:</p>\n<ul>\n<li>Add: Adds a new record.</li>\n<li>Edit: Edits the selected task.</li>\n<li>Update: Updates the edited task.</li>\n<li>Delete: Deletes the selected task.</li>\n<li>Cancel: Cancels the edit state.</li>\n<li>Search: Searches tasks by the given key.</li>\n<li>ExpandAll: Expands all the task of Gantt.</li>\n<li>CollapseAll: Collapses all the task of Gantt.</li>\n<li>PrevTimeSpan: Extends timeline with one unit before the timeline start date.</li>\n<li>NextTimeSpan: Extends timeline with one unit after the timeline finish date.</li>\n<li>ZoomIn: ZoomIn the Gantt control.</li>\n<li>ZoomOut: ZoomOut the Gantt control.</li>\n<li>ZoomToFit: Display the all tasks within the viewable Gantt chart.</li>\n<li>ExcelExport: To export in Excel format.</li>\n<li>CsvExport : To export in CSV format.</li>\n<li>Indent: To indent a task to one level.</li>\n<li>Outdent: To outdent a task from one level.</li>\n</ul>\n","type":"[]","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#toolbar"},{"name":"allowSelection","description":"<p>If <code>allowSelection</code> is set to true, it enables row selection in the Gantt chart, and the selected rows are highlighted.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#allowselection"},{"name":"timelineSettings","description":"<p>Configures timeline settings of Gantt.\nDefines default timeline modes or customized top tier mode and bottom tier mode or single tier only.</p>\n","type":"TimelineSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#timelinesettings"},{"name":"allowReordering","description":"<p>If <code>allowReordering</code> is set to true, Gantt chart columns can be reordered.\nReordering can be done by drag and drop of a particular column from one index to another index.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#allowreordering"},{"name":"allowResizing","description":"<p>Enables column resizing in the Gantt chart when <code>allowResizing</code> is set to true.\nWhen enabled, users can adjust the width of columns by dragging the column borders.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#allowresizing"}],"gantt/loading-animation":[{"name":"dataSource","description":"<p>Defines the data source for the Gantt chart, which is used to render rows and tasks.\nThe <code>dataSource</code> can be an array of JavaScript objects, an instance of <code>DataManager</code>, or a single object.\nThe array of objects should contain the task data with properties such as <code>TaskID</code>, <code>TaskName</code>, <code>StartDate</code>, <code>EndDate</code>, etc.\nThis allows dynamic binding of tasks and their relationships (e.g., dependencies, subtasks, progress) to the Gantt chart.</p>\n","type":"Object[]|DataManager|Object","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#datasource"},{"name":"taskFields","description":"<p>Defines the mapping properties to extract task-related values, such as ID, start date, end date, duration, and progress, from the data source.\nThis allows the Gantt chart to properly map the provided data to the corresponding task fields and render them accordingly.</p>\n","type":"TaskFieldsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#taskfields"},{"name":"treeColumnIndex","description":"<p>To define expander column index in Grid.</p>\n","type":"number","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#treecolumnindex"},{"name":"height","description":"<p>Defines the height of the Gantt component container.\nThe <code>height</code> property can be set to a specific value (in pixels or percentage) or set to 'auto' for automatic height adjustment based on content.</p>\n","type":"number|string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#height"},{"name":"highlightWeekends","description":"<p>If <code>highlightWeekends</code> is set to true, it highlights all weekend days in the week-day timeline mode.\nThis makes weekends visually distinct in the timeline view.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#highlightweekends"},{"name":"selectionSettings","description":"<p>Configures the settings for selection in the Gantt chart.</p>\n","type":"SelectionSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#selectionsettings"},{"name":"enableVirtualization","description":"<p>If <code>enableVirtualization</code> is set to true, the Gantt chart will render only the rows visible within the viewport.\nand load subsequent rows as the user scrolls vertically. This improves performance when dealing with large datasets.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#enablevirtualization"},{"name":"loadingIndicator","description":"<p>Configures the loading indicator for the Gantt Chart. Specifies the type of indicator to display (spinner or shimmer effect) during waiting periods when actions are performed in the Gantt Chart.</p>\n","type":"LoadingIndicatorModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#loadingindicator"},{"name":"allowFiltering","description":"<p>Enables or disables filtering functionality in the Gantt chart.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#allowfiltering"}],"gantt/local-data":[{"name":"dataSource","description":"<p>Defines the data source for the Gantt chart, which is used to render rows and tasks.\nThe <code>dataSource</code> can be an array of JavaScript objects, an instance of <code>DataManager</code>, or a single object.\nThe array of objects should contain the task data with properties such as <code>TaskID</code>, <code>TaskName</code>, <code>StartDate</code>, <code>EndDate</code>, etc.\nThis allows dynamic binding of tasks and their relationships (e.g., dependencies, subtasks, progress) to the Gantt chart.</p>\n","type":"Object[]|DataManager|Object","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#datasource"},{"name":"height","description":"<p>Defines the height of the Gantt component container.\nThe <code>height</code> property can be set to a specific value (in pixels or percentage) or set to 'auto' for automatic height adjustment based on content.</p>\n","type":"number|string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#height"},{"name":"taskFields","description":"<p>Defines the mapping properties to extract task-related values, such as ID, start date, end date, duration, and progress, from the data source.\nThis allows the Gantt chart to properly map the provided data to the corresponding task fields and render them accordingly.</p>\n","type":"TaskFieldsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#taskfields"},{"name":"columns","description":"<p>Defines the collection of columns displayed in the Gantt chart grid.\nIf the <code>columns</code> declaration is empty, the columns are automatically populated based on the <code>taskSettings</code> values.</p>\n","type":"Column[]|string[]|ColumnModel[]","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#columns"},{"name":"treeColumnIndex","description":"<p>To define expander column index in Grid.</p>\n","type":"number","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#treecolumnindex"},{"name":"allowSelection","description":"<p>If <code>allowSelection</code> is set to true, it enables row selection in the Gantt chart, and the selected rows are highlighted.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#allowselection"},{"name":"highlightWeekends","description":"<p>If <code>highlightWeekends</code> is set to true, it highlights all weekend days in the week-day timeline mode.\nThis makes weekends visually distinct in the timeline view.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#highlightweekends"},{"name":"labelSettings","description":"<p>Configures the labels displayed on the right, left, and inside the taskbars in the Gantt chart.</p>\n","type":"LabelSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#labelsettings"},{"name":"projectStartDate","description":"<p>Defines the start date of the project. If the <code>projectStartDate</code> is not set, it will be automatically calculated based on the data source.\nThe date can be provided as a <code>Date</code> object or a string in a valid date format.</p>\n","type":"Date|string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#projectstartdate"},{"name":"projectEndDate","description":"<p>Defines the end date of the project. If the <code>projectEndDate</code> is not set, it will be automatically calculated based on the data source.\nThe date can be provided as a <code>Date</code> object or a string in a valid date format.</p>\n","type":"Date|string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#projectenddate"},{"name":"splitterSettings","description":"<p>Configures the splitter settings for the Gantt chart.</p>\n","type":"SplitterSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#splittersettings"}],"gantt/load-on-demand":[{"name":"dataSource","description":"<p>Defines the data source for the Gantt chart, which is used to render rows and tasks.\nThe <code>dataSource</code> can be an array of JavaScript objects, an instance of <code>DataManager</code>, or a single object.\nThe array of objects should contain the task data with properties such as <code>TaskID</code>, <code>TaskName</code>, <code>StartDate</code>, <code>EndDate</code>, etc.\nThis allows dynamic binding of tasks and their relationships (e.g., dependencies, subtasks, progress) to the Gantt chart.</p>\n","type":"Object[]|DataManager|Object","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#datasource"},{"name":"height","description":"<p>Defines the height of the Gantt component container.\nThe <code>height</code> property can be set to a specific value (in pixels or percentage) or set to 'auto' for automatic height adjustment based on content.</p>\n","type":"number|string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#height"},{"name":"taskFields","description":"<p>Defines the mapping properties to extract task-related values, such as ID, start date, end date, duration, and progress, from the data source.\nThis allows the Gantt chart to properly map the provided data to the corresponding task fields and render them accordingly.</p>\n","type":"TaskFieldsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#taskfields"},{"name":"columns","description":"<p>Defines the collection of columns displayed in the Gantt chart grid.\nIf the <code>columns</code> declaration is empty, the columns are automatically populated based on the <code>taskSettings</code> values.</p>\n","type":"Column[]|string[]|ColumnModel[]","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#columns"},{"name":"treeColumnIndex","description":"<p>To define expander column index in Grid.</p>\n","type":"number","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#treecolumnindex"},{"name":"allowSelection","description":"<p>If <code>allowSelection</code> is set to true, it enables row selection in the Gantt chart, and the selected rows are highlighted.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#allowselection"},{"name":"highlightWeekends","description":"<p>If <code>highlightWeekends</code> is set to true, it highlights all weekend days in the week-day timeline mode.\nThis makes weekends visually distinct in the timeline view.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#highlightweekends"},{"name":"labelSettings","description":"<p>Configures the labels displayed on the right, left, and inside the taskbars in the Gantt chart.</p>\n","type":"LabelSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#labelsettings"},{"name":"projectStartDate","description":"<p>Defines the start date of the project. If the <code>projectStartDate</code> is not set, it will be automatically calculated based on the data source.\nThe date can be provided as a <code>Date</code> object or a string in a valid date format.</p>\n","type":"Date|string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#projectstartdate"},{"name":"projectEndDate","description":"<p>Defines the end date of the project. If the <code>projectEndDate</code> is not set, it will be automatically calculated based on the data source.\nThe date can be provided as a <code>Date</code> object or a string in a valid date format.</p>\n","type":"Date|string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#projectenddate"},{"name":"splitterSettings","description":"<p>Configures the splitter settings for the Gantt chart.</p>\n","type":"SplitterSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#splittersettings"},{"name":"enableVirtualization","description":"<p>If <code>enableVirtualization</code> is set to true, the Gantt chart will render only the rows visible within the viewport.\nand load subsequent rows as the user scrolls vertically. This improves performance when dealing with large datasets.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#enablevirtualization"},{"name":"loadChildOnDemand","description":"<p>Gets or sets whether to load child records on demand in remote data binding. When <code>loadChildOnDemand</code> set to true, child records are loaded only when expanded, and parent records are rendered in a collapsed state initially.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#loadchildondemand"}],"gantt/remote-data":[{"name":"dataSource","description":"<p>Defines the data source for the Gantt chart, which is used to render rows and tasks.\nThe <code>dataSource</code> can be an array of JavaScript objects, an instance of <code>DataManager</code>, or a single object.\nThe array of objects should contain the task data with properties such as <code>TaskID</code>, <code>TaskName</code>, <code>StartDate</code>, <code>EndDate</code>, etc.\nThis allows dynamic binding of tasks and their relationships (e.g., dependencies, subtasks, progress) to the Gantt chart.</p>\n","type":"Object[]|DataManager|Object","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#datasource"},{"name":"height","description":"<p>Defines the height of the Gantt component container.\nThe <code>height</code> property can be set to a specific value (in pixels or percentage) or set to 'auto' for automatic height adjustment based on content.</p>\n","type":"number|string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#height"},{"name":"taskFields","description":"<p>Defines the mapping properties to extract task-related values, such as ID, start date, end date, duration, and progress, from the data source.\nThis allows the Gantt chart to properly map the provided data to the corresponding task fields and render them accordingly.</p>\n","type":"TaskFieldsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#taskfields"},{"name":"columns","description":"<p>Defines the collection of columns displayed in the Gantt chart grid.\nIf the <code>columns</code> declaration is empty, the columns are automatically populated based on the <code>taskSettings</code> values.</p>\n","type":"Column[]|string[]|ColumnModel[]","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#columns"},{"name":"treeColumnIndex","description":"<p>To define expander column index in Grid.</p>\n","type":"number","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#treecolumnindex"},{"name":"allowSelection","description":"<p>If <code>allowSelection</code> is set to true, it enables row selection in the Gantt chart, and the selected rows are highlighted.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#allowselection"},{"name":"gridLines","description":"<p>Configures the grid lines displayed in the TreeGrid and Gantt chart.\nThe <code>gridLines</code> property allows customization of the type of grid lines to be shown, either horizontal, vertical, or both.</p>\n","type":"GridLine","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#gridlines"},{"name":"highlightWeekends","description":"<p>If <code>highlightWeekends</code> is set to true, it highlights all weekend days in the week-day timeline mode.\nThis makes weekends visually distinct in the timeline view.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#highlightweekends"},{"name":"timelineSettings","description":"<p>Configures timeline settings of Gantt.\nDefines default timeline modes or customized top tier mode and bottom tier mode or single tier only.</p>\n","type":"TimelineSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#timelinesettings"},{"name":"labelSettings","description":"<p>Configures the labels displayed on the right, left, and inside the taskbars in the Gantt chart.</p>\n","type":"LabelSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#labelsettings"},{"name":"includeWeekend","description":"<p>Defines whether weekend days should be considered as working days in the Gantt chart.\nWhen <code>includeWeekend</code> set to true, weekends (Saturday and Sunday) are treated as regular working days.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#includeweekend"},{"name":"projectStartDate","description":"<p>Defines the start date of the project. If the <code>projectStartDate</code> is not set, it will be automatically calculated based on the data source.\nThe date can be provided as a <code>Date</code> object or a string in a valid date format.</p>\n","type":"Date|string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#projectstartdate"},{"name":"projectEndDate","description":"<p>Defines the end date of the project. If the <code>projectEndDate</code> is not set, it will be automatically calculated based on the data source.\nThe date can be provided as a <code>Date</code> object or a string in a valid date format.</p>\n","type":"Date|string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#projectenddate"}],"gantt/self-reference-data":[{"name":"dataSource","description":"<p>Defines the data source for the Gantt chart, which is used to render rows and tasks.\nThe <code>dataSource</code> can be an array of JavaScript objects, an instance of <code>DataManager</code>, or a single object.\nThe array of objects should contain the task data with properties such as <code>TaskID</code>, <code>TaskName</code>, <code>StartDate</code>, <code>EndDate</code>, etc.\nThis allows dynamic binding of tasks and their relationships (e.g., dependencies, subtasks, progress) to the Gantt chart.</p>\n","type":"Object[]|DataManager|Object","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#datasource"},{"name":"height","description":"<p>Defines the height of the Gantt component container.\nThe <code>height</code> property can be set to a specific value (in pixels or percentage) or set to 'auto' for automatic height adjustment based on content.</p>\n","type":"number|string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#height"},{"name":"taskFields","description":"<p>Defines the mapping properties to extract task-related values, such as ID, start date, end date, duration, and progress, from the data source.\nThis allows the Gantt chart to properly map the provided data to the corresponding task fields and render them accordingly.</p>\n","type":"TaskFieldsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#taskfields"},{"name":"columns","description":"<p>Defines the collection of columns displayed in the Gantt chart grid.\nIf the <code>columns</code> declaration is empty, the columns are automatically populated based on the <code>taskSettings</code> values.</p>\n","type":"Column[]|string[]|ColumnModel[]","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#columns"},{"name":"treeColumnIndex","description":"<p>To define expander column index in Grid.</p>\n","type":"number","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#treecolumnindex"},{"name":"allowSelection","description":"<p>If <code>allowSelection</code> is set to true, it enables row selection in the Gantt chart, and the selected rows are highlighted.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#allowselection"},{"name":"highlightWeekends","description":"<p>If <code>highlightWeekends</code> is set to true, it highlights all weekend days in the week-day timeline mode.\nThis makes weekends visually distinct in the timeline view.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#highlightweekends"},{"name":"labelSettings","description":"<p>Configures the labels displayed on the right, left, and inside the taskbars in the Gantt chart.</p>\n","type":"LabelSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#labelsettings"},{"name":"projectStartDate","description":"<p>Defines the start date of the project. If the <code>projectStartDate</code> is not set, it will be automatically calculated based on the data source.\nThe date can be provided as a <code>Date</code> object or a string in a valid date format.</p>\n","type":"Date|string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#projectstartdate"},{"name":"projectEndDate","description":"<p>Defines the end date of the project. If the <code>projectEndDate</code> is not set, it will be automatically calculated based on the data source.\nThe date can be provided as a <code>Date</code> object or a string in a valid date format.</p>\n","type":"Date|string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#projectenddate"},{"name":"splitterSettings","description":"<p>Configures the splitter settings for the Gantt chart.</p>\n","type":"SplitterSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#splittersettings"}],"gantt/taskMode":[{"name":"dataSource","description":"<p>Defines the data source for the Gantt chart, which is used to render rows and tasks.\nThe <code>dataSource</code> can be an array of JavaScript objects, an instance of <code>DataManager</code>, or a single object.\nThe array of objects should contain the task data with properties such as <code>TaskID</code>, <code>TaskName</code>, <code>StartDate</code>, <code>EndDate</code>, etc.\nThis allows dynamic binding of tasks and their relationships (e.g., dependencies, subtasks, progress) to the Gantt chart.</p>\n","type":"Object[]|DataManager|Object","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#datasource"},{"name":"taskFields","description":"<p>Defines the mapping properties to extract task-related values, such as ID, start date, end date, duration, and progress, from the data source.\nThis allows the Gantt chart to properly map the provided data to the corresponding task fields and render them accordingly.</p>\n","type":"TaskFieldsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#taskfields"},{"name":"allowSelection","description":"<p>If <code>allowSelection</code> is set to true, it enables row selection in the Gantt chart, and the selected rows are highlighted.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#allowselection"},{"name":"height","description":"<p>Defines the height of the Gantt component container.\nThe <code>height</code> property can be set to a specific value (in pixels or percentage) or set to 'auto' for automatic height adjustment based on content.</p>\n","type":"number|string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#height"},{"name":"projectStartDate","description":"<p>Defines the start date of the project. If the <code>projectStartDate</code> is not set, it will be automatically calculated based on the data source.\nThe date can be provided as a <code>Date</code> object or a string in a valid date format.</p>\n","type":"Date|string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#projectstartdate"},{"name":"projectEndDate","description":"<p>Defines the end date of the project. If the <code>projectEndDate</code> is not set, it will be automatically calculated based on the data source.\nThe date can be provided as a <code>Date</code> object or a string in a valid date format.</p>\n","type":"Date|string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#projectenddate"},{"name":"allowSorting","description":"<p>If <code>allowSorting</code> is set to true, it enables sorting of Gantt chart tasks when the column header is clicked.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#allowsorting"},{"name":"enableContextMenu","description":"<p>If <code>enableContextMenu</code> is set to true, enables the context menu in the Gantt chart.\nThe context menu provides additional actions that can be accessed by right-clicking on Gantt chart elements</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#enablecontextmenu"},{"name":"toolbar","description":"<p><code>toolbar</code> defines the toolbar items of the Gantt.\nIt contains built-in and custom toolbar items.\nIf an array value is assigned, it is considered as the list of built-in and custom toolbar items in the Gantt's toolbar.\n&lt;br&gt;&lt;br&gt;\nThe available built-in toolbar items are:</p>\n<ul>\n<li>Add: Adds a new record.</li>\n<li>Edit: Edits the selected task.</li>\n<li>Update: Updates the edited task.</li>\n<li>Delete: Deletes the selected task.</li>\n<li>Cancel: Cancels the edit state.</li>\n<li>Search: Searches tasks by the given key.</li>\n<li>ExpandAll: Expands all the task of Gantt.</li>\n<li>CollapseAll: Collapses all the task of Gantt.</li>\n<li>PrevTimeSpan: Extends timeline with one unit before the timeline start date.</li>\n<li>NextTimeSpan: Extends timeline with one unit after the timeline finish date.</li>\n<li>ZoomIn: ZoomIn the Gantt control.</li>\n<li>ZoomOut: ZoomOut the Gantt control.</li>\n<li>ZoomToFit: Display the all tasks within the viewable Gantt chart.</li>\n<li>ExcelExport: To export in Excel format.</li>\n<li>CsvExport : To export in CSV format.</li>\n<li>Indent: To indent a task to one level.</li>\n<li>Outdent: To outdent a task from one level.</li>\n</ul>\n","type":"[]","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#toolbar"},{"name":"columns","description":"<p>Defines the collection of columns displayed in the Gantt chart grid.\nIf the <code>columns</code> declaration is empty, the columns are automatically populated based on the <code>taskSettings</code> values.</p>\n","type":"Column[]|string[]|ColumnModel[]","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#columns"},{"name":"validateManualTasksOnLinking","description":"<p>If <code>validateManualTasksOnLinking</code> is set to true,\nit enables date validation while connecting manually scheduled tasks with predecessor.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#validatemanualtasksonlinking"},{"name":"editSettings","description":"<p>Configures the edit settings for the Gantt chart, such as enabling or disabling task modifications.</p>\n","type":"EditSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#editsettings"},{"name":"labelSettings","description":"<p>Configures the labels displayed on the right, left, and inside the taskbars in the Gantt chart.</p>\n","type":"LabelSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#labelsettings"},{"name":"splitterSettings","description":"<p>Configures the splitter settings for the Gantt chart.</p>\n","type":"SplitterSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#splittersettings"},{"name":"taskMode","description":"<p>Specifies task schedule mode for a project.</p>\n","type":"ScheduleMode","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#taskmode"}],"gantt/work-week":[{"name":"dataSource","description":"<p>Defines the data source for the Gantt chart, which is used to render rows and tasks.\nThe <code>dataSource</code> can be an array of JavaScript objects, an instance of <code>DataManager</code>, or a single object.\nThe array of objects should contain the task data with properties such as <code>TaskID</code>, <code>TaskName</code>, <code>StartDate</code>, <code>EndDate</code>, etc.\nThis allows dynamic binding of tasks and their relationships (e.g., dependencies, subtasks, progress) to the Gantt chart.</p>\n","type":"Object[]|DataManager|Object","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#datasource"},{"name":"taskFields","description":"<p>Defines the mapping properties to extract task-related values, such as ID, start date, end date, duration, and progress, from the data source.\nThis allows the Gantt chart to properly map the provided data to the corresponding task fields and render them accordingly.</p>\n","type":"TaskFieldsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#taskfields"},{"name":"allowSelection","description":"<p>If <code>allowSelection</code> is set to true, it enables row selection in the Gantt chart, and the selected rows are highlighted.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#allowselection"},{"name":"height","description":"<p>Defines the height of the Gantt component container.\nThe <code>height</code> property can be set to a specific value (in pixels or percentage) or set to 'auto' for automatic height adjustment based on content.</p>\n","type":"number|string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#height"},{"name":"workWeek","description":"<p>Defines workweek of project.</p>\n","type":"string[]","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#workweek"},{"name":"projectStartDate","description":"<p>Defines the start date of the project. If the <code>projectStartDate</code> is not set, it will be automatically calculated based on the data source.\nThe date can be provided as a <code>Date</code> object or a string in a valid date format.</p>\n","type":"Date|string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#projectstartdate"},{"name":"projectEndDate","description":"<p>Defines the end date of the project. If the <code>projectEndDate</code> is not set, it will be automatically calculated based on the data source.\nThe date can be provided as a <code>Date</code> object or a string in a valid date format.</p>\n","type":"Date|string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#projectenddate"}],"gantt/working-time-range":[{"name":"dataSource","description":"<p>Defines the data source for the Gantt chart, which is used to render rows and tasks.\nThe <code>dataSource</code> can be an array of JavaScript objects, an instance of <code>DataManager</code>, or a single object.\nThe array of objects should contain the task data with properties such as <code>TaskID</code>, <code>TaskName</code>, <code>StartDate</code>, <code>EndDate</code>, etc.\nThis allows dynamic binding of tasks and their relationships (e.g., dependencies, subtasks, progress) to the Gantt chart.</p>\n","type":"Object[]|DataManager|Object","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#datasource"},{"name":"taskFields","description":"<p>Defines the mapping properties to extract task-related values, such as ID, start date, end date, duration, and progress, from the data source.\nThis allows the Gantt chart to properly map the provided data to the corresponding task fields and render them accordingly.</p>\n","type":"TaskFieldsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#taskfields"},{"name":"allowSelection","description":"<p>If <code>allowSelection</code> is set to true, it enables row selection in the Gantt chart, and the selected rows are highlighted.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#allowselection"},{"name":"height","description":"<p>Defines the height of the Gantt component container.\nThe <code>height</code> property can be set to a specific value (in pixels or percentage) or set to 'auto' for automatic height adjustment based on content.</p>\n","type":"number|string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#height"},{"name":"timelineSettings","description":"<p>Configures timeline settings of Gantt.\nDefines default timeline modes or customized top tier mode and bottom tier mode or single tier only.</p>\n","type":"TimelineSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#timelinesettings"},{"name":"dayWorkingTime","description":"<p>Defines the customized working time for the project.\nThis helps in accurately planning tasks based on available working hours and ensures proper task scheduling.</p>\n","type":"DayWorkingTimeModel[]","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#dayworkingtime"},{"name":"projectStartDate","description":"<p>Defines the start date of the project. If the <code>projectStartDate</code> is not set, it will be automatically calculated based on the data source.\nThe date can be provided as a <code>Date</code> object or a string in a valid date format.</p>\n","type":"Date|string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#projectstartdate"},{"name":"projectEndDate","description":"<p>Defines the end date of the project. If the <code>projectEndDate</code> is not set, it will be automatically calculated based on the data source.\nThe date can be provided as a <code>Date</code> object or a string in a valid date format.</p>\n","type":"Date|string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#projectenddate"},{"name":"durationUnit","description":"<p><code>durationUnit</code> Specifies the duration unit for each task. The available options are:</p>\n<ul>\n<li><code>day</code>: Sets the duration unit to day.</li>\n<li><code>hour</code>: Sets the duration unit to hour.</li>\n<li><code>minute</code>: Sets the duration unit to minute.</li>\n</ul>\n","type":"DurationUnit","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#durationunit"}],"gantt/holidays":[{"name":"dataSource","description":"<p>Defines the data source for the Gantt chart, which is used to render rows and tasks.\nThe <code>dataSource</code> can be an array of JavaScript objects, an instance of <code>DataManager</code>, or a single object.\nThe array of objects should contain the task data with properties such as <code>TaskID</code>, <code>TaskName</code>, <code>StartDate</code>, <code>EndDate</code>, etc.\nThis allows dynamic binding of tasks and their relationships (e.g., dependencies, subtasks, progress) to the Gantt chart.</p>\n","type":"Object[]|DataManager|Object","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#datasource"},{"name":"taskFields","description":"<p>Defines the mapping properties to extract task-related values, such as ID, start date, end date, duration, and progress, from the data source.\nThis allows the Gantt chart to properly map the provided data to the corresponding task fields and render them accordingly.</p>\n","type":"TaskFieldsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#taskfields"},{"name":"allowSelection","description":"<p>If <code>allowSelection</code> is set to true, it enables row selection in the Gantt chart, and the selected rows are highlighted.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#allowselection"},{"name":"height","description":"<p>Defines the height of the Gantt component container.\nThe <code>height</code> property can be set to a specific value (in pixels or percentage) or set to 'auto' for automatic height adjustment based on content.</p>\n","type":"number|string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#height"},{"name":"holidays","description":"<p>Defines holidays within the project timeline, allowing you to mark specific dates as holidays.\nThis helps in accounting for non-working days in scheduling and task planning.</p>\n","type":"HolidayModel[]","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#holidays"},{"name":"projectStartDate","description":"<p>Defines the start date of the project. If the <code>projectStartDate</code> is not set, it will be automatically calculated based on the data source.\nThe date can be provided as a <code>Date</code> object or a string in a valid date format.</p>\n","type":"Date|string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#projectstartdate"},{"name":"projectEndDate","description":"<p>Defines the end date of the project. If the <code>projectEndDate</code> is not set, it will be automatically calculated based on the data source.\nThe date can be provided as a <code>Date</code> object or a string in a valid date format.</p>\n","type":"Date|string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#projectenddate"}],"gantt/unscheduled-task":[{"name":"dataSource","description":"<p>Defines the data source for the Gantt chart, which is used to render rows and tasks.\nThe <code>dataSource</code> can be an array of JavaScript objects, an instance of <code>DataManager</code>, or a single object.\nThe array of objects should contain the task data with properties such as <code>TaskID</code>, <code>TaskName</code>, <code>StartDate</code>, <code>EndDate</code>, etc.\nThis allows dynamic binding of tasks and their relationships (e.g., dependencies, subtasks, progress) to the Gantt chart.</p>\n","type":"Object[]|DataManager|Object","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#datasource"},{"name":"taskFields","description":"<p>Defines the mapping properties to extract task-related values, such as ID, start date, end date, duration, and progress, from the data source.\nThis allows the Gantt chart to properly map the provided data to the corresponding task fields and render them accordingly.</p>\n","type":"TaskFieldsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#taskfields"},{"name":"editSettings","description":"<p>Configures the edit settings for the Gantt chart, such as enabling or disabling task modifications.</p>\n","type":"EditSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#editsettings"},{"name":"toolbar","description":"<p><code>toolbar</code> defines the toolbar items of the Gantt.\nIt contains built-in and custom toolbar items.\nIf an array value is assigned, it is considered as the list of built-in and custom toolbar items in the Gantt's toolbar.\n&lt;br&gt;&lt;br&gt;\nThe available built-in toolbar items are:</p>\n<ul>\n<li>Add: Adds a new record.</li>\n<li>Edit: Edits the selected task.</li>\n<li>Update: Updates the edited task.</li>\n<li>Delete: Deletes the selected task.</li>\n<li>Cancel: Cancels the edit state.</li>\n<li>Search: Searches tasks by the given key.</li>\n<li>ExpandAll: Expands all the task of Gantt.</li>\n<li>CollapseAll: Collapses all the task of Gantt.</li>\n<li>PrevTimeSpan: Extends timeline with one unit before the timeline start date.</li>\n<li>NextTimeSpan: Extends timeline with one unit after the timeline finish date.</li>\n<li>ZoomIn: ZoomIn the Gantt control.</li>\n<li>ZoomOut: ZoomOut the Gantt control.</li>\n<li>ZoomToFit: Display the all tasks within the viewable Gantt chart.</li>\n<li>ExcelExport: To export in Excel format.</li>\n<li>CsvExport : To export in CSV format.</li>\n<li>Indent: To indent a task to one level.</li>\n<li>Outdent: To outdent a task from one level.</li>\n</ul>\n","type":"[]","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#toolbar"},{"name":"height","description":"<p>Defines the height of the Gantt component container.\nThe <code>height</code> property can be set to a specific value (in pixels or percentage) or set to 'auto' for automatic height adjustment based on content.</p>\n","type":"number|string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#height"},{"name":"labelSettings","description":"<p>Configures the labels displayed on the right, left, and inside the taskbars in the Gantt chart.</p>\n","type":"LabelSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#labelsettings"},{"name":"allowUnscheduledTasks","description":"<p>Enables or disables the rendering of unscheduled tasks in the Gantt chart.\nWhen <code>allowUnscheduledTasks</code> set to true, unscheduled tasks will be displayed in the chart.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#allowunscheduledtasks"},{"name":"timelineSettings","description":"<p>Configures timeline settings of Gantt.\nDefines default timeline modes or customized top tier mode and bottom tier mode or single tier only.</p>\n","type":"TimelineSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#timelinesettings"},{"name":"projectStartDate","description":"<p>Defines the start date of the project. If the <code>projectStartDate</code> is not set, it will be automatically calculated based on the data source.\nThe date can be provided as a <code>Date</code> object or a string in a valid date format.</p>\n","type":"Date|string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#projectstartdate"},{"name":"projectEndDate","description":"<p>Defines the end date of the project. If the <code>projectEndDate</code> is not set, it will be automatically calculated based on the data source.\nThe date can be provided as a <code>Date</code> object or a string in a valid date format.</p>\n","type":"Date|string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#projectenddate"},{"name":"toolbarClick","description":"<p>Triggers when toolbar item was clicked.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#toolbarclick"},{"name":"splitterSettings","description":"<p>Configures the splitter settings for the Gantt chart.</p>\n","type":"SplitterSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#splittersettings"},{"name":"columns","description":"<p>Defines the collection of columns displayed in the Gantt chart grid.\nIf the <code>columns</code> declaration is empty, the columns are automatically populated based on the <code>taskSettings</code> values.</p>\n","type":"Column[]|string[]|ColumnModel[]","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#columns"}],"gantt/timezone":[{"name":"dataSource","description":"<p>Defines the data source for the Gantt chart, which is used to render rows and tasks.\nThe <code>dataSource</code> can be an array of JavaScript objects, an instance of <code>DataManager</code>, or a single object.\nThe array of objects should contain the task data with properties such as <code>TaskID</code>, <code>TaskName</code>, <code>StartDate</code>, <code>EndDate</code>, etc.\nThis allows dynamic binding of tasks and their relationships (e.g., dependencies, subtasks, progress) to the Gantt chart.</p>\n","type":"Object[]|DataManager|Object","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#datasource"},{"name":"taskFields","description":"<p>Defines the mapping properties to extract task-related values, such as ID, start date, end date, duration, and progress, from the data source.\nThis allows the Gantt chart to properly map the provided data to the corresponding task fields and render them accordingly.</p>\n","type":"TaskFieldsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#taskfields"},{"name":"height","description":"<p>Defines the height of the Gantt component container.\nThe <code>height</code> property can be set to a specific value (in pixels or percentage) or set to 'auto' for automatic height adjustment based on content.</p>\n","type":"number|string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#height"},{"name":"timelineSettings","description":"<p>Configures timeline settings of Gantt.\nDefines default timeline modes or customized top tier mode and bottom tier mode or single tier only.</p>\n","type":"TimelineSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#timelinesettings"},{"name":"timezone","description":"<p>By default, task schedule dates are calculated with system time zone. If the Gantt chart is assigned with a specific time zone,\nthen schedule dates are calculated based on the given time zone date value.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#timezone"},{"name":"durationUnit","description":"<p><code>durationUnit</code> Specifies the duration unit for each task. The available options are:</p>\n<ul>\n<li><code>day</code>: Sets the duration unit to day.</li>\n<li><code>hour</code>: Sets the duration unit to hour.</li>\n<li><code>minute</code>: Sets the duration unit to minute.</li>\n</ul>\n","type":"DurationUnit","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#durationunit"},{"name":"dateFormat","description":"<p>Specifies the date format for displaying dates in the Gantt chart, including in tooltips and grid cells.\nBy default, the format is determined based on the current culture/locale settings.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#dateformat"},{"name":"dayWorkingTime","description":"<p>Defines the customized working time for the project.\nThis helps in accurately planning tasks based on available working hours and ensures proper task scheduling.</p>\n","type":"DayWorkingTimeModel[]","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#dayworkingtime"},{"name":"includeWeekend","description":"<p>Defines whether weekend days should be considered as working days in the Gantt chart.\nWhen <code>includeWeekend</code> set to true, weekends (Saturday and Sunday) are treated as regular working days.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#includeweekend"}],"gantt/critical-path":[{"name":"dataSource","description":"<p>Defines the data source for the Gantt chart, which is used to render rows and tasks.\nThe <code>dataSource</code> can be an array of JavaScript objects, an instance of <code>DataManager</code>, or a single object.\nThe array of objects should contain the task data with properties such as <code>TaskID</code>, <code>TaskName</code>, <code>StartDate</code>, <code>EndDate</code>, etc.\nThis allows dynamic binding of tasks and their relationships (e.g., dependencies, subtasks, progress) to the Gantt chart.</p>\n","type":"Object[]|DataManager|Object","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#datasource"},{"name":"taskFields","description":"<p>Defines the mapping properties to extract task-related values, such as ID, start date, end date, duration, and progress, from the data source.\nThis allows the Gantt chart to properly map the provided data to the corresponding task fields and render them accordingly.</p>\n","type":"TaskFieldsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#taskfields"},{"name":"height","description":"<p>Defines the height of the Gantt component container.\nThe <code>height</code> property can be set to a specific value (in pixels or percentage) or set to 'auto' for automatic height adjustment based on content.</p>\n","type":"number|string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#height"},{"name":"editSettings","description":"<p>Configures the edit settings for the Gantt chart, such as enabling or disabling task modifications.</p>\n","type":"EditSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#editsettings"},{"name":"highlightWeekends","description":"<p>If <code>highlightWeekends</code> is set to true, it highlights all weekend days in the week-day timeline mode.\nThis makes weekends visually distinct in the timeline view.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#highlightweekends"},{"name":"eventMarkers","description":"<p>Defines the events and milestones along the project timeline.\nThese event markers indicate significant events or milestones throughout the project's duration.</p>\n","type":"EventMarkerModel[]","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#eventmarkers"},{"name":"enableCriticalPath","description":"<p>Enables the highlighting of critical tasks in the Gantt Chart that directly affect the project's end date.\nWhen enabled, tasks that are critical to the project timeline will be visually distinguished by colours.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#enablecriticalpath"},{"name":"labelSettings","description":"<p>Configures the labels displayed on the right, left, and inside the taskbars in the Gantt chart.</p>\n","type":"LabelSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#labelsettings"},{"name":"projectStartDate","description":"<p>Defines the start date of the project. If the <code>projectStartDate</code> is not set, it will be automatically calculated based on the data source.\nThe date can be provided as a <code>Date</code> object or a string in a valid date format.</p>\n","type":"Date|string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#projectstartdate"},{"name":"projectEndDate","description":"<p>Defines the end date of the project. If the <code>projectEndDate</code> is not set, it will be automatically calculated based on the data source.\nThe date can be provided as a <code>Date</code> object or a string in a valid date format.</p>\n","type":"Date|string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#projectenddate"}],"gantt/baseline":[{"name":"dataSource","description":"<p>Defines the data source for the Gantt chart, which is used to render rows and tasks.\nThe <code>dataSource</code> can be an array of JavaScript objects, an instance of <code>DataManager</code>, or a single object.\nThe array of objects should contain the task data with properties such as <code>TaskID</code>, <code>TaskName</code>, <code>StartDate</code>, <code>EndDate</code>, etc.\nThis allows dynamic binding of tasks and their relationships (e.g., dependencies, subtasks, progress) to the Gantt chart.</p>\n","type":"Object[]|DataManager|Object","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#datasource"},{"name":"renderBaseline","description":"<p>If <code>renderBaseline</code> is set to <code>true</code>, baselines will be rendered for tasks in the Gantt chart.\nBaselines provide a visual reference to track the planned vs. actual progress of tasks.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#renderbaseline"},{"name":"taskFields","description":"<p>Defines the mapping properties to extract task-related values, such as ID, start date, end date, duration, and progress, from the data source.\nThis allows the Gantt chart to properly map the provided data to the corresponding task fields and render them accordingly.</p>\n","type":"TaskFieldsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#taskfields"},{"name":"columns","description":"<p>Defines the collection of columns displayed in the Gantt chart grid.\nIf the <code>columns</code> declaration is empty, the columns are automatically populated based on the <code>taskSettings</code> values.</p>\n","type":"Column[]|string[]|ColumnModel[]","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#columns"},{"name":"treeColumnIndex","description":"<p>To define expander column index in Grid.</p>\n","type":"number","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#treecolumnindex"},{"name":"allowSelection","description":"<p>If <code>allowSelection</code> is set to true, it enables row selection in the Gantt chart, and the selected rows are highlighted.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#allowselection"},{"name":"includeWeekend","description":"<p>Defines whether weekend days should be considered as working days in the Gantt chart.\nWhen <code>includeWeekend</code> set to true, weekends (Saturday and Sunday) are treated as regular working days.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#includeweekend"},{"name":"timelineSettings","description":"<p>Configures timeline settings of Gantt.\nDefines default timeline modes or customized top tier mode and bottom tier mode or single tier only.</p>\n","type":"TimelineSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#timelinesettings"},{"name":"tooltipSettings","description":"<p>Enables or disables default tooltip of Gantt element and defines customized tooltip for Gantt elements.</p>\n","type":"TooltipSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#tooltipsettings"},{"name":"durationUnit","description":"<p><code>durationUnit</code> Specifies the duration unit for each task. The available options are:</p>\n<ul>\n<li><code>day</code>: Sets the duration unit to day.</li>\n<li><code>hour</code>: Sets the duration unit to hour.</li>\n<li><code>minute</code>: Sets the duration unit to minute.</li>\n</ul>\n","type":"DurationUnit","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#durationunit"},{"name":"dateFormat","description":"<p>Specifies the date format for displaying dates in the Gantt chart, including in tooltips and grid cells.\nBy default, the format is determined based on the current culture/locale settings.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#dateformat"},{"name":"dayWorkingTime","description":"<p>Defines the customized working time for the project.\nThis helps in accurately planning tasks based on available working hours and ensures proper task scheduling.</p>\n","type":"DayWorkingTimeModel[]","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#dayworkingtime"},{"name":"height","description":"<p>Defines the height of the Gantt component container.\nThe <code>height</code> property can be set to a specific value (in pixels or percentage) or set to 'auto' for automatic height adjustment based on content.</p>\n","type":"number|string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#height"},{"name":"projectStartDate","description":"<p>Defines the start date of the project. If the <code>projectStartDate</code> is not set, it will be automatically calculated based on the data source.\nThe date can be provided as a <code>Date</code> object or a string in a valid date format.</p>\n","type":"Date|string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#projectstartdate"},{"name":"projectEndDate","description":"<p>Defines the end date of the project. If the <code>projectEndDate</code> is not set, it will be automatically calculated based on the data source.\nThe date can be provided as a <code>Date</code> object or a string in a valid date format.</p>\n","type":"Date|string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#projectenddate"}],"gantt/event-markers":[{"name":"dataSource","description":"<p>Defines the data source for the Gantt chart, which is used to render rows and tasks.\nThe <code>dataSource</code> can be an array of JavaScript objects, an instance of <code>DataManager</code>, or a single object.\nThe array of objects should contain the task data with properties such as <code>TaskID</code>, <code>TaskName</code>, <code>StartDate</code>, <code>EndDate</code>, etc.\nThis allows dynamic binding of tasks and their relationships (e.g., dependencies, subtasks, progress) to the Gantt chart.</p>\n","type":"Object[]|DataManager|Object","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#datasource"},{"name":"taskFields","description":"<p>Defines the mapping properties to extract task-related values, such as ID, start date, end date, duration, and progress, from the data source.\nThis allows the Gantt chart to properly map the provided data to the corresponding task fields and render them accordingly.</p>\n","type":"TaskFieldsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#taskfields"},{"name":"allowSelection","description":"<p>If <code>allowSelection</code> is set to true, it enables row selection in the Gantt chart, and the selected rows are highlighted.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#allowselection"},{"name":"height","description":"<p>Defines the height of the Gantt component container.\nThe <code>height</code> property can be set to a specific value (in pixels or percentage) or set to 'auto' for automatic height adjustment based on content.</p>\n","type":"number|string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#height"},{"name":"eventMarkers","description":"<p>Defines the events and milestones along the project timeline.\nThese event markers indicate significant events or milestones throughout the project's duration.</p>\n","type":"EventMarkerModel[]","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#eventmarkers"},{"name":"projectStartDate","description":"<p>Defines the start date of the project. If the <code>projectStartDate</code> is not set, it will be automatically calculated based on the data source.\nThe date can be provided as a <code>Date</code> object or a string in a valid date format.</p>\n","type":"Date|string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#projectstartdate"},{"name":"projectEndDate","description":"<p>Defines the end date of the project. If the <code>projectEndDate</code> is not set, it will be automatically calculated based on the data source.\nThe date can be provided as a <code>Date</code> object or a string in a valid date format.</p>\n","type":"Date|string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#projectenddate"},{"name":"labelSettings","description":"<p>Configures the labels displayed on the right, left, and inside the taskbars in the Gantt chart.</p>\n","type":"LabelSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#labelsettings"}],"gantt/indicators":[{"name":"dataSource","description":"<p>Defines the data source for the Gantt chart, which is used to render rows and tasks.\nThe <code>dataSource</code> can be an array of JavaScript objects, an instance of <code>DataManager</code>, or a single object.\nThe array of objects should contain the task data with properties such as <code>TaskID</code>, <code>TaskName</code>, <code>StartDate</code>, <code>EndDate</code>, etc.\nThis allows dynamic binding of tasks and their relationships (e.g., dependencies, subtasks, progress) to the Gantt chart.</p>\n","type":"Object[]|DataManager|Object","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#datasource"},{"name":"taskFields","description":"<p>Defines the mapping properties to extract task-related values, such as ID, start date, end date, duration, and progress, from the data source.\nThis allows the Gantt chart to properly map the provided data to the corresponding task fields and render them accordingly.</p>\n","type":"TaskFieldsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#taskfields"},{"name":"allowSelection","description":"<p>If <code>allowSelection</code> is set to true, it enables row selection in the Gantt chart, and the selected rows are highlighted.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#allowselection"},{"name":"height","description":"<p>Defines the height of the Gantt component container.\nThe <code>height</code> property can be set to a specific value (in pixels or percentage) or set to 'auto' for automatic height adjustment based on content.</p>\n","type":"number|string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#height"},{"name":"projectStartDate","description":"<p>Defines the start date of the project. If the <code>projectStartDate</code> is not set, it will be automatically calculated based on the data source.\nThe date can be provided as a <code>Date</code> object or a string in a valid date format.</p>\n","type":"Date|string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#projectstartdate"},{"name":"projectEndDate","description":"<p>Defines the end date of the project. If the <code>projectEndDate</code> is not set, it will be automatically calculated based on the data source.\nThe date can be provided as a <code>Date</code> object or a string in a valid date format.</p>\n","type":"Date|string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#projectenddate"},{"name":"highlightWeekends","description":"<p>If <code>highlightWeekends</code> is set to true, it highlights all weekend days in the week-day timeline mode.\nThis makes weekends visually distinct in the timeline view.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#highlightweekends"},{"name":"labelSettings","description":"<p>Configures the labels displayed on the right, left, and inside the taskbars in the Gantt chart.</p>\n","type":"LabelSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#labelsettings"}],"gantt/timeline":[{"name":"dataSource","description":"<p>Defines the data source for the Gantt chart, which is used to render rows and tasks.\nThe <code>dataSource</code> can be an array of JavaScript objects, an instance of <code>DataManager</code>, or a single object.\nThe array of objects should contain the task data with properties such as <code>TaskID</code>, <code>TaskName</code>, <code>StartDate</code>, <code>EndDate</code>, etc.\nThis allows dynamic binding of tasks and their relationships (e.g., dependencies, subtasks, progress) to the Gantt chart.</p>\n","type":"Object[]|DataManager|Object","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#datasource"},{"name":"taskFields","description":"<p>Defines the mapping properties to extract task-related values, such as ID, start date, end date, duration, and progress, from the data source.\nThis allows the Gantt chart to properly map the provided data to the corresponding task fields and render them accordingly.</p>\n","type":"TaskFieldsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#taskfields"},{"name":"treeColumnIndex","description":"<p>To define expander column index in Grid.</p>\n","type":"number","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#treecolumnindex"},{"name":"height","description":"<p>Defines the height of the Gantt component container.\nThe <code>height</code> property can be set to a specific value (in pixels or percentage) or set to 'auto' for automatic height adjustment based on content.</p>\n","type":"number|string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#height"},{"name":"projectStartDate","description":"<p>Defines the start date of the project. If the <code>projectStartDate</code> is not set, it will be automatically calculated based on the data source.\nThe date can be provided as a <code>Date</code> object or a string in a valid date format.</p>\n","type":"Date|string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#projectstartdate"},{"name":"projectEndDate","description":"<p>Defines the end date of the project. If the <code>projectEndDate</code> is not set, it will be automatically calculated based on the data source.\nThe date can be provided as a <code>Date</code> object or a string in a valid date format.</p>\n","type":"Date|string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#projectenddate"},{"name":"highlightWeekends","description":"<p>If <code>highlightWeekends</code> is set to true, it highlights all weekend days in the week-day timeline mode.\nThis makes weekends visually distinct in the timeline view.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#highlightweekends"},{"name":"resourceFields","description":"<p>Defines the mapping properties to extract resource values, such as <code>id</code>, <code>name</code>, <code>unit</code>, and <code>group</code> from the resource collection in the Gantt chart.\nThis helps to map data from a custom resource collection to the appropriate fields for resource allocation.</p>\n","type":"ResourceFieldsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#resourcefields"},{"name":"resources","description":"<p>Defines the collection of resources assigned to the project.</p>\n","type":"object[]","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#resources"},{"name":"timelineSettings","description":"<p>Configures timeline settings of Gantt.\nDefines default timeline modes or customized top tier mode and bottom tier mode or single tier only.</p>\n","type":"TimelineSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#timelinesettings"},{"name":"splitterSettings","description":"<p>Configures the splitter settings for the Gantt chart.</p>\n","type":"SplitterSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#splittersettings"},{"name":"treeColumnIndex","description":"<p>To define expander column index in Grid.</p>\n","type":"number","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#treecolumnindex"},{"name":"labelSettings","description":"<p>Configures the labels displayed on the right, left, and inside the taskbars in the Gantt chart.</p>\n","type":"LabelSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#labelsettings"},{"name":"eventMarkers","description":"<p>Defines the events and milestones along the project timeline.\nThese event markers indicate significant events or milestones throughout the project's duration.</p>\n","type":"EventMarkerModel[]","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#eventmarkers"}],"gantt/zooming":[{"name":"dataSource","description":"<p>Defines the data source for the Gantt chart, which is used to render rows and tasks.\nThe <code>dataSource</code> can be an array of JavaScript objects, an instance of <code>DataManager</code>, or a single object.\nThe array of objects should contain the task data with properties such as <code>TaskID</code>, <code>TaskName</code>, <code>StartDate</code>, <code>EndDate</code>, etc.\nThis allows dynamic binding of tasks and their relationships (e.g., dependencies, subtasks, progress) to the Gantt chart.</p>\n","type":"Object[]|DataManager|Object","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#datasource"},{"name":"taskFields","description":"<p>Defines the mapping properties to extract task-related values, such as ID, start date, end date, duration, and progress, from the data source.\nThis allows the Gantt chart to properly map the provided data to the corresponding task fields and render them accordingly.</p>\n","type":"TaskFieldsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#taskfields"},{"name":"toolbar","description":"<p><code>toolbar</code> defines the toolbar items of the Gantt.\nIt contains built-in and custom toolbar items.\nIf an array value is assigned, it is considered as the list of built-in and custom toolbar items in the Gantt's toolbar.\n&lt;br&gt;&lt;br&gt;\nThe available built-in toolbar items are:</p>\n<ul>\n<li>Add: Adds a new record.</li>\n<li>Edit: Edits the selected task.</li>\n<li>Update: Updates the edited task.</li>\n<li>Delete: Deletes the selected task.</li>\n<li>Cancel: Cancels the edit state.</li>\n<li>Search: Searches tasks by the given key.</li>\n<li>ExpandAll: Expands all the task of Gantt.</li>\n<li>CollapseAll: Collapses all the task of Gantt.</li>\n<li>PrevTimeSpan: Extends timeline with one unit before the timeline start date.</li>\n<li>NextTimeSpan: Extends timeline with one unit after the timeline finish date.</li>\n<li>ZoomIn: ZoomIn the Gantt control.</li>\n<li>ZoomOut: ZoomOut the Gantt control.</li>\n<li>ZoomToFit: Display the all tasks within the viewable Gantt chart.</li>\n<li>ExcelExport: To export in Excel format.</li>\n<li>CsvExport : To export in CSV format.</li>\n<li>Indent: To indent a task to one level.</li>\n<li>Outdent: To outdent a task from one level.</li>\n</ul>\n","type":"[]","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#toolbar"},{"name":"height","description":"<p>Defines the height of the Gantt component container.\nThe <code>height</code> property can be set to a specific value (in pixels or percentage) or set to 'auto' for automatic height adjustment based on content.</p>\n","type":"number|string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#height"},{"name":"labelSettings","description":"<p>Configures the labels displayed on the right, left, and inside the taskbars in the Gantt chart.</p>\n","type":"LabelSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#labelsettings"},{"name":"projectStartDate","description":"<p>Defines the start date of the project. If the <code>projectStartDate</code> is not set, it will be automatically calculated based on the data source.\nThe date can be provided as a <code>Date</code> object or a string in a valid date format.</p>\n","type":"Date|string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#projectstartdate"},{"name":"projectEndDate","description":"<p>Defines the end date of the project. If the <code>projectEndDate</code> is not set, it will be automatically calculated based on the data source.\nThe date can be provided as a <code>Date</code> object or a string in a valid date format.</p>\n","type":"Date|string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#projectenddate"},{"name":"columns","description":"<p>Defines the collection of columns displayed in the Gantt chart grid.\nIf the <code>columns</code> declaration is empty, the columns are automatically populated based on the <code>taskSettings</code> values.</p>\n","type":"Column[]|string[]|ColumnModel[]","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#columns"},{"name":"splitterSettings","description":"<p>Configures the splitter settings for the Gantt chart.</p>\n","type":"SplitterSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#splittersettings"},{"name":"treeColumnIndex","description":"<p>To define expander column index in Grid.</p>\n","type":"number","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#treecolumnindex"}],"gantt/column-template":[{"name":"dataSource","description":"<p>Defines the data source for the Gantt chart, which is used to render rows and tasks.\nThe <code>dataSource</code> can be an array of JavaScript objects, an instance of <code>DataManager</code>, or a single object.\nThe array of objects should contain the task data with properties such as <code>TaskID</code>, <code>TaskName</code>, <code>StartDate</code>, <code>EndDate</code>, etc.\nThis allows dynamic binding of tasks and their relationships (e.g., dependencies, subtasks, progress) to the Gantt chart.</p>\n","type":"Object[]|DataManager|Object","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#datasource"},{"name":"height","description":"<p>Defines the height of the Gantt component container.\nThe <code>height</code> property can be set to a specific value (in pixels or percentage) or set to 'auto' for automatic height adjustment based on content.</p>\n","type":"number|string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#height"},{"name":"taskFields","description":"<p>Defines the mapping properties to extract task-related values, such as ID, start date, end date, duration, and progress, from the data source.\nThis allows the Gantt chart to properly map the provided data to the corresponding task fields and render them accordingly.</p>\n","type":"TaskFieldsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#taskfields"},{"name":"treeColumnIndex","description":"<p>To define expander column index in Grid.</p>\n","type":"number","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#treecolumnindex"},{"name":"allowSelection","description":"<p>If <code>allowSelection</code> is set to true, it enables row selection in the Gantt chart, and the selected rows are highlighted.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#allowselection"},{"name":"resourceFields","description":"<p>Defines the mapping properties to extract resource values, such as <code>id</code>, <code>name</code>, <code>unit</code>, and <code>group</code> from the resource collection in the Gantt chart.\nThis helps to map data from a custom resource collection to the appropriate fields for resource allocation.</p>\n","type":"ResourceFieldsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#resourcefields"},{"name":"showColumnMenu","description":"<p>If <code>showColumnMenu</code> set to true, enables the column menu options for each column in the Gantt chart.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#showcolumnmenu"},{"name":"columns","description":"<p>Defines the collection of columns displayed in the Gantt chart grid.\nIf the <code>columns</code> declaration is empty, the columns are automatically populated based on the <code>taskSettings</code> values.</p>\n","type":"Column[]|string[]|ColumnModel[]","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#columns"},{"name":"highlightWeekends","description":"<p>If <code>highlightWeekends</code> is set to true, it highlights all weekend days in the week-day timeline mode.\nThis makes weekends visually distinct in the timeline view.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#highlightweekends"},{"name":"timelineSettings","description":"<p>Configures timeline settings of Gantt.\nDefines default timeline modes or customized top tier mode and bottom tier mode or single tier only.</p>\n","type":"TimelineSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#timelinesettings"},{"name":"labelSettings","description":"<p>Configures the labels displayed on the right, left, and inside the taskbars in the Gantt chart.</p>\n","type":"LabelSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#labelsettings"},{"name":"projectStartDate","description":"<p>Defines the start date of the project. If the <code>projectStartDate</code> is not set, it will be automatically calculated based on the data source.\nThe date can be provided as a <code>Date</code> object or a string in a valid date format.</p>\n","type":"Date|string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#projectstartdate"},{"name":"projectEndDate","description":"<p>Defines the end date of the project. If the <code>projectEndDate</code> is not set, it will be automatically calculated based on the data source.\nThe date can be provided as a <code>Date</code> object or a string in a valid date format.</p>\n","type":"Date|string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#projectenddate"}],"gantt/header-template":[{"name":"dataSource","description":"<p>Defines the data source for the Gantt chart, which is used to render rows and tasks.\nThe <code>dataSource</code> can be an array of JavaScript objects, an instance of <code>DataManager</code>, or a single object.\nThe array of objects should contain the task data with properties such as <code>TaskID</code>, <code>TaskName</code>, <code>StartDate</code>, <code>EndDate</code>, etc.\nThis allows dynamic binding of tasks and their relationships (e.g., dependencies, subtasks, progress) to the Gantt chart.</p>\n","type":"Object[]|DataManager|Object","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#datasource"},{"name":"height","description":"<p>Defines the height of the Gantt component container.\nThe <code>height</code> property can be set to a specific value (in pixels or percentage) or set to 'auto' for automatic height adjustment based on content.</p>\n","type":"number|string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#height"},{"name":"taskFields","description":"<p>Defines the mapping properties to extract task-related values, such as ID, start date, end date, duration, and progress, from the data source.\nThis allows the Gantt chart to properly map the provided data to the corresponding task fields and render them accordingly.</p>\n","type":"TaskFieldsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#taskfields"},{"name":"treeColumnIndex","description":"<p>To define expander column index in Grid.</p>\n","type":"number","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#treecolumnindex"},{"name":"allowSelection","description":"<p>If <code>allowSelection</code> is set to true, it enables row selection in the Gantt chart, and the selected rows are highlighted.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#allowselection"},{"name":"allowFiltering","description":"<p>Enables or disables filtering functionality in the Gantt chart.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#allowfiltering"},{"name":"allowSorting","description":"<p>If <code>allowSorting</code> is set to true, it enables sorting of Gantt chart tasks when the column header is clicked.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#allowsorting"},{"name":"showColumnMenu","description":"<p>If <code>showColumnMenu</code> set to true, enables the column menu options for each column in the Gantt chart.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#showcolumnmenu"},{"name":"columns","description":"<p>Defines the collection of columns displayed in the Gantt chart grid.\nIf the <code>columns</code> declaration is empty, the columns are automatically populated based on the <code>taskSettings</code> values.</p>\n","type":"Column[]|string[]|ColumnModel[]","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#columns"},{"name":"highlightWeekends","description":"<p>If <code>highlightWeekends</code> is set to true, it highlights all weekend days in the week-day timeline mode.\nThis makes weekends visually distinct in the timeline view.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#highlightweekends"},{"name":"timelineSettings","description":"<p>Configures timeline settings of Gantt.\nDefines default timeline modes or customized top tier mode and bottom tier mode or single tier only.</p>\n","type":"TimelineSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#timelinesettings"},{"name":"labelSettings","description":"<p>Configures the labels displayed on the right, left, and inside the taskbars in the Gantt chart.</p>\n","type":"LabelSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#labelsettings"},{"name":"projectStartDate","description":"<p>Defines the start date of the project. If the <code>projectStartDate</code> is not set, it will be automatically calculated based on the data source.\nThe date can be provided as a <code>Date</code> object or a string in a valid date format.</p>\n","type":"Date|string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#projectstartdate"},{"name":"projectEndDate","description":"<p>Defines the end date of the project. If the <code>projectEndDate</code> is not set, it will be automatically calculated based on the data source.\nThe date can be provided as a <code>Date</code> object or a string in a valid date format.</p>\n","type":"Date|string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#projectenddate"}],"gantt/reorder":[{"name":"dataSource","description":"<p>Defines the data source for the Gantt chart, which is used to render rows and tasks.\nThe <code>dataSource</code> can be an array of JavaScript objects, an instance of <code>DataManager</code>, or a single object.\nThe array of objects should contain the task data with properties such as <code>TaskID</code>, <code>TaskName</code>, <code>StartDate</code>, <code>EndDate</code>, etc.\nThis allows dynamic binding of tasks and their relationships (e.g., dependencies, subtasks, progress) to the Gantt chart.</p>\n","type":"Object[]|DataManager|Object","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#datasource"},{"name":"height","description":"<p>Defines the height of the Gantt component container.\nThe <code>height</code> property can be set to a specific value (in pixels or percentage) or set to 'auto' for automatic height adjustment based on content.</p>\n","type":"number|string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#height"},{"name":"taskFields","description":"<p>Defines the mapping properties to extract task-related values, such as ID, start date, end date, duration, and progress, from the data source.\nThis allows the Gantt chart to properly map the provided data to the corresponding task fields and render them accordingly.</p>\n","type":"TaskFieldsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#taskfields"},{"name":"treeColumnIndex","description":"<p>To define expander column index in Grid.</p>\n","type":"number","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#treecolumnindex"},{"name":"allowSelection","description":"<p>If <code>allowSelection</code> is set to true, it enables row selection in the Gantt chart, and the selected rows are highlighted.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#allowselection"},{"name":"allowFiltering","description":"<p>Enables or disables filtering functionality in the Gantt chart.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#allowfiltering"},{"name":"allowSorting","description":"<p>If <code>allowSorting</code> is set to true, it enables sorting of Gantt chart tasks when the column header is clicked.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#allowsorting"},{"name":"showColumnMenu","description":"<p>If <code>showColumnMenu</code> set to true, enables the column menu options for each column in the Gantt chart.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#showcolumnmenu"},{"name":"columns","description":"<p>Defines the collection of columns displayed in the Gantt chart grid.\nIf the <code>columns</code> declaration is empty, the columns are automatically populated based on the <code>taskSettings</code> values.</p>\n","type":"Column[]|string[]|ColumnModel[]","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#columns"},{"name":"highlightWeekends","description":"<p>If <code>highlightWeekends</code> is set to true, it highlights all weekend days in the week-day timeline mode.\nThis makes weekends visually distinct in the timeline view.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#highlightweekends"},{"name":"timelineSettings","description":"<p>Configures timeline settings of Gantt.\nDefines default timeline modes or customized top tier mode and bottom tier mode or single tier only.</p>\n","type":"TimelineSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#timelinesettings"},{"name":"labelSettings","description":"<p>Configures the labels displayed on the right, left, and inside the taskbars in the Gantt chart.</p>\n","type":"LabelSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#labelsettings"},{"name":"projectStartDate","description":"<p>Defines the start date of the project. If the <code>projectStartDate</code> is not set, it will be automatically calculated based on the data source.\nThe date can be provided as a <code>Date</code> object or a string in a valid date format.</p>\n","type":"Date|string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#projectstartdate"},{"name":"projectEndDate","description":"<p>Defines the end date of the project. If the <code>projectEndDate</code> is not set, it will be automatically calculated based on the data source.\nThe date can be provided as a <code>Date</code> object or a string in a valid date format.</p>\n","type":"Date|string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#projectenddate"}],"gantt/resizing":[{"name":"dataSource","description":"<p>Defines the data source for the Gantt chart, which is used to render rows and tasks.\nThe <code>dataSource</code> can be an array of JavaScript objects, an instance of <code>DataManager</code>, or a single object.\nThe array of objects should contain the task data with properties such as <code>TaskID</code>, <code>TaskName</code>, <code>StartDate</code>, <code>EndDate</code>, etc.\nThis allows dynamic binding of tasks and their relationships (e.g., dependencies, subtasks, progress) to the Gantt chart.</p>\n","type":"Object[]|DataManager|Object","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#datasource"},{"name":"height","description":"<p>Defines the height of the Gantt component container.\nThe <code>height</code> property can be set to a specific value (in pixels or percentage) or set to 'auto' for automatic height adjustment based on content.</p>\n","type":"number|string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#height"},{"name":"taskFields","description":"<p>Defines the mapping properties to extract task-related values, such as ID, start date, end date, duration, and progress, from the data source.\nThis allows the Gantt chart to properly map the provided data to the corresponding task fields and render them accordingly.</p>\n","type":"TaskFieldsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#taskfields"},{"name":"treeColumnIndex","description":"<p>To define expander column index in Grid.</p>\n","type":"number","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#treecolumnindex"},{"name":"allowSelection","description":"<p>If <code>allowSelection</code> is set to true, it enables row selection in the Gantt chart, and the selected rows are highlighted.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#allowselection"},{"name":"allowFiltering","description":"<p>Enables or disables filtering functionality in the Gantt chart.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#allowfiltering"},{"name":"allowSorting","description":"<p>If <code>allowSorting</code> is set to true, it enables sorting of Gantt chart tasks when the column header is clicked.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#allowsorting"},{"name":"showColumnMenu","description":"<p>If <code>showColumnMenu</code> set to true, enables the column menu options for each column in the Gantt chart.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#showcolumnmenu"},{"name":"columns","description":"<p>Defines the collection of columns displayed in the Gantt chart grid.\nIf the <code>columns</code> declaration is empty, the columns are automatically populated based on the <code>taskSettings</code> values.</p>\n","type":"Column[]|string[]|ColumnModel[]","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#columns"},{"name":"highlightWeekends","description":"<p>If <code>highlightWeekends</code> is set to true, it highlights all weekend days in the week-day timeline mode.\nThis makes weekends visually distinct in the timeline view.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#highlightweekends"},{"name":"timelineSettings","description":"<p>Configures timeline settings of Gantt.\nDefines default timeline modes or customized top tier mode and bottom tier mode or single tier only.</p>\n","type":"TimelineSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#timelinesettings"},{"name":"labelSettings","description":"<p>Configures the labels displayed on the right, left, and inside the taskbars in the Gantt chart.</p>\n","type":"LabelSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#labelsettings"},{"name":"projectStartDate","description":"<p>Defines the start date of the project. If the <code>projectStartDate</code> is not set, it will be automatically calculated based on the data source.\nThe date can be provided as a <code>Date</code> object or a string in a valid date format.</p>\n","type":"Date|string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#projectstartdate"},{"name":"projectEndDate","description":"<p>Defines the end date of the project. If the <code>projectEndDate</code> is not set, it will be automatically calculated based on the data source.\nThe date can be provided as a <code>Date</code> object or a string in a valid date format.</p>\n","type":"Date|string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#projectenddate"}],"gantt/column-menu":[{"name":"dataSource","description":"<p>Defines the data source for the Gantt chart, which is used to render rows and tasks.\nThe <code>dataSource</code> can be an array of JavaScript objects, an instance of <code>DataManager</code>, or a single object.\nThe array of objects should contain the task data with properties such as <code>TaskID</code>, <code>TaskName</code>, <code>StartDate</code>, <code>EndDate</code>, etc.\nThis allows dynamic binding of tasks and their relationships (e.g., dependencies, subtasks, progress) to the Gantt chart.</p>\n","type":"Object[]|DataManager|Object","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#datasource"},{"name":"height","description":"<p>Defines the height of the Gantt component container.\nThe <code>height</code> property can be set to a specific value (in pixels or percentage) or set to 'auto' for automatic height adjustment based on content.</p>\n","type":"number|string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#height"},{"name":"taskFields","description":"<p>Defines the mapping properties to extract task-related values, such as ID, start date, end date, duration, and progress, from the data source.\nThis allows the Gantt chart to properly map the provided data to the corresponding task fields and render them accordingly.</p>\n","type":"TaskFieldsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#taskfields"},{"name":"treeColumnIndex","description":"<p>To define expander column index in Grid.</p>\n","type":"number","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#treecolumnindex"},{"name":"allowSelection","description":"<p>If <code>allowSelection</code> is set to true, it enables row selection in the Gantt chart, and the selected rows are highlighted.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#allowselection"},{"name":"allowFiltering","description":"<p>Enables or disables filtering functionality in the Gantt chart.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#allowfiltering"},{"name":"allowSorting","description":"<p>If <code>allowSorting</code> is set to true, it enables sorting of Gantt chart tasks when the column header is clicked.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#allowsorting"},{"name":"showColumnMenu","description":"<p>If <code>showColumnMenu</code> set to true, enables the column menu options for each column in the Gantt chart.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#showcolumnmenu"},{"name":"columns","description":"<p>Defines the collection of columns displayed in the Gantt chart grid.\nIf the <code>columns</code> declaration is empty, the columns are automatically populated based on the <code>taskSettings</code> values.</p>\n","type":"Column[]|string[]|ColumnModel[]","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#columns"},{"name":"highlightWeekends","description":"<p>If <code>highlightWeekends</code> is set to true, it highlights all weekend days in the week-day timeline mode.\nThis makes weekends visually distinct in the timeline view.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#highlightweekends"},{"name":"timelineSettings","description":"<p>Configures timeline settings of Gantt.\nDefines default timeline modes or customized top tier mode and bottom tier mode or single tier only.</p>\n","type":"TimelineSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#timelinesettings"},{"name":"labelSettings","description":"<p>Configures the labels displayed on the right, left, and inside the taskbars in the Gantt chart.</p>\n","type":"LabelSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#labelsettings"},{"name":"projectStartDate","description":"<p>Defines the start date of the project. If the <code>projectStartDate</code> is not set, it will be automatically calculated based on the data source.\nThe date can be provided as a <code>Date</code> object or a string in a valid date format.</p>\n","type":"Date|string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#projectstartdate"},{"name":"projectEndDate","description":"<p>Defines the end date of the project. If the <code>projectEndDate</code> is not set, it will be automatically calculated based on the data source.\nThe date can be provided as a <code>Date</code> object or a string in a valid date format.</p>\n","type":"Date|string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#projectenddate"}],"gantt/show-hide-column":[{"name":"dataSource","description":"<p>Defines the data source for the Gantt chart, which is used to render rows and tasks.\nThe <code>dataSource</code> can be an array of JavaScript objects, an instance of <code>DataManager</code>, or a single object.\nThe array of objects should contain the task data with properties such as <code>TaskID</code>, <code>TaskName</code>, <code>StartDate</code>, <code>EndDate</code>, etc.\nThis allows dynamic binding of tasks and their relationships (e.g., dependencies, subtasks, progress) to the Gantt chart.</p>\n","type":"Object[]|DataManager|Object","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#datasource"},{"name":"height","description":"<p>Defines the height of the Gantt component container.\nThe <code>height</code> property can be set to a specific value (in pixels or percentage) or set to 'auto' for automatic height adjustment based on content.</p>\n","type":"number|string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#height"},{"name":"taskFields","description":"<p>Defines the mapping properties to extract task-related values, such as ID, start date, end date, duration, and progress, from the data source.\nThis allows the Gantt chart to properly map the provided data to the corresponding task fields and render them accordingly.</p>\n","type":"TaskFieldsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#taskfields"},{"name":"treeColumnIndex","description":"<p>To define expander column index in Grid.</p>\n","type":"number","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#treecolumnindex"},{"name":"allowSelection","description":"<p>If <code>allowSelection</code> is set to true, it enables row selection in the Gantt chart, and the selected rows are highlighted.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#allowselection"},{"name":"allowFiltering","description":"<p>Enables or disables filtering functionality in the Gantt chart.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#allowfiltering"},{"name":"allowSorting","description":"<p>If <code>allowSorting</code> is set to true, it enables sorting of Gantt chart tasks when the column header is clicked.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#allowsorting"},{"name":"showColumnMenu","description":"<p>If <code>showColumnMenu</code> set to true, enables the column menu options for each column in the Gantt chart.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#showcolumnmenu"},{"name":"columns","description":"<p>Defines the collection of columns displayed in the Gantt chart grid.\nIf the <code>columns</code> declaration is empty, the columns are automatically populated based on the <code>taskSettings</code> values.</p>\n","type":"Column[]|string[]|ColumnModel[]","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#columns"},{"name":"highlightWeekends","description":"<p>If <code>highlightWeekends</code> is set to true, it highlights all weekend days in the week-day timeline mode.\nThis makes weekends visually distinct in the timeline view.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#highlightweekends"},{"name":"timelineSettings","description":"<p>Configures timeline settings of Gantt.\nDefines default timeline modes or customized top tier mode and bottom tier mode or single tier only.</p>\n","type":"TimelineSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#timelinesettings"},{"name":"labelSettings","description":"<p>Configures the labels displayed on the right, left, and inside the taskbars in the Gantt chart.</p>\n","type":"LabelSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#labelsettings"},{"name":"projectStartDate","description":"<p>Defines the start date of the project. If the <code>projectStartDate</code> is not set, it will be automatically calculated based on the data source.\nThe date can be provided as a <code>Date</code> object or a string in a valid date format.</p>\n","type":"Date|string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#projectstartdate"},{"name":"projectEndDate","description":"<p>Defines the end date of the project. If the <code>projectEndDate</code> is not set, it will be automatically calculated based on the data source.\nThe date can be provided as a <code>Date</code> object or a string in a valid date format.</p>\n","type":"Date|string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#projectenddate"}],"gantt/resource-allocation":[{"name":"dataSource","description":"<p>Defines the data source for the Gantt chart, which is used to render rows and tasks.\nThe <code>dataSource</code> can be an array of JavaScript objects, an instance of <code>DataManager</code>, or a single object.\nThe array of objects should contain the task data with properties such as <code>TaskID</code>, <code>TaskName</code>, <code>StartDate</code>, <code>EndDate</code>, etc.\nThis allows dynamic binding of tasks and their relationships (e.g., dependencies, subtasks, progress) to the Gantt chart.</p>\n","type":"Object[]|DataManager|Object","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#datasource"},{"name":"taskFields","description":"<p>Defines the mapping properties to extract task-related values, such as ID, start date, end date, duration, and progress, from the data source.\nThis allows the Gantt chart to properly map the provided data to the corresponding task fields and render them accordingly.</p>\n","type":"TaskFieldsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#taskfields"},{"name":"allowSelection","description":"<p>If <code>allowSelection</code> is set to true, it enables row selection in the Gantt chart, and the selected rows are highlighted.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#allowselection"},{"name":"height","description":"<p>Defines the height of the Gantt component container.\nThe <code>height</code> property can be set to a specific value (in pixels or percentage) or set to 'auto' for automatic height adjustment based on content.</p>\n","type":"number|string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#height"},{"name":"resources","description":"<p>Defines the collection of resources assigned to the project.</p>\n","type":"object[]","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#resources"},{"name":"resourceFields","description":"<p>Defines the mapping properties to extract resource values, such as <code>id</code>, <code>name</code>, <code>unit</code>, and <code>group</code> from the resource collection in the Gantt chart.\nThis helps to map data from a custom resource collection to the appropriate fields for resource allocation.</p>\n","type":"ResourceFieldsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#resourcefields"},{"name":"projectStartDate","description":"<p>Defines the start date of the project. If the <code>projectStartDate</code> is not set, it will be automatically calculated based on the data source.\nThe date can be provided as a <code>Date</code> object or a string in a valid date format.</p>\n","type":"Date|string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#projectstartdate"},{"name":"projectEndDate","description":"<p>Defines the end date of the project. If the <code>projectEndDate</code> is not set, it will be automatically calculated based on the data source.\nThe date can be provided as a <code>Date</code> object or a string in a valid date format.</p>\n","type":"Date|string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#projectenddate"},{"name":"toolbar","description":"<p><code>toolbar</code> defines the toolbar items of the Gantt.\nIt contains built-in and custom toolbar items.\nIf an array value is assigned, it is considered as the list of built-in and custom toolbar items in the Gantt's toolbar.\n&lt;br&gt;&lt;br&gt;\nThe available built-in toolbar items are:</p>\n<ul>\n<li>Add: Adds a new record.</li>\n<li>Edit: Edits the selected task.</li>\n<li>Update: Updates the edited task.</li>\n<li>Delete: Deletes the selected task.</li>\n<li>Cancel: Cancels the edit state.</li>\n<li>Search: Searches tasks by the given key.</li>\n<li>ExpandAll: Expands all the task of Gantt.</li>\n<li>CollapseAll: Collapses all the task of Gantt.</li>\n<li>PrevTimeSpan: Extends timeline with one unit before the timeline start date.</li>\n<li>NextTimeSpan: Extends timeline with one unit after the timeline finish date.</li>\n<li>ZoomIn: ZoomIn the Gantt control.</li>\n<li>ZoomOut: ZoomOut the Gantt control.</li>\n<li>ZoomToFit: Display the all tasks within the viewable Gantt chart.</li>\n<li>ExcelExport: To export in Excel format.</li>\n<li>CsvExport : To export in CSV format.</li>\n<li>Indent: To indent a task to one level.</li>\n<li>Outdent: To outdent a task from one level.</li>\n</ul>\n","type":"[]","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#toolbar"},{"name":"allowSelection","description":"<p>If <code>allowSelection</code> is set to true, it enables row selection in the Gantt chart, and the selected rows are highlighted.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#allowselection"},{"name":"editSettings","description":"<p>Configures the edit settings for the Gantt chart, such as enabling or disabling task modifications.</p>\n","type":"EditSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#editsettings"},{"name":"workUnit","description":"<p><code>workUnit</code> Specifies the work unit for each tasks whether day or hour or minute.</p>\n<ul>\n<li><code>day</code>: Sets the work unit as day.</li>\n<li><code>hour</code>: Sets the work unit as hour.</li>\n<li><code>minute</code>: Sets the work unit as minute.</li>\n</ul>\n","type":"WorkUnit","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#workunit"},{"name":"columns","description":"<p>Defines the collection of columns displayed in the Gantt chart grid.\nIf the <code>columns</code> declaration is empty, the columns are automatically populated based on the <code>taskSettings</code> values.</p>\n","type":"Column[]|string[]|ColumnModel[]","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#columns"},{"name":"labelSettings","description":"<p>Configures the labels displayed on the right, left, and inside the taskbars in the Gantt chart.</p>\n","type":"LabelSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#labelsettings"},{"name":"splitterSettings","description":"<p>Configures the splitter settings for the Gantt chart.</p>\n","type":"SplitterSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#splittersettings"}],"gantt/resource-view":[{"name":"dataSource","description":"<p>Defines the data source for the Gantt chart, which is used to render rows and tasks.\nThe <code>dataSource</code> can be an array of JavaScript objects, an instance of <code>DataManager</code>, or a single object.\nThe array of objects should contain the task data with properties such as <code>TaskID</code>, <code>TaskName</code>, <code>StartDate</code>, <code>EndDate</code>, etc.\nThis allows dynamic binding of tasks and their relationships (e.g., dependencies, subtasks, progress) to the Gantt chart.</p>\n","type":"Object[]|DataManager|Object","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#datasource"},{"name":"taskFields","description":"<p>Defines the mapping properties to extract task-related values, such as ID, start date, end date, duration, and progress, from the data source.\nThis allows the Gantt chart to properly map the provided data to the corresponding task fields and render them accordingly.</p>\n","type":"TaskFieldsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#taskfields"},{"name":"allowSelection","description":"<p>If <code>allowSelection</code> is set to true, it enables row selection in the Gantt chart, and the selected rows are highlighted.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#allowselection"},{"name":"height","description":"<p>Defines the height of the Gantt component container.\nThe <code>height</code> property can be set to a specific value (in pixels or percentage) or set to 'auto' for automatic height adjustment based on content.</p>\n","type":"number|string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#height"},{"name":"resources","description":"<p>Defines the collection of resources assigned to the project.</p>\n","type":"object[]","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#resources"},{"name":"resourceFields","description":"<p>Defines the mapping properties to extract resource values, such as <code>id</code>, <code>name</code>, <code>unit</code>, and <code>group</code> from the resource collection in the Gantt chart.\nThis helps to map data from a custom resource collection to the appropriate fields for resource allocation.</p>\n","type":"ResourceFieldsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#resourcefields"},{"name":"projectStartDate","description":"<p>Defines the start date of the project. If the <code>projectStartDate</code> is not set, it will be automatically calculated based on the data source.\nThe date can be provided as a <code>Date</code> object or a string in a valid date format.</p>\n","type":"Date|string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#projectstartdate"},{"name":"projectEndDate","description":"<p>Defines the end date of the project. If the <code>projectEndDate</code> is not set, it will be automatically calculated based on the data source.\nThe date can be provided as a <code>Date</code> object or a string in a valid date format.</p>\n","type":"Date|string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#projectenddate"},{"name":"viewType","description":"<p>Defines the view type of the Gantt.</p>\n","type":"ViewType","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#viewtype"},{"name":"editSettings","description":"<p>Configures the edit settings for the Gantt chart, such as enabling or disabling task modifications.</p>\n","type":"EditSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#editsettings"},{"name":"columns","description":"<p>Defines the collection of columns displayed in the Gantt chart grid.\nIf the <code>columns</code> declaration is empty, the columns are automatically populated based on the <code>taskSettings</code> values.</p>\n","type":"Column[]|string[]|ColumnModel[]","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#columns"},{"name":"toolbar","description":"<p><code>toolbar</code> defines the toolbar items of the Gantt.\nIt contains built-in and custom toolbar items.\nIf an array value is assigned, it is considered as the list of built-in and custom toolbar items in the Gantt's toolbar.\n&lt;br&gt;&lt;br&gt;\nThe available built-in toolbar items are:</p>\n<ul>\n<li>Add: Adds a new record.</li>\n<li>Edit: Edits the selected task.</li>\n<li>Update: Updates the edited task.</li>\n<li>Delete: Deletes the selected task.</li>\n<li>Cancel: Cancels the edit state.</li>\n<li>Search: Searches tasks by the given key.</li>\n<li>ExpandAll: Expands all the task of Gantt.</li>\n<li>CollapseAll: Collapses all the task of Gantt.</li>\n<li>PrevTimeSpan: Extends timeline with one unit before the timeline start date.</li>\n<li>NextTimeSpan: Extends timeline with one unit after the timeline finish date.</li>\n<li>ZoomIn: ZoomIn the Gantt control.</li>\n<li>ZoomOut: ZoomOut the Gantt control.</li>\n<li>ZoomToFit: Display the all tasks within the viewable Gantt chart.</li>\n<li>ExcelExport: To export in Excel format.</li>\n<li>CsvExport : To export in CSV format.</li>\n<li>Indent: To indent a task to one level.</li>\n<li>Outdent: To outdent a task from one level.</li>\n</ul>\n","type":"[]","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#toolbar"},{"name":"labelSettings","description":"<p>Configures the labels displayed on the right, left, and inside the taskbars in the Gantt chart.</p>\n","type":"LabelSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#labelsettings"},{"name":"splitterSettings","description":"<p>Configures the splitter settings for the Gantt chart.</p>\n","type":"SplitterSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#splittersettings"},{"name":"allowResizing","description":"<p>Enables column resizing in the Gantt chart when <code>allowResizing</code> is set to true.\nWhen enabled, users can adjust the width of columns by dragging the column borders.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#allowresizing"},{"name":"allowSelection","description":"<p>If <code>allowSelection</code> is set to true, it enables row selection in the Gantt chart, and the selected rows are highlighted.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#allowselection"},{"name":"highlightWeekends","description":"<p>If <code>highlightWeekends</code> is set to true, it highlights all weekend days in the week-day timeline mode.\nThis makes weekends visually distinct in the timeline view.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#highlightweekends"},{"name":"showOverAllocation","description":"<p>If <code>showOverAllocation</code> set to <code>true</code>, enables the rendering of the overallocation container in the Gantt chart.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#showoverallocation"}],"gantt/resource-multi-taskbar":[{"name":"dataSource","description":"<p>Defines the data source for the Gantt chart, which is used to render rows and tasks.\nThe <code>dataSource</code> can be an array of JavaScript objects, an instance of <code>DataManager</code>, or a single object.\nThe array of objects should contain the task data with properties such as <code>TaskID</code>, <code>TaskName</code>, <code>StartDate</code>, <code>EndDate</code>, etc.\nThis allows dynamic binding of tasks and their relationships (e.g., dependencies, subtasks, progress) to the Gantt chart.</p>\n","type":"Object[]|DataManager|Object","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#datasource"},{"name":"taskFields","description":"<p>Defines the mapping properties to extract task-related values, such as ID, start date, end date, duration, and progress, from the data source.\nThis allows the Gantt chart to properly map the provided data to the corresponding task fields and render them accordingly.</p>\n","type":"TaskFieldsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#taskfields"},{"name":"allowSelection","description":"<p>If <code>allowSelection</code> is set to true, it enables row selection in the Gantt chart, and the selected rows are highlighted.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#allowselection"},{"name":"height","description":"<p>Defines the height of the Gantt component container.\nThe <code>height</code> property can be set to a specific value (in pixels or percentage) or set to 'auto' for automatic height adjustment based on content.</p>\n","type":"number|string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#height"},{"name":"resources","description":"<p>Defines the collection of resources assigned to the project.</p>\n","type":"object[]","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#resources"},{"name":"resourceFields","description":"<p>Defines the mapping properties to extract resource values, such as <code>id</code>, <code>name</code>, <code>unit</code>, and <code>group</code> from the resource collection in the Gantt chart.\nThis helps to map data from a custom resource collection to the appropriate fields for resource allocation.</p>\n","type":"ResourceFieldsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#resourcefields"},{"name":"projectStartDate","description":"<p>Defines the start date of the project. If the <code>projectStartDate</code> is not set, it will be automatically calculated based on the data source.\nThe date can be provided as a <code>Date</code> object or a string in a valid date format.</p>\n","type":"Date|string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#projectstartdate"},{"name":"projectEndDate","description":"<p>Defines the end date of the project. If the <code>projectEndDate</code> is not set, it will be automatically calculated based on the data source.\nThe date can be provided as a <code>Date</code> object or a string in a valid date format.</p>\n","type":"Date|string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#projectenddate"},{"name":"viewType","description":"<p>Defines the view type of the Gantt.</p>\n","type":"ViewType","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#viewtype"},{"name":"editSettings","description":"<p>Configures the edit settings for the Gantt chart, such as enabling or disabling task modifications.</p>\n","type":"EditSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#editsettings"},{"name":"columns","description":"<p>Defines the collection of columns displayed in the Gantt chart grid.\nIf the <code>columns</code> declaration is empty, the columns are automatically populated based on the <code>taskSettings</code> values.</p>\n","type":"Column[]|string[]|ColumnModel[]","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#columns"},{"name":"toolbar","description":"<p><code>toolbar</code> defines the toolbar items of the Gantt.\nIt contains built-in and custom toolbar items.\nIf an array value is assigned, it is considered as the list of built-in and custom toolbar items in the Gantt's toolbar.\n&lt;br&gt;&lt;br&gt;\nThe available built-in toolbar items are:</p>\n<ul>\n<li>Add: Adds a new record.</li>\n<li>Edit: Edits the selected task.</li>\n<li>Update: Updates the edited task.</li>\n<li>Delete: Deletes the selected task.</li>\n<li>Cancel: Cancels the edit state.</li>\n<li>Search: Searches tasks by the given key.</li>\n<li>ExpandAll: Expands all the task of Gantt.</li>\n<li>CollapseAll: Collapses all the task of Gantt.</li>\n<li>PrevTimeSpan: Extends timeline with one unit before the timeline start date.</li>\n<li>NextTimeSpan: Extends timeline with one unit after the timeline finish date.</li>\n<li>ZoomIn: ZoomIn the Gantt control.</li>\n<li>ZoomOut: ZoomOut the Gantt control.</li>\n<li>ZoomToFit: Display the all tasks within the viewable Gantt chart.</li>\n<li>ExcelExport: To export in Excel format.</li>\n<li>CsvExport : To export in CSV format.</li>\n<li>Indent: To indent a task to one level.</li>\n<li>Outdent: To outdent a task from one level.</li>\n</ul>\n","type":"[]","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#toolbar"},{"name":"labelSettings","description":"<p>Configures the labels displayed on the right, left, and inside the taskbars in the Gantt chart.</p>\n","type":"LabelSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#labelsettings"},{"name":"splitterSettings","description":"<p>Configures the splitter settings for the Gantt chart.</p>\n","type":"SplitterSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#splittersettings"},{"name":"allowResizing","description":"<p>Enables column resizing in the Gantt chart when <code>allowResizing</code> is set to true.\nWhen enabled, users can adjust the width of columns by dragging the column borders.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#allowresizing"},{"name":"allowSelection","description":"<p>If <code>allowSelection</code> is set to true, it enables row selection in the Gantt chart, and the selected rows are highlighted.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#allowselection"},{"name":"highlightWeekends","description":"<p>If <code>highlightWeekends</code> is set to true, it highlights all weekend days in the week-day timeline mode.\nThis makes weekends visually distinct in the timeline view.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#highlightweekends"},{"name":"showOverAllocation","description":"<p>If <code>showOverAllocation</code> set to <code>true</code>, enables the rendering of the overallocation container in the Gantt chart.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#showoverallocation"}],"gantt/sorting":[{"name":"dataSource","description":"<p>Defines the data source for the Gantt chart, which is used to render rows and tasks.\nThe <code>dataSource</code> can be an array of JavaScript objects, an instance of <code>DataManager</code>, or a single object.\nThe array of objects should contain the task data with properties such as <code>TaskID</code>, <code>TaskName</code>, <code>StartDate</code>, <code>EndDate</code>, etc.\nThis allows dynamic binding of tasks and their relationships (e.g., dependencies, subtasks, progress) to the Gantt chart.</p>\n","type":"Object[]|DataManager|Object","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#datasource"},{"name":"taskFields","description":"<p>Defines the mapping properties to extract task-related values, such as ID, start date, end date, duration, and progress, from the data source.\nThis allows the Gantt chart to properly map the provided data to the corresponding task fields and render them accordingly.</p>\n","type":"TaskFieldsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#taskfields"},{"name":"columns","description":"<p>Defines the collection of columns displayed in the Gantt chart grid.\nIf the <code>columns</code> declaration is empty, the columns are automatically populated based on the <code>taskSettings</code> values.</p>\n","type":"Column[]|string[]|ColumnModel[]","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#columns"},{"name":"treeColumnIndex","description":"<p>To define expander column index in Grid.</p>\n","type":"number","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#treecolumnindex"},{"name":"height","description":"<p>Defines the height of the Gantt component container.\nThe <code>height</code> property can be set to a specific value (in pixels or percentage) or set to 'auto' for automatic height adjustment based on content.</p>\n","type":"number|string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#height"},{"name":"labelSettings","description":"<p>Configures the labels displayed on the right, left, and inside the taskbars in the Gantt chart.</p>\n","type":"LabelSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#labelsettings"},{"name":"splitterSettings","description":"<p>Configures the splitter settings for the Gantt chart.</p>\n","type":"SplitterSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#splittersettings"},{"name":"allowSorting","description":"<p>If <code>allowSorting</code> is set to true, it enables sorting of Gantt chart tasks when the column header is clicked.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#allowsorting"},{"name":"sortSettings","description":"<p>Configures the sort settings for the Gantt chart.</p>\n","type":"SortSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#sortsettings"},{"name":"projectStartDate","description":"<p>Defines the start date of the project. If the <code>projectStartDate</code> is not set, it will be automatically calculated based on the data source.\nThe date can be provided as a <code>Date</code> object or a string in a valid date format.</p>\n","type":"Date|string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#projectstartdate"},{"name":"projectEndDate","description":"<p>Defines the end date of the project. If the <code>projectEndDate</code> is not set, it will be automatically calculated based on the data source.\nThe date can be provided as a <code>Date</code> object or a string in a valid date format.</p>\n","type":"Date|string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#projectenddate"},{"name":"selectedRowIndex","description":"<p>The <code>selectedRowIndex</code> allows you to specify the index of the row to be selected at the time of initial rendering.\nIt can also be used to get the currently selected row index after selection.\nA value of <code>-1</code> indicates no row is selected.</p>\n","type":"number","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#selectedrowindex"},{"name":"allowSelection","description":"<p>If <code>allowSelection</code> is set to true, it enables row selection in the Gantt chart, and the selected rows are highlighted.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#allowselection"}],"gantt/sorting-api":[{"name":"dataSource","description":"<p>Defines the data source for the Gantt chart, which is used to render rows and tasks.\nThe <code>dataSource</code> can be an array of JavaScript objects, an instance of <code>DataManager</code>, or a single object.\nThe array of objects should contain the task data with properties such as <code>TaskID</code>, <code>TaskName</code>, <code>StartDate</code>, <code>EndDate</code>, etc.\nThis allows dynamic binding of tasks and their relationships (e.g., dependencies, subtasks, progress) to the Gantt chart.</p>\n","type":"Object[]|DataManager|Object","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#datasource"},{"name":"taskFields","description":"<p>Defines the mapping properties to extract task-related values, such as ID, start date, end date, duration, and progress, from the data source.\nThis allows the Gantt chart to properly map the provided data to the corresponding task fields and render them accordingly.</p>\n","type":"TaskFieldsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#taskfields"},{"name":"columns","description":"<p>Defines the collection of columns displayed in the Gantt chart grid.\nIf the <code>columns</code> declaration is empty, the columns are automatically populated based on the <code>taskSettings</code> values.</p>\n","type":"Column[]|string[]|ColumnModel[]","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#columns"},{"name":"treeColumnIndex","description":"<p>To define expander column index in Grid.</p>\n","type":"number","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#treecolumnindex"},{"name":"height","description":"<p>Defines the height of the Gantt component container.\nThe <code>height</code> property can be set to a specific value (in pixels or percentage) or set to 'auto' for automatic height adjustment based on content.</p>\n","type":"number|string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#height"},{"name":"highlightWeekends","description":"<p>If <code>highlightWeekends</code> is set to true, it highlights all weekend days in the week-day timeline mode.\nThis makes weekends visually distinct in the timeline view.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#highlightweekends"},{"name":"allowSorting","description":"<p>If <code>allowSorting</code> is set to true, it enables sorting of Gantt chart tasks when the column header is clicked.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#allowsorting"},{"name":"labelSettings","description":"<p>Configures the labels displayed on the right, left, and inside the taskbars in the Gantt chart.</p>\n","type":"LabelSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#labelsettings"},{"name":"projectStartDate","description":"<p>Defines the start date of the project. If the <code>projectStartDate</code> is not set, it will be automatically calculated based on the data source.\nThe date can be provided as a <code>Date</code> object or a string in a valid date format.</p>\n","type":"Date|string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#projectstartdate"},{"name":"projectEndDate","description":"<p>Defines the end date of the project. If the <code>projectEndDate</code> is not set, it will be automatically calculated based on the data source.\nThe date can be provided as a <code>Date</code> object or a string in a valid date format.</p>\n","type":"Date|string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#projectenddate"},{"name":"allowSelection","description":"<p>If <code>allowSelection</code> is set to true, it enables row selection in the Gantt chart, and the selected rows are highlighted.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#allowselection"}],"gantt/taskbar-template":[{"name":"dataSource","description":"<p>Defines the data source for the Gantt chart, which is used to render rows and tasks.\nThe <code>dataSource</code> can be an array of JavaScript objects, an instance of <code>DataManager</code>, or a single object.\nThe array of objects should contain the task data with properties such as <code>TaskID</code>, <code>TaskName</code>, <code>StartDate</code>, <code>EndDate</code>, etc.\nThis allows dynamic binding of tasks and their relationships (e.g., dependencies, subtasks, progress) to the Gantt chart.</p>\n","type":"Object[]|DataManager|Object","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#datasource"},{"name":"dateFormat","description":"<p>Specifies the date format for displaying dates in the Gantt chart, including in tooltips and grid cells.\nBy default, the format is determined based on the current culture/locale settings.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#dateformat"},{"name":"taskFields","description":"<p>Defines the mapping properties to extract task-related values, such as ID, start date, end date, duration, and progress, from the data source.\nThis allows the Gantt chart to properly map the provided data to the corresponding task fields and render them accordingly.</p>\n","type":"TaskFieldsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#taskfields"},{"name":"columns","description":"<p>Defines the collection of columns displayed in the Gantt chart grid.\nIf the <code>columns</code> declaration is empty, the columns are automatically populated based on the <code>taskSettings</code> values.</p>\n","type":"Column[]|string[]|ColumnModel[]","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#columns"},{"name":"treeColumnIndex","description":"<p>To define expander column index in Grid.</p>\n","type":"number","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#treecolumnindex"},{"name":"rowHeight","description":"<p>Defines the height of grid and chart rows in the Gantt chart.\nThis property sets the vertical space allocated for each task or row, allowing customization of row sizes.</p>\n","type":"number","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#rowheight"},{"name":"taskbarHeight","description":"<p>Defines height of the taskbar element in the Gantt chart.</p>\n","type":"number","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#taskbarheight"},{"name":"dayWorkingTime","description":"<p>Defines the customized working time for the project.\nThis helps in accurately planning tasks based on available working hours and ensures proper task scheduling.</p>\n","type":"DayWorkingTimeModel[]","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#dayworkingtime"},{"name":"durationUnit","description":"<p><code>durationUnit</code> Specifies the duration unit for each task. The available options are:</p>\n<ul>\n<li><code>day</code>: Sets the duration unit to day.</li>\n<li><code>hour</code>: Sets the duration unit to hour.</li>\n<li><code>minute</code>: Sets the duration unit to minute.</li>\n</ul>\n","type":"DurationUnit","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#durationunit"},{"name":"eventMarkers","description":"<p>Defines the events and milestones along the project timeline.\nThese event markers indicate significant events or milestones throughout the project's duration.</p>\n","type":"EventMarkerModel[]","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#eventmarkers"},{"name":"height","description":"<p>Defines the height of the Gantt component container.\nThe <code>height</code> property can be set to a specific value (in pixels or percentage) or set to 'auto' for automatic height adjustment based on content.</p>\n","type":"number|string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#height"},{"name":"taskbarTemplate","description":"<p>The task bar template that renders customized child task bars from the given template.\nThis property allows users to define a custom template for rendering child task bars in the Gantt chart.</p>\n","type":"string|Function","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#taskbartemplate"},{"name":"milestoneTemplate","description":"<p>Defines a custom template for rendering milestone tasks in the Gantt chart. This template allows you to customize the appearance of milestone tasks.</p>\n","type":"string|Function","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#milestonetemplate"},{"name":"projectStartDate","description":"<p>Defines the start date of the project. If the <code>projectStartDate</code> is not set, it will be automatically calculated based on the data source.\nThe date can be provided as a <code>Date</code> object or a string in a valid date format.</p>\n","type":"Date|string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#projectstartdate"},{"name":"projectEndDate","description":"<p>Defines the end date of the project. If the <code>projectEndDate</code> is not set, it will be automatically calculated based on the data source.\nThe date can be provided as a <code>Date</code> object or a string in a valid date format.</p>\n","type":"Date|string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#projectenddate"},{"name":"timelineSettings","description":"<p>Configures timeline settings of Gantt.\nDefines default timeline modes or customized top tier mode and bottom tier mode or single tier only.</p>\n","type":"TimelineSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#timelinesettings"},{"name":"splitterSettings","description":"<p>Configures the splitter settings for the Gantt chart.</p>\n","type":"SplitterSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#splittersettings"},{"name":"labelSettings","description":"<p>Configures the labels displayed on the right, left, and inside the taskbars in the Gantt chart.</p>\n","type":"LabelSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#labelsettings"},{"name":"tooltipSettings","description":"<p>Enables or disables default tooltip of Gantt element and defines customized tooltip for Gantt elements.</p>\n","type":"TooltipSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#tooltipsettings"}],"gantt/timeline-template":[{"name":"dataSource","description":"<p>Defines the data source for the Gantt chart, which is used to render rows and tasks.\nThe <code>dataSource</code> can be an array of JavaScript objects, an instance of <code>DataManager</code>, or a single object.\nThe array of objects should contain the task data with properties such as <code>TaskID</code>, <code>TaskName</code>, <code>StartDate</code>, <code>EndDate</code>, etc.\nThis allows dynamic binding of tasks and their relationships (e.g., dependencies, subtasks, progress) to the Gantt chart.</p>\n","type":"Object[]|DataManager|Object","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#datasource"},{"name":"taskFields","description":"<p>Defines the mapping properties to extract task-related values, such as ID, start date, end date, duration, and progress, from the data source.\nThis allows the Gantt chart to properly map the provided data to the corresponding task fields and render them accordingly.</p>\n","type":"TaskFieldsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#taskfields"},{"name":"columns","description":"<p>Defines the collection of columns displayed in the Gantt chart grid.\nIf the <code>columns</code> declaration is empty, the columns are automatically populated based on the <code>taskSettings</code> values.</p>\n","type":"Column[]|string[]|ColumnModel[]","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#columns"},{"name":"height","description":"<p>Defines the height of the Gantt component container.\nThe <code>height</code> property can be set to a specific value (in pixels or percentage) or set to 'auto' for automatic height adjustment based on content.</p>\n","type":"number|string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#height"},{"name":"projectStartDate","description":"<p>Defines the start date of the project. If the <code>projectStartDate</code> is not set, it will be automatically calculated based on the data source.\nThe date can be provided as a <code>Date</code> object or a string in a valid date format.</p>\n","type":"Date|string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#projectstartdate"},{"name":"projectEndDate","description":"<p>Defines the end date of the project. If the <code>projectEndDate</code> is not set, it will be automatically calculated based on the data source.\nThe date can be provided as a <code>Date</code> object or a string in a valid date format.</p>\n","type":"Date|string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#projectenddate"},{"name":"timelineSettings","description":"<p>Configures timeline settings of Gantt.\nDefines default timeline modes or customized top tier mode and bottom tier mode or single tier only.</p>\n","type":"TimelineSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#timelinesettings"},{"name":"splitterSettings","description":"<p>Configures the splitter settings for the Gantt chart.</p>\n","type":"SplitterSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#splittersettings"},{"name":"labelSettings","description":"<p>Configures the labels displayed on the right, left, and inside the taskbars in the Gantt chart.</p>\n","type":"LabelSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#labelsettings"},{"name":"timelineTemplate","description":"<p>Renders customized html elements for timeline cell from the given template.</p>\n","type":"string|Function","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#timelinetemplate"}],"gantt/tasklabel-template":[{"name":"dataSource","description":"<p>Defines the data source for the Gantt chart, which is used to render rows and tasks.\nThe <code>dataSource</code> can be an array of JavaScript objects, an instance of <code>DataManager</code>, or a single object.\nThe array of objects should contain the task data with properties such as <code>TaskID</code>, <code>TaskName</code>, <code>StartDate</code>, <code>EndDate</code>, etc.\nThis allows dynamic binding of tasks and their relationships (e.g., dependencies, subtasks, progress) to the Gantt chart.</p>\n","type":"Object[]|DataManager|Object","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#datasource"},{"name":"taskFields","description":"<p>Defines the mapping properties to extract task-related values, such as ID, start date, end date, duration, and progress, from the data source.\nThis allows the Gantt chart to properly map the provided data to the corresponding task fields and render them accordingly.</p>\n","type":"TaskFieldsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#taskfields"},{"name":"columns","description":"<p>Defines the collection of columns displayed in the Gantt chart grid.\nIf the <code>columns</code> declaration is empty, the columns are automatically populated based on the <code>taskSettings</code> values.</p>\n","type":"Column[]|string[]|ColumnModel[]","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#columns"},{"name":"highlightWeekends","description":"<p>If <code>highlightWeekends</code> is set to true, it highlights all weekend days in the week-day timeline mode.\nThis makes weekends visually distinct in the timeline view.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#highlightweekends"},{"name":"treeColumnIndex","description":"<p>To define expander column index in Grid.</p>\n","type":"number","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#treecolumnindex"},{"name":"rowHeight","description":"<p>Defines the height of grid and chart rows in the Gantt chart.\nThis property sets the vertical space allocated for each task or row, allowing customization of row sizes.</p>\n","type":"number","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#rowheight"},{"name":"height","description":"<p>Defines the height of the Gantt component container.\nThe <code>height</code> property can be set to a specific value (in pixels or percentage) or set to 'auto' for automatic height adjustment based on content.</p>\n","type":"number|string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#height"},{"name":"resourceFields","description":"<p>Defines the mapping properties to extract resource values, such as <code>id</code>, <code>name</code>, <code>unit</code>, and <code>group</code> from the resource collection in the Gantt chart.\nThis helps to map data from a custom resource collection to the appropriate fields for resource allocation.</p>\n","type":"ResourceFieldsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#resourcefields"},{"name":"resources","description":"<p>Defines the collection of resources assigned to the project.</p>\n","type":"object[]","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#resources"},{"name":"projectStartDate","description":"<p>Defines the start date of the project. If the <code>projectStartDate</code> is not set, it will be automatically calculated based on the data source.\nThe date can be provided as a <code>Date</code> object or a string in a valid date format.</p>\n","type":"Date|string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#projectstartdate"},{"name":"projectEndDate","description":"<p>Defines the end date of the project. If the <code>projectEndDate</code> is not set, it will be automatically calculated based on the data source.\nThe date can be provided as a <code>Date</code> object or a string in a valid date format.</p>\n","type":"Date|string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#projectenddate"},{"name":"splitterSettings","description":"<p>Configures the splitter settings for the Gantt chart.</p>\n","type":"SplitterSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#splittersettings"},{"name":"labelSettings","description":"<p>Configures the labels displayed on the right, left, and inside the taskbars in the Gantt chart.</p>\n","type":"LabelSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#labelsettings"}],"gantt/tooltip-template":[{"name":"dataSource","description":"<p>Defines the data source for the Gantt chart, which is used to render rows and tasks.\nThe <code>dataSource</code> can be an array of JavaScript objects, an instance of <code>DataManager</code>, or a single object.\nThe array of objects should contain the task data with properties such as <code>TaskID</code>, <code>TaskName</code>, <code>StartDate</code>, <code>EndDate</code>, etc.\nThis allows dynamic binding of tasks and their relationships (e.g., dependencies, subtasks, progress) to the Gantt chart.</p>\n","type":"Object[]|DataManager|Object","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#datasource"},{"name":"height","description":"<p>Defines the height of the Gantt component container.\nThe <code>height</code> property can be set to a specific value (in pixels or percentage) or set to 'auto' for automatic height adjustment based on content.</p>\n","type":"number|string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#height"},{"name":"taskFields","description":"<p>Defines the mapping properties to extract task-related values, such as ID, start date, end date, duration, and progress, from the data source.\nThis allows the Gantt chart to properly map the provided data to the corresponding task fields and render them accordingly.</p>\n","type":"TaskFieldsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#taskfields"},{"name":"renderBaseline","description":"<p>If <code>renderBaseline</code> is set to <code>true</code>, baselines will be rendered for tasks in the Gantt chart.\nBaselines provide a visual reference to track the planned vs. actual progress of tasks.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#renderbaseline"},{"name":"treeColumnIndex","description":"<p>To define expander column index in Grid.</p>\n","type":"number","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#treecolumnindex"},{"name":"columns","description":"<p>Defines the collection of columns displayed in the Gantt chart grid.\nIf the <code>columns</code> declaration is empty, the columns are automatically populated based on the <code>taskSettings</code> values.</p>\n","type":"Column[]|string[]|ColumnModel[]","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#columns"},{"name":"resourceFields","description":"<p>Defines the mapping properties to extract resource values, such as <code>id</code>, <code>name</code>, <code>unit</code>, and <code>group</code> from the resource collection in the Gantt chart.\nThis helps to map data from a custom resource collection to the appropriate fields for resource allocation.</p>\n","type":"ResourceFieldsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#resourcefields"},{"name":"resources","description":"<p>Defines the collection of resources assigned to the project.</p>\n","type":"object[]","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#resources"},{"name":"highlightWeekends","description":"<p>If <code>highlightWeekends</code> is set to true, it highlights all weekend days in the week-day timeline mode.\nThis makes weekends visually distinct in the timeline view.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#highlightweekends"},{"name":"labelSettings","description":"<p>Configures the labels displayed on the right, left, and inside the taskbars in the Gantt chart.</p>\n","type":"LabelSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#labelsettings"},{"name":"tooltipSettings","description":"<p>Enables or disables default tooltip of Gantt element and defines customized tooltip for Gantt elements.</p>\n","type":"TooltipSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#tooltipsettings"},{"name":"projectStartDate","description":"<p>Defines the start date of the project. If the <code>projectStartDate</code> is not set, it will be automatically calculated based on the data source.\nThe date can be provided as a <code>Date</code> object or a string in a valid date format.</p>\n","type":"Date|string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#projectstartdate"},{"name":"projectEndDate","description":"<p>Defines the end date of the project. If the <code>projectEndDate</code> is not set, it will be automatically calculated based on the data source.\nThe date can be provided as a <code>Date</code> object or a string in a valid date format.</p>\n","type":"Date|string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#projectenddate"}],"gantt/toolbar-template":[{"name":"dataSource","description":"<p>Defines the data source for the Gantt chart, which is used to render rows and tasks.\nThe <code>dataSource</code> can be an array of JavaScript objects, an instance of <code>DataManager</code>, or a single object.\nThe array of objects should contain the task data with properties such as <code>TaskID</code>, <code>TaskName</code>, <code>StartDate</code>, <code>EndDate</code>, etc.\nThis allows dynamic binding of tasks and their relationships (e.g., dependencies, subtasks, progress) to the Gantt chart.</p>\n","type":"Object[]|DataManager|Object","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#datasource"},{"name":"height","description":"<p>Defines the height of the Gantt component container.\nThe <code>height</code> property can be set to a specific value (in pixels or percentage) or set to 'auto' for automatic height adjustment based on content.</p>\n","type":"number|string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#height"},{"name":"taskFields","description":"<p>Defines the mapping properties to extract task-related values, such as ID, start date, end date, duration, and progress, from the data source.\nThis allows the Gantt chart to properly map the provided data to the corresponding task fields and render them accordingly.</p>\n","type":"TaskFieldsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#taskfields"},{"name":"allowFiltering","description":"<p>Enables or disables filtering functionality in the Gantt chart.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#allowfiltering"},{"name":"columns","description":"<p>Defines the collection of columns displayed in the Gantt chart grid.\nIf the <code>columns</code> declaration is empty, the columns are automatically populated based on the <code>taskSettings</code> values.</p>\n","type":"Column[]|string[]|ColumnModel[]","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#columns"},{"name":"toolbar","description":"<p><code>toolbar</code> defines the toolbar items of the Gantt.\nIt contains built-in and custom toolbar items.\nIf an array value is assigned, it is considered as the list of built-in and custom toolbar items in the Gantt's toolbar.\n&lt;br&gt;&lt;br&gt;\nThe available built-in toolbar items are:</p>\n<ul>\n<li>Add: Adds a new record.</li>\n<li>Edit: Edits the selected task.</li>\n<li>Update: Updates the edited task.</li>\n<li>Delete: Deletes the selected task.</li>\n<li>Cancel: Cancels the edit state.</li>\n<li>Search: Searches tasks by the given key.</li>\n<li>ExpandAll: Expands all the task of Gantt.</li>\n<li>CollapseAll: Collapses all the task of Gantt.</li>\n<li>PrevTimeSpan: Extends timeline with one unit before the timeline start date.</li>\n<li>NextTimeSpan: Extends timeline with one unit after the timeline finish date.</li>\n<li>ZoomIn: ZoomIn the Gantt control.</li>\n<li>ZoomOut: ZoomOut the Gantt control.</li>\n<li>ZoomToFit: Display the all tasks within the viewable Gantt chart.</li>\n<li>ExcelExport: To export in Excel format.</li>\n<li>CsvExport : To export in CSV format.</li>\n<li>Indent: To indent a task to one level.</li>\n<li>Outdent: To outdent a task from one level.</li>\n</ul>\n","type":"[]","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#toolbar"},{"name":"treeColumnIndex","description":"<p>To define expander column index in Grid.</p>\n","type":"number","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#treecolumnindex"},{"name":"highlightWeekends","description":"<p>If <code>highlightWeekends</code> is set to true, it highlights all weekend days in the week-day timeline mode.\nThis makes weekends visually distinct in the timeline view.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#highlightweekends"},{"name":"labelSettings","description":"<p>Configures the labels displayed on the right, left, and inside the taskbars in the Gantt chart.</p>\n","type":"LabelSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#labelsettings"},{"name":"projectStartDate","description":"<p>Defines the start date of the project. If the <code>projectStartDate</code> is not set, it will be automatically calculated based on the data source.\nThe date can be provided as a <code>Date</code> object or a string in a valid date format.</p>\n","type":"Date|string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#projectstartdate"},{"name":"projectEndDate","description":"<p>Defines the end date of the project. If the <code>projectEndDate</code> is not set, it will be automatically calculated based on the data source.\nThe date can be provided as a <code>Date</code> object or a string in a valid date format.</p>\n","type":"Date|string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#projectenddate"},{"name":"toolbarClick","description":"<p>Triggers when toolbar item was clicked.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#toolbarclick"},{"name":"splitterSettings","description":"<p>Configures the splitter settings for the Gantt chart.</p>\n","type":"SplitterSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#splittersettings"}],"gantt/filtering":[{"name":"dataSource","description":"<p>Defines the data source for the Gantt chart, which is used to render rows and tasks.\nThe <code>dataSource</code> can be an array of JavaScript objects, an instance of <code>DataManager</code>, or a single object.\nThe array of objects should contain the task data with properties such as <code>TaskID</code>, <code>TaskName</code>, <code>StartDate</code>, <code>EndDate</code>, etc.\nThis allows dynamic binding of tasks and their relationships (e.g., dependencies, subtasks, progress) to the Gantt chart.</p>\n","type":"Object[]|DataManager|Object","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#datasource"},{"name":"dateFormat","description":"<p>Specifies the date format for displaying dates in the Gantt chart, including in tooltips and grid cells.\nBy default, the format is determined based on the current culture/locale settings.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#dateformat"},{"name":"taskFields","description":"<p>Defines the mapping properties to extract task-related values, such as ID, start date, end date, duration, and progress, from the data source.\nThis allows the Gantt chart to properly map the provided data to the corresponding task fields and render them accordingly.</p>\n","type":"TaskFieldsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#taskfields"},{"name":"columns","description":"<p>Defines the collection of columns displayed in the Gantt chart grid.\nIf the <code>columns</code> declaration is empty, the columns are automatically populated based on the <code>taskSettings</code> values.</p>\n","type":"Column[]|string[]|ColumnModel[]","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#columns"},{"name":"treeColumnIndex","description":"<p>To define expander column index in Grid.</p>\n","type":"number","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#treecolumnindex"},{"name":"height","description":"<p>Defines the height of the Gantt component container.\nThe <code>height</code> property can be set to a specific value (in pixels or percentage) or set to 'auto' for automatic height adjustment based on content.</p>\n","type":"number|string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#height"},{"name":"timelineSettings","description":"<p>Configures timeline settings of Gantt.\nDefines default timeline modes or customized top tier mode and bottom tier mode or single tier only.</p>\n","type":"TimelineSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#timelinesettings"},{"name":"labelSettings","description":"<p>Configures the labels displayed on the right, left, and inside the taskbars in the Gantt chart.</p>\n","type":"LabelSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#labelsettings"},{"name":"toolbar","description":"<p><code>toolbar</code> defines the toolbar items of the Gantt.\nIt contains built-in and custom toolbar items.\nIf an array value is assigned, it is considered as the list of built-in and custom toolbar items in the Gantt's toolbar.\n&lt;br&gt;&lt;br&gt;\nThe available built-in toolbar items are:</p>\n<ul>\n<li>Add: Adds a new record.</li>\n<li>Edit: Edits the selected task.</li>\n<li>Update: Updates the edited task.</li>\n<li>Delete: Deletes the selected task.</li>\n<li>Cancel: Cancels the edit state.</li>\n<li>Search: Searches tasks by the given key.</li>\n<li>ExpandAll: Expands all the task of Gantt.</li>\n<li>CollapseAll: Collapses all the task of Gantt.</li>\n<li>PrevTimeSpan: Extends timeline with one unit before the timeline start date.</li>\n<li>NextTimeSpan: Extends timeline with one unit after the timeline finish date.</li>\n<li>ZoomIn: ZoomIn the Gantt control.</li>\n<li>ZoomOut: ZoomOut the Gantt control.</li>\n<li>ZoomToFit: Display the all tasks within the viewable Gantt chart.</li>\n<li>ExcelExport: To export in Excel format.</li>\n<li>CsvExport : To export in CSV format.</li>\n<li>Indent: To indent a task to one level.</li>\n<li>Outdent: To outdent a task from one level.</li>\n</ul>\n","type":"[]","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#toolbar"},{"name":"allowFiltering","description":"<p>Enables or disables filtering functionality in the Gantt chart.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#allowfiltering"},{"name":"includeWeekend","description":"<p>Defines whether weekend days should be considered as working days in the Gantt chart.\nWhen <code>includeWeekend</code> set to true, weekends (Saturday and Sunday) are treated as regular working days.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#includeweekend"},{"name":"timelineSettings","description":"<p>Configures timeline settings of Gantt.\nDefines default timeline modes or customized top tier mode and bottom tier mode or single tier only.</p>\n","type":"TimelineSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#timelinesettings"},{"name":"splitterSettings","description":"<p>Configures the splitter settings for the Gantt chart.</p>\n","type":"SplitterSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#splittersettings"},{"name":"durationUnit","description":"<p><code>durationUnit</code> Specifies the duration unit for each task. The available options are:</p>\n<ul>\n<li><code>day</code>: Sets the duration unit to day.</li>\n<li><code>hour</code>: Sets the duration unit to hour.</li>\n<li><code>minute</code>: Sets the duration unit to minute.</li>\n</ul>\n","type":"DurationUnit","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#durationunit"},{"name":"dayWorkingTime","description":"<p>Defines the customized working time for the project.\nThis helps in accurately planning tasks based on available working hours and ensures proper task scheduling.</p>\n","type":"DayWorkingTimeModel[]","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#dayworkingtime"},{"name":"projectStartDate","description":"<p>Defines the start date of the project. If the <code>projectStartDate</code> is not set, it will be automatically calculated based on the data source.\nThe date can be provided as a <code>Date</code> object or a string in a valid date format.</p>\n","type":"Date|string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#projectstartdate"},{"name":"projectEndDate","description":"<p>Defines the end date of the project. If the <code>projectEndDate</code> is not set, it will be automatically calculated based on the data source.\nThe date can be provided as a <code>Date</code> object or a string in a valid date format.</p>\n","type":"Date|string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#projectenddate"}],"gantt/advanced-filtering":[{"name":"dataSource","description":"<p>Defines the data source for the Gantt chart, which is used to render rows and tasks.\nThe <code>dataSource</code> can be an array of JavaScript objects, an instance of <code>DataManager</code>, or a single object.\nThe array of objects should contain the task data with properties such as <code>TaskID</code>, <code>TaskName</code>, <code>StartDate</code>, <code>EndDate</code>, etc.\nThis allows dynamic binding of tasks and their relationships (e.g., dependencies, subtasks, progress) to the Gantt chart.</p>\n","type":"Object[]|DataManager|Object","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#datasource"},{"name":"taskFields","description":"<p>Defines the mapping properties to extract task-related values, such as ID, start date, end date, duration, and progress, from the data source.\nThis allows the Gantt chart to properly map the provided data to the corresponding task fields and render them accordingly.</p>\n","type":"TaskFieldsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#taskfields"},{"name":"columns","description":"<p>Defines the collection of columns displayed in the Gantt chart grid.\nIf the <code>columns</code> declaration is empty, the columns are automatically populated based on the <code>taskSettings</code> values.</p>\n","type":"Column[]|string[]|ColumnModel[]","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#columns"},{"name":"treeColumnIndex","description":"<p>To define expander column index in Grid.</p>\n","type":"number","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#treecolumnindex"},{"name":"height","description":"<p>Defines the height of the Gantt component container.\nThe <code>height</code> property can be set to a specific value (in pixels or percentage) or set to 'auto' for automatic height adjustment based on content.</p>\n","type":"number|string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#height"},{"name":"timelineSettings","description":"<p>Configures timeline settings of Gantt.\nDefines default timeline modes or customized top tier mode and bottom tier mode or single tier only.</p>\n","type":"TimelineSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#timelinesettings"},{"name":"labelSettings","description":"<p>Configures the labels displayed on the right, left, and inside the taskbars in the Gantt chart.</p>\n","type":"LabelSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#labelsettings"},{"name":"toolbar","description":"<p><code>toolbar</code> defines the toolbar items of the Gantt.\nIt contains built-in and custom toolbar items.\nIf an array value is assigned, it is considered as the list of built-in and custom toolbar items in the Gantt's toolbar.\n&lt;br&gt;&lt;br&gt;\nThe available built-in toolbar items are:</p>\n<ul>\n<li>Add: Adds a new record.</li>\n<li>Edit: Edits the selected task.</li>\n<li>Update: Updates the edited task.</li>\n<li>Delete: Deletes the selected task.</li>\n<li>Cancel: Cancels the edit state.</li>\n<li>Search: Searches tasks by the given key.</li>\n<li>ExpandAll: Expands all the task of Gantt.</li>\n<li>CollapseAll: Collapses all the task of Gantt.</li>\n<li>PrevTimeSpan: Extends timeline with one unit before the timeline start date.</li>\n<li>NextTimeSpan: Extends timeline with one unit after the timeline finish date.</li>\n<li>ZoomIn: ZoomIn the Gantt control.</li>\n<li>ZoomOut: ZoomOut the Gantt control.</li>\n<li>ZoomToFit: Display the all tasks within the viewable Gantt chart.</li>\n<li>ExcelExport: To export in Excel format.</li>\n<li>CsvExport : To export in CSV format.</li>\n<li>Indent: To indent a task to one level.</li>\n<li>Outdent: To outdent a task from one level.</li>\n</ul>\n","type":"[]","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#toolbar"},{"name":"allowFiltering","description":"<p>Enables or disables filtering functionality in the Gantt chart.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#allowfiltering"},{"name":"includeWeekend","description":"<p>Defines whether weekend days should be considered as working days in the Gantt chart.\nWhen <code>includeWeekend</code> set to true, weekends (Saturday and Sunday) are treated as regular working days.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#includeweekend"},{"name":"splitterSettings","description":"<p>Configures the splitter settings for the Gantt chart.</p>\n","type":"SplitterSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#splittersettings"},{"name":"projectStartDate","description":"<p>Defines the start date of the project. If the <code>projectStartDate</code> is not set, it will be automatically calculated based on the data source.\nThe date can be provided as a <code>Date</code> object or a string in a valid date format.</p>\n","type":"Date|string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#projectstartdate"},{"name":"projectEndDate","description":"<p>Defines the end date of the project. If the <code>projectEndDate</code> is not set, it will be automatically calculated based on the data source.\nThe date can be provided as a <code>Date</code> object or a string in a valid date format.</p>\n","type":"Date|string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#projectenddate"}],"gantt/exporting":[{"name":"dataSource","description":"<p>Defines the data source for the Gantt chart, which is used to render rows and tasks.\nThe <code>dataSource</code> can be an array of JavaScript objects, an instance of <code>DataManager</code>, or a single object.\nThe array of objects should contain the task data with properties such as <code>TaskID</code>, <code>TaskName</code>, <code>StartDate</code>, <code>EndDate</code>, etc.\nThis allows dynamic binding of tasks and their relationships (e.g., dependencies, subtasks, progress) to the Gantt chart.</p>\n","type":"Object[]|DataManager|Object","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#datasource"},{"name":"dateFormat","description":"<p>Specifies the date format for displaying dates in the Gantt chart, including in tooltips and grid cells.\nBy default, the format is determined based on the current culture/locale settings.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#dateformat"},{"name":"height","description":"<p>Defines the height of the Gantt component container.\nThe <code>height</code> property can be set to a specific value (in pixels or percentage) or set to 'auto' for automatic height adjustment based on content.</p>\n","type":"number|string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#height"},{"name":"taskFields","description":"<p>Defines the mapping properties to extract task-related values, such as ID, start date, end date, duration, and progress, from the data source.\nThis allows the Gantt chart to properly map the provided data to the corresponding task fields and render them accordingly.</p>\n","type":"TaskFieldsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#taskfields"},{"name":"toolbar","description":"<p><code>toolbar</code> defines the toolbar items of the Gantt.\nIt contains built-in and custom toolbar items.\nIf an array value is assigned, it is considered as the list of built-in and custom toolbar items in the Gantt's toolbar.\n&lt;br&gt;&lt;br&gt;\nThe available built-in toolbar items are:</p>\n<ul>\n<li>Add: Adds a new record.</li>\n<li>Edit: Edits the selected task.</li>\n<li>Update: Updates the edited task.</li>\n<li>Delete: Deletes the selected task.</li>\n<li>Cancel: Cancels the edit state.</li>\n<li>Search: Searches tasks by the given key.</li>\n<li>ExpandAll: Expands all the task of Gantt.</li>\n<li>CollapseAll: Collapses all the task of Gantt.</li>\n<li>PrevTimeSpan: Extends timeline with one unit before the timeline start date.</li>\n<li>NextTimeSpan: Extends timeline with one unit after the timeline finish date.</li>\n<li>ZoomIn: ZoomIn the Gantt control.</li>\n<li>ZoomOut: ZoomOut the Gantt control.</li>\n<li>ZoomToFit: Display the all tasks within the viewable Gantt chart.</li>\n<li>ExcelExport: To export in Excel format.</li>\n<li>CsvExport : To export in CSV format.</li>\n<li>Indent: To indent a task to one level.</li>\n<li>Outdent: To outdent a task from one level.</li>\n</ul>\n","type":"[]","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#toolbar"},{"name":"treeColumnIndex","description":"<p>To define expander column index in Grid.</p>\n","type":"number","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#treecolumnindex"},{"name":"allowSelection","description":"<p>If <code>allowSelection</code> is set to true, it enables row selection in the Gantt chart, and the selected rows are highlighted.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#allowselection"},{"name":"allowExcelExport","description":"<p>If <code>allowExcelExport</code> set to true, then it will allow the user to export Gantt chart to Excel and CSV file.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#allowexcelexport"},{"name":"gridLines","description":"<p>Configures the grid lines displayed in the TreeGrid and Gantt chart.\nThe <code>gridLines</code> property allows customization of the type of grid lines to be shown, either horizontal, vertical, or both.</p>\n","type":"GridLine","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#gridlines"},{"name":"resourceFields","description":"<p>Defines the mapping properties to extract resource values, such as <code>id</code>, <code>name</code>, <code>unit</code>, and <code>group</code> from the resource collection in the Gantt chart.\nThis helps to map data from a custom resource collection to the appropriate fields for resource allocation.</p>\n","type":"ResourceFieldsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#resourcefields"},{"name":"resources","description":"<p>Defines the collection of resources assigned to the project.</p>\n","type":"object[]","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#resources"},{"name":"highlightWeekends","description":"<p>If <code>highlightWeekends</code> is set to true, it highlights all weekend days in the week-day timeline mode.\nThis makes weekends visually distinct in the timeline view.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#highlightweekends"},{"name":"timelineSettings","description":"<p>Configures timeline settings of Gantt.\nDefines default timeline modes or customized top tier mode and bottom tier mode or single tier only.</p>\n","type":"TimelineSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#timelinesettings"},{"name":"labelSettings","description":"<p>Configures the labels displayed on the right, left, and inside the taskbars in the Gantt chart.</p>\n","type":"LabelSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#labelsettings"},{"name":"projectStartDate","description":"<p>Defines the start date of the project. If the <code>projectStartDate</code> is not set, it will be automatically calculated based on the data source.\nThe date can be provided as a <code>Date</code> object or a string in a valid date format.</p>\n","type":"Date|string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#projectstartdate"},{"name":"projectEndDate","description":"<p>Defines the end date of the project. If the <code>projectEndDate</code> is not set, it will be automatically calculated based on the data source.\nThe date can be provided as a <code>Date</code> object or a string in a valid date format.</p>\n","type":"Date|string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#projectenddate"},{"name":"splitterSettings","description":"<p>Configures the splitter settings for the Gantt chart.</p>\n","type":"SplitterSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#splittersettings"}],"gantt/advanced-exporting":[{"name":"dataSource","description":"<p>Defines the data source for the Gantt chart, which is used to render rows and tasks.\nThe <code>dataSource</code> can be an array of JavaScript objects, an instance of <code>DataManager</code>, or a single object.\nThe array of objects should contain the task data with properties such as <code>TaskID</code>, <code>TaskName</code>, <code>StartDate</code>, <code>EndDate</code>, etc.\nThis allows dynamic binding of tasks and their relationships (e.g., dependencies, subtasks, progress) to the Gantt chart.</p>\n","type":"Object[]|DataManager|Object","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#datasource"},{"name":"dateFormat","description":"<p>Specifies the date format for displaying dates in the Gantt chart, including in tooltips and grid cells.\nBy default, the format is determined based on the current culture/locale settings.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#dateformat"},{"name":"height","description":"<p>Defines the height of the Gantt component container.\nThe <code>height</code> property can be set to a specific value (in pixels or percentage) or set to 'auto' for automatic height adjustment based on content.</p>\n","type":"number|string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#height"},{"name":"taskFields","description":"<p>Defines the mapping properties to extract task-related values, such as ID, start date, end date, duration, and progress, from the data source.\nThis allows the Gantt chart to properly map the provided data to the corresponding task fields and render them accordingly.</p>\n","type":"TaskFieldsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#taskfields"},{"name":"toolbar","description":"<p><code>toolbar</code> defines the toolbar items of the Gantt.\nIt contains built-in and custom toolbar items.\nIf an array value is assigned, it is considered as the list of built-in and custom toolbar items in the Gantt's toolbar.\n&lt;br&gt;&lt;br&gt;\nThe available built-in toolbar items are:</p>\n<ul>\n<li>Add: Adds a new record.</li>\n<li>Edit: Edits the selected task.</li>\n<li>Update: Updates the edited task.</li>\n<li>Delete: Deletes the selected task.</li>\n<li>Cancel: Cancels the edit state.</li>\n<li>Search: Searches tasks by the given key.</li>\n<li>ExpandAll: Expands all the task of Gantt.</li>\n<li>CollapseAll: Collapses all the task of Gantt.</li>\n<li>PrevTimeSpan: Extends timeline with one unit before the timeline start date.</li>\n<li>NextTimeSpan: Extends timeline with one unit after the timeline finish date.</li>\n<li>ZoomIn: ZoomIn the Gantt control.</li>\n<li>ZoomOut: ZoomOut the Gantt control.</li>\n<li>ZoomToFit: Display the all tasks within the viewable Gantt chart.</li>\n<li>ExcelExport: To export in Excel format.</li>\n<li>CsvExport : To export in CSV format.</li>\n<li>Indent: To indent a task to one level.</li>\n<li>Outdent: To outdent a task from one level.</li>\n</ul>\n","type":"[]","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#toolbar"},{"name":"treeColumnIndex","description":"<p>To define expander column index in Grid.</p>\n","type":"number","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#treecolumnindex"},{"name":"allowSelection","description":"<p>If <code>allowSelection</code> is set to true, it enables row selection in the Gantt chart, and the selected rows are highlighted.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#allowselection"},{"name":"allowExcelExport","description":"<p>If <code>allowExcelExport</code> set to true, then it will allow the user to export Gantt chart to Excel and CSV file.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#allowexcelexport"},{"name":"gridLines","description":"<p>Configures the grid lines displayed in the TreeGrid and Gantt chart.\nThe <code>gridLines</code> property allows customization of the type of grid lines to be shown, either horizontal, vertical, or both.</p>\n","type":"GridLine","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#gridlines"},{"name":"resourceFields","description":"<p>Defines the mapping properties to extract resource values, such as <code>id</code>, <code>name</code>, <code>unit</code>, and <code>group</code> from the resource collection in the Gantt chart.\nThis helps to map data from a custom resource collection to the appropriate fields for resource allocation.</p>\n","type":"ResourceFieldsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#resourcefields"},{"name":"resources","description":"<p>Defines the collection of resources assigned to the project.</p>\n","type":"object[]","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#resources"},{"name":"highlightWeekends","description":"<p>If <code>highlightWeekends</code> is set to true, it highlights all weekend days in the week-day timeline mode.\nThis makes weekends visually distinct in the timeline view.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#highlightweekends"},{"name":"timelineSettings","description":"<p>Configures timeline settings of Gantt.\nDefines default timeline modes or customized top tier mode and bottom tier mode or single tier only.</p>\n","type":"TimelineSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#timelinesettings"},{"name":"labelSettings","description":"<p>Configures the labels displayed on the right, left, and inside the taskbars in the Gantt chart.</p>\n","type":"LabelSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#labelsettings"},{"name":"projectStartDate","description":"<p>Defines the start date of the project. If the <code>projectStartDate</code> is not set, it will be automatically calculated based on the data source.\nThe date can be provided as a <code>Date</code> object or a string in a valid date format.</p>\n","type":"Date|string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#projectstartdate"},{"name":"projectEndDate","description":"<p>Defines the end date of the project. If the <code>projectEndDate</code> is not set, it will be automatically calculated based on the data source.\nThe date can be provided as a <code>Date</code> object or a string in a valid date format.</p>\n","type":"Date|string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#projectenddate"},{"name":"splitterSettings","description":"<p>Configures the splitter settings for the Gantt chart.</p>\n","type":"SplitterSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#splittersettings"}],"gantt/selection":[{"name":"dataSource","description":"<p>Defines the data source for the Gantt chart, which is used to render rows and tasks.\nThe <code>dataSource</code> can be an array of JavaScript objects, an instance of <code>DataManager</code>, or a single object.\nThe array of objects should contain the task data with properties such as <code>TaskID</code>, <code>TaskName</code>, <code>StartDate</code>, <code>EndDate</code>, etc.\nThis allows dynamic binding of tasks and their relationships (e.g., dependencies, subtasks, progress) to the Gantt chart.</p>\n","type":"Object[]|DataManager|Object","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#datasource"},{"name":"height","description":"<p>Defines the height of the Gantt component container.\nThe <code>height</code> property can be set to a specific value (in pixels or percentage) or set to 'auto' for automatic height adjustment based on content.</p>\n","type":"number|string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#height"},{"name":"taskFields","description":"<p>Defines the mapping properties to extract task-related values, such as ID, start date, end date, duration, and progress, from the data source.\nThis allows the Gantt chart to properly map the provided data to the corresponding task fields and render them accordingly.</p>\n","type":"TaskFieldsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#taskfields"},{"name":"treeColumnIndex","description":"<p>To define expander column index in Grid.</p>\n","type":"number","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#treecolumnindex"},{"name":"allowSelection","description":"<p>If <code>allowSelection</code> is set to true, it enables row selection in the Gantt chart, and the selected rows are highlighted.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#allowselection"},{"name":"highlightWeekends","description":"<p>If <code>highlightWeekends</code> is set to true, it highlights all weekend days in the week-day timeline mode.\nThis makes weekends visually distinct in the timeline view.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#highlightweekends"},{"name":"labelSettings","description":"<p>Configures the labels displayed on the right, left, and inside the taskbars in the Gantt chart.</p>\n","type":"LabelSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#labelsettings"},{"name":"projectStartDate","description":"<p>Defines the start date of the project. If the <code>projectStartDate</code> is not set, it will be automatically calculated based on the data source.\nThe date can be provided as a <code>Date</code> object or a string in a valid date format.</p>\n","type":"Date|string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#projectstartdate"},{"name":"projectEndDate","description":"<p>Defines the end date of the project. If the <code>projectEndDate</code> is not set, it will be automatically calculated based on the data source.\nThe date can be provided as a <code>Date</code> object or a string in a valid date format.</p>\n","type":"Date|string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#projectenddate"},{"name":"selectionSettings","description":"<p>Configures the settings for selection in the Gantt chart.</p>\n","type":"SelectionSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#selectionsettings"},{"name":"splitterSettings","description":"<p>Configures the splitter settings for the Gantt chart.</p>\n","type":"SplitterSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#splittersettings"}],"gantt/context-menu":[{"name":"dataSource","description":"<p>Defines the data source for the Gantt chart, which is used to render rows and tasks.\nThe <code>dataSource</code> can be an array of JavaScript objects, an instance of <code>DataManager</code>, or a single object.\nThe array of objects should contain the task data with properties such as <code>TaskID</code>, <code>TaskName</code>, <code>StartDate</code>, <code>EndDate</code>, etc.\nThis allows dynamic binding of tasks and their relationships (e.g., dependencies, subtasks, progress) to the Gantt chart.</p>\n","type":"Object[]|DataManager|Object","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#datasource"},{"name":"taskFields","description":"<p>Defines the mapping properties to extract task-related values, such as ID, start date, end date, duration, and progress, from the data source.\nThis allows the Gantt chart to properly map the provided data to the corresponding task fields and render them accordingly.</p>\n","type":"TaskFieldsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#taskfields"},{"name":"toolbar","description":"<p><code>toolbar</code> defines the toolbar items of the Gantt.\nIt contains built-in and custom toolbar items.\nIf an array value is assigned, it is considered as the list of built-in and custom toolbar items in the Gantt's toolbar.\n&lt;br&gt;&lt;br&gt;\nThe available built-in toolbar items are:</p>\n<ul>\n<li>Add: Adds a new record.</li>\n<li>Edit: Edits the selected task.</li>\n<li>Update: Updates the edited task.</li>\n<li>Delete: Deletes the selected task.</li>\n<li>Cancel: Cancels the edit state.</li>\n<li>Search: Searches tasks by the given key.</li>\n<li>ExpandAll: Expands all the task of Gantt.</li>\n<li>CollapseAll: Collapses all the task of Gantt.</li>\n<li>PrevTimeSpan: Extends timeline with one unit before the timeline start date.</li>\n<li>NextTimeSpan: Extends timeline with one unit after the timeline finish date.</li>\n<li>ZoomIn: ZoomIn the Gantt control.</li>\n<li>ZoomOut: ZoomOut the Gantt control.</li>\n<li>ZoomToFit: Display the all tasks within the viewable Gantt chart.</li>\n<li>ExcelExport: To export in Excel format.</li>\n<li>CsvExport : To export in CSV format.</li>\n<li>Indent: To indent a task to one level.</li>\n<li>Outdent: To outdent a task from one level.</li>\n</ul>\n","type":"[]","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#toolbar"},{"name":"height","description":"<p>Defines the height of the Gantt component container.\nThe <code>height</code> property can be set to a specific value (in pixels or percentage) or set to 'auto' for automatic height adjustment based on content.</p>\n","type":"number|string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#height"},{"name":"labelSettings","description":"<p>Configures the labels displayed on the right, left, and inside the taskbars in the Gantt chart.</p>\n","type":"LabelSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#labelsettings"},{"name":"projectStartDate","description":"<p>Defines the start date of the project. If the <code>projectStartDate</code> is not set, it will be automatically calculated based on the data source.\nThe date can be provided as a <code>Date</code> object or a string in a valid date format.</p>\n","type":"Date|string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#projectstartdate"},{"name":"projectEndDate","description":"<p>Defines the end date of the project. If the <code>projectEndDate</code> is not set, it will be automatically calculated based on the data source.\nThe date can be provided as a <code>Date</code> object or a string in a valid date format.</p>\n","type":"Date|string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#projectenddate"},{"name":"allowResizing","description":"<p>Enables column resizing in the Gantt chart when <code>allowResizing</code> is set to true.\nWhen enabled, users can adjust the width of columns by dragging the column borders.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#allowresizing"},{"name":"allowSorting","description":"<p>If <code>allowSorting</code> is set to true, it enables sorting of Gantt chart tasks when the column header is clicked.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#allowsorting"},{"name":"contextMenuOpen","description":"<p>Triggers before context menu opens.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#contextmenuopen"},{"name":"contextMenuClick","description":"<p>Triggers when click on context menu.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#contextmenuclick"},{"name":"eventMarkers","description":"<p>Defines the events and milestones along the project timeline.\nThese event markers indicate significant events or milestones throughout the project's duration.</p>\n","type":"EventMarkerModel[]","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#eventmarkers"},{"name":"editDialogFields","description":"<p>Defines the tabs and fields to be displayed in the edit dialog.\nIf not specified, the fields will be derived from the <code>taskSettings</code> and <code>columns</code> values.</p>\n","type":"EditDialogFieldSettingsModel[]","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#editdialogfields"}],"gantt/drag-and-drop":[{"name":"dataSource","description":"<p>Defines the data source for the Gantt chart, which is used to render rows and tasks.\nThe <code>dataSource</code> can be an array of JavaScript objects, an instance of <code>DataManager</code>, or a single object.\nThe array of objects should contain the task data with properties such as <code>TaskID</code>, <code>TaskName</code>, <code>StartDate</code>, <code>EndDate</code>, etc.\nThis allows dynamic binding of tasks and their relationships (e.g., dependencies, subtasks, progress) to the Gantt chart.</p>\n","type":"Object[]|DataManager|Object","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#datasource"},{"name":"taskFields","description":"<p>Defines the mapping properties to extract task-related values, such as ID, start date, end date, duration, and progress, from the data source.\nThis allows the Gantt chart to properly map the provided data to the corresponding task fields and render them accordingly.</p>\n","type":"TaskFieldsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#taskfields"},{"name":"columns","description":"<p>Defines the collection of columns displayed in the Gantt chart grid.\nIf the <code>columns</code> declaration is empty, the columns are automatically populated based on the <code>taskSettings</code> values.</p>\n","type":"Column[]|string[]|ColumnModel[]","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#columns"},{"name":"editSettings","description":"<p>Configures the edit settings for the Gantt chart, such as enabling or disabling task modifications.</p>\n","type":"EditSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#editsettings"},{"name":"treeColumnIndex","description":"<p>To define expander column index in Grid.</p>\n","type":"number","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#treecolumnindex"},{"name":"columns","description":"<p>Defines the collection of columns displayed in the Gantt chart grid.\nIf the <code>columns</code> declaration is empty, the columns are automatically populated based on the <code>taskSettings</code> values.</p>\n","type":"Column[]|string[]|ColumnModel[]","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#columns"},{"name":"height","description":"<p>Defines the height of the Gantt component container.\nThe <code>height</code> property can be set to a specific value (in pixels or percentage) or set to 'auto' for automatic height adjustment based on content.</p>\n","type":"number|string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#height"},{"name":"highlightWeekends","description":"<p>If <code>highlightWeekends</code> is set to true, it highlights all weekend days in the week-day timeline mode.\nThis makes weekends visually distinct in the timeline view.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#highlightweekends"},{"name":"allowRowDragAndDrop","description":"<p>If <code>allowRowDragAndDrop</code> set to true, then it will allow the user to perform row drag and drop action in Gantt chart.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#allowrowdraganddrop"},{"name":"labelSettings","description":"<p>Configures the labels displayed on the right, left, and inside the taskbars in the Gantt chart.</p>\n","type":"LabelSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#labelsettings"},{"name":"projectStartDate","description":"<p>Defines the start date of the project. If the <code>projectStartDate</code> is not set, it will be automatically calculated based on the data source.\nThe date can be provided as a <code>Date</code> object or a string in a valid date format.</p>\n","type":"Date|string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#projectstartdate"},{"name":"projectEndDate","description":"<p>Defines the end date of the project. If the <code>projectEndDate</code> is not set, it will be automatically calculated based on the data source.\nThe date can be provided as a <code>Date</code> object or a string in a valid date format.</p>\n","type":"Date|string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#projectenddate"},{"name":"selectionSettings","description":"<p>Configures the settings for selection in the Gantt chart.</p>\n","type":"SelectionSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#selectionsettings"}],"gantt/split-tasks":[{"name":"dataSource","description":"<p>Defines the data source for the Gantt chart, which is used to render rows and tasks.\nThe <code>dataSource</code> can be an array of JavaScript objects, an instance of <code>DataManager</code>, or a single object.\nThe array of objects should contain the task data with properties such as <code>TaskID</code>, <code>TaskName</code>, <code>StartDate</code>, <code>EndDate</code>, etc.\nThis allows dynamic binding of tasks and their relationships (e.g., dependencies, subtasks, progress) to the Gantt chart.</p>\n","type":"Object[]|DataManager|Object","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#datasource"},{"name":"taskFields","description":"<p>Defines the mapping properties to extract task-related values, such as ID, start date, end date, duration, and progress, from the data source.\nThis allows the Gantt chart to properly map the provided data to the corresponding task fields and render them accordingly.</p>\n","type":"TaskFieldsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#taskfields"},{"name":"editSettings","description":"<p>Configures the edit settings for the Gantt chart, such as enabling or disabling task modifications.</p>\n","type":"EditSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#editsettings"},{"name":"treeColumnIndex","description":"<p>To define expander column index in Grid.</p>\n","type":"number","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#treecolumnindex"},{"name":"height","description":"<p>Defines the height of the Gantt component container.\nThe <code>height</code> property can be set to a specific value (in pixels or percentage) or set to 'auto' for automatic height adjustment based on content.</p>\n","type":"number|string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#height"},{"name":"highlightWeekends","description":"<p>If <code>highlightWeekends</code> is set to true, it highlights all weekend days in the week-day timeline mode.\nThis makes weekends visually distinct in the timeline view.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#highlightweekends"},{"name":"projectStartDate","description":"<p>Defines the start date of the project. If the <code>projectStartDate</code> is not set, it will be automatically calculated based on the data source.\nThe date can be provided as a <code>Date</code> object or a string in a valid date format.</p>\n","type":"Date|string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#projectstartdate"},{"name":"projectEndDate","description":"<p>Defines the end date of the project. If the <code>projectEndDate</code> is not set, it will be automatically calculated based on the data source.\nThe date can be provided as a <code>Date</code> object or a string in a valid date format.</p>\n","type":"Date|string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#projectenddate"},{"name":"selectionSettings","description":"<p>Configures the settings for selection in the Gantt chart.</p>\n","type":"SelectionSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#selectionsettings"},{"name":"workUnit","description":"<p><code>workUnit</code> Specifies the work unit for each tasks whether day or hour or minute.</p>\n<ul>\n<li><code>day</code>: Sets the work unit as day.</li>\n<li><code>hour</code>: Sets the work unit as hour.</li>\n<li><code>minute</code>: Sets the work unit as minute.</li>\n</ul>\n","type":"WorkUnit","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#workunit"},{"name":"enableContextMenu","description":"<p>If <code>enableContextMenu</code> is set to true, enables the context menu in the Gantt chart.\nThe context menu provides additional actions that can be accessed by right-clicking on Gantt chart elements</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#enablecontextmenu"}],"gantt/grid-lines":[{"name":"dataSource","description":"<p>Defines the data source for the Gantt chart, which is used to render rows and tasks.\nThe <code>dataSource</code> can be an array of JavaScript objects, an instance of <code>DataManager</code>, or a single object.\nThe array of objects should contain the task data with properties such as <code>TaskID</code>, <code>TaskName</code>, <code>StartDate</code>, <code>EndDate</code>, etc.\nThis allows dynamic binding of tasks and their relationships (e.g., dependencies, subtasks, progress) to the Gantt chart.</p>\n","type":"Object[]|DataManager|Object","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#datasource"},{"name":"height","description":"<p>Defines the height of the Gantt component container.\nThe <code>height</code> property can be set to a specific value (in pixels or percentage) or set to 'auto' for automatic height adjustment based on content.</p>\n","type":"number|string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#height"},{"name":"taskFields","description":"<p>Defines the mapping properties to extract task-related values, such as ID, start date, end date, duration, and progress, from the data source.\nThis allows the Gantt chart to properly map the provided data to the corresponding task fields and render them accordingly.</p>\n","type":"TaskFieldsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#taskfields"},{"name":"columns","description":"<p>Defines the collection of columns displayed in the Gantt chart grid.\nIf the <code>columns</code> declaration is empty, the columns are automatically populated based on the <code>taskSettings</code> values.</p>\n","type":"Column[]|string[]|ColumnModel[]","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#columns"},{"name":"treeColumnIndex","description":"<p>To define expander column index in Grid.</p>\n","type":"number","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#treecolumnindex"},{"name":"gridLines","description":"<p>Configures the grid lines displayed in the TreeGrid and Gantt chart.\nThe <code>gridLines</code> property allows customization of the type of grid lines to be shown, either horizontal, vertical, or both.</p>\n","type":"GridLine","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#gridlines"},{"name":"highlightWeekends","description":"<p>If <code>highlightWeekends</code> is set to true, it highlights all weekend days in the week-day timeline mode.\nThis makes weekends visually distinct in the timeline view.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#highlightweekends"},{"name":"labelSettings","description":"<p>Configures the labels displayed on the right, left, and inside the taskbars in the Gantt chart.</p>\n","type":"LabelSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#labelsettings"},{"name":"projectStartDate","description":"<p>Defines the start date of the project. If the <code>projectStartDate</code> is not set, it will be automatically calculated based on the data source.\nThe date can be provided as a <code>Date</code> object or a string in a valid date format.</p>\n","type":"Date|string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#projectstartdate"},{"name":"projectEndDate","description":"<p>Defines the end date of the project. If the <code>projectEndDate</code> is not set, it will be automatically calculated based on the data source.\nThe date can be provided as a <code>Date</code> object or a string in a valid date format.</p>\n","type":"Date|string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#projectenddate"},{"name":"splitterSettings","description":"<p>Configures the splitter settings for the Gantt chart.</p>\n","type":"SplitterSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#splittersettings"}],"gantt/events":[{"name":"dataSource","description":"<p>Defines the data source for the Gantt chart, which is used to render rows and tasks.\nThe <code>dataSource</code> can be an array of JavaScript objects, an instance of <code>DataManager</code>, or a single object.\nThe array of objects should contain the task data with properties such as <code>TaskID</code>, <code>TaskName</code>, <code>StartDate</code>, <code>EndDate</code>, etc.\nThis allows dynamic binding of tasks and their relationships (e.g., dependencies, subtasks, progress) to the Gantt chart.</p>\n","type":"Object[]|DataManager|Object","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#datasource"},{"name":"height","description":"<p>Defines the height of the Gantt component container.\nThe <code>height</code> property can be set to a specific value (in pixels or percentage) or set to 'auto' for automatic height adjustment based on content.</p>\n","type":"number|string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#height"},{"name":"taskFields","description":"<p>Defines the mapping properties to extract task-related values, such as ID, start date, end date, duration, and progress, from the data source.\nThis allows the Gantt chart to properly map the provided data to the corresponding task fields and render them accordingly.</p>\n","type":"TaskFieldsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#taskfields"},{"name":"toolbar","description":"<p><code>toolbar</code> defines the toolbar items of the Gantt.\nIt contains built-in and custom toolbar items.\nIf an array value is assigned, it is considered as the list of built-in and custom toolbar items in the Gantt's toolbar.\n&lt;br&gt;&lt;br&gt;\nThe available built-in toolbar items are:</p>\n<ul>\n<li>Add: Adds a new record.</li>\n<li>Edit: Edits the selected task.</li>\n<li>Update: Updates the edited task.</li>\n<li>Delete: Deletes the selected task.</li>\n<li>Cancel: Cancels the edit state.</li>\n<li>Search: Searches tasks by the given key.</li>\n<li>ExpandAll: Expands all the task of Gantt.</li>\n<li>CollapseAll: Collapses all the task of Gantt.</li>\n<li>PrevTimeSpan: Extends timeline with one unit before the timeline start date.</li>\n<li>NextTimeSpan: Extends timeline with one unit after the timeline finish date.</li>\n<li>ZoomIn: ZoomIn the Gantt control.</li>\n<li>ZoomOut: ZoomOut the Gantt control.</li>\n<li>ZoomToFit: Display the all tasks within the viewable Gantt chart.</li>\n<li>ExcelExport: To export in Excel format.</li>\n<li>CsvExport : To export in CSV format.</li>\n<li>Indent: To indent a task to one level.</li>\n<li>Outdent: To outdent a task from one level.</li>\n</ul>\n","type":"[]","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#toolbar"},{"name":"treeColumnIndex","description":"<p>To define expander column index in Grid.</p>\n","type":"number","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#treecolumnindex"},{"name":"allowSelection","description":"<p>If <code>allowSelection</code> is set to true, it enables row selection in the Gantt chart, and the selected rows are highlighted.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#allowselection"},{"name":"highlightWeekends","description":"<p>If <code>highlightWeekends</code> is set to true, it highlights all weekend days in the week-day timeline mode.\nThis makes weekends visually distinct in the timeline view.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#highlightweekends"},{"name":"labelSettings","description":"<p>Configures the labels displayed on the right, left, and inside the taskbars in the Gantt chart.</p>\n","type":"LabelSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#labelsettings"},{"name":"projectStartDate","description":"<p>Defines the start date of the project. If the <code>projectStartDate</code> is not set, it will be automatically calculated based on the data source.\nThe date can be provided as a <code>Date</code> object or a string in a valid date format.</p>\n","type":"Date|string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#projectstartdate"},{"name":"projectEndDate","description":"<p>Defines the end date of the project. If the <code>projectEndDate</code> is not set, it will be automatically calculated based on the data source.\nThe date can be provided as a <code>Date</code> object or a string in a valid date format.</p>\n","type":"Date|string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#projectenddate"},{"name":"toolbarClick","description":"<p>Triggers when toolbar item was clicked.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#toolbarclick"}],"gantt/keyboard-interactions":[{"name":"dataSource","description":"<p>Defines the data source for the Gantt chart, which is used to render rows and tasks.\nThe <code>dataSource</code> can be an array of JavaScript objects, an instance of <code>DataManager</code>, or a single object.\nThe array of objects should contain the task data with properties such as <code>TaskID</code>, <code>TaskName</code>, <code>StartDate</code>, <code>EndDate</code>, etc.\nThis allows dynamic binding of tasks and their relationships (e.g., dependencies, subtasks, progress) to the Gantt chart.</p>\n","type":"Object[]|DataManager|Object","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#datasource"},{"name":"height","description":"<p>Defines the height of the Gantt component container.\nThe <code>height</code> property can be set to a specific value (in pixels or percentage) or set to 'auto' for automatic height adjustment based on content.</p>\n","type":"number|string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#height"},{"name":"taskFields","description":"<p>Defines the mapping properties to extract task-related values, such as ID, start date, end date, duration, and progress, from the data source.\nThis allows the Gantt chart to properly map the provided data to the corresponding task fields and render them accordingly.</p>\n","type":"TaskFieldsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#taskfields"},{"name":"toolbar","description":"<p><code>toolbar</code> defines the toolbar items of the Gantt.\nIt contains built-in and custom toolbar items.\nIf an array value is assigned, it is considered as the list of built-in and custom toolbar items in the Gantt's toolbar.\n&lt;br&gt;&lt;br&gt;\nThe available built-in toolbar items are:</p>\n<ul>\n<li>Add: Adds a new record.</li>\n<li>Edit: Edits the selected task.</li>\n<li>Update: Updates the edited task.</li>\n<li>Delete: Deletes the selected task.</li>\n<li>Cancel: Cancels the edit state.</li>\n<li>Search: Searches tasks by the given key.</li>\n<li>ExpandAll: Expands all the task of Gantt.</li>\n<li>CollapseAll: Collapses all the task of Gantt.</li>\n<li>PrevTimeSpan: Extends timeline with one unit before the timeline start date.</li>\n<li>NextTimeSpan: Extends timeline with one unit after the timeline finish date.</li>\n<li>ZoomIn: ZoomIn the Gantt control.</li>\n<li>ZoomOut: ZoomOut the Gantt control.</li>\n<li>ZoomToFit: Display the all tasks within the viewable Gantt chart.</li>\n<li>ExcelExport: To export in Excel format.</li>\n<li>CsvExport : To export in CSV format.</li>\n<li>Indent: To indent a task to one level.</li>\n<li>Outdent: To outdent a task from one level.</li>\n</ul>\n","type":"[]","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#toolbar"},{"name":"allowKeyboard","description":"<p>Enables or disables keyboard interactions in the Gantt chart.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#allowkeyboard"},{"name":"columns","description":"<p>Defines the collection of columns displayed in the Gantt chart grid.\nIf the <code>columns</code> declaration is empty, the columns are automatically populated based on the <code>taskSettings</code> values.</p>\n","type":"Column[]|string[]|ColumnModel[]","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#columns"},{"name":"editSettings","description":"<p>Configures the edit settings for the Gantt chart, such as enabling or disabling task modifications.</p>\n","type":"EditSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#editsettings"},{"name":"treeColumnIndex","description":"<p>To define expander column index in Grid.</p>\n","type":"number","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#treecolumnindex"},{"name":"highlightWeekends","description":"<p>If <code>highlightWeekends</code> is set to true, it highlights all weekend days in the week-day timeline mode.\nThis makes weekends visually distinct in the timeline view.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#highlightweekends"},{"name":"labelSettings","description":"<p>Configures the labels displayed on the right, left, and inside the taskbars in the Gantt chart.</p>\n","type":"LabelSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#labelsettings"},{"name":"projectStartDate","description":"<p>Defines the start date of the project. If the <code>projectStartDate</code> is not set, it will be automatically calculated based on the data source.\nThe date can be provided as a <code>Date</code> object or a string in a valid date format.</p>\n","type":"Date|string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#projectstartdate"},{"name":"projectEndDate","description":"<p>Defines the end date of the project. If the <code>projectEndDate</code> is not set, it will be automatically calculated based on the data source.\nThe date can be provided as a <code>Date</code> object or a string in a valid date format.</p>\n","type":"Date|string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#projectenddate"},{"name":"allowSelection","description":"<p>If <code>allowSelection</code> is set to true, it enables row selection in the Gantt chart, and the selected rows are highlighted.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#allowselection"},{"name":"splitterSettings","description":"<p>Configures the splitter settings for the Gantt chart.</p>\n","type":"SplitterSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#splittersettings"}],"grid/overview":[{"name":"queryCellInfo","description":"<p>Triggered every time a request is made to access cell information, element, or data.\nThis will be triggered before the cell element is appended to the Grid element.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/grid/#querycellinfo"},{"name":"dataSource","description":"<p>It is used to render grid table rows.\nIf the <code>dataSource</code> is an array of JavaScript objects,\nthen Grid will create instance of <a href=\"https://ej2.syncfusion.com/documentation/api/data/dataManager/\"><code>DataManager</code></a>\nfrom this <code>dataSource</code>.\nIf the <code>dataSource</code> is an existing <a href=\"https://ej2.syncfusion.com/documentation/api/data/dataManager/\"><code>DataManager</code></a>,\nthe Grid will not initialize a new one.</p>\n<blockquote>\n<p>Check the available <a href=\"../../data/adaptors/\"><code>Adaptors</code></a> to customize the data operation.</p>\n</blockquote>\n","type":"Object|DataManager|DataResult","link":"//ej2.syncfusion.com/react/documentation/api/grid/#datasource"},{"name":"enableVirtualization","description":"<p>If <code>enableVirtualization</code> set to true, then the Grid will render only the rows visible within the view-port\nand load subsequent rows on vertical scrolling. This helps to load large dataset in Grid.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/grid/#enablevirtualization"},{"name":"allowFiltering","description":"<p>If <code>allowFiltering</code> set to true the filter bar will be displayed.\nIf set to false the filter bar will not be displayed.\nFilter bar allows the user to filter grid records with required criteria.</p>\n<blockquote>\n<p>Check the <a href=\"../../grid/filtering/\"><code>Filtering</code></a> to customize its default behavior.</p>\n</blockquote>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/grid/#allowfiltering"},{"name":"allowSorting","description":"<p>If <code>allowSorting</code> is set to true, it allows sorting of grid records when column header is clicked.</p>\n<blockquote>\n<p>Check the <a href=\"../../grid/sorting/\"><code>Sorting</code></a> to customize its default behavior.</p>\n</blockquote>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/grid/#allowsorting"},{"name":"allowSelection","description":"<p>If <code>allowSelection</code> is set to true, it allows selection of (highlight row) Grid records by clicking it.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/grid/#allowselection"},{"name":"selectionSettings","description":"<p>Configures the selection settings.</p>\n","type":"SelectionSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/grid/#selectionsettings"},{"name":"height","description":"<p>Defines the scrollable height of the grid content.</p>\n","type":"string|number","link":"//ej2.syncfusion.com/react/documentation/api/grid/#height"},{"name":"columns","description":"<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n","type":"Column[]|string[]|ColumnModel[]","link":"//ej2.syncfusion.com/react/documentation/api/grid/#columns"},{"name":"dataBound","description":"<p>Triggers when data source is populated in the Grid.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/grid/#databound"},{"name":"actionComplete","description":"<p>Triggers when Grid actions such as sorting, filtering, paging, grouping etc. are completed.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/grid/#actioncomplete"},{"name":"load","description":"<p>This event allows customization of Grid properties before rendering.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/grid/#load"}],"grid/live-data":[{"name":"dataSource","description":"<p>It is used to render grid table rows.\nIf the <code>dataSource</code> is an array of JavaScript objects,\nthen Grid will create instance of <a href=\"https://ej2.syncfusion.com/documentation/api/data/dataManager/\"><code>DataManager</code></a>\nfrom this <code>dataSource</code>.\nIf the <code>dataSource</code> is an existing <a href=\"https://ej2.syncfusion.com/documentation/api/data/dataManager/\"><code>DataManager</code></a>,\nthe Grid will not initialize a new one.</p>\n<blockquote>\n<p>Check the available <a href=\"../../data/adaptors/\"><code>Adaptors</code></a> to customize the data operation.</p>\n</blockquote>\n","type":"Object|DataManager|DataResult","link":"//ej2.syncfusion.com/react/documentation/api/grid/#datasource"},{"name":"enableVirtualization","description":"<p>If <code>enableVirtualization</code> set to true, then the Grid will render only the rows visible within the view-port\nand load subsequent rows on vertical scrolling. This helps to load large dataset in Grid.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/grid/#enablevirtualization"},{"name":"enableVirtualMaskRow","description":"<p>Specifies the shimmer effect for Grid virtual and infinite scrolling.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/grid/#enablevirtualmaskrow"},{"name":"enableHover","description":"<p>If <code>enableHover</code> is set to true, the row hover is enabled in the Grid.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/grid/#enablehover"},{"name":"columns","description":"<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n","type":"Column[]|string[]|ColumnModel[]","link":"//ej2.syncfusion.com/react/documentation/api/grid/#columns"},{"name":"rowHeight","description":"<p>Defines the height of Grid rows.</p>\n","type":"number","link":"//ej2.syncfusion.com/react/documentation/api/grid/#rowheight"},{"name":"height","description":"<p>Defines the scrollable height of the grid content.</p>\n","type":"string|number","link":"//ej2.syncfusion.com/react/documentation/api/grid/#height"},{"name":"allowSelection","description":"<p>If <code>allowSelection</code> is set to true, it allows selection of (highlight row) Grid records by clicking it.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/grid/#allowselection"},{"name":"queryCellInfo","description":"<p>Triggered every time a request is made to access cell information, element, or data.\nThis will be triggered before the cell element is appended to the Grid element.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/grid/#querycellinfo"},{"name":"load","description":"<p>This event allows customization of Grid properties before rendering.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/grid/#load"}],"grid/default":[{"name":"columns","description":"<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n","type":"Column[]|string[]|ColumnModel[]","link":"//ej2.syncfusion.com/react/documentation/api/grid/#columns"},{"name":"dataSource","description":"<p>It is used to render grid table rows.\nIf the <code>dataSource</code> is an array of JavaScript objects,\nthen Grid will create instance of <a href=\"https://ej2.syncfusion.com/documentation/api/data/dataManager/\"><code>DataManager</code></a>\nfrom this <code>dataSource</code>.\nIf the <code>dataSource</code> is an existing <a href=\"https://ej2.syncfusion.com/documentation/api/data/dataManager/\"><code>DataManager</code></a>,\nthe Grid will not initialize a new one.</p>\n<blockquote>\n<p>Check the available <a href=\"../../data/adaptors/\"><code>Adaptors</code></a> to customize the data operation.</p>\n</blockquote>\n","type":"Object|DataManager|DataResult","link":"//ej2.syncfusion.com/react/documentation/api/grid/#datasource"}],"grid/adaptive-layout":[{"name":"dataSource","description":"<p>It is used to render grid table rows.\nIf the <code>dataSource</code> is an array of JavaScript objects,\nthen Grid will create instance of <a href=\"https://ej2.syncfusion.com/documentation/api/data/dataManager/\"><code>DataManager</code></a>\nfrom this <code>dataSource</code>.\nIf the <code>dataSource</code> is an existing <a href=\"https://ej2.syncfusion.com/documentation/api/data/dataManager/\"><code>DataManager</code></a>,\nthe Grid will not initialize a new one.</p>\n<blockquote>\n<p>Check the available <a href=\"../../data/adaptors/\"><code>Adaptors</code></a> to customize the data operation.</p>\n</blockquote>\n","type":"Object|DataManager|DataResult","link":"//ej2.syncfusion.com/react/documentation/api/grid/#datasource"},{"name":"allowSorting","description":"<p>If <code>allowSorting</code> is set to true, it allows sorting of grid records when column header is clicked.</p>\n<blockquote>\n<p>Check the <a href=\"../../grid/sorting/\"><code>Sorting</code></a> to customize its default behavior.</p>\n</blockquote>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/grid/#allowsorting"},{"name":"allowPaging","description":"<p>If <code>allowPaging</code> is set to true, the pager renders at the footer of the Grid. It is used to handle page navigation in the Grid.</p>\n<blockquote>\n<p>Check the <a href=\"../../grid/paging/\"><code>Paging</code></a> to configure the grid pager.</p>\n</blockquote>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/grid/#allowpaging"},{"name":"columns","description":"<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n","type":"Column[]|string[]|ColumnModel[]","link":"//ej2.syncfusion.com/react/documentation/api/grid/#columns"},{"name":"editSettings","description":"<p>Configures the edit settings.</p>\n","type":"EditSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/grid/#editsettings"},{"name":"allowFiltering","description":"<p>If <code>allowFiltering</code> set to true the filter bar will be displayed.\nIf set to false the filter bar will not be displayed.\nFilter bar allows the user to filter grid records with required criteria.</p>\n<blockquote>\n<p>Check the <a href=\"../../grid/filtering/\"><code>Filtering</code></a> to customize its default behavior.</p>\n</blockquote>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/grid/#allowfiltering"},{"name":"filterSettings","description":"<p>Configures the filter settings of the Grid.</p>\n","type":"FilterSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/grid/#filtersettings"},{"name":"rowRenderingMode","description":"<p>Defines the grid row elements rendering direction. The available directions are,</p>\n<ul>\n<li><code>Horizontal</code>: Renders the grid row elements in the horizontal direction</li>\n<li><code>Vertical</code>: Renders the grid row elements in the vertical direction</li>\n</ul>\n","type":"RowRenderingDirection","link":"//ej2.syncfusion.com/react/documentation/api/grid/#rowrenderingmode"},{"name":"toolbar","description":"<p><code>toolbar</code> defines the ToolBar items of the Grid.\nIt contains built-in and custom toolbar items.\nIf a string value is assigned to the <code>toolbar</code> option, it is considered as the template for the whole Grid ToolBar.\nIf an array value is assigned, it is considered as the list of built-in and custom toolbar items in the Grid's Toolbar.\n&lt;br&gt;&lt;br&gt;\nThe available built-in ToolBar items are:</p>\n<ul>\n<li>Add: Adds a new record.</li>\n<li>Edit: Edits the selected record.</li>\n<li>Update: Updates the edited record.</li>\n<li>Delete: Deletes the selected record.</li>\n<li>Cancel: Cancels the edit state.</li>\n<li>Search: Searches records by the given key.</li>\n<li>Print: Prints the Grid.</li>\n<li>ExcelExport - Export the Grid to Excel(excelExport() method manually to make export.)</li>\n<li>PdfExport - Export the Grid to PDF(pdfExport() method manually to make export.)</li>\n<li>CsvExport - Export the Grid to CSV(csvExport() method manually to make export.)&lt;br&gt;&lt;br&gt;\nThe following code example implements the custom toolbar items.</li>\n</ul>\n<blockquote>\n<p>Check the <a href=\"../../grid/tool-bar/#custom-toolbar-items/\"><code>Toolbar</code></a> to customize its default items.</p>\n</blockquote>\n","type":"[]","link":"//ej2.syncfusion.com/react/documentation/api/grid/#toolbar"}],"grid/loading-animation":[{"name":"columns","description":"<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n","type":"Column[]|string[]|ColumnModel[]","link":"//ej2.syncfusion.com/react/documentation/api/grid/#columns"},{"name":"dataSource","description":"<p>It is used to render grid table rows.\nIf the <code>dataSource</code> is an array of JavaScript objects,\nthen Grid will create instance of <a href=\"https://ej2.syncfusion.com/documentation/api/data/dataManager/\"><code>DataManager</code></a>\nfrom this <code>dataSource</code>.\nIf the <code>dataSource</code> is an existing <a href=\"https://ej2.syncfusion.com/documentation/api/data/dataManager/\"><code>DataManager</code></a>,\nthe Grid will not initialize a new one.</p>\n<blockquote>\n<p>Check the available <a href=\"../../data/adaptors/\"><code>Adaptors</code></a> to customize the data operation.</p>\n</blockquote>\n","type":"Object|DataManager|DataResult","link":"//ej2.syncfusion.com/react/documentation/api/grid/#datasource"},{"name":"allowSorting","description":"<p>If <code>allowSorting</code> is set to true, it allows sorting of grid records when column header is clicked.</p>\n<blockquote>\n<p>Check the <a href=\"../../grid/sorting/\"><code>Sorting</code></a> to customize its default behavior.</p>\n</blockquote>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/grid/#allowsorting"},{"name":"allowPaging","description":"<p>If <code>allowPaging</code> is set to true, the pager renders at the footer of the Grid. It is used to handle page navigation in the Grid.</p>\n<blockquote>\n<p>Check the <a href=\"../../grid/paging/\"><code>Paging</code></a> to configure the grid pager.</p>\n</blockquote>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/grid/#allowpaging"},{"name":"allowFiltering","description":"<p>If <code>allowFiltering</code> set to true the filter bar will be displayed.\nIf set to false the filter bar will not be displayed.\nFilter bar allows the user to filter grid records with required criteria.</p>\n<blockquote>\n<p>Check the <a href=\"../../grid/filtering/\"><code>Filtering</code></a> to customize its default behavior.</p>\n</blockquote>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/grid/#allowfiltering"},{"name":"loadingIndicator","description":"<p>Configures the Loading Indicator of the Grid.</p>\n","type":"LoadingIndicatorModel","link":"//ej2.syncfusion.com/react/documentation/api/grid/#loadingindicator"},{"name":"pageSettings","description":"<p>Configures the pager in the Grid.</p>\n","type":"PageSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/grid/#pagesettings"}],"grid/empty-record-template":[{"name":"columns","description":"<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n","type":"Column[]|string[]|ColumnModel[]","link":"//ej2.syncfusion.com/react/documentation/api/grid/#columns"},{"name":"dataSource","description":"<p>It is used to render grid table rows.\nIf the <code>dataSource</code> is an array of JavaScript objects,\nthen Grid will create instance of <a href=\"https://ej2.syncfusion.com/documentation/api/data/dataManager/\"><code>DataManager</code></a>\nfrom this <code>dataSource</code>.\nIf the <code>dataSource</code> is an existing <a href=\"https://ej2.syncfusion.com/documentation/api/data/dataManager/\"><code>DataManager</code></a>,\nthe Grid will not initialize a new one.</p>\n<blockquote>\n<p>Check the available <a href=\"../../data/adaptors/\"><code>Adaptors</code></a> to customize the data operation.</p>\n</blockquote>\n","type":"Object|DataManager|DataResult","link":"//ej2.syncfusion.com/react/documentation/api/grid/#datasource"},{"name":"editSettings","description":"<p>Configures the edit settings.</p>\n","type":"EditSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/grid/#editsettings"},{"name":"toolbar","description":"<p><code>toolbar</code> defines the ToolBar items of the Grid.\nIt contains built-in and custom toolbar items.\nIf a string value is assigned to the <code>toolbar</code> option, it is considered as the template for the whole Grid ToolBar.\nIf an array value is assigned, it is considered as the list of built-in and custom toolbar items in the Grid's Toolbar.\n&lt;br&gt;&lt;br&gt;\nThe available built-in ToolBar items are:</p>\n<ul>\n<li>Add: Adds a new record.</li>\n<li>Edit: Edits the selected record.</li>\n<li>Update: Updates the edited record.</li>\n<li>Delete: Deletes the selected record.</li>\n<li>Cancel: Cancels the edit state.</li>\n<li>Search: Searches records by the given key.</li>\n<li>Print: Prints the Grid.</li>\n<li>ExcelExport - Export the Grid to Excel(excelExport() method manually to make export.)</li>\n<li>PdfExport - Export the Grid to PDF(pdfExport() method manually to make export.)</li>\n<li>CsvExport - Export the Grid to CSV(csvExport() method manually to make export.)&lt;br&gt;&lt;br&gt;\nThe following code example implements the custom toolbar items.</li>\n</ul>\n<blockquote>\n<p>Check the <a href=\"../../grid/tool-bar/#custom-toolbar-items/\"><code>Toolbar</code></a> to customize its default items.</p>\n</blockquote>\n","type":"[]","link":"//ej2.syncfusion.com/react/documentation/api/grid/#toolbar"},{"name":"allowPaging","description":"<p>If <code>allowPaging</code> is set to true, the pager renders at the footer of the Grid. It is used to handle page navigation in the Grid.</p>\n<blockquote>\n<p>Check the <a href=\"../../grid/paging/\"><code>Paging</code></a> to configure the grid pager.</p>\n</blockquote>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/grid/#allowpaging"},{"name":"pageSettings","description":"<p>Configures the pager in the Grid.</p>\n","type":"PageSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/grid/#pagesettings"}],"grid/fifa-statistics":[{"name":"dataSource","description":"<p>It is used to render grid table rows.\nIf the <code>dataSource</code> is an array of JavaScript objects,\nthen Grid will create instance of <a href=\"https://ej2.syncfusion.com/documentation/api/data/dataManager/\"><code>DataManager</code></a>\nfrom this <code>dataSource</code>.\nIf the <code>dataSource</code> is an existing <a href=\"https://ej2.syncfusion.com/documentation/api/data/dataManager/\"><code>DataManager</code></a>,\nthe Grid will not initialize a new one.</p>\n<blockquote>\n<p>Check the available <a href=\"../../data/adaptors/\"><code>Adaptors</code></a> to customize the data operation.</p>\n</blockquote>\n","type":"Object|DataManager|DataResult","link":"//ej2.syncfusion.com/react/documentation/api/grid/#datasource"},{"name":"allowSorting","description":"<p>If <code>allowSorting</code> is set to true, it allows sorting of grid records when column header is clicked.</p>\n<blockquote>\n<p>Check the <a href=\"../../grid/sorting/\"><code>Sorting</code></a> to customize its default behavior.</p>\n</blockquote>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/grid/#allowsorting"},{"name":"gridLines","description":"<p>Defines the mode of grid lines. The available modes are,</p>\n<ul>\n<li><code>Both</code>: Displays both horizontal and vertical grid lines.</li>\n<li><code>None</code>: No grid lines are displayed.</li>\n<li><code>Horizontal</code>: Displays the horizontal grid lines only.</li>\n<li><code>Vertical</code>: Displays the vertical grid lines only.</li>\n<li><code>Default</code>: Displays grid lines based on the theme.</li>\n</ul>\n","type":"GridLine","link":"//ej2.syncfusion.com/react/documentation/api/grid/#gridlines"},{"name":"enableStickyHeader","description":"<p>If 'enableStickyHeader' set to true, then the user can able to make the column headers visible when the document is scrolled.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/grid/#enablestickyheader"},{"name":"columns","description":"<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n","type":"Column[]|string[]|ColumnModel[]","link":"//ej2.syncfusion.com/react/documentation/api/grid/#columns"},{"name":"textWrapSettings","description":"<p>Configures the text wrap in the Grid.</p>\n","type":"TextWrapSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/grid/#textwrapsettings"},{"name":"enableAltRow","description":"<p>If <code>enableAltRow</code> is set to true, the grid will render with <code>e-altrow</code> CSS class to the alternative tr elements.</p>\n<blockquote>\n<p>Check the <a href=\"../../grid/row/#styling-alternate-rows/\"><code>AltRow</code></a> to customize the styles of alternative rows.</p>\n</blockquote>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/grid/#enablealtrow"},{"name":"enableHover","description":"<p>If <code>enableHover</code> is set to true, the row hover is enabled in the Grid.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/grid/#enablehover"},{"name":"allowSelection","description":"<p>If <code>allowSelection</code> is set to true, it allows selection of (highlight row) Grid records by clicking it.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/grid/#allowselection"}],"grid/local-binding":[{"name":"dataSource","description":"<p>It is used to render grid table rows.\nIf the <code>dataSource</code> is an array of JavaScript objects,\nthen Grid will create instance of <a href=\"https://ej2.syncfusion.com/documentation/api/data/dataManager/\"><code>DataManager</code></a>\nfrom this <code>dataSource</code>.\nIf the <code>dataSource</code> is an existing <a href=\"https://ej2.syncfusion.com/documentation/api/data/dataManager/\"><code>DataManager</code></a>,\nthe Grid will not initialize a new one.</p>\n<blockquote>\n<p>Check the available <a href=\"../../data/adaptors/\"><code>Adaptors</code></a> to customize the data operation.</p>\n</blockquote>\n","type":"Object|DataManager|DataResult","link":"//ej2.syncfusion.com/react/documentation/api/grid/#datasource"},{"name":"allowPaging","description":"<p>If <code>allowPaging</code> is set to true, the pager renders at the footer of the Grid. It is used to handle page navigation in the Grid.</p>\n<blockquote>\n<p>Check the <a href=\"../../grid/paging/\"><code>Paging</code></a> to configure the grid pager.</p>\n</blockquote>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/grid/#allowpaging"},{"name":"columns","description":"<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n","type":"Column[]|string[]|ColumnModel[]","link":"//ej2.syncfusion.com/react/documentation/api/grid/#columns"},{"name":"pageSettings","description":"<p>Configures the pager in the Grid.</p>\n","type":"PageSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/grid/#pagesettings"}],"grid/remote-data":[{"name":"dataSource","description":"<p>It is used to render grid table rows.\nIf the <code>dataSource</code> is an array of JavaScript objects,\nthen Grid will create instance of <a href=\"https://ej2.syncfusion.com/documentation/api/data/dataManager/\"><code>DataManager</code></a>\nfrom this <code>dataSource</code>.\nIf the <code>dataSource</code> is an existing <a href=\"https://ej2.syncfusion.com/documentation/api/data/dataManager/\"><code>DataManager</code></a>,\nthe Grid will not initialize a new one.</p>\n<blockquote>\n<p>Check the available <a href=\"../../data/adaptors/\"><code>Adaptors</code></a> to customize the data operation.</p>\n</blockquote>\n","type":"Object|DataManager|DataResult","link":"//ej2.syncfusion.com/react/documentation/api/grid/#datasource"},{"name":"allowPaging","description":"<p>If <code>allowPaging</code> is set to true, the pager renders at the footer of the Grid. It is used to handle page navigation in the Grid.</p>\n<blockquote>\n<p>Check the <a href=\"../../grid/paging/\"><code>Paging</code></a> to configure the grid pager.</p>\n</blockquote>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/grid/#allowpaging"},{"name":"columns","description":"<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n","type":"Column[]|string[]|ColumnModel[]","link":"//ej2.syncfusion.com/react/documentation/api/grid/#columns"},{"name":"pageSettings","description":"<p>Configures the pager in the Grid.</p>\n","type":"PageSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/grid/#pagesettings"}],"grid/custom-binding":[{"name":"dataSource","description":"<p>It is used to render grid table rows.\nIf the <code>dataSource</code> is an array of JavaScript objects,\nthen Grid will create instance of <a href=\"https://ej2.syncfusion.com/documentation/api/data/dataManager/\"><code>DataManager</code></a>\nfrom this <code>dataSource</code>.\nIf the <code>dataSource</code> is an existing <a href=\"https://ej2.syncfusion.com/documentation/api/data/dataManager/\"><code>DataManager</code></a>,\nthe Grid will not initialize a new one.</p>\n<blockquote>\n<p>Check the available <a href=\"../../data/adaptors/\"><code>Adaptors</code></a> to customize the data operation.</p>\n</blockquote>\n","type":"Object|DataManager|DataResult","link":"//ej2.syncfusion.com/react/documentation/api/grid/#datasource"},{"name":"allowPaging","description":"<p>If <code>allowPaging</code> is set to true, the pager renders at the footer of the Grid. It is used to handle page navigation in the Grid.</p>\n<blockquote>\n<p>Check the <a href=\"../../grid/paging/\"><code>Paging</code></a> to configure the grid pager.</p>\n</blockquote>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/grid/#allowpaging"},{"name":"columns","description":"<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n","type":"Column[]|string[]|ColumnModel[]","link":"//ej2.syncfusion.com/react/documentation/api/grid/#columns"},{"name":"pageSettings","description":"<p>Configures the pager in the Grid.</p>\n","type":"PageSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/grid/#pagesettings"},{"name":"allowSorting","description":"<p>If <code>allowSorting</code> is set to true, it allows sorting of grid records when column header is clicked.</p>\n<blockquote>\n<p>Check the <a href=\"../../grid/sorting/\"><code>Sorting</code></a> to customize its default behavior.</p>\n</blockquote>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/grid/#allowsorting"},{"name":"allowGrouping","description":"<p>If <code>allowGrouping</code> set to true, then it will allow the user to dynamically group or ungroup columns.\nGrouping can be done by drag and drop columns from column header to group drop area.</p>\n<blockquote>\n<p>Check the <a href=\"../../grid/grouping/\"><code>Grouping</code></a> to customize its default behavior.</p>\n</blockquote>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/grid/#allowgrouping"}],"grid/column-template":[{"name":"dataSource","description":"<p>It is used to render grid table rows.\nIf the <code>dataSource</code> is an array of JavaScript objects,\nthen Grid will create instance of <a href=\"https://ej2.syncfusion.com/documentation/api/data/dataManager/\"><code>DataManager</code></a>\nfrom this <code>dataSource</code>.\nIf the <code>dataSource</code> is an existing <a href=\"https://ej2.syncfusion.com/documentation/api/data/dataManager/\"><code>DataManager</code></a>,\nthe Grid will not initialize a new one.</p>\n<blockquote>\n<p>Check the available <a href=\"../../data/adaptors/\"><code>Adaptors</code></a> to customize the data operation.</p>\n</blockquote>\n","type":"Object|DataManager|DataResult","link":"//ej2.syncfusion.com/react/documentation/api/grid/#datasource"},{"name":"columns","description":"<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n","type":"Column[]|string[]|ColumnModel[]","link":"//ej2.syncfusion.com/react/documentation/api/grid/#columns"},{"name":"width","description":"<p>Defines the Grid width.</p>\n","type":"string|number","link":"//ej2.syncfusion.com/react/documentation/api/grid/#width"},{"name":"height","description":"<p>Defines the scrollable height of the grid content.</p>\n","type":"string|number","link":"//ej2.syncfusion.com/react/documentation/api/grid/#height"}],"grid/header-template":[{"name":"dataSource","description":"<p>It is used to render grid table rows.\nIf the <code>dataSource</code> is an array of JavaScript objects,\nthen Grid will create instance of <a href=\"https://ej2.syncfusion.com/documentation/api/data/dataManager/\"><code>DataManager</code></a>\nfrom this <code>dataSource</code>.\nIf the <code>dataSource</code> is an existing <a href=\"https://ej2.syncfusion.com/documentation/api/data/dataManager/\"><code>DataManager</code></a>,\nthe Grid will not initialize a new one.</p>\n<blockquote>\n<p>Check the available <a href=\"../../data/adaptors/\"><code>Adaptors</code></a> to customize the data operation.</p>\n</blockquote>\n","type":"Object|DataManager|DataResult","link":"//ej2.syncfusion.com/react/documentation/api/grid/#datasource"},{"name":"columns","description":"<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n","type":"Column[]|string[]|ColumnModel[]","link":"//ej2.syncfusion.com/react/documentation/api/grid/#columns"},{"name":"width","description":"<p>Defines the Grid width.</p>\n","type":"string|number","link":"//ej2.syncfusion.com/react/documentation/api/grid/#width"},{"name":"height","description":"<p>Defines the scrollable height of the grid content.</p>\n","type":"string|number","link":"//ej2.syncfusion.com/react/documentation/api/grid/#height"}],"grid/stacked-header":[{"name":"dataSource","description":"<p>It is used to render grid table rows.\nIf the <code>dataSource</code> is an array of JavaScript objects,\nthen Grid will create instance of <a href=\"https://ej2.syncfusion.com/documentation/api/data/dataManager/\"><code>DataManager</code></a>\nfrom this <code>dataSource</code>.\nIf the <code>dataSource</code> is an existing <a href=\"https://ej2.syncfusion.com/documentation/api/data/dataManager/\"><code>DataManager</code></a>,\nthe Grid will not initialize a new one.</p>\n<blockquote>\n<p>Check the available <a href=\"../../data/adaptors/\"><code>Adaptors</code></a> to customize the data operation.</p>\n</blockquote>\n","type":"Object|DataManager|DataResult","link":"//ej2.syncfusion.com/react/documentation/api/grid/#datasource"},{"name":"allowPaging","description":"<p>If <code>allowPaging</code> is set to true, the pager renders at the footer of the Grid. It is used to handle page navigation in the Grid.</p>\n<blockquote>\n<p>Check the <a href=\"../../grid/paging/\"><code>Paging</code></a> to configure the grid pager.</p>\n</blockquote>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/grid/#allowpaging"},{"name":"pageSettings","description":"<p>Configures the pager in the Grid.</p>\n","type":"PageSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/grid/#pagesettings"},{"name":"columns","description":"<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n","type":"Column[]|string[]|ColumnModel[]","link":"//ej2.syncfusion.com/react/documentation/api/grid/#columns"}],"grid/foreign-key":[{"name":"dataSource","description":"<p>It is used to render grid table rows.\nIf the <code>dataSource</code> is an array of JavaScript objects,\nthen Grid will create instance of <a href=\"https://ej2.syncfusion.com/documentation/api/data/dataManager/\"><code>DataManager</code></a>\nfrom this <code>dataSource</code>.\nIf the <code>dataSource</code> is an existing <a href=\"https://ej2.syncfusion.com/documentation/api/data/dataManager/\"><code>DataManager</code></a>,\nthe Grid will not initialize a new one.</p>\n<blockquote>\n<p>Check the available <a href=\"../../data/adaptors/\"><code>Adaptors</code></a> to customize the data operation.</p>\n</blockquote>\n","type":"Object|DataManager|DataResult","link":"//ej2.syncfusion.com/react/documentation/api/grid/#datasource"},{"name":"allowSorting","description":"<p>If <code>allowSorting</code> is set to true, it allows sorting of grid records when column header is clicked.</p>\n<blockquote>\n<p>Check the <a href=\"../../grid/sorting/\"><code>Sorting</code></a> to customize its default behavior.</p>\n</blockquote>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/grid/#allowsorting"},{"name":"allowPaging","description":"<p>If <code>allowPaging</code> is set to true, the pager renders at the footer of the Grid. It is used to handle page navigation in the Grid.</p>\n<blockquote>\n<p>Check the <a href=\"../../grid/paging/\"><code>Paging</code></a> to configure the grid pager.</p>\n</blockquote>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/grid/#allowpaging"},{"name":"columns","description":"<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n","type":"Column[]|string[]|ColumnModel[]","link":"//ej2.syncfusion.com/react/documentation/api/grid/#columns"},{"name":"allowFiltering","description":"<p>If <code>allowFiltering</code> set to true the filter bar will be displayed.\nIf set to false the filter bar will not be displayed.\nFilter bar allows the user to filter grid records with required criteria.</p>\n<blockquote>\n<p>Check the <a href=\"../../grid/filtering/\"><code>Filtering</code></a> to customize its default behavior.</p>\n</blockquote>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/grid/#allowfiltering"},{"name":"filterSettings","description":"<p>Configures the filter settings of the Grid.</p>\n","type":"FilterSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/grid/#filtersettings"},{"name":"editSettings","description":"<p>Configures the edit settings.</p>\n","type":"EditSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/grid/#editsettings"}],"grid/reorder":[{"name":"dataSource","description":"<p>It is used to render grid table rows.\nIf the <code>dataSource</code> is an array of JavaScript objects,\nthen Grid will create instance of <a href=\"https://ej2.syncfusion.com/documentation/api/data/dataManager/\"><code>DataManager</code></a>\nfrom this <code>dataSource</code>.\nIf the <code>dataSource</code> is an existing <a href=\"https://ej2.syncfusion.com/documentation/api/data/dataManager/\"><code>DataManager</code></a>,\nthe Grid will not initialize a new one.</p>\n<blockquote>\n<p>Check the available <a href=\"../../data/adaptors/\"><code>Adaptors</code></a> to customize the data operation.</p>\n</blockquote>\n","type":"Object|DataManager|DataResult","link":"//ej2.syncfusion.com/react/documentation/api/grid/#datasource"},{"name":"allowReordering","description":"<p>If <code>allowReordering</code> is set to true, Grid columns can be reordered.\nReordering can be done by drag and drop of a particular column from one index to another index.</p>\n<blockquote>\n<p>If Grid is rendered with stacked headers, reordering is allowed only at the same level as the column headers.</p>\n</blockquote>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/grid/#allowreordering"},{"name":"actionComplete","description":"<p>Triggers when Grid actions such as sorting, filtering, paging, grouping etc. are completed.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/grid/#actioncomplete"},{"name":"columns","description":"<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n","type":"Column[]|string[]|ColumnModel[]","link":"//ej2.syncfusion.com/react/documentation/api/grid/#columns"}],"grid/column-resizing":[{"name":"dataSource","description":"<p>It is used to render grid table rows.\nIf the <code>dataSource</code> is an array of JavaScript objects,\nthen Grid will create instance of <a href=\"https://ej2.syncfusion.com/documentation/api/data/dataManager/\"><code>DataManager</code></a>\nfrom this <code>dataSource</code>.\nIf the <code>dataSource</code> is an existing <a href=\"https://ej2.syncfusion.com/documentation/api/data/dataManager/\"><code>DataManager</code></a>,\nthe Grid will not initialize a new one.</p>\n<blockquote>\n<p>Check the available <a href=\"../../data/adaptors/\"><code>Adaptors</code></a> to customize the data operation.</p>\n</blockquote>\n","type":"Object|DataManager|DataResult","link":"//ej2.syncfusion.com/react/documentation/api/grid/#datasource"},{"name":"allowResizing","description":"<p>If <code>allowResizing</code> is set to true, Grid columns can be resized.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/grid/#allowresizing"},{"name":"height","description":"<p>Defines the scrollable height of the grid content.</p>\n","type":"string|number","link":"//ej2.syncfusion.com/react/documentation/api/grid/#height"},{"name":"columns","description":"<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n","type":"Column[]|string[]|ColumnModel[]","link":"//ej2.syncfusion.com/react/documentation/api/grid/#columns"},{"name":"autoFit","description":"<p>If <code>autoFit</code> set to true, then it will auto fit the columns based on given width.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/grid/#autofit"}],"grid/column-menu":[{"name":"dataSource","description":"<p>It is used to render grid table rows.\nIf the <code>dataSource</code> is an array of JavaScript objects,\nthen Grid will create instance of <a href=\"https://ej2.syncfusion.com/documentation/api/data/dataManager/\"><code>DataManager</code></a>\nfrom this <code>dataSource</code>.\nIf the <code>dataSource</code> is an existing <a href=\"https://ej2.syncfusion.com/documentation/api/data/dataManager/\"><code>DataManager</code></a>,\nthe Grid will not initialize a new one.</p>\n<blockquote>\n<p>Check the available <a href=\"../../data/adaptors/\"><code>Adaptors</code></a> to customize the data operation.</p>\n</blockquote>\n","type":"Object|DataManager|DataResult","link":"//ej2.syncfusion.com/react/documentation/api/grid/#datasource"},{"name":"allowSorting","description":"<p>If <code>allowSorting</code> is set to true, it allows sorting of grid records when column header is clicked.</p>\n<blockquote>\n<p>Check the <a href=\"../../grid/sorting/\"><code>Sorting</code></a> to customize its default behavior.</p>\n</blockquote>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/grid/#allowsorting"},{"name":"allowGrouping","description":"<p>If <code>allowGrouping</code> set to true, then it will allow the user to dynamically group or ungroup columns.\nGrouping can be done by drag and drop columns from column header to group drop area.</p>\n<blockquote>\n<p>Check the <a href=\"../../grid/grouping/\"><code>Grouping</code></a> to customize its default behavior.</p>\n</blockquote>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/grid/#allowgrouping"},{"name":"allowFiltering","description":"<p>If <code>allowFiltering</code> set to true the filter bar will be displayed.\nIf set to false the filter bar will not be displayed.\nFilter bar allows the user to filter grid records with required criteria.</p>\n<blockquote>\n<p>Check the <a href=\"../../grid/filtering/\"><code>Filtering</code></a> to customize its default behavior.</p>\n</blockquote>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/grid/#allowfiltering"},{"name":"showColumnMenu","description":"<p>If <code>showColumnMenu</code> set to true, then it will enable the column menu options in each columns.</p>\n<blockquote>\n<p>Check the <a href=\"../../grid/columns/#column-menu/\"><code>Column menu</code></a> for its configuration.</p>\n</blockquote>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/grid/#showcolumnmenu"},{"name":"filterSettings","description":"<p>Configures the filter settings of the Grid.</p>\n","type":"FilterSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/grid/#filtersettings"},{"name":"groupSettings","description":"<p>Configures the group settings.</p>\n","type":"GroupSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/grid/#groupsettings"},{"name":"columns","description":"<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n","type":"Column[]|string[]|ColumnModel[]","link":"//ej2.syncfusion.com/react/documentation/api/grid/#columns"},{"name":"allowSorting","description":"<p>If <code>allowSorting</code> is set to true, it allows sorting of grid records when column header is clicked.</p>\n<blockquote>\n<p>Check the <a href=\"../../grid/sorting/\"><code>Sorting</code></a> to customize its default behavior.</p>\n</blockquote>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/grid/#allowsorting"}],"grid/auto-wrap":[{"name":"dataSource","description":"<p>It is used to render grid table rows.\nIf the <code>dataSource</code> is an array of JavaScript objects,\nthen Grid will create instance of <a href=\"https://ej2.syncfusion.com/documentation/api/data/dataManager/\"><code>DataManager</code></a>\nfrom this <code>dataSource</code>.\nIf the <code>dataSource</code> is an existing <a href=\"https://ej2.syncfusion.com/documentation/api/data/dataManager/\"><code>DataManager</code></a>,\nthe Grid will not initialize a new one.</p>\n<blockquote>\n<p>Check the available <a href=\"../../data/adaptors/\"><code>Adaptors</code></a> to customize the data operation.</p>\n</blockquote>\n","type":"Object|DataManager|DataResult","link":"//ej2.syncfusion.com/react/documentation/api/grid/#datasource"},{"name":"allowPaging","description":"<p>If <code>allowPaging</code> is set to true, the pager renders at the footer of the Grid. It is used to handle page navigation in the Grid.</p>\n<blockquote>\n<p>Check the <a href=\"../../grid/paging/\"><code>Paging</code></a> to configure the grid pager.</p>\n</blockquote>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/grid/#allowpaging"},{"name":"allowTextWrap","description":"<p>If <code>allowTextWrap</code> set to true,\nthen text content will wrap to the next line when its text content exceeds the width of the Column Cells.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/grid/#allowtextwrap"},{"name":"columns","description":"<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n","type":"Column[]|string[]|ColumnModel[]","link":"//ej2.syncfusion.com/react/documentation/api/grid/#columns"},{"name":"pageSettings","description":"<p>Configures the pager in the Grid.</p>\n","type":"PageSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/grid/#pagesettings"}],"grid/column-chooser":[{"name":"dataSource","description":"<p>It is used to render grid table rows.\nIf the <code>dataSource</code> is an array of JavaScript objects,\nthen Grid will create instance of <a href=\"https://ej2.syncfusion.com/documentation/api/data/dataManager/\"><code>DataManager</code></a>\nfrom this <code>dataSource</code>.\nIf the <code>dataSource</code> is an existing <a href=\"https://ej2.syncfusion.com/documentation/api/data/dataManager/\"><code>DataManager</code></a>,\nthe Grid will not initialize a new one.</p>\n<blockquote>\n<p>Check the available <a href=\"../../data/adaptors/\"><code>Adaptors</code></a> to customize the data operation.</p>\n</blockquote>\n","type":"Object|DataManager|DataResult","link":"//ej2.syncfusion.com/react/documentation/api/grid/#datasource"},{"name":"allowPaging","description":"<p>If <code>allowPaging</code> is set to true, the pager renders at the footer of the Grid. It is used to handle page navigation in the Grid.</p>\n<blockquote>\n<p>Check the <a href=\"../../grid/paging/\"><code>Paging</code></a> to configure the grid pager.</p>\n</blockquote>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/grid/#allowpaging"},{"name":"showColumnChooser","description":"<p>If <code>showColumnChooser</code> is set to true, it allows you to dynamically show or hide columns.</p>\n<blockquote>\n<p>Check the <a href=\"../../grid/columns/#column-chooser/\"><code>ColumnChooser</code></a> for its configuration.</p>\n</blockquote>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/grid/#showcolumnchooser"},{"name":"columns","description":"<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n","type":"Column[]|string[]|ColumnModel[]","link":"//ej2.syncfusion.com/react/documentation/api/grid/#columns"},{"name":"toolbar","description":"<p><code>toolbar</code> defines the ToolBar items of the Grid.\nIt contains built-in and custom toolbar items.\nIf a string value is assigned to the <code>toolbar</code> option, it is considered as the template for the whole Grid ToolBar.\nIf an array value is assigned, it is considered as the list of built-in and custom toolbar items in the Grid's Toolbar.\n&lt;br&gt;&lt;br&gt;\nThe available built-in ToolBar items are:</p>\n<ul>\n<li>Add: Adds a new record.</li>\n<li>Edit: Edits the selected record.</li>\n<li>Update: Updates the edited record.</li>\n<li>Delete: Deletes the selected record.</li>\n<li>Cancel: Cancels the edit state.</li>\n<li>Search: Searches records by the given key.</li>\n<li>Print: Prints the Grid.</li>\n<li>ExcelExport - Export the Grid to Excel(excelExport() method manually to make export.)</li>\n<li>PdfExport - Export the Grid to PDF(pdfExport() method manually to make export.)</li>\n<li>CsvExport - Export the Grid to CSV(csvExport() method manually to make export.)&lt;br&gt;&lt;br&gt;\nThe following code example implements the custom toolbar items.</li>\n</ul>\n<blockquote>\n<p>Check the <a href=\"../../grid/tool-bar/#custom-toolbar-items/\"><code>Toolbar</code></a> to customize its default items.</p>\n</blockquote>\n","type":"[]","link":"//ej2.syncfusion.com/react/documentation/api/grid/#toolbar"}],"grid/show-hide":[{"name":"dataSource","description":"<p>It is used to render grid table rows.\nIf the <code>dataSource</code> is an array of JavaScript objects,\nthen Grid will create instance of <a href=\"https://ej2.syncfusion.com/documentation/api/data/dataManager/\"><code>DataManager</code></a>\nfrom this <code>dataSource</code>.\nIf the <code>dataSource</code> is an existing <a href=\"https://ej2.syncfusion.com/documentation/api/data/dataManager/\"><code>DataManager</code></a>,\nthe Grid will not initialize a new one.</p>\n<blockquote>\n<p>Check the available <a href=\"../../data/adaptors/\"><code>Adaptors</code></a> to customize the data operation.</p>\n</blockquote>\n","type":"Object|DataManager|DataResult","link":"//ej2.syncfusion.com/react/documentation/api/grid/#datasource"},{"name":"allowPaging","description":"<p>If <code>allowPaging</code> is set to true, the pager renders at the footer of the Grid. It is used to handle page navigation in the Grid.</p>\n<blockquote>\n<p>Check the <a href=\"../../grid/paging/\"><code>Paging</code></a> to configure the grid pager.</p>\n</blockquote>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/grid/#allowpaging"},{"name":"pageSettings","description":"<p>Configures the pager in the Grid.</p>\n","type":"PageSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/grid/#pagesettings"},{"name":"columns","description":"<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n","type":"Column[]|string[]|ColumnModel[]","link":"//ej2.syncfusion.com/react/documentation/api/grid/#columns"}],"grid/column-spanning":[{"name":"dataSource","description":"<p>It is used to render grid table rows.\nIf the <code>dataSource</code> is an array of JavaScript objects,\nthen Grid will create instance of <a href=\"https://ej2.syncfusion.com/documentation/api/data/dataManager/\"><code>DataManager</code></a>\nfrom this <code>dataSource</code>.\nIf the <code>dataSource</code> is an existing <a href=\"https://ej2.syncfusion.com/documentation/api/data/dataManager/\"><code>DataManager</code></a>,\nthe Grid will not initialize a new one.</p>\n<blockquote>\n<p>Check the available <a href=\"../../data/adaptors/\"><code>Adaptors</code></a> to customize the data operation.</p>\n</blockquote>\n","type":"Object|DataManager|DataResult","link":"//ej2.syncfusion.com/react/documentation/api/grid/#datasource"},{"name":"allowTextWrap","description":"<p>If <code>allowTextWrap</code> set to true,\nthen text content will wrap to the next line when its text content exceeds the width of the Column Cells.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/grid/#allowtextwrap"},{"name":"columns","description":"<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n","type":"Column[]|string[]|ColumnModel[]","link":"//ej2.syncfusion.com/react/documentation/api/grid/#columns"},{"name":"queryCellInfo","description":"<p>Triggered every time a request is made to access cell information, element, or data.\nThis will be triggered before the cell element is appended to the Grid element.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/grid/#querycellinfo"},{"name":"gridLines","description":"<p>Defines the mode of grid lines. The available modes are,</p>\n<ul>\n<li><code>Both</code>: Displays both horizontal and vertical grid lines.</li>\n<li><code>None</code>: No grid lines are displayed.</li>\n<li><code>Horizontal</code>: Displays the horizontal grid lines only.</li>\n<li><code>Vertical</code>: Displays the vertical grid lines only.</li>\n<li><code>Default</code>: Displays grid lines based on the theme.</li>\n</ul>\n","type":"GridLine","link":"//ej2.syncfusion.com/react/documentation/api/grid/#gridlines"},{"name":"width","description":"<p>Defines the Grid width.</p>\n","type":"string|number","link":"//ej2.syncfusion.com/react/documentation/api/grid/#width"},{"name":"height","description":"<p>Defines the scrollable height of the grid content.</p>\n","type":"string|number","link":"//ej2.syncfusion.com/react/documentation/api/grid/#height"}],"grid/row-template":[{"name":"dataSource","description":"<p>It is used to render grid table rows.\nIf the <code>dataSource</code> is an array of JavaScript objects,\nthen Grid will create instance of <a href=\"https://ej2.syncfusion.com/documentation/api/data/dataManager/\"><code>DataManager</code></a>\nfrom this <code>dataSource</code>.\nIf the <code>dataSource</code> is an existing <a href=\"https://ej2.syncfusion.com/documentation/api/data/dataManager/\"><code>DataManager</code></a>,\nthe Grid will not initialize a new one.</p>\n<blockquote>\n<p>Check the available <a href=\"../../data/adaptors/\"><code>Adaptors</code></a> to customize the data operation.</p>\n</blockquote>\n","type":"Object|DataManager|DataResult","link":"//ej2.syncfusion.com/react/documentation/api/grid/#datasource"},{"name":"columns","description":"<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n","type":"Column[]|string[]|ColumnModel[]","link":"//ej2.syncfusion.com/react/documentation/api/grid/#columns"},{"name":"rowTemplate","description":"<p>The row template that renders customized rows from the given template.\nBy default, Grid renders a table row for every data source item.</p>\n<blockquote>\n<ul>\n<li>It accepts either <a href=\"../../common/template-engine/\">template string</a> or HTML element ID.</li>\n<li>The row template must be a table row.\nCheck the <a href=\"../../grid/row/\"><code>Row Template</code></a> customization.</li>\n</ul>\n</blockquote>\n","type":"string|Function","link":"//ej2.syncfusion.com/react/documentation/api/grid/#rowtemplate"}],"grid/detail-template":[{"name":"dataSource","description":"<p>It is used to render grid table rows.\nIf the <code>dataSource</code> is an array of JavaScript objects,\nthen Grid will create instance of <a href=\"https://ej2.syncfusion.com/documentation/api/data/dataManager/\"><code>DataManager</code></a>\nfrom this <code>dataSource</code>.\nIf the <code>dataSource</code> is an existing <a href=\"https://ej2.syncfusion.com/documentation/api/data/dataManager/\"><code>DataManager</code></a>,\nthe Grid will not initialize a new one.</p>\n<blockquote>\n<p>Check the available <a href=\"../../data/adaptors/\"><code>Adaptors</code></a> to customize the data operation.</p>\n</blockquote>\n","type":"Object|DataManager|DataResult","link":"//ej2.syncfusion.com/react/documentation/api/grid/#datasource"},{"name":"columns","description":"<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n","type":"Column[]|string[]|ColumnModel[]","link":"//ej2.syncfusion.com/react/documentation/api/grid/#columns"},{"name":"detailTemplate","description":"<p>The detail template allows you to show or hide additional information about a particular row.</p>\n<blockquote>\n<p>It accepts either the <a href=\"../../common/template-engine/\">template string</a> or the HTML element ID.</p>\n</blockquote>\n","type":"string|Function","link":"//ej2.syncfusion.com/react/documentation/api/grid/#detailtemplate"},{"name":"width","description":"<p>Defines the Grid width.</p>\n","type":"string|number","link":"//ej2.syncfusion.com/react/documentation/api/grid/#width"},{"name":"height","description":"<p>Defines the scrollable height of the grid content.</p>\n","type":"string|number","link":"//ej2.syncfusion.com/react/documentation/api/grid/#height"}],"grid/row-drag-drop":[{"name":"dataSource","description":"<p>It is used to render grid table rows.\nIf the <code>dataSource</code> is an array of JavaScript objects,\nthen Grid will create instance of <a href=\"https://ej2.syncfusion.com/documentation/api/data/dataManager/\"><code>DataManager</code></a>\nfrom this <code>dataSource</code>.\nIf the <code>dataSource</code> is an existing <a href=\"https://ej2.syncfusion.com/documentation/api/data/dataManager/\"><code>DataManager</code></a>,\nthe Grid will not initialize a new one.</p>\n<blockquote>\n<p>Check the available <a href=\"../../data/adaptors/\"><code>Adaptors</code></a> to customize the data operation.</p>\n</blockquote>\n","type":"Object|DataManager|DataResult","link":"//ej2.syncfusion.com/react/documentation/api/grid/#datasource"},{"name":"allowPaging","description":"<p>If <code>allowPaging</code> is set to true, the pager renders at the footer of the Grid. It is used to handle page navigation in the Grid.</p>\n<blockquote>\n<p>Check the <a href=\"../../grid/paging/\"><code>Paging</code></a> to configure the grid pager.</p>\n</blockquote>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/grid/#allowpaging"},{"name":"pageSettings","description":"<p>Configures the pager in the Grid.</p>\n","type":"PageSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/grid/#pagesettings"},{"name":"columns","description":"<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n","type":"Column[]|string[]|ColumnModel[]","link":"//ej2.syncfusion.com/react/documentation/api/grid/#columns"},{"name":"allowRowDragAndDrop","description":"<p>If <code>allowRowDragAndDrop</code> is set to true, you can drag and drop grid rows at another grid.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/grid/#allowrowdraganddrop"},{"name":"selectionSettings","description":"<p>Configures the selection settings.</p>\n","type":"SelectionSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/grid/#selectionsettings"},{"name":"rowDropSettings","description":"<p>Configures the row drop settings.</p>\n","type":"RowDropSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/grid/#rowdropsettings"},{"name":"width","description":"<p>Defines the Grid width.</p>\n","type":"string|number","link":"//ej2.syncfusion.com/react/documentation/api/grid/#width"}],"grid/drag-drop-within-grid":[{"name":"dataSource","description":"<p>It is used to render grid table rows.\nIf the <code>dataSource</code> is an array of JavaScript objects,\nthen Grid will create instance of <a href=\"https://ej2.syncfusion.com/documentation/api/data/dataManager/\"><code>DataManager</code></a>\nfrom this <code>dataSource</code>.\nIf the <code>dataSource</code> is an existing <a href=\"https://ej2.syncfusion.com/documentation/api/data/dataManager/\"><code>DataManager</code></a>,\nthe Grid will not initialize a new one.</p>\n<blockquote>\n<p>Check the available <a href=\"../../data/adaptors/\"><code>Adaptors</code></a> to customize the data operation.</p>\n</blockquote>\n","type":"Object|DataManager|DataResult","link":"//ej2.syncfusion.com/react/documentation/api/grid/#datasource"},{"name":"allowPaging","description":"<p>If <code>allowPaging</code> is set to true, the pager renders at the footer of the Grid. It is used to handle page navigation in the Grid.</p>\n<blockquote>\n<p>Check the <a href=\"../../grid/paging/\"><code>Paging</code></a> to configure the grid pager.</p>\n</blockquote>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/grid/#allowpaging"},{"name":"columns","description":"<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n","type":"Column[]|string[]|ColumnModel[]","link":"//ej2.syncfusion.com/react/documentation/api/grid/#columns"},{"name":"allowRowDragAndDrop","description":"<p>If <code>allowRowDragAndDrop</code> is set to true, you can drag and drop grid rows at another grid.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/grid/#allowrowdraganddrop"},{"name":"selectionSettings","description":"<p>Configures the selection settings.</p>\n","type":"SelectionSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/grid/#selectionsettings"},{"name":"width","description":"<p>Defines the Grid width.</p>\n","type":"string|number","link":"//ej2.syncfusion.com/react/documentation/api/grid/#width"}],"grid/row-height":[{"name":"dataSource","description":"<p>It is used to render grid table rows.\nIf the <code>dataSource</code> is an array of JavaScript objects,\nthen Grid will create instance of <a href=\"https://ej2.syncfusion.com/documentation/api/data/dataManager/\"><code>DataManager</code></a>\nfrom this <code>dataSource</code>.\nIf the <code>dataSource</code> is an existing <a href=\"https://ej2.syncfusion.com/documentation/api/data/dataManager/\"><code>DataManager</code></a>,\nthe Grid will not initialize a new one.</p>\n<blockquote>\n<p>Check the available <a href=\"../../data/adaptors/\"><code>Adaptors</code></a> to customize the data operation.</p>\n</blockquote>\n","type":"Object|DataManager|DataResult","link":"//ej2.syncfusion.com/react/documentation/api/grid/#datasource"},{"name":"toolbar","description":"<p><code>toolbar</code> defines the ToolBar items of the Grid.\nIt contains built-in and custom toolbar items.\nIf a string value is assigned to the <code>toolbar</code> option, it is considered as the template for the whole Grid ToolBar.\nIf an array value is assigned, it is considered as the list of built-in and custom toolbar items in the Grid's Toolbar.\n&lt;br&gt;&lt;br&gt;\nThe available built-in ToolBar items are:</p>\n<ul>\n<li>Add: Adds a new record.</li>\n<li>Edit: Edits the selected record.</li>\n<li>Update: Updates the edited record.</li>\n<li>Delete: Deletes the selected record.</li>\n<li>Cancel: Cancels the edit state.</li>\n<li>Search: Searches records by the given key.</li>\n<li>Print: Prints the Grid.</li>\n<li>ExcelExport - Export the Grid to Excel(excelExport() method manually to make export.)</li>\n<li>PdfExport - Export the Grid to PDF(pdfExport() method manually to make export.)</li>\n<li>CsvExport - Export the Grid to CSV(csvExport() method manually to make export.)&lt;br&gt;&lt;br&gt;\nThe following code example implements the custom toolbar items.</li>\n</ul>\n<blockquote>\n<p>Check the <a href=\"../../grid/tool-bar/#custom-toolbar-items/\"><code>Toolbar</code></a> to customize its default items.</p>\n</blockquote>\n","type":"[]","link":"//ej2.syncfusion.com/react/documentation/api/grid/#toolbar"},{"name":"height","description":"<p>Defines the scrollable height of the grid content.</p>\n","type":"string|number","link":"//ej2.syncfusion.com/react/documentation/api/grid/#height"},{"name":"columns","description":"<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n","type":"Column[]|string[]|ColumnModel[]","link":"//ej2.syncfusion.com/react/documentation/api/grid/#columns"},{"name":"rowHeight","description":"<p>Defines the height of Grid rows.</p>\n","type":"number","link":"//ej2.syncfusion.com/react/documentation/api/grid/#rowheight"},{"name":"toolbarClick","description":"<p>Triggers when toolbar item is clicked.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/grid/#toolbarclick"}],"grid/row-spanning":[{"name":"dataSource","description":"<p>It is used to render grid table rows.\nIf the <code>dataSource</code> is an array of JavaScript objects,\nthen Grid will create instance of <a href=\"https://ej2.syncfusion.com/documentation/api/data/dataManager/\"><code>DataManager</code></a>\nfrom this <code>dataSource</code>.\nIf the <code>dataSource</code> is an existing <a href=\"https://ej2.syncfusion.com/documentation/api/data/dataManager/\"><code>DataManager</code></a>,\nthe Grid will not initialize a new one.</p>\n<blockquote>\n<p>Check the available <a href=\"../../data/adaptors/\"><code>Adaptors</code></a> to customize the data operation.</p>\n</blockquote>\n","type":"Object|DataManager|DataResult","link":"//ej2.syncfusion.com/react/documentation/api/grid/#datasource"},{"name":"allowTextWrap","description":"<p>If <code>allowTextWrap</code> set to true,\nthen text content will wrap to the next line when its text content exceeds the width of the Column Cells.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/grid/#allowtextwrap"},{"name":"columns","description":"<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n","type":"Column[]|string[]|ColumnModel[]","link":"//ej2.syncfusion.com/react/documentation/api/grid/#columns"},{"name":"queryCellInfo","description":"<p>Triggered every time a request is made to access cell information, element, or data.\nThis will be triggered before the cell element is appended to the Grid element.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/grid/#querycellinfo"},{"name":"gridLines","description":"<p>Defines the mode of grid lines. The available modes are,</p>\n<ul>\n<li><code>Both</code>: Displays both horizontal and vertical grid lines.</li>\n<li><code>None</code>: No grid lines are displayed.</li>\n<li><code>Horizontal</code>: Displays the horizontal grid lines only.</li>\n<li><code>Vertical</code>: Displays the vertical grid lines only.</li>\n<li><code>Default</code>: Displays grid lines based on the theme.</li>\n</ul>\n","type":"GridLine","link":"//ej2.syncfusion.com/react/documentation/api/grid/#gridlines"},{"name":"width","description":"<p>Defines the Grid width.</p>\n","type":"string|number","link":"//ej2.syncfusion.com/react/documentation/api/grid/#width"},{"name":"height","description":"<p>Defines the scrollable height of the grid content.</p>\n","type":"string|number","link":"//ej2.syncfusion.com/react/documentation/api/grid/#height"}],"grid/normal-edit":[{"name":"dataSource","description":"<p>It is used to render grid table rows.\nIf the <code>dataSource</code> is an array of JavaScript objects,\nthen Grid will create instance of <a href=\"https://ej2.syncfusion.com/documentation/api/data/dataManager/\"><code>DataManager</code></a>\nfrom this <code>dataSource</code>.\nIf the <code>dataSource</code> is an existing <a href=\"https://ej2.syncfusion.com/documentation/api/data/dataManager/\"><code>DataManager</code></a>,\nthe Grid will not initialize a new one.</p>\n<blockquote>\n<p>Check the available <a href=\"../../data/adaptors/\"><code>Adaptors</code></a> to customize the data operation.</p>\n</blockquote>\n","type":"Object|DataManager|DataResult","link":"//ej2.syncfusion.com/react/documentation/api/grid/#datasource"},{"name":"allowPaging","description":"<p>If <code>allowPaging</code> is set to true, the pager renders at the footer of the Grid. It is used to handle page navigation in the Grid.</p>\n<blockquote>\n<p>Check the <a href=\"../../grid/paging/\"><code>Paging</code></a> to configure the grid pager.</p>\n</blockquote>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/grid/#allowpaging"},{"name":"pageSettings","description":"<p>Configures the pager in the Grid.</p>\n","type":"PageSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/grid/#pagesettings"},{"name":"columns","description":"<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n","type":"Column[]|string[]|ColumnModel[]","link":"//ej2.syncfusion.com/react/documentation/api/grid/#columns"},{"name":"editSettings","description":"<p>Configures the edit settings.</p>\n","type":"EditSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/grid/#editsettings"},{"name":"toolbar","description":"<p><code>toolbar</code> defines the ToolBar items of the Grid.\nIt contains built-in and custom toolbar items.\nIf a string value is assigned to the <code>toolbar</code> option, it is considered as the template for the whole Grid ToolBar.\nIf an array value is assigned, it is considered as the list of built-in and custom toolbar items in the Grid's Toolbar.\n&lt;br&gt;&lt;br&gt;\nThe available built-in ToolBar items are:</p>\n<ul>\n<li>Add: Adds a new record.</li>\n<li>Edit: Edits the selected record.</li>\n<li>Update: Updates the edited record.</li>\n<li>Delete: Deletes the selected record.</li>\n<li>Cancel: Cancels the edit state.</li>\n<li>Search: Searches records by the given key.</li>\n<li>Print: Prints the Grid.</li>\n<li>ExcelExport - Export the Grid to Excel(excelExport() method manually to make export.)</li>\n<li>PdfExport - Export the Grid to PDF(pdfExport() method manually to make export.)</li>\n<li>CsvExport - Export the Grid to CSV(csvExport() method manually to make export.)&lt;br&gt;&lt;br&gt;\nThe following code example implements the custom toolbar items.</li>\n</ul>\n<blockquote>\n<p>Check the <a href=\"../../grid/tool-bar/#custom-toolbar-items/\"><code>Toolbar</code></a> to customize its default items.</p>\n</blockquote>\n","type":"[]","link":"//ej2.syncfusion.com/react/documentation/api/grid/#toolbar"}],"grid/dialog-edit":[{"name":"dataSource","description":"<p>It is used to render grid table rows.\nIf the <code>dataSource</code> is an array of JavaScript objects,\nthen Grid will create instance of <a href=\"https://ej2.syncfusion.com/documentation/api/data/dataManager/\"><code>DataManager</code></a>\nfrom this <code>dataSource</code>.\nIf the <code>dataSource</code> is an existing <a href=\"https://ej2.syncfusion.com/documentation/api/data/dataManager/\"><code>DataManager</code></a>,\nthe Grid will not initialize a new one.</p>\n<blockquote>\n<p>Check the available <a href=\"../../data/adaptors/\"><code>Adaptors</code></a> to customize the data operation.</p>\n</blockquote>\n","type":"Object|DataManager|DataResult","link":"//ej2.syncfusion.com/react/documentation/api/grid/#datasource"},{"name":"allowPaging","description":"<p>If <code>allowPaging</code> is set to true, the pager renders at the footer of the Grid. It is used to handle page navigation in the Grid.</p>\n<blockquote>\n<p>Check the <a href=\"../../grid/paging/\"><code>Paging</code></a> to configure the grid pager.</p>\n</blockquote>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/grid/#allowpaging"},{"name":"pageSettings","description":"<p>Configures the pager in the Grid.</p>\n","type":"PageSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/grid/#pagesettings"},{"name":"columns","description":"<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n","type":"Column[]|string[]|ColumnModel[]","link":"//ej2.syncfusion.com/react/documentation/api/grid/#columns"},{"name":"editSettings","description":"<p>Configures the edit settings.</p>\n","type":"EditSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/grid/#editsettings"},{"name":"toolbar","description":"<p><code>toolbar</code> defines the ToolBar items of the Grid.\nIt contains built-in and custom toolbar items.\nIf a string value is assigned to the <code>toolbar</code> option, it is considered as the template for the whole Grid ToolBar.\nIf an array value is assigned, it is considered as the list of built-in and custom toolbar items in the Grid's Toolbar.\n&lt;br&gt;&lt;br&gt;\nThe available built-in ToolBar items are:</p>\n<ul>\n<li>Add: Adds a new record.</li>\n<li>Edit: Edits the selected record.</li>\n<li>Update: Updates the edited record.</li>\n<li>Delete: Deletes the selected record.</li>\n<li>Cancel: Cancels the edit state.</li>\n<li>Search: Searches records by the given key.</li>\n<li>Print: Prints the Grid.</li>\n<li>ExcelExport - Export the Grid to Excel(excelExport() method manually to make export.)</li>\n<li>PdfExport - Export the Grid to PDF(pdfExport() method manually to make export.)</li>\n<li>CsvExport - Export the Grid to CSV(csvExport() method manually to make export.)&lt;br&gt;&lt;br&gt;\nThe following code example implements the custom toolbar items.</li>\n</ul>\n<blockquote>\n<p>Check the <a href=\"../../grid/tool-bar/#custom-toolbar-items/\"><code>Toolbar</code></a> to customize its default items.</p>\n</blockquote>\n","type":"[]","link":"//ej2.syncfusion.com/react/documentation/api/grid/#toolbar"}],"grid/dialog-template":[{"name":"dataSource","description":"<p>It is used to render grid table rows.\nIf the <code>dataSource</code> is an array of JavaScript objects,\nthen Grid will create instance of <a href=\"https://ej2.syncfusion.com/documentation/api/data/dataManager/\"><code>DataManager</code></a>\nfrom this <code>dataSource</code>.\nIf the <code>dataSource</code> is an existing <a href=\"https://ej2.syncfusion.com/documentation/api/data/dataManager/\"><code>DataManager</code></a>,\nthe Grid will not initialize a new one.</p>\n<blockquote>\n<p>Check the available <a href=\"../../data/adaptors/\"><code>Adaptors</code></a> to customize the data operation.</p>\n</blockquote>\n","type":"Object|DataManager|DataResult","link":"//ej2.syncfusion.com/react/documentation/api/grid/#datasource"},{"name":"allowPaging","description":"<p>If <code>allowPaging</code> is set to true, the pager renders at the footer of the Grid. It is used to handle page navigation in the Grid.</p>\n<blockquote>\n<p>Check the <a href=\"../../grid/paging/\"><code>Paging</code></a> to configure the grid pager.</p>\n</blockquote>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/grid/#allowpaging"},{"name":"pageSettings","description":"<p>Configures the pager in the Grid.</p>\n","type":"PageSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/grid/#pagesettings"},{"name":"columns","description":"<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n","type":"Column[]|string[]|ColumnModel[]","link":"//ej2.syncfusion.com/react/documentation/api/grid/#columns"},{"name":"editSettings","description":"<p>Configures the edit settings.</p>\n","type":"EditSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/grid/#editsettings"},{"name":"toolbar","description":"<p><code>toolbar</code> defines the ToolBar items of the Grid.\nIt contains built-in and custom toolbar items.\nIf a string value is assigned to the <code>toolbar</code> option, it is considered as the template for the whole Grid ToolBar.\nIf an array value is assigned, it is considered as the list of built-in and custom toolbar items in the Grid's Toolbar.\n&lt;br&gt;&lt;br&gt;\nThe available built-in ToolBar items are:</p>\n<ul>\n<li>Add: Adds a new record.</li>\n<li>Edit: Edits the selected record.</li>\n<li>Update: Updates the edited record.</li>\n<li>Delete: Deletes the selected record.</li>\n<li>Cancel: Cancels the edit state.</li>\n<li>Search: Searches records by the given key.</li>\n<li>Print: Prints the Grid.</li>\n<li>ExcelExport - Export the Grid to Excel(excelExport() method manually to make export.)</li>\n<li>PdfExport - Export the Grid to PDF(pdfExport() method manually to make export.)</li>\n<li>CsvExport - Export the Grid to CSV(csvExport() method manually to make export.)&lt;br&gt;&lt;br&gt;\nThe following code example implements the custom toolbar items.</li>\n</ul>\n<blockquote>\n<p>Check the <a href=\"../../grid/tool-bar/#custom-toolbar-items/\"><code>Toolbar</code></a> to customize its default items.</p>\n</blockquote>\n","type":"[]","link":"//ej2.syncfusion.com/react/documentation/api/grid/#toolbar"}],"grid/batch":[{"name":"dataSource","description":"<p>It is used to render grid table rows.\nIf the <code>dataSource</code> is an array of JavaScript objects,\nthen Grid will create instance of <a href=\"https://ej2.syncfusion.com/documentation/api/data/dataManager/\"><code>DataManager</code></a>\nfrom this <code>dataSource</code>.\nIf the <code>dataSource</code> is an existing <a href=\"https://ej2.syncfusion.com/documentation/api/data/dataManager/\"><code>DataManager</code></a>,\nthe Grid will not initialize a new one.</p>\n<blockquote>\n<p>Check the available <a href=\"../../data/adaptors/\"><code>Adaptors</code></a> to customize the data operation.</p>\n</blockquote>\n","type":"Object|DataManager|DataResult","link":"//ej2.syncfusion.com/react/documentation/api/grid/#datasource"},{"name":"allowPaging","description":"<p>If <code>allowPaging</code> is set to true, the pager renders at the footer of the Grid. It is used to handle page navigation in the Grid.</p>\n<blockquote>\n<p>Check the <a href=\"../../grid/paging/\"><code>Paging</code></a> to configure the grid pager.</p>\n</blockquote>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/grid/#allowpaging"},{"name":"pageSettings","description":"<p>Configures the pager in the Grid.</p>\n","type":"PageSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/grid/#pagesettings"},{"name":"columns","description":"<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n","type":"Column[]|string[]|ColumnModel[]","link":"//ej2.syncfusion.com/react/documentation/api/grid/#columns"},{"name":"editSettings","description":"<p>Configures the edit settings.</p>\n","type":"EditSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/grid/#editsettings"},{"name":"toolbar","description":"<p><code>toolbar</code> defines the ToolBar items of the Grid.\nIt contains built-in and custom toolbar items.\nIf a string value is assigned to the <code>toolbar</code> option, it is considered as the template for the whole Grid ToolBar.\nIf an array value is assigned, it is considered as the list of built-in and custom toolbar items in the Grid's Toolbar.\n&lt;br&gt;&lt;br&gt;\nThe available built-in ToolBar items are:</p>\n<ul>\n<li>Add: Adds a new record.</li>\n<li>Edit: Edits the selected record.</li>\n<li>Update: Updates the edited record.</li>\n<li>Delete: Deletes the selected record.</li>\n<li>Cancel: Cancels the edit state.</li>\n<li>Search: Searches records by the given key.</li>\n<li>Print: Prints the Grid.</li>\n<li>ExcelExport - Export the Grid to Excel(excelExport() method manually to make export.)</li>\n<li>PdfExport - Export the Grid to PDF(pdfExport() method manually to make export.)</li>\n<li>CsvExport - Export the Grid to CSV(csvExport() method manually to make export.)&lt;br&gt;&lt;br&gt;\nThe following code example implements the custom toolbar items.</li>\n</ul>\n<blockquote>\n<p>Check the <a href=\"../../grid/tool-bar/#custom-toolbar-items/\"><code>Toolbar</code></a> to customize its default items.</p>\n</blockquote>\n","type":"[]","link":"//ej2.syncfusion.com/react/documentation/api/grid/#toolbar"}],"grid/command-column":[{"name":"dataSource","description":"<p>It is used to render grid table rows.\nIf the <code>dataSource</code> is an array of JavaScript objects,\nthen Grid will create instance of <a href=\"https://ej2.syncfusion.com/documentation/api/data/dataManager/\"><code>DataManager</code></a>\nfrom this <code>dataSource</code>.\nIf the <code>dataSource</code> is an existing <a href=\"https://ej2.syncfusion.com/documentation/api/data/dataManager/\"><code>DataManager</code></a>,\nthe Grid will not initialize a new one.</p>\n<blockquote>\n<p>Check the available <a href=\"../../data/adaptors/\"><code>Adaptors</code></a> to customize the data operation.</p>\n</blockquote>\n","type":"Object|DataManager|DataResult","link":"//ej2.syncfusion.com/react/documentation/api/grid/#datasource"},{"name":"allowPaging","description":"<p>If <code>allowPaging</code> is set to true, the pager renders at the footer of the Grid. It is used to handle page navigation in the Grid.</p>\n<blockquote>\n<p>Check the <a href=\"../../grid/paging/\"><code>Paging</code></a> to configure the grid pager.</p>\n</blockquote>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/grid/#allowpaging"},{"name":"showColumnChooser","description":"<p>If <code>showColumnChooser</code> is set to true, it allows you to dynamically show or hide columns.</p>\n<blockquote>\n<p>Check the <a href=\"../../grid/columns/#column-chooser/\"><code>ColumnChooser</code></a> for its configuration.</p>\n</blockquote>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/grid/#showcolumnchooser"},{"name":"columns","description":"<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n","type":"Column[]|string[]|ColumnModel[]","link":"//ej2.syncfusion.com/react/documentation/api/grid/#columns"},{"name":"toolbar","description":"<p><code>toolbar</code> defines the ToolBar items of the Grid.\nIt contains built-in and custom toolbar items.\nIf a string value is assigned to the <code>toolbar</code> option, it is considered as the template for the whole Grid ToolBar.\nIf an array value is assigned, it is considered as the list of built-in and custom toolbar items in the Grid's Toolbar.\n&lt;br&gt;&lt;br&gt;\nThe available built-in ToolBar items are:</p>\n<ul>\n<li>Add: Adds a new record.</li>\n<li>Edit: Edits the selected record.</li>\n<li>Update: Updates the edited record.</li>\n<li>Delete: Deletes the selected record.</li>\n<li>Cancel: Cancels the edit state.</li>\n<li>Search: Searches records by the given key.</li>\n<li>Print: Prints the Grid.</li>\n<li>ExcelExport - Export the Grid to Excel(excelExport() method manually to make export.)</li>\n<li>PdfExport - Export the Grid to PDF(pdfExport() method manually to make export.)</li>\n<li>CsvExport - Export the Grid to CSV(csvExport() method manually to make export.)&lt;br&gt;&lt;br&gt;\nThe following code example implements the custom toolbar items.</li>\n</ul>\n<blockquote>\n<p>Check the <a href=\"../../grid/tool-bar/#custom-toolbar-items/\"><code>Toolbar</code></a> to customize its default items.</p>\n</blockquote>\n","type":"[]","link":"//ej2.syncfusion.com/react/documentation/api/grid/#toolbar"}],"grid/sorting":[{"name":"dataSource","description":"<p>It is used to render grid table rows.\nIf the <code>dataSource</code> is an array of JavaScript objects,\nthen Grid will create instance of <a href=\"https://ej2.syncfusion.com/documentation/api/data/dataManager/\"><code>DataManager</code></a>\nfrom this <code>dataSource</code>.\nIf the <code>dataSource</code> is an existing <a href=\"https://ej2.syncfusion.com/documentation/api/data/dataManager/\"><code>DataManager</code></a>,\nthe Grid will not initialize a new one.</p>\n<blockquote>\n<p>Check the available <a href=\"../../data/adaptors/\"><code>Adaptors</code></a> to customize the data operation.</p>\n</blockquote>\n","type":"Object|DataManager|DataResult","link":"//ej2.syncfusion.com/react/documentation/api/grid/#datasource"},{"name":"allowSelection","description":"<p>If <code>allowSelection</code> is set to true, it allows selection of (highlight row) Grid records by clicking it.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/grid/#allowselection"},{"name":"selectionSettings","description":"<p>Configures the selection settings.</p>\n","type":"SelectionSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/grid/#selectionsettings"},{"name":"columns","description":"<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n","type":"Column[]|string[]|ColumnModel[]","link":"//ej2.syncfusion.com/react/documentation/api/grid/#columns"},{"name":"enableHover","description":"<p>If <code>enableHover</code> is set to true, the row hover is enabled in the Grid.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/grid/#enablehover"}],"grid/filtering":[{"name":"allowFiltering","description":"<p>If <code>allowFiltering</code> set to true the filter bar will be displayed.\nIf set to false the filter bar will not be displayed.\nFilter bar allows the user to filter grid records with required criteria.</p>\n<blockquote>\n<p>Check the <a href=\"../../grid/filtering/\"><code>Filtering</code></a> to customize its default behavior.</p>\n</blockquote>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/grid/#allowfiltering"},{"name":"dataSource","description":"<p>It is used to render grid table rows.\nIf the <code>dataSource</code> is an array of JavaScript objects,\nthen Grid will create instance of <a href=\"https://ej2.syncfusion.com/documentation/api/data/dataManager/\"><code>DataManager</code></a>\nfrom this <code>dataSource</code>.\nIf the <code>dataSource</code> is an existing <a href=\"https://ej2.syncfusion.com/documentation/api/data/dataManager/\"><code>DataManager</code></a>,\nthe Grid will not initialize a new one.</p>\n<blockquote>\n<p>Check the available <a href=\"../../data/adaptors/\"><code>Adaptors</code></a> to customize the data operation.</p>\n</blockquote>\n","type":"Object|DataManager|DataResult","link":"//ej2.syncfusion.com/react/documentation/api/grid/#datasource"},{"name":"allowPaging","description":"<p>If <code>allowPaging</code> is set to true, the pager renders at the footer of the Grid. It is used to handle page navigation in the Grid.</p>\n<blockquote>\n<p>Check the <a href=\"../../grid/paging/\"><code>Paging</code></a> to configure the grid pager.</p>\n</blockquote>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/grid/#allowpaging"},{"name":"pageSettings","description":"<p>Configures the pager in the Grid.</p>\n","type":"PageSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/grid/#pagesettings"},{"name":"columns","description":"<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n","type":"Column[]|string[]|ColumnModel[]","link":"//ej2.syncfusion.com/react/documentation/api/grid/#columns"}],"grid/filter-template":[{"name":"allowFiltering","description":"<p>If <code>allowFiltering</code> set to true the filter bar will be displayed.\nIf set to false the filter bar will not be displayed.\nFilter bar allows the user to filter grid records with required criteria.</p>\n<blockquote>\n<p>Check the <a href=\"../../grid/filtering/\"><code>Filtering</code></a> to customize its default behavior.</p>\n</blockquote>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/grid/#allowfiltering"},{"name":"dataSource","description":"<p>It is used to render grid table rows.\nIf the <code>dataSource</code> is an array of JavaScript objects,\nthen Grid will create instance of <a href=\"https://ej2.syncfusion.com/documentation/api/data/dataManager/\"><code>DataManager</code></a>\nfrom this <code>dataSource</code>.\nIf the <code>dataSource</code> is an existing <a href=\"https://ej2.syncfusion.com/documentation/api/data/dataManager/\"><code>DataManager</code></a>,\nthe Grid will not initialize a new one.</p>\n<blockquote>\n<p>Check the available <a href=\"../../data/adaptors/\"><code>Adaptors</code></a> to customize the data operation.</p>\n</blockquote>\n","type":"Object|DataManager|DataResult","link":"//ej2.syncfusion.com/react/documentation/api/grid/#datasource"},{"name":"allowPaging","description":"<p>If <code>allowPaging</code> is set to true, the pager renders at the footer of the Grid. It is used to handle page navigation in the Grid.</p>\n<blockquote>\n<p>Check the <a href=\"../../grid/paging/\"><code>Paging</code></a> to configure the grid pager.</p>\n</blockquote>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/grid/#allowpaging"},{"name":"pageSettings","description":"<p>Configures the pager in the Grid.</p>\n","type":"PageSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/grid/#pagesettings"},{"name":"columns","description":"<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n","type":"Column[]|string[]|ColumnModel[]","link":"//ej2.syncfusion.com/react/documentation/api/grid/#columns"}],"grid/filter-menu":[{"name":"allowFiltering","description":"<p>If <code>allowFiltering</code> set to true the filter bar will be displayed.\nIf set to false the filter bar will not be displayed.\nFilter bar allows the user to filter grid records with required criteria.</p>\n<blockquote>\n<p>Check the <a href=\"../../grid/filtering/\"><code>Filtering</code></a> to customize its default behavior.</p>\n</blockquote>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/grid/#allowfiltering"},{"name":"filterSettings","description":"<p>Configures the filter settings of the Grid.</p>\n","type":"FilterSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/grid/#filtersettings"},{"name":"dataSource","description":"<p>It is used to render grid table rows.\nIf the <code>dataSource</code> is an array of JavaScript objects,\nthen Grid will create instance of <a href=\"https://ej2.syncfusion.com/documentation/api/data/dataManager/\"><code>DataManager</code></a>\nfrom this <code>dataSource</code>.\nIf the <code>dataSource</code> is an existing <a href=\"https://ej2.syncfusion.com/documentation/api/data/dataManager/\"><code>DataManager</code></a>,\nthe Grid will not initialize a new one.</p>\n<blockquote>\n<p>Check the available <a href=\"../../data/adaptors/\"><code>Adaptors</code></a> to customize the data operation.</p>\n</blockquote>\n","type":"Object|DataManager|DataResult","link":"//ej2.syncfusion.com/react/documentation/api/grid/#datasource"},{"name":"allowPaging","description":"<p>If <code>allowPaging</code> is set to true, the pager renders at the footer of the Grid. It is used to handle page navigation in the Grid.</p>\n<blockquote>\n<p>Check the <a href=\"../../grid/paging/\"><code>Paging</code></a> to configure the grid pager.</p>\n</blockquote>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/grid/#allowpaging"},{"name":"pageSettings","description":"<p>Configures the pager in the Grid.</p>\n","type":"PageSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/grid/#pagesettings"},{"name":"columns","description":"<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n","type":"Column[]|string[]|ColumnModel[]","link":"//ej2.syncfusion.com/react/documentation/api/grid/#columns"}],"grid/searching":[{"name":"dataSource","description":"<p>It is used to render grid table rows.\nIf the <code>dataSource</code> is an array of JavaScript objects,\nthen Grid will create instance of <a href=\"https://ej2.syncfusion.com/documentation/api/data/dataManager/\"><code>DataManager</code></a>\nfrom this <code>dataSource</code>.\nIf the <code>dataSource</code> is an existing <a href=\"https://ej2.syncfusion.com/documentation/api/data/dataManager/\"><code>DataManager</code></a>,\nthe Grid will not initialize a new one.</p>\n<blockquote>\n<p>Check the available <a href=\"../../data/adaptors/\"><code>Adaptors</code></a> to customize the data operation.</p>\n</blockquote>\n","type":"Object|DataManager|DataResult","link":"//ej2.syncfusion.com/react/documentation/api/grid/#datasource"},{"name":"allowPaging","description":"<p>If <code>allowPaging</code> is set to true, the pager renders at the footer of the Grid. It is used to handle page navigation in the Grid.</p>\n<blockquote>\n<p>Check the <a href=\"../../grid/paging/\"><code>Paging</code></a> to configure the grid pager.</p>\n</blockquote>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/grid/#allowpaging"},{"name":"pageSettings","description":"<p>Configures the pager in the Grid.</p>\n","type":"PageSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/grid/#pagesettings"},{"name":"columns","description":"<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n","type":"Column[]|string[]|ColumnModel[]","link":"//ej2.syncfusion.com/react/documentation/api/grid/#columns"},{"name":"toolbar","description":"<p><code>toolbar</code> defines the ToolBar items of the Grid.\nIt contains built-in and custom toolbar items.\nIf a string value is assigned to the <code>toolbar</code> option, it is considered as the template for the whole Grid ToolBar.\nIf an array value is assigned, it is considered as the list of built-in and custom toolbar items in the Grid's Toolbar.\n&lt;br&gt;&lt;br&gt;\nThe available built-in ToolBar items are:</p>\n<ul>\n<li>Add: Adds a new record.</li>\n<li>Edit: Edits the selected record.</li>\n<li>Update: Updates the edited record.</li>\n<li>Delete: Deletes the selected record.</li>\n<li>Cancel: Cancels the edit state.</li>\n<li>Search: Searches records by the given key.</li>\n<li>Print: Prints the Grid.</li>\n<li>ExcelExport - Export the Grid to Excel(excelExport() method manually to make export.)</li>\n<li>PdfExport - Export the Grid to PDF(pdfExport() method manually to make export.)</li>\n<li>CsvExport - Export the Grid to CSV(csvExport() method manually to make export.)&lt;br&gt;&lt;br&gt;\nThe following code example implements the custom toolbar items.</li>\n</ul>\n<blockquote>\n<p>Check the <a href=\"../../grid/tool-bar/#custom-toolbar-items/\"><code>Toolbar</code></a> to customize its default items.</p>\n</blockquote>\n","type":"[]","link":"//ej2.syncfusion.com/react/documentation/api/grid/#toolbar"}],"grid/paging":[{"name":"dataSource","description":"<p>It is used to render grid table rows.\nIf the <code>dataSource</code> is an array of JavaScript objects,\nthen Grid will create instance of <a href=\"https://ej2.syncfusion.com/documentation/api/data/dataManager/\"><code>DataManager</code></a>\nfrom this <code>dataSource</code>.\nIf the <code>dataSource</code> is an existing <a href=\"https://ej2.syncfusion.com/documentation/api/data/dataManager/\"><code>DataManager</code></a>,\nthe Grid will not initialize a new one.</p>\n<blockquote>\n<p>Check the available <a href=\"../../data/adaptors/\"><code>Adaptors</code></a> to customize the data operation.</p>\n</blockquote>\n","type":"Object|DataManager|DataResult","link":"//ej2.syncfusion.com/react/documentation/api/grid/#datasource"},{"name":"allowPaging","description":"<p>If <code>allowPaging</code> is set to true, the pager renders at the footer of the Grid. It is used to handle page navigation in the Grid.</p>\n<blockquote>\n<p>Check the <a href=\"../../grid/paging/\"><code>Paging</code></a> to configure the grid pager.</p>\n</blockquote>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/grid/#allowpaging"},{"name":"pageSettings","description":"<p>Configures the pager in the Grid.</p>\n","type":"PageSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/grid/#pagesettings"},{"name":"columns","description":"<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n","type":"Column[]|string[]|ColumnModel[]","link":"//ej2.syncfusion.com/react/documentation/api/grid/#columns"}],"grid/grouping":[{"name":"allowPaging","description":"<p>If <code>allowPaging</code> is set to true, the pager renders at the footer of the Grid. It is used to handle page navigation in the Grid.</p>\n<blockquote>\n<p>Check the <a href=\"../../grid/paging/\"><code>Paging</code></a> to configure the grid pager.</p>\n</blockquote>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/grid/#allowpaging"},{"name":"allowSorting","description":"<p>If <code>allowSorting</code> is set to true, it allows sorting of grid records when column header is clicked.</p>\n<blockquote>\n<p>Check the <a href=\"../../grid/sorting/\"><code>Sorting</code></a> to customize its default behavior.</p>\n</blockquote>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/grid/#allowsorting"},{"name":"groupSettings","description":"<p>Configures the group settings.</p>\n","type":"GroupSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/grid/#groupsettings"},{"name":"pageSettings","description":"<p>Configures the pager in the Grid.</p>\n","type":"PageSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/grid/#pagesettings"},{"name":"allowGrouping","description":"<p>If <code>allowGrouping</code> set to true, then it will allow the user to dynamically group or ungroup columns.\nGrouping can be done by drag and drop columns from column header to group drop area.</p>\n<blockquote>\n<p>Check the <a href=\"../../grid/grouping/\"><code>Grouping</code></a> to customize its default behavior.</p>\n</blockquote>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/grid/#allowgrouping"}],"grid/aggregate-default":[{"name":"dataSource","description":"<p>It is used to render grid table rows.\nIf the <code>dataSource</code> is an array of JavaScript objects,\nthen Grid will create instance of <a href=\"https://ej2.syncfusion.com/documentation/api/data/dataManager/\"><code>DataManager</code></a>\nfrom this <code>dataSource</code>.\nIf the <code>dataSource</code> is an existing <a href=\"https://ej2.syncfusion.com/documentation/api/data/dataManager/\"><code>DataManager</code></a>,\nthe Grid will not initialize a new one.</p>\n<blockquote>\n<p>Check the available <a href=\"../../data/adaptors/\"><code>Adaptors</code></a> to customize the data operation.</p>\n</blockquote>\n","type":"Object|DataManager|DataResult","link":"//ej2.syncfusion.com/react/documentation/api/grid/#datasource"},{"name":"allowPaging","description":"<p>If <code>allowPaging</code> is set to true, the pager renders at the footer of the Grid. It is used to handle page navigation in the Grid.</p>\n<blockquote>\n<p>Check the <a href=\"../../grid/paging/\"><code>Paging</code></a> to configure the grid pager.</p>\n</blockquote>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/grid/#allowpaging"},{"name":"pageSettings","description":"<p>Configures the pager in the Grid.</p>\n","type":"PageSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/grid/#pagesettings"},{"name":"columns","description":"<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n","type":"Column[]|string[]|ColumnModel[]","link":"//ej2.syncfusion.com/react/documentation/api/grid/#columns"}],"grid/aggregate-group":[{"name":"dataSource","description":"<p>It is used to render grid table rows.\nIf the <code>dataSource</code> is an array of JavaScript objects,\nthen Grid will create instance of <a href=\"https://ej2.syncfusion.com/documentation/api/data/dataManager/\"><code>DataManager</code></a>\nfrom this <code>dataSource</code>.\nIf the <code>dataSource</code> is an existing <a href=\"https://ej2.syncfusion.com/documentation/api/data/dataManager/\"><code>DataManager</code></a>,\nthe Grid will not initialize a new one.</p>\n<blockquote>\n<p>Check the available <a href=\"../../data/adaptors/\"><code>Adaptors</code></a> to customize the data operation.</p>\n</blockquote>\n","type":"Object|DataManager|DataResult","link":"//ej2.syncfusion.com/react/documentation/api/grid/#datasource"},{"name":"allowPaging","description":"<p>If <code>allowPaging</code> is set to true, the pager renders at the footer of the Grid. It is used to handle page navigation in the Grid.</p>\n<blockquote>\n<p>Check the <a href=\"../../grid/paging/\"><code>Paging</code></a> to configure the grid pager.</p>\n</blockquote>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/grid/#allowpaging"},{"name":"pageSettings","description":"<p>Configures the pager in the Grid.</p>\n","type":"PageSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/grid/#pagesettings"},{"name":"columns","description":"<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n","type":"Column[]|string[]|ColumnModel[]","link":"//ej2.syncfusion.com/react/documentation/api/grid/#columns"}],"grid/reactive-aggregate":[{"name":"dataSource","description":"<p>It is used to render grid table rows.\nIf the <code>dataSource</code> is an array of JavaScript objects,\nthen Grid will create instance of <a href=\"https://ej2.syncfusion.com/documentation/api/data/dataManager/\"><code>DataManager</code></a>\nfrom this <code>dataSource</code>.\nIf the <code>dataSource</code> is an existing <a href=\"https://ej2.syncfusion.com/documentation/api/data/dataManager/\"><code>DataManager</code></a>,\nthe Grid will not initialize a new one.</p>\n<blockquote>\n<p>Check the available <a href=\"../../data/adaptors/\"><code>Adaptors</code></a> to customize the data operation.</p>\n</blockquote>\n","type":"Object|DataManager|DataResult","link":"//ej2.syncfusion.com/react/documentation/api/grid/#datasource"},{"name":"allowPaging","description":"<p>If <code>allowPaging</code> is set to true, the pager renders at the footer of the Grid. It is used to handle page navigation in the Grid.</p>\n<blockquote>\n<p>Check the <a href=\"../../grid/paging/\"><code>Paging</code></a> to configure the grid pager.</p>\n</blockquote>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/grid/#allowpaging"},{"name":"pageSettings","description":"<p>Configures the pager in the Grid.</p>\n","type":"PageSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/grid/#pagesettings"},{"name":"columns","description":"<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n","type":"Column[]|string[]|ColumnModel[]","link":"//ej2.syncfusion.com/react/documentation/api/grid/#columns"}],"grid/selection":[{"name":"dataSource","description":"<p>It is used to render grid table rows.\nIf the <code>dataSource</code> is an array of JavaScript objects,\nthen Grid will create instance of <a href=\"https://ej2.syncfusion.com/documentation/api/data/dataManager/\"><code>DataManager</code></a>\nfrom this <code>dataSource</code>.\nIf the <code>dataSource</code> is an existing <a href=\"https://ej2.syncfusion.com/documentation/api/data/dataManager/\"><code>DataManager</code></a>,\nthe Grid will not initialize a new one.</p>\n<blockquote>\n<p>Check the available <a href=\"../../data/adaptors/\"><code>Adaptors</code></a> to customize the data operation.</p>\n</blockquote>\n","type":"Object|DataManager|DataResult","link":"//ej2.syncfusion.com/react/documentation/api/grid/#datasource"},{"name":"allowSelection","description":"<p>If <code>allowSelection</code> is set to true, it allows selection of (highlight row) Grid records by clicking it.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/grid/#allowselection"},{"name":"selectionSettings","description":"<p>Configures the selection settings.</p>\n","type":"SelectionSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/grid/#selectionsettings"},{"name":"enableHover","description":"<p>If <code>enableHover</code> is set to true, the row hover is enabled in the Grid.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/grid/#enablehover"},{"name":"columns","description":"<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n","type":"Column[]|string[]|ColumnModel[]","link":"//ej2.syncfusion.com/react/documentation/api/grid/#columns"}],"grid/selection-api":[{"name":"dataSource","description":"<p>It is used to render grid table rows.\nIf the <code>dataSource</code> is an array of JavaScript objects,\nthen Grid will create instance of <a href=\"https://ej2.syncfusion.com/documentation/api/data/dataManager/\"><code>DataManager</code></a>\nfrom this <code>dataSource</code>.\nIf the <code>dataSource</code> is an existing <a href=\"https://ej2.syncfusion.com/documentation/api/data/dataManager/\"><code>DataManager</code></a>,\nthe Grid will not initialize a new one.</p>\n<blockquote>\n<p>Check the available <a href=\"../../data/adaptors/\"><code>Adaptors</code></a> to customize the data operation.</p>\n</blockquote>\n","type":"Object|DataManager|DataResult","link":"//ej2.syncfusion.com/react/documentation/api/grid/#datasource"},{"name":"allowPaging","description":"<p>If <code>allowPaging</code> is set to true, the pager renders at the footer of the Grid. It is used to handle page navigation in the Grid.</p>\n<blockquote>\n<p>Check the <a href=\"../../grid/paging/\"><code>Paging</code></a> to configure the grid pager.</p>\n</blockquote>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/grid/#allowpaging"},{"name":"pageSettings","description":"<p>Configures the pager in the Grid.</p>\n","type":"PageSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/grid/#pagesettings"},{"name":"columns","description":"<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n","type":"Column[]|string[]|ColumnModel[]","link":"//ej2.syncfusion.com/react/documentation/api/grid/#columns"},{"name":"allowSelection","description":"<p>If <code>allowSelection</code> is set to true, it allows selection of (highlight row) Grid records by clicking it.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/grid/#allowselection"},{"name":"selectionSettings","description":"<p>Configures the selection settings.</p>\n","type":"SelectionSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/grid/#selectionsettings"},{"name":"enableHover","description":"<p>If <code>enableHover</code> is set to true, the row hover is enabled in the Grid.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/grid/#enablehover"}],"grid/checkbox-selection":[{"name":"dataSource","description":"<p>It is used to render grid table rows.\nIf the <code>dataSource</code> is an array of JavaScript objects,\nthen Grid will create instance of <a href=\"https://ej2.syncfusion.com/documentation/api/data/dataManager/\"><code>DataManager</code></a>\nfrom this <code>dataSource</code>.\nIf the <code>dataSource</code> is an existing <a href=\"https://ej2.syncfusion.com/documentation/api/data/dataManager/\"><code>DataManager</code></a>,\nthe Grid will not initialize a new one.</p>\n<blockquote>\n<p>Check the available <a href=\"../../data/adaptors/\"><code>Adaptors</code></a> to customize the data operation.</p>\n</blockquote>\n","type":"Object|DataManager|DataResult","link":"//ej2.syncfusion.com/react/documentation/api/grid/#datasource"},{"name":"allowPaging","description":"<p>If <code>allowPaging</code> is set to true, the pager renders at the footer of the Grid. It is used to handle page navigation in the Grid.</p>\n<blockquote>\n<p>Check the <a href=\"../../grid/paging/\"><code>Paging</code></a> to configure the grid pager.</p>\n</blockquote>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/grid/#allowpaging"},{"name":"pageSettings","description":"<p>Configures the pager in the Grid.</p>\n","type":"PageSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/grid/#pagesettings"},{"name":"columns","description":"<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n","type":"Column[]|string[]|ColumnModel[]","link":"//ej2.syncfusion.com/react/documentation/api/grid/#columns"},{"name":"allowSelection","description":"<p>If <code>allowSelection</code> is set to true, it allows selection of (highlight row) Grid records by clicking it.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/grid/#allowselection"},{"name":"selectionSettings","description":"<p>Configures the selection settings.</p>\n","type":"SelectionSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/grid/#selectionsettings"},{"name":"enableHover","description":"<p>If <code>enableHover</code> is set to true, the row hover is enabled in the Grid.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/grid/#enablehover"}],"grid/hierarchy":[{"name":"dataSource","description":"<p>It is used to render grid table rows.\nIf the <code>dataSource</code> is an array of JavaScript objects,\nthen Grid will create instance of <a href=\"https://ej2.syncfusion.com/documentation/api/data/dataManager/\"><code>DataManager</code></a>\nfrom this <code>dataSource</code>.\nIf the <code>dataSource</code> is an existing <a href=\"https://ej2.syncfusion.com/documentation/api/data/dataManager/\"><code>DataManager</code></a>,\nthe Grid will not initialize a new one.</p>\n<blockquote>\n<p>Check the available <a href=\"../../data/adaptors/\"><code>Adaptors</code></a> to customize the data operation.</p>\n</blockquote>\n","type":"Object|DataManager|DataResult","link":"//ej2.syncfusion.com/react/documentation/api/grid/#datasource"},{"name":"allowSorting","description":"<p>If <code>allowSorting</code> is set to true, it allows sorting of grid records when column header is clicked.</p>\n<blockquote>\n<p>Check the <a href=\"../../grid/sorting/\"><code>Sorting</code></a> to customize its default behavior.</p>\n</blockquote>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/grid/#allowsorting"},{"name":"columns","description":"<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n","type":"Column[]|string[]|ColumnModel[]","link":"//ej2.syncfusion.com/react/documentation/api/grid/#columns"},{"name":"detailDataBound","description":"<p>Triggers after detail row expands.</p>\n<blockquote>\n<p>This event triggers at initial expand.</p>\n</blockquote>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/grid/#detaildatabound"},{"name":"dataBound","description":"<p>Triggers when data source is populated in the Grid.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/grid/#databound"},{"name":"created","description":"<p>Triggers when the component is created.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/grid/#created"},{"name":"childGrid","description":"<p>Defines Grid options to render child Grid.\nIt requires the <a href=\"./#querystring\"><code>queryString</code></a> for parent\nand child relationship.</p>\n<blockquote>\n<p>Check the <a href=\"../../grid/hierarchy-grid/\"><code>Child Grid</code></a> for its configuration.</p>\n</blockquote>\n","type":"GridModel","link":"//ej2.syncfusion.com/react/documentation/api/grid/#childgrid"}],"grid/master-detail":[{"name":"dataSource","description":"<p>It is used to render grid table rows.\nIf the <code>dataSource</code> is an array of JavaScript objects,\nthen Grid will create instance of <a href=\"https://ej2.syncfusion.com/documentation/api/data/dataManager/\"><code>DataManager</code></a>\nfrom this <code>dataSource</code>.\nIf the <code>dataSource</code> is an existing <a href=\"https://ej2.syncfusion.com/documentation/api/data/dataManager/\"><code>DataManager</code></a>,\nthe Grid will not initialize a new one.</p>\n<blockquote>\n<p>Check the available <a href=\"../../data/adaptors/\"><code>Adaptors</code></a> to customize the data operation.</p>\n</blockquote>\n","type":"Object|DataManager|DataResult","link":"//ej2.syncfusion.com/react/documentation/api/grid/#datasource"},{"name":"allowSelection","description":"<p>If <code>allowSelection</code> is set to true, it allows selection of (highlight row) Grid records by clicking it.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/grid/#allowselection"},{"name":"rowSelected","description":"<p>Triggers after a row is selected.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/grid/#rowselected"},{"name":"columns","description":"<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n","type":"Column[]|string[]|ColumnModel[]","link":"//ej2.syncfusion.com/react/documentation/api/grid/#columns"}],"grid/scrolling":[{"name":"dataSource","description":"<p>It is used to render grid table rows.\nIf the <code>dataSource</code> is an array of JavaScript objects,\nthen Grid will create instance of <a href=\"https://ej2.syncfusion.com/documentation/api/data/dataManager/\"><code>DataManager</code></a>\nfrom this <code>dataSource</code>.\nIf the <code>dataSource</code> is an existing <a href=\"https://ej2.syncfusion.com/documentation/api/data/dataManager/\"><code>DataManager</code></a>,\nthe Grid will not initialize a new one.</p>\n<blockquote>\n<p>Check the available <a href=\"../../data/adaptors/\"><code>Adaptors</code></a> to customize the data operation.</p>\n</blockquote>\n","type":"Object|DataManager|DataResult","link":"//ej2.syncfusion.com/react/documentation/api/grid/#datasource"},{"name":"height","description":"<p>Defines the scrollable height of the grid content.</p>\n","type":"string|number","link":"//ej2.syncfusion.com/react/documentation/api/grid/#height"},{"name":"width","description":"<p>Defines the Grid width.</p>\n","type":"string|number","link":"//ej2.syncfusion.com/react/documentation/api/grid/#width"},{"name":"columns","description":"<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n","type":"Column[]|string[]|ColumnModel[]","link":"//ej2.syncfusion.com/react/documentation/api/grid/#columns"}],"grid/sticky-header":[{"name":"dataSource","description":"<p>It is used to render grid table rows.\nIf the <code>dataSource</code> is an array of JavaScript objects,\nthen Grid will create instance of <a href=\"https://ej2.syncfusion.com/documentation/api/data/dataManager/\"><code>DataManager</code></a>\nfrom this <code>dataSource</code>.\nIf the <code>dataSource</code> is an existing <a href=\"https://ej2.syncfusion.com/documentation/api/data/dataManager/\"><code>DataManager</code></a>,\nthe Grid will not initialize a new one.</p>\n<blockquote>\n<p>Check the available <a href=\"../../data/adaptors/\"><code>Adaptors</code></a> to customize the data operation.</p>\n</blockquote>\n","type":"Object|DataManager|DataResult","link":"//ej2.syncfusion.com/react/documentation/api/grid/#datasource"},{"name":"enableStickyHeader","description":"<p>If 'enableStickyHeader' set to true, then the user can able to make the column headers visible when the document is scrolled.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/grid/#enablestickyheader"},{"name":"columns","description":"<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n","type":"Column[]|string[]|ColumnModel[]","link":"//ej2.syncfusion.com/react/documentation/api/grid/#columns"}],"grid/frozen-rows-columns":[{"name":"dataSource","description":"<p>It is used to render grid table rows.\nIf the <code>dataSource</code> is an array of JavaScript objects,\nthen Grid will create instance of <a href=\"https://ej2.syncfusion.com/documentation/api/data/dataManager/\"><code>DataManager</code></a>\nfrom this <code>dataSource</code>.\nIf the <code>dataSource</code> is an existing <a href=\"https://ej2.syncfusion.com/documentation/api/data/dataManager/\"><code>DataManager</code></a>,\nthe Grid will not initialize a new one.</p>\n<blockquote>\n<p>Check the available <a href=\"../../data/adaptors/\"><code>Adaptors</code></a> to customize the data operation.</p>\n</blockquote>\n","type":"Object|DataManager|DataResult","link":"//ej2.syncfusion.com/react/documentation/api/grid/#datasource"},{"name":"allowSelection","description":"<p>If <code>allowSelection</code> is set to true, it allows selection of (highlight row) Grid records by clicking it.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/grid/#allowselection"},{"name":"columns","description":"<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n","type":"Column[]|string[]|ColumnModel[]","link":"//ej2.syncfusion.com/react/documentation/api/grid/#columns"},{"name":"frozenColumns","description":"<p>Gets or sets the number of frozen columns.</p>\n","type":"number","link":"//ej2.syncfusion.com/react/documentation/api/grid/#frozencolumns"},{"name":"frozenRows","description":"<p>Gets or sets the number of frozen rows.</p>\n","type":"number","link":"//ej2.syncfusion.com/react/documentation/api/grid/#frozenrows"},{"name":"height","description":"<p>Defines the scrollable height of the grid content.</p>\n","type":"string|number","link":"//ej2.syncfusion.com/react/documentation/api/grid/#height"}],"grid/frozen-api":[{"name":"dataSource","description":"<p>It is used to render grid table rows.\nIf the <code>dataSource</code> is an array of JavaScript objects,\nthen Grid will create instance of <a href=\"https://ej2.syncfusion.com/documentation/api/data/dataManager/\"><code>DataManager</code></a>\nfrom this <code>dataSource</code>.\nIf the <code>dataSource</code> is an existing <a href=\"https://ej2.syncfusion.com/documentation/api/data/dataManager/\"><code>DataManager</code></a>,\nthe Grid will not initialize a new one.</p>\n<blockquote>\n<p>Check the available <a href=\"../../data/adaptors/\"><code>Adaptors</code></a> to customize the data operation.</p>\n</blockquote>\n","type":"Object|DataManager|DataResult","link":"//ej2.syncfusion.com/react/documentation/api/grid/#datasource"},{"name":"allowSelection","description":"<p>If <code>allowSelection</code> is set to true, it allows selection of (highlight row) Grid records by clicking it.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/grid/#allowselection"},{"name":"columns","description":"<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n","type":"Column[]|string[]|ColumnModel[]","link":"//ej2.syncfusion.com/react/documentation/api/grid/#columns"},{"name":"frozenColumns","description":"<p>Gets or sets the number of frozen columns.</p>\n","type":"number","link":"//ej2.syncfusion.com/react/documentation/api/grid/#frozencolumns"},{"name":"frozenRows","description":"<p>Gets or sets the number of frozen rows.</p>\n","type":"number","link":"//ej2.syncfusion.com/react/documentation/api/grid/#frozenrows"},{"name":"height","description":"<p>Defines the scrollable height of the grid content.</p>\n","type":"string|number","link":"//ej2.syncfusion.com/react/documentation/api/grid/#height"}],"grid/virtualization":[{"name":"dataSource","description":"<p>It is used to render grid table rows.\nIf the <code>dataSource</code> is an array of JavaScript objects,\nthen Grid will create instance of <a href=\"https://ej2.syncfusion.com/documentation/api/data/dataManager/\"><code>DataManager</code></a>\nfrom this <code>dataSource</code>.\nIf the <code>dataSource</code> is an existing <a href=\"https://ej2.syncfusion.com/documentation/api/data/dataManager/\"><code>DataManager</code></a>,\nthe Grid will not initialize a new one.</p>\n<blockquote>\n<p>Check the available <a href=\"../../data/adaptors/\"><code>Adaptors</code></a> to customize the data operation.</p>\n</blockquote>\n","type":"Object|DataManager|DataResult","link":"//ej2.syncfusion.com/react/documentation/api/grid/#datasource"},{"name":"enableVirtualization","description":"<p>If <code>enableVirtualization</code> set to true, then the Grid will render only the rows visible within the view-port\nand load subsequent rows on vertical scrolling. This helps to load large dataset in Grid.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/grid/#enablevirtualization"},{"name":"enableColumnVirtualization","description":"<p>If <code>enableColumnVirtualization</code> set to true, then the Grid will render only the columns visible within the view-port\nand load subsequent columns on horizontal scrolling. This helps to load large dataset of columns in Grid.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/grid/#enablecolumnvirtualization"},{"name":"dataBound","description":"<p>Triggers when data source is populated in the Grid.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/grid/#databound"},{"name":"height","description":"<p>Defines the scrollable height of the grid content.</p>\n","type":"string|number","link":"//ej2.syncfusion.com/react/documentation/api/grid/#height"},{"name":"columns","description":"<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n","type":"Column[]|string[]|ColumnModel[]","link":"//ej2.syncfusion.com/react/documentation/api/grid/#columns"}],"grid/infinite-scrolling":[{"name":"dataSource","description":"<p>It is used to render grid table rows.\nIf the <code>dataSource</code> is an array of JavaScript objects,\nthen Grid will create instance of <a href=\"https://ej2.syncfusion.com/documentation/api/data/dataManager/\"><code>DataManager</code></a>\nfrom this <code>dataSource</code>.\nIf the <code>dataSource</code> is an existing <a href=\"https://ej2.syncfusion.com/documentation/api/data/dataManager/\"><code>DataManager</code></a>,\nthe Grid will not initialize a new one.</p>\n<blockquote>\n<p>Check the available <a href=\"../../data/adaptors/\"><code>Adaptors</code></a> to customize the data operation.</p>\n</blockquote>\n","type":"Object|DataManager|DataResult","link":"//ej2.syncfusion.com/react/documentation/api/grid/#datasource"},{"name":"enableInfiniteScrolling","description":"<p>If <code>enableInfiniteScrolling</code> set to true, then the data will be loaded in Grid when the scrollbar reaches the end.\nThis helps to load large dataset in Grid.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/grid/#enableinfinitescrolling"},{"name":"height","description":"<p>Defines the scrollable height of the grid content.</p>\n","type":"string|number","link":"//ej2.syncfusion.com/react/documentation/api/grid/#height"},{"name":"columns","description":"<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n","type":"Column[]|string[]|ColumnModel[]","link":"//ej2.syncfusion.com/react/documentation/api/grid/#columns"}],"grid/lazy-load-grouping-with-paging":[{"name":"dataSource","description":"<p>It is used to render grid table rows.\nIf the <code>dataSource</code> is an array of JavaScript objects,\nthen Grid will create instance of <a href=\"https://ej2.syncfusion.com/documentation/api/data/dataManager/\"><code>DataManager</code></a>\nfrom this <code>dataSource</code>.\nIf the <code>dataSource</code> is an existing <a href=\"https://ej2.syncfusion.com/documentation/api/data/dataManager/\"><code>DataManager</code></a>,\nthe Grid will not initialize a new one.</p>\n<blockquote>\n<p>Check the available <a href=\"../../data/adaptors/\"><code>Adaptors</code></a> to customize the data operation.</p>\n</blockquote>\n","type":"Object|DataManager|DataResult","link":"//ej2.syncfusion.com/react/documentation/api/grid/#datasource"},{"name":"allowPaging","description":"<p>If <code>allowPaging</code> is set to true, the pager renders at the footer of the Grid. It is used to handle page navigation in the Grid.</p>\n<blockquote>\n<p>Check the <a href=\"../../grid/paging/\"><code>Paging</code></a> to configure the grid pager.</p>\n</blockquote>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/grid/#allowpaging"},{"name":"groupSettings","description":"<p>Configures the group settings.</p>\n","type":"GroupSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/grid/#groupsettings"},{"name":"allowGrouping","description":"<p>If <code>allowGrouping</code> set to true, then it will allow the user to dynamically group or ungroup columns.\nGrouping can be done by drag and drop columns from column header to group drop area.</p>\n<blockquote>\n<p>Check the <a href=\"../../grid/grouping/\"><code>Grouping</code></a> to customize its default behavior.</p>\n</blockquote>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/grid/#allowgrouping"},{"name":"height","description":"<p>Defines the scrollable height of the grid content.</p>\n","type":"string|number","link":"//ej2.syncfusion.com/react/documentation/api/grid/#height"},{"name":"columns","description":"<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n","type":"Column[]|string[]|ColumnModel[]","link":"//ej2.syncfusion.com/react/documentation/api/grid/#columns"}],"grid/lazy-load-grouping-with-infinite-scrolling":[{"name":"dataSource","description":"<p>It is used to render grid table rows.\nIf the <code>dataSource</code> is an array of JavaScript objects,\nthen Grid will create instance of <a href=\"https://ej2.syncfusion.com/documentation/api/data/dataManager/\"><code>DataManager</code></a>\nfrom this <code>dataSource</code>.\nIf the <code>dataSource</code> is an existing <a href=\"https://ej2.syncfusion.com/documentation/api/data/dataManager/\"><code>DataManager</code></a>,\nthe Grid will not initialize a new one.</p>\n<blockquote>\n<p>Check the available <a href=\"../../data/adaptors/\"><code>Adaptors</code></a> to customize the data operation.</p>\n</blockquote>\n","type":"Object|DataManager|DataResult","link":"//ej2.syncfusion.com/react/documentation/api/grid/#datasource"},{"name":"enableInfiniteScrolling","description":"<p>If <code>enableInfiniteScrolling</code> set to true, then the data will be loaded in Grid when the scrollbar reaches the end.\nThis helps to load large dataset in Grid.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/grid/#enableinfinitescrolling"},{"name":"height","description":"<p>Defines the scrollable height of the grid content.</p>\n","type":"string|number","link":"//ej2.syncfusion.com/react/documentation/api/grid/#height"},{"name":"allowGrouping","description":"<p>If <code>allowGrouping</code> set to true, then it will allow the user to dynamically group or ungroup columns.\nGrouping can be done by drag and drop columns from column header to group drop area.</p>\n<blockquote>\n<p>Check the <a href=\"../../grid/grouping/\"><code>Grouping</code></a> to customize its default behavior.</p>\n</blockquote>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/grid/#allowgrouping"},{"name":"groupSettings","description":"<p>Configures the group settings.</p>\n","type":"GroupSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/grid/#groupsettings"},{"name":"columns","description":"<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n","type":"Column[]|string[]|ColumnModel[]","link":"//ej2.syncfusion.com/react/documentation/api/grid/#columns"}],"grid/lazy-load-grouping-with-virtual-scrolling":[{"name":"dataSource","description":"<p>It is used to render grid table rows.\nIf the <code>dataSource</code> is an array of JavaScript objects,\nthen Grid will create instance of <a href=\"https://ej2.syncfusion.com/documentation/api/data/dataManager/\"><code>DataManager</code></a>\nfrom this <code>dataSource</code>.\nIf the <code>dataSource</code> is an existing <a href=\"https://ej2.syncfusion.com/documentation/api/data/dataManager/\"><code>DataManager</code></a>,\nthe Grid will not initialize a new one.</p>\n<blockquote>\n<p>Check the available <a href=\"../../data/adaptors/\"><code>Adaptors</code></a> to customize the data operation.</p>\n</blockquote>\n","type":"Object|DataManager|DataResult","link":"//ej2.syncfusion.com/react/documentation/api/grid/#datasource"},{"name":"enableVirtualization","description":"<p>If <code>enableVirtualization</code> set to true, then the Grid will render only the rows visible within the view-port\nand load subsequent rows on vertical scrolling. This helps to load large dataset in Grid.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/grid/#enablevirtualization"},{"name":"height","description":"<p>Defines the scrollable height of the grid content.</p>\n","type":"string|number","link":"//ej2.syncfusion.com/react/documentation/api/grid/#height"},{"name":"allowGrouping","description":"<p>If <code>allowGrouping</code> set to true, then it will allow the user to dynamically group or ungroup columns.\nGrouping can be done by drag and drop columns from column header to group drop area.</p>\n<blockquote>\n<p>Check the <a href=\"../../grid/grouping/\"><code>Grouping</code></a> to customize its default behavior.</p>\n</blockquote>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/grid/#allowgrouping"},{"name":"groupSettings","description":"<p>Configures the group settings.</p>\n","type":"GroupSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/grid/#groupsettings"},{"name":"columns","description":"<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n","type":"Column[]|string[]|ColumnModel[]","link":"//ej2.syncfusion.com/react/documentation/api/grid/#columns"}],"grid/default-exporting":[{"name":"dataSource","description":"<p>It is used to render grid table rows.\nIf the <code>dataSource</code> is an array of JavaScript objects,\nthen Grid will create instance of <a href=\"https://ej2.syncfusion.com/documentation/api/data/dataManager/\"><code>DataManager</code></a>\nfrom this <code>dataSource</code>.\nIf the <code>dataSource</code> is an existing <a href=\"https://ej2.syncfusion.com/documentation/api/data/dataManager/\"><code>DataManager</code></a>,\nthe Grid will not initialize a new one.</p>\n<blockquote>\n<p>Check the available <a href=\"../../data/adaptors/\"><code>Adaptors</code></a> to customize the data operation.</p>\n</blockquote>\n","type":"Object|DataManager|DataResult","link":"//ej2.syncfusion.com/react/documentation/api/grid/#datasource"},{"name":"allowExcelExport","description":"<p>If <code>allowExcelExport</code> set to true, then it will allow the user to export grid to Excel file.</p>\n<blockquote>\n<p>Check the <a href=\"../../grid/excel-exporting/\"><code>ExcelExport</code></a> to configure exporting document.</p>\n</blockquote>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/grid/#allowexcelexport"},{"name":"allowPdfExport","description":"<p>If <code>allowPdfExport</code> set to true, then it will allow the user to export grid to Pdf file.</p>\n<blockquote>\n<p>Check the <a href=\"../../grid/pdf-export/\"><code>Pdfexport</code></a> to configure the exporting document.</p>\n</blockquote>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/grid/#allowpdfexport"},{"name":"allowPaging","description":"<p>If <code>allowPaging</code> is set to true, the pager renders at the footer of the Grid. It is used to handle page navigation in the Grid.</p>\n<blockquote>\n<p>Check the <a href=\"../../grid/paging/\"><code>Paging</code></a> to configure the grid pager.</p>\n</blockquote>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/grid/#allowpaging"},{"name":"toolbar","description":"<p><code>toolbar</code> defines the ToolBar items of the Grid.\nIt contains built-in and custom toolbar items.\nIf a string value is assigned to the <code>toolbar</code> option, it is considered as the template for the whole Grid ToolBar.\nIf an array value is assigned, it is considered as the list of built-in and custom toolbar items in the Grid's Toolbar.\n&lt;br&gt;&lt;br&gt;\nThe available built-in ToolBar items are:</p>\n<ul>\n<li>Add: Adds a new record.</li>\n<li>Edit: Edits the selected record.</li>\n<li>Update: Updates the edited record.</li>\n<li>Delete: Deletes the selected record.</li>\n<li>Cancel: Cancels the edit state.</li>\n<li>Search: Searches records by the given key.</li>\n<li>Print: Prints the Grid.</li>\n<li>ExcelExport - Export the Grid to Excel(excelExport() method manually to make export.)</li>\n<li>PdfExport - Export the Grid to PDF(pdfExport() method manually to make export.)</li>\n<li>CsvExport - Export the Grid to CSV(csvExport() method manually to make export.)&lt;br&gt;&lt;br&gt;\nThe following code example implements the custom toolbar items.</li>\n</ul>\n<blockquote>\n<p>Check the <a href=\"../../grid/tool-bar/#custom-toolbar-items/\"><code>Toolbar</code></a> to customize its default items.</p>\n</blockquote>\n","type":"[]","link":"//ej2.syncfusion.com/react/documentation/api/grid/#toolbar"},{"name":"pageSettings","description":"<p>Configures the pager in the Grid.</p>\n","type":"PageSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/grid/#pagesettings"},{"name":"columns","description":"<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n","type":"Column[]|string[]|ColumnModel[]","link":"//ej2.syncfusion.com/react/documentation/api/grid/#columns"},{"name":"groupSettings","description":"<p>Configures the group settings.</p>\n","type":"GroupSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/grid/#groupsettings"},{"name":"allowGrouping","description":"<p>If <code>allowGrouping</code> set to true, then it will allow the user to dynamically group or ungroup columns.\nGrouping can be done by drag and drop columns from column header to group drop area.</p>\n<blockquote>\n<p>Check the <a href=\"../../grid/grouping/\"><code>Grouping</code></a> to customize its default behavior.</p>\n</blockquote>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/grid/#allowgrouping"}],"grid/advanced-exporting":[{"name":"dataSource","description":"<p>It is used to render grid table rows.\nIf the <code>dataSource</code> is an array of JavaScript objects,\nthen Grid will create instance of <a href=\"https://ej2.syncfusion.com/documentation/api/data/dataManager/\"><code>DataManager</code></a>\nfrom this <code>dataSource</code>.\nIf the <code>dataSource</code> is an existing <a href=\"https://ej2.syncfusion.com/documentation/api/data/dataManager/\"><code>DataManager</code></a>,\nthe Grid will not initialize a new one.</p>\n<blockquote>\n<p>Check the available <a href=\"../../data/adaptors/\"><code>Adaptors</code></a> to customize the data operation.</p>\n</blockquote>\n","type":"Object|DataManager|DataResult","link":"//ej2.syncfusion.com/react/documentation/api/grid/#datasource"},{"name":"allowExcelExport","description":"<p>If <code>allowExcelExport</code> set to true, then it will allow the user to export grid to Excel file.</p>\n<blockquote>\n<p>Check the <a href=\"../../grid/excel-exporting/\"><code>ExcelExport</code></a> to configure exporting document.</p>\n</blockquote>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/grid/#allowexcelexport"},{"name":"allowPdfExport","description":"<p>If <code>allowPdfExport</code> set to true, then it will allow the user to export grid to Pdf file.</p>\n<blockquote>\n<p>Check the <a href=\"../../grid/pdf-export/\"><code>Pdfexport</code></a> to configure the exporting document.</p>\n</blockquote>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/grid/#allowpdfexport"},{"name":"toolbar","description":"<p><code>toolbar</code> defines the ToolBar items of the Grid.\nIt contains built-in and custom toolbar items.\nIf a string value is assigned to the <code>toolbar</code> option, it is considered as the template for the whole Grid ToolBar.\nIf an array value is assigned, it is considered as the list of built-in and custom toolbar items in the Grid's Toolbar.\n&lt;br&gt;&lt;br&gt;\nThe available built-in ToolBar items are:</p>\n<ul>\n<li>Add: Adds a new record.</li>\n<li>Edit: Edits the selected record.</li>\n<li>Update: Updates the edited record.</li>\n<li>Delete: Deletes the selected record.</li>\n<li>Cancel: Cancels the edit state.</li>\n<li>Search: Searches records by the given key.</li>\n<li>Print: Prints the Grid.</li>\n<li>ExcelExport - Export the Grid to Excel(excelExport() method manually to make export.)</li>\n<li>PdfExport - Export the Grid to PDF(pdfExport() method manually to make export.)</li>\n<li>CsvExport - Export the Grid to CSV(csvExport() method manually to make export.)&lt;br&gt;&lt;br&gt;\nThe following code example implements the custom toolbar items.</li>\n</ul>\n<blockquote>\n<p>Check the <a href=\"../../grid/tool-bar/#custom-toolbar-items/\"><code>Toolbar</code></a> to customize its default items.</p>\n</blockquote>\n","type":"[]","link":"//ej2.syncfusion.com/react/documentation/api/grid/#toolbar"},{"name":"allowPaging","description":"<p>If <code>allowPaging</code> is set to true, the pager renders at the footer of the Grid. It is used to handle page navigation in the Grid.</p>\n<blockquote>\n<p>Check the <a href=\"../../grid/paging/\"><code>Paging</code></a> to configure the grid pager.</p>\n</blockquote>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/grid/#allowpaging"},{"name":"pageSettings","description":"<p>Configures the pager in the Grid.</p>\n","type":"PageSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/grid/#pagesettings"},{"name":"columns","description":"<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n","type":"Column[]|string[]|ColumnModel[]","link":"//ej2.syncfusion.com/react/documentation/api/grid/#columns"}],"grid/master-details-export":[{"name":"dataSource","description":"<p>It is used to render grid table rows.\nIf the <code>dataSource</code> is an array of JavaScript objects,\nthen Grid will create instance of <a href=\"https://ej2.syncfusion.com/documentation/api/data/dataManager/\"><code>DataManager</code></a>\nfrom this <code>dataSource</code>.\nIf the <code>dataSource</code> is an existing <a href=\"https://ej2.syncfusion.com/documentation/api/data/dataManager/\"><code>DataManager</code></a>,\nthe Grid will not initialize a new one.</p>\n<blockquote>\n<p>Check the available <a href=\"../../data/adaptors/\"><code>Adaptors</code></a> to customize the data operation.</p>\n</blockquote>\n","type":"Object|DataManager|DataResult","link":"//ej2.syncfusion.com/react/documentation/api/grid/#datasource"},{"name":"toolbar","description":"<p><code>toolbar</code> defines the ToolBar items of the Grid.\nIt contains built-in and custom toolbar items.\nIf a string value is assigned to the <code>toolbar</code> option, it is considered as the template for the whole Grid ToolBar.\nIf an array value is assigned, it is considered as the list of built-in and custom toolbar items in the Grid's Toolbar.\n&lt;br&gt;&lt;br&gt;\nThe available built-in ToolBar items are:</p>\n<ul>\n<li>Add: Adds a new record.</li>\n<li>Edit: Edits the selected record.</li>\n<li>Update: Updates the edited record.</li>\n<li>Delete: Deletes the selected record.</li>\n<li>Cancel: Cancels the edit state.</li>\n<li>Search: Searches records by the given key.</li>\n<li>Print: Prints the Grid.</li>\n<li>ExcelExport - Export the Grid to Excel(excelExport() method manually to make export.)</li>\n<li>PdfExport - Export the Grid to PDF(pdfExport() method manually to make export.)</li>\n<li>CsvExport - Export the Grid to CSV(csvExport() method manually to make export.)&lt;br&gt;&lt;br&gt;\nThe following code example implements the custom toolbar items.</li>\n</ul>\n<blockquote>\n<p>Check the <a href=\"../../grid/tool-bar/#custom-toolbar-items/\"><code>Toolbar</code></a> to customize its default items.</p>\n</blockquote>\n","type":"[]","link":"//ej2.syncfusion.com/react/documentation/api/grid/#toolbar"},{"name":"allowPaging","description":"<p>If <code>allowPaging</code> is set to true, the pager renders at the footer of the Grid. It is used to handle page navigation in the Grid.</p>\n<blockquote>\n<p>Check the <a href=\"../../grid/paging/\"><code>Paging</code></a> to configure the grid pager.</p>\n</blockquote>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/grid/#allowpaging"},{"name":"pageSettings","description":"<p>Configures the pager in the Grid.</p>\n","type":"PageSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/grid/#pagesettings"},{"name":"columns","description":"<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n","type":"Column[]|string[]|ColumnModel[]","link":"//ej2.syncfusion.com/react/documentation/api/grid/#columns"},{"name":"childGrid","description":"<p>Defines Grid options to render child Grid.\nIt requires the <a href=\"./#querystring\"><code>queryString</code></a> for parent\nand child relationship.</p>\n<blockquote>\n<p>Check the <a href=\"../../grid/hierarchy-grid/\"><code>Child Grid</code></a> for its configuration.</p>\n</blockquote>\n","type":"GridModel","link":"//ej2.syncfusion.com/react/documentation/api/grid/#childgrid"}],"grid/detail-template-exporting":[{"name":"dataSource","description":"<p>It is used to render grid table rows.\nIf the <code>dataSource</code> is an array of JavaScript objects,\nthen Grid will create instance of <a href=\"https://ej2.syncfusion.com/documentation/api/data/dataManager/\"><code>DataManager</code></a>\nfrom this <code>dataSource</code>.\nIf the <code>dataSource</code> is an existing <a href=\"https://ej2.syncfusion.com/documentation/api/data/dataManager/\"><code>DataManager</code></a>,\nthe Grid will not initialize a new one.</p>\n<blockquote>\n<p>Check the available <a href=\"../../data/adaptors/\"><code>Adaptors</code></a> to customize the data operation.</p>\n</blockquote>\n","type":"Object|DataManager|DataResult","link":"//ej2.syncfusion.com/react/documentation/api/grid/#datasource"},{"name":"detailTemplate","description":"<p>The detail template allows you to show or hide additional information about a particular row.</p>\n<blockquote>\n<p>It accepts either the <a href=\"../../common/template-engine/\">template string</a> or the HTML element ID.</p>\n</blockquote>\n","type":"string|Function","link":"//ej2.syncfusion.com/react/documentation/api/grid/#detailtemplate"},{"name":"height","description":"<p>Defines the scrollable height of the grid content.</p>\n","type":"string|number","link":"//ej2.syncfusion.com/react/documentation/api/grid/#height"},{"name":"width","description":"<p>Defines the Grid width.</p>\n","type":"string|number","link":"//ej2.syncfusion.com/react/documentation/api/grid/#width"},{"name":"allowExcelExport","description":"<p>If <code>allowExcelExport</code> set to true, then it will allow the user to export grid to Excel file.</p>\n<blockquote>\n<p>Check the <a href=\"../../grid/excel-exporting/\"><code>ExcelExport</code></a> to configure exporting document.</p>\n</blockquote>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/grid/#allowexcelexport"},{"name":"allowPdfExport","description":"<p>If <code>allowPdfExport</code> set to true, then it will allow the user to export grid to Pdf file.</p>\n<blockquote>\n<p>Check the <a href=\"../../grid/pdf-export/\"><code>Pdfexport</code></a> to configure the exporting document.</p>\n</blockquote>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/grid/#allowpdfexport"},{"name":"toolbar","description":"<p><code>toolbar</code> defines the ToolBar items of the Grid.\nIt contains built-in and custom toolbar items.\nIf a string value is assigned to the <code>toolbar</code> option, it is considered as the template for the whole Grid ToolBar.\nIf an array value is assigned, it is considered as the list of built-in and custom toolbar items in the Grid's Toolbar.\n&lt;br&gt;&lt;br&gt;\nThe available built-in ToolBar items are:</p>\n<ul>\n<li>Add: Adds a new record.</li>\n<li>Edit: Edits the selected record.</li>\n<li>Update: Updates the edited record.</li>\n<li>Delete: Deletes the selected record.</li>\n<li>Cancel: Cancels the edit state.</li>\n<li>Search: Searches records by the given key.</li>\n<li>Print: Prints the Grid.</li>\n<li>ExcelExport - Export the Grid to Excel(excelExport() method manually to make export.)</li>\n<li>PdfExport - Export the Grid to PDF(pdfExport() method manually to make export.)</li>\n<li>CsvExport - Export the Grid to CSV(csvExport() method manually to make export.)&lt;br&gt;&lt;br&gt;\nThe following code example implements the custom toolbar items.</li>\n</ul>\n<blockquote>\n<p>Check the <a href=\"../../grid/tool-bar/#custom-toolbar-items/\"><code>Toolbar</code></a> to customize its default items.</p>\n</blockquote>\n","type":"[]","link":"//ej2.syncfusion.com/react/documentation/api/grid/#toolbar"},{"name":"columns","description":"<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n","type":"Column[]|string[]|ColumnModel[]","link":"//ej2.syncfusion.com/react/documentation/api/grid/#columns"}],"grid/multiple-export":[{"name":"dataSource","description":"<p>It is used to render grid table rows.\nIf the <code>dataSource</code> is an array of JavaScript objects,\nthen Grid will create instance of <a href=\"https://ej2.syncfusion.com/documentation/api/data/dataManager/\"><code>DataManager</code></a>\nfrom this <code>dataSource</code>.\nIf the <code>dataSource</code> is an existing <a href=\"https://ej2.syncfusion.com/documentation/api/data/dataManager/\"><code>DataManager</code></a>,\nthe Grid will not initialize a new one.</p>\n<blockquote>\n<p>Check the available <a href=\"../../data/adaptors/\"><code>Adaptors</code></a> to customize the data operation.</p>\n</blockquote>\n","type":"Object|DataManager|DataResult","link":"//ej2.syncfusion.com/react/documentation/api/grid/#datasource"},{"name":"toolbar","description":"<p><code>toolbar</code> defines the ToolBar items of the Grid.\nIt contains built-in and custom toolbar items.\nIf a string value is assigned to the <code>toolbar</code> option, it is considered as the template for the whole Grid ToolBar.\nIf an array value is assigned, it is considered as the list of built-in and custom toolbar items in the Grid's Toolbar.\n&lt;br&gt;&lt;br&gt;\nThe available built-in ToolBar items are:</p>\n<ul>\n<li>Add: Adds a new record.</li>\n<li>Edit: Edits the selected record.</li>\n<li>Update: Updates the edited record.</li>\n<li>Delete: Deletes the selected record.</li>\n<li>Cancel: Cancels the edit state.</li>\n<li>Search: Searches records by the given key.</li>\n<li>Print: Prints the Grid.</li>\n<li>ExcelExport - Export the Grid to Excel(excelExport() method manually to make export.)</li>\n<li>PdfExport - Export the Grid to PDF(pdfExport() method manually to make export.)</li>\n<li>CsvExport - Export the Grid to CSV(csvExport() method manually to make export.)&lt;br&gt;&lt;br&gt;\nThe following code example implements the custom toolbar items.</li>\n</ul>\n<blockquote>\n<p>Check the <a href=\"../../grid/tool-bar/#custom-toolbar-items/\"><code>Toolbar</code></a> to customize its default items.</p>\n</blockquote>\n","type":"[]","link":"//ej2.syncfusion.com/react/documentation/api/grid/#toolbar"},{"name":"columns","description":"<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n","type":"Column[]|string[]|ColumnModel[]","link":"//ej2.syncfusion.com/react/documentation/api/grid/#columns"},{"name":"allowExcelExport","description":"<p>If <code>allowExcelExport</code> set to true, then it will allow the user to export grid to Excel file.</p>\n<blockquote>\n<p>Check the <a href=\"../../grid/excel-exporting/\"><code>ExcelExport</code></a> to configure exporting document.</p>\n</blockquote>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/grid/#allowexcelexport"},{"name":"allowPdfExport","description":"<p>If <code>allowPdfExport</code> set to true, then it will allow the user to export grid to Pdf file.</p>\n<blockquote>\n<p>Check the <a href=\"../../grid/pdf-export/\"><code>Pdfexport</code></a> to configure the exporting document.</p>\n</blockquote>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/grid/#allowpdfexport"}],"grid/print":[{"name":"dataSource","description":"<p>It is used to render grid table rows.\nIf the <code>dataSource</code> is an array of JavaScript objects,\nthen Grid will create instance of <a href=\"https://ej2.syncfusion.com/documentation/api/data/dataManager/\"><code>DataManager</code></a>\nfrom this <code>dataSource</code>.\nIf the <code>dataSource</code> is an existing <a href=\"https://ej2.syncfusion.com/documentation/api/data/dataManager/\"><code>DataManager</code></a>,\nthe Grid will not initialize a new one.</p>\n<blockquote>\n<p>Check the available <a href=\"../../data/adaptors/\"><code>Adaptors</code></a> to customize the data operation.</p>\n</blockquote>\n","type":"Object|DataManager|DataResult","link":"//ej2.syncfusion.com/react/documentation/api/grid/#datasource"},{"name":"toolbar","description":"<p><code>toolbar</code> defines the ToolBar items of the Grid.\nIt contains built-in and custom toolbar items.\nIf a string value is assigned to the <code>toolbar</code> option, it is considered as the template for the whole Grid ToolBar.\nIf an array value is assigned, it is considered as the list of built-in and custom toolbar items in the Grid's Toolbar.\n&lt;br&gt;&lt;br&gt;\nThe available built-in ToolBar items are:</p>\n<ul>\n<li>Add: Adds a new record.</li>\n<li>Edit: Edits the selected record.</li>\n<li>Update: Updates the edited record.</li>\n<li>Delete: Deletes the selected record.</li>\n<li>Cancel: Cancels the edit state.</li>\n<li>Search: Searches records by the given key.</li>\n<li>Print: Prints the Grid.</li>\n<li>ExcelExport - Export the Grid to Excel(excelExport() method manually to make export.)</li>\n<li>PdfExport - Export the Grid to PDF(pdfExport() method manually to make export.)</li>\n<li>CsvExport - Export the Grid to CSV(csvExport() method manually to make export.)&lt;br&gt;&lt;br&gt;\nThe following code example implements the custom toolbar items.</li>\n</ul>\n<blockquote>\n<p>Check the <a href=\"../../grid/tool-bar/#custom-toolbar-items/\"><code>Toolbar</code></a> to customize its default items.</p>\n</blockquote>\n","type":"[]","link":"//ej2.syncfusion.com/react/documentation/api/grid/#toolbar"},{"name":"allowPaging","description":"<p>If <code>allowPaging</code> is set to true, the pager renders at the footer of the Grid. It is used to handle page navigation in the Grid.</p>\n<blockquote>\n<p>Check the <a href=\"../../grid/paging/\"><code>Paging</code></a> to configure the grid pager.</p>\n</blockquote>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/grid/#allowpaging"},{"name":"pageSettings","description":"<p>Configures the pager in the Grid.</p>\n","type":"PageSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/grid/#pagesettings"},{"name":"columns","description":"<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n","type":"Column[]|string[]|ColumnModel[]","link":"//ej2.syncfusion.com/react/documentation/api/grid/#columns"}],"grid/grid-lines":[{"name":"gridLines","description":"<p>Defines the mode of grid lines. The available modes are,</p>\n<ul>\n<li><code>Both</code>: Displays both horizontal and vertical grid lines.</li>\n<li><code>None</code>: No grid lines are displayed.</li>\n<li><code>Horizontal</code>: Displays the horizontal grid lines only.</li>\n<li><code>Vertical</code>: Displays the vertical grid lines only.</li>\n<li><code>Default</code>: Displays grid lines based on the theme.</li>\n</ul>\n","type":"GridLine","link":"//ej2.syncfusion.com/react/documentation/api/grid/#gridlines"},{"name":"dataSource","description":"<p>It is used to render grid table rows.\nIf the <code>dataSource</code> is an array of JavaScript objects,\nthen Grid will create instance of <a href=\"https://ej2.syncfusion.com/documentation/api/data/dataManager/\"><code>DataManager</code></a>\nfrom this <code>dataSource</code>.\nIf the <code>dataSource</code> is an existing <a href=\"https://ej2.syncfusion.com/documentation/api/data/dataManager/\"><code>DataManager</code></a>,\nthe Grid will not initialize a new one.</p>\n<blockquote>\n<p>Check the available <a href=\"../../data/adaptors/\"><code>Adaptors</code></a> to customize the data operation.</p>\n</blockquote>\n","type":"Object|DataManager|DataResult","link":"//ej2.syncfusion.com/react/documentation/api/grid/#datasource"}],"grid/context-menu":[{"name":"dataSource","description":"<p>It is used to render grid table rows.\nIf the <code>dataSource</code> is an array of JavaScript objects,\nthen Grid will create instance of <a href=\"https://ej2.syncfusion.com/documentation/api/data/dataManager/\"><code>DataManager</code></a>\nfrom this <code>dataSource</code>.\nIf the <code>dataSource</code> is an existing <a href=\"https://ej2.syncfusion.com/documentation/api/data/dataManager/\"><code>DataManager</code></a>,\nthe Grid will not initialize a new one.</p>\n<blockquote>\n<p>Check the available <a href=\"../../data/adaptors/\"><code>Adaptors</code></a> to customize the data operation.</p>\n</blockquote>\n","type":"Object|DataManager|DataResult","link":"//ej2.syncfusion.com/react/documentation/api/grid/#datasource"},{"name":"allowSorting","description":"<p>If <code>allowSorting</code> is set to true, it allows sorting of grid records when column header is clicked.</p>\n<blockquote>\n<p>Check the <a href=\"../../grid/sorting/\"><code>Sorting</code></a> to customize its default behavior.</p>\n</blockquote>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/grid/#allowsorting"},{"name":"allowGrouping","description":"<p>If <code>allowGrouping</code> set to true, then it will allow the user to dynamically group or ungroup columns.\nGrouping can be done by drag and drop columns from column header to group drop area.</p>\n<blockquote>\n<p>Check the <a href=\"../../grid/grouping/\"><code>Grouping</code></a> to customize its default behavior.</p>\n</blockquote>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/grid/#allowgrouping"},{"name":"allowPdfExport","description":"<p>If <code>allowPdfExport</code> set to true, then it will allow the user to export grid to Pdf file.</p>\n<blockquote>\n<p>Check the <a href=\"../../grid/pdf-export/\"><code>Pdfexport</code></a> to configure the exporting document.</p>\n</blockquote>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/grid/#allowpdfexport"},{"name":"allowExcelExport","description":"<p>If <code>allowExcelExport</code> set to true, then it will allow the user to export grid to Excel file.</p>\n<blockquote>\n<p>Check the <a href=\"../../grid/excel-exporting/\"><code>ExcelExport</code></a> to configure exporting document.</p>\n</blockquote>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/grid/#allowexcelexport"},{"name":"editSettings","description":"<p>Configures the edit settings.</p>\n","type":"EditSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/grid/#editsettings"},{"name":"allowPaging","description":"<p>If <code>allowPaging</code> is set to true, the pager renders at the footer of the Grid. It is used to handle page navigation in the Grid.</p>\n<blockquote>\n<p>Check the <a href=\"../../grid/paging/\"><code>Paging</code></a> to configure the grid pager.</p>\n</blockquote>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/grid/#allowpaging"},{"name":"contextMenuItems","description":"<p><code>contextMenuItems</code> defines both built-in and custom context menu items.\n&lt;br&gt;&lt;br&gt;\nThe available built-in items are,</p>\n<ul>\n<li><code>AutoFitAll</code> - Auto fit the size of all columns.</li>\n<li><code>AutoFit</code> - Auto fit the current column.</li>\n<li><code>Group</code> - Group by current column.</li>\n<li><code>Ungroup</code> - Ungroup by current column.</li>\n<li><code>Edit</code> - Edit the current record.</li>\n<li><code>Delete</code> - Delete the current record.</li>\n<li><code>Save</code> - Save the edited record.</li>\n<li><code>Cancel</code> - Cancel the edited state.</li>\n<li><code>Copy</code> - Copy the selected records.</li>\n<li><code>PdfExport</code> - Export the grid as Pdf format.</li>\n<li><code>ExcelExport</code> - Export the grid as Excel format.</li>\n<li><code>CsvExport</code> - Export the grid as CSV format.</li>\n<li><code>SortAscending</code> - Sort the current column in ascending order.</li>\n<li><code>SortDescending</code> - Sort the current column in descending order.</li>\n<li><code>FirstPage</code> - Go to the first page.</li>\n<li><code>PrevPage</code> - Go to the previous page.</li>\n<li><code>LastPage</code> - Go to the last page.</li>\n<li><code>NextPage</code> - Go to the next page.</li>\n</ul>\n","type":"ContextMenuItem[]|ContextMenuItemModel[]","link":"//ej2.syncfusion.com/react/documentation/api/grid/#contextmenuitems"},{"name":"columns","description":"<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n","type":"Column[]|string[]|ColumnModel[]","link":"//ej2.syncfusion.com/react/documentation/api/grid/#columns"}],"grid/clipboard":[{"name":"dataSource","description":"<p>It is used to render grid table rows.\nIf the <code>dataSource</code> is an array of JavaScript objects,\nthen Grid will create instance of <a href=\"https://ej2.syncfusion.com/documentation/api/data/dataManager/\"><code>DataManager</code></a>\nfrom this <code>dataSource</code>.\nIf the <code>dataSource</code> is an existing <a href=\"https://ej2.syncfusion.com/documentation/api/data/dataManager/\"><code>DataManager</code></a>,\nthe Grid will not initialize a new one.</p>\n<blockquote>\n<p>Check the available <a href=\"../../data/adaptors/\"><code>Adaptors</code></a> to customize the data operation.</p>\n</blockquote>\n","type":"Object|DataManager|DataResult","link":"//ej2.syncfusion.com/react/documentation/api/grid/#datasource"},{"name":"allowPaging","description":"<p>If <code>allowPaging</code> is set to true, the pager renders at the footer of the Grid. It is used to handle page navigation in the Grid.</p>\n<blockquote>\n<p>Check the <a href=\"../../grid/paging/\"><code>Paging</code></a> to configure the grid pager.</p>\n</blockquote>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/grid/#allowpaging"},{"name":"toolbar","description":"<p><code>toolbar</code> defines the ToolBar items of the Grid.\nIt contains built-in and custom toolbar items.\nIf a string value is assigned to the <code>toolbar</code> option, it is considered as the template for the whole Grid ToolBar.\nIf an array value is assigned, it is considered as the list of built-in and custom toolbar items in the Grid's Toolbar.\n&lt;br&gt;&lt;br&gt;\nThe available built-in ToolBar items are:</p>\n<ul>\n<li>Add: Adds a new record.</li>\n<li>Edit: Edits the selected record.</li>\n<li>Update: Updates the edited record.</li>\n<li>Delete: Deletes the selected record.</li>\n<li>Cancel: Cancels the edit state.</li>\n<li>Search: Searches records by the given key.</li>\n<li>Print: Prints the Grid.</li>\n<li>ExcelExport - Export the Grid to Excel(excelExport() method manually to make export.)</li>\n<li>PdfExport - Export the Grid to PDF(pdfExport() method manually to make export.)</li>\n<li>CsvExport - Export the Grid to CSV(csvExport() method manually to make export.)&lt;br&gt;&lt;br&gt;\nThe following code example implements the custom toolbar items.</li>\n</ul>\n<blockquote>\n<p>Check the <a href=\"../../grid/tool-bar/#custom-toolbar-items/\"><code>Toolbar</code></a> to customize its default items.</p>\n</blockquote>\n","type":"[]","link":"//ej2.syncfusion.com/react/documentation/api/grid/#toolbar"},{"name":"columns","description":"<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n","type":"Column[]|string[]|ColumnModel[]","link":"//ej2.syncfusion.com/react/documentation/api/grid/#columns"},{"name":"pageSettings","description":"<p>Configures the pager in the Grid.</p>\n","type":"PageSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/grid/#pagesettings"},{"name":"allowSelection","description":"<p>If <code>allowSelection</code> is set to true, it allows selection of (highlight row) Grid records by clicking it.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/grid/#allowselection"},{"name":"selectionSettings","description":"<p>Configures the selection settings.</p>\n","type":"SelectionSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/grid/#selectionsettings"},{"name":"toolbarClick","description":"<p>Triggers when toolbar item is clicked.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/grid/#toolbarclick"}],"grid/keyboard-navigation":[{"name":"dataSource","description":"<p>It is used to render grid table rows.\nIf the <code>dataSource</code> is an array of JavaScript objects,\nthen Grid will create instance of <a href=\"https://ej2.syncfusion.com/documentation/api/data/dataManager/\"><code>DataManager</code></a>\nfrom this <code>dataSource</code>.\nIf the <code>dataSource</code> is an existing <a href=\"https://ej2.syncfusion.com/documentation/api/data/dataManager/\"><code>DataManager</code></a>,\nthe Grid will not initialize a new one.</p>\n<blockquote>\n<p>Check the available <a href=\"../../data/adaptors/\"><code>Adaptors</code></a> to customize the data operation.</p>\n</blockquote>\n","type":"Object|DataManager|DataResult","link":"//ej2.syncfusion.com/react/documentation/api/grid/#datasource"},{"name":"allowFiltering","description":"<p>If <code>allowFiltering</code> set to true the filter bar will be displayed.\nIf set to false the filter bar will not be displayed.\nFilter bar allows the user to filter grid records with required criteria.</p>\n<blockquote>\n<p>Check the <a href=\"../../grid/filtering/\"><code>Filtering</code></a> to customize its default behavior.</p>\n</blockquote>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/grid/#allowfiltering"},{"name":"columns","description":"<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n","type":"Column[]|string[]|ColumnModel[]","link":"//ej2.syncfusion.com/react/documentation/api/grid/#columns"},{"name":"allowGrouping","description":"<p>If <code>allowGrouping</code> set to true, then it will allow the user to dynamically group or ungroup columns.\nGrouping can be done by drag and drop columns from column header to group drop area.</p>\n<blockquote>\n<p>Check the <a href=\"../../grid/grouping/\"><code>Grouping</code></a> to customize its default behavior.</p>\n</blockquote>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/grid/#allowgrouping"},{"name":"allowPaging","description":"<p>If <code>allowPaging</code> is set to true, the pager renders at the footer of the Grid. It is used to handle page navigation in the Grid.</p>\n<blockquote>\n<p>Check the <a href=\"../../grid/paging/\"><code>Paging</code></a> to configure the grid pager.</p>\n</blockquote>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/grid/#allowpaging"},{"name":"allowSorting","description":"<p>If <code>allowSorting</code> is set to true, it allows sorting of grid records when column header is clicked.</p>\n<blockquote>\n<p>Check the <a href=\"../../grid/sorting/\"><code>Sorting</code></a> to customize its default behavior.</p>\n</blockquote>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/grid/#allowsorting"},{"name":"toolbar","description":"<p><code>toolbar</code> defines the ToolBar items of the Grid.\nIt contains built-in and custom toolbar items.\nIf a string value is assigned to the <code>toolbar</code> option, it is considered as the template for the whole Grid ToolBar.\nIf an array value is assigned, it is considered as the list of built-in and custom toolbar items in the Grid's Toolbar.\n&lt;br&gt;&lt;br&gt;\nThe available built-in ToolBar items are:</p>\n<ul>\n<li>Add: Adds a new record.</li>\n<li>Edit: Edits the selected record.</li>\n<li>Update: Updates the edited record.</li>\n<li>Delete: Deletes the selected record.</li>\n<li>Cancel: Cancels the edit state.</li>\n<li>Search: Searches records by the given key.</li>\n<li>Print: Prints the Grid.</li>\n<li>ExcelExport - Export the Grid to Excel(excelExport() method manually to make export.)</li>\n<li>PdfExport - Export the Grid to PDF(pdfExport() method manually to make export.)</li>\n<li>CsvExport - Export the Grid to CSV(csvExport() method manually to make export.)&lt;br&gt;&lt;br&gt;\nThe following code example implements the custom toolbar items.</li>\n</ul>\n<blockquote>\n<p>Check the <a href=\"../../grid/tool-bar/#custom-toolbar-items/\"><code>Toolbar</code></a> to customize its default items.</p>\n</blockquote>\n","type":"[]","link":"//ej2.syncfusion.com/react/documentation/api/grid/#toolbar"},{"name":"filterSettings","description":"<p>Configures the filter settings of the Grid.</p>\n","type":"FilterSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/grid/#filtersettings"},{"name":"pageSettings","description":"<p>Configures the pager in the Grid.</p>\n","type":"PageSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/grid/#pagesettings"},{"name":"editSettings","description":"<p>Configures the edit settings.</p>\n","type":"EditSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/grid/#editsettings"}],"grid/enable-rtl":[{"name":"dataSource","description":"<p>It is used to render grid table rows.\nIf the <code>dataSource</code> is an array of JavaScript objects,\nthen Grid will create instance of <a href=\"https://ej2.syncfusion.com/documentation/api/data/dataManager/\"><code>DataManager</code></a>\nfrom this <code>dataSource</code>.\nIf the <code>dataSource</code> is an existing <a href=\"https://ej2.syncfusion.com/documentation/api/data/dataManager/\"><code>DataManager</code></a>,\nthe Grid will not initialize a new one.</p>\n<blockquote>\n<p>Check the available <a href=\"../../data/adaptors/\"><code>Adaptors</code></a> to customize the data operation.</p>\n</blockquote>\n","type":"Object|DataManager|DataResult","link":"//ej2.syncfusion.com/react/documentation/api/grid/#datasource"},{"name":"allowSorting","description":"<p>If <code>allowSorting</code> is set to true, it allows sorting of grid records when column header is clicked.</p>\n<blockquote>\n<p>Check the <a href=\"../../grid/sorting/\"><code>Sorting</code></a> to customize its default behavior.</p>\n</blockquote>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/grid/#allowsorting"},{"name":"allowGrouping","description":"<p>If <code>allowGrouping</code> set to true, then it will allow the user to dynamically group or ungroup columns.\nGrouping can be done by drag and drop columns from column header to group drop area.</p>\n<blockquote>\n<p>Check the <a href=\"../../grid/grouping/\"><code>Grouping</code></a> to customize its default behavior.</p>\n</blockquote>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/grid/#allowgrouping"},{"name":"allowPaging","description":"<p>If <code>allowPaging</code> is set to true, the pager renders at the footer of the Grid. It is used to handle page navigation in the Grid.</p>\n<blockquote>\n<p>Check the <a href=\"../../grid/paging/\"><code>Paging</code></a> to configure the grid pager.</p>\n</blockquote>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/grid/#allowpaging"},{"name":"columns","description":"<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n","type":"Column[]|string[]|ColumnModel[]","link":"//ej2.syncfusion.com/react/documentation/api/grid/#columns"},{"name":"enableRtl","description":"<p>Enable or disable rendering component in right to left direction.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/grid/#enablertl"},{"name":"allowReordering","description":"<p>If <code>allowReordering</code> is set to true, Grid columns can be reordered.\nReordering can be done by drag and drop of a particular column from one index to another index.</p>\n<blockquote>\n<p>If Grid is rendered with stacked headers, reordering is allowed only at the same level as the column headers.</p>\n</blockquote>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/grid/#allowreordering"},{"name":"editSettings","description":"<p>Configures the edit settings.</p>\n","type":"EditSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/grid/#editsettings"},{"name":"allowFiltering","description":"<p>If <code>allowFiltering</code> set to true the filter bar will be displayed.\nIf set to false the filter bar will not be displayed.\nFilter bar allows the user to filter grid records with required criteria.</p>\n<blockquote>\n<p>Check the <a href=\"../../grid/filtering/\"><code>Filtering</code></a> to customize its default behavior.</p>\n</blockquote>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/grid/#allowfiltering"},{"name":"filterSettings","description":"<p>Configures the filter settings of the Grid.</p>\n","type":"FilterSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/grid/#filtersettings"}],"heatmapchart/default-functionalities":[{"name":"titleSettings","description":"<p>Sets and gets the options to customize the title of the heatmap.</p>\n","type":"TitleModel","link":"//ej2.syncfusion.com/react/documentation/api/heatmap/#titlesettings"},{"name":"xAxis","description":"<p>Sets and gets the options to configure the horizontal axis.</p>\n","type":"AxisModel","link":"//ej2.syncfusion.com/react/documentation/api/heatmap/#xaxis"},{"name":"yAxis","description":"<p>Sets and gets the options to configure the vertical axis.</p>\n","type":"AxisModel","link":"//ej2.syncfusion.com/react/documentation/api/heatmap/#yaxis"},{"name":"dataSource","description":"<p>Sets and gets the data to visualize in the heatmap.</p>\n","type":"Object","link":"//ej2.syncfusion.com/react/documentation/api/heatmap/#datasource"}],"heatmapchart/calendar-heatmap":[{"name":"titleSettings","description":"<p>Sets and gets the options to customize the title of the heatmap.</p>\n","type":"TitleModel","link":"//ej2.syncfusion.com/react/documentation/api/heatmap/#titlesettings"},{"name":"height","description":"<p>Sets and gets the height of the heatmap. The height of the heatmap accepts pixel or percentage values given in string format.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/heatmap/#height"},{"name":"xAxis","description":"<p>Sets and gets the options to configure the horizontal axis.</p>\n","type":"AxisModel","link":"//ej2.syncfusion.com/react/documentation/api/heatmap/#xaxis"},{"name":"yAxis","description":"<p>Sets and gets the options to configure the vertical axis.</p>\n","type":"AxisModel","link":"//ej2.syncfusion.com/react/documentation/api/heatmap/#yaxis"},{"name":"dataSource","description":"<p>Sets and gets the data to visualize in the heatmap.</p>\n","type":"Object","link":"//ej2.syncfusion.com/react/documentation/api/heatmap/#datasource"},{"name":"paletteSettings","description":"<p>Sets and gets the options for customizing the cell color of the heatmap.</p>\n","type":"PaletteSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/heatmap/#palettesettings"},{"name":"cellSettings","description":"<p>Sets and gets the options to customize the heatmap cells.</p>\n","type":"CellSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/heatmap/#cellsettings"},{"name":"legendSettings","description":"<p>Sets and gets the options for customizing the legend of the heatmap.</p>\n","type":"LegendSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/heatmap/#legendsettings"},{"name":"tooltipRender","description":"<p>Triggers before the tooltip of the heatmap is rendered on the heatmap cell.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/heatmap/#tooltiprender"}],"heatmapchart/bubble-types":[{"name":"titleSettings","description":"<p>Sets and gets the options to customize the title of the heatmap.</p>\n","type":"TitleModel","link":"//ej2.syncfusion.com/react/documentation/api/heatmap/#titlesettings"},{"name":"xAxis","description":"<p>Sets and gets the options to configure the horizontal axis.</p>\n","type":"AxisModel","link":"//ej2.syncfusion.com/react/documentation/api/heatmap/#xaxis"},{"name":"yAxis","description":"<p>Sets and gets the options to configure the vertical axis.</p>\n","type":"AxisModel","link":"//ej2.syncfusion.com/react/documentation/api/heatmap/#yaxis"},{"name":"dataSource","description":"<p>Sets and gets the data to visualize in the heatmap.</p>\n","type":"Object","link":"//ej2.syncfusion.com/react/documentation/api/heatmap/#datasource"}],"heatmapchart/color-and-size-attributes":[{"name":"titleSettings","description":"<p>Sets and gets the options to customize the title of the heatmap.</p>\n","type":"TitleModel","link":"//ej2.syncfusion.com/react/documentation/api/heatmap/#titlesettings"},{"name":"xAxis","description":"<p>Sets and gets the options to configure the horizontal axis.</p>\n","type":"AxisModel","link":"//ej2.syncfusion.com/react/documentation/api/heatmap/#xaxis"},{"name":"yAxis","description":"<p>Sets and gets the options to configure the vertical axis.</p>\n","type":"AxisModel","link":"//ej2.syncfusion.com/react/documentation/api/heatmap/#yaxis"},{"name":"dataSource","description":"<p>Sets and gets the data to visualize in the heatmap.</p>\n","type":"Object","link":"//ej2.syncfusion.com/react/documentation/api/heatmap/#datasource"}],"heatmapchart/row":[{"name":"titleSettings","description":"<p>Sets and gets the options to customize the title of the heatmap.</p>\n","type":"TitleModel","link":"//ej2.syncfusion.com/react/documentation/api/heatmap/#titlesettings"},{"name":"xAxis","description":"<p>Sets and gets the options to configure the horizontal axis.</p>\n","type":"AxisModel","link":"//ej2.syncfusion.com/react/documentation/api/heatmap/#xaxis"},{"name":"yAxis","description":"<p>Sets and gets the options to configure the vertical axis.</p>\n","type":"AxisModel","link":"//ej2.syncfusion.com/react/documentation/api/heatmap/#yaxis"},{"name":"paletteSettings","description":"<p>Sets and gets the options for customizing the cell color of the heatmap.</p>\n","type":"PaletteSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/heatmap/#palettesettings"},{"name":"legendSettings","description":"<p>Sets and gets the options for customizing the legend of the heatmap.</p>\n","type":"LegendSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/heatmap/#legendsettings"},{"name":"tooltipRender","description":"<p>Triggers before the tooltip of the heatmap is rendered on the heatmap cell.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/heatmap/#tooltiprender"},{"name":"dataSource","description":"<p>Sets and gets the data to visualize in the heatmap.</p>\n","type":"Object","link":"//ej2.syncfusion.com/react/documentation/api/heatmap/#datasource"}],"heatmapchart/cell":[{"name":"titleSettings","description":"<p>Sets and gets the options to customize the title of the heatmap.</p>\n","type":"TitleModel","link":"//ej2.syncfusion.com/react/documentation/api/heatmap/#titlesettings"},{"name":"xAxis","description":"<p>Sets and gets the options to configure the horizontal axis.</p>\n","type":"AxisModel","link":"//ej2.syncfusion.com/react/documentation/api/heatmap/#xaxis"},{"name":"yAxis","description":"<p>Sets and gets the options to configure the vertical axis.</p>\n","type":"AxisModel","link":"//ej2.syncfusion.com/react/documentation/api/heatmap/#yaxis"},{"name":"dataSource","description":"<p>Sets and gets the data to visualize in the heatmap.</p>\n","type":"Object","link":"//ej2.syncfusion.com/react/documentation/api/heatmap/#datasource"},{"name":"cellSettings","description":"<p>Sets and gets the options to customize the heatmap cells.</p>\n","type":"CellSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/heatmap/#cellsettings"},{"name":"paletteSettings","description":"<p>Sets and gets the options for customizing the cell color of the heatmap.</p>\n","type":"PaletteSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/heatmap/#palettesettings"},{"name":"legendSettings","description":"<p>Sets and gets the options for customizing the legend of the heatmap.</p>\n","type":"LegendSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/heatmap/#legendsettings"},{"name":"tooltipRender","description":"<p>Triggers before the tooltip of the heatmap is rendered on the heatmap cell.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/heatmap/#tooltiprender"}],"heatmapchart/json-row":[{"name":"titleSettings","description":"<p>Sets and gets the options to customize the title of the heatmap.</p>\n","type":"TitleModel","link":"//ej2.syncfusion.com/react/documentation/api/heatmap/#titlesettings"},{"name":"xAxis","description":"<p>Sets and gets the options to configure the horizontal axis.</p>\n","type":"AxisModel","link":"//ej2.syncfusion.com/react/documentation/api/heatmap/#xaxis"},{"name":"yAxis","description":"<p>Sets and gets the options to configure the vertical axis.</p>\n","type":"AxisModel","link":"//ej2.syncfusion.com/react/documentation/api/heatmap/#yaxis"},{"name":"dataSource","description":"<p>Sets and gets the data to visualize in the heatmap.</p>\n","type":"Object","link":"//ej2.syncfusion.com/react/documentation/api/heatmap/#datasource"},{"name":"paletteSettings","description":"<p>Sets and gets the options for customizing the cell color of the heatmap.</p>\n","type":"PaletteSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/heatmap/#palettesettings"},{"name":"cellSettings","description":"<p>Sets and gets the options to customize the heatmap cells.</p>\n","type":"CellSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/heatmap/#cellsettings"},{"name":"tooltipRender","description":"<p>Triggers before the tooltip of the heatmap is rendered on the heatmap cell.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/heatmap/#tooltiprender"}],"heatmapchart/json-cell":[{"name":"titleSettings","description":"<p>Sets and gets the options to customize the title of the heatmap.</p>\n","type":"TitleModel","link":"//ej2.syncfusion.com/react/documentation/api/heatmap/#titlesettings"},{"name":"xAxis","description":"<p>Sets and gets the options to configure the horizontal axis.</p>\n","type":"AxisModel","link":"//ej2.syncfusion.com/react/documentation/api/heatmap/#xaxis"},{"name":"yAxis","description":"<p>Sets and gets the options to configure the vertical axis.</p>\n","type":"AxisModel","link":"//ej2.syncfusion.com/react/documentation/api/heatmap/#yaxis"},{"name":"dataSource","description":"<p>Sets and gets the data to visualize in the heatmap.</p>\n","type":"Object","link":"//ej2.syncfusion.com/react/documentation/api/heatmap/#datasource"},{"name":"cellSettings","description":"<p>Sets and gets the options to customize the heatmap cells.</p>\n","type":"CellSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/heatmap/#cellsettings"},{"name":"paletteSettings","description":"<p>Sets and gets the options for customizing the cell color of the heatmap.</p>\n","type":"PaletteSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/heatmap/#palettesettings"}],"heatmapchart/empty-points":[{"name":"titleSettings","description":"<p>Sets and gets the options to customize the title of the heatmap.</p>\n","type":"TitleModel","link":"//ej2.syncfusion.com/react/documentation/api/heatmap/#titlesettings"},{"name":"xAxis","description":"<p>Sets and gets the options to configure the horizontal axis.</p>\n","type":"AxisModel","link":"//ej2.syncfusion.com/react/documentation/api/heatmap/#xaxis"},{"name":"yAxis","description":"<p>Sets and gets the options to configure the vertical axis.</p>\n","type":"AxisModel","link":"//ej2.syncfusion.com/react/documentation/api/heatmap/#yaxis"},{"name":"dataSource","description":"<p>Sets and gets the data to visualize in the heatmap.</p>\n","type":"Object","link":"//ej2.syncfusion.com/react/documentation/api/heatmap/#datasource"},{"name":"cellSettings","description":"<p>Sets and gets the options to customize the heatmap cells.</p>\n","type":"CellSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/heatmap/#cellsettings"},{"name":"tooltipRender","description":"<p>Triggers before the tooltip of the heatmap is rendered on the heatmap cell.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/heatmap/#tooltiprender"},{"name":"paletteSettings","description":"<p>Sets and gets the options for customizing the cell color of the heatmap.</p>\n","type":"PaletteSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/heatmap/#palettesettings"},{"name":"legendSettings","description":"<p>Sets and gets the options for customizing the legend of the heatmap.</p>\n","type":"LegendSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/heatmap/#legendsettings"}],"heatmapchart/inversed-axis":[{"name":"titleSettings","description":"<p>Sets and gets the options to customize the title of the heatmap.</p>\n","type":"TitleModel","link":"//ej2.syncfusion.com/react/documentation/api/heatmap/#titlesettings"},{"name":"xAxis","description":"<p>Sets and gets the options to configure the horizontal axis.</p>\n","type":"AxisModel","link":"//ej2.syncfusion.com/react/documentation/api/heatmap/#xaxis"},{"name":"yAxis","description":"<p>Sets and gets the options to configure the vertical axis.</p>\n","type":"AxisModel","link":"//ej2.syncfusion.com/react/documentation/api/heatmap/#yaxis"},{"name":"dataSource","description":"<p>Sets and gets the data to visualize in the heatmap.</p>\n","type":"Object","link":"//ej2.syncfusion.com/react/documentation/api/heatmap/#datasource"},{"name":"cellSettings","description":"<p>Sets and gets the options to customize the heatmap cells.</p>\n","type":"CellSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/heatmap/#cellsettings"},{"name":"paletteSettings","description":"<p>Sets and gets the options for customizing the cell color of the heatmap.</p>\n","type":"PaletteSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/heatmap/#palettesettings"},{"name":"legendSettings","description":"<p>Sets and gets the options for customizing the legend of the heatmap.</p>\n","type":"LegendSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/heatmap/#legendsettings"}],"heatmapchart/opposed-axis":[{"name":"titleSettings","description":"<p>Sets and gets the options to customize the title of the heatmap.</p>\n","type":"TitleModel","link":"//ej2.syncfusion.com/react/documentation/api/heatmap/#titlesettings"},{"name":"xAxis","description":"<p>Sets and gets the options to configure the horizontal axis.</p>\n","type":"AxisModel","link":"//ej2.syncfusion.com/react/documentation/api/heatmap/#xaxis"},{"name":"yAxis","description":"<p>Sets and gets the options to configure the vertical axis.</p>\n","type":"AxisModel","link":"//ej2.syncfusion.com/react/documentation/api/heatmap/#yaxis"},{"name":"dataSource","description":"<p>Sets and gets the data to visualize in the heatmap.</p>\n","type":"Object","link":"//ej2.syncfusion.com/react/documentation/api/heatmap/#datasource"},{"name":"legendSettings","description":"<p>Sets and gets the options for customizing the legend of the heatmap.</p>\n","type":"LegendSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/heatmap/#legendsettings"},{"name":"cellSettings","description":"<p>Sets and gets the options to customize the heatmap cells.</p>\n","type":"CellSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/heatmap/#cellsettings"}],"heatmapchart/label-template":[{"name":"titleSettings","description":"<p>Sets and gets the options to customize the title of the heatmap.</p>\n","type":"TitleModel","link":"//ej2.syncfusion.com/react/documentation/api/heatmap/#titlesettings"},{"name":"xAxis","description":"<p>Sets and gets the options to configure the horizontal axis.</p>\n","type":"AxisModel","link":"//ej2.syncfusion.com/react/documentation/api/heatmap/#xaxis"},{"name":"yAxis","description":"<p>Sets and gets the options to configure the vertical axis.</p>\n","type":"AxisModel","link":"//ej2.syncfusion.com/react/documentation/api/heatmap/#yaxis"},{"name":"dataSource","description":"<p>Sets and gets the data to visualize in the heatmap.</p>\n","type":"Object","link":"//ej2.syncfusion.com/react/documentation/api/heatmap/#datasource"},{"name":"cellSettings","description":"<p>Sets and gets the options to customize the heatmap cells.</p>\n","type":"CellSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/heatmap/#cellsettings"},{"name":"paletteSettings","description":"<p>Sets and gets the options for customizing the cell color of the heatmap.</p>\n","type":"PaletteSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/heatmap/#palettesettings"}],"heatmapchart/multi-level-labels":[{"name":"titleSettings","description":"<p>Sets and gets the options to customize the title of the heatmap.</p>\n","type":"TitleModel","link":"//ej2.syncfusion.com/react/documentation/api/heatmap/#titlesettings"},{"name":"xAxis","description":"<p>Sets and gets the options to configure the horizontal axis.</p>\n","type":"AxisModel","link":"//ej2.syncfusion.com/react/documentation/api/heatmap/#xaxis"},{"name":"yAxis","description":"<p>Sets and gets the options to configure the vertical axis.</p>\n","type":"AxisModel","link":"//ej2.syncfusion.com/react/documentation/api/heatmap/#yaxis"},{"name":"dataSource","description":"<p>Sets and gets the data to visualize in the heatmap.</p>\n","type":"Object","link":"//ej2.syncfusion.com/react/documentation/api/heatmap/#datasource"},{"name":"cellSettings","description":"<p>Sets and gets the options to customize the heatmap cells.</p>\n","type":"CellSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/heatmap/#cellsettings"},{"name":"legendSettings","description":"<p>Sets and gets the options for customizing the legend of the heatmap.</p>\n","type":"LegendSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/heatmap/#legendsettings"}],"heatmapchart/cell-selection":[{"name":"titleSettings","description":"<p>Sets and gets the options to customize the title of the heatmap.</p>\n","type":"TitleModel","link":"//ej2.syncfusion.com/react/documentation/api/heatmap/#titlesettings"},{"name":"xAxis","description":"<p>Sets and gets the options to configure the horizontal axis.</p>\n","type":"AxisModel","link":"//ej2.syncfusion.com/react/documentation/api/heatmap/#xaxis"},{"name":"yAxis","description":"<p>Sets and gets the options to configure the vertical axis.</p>\n","type":"AxisModel","link":"//ej2.syncfusion.com/react/documentation/api/heatmap/#yaxis"},{"name":"dataSource","description":"<p>Sets and gets the data to visualize in the heatmap.</p>\n","type":"Object","link":"//ej2.syncfusion.com/react/documentation/api/heatmap/#datasource"},{"name":"cellSettings","description":"<p>Sets and gets the options to customize the heatmap cells.</p>\n","type":"CellSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/heatmap/#cellsettings"},{"name":"allowSelection","description":"<p>Enable or disable the selection of cells in heatmap.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/heatmap/#allowselection"}],"heatmapchart/legend-placement":[{"name":"titleSettings","description":"<p>Sets and gets the options to customize the title of the heatmap.</p>\n","type":"TitleModel","link":"//ej2.syncfusion.com/react/documentation/api/heatmap/#titlesettings"},{"name":"xAxis","description":"<p>Sets and gets the options to configure the horizontal axis.</p>\n","type":"AxisModel","link":"//ej2.syncfusion.com/react/documentation/api/heatmap/#xaxis"},{"name":"yAxis","description":"<p>Sets and gets the options to configure the vertical axis.</p>\n","type":"AxisModel","link":"//ej2.syncfusion.com/react/documentation/api/heatmap/#yaxis"},{"name":"dataSource","description":"<p>Sets and gets the data to visualize in the heatmap.</p>\n","type":"Object","link":"//ej2.syncfusion.com/react/documentation/api/heatmap/#datasource"},{"name":"cellSettings","description":"<p>Sets and gets the options to customize the heatmap cells.</p>\n","type":"CellSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/heatmap/#cellsettings"},{"name":"tooltipRender","description":"<p>Triggers before the tooltip of the heatmap is rendered on the heatmap cell.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/heatmap/#tooltiprender"},{"name":"paletteSettings","description":"<p>Sets and gets the options for customizing the cell color of the heatmap.</p>\n","type":"PaletteSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/heatmap/#palettesettings"},{"name":"legendSettings","description":"<p>Sets and gets the options for customizing the legend of the heatmap.</p>\n","type":"LegendSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/heatmap/#legendsettings"}],"heatmapchart/large-data":[{"name":"titleSettings","description":"<p>Sets and gets the options to customize the title of the heatmap.</p>\n","type":"TitleModel","link":"//ej2.syncfusion.com/react/documentation/api/heatmap/#titlesettings"},{"name":"xAxis","description":"<p>Sets and gets the options to configure the horizontal axis.</p>\n","type":"AxisModel","link":"//ej2.syncfusion.com/react/documentation/api/heatmap/#xaxis"},{"name":"yAxis","description":"<p>Sets and gets the options to configure the vertical axis.</p>\n","type":"AxisModel","link":"//ej2.syncfusion.com/react/documentation/api/heatmap/#yaxis"},{"name":"dataSource","description":"<p>Sets and gets the data to visualize in the heatmap.</p>\n","type":"Object","link":"//ej2.syncfusion.com/react/documentation/api/heatmap/#datasource"},{"name":"paletteSettings","description":"<p>Sets and gets the options for customizing the cell color of the heatmap.</p>\n","type":"PaletteSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/heatmap/#palettesettings"},{"name":"cellSettings","description":"<p>Sets and gets the options to customize the heatmap cells.</p>\n","type":"CellSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/heatmap/#cellsettings"},{"name":"legendSettings","description":"<p>Sets and gets the options for customizing the legend of the heatmap.</p>\n","type":"LegendSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/heatmap/#legendsettings"},{"name":"renderingMode","description":"<p>Specifies the rendering mode of heatmap. The following are the available rendering modes.</p>\n<ul>\n<li>SVG - Heatmap is rendered using SVG element.</li>\n<li>Canvas - Heatmap is rendered using Canvas element.</li>\n<li>Auto - Automatically switches the rendering mode based on number of records in the data source.</li>\n</ul>\n","type":"DrawType","link":"//ej2.syncfusion.com/react/documentation/api/heatmap/#renderingmode"},{"name":"tooltipRender","description":"<p>Triggers before the tooltip of the heatmap is rendered on the heatmap cell.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/heatmap/#tooltiprender"}],"heatmapchart/palette-mode":[{"name":"titleSettings","description":"<p>Sets and gets the options to customize the title of the heatmap.</p>\n","type":"TitleModel","link":"//ej2.syncfusion.com/react/documentation/api/heatmap/#titlesettings"},{"name":"xAxis","description":"<p>Sets and gets the options to configure the horizontal axis.</p>\n","type":"AxisModel","link":"//ej2.syncfusion.com/react/documentation/api/heatmap/#xaxis"},{"name":"yAxis","description":"<p>Sets and gets the options to configure the vertical axis.</p>\n","type":"AxisModel","link":"//ej2.syncfusion.com/react/documentation/api/heatmap/#yaxis"},{"name":"dataSource","description":"<p>Sets and gets the data to visualize in the heatmap.</p>\n","type":"Object","link":"//ej2.syncfusion.com/react/documentation/api/heatmap/#datasource"},{"name":"paletteSettings","description":"<p>Sets and gets the options for customizing the cell color of the heatmap.</p>\n","type":"PaletteSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/heatmap/#palettesettings"},{"name":"cellSettings","description":"<p>Sets and gets the options to customize the heatmap cells.</p>\n","type":"CellSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/heatmap/#cellsettings"},{"name":"legendSettings","description":"<p>Sets and gets the options for customizing the legend of the heatmap.</p>\n","type":"LegendSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/heatmap/#legendsettings"}],"heatmapchart/color-range":[{"name":"titleSettings","description":"<p>Sets and gets the options to customize the title of the heatmap.</p>\n","type":"TitleModel","link":"//ej2.syncfusion.com/react/documentation/api/heatmap/#titlesettings"},{"name":"xAxis","description":"<p>Sets and gets the options to configure the horizontal axis.</p>\n","type":"AxisModel","link":"//ej2.syncfusion.com/react/documentation/api/heatmap/#xaxis"},{"name":"yAxis","description":"<p>Sets and gets the options to configure the vertical axis.</p>\n","type":"AxisModel","link":"//ej2.syncfusion.com/react/documentation/api/heatmap/#yaxis"},{"name":"dataSource","description":"<p>Sets and gets the data to visualize in the heatmap.</p>\n","type":"Object","link":"//ej2.syncfusion.com/react/documentation/api/heatmap/#datasource"},{"name":"paletteSettings","description":"<p>Sets and gets the options for customizing the cell color of the heatmap.</p>\n","type":"PaletteSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/heatmap/#palettesettings"},{"name":"cellSettings","description":"<p>Sets and gets the options to customize the heatmap cells.</p>\n","type":"CellSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/heatmap/#cellsettings"}],"heatmapchart/rendering-mode":[{"name":"titleSettings","description":"<p>Sets and gets the options to customize the title of the heatmap.</p>\n","type":"TitleModel","link":"//ej2.syncfusion.com/react/documentation/api/heatmap/#titlesettings"},{"name":"xAxis","description":"<p>Sets and gets the options to configure the horizontal axis.</p>\n","type":"AxisModel","link":"//ej2.syncfusion.com/react/documentation/api/heatmap/#xaxis"},{"name":"yAxis","description":"<p>Sets and gets the options to configure the vertical axis.</p>\n","type":"AxisModel","link":"//ej2.syncfusion.com/react/documentation/api/heatmap/#yaxis"},{"name":"dataSource","description":"<p>Sets and gets the data to visualize in the heatmap.</p>\n","type":"Object","link":"//ej2.syncfusion.com/react/documentation/api/heatmap/#datasource"},{"name":"paletteSettings","description":"<p>Sets and gets the options for customizing the cell color of the heatmap.</p>\n","type":"PaletteSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/heatmap/#palettesettings"},{"name":"renderingMode","description":"<p>Specifies the rendering mode of heatmap. The following are the available rendering modes.</p>\n<ul>\n<li>SVG - Heatmap is rendered using SVG element.</li>\n<li>Canvas - Heatmap is rendered using Canvas element.</li>\n<li>Auto - Automatically switches the rendering mode based on number of records in the data source.</li>\n</ul>\n","type":"DrawType","link":"//ej2.syncfusion.com/react/documentation/api/heatmap/#renderingmode"},{"name":"cellSettings","description":"<p>Sets and gets the options to customize the heatmap cells.</p>\n","type":"CellSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/heatmap/#cellsettings"},{"name":"legendSettings","description":"<p>Sets and gets the options for customizing the legend of the heatmap.</p>\n","type":"LegendSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/heatmap/#legendsettings"}],"heatmapchart/tooltip-template":[{"name":"titleSettings","description":"<p>Sets and gets the options to customize the title of the heatmap.</p>\n","type":"TitleModel","link":"//ej2.syncfusion.com/react/documentation/api/heatmap/#titlesettings"},{"name":"xAxis","description":"<p>Sets and gets the options to configure the horizontal axis.</p>\n","type":"AxisModel","link":"//ej2.syncfusion.com/react/documentation/api/heatmap/#xaxis"},{"name":"yAxis","description":"<p>Sets and gets the options to configure the vertical axis.</p>\n","type":"AxisModel","link":"//ej2.syncfusion.com/react/documentation/api/heatmap/#yaxis"},{"name":"dataSource","description":"<p>Sets and gets the data to visualize in the heatmap.</p>\n","type":"Object","link":"//ej2.syncfusion.com/react/documentation/api/heatmap/#datasource"},{"name":"cellSettings","description":"<p>Sets and gets the options to customize the heatmap cells.</p>\n","type":"CellSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/heatmap/#cellsettings"},{"name":"legendSettings","description":"<p>Sets and gets the options for customizing the legend of the heatmap.</p>\n","type":"LegendSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/heatmap/#legendsettings"},{"name":"paletteSettings","description":"<p>Sets and gets the options for customizing the cell color of the heatmap.</p>\n","type":"PaletteSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/heatmap/#palettesettings"},{"name":"tooltipRender","description":"<p>Triggers before the tooltip of the heatmap is rendered on the heatmap cell.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/heatmap/#tooltiprender"}],"imageeditor/default":[{"name":"width","description":"<p>Specifies the width of an Image Editor.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/image-editor/#width"},{"name":"height","description":"<p>Specifies the height of the Image Editor.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/image-editor/#height"}],"imageeditor/profile-picture":[{"name":"width","description":"<p>Specifies the width of an Image Editor.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/image-editor/#width"},{"name":"height","description":"<p>Specifies the height of the Image Editor.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/image-editor/#height"}],"imageeditor/custom-toolbar":[{"name":"width","description":"<p>Specifies the width of an Image Editor.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/image-editor/#width"},{"name":"height","description":"<p>Specifies the height of the Image Editor.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/image-editor/#height"}],"imageeditor/file-restrict":[{"name":"width","description":"<p>Specifies the width of an Image Editor.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/image-editor/#width"},{"name":"height","description":"<p>Specifies the height of the Image Editor.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/image-editor/#height"}],"inplaceeditor/default":[{"name":"mode","description":"<p>Specifies the mode to be render while editing. The possible modes are :</p>\n<ul>\n<li><code>Inline</code>: Editable content is displayed as inline text and ok/cancel buttons are displayed at right bottom corner of input.</li>\n<li><code>Popup</code>: Editable content and ok/cancel buttons are displayed inside popup while editing.</li>\n</ul>\n","type":"RenderMode","link":"//ej2.syncfusion.com/react/documentation/api/inplace-editor/#mode"},{"name":"type","description":"<p>Specifies the type of components that integrated with In-place editor to make it as editable.</p>\n","type":"InputType","link":"//ej2.syncfusion.com/react/documentation/api/inplace-editor/#type"},{"name":"value","description":"<p>Specifies the display value for input when original input value is empty.</p>\n","type":"string|number|Date|string[]|Date[]|number[]","link":"//ej2.syncfusion.com/react/documentation/api/inplace-editor/#value"},{"name":"showButtons","description":"<p>Used to show/hide the ok/cancel buttons of In-place editor.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/inplace-editor/#showbuttons"},{"name":"disabled","description":"<p>Specifies whether to enable editing mode or not.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/inplace-editor/#disabled"}],"inplaceeditor/dropdowns":[{"name":"mode","description":"<p>Specifies the mode to be render while editing. The possible modes are :</p>\n<ul>\n<li><code>Inline</code>: Editable content is displayed as inline text and ok/cancel buttons are displayed at right bottom corner of input.</li>\n<li><code>Popup</code>: Editable content and ok/cancel buttons are displayed inside popup while editing.</li>\n</ul>\n","type":"RenderMode","link":"//ej2.syncfusion.com/react/documentation/api/inplace-editor/#mode"},{"name":"type","description":"<p>Specifies the type of components that integrated with In-place editor to make it as editable.</p>\n","type":"InputType","link":"//ej2.syncfusion.com/react/documentation/api/inplace-editor/#type"},{"name":"value","description":"<p>Specifies the display value for input when original input value is empty.</p>\n","type":"string|number|Date|string[]|Date[]|number[]","link":"//ej2.syncfusion.com/react/documentation/api/inplace-editor/#value"},{"name":"enableEditMode","description":"<p>Specifies to show/hide the editing mode.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/inplace-editor/#enableeditmode"},{"name":"model","description":"<p>Specifies the model object configuration for the integrated components like AutoComplete, DatePicker,NumericTextBox, etc.</p>\n","type":"AutoCompleteModel|ColorPickerModel|ComboBoxModel|DatePickerModel|DateRangePickerModel|DateTimePickerModel|DropDownListModel|MaskedTextBoxModel|MultiSelectModel|NumericTextBoxModel|RichTextEditorModel|SliderModel|TextBoxModel|TimePickerModel","link":"//ej2.syncfusion.com/react/documentation/api/inplace-editor/#model"}],"inplaceeditor/pickers":[{"name":"mode","description":"<p>Specifies the mode to be render while editing. The possible modes are :</p>\n<ul>\n<li><code>Inline</code>: Editable content is displayed as inline text and ok/cancel buttons are displayed at right bottom corner of input.</li>\n<li><code>Popup</code>: Editable content and ok/cancel buttons are displayed inside popup while editing.</li>\n</ul>\n","type":"RenderMode","link":"//ej2.syncfusion.com/react/documentation/api/inplace-editor/#mode"},{"name":"type","description":"<p>Specifies the type of components that integrated with In-place editor to make it as editable.</p>\n","type":"InputType","link":"//ej2.syncfusion.com/react/documentation/api/inplace-editor/#type"},{"name":"value","description":"<p>Specifies the display value for input when original input value is empty.</p>\n","type":"string|number|Date|string[]|Date[]|number[]","link":"//ej2.syncfusion.com/react/documentation/api/inplace-editor/#value"},{"name":"enableEditMode","description":"<p>Specifies to show/hide the editing mode.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/inplace-editor/#enableeditmode"},{"name":"model","description":"<p>Specifies the model object configuration for the integrated components like AutoComplete, DatePicker,NumericTextBox, etc.</p>\n","type":"AutoCompleteModel|ColorPickerModel|ComboBoxModel|DatePickerModel|DateRangePickerModel|DateTimePickerModel|DropDownListModel|MaskedTextBoxModel|MultiSelectModel|NumericTextBoxModel|RichTextEditorModel|SliderModel|TextBoxModel|TimePickerModel","link":"//ej2.syncfusion.com/react/documentation/api/inplace-editor/#model"}],"inplaceeditor/edit-post":[{"name":"mode","description":"<p>Specifies the mode to be render while editing. The possible modes are :</p>\n<ul>\n<li><code>Inline</code>: Editable content is displayed as inline text and ok/cancel buttons are displayed at right bottom corner of input.</li>\n<li><code>Popup</code>: Editable content and ok/cancel buttons are displayed inside popup while editing.</li>\n</ul>\n","type":"RenderMode","link":"//ej2.syncfusion.com/react/documentation/api/inplace-editor/#mode"},{"name":"type","description":"<p>Specifies the type of components that integrated with In-place editor to make it as editable.</p>\n","type":"InputType","link":"//ej2.syncfusion.com/react/documentation/api/inplace-editor/#type"},{"name":"value","description":"<p>Specifies the display value for input when original input value is empty.</p>\n","type":"string|number|Date|string[]|Date[]|number[]","link":"//ej2.syncfusion.com/react/documentation/api/inplace-editor/#value"}],"kanban/overview":[{"name":"dataSource","description":"<p>With this property, the card data will be bound to Kanban.\nThe card data can be passed either as an array of JavaScript objects,\nor else can create an instance of <a href=\"http://ej2.syncfusion.com/documentation/data/api-dataManager.html\"><code>DataManager</code></a>\nin case of processing remote data and can be assigned to the <code>dataSource</code> property.\nWith the remote data assigned to dataSource, check the available\n<a href=\"http://ej2.syncfusion.com/documentation/data/adaptors.html\">adaptors</a> to customize the data processing.</p>\n","type":"Record[]|DataManager","link":"//ej2.syncfusion.com/react/documentation/api/kanban/#datasource"},{"name":"keyField","description":"<p>Defines the key field of Kanban board. The Kanban renders its layout based on this key field.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/kanban/#keyfield"},{"name":"columns","description":"<p>Defines the Kanban board columns and their properties such as header text, key field, template, allow toggle,\nexpand or collapse state, min or max count, and show or hide item count.</p>\n","type":"ColumnsModel[]","link":"//ej2.syncfusion.com/react/documentation/api/kanban/#columns"},{"name":"cardSettings","description":"<p>Defines the Kanban board related settings such as header field, content field, template,\nshow or hide header, and single or multiple selection.</p>\n","type":"CardSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/kanban/#cardsettings"},{"name":"swimlaneSettings","description":"<p>Defines the swimlane settings to Kanban board such as key field, text field, template, allow drag-and-drop,\nshow or hide empty row, show or hide items count, and more.</p>\n","type":"SwimlaneSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/kanban/#swimlanesettings"},{"name":"enableTooltip","description":"<p>Enables or disables the tooltip in Kanban board. The property relates to the tooltipTemplate property.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/kanban/#enabletooltip"}],"kanban/default":[{"name":"dataSource","description":"<p>With this property, the card data will be bound to Kanban.\nThe card data can be passed either as an array of JavaScript objects,\nor else can create an instance of <a href=\"http://ej2.syncfusion.com/documentation/data/api-dataManager.html\"><code>DataManager</code></a>\nin case of processing remote data and can be assigned to the <code>dataSource</code> property.\nWith the remote data assigned to dataSource, check the available\n<a href=\"http://ej2.syncfusion.com/documentation/data/adaptors.html\">adaptors</a> to customize the data processing.</p>\n","type":"Record[]|DataManager","link":"//ej2.syncfusion.com/react/documentation/api/kanban/#datasource"},{"name":"keyField","description":"<p>Defines the key field of Kanban board. The Kanban renders its layout based on this key field.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/kanban/#keyfield"},{"name":"columns","description":"<p>Defines the Kanban board columns and their properties such as header text, key field, template, allow toggle,\nexpand or collapse state, min or max count, and show or hide item count.</p>\n","type":"ColumnsModel[]","link":"//ej2.syncfusion.com/react/documentation/api/kanban/#columns"},{"name":"cardSettings","description":"<p>Defines the Kanban board related settings such as header field, content field, template,\nshow or hide header, and single or multiple selection.</p>\n","type":"CardSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/kanban/#cardsettings"},{"name":"dialogSettings","description":"<p>Defines the dialog settings such as template and fields.</p>\n","type":"DialogSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/kanban/#dialogsettings"}],"kanban/swimlane":[{"name":"dataSource","description":"<p>With this property, the card data will be bound to Kanban.\nThe card data can be passed either as an array of JavaScript objects,\nor else can create an instance of <a href=\"http://ej2.syncfusion.com/documentation/data/api-dataManager.html\"><code>DataManager</code></a>\nin case of processing remote data and can be assigned to the <code>dataSource</code> property.\nWith the remote data assigned to dataSource, check the available\n<a href=\"http://ej2.syncfusion.com/documentation/data/adaptors.html\">adaptors</a> to customize the data processing.</p>\n","type":"Record[]|DataManager","link":"//ej2.syncfusion.com/react/documentation/api/kanban/#datasource"},{"name":"keyField","description":"<p>Defines the key field of Kanban board. The Kanban renders its layout based on this key field.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/kanban/#keyfield"},{"name":"columns","description":"<p>Defines the Kanban board columns and their properties such as header text, key field, template, allow toggle,\nexpand or collapse state, min or max count, and show or hide item count.</p>\n","type":"ColumnsModel[]","link":"//ej2.syncfusion.com/react/documentation/api/kanban/#columns"},{"name":"cardSettings","description":"<p>Defines the Kanban board related settings such as header field, content field, template,\nshow or hide header, and single or multiple selection.</p>\n","type":"CardSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/kanban/#cardsettings"},{"name":"swimlaneSettings","description":"<p>Defines the swimlane settings to Kanban board such as key field, text field, template, allow drag-and-drop,\nshow or hide empty row, show or hide items count, and more.</p>\n","type":"SwimlaneSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/kanban/#swimlanesettings"}],"kanban/workflow":[{"name":"dataSource","description":"<p>With this property, the card data will be bound to Kanban.\nThe card data can be passed either as an array of JavaScript objects,\nor else can create an instance of <a href=\"http://ej2.syncfusion.com/documentation/data/api-dataManager.html\"><code>DataManager</code></a>\nin case of processing remote data and can be assigned to the <code>dataSource</code> property.\nWith the remote data assigned to dataSource, check the available\n<a href=\"http://ej2.syncfusion.com/documentation/data/adaptors.html\">adaptors</a> to customize the data processing.</p>\n","type":"Record[]|DataManager","link":"//ej2.syncfusion.com/react/documentation/api/kanban/#datasource"},{"name":"keyField","description":"<p>Defines the key field of Kanban board. The Kanban renders its layout based on this key field.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/kanban/#keyfield"},{"name":"columns","description":"<p>Defines the Kanban board columns and their properties such as header text, key field, template, allow toggle,\nexpand or collapse state, min or max count, and show or hide item count.</p>\n","type":"ColumnsModel[]","link":"//ej2.syncfusion.com/react/documentation/api/kanban/#columns"},{"name":"cardSettings","description":"<p>Defines the Kanban board related settings such as header field, content field, template,\nshow or hide header, and single or multiple selection.</p>\n","type":"CardSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/kanban/#cardsettings"}],"kanban/stacked-header":[{"name":"dataSource","description":"<p>With this property, the card data will be bound to Kanban.\nThe card data can be passed either as an array of JavaScript objects,\nor else can create an instance of <a href=\"http://ej2.syncfusion.com/documentation/data/api-dataManager.html\"><code>DataManager</code></a>\nin case of processing remote data and can be assigned to the <code>dataSource</code> property.\nWith the remote data assigned to dataSource, check the available\n<a href=\"http://ej2.syncfusion.com/documentation/data/adaptors.html\">adaptors</a> to customize the data processing.</p>\n","type":"Record[]|DataManager","link":"//ej2.syncfusion.com/react/documentation/api/kanban/#datasource"},{"name":"keyField","description":"<p>Defines the key field of Kanban board. The Kanban renders its layout based on this key field.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/kanban/#keyfield"},{"name":"columns","description":"<p>Defines the Kanban board columns and their properties such as header text, key field, template, allow toggle,\nexpand or collapse state, min or max count, and show or hide item count.</p>\n","type":"ColumnsModel[]","link":"//ej2.syncfusion.com/react/documentation/api/kanban/#columns"},{"name":"cardSettings","description":"<p>Defines the Kanban board related settings such as header field, content field, template,\nshow or hide header, and single or multiple selection.</p>\n","type":"CardSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/kanban/#cardsettings"},{"name":"stackedHeaders","description":"<p>Defines the stacked header for Kanban columns with text and key fields.</p>\n","type":"StackedHeadersModel[]","link":"//ej2.syncfusion.com/react/documentation/api/kanban/#stackedheaders"}],"kanban/dialog-editing":[{"name":"dataSource","description":"<p>With this property, the card data will be bound to Kanban.\nThe card data can be passed either as an array of JavaScript objects,\nor else can create an instance of <a href=\"http://ej2.syncfusion.com/documentation/data/api-dataManager.html\"><code>DataManager</code></a>\nin case of processing remote data and can be assigned to the <code>dataSource</code> property.\nWith the remote data assigned to dataSource, check the available\n<a href=\"http://ej2.syncfusion.com/documentation/data/adaptors.html\">adaptors</a> to customize the data processing.</p>\n","type":"Record[]|DataManager","link":"//ej2.syncfusion.com/react/documentation/api/kanban/#datasource"},{"name":"keyField","description":"<p>Defines the key field of Kanban board. The Kanban renders its layout based on this key field.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/kanban/#keyfield"},{"name":"columns","description":"<p>Defines the Kanban board columns and their properties such as header text, key field, template, allow toggle,\nexpand or collapse state, min or max count, and show or hide item count.</p>\n","type":"ColumnsModel[]","link":"//ej2.syncfusion.com/react/documentation/api/kanban/#columns"},{"name":"cardSettings","description":"<p>Defines the Kanban board related settings such as header field, content field, template,\nshow or hide header, and single or multiple selection.</p>\n","type":"CardSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/kanban/#cardsettings"},{"name":"dialogSettings","description":"<p>Defines the dialog settings such as template and fields.</p>\n","type":"DialogSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/kanban/#dialogsettings"},{"name":"dialogOpen","description":"<p>Triggers before the dialog opens.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/kanban/#dialogopen"}],"kanban/search-filter":[{"name":"dataSource","description":"<p>With this property, the card data will be bound to Kanban.\nThe card data can be passed either as an array of JavaScript objects,\nor else can create an instance of <a href=\"http://ej2.syncfusion.com/documentation/data/api-dataManager.html\"><code>DataManager</code></a>\nin case of processing remote data and can be assigned to the <code>dataSource</code> property.\nWith the remote data assigned to dataSource, check the available\n<a href=\"http://ej2.syncfusion.com/documentation/data/adaptors.html\">adaptors</a> to customize the data processing.</p>\n","type":"Record[]|DataManager","link":"//ej2.syncfusion.com/react/documentation/api/kanban/#datasource"},{"name":"keyField","description":"<p>Defines the key field of Kanban board. The Kanban renders its layout based on this key field.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/kanban/#keyfield"},{"name":"columns","description":"<p>Defines the Kanban board columns and their properties such as header text, key field, template, allow toggle,\nexpand or collapse state, min or max count, and show or hide item count.</p>\n","type":"ColumnsModel[]","link":"//ej2.syncfusion.com/react/documentation/api/kanban/#columns"},{"name":"cardSettings","description":"<p>Defines the Kanban board related settings such as header field, content field, template,\nshow or hide header, and single or multiple selection.</p>\n","type":"CardSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/kanban/#cardsettings"},{"name":"swimlaneSettings","description":"<p>Defines the swimlane settings to Kanban board such as key field, text field, template, allow drag-and-drop,\nshow or hide empty row, show or hide items count, and more.</p>\n","type":"SwimlaneSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/kanban/#swimlanesettings"},{"name":"query","description":"<p>Defines the external <a href=\"http://ej2.syncfusion.com/documentation/data/api-query.html\"><code>query</code></a>\nthat will be executed along with the data processing.</p>\n","type":"Query","link":"//ej2.syncfusion.com/react/documentation/api/kanban/#query"}],"kanban/sorting":[{"name":"dataSource","description":"<p>With this property, the card data will be bound to Kanban.\nThe card data can be passed either as an array of JavaScript objects,\nor else can create an instance of <a href=\"http://ej2.syncfusion.com/documentation/data/api-dataManager.html\"><code>DataManager</code></a>\nin case of processing remote data and can be assigned to the <code>dataSource</code> property.\nWith the remote data assigned to dataSource, check the available\n<a href=\"http://ej2.syncfusion.com/documentation/data/adaptors.html\">adaptors</a> to customize the data processing.</p>\n","type":"Record[]|DataManager","link":"//ej2.syncfusion.com/react/documentation/api/kanban/#datasource"},{"name":"keyField","description":"<p>Defines the key field of Kanban board. The Kanban renders its layout based on this key field.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/kanban/#keyfield"},{"name":"columns","description":"<p>Defines the Kanban board columns and their properties such as header text, key field, template, allow toggle,\nexpand or collapse state, min or max count, and show or hide item count.</p>\n","type":"ColumnsModel[]","link":"//ej2.syncfusion.com/react/documentation/api/kanban/#columns"},{"name":"cardSettings","description":"<p>Defines the Kanban board related settings such as header field, content field, template,\nshow or hide header, and single or multiple selection.</p>\n","type":"CardSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/kanban/#cardsettings"},{"name":"sortSettings","description":"<p>Defines the sort settings such as field and direction.</p>\n","type":"SortSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/kanban/#sortsettings"}],"kanban/virtual-scrolling":[{"name":"dataSource","description":"<p>With this property, the card data will be bound to Kanban.\nThe card data can be passed either as an array of JavaScript objects,\nor else can create an instance of <a href=\"http://ej2.syncfusion.com/documentation/data/api-dataManager.html\"><code>DataManager</code></a>\nin case of processing remote data and can be assigned to the <code>dataSource</code> property.\nWith the remote data assigned to dataSource, check the available\n<a href=\"http://ej2.syncfusion.com/documentation/data/adaptors.html\">adaptors</a> to customize the data processing.</p>\n","type":"Record[]|DataManager","link":"//ej2.syncfusion.com/react/documentation/api/kanban/#datasource"},{"name":"keyField","description":"<p>Defines the key field of Kanban board. The Kanban renders its layout based on this key field.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/kanban/#keyfield"},{"name":"columns","description":"<p>Defines the Kanban board columns and their properties such as header text, key field, template, allow toggle,\nexpand or collapse state, min or max count, and show or hide item count.</p>\n","type":"ColumnsModel[]","link":"//ej2.syncfusion.com/react/documentation/api/kanban/#columns"},{"name":"cardSettings","description":"<p>Defines the Kanban board related settings such as header field, content field, template,\nshow or hide header, and single or multiple selection.</p>\n","type":"CardSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/kanban/#cardsettings"},{"name":"dialogSettings","description":"<p>Defines the dialog settings such as template and fields.</p>\n","type":"DialogSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/kanban/#dialogsettings"},{"name":"enableTooltip","description":"<p>Enables or disables the tooltip in Kanban board. The property relates to the tooltipTemplate property.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/kanban/#enabletooltip"}],"kanban/local-data":[{"name":"dataSource","description":"<p>With this property, the card data will be bound to Kanban.\nThe card data can be passed either as an array of JavaScript objects,\nor else can create an instance of <a href=\"http://ej2.syncfusion.com/documentation/data/api-dataManager.html\"><code>DataManager</code></a>\nin case of processing remote data and can be assigned to the <code>dataSource</code> property.\nWith the remote data assigned to dataSource, check the available\n<a href=\"http://ej2.syncfusion.com/documentation/data/adaptors.html\">adaptors</a> to customize the data processing.</p>\n","type":"Record[]|DataManager","link":"//ej2.syncfusion.com/react/documentation/api/kanban/#datasource"},{"name":"keyField","description":"<p>Defines the key field of Kanban board. The Kanban renders its layout based on this key field.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/kanban/#keyfield"},{"name":"columns","description":"<p>Defines the Kanban board columns and their properties such as header text, key field, template, allow toggle,\nexpand or collapse state, min or max count, and show or hide item count.</p>\n","type":"ColumnsModel[]","link":"//ej2.syncfusion.com/react/documentation/api/kanban/#columns"},{"name":"cardSettings","description":"<p>Defines the Kanban board related settings such as header field, content field, template,\nshow or hide header, and single or multiple selection.</p>\n","type":"CardSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/kanban/#cardsettings"}],"kanban/remote-data":[{"name":"dataSource","description":"<p>With this property, the card data will be bound to Kanban.\nThe card data can be passed either as an array of JavaScript objects,\nor else can create an instance of <a href=\"http://ej2.syncfusion.com/documentation/data/api-dataManager.html\"><code>DataManager</code></a>\nin case of processing remote data and can be assigned to the <code>dataSource</code> property.\nWith the remote data assigned to dataSource, check the available\n<a href=\"http://ej2.syncfusion.com/documentation/data/adaptors.html\">adaptors</a> to customize the data processing.</p>\n","type":"Record[]|DataManager","link":"//ej2.syncfusion.com/react/documentation/api/kanban/#datasource"},{"name":"keyField","description":"<p>Defines the key field of Kanban board. The Kanban renders its layout based on this key field.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/kanban/#keyfield"},{"name":"columns","description":"<p>Defines the Kanban board columns and their properties such as header text, key field, template, allow toggle,\nexpand or collapse state, min or max count, and show or hide item count.</p>\n","type":"ColumnsModel[]","link":"//ej2.syncfusion.com/react/documentation/api/kanban/#columns"},{"name":"cardSettings","description":"<p>Defines the Kanban board related settings such as header field, content field, template,\nshow or hide header, and single or multiple selection.</p>\n","type":"CardSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/kanban/#cardsettings"},{"name":"allowDragAndDrop","description":"<p>Enables or disables the drag and drop actions in Kanban.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/kanban/#allowdraganddrop"},{"name":"dialogOpen","description":"<p>Triggers before the dialog opens.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/kanban/#dialogopen"}],"kanban/header-template":[{"name":"dataSource","description":"<p>With this property, the card data will be bound to Kanban.\nThe card data can be passed either as an array of JavaScript objects,\nor else can create an instance of <a href=\"http://ej2.syncfusion.com/documentation/data/api-dataManager.html\"><code>DataManager</code></a>\nin case of processing remote data and can be assigned to the <code>dataSource</code> property.\nWith the remote data assigned to dataSource, check the available\n<a href=\"http://ej2.syncfusion.com/documentation/data/adaptors.html\">adaptors</a> to customize the data processing.</p>\n","type":"Record[]|DataManager","link":"//ej2.syncfusion.com/react/documentation/api/kanban/#datasource"},{"name":"keyField","description":"<p>Defines the key field of Kanban board. The Kanban renders its layout based on this key field.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/kanban/#keyfield"},{"name":"columns","description":"<p>Defines the Kanban board columns and their properties such as header text, key field, template, allow toggle,\nexpand or collapse state, min or max count, and show or hide item count.</p>\n","type":"ColumnsModel[]","link":"//ej2.syncfusion.com/react/documentation/api/kanban/#columns"},{"name":"cardSettings","description":"<p>Defines the Kanban board related settings such as header field, content field, template,\nshow or hide header, and single or multiple selection.</p>\n","type":"CardSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/kanban/#cardsettings"}],"kanban/swimlane-template":[{"name":"dataSource","description":"<p>With this property, the card data will be bound to Kanban.\nThe card data can be passed either as an array of JavaScript objects,\nor else can create an instance of <a href=\"http://ej2.syncfusion.com/documentation/data/api-dataManager.html\"><code>DataManager</code></a>\nin case of processing remote data and can be assigned to the <code>dataSource</code> property.\nWith the remote data assigned to dataSource, check the available\n<a href=\"http://ej2.syncfusion.com/documentation/data/adaptors.html\">adaptors</a> to customize the data processing.</p>\n","type":"Record[]|DataManager","link":"//ej2.syncfusion.com/react/documentation/api/kanban/#datasource"},{"name":"keyField","description":"<p>Defines the key field of Kanban board. The Kanban renders its layout based on this key field.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/kanban/#keyfield"},{"name":"columns","description":"<p>Defines the Kanban board columns and their properties such as header text, key field, template, allow toggle,\nexpand or collapse state, min or max count, and show or hide item count.</p>\n","type":"ColumnsModel[]","link":"//ej2.syncfusion.com/react/documentation/api/kanban/#columns"},{"name":"cardSettings","description":"<p>Defines the Kanban board related settings such as header field, content field, template,\nshow or hide header, and single or multiple selection.</p>\n","type":"CardSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/kanban/#cardsettings"},{"name":"swimlaneSettings","description":"<p>Defines the swimlane settings to Kanban board such as key field, text field, template, allow drag-and-drop,\nshow or hide empty row, show or hide items count, and more.</p>\n","type":"SwimlaneSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/kanban/#swimlanesettings"}],"kanban/card-template":[{"name":"dataSource","description":"<p>With this property, the card data will be bound to Kanban.\nThe card data can be passed either as an array of JavaScript objects,\nor else can create an instance of <a href=\"http://ej2.syncfusion.com/documentation/data/api-dataManager.html\"><code>DataManager</code></a>\nin case of processing remote data and can be assigned to the <code>dataSource</code> property.\nWith the remote data assigned to dataSource, check the available\n<a href=\"http://ej2.syncfusion.com/documentation/data/adaptors.html\">adaptors</a> to customize the data processing.</p>\n","type":"Record[]|DataManager","link":"//ej2.syncfusion.com/react/documentation/api/kanban/#datasource"},{"name":"keyField","description":"<p>Defines the key field of Kanban board. The Kanban renders its layout based on this key field.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/kanban/#keyfield"},{"name":"columns","description":"<p>Defines the Kanban board columns and their properties such as header text, key field, template, allow toggle,\nexpand or collapse state, min or max count, and show or hide item count.</p>\n","type":"ColumnsModel[]","link":"//ej2.syncfusion.com/react/documentation/api/kanban/#columns"},{"name":"cardSettings","description":"<p>Defines the Kanban board related settings such as header field, content field, template,\nshow or hide header, and single or multiple selection.</p>\n","type":"CardSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/kanban/#cardsettings"},{"name":"dialogSettings","description":"<p>Defines the dialog settings such as template and fields.</p>\n","type":"DialogSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/kanban/#dialogsettings"}],"kanban/tooltip-template":[{"name":"dataSource","description":"<p>With this property, the card data will be bound to Kanban.\nThe card data can be passed either as an array of JavaScript objects,\nor else can create an instance of <a href=\"http://ej2.syncfusion.com/documentation/data/api-dataManager.html\"><code>DataManager</code></a>\nin case of processing remote data and can be assigned to the <code>dataSource</code> property.\nWith the remote data assigned to dataSource, check the available\n<a href=\"http://ej2.syncfusion.com/documentation/data/adaptors.html\">adaptors</a> to customize the data processing.</p>\n","type":"Record[]|DataManager","link":"//ej2.syncfusion.com/react/documentation/api/kanban/#datasource"},{"name":"keyField","description":"<p>Defines the key field of Kanban board. The Kanban renders its layout based on this key field.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/kanban/#keyfield"},{"name":"columns","description":"<p>Defines the Kanban board columns and their properties such as header text, key field, template, allow toggle,\nexpand or collapse state, min or max count, and show or hide item count.</p>\n","type":"ColumnsModel[]","link":"//ej2.syncfusion.com/react/documentation/api/kanban/#columns"},{"name":"cardSettings","description":"<p>Defines the Kanban board related settings such as header field, content field, template,\nshow or hide header, and single or multiple selection.</p>\n","type":"CardSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/kanban/#cardsettings"},{"name":"enableTooltip","description":"<p>Enables or disables the tooltip in Kanban board. The property relates to the tooltipTemplate property.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/kanban/#enabletooltip"},{"name":"tooltipTemplate","description":"<p>Defines the template content to card’s tooltip. The property works by enabling the ‘enableTooltip’ property.</p>\n","type":"string|Function","link":"//ej2.syncfusion.com/react/documentation/api/kanban/#tooltiptemplate"}],"kanban/toggle-columns":[{"name":"dataSource","description":"<p>With this property, the card data will be bound to Kanban.\nThe card data can be passed either as an array of JavaScript objects,\nor else can create an instance of <a href=\"http://ej2.syncfusion.com/documentation/data/api-dataManager.html\"><code>DataManager</code></a>\nin case of processing remote data and can be assigned to the <code>dataSource</code> property.\nWith the remote data assigned to dataSource, check the available\n<a href=\"http://ej2.syncfusion.com/documentation/data/adaptors.html\">adaptors</a> to customize the data processing.</p>\n","type":"Record[]|DataManager","link":"//ej2.syncfusion.com/react/documentation/api/kanban/#datasource"},{"name":"keyField","description":"<p>Defines the key field of Kanban board. The Kanban renders its layout based on this key field.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/kanban/#keyfield"},{"name":"columns","description":"<p>Defines the Kanban board columns and their properties such as header text, key field, template, allow toggle,\nexpand or collapse state, min or max count, and show or hide item count.</p>\n","type":"ColumnsModel[]","link":"//ej2.syncfusion.com/react/documentation/api/kanban/#columns"},{"name":"cardSettings","description":"<p>Defines the Kanban board related settings such as header field, content field, template,\nshow or hide header, and single or multiple selection.</p>\n","type":"CardSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/kanban/#cardsettings"}],"kanban/show-hide":[{"name":"dataSource","description":"<p>With this property, the card data will be bound to Kanban.\nThe card data can be passed either as an array of JavaScript objects,\nor else can create an instance of <a href=\"http://ej2.syncfusion.com/documentation/data/api-dataManager.html\"><code>DataManager</code></a>\nin case of processing remote data and can be assigned to the <code>dataSource</code> property.\nWith the remote data assigned to dataSource, check the available\n<a href=\"http://ej2.syncfusion.com/documentation/data/adaptors.html\">adaptors</a> to customize the data processing.</p>\n","type":"Record[]|DataManager","link":"//ej2.syncfusion.com/react/documentation/api/kanban/#datasource"},{"name":"keyField","description":"<p>Defines the key field of Kanban board. The Kanban renders its layout based on this key field.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/kanban/#keyfield"},{"name":"columns","description":"<p>Defines the Kanban board columns and their properties such as header text, key field, template, allow toggle,\nexpand or collapse state, min or max count, and show or hide item count.</p>\n","type":"ColumnsModel[]","link":"//ej2.syncfusion.com/react/documentation/api/kanban/#columns"},{"name":"cardSettings","description":"<p>Defines the Kanban board related settings such as header field, content field, template,\nshow or hide header, and single or multiple selection.</p>\n","type":"CardSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/kanban/#cardsettings"}],"kanban/wip-validation":[{"name":"dataSource","description":"<p>With this property, the card data will be bound to Kanban.\nThe card data can be passed either as an array of JavaScript objects,\nor else can create an instance of <a href=\"http://ej2.syncfusion.com/documentation/data/api-dataManager.html\"><code>DataManager</code></a>\nin case of processing remote data and can be assigned to the <code>dataSource</code> property.\nWith the remote data assigned to dataSource, check the available\n<a href=\"http://ej2.syncfusion.com/documentation/data/adaptors.html\">adaptors</a> to customize the data processing.</p>\n","type":"Record[]|DataManager","link":"//ej2.syncfusion.com/react/documentation/api/kanban/#datasource"},{"name":"keyField","description":"<p>Defines the key field of Kanban board. The Kanban renders its layout based on this key field.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/kanban/#keyfield"},{"name":"columns","description":"<p>Defines the Kanban board columns and their properties such as header text, key field, template, allow toggle,\nexpand or collapse state, min or max count, and show or hide item count.</p>\n","type":"ColumnsModel[]","link":"//ej2.syncfusion.com/react/documentation/api/kanban/#columns"},{"name":"cardSettings","description":"<p>Defines the Kanban board related settings such as header field, content field, template,\nshow or hide header, and single or multiple selection.</p>\n","type":"CardSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/kanban/#cardsettings"},{"name":"swimlaneSettings","description":"<p>Defines the swimlane settings to Kanban board such as key field, text field, template, allow drag-and-drop,\nshow or hide empty row, show or hide items count, and more.</p>\n","type":"SwimlaneSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/kanban/#swimlanesettings"}],"kanban/api":[{"name":"dataSource","description":"<p>With this property, the card data will be bound to Kanban.\nThe card data can be passed either as an array of JavaScript objects,\nor else can create an instance of <a href=\"http://ej2.syncfusion.com/documentation/data/api-dataManager.html\"><code>DataManager</code></a>\nin case of processing remote data and can be assigned to the <code>dataSource</code> property.\nWith the remote data assigned to dataSource, check the available\n<a href=\"http://ej2.syncfusion.com/documentation/data/adaptors.html\">adaptors</a> to customize the data processing.</p>\n","type":"Record[]|DataManager","link":"//ej2.syncfusion.com/react/documentation/api/kanban/#datasource"},{"name":"keyField","description":"<p>Defines the key field of Kanban board. The Kanban renders its layout based on this key field.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/kanban/#keyfield"},{"name":"columns","description":"<p>Defines the Kanban board columns and their properties such as header text, key field, template, allow toggle,\nexpand or collapse state, min or max count, and show or hide item count.</p>\n","type":"ColumnsModel[]","link":"//ej2.syncfusion.com/react/documentation/api/kanban/#columns"},{"name":"cardSettings","description":"<p>Defines the Kanban board related settings such as header field, content field, template,\nshow or hide header, and single or multiple selection.</p>\n","type":"CardSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/kanban/#cardsettings"}],"kanban/events":[{"name":"dataSource","description":"<p>With this property, the card data will be bound to Kanban.\nThe card data can be passed either as an array of JavaScript objects,\nor else can create an instance of <a href=\"http://ej2.syncfusion.com/documentation/data/api-dataManager.html\"><code>DataManager</code></a>\nin case of processing remote data and can be assigned to the <code>dataSource</code> property.\nWith the remote data assigned to dataSource, check the available\n<a href=\"http://ej2.syncfusion.com/documentation/data/adaptors.html\">adaptors</a> to customize the data processing.</p>\n","type":"Record[]|DataManager","link":"//ej2.syncfusion.com/react/documentation/api/kanban/#datasource"},{"name":"keyField","description":"<p>Defines the key field of Kanban board. The Kanban renders its layout based on this key field.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/kanban/#keyfield"},{"name":"height","description":"<p>Sets the <code>height</code> of the Kanban board, accepting both string and number values.\nThe string type includes either pixel or percentage values.\nWhen <code>height</code> is set with specific pixel value, then the Kanban will be rendered to that specified space.\nIn case, if <code>auto</code> value is set, then the height of the Kanban gets auto-adjusted within the given container.</p>\n","type":"string|number","link":"//ej2.syncfusion.com/react/documentation/api/kanban/#height"},{"name":"columns","description":"<p>Defines the Kanban board columns and their properties such as header text, key field, template, allow toggle,\nexpand or collapse state, min or max count, and show or hide item count.</p>\n","type":"ColumnsModel[]","link":"//ej2.syncfusion.com/react/documentation/api/kanban/#columns"},{"name":"cardSettings","description":"<p>Defines the Kanban board related settings such as header field, content field, template,\nshow or hide header, and single or multiple selection.</p>\n","type":"CardSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/kanban/#cardsettings"},{"name":"swimlaneSettings","description":"<p>Defines the swimlane settings to Kanban board such as key field, text field, template, allow drag-and-drop,\nshow or hide empty row, show or hide items count, and more.</p>\n","type":"SwimlaneSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/kanban/#swimlanesettings"},{"name":"created","description":"<p>Triggers after the kanban board is created.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/kanban/#created"},{"name":"actionBegin","description":"<p>Triggers on beginning of every Kanban action.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/kanban/#actionbegin"},{"name":"actionComplete","description":"<p>Triggers on successful completion of the Kanban actions.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/kanban/#actioncomplete"},{"name":"actionFailure","description":"<p>Triggers when a Kanban action gets failed or interrupted and an error information will be returned.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/kanban/#actionfailure"},{"name":"dataBinding","description":"<p>Triggers before the data binds to the Kanban.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/kanban/#databinding"},{"name":"dataBound","description":"<p>Triggers once the event data is bound to the Kanban.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/kanban/#databound"},{"name":"cardRendered","description":"<p>Triggers before each card of the Kanban rendering on the page.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/kanban/#cardrendered"},{"name":"queryCellInfo","description":"<p>Triggers before each column of the Kanban rendering on the page.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/kanban/#querycellinfo"},{"name":"cardClick","description":"<p>Triggers on single-clicking the Kanban cards.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/kanban/#cardclick"},{"name":"cardDoubleClick","description":"<p>Triggers on double-clicking the Kanban cards.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/kanban/#carddoubleclick"},{"name":"dragStart","description":"<p>Triggers when the card drag actions starts.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/kanban/#dragstart"},{"name":"drag","description":"<p>Triggers when the card is dragging to other stage or other swimlane.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/kanban/#drag"},{"name":"dragStop","description":"<p>Triggers when the card drag actions stops.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/kanban/#dragstop"}],"listview/default":[{"name":"dataSource","description":"<p>The <code>dataSource</code> provides the data to render the ListView component which is mapped with the fields of ListView.</p>\n","type":"[]|string[]|number[]|DataManager","link":"//ej2.syncfusion.com/react/documentation/api/list-view/#datasource"},{"name":"fields","description":"<p>The <code>fields</code> is used to map keys from the dataSource which extracts the appropriate data from the dataSource\nwith specified mapped with the column fields to render the ListView.</p>\n","type":"FieldSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/list-view/#fields"},{"name":"appendTo","description":"<p>Appends the control within the given HTML element</p>\n","type":"Method","link":"//ej2.syncfusion.com/react/documentation/api/list-view/#appendto"}],"listview/remote-list":[{"name":"dataSource","description":"<p>The <code>dataSource</code> provides the data to render the ListView component which is mapped with the fields of ListView.</p>\n","type":"[]|string[]|number[]|DataManager","link":"//ej2.syncfusion.com/react/documentation/api/list-view/#datasource"},{"name":"fields","description":"<p>The <code>fields</code> is used to map keys from the dataSource which extracts the appropriate data from the dataSource\nwith specified mapped with the column fields to render the ListView.</p>\n","type":"FieldSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/list-view/#fields"},{"name":"headerTitle","description":"<p>The <code>headerTitle</code> is used to set the title of the ListView component.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/list-view/#headertitle"},{"name":"showHeader","description":"<p>If <code>showHeader</code> set to true, which will show or hide the header of the ListView component.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/list-view/#showheader"},{"name":"query","description":"<p>The <code>query</code> is used to fetch the specific data from dataSource by using where and select keywords.</p>\n","type":"Query","link":"//ej2.syncfusion.com/react/documentation/api/list-view/#query"},{"name":"appendTo","description":"<p>Appends the control within the given HTML element</p>\n","type":"Method","link":"//ej2.syncfusion.com/react/documentation/api/list-view/#appendto"}],"listview/check-list":[{"name":"dataSource","description":"<p>The <code>dataSource</code> provides the data to render the ListView component which is mapped with the fields of ListView.</p>\n","type":"[]|string[]|number[]|DataManager","link":"//ej2.syncfusion.com/react/documentation/api/list-view/#datasource"},{"name":"fields","description":"<p>The <code>fields</code> is used to map keys from the dataSource which extracts the appropriate data from the dataSource\nwith specified mapped with the column fields to render the ListView.</p>\n","type":"FieldSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/list-view/#fields"},{"name":"headerTitle","description":"<p>The <code>headerTitle</code> is used to set the title of the ListView component.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/list-view/#headertitle"},{"name":"showHeader","description":"<p>If <code>showHeader</code> set to true, which will show or hide the header of the ListView component.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/list-view/#showheader"},{"name":"showIcon","description":"<p>If <code>showIcon</code> set to true, which will show or hide the icon of the list item.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/list-view/#showicon"},{"name":"appendTo","description":"<p>Appends the control within the given HTML element</p>\n","type":"Method","link":"//ej2.syncfusion.com/react/documentation/api/list-view/#appendto"}],"listview/nested-list":[{"name":"dataSource","description":"<p>The <code>dataSource</code> provides the data to render the ListView component which is mapped with the fields of ListView.</p>\n","type":"[]|string[]|number[]|DataManager","link":"//ej2.syncfusion.com/react/documentation/api/list-view/#datasource"},{"name":"fields","description":"<p>The <code>fields</code> is used to map keys from the dataSource which extracts the appropriate data from the dataSource\nwith specified mapped with the column fields to render the ListView.</p>\n","type":"FieldSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/list-view/#fields"},{"name":"showCheckBox","description":"<p>If <code>showCheckBox</code> set to true, which will show or hide the checkbox.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/list-view/#showcheckbox"},{"name":"appendTo","description":"<p>Appends the control within the given HTML element</p>\n","type":"Method","link":"//ej2.syncfusion.com/react/documentation/api/list-view/#appendto"}],"listview/virtualization":[{"name":"dataSource","description":"<p>The <code>dataSource</code> provides the data to render the ListView component which is mapped with the fields of ListView.</p>\n","type":"[]|string[]|number[]|DataManager","link":"//ej2.syncfusion.com/react/documentation/api/list-view/#datasource"},{"name":"fields","description":"<p>The <code>fields</code> is used to map keys from the dataSource which extracts the appropriate data from the dataSource\nwith specified mapped with the column fields to render the ListView.</p>\n","type":"FieldSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/list-view/#fields"},{"name":"headerTitle","description":"<p>The <code>headerTitle</code> is used to set the title of the ListView component.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/list-view/#headertitle"},{"name":"height","description":"<p>Defines the height of the ListView component which accepts both string and number values.</p>\n","type":"number|string","link":"//ej2.syncfusion.com/react/documentation/api/list-view/#height"},{"name":"showHeader","description":"<p>If <code>showHeader</code> set to true, which will show or hide the header of the ListView component.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/list-view/#showheader"},{"name":"enableVirtualization","description":"<p>If <code>enableVirtualization</code> set to true, which will increase the ListView performance, while loading a large amount of data.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/list-view/#enablevirtualization"},{"name":"actionComplete","description":"<p>Triggers when every ListView actions completed.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/list-view/#actioncomplete"},{"name":"actionBegin","description":"<p>Triggers when every ListView action starts.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/list-view/#actionbegin"},{"name":"template","description":"<p>The ListView component supports to customize the content of each list items with the help of <code>template</code> property.</p>\n","type":"string|Function","link":"//ej2.syncfusion.com/react/documentation/api/list-view/#template"},{"name":"appendTo","description":"<p>Appends the control within the given HTML element</p>\n","type":"Method","link":"//ej2.syncfusion.com/react/documentation/api/list-view/#appendto"}],"listview/template":[{"name":"dataSource","description":"<p>The <code>dataSource</code> provides the data to render the ListView component which is mapped with the fields of ListView.</p>\n","type":"[]|string[]|number[]|DataManager","link":"//ej2.syncfusion.com/react/documentation/api/list-view/#datasource"},{"name":"fields","description":"<p>The <code>fields</code> is used to map keys from the dataSource which extracts the appropriate data from the dataSource\nwith specified mapped with the column fields to render the ListView.</p>\n","type":"FieldSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/list-view/#fields"},{"name":"headerTitle","description":"<p>The <code>headerTitle</code> is used to set the title of the ListView component.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/list-view/#headertitle"},{"name":"showHeader","description":"<p>If <code>showHeader</code> set to true, which will show or hide the header of the ListView component.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/list-view/#showheader"},{"name":"template","description":"<p>The ListView component supports to customize the content of each list items with the help of <code>template</code> property.</p>\n","type":"string|Function","link":"//ej2.syncfusion.com/react/documentation/api/list-view/#template"},{"name":"appendTo","description":"<p>Appends the control within the given HTML element</p>\n","type":"Method","link":"//ej2.syncfusion.com/react/documentation/api/list-view/#appendto"}],"listview/group-template":[{"name":"dataSource","description":"<p>The <code>dataSource</code> provides the data to render the ListView component which is mapped with the fields of ListView.</p>\n","type":"[]|string[]|number[]|DataManager","link":"//ej2.syncfusion.com/react/documentation/api/list-view/#datasource"},{"name":"fields","description":"<p>The <code>fields</code> is used to map keys from the dataSource which extracts the appropriate data from the dataSource\nwith specified mapped with the column fields to render the ListView.</p>\n","type":"FieldSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/list-view/#fields"},{"name":"headerTitle","description":"<p>The <code>headerTitle</code> is used to set the title of the ListView component.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/list-view/#headertitle"},{"name":"showHeader","description":"<p>If <code>showHeader</code> set to true, which will show or hide the header of the ListView component.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/list-view/#showheader"},{"name":"template","description":"<p>The ListView component supports to customize the content of each list items with the help of <code>template</code> property.</p>\n","type":"string|Function","link":"//ej2.syncfusion.com/react/documentation/api/list-view/#template"},{"name":"groupTemplate","description":"<p>The ListView has an option to custom design the group header title with the help of <code>groupTemplate</code> property.</p>\n","type":"string|Function","link":"//ej2.syncfusion.com/react/documentation/api/list-view/#grouptemplate"},{"name":"appendTo","description":"<p>Appends the control within the given HTML element</p>\n","type":"Method","link":"//ej2.syncfusion.com/react/documentation/api/list-view/#appendto"}],"listview/call-history":[{"name":"dataSource","description":"<p>The <code>dataSource</code> provides the data to render the ListView component which is mapped with the fields of ListView.</p>\n","type":"[]|string[]|number[]|DataManager","link":"//ej2.syncfusion.com/react/documentation/api/list-view/#datasource"},{"name":"fields","description":"<p>The <code>fields</code> is used to map keys from the dataSource which extracts the appropriate data from the dataSource\nwith specified mapped with the column fields to render the ListView.</p>\n","type":"FieldSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/list-view/#fields"},{"name":"select","description":"<p>Triggers when we select the list item in the component.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/list-view/#select"},{"name":"showIcon","description":"<p>If <code>showIcon</code> set to true, which will show or hide the icon of the list item.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/list-view/#showicon"},{"name":"appendTo","description":"<p>Appends the control within the given HTML element</p>\n","type":"Method","link":"//ej2.syncfusion.com/react/documentation/api/list-view/#appendto"}],"listview/scrolling":[{"name":"dataSource","description":"<p>The <code>dataSource</code> provides the data to render the ListView component which is mapped with the fields of ListView.</p>\n","type":"[]|string[]|number[]|DataManager","link":"//ej2.syncfusion.com/react/documentation/api/list-view/#datasource"},{"name":"fields","description":"<p>The <code>fields</code> is used to map keys from the dataSource which extracts the appropriate data from the dataSource\nwith specified mapped with the column fields to render the ListView.</p>\n","type":"FieldSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/list-view/#fields"},{"name":"appendTo","description":"<p>Appends the control within the given HTML element</p>\n","type":"Method","link":"//ej2.syncfusion.com/react/documentation/api/list-view/#appendto"},{"name":"template","description":"<p>The ListView component supports to customize the content of each list items with the help of <code>template</code> property.</p>\n","type":"string|Function","link":"//ej2.syncfusion.com/react/documentation/api/list-view/#template"}],"markdowneditor/overview":[{"name":"Inject","description":"<p>Dynamically injects the required modules to the component.</p>\n","type":"Method","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#inject"},{"name":"toolbarSettings","description":"<p>Specifies the configuration for the toolbar, including the alignment and rendering type.\nBy default, the toolbar floats at the top of the RichTextEditor.\nWhen you scroll down, the toolbar will move with the page applying the specified offset.\nProperties:</p>\n<ul>\n<li>\n<p>enable: A boolean value to show or hide the toolbar.</p>\n</li>\n<li>\n<p>enableFloating: A boolean value to enable or disable the floating toolbar.\nThis keeps the toolbar fixed at the top of the RichTextEditor during scrolling.</p>\n</li>\n<li>\n<p>type: Defines the toolbar type, with the following options:</p>\n<ol>\n<li>Expand: Overflowing toolbar items are hidden and can be accessed by clicking the expand arrow.</li>\n<li>MultiRow: Overflowing toolbar items wrap into the next row.</li>\n<li>Scrollable: Toolbar items are on a single line and can be scrolled horizontally if they overflow.</li>\n</ol>\n</li>\n<li>\n<p>items: An array specifying the items aligned horizontally in the toolbar.</p>\n</li>\n</ul>\n<blockquote>\n<p>'|' and '-' can be used to insert vertical and horizontal separator lines in the toolbar.</p>\n</blockquote>\n<ul>\n<li>itemConfigs: Allows the modification of the default toolbar item configuration, such as the icon class.</li>\n</ul>\n<blockquote>\n<p>By default, the toolbar is rendered with a scrollable option on mobile devices and does not support other toolbar types.</p>\n</blockquote>\n","type":"ToolbarSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#toolbarsettings"},{"name":"height","description":"<p>Specifies the height of the Rich Text Editor component.</p>\n","type":"string|number","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#height"},{"name":"created","description":"<p>This event triggers when the Rich Text Editor is rendered.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#created"},{"name":"disableToolbarItem","description":"<p>Disables the specified toolbar items in the Rich Text Editor component.</p>\n","type":"Method","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#disabletoolbaritem"},{"name":"enableToolbarItem","description":"<p>Enables the specified toolbar items in the Rich Text Editor component.</p>\n","type":"Method","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#enabletoolbaritem"},{"name":"editorMode","description":"<p>Defines the mode of the RichTextEditor.</p>\n<ul>\n<li><code>HTML</code>: Render as an HTML editor using an <code>&lt;IFRAME&gt;</code>, content editable <code>&lt;div&gt;</code>, or <code>&lt;textarea&gt;</code>.</li>\n<li><code>Markdown</code>: Render as a Markdown editor using a <code>&lt;textarea&gt;</code>.</li>\n</ul>\n","type":"EditorMode","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#editormode"},{"name":"actionBegin","description":"<p>This event triggers before executing a command via toolbar items.\nCancel this event to prevent the command from executing by setting the <code>cancel</code> argument to <code>true</code>.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#actionbegin"},{"name":"appendTo","description":"<p>Appends the control within the given HTML element</p>\n","type":"Method","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#appendto"}],"markdowneditor/default-functionalities":[{"name":"Inject","description":"<p>Dynamically injects the required modules to the component.</p>\n","type":"Method","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#inject"},{"name":"toolbarSettings","description":"<p>Specifies the configuration for the toolbar, including the alignment and rendering type.\nBy default, the toolbar floats at the top of the RichTextEditor.\nWhen you scroll down, the toolbar will move with the page applying the specified offset.\nProperties:</p>\n<ul>\n<li>\n<p>enable: A boolean value to show or hide the toolbar.</p>\n</li>\n<li>\n<p>enableFloating: A boolean value to enable or disable the floating toolbar.\nThis keeps the toolbar fixed at the top of the RichTextEditor during scrolling.</p>\n</li>\n<li>\n<p>type: Defines the toolbar type, with the following options:</p>\n<ol>\n<li>Expand: Overflowing toolbar items are hidden and can be accessed by clicking the expand arrow.</li>\n<li>MultiRow: Overflowing toolbar items wrap into the next row.</li>\n<li>Scrollable: Toolbar items are on a single line and can be scrolled horizontally if they overflow.</li>\n</ol>\n</li>\n<li>\n<p>items: An array specifying the items aligned horizontally in the toolbar.</p>\n</li>\n</ul>\n<blockquote>\n<p>'|' and '-' can be used to insert vertical and horizontal separator lines in the toolbar.</p>\n</blockquote>\n<ul>\n<li>itemConfigs: Allows the modification of the default toolbar item configuration, such as the icon class.</li>\n</ul>\n<blockquote>\n<p>By default, the toolbar is rendered with a scrollable option on mobile devices and does not support other toolbar types.</p>\n</blockquote>\n","type":"ToolbarSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#toolbarsettings"},{"name":"height","description":"<p>Specifies the height of the Rich Text Editor component.</p>\n","type":"string|number","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#height"},{"name":"created","description":"<p>This event triggers when the Rich Text Editor is rendered.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#created"},{"name":"disableToolbarItem","description":"<p>Disables the specified toolbar items in the Rich Text Editor component.</p>\n","type":"Method","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#disabletoolbaritem"},{"name":"enableToolbarItem","description":"<p>Enables the specified toolbar items in the Rich Text Editor component.</p>\n","type":"Method","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#enabletoolbaritem"},{"name":"editorMode","description":"<p>Defines the mode of the RichTextEditor.</p>\n<ul>\n<li><code>HTML</code>: Render as an HTML editor using an <code>&lt;IFRAME&gt;</code>, content editable <code>&lt;div&gt;</code>, or <code>&lt;textarea&gt;</code>.</li>\n<li><code>Markdown</code>: Render as a Markdown editor using a <code>&lt;textarea&gt;</code>.</li>\n</ul>\n","type":"EditorMode","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#editormode"},{"name":"appendTo","description":"<p>Appends the control within the given HTML element</p>\n","type":"Method","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#appendto"}],"markdowneditor/custom-format":[{"name":"Inject","description":"<p>Dynamically injects the required modules to the component.</p>\n","type":"Method","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#inject"},{"name":"toolbarSettings","description":"<p>Specifies the configuration for the toolbar, including the alignment and rendering type.\nBy default, the toolbar floats at the top of the RichTextEditor.\nWhen you scroll down, the toolbar will move with the page applying the specified offset.\nProperties:</p>\n<ul>\n<li>\n<p>enable: A boolean value to show or hide the toolbar.</p>\n</li>\n<li>\n<p>enableFloating: A boolean value to enable or disable the floating toolbar.\nThis keeps the toolbar fixed at the top of the RichTextEditor during scrolling.</p>\n</li>\n<li>\n<p>type: Defines the toolbar type, with the following options:</p>\n<ol>\n<li>Expand: Overflowing toolbar items are hidden and can be accessed by clicking the expand arrow.</li>\n<li>MultiRow: Overflowing toolbar items wrap into the next row.</li>\n<li>Scrollable: Toolbar items are on a single line and can be scrolled horizontally if they overflow.</li>\n</ol>\n</li>\n<li>\n<p>items: An array specifying the items aligned horizontally in the toolbar.</p>\n</li>\n</ul>\n<blockquote>\n<p>'|' and '-' can be used to insert vertical and horizontal separator lines in the toolbar.</p>\n</blockquote>\n<ul>\n<li>itemConfigs: Allows the modification of the default toolbar item configuration, such as the icon class.</li>\n</ul>\n<blockquote>\n<p>By default, the toolbar is rendered with a scrollable option on mobile devices and does not support other toolbar types.</p>\n</blockquote>\n","type":"ToolbarSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#toolbarsettings"},{"name":"height","description":"<p>Specifies the height of the Rich Text Editor component.</p>\n","type":"string|number","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#height"},{"name":"created","description":"<p>This event triggers when the Rich Text Editor is rendered.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#created"},{"name":"disableToolbarItem","description":"<p>Disables the specified toolbar items in the Rich Text Editor component.</p>\n","type":"Method","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#disabletoolbaritem"},{"name":"enableToolbarItem","description":"<p>Enables the specified toolbar items in the Rich Text Editor component.</p>\n","type":"Method","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#enabletoolbaritem"},{"name":"editorMode","description":"<p>Defines the mode of the RichTextEditor.</p>\n<ul>\n<li><code>HTML</code>: Render as an HTML editor using an <code>&lt;IFRAME&gt;</code>, content editable <code>&lt;div&gt;</code>, or <code>&lt;textarea&gt;</code>.</li>\n<li><code>Markdown</code>: Render as a Markdown editor using a <code>&lt;textarea&gt;</code>.</li>\n</ul>\n","type":"EditorMode","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#editormode"},{"name":"formatter","description":"<p>Customize the <code>keyCode</code> to change the key value.</p>\n","type":"IFormatter","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#formatter"},{"name":"appendTo","description":"<p>Appends the control within the given HTML element</p>\n","type":"Method","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#appendto"}],"markdowneditor/mention-integration":[{"name":"Inject","description":"<p>Dynamically injects the required modules to the component.</p>\n","type":"Method","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#inject"},{"name":"toolbarSettings","description":"<p>Specifies the configuration for the toolbar, including the alignment and rendering type.\nBy default, the toolbar floats at the top of the RichTextEditor.\nWhen you scroll down, the toolbar will move with the page applying the specified offset.\nProperties:</p>\n<ul>\n<li>\n<p>enable: A boolean value to show or hide the toolbar.</p>\n</li>\n<li>\n<p>enableFloating: A boolean value to enable or disable the floating toolbar.\nThis keeps the toolbar fixed at the top of the RichTextEditor during scrolling.</p>\n</li>\n<li>\n<p>type: Defines the toolbar type, with the following options:</p>\n<ol>\n<li>Expand: Overflowing toolbar items are hidden and can be accessed by clicking the expand arrow.</li>\n<li>MultiRow: Overflowing toolbar items wrap into the next row.</li>\n<li>Scrollable: Toolbar items are on a single line and can be scrolled horizontally if they overflow.</li>\n</ol>\n</li>\n<li>\n<p>items: An array specifying the items aligned horizontally in the toolbar.</p>\n</li>\n</ul>\n<blockquote>\n<p>'|' and '-' can be used to insert vertical and horizontal separator lines in the toolbar.</p>\n</blockquote>\n<ul>\n<li>itemConfigs: Allows the modification of the default toolbar item configuration, such as the icon class.</li>\n</ul>\n<blockquote>\n<p>By default, the toolbar is rendered with a scrollable option on mobile devices and does not support other toolbar types.</p>\n</blockquote>\n","type":"ToolbarSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#toolbarsettings"},{"name":"height","description":"<p>Specifies the height of the Rich Text Editor component.</p>\n","type":"string|number","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#height"},{"name":"created","description":"<p>This event triggers when the Rich Text Editor is rendered.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#created"},{"name":"disableToolbarItem","description":"<p>Disables the specified toolbar items in the Rich Text Editor component.</p>\n","type":"Method","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#disabletoolbaritem"},{"name":"enableToolbarItem","description":"<p>Enables the specified toolbar items in the Rich Text Editor component.</p>\n","type":"Method","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#enabletoolbaritem"},{"name":"editorMode","description":"<p>Defines the mode of the RichTextEditor.</p>\n<ul>\n<li><code>HTML</code>: Render as an HTML editor using an <code>&lt;IFRAME&gt;</code>, content editable <code>&lt;div&gt;</code>, or <code>&lt;textarea&gt;</code>.</li>\n<li><code>Markdown</code>: Render as a Markdown editor using a <code>&lt;textarea&gt;</code>.</li>\n</ul>\n","type":"EditorMode","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#editormode"},{"name":"formatter","description":"<p>Customize the <code>keyCode</code> to change the key value.</p>\n","type":"IFormatter","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#formatter"},{"name":"appendTo","description":"<p>Appends the control within the given HTML element</p>\n","type":"Method","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#appendto"}],"maskedtextbox/default":[{"name":"mask","description":"<p>Sets a value that masks the MaskedTextBox to allow/validate the user input.</p>\n<ul>\n<li>Mask allows <a href=\"../../maskedtextbox/mask-configuration/#standard-mask-elements\"><code>standard mask elements</code></a>\n&lt;/b&gt;, &lt;b&gt;<a href=\"../../maskedtextbox/mask-configuration/#custom-characters\"><code>custom characters</code></a>&lt;/b&gt; and\n&lt;b&gt;<a href=\"../../maskedtextbox/mask-configuration/#regular-expression\"><code>regular expression</code></a>&lt;/b&gt; as mask\nelements.\nFor more information on mask, refer to\n<a href=\"../../maskedtextbox/mask-configuration/#standard-mask-elements\">mask</a>.</li>\n<li>If the mask value is empty, the MaskedTextBox will behave as an input element with text type.</li>\n</ul>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/maskedtextbox/#mask"}],"maskedtextbox/custom-mask":[{"name":"mask","description":"<p>Sets a value that masks the MaskedTextBox to allow/validate the user input.</p>\n<ul>\n<li>Mask allows <a href=\"../../maskedtextbox/mask-configuration/#standard-mask-elements\"><code>standard mask elements</code></a>\n&lt;/b&gt;, &lt;b&gt;<a href=\"../../maskedtextbox/mask-configuration/#custom-characters\"><code>custom characters</code></a>&lt;/b&gt; and\n&lt;b&gt;<a href=\"../../maskedtextbox/mask-configuration/#regular-expression\"><code>regular expression</code></a>&lt;/b&gt; as mask\nelements.\nFor more information on mask, refer to\n<a href=\"../../maskedtextbox/mask-configuration/#standard-mask-elements\">mask</a>.</li>\n<li>If the mask value is empty, the MaskedTextBox will behave as an input element with text type.</li>\n</ul>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/maskedtextbox/#mask"},{"name":"customCharacters","description":"<p>Sets the collection of values to be mapped for non-mask elements(literals)\nwhich have been set in the mask of MaskedTextBox.\nIn the below example, non-mask elements &quot;P&quot; accepts values\n&quot;P&quot; , &quot;A&quot; , &quot;p&quot; , &quot;a&quot; and &quot;M&quot; accepts values &quot;M&quot;, &quot;m&quot; mentioned in the custom characters collection.</p>\n<blockquote>\n<p>For more information on customCharacters, refer to\n<a href=\"../../maskedtextbox/mask-configuration/#custom-characters\">customCharacters</a>.</p>\n</blockquote>\n","type":"Object","link":"//ej2.syncfusion.com/react/documentation/api/maskedtextbox/#customcharacters"},{"name":"floatLabelType","description":"<p>The &lt;b&gt;&lt;a href=&quot;#placeholder&quot; target=&quot;_blank&quot;&gt;placeholder&lt;/a&gt;&lt;/b&gt; acts as a label\nand floats above the MaskedTextBox based on the below values.\nPossible values are:</p>\n<ul>\n<li>Never - The floating label will not be enable when the placeholder is available.</li>\n<li>Always - The floating label always floats above the MaskedTextBox.</li>\n<li>Auto - The floating label floats above the MaskedTextBox after focusing it or when enters the value in it.</li>\n</ul>\n","type":"FloatLabelType","link":"//ej2.syncfusion.com/react/documentation/api/maskedtextbox/#floatlabeltype"}],"maskedtextbox/formats":[{"name":"mask","description":"<p>Sets a value that masks the MaskedTextBox to allow/validate the user input.</p>\n<ul>\n<li>Mask allows <a href=\"../../maskedtextbox/mask-configuration/#standard-mask-elements\"><code>standard mask elements</code></a>\n&lt;/b&gt;, &lt;b&gt;<a href=\"../../maskedtextbox/mask-configuration/#custom-characters\"><code>custom characters</code></a>&lt;/b&gt; and\n&lt;b&gt;<a href=\"../../maskedtextbox/mask-configuration/#regular-expression\"><code>regular expression</code></a>&lt;/b&gt; as mask\nelements.\nFor more information on mask, refer to\n<a href=\"../../maskedtextbox/mask-configuration/#standard-mask-elements\">mask</a>.</li>\n<li>If the mask value is empty, the MaskedTextBox will behave as an input element with text type.</li>\n</ul>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/maskedtextbox/#mask"},{"name":"floatLabelType","description":"<p>The &lt;b&gt;&lt;a href=&quot;#placeholder&quot; target=&quot;_blank&quot;&gt;placeholder&lt;/a&gt;&lt;/b&gt; acts as a label\nand floats above the MaskedTextBox based on the below values.\nPossible values are:</p>\n<ul>\n<li>Never - The floating label will not be enable when the placeholder is available.</li>\n<li>Always - The floating label always floats above the MaskedTextBox.</li>\n<li>Auto - The floating label floats above the MaskedTextBox after focusing it or when enters the value in it.</li>\n</ul>\n","type":"FloatLabelType","link":"//ej2.syncfusion.com/react/documentation/api/maskedtextbox/#floatlabeltype"},{"name":"change","description":"<p>Triggers when the value of the MaskedTextBox changes.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/maskedtextbox/#change"},{"name":"promptChar","description":"<p>Gets or sets a value that will be shown as a prompting symbol for the masked value.\nThe symbol used to show input positions in the MaskedTextBox.\nFor more information on prompt-character, refer to\n<a href=\"../../maskedtextbox/mask-configuration/#prompt-character\">prompt-character</a>.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/maskedtextbox/#promptchar"},{"name":"getMaskedValue","description":"<p>Gets the value of the MaskedTextBox with the masked format.\nBy using <code>value</code> property, you can get the raw value of maskedtextbox without literals and prompt characters.</p>\n","type":"Method","link":"//ej2.syncfusion.com/react/documentation/api/maskedtextbox/#getmaskedvalue"},{"name":"value","description":"<p>Gets or sets the value of the MaskedTextBox. It is a raw value of the MaskedTextBox excluding literals\nand prompt characters. By using <code>getMaskedValue</code> property, you can get the value of MaskedTextBox with the masked format.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/maskedtextbox/#value"}],"menu/default":[{"name":"items","description":"<p>Specifies menu items with its properties which will be rendered as Menu.</p>\n","type":"MenuItemModel[]|[]","link":"//ej2.syncfusion.com/react/documentation/api/menu/#items"},{"name":"orientation","description":"<p>Specified the orientation of Menu whether it can be horizontal or vertical.</p>\n","type":"Orientation","link":"//ej2.syncfusion.com/react/documentation/api/menu/#orientation"}],"menu/data-binding":[{"name":"items","description":"<p>Specifies menu items with its properties which will be rendered as Menu.</p>\n","type":"MenuItemModel[]|[]","link":"//ej2.syncfusion.com/react/documentation/api/menu/#items"}],"menu/scrollable":[{"name":"items","description":"<p>Specifies menu items with its properties which will be rendered as Menu.</p>\n","type":"MenuItemModel[]|[]","link":"//ej2.syncfusion.com/react/documentation/api/menu/#items"},{"name":"enableScrolling","description":"<p>Specifies whether to enable / disable the scrollable option in Menu.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/menu/#enablescrolling"},{"name":"cssClass","description":"<p>Defines class/multiple classes separated by a space in the Menu wrapper.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/menu/#cssclass"},{"name":"beforeOpen","description":"<p>Triggers before opening the menu item.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/menu/#beforeopen"}],"menu/template":[{"name":"items","description":"<p>Specifies menu items with its properties which will be rendered as Menu.</p>\n","type":"MenuItemModel[]|[]","link":"//ej2.syncfusion.com/react/documentation/api/menu/#items"},{"name":"fields","description":"<p>Specifies mapping fields from the dataSource.</p>\n","type":"FieldSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/menu/#fields"},{"name":"template","description":"<p>Specifies the template for Menu item.</p>\n","type":"string|Function","link":"//ej2.syncfusion.com/react/documentation/api/menu/#template"}],"menu/hamburger-mode":[{"name":"hamburgerMode","description":"<p>Specifies whether to enable / disable the hamburger mode in Menu.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/menu/#hamburgermode"},{"name":"title","description":"<p>Specifies the title text for hamburger mode in Menu.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/menu/#title"}],"menu/api":[{"name":"orientation","description":"<p>Specified the orientation of Menu whether it can be horizontal or vertical.</p>\n","type":"Orientation","link":"//ej2.syncfusion.com/react/documentation/api/menu/#orientation"},{"name":"showItemOnClick","description":"<p>Specifies whether to show the sub menu or not on click.\nWhen set to true, the sub menu will open only on mouse click.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/menu/#showitemonclick"},{"name":"enableItems","description":"<p>This method is used to enable or disable the menu items in the Menu based on the items and enable argument.</p>\n","type":"Method","link":"//ej2.syncfusion.com/react/documentation/api/menu/#enableitems"}],"menu/toolbar-integration":[{"name":"items","description":"<p>Specifies menu items with its properties which will be rendered as Menu.</p>\n","type":"MenuItemModel[]|[]","link":"//ej2.syncfusion.com/react/documentation/api/menu/#items"}],"numerictextbox/default":[{"name":"value","description":"<p>Sets the value of the NumericTextBox.</p>\n","type":"number","link":"//ej2.syncfusion.com/react/documentation/api/numerictextbox/#value"},{"name":"format","description":"<p>Specifies the number format that indicates the display format for the value of the NumericTextBox.\nFor more information on formats, refer to\n<a href=\"../../numerictextbox/formats/#standard-formats\">formats</a>.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/numerictextbox/#format"},{"name":"min","description":"<p>Specifies a minimum value that is allowed a user can enter.\nFor more information on min, refer to\n<a href=\"../../numerictextbox/getting-started/#range-validation\">min</a>.</p>\n","type":"number","link":"//ej2.syncfusion.com/react/documentation/api/numerictextbox/#min"},{"name":"max","description":"<p>Specifies a maximum value that is allowed a user can enter.\nFor more information on max, refer to\n<a href=\"../../numerictextbox/getting-started/#range-validation\">max</a>.</p>\n","type":"number","link":"//ej2.syncfusion.com/react/documentation/api/numerictextbox/#max"},{"name":"step","description":"<p>Specifies the incremental or decremental step size for the NumericTextBox.\nFor more information on step, refer to\n<a href=\"../../numerictextbox/getting-started/#range-validation\">step</a>.</p>\n","type":"number","link":"//ej2.syncfusion.com/react/documentation/api/numerictextbox/#step"}],"numerictextbox/range-validation":[{"name":"value","description":"<p>Sets the value of the NumericTextBox.</p>\n","type":"number","link":"//ej2.syncfusion.com/react/documentation/api/numerictextbox/#value"},{"name":"min","description":"<p>Specifies a minimum value that is allowed a user can enter.\nFor more information on min, refer to\n<a href=\"../../numerictextbox/getting-started/#range-validation\">min</a>.</p>\n","type":"number","link":"//ej2.syncfusion.com/react/documentation/api/numerictextbox/#min"},{"name":"max","description":"<p>Specifies a maximum value that is allowed a user can enter.\nFor more information on max, refer to\n<a href=\"../../numerictextbox/getting-started/#range-validation\">max</a>.</p>\n","type":"number","link":"//ej2.syncfusion.com/react/documentation/api/numerictextbox/#max"},{"name":"step","description":"<p>Specifies the incremental or decremental step size for the NumericTextBox.\nFor more information on step, refer to\n<a href=\"../../numerictextbox/getting-started/#range-validation\">step</a>.</p>\n","type":"number","link":"//ej2.syncfusion.com/react/documentation/api/numerictextbox/#step"}],"numerictextbox/custom-format":[{"name":"value","description":"<p>Sets the value of the NumericTextBox.</p>\n","type":"number","link":"//ej2.syncfusion.com/react/documentation/api/numerictextbox/#value"},{"name":"format","description":"<p>Specifies the number format that indicates the display format for the value of the NumericTextBox.\nFor more information on formats, refer to\n<a href=\"../../numerictextbox/formats/#standard-formats\">formats</a>.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/numerictextbox/#format"},{"name":"min","description":"<p>Specifies a minimum value that is allowed a user can enter.\nFor more information on min, refer to\n<a href=\"../../numerictextbox/getting-started/#range-validation\">min</a>.</p>\n","type":"number","link":"//ej2.syncfusion.com/react/documentation/api/numerictextbox/#min"},{"name":"max","description":"<p>Specifies a maximum value that is allowed a user can enter.\nFor more information on max, refer to\n<a href=\"../../numerictextbox/getting-started/#range-validation\">max</a>.</p>\n","type":"number","link":"//ej2.syncfusion.com/react/documentation/api/numerictextbox/#max"}],"numerictextbox/restrict-decimals":[{"name":"value","description":"<p>Sets the value of the NumericTextBox.</p>\n","type":"number","link":"//ej2.syncfusion.com/react/documentation/api/numerictextbox/#value"},{"name":"format","description":"<p>Specifies the number format that indicates the display format for the value of the NumericTextBox.\nFor more information on formats, refer to\n<a href=\"../../numerictextbox/formats/#standard-formats\">formats</a>.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/numerictextbox/#format"},{"name":"min","description":"<p>Specifies a minimum value that is allowed a user can enter.\nFor more information on min, refer to\n<a href=\"../../numerictextbox/getting-started/#range-validation\">min</a>.</p>\n","type":"number","link":"//ej2.syncfusion.com/react/documentation/api/numerictextbox/#min"},{"name":"max","description":"<p>Specifies a maximum value that is allowed a user can enter.\nFor more information on max, refer to\n<a href=\"../../numerictextbox/getting-started/#range-validation\">max</a>.</p>\n","type":"number","link":"//ej2.syncfusion.com/react/documentation/api/numerictextbox/#max"},{"name":"step","description":"<p>Specifies the incremental or decremental step size for the NumericTextBox.\nFor more information on step, refer to\n<a href=\"../../numerictextbox/getting-started/#range-validation\">step</a>.</p>\n","type":"number","link":"//ej2.syncfusion.com/react/documentation/api/numerictextbox/#step"},{"name":"decimals","description":"<p>Specifies the number precision applied to the textbox value when the NumericTextBox is focused.\nFor more information on decimals, refer to\n<a href=\"../../numerictextbox/formats/#precision-of-numbers\">decimals</a>.</p>\n","type":"number","link":"//ej2.syncfusion.com/react/documentation/api/numerictextbox/#decimals"},{"name":"validateDecimalOnType","description":"<p>Specifies whether the decimals length should be restricted during typing.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/numerictextbox/#validatedecimalontype"}],"otpinput/default":[{"name":"value","description":"<p>Specifies the value of the Otp (One-Time Password) input.\nThis can be a string or a number, representing the Otp value entered by the user.</p>\n","type":"string|number","link":"//ej2.syncfusion.com/react/documentation/api/otp-input/#value"},{"name":"type","description":"<p>Specifies the input type of the Otp.</p>\n","type":"string|OtpInputType","link":"//ej2.syncfusion.com/react/documentation/api/otp-input/#type"}],"otpinput/api":[{"name":"value","description":"<p>Specifies the value of the Otp (One-Time Password) input.\nThis can be a string or a number, representing the Otp value entered by the user.</p>\n","type":"string|number","link":"//ej2.syncfusion.com/react/documentation/api/otp-input/#value"},{"name":"stylingMode","description":"<p>Specifies the style variant for the input fields in the Otp Input component.</p>\n","type":"string|OtpInputStyle","link":"//ej2.syncfusion.com/react/documentation/api/otp-input/#stylingmode"},{"name":"placeholder","description":"<p>Specifies the text that is shown as a hint/placeholder until the user focuses on or enters a value in the Otp Input.\nIf a single text is provided, it will be used for all input fields; otherwise, each text letter will be used for each field.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/otp-input/#placeholder"},{"name":"separator","description":"<p>Specifies the separator used to separate each input field in the Otp Input component.\nThe separator is displayed between each input field.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/otp-input/#separator"},{"name":"cssClass","description":"<p>Defines one or more CSS classes that can be used to customize the appearance of the Otp (One-Time Password) input component.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/otp-input/#cssclass"},{"name":"disabled","description":"<p>Specifies whether the Otp input component is disabled.\nWhen set to true, the component is disabled and user input is not allowed.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/otp-input/#disabled"},{"name":"length","description":"<p>Specifies the length of the Otp (One-Time Password) to be entered by the user.\nThis determines the number of input fields in the Otp Input.</p>\n","type":"number","link":"//ej2.syncfusion.com/react/documentation/api/otp-input/#length"}],"pdfviewer/default":[{"name":"serviceUrl","description":"<p>Defines the service url of the PdfViewer control.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/pdfviewer/#serviceurl"},{"name":"documentPath","description":"<p>Sets the PDF document path for initial loading.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/pdfviewer/#documentpath"}],"pdfviewer/read-only":[{"name":"serviceUrl","description":"<p>Defines the service url of the PdfViewer control.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/pdfviewer/#serviceurl"},{"name":"documentPath","description":"<p>Sets the PDF document path for initial loading.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/pdfviewer/#documentpath"},{"name":"documentLoad","description":"<p>Triggers while loading document into PDF viewer.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/pdfviewer/#documentload"}],"pdfviewer/document-list":[{"name":"serviceUrl","description":"<p>Defines the service url of the PdfViewer control.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/pdfviewer/#serviceurl"},{"name":"documentPath","description":"<p>Sets the PDF document path for initial loading.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/pdfviewer/#documentpath"}],"pdfviewer/multi-format-viewer":[{"name":"serviceUrl","description":"<p>Defines the service url of the PdfViewer control.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/pdfviewer/#serviceurl"},{"name":"documentPath","description":"<p>Sets the PDF document path for initial loading.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/pdfviewer/#documentpath"}],"pdfviewer/organize-pages":[{"name":"serviceUrl","description":"<p>Defines the service url of the PdfViewer control.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/pdfviewer/#serviceurl"},{"name":"documentPath","description":"<p>Sets the PDF document path for initial loading.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/pdfviewer/#documentpath"},{"name":"documentLoad","description":"<p>Triggers while loading document into PDF viewer.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/pdfviewer/#documentload"}],"pdfviewer/redaction":[{"name":"serviceUrl","description":"<p>Defines the service url of the PdfViewer control.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/pdfviewer/#serviceurl"},{"name":"documentPath","description":"<p>Sets the PDF document path for initial loading.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/pdfviewer/#documentpath"},{"name":"documentLoad","description":"<p>Triggers while loading document into PDF viewer.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/pdfviewer/#documentload"}],"pdfviewer/custom-toolbar":[{"name":"serviceUrl","description":"<p>Defines the service url of the PdfViewer control.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/pdfviewer/#serviceurl"},{"name":"documentPath","description":"<p>Sets the PDF document path for initial loading.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/pdfviewer/#documentpath"},{"name":"documentLoad","description":"<p>Triggers while loading document into PDF viewer.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/pdfviewer/#documentload"},{"name":"pageChange","description":"<p>Triggers when there is change in current page number.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/pdfviewer/#pagechange"},{"name":"enableToolbar","description":"<p>Enable or disables the toolbar of PdfViewer.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/pdfviewer/#enabletoolbar"}],"pdfviewer/custom-context-menu":[{"name":"serviceUrl","description":"<p>Defines the service url of the PdfViewer control.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/pdfviewer/#serviceurl"},{"name":"documentPath","description":"<p>Sets the PDF document path for initial loading.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/pdfviewer/#documentpath"},{"name":"documentLoad","description":"<p>Triggers while loading document into PDF viewer.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/pdfviewer/#documentload"},{"name":"pageChange","description":"<p>Triggers when there is change in current page number.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/pdfviewer/#pagechange"},{"name":"enableToolbar","description":"<p>Enable or disables the toolbar of PdfViewer.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/pdfviewer/#enabletoolbar"}],"pdfviewer/right-to-left":[{"name":"serviceUrl","description":"<p>Defines the service url of the PdfViewer control.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/pdfviewer/#serviceurl"},{"name":"documentPath","description":"<p>Sets the PDF document path for initial loading.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/pdfviewer/#documentpath"},{"name":"enableRtl","description":"<p>Enable or disable rendering component in right to left direction.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/pdfviewer/#enablertl"}],"pdfviewer/form-filling":[{"name":"serviceUrl","description":"<p>Defines the service url of the PdfViewer control.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/pdfviewer/#serviceurl"},{"name":"documentPath","description":"<p>Sets the PDF document path for initial loading.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/pdfviewer/#documentpath"}],"pdfviewer/form-designer":[{"name":"serviceUrl","description":"<p>Defines the service url of the PdfViewer control.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/pdfviewer/#serviceurl"},{"name":"documentPath","description":"<p>Sets the PDF document path for initial loading.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/pdfviewer/#documentpath"},{"name":"documentLoad","description":"<p>Triggers while loading document into PDF viewer.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/pdfviewer/#documentload"}],"pdfviewer/esigning-form-designer":[{"name":"serviceUrl","description":"<p>Defines the service url of the PdfViewer control.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/pdfviewer/#serviceurl"},{"name":"documentPath","description":"<p>Sets the PDF document path for initial loading.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/pdfviewer/#documentpath"},{"name":"documentLoad","description":"<p>Triggers while loading document into PDF viewer.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/pdfviewer/#documentload"}],"pdfviewer/esigning-pdf-forms":[{"name":"serviceUrl","description":"<p>Defines the service url of the PdfViewer control.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/pdfviewer/#serviceurl"},{"name":"documentPath","description":"<p>Sets the PDF document path for initial loading.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/pdfviewer/#documentpath"},{"name":"documentLoad","description":"<p>Triggers while loading document into PDF viewer.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/pdfviewer/#documentload"}],"pdfviewer/annotations":[{"name":"serviceUrl","description":"<p>Defines the service url of the PdfViewer control.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/pdfviewer/#serviceurl"},{"name":"documentPath","description":"<p>Sets the PDF document path for initial loading.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/pdfviewer/#documentpath"},{"name":"documentLoad","description":"<p>Triggers while loading document into PDF viewer.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/pdfviewer/#documentload"}],"pdfviewer/programmatic-operations":[{"name":"serviceUrl","description":"<p>Defines the service url of the PdfViewer control.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/pdfviewer/#serviceurl"},{"name":"documentPath","description":"<p>Sets the PDF document path for initial loading.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/pdfviewer/#documentpath"},{"name":"documentLoad","description":"<p>Triggers while loading document into PDF viewer.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/pdfviewer/#documentload"}],"pdfviewer/hand-written":[{"name":"serviceUrl","description":"<p>Defines the service url of the PdfViewer control.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/pdfviewer/#serviceurl"},{"name":"documentPath","description":"<p>Sets the PDF document path for initial loading.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/pdfviewer/#documentpath"},{"name":"documentLoad","description":"<p>Triggers while loading document into PDF viewer.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/pdfviewer/#documentload"}],"pdfviewer/invisible-signature":[{"name":"serviceUrl","description":"<p>Defines the service url of the PdfViewer control.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/pdfviewer/#serviceurl"},{"name":"documentPath","description":"<p>Sets the PDF document path for initial loading.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/pdfviewer/#documentpath"},{"name":"documentLoad","description":"<p>Triggers while loading document into PDF viewer.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/pdfviewer/#documentload"}],"querybuilder/default":[{"name":"width","description":"<p>Specifies the width of the query builder.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/query-builder/#width"},{"name":"dataSource","description":"<p>Binds the column name from data source in query-builder.\nThe <code>dataSource</code> is an array of JavaScript objects.</p>\n","type":"Object[]|Object|DataManager","link":"//ej2.syncfusion.com/react/documentation/api/query-builder/#datasource"},{"name":"columns","description":"<p>Specifies columns to create filters.</p>\n","type":"ColumnsModel[]","link":"//ej2.syncfusion.com/react/documentation/api/query-builder/#columns"},{"name":"rule","description":"<p>Defines rules in the QueryBuilder.\nSpecifies the initial rule, which is JSON data.</p>\n","type":"RuleModel","link":"//ej2.syncfusion.com/react/documentation/api/query-builder/#rule"},{"name":"created","description":"<p>Triggers when the component is created.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/query-builder/#created"}],"querybuilder/complex-databinding":[{"name":"width","description":"<p>Specifies the width of the query builder.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/query-builder/#width"},{"name":"columns","description":"<p>Specifies columns to create filters.</p>\n","type":"ColumnsModel[]","link":"//ej2.syncfusion.com/react/documentation/api/query-builder/#columns"},{"name":"rule","description":"<p>Defines rules in the QueryBuilder.\nSpecifies the initial rule, which is JSON data.</p>\n","type":"RuleModel","link":"//ej2.syncfusion.com/react/documentation/api/query-builder/#rule"},{"name":"fieldMode","description":"<p>Specifies the fieldMode as DropDownList or DropDownTree.</p>\n","type":"FieldMode","link":"//ej2.syncfusion.com/react/documentation/api/query-builder/#fieldmode"}],"querybuilder/grid":[{"name":"width","description":"<p>Specifies the width of the query builder.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/query-builder/#width"},{"name":"dataSource","description":"<p>Binds the column name from data source in query-builder.\nThe <code>dataSource</code> is an array of JavaScript objects.</p>\n","type":"Object[]|Object|DataManager","link":"//ej2.syncfusion.com/react/documentation/api/query-builder/#datasource"},{"name":"columns","description":"<p>Specifies columns to create filters.</p>\n","type":"ColumnsModel[]","link":"//ej2.syncfusion.com/react/documentation/api/query-builder/#columns"},{"name":"rule","description":"<p>Defines rules in the QueryBuilder.\nSpecifies the initial rule, which is JSON data.</p>\n","type":"RuleModel","link":"//ej2.syncfusion.com/react/documentation/api/query-builder/#rule"},{"name":"ruleChange","description":"<p>Triggers when changing the condition(AND/OR), field, value, operator is changed</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/query-builder/#rulechange"}],"querybuilder/mongo-sql":[{"name":"width","description":"<p>Specifies the width of the query builder.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/query-builder/#width"},{"name":"columns","description":"<p>Specifies columns to create filters.</p>\n","type":"ColumnsModel[]","link":"//ej2.syncfusion.com/react/documentation/api/query-builder/#columns"},{"name":"rule","description":"<p>Defines rules in the QueryBuilder.\nSpecifies the initial rule, which is JSON data.</p>\n","type":"RuleModel","link":"//ej2.syncfusion.com/react/documentation/api/query-builder/#rule"},{"name":"ruleChange","description":"<p>Triggers when changing the condition(AND/OR), field, value, operator is changed</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/query-builder/#rulechange"}],"querybuilder/lock-group":[{"name":"width","description":"<p>Specifies the width of the query builder.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/query-builder/#width"},{"name":"columns","description":"<p>Specifies columns to create filters.</p>\n","type":"ColumnsModel[]","link":"//ej2.syncfusion.com/react/documentation/api/query-builder/#columns"},{"name":"rule","description":"<p>Defines rules in the QueryBuilder.\nSpecifies the initial rule, which is JSON data.</p>\n","type":"RuleModel","link":"//ej2.syncfusion.com/react/documentation/api/query-builder/#rule"},{"name":"ruleChange","description":"<p>Triggers when changing the condition(AND/OR), field, value, operator is changed</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/query-builder/#rulechange"}],"querybuilder/clone-group":[{"name":"width","description":"<p>Specifies the width of the query builder.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/query-builder/#width"},{"name":"columns","description":"<p>Specifies columns to create filters.</p>\n","type":"ColumnsModel[]","link":"//ej2.syncfusion.com/react/documentation/api/query-builder/#columns"},{"name":"rule","description":"<p>Defines rules in the QueryBuilder.\nSpecifies the initial rule, which is JSON data.</p>\n","type":"RuleModel","link":"//ej2.syncfusion.com/react/documentation/api/query-builder/#rule"},{"name":"ruleChange","description":"<p>Triggers when changing the condition(AND/OR), field, value, operator is changed</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/query-builder/#rulechange"}],"querybuilder/drag-drop":[{"name":"width","description":"<p>Specifies the width of the query builder.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/query-builder/#width"},{"name":"columns","description":"<p>Specifies columns to create filters.</p>\n","type":"ColumnsModel[]","link":"//ej2.syncfusion.com/react/documentation/api/query-builder/#columns"},{"name":"rule","description":"<p>Defines rules in the QueryBuilder.\nSpecifies the initial rule, which is JSON data.</p>\n","type":"RuleModel","link":"//ej2.syncfusion.com/react/documentation/api/query-builder/#rule"},{"name":"ruleChange","description":"<p>Triggers when changing the condition(AND/OR), field, value, operator is changed</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/query-builder/#rulechange"}],"querybuilder/separate-connector":[{"name":"width","description":"<p>Specifies the width of the query builder.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/query-builder/#width"},{"name":"columns","description":"<p>Specifies columns to create filters.</p>\n","type":"ColumnsModel[]","link":"//ej2.syncfusion.com/react/documentation/api/query-builder/#columns"},{"name":"rule","description":"<p>Defines rules in the QueryBuilder.\nSpecifies the initial rule, which is JSON data.</p>\n","type":"RuleModel","link":"//ej2.syncfusion.com/react/documentation/api/query-builder/#rule"},{"name":"ruleChange","description":"<p>Triggers when changing the condition(AND/OR), field, value, operator is changed</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/query-builder/#rulechange"}],"querybuilder/template":[{"name":"width","description":"<p>Specifies the width of the query builder.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/query-builder/#width"},{"name":"columns","description":"<p>Specifies columns to create filters.</p>\n","type":"ColumnsModel[]","link":"//ej2.syncfusion.com/react/documentation/api/query-builder/#columns"},{"name":"rule","description":"<p>Defines rules in the QueryBuilder.\nSpecifies the initial rule, which is JSON data.</p>\n","type":"RuleModel","link":"//ej2.syncfusion.com/react/documentation/api/query-builder/#rule"},{"name":"ruleChange","description":"<p>Triggers when changing the condition(AND/OR), field, value, operator is changed</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/query-builder/#rulechange"}],"querybuilder/rule-template":[{"name":"width","description":"<p>Specifies the width of the query builder.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/query-builder/#width"},{"name":"columns","description":"<p>Specifies columns to create filters.</p>\n","type":"ColumnsModel[]","link":"//ej2.syncfusion.com/react/documentation/api/query-builder/#columns"},{"name":"rule","description":"<p>Defines rules in the QueryBuilder.\nSpecifies the initial rule, which is JSON data.</p>\n","type":"RuleModel","link":"//ej2.syncfusion.com/react/documentation/api/query-builder/#rule"}],"querybuilder/header-template":[{"name":"width","description":"<p>Specifies the width of the query builder.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/query-builder/#width"},{"name":"columns","description":"<p>Specifies columns to create filters.</p>\n","type":"ColumnsModel[]","link":"//ej2.syncfusion.com/react/documentation/api/query-builder/#columns"},{"name":"rule","description":"<p>Defines rules in the QueryBuilder.\nSpecifies the initial rule, which is JSON data.</p>\n","type":"RuleModel","link":"//ej2.syncfusion.com/react/documentation/api/query-builder/#rule"},{"name":"headerTemplate","description":"<p>Specifies the template for the header with any other widgets.</p>\n","type":"string|Function","link":"//ej2.syncfusion.com/react/documentation/api/query-builder/#headertemplate"}],"rangeslider/default":[{"name":"value","description":"<p>It is used to denote the current value of the Slider.\nThe value should be specified in array of number when render Slider type as range.</p>\n","type":"number|number[]","link":"//ej2.syncfusion.com/react/documentation/api/slider/#value"},{"name":"type","description":"<p>Defines the type of the Slider. The available options are:</p>\n<ul>\n<li>default - Allows to a single value in the Slider.</li>\n<li>minRange - Allows to select a single value in the Slider. It display’s a shadow from the start to the current value.</li>\n<li>range - Allows to select a range of values in the Slider. It displays shadow in-between the selection range.</li>\n</ul>\n","type":"SliderType","link":"//ej2.syncfusion.com/react/documentation/api/slider/#type"},{"name":"appendTo","description":"<p>Appends the control within the given HTML element</p>\n","type":"Method","link":"//ej2.syncfusion.com/react/documentation/api/slider/#appendto"}],"rangeslider/ticks":[{"name":"value","description":"<p>It is used to denote the current value of the Slider.\nThe value should be specified in array of number when render Slider type as range.</p>\n","type":"number|number[]","link":"//ej2.syncfusion.com/react/documentation/api/slider/#value"},{"name":"type","description":"<p>Defines the type of the Slider. The available options are:</p>\n<ul>\n<li>default - Allows to a single value in the Slider.</li>\n<li>minRange - Allows to select a single value in the Slider. It display’s a shadow from the start to the current value.</li>\n<li>range - Allows to select a range of values in the Slider. It displays shadow in-between the selection range.</li>\n</ul>\n","type":"SliderType","link":"//ej2.syncfusion.com/react/documentation/api/slider/#type"},{"name":"appendTo","description":"<p>Appends the control within the given HTML element</p>\n","type":"Method","link":"//ej2.syncfusion.com/react/documentation/api/slider/#appendto"},{"name":"enabled","description":"<p>Enable or Disable the slider.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/slider/#enabled"}],"rangeslider/tooltip":[{"name":"value","description":"<p>It is used to denote the current value of the Slider.\nThe value should be specified in array of number when render Slider type as range.</p>\n","type":"number|number[]","link":"//ej2.syncfusion.com/react/documentation/api/slider/#value"},{"name":"type","description":"<p>Defines the type of the Slider. The available options are:</p>\n<ul>\n<li>default - Allows to a single value in the Slider.</li>\n<li>minRange - Allows to select a single value in the Slider. It display’s a shadow from the start to the current value.</li>\n<li>range - Allows to select a range of values in the Slider. It displays shadow in-between the selection range.</li>\n</ul>\n","type":"SliderType","link":"//ej2.syncfusion.com/react/documentation/api/slider/#type"},{"name":"appendTo","description":"<p>Appends the control within the given HTML element</p>\n","type":"Method","link":"//ej2.syncfusion.com/react/documentation/api/slider/#appendto"},{"name":"showButtons","description":"<p>Specifies whether to show or hide the increase/decrease buttons\nof Slider to change the slider value.\nRefer the documentation <a href=\"../../slider/getting-started#buttons\">here</a>\nto know more about this property.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/slider/#showbuttons"}],"rangeslider/orientation":[{"name":"value","description":"<p>It is used to denote the current value of the Slider.\nThe value should be specified in array of number when render Slider type as range.</p>\n","type":"number|number[]","link":"//ej2.syncfusion.com/react/documentation/api/slider/#value"},{"name":"type","description":"<p>Defines the type of the Slider. The available options are:</p>\n<ul>\n<li>default - Allows to a single value in the Slider.</li>\n<li>minRange - Allows to select a single value in the Slider. It display’s a shadow from the start to the current value.</li>\n<li>range - Allows to select a range of values in the Slider. It displays shadow in-between the selection range.</li>\n</ul>\n","type":"SliderType","link":"//ej2.syncfusion.com/react/documentation/api/slider/#type"},{"name":"appendTo","description":"<p>Appends the control within the given HTML element</p>\n","type":"Method","link":"//ej2.syncfusion.com/react/documentation/api/slider/#appendto"},{"name":"orientation","description":"<p>Specifies whether to render the slider in vertical or horizontal orientation.\nRefer the documentation <a href=\"../../slider/orientation/\">here</a>\nto know more about this property.</p>\n","type":"SliderOrientation","link":"//ej2.syncfusion.com/react/documentation/api/slider/#orientation"}],"rangeslider/format":[{"name":"value","description":"<p>It is used to denote the current value of the Slider.\nThe value should be specified in array of number when render Slider type as range.</p>\n","type":"number|number[]","link":"//ej2.syncfusion.com/react/documentation/api/slider/#value"},{"name":"type","description":"<p>Defines the type of the Slider. The available options are:</p>\n<ul>\n<li>default - Allows to a single value in the Slider.</li>\n<li>minRange - Allows to select a single value in the Slider. It display’s a shadow from the start to the current value.</li>\n<li>range - Allows to select a range of values in the Slider. It displays shadow in-between the selection range.</li>\n</ul>\n","type":"SliderType","link":"//ej2.syncfusion.com/react/documentation/api/slider/#type"},{"name":"appendTo","description":"<p>Appends the control within the given HTML element</p>\n","type":"Method","link":"//ej2.syncfusion.com/react/documentation/api/slider/#appendto"},{"name":"min","description":"<p>Gets/Sets the minimum value of the slider.</p>\n","type":"number","link":"//ej2.syncfusion.com/react/documentation/api/slider/#min"},{"name":"max","description":"<p>Gets/Sets the maximum value of the slider.</p>\n","type":"number","link":"//ej2.syncfusion.com/react/documentation/api/slider/#max"},{"name":"step","description":"<p>Specifies the step value for each value change when the increase / decrease\nbutton is clicked or on arrow keys press or on dragging the thumb.\nRefer the documentation <a href=\"../../slider/ticks#step\">here</a>\nto know more about this property.</p>\n","type":"number","link":"//ej2.syncfusion.com/react/documentation/api/slider/#step"},{"name":"tooltipChange","description":"<p>Triggers when the Sider tooltip value is changed.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/slider/#tooltipchange"},{"name":"renderingTicks","description":"<p>Triggers on rendering the ticks element in the Slider,\nwhich is used to customize the ticks labels dynamically.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/slider/#renderingticks"}],"rangeslider/limits":[{"name":"value","description":"<p>It is used to denote the current value of the Slider.\nThe value should be specified in array of number when render Slider type as range.</p>\n","type":"number|number[]","link":"//ej2.syncfusion.com/react/documentation/api/slider/#value"},{"name":"type","description":"<p>Defines the type of the Slider. The available options are:</p>\n<ul>\n<li>default - Allows to a single value in the Slider.</li>\n<li>minRange - Allows to select a single value in the Slider. It display’s a shadow from the start to the current value.</li>\n<li>range - Allows to select a range of values in the Slider. It displays shadow in-between the selection range.</li>\n</ul>\n","type":"SliderType","link":"//ej2.syncfusion.com/react/documentation/api/slider/#type"},{"name":"appendTo","description":"<p>Appends the control within the given HTML element</p>\n","type":"Method","link":"//ej2.syncfusion.com/react/documentation/api/slider/#appendto"},{"name":"min","description":"<p>Gets/Sets the minimum value of the slider.</p>\n","type":"number","link":"//ej2.syncfusion.com/react/documentation/api/slider/#min"},{"name":"max","description":"<p>Gets/Sets the maximum value of the slider.</p>\n","type":"number","link":"//ej2.syncfusion.com/react/documentation/api/slider/#max"},{"name":"limits","description":"<p>Specified the limit within which the slider to be moved.\nRefer the documentation <a href=\"../../slider/limits\">here</a>\nto know more about this property.</p>\n","type":"LimitDataModel","link":"//ej2.syncfusion.com/react/documentation/api/slider/#limits"}],"rangeslider/api":[{"name":"value","description":"<p>It is used to denote the current value of the Slider.\nThe value should be specified in array of number when render Slider type as range.</p>\n","type":"number|number[]","link":"//ej2.syncfusion.com/react/documentation/api/slider/#value"},{"name":"type","description":"<p>Defines the type of the Slider. The available options are:</p>\n<ul>\n<li>default - Allows to a single value in the Slider.</li>\n<li>minRange - Allows to select a single value in the Slider. It display’s a shadow from the start to the current value.</li>\n<li>range - Allows to select a range of values in the Slider. It displays shadow in-between the selection range.</li>\n</ul>\n","type":"SliderType","link":"//ej2.syncfusion.com/react/documentation/api/slider/#type"},{"name":"appendTo","description":"<p>Appends the control within the given HTML element</p>\n","type":"Method","link":"//ej2.syncfusion.com/react/documentation/api/slider/#appendto"},{"name":"min","description":"<p>Gets/Sets the minimum value of the slider.</p>\n","type":"number","link":"//ej2.syncfusion.com/react/documentation/api/slider/#min"},{"name":"max","description":"<p>Gets/Sets the maximum value of the slider.</p>\n","type":"number","link":"//ej2.syncfusion.com/react/documentation/api/slider/#max"},{"name":"step","description":"<p>Specifies the step value for each value change when the increase / decrease\nbutton is clicked or on arrow keys press or on dragging the thumb.\nRefer the documentation <a href=\"../../slider/ticks#step\">here</a>\nto know more about this property.</p>\n","type":"number","link":"//ej2.syncfusion.com/react/documentation/api/slider/#step"},{"name":"showButtons","description":"<p>Specifies whether to show or hide the increase/decrease buttons\nof Slider to change the slider value.\nRefer the documentation <a href=\"../../slider/getting-started#buttons\">here</a>\nto know more about this property.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/slider/#showbuttons"},{"name":"enabled","description":"<p>Enable or Disable the slider.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/slider/#enabled"},{"name":"orientation","description":"<p>Specifies whether to render the slider in vertical or horizontal orientation.\nRefer the documentation <a href=\"../../slider/orientation/\">here</a>\nto know more about this property.</p>\n","type":"SliderOrientation","link":"//ej2.syncfusion.com/react/documentation/api/slider/#orientation"}],"rangeslider/events":[{"name":"value","description":"<p>It is used to denote the current value of the Slider.\nThe value should be specified in array of number when render Slider type as range.</p>\n","type":"number|number[]","link":"//ej2.syncfusion.com/react/documentation/api/slider/#value"},{"name":"type","description":"<p>Defines the type of the Slider. The available options are:</p>\n<ul>\n<li>default - Allows to a single value in the Slider.</li>\n<li>minRange - Allows to select a single value in the Slider. It display’s a shadow from the start to the current value.</li>\n<li>range - Allows to select a range of values in the Slider. It displays shadow in-between the selection range.</li>\n</ul>\n","type":"SliderType","link":"//ej2.syncfusion.com/react/documentation/api/slider/#type"},{"name":"appendTo","description":"<p>Appends the control within the given HTML element</p>\n","type":"Method","link":"//ej2.syncfusion.com/react/documentation/api/slider/#appendto"},{"name":"change","description":"<p>We can trigger change event whenever Slider value is changed.\nIn other term, this event will be triggered while drag the slider thumb.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/slider/#change"},{"name":"created","description":"<p>Triggers when the Slider is successfully created.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/slider/#created"}],"rangeslider/thumb-customization":[{"name":"value","description":"<p>It is used to denote the current value of the Slider.\nThe value should be specified in array of number when render Slider type as range.</p>\n","type":"number|number[]","link":"//ej2.syncfusion.com/react/documentation/api/slider/#value"},{"name":"type","description":"<p>Defines the type of the Slider. The available options are:</p>\n<ul>\n<li>default - Allows to a single value in the Slider.</li>\n<li>minRange - Allows to select a single value in the Slider. It display’s a shadow from the start to the current value.</li>\n<li>range - Allows to select a range of values in the Slider. It displays shadow in-between the selection range.</li>\n</ul>\n","type":"SliderType","link":"//ej2.syncfusion.com/react/documentation/api/slider/#type"},{"name":"appendTo","description":"<p>Appends the control within the given HTML element</p>\n","type":"Method","link":"//ej2.syncfusion.com/react/documentation/api/slider/#appendto"},{"name":"min","description":"<p>Gets/Sets the minimum value of the slider.</p>\n","type":"number","link":"//ej2.syncfusion.com/react/documentation/api/slider/#min"},{"name":"max","description":"<p>Gets/Sets the maximum value of the slider.</p>\n","type":"number","link":"//ej2.syncfusion.com/react/documentation/api/slider/#max"}],"rangeslider/selection-bar-customization":[{"name":"value","description":"<p>It is used to denote the current value of the Slider.\nThe value should be specified in array of number when render Slider type as range.</p>\n","type":"number|number[]","link":"//ej2.syncfusion.com/react/documentation/api/slider/#value"},{"name":"type","description":"<p>Defines the type of the Slider. The available options are:</p>\n<ul>\n<li>default - Allows to a single value in the Slider.</li>\n<li>minRange - Allows to select a single value in the Slider. It display’s a shadow from the start to the current value.</li>\n<li>range - Allows to select a range of values in the Slider. It displays shadow in-between the selection range.</li>\n</ul>\n","type":"SliderType","link":"//ej2.syncfusion.com/react/documentation/api/slider/#type"},{"name":"appendTo","description":"<p>Appends the control within the given HTML element</p>\n","type":"Method","link":"//ej2.syncfusion.com/react/documentation/api/slider/#appendto"},{"name":"min","description":"<p>Gets/Sets the minimum value of the slider.</p>\n","type":"number","link":"//ej2.syncfusion.com/react/documentation/api/slider/#min"},{"name":"max","description":"<p>Gets/Sets the maximum value of the slider.</p>\n","type":"number","link":"//ej2.syncfusion.com/react/documentation/api/slider/#max"},{"name":"change","description":"<p>We can trigger change event whenever Slider value is changed.\nIn other term, this event will be triggered while drag the slider thumb.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/slider/#change"},{"name":"created","description":"<p>Triggers when the Slider is successfully created.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/slider/#created"}],"rangeslider/ticks-customization":[{"name":"value","description":"<p>It is used to denote the current value of the Slider.\nThe value should be specified in array of number when render Slider type as range.</p>\n","type":"number|number[]","link":"//ej2.syncfusion.com/react/documentation/api/slider/#value"},{"name":"type","description":"<p>Defines the type of the Slider. The available options are:</p>\n<ul>\n<li>default - Allows to a single value in the Slider.</li>\n<li>minRange - Allows to select a single value in the Slider. It display’s a shadow from the start to the current value.</li>\n<li>range - Allows to select a range of values in the Slider. It displays shadow in-between the selection range.</li>\n</ul>\n","type":"SliderType","link":"//ej2.syncfusion.com/react/documentation/api/slider/#type"},{"name":"appendTo","description":"<p>Appends the control within the given HTML element</p>\n","type":"Method","link":"//ej2.syncfusion.com/react/documentation/api/slider/#appendto"},{"name":"min","description":"<p>Gets/Sets the minimum value of the slider.</p>\n","type":"number","link":"//ej2.syncfusion.com/react/documentation/api/slider/#min"},{"name":"max","description":"<p>Gets/Sets the maximum value of the slider.</p>\n","type":"number","link":"//ej2.syncfusion.com/react/documentation/api/slider/#max"},{"name":"step","description":"<p>Specifies the step value for each value change when the increase / decrease\nbutton is clicked or on arrow keys press or on dragging the thumb.\nRefer the documentation <a href=\"../../slider/ticks#step\">here</a>\nto know more about this property.</p>\n","type":"number","link":"//ej2.syncfusion.com/react/documentation/api/slider/#step"},{"name":"renderingTicks","description":"<p>Triggers on rendering the ticks element in the Slider,\nwhich is used to customize the ticks labels dynamically.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/slider/#renderingticks"},{"name":"renderedTicks","description":"<p>Triggers when the ticks are rendered on the Slider.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/slider/#renderedticks"}],"rangeslider/tooltip-customization":[{"name":"value","description":"<p>It is used to denote the current value of the Slider.\nThe value should be specified in array of number when render Slider type as range.</p>\n","type":"number|number[]","link":"//ej2.syncfusion.com/react/documentation/api/slider/#value"},{"name":"type","description":"<p>Defines the type of the Slider. The available options are:</p>\n<ul>\n<li>default - Allows to a single value in the Slider.</li>\n<li>minRange - Allows to select a single value in the Slider. It display’s a shadow from the start to the current value.</li>\n<li>range - Allows to select a range of values in the Slider. It displays shadow in-between the selection range.</li>\n</ul>\n","type":"SliderType","link":"//ej2.syncfusion.com/react/documentation/api/slider/#type"},{"name":"appendTo","description":"<p>Appends the control within the given HTML element</p>\n","type":"Method","link":"//ej2.syncfusion.com/react/documentation/api/slider/#appendto"},{"name":"min","description":"<p>Gets/Sets the minimum value of the slider.</p>\n","type":"number","link":"//ej2.syncfusion.com/react/documentation/api/slider/#min"},{"name":"max","description":"<p>Gets/Sets the maximum value of the slider.</p>\n","type":"number","link":"//ej2.syncfusion.com/react/documentation/api/slider/#max"},{"name":"step","description":"<p>Specifies the step value for each value change when the increase / decrease\nbutton is clicked or on arrow keys press or on dragging the thumb.\nRefer the documentation <a href=\"../../slider/ticks#step\">here</a>\nto know more about this property.</p>\n","type":"number","link":"//ej2.syncfusion.com/react/documentation/api/slider/#step"},{"name":"tooltipChange","description":"<p>Triggers when the Sider tooltip value is changed.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/slider/#tooltipchange"},{"name":"renderingTicks","description":"<p>Triggers on rendering the ticks element in the Slider,\nwhich is used to customize the ticks labels dynamically.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/slider/#renderingticks"},{"name":"created","description":"<p>Triggers when the Slider is successfully created.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/slider/#created"}],"rangeslider/azure-pricing":[{"name":"value","description":"<p>It is used to denote the current value of the Slider.\nThe value should be specified in array of number when render Slider type as range.</p>\n","type":"number|number[]","link":"//ej2.syncfusion.com/react/documentation/api/slider/#value"},{"name":"type","description":"<p>Defines the type of the Slider. The available options are:</p>\n<ul>\n<li>default - Allows to a single value in the Slider.</li>\n<li>minRange - Allows to select a single value in the Slider. It display’s a shadow from the start to the current value.</li>\n<li>range - Allows to select a range of values in the Slider. It displays shadow in-between the selection range.</li>\n</ul>\n","type":"SliderType","link":"//ej2.syncfusion.com/react/documentation/api/slider/#type"},{"name":"appendTo","description":"<p>Appends the control within the given HTML element</p>\n","type":"Method","link":"//ej2.syncfusion.com/react/documentation/api/slider/#appendto"},{"name":"min","description":"<p>Gets/Sets the minimum value of the slider.</p>\n","type":"number","link":"//ej2.syncfusion.com/react/documentation/api/slider/#min"},{"name":"max","description":"<p>Gets/Sets the maximum value of the slider.</p>\n","type":"number","link":"//ej2.syncfusion.com/react/documentation/api/slider/#max"},{"name":"step","description":"<p>Specifies the step value for each value change when the increase / decrease\nbutton is clicked or on arrow keys press or on dragging the thumb.\nRefer the documentation <a href=\"../../slider/ticks#step\">here</a>\nto know more about this property.</p>\n","type":"number","link":"//ej2.syncfusion.com/react/documentation/api/slider/#step"},{"name":"created","description":"<p>Triggers when the Slider is successfully created.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/slider/#created"}],"richtexteditor/tools":[{"name":"Inject","description":"<p>Dynamically injects the required modules to the component.</p>\n","type":"Method","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#inject"},{"name":"toolbarSettings","description":"<p>Specifies the configuration for the toolbar, including the alignment and rendering type.\nBy default, the toolbar floats at the top of the RichTextEditor.\nWhen you scroll down, the toolbar will move with the page applying the specified offset.\nProperties:</p>\n<ul>\n<li>\n<p>enable: A boolean value to show or hide the toolbar.</p>\n</li>\n<li>\n<p>enableFloating: A boolean value to enable or disable the floating toolbar.\nThis keeps the toolbar fixed at the top of the RichTextEditor during scrolling.</p>\n</li>\n<li>\n<p>type: Defines the toolbar type, with the following options:</p>\n<ol>\n<li>Expand: Overflowing toolbar items are hidden and can be accessed by clicking the expand arrow.</li>\n<li>MultiRow: Overflowing toolbar items wrap into the next row.</li>\n<li>Scrollable: Toolbar items are on a single line and can be scrolled horizontally if they overflow.</li>\n</ol>\n</li>\n<li>\n<p>items: An array specifying the items aligned horizontally in the toolbar.</p>\n</li>\n</ul>\n<blockquote>\n<p>'|' and '-' can be used to insert vertical and horizontal separator lines in the toolbar.</p>\n</blockquote>\n<ul>\n<li>itemConfigs: Allows the modification of the default toolbar item configuration, such as the icon class.</li>\n</ul>\n<blockquote>\n<p>By default, the toolbar is rendered with a scrollable option on mobile devices and does not support other toolbar types.</p>\n</blockquote>\n","type":"ToolbarSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#toolbarsettings"},{"name":"showCharCount","description":"<p>Enables or disables the display of the character counter.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#showcharcount"},{"name":"actionBegin","description":"<p>This event triggers before executing a command via toolbar items.\nCancel this event to prevent the command from executing by setting the <code>cancel</code> argument to <code>true</code>.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#actionbegin"},{"name":"actionComplete","description":"<p>This event triggers after executing a command via toolbar items.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#actioncomplete"},{"name":"maxLength","description":"<p>Specifies the maximum number of characters allowed in the Rich Text Editor.</p>\n","type":"number","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#maxlength"},{"name":"exportWord","description":"<p>Defines file export options for the Rich Text Editor with properties like:</p>\n<ul>\n<li><code>serviceurl</code>: The URL utilized for exporting editor content to Word files.</li>\n<li><code>fileName</code>: Designates the default name for exported Word files.</li>\n<li><code>stylesheet</code>: Applies a stylesheet to the exported Word file.</li>\n</ul>\n","type":"ExportWordModel","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#exportword"},{"name":"slashMenuSettings","description":"<p>Configuration options for the slash menu feature in the Editor, used to display a mention popup.\nProperties:</p>\n<ul>\n<li>enable: A boolean indicating whether the slash menu is enabled in the Editor.</li>\n<li>items: An array specifying the list of items to be displayed in the slash menu.</li>\n<li>popupWidth: Defines the width of the slash menu popup. Accepts values in pixels, numbers, or percentages. Numeric values are treated as pixels.</li>\n<li>popupHeight: Defines the height of the slash menu popup. Accepts values in pixels, numbers, or percentages. Numeric values are treated as pixels.</li>\n</ul>\n","type":"SlashMenuSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#slashmenusettings"},{"name":"exportPdf","description":"<p>Describes file export options to PDF in the Rich Text Editor, such as:</p>\n<ul>\n<li><code>serviceurl</code>: URL used for exporting content to PDF format.</li>\n<li><code>fileName</code>: Specifies the default PDF file name upon export.</li>\n<li><code>stylesheet</code>: Applies a stylesheet to the exported PDF file.</li>\n</ul>\n","type":"ExportPdfModel","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#exportpdf"},{"name":"importWord","description":"<p>Configures the options for importing Word files in the Rich Text Editor component.\nThe <code>serviceUrl</code> property specifies the server endpoint URL where the uploaded Word file will be processed.</p>\n","type":"ImportWordModel","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#importword"}],"richtexteditor/rich-text-editor":[{"name":"Inject","description":"<p>Dynamically injects the required modules to the component.</p>\n","type":"Method","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#inject"},{"name":"appendTo","description":"<p>Appends the control within the given HTML element</p>\n","type":"Method","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#appendto"}],"richtexteditor/image":[{"name":"Inject","description":"<p>Dynamically injects the required modules to the component.</p>\n","type":"Method","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#inject"},{"name":"quickToolbarSettings","description":"<p>Specifies the items to be rendered in the quick toolbar based on the target element.\nProperties:</p>\n<ul>\n<li>enable: Boolean to show or hide the quick toolbar.</li>\n<li>actionOnScroll: Options for quick toolbar behavior on scroll:\n<ol>\n<li>hide: The quick toolbar closes when the parent element is scrolled.</li>\n<li>none: The quick toolbar stays open even if the parent element is scrolled.</li>\n</ol>\n</li>\n<li>link: Specifies items in the quick toolbar for links ('Open', 'Edit', 'UnLink').</li>\n<li>image: Specifies items in the quick toolbar for images ('Replace', 'Align', 'Caption', 'Remove', 'InsertLink', 'Display', 'AltText', 'Dimension').</li>\n<li>text: Specifies items in the quick toolbar for text ('Cut', 'Copy', 'Paste').</li>\n<li>audio: Specifies items for audio ('AudioReplace', 'AudioRemove', 'AudioLayoutOption').</li>\n<li>video: Specifies items for video ('VideoReplace', 'VideoAlign', 'VideoRemove', 'VideoLayoutOption', 'VideoDimension').</li>\n</ul>\n","type":"QuickToolbarSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#quicktoolbarsettings"},{"name":"toolbarClick","description":"<p>This event triggers when a Rich Text Editor toolbar item is clicked.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#toolbarclick"},{"name":"appendTo","description":"<p>Appends the control within the given HTML element</p>\n","type":"Method","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#appendto"},{"name":"getRange","description":"<p>Get the selected range from the RichTextEditor's content.</p>\n","type":"Method","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#getrange"}],"richtexteditor/insert-media":[{"name":"Inject","description":"<p>Dynamically injects the required modules to the component.</p>\n","type":"Method","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#inject"},{"name":"quickToolbarSettings","description":"<p>Specifies the items to be rendered in the quick toolbar based on the target element.\nProperties:</p>\n<ul>\n<li>enable: Boolean to show or hide the quick toolbar.</li>\n<li>actionOnScroll: Options for quick toolbar behavior on scroll:\n<ol>\n<li>hide: The quick toolbar closes when the parent element is scrolled.</li>\n<li>none: The quick toolbar stays open even if the parent element is scrolled.</li>\n</ol>\n</li>\n<li>link: Specifies items in the quick toolbar for links ('Open', 'Edit', 'UnLink').</li>\n<li>image: Specifies items in the quick toolbar for images ('Replace', 'Align', 'Caption', 'Remove', 'InsertLink', 'Display', 'AltText', 'Dimension').</li>\n<li>text: Specifies items in the quick toolbar for text ('Cut', 'Copy', 'Paste').</li>\n<li>audio: Specifies items for audio ('AudioReplace', 'AudioRemove', 'AudioLayoutOption').</li>\n<li>video: Specifies items for video ('VideoReplace', 'VideoAlign', 'VideoRemove', 'VideoLayoutOption', 'VideoDimension').</li>\n</ul>\n","type":"QuickToolbarSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#quicktoolbarsettings"},{"name":"toolbarClick","description":"<p>This event triggers when a Rich Text Editor toolbar item is clicked.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#toolbarclick"},{"name":"appendTo","description":"<p>Appends the control within the given HTML element</p>\n","type":"Method","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#appendto"},{"name":"getRange","description":"<p>Get the selected range from the RichTextEditor's content.</p>\n","type":"Method","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#getrange"}],"richtexteditor/inline":[{"name":"Inject","description":"<p>Dynamically injects the required modules to the component.</p>\n","type":"Method","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#inject"},{"name":"inlineMode","description":"<p>Configures the inline edit mode for the Rich Text Editor with the following options:</p>\n<ul>\n<li><code>enable</code>: A boolean value to enable or disable the inline edit mode.</li>\n<li><code>onSelection</code>: Determines how the toolbar is activated:\n<ul>\n<li>If set to <code>true</code>, the toolbar appears inline upon text selection.</li>\n<li>If set to <code>false</code>, the toolbar opens when clicking on the target element.</li>\n</ul>\n</li>\n</ul>\n","type":"InlineModeModel","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#inlinemode"},{"name":"toolbarSettings","description":"<p>Specifies the configuration for the toolbar, including the alignment and rendering type.\nBy default, the toolbar floats at the top of the RichTextEditor.\nWhen you scroll down, the toolbar will move with the page applying the specified offset.\nProperties:</p>\n<ul>\n<li>\n<p>enable: A boolean value to show or hide the toolbar.</p>\n</li>\n<li>\n<p>enableFloating: A boolean value to enable or disable the floating toolbar.\nThis keeps the toolbar fixed at the top of the RichTextEditor during scrolling.</p>\n</li>\n<li>\n<p>type: Defines the toolbar type, with the following options:</p>\n<ol>\n<li>Expand: Overflowing toolbar items are hidden and can be accessed by clicking the expand arrow.</li>\n<li>MultiRow: Overflowing toolbar items wrap into the next row.</li>\n<li>Scrollable: Toolbar items are on a single line and can be scrolled horizontally if they overflow.</li>\n</ol>\n</li>\n<li>\n<p>items: An array specifying the items aligned horizontally in the toolbar.</p>\n</li>\n</ul>\n<blockquote>\n<p>'|' and '-' can be used to insert vertical and horizontal separator lines in the toolbar.</p>\n</blockquote>\n<ul>\n<li>itemConfigs: Allows the modification of the default toolbar item configuration, such as the icon class.</li>\n</ul>\n<blockquote>\n<p>By default, the toolbar is rendered with a scrollable option on mobile devices and does not support other toolbar types.</p>\n</blockquote>\n","type":"ToolbarSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#toolbarsettings"},{"name":"format","description":"<p>Predefines a collection of paragraph styles along with quote and code styles\nthat populate the format dropdown in the toolbar.</p>\n","type":"FormatModel","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#format"},{"name":"fontFamily","description":"<p>Predefines font families that populate the font family dropdown in the toolbar.</p>\n","type":"FontFamilyModel","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#fontfamily"},{"name":"appendTo","description":"<p>Appends the control within the given HTML element</p>\n","type":"Method","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#appendto"},{"name":"dataBind","description":"<p>When invoked, applies the pending property changes immediately to the component.</p>\n","type":"Method","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#databind"}],"richtexteditor/paste-cleanup":[{"name":"Inject","description":"<p>Dynamically injects the required modules to the component.</p>\n","type":"Method","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#inject"},{"name":"value","description":"<p>Specifies the initial content to be displayed in the RichTextEditor's content area. It should be a string.\nThe editor's content can also be dynamically loaded from a database, AJAX, etc.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#value"},{"name":"appendTo","description":"<p>Appends the control within the given HTML element</p>\n","type":"Method","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#appendto"},{"name":"pasteCleanupSettings","description":"<p>Configures paste options in the Rich Text Editor.\nProperties:</p>\n<ul>\n<li>prompt: Boolean to enable or disable paste prompt.</li>\n<li>deniedAttrs: Attributes to restrict during paste.</li>\n<li>allowedStyleProps: Style properties allowed when pasting.</li>\n<li>deniedTags: Tags to restrict when pasting.</li>\n<li>keepFormat: Boolean to keep or remove format when pasting.</li>\n<li>plainText: Boolean to paste as plain text.</li>\n</ul>\n","type":"PasteCleanupSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#pastecleanupsettings"}],"richtexteditor/format-painter":[{"name":"formatPainterSettings","description":"<p>Configures the format painter options in the Rich Text Editor.\nProperties:</p>\n<ul>\n<li>allowedFormats: Tags selectors that allow format copying.</li>\n<li>deniedFormats: Tag selectors that prevent format copying.</li>\n</ul>\n","type":"FormatPainterSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#formatpaintersettings"}],"richtexteditor/iframe":[{"name":"Inject","description":"<p>Dynamically injects the required modules to the component.</p>\n","type":"Method","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#inject"},{"name":"height","description":"<p>Specifies the height of the Rich Text Editor component.</p>\n","type":"string|number","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#height"},{"name":"iframeSettings","description":"<p>Configures iframe mode items in the Rich Text Editor.\nProperties:</p>\n<ul>\n<li>enable: Boolean to place editor content in an iframe, isolating it from the page.</li>\n<li>attributes: Custom style for displaying content inside the iframe. Applied to iframe body.</li>\n<li>resources: Adds styles and scripts to the iframe.\n<ol>\n<li>styles[]: Array of CSS files for the iframe content.</li>\n<li>scripts[]: Array of JS script files for the iframe.</li>\n</ol>\n</li>\n<li>metaTags[]: Array of meta tags for iframe's head, setting metadata (http-equiv, charset, etc.).</li>\n<li>sandbox: String array defining iframe sandbox attributes, controlling security restrictions. Default includes &quot;allow-same-origin&quot;.</li>\n</ul>\n","type":"IFrameSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#iframesettings"},{"name":"toolbarSettings","description":"<p>Specifies the configuration for the toolbar, including the alignment and rendering type.\nBy default, the toolbar floats at the top of the RichTextEditor.\nWhen you scroll down, the toolbar will move with the page applying the specified offset.\nProperties:</p>\n<ul>\n<li>\n<p>enable: A boolean value to show or hide the toolbar.</p>\n</li>\n<li>\n<p>enableFloating: A boolean value to enable or disable the floating toolbar.\nThis keeps the toolbar fixed at the top of the RichTextEditor during scrolling.</p>\n</li>\n<li>\n<p>type: Defines the toolbar type, with the following options:</p>\n<ol>\n<li>Expand: Overflowing toolbar items are hidden and can be accessed by clicking the expand arrow.</li>\n<li>MultiRow: Overflowing toolbar items wrap into the next row.</li>\n<li>Scrollable: Toolbar items are on a single line and can be scrolled horizontally if they overflow.</li>\n</ol>\n</li>\n<li>\n<p>items: An array specifying the items aligned horizontally in the toolbar.</p>\n</li>\n</ul>\n<blockquote>\n<p>'|' and '-' can be used to insert vertical and horizontal separator lines in the toolbar.</p>\n</blockquote>\n<ul>\n<li>itemConfigs: Allows the modification of the default toolbar item configuration, such as the icon class.</li>\n</ul>\n<blockquote>\n<p>By default, the toolbar is rendered with a scrollable option on mobile devices and does not support other toolbar types.</p>\n</blockquote>\n","type":"ToolbarSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#toolbarsettings"},{"name":"actionBegin","description":"<p>This event triggers before executing a command via toolbar items.\nCancel this event to prevent the command from executing by setting the <code>cancel</code> argument to <code>true</code>.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#actionbegin"},{"name":"actionComplete","description":"<p>This event triggers after executing a command via toolbar items.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#actioncomplete"},{"name":"appendTo","description":"<p>Appends the control within the given HTML element</p>\n","type":"Method","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#appendto"}],"richtexteditor/print":[{"name":"Inject","description":"<p>Dynamically injects the required modules to the component.</p>\n","type":"Method","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#inject"},{"name":"toolbarSettings","description":"<p>Specifies the configuration for the toolbar, including the alignment and rendering type.\nBy default, the toolbar floats at the top of the RichTextEditor.\nWhen you scroll down, the toolbar will move with the page applying the specified offset.\nProperties:</p>\n<ul>\n<li>\n<p>enable: A boolean value to show or hide the toolbar.</p>\n</li>\n<li>\n<p>enableFloating: A boolean value to enable or disable the floating toolbar.\nThis keeps the toolbar fixed at the top of the RichTextEditor during scrolling.</p>\n</li>\n<li>\n<p>type: Defines the toolbar type, with the following options:</p>\n<ol>\n<li>Expand: Overflowing toolbar items are hidden and can be accessed by clicking the expand arrow.</li>\n<li>MultiRow: Overflowing toolbar items wrap into the next row.</li>\n<li>Scrollable: Toolbar items are on a single line and can be scrolled horizontally if they overflow.</li>\n</ol>\n</li>\n<li>\n<p>items: An array specifying the items aligned horizontally in the toolbar.</p>\n</li>\n</ul>\n<blockquote>\n<p>'|' and '-' can be used to insert vertical and horizontal separator lines in the toolbar.</p>\n</blockquote>\n<ul>\n<li>itemConfigs: Allows the modification of the default toolbar item configuration, such as the icon class.</li>\n</ul>\n<blockquote>\n<p>By default, the toolbar is rendered with a scrollable option on mobile devices and does not support other toolbar types.</p>\n</blockquote>\n","type":"ToolbarSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#toolbarsettings"},{"name":"print","description":"<p>Prints all the pages of the RichTextEditor by default.</p>\n","type":"Method","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#print"},{"name":"appendTo","description":"<p>Appends the control within the given HTML element</p>\n","type":"Method","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#appendto"}],"richtexteditor/ajax-load":[{"name":"Inject","description":"<p>Dynamically injects the required modules to the component.</p>\n","type":"Method","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#inject"},{"name":"value","description":"<p>Specifies the initial content to be displayed in the RichTextEditor's content area. It should be a string.\nThe editor's content can also be dynamically loaded from a database, AJAX, etc.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#value"},{"name":"appendTo","description":"<p>Appends the control within the given HTML element</p>\n","type":"Method","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#appendto"}],"richtexteditor/resize-editor":[{"name":"Inject","description":"<p>Dynamically injects the required modules to the component.</p>\n","type":"Method","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#inject"},{"name":"appendTo","description":"<p>Appends the control within the given HTML element</p>\n","type":"Method","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#appendto"},{"name":"enableResize","description":"<p>Enables or disables the resizing option in the editor.\nWhen enabled, the editor can be resized by dragging the resize icon in its bottom right corner.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#enableresize"}],"richtexteditor/api":[{"name":"Inject","description":"<p>Dynamically injects the required modules to the component.</p>\n","type":"Method","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#inject"},{"name":"showCharCount","description":"<p>Enables or disables the display of the character counter.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#showcharcount"},{"name":"maxLength","description":"<p>Specifies the maximum number of characters allowed in the Rich Text Editor.</p>\n","type":"number","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#maxlength"},{"name":"appendTo","description":"<p>Appends the control within the given HTML element</p>\n","type":"Method","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#appendto"},{"name":"readonly","description":"<p>Disables user interactions on the component when set to true.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#readonly"},{"name":"enabled","description":"<p>Indicates whether the component is enabled or disabled.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#enabled"},{"name":"enableHtmlEncode","description":"<p>Determines if source code should be displayed in an encoded format.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#enablehtmlencode"},{"name":"value","description":"<p>Specifies the initial content to be displayed in the RichTextEditor's content area. It should be a string.\nThe editor's content can also be dynamically loaded from a database, AJAX, etc.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#value"},{"name":"getSelection","description":"<p>Retrieves the HTML markup from the currently selected content in RichTextEditor.</p>\n","type":"Method","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#getselection"},{"name":"selectAll","description":"<p>Selects all content within the RichTextEditor.</p>\n","type":"Method","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#selectall"}],"richtexteditor/enter-key-configuration":[{"name":"Inject","description":"<p>Dynamically injects the required modules to the component.</p>\n","type":"Method","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#inject"},{"name":"appendTo","description":"<p>Appends the control within the given HTML element</p>\n","type":"Method","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#appendto"},{"name":"value","description":"<p>Specifies the initial content to be displayed in the RichTextEditor's content area. It should be a string.\nThe editor's content can also be dynamically loaded from a database, AJAX, etc.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#value"},{"name":"saveInterval","description":"<p>Specifies the save interval in milliseconds for automatically saving the content.\nThe change event is triggered if the content changes from the last saved interval.</p>\n","type":"number","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#saveinterval"},{"name":"enterKey","description":"<p>Specifies the tag to be inserted when the enter key is pressed.</p>\n<ul>\n<li><code>P</code>: Pressing enter inserts a <code>p</code> tag. The default value will be <code>&lt;p&gt;&lt;br&gt;&lt;/p&gt;</code>.</li>\n<li><code>DIV</code>: Inserts a <code>div</code> tag instead of the default <code>P</code> tag.</li>\n<li><code>BR</code>: Inserts a <code>br</code> tag instead of the default <code>P</code> tag.</li>\n</ul>\n","type":"EnterKey","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#enterkey"},{"name":"shiftEnterKey","description":"<p>Specifies tags to be inserted when the Shift + Enter keys are pressed.</p>\n<ul>\n<li><code>BR</code> - When the Shift + Enter key is pressed, a <code>br</code> tag will be inserted, which is the default behavior.</li>\n<li><code>P</code> - When the Shift + Enter key is pressed, a <code>p</code> tag will be inserted instead of the default <code>br</code> tag.</li>\n<li><code>DIV</code> - When the Shift + Enter key is pressed, a <code>div</code> tag will be inserted instead of the default <code>br</code> tag.</li>\n</ul>\n","type":"ShiftEnterKey","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#shiftenterkey"}],"richtexteditor/client-side-events":[{"name":"Inject","description":"<p>Dynamically injects the required modules to the component.</p>\n","type":"Method","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#inject"},{"name":"toolbarSettings","description":"<p>Specifies the configuration for the toolbar, including the alignment and rendering type.\nBy default, the toolbar floats at the top of the RichTextEditor.\nWhen you scroll down, the toolbar will move with the page applying the specified offset.\nProperties:</p>\n<ul>\n<li>\n<p>enable: A boolean value to show or hide the toolbar.</p>\n</li>\n<li>\n<p>enableFloating: A boolean value to enable or disable the floating toolbar.\nThis keeps the toolbar fixed at the top of the RichTextEditor during scrolling.</p>\n</li>\n<li>\n<p>type: Defines the toolbar type, with the following options:</p>\n<ol>\n<li>Expand: Overflowing toolbar items are hidden and can be accessed by clicking the expand arrow.</li>\n<li>MultiRow: Overflowing toolbar items wrap into the next row.</li>\n<li>Scrollable: Toolbar items are on a single line and can be scrolled horizontally if they overflow.</li>\n</ol>\n</li>\n<li>\n<p>items: An array specifying the items aligned horizontally in the toolbar.</p>\n</li>\n</ul>\n<blockquote>\n<p>'|' and '-' can be used to insert vertical and horizontal separator lines in the toolbar.</p>\n</blockquote>\n<ul>\n<li>itemConfigs: Allows the modification of the default toolbar item configuration, such as the icon class.</li>\n</ul>\n<blockquote>\n<p>By default, the toolbar is rendered with a scrollable option on mobile devices and does not support other toolbar types.</p>\n</blockquote>\n","type":"ToolbarSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#toolbarsettings"},{"name":"created","description":"<p>This event triggers when the Rich Text Editor is rendered.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#created"},{"name":"actionBegin","description":"<p>This event triggers before executing a command via toolbar items.\nCancel this event to prevent the command from executing by setting the <code>cancel</code> argument to <code>true</code>.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#actionbegin"},{"name":"actionComplete","description":"<p>This event triggers after executing a command via toolbar items.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#actioncomplete"},{"name":"focus","description":"<p>This event triggers when the Rich Text Editor gains focus.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#focus"},{"name":"blur","description":"<p>This event triggers when the Rich Text Editor loses focus.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#blur"},{"name":"change","description":"<p>This event triggers when the Rich Text Editor loses focus and changes have been made to the content.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#change"},{"name":"toolbarClick","description":"<p>This event triggers when a Rich Text Editor toolbar item is clicked.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#toolbarclick"},{"name":"appendTo","description":"<p>Appends the control within the given HTML element</p>\n","type":"Method","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#appendto"}],"richtexteditor/blog-posting":[{"name":"Inject","description":"<p>Dynamically injects the required modules to the component.</p>\n","type":"Method","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#inject"},{"name":"placeholder","description":"<p>Specifies the placeholder text for the content area of the RichTextEditor when it is empty.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#placeholder"},{"name":"value","description":"<p>Specifies the initial content to be displayed in the RichTextEditor's content area. It should be a string.\nThe editor's content can also be dynamically loaded from a database, AJAX, etc.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#value"},{"name":"dataBind","description":"<p>When invoked, applies the pending property changes immediately to the component.</p>\n","type":"Method","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#databind"},{"name":"refresh","description":"<p>Applies all the pending property changes and render the component again.</p>\n","type":"Method","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#refresh"},{"name":"appendTo","description":"<p>Appends the control within the given HTML element</p>\n","type":"Method","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#appendto"}],"richtexteditor/auto-save":[{"name":"Inject","description":"<p>Dynamically injects the required modules to the component.</p>\n","type":"Method","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#inject"},{"name":"placeholder","description":"<p>Specifies the placeholder text for the content area of the RichTextEditor when it is empty.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#placeholder"},{"name":"saveInterval","description":"<p>Specifies the save interval in milliseconds for automatically saving the content.\nThe change event is triggered if the content changes from the last saved interval.</p>\n","type":"number","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#saveinterval"},{"name":"toolbarSettings","description":"<p>Specifies the configuration for the toolbar, including the alignment and rendering type.\nBy default, the toolbar floats at the top of the RichTextEditor.\nWhen you scroll down, the toolbar will move with the page applying the specified offset.\nProperties:</p>\n<ul>\n<li>\n<p>enable: A boolean value to show or hide the toolbar.</p>\n</li>\n<li>\n<p>enableFloating: A boolean value to enable or disable the floating toolbar.\nThis keeps the toolbar fixed at the top of the RichTextEditor during scrolling.</p>\n</li>\n<li>\n<p>type: Defines the toolbar type, with the following options:</p>\n<ol>\n<li>Expand: Overflowing toolbar items are hidden and can be accessed by clicking the expand arrow.</li>\n<li>MultiRow: Overflowing toolbar items wrap into the next row.</li>\n<li>Scrollable: Toolbar items are on a single line and can be scrolled horizontally if they overflow.</li>\n</ol>\n</li>\n<li>\n<p>items: An array specifying the items aligned horizontally in the toolbar.</p>\n</li>\n</ul>\n<blockquote>\n<p>'|' and '-' can be used to insert vertical and horizontal separator lines in the toolbar.</p>\n</blockquote>\n<ul>\n<li>itemConfigs: Allows the modification of the default toolbar item configuration, such as the icon class.</li>\n</ul>\n<blockquote>\n<p>By default, the toolbar is rendered with a scrollable option on mobile devices and does not support other toolbar types.</p>\n</blockquote>\n","type":"ToolbarSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#toolbarsettings"},{"name":"appendTo","description":"<p>Appends the control within the given HTML element</p>\n","type":"Method","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#appendto"}],"richtexteditor/file-browser":[{"name":"Inject","description":"<p>Dynamically injects the required modules to the component.</p>\n","type":"Method","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#inject"},{"name":"toolbarSettings","description":"<p>Specifies the configuration for the toolbar, including the alignment and rendering type.\nBy default, the toolbar floats at the top of the RichTextEditor.\nWhen you scroll down, the toolbar will move with the page applying the specified offset.\nProperties:</p>\n<ul>\n<li>\n<p>enable: A boolean value to show or hide the toolbar.</p>\n</li>\n<li>\n<p>enableFloating: A boolean value to enable or disable the floating toolbar.\nThis keeps the toolbar fixed at the top of the RichTextEditor during scrolling.</p>\n</li>\n<li>\n<p>type: Defines the toolbar type, with the following options:</p>\n<ol>\n<li>Expand: Overflowing toolbar items are hidden and can be accessed by clicking the expand arrow.</li>\n<li>MultiRow: Overflowing toolbar items wrap into the next row.</li>\n<li>Scrollable: Toolbar items are on a single line and can be scrolled horizontally if they overflow.</li>\n</ol>\n</li>\n<li>\n<p>items: An array specifying the items aligned horizontally in the toolbar.</p>\n</li>\n</ul>\n<blockquote>\n<p>'|' and '-' can be used to insert vertical and horizontal separator lines in the toolbar.</p>\n</blockquote>\n<ul>\n<li>itemConfigs: Allows the modification of the default toolbar item configuration, such as the icon class.</li>\n</ul>\n<blockquote>\n<p>By default, the toolbar is rendered with a scrollable option on mobile devices and does not support other toolbar types.</p>\n</blockquote>\n","type":"ToolbarSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#toolbarsettings"},{"name":"fileManagerSettings","description":"<p>Defines image manager options in the Rich Text Editor with the following attributes:</p>\n<ul>\n<li><code>enable</code>: Boolean to enable or disable the image manager.</li>\n<li><code>ajaxSettings</code>: Configures AJAX settings for image handling.</li>\n<li><code>contextMenuSettings</code>: Manages context menu availability and options.</li>\n<li><code>navigationPaneSettings</code>: Sets up the navigation pane display and contents.</li>\n<li><code>toolbarSettings</code>: Specifies toolbar configuration and visible items.</li>\n<li><code>uploadSettings</code>: Manages upload-specific configurations.</li>\n</ul>\n","type":"FileManagerSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#filemanagersettings"},{"name":"appendTo","description":"<p>Appends the control within the given HTML element</p>\n","type":"Method","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#appendto"}],"richtexteditor/insert-emoticons":[{"name":"Inject","description":"<p>Dynamically injects the required modules to the component.</p>\n","type":"Method","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#inject"},{"name":"toolbarSettings","description":"<p>Specifies the configuration for the toolbar, including the alignment and rendering type.\nBy default, the toolbar floats at the top of the RichTextEditor.\nWhen you scroll down, the toolbar will move with the page applying the specified offset.\nProperties:</p>\n<ul>\n<li>\n<p>enable: A boolean value to show or hide the toolbar.</p>\n</li>\n<li>\n<p>enableFloating: A boolean value to enable or disable the floating toolbar.\nThis keeps the toolbar fixed at the top of the RichTextEditor during scrolling.</p>\n</li>\n<li>\n<p>type: Defines the toolbar type, with the following options:</p>\n<ol>\n<li>Expand: Overflowing toolbar items are hidden and can be accessed by clicking the expand arrow.</li>\n<li>MultiRow: Overflowing toolbar items wrap into the next row.</li>\n<li>Scrollable: Toolbar items are on a single line and can be scrolled horizontally if they overflow.</li>\n</ol>\n</li>\n<li>\n<p>items: An array specifying the items aligned horizontally in the toolbar.</p>\n</li>\n</ul>\n<blockquote>\n<p>'|' and '-' can be used to insert vertical and horizontal separator lines in the toolbar.</p>\n</blockquote>\n<ul>\n<li>itemConfigs: Allows the modification of the default toolbar item configuration, such as the icon class.</li>\n</ul>\n<blockquote>\n<p>By default, the toolbar is rendered with a scrollable option on mobile devices and does not support other toolbar types.</p>\n</blockquote>\n","type":"ToolbarSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#toolbarsettings"},{"name":"value","description":"<p>Specifies the initial content to be displayed in the RichTextEditor's content area. It should be a string.\nThe editor's content can also be dynamically loaded from a database, AJAX, etc.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#value"},{"name":"created","description":"<p>This event triggers when the Rich Text Editor is rendered.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#created"},{"name":"appendTo","description":"<p>Appends the control within the given HTML element</p>\n","type":"Method","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#appendto"}],"richtexteditor/online-html-editor":[{"name":"Inject","description":"<p>Dynamically injects the required modules to the component.</p>\n","type":"Method","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#inject"},{"name":"toolbarSettings","description":"<p>Specifies the configuration for the toolbar, including the alignment and rendering type.\nBy default, the toolbar floats at the top of the RichTextEditor.\nWhen you scroll down, the toolbar will move with the page applying the specified offset.\nProperties:</p>\n<ul>\n<li>\n<p>enable: A boolean value to show or hide the toolbar.</p>\n</li>\n<li>\n<p>enableFloating: A boolean value to enable or disable the floating toolbar.\nThis keeps the toolbar fixed at the top of the RichTextEditor during scrolling.</p>\n</li>\n<li>\n<p>type: Defines the toolbar type, with the following options:</p>\n<ol>\n<li>Expand: Overflowing toolbar items are hidden and can be accessed by clicking the expand arrow.</li>\n<li>MultiRow: Overflowing toolbar items wrap into the next row.</li>\n<li>Scrollable: Toolbar items are on a single line and can be scrolled horizontally if they overflow.</li>\n</ol>\n</li>\n<li>\n<p>items: An array specifying the items aligned horizontally in the toolbar.</p>\n</li>\n</ul>\n<blockquote>\n<p>'|' and '-' can be used to insert vertical and horizontal separator lines in the toolbar.</p>\n</blockquote>\n<ul>\n<li>itemConfigs: Allows the modification of the default toolbar item configuration, such as the icon class.</li>\n</ul>\n<blockquote>\n<p>By default, the toolbar is rendered with a scrollable option on mobile devices and does not support other toolbar types.</p>\n</blockquote>\n","type":"ToolbarSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#toolbarsettings"},{"name":"appendTo","description":"<p>Appends the control within the given HTML element</p>\n","type":"Method","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#appendto"}],"richtexteditor/image-editor-integration":[{"name":"Inject","description":"<p>Dynamically injects the required modules to the component.</p>\n","type":"Method","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#inject"},{"name":"quickToolbarSettings","description":"<p>Specifies the items to be rendered in the quick toolbar based on the target element.\nProperties:</p>\n<ul>\n<li>enable: Boolean to show or hide the quick toolbar.</li>\n<li>actionOnScroll: Options for quick toolbar behavior on scroll:\n<ol>\n<li>hide: The quick toolbar closes when the parent element is scrolled.</li>\n<li>none: The quick toolbar stays open even if the parent element is scrolled.</li>\n</ol>\n</li>\n<li>link: Specifies items in the quick toolbar for links ('Open', 'Edit', 'UnLink').</li>\n<li>image: Specifies items in the quick toolbar for images ('Replace', 'Align', 'Caption', 'Remove', 'InsertLink', 'Display', 'AltText', 'Dimension').</li>\n<li>text: Specifies items in the quick toolbar for text ('Cut', 'Copy', 'Paste').</li>\n<li>audio: Specifies items for audio ('AudioReplace', 'AudioRemove', 'AudioLayoutOption').</li>\n<li>video: Specifies items for video ('VideoReplace', 'VideoAlign', 'VideoRemove', 'VideoLayoutOption', 'VideoDimension').</li>\n</ul>\n","type":"QuickToolbarSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#quicktoolbarsettings"},{"name":"actionBegin","description":"<p>This event triggers before executing a command via toolbar items.\nCancel this event to prevent the command from executing by setting the <code>cancel</code> argument to <code>true</code>.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#actionbegin"},{"name":"placeholder","description":"<p>Specifies the placeholder text for the content area of the RichTextEditor when it is empty.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#placeholder"},{"name":"appendTo","description":"<p>Appends the control within the given HTML element</p>\n","type":"Method","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#appendto"}],"richtexteditor/mail-merge":[{"name":"Inject","description":"<p>Dynamically injects the required modules to the component.</p>\n","type":"Method","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#inject"},{"name":"toolbarSettings","description":"<p>Specifies the configuration for the toolbar, including the alignment and rendering type.\nBy default, the toolbar floats at the top of the RichTextEditor.\nWhen you scroll down, the toolbar will move with the page applying the specified offset.\nProperties:</p>\n<ul>\n<li>\n<p>enable: A boolean value to show or hide the toolbar.</p>\n</li>\n<li>\n<p>enableFloating: A boolean value to enable or disable the floating toolbar.\nThis keeps the toolbar fixed at the top of the RichTextEditor during scrolling.</p>\n</li>\n<li>\n<p>type: Defines the toolbar type, with the following options:</p>\n<ol>\n<li>Expand: Overflowing toolbar items are hidden and can be accessed by clicking the expand arrow.</li>\n<li>MultiRow: Overflowing toolbar items wrap into the next row.</li>\n<li>Scrollable: Toolbar items are on a single line and can be scrolled horizontally if they overflow.</li>\n</ol>\n</li>\n<li>\n<p>items: An array specifying the items aligned horizontally in the toolbar.</p>\n</li>\n</ul>\n<blockquote>\n<p>'|' and '-' can be used to insert vertical and horizontal separator lines in the toolbar.</p>\n</blockquote>\n<ul>\n<li>itemConfigs: Allows the modification of the default toolbar item configuration, such as the icon class.</li>\n</ul>\n<blockquote>\n<p>By default, the toolbar is rendered with a scrollable option on mobile devices and does not support other toolbar types.</p>\n</blockquote>\n","type":"ToolbarSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#toolbarsettings"},{"name":"fileManagerSettings","description":"<p>Defines image manager options in the Rich Text Editor with the following attributes:</p>\n<ul>\n<li><code>enable</code>: Boolean to enable or disable the image manager.</li>\n<li><code>ajaxSettings</code>: Configures AJAX settings for image handling.</li>\n<li><code>contextMenuSettings</code>: Manages context menu availability and options.</li>\n<li><code>navigationPaneSettings</code>: Sets up the navigation pane display and contents.</li>\n<li><code>toolbarSettings</code>: Specifies toolbar configuration and visible items.</li>\n<li><code>uploadSettings</code>: Manages upload-specific configurations.</li>\n</ul>\n","type":"FileManagerSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#filemanagersettings"},{"name":"appendTo","description":"<p>Appends the control within the given HTML element</p>\n","type":"Method","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#appendto"}],"richtexteditor/export-document":[{"name":"Inject","description":"<p>Dynamically injects the required modules to the component.</p>\n","type":"Method","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#inject"},{"name":"toolbarSettings","description":"<p>Specifies the configuration for the toolbar, including the alignment and rendering type.\nBy default, the toolbar floats at the top of the RichTextEditor.\nWhen you scroll down, the toolbar will move with the page applying the specified offset.\nProperties:</p>\n<ul>\n<li>\n<p>enable: A boolean value to show or hide the toolbar.</p>\n</li>\n<li>\n<p>enableFloating: A boolean value to enable or disable the floating toolbar.\nThis keeps the toolbar fixed at the top of the RichTextEditor during scrolling.</p>\n</li>\n<li>\n<p>type: Defines the toolbar type, with the following options:</p>\n<ol>\n<li>Expand: Overflowing toolbar items are hidden and can be accessed by clicking the expand arrow.</li>\n<li>MultiRow: Overflowing toolbar items wrap into the next row.</li>\n<li>Scrollable: Toolbar items are on a single line and can be scrolled horizontally if they overflow.</li>\n</ol>\n</li>\n<li>\n<p>items: An array specifying the items aligned horizontally in the toolbar.</p>\n</li>\n</ul>\n<blockquote>\n<p>'|' and '-' can be used to insert vertical and horizontal separator lines in the toolbar.</p>\n</blockquote>\n<ul>\n<li>itemConfigs: Allows the modification of the default toolbar item configuration, such as the icon class.</li>\n</ul>\n<blockquote>\n<p>By default, the toolbar is rendered with a scrollable option on mobile devices and does not support other toolbar types.</p>\n</blockquote>\n","type":"ToolbarSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#toolbarsettings"},{"name":"exportWord","description":"<p>Defines file export options for the Rich Text Editor with properties like:</p>\n<ul>\n<li><code>serviceurl</code>: The URL utilized for exporting editor content to Word files.</li>\n<li><code>fileName</code>: Designates the default name for exported Word files.</li>\n<li><code>stylesheet</code>: Applies a stylesheet to the exported Word file.</li>\n</ul>\n","type":"ExportWordModel","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#exportword"},{"name":"exportPdf","description":"<p>Describes file export options to PDF in the Rich Text Editor, such as:</p>\n<ul>\n<li><code>serviceurl</code>: URL used for exporting content to PDF format.</li>\n<li><code>fileName</code>: Specifies the default PDF file name upon export.</li>\n<li><code>stylesheet</code>: Applies a stylesheet to the exported PDF file.</li>\n</ul>\n","type":"ExportPdfModel","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#exportpdf"},{"name":"enableXhtml","description":"<p>Indicates whether XHTML is enabled or not.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#enablexhtml"},{"name":"insertImageSettings","description":"<p>Specifies the options for inserting images in the Rich Text Editor. Includes properties such as:</p>\n<ul>\n<li><code>allowedTypes</code>: Specifies the allowed image file extensions as a comma-separated list (e.g., '.jpg', '.png').</li>\n<li><code>display</code>: Sets the default display mode for an inserted image, either 'inline' or 'block'.</li>\n<li><code>width</code>: Specifies the default width for an inserted image.</li>\n<li><code>saveFormat</code>: Indicates the format for storing images in the editor (Base64 or Blob).\n<blockquote>\n<p>Select Base64 for numerous small images without a specific physical storage location.</p>\n</blockquote>\n</li>\n<li><code>height</code>: Defines the default height for an inserted image.</li>\n<li><code>saveUrl</code>: Specifies the URL for the service that handles image upload and storage on the server.</li>\n<li><code>path</code>: Determines the storage location for images and their display path.</li>\n</ul>\n","type":"ImageSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#insertimagesettings"},{"name":"value","description":"<p>Specifies the initial content to be displayed in the RichTextEditor's content area. It should be a string.\nThe editor's content can also be dynamically loaded from a database, AJAX, etc.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#value"}],"richtexteditor/import-word":[{"name":"Inject","description":"<p>Dynamically injects the required modules to the component.</p>\n","type":"Method","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#inject"},{"name":"toolbarSettings","description":"<p>Specifies the configuration for the toolbar, including the alignment and rendering type.\nBy default, the toolbar floats at the top of the RichTextEditor.\nWhen you scroll down, the toolbar will move with the page applying the specified offset.\nProperties:</p>\n<ul>\n<li>\n<p>enable: A boolean value to show or hide the toolbar.</p>\n</li>\n<li>\n<p>enableFloating: A boolean value to enable or disable the floating toolbar.\nThis keeps the toolbar fixed at the top of the RichTextEditor during scrolling.</p>\n</li>\n<li>\n<p>type: Defines the toolbar type, with the following options:</p>\n<ol>\n<li>Expand: Overflowing toolbar items are hidden and can be accessed by clicking the expand arrow.</li>\n<li>MultiRow: Overflowing toolbar items wrap into the next row.</li>\n<li>Scrollable: Toolbar items are on a single line and can be scrolled horizontally if they overflow.</li>\n</ol>\n</li>\n<li>\n<p>items: An array specifying the items aligned horizontally in the toolbar.</p>\n</li>\n</ul>\n<blockquote>\n<p>'|' and '-' can be used to insert vertical and horizontal separator lines in the toolbar.</p>\n</blockquote>\n<ul>\n<li>itemConfigs: Allows the modification of the default toolbar item configuration, such as the icon class.</li>\n</ul>\n<blockquote>\n<p>By default, the toolbar is rendered with a scrollable option on mobile devices and does not support other toolbar types.</p>\n</blockquote>\n","type":"ToolbarSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#toolbarsettings"},{"name":"importWord","description":"<p>Configures the options for importing Word files in the Rich Text Editor component.\nThe <code>serviceUrl</code> property specifies the server endpoint URL where the uploaded Word file will be processed.</p>\n","type":"ImportWordModel","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#importword"},{"name":"enableXhtml","description":"<p>Indicates whether XHTML is enabled or not.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#enablexhtml"},{"name":"insertImageSettings","description":"<p>Specifies the options for inserting images in the Rich Text Editor. Includes properties such as:</p>\n<ul>\n<li><code>allowedTypes</code>: Specifies the allowed image file extensions as a comma-separated list (e.g., '.jpg', '.png').</li>\n<li><code>display</code>: Sets the default display mode for an inserted image, either 'inline' or 'block'.</li>\n<li><code>width</code>: Specifies the default width for an inserted image.</li>\n<li><code>saveFormat</code>: Indicates the format for storing images in the editor (Base64 or Blob).\n<blockquote>\n<p>Select Base64 for numerous small images without a specific physical storage location.</p>\n</blockquote>\n</li>\n<li><code>height</code>: Defines the default height for an inserted image.</li>\n<li><code>saveUrl</code>: Specifies the URL for the service that handles image upload and storage on the server.</li>\n<li><code>path</code>: Determines the storage location for images and their display path.</li>\n</ul>\n","type":"ImageSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#insertimagesettings"},{"name":"value","description":"<p>Specifies the initial content to be displayed in the RichTextEditor's content area. It should be a string.\nThe editor's content can also be dynamically loaded from a database, AJAX, etc.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#value"}],"richtexteditor/mention-integration":[{"name":"Inject","description":"<p>Dynamically injects the required modules to the component.</p>\n","type":"Method","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#inject"},{"name":"quickToolbarSettings","description":"<p>Specifies the items to be rendered in the quick toolbar based on the target element.\nProperties:</p>\n<ul>\n<li>enable: Boolean to show or hide the quick toolbar.</li>\n<li>actionOnScroll: Options for quick toolbar behavior on scroll:\n<ol>\n<li>hide: The quick toolbar closes when the parent element is scrolled.</li>\n<li>none: The quick toolbar stays open even if the parent element is scrolled.</li>\n</ol>\n</li>\n<li>link: Specifies items in the quick toolbar for links ('Open', 'Edit', 'UnLink').</li>\n<li>image: Specifies items in the quick toolbar for images ('Replace', 'Align', 'Caption', 'Remove', 'InsertLink', 'Display', 'AltText', 'Dimension').</li>\n<li>text: Specifies items in the quick toolbar for text ('Cut', 'Copy', 'Paste').</li>\n<li>audio: Specifies items for audio ('AudioReplace', 'AudioRemove', 'AudioLayoutOption').</li>\n<li>video: Specifies items for video ('VideoReplace', 'VideoAlign', 'VideoRemove', 'VideoLayoutOption', 'VideoDimension').</li>\n</ul>\n","type":"QuickToolbarSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#quicktoolbarsettings"},{"name":"actionBegin","description":"<p>This event triggers before executing a command via toolbar items.\nCancel this event to prevent the command from executing by setting the <code>cancel</code> argument to <code>true</code>.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#actionbegin"},{"name":"placeholder","description":"<p>Specifies the placeholder text for the content area of the RichTextEditor when it is empty.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#placeholder"},{"name":"appendTo","description":"<p>Appends the control within the given HTML element</p>\n","type":"Method","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#appendto"}],"richtexteditor/smart-suggestion":[{"name":"Inject","description":"<p>Dynamically injects the required modules to the component.</p>\n","type":"Method","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#inject"},{"name":"toolbarSettings","description":"<p>Specifies the configuration for the toolbar, including the alignment and rendering type.\nBy default, the toolbar floats at the top of the RichTextEditor.\nWhen you scroll down, the toolbar will move with the page applying the specified offset.\nProperties:</p>\n<ul>\n<li>\n<p>enable: A boolean value to show or hide the toolbar.</p>\n</li>\n<li>\n<p>enableFloating: A boolean value to enable or disable the floating toolbar.\nThis keeps the toolbar fixed at the top of the RichTextEditor during scrolling.</p>\n</li>\n<li>\n<p>type: Defines the toolbar type, with the following options:</p>\n<ol>\n<li>Expand: Overflowing toolbar items are hidden and can be accessed by clicking the expand arrow.</li>\n<li>MultiRow: Overflowing toolbar items wrap into the next row.</li>\n<li>Scrollable: Toolbar items are on a single line and can be scrolled horizontally if they overflow.</li>\n</ol>\n</li>\n<li>\n<p>items: An array specifying the items aligned horizontally in the toolbar.</p>\n</li>\n</ul>\n<blockquote>\n<p>'|' and '-' can be used to insert vertical and horizontal separator lines in the toolbar.</p>\n</blockquote>\n<ul>\n<li>itemConfigs: Allows the modification of the default toolbar item configuration, such as the icon class.</li>\n</ul>\n<blockquote>\n<p>By default, the toolbar is rendered with a scrollable option on mobile devices and does not support other toolbar types.</p>\n</blockquote>\n","type":"ToolbarSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#toolbarsettings"},{"name":"slashMenuSettings","description":"<p>Configuration options for the slash menu feature in the Editor, used to display a mention popup.\nProperties:</p>\n<ul>\n<li>enable: A boolean indicating whether the slash menu is enabled in the Editor.</li>\n<li>items: An array specifying the list of items to be displayed in the slash menu.</li>\n<li>popupWidth: Defines the width of the slash menu popup. Accepts values in pixels, numbers, or percentages. Numeric values are treated as pixels.</li>\n<li>popupHeight: Defines the height of the slash menu popup. Accepts values in pixels, numbers, or percentages. Numeric values are treated as pixels.</li>\n</ul>\n","type":"SlashMenuSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#slashmenusettings"},{"name":"slashMenuItemSelect","description":"<p>This event triggers when a slash menu item in the popup is selected by the user using mouse, tap, or keyboard navigation.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#slashmenuitemselect"},{"name":"placeholder","description":"<p>Specifies the placeholder text for the content area of the RichTextEditor when it is empty.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#placeholder"}],"richtexteditor/types":[{"name":"Inject","description":"<p>Dynamically injects the required modules to the component.</p>\n","type":"Method","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#inject"},{"name":"floatingToolbarOffset","description":"<p>Keeps the toolbar fixed at the top of the Rich Text Editor during scrolling and specifies the\ntoolbar's offset from the document's top position.</p>\n","type":"number","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#floatingtoolbaroffset"},{"name":"toolbarSettings","description":"<p>Specifies the configuration for the toolbar, including the alignment and rendering type.\nBy default, the toolbar floats at the top of the RichTextEditor.\nWhen you scroll down, the toolbar will move with the page applying the specified offset.\nProperties:</p>\n<ul>\n<li>\n<p>enable: A boolean value to show or hide the toolbar.</p>\n</li>\n<li>\n<p>enableFloating: A boolean value to enable or disable the floating toolbar.\nThis keeps the toolbar fixed at the top of the RichTextEditor during scrolling.</p>\n</li>\n<li>\n<p>type: Defines the toolbar type, with the following options:</p>\n<ol>\n<li>Expand: Overflowing toolbar items are hidden and can be accessed by clicking the expand arrow.</li>\n<li>MultiRow: Overflowing toolbar items wrap into the next row.</li>\n<li>Scrollable: Toolbar items are on a single line and can be scrolled horizontally if they overflow.</li>\n</ol>\n</li>\n<li>\n<p>items: An array specifying the items aligned horizontally in the toolbar.</p>\n</li>\n</ul>\n<blockquote>\n<p>'|' and '-' can be used to insert vertical and horizontal separator lines in the toolbar.</p>\n</blockquote>\n<ul>\n<li>itemConfigs: Allows the modification of the default toolbar item configuration, such as the icon class.</li>\n</ul>\n<blockquote>\n<p>By default, the toolbar is rendered with a scrollable option on mobile devices and does not support other toolbar types.</p>\n</blockquote>\n","type":"ToolbarSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#toolbarsettings"},{"name":"actionBegin","description":"<p>This event triggers before executing a command via toolbar items.\nCancel this event to prevent the command from executing by setting the <code>cancel</code> argument to <code>true</code>.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#actionbegin"},{"name":"actionComplete","description":"<p>This event triggers after executing a command via toolbar items.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#actioncomplete"},{"name":"dataBind","description":"<p>When invoked, applies the pending property changes immediately to the component.</p>\n","type":"Method","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#databind"},{"name":"appendTo","description":"<p>Appends the control within the given HTML element</p>\n","type":"Method","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#appendto"}],"richtexteditor/quick-format-toolbar":[{"name":"Inject","description":"<p>Dynamically injects the required modules to the component.</p>\n","type":"Method","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#inject"},{"name":"quickToolbarSettings","description":"<p>Specifies the items to be rendered in the quick toolbar based on the target element.\nProperties:</p>\n<ul>\n<li>enable: Boolean to show or hide the quick toolbar.</li>\n<li>actionOnScroll: Options for quick toolbar behavior on scroll:\n<ol>\n<li>hide: The quick toolbar closes when the parent element is scrolled.</li>\n<li>none: The quick toolbar stays open even if the parent element is scrolled.</li>\n</ol>\n</li>\n<li>link: Specifies items in the quick toolbar for links ('Open', 'Edit', 'UnLink').</li>\n<li>image: Specifies items in the quick toolbar for images ('Replace', 'Align', 'Caption', 'Remove', 'InsertLink', 'Display', 'AltText', 'Dimension').</li>\n<li>text: Specifies items in the quick toolbar for text ('Cut', 'Copy', 'Paste').</li>\n<li>audio: Specifies items for audio ('AudioReplace', 'AudioRemove', 'AudioLayoutOption').</li>\n<li>video: Specifies items for video ('VideoReplace', 'VideoAlign', 'VideoRemove', 'VideoLayoutOption', 'VideoDimension').</li>\n</ul>\n","type":"QuickToolbarSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#quicktoolbarsettings"},{"name":"toolbarSettings","description":"<p>Specifies the configuration for the toolbar, including the alignment and rendering type.\nBy default, the toolbar floats at the top of the RichTextEditor.\nWhen you scroll down, the toolbar will move with the page applying the specified offset.\nProperties:</p>\n<ul>\n<li>\n<p>enable: A boolean value to show or hide the toolbar.</p>\n</li>\n<li>\n<p>enableFloating: A boolean value to enable or disable the floating toolbar.\nThis keeps the toolbar fixed at the top of the RichTextEditor during scrolling.</p>\n</li>\n<li>\n<p>type: Defines the toolbar type, with the following options:</p>\n<ol>\n<li>Expand: Overflowing toolbar items are hidden and can be accessed by clicking the expand arrow.</li>\n<li>MultiRow: Overflowing toolbar items wrap into the next row.</li>\n<li>Scrollable: Toolbar items are on a single line and can be scrolled horizontally if they overflow.</li>\n</ol>\n</li>\n<li>\n<p>items: An array specifying the items aligned horizontally in the toolbar.</p>\n</li>\n</ul>\n<blockquote>\n<p>'|' and '-' can be used to insert vertical and horizontal separator lines in the toolbar.</p>\n</blockquote>\n<ul>\n<li>itemConfigs: Allows the modification of the default toolbar item configuration, such as the icon class.</li>\n</ul>\n<blockquote>\n<p>By default, the toolbar is rendered with a scrollable option on mobile devices and does not support other toolbar types.</p>\n</blockquote>\n","type":"ToolbarSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#toolbarsettings"},{"name":"dataBind","description":"<p>When invoked, applies the pending property changes immediately to the component.</p>\n","type":"Method","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#databind"},{"name":"appendTo","description":"<p>Appends the control within the given HTML element</p>\n","type":"Method","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#appendto"}],"richtexteditor/insert-special-characters":[{"name":"Inject","description":"<p>Dynamically injects the required modules to the component.</p>\n","type":"Method","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#inject"},{"name":"toolbarSettings","description":"<p>Specifies the configuration for the toolbar, including the alignment and rendering type.\nBy default, the toolbar floats at the top of the RichTextEditor.\nWhen you scroll down, the toolbar will move with the page applying the specified offset.\nProperties:</p>\n<ul>\n<li>\n<p>enable: A boolean value to show or hide the toolbar.</p>\n</li>\n<li>\n<p>enableFloating: A boolean value to enable or disable the floating toolbar.\nThis keeps the toolbar fixed at the top of the RichTextEditor during scrolling.</p>\n</li>\n<li>\n<p>type: Defines the toolbar type, with the following options:</p>\n<ol>\n<li>Expand: Overflowing toolbar items are hidden and can be accessed by clicking the expand arrow.</li>\n<li>MultiRow: Overflowing toolbar items wrap into the next row.</li>\n<li>Scrollable: Toolbar items are on a single line and can be scrolled horizontally if they overflow.</li>\n</ol>\n</li>\n<li>\n<p>items: An array specifying the items aligned horizontally in the toolbar.</p>\n</li>\n</ul>\n<blockquote>\n<p>'|' and '-' can be used to insert vertical and horizontal separator lines in the toolbar.</p>\n</blockquote>\n<ul>\n<li>itemConfigs: Allows the modification of the default toolbar item configuration, such as the icon class.</li>\n</ul>\n<blockquote>\n<p>By default, the toolbar is rendered with a scrollable option on mobile devices and does not support other toolbar types.</p>\n</blockquote>\n","type":"ToolbarSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#toolbarsettings"},{"name":"value","description":"<p>Specifies the initial content to be displayed in the RichTextEditor's content area. It should be a string.\nThe editor's content can also be dynamically loaded from a database, AJAX, etc.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#value"},{"name":"created","description":"<p>This event triggers when the Rich Text Editor is rendered.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#created"},{"name":"appendTo","description":"<p>Appends the control within the given HTML element</p>\n","type":"Method","link":"//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#appendto"}],"schedule/overview":[{"name":"height","description":"<p>Sets the <code>height</code> of the Schedule component, accepting both string and number values.</p>\n<p>The string type includes either pixel or percentage values.\nWhen <code>height</code> is set with specific pixel value, then the Schedule will be rendered to that specified space.\nIn case, if <code>auto</code> value is set, then the height of the Schedule gets auto-adjusted within the given container.</p>\n","type":"string|number","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#height"},{"name":"eventSettings","description":"<p>Complete set of settings related to Schedule events to bind it to local or remote dataSource, map applicable database fields and\nother validation to be carried out on the available fields.</p>\n","type":"EventSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#eventsettings"},{"name":"selectedDate","description":"<p>To mark the active (current) date on the Schedule, <code>selectedDate</code> property can be defined.\nUsually, it defaults to the current System date.</p>\n","type":"Date","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#selecteddate"},{"name":"cssClass","description":"<p>It is used to customize the Schedule which accepts custom CSS class names that defines specific user-defined styles and themes\nto be applied on the Schedule element.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#cssclass"},{"name":"views","description":"<p>This property holds the views collection and its configurations. It accepts either the array of view names or the array of view\nobjects that holds different configurations for each views. By default,\nSchedule displays all the views namely <code>Day</code>, <code>Week</code>, <code>Work Week</code>, <code>Month</code> and <code>Agenda</code>.\nExample for array of views:</p>\n<p>Example for array of view objects:</p>\n","type":"View[]|ViewsModel[]","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#views"},{"name":"timezone","description":"<p>Schedule will be assigned with specific timezone, so as to display the events in it accordingly. By default,\nSchedule dates are processed with System timezone, as no timezone will be assigned specifically to the Schedule at the initial time.\nWhenever the Schedule is bound to remote data services, it is always recommended to set specific timezone to Schedule to make the\nevents on it to display on the same time irrespective of the system timezone. It usually accepts\nthe valid <a href=\"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\">IANA</a> timezone names.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#timezone"},{"name":"group","description":"<p>Allows defining the group related settings of multiple resources. When this property is non-empty, it means\nthat the resources will be grouped on the schedule layout based on the provided resource names.</p>\n","type":"GroupModel","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#group"},{"name":"resources","description":"<p>Allows defining the collection of resources to be displayed on the Schedule. The resource collection needs to be defined\nwith unique resource names to identify it along with the respective dataSource and field mapping options.</p>\n","type":"ResourcesModel[]","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#resources"},{"name":"dateHeaderTemplate","description":"<p>It accepts either the string or HTMLElement as template design content and parse it appropriately before displaying it onto\nthe date header cells. The field that can be accessed via this template is <code>date</code>.</p>\n","type":"string|Function","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#dateheadertemplate"},{"name":"timeScale","description":"<p>Allows to set different time duration on Schedule along with the customized grid count. It also has template option to\ncustomize the time slots with required time values in its own format.</p>\n","type":"TimeScaleModel","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#timescale"},{"name":"rowAutoHeight","description":"<p>when set to <code>true</code>, allows the height of the work-cells to adjust automatically\nbased on the number of appointments present in those time ranges.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#rowautoheight"}],"schedule/default":[{"name":"height","description":"<p>Sets the <code>height</code> of the Schedule component, accepting both string and number values.</p>\n<p>The string type includes either pixel or percentage values.\nWhen <code>height</code> is set with specific pixel value, then the Schedule will be rendered to that specified space.\nIn case, if <code>auto</code> value is set, then the height of the Schedule gets auto-adjusted within the given container.</p>\n","type":"string|number","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#height"},{"name":"eventSettings","description":"<p>Complete set of settings related to Schedule events to bind it to local or remote dataSource, map applicable database fields and\nother validation to be carried out on the available fields.</p>\n","type":"EventSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#eventsettings"},{"name":"selectedDate","description":"<p>To mark the active (current) date on the Schedule, <code>selectedDate</code> property can be defined.\nUsually, it defaults to the current System date.</p>\n","type":"Date","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#selecteddate"}],"schedule/holiday-calendar":[{"name":"height","description":"<p>Sets the <code>height</code> of the Schedule component, accepting both string and number values.</p>\n<p>The string type includes either pixel or percentage values.\nWhen <code>height</code> is set with specific pixel value, then the Schedule will be rendered to that specified space.\nIn case, if <code>auto</code> value is set, then the height of the Schedule gets auto-adjusted within the given container.</p>\n","type":"string|number","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#height"},{"name":"eventSettings","description":"<p>Complete set of settings related to Schedule events to bind it to local or remote dataSource, map applicable database fields and\nother validation to be carried out on the available fields.</p>\n","type":"EventSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#eventsettings"},{"name":"selectedDate","description":"<p>To mark the active (current) date on the Schedule, <code>selectedDate</code> property can be defined.\nUsually, it defaults to the current System date.</p>\n","type":"Date","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#selecteddate"},{"name":"actionBegin","description":"<p>Triggers on beginning of every scheduler action.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#actionbegin"},{"name":"dragStop","description":"<p>Triggers when the dragging of appointment is stopped.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#dragstop"},{"name":"resizeStop","description":"<p>Triggers when the resizing of appointment is stopped.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#resizestop"}],"schedule/event-calendar":[{"name":"height","description":"<p>Sets the <code>height</code> of the Schedule component, accepting both string and number values.</p>\n<p>The string type includes either pixel or percentage values.\nWhen <code>height</code> is set with specific pixel value, then the Schedule will be rendered to that specified space.\nIn case, if <code>auto</code> value is set, then the height of the Schedule gets auto-adjusted within the given container.</p>\n","type":"string|number","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#height"},{"name":"eventSettings","description":"<p>Complete set of settings related to Schedule events to bind it to local or remote dataSource, map applicable database fields and\nother validation to be carried out on the available fields.</p>\n","type":"EventSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#eventsettings"},{"name":"selectedDate","description":"<p>To mark the active (current) date on the Schedule, <code>selectedDate</code> property can be defined.\nUsually, it defaults to the current System date.</p>\n","type":"Date","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#selecteddate"},{"name":"actionBegin","description":"<p>Triggers on beginning of every scheduler action.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#actionbegin"},{"name":"actionComplete","description":"<p>Triggers on successful completion of the scheduler actions.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#actioncomplete"},{"name":"currentView","description":"<p>To set the active view on scheduler, the <code>currentView</code> property can be used and it usually accepts either of the following available\nview options. The view option specified in this property will be initially loaded on the schedule.</p>\n<ul>\n<li><code>Day</code>: Denotes Day view of the scheduler.</li>\n<li><code>Week</code>: Denotes Week view of the scheduler.</li>\n<li><code>WorkWeek</code>: Denotes Work Week view of the scheduler.</li>\n<li><code>Month</code>: Denotes Month view of the scheduler.</li>\n<li><code>Year</code>: Denotes Year view of the scheduler.</li>\n<li><code>Agenda</code>: Denotes Agenda view of the scheduler.</li>\n<li><code>MonthAgenda</code>: Denotes Month Agenda view of the scheduler.</li>\n<li><code>TimelineDay</code>: Denotes Timeline Day view of the scheduler.</li>\n<li><code>TimelineWeek</code>: Denotes Timeline Week view of the scheduler.</li>\n<li><code>TimelineWorkWeek</code>: Denotes Timeline Work Week view of the scheduler.</li>\n<li><code>TimelineMonth</code>: Denotes Timeline Month view of the scheduler.</li>\n<li><code>TimelineYear</code>: Denotes Timeline Year view of the scheduler.</li>\n</ul>\n","type":"View","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#currentview"}],"schedule/local-data":[{"name":"eventSettings","description":"<p>Complete set of settings related to Schedule events to bind it to local or remote dataSource, map applicable database fields and\nother validation to be carried out on the available fields.</p>\n","type":"EventSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#eventsettings"},{"name":"selectedDate","description":"<p>To mark the active (current) date on the Schedule, <code>selectedDate</code> property can be defined.\nUsually, it defaults to the current System date.</p>\n","type":"Date","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#selecteddate"}],"schedule/remote-data":[{"name":"eventSettings","description":"<p>Complete set of settings related to Schedule events to bind it to local or remote dataSource, map applicable database fields and\nother validation to be carried out on the available fields.</p>\n","type":"EventSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#eventsettings"},{"name":"selectedDate","description":"<p>To mark the active (current) date on the Schedule, <code>selectedDate</code> property can be defined.\nUsually, it defaults to the current System date.</p>\n","type":"Date","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#selecteddate"}],"schedule/calendar-integration":[{"name":"eventSettings","description":"<p>Complete set of settings related to Schedule events to bind it to local or remote dataSource, map applicable database fields and\nother validation to be carried out on the available fields.</p>\n","type":"EventSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#eventsettings"},{"name":"dataBinding","description":"<p>Triggers before the data binds to the scheduler.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#databinding"},{"name":"selectedDate","description":"<p>To mark the active (current) date on the Schedule, <code>selectedDate</code> property can be defined.\nUsually, it defaults to the current System date.</p>\n","type":"Date","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#selecteddate"}],"schedule/realtime-binding":[{"name":"eventSettings","description":"<p>Complete set of settings related to Schedule events to bind it to local or remote dataSource, map applicable database fields and\nother validation to be carried out on the available fields.</p>\n","type":"EventSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#eventsettings"},{"name":"dataBinding","description":"<p>Triggers before the data binds to the scheduler.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#databinding"}],"schedule/recurrence-events":[{"name":"width","description":"<p>Sets the <code>width</code> of the Schedule component, accepting both string and number values.</p>\n<p>The string value can be either pixel or percentage format.\nWhen set to <code>auto</code>, the Schedule width gets auto-adjusted and display its content related to the viewable screen size.</p>\n","type":"string|number","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#width"},{"name":"height","description":"<p>Sets the <code>height</code> of the Schedule component, accepting both string and number values.</p>\n<p>The string type includes either pixel or percentage values.\nWhen <code>height</code> is set with specific pixel value, then the Schedule will be rendered to that specified space.\nIn case, if <code>auto</code> value is set, then the height of the Schedule gets auto-adjusted within the given container.</p>\n","type":"string|number","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#height"},{"name":"currentView","description":"<p>To set the active view on scheduler, the <code>currentView</code> property can be used and it usually accepts either of the following available\nview options. The view option specified in this property will be initially loaded on the schedule.</p>\n<ul>\n<li><code>Day</code>: Denotes Day view of the scheduler.</li>\n<li><code>Week</code>: Denotes Week view of the scheduler.</li>\n<li><code>WorkWeek</code>: Denotes Work Week view of the scheduler.</li>\n<li><code>Month</code>: Denotes Month view of the scheduler.</li>\n<li><code>Year</code>: Denotes Year view of the scheduler.</li>\n<li><code>Agenda</code>: Denotes Agenda view of the scheduler.</li>\n<li><code>MonthAgenda</code>: Denotes Month Agenda view of the scheduler.</li>\n<li><code>TimelineDay</code>: Denotes Timeline Day view of the scheduler.</li>\n<li><code>TimelineWeek</code>: Denotes Timeline Week view of the scheduler.</li>\n<li><code>TimelineWorkWeek</code>: Denotes Timeline Work Week view of the scheduler.</li>\n<li><code>TimelineMonth</code>: Denotes Timeline Month view of the scheduler.</li>\n<li><code>TimelineYear</code>: Denotes Timeline Year view of the scheduler.</li>\n</ul>\n","type":"View","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#currentview"},{"name":"selectedDate","description":"<p>To mark the active (current) date on the Schedule, <code>selectedDate</code> property can be defined.\nUsually, it defaults to the current System date.</p>\n","type":"Date","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#selecteddate"},{"name":"eventSettings","description":"<p>Complete set of settings related to Schedule events to bind it to local or remote dataSource, map applicable database fields and\nother validation to be carried out on the available fields.</p>\n","type":"EventSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#eventsettings"}],"schedule/block-events":[{"name":"width","description":"<p>Sets the <code>width</code> of the Schedule component, accepting both string and number values.</p>\n<p>The string value can be either pixel or percentage format.\nWhen set to <code>auto</code>, the Schedule width gets auto-adjusted and display its content related to the viewable screen size.</p>\n","type":"string|number","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#width"},{"name":"height","description":"<p>Sets the <code>height</code> of the Schedule component, accepting both string and number values.</p>\n<p>The string type includes either pixel or percentage values.\nWhen <code>height</code> is set with specific pixel value, then the Schedule will be rendered to that specified space.\nIn case, if <code>auto</code> value is set, then the height of the Schedule gets auto-adjusted within the given container.</p>\n","type":"string|number","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#height"},{"name":"currentView","description":"<p>To set the active view on scheduler, the <code>currentView</code> property can be used and it usually accepts either of the following available\nview options. The view option specified in this property will be initially loaded on the schedule.</p>\n<ul>\n<li><code>Day</code>: Denotes Day view of the scheduler.</li>\n<li><code>Week</code>: Denotes Week view of the scheduler.</li>\n<li><code>WorkWeek</code>: Denotes Work Week view of the scheduler.</li>\n<li><code>Month</code>: Denotes Month view of the scheduler.</li>\n<li><code>Year</code>: Denotes Year view of the scheduler.</li>\n<li><code>Agenda</code>: Denotes Agenda view of the scheduler.</li>\n<li><code>MonthAgenda</code>: Denotes Month Agenda view of the scheduler.</li>\n<li><code>TimelineDay</code>: Denotes Timeline Day view of the scheduler.</li>\n<li><code>TimelineWeek</code>: Denotes Timeline Week view of the scheduler.</li>\n<li><code>TimelineWorkWeek</code>: Denotes Timeline Work Week view of the scheduler.</li>\n<li><code>TimelineMonth</code>: Denotes Timeline Month view of the scheduler.</li>\n<li><code>TimelineYear</code>: Denotes Timeline Year view of the scheduler.</li>\n</ul>\n","type":"View","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#currentview"},{"name":"selectedDate","description":"<p>To mark the active (current) date on the Schedule, <code>selectedDate</code> property can be defined.\nUsually, it defaults to the current System date.</p>\n","type":"Date","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#selecteddate"},{"name":"eventSettings","description":"<p>Complete set of settings related to Schedule events to bind it to local or remote dataSource, map applicable database fields and\nother validation to be carried out on the available fields.</p>\n","type":"EventSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#eventsettings"},{"name":"group","description":"<p>Allows defining the group related settings of multiple resources. When this property is non-empty, it means\nthat the resources will be grouped on the schedule layout based on the provided resource names.</p>\n","type":"GroupModel","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#group"},{"name":"resources","description":"<p>Allows defining the collection of resources to be displayed on the Schedule. The resource collection needs to be defined\nwith unique resource names to identify it along with the respective dataSource and field mapping options.</p>\n","type":"ResourcesModel[]","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#resources"}],"schedule/search-events":[{"name":"height","description":"<p>Sets the <code>height</code> of the Schedule component, accepting both string and number values.</p>\n<p>The string type includes either pixel or percentage values.\nWhen <code>height</code> is set with specific pixel value, then the Schedule will be rendered to that specified space.\nIn case, if <code>auto</code> value is set, then the height of the Schedule gets auto-adjusted within the given container.</p>\n","type":"string|number","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#height"},{"name":"eventSettings","description":"<p>Complete set of settings related to Schedule events to bind it to local or remote dataSource, map applicable database fields and\nother validation to be carried out on the available fields.</p>\n","type":"EventSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#eventsettings"},{"name":"selectedDate","description":"<p>To mark the active (current) date on the Schedule, <code>selectedDate</code> property can be defined.\nUsually, it defaults to the current System date.</p>\n","type":"Date","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#selecteddate"}],"schedule/timezone":[{"name":"timezone","description":"<p>Schedule will be assigned with specific timezone, so as to display the events in it accordingly. By default,\nSchedule dates are processed with System timezone, as no timezone will be assigned specifically to the Schedule at the initial time.\nWhenever the Schedule is bound to remote data services, it is always recommended to set specific timezone to Schedule to make the\nevents on it to display on the same time irrespective of the system timezone. It usually accepts\nthe valid <a href=\"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\">IANA</a> timezone names.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#timezone"},{"name":"selectedDate","description":"<p>To mark the active (current) date on the Schedule, <code>selectedDate</code> property can be defined.\nUsually, it defaults to the current System date.</p>\n","type":"Date","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#selecteddate"},{"name":"eventSettings","description":"<p>Complete set of settings related to Schedule events to bind it to local or remote dataSource, map applicable database fields and\nother validation to be carried out on the available fields.</p>\n","type":"EventSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#eventsettings"},{"name":"eventRendered","description":"<p>Triggers before each of the event getting rendered on the scheduler user interface.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#eventrendered"}],"schedule/inline-editing":[{"name":"currentView","description":"<p>To set the active view on scheduler, the <code>currentView</code> property can be used and it usually accepts either of the following available\nview options. The view option specified in this property will be initially loaded on the schedule.</p>\n<ul>\n<li><code>Day</code>: Denotes Day view of the scheduler.</li>\n<li><code>Week</code>: Denotes Week view of the scheduler.</li>\n<li><code>WorkWeek</code>: Denotes Work Week view of the scheduler.</li>\n<li><code>Month</code>: Denotes Month view of the scheduler.</li>\n<li><code>Year</code>: Denotes Year view of the scheduler.</li>\n<li><code>Agenda</code>: Denotes Agenda view of the scheduler.</li>\n<li><code>MonthAgenda</code>: Denotes Month Agenda view of the scheduler.</li>\n<li><code>TimelineDay</code>: Denotes Timeline Day view of the scheduler.</li>\n<li><code>TimelineWeek</code>: Denotes Timeline Week view of the scheduler.</li>\n<li><code>TimelineWorkWeek</code>: Denotes Timeline Work Week view of the scheduler.</li>\n<li><code>TimelineMonth</code>: Denotes Timeline Month view of the scheduler.</li>\n<li><code>TimelineYear</code>: Denotes Timeline Year view of the scheduler.</li>\n</ul>\n","type":"View","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#currentview"},{"name":"eventSettings","description":"<p>Complete set of settings related to Schedule events to bind it to local or remote dataSource, map applicable database fields and\nother validation to be carried out on the available fields.</p>\n","type":"EventSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#eventsettings"},{"name":"group","description":"<p>Allows defining the group related settings of multiple resources. When this property is non-empty, it means\nthat the resources will be grouped on the schedule layout based on the provided resource names.</p>\n","type":"GroupModel","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#group"},{"name":"allowInline","description":"<p>This property helps user to add/edit the event in inline. By default, it is set to <code>false</code>.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#allowinline"}],"schedule/overlap-events":[{"name":"width","description":"<p>Sets the <code>width</code> of the Schedule component, accepting both string and number values.</p>\n<p>The string value can be either pixel or percentage format.\nWhen set to <code>auto</code>, the Schedule width gets auto-adjusted and display its content related to the viewable screen size.</p>\n","type":"string|number","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#width"},{"name":"height","description":"<p>Sets the <code>height</code> of the Schedule component, accepting both string and number values.</p>\n<p>The string type includes either pixel or percentage values.\nWhen <code>height</code> is set with specific pixel value, then the Schedule will be rendered to that specified space.\nIn case, if <code>auto</code> value is set, then the height of the Schedule gets auto-adjusted within the given container.</p>\n","type":"string|number","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#height"},{"name":"eventSettings","description":"<p>Complete set of settings related to Schedule events to bind it to local or remote dataSource, map applicable database fields and\nother validation to be carried out on the available fields.</p>\n","type":"EventSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#eventsettings"},{"name":"selectedDate","description":"<p>To mark the active (current) date on the Schedule, <code>selectedDate</code> property can be defined.\nUsually, it defaults to the current System date.</p>\n","type":"Date","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#selecteddate"},{"name":"allowOverlap","description":"<p>Specifies whether overlapping appointments are allowed within the same time slot in the Scheduler.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#allowoverlap"}],"schedule/external-drag-drop":[{"name":"currentView","description":"<p>To set the active view on scheduler, the <code>currentView</code> property can be used and it usually accepts either of the following available\nview options. The view option specified in this property will be initially loaded on the schedule.</p>\n<ul>\n<li><code>Day</code>: Denotes Day view of the scheduler.</li>\n<li><code>Week</code>: Denotes Week view of the scheduler.</li>\n<li><code>WorkWeek</code>: Denotes Work Week view of the scheduler.</li>\n<li><code>Month</code>: Denotes Month view of the scheduler.</li>\n<li><code>Year</code>: Denotes Year view of the scheduler.</li>\n<li><code>Agenda</code>: Denotes Agenda view of the scheduler.</li>\n<li><code>MonthAgenda</code>: Denotes Month Agenda view of the scheduler.</li>\n<li><code>TimelineDay</code>: Denotes Timeline Day view of the scheduler.</li>\n<li><code>TimelineWeek</code>: Denotes Timeline Week view of the scheduler.</li>\n<li><code>TimelineWorkWeek</code>: Denotes Timeline Work Week view of the scheduler.</li>\n<li><code>TimelineMonth</code>: Denotes Timeline Month view of the scheduler.</li>\n<li><code>TimelineYear</code>: Denotes Timeline Year view of the scheduler.</li>\n</ul>\n","type":"View","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#currentview"},{"name":"eventSettings","description":"<p>Complete set of settings related to Schedule events to bind it to local or remote dataSource, map applicable database fields and\nother validation to be carried out on the available fields.</p>\n","type":"EventSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#eventsettings"},{"name":"resourceHeaderTemplate","description":"<p>Template option to customize the resource header bar. Here, the template accepts either\nthe string or HTMLElement as template design and then the parsed design is displayed onto the resource header cells.\nThe following can be accessible via template.</p>\n<ul>\n<li><code>resource</code> - All the resource fields.</li>\n<li><code>resourceData</code> - Object collection of current resource.\nRefer to the below code snippet.</li>\n</ul>\n","type":"string|Function","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#resourceheadertemplate"},{"name":"cssClass","description":"<p>It is used to customize the Schedule which accepts custom CSS class names that defines specific user-defined styles and themes\nto be applied on the Schedule element.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#cssclass"},{"name":"workHours","description":"<p>The working hours should be highlighted on Schedule with different color shade and an additional option must be provided to\nhighlight it or not. This functionality is handled through <code>workHours</code> property and the start work hour should be 9 AM by default\nand end work hour should point to 6 PM. The start and end working hours needs to be provided as Time value of short skeleton type.</p>\n","type":"WorkHoursModel","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#workhours"},{"name":"views","description":"<p>This property holds the views collection and its configurations. It accepts either the array of view names or the array of view\nobjects that holds different configurations for each views. By default,\nSchedule displays all the views namely <code>Day</code>, <code>Week</code>, <code>Work Week</code>, <code>Month</code> and <code>Agenda</code>.\nExample for array of views:</p>\n<p>Example for array of view objects:</p>\n","type":"View[]|ViewsModel[]","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#views"},{"name":"group","description":"<p>Allows defining the group related settings of multiple resources. When this property is non-empty, it means\nthat the resources will be grouped on the schedule layout based on the provided resource names.</p>\n","type":"GroupModel","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#group"},{"name":"resources","description":"<p>Allows defining the collection of resources to be displayed on the Schedule. The resource collection needs to be defined\nwith unique resource names to identify it along with the respective dataSource and field mapping options.</p>\n","type":"ResourcesModel[]","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#resources"},{"name":"actionBegin","description":"<p>Triggers on beginning of every scheduler action.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#actionbegin"},{"name":"drag","description":"<p>Triggers when an appointment is being in a dragged state.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#drag"}],"schedule/multi-drag":[{"name":"currentView","description":"<p>To set the active view on scheduler, the <code>currentView</code> property can be used and it usually accepts either of the following available\nview options. The view option specified in this property will be initially loaded on the schedule.</p>\n<ul>\n<li><code>Day</code>: Denotes Day view of the scheduler.</li>\n<li><code>Week</code>: Denotes Week view of the scheduler.</li>\n<li><code>WorkWeek</code>: Denotes Work Week view of the scheduler.</li>\n<li><code>Month</code>: Denotes Month view of the scheduler.</li>\n<li><code>Year</code>: Denotes Year view of the scheduler.</li>\n<li><code>Agenda</code>: Denotes Agenda view of the scheduler.</li>\n<li><code>MonthAgenda</code>: Denotes Month Agenda view of the scheduler.</li>\n<li><code>TimelineDay</code>: Denotes Timeline Day view of the scheduler.</li>\n<li><code>TimelineWeek</code>: Denotes Timeline Week view of the scheduler.</li>\n<li><code>TimelineWorkWeek</code>: Denotes Timeline Work Week view of the scheduler.</li>\n<li><code>TimelineMonth</code>: Denotes Timeline Month view of the scheduler.</li>\n<li><code>TimelineYear</code>: Denotes Timeline Year view of the scheduler.</li>\n</ul>\n","type":"View","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#currentview"},{"name":"eventSettings","description":"<p>Complete set of settings related to Schedule events to bind it to local or remote dataSource, map applicable database fields and\nother validation to be carried out on the available fields.</p>\n","type":"EventSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#eventsettings"},{"name":"allowMultiDrag","description":"<p>This property helps to drag the multiple selected events. By default, it is set to <code>false</code>.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#allowmultidrag"},{"name":"cssClass","description":"<p>It is used to customize the Schedule which accepts custom CSS class names that defines specific user-defined styles and themes\nto be applied on the Schedule element.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#cssclass"},{"name":"views","description":"<p>This property holds the views collection and its configurations. It accepts either the array of view names or the array of view\nobjects that holds different configurations for each views. By default,\nSchedule displays all the views namely <code>Day</code>, <code>Week</code>, <code>Work Week</code>, <code>Month</code> and <code>Agenda</code>.\nExample for array of views:</p>\n<p>Example for array of view objects:</p>\n","type":"View[]|ViewsModel[]","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#views"},{"name":"group","description":"<p>Allows defining the group related settings of multiple resources. When this property is non-empty, it means\nthat the resources will be grouped on the schedule layout based on the provided resource names.</p>\n","type":"GroupModel","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#group"},{"name":"resources","description":"<p>Allows defining the collection of resources to be displayed on the Schedule. The resource collection needs to be defined\nwith unique resource names to identify it along with the respective dataSource and field mapping options.</p>\n","type":"ResourcesModel[]","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#resources"}],"schedule/schedule-to-schedule-drag-drop":[{"name":"height","description":"<p>Sets the <code>height</code> of the Schedule component, accepting both string and number values.</p>\n<p>The string type includes either pixel or percentage values.\nWhen <code>height</code> is set with specific pixel value, then the Schedule will be rendered to that specified space.\nIn case, if <code>auto</code> value is set, then the height of the Schedule gets auto-adjusted within the given container.</p>\n","type":"string|number","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#height"},{"name":"eventSettings","description":"<p>Complete set of settings related to Schedule events to bind it to local or remote dataSource, map applicable database fields and\nother validation to be carried out on the available fields.</p>\n","type":"EventSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#eventsettings"},{"name":"selectedDate","description":"<p>To mark the active (current) date on the Schedule, <code>selectedDate</code> property can be defined.\nUsually, it defaults to the current System date.</p>\n","type":"Date","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#selecteddate"},{"name":"actionBegin","description":"<p>Triggers on beginning of every scheduler action.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#actionbegin"},{"name":"dragStop","description":"<p>Triggers when the dragging of appointment is stopped.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#dragstop"},{"name":"resizeStop","description":"<p>Triggers when the resizing of appointment is stopped.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#resizestop"}],"schedule/schedule-to-grid":[{"name":"height","description":"<p>Sets the <code>height</code> of the Schedule component, accepting both string and number values.</p>\n<p>The string type includes either pixel or percentage values.\nWhen <code>height</code> is set with specific pixel value, then the Schedule will be rendered to that specified space.\nIn case, if <code>auto</code> value is set, then the height of the Schedule gets auto-adjusted within the given container.</p>\n","type":"string|number","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#height"},{"name":"eventSettings","description":"<p>Complete set of settings related to Schedule events to bind it to local or remote dataSource, map applicable database fields and\nother validation to be carried out on the available fields.</p>\n","type":"EventSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#eventsettings"},{"name":"selectedDate","description":"<p>To mark the active (current) date on the Schedule, <code>selectedDate</code> property can be defined.\nUsually, it defaults to the current System date.</p>\n","type":"Date","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#selecteddate"},{"name":"actionBegin","description":"<p>Triggers on beginning of every scheduler action.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#actionbegin"},{"name":"dragStop","description":"<p>Triggers when the dragging of appointment is stopped.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#dragstop"},{"name":"resizeStop","description":"<p>Triggers when the resizing of appointment is stopped.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#resizestop"}],"schedule/virtual-scrolling":[{"name":"views","description":"<p>This property holds the views collection and its configurations. It accepts either the array of view names or the array of view\nobjects that holds different configurations for each views. By default,\nSchedule displays all the views namely <code>Day</code>, <code>Week</code>, <code>Work Week</code>, <code>Month</code> and <code>Agenda</code>.\nExample for array of views:</p>\n<p>Example for array of view objects:</p>\n","type":"View[]|ViewsModel[]","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#views"},{"name":"group","description":"<p>Allows defining the group related settings of multiple resources. When this property is non-empty, it means\nthat the resources will be grouped on the schedule layout based on the provided resource names.</p>\n","type":"GroupModel","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#group"},{"name":"resources","description":"<p>Allows defining the collection of resources to be displayed on the Schedule. The resource collection needs to be defined\nwith unique resource names to identify it along with the respective dataSource and field mapping options.</p>\n","type":"ResourcesModel[]","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#resources"},{"name":"eventSettings","description":"<p>Complete set of settings related to Schedule events to bind it to local or remote dataSource, map applicable database fields and\nother validation to be carried out on the available fields.</p>\n","type":"EventSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#eventsettings"}],"schedule/data-virtualization":[{"name":"views","description":"<p>This property holds the views collection and its configurations. It accepts either the array of view names or the array of view\nobjects that holds different configurations for each views. By default,\nSchedule displays all the views namely <code>Day</code>, <code>Week</code>, <code>Work Week</code>, <code>Month</code> and <code>Agenda</code>.\nExample for array of views:</p>\n<p>Example for array of view objects:</p>\n","type":"View[]|ViewsModel[]","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#views"},{"name":"group","description":"<p>Allows defining the group related settings of multiple resources. When this property is non-empty, it means\nthat the resources will be grouped on the schedule layout based on the provided resource names.</p>\n","type":"GroupModel","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#group"},{"name":"resources","description":"<p>Allows defining the collection of resources to be displayed on the Schedule. The resource collection needs to be defined\nwith unique resource names to identify it along with the respective dataSource and field mapping options.</p>\n","type":"ResourcesModel[]","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#resources"},{"name":"eventSettings","description":"<p>Complete set of settings related to Schedule events to bind it to local or remote dataSource, map applicable database fields and\nother validation to be carried out on the available fields.</p>\n","type":"EventSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#eventsettings"}],"schedule/views":[{"name":"currentView","description":"<p>To set the active view on scheduler, the <code>currentView</code> property can be used and it usually accepts either of the following available\nview options. The view option specified in this property will be initially loaded on the schedule.</p>\n<ul>\n<li><code>Day</code>: Denotes Day view of the scheduler.</li>\n<li><code>Week</code>: Denotes Week view of the scheduler.</li>\n<li><code>WorkWeek</code>: Denotes Work Week view of the scheduler.</li>\n<li><code>Month</code>: Denotes Month view of the scheduler.</li>\n<li><code>Year</code>: Denotes Year view of the scheduler.</li>\n<li><code>Agenda</code>: Denotes Agenda view of the scheduler.</li>\n<li><code>MonthAgenda</code>: Denotes Month Agenda view of the scheduler.</li>\n<li><code>TimelineDay</code>: Denotes Timeline Day view of the scheduler.</li>\n<li><code>TimelineWeek</code>: Denotes Timeline Week view of the scheduler.</li>\n<li><code>TimelineWorkWeek</code>: Denotes Timeline Work Week view of the scheduler.</li>\n<li><code>TimelineMonth</code>: Denotes Timeline Month view of the scheduler.</li>\n<li><code>TimelineYear</code>: Denotes Timeline Year view of the scheduler.</li>\n</ul>\n","type":"View","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#currentview"},{"name":"views","description":"<p>This property holds the views collection and its configurations. It accepts either the array of view names or the array of view\nobjects that holds different configurations for each views. By default,\nSchedule displays all the views namely <code>Day</code>, <code>Week</code>, <code>Work Week</code>, <code>Month</code> and <code>Agenda</code>.\nExample for array of views:</p>\n<p>Example for array of view objects:</p>\n","type":"View[]|ViewsModel[]","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#views"},{"name":"selectedDate","description":"<p>To mark the active (current) date on the Schedule, <code>selectedDate</code> property can be defined.\nUsually, it defaults to the current System date.</p>\n","type":"Date","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#selecteddate"},{"name":"eventSettings","description":"<p>Complete set of settings related to Schedule events to bind it to local or remote dataSource, map applicable database fields and\nother validation to be carried out on the available fields.</p>\n","type":"EventSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#eventsettings"}],"schedule/timeline":[{"name":"height","description":"<p>Sets the <code>height</code> of the Schedule component, accepting both string and number values.</p>\n<p>The string type includes either pixel or percentage values.\nWhen <code>height</code> is set with specific pixel value, then the Schedule will be rendered to that specified space.\nIn case, if <code>auto</code> value is set, then the height of the Schedule gets auto-adjusted within the given container.</p>\n","type":"string|number","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#height"},{"name":"eventSettings","description":"<p>Complete set of settings related to Schedule events to bind it to local or remote dataSource, map applicable database fields and\nother validation to be carried out on the available fields.</p>\n","type":"EventSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#eventsettings"},{"name":"selectedDate","description":"<p>To mark the active (current) date on the Schedule, <code>selectedDate</code> property can be defined.\nUsually, it defaults to the current System date.</p>\n","type":"Date","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#selecteddate"}],"schedule/agenda":[{"name":"agendaDaysCount","description":"<p>Sets the number of days to be displayed by default in Agenda View and in case of virtual scrolling,\nthe number of days will be fetched on each scroll-end based on this count.</p>\n","type":"number","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#agendadayscount"},{"name":"hideEmptyAgendaDays","description":"<p>The days which does not has even a single event to display will be hidden from the UI of Agenda View by default.\nWhen this property is set to <code>false</code>, the empty dates will also be displayed on the Schedule.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#hideemptyagendadays"},{"name":"currentView","description":"<p>To set the active view on scheduler, the <code>currentView</code> property can be used and it usually accepts either of the following available\nview options. The view option specified in this property will be initially loaded on the schedule.</p>\n<ul>\n<li><code>Day</code>: Denotes Day view of the scheduler.</li>\n<li><code>Week</code>: Denotes Week view of the scheduler.</li>\n<li><code>WorkWeek</code>: Denotes Work Week view of the scheduler.</li>\n<li><code>Month</code>: Denotes Month view of the scheduler.</li>\n<li><code>Year</code>: Denotes Year view of the scheduler.</li>\n<li><code>Agenda</code>: Denotes Agenda view of the scheduler.</li>\n<li><code>MonthAgenda</code>: Denotes Month Agenda view of the scheduler.</li>\n<li><code>TimelineDay</code>: Denotes Timeline Day view of the scheduler.</li>\n<li><code>TimelineWeek</code>: Denotes Timeline Week view of the scheduler.</li>\n<li><code>TimelineWorkWeek</code>: Denotes Timeline Work Week view of the scheduler.</li>\n<li><code>TimelineMonth</code>: Denotes Timeline Month view of the scheduler.</li>\n<li><code>TimelineYear</code>: Denotes Timeline Year view of the scheduler.</li>\n</ul>\n","type":"View","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#currentview"},{"name":"views","description":"<p>This property holds the views collection and its configurations. It accepts either the array of view names or the array of view\nobjects that holds different configurations for each views. By default,\nSchedule displays all the views namely <code>Day</code>, <code>Week</code>, <code>Work Week</code>, <code>Month</code> and <code>Agenda</code>.\nExample for array of views:</p>\n<p>Example for array of view objects:</p>\n","type":"View[]|ViewsModel[]","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#views"},{"name":"eventSettings","description":"<p>Complete set of settings related to Schedule events to bind it to local or remote dataSource, map applicable database fields and\nother validation to be carried out on the available fields.</p>\n","type":"EventSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#eventsettings"},{"name":"selectedDate","description":"<p>To mark the active (current) date on the Schedule, <code>selectedDate</code> property can be defined.\nUsually, it defaults to the current System date.</p>\n","type":"Date","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#selecteddate"}],"schedule/month-agenda":[{"name":"currentView","description":"<p>To set the active view on scheduler, the <code>currentView</code> property can be used and it usually accepts either of the following available\nview options. The view option specified in this property will be initially loaded on the schedule.</p>\n<ul>\n<li><code>Day</code>: Denotes Day view of the scheduler.</li>\n<li><code>Week</code>: Denotes Week view of the scheduler.</li>\n<li><code>WorkWeek</code>: Denotes Work Week view of the scheduler.</li>\n<li><code>Month</code>: Denotes Month view of the scheduler.</li>\n<li><code>Year</code>: Denotes Year view of the scheduler.</li>\n<li><code>Agenda</code>: Denotes Agenda view of the scheduler.</li>\n<li><code>MonthAgenda</code>: Denotes Month Agenda view of the scheduler.</li>\n<li><code>TimelineDay</code>: Denotes Timeline Day view of the scheduler.</li>\n<li><code>TimelineWeek</code>: Denotes Timeline Week view of the scheduler.</li>\n<li><code>TimelineWorkWeek</code>: Denotes Timeline Work Week view of the scheduler.</li>\n<li><code>TimelineMonth</code>: Denotes Timeline Month view of the scheduler.</li>\n<li><code>TimelineYear</code>: Denotes Timeline Year view of the scheduler.</li>\n</ul>\n","type":"View","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#currentview"},{"name":"views","description":"<p>This property holds the views collection and its configurations. It accepts either the array of view names or the array of view\nobjects that holds different configurations for each views. By default,\nSchedule displays all the views namely <code>Day</code>, <code>Week</code>, <code>Work Week</code>, <code>Month</code> and <code>Agenda</code>.\nExample for array of views:</p>\n<p>Example for array of view objects:</p>\n","type":"View[]|ViewsModel[]","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#views"},{"name":"selectedDate","description":"<p>To mark the active (current) date on the Schedule, <code>selectedDate</code> property can be defined.\nUsually, it defaults to the current System date.</p>\n","type":"Date","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#selecteddate"},{"name":"eventSettings","description":"<p>Complete set of settings related to Schedule events to bind it to local or remote dataSource, map applicable database fields and\nother validation to be carried out on the available fields.</p>\n","type":"EventSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#eventsettings"}],"schedule/year":[{"name":"views","description":"<p>This property holds the views collection and its configurations. It accepts either the array of view names or the array of view\nobjects that holds different configurations for each views. By default,\nSchedule displays all the views namely <code>Day</code>, <code>Week</code>, <code>Work Week</code>, <code>Month</code> and <code>Agenda</code>.\nExample for array of views:</p>\n<p>Example for array of view objects:</p>\n","type":"View[]|ViewsModel[]","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#views"},{"name":"eventSettings","description":"<p>Complete set of settings related to Schedule events to bind it to local or remote dataSource, map applicable database fields and\nother validation to be carried out on the available fields.</p>\n","type":"EventSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#eventsettings"}],"schedule/custom-month-view":[{"name":"eventSettings","description":"<p>Complete set of settings related to Schedule events to bind it to local or remote dataSource, map applicable database fields and\nother validation to be carried out on the available fields.</p>\n","type":"EventSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#eventsettings"},{"name":"views","description":"<p>This property holds the views collection and its configurations. It accepts either the array of view names or the array of view\nobjects that holds different configurations for each views. By default,\nSchedule displays all the views namely <code>Day</code>, <code>Week</code>, <code>Work Week</code>, <code>Month</code> and <code>Agenda</code>.\nExample for array of views:</p>\n<p>Example for array of view objects:</p>\n","type":"View[]|ViewsModel[]","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#views"}],"schedule/views-configuration":[{"name":"currentView","description":"<p>To set the active view on scheduler, the <code>currentView</code> property can be used and it usually accepts either of the following available\nview options. The view option specified in this property will be initially loaded on the schedule.</p>\n<ul>\n<li><code>Day</code>: Denotes Day view of the scheduler.</li>\n<li><code>Week</code>: Denotes Week view of the scheduler.</li>\n<li><code>WorkWeek</code>: Denotes Work Week view of the scheduler.</li>\n<li><code>Month</code>: Denotes Month view of the scheduler.</li>\n<li><code>Year</code>: Denotes Year view of the scheduler.</li>\n<li><code>Agenda</code>: Denotes Agenda view of the scheduler.</li>\n<li><code>MonthAgenda</code>: Denotes Month Agenda view of the scheduler.</li>\n<li><code>TimelineDay</code>: Denotes Timeline Day view of the scheduler.</li>\n<li><code>TimelineWeek</code>: Denotes Timeline Week view of the scheduler.</li>\n<li><code>TimelineWorkWeek</code>: Denotes Timeline Work Week view of the scheduler.</li>\n<li><code>TimelineMonth</code>: Denotes Timeline Month view of the scheduler.</li>\n<li><code>TimelineYear</code>: Denotes Timeline Year view of the scheduler.</li>\n</ul>\n","type":"View","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#currentview"},{"name":"views","description":"<p>This property holds the views collection and its configurations. It accepts either the array of view names or the array of view\nobjects that holds different configurations for each views. By default,\nSchedule displays all the views namely <code>Day</code>, <code>Week</code>, <code>Work Week</code>, <code>Month</code> and <code>Agenda</code>.\nExample for array of views:</p>\n<p>Example for array of view objects:</p>\n","type":"View[]|ViewsModel[]","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#views"},{"name":"selectedDate","description":"<p>To mark the active (current) date on the Schedule, <code>selectedDate</code> property can be defined.\nUsually, it defaults to the current System date.</p>\n","type":"Date","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#selecteddate"},{"name":"eventSettings","description":"<p>Complete set of settings related to Schedule events to bind it to local or remote dataSource, map applicable database fields and\nother validation to be carried out on the available fields.</p>\n","type":"EventSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#eventsettings"}],"schedule/extended-views":[{"name":"currentView","description":"<p>To set the active view on scheduler, the <code>currentView</code> property can be used and it usually accepts either of the following available\nview options. The view option specified in this property will be initially loaded on the schedule.</p>\n<ul>\n<li><code>Day</code>: Denotes Day view of the scheduler.</li>\n<li><code>Week</code>: Denotes Week view of the scheduler.</li>\n<li><code>WorkWeek</code>: Denotes Work Week view of the scheduler.</li>\n<li><code>Month</code>: Denotes Month view of the scheduler.</li>\n<li><code>Year</code>: Denotes Year view of the scheduler.</li>\n<li><code>Agenda</code>: Denotes Agenda view of the scheduler.</li>\n<li><code>MonthAgenda</code>: Denotes Month Agenda view of the scheduler.</li>\n<li><code>TimelineDay</code>: Denotes Timeline Day view of the scheduler.</li>\n<li><code>TimelineWeek</code>: Denotes Timeline Week view of the scheduler.</li>\n<li><code>TimelineWorkWeek</code>: Denotes Timeline Work Week view of the scheduler.</li>\n<li><code>TimelineMonth</code>: Denotes Timeline Month view of the scheduler.</li>\n<li><code>TimelineYear</code>: Denotes Timeline Year view of the scheduler.</li>\n</ul>\n","type":"View","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#currentview"},{"name":"views","description":"<p>This property holds the views collection and its configurations. It accepts either the array of view names or the array of view\nobjects that holds different configurations for each views. By default,\nSchedule displays all the views namely <code>Day</code>, <code>Week</code>, <code>Work Week</code>, <code>Month</code> and <code>Agenda</code>.\nExample for array of views:</p>\n<p>Example for array of view objects:</p>\n","type":"View[]|ViewsModel[]","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#views"},{"name":"selectedDate","description":"<p>To mark the active (current) date on the Schedule, <code>selectedDate</code> property can be defined.\nUsually, it defaults to the current System date.</p>\n","type":"Date","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#selecteddate"},{"name":"eventSettings","description":"<p>Complete set of settings related to Schedule events to bind it to local or remote dataSource, map applicable database fields and\nother validation to be carried out on the available fields.</p>\n","type":"EventSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#eventsettings"}],"schedule/timeline-resources":[{"name":"currentView","description":"<p>To set the active view on scheduler, the <code>currentView</code> property can be used and it usually accepts either of the following available\nview options. The view option specified in this property will be initially loaded on the schedule.</p>\n<ul>\n<li><code>Day</code>: Denotes Day view of the scheduler.</li>\n<li><code>Week</code>: Denotes Week view of the scheduler.</li>\n<li><code>WorkWeek</code>: Denotes Work Week view of the scheduler.</li>\n<li><code>Month</code>: Denotes Month view of the scheduler.</li>\n<li><code>Year</code>: Denotes Year view of the scheduler.</li>\n<li><code>Agenda</code>: Denotes Agenda view of the scheduler.</li>\n<li><code>MonthAgenda</code>: Denotes Month Agenda view of the scheduler.</li>\n<li><code>TimelineDay</code>: Denotes Timeline Day view of the scheduler.</li>\n<li><code>TimelineWeek</code>: Denotes Timeline Week view of the scheduler.</li>\n<li><code>TimelineWorkWeek</code>: Denotes Timeline Work Week view of the scheduler.</li>\n<li><code>TimelineMonth</code>: Denotes Timeline Month view of the scheduler.</li>\n<li><code>TimelineYear</code>: Denotes Timeline Year view of the scheduler.</li>\n</ul>\n","type":"View","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#currentview"},{"name":"views","description":"<p>This property holds the views collection and its configurations. It accepts either the array of view names or the array of view\nobjects that holds different configurations for each views. By default,\nSchedule displays all the views namely <code>Day</code>, <code>Week</code>, <code>Work Week</code>, <code>Month</code> and <code>Agenda</code>.\nExample for array of views:</p>\n<p>Example for array of view objects:</p>\n","type":"View[]|ViewsModel[]","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#views"},{"name":"selectedDate","description":"<p>To mark the active (current) date on the Schedule, <code>selectedDate</code> property can be defined.\nUsually, it defaults to the current System date.</p>\n","type":"Date","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#selecteddate"},{"name":"eventSettings","description":"<p>Complete set of settings related to Schedule events to bind it to local or remote dataSource, map applicable database fields and\nother validation to be carried out on the available fields.</p>\n","type":"EventSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#eventsettings"},{"name":"resourceHeaderTemplate","description":"<p>Template option to customize the resource header bar. Here, the template accepts either\nthe string or HTMLElement as template design and then the parsed design is displayed onto the resource header cells.\nThe following can be accessible via template.</p>\n<ul>\n<li><code>resource</code> - All the resource fields.</li>\n<li><code>resourceData</code> - Object collection of current resource.\nRefer to the below code snippet.</li>\n</ul>\n","type":"string|Function","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#resourceheadertemplate"}],"schedule/resources":[{"name":"currentView","description":"<p>To set the active view on scheduler, the <code>currentView</code> property can be used and it usually accepts either of the following available\nview options. The view option specified in this property will be initially loaded on the schedule.</p>\n<ul>\n<li><code>Day</code>: Denotes Day view of the scheduler.</li>\n<li><code>Week</code>: Denotes Week view of the scheduler.</li>\n<li><code>WorkWeek</code>: Denotes Work Week view of the scheduler.</li>\n<li><code>Month</code>: Denotes Month view of the scheduler.</li>\n<li><code>Year</code>: Denotes Year view of the scheduler.</li>\n<li><code>Agenda</code>: Denotes Agenda view of the scheduler.</li>\n<li><code>MonthAgenda</code>: Denotes Month Agenda view of the scheduler.</li>\n<li><code>TimelineDay</code>: Denotes Timeline Day view of the scheduler.</li>\n<li><code>TimelineWeek</code>: Denotes Timeline Week view of the scheduler.</li>\n<li><code>TimelineWorkWeek</code>: Denotes Timeline Work Week view of the scheduler.</li>\n<li><code>TimelineMonth</code>: Denotes Timeline Month view of the scheduler.</li>\n<li><code>TimelineYear</code>: Denotes Timeline Year view of the scheduler.</li>\n</ul>\n","type":"View","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#currentview"},{"name":"views","description":"<p>This property holds the views collection and its configurations. It accepts either the array of view names or the array of view\nobjects that holds different configurations for each views. By default,\nSchedule displays all the views namely <code>Day</code>, <code>Week</code>, <code>Work Week</code>, <code>Month</code> and <code>Agenda</code>.\nExample for array of views:</p>\n<p>Example for array of view objects:</p>\n","type":"View[]|ViewsModel[]","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#views"},{"name":"selectedDate","description":"<p>To mark the active (current) date on the Schedule, <code>selectedDate</code> property can be defined.\nUsually, it defaults to the current System date.</p>\n","type":"Date","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#selecteddate"},{"name":"eventSettings","description":"<p>Complete set of settings related to Schedule events to bind it to local or remote dataSource, map applicable database fields and\nother validation to be carried out on the available fields.</p>\n","type":"EventSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#eventsettings"}],"schedule/resource":[{"name":"height","description":"<p>Sets the <code>height</code> of the Schedule component, accepting both string and number values.</p>\n<p>The string type includes either pixel or percentage values.\nWhen <code>height</code> is set with specific pixel value, then the Schedule will be rendered to that specified space.\nIn case, if <code>auto</code> value is set, then the height of the Schedule gets auto-adjusted within the given container.</p>\n","type":"string|number","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#height"},{"name":"eventSettings","description":"<p>Complete set of settings related to Schedule events to bind it to local or remote dataSource, map applicable database fields and\nother validation to be carried out on the available fields.</p>\n","type":"EventSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#eventsettings"},{"name":"selectedDate","description":"<p>To mark the active (current) date on the Schedule, <code>selectedDate</code> property can be defined.\nUsually, it defaults to the current System date.</p>\n","type":"Date","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#selecteddate"}],"schedule/group-editing":[{"name":"resourceHeaderTemplate","description":"<p>Template option to customize the resource header bar. Here, the template accepts either\nthe string or HTMLElement as template design and then the parsed design is displayed onto the resource header cells.\nThe following can be accessible via template.</p>\n<ul>\n<li><code>resource</code> - All the resource fields.</li>\n<li><code>resourceData</code> - Object collection of current resource.\nRefer to the below code snippet.</li>\n</ul>\n","type":"string|Function","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#resourceheadertemplate"},{"name":"group","description":"<p>Allows defining the group related settings of multiple resources. When this property is non-empty, it means\nthat the resources will be grouped on the schedule layout based on the provided resource names.</p>\n","type":"GroupModel","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#group"},{"name":"resources","description":"<p>Allows defining the collection of resources to be displayed on the Schedule. The resource collection needs to be defined\nwith unique resource names to identify it along with the respective dataSource and field mapping options.</p>\n","type":"ResourcesModel[]","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#resources"},{"name":"eventSettings","description":"<p>Complete set of settings related to Schedule events to bind it to local or remote dataSource, map applicable database fields and\nother validation to be carried out on the available fields.</p>\n","type":"EventSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#eventsettings"}],"schedule/group-custom-work-days":[{"name":"resourceHeaderTemplate","description":"<p>Template option to customize the resource header bar. Here, the template accepts either\nthe string or HTMLElement as template design and then the parsed design is displayed onto the resource header cells.\nThe following can be accessible via template.</p>\n<ul>\n<li><code>resource</code> - All the resource fields.</li>\n<li><code>resourceData</code> - Object collection of current resource.\nRefer to the below code snippet.</li>\n</ul>\n","type":"string|Function","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#resourceheadertemplate"},{"name":"group","description":"<p>Allows defining the group related settings of multiple resources. When this property is non-empty, it means\nthat the resources will be grouped on the schedule layout based on the provided resource names.</p>\n","type":"GroupModel","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#group"},{"name":"resources","description":"<p>Allows defining the collection of resources to be displayed on the Schedule. The resource collection needs to be defined\nwith unique resource names to identify it along with the respective dataSource and field mapping options.</p>\n","type":"ResourcesModel[]","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#resources"},{"name":"eventSettings","description":"<p>Complete set of settings related to Schedule events to bind it to local or remote dataSource, map applicable database fields and\nother validation to be carried out on the available fields.</p>\n","type":"EventSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#eventsettings"}],"schedule/add-remove-resources":[{"name":"currentView","description":"<p>To set the active view on scheduler, the <code>currentView</code> property can be used and it usually accepts either of the following available\nview options. The view option specified in this property will be initially loaded on the schedule.</p>\n<ul>\n<li><code>Day</code>: Denotes Day view of the scheduler.</li>\n<li><code>Week</code>: Denotes Week view of the scheduler.</li>\n<li><code>WorkWeek</code>: Denotes Work Week view of the scheduler.</li>\n<li><code>Month</code>: Denotes Month view of the scheduler.</li>\n<li><code>Year</code>: Denotes Year view of the scheduler.</li>\n<li><code>Agenda</code>: Denotes Agenda view of the scheduler.</li>\n<li><code>MonthAgenda</code>: Denotes Month Agenda view of the scheduler.</li>\n<li><code>TimelineDay</code>: Denotes Timeline Day view of the scheduler.</li>\n<li><code>TimelineWeek</code>: Denotes Timeline Week view of the scheduler.</li>\n<li><code>TimelineWorkWeek</code>: Denotes Timeline Work Week view of the scheduler.</li>\n<li><code>TimelineMonth</code>: Denotes Timeline Month view of the scheduler.</li>\n<li><code>TimelineYear</code>: Denotes Timeline Year view of the scheduler.</li>\n</ul>\n","type":"View","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#currentview"},{"name":"views","description":"<p>This property holds the views collection and its configurations. It accepts either the array of view names or the array of view\nobjects that holds different configurations for each views. By default,\nSchedule displays all the views namely <code>Day</code>, <code>Week</code>, <code>Work Week</code>, <code>Month</code> and <code>Agenda</code>.\nExample for array of views:</p>\n<p>Example for array of view objects:</p>\n","type":"View[]|ViewsModel[]","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#views"},{"name":"selectedDate","description":"<p>To mark the active (current) date on the Schedule, <code>selectedDate</code> property can be defined.\nUsually, it defaults to the current System date.</p>\n","type":"Date","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#selecteddate"},{"name":"eventSettings","description":"<p>Complete set of settings related to Schedule events to bind it to local or remote dataSource, map applicable database fields and\nother validation to be carried out on the available fields.</p>\n","type":"EventSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#eventsettings"}],"schedule/adaptive-rows":[{"name":"rowAutoHeight","description":"<p>when set to <code>true</code>, allows the height of the work-cells to adjust automatically\nbased on the number of appointments present in those time ranges.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#rowautoheight"},{"name":"currentView","description":"<p>To set the active view on scheduler, the <code>currentView</code> property can be used and it usually accepts either of the following available\nview options. The view option specified in this property will be initially loaded on the schedule.</p>\n<ul>\n<li><code>Day</code>: Denotes Day view of the scheduler.</li>\n<li><code>Week</code>: Denotes Week view of the scheduler.</li>\n<li><code>WorkWeek</code>: Denotes Work Week view of the scheduler.</li>\n<li><code>Month</code>: Denotes Month view of the scheduler.</li>\n<li><code>Year</code>: Denotes Year view of the scheduler.</li>\n<li><code>Agenda</code>: Denotes Agenda view of the scheduler.</li>\n<li><code>MonthAgenda</code>: Denotes Month Agenda view of the scheduler.</li>\n<li><code>TimelineDay</code>: Denotes Timeline Day view of the scheduler.</li>\n<li><code>TimelineWeek</code>: Denotes Timeline Week view of the scheduler.</li>\n<li><code>TimelineWorkWeek</code>: Denotes Timeline Work Week view of the scheduler.</li>\n<li><code>TimelineMonth</code>: Denotes Timeline Month view of the scheduler.</li>\n<li><code>TimelineYear</code>: Denotes Timeline Year view of the scheduler.</li>\n</ul>\n","type":"View","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#currentview"},{"name":"views","description":"<p>This property holds the views collection and its configurations. It accepts either the array of view names or the array of view\nobjects that holds different configurations for each views. By default,\nSchedule displays all the views namely <code>Day</code>, <code>Week</code>, <code>Work Week</code>, <code>Month</code> and <code>Agenda</code>.\nExample for array of views:</p>\n<p>Example for array of view objects:</p>\n","type":"View[]|ViewsModel[]","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#views"},{"name":"selectedDate","description":"<p>To mark the active (current) date on the Schedule, <code>selectedDate</code> property can be defined.\nUsually, it defaults to the current System date.</p>\n","type":"Date","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#selecteddate"},{"name":"eventSettings","description":"<p>Complete set of settings related to Schedule events to bind it to local or remote dataSource, map applicable database fields and\nother validation to be carried out on the available fields.</p>\n","type":"EventSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#eventsettings"}],"schedule/resource-grouping":[{"name":"resourceHeaderTemplate","description":"<p>Template option to customize the resource header bar. Here, the template accepts either\nthe string or HTMLElement as template design and then the parsed design is displayed onto the resource header cells.\nThe following can be accessible via template.</p>\n<ul>\n<li><code>resource</code> - All the resource fields.</li>\n<li><code>resourceData</code> - Object collection of current resource.\nRefer to the below code snippet.</li>\n</ul>\n","type":"string|Function","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#resourceheadertemplate"},{"name":"group","description":"<p>Allows defining the group related settings of multiple resources. When this property is non-empty, it means\nthat the resources will be grouped on the schedule layout based on the provided resource names.</p>\n","type":"GroupModel","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#group"},{"name":"resources","description":"<p>Allows defining the collection of resources to be displayed on the Schedule. The resource collection needs to be defined\nwith unique resource names to identify it along with the respective dataSource and field mapping options.</p>\n","type":"ResourcesModel[]","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#resources"},{"name":"eventSettings","description":"<p>Complete set of settings related to Schedule events to bind it to local or remote dataSource, map applicable database fields and\nother validation to be carried out on the available fields.</p>\n","type":"EventSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#eventsettings"}],"schedule/timeline-resource-grouping":[{"name":"group","description":"<p>Allows defining the group related settings of multiple resources. When this property is non-empty, it means\nthat the resources will be grouped on the schedule layout based on the provided resource names.</p>\n","type":"GroupModel","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#group"},{"name":"resources","description":"<p>Allows defining the collection of resources to be displayed on the Schedule. The resource collection needs to be defined\nwith unique resource names to identify it along with the respective dataSource and field mapping options.</p>\n","type":"ResourcesModel[]","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#resources"},{"name":"eventSettings","description":"<p>Complete set of settings related to Schedule events to bind it to local or remote dataSource, map applicable database fields and\nother validation to be carried out on the available fields.</p>\n","type":"EventSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#eventsettings"}],"schedule/group-by-date":[{"name":"group","description":"<p>Allows defining the group related settings of multiple resources. When this property is non-empty, it means\nthat the resources will be grouped on the schedule layout based on the provided resource names.</p>\n","type":"GroupModel","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#group"},{"name":"resources","description":"<p>Allows defining the collection of resources to be displayed on the Schedule. The resource collection needs to be defined\nwith unique resource names to identify it along with the respective dataSource and field mapping options.</p>\n","type":"ResourcesModel[]","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#resources"},{"name":"eventSettings","description":"<p>Complete set of settings related to Schedule events to bind it to local or remote dataSource, map applicable database fields and\nother validation to be carried out on the available fields.</p>\n","type":"EventSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#eventsettings"}],"schedule/group-by-child":[{"name":"startHour","description":"<p>It is used to specify the starting hour, from which the Schedule starts to display. It accepts the time string in a short skeleton\nformat and also, hides the time beyond the specified start time.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#starthour"},{"name":"endHour","description":"<p>It is used to specify the end hour, at which the Schedule ends. It too accepts the time string in a short skeleton format.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#endhour"},{"name":"group","description":"<p>Allows defining the group related settings of multiple resources. When this property is non-empty, it means\nthat the resources will be grouped on the schedule layout based on the provided resource names.</p>\n","type":"GroupModel","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#group"},{"name":"resources","description":"<p>Allows defining the collection of resources to be displayed on the Schedule. The resource collection needs to be defined\nwith unique resource names to identify it along with the respective dataSource and field mapping options.</p>\n","type":"ResourcesModel[]","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#resources"},{"name":"eventSettings","description":"<p>Complete set of settings related to Schedule events to bind it to local or remote dataSource, map applicable database fields and\nother validation to be carried out on the available fields.</p>\n","type":"EventSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#eventsettings"}],"schedule/adaptive-grouping":[{"name":"enableAdaptiveUI","description":"<p>When set to <code>true</code>, the header view navigations are listed under the popup and if we enable resource grouping, the compact view will be enabled.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#enableadaptiveui"},{"name":"group","description":"<p>Allows defining the group related settings of multiple resources. When this property is non-empty, it means\nthat the resources will be grouped on the schedule layout based on the provided resource names.</p>\n","type":"GroupModel","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#group"},{"name":"resources","description":"<p>Allows defining the collection of resources to be displayed on the Schedule. The resource collection needs to be defined\nwith unique resource names to identify it along with the respective dataSource and field mapping options.</p>\n","type":"ResourcesModel[]","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#resources"},{"name":"eventSettings","description":"<p>Complete set of settings related to Schedule events to bind it to local or remote dataSource, map applicable database fields and\nother validation to be carried out on the available fields.</p>\n","type":"EventSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#eventsettings"}],"schedule/cell-template":[{"name":"width","description":"<p>Sets the <code>width</code> of the Schedule component, accepting both string and number values.</p>\n<p>The string value can be either pixel or percentage format.\nWhen set to <code>auto</code>, the Schedule width gets auto-adjusted and display its content related to the viewable screen size.</p>\n","type":"string|number","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#width"},{"name":"height","description":"<p>Sets the <code>height</code> of the Schedule component, accepting both string and number values.</p>\n<p>The string type includes either pixel or percentage values.\nWhen <code>height</code> is set with specific pixel value, then the Schedule will be rendered to that specified space.\nIn case, if <code>auto</code> value is set, then the height of the Schedule gets auto-adjusted within the given container.</p>\n","type":"string|number","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#height"},{"name":"cellTemplate","description":"<p>The template option which is used to render the customized work cells on the Schedule. Here, the template accepts either\nthe string or HTMLElement as template design and then the parsed design is displayed onto the work cells.\nThe fields accessible via template are as follows.</p>\n<ul>\n<li><code>date</code>: Returns the date of the cell.</li>\n<li><code>groupIndex</code>: Returns the group index of the cell.</li>\n<li><code>type</code>: Returns the type of the work cell.\nRefer to the below code snippet.</li>\n</ul>\n","type":"string|Function","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#celltemplate"},{"name":"views","description":"<p>This property holds the views collection and its configurations. It accepts either the array of view names or the array of view\nobjects that holds different configurations for each views. By default,\nSchedule displays all the views namely <code>Day</code>, <code>Week</code>, <code>Work Week</code>, <code>Month</code> and <code>Agenda</code>.\nExample for array of views:</p>\n<p>Example for array of view objects:</p>\n","type":"View[]|ViewsModel[]","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#views"},{"name":"eventSettings","description":"<p>Complete set of settings related to Schedule events to bind it to local or remote dataSource, map applicable database fields and\nother validation to be carried out on the available fields.</p>\n","type":"EventSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#eventsettings"},{"name":"selectedDate","description":"<p>To mark the active (current) date on the Schedule, <code>selectedDate</code> property can be defined.\nUsually, it defaults to the current System date.</p>\n","type":"Date","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#selecteddate"}],"schedule/date-header-template":[{"name":"cssClass","description":"<p>It is used to customize the Schedule which accepts custom CSS class names that defines specific user-defined styles and themes\nto be applied on the Schedule element.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#cssclass"},{"name":"dateHeaderTemplate","description":"<p>It accepts either the string or HTMLElement as template design content and parse it appropriately before displaying it onto\nthe date header cells. The field that can be accessed via this template is <code>date</code>.</p>\n","type":"string|Function","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#dateheadertemplate"},{"name":"eventRendered","description":"<p>Triggers before each of the event getting rendered on the scheduler user interface.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#eventrendered"},{"name":"eventSettings","description":"<p>Complete set of settings related to Schedule events to bind it to local or remote dataSource, map applicable database fields and\nother validation to be carried out on the available fields.</p>\n","type":"EventSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#eventsettings"},{"name":"renderCell","description":"<p>Triggers before each element of the schedule rendering on the page.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#rendercell"}],"schedule/event-template":[{"name":"width","description":"<p>Sets the <code>width</code> of the Schedule component, accepting both string and number values.</p>\n<p>The string value can be either pixel or percentage format.\nWhen set to <code>auto</code>, the Schedule width gets auto-adjusted and display its content related to the viewable screen size.</p>\n","type":"string|number","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#width"},{"name":"height","description":"<p>Sets the <code>height</code> of the Schedule component, accepting both string and number values.</p>\n<p>The string type includes either pixel or percentage values.\nWhen <code>height</code> is set with specific pixel value, then the Schedule will be rendered to that specified space.\nIn case, if <code>auto</code> value is set, then the height of the Schedule gets auto-adjusted within the given container.</p>\n","type":"string|number","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#height"},{"name":"cellTemplate","description":"<p>The template option which is used to render the customized work cells on the Schedule. Here, the template accepts either\nthe string or HTMLElement as template design and then the parsed design is displayed onto the work cells.\nThe fields accessible via template are as follows.</p>\n<ul>\n<li><code>date</code>: Returns the date of the cell.</li>\n<li><code>groupIndex</code>: Returns the group index of the cell.</li>\n<li><code>type</code>: Returns the type of the work cell.\nRefer to the below code snippet.</li>\n</ul>\n","type":"string|Function","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#celltemplate"},{"name":"views","description":"<p>This property holds the views collection and its configurations. It accepts either the array of view names or the array of view\nobjects that holds different configurations for each views. By default,\nSchedule displays all the views namely <code>Day</code>, <code>Week</code>, <code>Work Week</code>, <code>Month</code> and <code>Agenda</code>.\nExample for array of views:</p>\n<p>Example for array of view objects:</p>\n","type":"View[]|ViewsModel[]","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#views"},{"name":"eventSettings","description":"<p>Complete set of settings related to Schedule events to bind it to local or remote dataSource, map applicable database fields and\nother validation to be carried out on the available fields.</p>\n","type":"EventSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#eventsettings"},{"name":"selectedDate","description":"<p>To mark the active (current) date on the Schedule, <code>selectedDate</code> property can be defined.\nUsually, it defaults to the current System date.</p>\n","type":"Date","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#selecteddate"}],"schedule/tooltip":[{"name":"width","description":"<p>Sets the <code>width</code> of the Schedule component, accepting both string and number values.</p>\n<p>The string value can be either pixel or percentage format.\nWhen set to <code>auto</code>, the Schedule width gets auto-adjusted and display its content related to the viewable screen size.</p>\n","type":"string|number","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#width"},{"name":"height","description":"<p>Sets the <code>height</code> of the Schedule component, accepting both string and number values.</p>\n<p>The string type includes either pixel or percentage values.\nWhen <code>height</code> is set with specific pixel value, then the Schedule will be rendered to that specified space.\nIn case, if <code>auto</code> value is set, then the height of the Schedule gets auto-adjusted within the given container.</p>\n","type":"string|number","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#height"},{"name":"eventSettings","description":"<p>Complete set of settings related to Schedule events to bind it to local or remote dataSource, map applicable database fields and\nother validation to be carried out on the available fields.</p>\n","type":"EventSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#eventsettings"},{"name":"selectedDate","description":"<p>To mark the active (current) date on the Schedule, <code>selectedDate</code> property can be defined.\nUsually, it defaults to the current System date.</p>\n","type":"Date","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#selecteddate"}],"schedule/quick-info-template":[{"name":"width","description":"<p>Sets the <code>width</code> of the Schedule component, accepting both string and number values.</p>\n<p>The string value can be either pixel or percentage format.\nWhen set to <code>auto</code>, the Schedule width gets auto-adjusted and display its content related to the viewable screen size.</p>\n","type":"string|number","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#width"},{"name":"height","description":"<p>Sets the <code>height</code> of the Schedule component, accepting both string and number values.</p>\n<p>The string type includes either pixel or percentage values.\nWhen <code>height</code> is set with specific pixel value, then the Schedule will be rendered to that specified space.\nIn case, if <code>auto</code> value is set, then the height of the Schedule gets auto-adjusted within the given container.</p>\n","type":"string|number","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#height"},{"name":"eventSettings","description":"<p>Complete set of settings related to Schedule events to bind it to local or remote dataSource, map applicable database fields and\nother validation to be carried out on the available fields.</p>\n","type":"EventSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#eventsettings"},{"name":"selectedDate","description":"<p>To mark the active (current) date on the Schedule, <code>selectedDate</code> property can be defined.\nUsually, it defaults to the current System date.</p>\n","type":"Date","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#selecteddate"},{"name":"quickInfoTemplates","description":"<p>The template option to customize the quick window. The three sections of the quick popup whereas the header, content,\nand footer can be easily customized with individual template option.</p>\n","type":"QuickInfoTemplatesModel","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#quickinfotemplates"}],"schedule/editor-validation":[{"name":"width","description":"<p>Sets the <code>width</code> of the Schedule component, accepting both string and number values.</p>\n<p>The string value can be either pixel or percentage format.\nWhen set to <code>auto</code>, the Schedule width gets auto-adjusted and display its content related to the viewable screen size.</p>\n","type":"string|number","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#width"},{"name":"height","description":"<p>Sets the <code>height</code> of the Schedule component, accepting both string and number values.</p>\n<p>The string type includes either pixel or percentage values.\nWhen <code>height</code> is set with specific pixel value, then the Schedule will be rendered to that specified space.\nIn case, if <code>auto</code> value is set, then the height of the Schedule gets auto-adjusted within the given container.</p>\n","type":"string|number","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#height"},{"name":"eventSettings","description":"<p>Complete set of settings related to Schedule events to bind it to local or remote dataSource, map applicable database fields and\nother validation to be carried out on the available fields.</p>\n","type":"EventSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#eventsettings"},{"name":"selectedDate","description":"<p>To mark the active (current) date on the Schedule, <code>selectedDate</code> property can be defined.\nUsually, it defaults to the current System date.</p>\n","type":"Date","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#selecteddate"}],"schedule/editor-custom-field":[{"name":"selectedDate","description":"<p>To mark the active (current) date on the Schedule, <code>selectedDate</code> property can be defined.\nUsually, it defaults to the current System date.</p>\n","type":"Date","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#selecteddate"},{"name":"eventSettings","description":"<p>Complete set of settings related to Schedule events to bind it to local or remote dataSource, map applicable database fields and\nother validation to be carried out on the available fields.</p>\n","type":"EventSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#eventsettings"},{"name":"popupOpen","description":"<p>Triggers before any of the scheduler popups opens on the page.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#popupopen"}],"schedule/editor-template":[{"name":"editorTemplate","description":"<p>The template option to render the customized editor window. The form elements defined within this template should be accompanied\nwith <code>e-field</code> class, so as to fetch and process it from internally.</p>\n","type":"string|Function","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#editortemplate"},{"name":"showQuickInfo","description":"<p>When set to <code>true</code>, displays a quick popup with cell or event details on single clicking over the cells or on events.\nBy default, it is set to <code>true</code>.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#showquickinfo"},{"name":"eventRendered","description":"<p>Triggers before each of the event getting rendered on the scheduler user interface.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#eventrendered"},{"name":"popupOpen","description":"<p>Triggers before any of the scheduler popups opens on the page.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#popupopen"},{"name":"actionBegin","description":"<p>Triggers on beginning of every scheduler action.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#actionbegin"}],"schedule/header-rows":[{"name":"height","description":"<p>Sets the <code>height</code> of the Schedule component, accepting both string and number values.</p>\n<p>The string type includes either pixel or percentage values.\nWhen <code>height</code> is set with specific pixel value, then the Schedule will be rendered to that specified space.\nIn case, if <code>auto</code> value is set, then the height of the Schedule gets auto-adjusted within the given container.</p>\n","type":"string|number","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#height"},{"name":"eventSettings","description":"<p>Complete set of settings related to Schedule events to bind it to local or remote dataSource, map applicable database fields and\nother validation to be carried out on the available fields.</p>\n","type":"EventSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#eventsettings"},{"name":"selectedDate","description":"<p>To mark the active (current) date on the Schedule, <code>selectedDate</code> property can be defined.\nUsually, it defaults to the current System date.</p>\n","type":"Date","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#selecteddate"},{"name":"headerRows","description":"<p>Allows defining the collection of custom header rows to display the year, month, week, date and hour label as an individual row\non the timeline view of the scheduler.</p>\n","type":"HeaderRowsModel[]","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#headerrows"}],"schedule/time-scale":[{"name":"width","description":"<p>Sets the <code>width</code> of the Schedule component, accepting both string and number values.</p>\n<p>The string value can be either pixel or percentage format.\nWhen set to <code>auto</code>, the Schedule width gets auto-adjusted and display its content related to the viewable screen size.</p>\n","type":"string|number","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#width"},{"name":"height","description":"<p>Sets the <code>height</code> of the Schedule component, accepting both string and number values.</p>\n<p>The string type includes either pixel or percentage values.\nWhen <code>height</code> is set with specific pixel value, then the Schedule will be rendered to that specified space.\nIn case, if <code>auto</code> value is set, then the height of the Schedule gets auto-adjusted within the given container.</p>\n","type":"string|number","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#height"},{"name":"views","description":"<p>This property holds the views collection and its configurations. It accepts either the array of view names or the array of view\nobjects that holds different configurations for each views. By default,\nSchedule displays all the views namely <code>Day</code>, <code>Week</code>, <code>Work Week</code>, <code>Month</code> and <code>Agenda</code>.\nExample for array of views:</p>\n<p>Example for array of view objects:</p>\n","type":"View[]|ViewsModel[]","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#views"},{"name":"timeScale","description":"<p>Allows to set different time duration on Schedule along with the customized grid count. It also has template option to\ncustomize the time slots with required time values in its own format.</p>\n","type":"TimeScaleModel","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#timescale"}],"schedule/context-menu":[{"name":"height","description":"<p>Sets the <code>height</code> of the Schedule component, accepting both string and number values.</p>\n<p>The string type includes either pixel or percentage values.\nWhen <code>height</code> is set with specific pixel value, then the Schedule will be rendered to that specified space.\nIn case, if <code>auto</code> value is set, then the height of the Schedule gets auto-adjusted within the given container.</p>\n","type":"string|number","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#height"},{"name":"eventSettings","description":"<p>Complete set of settings related to Schedule events to bind it to local or remote dataSource, map applicable database fields and\nother validation to be carried out on the available fields.</p>\n","type":"EventSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#eventsettings"},{"name":"selectedDate","description":"<p>To mark the active (current) date on the Schedule, <code>selectedDate</code> property can be defined.\nUsually, it defaults to the current System date.</p>\n","type":"Date","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#selecteddate"}],"schedule/header-bar":[{"name":"width","description":"<p>Sets the <code>width</code> of the Schedule component, accepting both string and number values.</p>\n<p>The string value can be either pixel or percentage format.\nWhen set to <code>auto</code>, the Schedule width gets auto-adjusted and display its content related to the viewable screen size.</p>\n","type":"string|number","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#width"},{"name":"height","description":"<p>Sets the <code>height</code> of the Schedule component, accepting both string and number values.</p>\n<p>The string type includes either pixel or percentage values.\nWhen <code>height</code> is set with specific pixel value, then the Schedule will be rendered to that specified space.\nIn case, if <code>auto</code> value is set, then the height of the Schedule gets auto-adjusted within the given container.</p>\n","type":"string|number","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#height"},{"name":"workHours","description":"<p>The working hours should be highlighted on Schedule with different color shade and an additional option must be provided to\nhighlight it or not. This functionality is handled through <code>workHours</code> property and the start work hour should be 9 AM by default\nand end work hour should point to 6 PM. The start and end working hours needs to be provided as Time value of short skeleton type.</p>\n","type":"WorkHoursModel","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#workhours"},{"name":"views","description":"<p>This property holds the views collection and its configurations. It accepts either the array of view names or the array of view\nobjects that holds different configurations for each views. By default,\nSchedule displays all the views namely <code>Day</code>, <code>Week</code>, <code>Work Week</code>, <code>Month</code> and <code>Agenda</code>.\nExample for array of views:</p>\n<p>Example for array of view objects:</p>\n","type":"View[]|ViewsModel[]","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#views"},{"name":"eventSettings","description":"<p>Complete set of settings related to Schedule events to bind it to local or remote dataSource, map applicable database fields and\nother validation to be carried out on the available fields.</p>\n","type":"EventSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#eventsettings"},{"name":"selectedDate","description":"<p>To mark the active (current) date on the Schedule, <code>selectedDate</code> property can be defined.\nUsually, it defaults to the current System date.</p>\n","type":"Date","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#selecteddate"}],"schedule/scroll-to":[{"name":"width","description":"<p>Sets the <code>width</code> of the Schedule component, accepting both string and number values.</p>\n<p>The string value can be either pixel or percentage format.\nWhen set to <code>auto</code>, the Schedule width gets auto-adjusted and display its content related to the viewable screen size.</p>\n","type":"string|number","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#width"},{"name":"height","description":"<p>Sets the <code>height</code> of the Schedule component, accepting both string and number values.</p>\n<p>The string type includes either pixel or percentage values.\nWhen <code>height</code> is set with specific pixel value, then the Schedule will be rendered to that specified space.\nIn case, if <code>auto</code> value is set, then the height of the Schedule gets auto-adjusted within the given container.</p>\n","type":"string|number","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#height"},{"name":"eventSettings","description":"<p>Complete set of settings related to Schedule events to bind it to local or remote dataSource, map applicable database fields and\nother validation to be carried out on the available fields.</p>\n","type":"EventSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#eventsettings"},{"name":"eventRendered","description":"<p>Triggers before each of the event getting rendered on the scheduler user interface.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#eventrendered"},{"name":"scrollTo","description":"<p>Scrolls the Schedule content area to the specified time.</p>\n","type":"Method","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#scrollto"}],"schedule/work-days":[{"name":"workDays","description":"<p>It is used to set the working days on Schedule. The only days that are defined in this collection will be rendered on the <code>workWeek</code>\nview whereas on other views, it will display all the usual days and simply highlights the working days with different shade.</p>\n","type":"number[]","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#workdays"},{"name":"views","description":"<p>This property holds the views collection and its configurations. It accepts either the array of view names or the array of view\nobjects that holds different configurations for each views. By default,\nSchedule displays all the views namely <code>Day</code>, <code>Week</code>, <code>Work Week</code>, <code>Month</code> and <code>Agenda</code>.\nExample for array of views:</p>\n<p>Example for array of view objects:</p>\n","type":"View[]|ViewsModel[]","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#views"},{"name":"eventSettings","description":"<p>Complete set of settings related to Schedule events to bind it to local or remote dataSource, map applicable database fields and\nother validation to be carried out on the available fields.</p>\n","type":"EventSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#eventsettings"},{"name":"selectedDate","description":"<p>To mark the active (current) date on the Schedule, <code>selectedDate</code> property can be defined.\nUsually, it defaults to the current System date.</p>\n","type":"Date","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#selecteddate"}],"schedule/hide-weekend":[{"name":"showWeekend","description":"<p>When set to <code>false</code>, it hides the weekend days of a week from the Schedule. The days which are not defined in the working days\ncollection are usually treated as weekend days.\nNote: By default, this option is not applicable on <code>Work Week</code> view.\nFor example, if the working days are defined as [1, 2, 3, 4], then the remaining days of that week will be considered as\nthe weekend days and will be hidden on all the views.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#showweekend"}],"schedule/work-hours":[{"name":"workHours","description":"<p>The working hours should be highlighted on Schedule with different color shade and an additional option must be provided to\nhighlight it or not. This functionality is handled through <code>workHours</code> property and the start work hour should be 9 AM by default\nand end work hour should point to 6 PM. The start and end working hours needs to be provided as Time value of short skeleton type.</p>\n","type":"WorkHoursModel","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#workhours"},{"name":"views","description":"<p>This property holds the views collection and its configurations. It accepts either the array of view names or the array of view\nobjects that holds different configurations for each views. By default,\nSchedule displays all the views namely <code>Day</code>, <code>Week</code>, <code>Work Week</code>, <code>Month</code> and <code>Agenda</code>.\nExample for array of views:</p>\n<p>Example for array of view objects:</p>\n","type":"View[]|ViewsModel[]","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#views"},{"name":"eventSettings","description":"<p>Complete set of settings related to Schedule events to bind it to local or remote dataSource, map applicable database fields and\nother validation to be carried out on the available fields.</p>\n","type":"EventSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#eventsettings"},{"name":"selectedDate","description":"<p>To mark the active (current) date on the Schedule, <code>selectedDate</code> property can be defined.\nUsually, it defaults to the current System date.</p>\n","type":"Date","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#selecteddate"}],"schedule/start-end-hour":[{"name":"startHour","description":"<p>It is used to specify the starting hour, from which the Schedule starts to display. It accepts the time string in a short skeleton\nformat and also, hides the time beyond the specified start time.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#starthour"},{"name":"endHour","description":"<p>It is used to specify the end hour, at which the Schedule ends. It too accepts the time string in a short skeleton format.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#endhour"},{"name":"workHours","description":"<p>The working hours should be highlighted on Schedule with different color shade and an additional option must be provided to\nhighlight it or not. This functionality is handled through <code>workHours</code> property and the start work hour should be 9 AM by default\nand end work hour should point to 6 PM. The start and end working hours needs to be provided as Time value of short skeleton type.</p>\n","type":"WorkHoursModel","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#workhours"},{"name":"eventRendered","description":"<p>Triggers before each of the event getting rendered on the scheduler user interface.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#eventrendered"}],"schedule/cell-dimension":[{"name":"cssClass","description":"<p>It is used to customize the Schedule which accepts custom CSS class names that defines specific user-defined styles and themes\nto be applied on the Schedule element.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#cssclass"},{"name":"showTimeIndicator","description":"<p>When set to <code>false</code>, hides the current time indicator from the Schedule. Otherwise,\nit visually depicts the live current system time appropriately on the user interface.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#showtimeindicator"},{"name":"eventRendered","description":"<p>Triggers before each of the event getting rendered on the scheduler user interface.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#eventrendered"},{"name":"created","description":"<p>Triggers after the scheduler component is created.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#created"},{"name":"actionComplete","description":"<p>Triggers on successful completion of the scheduler actions.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#actioncomplete"}],"schedule/read-only-events":[{"name":"eventSettings","description":"<p>Complete set of settings related to Schedule events to bind it to local or remote dataSource, map applicable database fields and\nother validation to be carried out on the available fields.</p>\n","type":"EventSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#eventsettings"},{"name":"eventRendered","description":"<p>Triggers before each of the event getting rendered on the scheduler user interface.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#eventrendered"},{"name":"eventClick","description":"<p>Triggers when the events are single clicked or on single tapping the events on the mobile devices.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#eventclick"},{"name":"popupOpen","description":"<p>Triggers before any of the scheduler popups opens on the page.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#popupopen"},{"name":"eventRendered","description":"<p>Triggers before each of the event getting rendered on the scheduler user interface.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#eventrendered"}],"schedule/reminder":[{"name":"eventSettings","description":"<p>Complete set of settings related to Schedule events to bind it to local or remote dataSource, map applicable database fields and\nother validation to be carried out on the available fields.</p>\n","type":"EventSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#eventsettings"},{"name":"created","description":"<p>Triggers after the scheduler component is created.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#created"}],"schedule/excel-export":[{"name":"height","description":"<p>Sets the <code>height</code> of the Schedule component, accepting both string and number values.</p>\n<p>The string type includes either pixel or percentage values.\nWhen <code>height</code> is set with specific pixel value, then the Schedule will be rendered to that specified space.\nIn case, if <code>auto</code> value is set, then the height of the Schedule gets auto-adjusted within the given container.</p>\n","type":"string|number","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#height"},{"name":"eventSettings","description":"<p>Complete set of settings related to Schedule events to bind it to local or remote dataSource, map applicable database fields and\nother validation to be carried out on the available fields.</p>\n","type":"EventSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#eventsettings"},{"name":"selectedDate","description":"<p>To mark the active (current) date on the Schedule, <code>selectedDate</code> property can be defined.\nUsually, it defaults to the current System date.</p>\n","type":"Date","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#selecteddate"}],"schedule/calendar-export-import":[{"name":"importICalendar","description":"<p>Imports the events from an .ics file downloaded from any of the calendars like Google or Outlook into the Scheduler.\nThis method accepts the blob object or string format of an .ics file to be imported as a mandatory argument.</p>\n","type":"Method","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#importicalendar"},{"name":"exportToICalendar","description":"<p>Exports the Scheduler events to a calendar (.ics) file. By default, the calendar is exported with a file name <code>Calendar.ics</code>.\nTo change this file name on export, pass the custom string value as <code>fileName</code> to get the file downloaded with this provided name.</p>\n","type":"Method","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#exporttoicalendar"}],"schedule/print":[{"name":"height","description":"<p>Sets the <code>height</code> of the Schedule component, accepting both string and number values.</p>\n<p>The string type includes either pixel or percentage values.\nWhen <code>height</code> is set with specific pixel value, then the Schedule will be rendered to that specified space.\nIn case, if <code>auto</code> value is set, then the height of the Schedule gets auto-adjusted within the given container.</p>\n","type":"string|number","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#height"},{"name":"eventSettings","description":"<p>Complete set of settings related to Schedule events to bind it to local or remote dataSource, map applicable database fields and\nother validation to be carried out on the available fields.</p>\n","type":"EventSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#eventsettings"},{"name":"selectedDate","description":"<p>To mark the active (current) date on the Schedule, <code>selectedDate</code> property can be defined.\nUsually, it defaults to the current System date.</p>\n","type":"Date","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#selecteddate"}],"schedule/clipboard":[{"name":"width","description":"<p>Sets the <code>width</code> of the Schedule component, accepting both string and number values.</p>\n<p>The string value can be either pixel or percentage format.\nWhen set to <code>auto</code>, the Schedule width gets auto-adjusted and display its content related to the viewable screen size.</p>\n","type":"string|number","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#width"},{"name":"height","description":"<p>Sets the <code>height</code> of the Schedule component, accepting both string and number values.</p>\n<p>The string type includes either pixel or percentage values.\nWhen <code>height</code> is set with specific pixel value, then the Schedule will be rendered to that specified space.\nIn case, if <code>auto</code> value is set, then the height of the Schedule gets auto-adjusted within the given container.</p>\n","type":"string|number","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#height"},{"name":"eventSettings","description":"<p>Complete set of settings related to Schedule events to bind it to local or remote dataSource, map applicable database fields and\nother validation to be carried out on the available fields.</p>\n","type":"EventSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#eventsettings"},{"name":"selectedDate","description":"<p>To mark the active (current) date on the Schedule, <code>selectedDate</code> property can be defined.\nUsually, it defaults to the current System date.</p>\n","type":"Date","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#selecteddate"},{"name":"allowKeyboardInteraction","description":"<p>When set to <code>true</code>, allows the keyboard interaction to take place on Schedule.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#allowkeyboardinteraction"},{"name":"allowClipboard","description":"<p>Enables clipboard functionality for appointments, allowing them to be copied using keyboard shortcuts and pasted onto the Scheduler.\nWhen set to <code>true</code>, users can use keyboard shortcuts to cut, copy appointments and paste them into different time slots or calendars.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#allowclipboard"}],"schedule/keyboard-interaction":[{"name":"width","description":"<p>Sets the <code>width</code> of the Schedule component, accepting both string and number values.</p>\n<p>The string value can be either pixel or percentage format.\nWhen set to <code>auto</code>, the Schedule width gets auto-adjusted and display its content related to the viewable screen size.</p>\n","type":"string|number","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#width"},{"name":"height","description":"<p>Sets the <code>height</code> of the Schedule component, accepting both string and number values.</p>\n<p>The string type includes either pixel or percentage values.\nWhen <code>height</code> is set with specific pixel value, then the Schedule will be rendered to that specified space.\nIn case, if <code>auto</code> value is set, then the height of the Schedule gets auto-adjusted within the given container.</p>\n","type":"string|number","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#height"},{"name":"eventSettings","description":"<p>Complete set of settings related to Schedule events to bind it to local or remote dataSource, map applicable database fields and\nother validation to be carried out on the available fields.</p>\n","type":"EventSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#eventsettings"},{"name":"selectedDate","description":"<p>To mark the active (current) date on the Schedule, <code>selectedDate</code> property can be defined.\nUsually, it defaults to the current System date.</p>\n","type":"Date","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#selecteddate"},{"name":"allowKeyboardInteraction","description":"<p>When set to <code>true</code>, allows the keyboard interaction to take place on Schedule.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#allowkeyboardinteraction"}],"schedule/events":[{"name":"width","description":"<p>Sets the <code>width</code> of the Schedule component, accepting both string and number values.</p>\n<p>The string value can be either pixel or percentage format.\nWhen set to <code>auto</code>, the Schedule width gets auto-adjusted and display its content related to the viewable screen size.</p>\n","type":"string|number","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#width"},{"name":"height","description":"<p>Sets the <code>height</code> of the Schedule component, accepting both string and number values.</p>\n<p>The string type includes either pixel or percentage values.\nWhen <code>height</code> is set with specific pixel value, then the Schedule will be rendered to that specified space.\nIn case, if <code>auto</code> value is set, then the height of the Schedule gets auto-adjusted within the given container.</p>\n","type":"string|number","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#height"},{"name":"eventSettings","description":"<p>Complete set of settings related to Schedule events to bind it to local or remote dataSource, map applicable database fields and\nother validation to be carried out on the available fields.</p>\n","type":"EventSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#eventsettings"},{"name":"eventRendered","description":"<p>Triggers before each of the event getting rendered on the scheduler user interface.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#eventrendered"},{"name":"created","description":"<p>Triggers after the scheduler component is created.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#created"},{"name":"actionBegin","description":"<p>Triggers on beginning of every scheduler action.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#actionbegin"},{"name":"actionComplete","description":"<p>Triggers on successful completion of the scheduler actions.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#actioncomplete"},{"name":"actionFailure","description":"<p>Triggers when a scheduler action gets failed or interrupted and an error information will be returned.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#actionfailure"},{"name":"cellClick","description":"<p>Triggers when the scheduler cells are single clicked or on single tap on the same cells in mobile devices.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#cellclick"},{"name":"cellDoubleClick","description":"<p>Triggers when the scheduler cells are double clicked.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#celldoubleclick"},{"name":"destroyed","description":"<p>Triggers when the scheduler component is destroyed.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#destroyed"},{"name":"navigating","description":"<p>Triggers before the date or view navigation takes place on scheduler.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#navigating"},{"name":"eventClick","description":"<p>Triggers when the events are single clicked or on single tapping the events on the mobile devices.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#eventclick"},{"name":"popupOpen","description":"<p>Triggers before any of the scheduler popups opens on the page.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#popupopen"}],"sidebar/default":[{"name":"type","description":"<p>Specifies the expanding types of the Sidebar.</p>\n<ul>\n<li><code>Over</code> - The sidebar floats over the main content area.</li>\n<li><code>Push</code> - The sidebar pushes the main content area to appear side-by-side, and shrinks the main content within the screen width.</li>\n<li><code>Slide</code> - The sidebar translates the x and y positions of main content area based on the sidebar width.\nThe main content area will not be adjusted within the screen width.</li>\n<li><code>Auto</code> - Sidebar with <code>Over</code> type in mobile resolution and <code>Push</code> type in other higher resolutions.</li>\n</ul>\n<blockquote>\n<p>For more details about SidebarType refer to\n<a href=\"../../sidebar/variations/\"><code>SidebarType</code></a> documentation.</p>\n</blockquote>\n","type":"SidebarType","link":"//ej2.syncfusion.com/react/documentation/api/sidebar/#type"},{"name":"position","description":"<p>Specifies the position of the Sidebar (Left/Right) corresponding to the main content.</p>\n<blockquote>\n<p>For more details about SidebarPosition refer to\n<a href=\"https://ej2.syncfusion.com/documentation/sidebar/getting-started/#position\"><code>position</code></a> documentation.</p>\n</blockquote>\n","type":"SidebarPosition","link":"//ej2.syncfusion.com/react/documentation/api/sidebar/#position"},{"name":"showBackdrop","description":"<p>Specifies the whether to apply overlay options to main content when the Sidebar is in an open state.</p>\n<blockquote>\n<p>For more details about showBackdrop refer to\n<a href=\"https://ej2.syncfusion.com/documentation/sidebar/getting-started/#enable-backdrop\"><code>Backdrop</code></a> documentation.</p>\n</blockquote>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/sidebar/#showbackdrop"},{"name":"closeOnDocumentClick","description":"<p>Specifies whether the Sidebar need to be closed or not when document area is clicked.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/sidebar/#closeondocumentclick"},{"name":"change","description":"<p>Triggers when the state(expand/collapse) of the component is changed.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/sidebar/#change"},{"name":"mediaQuery","description":"<p>Specifies the media query string for resolution, which when met opens the Sidebar.</p>\n<blockquote>\n<p>For more details about mediaQuery refer to\n<a href=\"https://ej2.syncfusion.com/documentation/sidebar/auto-close/\"><code>Auto Close</code></a> documentation.</p>\n</blockquote>\n","type":"string|MediaQueryList","link":"//ej2.syncfusion.com/react/documentation/api/sidebar/#mediaquery"}],"spreadsheet/default":[{"name":"sheets","description":"<p>Configures sheets and its options.</p>\n","type":"SheetModel[]","link":"//ej2.syncfusion.com/react/documentation/api/spreadsheet/#sheets"},{"name":"openUrl","description":"<p>Specifies the service URL to open excel file in spreadsheet.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/spreadsheet/#openurl"},{"name":"saveUrl","description":"<p>Specifies the service URL to save spreadsheet as Excel file.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/spreadsheet/#saveurl"},{"name":"created","description":"<p>Triggers when the component is created.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/spreadsheet/#created"}],"spreadsheet/formula":[{"name":"sheets","description":"<p>Configures sheets and its options.</p>\n","type":"SheetModel[]","link":"//ej2.syncfusion.com/react/documentation/api/spreadsheet/#sheets"},{"name":"showRibbon","description":"<p>It shows or hides the ribbon in spreadsheet.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/spreadsheet/#showribbon"},{"name":"definedNames","description":"<p>Specifies the name of a range and uses it in a formula for calculation.</p>\n","type":"DefineNameModel[]","link":"//ej2.syncfusion.com/react/documentation/api/spreadsheet/#definednames"},{"name":"created","description":"<p>Triggers when the component is created.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/spreadsheet/#created"}],"spreadsheet/protect-sheet":[{"name":"sheets","description":"<p>Configures sheets and its options.</p>\n","type":"SheetModel[]","link":"//ej2.syncfusion.com/react/documentation/api/spreadsheet/#sheets"},{"name":"beforeCellRender","description":"<p>Triggers before the cell appended to the DOM.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/spreadsheet/#beforecellrender"},{"name":"created","description":"<p>Triggers when the component is created.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/spreadsheet/#created"}],"spreadsheet/cell-data-binding":[{"name":"sheets","description":"<p>Configures sheets and its options.</p>\n","type":"SheetModel[]","link":"//ej2.syncfusion.com/react/documentation/api/spreadsheet/#sheets"},{"name":"showFormulaBar","description":"<p>It shows or hides the formula bar and its features.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/spreadsheet/#showformulabar"},{"name":"showRibbon","description":"<p>It shows or hides the ribbon in spreadsheet.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/spreadsheet/#showribbon"}],"spreadsheet/remote-data-binding":[{"name":"sheets","description":"<p>Configures sheets and its options.</p>\n","type":"SheetModel[]","link":"//ej2.syncfusion.com/react/documentation/api/spreadsheet/#sheets"},{"name":"showFormulaBar","description":"<p>It shows or hides the formula bar and its features.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/spreadsheet/#showformulabar"},{"name":"showRibbon","description":"<p>It shows or hides the ribbon in spreadsheet.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/spreadsheet/#showribbon"}],"spreadsheet/conditional-formatting":[{"name":"sheets","description":"<p>Configures sheets and its options.</p>\n","type":"SheetModel[]","link":"//ej2.syncfusion.com/react/documentation/api/spreadsheet/#sheets"},{"name":"created","description":"<p>Triggers when the component is created.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/spreadsheet/#created"}],"spreadsheet/sorting-and-filtering":[{"name":"sheets","description":"<p>Configures sheets and its options.</p>\n","type":"SheetModel[]","link":"//ej2.syncfusion.com/react/documentation/api/spreadsheet/#sheets"},{"name":"created","description":"<p>Triggers when the component is created.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/spreadsheet/#created"}],"spreadsheet/chart":[{"name":"sheets","description":"<p>Configures sheets and its options.</p>\n","type":"SheetModel[]","link":"//ej2.syncfusion.com/react/documentation/api/spreadsheet/#sheets"},{"name":"openUrl","description":"<p>Specifies the service URL to open excel file in spreadsheet.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/spreadsheet/#openurl"},{"name":"saveUrl","description":"<p>Specifies the service URL to save spreadsheet as Excel file.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/spreadsheet/#saveurl"},{"name":"created","description":"<p>Triggers when the component is created.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/spreadsheet/#created"}],"spreadsheet/image":[{"name":"sheets","description":"<p>Configures sheets and its options.</p>\n","type":"SheetModel[]","link":"//ej2.syncfusion.com/react/documentation/api/spreadsheet/#sheets"},{"name":"showRibbon","description":"<p>It shows or hides the ribbon in spreadsheet.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/spreadsheet/#showribbon"},{"name":"showFormulaBar","description":"<p>It shows or hides the formula bar and its features.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/spreadsheet/#showformulabar"},{"name":"created","description":"<p>Triggers when the component is created.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/spreadsheet/#created"}],"spreadsheet/cell-template":[{"name":"sheets","description":"<p>Configures sheets and its options.</p>\n","type":"SheetModel[]","link":"//ej2.syncfusion.com/react/documentation/api/spreadsheet/#sheets"},{"name":"created","description":"<p>Triggers when the component is created.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/spreadsheet/#created"}],"spreadsheet/notes":[{"name":"sheets","description":"<p>Configures sheets and its options.</p>\n","type":"SheetModel[]","link":"//ej2.syncfusion.com/react/documentation/api/spreadsheet/#sheets"}],"spreadsheet/print":[{"name":"sheets","description":"<p>Configures sheets and its options.</p>\n","type":"SheetModel[]","link":"//ej2.syncfusion.com/react/documentation/api/spreadsheet/#sheets"}],"tab/default":[{"name":"items","description":"<p>An array of object that is used to configure the Tab component.</p>\n","type":"TabItemModel[]","link":"//ej2.syncfusion.com/react/documentation/api/tab/#items"}],"tab/orientation":[{"name":"headerPlacement","description":"<p>Specifies the orientation of Tab header.\nThe possible values for this property as follows</p>\n<ul>\n<li><code>Top</code>: Places the Tab header on the top.</li>\n<li><code>Bottom</code>: Places the Tab header at the bottom.</li>\n<li><code>Left</code>: Places the Tab header on the left.</li>\n<li><code>Right</code>: Places the Tab header at the right.</li>\n</ul>\n","type":"HeaderPosition","link":"//ej2.syncfusion.com/react/documentation/api/tab/#headerplacement"},{"name":"showCloseButton","description":"<p>Specifies whether to show the close button for header items to remove the item from the Tab.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/tab/#showclosebutton"}],"tab/responsive-modes":[{"name":"overflowMode","description":"<p>Specifies the Tab display mode when Tab content exceeds the viewing area.\nThe possible modes are:</p>\n<ul>\n<li><code>Scrollable</code>: All the elements are displayed in a single line with horizontal scrolling enabled.</li>\n<li><code>Popup</code>: Tab container holds the items that can be placed within the available space and rest of the items are moved to the popup.\nIf the popup content overflows the height of the page, the rest of the elements can be viewed by scrolling the popup.</li>\n</ul>\n","type":"OverflowMode","link":"//ej2.syncfusion.com/react/documentation/api/tab/#overflowmode"}],"tab/drag-and-drop":[{"name":"allowDragAndDrop","description":"<p>Sets true to allow drag and drop the Tab items</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/tab/#allowdraganddrop"},{"name":"onDragStart","description":"<p>The event will be fired before dragging the item from Tab</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/tab/#ondragstart"},{"name":"dragged","description":"<p>The event will be fired after dropping the Tab item</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/tab/#dragged"}],"tab/keyboard-interaction":[{"name":"overflowMode","description":"<p>Specifies the Tab display mode when Tab content exceeds the viewing area.\nThe possible modes are:</p>\n<ul>\n<li><code>Scrollable</code>: All the elements are displayed in a single line with horizontal scrolling enabled.</li>\n<li><code>Popup</code>: Tab container holds the items that can be placed within the available space and rest of the items are moved to the popup.\nIf the popup content overflows the height of the page, the rest of the elements can be viewed by scrolling the popup.</li>\n</ul>\n","type":"OverflowMode","link":"//ej2.syncfusion.com/react/documentation/api/tab/#overflowmode"}],"timepicker/default":[{"name":"placeholder","description":"<p>Specifies the placeholder text that is displayed in textbox.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/timepicker/#placeholder"}],"toolbar/default":[{"name":"items","description":"<p>An array of items that is used to configure Toolbar commands.</p>\n","type":"ItemModel[]","link":"//ej2.syncfusion.com/react/documentation/api/toolbar/#items"}],"toolbar/popup":[{"name":"overflowMode","description":"<p>Specifies the Toolbar display mode when Toolbar content exceeds the viewing area.\nThe possible values for this property as follows</p>\n<ul>\n<li>Scrollable: All the elements are displayed in a single line with horizontal scrolling enabled.</li>\n<li>Popup: Prioritized elements are displayed on the Toolbar and the rest of elements are moved to the <em>popup</em>.</li>\n<li>MultiRow: Displays the overflow toolbar items as an in-line of a toolbar.</li>\n<li>Extended: Hide the overflowing toolbar items in the next row.  Show the overflowing toolbar items when you click the expand icons.\nIf the popup content overflows the height of the page, the rest of the elements will be hidden.</li>\n</ul>\n","type":"OverflowMode","link":"//ej2.syncfusion.com/react/documentation/api/toolbar/#overflowmode"}],"toolbar/template":[{"name":"overflowMode","description":"<p>Specifies the Toolbar display mode when Toolbar content exceeds the viewing area.\nThe possible values for this property as follows</p>\n<ul>\n<li>Scrollable: All the elements are displayed in a single line with horizontal scrolling enabled.</li>\n<li>Popup: Prioritized elements are displayed on the Toolbar and the rest of elements are moved to the <em>popup</em>.</li>\n<li>MultiRow: Displays the overflow toolbar items as an in-line of a toolbar.</li>\n<li>Extended: Hide the overflowing toolbar items in the next row.  Show the overflowing toolbar items when you click the expand icons.\nIf the popup content overflows the height of the page, the rest of the elements will be hidden.</li>\n</ul>\n","type":"OverflowMode","link":"//ej2.syncfusion.com/react/documentation/api/toolbar/#overflowmode"}],"toolbar/keyboard-interaction":[{"name":"overflowMode","description":"<p>Specifies the Toolbar display mode when Toolbar content exceeds the viewing area.\nThe possible values for this property as follows</p>\n<ul>\n<li>Scrollable: All the elements are displayed in a single line with horizontal scrolling enabled.</li>\n<li>Popup: Prioritized elements are displayed on the Toolbar and the rest of elements are moved to the <em>popup</em>.</li>\n<li>MultiRow: Displays the overflow toolbar items as an in-line of a toolbar.</li>\n<li>Extended: Hide the overflowing toolbar items in the next row.  Show the overflowing toolbar items when you click the expand icons.\nIf the popup content overflows the height of the page, the rest of the elements will be hidden.</li>\n</ul>\n","type":"OverflowMode","link":"//ej2.syncfusion.com/react/documentation/api/toolbar/#overflowmode"}],"tooltip/default":[{"name":"content","description":"<p>It is used to display the content of Tooltip which can be both string and HTML Elements.\nRefer the documentation <a href=\"https://ej2.syncfusion.com/documentation/tooltip/content/\">here</a>\nto know more about this property with demo.</p>\n","type":"string|HTMLElement|Function","link":"//ej2.syncfusion.com/react/documentation/api/tooltip/#content"},{"name":"appendTo","description":"<p>Appends the control within the given HTML element</p>\n","type":"Method","link":"//ej2.syncfusion.com/react/documentation/api/tooltip/#appendto"},{"name":"position","description":"<p>It is used to set the position of Tooltip element, with respect to Target element.</p>\n","type":"Position","link":"//ej2.syncfusion.com/react/documentation/api/tooltip/#position"}],"tooltip/template":[{"name":"content","description":"<p>It is used to display the content of Tooltip which can be both string and HTML Elements.\nRefer the documentation <a href=\"https://ej2.syncfusion.com/documentation/tooltip/content/\">here</a>\nto know more about this property with demo.</p>\n","type":"string|HTMLElement|Function","link":"//ej2.syncfusion.com/react/documentation/api/tooltip/#content"},{"name":"target","description":"<p>It is used to denote the target selector where the Tooltip need to be displayed.\nThe target element is considered as parent container.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/tooltip/#target"},{"name":"beforeRender","description":"<p>We can trigger <code>beforeRender</code> event before the Tooltip and its contents are added to the DOM.\nWhen one of its arguments <code>cancel</code> is set to true, the Tooltip can be prevented from rendering on the page.\nThis event is mainly used for the purpose of customizing the Tooltip before it shows up on the screen.\nFor example, to load the AJAX content or to set new animation effects on the Tooltip, this event can be opted.\nRefer the documentation\n<a href=\"https://ej2.syncfusion.com/documentation/tooltip/content/#dynamic-content-via-ajax\">here</a>\nto know more about this property with demo.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/tooltip/#beforerender"},{"name":"showTipPointer","description":"<p>It is used to show or hide the tip pointer of Tooltip.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/tooltip/#showtippointer"},{"name":"offsetX","description":"<p>It sets the space between the target and Tooltip element in X axis.</p>\n","type":"number","link":"//ej2.syncfusion.com/react/documentation/api/tooltip/#offsetx"},{"name":"width","description":"<p>It is used to set the width of Tooltip component which accepts both string and number values.\nWhen set to auto, the Tooltip width gets auto adjusted to display its content within the viewable screen.</p>\n","type":"string|number","link":"//ej2.syncfusion.com/react/documentation/api/tooltip/#width"},{"name":"appendTo","description":"<p>Appends the control within the given HTML element</p>\n","type":"Method","link":"//ej2.syncfusion.com/react/documentation/api/tooltip/#appendto"}],"tooltip/ajaxcontent":[{"name":"content","description":"<p>It is used to display the content of Tooltip which can be both string and HTML Elements.\nRefer the documentation <a href=\"https://ej2.syncfusion.com/documentation/tooltip/content/\">here</a>\nto know more about this property with demo.</p>\n","type":"string|HTMLElement|Function","link":"//ej2.syncfusion.com/react/documentation/api/tooltip/#content"},{"name":"target","description":"<p>It is used to denote the target selector where the Tooltip need to be displayed.\nThe target element is considered as parent container.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/tooltip/#target"},{"name":"beforeRender","description":"<p>We can trigger <code>beforeRender</code> event before the Tooltip and its contents are added to the DOM.\nWhen one of its arguments <code>cancel</code> is set to true, the Tooltip can be prevented from rendering on the page.\nThis event is mainly used for the purpose of customizing the Tooltip before it shows up on the screen.\nFor example, to load the AJAX content or to set new animation effects on the Tooltip, this event can be opted.\nRefer the documentation\n<a href=\"https://ej2.syncfusion.com/documentation/tooltip/content/#dynamic-content-via-ajax\">here</a>\nto know more about this property with demo.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/tooltip/#beforerender"},{"name":"position","description":"<p>It is used to set the position of Tooltip element, with respect to Target element.</p>\n","type":"Position","link":"//ej2.syncfusion.com/react/documentation/api/tooltip/#position"},{"name":"dataBind","description":"<p>When invoked, applies the pending property changes immediately to the component.</p>\n","type":"Method","link":"//ej2.syncfusion.com/react/documentation/api/tooltip/#databind"},{"name":"appendTo","description":"<p>Appends the control within the given HTML element</p>\n","type":"Method","link":"//ej2.syncfusion.com/react/documentation/api/tooltip/#appendto"}],"tooltip/smartposition":[{"name":"content","description":"<p>It is used to display the content of Tooltip which can be both string and HTML Elements.\nRefer the documentation <a href=\"https://ej2.syncfusion.com/documentation/tooltip/content/\">here</a>\nto know more about this property with demo.</p>\n","type":"string|HTMLElement|Function","link":"//ej2.syncfusion.com/react/documentation/api/tooltip/#content"},{"name":"target","description":"<p>It is used to denote the target selector where the Tooltip need to be displayed.\nThe target element is considered as parent container.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/tooltip/#target"},{"name":"animation","description":"<p>We can set the same or different animation option to Tooltip while it is in open or close state.\nRefer the documentation <a href=\"https://ej2.syncfusion.com/documentation/tooltip/animation/\">here</a>\nto know more about this property with demo.</p>\n","type":"AnimationModel","link":"//ej2.syncfusion.com/react/documentation/api/tooltip/#animation"},{"name":"open","description":"<p>It is used to show the Tooltip on the specified target with specific animation settings.</p>\n","type":"Method","link":"//ej2.syncfusion.com/react/documentation/api/tooltip/#open"},{"name":"offsetX","description":"<p>It sets the space between the target and Tooltip element in X axis.</p>\n","type":"number","link":"//ej2.syncfusion.com/react/documentation/api/tooltip/#offsetx"},{"name":"close","description":"<p>It is used to hide the Tooltip with specific animation effect.</p>\n","type":"Method","link":"//ej2.syncfusion.com/react/documentation/api/tooltip/#close"},{"name":"refresh","description":"<p>It is used to refresh the Tooltip content and its position.</p>\n","type":"Method","link":"//ej2.syncfusion.com/react/documentation/api/tooltip/#refresh"},{"name":"appendTo","description":"<p>Appends the control within the given HTML element</p>\n","type":"Method","link":"//ej2.syncfusion.com/react/documentation/api/tooltip/#appendto"}],"tooltip/tooltip-menu":[{"name":"content","description":"<p>It is used to display the content of Tooltip which can be both string and HTML Elements.\nRefer the documentation <a href=\"https://ej2.syncfusion.com/documentation/tooltip/content/\">here</a>\nto know more about this property with demo.</p>\n","type":"string|HTMLElement|Function","link":"//ej2.syncfusion.com/react/documentation/api/tooltip/#content"},{"name":"target","description":"<p>It is used to denote the target selector where the Tooltip need to be displayed.\nThe target element is considered as parent container.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/tooltip/#target"},{"name":"open","description":"<p>It is used to show the Tooltip on the specified target with specific animation settings.</p>\n","type":"Method","link":"//ej2.syncfusion.com/react/documentation/api/tooltip/#open"},{"name":"close","description":"<p>It is used to hide the Tooltip with specific animation effect.</p>\n","type":"Method","link":"//ej2.syncfusion.com/react/documentation/api/tooltip/#close"},{"name":"refresh","description":"<p>It is used to refresh the Tooltip content and its position.</p>\n","type":"Method","link":"//ej2.syncfusion.com/react/documentation/api/tooltip/#refresh"}],"tooltip/html-content":[{"name":"content","description":"<p>It is used to display the content of Tooltip which can be both string and HTML Elements.\nRefer the documentation <a href=\"https://ej2.syncfusion.com/documentation/tooltip/content/\">here</a>\nto know more about this property with demo.</p>\n","type":"string|HTMLElement|Function","link":"//ej2.syncfusion.com/react/documentation/api/tooltip/#content"},{"name":"target","description":"<p>It is used to denote the target selector where the Tooltip need to be displayed.\nThe target element is considered as parent container.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/tooltip/#target"},{"name":"open","description":"<p>It is used to show the Tooltip on the specified target with specific animation settings.</p>\n","type":"Method","link":"//ej2.syncfusion.com/react/documentation/api/tooltip/#open"},{"name":"close","description":"<p>It is used to hide the Tooltip with specific animation effect.</p>\n","type":"Method","link":"//ej2.syncfusion.com/react/documentation/api/tooltip/#close"},{"name":"refresh","description":"<p>It is used to refresh the Tooltip content and its position.</p>\n","type":"Method","link":"//ej2.syncfusion.com/react/documentation/api/tooltip/#refresh"}],"tooltip/api":[{"name":"content","description":"<p>It is used to display the content of Tooltip which can be both string and HTML Elements.\nRefer the documentation <a href=\"https://ej2.syncfusion.com/documentation/tooltip/content/\">here</a>\nto know more about this property with demo.</p>\n","type":"string|HTMLElement|Function","link":"//ej2.syncfusion.com/react/documentation/api/tooltip/#content"},{"name":"target","description":"<p>It is used to denote the target selector where the Tooltip need to be displayed.\nThe target element is considered as parent container.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/tooltip/#target"},{"name":"open","description":"<p>It is used to show the Tooltip on the specified target with specific animation settings.</p>\n","type":"Method","link":"//ej2.syncfusion.com/react/documentation/api/tooltip/#open"},{"name":"close","description":"<p>It is used to hide the Tooltip with specific animation effect.</p>\n","type":"Method","link":"//ej2.syncfusion.com/react/documentation/api/tooltip/#close"},{"name":"refresh","description":"<p>It is used to refresh the Tooltip content and its position.</p>\n","type":"Method","link":"//ej2.syncfusion.com/react/documentation/api/tooltip/#refresh"},{"name":"width","description":"<p>It is used to set the width of Tooltip component which accepts both string and number values.\nWhen set to auto, the Tooltip width gets auto adjusted to display its content within the viewable screen.</p>\n","type":"string|number","link":"//ej2.syncfusion.com/react/documentation/api/tooltip/#width"},{"name":"height","description":"<p>It is used to set the height of Tooltip component which accepts both string and number values.\nWhen Tooltip content gets overflow due to height value then the scroll mode will be enabled.\nRefer the documentation <a href=\"https://ej2.syncfusion.com/documentation/tooltip/setting-dimension/\">here</a>\nto know more about this property with demo.</p>\n","type":"string|number","link":"//ej2.syncfusion.com/react/documentation/api/tooltip/#height"},{"name":"opensOn","description":"<p>It is used to determine the device mode to display the Tooltip content.\nIf it is in desktop, it will show the Tooltip content when hovering on the target element.\nIf it is in touch device, it will show the Tooltip content when tap and holding on the target element.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/tooltip/#openson"}],"treegrid/treegrid-overview":[{"name":"queryCellInfo","description":"<p>Triggered every time a request is made to access cell information, element, or data.\nThis event is triggered before the cell element is appended to the TreeGrid element.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#querycellinfo"},{"name":"dataSource","description":"<p>It is used to render TreeGrid table rows.</p>\n","type":"Object|DataManager","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#datasource"},{"name":"enableVirtualization","description":"<p>If <code>enableVirtualization</code> set to true, then the TreeGrid will render only the rows visible within the view-port\nand load subsequent rows on vertical scrolling. This helps to load large dataset in TreeGrid.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#enablevirtualization"},{"name":"allowFiltering","description":"<p>If <code>allowFiltering</code> is set to true the filter bar will be displayed.\nIf set to false the filter bar will not be displayed.\nFilter bar allows the user to filter tree grid records with required criteria.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#allowfiltering"},{"name":"allowSorting","description":"<p>If <code>allowSorting</code> is set to true, it allows sorting of treegrid records when column header is clicked.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#allowsorting"},{"name":"allowSelection","description":"<p>If <code>allowSelection</code> is set to true, selection of (highlight row) TreeGrid records by clicking is allowed.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#allowselection"},{"name":"selectionSettings","description":"<p>Configures the selection behavior.</p>\n","type":"SelectionSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#selectionsettings"},{"name":"height","description":"<p>Defines the scrollable height of the TreeGrid content.</p>\n","type":"string|number","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#height"},{"name":"columns","description":"<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n","type":"ColumnModel[]|string[]|Column[]","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#columns"},{"name":"dataBound","description":"<p>Triggers when the data source is populated in the TreeGrid.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#databound"},{"name":"actionComplete","description":"<p>Triggers when TreeGrid actions like sorting, filtering, paging, etc., are completed.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#actioncomplete"},{"name":"load","description":"<p>Allows customization of TreeGrid properties before rendering.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#load"}],"treegrid/live-data":[{"name":"dataSource","description":"<p>It is used to render TreeGrid table rows.</p>\n","type":"Object|DataManager","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#datasource"},{"name":"enableVirtualization","description":"<p>If <code>enableVirtualization</code> set to true, then the TreeGrid will render only the rows visible within the view-port\nand load subsequent rows on vertical scrolling. This helps to load large dataset in TreeGrid.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#enablevirtualization"},{"name":"enableVirtualMaskRow","description":"<p>Specifies whether to display shimmer effect during scrolling action in virtual scrolling feature.\nIf disabled, spinner is shown instead of shimmer effect.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#enablevirtualmaskrow"},{"name":"enableHover","description":"<p>If <code>enableHover</code> is set to true, the row hover is enabled in the TreeGrid.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#enablehover"},{"name":"columns","description":"<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n","type":"ColumnModel[]|string[]|Column[]","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#columns"},{"name":"rowHeight","description":"<p>Defines the height of TreeGrid rows.</p>\n","type":"number","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#rowheight"},{"name":"height","description":"<p>Defines the scrollable height of the TreeGrid content.</p>\n","type":"string|number","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#height"},{"name":"allowSelection","description":"<p>If <code>allowSelection</code> is set to true, selection of (highlight row) TreeGrid records by clicking is allowed.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#allowselection"},{"name":"queryCellInfo","description":"<p>Triggered every time a request is made to access cell information, element, or data.\nThis event is triggered before the cell element is appended to the TreeGrid element.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#querycellinfo"},{"name":"load","description":"<p>Allows customization of TreeGrid properties before rendering.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#load"}],"treegrid/default":[{"name":"dataSource","description":"<p>It is used to render TreeGrid table rows.</p>\n","type":"Object|DataManager","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#datasource"},{"name":"treeColumnIndex","description":"<p>Specifies the index of the column that needs to have the expander button.</p>\n","type":"number","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#treecolumnindex"},{"name":"height","description":"<p>Defines the scrollable height of the TreeGrid content.</p>\n","type":"string|number","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#height"},{"name":"childMapping","description":"<p>Specifies the mapping property path for child records in data source</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#childmapping"},{"name":"columns","description":"<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n","type":"ColumnModel[]|string[]|Column[]","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#columns"}],"treegrid/adaptive":[{"name":"dataSource","description":"<p>It is used to render TreeGrid table rows.</p>\n","type":"Object|DataManager","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#datasource"},{"name":"childMapping","description":"<p>Specifies the mapping property path for child records in data source</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#childmapping"},{"name":"columns","description":"<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n","type":"ColumnModel[]|string[]|Column[]","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#columns"},{"name":"treeColumnIndex","description":"<p>Specifies the index of the column that needs to have the expander button.</p>\n","type":"number","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#treecolumnindex"},{"name":"enableAdaptiveUI","description":"<p>If <code>enableAdaptiveUI</code> is set to true, the pop-up UI will become adaptive to small screens,\nand be used for filtering and other features.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#enableadaptiveui"},{"name":"allowFiltering","description":"<p>If <code>allowFiltering</code> is set to true the filter bar will be displayed.\nIf set to false the filter bar will not be displayed.\nFilter bar allows the user to filter tree grid records with required criteria.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#allowfiltering"},{"name":"allowSorting","description":"<p>If <code>allowSorting</code> is set to true, it allows sorting of treegrid records when column header is clicked.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#allowsorting"},{"name":"allowPaging","description":"<p>If <code>allowPaging</code> is set to true, pager renders.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#allowpaging"}],"treegrid/loading-animation":[{"name":"columns","description":"<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n","type":"ColumnModel[]|string[]|Column[]","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#columns"},{"name":"dataSource","description":"<p>It is used to render TreeGrid table rows.</p>\n","type":"Object|DataManager","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#datasource"},{"name":"allowSorting","description":"<p>If <code>allowSorting</code> is set to true, it allows sorting of treegrid records when column header is clicked.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#allowsorting"},{"name":"allowPaging","description":"<p>If <code>allowPaging</code> is set to true, pager renders.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#allowpaging"},{"name":"allowFiltering","description":"<p>If <code>allowFiltering</code> is set to true the filter bar will be displayed.\nIf set to false the filter bar will not be displayed.\nFilter bar allows the user to filter tree grid records with required criteria.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#allowfiltering"},{"name":"loadingIndicator","description":"<p>Configures the loading indicator of the Tree Grid. Specifies whether to display spinner or shimmer effect\nduring the waiting time on any actions (paging, sorting, filtering, CRUD operations) performed in Tree Grid.</p>\n","type":"LoadingIndicatorModel","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#loadingindicator"},{"name":"pageSettings","description":"<p>Configures the pager in the TreeGrid.</p>\n","type":"PageSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#pagesettings"}],"treegrid/localdata":[{"name":"dataSource","description":"<p>It is used to render TreeGrid table rows.</p>\n","type":"Object|DataManager","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#datasource"},{"name":"treeColumnIndex","description":"<p>Specifies the index of the column that needs to have the expander button.</p>\n","type":"number","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#treecolumnindex"},{"name":"height","description":"<p>Defines the scrollable height of the TreeGrid content.</p>\n","type":"string|number","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#height"},{"name":"childMapping","description":"<p>Specifies the mapping property path for child records in data source</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#childmapping"},{"name":"columns","description":"<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n","type":"ColumnModel[]|string[]|Column[]","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#columns"}],"treegrid/remote-data":[{"name":"dataSource","description":"<p>It is used to render TreeGrid table rows.</p>\n","type":"Object|DataManager","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#datasource"},{"name":"allowPaging","description":"<p>If <code>allowPaging</code> is set to true, pager renders.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#allowpaging"},{"name":"columns","description":"<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n","type":"ColumnModel[]|string[]|Column[]","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#columns"},{"name":"treeColumnIndex","description":"<p>Specifies the index of the column that needs to have the expander button.</p>\n","type":"number","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#treecolumnindex"},{"name":"hasChildMapping","description":"<p>Specifies whether record is parent or not for the remote data binding</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#haschildmapping"},{"name":"parentIdMapping","description":"<p>Specifies the name of the field in the dataSource, which contains the parent’s id</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#parentidmapping"},{"name":"idMapping","description":"<p>Specifies the name of the field in the dataSource, which contains the id of that row.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#idmapping"},{"name":"height","description":"<p>Defines the scrollable height of the TreeGrid content.</p>\n","type":"string|number","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#height"}],"treegrid/selfreference":[{"name":"dataSource","description":"<p>It is used to render TreeGrid table rows.</p>\n","type":"Object|DataManager","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#datasource"},{"name":"allowPaging","description":"<p>If <code>allowPaging</code> is set to true, pager renders.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#allowpaging"},{"name":"columns","description":"<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n","type":"ColumnModel[]|string[]|Column[]","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#columns"},{"name":"treeColumnIndex","description":"<p>Specifies the index of the column that needs to have the expander button.</p>\n","type":"number","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#treecolumnindex"},{"name":"idMapping","description":"<p>Specifies the name of the field in the dataSource, which contains the id of that row.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#idmapping"},{"name":"parentIdMapping","description":"<p>Specifies the name of the field in the dataSource, which contains the parent’s id</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#parentidmapping"}],"treegrid/columntemplate":[{"name":"dataSource","description":"<p>It is used to render TreeGrid table rows.</p>\n","type":"Object|DataManager","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#datasource"},{"name":"childMapping","description":"<p>Specifies the mapping property path for child records in data source</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#childmapping"},{"name":"treeColumnIndex","description":"<p>Specifies the index of the column that needs to have the expander button.</p>\n","type":"number","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#treecolumnindex"},{"name":"width","description":"<p>Defines the TreeGrid width.</p>\n","type":"string|number","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#width"},{"name":"height","description":"<p>Defines the scrollable height of the TreeGrid content.</p>\n","type":"string|number","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#height"},{"name":"columns","description":"<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n","type":"ColumnModel[]|string[]|Column[]","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#columns"},{"name":"rowHeight","description":"<p>Defines the height of TreeGrid rows.</p>\n","type":"number","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#rowheight"}],"treegrid/header-template":[{"name":"dataSource","description":"<p>It is used to render TreeGrid table rows.</p>\n","type":"Object|DataManager","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#datasource"},{"name":"childMapping","description":"<p>Specifies the mapping property path for child records in data source</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#childmapping"},{"name":"treeColumnIndex","description":"<p>Specifies the index of the column that needs to have the expander button.</p>\n","type":"number","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#treecolumnindex"},{"name":"allowPaging","description":"<p>If <code>allowPaging</code> is set to true, pager renders.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#allowpaging"},{"name":"columns","description":"<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n","type":"ColumnModel[]|string[]|Column[]","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#columns"}],"treegrid/columnformatting":[{"name":"dataSource","description":"<p>It is used to render TreeGrid table rows.</p>\n","type":"Object|DataManager","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#datasource"},{"name":"childMapping","description":"<p>Specifies the mapping property path for child records in data source</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#childmapping"},{"name":"treeColumnIndex","description":"<p>Specifies the index of the column that needs to have the expander button.</p>\n","type":"number","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#treecolumnindex"},{"name":"columns","description":"<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n","type":"ColumnModel[]|string[]|Column[]","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#columns"},{"name":"allowPaging","description":"<p>If <code>allowPaging</code> is set to true, pager renders.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#allowpaging"}],"treegrid/cellalignment":[{"name":"dataSource","description":"<p>It is used to render TreeGrid table rows.</p>\n","type":"Object|DataManager","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#datasource"},{"name":"childMapping","description":"<p>Specifies the mapping property path for child records in data source</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#childmapping"},{"name":"allowPaging","description":"<p>If <code>allowPaging</code> is set to true, pager renders.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#allowpaging"},{"name":"columns","description":"<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n","type":"ColumnModel[]|string[]|Column[]","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#columns"}],"treegrid/reorder":[{"name":"dataSource","description":"<p>It is used to render TreeGrid table rows.</p>\n","type":"Object|DataManager","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#datasource"},{"name":"childMapping","description":"<p>Specifies the mapping property path for child records in data source</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#childmapping"},{"name":"treeColumnIndex","description":"<p>Specifies the index of the column that needs to have the expander button.</p>\n","type":"number","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#treecolumnindex"},{"name":"allowReordering","description":"<p>If <code>allowReordering</code> is set to true, TreeGrid columns can be reordered.\nReordering can be done by drag and drop of a particular column from one index to another index.</p>\n<blockquote>\n<p>If TreeGrid is rendered with stacked headers, reordering is allowed only at the same level as the column headers.</p>\n</blockquote>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#allowreordering"},{"name":"actionComplete","description":"<p>Triggers when TreeGrid actions like sorting, filtering, paging, etc., are completed.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#actioncomplete"},{"name":"columns","description":"<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n","type":"ColumnModel[]|string[]|Column[]","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#columns"},{"name":"allowPaging","description":"<p>If <code>allowPaging</code> is set to true, pager renders.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#allowpaging"}],"treegrid/stacked-header":[{"name":"dataSource","description":"<p>It is used to render TreeGrid table rows.</p>\n","type":"Object|DataManager","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#datasource"},{"name":"childMapping","description":"<p>Specifies the mapping property path for child records in data source</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#childmapping"},{"name":"treeColumnIndex","description":"<p>Specifies the index of the column that needs to have the expander button.</p>\n","type":"number","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#treecolumnindex"},{"name":"allowPaging","description":"<p>If <code>allowPaging</code> is set to true, pager renders.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#allowpaging"},{"name":"pageSettings","description":"<p>Configures the pager in the TreeGrid.</p>\n","type":"PageSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#pagesettings"},{"name":"columns","description":"<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n","type":"ColumnModel[]|string[]|Column[]","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#columns"}],"treegrid/column-menu":[{"name":"dataSource","description":"<p>It is used to render TreeGrid table rows.</p>\n","type":"Object|DataManager","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#datasource"},{"name":"childMapping","description":"<p>Specifies the mapping property path for child records in data source</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#childmapping"},{"name":"allowPaging","description":"<p>If <code>allowPaging</code> is set to true, pager renders.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#allowpaging"},{"name":"columns","description":"<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n","type":"ColumnModel[]|string[]|Column[]","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#columns"},{"name":"showColumnMenu","description":"<p>If <code>showColumnMenu</code> set to true, then it will enable the column menu options in each columns.</p>\n<blockquote>\n<p>Check the <a href=\"../../treegrid/columns/#column-menu/\">Column menu</a> for its configuration.</p>\n</blockquote>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#showcolumnmenu"}],"treegrid/autowrap":[{"name":"dataSource","description":"<p>It is used to render TreeGrid table rows.</p>\n","type":"Object|DataManager","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#datasource"},{"name":"childMapping","description":"<p>Specifies the mapping property path for child records in data source</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#childmapping"},{"name":"treeColumnIndex","description":"<p>Specifies the index of the column that needs to have the expander button.</p>\n","type":"number","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#treecolumnindex"},{"name":"allowPaging","description":"<p>If <code>allowPaging</code> is set to true, pager renders.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#allowpaging"},{"name":"allowTextWrap","description":"<p>If <code>allowTextWrap</code> set to true,\nthen text content will wrap to the next line when its text content exceeds the width of the Column Cells.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#allowtextwrap"},{"name":"columns","description":"<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n","type":"ColumnModel[]|string[]|Column[]","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#columns"},{"name":"pageSettings","description":"<p>Configures the pager in the TreeGrid.</p>\n","type":"PageSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#pagesettings"}],"treegrid/column-chooser":[{"name":"dataSource","description":"<p>It is used to render TreeGrid table rows.</p>\n","type":"Object|DataManager","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#datasource"},{"name":"childMapping","description":"<p>Specifies the mapping property path for child records in data source</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#childmapping"},{"name":"treeColumnIndex","description":"<p>Specifies the index of the column that needs to have the expander button.</p>\n","type":"number","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#treecolumnindex"},{"name":"columns","description":"<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n","type":"ColumnModel[]|string[]|Column[]","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#columns"},{"name":"allowPaging","description":"<p>If <code>allowPaging</code> is set to true, pager renders.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#allowpaging"}],"treegrid/showhidecolumn":[{"name":"dataSource","description":"<p>It is used to render TreeGrid table rows.</p>\n","type":"Object|DataManager","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#datasource"},{"name":"childMapping","description":"<p>Specifies the mapping property path for child records in data source</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#childmapping"},{"name":"treeColumnIndex","description":"<p>Specifies the index of the column that needs to have the expander button.</p>\n","type":"number","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#treecolumnindex"},{"name":"allowPaging","description":"<p>If <code>allowPaging</code> is set to true, pager renders.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#allowpaging"},{"name":"allowTextWrap","description":"<p>If <code>allowTextWrap</code> set to true,\nthen text content will wrap to the next line when its text content exceeds the width of the Column Cells.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#allowtextwrap"},{"name":"columns","description":"<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n","type":"ColumnModel[]|string[]|Column[]","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#columns"},{"name":"pageSettings","description":"<p>Configures the pager in the TreeGrid.</p>\n","type":"PageSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#pagesettings"}],"treegrid/checkbox-column":[{"name":"dataSource","description":"<p>It is used to render TreeGrid table rows.</p>\n","type":"Object|DataManager","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#datasource"},{"name":"childMapping","description":"<p>Specifies the mapping property path for child records in data source</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#childmapping"},{"name":"treeColumnIndex","description":"<p>Specifies the index of the column that needs to have the expander button.</p>\n","type":"number","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#treecolumnindex"},{"name":"allowPaging","description":"<p>If <code>allowPaging</code> is set to true, pager renders.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#allowpaging"},{"name":"pageSettings","description":"<p>Configures the pager in the TreeGrid.</p>\n","type":"PageSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#pagesettings"},{"name":"columns","description":"<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n","type":"ColumnModel[]|string[]|Column[]","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#columns"}],"treegrid/row-template":[{"name":"dataSource","description":"<p>It is used to render TreeGrid table rows.</p>\n","type":"Object|DataManager","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#datasource"},{"name":"childMapping","description":"<p>Specifies the mapping property path for child records in data source</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#childmapping"},{"name":"treeColumnIndex","description":"<p>Specifies the index of the column that needs to have the expander button.</p>\n","type":"number","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#treecolumnindex"},{"name":"columns","description":"<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n","type":"ColumnModel[]|string[]|Column[]","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#columns"}],"treegrid/detail-template":[{"name":"dataSource","description":"<p>It is used to render TreeGrid table rows.</p>\n","type":"Object|DataManager","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#datasource"},{"name":"childMapping","description":"<p>Specifies the mapping property path for child records in data source</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#childmapping"},{"name":"treeColumnIndex","description":"<p>Specifies the index of the column that needs to have the expander button.</p>\n","type":"number","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#treecolumnindex"},{"name":"columns","description":"<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n","type":"ColumnModel[]|string[]|Column[]","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#columns"},{"name":"height","description":"<p>Defines the scrollable height of the TreeGrid content.</p>\n","type":"string|number","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#height"}],"treegrid/drag-anddrop":[{"name":"dataSource","description":"<p>It is used to render TreeGrid table rows.</p>\n","type":"Object|DataManager","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#datasource"},{"name":"childMapping","description":"<p>Specifies the mapping property path for child records in data source</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#childmapping"},{"name":"treeColumnIndex","description":"<p>Specifies the index of the column that needs to have the expander button.</p>\n","type":"number","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#treecolumnindex"},{"name":"columns","description":"<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n","type":"ColumnModel[]|string[]|Column[]","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#columns"},{"name":"allowPaging","description":"<p>If <code>allowPaging</code> is set to true, pager renders.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#allowpaging"},{"name":"pageSettings","description":"<p>Configures the pager in the TreeGrid.</p>\n","type":"PageSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#pagesettings"},{"name":"allowRowDragAndDrop","description":"<p>If <code>allowRowDragAndDrop</code> is set to true, row reordering functionality is enabled, allowing rows to be dragged\nand dropped within the TreeGrid or across TreeGrids.\nThis feature enables users to reorganize data dynamically via drag-and-drop operations.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#allowrowdraganddrop"}],"treegrid/drag-drop":[{"name":"dataSource","description":"<p>It is used to render TreeGrid table rows.</p>\n","type":"Object|DataManager","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#datasource"},{"name":"childMapping","description":"<p>Specifies the mapping property path for child records in data source</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#childmapping"},{"name":"treeColumnIndex","description":"<p>Specifies the index of the column that needs to have the expander button.</p>\n","type":"number","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#treecolumnindex"},{"name":"columns","description":"<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n","type":"ColumnModel[]|string[]|Column[]","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#columns"}],"treegrid/rowhover":[{"name":"dataSource","description":"<p>It is used to render TreeGrid table rows.</p>\n","type":"Object|DataManager","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#datasource"},{"name":"childMapping","description":"<p>Specifies the mapping property path for child records in data source</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#childmapping"},{"name":"treeColumnIndex","description":"<p>Specifies the index of the column that needs to have the expander button.</p>\n","type":"number","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#treecolumnindex"},{"name":"enableHover","description":"<p>If <code>enableHover</code> is set to true, the row hover is enabled in the TreeGrid.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#enablehover"},{"name":"columns","description":"<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n","type":"ColumnModel[]|string[]|Column[]","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#columns"}],"treegrid/rowheight":[{"name":"dataSource","description":"<p>It is used to render TreeGrid table rows.</p>\n","type":"Object|DataManager","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#datasource"},{"name":"childMapping","description":"<p>Specifies the mapping property path for child records in data source</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#childmapping"},{"name":"treeColumnIndex","description":"<p>Specifies the index of the column that needs to have the expander button.</p>\n","type":"number","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#treecolumnindex"},{"name":"rowHeight","description":"<p>Defines the height of TreeGrid rows.</p>\n","type":"number","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#rowheight"},{"name":"columns","description":"<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n","type":"ColumnModel[]|string[]|Column[]","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#columns"}],"treegrid/inline-editing":[{"name":"dataSource","description":"<p>It is used to render TreeGrid table rows.</p>\n","type":"Object|DataManager","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#datasource"},{"name":"childMapping","description":"<p>Specifies the mapping property path for child records in data source</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#childmapping"},{"name":"treeColumnIndex","description":"<p>Specifies the index of the column that needs to have the expander button.</p>\n","type":"number","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#treecolumnindex"},{"name":"editSettings","description":"<p>Configures the edit settings.</p>\n","type":"EditSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#editsettings"},{"name":"toolbar","description":"<p><code>toolbar</code> defines the ToolBar items of the TreeGrid.\nIt contains built-in and custom toolbar items.\nIf a string value is assigned to the <code>toolbar</code> option, it is considered as the template for the whole TreeGrid ToolBar.\nIf an array value is assigned, it is considered as the list of built-in and custom toolbar items in the TreeGrid's Toolbar.\n&lt;br&gt;&lt;br&gt;\nThe available built-in ToolBar items are:</p>\n<ul>\n<li>Search: Searches records by the given key.</li>\n<li>ExpandAll: Expands all the rows in TreeGrid</li>\n<li>CollapseAll: Collapses all the rows in TreeGrid</li>\n<li>ExcelExport - Export the TreeGrid to Excel(excelExport() method manually to make export.)</li>\n<li>PdfExport - Export the TreeGrid to PDF(pdfExport() method manually to make export.)</li>\n<li>CsvExport - Export the TreeGrid to CSV(csvExport() method manually to make export.)&lt;br&gt;&lt;br&gt;\nThe following code example implements the custom toolbar items.</li>\n</ul>\n","type":"[]","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#toolbar"},{"name":"columns","description":"<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n","type":"ColumnModel[]|string[]|Column[]","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#columns"},{"name":"height","description":"<p>Defines the scrollable height of the TreeGrid content.</p>\n","type":"string|number","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#height"}],"treegrid/dialog-editing":[{"name":"dataSource","description":"<p>It is used to render TreeGrid table rows.</p>\n","type":"Object|DataManager","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#datasource"},{"name":"childMapping","description":"<p>Specifies the mapping property path for child records in data source</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#childmapping"},{"name":"treeColumnIndex","description":"<p>Specifies the index of the column that needs to have the expander button.</p>\n","type":"number","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#treecolumnindex"},{"name":"editSettings","description":"<p>Configures the edit settings.</p>\n","type":"EditSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#editsettings"},{"name":"toolbar","description":"<p><code>toolbar</code> defines the ToolBar items of the TreeGrid.\nIt contains built-in and custom toolbar items.\nIf a string value is assigned to the <code>toolbar</code> option, it is considered as the template for the whole TreeGrid ToolBar.\nIf an array value is assigned, it is considered as the list of built-in and custom toolbar items in the TreeGrid's Toolbar.\n&lt;br&gt;&lt;br&gt;\nThe available built-in ToolBar items are:</p>\n<ul>\n<li>Search: Searches records by the given key.</li>\n<li>ExpandAll: Expands all the rows in TreeGrid</li>\n<li>CollapseAll: Collapses all the rows in TreeGrid</li>\n<li>ExcelExport - Export the TreeGrid to Excel(excelExport() method manually to make export.)</li>\n<li>PdfExport - Export the TreeGrid to PDF(pdfExport() method manually to make export.)</li>\n<li>CsvExport - Export the TreeGrid to CSV(csvExport() method manually to make export.)&lt;br&gt;&lt;br&gt;\nThe following code example implements the custom toolbar items.</li>\n</ul>\n","type":"[]","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#toolbar"},{"name":"columns","description":"<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n","type":"ColumnModel[]|string[]|Column[]","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#columns"},{"name":"height","description":"<p>Defines the scrollable height of the TreeGrid content.</p>\n","type":"string|number","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#height"}],"treegrid/batch-edit":[{"name":"dataSource","description":"<p>It is used to render TreeGrid table rows.</p>\n","type":"Object|DataManager","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#datasource"},{"name":"childMapping","description":"<p>Specifies the mapping property path for child records in data source</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#childmapping"},{"name":"treeColumnIndex","description":"<p>Specifies the index of the column that needs to have the expander button.</p>\n","type":"number","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#treecolumnindex"},{"name":"editSettings","description":"<p>Configures the edit settings.</p>\n","type":"EditSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#editsettings"},{"name":"toolbar","description":"<p><code>toolbar</code> defines the ToolBar items of the TreeGrid.\nIt contains built-in and custom toolbar items.\nIf a string value is assigned to the <code>toolbar</code> option, it is considered as the template for the whole TreeGrid ToolBar.\nIf an array value is assigned, it is considered as the list of built-in and custom toolbar items in the TreeGrid's Toolbar.\n&lt;br&gt;&lt;br&gt;\nThe available built-in ToolBar items are:</p>\n<ul>\n<li>Search: Searches records by the given key.</li>\n<li>ExpandAll: Expands all the rows in TreeGrid</li>\n<li>CollapseAll: Collapses all the rows in TreeGrid</li>\n<li>ExcelExport - Export the TreeGrid to Excel(excelExport() method manually to make export.)</li>\n<li>PdfExport - Export the TreeGrid to PDF(pdfExport() method manually to make export.)</li>\n<li>CsvExport - Export the TreeGrid to CSV(csvExport() method manually to make export.)&lt;br&gt;&lt;br&gt;\nThe following code example implements the custom toolbar items.</li>\n</ul>\n","type":"[]","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#toolbar"},{"name":"columns","description":"<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n","type":"ColumnModel[]|string[]|Column[]","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#columns"},{"name":"height","description":"<p>Defines the scrollable height of the TreeGrid content.</p>\n","type":"string|number","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#height"}],"treegrid/commandcolumn":[{"name":"dataSource","description":"<p>It is used to render TreeGrid table rows.</p>\n","type":"Object|DataManager","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#datasource"},{"name":"childMapping","description":"<p>Specifies the mapping property path for child records in data source</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#childmapping"},{"name":"treeColumnIndex","description":"<p>Specifies the index of the column that needs to have the expander button.</p>\n","type":"number","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#treecolumnindex"},{"name":"editSettings","description":"<p>Configures the edit settings.</p>\n","type":"EditSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#editsettings"},{"name":"toolbar","description":"<p><code>toolbar</code> defines the ToolBar items of the TreeGrid.\nIt contains built-in and custom toolbar items.\nIf a string value is assigned to the <code>toolbar</code> option, it is considered as the template for the whole TreeGrid ToolBar.\nIf an array value is assigned, it is considered as the list of built-in and custom toolbar items in the TreeGrid's Toolbar.\n&lt;br&gt;&lt;br&gt;\nThe available built-in ToolBar items are:</p>\n<ul>\n<li>Search: Searches records by the given key.</li>\n<li>ExpandAll: Expands all the rows in TreeGrid</li>\n<li>CollapseAll: Collapses all the rows in TreeGrid</li>\n<li>ExcelExport - Export the TreeGrid to Excel(excelExport() method manually to make export.)</li>\n<li>PdfExport - Export the TreeGrid to PDF(pdfExport() method manually to make export.)</li>\n<li>CsvExport - Export the TreeGrid to CSV(csvExport() method manually to make export.)&lt;br&gt;&lt;br&gt;\nThe following code example implements the custom toolbar items.</li>\n</ul>\n","type":"[]","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#toolbar"},{"name":"columns","description":"<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n","type":"ColumnModel[]|string[]|Column[]","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#columns"},{"name":"height","description":"<p>Defines the scrollable height of the TreeGrid content.</p>\n","type":"string|number","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#height"}],"treegrid/celledittype":[{"name":"dataSource","description":"<p>It is used to render TreeGrid table rows.</p>\n","type":"Object|DataManager","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#datasource"},{"name":"childMapping","description":"<p>Specifies the mapping property path for child records in data source</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#childmapping"},{"name":"treeColumnIndex","description":"<p>Specifies the index of the column that needs to have the expander button.</p>\n","type":"number","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#treecolumnindex"},{"name":"editSettings","description":"<p>Configures the edit settings.</p>\n","type":"EditSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#editsettings"},{"name":"toolbar","description":"<p><code>toolbar</code> defines the ToolBar items of the TreeGrid.\nIt contains built-in and custom toolbar items.\nIf a string value is assigned to the <code>toolbar</code> option, it is considered as the template for the whole TreeGrid ToolBar.\nIf an array value is assigned, it is considered as the list of built-in and custom toolbar items in the TreeGrid's Toolbar.\n&lt;br&gt;&lt;br&gt;\nThe available built-in ToolBar items are:</p>\n<ul>\n<li>Search: Searches records by the given key.</li>\n<li>ExpandAll: Expands all the rows in TreeGrid</li>\n<li>CollapseAll: Collapses all the rows in TreeGrid</li>\n<li>ExcelExport - Export the TreeGrid to Excel(excelExport() method manually to make export.)</li>\n<li>PdfExport - Export the TreeGrid to PDF(pdfExport() method manually to make export.)</li>\n<li>CsvExport - Export the TreeGrid to CSV(csvExport() method manually to make export.)&lt;br&gt;&lt;br&gt;\nThe following code example implements the custom toolbar items.</li>\n</ul>\n","type":"[]","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#toolbar"},{"name":"columns","description":"<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n","type":"ColumnModel[]|string[]|Column[]","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#columns"},{"name":"height","description":"<p>Defines the scrollable height of the TreeGrid content.</p>\n","type":"string|number","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#height"}],"treegrid/edittemplate":[{"name":"dataSource","description":"<p>It is used to render TreeGrid table rows.</p>\n","type":"Object|DataManager","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#datasource"},{"name":"childMapping","description":"<p>Specifies the mapping property path for child records in data source</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#childmapping"},{"name":"treeColumnIndex","description":"<p>Specifies the index of the column that needs to have the expander button.</p>\n","type":"number","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#treecolumnindex"},{"name":"editSettings","description":"<p>Configures the edit settings.</p>\n","type":"EditSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#editsettings"},{"name":"toolbar","description":"<p><code>toolbar</code> defines the ToolBar items of the TreeGrid.\nIt contains built-in and custom toolbar items.\nIf a string value is assigned to the <code>toolbar</code> option, it is considered as the template for the whole TreeGrid ToolBar.\nIf an array value is assigned, it is considered as the list of built-in and custom toolbar items in the TreeGrid's Toolbar.\n&lt;br&gt;&lt;br&gt;\nThe available built-in ToolBar items are:</p>\n<ul>\n<li>Search: Searches records by the given key.</li>\n<li>ExpandAll: Expands all the rows in TreeGrid</li>\n<li>CollapseAll: Collapses all the rows in TreeGrid</li>\n<li>ExcelExport - Export the TreeGrid to Excel(excelExport() method manually to make export.)</li>\n<li>PdfExport - Export the TreeGrid to PDF(pdfExport() method manually to make export.)</li>\n<li>CsvExport - Export the TreeGrid to CSV(csvExport() method manually to make export.)&lt;br&gt;&lt;br&gt;\nThe following code example implements the custom toolbar items.</li>\n</ul>\n","type":"[]","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#toolbar"},{"name":"columns","description":"<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n","type":"ColumnModel[]|string[]|Column[]","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#columns"},{"name":"height","description":"<p>Defines the scrollable height of the TreeGrid content.</p>\n","type":"string|number","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#height"}],"treegrid/lockrow":[{"name":"dataSource","description":"<p>It is used to render TreeGrid table rows.</p>\n","type":"Object|DataManager","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#datasource"},{"name":"childMapping","description":"<p>Specifies the mapping property path for child records in data source</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#childmapping"},{"name":"treeColumnIndex","description":"<p>Specifies the index of the column that needs to have the expander button.</p>\n","type":"number","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#treecolumnindex"},{"name":"editSettings","description":"<p>Configures the edit settings.</p>\n","type":"EditSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#editsettings"},{"name":"toolbar","description":"<p><code>toolbar</code> defines the ToolBar items of the TreeGrid.\nIt contains built-in and custom toolbar items.\nIf a string value is assigned to the <code>toolbar</code> option, it is considered as the template for the whole TreeGrid ToolBar.\nIf an array value is assigned, it is considered as the list of built-in and custom toolbar items in the TreeGrid's Toolbar.\n&lt;br&gt;&lt;br&gt;\nThe available built-in ToolBar items are:</p>\n<ul>\n<li>Search: Searches records by the given key.</li>\n<li>ExpandAll: Expands all the rows in TreeGrid</li>\n<li>CollapseAll: Collapses all the rows in TreeGrid</li>\n<li>ExcelExport - Export the TreeGrid to Excel(excelExport() method manually to make export.)</li>\n<li>PdfExport - Export the TreeGrid to PDF(pdfExport() method manually to make export.)</li>\n<li>CsvExport - Export the TreeGrid to CSV(csvExport() method manually to make export.)&lt;br&gt;&lt;br&gt;\nThe following code example implements the custom toolbar items.</li>\n</ul>\n","type":"[]","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#toolbar"},{"name":"columns","description":"<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n","type":"ColumnModel[]|string[]|Column[]","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#columns"},{"name":"height","description":"<p>Defines the scrollable height of the TreeGrid content.</p>\n","type":"string|number","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#height"}],"treegrid/sorting":[{"name":"dataSource","description":"<p>It is used to render TreeGrid table rows.</p>\n","type":"Object|DataManager","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#datasource"},{"name":"childMapping","description":"<p>Specifies the mapping property path for child records in data source</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#childmapping"},{"name":"treeColumnIndex","description":"<p>Specifies the index of the column that needs to have the expander button.</p>\n","type":"number","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#treecolumnindex"},{"name":"allowPaging","description":"<p>If <code>allowPaging</code> is set to true, pager renders.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#allowpaging"},{"name":"pageSettings","description":"<p>Configures the pager in the TreeGrid.</p>\n","type":"PageSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#pagesettings"},{"name":"columns","description":"<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n","type":"ColumnModel[]|string[]|Column[]","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#columns"},{"name":"allowSorting","description":"<p>If <code>allowSorting</code> is set to true, it allows sorting of treegrid records when column header is clicked.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#allowsorting"},{"name":"actionComplete","description":"<p>Triggers when TreeGrid actions like sorting, filtering, paging, etc., are completed.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#actioncomplete"},{"name":"sortSettings","description":"<p>Configures the sort settings of the TreeGrid.</p>\n","type":"SortSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#sortsettings"}],"treegrid/sortingapi":[{"name":"dataSource","description":"<p>It is used to render TreeGrid table rows.</p>\n","type":"Object|DataManager","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#datasource"},{"name":"childMapping","description":"<p>Specifies the mapping property path for child records in data source</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#childmapping"},{"name":"treeColumnIndex","description":"<p>Specifies the index of the column that needs to have the expander button.</p>\n","type":"number","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#treecolumnindex"},{"name":"allowPaging","description":"<p>If <code>allowPaging</code> is set to true, pager renders.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#allowpaging"},{"name":"pageSettings","description":"<p>Configures the pager in the TreeGrid.</p>\n","type":"PageSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#pagesettings"},{"name":"columns","description":"<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n","type":"ColumnModel[]|string[]|Column[]","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#columns"},{"name":"allowSorting","description":"<p>If <code>allowSorting</code> is set to true, it allows sorting of treegrid records when column header is clicked.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#allowsorting"},{"name":"actionComplete","description":"<p>Triggers when TreeGrid actions like sorting, filtering, paging, etc., are completed.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#actioncomplete"},{"name":"sortSettings","description":"<p>Configures the sort settings of the TreeGrid.</p>\n","type":"SortSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#sortsettings"}],"treegrid/filtering":[{"name":"dataSource","description":"<p>It is used to render TreeGrid table rows.</p>\n","type":"Object|DataManager","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#datasource"},{"name":"childMapping","description":"<p>Specifies the mapping property path for child records in data source</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#childmapping"},{"name":"allowPaging","description":"<p>If <code>allowPaging</code> is set to true, pager renders.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#allowpaging"},{"name":"columns","description":"<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n","type":"ColumnModel[]|string[]|Column[]","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#columns"},{"name":"allowFiltering","description":"<p>If <code>allowFiltering</code> is set to true the filter bar will be displayed.\nIf set to false the filter bar will not be displayed.\nFilter bar allows the user to filter tree grid records with required criteria.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#allowfiltering"},{"name":"filterSettings","description":"<p>Configures the filter settings of the TreeGrid.</p>\n","type":"FilterSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#filtersettings"},{"name":"treeColumnIndex","description":"<p>Specifies the index of the column that needs to have the expander button.</p>\n","type":"number","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#treecolumnindex"}],"treegrid/filter-menu":[{"name":"dataSource","description":"<p>It is used to render TreeGrid table rows.</p>\n","type":"Object|DataManager","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#datasource"},{"name":"childMapping","description":"<p>Specifies the mapping property path for child records in data source</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#childmapping"},{"name":"allowPaging","description":"<p>If <code>allowPaging</code> is set to true, pager renders.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#allowpaging"},{"name":"columns","description":"<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n","type":"ColumnModel[]|string[]|Column[]","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#columns"},{"name":"allowFiltering","description":"<p>If <code>allowFiltering</code> is set to true the filter bar will be displayed.\nIf set to false the filter bar will not be displayed.\nFilter bar allows the user to filter tree grid records with required criteria.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#allowfiltering"},{"name":"treeColumnIndex","description":"<p>Specifies the index of the column that needs to have the expander button.</p>\n","type":"number","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#treecolumnindex"},{"name":"filterSettings","description":"<p>Configures the filter settings of the TreeGrid.</p>\n","type":"FilterSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#filtersettings"}],"treegrid/searching":[{"name":"dataSource","description":"<p>It is used to render TreeGrid table rows.</p>\n","type":"Object|DataManager","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#datasource"},{"name":"allowPaging","description":"<p>If <code>allowPaging</code> is set to true, pager renders.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#allowpaging"},{"name":"pageSettings","description":"<p>Configures the pager in the TreeGrid.</p>\n","type":"PageSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#pagesettings"},{"name":"columns","description":"<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n","type":"ColumnModel[]|string[]|Column[]","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#columns"},{"name":"childMapping","description":"<p>Specifies the mapping property path for child records in data source</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#childmapping"},{"name":"treeColumnIndex","description":"<p>Specifies the index of the column that needs to have the expander button.</p>\n","type":"number","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#treecolumnindex"},{"name":"toolbar","description":"<p><code>toolbar</code> defines the ToolBar items of the TreeGrid.\nIt contains built-in and custom toolbar items.\nIf a string value is assigned to the <code>toolbar</code> option, it is considered as the template for the whole TreeGrid ToolBar.\nIf an array value is assigned, it is considered as the list of built-in and custom toolbar items in the TreeGrid's Toolbar.\n&lt;br&gt;&lt;br&gt;\nThe available built-in ToolBar items are:</p>\n<ul>\n<li>Search: Searches records by the given key.</li>\n<li>ExpandAll: Expands all the rows in TreeGrid</li>\n<li>CollapseAll: Collapses all the rows in TreeGrid</li>\n<li>ExcelExport - Export the TreeGrid to Excel(excelExport() method manually to make export.)</li>\n<li>PdfExport - Export the TreeGrid to PDF(pdfExport() method manually to make export.)</li>\n<li>CsvExport - Export the TreeGrid to CSV(csvExport() method manually to make export.)&lt;br&gt;&lt;br&gt;\nThe following code example implements the custom toolbar items.</li>\n</ul>\n","type":"[]","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#toolbar"}],"treegrid/paging":[{"name":"dataSource","description":"<p>It is used to render TreeGrid table rows.</p>\n","type":"Object|DataManager","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#datasource"},{"name":"childMapping","description":"<p>Specifies the mapping property path for child records in data source</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#childmapping"},{"name":"allowPaging","description":"<p>If <code>allowPaging</code> is set to true, pager renders.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#allowpaging"},{"name":"columns","description":"<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n","type":"ColumnModel[]|string[]|Column[]","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#columns"},{"name":"pageSettings","description":"<p>Configures the pager in the TreeGrid.</p>\n","type":"PageSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#pagesettings"},{"name":"treeColumnIndex","description":"<p>Specifies the index of the column that needs to have the expander button.</p>\n","type":"number","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#treecolumnindex"}],"treegrid/pagingapi":[{"name":"dataSource","description":"<p>It is used to render TreeGrid table rows.</p>\n","type":"Object|DataManager","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#datasource"},{"name":"childMapping","description":"<p>Specifies the mapping property path for child records in data source</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#childmapping"},{"name":"allowPaging","description":"<p>If <code>allowPaging</code> is set to true, pager renders.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#allowpaging"},{"name":"columns","description":"<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n","type":"ColumnModel[]|string[]|Column[]","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#columns"},{"name":"pageSettings","description":"<p>Configures the pager in the TreeGrid.</p>\n","type":"PageSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#pagesettings"},{"name":"treeColumnIndex","description":"<p>Specifies the index of the column that needs to have the expander button.</p>\n","type":"number","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#treecolumnindex"}],"treegrid/defaultscrolling":[{"name":"dataSource","description":"<p>It is used to render TreeGrid table rows.</p>\n","type":"Object|DataManager","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#datasource"},{"name":"childMapping","description":"<p>Specifies the mapping property path for child records in data source</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#childmapping"},{"name":"treeColumnIndex","description":"<p>Specifies the index of the column that needs to have the expander button.</p>\n","type":"number","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#treecolumnindex"},{"name":"height","description":"<p>Defines the scrollable height of the TreeGrid content.</p>\n","type":"string|number","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#height"}],"treegrid/frozencolumn":[{"name":"dataSource","description":"<p>It is used to render TreeGrid table rows.</p>\n","type":"Object|DataManager","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#datasource"},{"name":"childMapping","description":"<p>Specifies the mapping property path for child records in data source</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#childmapping"},{"name":"columns","description":"<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n","type":"ColumnModel[]|string[]|Column[]","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#columns"},{"name":"treeColumnIndex","description":"<p>Specifies the index of the column that needs to have the expander button.</p>\n","type":"number","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#treecolumnindex"},{"name":"frozenColumns","description":"<p>Specifies the number of columns that should remain visible and fixed on the left side of the TreeGrid during horizontal scrolling.\nThis feature ensures key columns, such as identifiers, stay visible while users scroll through data.</p>\n","type":"number","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#frozencolumns"}],"treegrid/frozen-api":[{"name":"dataSource","description":"<p>It is used to render TreeGrid table rows.</p>\n","type":"Object|DataManager","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#datasource"},{"name":"childMapping","description":"<p>Specifies the mapping property path for child records in data source</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#childmapping"},{"name":"columns","description":"<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n","type":"ColumnModel[]|string[]|Column[]","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#columns"},{"name":"treeColumnIndex","description":"<p>Specifies the index of the column that needs to have the expander button.</p>\n","type":"number","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#treecolumnindex"}],"treegrid/virtualscrolling":[{"name":"dataSource","description":"<p>It is used to render TreeGrid table rows.</p>\n","type":"Object|DataManager","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#datasource"},{"name":"childMapping","description":"<p>Specifies the mapping property path for child records in data source</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#childmapping"},{"name":"treeColumnIndex","description":"<p>Specifies the index of the column that needs to have the expander button.</p>\n","type":"number","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#treecolumnindex"},{"name":"height","description":"<p>Defines the scrollable height of the TreeGrid content.</p>\n","type":"string|number","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#height"},{"name":"enableVirtualization","description":"<p>If <code>enableVirtualization</code> set to true, then the TreeGrid will render only the rows visible within the view-port\nand load subsequent rows on vertical scrolling. This helps to load large dataset in TreeGrid.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#enablevirtualization"}],"treegrid/infinitescrolling":[{"name":"dataSource","description":"<p>It is used to render TreeGrid table rows.</p>\n","type":"Object|DataManager","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#datasource"},{"name":"childMapping","description":"<p>Specifies the mapping property path for child records in data source</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#childmapping"},{"name":"treeColumnIndex","description":"<p>Specifies the index of the column that needs to have the expander button.</p>\n","type":"number","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#treecolumnindex"},{"name":"height","description":"<p>Defines the scrollable height of the TreeGrid content.</p>\n","type":"string|number","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#height"},{"name":"enableInfiniteScrolling","description":"<p>Enables infinite scrolling in the TreeGrid. When set to <code>true</code>, additional data is loaded as the scrollbar\nreaches the end. Useful for handling large datasets.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#enableinfinitescrolling"}],"treegrid/aggregate-default":[{"name":"dataSource","description":"<p>It is used to render TreeGrid table rows.</p>\n","type":"Object|DataManager","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#datasource"},{"name":"childMapping","description":"<p>Specifies the mapping property path for child records in data source</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#childmapping"},{"name":"columns","description":"<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n","type":"ColumnModel[]|string[]|Column[]","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#columns"},{"name":"aggregates","description":"<p>Configures the TreeGrid aggregate rows.</p>\n<blockquote>\n<p>Check the <a href=\"../../treegrid/aggregates/aggregates\">Aggregates</a> for its configuration.</p>\n</blockquote>\n","type":"AggregateRowModel[]","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#aggregates"},{"name":"treeColumnIndex","description":"<p>Specifies the index of the column that needs to have the expander button.</p>\n","type":"number","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#treecolumnindex"},{"name":"toolbar","description":"<p><code>toolbar</code> defines the ToolBar items of the TreeGrid.\nIt contains built-in and custom toolbar items.\nIf a string value is assigned to the <code>toolbar</code> option, it is considered as the template for the whole TreeGrid ToolBar.\nIf an array value is assigned, it is considered as the list of built-in and custom toolbar items in the TreeGrid's Toolbar.\n&lt;br&gt;&lt;br&gt;\nThe available built-in ToolBar items are:</p>\n<ul>\n<li>Search: Searches records by the given key.</li>\n<li>ExpandAll: Expands all the rows in TreeGrid</li>\n<li>CollapseAll: Collapses all the rows in TreeGrid</li>\n<li>ExcelExport - Export the TreeGrid to Excel(excelExport() method manually to make export.)</li>\n<li>PdfExport - Export the TreeGrid to PDF(pdfExport() method manually to make export.)</li>\n<li>CsvExport - Export the TreeGrid to CSV(csvExport() method manually to make export.)&lt;br&gt;&lt;br&gt;\nThe following code example implements the custom toolbar items.</li>\n</ul>\n","type":"[]","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#toolbar"},{"name":"toolbarClick","description":"<p>Triggers when a toolbar item is clicked.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#toolbarclick"},{"name":"allowPdfExport","description":"<p>Enables exporting the TreeGrid to a PDF file if set to true.</p>\n<blockquote>\n<p>Check the <a href=\"../../treegrid/pdf-export/\">PdfExport</a> documentation for more details.</p>\n</blockquote>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#allowpdfexport"},{"name":"allowExcelExport","description":"<p>Enables exporting the TreeGrid to an Excel file if set to true.</p>\n<blockquote>\n<p>Check the <a href=\"../../treegrid/excel-export/\">ExcelExport</a> documentation for more details.</p>\n</blockquote>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#allowexcelexport"}],"treegrid/custom-aggregate":[{"name":"dataSource","description":"<p>It is used to render TreeGrid table rows.</p>\n","type":"Object|DataManager","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#datasource"},{"name":"childMapping","description":"<p>Specifies the mapping property path for child records in data source</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#childmapping"},{"name":"columns","description":"<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n","type":"ColumnModel[]|string[]|Column[]","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#columns"},{"name":"aggregates","description":"<p>Configures the TreeGrid aggregate rows.</p>\n<blockquote>\n<p>Check the <a href=\"../../treegrid/aggregates/aggregates\">Aggregates</a> for its configuration.</p>\n</blockquote>\n","type":"AggregateRowModel[]","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#aggregates"},{"name":"treeColumnIndex","description":"<p>Specifies the index of the column that needs to have the expander button.</p>\n","type":"number","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#treecolumnindex"}],"treegrid/selection":[{"name":"dataSource","description":"<p>It is used to render TreeGrid table rows.</p>\n","type":"Object|DataManager","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#datasource"},{"name":"childMapping","description":"<p>Specifies the mapping property path for child records in data source</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#childmapping"},{"name":"allowPaging","description":"<p>If <code>allowPaging</code> is set to true, pager renders.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#allowpaging"},{"name":"columns","description":"<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n","type":"ColumnModel[]|string[]|Column[]","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#columns"},{"name":"allowSelection","description":"<p>If <code>allowSelection</code> is set to true, selection of (highlight row) TreeGrid records by clicking is allowed.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#allowselection"},{"name":"selectionSettings","description":"<p>Configures the selection behavior.</p>\n","type":"SelectionSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#selectionsettings"},{"name":"treeColumnIndex","description":"<p>Specifies the index of the column that needs to have the expander button.</p>\n","type":"number","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#treecolumnindex"}],"treegrid/selectionapi":[{"name":"dataSource","description":"<p>It is used to render TreeGrid table rows.</p>\n","type":"Object|DataManager","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#datasource"},{"name":"childMapping","description":"<p>Specifies the mapping property path for child records in data source</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#childmapping"},{"name":"allowPaging","description":"<p>If <code>allowPaging</code> is set to true, pager renders.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#allowpaging"},{"name":"columns","description":"<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n","type":"ColumnModel[]|string[]|Column[]","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#columns"},{"name":"allowSelection","description":"<p>If <code>allowSelection</code> is set to true, selection of (highlight row) TreeGrid records by clicking is allowed.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#allowselection"},{"name":"selectionSettings","description":"<p>Configures the selection behavior.</p>\n","type":"SelectionSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#selectionsettings"},{"name":"treeColumnIndex","description":"<p>Specifies the index of the column that needs to have the expander button.</p>\n","type":"number","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#treecolumnindex"}],"treegrid/checkbox-selection":[{"name":"dataSource","description":"<p>It is used to render TreeGrid table rows.</p>\n","type":"Object|DataManager","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#datasource"},{"name":"childMapping","description":"<p>Specifies the mapping property path for child records in data source</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#childmapping"},{"name":"allowPaging","description":"<p>If <code>allowPaging</code> is set to true, pager renders.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#allowpaging"},{"name":"columns","description":"<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n","type":"ColumnModel[]|string[]|Column[]","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#columns"},{"name":"allowSelection","description":"<p>If <code>allowSelection</code> is set to true, selection of (highlight row) TreeGrid records by clicking is allowed.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#allowselection"},{"name":"selectionSettings","description":"<p>Configures the selection behavior.</p>\n","type":"SelectionSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#selectionsettings"},{"name":"treeColumnIndex","description":"<p>Specifies the index of the column that needs to have the expander button.</p>\n","type":"number","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#treecolumnindex"}],"treegrid/export":[{"name":"dataSource","description":"<p>It is used to render TreeGrid table rows.</p>\n","type":"Object|DataManager","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#datasource"},{"name":"childMapping","description":"<p>Specifies the mapping property path for child records in data source</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#childmapping"},{"name":"treeColumnIndex","description":"<p>Specifies the index of the column that needs to have the expander button.</p>\n","type":"number","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#treecolumnindex"},{"name":"columns","description":"<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n","type":"ColumnModel[]|string[]|Column[]","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#columns"},{"name":"toolbar","description":"<p><code>toolbar</code> defines the ToolBar items of the TreeGrid.\nIt contains built-in and custom toolbar items.\nIf a string value is assigned to the <code>toolbar</code> option, it is considered as the template for the whole TreeGrid ToolBar.\nIf an array value is assigned, it is considered as the list of built-in and custom toolbar items in the TreeGrid's Toolbar.\n&lt;br&gt;&lt;br&gt;\nThe available built-in ToolBar items are:</p>\n<ul>\n<li>Search: Searches records by the given key.</li>\n<li>ExpandAll: Expands all the rows in TreeGrid</li>\n<li>CollapseAll: Collapses all the rows in TreeGrid</li>\n<li>ExcelExport - Export the TreeGrid to Excel(excelExport() method manually to make export.)</li>\n<li>PdfExport - Export the TreeGrid to PDF(pdfExport() method manually to make export.)</li>\n<li>CsvExport - Export the TreeGrid to CSV(csvExport() method manually to make export.)&lt;br&gt;&lt;br&gt;\nThe following code example implements the custom toolbar items.</li>\n</ul>\n","type":"[]","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#toolbar"}],"treegrid/print":[{"name":"dataSource","description":"<p>It is used to render TreeGrid table rows.</p>\n","type":"Object|DataManager","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#datasource"},{"name":"childMapping","description":"<p>Specifies the mapping property path for child records in data source</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#childmapping"},{"name":"treeColumnIndex","description":"<p>Specifies the index of the column that needs to have the expander button.</p>\n","type":"number","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#treecolumnindex"},{"name":"columns","description":"<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n","type":"ColumnModel[]|string[]|Column[]","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#columns"},{"name":"toolbar","description":"<p><code>toolbar</code> defines the ToolBar items of the TreeGrid.\nIt contains built-in and custom toolbar items.\nIf a string value is assigned to the <code>toolbar</code> option, it is considered as the template for the whole TreeGrid ToolBar.\nIf an array value is assigned, it is considered as the list of built-in and custom toolbar items in the TreeGrid's Toolbar.\n&lt;br&gt;&lt;br&gt;\nThe available built-in ToolBar items are:</p>\n<ul>\n<li>Search: Searches records by the given key.</li>\n<li>ExpandAll: Expands all the rows in TreeGrid</li>\n<li>CollapseAll: Collapses all the rows in TreeGrid</li>\n<li>ExcelExport - Export the TreeGrid to Excel(excelExport() method manually to make export.)</li>\n<li>PdfExport - Export the TreeGrid to PDF(pdfExport() method manually to make export.)</li>\n<li>CsvExport - Export the TreeGrid to CSV(csvExport() method manually to make export.)&lt;br&gt;&lt;br&gt;\nThe following code example implements the custom toolbar items.</li>\n</ul>\n","type":"[]","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#toolbar"}],"treegrid/contextmenu":[{"name":"dataSource","description":"<p>It is used to render TreeGrid table rows.</p>\n","type":"Object|DataManager","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#datasource"},{"name":"childMapping","description":"<p>Specifies the mapping property path for child records in data source</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#childmapping"},{"name":"treeColumnIndex","description":"<p>Specifies the index of the column that needs to have the expander button.</p>\n","type":"number","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#treecolumnindex"},{"name":"allowPaging","description":"<p>If <code>allowPaging</code> is set to true, pager renders.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#allowpaging"},{"name":"columns","description":"<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n","type":"ColumnModel[]|string[]|Column[]","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#columns"},{"name":"allowSorting","description":"<p>If <code>allowSorting</code> is set to true, it allows sorting of treegrid records when column header is clicked.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#allowsorting"},{"name":"sortSettings","description":"<p>Configures the sort settings of the TreeGrid.</p>\n","type":"SortSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#sortsettings"}],"treegrid/customcontextmenu":[{"name":"dataSource","description":"<p>It is used to render TreeGrid table rows.</p>\n","type":"Object|DataManager","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#datasource"},{"name":"childMapping","description":"<p>Specifies the mapping property path for child records in data source</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#childmapping"},{"name":"treeColumnIndex","description":"<p>Specifies the index of the column that needs to have the expander button.</p>\n","type":"number","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#treecolumnindex"},{"name":"allowPaging","description":"<p>If <code>allowPaging</code> is set to true, pager renders.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#allowpaging"},{"name":"columns","description":"<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n","type":"ColumnModel[]|string[]|Column[]","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#columns"},{"name":"allowSorting","description":"<p>If <code>allowSorting</code> is set to true, it allows sorting of treegrid records when column header is clicked.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#allowsorting"},{"name":"sortSettings","description":"<p>Configures the sort settings of the TreeGrid.</p>\n","type":"SortSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#sortsettings"}],"treegrid/gridlines":[{"name":"dataSource","description":"<p>It is used to render TreeGrid table rows.</p>\n","type":"Object|DataManager","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#datasource"},{"name":"childMapping","description":"<p>Specifies the mapping property path for child records in data source</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#childmapping"},{"name":"treeColumnIndex","description":"<p>Specifies the index of the column that needs to have the expander button.</p>\n","type":"number","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#treecolumnindex"},{"name":"columns","description":"<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n","type":"ColumnModel[]|string[]|Column[]","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#columns"},{"name":"gridLines","description":"<p>Defines how TreeGrid content lines are displayed, determining the visibility of vertical and horizontal lines.</p>\n<ul>\n<li><code>Both</code>: Displays both horizontal and vertical grid lines.</li>\n<li><code>None</code>: Hides both horizontal and vertical grid lines.</li>\n<li><code>Horizontal</code>: Displays only horizontal grid lines.</li>\n<li><code>Vertical</code>: Displays only vertical grid lines.</li>\n<li><code>Default</code>: Adjusts line visibility based on the theme.</li>\n</ul>\n","type":"GridLine","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#gridlines"}],"treegrid/clipboard":[{"name":"dataSource","description":"<p>It is used to render TreeGrid table rows.</p>\n","type":"Object|DataManager","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#datasource"},{"name":"treeColumnIndex","description":"<p>Specifies the index of the column that needs to have the expander button.</p>\n","type":"number","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#treecolumnindex"},{"name":"allowPaging","description":"<p>If <code>allowPaging</code> is set to true, pager renders.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#allowpaging"},{"name":"allowSelection","description":"<p>If <code>allowSelection</code> is set to true, selection of (highlight row) TreeGrid records by clicking is allowed.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#allowselection"},{"name":"childMapping","description":"<p>Specifies the mapping property path for child records in data source</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#childmapping"},{"name":"columns","description":"<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n","type":"ColumnModel[]|string[]|Column[]","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#columns"},{"name":"copyHierarchyMode","description":"<p><code>copyHierarchyMode</code> Defines the copy clipboard types.\n&lt;br&gt;&lt;br&gt;\nThe available built-in items are,</p>\n<ul>\n<li><code>Parent</code> - Copy the selected data with parent record.</li>\n<li><code>Child</code> - Copy the selected data with child record.</li>\n<li><code>Both</code> - Copy the selected data with both parent and child record.</li>\n<li><code>None</code> - Copy only the selected record.</li>\n</ul>\n","type":"CopyHierarchyType","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#copyhierarchymode"}],"treegrid/conditionalformatting":[{"name":"dataSource","description":"<p>It is used to render TreeGrid table rows.</p>\n","type":"Object|DataManager","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#datasource"},{"name":"childMapping","description":"<p>Specifies the mapping property path for child records in data source</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#childmapping"},{"name":"treeColumnIndex","description":"<p>Specifies the index of the column that needs to have the expander button.</p>\n","type":"number","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#treecolumnindex"},{"name":"columns","description":"<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n","type":"ColumnModel[]|string[]|Column[]","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#columns"}],"treegrid/toolbar-template":[{"name":"dataSource","description":"<p>It is used to render TreeGrid table rows.</p>\n","type":"Object|DataManager","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#datasource"},{"name":"childMapping","description":"<p>Specifies the mapping property path for child records in data source</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#childmapping"},{"name":"treeColumnIndex","description":"<p>Specifies the index of the column that needs to have the expander button.</p>\n","type":"number","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#treecolumnindex"},{"name":"columns","description":"<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n","type":"ColumnModel[]|string[]|Column[]","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#columns"},{"name":"toolbar","description":"<p><code>toolbar</code> defines the ToolBar items of the TreeGrid.\nIt contains built-in and custom toolbar items.\nIf a string value is assigned to the <code>toolbar</code> option, it is considered as the template for the whole TreeGrid ToolBar.\nIf an array value is assigned, it is considered as the list of built-in and custom toolbar items in the TreeGrid's Toolbar.\n&lt;br&gt;&lt;br&gt;\nThe available built-in ToolBar items are:</p>\n<ul>\n<li>Search: Searches records by the given key.</li>\n<li>ExpandAll: Expands all the rows in TreeGrid</li>\n<li>CollapseAll: Collapses all the rows in TreeGrid</li>\n<li>ExcelExport - Export the TreeGrid to Excel(excelExport() method manually to make export.)</li>\n<li>PdfExport - Export the TreeGrid to PDF(pdfExport() method manually to make export.)</li>\n<li>CsvExport - Export the TreeGrid to CSV(csvExport() method manually to make export.)&lt;br&gt;&lt;br&gt;\nThe following code example implements the custom toolbar items.</li>\n</ul>\n","type":"[]","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#toolbar"}],"treegrid/events":[{"name":"dataSource","description":"<p>It is used to render TreeGrid table rows.</p>\n","type":"Object|DataManager","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#datasource"},{"name":"childMapping","description":"<p>Specifies the mapping property path for child records in data source</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#childmapping"},{"name":"treeColumnIndex","description":"<p>Specifies the index of the column that needs to have the expander button.</p>\n","type":"number","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#treecolumnindex"},{"name":"columns","description":"<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n","type":"ColumnModel[]|string[]|Column[]","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#columns"}],"treegrid/keyboard":[{"name":"dataSource","description":"<p>It is used to render TreeGrid table rows.</p>\n","type":"Object|DataManager","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#datasource"},{"name":"childMapping","description":"<p>Specifies the mapping property path for child records in data source</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#childmapping"},{"name":"treeColumnIndex","description":"<p>Specifies the index of the column that needs to have the expander button.</p>\n","type":"number","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#treecolumnindex"},{"name":"columns","description":"<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n","type":"ColumnModel[]|string[]|Column[]","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#columns"}],"treeview/default":[{"name":"fields","description":"<p>Specifies the data source and mapping fields to render TreeView nodes.</p>\n","type":"FieldsSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/treeview/#fields"}],"treeview/icons":[{"name":"fields","description":"<p>Specifies the data source and mapping fields to render TreeView nodes.</p>\n","type":"FieldsSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/treeview/#fields"},{"name":"sortOrder","description":"<p>Specifies a value that indicates whether the nodes are sorted in the ascending or descending order,\nor are not sorted at all. The available types of sort order are,</p>\n<ul>\n<li><code>None</code> - The nodes are not sorted.</li>\n<li><code>Ascending</code> - The nodes are sorted in the ascending order.</li>\n<li><code>Descending</code> - The nodes are sorted in the ascending order.</li>\n</ul>\n","type":"SortOrder","link":"//ej2.syncfusion.com/react/documentation/api/treeview/#sortorder"}],"treeview/check-box":[{"name":"fields","description":"<p>Specifies the data source and mapping fields to render TreeView nodes.</p>\n","type":"FieldsSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/treeview/#fields"},{"name":"showCheckBox","description":"<p>Indicates that the nodes will display CheckBoxes in the TreeView.\nThe CheckBox will be displayed next to the expand/collapse icon of the node. For more information on CheckBoxes, refer to\n<a href=\"../../treeview/check-box/\">CheckBox</a>.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/treeview/#showcheckbox"}],"treeview/node-editing":[{"name":"fields","description":"<p>Specifies the data source and mapping fields to render TreeView nodes.</p>\n","type":"FieldsSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/treeview/#fields"},{"name":"allowEditing","description":"<p>Enables or disables editing of the text in the TreeView node. When <code>allowEditing</code> property is set\nto true, the TreeView allows you to edit the node by double clicking the node or by navigating to\nthe node and pressing <strong>F2</strong> key. For more information on node editing, refer\nto <a href=\"../../treeview/node-editing/\">Node Editing</a>.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/treeview/#allowediting"}],"treeview/multiple-selection":[{"name":"fields","description":"<p>Specifies the data source and mapping fields to render TreeView nodes.</p>\n","type":"FieldsSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/treeview/#fields"},{"name":"allowMultiSelection","description":"<p>Enables or disables multi-selection of nodes. To select multiple nodes:</p>\n<ul>\n<li>Select the nodes by holding down the <strong>Ctrl</strong> key while clicking on the nodes.</li>\n<li>Select consecutive nodes by clicking the first node to select and hold down the <strong>Shift</strong> key\nand click the last node to select.\nFor more information on multi-selection, refer to\n<a href=\"../../treeview/multiple-selection/\">Multi-Selection</a>.</li>\n</ul>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/treeview/#allowmultiselection"}],"treeview/drag-and-drop":[{"name":"fields","description":"<p>Specifies the data source and mapping fields to render TreeView nodes.</p>\n","type":"FieldsSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/treeview/#fields"},{"name":"allowDragAndDrop","description":"<p>Indicates whether the TreeView allows drag and drop of nodes. To drag and drop a node in\ndesktop, hold the mouse on the node, drag it to the target node and drop the node by releasing\nthe mouse. For touch devices, drag and drop operation is performed by touch, touch move\nand touch end. For more information on drag and drop nodes concept, refer to\n<a href=\"../../treeview/drag-and-drop/\">Drag and Drop</a>.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/treeview/#allowdraganddrop"},{"name":"allowMultiSelection","description":"<p>Enables or disables multi-selection of nodes. To select multiple nodes:</p>\n<ul>\n<li>Select the nodes by holding down the <strong>Ctrl</strong> key while clicking on the nodes.</li>\n<li>Select consecutive nodes by clicking the first node to select and hold down the <strong>Shift</strong> key\nand click the last node to select.\nFor more information on multi-selection, refer to\n<a href=\"../../treeview/multiple-selection/\">Multi-Selection</a>.</li>\n</ul>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/treeview/#allowmultiselection"},{"name":"nodeDragStop","description":"<p>Event callback that is raised when the TreeView node drag (move) is stopped.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/treeview/#nodedragstop"}],"treeview/template":[{"name":"fields","description":"<p>Specifies the data source and mapping fields to render TreeView nodes.</p>\n","type":"FieldsSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/treeview/#fields"},{"name":"cssClass","description":"<p>Specifies one or more than one CSS classes to be added with root element of the TreeView to help customize the appearance of the component.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/treeview/#cssclass"},{"name":"nodeTemplate","description":"<p>Specifies a template to render customized content for all the nodes. If the <code>nodeTemplate</code> property\nis set, the template content overrides the displayed node text. The property accepts template string\n<a href=\"https://ej2.syncfusion.com/documentation/common/template-engine/\">template string</a>\nor HTML element ID holding the content. For more information on template concept, refer to\n<a href=\"../../treeview/template/\">Template</a>.</p>\n","type":"string|Function","link":"//ej2.syncfusion.com/react/documentation/api/treeview/#nodetemplate"}],"treeview/local-data":[{"name":"fields","description":"<p>Specifies the data source and mapping fields to render TreeView nodes.</p>\n","type":"FieldsSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/treeview/#fields"}],"treeview/remote-data":[{"name":"fields","description":"<p>Specifies the data source and mapping fields to render TreeView nodes.</p>\n","type":"FieldsSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/treeview/#fields"},{"name":"created","description":"<p>Event callback that is raised when the TreeView component is created successfully.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/treeview/#created"},{"name":"dataBound","description":"<p>Event callback that is raised when data source is populated in the TreeView.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/treeview/#databound"}]}