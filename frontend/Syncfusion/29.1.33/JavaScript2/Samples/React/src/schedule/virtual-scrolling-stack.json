{"index.css":".virtual-scrolling.e-schedule .template-wrap .subject {\n    padding: 10px 25px;\n}\n\n.virtual-scrolling.e-schedule .e-month-view .template-wrap .subject {\n    padding: 3px 10px;\n}\n\n.virtual-scrolling.e-schedule .e-month-view .e-date-header-wrap table col,\n.virtual-scrolling.e-schedule .e-month-view .e-work-cells {\n    width: 46px;\n}\n\n.virtual-scrolling.e-schedule .e-more-event-popup .template-wrap .subject {\n    padding: 0px 25px;\n}\n\n.virtual-scrolling.e-schedule .template-wrap {\n    width: 100%;\n}\n\n.virtual-scrolling.e-schedule .e-timeline-month-view .e-resource-left-td {\n    width: 150px;\n}","helper.js":"/**\n * Schedule util\n */\nexport function applyCategoryColor(args, currentView) {\n    let categoryColor = args.data.CategoryColor;\n    if (!args.element || !categoryColor) {\n        return;\n    }\n    if (currentView === 'Agenda') {\n        args.element.firstChild.style.borderLeftColor = categoryColor;\n    }\n    else {\n        args.element.style.backgroundColor = categoryColor;\n    }\n}\nexport function generateObject(start = new Date(2020, 6, 1).getTime(), end = new Date(2021, 11, 31).getTime(), isWeekDaysOnly = false) {\n    let data = [];\n    let names = [\n        'Story Time for Kids', 'Camping with Turtles', 'Wildlife Warriors', 'Parrot Talk', 'Birds of Prey', 'Croco World',\n        'Venomous Snake Hunt', 'Face Painting & Drawing events', 'Pony Rides', 'Feed the Giants', 'Jungle Treasure Hunt',\n        'Endangered Species Program', 'Black Cockatoos Playtime', 'Walk with Jungle King', 'Trained Climbers', 'Playtime with Chimpanzees',\n        'Meet a small Mammal', 'Amazon Fish Feeding', 'Elephant Ride'\n    ];\n    let dayCount = 1000 * 60 * 60;\n    const appCount = isWeekDaysOnly ? 4 : 9;\n    for (let a = start, id = 1; a < end; a += (dayCount * 24)) {\n        let count = Math.floor((Math.random() * appCount) + 1);\n        for (let b = 0; b < count; b++) {\n            let hour = Math.floor(Math.random() * 100) % 24;\n            let minutes = Math.round((Math.floor(Math.random() * 100) % 60) / 5) * 5;\n            let nCount = Math.floor(Math.random() * names.length);\n            let startDate = new Date(new Date(a).setHours(hour, minutes));\n            let endDate = new Date(startDate.getTime() + (dayCount * 2.5));\n            if (isWeekDaysOnly && [0, 6].indexOf(startDate.getDay()) > -1 || [0, 6].indexOf(endDate.getDay()) > -1) {\n                continue;\n            }\n            data.push({\n                Id: id,\n                Subject: names[nCount],\n                StartTime: startDate,\n                EndTime: endDate,\n                IsAllDay: (id % 10) ? false : true\n            });\n            id++;\n        }\n    }\n    return data;\n}\nconst msPerDay = 86400000;\nconst msPerHour = 3600000;\nexport function getReadOnlyEventsData() {\n    const currentTime = new Date().setMinutes(0, 0, 0);\n    let readonlyEventsData = [\n        {\n            Id: 1,\n            Subject: 'Project Workflow Analysis',\n            StartTime: new Date(currentTime + msPerDay * -2 + msPerHour * 2),\n            EndTime: new Date(currentTime + msPerDay * -2 + msPerHour * 4),\n            IsReadonly: true\n        }, {\n            Id: 2,\n            Subject: 'Project Requirement Planning',\n            StartTime: new Date(currentTime + msPerDay * -1 + msPerHour * 2),\n            EndTime: new Date(currentTime + msPerDay * -1 + msPerHour * 4),\n            IsReadonly: true\n        }, {\n            Id: 3,\n            Subject: 'Meeting with Developers',\n            StartTime: new Date(currentTime + msPerDay * -1 + msPerHour * -3),\n            EndTime: new Date(currentTime + msPerDay * -1 + msPerHour * -1),\n            IsReadonly: true\n        }, {\n            Id: 4,\n            Subject: 'Team Fun Activities',\n            StartTime: new Date(currentTime + msPerHour * -4),\n            EndTime: new Date(currentTime + msPerHour * -2),\n            IsReadonly: true\n        }, {\n            Id: 5,\n            Subject: 'Quality Analysis',\n            StartTime: new Date(currentTime + msPerHour * 1),\n            EndTime: new Date(currentTime + msPerHour * 3),\n            IsReadonly: false\n        }, {\n            Id: 6,\n            Subject: 'Customer meeting â€“ John Mackenzie',\n            StartTime: new Date(currentTime + msPerHour * 5),\n            EndTime: new Date(currentTime + msPerHour * 6),\n            IsReadonly: false\n        }, {\n            Id: 7,\n            Subject: 'Meeting with Core team',\n            StartTime: new Date(currentTime + msPerHour * 9),\n            EndTime: new Date(currentTime + msPerHour * 10),\n            IsReadonly: false\n        }, {\n            Id: 8,\n            Subject: 'Project Review',\n            StartTime: new Date(currentTime + msPerDay * 1 + msPerHour * 3),\n            EndTime: new Date(currentTime + msPerDay * 1 + msPerHour * 5),\n            IsReadonly: false\n        }, {\n            Id: 9,\n            Subject: 'Project demo meeting with Andrew',\n            StartTime: new Date(currentTime + msPerDay * 1 + msPerHour * -4),\n            EndTime: new Date(currentTime + msPerDay * 1 + msPerHour * -3),\n            IsReadonly: false\n        }, {\n            Id: 10,\n            Subject: 'Online Hosting of Project',\n            StartTime: new Date(currentTime + msPerDay * 2 + msPerHour * 4),\n            EndTime: new Date(currentTime + msPerDay * 2 + msPerHour * 6),\n            IsReadonly: false\n        }\n    ];\n    return readonlyEventsData;\n}\nexport function getReminderEvents() {\n    const today = new Date().getTime();\n    const reminderEvents = [\n        {\n            Id: 1,\n            Subject: 'Explosion of Betelgeuse Star',\n            Location: 'Space Center USA',\n            StartTime: new Date(today + 5000),\n            EndTime: new Date(today + (msPerHour * 2) + 5000),\n            StartTimezone: \"UTC\",\n            EndTimezone: \"UTC\"\n        }, {\n            Id: 2,\n            Subject: 'Thule Air Crash Report',\n            Location: 'Newyork City',\n            StartTime: new Date(today - msPerDay - (msPerHour * 2)),\n            EndTime: new Date(today - msPerDay),\n            StartTimezone: \"UTC\",\n            EndTimezone: \"UTC\"\n        }, {\n            Id: 3,\n            Subject: 'Milky Way as Melting pot',\n            Location: 'Space Center USA',\n            StartTime: new Date(today - msPerDay),\n            EndTime: new Date(today - msPerDay + (msPerHour * 2)),\n            StartTimezone: \"UTC\",\n            EndTimezone: \"UTC\"\n        }, {\n            Id: 4,\n            Subject: 'Blue Moon Eclipse',\n            Location: 'Space Center USA',\n            StartTime: new Date(today + msPerDay + (msPerHour * 2)),\n            EndTime: new Date(today + msPerDay + (msPerHour * 4)),\n            StartTimezone: \"UTC\",\n            EndTimezone: \"UTC\"\n        }, {\n            Id: 5,\n            Subject: 'Mysteries of Bermuda Triangle',\n            Location: 'Bermuda',\n            StartTime: new Date(today + msPerDay),\n            EndTime: new Date(today + msPerDay + (msPerHour * 2)),\n            StartTimezone: \"UTC\",\n            EndTimezone: \"UTC\"\n        }\n    ];\n    return reminderEvents;\n}\nexport function generateResourceData(startId, endId, text) {\n    let data = [];\n    let colors = [\n        '#ff8787', '#9775fa', '#748ffc', '#3bc9db', '#69db7c', '#fdd835', '#748ffc',\n        '#9775fa', '#df5286', '#7fa900', '#fec200', '#5978ee', '#00bdae', '#ea80fc'\n    ];\n    for (let a = startId; a <= endId; a++) {\n        let n = Math.floor(Math.random() * colors.length);\n        data.push({ Id: a, Text: text + ' ' + a, Color: colors[n] });\n    }\n    return data;\n}\n","index.html":"<!DOCTYPE html>\n<html>\n<head>\n    <title>Syncfusion React Sample</title>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\n    <meta name=\"author\" content=\"Syncfusion\" />\n    <link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\n</head>\n\n<body class=\"{{theme}}\">\n     <style>\n            .control-section\n            {\n                margin-top: 100px;\n            }\n    </style>\n    <div id='sample'>\n</body>\n</html>\n","index.js":"import { createRoot } from 'react-dom/client';\nimport './index.css';\nimport * as React from 'react';\nimport { ScheduleComponent, ViewsDirective, ViewDirective, Inject, ResourcesDirective, ResourceDirective, Resize, DragAndDrop, TimelineMonth, Month } from '@syncfusion/ej2-react-schedule';\n\nimport { SampleBase } from './sample-base';\nimport { generateResourceData } from './helper';\n/**\n * schedule virtual scrolling sample\n */\nexport class VirtualScrolling extends SampleBase {\n    timelineEventTemplate(props) {\n        return (<div className=\"template-wrap\" style={{ background: props.PrimaryColor }}>\n            <div className=\"subject\" style={{ background: props.SecondaryColor }}>{props.Subject}</div>\n        </div>);\n    }\n    generateStaticEvents(start, resCount, overlapCount) {\n        let data = [];\n        let id = 1;\n        for (let i = 0; i < resCount; i++) {\n            let randomCollection = [];\n            let random = 0;\n            for (let j = 0; j < overlapCount; j++) {\n                random = Math.floor(Math.random() * (30));\n                random = (random === 0) ? 1 : random;\n                if (randomCollection.indexOf(random) !== -1 || randomCollection.indexOf(random + 2) !== -1 ||\n                    randomCollection.indexOf(random - 2) !== -1) {\n                    random += (Math.max.apply(null, randomCollection) + 10);\n                }\n                for (let k = 1; k <= 2; k++) {\n                    randomCollection.push(random + k);\n                }\n                let startDate = new Date(start.getFullYear(), start.getMonth(), random);\n                startDate = new Date(startDate.getTime() + (((random % 10) * 10) * (1000 * 60)));\n                let endDate = new Date(startDate.getTime() + ((1440 + 30) * (1000 * 60)));\n                data.push({\n                    Id: id,\n                    Subject: 'Event #' + id,\n                    StartTime: startDate,\n                    EndTime: endDate,\n                    IsAllDay: (id % 10) ? false : true,\n                    ResourceId: i + 1\n                });\n                id++;\n            }\n        }\n        return data;\n    }\n    render() {\n        return (<div className='schedule-control-section'>\n                <div className='col-lg-12 control-section'>\n                    <div className='control-wrapper'>\n                        <ScheduleComponent cssClass='virtual-scrolling' width='100%' height='650px' selectedDate={new Date(2021, 4, 1)} group={{ resources: ['Resources'] }} eventSettings={{ dataSource: this.generateStaticEvents(new Date(2021, 4, 1), 300, 12) }}>\n                            <ResourcesDirective>\n                                <ResourceDirective field='ResourceId' title='Resource' name='Resources' allowMultiple={true} dataSource={generateResourceData(1, 300, 'Resource')} textField='Text' idField='Id' colorField='Color'>\n                                </ResourceDirective>\n                            </ResourcesDirective>\n                            <ViewsDirective>\n                                <ViewDirective option='TimelineMonth' isSelected={true} eventTemplate={this.timelineEventTemplate.bind(this)} allowVirtualScrolling={true}/>\n                                <ViewDirective option='Month' eventTemplate={this.timelineEventTemplate.bind(this)} allowVirtualScrolling={true}/>\n                            </ViewsDirective>\n                            <Inject services={[TimelineMonth, Month, Resize, DragAndDrop]}/>\n                        </ScheduleComponent>\n                    </div>\n                </div>\n            </div>);\n    }\n}\n\nconst root = createRoot(document.getElementById('sample'));\nroot.render(<VirtualScrolling />);","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n                this.rendereComplete();\n            });\n        }\n    }\n    export function updateSampleSection(){}\n    ","dependencies":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-react-base\":\"*\",\"@syncfusion/ej2-schedule\":\"*\",\"@syncfusion/ej2-react-schedule\":\"*\",\"@syncfusion/ej2-react-charts\":\"*\",\"@syncfusion/ej2/base\":\"*\",\"@syncfusion/ej2-charts'; // Import the necessary types from Syncfusion\":\"*\",\"@syncfusion/ej2-lists\":\"*\",\"@syncfusion/ej2-documenteditor\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-splitbuttons\":\"*\",\"@syncfusion/ej2-navigations\":\"*\",\"@syncfusion/ej2-react-popups\":\"*\",\"@syncfusion/ej2-pivotview\":\"*\",\"@syncfusion/ej2-react-progressbar\":\"*\",\"@microsoft/signalr\":\"7.0.11\"}"}