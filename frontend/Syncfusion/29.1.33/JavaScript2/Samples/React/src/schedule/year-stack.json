{"index.css":"#EventLog b {\n  color: #388e3c;\n}\n\nhr {\n  margin: 1px 10px 1px 0px;\n  border-top: 1px solid #eee;\n}\n\n.year-property-panel td {\n  padding-bottom: 1rem;\n}\n\n\n.e-schedule .e-schedule-toolbar .e-icon-schedule-print::before {\n  content: '\\e973';\n}\n\n.e-schedule .e-schedule-toolbar .e-icon-schedule-pdf::before {\n  content: '\\e7c8';\n}\n\n.custom-field-row {\n  margin-bottom: 20px;\n}\n\n.multi-prop div {\n  padding-left: 0;\n  padding-top: 0;\n}\n\n.year-view.e-schedule .e-timeline-year-view .e-resource-column-table, .year-view.e-schedule .e-timeline-year-view .e-resource-left-td {\n  width: 120px;\n}\n\n.inline-edit.e-schedule .e-timeline-view .e-resource-left-td, .inline-edit.e-schedule .e-timeline-month-view .e-resource-left-td {\n  width: 150px;\n}\n\n.time-scale.e-schedule.e-device .e-vertical-view .e-left-indent,\n.time-scale.e-schedule.e-device .e-vertical-view .e-time-cells-wrap {\n    width: 50px;\n}\n\n.time-scale.e-schedule .e-timeline-view .e-date-header-wrap table col, \n.time-scale.e-schedule .e-timeline-view .e-content-wrap table col {\n    width: 75px;\n}\n\n.schedule-holiday-calendar.e-schedule .e-appointment.e-read-only .e-appointment-details .e-subject.e-text-center {\n  text-align: left;\n}\n","property-pane.js":"import * as ReactDOM from 'react-dom';\nimport * as React from 'react';\nimport { select } from '@syncfusion/ej2-base';\nexport class PropertyPane extends React.Component {\n    render() {\n        const mobilePropPane = select('.sb-mobile-prop-pane');\n        const isMobile = window.matchMedia('(max-width:550px)').matches;\n        return isMobile && mobilePropPane ?\n            ReactDOM.createPortal(<div className='property-panel-section'>\n                    <div className=\"property-panel-header\">\n                        {this.props.title}\n                    </div>\n                    <div className=\"property-panel-content\">\n                        {this.props.children}\n                    </div>\n                </div>, mobilePropPane)\n            :\n                (<div className='property-panel-section'>\n                    <div className=\"property-panel-header\">\n                        {this.props.title}\n                    </div>\n                    <div className=\"property-panel-content\">\n                        {this.props.children}\n                    </div>\n                </div>);\n    }\n}\n","index.html":"<!DOCTYPE html>\n<html>\n<head>\n    <title>Syncfusion React Sample</title>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\n    <meta name=\"author\" content=\"Syncfusion\" />\n    <link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\n</head>\n\n<body class=\"{{theme}}\">\n     <style>\n            .control-section\n            {\n                margin-top: 100px;\n            }\n    </style>\n    <div id='sample'>\n</body>\n</html>\n","index.js":"import { createRoot } from 'react-dom/client';\nimport './index.css';\nimport * as React from 'react';\nimport { ScheduleComponent, ViewsDirective, ViewDirective, Resize, DragAndDrop, ResourcesDirective, ResourceDirective, Inject, Year as YearView, TimelineYear } from '@syncfusion/ej2-react-schedule';\nimport { DropDownListComponent } from '@syncfusion/ej2-react-dropdowns';\nimport { NumericTextBoxComponent } from '@syncfusion/ej2-react-inputs';\n\nimport { PropertyPane } from './property-pane';\nimport { SampleBase } from './sample-base';\n/**\n * Schedule Year view sample\n */\nexport class Year extends SampleBase {\n    scheduleObj;\n    categoriesData = [\n        { text: 'Nancy', id: 1, color: '#df5286' },\n        { text: 'Steven', id: 2, color: '#7fa900' },\n        { text: 'Robert', id: 3, color: '#ea7a57' },\n        { text: 'Smith', id: 4, color: '#5978ee' },\n        { text: 'Michael', id: 5, color: '#df5286' }\n    ];\n    data = this.generateEvents();\n    months = [\n        { text: 'January', value: 0 },\n        { text: 'February', value: 1 },\n        { text: 'March', value: 2 },\n        { text: 'April', value: 3 },\n        { text: 'May', value: 4 },\n        { text: 'June', value: 5 },\n        { text: 'July', value: 6 },\n        { text: 'August', value: 7 },\n        { text: 'September', value: 8 },\n        { text: 'October', value: 9 },\n        { text: 'November', value: 10 },\n        { text: 'December', value: 11 }\n    ];\n    fields = { text: 'text', value: 'value' };\n    onEventRendered(args) {\n        let eventColor = args.data.EventColor;\n        if (!args.element || !eventColor) {\n            return;\n        }\n        else {\n            args.element.style.backgroundColor = eventColor;\n        }\n    }\n    firstMonthOfYear(args) {\n        this.scheduleObj.firstMonthOfYear = args.value;\n    }\n    numberOfMonths(args) {\n        this.scheduleObj.monthsCount = args.value;\n    }\n    generateEvents(count = 250, date = new Date()) {\n        let names = [\n            'Bering Sea Gold', 'Technology', 'Maintenance', 'Meeting', 'Travelling', 'Annual Conference', 'Birthday Celebration',\n            'Farewell Celebration', 'Wedding Anniversary', 'Alaska: The Last Frontier', 'Deadliest Catch', 'Sports Day',\n            'MoonShiners', 'Close Encounters', 'HighWay Thru Hell', 'Daily Planet', 'Cash Cab', 'Basketball Practice',\n            'Rugby Match', 'Guitar Class', 'Music Lessons', 'Doctor checkup', 'Brazil - Mexico', 'Opening ceremony', 'Final presentation'\n        ];\n        let colors = [\n            '#ff8787', '#9775fa', '#748ffc', '#3bc9db', '#69db7c', '#fdd835', '#748ffc',\n            '#9775fa', '#df5286', '#7fa900', '#fec200', '#5978ee', '#00bdae', '#ea80fc'\n        ];\n        let startDate = new Date(date.getFullYear() - 2, 0, 1);\n        let endDate = new Date(date.getFullYear() + 2, 11, 31);\n        let dateCollections = [];\n        for (let a = 0, id = 1; a < count; a++) {\n            let start = new Date(Math.random() * (endDate.getTime() - startDate.getTime()) + startDate.getTime());\n            let end = new Date(new Date(start.getTime()).setHours(start.getHours() + 1));\n            let nCount = Math.floor(Math.random() * names.length);\n            let n = Math.floor(Math.random() * colors.length);\n            dateCollections.push({\n                Id: id,\n                Subject: names[nCount],\n                StartTime: new Date(start.getTime()),\n                EndTime: new Date(end.getTime()),\n                IsAllDay: (id % 10) ? true : false,\n                EventColor: colors[n],\n                TaskId: (id % 5) + 1\n            });\n            id++;\n        }\n        return dateCollections;\n    }\n    render() {\n        return (<div className='schedule-control-section'>\n                <div className='col-lg-9 control-section'>\n                    <div className='control-wrapper'>\n                        <ScheduleComponent width='100%' height='555px' cssClass=\"year-view\" ref={schedule => this.scheduleObj = schedule} eventSettings={{ dataSource: this.data }} firstMonthOfYear={0} monthsCount={12} eventRendered={this.onEventRendered.bind(this)}>\n                            <ResourcesDirective>\n                                <ResourceDirective field='TaskId' title='Category' name='Categories' allowMultiple={true} dataSource={this.categoriesData} textField='text' idField='id' colorField='color'>\n                                </ResourceDirective>\n                            </ResourcesDirective>\n                            <ViewsDirective>\n                                <ViewDirective option='Year' isSelected={true}/>\n                                <ViewDirective option='TimelineYear' displayName='Horizontal TimelineYear'/>\n                                <ViewDirective option='TimelineYear' displayName='Vertical TimelineYear' orientation=\"Vertical\" group={{ resources: ['Categories'] }}/>\n                            </ViewsDirective>\n                            <Inject services={[YearView, TimelineYear, Resize, DragAndDrop]}/>\n                        </ScheduleComponent>\n                    </div>\n                </div>\n                <div className='col-lg-3 property-section'>\n                    <PropertyPane title='Properties'>\n                        <table id='property' title='Properties' className='property-panel-table year-property-panel'>\n                            <tbody>\n                                <tr>\n                                    <td>\n                                        <div>\n                                            <DropDownListComponent id=\"firstMonthElement\" placeholder=\"First month of year\" floatLabelType=\"Always\" fields={this.fields} value={0} dataSource={this.months} change={this.firstMonthOfYear.bind(this)}></DropDownListComponent>\n                                        </div>\n                                    </td>\n                                </tr>\n                                <tr>\n                                    <td>\n                                        <div>\n                                            <NumericTextBoxComponent id=\"numberOfMonthsElement\" placeholder=\"Number of months\" floatLabelType=\"Always\" format='###.##' min={1} max={24} value={12} change={this.numberOfMonths.bind(this)}/>\n                                        </div>\n                                    </td>\n                                </tr>\n                            </tbody>\n                        </table>\n                    </PropertyPane>\n                </div>\n            </div>);\n    }\n}\n\nconst root = createRoot(document.getElementById('sample'));\nroot.render(<Year />);","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n                this.rendereComplete();\n            });\n        }\n    }\n    export function updateSampleSection(){}\n    ","dependencies":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-react-base\":\"*\",\"@syncfusion/ej2-schedule\":\"*\",\"@syncfusion/ej2-react-schedule\":\"*\",\"@syncfusion/ej2-dropdowns\":\"*\",\"@syncfusion/ej2-react-dropdowns\":\"*\",\"@syncfusion/ej2-inputs\":\"*\",\"@syncfusion/ej2-react-inputs\":\"*\",\"@syncfusion/ej2-react-charts\":\"*\",\"@syncfusion/ej2/base\":\"*\",\"@syncfusion/ej2-charts'; // Import the necessary types from Syncfusion\":\"*\",\"@syncfusion/ej2-lists\":\"*\",\"@syncfusion/ej2-documenteditor\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-splitbuttons\":\"*\",\"@syncfusion/ej2-navigations\":\"*\",\"@syncfusion/ej2-react-popups\":\"*\",\"@syncfusion/ej2-pivotview\":\"*\",\"@syncfusion/ej2-react-progressbar\":\"*\",\"@microsoft/signalr\":\"7.0.11\"}"}