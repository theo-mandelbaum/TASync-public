{"index.css":"#EventLog b {\n  color: #388e3c;\n}\n\nhr {\n  margin: 1px 10px 1px 0px;\n  border-top: 1px solid #eee;\n}\n\n.year-property-panel td {\n  padding-bottom: 1rem;\n}\n\n\n.e-schedule .e-schedule-toolbar .e-icon-schedule-print::before {\n  content: '\\e973';\n}\n\n.e-schedule .e-schedule-toolbar .e-icon-schedule-pdf::before {\n  content: '\\e7c8';\n}\n\n.custom-field-row {\n  margin-bottom: 20px;\n}\n\n.multi-prop div {\n  padding-left: 0;\n  padding-top: 0;\n}\n\n.year-view.e-schedule .e-timeline-year-view .e-resource-column-table, .year-view.e-schedule .e-timeline-year-view .e-resource-left-td {\n  width: 120px;\n}\n\n.inline-edit.e-schedule .e-timeline-view .e-resource-left-td, .inline-edit.e-schedule .e-timeline-month-view .e-resource-left-td {\n  width: 150px;\n}\n\n.time-scale.e-schedule.e-device .e-vertical-view .e-left-indent,\n.time-scale.e-schedule.e-device .e-vertical-view .e-time-cells-wrap {\n    width: 50px;\n}\n\n.time-scale.e-schedule .e-timeline-view .e-date-header-wrap table col, \n.time-scale.e-schedule .e-timeline-view .e-content-wrap table col {\n    width: 75px;\n}\n\n.schedule-holiday-calendar.e-schedule .e-appointment.e-read-only .e-appointment-details .e-subject.e-text-center {\n  text-align: left;\n}\n","property-pane.js":"import * as ReactDOM from 'react-dom';\nimport * as React from 'react';\nimport { select } from '@syncfusion/ej2-base';\nexport class PropertyPane extends React.Component {\n    render() {\n        const mobilePropPane = select('.sb-mobile-prop-pane');\n        const isMobile = window.matchMedia('(max-width:550px)').matches;\n        return isMobile && mobilePropPane ?\n            ReactDOM.createPortal(<div className='property-panel-section'>\n                    <div className=\"property-panel-header\">\n                        {this.props.title}\n                    </div>\n                    <div className=\"property-panel-content\">\n                        {this.props.children}\n                    </div>\n                </div>, mobilePropPane)\n            :\n                (<div className='property-panel-section'>\n                    <div className=\"property-panel-header\">\n                        {this.props.title}\n                    </div>\n                    <div className=\"property-panel-content\">\n                        {this.props.children}\n                    </div>\n                </div>);\n    }\n}\n","helper.js":"/**\n * Schedule util\n */\nexport function applyCategoryColor(args, currentView) {\n    let categoryColor = args.data.CategoryColor;\n    if (!args.element || !categoryColor) {\n        return;\n    }\n    if (currentView === 'Agenda') {\n        args.element.firstChild.style.borderLeftColor = categoryColor;\n    }\n    else {\n        args.element.style.backgroundColor = categoryColor;\n    }\n}\nexport function generateObject(start = new Date(2020, 6, 1).getTime(), end = new Date(2021, 11, 31).getTime(), isWeekDaysOnly = false) {\n    let data = [];\n    let names = [\n        'Story Time for Kids', 'Camping with Turtles', 'Wildlife Warriors', 'Parrot Talk', 'Birds of Prey', 'Croco World',\n        'Venomous Snake Hunt', 'Face Painting & Drawing events', 'Pony Rides', 'Feed the Giants', 'Jungle Treasure Hunt',\n        'Endangered Species Program', 'Black Cockatoos Playtime', 'Walk with Jungle King', 'Trained Climbers', 'Playtime with Chimpanzees',\n        'Meet a small Mammal', 'Amazon Fish Feeding', 'Elephant Ride'\n    ];\n    let dayCount = 1000 * 60 * 60;\n    const appCount = isWeekDaysOnly ? 4 : 9;\n    for (let a = start, id = 1; a < end; a += (dayCount * 24)) {\n        let count = Math.floor((Math.random() * appCount) + 1);\n        for (let b = 0; b < count; b++) {\n            let hour = Math.floor(Math.random() * 100) % 24;\n            let minutes = Math.round((Math.floor(Math.random() * 100) % 60) / 5) * 5;\n            let nCount = Math.floor(Math.random() * names.length);\n            let startDate = new Date(new Date(a).setHours(hour, minutes));\n            let endDate = new Date(startDate.getTime() + (dayCount * 2.5));\n            if (isWeekDaysOnly && [0, 6].indexOf(startDate.getDay()) > -1 || [0, 6].indexOf(endDate.getDay()) > -1) {\n                continue;\n            }\n            data.push({\n                Id: id,\n                Subject: names[nCount],\n                StartTime: startDate,\n                EndTime: endDate,\n                IsAllDay: (id % 10) ? false : true\n            });\n            id++;\n        }\n    }\n    return data;\n}\nconst msPerDay = 86400000;\nconst msPerHour = 3600000;\nexport function getReadOnlyEventsData() {\n    const currentTime = new Date().setMinutes(0, 0, 0);\n    let readonlyEventsData = [\n        {\n            Id: 1,\n            Subject: 'Project Workflow Analysis',\n            StartTime: new Date(currentTime + msPerDay * -2 + msPerHour * 2),\n            EndTime: new Date(currentTime + msPerDay * -2 + msPerHour * 4),\n            IsReadonly: true\n        }, {\n            Id: 2,\n            Subject: 'Project Requirement Planning',\n            StartTime: new Date(currentTime + msPerDay * -1 + msPerHour * 2),\n            EndTime: new Date(currentTime + msPerDay * -1 + msPerHour * 4),\n            IsReadonly: true\n        }, {\n            Id: 3,\n            Subject: 'Meeting with Developers',\n            StartTime: new Date(currentTime + msPerDay * -1 + msPerHour * -3),\n            EndTime: new Date(currentTime + msPerDay * -1 + msPerHour * -1),\n            IsReadonly: true\n        }, {\n            Id: 4,\n            Subject: 'Team Fun Activities',\n            StartTime: new Date(currentTime + msPerHour * -4),\n            EndTime: new Date(currentTime + msPerHour * -2),\n            IsReadonly: true\n        }, {\n            Id: 5,\n            Subject: 'Quality Analysis',\n            StartTime: new Date(currentTime + msPerHour * 1),\n            EndTime: new Date(currentTime + msPerHour * 3),\n            IsReadonly: false\n        }, {\n            Id: 6,\n            Subject: 'Customer meeting â€“ John Mackenzie',\n            StartTime: new Date(currentTime + msPerHour * 5),\n            EndTime: new Date(currentTime + msPerHour * 6),\n            IsReadonly: false\n        }, {\n            Id: 7,\n            Subject: 'Meeting with Core team',\n            StartTime: new Date(currentTime + msPerHour * 9),\n            EndTime: new Date(currentTime + msPerHour * 10),\n            IsReadonly: false\n        }, {\n            Id: 8,\n            Subject: 'Project Review',\n            StartTime: new Date(currentTime + msPerDay * 1 + msPerHour * 3),\n            EndTime: new Date(currentTime + msPerDay * 1 + msPerHour * 5),\n            IsReadonly: false\n        }, {\n            Id: 9,\n            Subject: 'Project demo meeting with Andrew',\n            StartTime: new Date(currentTime + msPerDay * 1 + msPerHour * -4),\n            EndTime: new Date(currentTime + msPerDay * 1 + msPerHour * -3),\n            IsReadonly: false\n        }, {\n            Id: 10,\n            Subject: 'Online Hosting of Project',\n            StartTime: new Date(currentTime + msPerDay * 2 + msPerHour * 4),\n            EndTime: new Date(currentTime + msPerDay * 2 + msPerHour * 6),\n            IsReadonly: false\n        }\n    ];\n    return readonlyEventsData;\n}\nexport function getReminderEvents() {\n    const today = new Date().getTime();\n    const reminderEvents = [\n        {\n            Id: 1,\n            Subject: 'Explosion of Betelgeuse Star',\n            Location: 'Space Center USA',\n            StartTime: new Date(today + 5000),\n            EndTime: new Date(today + (msPerHour * 2) + 5000),\n            StartTimezone: \"UTC\",\n            EndTimezone: \"UTC\"\n        }, {\n            Id: 2,\n            Subject: 'Thule Air Crash Report',\n            Location: 'Newyork City',\n            StartTime: new Date(today - msPerDay - (msPerHour * 2)),\n            EndTime: new Date(today - msPerDay),\n            StartTimezone: \"UTC\",\n            EndTimezone: \"UTC\"\n        }, {\n            Id: 3,\n            Subject: 'Milky Way as Melting pot',\n            Location: 'Space Center USA',\n            StartTime: new Date(today - msPerDay),\n            EndTime: new Date(today - msPerDay + (msPerHour * 2)),\n            StartTimezone: \"UTC\",\n            EndTimezone: \"UTC\"\n        }, {\n            Id: 4,\n            Subject: 'Blue Moon Eclipse',\n            Location: 'Space Center USA',\n            StartTime: new Date(today + msPerDay + (msPerHour * 2)),\n            EndTime: new Date(today + msPerDay + (msPerHour * 4)),\n            StartTimezone: \"UTC\",\n            EndTimezone: \"UTC\"\n        }, {\n            Id: 5,\n            Subject: 'Mysteries of Bermuda Triangle',\n            Location: 'Bermuda',\n            StartTime: new Date(today + msPerDay),\n            EndTime: new Date(today + msPerDay + (msPerHour * 2)),\n            StartTimezone: \"UTC\",\n            EndTimezone: \"UTC\"\n        }\n    ];\n    return reminderEvents;\n}\nexport function generateResourceData(startId, endId, text) {\n    let data = [];\n    let colors = [\n        '#ff8787', '#9775fa', '#748ffc', '#3bc9db', '#69db7c', '#fdd835', '#748ffc',\n        '#9775fa', '#df5286', '#7fa900', '#fec200', '#5978ee', '#00bdae', '#ea80fc'\n    ];\n    for (let a = startId; a <= endId; a++) {\n        let n = Math.floor(Math.random() * colors.length);\n        data.push({ Id: a, Text: text + ' ' + a, Color: colors[n] });\n    }\n    return data;\n}\n","index.html":"<!DOCTYPE html>\n<html>\n<head>\n    <title>Syncfusion React Sample</title>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\n    <meta name=\"author\" content=\"Syncfusion\" />\n    <link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\n</head>\n\n<body class=\"{{theme}}\">\n     <style>\n            .control-section\n            {\n                margin-top: 100px;\n            }\n    </style>\n    <div id='sample'>\n</body>\n</html>\n","index.js":"import { createRoot } from 'react-dom/client';\nimport './index.css';\nimport * as React from 'react';\nimport { useEffect, useState } from 'react';\nimport { ScheduleComponent, Agenda, Inject } from '@syncfusion/ej2-react-schedule';\nimport { generateObject } from './helper';\nimport { NumericTextBoxComponent } from '@syncfusion/ej2-react-inputs';\n\nimport { DropDownListComponent } from '@syncfusion/ej2-react-dropdowns';\n\nimport { PropertyPane } from './property-pane';\n/**\n * Schedule agenda sample\n */\nconst AgendaView = () => {\n    const virtualScrollOptions = [\n        { text: 'True', value: true },\n        { text: 'False', value: false }\n    ];\n    const hideEmptyAgendaDaysOptions = [\n        { text: 'True', value: true },\n        { text: 'False', value: false }\n    ];\n    const fields = { text: 'text', value: 'value' };\n    const [views, setViews] = useState([{ option: 'Agenda', allowVirtualScrolling: false }]);\n    const [hideEmptyAgendaDays, setHideEmptyAgendaDays] = useState(true);\n    const [agendaDaysCount, setAgendaDaysCount] = useState(7);\n    const onVirtualChange = (args) => {\n        setViews([{ option: 'Agenda', allowVirtualScrolling: args.value }]);\n    };\n    const onEmptyAgendaDaysChange = (args) => {\n        setHideEmptyAgendaDays(args.value);\n    };\n    const onCountChange = (args) => {\n        setAgendaDaysCount(args.value !== null ? args.value : 7);\n    };\n    return (<div className='schedule-control-section'>\n      <div className='col-lg-9 control-section'>\n        <div className='control-wrapper'>\n          <ScheduleComponent width='100%' height='650px' views={views} currentView='Agenda' selectedDate={new Date(2021, 1, 15)} eventSettings={{ dataSource: generateObject() }} hideEmptyAgendaDays={hideEmptyAgendaDays} agendaDaysCount={agendaDaysCount}>\n            <Inject services={[Agenda]}/>\n          </ScheduleComponent>\n        </div>\n      </div>\n      <div className='col-lg-3 property-section'>\n        <PropertyPane title='Properties'>\n          <table id='property' title='Properties' className='property-panel-table' style={{ width: '100%' }}>\n            <tbody>\n              <tr style={{ height: '50px' }}>\n                <td style={{ width: '100%' }}>\n                  <div>\n                    <DropDownListComponent style={{ padding: '6px' }} value={false} dataSource={virtualScrollOptions} fields={fields} change={onVirtualChange} floatLabelType='Always' placeholder='Allow Virtual Scrolling'></DropDownListComponent>\n                  </div>\n                </td>\n              </tr>\n              <tr style={{ height: '50px' }}>\n                <td style={{ width: '100%' }}>\n                  <div>\n                    <DropDownListComponent style={{ padding: '6px' }} value={hideEmptyAgendaDays} dataSource={hideEmptyAgendaDaysOptions} fields={fields} change={onEmptyAgendaDaysChange} floatLabelType='Always' placeholder='Hide Empty Days'></DropDownListComponent>\n                  </div>\n                </td>\n              </tr>\n              <tr style={{ height: '50px' }}>\n                <td style={{ width: '100%' }}>\n                  <div>\n                    <NumericTextBoxComponent format='n0' value={agendaDaysCount} min={1} max={15} change={onCountChange} floatLabelType='Always' placeholder='Days Count'/>\n                  </div>\n                </td>\n              </tr>\n            </tbody>\n          </table>\n        </PropertyPane>\n      </div>\n    </div>);\n};\nexport default AgendaView;\n\nconst root = createRoot(document.getElementById('sample'));\nroot.render(<AgendaView />);","dependencies":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-react-base\":\"*\",\"@syncfusion/ej2-schedule\":\"*\",\"@syncfusion/ej2-react-schedule\":\"*\",\"@syncfusion/ej2-inputs\":\"*\",\"@syncfusion/ej2-react-inputs\":\"*\",\"@syncfusion/ej2-dropdowns\":\"*\",\"@syncfusion/ej2-react-dropdowns\":\"*\",\"@syncfusion/ej2-react-charts\":\"*\",\"@syncfusion/ej2/base\":\"*\",\"@syncfusion/ej2-charts'; // Import the necessary types from Syncfusion\":\"*\",\"@syncfusion/ej2-lists\":\"*\",\"@syncfusion/ej2-documenteditor\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-splitbuttons\":\"*\",\"@syncfusion/ej2-navigations\":\"*\",\"@syncfusion/ej2-react-popups\":\"*\",\"@syncfusion/ej2-pivotview\":\"*\",\"@syncfusion/ej2-react-progressbar\":\"*\",\"@microsoft/signalr\":\"7.0.11\"}"}