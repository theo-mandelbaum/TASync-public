{"index.css":"    .tailwind .schedule-overview .overview-content .right-panel .control-panel,\n    .tailwind3 .schedule-overview .overview-content .right-panel .control-panel {\n        background-color: #f3f4f6;\n    }\n\n    .tailwind-dark .schedule-overview .overview-content .right-panel .control-panel,\n    .tailwind3-dark .schedule-overview .overview-content .right-panel .control-panel {\n        background-color: #374151;\n        color: #fff;\n    }\n\n    .material .schedule-overview .overview-content .right-panel .control-panel {\n        background-color: #fafafa;\n    }\n\n    .material-dark .schedule-overview .overview-content .right-panel .control-panel {\n        background-color: #2a2a2a;\n        color: #ffff;\n    }\n\n    .fabric .schedule-overview .overview-content .right-panel .control-panel {\n        background-color: #ffffff;\n    }\n\n    .fabric-dark .schedule-overview .overview-content .right-panel .control-panel {\n        background-color: #333232;\n        color: #fff;\n    }\n\n    .fluent .schedule-overview .overview-content .right-panel .control-panel {\n        background-color: #f3f2f1;\n    }\n\n    .fluent-dark .schedule-overview .overview-content .right-panel .control-panel {\n        background-color: #252423;\n        border-color: #c1c1c1;\n        color: #fff;\n    }\n\n    .bootstrap .schedule-overview .overview-content .right-panel .control-panel {\n        background-color: #f8f8f8;\n    }\n\n    .bootstrap-dark .schedule-overview .overview-content .right-panel .control-panel {\n        background-color: #2a2a2a;\n        color: #fff;\n    }\n\n    .bootstrap5 .schedule-overview .overview-content .right-panel .control-panel,\n    .bootstrap5_3 .schedule-overview .overview-content .right-panel .control-panel {\n        background-color: #f8f9fa;\n        color: #212529;\n    }\n\n    .bootstrap5-dark .schedule-overview .overview-content .right-panel .control-panel,\n    .bootstrap5_3-dark .schedule-overview .overview-content .right-panel .control-panel {\n        background-color: #343a40;\n        color: #fff;\n    }\n\n    .highcontrast .schedule-overview .overview-content .right-panel .control-panel {\n        background-color: #000000;\n        color: #ffffff;\n    }\n\n    .material3 .schedule-overview .overview-content .right-panel .control-panel {\n        background-color: #f3f1f8;\n    }\n\n    .material3-dark .schedule-overview .overview-content .right-panel .control-panel {\n        background-color: #2a2731;\n    }\n\n    .fluent2 .schedule-overview .overview-content .right-panel .control-panel {\n        background-color: #FFFFFF;\n    }\n\n    .fluent2-dark .schedule-overview .overview-content .right-panel .control-panel {\n        background-color: #292929;\n    }\n\n    .fluent2-highcontrast .schedule-overview .overview-content .right-panel .control-panel {\n        background-color: #000000;\n    }\n\n    .schedule-overview .overview-toolbar.e-rtl + *{\n        flex-direction: row-reverse;\n    }\n\n    .schedule-overview .overview-toolbar.e-toolbar {\n        border-radius: 0;\n    }\n\n    .schedule-overview .overview-toolbar.e-toolbar .e-toolbar-item .e-tbar-btn.e-tbtn-txt {\n        display: inline-grid;\n    }\n\n    .material .schedule-overview .overview-toolbar.e-toolbar {\n        border-style: solid;\n    }\n\n    .schedule-overview .overview-toolbar.e-toolbar .e-toolbar-item:not(.e-separator) {\n        padding: 3.5px;\n    }\n\n    .schedule-overview .overview-toolbar.e-toolbar .e-toolbar-item .e-btn.e-tbar-btn .e-icons.e-btn-icon,\n    .schedule-overview .overview-toolbar.e-toolbar .e-toolbar-item .e-btn.e-tbar-btn .e-tbar-btn-text {\n        line-height: 23px !important;\n        min-height: 23px !important;\n        padding: 0px !important;\n    }\n\n    .schedule-overview .overview-toolbar.e-toolbar .e-toolbar-item.e-template {\n        margin: 0 5px;\n    }\n\n    .schedule-overview .overview-content {\n        display: flex;\n    }\n\n    .schedule-overview .overview-content .left-panel {\n        height: 700px;\n        width: 100%;\n    }\n\n    .schedule-overview .overview-content .right-panel {\n        display: block;\n        height: 700px;\n        transform: translateX(0%);\n        transition: transform .5s ease, width 500ms;\n        width: 500px;\n    }\n\n    .schedule-overview .overview-content .right-panel.hide {\n        display: none;\n        transform: translateX(100%);\n        transition: transform .5s ease, width 500ms;\n        width: 0;\n    }\n\n    .schedule-overview .overview-content .right-panel .control-panel {\n        background: #f8f9fa;\n        font-size: 14px;\n        height: 100%;\n        overflow: auto;\n        padding: 15px;\n        width: 100%;\n    }\n\n    .schedule-overview .overview-content .right-panel .control-panel .col-row {\n        display: flex;\n        flex-wrap: wrap;\n    }\n\n    .schedule-overview .overview-content .right-panel .control-panel label {\n        font-weight: 500;\n    }\n\n    .schedule-overview .overview-content .right-panel .control-panel .col-left {\n        flex: 0 0 41.666667%;\n        max-width: 41.666667%;\n        margin-bottom: 1rem;\n    }\n\n    .schedule-overview .overview-content .right-panel .control-panel .col-right {\n        flex: 0 0 58.333333%;\n        max-width: 58.333333%;\n        margin-bottom: 1rem;\n    }\n\n    .schedule-overview .overview-scheduler {\n        height: 100%;\n        width: 100%;\n    }\n\n    .schedule-overview .e-schedule-toolbar .e-views,\n    .schedule-overview .e-schedule-toolbar .e-schedule-seperator,\n    .schedule-workweek.e-multi-select-list-wrapper.e-checkbox .e-filter-parent,\n    .schedule-resource.e-multi-select-list-wrapper.e-checkbox .e-filter-parent {\n        display: none;\n    }\n\n    .schedule-overview .e-timeline-view .e-resource-left-td,\n    .schedule-overview .e-timeline-month-view .e-resource-left-td {\n        width: 120px;\n    }\n\n    .schedule-resource.e-multi-select-list-wrapper.e-checkbox .e-list-parent:first-child li:first-child {\n        background-image: none;\n        opacity: .5;\n        pointer-events: none;\n        user-select: none;\n    }\n\n    .schedule-overview .calendar-import.e-upload {\n        border: 0;\n        padding-left: 0 !important;\n    }\n\n    .schedule-overview .calendar-import.e-upload .e-btn-icon {\n        margin-left: initial;\n    }\n\n    .schedule-overview .calendar-import.e-upload .e-file-select-wrap {\n        padding: 0\n    }\n\n    .schedule-overview .calendar-import.e-upload .e-file-select-wrap .e-file-select {\n        display: none;\n    }\n\n    .schedule-overview .calendar-import.e-upload .e-file-select-wrap .e-file-drop,\n    .calendar-import .e-upload-files {\n        display: none;\n    }\n\n    .e-bigger .schedule-context-menu ul .e-menu-item .e-menu-icon {\n        font-size: 14px;\n    }\n\n    .schedule-context-menu ul .e-menu-item .e-menu-icon {\n        font-size: 12px;\n    }\n\n    .schedule-overview.e-schedule .e-vertical-view .e-header-cells,\n    .schedule-overview.e-schedule .e-timeline-month-view .e-header-cells {\n        padding: 0;\n        text-align: center !important;\n    }\n\n    .schedule-overview.e-schedule .date-text {\n        font-size: 14px;\n    }\n\n    .schedule-overview.e-schedule.e-device .date-text {\n        font-size: 12px;\n    }\n\n    .schedule-overview.e-schedule .weather-image {\n        width: 20px;\n        height: 20px;\n        background-position: center center;\n        background-repeat: no-repeat;\n        background-size: cover;\n    }\n\n    .schedule-overview.e-schedule .e-month-view .weather-image {\n        float: right;\n        margin: -20px 2px 0 0;\n        width: 20px;\n        height: 20px;\n    }\n\n    .fluent2 .schedule-overview .overview-toolbar .e-template .template .icon-child .e-checkbox-wrapper .e-frame,\n    .fluent2-dark .schedule-overview .overview-toolbar .e-template .template .icon-child .e-checkbox-wrapper .e-frame,\n    .fluent2-highcontrast .schedule-overview .overview-toolbar .e-template .template .icon-child .e-checkbox-wrapper .e-frame {\n        margin: 0;\n    }\n\n    .fluent .e-appbar .e-btn-icon.e-icons,\n    .fluent-dark .e-appbar .e-btn-icon.e-icons {\n        margin-top: -2px;\n    }\n\n    .fluent .e-toolbar-item .e-checkbox-wrapper .e-icons.e-frame,\n    .fluent-dark .e-toolbar-item .e-checkbox-wrapper .e-icons.e-frame {\n        height: 17px;\n        line-height: 17px;\n        width: 17px;\n    }\n\n    .fluent .e-toolbar-item .e-checkbox-wrapper .e-icons.e-frame.e-check,\n    .fluent-dark .e-toolbar-item .e-checkbox-wrapper .e-icons.e-frame.e-check {\n        font-size: 15px;\n        line-height: 16px;\n    }\n\n    .schedule-overview .overview-toolbar.e-toolbar .e-toolbar-item .e-tbar-btn {\n        padding-top: 2px;\n        padding-bottom: 2px;\n    }\n\n    #exportBtn {\n        white-space: nowrap;\n    }\n\n    .time {\n        display: flex;\n        gap: 5px;\n        align-items: center;\n        padding: 0 5px;\n    }\n\n    .template {\n        height: 46px;\n        line-height: 23px;\n    }\n\n    .template .icon-child {\n        text-align: center;\n        height: 23px !important;\n    }\n\n    .template .text-child {\n        font-size: 14px;\n        line-height: 23px !important;\n        font-weight: normal;\n    }\n\n    @media (max-width: 481px) {\n        .schedule-overview .overview-content .right-panel {\n            position: absolute;\n            width: 90%;\n        }\n\n        .import-button,\n        #printBtn,\n        #exportBtn {\n            display: none;\n        }\n\n    }\n\n    @media (max-width: 1024px) {\n        .schedule-overview .overview-content .right-panel .control-panel .col-row {\n            display: initial;\n        }\n\n        .schedule-overview .overview-content .right-panel .control-panel .col-left {\n            flex: initial;\n            max-width: initial;\n            margin-bottom: initial;\n        }\n\n        .schedule-overview .overview-content .right-panel .control-panel .col-right {\n            flex: initial;\n            max-width: initial;\n        }\n    }\n","index.html":"<!DOCTYPE html>\n<html>\n<head>\n    <title>Syncfusion React Sample</title>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\n    <meta name=\"author\" content=\"Syncfusion\" />\n    <link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\n</head>\n\n<body class=\"{{theme}}\">\n     <style>\n            .control-section\n            {\n                margin-top: 100px;\n            }\n    </style>\n    <div id='sample'>\n</body>\n</html>\n","index.js":"import { createRoot } from 'react-dom/client';\nimport './index.css';\nimport * as React from 'react';\nimport { ButtonComponent, CheckBoxComponent } from '@syncfusion/ej2-react-buttons';\nimport { TimePickerComponent } from '@syncfusion/ej2-react-calendars';\nimport { DropDownListComponent, MultiSelectComponent, CheckBoxSelection } from '@syncfusion/ej2-react-dropdowns';\nimport { UploaderComponent } from '@syncfusion/ej2-react-inputs';\nimport { ToolbarComponent, ItemsDirective, ItemDirective, ContextMenuComponent, AppBarComponent } from '@syncfusion/ej2-react-navigations';\nimport { ScheduleComponent, Day, Week, WorkWeek, Month, Year, TimelineViews, TimelineMonth, TimelineYear, ViewsDirective, ViewDirective, ResourcesDirective, ResourceDirective, Inject, Resize, DragAndDrop, Agenda, Print, ExcelExport, ICalendarImport, ICalendarExport, Timezone } from '@syncfusion/ej2-react-schedule';\nimport { DropDownButtonComponent } from '@syncfusion/ej2-react-splitbuttons';\nimport { addClass, Browser, closest, extend, Internationalization, isNullOrUndefined, removeClass, remove, compile } from '@syncfusion/ej2-base';\nimport { DataManager, Predicate, Query } from '@syncfusion/ej2-data';\nimport { tz } from 'moment-timezone';\nimport { SampleBase } from './sample-base';\n\nexport class Overview extends SampleBase {\n    scheduleObj;\n    eventTypeObj;\n    titleObj;\n    notesObj;\n    contextMenuObj;\n    isTimelineView = false;\n    selectedTarget;\n    intl = new Internationalization();\n    workWeekObj;\n    resourceObj;\n    liveTimeInterval;\n    weekDays = [\n        { text: 'Sunday', value: 0 },\n        { text: 'Monday', value: 1 },\n        { text: 'Tuesday', value: 2 },\n        { text: 'Wednesday', value: 3 },\n        { text: 'Thursday', value: 4 },\n        { text: 'Friday', value: 5 },\n        { text: 'Saturday', value: 6 }\n    ];\n    exportItems = [\n        { text: 'iCalendar', iconCss: 'e-icons e-export' },\n        { text: 'Excel', iconCss: 'e-icons e-export-excel' }\n    ];\n    contextMenuItems = [\n        { text: 'New Event', iconCss: 'e-icons e-plus', id: 'Add' },\n        { text: 'New Recurring Event', iconCss: 'e-icons e-repeat', id: 'AddRecurrence' },\n        { text: 'Today', iconCss: 'e-icons e-timeline-today', id: 'Today' },\n        { text: 'Edit Event', iconCss: 'e-icons e-edit', id: 'Save' },\n        { text: 'Delete Event', iconCss: 'e-icons e-trash', id: 'Delete' },\n        {\n            text: 'Delete Event', id: 'DeleteRecurrenceEvent', iconCss: 'e-icons e-trash',\n            items: [\n                { text: 'Delete Occurrence', id: 'DeleteOccurrence' },\n                { text: 'Delete Series', id: 'DeleteSeries' }\n            ]\n        },\n        {\n            text: 'Edit Event', id: 'EditRecurrenceEvent', iconCss: 'e-icons e-edit',\n            items: [\n                { text: 'Edit Occurrence', id: 'EditOccurrence' },\n                { text: 'Edit Series', id: 'EditSeries' }\n            ]\n        }\n    ];\n    calendarCollections = [\n        { CalendarText: 'My Calendar', CalendarId: 1, CalendarColor: '#c43081' },\n        { CalendarText: 'Company', CalendarId: 2, CalendarColor: '#ff7f50' },\n        { CalendarText: 'Birthday', CalendarId: 3, CalendarColor: '#AF27CD' },\n        { CalendarText: 'Holiday', CalendarId: 4, CalendarColor: '#808000' }\n    ];\n    timezoneData = [\n        { text: 'UTC -12:00', value: 'Etc/GMT+12' },\n        { text: 'UTC -11:00', value: 'Etc/GMT+11' },\n        { text: 'UTC -10:00', value: 'Etc/GMT+10' },\n        { text: 'UTC -09:00', value: 'Etc/GMT+9' },\n        { text: 'UTC -08:00', value: 'Etc/GMT+8' },\n        { text: 'UTC -07:00', value: 'Etc/GMT+7' },\n        { text: 'UTC -06:00', value: 'Etc/GMT+6' },\n        { text: 'UTC -05:00', value: 'Etc/GMT+5' },\n        { text: 'UTC -04:00', value: 'Etc/GMT+4' },\n        { text: 'UTC -03:00', value: 'Etc/GMT+3' },\n        { text: 'UTC -02:00', value: 'Etc/GMT+2' },\n        { text: 'UTC -01:00', value: 'Etc/GMT+1' },\n        { text: 'UTC +00:00', value: 'Etc/GMT' },\n        { text: 'UTC +01:00', value: 'Etc/GMT-1' },\n        { text: 'UTC +02:00', value: 'Etc/GMT-2' },\n        { text: 'UTC +03:00', value: 'Etc/GMT-3' },\n        { text: 'UTC +04:00', value: 'Etc/GMT-4' },\n        { text: 'UTC +05:00', value: 'Etc/GMT-5' },\n        { text: 'UTC +05:30', value: 'Asia/Calcutta' },\n        { text: 'UTC +06:00', value: 'Etc/GMT-6' },\n        { text: 'UTC +07:00', value: 'Etc/GMT-7' },\n        { text: 'UTC +08:00', value: 'Etc/GMT-8' },\n        { text: 'UTC +09:00', value: 'Etc/GMT-9' },\n        { text: 'UTC +10:00', value: 'Etc/GMT-10' },\n        { text: 'UTC +11:00', value: 'Etc/GMT-11' },\n        { text: 'UTC +12:00', value: 'Etc/GMT-12' },\n        { text: 'UTC +13:00', value: 'Etc/GMT-13' },\n        { text: 'UTC +14:00', value: 'Etc/GMT-14' }\n    ];\n    majorSlotData = [\n        { Name: '1 hour', Value: 60 },\n        { Name: '1.5 hours', Value: 90 },\n        { Name: '2 hours', Value: 120 },\n        { Name: '2.5 hours', Value: 150 },\n        { Name: '3 hours', Value: 180 },\n        { Name: '3.5 hours', Value: 210 },\n        { Name: '4 hours', Value: 240 },\n        { Name: '4.5 hours', Value: 270 },\n        { Name: '5 hours', Value: 300 },\n        { Name: '5.5 hours', Value: 330 },\n        { Name: '6 hours', Value: 360 },\n        { Name: '6.5 hours', Value: 390 },\n        { Name: '7 hours', Value: 420 },\n        { Name: '7.5 hours', Value: 450 },\n        { Name: '8 hours', Value: 480 },\n        { Name: '8.5 hours', Value: 510 },\n        { Name: '9 hours', Value: 540 },\n        { Name: '9.5 hours', Value: 570 },\n        { Name: '10 hours', Value: 600 },\n        { Name: '10.5 hours', Value: 630 },\n        { Name: '11 hours', Value: 660 },\n        { Name: '11.5 hours', Value: 690 },\n        { Name: '12 hours', Value: 720 }\n    ];\n    minorSlotData = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n    timeFormatData = [\n        { Name: \"12 hours\", Value: \"hh:mm a\" },\n        { Name: \"24 hours\", Value: \"HH:mm\" }\n    ];\n    weekNumberData = [\n        { Name: 'Off', Value: 'Off' },\n        { Name: 'First Day of Year', Value: 'FirstDay' },\n        { Name: 'First Full Week', Value: 'FirstFullWeek' },\n        { Name: 'First Four-Day Week', Value: 'FirstFourDayWeek' }\n    ];\n    tooltipData = [\n        { Name: 'Off', Value: 'Off' },\n        { Name: 'On', Value: 'On' }\n    ];\n    importTemplateFn(data) {\n        const template = '<div class=\"e-template-btn\"><span class=\"e-btn-icon e-icons e-upload-1 e-icon-left\"></span>${text}</div>';\n        return compile(template.trim())(data);\n    }\n    updateLiveTime() {\n        let scheduleTimezone = this.scheduleObj ? this.scheduleObj.timezone : 'Etc/GMT';\n        let timeBtn = document.querySelector('.schedule-overview #timeBtn');\n        if (timeBtn) {\n            let liveTime;\n            if (this.scheduleObj.isAdaptive) {\n                liveTime = new Date().toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit', timeZone: scheduleTimezone });\n            }\n            else {\n                liveTime = new Date().toLocaleTimeString('en-US', { timeZone: scheduleTimezone });\n            }\n            timeBtn.innerHTML = liveTime;\n        }\n    }\n    ;\n    onImportClick(args) {\n        this.scheduleObj.importICalendar(args.event.target.files[0]);\n    }\n    onPrint() {\n        this.scheduleObj.print();\n    }\n    onExportClick(args) {\n        if (args.item.text === 'Excel') {\n            let exportDatas = [];\n            let eventCollection = this.scheduleObj.getEvents();\n            let resourceCollection = this.scheduleObj.getResourceCollections();\n            let resourceData = resourceCollection[0].dataSource;\n            for (let resource of resourceData) {\n                let data = eventCollection.filter((e) => e.CalendarId === resource.CalendarId);\n                exportDatas = exportDatas.concat(data);\n            }\n            this.scheduleObj.exportToExcel({ exportType: 'xlsx', customData: exportDatas, fields: ['Id', 'Subject', 'StartTime', 'EndTime', 'CalendarId'] });\n        }\n        else {\n            this.scheduleObj.exportToICalendar();\n        }\n    }\n    getEventData() {\n        const date = this.scheduleObj.selectedDate;\n        return {\n            Id: this.scheduleObj.getEventMaxID(),\n            Subject: '',\n            StartTime: new Date(date.getFullYear(), date.getMonth(), date.getDate(), new Date().getHours(), 0, 0),\n            EndTime: new Date(date.getFullYear(), date.getMonth(), date.getDate(), new Date().getHours() + 1, 0, 0),\n            Location: '',\n            Description: '',\n            IsAllDay: false,\n            CalendarId: 1\n        };\n    }\n    onToolbarItemClicked(args) {\n        switch (args.item.text) {\n            case 'Day':\n                this.scheduleObj.currentView = this.isTimelineView ? 'TimelineDay' : 'Day';\n                break;\n            case 'Week':\n                this.scheduleObj.currentView = this.isTimelineView ? 'TimelineWeek' : 'Week';\n                break;\n            case 'WorkWeek':\n                this.scheduleObj.currentView = this.isTimelineView ? 'TimelineWorkWeek' : 'WorkWeek';\n                break;\n            case 'Month':\n                this.scheduleObj.currentView = this.isTimelineView ? 'TimelineMonth' : 'Month';\n                break;\n            case 'Year':\n                this.scheduleObj.currentView = this.isTimelineView ? 'TimelineYear' : 'Year';\n                break;\n            case 'Agenda':\n                this.scheduleObj.currentView = 'Agenda';\n                break;\n            case 'New Event':\n                const eventData = this.getEventData();\n                this.scheduleObj.openEditor(eventData, 'Add', true);\n                break;\n            case 'New Recurring Event':\n                const recEventData = this.getEventData();\n                this.scheduleObj.openEditor(recEventData, 'Add', true, 1);\n                break;\n        }\n    }\n    timelineTemplate() {\n        return (<div className='template'>\n        <div className='icon-child'>\n          <CheckBoxComponent id='timeline_views' checked={false} change={(args) => {\n                this.isTimelineView = args.checked;\n                switch (this.scheduleObj.currentView) {\n                    case 'Day':\n                    case 'TimelineDay':\n                        this.scheduleObj.currentView = this.isTimelineView ? 'TimelineDay' : 'Day';\n                        break;\n                    case 'Week':\n                    case 'TimelineWeek':\n                        this.scheduleObj.currentView = this.isTimelineView ? 'TimelineWeek' : 'Week';\n                        break;\n                    case 'WorkWeek':\n                    case 'TimelineWorkWeek':\n                        this.scheduleObj.currentView = this.isTimelineView ? 'TimelineWorkWeek' : 'WorkWeek';\n                        break;\n                    case 'Month':\n                    case 'TimelineMonth':\n                        this.scheduleObj.currentView = this.isTimelineView ? 'TimelineMonth' : 'Month';\n                        break;\n                    case 'Year':\n                    case 'TimelineYear':\n                        this.scheduleObj.currentView = this.isTimelineView ? 'TimelineYear' : 'Year';\n                        break;\n                    case 'Agenda':\n                        this.scheduleObj.currentView = 'Agenda';\n                        break;\n                }\n            }}/>\n        </div>\n        <div className='text-child'>Timeline Views</div>\n      </div>);\n    }\n    groupTemplate() {\n        return (<div className='template'>\n        <label>\n          <div className='icon-child'>\n            <CheckBoxComponent id='grouping' checked={true} change={(args) => { this.scheduleObj.group.resources = args.checked ? ['Calendars'] : []; }}/>\n          </div>\n          <div className='text-child'>Grouping</div>\n        </label>\n      </div>);\n    }\n    gridlineTemplate() {\n        return (<div className='template'>\n        <label>\n          <div className='icon-child'>\n            <CheckBoxComponent id='gridlines' checked={true} change={(args) => { this.scheduleObj.timeScale.enable = args.checked; }}/>\n          </div>\n          <div className='text-child'>Gridlines</div>\n        </label>\n      </div>);\n    }\n    autoHeightTemplate() {\n        return (<div className='template'>\n        <label>\n          <div className='icon-child'>\n            <CheckBoxComponent id='row_auto_height' checked={false} change={(args) => { this.scheduleObj.rowAutoHeight = args.checked; }}/>\n          </div>\n          <div className='text-child'>Row Auto Height</div>\n        </label>\n      </div>);\n    }\n    getDateHeaderDay(value) {\n        return this.intl.formatDate(value, { skeleton: 'E' });\n    }\n    getDateHeaderDate(value) {\n        return this.intl.formatDate(value, { skeleton: 'd' });\n    }\n    getWeather(value) {\n        switch (value.getDay()) {\n            case 0:\n                return '<img class=\"weather-image\"  src= \"https://ej2.syncfusion.com/react/demos/src/schedule/images/weather-clear.svg\" alt=\"Clear Weather\"/>';\n            case 1:\n                return '<img class=\"weather-image\" src=\"https://ej2.syncfusion.com/react/demos/src/schedule/images/weather-clouds.svg\" alt=\"Clouds Weather\"/>';\n            case 2:\n                return '<img class=\"weather-image\" src=\"https://ej2.syncfusion.com/react/demos/src/schedule/images/weather-rain.svg\" alt=\"Rain Weather\"/>';\n            case 3:\n                return '<img class=\"weather-image\" src=\"https://ej2.syncfusion.com/react/demos/src/schedule/images/weather-clouds.svg\" alt=\"Clouds Weather\"/>';\n            case 4:\n                return '<img class=\"weather-image\" src=\"https://ej2.syncfusion.com/react/demos/src/schedule/images/weather-rain.svg\" alt=\"Rain Weather\"//>';\n            case 5:\n                return '<img class=\"weather-image\" src=\"https://ej2.syncfusion.com/react/demos/src/schedule/images/weather-clear.svg\" alt=\"Clear Weather\"/>';\n            case 6:\n                return '<img class=\"weather-image\" src=\"https://ej2.syncfusion.com/react/demos/src/schedule/images/weather-clouds.svg\" alt=\"Clouds Weather\"/>';\n            default:\n                return null;\n        }\n    }\n    dateHeaderTemplate(props) {\n        return (<div><div>{this.getDateHeaderDay(props.date)}</div><div>{this.getDateHeaderDate(props.date)}</div><div className=\"date-text\" dangerouslySetInnerHTML={{ __html: this.getWeather(props.date) }}></div></div>);\n    }\n    onResourceChange(args) {\n        let resourcePredicate;\n        for (let value of args.value) {\n            if (resourcePredicate) {\n                resourcePredicate = resourcePredicate.or(new Predicate('CalendarId', 'equal', value));\n            }\n            else {\n                resourcePredicate = new Predicate('CalendarId', 'equal', value);\n            }\n        }\n        this.scheduleObj.resources[0].query = resourcePredicate ? new Query().where(resourcePredicate) : new Query().where('CalendarId', 'equal', 1);\n    }\n    componentWillUnmount() {\n        if (this.liveTimeInterval) {\n            clearInterval(this.liveTimeInterval);\n        }\n    }\n    render() {\n        let generateEvents = () => {\n            let eventData = [];\n            let eventSubjects = [\n                'Bering Sea Gold', 'Technology', 'Maintenance', 'Meeting', 'Traveling', 'Annual Conference', 'Birthday Celebration',\n                'Farewell Celebration', 'Wedding Anniversary', 'Alaska: The Last Frontier', 'Deadliest Catch', 'Sports Day', 'MoonShiners',\n                'Close Encounters', 'HighWay Thru Hell', 'Daily Planet', 'Cash Cab', 'Basketball Practice', 'Rugby Match', 'Guitar Class',\n                'Music Lessons', 'Doctor checkup', 'Brazil - Mexico', 'Opening ceremony', 'Final presentation'\n            ];\n            let weekDate = new Date(new Date().setDate(new Date().getDate() - new Date().getDay()));\n            let startDate = new Date(weekDate.getFullYear(), weekDate.getMonth(), weekDate.getDate(), 10, 0);\n            let endDate = new Date(weekDate.getFullYear(), weekDate.getMonth(), weekDate.getDate(), 11, 30);\n            eventData.push({\n                Id: 1,\n                Subject: eventSubjects[Math.floor(Math.random() * (24 - 0 + 1) + 0)],\n                StartTime: startDate,\n                EndTime: endDate,\n                Location: '',\n                Description: 'Event Scheduled',\n                RecurrenceRule: 'FREQ=WEEKLY;BYDAY=MO,TU,WE,TH,FR;INTERVAL=1;COUNT=10;',\n                IsAllDay: false,\n                IsReadonly: false,\n                CalendarId: 1\n            });\n            for (let a = 0, id = 2; a < 500; a++) {\n                let month = Math.floor(Math.random() * (11 - 0 + 1) + 0);\n                let date = Math.floor(Math.random() * (28 - 1 + 1) + 1);\n                let hour = Math.floor(Math.random() * (23 - 0 + 1) + 0);\n                let minutes = Math.floor(Math.random() * (59 - 0 + 1) + 0);\n                let start = new Date(new Date().getFullYear(), month, date, hour, minutes, 0);\n                let end = new Date(start.getTime());\n                end.setHours(end.getHours() + 2);\n                let startDate = new Date(start.getTime());\n                let endDate = new Date(end.getTime());\n                eventData.push({\n                    Id: id,\n                    Subject: eventSubjects[Math.floor(Math.random() * (24 - 0 + 1) + 0)],\n                    StartTime: startDate,\n                    EndTime: endDate,\n                    Location: '',\n                    Description: 'Event Scheduled',\n                    IsAllDay: id % 10 === 0,\n                    IsReadonly: endDate < new Date(),\n                    CalendarId: (a % 4) + 1\n                });\n                id++;\n            }\n            if (Browser.isIE) {\n                Timezone.prototype.offset = (date, timezone) => tz.zone(timezone).utcOffset(date.getTime());\n            }\n            let overviewEvents = extend([], eventData, undefined, true);\n            let timezone = new Timezone();\n            let currentTimezone = timezone.getLocalTimezoneName();\n            for (let event of overviewEvents) {\n                event.StartTime = timezone.convert(event.StartTime, 'UTC', currentTimezone);\n                event.EndTime = timezone.convert(event.EndTime, 'UTC', currentTimezone);\n            }\n            return overviewEvents;\n        };\n        return (<div className='schedule-control-section'>\n        <div className='col-lg-12 control-section'>\n          <div className='content-wrapper'>\n            <div className='schedule-overview'>\n            <AppBarComponent colorMode=\"Primary\">\n                <span className=\"time e-icons e-time-zone\"></span>\n                <span id=\"timezoneBtn\" className=\"time \">UTC</span>\n                <span className=\"time e-icons e-clock\"></span>\n                <span id=\"timeBtn\" className=\"time current-time\">Time</span>\n                <div className=\"e-appbar-spacer\"></div>\n              <div className='control-panel calendar-export'>\n                    <ButtonComponent id='printBtn' cssClass='title-bar-btn e-inherit' iconCss='e-icons e-print' onClick={(this.onPrint.bind(this))} content='Print'/>\n              </div>\n              <div className='control-panel import-button'>\n                <UploaderComponent id='fileUpload' type='file' allowedExtensions='.ics' cssClass='calendar-import' buttons={{ browse: this.importTemplateFn({ text: 'Import' })[0] }} multiple={false} showFileList={false} selected={(this.onImportClick.bind(this))} created={() => {\n                const element = document.querySelector('.calendar-import .e-css.e-btn');\n                element.classList.add('e-inherit');\n            }}/>\n              </div>\n              <div className='control-panel calendar-export'>\n                <DropDownButtonComponent id='exportBtn' content='Export' cssClass='e-inherit' items={this.exportItems} select={this.onExportClick.bind(this)}/>\n              </div>\n                <ButtonComponent id='settingsBtn' cssClass='overview-toolbar-settings e-inherit' iconCss='e-icons e-settings' iconPosition='Top' content='' onClick={() => {\n                let settingsPanel = document.querySelector('.overview-content .right-panel');\n                if (settingsPanel.classList.contains('hide')) {\n                    removeClass([settingsPanel], 'hide');\n                    this.workWeekObj.refresh();\n                    this.resourceObj.refresh();\n                }\n                else {\n                    addClass([settingsPanel], 'hide');\n                }\n                this.scheduleObj.refreshEvents();\n            }}/>\n            </AppBarComponent>\n            <ToolbarComponent id='toolbarOptions' cssClass='overview-toolbar' width='100%' height={70} overflowMode='Scrollable' scrollStep={100} created={() => this.liveTimeInterval = setInterval(() => { this.updateLiveTime(); }, 1000)} clicked={this.onToolbarItemClicked.bind(this)}>\n                  <ItemsDirective>\n                    <ItemDirective prefixIcon='e-icons e-plus' tooltipText='New Event' text='New Event' tabIndex={0}/>\n                    <ItemDirective prefixIcon='e-icons e-repeat' tooltipText='New Recurring Event' text='New Recurring Event' tabIndex={0}/>\n                    <ItemDirective type='Separator'/>\n                    <ItemDirective prefixIcon='e-icons e-day' tooltipText='Day' text='Day' tabIndex={0}/>\n                    <ItemDirective prefixIcon='e-icons e-week' tooltipText='Week' text='Week' tabIndex={0}/>\n                    <ItemDirective prefixIcon='e-icons e-week' tooltipText='WorkWeek' text='WorkWeek' tabIndex={0}/>\n                    <ItemDirective prefixIcon='e-icons e-month' tooltipText='Month' text='Month' tabIndex={0}/>\n                    <ItemDirective prefixIcon='e-icons e-month' tooltipText='Year' text='Year' tabIndex={0}/>\n                    <ItemDirective prefixIcon='e-icons e-agenda-date-range' tooltipText='Agenda' text='Agenda' tabIndex={0}/>\n                    <ItemDirective tooltipText='Timeline Views' text='Timeline Views' template={this.timelineTemplate.bind(this)} tabIndex={0}/>\n                    <ItemDirective type='Separator'/>\n                    <ItemDirective tooltipText='Grouping' text='Grouping' template={this.groupTemplate.bind(this)} tabIndex={0}/>\n                    <ItemDirective tooltipText='Timme Slots' text='Timme Slots' template={this.gridlineTemplate.bind(this)} tabIndex={0}/>\n                    <ItemDirective tooltipText='Auto Fit Rows' text='Auto Fit Rows' template={this.autoHeightTemplate.bind(this)} tabIndex={0}/>\n                  </ItemsDirective>\n            </ToolbarComponent>\n              <div className='overview-content'>\n                <div className='left-panel'>\n                  <div className='overview-scheduler'>\n                    <ScheduleComponent id='scheduler' cssClass='schedule-overview' ref={(schedule) => this.scheduleObj = schedule} width='100%' height='100%' group={{ resources: ['Calendars'] }} timezone='UTC' eventSettings={{ dataSource: generateEvents() }} dateHeaderTemplate={this.dateHeaderTemplate.bind(this)}>\n                      <ResourcesDirective>\n                        <ResourceDirective field='CalendarId' title='Calendars' name='Calendars' dataSource={this.calendarCollections} query={new Query().where('CalendarId', 'equal', 1)} textField='CalendarText' idField='CalendarId' colorField='CalendarColor'>\n                        </ResourceDirective>\n                      </ResourcesDirective>\n                      <ViewsDirective>\n                        <ViewDirective option='Day'/>\n                        <ViewDirective option='Week'/>\n                        <ViewDirective option='WorkWeek'/>\n                        <ViewDirective option='Month'/>\n                        <ViewDirective option='Year'/>\n                        <ViewDirective option='Agenda'/>\n                        <ViewDirective option='TimelineDay'/>\n                        <ViewDirective option='TimelineWeek'/>\n                        <ViewDirective option='TimelineWorkWeek'/>\n                        <ViewDirective option='TimelineMonth'/>\n                        <ViewDirective option='TimelineYear'/>\n                      </ViewsDirective>\n                      <Inject services={[Day, Week, WorkWeek, Month, Year, Agenda, TimelineViews, TimelineMonth, TimelineYear, DragAndDrop, Resize, Print, ExcelExport, ICalendarImport, ICalendarExport]}/>\n                    </ScheduleComponent>\n                    <ContextMenuComponent id='overviewContextMenu' cssClass='schedule-context-menu' ref={(menu) => this.contextMenuObj = menu} target='.e-schedule' items={this.contextMenuItems} beforeOpen={(args) => {\n                let newEventElement = document.querySelector('.e-new-event');\n                if (newEventElement) {\n                    remove(newEventElement);\n                    removeClass([document.querySelector('.e-selected-cell')], 'e-selected-cell');\n                }\n                this.scheduleObj.closeQuickInfoPopup();\n                let targetElement = args.event.target;\n                if (closest(targetElement, '.e-contextmenu')) {\n                    return;\n                }\n                this.selectedTarget = closest(targetElement, '.e-appointment,.e-work-cells,.e-vertical-view .e-date-header-wrap .e-all-day-cells,.e-vertical-view .e-date-header-wrap .e-header-cells');\n                if (isNullOrUndefined(this.selectedTarget)) {\n                    args.cancel = true;\n                    return;\n                }\n                if (this.selectedTarget.classList.contains('e-appointment')) {\n                    let eventObj = this.scheduleObj.getEventDetails(this.selectedTarget);\n                    if (eventObj.RecurrenceRule) {\n                        this.contextMenuObj.showItems(['EditRecurrenceEvent', 'DeleteRecurrenceEvent'], true);\n                        this.contextMenuObj.hideItems(['Add', 'AddRecurrence', 'Today', 'Save', 'Delete'], true);\n                    }\n                    else {\n                        this.contextMenuObj.showItems(['Save', 'Delete'], true);\n                        this.contextMenuObj.hideItems(['Add', 'AddRecurrence', 'Today', 'EditRecurrenceEvent', 'DeleteRecurrenceEvent'], true);\n                    }\n                    return;\n                }\n                else if ((this.selectedTarget.classList.contains('e-work-cells') || this.selectedTarget.classList.contains('e-all-day-cells')) &&\n                    !this.selectedTarget.classList.contains('e-selected-cell')) {\n                    removeClass([].slice.call(this.scheduleObj.element.querySelectorAll('.e-selected-cell')), 'e-selected-cell');\n                    this.selectedTarget.setAttribute('aria-selected', 'true');\n                    this.selectedTarget.classList.add('e-selected-cell');\n                }\n                this.contextMenuObj.hideItems(['Save', 'Delete', 'EditRecurrenceEvent', 'DeleteRecurrenceEvent'], true);\n                this.contextMenuObj.showItems(['Add', 'AddRecurrence', 'Today'], true);\n            }} select={(args) => {\n                let selectedMenuItem = args.item.id;\n                let eventObj = {};\n                if (this.selectedTarget && this.selectedTarget.classList.contains('e-appointment')) {\n                    eventObj = this.scheduleObj.getEventDetails(this.selectedTarget);\n                }\n                switch (selectedMenuItem) {\n                    case 'Today':\n                        this.scheduleObj.selectedDate = new Date();\n                        break;\n                    case 'Add':\n                    case 'AddRecurrence':\n                        let selectedCells = this.scheduleObj.getSelectedElements();\n                        let isRightClickInSelectedCells = selectedCells.some(cell => cell === this.selectedTarget);\n                        let activeCellsData = this.scheduleObj.getCellDetails(isRightClickInSelectedCells ? selectedCells : [this.selectedTarget]);\n                        if (selectedMenuItem === 'Add') {\n                            this.scheduleObj.openEditor(activeCellsData, 'Add');\n                        }\n                        else {\n                            this.scheduleObj.openEditor(activeCellsData, 'Add', false, 1);\n                        }\n                        break;\n                    case 'Save':\n                    case 'EditOccurrence':\n                    case 'EditSeries':\n                        if (selectedMenuItem === 'EditSeries') {\n                            let query = new Query().where(this.scheduleObj.eventFields.id, 'equal', eventObj.RecurrenceID);\n                            eventObj = new DataManager(this.scheduleObj.eventsData).executeLocal(query)[0];\n                        }\n                        this.scheduleObj.openEditor(eventObj, selectedMenuItem);\n                        break;\n                    case 'Delete':\n                        this.scheduleObj.deleteEvent(eventObj);\n                        break;\n                    case 'DeleteOccurrence':\n                    case 'DeleteSeries':\n                        this.scheduleObj.deleteEvent(eventObj, selectedMenuItem);\n                        break;\n                }\n            }}>\n                    </ContextMenuComponent>\n                  </div>\n                </div>\n                <div className='right-panel hide'>\n                  <div className='control-panel e-css'>\n                  <div className='col-row'>\n                      <div className='col-left'>\n                        <label style={{ lineHeight: '34px', margin: '0' }}>Calendar</label>\n                      </div>\n                      <div className='col-right'>\n                        <MultiSelectComponent id=\"resources\" cssClass='schedule-resource' ref={(resources) => this.resourceObj = resources} dataSource={this.calendarCollections} mode='CheckBox' fields={{ text: 'CalendarText', value: 'CalendarId' }} enableSelectionOrder={false} showClearButton={false} showDropDownIcon={true} popupHeight={300} value={[1]} change={this.onResourceChange.bind(this)}>\n                          <Inject services={[CheckBoxSelection]}/>\n                        </MultiSelectComponent>\n                      </div>\n                    </div>\n                    <div className='col-row'>\n                      <div className='col-left'>\n                        <label style={{ lineHeight: '34px', margin: '0' }}>First Day of Week</label>\n                      </div>\n                      <div className='col-right'>\n                        <DropDownListComponent id=\"weekFirstDay\" dataSource={this.weekDays} fields={{ text: 'text', value: 'value' }} value={0} popupHeight={400} change={(args) => { this.scheduleObj.firstDayOfWeek = args.value; }}/>\n                      </div>\n                    </div>\n                    <div className='col-row'>\n                      <div className='col-left'>\n                        <label style={{ lineHeight: '34px', margin: '0' }}>Work week</label>\n                      </div>\n                      <div className='col-right'>\n                        <MultiSelectComponent id=\"workWeekDays\" cssClass='schedule-workweek' ref={(workWeek) => this.workWeekObj = workWeek} dataSource={this.weekDays} mode='CheckBox' fields={{ text: 'text', value: 'value' }} enableSelectionOrder={false} showClearButton={false} showDropDownIcon={true} popupHeight={150} value={[1, 2, 3, 4, 5]} change={(args) => this.scheduleObj.workDays = args.value}>\n                          <Inject services={[CheckBoxSelection]}/>\n                        </MultiSelectComponent>\n                      </div>\n                    </div>\n                    <div className='col-row'>\n                      <div className='col-left'>\n                        <label style={{ lineHeight: '34px', margin: '0' }}>Resources</label>\n                      </div>\n                      <div className='col-right'>\n                        <MultiSelectComponent id=\"resources\" cssClass='schedule-resource' ref={(resources) => this.resourceObj = resources} dataSource={this.calendarCollections} mode='CheckBox' fields={{ text: 'CalendarText', value: 'CalendarId' }} enableSelectionOrder={false} showClearButton={false} showDropDownIcon={true} popupHeight={150} value={[1]} change={this.onResourceChange.bind(this)}>\n                          <Inject services={[CheckBoxSelection]}/>\n                        </MultiSelectComponent>\n                      </div>\n                    </div>\n                    <div className='col-row'>\n                      <div className='col-left'>\n                        <label style={{ lineHeight: '34px', margin: '0' }}>Timezone</label>\n                      </div>\n                      <div className='col-right'>\n                        <DropDownListComponent id=\"timezone\" dataSource={this.timezoneData} fields={{ text: 'text', value: 'value' }} value='Etc/GMT' popupHeight={150} change={(args) => {\n                this.scheduleObj.timezone = args.value;\n                this.updateLiveTime();\n                document.querySelector('.schedule-overview #timezoneBtn').innerHTML = args.itemData.text;\n            }}/>\n                      </div>\n                    </div>\n                    <div className='col-row'>\n                      <div className='col-left'>\n                        <label style={{ lineHeight: '34px', margin: '0' }}>Day Start Hour</label>\n                      </div>\n                      <div className='col-right'>\n                        <TimePickerComponent id='dayStartHour' showClearButton={false} value={new Date(new Date().setHours(0, 0, 0))} change={(args) => this.scheduleObj.startHour = this.intl.formatDate(args.value, { skeleton: 'Hm' })}/>\n                      </div>\n                    </div>\n                    <div className='col-row'>\n                      <div className='col-left'>\n                        <label style={{ lineHeight: '34px', margin: '0' }}>Day End Hour</label>\n                      </div>\n                      <div className='col-right'>\n                        <TimePickerComponent id='dayEndHour' showClearButton={false} value={new Date(new Date().setHours(23, 59, 59))} change={(args) => this.scheduleObj.endHour = this.intl.formatDate(args.value, { skeleton: 'Hm' })}/>\n                      </div>\n                    </div>\n                    <div className='col-row'>\n                      <div className='col-left'>\n                        <label style={{ lineHeight: '34px', margin: '0' }}>Work Start Hour</label>\n                      </div>\n                      <div className='col-right'>\n                        <TimePickerComponent id='workHourStart' showClearButton={false} value={new Date(new Date().setHours(9, 0, 0))} change={(args) => this.scheduleObj.workHours.start = this.intl.formatDate(args.value, { skeleton: 'Hm' })}/>\n                      </div>\n                    </div>\n                    <div className='col-row'>\n                      <div className='col-left'>\n                        <label style={{ lineHeight: '34px', margin: '0' }}>Work End Hour</label>\n                      </div>\n                      <div className='col-right'>\n                        <TimePickerComponent id='workHourEnd' showClearButton={false} value={new Date(new Date().setHours(18, 0, 0))} change={(args) => this.scheduleObj.workHours.end = this.intl.formatDate(args.value, { skeleton: 'Hm' })}/>\n                      </div>\n                    </div>\n                    <div className='col-row'>\n                      <div className='col-left'>\n                        <label style={{ lineHeight: '34px', margin: '0' }}>Slot Duration</label>\n                      </div>\n                      <div className='col-right'>\n                        <DropDownListComponent id=\"slotDuration\" dataSource={this.majorSlotData} fields={{ text: 'Name', value: 'Value' }} value={60} popupHeight={150} change={(args) => { this.scheduleObj.timeScale.interval = args.value; }}/>\n                      </div>\n                    </div>\n                    <div className='col-row'>\n                      <div className='col-left'>\n                        <label style={{ lineHeight: '34px', margin: '0' }}>Slot Interval</label>\n                      </div>\n                      <div className='col-right'>\n                        <DropDownListComponent id=\"slotInterval\" dataSource={this.minorSlotData} value={2} popupHeight={150} change={(args) => { this.scheduleObj.timeScale.slotCount = args.value; }}/>\n                      </div>\n                    </div>\n                    <div className='col-row'>\n                      <div className='col-left'>\n                        <label style={{ lineHeight: '34px', margin: '0' }}>Time Format</label>\n                      </div>\n                      <div className='col-right'>\n                        <DropDownListComponent id=\"timeFormat\" dataSource={this.timeFormatData} fields={{ text: 'Name', value: 'Value' }} value={\"hh:mm a\"} popupHeight={150} change={(args) => { this.scheduleObj.timeFormat = args.value; }}/>\n                      </div>\n                    </div>\n                    <div className='col-row'>\n                      <div className='col-left'>\n                        <label style={{ lineHeight: '34px', margin: '0' }}>Week Numbers</label>\n                      </div>\n                      <div className='col-right'>\n                        <DropDownListComponent id=\"weekNumber\" dataSource={this.weekNumberData} fields={{ text: 'Name', value: 'Value' }} value={\"Off\"} popupHeight={150} change={(args) => {\n                if (args.value == \"Off\") {\n                    this.scheduleObj.showWeekNumber = false;\n                }\n                else {\n                    this.scheduleObj.showWeekNumber = true;\n                    this.scheduleObj.weekRule = args.value;\n                }\n            }}/>\n                      </div>\n                    </div>\n                  <div className='col-row'>\n                    <div className='col-left'>\n                      <label style={{ lineHeight: '34px', margin: '0' }}>Tooltip</label>\n                    </div>\n                    <div className='col-right'>\n                      <DropDownListComponent id=\"tooltip\" dataSource={this.tooltipData} fields={{ text: 'Name', value: 'Value' }} value={\"Off\"} popupHeight={150} change={(args) => {\n                if (args.value === \"Off\") {\n                    this.scheduleObj.eventSettings.enableTooltip = false;\n                }\n                else {\n                    this.scheduleObj.eventSettings.enableTooltip = true;\n                }\n            }}/>\n                    </div>\n                  </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>);\n    }\n}\n\nconst root = createRoot(document.getElementById('sample'));\nroot.render(<Overview />);","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n                this.rendereComplete();\n            });\n        }\n    }\n    export function updateSampleSection(){}\n    ","dependencies":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-react-base\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-react-buttons\":\"*\",\"@syncfusion/ej2-calendars\":\"*\",\"@syncfusion/ej2-react-calendars\":\"*\",\"@syncfusion/ej2-dropdowns\":\"*\",\"@syncfusion/ej2-react-dropdowns\":\"*\",\"@syncfusion/ej2-inputs\":\"*\",\"@syncfusion/ej2-react-inputs\":\"*\",\"@syncfusion/ej2-navigations\":\"*\",\"@syncfusion/ej2-react-navigations\":\"*\",\"@syncfusion/ej2-schedule\":\"*\",\"@syncfusion/ej2-react-schedule\":\"*\",\"@syncfusion/ej2-splitbuttons\":\"*\",\"@syncfusion/ej2-react-splitbuttons\":\"*\",\"@syncfusion/ej2-icons\":\"*\",\"markdown-spellcheck\":\"^1.3.1\",\"@syncfusion/ej2-data\":\"*\",\"@syncfusion/ej2-react-charts\":\"*\",\"@syncfusion/ej2/base\":\"*\",\"@syncfusion/ej2-charts'; // Import the necessary types from Syncfusion\":\"*\",\"@syncfusion/ej2-lists\":\"*\",\"@syncfusion/ej2-documenteditor\":\"*\",\"@syncfusion/ej2-react-popups\":\"*\",\"@syncfusion/ej2-pivotview\":\"*\",\"@syncfusion/ej2-react-progressbar\":\"*\",\"moment-timezone\":\"0.5.43\",\"@microsoft/signalr\":\"7.0.11\"}"}