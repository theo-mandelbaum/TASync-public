{"index.css":".upload_wrapper, .rtl_wrapper,.validation_wrapper {\n    max-width: 400px;\n\tmargin: auto;\n}\n\n.upload_wrapper .e-upload, .rtl_wrapper .e-upload, .validation_wrapper .e-upload {\n    width: 100%;\n    position: relative;\n    margin-top: 15px;\n}\n\n.upload_wrapper .e-upload .e-upload-drag-hover, .rtl_wrapper .e-upload .e-upload-drag-hover,  .validation_wrapper .e-upload .e-upload-drag-hover {\n    margin: 0;\n}\n\n#uploader .property-panel-content {\n    min-height: 200px;\n}\n\n.property-section.preload-panel .property-panel-section {\n    position: relative;\n    padding-left: 30px;\n}\n.e-bigger .property-section.preload-panel {\n\tposition: relative;\n    padding-left: 35px;\n}\n.property-section .chunk-table {\n    width: 100%;\n    margin-top: 15px;\n}\n.chunk-td {\n    width: 50%;\n}\n\n.default-check {\n    margin-left: 50px;\n    padding-top: 25px;\n}\n\n.panel-style {\n    padding-top: 25px;\n}","property-pane.js":"import * as ReactDOM from 'react-dom';\nimport * as React from 'react';\nimport { select } from '@syncfusion/ej2-base';\nexport class PropertyPane extends React.Component {\n    render() {\n        const mobilePropPane = select('.sb-mobile-prop-pane');\n        const isMobile = window.matchMedia('(max-width:550px)').matches;\n        return isMobile && mobilePropPane ?\n            ReactDOM.createPortal(<div className='property-panel-section'>\n                    <div className=\"property-panel-header\">\n                        {this.props.title}\n                    </div>\n                    <div className=\"property-panel-content\">\n                        {this.props.children}\n                    </div>\n                </div>, mobilePropPane)\n            :\n                (<div className='property-panel-section'>\n                    <div className=\"property-panel-header\">\n                        {this.props.title}\n                    </div>\n                    <div className=\"property-panel-content\">\n                        {this.props.children}\n                    </div>\n                </div>);\n    }\n}\n","index.html":"<!DOCTYPE html>\n<html>\n<head>\n    <title>Syncfusion React Sample</title>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\n    <meta name=\"author\" content=\"Syncfusion\" />\n    <link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\n</head>\n\n<body class=\"{{theme}}\">\n     <style>\n            .control-section\n            {\n                margin-top: 100px;\n            }\n    </style>\n    <div id='sample'>\n</body>\n</html>\n","index.js":"import { createRoot } from 'react-dom/client';\nimport './index.css';\nimport * as React from 'react';\n\nimport { SampleBase } from './sample-base';\nimport { PropertyPane } from './property-pane';\nimport { UploaderComponent } from '@syncfusion/ej2-react-inputs';\nimport { DropDownListComponent } from '@syncfusion/ej2-react-dropdowns';\nimport { isNullOrUndefined } from '@syncfusion/ej2-base';\nexport class ChunkUpload extends SampleBase {\n    // Uploader component\n    listObj;\n    uploadObj;\n    ddlDatas;\n    fields;\n    value = 0;\n    isInteraction;\n    asyncSettings;\n    autoUpload;\n    constructor(props) {\n        super(props);\n        this.ddlDatas = [\n            { value: 500000, size: '500 KB' },\n            { value: 1000000, size: '1 MB' },\n            { value: 2000000, size: '2 MB' }\n        ];\n        this.fields = { text: 'size', value: 'value' };\n        this.isInteraction = false;\n        this.asyncSettings = {\n            saveUrl: 'http://localhost:62728/api/FileUploader/Save',\n            removeUrl: 'http://localhost:62728/api/FileUploader/Remove',\n            chunkSize: 500000\n        };\n        this.autoUpload = false;\n    }\n    onChange(args) {\n        this.uploadObj.asyncSettings.chunkSize = parseInt(args.itemData.value, 10);\n    }\n    onRemoveFile(args) {\n        args.postRawFile = false;\n    }\n    // to update flag variable value for automatic pause and resume\n    onPausing(args) {\n        if (args.event !== null && !navigator.onLine) {\n            this.isInteraction = true;\n        }\n        else {\n            this.isInteraction = false;\n        }\n    }\n    // to update flag variable value for automatic pause and resume\n    onResuming(args) {\n        if (args.event !== null && !navigator.onLine) {\n            this.isInteraction = true;\n        }\n        else {\n            this.isInteraction = false;\n        }\n    }\n    // to prevent triggering chunk-upload failure event and to pause uploading on network failure\n    onBeforeFailure(args) {\n        let proxy = this;\n        args.cancel = !this.isInteraction;\n        // interval to check network availability on every 500 milliseconds\n        let clearTimeInterval = setInterval(function () {\n            if (navigator.onLine && !isNullOrUndefined(proxy.uploadObj.filesData[0]) && proxy.uploadObj.filesData[0].statusCode == 4) {\n                proxy.uploadObj.resume(proxy.uploadObj.filesData);\n                clearSetInterval();\n            }\n            else {\n                if (!proxy.isInteraction && !isNullOrUndefined(proxy.uploadObj.filesData[0]) && proxy.uploadObj.filesData[0].statusCode == 3) {\n                    proxy.uploadObj.pause(proxy.uploadObj.filesData);\n                }\n            }\n        }, 500);\n        // clear Interval after when network is available.\n        function clearSetInterval() {\n            clearInterval(clearTimeInterval);\n        }\n    }\n    render() {\n        return (<div className='control-pane'>\n        <div className='control-section row uploadpreview'>\n         <div className='col-lg-8'>\n          <div className='upload_wrapper'>\n            {/* Render Uploader */}\n            <UploaderComponent id='chunkUpload' type='file' ref={(scope) => { this.uploadObj = scope; }} asyncSettings={this.asyncSettings} autoUpload={this.autoUpload} removing={this.onRemoveFile.bind(this)} pausing={this.onPausing.bind(this)} resuming={this.onResuming.bind(this)} chunkFailure={this.onBeforeFailure.bind(this)}></UploaderComponent>\n        </div>\n        </div>\n        <div className='col-lg-4 property-section' id=\"chunk-size\">\n            <PropertyPane title='Properties'>\n              <table id=\"property\" title=\"Properties\" className='chunk-table'>\n              <tbody>\n                <tr>\n                  <td className='chunk-td'>Chunk Size</td>\n                  <td>\n                    <DropDownListComponent id=\"chunksize\" index={this.value} dataSource={this.ddlDatas} ref={(dropdownlist) => { this.listObj = dropdownlist; }} fields={this.fields} change={this.onChange.bind(this)} placeholder=\"Select chunk size\"/>\n                  </td>\n                </tr>\n                </tbody>\n              </table>\n            </PropertyPane>\n          </div>\n        </div>\n      </div>);\n    }\n}\n\nconst root = createRoot(document.getElementById('sample'));\nroot.render(<ChunkUpload />);","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n                this.rendereComplete();\n            });\n        }\n    }\n    export function updateSampleSection(){}\n    ","dependencies":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-react-base\":\"*\",\"@syncfusion/ej2-inputs\":\"*\",\"@syncfusion/ej2-react-inputs\":\"*\",\"@syncfusion/ej2-dropdowns\":\"*\",\"@syncfusion/ej2-react-dropdowns\":\"*\",\"@syncfusion/ej2-icons\":\"*\",\"markdown-spellcheck\":\"^1.3.1\",\"@syncfusion/ej2-react-charts\":\"*\",\"@syncfusion/ej2/base\":\"*\",\"@syncfusion/ej2-charts'; // Import the necessary types from Syncfusion\":\"*\",\"@syncfusion/ej2-lists\":\"*\",\"@syncfusion/ej2-documenteditor\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-splitbuttons\":\"*\",\"@syncfusion/ej2-navigations\":\"*\",\"@syncfusion/ej2-react-popups\":\"*\",\"@syncfusion/ej2-pivotview\":\"*\",\"@syncfusion/ej2-react-progressbar\":\"*\",\"@syncfusion/ej2-schedule\":\"*\",\"@syncfusion/ej2-data\":\"*\"}"}