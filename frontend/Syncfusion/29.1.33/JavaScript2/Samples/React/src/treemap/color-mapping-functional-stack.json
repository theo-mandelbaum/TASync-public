{"index.css":"/* css */","property-pane.js":"import * as ReactDOM from 'react-dom';\nimport * as React from 'react';\nimport { select } from '@syncfusion/ej2-base';\nexport class PropertyPane extends React.Component {\n    render() {\n        const mobilePropPane = select('.sb-mobile-prop-pane');\n        const isMobile = window.matchMedia('(max-width:550px)').matches;\n        return isMobile && mobilePropPane ?\n            ReactDOM.createPortal(<div className='property-panel-section'>\n                    <div className=\"property-panel-header\">\n                        {this.props.title}\n                    </div>\n                    <div className=\"property-panel-content\">\n                        {this.props.children}\n                    </div>\n                </div>, mobilePropPane)\n            :\n                (<div className='property-panel-section'>\n                    <div className=\"property-panel-header\">\n                        {this.props.title}\n                    </div>\n                    <div className=\"property-panel-content\">\n                        {this.props.children}\n                    </div>\n                </div>);\n    }\n}\n","treemap-data/color.json":"{\n    \"color\" : [\n        {\"Name\": \"Greenland\", \"Area\": 2130800, \"Population\": 56483, \"Location\": \"North America\" },\n        {\"Name\": \"New Guinea\", \"Area\":785753, \"Population\": 1306940, \"Location\": \"Oceania\"},\n        {\"Name\": \"Borneo\", \"Area\":743330, \"Population\": 19804064, \"Location\":\"Asia\" },\n        {\"Name\": \"Madagascar\", \"Area\": 587713, \"Population\": 22005222, \"Location\": \"Africa\"},\n        {\"Name\": \"Baffin Island\", \"Area\":507451, \"Population\":10745, \"Location\": \"North America\" },\n        {\"Name\": \"Sumatra\", \"Area\": 443066, \"Population\":50000000, \"Location\": \"Asia\"},\n        {\"Name\": \"Honshu\", \"Area\":225800, \"Population\": 103000000, \"Location\": \"Asia\"},\n        {\"Name\": \"Victoria Island\", \"Area\":217291, \"Population\": 1875, \"Location\": \"North America\"},\n        {\"Name\": \"Great Britain\", \"Area\":209331, \"Population\":60800000, \"Location\":\"Europe\" },\n        {\"Name\": \"Ellesmere Island\", \"Area\": 183965, \"Population\": 146, \"Location\": \"North America\"}\n    ]\n}","index.html":"<!DOCTYPE html>\n<html>\n<head>\n    <title>Syncfusion React Sample</title>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\n    <meta name=\"author\" content=\"Syncfusion\" />\n    <link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\n</head>\n\n<body class=\"{{theme}}\">\n     <style>\n            .control-section\n            {\n                margin-top: 100px;\n            }\n    </style>\n    <div id='sample'>\n</body>\n</html>\n","index.js":"import { createRoot } from 'react-dom/client';\nimport './index.css';\n/**\n * Color Mapping sample for treemap\n */\nimport * as React from \"react\";\nimport { useEffect, useRef } from \"react\";\nimport { CheckBoxComponent } from \"@syncfusion/ej2-react-buttons\";\nimport { DropDownListComponent } from '@syncfusion/ej2-react-dropdowns';\nimport { TreeMapComponent, Inject, TreeMapLegend, TreeMapTooltip } from '@syncfusion/ej2-react-treemap';\nimport { PropertyPane } from './property-pane';\n\nimport * as data from './treemap-data/color.json';\nlet datasource = data;\nconst SAMPLE_CSS = `\n    .colorMappingPadding {\n        margin-left: -10px;margin-top: -10px;padding-left: 10px;\n    }\n    .e-view.fluent2-highcontrast #property .colorMappingPadding {\n        margin-left: -18px;\n    }\n    .e-view.fluent2 #property .colorMappingPadding, .e-view.fluent2-dark #property .colorMappingPadding {\n        margin-left: -8px;margin-top: -10px;padding-left: 0px;\n    }`;\nconst ColorMapping = () => {\n    let treemapInstance = useRef(null);\n    let typeElement = useRef(null);\n    let minOpacityElement = useRef(null);\n    let maxOpacityElement = useRef(null);\n    let opacityElement;\n    // Code for Property Panel\n    let dropList = [\n        { text: \"Range\", value: \"RangeColorMapping\" },\n        { text: \"Equal\", value: \"EqualColorMapping\" },\n        { text: \"Desaturation\", value: \"DesaturationColorMapping\" },\n    ];\n    const minOpacityChange = () => {\n        if (opacityElement.checked && !opacityElement.disabled) {\n            let minOpacity = parseFloat(minOpacityElement.current.value);\n            treemapInstance.current.leafItemSettings.colorMapping[0].minOpacity =\n                minOpacity;\n            treemapInstance.current.leafItemSettings.colorMapping[1].minOpacity =\n                minOpacity;\n            treemapInstance.current.refresh();\n        }\n    };\n    const maxOpacityChange = () => {\n        if (opacityElement.checked && !opacityElement.disabled) {\n            let maxOpacity = parseFloat(maxOpacityElement.current.value);\n            treemapInstance.current.leafItemSettings.colorMapping[0].maxOpacity =\n                maxOpacity;\n            treemapInstance.current.leafItemSettings.colorMapping[1].maxOpacity =\n                maxOpacity;\n            treemapInstance.current.refresh();\n        }\n    };\n    const opacityChange = (args) => {\n        let value = args.checked;\n        let minOpacity = parseFloat(minOpacityElement.current.value.toString());\n        let maxOpacity = parseFloat(maxOpacityElement.current.value.toString());\n        if (value) {\n            treemapInstance.current.leafItemSettings.colorMapping[0].minOpacity =\n                minOpacity;\n            treemapInstance.current.leafItemSettings.colorMapping[0].maxOpacity =\n                maxOpacity;\n            treemapInstance.current.leafItemSettings.colorMapping[1].minOpacity =\n                minOpacity;\n            treemapInstance.current.leafItemSettings.colorMapping[1].maxOpacity =\n                maxOpacity;\n            minOpacityElement.current.disabled = false;\n            maxOpacityElement.current.disabled = false;\n        }\n        else {\n            treemapInstance.current.leafItemSettings.colorMapping[0].minOpacity =\n                null;\n            treemapInstance.current.leafItemSettings.colorMapping[0].maxOpacity =\n                null;\n            treemapInstance.current.leafItemSettings.colorMapping[1].minOpacity =\n                null;\n            treemapInstance.current.leafItemSettings.colorMapping[1].maxOpacity =\n                null;\n            minOpacityElement.current.disabled = true;\n            maxOpacityElement.current.disabled = true;\n        }\n        treemapInstance.current.refresh();\n    };\n    const typeChange = () => {\n        let value = typeElement.current.value.toString();\n        if (value === \"RangeColorMapping\") {\n            opacityElement.disabled = true;\n            treemapInstance.current.rangeColorValuePath = \"Area\";\n            treemapInstance.current.leafItemSettings.colorMapping[2].minOpacity =\n                null;\n            treemapInstance.current.leafItemSettings.colorMapping[2].maxOpacity =\n                null;\n            treemapInstance.current.leafItemSettings.colorMapping[1].minOpacity =\n                null;\n            treemapInstance.current.leafItemSettings.colorMapping[1].maxOpacity =\n                null;\n            treemapInstance.current.leafItemSettings.colorMapping[4].minOpacity =\n                null;\n            treemapInstance.current.leafItemSettings.colorMapping[4].maxOpacity =\n                null;\n            treemapInstance.current.leafItemSettings.colorMapping[3].minOpacity =\n                null;\n            treemapInstance.current.leafItemSettings.colorMapping[3].maxOpacity =\n                null;\n            treemapInstance.current.leafItemSettings.colorMapping[5].minOpacity =\n                null;\n            treemapInstance.current.leafItemSettings.colorMapping[5].maxOpacity =\n                null;\n            treemapInstance.current.leafItemSettings.colorMapping[0].from = 100000;\n            treemapInstance.current.leafItemSettings.colorMapping[0].to = 250000;\n            treemapInstance.current.leafItemSettings.colorMapping[0].value = null;\n            treemapInstance.current.leafItemSettings.colorMapping[0].minOpacity =\n                null;\n            treemapInstance.current.leafItemSettings.colorMapping[0].maxOpacity =\n                null;\n            treemapInstance.current.leafItemSettings.colorMapping[1].value = null;\n            treemapInstance.current.leafItemSettings.colorMapping[2].value = null;\n            treemapInstance.current.leafItemSettings.colorMapping[0].label =\n                \"0.1M - 0.25M\";\n            treemapInstance.current.leafItemSettings.colorMapping[0].color =\n                \"#547C84\";\n            treemapInstance.current.leafItemSettings.colorMapping[1].from = 250000;\n            treemapInstance.current.leafItemSettings.colorMapping[1].to = 500000;\n            treemapInstance.current.leafItemSettings.colorMapping[1].label =\n                \"0.25M - 0.50M\";\n            treemapInstance.current.leafItemSettings.colorMapping[1].color =\n                \"#37AFAB\";\n            treemapInstance.current.leafItemSettings.colorMapping[2].from = 500000;\n            treemapInstance.current.leafItemSettings.colorMapping[2].to = 750000;\n            treemapInstance.current.leafItemSettings.colorMapping[2].label =\n                \"0.5M - 0.75M\";\n            treemapInstance.current.leafItemSettings.colorMapping[2].color =\n                \"#A4D6AD\";\n            treemapInstance.current.leafItemSettings.colorMapping[2].value = null;\n            treemapInstance.current.leafItemSettings.colorMapping[3].from = 750000;\n            treemapInstance.current.leafItemSettings.colorMapping[3].to = 2200000;\n            treemapInstance.current.leafItemSettings.colorMapping[3].label =\n                \"0.75M - 2M\";\n            treemapInstance.current.leafItemSettings.colorMapping[3].color =\n                \"#DEEBAE\";\n            treemapInstance.current.leafItemSettings.colorMapping[4].from = null;\n            treemapInstance.current.leafItemSettings.colorMapping[3].value = null;\n            treemapInstance.current.leafItemSettings.colorMapping[4].to = null;\n            treemapInstance.current.leafItemSettings.colorMapping[4].label = null;\n            treemapInstance.current.leafItemSettings.colorMapping[4].value = null;\n            treemapInstance.current.leafItemSettings.colorMapping[4].color = null;\n            treemapInstance.current.leafItemSettings.colorMapping[5].to = null;\n            treemapInstance.current.leafItemSettings.colorMapping[5].label = null;\n            treemapInstance.current.leafItemSettings.colorMapping[5].value = null;\n            treemapInstance.current.leafItemSettings.colorMapping[5].color = null;\n            treemapInstance.current.leafItemSettings.colorMapping[5].from = null;\n            treemapInstance.current.legendSettings.title.text = \"Area\";\n            treemapInstance.current.refresh();\n        }\n        else if (value === \"EqualColorMapping\") {\n            opacityElement.disabled = true;\n            treemapInstance.current.rangeColorValuePath = null;\n            treemapInstance.current.leafItemSettings.colorMapping[0].from = null;\n            treemapInstance.current.leafItemSettings.colorMapping[0].to = null;\n            treemapInstance.current.leafItemSettings.colorMapping[0].label = null;\n            treemapInstance.current.leafItemSettings.colorMapping[1].label = null;\n            treemapInstance.current.leafItemSettings.colorMapping[2].label = null;\n            treemapInstance.current.leafItemSettings.colorMapping[3].label = null;\n            treemapInstance.current.leafItemSettings.colorMapping[4].label = null;\n            treemapInstance.current.leafItemSettings.colorMapping[0].value =\n                \"North America\";\n            treemapInstance.current.leafItemSettings.colorMapping[0].color =\n                \"#DEEBAE\";\n            treemapInstance.current.leafItemSettings.colorMapping[1].from = null;\n            treemapInstance.current.leafItemSettings.colorMapping[1].to = null;\n            treemapInstance.current.leafItemSettings.colorMapping[1].value =\n                \"Oceania\";\n            treemapInstance.current.leafItemSettings.colorMapping[1].color =\n                \"#A4D6AD\";\n            treemapInstance.current.leafItemSettings.colorMapping[2].from = null;\n            treemapInstance.current.leafItemSettings.colorMapping[2].to = null;\n            treemapInstance.current.leafItemSettings.colorMapping[2].value = \"Asia\";\n            treemapInstance.current.leafItemSettings.colorMapping[2].color =\n                \"#37AFAB\";\n            treemapInstance.current.leafItemSettings.colorMapping[3].from = null;\n            treemapInstance.current.leafItemSettings.colorMapping[3].to = null;\n            treemapInstance.current.leafItemSettings.colorMapping[3].value = \"Africa\";\n            treemapInstance.current.leafItemSettings.colorMapping[3].color =\n                \"#547C84\";\n            treemapInstance.current.leafItemSettings.colorMapping[4].from = null;\n            treemapInstance.current.leafItemSettings.colorMapping[4].to = null;\n            treemapInstance.current.leafItemSettings.colorMapping[4].value = \"Europe\";\n            treemapInstance.current.leafItemSettings.colorMapping[4].color =\n                \"#CEBF93\";\n            treemapInstance.current.leafItemSettings.colorMapping[0].minOpacity =\n                null;\n            treemapInstance.current.leafItemSettings.colorMapping[0].maxOpacity =\n                null;\n            treemapInstance.current.leafItemSettings.colorMapping[1].minOpacity =\n                null;\n            treemapInstance.current.leafItemSettings.colorMapping[1].maxOpacity =\n                null;\n            treemapInstance.current.leafItemSettings.colorMapping[2].minOpacity =\n                null;\n            treemapInstance.current.leafItemSettings.colorMapping[2].maxOpacity =\n                null;\n            treemapInstance.current.leafItemSettings.colorMapping[3].minOpacity =\n                null;\n            treemapInstance.current.leafItemSettings.colorMapping[3].maxOpacity =\n                null;\n            treemapInstance.current.leafItemSettings.colorMapping[4].minOpacity =\n                null;\n            treemapInstance.current.leafItemSettings.colorMapping[4].maxOpacity =\n                null;\n            treemapInstance.current.equalColorValuePath = \"Location\";\n            treemapInstance.current.legendSettings.title.text = \"Continent\";\n            treemapInstance.current.refresh();\n        }\n        else if (value === \"DesaturationColorMapping\") {\n            opacityElement.disabled = false;\n            treemapInstance.current.rangeColorValuePath = \"Area\";\n            treemapInstance.current.equalColorValuePath = null;\n            let minOpacity = document.getElementById(\"minOpacity\");\n            let maxOpacity = document.getElementById(\"maxOpacity\");\n            treemapInstance.current.leafItemSettings.colorMapping[2].from = null;\n            treemapInstance.current.leafItemSettings.colorMapping[2].to = null;\n            treemapInstance.current.leafItemSettings.colorMapping[1].from = null;\n            treemapInstance.current.leafItemSettings.colorMapping[1].to = null;\n            treemapInstance.current.leafItemSettings.colorMapping[1].label = null;\n            treemapInstance.current.leafItemSettings.colorMapping[3].from = null;\n            treemapInstance.current.leafItemSettings.colorMapping[3].to = null;\n            treemapInstance.current.leafItemSettings.colorMapping[0].from = 100000;\n            treemapInstance.current.leafItemSettings.colorMapping[0].to = 2230800;\n            treemapInstance.current.leafItemSettings.colorMapping[0].label =\n                \"0.1M - 2M\";\n            treemapInstance.current.leafItemSettings.colorMapping[0].value = null;\n            treemapInstance.current.leafItemSettings.colorMapping[1].value = null;\n            treemapInstance.current.leafItemSettings.colorMapping[2].value = null;\n            treemapInstance.current.leafItemSettings.colorMapping[3].value = null;\n            treemapInstance.current.leafItemSettings.colorMapping[2].color = null;\n            treemapInstance.current.leafItemSettings.colorMapping[1].color = null;\n            treemapInstance.current.leafItemSettings.colorMapping[3].color = null;\n            treemapInstance.current.leafItemSettings.colorMapping[0].color = [\n                \"#F0D6AD\",\n                \"#19547B\",\n            ];\n            if (opacityElement.checked) {\n                treemapInstance.current.leafItemSettings.colorMapping[0].minOpacity =\n                    parseFloat(minOpacity.value);\n                treemapInstance.current.leafItemSettings.colorMapping[0].maxOpacity =\n                    parseFloat(maxOpacity.value);\n            }\n            else {\n                treemapInstance.current.leafItemSettings.colorMapping[0].minOpacity =\n                    null;\n                treemapInstance.current.leafItemSettings.colorMapping[0].maxOpacity =\n                    null;\n            }\n            treemapInstance.current.legendSettings.title.text = \"Area\";\n            treemapInstance.current.refresh();\n        }\n    };\n    const load = (args) => {\n    };\n    return (<main><div className=\"control-pane\">\n            <style>{SAMPLE_CSS}</style>\n            <div className=\"control-section\">\n                <div className=\"col-md-9\">\n                    <TreeMapComponent load={load.bind(this)} id=\"treemap-container\" ref={treemapInstance} titleSettings={{\n            //To config title for treemap\n            text: \"Top 10 largest islands in the World\",\n            textStyle: { size: \"15px\" },\n        }} format={\"n\"} useGroupingSeparator={true} rangeColorValuePath=\"Area\" dataSource={datasource.color} legendSettings={{\n            // To config legend for treemap\n            visible: true,\n            position: \"Bottom\",\n            mode: \"Interactive\",\n            height: \"10\",\n            title: {\n                text: \"Area\",\n            },\n        }} tooltipSettings={{\n            // To config tooltip for treemap\n            visible: true,\n            format: \"Name: ${Name}<br>Area: ${Area} per square kms<br>Continent: ${Location}\",\n            opacity: 0.8,\n        }} weightValuePath=\"Area\" leafItemSettings={{\n            // To config leafitem customization for treemap\n            labelPath: \"Name\",\n            border: { color: \"white\", width: 0.5 },\n            colorMapping: [\n                {\n                    from: 100000,\n                    to: 250000,\n                    label: \"0.1M - 0.25M\",\n                    color: \"#547C84\",\n                },\n                {\n                    from: 250000,\n                    to: 550000,\n                    label: \"0.25M - 0.55M\",\n                    color: \"#37AFAB\",\n                },\n                {\n                    from: 550000,\n                    to: 750000,\n                    label: \"0.55M - 0.75M\",\n                    color: \"#A4D6AD\",\n                },\n                {\n                    from: 750000,\n                    to: 2250000,\n                    label: \"0.75M - 2M\",\n                    color: \"#DEEBAE\",\n                },\n                { to: null, from: null, color: \"null\" },\n                { to: null, from: null, color: \"null\" },\n            ],\n        }}>\n                        <Inject services={[TreeMapLegend, TreeMapTooltip]}/>\n                    </TreeMapComponent>\n                </div>\n                {/* Property Panel */}\n                <div className=\"col-md-3 property-section\">\n                    <PropertyPane title=\"Properties\">\n                        <table role=\"none\" id=\"property\" title=\"Properties\" className=\"property-panel-table\" style={{ width: \"100%\", marginBottom: \"20px\" }}>\n                          <tbody>\n                            <tr>\n                                <td>\n                                    <div style={{ paddingLeft: \"0px\" }}>Color Mapping Type</div>\n                                </td>\n                                <td>\n                                    <div>\n                                        <DropDownListComponent id=\"Type\" width=\"100%\" index={0} change={typeChange.bind(this)} ref={typeElement} dataSource={dropList} fields={{ text: \"text\", value: \"value\" }}/>\n                                    </div>\n                                </td>\n                            </tr>\n                            <tr id=\"hideOne\" style={{ height: \"50px\" }}>\n                                <td>\n                                    <div style={{ paddingLeft: \"0px\" }}>Change Opacity</div>\n                                </td>\n                                <td>\n                                    <div className=\"colorMappingPadding\">\n                                        <CheckBoxComponent id=\"opacity\" checked={false} change={opacityChange.bind(this)} ref={(d) => (opacityElement = d)} disabled={true} style={{ paddingLeft: \"0px\" }}/>\n                                    </div>\n                                </td>\n                            </tr>\n                            <tr id=\"hideTwo\" style={{ height: \"50px\" }}>\n                                <td>\n                                    <div style={{ paddingLeft: \"0px\" }}>Min Opacity</div>\n                                </td>\n                                <td>\n                                    <div>\n                                        <input type=\"range\" id=\"minOpacity\" disabled onChange={minOpacityChange.bind(this)} ref={minOpacityElement} min=\"0\" max=\"1\" step=\"0.1\" defaultValue=\"0.5\"/>\n                                    </div>\n                                </td>\n                            </tr>\n                            <tr id=\"hideThree\" style={{ height: \"50px\" }}>\n                                <td>\n                                    <div style={{ paddingLeft: \"0px\" }}>Max Opacity</div>\n                                </td>\n                                <td>\n                                    <div>\n                                        <input type=\"range\" id=\"maxOpacity\" disabled onChange={maxOpacityChange.bind(this)} ref={maxOpacityElement} min=\"0\" max=\"1\" step=\"0.1\" defaultValue=\"1\"/>\n                                    </div>\n                                </td>\n                            </tr>\n                          </tbody>\n                        </table>\n                    </PropertyPane>\n                </div>\n            </div>\n        </div>\n            <section id=\"action-description\" aria-label=\"Description of TreeMap sample\">\n                <p>\n                    This sample visualizes the top 10 largest islands in the world based\n                    on area. The color mapping is applied to the items to differentiate\n                    them from other items.\n                </p>\n            </section>\n            <section id=\"description\" aria-label=\"Description of the TreeMap features demonstrated in this sample\">\n                <p>\n                    In this example, you can see how to render a tree map with color\n                    mapping. The range color mapping and desaturation color mapping group\n                    the shapes based on the area size, whereas the equal color mapping\n                    groups the shapes based on the continent value. The legend is enabled\n                    in this example to represent each color mapping.\n                    <br />\n                    <br />\n                    The tooltip is enabled in this example. To see the tooltip in action,\n                    hover the mouse over an item or tap an item in touch enabled devices.\n                </p>\n                <br />\n                <p className=\"description-header\">Injecting Module</p>\n                <p>\n                    The TreeMap component features are segregated into individual modules\n                    by feature. To use a legend, inject the <code>Legend</code> module\n                    using the <code>TreeMap.Inject(TreeMapLegend)</code> method.\n                </p>\n            </section>\n        </main>);\n};\nexport default ColorMapping;\n\nconst root = createRoot(document.getElementById('sample'));\nroot.render(<ColorMapping />);","dependencies":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-react-base\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-react-buttons\":\"*\",\"@syncfusion/ej2-dropdowns\":\"*\",\"@syncfusion/ej2-react-dropdowns\":\"*\",\"@syncfusion/ej2-treemap\":\"*\",\"@syncfusion/ej2-react-treemap\":\"*\",\"@syncfusion/ej2-react-charts\":\"*\",\"@syncfusion/ej2/base\":\"*\",\"@syncfusion/ej2-charts'; // Import the necessary types from Syncfusion\":\"*\",\"@syncfusion/ej2-lists\":\"*\",\"@syncfusion/ej2-documenteditor\":\"*\",\"@syncfusion/ej2-splitbuttons\":\"*\",\"@syncfusion/ej2-navigations\":\"*\",\"@syncfusion/ej2-react-popups\":\"*\",\"@syncfusion/ej2-pivotview\":\"*\",\"@syncfusion/ej2-react-progressbar\":\"*\",\"@syncfusion/ej2-schedule\":\"*\",\"@syncfusion/ej2-data\":\"*\"}"}