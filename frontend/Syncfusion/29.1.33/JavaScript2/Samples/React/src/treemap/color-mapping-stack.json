{"index.css":"/* css */","property-pane.js":"import * as ReactDOM from 'react-dom';\nimport * as React from 'react';\nimport { select } from '@syncfusion/ej2-base';\nexport class PropertyPane extends React.Component {\n    render() {\n        const mobilePropPane = select('.sb-mobile-prop-pane');\n        const isMobile = window.matchMedia('(max-width:550px)').matches;\n        return isMobile && mobilePropPane ?\n            ReactDOM.createPortal(<div className='property-panel-section'>\n                    <div className=\"property-panel-header\">\n                        {this.props.title}\n                    </div>\n                    <div className=\"property-panel-content\">\n                        {this.props.children}\n                    </div>\n                </div>, mobilePropPane)\n            :\n                (<div className='property-panel-section'>\n                    <div className=\"property-panel-header\">\n                        {this.props.title}\n                    </div>\n                    <div className=\"property-panel-content\">\n                        {this.props.children}\n                    </div>\n                </div>);\n    }\n}\n","treemap-data/color.json":"{\n    \"color\" : [\n        {\"Name\": \"Greenland\", \"Area\": 2130800, \"Population\": 56483, \"Location\": \"North America\" },\n        {\"Name\": \"New Guinea\", \"Area\":785753, \"Population\": 1306940, \"Location\": \"Oceania\"},\n        {\"Name\": \"Borneo\", \"Area\":743330, \"Population\": 19804064, \"Location\":\"Asia\" },\n        {\"Name\": \"Madagascar\", \"Area\": 587713, \"Population\": 22005222, \"Location\": \"Africa\"},\n        {\"Name\": \"Baffin Island\", \"Area\":507451, \"Population\":10745, \"Location\": \"North America\" },\n        {\"Name\": \"Sumatra\", \"Area\": 443066, \"Population\":50000000, \"Location\": \"Asia\"},\n        {\"Name\": \"Honshu\", \"Area\":225800, \"Population\": 103000000, \"Location\": \"Asia\"},\n        {\"Name\": \"Victoria Island\", \"Area\":217291, \"Population\": 1875, \"Location\": \"North America\"},\n        {\"Name\": \"Great Britain\", \"Area\":209331, \"Population\":60800000, \"Location\":\"Europe\" },\n        {\"Name\": \"Ellesmere Island\", \"Area\": 183965, \"Population\": 146, \"Location\": \"North America\"}\n    ]\n}","index.html":"<!DOCTYPE html>\n<html>\n<head>\n    <title>Syncfusion React Sample</title>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\n    <meta name=\"author\" content=\"Syncfusion\" />\n    <link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\n</head>\n\n<body class=\"{{theme}}\">\n     <style>\n            .control-section\n            {\n                margin-top: 100px;\n            }\n    </style>\n    <div id='sample'>\n</body>\n</html>\n","index.js":"import { createRoot } from 'react-dom/client';\nimport './index.css';\n/**\n * Color Mapping sample for treemap\n */\nimport * as React from \"react\";\nimport { CheckBoxComponent } from \"@syncfusion/ej2-react-buttons\";\nimport { DropDownListComponent } from '@syncfusion/ej2-react-dropdowns';\nimport { TreeMapComponent, Inject, TreeMapLegend, TreeMapTooltip } from '@syncfusion/ej2-react-treemap';\nimport { PropertyPane } from './property-pane';\nimport { SampleBase } from './sample-base';\nimport * as data from './treemap-data/color.json';\nlet datasource = data;\nconst SAMPLE_CSS = `\n    .colorMappingPadding {\n        margin-left: -10px;margin-top: -10px;padding-left: 10px;\n    }\n    .e-view.fluent2-highcontrast #property .colorMappingPadding {\n        margin-left: -18px;\n    }\n    .e-view.fluent2 #property .colorMappingPadding, .e-view.fluent2-dark #property .colorMappingPadding {\n        margin-left: -8px;margin-top: -10px;padding-left: 0px;\n    }`;\nexport class ColorMapping extends SampleBase {\n    treemapInstance;\n    typeElement;\n    minOpacityElement;\n    maxOpacityElement;\n    opacityElement;\n    // Code for Property Panel\n    dropList = [\n        { text: 'Range', value: 'RangeColorMapping' },\n        { text: 'Equal', value: 'EqualColorMapping' },\n        { text: 'Desaturation', value: 'DesaturationColorMapping' }\n    ];\n    minOpacityChange() {\n        if (this.opacityElement.checked && !this.opacityElement.disabled) {\n            let slider = document.getElementById('minOpacity');\n            let minOpacity = parseFloat(slider.value);\n            this.treemapInstance.leafItemSettings.colorMapping[0].minOpacity = minOpacity;\n            this.treemapInstance.leafItemSettings.colorMapping[1].minOpacity = minOpacity;\n            this.treemapInstance.refresh();\n        }\n    }\n    maxOpacityChange() {\n        if (this.opacityElement.checked && !this.opacityElement.disabled) {\n            let slider = document.getElementById('maxOpacity');\n            let maxOpacity = parseFloat(slider.value);\n            this.treemapInstance.leafItemSettings.colorMapping[0].maxOpacity = maxOpacity;\n            this.treemapInstance.leafItemSettings.colorMapping[1].maxOpacity = maxOpacity;\n            this.treemapInstance.refresh();\n        }\n    }\n    opacityChange(args) {\n        let value = args.checked;\n        let minOpacity = parseFloat(this.minOpacityElement.value.toString());\n        let maxOpacity = parseFloat(this.maxOpacityElement.value.toString());\n        if (value) {\n            this.treemapInstance.leafItemSettings.colorMapping[0].minOpacity = minOpacity;\n            this.treemapInstance.leafItemSettings.colorMapping[0].maxOpacity = maxOpacity;\n            this.treemapInstance.leafItemSettings.colorMapping[1].minOpacity = minOpacity;\n            this.treemapInstance.leafItemSettings.colorMapping[1].maxOpacity = maxOpacity;\n            this.minOpacityElement.disabled = false;\n            this.maxOpacityElement.disabled = false;\n        }\n        else {\n            this.treemapInstance.leafItemSettings.colorMapping[0].minOpacity = null;\n            this.treemapInstance.leafItemSettings.colorMapping[0].maxOpacity = null;\n            this.treemapInstance.leafItemSettings.colorMapping[1].minOpacity = null;\n            this.treemapInstance.leafItemSettings.colorMapping[1].maxOpacity = null;\n            this.minOpacityElement.disabled = true;\n            this.maxOpacityElement.disabled = true;\n        }\n        this.treemapInstance.refresh();\n    }\n    typeChange() {\n        let value = this.typeElement.value.toString();\n        if (value === 'RangeColorMapping') {\n            this.opacityElement.disabled = true;\n            this.treemapInstance.rangeColorValuePath = 'Area';\n            this.treemapInstance.leafItemSettings.colorMapping[2].minOpacity = null;\n            this.treemapInstance.leafItemSettings.colorMapping[2].maxOpacity = null;\n            this.treemapInstance.leafItemSettings.colorMapping[1].minOpacity = null;\n            this.treemapInstance.leafItemSettings.colorMapping[1].maxOpacity = null;\n            this.treemapInstance.leafItemSettings.colorMapping[4].minOpacity = null;\n            this.treemapInstance.leafItemSettings.colorMapping[4].maxOpacity = null;\n            this.treemapInstance.leafItemSettings.colorMapping[3].minOpacity = null;\n            this.treemapInstance.leafItemSettings.colorMapping[3].maxOpacity = null;\n            this.treemapInstance.leafItemSettings.colorMapping[5].minOpacity = null;\n            this.treemapInstance.leafItemSettings.colorMapping[5].maxOpacity = null;\n            this.treemapInstance.leafItemSettings.colorMapping[0].from = 100000;\n            this.treemapInstance.leafItemSettings.colorMapping[0].to = 250000;\n            this.treemapInstance.leafItemSettings.colorMapping[0].value = null;\n            this.treemapInstance.leafItemSettings.colorMapping[0].minOpacity = null;\n            this.treemapInstance.leafItemSettings.colorMapping[0].maxOpacity = null;\n            this.treemapInstance.leafItemSettings.colorMapping[1].value = null;\n            this.treemapInstance.leafItemSettings.colorMapping[2].value = null;\n            this.treemapInstance.leafItemSettings.colorMapping[0].label = '0.1M - 0.25M';\n            this.treemapInstance.leafItemSettings.colorMapping[0].color = '#547C84';\n            this.treemapInstance.leafItemSettings.colorMapping[1].from = 250000;\n            this.treemapInstance.leafItemSettings.colorMapping[1].to = 500000;\n            this.treemapInstance.leafItemSettings.colorMapping[1].label = '0.25M - 0.50M';\n            this.treemapInstance.leafItemSettings.colorMapping[1].color = '#37AFAB';\n            this.treemapInstance.leafItemSettings.colorMapping[2].from = 500000;\n            this.treemapInstance.leafItemSettings.colorMapping[2].to = 750000;\n            this.treemapInstance.leafItemSettings.colorMapping[2].label = '0.5M - 0.75M';\n            this.treemapInstance.leafItemSettings.colorMapping[2].color = '#A4D6AD';\n            this.treemapInstance.leafItemSettings.colorMapping[2].value = null;\n            this.treemapInstance.leafItemSettings.colorMapping[3].from = 750000;\n            this.treemapInstance.leafItemSettings.colorMapping[3].to = 2200000;\n            this.treemapInstance.leafItemSettings.colorMapping[3].label = '0.75M - 2M';\n            this.treemapInstance.leafItemSettings.colorMapping[3].color = '#DEEBAE';\n            this.treemapInstance.leafItemSettings.colorMapping[4].from = null;\n            this.treemapInstance.leafItemSettings.colorMapping[3].value = null;\n            this.treemapInstance.leafItemSettings.colorMapping[4].to = null;\n            this.treemapInstance.leafItemSettings.colorMapping[4].label = null;\n            this.treemapInstance.leafItemSettings.colorMapping[4].value = null;\n            this.treemapInstance.leafItemSettings.colorMapping[4].color = null;\n            this.treemapInstance.leafItemSettings.colorMapping[5].to = null;\n            this.treemapInstance.leafItemSettings.colorMapping[5].label = null;\n            this.treemapInstance.leafItemSettings.colorMapping[5].value = null;\n            this.treemapInstance.leafItemSettings.colorMapping[5].color = null;\n            this.treemapInstance.leafItemSettings.colorMapping[5].from = null;\n            this.treemapInstance.legendSettings.title.text = 'Area';\n            this.treemapInstance.refresh();\n        }\n        else if (value === 'EqualColorMapping') {\n            this.opacityElement.disabled = true;\n            this.treemapInstance.rangeColorValuePath = null;\n            this.treemapInstance.leafItemSettings.colorMapping[0].from = null;\n            this.treemapInstance.leafItemSettings.colorMapping[0].to = null;\n            this.treemapInstance.leafItemSettings.colorMapping[0].label = null;\n            this.treemapInstance.leafItemSettings.colorMapping[1].label = null;\n            this.treemapInstance.leafItemSettings.colorMapping[2].label = null;\n            this.treemapInstance.leafItemSettings.colorMapping[3].label = null;\n            this.treemapInstance.leafItemSettings.colorMapping[4].label = null;\n            this.treemapInstance.leafItemSettings.colorMapping[0].value = 'North America';\n            this.treemapInstance.leafItemSettings.colorMapping[0].color = '#DEEBAE';\n            this.treemapInstance.leafItemSettings.colorMapping[1].from = null;\n            this.treemapInstance.leafItemSettings.colorMapping[1].to = null;\n            this.treemapInstance.leafItemSettings.colorMapping[1].value = 'Oceania';\n            this.treemapInstance.leafItemSettings.colorMapping[1].color = '#A4D6AD';\n            this.treemapInstance.leafItemSettings.colorMapping[2].from = null;\n            this.treemapInstance.leafItemSettings.colorMapping[2].to = null;\n            this.treemapInstance.leafItemSettings.colorMapping[2].value = 'Asia';\n            this.treemapInstance.leafItemSettings.colorMapping[2].color = '#37AFAB';\n            this.treemapInstance.leafItemSettings.colorMapping[3].from = null;\n            this.treemapInstance.leafItemSettings.colorMapping[3].to = null;\n            this.treemapInstance.leafItemSettings.colorMapping[3].value = 'Africa';\n            this.treemapInstance.leafItemSettings.colorMapping[3].color = '#547C84';\n            this.treemapInstance.leafItemSettings.colorMapping[4].from = null;\n            this.treemapInstance.leafItemSettings.colorMapping[4].to = null;\n            this.treemapInstance.leafItemSettings.colorMapping[4].value = 'Europe';\n            this.treemapInstance.leafItemSettings.colorMapping[4].color = '#CEBF93';\n            this.treemapInstance.leafItemSettings.colorMapping[0].minOpacity = null;\n            this.treemapInstance.leafItemSettings.colorMapping[0].maxOpacity = null;\n            this.treemapInstance.leafItemSettings.colorMapping[1].minOpacity = null;\n            this.treemapInstance.leafItemSettings.colorMapping[1].maxOpacity = null;\n            this.treemapInstance.leafItemSettings.colorMapping[2].minOpacity = null;\n            this.treemapInstance.leafItemSettings.colorMapping[2].maxOpacity = null;\n            this.treemapInstance.leafItemSettings.colorMapping[3].minOpacity = null;\n            this.treemapInstance.leafItemSettings.colorMapping[3].maxOpacity = null;\n            this.treemapInstance.leafItemSettings.colorMapping[4].minOpacity = null;\n            this.treemapInstance.leafItemSettings.colorMapping[4].maxOpacity = null;\n            this.treemapInstance.equalColorValuePath = 'Location';\n            this.treemapInstance.legendSettings.title.text = 'Continent';\n            this.treemapInstance.refresh();\n        }\n        else if (value === 'DesaturationColorMapping') {\n            this.opacityElement.disabled = false;\n            this.treemapInstance.rangeColorValuePath = 'Area';\n            this.treemapInstance.equalColorValuePath = null;\n            let minOpacity = document.getElementById('minOpacity');\n            let maxOpacity = document.getElementById('maxOpacity');\n            this.treemapInstance.leafItemSettings.colorMapping[2].from = null;\n            this.treemapInstance.leafItemSettings.colorMapping[2].to = null;\n            this.treemapInstance.leafItemSettings.colorMapping[1].from = null;\n            this.treemapInstance.leafItemSettings.colorMapping[1].to = null;\n            this.treemapInstance.leafItemSettings.colorMapping[1].label = null;\n            this.treemapInstance.leafItemSettings.colorMapping[3].from = null;\n            this.treemapInstance.leafItemSettings.colorMapping[3].to = null;\n            this.treemapInstance.leafItemSettings.colorMapping[0].from = 100000;\n            this.treemapInstance.leafItemSettings.colorMapping[0].to = 2230800;\n            this.treemapInstance.leafItemSettings.colorMapping[0].label = '0.1M - 2M';\n            this.treemapInstance.leafItemSettings.colorMapping[0].value = null;\n            this.treemapInstance.leafItemSettings.colorMapping[1].value = null;\n            this.treemapInstance.leafItemSettings.colorMapping[2].value = null;\n            this.treemapInstance.leafItemSettings.colorMapping[3].value = null;\n            this.treemapInstance.leafItemSettings.colorMapping[2].color = null;\n            this.treemapInstance.leafItemSettings.colorMapping[1].color = null;\n            this.treemapInstance.leafItemSettings.colorMapping[3].color = null;\n            this.treemapInstance.leafItemSettings.colorMapping[0].color = ['#F0D6AD', '#19547B'];\n            if (this.opacityElement.checked) {\n                this.treemapInstance.leafItemSettings.colorMapping[0].minOpacity = parseFloat(minOpacity.value);\n                this.treemapInstance.leafItemSettings.colorMapping[0].maxOpacity = parseFloat(maxOpacity.value);\n            }\n            else {\n                this.treemapInstance.leafItemSettings.colorMapping[0].minOpacity = null;\n                this.treemapInstance.leafItemSettings.colorMapping[0].maxOpacity = null;\n            }\n            this.treemapInstance.legendSettings.title.text = 'Area';\n            this.treemapInstance.refresh();\n        }\n    }\n    load(args) {\n    }\n    render() {\n        return (<main><div className='control-pane'>\n\t\t\t\t<style>\n\t\t\t\t\t{SAMPLE_CSS}\n\t\t\t\t</style>\n\t\t\t\t<div className='control-section'>\n\t\t\t\t\t<div className='col-md-9'>\n\t\t\t\t\t\t<TreeMapComponent load={this.load.bind(this)} id='treemap-container' ref={m => this.treemapInstance = m} titleSettings={{\n                text: 'Top 10 largest islands in the World',\n                textStyle: { size: '15px' }\n            }} format={\"n\"} useGroupingSeparator={true} rangeColorValuePath='Area' dataSource={datasource.color} legendSettings={{\n                visible: true,\n                position: 'Bottom',\n                mode: 'Interactive',\n                height: '10',\n                title: {\n                    text: 'Area'\n                }\n            }} tooltipSettings={{\n                visible: true,\n                format: 'Name: ${Name}<br>Area: ${Area} per square kms<br>Continent: ${Location}',\n                opacity: 0.8\n            }} weightValuePath='Area' leafItemSettings={{\n                labelPath: 'Name',\n                border: { color: 'white', width: 0.5 },\n                colorMapping: [\n                    { from: 100000, to: 250000, label: '0.1M - 0.25M', color: '#547C84' },\n                    { from: 250000, to: 550000, label: '0.25M - 0.55M', color: '#37AFAB' },\n                    { from: 550000, to: 750000, label: '0.55M - 0.75M', color: '#A4D6AD' },\n                    { from: 750000, to: 2250000, label: '0.75M - 2M', color: '#DEEBAE' },\n                    { to: null, from: null, color: 'null' },\n                    { to: null, from: null, color: 'null' },\n                ]\n            }}>\n\t\t\t\t\t\t\t<Inject services={[TreeMapLegend, TreeMapTooltip]}/>\n\t\t\t\t\t\t</TreeMapComponent>\n\t\t\t\t\t</div>\n                    {/* Property Panel */}\n\t\t\t\t\t<div className='col-md-3 property-section'>\n\t\t\t\t\t\t<PropertyPane title='Properties'>\n\t\t\t\t\t\t\t<table id='property' role='none' title='Properties' className='property-panel-table' style={{ width: '100%', marginBottom: '20px' }}>\n                              <tbody>\n                                <tr>\n\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t<div style={{ paddingLeft: '0px' }}>Color Mapping Type</div>\n\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t\t\t<DropDownListComponent id=\"Type\" width=\"100%\" index={0} change={this.typeChange.bind(this)} ref={d => this.typeElement = d} dataSource={this.dropList} fields={{ text: 'text', value: 'value' }}/>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t<tr id=\"hideOne\" style={{ height: '50px' }}>\n\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t<div style={{ paddingLeft: '0px' }}>Change Opacity</div>\n\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t<div className=\"colorMappingPadding\">\n\t\t\t\t\t\t\t\t\t\t\t<CheckBoxComponent id='opacity' checked={false} change={this.opacityChange.bind(this)} ref={d => this.opacityElement = d} disabled={true} style={{ paddingLeft: '0px' }}/>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t<tr id=\"hideTwo\" style={{ height: '50px' }}>\n\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t<div style={{ paddingLeft: '0px' }}>Min Opacity</div>\n\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t\t\t<input type=\"range\" id='minOpacity' disabled onChange={this.minOpacityChange.bind(this)} ref={d => this.minOpacityElement = d} min=\"0\" max=\"1\" step=\"0.1\" defaultValue=\"0.5\"/>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t<tr id=\"hideThree\" style={{ height: '50px' }}>\n\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t<div style={{ paddingLeft: '0px' }}>Max Opacity</div>\n\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t\t\t<input type=\"range\" id='maxOpacity' disabled onChange={this.maxOpacityChange.bind(this)} ref={d => this.maxOpacityElement = d} min=\"0\" max=\"1\" step=\"0.1\" defaultValue=\"1\"/>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t</tr>\n                              </tbody>\n\t\t\t\t\t\t\t</table>\n\t\t\t\t\t\t</PropertyPane>\n\t\t\t\t\t</div>\n                </div>\n            </div>\n\t\t\t\t<section id=\"action-description\" aria-label=\"Description of TreeMap sample\">\n\t\t\t\t\t<p>\n                    This sample visualizes the top 10 largest islands in the world based on area. The color mapping is applied to the items to differentiate them from other items.\n                    </p>\n\t\t\t\t</section>\n\t\t\t\t<section id=\"description\" aria-label=\"Description of the TreeMap features demonstrated in this sample\">\n\t\t\t\t\t<p>\n                        In this example, you can see how to render a tree map with color mapping. The range color mapping and desaturation color mapping group the shapes based on the area size, whereas the equal color mapping groups the shapes based on the continent value. The legend is enabled in this example to represent each color mapping.\n\t\t\t\t\t\t<br /><br />\n\t\t\t\t\t\tThe tooltip is enabled in this example. To see the tooltip in action, hover the mouse over an item or tap an item in touch enabled devices.\n\t\t\t\t\t</p>\n\t\t\t\t\t<br />\n\t\t\t\t\t<p className='description-header'>Injecting Module</p>\n\t\t\t\t\t<p>\n                    The TreeMap component features are segregated into individual modules by feature. To use a legend, inject the <code>Legend</code> module using the <code>TreeMap.Inject(TreeMapLegend)</code> method.\n                    </p>\n\t\t\t\t</section>\n            </main>);\n    }\n}\n\nconst root = createRoot(document.getElementById('sample'));\nroot.render(<ColorMapping />);","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n                this.rendereComplete();\n            });\n        }\n    }\n    export function updateSampleSection(){}\n    ","dependencies":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-react-base\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-react-buttons\":\"*\",\"@syncfusion/ej2-dropdowns\":\"*\",\"@syncfusion/ej2-react-dropdowns\":\"*\",\"@syncfusion/ej2-treemap\":\"*\",\"@syncfusion/ej2-react-treemap\":\"*\",\"@syncfusion/ej2-react-charts\":\"*\",\"@syncfusion/ej2/base\":\"*\",\"@syncfusion/ej2-charts'; // Import the necessary types from Syncfusion\":\"*\",\"@syncfusion/ej2-lists\":\"*\",\"@syncfusion/ej2-documenteditor\":\"*\",\"@syncfusion/ej2-splitbuttons\":\"*\",\"@syncfusion/ej2-navigations\":\"*\",\"@syncfusion/ej2-react-popups\":\"*\",\"@syncfusion/ej2-pivotview\":\"*\",\"@syncfusion/ej2-react-progressbar\":\"*\",\"@syncfusion/ej2-schedule\":\"*\",\"@syncfusion/ej2-data\":\"*\"}"}