{"index.css":"/* css */","property-pane.js":"import * as ReactDOM from 'react-dom';\nimport * as React from 'react';\nimport { select } from '@syncfusion/ej2-base';\nexport class PropertyPane extends React.Component {\n    render() {\n        const mobilePropPane = select('.sb-mobile-prop-pane');\n        const isMobile = window.matchMedia('(max-width:550px)').matches;\n        return isMobile && mobilePropPane ?\n            ReactDOM.createPortal(<div className='property-panel-section'>\n                    <div className=\"property-panel-header\">\n                        {this.props.title}\n                    </div>\n                    <div className=\"property-panel-content\">\n                        {this.props.children}\n                    </div>\n                </div>, mobilePropPane)\n            :\n                (<div className='property-panel-section'>\n                    <div className=\"property-panel-header\">\n                        {this.props.title}\n                    </div>\n                    <div className=\"property-panel-content\">\n                        {this.props.children}\n                    </div>\n                </div>);\n    }\n}\n","treemap-data/election-data.json":"\n{\n    \"election\" : [\n        {  \"State\": \"Alabama\", \"Trump\":62.9,\"Clinton\":34.6, \"WinPercentage\": 62.9,\"Winner\":\"Trump\", \"Population\" : 4780127 },\n        {  \"State\": \"Alaska\", \"Trump\":52.9,\"Clinton\":37.7,  \"WinPercentage\": 52.9,\"Winner\":\"Trump\", \"Population\" : 710249},\n        {  \"State\": \"Arkansas\", \"Trump\":60.6,\"Clinton\":33.7,  \"WinPercentage\":60.6,\"Winner\":\"Trump\", \"Population\" : 2915958 },\n        {  \"State\": \"Arizona\", \"Trump\":49.5,\"Clinton\":45.4,  \"WinPercentage\":49.5,\"Winner\":\"Trump\", \"Population\" : 6392307 },\n        {  \"State\": \"California\",  \"Trump\":32.8,\"Clinton\":61.6,  \"WinPercentage\": 61.6,\"Winner\":\"Clinton\", \"Population\" : 37252895},\n        {  \"State\": \"Colorado\",  \"Trump\":47.3,\"Clinton\":44.4,  \"WinPercentage\": 47.3,\"Winner\":\"Trump\", \"Population\" : 5029324 },\n        {  \"State\": \"Connecticut\",  \"Trump\":41.2,\"Clinton\":54.5,  \"WinPercentage\": 54.5,\"Winner\":\"Clinton\", \"Population\" : 3574118},\n        {  \"State\": \"Delaware\",  \"Trump\":53.4,\"Clinton\":41.9,  \"WinPercentage\": 53.4,\"Winner\":\"Trump\", \"Population\" : 897936 },\n        {  \"State\": \"District of Columbia\",   \"Trump\":4.1,\"Clinton\":92.8,  \"WinPercentage\": 92.8,\"Winner\":\"Clinton\", \"Population\" : 693972 },\n        {  \"State\": \"Florida\", \"Trump\":49.1,\"Clinton\":47.8 ,  \"WinPercentage\": 49.1,\"Winner\":\"Trump\",  \"Population\" : 18804623},\n        {  \"State\": \"Georgia\", \"Trump\":51.3,\"Clinton\":45.6 ,  \"WinPercentage\":51.3,\"Winner\":\"Trump\",  \"Population\" : 9688681},\n        {  \"State\": \"Hawaii\",  \"Trump\":62.2,\"Clinton\":30,  \"WinPercentage\":62.2,\"Winner\":\"Trump\",  \"Population\" : 1360301 },\n        {  \"State\": \"Idaho\", \"Trump\":59.2,\"Clinton\":27.6 ,  \"WinPercentage\": 59.2,\"Winner\":\"Trump\",  \"Population\" : 1567652 },\n        {  \"State\": \"Illinois\",  \"Trump\":55.4,\"Clinton\":39.4,  \"WinPercentage\": 55.4,\"Winner\":\"Trump\",  \"Population\" : 12831549  },\n        {  \"State\": \"Indiana\", \"Trump\":57.2,\"Clinton\":37.9 ,  \"WinPercentage\":57.2,\"Winner\":\"Trump\",  \"Population\" : 6484229 },\n        {  \"State\": \"Iowa\", \"Trump\":51.8,\"Clinton\":42.2,  \"WinPercentage\":51.8,\"Winner\":\"Trump\",  \"Population\" : 3046869  },\n        {  \"State\": \"Kansas\", \"Trump\":57.2,\"Clinton\":36.2,  \"WinPercentage\":57.2,\"Winner\":\"Trump\",  \"Population\" : 2853132 },\n        {  \"State\": \"Kentucky\", \"Trump\":62.5,\"Clinton\":32.7 ,  \"WinPercentage\":62.5,\"Winner\":\"Trump\",  \"Population\" : 4339349 },\n        {  \"State\": \"Louisiana\", \"Trump\":58.1,\"Clinton\":38.4 ,  \"WinPercentage\":58.1,\"Winner\":\"Trump\",  \"Population\" : 4533479 },\n        {  \"State\": \"Maine\",  \"Trump\":45.2,\"Clinton\":47.9 ,  \"WinPercentage\":47.9,\"Winner\":\"Clinton\",  \"Population\" : 1328361},\n        {  \"State\": \"Maryland\",  \"Trump\":35.3,\"Clinton\":60.5 ,  \"WinPercentage\":60.5,\"Winner\":\"Clinton\",  \"Population\" : 5773785 },\n        {  \"State\": \"Massachusetts\",  \"Trump\":33.5,\"Clinton\":60.8,  \"WinPercentage\":60.8,\"Winner\":\"Clinton\",  \"Population\" : 6547817 },\n        {  \"State\": \"Michigan\", \"Trump\":47.6,\"Clinton\":47.3 ,  \"WinPercentage\":47.6,\"Winner\":\"Trump\",  \"Population\" : 9884129 },\n        {  \"State\": \"Minnesota\",  \"Trump\":45.4,\"Clinton\":46.9,  \"WinPercentage\":46.9,\"Winner\":\"Trump\",  \"Population\" : 5303925 },\n        {  \"State\": \"Mississippi\", \"Trump\":58.3,\"Clinton\":39.7,  \"WinPercentage\":58.3,\"Winner\":\"Trump\",  \"Population\" : 2968103  },\n        {  \"State\": \"Missouri\", \"Trump\":57.1,\"Clinton\":38.0,  \"WinPercentage\":57.1,\"Winner\":\"Trump\",  \"Population\" : 5988927  },\n        {  \"State\": \"Montana\", \"Trump\":56.5,\"Clinton\":36.0,  \"WinPercentage\": 56.5,\"Winner\":\"Trump\",  \"Population\" : 989417 },\n        {  \"State\": \"Nebraska\", \"Trump\":60.3,\"Clinton\":34.0 ,  \"WinPercentage\":60.3,\"Winner\":\"Trump\",  \"Population\" : 1826341 },\n        {  \"State\": \"Nevada\",  \"Trump\":45.5,\"Clinton\":47.9,  \"WinPercentage\":47.9,\"Winner\":\"Clinton\",  \"Population\" : 2700691  },\n        {  \"State\": \"New Hampshire\",  \"Trump\":47.2,\"Clinton\":47.6 ,  \"WinPercentage\": 47.6,\"Winner\":\"Clinton\",  \"Population\" : 1316466 },\n        {  \"State\": \"New Jersey\",  \"Trump\":41.8,\"Clinton\":55.0,  \"WinPercentage\":55,\"Winner\":\"Clinton\",  \"Population\" : 8791936},\n        {  \"State\": \"New Mexico\",  \"Trump\":40.0,\"Clinton\":48.3 ,  \"WinPercentage\":48.3,\"Winner\":\"Clinton\",  \"Population\" : 2059192 },\n        {  \"State\": \"New York\",  \"Trump\":37.5,\"Clinton\":58.8 ,  \"WinPercentage\":58.8,\"Winner\":\"Clinton\",  \"Population\" : 19378087},\n        {  \"State\": \"North Carolina\", \"Trump\":50.5,\"Clinton\":46.7,  \"WinPercentage\":50.5,\"Winner\":\"Trump\",  \"Population\" : 9535692 },\n        {  \"State\": \"North Dakota\", \"Trump\":64.1,\"Clinton\":27.8,   \"WinPercentage\":64.1,\"Winner\":\"Trump\", \"Population\" : 672591 },\n        {  \"State\": \"Ohio\", \"Trump\":52.1,\"Clinton\":43.5,   \"WinPercentage\":52.5,\"Winner\":\"Trump\", \"Population\" : 11536725 },\n        {  \"State\": \"Oklahoma\", \"Trump\":65.3,\"Clinton\":28.9,  \"WinPercentage\": 65.3,\"Winner\":\"Trump\",  \"Population\" : 3751616 },\n        {  \"State\": \"Oregon\",  \"Trump\":41.1,\"Clinton\":51.7,  \"WinPercentage\":51.7,\"Winner\":\"Clinton\",  \"Population\" : 3831073  },\n        {  \"State\": \"Pennsylvania\", \"Trump\":48.8,\"Clinton\":47.6 ,  \"WinPercentage\": 48.8,\"Winner\":\"Trump\",  \"Population\" : 12702887},\n        {  \"State\": \"Rhode Island\",  \"Trump\":39.8,\"Clinton\":55.4,  \"WinPercentage\": 55.4,\"Winner\":\"Clinton\",  \"Population\" : 1052931 },\n        {  \"State\": \"South Carolina\", \"Trump\":54.9,\"Clinton\":40.8,  \"WinPercentage\":54.9,\"Winner\":\"Trump\",  \"Population\" : 4625401},\n        {  \"State\": \"South Dakota\", \"Trump\":61.5,\"Clinton\":31.7,  \"WinPercentage\": 61.5,\"Winner\":\"Trump\",  \"Population\" : 814191 },\n        {  \"State\": \"Tennessee\", \"Trump\":61.1,\"Clinton\":34.9,  \"WinPercentage\":61.1,\"Winner\":\"Trump\",  \"Population\" : 6346275},\n        {  \"State\": \"Texas\", \"Trump\":52.6,\"Clinton\":43.4,  \"WinPercentage\":52.6,\"Winner\":\"Trump\",  \"Population\" : 25146105 },\n        {  \"State\": \"Utah\", \"Trump\":45.9,\"Clinton\":27.8,  \"WinPercentage\":45.9,\"Winner\":\"Trump\",  \"Population\" : 2763888 },\n        {  \"State\": \"Vermont\",  \"Trump\":39.7,\"Clinton\":61.1,   \"WinPercentage\":61.1,\"Winner\":\"Clinton\", \"Population\" : 625745 },\n        {  \"State\": \"Virginia\",  \"Trump\":45.0,\"Clinton\":49.9 ,  \"WinPercentage\":49.9,\"Winner\":\"Clinton\",  \"Population\" : 8001045},\n        {  \"State\": \"Washington\",  \"Trump\":4.1,\"Clinton\":92.8 ,  \"WinPercentage\":92.8,\"Winner\":\"Clinton\",  \"Population\" : 6724543 },\n        {  \"State\": \"Wisconsin\", \"Trump\":68.7,\"Clinton\":26.5 ,  \"WinPercentage\":68.7,\"Winner\":\"Trump\",  \"Population\" : 5687289},\n        {  \"State\": \"West Virginia\", \"Trump\":47.9,\"Clinton\":46.9,  \"WinPercentage\":47.9,\"Winner\":\"Clinton\",  \"Population\" : 1853011 },\n        {  \"State\": \"Wyoming\", \"Trump\":70.1,\"Clinton\":22.5,  \"WinPercentage\":70.1,\"Winner\":\"Trump\",  \"Population\" : 583767 }\n    ]\n}\n","index.html":"<!DOCTYPE html>\n<html>\n<head>\n    <title>Syncfusion React Sample</title>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\n    <meta name=\"author\" content=\"Syncfusion\" />\n    <link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\n</head>\n\n<body class=\"{{theme}}\">\n     <style>\n            .control-section\n            {\n                margin-top: 100px;\n            }\n    </style>\n    <div id='sample'>\n</body>\n</html>\n","index.js":"import { createRoot } from 'react-dom/client';\nimport './index.css';\n/**\n * Legend sample for treemap\n */\nimport * as React from \"react\";\nimport { DropDownListComponent } from '@syncfusion/ej2-react-dropdowns';\nimport { TreeMapComponent, Inject, TreeMapLegend, TreeMapTooltip } from '@syncfusion/ej2-react-treemap';\nimport { PropertyPane } from './property-pane';\nimport { SampleBase } from './sample-base';\nimport * as data from './treemap-data/election-data.json';\nlet datasource = data;\nconst SAMPLE_CSS = `\n    .control-fluid {\n\t\tpadding: 0px !important;\n    }`;\nexport class Legend extends SampleBase {\n    treemapInstance;\n    legendElement;\n    legendPositionElement;\n    // Code for Property Panel\n    droplist = [\n        { text: 'Default', value: 'Default' },\n        { text: 'Interactive', value: 'Interactive' },\n    ];\n    positionList = [\n        { text: 'Top', value: 'Top' },\n        { text: 'Bottom', value: 'Bottom' },\n        { text: 'Left', value: 'Left' },\n        { text: 'Right', value: 'Right' },\n        { text: 'Auto', value: 'Auto' }\n    ];\n    legendChange() {\n        this.treemapInstance.legendSettings.mode = this.legendElement.value;\n        if (this.legendElement.value === 'Interactive') {\n            if (this.treemapInstance.legendSettings.orientation === 'Horizontal' || this.treemapInstance.legendSettings.orientation === 'None') {\n                this.treemapInstance.legendSettings.height = '10';\n                this.treemapInstance.legendSettings.width = '';\n            }\n            else {\n                this.treemapInstance.legendSettings.height = '70%';\n                this.treemapInstance.legendSettings.width = '10';\n            }\n        }\n        else {\n            this.treemapInstance.legendSettings.height = '';\n            this.treemapInstance.legendSettings.width = '';\n        }\n        this.treemapInstance.refresh();\n    }\n    legendPositionChange() {\n        this.treemapInstance.legendSettings.position = this.legendPositionElement.value;\n        if (this.legendPositionElement.value === 'Left' || this.legendPositionElement.value === 'Right') {\n            this.treemapInstance.legendSettings.orientation = 'Vertical';\n            if (this.treemapInstance.legendSettings.mode === 'Interactive') {\n                this.treemapInstance.legendSettings.height = '70%';\n                this.treemapInstance.legendSettings.width = '10';\n            }\n            else {\n                this.treemapInstance.legendSettings.height = '';\n                this.treemapInstance.legendSettings.width = '';\n            }\n        }\n        else if (this.legendPositionElement.value === 'Auto') {\n            if (this.treemapInstance.availableSize.width > this.treemapInstance.availableSize.height) {\n                this.treemapInstance.legendSettings.orientation = 'Vertical';\n                if (this.treemapInstance.legendSettings.mode === 'Interactive') {\n                    this.treemapInstance.legendSettings.height = '70%';\n                    this.treemapInstance.legendSettings.width = '10';\n                }\n                else {\n                    this.treemapInstance.legendSettings.height = '';\n                    this.treemapInstance.legendSettings.width = '';\n                }\n            }\n            else {\n                this.treemapInstance.legendSettings.orientation = 'Horizontal';\n                if (this.treemapInstance.legendSettings.mode === 'Interactive') {\n                    this.treemapInstance.legendSettings.height = '10';\n                    this.treemapInstance.legendSettings.width = '';\n                }\n                else {\n                    this.treemapInstance.legendSettings.height = '';\n                    this.treemapInstance.legendSettings.width = '';\n                }\n            }\n        }\n        else {\n            this.treemapInstance.legendSettings.orientation = 'Horizontal';\n            if (this.treemapInstance.legendSettings.mode === 'Interactive') {\n                this.treemapInstance.legendSettings.height = '10';\n                this.treemapInstance.legendSettings.width = '';\n            }\n        }\n        this.treemapInstance.refresh();\n    }\n    load(args) {\n    }\n    resize(args) {\n        if (args.currentSize.width > args.currentSize.height && this.treemapInstance.legendSettings.position === 'Auto') {\n            this.treemapInstance.legendSettings.orientation = 'Vertical';\n            if (this.treemapInstance.legendSettings.mode === 'Interactive') {\n                this.treemapInstance.legendSettings.height = '70%';\n                this.treemapInstance.legendSettings.width = '10';\n            }\n            else {\n                this.treemapInstance.legendSettings.height = '';\n                this.treemapInstance.legendSettings.width = '';\n            }\n        }\n        else if (this.legendPositionElement.value === 'Auto') {\n            if (this.treemapInstance.availableSize.width > this.treemapInstance.availableSize.height) {\n                this.treemapInstance.legendSettings.orientation = 'Vertical';\n                if (this.treemapInstance.legendSettings.mode === 'Interactive') {\n                    this.treemapInstance.legendSettings.height = '70%';\n                    this.treemapInstance.legendSettings.width = '10';\n                }\n                else {\n                    this.treemapInstance.legendSettings.height = '';\n                    this.treemapInstance.legendSettings.width = '';\n                }\n            }\n            else {\n                this.treemapInstance.legendSettings.orientation = 'Horizontal';\n                if (this.treemapInstance.legendSettings.mode === 'Interactive') {\n                    this.treemapInstance.legendSettings.height = '10';\n                    this.treemapInstance.legendSettings.width = '';\n                }\n                else {\n                    this.treemapInstance.legendSettings.height = '';\n                    this.treemapInstance.legendSettings.width = '';\n                }\n            }\n        }\n    }\n    render() {\n        return (<main><div className='control-pane'>\n\t\t\t\t<style>\n\t\t\t\t\t{SAMPLE_CSS}\n\t\t\t\t</style>\n\t\t\t\t<div className='control-section'>\n\t\t\t\t\t<div className='col-md-9'>\n\t\t\t\t\t\t<TreeMapComponent load={this.load.bind(this)} id='treemap-container' ref={m => this.treemapInstance = m} titleSettings={{\n                text: 'US presidential election result - 2016',\n                textStyle: { size: '15px' }\n            }} dataSource={datasource.election} weightValuePath='Population' tooltipSettings={{\n                visible: true,\n                format: ' <b>${Winner}</b><br>State : ${State}<br>Trump : ${Trump} %<br>Clinton : ${Clinton} %'\n            }} legendSettings={{\n                visible: true,\n                position: 'Top',\n                shape: 'Rectangle',\n                height: '10'\n            }} format={\"n\"} useGroupingSeparator={true} rangeColorValuePath='WinPercentage' equalColorValuePath='Winner' leafItemSettings={{\n                labelPath: 'State',\n                fill: '#6699cc',\n                border: { color: 'white', width: 0.5 },\n                colorMapping: [\n                    {\n                        value: 'Trump', color: '#D84444'\n                    },\n                    {\n                        value: 'Clinton', color: '#316DB5'\n                    }\n                ]\n            }}>\n\t\t\t\t\t\t\t<Inject services={[TreeMapLegend, TreeMapTooltip]}/>\n\t\t\t\t\t\t</TreeMapComponent>\n\t\t\t\t\t\t<div style={{ float: 'right', marginRight: '10px' }}>Source:\n       <a href=\" https://en.wikipedia.org/wiki/United_States_presidential_election,_2016\" target=\"_blank\">en.wikipedia.org</a>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t{/* Property Panel */}\n\t\t\t\t\t<div className='col-md-3 property-section'>\n\t\t\t\t\t\t<PropertyPane title='Properties'>\n\t\t\t\t\t\t\t<table role='none' id='property' title='Properties' className='property-panel-table' style={{ width: '100%', marginBottom: '20px' }}>\n\t\t\t\t\t\t\t  <tbody>\n\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t<td style={{ paddingTop: '15px', width: '30%' }}>\n\t\t\t\t\t\t\t\t\t\t<div style={{ paddingLeft: '0px' }}>Type</div>\n\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t<td style={{ paddingTop: '15px' }}>\n\t\t\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t\t\t<DropDownListComponent id=\"legendmode\" width=\"100%\" index={0} change={this.legendChange.bind(this)} ref={d => this.legendElement = d} dataSource={this.droplist} fields={{ text: 'text', value: 'value' }}/>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t<td style={{ width: '30%' }}>\n\t\t\t\t\t\t\t\t\t\t<div style={{ paddingLeft: '0px' }}>Position</div>\n\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t\t\t<DropDownListComponent id=\"legendPosition\" width=\"100%\" index={0} change={this.legendPositionChange.bind(this)} ref={d => this.legendPositionElement = d} dataSource={this.positionList} fields={{ text: 'text', value: 'value' }}/>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t  </tbody>\n\t\t\t\t\t\t\t</table>\n\t\t\t\t\t\t</PropertyPane>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t\t<section id=\"action-description\" aria-label=\"Description of TreeMap sample\">\n\t\t\t\t\t<p>\n\t\t\t\t\tThis sample visualizes the 2016 United States presidential election results. The type and position of the legends can be changed using the Type and Position options in the properties panel.\n            \t\t</p>\n\t\t\t\t</section>\n\t\t\t\t<section id=\"description\" aria-label=\"Description of the TreeMap features demonstrated in this sample\">\n\t\t\t\t\t<p>\n\t\t\t\t\t\tIn this example, you can see the type of legend available in TreeMap. The equal color mapping is applied based on certain value.\n\t\t\t\t\t\t<br /><br />\n\t\t\t\t\t\tThe tooltip is enabled in this example. To see the tooltip in action, hover the mouse over an item or tap an item in touch enabled devices.\n\t\t\t\t\t</p>\n\t\t\t\t\t<br />\n\t\t\t\t\t<p className='description-header'>Injecting Module</p>\n\t\t\t\t\t<p>\n\t\t\t\t\t\tThe TreeMap component features are segregated into individual  modules by feature. To use a legend, inject the <code>Legend</code> module using the <code>TreeMap.Inject(TreeMapLegend)</code> method.\n                    </p>\n\t\t\t\t</section>\n\t\t\t</main>);\n    }\n}\n\nconst root = createRoot(document.getElementById('sample'));\nroot.render(<Legend />);","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n                this.rendereComplete();\n            });\n        }\n    }\n    export function updateSampleSection(){}\n    ","dependencies":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-react-base\":\"*\",\"@syncfusion/ej2-dropdowns\":\"*\",\"@syncfusion/ej2-react-dropdowns\":\"*\",\"@syncfusion/ej2-treemap\":\"*\",\"@syncfusion/ej2-react-treemap\":\"*\",\"@syncfusion/ej2-calendars\":\"*\",\"@syncfusion/ej2-data\":\"*\",\"@syncfusion/ej2-excel-export\":\"*\",\"@syncfusion/ej2-navigations\":\"*\",\"@syncfusion/ej2-pdf-export\":\"*\",\"@syncfusion/ej2-svg-base\":\"*\",\"markdown-spellcheck\":\"^1.3.1\",\"@syncfusion/ej2-charts\":\"*\",\"@syncfusion/ej2-react-charts\":\"*\",\"@syncfusion/ej2/base\":\"*\",\"@syncfusion/ej2-charts'; // Import the necessary types from Syncfusion\":\"*\",\"@syncfusion/ej2-lists\":\"*\",\"@syncfusion/ej2-documenteditor\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-splitbuttons\":\"*\",\"@syncfusion/ej2-react-popups\":\"*\",\"@syncfusion/ej2-pivotview\":\"*\",\"@syncfusion/ej2-react-progressbar\":\"*\",\"@syncfusion/ej2-schedule\":\"*\"}"}