{"index.css":" .control-section .content-wrapper.sample-mask {\n        width: 30%;\n        margin: 0 auto;\n        min-width: 185px;\n        max-width: 350px;\n    }\n    \n  .sample-mask .control-label {\n        padding: 24px 0px 10px 0px;\n        font-size: 12px;\n        opacity: 1;\n    }\n    #input-mask .property-panel-content{\n        overflow: auto;\n    }\n    \n    .control-section .col-lg-8 .content-wrapper.sample-mask {\n        width: 45%;\n    }\n    \n    .mask-wrap:first-child {\n        margin-top: 50px;\n    }\n    \n    .mask-wrap {\n        margin-top: 35px;\n    }","property-pane.js":"import * as ReactDOM from 'react-dom';\nimport * as React from 'react';\nimport { select } from '@syncfusion/ej2-base';\nexport class PropertyPane extends React.Component {\n    render() {\n        const mobilePropPane = select('.sb-mobile-prop-pane');\n        const isMobile = window.matchMedia('(max-width:550px)').matches;\n        return isMobile && mobilePropPane ?\n            ReactDOM.createPortal(<div className='property-panel-section'>\n                    <div className=\"property-panel-header\">\n                        {this.props.title}\n                    </div>\n                    <div className=\"property-panel-content\">\n                        {this.props.children}\n                    </div>\n                </div>, mobilePropPane)\n            :\n                (<div className='property-panel-section'>\n                    <div className=\"property-panel-header\">\n                        {this.props.title}\n                    </div>\n                    <div className=\"property-panel-content\">\n                        {this.props.children}\n                    </div>\n                </div>);\n    }\n}\n","index.html":"<!DOCTYPE html>\n<html>\n<head>\n    <title>Syncfusion React Sample</title>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\n    <meta name=\"author\" content=\"Syncfusion\" />\n    <link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\n</head>\n\n<body class=\"{{theme}}\">\n     <style>\n            .control-section\n            {\n                margin-top: 100px;\n            }\n    </style>\n    <div id='sample'>\n</body>\n</html>\n","index.js":"import { createRoot } from 'react-dom/client';\nimport './index.css';\nimport * as React from 'react';\nimport { MaskedTextBoxComponent } from '@syncfusion/ej2-react-inputs';\nimport { SampleBase } from './sample-base';\nimport { PropertyPane } from './property-pane';\nimport { DropDownListComponent } from '@syncfusion/ej2-react-dropdowns';\n\nexport class Formats extends SampleBase {\n    listObj;\n    // Prompt character options\n    promptData = [\n        { prompt: '_' },\n        { prompt: '#' },\n        { prompt: '@' },\n        { prompt: '*' },\n    ];\n    ddlFields = { text: 'prompt', value: 'prompt' };\n    // Bind event on Dropdown List change\n    onDdlChange(args) {\n        // 'promptChar' on the Masked Textbox has been updated\n        this.maskInstance.setProperties({ promptChar: this.listObj.value });\n        // Masked and un-masked values will be updated\n        document.getElementById('val1').innerHTML = this.maskInstance.value;\n        document.getElementById('val2').innerHTML = this.maskInstance.getMaskedValue();\n    }\n    render() {\n        return (<div className='control-pane'>\n        <div className='control-section'>\n          <div className=' col-lg-8'>\n            <div className=\"content-wrapper sample-mask\">\n              <div className=\"control-label\">Formats</div>\n              <MaskedTextBoxComponent mask='(999)-999-9999' floatLabelType='Never' created={this.onCreated.bind(this)} change={this.maskChange} ref={mask => this.maskInstance = mask}></MaskedTextBoxComponent>\n            </div>\n          </div>\n          <div className='col-lg-4 property-section' id=\"input-mask\">\n            <PropertyPane title='Properties'>\n              <table id=\"property\" title=\"Properties\" className='property-panel-table' style={{ width: '100%' }}>\n                <tbody>\n                  <tr>\n                    <td style={{ width: '50%' }}>\n                      <div>Mask</div>\n                    </td>\n                    <td style={{ width: '50%', paddingRight: '0px' }}>\n                      <div style={{ maxWidth: '200px' }}>\n                        <input id=\"input1\" type=\"text\" className='e-input' onKeyUp={this.sampleKeyUp.bind(this)}/>\n                      </div>\n                    </td>\n                  </tr>\n                  <tr>\n                    <td style={{ width: '50%' }}>\n                      <div>Prompt Character</div>\n                    </td>\n                    <td style={{ width: '50%', paddingRight: '0px' }}>\n                      <div style={{ maxWidth: '200px' }}>\n                        <DropDownListComponent id=\"ddlelement\" dataSource={this.promptData} ref={(dropdownlist) => { this.listObj = dropdownlist; }} fields={this.ddlFields} value='_' change={this.onDdlChange.bind(this)} popupHeight=\"220px\"/>\n                      </div>\n                    </td>\n                  </tr>\n                  <tr>\n                    <td style={{ width: '50%' }}>\n                      <div>Value</div>\n                    </td>\n                    <td style={{ width: '50%', paddingRight: '0px' }}>\n                      <div id=\"val1\"></div>\n                    </td>\n                  </tr>\n                  <tr>\n                    <td style={{ width: '50%', paddingTop: '5px', paddingBottom: '10px' }}>\n                      <div>Masked Value</div>\n                    </td>\n                    <td style={{ width: '50%', paddingRight: '0px', paddingTop: '5px', paddingBottom: '10px' }}>\n                      <div id=\"val2\"></div>\n                    </td>\n                  </tr>\n                </tbody>\n              </table>\n            </PropertyPane>\n          </div>\n        </div>\n      </div>);\n    }\n    maskInstance;\n    curValue;\n    onCreated() {\n        document.getElementById('input1').value = this.maskInstance.mask;\n        document.getElementById('val2').innerHTML = this.maskInstance.getMaskedValue();\n    }\n    maskChange(args) {\n        document.getElementById('val1').innerHTML = args.value;\n        document.getElementById('val2').innerHTML = args.maskedValue;\n    }\n    sampleKeyUp() {\n        let ele1 = document.getElementById('input1');\n        let start = ele1.selectionStart;\n        let end = ele1.selectionEnd;\n        this.maskInstance.setProperties({ mask: document.getElementById('input1').value });\n        document.getElementById('val1').innerHTML = this.maskInstance.value;\n        document.getElementById('val2').innerHTML = this.maskInstance.getMaskedValue();\n        ele1.setSelectionRange(start, end);\n    }\n}\n\nconst root = createRoot(document.getElementById('sample'));\nroot.render(<Formats />);","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n                this.rendereComplete();\n            });\n        }\n    }\n    export function updateSampleSection(){}\n    ","dependencies":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-react-base\":\"*\",\"@syncfusion/ej2-inputs\":\"*\",\"@syncfusion/ej2-react-inputs\":\"*\",\"@syncfusion/ej2-dropdowns\":\"*\",\"@syncfusion/ej2-react-dropdowns\":\"*\",\"@syncfusion/ej2-react-charts\":\"*\",\"@syncfusion/ej2/base\":\"*\",\"@syncfusion/ej2-charts'; // Import the necessary types from Syncfusion\":\"*\",\"@syncfusion/ej2-lists\":\"*\",\"@syncfusion/ej2-documenteditor\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-splitbuttons\":\"*\",\"@syncfusion/ej2-navigations\":\"*\",\"@syncfusion/ej2-react-popups\":\"*\"}"}