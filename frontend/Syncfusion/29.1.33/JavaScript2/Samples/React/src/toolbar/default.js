"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Default = void 0;
var React = require("react");
var ej2_react_navigations_1 = require("@syncfusion/ej2-react-navigations");
var sample_base_1 = require("../common/sample-base");
require("./toolbar.component.css");
var Default = /** @class */ (function (_super) {
    __extends(Default, _super);
    function Default() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Default.prototype.render = function () {
        return (React.createElement("div", { className: 'control-pane' },
            React.createElement("div", { className: 'control-section tbar-control-section', style: { paddingBottom: '100px' } },
                React.createElement("div", { className: 'control toolbar-sample tbar-sample', style: { width: '80%', maxWidth: "none" } },
                    React.createElement("h1", { style: { display: 'inline-block' } }, "Simple Toolbar"),
                    React.createElement(ej2_react_navigations_1.ToolbarComponent, null,
                        React.createElement(ej2_react_navigations_1.ItemsDirective, null,
                            React.createElement(ej2_react_navigations_1.ItemDirective, { prefixIcon: 'e-icons e-cut', tooltipText: 'Cut' }),
                            React.createElement(ej2_react_navigations_1.ItemDirective, { prefixIcon: 'e-icons e-copy', tooltipText: 'Copy' }),
                            React.createElement(ej2_react_navigations_1.ItemDirective, { prefixIcon: 'e-icons e-paste', tooltipText: 'Paste' }),
                            React.createElement(ej2_react_navigations_1.ItemDirective, { type: 'Separator' }),
                            React.createElement(ej2_react_navigations_1.ItemDirective, { prefixIcon: 'e-icons e-bold', tooltipText: 'Bold' }),
                            React.createElement(ej2_react_navigations_1.ItemDirective, { prefixIcon: 'e-icons e-underline', tooltipText: 'Underline' }),
                            React.createElement(ej2_react_navigations_1.ItemDirective, { prefixIcon: 'e-icons e-italic', tooltipText: 'Italic' }),
                            React.createElement(ej2_react_navigations_1.ItemDirective, { prefixIcon: 'e-icons e-paint-bucket', tooltipText: 'Color-Picker' }),
                            React.createElement(ej2_react_navigations_1.ItemDirective, { type: 'Separator' }),
                            React.createElement(ej2_react_navigations_1.ItemDirective, { prefixIcon: 'e-icons e-align-left', tooltipText: 'Align_Left' }),
                            React.createElement(ej2_react_navigations_1.ItemDirective, { prefixIcon: 'e-icons e-align-right', tooltipText: 'Align_Right' }),
                            React.createElement(ej2_react_navigations_1.ItemDirective, { prefixIcon: 'e-icons e-align-center', tooltipText: 'Align_Center' }),
                            React.createElement(ej2_react_navigations_1.ItemDirective, { prefixIcon: 'e-icons e-justify', tooltipText: 'Align_Justify' }))),
                    React.createElement("br", null),
                    React.createElement("br", null),
                    React.createElement("h1", { style: { display: 'inline-block' } }, "Scrollable Toolbar"),
                    React.createElement(ej2_react_navigations_1.ToolbarComponent, { overflowMode: 'Scrollable', id: "toolbar_scrollable" },
                        React.createElement(ej2_react_navigations_1.ItemsDirective, null,
                            React.createElement(ej2_react_navigations_1.ItemDirective, { prefixIcon: 'e-icons e-cut', tooltipText: 'Cut', text: 'Cut' }),
                            React.createElement(ej2_react_navigations_1.ItemDirective, { prefixIcon: 'e-icons e-copy', tooltipText: 'Copy', text: 'Copy' }),
                            React.createElement(ej2_react_navigations_1.ItemDirective, { prefixIcon: 'e-icons e-paste', tooltipText: 'Paste', text: 'Paste' }),
                            React.createElement(ej2_react_navigations_1.ItemDirective, { type: 'Separator' }),
                            React.createElement(ej2_react_navigations_1.ItemDirective, { prefixIcon: 'e-icons e-bold', tooltipText: 'Bold', text: 'Bold' }),
                            React.createElement(ej2_react_navigations_1.ItemDirective, { prefixIcon: 'e-icons e-underline', tooltipText: 'Underline', text: 'Underline' }),
                            React.createElement(ej2_react_navigations_1.ItemDirective, { prefixIcon: 'e-icons e-italic', tooltipText: 'Italic', text: 'Italic' }),
                            React.createElement(ej2_react_navigations_1.ItemDirective, { type: 'Separator' }),
                            React.createElement(ej2_react_navigations_1.ItemDirective, { prefixIcon: 'e-icons e-align-left', tooltipText: 'Align_Left', text: 'Align_Left' }),
                            React.createElement(ej2_react_navigations_1.ItemDirective, { prefixIcon: 'e-icons e-align-right', tooltipText: 'Align_Right', text: 'Align_Right' }),
                            React.createElement(ej2_react_navigations_1.ItemDirective, { prefixIcon: 'e-icons e-align-center', tooltipText: 'Align_Center', text: 'Align_Center' }),
                            React.createElement(ej2_react_navigations_1.ItemDirective, { prefixIcon: 'e-icons e-justify', tooltipText: 'Align_Justify', text: 'Align_Justify' }),
                            React.createElement(ej2_react_navigations_1.ItemDirective, { type: 'Separator' }),
                            React.createElement(ej2_react_navigations_1.ItemDirective, { prefixIcon: 'e-icons e-list-unordered', tooltipText: 'Bullets', text: 'Bullets' }),
                            React.createElement(ej2_react_navigations_1.ItemDirective, { prefixIcon: 'e-icons e-list-ordered', tooltipText: 'Numbering', text: 'Numbering' }),
                            React.createElement(ej2_react_navigations_1.ItemDirective, { type: 'Separator' }),
                            React.createElement(ej2_react_navigations_1.ItemDirective, { prefixIcon: 'e-icons e-undo', tooltipText: 'Undo', text: 'Undo' }),
                            React.createElement(ej2_react_navigations_1.ItemDirective, { prefixIcon: 'e-icons e-redo', tooltipText: 'Redo', text: 'Redo' }),
                            React.createElement(ej2_react_navigations_1.ItemDirective, { type: 'Separator' }),
                            React.createElement(ej2_react_navigations_1.ItemDirective, { prefixIcon: 'e-icons e-increase-indent', tooltipText: 'Text Indent', text: 'Text Indent' }),
                            React.createElement(ej2_react_navigations_1.ItemDirective, { prefixIcon: 'e-icons e-decrease-indent', tooltipText: 'Text Outdent', text: 'Text Outdent' }),
                            React.createElement(ej2_react_navigations_1.ItemDirective, { type: 'Separator' }),
                            React.createElement(ej2_react_navigations_1.ItemDirective, { prefixIcon: 'e-icons e-erase', tooltipText: 'Clear', text: 'Clear' }))),
                    React.createElement("br", null),
                    React.createElement("br", null),
                    React.createElement("h1", { style: { display: 'inline-block' } }, "Popup Toolbar"),
                    React.createElement(ej2_react_navigations_1.ToolbarComponent, { overflowMode: 'Popup', id: "toolbar_popup" },
                        React.createElement(ej2_react_navigations_1.ItemsDirective, null,
                            React.createElement(ej2_react_navigations_1.ItemDirective, { prefixIcon: 'e-icons e-cut', tooltipText: 'Cut', text: 'Cut' }),
                            React.createElement(ej2_react_navigations_1.ItemDirective, { prefixIcon: 'e-icons e-copy', tooltipText: 'Copy', text: 'Copy' }),
                            React.createElement(ej2_react_navigations_1.ItemDirective, { prefixIcon: 'e-icons e-paste', tooltipText: 'Paste', text: 'Paste' }),
                            React.createElement(ej2_react_navigations_1.ItemDirective, { type: 'Separator' }),
                            React.createElement(ej2_react_navigations_1.ItemDirective, { prefixIcon: 'e-icons e-bold', tooltipText: 'Bold', text: 'Bold' }),
                            React.createElement(ej2_react_navigations_1.ItemDirective, { prefixIcon: 'e-icons e-underline', tooltipText: 'Underline', text: 'Underline' }),
                            React.createElement(ej2_react_navigations_1.ItemDirective, { prefixIcon: 'e-icons e-italic', tooltipText: 'Italic', text: 'Italic' }),
                            React.createElement(ej2_react_navigations_1.ItemDirective, { type: 'Separator' }),
                            React.createElement(ej2_react_navigations_1.ItemDirective, { prefixIcon: 'e-icons e-align-left', tooltipText: 'Align_Left', text: 'Align_Left' }),
                            React.createElement(ej2_react_navigations_1.ItemDirective, { prefixIcon: 'e-icons e-align-right', tooltipText: 'Align_Right', text: 'Align_Right' }),
                            React.createElement(ej2_react_navigations_1.ItemDirective, { prefixIcon: 'e-icons e-align-center', tooltipText: 'Align_Center', text: 'Align_Center' }),
                            React.createElement(ej2_react_navigations_1.ItemDirective, { prefixIcon: 'e-icons e-justify', tooltipText: 'Align_Justify', text: 'Align_Justify' }),
                            React.createElement(ej2_react_navigations_1.ItemDirective, { type: 'Separator' }),
                            React.createElement(ej2_react_navigations_1.ItemDirective, { prefixIcon: 'e-icons e-list-unordered', tooltipText: 'Bullets', text: 'Bullets' }),
                            React.createElement(ej2_react_navigations_1.ItemDirective, { prefixIcon: 'e-icons e-list-ordered', tooltipText: 'Numbering', text: 'Numbering' }),
                            React.createElement(ej2_react_navigations_1.ItemDirective, { type: 'Separator' }),
                            React.createElement(ej2_react_navigations_1.ItemDirective, { prefixIcon: 'e-icons e-undo', tooltipText: 'Undo', text: 'Undo' }),
                            React.createElement(ej2_react_navigations_1.ItemDirective, { prefixIcon: 'e-icons e-redo', tooltipText: 'Redo', text: 'Redo' }),
                            React.createElement(ej2_react_navigations_1.ItemDirective, { type: 'Separator' }),
                            React.createElement(ej2_react_navigations_1.ItemDirective, { prefixIcon: 'e-icons e-increase-indent', tooltipText: 'Text Indent', text: 'Text Indent' }),
                            React.createElement(ej2_react_navigations_1.ItemDirective, { prefixIcon: 'e-icons e-decrease-indent', tooltipText: 'Text Outdent', text: 'Text Outdent' }),
                            React.createElement(ej2_react_navigations_1.ItemDirective, { type: 'Separator' }),
                            React.createElement(ej2_react_navigations_1.ItemDirective, { prefixIcon: 'e-icons e-erase', tooltipText: 'Clear', text: 'Clear' }))),
                    React.createElement("br", null),
                    React.createElement("br", null),
                    React.createElement("h1", { style: { display: 'inline-block' } }, "MultiRow Toolbar"),
                    React.createElement(ej2_react_navigations_1.ToolbarComponent, { overflowMode: 'MultiRow', id: "toolbar_multirow" },
                        React.createElement(ej2_react_navigations_1.ItemsDirective, null,
                            React.createElement(ej2_react_navigations_1.ItemDirective, { prefixIcon: 'e-icons e-cut', tooltipText: 'Cut', text: 'Cut' }),
                            React.createElement(ej2_react_navigations_1.ItemDirective, { prefixIcon: 'e-icons e-copy', tooltipText: 'Copy', text: 'Copy' }),
                            React.createElement(ej2_react_navigations_1.ItemDirective, { prefixIcon: 'e-icons e-paste', tooltipText: 'Paste', text: 'Paste' }),
                            React.createElement(ej2_react_navigations_1.ItemDirective, { type: 'Separator' }),
                            React.createElement(ej2_react_navigations_1.ItemDirective, { prefixIcon: 'e-icons e-bold', tooltipText: 'Bold', text: 'Bold' }),
                            React.createElement(ej2_react_navigations_1.ItemDirective, { prefixIcon: 'e-icons e-underline', tooltipText: 'Underline', text: 'Underline' }),
                            React.createElement(ej2_react_navigations_1.ItemDirective, { prefixIcon: 'e-icons e-italic', tooltipText: 'Italic', text: 'Italic' }),
                            React.createElement(ej2_react_navigations_1.ItemDirective, { type: 'Separator' }),
                            React.createElement(ej2_react_navigations_1.ItemDirective, { prefixIcon: 'e-icons e-align-left', tooltipText: 'Align_Left', text: 'Align_Left' }),
                            React.createElement(ej2_react_navigations_1.ItemDirective, { prefixIcon: 'e-icons e-align-right', tooltipText: 'Align_Right', text: 'Align_Right' }),
                            React.createElement(ej2_react_navigations_1.ItemDirective, { prefixIcon: 'e-icons e-align-center', tooltipText: 'Align_Center', text: 'Align_Center' }),
                            React.createElement(ej2_react_navigations_1.ItemDirective, { prefixIcon: 'e-icons e-justify', tooltipText: 'Align_Justify', text: 'Align_Justify' }),
                            React.createElement(ej2_react_navigations_1.ItemDirective, { type: 'Separator' }),
                            React.createElement(ej2_react_navigations_1.ItemDirective, { prefixIcon: 'e-icons e-list-unordered', tooltipText: 'Bullets', text: 'Bullets' }),
                            React.createElement(ej2_react_navigations_1.ItemDirective, { prefixIcon: 'e-icons e-list-ordered', tooltipText: 'Numbering', text: 'Numbering' }),
                            React.createElement(ej2_react_navigations_1.ItemDirective, { type: 'Separator' }),
                            React.createElement(ej2_react_navigations_1.ItemDirective, { prefixIcon: 'e-icons e-undo', tooltipText: 'Undo', text: 'Undo' }),
                            React.createElement(ej2_react_navigations_1.ItemDirective, { prefixIcon: 'e-icons e-redo', tooltipText: 'Redo', text: 'Redo' }),
                            React.createElement(ej2_react_navigations_1.ItemDirective, { type: 'Separator' }),
                            React.createElement(ej2_react_navigations_1.ItemDirective, { prefixIcon: 'e-icons e-increase-indent', tooltipText: 'Text Indent', text: 'Text Indent' }),
                            React.createElement(ej2_react_navigations_1.ItemDirective, { prefixIcon: 'e-icons e-decrease-indent', tooltipText: 'Text Outdent', text: 'Text Outdent' }),
                            React.createElement(ej2_react_navigations_1.ItemDirective, { type: 'Separator' }),
                            React.createElement(ej2_react_navigations_1.ItemDirective, { prefixIcon: 'e-icons e-erase', tooltipText: 'Clear', text: 'Clear' }))),
                    React.createElement("br", null),
                    React.createElement("br", null),
                    React.createElement("h1", { style: { display: 'inline-block' } }, "Extended Toolbar"),
                    React.createElement(ej2_react_navigations_1.ToolbarComponent, { overflowMode: 'Extended', id: "toolbar_extended" },
                        React.createElement(ej2_react_navigations_1.ItemsDirective, null,
                            React.createElement(ej2_react_navigations_1.ItemDirective, { prefixIcon: 'e-icons e-cut', tooltipText: 'Cut', text: 'Cut' }),
                            React.createElement(ej2_react_navigations_1.ItemDirective, { prefixIcon: 'e-icons e-copy', tooltipText: 'Copy', text: 'Copy' }),
                            React.createElement(ej2_react_navigations_1.ItemDirective, { prefixIcon: 'e-icons e-paste', tooltipText: 'Paste', text: 'Paste' }),
                            React.createElement(ej2_react_navigations_1.ItemDirective, { type: 'Separator' }),
                            React.createElement(ej2_react_navigations_1.ItemDirective, { prefixIcon: 'e-icons e-bold', tooltipText: 'Bold', text: 'Bold' }),
                            React.createElement(ej2_react_navigations_1.ItemDirective, { prefixIcon: 'e-icons e-underline', tooltipText: 'Underline', text: 'Underline' }),
                            React.createElement(ej2_react_navigations_1.ItemDirective, { prefixIcon: 'e-icons e-italic', tooltipText: 'Italic', text: 'Italic' }),
                            React.createElement(ej2_react_navigations_1.ItemDirective, { type: 'Separator' }),
                            React.createElement(ej2_react_navigations_1.ItemDirective, { prefixIcon: 'e-icons e-align-left', tooltipText: 'Align_Left', text: 'Align_Left' }),
                            React.createElement(ej2_react_navigations_1.ItemDirective, { prefixIcon: 'e-icons e-align-right', tooltipText: 'Align_Right', text: 'Align_Right' }),
                            React.createElement(ej2_react_navigations_1.ItemDirective, { prefixIcon: 'e-icons e-align-center', tooltipText: 'Align_Center', text: 'Align_Center' }),
                            React.createElement(ej2_react_navigations_1.ItemDirective, { prefixIcon: 'e-icons e-justify', tooltipText: 'Align_Justify', text: 'Align_Justify' }),
                            React.createElement(ej2_react_navigations_1.ItemDirective, { type: 'Separator' }),
                            React.createElement(ej2_react_navigations_1.ItemDirective, { prefixIcon: 'e-icons e-list-unordered', tooltipText: 'Bullets', text: 'Bullets' }),
                            React.createElement(ej2_react_navigations_1.ItemDirective, { prefixIcon: 'e-icons e-list-ordered', tooltipText: 'Numbering', text: 'Numbering' }),
                            React.createElement(ej2_react_navigations_1.ItemDirective, { type: 'Separator' }),
                            React.createElement(ej2_react_navigations_1.ItemDirective, { prefixIcon: 'e-icons e-undo', tooltipText: 'Undo', text: 'Undo' }),
                            React.createElement(ej2_react_navigations_1.ItemDirective, { prefixIcon: 'e-icons e-redo', tooltipText: 'Redo', text: 'Redo' }),
                            React.createElement(ej2_react_navigations_1.ItemDirective, { type: 'Separator' }),
                            React.createElement(ej2_react_navigations_1.ItemDirective, { prefixIcon: 'e-icons e-increase-indent', tooltipText: 'Text Indent', text: 'Text Indent' }),
                            React.createElement(ej2_react_navigations_1.ItemDirective, { prefixIcon: 'e-icons e-decrease-indent', tooltipText: 'Text Outdent', text: 'Text Outdent' }),
                            React.createElement(ej2_react_navigations_1.ItemDirective, { type: 'Separator' }),
                            React.createElement(ej2_react_navigations_1.ItemDirective, { prefixIcon: 'e-icons e-erase', tooltipText: 'Clear', text: 'Clear' }))))),
            React.createElement("div", { id: "action-description" },
                React.createElement("p", null,
                    "This sample demonstrates the default functionalities of the ",
                    React.createElement("code", null, "Toolbar"),
                    ". Select any command or click the left/right navigation icon or touch swipe to see the hidden commands of the Toolbar")),
            React.createElement("div", { id: "description" },
                React.createElement("p", null,
                    React.createElement("strong", null, "Toolbar"),
                    " is a graphical control on which commands / buttons will be displayed in horizontal order. By default scrolling display mode enabled when content exceeds the available viewing area."),
                React.createElement("p", null, "You can use left / right navigation icon or touch swipe to see the hidden commands of the toolbar."),
                React.createElement("p", null,
                    "Initially toolbar rendered with the ",
                    React.createElement("code", null, " left and right navigation"),
                    " icon and you can see hidden commands by ",
                    React.createElement("code", null, "moving in right or left"),
                    " direction."),
                React.createElement("p", null,
                    "When you reach ",
                    React.createElement("code", null, "right / left end of toolbar"),
                    ", corresponding  navigation direction will be disabled."),
                React.createElement("p", null,
                    "In this demo, available responsive mode of React Toolbar has been showcased. The modes can be set through ",
                    React.createElement("code", null, "overflowMode"),
                    " property and the possible modes are ",
                    React.createElement("code", null, "Scrollable"),
                    ", ",
                    React.createElement("code", null, "Popup"),
                    "Popup, ",
                    React.createElement("code", null, "Extended"),
                    " and ",
                    React.createElement("code", null, "MultiRow"),
                    "."),
                React.createElement("ul", null,
                    React.createElement("li", null,
                        React.createElement("code", null, "Scrollable"),
                        " - The scrollable mode is the default mode. When you have excess toolbar items, it can be viewed by scrolling through left and right arrows.You can continuously scroll the toolbar content by holding on the navigation icon. In ",
                        React.createElement("code", null, "devices"),
                        " navigation icons are not available. you can touch swipe to see the hidden commands of the toolbar."),
                    React.createElement("li", null,
                        React.createElement("code", null, "Popup"),
                        " - The overflowing toolbar items which do not fit in viewing area moves to the popup container."),
                    React.createElement("li", null,
                        React.createElement("code", null, "Extended"),
                        " - The overflowing toolbar items which do not fit in the available space can be viewed in the next row of the toolbar on clicking the expand icon."),
                    React.createElement("li", null,
                        React.createElement("code", null, "MultiRow"),
                        " - The overflowing toolbar items which do not fit in viewing area will be displayed as an in-line of the toolbar.")))));
    };
    return Default;
}(sample_base_1.SampleBase));
exports.Default = Default;
