{"index.css":"/* css */","index.html":"<!DOCTYPE html>\n<html>\n<head>\n    <title>Syncfusion React Sample</title>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\n    <meta name=\"author\" content=\"Syncfusion\" />\n    <link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\n</head>\n\n<body class=\"{{theme}}\">\n     <style>\n            .control-section\n            {\n                margin-top: 100px;\n            }\n    </style>\n    <div id='sample'>\n</body>\n</html>\n","index.js":"import { createRoot } from 'react-dom/client';\nimport './index.css';\nimport * as React from \"react\";\nimport { DropDownListComponent } from \"@syncfusion/ej2-react-dropdowns\";\nimport { TextBoxComponent, FormValidator } from '@syncfusion/ej2-react-inputs';\nimport { BarcodeGeneratorComponent } from \"@syncfusion/ej2-react-barcode-generator\";\nimport { SampleBase } from './sample-base';\nimport { NumericTextBoxComponent, ColorPickerComponent } from \"@syncfusion/ej2-react-inputs\";\nimport { CheckBoxComponent, ButtonComponent } from \"@syncfusion/ej2-react-buttons\";\nlet canShowError = false;\nlet customFn = (args) => {\n    if (canShowError) {\n        return false;\n    }\n    return true;\n};\nlet options = {\n    rules: {\n        'textbox_0': { minLength: [customFn, 'Invalid input'] },\n    }\n};\nexport class UpcA extends SampleBase {\n    formObject;\n    rendereComplete() {\n        let div = document.getElementsByClassName('sb-property-border')[0];\n        this.formObject = new FormValidator('#form1', options);\n        if (div)\n            div.style.left = '63%';\n    }\n    render() {\n        return (<div className=\"control-pane\">\n        <style>{sample_css}</style>\n        <div className=\"col-lg-8 control-section\" style={{ width: \"64%\" }}>\n        <div className=\"content-wrapper\" style={{ width: \"100%\", height: \"590px\" }}>\n            <div className='center'>\n              <div className='centercontrol'>\n                <BarcodeGeneratorComponent id=\"barcode\" ref={barcode => (barcodeInstance = barcode)} width={\"200px\"} invalid={(arg) => {\n                canShowError = true;\n                this.formObject.validate();\n            }} height={\"150px\"} mode='SVG' type='UpcA' value='72527273070'></BarcodeGeneratorComponent>\n              </div>\n            </div>\n            <div className='allowedText'>\n              <span style={{ fontWeight: 600 }}> Allowed Input characters :</span> This barocode supports 11 numbers as input.\n        </div>\n          </div>\n        </div>\n        <div className=\"col-lg-4 property-section\" style={{ paddingRight: \"0px\", minWidth: \"36%\" }}>\n          <div className=\"property-panel-header\">Appearance</div>\n          <div id=\"propertypanel\">\n            <div className=\"property-section-content\">\n              <div className=\"row sb-child-row\">\n                <div className=\"col-xs-2 top left\">\n                  Value\n                </div>\n                <div className=\"col-xs-10 left\">\n                  <form id=\"form1\" method=\"post\">\n                    <div id='barcodevaluediv'>\n                      <TextBoxComponent ref={value => (barcodeValueInstance = value)} value='72527273070' id='textbox_0' change={valueOnChange}/>\n                    </div>\n                  </form>\n                </div>\n              </div>\n            </div>\n            <div className=\"row sb-child-row\">\n              <div>\n                <div className=\"col-xs-2 top left\">\n                  Width\n                    </div>\n                <div className=\"col-xs-4 left\">\n                  <NumericTextBoxComponent \n        //ref={widthRef => (portWidthNum = widthRef)}\n        id=\"width\" enabled={true} format={\"###.##\"} value={200} step={2} min={150} max={250} change={barcodewidthChange}/>\n                </div>\n                <div className=\"col-xs-2 top left\">\n                  Height\n                    </div>\n                <div className=\"col-xs-4 left\">\n                  <NumericTextBoxComponent \n        //ref={widthRef => (portWidthNum = widthRef)}\n        id=\"width\" enabled={true} format={\"###.##\"} value={150} step={2} min={100} max={200} change={barcodeheightChange}/>\n                </div>\n              </div>\n            </div>\n            <div className=\"row sb-child-row\" style={{ marginTop: \"20px\" }}>\n              <div className=\"col-xs-6 left\">\n                <div className=\"col-xs-12 left\">\n                  <CheckBoxComponent id=\"textVisibility\" checked={true} change={textVisibility}/>\n                  <div style={{ display: \"inline-block\", verticalAlign: \"middle\", paddingLeft: \"4px\" }}>Text Visibility</div>\n                </div>\n              </div>\n              <div className=\"col-xs-6 left\">\n                <div className=\"col-xs-12 left\">\n                  <CheckBoxComponent id=\"svgMode\" checked={true} change={modeChange}/>\n                   <div style={{ display: \"inline-block\", verticalAlign: \"middle\", paddingLeft: \"4px\" }}>SVG Mode</div>\n                </div>\n               \n              </div>\n\n            </div>\n            <div className=\"row sb-child-row\">\n              <div style={{ marginTop: \"10px\" }}>\n                <div className=\"col-xs-3 top left\" style={{ marginTop: \"5px\" }}>BG Color</div>\n                <div className=\"col-xs-3 left\">\n                  <ColorPickerComponent id=\"bgcolor\" value=\"#000\" change={barCodeColorChange}/>\n                </div>\n                <div className=\"col-xs-3 top left\" style={{ marginTop: '5px' }}>Fore Color</div>\n                <div className=\"col-xs-3 left\">\n                  <ColorPickerComponent id=\"forecolor\" value=\"#000\" change={foreColorChange}/>\n                </div>\n              </div>\n            </div>\n            <div className=\"property-panel-header\">Margin</div>\n            <div className=\"row sb-child-row\">\n              <div className=\"col-xs-2 top left\">Left</div>\n              <div className=\"col-xs-4 left\">\n                <NumericTextBoxComponent id=\"marginLeft\" enabled={true} format={\"###.##\"} value={10} step={1} min={-10} max={30} change={barcodeMarginLeft}/>\n              </div>\n              <div className=\"col-xs-2 top left\">Right</div>\n              <div className=\"col-xs-4 left\">\n                <NumericTextBoxComponent id=\"marginRight\" enabled={true} format={\"###.##\"} value={10} step={1} min={-10} max={30} change={barcodeMarginRight}/>\n                {/* <input type=\"text\" id='MarginRight' /> */}\n              </div>\n            </div>\n            <div className=\"row sb-child-row\">\n              <div className=\"col-xs-2 top left\">Top</div>\n              <div className=\"col-xs-4 left\">\n                <div style={{ paddingBottom: '8px' }}>\n                  <NumericTextBoxComponent id=\"marginbottom\" enabled={true} format={\"###.##\"} value={10} step={1} min={-10} max={30} change={barcodeMarginTop}/>\n                </div>\n              </div>\n              <div className=\"col-xs-2 top left\">Bottom</div>\n              <div className=\"col-xs-4 left\">\n                <NumericTextBoxComponent id=\"marginBottom\" enabled={true} format={\"###.##\"} value={10} step={1} min={-10} max={30} change={barcodeMarginBottom}/>\n              </div>\n            </div>\n          </div>\n          <div className=\"property-panel-header\"> Text Properties</div>\n          <div className=\"row sb-child-row\">\n            <div className=\"col-xs-2 top left\">Top</div>\n            <div className=\"col-xs-4 left\">\n              {/* <input type=\"text\" id='TextmarginTop' /> */}\n              <NumericTextBoxComponent id=\"TextmarginTop\" enabled={true} format={\"###.##\"} value={0} step={1} min={-10} max={20} change={TextmarginTopChange}/>\n            </div>\n            <div className=\"col-xs-2 top left\">Bottom</div>\n            <div className=\"col-xs-4 left\">\n              {/* <input type=\"text\" id='TextMarginBottom' /> */}\n              <NumericTextBoxComponent id=\"TextmarginTop\" enabled={true} format={\"###.##\"} value={0} step={1} min={-10} max={20} change={TextmarginBottomChangeChange}/>\n            </div>\n          </div>\n          <div className=\"row sb-child-row\">\n          <div className=\"col-xs-3 top left\">\n              Position\n                </div>\n            <div className=\"col-xs-9\">\n              <DropDownListComponent id=\"position\" popupWidth={150} width={\"100%\"} value='Bottom' index={0} dataSource={positionList} change={updatePosition} ref={fontfamily => (position = fontfamily)}/>\n\n            </div>\n          </div>\n\n\n          <div className=\"row sb-child-row\">\n          <div className=\"col-xs-3 top left\">\n              Alignment\n                </div>\n            <div className=\"col-xs-9\">\n              {/* <input type=\"text\" id='textAlignment' /> */}\n              <DropDownListComponent id=\"position\" popupWidth={150} width={\"100%\"} value='Center' index={0} dataSource={alignmentValue} change={updateAlignment} ref={fontfamily => (alignment = fontfamily)}/>\n            </div>\n          </div>\n          <div className=\"row sb-child-row\">\n            {/* <div className=\"col-xs-3 top\" style=\"width: 17%;padding-left: 0px;\"> */}\n            <div className=\"col-xs-3 top left\">\n              Display Text\n                </div>\n            {/* <div className=\"col-xs-10\" style=\"width: 81%;padding-left:0px;padding-right: 0;\"> */}\n            <div className=\"col-xs-9\">\n              {/* <input id='displayText' /> */}\n              <TextBoxComponent ref={value => (barcodetextInstance = value)} value='72527273070' change={textOnChange}/>\n            </div>\n          </div>\n          <div className=\"row sb-child-row\">\n                <div className=\"col-xs-6 top barcode-panel-left\">\n                    <ButtonComponent id=\"downloadBtn1\" onClick={() => {\n                barcodeInstance.exportImage(\"Barcode\", \"PNG\");\n            }}>Download</ButtonComponent>\n                </div>\n          </div>\n        </div>\n        {/* <div className=\"sb-property-border sb-prop-md-4\" style={{ left: '63%' }}></div> */}\n      </div>);\n    }\n}\nconst sample_css = ` \n.column-style {\n  display: table;\n  height: 35px;\n  padding-right: 4px;\n  padding-left: 0px;\n  width: calc((100% - 12px) / 3);\n}\n\n.row {\n  margin-left: 0px;\n  margin-right: 0px;\n}\n\n.row-header {\n  font-size: 15px;\n  font-weight: 500;\n}\n\n.labelstyle {\n  padding-top: 10px;\n  float: left;\n  padding-right: 10px\n}\n\n.propertystyle {\n  padding-top: 22px;\n  font-weight: 600;\n  font-size: 15px;\n}\n\n.sb-child-row {\n  margin-top: 8px;\n}\n\n.center {\n  margin-left: 14px;\n  margin-right: 17px;\n  margin-top: 14px;\n  min-width: 280px;\n  width: auto;\n  border: 2px solid lightgray;\n  min-height: 40%;\n  padding-top: 35px;\n}\n\n.col-lg-4-property-section {\n  width: 36%;\n}\n\n.rightProperty {\n  margin-top: 10px;\n  width: 16.66666667%;\n  float: left;\n  position: relative;\n  min-height: 1px;\n  padding-right: 15px;\n  padding-left: 15px;\n}\n\n.textProperty {\n  width: 81%;\n  padding-left: 0px;\n  padding-right: 0;\n  float: left;\n  position: relative;\n  min-height: 1px;\n}\n\n.sb-mobile-prop-pane .svgTextClass {\n  width: 40px;\n  padding-left: 24px;\n}\n\n.svgTextClass {\n  width: 100px;\n  float: left;\n  position: relative;\n  min-height: 1px;\n  padding-right: 15px;\n  padding-left: 15px;\n}\n\n\n\n.sb-mobile-prop-pane .rightProperty {\n  padding-left: 2px;\n}\n\n.sb-mobile-prop-pane .textPropertyClass {\n  padding-left: 30px;\n}\n\n.sb-mobile-prop-pane .textProperty {\n  padding-left: 30px;\n  width: 77%\n}\n\n.textPropertyClass {\n  width: 83.33333333%;\n  float: left;\n  padding-left: 0px;\n  position: relative;\n  min-height: 1px;\n  padding-right: 15px;\n}\n\n.allowedText {\n  margin-left: 14px;\n  margin-right: 17px;\n  margin-top: 14px;\n  width: auto;\n  height: auto;\n}\n\n.errorMessage {\n  margin-left: 14px;\n  margin-right: 17px;\n  margin-top: 14px;\n  width: auto;\n  height: auto;\n}\n\n.errorMessage {\n  margin-left: 14px;\n  margin-right: 17px;\n  margin-top: 14px;\n  width: auto;\n  height: auto;\n}\n\n\n.top {\n  margin-top: 10px;\n}\n.left {\n  padding-left: 0px;\n}\n\n.centercontrol {\n  margin: auto;\n  width: 200px;\n  height: 150px;\n}\n\n#password-info {\n  position: absolute;\n  margin-top: 30px;\n}\n.sb-child-row {\n  margin-top: 8px;\n}\n\n\n.sb-property-border sb-prop-md-4{\n  left: 64%\n}\n\n.property-panel-header {\n  padding-top: 15px;\n  padding-bottom: 15px;\n}\n\n\n.row-header {\n  font-size: 13px;\n  font-weight: 500;\n  padding-left: 10px\n}\n\n\n.center {\n  margin-left: 14px;\n  margin-right: 17px;\n  margin-top: 14px;\n  min-width: 280px;\n  width: auto;\n  border: 2px solid lightgray;\n  min-height: 40%;\n  padding-top: 35px;\n}\n`;\nlet barcodeInstance;\nlet position;\nlet alignment;\nlet barcodeValueInstance;\nlet barcodetextInstance;\nfunction valueOnChange(args) {\n    let divElement = document.getElementById('barcodevaluediv');\n    divElement.children[0].className = 'e-input-group e-control-wrapper';\n    barcodeValueInstance.cssClass = 'e-input-group e-control-wrapper';\n    barcodeValueInstance.dataBind();\n    barcodeInstance.value = args.value.toString();\n    barcodetextInstance.value = args.value.toString();\n}\nlet positionList = [\n    { type: 'Bottom', text: 'Bottom' },\n    { type: 'Top', text: 'Top' },\n];\nlet alignmentValue = [\n    { type: 'Left', text: 'Left' },\n    { type: 'Right', text: 'Right' },\n    { type: 'Center', text: 'Center' },\n];\nfunction barcodewidthChange(args) {\n    barcodeInstance.width = args.value.toString();\n}\nfunction barcodeheightChange(args) {\n    barcodeInstance.height = args.value.toString();\n}\nfunction textVisibility(args) {\n    barcodeInstance.displayText.visibility = args.checked;\n}\nfunction modeChange(args) {\n    barcodeInstance.mode = args.checked ? 'SVG' : 'Canvas';\n}\nfunction barCodeColorChange(args) {\n    barcodeInstance.backgroundColor = args.currentValue.hex;\n}\nfunction foreColorChange(args) {\n    barcodeInstance.foreColor = args.currentValue.hex;\n}\nfunction barcodeMarginLeft(args) {\n    barcodeInstance.margin.left = args.value;\n}\nfunction barcodeMarginRight(args) {\n    barcodeInstance.margin.right = args.value;\n}\nfunction barcodeMarginTop(args) {\n    barcodeInstance.margin.top = args.value;\n}\nfunction barcodeMarginBottom(args) {\n    barcodeInstance.margin.bottom = args.value;\n}\nfunction TextmarginTopChange(args) {\n    barcodeInstance.displayText.margin.top = args.value;\n}\nfunction TextmarginBottomChangeChange(args) {\n    barcodeInstance.displayText.margin.bottom = args.value;\n}\nfunction updatePosition(value) {\n    let positionValue = value.value;\n    barcodeInstance.displayText.position = (positionValue);\n}\nfunction updateAlignment(value) {\n    let alignnValue = value.value;\n    barcodeInstance.displayText.alignment = (alignnValue);\n}\nfunction textOnChange(args) {\n    barcodeInstance.displayText.text = args.value.toString();\n}\n\nconst root = createRoot(document.getElementById('sample'));\nroot.render(<UpcA />);","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n                this.rendereComplete();\n            });\n        }\n    }\n    export function updateSampleSection(){}\n    ","dependencies":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-react-base\":\"*\",\"@syncfusion/ej2-dropdowns\":\"*\",\"@syncfusion/ej2-react-dropdowns\":\"*\",\"@syncfusion/ej2-inputs\":\"*\",\"@syncfusion/ej2-react-inputs\":\"*\",\"@syncfusion/ej2-barcode-generator\":\"*\",\"@syncfusion/ej2-react-barcode-generator\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-react-buttons\":\"*\",\"@syncfusion/ej2-calendars\":\"*\",\"@syncfusion/ej2-compression\":\"*\",\"@syncfusion/ej2-data\":\"*\",\"@syncfusion/ej2-excel-export\":\"*\",\"@syncfusion/ej2-file-utils\":\"*\",\"@syncfusion/ej2-lists\":\"*\",\"@syncfusion/ej2-navigations\":\"*\",\"@syncfusion/ej2-notifications\":\"*\",\"@syncfusion/ej2-pdf-export\":\"*\",\"@syncfusion/ej2-popups\":\"*\",\"@syncfusion/ej2-splitbuttons\":\"*\",\"markdown-spellcheck\":\"^1.3.1\",\"@syncfusion/ej2-grids\":\"*\"}"}