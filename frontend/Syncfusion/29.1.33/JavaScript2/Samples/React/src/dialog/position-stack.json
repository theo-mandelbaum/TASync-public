{"index.css":"#positionDialog table,\n#positionDialog th,\n#positionDialog td {\n    border: 1px solid #D8D8D8;\n    border-collapse: collapse;\n}\n\n.fluent.e-bigger .control-section #positionDialog .e-dialog,\n.fluent-dark.e-bigger .control-section #positionDialog .e-dialog {\n  width: 502px !important;\n}\n\n#poschange {\n  width: 405px;\n}\n\n.fluent.e-bigger #poschange,\n.fluent-dark.e-bigger #poschange {\n  width: 455px;\n}\n\n#positionDialog.e-dialog .e-footer-content {\n    padding: 0px 1px 4px ! important;\n}\n\n.tableStyle {\n  margin: 17px;\n  width: 304px;\n}\n\n.e-dialog .e-dlgcontent{\n    padding: 10px 16px 10px;\n}     \n\n.e-radio +label .e-label {\n  line-height: 18px;\n}\n\n#poschange td {\n  padding: 6px;\n}\n\ndiv#target.control-section.dialog-position {\n    overflow: visible;\n    margin-bottom: 20px;\n    margin-top: 10px;\n}\n","index.html":"<!DOCTYPE html>\n<html>\n<head>\n    <title>Syncfusion React Sample</title>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\n    <meta name=\"author\" content=\"Syncfusion\" />\n    <link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\n</head>\n\n<body class=\"{{theme}}\">\n     <style>\n            .control-section\n            {\n                margin-top: 100px;\n            }\n    </style>\n    <div id='sample'>\n</body>\n</html>\n","index.js":"import { createRoot } from 'react-dom/client';\nimport './index.css';\nimport * as React from 'react';\nimport { DialogComponent } from '@syncfusion/ej2-react-popups';\nimport { RadioButtonComponent } from '@syncfusion/ej2-react-buttons';\nimport { SampleBase } from './sample-base';\n\nexport class Positioning extends SampleBase {\n    defaultDialogInstance;\n    position;\n    footerTemplate;\n    buttonEle;\n    buttonRef;\n    constructor(props) {\n        super(props);\n        this.state = {\n            hideDialog: true\n        };\n        this.buttonRef = element => {\n            this.buttonEle = element;\n        };\n        this.position = { X: 'center', Y: 'center' };\n        this.footerTemplate = '<span id=\"posvalue\" style=\"float:left;margin-left:8px;padding:10px;\">Position: { X: \"Center\", Y: \"Center\" }</span>';\n    }\n    buttonClick(args) {\n        this.setState({ hideDialog: true });\n    }\n    //Bind the overlayClick event\n    changePosition(event) {\n        this.defaultDialogInstance.position = { X: event.currentTarget.value.split(\" \")[0], Y: event.currentTarget.value.split(\" \")[1] };\n        document.getElementById('posvalue').innerHTML = 'Position: {X: \"' + event.currentTarget.value.split(\" \")[0] + '\", Y: \"' + event.currentTarget.value.split(\" \")[1] + '\"}';\n        let txt = event.target.parentElement.querySelector('.e-label').innerText.split(\" \");\n        document.getElementById('posvalue').innerHTML = 'Position: { X: \"' + txt[0] + '\", Y: \"' + txt[1] + '\" }';\n    }\n    dialogClose() {\n        this.setState({ hideDialog: false });\n        this.buttonEle.style.display = 'inline-block';\n    }\n    dialogOpen() {\n        this.setState({ hideDialog: true });\n        this.buttonEle.style.display = 'none';\n    }\n    render() {\n        return (<div className='control-pane'>\n        <div id='target' className='col-lg-12 control-section dialog-position'>\n          <button className='e-control e-btn dlgbtn' ref={this.buttonRef} onClick={this.buttonClick.bind(this)} id='dialogBtn'>Open Dialog</button>\n          <DialogComponent id='positionDialog' header='Choose a Dialog Position' width='452px' visible={this.state.hideDialog} showCloseIcon={true} position={this.position} footerTemplate={this.footerTemplate} ref={positionDialog => this.defaultDialogInstance = positionDialog} target='#target' open={this.dialogOpen.bind(this)} close={this.dialogClose.bind(this)} closeOnEscape={false}>\n            <table id='poschange'>\n              <tbody>\n                <tr>\n                  <td><RadioButtonComponent id='radio1' label='Left Top' value='left top' name='xy' onClick={this.changePosition.bind(this)}></RadioButtonComponent></td>\n                  <td><RadioButtonComponent id='radio2' label='Center Top' value='center top' name='xy' onClick={this.changePosition.bind(this)}></RadioButtonComponent></td>\n                  <td><RadioButtonComponent id='radio3' label='Right Top' value='right top' name='xy' onClick={this.changePosition.bind(this)}></RadioButtonComponent></td>\n                </tr>\n                <tr>\n                  <td><RadioButtonComponent id='radio4' label='Left Center' value='left center' name='xy' onClick={this.changePosition.bind(this)}></RadioButtonComponent></td>\n                  <td><RadioButtonComponent id='radio5' checked={true} label='Center Center' value='center center' name='xy' onClick={this.changePosition.bind(this)}></RadioButtonComponent></td>\n                  <td><RadioButtonComponent id='radio6' label='Right Center' value='right center' name='xy' onClick={this.changePosition.bind(this)}></RadioButtonComponent></td>\n                </tr>\n                <tr>\n                  <td><RadioButtonComponent id='radio7' label='Left Bottom' value='left bottom' name='xy' onClick={this.changePosition.bind(this)}></RadioButtonComponent></td>\n                  <td><RadioButtonComponent id='radio8' label='Center Bottom' value='center bottom' name='xy' onClick={this.changePosition.bind(this)}></RadioButtonComponent></td>\n                  <td><RadioButtonComponent id='radio9' label='Right Bottom' value='right bottom' name='xy' onClick={this.changePosition.bind(this)}></RadioButtonComponent></td>\n                </tr>\n              </tbody>\n            </table>\n          </DialogComponent>\n        </div>\n      </div>);\n    }\n}\n\nconst root = createRoot(document.getElementById('sample'));\nroot.render(<Positioning />);","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n                this.rendereComplete();\n            });\n        }\n    }\n    export function updateSampleSection(){}\n    ","dependencies":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-react-base\":\"*\",\"@syncfusion/ej2-popups\":\"*\",\"@syncfusion/ej2-react-popups\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-react-buttons\":\"*\",\"@syncfusion/ej2-react-charts\":\"*\",\"@syncfusion/ej2/base\":\"*\",\"@syncfusion/ej2-charts'; // Import the necessary types from Syncfusion\":\"*\",\"@syncfusion/ej2-lists\":\"*\"}"}