{"index.css":"#target {\n    height: 350px;\n}\n.control-pane .modal-dialog-target {\n    min-height: 350px;\n}\n.property-panel-table.table-width {\n    width: 100%;\n}\n.table-td {\n    width: 60%;\n}\n.dialog-td-font {\n    font-size: 13px;\n}\n.dlgbtn.dlgbtn-position {\n    position: absolute;\n}","property-pane.js":"import * as ReactDOM from 'react-dom';\nimport * as React from 'react';\nimport { select } from '@syncfusion/ej2-base';\nexport class PropertyPane extends React.Component {\n    render() {\n        const mobilePropPane = select('.sb-mobile-prop-pane');\n        const isMobile = window.matchMedia('(max-width:550px)').matches;\n        return isMobile && mobilePropPane ?\n            ReactDOM.createPortal(<div className='property-panel-section'>\n                    <div className=\"property-panel-header\">\n                        {this.props.title}\n                    </div>\n                    <div className=\"property-panel-content\">\n                        {this.props.children}\n                    </div>\n                </div>, mobilePropPane)\n            :\n                (<div className='property-panel-section'>\n                    <div className=\"property-panel-header\">\n                        {this.props.title}\n                    </div>\n                    <div className=\"property-panel-content\">\n                        {this.props.children}\n                    </div>\n                </div>);\n    }\n}\n","index.html":"<!DOCTYPE html>\n<html>\n<head>\n    <title>Syncfusion React Sample</title>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\n    <meta name=\"author\" content=\"Syncfusion\" />\n    <link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\n</head>\n\n<body class=\"{{theme}}\">\n     <style>\n            .control-section\n            {\n                margin-top: 100px;\n            }\n    </style>\n    <div id='sample'>\n</body>\n</html>\n","index.js":"import { createRoot } from 'react-dom/client';\nimport './index.css';\nimport * as React from 'react';\nimport { DialogComponent } from '@syncfusion/ej2-react-popups';\nimport { CheckBoxComponent } from '@syncfusion/ej2-react-buttons';\nimport { PropertyPane } from './property-pane';\nimport { SampleBase } from './sample-base';\n\nexport class Modal extends SampleBase {\n    dialogInstance;\n    checkboxObj;\n    animationSettings;\n    buttons;\n    buttonEle;\n    buttonRef;\n    constructor(props) {\n        super(props);\n        this.state = {\n            hideDialog: true\n        };\n        this.buttonRef = element => {\n            this.buttonEle = element;\n        };\n        this.animationSettings = { effect: 'None' };\n        this.buttons = [{\n                // Click the footer buttons to hide the Dialog\n                click: () => {\n                    this.dialogInstance.hide();\n                },\n                // Accessing button component properties by buttonModel property\n                buttonModel: {\n                    //Enables the primary button\n                    isPrimary: true,\n                    content: 'OK'\n                }\n            }];\n    }\n    // function to handle the CheckBox change event\n    onChange(args) {\n        if (args.checked) {\n            this.dialogInstance.overlayClick = () => {\n                this.setState({ hideDialog: false });\n            };\n        }\n        else {\n            this.dialogInstance.overlayClick = () => {\n                this.setState({ hideDialog: true });\n            };\n        }\n    }\n    // To Open dialog\n    buttonClick() {\n        this.setState({ hideDialog: true });\n    }\n    dialogClose() {\n        this.setState({ hideDialog: false });\n        this.buttonEle.style.display = 'inline-block';\n    }\n    dialogOpen() {\n        this.buttonEle.style.display = 'none';\n    }\n    render() {\n        return (<div className='control-pane'>\n                <div className='control-section modal-dialog-target'>\n                    <div id='target' className='col-lg-8'>\n                        <button className=\"e-control e-btn dlgbtn dlgbtn-position\" ref={this.buttonRef} onClick={this.buttonClick.bind(this)}>Open</button>\n                        {/* Rendering modal Dialog by enabling 'isModal' as true */}\n                        <DialogComponent id=\"modalDialog\" isModal={true} buttons={this.buttons} header='Software Update' width='335px' content='Your current software version is up to date.' ref={dialog => this.dialogInstance = dialog} target='#target' visible={this.state.hideDialog} open={this.dialogOpen.bind(this)} close={this.dialogClose.bind(this)} animationSettings={this.animationSettings}></DialogComponent>\n                    </div>\n                    <div className='col-lg-4 property-section'>\n                        <PropertyPane title='Properties'>\n                            <table id='property' title='Properties' className='property-panel-table table-width'>\n                                <tbody>\n                                    <tr>\n                                        <td className='table-td'>\n                                            <div className='dialog-td-font'>Close on overlay click</div>\n                                        </td>\n                                        <td>\n                                            <CheckBoxComponent checked={false} ref={(scope) => { this.checkboxObj = scope; }} change={this.onChange.bind(this)}></CheckBoxComponent>\n                                        </td>\n                                    </tr>\n                                </tbody>\n                            </table>\n                        </PropertyPane>\n                    </div>\n                </div>\n            </div>);\n    }\n}\n\nconst root = createRoot(document.getElementById('sample'));\nroot.render(<Modal />);","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n                this.rendereComplete();\n            });\n        }\n    }\n    export function updateSampleSection(){}\n    ","dependencies":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-react-base\":\"*\",\"@syncfusion/ej2-popups\":\"*\",\"@syncfusion/ej2-react-popups\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-react-buttons\":\"*\",\"markdown-spellcheck\":\"^1.3.1\",\"@syncfusion/ej2-react-charts\":\"*\",\"@syncfusion/ej2/base\":\"*\",\"@syncfusion/ej2-charts'; // Import the necessary types from Syncfusion\":\"*\",\"@syncfusion/ej2-lists\":\"*\"}"}