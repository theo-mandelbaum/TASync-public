{"index.css":"/* css */","double-data.js":"export let sl = [\n    { x: 1, y: 2 },\n    { x: 2, y: 3, isWicket: true },\n    { x: 3, y: 1 },\n    { x: 4, y: 7 },\n    { x: 5, y: 5 },\n    { x: 6, y: 24 },\n    { x: 7, y: 13 },\n    { x: 8, y: 4 },\n    { x: 9, y: 6 },\n    { x: 10, y: 4 },\n    { x: 11, y: 7 },\n    { x: 12, y: 5 },\n    { x: 13, y: 5 },\n    { x: 14, y: 10 },\n    { x: 15, y: 5 },\n    { x: 16, y: 5 },\n    { x: 17, y: 13 },\n    { x: 18, y: 4 },\n    { x: 19, y: 8 },\n    { x: 20, y: 2 },\n    { x: 21, y: 2 },\n    { x: 22, y: 2, isWicket: true },\n    { x: 23, y: 5 },\n    { x: 24, y: 7 },\n    { x: 25, y: 1 },\n    { x: 26, y: 4 },\n    { x: 27, y: 5 },\n    { x: 28, y: 5 },\n    { x: 29, y: 5 },\n    { x: 30, y: 17 },\n    { x: 31, y: 42, isWicket: true },\n    { x: 32, y: 7 },\n    { x: 33, y: 5 },\n    { x: 34, y: 2, isWicket: true },\n    { x: 35, y: 6 },\n    { x: 36, y: 16 },\n    { x: 37, y: 19 },\n    { x: 38, y: 6 },\n    { x: 39, y: 12 },\n    { x: 40, y: 11 },\n    { x: 41, y: 8 },\n    { x: 42, y: 12, isWicket: true },\n    { x: 43, y: 4, isWicket: true },\n    { x: 44, y: 8 },\n    { x: 45, y: 2, isWicket: true },\n    { x: 46, y: 2, isWicket: true }\n];\nexport let aus = [\n    { x: 1, y: 4 },\n    { x: 2, y: 4 },\n    { x: 3, y: 5 },\n    { x: 4, y: 6 },\n    { x: 5, y: 5, isWicket: true },\n    { x: 6, y: 8 },\n    { x: 7, y: 2 },\n    { x: 8, y: 3 },\n    { x: 9, y: 4, isWicket: true },\n    { x: 10, y: 8 },\n    { x: 11, y: 3 },\n    { x: 12, y: 4 },\n    { x: 13, y: 7 },\n    { x: 14, y: 2 },\n    { x: 15, y: 7 },\n    { x: 16, y: 4 },\n    { x: 17, y: 3 },\n    { x: 18, y: 3 },\n    { x: 19, y: 3 },\n    { x: 20, y: 1 },\n    { x: 21, y: 7 },\n    { x: 22, y: 2 },\n    { x: 23, y: 5 },\n    { x: 24, y: 7 },\n    { x: 25, y: 7 },\n    { x: 26, y: 7 },\n    { x: 27, y: 5 },\n    { x: 28, y: 9 },\n    { x: 29, y: 14 },\n    { x: 30, y: 10 },\n    { x: 31, y: 10 },\n    { x: 32, y: 7, isWicket: true },\n    { x: 33, y: 2, isWicket: true },\n    { x: 34, y: 7 },\n    { x: 35, y: 14 },\n    { x: 36, y: 3 },\n    { x: 37, y: 17 },\n    { x: 38, y: 16 },\n    { x: 39, y: 10 },\n    { x: 40, y: 8 },\n    { x: 41, y: 17 },\n    { x: 42, y: 10 },\n    { x: 43, y: 20 },\n    { x: 44, y: 15 },\n    { x: 45, y: 6 },\n    { x: 46, y: 16 },\n    { x: 47, y: 8, isWicket: true },\n    { x: 48, y: 4, isWicket: true },\n    { x: 49, y: 19, isWicket: true },\n    { x: 50, y: 8, isWicket: true }\n];\n","theme-color.js":"export let themes = ['bootstrap5', 'bootstrap5dark', 'tailwind', 'tailwinddark', 'material', 'materialdark', 'bootstrap4', 'bootstrap', 'bootstrapdark', 'fabric', 'fabricdark', 'highcontrast', 'fluent', 'fluentdark', 'material3', 'material3dark', 'fluent2', 'fluent2highcontrast', 'fluent2dark', 'tailwind3', 'tailwind3dark'];\nexport let borderColor = ['#FD7E14', '#FD7E14', '#5A61F6', '#8B5CF6', '#00bdae', '#9ECB08', '#a16ee5', '#a16ee5', '#a16ee5', '#4472c4', '#4472c4', '#79ECE4', '#1AC9E6', '#1AC9E6', '#6355C7', '#4EAAFF', '#6200EE', '#9BB449', '#9BB449', '#2F4074', '#8029F1'];\nexport let regionColor = ['rgba(52, 58, 64, 0.1)', 'rgba(173, 181, 189, 0.1)', 'rgba(90, 97, 246, 0.3)', 'rgba(139, 92, 246, 0.3)', 'rgba(0, 189, 174, 0.3)',\n    'rgba(158, 203, 8, 0.3)', 'rgba(161, 110, 229, 0.3)', 'rgba(161, 110, 229, 0.3)', 'rgba(161, 110, 229, 0.3)', 'rgba(68, 114, 196, 0.3)',\n    'rgba(68, 114, 196, 0.3)', 'rgba(121, 236, 228, 0.3)', 'rgba(26, 201, 230, 0.3)', 'rgba(26, 201, 230, 0.3)', 'rgba(99, 85, 199, 0.3)', 'rgba(78, 170, 255, 0.3)',\n    'rgba(98, 0, 238, 0.3)', 'rgba(155, 180, 73, 0.3)', 'rgba(155, 180, 73, 0.3)', 'rgba(47, 64, 116, 0.3)', 'rgba(128, 41, 241, 0.3)'];\nexport let printRegionColors = ['rgba(255, 64, 129, 0.3)', ' rgba(0, 120, 151, 0.3)', 'rgba(66, 139, 202, 0.3)', 'rgba(255, 217, 57, 0.3)', 'rgba(255, 217, 57, 0.3)', 'rgba(253, 126, 20, 0.3)', 'rgba(79, 70, 229, 0.3)',\n    'rgba(255, 64, 129, 0.3)', 'rgba(0, 120, 151, 0.3)', 'rgba(66, 139, 202, 0.3)', 'rgba(34, 211, 238, 0.3)', 'rgba(253, 126, 20, 0.3)', 'rgba(26, 201, 230, 0.3)', 'rgba(26, 201, 230, 0.3)', 'rgba(99, 85, 199, 0.3)', 'rgba(78, 170, 255, 0.3)', 'rgba(98, 0, 238, 0.3)', 'rgba(155, 180, 73, 0.3)', 'rgba(155, 180, 73, 0.3)', 'rgba(47, 64, 116, 0.3)', 'rgba(128, 41, 241, 0.3)'];\nexport let printThemes = ['Material', 'Fabric', 'Bootstrap', 'Bootstrap4', 'HighContrast', 'Bootstrap5', 'Tailwind', 'MaterialDark', 'FabricDark', 'BootstrapDark', 'TailwindDark', 'Bootstrap5Dark', 'Fluent', 'FluentDark', 'Material3', 'Material3Dark', 'Fluent2', 'Fluent2HighContrast', 'Fluent2Dark', 'Tailwind3', 'Tailwind3Dark'];\nexport let printBorderColor = ['#FF4081', '#007897', '#5A61F6', '#8B5CF6', '#FFD939', '#FD7E14', '#4F46E5', '#FF4081', '#007897', '#428BCA', '#22D3EE', '#FD7E14', '#1AC9E6', '#1AC9E6', '#6355C7', '#4EAAFF', '#6200EE', '#9BB449', '#9BB449', '#2F4074', '#8029F1'];\nexport let loadRangeNavigatorTheme = (args, isGradient) => {\n    let selectedTheme = location.hash.split('/')[1];\n    selectedTheme = selectedTheme ? selectedTheme : 'Tailwind3';\n    const formattedTheme = (selectedTheme.charAt(0).toUpperCase() +\n        selectedTheme.slice(1)).replace(/-dark/i, 'Dark').replace(/contrast/i, 'Contrast').replace(/-highContrast/i, 'HighContrast');\n    if (args) {\n        if ('chart' in args) {\n            args.chart.theme = formattedTheme;\n            return isGradient ? selectedTheme : args.chart.theme;\n        }\n        else if ('rangeNavigator' in args) {\n            args.rangeNavigator.theme = formattedTheme;\n            return isGradient ? selectedTheme : args.rangeNavigator.theme;\n        }\n    }\n    if (isGradient && !args) {\n        return selectedTheme;\n    }\n};\n","index.html":"<!DOCTYPE html>\n<html>\n<head>\n    <title>Syncfusion React Sample</title>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\n    <meta name=\"author\" content=\"Syncfusion\" />\n    <link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\n</head>\n\n<body class=\"{{theme}}\">\n     <style>\n            .control-section\n            {\n                margin-top: 100px;\n            }\n    </style>\n    <div id='sample'>\n</body>\n</html>\n","index.js":"import { createRoot } from 'react-dom/client';\nimport './index.css';\n/**\n * Sample for Numeric Axis Range Navigator\n */\nimport * as React from \"react\";\nimport { Inject, ChartComponent, RangeTooltip, SplineSeries, Crosshair, SeriesCollectionDirective, SeriesDirective, Tooltip, RangeNavigatorComponent, RangenavigatorSeriesCollectionDirective, RangenavigatorSeriesDirective, getSeriesColor, ChartAnnotation } from '@syncfusion/ej2-react-charts';\nimport { Browser } from '@syncfusion/ej2-base';\n\nimport { sl, aus } from './double-data';\nimport { loadRangeNavigatorTheme } from './theme-color';\nexport let zoomFactor;\nexport let zoomPosition;\nexport let chartAnnotation = [];\nchartAnnotation.push({ content: '<div id=\"exchangeRate\"></div>', coordinateUnits: 'Pixel', region: 'Chart', x: '85%', y: '15%' });\nexport let selectedTheme = loadRangeNavigatorTheme(null, true);\nexport let theme = (selectedTheme.charAt(0).toUpperCase() + selectedTheme.slice(1)).replace(/-dark/i, \"Dark\").replace(/contrast/i, 'Contrast').replace(/-highContrast/i, 'HighContrast');\nexport let backgroundColor = 'white';\ngetAnnotation(aus, getSeriesColor(theme)[0]);\ngetAnnotation(sl, getSeriesColor(theme)[1]);\nconst SAMPLE_CSS = `\n     .control-fluid {\n         padding: 0px;\n     }\n     #title{\n         font-size: 15px;\n         font-style: normal;\n         font-family: \"Segoe UI\";\n         font-weight: 500;\n         text-anchor: middle;\n         transform: none;\n         opacity: 1;\n     }\n     `;\nfunction NumericAxis() {\n    let chart1;\n    let rangenavigator1;\n    return (<div className='control-pane'>\n            <style>\n                {SAMPLE_CSS}\n            </style>\n            <div className='control-section'>\n                <div className=\"row\" style={{ textAlign: \"center\" }}>\n                    <div id=\"title\">Score Comparision AUS vs SL</div>\n                </div>\n                <div className=\"row\">\n                    <RangeNavigatorComponent id='double' ref={rangenavigator => rangenavigator1 = rangenavigator} style={{ textAlign: \"center\" }} labelPosition='Outside' tooltip={{ enable: true }} load={rangeLoad.bind(this)} changed={changed.bind(this)} width={Browser.isDevice ? '100%' : '80%'} tooltipRender={renderTooltip.bind(this)} value={[31, 50]}>\n                        <Inject services={[RangeTooltip]}/>\n                        <RangenavigatorSeriesCollectionDirective>\n                            <RangenavigatorSeriesDirective dataSource={aus} xName='x' yName='y'>\n                            </RangenavigatorSeriesDirective>\n                            <RangenavigatorSeriesDirective dataSource={sl} xName='x' yName='y'>\n                            </RangenavigatorSeriesDirective>\n                        </RangenavigatorSeriesCollectionDirective>\n                    </RangeNavigatorComponent>\n                </div>\n                <div className=\"row\">\n                    <ChartComponent id='charts' ref={chart => chart1 = chart} style={{ textAlign: \"center\" }} primaryXAxis={{\n            title: 'Overs',\n            edgeLabelPlacement: 'Shift',\n            majorGridLines: { width: 0 },\n            labelFormat: 'n1'\n        }} primaryYAxis={{\n            title: 'Runs',\n            minimum: 0,\n            majorTickLines: { width: 0 },\n            lineStyle: { width: 0 }\n        }} width={Browser.isDevice ? '100%' : '80%'} height='350' theme={theme} annotations={chartAnnotation} legendSettings={{ visible: false }} load={chartLoad.bind(this)} loaded={chartLoaded.bind(this)} axisLabelRender={labelRender.bind(this)} chartArea={{ border: { width: 0 } }}>\n                        <Inject services={[SplineSeries, Crosshair, Tooltip, ChartAnnotation]}/>\n                        <SeriesCollectionDirective>\n                            <SeriesDirective dataSource={aus} xName='x' yName='y' name='AUS' type='Spline' width={2} animation={{ enable: false }}>\n                            </SeriesDirective>\n                            <SeriesDirective dataSource={sl} xName='x' yName='y' name='SL' type='Spline' width={2} animation={{ enable: false }}>\n                            </SeriesDirective>\n                        </SeriesCollectionDirective>\n                    </ChartComponent>\n                </div>\n            </div>\n        </div>);\n    function changed(args) {\n        if (chart1) {\n            chart1.primaryXAxis.zoomFactor = args.zoomFactor;\n            chart1.primaryXAxis.zoomPosition = args.zoomPosition;\n            chart1.dataBind();\n        }\n        else {\n            zoomFactor = args.zoomFactor;\n            zoomPosition = args.zoomPosition;\n        }\n    }\n    ;\n    function chartLoad(args) {\n        args.chart.primaryXAxis.zoomFactor = zoomFactor;\n        args.chart.primaryXAxis.zoomPosition = zoomPosition;\n        let series1 = getSeriesColor(theme)[0];\n        let series2 = getSeriesColor(theme)[1];\n        let html = '<table>';\n        html += '<tr><td><div style=\"width:10px; height: 10px; border: 2px solid ' + series1 + '; background: ' + series1 + ';\"></div></td><td style=\"padding-left:10px;\">' + ' Australia' + '</td>';\n        html += '<tr><td><div style=\"width:10px; height: 10px; border: 2px solid ' + series2 + '; background: ' + series2 + ';\"></div></td><td style=\"padding-left:10px;\">' + ' Sri Lanka' + '</td>';\n        html += '</table>';\n        args.chart.annotations[0].content = '<div id=\"exchangeRate\" style=\"line-height: 18px; font-size: 13px;background: #fff; opacity:0.9; color: #464e56; ' +\n            ' box-shadow:0 0 8px 0 rgba(70,78,86,.25); padding: 7px 10px; border-radius: 3px\">' + html + '</div>';\n    }\n    ;\n    function labelRender(args) {\n        if (args.axis.orientation === 'Horizontal') {\n            let value = Math.abs(Number(args.text));\n            args.text = String(value);\n        }\n    }\n    function chartLoaded(args) {\n        let series1 = args.chart.visibleSeries[0].interior;\n        let series2 = args.chart.visibleSeries[1].interior;\n        let html = '<table>';\n        html += '<tr><td><div style=\"width:10px; height: 10px; border: 2px solid ' + series1 + '; background: ' + series1 + ';\"></div></td><td style=\"padding-left:10px;\">' + ' Australia' + '</td>';\n        html += '<tr><td><div style=\"width:10px; height: 10px; border: 2px solid ' + series2 + '; background: ' + series2 + ';\"></div></td><td style=\"padding-left:10px;\">' + ' Sri Lanka' + '</td>';\n        html += '</table>';\n        if (chart1) {\n            chart1.setAnnotationValue(0, '<div id=\"exchangeRate\" style=\"line-height: 18px; font-size: 13px;background: #fff; opacity:0.9; color: #464e56; ' +\n                ' box-shadow:0 0 8px 0 rgba(70,78,86,.25); padding: 7px 10px; border-radius: 3px\">' +\n                html +\n                '</div>');\n        }\n    }\n    ;\n    function rangeLoad(args) {\n        loadRangeNavigatorTheme(args);\n    }\n    ;\n    function renderTooltip(args) {\n        let text = parseFloat(args.text[0]);\n        text = Math.round(text);\n        let text1 = text.toString();\n        args.text[0] = text1;\n    }\n}\nfunction getAnnotation(args, color) {\n    for (let i = 0; i < args.length; i++) {\n        if (args[i].isWicket) {\n            chartAnnotation.push({\n                content: '<div id= \"wicket\" style=\"width: 20px; height:20px; border-radius: 5px;' +\n                    'background: ' + backgroundColor + '; border: 2px solid ' + color + '; color:' + color + '\">W</div>',\n                x: args[i].x,\n                y: args[i].y,\n                coordinateUnits: 'Point'\n            });\n        }\n    }\n}\nexport default NumericAxis;\n\nconst root = createRoot(document.getElementById('sample'));\nroot.render(<NumericAxis />);","dependencies":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-react-base\":\"*\",\"@syncfusion/ej2-charts\":\"*\",\"@syncfusion/ej2-react-charts\":\"*\",\"@syncfusion/ej2-icons\":\"*\",\"markdown-spellcheck\":\"^1.3.1\",\"@syncfusion/ej2/base\":\"*\",\"@syncfusion/ej2-charts'; // Import the necessary types from Syncfusion\":\"*\",\"@syncfusion/ej2-lists\":\"*\",\"@syncfusion/ej2-documenteditor\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-splitbuttons\":\"*\",\"@syncfusion/ej2-navigations\":\"*\",\"@syncfusion/ej2-react-popups\":\"*\",\"@syncfusion/ej2-pivotview\":\"*\",\"@syncfusion/ej2-react-progressbar\":\"*\"}"}