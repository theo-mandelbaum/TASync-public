{"index.css":"/* css */","data-service.js":"/**\n * Chart data service\n */\nexport function GetDateTimeData(start, end, min, max) {\n    let series1 = [];\n    let point = {};\n    let value = 100;\n    let date;\n    for (let i = 0; start <= end; i++) {\n        date = start.getTime();\n        if (min || max) {\n            value = getRandomInt(min, max);\n        }\n        else {\n            if (Math.random() > .5) {\n                value += Math.random();\n            }\n            else {\n                value -= Math.random();\n            }\n        }\n        point = { x: new Date(date), y: value };\n        new Date(start.setDate(start.getDate() + 1));\n        series1.push(point);\n    }\n    return series1;\n}\nexport function getRandomInt(min, max) {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\nexport function GetNumericData(start, end, min, max) {\n    let series1 = [];\n    let point = {};\n    let value = 30;\n    for (let i = start; i <= end; i++) {\n        if (min || max) {\n            value = getRandomInt(min, max);\n        }\n        else {\n            if (Math.random() > .5) {\n                value += Math.random();\n            }\n            else {\n                value -= Math.random();\n            }\n        }\n        point = { x: i, y: Math.round(value) };\n        series1.push(point);\n    }\n    return series1;\n}\n","index.html":"<!DOCTYPE html>\n<html>\n<head>\n    <title>Syncfusion React Sample</title>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\n    <meta name=\"author\" content=\"Syncfusion\" />\n    <link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\n</head>\n\n<body class=\"{{theme}}\">\n     <style>\n            .control-section\n            {\n                margin-top: 100px;\n            }\n    </style>\n    <div id='sample'>\n</body>\n</html>\n","index.js":"import { createRoot } from 'react-dom/client';\nimport './index.css';\n/**\n * Sample for Light Weight Range Navigator\n */\nimport * as React from \"react\";\nimport { RangeNavigatorComponent, DateTime, Inject } from '@syncfusion/ej2-react-charts';\nimport { Browser } from '@syncfusion/ej2-base';\nimport { GetDateTimeData } from './data-service';\nimport { SampleBase } from './sample-base';\nexport let data = GetDateTimeData(new Date(2018, 0, 1), new Date(2019, 0, 1));\nconst SAMPLE_CSS = `\n    .control-fluid {\n        padding: 0px !important;\n    }\n    .tableStyle{\n        transform:translateX(75%);\n        margin-top:20px;\n        text-align:center;font-family: Segoe UI;font-weight: 500; font-style:normal; font-size:15px;\n    }\n    #rangenavigator {\n        transform: translate(0, 25%);\n    }\n    #days {\n        font-family: Segoe UI;font-weight: 500; font-style:normal; font-size:15px;\n    }\n    #working{\n        width: 150px;\n    }\n    #weekend{\n        width: 150px;\n    }\n    #workingcount{\n        width: 25px;\n    }\n    #weekendcount{\n        width: 25px;\n    }\n    #holiday {\n        padding-left: 20px;\n    }\n    `;\nexport class LightWeight extends SampleBase {\n    render() {\n        return (<div className='control-pane'>\n                <style>\n                    {SAMPLE_CSS}\n                </style>\n                <div className='control-section'>\n                    <div className=\"row\">\n                        <div id=\"days\" style={{ textAlign: \"center\" }}>Calculate the Business and Weekend days in a period</div>\n                        <div id=\"datetime\"></div>\n                    </div>\n                    <div className=\"row\">\n                        <RangeNavigatorComponent id='rangenavigator' style={{ textAlign: \"center\" }} valueType='DateTime' intervalType='Months' labelFormat='MMM' height='52' navigatorStyleSettings={{\n                thumb: {\n                    type: 'Rectangle'\n                },\n            }} load={this.load.bind(this)} width={Browser.isDevice ? '100%' : '80%'} value={[new Date('2018-06-01'), new Date('2018-07-01')]} dataSource={data} xName='x' yName='y' changed={this.changed.bind(this)}>\n                            <Inject services={[DateTime]}/>\n                        </RangeNavigatorComponent>\n                    </div>\n                    <div className=\"row\">\n                        <table className=\"tableStyle\">\n                            <tbody><tr>\n                                <td id=\"working1\">\n                                    <table>\n                                        <tbody><tr>\n                                            <td id=\"working\">Total Business Days:</td>\n                                            <td id=\"workingcount\"></td>\n                                        </tr>\n                                        </tbody></table>\n                                </td>\n                                <td id=\"holiday\">\n                                    <table>\n                                        <tbody><tr>\n                                            <td id=\"weekend\">Total Weekend Days: </td>\n                                            <td id=\"weekendcount\"></td>\n                                        </tr>\n                                        </tbody></table>\n                                </td>\n                            </tr>\n                            </tbody></table>\n                    </div>\n                </div>\n            </div>);\n    }\n    changed(args) {\n        let currentDate = new Date(+args.start);\n        let workingDaysCount = 0;\n        let holidaysDaysCount = 0;\n        while (currentDate <= new Date(+args.end)) {\n            if (currentDate.getDay() > 0 && currentDate.getDay() <= 5) {\n                workingDaysCount++;\n            }\n            else {\n                holidaysDaysCount++;\n            }\n            currentDate.setDate(currentDate.getDate() + 1);\n        }\n        document.getElementById('workingcount').innerHTML = ' ' + workingDaysCount;\n        document.getElementById('weekendcount').innerHTML = ' ' + holidaysDaysCount;\n    }\n    ;\n    load(args) {\n        let selectedTheme = location.hash.split('/')[1];\n        selectedTheme = selectedTheme ? selectedTheme : 'Fluent2';\n        args.rangeNavigator.theme = (selectedTheme.charAt(0).toUpperCase() + selectedTheme.slice(1)).\n            replace(/-dark/i, \"Dark\").replace(/contrast/i, 'Contrast').replace(/-highContrast/i, 'HighContrast');\n    }\n    ;\n}\n\nconst root = createRoot(document.getElementById('sample'));\nroot.render(<LightWeight />);","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n                this.rendereComplete();\n            });\n        }\n    }\n    export function updateSampleSection(){}\n    ","dependencies":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-react-base\":\"*\",\"@syncfusion/ej2-charts\":\"*\",\"@syncfusion/ej2-react-charts\":\"*\",\"@syncfusion/ej2-icons\":\"*\",\"markdown-spellcheck\":\"^1.3.1\",\"@syncfusion/ej2/base\":\"*\",\"@syncfusion/ej2-charts'; // Import the necessary types from Syncfusion\":\"*\",\"@syncfusion/ej2-lists\":\"*\",\"@syncfusion/ej2-documenteditor\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-splitbuttons\":\"*\",\"@syncfusion/ej2-navigations\":\"*\",\"@syncfusion/ej2-react-popups\":\"*\",\"@syncfusion/ej2-pivotview\":\"*\",\"@syncfusion/ej2-react-progressbar\":\"*\"}"}