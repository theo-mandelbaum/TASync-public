{"index.css":"/* css */","data-service.js":"/**\n * Chart data service\n */\nexport function GetDateTimeData(start, end, min, max) {\n    let series1 = [];\n    let point = {};\n    let value = 100;\n    let date;\n    for (let i = 0; start <= end; i++) {\n        date = start.getTime();\n        if (min || max) {\n            value = getRandomInt(min, max);\n        }\n        else {\n            if (Math.random() > .5) {\n                value += Math.random();\n            }\n            else {\n                value -= Math.random();\n            }\n        }\n        point = { x: new Date(date), y: value };\n        new Date(start.setDate(start.getDate() + 1));\n        series1.push(point);\n    }\n    return series1;\n}\nexport function getRandomInt(min, max) {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\nexport function GetNumericData(start, end, min, max) {\n    let series1 = [];\n    let point = {};\n    let value = 30;\n    for (let i = start; i <= end; i++) {\n        if (min || max) {\n            value = getRandomInt(min, max);\n        }\n        else {\n            if (Math.random() > .5) {\n                value += Math.random();\n            }\n            else {\n                value -= Math.random();\n            }\n        }\n        point = { x: i, y: Math.round(value) };\n        series1.push(point);\n    }\n    return series1;\n}\n","theme-color.js":"export let themes = ['bootstrap5', 'bootstrap5dark', 'tailwind', 'tailwinddark', 'material', 'materialdark', 'bootstrap4', 'bootstrap', 'bootstrapdark', 'fabric', 'fabricdark', 'highcontrast', 'fluent', 'fluentdark', 'material3', 'material3dark', 'fluent2', 'fluent2highcontrast', 'fluent2dark', 'tailwind3', 'tailwind3dark'];\nexport let borderColor = ['#FD7E14', '#FD7E14', '#5A61F6', '#8B5CF6', '#00bdae', '#9ECB08', '#a16ee5', '#a16ee5', '#a16ee5', '#4472c4', '#4472c4', '#79ECE4', '#1AC9E6', '#1AC9E6', '#6355C7', '#4EAAFF', '#6200EE', '#9BB449', '#9BB449', '#2F4074', '#8029F1'];\nexport let regionColor = ['rgba(52, 58, 64, 0.1)', 'rgba(173, 181, 189, 0.1)', 'rgba(90, 97, 246, 0.3)', 'rgba(139, 92, 246, 0.3)', 'rgba(0, 189, 174, 0.3)',\n    'rgba(158, 203, 8, 0.3)', 'rgba(161, 110, 229, 0.3)', 'rgba(161, 110, 229, 0.3)', 'rgba(161, 110, 229, 0.3)', 'rgba(68, 114, 196, 0.3)',\n    'rgba(68, 114, 196, 0.3)', 'rgba(121, 236, 228, 0.3)', 'rgba(26, 201, 230, 0.3)', 'rgba(26, 201, 230, 0.3)', 'rgba(99, 85, 199, 0.3)', 'rgba(78, 170, 255, 0.3)',\n    'rgba(98, 0, 238, 0.3)', 'rgba(155, 180, 73, 0.3)', 'rgba(155, 180, 73, 0.3)', 'rgba(47, 64, 116, 0.3)', 'rgba(128, 41, 241, 0.3)'];\nexport let printRegionColors = ['rgba(255, 64, 129, 0.3)', ' rgba(0, 120, 151, 0.3)', 'rgba(66, 139, 202, 0.3)', 'rgba(255, 217, 57, 0.3)', 'rgba(255, 217, 57, 0.3)', 'rgba(253, 126, 20, 0.3)', 'rgba(79, 70, 229, 0.3)',\n    'rgba(255, 64, 129, 0.3)', 'rgba(0, 120, 151, 0.3)', 'rgba(66, 139, 202, 0.3)', 'rgba(34, 211, 238, 0.3)', 'rgba(253, 126, 20, 0.3)', 'rgba(26, 201, 230, 0.3)', 'rgba(26, 201, 230, 0.3)', 'rgba(99, 85, 199, 0.3)', 'rgba(78, 170, 255, 0.3)', 'rgba(98, 0, 238, 0.3)', 'rgba(155, 180, 73, 0.3)', 'rgba(155, 180, 73, 0.3)', 'rgba(47, 64, 116, 0.3)', 'rgba(128, 41, 241, 0.3)'];\nexport let printThemes = ['Material', 'Fabric', 'Bootstrap', 'Bootstrap4', 'HighContrast', 'Bootstrap5', 'Tailwind', 'MaterialDark', 'FabricDark', 'BootstrapDark', 'TailwindDark', 'Bootstrap5Dark', 'Fluent', 'FluentDark', 'Material3', 'Material3Dark', 'Fluent2', 'Fluent2HighContrast', 'Fluent2Dark', 'Tailwind3', 'Tailwind3Dark'];\nexport let printBorderColor = ['#FF4081', '#007897', '#5A61F6', '#8B5CF6', '#FFD939', '#FD7E14', '#4F46E5', '#FF4081', '#007897', '#428BCA', '#22D3EE', '#FD7E14', '#1AC9E6', '#1AC9E6', '#6355C7', '#4EAAFF', '#6200EE', '#9BB449', '#9BB449', '#2F4074', '#8029F1'];\nexport let loadRangeNavigatorTheme = (args, isGradient) => {\n    let selectedTheme = location.hash.split('/')[1];\n    selectedTheme = selectedTheme ? selectedTheme : 'Tailwind3';\n    const formattedTheme = (selectedTheme.charAt(0).toUpperCase() +\n        selectedTheme.slice(1)).replace(/-dark/i, 'Dark').replace(/contrast/i, 'Contrast').replace(/-highContrast/i, 'HighContrast');\n    if (args) {\n        if ('chart' in args) {\n            args.chart.theme = formattedTheme;\n            return isGradient ? selectedTheme : args.chart.theme;\n        }\n        else if ('rangeNavigator' in args) {\n            args.rangeNavigator.theme = formattedTheme;\n            return isGradient ? selectedTheme : args.rangeNavigator.theme;\n        }\n    }\n    if (isGradient && !args) {\n        return selectedTheme;\n    }\n};\n","index.html":"<!DOCTYPE html>\n<html>\n<head>\n    <title>Syncfusion React Sample</title>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\n    <meta name=\"author\" content=\"Syncfusion\" />\n    <link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\n</head>\n\n<body class=\"{{theme}}\">\n     <style>\n            .control-section\n            {\n                margin-top: 100px;\n            }\n    </style>\n    <div id='sample'>\n</body>\n</html>\n","index.js":"import { createRoot } from 'react-dom/client';\nimport './index.css';\n/**\n * Sample for Light Weight Range Navigator\n */\nimport * as React from \"react\";\nimport { RangeNavigatorComponent, DateTime, Inject } from '@syncfusion/ej2-react-charts';\nimport { Browser } from '@syncfusion/ej2-base';\nimport { GetDateTimeData } from './data-service';\n\nimport { loadRangeNavigatorTheme } from './theme-color';\nexport let data = GetDateTimeData(new Date(2018, 0, 1), new Date(2019, 0, 1));\nconst SAMPLE_CSS = `\n     .control-fluid {\n         padding: 0px !important;\n     }\n     .tableStyle{\n        margin-left: auto !important;\n        margin-right: auto !important;\n        margin-top: 20px !important;\n        font-family: Segoe UI;font-weight: 500; font-style:normal; font-size:15px;\n     }\n     #rangenavigator {\n         transform: translate(0, 25%);\n     }\n     #days {\n         font-family: Segoe UI;font-weight: 500; font-style:normal; font-size:15px;\n     }\n     #working{\n         width: 150px;\n     }\n     #weekend{\n         width: 150px;\n     }\n     #workingcount{\n         width: 25px;\n     }\n     #weekendcount{\n         width: 25px;\n     }\n     #holiday {\n         padding-left: 20px;\n     }\n     `;\nfunction LightWeight() {\n    return (<div className='control-pane'>\n            <style>\n                {SAMPLE_CSS}\n            </style>\n            <div className='control-section'>\n                <div className=\"row\">\n                    <div id=\"days\" style={{ textAlign: \"center\" }}>Calculate the Business and Weekend days in a period</div>\n                    <div id=\"datetime\"></div>\n                </div>\n                <div className=\"row\">\n                    <RangeNavigatorComponent id='rangenavigator' style={{ textAlign: \"center\" }} valueType='DateTime' intervalType='Months' labelFormat='MMM' height='52' navigatorStyleSettings={{\n            thumb: {\n                type: 'Rectangle'\n            },\n        }} load={load.bind(this)} width={Browser.isDevice ? '100%' : '80%'} value={[new Date('2018-06-01'), new Date('2018-07-01')]} dataSource={data} xName='x' yName='y' changed={changed.bind(this)}>\n                        <Inject services={[DateTime]}/>\n                    </RangeNavigatorComponent>\n                </div>\n                <div className=\"row\">\n                    <table className=\"tableStyle\">\n                        <tbody><tr>\n                            <td id=\"working1\">\n                                <table>\n                                    <tbody><tr>\n                                        <td id=\"working\">Total Business Days:</td>\n                                        <td id=\"workingcount\"></td>\n                                    </tr>\n                                    </tbody></table>\n                            </td>\n                            <td id=\"holiday\">\n                                <table>\n                                    <tbody><tr>\n                                        <td id=\"weekend\">Total Weekend Days: </td>\n                                        <td id=\"weekendcount\"></td>\n                                    </tr>\n                                    </tbody></table>\n                            </td>\n                        </tr>\n                        </tbody></table>\n                </div>\n            </div>\n        </div>);\n    function changed(args) {\n        let currentDate = new Date(+args.start);\n        let workingDaysCount = 0;\n        let holidaysDaysCount = 0;\n        while (currentDate <= new Date(+args.end)) {\n            if (currentDate.getDay() > 0 && currentDate.getDay() <= 5) {\n                workingDaysCount++;\n            }\n            else {\n                holidaysDaysCount++;\n            }\n            currentDate.setDate(currentDate.getDate() + 1);\n        }\n        document.getElementById('workingcount').innerHTML = ' ' + workingDaysCount;\n        document.getElementById('weekendcount').innerHTML = ' ' + holidaysDaysCount;\n    }\n    ;\n    function load(args) {\n        loadRangeNavigatorTheme(args);\n    }\n    ;\n}\nexport default LightWeight;\n\nconst root = createRoot(document.getElementById('sample'));\nroot.render(<LightWeight />);","dependencies":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-react-base\":\"*\",\"@syncfusion/ej2-charts\":\"*\",\"@syncfusion/ej2-react-charts\":\"*\",\"@syncfusion/ej2-icons\":\"*\",\"markdown-spellcheck\":\"^1.3.1\",\"@syncfusion/ej2/base\":\"*\",\"@syncfusion/ej2-charts'; // Import the necessary types from Syncfusion\":\"*\",\"@syncfusion/ej2-lists\":\"*\",\"@syncfusion/ej2-documenteditor\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-splitbuttons\":\"*\",\"@syncfusion/ej2-navigations\":\"*\",\"@syncfusion/ej2-react-popups\":\"*\",\"@syncfusion/ej2-pivotview\":\"*\",\"@syncfusion/ej2-react-progressbar\":\"*\"}"}