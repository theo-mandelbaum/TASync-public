{"index.css":"#rteCustomFormat .e-richtexteditor textarea.e-content {\n    float: left;\n}\n\n#rteCustomFormat .e-icon-btn.e-active .e-md-preview::before {\n    content: '\\e350';\n}\n\n#rteCustomFormat .e-icon-btn .e-md-preview::before {\n    content: '\\e345';\n}\n\n.bootstrap4 #rteCustomFormat .e-icon-btn.e-active .e-md-preview::before {\n    content: '\\e790';\n}\n\n.bootstrap4 #rteCustomFormat .e-icon-btn .e-md-preview::before {\n    content: '\\e787';\n}\n\n\n.tailwind #rteCustomFormat .e-icon-btn.e-active .e-md-preview::before,\n.tailwind3 #rteCustomFormat .e-icon-btn.e-active .e-md-preview::before {\n    content: '\\e748';\n}\n\n.tailwind #rteCustomFormat .e-icon-btn.e-active .e-md-preview::before,\n.tailwind-dark #rteCustomFormat .e-icon-btn.e-active .e-md-preview::before,\n.tailwind3 #rteCustomFormat .e-icon-btn.e-active .e-md-preview::before,\n.tailwind3-dark #rteCustomFormat .e-icon-btn.e-active .e-md-preview::before,\n.fluent #rteCustomFormat .e-icon-btn.e-active .e-md-preview::before,\n.fluent-dark #rteCustomFormat .e-icon-btn.e-active .e-md-preview::before,\n.fluent2 #rteCustomFormat .e-icon-btn.e-active .e-md-preview::before,\n.fluent2-dark #rteCustomFormat .e-icon-btn.e-active .e-md-preview::before,\n.fluent2-highcontrast #rteCustomFormat .e-icon-btn.e-active .e-md-preview::before,\n.bootstrap5 #rteCustomFormat .e-icon-btn.e-active .e-md-preview::before,\n.bootstrap5\\.3 #rteCustomFormat .e-icon-btn.e-active .e-md-preview::before,\n.bootstrap5\\.3-dark #rteCustomFormat .e-icon-btn.e-active .e-md-preview::before,\n.bootstrap5-dark #rteCustomFormat .e-icon-btn.e-active .e-md-preview::before,\n.material3 #rteCustomFormat .e-icon-btn.e-active .e-md-preview::before,\n.material3-dark #rteCustomFormat .e-icon-btn.e-active .e-md-preview::before {\n    content: '\\e80e';\n}\n\n.tailwind #rteCustomFormat .e-icon-btn .e-md-preview::before,\n.tailwind-dark #rteCustomFormat .e-icon-btn .e-md-preview::before,\n.tailwind3 #rteCustomFormat .e-icon-btn .e-md-preview::before,\n.tailwind3-dark #rteCustomFormat .e-icon-btn .e-md-preview::before,\n.bootstrap5 #rteCustomFormat .e-icon-btn .e-md-preview::before,\n.bootstrap5\\.3 #rteCustomFormat .e-icon-btn .e-md-preview::before,\n.bootstrap5\\.3-dark #rteCustomFormat .e-icon-btn .e-md-preview::before,\n.bootstrap5-dark #rteCustomFormat .e-icon-btn .e-md-preview::before,\n.fluent #rteCustomFormat .e-icon-btn .e-md-preview::before,\n.fluent-dark #rteCustomFormat .e-icon-btn .e-md-preview::before,\n.fluent2 #rteCustomFormat .e-icon-btn .e-md-preview::before,\n.fluent2-dark #rteCustomFormat .e-icon-btn .e-md-preview::before,\n.fluent2-highcontrast #rteCustomFormat .e-icon-btn .e-md-preview::before,\n.material3 #rteCustomFormat .e-icon-btn .e-md-preview::before,\n.material3-dark #rteCustomFormat .e-icon-btn .e-md-preview::before {\n    content: '\\e7de';\n}\n\n#rteCustomFormat .e-rte-content .e-content {\n    float: right;\n    width: 50%;\n    overflow: auto;\n    height: inherit;\n}\n\n#rteCustomFormat .e-rte-content .e-content.e-pre-source {\n    width: 100%;\n}\n\n#rteCustomFormat .e-richtexteditor .e-rte-content .e-content {\n    float: left;\n    width: 100%;\n}\n\n#rteCustomFormat .content-wrapper {\n    width: auto;\n    margin: 0;\n}\n","index.html":"<!DOCTYPE html>\n<html>\n<head>\n    <title>Syncfusion React Sample</title>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\n    <meta name=\"author\" content=\"Syncfusion\" />\n    <link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\n</head>\n\n<body class=\"{{theme}}\">\n     <style>\n            .control-section\n            {\n                margin-top: 100px;\n            }\n    </style>\n    <div id='sample'>\n</body>\n</html>\n","index.js":"import { createRoot } from 'react-dom/client';\nimport './index.css';\n/**\n * Rich Text Editor custom format sample\n */\nimport { createElement } from '@syncfusion/ej2-base';\nimport { Image, Inject, Link, MarkdownEditor, MarkdownFormatter, RichTextEditorComponent, Toolbar, Table } from '@syncfusion/ej2-react-richtexteditor';\nimport * as Marked from 'marked';\nimport * as React from 'react';\nimport { SampleBase } from './sample-base';\n\nimport { Tooltip } from '@syncfusion/ej2-react-popups';\nexport class CustomFormat extends SampleBase {\n    rteObj;\n    // set the value to Rich Text Editor\n    template = `The sample is configured with customized markdown syntax using the __formatter__ property. Type the content and click the toolbar item to view customized markdown syntax. For unordered list, you need to add a plus sign before the word (e.g., + list1). Or To make a phrase bold, you need to add two underscores before and after the phrase (e.g., __this text is bold__).`;\n    placeholder = \"Enter your text here...\";\n    // Rich Text Editor items list\n    items = ['Bold', 'Italic', 'StrikeThrough', '|',\n        'Formats', 'Blockquote', 'OrderedList', 'UnorderedList', '|',\n        {\n            template: '<button id=\"preview-code\" class=\"e-tbar-btn e-control e-btn e-icon-btn\" aria-label=\"Preview Code\">' +\n                '<span class=\"e-btn-icon e-icons e-md-preview\"></span></button>'\n        }, 'Undo', 'Redo'];\n    textArea;\n    mdsource;\n    mdPreview;\n    tooltipObj;\n    //Rich Text Editor ToolbarSettings\n    toolbarSettings = {\n        items: this.items\n    };\n    formatter = new MarkdownFormatter({\n        listTags: { 'OL': '2. ', 'UL': '+ ' },\n        formatTags: {\n            'Blockquote': '> '\n        },\n        selectionTags: { 'Bold': '__', 'Italic': '_' }\n    });\n    markdownConversion() {\n        if (this.mdsource.classList.contains('e-active')) {\n            let id = this.rteObj.getID() + 'html-view';\n            let htmlPreview = this.rteObj.element.querySelector('#' + id);\n            htmlPreview.innerHTML = Marked.marked(this.rteObj.contentModule.getEditPanel().value);\n        }\n    }\n    fullPreview() {\n        let id = this.rteObj.getID() + 'html-preview';\n        let htmlPreview = this.rteObj.element.querySelector('#' + id);\n        if (this.mdsource.classList.contains('e-active')) {\n            this.mdsource.classList.remove('e-active');\n            this.rteObj.enableToolbarItem(this.rteObj.toolbarSettings.items);\n            this.textArea.style.display = 'block';\n            this.tooltipObj.content = \"Preview\";\n            htmlPreview.style.display = 'none';\n        }\n        else {\n            this.mdsource.classList.add('e-active');\n            this.rteObj.disableToolbarItem(this.rteObj.toolbarSettings.items);\n            if (!htmlPreview) {\n                htmlPreview = createElement('div', { className: 'e-content e-pre-source' });\n                htmlPreview.id = id;\n                this.textArea.parentNode.appendChild(htmlPreview);\n            }\n            this.textArea.style.display = 'none';\n            htmlPreview.style.display = 'block';\n            this.tooltipObj.content = \"Codeview\";\n            htmlPreview.innerHTML = Marked.marked(this.rteObj.contentModule.getEditPanel().value);\n        }\n    }\n    rendereComplete() {\n        this.mdPreview = document.getElementById('MD_Preview');\n        this.textArea = this.rteObj.contentModule.getEditPanel();\n        this.textArea.addEventListener('keyup', (e) => {\n            this.markdownConversion();\n            this.rteObj.toolbarModule.baseToolbar.toolbarObj.hideItem(13, true);\n        });\n        this.mdsource = document.getElementById('preview-code');\n        this.mdsource.addEventListener('click', (e) => {\n            this.fullPreview();\n        });\n        this.tooltipObj = new Tooltip({\n            content: \"Preview\",\n            target: \"#preview-code\"\n        });\n        this.tooltipObj.appendTo(\"#preview-code\");\n    }\n    render() {\n        return (<div className='control-pane'>\n                <div className='control-section' id=\"rteCustomFormat\">\n                    <div className=\"content-wrapper\">\n                        <RichTextEditorComponent id=\"markdownRTE\" ref={(richtexteditor) => { this.rteObj = richtexteditor; }} height='260px' editorMode='Markdown' formatter={this.formatter} valueTemplate={this.template} toolbarSettings={this.toolbarSettings}>\n                            <Inject services={[MarkdownEditor, Toolbar, Image, Link, Table]}/>\n                        </RichTextEditorComponent>\n                    </div>\n                </div>\n\n            </div>);\n    }\n}\n\nconst root = createRoot(document.getElementById('sample'));\nroot.render(<CustomFormat />);","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n                this.rendereComplete();\n            });\n        }\n    }\n    export function updateSampleSection(){}\n    ","dependencies":"{\"@syncfusion/ej2-icons\":\"*\",\"markdown-spellcheck\":\"^1.3.1\",\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-react-base\":\"*\",\"@syncfusion/ej2-richtexteditor\":\"*\",\"@syncfusion/ej2-react-richtexteditor\":\"*\",\"@syncfusion/ej2-popups\":\"*\",\"@syncfusion/ej2-react-popups\":\"*\",\"@syncfusion/ej2-react-charts\":\"*\",\"@syncfusion/ej2/base\":\"*\",\"@syncfusion/ej2-charts'; // Import the necessary types from Syncfusion\":\"*\",\"@syncfusion/ej2-lists\":\"*\",\"@syncfusion/ej2-documenteditor\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-splitbuttons\":\"*\",\"@syncfusion/ej2-navigations\":\"*\",\"marked\":\"4.3.0\"}"}