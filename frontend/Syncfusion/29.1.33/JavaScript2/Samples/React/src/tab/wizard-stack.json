{"index.css":".tab-control-section .orientation-tab .e-content .e-item,\n.tab-control-section .responsive-mode .e-content .e-item {\n    font-size: 12px;\n    padding: 10px;\n    text-align: justify;\n}\n.tab-control-section  .e-headertext {\n    font-weight: 500;\n}\n.e-bigger .tab-control-section .e-tab .e-list-item {\n    border-bottom: 1px solid gainsboro;\n}\n.tab-control-section  .e-tab .e-list-item {\n    height: 63px;\n    border-bottom: 1px solid gainsboro;\n}\n.tab-control-section  .e-tab .e-list-item:last-child {\n    border-bottom: 1px solid gainsboro;\n}\n.e-bigger .tab-control-section  .e-tab .e-list-item {\n    height: 63px;\n}\n.tab-control-section .template-container {\n    height: 100%;\n    padding-top: 7px;\n}\n.tab-control-section .left {\n    display: inline-block;\n    vertical-align: top;\n}\n.tab-control-section .empImg {\n    height: 48px;\n    width: 48px;\n}\n.tab-control-section .name, .role {\n    line-height: normal;\n}\n.tab-control-section .name {\n    font-weight: 500;\n}\n.tab-control-section .role {\n    color: grey;\n    font-weight: 100;\n}\n.tab-control-section .info-div {\n    padding: 7px 15px 0 15px;\n}\n.tab-control-section .content-title {\n    height: 50px;\n    display: table;\n    margin: 0 auto;\n}\n.tab-control-section .cnt-text {\n    vertical-align: middle;\n    display: table-cell;\n    font-size: 18px;\n    font-weight: 600;\n}\n.tab-control-section .e-tab .e-listview .e-text {\n    display: block;\n    text-align: center;\n}\n\n/* custom code start*/\n.tab-control-section .property-panel-content {\n    padding: 10px;\n}\n@media only screen and (min-width: 1824px) {\n    .tab-control-section .col-lg-8.adaptive {\n        width: 40%;\n    }\n    .e-bigger .tab-control-section .col-lg-8.adaptive {\n        width: 45%;\n    }\n}\n\n/* custom code end*/\n\n#amount {\n    text-align: right;\n    font-size: 15px;\n    padding: 15px 0px;\n}\n\n#passenger-table th {\n    text-align: center;\n    font-size: 14px;\n    font-weight: 400;\n    border: 1px solid gainsboro;\n}\n\n#passenger-table td,\n#passenger-table th {\n    padding: 10px;\n}\n\n#passenger-table td {\n    border: 1px solid gainsboro;\n}\n\n.name-header {\n    width: 200px;\n}\n\n.age-header {\n    width: 80px;\n}\n\n.gender-header {\n    width: 120px;\n}\n\n.type-header {\n    width: 150px;\n}\n\n.btn-container {\n    text-align: center;\n}\n\n.search-item {\n    padding-right: 50px;\n    padding-bottom: 20px;\n}\n\n.item-title {\n    font-weight: 500;\n    padding-top: 10px;\n}\n\n@media (max-width: 450px) {\n    .tab-control-resize-container {\n        height: 500px;\n    }\n    .responsive-align {\n        width: 75%;\n        margin: 0 auto;\n    }\n    .search-item {\n        padding: 0 0 20px 0;\n        width: 100%;\n    }\n}\n\n#err1,\n#err2,\n#err3 {\n    font-weight: bold;\n    color: red;\n    display: block;\n    margin-top: 15px;\n}\n\n.wizard-title {\n    font-size: 15px;\n}\n\n#PassengersList {\n    overflow: auto;\n}\n#passenger-table {\n    min-width: 500px;\n    width: 100%;\n}\n.tab-control-section .orientation-tab .e-listview:not(.e-list-template) .e-list-item {\n    height: 63px;\n    padding: 0 16px !important;\n}\n\n.orientation-tab .e-content .e-item.e-active,\n.orientation-tab .e-content .e-item.e-active ul.e-list-parent {\n    width: 100%;\n}\n\n#tab-wizard .e-content .e-item {\n    font-size: 12px;\n    margin: 10px;\n}\n\n#bookTickets, #confirmTickets, #makePayment {\n    margin-left: 4px;\n}\n\n#draggableTab .e-content .e-item {\n    font-size: 12px;\n    padding: 10px;\n    text-align: justify;\n}\n#draggableTab .e-upload {\n    width: 300px;\n}\n#TabContainer .property-panel-header {\n    text-align: center;\n    padding-bottom: 0;\n}\n.treeview-external-drag-tab .e-list-item,\n.e-bigger .treeview-external-drag-tab .e-list-item {\n    border: 0.5px solid #E1E7EC;\n    line-height: 15px;\n    padding: 0 5px;\n}\n.treeview-external-drag-tab.e-treeview .e-ul  {\n    padding: unset;\n}\n#TabContainer {\n    display: flex;\n}\n@media (max-width: 550px) {\n    #TabContainer {\n        display: block;\n    }\n}\n.key-class {\n    display: inline-block;\n    width: 130px;\n}\n@media only screen and (min-width: 1824px) {\n    .tab-control-resize-container {\n        width: 560px;\n    }\n\n    .e-bigger .tab-control-resize-container {\n        width: 75%;\n    }\n}\n@media screen and (max-width: 425px) {\n    .responsive-mode {\n        overflow: hidden;\n    }\n\n    .responsive-mode .e-item.e-active {\n        overflow: scroll;\n    }\n}\n","index.html":"<!DOCTYPE html>\n<html>\n<head>\n    <title>Syncfusion React Sample</title>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\n    <meta name=\"author\" content=\"Syncfusion\" />\n    <link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\n</head>\n\n<body class=\"{{theme}}\">\n     <style>\n            .control-section\n            {\n                margin-top: 100px;\n            }\n    </style>\n    <div id='sample'>\n</body>\n</html>\n","index.js":"import { createRoot } from 'react-dom/client';\nimport './index.css';\nimport * as React from 'react';\nimport { DialogComponent } from '@syncfusion/ej2-react-popups';\nimport { DatePickerComponent } from '@syncfusion/ej2-react-calendars';\nimport { NumericTextBoxComponent } from '@syncfusion/ej2-react-inputs';\nimport { DropDownListComponent } from '@syncfusion/ej2-react-dropdowns';\nimport { TabComponent, TabItemDirective, TabItemsDirective } from '@syncfusion/ej2-react-navigations';\nimport { GridComponent, ColumnsDirective, ColumnDirective } from '@syncfusion/ej2-react-grids';\nimport { SampleBase } from './sample-base';\n\n/**\n *  Tab Wizard sample\n */\n// tslint:disable:max-line-length\nexport class Wizard extends SampleBase {\n    alertDlg;\n    tab;\n    ticketDetailGrid;\n    pass_gender3;\n    pass_gender2;\n    listObj;\n    pass_gender1;\n    pass_berth1;\n    pass_berth2;\n    pass_berth3;\n    pass_age1;\n    availTrainGrid;\n    ticketType;\n    journeyDate;\n    endPoint;\n    startPoint;\n    today = new Date();\n    selectedTrain;\n    dlgTarget = document.querySelector('.sb-content-tab.e-tab .e-content.sb-sample-content-area');\n    dateMin = new Date(this.today.getTime());\n    dateMax = new Date(this.today.getTime() + 60 * 24 * 60 * 60 * 1000);\n    fields = { id: \"id\", text: \"text\", value: \"text\" };\n    autoCompleteFields = { text: 'name', value: 'name' };\n    dateValue = new Date();\n    result = [];\n    reserved = [];\n    amountDetails;\n    headerText = [\n        { \"text\": \"New Booking\" },\n        { \"text\": \"Train List\" },\n        { \"text\": \"Add Passenger\" },\n        { \"text\": \"Make Payment\" }\n    ];\n    quotas = [\n        { id: \"1\", text: \"Business Class\" },\n        { id: \"2\", text: \"Economy Class\" },\n        { id: \"4\", text: \"Common Class\" }\n    ];\n    gender = [\n        { id: \"1\", text: \"Male\" },\n        { id: \"2\", text: \"Female\" }\n    ];\n    berths = [\n        { id: \"1\", text: \"Upper\" },\n        { id: \"2\", text: \"Lower\" },\n        { id: \"3\", text: \"Middle\" },\n        { id: \"4\", text: \"Window\" },\n        { id: \"5\", text: \"Aisle\" }\n    ];\n    cities = [\n        { name: 'Chicago', fare: 300 },\n        { name: 'San Francisco', fare: 125 },\n        { name: 'Los Angeles', fare: 175 },\n        { name: 'Seattle', fare: 250 },\n        { name: 'Florida', fare: 150 }\n    ];\n    dlgButtons = [{\n            buttonModel: { content: \"OK\", isPrimary: true },\n            click: (() => {\n                this.alertDlg.hide();\n                this.reserved = [];\n                this.tab.enableTab(0, true);\n                this.tab.enableTab(1, false);\n                this.tab.enableTab(2, false);\n                this.tab.enableTab(3, false);\n                this.tab.select(0);\n            })\n        }];\n    dlgCreated() {\n        let proxy = this.alertDlg;\n        proxy.hide();\n    }\n    focusIn() {\n        const proxy = this.journeyDate;\n        proxy.show();\n    }\n    tabSelecting(e) {\n        if (e.isSwiped) {\n            e.cancel = true;\n        }\n    }\n    trainSelected(args) {\n        this.selectedTrain = args.data;\n    }\n    removeItem() {\n        let tabItems = this.tab.element.querySelectorAll('.e-item');\n        tabItems.forEach((item, index) => {\n            if (index > 0) {\n                item.remove();\n            }\n        });\n    }\n    btnClicked(e) {\n        switch (e.target.id) {\n            case \"searchNext\":\n                /* Validate the Source, Destination, Date and Class chosen and proceed only if all the fields are selected */\n                if (this.startPoint.value != null && this.endPoint.value != null &&\n                    this.ticketType.value != null && this.journeyDate.value != null) {\n                    if (this.startPoint.value && this.startPoint.value === this.endPoint.value) {\n                        document.getElementById(\"err1\").innerText = \"* Arrival point can't be same as Departure\";\n                    }\n                    else {\n                        this.removeItem();\n                        this.tab.enableTab(1, true);\n                        this.tab.enableTab(0, false);\n                        this.filterTrains(e);\n                        document.getElementById(\"err1\").innerText = \"\";\n                        if (document.getElementById(\"err2\")) {\n                            document.getElementById(\"err2\").innerText = \"\";\n                        }\n                    }\n                }\n                else {\n                    document.getElementById(\"err1\").innerText = \"* Please fill all the details before proceeding\";\n                }\n                break;\n            case \"bookTickets\":\n                /* Based on the selected station generate Grid content to display trains available */\n                if (this.availTrainGrid.getSelectedRecords() === undefined || this.availTrainGrid.getSelectedRecords().length === 0) {\n                    document.getElementById(\"err2\").innerText = \"* Select your convenient train\";\n                }\n                else {\n                    this.tab.enableTab(2, true);\n                    this.tab.enableTab(1, false);\n                    document.getElementById(\"err2\").innerText = \"\";\n                }\n                break;\n            case \"confirmTickets\":\n                /* Get the Passenger details and validate the fields must not be left empty */\n                let name = document.getElementById(\"pass_name1\");\n                let age = this.pass_age1.value;\n                let gender = this.pass_gender1.value;\n                if (name.value === \"\" || age === \"\" || gender === \"\") {\n                    document.getElementById(\"err3\").innerText = \"* Please enter passenger details\";\n                }\n                else {\n                    this.reserved = [];\n                    let paymentTab = this.tab.element.querySelectorAll('.e-item')[3];\n                    if (paymentTab) {\n                        paymentTab.remove();\n                    }\n                    this.tab.enableTab(3, true);\n                    this.tab.enableTab(2, false);\n                    document.getElementById(\"err3\").innerText = \"\";\n                    this.finalizeDetails(e);\n                }\n                break;\n            case \"makePayment\":\n                this.alertDlg.show();\n                break;\n            case \"goToSearch\":\n                /* Go back to change class, date or boarding places */\n                this.selectedTrain = [];\n                this.tab.enableTab(0, true);\n                this.tab.select(0);\n                this.tab.enableTab(1, false);\n                break;\n            case \"goBackToBook\":\n                /* Change the preferred train chosen already */\n                this.tab.enableTab(1, true);\n                this.tab.select(1);\n                this.tab.enableTab(2, false);\n                break;\n            case \"goBackDetails\":\n                /* Update passenger detail before confirming the payment */\n                this.tab.enableTab(2, true);\n                this.tab.select(2);\n                this.tab.enableTab(3, false);\n                break;\n        }\n    }\n    filterTrains(args) {\n        /* Generating trains based on source and destination chosen */\n        let fromCity = this.startPoint.value;\n        let toCity = this.endPoint.value;\n        let count = Math.floor((Math.random() * 3) + 2);\n        this.result = [];\n        for (let i = 0; i < count; i++) {\n            let details = {};\n            details[\"TrainNo\"] = Math.floor((Math.random() * 20) + 19000);\n            details[\"Name\"] = \"Train \" + i;\n            details[\"Departure\"] = fromCity;\n            details[\"Arrival\"] = toCity;\n            details[\"Availability\"] = Math.floor((Math.random() * 20) + 20);\n            this.result.push(details);\n        }\n    }\n    availableTrainGridcreated() {\n        this.availTrainGrid.dataSource = this.result;\n    }\n    finalizeDetails(args) {\n        /* Get the passenger details and update table with name and other details for confirmation */\n        let passCount = 0;\n        let name1 = document.getElementById(\"pass_name1\");\n        let name2 = document.getElementById(\"pass_name2\");\n        let name3 = document.getElementById(\"pass_name3\");\n        for (let i = 1; i <= 3; i++) {\n            if (name1.value !== \"\") {\n                let details = {};\n                let gender = ((i === 1) ? this.pass_gender1.value : (i === 2) ? this.pass_gender2.value : this.pass_gender3.value);\n                let berth = ((i === 1) ? this.pass_berth1.value : (i === 2) ? this.pass_berth2.value : this.pass_berth3.value);\n                details[\"TrainNo\"] = this.selectedTrain.TrainNo.toString();\n                details[\"PassName\"] = (i === 1) ? name1.value : (i === 2) ? name2.value : name3.value;\n                details[\"Gender\"] = (gender === \"\") ? \"Male\" : gender;\n                details[\"Berth\"] = (berth === null) ? 'Any' : berth;\n                if (details[\"PassName\"] !== \"\") {\n                    this.reserved.push(details);\n                }\n                passCount++;\n            }\n            let calcFare = 0;\n            for (let i in this.cities) {\n                if (this.startPoint.value == this.cities[i].name)\n                    calcFare = calcFare + this.cities[i].fare;\n                if (this.endPoint.value == this.cities[i].name)\n                    calcFare = calcFare + this.cities[i].fare;\n            }\n            if (this.ticketType.value === 'Economy Class') {\n                this.amountDetails = \"Total payable amount: $\" + passCount * (300 + calcFare);\n            }\n            else if (this.ticketType.value === 'Business Class') {\n                this.amountDetails = \"Total payable amount: $\" + passCount * (500 + calcFare);\n            }\n            else if (this.ticketType.value === 'Common Class') {\n                this.amountDetails = \"Total payable amount: $\" + passCount * (150 + calcFare);\n            }\n        }\n    }\n    ticketDetailGridcreated() {\n        this.ticketDetailGrid.dataSource = this.reserved;\n    }\n    content0() {\n        return (<div id=\"booking\">\n    <div className=\"wizard-title\">Plan your journey</div>\n    <div className=\"responsive-align\">\n      <div className=\"row\">\n        <div className=\"col-xs-6 col-sm-6 col-lg-6 col-md-6 search-item\">\n          <DropDownListComponent ref={dropdownlist => { this.startPoint = dropdownlist; }} width=\"100%\" dataSource={this.cities} fields={this.autoCompleteFields} placeholder=\"From\" floatLabelType=\"Auto\"/>\n        </div>\n        <div className=\"col-xs-6 col-sm-6 col-lg-6 col-md-6 search-item\">\n          <DropDownListComponent ref={dropdownlist => { this.endPoint = dropdownlist; }} width=\"100%\" dataSource={this.cities} fields={this.autoCompleteFields} placeholder=\"To\" floatLabelType=\"Auto\"/>\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col-xs-6 col-sm-6 col-lg-6 col-md-6 search-item\">\n          <DatePickerComponent ref={calendar => (this.journeyDate = calendar)} width=\"100%\" placeholder=\"Journey Date\" floatLabelType=\"Auto\" value={this.today} min={this.dateMin} max={this.dateMax} focus={this.focusIn.bind(this)}/>\n        </div>\n        <div className=\"col-xs-6 col-sm-6 col-lg-6 col-md-6 search-item\">\n          <DropDownListComponent ref={dropdownlist => (this.ticketType = dropdownlist)} dataSource={this.quotas} placeholder=\"Ticket type\" floatLabelType=\"Auto\" fields={this.fields}/>\n        </div>\n      </div>\n      <div className=\"btn-container\">\n        <button id=\"searchNext\" className=\"e-btn\" onClick={this.btnClicked.bind(this)}>\n          Search Train\n        </button>\n      </div>\n      <span id=\"err1\"/>\n    </div>\n  </div>);\n    }\n    content1() {\n        return (<div id=\"selectTrain\">\n    <div className=\"wizard-title\">Select the train from the list </div>\n    <GridComponent ref={grid => (this.availTrainGrid = grid)} width=\"100%\" rowSelected={this.trainSelected.bind(this)} created={this.availableTrainGridcreated.bind(this)}>\n      <ColumnsDirective>\n        <ColumnDirective field=\"TrainNo\" headerText=\"Train No\" width={120} type=\"number\"/>\n        <ColumnDirective field=\"Name\" headerText=\"Name\" width={140}/>\n        <ColumnDirective field=\"Departure\" headerText=\"Departure\" width={120}/>\n        <ColumnDirective field=\"Arrival\" headerText=\"Arrival\" width={140}/>\n        <ColumnDirective field=\"Availability\" headerText=\"Availability\" width={140} type=\"number\"/>\n      </ColumnsDirective>\n    </GridComponent>\n    <br />\n    <div className=\"btn-container\">\n      <button id=\"goToSearch\" className=\"e-btn\" onClick={this.btnClicked.bind(this)}>\n        Back\n      </button>\n      <button id=\"bookTickets\" className=\"e-btn\" onClick={this.btnClicked.bind(this)}>\n        Continue\n      </button>\n    </div>\n    <span id=\"err2\"/>\n  </div>);\n    }\n    content2() {\n        return (<div id=\"details\">\n    <div className=\"details-page wizard-title\">\n      Enter the passenger details\n    </div>\n    <div id=\"PassengersList\">\n      <table id=\"passenger-table\">\n        <colgroup>\n          <col />\n          <col />\n          <col />\n          <col />\n          <col />\n          <col />\n        </colgroup>\n        <thead>\n          <tr>\n            <th className=\"name-header\">Name</th>\n            <th className=\"age-header\">Age</th>\n            <th className=\"gender-header\">Gender</th>\n            <th className=\"type-header\">Berth Preference</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <td>\n              <input className=\"e-input\" id=\"pass_name1\" type=\"text\" placeholder=\"Passenger Name\"/>\n            </td>\n            <td>\n              <NumericTextBoxComponent ref={numerictextbox => { this.pass_age1 = numerictextbox; }} showSpinButton={false} min={1} max={100} value={18} format=\"n0\"/>\n            </td>\n            <td>\n              <DropDownListComponent ref={dropdownlist => { this.pass_gender1 = dropdownlist; }} dataSource={this.gender} text=\"Male\" fields={this.fields}/>\n            </td>\n            <td>\n              <DropDownListComponent ref={dropdownlist => { this.pass_berth1 = dropdownlist; }} dataSource={this.berths} placeholder=\"Optional\" fields={this.fields}/>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <input id=\"pass_name2\" className=\"e-input\" type=\"text\" placeholder=\"Passenger Name\"/>\n            </td>\n            <td>\n              <NumericTextBoxComponent showSpinButton={false} min={1} max={100} value={18} format=\"n0\"/>\n            </td>\n            <td>\n              <DropDownListComponent ref={dropdownlist => { this.pass_gender2 = dropdownlist; }} dataSource={this.gender} text=\"Male\" fields={this.fields}/>\n            </td>\n            <td>\n              <DropDownListComponent ref={dropdownlist => { this.pass_berth2 = dropdownlist; }} dataSource={this.berths} placeholder=\"Optional\" fields={this.fields}/>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <input id=\"pass_name3\" className=\"e-input\" type=\"text\" placeholder=\"Passenger Name\"/>\n            </td>\n            <td>\n              <NumericTextBoxComponent showSpinButton={false} min={1} max={100} value={18} format=\"n0\"/>\n            </td>\n            <td>\n              <DropDownListComponent ref={dropdownlist => { this.pass_gender3 = dropdownlist; }} dataSource={this.gender} text=\"Male\" fields={this.fields}/>\n            </td>\n            <td>\n              <DropDownListComponent ref={dropdownlist => { this.pass_berth3 = dropdownlist; }} dataSource={this.berths} placeholder=\"Optional\" fields={this.fields}/>\n            </td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n    <br />\n    <div className=\"btn-container\">\n      <button id=\"goBackToBook\" className=\"e-btn\" onClick={this.btnClicked.bind(this)}>\n        Back\n      </button>\n      <button id=\"confirmTickets\" className=\"e-btn\" onClick={this.btnClicked.bind(this)}>\n        Continue\n      </button>\n    </div>\n    <span id=\"err3\"/>\n  </div>);\n    }\n    content3() {\n        return (<div id=\"confirm\">\n    <div className=\"tab-title1 wizard-title\">\n      Confirm the details and proceed\n    </div>\n    <GridComponent ref={grid => (this.ticketDetailGrid = grid)} width=\"100%\" created={this.ticketDetailGridcreated.bind(this)}>\n      <ColumnsDirective>\n        <ColumnDirective field=\"TrainNo\" headerText=\"Train No\" width={120} type=\"number\"/>\n        <ColumnDirective field=\"PassName\" headerText=\"Name\" width={140}/>\n        <ColumnDirective field=\"Gender\" headerText=\"Gender\" width={120}/>\n        <ColumnDirective field=\"Berth\" headerText=\"Berth\" width={140}/>\n      </ColumnsDirective>\n    </GridComponent>\n    <br />\n    <div id=\"amount\">{this.amountDetails}</div>\n    <br />\n    <div className=\"btn-container\">\n      <button id=\"goBackDetails\" className=\"e-btn\" onClick={this.btnClicked.bind(this)}>\n        Back\n      </button>\n      <button id=\"makePayment\" className=\"e-btn\" onClick={this.btnClicked.bind(this)}>\n        Pay\n      </button>\n    </div>\n  </div>);\n    }\n    render() {\n        return (<div>\n        <div className=\"col-lg-12 control-section e-tab-section\">\n          <div className=\"e-sample-resize-container\">\n            <TabComponent id=\"tab-wizard\" ref={tab => (this.tab = tab)} heightAdjustMode=\"None\" height={'auto'} selecting={this.tabSelecting.bind(this)}>\n              <TabItemsDirective>\n                <TabItemDirective header={this.headerText[0]} content={this.content0.bind(this)}/>\n                <TabItemDirective header={this.headerText[1]} content={this.content1.bind(this)} disabled={true}/>\n                <TabItemDirective header={this.headerText[2]} content={this.content2.bind(this)} disabled={true}/>\n                <TabItemDirective header={this.headerText[3]} content={this.content3.bind(this)} disabled={true}/>\n              </TabItemsDirective>\n            </TabComponent>\n            <DialogComponent ref={dialog => (this.alertDlg = dialog)} header=\"Success\" width={250} isModal={true} visible={false} showCloseIcon={true} content=\"Your payment was successfully processed\" target={this.dlgTarget} buttons={this.dlgButtons} created={this.dlgCreated.bind(this)}/>\n          </div>\n        </div>\n      </div>);\n    }\n}\n\nconst root = createRoot(document.getElementById('sample'));\nroot.render(<Wizard />);","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n                this.rendereComplete();\n            });\n        }\n    }\n    export function updateSampleSection(){}\n    ","dependencies":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-react-base\":\"*\",\"@syncfusion/ej2-popups\":\"*\",\"@syncfusion/ej2-react-popups\":\"*\",\"@syncfusion/ej2-calendars\":\"*\",\"@syncfusion/ej2-react-calendars\":\"*\",\"@syncfusion/ej2-inputs\":\"*\",\"@syncfusion/ej2-react-inputs\":\"*\",\"@syncfusion/ej2-dropdowns\":\"*\",\"@syncfusion/ej2-react-dropdowns\":\"*\",\"@syncfusion/ej2-navigations\":\"*\",\"@syncfusion/ej2-react-navigations\":\"*\",\"@syncfusion/ej2-grids\":\"*\",\"@syncfusion/ej2-react-grids\":\"*\",\"@syncfusion/ej2-react-charts\":\"*\",\"@syncfusion/ej2/base\":\"*\",\"@syncfusion/ej2-charts'; // Import the necessary types from Syncfusion\":\"*\",\"@syncfusion/ej2-lists\":\"*\",\"@syncfusion/ej2-documenteditor\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-splitbuttons\":\"*\",\"@syncfusion/ej2-pivotview\":\"*\",\"@syncfusion/ej2-react-progressbar\":\"*\",\"@syncfusion/ej2-schedule\":\"*\",\"@syncfusion/ej2-data\":\"*\"}"}