{"index.css":".e-img-editor-profile,\r\n.e-img-editor-sample .control-wrapper {\r\n    position: relative;\r\n}\r\n\r\n.e-img-editor-profile .e-profile {\r\n    width: 200px;\r\n    height: 200px;\r\n    position: absolute;\r\n    left: 50%;\r\n    -webkit-transform: translate(-50%, 30%);\r\n    transform: translate(-50%, 30%);\r\n    border-radius: 50%;\r\n}\r\n\r\n.e-custom-wrapper {\r\n    position: relative;\r\n}\r\n\r\n.e-custom-edit {\r\n    position: absolute;\r\n    width: 36px;\r\n    height: 36px;\r\n    border-radius: 50%;\r\n    background-color: blue;\r\n    top: calc(100% - 54px);\r\n    left: calc(100% - 47px);\r\n}\r\n\r\n#custom-edit .e-custom-icon::before {\r\n    content: '\\e911';\r\n    font-size: 28px;\r\n    color: white;\r\n    left: 5px;\r\n    top: 4px;\r\n    line-height: initial;\r\n    position: absolute;\r\n}\r\n\r\n.tailwind .e-custom-icon::before,\r\n.tailwind-dark .e-custom-icon::before {\r\n    top: 6px;\r\n}\r\n\r\n#custom-edit:hover {\r\n    cursor: pointer;\r\n}\r\n\r\ncanvas#img-canvas {\r\n    border-radius: 50%;\r\n    border: 4px solid darkgrey;\r\n    max-width: 200px; \r\n    max-height: 200px;\r\n}\r\n\r\n.e-img-custom-open {\r\n    float: left;\r\n    margin-left: 0 !important;\r\n}\r\n\r\n.e-img-custom-reset {\r\n    float: left;\r\n}\r\n\r\n.e-profile .e-custom-img,\r\n.e-profile .e-custom-file {\r\n    display: none;\r\n}\r\n\r\n.e-bigger #profile-dialog .e-dlg-header {\r\n    font-size: 18px !important;\r\n}\r\n\r\n#profile-dialog .e-dlg-content > div {\r\n    height: 100%;\r\n    width: 100%;\r\n}\r\n\r\n.control-section.e-img-editor-profile {\r\n    min-height: 350px !important;\r\n}\r\n\r\n.highcontrast .e-custom-img-btn,\r\n.fabric .e-custom-img-btn,\r\n.fabric-dark .e-custom-img-btn {\r\n\tpadding: 2px 10px !important;\r\n}\r\n\r\n.e-bigger .e-custom-img-btn {\r\n\tfont-size: 14px !important;\r\n\tpadding: 6px 10px !important;\r\n}\r\n\r\n.e-bigger.highcontrast .e-custom-img-btn,\r\n.e-bigger.fabric .e-custom-img-btn,\r\n.e-bigger.fabric-dark .e-custom-img-btn,\r\n.e-bigger.material .e-custom-img-btn,\r\n.e-bigger.material-dark .e-custom-img-btn {\r\n\tpadding: 3px 10px !important;\r\n}\r\n.e-bigger.bootstrap .e-custom-img-btn,\r\n.e-bigger.bootstrap-dark .e-custom-img-btn {\r\n\tpadding: 1px 10px !important;\r\n}\r\n\r\n.e-img-editor-profile .e-hide {\r\n        display: none;\r\n}\r\n\r\n.material3 .e-custom-img-btn,\r\n.material3-dark .e-custom-img-btn,\r\n.e-bigger.material3 .e-custom-img-btn,\r\n.e-bigger.material3-dark .e-custom-img-btn\r\n{ \r\n    margin-left: 3px !important;\r\n}\r\n","index.html":"<!DOCTYPE html>\n<html>\n<head>\n    <title>Syncfusion React Sample</title>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\n    <meta name=\"author\" content=\"Syncfusion\" />\n    <link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\n</head>\n\n<body class=\"{{theme}}\">\n     <style>\n            .control-section\n            {\n                margin-top: 100px;\n            }\n    </style>\n    <div id='sample'>\n</body>\n</html>\n","index.js":"import { createRoot } from 'react-dom/client';\nimport './index.css';\nimport * as React from 'react';\nimport { useEffect, useRef } from 'react';\nimport { createElement } from '@syncfusion/ej2-base';\nimport { ImageEditorComponent } from '@syncfusion/ej2-react-image-editor';\nimport { DialogComponent } from '@syncfusion/ej2-react-popups';\n\n\nconst ProfilePicture = () => {\n    let animationSettings = { effect: \"None\" };\n    let dialogInstance = useRef(null);\n    let imageEditorInstance = useRef(null);\n    let imageUpload = useRef(null);\n    let imageCanvas = useRef(null);\n    let customImage = useRef(null);\n    let profile = useRef(null);\n    let imgSrc = \"\";\n    const fileChanged = (args) => {\n        const URL = window.URL;\n        const url = URL.createObjectURL(args.target.files[0]);\n        imageEditorInstance.current.open(url.toString());\n        imageUpload.current.value = null;\n        imgSrc = url.toString();\n    };\n    const handleImageLoaded = () => {\n        if (imgSrc === \"\") {\n            let ctx = imageCanvas.current.getContext(\"2d\");\n            imageCanvas.current.width =\n                customImage.current.width < customImage.current.height\n                    ? customImage.current.width\n                    : customImage.current.height;\n            imageCanvas.current.height = imageCanvas.current.width;\n            ctx.drawImage(customImage.current, 0, 0, imageCanvas.current.width, imageCanvas.current.height);\n            document.querySelector(\".e-profile\").classList.remove(\"e-hide\");\n        }\n    };\n    const dlgOpenButtonClick = () => {\n        imageUpload.current.click();\n    };\n    const dlgResetButtonClick = () => {\n        imageEditorInstance.current.reset();\n    };\n    const dlgRotateButtonClick = () => {\n        imageEditorInstance.current.rotate(-90);\n    };\n    const dlgDoneButtonClick = () => {\n        imageEditorInstance.current.crop();\n        let croppedData = imageEditorInstance.current.getImageData();\n        let ctx = imageCanvas.current.getContext(\"2d\");\n        let tempCanvas = profile.current.appendChild(createElement(\"canvas\"));\n        let tempContext = tempCanvas.getContext(\"2d\");\n        tempCanvas.width = croppedData.width;\n        tempCanvas.height = croppedData.height;\n        tempContext.putImageData(croppedData, 0, 0);\n        ctx.clearRect(0, 0, imageCanvas.current.width, imageCanvas.current.height);\n        ctx.drawImage(tempCanvas, 0, 0, imageCanvas.current.width, imageCanvas.current.height);\n        tempCanvas.remove();\n        profile.current.style.borderRadius = \"100%\";\n        imageCanvas.current.style.backgroundColor = \"#fff\";\n        dialogInstance.current.hide();\n        if (imgSrc !== \"\") {\n            customImage.current.src = imgSrc;\n        }\n    };\n    const contentTemplate = () => {\n        return (<ImageEditorComponent ref={imageEditorInstance} toolbar={[]} fileOpened={fileOpened} created={created}></ImageEditorComponent>);\n    };\n    const fileOpened = () => {\n        imageEditorInstance.current.select(\"circle\");\n    };\n    const created = () => {\n        if (imageEditorInstance.current.theme &&\n            window.location.href.split(\"#\")[1]) {\n            imageEditorInstance.current.theme = window.location.href\n                .split(\"#\")[1]\n                .split(\"/\")[1];\n        }\n    };\n    const editClicked = () => {\n        dialogInstance.current.show();\n        imageEditorInstance.current.open(customImage.current.src);\n    };\n    let buttons = [\n        {\n            click: dlgOpenButtonClick,\n            buttonModel: {\n                content: \"Open\",\n                cssClass: \"e-custom-img-btn e-img-custom-open\",\n            },\n        },\n        {\n            click: dlgResetButtonClick,\n            buttonModel: {\n                content: \"Reset\",\n                cssClass: \"e-custom-img-btn e-img-custom-reset\",\n            },\n        },\n        {\n            click: dlgRotateButtonClick,\n            buttonModel: {\n                content: \"Rotate\",\n                cssClass: \"e-custom-img-btn e-img-custom-rotate\",\n            },\n        },\n        {\n            click: dlgDoneButtonClick,\n            buttonModel: {\n                content: \"Apply\",\n                cssClass: \"e-custom-img-btn e-img-custom-apply\",\n                isPrimary: true,\n            },\n        },\n    ];\n    return (<div className=\"control-pane\">\n            <div className=\"col-lg-12 control-section e-img-editor-profile\">\n                <div className=\"e-profile e-hide\" ref={profile}>\n                    <div className=\"e-custom-wrapper\">\n                        <canvas id=\"img-canvas\" ref={imageCanvas}></canvas>\n                        <img alt=\"img\" className=\"e-custom-img\" id=\"custom-img\" onLoad={handleImageLoaded} src=\"https://ej2.syncfusion.com/react/demos/src/image-editor/images/profile.png\" ref={customImage}/>\n                        <input type=\"file\" id=\"img-upload\" className=\"e-custom-file\" onChange={fileChanged} ref={imageUpload}/>\n                        <span id=\"custom-edit\" className=\"e-custom-edit\" onClick={editClicked}>\n                            <span className=\"e-custom-icon sb-icons\"></span>\n                        </span>\n                    </div>\n                </div>\n            </div>\n            <div id=\"profile-dialog\">\n                <DialogComponent id=\"profile-dialog\" showCloseIcon={true} animationSettings={animationSettings} closeOnEscape={true} visible={false} width={\"340px\"} height={\"420px\"} ref={dialogInstance} target=\".e-img-editor-profile\" header=\"Edit Profile Image\" buttons={buttons} content={contentTemplate} position={{ X: \"center\", Y: 100 }}></DialogComponent>\n            </div>\n        </div>);\n};\nexport default ProfilePicture;\n\nconst root = createRoot(document.getElementById('sample'));\nroot.render(<ProfilePicture />);","dependencies":"{\"@syncfusion/ej2-icons\":\"*\",\"markdown-spellcheck\":\"^1.3.1\",\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-react-base\":\"*\",\"@syncfusion/ej2-image-editor\":\"*\",\"@syncfusion/ej2-react-image-editor\":\"*\",\"@syncfusion/ej2-popups\":\"*\",\"@syncfusion/ej2-react-popups\":\"*\",\"@syncfusion/ej2-react-charts\":\"*\",\"@syncfusion/ej2/base\":\"*\",\"@syncfusion/ej2-charts'; // Import the necessary types from Syncfusion\":\"*\",\"@syncfusion/ej2-lists\":\"*\",\"@syncfusion/ej2-documenteditor\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-splitbuttons\":\"*\",\"@syncfusion/ej2-navigations\":\"*\"}"}