{"index.css":".e-image-editor {\n    margin: 0 auto;\n}\n    \n.e-img-editor-sample {\n    height: 80vh;\n    width: 100%;\n    margin-top: 18px;\n}\n\n.control-wrapper {\n    height: 100%;\n}\n\n.e-img-editor-numeric-textbox-container, .e-img-editor-dropdown-container {\n    display: inline-block;\n    margin-right: 30px;\n    text-align: left;\n}\n\n.e-img-editor-dropdown-container #dropdownbtn {\n    font-weight: 400;\n}\n\n@media only screen and (max-width: 700px) {\n    .e-img-editor-sample {\n        height: 75vh;\n        width: 100%;\n    }\n\n    .e-img-editor-dropdown-container,\n    .e-img-editor-numeric-textbox-container {\n        display: block;\n        margin-right: 0;\n        margin-bottom: 20px;\n        text-align: center;\n    }\n}","index.html":"<!DOCTYPE html>\n<html>\n<head>\n    <title>Syncfusion React Sample</title>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\n    <meta name=\"author\" content=\"Syncfusion\" />\n    <link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\n</head>\n\n<body class=\"{{theme}}\">\n     <style>\n            .control-section\n            {\n                margin-top: 100px;\n            }\n    </style>\n    <div id='sample'>\n</body>\n</html>\n","index.js":"import { createRoot } from 'react-dom/client';\nimport './index.css';\nimport * as React from 'react';\nimport { useEffect, useRef, useState } from 'react';\nimport { ImageEditorComponent } from '@syncfusion/ej2-react-image-editor';\nimport { MultiSelectComponent, CheckBoxSelection } from '@syncfusion/ej2-react-dropdowns';\nimport { DropDownButtonComponent } from '@syncfusion/ej2-react-splitbuttons';\nimport { NumericTextBoxComponent } from '@syncfusion/ej2-react-inputs';\n\n\nMultiSelectComponent.Inject(CheckBoxSelection);\nconst FileRestrict = () => {\n    const imgObj = useRef(null);\n    // States for file restrictions\n    const [minFileSize, setMinFileSize] = useState(1);\n    const [maxFileSize, setMaxFileSize] = useState(100);\n    const [allowedExtensions, setAllowedExtensions] = useState([\".jpeg\", \".jpg\", \".png\", \".svg\", \".webp\"]);\n    const [fileSizeUnit, setFileSizeUnit] = useState('KB');\n    const fileExtensionsList = [\n        { Name: \"JPEG\", Value: \".jpeg\" },\n        { Name: \"JPG\", Value: \".jpg\" },\n        { Name: \"PNG\", Value: \".png\" },\n        { Name: \"SVG\", Value: \".svg\" },\n        { Name: \"WebP\", Value: \".webp\" }\n    ];\n    const units = [\n        { text: \"MB\" },\n        { text: \"KB\" },\n    ];\n    const convertToBytes = (value) => {\n        return value * (fileSizeUnit === \"MB\" ? 1024 * 1024 : 1024);\n    };\n    // Update Image Editor upload settings\n    const updateUploadSettings = () => {\n        if (imgObj.current) {\n            imgObj.current.uploadSettings = {\n                minFileSize: convertToBytes(minFileSize),\n                maxFileSize: convertToBytes(maxFileSize),\n                allowedExtensions: allowedExtensions.join(', '),\n            };\n            imgObj.current.dataBind();\n        }\n    };\n    const onSelect = (e) => {\n        setFileSizeUnit(e.item.text);\n        updateUploadSettings();\n    };\n    const beforeItemRender = (args) => {\n        if (args.item.text === fileSizeUnit) {\n            args.element.classList.add('e-selected');\n        }\n    };\n    const onCreated = () => {\n        updateUploadSettings();\n    };\n    return (<div className=\"control-pane\">\n            <div className=\"control-section\">\n                <div className=\"row\">\n                    <div className=\"col-lg-12 control-section\">\n                        <div style={{ textAlign: 'center' }}>\n                            <div className=\"e-img-editor-dropdown-container\">\n                                <label>Size As</label><br />\n                                <DropDownButtonComponent id=\"dropdownbtn\" items={units} content={fileSizeUnit} select={onSelect} beforeItemRender={beforeItemRender}/>\n                            </div>\n                            <div className=\"e-img-editor-numeric-textbox-container\">\n                                <label>Minimum Size</label>\n                                <br />\n                                <NumericTextBoxComponent width=\"180px\" value={minFileSize} min={minFileSize} change={(e) => {\n            setMinFileSize(e.value);\n            updateUploadSettings();\n        }}/>\n                            </div>\n                            <div className=\"e-img-editor-numeric-textbox-container\">\n                                <label>Maximum Size</label>\n                                <br />\n                                <NumericTextBoxComponent width=\"180px\" value={maxFileSize} min={minFileSize} change={(e) => {\n            setMaxFileSize(e.value);\n            updateUploadSettings();\n        }}/>\n                            </div>\n                            <div className=\"e-img-editor-dropdown-container\">\n                                <label>Allowed Extensions</label><br />\n                                <MultiSelectComponent dataSource={fileExtensionsList} fields={{ text: 'Name', value: 'Value' }} mode=\"CheckBox\" showSelectAll value={allowedExtensions} width=\"210px\" change={(e) => {\n            if (e.value.length === 0) {\n                setAllowedExtensions([\".jpeg\", \".jpg\", \".png\", \".svg\", \".webp\"]);\n            }\n            else {\n                setAllowedExtensions(e.value);\n            }\n            updateUploadSettings();\n        }}/>\n                            </div>\n                        </div>\n                        <div className=\"e-img-editor-sample\">\n                            <ImageEditorComponent id=\"image-editor\" ref={imgObj} uploadSettings={{\n            minFileSize: convertToBytes(minFileSize),\n            maxFileSize: convertToBytes(maxFileSize),\n            allowedExtensions: allowedExtensions.join(', ')\n        }} created={onCreated}/>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>);\n};\nexport default FileRestrict;\n\nconst root = createRoot(document.getElementById('sample'));\nroot.render(<FileRestrict />);","dependencies":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-react-base\":\"*\",\"@syncfusion/ej2-image-editor\":\"*\",\"@syncfusion/ej2-react-image-editor\":\"*\",\"@syncfusion/ej2-dropdowns\":\"*\",\"@syncfusion/ej2-react-dropdowns\":\"*\",\"@syncfusion/ej2-splitbuttons\":\"*\",\"@syncfusion/ej2-react-splitbuttons\":\"*\",\"@syncfusion/ej2-inputs\":\"*\",\"@syncfusion/ej2-react-inputs\":\"*\",\"@syncfusion/ej2-react-charts\":\"*\",\"@syncfusion/ej2/base\":\"*\",\"@syncfusion/ej2-charts'; // Import the necessary types from Syncfusion\":\"*\",\"@syncfusion/ej2-lists\":\"*\",\"@syncfusion/ej2-documenteditor\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-navigations\":\"*\",\"@syncfusion/ej2-react-popups\":\"*\"}"}