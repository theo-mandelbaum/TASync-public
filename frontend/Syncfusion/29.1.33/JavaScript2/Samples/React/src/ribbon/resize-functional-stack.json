{"index.css":"#resize-pictureList {\n  display: none;\n  border: 1px;\n  box-shadow: 0 0 2px;\n}\n\n#pictureddl-popup #resize-pictureList {\n  display: block;\n}\n\np.ribbonResizeDisplayText {\n  margin: 0 15px;\n  font-size: 18px;\n  font-weight: 500;\n  line-height: 1.1;\n}\n\n.e-bigger #resize-pictureList .e-list-header {\n  background-color: white;\n }\n\n body[class*=\"dark\"].e-bigger #resize-pictureList .e-list-header,\n body[class*=\"high\"].e-bigger #resize-pictureList .e-list-header {\n     background-color: #212529;\n }\n\n .e-bigger #resize-pictureList ul {\n     padding: 0px;\n     margin-top: 0px;\n }\n\n#ribbonContainer{\n  padding: 20px;\n  background-color: #dbdada;\n  display: flex;\n  flex-direction: column;\n  height: 550px;\n}\n\n#ribbon {\n  box-sizing: border-box;\n}\n\n#ribbonPlaceHolder {\n  flex-grow: 1; \n  box-sizing: border-box;\n  background-color: transparent;\n  display: flex;\n  flex-wrap: wrap;\n  gap: 10px;\n  margin-top: 15px;\n}\n\n/* content customization */\n#ribbonPlaceHolder .content1 {\n  background-color: #3a9ae5;\n  width: 150px;\n  height: 50%;\n}\n\n#ribbonPlaceHolder .content2 {\n  background-color: #9d9c9a;\n  width: calc(100% - 160px);\n  height: 50%;\n}\n\n#ribbonPlaceHolder .content3 {\n  background-color: #7f7e7d;\n  width: 150px;\n  height: calc(50% - 60px);\n}\n\n#ribbonPlaceHolder .content4 {\n  background-color: #c8c6c4;\n  width: calc(100% - 160px);\n  height: calc(50% - 60px);\n}\n\n#ribbonPlaceHolder #toast .e-toast-close-icon {\n  position: absolute;\n  top: 50%;\n  right: 2px ;\n  transform: translateY(-50%);\n  margin: 0;\n}\n\n#ribbonPlaceHolder #toast .e-toast-content {\n  padding-right: 25px;\n}\n\n#ribbonPlaceHolder .e-slider-container{\n  height: 2px;\n}\n\n#ribbonSlider .e-slider-track {\n  background: #848587;\n}\n\nbody[class*=\"dark\"] #ribbonContainer,\nbody[class*=\"high\"] #ribbonContainer {\n  background: #a7a7a742;\n}\n\n.font-group .e-ribbon-group-content {\n  justify-content: center;\n}\n\n#ribbonContainer #header_footer .e-ribbon-group-overflow-ddb {\n  min-width: 10ch;\n}\n\n/* Represents the styles for icons */\n@font-face {\nfont-family: 'ribbon';\nsrc:\nurl(data:application/x-font-ttf;charset=utf-8;base64,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) format('truetype');\nfont-weight: normal;\nfont-style: normal;\n}\n\n[class*=\"e-ribbon-\"] [class^=\"sf-icon-\"], [class*=\"e-ribbon-\"] [class*=\" sf-icon-\"] {\nfont-family: 'ribbon' !important;\nspeak: none;\nfont-style: normal;\nfont-weight: normal;\nfont-variant: normal;\ntext-transform: none;\nline-height: 1;\n-webkit-font-smoothing: antialiased;\n-moz-osx-font-smoothing: grayscale;\n}\n\n[class*=\"e-ribbon-\"] .sf-icon-3d-model:before { content: \"\\e700\"; }\n[class*=\"e-ribbon-\"] .sf-icon-shapes:before { content: \"\\e701\"; }\n[class*=\"e-ribbon-\"] .sf-icon-dictate:before { content: \"\\e702\"; }\n[class*=\"e-ribbon-\"] .sf-icon-chart:before { content: \"\\e703\"; }\n[class*=\"e-ribbon-\"] .sf-icon-screenshot:before { content: \"\\e704\"; }\n[class*=\"e-ribbon-\"] .sf-icon-smart-art:before { content: \"\\e706\"; }\n[class*=\"e-ribbon-\"] .sf-icon-share:before { content: \"\\e707\"; }\n[class*=\"e-ribbon-\"] .sf-icon-read:before { content: \"\\e708\"; }\n[class*=\"e-ribbon-\"] .sf-icon-web-layout:before { content: \"\\e709\"; }\n[class*=\"e-ribbon-\"] .sf-icon-mode:before { content: \"\\e70b\"; }\n[class*=\"e-ribbon-\"] .sf-icon-draft:before { content: \"\\e70c\"; }\n[class*=\"e-ribbon-\"] .sf-icon-reuse:before { content: \"\\e70f\"; }\n[class*=\"e-ribbon-\"] .sf-icon-editor:before { content: \"\\e70a\"; }\n[class*=\"e-ribbon-\"] .sf-icon-word:before { content: \"\\e70d\"; }\n\n.ribbon-resize.e-rtl + #ribbonPlaceHolder .ribbonSliderWrapper{\n  direction: rtl;\n}\n","index.html":"<!DOCTYPE html>\n<html>\n<head>\n    <title>Syncfusion React Sample</title>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\n    <meta name=\"author\" content=\"Syncfusion\" />\n    <link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\n</head>\n\n<body class=\"{{theme}}\">\n     <style>\n            .control-section\n            {\n                margin-top: 100px;\n            }\n    </style>\n    <div id='sample'>\n</body>\n</html>\n","index.js":"import { createRoot } from 'react-dom/client';\nimport './index.css';\nimport * as React from 'react';\nimport { useRef, useEffect } from 'react';\nimport { RibbonComponent, RibbonTabsDirective, RibbonTabDirective, RibbonCollectionsDirective, RibbonCollectionDirective, RibbonGroupsDirective, RibbonGroupDirective, RibbonItemsDirective, RibbonItemDirective, RibbonColorPicker, DisplayMode, RibbonGroupButtonSelection } from '@syncfusion/ej2-react-ribbon';\nimport { RibbonFileMenu, RibbonItemSize, Inject } from '@syncfusion/ej2-react-ribbon';\nimport { Query } from \"@syncfusion/ej2-data\";\nimport { ToastComponent } from '@syncfusion/ej2-react-notifications';\nimport { SliderComponent } from '@syncfusion/ej2-react-inputs';\nimport { ListViewComponent } from '@syncfusion/ej2-react-lists';\n\n\nconst Resize = () => {\n    let resizeRibbonObj = useRef(null);\n    const pasteOptions = [{ text: \"Keep Source Format\" }, { text: \"Merge Format\" }, { text: \"Keep Text Only\" }];\n    const findOptions = [{ text: \"Find\", iconCss: \"e-icons e-search\" }, { text: \"Advanced Find\", iconCss: \"e-icons e-search\" }, { text: \"Go to\", iconCss: \"e-icons e-arrow-right\" }];\n    const selectOptions = [{ text: \"Select All\" }, { text: \"Select Objects\" }];\n    const dictateOptions = [{ text: \"Chinese\" }, { text: \"English\" }, { text: \"German\" }, { text: \"French\" }];\n    const tableOptions = [{ text: \"Insert Table\" }, { text: \"Draw Table\" }, { text: \"Convert Table\" }, { text: \"Excel SpreadSheet\" }];\n    const shapeOptions = [{ text: \"Lines\" }, { text: \"Rectangles\" }, { text: \"Basic Arrows\" }, { text: \"Basic Shapes\" }, { text: \"FlowChart\" }];\n    const headerOptions = [{ text: \"Insert Header\" }, { text: \"Edit Header\" }, { text: \"Remove Header\" }];\n    const footerOptions = [{ text: \"Insert Footer\" }, { text: \"Edit Footer\" }, { text: \"Remove Footer\" }];\n    const pageOptions = [{ text: \"Insert Top of page\" }, { text: \"Insert Bottom of page\" }, { text: \"Format Page Number\" }];\n    const linkOptions = [{ text: \"Insert Link\", iconCss: \"e-icons e-link\" }, { text: \"Recent Links\", iconCss: \"e-icons e-clock\" }, { text: \"Bookmarks\", iconCss: \"e-icons e-bookmark\" }];\n    const fontSize = [\"8\", \"9\", \"10\", \"11\", \"12\", \"14\", \"16\", \"18\", \"20\", \"22\", \"24\", \"26\", \"28\", \"36\", \"48\", \"72\", \"96\"];\n    const fontStyle = [\"Algerian\", \"Arial\", \"Calibri\", \"Cambria\", \"Cambria Math\", \"Courier New\", \"Candara\", \"Georgia\", \"Impact\", \"Segoe Print\", \"Segoe Script\", \"Segoe UI\", \"Symbol\", \"Times New Roman\", \"Verdana\", \"Windings\"];\n    function filtering(e) {\n        let query = new Query();\n        query = (e.text !== \"\") ? query.where(\"Text\", \"contains\", e.text, true) : query;\n        e.updateData(fontStyle, query);\n    }\n    const fileOptions = [{ text: \"New\", iconCss: \"e-icons e-file-new\", id: \"new\" },\n        { text: \"Open\", iconCss: \"e-icons e-folder-open\", id: \"Open\" },\n        { text: \"Rename\", iconCss: \"e-icons e-rename\", id: \"rename\" },\n        {\n            text: \"Save as\", iconCss: \"e-icons e-save\", id: \"save\",\n            items: [\n                { text: \"Microsoft Word (.docx)\", iconCss: \"sf-icon-word\", id: \"newword\" },\n                { text: \"Microsoft Word 97-2003(.doc)\", iconCss: \"sf-icon-word\", id: \"oldword\" },\n                { text: \"Download as PDF\", iconCss: \"e-icons e-export-pdf\", id: \"pdf\" }\n            ]\n        }];\n    let toastInstance = useRef(null);\n    let isPasteDisabled = true;\n    const enablePaste = () => {\n        if (!isPasteDisabled) {\n            return;\n        }\n        resizeRibbonObj.current.enableItem('resize-pastebtn');\n        isPasteDisabled = false;\n    };\n    const updateContent = (args) => {\n        toastInstance.current.show({ content: \"Last clicked item is \" + args });\n    };\n    const sliderRef = useRef(null);\n    const onCreated = () => {\n        var container = document.getElementById('ribbonContainer');\n        var slider = sliderRef.current;\n        slider.max = container.offsetWidth;\n        slider.value = container.offsetWidth;\n        slider.min = 350;\n    };\n    useEffect(() => {\n        const onResize = () => {\n            var container = document.getElementById('ribbonContainer');\n            container.style.width = '100%';\n            var slider = sliderRef.current;\n            slider.max = container.offsetWidth;\n            slider.value = container.offsetWidth;\n        };\n        window.addEventListener('resize', onResize);\n        return () => {\n            window.removeEventListener('resize', onResize);\n        };\n    });\n    const onChange = (args) => {\n        var container = document.getElementById('ribbonContainer');\n        container.style.width = args.value + 'px';\n        resizeRibbonObj.current.refreshLayout();\n    };\n    const fileSelect = (args) => {\n        if (args.item.id === \"newword\" || args.item.id === \"oldword\" || args.item.id === \"pdf\") {\n            updateContent(\"File -> Save as -> \" + args.item.text);\n        }\n        else {\n            updateContent(\"File -> \" + args.item.text);\n        }\n    };\n    const launchClick = (args) => {\n        if (args.groupId == \"clipboard\") {\n            updateContent(\"Clipboard Launcher Icon\");\n        }\n        else if (args.groupId == \"illustration\") {\n            updateContent(\"Illustration Launcher Icon\");\n        }\n        else if (args.groupId == \"header_footer\") {\n            updateContent(\"Header & Footer Launcher Icon\");\n        }\n    };\n    return (<div className='control-pane'>\n            <div className='col-lg-12 control-section resize-ribbon-section'>\n                <div className='control ribbon-sample'>\n                    <div id=\"ribbonContainer\" className='resize-ribbon-container'>\n                        <RibbonComponent id='ribbon' ref={resizeRibbonObj} enablePersistence={true} fileMenu={{ visible: true, menuItems: fileOptions, select: fileSelect }} launcherIconClick={launchClick} cssClass='ribbon-resize'>\n                            <RibbonTabsDirective>\n                                <RibbonTabDirective header='Home'>\n                                    <RibbonGroupsDirective>\n                                        <RibbonGroupDirective header=\"Clipboard\" id='clipboard' groupIconCss=\"e-icons e-paste\" showLauncherIcon={true}>\n                                            <RibbonCollectionsDirective>\n                                                <RibbonCollectionDirective>\n                                                    <RibbonItemsDirective>\n                                                        <RibbonItemDirective type=\"SplitButton\" disabled={true} id=\"resize-pastebtn\" allowedSizes={RibbonItemSize.Large} splitButtonSettings={{ iconCss: \"e-icons e-paste\", items: pasteOptions, content: \"Paste\", select: (args) => { updateContent(\"Paste -> \" + args.item.text); }, click: () => { updateContent(\"Paste\"); } }}>\n                                                        </RibbonItemDirective>\n                                                    </RibbonItemsDirective>\n                                                </RibbonCollectionDirective>\n                                                <RibbonCollectionDirective>\n                                                    <RibbonItemsDirective>\n                                                        <RibbonItemDirective type=\"Button\" buttonSettings={{ iconCss: \"e-icons e-cut\", content: \"Cut\", clicked: () => { updateContent(\"Cut\"); enablePaste(); } }}>\n                                                        </RibbonItemDirective>\n                                                    </RibbonItemsDirective>\n                                                </RibbonCollectionDirective>\n                                                <RibbonCollectionDirective>\n                                                    <RibbonItemsDirective>\n                                                        <RibbonItemDirective type=\"Button\" buttonSettings={{ iconCss: \"e-icons e-copy\", content: \"Copy\", clicked: () => { updateContent(\"Copy\"); enablePaste(); } }}>\n                                                        </RibbonItemDirective>\n                                                    </RibbonItemsDirective>\n                                                </RibbonCollectionDirective>\n                                                <RibbonCollectionDirective>\n                                                    <RibbonItemsDirective>\n                                                        <RibbonItemDirective type=\"Button\" buttonSettings={{ iconCss: \"e-icons e-format-painter\", content: \"Format Painter\", clicked: () => { updateContent(\"Format Painter\"); } }}>\n                                                        </RibbonItemDirective>\n                                                    </RibbonItemsDirective>\n                                                </RibbonCollectionDirective>\n                                            </RibbonCollectionsDirective>\n                                        </RibbonGroupDirective>\n                                        <RibbonGroupDirective header=\"Font\" overflowHeader=\"More Font Options\" groupIconCss=\"e-icons e-bold\" isCollapsible={false} enableGroupOverflow={true} orientation=\"Row\" cssClass='font-group'>\n                                            <RibbonCollectionsDirective>\n                                                <RibbonCollectionDirective>\n                                                    <RibbonItemsDirective>\n                                                        <RibbonItemDirective type=\"ComboBox\" comboBoxSettings={{ dataSource: fontStyle, index: 3, label: 'Font Style', width: '115px', popupWidth: '150px', allowFiltering: true, filtering: filtering, select: (args) => { if (args.itemData) {\n            updateContent(\"Font Style -> \" + args.itemData.text);\n        } } }}>\n                                                        </RibbonItemDirective>\n                                                        <RibbonItemDirective type=\"ComboBox\" comboBoxSettings={{ dataSource: fontSize, index: 3, label: 'Font Size', width: '65px', popupWidth: '85px', select: (args) => { if (args.itemData) {\n            updateContent(\"Font Size -> \" + args.itemData.text);\n        } } }}>\n                                                        </RibbonItemDirective>\n                                                    </RibbonItemsDirective>\n                                                </RibbonCollectionDirective>\n                                                <RibbonCollectionDirective>\n                                                    <RibbonItemsDirective>\n                                                        <RibbonItemDirective type=\"GroupButton\" allowedSizes={RibbonItemSize.Small} groupButtonSettings={{ selection: RibbonGroupButtonSelection.Multiple, header: 'Format Styles', items: [{ iconCss: 'e-icons e-bold', content: 'Bold', selected: true, click: () => { updateContent(\"Bold\"); } }, { iconCss: 'e-icons e-italic', content: 'Italic', click: () => { updateContent(\"Italic\"); } }, { iconCss: 'e-icons e-underline', content: 'Underline', click: () => { updateContent(\"Underline\"); } }, { iconCss: 'e-icons e-strikethrough', content: 'Strikethrough', click: () => { updateContent(\"Strikethrough\"); } }, { iconCss: 'e-icons e-change-case', content: 'Change Case', click: () => { updateContent(\"Change Case\"); } }] }}>\n                                                        </RibbonItemDirective>\n                                                        <RibbonItemDirective type=\"ColorPicker\" allowedSizes={RibbonItemSize.Small} displayOptions={DisplayMode.Simplified | DisplayMode.Classic} colorPickerSettings={{ value: '#123456', change: (args) => { updateContent(args.currentValue.hex + \" color\"); } }}>\n                                                        </RibbonItemDirective>\n                                                    </RibbonItemsDirective>\n                                                </RibbonCollectionDirective>\n                                            </RibbonCollectionsDirective>\n                                        </RibbonGroupDirective>\n                                        <RibbonGroupDirective header=\"Paragraph\" groupIconCss=\"e-icons e-align-center\" orientation=\"Row\">\n                                            <RibbonCollectionsDirective>\n                                                <RibbonCollectionDirective>\n                                                    <RibbonItemsDirective>\n                                                        <RibbonItemDirective type=\"Button\" allowedSizes={RibbonItemSize.Small} buttonSettings={{ iconCss: \"e-icons e-decrease-indent\", content: 'Decrease Indent', clicked: () => { updateContent(\"Decrease Indent\"); } }}>\n                                                        </RibbonItemDirective>\n                                                        <RibbonItemDirective type=\"Button\" allowedSizes={RibbonItemSize.Small} buttonSettings={{ iconCss: \"e-icons e-increase-indent\", content: 'Increase Indent', clicked: () => { updateContent(\"Increase Indent\"); } }}>\n                                                        </RibbonItemDirective>\n                                                        <RibbonItemDirective type=\"Button\" allowedSizes={RibbonItemSize.Small} buttonSettings={{ iconCss: \"e-icons e-paragraph\", content: 'Paragraph', clicked: () => { updateContent(\"Paragraph Mark\"); } }}>\n                                                        </RibbonItemDirective>\n                                                    </RibbonItemsDirective>\n                                                </RibbonCollectionDirective>\n                                                <RibbonCollectionDirective>\n                                                    <RibbonItemsDirective>\n                                                        <RibbonItemDirective type=\"GroupButton\" allowedSizes={RibbonItemSize.Small} groupButtonSettings={{ selection: RibbonGroupButtonSelection.Single, header: 'Alignment', items: [{ iconCss: 'e-icons e-align-left', selected: true, click: () => { updateContent(\"Align Left\"); } }, { iconCss: 'e-icons e-align-center', click: () => { updateContent(\"Align Center\"); } }, { iconCss: 'e-icons e-align-right', click: () => { updateContent(\"Align Right\"); } }, { iconCss: 'e-icons e-justify', click: () => { updateContent(\"Justify\"); } }] }}>\n                                                        </RibbonItemDirective>\n                                                    </RibbonItemsDirective>\n                                                </RibbonCollectionDirective>\n                                            </RibbonCollectionsDirective>\n                                        </RibbonGroupDirective>\n                                        <RibbonGroupDirective header=\"Editing\" groupIconCss=\"e-icons e-edit\" orientation=\"Column\">\n                                            <RibbonCollectionsDirective>\n                                                <RibbonCollectionDirective>\n                                                    <RibbonItemsDirective>\n                                                        <RibbonItemDirective type=\"SplitButton\" splitButtonSettings={{ iconCss: \"e-icons e-search\", items: findOptions, content: \"Find\", select: (args) => { updateContent(\"Find -> \" + args.item.text); }, click: () => { updateContent(\"Find\"); } }}>\n                                                        </RibbonItemDirective>\n                                                    </RibbonItemsDirective>\n                                                </RibbonCollectionDirective>\n                                                <RibbonCollectionDirective>\n                                                    <RibbonItemsDirective>\n                                                        <RibbonItemDirective type=\"Button\" buttonSettings={{ iconCss: \"e-icons e-replace\", content: 'Replace', clicked: () => { updateContent(\"Replace\"); } }}>\n                                                        </RibbonItemDirective>\n                                                    </RibbonItemsDirective>\n                                                </RibbonCollectionDirective>\n                                                <RibbonCollectionDirective>\n                                                    <RibbonItemsDirective>\n                                                        <RibbonItemDirective type=\"SplitButton\" splitButtonSettings={{ iconCss: \"e-icons e-mouse-pointer\", items: selectOptions, content: \"Select\", select: (args) => { updateContent(\"Select -> \" + args.item.text); }, click: () => { updateContent(\"Select\"); } }}>\n                                                        </RibbonItemDirective>\n                                                    </RibbonItemsDirective>\n                                                </RibbonCollectionDirective>\n                                            </RibbonCollectionsDirective>\n                                        </RibbonGroupDirective>\n                                        <RibbonGroupDirective header=\"Voice\" groupIconCss=\"sf-icon-dictate\" isCollapsible={false}>\n                                            <RibbonCollectionsDirective>\n                                                <RibbonCollectionDirective>\n                                                    <RibbonItemsDirective>\n                                                        <RibbonItemDirective type=\"SplitButton\" disabled={true} allowedSizes={RibbonItemSize.Large} splitButtonSettings={{ iconCss: \"sf-icon-dictate\", items: dictateOptions, content: \"Dictate\", select: (args) => { updateContent(\"Dictate -> \" + args.item.text); }, click: () => { updateContent(\"Dictate\"); } }}>\n                                                        </RibbonItemDirective>\n                                                    </RibbonItemsDirective>\n                                                </RibbonCollectionDirective>\n                                            </RibbonCollectionsDirective>\n                                        </RibbonGroupDirective>\n                                    </RibbonGroupsDirective>\n                                </RibbonTabDirective>\n                                <RibbonTabDirective header='Insert'>\n                                    <RibbonGroupsDirective>\n                                        <RibbonGroupDirective header=\"Tables\" isCollapsible={false}>\n                                            <RibbonCollectionsDirective>\n                                                <RibbonCollectionDirective>\n                                                    <RibbonItemsDirective>\n                                                        <RibbonItemDirective type=\"DropDown\" allowedSizes={RibbonItemSize.Large} dropDownSettings={{ iconCss: \"e-icons e-table\", items: tableOptions, content: \"Table\", select: (args) => { updateContent(\"Table -> \" + args.item.text); } }}>\n                                                        </RibbonItemDirective>\n                                                    </RibbonItemsDirective>\n                                                </RibbonCollectionDirective>\n                                            </RibbonCollectionsDirective>\n                                        </RibbonGroupDirective>\n                                        <RibbonGroupDirective header=\"Illustration\" overflowHeader=\"Illustrations\" id=\"illustration\" groupIconCss=\"e-icons e-image\" enableGroupOverflow={true} orientation=\"Row\">\n                                            <RibbonCollectionsDirective>\n                                                <RibbonCollectionDirective>\n                                                    <RibbonItemsDirective>\n                                                    <RibbonItemDirective id='pictureddl' type=\"DropDown\" dropDownSettings={{ iconCss: \"e-icons e-image\", content: \"Pictures\", target: '#resize-pictureList' }}>\n                                                        </RibbonItemDirective>\n                                                        <RibbonItemDirective type=\"DropDown\" dropDownSettings={{ iconCss: \"sf-icon-shapes\", items: shapeOptions, content: \"Shapes\", select: (args) => { updateContent(\"Shapes -> \" + args.item.text); } }}>\n                                                        </RibbonItemDirective>\n                                                        <RibbonItemDirective type=\"Button\" buttonSettings={{ iconCss: \"sf-icon-3d-model\", content: \"3D Models\", clicked: () => { updateContent(\"3D Models\"); } }}>\n                                                        </RibbonItemDirective>\n                                                        <RibbonItemDirective type=\"Button\" buttonSettings={{ iconCss: \"sf-icon-smart-art\", content: \"Smart Art\", clicked: () => { updateContent(\"Smart Art\"); } }}>\n                                                        </RibbonItemDirective>\n                                                        <RibbonItemDirective type=\"Button\" buttonSettings={{ iconCss: \"sf-icon-chart\", content: \"Charts\", clicked: () => { updateContent(\"Chart\"); } }}>\n                                                        </RibbonItemDirective>\n                                                        <RibbonItemDirective type=\"Button\" buttonSettings={{ iconCss: \"sf-icon-screenshot\", content: \"Screenshot\", clicked: () => { updateContent(\"Screenshot\"); } }}>\n                                                        </RibbonItemDirective>\n                                                    </RibbonItemsDirective>\n                                                </RibbonCollectionDirective>\n                                            </RibbonCollectionsDirective>\n                                        </RibbonGroupDirective>\n                                        <RibbonGroupDirective header=\"Header & Footer\" id=\"header_footer\" groupIconCss=\"e-icons e-table\" orientation=\"Column\" showLauncherIcon={true}>\n                                            <RibbonCollectionsDirective>\n                                                <RibbonCollectionDirective>\n                                                    <RibbonItemsDirective>\n                                                        <RibbonItemDirective type=\"DropDown\" dropDownSettings={{ iconCss: \"e-icons e-header\", items: headerOptions, content: \"Header\", select: (args) => { updateContent(\"Header -> \" + args.item.text); } }}>\n                                                        </RibbonItemDirective>\n                                                        <RibbonItemDirective type=\"DropDown\" dropDownSettings={{ iconCss: \"e-icons e-footer\", items: footerOptions, content: \"Footer\", select: (args) => { updateContent(\"Footer -> \" + args.item.text); } }}>\n                                                        </RibbonItemDirective>\n                                                        <RibbonItemDirective type=\"DropDown\" dropDownSettings={{ iconCss: \"e-icons e-page-numbering\", items: pageOptions, content: \"Page Numbering\", select: (args) => { updateContent(\"Page Numbering -> \" + args.item.text); } }}>\n                                                        </RibbonItemDirective>\n                                                    </RibbonItemsDirective>\n                                                </RibbonCollectionDirective>\n                                            </RibbonCollectionsDirective>\n                                        </RibbonGroupDirective>\n                                        <RibbonGroupDirective header=\"Comments\" isCollapsible={false}>\n                                            <RibbonCollectionsDirective>\n                                                <RibbonCollectionDirective>\n                                                    <RibbonItemsDirective>\n                                                        <RibbonItemDirective type=\"Button\" allowedSizes={RibbonItemSize.Large} buttonSettings={{ iconCss: \"e-icons e-comment-add\", content: \"New Comment\", clicked: () => { updateContent(\"New Comment\"); } }}>\n                                                        </RibbonItemDirective>\n                                                    </RibbonItemsDirective>\n                                                </RibbonCollectionDirective>\n                                            </RibbonCollectionsDirective>\n                                        </RibbonGroupDirective>\n                                        <RibbonGroupDirective header=\"Links\" groupIconCss=\"e-icons e-link\" isCollapsible={false}>\n                                            <RibbonCollectionsDirective>\n                                                <RibbonCollectionDirective>\n                                                    <RibbonItemsDirective>\n                                                        <RibbonItemDirective type=\"DropDown\" allowedSizes={RibbonItemSize.Large} dropDownSettings={{ iconCss: \"e-icons e-link\", items: linkOptions, content: \"Link\", select: (args) => { updateContent(\"Link -> \" + args.item.text); } }}>\n                                                        </RibbonItemDirective>\n                                                    </RibbonItemsDirective>\n                                                </RibbonCollectionDirective>\n                                            </RibbonCollectionsDirective>\n                                        </RibbonGroupDirective>\n                                    </RibbonGroupsDirective>\n                                </RibbonTabDirective>\n                                <RibbonTabDirective header='View'>\n                                    <RibbonGroupsDirective>\n                                        <RibbonGroupDirective header=\"Views\" groupIconCss='e-icons e-print' orientation='Row'>\n                                            <RibbonCollectionsDirective>\n                                                <RibbonCollectionDirective>\n                                                    <RibbonItemsDirective>\n                                                        <RibbonItemDirective type=\"Button\" buttonSettings={{ iconCss: \"sf-icon-read\", content: \"Read Mode\", clicked: () => { updateContent(\"Read Mode\"); } }}>\n                                                        </RibbonItemDirective>\n                                                        <RibbonItemDirective type=\"Button\" buttonSettings={{ iconCss: \"e-icons e-print\", content: \"Print Layout\", clicked: () => { updateContent(\"Print Layout\"); } }}>\n                                                        </RibbonItemDirective>\n                                                        <RibbonItemDirective type=\"Button\" buttonSettings={{ iconCss: \"sf-icon-web-layout\", content: \"Web Layout\", clicked: () => { updateContent(\"Web Layout\"); } }}>\n                                                        </RibbonItemDirective>\n                                                    </RibbonItemsDirective>\n                                                </RibbonCollectionDirective>\n                                            </RibbonCollectionsDirective>\n                                        </RibbonGroupDirective>\n                                        <RibbonGroupDirective header=\"Zoom\" groupIconCss=\"e-icons e-zoom-to-fit\" orientation=\"Row\">\n                                            <RibbonCollectionsDirective>\n                                                <RibbonCollectionDirective>\n                                                    <RibbonItemsDirective>\n                                                        <RibbonItemDirective type=\"Button\" buttonSettings={{ iconCss: \"e-icons e-zoom-in\", content: \"Zoom in\", clicked: () => { updateContent(\"Zoom in\"); } }}>\n                                                        </RibbonItemDirective>\n                                                        <RibbonItemDirective type=\"Button\" buttonSettings={{ iconCss: \"e-icons e-zoom-out\", content: \"Zoom out\", clicked: () => { updateContent(\"Zoom out\"); } }}>\n                                                        </RibbonItemDirective>\n                                                    </RibbonItemsDirective>\n                                                </RibbonCollectionDirective>\n                                            </RibbonCollectionsDirective>\n                                        </RibbonGroupDirective>\n                                        <RibbonGroupDirective header=\"Show\" isCollapsible={true}>\n                                            <RibbonCollectionsDirective>\n                                                <RibbonCollectionDirective>\n                                                    <RibbonItemsDirective>\n                                                        <RibbonItemDirective type=\"CheckBox\" checkBoxSettings={{ label: \"Ruler\", checked: false, change: () => { updateContent(\"Ruler\"); } }}>\n                                                        </RibbonItemDirective>\n                                                        <RibbonItemDirective type=\"CheckBox\" checkBoxSettings={{ label: \"Gridlines\", checked: false, change: () => { updateContent(\"Gridlines\"); } }}>\n                                                        </RibbonItemDirective>\n                                                        <RibbonItemDirective type=\"CheckBox\" checkBoxSettings={{ label: \"Navigation Pane\", checked: true, change: () => { updateContent(\"Navigation Pane\"); } }}>\n                                                        </RibbonItemDirective>\n                                                    </RibbonItemsDirective>\n                                                </RibbonCollectionDirective>\n                                            </RibbonCollectionsDirective>\n                                        </RibbonGroupDirective>\n                                        <RibbonGroupDirective header=\"Dark Mode\" isCollapsible={false}>\n                                            <RibbonCollectionsDirective>\n                                                <RibbonCollectionDirective>\n                                                    <RibbonItemsDirective>\n                                                        <RibbonItemDirective type=\"Button\" buttonSettings={{ iconCss: \"sf-icon-mode\", content: \"Dark Mode\", clicked: () => { updateContent(\"Dark Mode\"); } }}>\n                                                        </RibbonItemDirective>\n                                                    </RibbonItemsDirective>\n                                                </RibbonCollectionDirective>\n                                            </RibbonCollectionsDirective>\n                                        </RibbonGroupDirective>\n                                    </RibbonGroupsDirective>\n                                </RibbonTabDirective>\n                            </RibbonTabsDirective>\n                            <Inject services={[RibbonFileMenu, RibbonColorPicker]}/>\n                        </RibbonComponent>\n                        <div id=\"ribbonPlaceHolder\">\n                            <div style={{ width: '100%', height: '40px' }} className='ribbonSliderWrapper'>\n                                <p className='ribbonResizeDisplayText'>Resize Ribbon</p>\n                                <div id='ribbonSlider' style={{ width: '200px', margin: '0 15px' }}>\n                                    <SliderComponent id='slider' ref={sliderRef} min={350} change={onChange.bind(this)} created={onCreated.bind(this)}/>\n                                </div>\n                            </div>\n                            <div className=\"content1\"></div>\n                            <div className=\"content2\"></div>\n                            <div className=\"content3\"></div>\n                            <div className=\"content4\"></div>\n                            <ToastComponent id='toast' ref={toastInstance} position={{ X: 'Right' }} height={25} width='auto' timeOut={2000} cssClass='e-toast-info' showCloseButton={true} target=\"#ribbonPlaceHolder\" newestOnTop={true} animation={{ show: { effect: 'FadeIn' }, hide: { effect: 'FadeOut' } }}/>\n                        </div>\n                        <ListViewComponent id='resize-pictureList' dataSource={['This Device', 'Stock Images', 'Online Images']} showHeader={true} headerTitle=\"Insert Picture From\" select={(args) => { updateContent(\"Picture -> \" + args.text); }}></ListViewComponent>\n                    </div>\n                </div>\n            </div>\n        </div>);\n};\nexport default Resize;\n\nconst root = createRoot(document.getElementById('sample'));\nroot.render(<Resize />);","dependencies":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-react-base\":\"*\",\"@syncfusion/ej2-ribbon\":\"*\",\"@syncfusion/ej2-react-ribbon\":\"*\",\"@syncfusion/ej2-splitbuttons\":\"*\",\"@syncfusion/ej2-react-splitbuttons\":\"*\",\"@syncfusion/ej2-data\":\"*\",\"@syncfusion/ej2-inputs\":\"*\",\"@syncfusion/ej2-lists\":\"*\",\"@syncfusion/ej2-navigations\":\"*\",\"@syncfusion/ej2-notifications\":\"*\",\"@syncfusion/ej2-popups\":\"*\",\"markdown-spellcheck\":\"^1.3.1\",\"@syncfusion/ej2-dropdowns\":\"*\",\"@syncfusion/ej2-react-notifications\":\"*\",\"@syncfusion/ej2-react-navigations\":\"*\",\"@syncfusion/ej2-react-inputs\":\"*\",\"@syncfusion/ej2-react-lists\":\"*\",\"@syncfusion/ej2-react-charts\":\"*\",\"@syncfusion/ej2/base\":\"*\",\"@syncfusion/ej2-charts'; // Import the necessary types from Syncfusion\":\"*\",\"@syncfusion/ej2-documenteditor\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-react-popups\":\"*\",\"@syncfusion/ej2-pivotview\":\"*\",\"@syncfusion/ej2-react-progressbar\":\"*\"}"}