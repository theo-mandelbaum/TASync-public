{"index.css":"#keytip-pictureList {\n  display: none;\n  border: 1px;\n  box-shadow: 0 0 2px;\n}\n\n#pictureddl-popup #keytip-pictureList {\n  display: block;\n}\n\n.e-bigger #keytip-pictureList .e-list-header {\n  background-color: white;\n}\n\nbody[class*=\"dark\"].e-bigger #keytip-pictureList .e-list-header,\nbody[class*=\"high\"].e-bigger #keytip-pictureList .e-list-header {\n  background-color: #212529;\n}\n\n.e-bigger #keytip-pictureList ul {\n  padding: 0px;\n  margin-top: 0px;\n}\n\n#ribbonContainer {\n  padding: 20px;\n  background-color: #dbdadacc;\n  display: flex;\n  flex-direction: column;\n  height: 550px;\n}\n\n#keytip-ribbon {\n  box-sizing: border-box;\n}\n\n#keytip-ribbonPlaceHolder {\n  flex-grow: 1;\n  box-sizing: border-box;\n  background-color: transparent;\n  display: flex;\n  flex-wrap: wrap;\n  gap: 10px;\n  margin-top: 15px;\n}\n\n/* content customization */\n#keytip-ribbonPlaceHolder .content1 {\n  background-color: #3a9ae5;\n  width: 150px;\n  height: 60%;\n}\n\n#keytip-ribbonPlaceHolder .content2 {\n  background-color: #9d9c9a;\n  width: calc(100% - 160px);\n  height: 60%;\n}\n\n#keytip-ribbonPlaceHolder .content3 {\n  background-color: #7f7e7d;\n  width: 150px;\n  height: calc(40% - 10px);\n}\n\n#keytip-ribbonPlaceHolder .content4 {\n  background-color: #c8c6c4;\n  width: calc(100% - 160px);\n  height: calc(40% - 10px);\n}\n\n#keytip-ribbonPlaceHolder #toast .e-toast-close-icon {\n  position: absolute;\n  top: 50%;\n  right: 2px;\n  transform: translateY(-50%);\n  margin: 0;\n}\n\n#keytip-ribbonPlaceHolder #toast .e-toast-content {\n  padding-right: 25px;\n}\n\nbody[class*=\"dark\"] #ribbonContainer,\nbody[class*=\"high\"] #ribbonContainer {\n  background: #a7a7a742;\n}\n\n.font-group .e-ribbon-group-content {\n  justify-content: center;\n}\n\n#default-ribbonContainer #header_footer .e-ribbon-group-overflow-ddb {\n  min-width: 10ch;\n}\n\n/* Represents the styles for icons */\n@font-face {\n  font-family: 'ribbon';\n  src:\n    url(data:application/x-font-ttf;charset=utf-8;base64,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) format('truetype');\n  font-weight: normal;\n  font-style: normal;\n}\n\n[class*=\"e-ribbon-\"] [class^=\"sf-icon-\"],\n[class*=\"e-ribbon-\"] [class*=\" sf-icon-\"] {\n  font-family: 'ribbon' !important;\n  speak: none;\n  font-style: normal;\n  font-weight: normal;\n  font-variant: normal;\n  text-transform: none;\n  line-height: 1;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n[class*=\"e-ribbon-\"] .sf-icon-3d-model:before {\n  content: \"\\e700\";\n}\n\n[class*=\"e-ribbon-\"] .sf-icon-shapes:before {\n  content: \"\\e701\";\n}\n\n[class*=\"e-ribbon-\"] .sf-icon-dictate:before {\n  content: \"\\e702\";\n}\n\n[class*=\"e-ribbon-\"] .sf-icon-chart:before {\n  content: \"\\e703\";\n}\n\n[class*=\"e-ribbon-\"] .sf-icon-screenshot:before {\n  content: \"\\e704\";\n}\n\n[class*=\"e-ribbon-\"] .sf-icon-smart-art:before {\n  content: \"\\e706\";\n}\n\n[class*=\"e-ribbon-\"] .sf-icon-share:before {\n  content: \"\\e707\";\n}\n\n[class*=\"e-ribbon-\"] .sf-icon-read:before {\n  content: \"\\e708\";\n}\n\n[class*=\"e-ribbon-\"] .sf-icon-web-layout:before {\n  content: \"\\e709\";\n}\n\n[class*=\"e-ribbon-\"] .sf-icon-mode:before {\n  content: \"\\e70b\";\n}\n\n[class*=\"e-ribbon-\"] .sf-icon-draft:before {\n  content: \"\\e70c\";\n}\n\n[class*=\"e-ribbon-\"] .sf-icon-reuse:before {\n  content: \"\\e70f\";\n}\n\n[class*=\"e-ribbon-\"] .sf-icon-editor:before {\n  content: \"\\e70a\";\n}\n\n[class*=\"e-ribbon-\"] .sf-icon-word:before {\n  content: \"\\e70d\";\n}\n\n/* Sample level styles */\n#ribbonContainer .e-ribbon-backstage-content > div:first-child {\n  width: 550px;\n  padding: 25px;\n  height: 510px;\n}\n\n#home_content .new-wrapper {\n  margin-bottom: 15px;\n}\n\n.section-title {\n  font-size: 22px;\n}\n\n.new-docs {\n  display: flex;\n  justify-content: space-around;\n  flex-wrap: wrap;\n}\n\n.category_container {\n  width: 150px;\n  padding: 15px;\n  text-align: center;\n  cursor: pointer;\n}\n\n.doc_category_image {\n  width: 80px;\n  height: 100px;\n  background-color: #fff;\n  border: 1px solid rgb(125, 124, 124);\n  text-align: center;\n  overflow: hidden;\n  margin: 0px auto 10px;\n}\n\n.doc_category_text {\n  font-size: 16px;\n}\n\n.section-content {\n  padding: 12px 0px;\n  cursor: pointer;\n}\n\n.doc_icon {\n  font-size: 16px;\n  padding: 0px 10px;\n}\n\n/* Hover styles */\n.category_container:hover,\n.section-content:hover {\n  background-color: #dfdfdf;\n  border-radius: 5px;\n  transition: all 0.3s;\n}\n\nbody[class*=\"dark\"] .category_container:hover,\nbody[class*=\"dark\"] .section-content:hover,\nbody[class*=\"high\"] .category_container:hover,\nbody[class*=\"high\"] .section-content:hover {\n  background-color: #4d4b4b;\n}\n\n/* Responsive queries */\n@media screen and (max-width: 760px) {\n    #ribbonContainer .e-ribbon-backstage-content > div:first-child {\n        width: 400px;\n    }\n}\n@media screen and (max-width: 550px) {\n    #ribbonContainer .e-ribbon-backstage-content > div:first-child {\n        width: 200px;\n        padding: 10px;\n    }\n}\n","dataSource/datasource.json":"{\n    \"recentDocuments\": [\n        {\n            \"fileName\": \"Classic_layout.docx\",\n            \"location\": \"EJ2 >> Components >> Navigations >> Ribbon >> layouts\"\n        },\n        {\n            \"fileName\": \"Simplified_layout.docx\",\n            \"location\": \"EJ2 >> Components >> Navigations >> Ribbon >> layouts\"\n        },\n        {\n            \"fileName\": \"Ribbon_resize.docx\",\n            \"location\": \"EJ2 >> Components >> Navigations >> Ribbon >> resize\"\n        },\n        {\n            \"fileName\": \"Ribbon_backstage.docx\",\n            \"location\": \"EJ2 >> Components >> Navigations >> Ribbon >> backstage\"\n        },\n        {\n            \"fileName\": \"Ribbon_overflow.docx\",\n            \"location\": \"EJ2 >> Components >> Navigations >> Ribbon >> overflow\"\n        },\n        {\n            \"fileName\": \"Custom_items.docx\",\n            \"location\": \"EJ2 >> Components >> Navigations >> Ribbon >> items\"\n        }\n    ],\n    \"dataOptions\": {\n        \"info\": [\n            {\n                \"icon\": \"e-open-link\",\n                \"title\": \"Open in Desktop App\",\n                \"description\": \"Use the full functionality of Ribbon\"\n            },\n            {\n                \"icon\": \"e-protect-sheet\",\n                \"title\": \"Protect Document\",\n                \"description\": \"To prevent accidental changes, this document has been set to open as view-only.\"\n            },\n            {\n                \"icon\": \"e-send-to-back\",\n                \"title\": \"Version History\",\n                \"description\": \"View previous versions\"\n            }\n        ],\n        \"save\": [\n            {\n                \"icon\": \"e-save\",\n                \"title\": \"Save as\",\n                \"description\": \"Save a copy online\"\n            },\n            {\n                \"icon\": \"e-rename\",\n                \"title\": \"Rename\",\n                \"description\": \"Rename this file\"\n            },\n            {\n                \"icon\": \"e-download\",\n                \"title\": \"Download a Copy\",\n                \"description\": \"Download a local copy\"\n            },\n            {\n                \"icon\": \"e-export-pdf\",\n                \"title\": \"Download as PDF\",\n                \"description\": \"Download a copy as PDF file\"\n            },\n            {\n                \"icon\": \"e-chevron-down-fill\",\n                \"title\": \"Download as ODT\",\n                \"description\": \"Download a copy as ODT file\"\n            }\n        ],\n        \"export\": [\n            {\n                \"icon\": \"e-transform-right\",\n                \"title\": \"Transform to Web Page\",\n                \"description\": \"Transform your document into an interactive webpage\"\n            },\n            {\n                \"icon\": \"e-export\",\n                \"title\": \"Export to PowerPoint presentation\",\n                \"description\": \"Export your document into a multi-slide presentation\"\n            },\n            {\n                \"icon\": \"e-protect-workbook\",\n                \"title\": \"Send documents to Kindle\",\n                \"description\": \"Send documents to your Kindle device to read and annotate the documents\"\n            }\n        ],\n        \"print\": [\n            {\n                \"icon\": \"e-print-layout\",\n                \"title\": \"Print\",\n                \"description\": \"Print this document\"\n            }\n        ],\n        \"share\": [\n            {\n                \"icon\": \"e-arrow-right-up\",\n                \"title\": \"Share with People\",\n                \"description\": \"Invite other people to view or edit this document\"\n            },\n            {\n                \"icon\": \"e-protect-workbook\",\n                \"title\": \"Embed\",\n                \"description\": \"Embed this document in your blog or website\"\n            }\n        ],\n        \"account\": [\n            {\n                \"icon\": \"e-people\",\n                \"title\": \"Account type\",\n                \"description\": \"Administrator\"\n            },\n            {\n                \"icon\": \"e-password\",\n                \"title\": \"Password protected\",\n                \"description\": \"Yes\"\n            },\n            {\n                \"icon\": \"e-text-that-contains\",\n                \"title\": \"E-mail\",\n                \"description\": \"abc@gmail.com\"\n            }\n        ],\n        \"feedback\": [\n            {\n                \"icon\": \"e-check\",\n                \"title\": \"I Like Something\",\n                \"description\": \"It's nice to know when we have made a positive change.\"\n            },\n            {\n                \"icon\": \"e-close\",\n                \"title\": \"I Don't Like Something\",\n                \"description\": \"If something's not right we'd like to know so we can fix it.\"\n            },\n            {\n                \"icon\": \"e-comment-add\",\n                \"title\": \"I Have a Suggestion\",\n                \"description\": \"Do you have an idea for a new feature or an improvement ?\"\n            }\n        ]\n    }\n}\n","index.html":"<!DOCTYPE html>\n<html>\n<head>\n    <title>Syncfusion React Sample</title>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\n    <meta name=\"author\" content=\"Syncfusion\" />\n    <link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\n</head>\n\n<body class=\"{{theme}}\">\n     <style>\n            .control-section\n            {\n                margin-top: 100px;\n            }\n    </style>\n    <div id='sample'>\n</body>\n</html>\n","index.js":"import { createRoot } from 'react-dom/client';\nimport './index.css';\nimport * as React from 'react';\nimport { RibbonComponent, RibbonTabsDirective, RibbonTabDirective, RibbonCollectionsDirective, RibbonCollectionDirective, RibbonGroupsDirective, RibbonGroupDirective } from '@syncfusion/ej2-react-ribbon';\nimport { RibbonFileMenu, RibbonBackstage, RibbonKeyTip, RibbonItemsDirective, RibbonItemDirective, RibbonItemSize, RibbonGroupButtonSelection, Inject, DisplayMode, RibbonColorPicker } from '@syncfusion/ej2-react-ribbon';\nimport { ToastComponent } from '@syncfusion/ej2-react-notifications';\nimport { ListViewComponent } from '@syncfusion/ej2-react-lists';\nimport { SampleBase } from './sample-base';\n\nimport * as data from './dataSource/datasource.json';\nexport class KeyTip extends SampleBase {\n    ribbonObj;\n    pasteOptions = [{ text: \"Keep Source Format\" }, { text: \"Merge Format\" }, { text: \"Keep Text Only\" }];\n    findOptions = [{ text: \"Find\", iconCss: \"e-icons e-search\" }, { text: \"Advanced Find\", iconCss: \"e-icons e-search\" }, { text: \"Go to\", iconCss: \"e-icons e-arrow-right\" }];\n    selectOptions = [{ text: \"Select All\" }, { text: \"Select Objects\" }];\n    dictateOptions = [{ text: \"Chinese\" }, { text: \"English\" }, { text: \"German\" }, { text: \"French\" }];\n    tableOptions = [{ text: \"Insert Table\" }, { text: \"Draw Table\" }, { text: \"Convert Table\" }, { text: \"Excel Spreadsheet\" }];\n    shapeOptions = [{ text: \"Lines\" }, { text: \"Rectangles\" }, { text: \"Basic Arrows\" }, { text: \"Basic Shapes\" }, { text: \"FlowChart\" }];\n    headerOptions = [{ text: \"Insert Header\" }, { text: \"Edit Header\" }, { text: \"Remove Header\" }];\n    footerOptions = [{ text: \"Insert Footer\" }, { text: \"Edit Footer\" }, { text: \"Remove Footer\" }];\n    pageOptions = [{ text: \"Insert Top of page\" }, { text: \"Insert Bottom of page\" }, { text: \"Format Page Number\" }];\n    linkOptions = [{ text: \"Insert Link\", iconCss: \"e-icons e-link\" }, { text: \"Recent Links\", iconCss: \"e-icons e-clock\" }, { text: \"Bookmarks\", iconCss: \"e-icons e-bookmark\" }];\n    fontSize = [\"8\", \"9\", \"10\", \"11\", \"12\", \"14\", \"16\", \"18\", \"20\", \"22\", \"24\", \"26\", \"28\", \"36\", \"48\", \"72\", \"96\"];\n    fontStyle = [\"Algerian\", \"Arial\", \"Calibri\", \"Cambria\", \"Cambria Math\", \"Courier New\", \"Candara\", \"Georgia\", \"Impact\", \"Segoe Print\", \"Segoe Script\", \"Segoe UI\", \"Symbol\", \"Times New Roman\", \"Verdana\", \"Windings\"];\n    fileOptions = [{ text: \"New\", iconCss: \"e-icons e-file-new\", id: \"new\" },\n        { text: \"Open\", iconCss: \"e-icons e-folder-open\", id: \"Open\" },\n        { text: \"Rename\", iconCss: \"e-icons e-rename\", id: \"rename\" },\n        {\n            text: \"Save as\", iconCss: \"e-icons e-save\", id: \"save\",\n            items: [\n                { text: \"Microsoft Word (.docx)\", iconCss: \"sf-icon-word\", id: \"newword\" },\n                { text: \"Microsoft Word 97-2003(.doc)\", iconCss: \"sf-icon-word\", id: \"oldword\" },\n                { text: \"Download as PDF\", iconCss: \"e-icons e-export-pdf\", id: \"pdf\" }\n            ]\n        }];\n    toastInstance;\n    isPasteDisabled = true;\n    enablePaste() {\n        if (!this.isPasteDisabled) {\n            return;\n        }\n        this.ribbonObj.enableItem('pastebtn');\n        this.isPasteDisabled = false;\n    }\n    updateContent(args) {\n        this.toastInstance.show({ content: \"Last clicked item is \" + args });\n    }\n    launchClick(args) {\n        if (args.groupId == \"clipboard\") {\n            this.updateContent(\"Clipboard Launcher Icon\");\n        }\n        else if (args.groupId == \"illustration\") {\n            this.updateContent(\"Illustration Launcher Icon\");\n        }\n        else if (args.groupId == \"header_footer\") {\n            this.updateContent(\"Header & Footer Launcher Icon\");\n        }\n    }\n    isBackstageOpened = false;\n    handleClickInsideBackstageContent(e) {\n        e.stopPropagation();\n        var cName = e.target.className;\n        if (cName !== \"section-title\" && cName !== \"home-wrapper\" && cName !== \"new-wrapper\" && cName !== \"block-wrapper\" && cName !== \"e-ribbon-backstage-content\") {\n            this.ribbonObj.ribbonBackstageModule.hideBackstage();\n            this.toastInstance.show({ content: 'Backstage content is interacted and closed.' });\n            this.ribbonObj.element.querySelector('.e-ribbon-backstage-content').removeEventListener('click', this.handleClickInsideBackstageContent.bind(this));\n        }\n    }\n    backstageClickHandler() {\n        this.ribbonObj.ribbonBackstageModule.hideBackstage();\n        this.toastInstance.show({ content: 'Print action is selected' });\n    }\n    getBackstageContent(item) {\n        var homeContentTemplate = \"<div class='home-wrapper'>{{newSection}}{{recentSection}}</div>\";\n        var newSection = \"<div class='new-wrapper'><div class='section-title'> New </div><div class='category_container'><div class='doc_category_image'></div> <span class='doc_category_text'> New document </span></div></div>\";\n        var recentSection = \"<div class='block-wrapper'><div class='section-title'> Recent </div>{{recentWrapper}}</div>\";\n        var recentWrapper = \"<div class='section-content'><table><tbody><tr><td> <span class='doc_icon e-icons {{icon}}'></span> </td><td><span style='display: block; font-size: 14px'> {{title}} </span><span style='font-size: 12px'> {{description}} </span></td></tr></tbody></table></div>\";\n        var blockSection = \"<div class='block-wrapper'> <div class='section-title'> {{blockTitle}} </div> {{blockSection}} </div>\";\n        var content = \"\";\n        var recentDocUpdatedString = \"\";\n        switch (item) {\n            case 'home': {\n                data['recentDocuments'].slice(0, 3).forEach(function (doc) { recentDocUpdatedString += recentWrapper.replace(/{{icon}}/g, 'e-notes').replace(/{{title}}/g, doc.fileName).replace(/{{description}}/g, doc.location); });\n                var updatedRecentSection = recentSection.replace(/{{recentWrapper}}/g, recentDocUpdatedString);\n                content = homeContentTemplate.replace(/{{newSection}}/g, newSection).replace(/{{recentSection}}/g, updatedRecentSection);\n                break;\n            }\n            case 'new': {\n                content = newSection;\n                break;\n            }\n            case 'open': {\n                data['recentDocuments'].forEach(function (doc) { recentDocUpdatedString += recentWrapper.replace(/{{icon}}/g, 'e-notes').replace(/{{title}}/g, doc.fileName).replace(/{{description}}/g, doc.location); });\n                content = recentSection.replace(/{{recentWrapper}}/g, recentDocUpdatedString);\n                break;\n            }\n            default:\n                data['dataOptions'][item].forEach(function (doc) { recentDocUpdatedString += recentWrapper.replace(/{{icon}}/g, doc.icon).replace(/{{title}}/g, doc.title).replace(/{{description}}/g, doc.description); });\n                content = blockSection.replace(/{{blockSection}}/g, recentDocUpdatedString).replace(/{{blockTitle}}/g, (item.charAt(0).toUpperCase() + item.slice(1)));\n                break;\n        }\n        return content;\n    }\n    menuItems = [\n        { id: 'home', text: 'Home', iconCss: 'e-icons e-home', content: this.getBackstageContent('home'), keyTip: 'H' },\n        { id: 'new', text: 'New', iconCss: 'e-icons e-file-new', content: this.getBackstageContent('new'), keyTip: 'N' },\n        { id: 'open', text: 'Open', iconCss: 'e-icons e-folder-open', content: this.getBackstageContent('open'), keyTip: 'O' },\n        { separator: true },\n        { id: 'info', text: 'Info', content: this.getBackstageContent('info'), keyTip: 'I' },\n        { id: 'saveAs', text: 'Save as', content: this.getBackstageContent('save'), keyTip: 'S' },\n        { id: 'export', text: 'Export', content: this.getBackstageContent('export'), keyTip: 'M' },\n        { id: 'print', text: 'Print', backStageItemClick: this.backstageClickHandler.bind(this), keyTip: 'P' },\n        { id: 'share', text: 'Share', content: this.getBackstageContent('share'), keyTip: 'Z' },\n        { separator: true, isFooter: true },\n        { id: 'account', text: 'Account', isFooter: true, content: this.getBackstageContent('account'), keyTip: 'D' },\n        { id: 'feedback', text: 'Feedback', isFooter: true, content: this.getBackstageContent('feedback'), keyTip: 'K' }\n    ];\n    ribbonCreated() {\n        if (!this.isBackstageOpened) {\n            this.ribbonObj.element.querySelector('.e-ribbon-backstage').addEventListener('click', this.backstageClick.bind(this));\n        }\n        this.ribbonObj.ribbonKeyTipModule.showKeyTips();\n    }\n    backstageClick() {\n        this.isBackstageOpened = true;\n        this.ribbonObj.element.querySelector('.e-ribbon-backstage-content').addEventListener('click', this.handleClickInsideBackstageContent.bind(this));\n    }\n    render() {\n        return (<div className='control-pane'>\n                <div className='col-lg-12 control-section ribbon-keytip-section'>\n                    <div className='control ribbon-sample'>\n                        <div id=\"ribbonContainer\" className='ribbon-keytip-container'>\n                            <RibbonComponent id='keytip-ribbon' ref={ribbonDefault => { this.ribbonObj = ribbonDefault; }} enableKeyTips={true} layoutSwitcherKeyTip=\"ZR\" backStageMenu={{ text: 'File', visible: true, items: this.menuItems, backButton: { text: 'Close' } }} created={this.ribbonCreated} launcherIconClick={this.launchClick}>\n                            <RibbonTabsDirective>\n                                    <RibbonTabDirective header='Home' keyTip=\"H\">\n                                        <RibbonGroupsDirective>\n                                            <RibbonGroupDirective header=\"Clipboard\" id='clipboard' groupIconCss=\"e-icons e-paste\">\n                                                <RibbonCollectionsDirective>\n                                                    <RibbonCollectionDirective>\n                                                        <RibbonItemsDirective>\n                                                            <RibbonItemDirective type=\"SplitButton\" disabled={true} keyTip='V' id=\"pastebtn\" allowedSizes={RibbonItemSize.Large} splitButtonSettings={{ iconCss: \"e-icons e-paste\", items: this.pasteOptions, content: \"Paste\", select: function (args) { this.updateContent(\"Paste -> \" + args.item.text); }, click: function () { this.updateContent(\"Paste\"); } }}>\n                                                            </RibbonItemDirective>\n                                                        </RibbonItemsDirective>\n                                                    </RibbonCollectionDirective>\n                                                    <RibbonCollectionDirective>\n                                                        <RibbonItemsDirective>\n                                                            <RibbonItemDirective type=\"Button\" keyTip='X' buttonSettings={{ iconCss: \"e-icons e-cut\", content: \"Cut\", clicked: function () { this.updateContent(\"Cut\"); this.enablePaste(); } }}>\n                                                            </RibbonItemDirective>\n                                                            <RibbonItemDirective type=\"Button\" keyTip='C' buttonSettings={{ iconCss: \"e-icons e-copy\", content: \"Copy\", clicked: function () { this.updateContent(\"Copy\"); this.enablePaste(); } }}>\n                                                            </RibbonItemDirective>\n                                                            <RibbonItemDirective type=\"Button\" keyTip='FP' buttonSettings={{ iconCss: \"e-icons e-format-painter\", content: \"Format Painter\", clicked: function () { this.updateContent(\"Format Painter\"); } }}>\n                                                            </RibbonItemDirective>\n                                                        </RibbonItemsDirective>\n                                                    </RibbonCollectionDirective>\n                                                </RibbonCollectionsDirective>\n                                            </RibbonGroupDirective>\n                                            <RibbonGroupDirective header=\"Font\" overflowHeader=\"More Font Options\" groupIconCss=\"e-icons e-bold\" isCollapsible={false} launcherIconKeyTip=\"FJ\" showLauncherIcon={true} enableGroupOverflow={true} orientation=\"Row\" cssClass='font-group'>\n                                                <RibbonCollectionsDirective>\n                                                    <RibbonCollectionDirective>\n                                                        <RibbonItemsDirective>\n                                                            <RibbonItemDirective type=\"ComboBox\" keyTip='FF' comboBoxSettings={{ dataSource: this.fontStyle, index: 3, label: 'Font Style', width: '115px', popupWidth: '150px', allowFiltering: true, change: function (args) { if (args.itemData) {\n                this.updateContent(\"Font Style -> \" + args.itemData.text);\n            } } }}>\n                                                            </RibbonItemDirective>\n                                                            <RibbonItemDirective type=\"ComboBox\" keyTip='FS' comboBoxSettings={{ dataSource: this.fontSize, index: 3, label: 'Font Size', width: '65px', popupWidth: '85px', allowFiltering: true, change: function (args) { if (args.itemData) {\n                this.updateContent(\"Font Size -> \" + args.itemData.text);\n            } } }}>\n                                                            </RibbonItemDirective>\n                                                        </RibbonItemsDirective>\n                                                    </RibbonCollectionDirective>\n                                                    <RibbonCollectionDirective>\n                                                        <RibbonItemsDirective>\n                                                            <RibbonItemDirective type=\"ColorPicker\" keyTip='CP' allowedSizes={RibbonItemSize.Small} displayOptions={DisplayMode.Simplified | DisplayMode.Classic} colorPickerSettings={{ value: '#123456', change: function (args) { this.updateContent(args.currentValue.hex + \" color\"); } }}>\n                                                            </RibbonItemDirective>\n                                                            <RibbonItemDirective type=\"Button\" keyTip='1' allowedSizes={RibbonItemSize.Small} buttonSettings={{ iconCss: \"e-icons e-bold\", content: \"Bold\", isToggle: true, clicked: function () { this.updateContent(\"Bold\"); } }}>\n                                                            </RibbonItemDirective>\n                                                            <RibbonItemDirective type=\"Button\" keyTip='2' allowedSizes={RibbonItemSize.Small} buttonSettings={{ iconCss: \"e-icons e-italic\", content: \"Italic\", isToggle: true, clicked: function () { this.updateContent(\"Italic\"); } }}>\n                                                            </RibbonItemDirective>\n                                                            <RibbonItemDirective type=\"Button\" keyTip='3' allowedSizes={RibbonItemSize.Small} buttonSettings={{ iconCss: \"e-icons e-underline\", content: \"Underline\", isToggle: true, clicked: function () { this.updateContent(\"Underline\"); } }}>\n                                                            </RibbonItemDirective>\n                                                            <RibbonItemDirective type=\"Button\" keyTip='4' allowedSizes={RibbonItemSize.Small} buttonSettings={{ iconCss: \"e-icons e-strikethrough\", content: \"Strikethrough\", isToggle: true, clicked: function () { this.updateContent(\"Strikethrough\"); } }}>\n                                                            </RibbonItemDirective>\n                                                            <RibbonItemDirective type=\"Button\" keyTip='5' allowedSizes={RibbonItemSize.Small} buttonSettings={{ iconCss: \"e-icons e-change-case\", content: \"Change Case\", isToggle: true, clicked: function () { this.updateContent(\"Change case\"); } }}>\n                                                            </RibbonItemDirective>\n                                                        </RibbonItemsDirective>\n                                                    </RibbonCollectionDirective>\n                                                </RibbonCollectionsDirective>\n                                            </RibbonGroupDirective>\n                                            <RibbonGroupDirective header=\"Paragraph\" launcherIconKeyTip=\"PG\" showLauncherIcon={true} groupIconCss=\"e-icons e-align-center\" orientation=\"Row\">\n                                                <RibbonCollectionsDirective>\n                                                    <RibbonCollectionDirective>\n                                                        <RibbonItemsDirective>\n                                                            <RibbonItemDirective type=\"Button\" keyTip='AO' allowedSizes={RibbonItemSize.Small} buttonSettings={{ iconCss: \"e-icons e-decrease-indent\", content: 'Decrease Indent', clicked: function () { this.updateContent(\"Decrease Indent\"); } }}>\n                                                            </RibbonItemDirective>\n                                                            <RibbonItemDirective type=\"Button\" keyTip='AI' allowedSizes={RibbonItemSize.Small} buttonSettings={{ iconCss: \"e-icons e-increase-indent\", content: 'Increase Indent', clicked: function () { this.updateContent(\"Increase Indent\"); } }}>\n                                                            </RibbonItemDirective>\n                                                            <RibbonItemDirective type=\"Button\" keyTip='FM' allowedSizes={RibbonItemSize.Small} buttonSettings={{ iconCss: \"e-icons e-paragraph\", content: 'Paragraph', clicked: function () { this.updateContent(\"Paragraph Mark\"); } }}>\n                                                            </RibbonItemDirective>\n                                                        </RibbonItemsDirective>\n                                                    </RibbonCollectionDirective>\n                                                    <RibbonCollectionDirective>\n                                                        <RibbonItemsDirective>\n                                                            <RibbonItemDirective type=\"GroupButton\" allowedSizes={RibbonItemSize.Small} groupButtonSettings={{ selection: RibbonGroupButtonSelection.Single, header: 'Alignment', items: [{ iconCss: 'e-icons e-align-left', selected: true, click: () => { this.updateContent(\"Align Left\"); }, keyTip: \"AL\" }, { iconCss: 'e-icons e-align-center', click: () => { this.updateContent(\"Align Center\"); }, keyTip: \"AC\" }, { iconCss: 'e-icons e-align-right', click: () => { this.updateContent(\"Align Right\"); }, keyTip: \"AR\" }, { iconCss: 'e-icons e-justify', click: () => { this.updateContent(\"Justify\"); }, keyTip: \"AJ\" }] }}>\n                                                            </RibbonItemDirective>\n                                                        </RibbonItemsDirective>\n                                                    </RibbonCollectionDirective>\n                                                </RibbonCollectionsDirective>\n                                            </RibbonGroupDirective>\n                                            <RibbonGroupDirective header=\"Editing\" groupIconCss=\"e-icons e-edit\" orientation=\"Column\">\n                                                <RibbonCollectionsDirective>\n                                                    <RibbonCollectionDirective>\n                                                        <RibbonItemsDirective>\n                                                            <RibbonItemDirective type=\"SplitButton\" keyTip='FD' splitButtonSettings={{ iconCss: \"e-icons e-search\", items: this.findOptions, content: \"Find\", select: function (args) { this.updateContent(\"Find -> \" + args.item.text); }, click: function () { this.updateContent(\"Find\"); } }}>\n                                                            </RibbonItemDirective>\n                                                            <RibbonItemDirective type=\"Button\" keyTip='R' buttonSettings={{ iconCss: \"e-icons e-replace\", content: 'Replace', clicked: function () { this.updateContent(\"Replace\"); } }}>\n                                                            </RibbonItemDirective>\n                                                            <RibbonItemDirective type=\"SplitButton\" keyTip='S' splitButtonSettings={{ iconCss: \"e-icons e-mouse-pointer\", items: this.selectOptions, content: \"Select\", select: function (args) { this.updateContent(\"Select -> \" + args.item.text); }, click: function () { this.updateContent(\"Select\"); } }}>\n                                                            </RibbonItemDirective>\n                                                        </RibbonItemsDirective>\n                                                    </RibbonCollectionDirective>\n                                                </RibbonCollectionsDirective>\n                                            </RibbonGroupDirective>\n                                            <RibbonGroupDirective header=\"Voice\" groupIconCss=\"sf-icon-dictate\" isCollapsible={false}>\n                                                <RibbonCollectionsDirective>\n                                                    <RibbonCollectionDirective>\n                                                        <RibbonItemsDirective>\n                                                            <RibbonItemDirective type=\"SplitButton\" keyTip='D' allowedSizes={RibbonItemSize.Large} splitButtonSettings={{ iconCss: \"sf-icon-dictate\", items: this.dictateOptions, content: \"Dictate\", select: function (args) { this.updateContent(\"Dictate -> \" + args.item.text); }, click: function () { this.updateContent(\"Dictate\"); } }}>\n                                                            </RibbonItemDirective>\n                                                        </RibbonItemsDirective>\n                                                    </RibbonCollectionDirective>\n                                                </RibbonCollectionsDirective>\n                                            </RibbonGroupDirective>\n                                            <RibbonGroupDirective header=\"Editor\" groupIconCss=\"sf-icon-editor\" isCollapsible={false}>\n                                                <RibbonCollectionsDirective>\n                                                    <RibbonCollectionDirective>\n                                                        <RibbonItemsDirective>\n                                                            <RibbonItemDirective type=\"Button\" allowedSizes={RibbonItemSize.Large} buttonSettings={{ iconCss: \"sf-icon-editor\", content: \"Editor\", clicked: function () { this.updateContent(\"Editor\"); } }}>\n                                                            </RibbonItemDirective>\n                                                        </RibbonItemsDirective>\n                                                    </RibbonCollectionDirective>\n                                                </RibbonCollectionsDirective>\n                                            </RibbonGroupDirective>\n                                            <RibbonGroupDirective header=\"Reuse Files\" groupIconCss=\"sf-icon-reuse\" isCollapsible={false}>\n                                                <RibbonCollectionsDirective>\n                                                    <RibbonCollectionDirective>\n                                                        <RibbonItemsDirective>\n                                                            <RibbonItemDirective type=\"Button\" keyTip='RF' disabled={true} allowedSizes={RibbonItemSize.Large} buttonSettings={{ iconCss: \"sf-icon-reuse\", content: \"Reuse Files\", clicked: function () { this.updateContent(\"Reuse Files\"); } }}>\n                                                            </RibbonItemDirective>\n                                                        </RibbonItemsDirective>\n                                                    </RibbonCollectionDirective>\n                                                </RibbonCollectionsDirective>\n                                            </RibbonGroupDirective>\n                                        </RibbonGroupsDirective>\n                                    </RibbonTabDirective>\n                                    <RibbonTabDirective header='Insert' keyTip=\"N\">\n                                        <RibbonGroupsDirective>\n                                            <RibbonGroupDirective header=\"Tables\" isCollapsible={false}>\n                                                <RibbonCollectionsDirective>\n                                                    <RibbonCollectionDirective>\n                                                        <RibbonItemsDirective>\n                                                            <RibbonItemDirective type=\"DropDown\" keyTip='T' allowedSizes={RibbonItemSize.Large} dropDownSettings={{ iconCss: \"e-icons e-table\", items: this.tableOptions, content: \"Table\", select: function (args) { this.updateContent(\"Table -> \" + args.item.text); } }}>\n                                                            </RibbonItemDirective>\n                                                        </RibbonItemsDirective>\n                                                    </RibbonCollectionDirective>\n                                                </RibbonCollectionsDirective>\n                                            </RibbonGroupDirective>\n                                            <RibbonGroupDirective header=\"Illustration\" overflowHeader=\"Illustrations\" id=\"illustration\" groupIconCss=\"e-icons e-image\" enableGroupOverflow={true} orientation=\"Row\">\n                                                <RibbonCollectionsDirective>\n                                                    <RibbonCollectionDirective>\n                                                        <RibbonItemsDirective>\n                                                            <RibbonItemDirective id='pictureddl' keyTip='P' type=\"DropDown\" dropDownSettings={{ iconCss: \"e-icons e-image\", content: \"Pictures\", target: '#default-pictureList' }}>\n                                                            </RibbonItemDirective>\n                                                            <RibbonItemDirective type=\"DropDown\" keyTip='SA' dropDownSettings={{ iconCss: \"sf-icon-shapes\", items: this.shapeOptions, content: \"Shapes\", select: function (args) { this.updateContent(\"Shapes -> \" + args.item.text); } }}>\n                                                            </RibbonItemDirective>\n                                                            <RibbonItemDirective type=\"Button\" keyTip='3D' buttonSettings={{ iconCss: \"sf-icon-3d-model\", content: \"3D Models\", clicked: function () { this.updateContent(\"3D Models\"); } }}>\n                                                            </RibbonItemDirective>\n                                                            <RibbonItemDirective type=\"Button\" keyTip='M' buttonSettings={{ iconCss: \"sf-icon-smart-art\", content: \"Smart Art\", clicked: function () { this.updateContent(\"Smart Art\"); } }}>\n                                                            </RibbonItemDirective>\n                                                            <RibbonItemDirective type=\"Button\" keyTip='CC' buttonSettings={{ iconCss: \"sf-icon-chart\", content: \"Charts\", clicked: function () { this.updateContent(\"Chart\"); } }}>\n                                                            </RibbonItemDirective>\n                                                            <RibbonItemDirective type=\"Button\" keyTip='SS' buttonSettings={{ iconCss: \"sf-icon-screenshot\", content: \"Screenshot\", clicked: function () { this.updateContent(\"Screenshot\"); } }}>\n                                                            </RibbonItemDirective>\n                                                        </RibbonItemsDirective>\n                                                    </RibbonCollectionDirective>\n                                                </RibbonCollectionsDirective>\n                                            </RibbonGroupDirective>\n                                            <RibbonGroupDirective header=\"Header & Footer\" id=\"header_footer\" groupIconCss=\"e-icons e-table\" orientation=\"Column\" showLauncherIcon={true}>\n                                                <RibbonCollectionsDirective>\n                                                    <RibbonCollectionDirective>\n                                                        <RibbonItemsDirective>\n                                                            <RibbonItemDirective type=\"DropDown\" keyTip='H' dropDownSettings={{ iconCss: \"e-icons e-header\", items: this.headerOptions, content: \"Header\", select: function (args) { this.updateContent(\"Header -> \" + args.item.text); } }}>\n                                                            </RibbonItemDirective>\n                                                            <RibbonItemDirective type=\"DropDown\" keyTip='HF' dropDownSettings={{ iconCss: \"e-icons e-footer\", items: this.footerOptions, content: \"Footer\", select: function (args) { this.updateContent(\"Footer -> \" + args.item.text); } }}>\n                                                            </RibbonItemDirective>\n                                                            <RibbonItemDirective type=\"DropDown\" keyTip='NU' dropDownSettings={{ iconCss: \"e-icons e-page-numbering\", items: this.pageOptions, content: \"Page Numbering\", select: function (args) { this.updateContent(\"Page Numbering -> \" + args.item.text); } }}>\n                                                            </RibbonItemDirective>\n                                                        </RibbonItemsDirective>\n                                                    </RibbonCollectionDirective>\n                                                </RibbonCollectionsDirective>\n                                            </RibbonGroupDirective>\n                                            <RibbonGroupDirective header=\"Comments\" isCollapsible={false}>\n                                                <RibbonCollectionsDirective>\n                                                    <RibbonCollectionDirective>\n                                                        <RibbonItemsDirective>\n                                                            <RibbonItemDirective type=\"Button\" keyTip='C' allowedSizes={RibbonItemSize.Large} buttonSettings={{ iconCss: \"e-icons e-comment-add\", content: \"New Comment\", clicked: function () { this.updateContent(\"New Comment\"); } }}>\n                                                            </RibbonItemDirective>\n                                                        </RibbonItemsDirective>\n                                                    </RibbonCollectionDirective>\n                                                </RibbonCollectionsDirective>\n                                            </RibbonGroupDirective>\n                                            <RibbonGroupDirective header=\"Links\" groupIconCss=\"e-icons e-link\" isCollapsible={false}>\n                                                <RibbonCollectionsDirective>\n                                                    <RibbonCollectionDirective>\n                                                        <RibbonItemsDirective>\n                                                            <RibbonItemDirective type=\"DropDown\" keyTip='L2' allowedSizes={RibbonItemSize.Large} dropDownSettings={{ iconCss: \"e-icons e-link\", items: this.linkOptions, content: \"Link\", select: function (args) { this.updateContent(\"Link -> \" + args.item.text); } }}>\n                                                            </RibbonItemDirective>\n                                                        </RibbonItemsDirective>\n                                                    </RibbonCollectionDirective>\n                                                </RibbonCollectionsDirective>\n                                            </RibbonGroupDirective>\n                                        </RibbonGroupsDirective>\n                                    </RibbonTabDirective>\n                                    <RibbonTabDirective header='View' keyTip=\"W\">\n                                        <RibbonGroupsDirective>\n                                            <RibbonGroupDirective header=\"Views\" groupIconCss='e-icons e-print' orientation='Row'>\n                                                <RibbonCollectionsDirective>\n                                                    <RibbonCollectionDirective>\n                                                        <RibbonItemsDirective>\n                                                            <RibbonItemDirective type=\"Button\" keyTip='F' buttonSettings={{ iconCss: \"sf-icon-read\", content: \"Read Mode\", clicked: function () { this.updateContent(\"Read Mode\"); } }}>\n                                                            </RibbonItemDirective>\n                                                            <RibbonItemDirective type=\"Button\" keyTip='LP' buttonSettings={{ iconCss: \"e-icons e-print\", content: \"Print Layout\", clicked: function () { this.updateContent(\"Print Layout\"); } }}>\n                                                            </RibbonItemDirective>\n                                                            <RibbonItemDirective type=\"Button\" keyTip='W' buttonSettings={{ iconCss: \"sf-icon-web-layout\", content: \"Web Layout\", clicked: function () { this.updateContent(\"Web Layout\"); } }}>\n                                                            </RibbonItemDirective>\n                                                        </RibbonItemsDirective>\n                                                    </RibbonCollectionDirective>\n                                                </RibbonCollectionsDirective>\n                                            </RibbonGroupDirective>\n                                            <RibbonGroupDirective header=\"Zoom\" groupIconCss=\"e-icons e-zoom-to-fit\" orientation=\"Row\">\n                                                <RibbonCollectionsDirective>\n                                                    <RibbonCollectionDirective>\n                                                        <RibbonItemsDirective>\n                                                            <RibbonItemDirective type=\"Button\" keyTip='Q' buttonSettings={{ iconCss: \"e-icons e-zoom-in\", content: \"Zoom in\", clicked: function () { this.updateContent(\"Zoom in\"); } }}>\n                                                            </RibbonItemDirective>\n                                                            <RibbonItemDirective type=\"Button\" keyTip='J' buttonSettings={{ iconCss: \"e-icons e-zoom-out\", content: \"Zoom out\", clicked: function () { this.updateContent(\"Zoom out\"); } }}>\n                                                            </RibbonItemDirective>\n                                                        </RibbonItemsDirective>\n                                                    </RibbonCollectionDirective>\n                                                </RibbonCollectionsDirective>\n                                            </RibbonGroupDirective>\n                                            <RibbonGroupDirective header=\"Show\" isCollapsible={true}>\n                                                <RibbonCollectionsDirective>\n                                                    <RibbonCollectionDirective>\n                                                        <RibbonItemsDirective>\n                                                            <RibbonItemDirective type=\"CheckBox\" keyTip='VR' checkBoxSettings={{ label: \"Ruler\", checked: false, change: function () { this.updateContent(\"Ruler\"); } }}>\n                                                            </RibbonItemDirective>\n                                                            <RibbonItemDirective type=\"CheckBox\" keyTip='VG' checkBoxSettings={{ label: \"Gridlines\", checked: false, change: function () { this.updateContent(\"Gridlines\"); } }}>\n                                                            </RibbonItemDirective>\n                                                            <RibbonItemDirective type=\"CheckBox\" keyTip='VN' checkBoxSettings={{ label: \"Navigation Pane\", checked: true, change: function () { this.updateContent(\"Navigation Pane\"); } }}>\n                                                            </RibbonItemDirective>\n                                                        </RibbonItemsDirective>\n                                                    </RibbonCollectionDirective>\n                                                </RibbonCollectionsDirective>\n                                            </RibbonGroupDirective>\n                                            <RibbonGroupDirective header=\"Dark Mode\" isCollapsible={false}>\n                                                <RibbonCollectionsDirective>\n                                                    <RibbonCollectionDirective>\n                                                        <RibbonItemsDirective>\n                                                            <RibbonItemDirective type=\"Button\" keyTip='D' buttonSettings={{ iconCss: \"sf-icon-mode\", content: \"Dark Mode\", clicked: function () { this.this.updateContent(\"Dark Mode\"); } }}>\n                                                            </RibbonItemDirective>\n                                                        </RibbonItemsDirective>\n                                                    </RibbonCollectionDirective>\n                                                </RibbonCollectionsDirective>\n                                            </RibbonGroupDirective>\n                                        </RibbonGroupsDirective>\n                                    </RibbonTabDirective>\n                                </RibbonTabsDirective>\n                            <Inject services={[RibbonFileMenu, RibbonColorPicker, RibbonBackstage, RibbonKeyTip]}/>\n                            </RibbonComponent>\n                            <div id=\"keytip-ribbonPlaceHolder\">\n                                <div className=\"content1\"></div>\n                                <div className=\"content2\"></div>\n                                <div className=\"content3\"></div>\n                                <div className=\"content4\"></div>\n                                <ToastComponent id='toast' ref={toast => this.toastInstance = toast} position={{ X: 'Right' }} width='auto' height={25} timeOut={2000} cssClass='e-toast-info' showCloseButton={true} target=\"#keytip-ribbonPlaceHolder\" newestOnTop={true} animation={{ show: { effect: 'FadeIn' }, hide: { effect: 'FadeOut' } }}/>\n                            </div>\n                            <ListViewComponent id='keytip-pictureList' dataSource={['This Device', 'Stock Images', 'Online Images']} showHeader={true} headerTitle=\"Insert Picture From\" select={function (args) { this.updateContent(\"Picture -> \" + args.text); }}></ListViewComponent>\n                        </div>\n                    </div>\n                </div>\n            </div>);\n    }\n}\n\nconst root = createRoot(document.getElementById('sample'));\nroot.render(<KeyTip />);","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n                this.rendereComplete();\n            });\n        }\n    }\n    export function updateSampleSection(){}\n    ","dependencies":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-react-base\":\"*\",\"@syncfusion/ej2-ribbon\":\"*\",\"@syncfusion/ej2-react-ribbon\":\"*\",\"@syncfusion/ej2-splitbuttons\":\"*\",\"@syncfusion/ej2-react-splitbuttons\":\"*\",\"@syncfusion/ej2-notifications\":\"*\",\"@syncfusion/ej2-react-notifications\":\"*\",\"@syncfusion/ej2-lists\":\"*\",\"@syncfusion/ej2-react-lists\":\"*\",\"@syncfusion/ej2-navigations\":\"*\",\"@syncfusion/ej2-react-navigations\":\"*\",\"@syncfusion/ej2-react-charts\":\"*\",\"@syncfusion/ej2/base\":\"*\",\"@syncfusion/ej2-charts'; // Import the necessary types from Syncfusion\":\"*\",\"@syncfusion/ej2-documenteditor\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-react-popups\":\"*\",\"@syncfusion/ej2-pivotview\":\"*\",\"@syncfusion/ej2-react-progressbar\":\"*\"}"}