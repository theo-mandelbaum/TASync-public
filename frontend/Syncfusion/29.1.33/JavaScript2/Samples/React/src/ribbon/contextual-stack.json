{"index.css":".e-table-selected {\n  border: 1px solid #0078D6;\n}\n#contextual-ribbonPlaceHolder .table-content {\n  width: 70%;\n  display: flex;\n  flex-direction: column;\n  margin: 0 auto;\n}\n.ribbon-table {\n  width: 50%;\n  background-color: #fff;\n  margin: 20px auto;\n}\n\n#ribbonImage {\n  width: 50%;\n  height: auto;\n  margin: 0 auto 30px;\n  padding: 1px;\n  border: 2px solid;\n  border-color: transparent;\n}\n\n#ribbonImage.e-image-selected {\n  border-color: #0078D6;\n}\n\n.table-header {\n  font-size: 1vw;\n  text-align: center;\n  color: black;\n  padding-bottom: 15px;\n}\n\n#tableRow1, #tableRow2, #tableRow3 {\n  height: 20px;\n}\n\n@media screen and (max-width: 550px) {\n  .table-header {\n      font-size: 2vw;\n  }\n}\n\n#pictureList {\n  display: none;\n  border: 1px;\n  box-shadow: 0 0 2px;\n}\n\n#pictureddl-popup #pictureList {\n  display: block;\n}\n\n.e-bigger #pictureList .e-list-header {\nbackground-color: white;\n}\n\nbody[class*=\"dark\"].e-bigger #pictureList .e-list-header,\nbody[class*=\"high\"].e-bigger #pictureList .e-list-header {\n  background-color: #212529;\n}\n\n.e-bigger #pictureList ul {\n  padding: 0px;\n  margin-top: 0px;\n}\n\n#contextual-ribbonContainer {\n  padding: 20px;\n  background-color: #dbdadacc;\n}\n\n#ribbon {\n  box-sizing: border-box;\n}\n\n#contextual-ribbonPlaceHolder .e-toast-close-icon {\n  position: absolute;\n  top: 50%;\n  right: 2px ;\n  transform: translateY(-50%);\n  margin: 0;\n}\n\n#contextual-ribbonPlaceHolder .e-toast-content {\n  padding-right: 25px;\n}\n\n#contextual-ribbonPlaceHolder {\n  background-color: transparent;\n  box-sizing: border-box;\n  gap: 10px;\n  margin-top: 15px;\n}\n\n#contextual-ribbonPlaceHolder .content-wrap {\n  background-color: #9d9c9a;\n  width: 100%;\n  padding: 30px 0;\n}\n\nbody[class*=\"dark\"] #contextual-ribbonPlaceHolder,\nbody[class*=\"high\"] #contextual-ribbonPlaceHolder {\n  background-color: #5b5958;\n}\n\n.font-group .e-ribbon-group-content {\n  justify-content: center;\n}\n\n#header_footer .e-ribbon-group-overflow-ddb {\n  min-width: 10ch;\n}\n\n@font-face {\n  font-family: 'ribbon';\n  src: url(data:application/x-font-ttf;charset=utf-8;base64,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) format('truetype');\n  font-weight: normal;\n  font-style: normal;\n}\n\n[class^=\"sf-icon-\"], [class*=\" sf-icon-\"] {\n  font-family: 'ribbon' !important;\n  speak: none;\n  font-style: normal;\n  font-weight: normal;\n  font-variant: normal;\n  text-transform: none;\n  line-height: 1;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n.sf-icon-3d-model:before { content: \"\\e700\"; }\n.sf-icon-shapes:before { content: \"\\e701\"; }\n.sf-icon-dictate:before { content: \"\\e702\"; }\n.sf-icon-chart:before { content: \"\\e703\"; }\n.sf-icon-screenshot:before { content: \"\\e704\"; }\n.sf-icon-smart-art:before { content: \"\\e706\"; }\n.sf-icon-share:before { content: \"\\e707\"; }\n.sf-icon-read:before { content: \"\\e708\"; }\n.sf-icon-web-layout:before { content: \"\\e709\"; }\n.sf-icon-mode:before { content: \"\\e70b\"; }\n.sf-icon-draft:before { content: \"\\e70c\"; }\n.sf-icon-reuse:before { content: \"\\e70f\"; }\n.sf-icon-editor:before { content: \"\\e70a\"; }\n.sf-icon-word:before { content: \"\\e70d\"; }","index.html":"<!DOCTYPE html>\n<html>\n<head>\n    <title>Syncfusion React Sample</title>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\n    <meta name=\"author\" content=\"Syncfusion\" />\n    <link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\n</head>\n\n<body class=\"{{theme}}\">\n     <style>\n            .control-section\n            {\n                margin-top: 100px;\n            }\n    </style>\n    <div id='sample'>\n</body>\n</html>\n","index.js":"import { createRoot } from 'react-dom/client';\nimport './index.css';\nimport * as React from 'react';\nimport { RibbonComponent, RibbonTabsDirective, RibbonTabDirective, RibbonCollectionsDirective, RibbonCollectionDirective, RibbonGroupsDirective, RibbonGroupDirective, RibbonContextualTabsDirective, RibbonContextualTabDirective, RibbonContextualTab } from '@syncfusion/ej2-react-ribbon';\nimport { RibbonFileMenu, RibbonItemsDirective, RibbonItemDirective, RibbonItemSize, Inject, DisplayMode, RibbonColorPicker, RibbonGroupButtonSelection } from '@syncfusion/ej2-react-ribbon';\nimport { ToastComponent } from '@syncfusion/ej2-react-notifications';\nimport { ListViewComponent } from '@syncfusion/ej2-react-lists';\nimport { SampleBase } from './sample-base';\n\nexport class Contextual extends SampleBase {\n    ribbonObj;\n    selectedCell = null;\n    tableElement = null;\n    imageElement = null;\n    placeholderElement = null;\n    pasteOptions = [{ text: \"Keep Source Format\" }, { text: \"Merge Format\" }, { text: \"Keep Text Only\" }];\n    findOptions = [{ text: \"Find\", iconCss: \"e-icons e-search\" }, { text: \"Advanced Find\", iconCss: \"e-icons e-search\" }, { text: \"Go to\", iconCss: \"e-icons e-arrow-right\" }];\n    selectOptions = [{ text: \"Select All\" }, { text: \"Select Objects\" }];\n    dictateOptions = [{ text: \"Chinese\" }, { text: \"English\" }, { text: \"German\" }, { text: \"French\" }];\n    tableOptions = [{ text: \"Insert Table\" }, { text: \"Draw Table\" }, { text: \"Convert Table\" }, { text: \"Excel SpreadSheet\" }];\n    shapeOptions = [{ text: \"Lines\" }, { text: \"Rectangles\" }, { text: \"Basic Arrows\" }, { text: \"Basic Shapes\" }, { text: \"FlowChart\" }];\n    headerOptions = [{ text: \"Insert Header\" }, { text: \"Edit Header\" }, { text: \"Remove Header\" }];\n    footerOptions = [{ text: \"Insert Footer\" }, { text: \"Edit Footer\" }, { text: \"Remove Footer\" }];\n    pageOptions = [{ text: \"Insert Top of page\" }, { text: \"Insert Bottom of page\" }, { text: \"Format Page Number\" }];\n    linkOptions = [{ text: \"Insert Link\", iconCss: \"e-icons e-link\" }, { text: \"Recent Links\", iconCss: \"e-icons e-clock\" }, { text: \"Bookmarks\", iconCss: \"e-icons e-bookmark\" }];\n    tableDropdownOptions = [{ text: \"Header Row\" }, { text: \"Banded Rows\" }, { text: \"Banded Columns\" }];\n    borderDropdownOptions = [\n        { text: 'Border Right', iconCss: 'e-icons e-border-right' },\n        { text: 'Border Left', iconCss: 'e-icons e-border-left' },\n        { text: 'Border Bottom', iconCss: 'e-icons e-border-bottom' },\n        { text: 'Border Top', iconCss: 'e-icons e-border-top' }\n    ];\n    mergeDropdownOptions = [{ text: 'Merge Cells', iconCss: 'e-icons e-merge-cells' }, { text: 'Split Cells', iconCss: 'e-icons e-split-horizontal' }];\n    fontSize = [\"8\", \"9\", \"10\", \"11\", \"12\", \"14\", \"16\", \"18\", \"20\", \"22\", \"24\", \"26\", \"28\", \"36\", \"48\", \"72\", \"96\"];\n    fontStyle = [\"Algerian\", \"Arial\", \"Calibri\", \"Cambria\", \"Cambria Math\", \"Courier New\", \"Candara\", \"Georgia\", \"Impact\", \"Segoe Print\", \"Segoe Script\", \"Segoe UI\", \"Symbol\", \"Times New Roman\", \"Verdana\", \"Windings\"];\n    fileOptions = [{ text: \"New\", iconCss: \"e-icons e-file-new\", id: \"new\" },\n        { text: \"Open\", iconCss: \"e-icons e-folder-open\", id: \"Open\" },\n        { text: \"Rename\", iconCss: \"e-icons e-rename\", id: \"rename\" },\n        {\n            text: \"Save as\", iconCss: \"e-icons e-save\", id: \"save\",\n            items: [\n                { text: \"Microsoft Word (.docx)\", iconCss: \"sf-icon-word\", id: \"newword\" },\n                { text: \"Microsoft Word 97-2003(.doc)\", iconCss: \"sf-icon-word\", id: \"oldword\" },\n                { text: \"Download as PDF\", iconCss: \"e-icons e-export-pdf\", id: \"pdf\" }\n            ]\n        }];\n    toastInstance;\n    isPasteDisabled = true;\n    componentDidMount() {\n        this.tableElement.onclick = (args) => {\n            this.ribbonObj.showTab('TableDesign', true);\n            this.ribbonObj.showTab('TableLayout', true);\n            this.ribbonObj.selectTab('TableDesign');\n            this.ribbonObj.hideTab('Format', true);\n            if (this.selectedCell) {\n                this.selectedCell.classList.remove('e-table-selected');\n            }\n            args.target.classList.add('e-table-selected');\n            this.selectedCell = args.currentTarget.querySelector('.e-table-selected');\n            this.imageElement.classList.remove('e-image-selected');\n        };\n        this.imageElement.onclick = (e) => {\n            e.stopPropagation();\n            this.ribbonObj.showTab('Format', true);\n            this.ribbonObj.selectTab('Format');\n            this.ribbonObj.hideTab('TableDesign', true);\n            this.ribbonObj.hideTab('TableLayout', true);\n            this.updateSelectedState('Image');\n        };\n        this.placeholderElement.onclick = (args) => {\n            if (args.target.nodeName !== 'TD' && args.target.nodeName !== 'IMG') {\n                this.ribbonObj.hideTab('TableDesign', true);\n                this.ribbonObj.hideTab('TableLayout', true);\n                this.ribbonObj.hideTab('Format', true);\n                this.updateSelectedState('Table');\n            }\n        };\n    }\n    updateSelectedState = (args) => {\n        if (this.selectedCell) {\n            this.selectedCell.classList.remove('e-table-selected');\n            this.selectedCell = null;\n        }\n        this.imageElement.classList[args === 'Image' ? 'add' : 'remove']('e-image-selected');\n    };\n    enablePaste() {\n        if (!this.isPasteDisabled) {\n            return;\n        }\n        this.ribbonObj.enableItem('pastebtn');\n        this.isPasteDisabled = false;\n    }\n    updateContent(args) {\n        this.toastInstance.show({ content: \"Last clicked item is \" + args });\n    }\n    fileSelect(args) {\n        if (args.item.id === \"newword\" || args.item.id === \"oldword\" || args.item.id === \"pdf\") {\n            this.updateContent(\"File -> Save as -> \" + args.item.text);\n        }\n        else {\n            this.updateContent(\"File -> \" + args.item.text);\n        }\n    }\n    launchClick(args) {\n        if (args.groupId == \"clipboard\") {\n            this.updateContent(\"Clipboard Launcher Icon\");\n        }\n        else if (args.groupId == \"illustration\") {\n            this.updateContent(\"Illustration Launcher Icon\");\n        }\n        else if (args.groupId == \"header_footer\") {\n            this.updateContent(\"Header & Footer Launcher Icon\");\n        }\n    }\n    render() {\n        return (<div className='control-pane'>\n                <div className='col-lg-12 control-section contextual-tab'>\n                    <div id=\"ribbonContainer\">\n                        <RibbonComponent id='ribbon' ref={ribbon => { this.ribbonObj = ribbon; }} enablePersistence={true} fileMenu={{ visible: true, menuItems: this.fileOptions, select: this.fileSelect }} launcherIconClick={this.launchClick}>\n                            <RibbonTabsDirective>\n                                <RibbonTabDirective header='Home'>\n                                    <RibbonGroupsDirective>\n                                        <RibbonGroupDirective header=\"Clipboard\" id='clipboard' groupIconCss=\"e-icons e-paste\" showLauncherIcon={true}>\n                                            <RibbonCollectionsDirective>\n                                                <RibbonCollectionDirective>\n                                                    <RibbonItemsDirective>\n                                                        <RibbonItemDirective type=\"SplitButton\" disabled={true} id=\"pastebtn\" allowedSizes={RibbonItemSize.Large} splitButtonSettings={{ iconCss: \"e-icons e-paste\", items: this.pasteOptions, content: \"Paste\", select: function (args) { this.updateContent(\"Paste -> \" + args.item.text); }, click: function () { this.updateContent(\"Paste\"); } }}>\n                                                        </RibbonItemDirective>\n                                                    </RibbonItemsDirective>\n                                                </RibbonCollectionDirective>\n                                                <RibbonCollectionDirective>\n                                                    <RibbonItemsDirective>\n                                                        <RibbonItemDirective type=\"Button\" buttonSettings={{ iconCss: \"e-icons e-cut\", content: \"Cut\", clicked: function () { this.updateContent(\"Cut\"); this.enablePaste(); } }}>\n                                                        </RibbonItemDirective>\n                                                        <RibbonItemDirective type=\"Button\" buttonSettings={{ iconCss: \"e-icons e-copy\", content: \"Copy\", clicked: function () { this.updateContent(\"Copy\"); this.enablePaste(); } }}>\n                                                        </RibbonItemDirective>\n                                                        <RibbonItemDirective type=\"Button\" buttonSettings={{ iconCss: \"e-icons e-format-painter\", content: \"Format Painter\", clicked: function () { this.updateContent(\"Format Painter\"); } }}>\n                                                        </RibbonItemDirective>\n                                                    </RibbonItemsDirective>\n                                                </RibbonCollectionDirective>\n                                            </RibbonCollectionsDirective>\n                                        </RibbonGroupDirective>\n                                        <RibbonGroupDirective header=\"Font\" overflowHeader=\"More Font Options\" groupIconCss=\"e-icons e-bold\" isCollapsible={false} enableGroupOverflow={true} orientation=\"Row\" cssClass='font-group'>\n                                            <RibbonCollectionsDirective>\n                                                <RibbonCollectionDirective>\n                                                    <RibbonItemsDirective>\n                                                        <RibbonItemDirective type=\"ComboBox\" comboBoxSettings={{ dataSource: this.fontStyle, index: 3, label: 'Font Style', width: '115px', popupWidth: '150px', allowFiltering: true, change: function (args) { if (args.itemData) {\n                this.updateContent(\"Font Style -> \" + args.itemData.text);\n            } } }}>\n                                                        </RibbonItemDirective>\n                                                        <RibbonItemDirective type=\"ComboBox\" comboBoxSettings={{ dataSource: this.fontSize, index: 3, label: 'Font Size', width: '65px', popupWidth: '85px', allowFiltering: true, change: function (args) { if (args.itemData) {\n                this.updateContent(\"Font Size -> \" + args.itemData.text);\n            } } }}>\n                                                        </RibbonItemDirective>\n                                                    </RibbonItemsDirective>\n                                                </RibbonCollectionDirective>\n                                                <RibbonCollectionDirective>\n                                                    <RibbonItemsDirective>\n                                                        <RibbonItemDirective type=\"GroupButton\" allowedSizes={RibbonItemSize.Small} groupButtonSettings={{ selection: RibbonGroupButtonSelection.Multiple, header: 'Format Styles', items: [{ iconCss: 'e-icons e-bold', content: 'Bold', selected: true, click: () => { this.updateContent(\"Bold\"); } }, { iconCss: 'e-icons e-italic', content: 'Italic', click: () => { this.updateContent(\"Italic\"); } }, { iconCss: 'e-icons e-underline', content: 'Underline', click: () => { this.updateContent(\"Underline\"); } }, { iconCss: 'e-icons e-strikethrough', content: 'Strikethrough', click: () => { this.updateContent(\"Strikethrough\"); } }, { iconCss: 'e-icons e-change-case', content: 'Change Case', click: () => { this.updateContent(\"Change Case\"); } }] }}>\n                                                        </RibbonItemDirective>\n                                                        <RibbonItemDirective type=\"ColorPicker\" allowedSizes={RibbonItemSize.Small} displayOptions={DisplayMode.Simplified | DisplayMode.Classic} colorPickerSettings={{ value: '#123456', change: function (args) { this.updateContent(args.currentValue.hex + \" color\"); } }}>\n                                                        </RibbonItemDirective>\n                                                    </RibbonItemsDirective>\n                                                </RibbonCollectionDirective>\n                                            </RibbonCollectionsDirective>\n                                        </RibbonGroupDirective>\n                                        <RibbonGroupDirective header=\"Paragraph\" groupIconCss=\"e-icons e-align-center\" orientation=\"Row\">\n                                            <RibbonCollectionsDirective>\n                                                <RibbonCollectionDirective>\n                                                    <RibbonItemsDirective>\n                                                        <RibbonItemDirective type=\"Button\" allowedSizes={RibbonItemSize.Small} buttonSettings={{ iconCss: \"e-icons e-decrease-indent\", content: 'Decrease Indent', clicked: function () { this.updateContent(\"Decrease Indent\"); } }}>\n                                                        </RibbonItemDirective>\n                                                        <RibbonItemDirective type=\"Button\" allowedSizes={RibbonItemSize.Small} buttonSettings={{ iconCss: \"e-icons e-increase-indent\", content: 'Increase Indent', clicked: function () { this.updateContent(\"Increase Indent\"); } }}>\n                                                        </RibbonItemDirective>\n                                                        <RibbonItemDirective type=\"Button\" allowedSizes={RibbonItemSize.Small} buttonSettings={{ iconCss: \"e-icons e-paragraph\", content: 'Paragraph', clicked: function () { this.updateContent(\"Paragraph Mark\"); } }}>\n                                                        </RibbonItemDirective>\n                                                    </RibbonItemsDirective>\n                                                </RibbonCollectionDirective>\n                                                <RibbonCollectionDirective>\n                                                    <RibbonItemsDirective>\n                                                        <RibbonItemDirective type=\"GroupButton\" allowedSizes={RibbonItemSize.Small} groupButtonSettings={{ selection: RibbonGroupButtonSelection.Single, header: 'Alignment', items: [{ iconCss: 'e-icons e-align-left', selected: true, click: () => { this.updateContent(\"Align Left\"); } }, { iconCss: 'e-icons e-align-center', click: () => { this.updateContent(\"Align Center\"); } }, { iconCss: 'e-icons e-align-right', click: () => { this.updateContent(\"Align Right\"); } }, { iconCss: 'e-icons e-justify', click: () => { this.updateContent(\"Justify\"); } }] }}>\n                                                        </RibbonItemDirective>\n                                                    </RibbonItemsDirective>\n                                                </RibbonCollectionDirective>\n                                            </RibbonCollectionsDirective>\n                                        </RibbonGroupDirective>\n                                        <RibbonGroupDirective header=\"Editing\" groupIconCss=\"e-icons e-edit\" orientation=\"Column\">\n                                            <RibbonCollectionsDirective>\n                                                <RibbonCollectionDirective>\n                                                    <RibbonItemsDirective>\n                                                        <RibbonItemDirective type=\"SplitButton\" splitButtonSettings={{ iconCss: \"e-icons e-search\", items: this.findOptions, content: \"Find\", select: function (args) { this.updateContent(\"Find -> \" + args.item.text); }, click: function () { this.updateContent(\"Find\"); } }}>\n                                                        </RibbonItemDirective>\n                                                        <RibbonItemDirective type=\"Button\" buttonSettings={{ iconCss: \"e-icons e-replace\", content: 'Replace', clicked: function () { this.updateContent(\"Replace\"); } }}>\n                                                        </RibbonItemDirective>\n                                                        <RibbonItemDirective type=\"SplitButton\" splitButtonSettings={{ iconCss: \"e-icons e-mouse-pointer\", items: this.selectOptions, content: \"Select\", select: function (args) { this.updateContent(\"Select -> \" + args.item.text); }, click: function () { this.updateContent(\"Select\"); } }}>\n                                                        </RibbonItemDirective>\n                                                    </RibbonItemsDirective>\n                                                </RibbonCollectionDirective>\n                                            </RibbonCollectionsDirective>\n                                        </RibbonGroupDirective>\n                                        <RibbonGroupDirective header=\"Voice\" groupIconCss=\"sf-icon-dictate\" isCollapsible={false}>\n                                            <RibbonCollectionsDirective>\n                                                <RibbonCollectionDirective>\n                                                    <RibbonItemsDirective>\n                                                        <RibbonItemDirective type=\"SplitButton\" allowedSizes={RibbonItemSize.Large} splitButtonSettings={{ iconCss: \"sf-icon-dictate\", items: this.dictateOptions, content: \"Dictate\", select: function (args) { this.updateContent(\"Dictate -> \" + args.item.text); }, click: function () { this.updateContent(\"Dictate\"); } }}>\n                                                        </RibbonItemDirective>\n                                                    </RibbonItemsDirective>\n                                                </RibbonCollectionDirective>\n                                            </RibbonCollectionsDirective>\n                                        </RibbonGroupDirective>\n                                        <RibbonGroupDirective header=\"Editor\" groupIconCss=\"sf-icon-editor\" isCollapsible={false}>\n                                            <RibbonCollectionsDirective>\n                                                <RibbonCollectionDirective>\n                                                    <RibbonItemsDirective>\n                                                        <RibbonItemDirective type=\"Button\" allowedSizes={RibbonItemSize.Large} buttonSettings={{ iconCss: \"sf-icon-editor\", content: \"Editor\", clicked: function () { this.updateContent(\"Editor\"); } }}>\n                                                        </RibbonItemDirective>\n                                                    </RibbonItemsDirective>\n                                                </RibbonCollectionDirective>\n                                            </RibbonCollectionsDirective>\n                                        </RibbonGroupDirective>\n                                        <RibbonGroupDirective header=\"Reuse Files\" groupIconCss=\"sf-icon-reuse\" isCollapsible={false}>\n                                            <RibbonCollectionsDirective>\n                                                <RibbonCollectionDirective>\n                                                    <RibbonItemsDirective>\n                                                        <RibbonItemDirective type=\"Button\" disabled={true} allowedSizes={RibbonItemSize.Large} buttonSettings={{ iconCss: \"sf-icon-reuse\", content: \"Reuse Files\", clicked: function () { this.updateContent(\"Reuse Files\"); } }}>\n                                                        </RibbonItemDirective>\n                                                    </RibbonItemsDirective>\n                                                </RibbonCollectionDirective>\n                                            </RibbonCollectionsDirective>\n                                        </RibbonGroupDirective>\n                                    </RibbonGroupsDirective>\n                                </RibbonTabDirective>\n                                <RibbonTabDirective header='Insert'>\n                                    <RibbonGroupsDirective>\n                                        <RibbonGroupDirective header=\"Tables\" isCollapsible={false}>\n                                            <RibbonCollectionsDirective>\n                                                <RibbonCollectionDirective>\n                                                    <RibbonItemsDirective>\n                                                        <RibbonItemDirective type=\"DropDown\" allowedSizes={RibbonItemSize.Large} dropDownSettings={{ iconCss: \"e-icons e-table\", items: this.tableOptions, content: \"Table\", select: function (args) { this.updateContent(\"Table -> \" + args.item.text); } }}>\n                                                        </RibbonItemDirective>\n                                                    </RibbonItemsDirective>\n                                                </RibbonCollectionDirective>\n                                            </RibbonCollectionsDirective>\n                                        </RibbonGroupDirective>\n                                        <RibbonGroupDirective header=\"Illustration\" overflowHeader=\"Illustrations\" id=\"illustration\" groupIconCss=\"e-icons e-image\" enableGroupOverflow={true} orientation=\"Row\">\n                                            <RibbonCollectionsDirective>\n                                                <RibbonCollectionDirective>\n                                                    <RibbonItemsDirective>\n                                                        <RibbonItemDirective id='pictureddl' type=\"DropDown\" dropDownSettings={{ iconCss: \"e-icons e-image\", content: \"Pictures\", target: '#pictureList' }}>\n                                                        </RibbonItemDirective>\n                                                        <RibbonItemDirective type=\"DropDown\" dropDownSettings={{ iconCss: \"sf-icon-shapes\", items: this.shapeOptions, content: \"Shapes\", select: function (args) { this.updateContent(\"Shapes -> \" + args.item.text); } }}>\n                                                        </RibbonItemDirective>\n                                                        <RibbonItemDirective type=\"Button\" buttonSettings={{ iconCss: \"sf-icon-3d-model\", content: \"3D Models\", clicked: function () { this.updateContent(\"3D Models\"); } }}>\n                                                        </RibbonItemDirective>\n                                                        <RibbonItemDirective type=\"Button\" buttonSettings={{ iconCss: \"sf-icon-smart-art\", content: \"Smart Art\", clicked: function () { this.updateContent(\"Smart Art\"); } }}>\n                                                        </RibbonItemDirective>\n                                                        <RibbonItemDirective type=\"Button\" buttonSettings={{ iconCss: \"sf-icon-chart\", content: \"Charts\", clicked: function () { this.updateContent(\"Chart\"); } }}>\n                                                        </RibbonItemDirective>\n                                                        <RibbonItemDirective type=\"Button\" buttonSettings={{ iconCss: \"sf-icon-screenshot\", content: \"Screenshot\", clicked: function () { this.updateContent(\"Screenshot\"); } }}>\n                                                        </RibbonItemDirective>\n                                                    </RibbonItemsDirective>\n                                                </RibbonCollectionDirective>\n                                            </RibbonCollectionsDirective>\n                                        </RibbonGroupDirective>\n                                        <RibbonGroupDirective header=\"Header & Footer\" id=\"header_footer\" groupIconCss=\"e-icons e-table\" orientation=\"Column\" showLauncherIcon={true}>\n                                            <RibbonCollectionsDirective>\n                                                <RibbonCollectionDirective>\n                                                    <RibbonItemsDirective>\n                                                        <RibbonItemDirective type=\"DropDown\" dropDownSettings={{ iconCss: \"e-icons e-header\", items: this.headerOptions, content: \"Header\", select: function (args) { this.updateContent(\"Header -> \" + args.item.text); } }}>\n                                                        </RibbonItemDirective>\n                                                        <RibbonItemDirective type=\"DropDown\" dropDownSettings={{ iconCss: \"e-icons e-footer\", items: this.footerOptions, content: \"Footer\", select: function (args) { this.updateContent(\"Footer -> \" + args.item.text); } }}>\n                                                        </RibbonItemDirective>\n                                                        <RibbonItemDirective type=\"DropDown\" dropDownSettings={{ iconCss: \"e-icons e-page-numbering\", items: this.pageOptions, content: \"Page Numbering\", select: function (args) { this.updateContent(\"Page Numbering -> \" + args.item.text); } }}>\n                                                        </RibbonItemDirective>\n                                                    </RibbonItemsDirective>\n                                                </RibbonCollectionDirective>\n                                            </RibbonCollectionsDirective>\n                                        </RibbonGroupDirective>\n                                        <RibbonGroupDirective header=\"Comments\" isCollapsible={false}>\n                                            <RibbonCollectionsDirective>\n                                                <RibbonCollectionDirective>\n                                                    <RibbonItemsDirective>\n                                                        <RibbonItemDirective type=\"Button\" allowedSizes={RibbonItemSize.Large} buttonSettings={{ iconCss: \"e-icons e-comment-add\", content: \"New Comment\", clicked: function () { this.updateContent(\"New Comment\"); } }}>\n                                                        </RibbonItemDirective>\n                                                    </RibbonItemsDirective>\n                                                </RibbonCollectionDirective>\n                                            </RibbonCollectionsDirective>\n                                        </RibbonGroupDirective>\n                                        <RibbonGroupDirective header=\"Links\" groupIconCss=\"e-icons e-link\" isCollapsible={false}>\n                                            <RibbonCollectionsDirective>\n                                                <RibbonCollectionDirective>\n                                                    <RibbonItemsDirective>\n                                                        <RibbonItemDirective type=\"DropDown\" allowedSizes={RibbonItemSize.Large} dropDownSettings={{ iconCss: \"e-icons e-link\", items: this.linkOptions, content: \"Link\", select: function (args) { this.updateContent(\"Link -> \" + args.item.text); } }}>\n                                                        </RibbonItemDirective>\n                                                    </RibbonItemsDirective>\n                                                </RibbonCollectionDirective>\n                                            </RibbonCollectionsDirective>\n                                        </RibbonGroupDirective>\n                                    </RibbonGroupsDirective>\n                                </RibbonTabDirective>\n                                <RibbonTabDirective header='View'>\n                                    <RibbonGroupsDirective>\n                                        <RibbonGroupDirective header=\"Views\" groupIconCss='e-icons e-print' orientation='Row'>\n                                            <RibbonCollectionsDirective>\n                                                <RibbonCollectionDirective>\n                                                    <RibbonItemsDirective>\n                                                        <RibbonItemDirective type=\"Button\" buttonSettings={{ iconCss: \"sf-icon-read\", content: \"Read Mode\", clicked: function () { this.updateContent(\"Read Mode\"); } }}>\n                                                        </RibbonItemDirective>\n                                                        <RibbonItemDirective type=\"Button\" buttonSettings={{ iconCss: \"e-icons e-print\", content: \"Print Layout\", clicked: function () { this.updateContent(\"Print Layout\"); } }}>\n                                                        </RibbonItemDirective>\n                                                        <RibbonItemDirective type=\"Button\" buttonSettings={{ iconCss: \"sf-icon-web-layout\", content: \"Web Layout\", clicked: function () { this.updateContent(\"Web Layout\"); } }}>\n                                                        </RibbonItemDirective>\n                                                    </RibbonItemsDirective>\n                                                </RibbonCollectionDirective>\n                                            </RibbonCollectionsDirective>\n                                        </RibbonGroupDirective>\n                                        <RibbonGroupDirective header=\"Zoom\" groupIconCss=\"e-icons e-zoom-to-fit\" orientation=\"Row\">\n                                            <RibbonCollectionsDirective>\n                                                <RibbonCollectionDirective>\n                                                    <RibbonItemsDirective>\n                                                        <RibbonItemDirective type=\"Button\" buttonSettings={{ iconCss: \"e-icons e-zoom-in\", content: \"Zoom in\", clicked: function () { this.updateContent(\"Zoom in\"); } }}>\n                                                        </RibbonItemDirective>\n                                                        <RibbonItemDirective type=\"Button\" buttonSettings={{ iconCss: \"e-icons e-zoom-out\", content: \"Zoom out\", clicked: function () { this.updateContent(\"Zoom out\"); } }}>\n                                                        </RibbonItemDirective>\n                                                    </RibbonItemsDirective>\n                                                </RibbonCollectionDirective>\n                                            </RibbonCollectionsDirective>\n                                        </RibbonGroupDirective>\n                                        <RibbonGroupDirective header=\"Show\" isCollapsible={true}>\n                                            <RibbonCollectionsDirective>\n                                                <RibbonCollectionDirective>\n                                                    <RibbonItemsDirective>\n                                                        <RibbonItemDirective type=\"CheckBox\" checkBoxSettings={{ label: \"Ruler\", checked: false, change: function () { this.updateContent(\"Ruler\"); } }}>\n                                                        </RibbonItemDirective>\n                                                        <RibbonItemDirective type=\"CheckBox\" checkBoxSettings={{ label: \"Gridlines\", checked: false, change: function () { this.updateContent(\"Gridlines\"); } }}>\n                                                        </RibbonItemDirective>\n                                                        <RibbonItemDirective type=\"CheckBox\" checkBoxSettings={{ label: \"Navigation Pane\", checked: true, change: function () { this.updateContent(\"Navigation Pane\"); } }}>\n                                                        </RibbonItemDirective>\n                                                    </RibbonItemsDirective>\n                                                </RibbonCollectionDirective>\n                                            </RibbonCollectionsDirective>\n                                        </RibbonGroupDirective>\n                                        <RibbonGroupDirective header=\"Dark Mode\" isCollapsible={false}>\n                                            <RibbonCollectionsDirective>\n                                                <RibbonCollectionDirective>\n                                                    <RibbonItemsDirective>\n                                                        <RibbonItemDirective type=\"Button\" buttonSettings={{ iconCss: \"sf-icon-mode\", content: \"Dark Mode\", clicked: function () { this.this.updateContent(\"Dark Mode\"); } }}>\n                                                        </RibbonItemDirective>\n                                                    </RibbonItemsDirective>\n                                                </RibbonCollectionDirective>\n                                            </RibbonCollectionsDirective>\n                                        </RibbonGroupDirective>\n                                    </RibbonGroupsDirective>\n                                </RibbonTabDirective>\n                            </RibbonTabsDirective>\n                            {/* Contextual tab starts */}\n                            <RibbonContextualTabsDirective>\n                                <RibbonContextualTabDirective visible={true}>\n                                    <RibbonTabsDirective>\n                                        <RibbonTabDirective id=\"TableDesign\" header='Table Design'>\n                                            <RibbonGroupsDirective>\n                                                <RibbonGroupDirective header=\"Table Style\" groupIconCss=\"e-icons e-field-settings\">\n                                                    <RibbonCollectionsDirective>\n                                                        <RibbonCollectionDirective>\n                                                            <RibbonItemsDirective>\n                                                                <RibbonItemDirective type=\"DropDown\" allowedSizes={RibbonItemSize.Large} dropDownSettings={{ iconCss: \"e-icons e-field-settings\", content: \"Table Style\", items: this.tableDropdownOptions, select: function (args) { this.updateContent(\"Table Style -> \" + args.item.text); } }}>\n                                                                </RibbonItemDirective>\n                                                            </RibbonItemsDirective>\n                                                        </RibbonCollectionDirective>\n                                                    </RibbonCollectionsDirective>\n                                                </RibbonGroupDirective>\n                                                <RibbonGroupDirective header=\"Borders Style\" groupIconCss=\"e-icons e-field-settings\">\n                                                    <RibbonCollectionsDirective>\n                                                        <RibbonCollectionDirective>\n                                                            <RibbonItemsDirective>\n                                                                <RibbonItemDirective type=\"DropDown\" allowedSizes={RibbonItemSize.Large} dropDownSettings={{ iconCss: \"e-icons e-border-all\", content: \"Borders\", items: this.borderDropdownOptions, select: function (args) { this.updateContent(\"Borders -> \" + args.item.text); } }}>\n                                                                </RibbonItemDirective>\n                                                            </RibbonItemsDirective>\n                                                        </RibbonCollectionDirective>\n                                                    </RibbonCollectionsDirective>\n                                                </RibbonGroupDirective>\n                                            </RibbonGroupsDirective>\n                                        </RibbonTabDirective>\n\n                                        <RibbonTabDirective id=\"TableLayout\" header='Table Layout'>\n                                            <RibbonGroupsDirective>\n                                                <RibbonGroupDirective header=\"Data\" groupIconCss=\"e-icons e-custom-sort\">\n                                                    <RibbonCollectionsDirective>\n                                                        <RibbonCollectionDirective>\n                                                            <RibbonItemsDirective>\n                                                                <RibbonItemDirective type=\"Button\" allowedSizes={RibbonItemSize.Large} buttonSettings={{ iconCss: \"e-icons e-sort-ascending\", content: \"Sort Table Ascending\", clicked: function () { this.updateContent(\"Sort Table Ascending\"); } }}>\n                                                                </RibbonItemDirective>\n                                                            </RibbonItemsDirective>\n                                                        </RibbonCollectionDirective>\n                                                        <RibbonCollectionDirective>\n                                                            <RibbonItemsDirective>\n                                                                <RibbonItemDirective type=\"Button\" allowedSizes={RibbonItemSize.Large} buttonSettings={{ iconCss: \"e-icons e-sort-descending\", content: \"Sort Table Descending\", clicked: function () { this.updateContent(\"Sort Table Descending\"); } }}>\n                                                                </RibbonItemDirective>\n                                                            </RibbonItemsDirective>\n                                                        </RibbonCollectionDirective>\n                                                    </RibbonCollectionsDirective>\n                                                </RibbonGroupDirective>\n                                                <RibbonGroupDirective header=\"Merge\" groupIconCss=\"e-icons e-merge-cells\">\n                                                    <RibbonCollectionsDirective>\n                                                        <RibbonCollectionDirective>\n                                                            <RibbonItemsDirective>\n                                                                <RibbonItemDirective type=\"DropDown\" allowedSizes={RibbonItemSize.Large} dropDownSettings={{ iconCss: \"e-icons e-merge-cells\", content: \"Merge\", items: this.mergeDropdownOptions, select: function (args) { this.updateContent(\"Merge -> \" + args.item.text); } }}>\n                                                                </RibbonItemDirective>\n                                                            </RibbonItemsDirective>\n                                                        </RibbonCollectionDirective>\n                                                    </RibbonCollectionsDirective>\n                                                </RibbonGroupDirective>\n                                            </RibbonGroupsDirective>\n                                        </RibbonTabDirective>\n                                    </RibbonTabsDirective>\n                                </RibbonContextualTabDirective>\n                                <RibbonContextualTabDirective visible={false}>\n                                    <RibbonTabsDirective>\n                                        <RibbonTabDirective id=\"Format\" header='Picture Format'>\n                                            <RibbonGroupsDirective>\n                                                <RibbonGroupDirective header=\"Background\" groupIconCss=\"e-icons e-image\">\n                                                    <RibbonCollectionsDirective>\n                                                        <RibbonCollectionDirective>\n                                                            <RibbonItemsDirective>\n                                                                <RibbonItemDirective type=\"Button\" allowedSizes={RibbonItemSize.Large} buttonSettings={{ iconCss: \"e-icons e-image\", content: \"Remove Background\", clicked: function () { this.updateContent(\"Remove Background\"); } }}>\n                                                                </RibbonItemDirective>\n                                                            </RibbonItemsDirective>\n                                                        </RibbonCollectionDirective>\n                                                    </RibbonCollectionsDirective>\n                                                </RibbonGroupDirective>\n                                            </RibbonGroupsDirective>\n                                        </RibbonTabDirective>\n                                    </RibbonTabsDirective>\n                                </RibbonContextualTabDirective>\n                            </RibbonContextualTabsDirective>\n                            {/* Contextual tab ends */}                            \n                            <Inject services={[RibbonFileMenu, RibbonColorPicker, RibbonContextualTab]}/>\n                        </RibbonComponent>\n                        <div id=\"contextual-ribbonPlaceHolder\" ref={holder => { this.placeholderElement = holder; }}>\n                            <div className=\"content-wrap\">\n                                <div className=\"table-content\" style={{ backgroundColor: \"white\" }}>\n                                    <table border={1} className=\"ribbon-table\">\n                                        <caption className=\"table-header\">Click on the table or image to show contextual tabs.</caption>\n                                        <tbody className=\"table-body\" ref={table => { this.tableElement = table; }}>\n                                            <tr id=\"tableRow1\">\n                                                <td></td>\n                                                <td></td>\n                                                <td></td>\n                                            </tr>\n                                            <tr id=\"tableRow2\">\n                                                <td></td>\n                                                <td></td>\n                                                <td></td>\n                                            </tr>\n                                            <tr id=\"tableRow3\">\n                                                <td></td>\n                                                <td></td>\n                                                <td></td>\n                                            </tr>\n                                        </tbody>\n                                    </table>\n                                    <img id=\"ribbonImage\" ref={image => { this.imageElement = image; }} className=\"ribbon-image\" src=\"https://ej2.syncfusion.com/react/demos/src/ribbon/images/empire-state-building.png\" alt=\"image\"/>\n                                </div>\n                            </div>\n                            <ToastComponent id='toast' ref={toast => this.toastInstance = toast} position={{ X: 'Right' }} width='auto' height={25} timeOut={2000} cssClass='e-toast-info' showCloseButton={true} target=\"#contextual-ribbonPlaceHolder\" newestOnTop={true} animation={{ show: { effect: 'FadeIn' }, hide: { effect: 'FadeOut' } }}/>\n                        </div>\n                        <ListViewComponent id='pictureList' dataSource={['This Device', 'Stock Images', 'Online Images']} showHeader={true} headerTitle=\"Insert Picture From\" select={function (args) { this.updateContent(\"Picture -> \" + args.text); }}></ListViewComponent>\n                    </div>\n                </div>\n            </div>);\n    }\n}\n\nconst root = createRoot(document.getElementById('sample'));\nroot.render(<Contextual />);","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n                this.rendereComplete();\n            });\n        }\n    }\n    export function updateSampleSection(){}\n    ","dependencies":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-react-base\":\"*\",\"@syncfusion/ej2-ribbon\":\"*\",\"@syncfusion/ej2-react-ribbon\":\"*\",\"@syncfusion/ej2-splitbuttons\":\"*\",\"@syncfusion/ej2-react-splitbuttons\":\"*\",\"@syncfusion/ej2-notifications\":\"*\",\"@syncfusion/ej2-react-notifications\":\"*\",\"@syncfusion/ej2-lists\":\"*\",\"@syncfusion/ej2-react-lists\":\"*\",\"@syncfusion/ej2-navigations\":\"*\",\"@syncfusion/ej2-react-navigations\":\"*\",\"@syncfusion/ej2-react-charts\":\"*\",\"@syncfusion/ej2/base\":\"*\",\"@syncfusion/ej2-charts'; // Import the necessary types from Syncfusion\":\"*\",\"@syncfusion/ej2-documenteditor\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-react-popups\":\"*\",\"@syncfusion/ej2-pivotview\":\"*\",\"@syncfusion/ej2-react-progressbar\":\"*\"}"}