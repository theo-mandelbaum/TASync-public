{"index.css":"/* css */","index.html":"<!DOCTYPE html>\n<html>\n<head>\n    <title>Syncfusion React Sample</title>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\n    <meta name=\"author\" content=\"Syncfusion\" />\n    <link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\n</head>\n\n<body class=\"{{theme}}\">\n     <style>\n            .control-section\n            {\n                margin-top: 100px;\n            }\n    </style>\n    <div id='sample'>\n</body>\n</html>\n","index.js":"import { createRoot } from 'react-dom/client';\nimport './index.css';\nimport * as React from 'react';\nimport { SampleBase } from './sample-base';\nimport { FormValidator } from '@syncfusion/ej2-inputs';\nexport class Default extends SampleBase {\n    formValidator;\n    rendereComplete() {\n        // Initialize the custom function\n        let customFunction = (args) => {\n            return args.value.length <= 5;\n        };\n        this.formValidator = {\n            // Defines the validation rules\n            rules: {\n                Required: { required: true },\n                Email: { required: true, email: true },\n                Url: { required: true, url: true },\n                Date: { required: true, date: true },\n                DateISO: { required: true, dateIso: true },\n                Number: { required: true, number: true },\n                Digits: { required: true, digits: true },\n                MaxLength: { required: true, maxLength: 5 },\n                MinLength: { required: true, minLength: 5 },\n                RangeLength: { required: true, rangeLength: [5, 10] },\n                Range: { required: true, range: [5, 10] },\n                Max: { required: true, max: 5 },\n                Min: { required: true, min: 5 },\n                Regex: { required: true, regex: ['^[A-z]+$', 'Allowed only alphabets'] },\n                Custom: { required: true, custom: [customFunction, 'Allowed char length is 5'] }\n            },\n            // Initialize the custom placement\n            customPlacement: (inputElement, errorElement) => {\n                inputElement.parentElement.appendChild(errorElement);\n            },\n        };\n        // Initialize the form-validator\n        let formObj;\n        formObj = new FormValidator('#htmlFormId', this.formValidator);\n    }\n    render() {\n        return (<div className='control-pane'>\n        <div className='col-lg-12 control-section'>\n          <div className='content-wrapper' style={{ marginBottom: '25px' }}>\n            <form id='htmlFormId' className='htmlForm-horizontal'>\n              <div className='form-group'>\n                <div className='e-float-input'>\n                  <input type='text' id='required' name='Required' required data-msg-containerid='requiredError'/>\n                  <span className='e-float-line'></span>\n                  <label className='e-float-text' htmlFor='required'>Required</label>\n                </div>\n                <div id='requiredError'></div>\n              </div>\n              <div className='form-group'>\n                <div className='e-float-input'>\n                  <input type='text' id='email' name='Email' required data-msg-containerid='emailError'/>\n                  <span className='e-float-line'></span>\n                  <label className='e-float-text' htmlFor='email'>Email</label>\n                </div>\n                <div id='emailError'></div>\n              </div>\n              <div className='form-group'>\n                <div className='e-float-input'>\n                  <input type='text' id='url' name='Url' required data-msg-containerid='urlError'/>\n                  <span className='e-float-line'></span>\n                  <label className='e-float-text' htmlFor='url'>URL</label>\n                </div>\n                <div id='urlError'></div>\n              </div>\n              <div className='form-group'>\n                <div className='e-float-input'>\n                  <input type='text' id='date' name='Date' required data-msg-containerid='dateError'/>\n                  <span className='e-float-line'></span>\n                  <label className='e-float-text' htmlFor='date'>Date</label>\n                </div>\n                <div id='dateError'></div>\n              </div>\n              <div className='form-group'>\n                <div className='e-float-input'>\n                  <input type='text' id='dateIso' name='DateISO' required data-msg-containerid='dateisoError'/>\n                  <span className='e-float-line'></span>\n                  <label className='e-float-text' htmlFor='dateIso'>Date ISO (YYYY-MM-DD)</label>\n                </div>\n                <div id='dateisoError'></div>\n              </div>\n              <div className='form-group'>\n                <div className='e-float-input'>\n                  <input type='text' id='number' name='Number' required data-msg-containerid='numberError'/>\n                  <span className='e-float-line'></span>\n                  <label className='e-float-text' htmlFor='number'>Integer or Decimal</label>\n                </div>\n                <div id='numberError'></div>\n              </div>\n              <div className='form-group'>\n                <div className='e-float-input'>\n                  <input type='text' id='digits' name='Digits' required data-msg-containerid='digitError'/>\n                  <span className='e-float-line'></span>\n                  <label className='e-float-text' htmlFor='digits'>Positive Integer</label>\n                </div>\n                <div id='digitError'></div>\n              </div>\n              <div className='form-group'>\n                <div className='e-float-input'>\n                  <input type='text' id='maxlen' name='MaxLength' required data-msg-containerid='maxlenError'/>\n                  <span className='e-float-line'></span>\n                  <label className='e-float-text' htmlFor='maxlen'>Maximum 5 characters</label>\n                </div>\n                <div id='maxlenError'></div>\n              </div>\n              <div className='form-group'>\n                <div className='e-float-input'>\n                  <input type='text' id='minlen' name='MinLength' required data-msg-containerid='minlenError'/>\n                  <span className='e-float-line'></span>\n                  <label className='e-float-text' htmlFor='minlen'>Minimum 5 characters</label>\n                </div>\n                <div id='minlenError'></div>\n              </div>\n              <div className='form-group'>\n                <div className='e-float-input'>\n                  <input type='text' id='rangelen' name='RangeLength' required data-msg-containerid='rangelenError'/>\n                  <span className='e-float-line'></span>\n                  <label className='e-float-text' htmlFor='rangelen'>Characters length between 5 to 10</label>\n                </div>\n                <div id='rangelenError'></div>\n              </div>\n              <div className='form-group'>\n                <div className='e-float-input'>\n                  <input type='text' id='range' name='Range' required data-msg-containerid='rangeError'/>\n                  <span className='e-float-line'></span>\n                  <label className='e-float-text' htmlFor='range'>Value between 5 to 10</label>\n                </div>\n                <div id='rangeError'></div>\n              </div>\n              <div className='form-group'>\n                <div className='e-float-input'>\n                  <input type='text' id='max' name='Max' required data-msg-containerid='maxError'/>\n                  <span className='e-float-line'></span>\n                  <label className='e-float-text' htmlFor='max'>Max (maximum value 5)</label>\n                </div>\n                <div id='maxError'></div>\n              </div>\n              <div className='form-group'>\n                <div className='e-float-input'>\n                  <input type='text' id='min' name='Min' required data-msg-containerid='minError'/>\n                  <span className='e-float-line'></span>\n                  <label className='e-float-text' htmlFor='min'>Min (minimum value 5)</label>\n                </div>\n                <div id='minError'></div>\n              </div>\n              <div className='form-group'>\n                <div className='e-float-input'>\n                  <input type='text' id='regex' name='Regex' required data-msg-containerid='regexError'/>\n                  <span className='e-float-line'></span>\n                  <label className='e-float-text' htmlFor='regex'>Regex (accepts alphabets only)</label>\n                </div>\n                <div id=\"regexError\"></div>\n              </div>\n              <div className='form-group'>\n                <div className='e-float-input'>\n                  <input type='text' id='custom' name='Custom' required data-msg-containerid='customError'/>\n                  <span className='e-float-line'></span>\n                  <label className='e-float-text' htmlFor='custom'>Custom Function (maximum 5 characters)</label>\n                </div>\n                <div id='customError'></div>\n              </div>\n              <div className='row'>\n                <div style={{ float: 'left', margin: '0 10% 0 30%' }}>\n                  <button id='validateSubmit' className='e-btn' style={{ height: '35px' }} type='submit'>Submit</button>\n                </div>\n                <div>\n                  <button id='resetbtn' className='e-btn' style={{ height: '35px' }} type='reset'>Reset</button>\n                </div>\n              </div>\n            </form>\n          </div>\n        </div>\n      </div>);\n    }\n}\n\nconst root = createRoot(document.getElementById('sample'));\nroot.render(<Default />);","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n                this.rendereComplete();\n            });\n        }\n    }\n    export function updateSampleSection(){}\n    ","dependencies":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-popups\":\"*\",\"@syncfusion/ej2-splitbuttons\":\"*\",\"markdown-spellcheck\":\"^1.3.1\",\"@syncfusion/ej2-inputs\":\"*\",\"@syncfusion/ej2-react-charts\":\"*\",\"@syncfusion/ej2/base\":\"*\",\"@syncfusion/ej2-charts'; // Import the necessary types from Syncfusion\":\"*\",\"@syncfusion/ej2-lists\":\"*\",\"@syncfusion/ej2-documenteditor\":\"*\",\"@syncfusion/ej2-navigations\":\"*\",\"@syncfusion/ej2-react-popups\":\"*\"}"}