{"index.css":"/* css */","property-pane.js":"import * as ReactDOM from 'react-dom';\nimport * as React from 'react';\nimport { select } from '@syncfusion/ej2-base';\nexport class PropertyPane extends React.Component {\n    render() {\n        const mobilePropPane = select('.sb-mobile-prop-pane');\n        const isMobile = window.matchMedia('(max-width:550px)').matches;\n        return isMobile && mobilePropPane ?\n            ReactDOM.createPortal(<div className='property-panel-section'>\n                    <div className=\"property-panel-header\">\n                        {this.props.title}\n                    </div>\n                    <div className=\"property-panel-content\">\n                        {this.props.children}\n                    </div>\n                </div>, mobilePropPane)\n            :\n                (<div className='property-panel-section'>\n                    <div className=\"property-panel-header\">\n                        {this.props.title}\n                    </div>\n                    <div className=\"property-panel-content\">\n                        {this.props.children}\n                    </div>\n                </div>);\n    }\n}\n","theme-color.js":"export let loadSparkLineTheme = (args) => {\n    let theme = location.hash.split('/')[1];\n    theme = theme ? theme : 'Tailwind3';\n    args.sparkline.theme = (theme.charAt(0).toUpperCase() + theme.slice(1)).replace(/-dark/i, 'Dark').replace(/contrast/i, 'Contrast').replace(/-highContrast/i, 'HighContrast');\n    return args.sparkline.theme;\n};\n","index.html":"<!DOCTYPE html>\n<html>\n<head>\n    <title>Syncfusion React Sample</title>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\n    <meta name=\"author\" content=\"Syncfusion\" />\n    <link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\n</head>\n\n<body class=\"{{theme}}\">\n     <style>\n            .control-section\n            {\n                margin-top: 100px;\n            }\n    </style>\n    <div id='sample'>\n</body>\n</html>\n","index.js":"import { createRoot } from 'react-dom/client';\nimport './index.css';\n/**\n * Customization samples for sparkline\n */\nimport * as React from \"react\";\nimport { PropertyPane } from './property-pane';\nimport { SliderComponent } from \"@syncfusion/ej2-react-inputs\";\nimport { CheckBoxComponent } from \"@syncfusion/ej2-react-buttons\";\nimport { SparklineComponent, SparklineTooltip, Inject } from '@syncfusion/ej2-react-charts';\nimport { DropDownListComponent } from '@syncfusion/ej2-react-dropdowns';\n\nimport { loadSparkLineTheme } from './theme-color';\nconst SAMPLE_CSS = `\n     .control-fluid {\n         padding: 0px !important;\n     }\n     #axis > * {\n         padding: 0px !important;\n     }`;\nconst slidercss = `  \n     .content-wrapper {\n         width: 40%;\n         margin: 0 auto;\n         min-width: 170px;\n     }`;\nfunction Customization() {\n    let percentage;\n    let sales;\n    let sparklineElement;\n    let allElement;\n    let negativeElement;\n    let firstElement;\n    let lastElement;\n    let highElement;\n    let lowElement;\n    let markerElement;\n    let datalabelElement;\n    let tooltipElement;\n    let tracklineElement;\n    let axislineElement;\n    let axisElement;\n    let rtlElement;\n    // Code for Property Panel\n    let droplist = [\n        { value: 'Sales Percentage' },\n        { value: 'Sales Count' },\n    ];\n    function sparklineChange() {\n        let element1 = document.getElementById('spark');\n        if (element1.value === 'Sales Percentage') {\n            axisElement.value = percentage.axisSettings.value;\n            axisElement.min = 0;\n            axisElement.max = 10;\n        }\n        else {\n            axisElement.value = sales.axisSettings.value;\n            axisElement.min = 0;\n            axisElement.max = 5000000;\n        }\n        if ((element1.value === 'Sales Percentage' && percentage.markerSettings.visible.length) ||\n            (element1.value === 'Sales Count' && sales.markerSettings.visible.length)) {\n            markerElement.checked = true;\n        }\n        else {\n            markerElement.checked = false;\n        }\n        markerChange();\n        if ((element1.value === 'Sales Percentage' && percentage.dataLabelSettings.visible.length) ||\n            (element1.value === 'Sales Count' && sales.dataLabelSettings.visible.length)) {\n            datalabelElement.checked = true;\n        }\n        else {\n            datalabelElement.checked = false;\n        }\n        let all = allElement;\n        let negative = negativeElement;\n        let first = firstElement;\n        let last = lastElement;\n        let high = highElement;\n        let low = lowElement;\n        let label = datalabelElement;\n        let marker = markerElement;\n        let rtl = rtlElement;\n        let spark = element1.value === 'Sales Percentage' ? percentage : sales;\n        if (!marker.checked && !label.checked) {\n            all.checked = false;\n            negative.checked = false;\n            first.checked = false;\n            last.checked = false;\n            high.checked = false;\n            low.checked = false;\n        }\n        if (marker.checked) {\n            let spark = element1.value === 'Sales Percentage' ? percentage : sales;\n            all.checked = spark.markerSettings.visible.indexOf('All') > -1;\n            negative.checked = spark.markerSettings.visible.indexOf('Negative') > -1;\n            first.checked = spark.markerSettings.visible.indexOf('Start') > -1;\n            last.checked = spark.markerSettings.visible.indexOf('End') > -1;\n            high.checked = spark.markerSettings.visible.indexOf('High') > -1;\n            low.checked = spark.markerSettings.visible.indexOf('Low') > -1;\n        }\n        if (label.checked) {\n            let spark = element1.value === 'Sales Percentage' ? percentage : sales;\n            all.checked = spark.dataLabelSettings.visible.indexOf('All') > -1;\n            negative.checked = spark.dataLabelSettings.visible.indexOf('Negative') > -1;\n            first.checked = spark.dataLabelSettings.visible.indexOf('Start') > -1;\n            last.checked = spark.dataLabelSettings.visible.indexOf('End') > -1;\n            high.checked = spark.dataLabelSettings.visible.indexOf('High') > -1;\n            low.checked = spark.dataLabelSettings.visible.indexOf('Low') > -1;\n        }\n        datalabelChange();\n        if ((element1.value === 'Sales Percentage' && percentage.tooltipSettings.visible === true) ||\n            (element1.value === 'Sales Count' && sales.tooltipSettings.visible === true)) {\n            tooltipElement.checked = true;\n        }\n        else {\n            tooltipElement.checked = false;\n        }\n        tooltipChange();\n        if ((element1.value === 'Sales Percentage' && percentage.tooltipSettings.trackLineSettings.visible === true) ||\n            (element1.value === 'Sales Count' && sales.tooltipSettings.trackLineSettings.visible === true)) {\n            tracklineElement.checked = true;\n        }\n        else {\n            tracklineElement.checked = false;\n        }\n        tracklineChange();\n        if ((element1.value === 'Sales Percentage' && percentage.axisSettings.lineSettings.visible === true) ||\n            (element1.value === 'Sales Count' && sales.axisSettings.lineSettings.visible === true)) {\n            axislineElement.checked = true;\n        }\n        else {\n            axislineElement.checked = false;\n        }\n        axislineChange();\n        rtlChange();\n        if ((element1.value === 'Sales Percentage' && percentage.enableRtl === true) ||\n            (element1.value === 'Sales Count' && sales.enableRtl === true)) {\n            rtlElement.checked = true;\n        }\n        else {\n            rtlElement.checked = false;\n        }\n        if (element1.value === 'Sales Percentage' && percentage.axisSettings.value !== 0) {\n            axisElement.value = percentage.axisSettings.value;\n            axisElement.min = 0;\n            axisElement.max = 10;\n            document.getElementById('axisval').innerHTML = 'Axis value: <span> ' + percentage.axisSettings.value;\n        }\n        if (element1.value === 'Sales Count' && sales.axisSettings.value !== 0) {\n            axisElement.value = sales.axisSettings.value;\n            axisElement.min = 0;\n            axisElement.max = 5000000;\n            document.getElementById('axisval').innerHTML = 'Axis value: <span> ' + sales.axisSettings.value;\n        }\n        axisChange();\n        all.checked = !(negative.checked || high.checked || low.checked || first.checked || last.checked);\n        negative.disabled = high.disabled = low.disabled = first.disabled = last.disabled = all.checked;\n    }\n    function allColorChange() {\n        let negative = negativeElement;\n        let first = firstElement;\n        let last = lastElement;\n        let high = highElement;\n        let low = lowElement;\n        if (allElement.checked == true) {\n            negativeElement.disabled = true;\n            firstElement.disabled = true;\n            lastElement.disabled = true;\n            highElement.disabled = true;\n            lowElement.disabled = true;\n        }\n        else {\n            negativeElement.disabled = false;\n            firstElement.disabled = false;\n            lastElement.disabled = false;\n            highElement.disabled = false;\n            lowElement.disabled = false;\n        }\n        let marker = markerElement;\n        let label = datalabelElement;\n        let element1 = document.getElementById('spark');\n        let spark = element1.value === 'Sales Percentage' ? percentage : sales;\n        spark.markerSettings.visible = (true && marker.checked) ? ['All'] : (marker.checked) ? getVisible() : [];\n        spark.dataLabelSettings.visible = (true && label.checked) ? ['All'] : (label.checked) ? getVisible() : [];\n        spark.refresh();\n    }\n    function colorChange() {\n        processMarkerLabel();\n    }\n    function processMarkerLabel() {\n        let marker = markerElement;\n        let label = datalabelElement;\n        let element1 = document.getElementById('spark');\n        let spark = element1.value === 'Sales Percentage' ? percentage : sales;\n        if (marker.checked) {\n            spark.markerSettings.visible = getVisible();\n            spark.refresh();\n        }\n        if (label.checked) {\n            spark.dataLabelSettings.visible = getVisible();\n            spark.refresh();\n        }\n    }\n    function getVisible() {\n        let visible = [];\n        if (allElement.checked)\n            return ['All'];\n        else {\n            if (negativeElement.checked)\n                visible.push(\"Negative\");\n            if (firstElement.checked)\n                visible.push(\"Start\");\n            if (lastElement.checked)\n                visible.push(\"End\");\n            if (firstElement.checked)\n                visible.push(\"High\");\n            if (lowElement.checked)\n                visible.push(\"Low\");\n        }\n        return visible;\n    }\n    function markerChange() {\n        let element1 = document.getElementById('spark');\n        let spark = element1.value === 'Sales Percentage' ? percentage : sales;\n        spark.markerSettings.visible = markerElement.checked ? getVisible() : [];\n        spark.refresh();\n    }\n    function datalabelChange() {\n        let element1 = document.getElementById('spark');\n        let spark = element1.value === 'Sales Percentage' ? percentage : sales;\n        spark.dataLabelSettings.visible = datalabelElement.checked ? getVisible() : [];\n        spark.refresh();\n    }\n    function rtlChange() {\n        let element1 = document.getElementById('spark');\n        let spark = element1.value === 'Sales Percentage' ? percentage : sales;\n        spark.enableRtl = rtlElement.checked ? true : false;\n        spark.refresh();\n    }\n    function tooltipChange() {\n        let element1 = document.getElementById('spark');\n        let spark = element1.value === 'Sales Percentage' ? percentage : sales;\n        spark.tooltipSettings.visible = tooltipElement.checked;\n        spark.tooltipSettings.format = '${xval}: ${yval}';\n        spark.refresh();\n    }\n    function tracklineChange() {\n        let element1 = document.getElementById('spark');\n        let spark = element1.value === 'Sales Percentage' ? percentage : sales;\n        spark.tooltipSettings.trackLineSettings.visible = tracklineElement.checked;\n        spark.tooltipSettings.trackLineSettings.color = 'red';\n        spark.tooltipSettings.trackLineSettings.width = 1;\n        spark.refresh();\n    }\n    function axislineChange() {\n        let element1 = document.getElementById('spark');\n        let spark = element1.value === 'Sales Percentage' ? percentage : sales;\n        spark.axisSettings.lineSettings.visible = axislineElement.checked;\n        spark.axisSettings.lineSettings.color = 'red';\n        spark.axisSettings.lineSettings.width = 2;\n        spark.refresh();\n    }\n    function axisChange() {\n        let value = parseInt(axisElement.value.toString(), 10);\n        let element1 = document.getElementById('spark');\n        let spark = element1.value === 'Sales Percentage' ? percentage : sales;\n        spark.axisSettings.value = value;\n        document.getElementById('axisval').innerHTML = \"Axis Value <span>\" + value;\n        spark.refresh();\n    }\n    function load(args) {\n        loadSparkLineTheme(args);\n    }\n    return (<div className='control-pane'>\n            <style>\n                {SAMPLE_CSS}\n            </style>\n            <div className=\"col-lg-8 control-section\">\n                <div id=\"spark-container\" className=\"row\">\n                    <div className=\"cols-sample-area\" style={{ \"margin\": \"auto\", \"textAlign\": \"center\" }}>\n                        <p style={{ \"fontSize\": \"18px\" }}> Worldwide car sales by brand - 2017</p>\n                        <table style={{ \"width\": \"100%\", \"margin\": \"auto\" }}>\n                            <tbody>\n                                <tr>\n                                    <td style={{ \"margin\": \"auto\" }}>Sales Percentage</td>\n                                    <td>\n                                        <SparklineComponent load={load.bind(this)} ref={m => percentage = m} id='spark1-container' height='200px' width='200px' lineWidth={1} type='Column' valueType='Category' tooltipSettings={{\n            format: '${xval} : ${yval}',\n            trackLineSettings: {\n                color: 'red',\n                width: 1\n            }\n        }} markerSettings={{\n            fill: 'red',\n            size: 5\n        }} axisSettings={{\n            lineSettings: {\n                color: 'red',\n                width: 2\n            }\n        }} dataSource={[\n            { x: 0, xval: 'AUDI', yval: 1 },\n            { x: 1, xval: 'BMW', yval: 5 },\n            { x: 2, xval: 'BUICK', yval: -1 },\n            { x: 3, xval: 'CETROEN', yval: -6 },\n            { x: 4, xval: 'CHEVROLET', yval: 0 },\n            { x: 5, xval: 'FIAT', yval: 1 },\n            { x: 6, xval: 'FORD', yval: -2 },\n            { x: 7, xval: 'HONDA', yval: 7 },\n            { x: 8, xval: 'HYUNDAI', yval: -9 },\n            { x: 9, xval: 'JEEP', yval: 0 },\n            { x: 10, xval: 'KIA', yval: -10 },\n            { x: 11, xval: 'MAZDA', yval: 3 },\n            { x: 12, xval: 'MERCEDES', yval: 13 },\n            { x: 13, xval: 'NISSAN', yval: 5 },\n            { x: 14, xval: 'OPEL/VHALL', yval: -6 },\n            { x: 15, xval: 'PEUGEOT', yval: 0 },\n            { x: 16, xval: 'RENAULT', yval: 7 },\n            { x: 17, xval: 'SKODA', yval: 5 },\n            { x: 18, xval: 'SUBARU', yval: 5 },\n            { x: 19, xval: 'SUZUKI', yval: 11 },\n            { x: 20, xval: 'TOYOTA', yval: 5 },\n            { x: 21, xval: 'VOLKSWAGEN', yval: 3 },\n        ]} xName='xval' yName='yval'>\n                                            <Inject services={[SparklineTooltip]}/>\n                                        </SparklineComponent>\n                                    </td>\n                                </tr>\n                                <tr>\n                                    <td style={{ \"margin\": \"auto\" }}>Sales Count</td>\n                                    <td>\n                                        <SparklineComponent load={load.bind(this)} ref={m => sales = m} id='spark2-container' height='200px' width='200px' lineWidth={1} type='Column' valueType='Category' tooltipSettings={{\n            format: '${xval} : ${yval}',\n            trackLineSettings: {\n                color: 'red',\n                width: 1\n            }\n        }} markerSettings={{\n            fill: 'red',\n            size: 5\n        }} axisSettings={{\n            lineSettings: {\n                color: 'red',\n                width: 2\n            }\n        }} dataSource={[\n            { x: 0, xval: 'AUDI', yval: 1847613 },\n            { x: 1, xval: 'BMW', yval: 2030331 },\n            { x: 2, xval: 'BUICK', yval: 1465823 },\n            { x: 3, xval: 'CETROEN', yval: 999888 },\n            { x: 4, xval: 'CHEVROLET', yval: 3857388 },\n            { x: 5, xval: 'FIAT', yval: 1503806 },\n            { x: 6, xval: 'FORD', yval: 5953122 },\n            { x: 7, xval: 'HONDA', yval: 4967689 },\n            { x: 8, xval: 'HYUNDAI', yval: 3951176 },\n            { x: 9, xval: 'JEEP', yval: 1390130 },\n            { x: 10, xval: 'KIA', yval: 2511293 },\n            { x: 11, xval: 'MAZDA', yval: 1495557 },\n            { x: 12, xval: 'MERCEDES', yval: 2834181 },\n            { x: 13, xval: 'NISSAN', yval: 4834694 },\n            { x: 14, xval: 'OPEL/VHALL', yval: 996559 },\n            { x: 15, xval: 'PEUGEOT', yval: 1590300 },\n            { x: 16, xval: 'RENAULT', yval: 2275227 },\n            { x: 17, xval: 'SKODA', yval: 1180672 },\n            { x: 18, xval: 'SUBARU', yval: 1050390 },\n            { x: 19, xval: 'SUZUKI', yval: 2891415 },\n            { x: 20, xval: 'TOYOTA', yval: 7843423 },\n            { x: 21, xval: 'VOLKSWAGEN', yval: 6639250 },\n        ]} xName='xval' yName='yval'>\n                                            <Inject services={[SparklineTooltip]}/>\n                                        </SparklineComponent>\n                                    </td>\n                                </tr>\n                            </tbody>\n                        </table>\n                    </div>\n                </div>\n                {/* Source Link */}\n                <div style={{ \"float\": \"right\", \"marginRight\": \"10px\" }}>Source: <a href=\" http://carsalesbase.com/global-car-sales-2017\" target=\"_blank\" aria-label=\"Navigate to the documentation for car sales base\">carsalesbase.com</a>\n                </div>\n            </div>\n\n            {/* Property Panel */}\n            <div className='col-lg-4 property-section'>\n                <PropertyPane title='Properties'>\n                    <table id='property' title='Properties' className='property-panel-table' style={{ width: '100%' }}>\n                        <tbody>\n                            <tr style={{ \"height\": \"30px\" }}>\n                                <td>\n                                    <div> Sparkline </div>\n                                </td>\n                                <td style={{ \"width\": \"50%\" }}>\n                                    <div>\n                                        <DropDownListComponent id=\"spark\" width=\"100%\" index={0} change={sparklineChange.bind(this)} ref={d => sparklineElement = d} dataSource={droplist} fields={{ text: 'value', value: 'value' }}/>\n                                    </div>\n                                </td>\n                            </tr>\n                            <tr style={{ \"height\": \"30px\" }}>\n                                <td style={{ \"width\": \"50%\" }}>\n                                    <div> Special Points </div>\n                                </td>\n                                <td style={{ \"width\": \"50%\" }}>\n                                    <table>\n                                    <tbody>\n                                        <tr>\n                                            <td style={{ \"padding\": \"5px\" }}>All</td>\n                                            <td>\n                                                <CheckBoxComponent change={allColorChange.bind(this)} ref={d => allElement = d} id='all' checked={true}/>\n                                            </td>\n                                            <td style={{ \"padding\": \"5px\" }}>Negative</td>\n                                            <td>\n                                                <CheckBoxComponent change={colorChange.bind(this)} ref={d => negativeElement = d} id='negative' disabled={true}/>\n                                            </td>\n                                        </tr>\n                                        <tr>\n                                            <td style={{ \"padding\": \"5px\" }}>First</td>\n                                            <td>\n                                                <CheckBoxComponent change={colorChange.bind(this)} ref={d => firstElement = d} id='first' disabled={true}/>\n                                            </td>\n                                            <td style={{ \"padding\": \"5px\" }}>Last</td>\n                                            <td>\n                                                <CheckBoxComponent change={colorChange.bind(this)} ref={d => lastElement = d} id='last' disabled={true}/>\n                                            </td>\n                                        </tr>\n                                        <tr>\n                                            <td style={{ \"padding\": \"5px\" }}>High</td>\n                                            <td>\n                                                <CheckBoxComponent change={colorChange.bind(this)} ref={d => highElement = d} id='high' disabled={true}/>\n                                            </td>\n                                            <td style={{ \"padding\": \"5px\" }}>Low</td>\n                                            <td>\n                                                <CheckBoxComponent change={colorChange.bind(this)} ref={d => lowElement = d} id='low' disabled={true}/>\n                                            </td>\n                                        </tr>\n                                        </tbody>\n                                    </table>\n                                </td>\n                            </tr>\n                            <tr style={{ \"height\": \"30px\" }}>\n                                <td style={{ \"width\": \"50%\" }}>\n                                    <div> Marker </div>\n                                </td>\n                                <td style={{ \"width\": \"50%\" }}>\n                                    <div>\n                                        <CheckBoxComponent change={markerChange.bind(this)} ref={d => markerElement = d} id='marker' disabled={false}/>\n                                    </div>\n                                </td>\n                            </tr>\n                            <tr style={{ \"height\": \"30px\" }}>\n                                <td style={{ \"width\": \"50%\" }}>\n                                    <div> Data Label </div>\n                                </td>\n                                <td style={{ \"width\": \"50%\" }}>\n                                    <div>\n                                        <CheckBoxComponent change={datalabelChange.bind(this)} ref={d => datalabelElement = d} id='datalabel' disabled={false}/>\n                                    </div>\n                                </td>\n                            </tr>\n                            <tr style={{ \"height\": \"30px\" }}>\n                                <td style={{ \"width\": \"50%\" }}>\n                                    <div> EnableRTL </div>\n                                </td>\n                                <td style={{ \"width\": \"50%\" }}>\n                                    <div>\n                                        <CheckBoxComponent change={rtlChange.bind(this)} ref={d => rtlElement = d} id='rtl' disabled={false}/>\n                                    </div>\n                                </td>\n                            </tr>\n                            <tr style={{ \"height\": \"30px\" }}>\n                                <td style={{ \"width\": \"50%\" }}>\n                                    <div> Tooltip </div>\n                                </td>\n                                <td style={{ \"width\": \"50%\" }}>\n                                    <div>\n                                        <CheckBoxComponent change={tooltipChange.bind(this)} ref={d => tooltipElement = d} id='tooltip' disabled={false}/>\n                                    </div>\n                                </td>\n                            </tr>\n                            <tr style={{ \"height\": \"30px\" }}>\n                                <td style={{ \"width\": \"50%\" }}>\n                                    <div> Track Line </div>\n                                </td>\n                                <td style={{ \"width\": \"50%\" }}>\n                                    <div>\n                                        <CheckBoxComponent change={tracklineChange.bind(this)} ref={d => tracklineElement = d} id='trackline' disabled={false}/>\n                                    </div>\n                                </td>\n                            </tr>\n                            <tr style={{ \"height\": \"30px\" }}>\n                                <td style={{ \"width\": \"50%\" }}>\n                                    <div> Axis Line </div>\n                                </td>\n                                <td style={{ \"width\": \"50%\" }}>\n                                    <div>\n                                        <CheckBoxComponent change={axislineChange.bind(this)} ref={d => axislineElement = d} id='axis1' disabled={false}/>\n                                    </div>\n                                </td>\n                            </tr>\n                            <tr>\n                                <td>\n                                    <div id='axisval'>Axis Value <span>&nbsp;&nbsp;&nbsp;0</span> </div>\n                                </td>\n                                <td>\n                                    <div className=\"content-wrapper\">\n                                        <style> {slidercss} </style>\n                                        <SliderComponent change={axisChange.bind(this)} ref={(slider) => axisElement = slider} type='MinRange' step={1} id=\"axis\" value={0} min={0} max={10} style={{ width: '100px' }} disabled={false}/>\n                                    </div>\n                                </td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </PropertyPane>\n            </div>\n        </div>);\n}\nexport default Customization;\n\nconst root = createRoot(document.getElementById('sample'));\nroot.render(<Customization />);","dependencies":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-react-base\":\"*\",\"@syncfusion/ej2-inputs\":\"*\",\"@syncfusion/ej2-react-inputs\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-react-buttons\":\"*\",\"@syncfusion/ej2-charts\":\"*\",\"@syncfusion/ej2-react-charts\":\"*\",\"@syncfusion/ej2-dropdowns\":\"*\",\"@syncfusion/ej2-react-dropdowns\":\"*\",\"@syncfusion/ej2/base\":\"*\",\"@syncfusion/ej2-charts'; // Import the necessary types from Syncfusion\":\"*\",\"@syncfusion/ej2-lists\":\"*\",\"@syncfusion/ej2-documenteditor\":\"*\",\"@syncfusion/ej2-splitbuttons\":\"*\",\"@syncfusion/ej2-navigations\":\"*\",\"@syncfusion/ej2-react-popups\":\"*\",\"@syncfusion/ej2-pivotview\":\"*\",\"@syncfusion/ej2-react-progressbar\":\"*\",\"@syncfusion/ej2-schedule\":\"*\"}"}