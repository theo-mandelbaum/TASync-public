{"index.css":"/* css */","theme-color.js":"export let loadSparkLineTheme = (args) => {\n    let theme = location.hash.split('/')[1];\n    theme = theme ? theme : 'Tailwind3';\n    args.sparkline.theme = (theme.charAt(0).toUpperCase() + theme.slice(1)).replace(/-dark/i, 'Dark').replace(/contrast/i, 'Contrast').replace(/-highContrast/i, 'HighContrast');\n    return args.sparkline.theme;\n};\n","index.html":"<!DOCTYPE html>\n<html>\n<head>\n    <title>Syncfusion React Sample</title>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\n    <meta name=\"author\" content=\"Syncfusion\" />\n    <link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\n</head>\n\n<body class=\"{{theme}}\">\n     <style>\n            .control-section\n            {\n                margin-top: 100px;\n            }\n    </style>\n    <div id='sample'>\n</body>\n</html>\n","index.js":"import { createRoot } from 'react-dom/client';\nimport './index.css';\n/**\n * Liveupdate sample for sparkline\n */\nimport * as React from \"react\";\nimport { SparklineComponent } from '@syncfusion/ej2-react-charts';\n\nimport { loadSparkLineTheme } from './theme-color';\nconst SAMPLE_CSS = `\n     .control-fluid {\n         padding: 0px !important;\n     }\n     .spark {\n         float: left;\n         width: 95%;\n         margin-left: 3%;\n     }\n     .index {\n         z-index: 1000;\n     }`;\nfunction LiveUpdate() {\n    let sparkInstance;\n    let sparkInstance1;\n    let sparkInstance2;\n    let sparkInstance3;\n    let temp1;\n    let temp3;\n    let temp2;\n    let temp4;\n    let timer1;\n    let timer2;\n    let timer3;\n    let timer4;\n    function load(args) {\n        loadSparkLineTheme(args);\n    }\n    function updateSparkline1(args) {\n        setTimeout(() => {\n            if (sparkInstance == null)\n                sparkInstance = args.sparkline;\n            if (temp1 == null)\n                temp1 = sparkInstance.dataSource.length - 1;\n            if (timer1 != null)\n                clearInterval(timer1);\n            timer1 = setInterval(() => update(), 500);\n        }, 500);\n    }\n    function updateSparkline2(args) {\n        setTimeout(() => {\n            if (sparkInstance1 == null)\n                sparkInstance1 = args.sparkline;\n            if (temp3 == null)\n                temp3 = sparkInstance1.dataSource.length - 1;\n            if (timer2 != null)\n                clearInterval(timer2);\n            timer2 = setInterval(() => update2(), 500);\n        }, 500);\n    }\n    function updateSparkline3(args) {\n        setTimeout(() => {\n            if (sparkInstance2 == null)\n                sparkInstance2 = args.sparkline;\n            if (temp2 == null)\n                temp2 = sparkInstance2.dataSource.length - 1;\n            if (timer3 != null)\n                clearInterval(timer3);\n            timer3 = setInterval(() => update1(), 500);\n        }, 500);\n    }\n    function updateSparkline4(args) {\n        setTimeout(() => {\n            if (sparkInstance3 == null)\n                sparkInstance3 = args.sparkline;\n            if (temp4 == null)\n                temp4 = sparkInstance3.dataSource.length - 1;\n            if (timer4 != null)\n                clearInterval(timer4);\n            timer4 = setInterval(() => update4(), 500);\n        }, 500);\n    }\n    function update() {\n        if (sparkInstance && sparkInstance.element.className.indexOf('e-sparkline') > -1) {\n            let value = ((Math.random() * 100) + 5) % 50;\n            sparkInstance.dataSource.push({ x: ++temp1, yval: value });\n            sparkInstance.dataSource.shift();\n            sparkInstance.refresh();\n            let cpu = document.getElementById('cpu');\n            cpu.innerHTML = ((value / 150) * 100).toFixed(0) + '% ' + ((value * 3) / 100).toFixed(2) + 'GHz';\n        }\n    }\n    function update2() {\n        if (sparkInstance1 && sparkInstance1.element.className.indexOf('e-sparkline') > -1) {\n            let value = ((Math.random() * 100) + 5) % 80;\n            sparkInstance1.dataSource.push({ x: ++temp3, yval: value });\n            sparkInstance1.dataSource.shift();\n            sparkInstance1.refresh();\n            let disk = document.getElementById('disk');\n            disk.innerHTML = value.toFixed(0) + '%';\n        }\n    }\n    function update1() {\n        if (sparkInstance2 && sparkInstance2.element.className.indexOf('e-sparkline') > -1) {\n            let value = Math.random();\n            if (value > 0.6) {\n                value = 6 + (value / 10);\n            }\n            else {\n                value = 6 - (value / 10);\n            }\n            sparkInstance2.dataSource.push({ x: ++temp2, yval: value });\n            sparkInstance2.dataSource.shift();\n            sparkInstance2.refresh();\n            let memory = document.getElementById('memory');\n            let gb = parseFloat(value.toString().replace('0', '')).toFixed(1);\n            memory.innerHTML = gb + '/15.8 GB (' + ((value / 15.8) * 100).toFixed(0) + '%)';\n        }\n    }\n    function update4() {\n        if (sparkInstance3 && sparkInstance3.element.className.indexOf('e-sparkline') > -1) {\n            let value = ((Math.random() * 100) + 5) % 80;\n            sparkInstance3.dataSource.push({ x: ++temp3, yval: value });\n            sparkInstance3.dataSource.shift();\n            sparkInstance3.refresh();\n            let net = document.getElementById('net');\n            net.innerHTML = 'R: ' + value.toFixed(0) + 'Kbps';\n        }\n    }\n    return (<div className='control-pane'>\n            <style>\n                {SAMPLE_CSS}\n            </style>\n            <div className='control-section'>\n                <div id='spark-container' className=\"row\">\n                    <div className=\"cols-sample-area\" style={{ \"marginTop\": \"8%\" }}>\n                        <div className=\"col-lg-3 col-m-3 col-sm-6\">\n                            <div className=\"spark\" id=\"spark-container1\">\n                                <div className=\"index\" style={{ \"fontSize\": \"12px\", \"position\": \"absolute\", \"marginTop\": \"10px\", \"marginLeft\": \"8%\" }}>\n                                    <b>CPU</b>\n                                </div>\n                                <div id=\"cpu\" className=\"index\" style={{ \"color\": \"#0877d6\", \"position\": \"absolute\", \"marginTop\": \"25px\", \"marginLeft\": \"8%\" }}>26% 1.2GHz</div>\n                                <SparklineComponent loaded={updateSparkline1.bind(this)} load={load.bind(this)} ref={m => sparkInstance = m} id='spark1-container' height='130px' width='90%' lineWidth={1} type='Area' valueType='Numeric' fill='#e8f2fc' axisSettings={{\n            minY: 0,\n            maxY: 150\n        }} containerArea={{\n            background: 'white',\n            border: {\n                color: '#dcdfe0',\n                width: 2\n            }\n        }} border={{\n            color: '#0358a0',\n            width: 1\n        }} dataSource={[\n            { x: 0, yval: 50 },\n            { x: 1, yval: 30 },\n            { x: 2, yval: 20 },\n            { x: 3, yval: 30 },\n            { x: 4, yval: 50 },\n            { x: 5, yval: 40 },\n            { x: 6, yval: 20 },\n            { x: 7, yval: 10 },\n            { x: 8, yval: 30 },\n            { x: 9, yval: 10 },\n            { x: 10, yval: 40 },\n            { x: 11, yval: 50 },\n            { x: 12, yval: 10 },\n            { x: 13, yval: 30 },\n            { x: 14, yval: 50 },\n            { x: 15, yval: 20 },\n            { x: 16, yval: 10 },\n            { x: 17, yval: 40 },\n            { x: 18, yval: 30 },\n            { x: 19, yval: 40 }\n        ]} xName='x' yName='yval'>\n                                </SparklineComponent>\n                            </div>\n                        </div>\n                        <div className=\"col-lg-3 col-m-3 col-sm-6\">\n                            <div className=\"spark\" id=\"spark-container2\">\n                                <div className='index' style={{ \"fontSize\": \"12px\", \"position\": \"absolute\", \"marginTop\": \"10px\", \"marginLeft\": \"8%\" }}>\n                                    <b>Disk</b>\n                                </div>\n                                <div id=\"disk\" className=\"index\" style={{ \"color\": \"#b247c6\", \"position\": \"absolute\", \"marginTop\": \"25px\", \"marginLeft\": \"8%\" }}>50%</div>\n                                <SparklineComponent loaded={updateSparkline2.bind(this)} load={load.bind(this)} ref={m => sparkInstance2 = m} id='spark2-container' height='130px' width='90%' lineWidth={1} type='Area' valueType='Numeric' fill='#f5e8fc' axisSettings={{\n            minY: 4,\n            maxY: 8\n        }} containerArea={{\n            background: 'white',\n            border: {\n                color: '#dcdfe0',\n                width: 2\n            }\n        }} border={{\n            color: '#b247c6',\n            width: 1\n        }} dataSource={[\n            { x: 0, yval: 6.05 },\n            { x: 1, yval: 6.03 },\n            { x: 2, yval: 6.02 },\n            { x: 3, yval: 6.07 },\n            { x: 4, yval: 6.05 },\n            { x: 5, yval: 6.09 },\n            { x: 6, yval: 6.08 },\n            { x: 7, yval: 6.01 },\n            { x: 8, yval: 6.03 },\n            { x: 9, yval: 6.01 },\n            { x: 10, yval: 6.07 },\n            { x: 11, yval: 6.05 },\n            { x: 12, yval: 6.01 },\n            { x: 13, yval: 6.06 },\n            { x: 14, yval: 6.05 },\n            { x: 15, yval: 6.03 },\n            { x: 16, yval: 6.01 },\n            { x: 17, yval: 6.09 },\n            { x: 18, yval: 6.06 },\n            { x: 19, yval: 6.05 }\n        ]} xName='x' yName='yval'>\n                                </SparklineComponent>\n                            </div>\n                        </div>\n                        <div className=\"col-lg-3 col-m-3 col-sm-6\">\n                            <div className=\"spark\" id=\"spark-container3\">\n                                <div className=\"index\" style={{ \"fontSize\": \"12px\", \"position\": \"absolute\", \"marginTop\": \"10px\", \"marginLeft\": \"8%\" }}>\n                                    <b>Memory</b>\n                                </div>\n                                <div id=\"memory\" className=\"index\" style={{ \"color\": \"#5bcc8f\", \"position\": \"absolute\", \"marginTop\": \"25px\", \"marginLeft\": \"8%\" }}>6.5/15.8 GB (41%)</div>\n                                <SparklineComponent loaded={updateSparkline3.bind(this)} load={load.bind(this)} ref={m => sparkInstance1 = m} id='spark3-container' height='130px' width='90%' lineWidth={1} type='Area' valueType='Numeric' fill='#e0f9d1' axisSettings={{\n            minY: 0,\n            maxY: 130\n        }} containerArea={{\n            background: 'white',\n            border: {\n                color: '#dcdfe0',\n                width: 2\n            }\n        }} border={{\n            color: '#27ad66',\n            width: 1\n        }} dataSource={[\n            { x: 0, yval: 50 },\n            { x: 1, yval: 30 },\n            { x: 2, yval: 20 },\n            { x: 3, yval: 70 },\n            { x: 4, yval: 50 },\n            { x: 5, yval: 20 },\n            { x: 6, yval: 80 },\n            { x: 7, yval: 10 },\n            { x: 8, yval: 30 },\n            { x: 9, yval: 10 },\n            { x: 10, yval: 70 },\n            { x: 11, yval: 50 },\n            { x: 12, yval: 10 },\n            { x: 13, yval: 60 },\n            { x: 14, yval: 50 },\n            { x: 15, yval: 30 },\n            { x: 16, yval: 10 },\n            { x: 17, yval: 20 },\n            { x: 18, yval: 60 },\n            { x: 19, yval: 50 }\n        ]} xName='x' yName='yval'>\n                                </SparklineComponent>\n                            </div>\n                        </div>\n                        <div className=\"col-lg-3 col-m-3 col-sm-6\">\n                            <div className=\"spark\" id=\"spark-container4\">\n                                <div className=\"index\" style={{ \"fontSize\": \"12px\", \"position\": \"absolute\", \"marginTop\": \"10px\", \"marginLeft\": \"8%\" }}>\n                                    <b>Ethernet</b>\n                                </div>\n                                <div id=\"net\" className=\"index\" style={{ \"color\": \"#d1a990\", \"position\": \"absolute\", \"marginTop\": \"25px\", \"marginLeft\": \"8%\" }}>6.5/15.8 GB (41%)</div>\n                                <SparklineComponent loaded={updateSparkline4.bind(this)} load={load.bind(this)} ref={m => sparkInstance3 = m} id='spark4-container' height='130px' width='90%' lineWidth={1} type='Area' valueType='Numeric' fill='#F2D8C7' axisSettings={{\n            minY: 0,\n            maxY: 120\n        }} containerArea={{\n            background: 'white',\n            border: {\n                color: '#dcdfe0',\n                width: 2\n            }\n        }} border={{\n            color: '#AA907A',\n            width: 1\n        }} dataSource={[\n            { x: 0, yval: 50 },\n            { x: 1, yval: 30 },\n            { x: 2, yval: 20 },\n            { x: 3, yval: 70 },\n            { x: 4, yval: 50 },\n            { x: 5, yval: 20 },\n            { x: 6, yval: 80 },\n            { x: 7, yval: 10 },\n            { x: 8, yval: 30 },\n            { x: 9, yval: 10 },\n            { x: 10, yval: 70 },\n            { x: 11, yval: 50 },\n            { x: 12, yval: 10 },\n            { x: 13, yval: 60 },\n            { x: 14, yval: 50 },\n            { x: 15, yval: 30 },\n            { x: 16, yval: 10 },\n            { x: 17, yval: 20 },\n            { x: 18, yval: 60 },\n            { x: 19, yval: 50 }\n        ]} xName='x' yName='yval'>\n                                </SparklineComponent>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>);\n}\nexport default LiveUpdate;\n\nconst root = createRoot(document.getElementById('sample'));\nroot.render(<LiveUpdate />);","dependencies":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-react-base\":\"*\",\"@syncfusion/ej2-charts\":\"*\",\"@syncfusion/ej2-react-charts\":\"*\",\"@syncfusion/ej2/base\":\"*\",\"@syncfusion/ej2-charts'; // Import the necessary types from Syncfusion\":\"*\",\"@syncfusion/ej2-lists\":\"*\",\"@syncfusion/ej2-documenteditor\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-splitbuttons\":\"*\",\"@syncfusion/ej2-navigations\":\"*\",\"@syncfusion/ej2-react-popups\":\"*\",\"@syncfusion/ej2-pivotview\":\"*\",\"@syncfusion/ej2-react-progressbar\":\"*\",\"@syncfusion/ej2-schedule\":\"*\"}"}