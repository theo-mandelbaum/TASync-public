{"index.css":"/* css */","index.html":"<!DOCTYPE html>\n<html>\n<head>\n    <title>Syncfusion React Sample</title>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\n    <meta name=\"author\" content=\"Syncfusion\" />\n    <link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\n</head>\n\n<body class=\"{{theme}}\">\n     <style>\n            .control-section\n            {\n                margin-top: 100px;\n            }\n    </style>\n    <div id='sample'>\n</body>\n</html>\n","index.js":"import { createRoot } from 'react-dom/client';\nimport './index.css';\n/**\n * Sample for Dynamic Stock Chart\n */\nimport * as React from \"react\";\nimport { StockChartComponent, StockChartSeriesCollectionDirective, StockChartSeriesDirective, Inject, Crosshair, DateTime, LineSeries, SplineSeries, CandleSeries, HiloOpenCloseSeries, HiloSeries, RangeAreaSeries, Trendlines } from '@syncfusion/ej2-react-charts';\nimport { EmaIndicator, RsiIndicator, BollingerBands, TmaIndicator, MomentumIndicator, SmaIndicator, AtrIndicator, AccumulationDistributionIndicator, MacdIndicator, StochasticIndicator, Export } from '@syncfusion/ej2-react-charts';\nimport { SampleBase } from './sample-base';\nconst SAMPLE_CSS = `\n.control-fluid {\n    padding: 0px !important;\n}\n    .charts {\n        align :center\n    }`;\nlet series1 = [];\nlet point1;\nlet value = 80;\nlet i;\nfor (i = 1; i < 1440; i++) {\n    if (Math.random() > .5) {\n        value += Math.random();\n    }\n    else {\n        value -= Math.random();\n    }\n    point1 = { x: new Date(2000, 1, 1, 0, i), y: value.toFixed(1) };\n    series1.push(point1);\n}\nexport class PeroidCustomization extends SampleBase {\n    render() {\n        return (<div className='control-pane'>\n                <style>\n                    {SAMPLE_CSS}\n                </style>\n                <div className='control-section'>\n                    <StockChartComponent id='stockchartperiod' primaryXAxis={{\n                valueType: 'DateTime', majorGridLines: { color: 'transparent' },\n                crosshairTooltip: { enable: true }\n            }} primaryYAxis={{\n                lineStyle: { color: 'transparent' },\n                majorTickLines: { color: 'transparent', width: 0 },\n                crosshairTooltip: { enable: true }\n            }} load={this.load.bind(this)} seriesType={[]} indicatorType={[]} exportType={[]} trendlineType={[]} title='AAPL stock price by minutes' periods={[\n                { intervalType: 'Minutes', interval: 1, text: '1m' },\n                { intervalType: 'Minutes', interval: 30, text: '30m' },\n                { intervalType: 'Hours', interval: 1, text: '1H' },\n                { intervalType: 'Hours', interval: 12, text: '12H', selected: true },\n                { text: '1D' }\n            ]} crosshair={{ enable: true, lineType: 'Both' }} chartArea={{ border: { width: 0 } }}>\n                        <Inject services={[DateTime, Crosshair, LineSeries, SplineSeries, CandleSeries, HiloOpenCloseSeries, HiloSeries, RangeAreaSeries, Trendlines,\n                EmaIndicator, RsiIndicator, BollingerBands, TmaIndicator, MomentumIndicator, SmaIndicator, AtrIndicator, Export,\n                AccumulationDistributionIndicator, MacdIndicator, StochasticIndicator]}/>\n                        <StockChartSeriesCollectionDirective>\n                            <StockChartSeriesDirective dataSource={series1} xName='x' yName='y' type='Line'>\n                            </StockChartSeriesDirective>\n                        </StockChartSeriesCollectionDirective>\n                    </StockChartComponent>\n                </div>\n            </div>);\n    }\n    load(args) {\n        let selectedTheme = location.hash.split('/')[1];\n        selectedTheme = selectedTheme ? selectedTheme : 'Fluent2';\n        args.stockChart.theme = (selectedTheme.charAt(0).toUpperCase() + selectedTheme.slice(1)).\n            replace(/-dark/i, \"Dark\").replace(/contrast/i, 'Contrast');\n    }\n    ;\n}\n\nconst root = createRoot(document.getElementById('sample'));\nroot.render(<PeroidCustomization />);","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n                this.rendereComplete();\n            });\n        }\n    }\n    export function updateSampleSection(){}\n    ","dependencies":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-react-base\":\"*\",\"@syncfusion/ej2-charts\":\"*\",\"@syncfusion/ej2-react-charts\":\"*\",\"@syncfusion/ej2/base\":\"*\",\"@syncfusion/ej2-charts'; // Import the necessary types from Syncfusion\":\"*\",\"@syncfusion/ej2-lists\":\"*\",\"@syncfusion/ej2-documenteditor\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-splitbuttons\":\"*\",\"@syncfusion/ej2-navigations\":\"*\",\"@syncfusion/ej2-react-popups\":\"*\",\"@syncfusion/ej2-pivotview\":\"*\",\"@syncfusion/ej2-react-progressbar\":\"*\",\"@syncfusion/ej2-schedule\":\"*\",\"@syncfusion/ej2-data\":\"*\"}"}