/******/ (function(modules) { // webpackBootstrap
/******/ 	// install a JSONP callback for chunk loading
/******/ 	function webpackJsonpCallback(data) {
/******/ 		var chunkIds = data[0];
/******/ 		var moreModules = data[1];
/******/ 		var executeModules = data[2];
/******/
/******/ 		// add "moreModules" to the modules object,
/******/ 		// then flag all "chunkIds" as loaded and fire callback
/******/ 		var moduleId, chunkId, i = 0, resolves = [];
/******/ 		for(;i < chunkIds.length; i++) {
/******/ 			chunkId = chunkIds[i];
/******/ 			if(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 				resolves.push(installedChunks[chunkId][0]);
/******/ 			}
/******/ 			installedChunks[chunkId] = 0;
/******/ 		}
/******/ 		for(moduleId in moreModules) {
/******/ 			if(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {
/******/ 				modules[moduleId] = moreModules[moduleId];
/******/ 			}
/******/ 		}
/******/ 		if(parentJsonpFunction) parentJsonpFunction(data);
/******/
/******/ 		while(resolves.length) {
/******/ 			resolves.shift()();
/******/ 		}
/******/
/******/ 		// add entry modules from loaded chunk to deferred list
/******/ 		deferredModules.push.apply(deferredModules, executeModules || []);
/******/
/******/ 		// run deferred modules when all chunks ready
/******/ 		return checkDeferredModules();
/******/ 	};
/******/ 	function checkDeferredModules() {
/******/ 		var result;
/******/ 		for(var i = 0; i < deferredModules.length; i++) {
/******/ 			var deferredModule = deferredModules[i];
/******/ 			var fulfilled = true;
/******/ 			for(var j = 1; j < deferredModule.length; j++) {
/******/ 				var depId = deferredModule[j];
/******/ 				if(installedChunks[depId] !== 0) fulfilled = false;
/******/ 			}
/******/ 			if(fulfilled) {
/******/ 				deferredModules.splice(i--, 1);
/******/ 				result = __webpack_require__(__webpack_require__.s = deferredModule[0]);
/******/ 			}
/******/ 		}
/******/
/******/ 		return result;
/******/ 	}
/******/
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// object to store loaded and loading chunks
/******/ 	// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 	// Promise = chunk loading, 0 = chunk loaded
/******/ 	var installedChunks = {
/******/ 		"./samples/image-editor/custom-toolbar-functional/app/index.min": 0
/******/ 	};
/******/
/******/ 	var deferredModules = [];
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	var jsonpArray = window["webpackJsonp"] = window["webpackJsonp"] || [];
/******/ 	var oldJsonpFunction = jsonpArray.push.bind(jsonpArray);
/******/ 	jsonpArray.push = webpackJsonpCallback;
/******/ 	jsonpArray = jsonpArray.slice();
/******/ 	for(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);
/******/ 	var parentJsonpFunction = oldJsonpFunction;
/******/
/******/
/******/ 	// add entry module to deferred list
/******/ 	deferredModules.push(["./samples/image-editor/custom-toolbar-functional/app/index.tsx","image.min"]);
/******/ 	// run deferred modules when ready
/******/ 	return checkDeferredModules();
/******/ })
/************************************************************************/
/******/ ({

/***/ "./samples/image-editor/custom-toolbar-functional/app/index.tsx":
/*!**********************************************************************!*\
  !*** ./samples/image-editor/custom-toolbar-functional/app/index.tsx ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar _this = this;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar client_1 = __webpack_require__(/*! react-dom/client */ \"./node_modules/react-dom/client.js\");\nvar React = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\nvar react_1 = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\nvar ej2_react_image_editor_1 = __webpack_require__(/*! @syncfusion/ej2-react-image-editor */ \"./node_modules/@syncfusion/ej2-react-image-editor/index.js\");\nvar ej2_base_1 = __webpack_require__(/*! @syncfusion/ej2-base */ \"./node_modules/@syncfusion/ej2-base/index.js\");\nvar sample_base_1 = __webpack_require__(/*! ./sample-base */ \"./samples/image-editor/custom-toolbar-functional/app/sample-base.tsx\");\nvar ej2_react_buttons_1 = __webpack_require__(/*! @syncfusion/ej2-react-buttons */ \"./node_modules/@syncfusion/ej2-react-buttons/index.js\");\nvar ej2_react_splitbuttons_1 = __webpack_require__(/*! @syncfusion/ej2-react-splitbuttons */ \"./node_modules/@syncfusion/ej2-react-splitbuttons/index.js\");\nvar ej2_react_navigations_1 = __webpack_require__(/*! @syncfusion/ej2-react-navigations */ \"./node_modules/@syncfusion/ej2-react-navigations/index.js\");\nvar ej2_react_inputs_1 = __webpack_require__(/*! @syncfusion/ej2-react-inputs */ \"./node_modules/@syncfusion/ej2-react-inputs/index.js\");\nvar base_1 = __webpack_require__(/*! @syncfusion/ej2/base */ \"./node_modules/@syncfusion/ej2/base.ts\");\nvar CustomToolbar = function () {\n    (0, react_1.useEffect)(function () {\n        (0, sample_base_1.updateSampleSection)();\n    }, []);\n    var imageEditorInstance = (0, react_1.useRef)(null);\n    var topToolbarInstance = (0, react_1.useRef)(null);\n    var bottomToolbarInstance = (0, react_1.useRef)(null);\n    var filterToolbarInstance = (0, react_1.useRef)(null);\n    var fontColorInstance = (0, react_1.useRef)(null);\n    var annotationInstance = (0, react_1.useRef)(null);\n    var fillColorInstance = (0, react_1.useRef)(null);\n    var strokeColorInstance = (0, react_1.useRef)(null);\n    var penColorInstance = (0, react_1.useRef)(null);\n    var currentToolbar = 'main';\n    var activeObjIndex;\n    var tempShapeSettings;\n    var isShapeCustomizing = false;\n    var isTextEditing = false;\n    var isShapeSelected = false;\n    var filter = ej2_react_image_editor_1.ImageFilterOption.Default;\n    var imageData;\n    var presetColors = {\n        'custom': ['#ffffff', '#000000', '#e91e63', '#9c27b0', '#673ab7', '#2196f3', '#03a9f4', '#00bcd4',\n            '#009688', '#8bc34a', '#cddc39', '#ffeb3b']\n    };\n    var toolbars = ['filter', 'rectangle', 'ellipse', 'line', 'text', 'edittext', 'freehanddraw'];\n    var editClicked = function () {\n        document.getElementById('imagePreviewContainer').style.display = 'none';\n        document.getElementById('image-editor-container').style.display = 'block';\n        imageEditorInstance.current.open(document.getElementById('previewImgContainer').src);\n        var toolbarArea = document.getElementById('top-toolbar');\n        toolbarArea.style.left = (toolbarArea.parentElement.parentElement.clientWidth / 2) - (toolbarArea.clientWidth / 2) + 'px';\n        toolbarArea = document.getElementById('bottom-toolbar');\n        toolbarArea.style.left = (toolbarArea.parentElement.parentElement.clientWidth / 2) - (toolbarArea.clientWidth / 2) + 'px';\n        refreshToolbar('main');\n    };\n    var fileOpened = function () {\n        imageData = imageEditorInstance.current.getImageData();\n    };\n    var onIECreated = function () {\n        var image = document.getElementById('previewImgContainer');\n        if (base_1.Browser.isDevice && image) {\n            image.src = 'https://ej2.syncfusion.com/react/demos/src/image-editor/images/flower.png';\n        }\n        document.addEventListener('keydown', keyDownEventHandler.bind(_this));\n        document.getElementById('image-editor-container').addEventListener('dblclick', doubleClickEvent.bind(_this));\n    };\n    var shapeChanging = function (args) {\n        if (args.action === 'select') {\n            isShapeSelected = true;\n            updateToolbar(args, true);\n        }\n        else if (args.action === 'insert') {\n            activeObjIndex = args.currentShapeSettings.id;\n            tempShapeSettings = args.currentShapeSettings;\n        }\n    };\n    var shapeChange = function (args) {\n        if (args.action === 'apply' && !isShapeCustomizing && !isShapeSelected) {\n            isTextEditing = false;\n            setTimeout(function () {\n                refreshToolbar('main');\n            }, 1);\n        }\n    };\n    var click = function () {\n        if (toolbars.indexOf(currentToolbar) !== -1) {\n            refreshToolbar('main');\n        }\n    };\n    // Handler used to reposition the tooltip on page scroll\n    var onScroll = function () {\n        if (document.getElementById(\"image-editor_sliderWrapper\")) {\n            var slider = (0, ej2_base_1.getComponent)(document.getElementById(\"image-editor_sliderWrapper\"), \"slider\");\n            slider.refreshTooltip(slider.tooltipTarget);\n        }\n    };\n    if (!(0, ej2_base_1.isNullOrUndefined)(document.getElementById(\"right-pane\"))) {\n        document\n            .getElementById(\"right-pane\")\n            .addEventListener(\"scroll\", onScroll.bind(_this));\n    }\n    var fontColorTemplate = function () {\n        var fontColorChanged = function (args) {\n            if (imageEditorInstance.current.disabled) {\n                return;\n            }\n            var selElem = fontColorInstance.current.element.nextElementSibling.querySelector('.e-selected-color');\n            selElem.style.backgroundColor = args.currentValue.rgba;\n            isShapeCustomizing = true;\n            var shapeSetting = imageEditorInstance.current.getShapeSetting(activeObjIndex);\n            shapeSetting.color = args.value;\n            imageEditorInstance.current.updateShape(shapeSetting, true);\n            tempShapeSettings.color = args.value;\n            isShapeSelected = true;\n            if (isTextEditing) {\n                imageEditorInstance.current.enableTextEditing();\n            }\n            isShapeCustomizing = false;\n        };\n        var color = tempShapeSettings && tempShapeSettings.color != null ? tempShapeSettings.color : '#fff';\n        return (React.createElement(\"div\", null,\n            React.createElement(ej2_react_inputs_1.ColorPickerComponent, { id: \"imageEditor_textFont\", ref: fontColorInstance, mode: 'Palette', cssClass: 'e-text-font-color', modeSwitcher: false, noColor: false, inline: false, showButtons: false, presetColors: presetColors, change: fontColorChanged, value: color, columns: 4 })));\n    };\n    var annotationTemplate = function () {\n        var items = [\n            { text: 'Rectangle', id: 'rectangle', iconCss: 'e-icons e-rectangle' },\n            { text: 'Ellipse', id: 'ellipse', iconCss: 'e-icons e-circle' },\n            { text: 'Line', id: 'line', iconCss: 'e-icons e-line' }\n        ];\n        var change = function (args) {\n            if (imageEditorInstance.current.disabled) {\n                return;\n            }\n            refreshToolbar(args.item.id);\n        };\n        return (React.createElement(\"div\", null,\n            React.createElement(ej2_react_splitbuttons_1.DropDownButtonComponent, { ref: annotationInstance, id: \"imageEditor_annotationButton\", iconCss: 'e-icons e-shapes', cssClass: 'e-image-popup', items: items, select: change })));\n    };\n    var fillColorTemplate = function () {\n        var tileRender = function (args) {\n            args.element.classList.add(\"e-circle-palette\");\n            args.element.appendChild((0, base_1.createElement)(\"span\", { className: \"e-circle-selection\" }));\n        };\n        var colors = (0, base_1.extend)({}, presetColors, {}, true);\n        colors['custom'][0] = '';\n        var fillColorChanged = function (args) {\n            if (imageEditorInstance.current.disabled) {\n                return;\n            }\n            var selElem = fillColorInstance.current.element.nextElementSibling.querySelector('.e-selected-color');\n            if (args.currentValue.rgba === '') {\n                selElem.classList.add('e-nocolor-item');\n            }\n            else {\n                selElem.classList.remove('e-nocolor-item');\n                selElem.style.background = args.currentValue.rgba;\n            }\n            selElem.style.background = args.currentValue.rgba;\n            isShapeCustomizing = true;\n            var shapeSetting = imageEditorInstance.current.getShapeSetting(activeObjIndex);\n            shapeSetting.fillColor = args.currentValue.rgba;\n            imageEditorInstance.current.updateShape(shapeSetting, true);\n            tempShapeSettings.fillColor = args.currentValue.rgba;\n            isShapeSelected = true;\n            if (isTextEditing) {\n                imageEditorInstance.current.enableTextEditing();\n            }\n            isShapeCustomizing = false;\n        };\n        return (React.createElement(\"div\", null,\n            React.createElement(ej2_react_inputs_1.ColorPickerComponent, { ref: fillColorInstance, id: \"imageEditor_shapeFill\", mode: 'Palette', cssClass: 'e-shape-fill-color', modeSwitcher: false, noColor: true, inline: false, showButtons: false, presetColors: colors, beforeTileRender: tileRender, change: fillColorChanged, value: '', columns: 4 })));\n    };\n    var strokeColorTemplate = function () {\n        var tileRender = function (args) {\n            args.element.classList.add(\"e-circle-palette\");\n            args.element.appendChild((0, base_1.createElement)(\"span\", { className: \"e-circle-selection\" }));\n        };\n        var strokeColorChanged = function (args) {\n            if (imageEditorInstance.current.disabled) {\n                return;\n            }\n            var selElem = strokeColorInstance.current.element.nextElementSibling.querySelector('.e-selected-color');\n            selElem.style.backgroundColor = args.currentValue.rgba;\n            isShapeCustomizing = true;\n            var shapeSetting = imageEditorInstance.current.getShapeSetting(activeObjIndex);\n            shapeSetting.strokeColor = args.currentValue.rgba;\n            imageEditorInstance.current.updateShape(shapeSetting, true);\n            tempShapeSettings.strokeColor = args.currentValue.rgba;\n            isShapeSelected = true;\n            if (isTextEditing) {\n                imageEditorInstance.current.enableTextEditing();\n            }\n            isShapeCustomizing = false;\n        };\n        return (React.createElement(\"div\", null,\n            React.createElement(ej2_react_inputs_1.ColorPickerComponent, { ref: strokeColorInstance, id: \"imageEditor_shapeStroke\", mode: 'Palette', cssClass: 'e-shape-stroke-color', modeSwitcher: false, noColor: false, inline: false, showButtons: false, presetColors: presetColors, beforeTileRender: tileRender, change: strokeColorChanged, value: '#fff', columns: 4 })));\n    };\n    var penColorTemplate = function () {\n        var tileRender = function (args) {\n            args.element.classList.add(\"e-circle-palette\");\n            args.element.appendChild((0, base_1.createElement)(\"span\", { className: \"e-circle-selection\" }));\n        };\n        var penColorChanged = function (args) {\n            if (imageEditorInstance.current.disabled) {\n                return;\n            }\n            var selElem = penColorInstance.current.element.nextElementSibling.querySelector('.e-selected-color');\n            ;\n            selElem.style.backgroundColor = args.currentValue.rgba;\n            if (tempShapeSettings && tempShapeSettings.id && tempShapeSettings.id.split('_')[0] === 'pen') {\n                var shapeSetting = { id: tempShapeSettings.id, type: ej2_react_image_editor_1.ShapeType.FreehandDraw,\n                    startX: tempShapeSettings.startX, startY: tempShapeSettings.startY,\n                    strokeColor: args.currentValue.hex, strokeWidth: tempShapeSettings.strokeWidth,\n                    opacity: tempShapeSettings.opacity, points: tempShapeSettings.points };\n                imageEditorInstance.current.updateShape(shapeSetting, true);\n                tempShapeSettings.strokeColor = args.currentValue.hex;\n                isShapeSelected = true;\n            }\n            else {\n                var shapeSetting = { id: null, type: ej2_react_image_editor_1.ShapeType.FreehandDraw, startX: null, startY: null,\n                    strokeColor: args.currentValue.hex };\n                imageEditorInstance.current.updateShape(shapeSetting);\n            }\n        };\n        return (React.createElement(\"div\", null,\n            React.createElement(ej2_react_inputs_1.ColorPickerComponent, { ref: penColorInstance, id: \"imageEditor_pen_stroke\", mode: 'Palette', cssClass: 'e-pen-color', modeSwitcher: false, noColor: false, inline: false, showButtons: false, presetColors: presetColors, beforeTileRender: tileRender, change: penColorChanged, value: '#fff', columns: 4 })));\n    };\n    var defaultCanvasTemplate = function () {\n        return (React.createElement(\"div\", { className: 'filter-wrapper', style: { boxSizing: \"content-box\" } },\n            React.createElement(\"canvas\", { id: 'imageEditor_defaultCanvas' }),\n            React.createElement(\"div\", { style: { textAlign: \"center\" } },\n                React.createElement(\"span\", null, \"Default\"))));\n    };\n    var chromeCanvasTemplate = function () {\n        return (React.createElement(\"div\", { className: 'filter-wrapper', style: { boxSizing: \"content-box\" } },\n            React.createElement(\"canvas\", { id: 'imageEditor_chromeCanvas' }),\n            React.createElement(\"div\", { style: { textAlign: \"center\" } },\n                React.createElement(\"span\", null, \"Chrome\"))));\n    };\n    var coldCanvasTemplate = function () {\n        return (React.createElement(\"div\", { className: 'filter-wrapper', style: { boxSizing: \"content-box\" } },\n            React.createElement(\"canvas\", { id: 'imageEditor_coldCanvas' }),\n            React.createElement(\"div\", { style: { textAlign: \"center\" } },\n                React.createElement(\"span\", null, \"Cold\"))));\n    };\n    var warmCanvasTemplate = function () {\n        return (React.createElement(\"div\", { className: 'filter-wrapper', style: { boxSizing: \"content-box\" } },\n            React.createElement(\"canvas\", { id: 'imageEditor_warmCanvas' }),\n            React.createElement(\"div\", { style: { textAlign: \"center\" } },\n                React.createElement(\"span\", null, \"Warm\"))));\n    };\n    var grayscaleCanvasTemplate = function () {\n        return (React.createElement(\"div\", { className: 'filter-wrapper', style: { boxSizing: \"content-box\" } },\n            React.createElement(\"canvas\", { id: 'imageEditor_grayscaleCanvas' }),\n            React.createElement(\"div\", { style: { textAlign: \"center\" } },\n                React.createElement(\"span\", null, \"Grayscale\"))));\n    };\n    var sepiaCanvasTemplate = function () {\n        return (React.createElement(\"div\", { className: 'filter-wrapper', style: { boxSizing: \"content-box\" } },\n            React.createElement(\"canvas\", { id: 'imageEditor_sepiaCanvas' }),\n            React.createElement(\"div\", { style: { textAlign: \"center\" } },\n                React.createElement(\"span\", null, \"Sepia\"))));\n    };\n    var invertCanvasTemplate = function () {\n        return (React.createElement(\"div\", { className: 'filter-wrapper', style: { boxSizing: \"content-box\" } },\n            React.createElement(\"canvas\", { id: 'imageEditor_invertCanvas' }),\n            React.createElement(\"div\", { style: { textAlign: \"center\" } },\n                React.createElement(\"span\", null, \"Invert\"))));\n    };\n    var onTopToolbarCreated = function () {\n        var toolbarArea = document.getElementById('top-toolbar');\n        toolbarArea.style.left = (toolbarArea.parentElement.parentElement.clientWidth / 2) - (toolbarArea.clientWidth / 2) + 'px';\n    };\n    var onBottomToolbarCreated = function () {\n        var toolbarArea = document.getElementById('bottom-toolbar');\n        toolbarArea.style.left = (toolbarArea.parentElement.parentElement.clientWidth / 2) - (toolbarArea.clientWidth / 2) + 'px';\n    };\n    var onFilterToolbarCreated = function () {\n        var inMemoryCanvas = document.createElement('canvas');\n        var inMemoryContext = inMemoryCanvas.getContext('2d');\n        inMemoryCanvas.width = imageData.width;\n        inMemoryCanvas.height = imageData.height;\n        inMemoryContext.putImageData(imageData, 0, 0);\n        updateFilterCanvas('_defaultCanvas', 'default', inMemoryCanvas);\n        updateFilterCanvas('_chromeCanvas', 'chrome', inMemoryCanvas);\n        updateFilterCanvas('_coldCanvas', 'cold', inMemoryCanvas);\n        updateFilterCanvas('_warmCanvas', 'warm', inMemoryCanvas);\n        updateFilterCanvas('_grayscaleCanvas', 'grayscale', inMemoryCanvas);\n        updateFilterCanvas('_sepiaCanvas', 'sepia', inMemoryCanvas);\n        updateFilterCanvas('_invertCanvas', 'invert', inMemoryCanvas);\n    };\n    var updateFilterCanvas = function (selector, type, inMemoryCanvas) {\n        var filter = document.querySelector('#imageEditor' + selector);\n        if (filter) {\n            var ctx = filter.getContext('2d');\n            ctx = filter.getContext('2d');\n            filter.style.width = '100px';\n            filter.style.height = '100px';\n            ctx.filter = imageEditorInstance.current.getImageFilter(toPascalCase(type));\n            ctx.drawImage(inMemoryCanvas, 0, 0, 300, 150);\n        }\n    };\n    var toolbarClicked = function (args) {\n        var item = args.item.id.toLowerCase();\n        var dimension = imageEditorInstance.current.getImageDimension();\n        var imageData;\n        var canvas;\n        switch (item) {\n            case 'back':\n                apply();\n                refreshToolbar('main');\n                break;\n            case 'cancel':\n                isTextEditing = false;\n                if (currentToolbar === 'main') {\n                    document.getElementById('image-editor-container').style.display = 'none';\n                    document.getElementById('imagePreviewContainer').style.display = 'block';\n                    imageEditorInstance.current.reset();\n                }\n                else {\n                    if ((isShapeCustomizing || isShapeSelected) && tempShapeSettings && tempShapeSettings.id) {\n                        imageEditorInstance.current.updateShape(tempShapeSettings);\n                    }\n                    imageEditorInstance.current.clearSelection(true);\n                    refreshToolbar('main');\n                }\n                break;\n            case 'undo':\n                if (currentToolbar === 'pen') {\n                    imageEditorInstance.current.freeHandDraw(false);\n                }\n                isTextEditing = false;\n                imageEditorInstance.current.undo();\n                refreshToolbar('main');\n                break;\n            case 'redo':\n                if (currentToolbar === 'pen') {\n                    imageEditorInstance.current.freeHandDraw(false);\n                }\n                isTextEditing = false;\n                imageEditorInstance.current.redo();\n                refreshToolbar('main');\n                break;\n            case 'ok':\n                isTextEditing = false;\n                if (currentToolbar === 'main') {\n                    imageData = imageEditorInstance.current.getImageData();\n                    canvas = document.createElement('canvas');\n                    canvas.width = imageData.width;\n                    canvas.height = imageData.height;\n                    canvas.getContext('2d').putImageData(imageData, 0, 0);\n                    document.getElementById('previewImgContainer').src = canvas.toDataURL();\n                    imageEditorInstance.current.open(imageData);\n                    document.getElementById('image-editor-container').style.display = 'none';\n                    document.getElementById('imagePreviewContainer').style.display = 'block';\n                }\n                else {\n                    apply();\n                    refreshToolbar('main');\n                }\n                break;\n            case 'cropandtransform':\n                imageEditorInstance.current.select('custom');\n                refreshToolbar('crop');\n                break;\n            case 'rotateleft':\n                imageEditorInstance.current.rotate(-90);\n                break;\n            case 'rotateright':\n                imageEditorInstance.current.rotate(90);\n                break;\n            case 'addtext':\n                imageEditorInstance.current.drawText(dimension.x + (dimension.width / 2) - 65, dimension.y + (dimension.height / 2) - 15, 'Add Text', 'Arial', 30, false, false, '#fff', true);\n                isShapeSelected = true;\n                refreshToolbar('text');\n                break;\n            case 'remove':\n                if ((0, ej2_base_1.isNullOrUndefined)(activeObjIndex) && tempShapeSettings && tempShapeSettings.id) {\n                    activeObjIndex = tempShapeSettings.id;\n                }\n                if (isTextEditing) {\n                    tempShapeSettings = imageEditorInstance.current.getShapeSetting(activeObjIndex);\n                    activeObjIndex = tempShapeSettings.id;\n                }\n                imageEditorInstance.current.deleteShape(activeObjIndex);\n                refreshToolbar('main');\n                break;\n            case 'edittext':\n                isTextEditing = true;\n                imageEditorInstance.current.enableTextEditing();\n                refreshToolbar('edittext');\n                break;\n            case 'addpen':\n                imageEditorInstance.current.freeHandDraw(true);\n                refreshToolbar('pen');\n                break;\n            case 'filters':\n                refreshToolbar('filter');\n                break;\n        }\n    };\n    var apply = function () {\n        if (currentToolbar === 'crop') {\n            imageEditorInstance.current.crop();\n        }\n        else if (currentToolbar === 'pen') {\n            if (activeObjIndex && activeObjIndex.split('_')[0] === 'pen') {\n                tempShapeSettings = imageEditorInstance.current.getShapeSetting(activeObjIndex);\n            }\n            else {\n                var shapeSettings = imageEditorInstance.current.getShapeSettings();\n                if (shapeSettings.length > 0) {\n                    tempShapeSettings = shapeSettings[shapeSettings.length - 1].id.split('_')[0] === 'pen' ? shapeSettings[shapeSettings.length - 1] : null;\n                    if (tempShapeSettings) {\n                        imageEditorInstance.current.selectShape(tempShapeSettings.id);\n                    }\n                    else {\n                        imageEditorInstance.current.freeHandDraw(false);\n                    }\n                }\n                else {\n                    imageEditorInstance.current.freeHandDraw(false);\n                    return;\n                }\n            }\n            if (tempShapeSettings) {\n                imageEditorInstance.current.updateShape(tempShapeSettings);\n            }\n        }\n        else if (currentToolbar === 'freehanddraw' && tempShapeSettings) {\n            imageEditorInstance.current.updateShape(tempShapeSettings);\n        }\n        else if (currentToolbar !== 'filter' && activeObjIndex) {\n            tempShapeSettings = imageEditorInstance.current.getShapeSetting(activeObjIndex);\n            imageEditorInstance.current.updateShape(tempShapeSettings);\n        }\n        tempShapeSettings = null;\n        activeObjIndex = null;\n    };\n    var filterImage = function (args) {\n        imageEditorInstance.current.applyImageFilter(args.item.id);\n        filter = args.item.id;\n    };\n    var refreshToolbar = function (type, isEvent) {\n        var toolbar = bottomToolbarInstance.current;\n        var items = [];\n        var filterToolbar;\n        var itemModel;\n        var dimension = imageEditorInstance.current.getImageDimension();\n        ;\n        var shapeSettings;\n        document.getElementById('filter-toolbar').style.display = 'none';\n        currentToolbar = type;\n        switch (type) {\n            case 'main':\n                items = ['cropAndTransform', 'addText', 'shapes', 'addPen', 'filters'];\n                break;\n            case 'crop':\n                items = ['rotateLeft', 'rotateRight'];\n                break;\n            case 'text':\n            case 'edittext':\n                items = ['back', 'fontColor', 'remove', 'editText'];\n                break;\n            case 'rectangle':\n                items = ['back', 'fillColor', 'strokeColor', 'remove'];\n                if (!isEvent) {\n                    imageEditorInstance.current.drawRectangle(dimension.x + (dimension.width / 2) - 100, dimension.y + (dimension.height / 2) - 50, 200, 100, 2, '#fff', null, null, true);\n                    isShapeSelected = true;\n                }\n                break;\n            case 'ellipse':\n                items = ['back', 'fillColor', 'strokeColor', 'remove'];\n                if (!isEvent) {\n                    imageEditorInstance.current.drawEllipse(dimension.x + (dimension.width / 2) - 100, dimension.y + (dimension.height / 2) - 50, 100, 50, 2, '#fff', null, null, true);\n                    isShapeSelected = true;\n                }\n                break;\n            case 'line':\n                items = ['back', 'strokeColor', 'remove'];\n                if (!isEvent) {\n                    imageEditorInstance.current.drawLine(dimension.x + (dimension.width / 2) - 200, dimension.y + (dimension.height / 2) - 100, dimension.x + (dimension.width / 2) + 200, dimension.y + (dimension.height / 2) + 100, 2, '#fff', true);\n                    isShapeSelected = true;\n                }\n                break;\n            case 'pen':\n            case 'freehanddraw':\n                items = ['back', 'penStrokeColor', 'remove'];\n                break;\n            case 'filter':\n                document.getElementById('filter-toolbar').style.display = 'block';\n                onFilterToolbarCreated();\n                items = ['default', 'chrome', 'cold', 'warm', 'grayscale', 'sepia', 'invert'];\n                break;\n        }\n        for (var i = 0; i < toolbar.items.length; i++) {\n            if (items.indexOf(toolbar.items[i].id) !== -1) {\n                toolbar.items[i].visible = true;\n                if (toolbar.items[i].id.toLowerCase() === 'edittext') {\n                    if (type === 'edittext') {\n                        toolbar.items[i].disabled = true;\n                        setTimeout(function () {\n                            document.querySelector('.e-textarea').focus();\n                        }, 1);\n                    }\n                    else {\n                        toolbar.items[i].disabled = false;\n                    }\n                }\n            }\n            else {\n                toolbar.items[i].visible = false;\n            }\n            if (toolbar.items[i].id === 'remove') {\n                if (type === 'pen') {\n                    toolbar.items[i].disabled = true;\n                }\n                else {\n                    toolbar.items[i].disabled = false;\n                }\n            }\n        }\n        var enableUndo = imageEditorInstance.current.canUndo();\n        var enableRedo = imageEditorInstance.current.canRedo();\n        var topToolbar = topToolbarInstance.current;\n        for (var i = 0; i < topToolbar.items.length; i++) {\n            if (topToolbar.items[i].id === 'undo') {\n                topToolbar.items[i].disabled = !enableUndo;\n            }\n            else if (topToolbar.items[i].id === 'redo') {\n                topToolbar.items[i].disabled = !enableRedo;\n            }\n            else if (topToolbar.items[i].id === 'ok') {\n                if (currentToolbar === 'main') {\n                    topToolbar.items[i].visible = true;\n                    topToolbar.items[i].tooltipText = 'Save';\n                    topToolbar.items[i].prefixIcon = 'e-icons e-save';\n                }\n                else if (currentToolbar === 'crop' || currentToolbar === 'filter') {\n                    topToolbar.items[i].visible = true;\n                    topToolbar.items[i].tooltipText = 'Apply';\n                    topToolbar.items[i].prefixIcon = 'e-icons e-check-tick';\n                }\n                else {\n                    topToolbar.items[i].visible = false;\n                }\n            }\n            else if (topToolbar.items[i].id === 'cancel') {\n                if (currentToolbar === 'main' || currentToolbar === 'crop') {\n                    topToolbar.items[i].visible = true;\n                }\n                else {\n                    topToolbar.items[i].visible = false;\n                }\n            }\n        }\n        setTimeout(function () {\n            var toolbarArea = document.getElementById('bottom-toolbar');\n            toolbarArea.style.left = (toolbarArea.parentElement.parentElement.clientWidth / 2) - (toolbarArea.clientWidth / 2) + 'px';\n            toolbarArea = document.getElementById('top-toolbar');\n            toolbarArea.style.left = (toolbarArea.parentElement.parentElement.clientWidth / 2) - (toolbarArea.clientWidth / 2) + 'px';\n        }, 1);\n    };\n    var updateToolbar = function (args, isEvent) {\n        var type = args.currentShapeSettings.type.toLowerCase();\n        refreshToolbar(type, isEvent);\n        if (isEvent) {\n            tempShapeSettings = args.currentShapeSettings;\n            activeObjIndex = tempShapeSettings.id;\n        }\n        setTimeout(function () {\n            var selFillElem = fillColorInstance.current.element.nextElementSibling.querySelector('.e-selected-color');\n            var selStrokeElem = strokeColorInstance.current.element.nextElementSibling.querySelector('.e-selected-color');\n            var selTextStrokeElem = fontColorInstance.current.element.nextElementSibling.querySelector('.e-selected-color');\n            var selPenStrokeElem = penColorInstance.current.element.nextElementSibling.querySelector('.e-selected-color');\n            if (selFillElem && (type === 'rectangle' || type === 'ellipse')) {\n                if (args.currentShapeSettings.fillColor === '') {\n                    selFillElem.classList.add('e-nocolor-item');\n                }\n                else {\n                    selFillElem.classList.remove('e-nocolor-item');\n                    selFillElem.style.background = args.currentShapeSettings.fillColor;\n                }\n                if (document.querySelector('#' + 'imageEditor_shapeFill')) {\n                    fillColorInstance.current.value = args.currentShapeSettings.fillColor;\n                }\n            }\n            if (selStrokeElem && (type === 'rectangle' || type === 'ellipse' || type === 'line')) {\n                selStrokeElem.style.backgroundColor = args.currentShapeSettings.strokeColor;\n                selStrokeElem.children[0].style.backgroundColor = args.currentShapeSettings.strokeColor;\n                if (document.querySelector('#' + 'imageEditor_shapeStroke')) {\n                    strokeColorInstance.current.value = args.currentShapeSettings.strokeColor;\n                }\n            }\n            if (selTextStrokeElem && type === 'text') {\n                selTextStrokeElem.style.backgroundColor = args.currentShapeSettings.color;\n                selTextStrokeElem.children[0].style.backgroundColor = args.currentShapeSettings.color;\n                if (document.querySelector('#' + 'imageEditor_textFont')) {\n                    fontColorInstance.current.value = args.currentShapeSettings.color;\n                }\n            }\n            if (selPenStrokeElem && type === 'freehanddraw') {\n                selPenStrokeElem.style.backgroundColor = args.currentShapeSettings.strokeColor;\n                selPenStrokeElem.children[0].style.backgroundColor = args.currentShapeSettings.strokeColor;\n                if (document.querySelector('#' + 'imageEditor_penStroke')) {\n                    penColorInstance.current.value = args.currentShapeSettings.strokeColor;\n                }\n            }\n        }, 10);\n    };\n    var toPascalCase = function (text) {\n        return text.charAt(0).toUpperCase() + text.slice(1);\n    };\n    var keyDownEventHandler = function (e) {\n        if (e.ctrlKey && (e.key === '+' || e.key === '-')) {\n            e.preventDefault();\n        }\n        switch (e.key) {\n            case (e.ctrlKey && 's'):\n                imageEditorInstance.current.export();\n                break;\n            case (e.ctrlKey && 'z'):\n                isTextEditing = false;\n                refreshToolbar('main');\n                break;\n            case (e.ctrlKey && 'y'):\n                isTextEditing = false;\n                refreshToolbar('main');\n                break;\n            case 'Delete':\n                if ((0, ej2_base_1.isNullOrUndefined)(activeObjIndex) && tempShapeSettings && tempShapeSettings.id) {\n                    activeObjIndex = tempShapeSettings.id;\n                }\n                if (activeObjIndex) {\n                    imageEditorInstance.current.deleteShape(activeObjIndex);\n                }\n                refreshToolbar('main');\n                break;\n            case 'Escape':\n                if (currentToolbar === 'crop') {\n                    imageEditorInstance.current.clearSelection(true);\n                    refreshToolbar('main');\n                }\n                break;\n            case 'Enter':\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                if (!e.target.closest('.e-textarea')) {\n                    apply();\n                    refreshToolbar('main');\n                }\n                break;\n        }\n    };\n    var doubleClickEvent = function (e) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        if (e.type === 'dblclick' && e.target.closest('.e-textarea')) {\n            isTextEditing = true;\n        }\n    };\n    return (React.createElement(\"div\", { className: \"control-pane\" },\n        React.createElement(\"div\", { className: \"control-section\" },\n            React.createElement(\"div\", { className: \"row\" },\n                React.createElement(\"div\", { className: 'col-lg-12 control-section e-img-editor-sample' },\n                    React.createElement(\"div\", { className: 'customToolbar' },\n                        React.createElement(\"div\", { className: \"header\" },\n                            React.createElement(\"div\", { className: \"header-details\" },\n                                React.createElement(\"div\", { className: \"header-name\" }, \"Image Editor\"))),\n                        React.createElement(\"div\", { className: 'image-preview-container', id: 'imagePreviewContainer' },\n                            React.createElement(\"img\", { src: \"https://ej2.syncfusion.com/react/demos/src/image-editor/images/bridge.jpg\", id: \"previewImgContainer\", className: \"preview-img-container\", alt: \"previewImage\" }),\n                            React.createElement(\"br\", null),\n                            React.createElement(\"div\", { className: 'button-container', id: \"button-container\" },\n                                React.createElement(ej2_react_buttons_1.FabComponent, { id: 'edit', className: 'custom-button', iconCss: 'e-icons e-edit', position: 'BottomRight', target: '.image-preview-container', isPrimary: true, onClick: editClicked, content: 'Edit Image' }))),\n                        React.createElement(\"div\", { className: \"image-editor-container\", id: \"image-editor-container\", style: { display: 'none' } },\n                            React.createElement(\"div\", { id: \"top-toolbarArea\" },\n                                React.createElement(ej2_react_navigations_1.ToolbarComponent, { ref: topToolbarInstance, id: \"top-toolbar\", created: onTopToolbarCreated, clicked: toolbarClicked },\n                                    React.createElement(ej2_react_navigations_1.ItemsDirective, null,\n                                        React.createElement(ej2_react_navigations_1.ItemDirective, { id: 'cancel', prefixIcon: 'e-icons e-close', tooltipText: 'Cancel', align: 'Center' }),\n                                        React.createElement(ej2_react_navigations_1.ItemDirective, { id: 'undo', prefixIcon: 'e-icons e-undo', tooltipText: 'Undo', align: 'Center', disabled: true }),\n                                        React.createElement(ej2_react_navigations_1.ItemDirective, { id: 'redo', prefixIcon: 'e-icons e-redo', tooltipText: 'Redo', align: 'Center', disabled: true }),\n                                        React.createElement(ej2_react_navigations_1.ItemDirective, { id: 'ok', prefixIcon: 'e-icons e-save', tooltipText: 'Save', align: 'Center' })))),\n                            React.createElement(\"div\", { id: \"imageEditor\" },\n                                React.createElement(ej2_react_image_editor_1.ImageEditorComponent, { ref: imageEditorInstance, created: onIECreated, fileOpened: fileOpened, toolbar: [], showQuickAccessToolbar: false, shapeChanging: shapeChanging, shapeChange: shapeChange, click: click, zoomSettings: { minZoomFactor: 0.1, maxZoomFactor: 50 } })),\n                            React.createElement(\"div\", { id: \"bottom-toolbarArea\" },\n                                React.createElement(ej2_react_navigations_1.ToolbarComponent, { ref: bottomToolbarInstance, id: \"bottom-toolbar\", created: onBottomToolbarCreated, clicked: toolbarClicked },\n                                    React.createElement(ej2_react_navigations_1.ItemsDirective, null,\n                                        React.createElement(ej2_react_navigations_1.ItemDirective, { id: 'cropAndTransform', prefixIcon: 'e-icons e-crop', tooltipText: 'Crop and Transform', align: 'Center' }),\n                                        React.createElement(ej2_react_navigations_1.ItemDirective, { id: 'back', prefixIcon: 'e-icons e-arrow-left', tooltipText: 'Back', align: 'Center', visible: false }),\n                                        React.createElement(ej2_react_navigations_1.ItemDirective, { id: 'rotateLeft', prefixIcon: 'e-icons e-transform-left', tooltipText: 'Rotate Left', align: 'Center', visible: false }),\n                                        React.createElement(ej2_react_navigations_1.ItemDirective, { id: 'rotateRight', prefixIcon: 'e-icons e-transform-right', tooltipText: 'Rotate Right', align: 'Center', visible: false }),\n                                        React.createElement(ej2_react_navigations_1.ItemDirective, { id: 'addText', prefixIcon: 'e-icons e-text-annotation', tooltipText: 'Text', align: 'Center' }),\n                                        React.createElement(ej2_react_navigations_1.ItemDirective, { id: 'fontColor', cssClass: 'top-icon e-text-fontColor', tooltipText: 'Font Color', align: 'Center', visible: false, type: 'Input', template: fontColorTemplate }),\n                                        React.createElement(ej2_react_navigations_1.ItemDirective, { id: 'shapes', prefixIcon: 'e-icons e-shapes', tooltipText: 'Annotations', align: 'Center', template: annotationTemplate }),\n                                        React.createElement(ej2_react_navigations_1.ItemDirective, { id: 'fillColor', prefixIcon: 'e-icons e-copy', cssClass: 'top-icon e-fill', tooltipText: 'Fill Color', align: 'Center', visible: false, type: 'Input', template: fillColorTemplate }),\n                                        React.createElement(ej2_react_navigations_1.ItemDirective, { id: 'strokeColor', prefixIcon: 'e-icons e-copy', cssClass: 'top-icon e-stroke', tooltipText: 'Stroke Color', align: 'Center', visible: false, type: 'Input', template: strokeColorTemplate }),\n                                        React.createElement(ej2_react_navigations_1.ItemDirective, { id: 'penStrokeColor', prefixIcon: 'e-icons e-copy', cssClass: 'top-icon e-pen-stroke-color', tooltipText: 'Stroke Color', align: 'Center', visible: false, type: 'Input', template: penColorTemplate }),\n                                        React.createElement(ej2_react_navigations_1.ItemDirective, { id: 'remove', prefixIcon: 'e-icons e-trash', tooltipText: 'Remove', align: 'Center', visible: false, disabled: false }),\n                                        React.createElement(ej2_react_navigations_1.ItemDirective, { id: 'editText', prefixIcon: 'e-icons e-annotation-edit', cssClass: 'top-icon e-annotation-edit', tooltipText: 'Edit Text', align: 'Center', visible: false, disabled: false }),\n                                        React.createElement(ej2_react_navigations_1.ItemDirective, { id: 'addPen', prefixIcon: 'e-icons e-free-pen', tooltipText: 'Pen', align: 'Center' }),\n                                        React.createElement(ej2_react_navigations_1.ItemDirective, { id: 'filters', prefixIcon: 'e-icons e-filters', tooltipText: 'Filters', align: 'Center' }))),\n                                React.createElement(ej2_react_navigations_1.ToolbarComponent, { ref: filterToolbarInstance, id: \"filter-toolbar\", clicked: filterImage },\n                                    React.createElement(ej2_react_navigations_1.ItemsDirective, null,\n                                        React.createElement(ej2_react_navigations_1.ItemDirective, { id: 'default', tooltipText: 'Default', align: 'Center', template: defaultCanvasTemplate }),\n                                        React.createElement(ej2_react_navigations_1.ItemDirective, { id: 'chrome', tooltipText: 'Chrome', align: 'Center', template: chromeCanvasTemplate }),\n                                        React.createElement(ej2_react_navigations_1.ItemDirective, { id: 'cold', tooltipText: 'Cold', align: 'Center', template: coldCanvasTemplate }),\n                                        React.createElement(ej2_react_navigations_1.ItemDirective, { id: 'warm', tooltipText: 'Warm', align: 'Center', template: warmCanvasTemplate }),\n                                        React.createElement(ej2_react_navigations_1.ItemDirective, { id: 'grayscale', tooltipText: 'Grayscale', align: 'Center', template: grayscaleCanvasTemplate }),\n                                        React.createElement(ej2_react_navigations_1.ItemDirective, { id: 'sepia', tooltipText: 'Sepia', align: 'Center', template: sepiaCanvasTemplate }),\n                                        React.createElement(ej2_react_navigations_1.ItemDirective, { id: 'invert', tooltipText: 'Invert', align: 'Center', template: invertCanvasTemplate })))))))))));\n};\nexports.default = CustomToolbar;\nvar root = (0, client_1.createRoot)(document.getElementById('sample'));\nroot.render(React.createElement(CustomToolbar, null));\n\n\n//# sourceURL=webpack:///./samples/image-editor/custom-toolbar-functional/app/index.tsx?");

/***/ }),

/***/ "./samples/image-editor/custom-toolbar-functional/app/sample-base.tsx":
/*!****************************************************************************!*\
  !*** ./samples/image-editor/custom-toolbar-functional/app/sample-base.tsx ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.updateSampleSection = exports.SampleBase = void 0;\nvar React = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\nvar ej2_base_1 = __webpack_require__(/*! @syncfusion/ej2-base */ \"./node_modules/@syncfusion/ej2-base/index.js\");\n(0, ej2_base_1.enableRipple)(window.ripple);\nvar SampleBase = /** @class */ (function (_super) {\n    __extends(SampleBase, _super);\n    function SampleBase() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    SampleBase.prototype.rendereComplete = function () {\n        /**custom render complete function */\n    };\n    SampleBase.prototype.componentDidMount = function () {\n        var _this = this;\n        setTimeout(function () {\n            _this.rendereComplete();\n        });\n    };\n    return SampleBase;\n}(React.PureComponent));\nexports.SampleBase = SampleBase;\nfunction updateSampleSection() { }\nexports.updateSampleSection = updateSampleSection;\n\n\n//# sourceURL=webpack:///./samples/image-editor/custom-toolbar-functional/app/sample-base.tsx?");

/***/ })

/******/ });