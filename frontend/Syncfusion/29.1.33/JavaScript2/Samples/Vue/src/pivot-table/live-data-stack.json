{"public/index.html":"<!DOCTYPE html>\r\n<html lang=\"en\">\r\n\r\n<head>\r\n    <meta charset=\"utf-8\">\r\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\r\n    <meta name=\"viewport\" content=\"width=device-width,initial-scale=1.0\">\r\n    <link rel=\"icon\" href=\"<%= BASE_URL %>favicon.ico\">\r\n    <title>\r\n        <%= htmlWebpackPlugin.options.title %>\r\n    </title>\r\n    <link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\r\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\r\n</head>\r\n\r\n<body>\r\n    <noscript>\r\n        <strong>We're sorry but <%= htmlWebpackPlugin.options.title %> doesn't work properly without JavaScript enabled.\r\n        Please enable it to continue.</strong>\r\n    </noscript>\r\n    <div id=\"app\"></div>\r\n    <style>\r\n            .control-section\r\n            {\r\n                margin-top: 100px;\r\n            }\r\n    </style>\r\n    <!-- built files will be auto injected -->\r\n</body>\r\n\r\n</html>\r\n","src/App.vue":"<template>\n  <div>\n    <div class=\"control-section\">\n      <div style=\"margin-bottom: 10px\">\n        <strong style=\"display: inline-block; font-size: 14px padding-left:5px\">Feed Delay(ms):</strong>\n        <ejs-numerictextbox\n          ref=\"feeddelay\"\n          :value=\"value\"\n          format=\"N0\"\n          :min=\"min\"\n          :step=\"step\"\n          :width=\"textBoxWidth\"\n          placeholder=\"0\"\n          style=\"margin-left: 7px\"\n        ></ejs-numerictextbox>\n        <ejs-button\n          ref=\"updatebtn\"\n          id=\"update1\"\n          v-on:click=\"updateClick\"\n          class=\"update-btn\"\n          >Start Data Update...</ejs-button\n        >\n        <ejs-button\n          ref=\"clearbtn\"\n          id=\"clear\"\n          v-on:click=\"clearClick\"\n          class=\"update-btn\"\n          >Stop Data Update...</ejs-button\n        >\n      </div>\n      <div class=\"content-wrapper\">\n        <ejs-pivotview\n          id=\"PivotView-Heatmap\"\n          ref=\"pivotview\"\n          :dataSourceSettings=\"dataSourceSettings\"\n          :width=\"width\"\n          :height=\"height\"\n          :dataBound=\"dataBound\"\n          :destroyClear=\"destroyClear\"\n          :displayOption =\"displayOption\"\n          :chartSettings= \"chartSettings\"\n          :gridSettings=\"gridSettings\"\n          :cellTemplate=\"'myTemplate'\"\n        >\n          <template v-slot:myTemplate=\"{ data }\">\n            <span class=\"template-wrap\" v-html=\"getCellContent(data)\"></span>\n          </template>\n        </ejs-pivotview>\n      </div>\n    </div>\n  </div>\n</template>\n<script lang=\"ts\">\nimport { PivotViewComponent, IDataSet } from '@syncfusion/ej2-vue-pivotview';\nimport { extend, enableRipple } from '@syncfusion/ej2-base';\nimport { ButtonComponent } from '@syncfusion/ej2-vue-buttons';\nimport { NumericTextBoxComponent } from '@syncfusion/ej2-vue-inputs';\nimport { isNullOrUndefined } from \"@syncfusion/ej2-base\";\nimport { ChartTheme, ILoadedEventArgs } from \"@syncfusion/ej2-vue-charts\";\nenableRipple(false);\n\n/* tslint:disable */\nlet colourScheme: string[] = ['bg-fade', 'bg-fade1', 'bg-fade2'];\nlet previousPivotValues: any;\nlet timerID: any;\nlet initial: boolean = true;\nlet selectedTheme = location.hash.split(\"/\")[1];\nselectedTheme = selectedTheme ? selectedTheme : \"Material\";\nlet theme = (selectedTheme.charAt(0).toUpperCase() + selectedTheme.slice(1)).replace(/-dark/i, \"Dark\");\nconst REGIONS: any = [\n  {\n    Region: 'North America',\n    Countries: ['Canada', 'United States', 'Mexico'],\n  },\n  {\n    Region: 'Middle East',\n    Countries: ['Turkey', 'Saudi Arabia'],\n  },\n  {\n    Region: 'Europe',\n    Countries: ['Russia', 'Germany', 'France', 'United Kingdom', 'Italy'],\n  },\n  {\n    Region: 'Africa',\n    Countries: ['South Africa'],\n  },\n  {\n    Region: 'Asia Pacific',\n    Countries: [\n      'Australia',\n      'China',\n      'India',\n      'Indonesia',\n      'Japan',\n      'South Korea',\n    ],\n  },\n  {\n    Region: 'South America',\n    Countries: ['Brazil'],\n  },\n];\n\nconst DATA: IDataSet[] = [\n  {\n    Category: 'Agriculture',\n    Type: 'Corn',\n    Spread: 0.01,\n    'Open Price': 379.5,\n    Price: 379.8026,\n    Buy: 379.7976,\n    Sell: 379.8076,\n    Change: 0.3026,\n    'Change(%)': 0.0797,\n    Volume: 11266,\n  },\n  {\n    Category: 'Agriculture',\n    Type: 'Rice',\n    Spread: 0.01,\n    'Open Price': 11.245,\n    Price: 10.4154,\n    Buy: 10.4104,\n    Sell: 10.4204,\n    Change: -0.8296,\n    'Change(%)': -7.3779,\n    Volume: 220,\n  },\n  {\n    Category: 'Agriculture',\n    Type: 'Wheat',\n    Spread: 0.01,\n    'Open Price': 465.5,\n    Price: 465.52,\n    Buy: 465.5,\n    Sell: 465.5,\n    Change: 0.02,\n    'Change(%)': 0.0043,\n    Volume: 4318,\n  },\n  {\n    Category: 'Agriculture',\n    Type: 'Soybean',\n    Spread: 0.01,\n    'Open Price': 1038.0,\n    Price: 1038.6171,\n    Buy: 1038.6121,\n    Sell: 1038.6221,\n    Change: 0.6171,\n    'Change(%)': 0.0595,\n    Volume: 20356,\n  },\n  {\n    Category: 'Agriculture',\n    Type: 'Coffee',\n    Spread: 0.01,\n    'Open Price': 125.7,\n    Price: 125.69,\n    Buy: 125.7,\n    Sell: 125.7,\n    Change: -0.01,\n    'Change(%)': -0.008,\n    Volume: 1654,\n  },\n  {\n    Category: 'Agriculture',\n    Type: 'Cocoa',\n    Spread: 0.01,\n    'Open Price': 307.0,\n    Price: 307.03,\n    Buy: 307.0,\n    Sell: 307.0,\n    Change: 0.03,\n    'Change(%)': 0.001,\n    Volume: 978,\n  },\n];\n\nfunction generateData(): any {\n  const count: number = 1000;\n  const currData: Object[] = [];\n  let j: number = 0;\n  for (let i: number = 0; i < count; i++) {\n    const rand: number = Math.floor(Math.random() * Math.floor(DATA.length));\n    const region = REGIONS[j];\n    for (let k = 0; k < region.Countries.length; k++) {\n      const data = Object.assign({}, DATA[rand]);\n      const dataObj = {\n        ...data,\n        Region: region.Region,\n        Country: region.Countries[k],\n      };\n      randomizeObjectData(dataObj);\n      currData.push(dataObj);\n    }\n    j++;\n    j = j > 5 ? 0 : j;\n  }\n  return currData;\n}\n\nfunction randomizeObjectData(dataObj: any): any {\n  const changeP = 'Change(%)';\n  const res: any = generateNewPrice(dataObj.Price, dataObj.Volume);\n  dataObj.Change = res.Price - dataObj.Price;\n  dataObj.Price = res.Price;\n  dataObj[changeP] = res.ChangePercent;\n  dataObj.Volume = res.Volume;\n}\n\nfunction generateNewPrice(oldPrice: any, oldVolume: any): any {\n  let rnd: number = Math.random();\n  rnd = Math.round(rnd * 100) / 100;\n  const volatility: number = 15;\n  let newPrice: number = 0;\n  let newVolume: number = 0;\n  let changePercent: number = 2 * volatility * rnd;\n  if (changePercent > volatility) {\n    changePercent -= 2 * volatility;\n  }\n  let changeVolumnPercent: number = 2 * (volatility - 5) * rnd;\n  if (changeVolumnPercent > volatility - 5) {\n    changeVolumnPercent -= 2 * (volatility - 5);\n  }\n  let changeAmount: number = oldPrice * (changePercent / 100);\n  newPrice = oldPrice + changeAmount;\n  let changeVolume: number = oldVolume * (changeVolumnPercent / 100);\n  newVolume = oldVolume + changeVolume;\n  newPrice = Math.round(newPrice * 100) / 100;\n  newVolume = Math.round((newVolume * 100) / 100);\n  const result = { Price: 0, ChangePercent: 0, Volume: 0 };\n  changePercent = Math.round(changePercent * 100) / 100;\n  result.Price = newPrice;\n  result.ChangePercent = changePercent;\n  result.Volume = newVolume;\n  return result;\n}\n\nfunction cellColour(value: any): string {\n    let colorIndex: number = value < 0 ? 0 : value > 0 ? 1 : 2;\n    return colourScheme[colorIndex];\n}\n\nexport default {\n  components: {\n    'ejs-pivotview': PivotViewComponent,\n    'ejs-button': ButtonComponent,\n    'ejs-numerictextbox': NumericTextBoxComponent,\n  },\n  methods: {\n    dataBound: function () {\n      let updateButton = ((this as any).$refs.updatebtn).ej2Instances;\n      let feedDelayInput = ((this as any).$refs.feeddelay).ej2Instances;\n      if (initial) {\n        updateButton.element.click();\n        initial = false;\n        feedDelayInput.element.addEventListener('keypress', (e: any) => {\n          if (\n            e && e.key === 'Enter' &&\n            feedDelayInput.element.parentElement.classList.contains('e-input-focus')) {\n            feedDelayInput.value = parseInt(feedDelayInput.element.value);\n            feedDelayInput.focusOut();\n            updateButton.element.click();\n          }\n        });\n      }\n    },\n    destroyClear: function () {\n      if (timerID) {\n        clearInterval(timerID);\n        timerID = undefined;\n      }\n    },\n    updateClick: function () {\n      let clearButton = ((this as any).$refs.clearbtn).ej2Instances;\n      let updateButton = ((this as any).$refs.updatebtn).ej2Instances;\n      let feedDelayInput = ((this as any).$refs.feeddelay).ej2Instances;\n      if (!timerID) {\n        updateButton.disabled = true;\n        feedDelayInput.enabled = false;\n        clearButton.disabled = false;\n        timerID = setInterval(this.updateCellValues, feedDelayInput.value);\n      }\n    },\n    clearClick: function () {\n      let clearButton = ((this as any).$refs.clearbtn).ej2Instances;\n      let updateButton = ((this as any).$refs.updatebtn).ej2Instances;\n      let feedDelayInput = ((this as any).$refs.feeddelay).ej2Instances;\n      if (timerID) {\n        updateButton.disabled = false;\n        feedDelayInput.enabled = true;\n        clearButton.disabled = true;\n        clearInterval(timerID);\n        timerID = undefined;\n      }\n    },\n    updateCellValues: function () {\n      if (!isNullOrUndefined(((this as any).$refs.pivotview))) {\n        let pivotObj = ((this as any).$refs.pivotview).ej2Instances;\n        if (!isNullOrUndefined(pivotObj)) {\n          if (pivotObj.pivotValues.length > 0) {\n            if (!previousPivotValues) {\n              previousPivotValues = pivotObj.pivotValues;\n            }\n            previousPivotValues = pivotObj.pivotValues;\n          }\n          pivotObj.dataSourceSettings.dataSource = generateData();\n        }\n      }\n    },\n    getCellContent: function (args: any) {\n      if (args != null && args.cellInfo && args.cellInfo.axis === 'value') {\n        if (!args.cellInfo.isGrandSum && args.cellInfo.actualText === 'Change') {\n          args.targetCell.classList.add(cellColour(args.cellInfo.value));\n        }\n      }\n    }\n  },\n  data: () => {\n    return {\n      min: 5000,\n      step: 1000,\n      value: 5000,\n      textBoxWidth: '150px',\n      dataSourceSettings: {\n        dataSource: generateData(),\n        enableSorting: true,\n        columns: [{ name: 'Type' }],\n        values: [\n          { name: 'Volume', caption: 'Volume' },\n          { name: 'Price', caption: 'Price' },\n          { name: 'Change', type: 'Avg', caption: 'Change(%)' },\n        ],\n        rows: [{ name: 'Country' }],\n        filters: [{ name: 'Category' }],\n        formatSettings: [\n          { name: 'Price', format: 'C2' },\n          { name: 'Open Price', format: 'C2' },\n          { name: 'Change', format: \"###.##'%'\" },\n          { name: 'Volume', format: 'N0' },\n        ],\n        expandAll: false,\n        showSubTotals: false,\n        showGrandTotals: false,\n        emptyCellsTextContent: 'Revising',\n        sortSettings: [\n          {\n            name: 'Type',\n            order: 'Ascending',\n            membersOrder: [\n              'Corn',\n              'Rice',\n              'Wheat',\n              'Soybean',\n              'Coffee',\n              'Cocoa',\n            ],\n          },\n        ],\n      },\n      gridSettings: {\n        columnWidth: 100\n      },\n      displayOption: { view: \"Both\" },\n      chartSettings: {\n        theme: theme,\n        value: \"Price\",\n        legendSettings: { visible: false },\n        chartSeries: { type: \"Column\" },\n        zoomSettings: {\n            enableScrollbar: false,\n            toolbarItems: [],\n            enableSelectionZooming: false,\n        },\n        load: (args: ILoadedEventArgs) => {\n          let selectedTheme = location.hash.split('/')[1];\n          selectedTheme = selectedTheme ? selectedTheme : 'Material';\n          args.chart.theme = (selectedTheme.charAt(0).toUpperCase() + selectedTheme.slice(1)).replace(/-dark/i, \"Dark\").replace(/contrast/i, 'Contrast').replace(/-highContrast/i, 'HighContrast') as ChartTheme;\n        }\n      },\n      width: '100%',\n      height: 350,\n    };\n  },\n};\n</script>\n\n<style scoped>\n/deep/ #PivotView-LiveData_chart {\n  margin-top: 15px;\n}\n\n/deep/ .sb-sample-content-area {\n  min-height: 255px !important;\n}\n\n/deep/ .control-section {\n  min-height: 255px !important;\n}\n\n/deep/ .bg-fade {\n  background-color: #FFEBE9 !important;\n  color: #FF3740 !important;\n}\n\n/deep/ .bg-fade1 {\n  background-color: #DFFFE2 !important;\n  color: #00A653 !important;\n}\n\n/deep/ .bg-fade2 {\n  color: rgba(0, 0, 0, 0.87);\n}\n\n/deep/ .update-btn {\n    margin-left: 10px;\n}\n\n/* Mobile mode */\n@media only screen and (max-width: 688px) {\n    .update-btn {\n        margin: 10px 10px 0 0;\n    }\n}\n</style>\n","dependencies":"{\"vue\":\"3.3.4\",\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-vue-base\":\"*\",\"@syncfusion/ej2-pivotview\":\"*\",\"@syncfusion/ej2-vue-pivotview\":\"*\",\"@syncfusion/ej2-icons\":\"*\",\"markdown-spellcheck\":\"^1.3.1\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-vue-buttons\":\"*\",\"@syncfusion/ej2-inputs\":\"*\",\"@syncfusion/ej2-vue-inputs\":\"*\",\"@syncfusion/ej2-charts\":\"*\",\"@syncfusion/ej2-vue-charts\":\"*\",\"@syncfusion/ej2-vue-maps\":\"*\",\"@syncfusion/ej2-vue-calendars\":\"*\",\"@syncfusion/ej2-data\":\"*\",\"@syncfusion/ej2-vue-grids\":\"*\",\"@syncfusion/ej2-vue-schedule\":\"*\",\"@syncfusion/ej2-vue-richtexteditor\":\"*\",\"@syncfusion/ej2-vue-navigations\":\"*\",\"@syncfusion/ej2-vue-documenteditor\":\"*\",\"@syncfusion/ej2-vue-splitbuttons\":\"*\",\"@syncfusion/ej2-vue-dropdowns\":\"*\",\"@syncfusion/ej2-vue-pdfviewer\":\"*\"}","src/main.js":"import { createApp } from 'vue'\nimport App from './App.vue'\ncreateApp(App).mount('#app')"}