{"public/index.html":"<!DOCTYPE html>\r\n<html lang=\"en\">\r\n\r\n<head>\r\n    <meta charset=\"utf-8\">\r\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\r\n    <meta name=\"viewport\" content=\"width=device-width,initial-scale=1.0\">\r\n    <link rel=\"icon\" href=\"<%= BASE_URL %>favicon.ico\">\r\n    <title>\r\n        <%= htmlWebpackPlugin.options.title %>\r\n    </title>\r\n    <link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\r\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\r\n</head>\r\n\r\n<body>\r\n    <noscript>\r\n        <strong>We're sorry but <%= htmlWebpackPlugin.options.title %> doesn't work properly without JavaScript enabled.\r\n        Please enable it to continue.</strong>\r\n    </noscript>\r\n    <div id=\"app\"></div>\r\n    <style>\r\n            .control-section\r\n            {\r\n                margin-top: 100px;\r\n            }\r\n    </style>\r\n    <!-- built files will be auto injected -->\r\n</body>\r\n\r\n</html>\r\n","src/App.vue":"<template>\n    <div>\n        <div class=\"control-section\" id=\"e-pv-redact-sb-panel\">\n            <div class=\"content-wrapper\">\n                <div class=\"flex-container\" id=\"e-pv-redact-sb-flexContainer\">\n                </div>\n                <ejs-appbar colorMode=\"Primary\">\n                    <span class=\"regular\" style=\"margin:0 5px\">Redaction</span>\n                    <div class=\"e-appbar-spacer\"></div>\n                    <ejs-button cssClass=\"e-inherit\" iconCss='e-icons e-download e-btn-icon e-icon-left' @click=\"downloadClicked\">Download</ejs-button>\n                </ejs-appbar>\n\n                <div id=\"toolbar_default\">\n                    <ejs-toolbar id=\"e-pv-redact-sb-toolbar\" ref='primaryToolbar'>\n                        <e-items>\n                            <e-item prefixIcon=\"e-icon e-folder\" :click='openClicked' tooltipText=\"Open\" id=\"pdfviewer_open\" cssClass='e-pv-redact-sb-open-container' text=\"Open\"></e-item>\n                            <e-item type=\"Separator\" tooltipText=\"separator\" id=\"separator1\"></e-item>\n                            <e-item prefixIcon=\"e-icon e-text-annotation\" :click='addText' tooltipText=\"Text\" cssClass='e-pv-redact-sb-font-container' text=\"Text\"></e-item>\n                            <e-item prefixIcon=\"e-icons e-image\" v-if=\"ShowBtn\" :click=\"imgClick\" tooltipText=\"Image\" id=\"targetButton\" cssClass='e-pv-redact-sb-image-btn' text=\"Image\"></e-item>\n                            <e-item prefixIcon=\"e-icons e-opacity\" :click='addPattern' tooltipText=\"Pattern\" cssClass='e-pv-redact-sb-pattern-container' text=\"Pattern\"></e-item>\n                            <e-item prefixIcon=\"e-icons black-out\" :click='addBlackout' tooltipText=\"Black out\" cssClass='e-pv-redact-sb-black-out-container' text=\"Blackout\"></e-item>\n                            <e-item prefixIcon=\"e-icons white-out\" :click='addWhiteout' tooltipText=\"White Out\" cssClass='e-pv-redact-sb-white-out-container' text=\"Whiteout\"></e-item>\n                            <e-item type=\"Separator\"></e-item>\n                            <e-item prefixIcon=\"e-icons e-redact\" :click='redaction' id=\"redacticon\" tooltipText=\"Redaction\" cssClass='e-pv-redact-sb-redaction-container' text=\"Redact\" disabled=true></e-item>\n                        </e-items>\n                    </ejs-toolbar>\n                    <input type=\"file\" id=\"documentUpload\" accept=\".pdf\" style=\"display:block;visibility:hidden;width:0;height:0;\"></input>\n                </div>\n            </div>\n            <div class=\"e-pv-redact-sb-secondary-toolbar\" id=\"toolbar_secondary\">\n                <ejs-toolbar id=\"secondary-toolbar\" ref='secondaryToolbar'>\n                    <e-items>\n                        <e-item prefixIcon=\"e-icon e-chevron-left\" :click='previousClicked' id=\"previousPage\" tooltipText=\"Previous Page\" cssClass='e-pv-redact-sb-previous-container' disabled=true></e-item>\n                        <e-item :template=\"'currentPageTemplate'\" cssClass=\"page-count\"></e-item>\n                        <template v-slot:currentPageTemplate>\n                            <div><span id=\"current-page\" title=\"Current Page\">1 </span><span id=\"total-page\" title=\"Total Page\">/ 1</span></div>\n                        </template>\n                        <e-item prefixIcon=\"e-icon e-chevron-right\" :click='nextClicked' tooltipText=\"Next Page\" id=\"nextPage\" cssClass='e-pv-redact-sb-next-container' disabled=true></e-item>\n                        <e-item type=\"Separator\"></e-item>\n                        <e-item :template=\"'ComboTemplate'\" cssClass=\"percentage\" tooltipText=\"Zoom\"></e-item>\n                        <template v-slot:ComboTemplate>\n                            <ejs-combobox width=\"90px\" popupWidth=\"85px\" value=\"100%\" :showClearButton=false :dataSource=\"zoomList\" :change='zoomValueChange'></ejs-combobox>\n                        </template>\n                    </e-items>\n                </ejs-toolbar>\n            </div>\n            <ejs-pdfviewer id=\"pdfViewer\" ref=\"pdfviewer\" :resourceUrl=\"resourceUrl\" :documentLoad=\"documentLoad\" :documentPath=\"documentPath\" :enableToolbar=\"enableToolbar\" :enableAnnotationToolbar=\"enableAnnotationToolbar\" :enableCommentPanel=\"enableCommentPanel\"\n            :enableNavigationToolbar=\"enableNavigationToolbar\" :pageChange=\"pageChange\" :annotationAdd=\"annotationAdd\" :annotationRemove=\"annotationRemove\">\n            </ejs-pdfviewer>\n            <div id='dialog'>\n                <ejs-dialog :header=\"'headerTemplate'\" id=\"e-pv-redact-sb-dialog\" ref=\"dialogObj\" :buttons='dlgButtons' :content=\"'contentTemplate'\" :animationSettings='animationSettings' showCloseIcon='true' :target='target' width='477px' :open=\"dialogOpen\" :visible=\"dialogVisible\"\n                isModal='true' minHeight='485px'>\n                    <template v-slot:headerTemplate>\n                        <span id=\"container\">\n                  <div id=\"dlg-template\" title=\"UploadImage\" class=\"e-icon-settings\"> Upload Image </div>\n              </span>\n                    </template>\n                    <template v-slot:contentTemplate>\n                        <div id='e-pv-redact-sb-defaultfileupload'>\n                            <div class=\"drop-area-wrap\" id='e-pv-redact-sb-drop-area-wrap'>\n                                <div>\n                                    <ejs-uploader ref=\"uploadObj\" :asyncSettings=\"path\" :allowedExtensions=\"extentions\" :change=\"onFileChange\" :multiple=false></ejs-uploader>\n                                </div>\n                                <div>\n                                    (Only JPG and PNG images will be accepted)\n                                </div>\n                            </div>\n                            <div class=\"e-pv-redact-sb-image-list\">\n                                <div id='imageContainer' ref='imgContainer' class=\"e-pv-redact-sb-image-container\" style=\"display:none\">\n                                    <img id='imageView' ref='imgTag' class=\"e-pv-redact-sb-image-source\">\n                                </div>\n                            </div>\n                        </div>\n                    </template>\n                </ejs-dialog>\n            </div>\n        </div>\n\n\n\n    </div>\n</template>\n\n<script>\n  import { PdfViewerComponent, Toolbar, Magnification, Navigation, LinkAnnotation, BookmarkView, \n           ThumbnailView, Print, TextSelection, TextSearch, Annotation, FormDesigner, FormFields, PageOrganizer } from '@syncfusion/ej2-vue-pdfviewer';\n  import { AppBarComponent, ToolbarComponent, ItemDirective, ItemsDirective } from \"@syncfusion/ej2-vue-navigations\";\n  import { ButtonComponent } from \"@syncfusion/ej2-vue-buttons\";\n  import { ComboBoxComponent } from \"@syncfusion/ej2-vue-dropdowns\";\n  import { DialogComponent } from '@syncfusion/ej2-vue-popups';\n  import { UploaderComponent } from '@syncfusion/ej2-vue-inputs';\n  import { getUniqueID } from '@syncfusion/ej2-base';\n\n  var fileName = \"programmatical-annotations.pdf\";\n  var viewer;\n  var toolbar;\n  var imageElement;\n  var primaryToolbarObj;\n  var imageElementContainer;\n  var currentPageBox;\n  var annotation;\n  var redactionCount = 0;\n  const url = \"http://localhost:62728/api/pdfviewer/Redaction\";\n\n\n  function updatePageNavigation() {\n      if (viewer.currentPageNumber === 1) {\n          toolbar.items[0].disabled = true;\n          toolbar.items[2].disabled = false;\n      }\n      else if (viewer.currentPageNumber === viewer.pageCount) {\n          toolbar.items[0].disabled = false;\n          toolbar.items[2].disabled = true;\n      }\n      else {\n          toolbar.items[0].disabled = false;\n          toolbar.items[2].disabled = false;\n      }\n  };\n\n  function updateRedaction() {\n        if (redactionCount <= 0) {\n            primaryToolbarObj.items[8].disabled = true;\n        }\n        else {\n            primaryToolbarObj.items[8].disabled = false;\n        }\n\n  };\n  function createBlobUrl(base64String, contentType)\n  {\n    const sliceSize = 512;\n    const byteCharacters = atob(base64String);\n    const byteArrays = [];\n    for (let offset = 0; offset < byteCharacters.length; offset += sliceSize) {\n        const slice = byteCharacters.slice(offset, offset + sliceSize);\n        const byteNumbers = new Array(slice.length);\n        for (let i = 0; i < slice.length; i++) {\n            byteNumbers[parseInt(i.toString(), 10)] = slice.charCodeAt(i);\n        }\n        const byteArray = new Uint8Array(byteNumbers);\n        byteArrays.push(byteArray);\n    }\n    const blob = new Blob(byteArrays, { type: contentType });\n    return blob;\n  };\n\n  function downloadDocument(blobUrl)\n  {\n    const Url = URL || webkitURL;\n    blobUrl = Url.createObjectURL(blobUrl);\n    viewer.fileName = fileName;\n    const anchorElement = document.createElement('a');\n    if (anchorElement.click) {\n        (anchorElement).href = blobUrl;\n        (anchorElement).target = '_parent';\n        if ('download' in anchorElement) {\n            const downloadFileName = viewer.fileName || 'downloadedFile.pdf';\n            if (downloadFileName) {\n                if (downloadFileName.endsWith('.pdf')) {\n                    (anchorElement).download = downloadFileName;\n                }\n                else {\n                    const splitPdf = downloadFileName.split('.pdf')[0] + '.pdf';\n                    (anchorElement).download = splitPdf;\n                }\n            }\n            else {\n                (anchorElement).download = 'Default.pdf';\n            }\n        }\n        (document.body || document.documentElement).appendChild(anchorElement);\n        anchorElement.click();\n    }\n    else {\n        if (window.top === window &&\n            blobUrl.split('#')[0] === window.location.href.split('#')[0]) {\n                const padCharacter = blobUrl.indexOf('?') === -1 ? '?' : '&';\n                blobUrl = blobUrl.replace(/#|$/, padCharacter + '$&');\n        }\n        window.open(blobUrl, '_parent');\n    }\n  };\n\n  function readFile(args) {\n        // tslint:disable-next-line\n        let upoadedFiles = args.target.files;\n        if (args.target.files[0] !== null) {\n            let uploadedFile = upoadedFiles[0];\n            fileName = uploadedFile.name;\n            if (uploadedFile) {\n                let reader = new FileReader();\n                reader.readAsDataURL(uploadedFile);\n                // tslint:disable-next-line\n                reader.onload = function (e) {\n                    let uploadedFileUrl = e.currentTarget.result;\n                    viewer.load(uploadedFileUrl, null);\n                    viewer.fileName = fileName;\n                    viewer.downloadFileName = fileName;\n                };\n            }\n        }\n    };\n\n  export default {\n    name: 'App',\n\n    components: {\n      \"ejs-pdfviewer\": PdfViewerComponent,\n      \"ejs-appbar\": AppBarComponent,\n      \"ejs-button\": ButtonComponent,\n      'ejs-toolbar': ToolbarComponent,\n      'e-item': ItemDirective,\n      'e-items': ItemsDirective,\n      'ejs-combobox': ComboBoxComponent,\n      \"ejs-dialog\": DialogComponent,\n      \"ejs-uploader\": UploaderComponent\n    },\n\n    data() {\n      return {\n        resourceUrl: \"https://cdn.syncfusion.com/ej2/27.1.55/dist/ej2-pdfviewer-lib\",\n        documentPath: \"https://cdn.syncfusion.com/content/pdf/programmatical-annotations.pdf\",\n        zoomList: ['10%', '25%', '50%', '75%', '100%', '200%', '400%'],\n        enableToolbar: false,\n        enableNavigationToolbar: false,\n        enableAnnotationToolbar:false,\n        enableCommentPanel:false,\n        proxy: this,\n        animationSettings:  { effect: 'None' },\n        ShowBtn: true,\n        dialogVisible: false,\n        autoUpload: false,\n        target: '#e-pv-redact-sb-panel',\n        path: {\n            saveUrl:\n                'http://localhost:62728/api/FileUploader/Save',\n            removeUrl:\n                'http://localhost:62728/api/FileUploader/Remove',\n        },\n        extentions: '.png, .jpg, .jpeg',\n        imageSrc: \"\",\n        customStampSource: null,\n        dlgButtons: [{ click: this.dialogObjClose, buttonModel: { isPrimary:'true', content: 'Cancel' } }]\n      };\n    },\n    provide: {\n      PdfViewer: [ Toolbar, Magnification, Navigation, LinkAnnotation, BookmarkView, ThumbnailView,\n                   Print, TextSelection, TextSearch, Annotation, FormDesigner, FormFields, PageOrganizer ]\n    },\n    methods: {\n        documentLoad: function (args) {\n          viewer = this.$refs.pdfviewer.ej2Instances;\n          toolbar = this.$refs.secondaryToolbar.ej2Instances;\n          primaryToolbarObj = this.$refs.primaryToolbar.ej2Instances;\n          document.getElementById('documentUpload').addEventListener('change', readFile, false);\n          currentPageBox = document.getElementById('current-page');\n          currentPageBox.textContent = '1 ';\n          document.getElementById('total-page').innerHTML = `/ ${viewer.pageCount}`;\n          updatePageNavigation();\n          updateRedaction();\n        },\n        downloadClicked: function (args) {\n            viewer.saveAsBlob().then(function (value) {\n            let reader = new FileReader();\n            reader.readAsDataURL(value);\n            reader.onload = function (e) {\n                const base64String = e.target?.result.toString();\n                const xhr = new XMLHttpRequest();\n                xhr.open('POST', url, true);\n                xhr.setRequestHeader('Content-type', 'application/json; charset=UTF-8');\n                const requestData = JSON.stringify({ base64String: base64String });\n                xhr.onload = function () {\n                    if (xhr.status === 200) {\n                        const blobUrl = createBlobUrl(xhr.responseText.split('base64,')[1], 'application/pdf');\n                        downloadDocument(blobUrl);\n                    }\n                    else {\n                        console.error('Download failed:', xhr.statusText);\n                    }\n                };\n                xhr.onerror = function () {\n                    console.error('An error occurred during the download:', xhr.statusText);\n                };\n                xhr.send(requestData);\n            };\n        }).catch(function (error) {\n            console.error('Error saving Blob:', error);\n        });\n        },\n        redaction: function (args) {\n            if (redactionCount > 0) {\n            viewer.saveAsBlob().then(function (value) {\n                const data = value;\n                const reader = new FileReader();\n                reader.readAsDataURL(data);\n                reader.onload = function (e) {\n                    const base64String = e.target?.result.toString();\n                    const xhr = new XMLHttpRequest();\n                    xhr.open('POST', url, true);\n                    xhr.setRequestHeader('Content-type', 'application/json; charset=UTF-8');\n                    const requestData = JSON.stringify({ base64String });\n                    xhr.onload = function () {\n                        if (xhr.status === 200) {\n                            viewer.load(xhr.responseText, null);\n                        }\n                        else {\n                            console.error('Redaction failed:', xhr.statusText);\n                        }\n                    };\n                    xhr.onerror = function () {\n                        console.error('An error occurred during the redaction:', xhr.statusText);\n                    };\n                    xhr.send(requestData);\n                };\n            });\n            redactionCount = 0;\n            updateRedaction();\n        }\n        },\n        openClicked: function (args) {\n            document.getElementById('documentUpload').click();\n        },\n        annotationAdd: function (args) {\n            var pdfAnnotationList;\n            pdfAnnotationList = viewer.annotationCollection;\n            var selectedAnnotationIndex = pdfAnnotationList.findIndex(item => item.annotationId == args.annotationId);\n            if (selectedAnnotationIndex != -1) {\n                annotation = pdfAnnotationList[selectedAnnotationIndex];\n            }\n            if (annotation.author == \"Redaction\" || annotation.customStampName == \"Image\" || annotation.author == \"Pattern\" || annotation.author == \"Text\") {\n                redactionCount = redactionCount + 1;\n                updateRedaction();\n            }\n        },\n        annotationRemove: function (args) {\n            if (annotation.author == \"Redaction\" || annotation.customStampName == \"Image\" || annotation.author == \"Pattern\" || annotation.author == \"Text\") {\n                redactionCount = redactionCount - 1;\n                updateRedaction();\n            }\n        },\n        addText: function (args) {\n            viewer.rectangleSettings = {\n                fillColor: '#a3a2a0',\n                strokeColor: '#a3a2a0',\n                author: 'Text'\n            }\n            viewer.annotation.setAnnotationMode('Rectangle');\n        },\n        addPattern: function (args) {\n            viewer.rectangleSettings = {\n                fillColor: '#dedfe0',\n                strokeColor: '#dedfe0',\n                author: 'Pattern'\n            }\n            viewer.annotation.setAnnotationMode('Rectangle');\n        },\n        addBlackout: function (args) {\n            viewer.rectangleSettings = {\n                fillColor: '#000000',\n                strokeColor: '#000000',\n                author: 'Redaction'\n            }\n            viewer.annotation.setAnnotationMode('Rectangle');\n        },\n        addWhiteout: function (args) {\n            viewer.rectangleSettings = {\n                fillColor: '#ffffff',\n                strokeColor: '#ffffff',\n                author: 'Redaction'\n            }\n            viewer.annotation.setAnnotationMode('Rectangle');\n        },\n        zoomValueChange: function (args) {\n            let zoom = args.value;\n            let previousZoom = args.previousItemData.value;\n            if (zoom !== null || previousZoom !== null) {\n                let zoomchange = parseInt(zoom.replace(\"%\", \"\"), 10);\n                viewer.magnificationModule.zoomTo(zoomchange);\n            }\n        },\n        pageChange: function (args) {\n            currentPageBox = document.getElementById('current-page');\n            currentPageBox.textContent = viewer.currentPageNumber.toString() + ' ';\n            updatePageNavigation();\n        },\n        nextClicked: function (args) {\n            viewer.navigation.goToNextPage();\n        },\n        previousClicked: function (args) {\n            viewer.navigation.goToPreviousPage();\n        },\n        dialogObjClose: function() {\n          this.$refs.dialogObj.hide();\n        },    \n        imgClick: function() {\n          this.dialogVisible = true;\n          this.$refs.dialogObj.show();\n        },\n        openDocumentClicked: function(args) {\n          const textSearchToolbarElement = document.getElementById('textSearchToolbar');\n          if (textSearchToolbarElement !== null && textSearchToolbarElement.style.display === 'block') {\n              textSearchToolbarElement.style.display = 'none';\n          }\n          document.getElementById('fileUpload').click();\n        },\n        handleImageClick() {\n          this.customStampSource = this.imageSrc;\n          this.dialogVisible = false;\n          this.addImage();\n        },\n        onFileChange(event) {\n          const file = event.file[0].rawFile;\n          imageElement = this.$refs.imgTag;\n          imageElementContainer = this.$refs.imgContainer;\n          const reader = new FileReader();\n          reader.onload = (e) => {\n            const base64String = e.target.result;\n            this.imageSrc = base64String;\n            this.customStampSource = this.imageSrc;\n            imageElement.src = this.imageSrc;\n            imageElementContainer.className = 'image-container e-pv-redact-sb-image-container-selected';\n            imageElementContainer.style.display = 'block';\n            imageElement.addEventListener('click', this.handleImageClick);\n          };\n          reader.readAsDataURL(file);\n        },\n        addImage() {\n          viewer = this.$refs.pdfviewer.ej2Instances;\n          viewer.stampSettings.author = \"Image\";\n          viewer.customStampSettings = {\n            width: 200,\n            author: 'Image',\n            height: 125,\n            isAddToMenu: false,\n            enableCustomStamp: false,\n          };\n          viewer.customStamp = [\n            {\n              customStampName: 'Image',\n              customStampImageSource: this.customStampSource,\n            },\n          ];\n        },\n    },\n  }\n\n</script>\n\n<style>\n#e-pv-redact-sb-flexContainer {\n    display: flex;\n    justify-content: flex-end;\n}\n\n#e-pv-redact-sb-panel.control-section .e-dlg-overlay\n{\n    background: none;\n    backdrop-filter: blur(2px) !important;\n}\n\n/*new*/\n#e-pv-redact-sb-panel.control-section .e-appbar {\n    height: 36px;\n    font-size: 14px !important;\n}\n#e-pv-redact-sb-toolbar.e-toolbar .e-toolbar-item .e-tbar-btn.e-tbtn-txt .e-icons.e-btn-icon\n{\n    padding: 4px !important;\n}\n#e-pv-redact-sb-toolbar.e-toolbar .e-toolbar-item .e-tbar-btn {\n    flex-direction: column;\n}  \n#e-pv-redact-sb-toolbar.e-toolbar .e-toolbar-item .e-tbar-btn .e-icons.e-btn-icon \n{\n    font-size: 18px;\n}\n#e-pv-redact-sb-toolbar\n{\n    height: 72px !important;\n}\n#e-pv-redact-sb-toolbar .e-toolbar-items\n{\n    gap: 5px;\n}\n\n.e-pv-redact-sb-secondary-toolbar .e-toolbar-item.page-count.e-template {\n    min-width: 0px !important;\n}\n\n#e-pv-redact-sb-toolbar .e-toolbar-item.e-separator\n{\n    height: 48px !important;\n}\n#e-pv-redact-sb-toolbar , #e-pv-redact-sb-toolbar .e-toolbar , .e-pv-redact-sb-secondary-toolbar .e-toolbar\n{\n    border-left-width: 1px !important;\n    border-right-width: 1px !important;\n}\n\n#e-pv-redact-sb-toolbar .e-toolbar , .e-pv-redact-sb-secondary-toolbar .e-toolbar\n{\n    border-top-width: 1px !important;\n}\n\n#e-pv-redact-sb-panel.control-section .e-input-group\n{\n    border:none !important;\n} \n.e-pv-redact-sb-black-out-container .black-out {\n    background-color: black;\n    width: 18px !important;\n    height: 18px !important;\n    border: 1px solid white;\n    border-radius: 3px;\n    margin:4px !important;\n}\n.e-pv-redact-sb-white-out-container .white-out {\n    background-color: white;\n    width: 18px !important;\n    height: 18px !important;\n    border: 1px solid black;\n    border-radius: 3px;\n    margin:4px !important;\n}\n.e-bigger .e-pv-redact-sb-black-out-container .black-out,\n    .e-bigger .e-pv-redact-sb-white-out-container .white-out {\n        position: relative;\n        top: -4px;\n}\n.e-bigger #e-pv-redact-sb-toolbar.e-toolbar .e-toolbar-item.e-pv-redact-sb-black-out-container .e-tbar-btn.e-btn,\n    .e-bigger #e-pv-toolbar.e-toolbar .e-toolbar-item.e-pv-redact-sb-white-out-container .e-tbar-btn.e-btn {\n        padding-top : 5px !important;\n}\n.e-bigger .e-pv-redact-sb-black-out-container .e-tbar-btn .e-tbar-btn-text,\n     .e-bigger .e-pv-redact-sb-white-out-container .e-tbar-btn .e-tbar-btn-text{\n         padding: 2px 4px 7px 4px !important;\n}\n/*upload image*/\n#e-pv-redact-sb-dialog.e-dialog #e-pv-redact-sb-defaultfileupload #e-pv-redact-sb-defaultfileupload .e-upload-files {\n        border: none !important;\n}\n#e-pv-redact-sb-panel.control-section #file-uploader\n{\n    display: flex;\n    border: 1px dashed #c8c6c4;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    gap: 12px;\n    padding: 16px;\n    border-radius: 6px;\n}\n#e-pv-redact-sb-dialog.e-dialog .e-dlg-header-content\n{\n    border-bottom:1px solid #C4C7C5 !important;\n    padding: 15px !important;\n}\n\n#e-pv-redact-sb-dialog.e-dialog .e-footer-content\n{\n    border-top:1px solid #C4C7C5 !important;\n    padding: 10px !important;\n}\n\n#e-pv-redact-sb-dialog.e-dialog .e-dlg-header-content+.e-dlg-content\n{\n    padding: 20px !important;\n}\n\n#e-pv-redact-sb-panel.control-section .e-file-select-wrap\n{\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n}\n\n#e-pv-redact-sb-dialog.e-dialog .e-footer-content .e-btn\n{\n    background: rgba(0, 0, 0, 0);\n    border-color: rgba(0, 0, 0, 0);\n    box-shadow: none;\n    color: #242424;\n}\n\n#e-pv-redact-sb-defaultfileupload .e-upload-file-list {\n    display: none;\n}\n#e-pv-redact-sb-defaultfileupload .e-upload-files {\n    border: none !important;\n}\n.e-pv-redact-sb-image-source {\n    width: 70px;\n    height: 70px;\n}\n.e-pv-redact-sb-image-container {\n    box-shadow: 0px 10px 15px -3px rgba(0, 0, 0, 0.1), 0px 10px 15px -3px rgba(0, 0, 0, 0.1);\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    padding: 4px;\n    gap: 5px;\n    border-radius: 4px;\n}\n.e-pv-redact-sb-image-list {\n    display: flex;\n    justify-content: center;\n    padding: 24px 15px;\n    gap: 35px;\n}\n.e-pv-redact-sb-image-container-selected {\n    border: 1px solid #757575 !important;\n}\n.e-pv-redact-sb-image-container:hover {\n    border: 1px solid #757575;\n}\n#e-pv-redact-sb-drop-area-wrap {\n    display: flex;\n    border: 1px dashed #c8c6c4;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    gap: 12px;\n    padding: 16px;\n    border-radius: 6px;\n}\n#e-pv-redact-sb-panel.control-section #uploadicon {    \n    cursor: pointer;\n    top: 5px;\n    left: 20px;\n    position: relative;\n}\n#e-pv-redact-sb-defaultfileupload .e-upload {\n    border: none;\n    margin-top: 10px;\n    width: 100%;\n    height:100%;\n}\n#e-pv-redact-sb-dialog\n{\n    max-height: 600px !important;\n}\n</style>","dependencies":"{\"vue\":\"3.3.4\",\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-vue-base\":\"*\",\"@syncfusion/ej2-pdfviewer\":\"*\",\"@syncfusion/ej2-vue-pdfviewer\":\"*\",\"@syncfusion/ej2-navigations\":\"*\",\"@syncfusion/ej2-vue-navigations\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-vue-buttons\":\"*\",\"@syncfusion/ej2-dropdowns\":\"*\",\"@syncfusion/ej2-vue-dropdowns\":\"*\",\"@syncfusion/ej2-popups\":\"*\",\"@syncfusion/ej2-vue-popups\":\"*\",\"@syncfusion/ej2-inputs\":\"*\",\"@syncfusion/ej2-vue-inputs\":\"*\",\"@syncfusion/ej2-icons\":\"*\",\"markdown-spellcheck\":\"^1.3.1\",\"@syncfusion/ej2-vue-charts\":\"*\",\"@syncfusion/ej2-vue-maps\":\"*\",\"@syncfusion/ej2-vue-calendars\":\"*\",\"@syncfusion/ej2-data\":\"*\",\"@syncfusion/ej2-vue-grids\":\"*\",\"@syncfusion/ej2-vue-schedule\":\"*\",\"@syncfusion/ej2-vue-richtexteditor\":\"*\",\"@syncfusion/ej2-vue-documenteditor\":\"*\",\"@syncfusion/ej2-vue-splitbuttons\":\"*\"}","src/main.js":"import { createApp } from 'vue'\nimport App from './App.vue'\ncreateApp(App).mount('#app')"}