{"public/index.html":"<!DOCTYPE html>\r\n<html lang=\"en\">\r\n\r\n<head>\r\n    <meta charset=\"utf-8\">\r\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\r\n    <meta name=\"viewport\" content=\"width=device-width,initial-scale=1.0\">\r\n    <link rel=\"icon\" href=\"<%= BASE_URL %>favicon.ico\">\r\n    <title>\r\n        <%= htmlWebpackPlugin.options.title %>\r\n    </title>\r\n    <link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\r\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\r\n</head>\r\n\r\n<body>\r\n    <noscript>\r\n        <strong>We're sorry but <%= htmlWebpackPlugin.options.title %> doesn't work properly without JavaScript enabled.\r\n        Please enable it to continue.</strong>\r\n    </noscript>\r\n    <div id=\"app\"></div>\r\n    <style>\r\n            .control-section\r\n            {\r\n                margin-top: 100px;\r\n            }\r\n    </style>\r\n    <!-- built files will be auto injected -->\r\n</body>\r\n\r\n</html>\r\n","src/App.vue":"<template>\r\n  <div>\r\n    <div class=\"control-section\">\r\n      <ejs-toolbar id=\"customToolbar_invibleSignature\" ref=\"toolbar\">\r\n        <e-items>\r\n          <e-item\r\n            prefixIcon=\"e-icons e-folder-open\"\r\n            align=\"Left\"\r\n            tooltipText=\"Open\"\r\n            :click=\"openClicked\"\r\n          ></e-item>\r\n          <e-item\r\n            text=\"Complete Signing\"\r\n            width=\"150px\"\r\n            id=\"pdfviewer_sign\"\r\n            tooltipText=\"Finish Signing\"\r\n            disabled=\"true\"\r\n            align=\"Right\"\r\n            :click=\"signDocument\"\r\n          ></e-item>\r\n          <e-item\r\n            prefixIcon=\"e-icons e-download\"\r\n            tooltipText=\"Download\"\r\n            disabled=\"true\"\r\n            align=\"Right\"\r\n            :click=\"downloadClicked\"\r\n          ></e-item>\r\n        </e-items>\r\n      </ejs-toolbar>\r\n      <ejs-message\r\n        id=\"msg_success\"\r\n        ref=\"msgsuccess\"\r\n        :visible=\"false\"\r\n        severity=\"Success\"\r\n      ></ejs-message>\r\n      <ejs-message\r\n        id=\"msg_warning\"\r\n        ref=\"msgwarning\"\r\n        :visible=\"false\"\r\n        severity=\"Warning\"\r\n      ></ejs-message>\r\n      <ejs-message\r\n        id=\"msg_error\"\r\n        ref=\"msgerror\"\r\n        :visible=\"false\"\r\n        severity=\"Error\"\r\n      ></ejs-message>\r\n      <ejs-pdfviewer\r\n        id=\"pdfviewer\"\r\n        ref=\"pdfviewer\"\r\n        :documentPath=\"documentPath\"\r\n        :resourceUrl=\"resourceUrl\"\r\n        :documentLoad=\"documentLoad\"\r\n        :addSignature=\"addSignature\"\r\n        :enableThumbnail=\"enableThumbnail\"\r\n        :enableToolbar=\"enableToolbar\"\r\n        :enableTextSelection=\"enableTextSelection\"\r\n        :enableNavigationToolbar=\"enableNavigationToolbar\"\r\n        :enableAnnotationToolbar=\"enableAnnotationToolbar\"\r\n      ></ejs-pdfviewer>\r\n      <input\r\n        type=\"file\"\r\n        id=\"fileUpload\"\r\n        accept=\".pdf\"\r\n        style=\"display: block; visibility: hidden; width: 0; height: 0\"\r\n      />\r\n    </div>\r\n\r\n\r\n\r\n  </div>\r\n</template>\r\n<style scoped>\r\n#pdfviewer {\r\n  height: 640px;\r\n}\r\n#customToolbar_invibleSignature {\r\n        z-index: 900;\r\n}\r\n</style>\r\n<script>\r\nimport {\r\n  PdfViewerComponent,\r\n  Toolbar,\r\n  Magnification,\r\n  Navigation,\r\n  LinkAnnotation,\r\n  BookmarkView,\r\n  ThumbnailView,\r\n  Print,\r\n  TextSelection,\r\n  TextSearch,\r\n  Annotation,\r\n  FormFields,\r\n  FormDesigner,\r\n  PageOrganizer,\r\n} from \"@syncfusion/ej2-vue-pdfviewer\";\r\nimport {\r\n  ItemDirective,\r\n  ItemsDirective,\r\n  ToolbarComponent,\r\n} from \"@syncfusion/ej2-vue-navigations\";\r\nimport { MessageComponent } from \"@syncfusion/ej2-vue-notifications\";\r\nvar toolbarObj;\r\nvar viewer;\r\nvar msgWarning;\r\nvar msgError;\r\nvar msgSuccess;\r\nvar documentData;\r\n// Specifies whether the document has a digital signature or not.\r\nvar hasDigitalSignature = false;\r\nvar openDocument;\r\nvar fileName;\r\nfunction readFile(args) {\r\n  // tslint:disable-next-line\r\n  let upoadedFiles = args.target.files;\r\n  if (args.target.files[0] !== null) {\r\n    let uploadedFile = upoadedFiles[0];\r\n    fileName = uploadedFile.name;\r\n    if (uploadedFile) {\r\n      let reader = new FileReader();\r\n      reader.readAsDataURL(uploadedFile);\r\n      // tslint:disable-next-line\r\n      reader.onload = function (e) {\r\n        let uploadedFileUrl = e.currentTarget.result;\r\n        viewer.load(uploadedFileUrl, null);\r\n        viewer.fileName = fileName;\r\n\t\t\t\tviewer.downloadFileName = fileName;\r\n      };\r\n    }\r\n  }\r\n}\r\n\r\nexport default {\r\n  components: {\r\n    \"ejs-pdfviewer\": PdfViewerComponent,\r\n    \"ejs-toolbar\": ToolbarComponent,\r\n    \"e-items\": ItemsDirective,\r\n    \"e-item\": ItemDirective,\r\n    \"ejs-message\": MessageComponent,\r\n  },\r\n  data: function () {\r\n    return {\r\n      documentPath: \"https://cdn.syncfusion.com/content/pdf/InvisibleDigitalSignature.pdf\",\r\n      enableToolbar: false,\r\n      enableNavigationToolbar: false,\r\n      enableThumbnail: false,\r\n      enableAnnotationToolbar: false,\r\n      enableTextSelection: false,\r\n      resourceUrl: \"https://cdn.syncfusion.com/ej2/27.2.2/dist/ej2-pdfviewer-lib\"\r\n    };\r\n  },\r\n  provide: {\r\n    PdfViewer: [\r\n      Toolbar,\r\n      Magnification,\r\n      Navigation,\r\n      LinkAnnotation,\r\n      BookmarkView,\r\n      ThumbnailView,\r\n      Print,\r\n      TextSelection,\r\n      TextSearch,\r\n      Annotation,\r\n      FormFields,\r\n      FormDesigner,\r\n      PageOrganizer,\r\n    ],\r\n  },\r\n  methods: {\r\n    downloadClicked: function (args) {\r\n      viewer.download();\r\n    },\r\n    documentLoad: function (args) {\r\n      viewer = this.$refs.pdfviewer.ej2Instances;\r\n      toolbarObj = this.$refs.toolbar.ej2Instances;\r\n      msgWarning = this.$refs.msgwarning.ej2Instances;\r\n      msgError = this.$refs.msgerror.ej2Instances;\r\n      msgSuccess = this.$refs.msgsuccess.ej2Instances;\r\n      fileName = args.documentName;\r\n      var postData = {\r\n        documentData: documentData,\r\n      };\r\n      var options = {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify(postData),\r\n      };\r\n      var apiUrl = \"http://localhost:62728/api/pdfviewer/ValidateSignature\";\r\n      fetch(apiUrl, options)\r\n        .then(function (response) {\r\n          return response.json();\r\n        })\r\n        .then(function (body) {\r\n          if (body.successVisible || body.warningVisible || body.errorVisible)\r\n            toolbarObj.items[1].disabled = true;\r\n          if (!body.downloadVisibility) toolbarObj.items[2].disabled = false;\r\n          if (body.successVisible) {\r\n            setTimeout(function () {\r\n              msgSuccess.content = body.message;\r\n              msgSuccess.visible = true;\r\n            }, 1000);\r\n            setTimeout(function () {\r\n              msgSuccess.visible = false;\r\n            }, 5000);\r\n          }\r\n          if (body.warningVisible) {\r\n            msgWarning.content = body.message;\r\n            msgWarning.visible = true;\r\n          }\r\n          if (body.errorVisible) {\r\n            msgError.content = body.message;\r\n            msgError.visible = true;\r\n          }\r\n        });\r\n      document\r\n        .getElementById(\"fileUpload\")\r\n        .addEventListener(\"change\", readFile, false);\r\n    },\r\n    openClicked: function (args) {\r\n      document.getElementById(\"fileUpload\").click();\r\n    },\r\n    addSignature: function (args) {\r\n      var field = viewer.retrieveFormFields();\r\n      var signatureFieldCount = 0;\r\n      var signaturesCount = 0;\r\n      for (var i = 0; i < field.Count; i++) {\r\n        if (field[i].Type.ToString() == \"SignatureField\") {\r\n          signatureFieldCount++;\r\n        }\r\n        if (\r\n          field[i].Value != \"\" &&\r\n          field[i].Value != null &&\r\n          field[i].Type.ToString() == \"SignatureField\"\r\n        ) {\r\n          signaturesCount++;\r\n        }\r\n      }\r\n      if (signatureFieldCount == signaturesCount) {\r\n        if (!hasDigitalSignature) {\r\n          toolbarObj.items[1].disabled = false;\r\n        }\r\n      }\r\n    },\r\n    signDocument: function (args) {\r\n      const url = \"http://localhost:62728/api/pdfviewer/AddSignature\";\r\n      viewer.saveAsBlob().then(function (value) {\r\n          const reader = new FileReader();\r\n          reader.readAsDataURL(value);\r\n          reader.onload = function (e) {\r\n              const base64String = e.target ? e.target.result : null;\r\n              const xhr = new XMLHttpRequest();\r\n              xhr.open('POST', url, true);\r\n              xhr.setRequestHeader('Content-type', 'application/json; charset=UTF-8');\r\n              const requestData = JSON.stringify({ base64String: base64String });\r\n              xhr.onload = function () {\r\n                  if (xhr.status === 200) {\r\n                    documentData = xhr.responseText;\r\n                    viewer.load(xhr.responseText, null);\r\n                    toolbarObj.items[1].disabled = true;\r\n                    toolbarObj.items[2].disabled = false;\r\n                    viewer.fileName = fileName;\r\n                    viewer.downloadFileName = fileName;\r\n                  }\r\n                  else {\r\n                    console.error('Error in AddSignature API:', xhr.statusText);\r\n                  }\r\n              };\r\n              xhr.onerror = function () {\r\n                console.error('Error reading Blob as Base64.', xhr.statusText);\r\n              };\r\n              xhr.send(requestData);\r\n          };\r\n        }).catch(function (error) {\r\n            console.error('Error saving Blob:', error);\r\n        });\r\n    },\r\n  },\r\n};\r\n</script>","dependencies":"{\"vue\":\"3.3.4\",\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-vue-base\":\"*\",\"@syncfusion/ej2-pdfviewer\":\"*\",\"@syncfusion/ej2-vue-pdfviewer\":\"*\",\"@syncfusion/ej2-navigations\":\"*\",\"@syncfusion/ej2-vue-navigations\":\"*\",\"@syncfusion/ej2-notifications\":\"*\",\"@syncfusion/ej2-vue-notifications\":\"*\",\"@syncfusion/ej2-vue-charts\":\"*\",\"@syncfusion/ej2-vue-maps\":\"*\",\"@syncfusion/ej2-vue-calendars\":\"*\",\"@syncfusion/ej2-data\":\"*\",\"@syncfusion/ej2-vue-grids\":\"*\",\"@syncfusion/ej2-vue-schedule\":\"*\",\"@syncfusion/ej2-vue-richtexteditor\":\"*\",\"@syncfusion/ej2-vue-inputs\":\"*\",\"@syncfusion/ej2-vue-documenteditor\":\"*\",\"@syncfusion/ej2-vue-splitbuttons\":\"*\",\"@syncfusion/ej2-vue-buttons\":\"*\",\"@syncfusion/ej2-vue-dropdowns\":\"*\"}","src/main.js":"import { createApp } from 'vue'\nimport App from './App.vue'\ncreateApp(App).mount('#app')"}