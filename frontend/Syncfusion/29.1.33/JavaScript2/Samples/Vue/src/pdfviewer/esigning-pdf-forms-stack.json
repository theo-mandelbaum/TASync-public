{"public/index.html":"<!DOCTYPE html>\r\n<html lang=\"en\">\r\n\r\n<head>\r\n    <meta charset=\"utf-8\">\r\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\r\n    <meta name=\"viewport\" content=\"width=device-width,initial-scale=1.0\">\r\n    <link rel=\"icon\" href=\"<%= BASE_URL %>favicon.ico\">\r\n    <title>\r\n        <%= htmlWebpackPlugin.options.title %>\r\n    </title>\r\n    <link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\r\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\r\n</head>\r\n\r\n<body>\r\n    <noscript>\r\n        <strong>We're sorry but <%= htmlWebpackPlugin.options.title %> doesn't work properly without JavaScript enabled.\r\n        Please enable it to continue.</strong>\r\n    </noscript>\r\n    <div id=\"app\"></div>\r\n    <style>\r\n            .control-section\r\n            {\r\n                margin-top: 100px;\r\n            }\r\n    </style>\r\n    <!-- built files will be auto injected -->\r\n</body>\r\n\r\n</html>\r\n","src/App.vue":"<template>\n    <div>\n        <div class=\"e-pv-e-sign control-section\">\n            <div class=\"e-pv-e-sign-property-sec\">\n                <div class=\"e-pv-e-sign-property-sec\">\n                    <ejs-toolbar id=\"e-pv-e-sign-toolbar-user-viewer\">\n                        <e-items>\n                            <e-item template=\"template\">\n                                <template v-slot:template>\n                                    <div id='e-pv-e-sign-user-field' style=\"width: 200px; height: 37px; left: 0px\">\n                                        <div class='e-pv-e-sign-user-dropdown'>\n                                            <ejs-dropdownlist ref=\"userMenu\" :dataSource=\"userDetails\" :fields=\"fields\"\n                                                :index=0 :itemTemplate=\"'iTemplate'\" :valueTemplate=\"'vTemplate'\"\n                                                popupHeight=\"450px\" popupWidth=\"200px\" :select=\"userChange\">\n                                                <template v-slot:iTemplate=\"{ data }\">\n                                                    <div style=\"display: flex;\">\n                                                        <img class=\"e-pv-e-sign-user-profile\"\n                                                            :src=\"`src/pdfviewer/images/employees/${data.Eimg}.png`\"\n                                                            :style=\"{ height: '33px', marginTop: '7px', marginLeft: '3px', borderRadius: '50%', border: `1px solid ${data.Mail === 'andrew@mycompany.com' ? 'red' : 'green'}`, }\" />\n                                                        <div>\n                                                            <div class=\"e-pv-e-sign-user-name\"\n                                                                style=\"font-size: 14px; height: 18px;\">{{ data.Name }}\n                                                            </div>\n                                                            <div class=\"e-pv-e-sign-user-mail\" style=\"font-size: 12px;\">\n                                                                {{ data.Mail }}</div>\n                                                        </div>\n                                                    </div>\n                                                </template>\n                                                <template v-slot:vTemplate=\"{ data }\">\n                                                    <div class=\"e-pv-e-sign-value-template\" style=\"display: flex;\">\n                                                        <img class=\"e-pv-e-sign-user-profile\"\n                                                            :src=\"`src/pdfviewer/images/employees/${data.Eimg}.png`\"\n                                                            :style=\"{ height: '30px', borderRadius: '50%',marginLeft: '3px', border: `1px solid ${data.Mail === 'andrew@mycompany.com' ? 'red' : 'green'}` }\" />\n                                                        <div>\n                                                            <div class=\"e-pv-e-sign-user-name\"\n                                                                style=\"font-size: 12px; margin-left: 12px;\">{{ data.Name\n                                                                }}</div>\n                                                            <div class=\"e-pv-e-sign-user-mail\"\n                                                                style=\"font-size: 10px; margin-left: 11px;\">{{ data.Mail\n                                                                }}</div>\n                                                        </div>\n                                                    </div>\n                                                </template>\n                                            </ejs-dropdownlist>\n                                        </div>\n                                    </div>\n                                </template>\n                            </e-item>\n                            <e-item align=\"Right\" template=\"buttonComponent\">\n                                <template v-slot:buttonComponent>\n                                    <ejs-button ref=\"btnElement\" id=\"e-pv-e-sign-finishbtn\" cssClass=\"e-outline\"\n                                        :onClick=\"finishSigning\" :disabled=\"true\">Finish Signing</ejs-button>\n                                </template>\n                            </e-item>\n                        </e-items>\n                    </ejs-toolbar>\n                </div>\n            </div>\n            <ejs-pdfviewer ref=\"viewer\" id=\"container\" :documentPath=\"documentPath\" :zoomMode=\"zoomMode\" :resourceUrl=\"resourceUrl\"\n                :enableNavigationToolbar=\"false\" :enableAnnotationToolbar = \"false\"\n                :enableToolbar=\"false\" :enableFormDesignerToolbar=\"false\" :documentLoad=\"documentLoad\"\n                :formFieldPropertiesChange=\"fieldChange\" :downloadEnd=\"downloadEnd\" style=\"height: 640px;\">\n            </ejs-pdfviewer>\n            <div id=\"e-pv-e-sign-dialog-target\">\n                <ejs-dialog ref=\"dialogInstance\" :minHeight=\"'50px'\" :isModal=\"true\" :width=\"'350px'\" :buttons=\"buttons\"\n                    :visible=\"status\" :target=\"'#e-pv-e-sign-dialog-target'\"></ejs-dialog>\n            </div>\n        </div>\n    </div>\n</template>\n\n<script>\nimport { PdfViewerComponent, Toolbar, Magnification, Navigation, LinkAnnotation, BookmarkView, ThumbnailView, Print, TextSelection, TextSearch, Annotation, FormFields, FormDesigner, PageOrganizer, } from '@syncfusion/ej2-vue-pdfviewer';\nimport { ButtonComponent } from '@syncfusion/ej2-vue-buttons';\nimport { DropDownListComponent } from '@syncfusion/ej2-vue-dropdowns';\nimport { ToolbarComponent, ItemDirective, ItemsDirective } from '@syncfusion/ej2-vue-navigations';\nimport { DialogComponent } from '@syncfusion/ej2-vue-popups';\nvar viewer;\nvar fileName = 'eSign_filling.pdf';\nexport default {\n    components: {\n        \"ejs-pdfviewer\": PdfViewerComponent,\n        \"ejs-button\": ButtonComponent,\n        \"ejs-dropdownlist\": DropDownListComponent,\n        \"ejs-dialog\": DialogComponent,\n        \"ejs-toolbar\": ToolbarComponent,\n        \"e-items\": ItemsDirective,\n        \"e-item\": ItemDirective\n    },\n    data() {\n        return {\n            documentPath: 'https://cdn.syncfusion.com/content/pdf/eSign_filling.pdf',\n            resourceUrl: 'https://cdn.syncfusion.com/ej2/27.2.2/dist/ej2-pdfviewer-lib',\n            zoomMode: 'FitToPage',\n            status: false,\n            preventChange: false,\n            currentUser: 'andrew@mycompany.com',\n            borderColor: '2px solid red',\n            finishedBackground: '#daeaf7ff',\n            anneBackground: '#eff7ef',\n            andrewBackground: '#ffefef',\n            buttons: [\n                {\n                    click: this.dlgButtonClick,\n                    buttonModel: {\n                        content: 'OK',\n                        isPrimary: true,\n                    },\n                },\n            ],\n            userDetails: [\n                { Name: 'Andrew Fuller', Eimg: 'profile1', Mail: 'andrew@mycompany.com', fieldIds: [] },\n                { Name: 'Anne Dodsworth', Eimg: 'profile2', Mail: 'anne@mycompany.com', fieldIds: [] },\n            ],\n            fields: { text: 'Mail', value: 'Eimg', fieldIds: 'fieldIds' },\n        };\n    },\n    provide: {\n        PdfViewer: [Toolbar, Magnification, Navigation, LinkAnnotation, BookmarkView, ThumbnailView, Print, TextSelection, TextSearch, Annotation, FormFields, FormDesigner, PageOrganizer]\n    },\n    methods: {\n\n        finishSigning() {\n            viewer = this.$refs.viewer.ej2Instances;\n            var url = \"http://localhost:62728/api/pdfviewer/FlattenDownload\";\n            for (const formField of viewer.formFieldCollections) {\n                viewer.formDesignerModule.updateFormField(formField, { backgroundColor: this.finishedBackground });\n            }\n            viewer.saveAsBlob().then(function (value) {\n            let reader = new FileReader();\n            reader.readAsDataURL(value);\n            reader.onload = function (e) {\n                const base64String = e.target?.result.toString();\n                const xhr = new XMLHttpRequest();\n                xhr.open('POST', url, true);\n                xhr.setRequestHeader('Content-type', 'application/json; charset=UTF-8');\n                const requestData = JSON.stringify({ base64String: base64String });\n                xhr.onload = function () {\n                    if (xhr.status === 200) {\n                        const blobUrl = createBlobUrl(xhr.responseText.split('base64,')[1], 'application/pdf');\n                        downloadDocument(blobUrl);\n                        viewer.load(xhr.responseText, null);\n                    }\n                    else {\n                        console.error('Download failed:', xhr.statusText);\n                    }\n                };\n                xhr.onerror = function () {\n                    console.error('An error occurred during the download:', xhr.statusText);\n                };\n                xhr.send(requestData);\n            };\n        }).catch(function (error) {\n            console.error('Error saving Blob:', error);\n        });\n         this.$refs.btnElement.ej2Instances.disabled = true;\n         this.$refs.userMenu.ej2Instances.enabled = false;\n    },\n        updateUserFormField() {\n            var viewer = this.$refs.viewer.ej2Instances;\n            const otherFormFieldDetails = viewer.formFieldCollections.filter(formField => formField.customData.author === 'anne');\n            const currentFormFieldDetails = viewer.formFieldCollections.filter(formField => formField.customData.author === 'andrew');\n            if (this.currentUser === 'andrew@mycompany.com') {\n                otherFormFieldDetails.forEach(field => {\n                    if (field.value !== '') {\n                        const mainFieldUpdateData = {\n                            backgroundColor: this.finishedBackground,\n                            isReadOnly: true,\n                        };\n                        viewer.formDesigner.updateFormField(field, mainFieldUpdateData);\n                        currentFormFieldDetails.forEach(currentField => {\n                            const currentFieldUpdateData = {\n                                backgroundColor: this.andrewBackground,\n                                isReadOnly: true,\n                            };\n                            viewer.formDesigner.updateFormField(currentField, currentFieldUpdateData);\n                        });\n                    } else {\n                        currentFormFieldDetails.forEach(currentField => {\n                            const currentFieldUpdateData = {\n                                backgroundColor: this.andrewBackground,\n                            };\n                            viewer.formDesigner.updateFormField(currentField, currentFieldUpdateData);\n                        });\n                    }\n                    const otherUserField = document.getElementById(field.id + '_content_html_element');\n                    if (otherUserField) {\n                        const currentFormField = viewer.formFieldCollections.find(formField => formField.id === field.id);\n                        if (currentFormField.type !== 'DropDown' && otherUserField) {\n                            if (!currentFormField.value) {\n                                viewer.formDesignerModule.updateFormField(currentFormField, { visibility: 'hidden' });\n                            }\n                        } else {\n                            if (currentFormField.value.length !== 0 && otherUserField) {\n                                viewer.formDesignerModule.updateFormField(currentFormField, { visibility: 'hidden' });\n                            }\n                        }\n                    }\n                });\n            } else {\n                this.validation(currentFormFieldDetails);\n                if (!this.status) {\n                    currentFormFieldDetails.forEach(field => {\n                        const currentFieldUpdateData = {\n                            backgroundColor: this.finishedBackground,\n                            isReadOnly: true,\n                        };\n                        viewer.formDesigner.updateFormField(field, currentFieldUpdateData);\n                        otherFormFieldDetails.forEach(otherField => {\n                            const otherFieldUpdateData = {\n                                backgroundColor: this.anneBackground,\n                                isReadOnly: false,\n                            };\n                            viewer.formDesigner.updateFormField(otherField, otherFieldUpdateData);\n                        });\n                    });\n                    otherFormFieldDetails.forEach(field => {\n                        viewer.formDesignerModule.updateFormField(field, { visibility: 'visible' });\n                    });\n                }\n            }\n        },\n        dlgButtonClick() {\n            this.status = false;\n            this.$refs.dialogInstance.hide();\n        },\n        validation(args) {\n            let errorMessage = 'Required Field(s): ';\n            const forms = args;\n            let flag = false;\n            let isAllFieldFilled = true;\n            let radioGroupName = '';\n\n            for (let i = 0; i < forms.length; i++) {\n                let text = \"\";\n\n                if (forms[i].isRequired) {\n                    switch (forms[i].type.toString()) {\n                        case \"Checkbox\":\n                            if (!forms[i].isChecked) {\n                                text = forms[i].name;\n                            }\n                            break;\n\n                        case \"RadioButton\":\n                            if (!flag) {\n                                radioGroupName = forms[i].name;\n                                if (forms[i].isSelected) {\n                                    flag = true;\n                                }\n                            }\n                            break;\n\n                        case \"DropdownList\":\n                            if (forms[i].value.length === 0) {\n                                text = forms[i].name;\n                            }\n                            break;\n\n                        default:\n                            if (!forms[i].value || (typeof forms[i].newValue === 'string' && forms[i].newValue === \"\")) {\n                                text = forms[i].name;\n                            }\n                            break;\n                    }\n\n                    if (text) {\n                        errorMessage = errorMessage === \"Required Field(s): \" ? errorMessage + text : errorMessage + \", \" + text;\n                    }\n                }\n            }\n            if (!flag && radioGroupName !== '') {\n                if (errorMessage === 'Required Field(s): ') errorMessage += radioGroupName;\n                else errorMessage += ', ' + radioGroupName;\n                isAllFieldFilled = false;\n            }\n            if (errorMessage !== 'Required Field(s): ') {\n                this.status = true;\n                this.$refs.dialogInstance.ej2Instances.content = errorMessage;\n                this.$refs.dialogInstance.ej2Instances.show();\n                this.preventChange = true;\n            } else {\n                this.status = false;\n                this.preventChange = false;\n            }\n        },\n        fieldChange(args) {\n            let errorMessage = 'Required Field(s): ';\n            const forms = this.$refs.viewer.ej2Instances.formFieldCollections;\n            let flag = false;\n            let isAllFieldFilled = true;\n            let radioGroupName = '';\n            forms.forEach(form => {\n                let text = \"\";\n\n                if (form.isRequired) {\n                    if (form.type.toString() === \"Checkbox\" && !form.isChecked) {\n                        text = form.name;\n                        isAllFieldFilled = false;\n                    } else if (form.type === \"RadioButton\" && !flag) {\n                        radioGroupName = form.name;\n                        if (form.isSelected) {\n                            flag = true;\n                        }\n                    } else if (form.type.toString() !== \"Checkbox\" && form.type !== \"RadioButton\" && (!form.value || (typeof args.newValue === 'string' && args.newValue === \"\"))) {\n                        text = form.name;\n                        isAllFieldFilled = false;\n                    } else if (form.type.toString() === \"DropdownList\" && form.value.length === 0) {\n                        text = form.name;\n                        isAllFieldFilled = false;\n                    }\n\n                    if (text) {\n                        errorMessage = errorMessage === \"Required Field(s): \" ? errorMessage + text : errorMessage + \", \" + text;\n                    }\n                }\n            });\n            if (!flag && radioGroupName !== '') {\n                if (errorMessage === 'Required Field(s): ') errorMessage += radioGroupName;\n                else errorMessage += ', ' + radioGroupName;\n                isAllFieldFilled = false;\n            }\n            if (isAllFieldFilled) {\n                this.$refs.btnElement.ej2Instances.disabled = false;\n            } else {\n                this.$refs.btnElement.ej2Instances.disabled = true;\n            }\n        },\n        userChange(args) {\n            this.currentUser = args.itemData.Mail;\n            if (args.itemData.Mail === 'andrew@mycompany.com') {\n                this.borderColor = '1px solid red';\n            } else {\n                this.borderColor = '1px solid green';\n            }\n            this.updateUserFormField();\n            if (this.preventChange) {\n                args.cancel = true;\n            }\n        },\n        documentLoad() {\n            var viewer = this.$refs.viewer.ej2Instances;\n            viewer.designerMode = false;\n            this.updateUserFormField();\n        },\n    }  \n};\n\nfunction createBlobUrl(base64String, contentType)\n  {\n    const sliceSize = 512;\n    const byteCharacters = atob(base64String);\n    const byteArrays = [];\n    for (let offset = 0; offset < byteCharacters.length; offset += sliceSize) {\n        const slice = byteCharacters.slice(offset, offset + sliceSize);\n        const byteNumbers = new Array(slice.length);\n        for (let i = 0; i < slice.length; i++) {\n            byteNumbers[parseInt(i.toString(), 10)] = slice.charCodeAt(i);\n        }\n        const byteArray = new Uint8Array(byteNumbers);\n        byteArrays.push(byteArray);\n    }\n    const blob = new Blob(byteArrays, { type: contentType });\n    return blob;\n  };\n  \n  function downloadDocument(blobUrl)\n  {\n    const Url = URL || webkitURL;\n    blobUrl = Url.createObjectURL(blobUrl);\n    viewer.fileName = fileName;\n    const anchorElement = document.createElement('a');\n    if (anchorElement.click) {\n        (anchorElement).href = blobUrl;\n        (anchorElement).target = '_parent';\n        if ('download' in anchorElement) {\n            const downloadFileName = viewer.fileName || 'downloadedFile.pdf';\n            if (downloadFileName) {\n                if (downloadFileName.endsWith('.pdf')) {\n                    (anchorElement).download = downloadFileName;\n                }\n                else {\n                    const splitPdf = downloadFileName.split('.pdf')[0] + '.pdf';\n                    (anchorElement).download = splitPdf;\n                }\n            }\n            else {\n                (anchorElement).download = 'Default.pdf';\n            }\n        }\n        (document.body || document.documentElement).appendChild(anchorElement);\n        anchorElement.click();\n    }\n    else {\n        if (window.top === window &&\n            blobUrl.split('#')[0] === window.location.href.split('#')[0]) {\n                const padCharacter = blobUrl.indexOf('?') === -1 ? '?' : '&';\n                blobUrl = blobUrl.replace(/#|$/, padCharacter + '$&');\n        }\n        window.open(blobUrl, '_parent');\n    }\n  };\n</script>\n\n<style>\n#e-pv-e-sign-toolbar_user_viewer {\n    z-index: 1001;\n    width: 100% !important;\n    height: 48px !important;\n    box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15), 0px 1px 2px 0px rgba(0, 0, 0, 0.30);\n}\n\n#e-pv-e-sign-finishbtn {\n    width: 115px !important;\n    height: 28px;\n    padding: 0;\n    font-size: 12px;\n    flex-shrink: 0;\n    border-radius: 16px;\n}\n.e-pv-e-sign-user-dropdown> :first-child {\n    border: none !important;\n}\n</style>","dependencies":"{\"vue\":\"3.3.4\",\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-vue-base\":\"*\",\"@syncfusion/ej2-pdfviewer\":\"*\",\"@syncfusion/ej2-vue-pdfviewer\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-vue-buttons\":\"*\",\"@syncfusion/ej2-dropdowns\":\"*\",\"@syncfusion/ej2-vue-dropdowns\":\"*\",\"@syncfusion/ej2-navigations\":\"*\",\"@syncfusion/ej2-vue-navigations\":\"*\",\"@syncfusion/ej2-popups\":\"*\",\"@syncfusion/ej2-vue-popups\":\"*\",\"@syncfusion/ej2-vue-charts\":\"*\",\"@syncfusion/ej2-vue-maps\":\"*\",\"@syncfusion/ej2-vue-calendars\":\"*\",\"@syncfusion/ej2-data\":\"*\",\"@syncfusion/ej2-vue-grids\":\"*\",\"@syncfusion/ej2-vue-schedule\":\"*\",\"@syncfusion/ej2-vue-richtexteditor\":\"*\",\"@syncfusion/ej2-vue-inputs\":\"*\",\"@syncfusion/ej2-vue-documenteditor\":\"*\",\"@syncfusion/ej2-vue-splitbuttons\":\"*\"}","src/main.js":"import { createApp } from 'vue'\nimport App from './App.vue'\ncreateApp(App).mount('#app')"}