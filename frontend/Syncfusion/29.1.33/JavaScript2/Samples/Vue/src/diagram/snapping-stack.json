{"public/index.html":"<!DOCTYPE html>\r\n<html lang=\"en\">\r\n\r\n<head>\r\n    <meta charset=\"utf-8\">\r\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\r\n    <meta name=\"viewport\" content=\"width=device-width,initial-scale=1.0\">\r\n    <link rel=\"icon\" href=\"<%= BASE_URL %>favicon.ico\">\r\n    <title>\r\n        <%= htmlWebpackPlugin.options.title %>\r\n    </title>\r\n    <link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\r\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\r\n</head>\r\n\r\n<body>\r\n    <noscript>\r\n        <strong>We're sorry but <%= htmlWebpackPlugin.options.title %> doesn't work properly without JavaScript enabled.\r\n        Please enable it to continue.</strong>\r\n    </noscript>\r\n    <div id=\"app\"></div>\r\n    <style>\r\n            .control-section\r\n            {\r\n                margin-top: 100px;\r\n            }\r\n    </style>\r\n    <!-- built files will be auto injected -->\r\n</body>\r\n\r\n</html>\r\n","src/App.vue":"<template>\n<div>\n<div class=\"control-section\">\n    <div class=\"db-diagram-container\">\n    <ejs-diagram id=\"diagram\" ref=\"diagramObj\" :width='width' :height='height' :nodes='nodes' :getNodeDefaults='getNodeDefaults' :selectionChange=\"selectionChange\" :snapSettings='snapSettings' :connectors='connectors' :getConnectorDefaults='getConnectorDefaults' :getCustomTool='getCustomTool' :selectedItems='selectedItems' :drawingObject = 'drawingObject'\n        ></ejs-diagram>\n    </div>\n    <div id=\"properties_Container\">\n        <span class=\"property-panel-header\">\n            Properties\n        </span>\n        <div class=\"db-prop-row\">\n            <div class=\"db-prop-text-style\">\n                <span class=\"db-prop-text-style text-content\">Snapping Interval </span>\n                <div style=\"float: right;margin-right: 10px;\">\n                   <ejs-numerictextbox id = \"snappingInterval\" :value=\"20\" format=\"n0\" :min=\"1\" :step=\"1\" :width=\"150\" :change=\"snappingInterval\" ></ejs-numerictextbox>\n                </div>\n            </div>\n            <div class=\"db-prop-text-style\">\n                <span class=\"db-prop-text-style text-content\">Snapping Angle</span>\n                <div style=\"float: right;margin-right: 10px;\">\n                   <ejs-numerictextbox :value=\"5\" format=\"n0\" :min=\"1\" :step=\"1\" :width=\"150\" :change=\"snappingAngle\"></ejs-numerictextbox>\n                </div>\n            </div>\n            <div class=\"db-prop-text-style\">\n                <span class=\"db-prop-text-style text-content\">Snapping Line Color</span>\n                <div class=\"db-text-input\" style=\"float: right;margin-right: 10px;width:50%\">\n                 <ejs-colorpicker id=\"color-picker\" value=\"#07EDE1\" width=\"100%\" type = \"color\" mode=\"Palette\" :change=\"colorChange\"></ejs-colorpicker>\n                </div>\n            </div>\n            <div class=\"db-prop-text-style\">\n                 <ejs-checkbox id=\"showgridline\" label= 'Show Gridline' :checked=\"true\" :change=\"showGridline\"></ejs-checkbox>\n            </div>\n            <div class=\"db-prop-text-style\" style=\"margin-top: 7px!important;\">\n                   <ejs-checkbox id=\"snaptoobject\" label= 'Snapping to Objects' :checked=\"true\" :change=\"snappingToobjects\"></ejs-checkbox>\n            </div>\n            <div class=\"db-prop-text-style\">\n                <span class=\"db-prop-text-style text-content\" style=\"font-weight: bold;\">Snapping To Lines</span>\n            </div>\n            <div class=\"row radio-text-style\" style=\"margin-left: 7px;\">\n                <ejs-radiobutton label=\"Snap To Gridlines\" name=\"snapping\" :checked=\"true\" value=\"Snap To Gridlines\" :change=\"snapToLines\"></ejs-radiobutton>\n            </div>\n            <div class=\"row radio-text-style\" style=\"margin-left: 7px;\">\n                <ejs-radiobutton label=\"Snap To Horizontal Gridlines\" name=\"snapping\" :checked=\"false\" value=\"Snap To Horizontal Gridlines\" :change=\"snapToLines\"></ejs-radiobutton>\n            </div>\n            <div class=\"row radio-text-style\" style=\"margin-left: 7px;\">\n                <ejs-radiobutton label=\"Snap To Vertical Gridlines\" name=\"snapping\" :checked=\"false\" value=\"Snap To Vertical Gridlines\"  :change=\"snapToLines\"></ejs-radiobutton>\n            </div>\n            <div class=\"row radio-text-style\" style=\"margin-left: 7px;\">\n                <ejs-radiobutton label=\"None\" name=\"snapping\" :checked=\"false\" value=\"None\" :change=\"snapToLines\"></ejs-radiobutton>\n            </div>\n\n        </div>\n    </div>\n</div>\n</div>\n</template>\n<style scoped>\n  \n    .db-diagram-container {\n    width:calc(100% - 300px);\n    height: 100%;\n    float: left;\n    }\n    .db-prop-row {\n    margin-top: 6px;\n    }\n    .db-col-left {\n    padding-left: 10px;\n    padding-right: 3px;\n    }\n\n    .db-prop-text-style {\n    font-size: 13px;\n    font-weight: normal;\n    font-family: 'Calibri';\n    margin-top: 25px;\n    }\n    .radio-text-style{\n    font-size: 13px;\n    font-weight: normal;\n    font-family: 'Calibri';\n    margin-top: 10px;\n    }\n    .text-content{\n        margin-left: 10px;\n    }\n  \n    .db-text-input{\n        height: 25px!important;\n    }\n    \n    #properties_Container{\n    /* background: #e3e3e3; */\n    width: 300px;\n    float: right;\n    /* margin-left: 20px; */\n    }\n   \n</style>\n<script>\nimport {\n    DiagramComponent,\n    PortVisibility,\n    ConnectorConstraints,\n    SnapConstraints,\n    PortConstraints,\n    SelectorConstraints,\n    ConnectorEditing,\n    DiagramContextMenu,\n    Snapping,\n    UndoRedo,\n    \n} from \"@syncfusion/ej2-vue-diagrams\";\nimport { CheckBoxComponent } from \"@syncfusion/ej2-vue-buttons\";\nimport { ColorPickerComponent, NumericTextBoxComponent } from \"@syncfusion/ej2-vue-inputs\";\nimport { RadioButtonComponent } from \"@syncfusion/ej2-vue-buttons\";\n\nlet drawingNode;\n//Initializes the nodes for the diagram\nlet nodes = [\n     {\n            id:'node_1',width:100,height:100,offsetX:350,offsetY:250,\n            ports:[\n                {id:'port1',offset:{x:0.5,y:0.5},visibility: PortVisibility.Visible,\n                style:{fill:'black'},\n                constraints:PortConstraints.Default|PortConstraints.Draw\n            }],\n            annotations:[{id:'annot1',content:'Shape 1', offset:{x:0.5,y:1.2},style:{bold:true}}]\n        },\n        {\n            id:'node_2',width:100,height:100,offsetX:600,offsetY:250,\n            ports:[\n                {id:'port11', offset:{x:0.5,y:0.5},visibility: PortVisibility.Visible,style:{fill:'black'},\n                constraints:PortConstraints.Default|PortConstraints.Draw\n            },{\n                id:'port2',offset:{x:0,y:0.5},visibility:PortVisibility.Visible,\n                style:{fill:'black'},\n                constraints:PortConstraints.Default|PortConstraints.Draw,\n                height:100,width:7\n            }],\n            annotations:[{id:'annot1',content:'Shape 2',offset:{x:0.5,y:1.2},style:{bold:true}}]\n    \n        },\n        {\n            id:'node_3',width:100,height:100,offsetX:500,offsetY:400,\n            annotations:[{id:'annot1',content:'Shape 3', offset:{x:0.5,y:1.2}, style:{bold:true}}]\n    \n        },\n  ];\n//Initializes the connector for the diagram\nlet connectors = [\n    {\n        id:'connector_1',sourceID:'node_1',targetID:'node_3',type:'Orthogonal',\n    }\n  ];\n//Initializes the User handles\nlet handles = [\n    {\n        name: 'Clone', pathData: 'M0,2.4879999 L0.986,2.4879999 0.986,9.0139999 6.9950027,9.0139999 6.9950027,10 0.986,10 C0.70400238,10 0.47000122,9.9060001 0.28100207,9.7180004 0.09400177,9.5300007 0,9.2959995 0,9.0139999 z M3.0050011,0 L9.0140038,0 C9.2960014,0 9.5300026,0.093999863 9.7190018,0.28199956 9.906002,0.47000027 10,0.70399952 10,0.986 L10,6.9949989 C10,7.2770004 9.906002,7.5160007 9.7190018,7.7110004 9.5300026,7.9069996 9.2960014,8.0049992 9.0140038,8.0049992 L3.0050011,8.0049992 C2.7070007,8.0049992 2.4650002,7.9069996 2.2770004,7.7110004 2.0890007,7.5160007 1.9950027,7.2770004 1.9950027,6.9949989 L1.9950027,0.986 C1.9950027,0.70399952 2.0890007,0.47000027 2.2770004,0.28199956 2.4650002,0.093999863 2.7070007,0 3.0050011,0 z',tooltip:{content:'Clone'},\n        visible: true, offset: 1, side: 'Bottom', margin: { top: 0, bottom: 0, left: 0, right: 0 }\n    },\n    {\n        name: 'Delete', pathData: 'M0.54700077,2.2130003 L7.2129992,2.2130003 7.2129992,8.8800011 C7.2129992,9.1920013 7.1049975,9.4570007 6.8879985,9.6739998 6.6709994,9.8910007 6.406,10 6.0939997,10 L1.6659999,10 C1.3539997,10 1.0890004,9.8910007 0.87200136,9.6739998 0.65500242,9.4570007 0.54700071,9.1920013 0.54700077,8.8800011 z M2.4999992,0 L5.2600006,0 5.8329986,0.54600048 7.7599996,0.54600048 7.7599996,1.6660004 0,1.6660004 0,0.54600048 1.9270014,0.54600048 z',tooltip:{content:'Delete'},\n        visible: true, offset: 0, side: 'Bottom', margin: { top: 0, bottom: 0, left: 0, right: 0 }\n    },\n    {\n        name: 'Draw', pathData: 'M3.9730001,0 L8.9730001,5.0000007 3.9730001,10.000001 3.9730001,7.0090005 0,7.0090005 0,2.9910006 3.9730001,2.9910006 z',tooltip:{content:'Draw'},\n        visible: true, offset: 0.5, side: 'Right', margin: { top: 0, bottom: 0, left: 0, right: 0 }\n    },\n];\n\nexport default {\n  components: {\n    'ejs-radiobutton': RadioButtonComponent,\n    'ejs-colorpicker': ColorPickerComponent,\n    'ejs-checkbox': CheckBoxComponent,\n    'ejs-diagram': DiagramComponent,\n    'ejs-numerictextbox': NumericTextBoxComponent\n  },  \n  data: function() {\n    return {\n      width: \"95%\",\n      height: \"645px\",\n      nodes: nodes,\n      connectors: connectors,\n      selectedItems : {\n        userHandles : handles\n      },\n      drawingObject : { type : 'Orthogonal'},\n      getCustomTool : getTool,\n      snapSettings: {\n               snapAngle : 5\n            },\n      getNodeDefaults: (node) => {\n        node.style = {fill: \"orange\", strokeColor:'orange'};\n        return node;\n      },\n      getConnectorDefaults: (connector) => {\n        connector.constraints = ConnectorConstraints.Default| ConnectorConstraints.DragSegmentThumb;\n        return connector;\n      },\n      // Event handler for selection changes\n      selectionChange :(args)=>{\n         var diagram = document.getElementById(\"diagram\").ej2_instances[0];\n           if(args.state === 'Changed'){\n            var selectedItems = diagram.selectedItems.nodes;\n            selectedItems = selectedItems.concat(diagram.selectedItems.connectors);\n            if(selectedItems.length > 0){\n                if(args.newValue.length > 0 && args.newValue[0].sourceID == undefined && args.newValue[0].targetID == undefined){\n                    diagram.selectedItems = { constraints: SelectorConstraints.All|SelectorConstraints.UserHandle, userHandles: handles };\n                    if(diagram.selectedItems.nodes.length>0){\n                        drawingNode = diagram.selectedItems.nodes[diagram.selectedItems.nodes.length-1];\n                    }\n                }\n                else\n                {\n                 diagram.selectedItems = { constraints: SelectorConstraints.All&~SelectorConstraints.UserHandle };\n                }\n            }\n        }\n    },\n    // Sets the snapping interval\n      snappingInterval : (args) =>{\n        var diagram = document.getElementById(\"diagram\").ej2_instances[0];\n        diagram.snapSettings.horizontalGridlines.snapIntervals[0] = args.value;\n        diagram.snapSettings.verticalGridlines.snapIntervals[0] = args.value;\n        diagram.dataBind();\n      },\n      // Sets the snapping angle\n      snappingAngle : (args) =>{\n        var diagram = document.getElementById(\"diagram\").ej2_instances[0];\n        diagram.snapSettings.snapAngle = args.value;\n        diagram.dataBind();\n      },\n      // Change the color of the snap lines\n      colorChange : (args)=>{\n        var diagram = document.getElementById(\"diagram\").ej2_instances[0];\n        diagram.snapSettings.snapLineColor = args.value;\n        diagram.dataBind();\n      },\n      // Toggle the visibility of grid lines\n      showGridline : (args)=>{\n        var diagram = document.getElementById(\"diagram\").ej2_instances[0];\n        diagram.snapSettings.constraints = diagram.snapSettings.constraints ^ SnapConstraints.ShowLines;\n        diagram.dataBind();\n        scale();\n      },\n      // Toggle the snapping to objects\n      snappingToobjects : (args)=>{\n        var diagram = document.getElementById(\"diagram\").ej2_instances[0];\n       diagram.snapSettings.constraints = diagram.snapSettings.constraints ^ SnapConstraints.SnapToObject;\n       diagram.dataBind();\n      }, \n     // Adjusts the snapping constraints of the diagram instance based on the state\n     snapToLines : (args) =>{\n         var diagram = document.getElementById(\"diagram\").ej2_instances[0];\n         var showGridlines = document.getElementById(\"showgridline\").ej2_instances[0];\n         var snapToObject = document.getElementById(\"snaptoobject\").ej2_instances[0];\n         // Determine the current state of showGridLines and snappToObject checkboxes\n        if(showGridlines.checked && snapToObject.checked){\n            diagram.snapSettings.constraints = SnapConstraints.All;\n        }\n       else if(showGridlines.checked && !snapToObject.checked){\n        diagram.snapSettings.constraints = SnapConstraints.All &~SnapConstraints.SnapToObject;\n       }\n       else if(!showGridlines.checked && snapToObject.checked){\n        diagram.snapSettings.constraints = SnapConstraints.All &~SnapConstraints.ShowLines;\n       }\n       else if(!showGridlines.checked && !snapToObject.checked){\n        diagram.snapSettings.constraints = SnapConstraints.All &~(SnapConstraints.ShowLines|SnapConstraints.SnapToObject);\n       }\n       // Handle specific snap to line options based on user selection\n        switch(args.value){\n            case 'Snap To Gridlines':\n                // Enable SnapToLines constraint and adjust based on checkbox states\n                diagram.snapSettings.constraints =  SnapConstraints.All| SnapConstraints.SnapToLines;\n                if( !showGridlines.checked && !snapToObject.checked ) {\n                   diagram.snapSettings.constraints = SnapConstraints.All &~ (SnapConstraints.ShowLines|SnapConstraints.SnapToObject);\n                }\n                else if( !snapToObject.checked && showGridlines.checked ){\n                    diagram.snapSettings.constraints = SnapConstraints.All &~ (SnapConstraints.SnapToObject);\n                }\n                else if(snapToObject.checked && !showGridlines.checked) {\n                    diagram.snapSettings.constraints = SnapConstraints.All &~ (SnapConstraints.ShowLines);\n                }\n            break;\n            case 'Snap To Horizontal Gridlines':\n                 // Toggle SnapToHorizontalLines constraint\n                diagram.snapSettings.constraints =  diagram.snapSettings.constraints ^ SnapConstraints.SnapToVerticalLines;\n            break;\n            case 'Snap To Vertical Gridlines':\n                 // Toggle SnapToVerticalLines constraint\n                diagram.snapSettings.constraints =  diagram.snapSettings.constraints ^ SnapConstraints.SnapToHorizontalLines;\n            break;\n            case 'None':\n                // Disable all snap to line constraints\n                diagram.snapSettings.constraints = SnapConstraints.All &~ (SnapConstraints.SnapToHorizontalLines|SnapConstraints.SnapToVerticalLines|SnapConstraints.SnapToLines);\n                if(!showGridlines.checked && !snapToObject.checked){\n                    diagram.snapSettings.constraints = SnapConstraints.All &~ (SnapConstraints.ShowLines|SnapConstraints.SnapToObject|SnapConstraints.SnapToHorizontalLines|SnapConstraints.SnapToVerticalLines|SnapConstraints.SnapToLines);\n                 }\n                 else if(showGridlines.checked && !snapToObject.checked){\n                     diagram.snapSettings.constraints =  SnapConstraints.All &~ (SnapConstraints.SnapToObject|SnapConstraints.SnapToHorizontalLines|SnapConstraints.SnapToVerticalLines|SnapConstraints.SnapToLines);\n                 }\n                 else if(!showGridlines.checked && snapToObject.checked){\n                     diagram.snapSettings.constraints =  SnapConstraints.All &~ (SnapConstraints.ShowLines|SnapConstraints.SnapToHorizontalLines|SnapConstraints.SnapToVerticalLines|SnapConstraints.SnapToLines);\n                 }\n            break;\n        }\n        diagram.dataBind();\n        scale();\n    },\n    }\n  },\n  provide:{\n    diagram: [DiagramContextMenu, UndoRedo, Snapping, ConnectorEditing]\n  },\n  mounted: function() {\n       let diagram = this.$refs.diagramObj.ej2Instances;\n       diagram.fitToPage();\n    },\n}\n// Updates the scaled intervals for horizontal and vertical gridlines \nfunction scale(){\n    var diagram = document.getElementById(\"diagram\").ej2_instances[0];\n     var getsnap = document.getElementById('snappingInterval');\n    getsnap = (getsnap).ej2_instances[0];\n     diagram.snapSettings.horizontalGridlines.snapIntervals[0] = (getsnap).value;\n     diagram.snapSettings.verticalGridlines.snapIntervals[0] = (getsnap).value;\n     diagram.dataBind();\n}\n// Custom actions for user handles\nfunction getTool(action){\n     var diagram = document.getElementById(\"diagram\").ej2_instances[0];\n    if (action == \"Delete\") {\n        diagram.remove();\n    }\n    else if (action == \"Clone\"){\n        diagram.paste(diagram.selectedItems.selectedObjects);\n    }\n   else if (action == \"Draw\"){\n     (diagram.drawingObject).type = (diagram.drawingObject).type?(diagram.drawingObject).type: 'Orthogonal';\n     (diagram.drawingObject).sourceID = diagram.selectedItems.nodes[0].id;\n     diagram.dataBind();\n    }\n}\n\n</script>","dependencies":"{\"vue\":\"3.3.4\",\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-vue-base\":\"*\",\"@syncfusion/ej2-diagrams\":\"*\",\"@syncfusion/ej2-vue-diagrams\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-vue-buttons\":\"*\",\"@syncfusion/ej2-inputs\":\"*\",\"@syncfusion/ej2-vue-inputs\":\"*\",\"@syncfusion/ej2-vue-charts\":\"*\",\"@syncfusion/ej2-vue-maps\":\"*\",\"@syncfusion/ej2-vue-calendars\":\"*\",\"@syncfusion/ej2-data\":\"*\",\"@syncfusion/ej2-vue-grids\":\"*\"}","src/main.js":"import { createApp } from 'vue'\nimport App from './App.vue'\ncreateApp(App).mount('#app')"}