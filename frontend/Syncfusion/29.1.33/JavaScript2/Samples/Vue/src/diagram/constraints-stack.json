{"public/index.html":"<!DOCTYPE html>\r\n<html lang=\"en\">\r\n\r\n<head>\r\n    <meta charset=\"utf-8\">\r\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\r\n    <meta name=\"viewport\" content=\"width=device-width,initial-scale=1.0\">\r\n    <link rel=\"icon\" href=\"<%= BASE_URL %>favicon.ico\">\r\n    <title>\r\n        <%= htmlWebpackPlugin.options.title %>\r\n    </title>\r\n    <link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\r\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\r\n</head>\r\n\r\n<body>\r\n    <noscript>\r\n        <strong>We're sorry but <%= htmlWebpackPlugin.options.title %> doesn't work properly without JavaScript enabled.\r\n        Please enable it to continue.</strong>\r\n    </noscript>\r\n    <div id=\"app\"></div>\r\n    <style>\r\n            .control-section\r\n            {\r\n                margin-top: 100px;\r\n            }\r\n    </style>\r\n    <!-- built files will be auto injected -->\r\n</body>\r\n\r\n</html>\r\n","src/App.vue":"<template>\n<div>\n<div class=\"control-section\">\n   <ejs-diagram style='display:block' ref=\"diagramObj\" id=\"diagram\" :width='width' :height='height' :rulerSettings='rulerSettings' :selectionChange='selectionChange' :selectedItems='selectedItems' :nodes='nodes' :connectors='connectors'  :getNodeDefaults='getNodeDefaults' :getConnectorDefaults='getConnectorDefaults' :contextMenuSettings=\"contextMenuSettings\" :onUserHandleMouseDown=\"onUserHandleMouseDown\"></ejs-diagram>\n</div>\n  <div class=\"col-lg-2 property-section diagram-property-tab\" style=\"float:right;margin-top:-720px; margin-right:-10px\">\n            <div class=\"property-panel-header\">\n               <p>Diagram Constraints</p>\n            </div>\n            <div class=\"row property-panel-content\" style=\"padding-top: 5px;margin-left:-40px\">\n                <div class=\"row\">\n                   <ejs-checkbox label=\"Zooming\" :checked=\"true\" :change=\"zoomingChange\"></ejs-checkbox>\n                </div>\n                <div class=\"row check-box\">\n                   <ejs-checkbox label=\"Undo/Redo\" :checked=\"true\" :change=\"undoRedoChange\"></ejs-checkbox>\n                </div>\n                <div class=\"row check-box\">\n                    <ejs-checkbox label=\"Editing\" :checked=\"true\" :change=\"editingChange\"></ejs-checkbox>\n                </div>\n                <div class=\"row check-box\">\n                   <ejs-checkbox label=\"Context Menu\" :checked=\"true\" :change=\"contextChange\"></ejs-checkbox>\n                </div>\n                <div class=\"row check-box\">\n                   <ejs-checkbox label=\"Selectable\" :checked=\"true\" :change=\"selectableChange\"></ejs-checkbox>\n                </div>\n                <div class=\"row check-box\">\n                   <ejs-checkbox label=\"Draggable\" :checked=\"true\" :change=\"draggableChange\"></ejs-checkbox>\n                </div>\n            </div>\n            </div>\n</div>\n</template>\n<style scoped>\n.property-panel-header{\n    margin-left : -40px\n}\n.diagram-property-tab .row{\n    margin-left: 2px;\n    margin-right: 0px;\n    padding-top: 8px;\n}\n.diagram-property-tab .check-box{\n    margin-top: 10px;\n}\n</style>\n<script>\nimport {\n  Diagram,\n  ConnectorConstraints,\n  DiagramConstraints,\n  AnnotationConstraints,\n  SelectorConstraints,\n  NodeConstraints,\n   Node,\n    ConnectorEditing,\n    DiagramComponent,\n    DiagramContextMenu,\n    Inject,\n    UndoRedo,\n    UserHandleModel,\n    ISelectionChangeEventArgs,\n    ToolBase,\n} from \"@syncfusion/ej2-vue-diagrams\";\nimport { CheckBoxComponent } from \"@syncfusion/ej2-vue-buttons\";\n\n\nvar nodes = [\n    {\n        id:\"textNode1\",\n        // Position of the node\n        offsetX:340,\n        offsetY: 50,\n        // Size of the node\n        width: 500,\n        height: 50,\n        //Sets type of the node\n        shape: { type: 'Text', content: 'Use Node Constraints to restrict end-users from performing certain operations on Node.' },\n        //Customizes the appearances such as text, font, fill, and stroke.\n        style: { strokeColor: 'none', fill: 'none', color: 'black', textAlign: 'Center', },\n        constraints:  NodeConstraints.None\n       \n    },\n    {\n        id:\"rectangle\",\n        offsetX:80,\n        offsetY:160,\n        height: 65,\n        shape: { type: 'Basic', shape: 'Rectangle' },\n        annotations: [{ content: 'Selection = False', }],\n        constraints: NodeConstraints.Default & ~ NodeConstraints.Select\n    },\n    {\n        id:\"ellipse\",\n        offsetX:190,\n        offsetY:160,\n        height: 80,\n        shape: { type: 'Basic', shape: 'Ellipse',cornerRadius: 10 },\n        annotations: [{ content: 'Dragging = False' }],\n        constraints:  NodeConstraints.Default & ~ NodeConstraints.Drag\n       \n    },\n    {\n        id:\"heptagon\",\n        offsetX:295,\n        offsetY:160,\n        height: 80,\n        shape: { type: 'Basic', shape: 'Heptagon' },\n        annotations: [{ content: 'Delete = False' }],\n        constraints: NodeConstraints.Default & ~ NodeConstraints.Delete\n    },\n    {\n        id:\"directData\",\n        offsetX:410,\n        offsetY:160,\n        height: 80,\n        rotateAngle:-45,\n        shape: { type: 'Flow', shape: 'DirectData' },\n        annotations: [{ content: 'Rotate = False' }],\n        constraints: NodeConstraints.Default &~ NodeConstraints.Rotate\n    },\n    {\n        id:\"Plus\",\n        offsetX:530,\n        offsetY:160,\n        height: 80,\n        shape: { type: 'Basic', shape: 'Plus' },\n        annotations: [{ content: 'TextEdit = False',constraints: AnnotationConstraints.ReadOnly }],\n    },\n    {\n        id:\"decision\",\n        offsetX:630,\n        offsetY:160,\n        height: 80,\n        shape: { type: 'Flow', shape: 'Decision' },\n        annotations: [{ content: 'Resizing = False' }],\n       constraints:NodeConstraints.Default & ~ NodeConstraints.Resize\n    },\n    {\n        id:\"textNode2\",\n        // Position of the node\n        offsetX:350,\n        offsetY: 280,\n        // Size of the node\n        width: 550,\n        height: 50,\n        //Sets type of the node\n        shape: { type: 'Text', content: 'Use Connector Constraints to restrict end-users from performing certain operations on Connector.' },\n        //Customizes the appearances such as text, font, fill, and stroke.\n        style: { strokeColor: 'none', fill: 'none', color: 'black', textAlign: 'Center', },\n        constraints:  NodeConstraints.None\n    },\n];\n\nvar connectors = [\n {\n    id: \"select\",\n    type: 'Orthogonal',\n    annotations: [{ content: 'Selection = False' , horizontalAlignment: 'Right' , verticalAlignment: 'Bottom' }],\n     constraints: ConnectorConstraints.Default & ~ ConnectorConstraints.Select,\n     style: {\n        strokeColor: '#6BA5D7',\n        fill: '#6BA5D7',\n        strokeWidth: 2\n    },\n    targetDecorator: {\n        style: {\n            fill: '#6BA5D7',\n            strokeColor: '#6BA5D7'\n        }\n    },\n    sourcePoint: {\n        x: 40,\n        y: 350\n    },\n    targetPoint: {\n        x: 120,\n        y: 430\n    }\n},\n{\n    id: \"connector2\",\n    type: 'Orthogonal',\n    annotations: [{ content: 'Dragging = True',horizontalAlignment: 'Right' , verticalAlignment: 'Bottom'  }],\n    constraints: ConnectorConstraints.Default | ~ConnectorConstraints.Drag,\n     style: {\n        strokeColor: '#6BA5D7',\n        fill: '#6BA5D7',\n        strokeWidth: 2\n    },\n    targetDecorator: {\n        style: {\n            fill: '#6BA5D7',\n            strokeColor: '#6BA5D7'\n        }\n    },\n    sourcePoint: {\n        x: 140,\n        y: 350\n    },\n    targetPoint: {\n        x: 220,\n        y: 430\n    }\n},\n{\n    id: \"delete\",\n    type: 'Orthogonal',\n    annotations: [{ content: 'Delete = False',horizontalAlignment: 'Right' , verticalAlignment: 'Bottom'  }],\n    constraints: (ConnectorConstraints.Default | ConnectorConstraints.DragSegmentThumb) &~(ConnectorConstraints.Delete | ConnectorConstraints.Drag),\n     style: {\n        strokeColor: '#6BA5D7',\n        fill: '#6BA5D7',\n        strokeWidth: 2\n    },\n    targetDecorator: {\n        style: {\n            fill: '#6BA5D7',\n            strokeColor: '#6BA5D7'\n        }\n    },\n    sourcePoint: {\n        x: 250,\n        y: 350\n    },\n    targetPoint: {\n        x: 320,\n        y: 430\n    }\n},\n{\n    id: \"endThumb\",\n    type: 'Orthogonal',\n    annotations: [{ content: 'EndThumb = False' ,horizontalAlignment: 'Right' , verticalAlignment: 'Bottom' }],\n    constraints:(SelectorConstraints.All ) &~ ( SelectorConstraints.ConnectorSourceThumb | SelectorConstraints.ConnectorTargetThumb),\n     style: {\n        strokeColor: '#6BA5D7',\n        fill: '#6BA5D7',\n        strokeWidth: 2\n    },\n    targetDecorator: {\n        style: {\n            fill: '#6BA5D7',\n            strokeColor: '#6BA5D7'\n        }\n    },\n    sourcePoint: {\n        x: 360,\n        y: 350\n    },\n    targetPoint: {\n        x: 440,\n        y: 430\n    }\n},\n{\n    id: \"draggable\",\n    type: 'Orthogonal',\n    annotations: [{ content: 'EndDraggable = False',horizontalAlignment: 'Right' , verticalAlignment: 'Bottom'  }],\n    constraints: (ConnectorConstraints.Default | ConnectorConstraints.DragSegmentThumb) &~(ConnectorConstraints.DragSourceEnd | ConnectorConstraints.DragTargetEnd),\n     style: {\n        strokeColor: '#6BA5D7',\n        fill: '#6BA5D7',\n        strokeWidth: 2\n    },\n    targetDecorator: {\n        style: {\n            fill: '#6BA5D7',\n            strokeColor: '#6BA5D7'\n        }\n    },\n    sourcePoint: {\n        x: 460,\n        y: 350\n    },\n    targetPoint: {\n        x: 540,\n        y: 430\n    }\n},\n{\n    id: \"segmentThumb\",\n    type: 'Orthogonal',\n    annotations: [{ content: 'SegmentThumb = False',horizontalAlignment: 'Right' , verticalAlignment: 'Bottom'  }],\n    constraints: ConnectorConstraints.Default &~ ConnectorConstraints.Drag,\n     style: {\n        strokeColor: '#6BA5D7',\n        fill: '#6BA5D7',\n        strokeWidth: 2\n    },\n    targetDecorator: {\n        style: {\n            fill: '#6BA5D7',\n            strokeColor: '#6BA5D7'\n        }\n    },\n    sourcePoint: {\n        x: 580,\n        y: 350\n    },\n    targetPoint: {\n        x: 660,\n        y: 430\n    }\n},\n];\n\nlet handles = [\n{\n            name: 'delete', pathData: \"M 7.04 22.13 L 92.95 22.13 L 92.95 88.8 C 92.95 91.92 91.55 94.58 88.76 96.74 C 85.97 98.91 82.55 100 78.52 100 L 21.48 100 C 17.45 100 14.03 98.91 11.24 96.74 C 8.45 94.58 7.04 91.92 7.04 88.8 z M 32.22 0 L 67.78 0 L 75.17 5.47 L 100 5.47 L 100 16.67 L 0 16.67 L 0 5.47 L 24.83 5.47 z\",\n            visible: true, offset: 0.5, side: 'Bottom', margin: { top: 0, bottom: 0, left: 0, right: 0 }\n        }\n];\n\nexport default {\n  components: {\n    'ejs-diagram': DiagramComponent,\n    'ejs-checkbox': CheckBoxComponent\n  },  \n  data: function() {\n    return {\n      width: \"80%\",\n      height: \"700px\",\n      nodes : nodes,\n      connectors : connectors,\n     //Setting default nodes values\n      getNodeDefaults : (nodes) => {\n        if(nodes.id !== \"textNode1\" && nodes.id !== \"textNode2\") {\n        nodes.width = 80;\n        nodes.style.fill = '#C7E6FF';\n        nodes.style.strokeColor = '#1587FF';\n        return nodes;\n        }\n      },\n       //Setting default connector values\n      getConnectorDefaults : (connectors) => {\n        connectors.style.strokeColor = '#6BA5D7';\n        connectors.style.fill = '#6BA5D7';\n        connectors.style.strokeWidth = 2;\n        connectors.targetDecorator.style.strokeColor = '#6BA5D7';\n        connectors.targetDecorator.style.fill = '#6BA5D7';\n        return connectors;\n      },\n      rulerSettings : {\n        showRulers : true\n      },\n      contextMenuSettings: { show: true },\n      selectedItems : {\n        constraints: SelectorConstraints.UserHandle,\n        userHandles : handles\n      },\n       selectionChange: (args) => {\n    var diagram = this.$refs.diagramObj.ej2Instances;\n\n    // When the selection state is 'Changing'\n    if (args.state === 'Changing') {\n        // Handle selection constraints based on the type of change\n        if (args.type === 'Addition') {\n            // If the newly selected item is 'endThumb', adjust constraints\n            if (args.newValue.length > 0 && args.newValue[0].id === 'endThumb') {\n                diagram.selectedItems.constraints =\n                    SelectorConstraints.All &\n                    ~(SelectorConstraints.ConnectorSourceThumb |\n                        SelectorConstraints.ConnectorTargetThumb);\n            } else {\n                // Otherwise, set constraints to allow all actions\n                diagram.selectedItems.constraints = SelectorConstraints.All;\n            }\n        } else {\n            // For other types of changes, set constraints to allow all actions\n            diagram.selectedItems.constraints = SelectorConstraints.All;\n        }\n    }\n\n    // When the selection state is 'Changed'\n    if (args.state === 'Changed') {\n        // Adjust constraints based on the type of selected item\n        if (args.newValue.length > 0 && args.newValue[0] instanceof Node) {\n            // If a node is selected, apply constraints with user handles\n            diagram.selectedItems = {\n                constraints: SelectorConstraints.All | SelectorConstraints.UserHandle,\n                userHandles: handles, // Assuming handles is defined elsewhere\n            };\n        } else {\n            // If not a node, adjust constraints accordingly\n            if (args.newValue && args.newValue.length > 0 && args.newValue[0].id !== 'endThumb') {\n                // If not 'endThumb', set constraints without user handles\n                diagram.selectedItems = {\n                    constraints: SelectorConstraints.All & ~SelectorConstraints.UserHandle,\n                };\n            } else {\n                // If 'endThumb' or no selection, set constraints appropriately\n                diagram.selectedItems = {\n                    constraints: SelectorConstraints.All &\n                        ~(SelectorConstraints.UserHandle |\n                            SelectorConstraints.ConnectorSourceThumb |\n                            SelectorConstraints.ConnectorTargetThumb),\n                };\n            }\n        }\n    }\n},\n     //Function used to enable/disable zooming of diagram\n      zoomingChange :(args)=>{\n        let diagram = this.$refs.diagramObj.ej2Instances;\n         diagram.constraints = diagram.constraints ^ DiagramConstraints.Zoom;\n      },\n      //Function used to enable/disable undoRedo of diagram\n      undoRedoChange :(args)=>{\n        let diagram = this.$refs.diagramObj.ej2Instances;\n        diagram.constraints = diagram.constraints ^ DiagramConstraints.UndoRedo ;\n        diagram.dataBind();\n      },\n      //Function used to enable/disable editing of diagram\n      editingChange : (args)=>{\n        let diagram = this.$refs.diagramObj.ej2Instances;\n        for (var i= 0; i < diagram.nodes.length; i++) {\n            var node = diagram.nodes[i];\n            if (node.annotations.length > 0 && node.annotations[0].content) {\n                if (args.checked) {\n                if (node.id !== 'Plus') {\n                    node.annotations[0].constraints =\n                    node.annotations[0].constraints ^\n                    AnnotationConstraints.ReadOnly;\n                }\n                } else {\n                node.annotations[0].constraints =\n                    node.annotations[0].constraints | AnnotationConstraints.ReadOnly;\n                }\n            }\n        }\n        for (var x = 0; x < diagram.connectors.length; x++) {\n            var connector = diagram.connectors[x];\n            if (connector.annotations.length > 0 && connector.annotations[0].content) {\n                if (args.checked) {\n                if (connector.id === 'select') {\n                    connector.constraints =\n                    connector.constraints & ~(ConnectorConstraints.Select);\n                } else {\n                    connector.annotations[0].constraints =\n                    connector.annotations[0].constraints ^\n                    AnnotationConstraints.ReadOnly;\n                }\n                } else {\n                connector.annotations[0].constraints =\n                    connector.annotations[0].constraints ^\n                    AnnotationConstraints.ReadOnly;\n                }\n            }\n        }\n        diagram.dataBind();\n      },\n      //Function used to enable/disable context menu of diagram\n      contextChange : (args)=>{\n        let diagram = this.$refs.diagramObj.ej2Instances;\n          if (args.checked) {\n            diagram.contextMenuSettings.show = true;\n            } \n        else {\n            diagram.contextMenuSettings.show = false;\n        }\n            diagram.dataBind();\n      },\n      //Function used to delete object using user handle\n      onUserHandleMouseDown : (args)=>{\n        let diagram = this.$refs.diagramObj.ej2Instances;\n        if (args.element.name === 'delete') {\n            diagram.remove();\n        }\n     },\n     //Function used to enable/disable selection of diagram\n      selectableChange :(args)=>{\n      let diagram = this.$refs.diagramObj.ej2Instances;\n        for (let i = 0; i < diagram.nodes.length; i++) {\n            let node = diagram.nodes[i];\n                if (args.checked) {\n                    node.constraints  = node.constraints | NodeConstraints.Select;\n                } \n                else \n                {\n                    node.constraints = node.constraints &~  NodeConstraints.Select;\n                }\n            diagram.dataBind();\n        }\n        for (let j = 0; j < diagram.connectors.length; j++) {\n            let connector = diagram.connectors[j];\n                if (args.checked) {\n                    if(connector.id ===\"select\"){\n                        connector.constraints= connector.constraints^ ConnectorConstraints.Select;\n                    }\n                    else{\n                        connector.constraints  = connector.constraints | ConnectorConstraints.Select;\n                    }\n                } \n                else\n                {\n                    if(connector.id ===\"endThumb\"){\n                        connector.constraints= connector.constraints^ ConnectorConstraints.Select;\n                    }\n                    else\n                    {\n                    connector.constraints = connector.constraints &~ ConnectorConstraints.Select;\n                    }\n                    diagram.dataBind();\n               }\n        }\n    },\n    //Function used to enable/disable draggable of diagram\n    draggableChange : (args)=>{\n    let diagram = this.$refs.diagramObj.ej2Instances;\n        for (let i = 0; i < diagram.nodes.length; i++) {\n    let nodes = diagram.nodes[i];\n    if (args.checked) {\n         if(nodes.id ===\"ellipse\"){\n            nodes.constraints = NodeConstraints.Default & ~ NodeConstraints.Drag;\n        }\n        else{\n            nodes.constraints = nodes.constraints | NodeConstraints.Drag;\n        }\n    } \n    else {\n          nodes.constraints = nodes.constraints &~ NodeConstraints.Drag;\n    }\n    diagram.dataBind();\n}\nfor (let j  = 0; j < diagram.connectors.length; j++) {\n  let connectors = diagram.connectors[j];\n    if (args.checked) {\n        connectors.constraints =  connectors.constraints | ConnectorConstraints.Drag;   \n    } else \n    {\n        connectors.constraints = connectors.constraints  &~ ConnectorConstraints.Drag;   \n    }\n    diagram.dataBind();\n}\n    }\n  }\n  },\n  mounted: function() {\n       let diagram = this.$refs.diagramObj.ej2Instances;\n       diagram.fitToPage();\n    },\n}\n\n</script>","dependencies":"{\"vue\":\"3.3.4\",\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-vue-base\":\"*\",\"@syncfusion/ej2-diagrams\":\"*\",\"@syncfusion/ej2-vue-diagrams\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-vue-buttons\":\"*\",\"@syncfusion/ej2-vue-charts\":\"*\",\"@syncfusion/ej2-vue-maps\":\"*\"}","src/main.js":"import { createApp } from 'vue'\nimport App from './App.vue'\ncreateApp(App).mount('#app')"}