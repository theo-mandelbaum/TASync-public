{"public/index.html":"<!DOCTYPE html>\r\n<html lang=\"en\">\r\n\r\n<head>\r\n    <meta charset=\"utf-8\">\r\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\r\n    <meta name=\"viewport\" content=\"width=device-width,initial-scale=1.0\">\r\n    <link rel=\"icon\" href=\"<%= BASE_URL %>favicon.ico\">\r\n    <title>\r\n        <%= htmlWebpackPlugin.options.title %>\r\n    </title>\r\n    <link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\r\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\r\n</head>\r\n\r\n<body>\r\n    <noscript>\r\n        <strong>We're sorry but <%= htmlWebpackPlugin.options.title %> doesn't work properly without JavaScript enabled.\r\n        Please enable it to continue.</strong>\r\n    </noscript>\r\n    <div id=\"app\"></div>\r\n    <style>\r\n            .control-section\r\n            {\r\n                margin-top: 100px;\r\n            }\r\n    </style>\r\n    <!-- built files will be auto injected -->\r\n</body>\r\n\r\n</html>\r\n","src/App.vue":"<template>\n<div>\n<div class=\"control-section\">\n    <ejs-diagram id=\"diagram\" ref=\"diagramObj\" :width='width' :height='height' :nodes='nodes' :tool='tool' :snapSettings='snapSettings' :connectors='connectors' :getConnectorDefaults='getConnectorDefaults'\n        ></ejs-diagram>\n</div>\n</div>\n</template>\n\n<script>\nimport {\n  DiagramComponent,\n  PortVisibility,\n   DiagramTools,\n  SnapConstraints,\n} from \"@syncfusion/ej2-vue-diagrams\";\n\n//Function to Create nodes by the parameters\nfunction createNode(id, width, height, offsetX, offsetY, \n  content, fill, bold) {\n  return {\n      id: id,\n      width: width,\n      height: height,\n      offsetX: offsetX,\n      offsetY: offsetY,\n      shape: { type: \"Text\", content: content },\n      style: { fill: fill, bold: bold }\n  };\n}\n//Function to Create connectors by the parameters\nfunction createConnector(id, sourceX, sourceY, targetX, targetY) {\n  return {\n      id: id,\n      type: 'Straight',\n      sourcePoint: { x: sourceX, y: sourceY },\n      targetPoint: { x: targetX, y: targetY },\n      targetDecorator: { shape: 'None' },\n      style: { strokeColor: '#A5A6A7' }\n  };\n}\n// Array of nodes with their respective properties\nlet nodes = [\n // Call to createNode method to generate nodes\n  createNode('employee', 100, 60, 100, 100, 'Employee', 'transparent', true),\n  createNode('teamLead', 100, 60, 350, 100, 'Team Lead', 'transparent', true),\n  createNode('dashboard', 100, 60, 600, 100, 'Dashboard', 'transparent', true),\n  createNode('manager', 100, 60, 850, 100, 'Manager', 'transparent', true),\n  createNode('leaveRequest', 100, 60, 225, 250, 'Leave Request', 'transparent', false),\n  createNode('leaveApproval', 100, 60, 225, 484, 'Leave Approval', 'transparent', false),\n  createNode('checkEmplyeeAvail', 175, 30, 470, 345, 'Check Employee availability and task status', 'transparent', false),\n  createNode('forwardLeaveMssg', 150, 30, 600, 420, 'Forward Leave Request', 'transparent', false),\n  createNode('noObjection', 150, 30, 600, 460, 'No Objection', 'transparent', false),\n  // Custom node for special operation\n  {\n      id:'employeeNode',shape:{type:'Basic',shape:'Rectangle'},width:10,height:250,offsetX:100,offsetY:350,\n      style:{fill:'orange',strokeColor:'orange'},\n      ports:[{id:'p1',offset:{x:1,y:0.05},visibility:PortVisibility.Hidden},\n              {id:'p2',offset:{x:1,y:0.97},visibility:PortVisibility.Hidden},]\n  },\n  {\n      id:'teamLeadNode',shape:{type:'Basic',shape:'Rectangle'},width:10,height:190,offsetX:350,offsetY:320,\n      style:{fill:'orange',strokeColor:'orange'},\n      ports:[{id:'p1',offset:{x:0,y:0.07},visibility:PortVisibility.Hidden},\n      {id:'p2',offset:{x:1,y:0.92},visibility:PortVisibility.Hidden},\n      {id:'p3',offset:{x:1,y:0.5},visibility:PortVisibility.Hidden},]\n  },\n  {\n      id:'dashboardNode',shape:{type:'Basic',shape:'Rectangle'},width:10,height:25,offsetX:600,offsetY:320,\n      style:{fill:'orange',strokeColor:'orange'},\n      ports:[{id:'p1',offset:{x:0,y:0.5},visibility:PortVisibility.Hidden}]\n  },\n  {\n      id:'managerNode',shape:{type:'Basic',shape:'Rectangle'},width:10,height:50,offsetX:850,offsetY:420,\n      style:{fill:'orange',strokeColor:'orange'},\n      ports:[{id:'p1',offset:{x:0,y:0.1},visibility:PortVisibility.Hidden},\n      {id:'p2',offset:{x:0,y:0.9},visibility:PortVisibility.Hidden},]\n  },\n  ];\n// Array of connectors between nodes\nlet connectors = [\n // Call to createConnector method to generate straight connectors\n  createConnector('employeeCon1', 100, 120, 100, 225),\n  createConnector('employeeCon2', 100, 475, 100, 600),\n  createConnector('teamLeanCon1', 350, 120, 350, 225),\n  createConnector('teamLeanCon2', 350, 415, 350, 600),\n  createConnector('dashboardCon1', 600, 120, 600, 307),\n  createConnector('dashboardCon2', 600, 333, 600, 600),\n  createConnector('managerCon1', 850, 120, 850, 395),\n  createConnector('managerCon2', 850, 445, 850, 600),\n  // Custom connectors between specific nodes\n  {\n      id:'empToTeamLead',type:'Straight',sourceID:'employeeNode',sourcePortID:'p1',\n      targetID:'teamLeadNode',targetPortID:'p1'\n  },\n  {\n      id:'teamLeadToEmp',type:'Straight',sourcePoint:{x:350,y:465},style:{strokeDashArray:'4 4'},\n      targetID:'employeeNode',targetPortID:'p2'\n  },\n  {\n      id:'teamLeadToDash',type:'Straight',sourceID:'teamLeadNode',sourcePortID:'p3',\n      targetID:'dashboardNode',targetPortID:'p1'\n  },\n  {\n      id:'teamLeadToManager',type:'Straight',sourceID:'teamLeadNode',sourcePortID:'p2',\n      targetID:'managerNode',targetPortID:'p1'\n  },\n  {\n      id:'managerToTeamLead',type:'Straight',sourceID:'managerNode',sourcePortID:'p2',\n      targetPoint:{x:350,y:440},style:{strokeDashArray:'4 4'}\n  },\n  ];\n\nexport default {\n  components: {\n    'ejs-diagram': DiagramComponent\n  },\n  data: function() {\n    return {\n      width: \"100%\",\n      height: \"800px\",\n      nodes: nodes,\n      connectors: connectors,\n      tool: DiagramTools.ZoomPan,\n      snapSettings: {\n                constraints: SnapConstraints.None\n            },\n      getNodeDefaults: (node) => {\n        node.style = { fill: '#26A0DA', strokeColor: 'white' };\n        return node;\n      },\n      //Sets the default values of a connector\n      getConnectorDefaults: (connector) => {\n        connector.targetDecorator.style = {fill:'#489ECC',strokeColor:'#489ECC'};\n        if(connector.targetDecorator.shape === 'Arrow'){\n        connector.style = {strokeColor:'#489ECC',strokeWidth:2};\n        }\n        return connector;\n      },\n    }\n  },\n  mounted: function() {\n       let diagram = this.$refs.diagramObj.ej2Instances;\n        diagram.fitToPage();\n  }\n}\n\n</script>","dependencies":"{\"vue\":\"3.3.4\",\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-vue-base\":\"*\",\"@syncfusion/ej2-diagrams\":\"*\",\"@syncfusion/ej2-vue-diagrams\":\"*\",\"@syncfusion/ej2-vue-charts\":\"*\",\"@syncfusion/ej2-vue-maps\":\"*\",\"@syncfusion/ej2-vue-calendars\":\"*\",\"@syncfusion/ej2-data\":\"*\",\"@syncfusion/ej2-vue-grids\":\"*\"}","src/main.js":"import { createApp } from 'vue'\nimport App from './App.vue'\ncreateApp(App).mount('#app')"}