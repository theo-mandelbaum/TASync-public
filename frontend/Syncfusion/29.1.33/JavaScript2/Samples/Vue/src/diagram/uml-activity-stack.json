{"public/index.html":"<!DOCTYPE html>\r\n<html lang=\"en\">\r\n\r\n<head>\r\n    <meta charset=\"utf-8\">\r\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\r\n    <meta name=\"viewport\" content=\"width=device-width,initial-scale=1.0\">\r\n    <link rel=\"icon\" href=\"<%= BASE_URL %>favicon.ico\">\r\n    <title>\r\n        <%= htmlWebpackPlugin.options.title %>\r\n    </title>\r\n    <link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\r\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\r\n</head>\r\n\r\n<body>\r\n    <noscript>\r\n        <strong>We're sorry but <%= htmlWebpackPlugin.options.title %> doesn't work properly without JavaScript enabled.\r\n        Please enable it to continue.</strong>\r\n    </noscript>\r\n    <div id=\"app\"></div>\r\n    <style>\r\n            .control-section\r\n            {\r\n                margin-top: 100px;\r\n            }\r\n    </style>\r\n    <!-- built files will be auto injected -->\r\n</body>\r\n\r\n</html>\r\n","src/App.vue":"<!-- Sample for UML Activity -->\n\n<!-- Template for UML Activity -->\n<template>\n  <div class=\"control-section\">\n    <!-- Container for UML Activity Diagram -->\n    <div id=\"umlActivityDiagram\" style=\"width: 100%; height: 521px\">\n\n      <!-- Palette Bar for mobile view -->\n      <div class=\"sb-mobile-palette-bar\">\n        <div id=\"palette-icon\" ref=\"palette_icon\" role=\"button\" class=\"e-ddb-icons1 e-toggle-palette\"></div>\n      </div>\n\n      <!-- Symbol Palette Component -->\n      <div id=\"palette-space\" ref=\"palette_space\" class=\"sb-mobile-palette\">\n        <ejs-symbolpalette id=\"symbolpalette\" :expandMode='expandMode' :palettes='palettes' :width='palettewidth'\n          :height='paletteheight' :getNodeDefaults='palettegetNodeDefaults' :getSymbolInfo='getSymbolInfo'\n          :symbolMargin='symbolMargin' :symbolHeight='symbolHeight' :symbolWidth='symbolWidth'></ejs-symbolpalette>\n      </div>\n\n      <!-- Diagram Component -->\n      <div id=\"diagram-space\" ref=\"diagram_space\" class=\"sb-mobile-diagram\">\n        <ejs-diagram style='display:block' id=\"diagram\" ref=\"diagramObject\" :width='width' :height='height' :nodes='nodes'\n          :connectors='connectors' :getNodeDefaults='getNodeDefaults' :getConnectorDefaults='getConnectorDefaults'\n          :snapSettings='snapSettings' :created='created'></ejs-diagram>\n      </div>\n    </div>\n\n    <!-- Descriptions for the Action and the Diagram -->\n  </div>\n</template>\n\n<!-- Scoped CSS for the template -->\n<style scoped>\n/**To align palette */\n#umlActivityDiagram .sb-mobile-palette {\n  width: 210px;\n  height: 100%;\n  float: left;\n}\n\n#umlActivityDiagram .sb-mobile-palette-bar {\n  display: none;\n}\n\n#umlActivityDiagram .sb-mobile-diagram {\n  width: calc(100% - 212px);\n  height: 100%;\n  float: left;\n  border: 1px solid rgba(0, 0, 0, 0.12);\n  border-left: none;\n}\n\n@media (max-width: 550px) {\n\n  #umlActivityDiagram .sb-mobile-palette {\n    z-index: 19;\n    position: absolute;\n    display: none;\n    transition: transform 300ms linear, visibility 0s linear 300ms;\n    width: 39%;\n    height: 100%;\n  }\n\n  #umlActivityDiagram .sb-mobile-palette-bar {\n    display: block;\n    width: 100%;\n    background: #fafafa;\n    padding: 10px 10px;\n    border: 0.5px solid #e0e0e0;\n    min-height: 40px;\n  }\n\n  #umlActivityDiagram .sb-mobile-diagram {\n    width: 100%;\n    height: 100%;\n    float: left;\n    left: 0px;\n  }\n\n  #palette-icon {\n    font-size: 20px;\n  }\n}\n\n#umlActivityDiagram .sb-mobile-palette-open {\n  position: absolute;\n  display: block;\n  right: 15px;\n}\n\n@font-face {\n  font-family: 'e-ddb-icons1';\n  src: url(data:application/x-font-ttf;charset=utf-8;base64,AAEAAAAKAIAAAwAgT1MvMj1tSfIAAAEoAAAAVmNtYXDnEOdVAAABiAAAADZnbHlmdC1P4gAAAcgAAAAwaGVhZBJhohMAAADQAAAANmhoZWEIVQQDAAAArAAAACRobXR4CAAAAAAAAYAAAAAIbG9jYQAYAAAAAAHAAAAABm1heHABDgAUAAABCAAAACBuYW1lm+wy9gAAAfgAAAK1cG9zdLnsYngAAASwAAAAMAABAAAEAAAAAFwEAAAAAAAD+AABAAAAAAAAAAAAAAAAAAAAAgABAAAAAQAAgNcenF8PPPUACwQAAAAAANelrs4AAAAA16WuzgAAAAAD+AN6AAAACAACAAAAAAAAAAEAAAACAAgAAgAAAAAAAgAAAAoACgAAAP8AAAAAAAAAAQQAAZAABQAAAokCzAAAAI8CiQLMAAAB6wAyAQgAAAIABQMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUGZFZABA5wDnAAQAAAAAXAQAAAAAAAABAAAAAAAABAAAAAQAAAAAAAACAAAAAwAAABQAAwABAAAAFAAEACIAAAAEAAQAAQAA5wD//wAA5wD//wAAAAEABAAAAAEAAAAAAAAAGAAAAAIAAAAAA/gDegACAAcAACUhCQEhATUhAQQC9P6G/YoBMQFF/YqGAjf+hgH0QwAAAAAAEgDeAAEAAAAAAAAAAQAAAAEAAAAAAAEAEwABAAEAAAAAAAIABwAUAAEAAAAAAAMAEwAbAAEAAAAAAAQAEwAuAAEAAAAAAAUACwBBAAEAAAAAAAYAEwBMAAEAAAAAAAoALABfAAEAAAAAAAsAEgCLAAMAAQQJAAAAAgCdAAMAAQQJAAEAJgCfAAMAAQQJAAIADgDFAAMAAQQJAAMAJgDTAAMAAQQJAAQAJgD5AAMAAQQJAAUAFgEfAAMAAQQJAAYAJgE1AAMAAQQJAAoAWAFbAAMAAQQJAAsAJAGzIERpYWdyYW1fU2hhcGVzX0ZPTlRSZWd1bGFyRGlhZ3JhbV9TaGFwZXNfRk9OVERpYWdyYW1fU2hhcGVzX0ZPTlRWZXJzaW9uIDEuMERpYWdyYW1fU2hhcGVzX0ZPTlRGb250IGdlbmVyYXRlZCB1c2luZyBTeW5jZnVzaW9uIE1ldHJvIFN0dWRpb3d3dy5zeW5jZnVzaW9uLmNvbQAgAEQAaQBhAGcAcgBhAG0AXwBTAGgAYQBwAGUAcwBfAEYATwBOAFQAUgBlAGcAdQBsAGEAcgBEAGkAYQBnAHIAYQBtAF8AUwBoAGEAcABlAHMAXwBGAE8ATgBUAEQAaQBhAGcAcgBhAG0AXwBTAGgAYQBwAGUAcwBfAEYATwBOAFQAVgBlAHIAcwBpAG8AbgAgADEALgAwAEQAaQBhAGcAcgBhAG0AXwBTAGgAYQBwAGUAcwBfAEYATwBOAFQARgBvAG4AdAAgAGcAZQBuAGUAcgBhAHQAZQBkACAAdQBzAGkAbgBnACAAUwB5AG4AYwBmAHUAcwBpAG8AbgAgAE0AZQB0AHIAbwAgAFMAdAB1AGQAaQBvAHcAdwB3AC4AcwB5AG4AYwBmAHUAcwBpAG8AbgAuAGMAbwBtAAAAAAIAAAAAAAAACgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgECAQMABlNoYXBlcwAA) format('truetype');\n  font-weight: normal;\n  font-style: normal;\n}\n\n.e-ddb-icons1 {\n  font-family: 'e-ddb-icons1';\n  font-size: 16px;\n  font-style: normal;\n  font-weight: normal;\n  font-variant: normal;\n  text-transform: none;\n  line-height: 1;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n.e-toggle-palette::before {\n  content: \"\\\\e700\"\n}\n</style>\n\n<script>\n\n//Importing needed dependencies for diagram\nimport {\n  Diagram,\n  PortVisibility,\n  SnapConstraints,\n  DiagramComponent,\n  SymbolPaletteComponent,\n} from \"@syncfusion/ej2-vue-diagrams\";\n\nlet diagram;\nlet palette;\nlet isMobile;\nlet paletteSpaceInstance;\nlet paletteIconInstance;\nlet diagramInstance;\nlet diagramSpaceInstance;\n\n\n\n// Function to create a node with default settings\nfunction getDefaultNode(id, height, width, offsetX, offsetY, type, shapeType, annotations = []) {\n  return {\n    id: id,\n    height: height,\n    width: width,\n    offsetX: offsetX,\n    offsetY: offsetY,\n    shape: { type: type, shape: shapeType },\n    annotations\n  }\n};\n\n//Initializes the nodes for the diagram.\nlet nodes = [\n  getDefaultNode(\"Start\", 40, 40, 300, 20, \"UmlActivity\", \"InitialNode\", []),\n  getDefaultNode(\"ReceiveCall\", 40, 105, 300, 100, \"UmlActivity\", \"Action\", [{ content: \"Receive Customer Call\" }]),\n  getDefaultNode(\"ForkNode\", 10, 70, 300, 170, \"UmlActivity\", \"ForkNode\"),\n  getDefaultNode(\"Determine\", 40, 105, 190, 250, \"UmlActivity\", \"Action\", [{ content: \"Determine Type of Call\" }]),\n  getDefaultNode(\"Log\", 40, 105, 410, 250, \"UmlActivity\", \"Action\", [{ content: \"Customer Logging a Call\" }]),\n  getDefaultNode(\"Decision\", 50, 50, 190, 350, \"UmlActivity\", \"Decision\"),\n  getDefaultNode(\"transfer_sales\", 40, 105, 100, 450, \"UmlActivity\", \"Action\", [{ content: \"Transfer the Call to Sales\" }]),\n  getDefaultNode(\"transfer_desk\", 40, 105, 280, 450, \"UmlActivity\", \"Action\", [{ content: \"Transfer the Call to Help Desk\" }]),\n  getDefaultNode(\"MergeNode\", 50, 50, 190, 540, \"UmlActivity\", \"MergeNode\"),\n  getDefaultNode(\"JoinNode\", 10, 70, 300, 630, \"UmlActivity\", \"JoinNode\"),\n  getDefaultNode(\"CloseCall\", 40, 105, 300, 710, \"UmlActivity\", \"Action\", [{ content: \"Close Call\", margin: { left: 25, right: 25 } }]),\n  getDefaultNode(\"FinalNode\", 40, 40, 300, 800, \"UmlActivity\", \"FinalNode\")\n];\n\n// Function to create a Connector with default settings\nfunction getDefaultConnector(id, sourceID, targetID, additionalProps = {}) {\n  return {\n    id: id,\n    sourceID: sourceID,\n    targetID: targetID,\n    ...additionalProps\n  }\n};\n\n//Initializes the connector for the diagram.\nlet connectors = [\n  getDefaultConnector(\"connector1\", \"Start\", \"ReceiveCall\"),\n  getDefaultConnector(\"connector2\", \"ReceiveCall\", \"ForkNode\"),\n  getDefaultConnector(\"connector3\", \"ForkNode\", \"Determine\", {\n    sourcePortID: \"port1\",\n    targetPortID: \"portTop\",\n    segments: [\n      { type: \"Orthogonal\", length: 20, direction: \"Bottom\" },\n      { type: \"Orthogonal\", length: 50, direction: \"Left\" }\n    ]\n  }),\n  getDefaultConnector(\"connector4\", \"ForkNode\", \"Log\", {\n    sourcePortID: \"port2\",\n    targetPortID: \"portTop\",\n    segments: [\n      { type: \"Orthogonal\", length: 20, direction: \"Bottom\" },\n      { type: \"Orthogonal\", length: 50, direction: \"Right\" }\n    ]\n  }),\n  getDefaultConnector(\"connector5\", \"Determine\", \"Decision\"),\n  getDefaultConnector(\"connector6\", \"Decision\", \"transfer_sales\", {\n    sourcePortID: \"portLeft\",\n    targetPortID: \"portTop\",\n    shape: { type: \"UmlActivity\", flow: \"Association\" },\n    annotations: [{\n      id: \"connector6Label\", content: \"type=New Customer\", offset: 0.715,\n      style: { fill: \"white\", color: \"black\", textWrapping: 'NoWrap' }\n    }]\n  }),\n  getDefaultConnector(\"connector7\", \"Decision\", \"transfer_desk\", {\n    sourcePortID: \"portRight\",\n    targetPortID: \"portTop\",\n    shape: { type: \"UmlActivity\", flow: \"Association\" },\n    annotations: [{\n      id: \"connector7Label\", content: \"type=Existing Customer\", offset: 0.75,\n      style: { fill: \"white\", color: \"black\", textWrapping: 'NoWrap' }\n    }]\n  }),\n  getDefaultConnector(\"connector8\", \"transfer_sales\", \"MergeNode\", {\n    sourcePortID: \"portBottom\",\n    targetPortID: \"portLeft\",\n    segments: [{ type: \"Orthogonal\", length: 50, direction: \"Bottom\" }]\n  }),\n  getDefaultConnector(\"connector9\", \"transfer_desk\", \"MergeNode\", {\n    sourcePortID: \"portBottom\",\n    targetPortID: \"portRight\",\n    segments: [{ type: \"Orthogonal\", length: 50, direction: \"Bottom\" }]\n  }),\n  getDefaultConnector(\"connector10\", \"MergeNode\", \"JoinNode\", {\n    sourcePortID: \"portBottom\",\n    targetPortID: \"port3\"\n  }),\n  getDefaultConnector(\"connector11\", \"Log\", \"JoinNode\", {\n    sourcePortID: \"portBottom\",\n    targetPortID: \"port4\",\n    segments: [\n      { type: \"Orthogonal\", length: 265, direction: \"Bottom\" },\n      { type: \"Orthogonal\", length: 50, direction: \"Left\" }\n    ]\n  }),\n  getDefaultConnector(\"connector12\", \"JoinNode\", \"CloseCall\"),\n  getDefaultConnector(\"connector13\", \"CloseCall\", \"FinalNode\")\n];\n\n// Initializes the uml activity symbols to the UML Shapes in the symbol palette\nlet umlActivityShapes = [\n  { id: \"Action\", shape: { type: \"UmlActivity\", shape: \"Action\" } },\n  { id: \"Decision\", shape: { type: \"UmlActivity\", shape: \"Decision\" } },\n  { id: \"MergeNode\", shape: { type: \"UmlActivity\", shape: \"MergeNode\" } },\n  { id: \"InitialNode\", shape: { type: \"UmlActivity\", shape: \"InitialNode\" } },\n  { id: \"FinalNode\", shape: { type: \"UmlActivity\", shape: \"FinalNode\" } },\n  { id: \"ForkNode\", shape: { type: \"UmlActivity\", shape: \"ForkNode\" } },\n  { id: \"JoinNode\", shape: { type: \"UmlActivity\", shape: \"JoinNode\" } },\n  { id: \"TimeEvent\", shape: { type: \"UmlActivity\", shape: \"TimeEvent\" } },\n  { id: \"AcceptingEvent\", shape: { type: \"UmlActivity\", shape: \"AcceptingEvent\" } },\n  { id: \"SendSignal\", shape: { type: \"UmlActivity\", shape: \"SendSignal\" } },\n  { id: \"ReceiveSignal\", shape: { type: \"UmlActivity\", shape: \"ReceiveSignal\" } },\n  { id: \"StructuredNode\", shape: { type: \"UmlActivity\", shape: \"StructuredNode\" } },\n  { id: \"Note\", shape: { type: \"UmlActivity\", shape: \"Note\" } }\n];\n\n// Exporting the default object for Vue component\nexport default {\n  components: {\n    'ejs-diagram': DiagramComponent,\n    'ejs-symbolpalette': SymbolPaletteComponent\n  },\n  data: function () {\n    return {\n      //Initializes diagram control\n      width: \"100%\",\n      height: \"100%\",\n      nodes: nodes,\n      connectors: connectors,\n      snapSettings: {\n        constraints: SnapConstraints.None\n      },\n      created: (args) => {\n        addEvents();\n      },\n      //Sets the default values of a node\n      getNodeDefaults: (node) => {\n        let style = node.style;\n        node.ports = getNodePorts(node);\n        if (node.ports) {\n          for (var i = 0; i < node.ports.length; i++) {\n            node.ports[i].visibility = PortVisibility.Hidden;\n          }\n        }\n        if (node.id === 'Start' || node.id === 'ForkNode' || node.id === 'JoinNode' || node.id === 'FinalNode') {\n          style.fill = '#444';\n        }\n        style.strokeColor = '#444';\n        return node;\n      },\n      // sets the default values of a Connector.\n      getConnectorDefaults: (connector) => {\n        if (connector && connector.id && connector.id.indexOf('connector') !== -1) {\n          connector.type = 'Orthogonal'; connector.cornerRadius = 10;\n          connector.targetDecorator = { shape: 'OpenArrow', style: { strokeColor: '#444', fill: '#444' } };\n        }\n      },\n      expandMode: \"Multiple\",\n\n      //Initialize a default shape in symbol palettes\n      palettes: [\n        {\n          id: \"umlActivity\",\n          expanded: true,\n          symbols: umlActivityShapes,\n          title: \"UML Shapes\"\n        },\n        {\n          id: \"Connector\",\n          expanded: true,\n          symbols: getConnectors(),\n          title: \"Connectors\"\n        }\n      ],\n      palettewidth: \"100%\",\n      paletteheight: \"100%\",\n      symbolHeight: 60,\n      symbolWidth: 60,\n      palettegetNodeDefaults: (symbol) => {\n        if (symbol.id === 'JoinNode') {\n          symbol.width = 20; symbol.height = 50;\n        } else if (symbol.id === 'ForkNode') {\n          symbol.width = 50; symbol.height = 20;\n        } else if (symbol.id === 'Decision' || symbol.id === 'MergeNode') {\n          symbol.width = 50; symbol.height = 40;\n        } else {\n          symbol.width = 50; symbol.height = 50;\n        }\n        if (symbol.id === 'InitialNode' || symbol.id === 'FinalNode' || symbol.id === 'JoinNode' || symbol.id === 'ForkNode') {\n          symbol.style.fill = '#757575';\n        }\n        symbol.style.strokeColor = '#757575';\n      },\n      symbolMargin: { left: 15, right: 15, top: 15, bottom: 15 },\n      getSymbolInfo: (symbol) => {\n        return { fit: true };\n      }\n    };\n  },\n  mounted: function () {\n    paletteIconInstance = this.$refs.palette_icon;\n    paletteSpaceInstance = this.$refs.palette_space;\n    diagramSpaceInstance = this.$refs.diagram_space;\n    diagramInstance = this.$refs.diagramObject.ej2Instances;\n    let rect = diagramSpaceInstance.getBoundingClientRect();\n    let panX = (rect.width - rect.x) / 2;\n    diagramInstance.pan(panX, 0);\n  }\n}\n\n// Function to define ports for a node based on its ID\nfunction getNodePorts(node) {\n  if (node.id === \"ForkNode\" || node.id === \"JoinNode\") {\n    let node2Ports = [\n      { id: \"port1\", offset: { x: 0.2, y: 1 } },\n      { id: \"port2\", offset: { x: 0.8, y: 1 } },\n      { id: \"port3\", offset: { x: 0.2, y: 0 } },\n      { id: \"port4\", offset: { x: 0.8, y: 0 } }\n    ];\n    return node2Ports;\n  } else {\n    let ports = [\n      { id: \"portLeft\", offset: { x: 0, y: 0.5 } },\n      { id: \"portRight\", offset: { x: 1, y: 0.5 } },\n      { id: \"portBottom\", offset: { x: 0.5, y: 1 } },\n      { id: \"portTop\", offset: { x: 0.5, y: 0 } }\n    ];\n    return ports;\n  }\n}\n\n\n// Function to generate connector style for the symbol palette\nfunction getConnectorStyle(dashArrayed) {\n  let style = {};\n  if (dashArrayed) {\n    style = { strokeWidth: 2, strokeColor: \"#757575\", strokeDashArray: \"4 4\" };\n  } else {\n    style = { strokeWidth: 2, strokeColor: \"#757575\" };\n  }\n  return style;\n}\n\n// Function to generate connector symbols for the symbol palette\nfunction getConnectors() {\n  let sourcePoint = { x: 0, y: 0 };\n  let targetPoint = { x: 40, y: 40 };\n  let targetDecorator = {\n    shape: \"Arrow\",\n    style: { fill: \"#757575\", strokeColor: \"#757575\" }\n  };\n\n  // Define connector symbols with different styles and types\n  let connectorSymbols = [\n    {\n      id: \"Link2\", sourcePoint: sourcePoint, targetPoint: targetPoint,\n      type: \"Orthogonal\", style: getConnectorStyle(true), targetDecorator: targetDecorator\n    },\n    {\n      id: \"Link1\", sourcePoint: sourcePoint, targetPoint: targetPoint,\n      type: \"Orthogonal\", style: getConnectorStyle(), targetDecorator: targetDecorator\n    },\n    {\n      id: \"Link3\", sourcePoint: sourcePoint, targetPoint: targetPoint,\n      type: \"Straight\", style: getConnectorStyle(), targetDecorator: targetDecorator\n    }\n  ];\n  return connectorSymbols;\n}\n\n// Function to add mobile events\nfunction addEvents() {\n  isMobile = window.matchMedia(\"(max-width:550px)\").matches;\n  // Check if device is mobile\n  if (isMobile) {\n    if (paletteIconInstance) {\n      paletteIconInstance.addEventListener(\"click\", openPalette, false);\n    }\n  }\n}\n\n// Function to open/close palette\nfunction openPalette() {\n  isMobile = window.matchMedia(\"(max-width:550px)\").matches;\n  if (isMobile) {\n    if (!paletteSpaceInstance.classList.contains(\"sb-mobile-palette-open\")) {\n      // Open palette\n      paletteSpaceInstance.classList.add(\"sb-mobile-palette-open\");\n    } else {\n      // Close palette\n      paletteSpaceInstance.classList.remove(\"sb-mobile-palette-open\");\n    }\n  }\n}\n</script>","dependencies":"{\"vue\":\"3.3.4\",\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-vue-base\":\"*\",\"@syncfusion/ej2-diagrams\":\"*\",\"@syncfusion/ej2-vue-diagrams\":\"*\",\"@syncfusion/ej2-vue-charts\":\"*\",\"@syncfusion/ej2-vue-maps\":\"*\",\"@syncfusion/ej2-vue-calendars\":\"*\",\"@syncfusion/ej2-data\":\"*\",\"@syncfusion/ej2-vue-grids\":\"*\"}","src/main.js":"import { createApp } from 'vue'\nimport App from './App.vue'\ncreateApp(App).mount('#app')"}