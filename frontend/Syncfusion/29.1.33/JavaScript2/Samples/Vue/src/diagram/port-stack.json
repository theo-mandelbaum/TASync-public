{"public/index.html":"<!DOCTYPE html>\r\n<html lang=\"en\">\r\n\r\n<head>\r\n    <meta charset=\"utf-8\">\r\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\r\n    <meta name=\"viewport\" content=\"width=device-width,initial-scale=1.0\">\r\n    <link rel=\"icon\" href=\"<%= BASE_URL %>favicon.ico\">\r\n    <title>\r\n        <%= htmlWebpackPlugin.options.title %>\r\n    </title>\r\n    <link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\r\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\r\n</head>\r\n\r\n<body>\r\n    <noscript>\r\n        <strong>We're sorry but <%= htmlWebpackPlugin.options.title %> doesn't work properly without JavaScript enabled.\r\n        Please enable it to continue.</strong>\r\n    </noscript>\r\n    <div id=\"app\"></div>\r\n    <style>\r\n            .control-section\r\n            {\r\n                margin-top: 100px;\r\n            }\r\n    </style>\r\n    <!-- built files will be auto injected -->\r\n</body>\r\n\r\n</html>\r\n","src/App.vue":"<template>\n<div class=\"control-section\">\n<div class=\"col-lg-8 control-section\">\n        <ejs-diagram style='display:block' ref=\"diagramObj\" id=\"diagram\" :width='width' :height='height' :nodes='nodes' :connectors='connectors' :selectionChange='selectionChange' :getNodeDefaults='getNodeDefaults' :getConnectorDefaults='getConnectorDefaults' :snapSettings='snapSettings'></ejs-diagram>\n    </div>\n    <div class=\"col-lg-4 property-section\">\n    <div class=\"property-panel-header\">\n        Properties\n    </div>\n    <div id=\"propertypanel\" class=\"e-remove-selection\" ref=\"propertypanelInstance\">\n      <div class=\"property-section-content\">\n        <div class=\"row sb-child-row\">\n            <div class=\"col-xs-6\">\n                <div style=\"padding-bottom: 8px\">\n                    Visibility\n                </div>\n                <div  style=\"width:80%;\">\n                    <!-- Enable or disable the visibility of the Port -->\n                        <ejs-dropdownlist ref='portsVisiblityObj' id='portsVisiblity'\n                                        :enabled='portsVisiblityenabled'\n                                        :dataSource='portsVisiblitydataSource'\n                                        :fields='portsVisiblityfields'\n                                        :value='portsVisiblityValue'\n                                        :change='portsVisiblitychange'/>\n                </div>\n            </div>\n            <div class=\"col-xs-6\">\n                <div style=\"padding-bottom: 8px\">\n                    Shape\n                </div>\n                <div  style=\"width:80%;\">\n                     <!-- DropDownList is used to apply the shape of the Port. -->\n                        <ejs-dropdownlist ref='shapeObj' id='shape' \n                                          :enabled='shapeenabled'\n                                          :placeholder='shapeplaceholder'\n                                          :dataSource='shapedataSource'\n                                          :fields='shapefields'\n                                          :change='shapechange'/>\n                </div>\n            </div>\n        </div>\n        <div class=\"row sb-child-row\">\n            <div class=\"col-xs-6\">\n                <div style=\"padding-bottom: 8px\">\n                    Fill Color\n                </div>\n                <div style=\"padding-bottom: 8px\">\n                    <!-- colorpicker is used to apply the fill color of the Port. -->\n                     <ejs-colorpicker ref=\"fillObj\" id=\"fill\"       \n                                 :value='fillcolorvalue'\n                                 :change='fillchange'></ejs-colorpicker>\n                </div>\n            </div>\n            <div class=\"col-xs-6\">\n                <div style=\"padding-bottom: 8px\">\n                    Stroke Color\n                </div>\n                <div style=\"padding-bottom: 8px\">\n                    <!-- colorpicker is used to apply the Stroke color of the Port. -->\n                    <ejs-colorpicker ref=\"borderObj\" id=\"border\" :value='strokecolorvalue' :change='borderchange'></ejs-colorpicker>\n                </div>\n            </div>\n        </div>\n        <div class=\"row sb-child-row\">\n            <div class=\"col-xs-6\">\n                <div style=\"padding-bottom: 8px\">\n                    Stroke Width\n                </div>\n                <div style=\"padding-bottom: 8px;width:80%;\">\n                    <!-- NumericTextBox is used to apply the StrokeWidth of the Port. -->\n                        <ejs-numerictextbox ref='widthObj' id='width' \n                                            :enabled='widthenabled'\n                                            :format='widthformat'\n                                            :value='widthvalue'\n                                            :min='widthmin'\n                                            :step='widthstep'\n                                            :change='widthchange'/>\n                </div>\n            </div>\n            <div class=\"col-xs-6\">\n                <div style=\"padding-bottom: 8px\">\n                    Size\n                </div>\n                <div style=\"padding-bottom: 8px;width:80%;\">\n                     <!-- NumericTextBox is used to apply the size of the Port. -->\n                        <ejs-numerictextbox ref= 'sizeObj' id='size' \n                                            :enabled='sizeenabled'\n                                            :format='sizeformat'\n                                            :value='sizevalue'\n                                            :min='sizemin'\n                                            :step='sizestep'\n                                            :change='sizechange'/>\n                </div>\n            </div>\n        </div>\n    </div>\n    </div>\n</div>\n</div>\n</template>\n\n<style scoped>\n/*To align property panel */\n.sb-child-row {\n  margin-top: 8px;\n}\n\n.property-panel-header {\n  padding-top: 15px;\n  padding-bottom: 15px;\n}\n\n.property-section .e-remove-selection {\n  cursor: not-allowed;\n}\n\n/* To disable pointer events when there is no selection in diagram */\n.e-remove-selection .property-section-content {\n  pointer-events: none;\n}\n</style>\n\n\n<script>\nimport {\n  DiagramComponent,\n  PortVisibility,\n  Node,\n} from \"@syncfusion/ej2-vue-diagrams\";\nimport {\n  DropDownListComponent,\n  MultiSelectComponent,\n} from \"@syncfusion/ej2-vue-dropdowns\";\nimport {\n  NumericTextBoxComponent,\n  ColorPickerComponent\n} from \"@syncfusion/ej2-vue-inputs\";\n\nlet diagramInstance;\nlet portVisibilityDrop;\nlet portFillDrop;\nlet portBorderDrop;\nlet portShapeDrop;\nlet portSizeNum;\nlet portWidthNum;\nlet appearance;\n\n//Function to Create connector by the parameters\nfunction createPort(id, shape, offsetX, offsetY, text) {\n    return {\n        id: id,\n        shape: shape,\n        offset: { x: offsetX, y: offsetY },\n        height: 8,\n        width: 8,\n        visibility: PortVisibility.Visible,\n        text: text\n    };\n}\n\n//Function to Create nodes by the parameters\nfunction createNode(id, offsetX, offsetY, annotationContent, ports) {\n    return {\n        id: id,\n        offsetX: offsetX,\n        offsetY: offsetY,\n        annotations: [{ content: annotationContent }],\n        ports: ports\n    };\n}\n\n//Function to Create connector by the parameters\nfunction createConnector(id, sourceID, sourcePortID, targetID, targetPortID) {\n    return {\n        id: id,\n        sourceID: sourceID,\n        sourcePortID: sourcePortID,\n        targetID: targetID,\n        targetPortID: targetPortID\n    }\n}\n//Initializes the ports for the diagram\nlet node1Port = [\n  createPort('port1', 'Circle', 0, 0.5, 'In - 1'),\n  createPort('port2', 'Circle', 1, 0.5, 'OUT - 1'),\n  createPort('port3', 'Circle', 0.25, 1, 'In - 2'),\n  createPort('port4', 'Circle', 0.5, 1, 'OUT - 2'),\n  createPort('port5', 'Circle', 0.75, 1, 'In - 3')\n];\n\nlet node2Port = [\n  createPort('port6', 'Circle', 0, 0.5, 'In - 1'),\n  createPort('port7', 'Circle', 1, 0.35, 'OUT - 1'),\n  createPort('port8', 'Circle', 1, 0.70, 'In - 2'),\n  createPort('port9', 'Circle', 0.5, 1, 'OUT - 2')\n];\n\nlet node3Port = [\n  createPort('port10', 'Circle', 0, 0.5, 'Out - 1'),\n  createPort('port11', 'Circle', 0.5, 0, 'In - 1'),\n  createPort('port12', 'Circle', 0.5, 1, 'OUT - 2')\n];\n\nlet node4Port = [\n  createPort('port13', 'Circle', 0, 0.5, 'In - 1'),\n  createPort('port14', 'Circle', 0.5, 0, 'In - 2'),\n  createPort('port15', 'Circle', 0.5, 1, 'OUT - 1')\n];\n\nlet node5Port = [\n  createPort('port16', 'Circle', 0, 0.5, 'out - 1'),\n  createPort('port17', 'Circle', 0.5, 0, 'In - 1'),\n  createPort('port18', 'Circle', 1, 0.5, 'OUT - 2')\n];\n\nlet node6Port = [\n  createPort('port19', 'Circle', 0, 0.35, 'In - 1'),\n  createPort('port20', 'Circle', 0.5, 1, 'Out - 1')\n];\n\nlet node7Port = [\n  createPort('port21', 'Circle', 0.5, 0, 'In - 1'),\n  createPort('port22', 'Circle', 0.5, 1, 'Out - 1')\n];\n\nlet shape1 = { type: \"Basic\", shape: \"Rectangle\" };\n\nlet shape2 = { type: \"Basic\", shape: \"Diamond\" };\n//Initialize Diagram Nodes\nlet nodes = [\n  createNode('node1', 100, 100, 'Publisher', node1Port),\n  createNode('node2', 300, 100, 'Completed Book', node2Port),\n  createNode('node3', 300, 200, '1st Review', node3Port),\n  createNode('node4', 300, 300, 'Legal Terms', node4Port),\n  createNode('node5', 300, 400, '2nd Review', node5Port),\n  createNode('node6', 500, 100, 'Board', node6Port),\n  createNode('node7', 500, 200, 'Approval', node7Port)\n];\n//Initialize Diagram Connectors\nlet connectors = [\n  createConnector('connector1', 'node1', 'port2', 'node2', 'port6'),\n  createConnector('connector2', 'node1', 'port4', 'node4', 'port13'),\n  createConnector('connector3', 'node2', 'port9', 'node3', 'port11'),\n  createConnector('connector4', 'node2', 'port7', 'node6', 'port19'),\n  createConnector('connector5', 'node3', 'port10', 'node1', 'port5'),\n  createConnector('connector6', 'node3', 'port12', 'node4', 'port14'),\n  createConnector('connector7', 'node4', 'port15', 'node5', 'port17'),\n  createConnector('connector8', 'node5', 'port18', 'node2', 'port8'),\n  createConnector('connector9', 'node5', 'port16', 'node1', 'port3'),\n  createConnector('connector10', 'node6', 'port20', 'node7', 'port21'),\n  createConnector('connector11', 'node7', 'port22', 'node1', 'port1')\n];\n//Visibility collection of the Port.\nlet visibility = [\n  { PortVisibility: PortVisibility.Visible, text: \"Visible\" },\n  { PortVisibility: PortVisibility.Hidden, text: \"Hidden\" },\n  { PortVisibility: PortVisibility.Hover, text: \"Hover\" },\n  { PortVisibility: PortVisibility.Connect, text: \"Connect\" }\n];\n//Shape collection of the Port.\nlet shape = [\n  { shape: \"X\", text: \"X\" },\n  { shape: \"Circle\", text: \"Circle\" },\n  { shape: \"Square\", text: \"Square\" },\n  { shape: \"Custom\", text: \"Custom\" }\n];\n\nexport default {\n  components: {\n    'ejs-diagram': DiagramComponent,\n    'ejs-multiselect': MultiSelectComponent,\n    'ejs-numerictextbox': NumericTextBoxComponent,\n    'ejs-dropdownlist': DropDownListComponent,\n    'ejs-colorpicker': ColorPickerComponent\n  },\n  data: function() {\n    return {\n      width: \"100%\",\n      height: 580,\n      nodes: nodes,\n      connectors: connectors,\n      selectionChange: selectionChange,\n      snapSettings: { constraints: 0 },\n      //Sets the default values of nodes\n      getNodeDefaults: (node) => {\n        //Initialize shape\n        if (\n          node.id === \"node1\" ||\n          node.id === \"node2\" ||\n          node.id === \"node4\" ||\n          node.id === \"node6\"\n        ) {\n          node.shape = shape1;\n        } else if (\n          node.id === \"node3\" ||\n          node.id === \"node5\" ||\n          node.id === \"node7\"\n        ) {\n          node.shape = shape2;\n        }\n        //sets height and width for nodes\n        node.height = 65;\n        node.width = 100;\n        node.style = { fill: \"#ebf8fb\", strokeColor: \"#baeaf5\" };\n        for (let i = 0; i < node.ports.length; i++) {\n          //sets styles for the ports\n          node.ports[i].style = {\n            fill: \"#366f8c\",\n            strokeColor: \"#366f8c\"\n          };\n          node.ports[i].width = 6;\n          node.ports[i].height = 6;\n        }\n        node.annotations[0].style = {\n          fontSize: 13,\n          color: \"black\"\n        };\n      },\n      //Sets the default values of connector\n      getConnectorDefaults: (connector) => {\n        //defines type of the connectors\n        connector.type = \"Orthogonal\";\n        connector.style = { strokeColor: \"#8cdcef\", strokeWidth: 1 };\n        connector.targetDecorator = {\n          width: 5,\n          height: 5,\n          style: { fill: \"#8cdcef\", strokeColor: \"#8cdcef\" }\n        };\n      },\n      portsVisiblityenabled: true,\n      portsVisiblitydataSource: visibility,\n      portsVisiblityfields: { value: \"PortVisibility\", text: \"text\" },\n      portsVisiblitymode: \"CheckBox\",\n      portsVisiblitychange: portVisibilityDropOnChange,\n      portsVisiblityValue:\"Visible\",\n      fillcolorvalue: \"#000\",\n      fillchange: (args) => {\n        applyPortStyle(\"fill\", args.currentValue.rgba);\n      },\n\n      strokecolorvalue: \"#000\",\n      borderchange: (args) => {\n        applyPortStyle(\"strokecolor\", args.currentValue.rgba);\n      },\n\n      shapeenabled: true,\n      shapeplaceholder: \"Select a Shape\",\n      shapedataSource: shape,\n      shapefields: { value: \"shape\", text: \"text\" },\n      shapechange: portShapeDropOnChange,\n\n      sizeenabled: true,\n      sizeformat: \"###.##\",\n      sizemin: 1,\n      sizevalue: 6,\n      sizestep: 1,\n      sizechange: (args) => {\n        applyPortStyle(\"size\", args.value);\n      },\n\n      widthenabled: true,\n      widthformat: \"###.##\",\n      widthvalue: 1,\n      widthmin: 0,\n      widthstep: 0.5,\n      widthchange: (args) => {\n        applyPortStyle(\"strokewidth\", args.value);\n      }\n    };\n  },\n  mounted: function() {\n    diagramInstance = this.$refs.diagramObj.ej2Instances;\n    diagramInstance.fitToPage();\n    portVisibilityDrop = this.$refs.portsVisiblityObj.ej2Instances;\n    portFillDrop = this.$refs.fillObj.ej2Instances;\n    portBorderDrop = this.$refs.borderObj.ej2Instances;\n    portShapeDrop = this.$refs.shapeObj.ej2Instances;\n    portSizeNum = this.$refs.sizeObj.ej2Instances;\n    portWidthNum = this.$refs.widthObj.ej2Instances;\n    appearance=this.$refs.propertypanelInstance;\n    diagramInstance.select([diagramInstance.nodes[0]]);\n  }\n}\n\n//get the port for the selected node.\nfunction getPort() {\n  let node = diagramInstance.selectedItems.nodes[0];\n  let port;\n  if (node) {\n    port = node.ports;\n  }\n  return port;\n}\n\n//enable or disable the property panel based on the Selection.\nfunction selectionChange(args) {\n  if (args.state === \"Changed\") {\n    let selectedElement = document.getElementsByClassName(\n      \"e-remove-selection\"\n    );\n    if (args.newValue) {\n      if (!appearance.classList.contains(\"e-remove-selection\")) {\n        appearance.classList.add(\"e-remove-selection\");\n      }\n      if (args.newValue[0] instanceof Node && selectedElement.length) {\n        selectedElement[0].classList.remove(\"e-remove-selection\");\n        let port = getPort()[0];\n        portVisibilityDrop.value = port.visibility;\n        portVisibilityDrop.dataBind();\n        portFillDrop.value = port.style.fill;\n        portFillDrop.dataBind();\n        portBorderDrop.value = port.style.strokeColor;\n        portBorderDrop.dataBind();\n        portShapeDrop.value = port.shape;\n        portShapeDrop.dataBind();\n        portSizeNum.value = port.height;\n        portSizeNum.dataBind();\n        portWidthNum.value = port.style.strokeWidth;\n        portWidthNum.dataBind();\n      }\n    }\n  }\n}\n//set the appearence of the Port.\nfunction applyPortStyle(propertyName, propertyValue) {\n  let ports = getPort();\n  for (let j = 0; j < ports.length; j++) {\n    let port = ports[j];\n    if (propertyName === \"fill\") {\n      port.style.fill = propertyValue.toString();\n    } else if (propertyName === \"strokecolor\") {\n      port.style.strokeColor = propertyValue.toString();\n    } else if (propertyName === \"size\") {\n      port.width = port.height = Number(propertyValue);\n    } else if (propertyName === \"strokewidth\") {\n      port.style.strokeWidth = Number(propertyValue);\n    } else if (propertyName === \"visibility\") {\n      port.visibility = 0;\n      let propertyValue1 = propertyValue;\n      for (let i = 0; i < propertyValue1.length; i++) {\n        port.visibility += propertyValue1[i];\n      }\n    } else if (propertyName === \"shape\") {\n      port.shape = propertyValue;\n    }\n    diagramInstance.dataBind();\n  }\n}\n//change the Visibility of the Port.\nfunction portVisibilityDropOnChange(args) {\n  let port = getPort();\n  if (port) {\n    for (let j = 0; j < port.length; j++) {\n        port[j].visibility = portVisibilityDrop.value ;\n      diagramInstance.dataBind();\n    }\n  }\n}\n//change the shape of the Port.\nfunction portShapeDropOnChange(args) {\n  let port = getPort();\n  for (let j = 0; j < port.length; j++) {\n    switch (portShapeDrop.value) {\n      case \"X\":\n        port[j].shape = \"X\";\n        break;\n      case \"Circle\":\n        port[j].shape = \"Circle\";\n        break;\n      case \"Square\":\n        port[j].shape = \"Square\";\n        break;\n      case \"Custom\":\n        port[j].shape = \"Custom\";\n        port[j].pathData = \"M6.805,0L13.61,10.703L0,10.703z\";\n        break;\n    }\n    diagramInstance.dataBind();\n  }\n}\n\n</script>\n","dependencies":"{\"vue\":\"3.3.4\",\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-vue-base\":\"*\",\"@syncfusion/ej2-diagrams\":\"*\",\"@syncfusion/ej2-vue-diagrams\":\"*\",\"@syncfusion/ej2-dropdowns\":\"*\",\"@syncfusion/ej2-vue-dropdowns\":\"*\",\"@syncfusion/ej2-inputs\":\"*\",\"@syncfusion/ej2-vue-inputs\":\"*\",\"@syncfusion/ej2-vue-charts\":\"*\",\"@syncfusion/ej2-vue-maps\":\"*\",\"@syncfusion/ej2-vue-calendars\":\"*\",\"@syncfusion/ej2-data\":\"*\",\"@syncfusion/ej2-vue-grids\":\"*\"}","src/main.js":"import { createApp } from 'vue'\nimport App from './App.vue'\ncreateApp(App).mount('#app')"}