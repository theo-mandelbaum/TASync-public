{"public/index.html":"<!DOCTYPE html>\r\n<html lang=\"en\">\r\n\r\n<head>\r\n    <meta charset=\"utf-8\">\r\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\r\n    <meta name=\"viewport\" content=\"width=device-width,initial-scale=1.0\">\r\n    <link rel=\"icon\" href=\"<%= BASE_URL %>favicon.ico\">\r\n    <title>\r\n        <%= htmlWebpackPlugin.options.title %>\r\n    </title>\r\n    <link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\r\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\r\n</head>\r\n\r\n<body>\r\n    <noscript>\r\n        <strong>We're sorry but <%= htmlWebpackPlugin.options.title %> doesn't work properly without JavaScript enabled.\r\n        Please enable it to continue.</strong>\r\n    </noscript>\r\n    <div id=\"app\"></div>\r\n    <style>\r\n            .control-section\r\n            {\r\n                margin-top: 100px;\r\n            }\r\n    </style>\r\n    <!-- built files will be auto injected -->\r\n</body>\r\n\r\n</html>\r\n","src/App.vue":"<template>\n    <div>\n        <div class=\"col-lg-8 control-section\">\n            <div id=\"flowExecitionControlSection\" class=\"content-wrapper\" style=\"width: 100%;\">\n                <ejs-diagram style='display:block' ref=\"diagramObj\" id=\"diagram\" :width='width' :height='height' :nodes='nodes' :connectors='connectors' :snapSettings='snapSettings'></ejs-diagram>\n            </div>\n        </div>\n        <div id=\"flowExecitionPropertySection\" class=\"col-lg-4 property-section\">\n            <div class=\"property-panel-header\">\n                Show flow execution\n            </div>\n            <div class=\"row property-panel-content\" id=\"appearance\">\n                <div class=\"row property-panel-content\" style=\"width:260px;overflow: hidden;\">\n                  <div\n                        v-for=\"(button, index) in radioButtons\"\n                        :key=\"index\"\n                        :style=\"{ paddingTop: index === 0 ? '0px' : '8px' }\">\n                        <div class=\"row\">\n                        <div class=\" col-xs-7\">\n                            <ejs-radiobutton\n                                :id=\"button.id\"\n                                :label=\"button.label\"\n                                :value=\"button.value\"\n                                name=\"radio\"\n                                :change=\"buttonChange\"\n                                :checked=\"button.checked\"\n                            ></ejs-radiobutton>\n                         </div>\n                        </div>\n                  </div>   \n                </div>\n            </div>\n        </div>\n    </div>\n</template>\n<style scoped>\n     /* Proprty panel CSS */\n#flowExecitionPropertySection .row {\n    margin-left: 0px;\n    margin-right: 0px;\n}\n\n#flowExecitionPropertySection .col-xs-7 {\n    width: 300px;\n}\n\n#flowExecitionPropertySection .col-xs-7 {\n    padding-left: 0px;\n    padding-right: 0px;\n}\n\n#flowExecitionControlSection.content-wrapper {\n    border: 1px solid #D7D7D7;\n}\n</style>\n\n<script>\nimport { Diagram, NodeModel, ConnectorModel, ShapeAnnotationModel, Segments, Node } from '@syncfusion/ej2-vue-diagrams';\nimport {\n    DiagramComponent,\n    SnapConstraints,\n} from '@syncfusion/ej2-vue-diagrams';\nimport { radiobutton, ChangeEventArgs } from '@syncfusion/ej2-vue-buttons';\nimport { enableRipple } from '@syncfusion/ej2-base';\nimport { RadioButtonComponent } from '@syncfusion/ej2-vue-buttons';\n\n//Function to create connector object with basic properties.\nfunction CreateConnector(\n    name, source, target, content, type,\n    direction, targePort, length) {\n    let connector = {};\n    connector.id = name;\n    connector.sourceID = source;\n    connector.targetID = target;\n    if (targePort) {\n        connector.targetPortID = targePort;\n    }\n    connector.style = { strokeWidth: 2 ,strokeColor :'#8D8D8D'};\n    let annotation = {content: content, style: { fill: 'white' }};\n    connector.annotations = [annotation];\n    connector.targetDecorator = {style: { strokeColor: '#8D8D8D', fill: '#8D8D8D' }};\n    let segment = {type,direction,length};\n    if (type) {\n        connector.type = type;\n        connector.segments = [segment];\n    }\n    return connector;\n}\n\n//Function to create node object with basic properties.\nfunction CreateNodes(id, offsetX, offsetY, shape, content,ports) {\n    let node = {\n        id,\n        offsetX,\n        offsetY,\n        width: 150,\n        height: 50,\n        shape: { type: 'Flow', shape: shape },\n        style : { fill: '#FBF6E1', strokeColor: '#E8DFB6', strokeWidth: 2 },\n    };\n    let annotations = {content: content };\n    node.annotations = [annotations];\n    if (ports) {\n        node.ports = ports;\n    }\n    return node;\n}\n\nlet port1 = { id: 'port1', offset: { x: 0.5, y: 1 } };\nlet port = { id: 'port', offset: { x: 1, y: 0.5 } };\n\n//Initialize diagram Nodes\nlet nodes = [];\nnodes.push(CreateNodes('node1', 100, 125, 'Terminator', 'Begin'));\nnodes.push(CreateNodes('node2', 300, 125, 'Process', 'Specify collection', [port]));\nnodes.push(CreateNodes('node3', 500, 125, 'Decision', 'Particulars \\n required?',[port1]));\nnodes.push(CreateNodes('node4', 730, 125, 'Process', 'Specify particulars'));\nnodes.push(CreateNodes('node5', 500, 225, 'Process', 'Design collection', [port]));\nnodes.push(CreateNodes('node6', 500, 320, 'Process', 'Cluster of events',));\nnodes.push(CreateNodes('node7', 500, 420, 'Process', 'Start the process',5));\nnodes.push(CreateNodes('node8', 730, 320, 'Process', 'Record and analyze \\n results', [port]));\nnodes.push(CreateNodes('node9', 730, 420, 'Terminator', 'End ',));\n\n//Initialize diagram connectors\nlet connectors = [];\nconnectors.push(CreateConnector('connector1', 'node1', 'node2', ''));\nconnectors.push(CreateConnector('connector2', 'node2', 'node3', ''));\nconnectors.push(CreateConnector('connector3', 'node3', 'node4', 'Yes'));\nconnectors.push(CreateConnector('connector4', 'node3', 'node5', 'No'));\nconnectors.push(CreateConnector('connector5', 'node5', 'node6', ''));\nconnectors.push(CreateConnector('connector6', 'node6', 'node7', ''));\nconnectors.push(CreateConnector('connector7', 'node8', 'node6', ''));\nconnectors.push(CreateConnector('connector8', 'node7', 'node9', ''));\nconnectors.push(CreateConnector('connector10', 'node4', 'node5', '', 'Orthogonal', 'Bottom', 'port', 220));\n\nlet node;\nlet element;\nlet diagram;\nlet highLightedObjects = [];\nlet selectedButton = 'LinksConnected';\n\nexport default {\n    components: {\n        'ejs-diagram': DiagramComponent,\n        'ejs-radiobutton': RadioButtonComponent\n    }, \n    data: function() {\n        return {\n            width: \"100%\",\n            height: \"600px\",\n            nodes: nodes,\n            connectors: connectors,\n            buttonChange: buttonChange,\n            snapSettings: { constraints: SnapConstraints.None },\n            radioButtons: [\n                { id: 'UnhighlightAll', label: 'None', value: 'UnhighlightAll' },\n                { id: 'LinksInto', label: 'Incoming connections', value: 'LinksInto' },\n                { id: 'LinksOutOf', label: 'Outgoing connections', value: 'LinksOutOf' },\n                { id: 'LinksConnected', label: 'Incoming and outgoing connections', value: 'LinksConnected', checked: true },\n                { id: 'NodesInto', label: 'Incoming nodes', value: 'NodesInto' },\n                { id: 'NodesOutOf', label: 'Outgoing nodes', value: 'NodesOutOf' },\n                { id: 'NodesConnected', label: 'Incoming and outgoing nodes', value: 'NodesConnected' },\n                { id: 'NodesReachable', label: 'Flow of Execution', value: 'NodesReachable' }\n            ]\n        };\n    },\n    mounted: function() {\n        diagram = this.$refs.diagramObj.ej2Instances;\n        diagram.selectionChange = (arg) => {\n            applyChanges(selectedButton);\n        };\n        diagram.select([diagram.nodes[2]]);\n    }\n}\n\nfunction buttonChange(args) {\n    applyChanges(args.event.srcElement.id);\n    selectedButton = args.event.srcElement.id;\n}\n\n//Function To call respective methods based on user selection.\nfunction applyChanges(id) {\n    Unhighlight();\n    switch (id) {\n        case 'LinksInto':\n            highlightIncomingConnections();\n            break;\n        case 'LinksOutOf':\n            highlightOutgoingConnections();\n            break;\n        case 'LinksConnected':\n            highlightIncomingConnections();\n            highlightOutgoingConnections();\n            break;\n        case 'NodesInto':\n            highlightIncomingNodes();\n            break;\n        case 'NodesOutOf':\n            highlightOutgoingNodes();\n            break;\n        case 'NodesConnected':\n           highlightIncomingNodes();\n           highlightOutgoingNodes();\n            break;\n        case 'NodesReachable':\n            highlightReachableNodes();\n            break;\n    }\n}\n\n//To highlight connectors\nfunction highlightConnectors(edges) {\n    edges.forEach(edge => {\n        let index = diagram.connectors.indexOf(diagram.nameTable[edge]);\n        highLightedObjects.push(edge);\n        let connector = diagram.connectors[index];\n        connector.style.strokeColor = '#1413F8';\n        connector.targetDecorator.style.strokeColor = '#1413F8';\n        connector.targetDecorator.style.fill = '#1413F8';\n        diagram.dataBind();\n    });\n};\n\n// Function to Highlight the incoming connectors.\nfunction highlightIncomingConnections() {\nif (diagram.selectedItems.nodes.length) {\n    var node = diagram.selectedItems.nodes[0].inEdges;\n    highlightConnectors(node);\n    }\n}\n\n// Function to Highlight the outgoing connectors.\nfunction highlightOutgoingConnections() {\nif (diagram.selectedItems.nodes.length) {\n    var node = diagram.selectedItems.nodes[0].outEdges;\n    highlightConnectors(node);\n}\n}\n\n//To highlight nodes\nfunction highlightNodes(edges, edgeType) {\n    edges.forEach(edge => {\n        let nodeId = diagram.nameTable[edge][edgeType];\n        highLightedObjects.push(nodeId);\n        let index = diagram.nodes.indexOf(diagram.nameTable[nodeId]);\n        diagram.nodes[index].style.strokeColor = '#1413F8';\n        diagram.dataBind();\n    });\n};\n\n//Function to Highlight the incoming Nodes.\nfunction highlightIncomingNodes() {\nif (diagram.selectedItems.nodes.length) {\n    var node = diagram.selectedItems.nodes[0].inEdges;\n    highlightNodes(node, 'sourceID');\n\n  }\n}\n\n//Function to Highlight the outgoing Nodes.\nfunction highlightOutgoingNodes(){\nif (diagram.selectedItems.nodes.length) {\n    var node = diagram.selectedItems.nodes[0].outEdges;\n    highlightNodes(node, 'targetID');\n }\n}\n\n//Function to display the flow of execution.\nfunction highlightReachableNodes() {\nif (diagram.selectedItems.nodes.length) {\n    var connectors_1 = diagram.selectedItems.nodes[0].outEdges;\n    var nodeList = foundNode(connectors_1, []);\n    highlightConnectors(nodeList);\n}\n}\n\n//Function to find the connected nodes.\nfunction foundNode(list, nodeList) {\nfor (var i = 0; i < list.length; i++) {\n    var connector = diagram.nameTable[list[i]];\n    if (nodeList.indexOf(connector.id) > -1) {\n        break;\n    }\n    if (!connector.annotations[0] || (connector.annotations[0] && connector.annotations[0].content !== 'No')) {\n        nodeList.push(connector.id);\n    }\n    if (diagram.nameTable[connector.targetID].outEdges.length) {\n        if (list.indexOf(connector.targetID) === -1) {\n            foundNode(diagram.nameTable[connector.targetID].outEdges, nodeList);\n        }\n    }\n}\n return nodeList;\n}\n\n//Function To unhighlight highlighted objects.\nfunction Unhighlight() {\nfor (var i = highLightedObjects.length - 1; i >= 0; i--) {\n    if (diagram.nameTable[highLightedObjects[i]] instanceof Node) {\n        var index = diagram.nodes.indexOf(diagram.nameTable[highLightedObjects[i]]);\n        diagram.nodes[index].style.strokeColor = '#E8DFB6';\n        diagram.dataBind();\n    }\n    else {\n        var index = diagram.connectors.indexOf(diagram.nameTable[highLightedObjects[i]]);\n        var connector = diagram.connectors[index];\n        connector.style.strokeColor = '#8D8D8D';\n        connector.targetDecorator.style.strokeColor = '#8D8D8D';\n        connector.targetDecorator.style.fill = '#8D8D8D';\n        diagram.dataBind();\n    }\n}\nhighLightedObjects = [];\n}\n\n\n</script>\n","dependencies":"{\"vue\":\"3.3.4\",\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-vue-base\":\"*\",\"@syncfusion/ej2-diagrams\":\"*\",\"@syncfusion/ej2-vue-diagrams\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-vue-buttons\":\"*\",\"@syncfusion/ej2-icons\":\"*\",\"markdown-spellcheck\":\"^1.3.1\",\"@syncfusion/ej2-vue-charts\":\"*\",\"@syncfusion/ej2-vue-maps\":\"*\"}","src/main.js":"import { createApp } from 'vue'\nimport App from './App.vue'\ncreateApp(App).mount('#app')"}