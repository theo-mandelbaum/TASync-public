{"public/index.html":"<!DOCTYPE html>\r\n<html lang=\"en\">\r\n\r\n<head>\r\n    <meta charset=\"utf-8\">\r\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\r\n    <meta name=\"viewport\" content=\"width=device-width,initial-scale=1.0\">\r\n    <link rel=\"icon\" href=\"<%= BASE_URL %>favicon.ico\">\r\n    <title>\r\n        <%= htmlWebpackPlugin.options.title %>\r\n    </title>\r\n    <link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\r\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\r\n</head>\r\n\r\n<body>\r\n    <noscript>\r\n        <strong>We're sorry but <%= htmlWebpackPlugin.options.title %> doesn't work properly without JavaScript enabled.\r\n        Please enable it to continue.</strong>\r\n    </noscript>\r\n    <div id=\"app\"></div>\r\n    <style>\r\n            .control-section\r\n            {\r\n                margin-top: 100px;\r\n            }\r\n    </style>\r\n    <!-- built files will be auto injected -->\r\n</body>\r\n\r\n</html>\r\n","src/App.vue":"<template>\n  <div class=\"control-section\">\n    <div style=\"width:100%\" class=\"diagram-scroll\">\n        <div class=\"sb-mobile-palette-bar\">\n          <div id=\"palette-icon\" ref=\"paletteIcon\" role=\"button\" class=\"e-ddb-icons1 e-toggle-palette\"></div>\n        </div>\n        <div id=\"palette-space\" ref=\"paletteSpace\" class=\"sb-mobile-palette\" style=\"width:20%;float:left\">\n          <ejs-symbolpalette id=\"symbolpalette\" :palettes='palettes' :expandMode='expandMode' :width='palettewidth' :height='paletteheight' :getNodeDefaults='palettegetNodeDefaults' :getConnectorDefaults='getConnectorDefaults' :getSymbolInfo='getSymbolInfo' :symbolMargin='symbolMargin' :symbolHeight='symbolHeight'\n          :symbolWidth='symbolWidth'></ejs-symbolpalette>\n        </div>\n  \n        <div class=\"sb-mobile-diagram\" style=\"width:59%;float:left\">\n            <ejs-diagram style='display:block' id=\"diagram\" ref=\"diagramObject\" :width='width' :height='height' :getNodeDefaults='getNodeDefaults' :getConnectorDefaults='getConnectorDefaults' :rulerSettings='rulerSettings' :scrollSettings='scrollSettings' :created='created' :dragEnter='dragEnter'></ejs-diagram>\n        </div>\n        <div id=\"properties\" style=\"width:20%;float:right\">\n              <div class=\"property-panel-header\">\n                  Properties\n              </div>\n              <div class=\"row db-prop-row\">        \n                  <div class=\"col-xs-5 db-col-right db-prop-text-style\" style=\"padding-top: 14px\">\n                      <span class=\"db-prop-text-style db-spacing-text\">Scroll Limit</span>\n                  </div>\n                  <div class=\"col-xs-7 db-col-left\" style=\"padding-top: 10px;padding-right: 0px;\">\n                      <div class=\"db-text-input\">\n                          <ejs-dropdownlist id='scrollableDiv' ref=\"scrollableDiv\" :dataSource='scrollLimitDatasource' :change='scrollLimitChange' :placeholder='waterMark' ></ejs-dropdownlist>\n                      </div>\n                  </div>\n              </div>\n              <div id=\"scrollableArea\" ref=\"scrollableArea\">\n                  <div class=\"property-panel-header\">\n                      Scrollable Area\n                  </div>\n                  <div class=\"row db-prop-row\"  style=\"padding-top: 15px;\">\n                      <div class=\"col-xs-6\" style=\"padding-right: 15px;width: 150px;\">\n                              <div style=\"width:40%;float:left;margin-top: 5px;\">\n                                  <span class=\"texstyle\" style=\"display: block;\">X</span>\n                              </div>\n                              <div style=\"width:60%;float:right;padding-left: 20px;\">\n                                  <ejs-textbox :value=\"10\"  :change='scrollableX'></ejs-textbox>\n                              </div>\n                      </div>\n                  </div>\n  \n                  <div class=\"row db-prop-row\"  style=\"padding-top: 15px;\">\n                      <div class=\"col-xs-6\" style=\"padding-right: 15px;width: 150px;\">\n                          <div style=\"width:40%;float:left;margin-top: 5px;\">\n                              <span class=\"texstyle\" style=\"width: fit-content;\">Y</span>\n                          </div>\n                          <div style=\"width:60%;float:right;padding-left: 20px;\">\n                              <ejs-textbox :value=\"10\" :change='scrollableY'></ejs-textbox>\n                          </div>\n                      </div>\n                  </div>\n                  \n                  <div class=\"row db-prop-row\" style=\"padding-top: 15px;\">\n                      <div class=\"col-xs-6 db-col-left\" style=\"width: 150px;\">\n                              <div style=\"width:40%;float:left;margin-top: 5px;\">\n                                  <span class=\"texstyle\" >Width</span>\n                              </div>\n                              <div style=\"width:60%;float:right;padding-left: 20px;\">\n                                  <ejs-textbox :value=\"1500\" :change='scrollableWidth'></ejs-textbox>\n                              </div>\n                      </div>\n                  </div>\n                  <div class=\"row db-prop-row\" style=\"padding-top: 15px;\">    \n                      <div class=\"col-xs-6 db-col-right\" style=\"width: 150px;\">\n                          <div style=\"width:40%;float:left;margin-top: 5px;\">\n                              <span class=\"texstyle\">Height</span>\n                          </div>\n                          <div style=\"width:60%;float:right;padding-left: 20px\">\n                              <ejs-textbox :value=\"1500\" :change='scrollableHeight'></ejs-textbox>\n                          </div>\n                      </div>\n                  </div>\n              </div>\n              <div style=\"padding-top:5px;margin-top: 20px;\" >\n                  <div style=\"float:left\">Enable AutoScroll</div>\n                  <div style=\"float: left;margin-left: 10px;\">\n                      <ejs-checkbox :checked=\"true\" :change=\"enableAutoSroll\"></ejs-checkbox>\n                  </div>\n              </div>\n              <div id=\"autoScrollDiv\" ref=\"autoScrollDiv\" style=\"margin-top: 30px\">\n                  <div class=\"property-panel-header\">\n                      AutoScroll border\n                  </div>\n                  <div class=\"row db-prop-row\"  style=\"padding-top: 15px;\">\n                      <div class=\"col-xs-6 db-col-left\" style=\"width: 150px;\">\n                              <div style=\"width:40%;float:left;margin-top: 5px;\">\n                                  <span>Left</span>\n                              </div>\n                              <div style=\"width:60%;float:right;padding-left: 20px;\">\n                                  <ejs-textbox :value=\"30\" :change='autoScrollLeft'></ejs-textbox>\n                              </div>\n                      </div>\n                  </div>\n                  <div class=\"row db-prop-row\"  style=\"padding-top: 15px;\">\n                      <div class=\"col-xs-6 db-col-right\" style=\"width: 150px;\">\n                          <div style=\"width:40%;float:left;margin-top: 5px;\">\n                              <span>Top</span>\n                          </div>\n                          <div style=\"width:60%;float:right;padding-left: 20px;\">\n                              <ejs-textbox :value=\"30\" :change='autoScrollTop'></ejs-textbox>\n                          </div>\n                      </div>\n                  </div>\n                  <div class=\"row db-prop-row\" style=\"padding-top: 15px;\">\n                      <div class=\"col-xs-6 db-col-left\" style=\"width: 150px;\">\n                              <div style=\"width:40%;float:left;margin-top: 5px;\">\n                                  <span>Right</span>\n                              </div>\n                              <div style=\"width:60%;float:right;padding-left: 20px;\">\n                                  <ejs-textbox :value=\"30\" :change='autoScrollRight'></ejs-textbox>\n                              </div>\n                      </div>\n                  </div>\n                  <div class=\"row db-prop-row\" style=\"padding-top: 15px;\">\n                      <div class=\"col-xs-6 db-col-right\" style=\"width: 150px;\">\n                          <div style=\"width:40%;float:left;margin-top: 5px;\">\n                              <span>Bottom</span>\n                          </div>\n                          <div style=\"width:60%;float:right;padding-left: 20px;\">\n                              <ejs-textbox :value=\"30\" :change='autoScrollBottom'></ejs-textbox>\n                          </div>\n                      </div>\n                  </div>\n              </div>\n          </div>\n    </div>\n  </div>\n</template>\n<style scoped>\n/*To align palette */\n .diagram-scroll .sb-mobile-palette {\n        width:240px;\n        height:100%;\n        float:left;\n    }\n    \n    .diagram-scroll .sb-mobile-palette-bar {\n        display: none;\n    }\n    /*To align diagram */\n    .diagram-scroll .sb-mobile-diagram {\n        width:calc(100% - 242px);\n        height: 100%;\n        float: left;\n    }\n    \n    @media (max-width: 550px) {\n    \n        .diagram-scroll .sb-mobile-palette {\n            z-index: 19;\n            position: absolute;\n            display: none;\n            transition: transform 300ms linear, visibility 0s linear 300ms;\n            width:39%;\n            height:100%;\n        }\n        \n        .diagram-scroll .sb-mobile-palette-bar {\n            display: block;\n            width: 100%;\n            background:#fafafa;\n            padding: 10px 10px;\n            border:0.5px solid #e0e0e0;\n            min-height: 40px;\n        }\n        \n        .diagram-scroll .sb-mobile-diagram {\n            width: 100%;\n            height: 100%;\n            float: left;\n            left: 0px;\n        }\n    \n        #palette-icon {\n            font-size: 20px; \n        }\n    }\n        \n    .sb-mobile-palette-open {\n        position: absolute;\n        display: block;\n        right: 15px;\n    }\n            .e-export::before {\n                    content: \"\\\\e711\";\n            }\n            \n            \n\n                .e-diagram-btn, .e-css.e-btn {\n                background-color: transparent ;\n                border-color: transparent ;\n                }\n                \n        .diagram-scroll .texstyle {\t\n            display: table;\t\n            /* height: 35px; */\t\n            padding-right: 10px;\t\n            padding-left: 0px;\t\n            width: 50%;\t\n            padding-top: 5px;\t\n            float: left;\t\n            position: relative;\t\n            min-height: 1px;\t\n        }\t\n        .diagram-scroll .text{\t\n            text-align: center;\t\n        }\n        .diagram-scroll .db-text {\n            float: left;\n            width: 20px;\n            text-align: center;\n            height: auto;\n            margin-top: 4px;\n            color: #8C8C8C;\n        }\n\n        .diagram-scroll .db-text-input {\n            width: calc(100% - 25px);\n            padding: 2px 2px 0px 0px;\n        }\n\n        .diagram-scroll .db-text-input input {\n            width: 100%;\n            height: 100%;\n            border: none;\n        }\n\n        .diagram-scroll .disabledbutton {\n            pointer-events: none;\n            opacity: 0.4;\n        }\n</style>\n\n<script>\nimport { Browser } from \"@syncfusion/ej2-base\";\nimport {\n  DiagramComponent,\n  SymbolPaletteComponent,\n} from \"@syncfusion/ej2-vue-diagrams\";\nimport { DropDownListComponent } from \"@syncfusion/ej2-vue-dropdowns\";\nimport { TextBoxComponent } from '@syncfusion/ej2-vue-inputs';\nimport { CheckBoxComponent } from '@syncfusion/ej2-vue-buttons';\n\nlet isMobile;\nlet interval;\nlet diagramInstance;\nlet autoScrollDivInstance;\nlet paletteIconInstance;\nlet paletteSpaceInstance;\ninterval = [\n  1,\n  9,\n  0.25,\n  9.75,\n  0.25,\n  9.75,\n  0.25,\n  9.75,\n  0.25,\n  9.75,\n  0.25,\n  9.75,\n  0.25,\n  9.75,\n  0.25,\n  9.75,\n  0.25,\n  9.75,\n  0.25,\n  9.75\n];\n\nlet gridlines = {\n  lineColor: \"#e0e0e0\",\n  lineIntervals: interval\n};\n//Initialize the flowshapes for the symbol palatte\nlet flowshapes = [\n  { id: \"Terminator\", shape: { type: \"Flow\", shape: \"Terminator\" } },\n  { id: \"Process\", shape: { type: \"Flow\", shape: \"Process\" } },\n  { id: \"Decision\", shape: { type: \"Flow\", shape: \"Decision\" } },\n  { id: \"Document\", shape: { type: \"Flow\", shape: \"Document\" } },\n  {\n    id: \"PreDefinedProcess\",\n    shape: { type: \"Flow\", shape: \"PreDefinedProcess\" }\n  },\n  { id: \"PaperTap\", shape: { type: \"Flow\", shape: \"PaperTap\" } },\n  { id: \"DirectData\", shape: { type: \"Flow\", shape: \"DirectData\" } },\n  { id: \"SequentialData\", shape: { type: \"Flow\", shape: \"SequentialData\" } },\n  { id: \"Sort\", shape: { type: \"Flow\", shape: \"Sort\" } },\n  { id: \"MultiDocument\", shape: { type: \"Flow\", shape: \"MultiDocument\" } },\n  { id: \"Collate\", shape: { type: \"Flow\", shape: \"Collate\" } },\n  { id: \"SummingJunction\", shape: { type: \"Flow\", shape: \"SummingJunction\" } },\n  { id: \"Or\", shape: { type: \"Flow\", shape: \"Or\" } },\n  { id: \"InternalStorage\", shape: { type: \"Flow\", shape: \"InternalStorage\" } },\n  { id: \"Extract\", shape: { type: \"Flow\", shape: \"Extract\" } },\n  { id: \"ManualOperation\", shape: { type: \"Flow\", shape: \"ManualOperation\" } },\n  { id: \"Merge\", shape: { type: \"Flow\", shape: \"Merge\" } },\n  {\n    id: \"OffPageReference\",\n    shape: { type: \"Flow\", shape: \"OffPageReference\" }\n  },\n  {\n    id: \"SequentialAccessStorage\",\n    shape: { type: \"Flow\", shape: \"SequentialAccessStorage\" }\n  },\n  { id: \"Annotation\", shape: { type: \"Flow\", shape: \"Annotation\" } },\n  { id: \"Annotation2\", shape: { type: \"Flow\", shape: \"Annotation2\" } },\n  { id: \"Data\", shape: { type: \"Flow\", shape: \"Data\" } },\n  { id: \"Card\", shape: { type: \"Flow\", shape: \"Card\" } },\n  { id: \"Delay\", shape: { type: \"Flow\", shape: \"Delay\" } }\n];\n\n//Initializes basicShapes symbols for the symbol palette\nlet basicShapes = [\n   {\n      id: 'rectangle', shape: { type: 'Basic', shape: 'Rectangle' }\n  },\n  {\n      id: 'ellipse', shape: { type: 'Basic', shape: 'Ellipse' }\n  },\n  {\n      id: 'triangle', shape: { type: 'Basic', shape: 'Triangle' }\n  },\n  {\n      id: 'plus', shape: { type: 'Basic', shape: 'Plus' }\n  },\n  {\n      id: 'star', shape: { type: 'Basic', shape: 'Star' }\n  },\n  {\n      id: 'pentagon', shape: { type: 'Basic', shape: 'Pentagon' }\n  },\n  {\n      id: 'heptagon', shape: { type: 'Basic', shape: 'Heptagon' }\n  },\n  {\n      id: 'octagon', shape: { type: 'Basic', shape: 'Octagon' }\n  },\n  {\n      id: 'trapezoid', shape: { type: 'Basic', shape: 'Trapezoid' }\n  },\n  {\n      id: 'decagon', shape: { type: 'Basic', shape: 'Decagon' }\n  },\n  {\n      id: 'rightTriangle', shape: { type: 'Basic', shape: 'RightTriangle' }\n  },\n  {\n      id: 'parallelogram', shape: { type: 'Basic', shape: 'Parallelogram' }\n  },\n];\n//Initialize the connector for the symbol palatte\nlet connectorSymbols = [\n    {\n        id: 'orthogonal', type: 'Orthogonal', sourcePoint: { x: 0, y: 0 }, targetPoint: { x: 60, y: 60 }\n    },\n    {\n        id: 'orthogonalConnector', type: 'Orthogonal', sourcePoint: { x: 0, y: 0 }, targetPoint: { x: 60, y: 60 },\n         targetDecorator: { shape: 'None' }\n    },\n    {\n        id: 'straight', type: 'Straight', sourcePoint: { x: 0, y: 0 }, targetPoint: { x: 60, y: 60 }\n    },\n    {\n        id: 'straightConnector', type: 'Straight', sourcePoint: { x: 0, y: 0 }, targetPoint: { x: 60, y: 60 },\n        targetDecorator: { shape: 'None' }\n    },\n    {\n        id: 'bezier', type: 'Bezier', sourcePoint: { x: 0, y: 0 }, targetPoint: { x: 60, y: 60 },\n        targetDecorator: { shape: 'None' }\n    },\n];\n\nexport default {\n  components: {\n   'ejs-textbox': TextBoxComponent,\n   'ejs-diagram': DiagramComponent,\n   'ejs-symbolpalette': SymbolPaletteComponent,\n   'ejs-dropdownlist': DropDownListComponent,\n   'ejs-checkbox': CheckBoxComponent\n  },\n   mounted: function() {\n    diagramInstance = this.$refs.diagramObject.ej2Instances;\n    autoScrollDivInstance = this.$refs.autoScrollDiv;\n    paletteIconInstance = this.$refs.paletteIcon;\n    paletteSpaceInstance = this.$refs.paletteSpace;\n  },\n  data: function() {\n    return {\n      width: \"100%\",\n      height: \"770px\",\n      snapSettings: {\n        horizontalGridlines: gridlines,\n        verticalGridlines: gridlines\n      },  \n      created: (args) => {\n        addEvents();\n      },    \n      created: (args) => {\n        var scrollElement = this.$refs.scrollableArea;\n        scrollElement.className = \"disabledbutton\";\n      },\n      //Sets the default values of a node\n      getNodeDefaults: (node) => {\n        let obj = {};\n        if (obj.width === undefined) {\n          obj.width = 145;\n        } else {\n          let ratio = 100 / obj.width;\n          obj.width = 100;\n          if (obj.height) {\n            obj.height *= ratio;\n          }\n        }\n        obj.style = { fill: \"#357BD2\", strokeColor: \"white\" };\n        obj.annotations = [{ style: { color: \"white\", fill: \"transparent\" } }];\n\n        //Set ports\n        obj.ports = getPorts();\n        return obj;\n      },\n      //Sets the default values of a connector\n      getConnectorDefaults:getConnectorDefaults,\n    rulerSettings : {\n        showRulers : true\n      },\n      scrollSettings : {\n        scrollLimit : 'Infinity',\n        canAutoScroll: true,\n        autoScrollBorder: { left: 30, right: 30, top: 30, bottom: 30 },\n        scrollableArea: { x: 0, y: 0, width: 1500, height: 1500 }\n      },\n      waterMark : \"Infinity\",\n      scrollLimitDatasource : [{ text: 'Infinity', value: 'Infinity' }, { text: 'Diagram', value: 'Diagram' },\n       { text: 'Limited', value: 'Limited' }\n      ],\n      //Initializes a dropdown for scrollLimit\n      scrollLimitChange :(args)=>{\n        var element = this.$refs.scrollableArea;\n        element.className = args.value === \"Limited\" ? \"\" : \"disabledbutton\";\n        diagramInstance.scrollSettings.scrollLimit = args.value;\n      },\n      // Sets the horizontal scroll position of the diagram's scrollable area.\n      scrollableX: (args)=>{\n        diagramInstance.scrollSettings.scrollableArea.x = Number(args.value);\n      },\n      // Sets the vertical scroll position of the diagram's scrollable area.\n      scrollableY: (args)=>{\n        diagramInstance.scrollSettings.scrollableArea.y = Number(args.value);\n      },\n      // Sets the width of the diagram's scrollable area.\n      scrollableWidth: (args)=>{\n        diagramInstance.scrollSettings.scrollableArea.width = Number(args.value);\n      },\n      // Sets the height of the diagram's scrollable area.\n      scrollableHeight: (args)=>{\n       diagramInstance.scrollSettings.scrollableArea.height = Number(args.value);\n      },\n      // Sets the left auto-scroll border based on the provided value.\n      autoScrollLeft: (args)=>{\n       diagramInstance.scrollSettings.autoScrollBorder.left = Number(args.value);\n      },\n      // Sets the right auto-scroll border based on the provided value.\n      autoScrollRight: (args)=>{\n       diagramInstance.scrollSettings.autoScrollBorder.right = Number(args.value);\n      },\n      // Sets the top auto-scroll border based on the provided value.\n      autoScrollTop: (args)=>{\n      diagramInstance.scrollSettings.autoScrollBorder.top = Number(args.value);\n      },\n      // Sets the bottom auto-scroll border based on the provided value.\n      autoScrollBottom: (args)=>{\n      diagramInstance.scrollSettings.autoScrollBorder.bottom = Number(args.value);\n      },\n       //Initializes a checkbox to enable or disable autoscroll\n      enableAutoSroll : (args)=>{\n       let autoScrollElement = autoScrollDivInstance;\n        if (args.checked) {\n            autoScrollElement.className = '';\n            diagramInstance.scrollSettings.canAutoScroll = true;\n        } else {\n            autoScrollElement.className = 'disabledbutton';\n            diagramInstance.scrollSettings.canAutoScroll = false;\n        }\n      },\n      //Sets the node style for DragEnter element.\n      dragEnter: (args) => {\n        let obj = args.element;\n        if (obj && obj.width && obj.height) {\n          let nodeWidth = obj.width;\n          let nodeHeight = obj.height;\n          let ratio = 100 / obj.width;\n          obj.width = 100;\n          obj.height *= ratio;\n          if (obj.offsetX) obj.offsetX += (obj.width - nodeWidth) / 2;\n          if (obj.offsetY) obj.offsetY += (obj.height - nodeHeight) / 2;\n          obj.style = { fill: \"#357BD2\", strokeColor: \"white\" };\n        }\n      },\n      expandMode: \"Single\",\n      palettes: [\n           {\n          id: \"basic\",\n          expanded: true,\n          symbols: basicShapes,\n          iconCss: \"shapes\",\n          title: \"Basic Shapes\"\n        },\n        {\n          id: \"flow\",\n          expanded: true,\n          symbols: flowshapes,\n          iconCss: \"shapes\",\n          title: \"Flow Shapes\"\n        },\n         { id: 'connectors',\n          expanded: false,\n          symbols: connectorSymbols,\n          iconCss: 'e-ddb-icons e-diagram-connector',\n          title: 'Connectors'\n         }\n      ],\n      palettewidth: \"100%\",\n      paletteheight: \"770px\",\n      symbolHeight: 60,\n      symbolWidth: 60,\n      palettegetNodeDefaults: (symbol) => {\n     var obj = symbol;\n       if (obj.id === 'Terminator' || obj.id === 'Process') {\n        obj.width = 80;\n        obj.height = 40;\n    }\n    else if (obj.id === 'Decision' || obj.id === 'Document' || obj.id === 'PreDefinedProcess' ||\n        obj.id === 'PaperTap' || obj.id === 'DirectData' || obj.id === 'MultiDocument' || obj.id === 'data') {\n        obj.width = 50;\n        obj.height = 40;\n    }\n    else {\n        obj.width = 50;\n        obj.height = 50;\n    }\n    obj.style.strokeColor = '#757575';\n      },\n      symbolMargin: { left: 15, right: 15, top: 15, bottom: 15 },\n      getSymbolInfo: (symbol) => {\n        return { fit: true };\n      },\n      }\n      },\n \n}\n// Creates and initializes ports for nodes.\nfunction getPorts() {\n  let ports = [\n    { id: \"port1\", shape: \"Circle\", offset: { x: 0, y: 0.5 } },\n    { id: \"port2\", shape: \"Circle\", offset: { x: 0.5, y: 1 } },\n    { id: \"port3\", shape: \"Circle\", offset: { x: 1, y: 0.5 } },\n    { id: \"port4\", shape: \"Circle\", offset: { x: 0.5, y: 0 } }\n  ];\n  return ports;\n}\n//set default values for the connectors\nfunction getConnectorDefaults(connector){\n    setConnectorStyles(connector, '#757575');\n    return connector;\n}\n    //set styles for connector\n    function setConnectorStyles(connector, color) {\n    connector.style.strokeWidth = 1;\n    connector.style.strokeColor = color;\n    connector.targetDecorator.style.fill = color;\n    connector.targetDecorator.style.strokeColor = color;\n    }\n//To enhance the functionality of a webpage for mobile devices by adding a click event listener \nfunction addEvents() {\n    isMobile = window.matchMedia('(max-width:550px)').matches;\n    if (isMobile) {\n        let paletteIcon = paletteIconInstance;\n        if (paletteIcon){\n            paletteIcon.addEventListener('click', openPalette, false);\n        }\n    }\n}\n//To manage the visibility state of the palette space on a webpage for mobile devices\nfunction openPalette() {\n  let paletteSpace = paletteSpaceInstance;\n  isMobile = window.matchMedia('(max-width:550px)').matches;\n  if (isMobile) {\n    if (!paletteSpace.classList.contains('sb-mobile-palette-open')) {\n      paletteSpace.classList.add('sb-mobile-palette-open');\n    } else {\n      paletteSpace.classList.remove('sb-mobile-palette-open');\n    }\n  }\n} \n</script>","dependencies":"{\"vue\":\"3.3.4\",\"@syncfusion/ej2-icons\":\"*\",\"markdown-spellcheck\":\"^1.3.1\",\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-vue-base\":\"*\",\"@syncfusion/ej2-diagrams\":\"*\",\"@syncfusion/ej2-vue-diagrams\":\"*\",\"@syncfusion/ej2-dropdowns\":\"*\",\"@syncfusion/ej2-vue-dropdowns\":\"*\",\"@syncfusion/ej2-inputs\":\"*\",\"@syncfusion/ej2-vue-inputs\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-vue-buttons\":\"*\",\"@syncfusion/ej2-vue-charts\":\"*\",\"@syncfusion/ej2-vue-maps\":\"*\",\"@syncfusion/ej2-vue-calendars\":\"*\",\"@syncfusion/ej2-data\":\"*\",\"@syncfusion/ej2-vue-grids\":\"*\"}","src/main.js":"import { createApp } from 'vue'\nimport App from './App.vue'\ncreateApp(App).mount('#app')"}