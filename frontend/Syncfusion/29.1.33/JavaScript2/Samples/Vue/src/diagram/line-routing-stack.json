{"public/index.html":"<!DOCTYPE html>\r\n<html lang=\"en\">\r\n\r\n<head>\r\n    <meta charset=\"utf-8\">\r\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\r\n    <meta name=\"viewport\" content=\"width=device-width,initial-scale=1.0\">\r\n    <link rel=\"icon\" href=\"<%= BASE_URL %>favicon.ico\">\r\n    <title>\r\n        <%= htmlWebpackPlugin.options.title %>\r\n    </title>\r\n    <link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\r\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\r\n</head>\r\n\r\n<body>\r\n    <noscript>\r\n        <strong>We're sorry but <%= htmlWebpackPlugin.options.title %> doesn't work properly without JavaScript enabled.\r\n        Please enable it to continue.</strong>\r\n    </noscript>\r\n    <div id=\"app\"></div>\r\n    <style>\r\n            .control-section\r\n            {\r\n                margin-top: 100px;\r\n            }\r\n    </style>\r\n    <!-- built files will be auto injected -->\r\n</body>\r\n\r\n</html>\r\n","src/App.vue":"<template>\n<div class=\"control-section\">\n<div style=\"width:100%\">\n    <ejs-diagram style='display:block'  ref=\"diagramObj\" id=\"diagram\" :width='width' :height='height' :nodes='nodes' :connectors= connectors :getNodeDefaults='getNodeDefaults'\n                 :snapSettings='snapSettings' :constraints= 'constraints' :getConnectorDefaults= 'getConnectorDefaults'></ejs-diagram>\n    </div>\n</div>\n</template>\n\n<script>\nimport {\n  DiagramComponent,\n  LineRouting,\n  ConnectorBridging,\n  DiagramConstraints,\n  PortVisibility\n} from \"@syncfusion/ej2-vue-diagrams\";\nimport { Node, SnapConstraints } from \"@syncfusion/ej2-vue-diagrams\";\nimport {\n  DropDownListComponent,\n  DropDownList,\n  ChangeEventArgs as DropDownChangeEventArgs\n} from \"@syncfusion/ej2-vue-dropdowns\";\n\nlet nodes = [\n  {\n    id: 'start', offsetX: 115, offsetY: 110,\n    shape: { type: 'Flow', shape: 'Terminator' },\n    style: { fill: '#D5535D' },\n    ports: [{ id: 'port1', offset: { x: 0.5, y: 0 }, visibility: PortVisibility.Hidden }],\n    annotations: [{\n      content: 'Start'\n    }]\n  },\n  {\n    id: 'process', offsetX: 115, offsetY: 255,\n    shape: { type: 'Flow', shape: 'Process' },\n    style: { fill: \"#65B091\" },\n    annotations: [{\n      content: 'Process'\n    }]\n  },\n  {\n    id: 'document', offsetX: 115, offsetY: 400,\n    shape: { type: 'Flow', shape: 'Document' },\n    style: { fill: \"#5BA5F0\" },\n    ports: [{ id: 'port1', offset: { x: 0, y: 0.5 }, visibility: PortVisibility.Hidden }],\n    annotations: [{\n      content: 'Document'\n    }]\n  },\n  {\n    id: 'decision', offsetX: 390, offsetY: 110,\n    shape: { type: 'Flow', shape: 'Decision' },\n    style: { fill: \"#9A8AF7\" },\n    annotations: [{\n      content: 'Decision'\n\n    }]\n  },\n  {\n    id: 'document2', offsetX: 390, offsetY: 255,\n    shape: { type: 'Flow', shape: 'Document' },\n    style: { fill: \"#5BA5F0\" },\n    annotations: [{\n      content: 'Document'\n\n    }]\n  },\n  {\n    id: 'end', offsetX: 390, offsetY: 400,\n    shape: { type: 'Flow', shape: 'Terminator' },\n    style: { fill: \"#9A8AF7\" },\n    annotations: [{\n      content: 'End'\n\n    }]\n  },\n  {\n    id: 'process2', offsetX: 640, offsetY: 110,\n    shape: { type: 'Flow', shape: 'Process' },\n    style: { fill: \"#65B091\" },\n    annotations: [{\n      content: 'Process'\n    }]\n  },\n  {\n    id: 'card', offsetX: 640, offsetY: 255,\n    shape: { type: 'Flow', shape: 'Card' },\n    style: { fill: \"#9A8AF7\" },\n    annotations: [{\n      content: 'Card',\n    }],\n    ports: [\n      { id: 'port1', offset: { x: 1, y: 0.5 }, visibility: PortVisibility.Hidden },\n      { id: 'port2', offset: { x: 0.5, y: 1 }, visibility: PortVisibility.Hidden }\n    ],\n  }\n];\n\nlet connectors = [\n  {\n    id: 'Connector1', sourceID: 'start', targetID: 'process',\n  },\n  {\n    id: 'Connector2', sourceID: 'process', targetID: 'document'\n  },\n  {\n    id: 'Connector3', sourceID: 'document', targetID: 'end',\n  },\n  {\n    id: 'Connector4', sourceID: 'start', targetID: 'decision'\n  },\n  {\n    id: 'Connector5', sourceID: 'decision', targetID: 'process2',\n  },\n  {\n    id: 'Connector6', sourceID: 'process2', targetID: 'card',\n  },\n  {\n    id: 'Connector7', sourceID: 'process', targetID: 'document2'\n  },\n  {\n    id: 'Connector8', sourceID: 'document2', targetID: 'card',\n  },\n  {\n    id: 'Connector9', sourceID: 'start', sourcePortID: \"port1\",\n    targetID: 'card', targetPortID: 'port1'\n  },\n  {\n    id: 'Connector10', sourceID: 'card', sourcePortID: 'port2',\n    targetID: 'document', targetPortID: 'port1'\n  },\n];\n\n\n\nlet diagramInstance;\n\nexport default {\n  components: {\n    'ejs-diagram': DiagramComponent,\n    'ejs-dropdownlist': DropDownListComponent\n  },\n  data: function() {\n  return {\n    // Define the width and height of the diagram\n    width: \"100%\",\n    height: \"499px\",\n    // Snap settings to disable snapping\n    snapSettings: { constraints: SnapConstraints.None },\n    // Initial nodes and connectors data\n    nodes: nodes,\n    connectors: connectors,\n    // Diagram constraints including bridging and line routing\n    constraints: DiagramConstraints.Default | (DiagramConstraints.Bridging | DiagramConstraints.LineRouting),\n    // Defines default properties for nodes\n    getNodeDefaults: (obj, diagram) => {\n      obj.height = 50;\n      if (obj.id === 'decision') {\n        obj.height = 70; // Adjust height for specific node types\n      }\n      obj.width = 120;\n      obj.style = { strokeColor: 'transparent' }; // Node style with transparent stroke\n      return obj;\n    },\n    // Defines default properties for connectors\n    getConnectorDefaults: (connector) => {\n      connector.type = 'Orthogonal'; // Connector type as Orthogonal\n      connector.style = { strokeColor: '#707070 ', strokeWidth: 1.25 }; // Connector style with specific stroke\n      connector.targetDecorator = { style: { fill: '#707070 ', strokeColor: '#707070 ' } }; // Connector target decorator style\n      return connector;\n    },\n  };\n},\nprovide: {\n  diagram: [LineRouting, ConnectorBridging]\n},\nmounted: function() {\n  // Initialize diagram instance and related components\n  diagramInstance = this.$refs.diagramObj.ej2Instances;\n  diagramInstance.fitToPage();\n}\n}\n\n</script>","dependencies":"{\"vue\":\"3.3.4\",\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-vue-base\":\"*\",\"@syncfusion/ej2-diagrams\":\"*\",\"@syncfusion/ej2-vue-diagrams\":\"*\",\"@syncfusion/ej2-dropdowns\":\"*\",\"@syncfusion/ej2-vue-dropdowns\":\"*\",\"@syncfusion/ej2-vue-charts\":\"*\",\"@syncfusion/ej2-vue-maps\":\"*\",\"@syncfusion/ej2-vue-calendars\":\"*\",\"@syncfusion/ej2-data\":\"*\",\"@syncfusion/ej2-vue-grids\":\"*\"}","src/main.js":"import { createApp } from 'vue'\nimport App from './App.vue'\ncreateApp(App).mount('#app')"}