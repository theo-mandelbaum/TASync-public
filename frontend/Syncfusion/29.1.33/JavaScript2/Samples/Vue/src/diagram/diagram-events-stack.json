{"public/index.html":"<!DOCTYPE html>\r\n<html lang=\"en\">\r\n\r\n<head>\r\n    <meta charset=\"utf-8\">\r\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\r\n    <meta name=\"viewport\" content=\"width=device-width,initial-scale=1.0\">\r\n    <link rel=\"icon\" href=\"<%= BASE_URL %>favicon.ico\">\r\n    <title>\r\n        <%= htmlWebpackPlugin.options.title %>\r\n    </title>\r\n    <link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\r\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\r\n</head>\r\n\r\n<body>\r\n    <noscript>\r\n        <strong>We're sorry but <%= htmlWebpackPlugin.options.title %> doesn't work properly without JavaScript enabled.\r\n        Please enable it to continue.</strong>\r\n    </noscript>\r\n    <div id=\"app\"></div>\r\n    <style>\r\n            .control-section\r\n            {\r\n                margin-top: 100px;\r\n            }\r\n    </style>\r\n    <!-- built files will be auto injected -->\r\n</body>\r\n\r\n</html>\r\n","src/App.vue":"<template>\n  <div>\n     <!-- Left section: Symbol Palette -->\n    <div class=\"col-lg-8 control-section\">\n      <div id=\"diagramEventsControlSection\" class=\"content-wrapper diagramEvents-ControlSection\" style=\"width:100%;background: white\">\n        <div id=\"palette-space\" class=\"sb-mobile-palette\">\n          <ejs-symbolpalette id=\"symbolpalette\" :expandMode='expandMode' :palettes='palettes' :width='palettewidth' :height='paletteheight'  :getSymbolInfo='getSymbolInfo' :symbolMargin='symbolMargin' :symbolHeight='symbolHeight' :symbolWidth='symbolWidth' :getNodeDefaults='palettegetNodeDefaults' :getConnectorDefaults='getConnectorDefaults'></ejs-symbolpalette>\n        </div>\n         <!-- Diagram Component -->\n        <div id=\"diagram-space\" class=\"sb-mobile-diagram\">\n          <ejs-diagram ref=\"diagramControl\" id=\"diagram\" width=\"100%\" height=\"700px\" :contextMenuSettings=\"contextMenu\" :snapSettings='snapSettings' :dragEnter=\"dragEnter\" :dragLeave=\"dragLeave\" :dragOver=\"dragOver\" :click=\"click\" :historyChange=\"historyChange\" :doubleClick=\"doubleClick\" :textEdit=\"textEdit\" :scrollChange=\"scrollChange\" :selectionChange=\"selectionChange\" :sizeChange=\"sizeChange\" :connectionChange=\"connectionChange\" :sourcePointChange=\"sourcePointChange\" :targetPointChange=\"targetPointChange\" :propertyChange=\"propertyChange\" :positionChange=\"positionChange\" :rotateChange=\"rotateChange\" :collectionChange=\"collectionChange\" :mouseEnter=\"mouseEnter\" :mouseLeave=\"mouseLeave\" :mouseOver=\"mouseOver\" :contextMenuOpen=\"contextMenuOpen\" :contextMenuBeforeItemRender=\"contextMenuBeforeItemRender\" :contextMenuClick=\"contextMenuClick\">\n          </ejs-diagram>\n        </div>\n      </div>\n    </div>\n     <!-- Right section: Property Panel -->\n    <div class=\"col-lg-4 property-section\">\n      <div id=\"diagramEventsPropertySection\" style=\"height:100%;border: 1px solid #e0e0e0\">\n         <!-- Listview for event selection -->\n        <div class=\"listbox\">\n          <div class=\"heading\" style=\"height:40px\">\n            <span>Client-side events</span>\n          </div>\n          <ejs-listview id='listview-def' ref=\"listView\" :dataSource='data' showCheckBox='true' height=\"calc(100% - 40px)\"></ejs-listview>\n        </div>\n        <!-- Event Log panel -->\n        <div class=\"prop-grid content\" style=\"height:50%; border-top: 1px solid #e0e0e0\">\n          <div class=\"heading\">\n            <span style=\"display: inline-block;margin-top: 5px;\">Event Trace</span>\n            <div class=\"evtbtn\">\n              <ejs-button id=\"clearButton\" ref=\"clearButton\">Clear</ejs-button>\n            </div>\n          </div>\n          <div id=\"EventLog\" ref=\"EventLog\">\n          </div>\n        </div>\n      </div>\n    </div>\n     <!-- Description sections -->\n  </div>\n</template>\n\n  <style scoped>\n  /* Symbol palette alignment CSS */\n#diagramEventsControlSection .sb-mobile-palette {\n  width: 200px;\n  height: 100%;\n  float: left;\n}\n\n#diagramEventsControlSection .sb-mobile-palette-bar {\n  display: none;\n}\n/* Diagram alignment CSS */\n#diagramEventsControlSection .sb-mobile-diagram {\n  width: calc(100% - 200px);\n  height: 100%;\n  float: left;\n  border: 1px solid #d9dedd;\n}\n\n@media (max-width: 550px) {\n  #diagramEventsControlSection .sb-mobile-palette {\n    z-index: 19;\n    position: absolute;\n    display: none;\n    transition: transform 300ms linear, visibility 0s linear 300ms;\n    width: 39%;\n    height: 100%;\n  }\n\n  #diagramEventsControlSection .sb-mobile-palette-bar {\n    display: block;\n    width: 100%;\n    background: #fafafa;\n    padding: 10px 10px;\n    border: 0.5px solid #e0e0e0;\n    min-height: 40px;\n  }\n\n  #diagramEventsControlSection .sb-mobile-diagram {\n    width: 100%;\n    height: 100%;\n    float: left;\n    left: 0px;\n  }\n\n  #diagramEventsControlSection #palette-icon {\n    font-size: 20px;\n  }\n}\n\n#diagramEventsControlSection .sb-mobile-palette-open {\n  position: absolute;\n  display: block;\n  right: 15px;\n}\n\n /* Event property panel CSS */\n /* Styles for Event Property Panel */\n#diagramEventsPropertySection .event-tracer {\n  width: 240px;\n  height: 700px;\n  min-height: 700px;\n  float: left;\n}\n\n#diagramEventsPropertySection .heading {\n  color: #807f7f;\n  font-size: 15px;\n  height: 50px;\n  width: 100%;\n  border-bottom: 1px solid #d9dedd;\n  padding: 10px;\n}\n /* This color is to indicate the event name in specific color */\n #EventLog b {\n      color: #388e3c;\n    }\n\n    hr {\n      margin: 1px 10px 1px 0px;\n      border-top: 1px solid #eee;\n    }\n  /* Property panel CSS */\n.property-section {\n  padding-top: 20px;\n  padding-bottom: 20px;\n  height: 740px;\n  padding-right: 0px;\n}\n\n#diagramEventsPropertySection .evtbtn {\n  float: right;\n}\n\n#diagramEventsPropertySection .listbox {\n  width: 100%;\n  height: 50%;\n}\n\n#diagramEventsPropertySection .event-tracer .prop-grid {\n  width: 100%;\n  height: 50%;\n}\n\n.diagramEvents-ControlSection{\n  display: flex;\n}\n\n#diagramEventsPropertySection #EventLog {\n  height: calc(100% - 50px);\n  padding: 15px;\n  overflow: auto;\n  width: 100%;\n}\n</style>\n\n<script>\n// Import necessary Vue components and Syncfusion libraries\nimport {\n  DiagramComponent,\n  SymbolPaletteComponent,\n  Diagram, DiagramContextMenu, NodeConstraints\n} from \"@syncfusion/ej2-vue-diagrams\";\nimport { ListViewComponent } from \"@syncfusion/ej2-vue-lists\";\nimport { ButtonComponent } from \"@syncfusion/ej2-vue-buttons\";\n\nlet diagramInstance;\nlet  listviewInstance;\nlet eventlogInstance;\nlet clearButtonInstance;\n// Symbol palette items: Basic shapes and connectors\nlet basicShapes = [\n  { id: 'Rectangle', shape: { type: 'Basic', shape: 'Rectangle' } },\n  { id: 'Ellipse', shape: { type: 'Basic', shape: 'Ellipse' } },\n  { id: 'Parallelogram', shape: { type: 'Basic', shape: 'Parallelogram' } },\n  { id: 'Triangle', shape: { type: 'Basic', shape: 'Triangle' } },\n  { id: 'Hexagon', shape: { type: 'Basic', shape: 'Hexagon' } },\n  { id: 'Pentagon', shape: { type: 'Basic', shape: 'Pentagon' } },\n  { id: 'Cylinder', shape: { type: 'Basic', shape: 'Cylinder' } },\n  { id: 'Plus', shape: { type: 'Basic', shape: 'Plus' } },\n  { id: 'Heptagon', shape: { type: 'Basic', shape: 'Heptagon' } },\n  { id: 'Octagon', shape: { type: 'Basic', shape: 'Octagon' } },\n  { id: 'Trapezoid', shape: { type: 'Basic', shape: 'Trapezoid' } },\n  { id: 'Decagon', shape: { type: 'Basic', shape: 'Decagon' } },\n  { id: 'RightTriangle', shape: { type: 'Basic', shape: 'RightTriangle' } },\n  { id: 'Diamond', shape: { type: 'Basic', shape: 'Diamond' } },\n  { id: 'Star', shape: { type: 'Basic', shape: 'Star' } }\n];\n\nlet connectorSymbols = [\n  {\n    id: 'Link1', type: 'Orthogonal', sourcePoint: { x: 0, y: 0 }, targetPoint: { x: 60, y: 60 },\n    targetDecorator: { shape: 'Arrow', style: {strokeColor: \"#757575\", fill: \"#757575\"} }\n  },\n  {\n    id: 'link3', type: 'Orthogonal', sourcePoint: { x: 0, y: 0 }, targetPoint: { x: 60, y: 60 },\n     targetDecorator: { shape: 'None' }\n  },\n  {\n    id: 'Link21', type: 'Straight', sourcePoint: { x: 0, y: 0 }, targetPoint: { x: 60, y: 60 },\n    targetDecorator: { shape: 'Arrow', style: {strokeColor: \"#757575\", fill: \"#757575\"} }\n  },\n  {\n    id: 'link23', type: 'Straight', sourcePoint: { x: 0, y: 0 }, targetPoint: { x: 60, y: 60 },\n    targetDecorator: { shape: 'None' }\n  },\n  {\n    id: 'link33', type: 'Bezier', sourcePoint: { x: 0, y: 0 }, targetPoint: { x: 60, y: 60 },\n    targetDecorator: { shape: 'None' }\n  },\n];\n\nexport default {\n  components: {\n    'ejs-diagram': DiagramComponent,\n    'ejs-symbolpalette': SymbolPaletteComponent,\n    'ejs-listview': ListViewComponent,\n    'ejs-button': ButtonComponent\n  },\n  data: function() {\n    return {\n      // listview data\n      data: [\n        { text: 'Drag enter', id: 'dragEnter' },\n        { text: 'Drag leave', id: 'dragLeave' },\n        { text: 'Drag over', id: 'dragOver' },\n        { text: 'Click', id: 'click', isChecked: true },\n        { text: 'History change', id: 'historyChange', isChecked: true },\n        { text: 'Double click', id: 'doubleClick' },\n        { text: 'Text edit', id: 'textEdit', isChecked: true },\n        { text: 'Scroll change', id: 'scrollChange' },\n        { text: 'Selection change', id: 'selectionChange', isChecked: true },\n        { text: 'Size change', id: 'sizeChange', isChecked: true },\n        { text: 'Connection change', id: 'connectionChange', isChecked: true },\n        { text: 'SourcePoint change', id: 'sourcePointChange' },\n        { text: 'TargetPoint change', id: 'targetPointChange' },\n        { text: 'Position change', id: 'positionChange', isChecked: true },\n        { text: 'Rotate change', id: 'rotateChange', isChecked: true },\n        { text: 'Collection change', id: 'collectionChange', isChecked: true },\n        { text: 'Mouse enter', id: 'mouseEnter' },\n        { text: 'Mouse leave', id: 'mouseLeave' },\n        { text: 'Mouse over', id: 'mouseOver' },\n        { text: 'Context menu open', id: 'contextMenuOpen' },\n        { text: 'Context menu before item render', id: 'contextMenuBeforeItemRender' },\n        { text: 'Context menu click', id: 'contextMenuClick' }\n      ],\n\n      //Initializes diagram control\n      width: \"100%\",\n      height: 700,\n      snapSettings: { constraints: 0 },\n      contextMenu: { show: true },\n\n      //diagram events\n      dragEnter: (args) => {\n        getEventDetails(args);\n      },\n      dragLeave: (args) => {\n        getEventDetails(args);\n      },\n      dragOver: (args) => {\n        if (args.target) {\n          getEventDetails(args);\n        }\n      },\n      click: (args) => {\n        getEventDetails(args);\n      },\n      historyChange: (args) => {\n        getEventDetails(args);\n      },\n      doubleClick: (args) => {\n        getEventDetails(args);\n      },\n      textEdit: (args) => {\n        getEventDetails(args);\n      },\n      scrollChange: (args) => {\n        getEventDetails(args);\n      },\n      selectionChange: (args) => {\n        if (args.state === \"Changed\") {\n          getEventDetails(args);\n        }\n      },\n      sizeChange: (args) => {\n        if (args.state === \"Completed\") {\n          getEventDetails(args);\n        }\n      },\n      connectionChange: (args) => {\n        if (args.state === \"Changed\") {\n          getEventDetails(args);\n        }\n      },\n      sourcePointChange: (args) => {\n        if (args.state === \"Completed\") {\n          getEventDetails(args);\n        }\n      },\n      targetPointChange: (args) => {\n        if (args.state === \"Completed\") {\n          getEventDetails(args);\n        }\n      },\n      propertyChange: (args) => {\n        getEventDetails(args);\n      },\n      positionChange: (args) => {\n        if (args.state === \"Completed\") {\n          getEventDetails(args);\n        }\n      },\n      rotateChange: (args) => {\n        if (args.state === \"Completed\") {\n          getEventDetails(args);\n        }\n      },\n      collectionChange: (args) => {\n        if (args.state === \"Changed\") {\n          getEventDetails(args);\n        }\n      },\n      mouseEnter: (args) => {\n        getEventDetails(args);\n      },\n      mouseLeave: (args) => {\n        getEventDetails(args);\n      },\n      mouseOver: (args) => {\n        getEventDetails(args);\n      },\n      contextMenuOpen: (args) => {\n        getEventDetails(args);\n      },\n      contextMenuBeforeItemRender: (args) => {\n        let listViewComponent = listviewInstance ? listviewInstance: null;\n        if(listViewComponent) {          \n         getEventDetails(args);\n        }\n      },\n      contextMenuClick: (args) => {\n        getEventDetails(args);\n      },\n      // Initialize palette\n      expandMode: \"Multiple\",\n      palettes: [\n        {\n          id: \"basic\",\n          expanded: true,\n          symbols: basicShapes,\n          iconCss: \"shapes\",\n          title: \"Basic Shapes\"\n        },\n        {\n          id: \"connectors\",\n          expanded: true,\n          symbols: connectorSymbols,\n          iconCss: \"shapes\",\n          title: \"Connectors\"\n        }\n      ],\n      palettewidth: \"100%\",\n      paletteheight: \"700px\",\n      palettegetNodeDefaults: (symbol) => {\n        symbol.style = {strokeColor: \"#757575\"};\n        symbol.constraints = NodeConstraints.Default | NodeConstraints.AllowDrop;\n      },\n      symbolHeight: 60,\n      symbolWidth: 60,\n      symbolMargin: { left: 15, right: 15, top: 15, bottom: 15 },\n      getSymbolInfo: (symbol) => {\n        return { fit: true };\n      },\n      getConnectorDefaults: function (connector) {\n            connector.style = { strokeWidth: 1 , strokeColor: '#757575' };\n        },\n      };\n  },\n  provide: {\n    diagram: [DiagramContextMenu]\n  },\n  mounted: function() {\n    diagramInstance = this.$refs.diagramControl.ej2Instances;\n    listviewInstance = this.$refs.listView.ej2Instances;\n    eventlogInstance = this.$refs.EventLog;\n    clearButtonInstance = this.$refs.clearButton.ej2Instances.element;\n    //Click Event for Appearance of the layout.\n    clearEventLog();\n    clearButtonInstance.onclick = (args) => {\n      clearEventLog();\n    }\n  }\n}\n// Function to clear the event log\nfunction clearEventLog() {\n  let data = eventlogInstance;\n  data.innerHTML = '';\n}\n// Function to get event details based on selected items\nfunction getEventDetails(args) {\n    let listViewComponent = listviewInstance;\n    let selectedItems = listViewComponent.getSelectedItems();\n    if (selectedItems.data.length > 0) {\n      let elementName = getName(selectedItems, args);\n      if (elementName) {\n        eventInformation(args);\n      }\n    }\n   \n}\n// Function to check if the event name matches any selected item\nfunction getName(selectedItems, args) {\n  for (let i = 0; i < selectedItems.data.length; i++) {\n    let eventName = selectedItems.data[i].id;\n    if (eventName === args.name) {\n      return true;\n    }\n  }\n  return false;\n}\n// tslint:disable-next-line:max-func-body-length\n// Function to display event information in the event log\nfunction eventInformation(args) {\n  let span = document.createElement('span');\n  span.innerHTML = 'Diagram ' + args.name.bold() + ' event called' + '<hr>';\n  let log = eventlogInstance;\n  log.insertBefore(span, log.firstChild);\n}\n\n</script>\n","dependencies":"{\"vue\":\"3.3.4\",\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-vue-base\":\"*\",\"@syncfusion/ej2-diagrams\":\"*\",\"@syncfusion/ej2-vue-diagrams\":\"*\",\"@syncfusion/ej2-lists\":\"*\",\"@syncfusion/ej2-vue-lists\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-vue-buttons\":\"*\",\"@syncfusion/ej2-vue-charts\":\"*\",\"@syncfusion/ej2-vue-maps\":\"*\"}","src/main.js":"import { createApp } from 'vue'\nimport App from './App.vue'\ncreateApp(App).mount('#app')"}