{"public/index.html":"<!DOCTYPE html>\r\n<html lang=\"en\">\r\n\r\n<head>\r\n    <meta charset=\"utf-8\">\r\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\r\n    <meta name=\"viewport\" content=\"width=device-width,initial-scale=1.0\">\r\n    <link rel=\"icon\" href=\"<%= BASE_URL %>favicon.ico\">\r\n    <title>\r\n        <%= htmlWebpackPlugin.options.title %>\r\n    </title>\r\n    <link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\r\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\r\n</head>\r\n\r\n<body>\r\n    <noscript>\r\n        <strong>We're sorry but <%= htmlWebpackPlugin.options.title %> doesn't work properly without JavaScript enabled.\r\n        Please enable it to continue.</strong>\r\n    </noscript>\r\n    <div id=\"app\"></div>\r\n    <style>\r\n            .control-section\r\n            {\r\n                margin-top: 100px;\r\n            }\r\n    </style>\r\n    <!-- built files will be auto injected -->\r\n</body>\r\n\r\n</html>\r\n","src/App.vue":"<template>\n<div class=\"control-section\">\n<div class=\"col-lg-8 control-section\" id=\"palette-space\">\n    <ejs-symbolpalette ref=\"paletteObj\" id=\"symbolpalette\" :expandMode='expandMode' :palettes='palettes' :enableAnimation='enableAnimation' :width='width' :height='height' :getNodeDefaults='getNodeDefaults' :getSymbolInfo='getSymbolInfo' :symbolMargin='symbolMargin' :symbolHeight='symbolHeight' :symbolWidth='symbolWidth'></ejs-symbolpalette>\n</div>\n<div class=\"col-lg-4 property-section\">\n    <table id=\"property\" title=\"Properties\">\n        <tr>\n            <td>\n                <div>Expandable: </div>\n            </td>\n            <td>\n                <!-- DropDownList is used to change the expandMode of the Symbolpallete. -->\n                <ejs-dropdownlist ref=\"expandObj\" id=\"expand\" :index='expandIndex' :dataSource='expandDataSource' :change='expandChange'/>\n            </td>\n        </tr>\n        <tr>\n            <td>\n                <div>Symbol Size: </div>\n            </td>\n            <td>\n                <!-- NumericTextBox is used to apply the size of the Symbol. -->\n                <ejs-numerictextbox ref='sizeObj' id='size' :value='sizeValue' :min='sizeMinimum' :max='sizeMaximum' :width='sizeWidth' :step='sizeStep' :format='sizeFormat' :change='sizeChange'></ejs-numerictextbox>\n            </td>\n        </tr>\n        <tr>\n            <td>\n                <div>Animation: </div>\n            </td>\n            <td>\n                <!-- enable or disable the animation of the symbol palette. -->\n                <ejs-checkbox id=\"animation\" :checked='animationChecked' :change='animationChange'></ejs-checkbox>\n            </td>\n        </tr>\n        <tr>\n            <td>\n                <div>Item Text: </div>\n            </td>\n            <td>\n                <ejs-checkbox id=\"itemtext\" :change='itemTextChange'></ejs-checkbox>\n            </td>\n        </tr>\n    </table>\n</div>\n</div>\n</template>\n\n<script>\nimport {\n  DiagramComponent,\n  Diagram,\n  UndoRedo,\n \n  SymbolPaletteComponent,\n  \n} from \"@syncfusion/ej2-vue-diagrams\";\nimport {\n  DropDownList,\n  DropDownListComponent\n} from \"@syncfusion/ej2-vue-dropdowns\";\nimport {\n  CheckBox,\n  ChangeEventArgs,\n  CheckBoxComponent\n} from \"@syncfusion/ej2-vue-buttons\";\nimport {\n  NumericTextBox,\n  NumericTextBoxComponent\n} from \"@syncfusion/ej2-vue-inputs\";\n\n//Initialize the flowShapes for the symbol palatte\nlet flowShapes = [\n  { id: \"Terminator\", shape: { type: \"Flow\", shape: \"Terminator\" } },\n  { id: \"Process\", shape: { type: \"Flow\", shape: \"Process\" } },\n  { id: \"Sort\", shape: { type: \"Flow\", shape: \"Sort\" } },\n  { id: \"Document\", shape: { type: \"Flow\", shape: \"Document\" } },\n  {\n    id: \"PreDefinedProcess\",\n    shape: { type: \"Flow\", shape: \"PreDefinedProcess\" }\n  },\n  { id: \"PaperTap\", shape: { type: \"Flow\", shape: \"PaperTap\" } },\n  { id: \"DirectData\", shape: { type: \"Flow\", shape: \"DirectData\" } },\n  { id: \"SequentialData\", shape: { type: \"Flow\", shape: \"SequentialData\" } }\n];\n//Initialize the basichapes for the symbol palatte\nlet basicShapes = [\n  { id: \"Rectangle\", shape: { type: \"Basic\", shape: \"Rectangle\" } },\n  { id: \"Ellipse\", shape: { type: \"Basic\", shape: \"Ellipse\" } },\n  { id: \"Parallelogram\", shape: { type: \"Basic\", shape: \"Parallelogram\" } },\n  { id: \"Triangle\", shape: { type: \"Basic\", shape: \"Triangle\" } },\n  { id: \"Hexagon\", shape: { type: \"Basic\", shape: \"Hexagon\" } },\n  { id: \"Pentagon\", shape: { type: \"Basic\", shape: \"Pentagon\" } },\n  { id: \"Cylinder\", shape: { type: \"Basic\", shape: \"Cylinder\" } },\n  { id: \"Star\", shape: { type: \"Basic\", shape: \"Star\" } }\n];\n//Initializes connector symbols for the symbol palette\nlet connectorSymbols = [\n  {\n    id: \"Link1\",\n    type: \"Orthogonal\",\n    sourcePoint: { x: 0, y: 0 },\n    targetPoint: { x: 40, y: 40 },\n    targetDecorator: { shape: \"Arrow\", style: { fill: \"#757575\", strokeColor: \"#757575\" } },\n    style: { strokeWidth: 2, strokeColor: \"#757575\" }\n  },\n  {\n    id: \"link3\",\n    type: \"Orthogonal\",\n    sourcePoint: { x: 0, y: 0 },\n    targetPoint: { x: 40, y: 40 },\n    style: { strokeWidth: 2, strokeColor: \"#757575\" },\n    targetDecorator: { shape: \"None\" }\n  },\n  {\n    id: \"Link21\",\n    type: \"Straight\",\n    sourcePoint: { x: 0, y: 0 },\n    targetPoint: { x: 40, y: 40 },\n    targetDecorator: { shape: \"Arrow\", style: { fill: \"#757575\", strokeColor: \"#757575\" } },\n    style: { strokeWidth: 2, strokeColor: \"#757575\" }\n  },\n  {\n    id: \"link23\",\n    type: \"Straight\",\n    sourcePoint: { x: 0, y: 0 },\n    targetPoint: { x: 40, y: 40 },\n    style: { strokeWidth: 2, strokeColor: \"#757575\" },\n    targetDecorator: { shape: \"None\" }\n  },\n  {\n    id: \"link33\",\n    type: \"Bezier\",\n    sourcePoint: { x: 0, y: 0 },\n    targetPoint: { x: 40, y: 40 },\n    style: { strokeWidth: 2, strokeColor: \"#757575\" },\n    targetDecorator: { shape: \"None\" }\n  }\n];\n\n//Collection of expandMode\nlet expandMode = [\n  { type: \"Single\", text: \"Single\" },\n  { type: \"Multiple\", text: \"Multiple\" }\n];\n\nlet palette;\nlet size;\nlet expand;\n\nexport default {\n  components: {\n    'ejs-diagram': DiagramComponent,\n    'ejs-checkbox': CheckBoxComponent,\n    'ejs-numerictextbox': NumericTextBoxComponent,\n    'ejs-dropdownlist': DropDownListComponent,\n    'ejs-symbolpalette': SymbolPaletteComponent\n  },\n  data: function() {\n    return {\n      expandMode: \"Multiple\",\n      allowDrag: true,\n      //Initialize palette\n      palettes: [\n        {\n          id: \"flow\",\n          iconCss: 'e-ddb-icons e-flow', \n          expanded: true,\n          symbols: flowShapes,\n          title: \"Flow Shapes\"\n        },\n        {\n          id: \"basic\",\n          iconCss: 'e-ddb-icons e-basic',\n          expanded: true,\n          symbols: basicShapes,\n          title: \"Basic Shapes\"\n        },\n        {\n          id: \"connectors\",\n          expanded: true,\n          iconCss: 'e-ddb-icons e-diagram-connector',\n          symbols: connectorSymbols,\n          title: \"Connectors\"\n        }\n      ],\n      enableAnimation: true,\n      width: \"100%\",\n      height: \"700px\",\n      symbolHeight: 80,\n      symbolWidth: 80,\n      //set Node default value\n      getNodeDefaults: (symbol) => {\n        if (symbol.id === \"Terminator\" || symbol.id === \"Process\") {\n          symbol.width = 80;\n          symbol.height = 40;\n        } else if (\n          symbol.id === \"Document\" ||\n          symbol.id === \"PreDefinedProcess\" ||\n          symbol.id === \"PaperTap\" ||\n          symbol.id === \"DirectData\"\n        ) {\n          symbol.width = 50;\n          symbol.height = 40;\n        }\n        symbol.style = { strokeWidth: 2, strokeColor: \"#757575\" };\n      },\n      getSymbolInfo: (symbol) => {\n        return { fit: true };\n      },\n      symbolMargin: { left: 15, right: 15, top: 15, bottom: 15 },\n      //Change the expandMode of the Symbolpallete.\n      expandDataSource: expandMode,\n      expandIndex: 1,\n      expandChange: () => {\n        palette.expandMode = expand.value;\n        palette.dataBind();\n      },\n      //Apply the size of the Symbol.\n      sizeValue: 80,\n      sizeMinimum: 60,\n      sizeMaximum: 100,\n      sizeWidth: 120,\n      sizeStep: 5,\n      sizeFormat: \"##.##\",\n      sizeChange: () => {\n        palette.symbolHeight = size.value;\n        palette.symbolWidth = size.value;\n      },\n\n      animationChecked: true,\n      animationChange: onAnimationChange,\n\n      itemTextChange: onItemTextChange,\n\n      headerIconchange: onHeaderIconChange\n    };\n  },\n  provide: {\n    diagram: [UndoRedo]\n  },\n  mounted: function() {\n    palette = this.$refs.paletteObj.ej2Instances;\n    size = this.$refs.sizeObj.ej2Instances;\n    expand = this.$refs.expandObj.ej2Instances;\n    palette.dataBind();\n  }\n}\n\n//Add the header icon for palette.\nfunction onHeaderIconChange(args) {\n  for (let i= 0; i < palette.palettes.length; i++) {\n    if (args.checked) {\n      palette.palettes[i].iconCss = \"shapes\";\n    } else {\n      palette.palettes[i].iconCss = \"\";\n    }\n  }\n}\n\n//Enable or disable the animation for symbol palette\nfunction onAnimationChange(args) {\n  palette.enableAnimation = args.checked;\n}\n\n//Add or Remove the Text for Symbol palette item.\nfunction onItemTextChange(args) {\n  if (args.checked) {\n    palette.getSymbolInfo = (symbol) => {\n      if (symbol.text !== undefined) {\n        return { description: { text: symbol.text, overflow: \"Wrap\" } };\n      }\n      return { description: { text: symbol.id } };\n    };\n  } else {\n    palette.getSymbolInfo = (symbol) => {\n      return { description: { text: \"\" } };\n    };\n  }\n  palette.dataBind();\n}\n\n</script>\n","dependencies":"{\"vue\":\"3.3.4\",\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-vue-base\":\"*\",\"@syncfusion/ej2-diagrams\":\"*\",\"@syncfusion/ej2-vue-diagrams\":\"*\",\"@syncfusion/ej2-dropdowns\":\"*\",\"@syncfusion/ej2-vue-dropdowns\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-vue-buttons\":\"*\",\"@syncfusion/ej2-inputs\":\"*\",\"@syncfusion/ej2-vue-inputs\":\"*\",\"@syncfusion/ej2-vue-charts\":\"*\",\"@syncfusion/ej2-vue-maps\":\"*\",\"@syncfusion/ej2-vue-calendars\":\"*\",\"@syncfusion/ej2-data\":\"*\",\"@syncfusion/ej2-vue-grids\":\"*\"}","src/main.js":"import { createApp } from 'vue'\nimport App from './App.vue'\ncreateApp(App).mount('#app')"}