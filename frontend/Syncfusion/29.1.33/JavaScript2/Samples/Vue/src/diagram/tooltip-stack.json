{"public/index.html":"<!DOCTYPE html>\r\n<html lang=\"en\">\r\n\r\n<head>\r\n    <meta charset=\"utf-8\">\r\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\r\n    <meta name=\"viewport\" content=\"width=device-width,initial-scale=1.0\">\r\n    <link rel=\"icon\" href=\"<%= BASE_URL %>favicon.ico\">\r\n    <title>\r\n        <%= htmlWebpackPlugin.options.title %>\r\n    </title>\r\n    <link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\r\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\r\n</head>\r\n\r\n<body>\r\n    <noscript>\r\n        <strong>We're sorry but <%= htmlWebpackPlugin.options.title %> doesn't work properly without JavaScript enabled.\r\n        Please enable it to continue.</strong>\r\n    </noscript>\r\n    <div id=\"app\"></div>\r\n    <style>\r\n            .control-section\r\n            {\r\n                margin-top: 100px;\r\n            }\r\n    </style>\r\n    <!-- built files will be auto injected -->\r\n</body>\r\n\r\n</html>\r\n","src/App.vue":"<template>\n    <div>\n        <div class=\"col-lg-8 control-section\">\n            <div id=\"tooltipDiagramSection\" class=\"content-wrapper\" style=\"width: 100%\">\n                <ejs-diagram style='display:block' ref=\"diagramObj\" id=\"diagram\" :width='width' :height='height' :nodes='nodes' :connectors='connectors' :snapSettings='snapSettings' :constraints='constraints' :getNodeDefaults='getNodeDefaults' :tooltip='tooltip'></ejs-diagram>\n            </div>\n        </div>\n        <div id=\"tooltipPropertySection\" class=\"col-lg-4 property-section\">\n            <table id=\"property\" title=\"Properties\">\n                <tr>\n                    <td>\n                        <div>\n                            Relative Mode\n                        </div>\n                    </td>\n                    <td>\n                        <div>\n                            <ejs-dropdownlist id='mode' :index='selectedIndex' :dataSource='modeValue' :fields='fields' :popupWidth='popupWidth' :width='dropdownWidth' :change='relativeModeChange'>\n                            </ejs-dropdownlist>\n                        </div>\n                    </td>\n                </tr>\n                <tr>\n                    <td>\n                        <div>\n                            Position\n                        </div>\n                    </td>\n                    <td>\n                        <div>\n                            <ejs-dropdownlist id='position' :index='selectedIndex' :dataSource='positionValue' :fields='fields' :popupWidth='popupWidth' :width='dropdownWidth' :change='positionChange'>\n                            </ejs-dropdownlist>\n                        </div>\n                    </td>\n                </tr>\n                <tr>\n                    <td>\n                        <div>\n                            Animation\n                        </div>\n                    </td>\n                    <td>\n                        <div>\n                            <ejs-numerictextbox id=\"duration\" :value=\"duration\" :min=\"min\" :max=\"max\" :step=\"step\" :width='textboxWidth' :change=\"animationChange\"></ejs-numerictextbox>\n                        </div>\n                    </td>\n                </tr>\n                <tr>\n                    <td>\n                        <div>\n                            Effect\n                        </div>\n                    </td>\n                    <td>\n                        <div>\n                            <ejs-dropdownlist id='effect' :index='selectedIndex' :dataSource='effectValue' :fields='fields' :popupWidth='popupWidth' :width='dropdownWidth' :change='effectChange'>\n                            </ejs-dropdownlist>\n                        </div>\n                    </td>\n                </tr>\n                <tr>\n                    <td>\n                        <div>\n                            Sticky Mode\n                        </div>\n                    </td>\n                    <td>\n                        <div >\n                        <ejs-checkbox id=\"isStickyBox\" :checked=false :change='isStickyChange'/>\n                        </div>\n                    </td>\n                </tr>\n            </table>\n       \n        </div>\n        \n        \n    </div>\n</template>\n\n <style scoped>\n\n/*To align the property panel */\n#tooltipDiagramSection .row {\n    margin-left: 0px;\n    margin-right: 0px;\n}\n\ntable{\n    border-collapse: separate;\n}\n\n</style>\n\n<script>\nimport {\n    DiagramComponent,\n    Diagram,\n    DiagramConstraints,\n    SnapConstraints,\n    BpmnDiagrams,\n    NodeConstraints\n} from \"@syncfusion/ej2-vue-diagrams\";\nimport { DropDownListComponent } from \"@syncfusion/ej2-vue-dropdowns\";\nimport { NumericTextBoxComponent } from \"@syncfusion/ej2-vue-inputs\";\nimport { CheckBoxComponent } from \"@syncfusion/ej2-vue-buttons\";\nDiagram.Inject(BpmnDiagrams);\n\nlet diagramInstance;\n//Collection of relative modes for tooltip\nlet modeValue = [\n    { type: 'Object', text: 'Object' },\n    { type: 'Mouse', text: 'Mouse' },\n];\n\n//Initialize Diagram Nodes\nlet nodes = [\n    {\n        id: 'node1', width: 60, height: 60, offsetX: 35, offsetY: 120,\n        annotations: [{ content: 'Customer query', offset: { x: 0.5, y: 1 }, margin: { top: 15 } }],\n        tooltip: { content: 'Queries from the customer' },\n        shape: { type: 'Bpmn', shape: 'Event', event: { event: 'Start', trigger: 'Message' } }\n    },\n    {\n        id: 'node2', width: 75, height: 70, offsetX: 140, offsetY: 120,\n        annotations: [{ content: 'Enough details?', offset: { x: 0.50, y: 0.50 } }],\n        tooltip: { content: 'Whether the provided information is enough?' }, shape: { type: 'Bpmn', shape: 'Gateway' }\n    },\n    {\n        id: 'node3', width: 60, height: 50, offsetX: 270, offsetY: 120,\n        annotations: [{ content: 'Analyse', offset: { x: 0.50, y: 0.50 } }],\n        tooltip: { content: 'Analysing the query' },\n        shape: { type: 'Bpmn', shape: 'Activity', activity: { activity: 'Task' } },\n    },\n    {\n        id: 'node4', width: 75, height: 70, offsetX: 370, offsetY: 120, shape: {\n            type: 'Bpmn', shape: 'Gateway',\n            gateway: { type: 'Exclusive' }\n        },\n        tooltip: { content: 'proceed to validate?' },\n    },\n    {\n        id: 'node5', width: 75, height: 70, offsetX: 570, offsetY: 120,\n        annotations: [{ content: 'Validate', offset: { x: 0.50, y: 0.50 } }],\n        tooltip: { content: 'Whether the reported/requested bug/feature is valid?' }, shape: { type: 'Bpmn', shape: 'Gateway' }\n    },\n    {\n        id: 'node6', width: 60, height: 60, offsetX: 720, offsetY: 120,\n        tooltip: { content: 'Send the invalid message to customer' },\n        shape: { type: 'Bpmn', shape: 'Event', event: { event: 'End', trigger: 'Message' } }\n    },\n    {\n        id: 'node7', width: 60, height: 50, offsetX: 140, offsetY: 280,\n        annotations: [{ content: 'Request', offset: { x: 0.50, y: 0.50 }, margin: { top: 5 } }],\n        tooltip: { content: 'Requesting for more information' },\n        shape: { type: 'Bpmn', shape: 'Activity', activity: { activity: 'Task', task: { type: 'Send' } } }\n    },\n    {\n        id: 'node8', width: 60, height: 60, offsetX: 370, offsetY: 280,\n        tooltip: { content: 'Share the User Guide/Knowledge Base link' },\n        shape: { type: 'Bpmn', shape: 'Event', event: { event: 'Start', trigger: 'Message' } }\n    },\n    {\n        id: 'node9', width: 70, height: 50, offsetX: 570, offsetY: 280,\n        annotations: [{ content: 'Log bug/feature', offset: { x: 0.50, y: 0.50 } }], tooltip: { content: 'Log the bug/feature' },\n        shape: { type: 'Bpmn', shape: 'Activity', activity: { activity: 'Task' } }\n    },\n    {\n        id: 'node10', width: 75, height: 55, offsetX: 390, offsetY: 430,\n        annotations: [{ content: 'Implement', offset: { x: 0.50, y: 0.50 } }], tooltip: { content: 'Fix the bug/Add the feature' },\n        shape: {\n            type: 'Bpmn', shape: 'Activity', activity: {\n                activity: 'SubProcess', subProcess: {\n                    collapsed: false,\n                    events: [{ event: 'Intermediate', trigger: 'Timer', offset: { x: 0.5, y: 1 }, width: 25, height: 25 }]\n                }\n            }\n        }\n    },\n    {\n        id: 'node12', width: 60, height: 60, offsetX: 265, offsetY: 430, tooltip: { content: 'Provide the solution' },\n        shape: { type: 'Bpmn', shape: 'Event', event: { event: 'End', trigger: 'Message' } }\n    },\n    {\n        id: 'node13', width: 60, height: 60, offsetX: 720, offsetY: 430, tooltip: { content: 'Share the task details' },\n        shape: { type: 'Bpmn', shape: 'Event', event: { event: 'End', trigger: 'Message' } }\n    },\n    {\n        id: 'node14', width: 60, height: 60, offsetX: 570, offsetY: 430, shape: {\n            type: 'Bpmn', shape: 'Gateway',\n            gateway: { type: 'Parallel' }\n        },\n        tooltip: { content: 'can log?' },\n    },\n];\n\n//Initialize Diagram connectors\nlet connectors = [\n    { id: 'connector1', sourceID: 'node1', targetID: 'node2' },\n    { id: 'connector2', sourceID: 'node2', targetID: 'node3' },\n    { id: 'connector3', sourceID: 'node3', targetID: 'node4' },\n    {\n        id: 'connector4', sourceID: 'node4', targetID: 'node5',\n        annotations: [{ content: 'Feature/Bug', offset: 0.5, style: { fill: 'white', textWrapping: 'Wrap' } }]\n    },\n    {\n        id: 'connector5', sourceID: 'node5', targetID: 'node6',\n        annotations: [{ content: 'Invalid', offset: 0.5, style: { fill: 'white' } }]\n    },\n    { id: 'connector6', sourceID: 'node2', targetID: 'node7' },\n    {\n        id: 'connector7', sourceID: 'node4', targetID: 'node8',\n        annotations: [{ content: 'How to?', offset: 0.5, style: { fill: 'white' } }]\n    },\n    { id: 'connector8', sourceID: 'node5', targetID: 'node9' },\n    { id: 'connector9', sourceID: 'node14', targetID: 'node13' },\n    {\n        id: 'connector10', sourceID: 'node7', targetID: 'node3', type: 'Orthogonal',\n        segments: [{ type: 'Orthogonal', length: 100, direction: 'Right' }, { type: 'Orthogonal', length: 100, direction: 'Top' }]\n    },\n    { id: 'connector11', sourceID: 'node14', targetID: 'node10' },\n    { id: 'connector12', sourceID: 'node10', targetID: 'node12' },\n    { id: 'connector13', sourceID: 'node9', targetID: 'node14' },\n];\n\n//Collection of positions for tooltip\nlet positionValue = [\n    { type: 'TopLeft', text: 'Top Left' },\n    { type: 'TopCenter', text: 'Top Center' },\n    { type: 'TopRight', text: 'Top Right' },\n    { type: 'BottomLeft', text: 'Bottom Left' },\n    { type: 'BottomCenter', text: 'Bottom Center' },\n    { type: 'BottomRight', text: 'Bottom Right' },\n    { type: 'LeftTop', text: 'Left Top' },\n    { type: 'LeftCenter', text: 'Left Center' },\n    { type: 'LeftBottom', text: 'Left Bottom' },\n    { type: 'RightTop', text: 'Right Top' },\n    { type: 'RightCenter', text: 'Right Center' },\n    { type: 'RightBottom', text: 'Right Bottom' },\n];\n\n//Collection of effects for tooltip\nlet effectValue = [\n    { type: 'FadeIn', text: 'Fade In' },\n    { type: 'FadeOut', text: 'Fade Out' },\n    { type: 'FadeZoomIn', text: 'Fade ZoomIn' },\n    { type: 'FadeZoomOut', text: 'Fade ZoomOut' },\n    { type: 'FlipXDownIn', text: 'Flip X DownIn' },\n    { type: 'FlipXDownOut', text: 'Flip X DownOut' },\n    { type: 'FlipXUpIn', text: 'Flip X UpIn' },\n    { type: 'FlipXUpOut', text: 'Flip X UpOut' },\n    { type: 'FlipYLeftIn', text: 'Flip Y LeftIn' },\n    { type: 'FlipYLeftOut', text: 'Flip Y LeftOut' },\n    { type: 'FlipYRightIn', text: 'Flip Y RightIn' },\n    { type: 'FlipYRightOut', text: 'Flip Y RightOut' },\n    { type: 'ZoomIn', text: 'Zoom In' },\n    { type: 'ZoomOut', text: 'Zoom Out' },\n    { type: 'None', text: 'None' },\n];\n\nexport default {\n    components: {\n       'ejs-diagram': DiagramComponent,\n       'ejs-dropdownlist': DropDownListComponent,\n       'ejs-numerictextbox': NumericTextBoxComponent,\n       'ejs-checkbox': CheckBoxComponent\n    },\n    data: function() {\n        return {\n            //Initializes diagram control\n            width: \"100%\",\n            height: 700,\n            nodes: nodes,\n            connectors: connectors,\n            snapSettings: { constraints: SnapConstraints.None },\n            constraints: DiagramConstraints.Default,\n            tooltip: {\n                content: getcontent(), position: 'TopLeft', relativeMode: 'Object',\n                animation: { open: { effect: 'FadeZoomIn', delay: 0 }, close: { effect: 'FadeZoomOut', delay: 0 } }\n            },\n\n            //Initialize dropdown control\n            fields: { value: 'type', text: 'text' },\n            popupWidth: '150',\n            dropdownWidth: '75%',\n            textboxWidth:'75%',\n\n            //Datasource for dropdown control\n            modeValue: modeValue,\n            positionValue: positionValue,\n            effectValue: effectValue,\n\n            //Numerictextbox initialization\n            duration: 100,\n            min: 100,\n            max: 2000,\n            step: 100,\n            selectedIndex: 0,\n\n            //Enable or disable the sticky mode\n            isStickyChange: (args) => {\n                if (args.checked) {\n                    diagramInstance.tooltipObject.isSticky = true;\n                } else {\n                    diagramInstance.tooltipObject.isSticky = false;\n                }\n                diagramInstance.dataBind();\n            },\n            //Change effect for tooltip\n            effectChange: (args) => {\n                diagramInstance.tooltip.animation.open.effect = args.value;\n                diagramInstance.tooltip.animation.close.effect = args.value;\n                diagramInstance.dataBind();\n            },\n            //Change animation for tooltip\n            animationChange: (args) => {\n                diagramInstance.tooltip.animation.close.duration = args.value;\n                diagramInstance.tooltip.animation.open.duration = args.value;\n                diagramInstance.dataBind();\n            },\n            //Set default value for Nodes.\n            getNodeDefaults: (obj) => {\n                obj.offsetX += 0.5;\n                obj.offsetY += 0.5;\n                obj.constraints = NodeConstraints.Default | NodeConstraints.Tooltip;\n                obj.style = { strokeWidth:2 };\n                return obj;\n            },\n            //Change relative mode for tooltip\n            relativeModeChange: (args) => {\n                if (args.value === 'Mouse') {\n                    diagramInstance.tooltip.relativeMode = 'Mouse';\n                } else {\n                    diagramInstance.tooltip.relativeMode = 'Object';\n                }\n                diagramInstance.dataBind();\n            },\n            //Change position for tooltip\n            positionChange: (args) => {\n                let nodes = diagramInstance.nodes;\n                for (let i = 0; i < nodes.length; i++) {\n                    if (nodes[i].tooltip) {\n                        nodes[i].tooltip.position = args.value;\n                        diagramInstance.dataBind();\n                    }\n                }\n            }\n        };\n    },\n\n    mounted: function() {\n        diagramInstance = this.$refs.diagramObj.ej2Instances;\n        diagramInstance.fitToPage({ mode: 'Width' });\n    }\n}\n//set content for diagram tooltip\nfunction getcontent() {\n    let tooltipContent = document.createElement('div');\n    tooltipContent.innerHTML = '<div style=\"background-color: #f4f4f4; color: black; border-width:1px;border-style: solid;border-color: #d3d3d3; border-radius: 8px;white-space: nowrap;\"> <span style=\"margin: 10px;\"> Tooltip !!! </span> </div>';\n    return tooltipContent;\n}\n</script>\n","dependencies":"{\"vue\":\"3.3.4\",\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-vue-base\":\"*\",\"@syncfusion/ej2-diagrams\":\"*\",\"@syncfusion/ej2-vue-diagrams\":\"*\",\"@syncfusion/ej2-dropdowns\":\"*\",\"@syncfusion/ej2-vue-dropdowns\":\"*\",\"@syncfusion/ej2-inputs\":\"*\",\"@syncfusion/ej2-vue-inputs\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-vue-buttons\":\"*\",\"@syncfusion/ej2-vue-charts\":\"*\",\"@syncfusion/ej2-vue-maps\":\"*\",\"@syncfusion/ej2-vue-calendars\":\"*\",\"@syncfusion/ej2-data\":\"*\",\"@syncfusion/ej2-vue-grids\":\"*\"}","src/main.js":"import { createApp } from 'vue'\nimport App from './App.vue'\ncreateApp(App).mount('#app')"}