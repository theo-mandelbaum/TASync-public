{"public/index.html":"<!DOCTYPE html>\r\n<html lang=\"en\">\r\n\r\n<head>\r\n    <meta charset=\"utf-8\">\r\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\r\n    <meta name=\"viewport\" content=\"width=device-width,initial-scale=1.0\">\r\n    <link rel=\"icon\" href=\"<%= BASE_URL %>favicon.ico\">\r\n    <title>\r\n        <%= htmlWebpackPlugin.options.title %>\r\n    </title>\r\n    <link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\r\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\r\n</head>\r\n\r\n<body>\r\n    <noscript>\r\n        <strong>We're sorry but <%= htmlWebpackPlugin.options.title %> doesn't work properly without JavaScript enabled.\r\n        Please enable it to continue.</strong>\r\n    </noscript>\r\n    <div id=\"app\"></div>\r\n    <style>\r\n            .control-section\r\n            {\r\n                margin-top: 100px;\r\n            }\r\n    </style>\r\n    <!-- built files will be auto injected -->\r\n</body>\r\n\r\n</html>\r\n","src/App.vue":"<template>\n  <div class=\"col-lg-12 control-section\">\n    <div id=\"wrapper-diagram\" style=\"width: 100%\">\n      <ejs-diagram style=\"display: block\" ref=\"diagramObject\" id=\"diagram\" :width=\"width\" :height=\"height\"\n        :nodes=\"nodes\" :snapSettings=\"snapSettings\" :connectors=\"connectors\" :rulerSettings=\"rulerSettings\"\n        :constraints=\"constraints\" :tool=\"tool\"></ejs-diagram>\n    </div>\n  </div>\n</template>\n<style scoped></style>\n<script>\nimport {\n  DiagramComponent, ConnectorEditing, LineRouting, DiagramConstraints,\n  PortVisibility, Snapping, SnapConstraints, AvoidLineOverlapping, DiagramTools\n} from '@syncfusion/ej2-vue-diagrams';\nlet nodes = [];\nlet connectors = [];\nlet diagramInstance;\n\nfunction create1to16Node(id, x, y, width, height) {\n  var node = createNode(id, x, y, width, height);\n  addShape(node, 1, 16);\n  addPorts(node, 1, 'in');\n  addPorts(node, 16, 'out');\n  addPortsLabels(node, 16, 'out');\n}\nfunction create16to1Node(id, x, y, width, height) {\n  var node = createNode(id, x, y, width, height);\n  addShape(node, 16, 1);\n  addPorts(node, 16, 'in');\n  addPorts(node, 1, 'out');\n  addPortsLabels(node, 16, 'in');\n}\nfunction create9to5Node(id, x, y, width, height) {\n  var leftLabels = [\n    'A_0',\n    'A_1',\n    'A_2',\n    'A_3',\n    'B_0',\n    'B_1',\n    'B_2',\n    'B_3',\n    'Cin',\n  ];\n  var rightLabels = ['S_0', 'S_1', 'S_2', 'S_3', 'Cout'];\n  var node = createNode(id, x, y, width, height, '4 Bit\\nRCA');\n  addShape(node, 9, 5);\n  addPorts(node, 9, 'in');\n  addPorts(node, 5, 'out', 9);\n  addPortsLabels(node, 9, 'in', leftLabels);\n  addPortsLabels(node, 5, 'out', rightLabels, 9);\n}\nfunction createInputNode(id, x, y, width, height, label) {\n  var node = createNode(id, x, y, width, height, label);\n  addShape(node, 0, 1);\n  addPorts(node, 1, 'out');\n  var annotation = node.annotations[0];\n  annotation.offset = { x: (width - 25) / (2 * width), y: 0.5 };\n}\nfunction createOutputNode(id, x, y, width, height, label) {\n  var node = createNode(id, x, y, width, height, label);\n  addShape(node, 1, 0);\n  addPorts(node, 1, 'in');\n  var annotation = node.annotations[0];\n  annotation.offset = { x: 1 - (width - 25) / (2 * width), y: 0.5 };\n}\nfunction addShape(node, inCount, outCount) {\n  var maxCount = Math.max(inCount, outCount);\n  var rightX = outCount === 0 ? node.width : node.width - 25;\n  var pathData = 'M ' + rightX + ' 0 ';\n  if (outCount > 1) {\n    for (var i = 1; i <= outCount; i++) {\n      var portY = (i / maxCount - 1 / (2 * maxCount)) * node.height;\n      pathData +=\n        'L ' +\n        rightX +\n        ' ' +\n        portY +\n        ' L ' +\n        node.width +\n        ' ' +\n        portY +\n        ' L ' +\n        rightX +\n        ' ' +\n        portY +\n        ' ';\n    }\n  } else if (outCount === 1) {\n    pathData +=\n      'L ' +\n      rightX +\n      ' ' +\n      node.height * 0.5 +\n      ' L ' +\n      node.width +\n      ' ' +\n      node.height * 0.5 +\n      ' L ' +\n      rightX +\n      ' ' +\n      node.height * 0.5 +\n      ' ';\n  }\n  var leftX = inCount === 0 ? 0 : 25;\n  pathData +=\n    'L ' + rightX + ' ' + node.height + ' L ' + leftX + ' ' + node.height + ' ';\n  if (inCount > 1) {\n    for (var j = inCount; j >= 1; j--) {\n      var portY2 = (j / maxCount - 1 / (2 * maxCount)) * node.height;\n      pathData +=\n        'L ' +\n        leftX +\n        ' ' +\n        portY2 +\n        ' L 0 ' +\n        portY2 +\n        ' L ' +\n        leftX +\n        ' ' +\n        portY2 +\n        ' ';\n    }\n  } else if (inCount === 1) {\n    pathData +=\n      'L ' +\n      leftX +\n      ' ' +\n      node.height * 0.5 +\n      ' L 0 ' +\n      node.height * 0.5 +\n      ' L ' +\n      leftX +\n      ' ' +\n      node.height * 0.5 +\n      ' ';\n  }\n  pathData += 'L ' + leftX + ' 0 Z';\n  node.shape = { type: 'Path', data: pathData };\n}\nfunction addPorts(node, count, side, factor) {\n  if (factor === undefined) {\n    factor = count;\n  }\n  if (count > 1) {\n    for (var i = 1; i <= count; i++) {\n      var port = {\n        id: node.id + '_' + side + '_' + (i - 1),\n        offset: { x: side === 'out' ? 1 : 0, y: i / factor - 1 / (2 * factor) },\n        visibility: PortVisibility.Visible,\n        shape: 'Circle',\n        style: { fill: 'black' },\n        width: 8,\n        height: 8,\n      };\n      node.ports.push(port);\n    }\n  } else {\n    var port2 = {\n      id: node.id + '_' + side + '_0',\n      offset: { x: side === 'out' ? 1 : 0, y: 0.5 },\n      visibility: PortVisibility.Visible,\n      shape: 'Circle',\n      style: { fill: 'black' },\n      width: 8,\n      height: 8,\n    };\n    node.ports.push(port2);\n  }\n}\nfunction addPortsLabels(node, count, side, labels, factor) {\n  if (factor === undefined) {\n    factor = count;\n  }\n  var x =\n    side === 'out'\n      ? (node.width - 25 * 0.5) / node.width\n      : (25 * 0.5) / node.width;\n  for (var i = 1; i <= count; i++) {\n    var label = {\n      content: labels ? labels[i - 1] : '' + (i - 1),\n      offset: { x: x, y: (i / factor) - (1 / (2 * factor)) },\n      style: { fontSize: 7 },\n      verticalAlignment: 'Bottom',\n      margin: { bottom: 2 }\n    };\n    node.annotations.push(label);\n  }\n}\nfunction createNode(id, x, y, width, height, label) {\n  var shapeStyle = { strokeColor: 'black', strokeWidth: 2 };\n  var diagramNode = {\n    id: id,\n    offsetX: x,\n    offsetY: y,\n    width: width,\n    height: height,\n    style: shapeStyle,\n    shape: { type: 'Basic' },\n    ports: [],\n    annotations: [],\n  };\n  if (label) {\n    var annotation = { content: label, style: { fontSize: 14 } };\n    diagramNode.annotations.push(annotation);\n  }\n  nodes.push(diagramNode);\n  return diagramNode;\n}\nfunction createConnector(\n  id,\n  sourceId,\n  targetId,\n  sourcePortIndex,\n  targetPortIndex,\n  strokeColor\n) {\n  if (strokeColor === void 0) {\n    strokeColor = null;\n  }\n  var color = strokeColor ? strokeColor : \"green\";\n  if (color === 'lightGreen') {\n    color = '#1AD81A'\n  } else if (color === 'green') {\n    color = '#005100'\n  }\n  var diagramConnector = {\n    id: id,\n    cornerRadius: 5,\n    sourceID: sourceId,\n    targetID: targetId,\n    sourcePortID: sourceId + '_out_' + sourcePortIndex,\n    targetPortID: targetId + '_in_' + targetPortIndex,\n    type: 'Orthogonal',\n    segments: [\n      { type: 'Orthogonal', direction: 'Left', length: 25 },\n      { type: 'Orthogonal' },\n    ],\n    style: { strokeColor: color, strokeWidth: 2 },\n    targetDecorator: { shape: 'None' },\n  };\n  connectors.push(diagramConnector);\n  return diagramConnector;\n}\n\nfunction initDiagramModel() {\n  create1to16Node('node1', 205, 180, 80, 240);\n  create1to16Node('node2', 205, 427.5, 80, 240);\n  create9to5Node('node3', 415, 127.5, 100, 135);\n  create9to5Node('node4', 415, 367.5, 100, 135);\n  create9to5Node('node5', 615, 127.5, 100, 135);\n  create9to5Node('node6', 615, 367.5, 100, 135);\n  create16to1Node('node7', 820, 240, 80, 240);\n  createInputNode('node8', 70, 40, 80, 30, 'Cin');\n  createInputNode('node9', 70, 180, 80, 30, 'A');\n  createInputNode('node10', 70, 427.5, 80, 30, 'B');\n  createOutputNode('node11', 950, 240, 80, 30, 'S');\n  createOutputNode('node12', 950, 367.5, 80, 30, 'Cout');\n\n  createConnector('connector01', 'node8', 'node3', 0, 8, 'lightGreen');\n  createConnector('connector02', 'node9', 'node1', 0, 0, 'orange');\n  createConnector('connector03', 'node10', 'node2', 0, 0, 'orange');\n  createConnector('connector04', 'node7', 'node11', 0, 0, 'orange');\n  createConnector('connector05', 'node6', 'node12', 4, 0);\n  createConnector('connector06', 'node3', 'node5', 4, 8);\n  createConnector('connector07', 'node5', 'node4', 4, 8, 'lightGreen');\n  createConnector('connector08', 'node4', 'node6', 4, 8);\n\n  createConnector('connector1', 'node1', 'node3', 0, 0);\n  createConnector('connector2', 'node1', 'node3', 1, 1);\n  createConnector('connector3', 'node1', 'node3', 2, 2);\n  createConnector('connector4', 'node1', 'node3', 3, 3);\n  createConnector('connector5', 'node1', 'node5', 4, 0, 'lightGreen');\n  createConnector('connector6', 'node1', 'node5', 5, 1);\n  createConnector('connector7', 'node1', 'node5', 6, 2);\n  createConnector('connector8', 'node1', 'node5', 7, 3, 'lightGreen');\n  createConnector('connector9', 'node1', 'node4', 8, 0, 'lightGreen');\n  createConnector('connector10', 'node1', 'node4', 9, 1, 'lightGreen');\n  createConnector('connector11', 'node1', 'node4', 10, 2);\n  createConnector('connector12', 'node1', 'node4', 11, 3, 'lightGreen');\n  createConnector('connector13', 'node1', 'node6', 12, 0);\n  createConnector('connector14', 'node1', 'node6', 13, 1, 'lightGreen');\n  createConnector('connector15', 'node1', 'node6', 14, 2, 'lightGreen');\n  createConnector('connector16', 'node1', 'node6', 15, 3);\n  createConnector('connector17', 'node2', 'node3', 0, 4, 'lightGreen');\n  createConnector('connector18', 'node2', 'node3', 1, 5, 'lightGreen');\n  createConnector('connector19', 'node2', 'node3', 2, 6);\n  createConnector('connector20', 'node2', 'node3', 3, 7);\n  createConnector('connector25', 'node2', 'node4', 8, 4);\n  createConnector('connector26', 'node2', 'node4', 9, 5, 'lightGreen');\n  createConnector('connector27', 'node2', 'node4', 10, 6);\n  createConnector('connector28', 'node2', 'node4', 11, 7);\n  createConnector('connector24', 'node2', 'node5', 7, 7, 'lightGreen');\n  createConnector('connector23', 'node2', 'node5', 6, 6, 'lightGreen');\n  createConnector('connector22', 'node2', 'node5', 5, 5, 'lightGreen');\n  createConnector('connector21', 'node2', 'node5', 4, 4, 'lightGreen');\n  createConnector('connector29', 'node2', 'node6', 12, 4, 'lightGreen');\n  createConnector('connector30', 'node2', 'node6', 13, 5);\n  createConnector('connector31', 'node2', 'node6', 14, 6);\n  createConnector('connector32', 'node2', 'node6', 15, 7);\n  createConnector('connector33', 'node3', 'node7', 0, 0);\n  createConnector('connector34', 'node3', 'node7', 1, 1);\n  createConnector('connector35', 'node3', 'node7', 2, 2, 'lightGreen');\n  createConnector('connector36', 'node3', 'node7', 3, 3);\n  createConnector('connector37', 'node5', 'node7', 0, 4);\n  createConnector('connector38', 'node5', 'node7', 1, 5);\n  createConnector('connector39', 'node5', 'node7', 2, 6);\n  createConnector('connector40', 'node5', 'node7', 3, 7, 'lightGreen');\n  createConnector('connector41', 'node4', 'node7', 0, 8);\n  createConnector('connector42', 'node4', 'node7', 1, 9);\n  createConnector('connector43', 'node4', 'node7', 2, 10, 'lightGreen');\n  createConnector('connector44', 'node4', 'node7', 3, 11);\n  createConnector('connector45', 'node6', 'node7', 0, 12);\n  createConnector('connector46', 'node6', 'node7', 1, 13);\n  createConnector('connector47', 'node6', 'node7', 2, 14);\n  createConnector('connector48', 'node6', 'node7', 3, 15, 'lightGreen');\n}\ninitDiagramModel()\nexport default {\n  components: {\n    'ejs-diagram': DiagramComponent,\n  },\n  data: function () {\n    return {\n      //Initializes diagram control\n      width: '100%',\n      height: '600px',\n      nodes: nodes,\n      connectors: connectors,\n      tool: DiagramTools.ZoomPan,\n      snapSettings: { constraints: SnapConstraints.None },\n      constraints:\n        DiagramConstraints.Default |\n        DiagramConstraints.LineRouting |\n        DiagramConstraints.AvoidLineOverlapping,\n    };\n  },\n  provide: {\n    diagram: [LineRouting, ConnectorEditing, AvoidLineOverlapping, Snapping],\n  },\n  mounted: function () {\n    diagramInstance = this.$refs.diagramObject.ej2Instances;\n    /**\n     * Adjusts the diagram view to fit the page .\n     */\n    diagramInstance.fitToPage();\n  },\n};\n</script>","dependencies":"{\"vue\":\"3.3.4\",\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-vue-base\":\"*\",\"@syncfusion/ej2-diagrams\":\"*\",\"@syncfusion/ej2-vue-diagrams\":\"*\",\"@syncfusion/ej2-vue-charts\":\"*\",\"@syncfusion/ej2-vue-maps\":\"*\"}","src/main.js":"import { createApp } from 'vue'\nimport App from './App.vue'\ncreateApp(App).mount('#app')"}