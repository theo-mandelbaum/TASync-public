{"public/index.html":"<!DOCTYPE html>\r\n<html lang=\"en\">\r\n\r\n<head>\r\n    <meta charset=\"utf-8\">\r\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\r\n    <meta name=\"viewport\" content=\"width=device-width,initial-scale=1.0\">\r\n    <link rel=\"icon\" href=\"<%= BASE_URL %>favicon.ico\">\r\n    <title>\r\n        <%= htmlWebpackPlugin.options.title %>\r\n    </title>\r\n    <link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\r\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\r\n</head>\r\n\r\n<body>\r\n    <noscript>\r\n        <strong>We're sorry but <%= htmlWebpackPlugin.options.title %> doesn't work properly without JavaScript enabled.\r\n        Please enable it to continue.</strong>\r\n    </noscript>\r\n    <div id=\"app\"></div>\r\n    <style>\r\n            .control-section\r\n            {\r\n                margin-top: 100px;\r\n            }\r\n    </style>\r\n    <!-- built files will be auto injected -->\r\n</body>\r\n\r\n</html>\r\n","src/App.vue":"<template>\n<div class=\"control-section diagram-connector\">\n<div class=\"col-lg-8 control-section\">\n    <div class=\"content-wrapper\">\n        <ejs-diagram style='display:block' ref=\"diagramObj\" id=\"diagram\" :width='width' :height='height' :nodes='nodes' :connectors='connectors' :selectionChange=\"selectionChange\"  :layout='layout' :getNodeDefaults='getNodeDefaults' :getConnectorDefaults='getConnectorDefaults' :snapSettings='snapSettings' :setNodeTemplate='setNodeTemplate'></ejs-diagram>\n    </div>\n</div>\n<div class=\"col-lg-4 property-section\">\n    <div class=\"property-panel-header\">\n        Properties\n    </div>\n    <div class=\"row\" id=\"appearance\" ref=\"appearance\">\n        <div class=\"row row-header\">\n            <b>Connector types</b>\n        </div>\n        <div class=\"row\" style=\"padding-top: 8px\">\n            <div class=\"image-pattern-style\" id=\"straightConnector\" style=\"background-image: url(https://ej2.syncfusion.com/vue/demos/src/diagram/Images/connector/Connectors_1.png); margin-right: 3px\">\n            </div>\n            <div class=\"image-pattern-style\" id=\"orthogonalConnector\" style=\"background-image: url(https://ej2.syncfusion.com/vue/demos/src/diagram/Images/connector/Connectors_2.png); margin: 0px 3px\">\n            </div>\n            <div class=\"image-pattern-style\" id=\"bezierConnector\" style=\"background-image: url(https://ej2.syncfusion.com/vue/demos/src/diagram/Images/connector/Connectors_3.png); margin-left: 3px\">\n            </div>\n        </div>\n        <div class=\"row\" style=\"padding-top: 8px\">\n            <div class=\"image-pattern-style\" id=\"straightConnectorWithStroke\" style=\"background-image: url(https://ej2.syncfusion.com/vue/demos/src/diagram/Images/connector/Connectors_4.png); margin-right: 3px\">\n            </div>\n            <div class=\"image-pattern-style\" id=\"orthogonalConnectorWithStroke\" style=\"background-image: url(https://ej2.syncfusion.com/vue/demos/src/diagram/Images/connector/Connectors_5.png); margin: 0px 3px\">\n            </div>\n            <div class=\"image-pattern-style\" id=\"bezierConnectorWithStroke\" style=\"background-image: url(https://ej2.syncfusion.com/vue/demos/src/diagram/Images/connector/Connectors_6.png); margin-left: 3px\">\n            </div>\n        </div>\n        <div class=\"row\" style=\"padding-top: 8px\">\n            <div class=\"image-pattern-style\" id=\"straightConnectorWithDasharray\" style=\"background-image: url(https://ej2.syncfusion.com/vue/demos/src/diagram/Images/connector/Connectors_7.png); margin-right: 3px\">\n            </div>\n            <div class=\"image-pattern-style\" id=\"orthogonalConnectorWithDasharray\" style=\"background-image: url(https://ej2.syncfusion.com/vue/demos/src/diagram/Images/connector/Connectors_8.png); margin: 0px 3px\">\n            </div>\n            <div class=\"image-pattern-style\" id=\"bezierConnectorWithDasharray\" style=\"background-image: url(https://ej2.syncfusion.com/vue/demos/src/diagram/Images/connector/Connectors_9.png); margin-left: 3px\">\n            </div>\n        </div>\n        <div class=\"row\" style=\"padding-top: 8px\">\n            <div class=\"image-pattern-style\" id=\"cornerRadius\" style=\"background-image: url(https://ej2.syncfusion.com/vue/demos/src/diagram/Images/connector/Connectors_10.png); margin-right: 3px\">\n            </div>\n            <div class=\"image-pattern-style\" id=\"sourceDecorators\" style=\"background-image: url(https://ej2.syncfusion.com/vue/demos/src/diagram/Images/connector/Connectors_11.png); margin: 0px 3px\">\n            </div>\n            <div class=\"image-pattern-style\" id=\"sourceDecoratorWithDasharray\" style=\"background-image: url(https://ej2.syncfusion.com/vue/demos/src/diagram/Images/connector/Connectors_12.png); margin-left: 3px\">\n            </div>\n        </div>\n    </div>\n    <div class=\"row \" id=\"decorators\"  style=\"padding-top: 10px\">\n              <div class=\"row row-header\" style=\"padding-top: 8px\">\n                  <b>Decorators</b>\n              </div>\n              <div class=\"row\" style=\"padding-top: 8px; display: flex;\">\n                  <label>Source Decorators</label>\n                  <div>\n                      <ejs-dropdownlist id='sourceDecorator' ref='sourceDecorator' :enabled=true :value='sourceDecoratorValue' :dataSource='decoratorShape' :change='sourceDecoratorShapeChange'/>\n                  </div>\n              </div>\n              <div class=\"row\" style=\"padding-top: 8px; display: flex;\">\n                  <label>Target Decorators</label>\n                  <div>\n                    <ejs-dropdownlist id='targetDecorator' ref='targetDecorator' :enabled=true :value='targetDecoratorValue' :dataSource='decoratorShape' :change='targetDecoratorShapeChange'/>\n                  </div>\n              </div>\n              <div class=\"row\" style=\"padding-top: 8px; display: flex;\">\n                  <label>Segment Decorators</label>\n                  <div>\n                    <ejs-dropdownlist id='segmentDecorator' :enabled=true :value='segmentValue' :dataSource='decoratorShape' :change='segmentDecoratorShapeChange'/>\n                  </div>\n              </div>\n    </div>\n    <div class=\"row \" id=\"decorators\"  style=\"padding-top: 10px\">\n    <div class=\"row row-header\" style=\"padding-top: 8px\">\n        <b>Decorators Size</b>\n    </div>\n    <div class=\"row\" style=\"padding-top: 8px; display: flex;\">\n        <label>Source Decorators Size</label>\n        <div>\n        <ejs-numerictextbox ref=\"sourceDecoratorsSizeObj\"  id=\"sourceDecoratorsSize\" :min=\"10\" :max=\"20\" :format=\"0o0\" :step=\"1\" :value=\"12\"\n                :change='sourceDecoratorsSizeChange'/>\n        </div>\n    </div>\n    <div class=\"row\" style=\"padding-top: 8px; display: flex;\">\n        <label>Target Decorators Size</label>\n        <div>\n        <ejs-numerictextbox ref=\"targetDecoratorsSizeObj\"  id=\"targetDecoratorsSize\" :min=\"10\" :max=\"20\" :format=\"0o0\" :step=\"1\" :value=\"12\"\n                :change='targetDecoratorsSizeChange'/>\n        </div>\n    </div>\n    <div class=\"row\" style=\"padding-top: 8px; display: flex;\">\n        <label>Segment Decorators Size</label>\n        <div>\n        <ejs-numerictextbox ref=\"segmentDecoratorsSizeObj\"  id=\"segmentDecoratorsSize\" :enabled=false :min=\"10\" :max=\"20\" :format=\"0o0\" :step=\"1\" :value=\"12\"\n                :change='segmentDecoratorsSizeChange'/>\n        </div>\n    </div>\n    </div>\n    <div class=\"row\" id=\"color-tab\" style=\"padding-top: 10px\">\n          <div class=\"row row-header\">\n              <b>Appearance</b>\n          </div>\n          <div class=\"row\" style=\"padding-top: 8px; display: flex; margin-right: 50px;\">\n            <label>Line color</label>\n            <ejs-colorpicker id=\"color\" :mode='colorMode' :showButtons='colorShowButton' :modeSwitcher='colorModeSwitch' :value='fillColorValue' :change='colorChange'></ejs-colorpicker>\n          </div>\n    </div>\n</div>\n</div>\n</template>\n\n<style scoped>\n/* Css for images in property panel  */\n.diagram-connector .image-pattern-style {\n  background-color: white;\n  background-size: contain;\n  background-repeat: no-repeat;\n  height: 45px;\n  width: calc((100% - 13px) / 3);\n  cursor: pointer;\n  border: 1px solid #d5d5d5;\n  background-position: center;\n  float: left;\n}\n\n.diagram-connector .image-pattern-style:hover {\n  border-color: gray;\n  border-width: 2px;\n}\n\n.diagram-connector .row {\n  margin-left: 0px;\n  margin-right: 0px;\n}\n\n.diagram-connector .row-header {\n  font-size: 13px;\n  font-weight: 500;\n}\n\n/* Selection indicator */\n.diagram-connector .e-selected-style {\n  border-color: #006ce6;\n  border-width: 2px;\n}\n/* Align the names in property panel */\n.diagram-connector label{\n      display: inline-block;\n      font-size: 13px;\n      font-weight: 400;\n      width: 100%;\n      margin-top: auto;\n};\n\n</style>\n\n<script>\nimport {\n  TextElement,\n  HierarchicalTree,\n  ConnectorConstraints,\n  SnapConstraints,\n  ConnectorEditing,\n  StackPanel,\n  SelectorConstraints,\n  DiagramComponent,\n  randomId,\n  PortVisibility,\n} from \"@syncfusion/ej2-vue-diagrams\";\nimport {\n  DropDownListComponent,\n} from \"@syncfusion/ej2-vue-dropdowns\";\nimport {\n  ColorPickerComponent,\n  NumericTextBoxComponent\n} from \"@syncfusion/ej2-vue-inputs\";\n\nlet diagramInstance;\nlet connectorObject;\nlet sourceDecoratorInstance;\nlet targetDecoratorInstance;\nlet segmentDecoratorInstance;\n\n//Initialize shape\nlet shape = {\n  type: \"Basic\",\n  shape: \"Rectangle\",\n  cornerRadius: 10\n};\n//Initialize Diagram Nodes\nlet nodes = [\n  { id: \"node1\", annotations: [{ content: \"Promotion\" }] },\n  { id: \"node2\", annotations: [{ content: \"Lead\" }] },\n  { id: \"node3\", annotations: [{ content: \"Account\" }] },\n  { id: \"node4\", annotations: [{ content: \"Information\" }] },\n  { id: \"node5\", annotations: [{ content: \"Opportunity\" }] },\n  { id: \"node6\", offsetX: 545, offsetY: 340, excludeFromLayout: true }\n];\n\n//Initialize Diagram connectors\nlet connectors = [\n  { id: \"connector\", sourceID: \"node1\", targetID: \"node2\" },\n  {\n    id: \"connector1\",\n    sourceID: \"node2\",\n    sourcePortID: \"port1\",\n    targetID: \"node3\",\n    targetPortID: \"portIn\"\n  },\n  {\n    id: \"connector2\",\n    sourceID: \"node2\",\n    sourcePortID: \"port2\",\n    targetID: \"node4\",\n    targetPortID: \"portIn\"\n  },\n  {\n    id: \"connector3\",\n    sourceID: \"node2\",\n    sourcePortID: \"port3\",\n    targetID: \"node5\",\n    targetPortID: \"portIn\"\n  },\n  {\n    id: \"connector4\",\n    sourceID: \"node6\",\n    sourcePortID: \"port4\",\n    targetID: \"node3\",\n    targetPortID: \"portOut\"\n  },\n  {\n    id: \"connector5\",\n    sourceID: \"node6\",\n    sourcePortID: \"port5\",\n    targetID: \"node4\",\n    targetPortID: \"portOut\"\n  },\n  {\n    id: \"connector7\",\n    sourceID: \"node6\",\n    sourcePortID: \"port6\",\n    targetID: \"node5\",\n    targetPortID: \"portOut\"\n  }\n];\n\n//Collection of decorator shapes\nlet decoratorShapeSource = [\n  { shape: 'None', text: 'None' },\n  { shape: 'Square', text: 'Square' },\n  { shape: 'Circle', text: 'Circle' },\n  { shape: 'Diamond', text: 'Diamond' },\n  { shape: 'Arrow', text: 'Arrow' },\n  { shape: 'OpenArrow', text: 'Open Arrow' },\n  { shape: 'Fletch', text: 'Fletch' },\n  { shape: 'OpenFetch', text: 'Open Fetch' },\n  { shape: 'IndentedArrow', text: 'Indented Arrow' },\n  { shape: 'OutdentedArrow', text: 'Outdented Arrow' },\n  { shape: 'DoubleArrow', text: 'Double Arrow' }\n];\n\nexport default {\n  components: {\n    'ejs-diagram': DiagramComponent,\n    'ejs-dropdownlist': DropDownListComponent,\n    'ejs-colorpicker': ColorPickerComponent,\n    'ejs-numerictextbox': NumericTextBoxComponent,\n  },\n  data: function() {\n    return {\n      //Initializes diagram control\n      width: \"100%\",\n      height: 680,\n      nodes: nodes,\n      connectors: connectors,\n      selectionChange: () => {\n        if (diagramInstance.selectedItems.connectors.length > 0) {\n          segmentDecoratorInstance.enabled = true;\n        }\n        else{\n          segmentDecoratorInstance.enabled = false;\n        }\n      },\n      //Configrues hierarchical tree layout\n      layout: {\n        type: \"HierarchicalTree\",\n        orientation: \"LeftToRight\",\n        verticalSpacing: 75,\n        margin: { left: 30, right: 0, top: 0, bottom: 0 }\n      },\n      snapSettings: { constraints: SnapConstraints.None },\n      //Sets the default values of nodes\n      getNodeDefaults: (obj) => {\n        if (obj.id !== \"node1\") {\n          //Set ports\n          obj.ports = getPorts(obj);\n        }\n        if (obj.id !== \"node6\") {\n          obj.shape = shape;\n          obj.width = 80;\n          obj.style.strokeWidth = 2;\n          obj.style.strokeColor = \"#6F409F\";\n          obj.height = 35;\n        }\n      },\n      //Sets the default values of connector\n      getConnectorDefaults: (obj) => {\n        obj.type = \"Bezier\";\n        obj.style.strokeColor = \"#6f409f\";\n        obj.style.strokeWidth = 2;\n        obj.targetDecorator = {\n          style: {\n            strokeColor: \"#6f409f\",\n            fill: \"#6f409f\"\n          }\n        };\n        obj.segments = [\n          {\n            type: 'Bezier',\n          }\n        ];\n        obj.constraints = ConnectorConstraints.Default | ConnectorConstraints.DragSegmentThumb;\n      },\n\n      sourceDecoratorValue:\"None\",\n      targetDecoratorValue:\"Arrow\",\n      segmentValue:\"Circle\",\n      fillColorValue: \"#6f409f\",\n      segmentDecoratorShapeChange: onsegmentDecoratorShapeChange,\n      targetDecoratorShapeChange: ontargetDecoratorShapeChange,\n      sourceDecoratorShapeChange: onsourceDecoratorShapeChange,\n      sourceDecoratorsSizeChange: onsourceDecoratorSizeChange,\n      segmentDecoratorsSizeChange: onsegmentDecoratorSizeChange,\n      targetDecoratorsSizeChange: ontargetDecoratorSizeChange,\n      decoratorShape: decoratorShapeSource,\n      colorChange: onColorChange,\n      colorMode: true,\n      colorShowButton: false,\n      colorModeSwitch: true,\n      //Customizes the content of the node\n      setNodeTemplate: (obj) => {\n        if (obj.id === \"node6\") {\n          let canvas = new StackPanel();\n          canvas.children = [];\n          canvas.id = randomId();\n          canvas.style.strokeWidth = 0;\n          canvas.style.fill = \"#e6e0eb\";\n          canvas.children.push(getTextElement(\"Events\", \"#a6a1e0\"));\n          canvas.children.push(getTextElement(\"Emails\", \"#db8ec9\"));\n          canvas.children.push(getTextElement(\"Calls\", \"#db8ec9\"));\n          canvas.children.push(getTextElement(\"Smart Contents\", \"#db8ec9\"));\n          return canvas;\n        }\n        return null;\n      },\n    };\n  },\n  provide: {\n    diagram: [HierarchicalTree, ConnectorEditing]\n  },\n  mounted: function() {\n    //let diagramObj = document.getElementById(\"diagram\");\n    diagramInstance = this.$refs.diagramObj.ej2Instances;\n    diagramInstance.fitToPage();\n    diagramInstance.updateViewPort();\n    connectorObject = this.$refs.appearance;\n    sourceDecoratorInstance = this.$refs.sourceDecorator.ej2Instances;\n    targetDecoratorInstance= this.$refs.targetDecorator.ej2Instances;\n    segmentDecoratorInstance= this.$refs.segmentDecoratorsSizeObj.ej2Instances;\n    //Click event to change the connector type.\n    connectorObject.onclick = (args) => {\n      let target = args.target;\n      let selectedElement = document.getElementsByClassName(\n        \"e-selected-style\"\n      );\n      if (selectedElement.length) {\n        selectedElement[0].classList.remove(\"e-selected-style\");\n      }\n      if (target.className === \"image-pattern-style\") {\n        switch (target.id) {\n          case 'straightConnector':\n            applyConnectorStyle(false, false, false, 'Straight', target, 1);\n            break;\n          case 'orthogonalConnector':\n            applyConnectorStyle(false, false, false, 'Orthogonal', target, 1);\n            break;\n          case 'bezierConnector':\n            applyConnectorStyle(false, false, false, 'Bezier', target, 1);\n            break;\n          case \"straightConnectorWithStroke\":\n            applyConnectorStyle(false, false, false, \"Straight\", target);\n            break;\n          case \"orthogonalConnectorWithStroke\":\n            applyConnectorStyle(false, false, false, \"Orthogonal\", target);\n            break;\n          case \"bezierConnectorWithStroke\":\n            applyConnectorStyle(false, false, false, \"Bezier\", target);\n            break;\n          case \"straightConnectorWithDasharray\":\n            applyConnectorStyle(true, false, false, \"Straight\", target);\n            break;\n          case \"orthogonalConnectorWithDasharray\":\n            applyConnectorStyle(true, false, false, \"Orthogonal\", target);\n            break;\n          case \"bezierConnectorWithDasharray\":\n            applyConnectorStyle(true, false, false, \"Bezier\", target);\n            break;\n          case \"cornerRadius\":\n            applyConnectorStyle(false, false, true, \"Orthogonal\", target);\n            break;\n          case \"sourceDecorators\":\n            applyConnectorStyle(false, true, false, \"Straight\", target);\n            break;\n          case \"sourceDecoratorWithDasharray\":\n            applyConnectorStyle(true, true, false, \"Straight\", target);\n            break;\n        }\n      }\n    };\n  }\n}\n\n//Creation of TextElement for node\nfunction getTextElement(text, color) {\n  let textElement = new TextElement();\n  textElement.width = 80;\n  textElement.id = randomId();\n  textElement.height = 35;\n  textElement.content = text;\n  textElement.style.fill = \"#6f409f\";\n  textElement.style.color = \"white\";\n  textElement.style.strokeColor = \"#6f409f\";\n  textElement.cornerRadius = 5;\n  textElement.margin = { top: 10, bottom: 10, left: 10, right: 10 };\n  textElement.relativeMode = \"Object\";\n  return textElement;\n}\n\n//creation of Port for Node.\nfunction getPorts(obj)  {\n  if (obj.id === \"node2\") {\n    let node2Ports  = [\n      {\n        id: \"port1\",\n        offset: { x: 1, y: 0.25 },\n        visibility: PortVisibility.Hidden\n      },\n      {\n        id: \"port2\",\n        offset: { x: 1, y: 0.5 },\n        visibility: PortVisibility.Hidden\n      },\n      {\n        id: \"port3\",\n        offset: { x: 1, y: 0.75 },\n        visibility: PortVisibility.Hidden\n      }\n    ];\n    return node2Ports;\n  } else if (obj.id === \"node6\") {\n    let node6Ports = [\n      {\n        id: \"port4\",\n        offset: { x: 0, y: 0.46 },\n        visibility: PortVisibility.Hidden\n      },\n      {\n        id: \"port5\",\n        offset: { x: 0, y: 0.5 },\n        visibility: PortVisibility.Hidden\n      },\n      {\n        id: \"port6\",\n        offset: { x: 0, y: 0.54 },\n        visibility: PortVisibility.Hidden\n      }\n    ];\n    return node6Ports;\n  } else {\n    let ports = [\n      {\n        id: \"portIn\",\n        offset: { x: 0, y: 0.5 },\n        visibility: PortVisibility.Hidden\n      },\n      {\n        id: \"portOut\",\n        offset: { x: 1, y: 0.5 },\n        visibility: PortVisibility.Hidden\n      }\n    ];\n    return ports;\n  }\n}\n\n//ConnectorStyle customization\nfunction applyConnectorStyle(dashedLine, sourceDec, isRounded, type, target, strokeWidth) {\n    let connector;\n    for (let i = 0; i < diagramInstance.connectors.length; i++) {\n        connector = diagramInstance.connectors[i];\n        (connector.style).strokeWidth = !strokeWidth ? 2 : strokeWidth;\n        connector.type = type;\n        connector.cornerRadius = isRounded ? 5 : 0;\n        (connector.style).strokeDashArray = dashedLine ? '5,5' : '';\n        if (sourceDec) {\n            connector.sourceDecorator = {\n                style: {\n                    strokeColor: connector.style.strokeColor,\n                    fill: connector.style.strokeColor, strokeWidth: 2\n                }, shape: 'Circle'\n            };\n            sourceDecoratorInstance.value='Circle';\n        } else {\n            connector.sourceDecorator = { shape: 'None' };\n            sourceDecoratorInstance.value='None';\n        }\n        connector.targetDecorator = {\n            style: {\n                strokeColor: connector.style.strokeColor,\n                fill: connector.style.strokeColor, strokeWidth: 2\n            }, shape: 'Arrow'\n        };\n        targetDecoratorInstance.value='Arrow';\n        diagramInstance.dataBind();\n        diagramInstance.updateSelector();\n    }\n    target.classList.add('e-selected-style');\n}\n//Change the connector color\nfunction onColorChange(args) {\n  for (let i = 0; i < diagramInstance.connectors.length; i++) {\n    diagramInstance.connectors[i].style.strokeColor = args.currentValue.hex;\n    diagramInstance.connectors[i].targetDecorator.style.strokeColor = args.currentValue.hex;\n    diagramInstance.connectors[i].targetDecorator.style.fill = args.currentValue.hex;\n    diagramInstance.connectors[i].sourceDecorator.style.strokeColor = args.currentValue.hex;\n    diagramInstance.connectors[i].sourceDecorator.style.fill = args.currentValue.hex;\n  }\n  diagramInstance.dataBind();\n}\n//Change source decorator shape\nfunction onsourceDecoratorShapeChange(args) {\n  for (let i = 0; i < diagramInstance.connectors.length; i++) {\n    diagramInstance.connectors[i].sourceDecorator = {\n      shape: args.itemData.shape,\n      style: {\n        strokeColor: diagramInstance.connectors[i].style.strokeColor,\n        fill: diagramInstance.connectors[i].style.strokeColor,\n      }\n    };\n  }\n  diagramInstance.dataBind();\n\n}\n//Change target decorator shape\nfunction ontargetDecoratorShapeChange(args) {\n  for (let i = 0; i < diagramInstance.connectors.length; i++) {\n    diagramInstance.connectors[i].targetDecorator = {\n      shape: args.itemData.shape,\n      style: {\n        strokeColor: diagramInstance.connectors[i].style.strokeColor,\n        fill: diagramInstance.connectors[i].style.strokeColor,\n      }\n    };\n    diagramInstance.dataBind();\n  }\n}\n//Change segment decorator shape\nfunction onsegmentDecoratorShapeChange(args) {\n  for (let i = 0; i < diagramInstance.connectors.length; i++) {\n    diagramInstance.segmentThumbShape = args.itemData.shape;\n  }\n  diagramInstance.dataBind();\n}\n//Change source decorator size\nfunction onsourceDecoratorSizeChange(args) {\n  for (let i = 0; i < diagramInstance.connectors.length; i++) {\n    diagramInstance.connectors[i].sourceDecorator.width = args.value;\n    diagramInstance.connectors[i].sourceDecorator.height = args.value;\n  }\n  diagramInstance.dataBind();\n}\n//Change target decorator size\nfunction ontargetDecoratorSizeChange(args) {\n  for (let i = 0; i < diagramInstance.connectors.length; i++) {\n    diagramInstance.connectors[i].targetDecorator.width = args.value;\n    diagramInstance.connectors[i].targetDecorator.height = args.value;\n    }\n    diagramInstance.dataBind();\n}\n//Change segment decorator size\nfunction onsegmentDecoratorSizeChange(args) {\n  var connector=diagramInstance.selectedItems.connectors[0];\n  diagramInstance.segmentThumbSize = args.value;\n  diagramInstance.clearSelection();\n  diagramInstance.select([diagramInstance.nameTable[connector.id]]);\n  diagramInstance.dataBind();\n}\n</script>\n","dependencies":"{\"vue\":\"3.3.4\",\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-vue-base\":\"*\",\"@syncfusion/ej2-diagrams\":\"*\",\"@syncfusion/ej2-vue-diagrams\":\"*\",\"@syncfusion/ej2-dropdowns\":\"*\",\"@syncfusion/ej2-vue-dropdowns\":\"*\",\"@syncfusion/ej2-inputs\":\"*\",\"@syncfusion/ej2-vue-inputs\":\"*\",\"@syncfusion/ej2-vue-charts\":\"*\",\"@syncfusion/ej2-vue-maps\":\"*\"}","src/main.js":"import { createApp } from 'vue'\nimport App from './App.vue'\ncreateApp(App).mount('#app')"}