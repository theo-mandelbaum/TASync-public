{"public/index.html":"<!DOCTYPE html>\r\n<html lang=\"en\">\r\n\r\n<head>\r\n    <meta charset=\"utf-8\">\r\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\r\n    <meta name=\"viewport\" content=\"width=device-width,initial-scale=1.0\">\r\n    <link rel=\"icon\" href=\"<%= BASE_URL %>favicon.ico\">\r\n    <title>\r\n        <%= htmlWebpackPlugin.options.title %>\r\n    </title>\r\n    <link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\r\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\r\n</head>\r\n\r\n<body>\r\n    <noscript>\r\n        <strong>We're sorry but <%= htmlWebpackPlugin.options.title %> doesn't work properly without JavaScript enabled.\r\n        Please enable it to continue.</strong>\r\n    </noscript>\r\n    <div id=\"app\"></div>\r\n    <style>\r\n            .control-section\r\n            {\r\n                margin-top: 100px;\r\n            }\r\n    </style>\r\n    <!-- built files will be auto injected -->\r\n</body>\r\n\r\n</html>\r\n","src/App.vue":"<!-- Sample for Fishbone -->\n\n<!-- Template for Fishbone -->\n<template>\n    <!-- Diagram Component -->\n    <div class=\"control-section\">\n        <ejs-diagram style='display:block' ref=\"diagramObject\" id=\"diagram\" :mode='mode' :width='width' :tool='tool'\n            :height='height' :connectors='connectors' :nodes='nodes' :snapSettings='snapSettings'\n            :getConnectorDefaults='getConnectorDefaults'>\n        </ejs-diagram>\n        \n        <!-- Descriptions for the Action and the Diagram -->\n    </div>\n</template>\n\n<style scoped>\n.control-section {\n    padding-top: 0px;\n    padding-bottom: 0px;\n    padding-right: 0px;\n    padding-left: 0px;\n}\n</style>\n\n<script>\n//Importing needed dependencies for diagram\nimport {\n    DiagramComponent,\n    UndoRedo,\n    DataBinding,\n    DiagramTools,\n    SnapConstraints\n} from \"@syncfusion/ej2-vue-diagrams\";\n\nlet diagramInstance;\n\n// Function to create a node\nfunction createNode(id, height, width, offsetX, offsetY, content) {\n    return {\n        id,\n        height,\n        width,\n        offsetX,\n        offsetY,\n        annotations: [{ content: content, style: { color: 'white' } }],\n        shape: { type: 'Path', data: 'M 10 0 L 166 0 L 156 44 L 0 44 z' },\n        style: { fill: '#39AFA9', strokeColor: 'black' }\n    }\n};\n\n// Function to create an ellipse\nfunction createEllipseNode(id, height, width, offsetX, offsetY, content = \"\", fill = \"white\", strokeColor = '#A52A2A') {\n    return {\n        id,\n        width,\n        height,\n        offsetX,\n        offsetY,\n        annotations: [{ content: content, style: { color: 'white' } }],\n        shape: { type: 'Basic', shape: 'Ellipse' },\n        style: { fill: fill, strokeColor: strokeColor }\n    }\n};\n\n// Function to create an Text Node\nfunction createTextNode(id, height, width, offsetX, offsetY, content) {\n    return {\n        id: id,\n        height: height,\n        width: width,\n        offsetX: offsetX,\n        offsetY: offsetY,\n        style: { fill: 'transparent', strokeWidth: 0 },\n        shape: { type: 'Text', content: content }\n    }\n};\n\n//Initializes the nodes for the diagram.\nlet nodes = [\n    createNode('Equipment', 40, 120, 300, 80, 'Equipment'),\n    createNode('Environment', 40, 120, 450, 80, 'Environment'),\n    createNode('Person', 40, 120, 600, 80, 'Person'),\n    createNode('Materials', 40, 120, 300, 600, 'Materials'),\n    createNode('Machine', 40, 120, 450, 600, 'Machine'),\n    createNode('Methods', 40, 120, 600, 600, 'Methods'),\n    createEllipseNode('ellipse1', 20, 20, 290, 130),\n    createEllipseNode('ellipse2', 20, 20, 323, 183),\n    createEllipseNode('ellipse3', 20, 20, 354, 237),\n    createEllipseNode('ellipse4', 20, 20, 440, 130),\n    createEllipseNode('ellipse5', 20, 20, 470, 182),\n    createEllipseNode('ellipse6', 20, 20, 590, 130),\n    createEllipseNode('ellipse7', 20, 20, 622, 179),\n    createEllipseNode('ellipse8', 20, 20, 660, 221),\n    createEllipseNode('ellipse9', 20, 20, 694, 264),\n    createEllipseNode('ellipse10', 20, 20, 354, 460),\n    createEllipseNode('ellipse11', 20, 20, 590, 530),\n    createEllipseNode('ellipse12', 20, 20, 660, 460),\n    createEllipseNode('ellipse13', 20, 20, 440, 530),\n    createEllipseNode('ellipse14', 20, 20, 510, 460),\n    createEllipseNode('ellipse15', 20, 20, 290, 530),\n    createEllipseNode('Colorellipse1', 50, 50, 717, 310),\n    createEllipseNode('Colorellipse2', 50, 50, 560, 310),\n    createEllipseNode('Colorellipse3', 50, 50, 390, 310),\n    createEllipseNode('Colorellipse4', 50, 50, 220, 310),\n    createEllipseNode('Colorellipse5', 90, 140, 900, 310, 'Productivity Increase', \"#39AFA9\", 'black'),\n    createTextNode('TextPrograms', 20, 90, 189, 130, 'Text Programs'),\n    createTextNode('VentilatorsSound', 20, 120, 359, 130, 'Ventilators Sound'),\n    createTextNode('Education', 20, 70, 500, 130, 'Education'),\n    createTextNode('DataBooks', 20, 70, 213, 183, 'DataBooks'),\n    createTextNode('Fixtures', 20, 70, 240, 237, 'Fixtures'),\n    createTextNode('Noise', 20, 70, 390, 182, 'Noise'),\n    createTextNode('Motivation', 20, 70, 535, 182, 'Motivation'),\n    createTextNode('Tiredness', 20, 70, 565, 224, 'Tiredness'),\n    createTextNode('Storer', 20, 70, 606, 264, 'Storer'),\n    createTextNode('Computer', 20, 70, 260, 460, 'Computer'),\n    createTextNode('Quality', 20, 120, 417, 460, 'Quality of Element'),\n    createTextNode('Order', 20, 70, 562, 460, 'Order'),\n    createTextNode('Software', 20, 70, 225, 530, 'Software'),\n    createTextNode('Procurement', 20, 70, 358, 530, 'Procurement'),\n    createTextNode('Standardization', 20, 90, 501, 530, 'Standardization')\n];\n\n\n// Function to create a connector model.\nfunction createConnector(id, lineDashArray, source, target, strokeColor) {\n    return {\n        id: id,\n        sourceID: source,\n        targetID: target,\n        style: {\n            strokeColor: strokeColor,\n            strokeWidth: 2,\n            strokeDashArray: lineDashArray\n        }\n    }\n};\n\n//Initializes the Connectors for the diagram\nlet connectors = [\n    createConnector('connector01', '5,5', 'Equipment', 'ellipse1', '#A52A2A'),\n    createConnector('connector02', '5,5', 'ellipse1', 'ellipse2', '#A52A2A'),\n    createConnector('connector03', '5,5', 'ellipse2', 'ellipse3', '#A52A2A'),\n    createConnector('connector04', '5,5', 'ellipse3', 'Colorellipse3', '#A52A2A'),\n    createConnector('connector05', '5,5', 'Environment', 'ellipse4', '#A52A2A'),\n    createConnector('connector06', '5,5', 'ellipse4', 'ellipse5', '#A52A2A'),\n    createConnector('connector07', '5,5', 'ellipse4', 'ellipse5', '#A52A2A'),\n    createConnector('connector08', '5,5', 'ellipse5', 'Colorellipse2', '#A52A2A'),\n    createConnector('connector09', '5,5', 'Person', 'ellipse6', '#A52A2A'),\n    createConnector('connector10', '5,5', 'ellipse6', 'ellipse7', '#A52A2A'),\n    createConnector('connector11', '5,5', 'ellipse7', 'ellipse8', '#A52A2A'),\n    createConnector('connector12', '5,5', 'ellipse8', 'ellipse9', '#A52A2A'),\n    createConnector('connector13', '5,5', 'ellipse9', 'Colorellipse1', '#A52A2A'),\n    createConnector('connector14', '5,5', 'Materials', 'ellipse15', '#A52A2A'),\n    createConnector('connector15', '5,5', 'ellipse15', 'ellipse10', '#A52A2A'),\n    createConnector('connector16', '5,5', 'ellipse10', 'Colorellipse3', '#A52A2A'),\n    createConnector('connector17', '5,5', 'Machine', 'ellipse13', '#A52A2A'),\n    createConnector('connector18', '5,5', 'ellipse13', 'ellipse14', '#A52A2A'),\n    createConnector('connector19', '5,5', 'ellipse14', 'Colorellipse2', '#A52A2A'),\n    createConnector('connector20', '5,5', 'Methods', 'ellipse11', '#A52A2A'),\n    createConnector('connector21', '5,5', 'ellipse11', 'ellipse12', '#A52A2A'),\n    createConnector('connector22', '5,5', 'ellipse12', 'Colorellipse1', '#A52A2A'),\n    createConnector('connector23', '', 'Colorellipse4', 'Colorellipse3', '#000000'),\n    createConnector('connector24', '', 'Colorellipse3', 'Colorellipse2', '#000000'),\n    createConnector('connector25', '', 'Colorellipse2', 'Colorellipse1', '#000000'),\n    createConnector('connector26', '', 'Colorellipse1', 'Colorellipse5', '#000000'),\n    createConnector('connector27', '5,5', 'TextPrograms', 'ellipse1', '#A52A2A'),\n    createConnector('connector28', '5,5', 'DataBooks', 'ellipse2', '#A52A2A'),\n    createConnector('connector29', '5,5', 'Fixtures', 'ellipse3', '#A52A2A'),\n    createConnector('connector30', '5,5', 'VentilatorsSound', 'ellipse4', '#A52A2A'),\n    createConnector('connector31', '5,5', 'Noise', 'ellipse5', '#A52A2A'),\n    createConnector('connector32', '5,5', 'Education', 'ellipse6', '#A52A2A'),\n    createConnector('connector33', '5,5', 'Motivation', 'ellipse7', '#A52A2A'),\n    createConnector('connector34', '5,5', 'Tiredness', 'ellipse8', '#A52A2A'),\n    createConnector('connector35', '5,5', 'Storer', 'ellipse9', '#A52A2A'),\n    createConnector('connector36', '5,5', 'Software', 'ellipse15', '#A52A2A'),\n    createConnector('connector37', '5,5', 'Computer', 'ellipse10', '#A52A2A'),\n    createConnector('connector38', '5,5', 'Procurement', 'ellipse13', '#A52A2A'),\n    createConnector('connector39', '5,5', 'Quality', 'ellipse14', '#A52A2A'),\n    createConnector('connector40', '5,5', 'Order', 'ellipse12', '#A52A2A'),\n    createConnector('connector41', '5,5', 'Standardization', 'ellipse11', '#A52A2A')\n];\n\n// Exporting the default object for Vue component\nexport default {\n    components: {\n        'ejs-diagram': DiagramComponent\n    },\n    data: function () {\n        return {\n            //Initializes diagram control\n            width: \"100%\",\n            height: \"700px\",\n            mode: \"SVG\",\n            nodes: nodes,\n            connectors: connectors,\n            tool: DiagramTools.ZoomPan,\n            snapSettings: { constraints: SnapConstraints.None },\n            getConnectorDefaults: getConnectorDefaults\n        };\n    },\n    provide: {\n        diagram: [UndoRedo, DataBinding]\n    },\n    mounted: function () {\n        diagramInstance = this.$refs.diagramObject.ej2Instances;\n        diagramInstance.fitToPage(\"Width\");\n    }\n}\n\n//function to Sets the default values of a connector\nfunction getConnectorDefaults(connector) {\n    connector.targetDecorator = { shape: 'Arrow', width: 5, height: 5 };\n    if (connector.id !== 'connector23' && connector.id !== 'connector24' &&\n        connector.id !== 'connector25' && connector.id !== 'connector26') {\n        connector.targetDecorator.style = { strokeColor: '#A52A2A', fill: '#A52A2A' };\n    }\n}\n</script>\n","dependencies":"{\"vue\":\"3.3.4\",\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-vue-base\":\"*\",\"@syncfusion/ej2-diagrams\":\"*\",\"@syncfusion/ej2-vue-diagrams\":\"*\",\"@syncfusion/ej2-vue-charts\":\"*\",\"@syncfusion/ej2-vue-maps\":\"*\"}","src/main.js":"import { createApp } from 'vue'\nimport App from './App.vue'\ncreateApp(App).mount('#app')"}