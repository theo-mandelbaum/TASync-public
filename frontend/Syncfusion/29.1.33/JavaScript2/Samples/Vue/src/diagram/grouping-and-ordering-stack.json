{"public/index.html":"<!DOCTYPE html>\r\n<html lang=\"en\">\r\n\r\n<head>\r\n    <meta charset=\"utf-8\">\r\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\r\n    <meta name=\"viewport\" content=\"width=device-width,initial-scale=1.0\">\r\n    <link rel=\"icon\" href=\"<%= BASE_URL %>favicon.ico\">\r\n    <title>\r\n        <%= htmlWebpackPlugin.options.title %>\r\n    </title>\r\n    <link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\r\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\r\n</head>\r\n\r\n<body>\r\n    <noscript>\r\n        <strong>We're sorry but <%= htmlWebpackPlugin.options.title %> doesn't work properly without JavaScript enabled.\r\n        Please enable it to continue.</strong>\r\n    </noscript>\r\n    <div id=\"app\"></div>\r\n    <style>\r\n            .control-section\r\n            {\r\n                margin-top: 100px;\r\n            }\r\n    </style>\r\n    <!-- built files will be auto injected -->\r\n</body>\r\n\r\n</html>\r\n","src/App.vue":"<!-- Sample for Grouping and Ordering -->\n\n<!-- Template for Grouping and Ordering -->\n<template>\n  <div class=\"control-section\">\n    <div>\n      <!-- Toolbar section -->\n      <ejs-toolbar id=\"toolbar_default\" ref=\"toolbar_diagram\" :clicked='toolbarclicked'>\n        <e-items>\n          <!-- Group and Ungroup buttons -->\n          <e-item id=\"Group\" prefixIcon=\"e-icons e-group-1\" tooltipText=\"Group\" type=\"Button\" disabled=\"true\"></e-item>\n          <e-item id=\"unGroup\" prefixIcon=\"e-icons e-ungroup-1\" tooltipText=\"UnGroup\" type=\"Button\" disabled=\"true\"></e-item>\n          <e-item type=\"Separator\" id='separator1'></e-item>\n          <!-- Order buttons -->\n          <e-item id=\"bringForward\" prefixIcon=\"e-icons e-bring-forward\" tooltipText=\"Bring Forward\" type=\"Button\"\n            disabled=\"true\"></e-item>\n          <e-item id=\"bringToFront\" prefixIcon=\"e-icons e-bring-to-front\" tooltipText=\"Bring To Front\" type=\"Button\"\n            disabled=\"true\"></e-item>\n          <e-item id=\"sendBackward\" prefixIcon=\"e-icons e-send-backward\" tooltipText=\"Send Backward\" type=\"Button\"\n            disabled=\"true\"></e-item>\n          <e-item id=\"sendToBack\" prefixIcon=\"e-icons e-send-to-back\" tooltipText=\"Send To Back\" type=\"Button\" disabled=\"true\"></e-item>\n          <e-item type=\"Separator\" id='separator2'></e-item>\n          <!-- Font style customization -->\n          <e-item :template=\"fontStyle\" id=\"fontStyle\" tooltipText=\"Font Style\" type=\"Input\" disabled=\"true\"></e-item>\n          <e-item type=\"Separator\" id='separator3'></e-item>\n          <!-- Font size customization -->\n          <e-item :template=\"fontSize\" id='fontSize' tooltipText=\"Font Size\" disabled=\"true\"></e-item>\n          <!-- Text formatting buttons -->\n          <e-item id=\"bold\" prefixIcon=\"e-icons e-bold\" tooltipText=\"Bold\" type=\"Button\" disabled=\"true\"></e-item>\n          <e-item id=\"italic\"  prefixIcon=\"e-icons e-italic\" tooltipText=\"Italic\" type=\"Button\" disabled=\"true\"></e-item>\n          <e-item id=\"underline\" prefixIcon=\"e-icons e-underline\" tooltipText=\"Underline\" type=\"Button\" disabled=\"true\"></e-item>\n          <!--Text Color dropdown  -->\n          <e-item id=\"colorPicker\" :template=\"colorPicker\" disabled=\"true\"></e-item>\n        </e-items>\n      </ejs-toolbar>\n    </div>\n    <!-- Diagram and Symbol Palette sections -->\n    <div style=\"width:100%\">\n      <div class=\"sb-mobile-palette-bar\">\n        <div id=\"palette-icon\" ref=\"palette_icon\" role=\"button\" class=\"e-ddb-icons1 e-toggle-palette\"></div>\n      </div>\n      <!-- Symbol Palette component -->\n      <div id=\"palette-space\" ref=\"palette_space\" class=\"sb-mobile-palette\">\n        <ejs-symbolpalette id=\"symbolpalette\" :palettes='palettes' :width='palettewidth' :height='paletteheight'\n          :getNodeDefaults='palettegetNodeDefaults' :getSymbolInfo='getSymbolInfo' :symbolMargin='symbolMargin'\n          :symbolHeight='symbolHeight' :symbolWidth='symbolWidth'></ejs-symbolpalette>\n      </div>\n      <!-- Diagram component -->\n      <div id=\"diagram-space\" class=\"sb-mobile-diagram\">\n        <ejs-diagram style='display:block' ref=\"diagramObject\" id=\"diagram\" :width='width' :height='height'\n          :nodes='nodes' :rulerSettings='rulerSettings' \n          :selectionChange='selectionChange' :getCustomTool='getCustomTool'\n          :selectedItems='selectedItems' :drawingObject='drawingObject'></ejs-diagram>\n      </div>\n    </div>\n    <!-- Descriptions for the Action and the Diagram -->\n  </div>\n</template>\n\n<style scoped>\n/*To align palette */\n.sb-mobile-palette {\n  width: 240px;\n  height: 100%;\n  float: left;\n}\n\n.sb-mobile-palette-bar {\n  display: none;\n}\n\n/*To align diagram */\n.sb-mobile-diagram {\n  width: calc(100% - 242px);\n  height: 100%;\n  float: left;\n}\n\n.sb-bpmn-editor {\n  border-color: rgba(0, 0, 0, 0.12);\n  border-width: 1px 1px 1px 0px;\n  border-style: solid;\n}\n\n@media (max-width: 550px) {\n  .sb-bpmn-editor {\n    border-width: 0px 1px 1px;\n  }\n\n  .sb-mobile-palette {\n    z-index: 19;\n    position: absolute;\n    display: none;\n    transition: transform 300ms linear, visibility 0s linear 300ms;\n    width: 39%;\n    height: 100%;\n  }\n\n  .sb-mobile-palette-bar {\n    display: block;\n    width: 100%;\n    background: #fafafa;\n    padding: 10px 10px;\n    border: 0.5px solid #e0e0e0;\n    min-height: 40px;\n  }\n\n  .sb-mobile-diagram {\n    width: 100%;\n    height: 100%;\n    float: left;\n    left: 0px;\n  }\n\n  #palette-icon {\n    font-size: 20px;\n  }\n}\n\n.sb-mobile-palette-open {\n  position: absolute;\n  display: block;\n  right: 15px;\n}\n</style>\n\n<script>\n// Import necessary components and modules\nimport { createApp } from \"vue\";\nimport {\n  DiagramComponent,\n  SymbolPaletteComponent,\n  SelectorConstraints,\n  Node\n} from \"@syncfusion/ej2-vue-diagrams\";\nimport {\n  ToolbarComponent,\n  ItemsDirective,\n  ItemDirective,\n  Toolbar,\n  ClickEventArgs\n} from \"@syncfusion/ej2-vue-navigations\";\nimport { ComboBoxComponent } from \"@syncfusion/ej2-vue-dropdowns\";\nimport { NumericTextBoxComponent } from \"@syncfusion/ej2-vue-inputs\";\nimport { ColorPickerComponent } from \"@syncfusion/ej2-vue-inputs\";\n\nlet isMobile;\nlet drawingNode;\nlet diagramInstance;\nlet toolbarInstance;\nlet paletteIconInstance;\nlet paletteSpaceInstance;\n// Function to create a node with default settings\nfunction createNode(id, offsetX, offsetY, width, height, shape, annotations = [], cornerRadius = 0) {\n  return {\n    id: id,\n    offsetX: offsetX,\n    offsetY: offsetY,\n    width: width,\n    height: height,\n    shape: { type: \"Basic\", shape, cornerRadius: cornerRadius },\n    annotations: annotations,\n  }\n};\n\n// Function to create a group node with default settings\nfunction groupNode(id, children, padding, annotations) {\n  return {\n    id: id,\n    children: children,\n    padding: padding,\n    annotations: annotations,\n    style: { strokeWidth: 0, fill: 'white', strokeColor: 'transparent' }\n  }\n};\n\n// Initialize nodes for the diagram.\nlet nodes = [\n  createNode('Diamond', 350, 250, 100, 100, 'Diamond', [{ content: 'Decision' }]),\n  createNode('ellipse', 150, 250, 100, 60, 'Ellipse', [{ content: 'Start/Stop' }]),\n  createNode('rectangle', 150, 400, 100, 60, 'Rectangle', [{ content: 'Process' }]),\n  createNode('node1', 150, 100, 100, 60, 'Rectangle'),\n  createNode('node2', 350, 100, 90, 60, 'Rectangle', [], 5),\n  groupNode('group', ['node1', 'node2'], { left: 10, right: 10, top: 10, bottom: 10 }, [{ content: 'Group 1' }])\n];\n\n// Function to create a Basic Shapes with default settings\nfunction createBasicShape(id, shape) {\n  return {\n    id: id,\n    shape: { type: \"Basic\", shape },\n    style: { strokeWidth: 2 }\n  }\n};\n\n// Initialize basic shapes for the diagram.\nlet basicShapes = [\n  createBasicShape('Rectangle', 'Rectangle'),\n  createBasicShape('Ellipse', 'Ellipse'),\n  createBasicShape('Hexagon', 'Hexagon'),\n  createBasicShape('Parallelogram', 'Parallelogram'),\n  createBasicShape('Triangle', 'Triangle'),\n  createBasicShape('Plus', 'Plus'),\n  createBasicShape('Star', 'Star'),\n  createBasicShape('Pentagon', 'Pentagon'),\n  createBasicShape('Heptagon', 'Heptagon'),\n  createBasicShape('Octagon', 'Octagon'),\n  createBasicShape('Trapezoid', 'Trapezoid'),\n  createBasicShape('Decagon', 'Decagon'),\n  createBasicShape('RightTriangle', 'RightTriangle'),\n  createBasicShape('Cylinder', 'Cylinder'),\n  createBasicShape('Diamond', 'Diamond')\n];\n\n//Initializes the user handles for the diagram.\nlet handles = [\n  {\n    name: 'Clone', pathData: 'M0,2.4879999 L0.986,2.4879999 0.986,9.0139999 6.9950027,9.0139999 6.9950027,10 0.986,10 C0.70400238,10 0.47000122,9.9060001 0.28100207,9.7180004 0.09400177,9.5300007 0,9.2959995 0,9.0139999 z M3.0050011,0 L9.0140038,0 C9.2960014,0 9.5300026,0.093999863 9.7190018,0.28199956 9.906002,0.47000027 10,0.70399952 10,0.986 L10,6.9949989 C10,7.2770004 9.906002,7.5160007 9.7190018,7.7110004 9.5300026,7.9069996 9.2960014,8.0049992 9.0140038,8.0049992 L3.0050011,8.0049992 C2.7070007,8.0049992 2.4650002,7.9069996 2.2770004,7.7110004 2.0890007,7.5160007 1.9950027,7.2770004 1.9950027,6.9949989 L1.9950027,0.986 C1.9950027,0.70399952 2.0890007,0.47000027 2.2770004,0.28199956 2.4650002,0.093999863 2.7070007,0 3.0050011,0 z', tooltip: { content: 'Clone' },\n    visible: true, offset: 1, side: 'Bottom', margin: { top: 0, bottom: 0, left: 0, right: 0 }\n  },\n  {\n    name: 'Delete', pathData: 'M0.54700077,2.2130003 L7.2129992,2.2130003 7.2129992,8.8800011 C7.2129992,9.1920013 7.1049975,9.4570007 6.8879985,9.6739998 6.6709994,9.8910007 6.406,10 6.0939997,10 L1.6659999,10 C1.3539997,10 1.0890004,9.8910007 0.87200136,9.6739998 0.65500242,9.4570007 0.54700071,9.1920013 0.54700077,8.8800011 z M2.4999992,0 L5.2600006,0 5.8329986,0.54600048 7.7599996,0.54600048 7.7599996,1.6660004 0,1.6660004 0,0.54600048 1.9270014,0.54600048 z', tooltip: { content: 'Delete' },\n    visible: true, offset: 0, side: 'Bottom', margin: { top: 0, bottom: 0, left: 0, right: 0 }\n  },\n  {\n    name: 'Draw', pathData: 'M3.9730001,0 L8.9730001,5.0000007 3.9730001,10.000001 3.9730001,7.0090005 0,7.0090005 0,2.9910006 3.9730001,2.9910006 z', tooltip: { content: 'Draw' },\n    visible: true, offset: 0.5, side: 'Right', margin: { top: 0, bottom: 0, left: 0, right: 0 }\n  },\n];\n\n//  Export the default object for Vue component\nexport default {\n  components: {\n    'ejs-diagram': DiagramComponent,\n    'ejs-symbolpalette': SymbolPaletteComponent,\n    'ejs-toolbar': ToolbarComponent,\n    'e-items': ItemsDirective,\n    'e-item': ItemDirective,\n    'ejs-colorpicker': ColorPickerComponent,\n    'ejs-combobox': ComboBoxComponent,\n    'ejs-numerictextbox': NumericTextBoxComponent\n  },\n  data: function () {\n    return {\n      width: \"100%\",\n      height: \"700px\",\n      nodes: nodes,\n      created: (args) => {\n        addEvents();\n      },\n      \n      selectedItems: {\n        userHandles: handles\n      },\n      drawingObject: { type: 'Orthogonal' },\n      getCustomTool: getTool,\n      rulerSettings: {\n        showRulers: true\n      },\n      // Handles the selection change event in the diagram.\n      selectionChange: (args) => {\n        if (args.state === \"Changed\") {\n          var selectedItems = diagramInstance.selectedItems.nodes;\n          selectedItems = selectedItems.concat(diagramInstance.selectedItems.connectors);\n\n          // Disabling toolbar items when no items are selected\n          if (selectedItems.length === 0) {\n            for (var i = 0; i < toolbarInstance.items.length; i++) {\n              var itemId = toolbarInstance.items[i].id;\n              if (itemId === \"Group\" || itemId === \"unGroup\" || itemId === \"bringForward\" || itemId === \"bringToFront\" ||\n                itemId === \"sendBackward\" || itemId === \"sendToBack\" || itemId === \"bold\" || itemId === \"italic\" ||\n                itemId === \"underline\" || itemId === \"fontStyle\" || itemId === \"fontSize\" || itemId === \"colorPicker\") {\n                toolbarInstance.items[i].disabled = true;\n              }\n            }\n          }\n\n          // Handling single item selection\n          if (selectedItems.length === 1) {\n            enableItems();\n            disableMultiselectedItems(selectedItems);\n\n            // Enabling or disabling specific toolbar items based on selection type\n            if (selectedItems[0].children !== undefined && selectedItems[0].children.length > 0) {\n              toolbarInstance.items.find(item => item.id === 'unGroup').disabled = false;\n              disableMultiselectedItems(selectedItems);\n            }\n            else {\n              toolbarInstance.items.find(item => item.id === 'unGroup').disabled = true;\n            }\n          }\n\n          // Handling multiple items selection\n          if (selectedItems.length > 1) {\n            enableItems();\n            toolbarInstance.items.find(item => item.id === 'Group').disabled = false;\n            toolbarInstance.items.find(item => item.id === 'unGroup').disabled = true;\n            disableMultiselectedItems(selectedItems);\n          }\n\n          // Handling specific scenarios when nodes are selected\n          if (args.newValue.length > 0 && args.newValue[0] instanceof Node) {\n            diagramInstance.selectedItems = { constraints: SelectorConstraints.All | SelectorConstraints.UserHandle, userHandles: handles };\n\n            // Manipulating selected nodes and their properties\n            if (diagramInstance.selectedItems.nodes.length > 0) {\n              drawingNode = diagramInstance.selectedItems.nodes[diagramInstance.selectedItems.nodes.length - 1];\n            }\n          }\n\n          // Resetting selection constraints when other types are selected\n          else {\n            diagramInstance.selectedItems = { constraints: SelectorConstraints.All & ~SelectorConstraints.UserHandle };\n          }\n        }\n      },\n\n      // Function Renders a dropdown component for selecting font Style.\n      fontStyle: function () {\n        return {\n          template: createApp({}).component(\"fontStyle\", {\n            template:\n              ' <ejs-combobox id=\"fontStyle\" :dataSource=\"fontTypeList\" :select=\"fontFamily\" :fields=\"fontfamilyfields\" :index=\"fontfamilyindex\"></ejs-combobox>',\n            components: {\n              'ejs-combobox': ComboBoxComponent\n            },\n            data() {\n              return {\n                fontTypeList: [\n                  { type: \"Arial\", text: \"Arial\" },\n                  { type: \"Aharoni\", text: \"Aharoni\" },\n                  { type: \"Bell MT\", text: \"Bell MT\" },\n                  { type: \"Fantasy\", text: \"Fantasy\" },\n                  { type: \"Segoe UI\", text: \"Segoe UI\" },\n                  { type: \"Times New Roman\", text: \"Times New Roman\" },\n                  { type: \"Verdana\", text: \"Verdana\" }\n                ],\n                fontFamily: function (args) {\n                  updateAnnotationValue(\"fontfamily\", null, args.itemData.text);\n                },\n                fontfamilyfields: { value: \"type\", text: \"text\" },\n                fontfamilyindex: 1,\n              }\n            }\n          })\n        };\n      },\n\n      //Function Renders a numeric text box component for selecting font size.\n      fontSize: function () {\n        return {\n          template: createApp({}).component(\"fontSize\", {\n            template:\n              '<ejs-numerictextbox id=\"range\" :value=\"12\" format=\"##.##\" :step=\"2\" :min=\"1\" :max=\"30\" width=\"110px\" :change=\"fontSizeChange\"></ejs-numerictextbox>',\n            components: {\n              'ejs-numerictextbox': NumericTextBoxComponent\n            },\n            data() {\n              return {\n                fontSizeChange: function (args) {\n                  updateAnnotationValue('fontsize', args.value);\n                },\n              }\n            }\n          })\n        };\n      },\n\n      //Function Renders a Color selector component for selecting font color.\n      colorPicker: function () {\n        return {\n          template: createApp({}).component(\"colorPicker\", {\n            template:\n              '<ejs-colorpicker id=\"color-picker\" type=\"color\" value=\"#000\" :change=\"colorChange\"></ejs-colorpicker>',\n            components: {\n              'ejs-colorpicker': ColorPickerComponent\n            },\n            data() {\n              return {\n                colorChange: function (args) {\n                  for (let i = 0; i < diagramInstance.selectedItems.nodes.length; i++) {\n                    var nodes = diagramInstance.selectedItems.nodes[i];\n                    for (let j = 0; j < nodes.annotations.length; j++) {\n                      nodes.annotations[j].style.color = args.currentValue.rgba;\n                      diagramInstance.dataBind();\n                    }\n                  }\n                },\n              }\n            }\n          })\n        };\n      },\n\n      // Method to handle toolbar item clicks\n      toolbarclicked: (args) => {\n        let item = args.item.tooltipText;\n        switch (item) {\n          // Group selected items\n          case 'Group':\n          diagramInstance.group();\n            toolbarInstance.items.find(item => item.id === 'Group').disabled = true;\n            toolbarInstance.items.find(item => item.id === 'unGroup').disabled = false;\n            break;\n          // Ungroup selected items\n          case 'UnGroup':\n          diagramInstance.unGroup();\n            break;\n          // Bring selected item(s) forward\n          case 'Bring Forward':\n          diagramInstance.moveForward();\n            break;\n          // Bring selected item(s) to front\n          case 'Bring To Front':\n          diagramInstance.bringToFront();\n            break;\n          // Send selected item(s) backward\n          case 'Send Backward':\n          diagramInstance.sendBackward();\n            break;\n          // Send selected item(s) to back\n          case 'Send To Back':\n          diagramInstance.sendToBack();\n            break;\n          // Toggle bold style for selected annotation(s)\n          case 'Bold':\n            updateAnnotationValue('bold', args.value, null, 11, true);\n            break;\n          // Toggle italic style for selected annotation(s)\n          case 'Italic':\n            updateAnnotationValue('italic', args.value, null, 12, true);\n            break;\n          // Toggle underline style for selected annotation(s)\n          case 'Underline':\n            updateAnnotationValue('underline', args.value, null, 13, true);\n            break;\n        }\n        diagramInstance.dataBind();\n      },\n    \n      //Sets the Node style for DragEnter element.\n      dragEnter: (args) => {\n        let node = args.element;\n        if (node && node.width && node.height) {\n          let width = node.width;\n          let height = node.height;\n          let ratio = 100 / node.width;\n          node.width = 100;\n          node.height *= ratio;\n          if (node.offsetX) node.offsetX += (node.width - width) / 2;\n          if (node.offsetY) node.offsetY += (node.height - height) / 2;\n          node.style = { fill: \"#357BD2\", strokeColor: \"white\" };\n        }\n      },\n      expandMode: \"Multiple\",\n      palettes: [\n        {\n          id: \"basic\",\n          expanded: true,\n          symbols: basicShapes,\n          iconCss: \"shapes\",\n          title: \"Basic Shapes\"\n        },\n      ],\n      palettewidth: \"100%\",\n      paletteheight: \"700px\",\n      symbolHeight: 60,\n      symbolWidth: 60,\n      palettegetNodeDefaults: (symbol) => {\n        var node = symbol;\n        if (node.id === 'terminator' || node.id === 'process') {\n          node.width = 80;\n          node.height = 50;\n        }\n        else if (node.id === 'decision' || node.id === 'document' || node.id === 'preDefinedProcess' ||\n          node.id === 'paperTap' || node.id === 'directData' || node.id === 'multiDocument' || node.id === 'data') {\n          node.width = 50;\n          node.height = 50;\n        }\n        else {\n          node.width = 50;\n          node.height = 50;\n        }\n        node.style.strokeColor = '#757575';\n      },\n      symbolMargin: { left: 15, right: 15, top: 15, bottom: 15 },\n      getSymbolInfo: (symbol) => {\n        return { fit: true };\n      },\n    };\n  },\n\n  mounted: function () {\n    diagramInstance = this.$refs.diagramObject.ej2Instances;\n    toolbarInstance = this.$refs.toolbar_diagram.ej2Instances;\n    paletteIconInstance = this.$refs.palette_icon.ej2Instances;\n    paletteSpaceInstance = this.$refs.palette_space.ej2Instances;\n\n  },\n\n};\n// Function to add events\nfunction addEvents() {\n  // Check if device is mobile\n  isMobile = window.matchMedia('(max-width:550px)').matches;\n  if (isMobile) {\n    if (paletteIconInstance) {\n      paletteIconInstance.addEventListener('click', openPalette, false);\n    }\n  }\n}\n// Function to open palette\nfunction openPalette() {\n  isMobile = window.matchMedia('(max-width:550px)').matches;\n  if (isMobile) {\n    if (!paletteSpaceInstance.classList.contains('sb-mobile-palette-open')) {\n      // Open palette\n      paletteSpaceInstance.classList.add('sb-mobile-palette-open');\n    } else {\n      // Close palette\n      paletteSpaceInstance.classList.remove('sb-mobile-palette-open');\n    }\n  }\n}\n//Enable toolbar items for specific functionalities.\nfunction enableItems() {\n  toolbarInstance.items.find(item => item.id === 'bringForward').disabled = false;\n  toolbarInstance.items.find(item => item.id === 'bringToFront').disabled = false;\n  toolbarInstance.items.find(item => item.id === 'sendBackward').disabled = false;\n  toolbarInstance.items.find(item => item.id === 'sendToBack').disabled = false;\n}\n//Disable toolbar items for multi-selected elements based on their annotations.\nfunction disableMultiselectedItems(selectedItems) {\n  // Iterate through selected items\n  for (let i = 0; i < selectedItems.length; i++) {\n    // Check if the selected item has annotations\n    if (selectedItems[i].annotations[0] !== undefined) {\n      // Enable toolbar items for annotation-related functionalities\n      toolbarInstance.items.find(item => item.id === 'fontStyle').disabled = false;\n      toolbarInstance.items.find(item => item.id === 'fontSize').disabled = false;\n      toolbarInstance.items.find(item => item.id === 'bold').disabled = false;\n      toolbarInstance.items.find(item => item.id === 'italic').disabled = false;\n      toolbarInstance.items.find(item => item.id === 'underline').disabled = false;\n      toolbarInstance.items.find(item => item.id === 'colorPicker').disabled = false;\n    }\n    else {\n      // Disable toolbar items for annotation-related functionalities\n      toolbarInstance.items.find(item => item.id === 'fontStyle').disabled = true;\n      toolbarInstance.items.find(item => item.id === 'fontSize').disabled = true;\n      toolbarInstance.items.find(item => item.id === 'bold').disabled = true;\n      toolbarInstance.items.find(item => item.id === 'italic').disabled = true;\n      toolbarInstance.items.find(item => item.id === 'underline').disabled = true;\n      toolbarInstance.items.find(item => item.id === 'colorPicker').disabled = true;\n    }\n  }\n}\n// Function to Handles user interactions with custom handles\nfunction getTool(action) {\n  // Remove selected elements\n  if (action == \"Delete\") {\n    diagramInstance.remove();\n  }\n  // Clone selected elements\n  else if (action == \"Clone\") {\n    diagramInstance.paste(diagramInstance.selectedItems.selectedObjects);\n  }\n  // Sets drawing mode and source ID for drawing elements\n  else if (action == \"Draw\") {\n    (diagramInstance.drawingObject).type = (diagramInstance.drawingObject).type ? (diagramInstance.drawingObject).type : 'Orthogonal';\n    (diagramInstance.drawingObject).sourceID = drawingNode.id;\n    diagramInstance.dataBind();\n  }\n}\n//Update annotation style attributes such as font size, font family, bold, italic, and underline.\nfunction updateAnnotationValue(value, fontSize, fontFamily, index, isSelected) {\n  // Iterate through selected nodes in the diagram\n  for (let i = 0; i < diagramInstance.selectedItems.nodes.length; i++) {\n    let node = diagramInstance.selectedItems.nodes[i];\n    // Iterate through annotations of each node\n    for (var j = 0; j < node.annotations.length; j++) {\n      var annotationstyle = node.annotations[j].style;\n      // Update style attributes based on the provided value\n      if (value === 'fontsize') {\n        annotationstyle.fontSize = fontSize;\n      } else if (value === 'fontfamily') {\n        annotationstyle.fontFamily = fontFamily.toString();\n      }\n      else if (value === 'bold') {\n        annotationstyle.bold = !annotationstyle.bold;\n        isSelected = annotationstyle.bold;\n      }\n      else if (value === 'italic') {\n        annotationstyle.italic = !annotationstyle.italic;\n        isSelected = annotationstyle.italic;\n      }\n      else if (value === 'underline') {\n        if (annotationstyle.textDecoration === \"None\") {\n          annotationstyle.textDecoration = 'Underline';\n          isSelected = true;\n        }\n        else {\n          annotationstyle.textDecoration = 'None';\n          isSelected = false;\n        }\n      }\n      if ((toolbarInstance).items[index] !== undefined) {\n        var cssClass = (toolbarInstance).items[index].cssClass;\n        (toolbarInstance).items[index].cssClass = isSelected ? cssClass + ' tb-item-selected' : cssClass.replace(' tb-item-selected', '');\n        (toolbarInstance).dataBind();\n      }\n      diagramInstance.dataBind();\n    }\n  }\n}\n</script>\n","dependencies":"{\"vue\":\"3.3.4\",\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-vue-base\":\"*\",\"@syncfusion/ej2-diagrams\":\"*\",\"@syncfusion/ej2-vue-diagrams\":\"*\",\"@syncfusion/ej2-navigations\":\"*\",\"@syncfusion/ej2-vue-navigations\":\"*\",\"@syncfusion/ej2-dropdowns\":\"*\",\"@syncfusion/ej2-vue-dropdowns\":\"*\",\"@syncfusion/ej2-inputs\":\"*\",\"@syncfusion/ej2-vue-inputs\":\"*\",\"@syncfusion/ej2-vue-charts\":\"*\",\"@syncfusion/ej2-vue-maps\":\"*\"}","src/main.js":"import { createApp } from 'vue'\nimport App from './App.vue'\ncreateApp(App).mount('#app')"}