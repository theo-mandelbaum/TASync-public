{"public/index.html":"<!DOCTYPE html>\r\n<html lang=\"en\">\r\n\r\n<head>\r\n    <meta charset=\"utf-8\">\r\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\r\n    <meta name=\"viewport\" content=\"width=device-width,initial-scale=1.0\">\r\n    <link rel=\"icon\" href=\"<%= BASE_URL %>favicon.ico\">\r\n    <title>\r\n        <%= htmlWebpackPlugin.options.title %>\r\n    </title>\r\n    <link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\r\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\r\n</head>\r\n\r\n<body>\r\n    <noscript>\r\n        <strong>We're sorry but <%= htmlWebpackPlugin.options.title %> doesn't work properly without JavaScript enabled.\r\n        Please enable it to continue.</strong>\r\n    </noscript>\r\n    <div id=\"app\"></div>\r\n    <style>\r\n            .control-section\r\n            {\r\n                margin-top: 100px;\r\n            }\r\n    </style>\r\n    <!-- built files will be auto injected -->\r\n</body>\r\n\r\n</html>\r\n","src/App.vue":"<template>\n\n<div class=\"col-lg-9 control-section\">\n  <!-- Diagram component section -->\n    <div class=\"content-wrapper\">\n        <ejs-diagram style='display:block' ref=\"diagramObject\" id=\"diagram\" :width='width' :height='height' :nodes='nodes' :connectors='connectors' :getNodeDefaults='getNodeDefaults' :getConnectorDefaults='getConnectorDefaults' :snapSettings='snapSettings' :selectionChange='selectionChange'></ejs-diagram>\n    </div>\n</div>\n<!-- Property panel section -->\n<div class=\"col-lg-3 property-section diagramNodes-property\">\n    <div class=\"property-panel-header\">\n        Properties\n    </div>\n     <!-- Appearance section -->\n    <div class=\"row\" id=\"appearance\" ref=\"appearance\">\n        <div class=\"row row-header\">\n            Appearance\n        </div>\n         <!-- Image previews for node styles -->\n        <div class=\"row\" style=\"padding-top: 8px\">\n            <div class=\"image-pattern-style\" id=\"preview0\" style=\"background-image: url(https://ej2.syncfusion.com/vue/demos/src/diagram/Images/node/Nodes_1.png); margin-right: 3px\">\n            </div>\n            <div class=\"image-pattern-style\" id=\"preview1\" style=\"background-image: url(https://ej2.syncfusion.com/vue/demos/src/diagram/Images/node/Nodes_2.png); margin-right: 0px 3px\">\n            </div>\n            <div class=\"image-pattern-style\" id=\"preview2\" style=\"background-image: url(https://ej2.syncfusion.com/vue/demos/src/diagram/Images/node/Nodes_3.png); margin: 0px 3px\">\n            </div>\n        </div>\n        <div class=\"row\" style=\"padding-top: 8px\">\n            <div class=\"image-pattern-style\" id=\"preview3\" style=\"background-image: url(https://ej2.syncfusion.com/vue/demos/src/diagram/Images/node/Nodes_4.png); margin-right: 3px\">\n            </div>\n            <div class=\"image-pattern-style\" id=\"preview4\" style=\"background-image: url(https://ej2.syncfusion.com/vue/demos/src/diagram/Images/node/Nodes_5.png); margin-right: 0px 3px\">\n            </div>\n        </div>\n    </div>\n     <!-- Behavior section -->\n    <div class=\"row\" style=\"padding-top: 10px\">\n        <div class=\"row row-header\">\n            Behavior\n        </div>\n        <div class=\"row\" style=\"padding-top: 8px\">\n            <!-- Enable or disable the AspectRatio for Node. -->\n            <ejs-checkbox ref=\"aspectRatioobj\" id=\"aspectRatio\"  \n                          :checked='aspectRatiochecked'\n                          :label='aspectRatiolabel'\n                          :change='aspectRatiochange'/>\n        </div>\n        <div class=\"row\" style=\"padding-top: 8px\">\n            <!-- Enable or disable the Interaction for Node. -->\n            <ejs-checkbox id=\"lock\"  ref=\"lockoobj\"      \n                          :checked='lockchecked'\n                          :label='label'\n                          :change='lockchange'/>\n        </div>\n    </div>\n</div>\n</template>\n\n<style scoped>\n/* Css for images in property panel  */\n.diagramNodes-property .image-pattern-style {\n  background-color: white;\n  background-size: contain;\n  background-repeat: no-repeat;\n  height: 75px;\n  width: calc((100% - 12px) / 3);\n  cursor: pointer;\n  border: 1px solid #d5d5d5;\n  background-position: center;\n  float: left;\n}\n\n.image-pattern-style:hover {\n  border-color: gray;\n  border-width: 2px;\n}\n\n.diagramNodes-property .row {\n  margin-left: 0px;\n  margin-right: 0px;\n}\n\n.diagramNodes-property .row-header {\n  font-size: 13px;\n  font-weight: 500;\n}\n/* Selection indicator */\n.e-selected-style {\n  border-color: #006ce6;\n  border-width: 2px;\n}\n\n</style>\n\n\n<script>\n// Import necessary Vue components and Syncfusion libraries\nimport {\n  DiagramComponent,\n  Diagram,\n  NodeConstraints,\n  SnapConstraints,\n  ConnectorConstraints\n} from \"@syncfusion/ej2-vue-diagrams\";\nimport {\n  CheckBox,\n  CheckBoxComponent,\n  ChangeEventArgs as CheckBoxChangeEventArgs\n} from \"@syncfusion/ej2-vue-buttons\";\n// Initial data for nodes and connectors\nlet nodes =  [\n  {id: 'sdlc', offsetX: 300, offsetY: 288, width:100, height:100, annotations: [{content: 'SDLC'}]},\n  {id: 'support', offsetX: 150, offsetY: 250, width:100, height:100, annotations: [{content: 'Support'}]},\n  {id: 'analysis', offsetX: 300, offsetY: 150, width:100, height:100, annotations: [{content: 'Analysis'}]},\n  {id: 'design', offsetX: 450, offsetY: 250, width:100, height:100, annotations: [{content: 'Design'}]},\n  {id: 'implement', offsetX: 400, offsetY: 400, width:100, height:100, annotations: [{content: 'implement'}]},\n  {id: 'deploy', offsetX: 200, offsetY: 400, width:100, height:100, annotations: [{content: 'Deploy'}]}\n];\n\nlet connections = [\n  {id: 'connector1', sourceID: 'analysis', targetID: 'design'},\n  {id: 'connector2', sourceID: 'design', targetID: 'implement'},\n  {id: 'connector3', sourceID: 'implement', targetID: 'deploy'},\n  {id: 'connector4', sourceID: 'deploy', targetID: 'support'},\n  {id: 'connector5', sourceID: 'support', targetID: 'analysis'}\n];\n\nlet node;\nlet diagramInstance;\nlet element;\nlet lockElement;\n// Export Vue component\nexport default {\n  components: {\n    'ejs-diagram': DiagramComponent,\n    'ejs-checkbox': CheckBoxComponent\n  },\n  data: function() {\n    return {\n     // Diagram properties\n      width: \"100%\",\n      height: \"645px\",\n      nodes: nodes,\n      connectors: connections,\n      //Sets the default values of a node\n      getNodeDefaults: (obj) => {\n        obj.shape = { shape: \"Ellipse\" };\n        obj.style = { fill: \"#37909A\", strokeColor: \"#024249\" };\n        obj.annotations[0].margin = { left: 10, right: 10 };\n        obj.annotations[0].style = { color: 'white', fill: 'none', strokeColor: 'none' };\n        return obj;\n      },\n      //Sets the default values of a Connector\n      getConnectorDefaults: (connector) => {\n        if (connector.targetDecorator) {\n          connector.targetDecorator.style = {\n            fill: \"#024249\",\n            strokeColor: \"#024249\"\n          };\n        }\n        return { style: { strokeColor: \"#024249\", strokeWidth: 2 } };\n      },\n      snapSettings: { constraints: SnapConstraints.None },\n\n       //Disable the AspectRatio if multiple nodes or connectors is selected .\n         selectionChange: (args) =>\n         {\n           if (args.state === 'Changed')\n           {\n            if (diagramInstance.selectedItems.nodes.length > 1 || diagramInstance.selectedItems.connectors.length > 0) {\n                element.disabled = true;\n            }\n            else {\n                element.disabled = false;\n            }\n           }\n         },\n      // Aspect ratio checkbox data\n      aspectRatiochecked: false,\n      aspectRatiolabel: \"Aspect ratio\",\n      aspectRatiochange: setNodeAspectConstraints,\n      // Lock checkbox data\n      lockchecked: false,\n      label: \"Lock\",\n      lockchange: setLockConstraints\n    };\n  },\n  mounted: function() {\n     // Initialize diagram instance and checkbox instances\n    diagramInstance = this.$refs.diagramObject.ej2Instances;\n    element = this.$refs.aspectRatioobj.ej2Instances;\n    lockElement = this.$refs.lockoobj.ej2Instances;\n    //Click event for Appearance of the Property Panel\n    let appearanceObj = this.$refs.appearance;\n    //Click event for Appearance of the Property Panel\n    appearanceObj.onclick = (args) => {\n      let target = args.target;\n\n      let selectedElement = document.getElementsByClassName(\n        \"e-selected-style\"\n      );\n      if (selectedElement.length) {\n        selectedElement[0].classList.remove(\"e-selected-style\");\n      }\n      if (target.className === \"image-pattern-style\") {\n        for (let i = 0; i < diagramInstance.nodes.length; i++) {\n          node = diagramInstance.nodes[i];\n          switch (target.id) {\n            case \"preview0\":\n              applyStyle(\n                node,\n                0,\n                undefined,\n                ~NodeConstraints.Shadow,\n                undefined,\n                undefined,\n                target\n              );\n              break;\n            case \"preview1\":\n              applyStyle(\n                node,\n                2,\n                undefined,\n                ~NodeConstraints.Shadow,\n                undefined,\n                undefined,\n                target\n              );\n              break;\n            case \"preview2\":\n              applyStyle(\n                node,\n                2,\n                \"5 5\",\n                ~NodeConstraints.Shadow,\n                undefined,\n                undefined,\n                target\n              );\n              break;\n            case \"preview3\":\n              applyStyle(\n                node,\n                2,\n                \"5 5\",\n                ~NodeConstraints.Shadow,\n                \"Radial\",\n                undefined,\n                target\n              );\n              break;\n            case \"preview4\":\n              let shadow = {\n                angle: 45,\n                distance: 15,\n                opacity: 0.3,\n                color: \"grey\"\n              };\n              applyStyle(\n                node,\n                2,\n                \"5 5\",\n                NodeConstraints.Shadow,\n                undefined,\n                shadow,\n                target\n              );\n              break;\n          }\n        }\n      }\n    };\n  }\n}\n\n\n//Enable or disable the Aspect Ratio Constraints for Node.\nfunction setNodeAspectConstraints(args) {\n    for (let i = 0; i < diagramInstance.nodes.length; i++) {\n        let node = diagramInstance.nodes[i];\n        if (element.checked) {\n            node.constraints |= NodeConstraints.AspectRatio;\n        } else {\n            node.constraints &= ~NodeConstraints.AspectRatio;\n        }\n        diagramInstance.dataBind();\n    }\n}\n//Enable or disable the lock Constraints for Nodes and Connectors\nfunction setLockConstraints(args) {\n    for (let i = 0; i < diagramInstance.nodes.length; i++) {\n        let node= diagramInstance.nodes[i];\n        if (lockElement.checked) {\n            node.constraints &= ~(NodeConstraints.Resize | NodeConstraints.Rotate | NodeConstraints.Drag | NodeConstraints.Delete);\n            node.constraints |= NodeConstraints.ReadOnly;\n        } else {\n            node.constraints |= NodeConstraints.Default & ~(NodeConstraints.ReadOnly);\n        }\n    }\n     for (let j = 0; j < diagramInstance.connectors.length; j++) {\n        let connector = diagramInstance.connectors[j];\n        if (lockElement.checked) {\n            connector.constraints &= ~(ConnectorConstraints.DragSourceEnd | ConnectorConstraints.DragTargetEnd | ConnectorConstraints.Drag | ConnectorConstraints.Delete);\n            connector.constraints |= ConnectorConstraints.ReadOnly;\n        } else {\n            connector.constraints |= ConnectorConstraints.Default & ~ConnectorConstraints.ReadOnly;\n        }\n    }\n    diagramInstance.dataBind();\n}\n\n//Set customStyle for Node.\n//Set customStyle for Node.\nfunction applyStyle( //it is in dedicated line here.\n  node,\n  width,\n  array,\n  con,\n  type,\n  sh,\n  target\n) {\n  if (node.style) {\n    node.style.fill = \"#37909A\";\n    node.style.strokeWidth = width;\n    node.style.strokeColor = \"#024249\";\n    node.style.strokeDashArray = array;\n  }\n  if (!type && node.style && node.style.gradient) {\n    node.style.gradient.type = \"None\";\n  } else {\n    let gradient;\n    gradient = {\n      cx: 50,\n      cy: 50,\n      fx: 50,\n      fy: 50,\n      stops: [\n        { color: \"#00555b\", offset: 0 },\n        { color: \"#37909A\", offset: 90 }\n      ],\n      type: \"Radial\"\n    };\n    if (node.style) node.style.gradient = gradient;\n  }\n  if (con & NodeConstraints.Shadow) {\n    node.shadow = { angle: 45, distance: 15, opacity: 0.3, color: \"grey\" };\n    node.constraints |= con;\n  } else {\n        node.constraints &= con;\n    }\n  diagramInstance.dataBind();\n  target.classList.add(\"e-selected-style\");\n}\n</script>\n","dependencies":"{\"vue\":\"3.3.4\",\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-vue-base\":\"*\",\"@syncfusion/ej2-diagrams\":\"*\",\"@syncfusion/ej2-vue-diagrams\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-vue-buttons\":\"*\",\"@syncfusion/ej2-vue-charts\":\"*\",\"@syncfusion/ej2-vue-maps\":\"*\",\"@syncfusion/ej2-vue-calendars\":\"*\",\"@syncfusion/ej2-data\":\"*\",\"@syncfusion/ej2-vue-grids\":\"*\"}","src/main.js":"import { createApp } from 'vue'\nimport App from './App.vue'\ncreateApp(App).mount('#app')"}