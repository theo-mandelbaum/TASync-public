{"public/index.html":"<!DOCTYPE html>\r\n<html lang=\"en\">\r\n\r\n<head>\r\n    <meta charset=\"utf-8\">\r\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\r\n    <meta name=\"viewport\" content=\"width=device-width,initial-scale=1.0\">\r\n    <link rel=\"icon\" href=\"<%= BASE_URL %>favicon.ico\">\r\n    <title>\r\n        <%= htmlWebpackPlugin.options.title %>\r\n    </title>\r\n    <link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\r\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\r\n</head>\r\n\r\n<body>\r\n    <noscript>\r\n        <strong>We're sorry but <%= htmlWebpackPlugin.options.title %> doesn't work properly without JavaScript enabled.\r\n        Please enable it to continue.</strong>\r\n    </noscript>\r\n    <div id=\"app\"></div>\r\n    <style>\r\n            .control-section\r\n            {\r\n                margin-top: 100px;\r\n            }\r\n    </style>\r\n    <!-- built files will be auto injected -->\r\n</body>\r\n\r\n</html>\r\n","src/App.vue":"<template>\n<div class=\"col-lg-8 control-section\">\n    <div class=\"content-wrapper\">\n        <!-- Configures the diagram with dynamic properties and settings -->\n        <ejs-diagram style='display:block' ref=\"diagramObj\" id=\"diagram\" :width='width' :height='height' :nodes='nodes' :connectors='connectors' :getNodeDefaults='getNodeDefaults' :selectedItems='selectedItems' :getCustomTool='getCustomTool'\n         :selectionChange='selectionChange' :fixedUserHandleClick='fixedUserHandleClick' :fixedUserHandleTemplate=\"fixedUserHandleTemplate\" :snapSettings='snapSettings'></ejs-diagram>\n    </div>\n</div>\n<div class=\"col-lg-4 property-section diagram-property\">\n    <div class=\"property-panel-header\">\n      Properties\n    </div>\n    <div id=\"propertypanel\" class=\"e-remove-selection\">\n    <div class=\"property-section-content\">\n    <div class=\"row property-panel-content\" id=\"appearance\" ref=\"appearance\">\n        <div class=\"row row-header\">\n            Appearance\n        </div>\n        <div class=\"row\">\n            <div class=\"row row-header\">\n                Alignment\n            </div>\n            <div class=\"row\" style=\"padding-top: 8px\">\n                <div class=\"image-pattern-style e-selected-style\" id=\"left\" style=\"background-image: url(https://ej2.syncfusion.com/vue/demos/src/diagram/Images/user-handle/bottoml.png); margin-right: 4px\">\n                </div>\n                <div class=\"image-pattern-style\" id=\"right\" style=\"background-image: url(https://ej2.syncfusion.com/vue/demos/src/diagram/Images/user-handle/bottomr.png); margin: 0px 4px\">\n                </div>\n                <div class=\"image-pattern-style\" id=\"topr\" style=\"background-image: url(https://ej2.syncfusion.com/vue/demos/src/diagram/Images/user-handle/topr.png);\">\n                </div>\n            </div>\n        </div>\n    </div>\n    <div class=\"row property-panel-content\" id=\"pattern\" ref=\"pattern\">\n            <div class=\"row\">\n                <div class=\"row row-header\">\n                    pattern\n                </div>\n                <div class=\"row\" style=\"padding-top: 8px\">\n                    <div class=\"image-pattern-style\" id=\"pattern1\" style=\"background-image: url(https://ej2.syncfusion.com/vue/demos/src/diagram/Images/user-handle/pattern1.png); margin-right: 4px\">\n                    </div>\n                    <div class=\"image-pattern-style\" id=\"pattern2\" style=\"background-image: url(https://ej2.syncfusion.com/vue/demos/src/diagram/Images/user-handle/pattern2.png); margin: 0px 4px\">\n                    </div>\n                    <div class=\"image-pattern-style\" id=\"pattern3\" style=\"background-image: url(https://ej2.syncfusion.com/vue/demos/src/diagram/Images/user-handle/pattern3.png);\">\n                    </div>\n                </div>\n            </div>\n      </div>\n     </div>\n     </div>\n</div>\n</template>\n\n<style scoped>\n.diagram-property .image-pattern-style {\n  background-color: white;\n  background-size: contain;\n  background-repeat: no-repeat;\n  height: 50px;\n  width: calc((100% - 18px) / 3);\n  cursor: pointer;\n  border: 1px solid #d5d5d5;\n  background-position: center;\n  float: left;\n}\n\n.diagram-property .image-pattern-style:hover {\n  border-color: gray;\n  border-width: 2px;\n}\n\n.diagram-property .row {\n  margin: 10px 0px 0px 0px;\n}\n\n.diagram-property .e-selected-style {\n  border-color: #006ce6;\n  border-width: 2px;\n}\n\n.diagram-property .row-header {\n  font-size: 15px;\n  font-weight: 500;\n  margin-top: 10px;\n}\n\n.diagram-property .e-checkbox-wrapper .e-label {\n  font-size: 12px;\n}\n\n.control-section {\n  padding-top: 0px;\n  padding-bottom: 0px;\n  padding-right: 0px;\n  padding-left: 0px;\n}\n\n.container-fluid {\n  padding-left: 0px;\n}\n\n.col-xs-6 {\n  padding-left: 0px;\n  padding-right: 0px;\n  padding-top: 5px;\n}\n .property-section .e-remove-selection {\n  cursor: not-allowed;\n}\n.e-remove-selection .property-section-content {\n  pointer-events: none;\n}\n</style>\n\n<script>\nimport { createApp } from \"vue\";\nimport {\n  DiagramComponent,\n  Diagram,\n  ConnectorModel,\n  UserHandleModel,\n  SelectorConstraints,\n  NodeModel,\n  Node,\n  Connector,\n  MoveTool,\n  cloneObject,\n  randomId,\n  SnapConstraints\n} from \"@syncfusion/ej2-vue-diagrams\";\n\nlet diagramInstance;\nlet appearanceInstance;\nlet patternInstance;\n\n// Defines the collection of nodes in the diagram.\nlet nodes = [\n  {\n    id: \"NewIdea\",\n    width: 150,\n    height: 60,\n    offsetX: 300,\n    offsetY: 60,\n    shape: { type: \"Flow\", shape: \"Terminator\" },\n    annotations: [{ content: \"New idea identified\" }]\n  },\n  {\n    id: \"Meeting\",\n    width: 150,\n    height: 60,\n    offsetX: 300,\n    offsetY: 155,\n    shape: { type: \"Flow\", shape: \"Process\" },\n    annotations: [{ content: \"Meeting with board\" }]\n  },\n  {\n    id: \"BoardDecision\",\n    width: 150,\n    height: 110,\n    offsetX: 300,\n    offsetY: 280,\n    shape: { type: \"Flow\", shape: \"Decision\" },\n    annotations: [{ content: \"Board decides \\n whether to proceed\" }]\n  },\n  {\n    id: \"Project\",\n    width: 150,\n    height: 100,\n    offsetX: 300,\n    offsetY: 430,\n    shape: { type: \"Flow\", shape: \"Decision\" },\n    annotations: [{ content: \"Find Project manager\" }]\n  },\n  {\n    id: \"End\",\n    width: 150,\n    height: 60,\n    offsetX: 300,\n    offsetY: 555,\n    shape: { type: \"Flow\", shape: \"Process\" },\n    annotations: [{ content: \"Implement and Deliver\" }]\n  },\n  {\n    id: \"Decision\",\n    width: 250,\n    height: 60,\n    offsetX: 550,\n    offsetY: 60,\n    shape: { type: \"Flow\", shape: \"Card\" },\n    annotations: [{ content: \"Decision process for new software ideas\" }],\n    fixedUserHandles: [{ padding: { left: 2, right: 2, top: 2, bottom: 2 }, offset:{x:1.1,y:0.5}, width: 20, height: 20,}],\n  },\n  {\n    id: \"Reject\",\n    width: 150,\n    height: 60,\n    offsetX: 550,\n    offsetY: 280,\n    shape: { type: \"Flow\", shape: \"Process\" },\n    annotations: [{ content: \"Reject\" }]\n  },\n  {\n    id: \"Resources\",\n    width: 150,\n    height: 60,\n    offsetX: 550,\n    offsetY: 430,\n    shape: { type: \"Flow\", shape: \"Process\" },\n    annotations: [{ content: \"Hire new resources\" }]\n  }\n];\n\n// Defines the collection of connectors in the diagram.\nlet connectors = [\n  {\n    id: \"connector1\",\n    type: \"Straight\",\n    sourceID: \"NewIdea\",\n    targetID: \"Meeting\"\n  },\n  {\n    id: \"connector2\",\n    type: \"Straight\",\n    sourceID: \"Meeting\",\n    targetID: \"BoardDecision\"\n  },\n  {\n    id: \"connector3\",\n    type: \"Straight\",\n    sourceID: \"BoardDecision\",\n    targetID: \"Project\"\n  },\n  { id: \"connector4\", type: \"Straight\", sourceID: \"Project\", targetID: \"End\" },\n  {\n    id: \"connector5\",\n    type: \"Straight\",\n    sourceID: \"BoardDecision\",\n    targetID: \"Reject\"\n  },\n  {\n    id: \"connector6\",\n    type: \"Straight\",\n    sourceID: \"Project\",\n    targetID: \"Resources\"\n  }\n];\n\n// Defines the collection of user handles for nodes in the diagram.\nlet handles= [\n  {\n    name: \"clone\",\n    pathData:\n      \"M60.3,18H27.5c-3,0-5.5,2.4-5.5,5.5v38.2h5.5V23.5h32.7V18z M68.5,28.9h-30c-3,\" +\n      \"0-5.5,2.4-5.5,5.5v38.2c0,3,2.4,5.5,5.5,5.5h30c3,0,5.5-2.4,5.5-5.5V34.4C73.9,31.4,71.5,28.9,68.5,28.9z \" +\n      \"M68.5,72.5h-30V34.4h30V72.5z\",\n    visible: true,\n    offset: 0,\n    side: \"Bottom\",\n    margin: { top: 0, bottom: 0, left: 0, right: 0 }\n  }\n];\n\nlet itemVue = createApp({}).component(\"fixedUserHandleTemplate\", {\n  template: `<div style=\"width:100%;height:100%\">\n        <button style=\"background-color:black; border-radius:50%; width:25px; height:25px; border:none; cursor:context-menu; padding:0; display:flex; align-items:center; justify-content:center; background-image:url(https://ej2.syncfusion.com/vue/demos/src/diagram/Images/user-handle/delete.png); background-size:cover; background-position:center;\">\n        </button>\n    </div> `,\n  data() {\n    return {};\n  }\n});\n\nexport default {\n  components: {\n    // Defines components for the diagram\n    'ejs-diagram': DiagramComponent\n  },\n  data: function() {\n    return {\n      // Initialize component data\n      width: \"100%\",\n      height: \"600px\",\n      nodes: nodes,\n      connectors: connectors,\n      selectedItems: {\n        constraints: SelectorConstraints.UserHandle,\n        userHandles: handles\n      },\n      snapSettings: { constraints: SnapConstraints.None },\n      fixedUserHandleTemplate: function () {\n      return { template: itemVue };\n      },\n     // Set the default value for Node.\n      getNodeDefaults: (node) => {\n        return {\n          style: { fill: \"#578CA9\", strokeColor: \"none\" },\n          annotations: [{ style: { color: \"white\" } }]\n        };\n      },\n      // Set up the CustomTool.\n      getCustomTool: getTool,\n      // Enable or disable the property panel based on the selection.\n      selectionChange:function (arg) {\n            var propertyAppearance = document.getElementById('propertypanel');\n            var getSelectedElement = document.getElementsByClassName('e-remove-selection');\n            if (arg.newValue) {\n              // Check if the item in newValue is either a Node or Connector\n                if ((arg.newValue[0] instanceof Node) || (arg.newValue[0] instanceof Connector)) {\n                    if (getSelectedElement.length) {\n                        getSelectedElement[0].classList.remove('e-remove-selection');\n                    }\n                } else {\n                    if (!propertyAppearance.classList.contains('e-remove-selection')) {\n                        propertyAppearance.classList.add('e-remove-selection');\n                    }\n        \n                }\n            }\n        },\n      fixedUserHandleClick:function(){\n        diagramInstance.select([diagramInstance.nameTable['Decision']]);\n        diagramInstance.remove();\n      }\n    };\n  },\n  mounted: function() {\n    diagramInstance = this.$refs.diagramObj.ej2Instances;\n    appearanceInstance = this.$refs.appearance;\n    patternInstance=this.$refs.pattern;\n    diagramInstance.fitToPage();\n    diagramInstance.select([diagramInstance.nodes[0]]);\n    //Change the postion of the UserHandle\n    appearanceInstance.onclick = (args) => {\n    let target = args.target ;\n    let appearanceBlock = appearanceInstance;\n    let selectedElement = appearanceBlock.getElementsByClassName('e-selected-style');\n    if (selectedElement.length) {\n      selectedElement[0].classList.remove('e-selected-style');\n    }\n    if (target.className === 'image-pattern-style') {\n      switch (target.id) {\n        case 'left':\n          setuserhandleposition(0, 'Bottom', target);\n          break;\n        case 'right':\n          setuserhandleposition(1, 'Bottom', target);\n          break;\n        case 'topr':\n          setuserhandleposition(0, 'Right', target);\n          break;\n      }\n    }\n    };\n    //Change the appearence of the UserHandle\n    patternInstance.onclick = (args) => {\n    let target = args.target;\n    let patternBlock = patternInstance;\n    let selectedElement = patternBlock.getElementsByClassName('e-selected-style');\n    if (selectedElement.length) {\n      selectedElement[0].classList.remove('e-selected-style');\n    }\n    if (target.className === 'image-pattern-style') {\n      switch (target.id) {\n        case 'pattern1':\n          applyuserhandlestyle('#1E90FF', target);\n          break;\n        case 'pattern2':\n          applyuserhandlestyle('#3CB371', target);\n          break;\n        case 'pattern3':\n          applyuserhandlestyle('#FF6347', target);\n          break;\n      }\n    }\n    };\n  }\n}\n//Enable the clone Tool for UserHandle.\nfunction getTool(action) {\n  let tool;\n  if (action === \"clone\") {\n    tool = new CloneTool(diagramInstance.commandHandler);\n  }\n  return tool;\n}\n\n//set the position of the userhandle.\nfunction setuserhandleposition(\n  offset,\n  side,\n  target\n) {\n  if (diagramInstance.selectedItems.userHandles) {\n    diagramInstance.selectedItems.userHandles[0].offset = offset;\n    diagramInstance.selectedItems.userHandles[0].side = side;\n  }\n  target.classList.add(\"e-selected-style\");\n}\n//set the style of the userhandle.\nfunction applyuserhandlestyle(bgcolor, target) {\n  if (diagramInstance.selectedItems.userHandles) {\n    diagramInstance.selectedItems.userHandles[0].backgroundColor = bgcolor;\n    diagramInstance.selectedItems.userHandles[0].pathColor = \"White\";\n  }\n  target.classList.add(\"e-selected-style\");\n}\n\n//Defines the clone tool used to copy Node and Connector\nclass CloneTool extends MoveTool {\n   mouseDown(args) {\n    let newObject;\n    if (\n      diagramInstance.selectedItems.nodes &&\n      diagramInstance.selectedItems.connectors\n    ) {\n      if (diagramInstance.selectedItems.nodes.length > 0) {\n        newObject = cloneObject(\n          diagramInstance.selectedItems.nodes[0]\n        );\n      } else {\n        newObject = cloneObject(\n          diagramInstance.selectedItems.connectors[0]\n        );\n      }\n    }\n    newObject.id += randomId();\n    diagramInstance.paste([newObject]);\n     if (diagramInstance.selectedItems.connectors.length > 0)\n     {\n      args.source = diagramInstance.connectors[\n      diagramInstance.connectors.length - 1\n    ];\n     }\n     else\n     {\n       args.source = diagramInstance.nodes[\n      diagramInstance.nodes.length - 1\n    ];\n     }\n    args.sourceWrapper = args.source.wrapper;\n    super.mouseDown(args);\n    this.inAction = true;\n  }\n}\n</script>\n","dependencies":"{\"vue\":\"3.3.4\",\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-vue-base\":\"*\",\"@syncfusion/ej2-diagrams\":\"*\",\"@syncfusion/ej2-vue-diagrams\":\"*\",\"@syncfusion/ej2-vue-charts\":\"*\",\"@syncfusion/ej2-vue-maps\":\"*\",\"@syncfusion/ej2-vue-calendars\":\"*\",\"@syncfusion/ej2-data\":\"*\",\"@syncfusion/ej2-vue-grids\":\"*\"}","src/main.js":"import { createApp } from 'vue'\nimport App from './App.vue'\ncreateApp(App).mount('#app')"}