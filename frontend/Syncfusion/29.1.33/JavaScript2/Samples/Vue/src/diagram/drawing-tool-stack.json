{"public/index.html":"<!DOCTYPE html>\r\n<html lang=\"en\">\r\n\r\n<head>\r\n    <meta charset=\"utf-8\">\r\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\r\n    <meta name=\"viewport\" content=\"width=device-width,initial-scale=1.0\">\r\n    <link rel=\"icon\" href=\"<%= BASE_URL %>favicon.ico\">\r\n    <title>\r\n        <%= htmlWebpackPlugin.options.title %>\r\n    </title>\r\n    <link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\r\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\r\n</head>\r\n\r\n<body>\r\n    <noscript>\r\n        <strong>We're sorry but <%= htmlWebpackPlugin.options.title %> doesn't work properly without JavaScript enabled.\r\n        Please enable it to continue.</strong>\r\n    </noscript>\r\n    <div id=\"app\"></div>\r\n    <style>\r\n            .control-section\r\n            {\r\n                margin-top: 100px;\r\n            }\r\n    </style>\r\n    <!-- built files will be auto injected -->\r\n</body>\r\n\r\n</html>\r\n","src/App.vue":"<template>\n<div class=\"control-section\">\n  <div class=\"col-lg-9 control-section\">\n    <ejs-diagram style='display:block' ref=\"diagramObj\" id=\"diagram\" :width='width' :height='height' :snapSettings='snapSettings' :rulerSettings='rulerSettings' :tool='tool'></ejs-diagram>\n  </div>\n  <div class=\"diagram-drawingTool\">\n  <div class=\"col-lg-3 property-section\">\n    <div class=\"property-panel-header\">\n      Properties\n    </div>\n    <div class=\"row  property-panel-content\" id=\"appearance\" ref=\"appearanceInstance\" >\n      <div class=\"row row-header\" style=\"padding-top: 10px\">\n        Shapes\n      </div>\n      <div class=\"row\" style=\"padding-top: 8px\">\n        <div title=\"Retangle\" class=\"image-pattern-style e-selected-style\" id=\"shape1\" style=\"background-image: url(https://ej2.syncfusion.com/vue/demos/src/diagram/Images/drawingTool/basicshape/DrawingTool_1.png); margin-right: 3px\">\n        </div>\n        <div title=\"Ellipse\" class=\"image-pattern-style\" id=\"shape2\" style=\"background-image: url(https://ej2.syncfusion.com/vue/demos/src/diagram/Images/drawingTool/basicshape/DrawingTool_2.png); margin: 0px 3px\">\n        </div>\n        <div title=\"Hexagon\" class=\"image-pattern-style\" id=\"shape3\" style=\"background-image: url(https://ej2.syncfusion.com/vue/demos/src/diagram/Images/drawingTool/basicshape/DrawingTool_3.png);\">\n        </div>\n      </div>\n      <div class=\"row\" style=\"padding-top: 8px\">\n        <div title=\"Pentagon\" class=\"image-pattern-style\" id=\"shape4\" style=\"background-image: url(https://ej2.syncfusion.com/vue/demos/src/diagram/Images/drawingTool/basicshape/DrawingTool_4.png); margin-right: 3px\">\n        </div>\n        <div title=\"Triangle\" class=\"image-pattern-style\" id=\"shape5\" style=\"background-image: url(https://ej2.syncfusion.com/vue/demos/src/diagram/Images/drawingTool/basicshape/DrawingTool_5.png); margin: 0px 3px\">\n        </div>\n        <div title=\"Path\" class=\"image-pattern-style\" id=\"path\" style=\"background-image: url(https://ej2.syncfusion.com/vue/demos/src/diagram/Images/drawingTool/DrawingTool_6.png);\">\n        </div>\n      </div>\n      <div class=\"row\" style=\"padding-top: 8px\">\n        <div title=\"Image\" class=\"image-pattern-style\" id=\"image\" style=\"background-image: url(https://ej2.syncfusion.com/vue/demos/src/diagram/Images/drawingTool/DrawingTool_7.png); margin-right: 3px\">\n        </div>\n        <div title=\"SVG\" class=\"image-pattern-style\" id=\"svg\" style=\"background-image: url(https://ej2.syncfusion.com/vue/demos/src/diagram/Images/drawingTool/DrawingTool_8.png); margin-right: 3px\">\n        </div>\n        <div title=\"Text\" class=\"image-pattern-style\" id=\"text\" style=\"background-image: url(https://ej2.syncfusion.com/vue/demos/src/diagram/Images/drawingTool/DrawingTool_9.png); margin-right: 3px\">\n        </div>\n      </div>\n      <div class=\"row row-header\" style=\"padding-top: 10px\">\n        Connector\n      </div>\n      <div class=\"row\" style=\"padding-top: 8px\">\n        <div class=\"image-pattern-style\" id=\"straight\" style=\"background-image: url(https://ej2.syncfusion.com/vue/demos/src/diagram/Images/drawingTool/connector/Connectors_1.png); margin-right: 3px\">\n        </div>\n        <div class=\"image-pattern-style\" id=\"ortho\" style=\"background-image: url(https://ej2.syncfusion.com/vue/demos/src/diagram/Images/drawingTool/connector/Connectors_2.png); margin: 0px 3px\">\n        </div>\n        <div class=\"image-pattern-style\" id=\"cubic\" style=\"background-image: url(https://ej2.syncfusion.com/vue/demos/src/diagram/Images/drawingTool/connector/Connectors_3.png); \">\n        </div>\n        <div class=\"image-pattern-style\" id=\"freehand\" style=\"background-image: url(https://ej2.syncfusion.com/vue/demos/src/diagram/Images/drawingTool/connector/FreeHand_4.png);margin-top: 5px \">\n        </div>\n      </div>\n      <div class=\"row\" style=\"padding-top: 10px\">\n        <ejs-checkbox id=\"checked\"       \n                      :label='checkedlabel'\n                      :checked='checkedchecked'\n                      :change='checkedchange' ref=\"checkedInstance\"></ejs-checkbox>\n      </div>\n    </div>\n</div>\n</div>\n</div>\n</template>\n\n<style scoped>\n/* Css for images in property panel  */\n.diagram-drawingTool .image-pattern-style {\n  background-color: white;\n  background-size: contain;\n  background-repeat: no-repeat;\n  height: 45px;\n  width: calc((100% - 12px) / 3);\n  cursor: pointer;\n  border: 1px solid #d5d5d5;\n  background-position: center;\n  float: left;\n}\n\n.diagram-drawingTool .image-pattern-style:hover {\n  border-color: gray;\n  border-width: 2px;\n}\n/* Property panel CSS */\n.diagram-drawingTool .row {\n  margin-left: 0px;\n  margin-right: 0px;\n}\n\n.diagram-drawingTool .row-header {\n  font-size: 12px;\n  font-weight: 500;\n}\n\n.diagram-drawingTool .property-panel-header {\n  padding-top: 15px;\n  padding-bottom: 5px;\n}\n /* Selection indicator */\n.diagram-drawingTool .e-selected-style {\n  border-color: #006ce6;\n  border-width: 2px;\n}\n/* Diagram Div CSS */\n.diagram-drawingTool .control-section {\n  padding-top: 0px;\n  padding-bottom: 0px;\n  padding-right: 0px;\n}\n\n</style>\n\n<script>\nimport {\n  DiagramComponent,\n  SnapConstraints,\n  DiagramTools,\n  UndoRedo,\n  Snapping,\n  PortConstraints,\n  PortVisibility,\n} from \"@syncfusion/ej2-vue-diagrams\";\nimport { CheckBoxComponent } from \"@syncfusion/ej2-vue-buttons\";\n// Global variables for diagram, appearance, and checkbox instances\nlet node;\nlet diagramInstance;\nlet appearanceInstance;\nlet checkedInstance;\n// Define the grid intervals\nlet interval= [1,9,0.25,9.75,0.25,9.75,0.25,9.75,0.25,9.75,0.25,9.75,0.25,9.75,0.25,9.75,0.25,9.75,0.25,9.75];\n// Gridlines settings\nlet gridlines = {\n  lineColor: \"#e0e0e0\",\n  lineIntervals: interval\n};\n// Snap settings\nlet snapSettings = {\n  snapObjectDistance: 5,\n  constraints:\n    SnapConstraints.SnapToObject |\n    SnapConstraints.SnapToLines |\n    SnapConstraints.ShowLines,\n  horizontalGridlines: gridlines,\n  verticalGridlines: gridlines\n};\n\nexport default {\n  components: {\n    'ejs-diagram': DiagramComponent,\n    'ejs-checkbox': CheckBoxComponent\n  },\n  data: function() {\n    return {\n      width: \"100%\",\n      height: \"540px\",\n      snapSettings: snapSettings,\n      rulerSettings: {\n        showRulers: true,\n        dynamicGrid: false\n      },\n      //Sets the default values of a node\n      getNodeDefaults: (node) => {\n        let obj = node;\n        let basicShape = node.shape;\n        if (\n          basicShape.shape === \"Rectangle\" ||\n          basicShape.shape === \"Ellipse\"\n        ) {\n          obj.ports = getPorts(node);\n        } else if (basicShape.shape === \"Hexagon\") {\n          obj.ports = getHexagonPorts(node);\n        } else if (basicShape.shape === \"Pentagon\") {\n          obj.ports = getPentagonPorts(node);\n        } else if (basicShape.type === \"Path\") {\n          obj.ports = getPathPorts(node);\n        }\n      },\n      tool:DiagramTools.ContinuousDraw,\n      checkedlabel: \"Continous Draw\",\n      checkedchecked: true,\n      checkedchange: onChange\n    };\n  },\n  provide: {\n    diagram: [UndoRedo, Snapping]\n  },\n   // Method to handle mounted event\n  mounted: function() {\n    diagramInstance = this.$refs.diagramObj.ej2Instances;\n    appearanceInstance=this.$refs.appearanceInstance;\n    checkedInstance=this.$refs.checkedInstance.ej2Instances;\n    setShape(\"Rectangle\");\n    //Click Event used to decide the drawing object.\n    appearanceInstance.onclick = (args) => {\n      let target = args.target;\n      let selectedElement = document.getElementsByClassName(\n        \"e-selected-style\"\n      );\n      if (\n        selectedElement.length &&\n        target.id !== \"\" &&\n        target.id !== \"checked\"\n      ) {\n        selectedElement[0].classList.remove(\"e-selected-style\");\n      }\n      if (!target.classList.contains(\"e-selected-style\")) {\n        target.classList.add(\"e-selected-style\");\n      }\n      if (target.className === \"image-pattern-style e-selected-style\") {\n        switch (target.id) {\n          case \"shape1\": setShape(\"Rectangle\"); break;\n          case \"shape2\": setShape(\"Ellipse\"); break;\n          case \"shape3\": setShape(\"Hexagon\");  break;\n          case \"shape4\": setShape(\"Pentagon\"); break;\n          case \"shape5\": setShape(\"Triangle\"); break;\n          case \"straight\": setDrawObject(null, { type: \"Straight\" }); break;\n          case \"ortho\": setDrawObject(null, { type: \"Orthogonal\" }); break;\n          case \"cubic\": setDrawObject(null, { type: \"Bezier\" }); break;\n          case \"path\": getPathShape();target.classList.add(\"e-selected-style\"); break;\n          case \"image\": getImageNode();  break;\n          case \"svg\": getSVGNode(); break;\n          case \"text\":  getTextNode(); break;\n          case \"freehand\": setDrawObject(null, { type: \"Freehand\" }); break;\n          default:\n            if (selectedElement.length && target.id !== \"\" && target.id !== \"checked\" ) {\n              selectedElement[0].classList.remove(\"e-selected-style\");\n            }\n        }\n      }\n    };\n  }\n}\n\n// Handle checkbox change event\nfunction onChange(args) {\n  diagramInstance.tool = args.checked ? DiagramTools.ContinuousDraw : DiagramTools.DrawOnce\n}\n\n//Enable drawing object.\nfunction setDrawObject(node, connector) {\n  diagramInstance.tool = checkedInstance.checked ? DiagramTools.ContinuousDraw : DiagramTools.DrawOnce;\n  diagramInstance.drawingObject = connector ? connector : node;\n  diagramInstance.dataBind();\n}\n//Enable drawing Tool.\nfunction enableTool() {\n  if (!checkedInstance.checked) {\n    diagramInstance.tool = DiagramTools.DrawOnce;\n  }\n  diagramInstance.dataBind();\n}\n\n//Set the Shape of the drawing Object.\nfunction setShape(shapeType) {\n  node = { shape: { type: \"Basic\", shape: shapeType } };\n  diagramInstance.drawingObject = node;\n  enableTool();\n}\n//Set TextNode Shape.\nfunction getTextNode() {\n  node = { shape: { type: \"Text\" } };\n  setDrawObject(node, null);\n}\n//Set SVG Node\nfunction getSVGNode() {\n  node = { shape: { type: \"Native\", content: getPath() } };\n  setDrawObject(node, null);\n}\n// Get SVG path content\nfunction getPath() {\n  let str =\n    '<svg version=\"1.0\" xmlns=\"http://www.w3.org/2000/svg\" width=\"350.000000pt\" ' +\n    'height=\"229.000000pt\" viewBox=\"0 0 350.000000 229.000000\" ' +\n    'preserveAspectRatio=\"xMidYMid meet\"> <metadata>' +\n    \" Created by potrace 1.11, written by Peter Selinger 2001-2013\" +\n    ' </metadata> <g transform=\"translate(0.000000,229.000000) scale(0.100000,-0.100000)\"' +\n    ' fill=\"#de6ca9\" stroke=\"none\"><path d=\"M0 1145 l0 -1145 1750 0 1750 0 0 1145 0 1145' +\n    \" -1750 0 -1750 0 0 -1145z m1434 186 c19 -8 26 -18 26 -37 0 -24 -3 -26\" +\n    \" -27 -19 -16 3 -58 9 -94 12 -63 5 -67 4 -88 -23 -23 -29 -21 -60 6 -81 8\" +\n    \" -6 47 -19 86 -29 55 -13 80 -25 106 -51 31 -31 33 -37 29 -88 -8 -94 -69\" +\n    \" -133 -193 -122 -90 7 -115 20 -115 58 0 26 3 30 18 24 91 -38 168 -41 204\" +\n    \" -8 23 21 23 75 1 96 -10 8 -49 23 -88 33 -88 22 -135 63 -135 118 0 92 67 140\" +\n    \" 181 131 31 -2 68 -9 83 -14z m854 -6 c38 -15 42 -21 42 -51 l0 -33 -47 25\" +\n    \" c-41 22 -58 25 -115 22 -58 -3 -72 -8 -97 -32 -79 -75 -59 -259 32 -297 35\" +\n    \" -15 106 -18 150 -6 26 7 27 10 27 67 l0 60 -50 0 c-47 0 -50 2 -50 25 0 25\" +\n    \" 1 25 80 25 l81 0 -3 -97 -3 -98 -40 -20 c-22 -10 -65 -21 -95 -23 -153 -11\" +\n    \" -242 74 -243 230 0 145 93 235 233 224 30 -2 74 -12 98 -21z m-638 -169 l67\" +\n    \" -178 40 103 c22 57 53 139 69 182 28 75 29 77 62 77 19 0 32 -4 30 -9 -1 -5\" +\n    \" -39 -104 -83 -220 l-80 -211 -37 0 c-35 0 -37 2 -56 53 -11 28 -48 124 -81 \" +\n    '211 -34 87 -61 163 -61 168 0 5 14 8 32 6 31 -3 32 -5 98 -182z\" />' +\n    \"</g> </svg>\";\n  return str;\n}\nfunction getImageNode() {\n  node = { shape: { type: \"Image\", source: \"https://ej2.syncfusion.com/vue/demos/src/diagram/employee.png\" } };\n  setDrawObject(node, null);\n}\nfunction getPathShape() {\n  node = { shape: { type: \"Path\", data: \"M540.3643,137.9336L546.7973,159.7016L570.3633,159.7296L550.7723,171.9366L558.9053,194.9966L540.3643,179.4996L521.8223,194.9966L529.9553,171.9366L510.3633,159.7296L533.9313,159.7016L540.3643,137.9336z\" } };\n  setDrawObject(node, null);\n}\nfunction getPorts(obj) {\n  let ports = [\n    createPort(\"port1\", { x: 0, y: 0.5 }),\n    createPort(\"port2\", { x: 0.5, y: 1 }),\n    createPort(\"port3\", { x: 1, y: 0.5 }),\n    createPort(\"port4\", { x: 0.5, y: 0 })\n  ];\n  return ports;\n}\nfunction getPathPorts(obj) {\n  let ports = [\n    createPort(\"port1\", { x: 0.5, y: 0 }),\n    createPort(\"port2\", { x: 0, y: 0.39 }),\n    createPort(\"port3\", { x: 1, y: 0.39 }),\n    createPort(\"port4\", { x: 0.2, y: 1 }),\n    createPort(\"port5\", { x: 0.8, y: 1 })\n  ];\n  return ports;\n}\nfunction getHexagonPorts(obj) {\n  let ports = [\n    createPort(\"port1\", { x: 0, y: 0.5 }),\n    createPort(\"port2\", { x: 0.5, y: 0 }),\n    createPort(\"port3\", { x: 0.3, y: 0 }),\n    createPort(\"port4\", { x: 0.7, y: 0 }),\n    createPort(\"port5\", { x: 1, y: 0.5 }),\n    createPort(\"port6\", { x: 0.5, y: 1 }),\n    createPort(\"port7\", { x: 0.3, y: 1 }),\n    createPort(\"port8\", { x: 0.7, y: 1 })\n  ];\n  return ports;\n}\nfunction getPentagonPorts(obj) {\n  let ports = [\n    createPort(\"port1\", { x: 0.5, y: 0 }),\n    createPort(\"port2\", { x: 0, y: 0.4 }),\n    createPort(\"port3\", { x: 1, y: 0.4 }),\n    createPort(\"port4\", { x: 0.2, y: 1 }),\n    createPort(\"port5\", { x: 0.85, y: 1 })\n  ];\n  return ports;\n}\nfunction createPort(id, offset) {\n  let port = {\n    id: id,\n    shape: \"Square\",\n    offset: offset,\n    constraints: PortConstraints.Draw,\n    visibility: PortVisibility.Hover\n  };\n  return port;\n}\n</script>\n","dependencies":"{\"vue\":\"3.3.4\",\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-vue-base\":\"*\",\"@syncfusion/ej2-diagrams\":\"*\",\"@syncfusion/ej2-vue-diagrams\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-vue-buttons\":\"*\",\"@syncfusion/ej2-vue-charts\":\"*\",\"@syncfusion/ej2-vue-maps\":\"*\"}","src/main.js":"import { createApp } from 'vue'\nimport App from './App.vue'\ncreateApp(App).mount('#app')"}