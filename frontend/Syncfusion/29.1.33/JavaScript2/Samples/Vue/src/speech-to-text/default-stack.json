{"public/index.html":"<!DOCTYPE html>\r\n<html lang=\"en\">\r\n\r\n<head>\r\n    <meta charset=\"utf-8\">\r\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\r\n    <meta name=\"viewport\" content=\"width=device-width,initial-scale=1.0\">\r\n    <link rel=\"icon\" href=\"<%= BASE_URL %>favicon.ico\">\r\n    <title>\r\n        <%= htmlWebpackPlugin.options.title %>\r\n    </title>\r\n    <link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\r\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\r\n    <link href=\"https://ej2.syncfusion.com/vue/demos/lib/codemirror.css\" rel=\"stylesheet\" />\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.3.0/codemirror.js\" type=\"text/javascript\"></script>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.3.0/mode/css/css.js\" type=\"text/javascript\"></script>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.3.0/mode/xml/xml.js\" type=\"text/javascript\"></script>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.3.0/mode/htmlmixed/htmlmixed.js\" type=\"text/javascript\"></script>\n</head>\r\n\r\n<body>\r\n    <noscript>\r\n        <strong>We're sorry but <%= htmlWebpackPlugin.options.title %> doesn't work properly without JavaScript enabled.\r\n        Please enable it to continue.</strong>\r\n    </noscript>\r\n    <div id=\"app\"></div>\r\n    <style>\r\n            .control-section\r\n            {\r\n                margin-top: 100px;\r\n            }\r\n    </style>\r\n    <!-- built files will be auto injected -->\r\n</body>\r\n\r\n</html>\r\n","src/App.vue":"<template>\n    <div class=\"col-lg-8 control-section\">\n        <div class=\"default-speechToText-section\">\n            <div class=\"speechToText-container\">\n                <ejs-speechtotext id=\"speech-to-text\" ref=\"speechToTextInstance\" @transcriptChanged=\"onTranscriptChange\" @onStart=\"onListeningStart\" @onStop=\"onListeningStop\" @onError=\"onErrorHandler\" ></ejs-speechtotext>\n                <mark class=\"speech-recognition-status\">Click the mic button to start speaking...</mark>\n            </div>\n            <div class=\"output-container\">\n                <h4>Live Speech Transcription</h4>\n                <ejs-textarea id=\"textareaInst\" ref=\"textareaObj\" cssClass=\"e-outline\" resizeMode=\"None\" rows=10 placeholder=\"Transcribed text will appear here...\" @input=\"handleInputEvent\" ></ejs-textarea>\n                <div class=\"output-options\">\n                    <ejs-button id=\"transcript-copy-button\" class=\"e-btn\" @click=\"handleCopyButton\" disabled=\"true\">Copy</ejs-button>\n                    <ejs-button id=\"transcript-clear-button\"  class=\"e-btn\" @click=\"handleClearButton\" >Clear</ejs-button>\n                </div>\n            </div>\n        </div>\n    </div>\n    <div class=\"col-lg-4 default-speechToText property-section\">\n    <div class=\"property-panel-header\"> Properties </div>\n    <div class=\"property-panel-content\">\n        <table>\n            <tbody>\n                <tr>\n                    <td> Styling </td>\n                    <td>\n                        <ejs-dropdownlist id=\"stt-styling-ddl\" @change=\"handleMiColor\" :fields=\"micColorFields\" :dataSource=\"miColor\" :index=\"0\" />\n                    </td>\n                </tr>\n                <tr>\n                    <td> Language </td>\n                    <td>\n                        <ejs-dropdownlist id=\"stt-lang-ddl\" @change=\"handleLanguageType\" :fields=\"languageFields\" :dataSource=\"languageTypes\" :index=\"0\" :enabled=\"languageDropdownEnable\" />\n                    </td>\n                </tr>\n                <tr>\n                    <td>Interim results</td>\n                    <td> <ejs-switch id=\"interim-switch\" type=\"checkbox\" checked=\"true\" @change= \"handleAllowInterimResults\" :disabled=\"interimSwithDisable\" /> </td>\n                </tr>\n                <tr>\n                    <td>Show tooltip</td>\n                    <td> <ejs-switch id=\"tooltip-switch\" type=\"checkbox\" checked=\"true\" @change= \"handleShowTooltip\" /> </td>\n                </tr>\n                <tr>\n                    <td>Show icon with text</td>\n                    <td> <ejs-switch id=\"icon-with-text-switch\" type=\"checkbox\" v-model:checked=\"iconWithText\" @change= \"handleIconWithText\" /> </td>\n                </tr>\n            </tbody>\n        </table>\n    </div>\n</div>\n\n\n</template>\n\n<script>\nimport { SpeechToTextComponent } from \"@syncfusion/ej2-vue-inputs\";\nimport { TextAreaComponent } from \"@syncfusion/ej2-vue-inputs\";\nimport { ButtonComponent } from \"@syncfusion/ej2-vue-buttons\";\nimport { SwitchComponent } from '@syncfusion/ej2-vue-buttons';\nimport { DropDownListComponent } from '@syncfusion/ej2-vue-dropdowns';\n\nexport default {\n    data: function(){\n        return{\n            languageDropdownEnable: true,\n            interimSwithDisable: false,\n            micColorFields: { text: 'text', value: 'value' },\n            languageFields: { text: 'text', value: 'value' },\n        miColor: [\n            { text: \"Normal\", value:\"\" },\n            { text: \"Primary\", value:\"e-primary\" },\n            { text: \"Success\", value: \"e-success\" },\n            { text: \"Warning\", value: \"e-warning\" },\n            { text: \"Danger\", value: \"e-danger\" },\n            { text: \"Flat\", value: \"e-flat\" },\n            { text: \"Info\", value: \"e-info\" }\n        ],\n        languageTypes: [\n            { text: \"English, US\", value:\"en-US\" },\n            { text: \"German, DE\", value: \"de-DE\" },\n            { text: \"Chinese, CN\", value: \"zh-CN\" },\n            { text: \"French, FR\", value: \"fr-FR\" },\n            { text: \"Arabic, SA\", value: \"ar-SA\" }\n        ],\n        iconWithText: false,\n        isSupportedBrowser: true\n        };\n    },\n    components: {\n        \"ejs-speechtotext\": SpeechToTextComponent,\n        'ejs-textarea': TextAreaComponent,\n        'ejs-button': ButtonComponent,\n        'ejs-dropdownlist': DropDownListComponent,\n        'ejs-switch': SwitchComponent\n    },\n    methods: {\n        onTranscriptChange: function(args) {\n            if (!args.isInterimResult)\n            args.transcript += ' ';\n\n            this.$refs.textareaObj.ej2Instances.value = args.transcript;\n            this.toggleCopyButtonState();\n        },\n        onListeningStart: function() {\n            if (this.isSupportedBrowser) {\n                if (this.$refs.textareaObj.ej2Instances.value)\n                    this.$refs.speechToTextInstance.ej2Instances.transcript = this.$refs.textareaObj.ej2Instances.value + '\\n';\n\n                this.updateStatus('Listening... Speak now...');\n            } else {\n                this.updateStatus('For unsupported browsers, use event callbacks to handle Speech-to-Text actions.');\n            }\n            this.languageDropdownEnable = false;\n            this.interimSwithDisable = true;\n        },\n        onListeningStop: function(args) {\n             if (this.isSupportedBrowser) {\n                if (args.isInteracted)\n                    this.updateStatus('Click the mic button to start speaking...');\n            } else {\n                this.updateStatus('For unsupported browsers, use event callbacks to handle Speech-to-Text actions.');\n            }\n            this.languageDropdownEnable = true;\n            this.interimSwithDisable = false;\n        },\n        onErrorHandler: function(args) {\n            this.updateStatus(args.errorMessage);\n             if (args.error === 'unsupported-browser')\n                this.isSupportedBrowser = false;\n        },\n        updateStatus: function(status) {\n            document.querySelector('.speech-recognition-status').innerText = status;\n        },\n        toggleCopyButtonState: function() {\n            var copyButton = document.getElementById('transcript-copy-button');\n            var hasText = this.$refs.textareaObj.ej2Instances.element.value.trim() !== '';\n            copyButton.disabled = hasText ? false : true;\n        },\n        handleCopyButton: function() {\n            const copyText = this.$refs.textareaObj.ej2Instances.value;\n            const copyBtnElem = document.querySelector('#transcript-copy-button');\n\n            if (copyText && navigator.clipboard) {\n                navigator.clipboard.writeText(copyText).then(function() {\n                    copyBtnElem.innerText = 'Copied!';\n                    setTimeout(function () {\n                        copyBtnElem.innerText = 'Copy';\n                    }, 1000);\n                }).catch(function(err) {\n                    console.error('Clipboard write failed', err);\n                });\n            }\n        },\n        handleInputEvent: function() {\n            this.toggleCopyButtonState();\n        },\n        handleClearButton: function() {\n            this.$refs.textareaObj.ej2Instances.value = this.$refs.textareaObj.ej2Instances.element.value = this.$refs.speechToTextInstance.ej2Instances.transcript = '';\n            this.toggleCopyButtonState();\n        },\n        handleMiColor: function(args) {\n            this.$refs.speechToTextInstance.ej2Instances.cssClass = args.value;\n        },\n        handleLanguageType: function(args) {\n            this.$refs.speechToTextInstance.ej2Instances.lang = args.value;\n        },\n        handleAllowInterimResults: function(args) {\n            this.$refs.speechToTextInstance.ej2Instances.allowInterimResults = args.checked;\n        },\n        handleShowTooltip: function(args) {\n            this.$refs.speechToTextInstance.ej2Instances.showTooltip = args.checked;\n        },\n        handleIconWithText: function(args) {\n            this.$refs.speechToTextInstance.ej2Instances.buttonSettings = {\n                content: args.checked ? 'Start Listening' : '',\n                stopContent: args.checked ? 'Stop Listening' : ''\n            };\n        }\n    }\n};\n</script>\n\n<style scoped>\n    .default-speechToText-section,\n    .default-speechToText-section .output-container {\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        justify-content: center;\n    }\n\n    .default-speechToText-section {\n        gap: 50px;\n        margin: 50px auto;\n    }\n\n    .default-speechToText-section .output-container {\n        width: 75%;\n        gap: 10px; \n    }\n\n    .default-speechToText-section .output-container h4 {\n        margin: 0;\n        align-self: baseline;\n    }\n\n    .default-speechToText-section .speech-recognition-status{\n        font-size: 12px;\n    }\n\n    .default-speechToText .property-panel-content td {\n        padding: 10px 0px;\n        width: 50%;\n    }\n\n    .default-speechToText-section .output-options {\n        display: flex;\n        gap: 5px;\n    }\n\n    .default-speechToText-section .speechToText-container {\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        gap: 15px;\n    }\n\n    @media only screen and (max-width: 750px) {\n        .default-speechToText-section .output-container {\n            width: 100%;\n        }\n\n        .default-speechToText-section .output-options {\n            width: 100%;\n            display: flex;\n            flex-direction: column;\n            gap: 10px;\n        }\n    }\n\n</style>","dependencies":"{\"vue\":\"3.3.4\",\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-vue-base\":\"*\",\"@syncfusion/ej2-inputs\":\"*\",\"@syncfusion/ej2-vue-inputs\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-vue-buttons\":\"*\",\"@syncfusion/ej2-dropdowns\":\"*\",\"@syncfusion/ej2-vue-dropdowns\":\"*\",\"@syncfusion/ej2-vue-charts\":\"*\",\"@syncfusion/ej2-vue-maps\":\"*\",\"@syncfusion/ej2-vue-calendars\":\"*\",\"@syncfusion/ej2-data\":\"*\",\"@syncfusion/ej2-vue-grids\":\"*\",\"@syncfusion/ej2-vue-schedule\":\"*\",\"@syncfusion/ej2-vue-richtexteditor\":\"*\",\"@syncfusion/ej2-vue-navigations\":\"*\",\"@syncfusion/ej2-vue-documenteditor\":\"*\",\"@syncfusion/ej2-vue-splitbuttons\":\"*\",\"@syncfusion/ej2-vue-pdfviewer\":\"*\"}","src/main.js":"import { createApp } from 'vue'\nimport App from './App.vue'\ncreateApp(App).mount('#app')"}