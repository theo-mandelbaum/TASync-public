"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkej2_vue_samples"] = self["webpackChunkej2_vue_samples"] || []).push([["chunk-vendors-node_modules_syncfusion_ej2-spreadsheet_src_spreadsheet_renderer_print_js-204f2bbf"],{

/***/ "./node_modules/@syncfusion/ej2-spreadsheet/src/spreadsheet/renderer/print.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-spreadsheet/src/spreadsheet/renderer/print.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Print: () => (/* binding */ Print)\n/* harmony export */ });\n/* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @syncfusion/ej2-base */ \"./node_modules/@syncfusion/ej2-base/index.js\");\n/* harmony import */ var _workbook_index__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../workbook/index */ \"./node_modules/@syncfusion/ej2-spreadsheet/src/workbook/index.js\");\n/* harmony import */ var _common_index__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../common/index */ \"./node_modules/@syncfusion/ej2-spreadsheet/src/spreadsheet/common/index.js\");\n\n\n\n\n\n/**\n * This class supports the printing functionality in Spreadsheet.\n */\nvar Print = /** @class */ (function () {\n    /**\n     * Constructor for Print module\n     *\n     * @param {Spreadsheet} parent - Specifies the spreadsheet instance.\n     */\n    function Print(parent) {\n        this.totalSheetCount = [];\n        this.workbookActiveSheetCount = 0;\n        this.defaultCellWidth = 64;\n        this.defaultCellHeight = 19;\n        this.pageCounts = [];\n        this.initialRowCount = 0;\n        this.chartHeight = 0;\n        this.columnIndex = 0;\n        this.rowIndex = 0;\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        this.multipleCanvasDataURL = [];\n        this.chartElements = [];\n        this.totalCharts = 0;\n        this.isChartLoaded = false;\n        this.chartLoadedCount = 0;\n        this.isImageLoaded = false;\n        this.totalImages = 0;\n        this.imageLoadedCount = 0;\n        this.endRow = 0;\n        this.isColumn = true;\n        this.startNewPageCount = 0;\n        this.allowTimer = false;\n        this.parent = parent;\n    }\n    /**\n     * To create the print module.\n     *\n     * @param {Spreadsheet} spreadsheet - Specifies the spreadsheet instance.\n     * @param {PrintOptions} printOptions - Specifies the print options.\n     * @returns {void} - To create the print module.\n     * @private\n     */\n    Print.prototype.print = function (spreadsheet, printOptions) {\n        var _this = this;\n        spreadsheet.isPrintingProcessing = true;\n        this.multipleCanvasDataURL = [];\n        this.chartElements = [];\n        if (printOptions.type === 'ActiveSheet') {\n            var sheet = spreadsheet.sheets[spreadsheet.activeSheetIndex];\n            this.activeSheetPrint(spreadsheet, sheet, printOptions, spreadsheet.activeSheetIndex);\n        }\n        else {\n            this.totalSheetCount = [];\n            this.workbookActiveSheetCount = 1;\n            for (var i = 0; i < spreadsheet.sheets.length; i++) {\n                if (spreadsheet.sheets[i].state === 'Visible') {\n                    this.totalSheetCount.push(i);\n                    if (this.totalSheetCount.length > 1 && this.parent.sheets[i].ranges.length > 0) {\n                        var isDatasourceAvailable = this.parent.sheets[i].ranges.some(function (range) {\n                            return !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(range.dataSource);\n                        });\n                        if (isDatasourceAvailable) {\n                            this.allowTimer = true;\n                            var sheet = spreadsheet.sheets[i];\n                            var address = (0,_workbook_index__WEBPACK_IMPORTED_MODULE_1__.getCellAddress)(0, 0) + ':' + (0,_workbook_index__WEBPACK_IMPORTED_MODULE_1__.getCellAddress)(sheet.rowCount - 1, sheet.colCount - 1);\n                            var cellIndexes = (0,_workbook_index__WEBPACK_IMPORTED_MODULE_1__.getIndexesFromAddress)(address);\n                            this.parent.notify(_workbook_index__WEBPACK_IMPORTED_MODULE_1__.updateSheetFromDataSource, { sheet: sheet, indexes: cellIndexes });\n                        }\n                    }\n                }\n            }\n            if (this.allowTimer) {\n                this.allowTimer = false;\n                setTimeout(function () {\n                    _this.activeSheetPrint(spreadsheet, spreadsheet.sheets[_this.totalSheetCount[0]], printOptions, _this.totalSheetCount[0]);\n                }, 2000);\n            }\n            else {\n                this.activeSheetPrint(spreadsheet, spreadsheet.sheets[this.totalSheetCount[0]], printOptions, this.totalSheetCount[0]);\n            }\n        }\n    };\n    Print.prototype.updateChartRowAndColumnIndices = function (spreadsheet, sheetIndex) {\n        var sheet = spreadsheet.sheets[sheetIndex];\n        this.rowIndex = sheet.usedRange.rowIndex;\n        this.columnIndex = sheet.usedRange.colIndex;\n        if (spreadsheet.chartColl.length > 0) {\n            for (var i = 0; i < spreadsheet.chartColl.length; i++) {\n                var chart = spreadsheet.chartColl[i];\n                var sheetIdx = (0,_workbook_index__WEBPACK_IMPORTED_MODULE_1__.getSheetIndex)(spreadsheet, chart.range.substring(0, chart.range.lastIndexOf('!')));\n                if (sheetIndex === sheetIdx) {\n                    var chartleft = { clientX: chart.left, isImage: true };\n                    var chartTop = { clientY: chart.top, isImage: true };\n                    spreadsheet.notify(_common_index__WEBPACK_IMPORTED_MODULE_2__.getRowIdxFromClientY, chartTop);\n                    spreadsheet.notify(_common_index__WEBPACK_IMPORTED_MODULE_2__.getColIdxFromClientX, chartleft);\n                    if (chartTop.clientY > sheet.usedRange.rowIndex) {\n                        this.rowIndex = Math.max(this.rowIndex, chartTop.clientY);\n                    }\n                    if (chartleft.clientX > sheet.usedRange.colIndex) {\n                        this.columnIndex = Math.max(this.columnIndex, chartleft.clientX);\n                    }\n                }\n            }\n        }\n    };\n    Print.prototype.activeSheetPrint = function (spreadsheet, sheet, printOptions, sheetIndex) {\n        this.updateChartRowAndColumnIndices(spreadsheet, sheetIndex);\n        this.pageCounts = this.calculatePageCount(sheet, 1000, printOptions.allowRowColumnHeader);\n        var canvas;\n        var context;\n        this.initialRowCount = 0;\n        this.parent.currentPrintSheetIndex = sheetIndex;\n        this.endRow = this.rowIndex + 1;\n        this.processCell(0, 0, this.endRow, 2, [], context, canvas, sheet, this, 0, 0, true, sheetIndex, printOptions);\n    };\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    Print.prototype.processCell = function (page, rowsCount, rowCount, currentX, currentY, context, canvas, \n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    sheet, printInstance, pageHeight, height, isCanvasDataUrl, sheetIndex, printOptions) {\n        var _this = this;\n        if (pageHeight === void 0) { pageHeight = 0; }\n        if (height === void 0) { height = 0; }\n        if (isCanvasDataUrl === void 0) { isCanvasDataUrl = true; }\n        var defaultCellSpace = 0;\n        var allowColumnAndRow = printOptions.allowRowColumnHeader;\n        var headerWidth = 37;\n        var lineHeight = 0;\n        this.chartHeight = 0;\n        var isExtraLine = false;\n        for (var i = page; i < this.pageCounts.length; i++) {\n            this.chartLoadedCount = 0;\n            this.totalCharts = 0;\n            this.imageLoadedCount = 0;\n            this.totalImages = 0;\n            pageHeight += (i === 0 ? 0 : 1100);\n            // Create canvas element\n            canvas = document.createElement('canvas');\n            context = canvas.getContext('2d');\n            canvas.width = 1000;\n            canvas.height = 1100;\n            context.font = '11pt Calibri';\n            context.textBaseline = 'bottom';\n            context['index'] = i;\n            context['width'] = 1000;\n            if (isCanvasDataUrl || (!this.isImageLoaded && !this.isChartLoaded)) {\n                currentY = [];\n                currentX = 0;\n                height = 0;\n            }\n            // Loop through rows\n            for (var j = rowsCount; j < this.endRow; j++) {\n                isCanvasDataUrl = true;\n                var borderOfHeaderText = false;\n                this.isColumn = this.isColumn ? this.isColumn : (j === 0);\n                var bottomStyle = { borderBottom: '1px solid black' };\n                var rowHeight = (sheet.rows[j] && sheet.rows[j].height || this.defaultCellHeight);\n                this.initialRowCount = j;\n                currentX = defaultCellSpace;\n                var start = i === 0 ? 0 : this.pageCounts[i - 1] + 1;\n                var end = this.pageCounts[i];\n                height += ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(sheet.rows[j]) ? this.defaultCellHeight : rowHeight + (j === 0 && allowColumnAndRow\n                    ? this.defaultCellHeight : 0));\n                var cellHeight = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(sheet.rows[j]) ? this.defaultCellHeight :\n                    sheet.rows[j] && sheet.rows[j].height || this.defaultCellHeight;\n                if (height > 1080) {\n                    this.startNewPageCount = j;\n                    lineHeight = allowColumnAndRow ? rowHeight + (j === 0 && allowColumnAndRow ? this.defaultCellHeight : 0) : 0;\n                    borderOfHeaderText = false;\n                    this.isColumn = true;\n                    if (this.isImageLoaded || this.isChartLoaded) {\n                        break;\n                    }\n                    pageHeight += 1100;\n                    if (isCanvasDataUrl) {\n                        this.multipleCanvasDataURL.push(canvas.toDataURL());\n                    }\n                    isCanvasDataUrl = true;\n                    canvas = document.createElement('canvas');\n                    context = canvas.getContext('2d');\n                    canvas.width = 1000;\n                    canvas.height = 1100;\n                    context.font = '11pt Calibri';\n                    context.textBaseline = 'bottom';\n                    context['index'] = i;\n                    context['width'] = 1000;\n                    for (var m = 0; m < currentY.length; m++) {\n                        if (currentY[m] !== undefined) {\n                            currentY[m] -= height - cellHeight;\n                        }\n                    }\n                    height = (allowColumnAndRow || printOptions.allowGridLines) ?\n                        rowHeight + (allowColumnAndRow ? this.defaultCellHeight : 0) : rowHeight;\n                }\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                var style = { borderBottom: '1px solid black', borderTop: '1px solid black', borderLeft: '1px solid black', borderRight: '1px solid black' };\n                var rightStyle = { borderRight: '1px solid black' };\n                if (allowColumnAndRow && this.isColumn) {\n                    for (var k = start; k <= end; k++) {\n                        var columnText = (0,_workbook_index__WEBPACK_IMPORTED_MODULE_1__.getColumnHeaderText)(k + 1);\n                        var columnIndex = k === start ? 2 : 1;\n                        context.font = '11pt Calibri';\n                        for (var m = 0; m < columnIndex; m++) {\n                            var titleWidth = (m === 0 && columnIndex === 2) ? headerWidth : (sheet.columns[k] &&\n                                sheet.columns[k].hidden ? 0 : ((sheet.columns[k] &&\n                                sheet.columns[k].width) || this.defaultCellWidth));\n                            titleWidth = currentX + titleWidth > 1000 ? titleWidth - 1 - (currentX + titleWidth - 1000) :\n                                titleWidth;\n                            if (titleWidth !== 0) {\n                                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                                var textMetrics = context.measureText(columnText);\n                                var textWidth = textMetrics.width;\n                                var locationX = printInstance.calculateTextPosition(textWidth, titleWidth, currentX, 'Center');\n                                var locationY = this.defaultCellHeight;\n                                context.fillText(k === start && m === 0 ? '' : columnText, locationX, locationY);\n                                printInstance.drawBorder(context, style, currentX, 0, titleWidth, this.defaultCellHeight);\n                                currentX += titleWidth;\n                                currentY[k] = this.defaultCellHeight;\n                                if (k === end && (columnIndex === 2 ? m === 1 : m === 0)) {\n                                    this.isColumn = !(k === end);\n                                    currentX = 0;\n                                }\n                            }\n                            else if (k === end) {\n                                this.isColumn = false;\n                                currentX = 0;\n                            }\n                        }\n                    }\n                }\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(sheet.rows[j]) && ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(sheet.rows[j].hidden) ||\n                    !sheet.rows[j].hidden)) {\n                    if (isExtraLine) {\n                        var extaSpace = sheet.rows.slice(j, j + sheet.rows.length - j).map(function (row) {\n                            return (row && row.height) || _this.defaultCellHeight;\n                        }).reduce(function (accumulator, currentValue) {\n                            return accumulator + (currentValue || _this.defaultCellHeight);\n                        }, 0);\n                        if (canvas.height > (height + (this.chartHeight - extaSpace))) {\n                            this.endRow += Math.ceil((this.chartHeight - extaSpace) / 19);\n                        }\n                        else {\n                            this.endRow += Math.ceil((canvas.height - (height + extaSpace)) / 19);\n                        }\n                        isExtraLine = false;\n                    }\n                    borderOfHeaderText = this.endRow === sheet.rows.length ? ((height + (sheet.rows[j + 1] ?\n                        (sheet.rows[j + 1].height || this.defaultCellHeight) : this.defaultCellHeight)) +\n                        (j === 0 && allowColumnAndRow ? this.defaultCellHeight : 0) > 1080) || (j === sheet.rows.length - 1) : false;\n                    var _loop_1 = function (k) {\n                        var cell = sheet.rows[j] && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(sheet.rows[j].cells) &&\n                            sheet.rows[j].cells[k];\n                        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(cell) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(cell.style)) {\n                            style = this_1.setBorderStyle(cell, style);\n                        }\n                        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(sheet.columns[k]) || (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(sheet.columns[k].hidden) ||\n                            !sheet.columns[k].hidden) {\n                            var isColumnSpan = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(sheet.rows[j].cells) &&\n                                !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(sheet.rows[j].cells[k]) &&\n                                !isNaN(sheet.rows[j].cells[k].colSpan) &&\n                                start > k + sheet.rows[j].cells[k].colSpan;\n                            var isRowSpan = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(sheet.rows[j].cells) &&\n                                !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(sheet.rows[j].cells[k]) &&\n                                !isNaN(sheet.rows[j].cells[k].rowSpan) &&\n                                !(j + sheet.rows[j].cells[k].rowSpan > this_1.startNewPageCount) &&\n                                this_1.startNewPageCount !== 0;\n                            var cellText_1 = '';\n                            var cellWidthSpan_1;\n                            var cellWidth_1;\n                            var cellRowSpan = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(cell) ? (isNaN(cell.rowSpan) || isColumnSpan || isRowSpan) ? 1 :\n                                Math.max(cell.rowSpan, 0) : 1;\n                            currentY[k] = (isNaN(currentY[k]) ? defaultCellSpace : currentY[k]);\n                            if (allowColumnAndRow && k === start) {\n                                context.font = '11pt Calibri';\n                                var rowHeaderHeight = currentY[k];\n                                if (cellRowSpan > 0) {\n                                    for (var o = 0; o < (cellRowSpan === 0 ? 1 : cellRowSpan); o++) {\n                                        currentX = 0;\n                                        rowHeaderHeight += (o === 0 ? 0 : (sheet.rows[j + o] && sheet.rows[j + o - 1].height ||\n                                            this_1.defaultCellHeight));\n                                        printInstance.rowHeaderText((j + 1 + o).toString(), context, printInstance, headerWidth, currentX, style, rowHeaderHeight, sheet.rows[j + o].height || this_1.defaultCellHeight);\n                                        currentX += headerWidth;\n                                    }\n                                }\n                                else {\n                                    currentX = 0;\n                                    currentX += headerWidth;\n                                }\n                            }\n                            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(cell) && cell) {\n                                var fontSize = (cell.style ? cell.style.fontSize || '11pt' : '11pt');\n                                var color_1 = (cell.style ? cell.style.color || '#000000' : '#000000');\n                                if (!isNaN(sheet.rows[j].cells[k].rowSpan) &&\n                                    sheet.rows[j].cells[k].rowSpan > 1) {\n                                    if (isNaN(sheet.rows[j + 1].cells[k].rowSpan)) {\n                                        this_1.parent.merge(\"\" + (0,_workbook_index__WEBPACK_IMPORTED_MODULE_1__.getColumnHeaderText)(k + 1) + (j + 1) + \":\" + (0,_workbook_index__WEBPACK_IMPORTED_MODULE_1__.getColumnHeaderText)(k + 1) + (j + sheet.rows[j].cells[k].rowSpan - 1));\n                                    }\n                                }\n                                if (!isNaN(sheet.rows[j].cells[k].colSpan) &&\n                                    sheet.rows[j].cells[k].colSpan > 1) {\n                                    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(sheet.rows[j + 1]) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(sheet.rows[j + 1].cells) &&\n                                        sheet.rows[j + 1].cells.length > 0 && (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(sheet.rows[j + 1].cells[k]) &&\n                                        isNaN(sheet.rows[j + 1].cells[k].colSpan))) {\n                                        this_1.parent.merge('' + (0,_workbook_index__WEBPACK_IMPORTED_MODULE_1__.getColumnHeaderText)(k + 1) + (j + 1) + ':' +\n                                            (0,_workbook_index__WEBPACK_IMPORTED_MODULE_1__.getColumnHeaderText)(k + 1 + sheet.rows[j].cells[k].colSpan - 1) + (j + 1));\n                                    }\n                                    else if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(sheet.rows[j].cells[k + 1].colSpan)) {\n                                        for (var m = 1; m < sheet.rows[j].cells[k].colSpan; m++) {\n                                            sheet.rows[j].cells[k + m]['colSpan'] = -m;\n                                        }\n                                    }\n                                }\n                                cellWidthSpan_1 = (isNaN(sheet.rows[j].cells[k].colSpan) || isColumnSpan) ? 1 :\n                                    Math.max(sheet.rows[j].cells[k].colSpan, 0);\n                                if (sheet.rows[j].cells[k].rowSpan && !isColumnSpan &&\n                                    sheet.rows[j].cells[k].rowSpan < 0) {\n                                    // eslint-disable-next-line max-len\n                                    var colSpan = sheet.rows[j + sheet.rows[j].cells[k].rowSpan].cells[k].colSpan;\n                                    cellWidthSpan_1 = colSpan ? colSpan : cellWidthSpan_1;\n                                }\n                                if ((k === start || (k > 0 && sheet.columns && sheet.columns[k - 1] &&\n                                    sheet.columns[k - 1].hidden && (sheet.rows[j].cells[k - 1] &&\n                                    sheet.rows[j].cells[k - 1].colSpan > 1))) &&\n                                    cellWidthSpan_1 <= 0) {\n                                    cellWidthSpan_1 = 1;\n                                }\n                                var backgroundColor = (cell.style ? cell.style.backgroundColor || '#ffffff' : '#ffffff');\n                                var textAlign = cell.style ? cell.style['textAlign'] : '';\n                                context.font = fontSize;\n                                context.fillStyle = color_1;\n                                var cellWidthSpanArray_1 = [];\n                                if (cellWidthSpan_1 > 1) {\n                                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                                    var widthColumn = sheet.columns.slice(k, k + cellWidthSpan_1);\n                                    for (var o = 0; o < widthColumn.length; o++) {\n                                        cellWidthSpanArray_1.push(widthColumn['hidden'] ? 0 : ((widthColumn[o] && widthColumn[o]['width']) ||\n                                            this_1.defaultCellWidth));\n                                    }\n                                    if (cellWidthSpanArray_1.length === 0) {\n                                        cellWidthSpanArray_1.push((this_1.defaultCellWidth * cellWidthSpan_1));\n                                    }\n                                    else if (cellWidthSpanArray_1.length !== cellWidthSpan_1) {\n                                        cellWidthSpanArray_1 = cellWidthSpanArray_1.map(function (value) { return value +\n                                            (_this.defaultCellWidth * (cellWidthSpan_1 - 1 - cellWidthSpanArray_1.length)); });\n                                    }\n                                }\n                                cellWidth_1 = cellWidthSpan_1 > 1 ? cellWidthSpanArray_1.reduce(function (acc, width) { return acc + width; }, 0) :\n                                    cellWidthSpan_1 === 1 ? (sheet.columns[k] && sheet.columns[k].width ||\n                                        this_1.defaultCellWidth) : 0;\n                                cellWidth_1 = currentX + cellWidth_1 > 1000 ? cellWidth_1 - 1 - (currentX + cellWidth_1 - 1000) : cellWidth_1;\n                                cellHeight = cellRowSpan > 1 ? sheet.rows.slice(j, j + cellRowSpan).map(function (row) { return row.height ||\n                                    _this.defaultCellHeight; }).reduce(function (accumulator, currentValue) { return accumulator +\n                                    (currentValue || _this.defaultCellHeight); }, 0) : cellRowSpan === 1 ? rowHeight : 0;\n                                var verticalAlign = (cell.style ? cell.style['verticalAlign'] || 'Bottom' : 'Bottom').toLowerCase();\n                                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(cell.image) && cell.image.length > 0) {\n                                    this_1.processImages(i, j, cell, canvas, context, height, this_1.endRow, rowHeight, lineHeight, allowColumnAndRow, printOptions, sheet, printInstance, currentX, currentY, pageHeight, sheetIndex);\n                                }\n                                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(cell.chart) && cell.chart.length > 0) {\n                                    this_1.handleCharts(i, j, cell, context, canvas, height, this_1.endRow, this_1.initialRowCount, lineHeight, rowHeight, allowColumnAndRow, printOptions, sheet, printInstance, this_1.multipleCanvasDataURL, currentX, currentY, pageHeight, sheetIndex);\n                                }\n                                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(cell.value) || !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(cell.formula) ||\n                                    !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(cell.hyperlink)) {\n                                    var position_1;\n                                    if (cell.formula && cell.format) {\n                                        if (this_1.parent.calculationMode === 'Automatic') {\n                                            this_1.parent.notify(_workbook_index__WEBPACK_IMPORTED_MODULE_1__.workbookFormulaOperation, {\n                                                action: 'refreshCalculate', rowIndex: j, colIndex: k,\n                                                value: cell.formula, isFormula: (0,_workbook_index__WEBPACK_IMPORTED_MODULE_1__.checkIsFormula)(cell.formula), sheetIndex: sheetIndex\n                                            });\n                                        }\n                                        var numberFormatArgs = {\n                                            value: cell.value, format: cell.format,\n                                            rowIndex: j, colIndex: k, sheetIndex: this_1.parent.activeSheetIndex,\n                                            cell: cell, refresh: true\n                                        };\n                                        cellText_1 = this_1.parent.workbookNumberFormatModule.getFormattedCell(numberFormatArgs);\n                                        position_1 = \"\" + (textAlign ? textAlign : numberFormatArgs.isRightAlign ? 'Right' : 'Left');\n                                    }\n                                    else if (cell.format) {\n                                        var numberFormatArgs = {\n                                            value: cell.value, format: cell.format,\n                                            rowIndex: j, colIndex: k, sheetIndex: this_1.parent.activeSheetIndex,\n                                            cell: cell, refresh: true\n                                        };\n                                        cellText_1 = this_1.parent.workbookNumberFormatModule.getFormattedCell(numberFormatArgs);\n                                        position_1 = \"\" + (textAlign ? textAlign : numberFormatArgs.isRightAlign ? 'Right' : 'Left');\n                                    }\n                                    else if (cell.formula) {\n                                        if (this_1.parent.calculationMode === 'Automatic') {\n                                            this_1.parent.notify(_workbook_index__WEBPACK_IMPORTED_MODULE_1__.workbookFormulaOperation, {\n                                                action: 'refreshCalculate', rowIndex: j, colIndex: k,\n                                                value: cell.formula, isFormula: (0,_workbook_index__WEBPACK_IMPORTED_MODULE_1__.checkIsFormula)(cell.formula), sheetIndex: sheetIndex\n                                            });\n                                        }\n                                        cellText_1 = cell.value;\n                                        position_1 = \"\" + (textAlign ? textAlign : 'Left');\n                                    }\n                                    else {\n                                        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(cell.hyperlink)) {\n                                            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(cell.value)) {\n                                                cell.value = (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(cell.hyperlink) && typeof cell.hyperlink === 'object') ? cell.hyperlink['address'] : cell.hyperlink || cell.hyperlink['address'];\n                                            }\n                                            else if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(cell.value) || cell.value === '') {\n                                                cell.value = typeof cell.hyperlink === 'object' ? cell.hyperlink['address'] : cell.hyperlink;\n                                            }\n                                            color_1 = cell.style ? cell.style.color || '#00e' : '#00e';\n                                        }\n                                        cellText_1 = cell.value;\n                                        var isNumber = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(cell.value) && cell.value !== '' ? new RegExp('^[^\\\\p{L}]*$', 'u').test(cell.value) : false;\n                                        position_1 = '' + (textAlign ? textAlign : isNumber ? 'Right' : 'Left');\n                                    }\n                                    var textSize = (cell.style ? cell.style.fontSize || '11pt' : '11pt');\n                                    var fontFamily = (cell.style ? cell.style.fontFamily || 'Calibri' : 'Calibri');\n                                    var fontstyle = (cell.style ? cell.style.fontStyle || '' : '');\n                                    var fontWeight = (cell.style ? cell.style.fontWeight || 'normal' : 'normal');\n                                    context.font = fontstyle + \" \" + fontWeight + \" \" + textSize + \" \" + fontFamily;\n                                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                                    var textMetrics_1 = context.measureText(cellText_1);\n                                    var textWidth_1 = textMetrics_1.width;\n                                    // eslint-disable-next-line\n                                    var textHeight = textMetrics_1.actualBoundingBoxAscent + textMetrics_1.actualBoundingBoxDescent;\n                                    if (cell.wrap) {\n                                        var cellLineHeight_1 = this_1.defaultCellHeight < cellHeight ? ((parseInt(textSize.replace('pt', ''), 10) / 72) * 96) : cellHeight;\n                                        var endColIdx = cell.colSpan > 1 ? k + cell.colSpan - 1 : k;\n                                        var colWidth = (0,_common_index__WEBPACK_IMPORTED_MODULE_2__.getDPRValue)((0,_workbook_index__WEBPACK_IMPORTED_MODULE_1__.getColumnsWidth)(sheet, k, endColIdx) - (4 + ((0,_common_index__WEBPACK_IMPORTED_MODULE_2__.getBorderWidth)(j, k, sheet) || 1)), true);\n                                        var textLines = this_1.wrapText(cellText_1, colWidth, cell.style, this_1.parent.cellStyle);\n                                        var space = (textLines.length === 1) ? cellHeight :\n                                            (textLines.length * cellLineHeight_1 === cellHeight) ? cellLineHeight_1 :\n                                                (textLines.length * cellLineHeight_1 < cellHeight) ?\n                                                    cellHeight - ((textLines.length - 1) * cellLineHeight_1) : cellLineHeight_1;\n                                        var startY_1 = currentY[k] + (verticalAlign === 'top' ? cellLineHeight_1 : verticalAlign === 'middle' ?\n                                            space > cellLineHeight_1 + (space / 4) ? cellLineHeight_1 + (space / 4) : space : space);\n                                        context.save();\n                                        context.beginPath();\n                                        context.rect(currentX, currentY[k], cellWidth_1, cellHeight);\n                                        context.clip();\n                                        context.fillStyle = backgroundColor;\n                                        context.fillRect(currentX, currentY[k], cellWidth_1, (cellHeight + (verticalAlign === 'top' ? cellLineHeight_1 : 0)));\n                                        textLines.forEach(function (line, index) {\n                                            context.fillStyle = color_1;\n                                            textMetrics_1 = context.measureText(line);\n                                            textWidth_1 = textMetrics_1.width;\n                                            var locationX = printInstance.calculateTextPosition(textWidth_1, cellWidth_1, currentX, position_1, true);\n                                            var locationY = startY_1 + index * cellLineHeight_1;\n                                            if (position_1.toLowerCase() === 'right') {\n                                                context.textAlign = 'right';\n                                                context.fillText(line.trim(), locationX, locationY);\n                                            }\n                                            else {\n                                                context.fillText(line, locationX, locationY);\n                                            }\n                                            printInstance.textDecoration(cell, context, locationX, locationY, color_1, textMetrics_1, cellText_1, cellWidth_1);\n                                        });\n                                        context.restore();\n                                    }\n                                    else {\n                                        context.save();\n                                        context.beginPath();\n                                        context.rect(currentX, currentY[k], cellWidth_1, cellHeight);\n                                        context.clip();\n                                        context.fillStyle = backgroundColor;\n                                        context.fillRect(currentX, currentY[k], cellWidth_1, cellHeight);\n                                        context.fillStyle = color_1;\n                                        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                                        var locationX = printInstance.calculateTextPosition(textWidth_1, cellWidth_1, currentX, position_1);\n                                        var locationY = currentY[k];\n                                        var midValue = (cellHeight / 2) + (textHeight / 2);\n                                        if (verticalAlign === 'top') {\n                                            context.textBaseline = 'top'; // Set baseline to the top to ensure consistent vertical placement. Baseline at top means no additional offset needed\n                                        }\n                                        else if (verticalAlign === 'middle' && cellHeight > midValue) {\n                                            locationY += midValue; // Center text vertically\n                                        }\n                                        else {\n                                            locationY += cellHeight; // Align text in default or bottom\n                                        }\n                                        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(cell.style)) {\n                                            locationY = (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(cell.style.borderBottom) && cell.style.borderBottom.indexOf('double') > -1) || (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(cell.style.borderTop) && cell.style.borderTop.indexOf('double') > -1) ? locationY - 2 : locationY;\n                                            locationX = (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(cell.style.borderLeft) && cell.style.borderLeft.indexOf('double') > -1) || (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(cell.style.borderRight) && cell.style.borderRight.indexOf('double') > -1) ? locationX + (position_1 === 'Left' ? 2 : -3) : locationX;\n                                        }\n                                        context.fillText(cellText_1, locationX, locationY);\n                                        context.restore();\n                                        printInstance.textDecoration(cell, context, locationX, locationY, color_1, textMetrics_1, cellText_1, cellWidth_1);\n                                    }\n                                }\n                                else {\n                                    printInstance.rowHeaderRect(context, currentX, currentY[k], cellWidth_1, cellHeight, backgroundColor);\n                                }\n                                if (cell.style && (cellWidth_1 > 0 || cellHeight > 0) && (cell.style.borderBottom || cell.style.borderTop\n                                    || cell.style.borderLeft || cell.style.borderRight && (((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(cell.rowSpan) &&\n                                    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(cell.colSpan)) || (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(cell.rowSpan) && cell.rowSpan > 0) ||\n                                    (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(cell.colSpan) && cell.colSpan > 0)))) {\n                                    printInstance.drawBorder(context, cell.style, currentX, (currentY[k] <= 0 ? 2 : currentY[k]), cellWidth_1, cellHeight);\n                                }\n                            }\n                            var currentWidth = (cellWidthSpan_1 <= 0 ? cellWidth_1 : (cellWidth_1 ||\n                                (sheet.columns[k] && sheet.columns[k].width) || this_1.defaultCellWidth));\n                            if (printOptions.allowGridLines) {\n                                style.borderRight = k === end && allowColumnAndRow ? undefined : '1px solid black';\n                                printInstance.drawBorder(context, style, currentX, currentY[k], currentWidth, cellHeight);\n                            }\n                            currentX += currentWidth;\n                            var currentYValue = 0;\n                            if (cellRowSpan > 1) {\n                                currentYValue = currentY[k];\n                                for (var m = k; m < k + cellWidthSpan_1; m++) {\n                                    var cell_1 = sheet.rows[j] && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(sheet.rows[j].cells) &&\n                                        sheet.rows[j].cells[m];\n                                    if (cell_1 && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(cell_1.image)) {\n                                        this_1.processImages(i, j, cell_1, canvas, context, height, this_1.endRow, rowHeight, lineHeight, allowColumnAndRow, printOptions, sheet, printInstance, currentX, currentY, pageHeight, sheetIndex);\n                                    }\n                                    else if (cell_1 && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(cell_1.chart)) {\n                                        this_1.handleCharts(i, j, cell_1, context, canvas, height, this_1.endRow, this_1.initialRowCount, lineHeight, rowHeight, allowColumnAndRow, printOptions, sheet, printInstance, this_1.multipleCanvasDataURL, currentX, currentY, pageHeight, sheetIndex);\n                                    }\n                                    if (cell_1.style && m === k && cellHeight > 0 && (cell_1.style.borderBottom || cell_1.style.borderTop ||\n                                        cell_1.style.borderLeft || cell_1.style.borderRight)) {\n                                        printInstance.drawBorder(context, cell_1.style, currentX, currentY[k], 2, cellHeight);\n                                    }\n                                    currentY[m] = (isNaN(currentY[m]) ? defaultCellSpace :\n                                        currentY[m]) + cellHeight;\n                                }\n                                k += cellWidthSpan_1 - 1;\n                            }\n                            if (k === end && allowColumnAndRow) {\n                                printInstance.drawBorder(context, rightStyle, currentX - 2, currentY[k] - currentYValue, 2, cellHeight);\n                            }\n                            if (k === end && allowColumnAndRow && borderOfHeaderText && !isExtraLine) {\n                                printInstance.drawBorder(context, bottomStyle, 0, currentY[k] - currentYValue, currentX, cellHeight);\n                                borderOfHeaderText = false;\n                            }\n                            if (cellRowSpan <= 1) {\n                                currentY[k] += cellHeight;\n                            }\n                        }\n                        else if (allowColumnAndRow && k === start) {\n                            var cellRowSpan = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(cell) ?\n                                isNaN(sheet.rows[j].cells[k].rowSpan) ? 1 :\n                                    Math.max(sheet.rows[j].cells[k].rowSpan, 0) : 1;\n                            currentY[k] = (isNaN(currentY[k]) ? defaultCellSpace : currentY[k]);\n                            var rowHeaderHeight = currentY[k];\n                            context.font = '11pt Calibri';\n                            for (var o = 0; o < cellRowSpan; o++) {\n                                currentX = 0;\n                                rowHeaderHeight += (o === 0 ? 0 : (sheet.rows[j + o] && sheet.rows[j + o - 1].height ||\n                                    this_1.defaultCellHeight));\n                                printInstance.rowHeaderText((j + 1 + o).toString(), context, printInstance, headerWidth, currentX, style, rowHeaderHeight, sheet.rows[j + o].height || this_1.defaultCellHeight);\n                                currentX += headerWidth;\n                            }\n                            currentY[k] += cellHeight;\n                        }\n                        out_k_1 = k;\n                    };\n                    var this_1 = this, out_k_1;\n                    // Loop through cells in a row\n                    for (var k = start; k <= end; k++) {\n                        _loop_1(k);\n                        k = out_k_1;\n                    }\n                }\n                else if (isExtraLine || (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(sheet.rows[j])) {\n                    var style_1 = { borderBottom: '1px solid black', borderTop: '1px solid black', borderLeft: '1px solid black', borderRight: '1px solid black' };\n                    borderOfHeaderText = ((height + cellHeight) + (j === 0 && allowColumnAndRow ?\n                        this.defaultCellHeight : 0) > 1080) || (j === sheet.rows.length - 1) || (j === this.endRow - 1);\n                    for (var k = start; k <= end; k++) {\n                        var cell = sheet.rows[j] && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(sheet.rows[j].cells) &&\n                            sheet.rows[j].cells[k];\n                        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(cell) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(cell.style)) {\n                            style_1 = this.setBorderStyle(cell, style_1);\n                        }\n                        if (allowColumnAndRow && k === start) {\n                            printInstance.rowHeaderText((j + 1).toString(), context, printInstance, headerWidth, currentX, style_1, currentY[k], this.defaultCellHeight);\n                            currentX += headerWidth;\n                        }\n                        var cellWidth = (sheet.columns[k] && sheet.columns[k].width || this.defaultCellWidth);\n                        cellWidth = currentX + cellWidth > 1000 ? cellWidth - 1 - (currentX + cellWidth - 1000) : cellWidth;\n                        currentY[k] = (isNaN(currentY[k]) ? defaultCellSpace : currentY[k]);\n                        if (printOptions.allowGridLines) {\n                            printInstance.drawBorder(context, style_1, currentX, currentY[k], cellWidth, cellHeight);\n                        }\n                        else if (allowColumnAndRow && !printOptions.allowGridLines && k === end) {\n                            printInstance.drawBorder(context, { borderRight: '1px solid black' }, currentX, currentY[k], cellWidth, cellHeight);\n                        }\n                        currentX += cellWidth;\n                        if (k === end && allowColumnAndRow && borderOfHeaderText) {\n                            printInstance.drawBorder(context, bottomStyle, 0, currentY[k], currentX, cellHeight);\n                            borderOfHeaderText = false;\n                        }\n                        currentY[k] += cellHeight;\n                    }\n                }\n            }\n            if (!this.isImageLoaded && !this.isChartLoaded) {\n                if (isCanvasDataUrl && this.endRow > 0) {\n                    this.multipleCanvasDataURL.push(canvas.toDataURL());\n                }\n                rowsCount = 0;\n                if (this.pageCounts.length - 1 === i) {\n                    printInstance.canvasPrint(this.parent, sheetIndex, printOptions);\n                }\n            }\n            else if (this.isImageLoaded || this.isChartLoaded) {\n                break;\n            }\n        }\n    };\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    Print.prototype.setBorderStyle = function (cell, style) {\n        style.borderBottom = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(cell.style.borderBottom) ? cell.style.borderBottom : style.borderBottom;\n        style.borderTop = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(cell.style.borderTop) ? cell.style.borderTop : style.borderTop;\n        style.borderRight = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(cell.style.borderRight) ? cell.style.borderRight : style.borderRight;\n        style.borderLeft = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(cell.style.borderLeft) ? cell.style.borderLeft : style.borderLeft;\n        return style;\n    };\n    Print.prototype.setToDefault = function () {\n        this.parent.currentPrintSheetIndex = 0;\n        this.initialRowCount = 0;\n        this.chartHeight = 0;\n        this.totalCharts = 0;\n        this.totalImages = 0;\n        this.chartLoadedCount = 0;\n        this.imageLoadedCount = 0;\n        this.endRow = 0;\n        this.pageCounts = [];\n        this.multipleCanvasDataURL = [];\n        this.chartElements = [];\n        this.isChartLoaded = false;\n        this.isImageLoaded = false;\n        this.startNewPageCount = 0;\n    };\n    Print.prototype.handleCharts = function (i, j, cell, context, canvas, height, rowCount, initialRowCount, lineHeight, rowHeight, allowColumnAndRow, printOptions, \n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    sheet, printInstance, multipleCanvasDataURL, currentX, currentY, pageHeight, sheetIndex) {\n        var _this = this;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(cell.chart)) {\n            var _loop_2 = function (chart) {\n                this_2.totalCharts += 1;\n                var image = new Image();\n                chart.left = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(chart.left) ? chart.left : 0;\n                chart.top = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(chart.top) ? chart.top : 0;\n                var chartElement = document.getElementById(chart.id);\n                if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(chartElement)) {\n                    this_2.parent.insertChart([chart]);\n                    chartElement = document.getElementById(chart.id);\n                    this_2.chartElements.push(chart.id + '_overlay');\n                }\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(chartElement)) {\n                    this_2.chartHeight = chart.height;\n                    var isExtraLine = (this_2.initialRowCount + Math.ceil(chart.height / 19) > this_2.endRow) &&\n                        (printOptions.allowRowColumnHeader || printOptions.allowGridLines);\n                    if (isExtraLine) {\n                        if (sheet.rows.length - 1 === j) {\n                            var extraSpace = rowHeight + (allowColumnAndRow ? this_2.defaultCellHeight : 0);\n                            if (canvas.height > height + (this_2.chartHeight - extraSpace)) {\n                                this_2.endRow += Math.ceil((this_2.chartHeight - extraSpace) / 19);\n                            }\n                            else {\n                                this_2.endRow += Math.ceil((canvas.height - (height + extraSpace)) / 19);\n                            }\n                        }\n                    }\n                    var svgElement = chartElement.cloneNode(true);\n                    var url = window.URL.createObjectURL(new Blob([(new XMLSerializer()).serializeToString(svgElement.childNodes[1])], { type: 'image/svg+xml' }));\n                    image.onload = function () {\n                        var chartLeftIndex = Math.ceil(chart.left / 1000) - 1;\n                        var chartTopIndex = Math.ceil(chart.top / 1080) - 1;\n                        var left = chart.left + (allowColumnAndRow ? 37 : 0);\n                        var top = chart.top + (allowColumnAndRow ? 19 : 0) + (chartTopIndex > 0 ? lineHeight : 0);\n                        context.drawImage(image, chartLeftIndex <= 0 ? left : left - (chartLeftIndex * 1000), chartTopIndex <= 0 ? top : top - (chartTopIndex * 1160), chart.width, chart.height);\n                        _this.chartLoadedCount++;\n                        if (_this.chartLoadedCount === _this.totalCharts) {\n                            currentX += chart.width;\n                            _this.isChartLoaded = false;\n                            if (!_this.isImageLoaded) {\n                                multipleCanvasDataURL.push(canvas.toDataURL());\n                                var startValue = (_this.initialRowCount === sheet.rows.length - 1 && height < 1080) ?\n                                    sheet.rows.length : _this.initialRowCount;\n                                var endValue = _this.endRow;\n                                _this.processCell(i, (startValue + 1 === endValue ? endValue : startValue), endValue, currentX, currentY, context, canvas, sheet, printInstance, pageHeight, height, false, sheetIndex, printOptions);\n                            }\n                        }\n                    };\n                    image.src = url;\n                    this_2.isChartLoaded = true;\n                }\n            };\n            var this_2 = this;\n            for (var _i = 0, _a = cell.chart; _i < _a.length; _i++) {\n                var chart = _a[_i];\n                _loop_2(chart);\n            }\n        }\n    };\n    Print.prototype.processImages = function (i, j, cell, canvas, context, height, rowCount, rowHeight, lineHeight, allowColumnAndRow, \n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    printOptions, sheet, printInstance, currentX, currentY, pageHeight, sheetIndex) {\n        var _this = this;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(cell.image)) {\n            var _loop_3 = function (image) {\n                this_3.totalImages += 1;\n                var img = new Image();\n                img.src = image.src;\n                image.left = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(image.left) ? image.left : 0;\n                image.top = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(image.top) ? image.top : 0;\n                this_3.chartHeight = image.height;\n                var isExtraLine = (this_3.initialRowCount + Math.ceil(image.height / 19) > this_3.endRow) &&\n                    (printOptions.allowRowColumnHeader || printOptions.allowGridLines);\n                if (isExtraLine) {\n                    if (j === sheet.rows.length - 1) {\n                        var extraSpace = (rowHeight + (allowColumnAndRow ? this_3.defaultCellHeight : 0));\n                        if (canvas.height > (height + (this_3.chartHeight - extraSpace))) {\n                            this_3.endRow += Math.ceil((this_3.chartHeight - extraSpace) / 19);\n                        }\n                        else {\n                            this_3.endRow += Math.ceil((canvas.height - (height + extraSpace)) / 19);\n                        }\n                    }\n                }\n                img.onload = function () {\n                    var imageLeftIndex = Math.ceil(image.left / 1000) - 1;\n                    var imageTopIndex = Math.ceil(image.top / 1080) - 1;\n                    var left = image.left + (allowColumnAndRow ? 37 : 0);\n                    var top = image.top + (allowColumnAndRow ? 19 : 0) + (imageTopIndex > 0 ? lineHeight : 0);\n                    context.drawImage(img, (imageLeftIndex <= 0 ? left : left - (imageLeftIndex * 1000)), (imageTopIndex <= 0 ? top : top - (imageTopIndex * 1160)), image.width, image.height);\n                    _this.imageLoadedCount++;\n                    if (_this.imageLoadedCount === _this.totalImages) {\n                        _this.isImageLoaded = false;\n                        currentX += image.width;\n                        if (!_this.isChartLoaded) {\n                            _this.multipleCanvasDataURL.push(canvas.toDataURL());\n                            var startValue = (_this.initialRowCount === sheet.rows.length - 1 &&\n                                height < 1080) ? sheet.rows.length : _this.initialRowCount;\n                            var endValue = _this.endRow;\n                            _this.processCell(i, (startValue + 1 === endValue ? endValue : startValue), endValue, currentX, currentY, context, canvas, sheet, printInstance, pageHeight, height, false, sheetIndex, printOptions);\n                        }\n                    }\n                };\n                img.onerror = function () {\n                    _this.imageLoadedCount++; // Increment count to prevent indefinite waiting\n                    if (_this.imageLoadedCount === _this.totalImages) {\n                        _this.isImageLoaded = false;\n                        if (!_this.isChartLoaded) {\n                            _this.multipleCanvasDataURL.push(canvas.toDataURL());\n                            var startValue = (_this.initialRowCount === sheet.rows.length - 1 &&\n                                height < 1080) ? sheet.rows.length : _this.initialRowCount;\n                            var endValue = _this.endRow;\n                            _this.processCell(i, (startValue + 1 === endValue ? endValue : startValue), endValue, currentX, currentY, context, canvas, sheet, printInstance, pageHeight, height, false, sheetIndex, printOptions);\n                        }\n                    }\n                };\n            };\n            var this_3 = this;\n            for (var _i = 0, _a = cell.image; _i < _a.length; _i++) {\n                var image = _a[_i];\n                _loop_3(image);\n            }\n            this.isImageLoaded = true;\n        }\n    };\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    Print.prototype.textDecoration = function (cell, context, locationX, locationY, color, \n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    textMetrics, cellText, cellWidth) {\n        if (cellText !== '' && (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(cell.style) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(cell.style.textDecoration) &&\n            cell.style.textDecoration.toLowerCase().indexOf('underline') > -1 || !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(cell.hyperlink))) {\n            context.beginPath();\n            context.moveTo(locationX, locationY - 3);\n            context.lineTo(locationX + (textMetrics.width > cellWidth ? cellWidth :\n                textMetrics.width), locationY - 3);\n            context.strokeStyle = color;\n            context.lineWidth = 1;\n            context.stroke();\n        }\n    };\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    Print.prototype.rowHeaderRect = function (context, currentX, currentY, cellWidth, cellHeight, backgroundColor) {\n        if (backgroundColor === void 0) { backgroundColor = '#ffffff'; }\n        context.save();\n        context.beginPath();\n        context.rect(currentX, currentY, cellWidth, cellHeight);\n        context.clip();\n        context.fillStyle = backgroundColor;\n        context.fillRect(currentX, currentY, cellWidth, cellHeight);\n        context.restore();\n    };\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    Print.prototype.rowHeaderText = function (rowText, context, printInstance, headerWidth, currentX, style, currentY, height) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        var textMetrics = context.measureText(rowText);\n        var textWidth = textMetrics.width;\n        var locationX = printInstance.calculateTextPosition(textWidth, headerWidth, currentX, 'Center');\n        var locationY = currentY;\n        context.save();\n        context.beginPath();\n        context.rect(currentX, currentY, headerWidth, height);\n        context.clip();\n        context.fillStyle = '#000000';\n        context.fillText(rowText, locationX, (locationY + height));\n        printInstance.drawBorder(context, style, currentX, (currentY || 0), headerWidth, height);\n        context.restore();\n    };\n    Print.prototype.canvasPrint = function (spreadSheet, sheetIndex, printOptions) {\n        var _this = this;\n        if (printOptions.type === 'Workbook' && (this.totalSheetCount.length - 1) >= this.workbookActiveSheetCount) {\n            var currentSheetIndex = this.totalSheetCount[this.workbookActiveSheetCount];\n            var sheet = spreadSheet.sheets[currentSheetIndex];\n            this.workbookActiveSheetCount++;\n            this.activeSheetPrint(spreadSheet, sheet, printOptions, currentSheetIndex);\n        }\n        else {\n            for (var i = 0; i < this.chartElements.length; i++) {\n                var chartElement = document.getElementById(this.chartElements[i]);\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(chartElement)) {\n                    chartElement.remove();\n                }\n            }\n            if (this.multipleCanvasDataURL.length > 0) {\n                var browserUserAgent = navigator.userAgent;\n                var printWindow_1 = window.open(' ', '_blank', 'height=' + window.outerHeight + ',width=' + window.outerWidth + ',tabbar=no');\n                printWindow_1.document.write('<html><head><title></title></head><body>');\n                var canvasWidth_1 = 1000; // Adjust as needed\n                var canvasHeight_1 = 1400; // Adjust as needed\n                if ((browserUserAgent.indexOf('Chrome') !== -1) || (browserUserAgent.indexOf('Safari') !== -1) ||\n                    (browserUserAgent.indexOf('Firefox')) !== -1) {\n                    printWindow_1.document.write('<!DOCTYPE html>');\n                    printWindow_1.document.write('<html><head><style>html, body {  }'\n                        + ' img { height: 100%; width: 100%; display: block; }@media print { body {  }'\n                        + ' img { width:100%; width:100%; box-sizing: border-box; }br, button { display: none; }'\n                        + ' div{ page-break-inside: avoid; }} @page{ size:' + canvasWidth_1.toString() + 'px ' + canvasHeight_1.toString() + 'px; }</style></head><body>');\n                }\n                else {\n                    printWindow_1.document.write('<!DOCTYPE html>');\n                    printWindow_1.document.write('<html><head>'\n                        + '<style>html, body {  } img { height: 100%; width: 100%; }@media print { body {  }'\n                        + 'img { width:100%; width:100%; box-sizing: border-box; }br, button { display: none; } '\n                        + 'div{ page-break-inside: avoid; }} @page{ size:' + canvasWidth_1.toString() + 'px ' + canvasHeight_1.toString() + 'px; }</style></head><body>');\n                }\n                this.multipleCanvasDataURL.forEach(function (dataURL, index) {\n                    var canvas = printWindow_1.document.createElement('canvas');\n                    canvas.width = canvasWidth_1;\n                    canvas.height = canvasHeight_1;\n                    var context = canvas.getContext('2d');\n                    var image = new Image();\n                    image.onload = function () {\n                        context.drawImage(image, 0, 0, canvasWidth_1, canvasHeight_1);\n                        if (index === _this.multipleCanvasDataURL.length - 1) {\n                            spreadSheet.isPrintingProcessing = false;\n                            printWindow_1.print();\n                            printWindow_1.document.close();\n                            printWindow_1.close();\n                            spreadSheet.printModule.setToDefault();\n                        }\n                    };\n                    image.src = dataURL;\n                    printWindow_1.document.body.appendChild(canvas);\n                });\n            }\n        }\n    };\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    Print.prototype.drawBorder = function (context, borderStyles, locationX, locationY, cellWidth, cellHeight) {\n        var borderBottom = borderStyles.borderBottom, borderLeft = borderStyles.borderLeft, borderRight = borderStyles.borderRight, borderTop = borderStyles.borderTop, borderColor = borderStyles.borderColor;\n        context.strokeStyle = borderColor || 'black';\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(borderBottom) && borderBottom.indexOf('#FFFFFF') === -1) {\n            context.strokeStyle = borderBottom.split(' ')[2];\n            this.drawPath(locationX, (locationY === 2 ? -2 : locationY) + cellHeight, locationX + cellWidth, (locationY === 2 ? -2 : locationY) + cellHeight, context, borderBottom, false, borderStyles, 'bottom');\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(borderLeft) && borderLeft.indexOf('#FFFFFF') === -1) {\n            context.strokeStyle = borderLeft.split(' ')[2];\n            this.drawPath(locationX, locationY, locationX, (locationY === 2 ? -2 : locationY) + cellHeight, context, borderLeft, true, borderStyles, 'left');\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(borderRight) && borderRight.indexOf('#FFFFFF') === -1) {\n            context.strokeStyle = borderRight.split(' ')[2];\n            this.drawPath(locationX + cellWidth, locationY, locationX + cellWidth, (locationY === 2 ? -2 : locationY) + cellHeight, context, borderRight, false, borderStyles, 'right');\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(borderTop) && borderTop.indexOf('#FFFFFF') === -1) {\n            context.strokeStyle = borderTop.split(' ')[2];\n            this.drawPath(locationX, locationY, locationX + cellWidth, locationY, context, borderTop, true, borderStyles, 'top');\n        }\n    };\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    Print.prototype.drawPath = function (startX, startY, endX, endY, context, border, \n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    isLeftOrTop, borderStyles, position) {\n        context.beginPath();\n        if (border.indexOf('dashed') > -1) {\n            context.setLineDash([3, 2]);\n            context.lineWidth = border.split(' ')[0].split('')[0];\n        }\n        else if (border.indexOf('dotted') > -1) {\n            context.setLineDash([1, 1]);\n            context.lineWidth = border.split(' ')[0].split('')[0];\n        }\n        else if (border.indexOf('double') > -1) {\n            context.setLineDash([]);\n            var isAllBorder = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(borderStyles.borderBottom) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(borderStyles.borderLeft) &&\n                !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(borderStyles.borderRight) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(borderStyles.borderTop);\n            var isLeftBottom = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(borderStyles.borderBottom) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(borderStyles.borderLeft) &&\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(borderStyles.borderRight) && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(borderStyles.borderTop);\n            var isLeftTop = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(borderStyles.borderBottom) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(borderStyles.borderLeft) &&\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(borderStyles.borderRight) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(borderStyles.borderTop);\n            var isLeftTopBotom = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(borderStyles.borderBottom) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(borderStyles.borderLeft) &&\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(borderStyles.borderRight) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(borderStyles.borderTop);\n            var isRightBottom = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(borderStyles.borderBottom) && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(borderStyles.borderLeft) &&\n                !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(borderStyles.borderRight) && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(borderStyles.borderTop);\n            var isRightTop = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(borderStyles.borderBottom) && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(borderStyles.borderLeft) &&\n                !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(borderStyles.borderRight) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(borderStyles.borderTop);\n            var isRightTopBottom = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(borderStyles.borderBottom) && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(borderStyles.borderLeft) &&\n                !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(borderStyles.borderRight) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(borderStyles.borderTop);\n            var isLeftTopRight = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(borderStyles.borderBottom) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(borderStyles.borderLeft) &&\n                !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(borderStyles.borderRight) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(borderStyles.borderTop);\n            var isLeftBottomRight = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(borderStyles.borderBottom) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(borderStyles.borderLeft)\n                && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(borderStyles.borderRight) && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(borderStyles.borderTop);\n            context.lineWidth = 1;\n            var extraSpace = 3;\n            if (isAllBorder) {\n                if (startX === endX) {\n                    if (isLeftOrTop) {\n                        this.drawDoubleBorder(context, startX, startY, endX, endY, startX + extraSpace, startY + extraSpace, endX + extraSpace, endY - (extraSpace - 1));\n                    }\n                    else {\n                        this.drawDoubleBorder(context, startX, startY, endX, endY, startX - extraSpace, startY + extraSpace, endX - extraSpace, endY - (extraSpace - 1));\n                    }\n                }\n                else if (startY === endY) {\n                    if (isLeftOrTop) {\n                        this.drawDoubleBorder(context, startX, startY, endX, endY, startX + (extraSpace - 1), startY + extraSpace, endX - (extraSpace - 1), endY + extraSpace);\n                    }\n                    else {\n                        this.drawDoubleBorder(context, startX, startY, endX, endY, startX + (extraSpace - 1), startY - extraSpace, endX - (extraSpace - 1), endY - extraSpace);\n                    }\n                }\n            }\n            else if (isLeftBottom) {\n                if (position === 'left') {\n                    this.drawDoubleBorder(context, startX, startY, endX, endY, startX + extraSpace, startY, endX + extraSpace, endY - (extraSpace - 1));\n                }\n                else {\n                    this.drawDoubleBorder(context, startX, startY, endX, endY, startX + (extraSpace - 1), startY - extraSpace, endX, endY - extraSpace);\n                }\n            }\n            else if (isLeftTop) {\n                if (position === 'left') {\n                    this.drawDoubleBorder(context, startX, startY, endX, endY, startX + extraSpace, startY + (extraSpace - 1), endX + extraSpace, endY);\n                }\n                else {\n                    this.drawDoubleBorder(context, startX, startY, endX, endY, startX + (extraSpace - 1), startY + extraSpace, endX, endY + extraSpace);\n                }\n            }\n            else if (isLeftTopBotom) {\n                if (position === 'left') {\n                    this.drawDoubleBorder(context, startX, startY, endX, endY, startX + extraSpace, startY + extraSpace, endX + extraSpace, endY - (extraSpace - 1));\n                }\n                else if (position === 'top') {\n                    this.drawDoubleBorder(context, startX, startY, endX, endY, startX + (extraSpace - 1), startY + extraSpace, endX, endY + extraSpace);\n                }\n                else {\n                    this.drawDoubleBorder(context, startX, startY, endX, endY, startX + (extraSpace - 1), startY - extraSpace, endX, endY - extraSpace);\n                }\n            }\n            else if (isRightBottom) {\n                if (position === 'right') {\n                    this.drawDoubleBorder(context, startX, startY, endX, endY, startX - extraSpace, startY, endX - extraSpace, endY - (extraSpace - 1));\n                }\n                else {\n                    this.drawDoubleBorder(context, startX, startY, endX, endY, startX, startY - extraSpace, endX - (extraSpace - 1), endY - extraSpace);\n                }\n            }\n            else if (isRightTop) {\n                if (position === 'right') {\n                    this.drawDoubleBorder(context, startX, startY, endX, endY, startX - extraSpace, startY + extraSpace, endX - extraSpace, endY);\n                }\n                else {\n                    this.drawDoubleBorder(context, startX, startY, endX, endY, startX, startY + extraSpace, endX - (extraSpace - 1), endY + extraSpace);\n                }\n            }\n            else if (isRightTopBottom) {\n                if (position === 'right') {\n                    this.drawDoubleBorder(context, startX, startY, endX, endY, startX - extraSpace, startY + extraSpace, endX - extraSpace, endY - (extraSpace - 1));\n                }\n                else if (position === 'top') {\n                    this.drawDoubleBorder(context, startX, startY, endX, endY, startX, startY + extraSpace, endX - (extraSpace - 1), endY + extraSpace);\n                }\n                else {\n                    this.drawDoubleBorder(context, startX, startY, endX, endY, startX, startY - extraSpace, endX - (extraSpace - 1), endY - extraSpace);\n                }\n            }\n            else if (isLeftTopRight) {\n                if (position === 'right') {\n                    this.drawDoubleBorder(context, startX, startY, endX, endY, startX - extraSpace, startY + extraSpace, endX - extraSpace, endY);\n                }\n                else if (position === 'top') {\n                    this.drawDoubleBorder(context, startX, startY, endX, endY, startX + extraSpace, startY + extraSpace, endX - (extraSpace - 1), endY + extraSpace);\n                }\n                else {\n                    this.drawDoubleBorder(context, startX, startY, endX, endY, startX + extraSpace, startY + extraSpace, endX + extraSpace, endY);\n                }\n            }\n            else if (isLeftBottomRight) {\n                if (position === 'right') {\n                    this.drawDoubleBorder(context, startX, startY, endX, endY, startX - extraSpace, startY, endX - extraSpace, endY - (extraSpace - 1));\n                }\n                else if (position === 'bottom') {\n                    this.drawDoubleBorder(context, startX, startY, endX, endY, startX + (extraSpace - 1), startY - extraSpace, endX - (extraSpace - 1), endY - extraSpace);\n                }\n                else {\n                    this.drawDoubleBorder(context, startX, startY, endX, endY, startX + extraSpace, startY, endX + extraSpace, endY - (extraSpace - 1));\n                }\n            }\n            else {\n                if (startX === endX) {\n                    this.drawDoubleBorder(context, startX, startY, endX, endY, startX + (position === 'left' ? extraSpace : -extraSpace), startY, endX + (position === 'left' ? extraSpace : -extraSpace), endY);\n                }\n                else if (startY === endY) {\n                    this.drawDoubleBorder(context, startX, startY, endX, endY, startX, startY +\n                        (position === 'top' ? extraSpace : -extraSpace), endX, endY + (position === 'top' ? extraSpace : -extraSpace));\n                }\n            }\n            context.stroke();\n            return;\n        }\n        else {\n            context.setLineDash([]);\n            context.lineWidth = border.split(' ')[0].split('')[0];\n        }\n        context.moveTo(startX, startY);\n        context.lineTo(endX, endY);\n        context.stroke();\n    };\n    Print.prototype.drawDoubleBorder = function (context, startX1, startY1, endX1, endY1, startX2, startY2, endX2, endY2) {\n        context.moveTo(startX1, startY1);\n        context.lineTo(endX1, endY1);\n        context.moveTo(startX2, startY2);\n        context.lineTo(endX2, endY2);\n    };\n    Print.prototype.calculateTextPosition = function (textWidth, totalWidth, currentX, position, isWrap) {\n        var x;\n        var space = 3;\n        var availableSpace = totalWidth;\n        if (availableSpace >= textWidth) {\n            switch (position.toLowerCase()) {\n                case 'left':\n                    x = currentX + space;\n                    break;\n                case 'center':\n                    x = currentX + (availableSpace - textWidth) / 2;\n                    break;\n                case 'right':\n                    if (isWrap) {\n                        x = currentX + (availableSpace - space);\n                    }\n                    else {\n                        x = currentX + (availableSpace - space) - textWidth;\n                    }\n                    break;\n            }\n        }\n        else if (textWidth < totalWidth) {\n            x = position.toLowerCase() === 'left' ? currentX + space : position.toLowerCase() === 'center' ? currentX + (totalWidth - textWidth) / 2\n                : currentX + totalWidth - textWidth;\n        }\n        else {\n            x = currentX + space;\n        }\n        return x;\n    };\n    Print.prototype.calculatePageCount = function (sheet, columnHeaderWidth, allowColumnAndRow) {\n        var allowHeader = allowColumnAndRow;\n        var colIndex = this.columnIndex;\n        if (sheet.columns.length === 0) {\n            var columnCount = Math.floor(columnHeaderWidth / this.defaultCellWidth) - (allowHeader ? 1 : 0);\n            return Array(Math.max(1, Math.ceil(colIndex / columnCount))).fill(columnCount);\n        }\n        var pageWidthCount = 0;\n        var pageCount = [];\n        for (var i = 0; i <= colIndex; i++) {\n            var column = sheet.columns && sheet.columns[i];\n            var columnWidth = (allowHeader ? 27 : 0) + ((column && column.hidden) ? 0 :\n                (column && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(column.width)) ? column.width : this.defaultCellWidth);\n            pageWidthCount += columnWidth;\n            allowHeader = false;\n            if (pageWidthCount > columnHeaderWidth) {\n                pageCount.push(i - 1);\n                allowHeader = true;\n                pageWidthCount = columnWidth;\n            }\n        }\n        if (pageCount.length === 0 || colIndex > pageCount[pageCount.length - 1]) {\n            pageCount.push(colIndex);\n        }\n        return pageCount;\n    };\n    Print.prototype.wrapText = function (text, colwidth, style, parentStyle) {\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(text)) {\n            return [''];\n        }\n        var displayText = [];\n        var width;\n        var splitTextArr;\n        var lWidth;\n        var cWidth;\n        var prevChars;\n        var prevWidth = 0;\n        var textArr = text.toString().split(' ');\n        var spaceWidth = (0,_common_index__WEBPACK_IMPORTED_MODULE_2__.getTextWidth)(' ', style, parentStyle, true);\n        var hypenWidth;\n        var lines;\n        var lineText = '';\n        var lineCnt = 0;\n        var maxCnt = 0;\n        var calculateCount = function (txt) {\n            if (prevWidth) {\n                displayText.push(lineText);\n            }\n            if ((0,_common_index__WEBPACK_IMPORTED_MODULE_2__.getDPRValue)(width / colwidth, true) > 1) {\n                txt.split('').forEach(function (val) {\n                    cWidth = (0,_common_index__WEBPACK_IMPORTED_MODULE_2__.getTextWidth)(val, style, parentStyle, true);\n                    lWidth += cWidth;\n                    prevChars += val;\n                    if ((0,_common_index__WEBPACK_IMPORTED_MODULE_2__.getDPRValue)(lWidth, true) > colwidth) {\n                        displayText.push(prevChars);\n                        lWidth = cWidth;\n                        prevChars = val;\n                    }\n                });\n                width = lWidth;\n                txt = prevChars;\n            }\n            lineText = txt;\n            prevWidth = width;\n        };\n        var lastTextLen = textArr.length - 1;\n        var addSpace = function (size, textIdx) {\n            if ((0,_common_index__WEBPACK_IMPORTED_MODULE_2__.getDPRValue)(size + spaceWidth, true) / colwidth >= 1) {\n                width += 0;\n            }\n            else {\n                width += spaceWidth;\n                if (textIdx !== lastTextLen) {\n                    lineText += ' ';\n                }\n            }\n        };\n        textArr.forEach(function (txt, textIdx) {\n            lWidth = 0;\n            cWidth = 0;\n            prevChars = '';\n            width = (0,_common_index__WEBPACK_IMPORTED_MODULE_2__.getTextWidth)(txt, style, parentStyle, true);\n            lines = (0,_common_index__WEBPACK_IMPORTED_MODULE_2__.getDPRValue)(prevWidth + width, true) / colwidth;\n            if (lines > 1) {\n                splitTextArr = txt.split('-');\n                if (splitTextArr.length > 1) {\n                    var lastIdx_1 = splitTextArr.length - 1;\n                    splitTextArr.forEach(function (splitText, index) {\n                        lWidth = 0;\n                        cWidth = 0;\n                        prevChars = '';\n                        if (!hypenWidth) {\n                            hypenWidth = (0,_common_index__WEBPACK_IMPORTED_MODULE_2__.getTextWidth)('-', style, parentStyle, true);\n                        }\n                        width = (0,_common_index__WEBPACK_IMPORTED_MODULE_2__.getTextWidth)(splitText, style, parentStyle, true);\n                        if (index < lastIdx_1) {\n                            width += hypenWidth;\n                            splitText += '-';\n                        }\n                        lines = (0,_common_index__WEBPACK_IMPORTED_MODULE_2__.getDPRValue)(prevWidth + width, true) / colwidth;\n                        if (lines > 1) {\n                            calculateCount(splitText);\n                            if (index === lastIdx_1) {\n                                addSpace(width, textIdx);\n                            }\n                        }\n                        else {\n                            lineText += splitText;\n                            if (index === lastIdx_1 && textArr[textArr.length - 1] !== txt) {\n                                addSpace(prevWidth + width, textIdx);\n                            }\n                            prevWidth += width;\n                        }\n                    });\n                }\n                else {\n                    calculateCount(txt);\n                    addSpace(width, textIdx);\n                }\n            }\n            else {\n                lineText += txt;\n                addSpace(prevWidth + width, textIdx);\n                prevWidth += width;\n            }\n        });\n        if (prevWidth) {\n            lineCnt = (0,_common_index__WEBPACK_IMPORTED_MODULE_2__.getDPRValue)(prevWidth - spaceWidth, true) / colwidth;\n            maxCnt = parseFloat((lineCnt).toString().split('.')[0]);\n            displayText.push(lineText);\n        }\n        return displayText;\n    };\n    /**\n     * Get module name.\n     *\n     * @returns {string} - Returns the module name.\n     */\n    Print.prototype.getModuleName = function () {\n        return 'print';\n    };\n    /**\n     * To destroy the print.\n     *\n     * @returns {void}\n     * @private\n     */\n    Print.prototype.destroy = function () {\n        this.setToDefault();\n        this.totalSheetCount = [];\n        this.parent = null;\n    };\n    return Print;\n}());\n\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-spreadsheet/src/spreadsheet/renderer/print.js?");

/***/ })

}]);