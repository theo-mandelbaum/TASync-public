"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkej2_vue_samples"] = self["webpackChunkej2_vue_samples"] || []).push([["chunk-vendors-node_modules_syncfusion_ej2-pdfviewer_src_pdfviewer_magnification_magnification_js-64d-25a09eb1"],{

/***/ "./node_modules/@syncfusion/ej2-pdfviewer/src/pdfviewer/magnification/magnification.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-pdfviewer/src/pdfviewer/magnification/magnification.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Magnification: () => (/* binding */ Magnification)\n/* harmony export */ });\n/* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @syncfusion/ej2-base */ \"./node_modules/@syncfusion/ej2-base/index.js\");\n/* harmony import */ var _syncfusion_ej2_drawings__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @syncfusion/ej2-drawings */ \"./node_modules/@syncfusion/ej2-drawings/index.js\");\n\n\n/**\n * Magnification module\n */\nvar Magnification = /** @class */ (function () {\n    /**\n     * @param {PdfViewer} pdfViewer - It describes about the pdf viewer\n     * @param {PdfViewerBase} viewerBase - It describes about the viewer base\n     * @private\n     */\n    function Magnification(pdfViewer, viewerBase) {\n        /**\n         * @private\n         */\n        this.zoomFactor = 1;\n        /**\n         * @private\n         */\n        this.previousZoomFactor = 1;\n        this.scrollWidth = 25;\n        this.zoomPercentages = [10, 25, 50, 75, 100, 125, 150, 200, 400];\n        this.isNotPredefinedZoom = false;\n        this.pinchStep = 0;\n        this.reRenderPageNumber = 0;\n        this.magnifyPageRerenderTimer = null;\n        this.rerenderOnScrollTimer = null;\n        this.rerenderInterval = null;\n        this.touchCenterX = 0;\n        this.touchCenterY = 0;\n        this.mouseCenterX = 0;\n        this.mouseCenterY = 0;\n        this.pageRerenderCount = 0;\n        this.imageObjects = [];\n        this.topValue = 0;\n        this.isTapToFitZoom = false;\n        /**\n         * @private\n         */\n        this.isWaitingPopupUpdated = false;\n        /**\n         * @private\n         */\n        this.isInitialCustomZoomValues = true;\n        /**\n         * @private\n         */\n        this.fitType = null;\n        /**\n         * @private\n         */\n        this.isPinchZoomed = false;\n        /**\n         * @private\n         */\n        this.isPagePinchZoomed = false;\n        /**\n         * @private\n         */\n        this.isRerenderCanvasCreated = false;\n        /**\n         * @private\n         */\n        this.isMagnified = false;\n        /**\n         * @private\n         */\n        this.isPagesZoomed = false;\n        /**\n         * @private\n         */\n        this.isPinchScrolled = false;\n        /**\n         * @private\n         */\n        this.isAutoZoom = false;\n        /**\n         * @private\n         */\n        this.isDoubleTapZoom = false;\n        /**\n         * @private\n         */\n        this.isFormFieldPageZoomed = false;\n        this.isWebkitMobile = false;\n        this.isFitToPageMode = true;\n        this.pdfViewer = pdfViewer;\n        this.pdfViewerBase = viewerBase;\n        this.zoomLevel = 2;\n    }\n    /**\n     * Zoom the PDF document to the given zoom value\n     *\n     * @param  {number} zoomValue - Specifies the Zoom Value for magnify the PDF document\n     * @returns {void}\n     */\n    Magnification.prototype.zoomTo = function (zoomValue) {\n        var MaximumZoomPercentage = 400;\n        var MinmumZoomPercentage = 10;\n        var minZoom = this.pdfViewer.minZoom;\n        var maxZoom = this.pdfViewer.maxZoom;\n        if (minZoom != null && maxZoom != null && minZoom > maxZoom) {\n            var tempZoomValue = maxZoom;\n            maxZoom = minZoom;\n            minZoom = tempZoomValue;\n        }\n        if (minZoom != null || maxZoom != null) {\n            if (minZoom != null && minZoom !== undefined) {\n                MinmumZoomPercentage = minZoom;\n            }\n            if (maxZoom != null && maxZoom !== undefined) {\n                MaximumZoomPercentage = maxZoom;\n            }\n        }\n        else {\n            MaximumZoomPercentage = 400;\n            MinmumZoomPercentage = 10;\n        }\n        if (zoomValue < MinmumZoomPercentage) {\n            zoomValue = MinmumZoomPercentage;\n        }\n        else if (zoomValue > MaximumZoomPercentage) {\n            zoomValue = MaximumZoomPercentage;\n        }\n        this.fitType = null;\n        this.isNotPredefinedZoom = false;\n        if (this.isAutoZoom && this.isInitialLoading) {\n            this.pdfViewerBase.onWindowResize();\n        }\n        else {\n            this.isAutoZoom = false;\n            this.onZoomChanged(zoomValue);\n        }\n        this.isInitialLoading = false;\n    };\n    /**\n     * Magnifies the page to the next value in the zoom drop down list.\n     *\n     * @returns {void}\n     */\n    Magnification.prototype.zoomIn = function () {\n        if (this.fitType || this.isNotPredefinedZoom) {\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.lowerZoomLevel)) {\n                this.zoomLevel = this.lowerZoomLevel;\n            }\n            this.fitType = null;\n        }\n        this.isNotPredefinedZoom = false;\n        if (this.pdfViewer.minZoom != null || this.pdfViewer.maxZoom != null) {\n            var zoomLength = this.pdfViewerBase.customZoomValues.length;\n            var zoomLevel = this.zoomLevel;\n            if (zoomLevel >= zoomLength) {\n                zoomLevel = zoomLength;\n            }\n            else {\n                zoomLevel++;\n            }\n            this.zoomLevel = zoomLevel;\n        }\n        else {\n            if (this.zoomLevel >= 8) {\n                this.zoomLevel = 8;\n            }\n            else {\n                this.zoomLevel++;\n            }\n        }\n        this.isAutoZoom = false;\n        if (this.pdfViewer.minZoom != null || this.pdfViewer.maxZoom != null) {\n            this.onZoomChanged(this.pdfViewerBase.customZoomValues[this.zoomLevel]);\n        }\n        else {\n            this.onZoomChanged(this.zoomPercentages[this.zoomLevel]);\n        }\n    };\n    /**\n     * Magnifies the page to the previous value in the zoom drop down list.\n     *\n     * @returns {void}\n     */\n    Magnification.prototype.zoomOut = function () {\n        if (this.fitType || this.isNotPredefinedZoom) {\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.higherZoomLevel)) {\n                this.zoomLevel = this.higherZoomLevel;\n            }\n            this.fitType = null;\n        }\n        this.isNotPredefinedZoom = false;\n        if (this.zoomLevel <= 0) {\n            this.zoomLevel = 0;\n        }\n        else {\n            this.zoomLevel--;\n        }\n        this.isAutoZoom = false;\n        if (this.pdfViewer.minZoom != null || this.pdfViewer.maxZoom != null) {\n            this.onZoomChanged(this.pdfViewerBase.customZoomValues[this.zoomLevel]);\n        }\n        else {\n            this.onZoomChanged(this.zoomPercentages[this.zoomLevel]);\n        }\n    };\n    /**\n     * Scales the page to fit the page width to the width of the container in the control.\n     *\n     * @returns {void}\n     */\n    Magnification.prototype.fitToWidth = function () {\n        this.isAutoZoom = false;\n        var zoomValue = this.calculateFitZoomFactor('fitToWidth');\n        this.onZoomChanged(zoomValue);\n    };\n    /**\n     * @private\n     * @returns {void}\n     */\n    Magnification.prototype.fitToAuto = function () {\n        this.isAutoZoom = true;\n        var zoomValue = this.calculateFitZoomFactor('fitToWidth');\n        this.onZoomChanged(zoomValue);\n    };\n    /**\n     * Scales the page to fit the page in the container in the control.\n     *\n     * @returns {void}\n     */\n    Magnification.prototype.fitToPage = function () {\n        var zoomValue = this.calculateFitZoomFactor('fitToPage');\n        if (zoomValue !== null) {\n            this.isAutoZoom = false;\n            this.onZoomChanged(zoomValue);\n            if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice && !this.pdfViewer.enableDesktopMode) {\n                if (this.pdfViewerBase.isWebkitMobile) {\n                    this.pdfViewerBase.viewerContainer.style.overflowY = 'auto';\n                }\n                else {\n                    this.pdfViewerBase.viewerContainer.style.overflowY = 'hidden';\n                }\n            }\n            else {\n                this.pdfViewerBase.viewerContainer.style.overflowY = 'auto';\n            }\n            if (this.pdfViewerBase.pageSize[this.pdfViewerBase.currentPageNumber - 1]) {\n                this.pdfViewerBase.viewerContainer.scrollTop =\n                    this.pdfViewerBase.pageSize[this.pdfViewerBase.currentPageNumber - 1].top * this.zoomFactor;\n            }\n        }\n    };\n    /**\n     * Returns zoom factor for the fit zooms.\n     *\n     * @param {string} type -It describes about the type\n     * @returns {number} - number\n     */\n    Magnification.prototype.calculateFitZoomFactor = function (type) {\n        var viewerWidth = this.pdfViewerBase.viewerContainer.getBoundingClientRect().width;\n        var viewerHeight = this.pdfViewerBase.viewerContainer.getBoundingClientRect().height;\n        if (viewerWidth === 0 && viewerHeight === 0) {\n            viewerWidth = parseFloat(this.pdfViewer.width.toString());\n            viewerHeight = parseFloat(this.pdfViewer.height.toString());\n        }\n        if (isNaN(viewerHeight) || isNaN(viewerWidth)) {\n            return null;\n        }\n        this.fitType = type;\n        if (this.fitType === 'fitToWidth') {\n            var scaleX = ((viewerWidth - this.scrollWidth) / this.pdfViewerBase.highestWidth);\n            if (this.isAutoZoom) {\n                this.fitType = null;\n                scaleX = Math.min(1, scaleX);\n                if (scaleX === 1) {\n                    this.zoomLevel = 2;\n                }\n            }\n            return parseInt((scaleX * 100).toString(), 10);\n        }\n        else {\n            this.isFitToPageMode = true;\n            var pageLeft = 10;\n            var scaleX = ((viewerWidth - this.scrollWidth - pageLeft) / this.pdfViewerBase.highestWidth);\n            var scaleY = 0;\n            if (this.pdfViewerBase.pageSize && this.pdfViewerBase.pageSize.length === 1 &&\n                !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.pdfViewerBase.pageSize[0].top) && !this.isPinchZoomed) {\n                scaleY = (viewerHeight - this.pdfViewerBase.pageSize[0].top) / this.pdfViewerBase.highestHeight;\n            }\n            else {\n                scaleY = (viewerHeight / this.pdfViewerBase.highestHeight);\n            }\n            if (scaleY > scaleX) {\n                scaleY = scaleX;\n                this.isFitToPageMode = false;\n            }\n            return parseInt((scaleY * 100).toString(), 10);\n        }\n    };\n    /**\n     * Initiating cursor based zoom.\n     *\n     * @param {number} pointX - It describes about the pointX\n     * @param {number} pointY - It describes about the pointY\n     * @param {number} zoomValue - It describes about the zoom value\n     * @private\n     * @returns {void}\n     */\n    Magnification.prototype.initiateMouseZoom = function (pointX, pointY, zoomValue) {\n        var pointInViewer = this.positionInViewer(pointX, pointY);\n        this.mouseCenterX = pointInViewer.x;\n        this.mouseCenterY = pointInViewer.y;\n        this.zoomTo(zoomValue);\n    };\n    /**\n     * Performs pinch in operation\n     *\n     * @returns {void}\n     */\n    Magnification.prototype.pinchIn = function () {\n        this.fitType = null;\n        var temporaryZoomFactor = this.zoomFactor - this.pinchStep;\n        if (temporaryZoomFactor < 4 && temporaryZoomFactor > 2) {\n            temporaryZoomFactor = this.zoomFactor - this.pinchStep;\n        }\n        if (temporaryZoomFactor <= 1.5) {\n            temporaryZoomFactor = this.zoomFactor - (this.pinchStep / 1.5);\n        }\n        if (this.pdfViewer.minZoom != null && temporaryZoomFactor < this.pdfViewer.minZoom / 100) {\n            temporaryZoomFactor = this.pdfViewer.minZoom / 100;\n        }\n        else if (temporaryZoomFactor < 0.25) {\n            temporaryZoomFactor = 0.25;\n        }\n        this.isPinchZoomed = true;\n        this.onZoomChanged(temporaryZoomFactor * 100);\n        this.isTapToFitZoom = true;\n        if ((_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice && !this.pdfViewer.enableDesktopMode) && (this.zoomFactor * 100) === 50) {\n            var zoomValue = this.calculateFitZoomFactor('fitToWidth');\n            this.fitType = null;\n            if (zoomValue <= 50) {\n                this.fitToWidth();\n            }\n        }\n    };\n    /**\n     * Performs pinch out operation\n     *\n     * @returns {void}\n     */\n    Magnification.prototype.pinchOut = function () {\n        this.fitType = null;\n        var temporaryZoomFactor = this.zoomFactor + this.pinchStep;\n        if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice && !this.pdfViewer.enableDesktopMode) {\n            if (this.pdfViewer.maxZoom != null && temporaryZoomFactor > this.pdfViewer.maxZoom / 100) {\n                temporaryZoomFactor = this.pdfViewer.maxZoom / 100;\n            }\n            else if (temporaryZoomFactor > 4) {\n                temporaryZoomFactor = 4;\n            }\n        }\n        else {\n            if (temporaryZoomFactor > 2) {\n                temporaryZoomFactor = temporaryZoomFactor - this.pinchStep;\n            }\n            if (this.pdfViewer.maxZoom != null && temporaryZoomFactor > this.pdfViewer.maxZoom / 100) {\n                temporaryZoomFactor = this.pdfViewer.maxZoom / 100;\n            }\n            else if (temporaryZoomFactor > 4) {\n                temporaryZoomFactor = 4;\n            }\n        }\n        this.isTapToFitZoom = true;\n        this.isPinchZoomed = true;\n        this.onZoomChanged(temporaryZoomFactor * 100);\n    };\n    /**\n     * returns zoom level for the zoom factor.\n     *\n     * @param {number} zoomFactor - It describes about the zoom factor\n     * @returns {number} - number\n     */\n    Magnification.prototype.getZoomLevel = function (zoomFactor) {\n        if (this.pdfViewer.minZoom != null || this.pdfViewer.maxZoom != null) {\n            var min = 0;\n            var customZoomValues = this.pdfViewerBase.customZoomValues;\n            var max = customZoomValues.length - 1;\n            while (min <= max) {\n                var mid = Math.floor((min + max) / 2);\n                if (customZoomValues[parseInt(mid.toString(), 10)] === zoomFactor) {\n                    return mid;\n                }\n                else if (customZoomValues[parseInt(mid.toString(), 10)] < zoomFactor) {\n                    min = mid + 1;\n                }\n                else {\n                    max = mid - 1;\n                }\n            }\n            this.higherZoomLevel = min;\n            this.lowerZoomLevel = max;\n            return max;\n        }\n        else {\n            var min = 0;\n            var max = this.zoomPercentages.length - 1;\n            while ((min <= max) && !(min === 0 && max === 0)) {\n                var mid = Math.round((min + max) / 2);\n                if (this.zoomPercentages[parseInt(mid.toString(), 10)] <= zoomFactor) {\n                    min = mid + 1;\n                }\n                else if (this.zoomPercentages[parseInt(mid.toString(), 10)] >= zoomFactor) {\n                    max = mid - 1;\n                }\n            }\n            this.higherZoomLevel = min;\n            this.lowerZoomLevel = max;\n            return max;\n        }\n    };\n    /**\n     * @private\n     * @returns {boolean} - boolean\n     */\n    Magnification.prototype.checkZoomFactor = function () {\n        return this.zoomPercentages.indexOf(this.zoomFactor * 100) > -1;\n    };\n    /**\n     * Executes when the zoom or pinch operation is performed\n     *\n     * @param {number} zoomValue - It describes about the zoom value\n     * @returns {void}\n     */\n    Magnification.prototype.onZoomChanged = function (zoomValue) {\n        if (this.isInitialCustomZoomValues) {\n            this.pdfViewerBase.getCustomZoomValues();\n        }\n        if (zoomValue) {\n            if (this.pdfViewer.annotationModule) {\n                this.pdfViewer.annotationModule.closePopupMenu();\n            }\n            this.previousZoomFactor = this.zoomFactor;\n            this.zoomLevel = this.getZoomLevel(zoomValue);\n            this.zoomFactor = this.getZoomFactor(zoomValue);\n            if (this.zoomFactor <= 0.25) {\n                this.pdfViewerBase.isMinimumZoom = true;\n            }\n            else {\n                this.pdfViewerBase.isMinimumZoom = false;\n            }\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.pdfViewerBase.viewerContainer)) {\n                if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice && !this.pdfViewer.enableDesktopMode) {\n                    if (this.pdfViewerBase.isWebkitMobile) {\n                        this.pdfViewerBase.viewerContainer.style.overflowY = 'auto';\n                    }\n                    else {\n                        this.pdfViewerBase.viewerContainer.style.overflowY = 'hidden';\n                    }\n                }\n                else {\n                    this.pdfViewerBase.viewerContainer.style.overflowY = 'auto';\n                }\n            }\n            if (this.pdfViewerBase.pageCount > 0) {\n                if ((this.previousZoomFactor !== this.zoomFactor) || this.pdfViewerBase.isInitialPageMode) {\n                    if (!this.isPinchZoomed) {\n                        this.magnifyPages();\n                    }\n                    else {\n                        if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice && !this.pdfViewer.enableDesktopMode) {\n                            this.pdfViewerBase.mobilePageNoContainer.style.left = (this.pdfViewer.element.clientWidth / 2) - (parseFloat(this.pdfViewerBase.mobilePageNoContainer.style.width) / 2) + 'px';\n                        }\n                        this.responsivePages();\n                    }\n                }\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isBlazor)()) {\n                    if (this.pdfViewer.toolbarModule) {\n                        this.pdfViewer.toolbarModule.updateZoomButtons();\n                    }\n                }\n                if (!this.isInitialLoading) {\n                    if (this.previousZoomFactor !== this.zoomFactor) {\n                        this.pdfViewer.zoomValue = parseInt((this.zoomFactor * 100).toString(), 10);\n                        this.pdfViewer.fireZoomChange();\n                    }\n                }\n            }\n            if (this.pdfViewer.toolbarModule) {\n                this.pdfViewer.toolbarModule.updateZoomPercentage(this.zoomFactor);\n            }\n            if (!this.isInitialLoading) {\n                if (this.previousZoomFactor !== this.zoomFactor) {\n                    this.pdfViewer.zoomValue = parseInt((this.zoomFactor * 100).toString(), 10);\n                    this.pdfViewer.fireZoomChange();\n                }\n            }\n            if ((_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice && !this.pdfViewer.enableDesktopMode) && this.isPinchZoomed) {\n                var zoomPercentage = parseInt((this.zoomFactor * 100).toString(), 10) + '%';\n                this.pdfViewerBase.navigationPane.createTooltipMobile(zoomPercentage);\n            }\n        }\n    };\n    /**\n     * @param {number} clientX - It describes about the clientX\n     * @param {number} clientY - It describes about the clientY\n     * @private\n     * @returns {void}\n     */\n    Magnification.prototype.setTouchPoints = function (clientX, clientY) {\n        var pointInViewer = this.positionInViewer(clientX, clientY);\n        this.touchCenterX = pointInViewer.x;\n        this.touchCenterY = pointInViewer.y;\n    };\n    /**\n     * @param {number} pointX1 - It describes about the pointX1\n     * @param {number} pointY1 - It describes about the pointY1\n     * @param {number} pointX2 - It describes about the pointX2\n     * @param {number} pointY2 - It describes about the pointY2\n     * @private\n     * @returns {void}\n     */\n    Magnification.prototype.initiatePinchMove = function (pointX1, pointY1, pointX2, pointY2) {\n        this.isPinchScrolled = false;\n        this.isMagnified = false;\n        this.reRenderPageNumber = this.pdfViewerBase.currentPageNumber;\n        var pointInViewer = this.positionInViewer((pointX1 + pointX2) / 2, (pointY1 + pointY2) / 2);\n        this.touchCenterX = pointInViewer.x;\n        this.touchCenterY = pointInViewer.y;\n        this.zoomOverPages(pointX1, pointY1, pointX2, pointY2);\n    };\n    Magnification.prototype.magnifyPages = function () {\n        var _this = this;\n        this.clearRerenderTimer();\n        var pageDivElements = document.querySelectorAll('.e-pv-page-div');\n        var startPageElement = pageDivElements[0].id.split('_pageDiv_')[1];\n        var endPageElement = pageDivElements[pageDivElements.length - 1].id.split('_pageDiv_')[1];\n        if ((this.previousZoomFactor !== this.zoomFactor) || this.pdfViewerBase.isInitialPageMode) {\n            for (var i = startPageElement; i <= endPageElement; i++) {\n                this.pdfViewerBase.showPageLoadingIndicator(i, false);\n            }\n        }\n        for (var i = startPageElement; i <= endPageElement; i++) {\n            this.pdfViewerBase.showPageLoadingIndicator(i, true);\n        }\n        this.isWaitingPopupUpdated = true;\n        if (!this.isPagesZoomed) {\n            this.reRenderPageNumber = this.pdfViewerBase.currentPageNumber;\n        }\n        if (!this.pdfViewerBase.documentLoaded && !this.pdfViewerBase.isInitialPageMode) {\n            this.isPagesZoomed = true;\n        }\n        var scrollValue = this.pdfViewerBase.viewerContainer.scrollTop;\n        if (this.pdfViewer.textSelectionModule) {\n            this.pdfViewer.textSelectionModule.maintainSelectionOnZoom(false, true);\n        }\n        if (this.pdfViewer.formDesignerModule && !this.pdfViewerBase.documentLoaded && !this.pdfViewerBase.isDocumentLoaded) {\n            this.isFormFieldPageZoomed = true;\n        }\n        if (!this.isInitialLoading) {\n            this.isMagnified = true;\n        }\n        this.updatePageLocation();\n        this.resizeCanvas(this.reRenderPageNumber);\n        this.calculateScrollValuesOnMouse(scrollValue);\n        if (this.pdfViewer.textSelectionModule) {\n            this.pdfViewer.textSelectionModule.resizeTouchElements();\n        }\n        var annotModule = this.pdfViewer.annotationModule;\n        if (annotModule && annotModule.textMarkupAnnotationModule) {\n            this.pdfViewer.annotationModule.textMarkupAnnotationModule.updateCurrentResizerPosition();\n        }\n        if (this.pdfViewerBase.pageSize.length > 0) {\n            this.pdfViewerBase.pageContainer.style.height = this.topValue + this.pdfViewerBase.getPageHeight(this.pdfViewerBase.pageSize.length - 1) + 'px';\n            // eslint-disable-next-line\n            var proxy_1 = this;\n            this.pdfViewerBase.renderedPagesList = [];\n            this.pdfViewerBase.pinchZoomStorage = [];\n            if (!this.pdfViewerBase.documentLoaded) {\n                this.magnifyPageRerenderTimer = setTimeout(function () {\n                    proxy_1.rerenderMagnifiedPages();\n                    _this.pdfViewerBase.showPageLoadingIndicator(_this.pdfViewerBase.currentPageNumber - 1, false);\n                }, 800);\n            }\n        }\n    };\n    Magnification.prototype.updatePageLocation = function () {\n        this.topValue = 0;\n        for (var i = 1; i < this.pdfViewerBase.pageSize.length; i++) {\n            this.topValue += (this.pdfViewerBase.pageSize[parseInt(i.toString(), 10)].height + this.pdfViewerBase.pageGap) *\n                this.zoomFactor;\n        }\n        var limit;\n        if (this.pdfViewer.initialRenderPages > 10) {\n            limit = this.pdfViewer.initialRenderPages <= this.pdfViewerBase.pageCount ? this.pdfViewer.initialRenderPages :\n                this.pdfViewerBase.pageCount;\n        }\n        else {\n            limit = this.pdfViewerBase.pageCount < 10 ? this.pdfViewerBase.pageCount : 10;\n        }\n        for (var i = 0; i < limit; i++) {\n            this.updatePageContainer(i, this.pdfViewerBase.getPageWidth(i), this.pdfViewerBase.getPageHeight(i), this.pdfViewerBase.getPageTop(i), true);\n        }\n    };\n    Magnification.prototype.updatePageContainer = function (pageNumber, pageWidth, pageHeight, topValue, isReRender) {\n        var pageDiv = this.pdfViewerBase.getElement('_pageDiv_' + pageNumber);\n        if (pageDiv) {\n            pageDiv.style.width = pageWidth + 'px';\n            pageDiv.style.height = pageHeight + 'px';\n            var textLayerDiv = this.pdfViewerBase.getElement('_textLayer_' + pageNumber);\n            if (textLayerDiv) {\n                textLayerDiv.style.width = pageWidth + 'px';\n                textLayerDiv.style.height = pageHeight + 'px';\n            }\n            pageDiv.style.width = pageWidth + 'px';\n            pageDiv.style.height = pageHeight + 'px';\n            if (this.pdfViewer.enableRtl) {\n                pageDiv.style.right = this.pdfViewerBase.updateLeftPosition(pageNumber) + 'px';\n            }\n            else {\n                pageDiv.style.left = this.pdfViewerBase.updateLeftPosition(pageNumber) + 'px';\n            }\n            pageDiv.style.top = topValue + 'px';\n            this.pdfViewerBase.pageContainer.style.width = this.pdfViewerBase.viewerContainer.clientWidth + 'px';\n            this.pdfViewerBase.renderPageCanvas(pageDiv, pageWidth, pageHeight, pageNumber, 'block');\n        }\n    };\n    Magnification.prototype.clearRerenderTimer = function () {\n        clearTimeout(this.rerenderOnScrollTimer);\n        clearTimeout(this.magnifyPageRerenderTimer);\n        this.clearIntervalTimer();\n        this.isPinchScrolled = false;\n    };\n    /**\n     * @private\n     * @returns {void}\n     */\n    Magnification.prototype.clearIntervalTimer = function () {\n        clearInterval(this.rerenderInterval);\n        this.rerenderInterval = null;\n        this.clearRendering();\n        var oldCanvases = document.querySelectorAll('canvas[id*=\"' + this.pdfViewer.element.id + '_oldCanvas_\"]');\n        for (var i = 0; i < oldCanvases.length; i++) {\n            var pageNumber = parseInt(oldCanvases[parseInt(i.toString(), 10)].id.split('_oldCanvas_')[1], 10);\n            var pageCanvas = this.pdfViewerBase.getElement('_pageCanvas_' + pageNumber);\n            if (pageCanvas) {\n                oldCanvases[parseInt(i.toString(), 10)].id = pageCanvas.id;\n                pageCanvas.parentElement.removeChild(pageCanvas);\n            }\n            else {\n                oldCanvases[parseInt(i.toString(), 10)].id = this.pdfViewer.element.id + '_pageCanvas_' + pageNumber;\n            }\n            if (this.pdfViewerBase.isTextMarkupAnnotationModule()) {\n                this.pdfViewer.annotationModule.textMarkupAnnotationModule.rerenderAnnotationsPinch(i);\n            }\n        }\n        this.isRerenderCanvasCreated = false;\n    };\n    /**\n     * @param {HTMLImageElement} image - It describes about the image\n     * @private\n     * @returns {void}\n     */\n    Magnification.prototype.pushImageObjects = function (image) {\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.imageObjects)) {\n            if (this.imageObjects) {\n                this.imageObjects.push(image);\n            }\n        }\n    };\n    Magnification.prototype.clearRendering = function () {\n        if (this.imageObjects) {\n            for (var j = 0; j < this.imageObjects.length; j++) {\n                if (this.imageObjects[parseInt(j.toString(), 10)]) {\n                    this.imageObjects[parseInt(j.toString(), 10)].onload = null;\n                    this.imageObjects[parseInt(j.toString(), 10)].onerror = null;\n                }\n            }\n            this.imageObjects = [];\n        }\n    };\n    Magnification.prototype.rerenderMagnifiedPages = function () {\n        if ((this.pdfViewerBase.isInitialLoaded || this.pdfViewerBase.isDocumentLoaded) && !this.pdfViewerBase.isInitialPageMode) {\n            this.renderInSeparateThread(this.reRenderPageNumber);\n            this.isPagesZoomed = false;\n        }\n        else if (this.pdfViewerBase.isInitialPageMode) {\n            this.pageRerenderCount = 0;\n            this.pdfViewerBase.renderedPagesList = [];\n            this.pdfViewerBase.pinchZoomStorage = [];\n            this.isMagnified = false;\n            this.pdfViewerBase.pageViewScrollChanged(this.reRenderPageNumber);\n            this.pdfViewerBase.isInitialPageMode = false;\n        }\n    };\n    Magnification.prototype.renderInSeparateThread = function (pageNumber) {\n        var _this = this;\n        this.designNewCanvas(pageNumber);\n        this.pageRerenderCount = 0;\n        this.pdfViewerBase.renderedPagesList = [];\n        this.pdfViewerBase.pinchZoomStorage = [];\n        this.isMagnified = false;\n        this.pdfViewerBase.pageViewScrollChanged(this.pdfViewerBase.currentPageNumber);\n        // eslint-disable-next-line\n        var proxy = this;\n        this.rerenderInterval = setInterval(function () {\n            _this.initiateRerender(proxy);\n        }, 1);\n    };\n    Magnification.prototype.responsivePages = function () {\n        this.isPagesZoomed = true;\n        this.clearRerenderTimer();\n        if (this.pdfViewer.textSelectionModule) {\n            this.pdfViewer.textSelectionModule.clearTextSelection();\n        }\n        if (this.pdfViewer.textSearchModule) {\n            this.pdfViewer.textSearchModule.clearAllOccurrences();\n        }\n        var scrollValue = this.pdfViewerBase.viewerContainer.scrollTop;\n        this.isAutoZoom = false;\n        this.updatePageLocation();\n        this.pdfViewerBase.pageContainer.style.height = this.topValue + this.pdfViewerBase.pageSize[this.pdfViewerBase.pageSize.length - 1].height * this.zoomFactor + 'px';\n        this.resizeCanvas(this.pdfViewerBase.currentPageNumber);\n        if (this.pdfViewerBase.textLayer && this.pdfViewer.formDesignerModule) {\n            this.pdfViewerBase.textLayer.clearTextLayers(true);\n        }\n        if (this.isPinchZoomed) {\n            this.calculateScrollValues(scrollValue);\n        }\n        this.pdfViewerBase.renderedPagesList = [];\n        this.pdfViewerBase.pinchZoomStorage = [];\n        if (this.pdfViewer.formFieldsModule && !this.pdfViewer.formDesignerModule) {\n            // eslint-disable-next-line\n            var proxy_2 = this;\n            if (!this.pdfViewerBase.documentLoaded) {\n                this.magnifyPageRerenderTimer = setTimeout(function () {\n                    proxy_2.rerenderMagnifiedPages();\n                }, 800);\n            }\n        }\n    };\n    Magnification.prototype.calculateScrollValues = function (scrollValue) {\n        var pageIndex = this.pdfViewerBase.currentPageNumber - 1;\n        var currentPageCanvas = this.pdfViewerBase.getElement('_pageDiv_' + pageIndex);\n        if (currentPageCanvas) {\n            var pointInViewer = void 0;\n            var currentPageBounds = currentPageCanvas.getBoundingClientRect();\n            if (this.pdfViewer.enableRtl && !this.isDoubleTapZoom) {\n                pointInViewer = this.positionInViewer(currentPageBounds.right, currentPageBounds.top);\n            }\n            else {\n                pointInViewer = this.positionInViewer(currentPageBounds.left, currentPageBounds.top);\n            }\n            var currentPageBoundsLeft = pointInViewer.x;\n            var currentPageBoundsTop = pointInViewer.y;\n            // update scroll top for the viewer container based on pinch zoom factor\n            var previousPageTop = (currentPageBoundsTop) * this.previousZoomFactor;\n            var canvasPreviousY = scrollValue + this.touchCenterY;\n            var canvasCurrentY = (currentPageBoundsTop) * this.zoomFactor + ((canvasPreviousY - previousPageTop) < 0 ?\n                canvasPreviousY - previousPageTop : (canvasPreviousY - previousPageTop) * (this.zoomFactor / this.previousZoomFactor));\n            var pageGapValue = this.zoomFactor - this.previousZoomFactor > 0 ? -this.pdfViewerBase.pageGap *\n                (this.zoomFactor / this.previousZoomFactor) : this.pdfViewerBase.pageGap * (this.previousZoomFactor / this.zoomFactor);\n            this.pdfViewerBase.viewerContainer.scrollTop = canvasCurrentY - this.touchCenterY + pageGapValue /\n                this.pdfViewerBase.zoomInterval;\n            // update scroll left for the viewer container based on pinch zoom factor\n            var previousWidthFactor = (currentPageBounds.width * this.previousZoomFactor) / currentPageBounds.width;\n            var scaleCorrectionFactor = this.zoomFactor / previousWidthFactor - 1;\n            var scrollX_1 = this.touchCenterX - currentPageBoundsLeft;\n            if (this.pdfViewerBase.isMixedSizeDocument && (this.pdfViewerBase.highestWidth * this.pdfViewerBase.getZoomFactor()) >\n                this.pdfViewerBase.viewerContainer.clientWidth) {\n                this.pdfViewerBase.viewerContainer.scrollLeft = (this.pdfViewerBase.pageContainer.offsetWidth -\n                    this.pdfViewerBase.viewerContainer.clientWidth) / 2;\n            }\n            else {\n                this.pdfViewerBase.viewerContainer.scrollLeft += scrollX_1 * scaleCorrectionFactor;\n            }\n        }\n    };\n    Magnification.prototype.calculateScrollValuesOnMouse = function (scrollValue) {\n        var pageIndex = this.pdfViewerBase.currentPageNumber - 1;\n        var currentPageCanvas = this.pdfViewerBase.getElement('_pageDiv_' + pageIndex);\n        if (currentPageCanvas) {\n            var pointInViewer = void 0;\n            var currentPageBounds = currentPageCanvas.getBoundingClientRect();\n            if (this.pdfViewer.enableRtl) {\n                pointInViewer = this.positionInViewer(currentPageBounds.right, currentPageBounds.top);\n            }\n            else {\n                pointInViewer = this.positionInViewer(currentPageBounds.left, currentPageBounds.top);\n            }\n            var currentPageBoundsLeft = pointInViewer.x;\n            var currentPageBoundsTop = pointInViewer.y;\n            // update scroll top for the viewer container based on mouse zoom factor\n            var previousPageTop = (currentPageBoundsTop) * this.previousZoomFactor;\n            var canvasPreviousY = scrollValue + this.mouseCenterY;\n            var canvasCurrentY = (currentPageBoundsTop) * this.zoomFactor + ((canvasPreviousY - previousPageTop) *\n                (this.zoomFactor / this.previousZoomFactor));\n            var pageGapValue = this.pdfViewerBase.pageGap * (this.zoomFactor / this.previousZoomFactor);\n            if (this.pdfViewerBase.isTouchPad && !this.pdfViewerBase.isMacSafari) {\n                pageGapValue = pageGapValue / this.pdfViewerBase.zoomInterval;\n            }\n            if (canvasCurrentY === 0) {\n                pageGapValue = 0;\n            }\n            this.pdfViewerBase.viewerContainer.scrollTop = canvasCurrentY - this.mouseCenterY + pageGapValue;\n            // update scroll left for the viewer container based on mouse zoom factor\n            var previousWidthFactor = (currentPageBounds.width * this.previousZoomFactor) / currentPageBounds.width;\n            var scaleCorrectionFactor = this.zoomFactor / previousWidthFactor - 1;\n            var scrollX_2 = this.mouseCenterX - currentPageBoundsLeft;\n            if (this.pdfViewerBase.isMixedSizeDocument && (this.pdfViewerBase.highestWidth * this.pdfViewerBase.getZoomFactor()) >\n                this.pdfViewerBase.viewerContainer.clientWidth) {\n                this.pdfViewerBase.viewerContainer.scrollLeft = (this.pdfViewerBase.pageContainer.offsetWidth -\n                    this.pdfViewerBase.viewerContainer.clientWidth) / 2;\n            }\n            else {\n                var pageContainer = document.getElementById(this.pdfViewerBase.pageContainer.id);\n                if (pageContainer && pageContainer.children && pageContainer.children[0].clientWidth >\n                    this.pdfViewer.viewerBase.viewerContainer.clientWidth) {\n                    this.pdfViewerBase.viewerContainer.scrollLeft += scrollX_2 * scaleCorrectionFactor;\n                }\n                else {\n                    this.pdfViewerBase.viewerContainer.scrollLeft = (this.pdfViewerBase.pageContainer.offsetWidth -\n                        this.pdfViewerBase.viewerContainer.clientWidth) / 2;\n                }\n            }\n        }\n    };\n    Magnification.prototype.rerenderOnScroll = function () {\n        var _this = this;\n        this.isPinchZoomed = false;\n        if (this.isPinchScrolled) {\n            this.rerenderOnScrollTimer = null;\n            this.isPinchScrolled = false;\n            this.reRenderPageNumber = this.pdfViewerBase.currentPageNumber;\n            this.pdfViewerBase.renderedPagesList = [];\n            this.pdfViewerBase.pinchZoomStorage = [];\n            var pageDivs = document.querySelectorAll('img[id*=\"' + this.pdfViewer.element.id + '_pageCanvas_\"]');\n            var viewPortWidth = 816;\n            for (var i = 0; i < pageDivs.length; i++) {\n                var pageNumber = parseInt(pageDivs[parseInt(i.toString(), 10)].id.split('_pageCanvas_')[1], 10);\n                var pageWidth = this.pdfViewerBase.pageSize[parseInt(pageNumber.toString(), 10)].width;\n                if ((viewPortWidth < pageWidth) && this.pdfViewer.tileRenderingSettings.enableTileRendering) {\n                    if (this.pdfViewer.restrictZoomRequest) {\n                        pageDivs[parseInt(i.toString(), 10)].style.width = pageWidth * this.pdfViewerBase.getZoomFactor() + 'px';\n                        pageDivs[parseInt(i.toString(), 10)].style.height = this.pdfViewerBase.pageSize[parseInt(pageNumber.toString(), 10)].height * this.pdfViewerBase.getZoomFactor() + 'px';\n                    }\n                    else {\n                        pageDivs[parseInt(i.toString(), 10)].style.width = pageWidth * this.pdfViewerBase.getZoomFactor() + 'px';\n                        pageDivs[parseInt(i.toString(), 10)].style.height = this.pdfViewerBase.pageSize[parseInt(pageNumber.toString(), 10)].height * this.pdfViewerBase.getZoomFactor() + 'px';\n                    }\n                }\n            }\n            if (this.pdfViewerBase.textLayer) {\n                var textLayers = document.querySelectorAll('div[id*=\"' + this.pdfViewer.element.id + '_textLayer_\"]');\n                for (var i = 0; i < textLayers.length; i++) {\n                    textLayers[parseInt(i.toString(), 10)].style.display = 'none';\n                }\n            }\n            if (this.pdfViewerBase.isTextMarkupAnnotationModule()) {\n                var annotationLayers = document.querySelectorAll('canvas[id*=\"' + this.pdfViewer.element.id + '_annotationCanvas_\"]');\n                for (var j = 0; j < annotationLayers.length; j++) {\n                    var pageNumber = annotationLayers[parseInt(j.toString(), 10)].id.split('_annotationCanvas_')[1];\n                    this.pdfViewer.annotationModule.textMarkupAnnotationModule.rerenderAnnotationsPinch(parseInt(pageNumber, 10));\n                }\n            }\n            if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice) {\n                if (this.pdfViewer.formDesignerModule) {\n                    var pageNumber_1 = this.pdfViewer.currentPageNumber;\n                    var fomrFieldCollection = this.pdfViewer.formFieldCollection.filter(function (data) {\n                        return data.pageNumber ===\n                            pageNumber_1;\n                    });\n                    for (var i = 0; i < fomrFieldCollection.length; i++) {\n                        document.querySelectorAll('[id^=' + fomrFieldCollection[parseInt(i.toString(), 10)].id + ']').forEach(function (formField) { return formField.style.display = 'none'; });\n                    }\n                }\n                else {\n                    document.querySelectorAll('[id^=\"pdfViewerinput_\"]').forEach(function (formField) { return formField.parentElement.style.display = 'none'; });\n                }\n            }\n            this.pdfViewerBase.pageViewScrollChanged(this.reRenderPageNumber);\n            this.isPagePinchZoomed = false;\n            this.rerenderOnScrollTimer = setTimeout(function () {\n                _this.pdfViewerBase.pageViewScrollChanged(_this.reRenderPageNumber);\n            }, 300);\n            if (this.pdfViewerBase.textLayer) {\n                var textLayers = document.querySelectorAll('div[id*=\"' + this.pdfViewer.element.id + '_textLayer_\"]');\n                for (var i = 0; i < textLayers.length; i++) {\n                    textLayers[parseInt(i.toString(), 10)].style.display = 'block';\n                }\n            }\n        }\n    };\n    /**\n     * @private\n     * @returns {void}\n     */\n    Magnification.prototype.pinchMoveScroll = function () {\n        var _this = this;\n        if (this.isRerenderCanvasCreated) {\n            this.clearIntervalTimer();\n        }\n        if (this.isPagesZoomed || (!this.isRerenderCanvasCreated && this.isPagePinchZoomed)) {\n            this.clearRendering();\n            this.isPagesZoomed = false;\n            clearTimeout(this.magnifyPageRerenderTimer);\n            this.isPinchScrolled = true;\n            this.isFormFieldPageZoomed = true;\n            this.rerenderOnScrollTimer = setTimeout(function () {\n                _this.rerenderOnScroll();\n            }, 100);\n        }\n    };\n    Magnification.prototype.initiateRerender = function (proxy) {\n        var isReRender = false;\n        if (this.previousZoomFactor < 0.4 || this.pdfViewerBase.isMinimumZoom) {\n            isReRender = true;\n        }\n        if (((proxy.pageRerenderCount === proxy.pdfViewerBase.reRenderedCount) || isReRender) &&\n            proxy.pageRerenderCount !== 0 && proxy.pdfViewerBase.reRenderedCount !== 0) {\n            proxy.reRenderAfterPinch(this.reRenderPageNumber);\n            proxy.isFormFieldPageZoomed = false;\n        }\n    };\n    Magnification.prototype.reRenderAfterPinch = function (currentPageIndex) {\n        this.pageRerenderCount = 0;\n        var lowerPageValue = currentPageIndex - 3;\n        var higherPageValue = currentPageIndex + 1;\n        if (this.pdfViewerBase.isMinimumZoom) {\n            lowerPageValue = currentPageIndex - 4;\n            higherPageValue = currentPageIndex + 4;\n        }\n        lowerPageValue = (lowerPageValue > 0) ? lowerPageValue : 0;\n        higherPageValue = (higherPageValue < this.pdfViewerBase.pageCount) ? higherPageValue : (this.pdfViewerBase.pageCount - 1);\n        for (var i = lowerPageValue; i <= higherPageValue; i++) {\n            var pageDiv = this.pdfViewerBase.getElement('_pageDiv_' + i);\n            var oldCanvas = this.pdfViewerBase.getElement('_oldCanvas_' + i);\n            if (oldCanvas) {\n                oldCanvas.onload = null;\n                oldCanvas.onerror = null;\n                oldCanvas.parentNode.removeChild(oldCanvas);\n            }\n            if (this.pdfViewerBase.isTextMarkupAnnotationModule()) {\n                this.pdfViewer.annotationModule.textMarkupAnnotationModule.rerenderAnnotations(i);\n            }\n            else if (this.pdfViewer.formDesignerModule) {\n                this.rerenderAnnotations(i);\n                this.pdfViewer.renderDrawing(undefined, currentPageIndex);\n            }\n            if (pageDiv) {\n                pageDiv.style.visibility = 'visible';\n            }\n        }\n        this.isRerenderCanvasCreated = false;\n        this.isPagePinchZoomed = false;\n        if (this.pdfViewerBase.reRenderedCount !== 0) {\n            this.pdfViewerBase.reRenderedCount = 0;\n            this.pageRerenderCount = 0;\n            clearInterval(this.rerenderInterval);\n            this.rerenderInterval = null;\n        }\n        this.imageObjects = [];\n    };\n    /**\n     * @param {number} pageNumber - It describes about the page number\n     * @private\n     * @returns {void}\n     */\n    Magnification.prototype.rerenderAnnotations = function (pageNumber) {\n        var _this = this;\n        var oldCanvasCollection = document.querySelectorAll('#' + this.pdfViewer.element.id + '_old_annotationCanvas_' + pageNumber);\n        for (var i = 0; i < oldCanvasCollection.length; i++) {\n            if (oldCanvasCollection[parseInt(i.toString(), 10)]) {\n                oldCanvasCollection[parseInt(i.toString(), 10)].parentElement.removeChild(oldCanvasCollection[parseInt(i.toString(), 10)]);\n            }\n        }\n        // Styles need to be applied to both canvases. The 'blendAnnotationsIntoCanvas' is used for highlight annotations.\n        ['_annotationCanvas_', '_blendAnnotationsIntoCanvas_'].forEach(function (id) {\n            var canvas = _this.pdfViewerBase.getElement(\"\" + id + pageNumber);\n            canvas.style.setProperty('display', 'block');\n        });\n    };\n    Magnification.prototype.designNewCanvas = function (currentPageIndex) {\n        if (this.pdfViewerBase.textLayer) {\n            this.pdfViewerBase.textLayer.clearTextLayers();\n        }\n        var lowerPageValue = currentPageIndex - 3;\n        var higherPageValue = currentPageIndex + 1; // jshint ignore:line\n        if (this.pdfViewerBase.isMinimumZoom) {\n            lowerPageValue = currentPageIndex - 4;\n            higherPageValue = currentPageIndex + 4;\n        }\n        lowerPageValue = (lowerPageValue > 0) ? lowerPageValue : 0;\n        higherPageValue = (higherPageValue < this.pdfViewerBase.pageCount) ? higherPageValue : (this.pdfViewerBase.pageCount - 1);\n        for (var i = lowerPageValue; i <= higherPageValue; i++) {\n            if (this.pdfViewerBase.pageSize[parseInt(i.toString(), 10)]) {\n                var canvas = this.pdfViewerBase.getElement('_pageCanvas_' + i);\n                var width = this.pdfViewerBase.pageSize[parseInt(i.toString(), 10)].width * this.zoomFactor;\n                var height = this.pdfViewerBase.pageSize[parseInt(i.toString(), 10)].height * this.zoomFactor;\n                if (canvas && !this.pdfViewer.restrictZoomRequest) {\n                    this.pdfViewerBase.renderPageCanvas(this.pdfViewerBase.getElement('_pageDiv_' + i), width, height, i, 'none');\n                }\n                else if (!this.pdfViewer.restrictZoomRequest) {\n                    this.pdfViewerBase.renderPageCanvas(this.pdfViewerBase.getElement('_pageDiv_' + i), width, height, i, 'none');\n                }\n            }\n        }\n        this.isRerenderCanvasCreated = true;\n    };\n    /**\n     * @private\n     * @returns {void}\n     */\n    Magnification.prototype.pageRerenderOnMouseWheel = function () {\n        var _this = this;\n        if (this.isRerenderCanvasCreated) {\n            this.clearIntervalTimer();\n            clearTimeout(this.magnifyPageRerenderTimer);\n            if (!this.isPinchScrolled) {\n                this.isPinchScrolled = true;\n                this.rerenderOnScrollTimer = setTimeout(function () {\n                    _this.rerenderOnScroll();\n                }, 100);\n            }\n        }\n    };\n    /**\n     * @private\n     * @returns {void}\n     */\n    Magnification.prototype.renderCountIncrement = function () {\n        if (this.isRerenderCanvasCreated) {\n            this.pageRerenderCount++;\n        }\n    };\n    /**\n     * @private\n     * @returns {void}\n     */\n    Magnification.prototype.rerenderCountIncrement = function () {\n        if (this.pageRerenderCount > 0) {\n            this.pdfViewerBase.reRenderedCount++;\n        }\n    };\n    /**\n     * @param {number} pageNumber - It describes about the page number\n     * @private\n     * @returns {void}\n     */\n    Magnification.prototype.resizeCanvas = function (pageNumber) {\n        var annotationModule = this.pdfViewer.annotationModule;\n        if (annotationModule && annotationModule.inkAnnotationModule && annotationModule.inkAnnotationModule.outputString !== '') {\n            annotationModule.inkAnnotationModule.inkPathDataCollection.push({ pathData: annotationModule.inkAnnotationModule.outputString, zoomFactor: annotationModule.inkAnnotationModule.inkAnnotationInitialZoom });\n            annotationModule.inkAnnotationModule.outputString = '';\n        }\n        if (annotationModule && annotationModule.freeTextAnnotationModule) {\n            var currentPosition = { x: annotationModule.freeTextAnnotationModule.currentPosition[0],\n                y: annotationModule.freeTextAnnotationModule.currentPosition[1],\n                width: annotationModule.freeTextAnnotationModule.currentPosition[2],\n                height: annotationModule.freeTextAnnotationModule.currentPosition[3] };\n            annotationModule.freeTextAnnotationModule.addInputInZoom(currentPosition);\n        }\n        var lowerPageValue = pageNumber - 3;\n        var higherPageValue = pageNumber + 3;\n        if (this.pdfViewerBase.isMinimumZoom) {\n            lowerPageValue = pageNumber - 4;\n            higherPageValue = pageNumber + 4;\n        }\n        if (this.pdfViewer.initialRenderPages > this.pdfViewerBase.pageRenderCount) {\n            lowerPageValue = 0;\n            higherPageValue = (higherPageValue < this.pdfViewer.initialRenderPages) ?\n                (this.pdfViewer.initialRenderPages <= this.pdfViewerBase.pageCount) ?\n                    this.pdfViewer.initialRenderPages : this.pdfViewerBase.pageCount :\n                (higherPageValue < this.pdfViewerBase.pageCount) ? higherPageValue : (this.pdfViewerBase.pageCount - 1);\n        }\n        else {\n            lowerPageValue = (lowerPageValue > 0) ? lowerPageValue : 0;\n            higherPageValue = (higherPageValue < this.pdfViewerBase.pageCount) ? higherPageValue : (this.pdfViewerBase.pageCount - 1);\n        }\n        for (var i = lowerPageValue; i <= higherPageValue; i++) {\n            var pageDiv = this.pdfViewerBase.getElement('_pageDiv_' + i);\n            var textLayer = document.getElementById(this.pdfViewer.element.id + '_textLayer_' + i);\n            if (pageDiv) {\n                if ((lowerPageValue <= i) && (i <= higherPageValue)) {\n                    var isSelectionAvailable = false;\n                    if (this.pdfViewer.textSelectionModule) {\n                        isSelectionAvailable = this.pdfViewer.textSelectionModule.isSelectionAvailableOnScroll(i);\n                    }\n                    if (this.pdfViewerBase.pageSize[parseInt(i.toString(), 10)] != null) {\n                        var width = this.pdfViewerBase.pageSize[parseInt(i.toString(), 10)].width * this.zoomFactor;\n                        var height = this.pdfViewerBase.pageSize[parseInt(i.toString(), 10)].height * this.zoomFactor;\n                        pageDiv.style.width = width + 'px';\n                        pageDiv.style.height = height + 'px';\n                        pageDiv.style.top = ((this.pdfViewerBase.pageSize[parseInt(i.toString(), 10)].top) * this.zoomFactor) + 'px';\n                        if (this.pdfViewer.enableRtl) {\n                            pageDiv.style.right = this.pdfViewerBase.updateLeftPosition(i) + 'px';\n                        }\n                        else {\n                            pageDiv.style.left = this.pdfViewerBase.updateLeftPosition(i) + 'px';\n                        }\n                        var canvas = this.pdfViewerBase.getElement('_pageCanvas_' + i);\n                        if (canvas) {\n                            canvas.style.width = (width) + 'px';\n                            canvas.style.height = height + 'px';\n                            if (this.pdfViewer.annotation) {\n                                this.pdfViewer.annotationModule.resizeAnnotations(width, height, i);\n                            }\n                            else if (this.pdfViewer.formDesignerModule) {\n                                this.pdfViewer.formDesignerModule.resizeAnnotations(width, height, i);\n                            }\n                        }\n                        var zoomFactor = this.pdfViewerBase.retrieveCurrentZoomFactor();\n                        var tileCount = this.pdfViewerBase.getTileCount(this.pdfViewerBase.\n                            pageSize[parseInt(i.toString(), 10)].width, this.pdfViewerBase.pageSize[parseInt(i.toString(), 10)].height);\n                        var noTileX = void 0;\n                        var noTileY = void 0;\n                        noTileX = noTileY = tileCount;\n                        var tileSettings = this.pdfViewer.tileRenderingSettings;\n                        if (tileSettings.enableTileRendering && tileSettings.x > 0 && tileSettings.y > 0) {\n                            if ((1200 < this.pdfViewerBase.pageSize[parseInt(i.toString(), 10)].width ||\n                                this.pdfViewerBase.getZoomFactor() > 2)) {\n                                noTileX = tileSettings.x;\n                                noTileY = tileSettings.y;\n                            }\n                        }\n                        var tileRequestCount = noTileX * noTileY;\n                        if (tileRequestCount === 1) {\n                            var storedData = void 0;\n                            if (this.pdfViewerBase.clientSideRendering) {\n                                storedData = this.pdfViewerBase.getWindowSessionStorage(i, zoomFactor) ?\n                                    this.pdfViewerBase.getWindowSessionStorage(i, zoomFactor) : this.pdfViewerBase.getPinchZoomPage(i);\n                            }\n                            else {\n                                storedData = this.pdfViewerBase.getLinkInformation(i) ?\n                                    this.pdfViewerBase.getLinkInformation(i) : this.pdfViewerBase.getWindowSessionStorage(i, zoomFactor);\n                            }\n                            if (storedData) {\n                                storedData = this.pdfViewerBase.clientSideRendering && typeof storedData === 'object' ? storedData : JSON.parse(storedData);\n                                var imageData = storedData['image'];\n                                if (imageData) {\n                                    canvas.src = imageData;\n                                    canvas.style.display = 'block';\n                                    var oldCanvases = document.querySelectorAll('img[id*=\"' + this.pdfViewer.element.id + '_tileimg_' + i + '_\"]');\n                                    var pageCanvas = this.pdfViewerBase.getElement('_pageDiv_' + i);\n                                    for (var k = 0; k < oldCanvases.length; k++) {\n                                        var tileImgId = oldCanvases[parseInt(k.toString(), 10)].id.split('_');\n                                        if (parseFloat(tileImgId[tileImgId.length - 3]) !== this.pdfViewerBase.getZoomFactor()) {\n                                            oldCanvases[parseInt(k.toString(), 10)].onload = null;\n                                            oldCanvases[parseInt(k.toString(), 10)].onerror = null;\n                                            pageCanvas.removeChild(oldCanvases[parseInt(k.toString(), 10)]);\n                                        }\n                                    }\n                                    var oldPageDiv = document.querySelectorAll('img[id*=\"' + this.pdfViewer.element.id + '_oldCanvas\"]');\n                                    for (var j = 0; j < oldPageDiv.length; j++) {\n                                        oldPageDiv[parseInt(j.toString(), 10)].onload = null;\n                                        oldPageDiv[parseInt(j.toString(), 10)].onerror = null;\n                                        pageDiv.removeChild(oldPageDiv[parseInt(j.toString(), 10)]);\n                                    }\n                                }\n                                this.pdfViewerBase.isReRenderRequired = false;\n                            }\n                            else {\n                                this.pdfViewerBase.isReRenderRequired = true;\n                            }\n                        }\n                        else {\n                            var oldCanvases = document.querySelectorAll('img[id*=\"' + this.pdfViewer.element.id + '_tileimg_' + i + '_\"]');\n                            for (var l = 0; l < oldCanvases.length; l++) {\n                                var tileImgId = oldCanvases[parseInt(l.toString(), 10)].id.split('_');\n                                var tileX = parseFloat(tileImgId[tileImgId.length - 2]);\n                                var tileY = parseFloat(tileImgId[tileImgId.length - 1]);\n                                var tileData = this.pdfViewerBase.clientSideRendering ?\n                                    JSON.parse(this.pdfViewerBase.getStoredTileImageDetails(i, tileX, tileY, zoomFactor)) :\n                                    JSON.parse(this.pdfViewerBase.getWindowSessionStorageTile(i, tileX, tileY, zoomFactor));\n                                if (tileData && tileData.zoomFactor) {\n                                    zoomFactor = tileData.zoomFactor;\n                                }\n                                if (parseFloat(tileImgId[tileImgId.length - 4]) === i) {\n                                    canvas.style.display = 'none';\n                                    var node = oldCanvases[parseInt(l.toString(), 10)];\n                                    // Make sure it's really an Element\n                                    if (node.nodeType === Node.ELEMENT_NODE) {\n                                        var dataScaleFactor = 1.5;\n                                        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(tileData)) {\n                                            dataScaleFactor = (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(tileData.scaleFactor)) ? tileData.scaleFactor : 1.5;\n                                        }\n                                        var pageWidth = this.pdfViewerBase.pageSize[parseInt(i.toString(), 10)].width;\n                                        var serverImageWidth = pageWidth * zoomFactor * dataScaleFactor;\n                                        var serverImageHeight = this.pdfViewerBase.\n                                            pageSize[parseInt(i.toString(), 10)].height * zoomFactor * dataScaleFactor;\n                                        var tilewidth = serverImageWidth / noTileX;\n                                        var tileHeight = serverImageHeight / noTileY;\n                                        var originalWidth = tilewidth;\n                                        var originalLeft = parseFloat(tileImgId[tileImgId.length - 2]) * tilewidth;\n                                        var originalTop = parseFloat(tileImgId[tileImgId.length - 1]) * tileHeight;\n                                        node.width = (((originalWidth * this.pdfViewerBase.getZoomFactor()) / zoomFactor) /\n                                            dataScaleFactor);\n                                        node.style.width = (((originalWidth * this.pdfViewerBase.getZoomFactor()) / zoomFactor) / dataScaleFactor) + 'px';\n                                        node.style.left = (((originalLeft * this.pdfViewerBase.getZoomFactor()) / zoomFactor) / dataScaleFactor) + 'px';\n                                        node.style.top = (((originalTop * this.pdfViewerBase.getZoomFactor()) / zoomFactor) / dataScaleFactor) + 'px';\n                                        node.id = this.pdfViewer.element.id + '_tileimg_' + i + '_' + this.pdfViewerBase.getZoomFactor() + '_' + tileX + '_' + tileY;\n                                        if (tileData) {\n                                            var imageData = tileData['image'];\n                                            if (imageData) {\n                                                node.src = imageData;\n                                            }\n                                            this.pdfViewerBase.isReRenderRequired = false;\n                                        }\n                                        else {\n                                            this.pdfViewerBase.isReRenderRequired = true;\n                                        }\n                                    }\n                                }\n                            }\n                            if (oldCanvases.length === 0) {\n                                this.pdfViewerBase.isReRenderRequired = true;\n                            }\n                        }\n                        var adornerSvg = (0,_syncfusion_ej2_drawings__WEBPACK_IMPORTED_MODULE_1__.getDiagramElement)(this.pdfViewer.element.id + '_textLayer_' + i);\n                        if (adornerSvg) {\n                            var adonerLayer = (0,_syncfusion_ej2_drawings__WEBPACK_IMPORTED_MODULE_1__.getDiagramElement)(this.pdfViewer.element.id + i + '_diagramAdorner_svg');\n                            if (adonerLayer) {\n                                adonerLayer.style.width = width + 'px';\n                                adonerLayer.style.height = height + 'px';\n                            }\n                            var diagramAdornerLayer = (0,_syncfusion_ej2_drawings__WEBPACK_IMPORTED_MODULE_1__.getDiagramElement)(this.pdfViewer.element.id + i + '_diagramAdornerLayer');\n                            if (diagramAdornerLayer) {\n                                diagramAdornerLayer.style.width = width + 'px';\n                                diagramAdornerLayer.style.height = height + 'px';\n                            }\n                            adornerSvg.style.width = width + 'px';\n                            adornerSvg.style.height = height + 'px';\n                            this.pdfViewer.renderSelector(i, this.pdfViewer.annotationSelectorSettings);\n                            this.pdfViewerBase.applyElementStyles(diagramAdornerLayer, i);\n                        }\n                    }\n                }\n            }\n        }\n    };\n    Magnification.prototype.zoomOverPages = function (pointX1, pointY1, pointX2, pointY2) {\n        var currentDifference = Math.sqrt(Math.pow((pointX1 - pointX2), 2) + Math.pow((pointY1 - pointY2), 2));\n        if (this.previousTouchDifference > -1) {\n            if (currentDifference > this.previousTouchDifference) {\n                this.pinchStep = this.getPinchStep(currentDifference, this.previousTouchDifference);\n                this.pinchOut();\n            }\n            else if (currentDifference < this.previousTouchDifference) {\n                this.pinchStep = this.getPinchStep(this.previousTouchDifference, currentDifference);\n                this.pinchIn();\n            }\n        }\n        this.previousTouchDifference = currentDifference;\n    };\n    /**\n     * @private\n     * @returns {void}\n     */\n    Magnification.prototype.pinchMoveEnd = function () {\n        this.touchCenterX = 0;\n        this.touchCenterY = 0;\n        this.previousTouchDifference = -1;\n        if (this.isPinchZoomed) {\n            this.isPinchScrolled = false;\n            this.isPagePinchZoomed = true;\n            this.pinchMoveScroll();\n        }\n    };\n    /**\n     * @param {WheelEvent} event - It describes about the event\n     * @private\n     * @returns {void}\n     */\n    Magnification.prototype.fitPageScrollMouseWheel = function (event) {\n        if (this.fitType === 'fitToPage') {\n            this.isMagnified = false;\n            event.preventDefault();\n            if (event.deltaY > 0) {\n                this.downwardScrollFitPage(this.pdfViewerBase.currentPageNumber - 1);\n            }\n            else {\n                this.upwardScrollFitPage(this.pdfViewerBase.currentPageNumber - 1);\n            }\n        }\n    };\n    /**\n     * @param {KeyboardEvent} event - It describes about the event\n     * @private\n     * @returns {void}\n     */\n    Magnification.prototype.magnifyBehaviorKeyDown = function (event) {\n        var isMac = navigator.platform.match(/(Mac|iPhone|iPod|iPad)/i) ? true : false;\n        var isCommandKey = isMac ? event.metaKey : false;\n        if (event.ctrlKey || isCommandKey) {\n            if (event.code === 'Equal') {\n                event.preventDefault();\n                this.zoomIn();\n            }\n        }\n        if (event.ctrlKey || isCommandKey) {\n            if (event.code === 'Minus') {\n                event.preventDefault();\n                this.zoomOut();\n            }\n        }\n        switch (event.keyCode) {\n            case 37: // left arrow\n                if (event.ctrlKey || isCommandKey) {\n                    event.preventDefault();\n                    this.pdfViewerBase.updateScrollTop(0);\n                }\n                else if (this.focusOnViewerContainer() && this.formElementcheck()) {\n                    event.preventDefault();\n                    this.upwardScrollFitPage(this.pdfViewerBase.currentPageNumber - 1);\n                }\n                break;\n            case 38: // up arrow\n            case 33: // page up\n                if (event.ctrlKey || isCommandKey) {\n                    event.preventDefault();\n                    this.pdfViewerBase.updateScrollTop(0);\n                }\n                else if (this.fitType === 'fitToPage' && !((event.ctrlKey || isCommandKey) && event.shiftKey)) {\n                    event.preventDefault();\n                    this.upwardScrollFitPage(this.pdfViewerBase.currentPageNumber - 1);\n                }\n                break;\n            case 39: // right arrow\n                if (event.ctrlKey || isCommandKey) {\n                    event.preventDefault();\n                    this.pdfViewerBase.updateScrollTop(this.pdfViewerBase.pageCount - 1);\n                }\n                else if (this.focusOnViewerContainer() && this.formElementcheck()) {\n                    event.preventDefault();\n                    this.downwardScrollFitPage(this.pdfViewerBase.currentPageNumber - 1);\n                }\n                break;\n            case 40: // down arrow\n            case 34: // page down\n                if (event.ctrlKey || isCommandKey) {\n                    event.preventDefault();\n                    this.pdfViewerBase.updateScrollTop(this.pdfViewerBase.pageCount - 1);\n                }\n                else if (this.fitType === 'fitToPage' && !((event.ctrlKey || isCommandKey) && event.shiftKey)) {\n                    event.preventDefault();\n                    this.downwardScrollFitPage(this.pdfViewerBase.currentPageNumber - 1);\n                }\n                break;\n            case 48: // zero key\n                if ((event.ctrlKey || isCommandKey) && !event.shiftKey && !event.altKey) {\n                    event.preventDefault();\n                    this.fitToPage();\n                }\n                break;\n            case 49: // one key\n                if ((event.ctrlKey || isCommandKey) && !event.shiftKey && !event.altKey) {\n                    event.preventDefault();\n                    this.zoomTo(100);\n                }\n                break;\n            default:\n                break;\n        }\n    };\n    Magnification.prototype.formElementcheck = function () {\n        var target = event.target;\n        return (target.offsetParent && target.offsetParent.classList.length > 0 && !target.offsetParent.classList.contains('foreign-object'));\n    };\n    Magnification.prototype.focusOnViewerContainer = function () {\n        var activeElement = document.activeElement;\n        var viewerContainer = document.querySelector('.e-pv-viewer-container');\n        return viewerContainer.contains(activeElement);\n    };\n    Magnification.prototype.upwardScrollFitPage = function (currentPageIndex) {\n        if (currentPageIndex > 0) {\n            var pageDiv = this.pdfViewerBase.getElement('_pageDiv_' + (currentPageIndex - 1));\n            if (pageDiv) {\n                pageDiv.style.visibility = 'visible';\n                this.pdfViewerBase.viewerContainer.scrollTop = this.pdfViewerBase.pageSize[currentPageIndex - 1].top * this.zoomFactor;\n                if (this.isFitToPageMode) {\n                    var division = this.pdfViewerBase.getElement('_pageDiv_' + (currentPageIndex));\n                    if (division) {\n                        division.style.visibility = 'hidden';\n                    }\n                }\n            }\n        }\n    };\n    /**\n     * @param {number} currentPageIndex - It describes about the current page index\n     * @private\n     * @returns {void}\n     */\n    Magnification.prototype.updatePagesForFitPage = function (currentPageIndex) {\n        if (this.fitType === 'fitToPage') {\n            if (this.isFitToPageMode) {\n                if (currentPageIndex > 0 && this.pdfViewerBase.getElement('_pageDiv_' + (currentPageIndex - 1))) {\n                    this.pdfViewerBase.getElement('_pageDiv_' + (currentPageIndex - 1)).style.visibility = 'hidden';\n                }\n                if ((currentPageIndex < (this.pdfViewerBase.pageCount - 1)) && this.pdfViewerBase.getElement('_pageDiv_' + (currentPageIndex + 1))) {\n                    this.pdfViewerBase.getElement('_pageDiv_' + (currentPageIndex + 1)).style.visibility = 'hidden';\n                }\n            }\n        }\n    };\n    /**\n     * @private\n     * @returns {void}\n     */\n    Magnification.prototype.onDoubleTapMagnification = function () {\n        var _this = this;\n        if (this.pdfViewer.toolbarModule && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isBlazor)()) {\n            this.pdfViewer.toolbarModule.showToolbar(true);\n        }\n        var scrollValue = this.pdfViewerBase.viewerContainer.scrollTop;\n        if (!this.pdfViewer.selectedItems.annotations[0]) {\n            this.isDoubleTapZoom = true;\n            if (!this.isTapToFitZoom) {\n                if (this.zoomFactor < 2) {\n                    this.zoomTo(200);\n                }\n                else {\n                    this.fitToWidth();\n                }\n            }\n            else {\n                this.fitToWidth();\n            }\n            this.calculateScrollValues(scrollValue);\n            this.isTapToFitZoom = !this.isTapToFitZoom;\n            setTimeout(function () { _this.isMagnified = false; }, 500);\n            this.isDoubleTapZoom = false;\n        }\n        else {\n            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isBlazor)()) {\n                if (this.pdfViewer.selectedItems.annotations[0] && this.pdfViewer.selectedItems.annotations[0].shapeAnnotationType === 'FreeText') {\n                    var elmtPosition = {};\n                    elmtPosition.x = this.pdfViewer.selectedItems.annotations[0].bounds.x;\n                    elmtPosition.y = this.pdfViewer.selectedItems.annotations[0].bounds.y;\n                    this.pdfViewer.annotation.freeTextAnnotationModule.\n                        addInuptElemet(elmtPosition, this.pdfViewer.selectedItems.annotations[0]);\n                }\n            }\n        }\n    };\n    Magnification.prototype.downwardScrollFitPage = function (currentPageIndex) {\n        if (currentPageIndex !== (this.pdfViewerBase.pageCount - 1)) {\n            var pageDiv = this.pdfViewerBase.getElement('_pageDiv_' + (currentPageIndex + 1));\n            if (pageDiv) {\n                pageDiv.style.visibility = 'visible';\n            }\n            this.pdfViewerBase.viewerContainer.scrollTop = this.pdfViewerBase.pageSize[currentPageIndex + 1].top * this.zoomFactor;\n            if (this.isFitToPageMode) {\n                var division1 = this.pdfViewerBase.getElement('_pageDiv_' + (currentPageIndex));\n                var division2 = this.pdfViewerBase.getElement('_pageDiv_' + (currentPageIndex + 2));\n                if (currentPageIndex + 1 === (this.pdfViewerBase.pageCount - 1)) {\n                    if (division1) {\n                        division1.style.visibility = 'hidden';\n                    }\n                }\n                else {\n                    if (division2) {\n                        division2.style.visibility = 'hidden';\n                    }\n                }\n            }\n        }\n    };\n    Magnification.prototype.getMagnifiedValue = function (value) {\n        return (value / this.previousZoomFactor) * this.zoomFactor;\n    };\n    /**\n     * @private\n     * @returns {void}\n     */\n    Magnification.prototype.destroy = function () {\n        this.imageObjects = undefined;\n    };\n    /**\n     * returns zoom factor when the zoom percent is passed.\n     *\n     * @param {number} zoomValue - It describes about the zoom value\n     * @returns {number} - number\n     */\n    Magnification.prototype.getZoomFactor = function (zoomValue) {\n        return zoomValue / 100;\n    };\n    /**\n     * @private\n     * @returns {string} - string\n     */\n    Magnification.prototype.getModuleName = function () {\n        return 'Magnification';\n    };\n    /**\n     * Returns the pinch step value.\n     *\n     * @param {number} higherValue - It describes about the higher value\n     * @param {number} lowerValue - It describes about the lower value\n     * @returns {number} - number\n     */\n    Magnification.prototype.getPinchStep = function (higherValue, lowerValue) {\n        var defaultPinchStep = 0.02; // Default pinch step value.\n        var higherPinchStep = 1; // higher pinch step value.\n        var pinchstep = (higherValue - lowerValue) / 100;\n        if (pinchstep < defaultPinchStep) {\n            pinchstep = defaultPinchStep;\n        }\n        else if (pinchstep > higherPinchStep) {\n            pinchstep = 0.1; // set the pinch step as 0.1 if the pinch reaches the higher pinch step value.\n        }\n        return pinchstep;\n    };\n    /**\n     * @private\n     * @param {Rect} zoomRect - Specifies the region in client coordinates that is to be brought to view.\n     * @returns {void}\n     */\n    Magnification.prototype.zoomToRect = function (zoomRect) {\n        var desiredScaleFactor;\n        var pdfViewerBase = this.pdfViewerBase;\n        var viewerContainer = pdfViewerBase.viewerContainer;\n        var pdfViewer = this.pdfViewer;\n        if (zoomRect.width > 0 && zoomRect.height > 0) {\n            var location_1 = { x: zoomRect.x, y: zoomRect.y };\n            var pageNumber = pdfViewer.getPageNumberFromClientPoint(location_1);\n            if (pageNumber > 0) {\n                var desiredHorizontalScale = viewerContainer.getBoundingClientRect().width / zoomRect.width;\n                var desiredVerticalScale = viewerContainer.getBoundingClientRect().height / zoomRect.height;\n                if (desiredHorizontalScale < desiredVerticalScale) {\n                    desiredScaleFactor = desiredHorizontalScale;\n                }\n                else {\n                    desiredScaleFactor = desiredVerticalScale;\n                }\n                var zoomValue = 100; // default zoom value\n                var zoomPercentage = pdfViewerBase.getZoomFactor() * 100;\n                zoomValue = zoomPercentage * desiredScaleFactor;\n                var prevScrollTop = viewerContainer.scrollTop;\n                var prevScrollLeft = viewerContainer.scrollLeft;\n                // Zoom to desired zoom value.\n                this.zoomTo(zoomValue);\n                viewerContainer.scrollTop = prevScrollTop;\n                viewerContainer.scrollLeft = prevScrollLeft;\n                var zoomFactor = pdfViewerBase.getZoomFactor();\n                var pagepoint = { x: zoomRect.x, y: zoomRect.y };\n                // Convert the client point to page point.\n                pagepoint = pdfViewer.convertClientPointToPagePoint(pagepoint, pageNumber);\n                pdfViewerBase.updateScrollTop(pageNumber - 1);\n                // To adjust the container to the left position.\n                viewerContainer.scrollLeft = (pagepoint.x - prevScrollLeft) * zoomFactor;\n                // To adjust the container to the top position.\n                viewerContainer.scrollTop = ((pagepoint.y + pdfViewerBase.pageSize[pageNumber - 1].top) - prevScrollTop) * zoomFactor;\n            }\n        }\n    };\n    /**\n     * Returns Point value respect to Main container.\n     *\n     * @param {number} pointX - It describes about the pointX\n     * @param {number} pointY - It describes about the pointY\n     * @returns {any} - any\n     */\n    Magnification.prototype.positionInViewer = function (pointX, pointY) {\n        var mainRect = this.pdfViewerBase.mainContainer.getBoundingClientRect();\n        return { x: pointX - mainRect.left, y: pointY - mainRect.top };\n    };\n    return Magnification;\n}());\n\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-pdfviewer/src/pdfviewer/magnification/magnification.js?");

/***/ })

}]);