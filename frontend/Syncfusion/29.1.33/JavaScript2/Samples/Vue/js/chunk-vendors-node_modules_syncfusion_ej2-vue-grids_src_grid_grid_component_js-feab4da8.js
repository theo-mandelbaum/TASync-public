"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkej2_vue_samples"] = self["webpackChunkej2_vue_samples"] || []).push([["chunk-vendors-node_modules_syncfusion_ej2-vue-grids_src_grid_grid_component_js-feab4da8"],{

/***/ "./node_modules/@syncfusion/ej2-vue-grids/src/grid/grid.component.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-vue-grids/src/grid/grid.component.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GridComponent: () => (/* binding */ GridComponent),\n/* harmony export */   GridPlugin: () => (/* binding */ GridPlugin),\n/* harmony export */   emitProbs: () => (/* binding */ emitProbs),\n/* harmony export */   modelProps: () => (/* binding */ modelProps),\n/* harmony export */   properties: () => (/* binding */ properties),\n/* harmony export */   props: () => (/* binding */ props),\n/* harmony export */   testProp: () => (/* binding */ testProp),\n/* harmony export */   watch: () => (/* binding */ watch)\n/* harmony export */ });\n/* harmony import */ var _syncfusion_ej2_vue_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @syncfusion/ej2-vue-base */ \"./node_modules/@syncfusion/ej2-vue-base/index.js\");\n/* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @syncfusion/ej2-base */ \"./node_modules/@syncfusion/ej2-base/index.js\");\n/* harmony import */ var _syncfusion_ej2_grids__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @syncfusion/ej2-grids */ \"./node_modules/@syncfusion/ej2-grids/index.js\");\n/* harmony import */ var _stacked_column_directive__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./stacked-column.directive */ \"./node_modules/@syncfusion/ej2-vue-grids/src/grid/stacked-column.directive.js\");\n/* harmony import */ var _columns_directive__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./columns.directive */ \"./node_modules/@syncfusion/ej2-vue-grids/src/grid/columns.directive.js\");\n/* harmony import */ var _aggregate_columns_directive__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./aggregate-columns.directive */ \"./node_modules/@syncfusion/ej2-vue-grids/src/grid/aggregate-columns.directive.js\");\n/* harmony import */ var _aggregates_directive__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./aggregates.directive */ \"./node_modules/@syncfusion/ej2-vue-grids/src/grid/aggregates.directive.js\");\n\n\n\n\n\n\n\n\nvar properties = ['isLazyUpdate', 'plugins', 'adaptiveUIMode', 'aggregates', 'allowExcelExport', 'allowFiltering', 'allowGrouping', 'allowKeyboard', 'allowMultiSorting', 'allowPaging', 'allowPdfExport', 'allowReordering', 'allowResizing', 'allowRowDragAndDrop', 'allowSelection', 'allowSorting', 'allowTextWrap', 'autoFit', 'childGrid', 'clipMode', 'columnChooserSettings', 'columnMenuItems', 'columnQueryMode', 'columns', 'contextMenuItems', 'cssClass', 'currencyCode', 'currentAction', 'currentViewData', 'dataSource', 'detailTemplate', 'editSettings', 'ej2StatePersistenceVersion', 'emptyRecordTemplate', 'enableAdaptiveUI', 'enableAltRow', 'enableAutoFill', 'enableColumnVirtualization', 'enableHeaderFocus', 'enableHover', 'enableHtmlSanitizer', 'enableImmutableMode', 'enableInfiniteScrolling', 'enablePersistence', 'enableRtl', 'enableStickyHeader', 'enableVirtualMaskRow', 'enableVirtualization', 'exportGrids', 'filterSettings', 'frozenColumns', 'frozenRows', 'gridLines', 'groupSettings', 'height', 'hierarchyPrintMode', 'infiniteScrollSettings', 'loadingIndicator', 'locale', 'pageSettings', 'pagerTemplate', 'parentDetails', 'printMode', 'query', 'queryString', 'resizeSettings', 'rowDropSettings', 'rowHeight', 'rowRenderingMode', 'rowTemplate', 'searchSettings', 'selectedRowIndex', 'selectionSettings', 'showColumnChooser', 'showColumnMenu', 'showHider', 'sortSettings', 'textWrapSettings', 'toolbar', 'toolbarTemplate', 'width', 'actionBegin', 'actionComplete', 'actionFailure', 'batchAdd', 'batchCancel', 'batchDelete', 'beforeAutoFill', 'beforeBatchAdd', 'beforeBatchDelete', 'beforeBatchSave', 'beforeCopy', 'beforeDataBound', 'beforeDetailTemplateDetach', 'beforeExcelExport', 'beforeOpenAdaptiveDialog', 'beforeOpenColumnChooser', 'beforePaste', 'beforePdfExport', 'beforePrint', 'beginEdit', 'cellDeselected', 'cellDeselecting', 'cellEdit', 'cellSave', 'cellSaved', 'cellSelected', 'cellSelecting', 'checkBoxChange', 'columnDataStateChange', 'columnDeselected', 'columnDeselecting', 'columnDrag', 'columnDragStart', 'columnDrop', 'columnMenuClick', 'columnMenuOpen', 'columnSelected', 'columnSelecting', 'commandClick', 'contextMenuClick', 'contextMenuOpen', 'created', 'dataBound', 'dataSourceChanged', 'dataStateChange', 'destroyed', 'detailDataBound', 'excelAggregateQueryCellInfo', 'excelExportComplete', 'excelHeaderQueryCellInfo', 'excelQueryCellInfo', 'exportDetailDataBound', 'exportDetailTemplate', 'exportGroupCaption', 'headerCellInfo', 'keyPressed', 'lazyLoadGroupCollapse', 'lazyLoadGroupExpand', 'load', 'pdfAggregateQueryCellInfo', 'pdfExportComplete', 'pdfHeaderQueryCellInfo', 'pdfQueryCellInfo', 'printComplete', 'queryCellInfo', 'recordClick', 'recordDoubleClick', 'resizeStart', 'resizeStop', 'resizing', 'rowDataBound', 'rowDeselected', 'rowDeselecting', 'rowDrag', 'rowDragStart', 'rowDragStartHelper', 'rowDrop', 'rowSelected', 'rowSelecting', 'toolbarClick'];\nvar modelProps = ['dataSource'];\nvar testProp = (0,_syncfusion_ej2_vue_base__WEBPACK_IMPORTED_MODULE_0__.getProps)({ props: properties });\nvar props = testProp[0], watch = testProp[1], emitProbs = Object.keys(watch);\nemitProbs.push('modelchanged', 'update:modelValue');\nfor (var _i = 0, modelProps_1 = modelProps; _i < modelProps_1.length; _i++) {\n    var props_1 = modelProps_1[_i];\n    emitProbs.push('update:' + props_1);\n}\n/**\n * `ejs-grid` represents the VueJS Grid Component.\n * ```vue\n * <ejs-grid :dataSource='data' allowPaging='true' allowSorting='true'></ejs-grid>\n * ```\n */\nvar GridComponent = (0,_syncfusion_ej2_vue_base__WEBPACK_IMPORTED_MODULE_0__.vueDefineComponent)({\n    name: 'GridComponent',\n    mixins: [_syncfusion_ej2_vue_base__WEBPACK_IMPORTED_MODULE_0__.ComponentBase],\n    props: props,\n    watch: watch,\n    emits: emitProbs,\n    model: { event: 'modelchanged' },\n    provide: function () { return { custom: this.custom }; },\n    data: function () {\n        return {\n            ej2Instances: new _syncfusion_ej2_grids__WEBPACK_IMPORTED_MODULE_2__.Grid({}),\n            propKeys: properties,\n            models: modelProps,\n            hasChildDirective: true,\n            hasInjectedModules: true,\n            tagMapper: { \"e-columns\": { \"e-column\": { \"e-stacked-columns\": \"e-stacked-column\" } }, \"e-aggregates\": { \"e-aggregate\": { \"e-columns\": \"e-column\" } } },\n            tagNameMapper: { \"e-stacked-columns\": \"e-columns\" },\n            isVue3: !_syncfusion_ej2_vue_base__WEBPACK_IMPORTED_MODULE_0__.isExecute,\n            templateCollection: {},\n        };\n    },\n    created: function () {\n        this.ej2Instances._trigger = this.ej2Instances.trigger;\n        this.ej2Instances.trigger = this.trigger;\n        this.bindProperties();\n        this.ej2Instances._setProperties = this.ej2Instances.setProperties;\n        this.ej2Instances.setProperties = this.setProperties;\n        this.ej2Instances.clearTemplate = this.clearTemplate;\n        this.updated = this.updated;\n    },\n    render: function (createElement) {\n        var h = !_syncfusion_ej2_vue_base__WEBPACK_IMPORTED_MODULE_0__.isExecute ? _syncfusion_ej2_vue_base__WEBPACK_IMPORTED_MODULE_0__.gh : createElement;\n        var slots = null;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(this.$slots.default)) {\n            slots = !_syncfusion_ej2_vue_base__WEBPACK_IMPORTED_MODULE_0__.isExecute ? this.$slots.default() : this.$slots.default;\n        }\n        return h('div', slots);\n    },\n    methods: {\n        clearTemplate: function (templateNames) {\n            if (!templateNames) {\n                templateNames = Object.keys(this.templateCollection || {});\n            }\n            if (templateNames.length && this.templateCollection) {\n                for (var _i = 0, templateNames_1 = templateNames; _i < templateNames_1.length; _i++) {\n                    var tempName = templateNames_1[_i];\n                    var elementCollection = this.templateCollection[tempName];\n                    if (elementCollection && elementCollection.length) {\n                        for (var _a = 0, elementCollection_1 = elementCollection; _a < elementCollection_1.length; _a++) {\n                            var ele = elementCollection_1[_a];\n                            this.destroyPortals(ele);\n                        }\n                        delete this.templateCollection[tempName];\n                    }\n                }\n            }\n        },\n        setProperties: function (prop, muteOnChange) {\n            var _this = this;\n            if (this.isVue3) {\n                this.models = !this.models ? this.ej2Instances.referModels : this.models;\n            }\n            if (this.ej2Instances && this.ej2Instances._setProperties) {\n                this.ej2Instances._setProperties(prop, muteOnChange);\n            }\n            if (prop && this.models && this.models.length) {\n                Object.keys(prop).map(function (key) {\n                    _this.models.map(function (model) {\n                        if ((key === model) && !(/datasource/i.test(key))) {\n                            if (_this.isVue3) {\n                                _this.ej2Instances.vueInstance.$emit('update:' + key, prop[key]);\n                            }\n                            else {\n                                _this.$emit('update:' + key, prop[key]);\n                                _this.$emit('modelchanged', prop[key]);\n                            }\n                        }\n                    });\n                });\n            }\n        },\n        trigger: function (eventName, eventProp, successHandler) {\n            if (!_syncfusion_ej2_vue_base__WEBPACK_IMPORTED_MODULE_0__.isExecute) {\n                this.models = !this.models ? this.ej2Instances.referModels : this.models;\n            }\n            if ((eventName === 'change' || eventName === 'input') && this.models && (this.models.length !== 0)) {\n                var key = this.models.toString().match(/checked|value/) || [];\n                var propKey = key[0];\n                if (eventProp && key && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isUndefined)(eventProp[propKey])) {\n                    if (!_syncfusion_ej2_vue_base__WEBPACK_IMPORTED_MODULE_0__.isExecute) {\n                        this.ej2Instances.vueInstance.$emit('update:' + propKey, eventProp[propKey]);\n                        this.ej2Instances.vueInstance.$emit('modelchanged', eventProp[propKey]);\n                        this.ej2Instances.vueInstance.$emit('update:modelValue', eventProp[propKey]);\n                    }\n                    else {\n                        if (eventName === 'change' || (this.$props && !this.$props.isLazyUpdate)) {\n                            this.$emit('update:' + propKey, eventProp[propKey]);\n                            this.$emit('modelchanged', eventProp[propKey]);\n                        }\n                    }\n                }\n            }\n            else if ((eventName === 'actionBegin' && eventProp.requestType === 'dateNavigate') && this.models && (this.models.length !== 0)) {\n                var key = this.models.toString().match(/currentView|selectedDate/) || [];\n                var propKey = key[0];\n                if (eventProp && key && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isUndefined)(eventProp[propKey])) {\n                    if (!_syncfusion_ej2_vue_base__WEBPACK_IMPORTED_MODULE_0__.isExecute) {\n                        this.ej2Instances.vueInstance.$emit('update:' + propKey, eventProp[propKey]);\n                        this.ej2Instances.vueInstance.$emit('modelchanged', eventProp[propKey]);\n                    }\n                    else {\n                        this.$emit('update:' + propKey, eventProp[propKey]);\n                        this.$emit('modelchanged', eventProp[propKey]);\n                    }\n                }\n            }\n            if ((this.ej2Instances && this.ej2Instances._trigger)) {\n                this.ej2Instances._trigger(eventName, eventProp, successHandler);\n            }\n        },\n        custom: function () {\n            this.updated();\n        },\n        addRecord: function (data, index) {\n            return this.ej2Instances.addRecord(data, index);\n        },\n        addShimmerEffect: function () {\n            return this.ej2Instances.addShimmerEffect();\n        },\n        autoFitColumns: function (fieldNames, startRowIndex, endRowIndex) {\n            return this.ej2Instances.autoFitColumns(fieldNames, startRowIndex, endRowIndex);\n        },\n        batchAsyncUpdate: function (changes) {\n            return this.ej2Instances.batchAsyncUpdate(changes);\n        },\n        batchUpdate: function (changes) {\n            return this.ej2Instances.batchUpdate(changes);\n        },\n        calculatePageSizeByParentHeight: function (containerHeight) {\n            return this.ej2Instances.calculatePageSizeByParentHeight(containerHeight);\n        },\n        changeDataSource: function (dataSource, columns) {\n            return this.ej2Instances.changeDataSource(dataSource, columns);\n        },\n        clearCellSelection: function () {\n            return this.ej2Instances.clearCellSelection();\n        },\n        clearFiltering: function (fields) {\n            return this.ej2Instances.clearFiltering(fields);\n        },\n        clearGrouping: function () {\n            return this.ej2Instances.clearGrouping();\n        },\n        clearRowSelection: function () {\n            return this.ej2Instances.clearRowSelection();\n        },\n        clearSelection: function () {\n            return this.ej2Instances.clearSelection();\n        },\n        clearSorting: function () {\n            return this.ej2Instances.clearSorting();\n        },\n        closeEdit: function () {\n            return this.ej2Instances.closeEdit();\n        },\n        copy: function (withHeader) {\n            return this.ej2Instances.copy(withHeader);\n        },\n        csvExport: function (excelExportProperties, isMultipleExport, workbook, isBlob) {\n            return this.ej2Instances.csvExport(excelExportProperties, isMultipleExport, workbook, isBlob);\n        },\n        dataReady: function () {\n            return this.ej2Instances.dataReady();\n        },\n        deleteRecord: function (fieldname, data) {\n            return this.ej2Instances.deleteRecord(fieldname, data);\n        },\n        deleteRow: function (tr) {\n            return this.ej2Instances.deleteRow(tr);\n        },\n        destroy: function () {\n            return this.ej2Instances.destroy();\n        },\n        destroyTemplate: function (propertyNames, index) {\n            return this.ej2Instances.destroyTemplate(propertyNames, index);\n        },\n        detailCollapseAll: function () {\n            return this.ej2Instances.detailCollapseAll();\n        },\n        detailExpandAll: function () {\n            return this.ej2Instances.detailExpandAll();\n        },\n        editCell: function (index, field) {\n            return this.ej2Instances.editCell(index, field);\n        },\n        enableToolbarItems: function (items, isEnable) {\n            return this.ej2Instances.enableToolbarItems(items, isEnable);\n        },\n        endEdit: function () {\n            return this.ej2Instances.endEdit();\n        },\n        excelExport: function (excelExportProperties, isMultipleExport, workbook, isBlob) {\n            return this.ej2Instances.excelExport(excelExportProperties, isMultipleExport, workbook, isBlob);\n        },\n        extendRequiredModules: function (modules) {\n            return this.ej2Instances.extendRequiredModules(modules);\n        },\n        filterByColumn: function (fieldName, filterOperator, filterValue, predicate, matchCase, ignoreAccent, actualFilterValue, actualOperator) {\n            return this.ej2Instances.filterByColumn(fieldName, filterOperator, filterValue, predicate, matchCase, ignoreAccent, actualFilterValue, actualOperator);\n        },\n        getBatchChanges: function () {\n            return this.ej2Instances.getBatchChanges();\n        },\n        getCellFromIndex: function (rowIndex, columnIndex) {\n            return this.ej2Instances.getCellFromIndex(rowIndex, columnIndex);\n        },\n        getColumnByField: function (field) {\n            return this.ej2Instances.getColumnByField(field);\n        },\n        getColumnByUid: function (uid, isColumns) {\n            return this.ej2Instances.getColumnByUid(uid, isColumns);\n        },\n        getColumnFieldNames: function () {\n            return this.ej2Instances.getColumnFieldNames();\n        },\n        getColumnHeaderByField: function (field) {\n            return this.ej2Instances.getColumnHeaderByField(field);\n        },\n        getColumnHeaderByIndex: function (index) {\n            return this.ej2Instances.getColumnHeaderByIndex(index);\n        },\n        getColumnHeaderByUid: function (uid) {\n            return this.ej2Instances.getColumnHeaderByUid(uid);\n        },\n        getColumnIndexByField: function (field) {\n            return this.ej2Instances.getColumnIndexByField(field);\n        },\n        getColumnIndexByUid: function (uid) {\n            return this.ej2Instances.getColumnIndexByUid(uid);\n        },\n        getColumns: function (isRefresh) {\n            return this.ej2Instances.getColumns(isRefresh);\n        },\n        getContent: function () {\n            return this.ej2Instances.getContent();\n        },\n        getContentTable: function () {\n            return this.ej2Instances.getContentTable();\n        },\n        getCurrentViewRecords: function () {\n            return this.ej2Instances.getCurrentViewRecords();\n        },\n        getDataModule: function () {\n            return this.ej2Instances.getDataModule();\n        },\n        getDataRows: function () {\n            return this.ej2Instances.getDataRows();\n        },\n        getFilterUIInfo: function () {\n            return this.ej2Instances.getFilterUIInfo();\n        },\n        getFilteredRecords: function () {\n            return this.ej2Instances.getFilteredRecords();\n        },\n        getFooterContent: function () {\n            return this.ej2Instances.getFooterContent();\n        },\n        getFooterContentTable: function () {\n            return this.ej2Instances.getFooterContentTable();\n        },\n        getForeignKeyColumns: function () {\n            return this.ej2Instances.getForeignKeyColumns();\n        },\n        getFrozenDataRows: function () {\n            return this.ej2Instances.getFrozenDataRows();\n        },\n        getFrozenLeftColumnHeaderByIndex: function (index) {\n            return this.ej2Instances.getFrozenLeftColumnHeaderByIndex(index);\n        },\n        getFrozenLeftCount: function () {\n            return this.ej2Instances.getFrozenLeftCount();\n        },\n        getFrozenMode: function () {\n            return this.ej2Instances.getFrozenMode();\n        },\n        getFrozenRightCellFromIndex: function (rowIndex, columnIndex) {\n            return this.ej2Instances.getFrozenRightCellFromIndex(rowIndex, columnIndex);\n        },\n        getFrozenRightColumnHeaderByIndex: function (index) {\n            return this.ej2Instances.getFrozenRightColumnHeaderByIndex(index);\n        },\n        getFrozenRightDataRows: function () {\n            return this.ej2Instances.getFrozenRightDataRows();\n        },\n        getFrozenRightRowByIndex: function (index) {\n            return this.ej2Instances.getFrozenRightRowByIndex(index);\n        },\n        getFrozenRightRows: function () {\n            return this.ej2Instances.getFrozenRightRows();\n        },\n        getFrozenRowByIndex: function (index) {\n            return this.ej2Instances.getFrozenRowByIndex(index);\n        },\n        getHeaderContent: function () {\n            return this.ej2Instances.getHeaderContent();\n        },\n        getHeaderTable: function () {\n            return this.ej2Instances.getHeaderTable();\n        },\n        getHiddenColumns: function () {\n            return this.ej2Instances.getHiddenColumns();\n        },\n        getMediaColumns: function () {\n            return this.ej2Instances.getMediaColumns();\n        },\n        getMovableCellFromIndex: function (rowIndex, columnIndex) {\n            return this.ej2Instances.getMovableCellFromIndex(rowIndex, columnIndex);\n        },\n        getMovableColumnHeaderByIndex: function (index) {\n            return this.ej2Instances.getMovableColumnHeaderByIndex(index);\n        },\n        getMovableDataRows: function () {\n            return this.ej2Instances.getMovableDataRows();\n        },\n        getMovableRowByIndex: function (index) {\n            return this.ej2Instances.getMovableRowByIndex(index);\n        },\n        getMovableRows: function () {\n            return this.ej2Instances.getMovableRows();\n        },\n        getPager: function () {\n            return this.ej2Instances.getPager();\n        },\n        getPrimaryKeyFieldNames: function () {\n            return this.ej2Instances.getPrimaryKeyFieldNames();\n        },\n        getRowByIndex: function (index) {\n            return this.ej2Instances.getRowByIndex(index);\n        },\n        getRowIndexByPrimaryKey: function (value) {\n            return this.ej2Instances.getRowIndexByPrimaryKey(value);\n        },\n        getRowInfo: function (target) {\n            return this.ej2Instances.getRowInfo(target);\n        },\n        getRows: function () {\n            return this.ej2Instances.getRows();\n        },\n        getRowsObject: function () {\n            return this.ej2Instances.getRowsObject();\n        },\n        getSelectedColumnsUid: function () {\n            return this.ej2Instances.getSelectedColumnsUid();\n        },\n        getSelectedRecords: function () {\n            return this.ej2Instances.getSelectedRecords();\n        },\n        getSelectedRowCellIndexes: function () {\n            return this.ej2Instances.getSelectedRowCellIndexes();\n        },\n        getSelectedRowIndexes: function () {\n            return this.ej2Instances.getSelectedRowIndexes();\n        },\n        getSelectedRows: function () {\n            return this.ej2Instances.getSelectedRows();\n        },\n        getSummaryValues: function (summaryCol, summaryData) {\n            return this.ej2Instances.getSummaryValues(summaryCol, summaryData);\n        },\n        getUidByColumnField: function (field) {\n            return this.ej2Instances.getUidByColumnField(field);\n        },\n        getVisibleColumns: function () {\n            return this.ej2Instances.getVisibleColumns();\n        },\n        goToPage: function (pageNo) {\n            return this.ej2Instances.goToPage(pageNo);\n        },\n        groupCollapseAll: function () {\n            return this.ej2Instances.groupCollapseAll();\n        },\n        groupColumn: function (columnName) {\n            return this.ej2Instances.groupColumn(columnName);\n        },\n        groupExpandAll: function () {\n            return this.ej2Instances.groupExpandAll();\n        },\n        hideColumns: function (keys, hideBy) {\n            return this.ej2Instances.hideColumns(keys, hideBy);\n        },\n        hideScroll: function () {\n            return this.ej2Instances.hideScroll();\n        },\n        hideSpinner: function () {\n            return this.ej2Instances.hideSpinner();\n        },\n        isFrozenGrid: function () {\n            return this.ej2Instances.isFrozenGrid();\n        },\n        openColumnChooser: function (x, y) {\n            return this.ej2Instances.openColumnChooser(x, y);\n        },\n        pdfExport: function (pdfExportProperties, isMultipleExport, pdfDoc, isBlob) {\n            return this.ej2Instances.pdfExport(pdfExportProperties, isMultipleExport, pdfDoc, isBlob);\n        },\n        print: function () {\n            return this.ej2Instances.print();\n        },\n        refresh: function () {\n            return this.ej2Instances.refresh();\n        },\n        refreshColumns: function () {\n            return this.ej2Instances.refreshColumns();\n        },\n        refreshHeader: function () {\n            return this.ej2Instances.refreshHeader();\n        },\n        removeMaskRow: function () {\n            return this.ej2Instances.removeMaskRow();\n        },\n        reorderColumnByIndex: function (fromIndex, toIndex) {\n            return this.ej2Instances.reorderColumnByIndex(fromIndex, toIndex);\n        },\n        reorderColumnByTargetIndex: function (fieldName, toIndex) {\n            return this.ej2Instances.reorderColumnByTargetIndex(fieldName, toIndex);\n        },\n        reorderColumns: function (fromFName, toFName) {\n            return this.ej2Instances.reorderColumns(fromFName, toFName);\n        },\n        reorderRows: function (fromIndexes, toIndex) {\n            return this.ej2Instances.reorderRows(fromIndexes, toIndex);\n        },\n        saveCell: function () {\n            return this.ej2Instances.saveCell();\n        },\n        search: function (searchString) {\n            return this.ej2Instances.search(searchString);\n        },\n        selectCell: function (cellIndex, isToggle) {\n            return this.ej2Instances.selectCell(cellIndex, isToggle);\n        },\n        selectCells: function (rowCellIndexes) {\n            return this.ej2Instances.selectCells(rowCellIndexes);\n        },\n        selectCellsByRange: function (startIndex, endIndex) {\n            return this.ej2Instances.selectCellsByRange(startIndex, endIndex);\n        },\n        selectRow: function (index, isToggle) {\n            return this.ej2Instances.selectRow(index, isToggle);\n        },\n        selectRows: function (rowIndexes) {\n            return this.ej2Instances.selectRows(rowIndexes);\n        },\n        selectRowsByRange: function (startIndex, endIndex) {\n            return this.ej2Instances.selectRowsByRange(startIndex, endIndex);\n        },\n        serverCsvExport: function (url, headers) {\n            return this.ej2Instances.serverCsvExport(url, headers);\n        },\n        serverExcelExport: function (url, headers) {\n            return this.ej2Instances.serverExcelExport(url, headers);\n        },\n        serverPdfExport: function (url, headers) {\n            return this.ej2Instances.serverPdfExport(url, headers);\n        },\n        setCellValue: function (key, field, value) {\n            return this.ej2Instances.setCellValue(key, field, value);\n        },\n        setGridContent: function (element) {\n            return this.ej2Instances.setGridContent(element);\n        },\n        setGridContentTable: function (element) {\n            return this.ej2Instances.setGridContentTable(element);\n        },\n        setGridHeaderContent: function (element) {\n            return this.ej2Instances.setGridHeaderContent(element);\n        },\n        setGridHeaderTable: function (element) {\n            return this.ej2Instances.setGridHeaderTable(element);\n        },\n        setGridPager: function (element) {\n            return this.ej2Instances.setGridPager(element);\n        },\n        setRowData: function (key, rowData) {\n            return this.ej2Instances.setRowData(key, rowData);\n        },\n        showAdaptiveFilterDialog: function () {\n            return this.ej2Instances.showAdaptiveFilterDialog();\n        },\n        showAdaptiveSortDialog: function () {\n            return this.ej2Instances.showAdaptiveSortDialog();\n        },\n        showColumns: function (keys, showBy) {\n            return this.ej2Instances.showColumns(keys, showBy);\n        },\n        showMaskRow: function (axisDirection, dialogElement) {\n            return this.ej2Instances.showMaskRow(axisDirection, dialogElement);\n        },\n        showSpinner: function () {\n            return this.ej2Instances.showSpinner();\n        },\n        sortColumn: function (columnName, direction, isMultiSort) {\n            return this.ej2Instances.sortColumn(columnName, direction, isMultiSort);\n        },\n        startEdit: function () {\n            return this.ej2Instances.startEdit();\n        },\n        ungroupColumn: function (columnName) {\n            return this.ej2Instances.ungroupColumn(columnName);\n        },\n        updateCell: function (rowIndex, field, value) {\n            return this.ej2Instances.updateCell(rowIndex, field, value);\n        },\n        updateExternalMessage: function (message) {\n            return this.ej2Instances.updateExternalMessage(message);\n        },\n        updateRow: function (index, data) {\n            return this.ej2Instances.updateRow(index, data);\n        },\n        updateRowValue: function (key, rowData) {\n            return this.ej2Instances.updateRowValue(key, rowData);\n        },\n    }\n});\nvar GridPlugin = {\n    name: 'ejs-grid',\n    install: function (Vue) {\n        Vue.component(GridPlugin.name, GridComponent);\n        Vue.component(_columns_directive__WEBPACK_IMPORTED_MODULE_4__.ColumnPlugin.name, _columns_directive__WEBPACK_IMPORTED_MODULE_4__.ColumnDirective);\n        Vue.component(_columns_directive__WEBPACK_IMPORTED_MODULE_4__.ColumnsPlugin.name, _columns_directive__WEBPACK_IMPORTED_MODULE_4__.ColumnsDirective);\n        Vue.component(_stacked_column_directive__WEBPACK_IMPORTED_MODULE_3__.StackedColumnPlugin.name, _stacked_column_directive__WEBPACK_IMPORTED_MODULE_3__.StackedColumnDirective);\n        Vue.component(_stacked_column_directive__WEBPACK_IMPORTED_MODULE_3__.StackedColumnsPlugin.name, _stacked_column_directive__WEBPACK_IMPORTED_MODULE_3__.StackedColumnsDirective);\n        Vue.component(_aggregates_directive__WEBPACK_IMPORTED_MODULE_6__.AggregatePlugin.name, _aggregates_directive__WEBPACK_IMPORTED_MODULE_6__.AggregateDirective);\n        Vue.component(_aggregates_directive__WEBPACK_IMPORTED_MODULE_6__.AggregatesPlugin.name, _aggregates_directive__WEBPACK_IMPORTED_MODULE_6__.AggregatesDirective);\n        Vue.component(_aggregate_columns_directive__WEBPACK_IMPORTED_MODULE_5__.AggregateColumnPlugin.name, _aggregate_columns_directive__WEBPACK_IMPORTED_MODULE_5__.AggregateColumnDirective);\n        Vue.component(_aggregate_columns_directive__WEBPACK_IMPORTED_MODULE_5__.AggregateColumnsPlugin.name, _aggregate_columns_directive__WEBPACK_IMPORTED_MODULE_5__.AggregateColumnsDirective);\n    }\n};\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-vue-grids/src/grid/grid.component.js?");

/***/ })

}]);