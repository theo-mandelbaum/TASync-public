"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkej2_vue_samples"] = self["webpackChunkej2_vue_samples"] || []).push([["chunk-vendors-node_modules_syncfusion_ej2-spreadsheet_src_workbook_common_i"],{

/***/ "./node_modules/@syncfusion/ej2-spreadsheet/src/workbook/common/internalization.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-spreadsheet/src/workbook/common/internalization.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   checkIsNumberAndGetNumber: () => (/* binding */ checkIsNumberAndGetNumber),\n/* harmony export */   parseThousandSeparator: () => (/* binding */ parseThousandSeparator)\n/* harmony export */ });\n/* harmony import */ var _common_index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common/index */ \"./node_modules/@syncfusion/ej2-spreadsheet/src/workbook/common/index.js\");\n/* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @syncfusion/ej2-base */ \"./node_modules/@syncfusion/ej2-base/index.js\");\n\n\n/**\n * Check the value of the cell is number with thousand separator and currency symbol and returns the parsed value.\n *\n * @param {CellModel} cell - Specifies the cell.\n * @param {string} locale - Specifies the locale.\n * @param {string} groupSep - Specifies the group separator.\n * @param {string} decimalSep - Specifies the decimal separator.\n * @param {string} currencySym - Specifies the currency Symbol.\n * @param {boolean} isFractionalType - Defines whether the value is a fractional type or not.\n * @param {boolean} checkCurrency - Specifies the currency check.\n * @returns {Object} - returns the parsed value.\n * @hidden\n */\nfunction checkIsNumberAndGetNumber(cell, locale, groupSep, decimalSep, currencySym, isFractionalType, checkCurrency) {\n    var cellValue = cell.value;\n    if (cellValue && typeof cellValue === 'string') {\n        if (cellValue.includes('\\n')) {\n            return { isNumber: false, value: cellValue };\n        }\n        if ((0,_common_index__WEBPACK_IMPORTED_MODULE_0__.isNumber)(cellValue)) {\n            return { isNumber: true, value: cellValue };\n        }\n        if (currencySym && cellValue.includes(currencySym) && (checkCurrency || cell.format.includes(currencySym) || cell.format.includes('$'))) {\n            cellValue = cellValue.replace(currencySym, '').trim();\n        }\n        if (groupSep && cellValue.includes(groupSep) && parseThousandSeparator(cellValue, locale, groupSep, decimalSep)) {\n            cellValue = cellValue.split(groupSep).join('').trim();\n        }\n        if (!decimalSep) {\n            decimalSep = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.getNumericObject)(locale).decimal;\n        }\n        if (decimalSep !== '.' && cellValue.includes(decimalSep)) {\n            cellValue = cellValue.replace(decimalSep, '.').trim();\n        }\n        if ((0,_common_index__WEBPACK_IMPORTED_MODULE_0__.isNumber)(cellValue)) {\n            return { isNumber: true, value: cellValue };\n        }\n        if (isFractionalType && cellValue.split('/').length === 2) {\n            try {\n                var splittedVal = cellValue.split(' ');\n                if (splittedVal.length === 2 && splittedVal[0].split('/').length === 1) {\n                    var result = (0,_common_index__WEBPACK_IMPORTED_MODULE_0__.evaluate)(splittedVal[0]);\n                    var result1 = (0,_common_index__WEBPACK_IMPORTED_MODULE_0__.evaluate)(splittedVal[1]);\n                    cellValue = result + result1;\n                }\n                else {\n                    cellValue = (0,_common_index__WEBPACK_IMPORTED_MODULE_0__.evaluate)(cellValue);\n                }\n                return { isNumber: true, value: cellValue };\n            }\n            catch (error) {\n                return { isNumber: false, value: cellValue };\n            }\n        }\n    }\n    else if ((0,_common_index__WEBPACK_IMPORTED_MODULE_0__.isNumber)(cellValue)) {\n        return { isNumber: true, value: cellValue };\n    }\n    return { isNumber: false, value: cellValue };\n}\n/**\n * @param {string} value - Specifies the value.\n * @param {string} locale - Specifies the locale.\n * @param {string} groupSep - Specifies the group separator.\n * @param {string} decimalSep - Specifies the decimal separator.\n * @returns {boolean} - Returns parsed thousand separator.\n * @hidden\n */\nfunction parseThousandSeparator(value, locale, groupSep, decimalSep) {\n    var isParsed = false;\n    var number = 123456;\n    var parsedNum = number.toLocaleString(locale);\n    var splitedNum = parsedNum.split(groupSep).reverse();\n    var splitedValue = value.split(decimalSep)[0].split(groupSep);\n    for (var i = 0; i < splitedValue.length; i++) {\n        if (i === splitedValue.length - 1) {\n            isParsed = splitedValue[i].length === splitedNum[0].length;\n        }\n        else {\n            isParsed = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isUndefined)(splitedNum[1]) && (i === 0 ? splitedValue[i].length <= splitedNum[1].length :\n                splitedValue[i].length === splitedNum[1].length);\n        }\n        if (!isParsed) {\n            break;\n        }\n    }\n    return isParsed;\n}\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-spreadsheet/src/workbook/common/internalization.js?");

/***/ }),

/***/ "./node_modules/@syncfusion/ej2-spreadsheet/src/workbook/common/math.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-spreadsheet/src/workbook/common/math.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   dateToInt: () => (/* binding */ dateToInt),\n/* harmony export */   evaluate: () => (/* binding */ evaluate),\n/* harmony export */   getGcd: () => (/* binding */ getGcd),\n/* harmony export */   intToDate: () => (/* binding */ intToDate),\n/* harmony export */   isDateTime: () => (/* binding */ isDateTime),\n/* harmony export */   isNumber: () => (/* binding */ isNumber),\n/* harmony export */   parseIntValue: () => (/* binding */ parseIntValue),\n/* harmony export */   toDate: () => (/* binding */ toDate),\n/* harmony export */   toFraction: () => (/* binding */ toFraction)\n/* harmony export */ });\n/* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @syncfusion/ej2-base */ \"./node_modules/@syncfusion/ej2-base/index.js\");\n\n/**\n * @hidden\n * @param {number} val - Specifies the val.\n * @returns {string} - To get Fraction.\n */\nfunction toFraction(val) {\n    var strVal = val.toString();\n    if (val === parseInt(strVal, 10)) {\n        return parseInt(strVal, 10) + '  ';\n    }\n    else {\n        var top_1 = strVal.indexOf('.') > -1 ? strVal.split('.')[1] : 0;\n        var bottom = Math.pow(10, top_1.toString().replace('-', '').length);\n        var abs = Math.abs(getGcd(top_1, bottom));\n        return (top_1 / abs) + '/' + (bottom / abs);\n    }\n}\n/**\n * @hidden\n * @param {string | number} a - Specifies the a.\n * @param {string | number} b - Specifies the b.\n * @returns {number} - To get Gcd.\n */\nfunction getGcd(a, b) {\n    a = Number(a);\n    b = Number(b);\n    return (b) ? getGcd(b, a % b) : a;\n}\n/**\n * @hidden\n * @param {number} val - Specifies the value.\n * @returns {Date} - Returns Date.\n */\nfunction intToDate(val) {\n    val = Number(val);\n    val = (val > 0 && val < 1) ? (1 + val) : (val === 0) ? 1 : val;\n    if (val > 60) {\n        val -= 1; // Due to leap year issue of 1900 in MSExcel.\n    }\n    var startDate = new Date('01/01/1900');\n    var startDateUTC = Date.UTC(startDate.getFullYear(), startDate.getMonth(), startDate.getDate(), startDate.getHours(), startDate.getMinutes(), startDate.getSeconds(), startDate.getMilliseconds());\n    return new Date(new Date(((val - 1) * (1000 * 3600 * 24)) + startDateUTC).toUTCString().replace(' GMT', ''));\n}\n/* eslint-disable  @typescript-eslint/no-explicit-any */\n/**\n * @hidden\n * @param {number} val - Specifies the value.\n * @param {boolean} isTime - Specifies the boolean value.\n * @param {boolean} isTimeOnly - Specifies the value is only a time without date.\n * @returns {number} - Returns number.\n */\nfunction dateToInt(val, isTime, isTimeOnly) {\n    var startDate = new Date('01/01/1900');\n    var date = isDateTime(val) ? val : new Date(val);\n    var startDateUTC = Date.UTC(startDate.getFullYear(), startDate.getMonth(), startDate.getDate(), startDate.getHours(), startDate.getMinutes(), startDate.getSeconds(), startDate.getMilliseconds());\n    var dateUTC = Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds());\n    var diffDays = ((dateUTC - startDateUTC) / (1000 * 3600 * 24));\n    return (isTime ? diffDays : parseInt(diffDays.toString(), 10)) + (isTimeOnly ? 0 : (diffDays > 60 ? 2 : 1));\n}\n/**\n * @hidden\n * @param {any} date - Specifies the date.\n * @returns {boolean} - Returns boolean value.\n */\nfunction isDateTime(date) {\n    return Object.prototype.toString.call(date) === '[object Date]' && !isNaN(date.valueOf());\n}\n/**\n * @hidden\n * @param {string} val - Specifies the value.\n * @returns {boolean} - Returns boolean value.\n */\nfunction isNumber(val) {\n    return val - parseFloat(val) >= 0;\n}\n/**\n * @hidden\n * @param {string | number} val - Specifies the value.\n * @returns {string} - Returns converted value.\n */\nfunction evaluate(val) {\n    return Function('\"use strict\";return (' + val + ')')();\n}\n/**\n * @hidden\n * @param {Date | string | number} text - Specifies the text.\n * @param {Internationalization} intl - Specifies the Internationalization.\n * @param {string} locale - Specifies the locale.\n * @param {string} format - Specifies the string.\n * @param {CellModel} cell - Specify the cell.\n * @param {boolean} isDateTime -Specify is DateTime value or not.\n * @returns {ToDateArgs} - Returns Date format.\n */\nfunction toDate(text, intl, locale, format, cell, isDateTime) {\n    var defaultDateFormats = _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.IntlBase.getDependables(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.cldrData, locale, null).dateObject;\n    var availabelDateTimeFormat = defaultDateFormats.dateTimeFormats.availableFormats;\n    var dObj = { dateObj: null, isCustom: false, type: '' };\n    var dateVal;\n    var updateTime = function () {\n        if (dObj.type === 'time') {\n            dObj.dateObj = new Date((dateVal ? dateVal.toDateString() : '01/01/1900') + ' ' + dObj.dateObj.toLocaleTimeString());\n        }\n    };\n    if (format) {\n        dObj.dateObj = intl.parseDate(text, { format: format });\n        if (dObj.dateObj) {\n            dObj.type = text.toString().indexOf(':') > -1 ? 'time' : 'datetime';\n            updateTime();\n            dObj.isCustom = true;\n        }\n    }\n    if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(dObj.dateObj)) {\n        text = text.toString();\n        if (text && text.indexOf('/') > -1 || text.indexOf('-') > 0) {\n            var cFormat = (cell && cell.format) || format;\n            if (cFormat) {\n                var hyphenDate = cFormat.toLowerCase().includes('dd-mm-yy');\n                if (hyphenDate || cFormat.toLowerCase().includes('dd/mm/yy')) {\n                    cFormat = hyphenDate ? 'd-M-y' : 'd/M/y';\n                    dObj.dateObj = intl.parseDate(text, { format: cFormat, skeleton: 'yMd' });\n                    if (dObj.dateObj) {\n                        dObj.type = 'date';\n                        return dObj;\n                    }\n                }\n            }\n        }\n        var parseDateTimeValue = function (text) {\n            if (text.indexOf(':') < 0) {\n                for (var _i = 0, _a = Object.keys(defaultDateFormats.dateFormats); _i < _a.length; _i++) {\n                    var key = _a[_i];\n                    dObj.dateObj = intl.parseDate(text, { format: defaultDateFormats.dateFormats[\"\" + key], skeleton: key });\n                    if (dObj.dateObj) {\n                        dObj.type = 'date';\n                        dObj.isCustom = false;\n                        break;\n                    }\n                }\n            }\n            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(dObj.dateObj)) {\n                var dateTimeFormat = void 0;\n                for (var _b = 0, _c = Object.keys(availabelDateTimeFormat); _b < _c.length; _b++) {\n                    var key = _c[_b];\n                    dateTimeFormat = availabelDateTimeFormat[\"\" + key];\n                    dObj.dateObj = intl.parseDate(text, { format: dateTimeFormat, skeleton: key });\n                    if (!dObj.dateObj && text.indexOf(':') > -1 && dateTimeFormat.indexOf(':') > -1) { // parsing time format without am or pm\n                        dObj.dateObj = intl.parseDate(text, { format: dateTimeFormat.split(' ')[0] });\n                    }\n                    if (dObj.dateObj) {\n                        dObj.type = text.toString().indexOf(':') > -1 ? 'time' : 'datetime';\n                        updateTime();\n                        dObj.isCustom = true;\n                        break;\n                    }\n                }\n            }\n            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(dObj.dateObj)) {\n                for (var _d = 0, _e = Object.keys(defaultDateFormats.timeFormats); _d < _e.length; _d++) {\n                    var key = _e[_d];\n                    dObj.dateObj = intl.parseDate(text, { format: defaultDateFormats.timeFormats[\"\" + key], skeleton: key });\n                    if (dObj.dateObj) {\n                        dObj.type = 'time';\n                        updateTime();\n                        dObj.isCustom = false;\n                        break;\n                    }\n                }\n            }\n        };\n        if (isDateTime) {\n            var dateTimeArr = text.split(' ');\n            if (dateTimeArr.length >= 2) {\n                parseDateTimeValue(dateTimeArr.shift());\n                if (dObj.dateObj) {\n                    dateVal = dObj.dateObj;\n                    dObj.dateObj = null;\n                    parseDateTimeValue(dateTimeArr.join(' '));\n                    if (dObj.dateObj) {\n                        dObj.type = 'datetime';\n                    }\n                }\n            }\n        }\n        else {\n            parseDateTimeValue(text);\n        }\n    }\n    if (text !== '#DIV/0!' && !dObj.dateObj && new Date(text).toString() !== 'Invalid Date') {\n        dObj.dateObj = new Date(text);\n        dObj.type = 'date';\n    }\n    return dObj;\n}\n/**\n * @hidden\n * @param {string} value - Specifies the value.\n * @param {boolean} isPaste - Optional flag indicating whether the value came from a paste action.\n * @param {boolean} isFromExternalPaste - Optional flag indicating whether the value came from a getExternalCells method.\n * @returns { string | number} - ReturnsparseIntValue.\n */\nfunction parseIntValue(value, isPaste, isFromExternalPaste) {\n    if (value && value !== '.' && value !== '-') {\n        var val = value.toString();\n        var maxSafeIntegerLength = Number.MAX_SAFE_INTEGER.toString().length;\n        if (val.startsWith('-')) {\n            val = val.slice(1);\n            val = val.includes('-') ? value : val;\n        }\n        if (/^\\d*\\.?\\d*$/.test(val)) {\n            // If the number is longer than the safe integer length.\n            if (isPaste && (val.length > maxSafeIntegerLength || (isFromExternalPaste && (val.startsWith('0') || val.endsWith('0'))))) {\n                return value; //skip parsefloat to get the precise value while pasting.\n            }\n            else {\n                return parseFloat(value);\n            }\n        }\n    }\n    return value;\n}\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-spreadsheet/src/workbook/common/math.js?");

/***/ }),

/***/ "./node_modules/@syncfusion/ej2-spreadsheet/src/workbook/common/module.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-spreadsheet/src/workbook/common/module.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getWorkbookRequiredModules: () => (/* binding */ getWorkbookRequiredModules)\n/* harmony export */ });\n/**\n * To get Workbook required modules.\n *\n * @hidden\n * @param {Workbook} context - Specifies the context.\n * @param {ModuleDeclaration[]} modules - Specifies the modules.\n * @returns {ModuleDeclaration[]} - To get Workbook required modules.\n */\nfunction getWorkbookRequiredModules(context, modules) {\n    if (modules === void 0) { modules = []; }\n    modules.push({\n        member: 'dataBind',\n        args: [context]\n    });\n    modules.push({\n        member: 'workbookProtectSheet',\n        args: [context]\n    });\n    if (context.allowSave) {\n        modules.push({\n            member: 'workbookSave',\n            args: [context]\n        });\n    }\n    if (context.allowPrint) {\n        modules.push({\n            member: 'print',\n            args: [context]\n        });\n    }\n    if (context.allowOpen) {\n        modules.push({\n            member: 'workbookOpen',\n            args: [context]\n        });\n    }\n    if (context.allowEditing) {\n        modules.push({\n            member: 'workbookEdit',\n            args: [context]\n        });\n        modules.push({\n            member: 'workbookFormula',\n            args: [context]\n        });\n    }\n    if (context.allowNumberFormatting) {\n        modules.push({\n            member: 'workbookNumberFormat',\n            args: [context]\n        });\n    }\n    if (context.allowCellFormatting) {\n        modules.push({\n            member: 'workbookcellformat',\n            args: [context]\n        });\n    }\n    if (context.allowSorting) {\n        modules.push({ member: 'workbookSort', args: [context] });\n    }\n    if (context.allowHyperlink) {\n        modules.push({ member: 'workbookHyperlink', args: [context] });\n    }\n    if (context.allowFiltering) {\n        modules.push({ member: 'workbookFilter', args: [context] });\n    }\n    if (context.allowFindAndReplace) {\n        modules.push({ member: 'workbookfindAndReplace', args: [context] });\n    }\n    if (context.allowInsert) {\n        modules.push({ member: 'workbookinsert', args: [context] });\n    }\n    if (context.allowDelete) {\n        modules.push({ member: 'workbookdelete', args: [context] });\n    }\n    if (context.allowDataValidation) {\n        modules.push({ member: 'workbookDataValidation', args: [context] });\n    }\n    if (context.allowMerge) {\n        modules.push({ member: 'workbookmerge', args: [context] });\n    }\n    if (context.allowCellFormatting) {\n        modules.push({ member: 'workbookConditionalFormatting', args: [context] });\n    }\n    if (context.allowImage) {\n        modules.push({ member: 'workbookImage', args: [context] });\n    }\n    if (context.allowChart) {\n        modules.push({ member: 'workbookChart', args: [context] });\n    }\n    if (context.allowAutoFill) {\n        modules.push({ member: 'workbookautofill', args: [context] });\n    }\n    return modules;\n}\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-spreadsheet/src/workbook/common/module.js?");

/***/ }),

/***/ "./node_modules/@syncfusion/ej2-spreadsheet/src/workbook/common/worker.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-spreadsheet/src/workbook/common/worker.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   executeTaskAsync: () => (/* binding */ executeTaskAsync)\n/* harmony export */ });\n/**\n * Worker task.\n *\n * @param {Object} context - Specify the context.\n * @param {Function | Object} taskFn - Specify the task.\n * @param {Function} callbackFn - Specify the callbackFn.\n * @param {Object[]} data - Specify the data.\n * @param {boolean} preventCallback - Specify the preventCallback.\n * @param {Workbook} parent - Specify the Workbook instance.\n * @returns {WorkerHelper} - Worker task.\n */\nfunction executeTaskAsync(context, taskFn, callbackFn, data, preventCallback, parent) {\n    return new WorkerHelper(context, taskFn, callbackFn, data, preventCallback, parent);\n}\n/**\n * @hidden\n *\n * The `WorkerHelper` module is used to perform multiple actions using Web Worker asynchronously.\n */\nvar WorkerHelper = /** @class */ (function () {\n    /**\n     * Constructor for WorkerHelper module in Workbook library.\n     *\n     * @private\n     * @param {Object} context - Specify the context.\n     * @param {Function | Object} task - Specify the task.\n     * @param {Function} defaultListener - Specify the defaultListener.\n     * @param {Object[]} taskData - Specify the taskData.\n     * @param {boolean} preventCallback - Specify the preventCallback.\n     * @param {Workbook} parent - Specify the Workbook instance.\n     */\n    function WorkerHelper(context, task, defaultListener, taskData, preventCallback, parent) {\n        this.preventCallback = false;\n        this.context = context;\n        this.workerTask = task;\n        this.defaultListener = defaultListener;\n        this.workerData = taskData;\n        this.parent = parent;\n        if (preventCallback) {\n            this.preventCallback = true;\n        }\n        this.initWorker();\n    }\n    /**\n     * To terminate the worker task.\n     *\n     * @private\n     * @returns {void} - To terminate the worker task.\n     */\n    WorkerHelper.prototype.terminate = function () {\n        this.worker.terminate();\n        URL.revokeObjectURL(this.workerUrl);\n    };\n    /**\n     * To initiate the worker.\n     *\n     * @private\n     * @returns {void} - To initiate the worker.\n     */\n    WorkerHelper.prototype.initWorker = function () {\n        var taskBlob = new Blob([this.getFnCode()], { type: 'text/javascript' });\n        this.workerUrl = URL.createObjectURL(taskBlob);\n        this.worker = new Worker(this.workerUrl);\n        this.worker.onmessage = this.messageFromWorker.bind(this);\n        this.worker.onerror = this.onError.bind(this);\n        if (!this.parent.isVue) {\n            this.worker.postMessage(this.workerData);\n        }\n        else {\n            var clonedData = JSON.parse(JSON.stringify(this.workerData));\n            this.worker.postMessage(clonedData);\n        }\n    };\n    /**\n     * Method for getting response from worker.\n     *\n     * @param {MessageEvent} args - Specify the args.\n     * @returns {void} - Method for getting response from worker.\n     * @private\n     */\n    WorkerHelper.prototype.messageFromWorker = function (args) {\n        this.terminate();\n        this.defaultListener.apply(this.context, [args.data]);\n    };\n    /**\n     * Method for getting error message from worker if failed.\n     *\n     * @param {ErrorEvent} args - Specify the args.\n     * @returns {void} - Method for getting error message from worker if failed.\n     * @private\n     */\n    WorkerHelper.prototype.onError = function (args) {\n        this.terminate();\n        if (args.message && args.message.includes('FormData')) {\n            this.defaultListener.apply(this.context, [{ isFormDataError: true }]);\n        }\n        else {\n            throw args.message || args;\n        }\n    };\n    /**\n     * Construct function code for worker.\n     *\n     * @private\n     * @returns {string} -  Construct function code for worker.\n     */\n    WorkerHelper.prototype.getFnCode = function () {\n        var workerCode = '';\n        var i;\n        var keys;\n        var workerFunction = '';\n        var isHaveFunction = false;\n        if (typeof this.workerTask === 'function') {\n            if (this.workerTask.toString().indexOf('function') < 0) {\n                workerFunction = 'function ' + this.workerTask.toString();\n            }\n            else {\n                workerFunction = this.workerTask.toString();\n                isHaveFunction = true;\n            }\n            workerCode += ('self.workerTask = ' + workerFunction + '; \\n');\n        }\n        else {\n            if (typeof this.workerTask === 'object') {\n                keys = Object.keys(this.workerTask);\n                for (i = 0; i < keys.length; i++) {\n                    if (this.workerTask[keys[i]].toString().indexOf('function') < 0) {\n                        workerFunction = 'function ' + this.workerTask[keys[i]].toString();\n                    }\n                    else {\n                        workerFunction = this.workerTask[keys[i]].toString();\n                        isHaveFunction = true;\n                    }\n                    workerCode += ((i === 0 ? 'self.workerTask' : keys[i]) + '= ' + workerFunction + '; \\n');\n                }\n            }\n        }\n        workerCode += 'self.onmessage = ' + (isHaveFunction ? '' : ' function ') +\n            (this.preventCallback ? this.getMessageFn.toString() : this.getCallbackMessageFn.toString()) + '; \\n';\n        return workerCode;\n    };\n    /**\n     * Get default worker task with callback.\n     *\n     * @private\n     * @param {MessageEvent} args - Specify the args.\n     * @returns {void} - Get default worker task without callback.\n     */\n    WorkerHelper.prototype.getCallbackMessageFn = function (args) {\n        postMessage(this.workerTask.apply(this, args.data));\n    };\n    /**\n     * Get default worker task without callback.\n     *\n     * @private\n     * @param {MessageEvent} args - Specify the args.\n     * @returns {void} - Get default worker task without callback.\n     */\n    WorkerHelper.prototype.getMessageFn = function (args) {\n        this.workerTask.apply(this, args.data);\n    };\n    return WorkerHelper;\n}());\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-spreadsheet/src/workbook/common/worker.js?");

/***/ })

}]);