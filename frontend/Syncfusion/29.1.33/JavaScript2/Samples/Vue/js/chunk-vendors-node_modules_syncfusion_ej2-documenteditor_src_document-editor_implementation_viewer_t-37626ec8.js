"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkej2_vue_samples"] = self["webpackChunkej2_vue_samples"] || []).push([["chunk-vendors-node_modules_syncfusion_ej2-documenteditor_src_document-editor_implementation_viewer_t-37626ec8"],{

/***/ "./node_modules/@syncfusion/ej2-documenteditor/src/document-editor/implementation/viewer/text-helper.js":
/*!**************************************************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-documenteditor/src/document-editor/implementation/viewer/text-helper.js ***!
  \**************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TextHelper: () => (/* binding */ TextHelper)\n/* harmony export */ });\n/* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @syncfusion/ej2-base */ \"./node_modules/@syncfusion/ej2-base/index.js\");\n/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../index */ \"./node_modules/@syncfusion/ej2-documenteditor/src/document-editor/implementation/index.js\");\n/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../index */ \"./node_modules/@syncfusion/ej2-documenteditor/src/document-editor/index.js\");\n/* harmony import */ var _editor_editor_helper__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../editor/editor-helper */ \"./node_modules/@syncfusion/ej2-documenteditor/src/document-editor/implementation/editor/editor-helper.js\");\nvar __assign = (undefined && undefined.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\n\n\n\n\n\n/**\n * @private\n */\nvar TextHelper = /** @class */ (function () {\n    function TextHelper(documentHelper) {\n        this.paragraphMarkInfo = {};\n        this.documentHelper = documentHelper;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(documentHelper)) {\n            this.context = documentHelper.containerContext;\n        }\n    }\n    Object.defineProperty(TextHelper.prototype, \"paragraphMark\", {\n        get: function () {\n            return '¶';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TextHelper.prototype, \"lineBreakMark\", {\n        get: function () {\n            return '↲';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    TextHelper.prototype.getEnSpaceCharacter = function () {\n        return String.fromCharCode(8194);\n    };\n    TextHelper.prototype.repeatChar = function (char, count) {\n        var text = '';\n        for (var i = 0; i < count; i++) {\n            text += char;\n        }\n        return text;\n    };\n    TextHelper.prototype.getParagraphMarkWidth = function (characterFormat) {\n        return this.getParagraphMarkSize(characterFormat).Width;\n    };\n    TextHelper.prototype.getParagraphMarkSize = function (characterFormat) {\n        var format = this.getFormatText(characterFormat);\n        if (this.paragraphMarkInfo[\"\" + format]) {\n            return this.paragraphMarkInfo[\"\" + format];\n        }\n        // Gets the text element's width;\n        var width = this.getWidth(this.paragraphMark, characterFormat);\n        // Calculate the text element's height and baseline offset.\n        var textHelper = this.getHeight(characterFormat);\n        var textSizeInfo = {\n            'Width': width, 'Height': textHelper.Height, 'BaselineOffset': textHelper.BaselineOffset\n        };\n        if (characterFormat.hidden) {\n            return textSizeInfo;\n        }\n        return this.paragraphMarkInfo[\"\" + format] = textSizeInfo;\n    };\n    TextHelper.prototype.getTextSize = function (elementBox, characterFormat) {\n        // Gets the text element's width;\n        var textTrimEndWidth = 0;\n        var isRTL = characterFormat.bidi || this.isRTLText(elementBox.text);\n        var text = this.setText(elementBox.text, isRTL, characterFormat.bdo);\n        if (text === '\\r') {\n            text = String.fromCharCode(182);\n        }\n        textTrimEndWidth = this.getWidth(text, characterFormat, elementBox.scriptType);\n        elementBox.width = textTrimEndWidth;\n        // Calculate the text element's height and baseline offset.\n        var textHelper = this.getHeight(characterFormat, elementBox.scriptType);\n        if (!(this.documentHelper.compatibilityMode === 'Word2003' && elementBox.isColumnBreak)) {\n            elementBox.height = textHelper.Height;\n        }\n        elementBox.baselineOffset = textHelper.BaselineOffset;\n        if (elementBox.text[elementBox.text.length - 1] === ' ') {\n            textTrimEndWidth = this.getWidth(_editor_editor_helper__WEBPACK_IMPORTED_MODULE_3__.HelperMethods.trimEnd(elementBox.text), characterFormat, elementBox.scriptType);\n        }\n        elementBox.trimEndWidth = textTrimEndWidth;\n        return textTrimEndWidth;\n    };\n    TextHelper.prototype.getHeight = function (characterFormat, scriptType) {\n        var fontToRender = this.getFontNameToRender(scriptType, characterFormat);\n        // Get character format property as  below predefined structure to make it easy to check and retrieve\n        // Predefined static structure `[FontName];[FontSize];bold;italic` to maintain as key in the collection\n        var key = this.getFormatText(characterFormat, fontToRender);\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.documentHelper.heightInfoCollection[\"\" + key])) {\n            if (characterFormat.hidden) {\n                var heightInfo = __assign({}, this.documentHelper.heightInfoCollection[\"\" + key]);\n                if (heightInfo.Height) {\n                    heightInfo.Height = 0;\n                }\n                return heightInfo;\n            }\n            return this.documentHelper.heightInfoCollection[\"\" + key];\n        }\n        var sizeInfo = this.documentHelper.owner.textMeasureHelper.getHeightInternal(characterFormat, fontToRender);\n        this.documentHelper.heightInfoCollection[\"\" + key] = __assign({}, sizeInfo);\n        if (characterFormat.hidden) {\n            sizeInfo.Height = 0;\n        }\n        return sizeInfo;\n    };\n    TextHelper.prototype.getFormatText = function (characterFormat, fontToRender) {\n        var formatText = '';\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(fontToRender)) {\n            formatText = fontToRender.toLocaleLowerCase();\n        }\n        else {\n            formatText = characterFormat.fontFamily.toLocaleLowerCase();\n        }\n        var isBidi = characterFormat.bidi || characterFormat.complexScript;\n        var font = isBidi ? characterFormat.fontSizeBidi : characterFormat.fontSize;\n        var bold = isBidi ? characterFormat.boldBidi : characterFormat.bold;\n        var italic = isBidi ? characterFormat.italicBidi : characterFormat.italic;\n        formatText += ';' + font;\n        if (bold) {\n            formatText += ';' + 'bold';\n        }\n        if (italic) {\n            formatText += ';' + 'italic';\n        }\n        return formatText;\n    };\n    TextHelper.prototype.measureTextExcludingSpaceAtEnd = function (text, characterFormat, scriptType) {\n        return this.getWidth(_editor_editor_helper__WEBPACK_IMPORTED_MODULE_3__.HelperMethods.trimEnd(text), characterFormat, scriptType);\n    };\n    TextHelper.prototype.getWidth = function (text, characterFormat, scriptType) {\n        if (characterFormat.hidden) {\n            return 0;\n        }\n        if (text.match('\\v')) {\n            text.replace('\\v', this.lineBreakMark);\n        }\n        var bold = '';\n        var italic = '';\n        var fontFamily = '';\n        var isBidi = characterFormat.bidi || characterFormat.complexScript;\n        var fontSize = isBidi ? characterFormat.fontSizeBidi : characterFormat.fontSize;\n        bold = isBidi ? (characterFormat.boldBidi ? 'bold' : '') : (characterFormat.bold ? 'bold' : '');\n        italic = isBidi ? (characterFormat.italicBidi ? 'italic' : '') : (characterFormat.italic ? 'italic' : '');\n        fontFamily = this.getFontNameToRender(scriptType, characterFormat);\n        fontSize = fontSize === 0 ? 0.5 : fontSize / (characterFormat.baselineAlignment === 'Normal' ? 1 : 1.5);\n        this.context.font = bold + ' ' + italic + ' ' + fontSize + 'pt' + ' ' + '\"' + fontFamily + '\"';\n        this.context.letterSpacing = characterFormat.characterSpacing + 'pt';\n        var scaleFactor = (characterFormat.scaling / 100);\n        if (characterFormat.allCaps) {\n            text = text.toUpperCase();\n        }\n        //ES-853789:For combine character we need  to add the base character to get the width of the text.\n        if (text === '\\u0336') {\n            text += 'A';\n        }\n        return Math.abs(this.context.measureText(text).width * scaleFactor);\n    };\n    TextHelper.prototype.setText = function (textToRender, isBidi, bdo, isRender) {\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(isRender)) {\n            isRender = false;\n        }\n        if (textToRender.length === 0) {\n            return '';\n        }\n        var isRtlText = isBidi;\n        if ((!isRtlText && (bdo === 'RTL')) || (isRtlText && (bdo === 'LTR'))) {\n            textToRender = _editor_editor_helper__WEBPACK_IMPORTED_MODULE_3__.HelperMethods.reverseString(textToRender);\n        }\n        else if (isRender && isRtlText && _editor_editor_helper__WEBPACK_IMPORTED_MODULE_3__.HelperMethods.endsWith(textToRender)) {\n            var spaceCount = textToRender.length - _editor_editor_helper__WEBPACK_IMPORTED_MODULE_3__.HelperMethods.trimEnd(textToRender).length;\n            textToRender = _editor_editor_helper__WEBPACK_IMPORTED_MODULE_3__.HelperMethods.addSpace(spaceCount) + _editor_editor_helper__WEBPACK_IMPORTED_MODULE_3__.HelperMethods.trimEnd(textToRender);\n        }\n        return textToRender;\n    };\n    TextHelper.prototype.measureText = function (text, characterFormat, scriptType) {\n        // Gets the text element's width;\n        var width = this.getWidth(text, characterFormat, scriptType);\n        // Calculate the text element's height and baseline offset.\n        var textHelper = this.getHeight(characterFormat, scriptType);\n        return {\n            'Width': width, 'Height': textHelper.Height, 'BaselineOffset': textHelper.BaselineOffset\n        };\n    };\n    TextHelper.prototype.updateTextSize = function (elementBox, paragraph) {\n        if (elementBox.characterFormat.hidden && paragraph.height === 0) {\n            return;\n        }\n        var format = new _index__WEBPACK_IMPORTED_MODULE_1__.WCharacterFormat(undefined);\n        var listCharacterFormat = elementBox.listLevel.characterFormat;\n        var breakCharacterFormat = paragraph.characterFormat;\n        format.fontSize = listCharacterFormat.hasValue('fontSize') ? listCharacterFormat.fontSize : breakCharacterFormat.fontSize;\n        format.fontFamily = listCharacterFormat.hasValue('fontFamily') ? listCharacterFormat.fontFamily : breakCharacterFormat.fontFamily;\n        var bold = '';\n        var italic = '';\n        var baselineAlignment = listCharacterFormat.baselineAlignment === 'Normal' ?\n            breakCharacterFormat.baselineAlignment : listCharacterFormat.baselineAlignment;\n        bold = listCharacterFormat.hasValue('bold') ? listCharacterFormat.bold ? 'bold' : '' : breakCharacterFormat.bold ? 'bold' : '';\n        italic = listCharacterFormat.hasValue('italic') ? listCharacterFormat.italic ? 'italic' : ''\n            : breakCharacterFormat.italic ? 'italic' : '';\n        format.baselineAlignment = baselineAlignment;\n        if (bold) {\n            format.bold = true;\n        }\n        if (italic) {\n            format.italic = true;\n        }\n        var isRTL = format.bidi || this.isRTLText(elementBox.text);\n        var text = this.setText(elementBox.text, isRTL, format.bdo);\n        elementBox.width = this.getWidth(text, format);\n        // Calculate the text element's height and baseline offset.\n        var textHelper = this.getHeight(format);\n        elementBox.height = textHelper.Height;\n        elementBox.baselineOffset = textHelper.BaselineOffset;\n        format.destroy();\n    };\n    TextHelper.prototype.containsSpecialCharAlone = function (text) {\n        /* eslint-disable */\n        var specialChars = '*|.\\:[]{}-`\\;()@&$#%!~?,' + ' ' + \"'\";\n        for (var i = 0; i < text.length; i++) {\n            if (specialChars.indexOf(text.charAt(i)) === -1) {\n                return false;\n            }\n        }\n        return true;\n    };\n    TextHelper.prototype.containsNumberAlone = function (text) {\n        /* eslint-disable */\n        var number = '0123456789';\n        if (text === '') {\n            return false;\n        }\n        for (var i = 0; i < text.length; i++) {\n            if (number.indexOf(text.charAt(i)) === -1) {\n                return false;\n            }\n        }\n        return true;\n    };\n    TextHelper.prototype.containsCombinationText = function (element) {\n        /* eslint-disable */\n        if (element.text.match(/^[0-9]+$/) && element.paragraph.bidi) {\n            return true;\n        }\n        else {\n            return false;\n        }\n    };\n    TextHelper.prototype.inverseCharacter = function (ch) {\n        switch (ch) {\n            //Specify the '('\n            case '(':\n                //Specify the ')'\n                return ')';\n            //Specify the ')'\n            case ')':\n                //Specify the '('\n                return '(';\n            //Specify the '<'\n            case '<':\n                //Specify the '>'\n                return '>';\n            //Specify the '>'\n            case '>':\n                //Specify the '<'\n                return '<';\n            //Specify the '{'\n            case '{':\n                //Specify the '}'\n                return '}';\n            //Specify the '}'\n            case '}':\n                //Specify the '{'\n                return '{';\n            //Specify the '['\n            case '[':\n                //Specify the ']'\n                return ']';\n            //Specify the ']'\n            case ']':\n                //Specify the '['\n                return '[';\n            default:\n                return ch;\n        }\n    };\n    TextHelper.prototype.containsSpecialChar = function (text) {\n        var specialChars = '*|.\\:[]{}-`\\;()@&$#%!~?' + ' ';\n        for (var i = 0; i < text.length; i++) {\n            if (specialChars.indexOf(text.charAt(i)) !== -1) {\n                return true;\n            }\n        }\n        return false;\n    };\n    /**\n     * @private\n     * @param {string} text - Specifies the text\n     * @returns {boolean} - Returns true if given text it right to left.\n     */\n    TextHelper.prototype.isRTLText = function (text) {\n        var isRTL = false;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(text)) {\n            for (var i = 0; i < text.length; i++) {\n                var temp = text[i];\n                if ((temp >= String.fromCharCode(1424) && temp <= String.fromCharCode(1535)) ////Script-Hebr, Hebrew characters https://en.wikipedia.org/wiki/Hebrew_alphabet#Unicode_and_HTML (https://en.wikipedia.org/wiki/Hebrew_(Unicode_block))\n                    || (temp >= String.fromCharCode(64285) && temp <= String.fromCharCode(64335)) //Script-Hebr, Hebrew Alphabetic Presentation Forms characters https://en.wikipedia.org/wiki/Alphabetic_Presentation_Forms \n                    || (temp >= String.fromCharCode(1536) && temp <= String.fromCharCode(1791)) //Arabic - Urdu characters\n                    || (temp >= String.fromCharCode(1872) && temp <= String.fromCharCode(1919)) //Arabic - Urdu characters\n                    || (temp >= String.fromCharCode(2208) && temp <= String.fromCharCode(2303)) //Arabic characters\n                    || (temp >= String.fromCharCode(64336) && temp <= String.fromCharCode(65023)) //Arabic - Urdu characters\n                    || (temp >= String.fromCharCode(65136) && temp <= String.fromCharCode(65279)) //Arabic - Urdu characters\n                    || (temp >= String.fromCharCode(43392) && temp <= String.fromCharCode(43487)) //Javanese characters\n                    || (temp >= String.fromCharCode(1792) && temp <= String.fromCharCode(1871)) //Syriac characters\n                    || (temp >= String.fromCharCode(1920) && temp <= String.fromCharCode(1983)) //Thaana characters\n                    || (temp >= String.fromCharCode(2112) && temp <= String.fromCharCode(2143)) //Mandiac characters\n                    || (temp >= String.fromCharCode(1984) && temp <= String.fromCharCode(2047)) //N'Ko characters\n                    || (temp >= String.fromCharCode(2048) && temp <= String.fromCharCode(2111)) //Samaritan characters\n                    //Tifinag characters \n                    || (temp >= String.fromCharCode(11568) && temp <= String.fromCharCode(11647))) {\n                    isRTL = true;\n                    break;\n                }\n            }\n        }\n        return isRTL;\n    };\n    /**\n     * @private\n     * @param {string} text - Specifies the text\n     * @param {FontScriptType} scriptType - Specifies the script type\n     * @returns {boolean} - Returns true if given text is unicode text.\n     */\n    TextHelper.prototype.isUnicodeText = function (text, scriptType) {\n        var isUnicode = false;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(text)) {\n            for (var i = 0; i < text.length; i++) {\n                var temp = text[i];\n                if (((temp >= '\\u3000' && temp <= '\\u30ff') // Japanese characters\n                    || (temp >= '\\uff00' && temp <= '\\uffef') // Full-width roman characters and half-width katakana\n                    || (temp >= '\\u4e00' && temp <= '\\u9faf') //CJK unifed ideographs - Common and uncommon kanji\n                    || (temp >= '\\u3400' && temp <= '\\u4dbf') //CJK unified ideographs Extension A - Rare kanji\n                    || (temp >= '\\uac00' && temp <= '\\uffef') //Korean Hangul characters\n                    || (temp >= '\\u0d80' && temp <= '\\u0dff')) && scriptType !== 0) //Sinhala characters\n                 {\n                    isUnicode = true;\n                    break;\n                }\n            }\n        }\n        return isUnicode;\n    };\n    /**\n     * @private\n     * @param {string} text - Specifies the text\n     * @returns {RtlInfo} - Returns the text info.\n     */\n    TextHelper.prototype.getRtlLanguage = function (text) {\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(text) || text === '') {\n            return { isRtl: false, id: 0 };\n        }\n        if (text >= String.fromCharCode(1424) && text <= String.fromCharCode(1535)) {\n            return { isRtl: true, id: 1 };\n            //Arabic - Urdu characters\n        }\n        else if ((text >= String.fromCharCode(1536) && text <= String.fromCharCode(1791))\n            || (text >= String.fromCharCode(1872) && text <= String.fromCharCode(1919))\n            || (text >= String.fromCharCode(2208) && text <= String.fromCharCode(2303))\n            || (text >= String.fromCharCode(64336) && text <= String.fromCharCode(65023))\n            || (text >= String.fromCharCode(65136) && text <= String.fromCharCode(65279))) {\n            return { isRtl: true, id: 2 };\n        }\n        else if (text >= String.fromCharCode(43392) && text <= String.fromCharCode(43487)) {\n            return { isRtl: true, id: 3 };\n        }\n        else if (text >= String.fromCharCode(1792) && text <= String.fromCharCode(1871)) {\n            return { isRtl: true, id: 4 };\n        }\n        else if (text >= String.fromCharCode(1920) && text <= String.fromCharCode(1983)) {\n            return { isRtl: true, id: 5 };\n        }\n        else if (text >= String.fromCharCode(2112) && text <= String.fromCharCode(2143)) {\n            return { isRtl: true, id: 6 };\n        }\n        else if (text >= String.fromCharCode(1984) && text <= String.fromCharCode(2047)) {\n            return { isRtl: true, id: 7 };\n        }\n        else if (text >= String.fromCharCode(2048) && text <= String.fromCharCode(2111)) {\n            return { isRtl: true, id: 8 };\n        }\n        else if (text >= String.fromCharCode(11568) && text <= String.fromCharCode(11647)) {\n            return { isRtl: true, id: 9 };\n        }\n        return { isRtl: false, id: 0 };\n    };\n    /**\n     * @private\n     */\n    TextHelper.prototype.splitTextByConsecutiveLtrAndRtl = function (text, isTextBidi, isRTLLang, characterRangeTypes, isPrevLTRText, hasRTLCharacter) {\n        var charTypeIndex = characterRangeTypes.length;\n        var splittedText = [];\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(text) || text === '') {\n            return splittedText;\n        }\n        var lastLtrIndex = -1;\n        var ltrText = '';\n        var rtlText = '';\n        var wordSplitChars = '';\n        var numberText = '';\n        for (var i = 0; i < text.length; i++) {\n            var currentCharacterType = 0;\n            var separateEachWordSplitChars = false;\n            if ((!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(isPrevLTRText.value) ? !isPrevLTRText.value : isTextBidi) && this.isNumber(text[i])) {\n                numberText += text[i];\n                currentCharacterType = 4;\n            }\n            else if (this.isWordSplitChar(text[i])) {\n                currentCharacterType = 2;\n                if (separateEachWordSplitChars = (isTextBidi || (text.charCodeAt(i) == 32 && wordSplitChars == ''))) {\n                    wordSplitChars += text[i];\n                }\n                else {\n                    wordSplitChars += text[i];\n                }\n            }\n            else if (this.isRTLText(text[i]) && !this.isNumber(text[i])) {\n                isPrevLTRText.value = false;\n                hasRTLCharacter.value = true;\n                rtlText += text[i];\n                currentCharacterType = 1;\n            }\n            else {\n                isPrevLTRText.value = true;\n                ltrText += text[i];\n            }\n            if (numberText != '' && currentCharacterType != 4) {\n                splittedText.push(numberText);\n                characterRangeTypes.push(_index__WEBPACK_IMPORTED_MODULE_2__.CharacterRangeType.Number);\n                numberText = '';\n            }\n            if (rtlText != '' && currentCharacterType != 1) {\n                splittedText.push(rtlText);\n                characterRangeTypes.push(_index__WEBPACK_IMPORTED_MODULE_2__.CharacterRangeType.RightToLeft);\n                rtlText = '';\n            }\n            if (ltrText != '' && currentCharacterType != 0) {\n                splittedText.push(ltrText);\n                lastLtrIndex = splittedText.length - 1;\n                characterRangeTypes.push(_index__WEBPACK_IMPORTED_MODULE_2__.CharacterRangeType.LeftToRight);\n                ltrText = '';\n            }\n            if (wordSplitChars != '' && (currentCharacterType != 2 || separateEachWordSplitChars)) {\n                splittedText.push(wordSplitChars);\n                characterRangeTypes.push(_index__WEBPACK_IMPORTED_MODULE_2__.CharacterRangeType.WordSplit);\n                wordSplitChars = '';\n            }\n        }\n        if (numberText != '') {\n            splittedText.push(numberText);\n            characterRangeTypes.push(_index__WEBPACK_IMPORTED_MODULE_2__.CharacterRangeType.Number);\n        }\n        else if (rtlText != '') {\n            splittedText.push(rtlText);\n            characterRangeTypes.push(_index__WEBPACK_IMPORTED_MODULE_2__.CharacterRangeType.RightToLeft);\n        }\n        else if (ltrText != '') {\n            splittedText.push(ltrText);\n            lastLtrIndex = splittedText.length - 1;\n            characterRangeTypes.push(_index__WEBPACK_IMPORTED_MODULE_2__.CharacterRangeType.LeftToRight);\n        }\n        else if (wordSplitChars != '') {\n            splittedText.push(wordSplitChars);\n            characterRangeTypes.push(_index__WEBPACK_IMPORTED_MODULE_2__.CharacterRangeType.WordSplit);\n        }\n        if (hasRTLCharacter.value || (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(isPrevLTRText.value) && !isPrevLTRText.value)) {\n            for (var i = 1; i < splittedText.length; i++) {\n                //Combines the consecutive LTR, RTL, and Number (Number get combined only if it's splitted by non reversing characters (.,:)) \n                //along with single in-between word split character.\n                var charType = characterRangeTypes[i + charTypeIndex];\n                if (charType == _index__WEBPACK_IMPORTED_MODULE_2__.CharacterRangeType.WordSplit && splittedText[i].length == 1\n                    && i + charTypeIndex + 1 < characterRangeTypes.length\n                    && characterRangeTypes[i + charTypeIndex - 1] != _index__WEBPACK_IMPORTED_MODULE_2__.CharacterRangeType.WordSplit\n                    && (characterRangeTypes[i + charTypeIndex - 1] != _index__WEBPACK_IMPORTED_MODULE_2__.CharacterRangeType.Number\n                        //Else handled to combine consecutive number when text bidi is false and middle word split character is not white space.\n                        || TextHelper.isNumberNonReversingCharacter(splittedText[i], isTextBidi))\n                    && characterRangeTypes[i + charTypeIndex - 1] == characterRangeTypes[i + charTypeIndex + 1]) {\n                    splittedText[i - 1] = splittedText[i - 1] + splittedText[i] + splittedText[i + 1];\n                    splittedText.splice(i, 1);\n                    splittedText.splice(i, 1);\n                    characterRangeTypes.splice(i + charTypeIndex, 1);\n                    characterRangeTypes.splice(i + charTypeIndex, 1);\n                    i--;\n                }\n            }\n        }\n        else if (lastLtrIndex != -1) {\n            if (isTextBidi) {\n                for (var i = 1; i < lastLtrIndex; i++) {\n                    //Combines the first and last LTR along with all in-between splited text's.\n                    var charType = characterRangeTypes[i + charTypeIndex];\n                    if (charType == _index__WEBPACK_IMPORTED_MODULE_2__.CharacterRangeType.WordSplit && i < lastLtrIndex\n                        && characterRangeTypes[i + charTypeIndex - 1] == _index__WEBPACK_IMPORTED_MODULE_2__.CharacterRangeType.LeftToRight) {\n                        ltrText = '';\n                        for (var j = i + 1; j <= lastLtrIndex; j++) {\n                            ltrText += splittedText[j];\n                            splittedText.splice(j, 1);\n                            characterRangeTypes.splice(j + charTypeIndex, 1);\n                            j--;\n                            lastLtrIndex--;\n                        }\n                        splittedText[i - 1] = splittedText[i - 1] + splittedText[i] + ltrText;\n                        splittedText.splice(i, 1);\n                        characterRangeTypes.splice(i + charTypeIndex, 1);\n                        i--;\n                        lastLtrIndex--;\n                    }\n                }\n            }\n            else {\n                //Return the input text if text bidi is false.\n                splittedText.length = 0;\n                splittedText.push(text);\n            }\n        }\n        else if (!isTextBidi) {\n            //Return the input text if text bidi is false.\n            splittedText.length = 0;\n            splittedText.push(text);\n        }\n        if (isTextBidi) {\n            for (var i = 1; i < splittedText.length; i++) {\n                //Combines the consecutive LTR, RTL, and Number (Number get combined only if it's splitted by non reversing characters (.,:)\n                //or if it's lang attribute is represent a RTL language)\n                //along with single in-between number non reversing word split character.\n                var charType = characterRangeTypes[i + charTypeIndex];\n                if (charType == _index__WEBPACK_IMPORTED_MODULE_2__.CharacterRangeType.WordSplit && splittedText[i].length == 1\n                    && i + charTypeIndex + 1 < characterRangeTypes.length\n                    && characterRangeTypes[i + charTypeIndex - 1] != _index__WEBPACK_IMPORTED_MODULE_2__.CharacterRangeType.WordSplit\n                    && (characterRangeTypes[i + charTypeIndex - 1] != _index__WEBPACK_IMPORTED_MODULE_2__.CharacterRangeType.Number\n                        || TextHelper.isNumberNonReversingCharacter(splittedText[i], isTextBidi) || !isRTLLang)\n                    && characterRangeTypes[i + charTypeIndex - 1] == characterRangeTypes[i + charTypeIndex + 1]) {\n                    splittedText[i - 1] = splittedText[i - 1] + splittedText[i] + splittedText[i + 1];\n                    splittedText.splice(i, 1);\n                    splittedText.splice(i, 1);\n                    characterRangeTypes.splice(i + charTypeIndex, 1);\n                    characterRangeTypes.splice(i + charTypeIndex, 1);\n                    i--;\n                }\n                //Combines the Number along with single non-word split characters (% $ #).\n                else if (charType == _index__WEBPACK_IMPORTED_MODULE_2__.CharacterRangeType.WordSplit\n                    && characterRangeTypes[i + charTypeIndex - 1] == _index__WEBPACK_IMPORTED_MODULE_2__.CharacterRangeType.Number\n                    && this.isNonWordSplitCharacter(splittedText[i]) && !isRTLLang) {\n                    splittedText[i - 1] = splittedText[i - 1] + splittedText[i];\n                    splittedText.splice(i, 1);\n                    characterRangeTypes.splice(i + charTypeIndex, 1);\n                    i--;\n                }\n                //Combines the consecutive LTR and Number\n                else if (charType == _index__WEBPACK_IMPORTED_MODULE_2__.CharacterRangeType.LeftToRight\n                    && (characterRangeTypes[i + charTypeIndex - 1] == _index__WEBPACK_IMPORTED_MODULE_2__.CharacterRangeType.Number\n                        || characterRangeTypes[i + charTypeIndex - 1] == _index__WEBPACK_IMPORTED_MODULE_2__.CharacterRangeType.LeftToRight)) {\n                    splittedText[i - 1] = splittedText[i - 1] + splittedText[i];\n                    characterRangeTypes[i + charTypeIndex - 1] = _index__WEBPACK_IMPORTED_MODULE_2__.CharacterRangeType.LeftToRight;\n                    splittedText.splice(i, 1);\n                    characterRangeTypes.splice(i + charTypeIndex, 1);\n                    i--;\n                }\n            }\n        }\n        return splittedText;\n    };\n    /**\n     * @private\n     */\n    TextHelper.prototype.isRightToLeftLanguage = function (lang) {\n        return (lang == 14337 || lang == 15361 || lang == 5121 || lang == 3073 || lang == 2049 ||\n            lang == 11265 || lang == 13313 || lang == 12289 || lang == 4097 || lang == 8193 ||\n            lang == 16385 || lang == 1025 || lang == 10241 || lang == 7169 || lang == 9217 || lang == 10655);\n    };\n    TextHelper.prototype.isNumber = function (ch) {\n        if (!isNaN(parseInt(ch, 10))) {\n            //This logic works for universal digits 0 to 9.\n            return true;\n        }\n        else if (ch >= String.fromCharCode(1632) && ch <= String.fromCharCode(1641)) {\n            //This logic works for ARABIC-INDIC DIGIT\n            return true;\n        }\n        else if (ch >= String.fromCharCode(1776) && ch <= String.fromCharCode(1785)) {\n            //This logic works for EXTENDED ARABIC-INDIC DIGIT\n            return true;\n        }\n        else {\n            //TODO: Extend this for language specific \n            return false;\n        }\n    };\n    /**\n     * @private\n     */\n    TextHelper.prototype.isWordSplitChar = function (character) {\n        for (var i = 0; i < TextHelper.wordSplitCharacters.length; i++) {\n            if (TextHelper.wordSplitCharacters[i] === character) {\n                return true;\n            }\n        }\n        return false;\n    };\n    /**\n     * @private\n     */\n    TextHelper.isNumberNonReversingCharacter = function (character, isTextBidi) {\n        for (var i = 0; i < TextHelper.numberNonReversingCharacters.length; i++) {\n            var ch = TextHelper.numberNonReversingCharacters[i];\n            if (character[0] == ch && (ch.charCodeAt(0) == 47 ? !isTextBidi : true)) {\n                return true;\n            }\n        }\n        return false;\n    };\n    /**\n     * @private\n     */\n    TextHelper.prototype.isNonWordSplitCharacter = function (character) {\n        var isNonWordSplitChar = false;\n        for (var i = 0; i < character.length; i++) {\n            var charCode = character.charCodeAt(i);\n            //Consider a (% $ #) as non-word split characters\n            if (charCode == 35 || charCode == 36 || charCode == 37) {\n                isNonWordSplitChar = true;\n            }\n            else {\n                isNonWordSplitChar = false;\n                break;\n            }\n        }\n        return isNonWordSplitChar;\n    };\n    TextHelper.prototype.getFontNameToRender = function (scriptType, charFormat) {\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(scriptType)) {\n            if (charFormat.bidi || charFormat.complexScript) {\n                return this.getFontNameBidiToRender(scriptType, charFormat);\n            }\n            else {\n                if ((this.isEastAsiaScript(scriptType) || (charFormat.fontHintType === 'EastAsia' && scriptType === _index__WEBPACK_IMPORTED_MODULE_2__.FontScriptType.SpecialCharacter)) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(charFormat.fontFamilyFarEast))\n                    return this.getFontNameEAToRender(scriptType, charFormat);\n                else\n                    return this.getFontNameAsciiToRender(scriptType, charFormat);\n            }\n        }\n        else {\n            return charFormat.fontFamily;\n        }\n    };\n    /// <summary>\n    /// Check whether specified script is EastAsia script or not.\n    /// </summary>\n    /// <param name=\"scriptType\">Represent a FontScriptType to check.</param>\n    /// <returns></returns>\n    TextHelper.prototype.isEastAsiaScript = function (scriptType) {\n        return scriptType == _index__WEBPACK_IMPORTED_MODULE_2__.FontScriptType.Japanese || scriptType == _index__WEBPACK_IMPORTED_MODULE_2__.FontScriptType.Korean\n            || scriptType == _index__WEBPACK_IMPORTED_MODULE_2__.FontScriptType.Chinese;\n    };\n    /// <summary>\n    /// Get the font name East Asia to render\n    /// </summary>\n    /// <param name=\"scriptType\">Represent a CharacterRangeType.</param>\n    /// <returns>Returns a eastAsia font name to draw the text.</returns>\n    TextHelper.prototype.getFontNameEAToRender = function (scriptType, charFormat) {\n        var fontName = charFormat.fontFamilyFarEast;\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(fontName) || _editor_editor_helper__WEBPACK_IMPORTED_MODULE_3__.HelperMethods.isThemeFont(fontName))\n            return this.getFontNameFromTheme(charFormat, fontName, scriptType, \"EastAsia\");\n        else\n            return fontName;\n    };\n    TextHelper.prototype.getFontNameAsciiToRender = function (scriptType, charFormat) {\n        var fontName = charFormat.fontFamilyAscii;\n        if (_editor_editor_helper__WEBPACK_IMPORTED_MODULE_3__.HelperMethods.isThemeFont(fontName))\n            return this.getFontNameFromTheme(charFormat, fontName, scriptType, \"Default\");\n        else\n            return charFormat.fontFamily;\n    };\n    TextHelper.prototype.getFontNameBidiToRender = function (scriptType, charFormat) {\n        //If CharacterFormat.Bidi is true, then font is determined in the order: FontNameBidi, Script-Arab, font scheme(latin, ea, cs), default font (Times New Roman)\n        //CharacterRangeType of a text and FontHintType (IdctHint) has no impact in this behavior.\n        //Note: Behavior is traced using Word version 1808 (build 10730.20304)\n        //Determines the font nmae to used for RTL characters based on its script from direct or font scheme (Document theme file)\n        var fontName = charFormat.fontFamilyBidi;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(fontName) || _editor_editor_helper__WEBPACK_IMPORTED_MODULE_3__.HelperMethods.isThemeFont(fontName))\n            return this.getFontNameFromTheme(charFormat, fontName, scriptType, \"CS\");\n        else\n            return fontName;\n    };\n    TextHelper.prototype.getFontNameFromTheme = function (charFormat, fontName, scriptType, hintType) {\n        var fontScheme;\n        if (this.documentHelper.hasThemes && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.documentHelper.themes) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isUndefined)(this.documentHelper.themes.fontScheme))\n            fontScheme = this.documentHelper.themes.fontScheme;\n        if (fontName == \"majorAscii\" || fontName == \"majorBidi\" || fontName == \"majorEastAsia\" || fontName == \"majorHAnsi\") {\n            var majorFontScheme = void 0;\n            if (fontScheme != null && fontScheme.majorFontScheme != null) {\n                majorFontScheme = fontScheme.majorFontScheme;\n            }\n            fontName = this.updateFontNameFromTheme(charFormat, majorFontScheme, scriptType, fontName, hintType);\n        }\n        else if (fontName == \"minorAscii\" || fontName == \"minorBidi\" || fontName == \"minorEastAsia\" || fontName == \"minorHAnsi\") {\n            var minorFontScheme = void 0;\n            if (fontScheme != null && fontScheme.majorFontScheme != null) {\n                minorFontScheme = fontScheme.minorFontScheme;\n            }\n            fontName = this.updateFontNameFromTheme(charFormat, minorFontScheme, scriptType, fontName, hintType);\n        }\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(fontName) || _editor_editor_helper__WEBPACK_IMPORTED_MODULE_3__.HelperMethods.isThemeFont(fontName))\n            //Gets the default font (Times New Roman)\n            fontName = _index__WEBPACK_IMPORTED_MODULE_2__.defaultFont;\n        return fontName;\n    };\n    /// <summary>\n    /// Update a font name from theme, based on FontHintType.\n    /// </summary>\n    /// <param name=\"majorMinorFontScheme\"></param>\n    /// <param name=\"scriptType\"></param>\n    /// <param name=\"fontName\"></param>\n    /// <param name=\"hintType\"></param>\n    TextHelper.prototype.updateFontNameFromTheme = function (charFormat, majorMinorFontScheme, scriptType, fontName, hintType) {\n        //Script-Arab, font scheme(latin, ea, cs), default font (Times New Roman)\n        var fontNameFromTheme = \"\";\n        //Gets font from font scheme(latin, ea, cs) of document theme.\n        if (majorMinorFontScheme != null && majorMinorFontScheme.fontSchemeList != null\n            && majorMinorFontScheme.fontSchemeList.length > 0) {\n            majorMinorFontScheme.fontSchemeList.forEach(function (fontSchemeStruct) {\n                if (fontSchemeStruct.name == \"cs\" && (fontName == \"majorBidi\" || fontName == \"minorBidi\"))\n                    fontNameFromTheme = fontSchemeStruct.typeface;\n                else if (fontSchemeStruct.name == \"ea\" && (fontName == \"majorEastAsia\" || fontName == \"minorEastAsia\"))\n                    fontNameFromTheme = fontSchemeStruct.typeface;\n                else if (fontSchemeStruct.name == \"latin\" && (fontName == \"majorAscii\" || fontName == \"majorHAnsi\"\n                    || fontName == \"minorAscii\" || fontName == \"minorHAnsi\"))\n                    fontNameFromTheme = fontSchemeStruct.typeface;\n            });\n        }\n        if (majorMinorFontScheme != null && majorMinorFontScheme.fontTypeface != null) {\n            if (hintType == \"CS\") {\n                // //If it's an complex script and \"themeFontLang\" element has a \"bidi\" attribute, then we need to locate the font name\n                // //from the \"theme.xml\" for the language specified by the bidi attribute\n                // if (charFormat.complexScript && Document != null && Document.Settings.ThemeFontLanguages != null &&\n                //     Document.Settings.ThemeFontLanguages.HasValue(WCharacterFormat.LidBiKey))\n                // {\n                //     fontName = this.getFontNameWithFontScript(majorMinorFontScheme, Document.Settings.ThemeFontLanguages.LocaleIdBidi, hintType);\n                //     if (fontName != null)\n                //         fontNameFromTheme = fontName;\n                // }\n                //If the font name is mentioned as Ascii or HAnsi, then we need to get the font name from Latin.\n                if (!charFormat.complexScript && (!charFormat.bidi && (fontName === \"majorAscii\" || fontName === \"majorHAnsi\" || fontName === \"minorAscii\" || fontName === \"minorHAnsi\"))\n                    || (charFormat.bidi && (fontName === \"majorHAnsi\" || fontName === \"minorHAnsi\"))) {\n                    fontName = fontNameFromTheme;\n                }\n                //To-Do: Have to implement the font name retrieval behavior, when a bidi attribute is not available in theme.\n                else if (majorMinorFontScheme.fontTypeface.containsKey('Arab')) {\n                    //map(object => object.id).indexOf('c');\n                    //Gets the Arab-script (language) based font from font scheme (theme)\n                    fontNameFromTheme = majorMinorFontScheme.fontTypeface.get('Arab');\n                }\n            }\n            else if (hintType == \"EastAsia\") {\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.documentHelper.themeFontLanguage)) {\n                    fontName = this.getFontNameWithFontScript(majorMinorFontScheme, this.documentHelper.themeFontLanguage.localeIdFarEast, hintType);\n                    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(fontName)) {\n                        fontNameFromTheme = fontName;\n                    }\n                    //When font information is not available at the file level, Microsoft Word uses the following fonts as the default font for the respective language.\n                    // else if (isNullOrUndefined(fontNameFromTheme))\n                    // {\n                    //     LocaleIDs lang = (LocaleIDs)Document.Settings.ThemeFontLanguages.LocaleIdFarEast;\n                    //     if (lang == LocaleIDs.zh_CN)\n                    //         fontNameFromTheme = \"SimSun\";\n                    //     else if (lang == LocaleIDs.ko_KR)\n                    //         fontNameFromTheme = \"Batang\";\n                    //     else if (lang == LocaleIDs.ja_JP)\n                    //         fontNameFromTheme = \"MS Mincho\";\n                    // }\n                }\n            }\n            else if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(fontNameFromTheme) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.documentHelper.themeFontLanguage) && (fontName === \"minorBidi\" || fontName === \"majorBidi\")) {\n                return fontName = this.getFontNameWithFontScript(majorMinorFontScheme, this.documentHelper.themeFontLanguage.localeIdBidi, hintType);\n            }\n        }\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(fontNameFromTheme))\n            //Gets the default font (Times New Roman)\n            fontNameFromTheme = _index__WEBPACK_IMPORTED_MODULE_2__.defaultFont;\n        fontName = fontNameFromTheme;\n        return fontName;\n    };\n    // /// <summary>\n    // /// Gets the font name from a theme part for the specified font script.\n    // /// </summary>\n    TextHelper.prototype.getFontNameWithFontScript = function (majorMinorFontScheme, localeID, hintType) {\n        var fontName = null;\n        //To-Do: Should extend this behavior deponds on the localeID.\n        var lang = localeID.toString();\n        var fontTypeFaces = majorMinorFontScheme.fontTypeface;\n        //Gujarati\n        //If lang script is \"gu-IN\" or \"gu\", we should retrive the \"Gujr\" font from a theme part.\n        if ((lang == 'gu_IN' || localeID == 1095) && fontTypeFaces.containsKey(\"Gujr\"))\n            fontName = fontTypeFaces.get(\"Arab\");\n        //Hindi\n        //If lang script is \"hi-IN\" or \"hi\", we should retrive the \"Deva\" font from a theme part.\n        //Marathi\n        //If lang script is \"mr-IN\" or \"mr\", we should retrive the \"Deva\" font from a theme part.\n        else if ((lang == 'hi_IN' || lang == 'mr_IN' || localeID == 1081 || localeID == 1102)\n            && fontTypeFaces.containsKey(\"Deva\"))\n            fontName = fontTypeFaces.get(\"Arab\");\n        //Korean\n        //If lang script is \"ko-KR\" or \"ko\", we should retrive the \"Hang\" font from a theme part.\n        else if ((lang == 'ko_KR' || localeID == 1042) && fontTypeFaces.containsKey(\"Hang\"))\n            fontName = fontTypeFaces.get(\"Arab\");\n        //Chinese - Simplified\n        //If lang script is \"zh-CN\", \"zh-SG\" or \"zh\", we should retrive the \"Hans\" font from a theme part.\n        else if ((lang == 'zh_CN' || lang == 'zh_SG' || localeID == 2052) && fontTypeFaces.containsKey(\"Hans\"))\n            fontName = fontTypeFaces.get(\"Hans\");\n        //Chinese - Traditional\n        //If lang script is \"zh-TW\", \"zh-HK\", or \"zh-MO\", we should retrive the \"Hant\" font from a theme part.\n        else if ((lang == 'zh_TW' || lang == 'zh_HK' || lang == 'zh_MO')\n            && fontTypeFaces.containsKey(\"Hant\"))\n            fontName = fontTypeFaces.get(\"Arab\");\n        //Japanese\n        //If lang script is \"ja-JP\" or \"ja\", we should retrive the \"Jpan\" font from a theme part.\n        else if ((lang == 'ja_JP' || localeID == 1041) && fontTypeFaces.containsKey(\"Jpan\"))\n            fontName = fontTypeFaces.get(\"Arab\");\n        //Tamil\n        //If lang script is \"ta-IN\" or \"ta\", we should retrive the \"Taml\" font from a theme part.\n        else if ((lang == 'ta_IN' || localeID == 1097) && fontTypeFaces.containsKey(\"Taml\"))\n            fontName = fontTypeFaces.get(\"Arab\");\n        //Telugu\n        //If lang script is \"te-IN\" or \"te\", we should retrive the \"Telu\" font from a theme part.\n        else if ((lang == 'te_IN' || localeID == 1098) && fontTypeFaces.containsKey(\"Telu\"))\n            fontName = fontTypeFaces.get(\"Arab\");\n        //Hebrew\n        //If lang script is \"he-IL\" or \"he\", we should retrive the \"Hebr\" font from a theme part.\n        else if ((lang == 'he_IL' || lang == 'yi_Hebr' || localeID == 1037) && fontTypeFaces.containsKey(\"Hebr\"))\n            fontName = fontTypeFaces.get(\"Arab\");\n        //Thai\n        //If lang script is \"th_TH\" or \"th\", we should retrive the \"Thai\" font from a theme part.\n        else if ((lang == 'th_TH' || localeID == 1054) && fontTypeFaces.containsKey(\"Thai\"))\n            fontName = fontTypeFaces.get(\"Thai\");\n        //Arabic\n        else if (hintType == \"CS\" && fontTypeFaces.containsKey(\"Arab\"))\n            fontName = fontTypeFaces.get(\"Arab\");\n        return fontName;\n    };\n    TextHelper.prototype.destroy = function () {\n        this.documentHelper = undefined;\n        this.context = undefined;\n        this.paragraphMarkInfo = {};\n        this.paragraphMarkInfo = undefined;\n    };\n    TextHelper.wordSplitCharacters = [String.fromCharCode(32), String.fromCharCode(33), String.fromCharCode(34),\n        String.fromCharCode(35), String.fromCharCode(36), String.fromCharCode(37), String.fromCharCode(38), String.fromCharCode(39),\n        String.fromCharCode(40), String.fromCharCode(41), String.fromCharCode(42), String.fromCharCode(43), String.fromCharCode(44),\n        String.fromCharCode(45), String.fromCharCode(46), String.fromCharCode(47), String.fromCharCode(58), String.fromCharCode(59),\n        String.fromCharCode(60), String.fromCharCode(61), String.fromCharCode(62), String.fromCharCode(63), String.fromCharCode(64),\n        String.fromCharCode(91), String.fromCharCode(92), String.fromCharCode(93), String.fromCharCode(94), String.fromCharCode(95),\n        String.fromCharCode(96), String.fromCharCode(123), String.fromCharCode(124), String.fromCharCode(125), String.fromCharCode(126),\n        String.fromCharCode(1548), String.fromCharCode(1563), String.fromCharCode(8211), String.fromCharCode(8212),\n        String.fromCharCode(8216), String.fromCharCode(8217), String.fromCharCode(8221), String.fromCharCode(12288),\n        String.fromCharCode(8207)];\n    TextHelper.numberNonReversingCharacters = [String.fromCharCode(44), String.fromCharCode(46), String.fromCharCode(47),\n        String.fromCharCode(58), String.fromCharCode(1548)];\n    return TextHelper;\n}());\n\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-documenteditor/src/document-editor/implementation/viewer/text-helper.js?");

/***/ })

}]);