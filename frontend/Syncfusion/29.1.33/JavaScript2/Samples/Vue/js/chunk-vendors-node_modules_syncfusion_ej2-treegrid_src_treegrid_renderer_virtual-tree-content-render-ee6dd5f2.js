"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkej2_vue_samples"] = self["webpackChunkej2_vue_samples"] || []).push([["chunk-vendors-node_modules_syncfusion_ej2-treegrid_src_treegrid_renderer_virtual-tree-content-render-ee6dd5f2"],{

/***/ "./node_modules/@syncfusion/ej2-treegrid/src/treegrid/renderer/virtual-tree-content-render.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-treegrid/src/treegrid/renderer/virtual-tree-content-render.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TreeInterSectionObserver: () => (/* binding */ TreeInterSectionObserver),\n/* harmony export */   VirtualTreeContentRenderer: () => (/* binding */ VirtualTreeContentRenderer)\n/* harmony export */ });\n/* harmony import */ var _syncfusion_ej2_grids__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @syncfusion/ej2-grids */ \"./node_modules/@syncfusion/ej2-grids/index.js\");\n/* harmony import */ var _base_constant__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../base/constant */ \"./node_modules/@syncfusion/ej2-treegrid/src/treegrid/base/constant.js\");\n/* harmony import */ var _renderer_virtual_row_model_generator__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../renderer/virtual-row-model-generator */ \"./node_modules/@syncfusion/ej2-treegrid/src/treegrid/renderer/virtual-row-model-generator.js\");\n/* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @syncfusion/ej2-base */ \"./node_modules/@syncfusion/ej2-base/index.js\");\n/* harmony import */ var _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @syncfusion/ej2-data */ \"./node_modules/@syncfusion/ej2-data/index.js\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils */ \"./node_modules/@syncfusion/ej2-treegrid/src/treegrid/utils.js\");\nvar __extends = (undefined && undefined.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n\n\n\n\n\n\n\n\n\n/**\n * VirtualTreeContentRenderer\n *\n * @hidden\n */\nvar VirtualTreeContentRenderer = /** @class */ (function (_super) {\n    __extends(VirtualTreeContentRenderer, _super);\n    function VirtualTreeContentRenderer(parent, locator) {\n        var _this = _super.call(this, parent, locator) || this;\n        _this.isExpandCollapse = false;\n        _this.translateY = 0;\n        _this.maxiPage = 0;\n        _this.recordAdded = false;\n        /** @hidden */\n        _this.startIndex = -1;\n        _this.endIndex = -1;\n        _this.preTranslate = 0;\n        _this.isRemoteExpand = false;\n        /** @hidden */\n        _this.isDataSourceChanged = false;\n        _this.addEventListener();\n        return _this;\n    }\n    VirtualTreeContentRenderer.prototype.getModelGenerator = function () {\n        return new _renderer_virtual_row_model_generator__WEBPACK_IMPORTED_MODULE_2__.TreeVirtualRowModelGenerator(this.parent);\n    };\n    /**\n     * Retrieves the row element for a given row index.\n     *\n     * @param {number} index - The index of the row to retrieve.\n     * @returns {Element} The row element at the specified index.\n     */\n    VirtualTreeContentRenderer.prototype.getRowByIndex = function (index) {\n        if (this.parent.enableVirtualization && this.parent.isFrozenGrid()) {\n            return this.getRowCollection(index, true);\n        }\n        var dataRows = this.parent.getDataRows();\n        var targetRow = dataRows.find(function (e) { return parseInt(e.getAttribute('aria-rowindex'), 10) - 1 === index; });\n        if (!targetRow && this.parent.isEdit && this.parent.editSettings.mode === 'Batch') {\n            return index != null ? this.parent.getRows()[parseInt(index.toString(), 10)] : undefined;\n        }\n        return targetRow;\n    };\n    /**\n     * Retrieves the frozen right virtual row element by its index.\n     *\n     * @param {number} index - The index of the row to be retrieved.\n     * @returns {Element} The DOM element representing the frozen right virtual row.\n     */\n    VirtualTreeContentRenderer.prototype.getFrozenRightVirtualRowByIndex = function (index) {\n        return this.getRowCollection(index, false, false, true);\n    };\n    /**\n     * Retrieves the row or record from the virtual tree grid based on the provided index.\n     * Considers conditions such as frozen rows and pagination for accurate retrieval.\n     *\n     * @param {number} index - The index of the desired row or record.\n     * @param {boolean} isMovable - Specifies if the content is movable.\n     * @param {boolean} [isRowObject] - Optional. Determines if the return value should be a row object.\n     * @param {boolean} [isFrozenRight] - Optional. Used for determining frozen right rows.\n     * @returns {Element | Object} - The HTML element or row object.\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    VirtualTreeContentRenderer.prototype.getRowCollection = function (index, isMovable, isRowObject, isFrozenRight) {\n        var startIdx = parseInt(this.parent.getRows()[0].getAttribute(_base_constant__WEBPACK_IMPORTED_MODULE_1__.ariaRowIndex), 10) - 1;\n        var rowCollection = this.parent.getDataRows();\n        var collection = isRowObject ? this.parent.getCurrentViewRecords() : rowCollection;\n        var selectedRow = collection[index - startIdx];\n        if (this.parent.frozenRows && this.parent.pageSettings.currentPage > 1) {\n            if (!isRowObject) {\n                selectedRow = index <= this.parent.frozenRows ? rowCollection[parseInt(index.toString(), 10)]\n                    : rowCollection[(index - startIdx) + this.parent.frozenRows];\n            }\n            else {\n                selectedRow = index <= this.parent.frozenRows ?\n                    this.parent.getRowsObject()[parseInt(index.toString(), 10)].data : selectedRow;\n            }\n        }\n        if (selectedRow == null && index != null && this.parent.editSettings.mode === 'Batch' && this.parent.isEdit && isMovable) {\n            selectedRow = rowCollection[parseInt(index.toString(), 10)];\n        }\n        return selectedRow;\n    };\n    /**\n     * @hidden\n     * @returns {void}\n     */\n    VirtualTreeContentRenderer.prototype.addEventListener = function () {\n        this.parent.on(_base_constant__WEBPACK_IMPORTED_MODULE_1__.virtualActionArgs, this.virtualOtherAction, this);\n        this.parent.on(_base_constant__WEBPACK_IMPORTED_MODULE_1__.indexModifier, this.indexModifier, this);\n    };\n    /**\n     * Handles virtual scrolling actions based on the provided arguments.\n     *\n     * @param {Object} args - The argument object.\n     * @param {boolean} args.setTop - Determines if the virtual scroll position should reset to top.\n     * @param {boolean} args.isExpandCollapse - Determines if the action is part of an expand/collapse operation.\n     * @returns {void}\n     */\n    VirtualTreeContentRenderer.prototype.virtualOtherAction = function (args) {\n        if (args.setTop) {\n            this.translateY = 0;\n            this.startIndex = 0;\n            this.endIndex = this.parent.pageSettings.pageSize - 1;\n        }\n        else if (args.isExpandCollapse) {\n            this.isExpandCollapse = true;\n        }\n    };\n    /**\n     * Modifies the index based on various conditions such as record addition, deletion, or data source changes.\n     *\n     * @private\n     * @param {Object} args - Contains parameters for the current operation.\n     * @param {number} args.startIndex - The starting index for the modification.\n     * @param {number} args.endIndex - The ending index for the modification.\n     * @param {number} args.count - The number of items affected in the operation.\n     * @param {string} args.requestType - The type of request, such as 'insert', 'delete', or 'update'.\n     * @returns {void}\n     */\n    VirtualTreeContentRenderer.prototype.indexModifier = function (args) {\n        var content = this.parent.getContent().querySelector('.e-content');\n        var pageSize = this.parent.pageSettings.pageSize;\n        if ((this.recordAdded || args.requestType === 'delete' && this.endIndex > args.count - this.parent.pageSettings.pageSize) && this.startIndex > -1 && this.endIndex > -1) {\n            if (this.endIndex > args.count - pageSize) {\n                var nextSetResIndex = ~~(content.scrollTop / this.parent.getRowHeight());\n                var lastIndex = nextSetResIndex + this.parent.getRows().length;\n                if (lastIndex > args.count) {\n                    lastIndex = nextSetResIndex +\n                        (args.count - nextSetResIndex);\n                }\n                this.startIndex = lastIndex - this.parent.getRows().length;\n                this.endIndex = lastIndex;\n            }\n            else if (this.parent.root.editSettings.newRowPosition !== 'Top' && this.parent.root.editModule.selectedIndex !== -1 || this.parent.root.editModule.selectedIndex !== -1) {\n                this.startIndex += 1;\n                this.endIndex += 1;\n            }\n            this.recordAdded = false;\n        }\n        if (this.isDataSourceChanged) {\n            this.startIndex = 0;\n            this.endIndex = pageSize - 1;\n        }\n        if ((this.endIndex - this.startIndex !== pageSize) &&\n            (this.totalRecords > pageSize)\n            && (this.endIndex === this.totalRecords)) {\n            args.startIndex = this.endIndex - pageSize;\n            args.endIndex = this.endIndex;\n        }\n        else {\n            args.startIndex = this.startIndex;\n            args.endIndex = this.endIndex;\n        }\n    };\n    /**\n     * Handles the addition or removal of event listeners for virtual scrolling in a TreeGrid.\n     *\n     * @param {string} action - The action to perform, either 'on' or 'off'.\n     * @returns {void}\n     */\n    VirtualTreeContentRenderer.prototype.eventListener = function (action) {\n        var _this = this;\n        if (!(this.parent.dataSource instanceof _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_4__.DataManager && this.parent.dataSource.dataSource.url !== undefined\n            && this.parent.dataSource.dataSource.offline && this.parent.dataSource.dataSource.url !== '') || !(0,_utils__WEBPACK_IMPORTED_MODULE_5__.isCountRequired)(this.parent)) {\n            this.parent[\"\" + action]('data-ready', this.onDataReady, this);\n            this.parent[\"\" + action]('refresh-virtual-block', this.refreshContentRows, this);\n            this.fn = function () {\n                _this.observers.observes(function (scrollArgs) { return _this.scrollListeners(scrollArgs); }, _this.onEnteredAction(), _this.parent);\n                var gObj = _this.parent;\n                if (gObj.root.enablePersistence && gObj.root.scrollPosition) {\n                    _this.content.scrollTop = gObj.root.scrollPosition.top;\n                    if (gObj.root.enableColumnVirtualization) {\n                        _this.content.scrollLeft = gObj.root.scrollPosition.left;\n                    }\n                    var scrollValues = {\n                        direction: 'down', sentinel: _this.observer.sentinelInfo.down,\n                        offset: gObj.root.scrollPosition, focusElement: gObj.element\n                    };\n                    _this.scrollListeners(scrollValues);\n                }\n                _this.parent.off('content-ready', _this.fn);\n            };\n            this.parent.addEventListener('dataBound', this.dataBoundEvent.bind(this));\n            this.parent.addEventListener('rowSelected', this.rowSelectedEvent.bind(this));\n            this.parent[\"\" + action]('select-virtual-Row', this.toSelectVirtualRow, this);\n            this.parent.on('content-ready', this.fn, this);\n            this.parent.addEventListener(_base_constant__WEBPACK_IMPORTED_MODULE_1__.actionBegin, this.handleActionBegin.bind(this));\n            this.parent.addEventListener(_base_constant__WEBPACK_IMPORTED_MODULE_1__.actionComplete, this.onActionComplete.bind(this));\n            this.parent[\"\" + action]('virtual-scroll-edit-action-begin', this.beginEdit, this);\n            this.parent[\"\" + action]('virtual-scroll-add-action-begin', this.beginAdd, this);\n            this.parent[\"\" + action]('virtual-scroll-edit-success', this.virtualEditSuccess, this);\n            this.parent[\"\" + action]('edit-reset', this.resetIseditValue, this);\n            this.parent[\"\" + action]('get-virtual-data', this.getData, this);\n            this.parent[\"\" + action]('virtual-scroll-edit-cancel', this.cancelEdit, this);\n            this.parent[\"\" + action]('select-row-on-context-open', this.toSelectRowOnContextOpen, this);\n            this.parent[\"\" + action]('refresh-virtual-editform-cells', this.refreshCell, this);\n            this.parent[\"\" + action]('virtaul-cell-focus', this.cellFocus, this);\n            this.parent[\"\" + action]('virtual-scroll-edit', this.restoreEditState, this);\n        }\n        else {\n            _super.prototype.eventListener.call(this, 'on');\n        }\n    };\n    /**\n     * Handles cell focus transitions in a virtualized tree grid component\n     * when a keyboard event is triggered.\n     *\n     * @param {KeyboardEventArgs} e - The keyboard event arguments that contain\n     *                                information about the key action.\n     * @returns {void}\n     */\n    VirtualTreeContentRenderer.prototype.cellFocus = function (e) {\n        var virtualCellFocus = 'virtualCellFocus';\n        _super.prototype[\"\" + virtualCellFocus].call(this, e);\n    };\n    /**\n     * Handles the data ready event for the virtual tree grid content renderer.\n     *\n     * @param {NotifyArgs} [e] - The notification arguments that contain information about the data.\n     * @returns {void}\n     */\n    VirtualTreeContentRenderer.prototype.onDataReady = function (e) {\n        _super.prototype.onDataReady.call(this, e);\n        if (!(this.parent.dataSource instanceof _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_4__.DataManager && this.parent.dataSource.dataSource.url !== undefined\n            && this.parent.dataSource.dataSource.offline && this.parent.dataSource.dataSource.url !== '') || !(0,_utils__WEBPACK_IMPORTED_MODULE_5__.isCountRequired)(this.parent)) {\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(e.count)) {\n                this.totalRecords = e.count;\n                // To overcome the white space issue in last page when records collapsed\n                if (this.parent.isFrozenGrid() && e.count < Object.keys(this.parent.dataSource).length) {\n                    var width = this.parent.enableColumnVirtualization ?\n                        this.getColumnOffset(this.parent.columns.length - 1) + 'px' : '100%';\n                    var height = (this.parent.getRowHeight() * e.count) -\n                        (this.parent.getRowHeight() * this.parent.pageSettings.pageSize);\n                    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.getValue)('virtualEle', this).setVirtualHeight(height, width);\n                }\n                if (!this.parent.enableColumnVirtualization && !this.parent.isFrozenGrid()) {\n                    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.getValue)('virtualEle', this).setVirtualHeight(this.parent.getRowHeight() * e.count, '100%');\n                }\n            }\n            if ((!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(e.requestType) && e.requestType.toString() === 'collapseAll') || (this.isDataSourceChanged && (this.startIndex === -1 || this.startIndex === 0 && this['preStartIndex'] === 0))) {\n                this.contents.scrollTop = 0;\n                this.isDataSourceChanged = false;\n            }\n        }\n    };\n    /**\n     * Renders the table for the virtual tree content. It sets up a new `TreeInterSectionObserver`\n     * based on certain conditions regarding the data source and counting requirements.\n     *\n     * @returns {void}\n     */\n    VirtualTreeContentRenderer.prototype.renderTable = function () {\n        _super.prototype.renderTable.call(this);\n        if (!(this.parent.dataSource instanceof _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_4__.DataManager && this.parent.dataSource.dataSource.url !== undefined\n            && this.parent.dataSource.dataSource.offline && this.parent.dataSource.dataSource.url !== '') || !(0,_utils__WEBPACK_IMPORTED_MODULE_5__.isCountRequired)(this.parent)) {\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.getValue)('observer', this).options.debounceEvent = false;\n            this.observers = new TreeInterSectionObserver((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.getValue)('observer', this).element, (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.getValue)('observer', this).options);\n            this.contents = this.getPanel().firstChild;\n        }\n    };\n    /**\n     * Calculates the translateY value for a virtual tree grid based on the scroll top, container height,\n     * and additional virtual scrolling information. This method specifically handles logic for remote\n     * data sources and ensures smooth scrolling with respect to expansion states.\n     *\n     * @param {number} sTop - The scroll top position.\n     * @param {number} cHeight - The height of the container.\n     * @param {VirtualInfo} [info] - Optional virtual scrolling information.\n     * @param {boolean} [isOnenter] - Flag indicating if the scroll event is on enter.\n     * @returns {number} The calculated translateY value.\n     */\n    VirtualTreeContentRenderer.prototype.getTranslateY = function (sTop, cHeight, info, isOnenter) {\n        if ((this.parent.dataSource instanceof _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_4__.DataManager && this.parent.dataSource.dataSource.url !== undefined\n            && !this.parent.dataSource.dataSource.offline && this.parent.dataSource.dataSource.url !== '') || (0,_utils__WEBPACK_IMPORTED_MODULE_5__.isCountRequired)(this.parent)) {\n            if (this.isRemoteExpand) {\n                this.isRemoteExpand = false;\n                return this.preTranslate;\n            }\n            this.preTranslate = _super.prototype.getTranslateY.call(this, sTop, cHeight, info, isOnenter);\n        }\n        return _super.prototype.getTranslateY.call(this, sTop, cHeight, info, isOnenter);\n    };\n    /**\n     * Handles the dataBound event to calculate and set the initial row top position for the grid.\n     *\n     * @returns {void}\n     */\n    VirtualTreeContentRenderer.prototype.dataBoundEvent = function () {\n        var dataBoundEve = 'dataBound';\n        var initialRowTop = 'initialRowTop';\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(this.parent.getRows()) && this.parent.getRows().length && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(this.parent.getRowByIndex(0)) && !this[\"\" + initialRowTop]) {\n            var rowTop = this.parent.getRowByIndex(0).getBoundingClientRect().top;\n            var gridTop = this.parent.element.getBoundingClientRect().top;\n            if (rowTop > 0) {\n                this[\"\" + initialRowTop] = this.parent.getRowByIndex(0).getBoundingClientRect().top - gridTop;\n            }\n            else if (this.parent.selectedRowIndex === -1) {\n                this[\"\" + initialRowTop] = this.content.getBoundingClientRect().top -\n                    this.parent.getRowByIndex(0).getBoundingClientRect().height;\n            }\n        }\n        _super.prototype[\"\" + dataBoundEve].call(this);\n    };\n    /**\n     * Handles the row selection event for virtual tree grid rows.\n     * It invokes the base class's rowSelected method and notifies\n     * the parent component about a virtual transformation change.\n     *\n     * @param {RowSelectEventArgs} args - The arguments related to the row selection event.\n     * @returns {void} This method does not return a value.\n     */\n    VirtualTreeContentRenderer.prototype.rowSelectedEvent = function (args) {\n        var rowSelected = 'rowSelected';\n        _super.prototype[\"\" + rowSelected].call(this, args);\n        this.parent.notify('virtualTransform', { requestType: 'transformChange' });\n    };\n    /**\n     * Handles virtual row selection in TreeGrid.\n     *\n     * @param {Object} args - The argument object containing the selected index.\n     * @param {number} args.selectedIndex - The index of the row to be selected.\n     *\n     * @returns {void}\n     */\n    VirtualTreeContentRenderer.prototype.toSelectVirtualRow = function (args) {\n        if (this.parent.isEdit) {\n            return;\n        }\n        var selectVirtualRow = 'selectVirtualRow';\n        var containerRect = 'containerRect';\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(this.observer[\"\" + containerRect])) {\n            this.observer[\"\" + containerRect] = this.observers[\"\" + containerRect];\n        }\n        var treeGridParent = this.parent.clipboardModule['treeGridParent'];\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(treeGridParent.editModule) ||\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(treeGridParent.editModule['addRowIndex']) || args.selectedIndex !== 0) {\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(treeGridParent.grid.sortModule) && treeGridParent.grid.sortModule['sortedColumns'].length > 0) {\n                var sortedData = treeGridParent.dataModule['sortedData'];\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(sortedData) && sortedData.length > 0) {\n                    var targetIndex = sortedData.findIndex(function (record) { return record.index === args.selectedIndex; });\n                    args.selectedIndex = targetIndex;\n                }\n            }\n            _super.prototype[\"\" + selectVirtualRow].call(this, args);\n        }\n    };\n    /**\n     * Refreshes the cells for the given row object by regenerating them.\n     *\n     * @param {Row<Column>} rowObj - The row object for which the cells need to be refreshed.\n     * @returns {void} This method does not return any value.\n     */\n    VirtualTreeContentRenderer.prototype.refreshCell = function (rowObj) {\n        rowObj.cells = this.generateCells();\n    };\n    /**\n     * Generates an array of cells for each column in the parent.\n     *\n     * @returns {Cell<Column>[]} An array of cells for the corresponding columns.\n     */\n    VirtualTreeContentRenderer.prototype.generateCells = function () {\n        var cells = [];\n        for (var i = 0; i < this.parent.columns.length; i++) {\n            cells.push(this.generateCell(this.parent.columns[parseInt(i.toString(), 10)]));\n        }\n        return cells;\n    };\n    /**\n     * Generates a cell object with provided column and row configurations.\n     *\n     * @param {Column} col - The Column object which holds the column configuration.\n     * @param {string} [rowId] - An optional string that represents the row ID.\n     * @param {CellType} [cellType] - An optional CellType enum to specify the type of the cell.\n     * @param {number} [colSpan] - An optional number to specify the column span of the cell.\n     * @param {number} [oIndex] - An optional number for the order index of the cell.\n     * @param {Object} [foreignKeyData] - An optional object for foreign key data associated with the column.\n     *\n     * @returns {Cell<Column>} Returns a newly created Cell object of type Column.\n     */\n    VirtualTreeContentRenderer.prototype.generateCell = function (col, rowId, cellType, colSpan, oIndex, foreignKeyData) {\n        var opt = {\n            'visible': col.visible,\n            'isDataCell': !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(col.field || col.template),\n            'isTemplate': !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(col.template),\n            'rowID': rowId,\n            'column': col,\n            'cellType': !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(cellType) ? cellType : _syncfusion_ej2_grids__WEBPACK_IMPORTED_MODULE_0__.CellType.Data,\n            'colSpan': colSpan,\n            'commands': col.commands,\n            'isForeignKey': col.isForeignColumn && col.isForeignColumn(),\n            'foreignKeyData': col.isForeignColumn && col.isForeignColumn() && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.getValue)(col.field, foreignKeyData)\n        };\n        if (opt.isDataCell || opt.column.type === 'checkbox' || opt.commands) {\n            opt.index = oIndex;\n        }\n        return new _syncfusion_ej2_grids__WEBPACK_IMPORTED_MODULE_0__.Cell(opt);\n    };\n    /**\n     * Begins the edit operation for a specified row in the grid.\n     * Updates the `editedRowIndex` and assigns row data to the event data.\n     *\n     * @param {{ data: Object, index: number }} e - An object containing the row data and index.\n     * @param {Object} e.data - The data of the row to be edited.\n     * @param {number} e.index - The index of the row to be edited.\n     * @returns {void}\n     */\n    VirtualTreeContentRenderer.prototype.beginEdit = function (e) {\n        this['editedRowIndex'] = e.index;\n        var selector = '.e-row[aria-rowindex=\"' + (e.index + 1) + '\"]';\n        var index = this.parent.getContent().querySelector(selector).rowIndex;\n        var rowData = this.parent.getCurrentViewRecords()[parseInt(index.toString(), 10)];\n        e.data = rowData;\n    };\n    /**\n     * Begins the process of adding a new row in the tree grid.\n     *\n     * @param {Object} args - The arguments for adding a new row.\n     * @param {boolean} args.startEdit - A flag indicating whether to start editing.\n     * @returns {void}\n     */\n    VirtualTreeContentRenderer.prototype.beginAdd = function (args) {\n        var addAction = 'addActionBegin';\n        var isAdd = 'isAdd';\n        var addArgs = { newRowPosition: this.rowPosition, addRowIndex: this.addRowIndex, dataRowIndex: this.dataRowIndex };\n        this.parent.notify('get-row-position', addArgs);\n        this.rowPosition = addArgs.newRowPosition;\n        this.addRowIndex = addArgs.addRowIndex;\n        this.dataRowIndex = addArgs.dataRowIndex;\n        var rows = this.parent.getRows();\n        var firstAriaIndex = rows.length ? +rows[0].getAttribute('aria-rowindex') - 1 : 0;\n        var lastAriaIndex = rows.length ? +rows[rows.length - 1].getAttribute('aria-rowindex') - 1 : 0;\n        var withInRange = this.parent.selectedRowIndex >= firstAriaIndex && this.parent.selectedRowIndex <= lastAriaIndex;\n        if (!(this.rowPosition === 'Top' || this.rowPosition === 'Bottom')) {\n            this[\"\" + isAdd] = true;\n        }\n        if (this.rowPosition === 'Top' || this.rowPosition === 'Bottom' ||\n            ((!this.addRowIndex || this.addRowIndex === -1) && (this.parent.selectedRowIndex === -1 || !withInRange))) {\n            _super.prototype[\"\" + addAction].call(this, args);\n        }\n    };\n    /**\n     * Restores the edit state of the tree grid content. This method calls the\n     * base class method to handle the restoration logic.\n     *\n     * @returns {void} This method does not return any value.\n     */\n    VirtualTreeContentRenderer.prototype.restoreEditState = function () {\n        var restoreEdit = 'restoreEdit';\n        _super.prototype[\"\" + restoreEdit].call(this);\n    };\n    /**\n     * Resets the edit state if certain conditions are met.\n     *\n     * @returns {void}\n     */\n    VirtualTreeContentRenderer.prototype.resetIseditValue = function () {\n        var resetIsEdit = 'resetIsedit';\n        var isAdd = 'isAdd';\n        this.parent.notify('reset-edit-props', {});\n        if ((this.rowPosition === 'Top' || this.rowPosition === 'Bottom') && this[\"\" + isAdd]) {\n            _super.prototype[\"\" + resetIsEdit].call(this);\n        }\n    };\n    /**\n     * Handles the successful editing operation when virtual scrolling is enabled.\n     * Checks if a row has been added to the tree grid and sets the `recordAdded` flag accordingly.\n     *\n     * @returns {void}\n     */\n    VirtualTreeContentRenderer.prototype.virtualEditSuccess = function () {\n        var isAdd = 'isAdd';\n        var content = this.parent.getContent().querySelector('.e-content');\n        if (this[\"\" + isAdd] && content.querySelector('.e-addedrow')) {\n            this.recordAdded = true;\n        }\n    };\n    /**\n     * Cancels the edit operation for the provided data.\n     *\n     * @param {Object} args - The arguments containing the data to cancel edit for.\n     * @param {Object} args.data - The specific data object for which the edit operation needs to be canceled.\n     * @returns {void}\n     */\n    VirtualTreeContentRenderer.prototype.cancelEdit = function (args) {\n        var editCancel = 'editCancel';\n        _super.prototype[\"\" + editCancel].call(this, args);\n    };\n    /**\n     * Handles the action of selecting a row when the context menu is opened.\n     *\n     * @param {Object} args - An object containing related parameters.\n     * @param {boolean} args.isOpen - A flag indicating whether the context menu is open.\n     * @returns {void} This method does not return any value.\n     */\n    VirtualTreeContentRenderer.prototype.toSelectRowOnContextOpen = function (args) {\n        var selectRowOnContextOpen = 'selectRowOnContextOpen';\n        _super.prototype[\"\" + selectRowOnContextOpen].call(this, args);\n    };\n    /**\n     * Restores a new row in the grid when necessary by adding it back to the content.\n     *\n     * @returns {void} This method does not return any value.\n     */\n    VirtualTreeContentRenderer.prototype.restoreNewRow = function () {\n        var isAdd = 'isAdd';\n        var content = this.parent.getContent().querySelector('.e-content');\n        if (this[\"\" + isAdd] && !content.querySelector('.e-addedrow')) {\n            this.parent.isEdit = false;\n            this.parent.editModule.addRecord(null, this.parent.root.editModule.selectedIndex);\n        }\n    };\n    /**\n     * Retrieves virtual data for operations like adding or canceling rows in the grid.\n     *\n     * @param {Object} data - An object containing properties to determine the virtual data processing.\n     * @param {Object} data.virtualData - The virtual data object to be processed.\n     * @param {boolean} data.isAdd - A boolean indicating if the operation is an addition.\n     * @param {boolean} data.isCancel - A boolean indicating if the operation is a cancellation.\n     * @returns {void} This method does not return any value.\n     */\n    VirtualTreeContentRenderer.prototype.getData = function (data) {\n        var getVirtualData = 'getVirtualData';\n        _super.prototype[\"\" + getVirtualData].call(this, data);\n    };\n    /**\n     * Initiates the beginning of an action within the tree grid component.\n     * This method is invoked before any action is performed, allowing for\n     * any necessary modifications or cancellations of the upcoming action.\n     *\n     * @param {NotifyArgs} args - The arguments associated with the action,\n     * providing context and specifics about what is being commenced.\n     * @returns {void}\n     */\n    VirtualTreeContentRenderer.prototype.handleActionBegin = function (args) {\n        var actionBegin = 'actionBegin';\n        _super.prototype[\"\" + actionBegin].call(this, args);\n    };\n    /**\n     * Handles the completion of various actions, such as adding a new row.\n     * Updates row positions and indexes based on the action completed.\n     *\n     * @param {NotifyArgs} args - An object containing the details of the completed action.\n     *               Specifically, it includes the `requestType` which determines the type\n     *               of action that was completed.\n     * @returns {void} This method does not return any value.\n     */\n    VirtualTreeContentRenderer.prototype.onActionComplete = function (args) {\n        if (args.requestType === 'add') {\n            var addArgs = { newRowPosition: this.rowPosition, addRowIndex: this.addRowIndex, dataRowIndex: this.dataRowIndex };\n            this.parent.notify('get-row-position', addArgs);\n            this.rowPosition = addArgs.newRowPosition;\n            this.addRowIndex = addArgs.addRowIndex;\n            this.dataRowIndex = this.parent.root.editModule.selectedIndex;\n        }\n        var actionComplete = 'actionComplete';\n        _super.prototype[\"\" + actionComplete].call(this, args);\n    };\n    /**\n     * Creates a callback function to be executed during virtual scrolling actions.\n     * This function handles the adjustment of virtual elements and rendering logic,\n     * particularly optimizing for non-IE browsers, wheel events, and virtual masks.\n     *\n     * @returns {Function} A function that handles scrolling and adjusts table rendering.\n     * @param {HTMLElement} element - The HTML element involved in the action.\n     * @param {SentinelType} current - The type of sentinel indicating the scroll.\n     * @param {string} direction - The scroll direction.\n     * @param {Offsets} e - The offset values indicating the current scroll position.\n     * @param {boolean} isWheel - Indicates if the scrolling was initiated by a mouse wheel.\n     * @param {boolean} check - A boolean flag for additional control logic.\n     */\n    VirtualTreeContentRenderer.prototype.onEnteredAction = function () {\n        var _this = this;\n        return function (element, current, direction, e, isWheel, check) {\n            var directVirtualRender = 'directVirtualRender';\n            if (!_this.parent[\"\" + directVirtualRender]) { // with this property, columns are rendered without debouncing on horizontal scroll.\n                var preventEvent = 'preventEvent';\n                if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.Browser.isIE && !isWheel && check && !_this[\"\" + preventEvent] && !_this.parent.enableVirtualMaskRow) {\n                    _this.parent.showSpinner();\n                }\n                if (_this.parent.enableVirtualMaskRow && !_this[\"\" + preventEvent]) {\n                    setTimeout(function () {\n                        _this.parent.showMaskRow(current.axis);\n                        _this.parent.notify('showGanttShimmer', { requestType: 'showShimmer' });\n                    }, 0);\n                }\n                var height = _this.content.getBoundingClientRect().height;\n                var top_1 = _this.prevInfo.offsets ? _this.prevInfo.offsets.top : null;\n                var xAxis = current.axis === 'X';\n                var x = _this.getColumnOffset(xAxis ? _this.vgenerator.getColumnIndexes()[0] - 1 : _this.prevInfo.columnIndexes[0]\n                    - 1);\n                if (xAxis) {\n                    var idx = Object.keys(_this.vgenerator.cOffsets).length - _this.prevInfo.columnIndexes.length;\n                    var maxLeft = _this.vgenerator.cOffsets[idx - 1];\n                    x = x > maxLeft ? maxLeft : x; //TODO: This fix horizontal scrollbar jumping issue in column virtualization.\n                }\n                var y = _this.getTranslateY(e.top, height, xAxis && top_1 === e.top ? _this.prevInfo : undefined, true);\n                if (!_this.parent.isFrozenGrid() || _this.parent.enableVirtualMaskRow) {\n                    if (_this.parent.enableVirtualMaskRow) {\n                        var upScroll = (e.top - _this.translateY) < 0;\n                        y = (Math.round(_this.translateY) > y && !upScroll) ? Math.round(_this.translateY) : y;\n                        _this.virtualEle.adjustTable(x, y);\n                    }\n                    else {\n                        _this.virtualEle.adjustTable(x, _this.translateY);\n                    }\n                    if (_this.parent.enableColumnVirtualization) {\n                        _this.header.virtualEle.adjustTable(x, 0);\n                    }\n                }\n            }\n        };\n    };\n    /**\n     * Handles scroll events to manage virtual scrolling and row rendering.\n     * Adjusts view information, row indexes, and translates viewport positioning\n     * based on the given scroll arguments.\n     *\n     * @param {ScrollArg} scrollArgs - Contains the scroll offsets, sentinel information, direction of scroll, and other related details.\n     * @returns {void} - No return value. It adjusts scrolling state internally.\n     */\n    VirtualTreeContentRenderer.prototype.scrollListeners = function (scrollArgs) {\n        this['scrollAfterEdit']();\n        this.shouldPreventScrolling(scrollArgs);\n        if (this.parent.root.enablePersistence) {\n            this.parent.root.scrollPosition = scrollArgs.offset;\n        }\n        var info = scrollArgs.sentinel;\n        var rowHeight = this.parent.getRowHeight();\n        var outBuffer = this.parent.pageSettings.pageSize - Math.ceil(this.parent.pageSettings.pageSize / 2);\n        var content;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(this.parent.contentModule)) {\n            content = this.parent.getContent().querySelector('.e-content');\n        }\n        var scrollHeight = outBuffer * rowHeight;\n        var upScroll = (scrollArgs.offset.top - this.translateY) < 0 && this.activeKey !== 'downArrow';\n        var downScroll = Math.ceil(scrollArgs.offset.top - this.translateY) + rowHeight >= scrollHeight;\n        var selectedRowIndex = 'selectedRowIndex';\n        var currentViewData = this.parent.currentViewData;\n        var indexValue = 'index';\n        if (upScroll && (scrollArgs.direction !== 'right' && scrollArgs.direction !== 'left') && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(content)) {\n            var vHeight = +(this.parent.height.toString().indexOf('%') < 0 ? parseInt(this.parent.height.toString(), 10) :\n                this.parent.element.getBoundingClientRect().height);\n            // Calculate the integer number of rows that are scrolled past plus the number of rows that fit within the visible height\n            var scrolledRows = Math.floor(content.scrollTop / rowHeight);\n            var visibleRows = Math.ceil(vHeight / rowHeight);\n            // Calculate the index by subtracting the page size from the total rows taken into account\n            var index = scrolledRows + visibleRows - this.parent.pageSettings.pageSize;\n            index = (index > 0) ? index : 0;\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(this[\"\" + selectedRowIndex]) && this[\"\" + selectedRowIndex] !== -1 && index !== this[\"\" + selectedRowIndex] &&\n                ((this.parent.rowHeight * this.parent.pageSettings.pageSize) < content.scrollTop) && !this.parent.allowRowDragAndDrop) {\n                index = this[\"\" + selectedRowIndex];\n            }\n            this.startIndex = index;\n            this.endIndex = index + this.parent.pageSettings.pageSize;\n            if (this.endIndex > this.totalRecords) {\n                var lastInx = this.totalRecords;\n                var remains = this.endIndex % lastInx;\n                this.endIndex = lastInx;\n                this.startIndex = (this.startIndex - remains) < 0 ? 0 : (this.startIndex - remains);\n            }\n            if (currentViewData.length && (currentViewData[0][\"\" + indexValue] >= this.parent.pageSettings.pageSize / 2) &&\n                ((currentViewData[0][\"\" + indexValue] - this.startIndex) < (this.parent.pageSettings.pageSize / 2)) &&\n                this.parent.selectionModule && this.parent.selectionModule.isRowSelected) {\n                this.startIndex = currentViewData[0][\"\" + indexValue] - (this.parent.pageSettings.pageSize / 2);\n                this.endIndex = this.startIndex + this.parent.pageSettings.pageSize;\n            }\n            //var firsttdinx = parseInt(this.parent.getContent().querySelector('.e-content td').getAttribute('index'), 0);\n            var rowPt = Math.ceil(scrollArgs.offset.top / rowHeight);\n            rowPt = rowPt % this.parent.pageSettings.pageSize;\n            var firsttdinx = 0;\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(this.parent.getRows()[parseInt(rowPt.toString(), 10)]) &&\n                !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(this.parent.getContent().querySelectorAll('.e-content tr')[parseInt(rowPt.toString(), 10)])) {\n                var attr = this.parent.getContent().querySelectorAll('.e-content tr')[parseInt(rowPt.toString(), 10)]\n                    .querySelector('td').getAttribute('index');\n                firsttdinx = +attr; // this.parent.getContent().querySelector('.e-content tr').getAttribute('data-rowindex');\n            }\n            if (firsttdinx === 0) {\n                if (this.endIndex - this.startIndex < this.parent.pageSettings.pageSize) {\n                    this.translateY = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(this.endIndex) ?\n                        (this.endIndex - this.parent.pageSettings.pageSize) * (this.parent.rowHeight ?\n                            this.parent.rowHeight : this.parent.getRowHeight()) : 0;\n                }\n                else if (this.startIndex === this[\"\" + selectedRowIndex]) {\n                    this.translateY = scrollArgs.offset.top;\n                }\n                else {\n                    this.translateY = (scrollArgs.offset.top - (outBuffer * rowHeight) > 0) ?\n                        scrollArgs.offset.top - (outBuffer * rowHeight) + rowHeight : 0;\n                }\n            }\n            else if (this.parent.getFrozenColumns() > 0) {\n                scrollArgs.offset.top = scrollArgs.offset.top + 80;\n                this.translateY = (scrollArgs.offset.top - (outBuffer * rowHeight) > 0) ?\n                    scrollArgs.offset.top - (outBuffer * rowHeight) + 10 : 0;\n            }\n            else {\n                this.translateY = (scrollArgs.offset.top - (outBuffer * rowHeight) > 0) ?\n                    scrollArgs.offset.top - (outBuffer * rowHeight) + 10 : 0;\n            }\n        }\n        else if (downScroll && (scrollArgs.direction !== 'right' && scrollArgs.direction !== 'left') && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(content)) {\n            var nextSetResIndex = ~~(content.scrollTop / rowHeight);\n            var isLastBlock = (this[\"\" + selectedRowIndex] + this.parent.pageSettings.pageSize) < this.totalRecords ? false : true;\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(this[\"\" + selectedRowIndex]) && this[\"\" + selectedRowIndex] !== -1 &&\n                nextSetResIndex !== this[\"\" + selectedRowIndex] && !isLastBlock && !this.parent.allowRowDragAndDrop) {\n                nextSetResIndex = this[\"\" + selectedRowIndex];\n            }\n            var lastIndex = nextSetResIndex + this.parent.pageSettings.pageSize;\n            if (lastIndex > this.totalRecords) {\n                lastIndex = nextSetResIndex +\n                    (this.totalRecords - nextSetResIndex);\n            }\n            this.startIndex = !isLastBlock || (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(this['' + selectedRowIndex]) ? lastIndex - this.parent.pageSettings.pageSize : nextSetResIndex;\n            this.endIndex = lastIndex;\n            if ((nextSetResIndex + this.parent.pageSettings.pageSize) > this.totalRecords && (this.endIndex - this.startIndex) <\n                (this.parent.pageSettings.pageSize / 2) && (this.endIndex - nextSetResIndex) < (this.parent.pageSettings.pageSize / 2)) {\n                this.startIndex = lastIndex - (this.parent.pageSettings.pageSize / 2);\n            }\n            if (currentViewData.length && this.startIndex > currentViewData[0][\"\" + indexValue] &&\n                ((this.startIndex - currentViewData[0][\"\" + indexValue]) < (this.parent.pageSettings.pageSize / 2)) &&\n                this.parent.selectionModule && this.parent.selectionModule.isRowSelected) {\n                this.startIndex = currentViewData[0][\"\" + indexValue] + (this.parent.pageSettings.pageSize / 2);\n            }\n            if (scrollArgs.offset.top > (rowHeight * this.totalRecords)) {\n                this.translateY = this.getTranslateY(scrollArgs.offset.top, content.getBoundingClientRect().height);\n            }\n            else {\n                if (this.totalRecords === this.endIndex) {\n                    if (this.totalRecords === this.endIndex) {\n                        if (this.parent.isEdit) {\n                            this.translateY = ((this.totalRecords * rowHeight) - (this.parent.pageSettings.pageSize * rowHeight))\n                                + rowHeight;\n                        }\n                        else {\n                            this.translateY = (this.totalRecords * rowHeight) - (this.parent.pageSettings.pageSize * rowHeight);\n                        }\n                    }\n                }\n                else {\n                    if (this.parent.getFrozenColumns() > 0) {\n                        this.translateY = scrollArgs.offset.top - ((rowHeight * 2) + this.parent.pageSettings.pageSize);\n                    }\n                    else {\n                        this.translateY = scrollArgs.offset.top;\n                    }\n                }\n            }\n        }\n        if (((downScroll && scrollArgs.direction !== 'up' && (scrollArgs.offset.top < (rowHeight * this.totalRecords)))\n            || (upScroll)) || (scrollArgs.direction === 'right' || scrollArgs.direction === 'left') ||\n            ((this.parent.dataSource instanceof _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_4__.DataManager && this.parent.dataSource.dataSource.url !== undefined\n                && !this.parent.dataSource.dataSource.offline && this.parent.dataSource.dataSource.url !== '') && (downScroll || upScroll) || (0,_utils__WEBPACK_IMPORTED_MODULE_5__.isCountRequired)(this.parent))) {\n            var viewInfo = this.currentInfo = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.getValue)('getInfoFromView', this).apply(this, [scrollArgs.direction, info, scrollArgs.offset]);\n            this.previousInfo = viewInfo;\n            if (this.prevInfo && viewInfo.event !== 'refresh-virtual-block' && ((info.axis === 'Y' && this.prevInfo.blockIndexes.toString() === viewInfo.blockIndexes.toString())\n                || ((info.axis === 'X' && this.prevInfo.columnIndexes.toString() === viewInfo.columnIndexes.toString())\n                    || (this.parent.isFrozenGrid() && this.parent.getVisibleFrozenLeftCount() >= viewInfo.columnIndexes[0]\n                        && this.prevInfo.columnIndexes.toString().includes(viewInfo.columnIndexes.toString()))))) {\n                this.parent.removeMaskRow();\n                if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.Browser.isIE) {\n                    this.parent.hideSpinner();\n                }\n                this.requestType = this.requestType === 'virtualscroll' ? this['empty'] : this.requestType;\n                if (info.axis === 'Y') {\n                    this.restoreEditState();\n                }\n                return;\n            }\n            this.parent.setColumnIndexesInView(this.parent.enableColumnVirtualization ? viewInfo.columnIndexes : []);\n            var page = viewInfo.loadNext && !viewInfo.loadSelf ? viewInfo.nextInfo.page : viewInfo.page;\n            this.parent.setProperties({ pageSettings: { currentPage: page } }, true);\n            if (downScroll && this.endIndex === this.totalRecords && viewInfo.loadNext) {\n                viewInfo.loadNext = false;\n            }\n            this.requestType = 'virtualscroll';\n            if (scrollArgs.direction !== 'right' && scrollArgs.direction !== 'left') {\n                viewInfo.event = viewInfo.event === 'refresh-virtual-block' ? 'model-changed' : viewInfo.event;\n            }\n            if (this.parent.enableVirtualMaskRow) {\n                this.parent.showMaskRow(info.axis);\n                this.parent.addShimmerEffect();\n                this.parent.notify('showGanttShimmer', { requestType: 'showShimmer' });\n            }\n            this.parent.notify(viewInfo.event, { requestType: 'virtualscroll', virtualInfo: viewInfo, focusElement: scrollArgs.focusElement });\n        }\n        else {\n            if (this.parent.enableVirtualMaskRow) {\n                this.parent.removeMaskRow();\n                this.parent.notify('removeGanttShimmer', { requestType: 'hideShimmer' });\n            }\n        }\n    };\n    /**\n     * Prevents scrolling under specific conditions related to adding a new row.\n     *\n     * @param {ScrollArg} scrollArgs - The scroll event arguments containing offset details.\n     * @returns {void}\n     */\n    VirtualTreeContentRenderer.prototype.shouldPreventScrolling = function (scrollArgs) {\n        var addedRow = this.parent.element.querySelector('.e-addedrow');\n        if (addedRow && this.rowPosition !== 'Top' && this.rowPosition !== 'Bottom' && scrollArgs.offset.top !== 0) {\n            this.parent.closeEdit();\n            return;\n        }\n    };\n    /**\n     * Appends content to the target element. Handles dynamic adjustments for remote data sources,\n     * frozen columns, and virtual scrolling.\n     *\n     * @param {HTMLElement} target - The target HTML element where content is to be appended.\n     * @param {DocumentFragment} newChild - The new content as a DocumentFragment to append.\n     * @param {NotifyArgs} e - Object containing information about the operation.\n     * @returns {void}\n     */\n    VirtualTreeContentRenderer.prototype.appendContent = function (target, newChild, e) {\n        if ((this.parent.dataSource instanceof _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_4__.DataManager && this.parent.dataSource.dataSource.url !== undefined\n            && !this.parent.dataSource.dataSource.offline && this.parent.dataSource.dataSource.url !== '') || (0,_utils__WEBPACK_IMPORTED_MODULE_5__.isCountRequired)(this.parent)\n            || (this.parent.isFrozenGrid() && (e.requestType === undefined || !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(e.virtualInfo) && (e.virtualInfo.direction === 'right' || e.virtualInfo.direction === 'left')))) {\n            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.getValue)('isExpandCollapse', e)) {\n                this.isRemoteExpand = true;\n            }\n            _super.prototype.appendContent.call(this, target, newChild, e);\n            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.getValue)('requestTypes', this).indexOf('isFrozen') !== -1) {\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.getValue)('requestTypes', this).splice((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.getValue)('requestTypes', this).indexOf('isFrozen'), 1);\n                this.requestType = this.requestType === 'isFrozen' ? undefined : this.requestType;\n            }\n        }\n        else {\n            var info = e.virtualInfo.sentinelInfo && e.virtualInfo.sentinelInfo.axis === 'Y' &&\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.getValue)('currentInfo', this).page && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.getValue)('currentInfo', this).page !== e.virtualInfo.page ?\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.getValue)('currentInfo', this) : e.virtualInfo;\n            var cBlock = (info.columnIndexes[0]) - 1;\n            var cOffset = this.getColumnOffset(cBlock);\n            var width = void 0;\n            if (this.parent.enableColumnVirtualization) {\n                this.header.virtualEle.adjustTable(cOffset, 0);\n                var cIndex = info.columnIndexes;\n                width = this.getColumnOffset(cIndex[cIndex.length - 1]) - this.getColumnOffset(cIndex[0] - 1) + '';\n                this.header.virtualEle.setWrapperWidth(width);\n            }\n            this.virtualEle.setWrapperWidth(width, (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.Browser.isIE || _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.Browser.info.name === 'edge'));\n            target = this.parent.createElement('tbody');\n            target.appendChild(newChild);\n            var replace = 'replaceWith';\n            this.getTable().querySelector('tbody')[\"\" + replace](target);\n            if (e.requestType === 'virtualscroll' && e.virtualInfo.sentinelInfo.axis === 'Y') {\n                this.isExpandCollapse = false;\n            }\n            if (!this.isExpandCollapse || this.translateY === 0) {\n                this.translateY = this.translateY < 0 ? 0 : this.translateY;\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.getValue)('virtualEle', this).adjustTable(cOffset, this.translateY);\n            }\n            else {\n                this.isExpandCollapse = false;\n            }\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.setValue)('prevInfo', this.previousInfo ? this.previousInfo : info, this);\n            if (e.requestType === 'virtualscroll' && e.virtualInfo.sentinelInfo.axis === 'X') {\n                this.parent.notify(_base_constant__WEBPACK_IMPORTED_MODULE_1__.autoCol, {});\n            }\n            var focusCell = 'focusCell';\n            var restoreAdd = 'restoreAdd';\n            var ensureSelectedRowPosition = 'ensureSelectedRowPosition';\n            _super.prototype[\"\" + focusCell].call(this, e);\n            var isAdd = 'isAdd';\n            if (this[\"\" + isAdd] && !this.parent.getContent().querySelector('.e-content').querySelector('.e-addedrow')) {\n                if (!(this.rowPosition === 'Top' || this.rowPosition === 'Bottom')) {\n                    if (this.dataRowIndex >= this.startIndex) {\n                        this.restoreNewRow();\n                    }\n                    else if (this.addRowIndex && this.addRowIndex > -1) {\n                        this[\"\" + isAdd] = false;\n                        this.parent.isEdit = false;\n                    }\n                }\n            }\n            this.restoreEditState();\n            _super.prototype[\"\" + restoreAdd].call(this);\n            _super.prototype[\"\" + ensureSelectedRowPosition].call(this);\n        }\n    };\n    /**\n     * Unsubscribes all event listeners to prevent memory leaks.\n     * This method is called when the component is being destroyed or when event listeners need to be cleaned up.\n     *\n     * @returns {void}\n     */\n    VirtualTreeContentRenderer.prototype.removeEventListener = function () {\n        if (this.parent.isDestroyed) {\n            return;\n        }\n        this.parent.off('data-ready', this.onDataReady);\n        this.parent.off('content-ready', this.fn);\n        this.parent.off('select-virtual-Row', this.toSelectVirtualRow);\n        this.parent.off('dataBound', this.dataBoundEvent);\n        this.parent.off('rowSelected', this.rowSelectedEvent);\n        this.parent.off(_base_constant__WEBPACK_IMPORTED_MODULE_1__.virtualActionArgs, this.virtualOtherAction);\n        this.parent.off(_base_constant__WEBPACK_IMPORTED_MODULE_1__.indexModifier, this.indexModifier);\n        this.parent.off('virtual-scroll-edit-action-begin', this.beginEdit);\n        this.parent.off('virtual-scroll-add-action-begin', this.beginAdd);\n        this.parent.off('virtual-scroll-edit-success', this.virtualEditSuccess);\n        this.parent.off('edit-reset', this.resetIseditValue);\n        this.parent.off('get-virtual-data', this.getData);\n        this.parent.off('virtual-scroll-edit-cancel', this.cancelEdit);\n        this.parent.off('select-row-on-context-open', this.toSelectRowOnContextOpen);\n        this.parent.off('refresh-virtual-editform-cells', this.refreshCell);\n        this.parent.off('virtaul-cell-focus', this.cellFocus);\n        this.parent.off('virtual-scroll-edit', this.restoreEditState);\n    };\n    return VirtualTreeContentRenderer;\n}(_syncfusion_ej2_grids__WEBPACK_IMPORTED_MODULE_0__.VirtualContentRenderer));\n\nvar TreeInterSectionObserver = /** @class */ (function (_super) {\n    __extends(TreeInterSectionObserver, _super);\n    function TreeInterSectionObserver() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.isWheeling = false;\n        _this.newPos = 0;\n        _this.lastPos = 0;\n        _this.timer = 0;\n        return _this;\n    }\n    /**\n     * Sets up observers to monitor scroll events on a given container\n     * and its movable companion within a virtual grid setup.\n     *\n     * @param {Function} callback - Function to call when a scroll event is detected.\n     * @param {Function} onEnterCallback - Function to call when a specific event, like entering a region, is detected.\n     * @param {IGrid} instance - The grid instance that requires observation.\n     * @returns {void}\n     */\n    TreeInterSectionObserver.prototype.observes = function (callback, onEnterCallback, instance) {\n        var containerRect = 'containerRect';\n        _super.prototype[\"\" + containerRect] = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.getValue)('options', this).container.getBoundingClientRect();\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.EventHandler.add((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.getValue)('options', this).container, 'scroll', this.virtualScrollHandlers(callback, onEnterCallback, instance), this);\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.getValue)('options', this).movableContainer) {\n            var movableContainerRect = 'movableContainerRect';\n            _super.prototype[\"\" + movableContainerRect] = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.getValue)('options', this).movableContainer.getBoundingClientRect();\n            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.EventHandler.add((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.getValue)('options', this).movableContainer, 'scroll', this.virtualScrollHandlers(callback, onEnterCallback, instance), this);\n        }\n    };\n    /**\n     * Clears the last known position.\n     *\n     * @returns {void} No value is returned from this function.\n     */\n    TreeInterSectionObserver.prototype.clear = function () {\n        this.lastPos = null;\n    };\n    /**\n     * Handles virtual scrolling events and manages scroll direction and debouncing for rendering updates.\n     *\n     * @private\n     * @param {Function} callback - Function to call on scroll end.\n     * @param {Function} onEnterCallback - Function to call on entering a virtual scrolling area.\n     * @param {IGrid} instance - The grid instance on which virtual scrolling is being implemented.\n     * @returns {Function} - A function that processes scroll events.\n     */\n    TreeInterSectionObserver.prototype.virtualScrollHandlers = function (callback, onEnterCallback, instance) {\n        var _this = this;\n        var delay = _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.Browser.info.name === 'chrome' ? 200 : 100;\n        var options = 'options';\n        var movableEle = 'movableEle';\n        var element = 'element';\n        var fromWheel = 'fromWheel';\n        var debounced100 = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.debounce)(callback, delay);\n        var debounced50 = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.debounce)(callback, 50);\n        this[\"\" + options].prevTop = this[\"\" + options].prevLeft = 0;\n        var isScrollByFocus = 'isScrollByFocus';\n        return function (e) {\n            if (instance.isEdit && instance.root.editModule[\"\" + isScrollByFocus]) {\n                instance.root.editModule[\"\" + isScrollByFocus] = false;\n                return;\n            }\n            var top = _this[\"\" + options].movableContainer ? _this[\"\" + options].container.scrollTop : e.target.scrollTop;\n            var left = _this[\"\" + options].movableContainer ? _this[\"\" + options].scrollbar.scrollLeft : e.target.scrollLeft;\n            var direction = _this[\"\" + options].prevTop < top ? 'down' : 'up';\n            direction = _this[\"\" + options].prevLeft === left ? direction : _this[\"\" + options].prevLeft < left ? 'right' : 'left';\n            _this[\"\" + options].prevTop = top;\n            _this[\"\" + options].prevLeft = left;\n            var current = _this.sentinelInfo[\"\" + direction];\n            var delta = 0;\n            _this.newPos = top;\n            if (_this.lastPos != null) { // && newPos < maxScroll\n                delta = _this.newPos - _this.lastPos;\n            }\n            _this.lastPos = _this.newPos;\n            if (_this.timer) {\n                clearTimeout(_this.timer);\n            }\n            _this.timer = setTimeout(_this.clear, 0);\n            if ((delta > 100 || delta < -100) && (e && e.preventDefault)) {\n                e.returnValue = false;\n                e.preventDefault();\n            }\n            if (_this[\"\" + options].axes.indexOf(current.axis) === -1) {\n                return;\n            }\n            var containerRect = 'containerRect';\n            _this[\"\" + containerRect] = _this[\"\" + options].container.getBoundingClientRect();\n            var check = _this.check(direction);\n            if (current.entered && (current.axis === 'X' || instance.enableVirtualMaskRow)) {\n                if (_this[\"\" + movableEle] && (direction === 'right' || direction === 'left')) {\n                    onEnterCallback(_this[\"\" + movableEle], current, direction, { top: top, left: left }, _this[\"\" + fromWheel], check);\n                }\n                else {\n                    onEnterCallback(_this[\"\" + element], current, direction, { top: top, left: left }, _this[\"\" + fromWheel], check);\n                }\n            }\n            if (check) {\n                var fn = debounced50;\n                if (current.axis === 'X') {\n                    fn({ direction: direction, sentinel: current, offset: { top: top, left: left },\n                        focusElement: document.activeElement });\n                }\n                else {\n                    if ((instance.dataSource instanceof _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_4__.DataManager && instance.dataSource.dataSource.url !== undefined\n                        && !instance.dataSource.dataSource.offline && instance.dataSource.dataSource.url !== '') || (0,_utils__WEBPACK_IMPORTED_MODULE_5__.isCountRequired)(instance)\n                        || instance.enableVirtualMaskRow) {\n                        fn = instance.enableVirtualMaskRow ? debounced100 : fn;\n                        fn({ direction: direction, sentinel: current, offset: { top: top, left: left },\n                            focusElement: document.activeElement });\n                    }\n                    else {\n                        callback({ direction: direction, sentinel: current, offset: { top: top, left: left },\n                            focusElement: document.activeElement });\n                    }\n                }\n            }\n            _this[\"\" + fromWheel] = false;\n        };\n    };\n    return TreeInterSectionObserver;\n}(_syncfusion_ej2_grids__WEBPACK_IMPORTED_MODULE_0__.InterSectionObserver));\n\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-treegrid/src/treegrid/renderer/virtual-tree-content-render.js?");

/***/ })

}]);