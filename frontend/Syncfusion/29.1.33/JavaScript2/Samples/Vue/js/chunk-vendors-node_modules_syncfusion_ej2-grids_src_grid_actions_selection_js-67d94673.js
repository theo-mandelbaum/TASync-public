"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkej2_vue_samples"] = self["webpackChunkej2_vue_samples"] || []).push([["chunk-vendors-node_modules_syncfusion_ej2-grids_src_grid_actions_selection_js-67d94673"],{

/***/ "./node_modules/@syncfusion/ej2-grids/src/grid/actions/selection.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-grids/src/grid/actions/selection.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Selection: () => (/* binding */ Selection)\n/* harmony export */ });\n/* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @syncfusion/ej2-base */ \"./node_modules/@syncfusion/ej2-base/index.js\");\n/* harmony import */ var _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @syncfusion/ej2-data */ \"./node_modules/@syncfusion/ej2-data/index.js\");\n/* harmony import */ var _base_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../base/util */ \"./node_modules/@syncfusion/ej2-grids/src/grid/base/util.js\");\n/* harmony import */ var _base_constant__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../base/constant */ \"./node_modules/@syncfusion/ej2-grids/src/grid/base/constant.js\");\n/* harmony import */ var _base_enum__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../base/enum */ \"./node_modules/@syncfusion/ej2-grids/src/grid/base/enum.js\");\n/* harmony import */ var _base_string_literals__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../base/string-literals */ \"./node_modules/@syncfusion/ej2-grids/src/grid/base/string-literals.js\");\n\n\n\n\n\n\n\n\n\n\n\n/**\n * The `Selection` module is used to handle cell and row selection.\n */\nvar Selection = /** @class */ (function () {\n    /**\n     * Constructor for the Grid selection module\n     *\n     * @param {IGrid} parent - specifies the IGrid\n     * @param {SelectionSettings} selectionSettings - specifies the selectionsettings\n     * @param {ServiceLocator} locator - specifies the ServiceLocator\n     * @hidden\n     */\n    function Selection(parent, selectionSettings, locator) {\n        //Internal letiables\n        /**\n         * @hidden\n         */\n        this.selectedRowIndexes = [];\n        /**\n         * @hidden\n         */\n        this.selectedRowCellIndexes = [];\n        /**\n         * @hidden\n         */\n        this.selectedRecords = [];\n        /**\n         * @hidden\n         */\n        this.preventFocus = false;\n        /**\n         *  @hidden\n         */\n        this.selectedColumnsIndexes = [];\n        this.checkBoxState = false;\n        this.isMultiShiftRequest = false;\n        this.isMultiCtrlRequest = false;\n        this.isMultiCtrlRequestCell = false;\n        this.enableSelectMultiTouch = false;\n        this.clearRowCheck = false;\n        this.selectRowCheck = false;\n        /**\n         * @hidden\n         */\n        this.selectedRowState = {};\n        this.unSelectedRowState = {};\n        this.totalRecordsCount = 0;\n        this.chkAllCollec = [];\n        this.isCheckedOnAdd = false;\n        this.persistSelectedData = [];\n        this.virtualSelectedData = [];\n        this.deSelectedData = [];\n        this.isHdrSelectAllClicked = false;\n        this.needColumnSelection = false;\n        this.isCancelDeSelect = false;\n        this.isPreventCellSelect = false;\n        this.disableUI = false;\n        this.isPersisted = false;\n        this.cmdKeyPressed = false;\n        this.cellselected = false;\n        this.isMultiSelection = false;\n        this.isAddRowsToSelection = false;\n        this.initialRowSelection = false;\n        this.isPrevRowSelection = false;\n        this.isKeyAction = false;\n        this.isRowDragSelected = false;\n        this.isPartialSelection = false;\n        this.rmtHdrChkbxClicked = false;\n        this.isCheckboxReset = false;\n        this.isRowDeselect = false;\n        /**\n         * @hidden\n         */\n        this.autoFillRLselection = true;\n        this.isFocusLastCell = false;\n        this.bottom = '0 0 2px 0';\n        this.top = '2px 0 0 0';\n        /* eslint-disable */\n        this.right_bottom = '0 2px 2px 0';\n        this.bottom_left = '0 0 2px 2px';\n        this.top_right = '2px 2px 0 0';\n        this.top_left = '2px 0 0 2px';\n        this.top_bottom = '2px 0 2px 0';\n        this.top_right_bottom = '2px 2px 2px 0';\n        this.top_bottom_left = '2px 0 2px 2px';\n        this.top_right_left = '2px 2px 0 2px';\n        this.right_bottom_left = '0 2px 2px 2px';\n        this.all_border = '2px';\n        this.parent = parent;\n        this.selectionSettings = selectionSettings;\n        this.factory = locator.getService('rendererFactory');\n        this.focus = locator.getService('focus');\n        this.addEventListener();\n        this.wireEvents();\n    }\n    Selection.prototype.initializeSelection = function () {\n        this.parent.log('selection_key_missing');\n        this.render();\n    };\n    /**\n     * The function used to trigger onActionBegin\n     *\n     * @param {Object} args - specifies the args\n     * @param {string} type - specifies the type\n     * @returns {void}\n     * @hidden\n     */\n    Selection.prototype.onActionBegin = function (args, type) {\n        this.parent.trigger(type, this.fDataUpdate(args));\n    };\n    Selection.prototype.fDataUpdate = function (args) {\n        if (!this.isMultiSelection && (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(args.cellIndex) || !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(args.rowIndex))) {\n            var rowObj = this.getRowObj((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(args.rowIndex) ? (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(args.cellIndex) ?\n                this.currentIndex : args.cellIndex.rowIndex : args.rowIndex);\n            args.foreignKeyData = rowObj.foreignKeyData;\n        }\n        return args;\n    };\n    /**\n     * The function used to trigger onActionComplete\n     *\n     * @param {Object} args - specifies the args\n     * @param {string} type - specifies the type\n     * @returns {void}\n     * @hidden\n     */\n    Selection.prototype.onActionComplete = function (args, type) {\n        this.parent.trigger(type, this.fDataUpdate(args));\n        this.isMultiSelection = false;\n    };\n    /**\n     * For internal use only - Get the module name.\n     *\n     * @returns {string} returns the module name\n     * @private\n     */\n    Selection.prototype.getModuleName = function () {\n        return 'selection';\n    };\n    /**\n     * To destroy the selection\n     *\n     * @returns {void}\n     * @hidden\n     */\n    Selection.prototype.destroy = function () {\n        var gridElement = this.parent.element;\n        if (!gridElement || (!gridElement.querySelector('.' + _base_string_literals__WEBPACK_IMPORTED_MODULE_5__.gridHeader) && !gridElement.querySelector('.' + _base_string_literals__WEBPACK_IMPORTED_MODULE_5__.gridContent))) {\n            return;\n        }\n        this.hidePopUp();\n        this.clearSelection();\n        this.destroyAutoFillElements();\n        this.removeEventListener();\n        this.unWireEvents();\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(this.parent.getContent(), 'mousedown', this.mouseDownHandler);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(this.parent.getHeaderContent(), 'mousedown', this.mouseDownHandler);\n    };\n    Selection.prototype.isEditing = function () {\n        return (this.parent.editSettings.mode === 'Normal' || (this.parent.editSettings.mode === 'Batch' && this.parent.editModule &&\n            this.parent.editModule.formObj && !this.parent.editModule.formObj.validate())) &&\n            (this.parent.isEdit && !this.parent.editSettings.showAddNewRow) && !this.parent.isPersistSelection;\n    };\n    Selection.prototype.getCurrentBatchRecordChanges = function () {\n        var gObj = this.parent;\n        if (gObj.editSettings.mode === 'Batch' && gObj.editModule) {\n            var currentRecords = (0,_base_util__WEBPACK_IMPORTED_MODULE_2__.iterateExtend)(this.parent.getCurrentViewRecords());\n            currentRecords = gObj.editSettings.newRowPosition === 'Bottom' ?\n                currentRecords.concat(this.parent.editModule.getBatchChanges()[_base_string_literals__WEBPACK_IMPORTED_MODULE_5__.addedRecords]) :\n                this.parent.editModule.getBatchChanges()[_base_string_literals__WEBPACK_IMPORTED_MODULE_5__.addedRecords].concat(currentRecords);\n            var deletedRecords = this.parent.editModule.getBatchChanges()[_base_string_literals__WEBPACK_IMPORTED_MODULE_5__.deletedRecords];\n            var primaryKey = this.parent.getPrimaryKeyFieldNames()[0];\n            for (var i = 0; i < (deletedRecords.length); i++) {\n                for (var j = 0; j < currentRecords.length; j++) {\n                    if (deletedRecords[parseInt(i.toString(), 10)][\"\" + primaryKey] === currentRecords[parseInt(j.toString(), 10)][\"\" + primaryKey]) {\n                        currentRecords.splice(j, 1);\n                        break;\n                    }\n                }\n            }\n            return currentRecords;\n        }\n        else if (this.parent.enableVirtualization && this.parent.groupSettings.columns.length && !this.parent.isPersistSelection) {\n            var selectedGroupedData = gObj.getCurrentViewRecords().filter(function (col) { return col['key'] === undefined; });\n            return selectedGroupedData;\n        }\n        else {\n            return gObj.getCurrentViewRecords();\n        }\n    };\n    /**\n     * Selects a row by the given index.\n     *\n     * @param  {number} index - Defines the row index.\n     * @param  {boolean} isToggle - If set to true, then it toggles the selection.\n     * @returns {void}\n     */\n    Selection.prototype.selectRow = function (index, isToggle) {\n        if (this.selectedRowIndexes.length && this.selectionSettings.enableSimpleMultiRowSelection) {\n            this.addRowsToSelection([index]);\n            return;\n        }\n        var gObj = this.parent;\n        var selectedRow = gObj.getRowByIndex(index);\n        var rowObj = selectedRow && gObj.getRowObjectFromUID(selectedRow.getAttribute('data-uid'));\n        if (this.isPartialSelection && rowObj && rowObj.isDataRow && !rowObj.isSelectable) {\n            return;\n        }\n        var selectData;\n        var isRemoved = false;\n        if (gObj.enableVirtualization && index > -1) {\n            var e = { selectedIndex: index, isAvailable: true };\n            this.parent.notify(_base_constant__WEBPACK_IMPORTED_MODULE_3__.selectVirtualRow, e);\n            if (selectedRow && (gObj.getRowObjectFromUID(selectedRow.getAttribute('data-uid')))) {\n                selectData = gObj.getRowObjectFromUID(selectedRow.getAttribute('data-uid')).data;\n            }\n            else {\n                if (e.isAvailable && !gObj.selectionSettings.persistSelection) {\n                    var prevSelectedData = this.parent.getSelectedRecords();\n                    if (prevSelectedData.length > 0) {\n                        this.clearRowSelection();\n                    }\n                }\n                return;\n            }\n        }\n        else {\n            selectData = this.getRowObj(index).data;\n        }\n        if (!this.isRowType() || !selectedRow || this.isEditing()) {\n            // if (this.isEditing()) {\n            //     gObj.selectedRowIndex = index;\n            // }\n            return;\n        }\n        var isRowSelected = selectedRow.hasAttribute('aria-selected');\n        this.activeTarget();\n        if (!isToggle || !this.selectedRowIndexes.length) {\n            isToggle = false;\n        }\n        else {\n            var isCheckboxModeResetOnRowClick = this.selectionSettings.checkboxMode === 'ResetOnRowClick';\n            var isSelectionTypeMultiple = !this.parent.isCheckBoxSelection && this.selectionSettings.type === 'Multiple';\n            if ((!isCheckboxModeResetOnRowClick && !isSelectionTypeMultiple) ||\n                (this.selectedRowIndexes.length === 1 && (isCheckboxModeResetOnRowClick || isSelectionTypeMultiple))) {\n                isToggle = !(this.isKeyAction && this.parent.isCheckBoxSelection) ? this.selectedRowIndexes.indexOf(index) !== -1 : false;\n            }\n            else {\n                isToggle = false;\n            }\n        }\n        this.isKeyAction = false;\n        var args;\n        var can = 'cancel';\n        if (!isToggle) {\n            args = {\n                data: selectData, rowIndex: index, isCtrlPressed: this.isMultiCtrlRequest,\n                isShiftPressed: this.isMultiShiftRequest, row: selectedRow,\n                previousRow: gObj.getRowByIndex(this.prevRowIndex),\n                previousRowIndex: this.prevRowIndex, target: this.actualTarget, cancel: false, isInteracted: this.isInteracted,\n                isHeaderCheckboxClicked: this.isHeaderCheckboxClicked\n            };\n            this.parent.trigger(_base_constant__WEBPACK_IMPORTED_MODULE_3__.rowSelecting, this.fDataUpdate(args), this.rowSelectingCallBack(args, isToggle, index, selectData, isRemoved, isRowSelected, can));\n        }\n        else {\n            if (this.selectionSettings.checkboxMode !== 'ResetOnRowClick' && this.selectionSettings.persistSelection) {\n                this.rowDeselect(_base_constant__WEBPACK_IMPORTED_MODULE_3__.rowDeselecting, [rowObj.index], [rowObj.data], [selectedRow], [rowObj.foreignKeyData], this.actualTarget);\n                if (this.isCancelDeSelect) {\n                    return;\n                }\n                if (!this.parent.isCheckBoxSelection) {\n                    this.selectedRowIndexes = [];\n                    this.selectedRecords = [];\n                    this.isRowSelected = false;\n                    this.selectRowIndex(-1);\n                }\n                this.rowDeselect(_base_constant__WEBPACK_IMPORTED_MODULE_3__.rowDeselected, [rowObj.index], [rowObj.data], [selectedRow], [rowObj.foreignKeyData], this.actualTarget, undefined, undefined, undefined);\n            }\n            this.rowSelectingCallBack(args, isToggle, index, selectData, isRemoved, isRowSelected, can)(args);\n        }\n    };\n    Selection.prototype.rowSelectingCallBack = function (args, isToggle, index, selectData, isRemoved, isRowSelected, can) {\n        var _this = this;\n        return function (args) {\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(args) && args[\"\" + can] === true) {\n                _this.disableInteracted();\n                return;\n            }\n            _this.index = index;\n            _this.toggle = isToggle;\n            _this.data = selectData;\n            _this.removed = isRemoved;\n            if (isRowSelected && _this.selectionSettings.persistSelection && !(_this.selectionSettings.checkboxMode === 'ResetOnRowClick')) {\n                _this.clearSelectedRow(index);\n                _this.selectRowCallBack();\n            }\n            else if (!isRowSelected && _this.selectionSettings.persistSelection && _this.parent.isCheckBoxSelection &&\n                _this.selectionSettings.checkboxMode !== 'ResetOnRowClick') {\n                _this.selectRowCallBack();\n            }\n            if (_this.selectionSettings.checkboxMode === 'ResetOnRowClick') {\n                _this.isCheckboxReset = true;\n                _this.clearSelection();\n            }\n            if (!_this.selectionSettings.persistSelection || _this.selectionSettings.checkboxMode === 'ResetOnRowClick' ||\n                (!_this.parent.isCheckBoxSelection && _this.selectionSettings.persistSelection)) {\n                _this.selectRowCheck = true;\n                _this.clearRow();\n            }\n        };\n    };\n    Selection.prototype.selectRowCallBack = function () {\n        var gObj = this.parent;\n        var args;\n        var index = this.index;\n        var isToggle = this.toggle;\n        var selectData = this.data;\n        var isRemoved = this.removed;\n        var selectedRow = gObj.getRowByIndex(index);\n        if (!isToggle && !isRemoved) {\n            if (this.selectedRowIndexes.indexOf(index) <= -1) {\n                this.updateRowSelection(selectedRow, index);\n            }\n            this.selectRowIndex(index);\n        }\n        if (!isToggle) {\n            args = {\n                data: selectData, rowIndex: index,\n                row: selectedRow, previousRow: gObj.getRowByIndex(this.prevRowIndex),\n                previousRowIndex: this.prevRowIndex, target: this.actualTarget, isInteracted: this.isInteracted,\n                isHeaderCheckBoxClicked: this.isHeaderCheckboxClicked, rowIndexes: index\n            };\n            this.onActionComplete(args, _base_constant__WEBPACK_IMPORTED_MODULE_3__.rowSelected);\n        }\n        this.isInteracted = false;\n        this.updateRowProps(index);\n    };\n    /**\n     * Selects a range of rows from start and end row indexes.\n     *\n     * @param  {number} startIndex - Specifies the start row index.\n     * @param  {number} endIndex - Specifies the end row index.\n     * @returns {void}\n     */\n    Selection.prototype.selectRowsByRange = function (startIndex, endIndex) {\n        this.selectRows(this.getCollectionFromIndexes(startIndex, endIndex));\n        this.selectRowIndex(endIndex);\n    };\n    Selection.prototype.selectedDataUpdate = function (selectedData, foreignKeyData, selectedRows, rowIndexes, selectableRowIndex) {\n        for (var i = 0, len = rowIndexes.length; i < len; i++) {\n            var currentRow = this.parent.getDataRows()[rowIndexes[parseInt(i.toString(), 10)]];\n            if (this.parent.enableVirtualization) {\n                currentRow = this.parent.getRowByIndex(rowIndexes[parseInt(i.toString(), 10)]);\n            }\n            var rowObj = this.getRowObj(currentRow);\n            if (rowObj && rowObj.isDataRow && rowObj.isSelectable) {\n                selectedData.push(rowObj.data);\n                selectedRows.push(currentRow);\n                foreignKeyData.push(rowObj.foreignKeyData);\n            }\n            else {\n                if (this.isPartialSelection && selectableRowIndex) {\n                    selectableRowIndex.splice(selectableRowIndex.indexOf(rowIndexes[parseInt(i.toString(), 10)]), 1);\n                }\n            }\n        }\n    };\n    /**\n     * Selects a collection of rows by index.\n     *\n     * @param  {number[]} rowIndexes - Specifies an array of row indexes.\n     * @returns {void}\n     */\n    Selection.prototype.selectRows = function (rowIndexes) {\n        var _this = this;\n        var gObj = this.parent;\n        var selectableRowIndex = rowIndexes.slice();\n        var rowIndex = !this.isSingleSel() ? rowIndexes[0] : rowIndexes[rowIndexes.length - 1];\n        this.isMultiSelection = true;\n        var selectedRows = [];\n        var foreignKeyData = [];\n        var can = 'cancel';\n        var selectedData = [];\n        if (!this.isRowType() || this.isEditing()) {\n            return;\n        }\n        this.selectedDataUpdate(selectedData, foreignKeyData, selectedRows, rowIndexes, selectableRowIndex);\n        this.activeTarget();\n        var args = {\n            cancel: false,\n            rowIndexes: selectableRowIndex, row: selectedRows, rowIndex: rowIndex, target: this.actualTarget,\n            prevRow: gObj.getRows()[this.prevRowIndex], previousRowIndex: this.prevRowIndex,\n            isInteracted: this.isInteracted, isCtrlPressed: this.isMultiCtrlRequest, isShiftPressed: this.isMultiShiftRequest,\n            data: selectedData, isHeaderCheckboxClicked: this.isHeaderCheckboxClicked, foreignKeyData: foreignKeyData\n        };\n        this.parent.trigger(_base_constant__WEBPACK_IMPORTED_MODULE_3__.rowSelecting, this.fDataUpdate(args), function (args) {\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(args) && args[\"\" + can] === true) {\n                _this.disableInteracted();\n                return;\n            }\n            if (!(_this.selectionSettings.persistSelection && gObj.allowRowDragAndDrop && _this.isDragged)) {\n                _this.clearRow();\n            }\n            _this.selectRowIndex(selectableRowIndex.slice(-1)[0]);\n            var selectRowFn = function (index, preventFocus) {\n                _this.updateRowSelection(gObj.getRowByIndex(index), index, preventFocus);\n                _this.updateRowProps(rowIndex);\n            };\n            if (!_this.isSingleSel()) {\n                for (var _i = 0, selectableRowIndex_1 = selectableRowIndex; _i < selectableRowIndex_1.length; _i++) {\n                    var rowIdx = selectableRowIndex_1[_i];\n                    selectRowFn(rowIdx, gObj.enableVirtualization ? true : false);\n                }\n            }\n            else {\n                selectRowFn(rowIndex);\n            }\n            if (_this.checkVirtualCheckBox() && !_this.parent.isPersistSelection) {\n                if (selectableRowIndex.length === _this.totalRecordsCount) {\n                    _this.virtualSelectedData = _this.virtualCheckBoxData().slice();\n                    _this.selectedRowIndexes = Object.keys(_this.virtualSelectedData).map(function (key) { return parseInt(key, 10); });\n                    _this.setCheckAllState();\n                }\n                else {\n                    var selectionData = selectableRowIndex.filter(function (index) {\n                        return _this.selectedRowIndexes.indexOf(index) === -1;\n                    });\n                    if (selectionData.length > 0) {\n                        var allData = _this.virtualCheckBoxData().slice();\n                        for (var i = 0; i < selectionData.length; i++) {\n                            var record = allData[selectionData[i]];\n                            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(record)) {\n                                _this.virtualSelectedData.push(record);\n                                _this.selectedRowIndexes.push(selectionData[i]);\n                            }\n                        }\n                        _this.setCheckAllState();\n                    }\n                }\n            }\n            args = {\n                rowIndexes: selectableRowIndex, row: selectedRows, rowIndex: rowIndex, target: _this.actualTarget,\n                prevRow: gObj.getRows()[_this.prevRowIndex], previousRowIndex: _this.prevRowIndex,\n                data: _this.getSelectedRecords(), isInteracted: _this.isInteracted,\n                isHeaderCheckboxClicked: _this.isHeaderCheckboxClicked, foreignKeyData: foreignKeyData\n            };\n            if (_this.isRowSelected) {\n                _this.onActionComplete(args, _base_constant__WEBPACK_IMPORTED_MODULE_3__.rowSelected);\n            }\n            _this.isInteracted = false;\n        });\n    };\n    /**\n     * Select rows with existing row selection by passing row indexes.\n     *\n     * @param {number} rowIndexes - Specifies the row indexes.\n     * @returns {void}\n     * @hidden\n     */\n    Selection.prototype.addRowsToSelection = function (rowIndexes) {\n        var gObj = this.parent;\n        var can = 'cancel';\n        var target = this.target;\n        this.isMultiSelection = true;\n        var selectedRows = [];\n        var foreignKeyData = [];\n        var selectedData = [];\n        var indexes = gObj.getSelectedRowIndexes().concat(rowIndexes);\n        var selectedRow = !this.isSingleSel() ? gObj.getRowByIndex(rowIndexes[0]) :\n            gObj.getRowByIndex(rowIndexes[rowIndexes.length - 1]);\n        if ((!this.isRowType() || this.isEditing()) && !this.selectionSettings.checkboxOnly) {\n            return;\n        }\n        var args;\n        var checkboxColumn = this.parent.getColumns().filter(function (col) { return col.type === 'checkbox'; });\n        if (this.isMultiCtrlRequest && !checkboxColumn.length) {\n            this.selectedDataUpdate(selectedData, foreignKeyData, selectedRows, indexes);\n        }\n        for (var _i = 0, rowIndexes_1 = rowIndexes; _i < rowIndexes_1.length; _i++) {\n            var rowIndex = rowIndexes_1[_i];\n            var rowObj = this.getRowObj(rowIndex);\n            var isUnSelected = this.selectedRowIndexes.indexOf(rowIndex) > -1;\n            if (this.isPartialSelection && rowObj && rowObj.isDataRow && !rowObj.isSelectable) {\n                continue;\n            }\n            this.selectRowIndex(rowIndex);\n            if (isUnSelected && ((checkboxColumn.length ? true : this.selectionSettings.enableToggle) || this.isMultiCtrlRequest)) {\n                this.isAddRowsToSelection = true;\n                this.rowDeselect(_base_constant__WEBPACK_IMPORTED_MODULE_3__.rowDeselecting, [rowIndex], [rowObj.data], [selectedRow], [rowObj.foreignKeyData], target);\n                if (this.isCancelDeSelect) {\n                    return;\n                }\n                if (this.checkVirtualCheckBox() && !this.parent.isPersistSelection) {\n                    this.virtualSelectedData.splice(this.virtualSelectedData.indexOf(rowObj.data), 1);\n                }\n                this.selectedRowIndexes.splice(this.selectedRowIndexes.indexOf(rowIndex), 1);\n                this.selectedRecords.splice(this.selectedRecords.indexOf(selectedRow), 1);\n                this.selectRowIndex(this.selectedRowIndexes.length ? this.selectedRowIndexes[this.selectedRowIndexes.length - 1] : -1);\n                selectedRow.removeAttribute('aria-selected');\n                this.addRemoveClassesForRow(selectedRow, false, null, 'e-selectionbackground', 'e-active');\n                this.rowDeselect(_base_constant__WEBPACK_IMPORTED_MODULE_3__.rowDeselected, [rowIndex], [rowObj.data], [selectedRow], [rowObj.foreignKeyData], target, undefined, undefined, undefined);\n                this.isInteracted = false;\n                this.isMultiSelection = false;\n                this.isAddRowsToSelection = false;\n                this.isHdrSelectAllClicked = false;\n            }\n            else {\n                this.activeTarget();\n                args = {\n                    cancel: false,\n                    data: selectedData.length ? selectedData : rowObj.data, rowIndex: rowIndex, row: selectedRows.length ? selectedRows :\n                        selectedRow, target: this.actualTarget, prevRow: gObj.getRows()[this.prevRowIndex],\n                    previousRowIndex: this.prevRowIndex, isCtrlPressed: this.isMultiCtrlRequest, isShiftPressed: this.isMultiShiftRequest,\n                    foreignKeyData: foreignKeyData.length ? foreignKeyData : rowObj.foreignKeyData, isInteracted: this.isInteracted,\n                    isHeaderCheckboxClicked: this.isHeaderCheckboxClicked, rowIndexes: indexes\n                };\n                this.parent.trigger(_base_constant__WEBPACK_IMPORTED_MODULE_3__.rowSelecting, this.fDataUpdate(args));\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(args) && args[\"\" + can] === true) {\n                    this.disableInteracted();\n                    return;\n                }\n                if (this.isSingleSel()) {\n                    this.clearRow();\n                }\n                this.updateRowSelection(selectedRow, rowIndex);\n            }\n            if (!isUnSelected) {\n                args = {\n                    data: selectedData.length ? selectedData : rowObj.data, rowIndex: rowIndex, row: selectedRows.length ? selectedRows :\n                        selectedRow, target: this.actualTarget, prevRow: gObj.getRows()[this.prevRowIndex],\n                    previousRowIndex: this.prevRowIndex, foreignKeyData: foreignKeyData.length ? foreignKeyData : rowObj.foreignKeyData,\n                    isInteracted: this.isInteracted, isHeaderCheckboxClicked: this.isHeaderCheckboxClicked, rowIndexes: indexes\n                };\n                this.onActionComplete(args, _base_constant__WEBPACK_IMPORTED_MODULE_3__.rowSelected);\n            }\n            this.isInteracted = false;\n            this.updateRowProps(rowIndex);\n            if (this.isSingleSel()) {\n                break;\n            }\n        }\n    };\n    Selection.prototype.getCollectionFromIndexes = function (startIndex, endIndex) {\n        var indexes = [];\n        // eslint-disable-next-line prefer-const\n        var _a = (startIndex <= endIndex) ?\n            { i: startIndex, max: endIndex } : { i: endIndex, max: startIndex }, i = _a.i, max = _a.max;\n        for (; i <= max; i++) {\n            indexes.push(i);\n        }\n        if (startIndex > endIndex) {\n            indexes.reverse();\n        }\n        return indexes;\n    };\n    Selection.prototype.clearRow = function () {\n        this.clearRowCheck = true;\n        this.clearRowSelection();\n    };\n    Selection.prototype.clearRowCallBack = function () {\n        if (this.isCancelDeSelect && this.parent.checkAllRows !== 'Check') {\n            return;\n        }\n        this.selectedRowIndexes = [];\n        this.selectedRecords = [];\n        this.selectRowIndex(-1);\n        if (this.isSingleSel() && this.parent.isPersistSelection) {\n            this.selectedRowState = {};\n        }\n    };\n    Selection.prototype.clearSelectedRow = function (index) {\n        if (this.toggle) {\n            var selectedEle = this.parent.getRowByIndex(index);\n            if (!this.disableUI) {\n                selectedEle.removeAttribute('aria-selected');\n                this.addRemoveClassesForRow(selectedEle, false, true, 'e-selectionbackground', 'e-active');\n            }\n            this.removed = true;\n            this.updatePersistCollection(selectedEle, false);\n            this.updateCheckBoxes(selectedEle);\n            this.selectedRowIndexes.splice(this.selectedRowIndexes.indexOf(index), 1);\n            this.selectedRecords.splice(this.selectedRecords.indexOf(this.parent.getRowByIndex(index)), 1);\n        }\n    };\n    Selection.prototype.updateRowProps = function (startIndex) {\n        this.prevRowIndex = startIndex;\n        this.isRowSelected = this.selectedRowIndexes.length && true;\n    };\n    Selection.prototype.getPkValue = function (pkField, data) {\n        return pkField ? (0,_base_util__WEBPACK_IMPORTED_MODULE_2__.isComplexField)(pkField) ? (0,_base_util__WEBPACK_IMPORTED_MODULE_2__.getObject)(pkField, data) : data[\"\" + pkField] : data[\"\" + pkField];\n    };\n    Selection.prototype.updatePersistCollection = function (selectedRow, chkState) {\n        var _this = this;\n        if ((this.parent.isPersistSelection || this.parent.selectionSettings.persistSelection &&\n            this.parent.getPrimaryKeyFieldNames().length > 0) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(selectedRow)) {\n            if (!this.parent.isPersistSelection) {\n                this.ensureCheckboxFieldSelection();\n            }\n            var rowObj = this.getRowObj(selectedRow);\n            var pKey_1 = rowObj.data ? this.getPkValue(this.primaryKey, rowObj.data) : null;\n            if (pKey_1 === null) {\n                return;\n            }\n            rowObj.isSelected = chkState;\n            if ((chkState && !this.isPartialSelection) || (this.isPartialSelection && rowObj.isSelectable && rowObj.isSelected)) {\n                this.selectedRowState[\"\" + pKey_1] = chkState;\n                delete (this.unSelectedRowState[\"\" + pKey_1]);\n                if (!this.persistSelectedData.some(function (data) { return _this.getPkValue(_this.primaryKey, data) === pKey_1; })) {\n                    this.persistSelectedData.push(rowObj.data);\n                }\n            }\n            else {\n                this.updatePersistDelete(pKey_1);\n            }\n        }\n    };\n    Selection.prototype.updatePersistDelete = function (pKey, isPartialSelection) {\n        var _this = this;\n        delete (this.selectedRowState[\"\" + pKey]);\n        if (this.rmtHdrChkbxClicked) {\n            this.unSelectedRowState[\"\" + pKey] = true;\n        }\n        var index;\n        var isPresent = this.persistSelectedData.some(function (data, i) {\n            index = i;\n            return _this.getPkValue(_this.primaryKey, data) === pKey;\n        });\n        if (isPresent) {\n            this.persistSelectedData.splice(index, 1);\n            if (isPartialSelection) {\n                this.parent.partialSelectedRecords.splice(index, 1);\n            }\n        }\n    };\n    Selection.prototype.updateCheckBoxes = function (row, chkState, rowIndex) {\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(row)) {\n            var chkBox = row.querySelector('.e-checkselect');\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(chkBox)) {\n                (0,_base_util__WEBPACK_IMPORTED_MODULE_2__.removeAddCboxClasses)(chkBox.nextElementSibling, chkState);\n                (0,_base_util__WEBPACK_IMPORTED_MODULE_2__.setChecked)(chkBox, chkState);\n                if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.checkedTarget) || (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.checkedTarget)\n                    && !this.checkedTarget.classList.contains('e-checkselectall'))) {\n                    this.setCheckAllState(rowIndex);\n                }\n            }\n        }\n    };\n    Selection.prototype.updateRowSelection = function (selectedRow, startIndex, preventFocus) {\n        if (!selectedRow) {\n            return;\n        }\n        if (this.selectedRowIndexes.indexOf(startIndex) === -1) {\n            if (this.checkVirtualCheckBox() && !this.parent.isPersistSelection) {\n                this.virtualSelectedData.push(this.parent.getRowObjectFromUID(selectedRow.getAttribute('data-uid')).data);\n            }\n            this.selectedRowIndexes.push(startIndex);\n            this.selectedRecords.push(selectedRow);\n        }\n        selectedRow.setAttribute('aria-selected', 'true');\n        this.updatePersistCollection(selectedRow, true);\n        this.updateCheckBoxes(selectedRow, true);\n        this.addRemoveClassesForRow(selectedRow, true, null, 'e-selectionbackground', 'e-active');\n        if (!this.preventFocus && !(this.parent.isFocusFirstCell || this.isFocusLastCell)) {\n            var target = this.focus.getPrevIndexes().cellIndex ?\n                selectedRow.cells[this.focus.getPrevIndexes().cellIndex] :\n                selectedRow.querySelector('.e-selectionbackground:not(.e-hide):not(.e-detailrowcollapse):not(.e-detailrowexpand)');\n            if (this.parent.contextMenuModule && this.mouseButton === 2) {\n                target = this.parent.contextMenuModule.cell;\n            }\n            if (!target || preventFocus) {\n                return;\n            }\n            this.focus.onClick({ target: target }, true);\n        }\n        else {\n            if (this.parent.isFocusFirstCell || this.isFocusLastCell) {\n                this.parent.isFocusFirstCell = false;\n                var selector = this.isFocusLastCell ? 'last-child' : 'first-child';\n                var target = selectedRow.querySelector('.e-selectionbackground.e-rowcell:not(.e-hide, .e-detailrowcollapse, .e-detailrowexpand, .e-rowdragdrop, .e-gridchkbox):' + selector);\n                this.isFocusLastCell = false;\n                if (target) {\n                    this.focus.onClick({ target: target }, true, true);\n                }\n            }\n        }\n    };\n    /**\n     * Deselects the currently selected rows and cells.\n     *\n     * @returns {void}\n     */\n    Selection.prototype.clearSelection = function () {\n        this.checkSelectAllClicked = true;\n        if (this.selectionSettings.persistSelection && this.persistSelectedData.length) {\n            this.deSelectedData = (0,_base_util__WEBPACK_IMPORTED_MODULE_2__.iterateExtend)(this.persistSelectedData);\n        }\n        if (!this.parent.isPersistSelection || (this.parent.isPersistSelection && !this.parent.isEdit) ||\n            (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.checkedTarget) && this.checkedTarget.classList.contains('e-checkselectall'))) {\n            var span = this.parent.element.querySelector('.e-gridpopup').querySelector('span');\n            if (span.classList.contains('e-rowselect')) {\n                span.classList.remove('e-spanclicked');\n            }\n            if (this.parent.isPersistSelection) {\n                this.persistSelectedData = [];\n                this.selectedRowState = {};\n            }\n            this.clearRowSelection();\n            this.clearCellSelection();\n            this.clearColumnSelection();\n            this.prevRowIndex = undefined;\n            this.prevCIdxs = undefined;\n            this.prevECIdxs = undefined;\n            this.enableSelectMultiTouch = false;\n            this.isInteracted = false;\n            this.checkSelectAllClicked = false;\n            this.isHdrSelectAllClicked = false;\n        }\n    };\n    /**\n     * Deselects the currently selected rows.\n     *\n     * @returns {void}\n     */\n    Selection.prototype.clearRowSelection = function () {\n        var _this = this;\n        if (this.isRowSelected) {\n            var rows_1 = this.parent.getDataRows();\n            var data_1 = [];\n            var row_1 = [];\n            var rowIndex_1 = [];\n            var foreignKeyData_1 = [];\n            var target_1 = this.target;\n            this.isRowDeselect = true;\n            for (var i = 0, len = this.selectedRowIndexes.length; i < len; i++) {\n                var currentRow = void 0;\n                if (this.parent.enableVirtualization || (this.parent.enableInfiniteScrolling\n                    && this.parent.infiniteScrollSettings.enableCache)) {\n                    currentRow = this.parent.getRowByIndex(this.selectedRowIndexes[parseInt(i.toString(), 10)]);\n                }\n                else {\n                    currentRow = this.parent.editSettings.mode === 'Batch' ?\n                        this.parent.getRows()[this.selectedRowIndexes[parseInt(i.toString(), 10)]]\n                        : this.parent.getDataRows()[this.selectedRowIndexes[parseInt(i.toString(), 10)]];\n                }\n                var rowObj = this.getRowObj(currentRow);\n                if (rowObj) {\n                    data_1.push(rowObj.data);\n                    row_1.push(currentRow);\n                    rowIndex_1.push(this.selectedRowIndexes[parseInt(i.toString(), 10)]);\n                    foreignKeyData_1.push(rowObj.foreignKeyData);\n                }\n            }\n            if (this.selectionSettings.persistSelection && this.selectionSettings.checkboxMode !== 'ResetOnRowClick') {\n                this.isRowClicked = this.checkSelectAllClicked ? true : false;\n            }\n            this.rowDeselect(_base_constant__WEBPACK_IMPORTED_MODULE_3__.rowDeselecting, rowIndex_1, data_1, row_1, foreignKeyData_1, target_1, null, function () {\n                if (_this.isCancelDeSelect && (_this.isRowClicked || _this.checkSelectAllClicked || (_this.isInteracted &&\n                    !_this.parent.isPersistSelection))) {\n                    if (_this.parent.isPersistSelection) {\n                        if (_this.getCheckAllStatus(_this.parent.element.querySelector('.e-checkselectall')) === 'Intermediate' || _this.parent.isPersistSelection) {\n                            for (var i = 0; i < _this.selectedRecords.length; i++) {\n                                _this.updatePersistCollection(_this.selectedRecords[parseInt(i.toString(), 10)], true);\n                            }\n                        }\n                        else {\n                            _this.parent.checkAllRows = 'Check';\n                            _this.updatePersistSelectedData(true);\n                        }\n                    }\n                    if (_this.clearRowCheck) {\n                        _this.clearRowCallBack();\n                        _this.clearRowCheck = false;\n                        if (_this.selectRowCheck) {\n                            _this.selectRowCallBack();\n                            _this.selectRowCheck = false;\n                        }\n                    }\n                    return;\n                }\n                var element = [].slice.call(rows_1.filter(function (record) { return record.hasAttribute('aria-selected'); }));\n                for (var j = 0; j < element.length; j++) {\n                    if (!_this.disableUI) {\n                        element[parseInt(j.toString(), 10)].removeAttribute('aria-selected');\n                        _this.addRemoveClassesForRow(element[parseInt(j.toString(), 10)], false, true, 'e-selectionbackground', 'e-active');\n                    }\n                    // tslint:disable-next-line:align\n                    if (!_this.isPrevRowSelection) {\n                        _this.updatePersistCollection(element[parseInt(j.toString(), 10)], false);\n                    }\n                    _this.updateCheckBoxes(element[parseInt(j.toString(), 10)]);\n                }\n                if ((_this.parent.enableVirtualization || (_this.parent.enableInfiniteScrolling\n                    && _this.parent.infiniteScrollSettings.enableCache)) && _this.selectedRecords.length && !element.length\n                    && !_this.parent.selectionSettings.persistSelection && !_this.disableUI\n                    && !_this.parent.isCheckBoxSelection) {\n                    _this.addRemoveClassesForRow(null, false, true);\n                }\n                _this.virtualSelectedData = [];\n                _this.selectedRowIndexes = [];\n                _this.selectedRecords = [];\n                _this.isRowSelected = false;\n                _this.selectRowIndex(-1);\n                _this.isPrevRowSelection = false;\n                _this.rowDeselect(_base_constant__WEBPACK_IMPORTED_MODULE_3__.rowDeselected, rowIndex_1, data_1, row_1, foreignKeyData_1, target_1, null, undefined, null);\n                if (_this.clearRowCheck) {\n                    _this.clearRowCallBack();\n                    _this.clearRowCheck = false;\n                    if (_this.selectRowCheck) {\n                        _this.selectRowCallBack();\n                        _this.selectRowCheck = false;\n                    }\n                }\n            }, null);\n            this.isRowDeselect = false;\n        }\n        else {\n            if (this.clearRowCheck) {\n                this.clearRowCallBack();\n                this.clearRowCheck = false;\n                if (this.selectRowCheck) {\n                    this.selectRowCallBack();\n                    this.selectRowCheck = false;\n                }\n            }\n        }\n    };\n    Selection.prototype.rowDeselect = function (type, rowIndex, data, row, \n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    foreignKeyData, target, mRow, rowDeselectCallBack, frozenRightRow) {\n        var _this = this;\n        if ((this.selectionSettings.persistSelection && (this.isRowClicked || !this.isRowDeselect || this.checkSelectAllClicked || (this.focus['activeKey'] &&\n            this.focus.currentInfo.element.classList.contains('e-gridchkbox') && this.focus['activeKey'] === 'space'))) ||\n            !this.selectionSettings.persistSelection) {\n            var cancl_1 = 'cancel';\n            var isSingleDeSel = rowIndex.length === 1 && this.deSelectedData.length === 1;\n            var rowDeselectObj = {\n                rowIndex: rowIndex[0], data: this.selectionSettings.persistSelection && (this.parent.checkAllRows === 'Uncheck' &&\n                    !isSingleDeSel) && this.selectionSettings.checkboxMode !== 'ResetOnRowClick' ? this.deSelectedData : data,\n                foreignKeyData: foreignKeyData, cancel: false, isInteracted: this.isInteracted,\n                isHeaderCheckboxClicked: this.isHeaderCheckboxClicked\n            };\n            if (type === 'rowDeselected') {\n                delete rowDeselectObj.cancel;\n            }\n            var rowInString = 'row';\n            var target_2 = 'target';\n            var rowidx = 'rowIndex';\n            var rowidxex = 'rowIndexes';\n            var dataTxt = 'data';\n            var foreignKey = 'foreignKeyData';\n            rowDeselectObj[\"\" + rowInString] = row;\n            rowDeselectObj[\"\" + target_2] = this.actualTarget;\n            var isHeaderCheckBxClick = this.actualTarget && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(this.actualTarget, 'thead'));\n            if (isHeaderCheckBxClick || rowIndex.length > 1) {\n                rowDeselectObj[\"\" + rowidx] = rowIndex[0];\n                rowDeselectObj[\"\" + rowidxex] = rowIndex;\n            }\n            else if (rowIndex.length === 1) {\n                rowDeselectObj[\"\" + dataTxt] = rowDeselectObj[\"\" + dataTxt][0];\n                rowDeselectObj[\"\" + rowInString] = rowDeselectObj[\"\" + rowInString][0];\n                rowDeselectObj[\"\" + foreignKey] = rowDeselectObj[\"\" + foreignKey][0];\n                if (this.isAddRowsToSelection) {\n                    rowDeselectObj[\"\" + rowidxex] = rowIndex;\n                }\n            }\n            this.parent.trigger(type, rowDeselectObj, function (args) {\n                _this.isCancelDeSelect = args[\"\" + cancl_1];\n                if (!_this.isCancelDeSelect || (!_this.isRowClicked && !_this.isInteracted && !_this.checkSelectAllClicked)) {\n                    _this.updatePersistCollection(row[0], false);\n                    _this.updateCheckBoxes(row[0], undefined, rowIndex[0]);\n                }\n                if (rowDeselectCallBack !== undefined) {\n                    rowDeselectCallBack();\n                }\n            });\n        }\n        else if (this.selectionSettings.persistSelection && !this.isInteracted) {\n            if (rowDeselectCallBack !== undefined) {\n                rowDeselectCallBack();\n            }\n        }\n    };\n    Selection.prototype.getRowObj = function (row) {\n        if (row === void 0) { row = this.currentIndex; }\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(row)) {\n            return {};\n        }\n        if (typeof row === 'number') {\n            row = this.parent.getRowByIndex(row);\n        }\n        if (row) {\n            return this.parent.getRowObjectFromUID(row.getAttribute('data-uid')) || {};\n        }\n        return {};\n    };\n    /**\n     * Selects a cell by the given index.\n     *\n     * @param  {IIndex} cellIndex - Defines the row and column indexes.\n     * @param  {boolean} isToggle - If set to true, then it toggles the selection.\n     * @returns {void}\n     */\n    Selection.prototype.selectCell = function (cellIndex, isToggle) {\n        if (!this.isCellType() || (this.isCellType() && (this.parent.enableVirtualization ||\n            (this.parent.enableInfiniteScrolling && this.parent.infiniteScrollSettings.enableCache)))) {\n            return;\n        }\n        var gObj = this.parent;\n        var args;\n        var selectedCell = gObj.getCellFromIndex(cellIndex.rowIndex, this.getColIndex(cellIndex.rowIndex, cellIndex.cellIndex));\n        this.currentIndex = cellIndex.rowIndex;\n        var selectedData = this.getCurrentBatchRecordChanges()[this.currentIndex];\n        if (!this.isCellType() || !selectedCell || this.isEditing()) {\n            return;\n        }\n        var isCellSelected = selectedCell.classList.contains('e-cellselectionbackground');\n        isToggle = !isToggle ? isToggle : (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isUndefined)(this.prevCIdxs) &&\n            cellIndex.rowIndex === this.prevCIdxs.rowIndex && cellIndex.cellIndex === this.prevCIdxs.cellIndex &&\n            isCellSelected);\n        if (!isToggle) {\n            args = {\n                data: selectedData, cellIndex: cellIndex,\n                isCtrlPressed: this.isMultiCtrlRequest, isShiftPressed: this.isMultiShiftRequest,\n                previousRowCell: this.prevECIdxs ?\n                    this.getCellIndex(this.prevECIdxs.rowIndex, this.prevECIdxs.cellIndex) : undefined,\n                cancel: false\n            };\n            var currentCell = 'currentCell';\n            args[\"\" + currentCell] = selectedCell;\n            var previousRowCellIndex = 'previousRowCellIndex';\n            args[\"\" + previousRowCellIndex] = this.prevECIdxs;\n            this.parent.trigger(_base_constant__WEBPACK_IMPORTED_MODULE_3__.cellSelecting, this.fDataUpdate(args), this.successCallBack(args, isToggle, cellIndex, selectedCell, selectedData));\n            this.cellselected = true;\n        }\n        else {\n            this.successCallBack(args, isToggle, cellIndex, selectedCell, selectedData)(args);\n        }\n    };\n    Selection.prototype.successCallBack = function (cellSelectingArgs, isToggle, cellIndex, selectedCell, selectedData) {\n        var _this = this;\n        return function (cellSelectingArgs) {\n            var cncl = 'cancel';\n            var currentCell = 'currentCell';\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(cellSelectingArgs) && cellSelectingArgs[\"\" + cncl] === true) {\n                return;\n            }\n            if (!isToggle) {\n                cellSelectingArgs[\"\" + currentCell] = cellSelectingArgs[\"\" + currentCell] ? cellSelectingArgs[\"\" + currentCell] : selectedCell;\n            }\n            _this.clearCell();\n            if (!isToggle) {\n                _this.updateCellSelection(selectedCell, cellIndex.rowIndex, cellIndex.cellIndex);\n            }\n            if (!isToggle) {\n                var args = {\n                    data: selectedData, cellIndex: cellIndex, currentCell: selectedCell,\n                    selectedRowCellIndex: _this.selectedRowCellIndexes,\n                    previousRowCell: _this.prevECIdxs ?\n                        _this.getCellIndex(_this.prevECIdxs.rowIndex, _this.prevECIdxs.cellIndex) : undefined\n                };\n                var previousRowCellIndex = 'previousRowCellIndex';\n                args[\"\" + previousRowCellIndex] = _this.prevECIdxs;\n                _this.updateCellProps(cellIndex, cellIndex);\n                _this.onActionComplete(args, _base_constant__WEBPACK_IMPORTED_MODULE_3__.cellSelected);\n            }\n        };\n    };\n    Selection.prototype.getCellIndex = function (rIdx, cIdx) {\n        return this.parent.getCellFromIndex(rIdx, cIdx);\n    };\n    /**\n     * Selects a range of cells from start and end indexes.\n     *\n     * @param  {IIndex} startIndex - Specifies the row and column's start index.\n     * @param  {IIndex} endIndex - Specifies the row and column's end index.\n     * @returns {void}\n     */\n    Selection.prototype.selectCellsByRange = function (startIndex, endIndex) {\n        var _this = this;\n        if (!this.isCellType()) {\n            return;\n        }\n        var gObj = this.parent;\n        var selectedCell = this.parent.isSpan ? (0,_base_util__WEBPACK_IMPORTED_MODULE_2__.getCellFromRow)(this.parent, startIndex.rowIndex, startIndex.cellIndex) :\n            gObj.getCellFromIndex(startIndex.rowIndex, startIndex.cellIndex);\n        var min;\n        var max;\n        var stIndex = startIndex;\n        var edIndex = endIndex = endIndex ? endIndex : startIndex;\n        var cellIndexes;\n        this.currentIndex = startIndex.rowIndex;\n        var cncl = 'cancel';\n        var selectedData = this.getCurrentBatchRecordChanges()[this.currentIndex];\n        if (this.isSingleSel() || !this.isCellType() || this.isEditing()) {\n            return;\n        }\n        var args = {\n            data: selectedData, cellIndex: startIndex, currentCell: selectedCell,\n            isCtrlPressed: this.isMultiCtrlRequest, isShiftPressed: this.isMultiShiftRequest,\n            previousRowCell: this.prevECIdxs ? this.getCellIndex(this.prevECIdxs.rowIndex, this.prevECIdxs.cellIndex) : undefined\n        };\n        var previousRowCellIndex = 'previousRowCellIndex';\n        args[\"\" + previousRowCellIndex] = this.prevECIdxs;\n        this.parent.trigger(_base_constant__WEBPACK_IMPORTED_MODULE_3__.cellSelecting, this.fDataUpdate(args), function (cellSelectingArgs) {\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(cellSelectingArgs) && cellSelectingArgs[\"\" + cncl] === true) {\n                return;\n            }\n            _this.clearCell();\n            if (startIndex.rowIndex > endIndex.rowIndex) {\n                var temp = startIndex;\n                startIndex = endIndex;\n                endIndex = temp;\n            }\n            for (var i = startIndex.rowIndex; i <= endIndex.rowIndex; i++) {\n                if (_this.selectionSettings.cellSelectionMode.indexOf('Box') < 0) {\n                    min = i === startIndex.rowIndex ? (startIndex.cellIndex) : 0;\n                    max = i === endIndex.rowIndex ? (endIndex.cellIndex) : _this.getLastColIndex(i);\n                }\n                else {\n                    min = startIndex.cellIndex;\n                    max = endIndex.cellIndex;\n                }\n                cellIndexes = [];\n                for (var j = min < max ? min : max, len = min > max ? min : max; j <= len; j++) {\n                    selectedCell = _this.parent.isSpan ? (0,_base_util__WEBPACK_IMPORTED_MODULE_2__.getCellFromRow)(gObj, i, j) : gObj.getCellFromIndex(i, j);\n                    if (!selectedCell) {\n                        continue;\n                    }\n                    cellIndexes.push(j);\n                    _this.updateCellSelection(selectedCell);\n                    _this.addAttribute(selectedCell);\n                }\n                _this.selectedRowCellIndexes.push({ rowIndex: i, cellIndexes: cellIndexes });\n            }\n            var cellSelectedArgs = {\n                data: selectedData, cellIndex: edIndex, currentCell: gObj.getCellFromIndex(edIndex.rowIndex, edIndex.cellIndex),\n                selectedRowCellIndex: _this.selectedRowCellIndexes,\n                previousRowCell: _this.prevECIdxs ? _this.getCellIndex(_this.prevECIdxs.rowIndex, _this.prevECIdxs.cellIndex) : undefined\n            };\n            var previousRowCellIndex = 'previousRowCellIndex';\n            cellSelectedArgs[\"\" + previousRowCellIndex] = _this.prevECIdxs;\n            if (!_this.isDragged) {\n                _this.onActionComplete(cellSelectedArgs, _base_constant__WEBPACK_IMPORTED_MODULE_3__.cellSelected);\n                _this.cellselected = true;\n            }\n            _this.updateCellProps(stIndex, edIndex);\n        });\n    };\n    /**\n     * Selects a collection of cells by row and column indexes.\n     *\n     * @param  {ISelectedCell[]} rowCellIndexes - Specifies the row and column indexes.\n     * @returns {void}\n     */\n    Selection.prototype.selectCells = function (rowCellIndexes) {\n        if (!this.isCellType()) {\n            return;\n        }\n        var gObj = this.parent;\n        var selectedCell = gObj.getCellFromIndex(rowCellIndexes[0].rowIndex, rowCellIndexes[0].cellIndexes[0]);\n        this.currentIndex = rowCellIndexes[0].rowIndex;\n        var selectedData = this.getCurrentBatchRecordChanges()[this.currentIndex];\n        if (this.isSingleSel() || !this.isCellType() || this.isEditing()) {\n            return;\n        }\n        var cellSelectArgs = {\n            data: selectedData, cellIndex: rowCellIndexes[0].cellIndexes[0],\n            currentCell: selectedCell, isCtrlPressed: this.isMultiCtrlRequest,\n            isShiftPressed: this.isMultiShiftRequest,\n            previousRowCell: this.prevECIdxs ? this.getCellIndex(this.prevECIdxs.rowIndex, this.prevECIdxs.cellIndex) : undefined\n        };\n        var previousRowCellIndex = 'previousRowCellIndex';\n        cellSelectArgs[\"\" + previousRowCellIndex] = this.prevECIdxs;\n        this.onActionBegin(cellSelectArgs, _base_constant__WEBPACK_IMPORTED_MODULE_3__.cellSelecting);\n        for (var i = 0, len = rowCellIndexes.length; i < len; i++) {\n            for (var j = 0, cellLen = rowCellIndexes[parseInt(i.toString(), 10)].cellIndexes.length; j < cellLen; j++) {\n                selectedCell = gObj.getCellFromIndex(rowCellIndexes[parseInt(i.toString(), 10)].rowIndex, rowCellIndexes[parseInt(i.toString(), 10)].cellIndexes[parseInt(j.toString(), 10)]);\n                if (!selectedCell) {\n                    continue;\n                }\n                this.updateCellSelection(selectedCell);\n                this.addAttribute(selectedCell);\n                this.addRowCellIndex({ rowIndex: rowCellIndexes[parseInt(i.toString(), 10)].rowIndex,\n                    cellIndex: rowCellIndexes[parseInt(i.toString(), 10)].cellIndexes[parseInt(j.toString(), 10)] });\n            }\n        }\n        this.updateCellProps({ rowIndex: rowCellIndexes[0].rowIndex, cellIndex: rowCellIndexes[0].cellIndexes[0] }, { rowIndex: rowCellIndexes[0].rowIndex, cellIndex: rowCellIndexes[0].cellIndexes[0] });\n        var cellSelectedArgs = {\n            data: selectedData, cellIndex: rowCellIndexes[0].cellIndexes[0],\n            currentCell: selectedCell, selectedRowCellIndex: this.selectedRowCellIndexes,\n            previousRowCell: this.prevECIdxs ? this.getCellIndex(this.prevECIdxs.rowIndex, this.prevECIdxs.cellIndex) : undefined\n        };\n        var prvRowCellIndex = 'previousRowCellIndex';\n        cellSelectedArgs[\"\" + prvRowCellIndex] = this.prevECIdxs;\n        this.onActionComplete(cellSelectedArgs, _base_constant__WEBPACK_IMPORTED_MODULE_3__.cellSelected);\n    };\n    /**\n     * Select cells with existing cell selection by passing row and column index.\n     *\n     * @param {IIndex} cellIndexes - Defines the collection of row and column index.\n     * @returns {void}\n     * @hidden\n     */\n    Selection.prototype.addCellsToSelection = function (cellIndexes) {\n        if (!this.isCellType() || (this.isCellType() && (this.parent.enableVirtualization ||\n            (this.parent.enableInfiniteScrolling && this.parent.infiniteScrollSettings.enableCache)))) {\n            return;\n        }\n        var gObj = this.parent;\n        var selectedCell;\n        var index;\n        this.currentIndex = cellIndexes[0].rowIndex;\n        var cncl = 'cancel';\n        var selectedData = this.getCurrentBatchRecordChanges()[this.currentIndex];\n        if (this.isSingleSel() || !this.isCellType() || this.isEditing()) {\n            return;\n        }\n        this.hideAutoFill();\n        var rowObj;\n        rowObj = gObj.getRowsObject()[cellIndexes[0].rowIndex];\n        if (gObj.groupSettings.columns.length > 0) {\n            rowObj = gObj.getRowObjectFromUID(this.target.parentElement.getAttribute('data-uid'));\n        }\n        var foreignKeyData = [];\n        for (var _i = 0, cellIndexes_1 = cellIndexes; _i < cellIndexes_1.length; _i++) {\n            var cellIndex = cellIndexes_1[_i];\n            for (var i = 0, len = this.selectedRowCellIndexes.length; i < len; i++) {\n                if (this.selectedRowCellIndexes[parseInt(i.toString(), 10)].rowIndex === cellIndex.rowIndex) {\n                    index = i;\n                    break;\n                }\n            }\n            selectedCell = gObj.getCellFromIndex(cellIndex.rowIndex, this.getColIndex(cellIndex.rowIndex, cellIndex.cellIndex));\n            var idx = cellIndex.cellIndex;\n            if (gObj.groupSettings.columns.length > 0) {\n                foreignKeyData.push(rowObj.cells[idx + gObj.groupSettings.columns.length].foreignKeyData);\n            }\n            else {\n                foreignKeyData.push(rowObj.cells[parseInt(idx.toString(), 10)].foreignKeyData);\n            }\n            var args = {\n                cancel: false, data: selectedData, cellIndex: cellIndexes[0],\n                isShiftPressed: this.isMultiShiftRequest,\n                currentCell: selectedCell, isCtrlPressed: this.isMultiCtrlRequest,\n                previousRowCell: this.prevECIdxs ?\n                    gObj.getCellFromIndex(this.prevECIdxs.rowIndex, this.prevECIdxs.cellIndex) : undefined\n            };\n            var prvRowCellIndex = 'previousRowCellIndex';\n            args[\"\" + prvRowCellIndex] = this.prevECIdxs;\n            var isUnSelected = index > -1;\n            if (isUnSelected) {\n                var selectedCellIdx = this.selectedRowCellIndexes[parseInt(index.toString(), 10)].cellIndexes;\n                if (selectedCellIdx.indexOf(cellIndex.cellIndex) > -1 || (this.selectionSettings.mode === 'Both' &&\n                    selectedCell.classList.contains('e-gridchkbox') && !selectedCell.getAttribute('aria-selected'))) {\n                    this.cellDeselect(_base_constant__WEBPACK_IMPORTED_MODULE_3__.cellDeselecting, [{ rowIndex: cellIndex.rowIndex, cellIndexes: [cellIndex.cellIndex] }], selectedData, [selectedCell], foreignKeyData);\n                    selectedCellIdx.splice(selectedCellIdx.indexOf(cellIndex.cellIndex), 1);\n                    if (selectedCellIdx.length === 0) {\n                        this.selectedRowCellIndexes.splice(index, 1);\n                    }\n                    selectedCell.classList.remove('e-cellselectionbackground');\n                    selectedCell.removeAttribute('aria-selected');\n                    this.cellDeselect(_base_constant__WEBPACK_IMPORTED_MODULE_3__.cellDeselected, [{ rowIndex: cellIndex.rowIndex, cellIndexes: [cellIndex.cellIndex] }], selectedData, [selectedCell], foreignKeyData);\n                }\n                else {\n                    isUnSelected = false;\n                    this.onActionBegin(args, _base_constant__WEBPACK_IMPORTED_MODULE_3__.cellSelecting);\n                    this.addRowCellIndex({ rowIndex: cellIndex.rowIndex, cellIndex: cellIndex.cellIndex });\n                    this.updateCellSelection(selectedCell);\n                    this.addAttribute(selectedCell);\n                }\n            }\n            else {\n                this.onActionBegin(args, _base_constant__WEBPACK_IMPORTED_MODULE_3__.cellSelecting);\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(args) && args[\"\" + cncl] === true) {\n                    return;\n                }\n                this.updateCellSelection(selectedCell, cellIndex.rowIndex, cellIndex.cellIndex);\n            }\n            if (!isUnSelected) {\n                var cellSelectedArgs = {\n                    data: selectedData, cellIndex: cellIndexes[0], currentCell: selectedCell,\n                    previousRowCell: this.prevECIdxs ? this.getCellIndex(this.prevECIdxs.rowIndex, this.prevECIdxs.cellIndex) :\n                        undefined, selectedRowCellIndex: this.selectedRowCellIndexes\n                };\n                cellSelectedArgs[\"\" + prvRowCellIndex] = this.prevECIdxs;\n                this.onActionComplete(cellSelectedArgs, _base_constant__WEBPACK_IMPORTED_MODULE_3__.cellSelected);\n                this.cellselected = true;\n            }\n            this.updateCellProps(cellIndex, cellIndex);\n        }\n    };\n    Selection.prototype.getColIndex = function (rowIndex, index) {\n        var col = this.parent.getColumnByIndex(index);\n        var cells = (0,_base_util__WEBPACK_IMPORTED_MODULE_2__.getCellsByTableName)(this.parent, col, rowIndex);\n        if (cells) {\n            for (var m = 0; m < cells.length; m++) {\n                var colIndex = parseInt(cells[parseInt(m.toString(), 10)].getAttribute(_base_string_literals__WEBPACK_IMPORTED_MODULE_5__.ariaColIndex), 10) - 1;\n                if (colIndex === index) {\n                    return m;\n                }\n            }\n        }\n        return -1;\n    };\n    Selection.prototype.getLastColIndex = function (rowIndex) {\n        var cells = this.parent.getDataRows()[parseInt(rowIndex.toString(), 10)].querySelectorAll('td.e-rowcell');\n        return parseInt(cells[cells.length - 1].getAttribute(_base_string_literals__WEBPACK_IMPORTED_MODULE_5__.ariaColIndex), 10) - 1;\n    };\n    Selection.prototype.clearCell = function () {\n        this.clearCellSelection();\n    };\n    Selection.prototype.cellDeselect = function (type, cellIndexes, data, cells, foreignKeyData) {\n        var cancl = 'cancel';\n        if (cells && cells.length > 0) {\n            for (var _i = 0, cells_1 = cells; _i < cells_1.length; _i++) {\n                var cell = cells_1[_i];\n                if (cell && cell.classList.contains(_base_string_literals__WEBPACK_IMPORTED_MODULE_5__.gridChkBox)) {\n                    this.updateCheckBoxes((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(cell, 'tr'));\n                }\n            }\n        }\n        var args = {\n            cells: cells, data: data, cellIndexes: cellIndexes, foreignKeyData: foreignKeyData, cancel: false\n        };\n        this.parent.trigger(type, args);\n        this.isPreventCellSelect = args[\"\" + cancl];\n    };\n    Selection.prototype.updateCellSelection = function (selectedCell, rowIndex, cellIndex) {\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(rowIndex)) {\n            this.addRowCellIndex({ rowIndex: rowIndex, cellIndex: cellIndex });\n        }\n        selectedCell.classList.add('e-cellselectionbackground');\n        if (selectedCell.classList.contains(_base_string_literals__WEBPACK_IMPORTED_MODULE_5__.gridChkBox)) {\n            this.updateCheckBoxes((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(selectedCell, 'tr'), true);\n        }\n        this.addAttribute(selectedCell);\n    };\n    Selection.prototype.addAttribute = function (cell) {\n        this.target = cell;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(cell)) {\n            cell.setAttribute('aria-selected', 'true');\n            if (!this.preventFocus) {\n                this.focus.onClick({ target: cell }, true);\n            }\n        }\n    };\n    Selection.prototype.updateCellProps = function (startIndex, endIndex) {\n        this.prevCIdxs = startIndex;\n        this.prevECIdxs = endIndex;\n        this.isCellSelected = this.selectedRowCellIndexes.length && true;\n    };\n    Selection.prototype.addRowCellIndex = function (rowCellIndex) {\n        var isRowAvail;\n        var index;\n        for (var i = 0, len = this.selectedRowCellIndexes.length; i < len; i++) {\n            if (this.selectedRowCellIndexes[parseInt(i.toString(), 10)].rowIndex === rowCellIndex.rowIndex) {\n                isRowAvail = true;\n                index = i;\n                break;\n            }\n        }\n        if (isRowAvail) {\n            if (this.selectedRowCellIndexes[parseInt(index.toString(), 10)].cellIndexes.indexOf(rowCellIndex.cellIndex) < 0) {\n                this.selectedRowCellIndexes[parseInt(index.toString(), 10)].cellIndexes.push(rowCellIndex.cellIndex);\n            }\n        }\n        else {\n            this.selectedRowCellIndexes.push({ rowIndex: rowCellIndex.rowIndex, cellIndexes: [rowCellIndex.cellIndex] });\n        }\n    };\n    /**\n     * Deselects the currently selected cells.\n     *\n     * @returns {void}\n     */\n    Selection.prototype.clearCellSelection = function () {\n        if (this.isCellSelected) {\n            var gObj = this.parent;\n            var selectedCells = this.getSelectedCellsElement();\n            var rowCell = this.selectedRowCellIndexes;\n            var data = [];\n            var cells = [];\n            var foreignKeyData = [];\n            var currentViewData = this.getCurrentBatchRecordChanges();\n            this.hideAutoFill();\n            for (var i = 0, len = rowCell.length; i < len; i++) {\n                data.push(currentViewData[rowCell[parseInt(i.toString(), 10)].rowIndex]);\n                var rowObj = this.getRowObj(rowCell[parseInt(i.toString(), 10)].rowIndex);\n                for (var j = 0, cLen = rowCell[parseInt(i.toString(), 10)].cellIndexes.length; j < cLen; j++) {\n                    if (rowObj.cells) {\n                        foreignKeyData.push(rowObj.cells[rowCell[parseInt(i.toString(), 10)]\n                            .cellIndexes[parseInt(j.toString(), 10)]].foreignKeyData);\n                    }\n                    cells.push(gObj.getCellFromIndex(rowCell[parseInt(i.toString(), 10)].rowIndex, rowCell[parseInt(i.toString(), 10)].cellIndexes[parseInt(j.toString(), 10)]));\n                }\n            }\n            this.cellDeselect(_base_constant__WEBPACK_IMPORTED_MODULE_3__.cellDeselecting, rowCell, data, cells, foreignKeyData);\n            if (this.isPreventCellSelect === true) {\n                return;\n            }\n            for (var i = 0, len = selectedCells.length; i < len; i++) {\n                selectedCells[parseInt(i.toString(), 10)].classList.remove('e-cellselectionbackground');\n                selectedCells[parseInt(i.toString(), 10)].removeAttribute('aria-selected');\n            }\n            if (this.bdrElement) {\n                this.showHideBorders('none');\n            }\n            this.selectedRowCellIndexes = [];\n            this.isCellSelected = false;\n            if (!this.isDragged && this.cellselected) {\n                this.cellDeselect(_base_constant__WEBPACK_IMPORTED_MODULE_3__.cellDeselected, rowCell, data, cells, foreignKeyData);\n            }\n        }\n    };\n    Selection.prototype.getSelectedCellsElement = function () {\n        var gObj = this.parent;\n        var rows = gObj.getDataRows();\n        var cells = [];\n        for (var i = 0, len = rows.length; i < len; i++) {\n            cells = cells.concat([].slice.call(rows[parseInt(i.toString(), 10)].getElementsByClassName('e-cellselectionbackground')));\n        }\n        return cells;\n    };\n    Selection.prototype.mouseMoveHandler = function (e) {\n        e.preventDefault();\n        this.stopTimer();\n        var gBRect = this.parent.element.getBoundingClientRect();\n        var x1 = this.x;\n        var y1 = this.y;\n        var position = (0,_base_util__WEBPACK_IMPORTED_MODULE_2__.getPosition)(e);\n        var x2 = position.x - gBRect.left;\n        var y2 = position.y - gBRect.top;\n        var tmp;\n        var target = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(e.target, 'tr');\n        this.isDragged = true;\n        if (!this.isCellDrag) {\n            if (!target) {\n                target = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(document.elementFromPoint(this.parent.element.offsetLeft + 2, e.clientY), 'tr');\n            }\n            if (x1 > x2) {\n                tmp = x2;\n                x2 = x1;\n                x1 = tmp;\n            }\n            if (y1 > y2) {\n                tmp = y2;\n                y2 = y1;\n                y1 = tmp;\n            }\n            this.element.style.left = x1 + 'px';\n            this.element.style.top = y1 + 'px';\n            this.element.style.width = x2 - x1 + 'px';\n            this.element.style.height = y2 - y1 + 'px';\n        }\n        if (target && !e.ctrlKey && !e.shiftKey) {\n            var rowIndex = parseInt(target.getAttribute(_base_string_literals__WEBPACK_IMPORTED_MODULE_5__.ariaRowIndex), 10) - 1;\n            if (!this.isCellDrag) {\n                this.hideAutoFill();\n                this.selectRowsByRange(this.startDIndex, rowIndex);\n                this.isRowDragSelected = true;\n            }\n            else {\n                var td = (0,_base_util__WEBPACK_IMPORTED_MODULE_2__.parentsUntil)(e.target, _base_string_literals__WEBPACK_IMPORTED_MODULE_5__.rowCell);\n                if (td) {\n                    this.startAFCell = this.startCell;\n                    this.endAFCell = (0,_base_util__WEBPACK_IMPORTED_MODULE_2__.parentsUntil)(e.target, _base_string_literals__WEBPACK_IMPORTED_MODULE_5__.rowCell);\n                    if (rowIndex > -1) {\n                        this.selectLikeExcel(e, rowIndex, parseInt(td.getAttribute(_base_string_literals__WEBPACK_IMPORTED_MODULE_5__.ariaColIndex), 10) - 1);\n                    }\n                }\n            }\n        }\n        if (!e.ctrlKey && !e.shiftKey && !this.parent.enableVirtualization && !this.parent.enableInfiniteScrolling &&\n            !this.parent.enableColumnVirtualization && !this.parent.groupSettings.columns.length && this.isCellDrag) {\n            this.updateScrollPosition(e, position, this.parent.getContent());\n        }\n    };\n    Selection.prototype.updateScrollPosition = function (mouseEvent, position, scrollElement) {\n        var _this = this;\n        var clientRect = scrollElement.getBoundingClientRect();\n        if (clientRect.left >= position.x - 20 -\n            (this.parent.enableRtl && this.parent.height !== 'auto' ? (0,_base_util__WEBPACK_IMPORTED_MODULE_2__.getScrollBarWidth)() : 0)) {\n            this.timer1 = window.setInterval(function () { _this.setScrollPosition(scrollElement.firstElementChild, _this.parent.enableRtl ? 'right' : 'left', mouseEvent); }, 200);\n        }\n        else if (clientRect.left + scrollElement.clientWidth - 20 -\n            (!this.parent.enableRtl && this.parent.height !== 'auto' ? (0,_base_util__WEBPACK_IMPORTED_MODULE_2__.getScrollBarWidth)() : 0) < position.x) {\n            this.timer1 = window.setInterval(function () { _this.setScrollPosition(scrollElement.firstElementChild, _this.parent.enableRtl ? 'left' : 'right', mouseEvent); }, 200);\n        }\n        if (clientRect.top >= position.y - (this.parent.getRowHeight() * 0.5)) {\n            this.timer2 = window.setInterval(function () { _this.setScrollPosition(scrollElement.firstElementChild, 'up', mouseEvent); }, 200);\n        }\n        else if (clientRect.top + scrollElement.clientHeight - (this.parent.getRowHeight() * 0.5) -\n            (scrollElement.firstElementChild.scrollWidth > scrollElement.firstElementChild.offsetWidth ?\n                (0,_base_util__WEBPACK_IMPORTED_MODULE_2__.getScrollBarWidth)() : 0) <= position.y) {\n            this.timer2 = window.setInterval(function () { _this.setScrollPosition(scrollElement.firstElementChild, 'down', mouseEvent); }, 200);\n        }\n    };\n    Selection.prototype.stopTimer = function () {\n        if (this.timer1) {\n            window.clearInterval(this.timer1);\n            this.timer1 = null;\n        }\n        if (this.timer2) {\n            window.clearInterval(this.timer2);\n            this.timer2 = null;\n        }\n        this.preventFocus = false;\n    };\n    Selection.prototype.setScrollPosition = function (scrollElement, direction, mouseEvent) {\n        var rowIndex = -1;\n        var columnIndex = -1;\n        if (this.endAFCell || this.prevECIdxs) {\n            rowIndex = this.endAFCell ? parseInt(this.endAFCell.getAttribute('index'), 10) : this.prevECIdxs.rowIndex;\n            columnIndex = this.endAFCell ? parseInt(this.endAFCell.getAttribute('aria-colindex'), 10) - 1 : this.prevECIdxs.cellIndex;\n        }\n        switch (direction) {\n            case 'up':\n                if (mouseEvent && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(mouseEvent.target, '.e-headercontent')) {\n                    return;\n                }\n                if (this.isAutoFillSel && this.startAFCell && this.selectedRowCellIndexes.length &&\n                    ((this.selectedRowCellIndexes.length === 1 && this.startAFCell !== this.startCell) ||\n                        (this.selectedRowCellIndexes.length > 1 && this.startAFCell.getBoundingClientRect().top > 0))) {\n                    rowIndex = parseInt(this.startAFCell.getAttribute('index'), 10);\n                }\n                rowIndex -= 1;\n                if (this.parent.frozenRows) {\n                    rowIndex += this.parent.frozenRows + 1;\n                }\n                // eslint-disable-next-line @typescript-eslint/no-unused-expressions\n                rowIndex < 1 ? scrollElement.scrollTop = 0 : scrollElement.scrollTop -= this.parent.getRowByIndex(rowIndex)\n                    .offsetHeight;\n                break;\n            case 'down':\n                if (this.isAutoFillSel && this.startAFCell && this.startAFCell !== this.startCell) {\n                    rowIndex = parseInt(this.startAFCell.getAttribute('index'), 10);\n                }\n                if (rowIndex < this.parent.getRows().length - 1) {\n                    rowIndex += 1;\n                    if (this.isAutoFillSel && this.startAFCell && this.startAFCell !== this.startCell) {\n                        this.startAFCell = this.parent.getCellFromIndex(rowIndex, this.selectedRowCellIndexes[0].cellIndexes[0]);\n                    }\n                    scrollElement.scrollTop += this.parent.getRowByIndex(rowIndex).offsetHeight;\n                }\n                else {\n                    scrollElement.scrollTop = scrollElement.scrollHeight;\n                }\n                break;\n            case 'left':\n                if (columnIndex > 0 && rowIndex > -1) {\n                    if (this.isAutoFillSel && this.startAFCell && this.selectedRowCellIndexes.length &&\n                        ((this.selectedRowCellIndexes[0].cellIndexes.length > 0 && this.startAFCell !== this.startCell) ||\n                            (this.selectedRowCellIndexes[0].cellIndexes.length > 1 &&\n                                ((!this.parent.enableRtl && this.startAFCell.getBoundingClientRect().left > 0) || (this.parent.enableRtl &&\n                                    this.startAFCell.getBoundingClientRect().left < this.parent.element.offsetWidth))))) {\n                        columnIndex = parseInt(this.startAFCell.getAttribute('aria-colindex'), 10) - 1;\n                    }\n                    var nextElement_1 = this.findNextCell(scrollElement, direction, columnIndex, rowIndex);\n                    columnIndex = nextElement_1 ? parseInt(nextElement_1.getAttribute('aria-colindex'), 10) - 1 : -1;\n                    if (this.parent.enableRtl && nextElement_1) {\n                        // eslint-disable-next-line @typescript-eslint/no-unused-expressions\n                        columnIndex < 1 ? scrollElement.scrollLeft = scrollElement.scrollWidth :\n                            scrollElement.scrollLeft += nextElement_1.offsetWidth;\n                    }\n                    else if (nextElement_1) {\n                        // eslint-disable-next-line @typescript-eslint/no-unused-expressions\n                        columnIndex < 1 ? scrollElement.scrollLeft = 0 : scrollElement.scrollLeft -= nextElement_1.offsetWidth;\n                    }\n                }\n                break;\n            case 'right':\n                if (this.isAutoFillSel && this.startAFCell && this.startAFCell !== this.startCell) {\n                    columnIndex = parseInt(this.startAFCell.getAttribute('aria-colindex'), 10) - 1;\n                }\n                // eslint-disable-next-line no-case-declarations\n                var currentElement = this.parent.getCellFromIndex(rowIndex, columnIndex);\n                // eslint-disable-next-line no-case-declarations\n                var nextElement = this.findNextCell(scrollElement, direction, columnIndex, rowIndex);\n                if (nextElement && this.isAutoFillSel && this.startAFCell && this.startAFCell !== this.startCell) {\n                    this.startAFCell = this.parent.getCellFromIndex(this.selectedRowCellIndexes[0].rowIndex, parseInt(nextElement.getAttribute('aria-colindex'), 10) - 1);\n                }\n                columnIndex = nextElement ? parseInt(nextElement.getAttribute('aria-colindex'), 10) - 1 : -1;\n                if (this.parent.enableRtl && nextElement) {\n                    // eslint-disable-next-line @typescript-eslint/no-unused-expressions\n                    columnIndex < this.parent.columns.length - 1 ? scrollElement.scrollLeft -= currentElement.offsetWidth :\n                        scrollElement.scrollLeft = -scrollElement.scrollWidth;\n                }\n                else if (nextElement) {\n                    // eslint-disable-next-line @typescript-eslint/no-unused-expressions\n                    columnIndex < this.parent.columns.length - 1 ? scrollElement.scrollLeft += currentElement.offsetWidth :\n                        scrollElement.scrollLeft = scrollElement.scrollWidth;\n                }\n                if (this.isAutoFillSel && (columnIndex === this.parent.columns.length - 1 || columnIndex === -1) &&\n                    this.startAFCell && this.endAFCell) {\n                    this.positionAFBorders();\n                    scrollElement.scrollLeft = this.parent.enableRtl ? -scrollElement.scrollWidth : scrollElement.scrollWidth;\n                }\n                break;\n        }\n        if (rowIndex > -1 && rowIndex < this.parent.getRows().length && columnIndex > -1) {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            var mouseEvent_1 = { target: this.parent.getCellFromIndex(rowIndex, columnIndex) };\n            if (this.isAutoFillSel && mouseEvent_1.target.classList.contains('e-cellselectionbackground') &&\n                ((direction === 'down' && parseInt(mouseEvent_1.target.getAttribute('index'), 10) === this.parent.getRows().length - 1) ||\n                    (direction === 'right' && parseInt(mouseEvent_1.target.getAttribute('aria-colindex'), 10) - 1 === this.parent.columns.length - 1))) {\n                return;\n            }\n            this.endAFCell = mouseEvent_1.target;\n            this.preventFocus = true;\n            this.selectLikeExcel(mouseEvent_1, rowIndex, columnIndex);\n        }\n    };\n    Selection.prototype.findNextCell = function (scrollElement, direction, columnIndex, rowIndex) {\n        var nextElement = this.parent.getCellFromIndex(rowIndex, direction === 'left' ? columnIndex - 1 : columnIndex + 1);\n        if (nextElement && nextElement.classList.contains('e-hide')) {\n            var siblingEles = nextElement.closest('tr').querySelectorAll('.e-rowcell:not(.e-hide)');\n            var nextEleInd = Array.from(siblingEles).indexOf(nextElement.nextElementSibling);\n            if (nextEleInd > 0 && nextEleInd < siblingEles.length - 1) {\n                nextElement = siblingEles[nextEleInd + (direction === 'left' ? -1 : 1)];\n                return nextElement;\n            }\n            else {\n                scrollElement.scrollLeft = 0;\n                return null;\n            }\n        }\n        return nextElement;\n    };\n    Selection.prototype.selectLikeExcel = function (e, rowIndex, cellIndex) {\n        if (!this.isAutoFillSel) {\n            this.clearCellSelection();\n            this.selectCellsByRange({ rowIndex: this.startDIndex, cellIndex: this.startDCellIndex }, { rowIndex: rowIndex, cellIndex: cellIndex });\n            this.drawBorders();\n        }\n        else { //Autofill\n            this.showAFBorders();\n            this.selectLikeAutoFill(e);\n        }\n    };\n    Selection.prototype.setFrozenBorders = function (parentEle, border, bdrStr) {\n        var width = border.style.borderWidth.toString().split(' ');\n        var strCell = ['', 'e-leftfreeze', 'e-unfreeze', 'e-leftfreeze', 'e-unfreeze', 'e-rightfreeze', 'e-rightfreeze'];\n        var cells = [].slice.call(parentEle.querySelectorAll('.e-cellselectionbackground' + '.' + strCell[\"\" + bdrStr])).\n            filter(function (ele) { return ele.style.display === ''; });\n        var fixedCells = [].slice.call(parentEle.querySelectorAll('.e-cellselectionbackground.e-fixedfreeze')).\n            filter(function (ele) { return ele.style.display === ''; });\n        var isRtl = this.parent.enableRtl;\n        if (cells.length) {\n            var firstRowIdx = cells[0].getAttribute('index');\n            var firstColIdx = cells[0].getAttribute('aria-colindex');\n            var lastRowIdx = cells[cells.length - 1].getAttribute('index');\n            var lastColIdx = cells[cells.length - 1].getAttribute('aria-colindex');\n            for (var i = 0; i < cells.length; i++) {\n                if (cells[parseInt(i.toString(), 10)].getAttribute('index') === firstRowIdx && (width.length === 1 || (width.length === 3\n                    && parseInt(width[0], 10) === 2) || (width.length === 4 && parseInt(width[0], 10) === 2))) {\n                    cells[parseInt(i.toString(), 10)].classList.add('e-xlsel-top-border');\n                }\n                if (cells[parseInt(i.toString(), 10)].getAttribute('aria-colindex') === firstColIdx && (width.length === 1 ||\n                    (width.length === 3 && parseInt(width[1], 10) === 2) || (width.length === 4 && (((!isRtl &&\n                    parseInt(width[3], 10) === 2)) || (isRtl && parseInt(width[1], 10) === 2))))) {\n                    cells[parseInt(i.toString(), 10)].classList.add(isRtl ? 'e-xlsel-right-border' : 'e-xlsel-left-border');\n                }\n                if (cells[parseInt(i.toString(), 10)].getAttribute('index') === lastRowIdx && (width.length === 1 ||\n                    (width.length === 3 && parseInt(width[2], 10) === 2) || (width.length === 4 && parseInt(width[2], 10) === 2))) {\n                    cells[parseInt(i.toString(), 10)].classList.add('e-xlsel-bottom-border');\n                }\n                if (cells[parseInt(i.toString(), 10)].getAttribute('aria-colindex') === lastColIdx && (width.length === 1 ||\n                    (width.length === 3 && parseInt(width[1], 10) === 2) || (width.length === 4 && ((!isRtl &&\n                    parseInt(width[1], 10) === 2)) || (isRtl && parseInt(width[3], 10) === 2)))) {\n                    cells[parseInt(i.toString(), 10)].classList.add(isRtl ? 'e-xlsel-left-border' : 'e-xlsel-right-border');\n                }\n            }\n        }\n        if (fixedCells.length) {\n            var firstRowIdx = fixedCells[0].getAttribute('index');\n            var firstColIdx = (parseInt(fixedCells[0].getAttribute('aria-colindex'), 10) - 1).toString();\n            var lastRowIdx = fixedCells[fixedCells.length - 1].getAttribute('index');\n            var lastColIdx = (parseInt(fixedCells[fixedCells.length - 1].getAttribute('aria-colindex'), 10) - 1).toString();\n            for (var i = 0; i < fixedCells.length; i++) {\n                var idx = fixedCells[parseInt(i.toString(), 10)].getAttribute('index');\n                var colIdx = (parseInt(fixedCells[parseInt(i.toString(), 10)].getAttribute('aria-colindex'), 10) - 1).toString();\n                if (idx === firstRowIdx &&\n                    ((!this.parent.getHeaderContent().querySelector('.e-cellselectionbackground.e-fixedfreeze')\n                        && (0,_base_util__WEBPACK_IMPORTED_MODULE_2__.parentsUntil)(parentEle, 'e-content')) || !(0,_base_util__WEBPACK_IMPORTED_MODULE_2__.parentsUntil)(parentEle, 'e-content'))) {\n                    fixedCells[parseInt(i.toString(), 10)].classList.add('e-xlsel-top-border');\n                }\n                if (idx === lastRowIdx &&\n                    ((!this.parent.getContent().querySelector('.e-cellselectionbackground.e-fixedfreeze')\n                        && (0,_base_util__WEBPACK_IMPORTED_MODULE_2__.parentsUntil)(parentEle, 'e-headercontent')) || !(0,_base_util__WEBPACK_IMPORTED_MODULE_2__.parentsUntil)(parentEle, 'e-headercontent'))) {\n                    fixedCells[parseInt(i.toString(), 10)].classList.add('e-xlsel-bottom-border');\n                }\n                var preCell = fixedCells[parseInt(i.toString(), 10)].parentElement.children[parseInt(colIdx, 10) - 1];\n                if (colIdx === firstColIdx && (!preCell || (preCell && !preCell.classList.contains('e-cellselectionbackground')))) {\n                    fixedCells[parseInt(i.toString(), 10)].classList.add(isRtl ? 'e-xlsel-right-border' : 'e-xlsel-left-border');\n                }\n                var nextCell = fixedCells[parseInt(i.toString(), 10)].parentElement.children[parseInt(colIdx, 10) + 1];\n                if (colIdx === lastColIdx && (!nextCell || (nextCell && !nextCell.classList.contains('e-cellselectionbackground')))) {\n                    fixedCells[parseInt(i.toString(), 10)].classList.add(isRtl ? 'e-xlsel-left-border' : 'e-xlsel-right-border');\n                }\n            }\n        }\n    };\n    Selection.prototype.refreshFrozenBorders = function () {\n        if (this.bdrElement) {\n            this.setFrozenBorders(this.parent.getContentTable(), this.bdrElement, '1');\n            if (this.parent.isFrozenGrid() && this.parent.getFrozenMode() === _base_string_literals__WEBPACK_IMPORTED_MODULE_5__.leftRight) {\n                this.setFrozenBorders(this.parent.getContentTable(), this.frcBdrElement, '5');\n            }\n            if (this.parent.frozenRows) {\n                this.setFrozenBorders(this.parent.getHeaderTable(), this.fhBdrElement, '3');\n                if (this.parent.isFrozenGrid() && this.parent.getFrozenMode() === _base_string_literals__WEBPACK_IMPORTED_MODULE_5__.leftRight) {\n                    this.setFrozenBorders(this.parent.getHeaderTable(), this.frhBdrElement, '6');\n                }\n            }\n        }\n    };\n    /**\n     * @returns {void}\n     * @hidden\n     */\n    Selection.prototype.drawBorders = function () {\n        if (this.selectionSettings.cellSelectionMode === 'BoxWithBorder' && this.selectedRowCellIndexes.length && !this.parent.isEdit) {\n            this.parent.element.classList.add('e-enabledboxbdr');\n            if (!this.bdrElement) {\n                this.createBorders();\n            }\n            this.positionBorders();\n            if (this.parent.isFrozenGrid()) {\n                this.showHideBorders('none', true);\n                this.refreshFrozenBorders();\n            }\n        }\n        else {\n            this.showHideBorders('none');\n        }\n    };\n    Selection.prototype.isLastCell = function (cell) {\n        var cells = [].slice.call(cell.parentElement.querySelectorAll('.e-rowcell:not(.e-hide)'));\n        return cells[cells.length - 1] === cell;\n    };\n    Selection.prototype.isLastRow = function (cell) {\n        var rows = [].slice.call((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(cell, _base_string_literals__WEBPACK_IMPORTED_MODULE_5__.tbody).querySelectorAll('.e-row:not(.e-hiddenrow)'));\n        return cell.parentElement === rows[rows.length - 1];\n    };\n    Selection.prototype.isFirstRow = function (cell) {\n        var rows = [].slice.call((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(cell, _base_string_literals__WEBPACK_IMPORTED_MODULE_5__.tbody).querySelectorAll('.e-row:not(.e-hiddenrow)'));\n        return cell.parentElement === rows[0];\n    };\n    Selection.prototype.isFirstCell = function (cell) {\n        var cells = [].slice.call(cell.parentElement.querySelectorAll('.e-rowcell:not(.e-hide)'));\n        return cells[0] === cell;\n    };\n    Selection.prototype.setBorders = function (parentEle, border, bdrStr) {\n        var cells = [].slice.call(parentEle.getElementsByClassName('e-cellselectionbackground')).\n            filter(function (ele) { return ele.style.display === ''; });\n        if (cells.length && this.parent.isFrozenGrid()) {\n            var strCell = ['', 'e-leftfreeze', 'e-unfreeze', 'e-leftfreeze', 'e-unfreeze', 'e-rightfreeze', 'e-rightfreeze'];\n            cells = [].slice.call(parentEle.querySelectorAll('.e-cellselectionbackground' + '.' + strCell[\"\" + bdrStr] + ':not(.e-hide)')).\n                filter(function (ele) { return ele.style.display === ''; });\n        }\n        if (cells.length) {\n            var isFrozen = this.parent.isFrozenGrid();\n            var start = cells[0];\n            var end = cells[cells.length - 1];\n            var stOff = start.getBoundingClientRect();\n            var endOff = end.getBoundingClientRect();\n            var parentOff = start.offsetParent.getBoundingClientRect();\n            if (start.offsetParent.classList.contains('e-content') || start.offsetParent.classList.contains('e-headercontent')) {\n                parentOff = start.offsetParent.querySelector('table').getBoundingClientRect();\n            }\n            var rowHeight = !isFrozen && this.isLastRow(end) && (bdrStr === '1' || bdrStr === '2' || bdrStr === '5') ? 2 : 0;\n            var topOffSet = 0;\n            var leftOffset = isFrozen && (bdrStr === '2' || bdrStr === '4') && this.isFirstCell(start) ? 1 : 0;\n            var rightOffset = ((this.parent.getFrozenMode() === 'Right' && (bdrStr === '1' || bdrStr === '3'))\n                || (this.parent.getFrozenMode() === _base_string_literals__WEBPACK_IMPORTED_MODULE_5__.leftRight && (bdrStr === '5' || bdrStr === '6')))\n                && this.isFirstCell(start) ? 1 : 0;\n            if (this.parent.enableRtl) {\n                border.style.right = parentOff.right - stOff.right - leftOffset + 'px';\n                border.style.width = stOff.right - endOff.left + leftOffset + 1 + 'px';\n            }\n            else {\n                border.style.left = stOff.left - parentOff.left - leftOffset - rightOffset + 'px';\n                border.style.width = endOff.right - stOff.left + leftOffset - rightOffset + 1 + 'px';\n            }\n            border.style.top = stOff.top - parentOff.top - topOffSet + 'px';\n            border.style.height = endOff.top - stOff.top > 0 ?\n                (endOff.top - parentOff.top + endOff.height + (isFrozen ? 0 : 1)) - (stOff.top - parentOff.top) - rowHeight + topOffSet + 'px' :\n                endOff.height + topOffSet - rowHeight + (isFrozen ? 0 : 1) + 'px';\n            this.selectDirection += bdrStr;\n        }\n        else {\n            border.style.display = 'none';\n        }\n    };\n    Selection.prototype.positionBorders = function () {\n        this.updateStartEndCells();\n        if (!this.startCell || !this.bdrElement || !this.selectedRowCellIndexes.length) {\n            return;\n        }\n        this.selectDirection = '';\n        this.showHideBorders('');\n        this.setBorders(this.parent.getContentTable(), this.bdrElement, '1');\n        if (this.parent.isFrozenGrid()) {\n            this.setBorders(this.parent.getContentTable(), this.mcBdrElement, '2');\n            if (this.parent.getFrozenMode() === _base_string_literals__WEBPACK_IMPORTED_MODULE_5__.leftRight) {\n                this.setBorders(this.parent.getContentTable(), this.frcBdrElement, '5');\n            }\n        }\n        if (this.parent.frozenRows) {\n            this.setBorders(this.parent.getHeaderTable(), this.fhBdrElement, '3');\n            if (this.parent.isFrozenGrid()) {\n                this.setBorders(this.parent.getHeaderTable(), this.mhBdrElement, '4');\n                if (this.parent.getFrozenMode() === _base_string_literals__WEBPACK_IMPORTED_MODULE_5__.leftRight) {\n                    this.setBorders(this.parent.getHeaderTable(), this.frhBdrElement, '6');\n                }\n            }\n        }\n        this.applyBorders(this.selectDirection);\n    };\n    /* eslint-enable */\n    Selection.prototype.applyBothFrozenBorders = function (str) {\n        var rtl = this.parent.enableRtl;\n        switch (str.length) {\n            case 6:\n                {\n                    this.bdrElement.style.borderWidth = rtl ? this.right_bottom : this.bottom_left;\n                    this.mcBdrElement.style.borderWidth = this.bottom;\n                    this.fhBdrElement.style.borderWidth = rtl ? this.top_right : this.top_left;\n                    this.mhBdrElement.style.borderWidth = this.top;\n                    this.frcBdrElement.style.borderWidth = rtl ? this.bottom_left : this.right_bottom;\n                    this.frhBdrElement.style.borderWidth = rtl ? this.top_left : this.top_right;\n                }\n                break;\n            case 4:\n                {\n                    if (str.includes('1') && str.includes('2') && str.includes('3') && str.includes('4')) {\n                        this.fhBdrElement.style.borderWidth = rtl ? this.top_right : this.top_left;\n                        this.mhBdrElement.style.borderWidth = rtl ? this.top_left : this.top_right;\n                        this.bdrElement.style.borderWidth = rtl ? this.right_bottom : this.bottom_left;\n                        this.mcBdrElement.style.borderWidth = rtl ? this.bottom_left : this.right_bottom;\n                    }\n                    if (str.includes('2') && str.includes('4') && str.includes('5') && str.includes('6')) {\n                        this.mcBdrElement.style.borderWidth = rtl ? this.right_bottom : this.bottom_left;\n                        this.mhBdrElement.style.borderWidth = rtl ? this.top_right : this.top_left;\n                        this.frcBdrElement.style.borderWidth = rtl ? this.bottom_left : this.right_bottom;\n                        this.frhBdrElement.style.borderWidth = rtl ? this.top_left : this.top_right;\n                    }\n                }\n                break;\n            case 3:\n                {\n                    this.bdrElement.style.borderWidth = rtl ? this.top_right_bottom : this.top_bottom_left;\n                    this.mcBdrElement.style.borderWidth = this.top_bottom;\n                    this.frcBdrElement.style.borderWidth = rtl ? this.top_bottom_left : this.top_right_bottom;\n                    if (this.parent.frozenRows) {\n                        this.fhBdrElement.style.borderWidth = rtl ? this.top_right_bottom : this.top_bottom_left;\n                        this.mhBdrElement.style.borderWidth = this.top_bottom;\n                        this.frcBdrElement.style.borderWidth = rtl ? this.top_bottom_left : this.top_right_bottom;\n                    }\n                }\n                break;\n            case 2:\n                {\n                    if (str.includes('1')) {\n                        this.mcBdrElement.style.borderWidth = rtl ? this.top_bottom_left : this.top_right_bottom;\n                        if (this.parent.frozenRows) {\n                            this.fhBdrElement.style.borderWidth = this.top_right_left;\n                        }\n                    }\n                    if (str.includes('2')) {\n                        this.bdrElement.style.borderWidth = rtl ? this.top_right_bottom : this.top_bottom_left;\n                        this.frcBdrElement.style.borderWidth = rtl ? this.top_bottom_left : this.top_right_bottom;\n                        if (this.parent.frozenRows) {\n                            this.mhBdrElement.style.borderWidth = this.top_right_left;\n                        }\n                    }\n                    if (str.includes('3')) {\n                        this.mhBdrElement.style.borderWidth = rtl ? this.top_bottom_left : this.top_right_bottom;\n                        this.bdrElement.style.borderWidth = this.right_bottom_left;\n                    }\n                    if (str.includes('4')) {\n                        this.fhBdrElement.style.borderWidth = rtl ? this.top_right_bottom : this.top_bottom_left;\n                        this.frhBdrElement.style.borderWidth = rtl ? this.top_bottom_left : this.top_right_bottom;\n                        this.mcBdrElement.style.borderWidth = this.right_bottom_left;\n                    }\n                    if (str.includes('5')) {\n                        this.mcBdrElement.style.borderWidth = rtl ? this.top_right_bottom : this.top_bottom_left;\n                        if (this.parent.frozenRows) {\n                            this.frhBdrElement.style.borderWidth = this.top_right_left;\n                        }\n                    }\n                    if (str.includes('6')) {\n                        this.mhBdrElement.style.borderWidth = rtl ? this.top_right_bottom : this.top_bottom_left;\n                        this.frcBdrElement.style.borderWidth = this.right_bottom_left;\n                    }\n                }\n                break;\n            default:\n                this.bdrElement.style.borderWidth = this.all_border;\n                this.mcBdrElement.style.borderWidth = this.all_border;\n                this.frcBdrElement.style.borderWidth = this.all_border;\n                if (this.parent.frozenRows) {\n                    this.fhBdrElement.style.borderWidth = this.all_border;\n                    this.mhBdrElement.style.borderWidth = this.all_border;\n                    this.frhBdrElement.style.borderWidth = this.all_border;\n                }\n                break;\n        }\n    };\n    Selection.prototype.applyBorders = function (str) {\n        var rtl = this.parent.enableRtl;\n        if (this.parent.getFrozenMode() === _base_string_literals__WEBPACK_IMPORTED_MODULE_5__.leftRight) {\n            this.applyBothFrozenBorders(str);\n        }\n        else {\n            switch (str.length) {\n                case 4:\n                    {\n                        if (this.parent.getFrozenMode() === 'Right') {\n                            this.bdrElement.style.borderWidth = rtl ? this.bottom_left : this.right_bottom;\n                            this.mcBdrElement.style.borderWidth = rtl ? this.right_bottom : this.bottom_left;\n                            this.fhBdrElement.style.borderWidth = rtl ? this.top_left : this.top_right;\n                            this.mhBdrElement.style.borderWidth = rtl ? this.top_right : this.top_left;\n                        }\n                        else {\n                            this.bdrElement.style.borderWidth = rtl ? this.right_bottom : this.bottom_left;\n                            this.mcBdrElement.style.borderWidth = rtl ? this.bottom_left : this.right_bottom;\n                            this.fhBdrElement.style.borderWidth = rtl ? this.top_right : this.top_left;\n                            this.mhBdrElement.style.borderWidth = rtl ? this.top_left : this.top_right;\n                        }\n                    }\n                    break;\n                case 2:\n                    {\n                        if (this.parent.getFrozenMode() === 'Right') {\n                            this.bdrElement.style.borderWidth = str.includes('2') ? rtl ? this.top_bottom_left\n                                : this.top_right_bottom : this.right_bottom_left;\n                            this.mcBdrElement.style.borderWidth = str.includes('1') ? rtl ? this.top_right_bottom\n                                : this.top_bottom_left : this.right_bottom_left;\n                            if (this.parent.frozenRows) {\n                                this.fhBdrElement.style.borderWidth = str.includes('1') ? this.top_right_left\n                                    : rtl ? this.top_bottom_left : this.top_right_bottom;\n                                this.mhBdrElement.style.borderWidth = str.includes('2') ? this.top_right_left\n                                    : rtl ? this.top_right_bottom : this.top_bottom_left;\n                            }\n                        }\n                        else {\n                            this.bdrElement.style.borderWidth = str.includes('2') ? rtl ? this.top_right_bottom\n                                : this.top_bottom_left : this.right_bottom_left;\n                            if (this.parent.isFrozenGrid()) {\n                                this.mcBdrElement.style.borderWidth = str.includes('1') ? rtl ? this.top_bottom_left\n                                    : this.top_right_bottom : this.right_bottom_left;\n                            }\n                            if (this.parent.frozenRows) {\n                                this.fhBdrElement.style.borderWidth = str.includes('1') ? this.top_right_left\n                                    : rtl ? this.top_right_bottom : this.top_bottom_left;\n                                if (this.parent.isFrozenGrid()) {\n                                    this.mhBdrElement.style.borderWidth = str.includes('2') ? this.top_right_left\n                                        : rtl ? this.top_bottom_left : this.top_right_bottom;\n                                }\n                            }\n                        }\n                    }\n                    break;\n                default:\n                    this.bdrElement.style.borderWidth = this.all_border;\n                    if (this.parent.isFrozenGrid()) {\n                        this.mcBdrElement.style.borderWidth = this.all_border;\n                    }\n                    if (this.parent.frozenRows) {\n                        this.fhBdrElement.style.borderWidth = this.all_border;\n                        if (this.parent.isFrozenGrid()) {\n                            this.mhBdrElement.style.borderWidth = this.all_border;\n                        }\n                    }\n                    break;\n            }\n        }\n    };\n    Selection.prototype.createBorders = function () {\n        if (!this.bdrElement) {\n            var selectionBorder = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div', {\n                className: 'e-xlsel', id: this.parent.element.id + '_bdr'\n            });\n            selectionBorder.style.cssText = 'width: 2px; border-width: 0;';\n            this.bdrElement = this.parent.getContentTable().parentElement.appendChild(selectionBorder);\n            if (this.parent.isFrozenGrid()) {\n                var middleContentBorder = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div', {\n                    className: 'e-xlsel', id: this.parent.element.id + '_mcbdr'\n                });\n                middleContentBorder.style.cssText = 'height: 2px; border-width: 0;';\n                this.mcBdrElement = this.parent.getContentTable().parentElement.appendChild(middleContentBorder);\n                if (this.parent.getFrozenMode() === _base_string_literals__WEBPACK_IMPORTED_MODULE_5__.leftRight) {\n                    var frozenRightContentBorder = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div', {\n                        className: 'e-xlsel', id: this.parent.element.id + '_frcbdr'\n                    });\n                    frozenRightContentBorder.style.cssText = 'height: 2px; border-width: 0;';\n                    this.frcBdrElement = this.parent.getContentTable().parentElement.appendChild(frozenRightContentBorder);\n                }\n            }\n            if (this.parent.frozenRows) {\n                var frozenHeaderBorder = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div', {\n                    className: 'e-xlsel', id: this.parent.element.id + '_fhbdr'\n                });\n                frozenHeaderBorder.style.height = '2px';\n                this.fhBdrElement = this.parent.getHeaderTable().parentElement.appendChild(frozenHeaderBorder);\n            }\n            if (this.parent.frozenRows && this.parent.isFrozenGrid()) {\n                var middleHeaderBorder = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div', {\n                    className: 'e-xlsel', id: this.parent.element.id + '_mhbdr'\n                });\n                middleHeaderBorder.style.height = '2px';\n                this.mhBdrElement = this.parent.getHeaderTable().parentElement.appendChild(middleHeaderBorder);\n                if (this.parent.getFrozenMode() === _base_string_literals__WEBPACK_IMPORTED_MODULE_5__.leftRight) {\n                    var frozenRightHeaderBorder = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div', {\n                        className: 'e-xlsel', id: this.parent.element.id + '_frhbdr'\n                    });\n                    frozenRightHeaderBorder.style.height = '2px';\n                    this.frhBdrElement = this.parent.getHeaderTable().parentElement.appendChild(frozenRightHeaderBorder);\n                }\n            }\n        }\n    };\n    Selection.prototype.showHideBorders = function (display, freeze) {\n        if (this.bdrElement) {\n            this.bdrElement.style.display = display;\n            if (this.parent.isFrozenGrid()) {\n                var parentEle = this.parent.getContentTable();\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)(parentEle.querySelectorAll('.e-xlsel-top-border'), 'e-xlsel-top-border');\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)(parentEle.querySelectorAll('.e-xlsel-left-border'), 'e-xlsel-left-border');\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)(parentEle.querySelectorAll('.e-xlsel-right-border'), 'e-xlsel-right-border');\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)(parentEle.querySelectorAll('.e-xlsel-bottom-border'), 'e-xlsel-bottom-border');\n                if (!freeze) {\n                    this.mcBdrElement.style.display = display;\n                }\n                if (this.parent.getFrozenMode() === _base_string_literals__WEBPACK_IMPORTED_MODULE_5__.leftRight) {\n                    this.frcBdrElement.style.display = display;\n                }\n            }\n            if (this.parent.frozenRows) {\n                var parentEle = this.parent.getHeaderTable();\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)(parentEle.querySelectorAll('.e-xlsel-top-border'), 'e-xlsel-top-border');\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)(parentEle.querySelectorAll('.e-xlsel-left-border'), 'e-xlsel-left-border');\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)(parentEle.querySelectorAll('.e-xlsel-right-border'), 'e-xlsel-right-border');\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)(parentEle.querySelectorAll('.e-xlsel-bottom-border'), 'e-xlsel-bottom-border');\n                this.fhBdrElement.style.display = display;\n            }\n            if (this.parent.frozenRows && this.parent.isFrozenGrid()) {\n                if (!freeze) {\n                    this.mhBdrElement.style.display = display;\n                }\n                if (this.parent.getFrozenMode() === _base_string_literals__WEBPACK_IMPORTED_MODULE_5__.leftRight) {\n                    this.frhBdrElement.style.display = display;\n                }\n            }\n        }\n    };\n    Selection.prototype.drawAFBorders = function () {\n        if (!this.bdrAFBottom) {\n            this.createAFBorders();\n        }\n        this.positionAFBorders();\n    };\n    Selection.prototype.positionAFBorders = function () {\n        if (!this.startCell || !this.bdrAFLeft) {\n            return;\n        }\n        var stOff = this.startAFCell.getBoundingClientRect();\n        var endOff = this.endAFCell.getBoundingClientRect();\n        var top = endOff.top - stOff.top > 0 ? 1 : 0;\n        var firstCellTop = endOff.top - stOff.top >= 0 && ((0,_base_util__WEBPACK_IMPORTED_MODULE_2__.parentsUntil)(this.startAFCell, _base_string_literals__WEBPACK_IMPORTED_MODULE_5__.movableContent) ||\n            (0,_base_util__WEBPACK_IMPORTED_MODULE_2__.parentsUntil)(this.startAFCell, 'e-frozencontent')) && this.isFirstRow(this.startAFCell) ? 1.5 : 0;\n        var firstCellLeft = ((0,_base_util__WEBPACK_IMPORTED_MODULE_2__.parentsUntil)(this.startAFCell, _base_string_literals__WEBPACK_IMPORTED_MODULE_5__.movableContent) ||\n            (0,_base_util__WEBPACK_IMPORTED_MODULE_2__.parentsUntil)(this.startAFCell, _base_string_literals__WEBPACK_IMPORTED_MODULE_5__.movableHeader)) && this.isFirstCell(this.startAFCell) ? 1 : 0;\n        var rowHeight = this.isLastRow(this.endAFCell) && ((0,_base_util__WEBPACK_IMPORTED_MODULE_2__.parentsUntil)(this.endAFCell, _base_string_literals__WEBPACK_IMPORTED_MODULE_5__.movableContent) ||\n            (0,_base_util__WEBPACK_IMPORTED_MODULE_2__.parentsUntil)(this.endAFCell, 'e-frozencontent')) ? 2 : 0;\n        var parentOff = this.startAFCell.offsetParent.getBoundingClientRect();\n        var parentRect = this.parent.element.getBoundingClientRect();\n        var sTop = this.startAFCell.offsetParent.parentElement.scrollTop;\n        var sLeft = this.startAFCell.offsetParent.parentElement.scrollLeft;\n        var scrollTop = sTop - this.startAFCell.offsetTop;\n        var scrollLeft = sLeft - this.startAFCell.offsetLeft;\n        var totalHeight = this.parent.element.clientHeight - (0,_base_util__WEBPACK_IMPORTED_MODULE_2__.getScrollBarWidth)();\n        if (this.parent.allowPaging) {\n            totalHeight -= this.parent.element.querySelector('.e-pager').offsetHeight;\n        }\n        if (this.parent.aggregates.length) {\n            totalHeight -= this.parent.getFooterContent().offsetHeight;\n        }\n        var totalWidth = this.parent.element.clientWidth - (this.parent.height !== 'auto' ? (0,_base_util__WEBPACK_IMPORTED_MODULE_2__.getScrollBarWidth)() : 0);\n        scrollTop = scrollTop > 0 ? Math.floor(scrollTop) - 1 : 0;\n        scrollLeft = scrollLeft > 0 ? scrollLeft : 0;\n        var left = stOff.left - parentRect.left;\n        if (!this.parent.enableRtl) {\n            this.bdrAFLeft.style.left = left - firstCellLeft + scrollLeft - 1 + 'px';\n            this.bdrAFRight.style.left = endOff.left - parentRect.left - 2 + endOff.width + 'px';\n            this.bdrAFRight.style.width = totalWidth <= parseInt(this.bdrAFRight.style.left, 10) ? '0px' : '2px';\n            this.bdrAFTop.style.left = left + scrollLeft - 0.5 + 'px';\n            this.bdrAFTop.style.width = parseInt(this.bdrAFRight.style.left, 10) - parseInt(this.bdrAFLeft.style.left, 10)\n                - firstCellLeft + 1 + 'px';\n            if (totalWidth <= (parseInt(this.bdrAFTop.style.width, 10) + parseInt(this.bdrAFTop.style.left, 10))) {\n                var leftRemove = (parseInt(this.bdrAFTop.style.width, 10) + parseInt(this.bdrAFTop.style.left, 10)) - totalWidth;\n                this.bdrAFTop.style.width = parseInt(this.bdrAFTop.style.width, 10) - leftRemove + 'px';\n            }\n        }\n        else {\n            var scrolloffSet = ((0,_base_util__WEBPACK_IMPORTED_MODULE_2__.parentsUntil)(this.startAFCell, _base_string_literals__WEBPACK_IMPORTED_MODULE_5__.movableContent) ||\n                (0,_base_util__WEBPACK_IMPORTED_MODULE_2__.parentsUntil)(this.startAFCell, _base_string_literals__WEBPACK_IMPORTED_MODULE_5__.movableHeader)) ? stOff.right -\n                this.startAFCell.offsetParent.parentElement.getBoundingClientRect().width -\n                parentRect.left : 0;\n            this.bdrAFLeft.style.right = parentRect.right - endOff.right - 2 + endOff.width + 'px';\n            this.bdrAFLeft.style.width = totalWidth <= parseInt(this.bdrAFLeft.style.right, 10) ? '0px' : '2px';\n            var borderAFRightValue = parentRect.right - stOff.right - firstCellLeft + scrolloffSet - 1;\n            // eslint-disable-next-line @typescript-eslint/no-unused-expressions\n            borderAFRightValue > 0 ? this.bdrAFRight.style.right = borderAFRightValue + 'px' : this.bdrAFRight.style.right = '0px';\n            this.bdrAFTop.style.left = endOff.left - parentRect.left - 0.5 + 'px';\n            this.bdrAFTop.style.width = parseInt(this.bdrAFLeft.style.right, 10) - parseInt(this.bdrAFRight.style.right, 10)\n                - firstCellLeft + 1 + 'px';\n            if (parseInt(this.bdrAFTop.style.left, 10) < 0) {\n                this.bdrAFTop.style.width = parseInt(this.bdrAFTop.style.width, 10) + parseInt(this.bdrAFTop.style.left, 10) + 'px';\n                if (this.parent.height !== 'auto' && (0,_base_util__WEBPACK_IMPORTED_MODULE_2__.getScrollBarWidth)()) {\n                    this.bdrAFTop.style.left = (0,_base_util__WEBPACK_IMPORTED_MODULE_2__.getScrollBarWidth)() + 'px';\n                    this.bdrAFTop.style.width = (parseInt(this.bdrAFTop.style.width, 10) - (0,_base_util__WEBPACK_IMPORTED_MODULE_2__.getScrollBarWidth)()) + 'px';\n                }\n                else {\n                    this.bdrAFTop.style.left = '0px';\n                }\n            }\n        }\n        this.bdrAFLeft.style.top = stOff.top - parentRect.top - firstCellTop + scrollTop + 'px';\n        this.bdrAFLeft.style.height = endOff.top - stOff.top > 0 ?\n            (endOff.top - parentOff.top + endOff.height + 1) - (stOff.top - parentOff.top) + firstCellTop - rowHeight - scrollTop + 'px' :\n            endOff.height + firstCellTop - rowHeight - scrollTop + 'px';\n        this.bdrAFRight.style.top = this.bdrAFLeft.style.top;\n        this.bdrAFRight.style.height = parseInt(this.bdrAFLeft.style.height, 10) + 'px';\n        this.bdrAFTop.style.top = this.bdrAFRight.style.top;\n        this.bdrAFBottom.style.left = this.bdrAFTop.style.left;\n        this.bdrAFBottom.style.top = parseFloat(this.bdrAFLeft.style.top) + parseFloat(this.bdrAFLeft.style.height) - top - 1 + 'px';\n        this.bdrAFBottom.style.width = totalHeight <= parseFloat(this.bdrAFBottom.style.top) ? '0px' : this.bdrAFTop.style.width;\n        if (totalHeight <= (parseInt(this.bdrAFLeft.style.height, 10) + parseInt(this.bdrAFLeft.style.top, 10))) {\n            var topRemove = parseInt(this.bdrAFLeft.style.height, 10) + parseInt(this.bdrAFLeft.style.top, 10) - totalHeight;\n            this.bdrAFLeft.style.height = parseInt(this.bdrAFLeft.style.height, 10) - topRemove + 'px';\n            this.bdrAFRight.style.height = parseInt(this.bdrAFLeft.style.height, 10) + 'px';\n        }\n    };\n    Selection.prototype.createAFBorders = function () {\n        if (!this.bdrAFLeft) {\n            var leftSelectionBorder = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div', {\n                className: 'e-xlselaf', id: this.parent.element.id + '_bdrafleft'\n            });\n            leftSelectionBorder.style.width = '2px';\n            this.bdrAFLeft = this.parent.element.appendChild(leftSelectionBorder);\n            var rightSelectionBorder = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div', {\n                className: 'e-xlselaf', id: this.parent.element.id + '_bdrafright'\n            });\n            rightSelectionBorder.style.width = '2px';\n            this.bdrAFRight = this.parent.element.appendChild(rightSelectionBorder);\n            var bottomSelectionBorder = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div', {\n                className: 'e-xlselaf', id: this.parent.element.id + '_bdrafbottom'\n            });\n            bottomSelectionBorder.style.height = '2px';\n            this.bdrAFBottom = this.parent.element.appendChild(bottomSelectionBorder);\n            var topSelectionBorder = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div', {\n                className: 'e-xlselaf', id: this.parent.element.id + '_bdraftop'\n            });\n            topSelectionBorder.style.height = '2px';\n            this.bdrAFTop = this.parent.element.appendChild(topSelectionBorder);\n        }\n    };\n    Selection.prototype.destroyAutoFillElements = function () {\n        if (this.bdrAFLeft) {\n            this.bdrAFLeft.remove();\n            this.bdrAFRight.remove();\n            this.bdrAFBottom.remove();\n            this.bdrAFTop.remove();\n            this.bdrAFLeft = this.bdrAFRight = this.bdrAFBottom = this.bdrAFTop = null;\n        }\n        if (this.autofill) {\n            this.autofill.remove();\n            this.autofill = null;\n        }\n    };\n    Selection.prototype.showAFBorders = function () {\n        if (this.bdrAFLeft) {\n            this.bdrAFLeft.style.display = '';\n            this.bdrAFRight.style.display = '';\n            this.bdrAFBottom.style.display = '';\n            this.bdrAFTop.style.display = '';\n        }\n    };\n    Selection.prototype.hideAFBorders = function () {\n        if (this.bdrAFLeft) {\n            this.bdrAFLeft.style.display = 'none';\n            this.bdrAFRight.style.display = 'none';\n            this.bdrAFBottom.style.display = 'none';\n            this.bdrAFTop.style.display = 'none';\n        }\n    };\n    Selection.prototype.updateValue = function (rIdx, cIdx, cell) {\n        var args = this.createBeforeAutoFill(rIdx, cIdx, cell);\n        if (!args.cancel) {\n            var col = this.parent.getColumnByIndex(cIdx);\n            if (this.parent.editModule && cell) {\n                if (col.type === 'number') {\n                    this.parent.editModule.updateCell(rIdx, col.field, parseFloat(args.value));\n                }\n                else {\n                    this.parent.editModule.updateCell(rIdx, col.field, args.value);\n                }\n            }\n        }\n    };\n    Selection.prototype.createBeforeAutoFill = function (rowIndex, colIndex, cell) {\n        var col = this.parent.getColumnByIndex(colIndex);\n        var args = {\n            column: col,\n            value: cell.innerText\n        };\n        this.parent.trigger(_base_constant__WEBPACK_IMPORTED_MODULE_3__.beforeAutoFill, args);\n        return args;\n    };\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    Selection.prototype.getAutoFillCells = function (rowIndex, startCellIdx) {\n        var cls = '.e-cellselectionbackground';\n        var cells = [].slice.call(this.parent.getDataRows()[parseInt(rowIndex.toString(), 10)].querySelectorAll(cls));\n        return cells;\n    };\n    Selection.prototype.selectLikeAutoFill = function (e, isApply) {\n        var startrowIdx = parseInt((0,_base_util__WEBPACK_IMPORTED_MODULE_2__.parentsUntil)(this.startAFCell, _base_string_literals__WEBPACK_IMPORTED_MODULE_5__.row).getAttribute(_base_string_literals__WEBPACK_IMPORTED_MODULE_5__.ariaRowIndex), 10) - 1;\n        var startCellIdx = parseInt(this.startAFCell.getAttribute(_base_string_literals__WEBPACK_IMPORTED_MODULE_5__.ariaColIndex), 10) - 1;\n        var endrowIdx = parseInt((0,_base_util__WEBPACK_IMPORTED_MODULE_2__.parentsUntil)(this.endAFCell, _base_string_literals__WEBPACK_IMPORTED_MODULE_5__.row).getAttribute(_base_string_literals__WEBPACK_IMPORTED_MODULE_5__.ariaRowIndex), 10) - 1;\n        var endCellIdx = parseInt(this.endAFCell.getAttribute(_base_string_literals__WEBPACK_IMPORTED_MODULE_5__.ariaColIndex), 10) - 1;\n        var rowLen = this.selectedRowCellIndexes.length - 1;\n        var colLen = this.selectedRowCellIndexes[0].cellIndexes.length - 1;\n        switch (true) { //direction\n            case !isApply && this.endAFCell.classList.contains('e-cellselectionbackground') &&\n                !!(0,_base_util__WEBPACK_IMPORTED_MODULE_2__.parentsUntil)(e.target, _base_string_literals__WEBPACK_IMPORTED_MODULE_5__.rowCell):\n                this.startAFCell = this.parent.getCellFromIndex(startrowIdx, startCellIdx);\n                this.endAFCell = this.parent.getCellFromIndex(startrowIdx + rowLen, startCellIdx + colLen);\n                this.drawAFBorders();\n                break;\n            case this.autoFillRLselection && startCellIdx + colLen < endCellIdx && //right\n                endCellIdx - startCellIdx - colLen + 1 > endrowIdx - startrowIdx - rowLen // right bottom\n                && endCellIdx - startCellIdx - colLen + 1 > startrowIdx - endrowIdx: //right top\n                this.endAFCell = this.parent.getCellFromIndex(startrowIdx + rowLen, endCellIdx);\n                endrowIdx = parseInt((0,_base_util__WEBPACK_IMPORTED_MODULE_2__.parentsUntil)(this.endAFCell, _base_string_literals__WEBPACK_IMPORTED_MODULE_5__.row).getAttribute(_base_string_literals__WEBPACK_IMPORTED_MODULE_5__.ariaRowIndex), 10) - 1;\n                endCellIdx = parseInt(this.endAFCell.getAttribute(_base_string_literals__WEBPACK_IMPORTED_MODULE_5__.ariaColIndex), 10) - 1;\n                if (!isApply) {\n                    this.drawAFBorders();\n                }\n                else {\n                    var cellIdx = parseInt(this.endCell.getAttribute(_base_string_literals__WEBPACK_IMPORTED_MODULE_5__.ariaColIndex), 10) - 1;\n                    for (var i = startrowIdx; i <= endrowIdx; i++) {\n                        var cells = this.getAutoFillCells(i, startCellIdx);\n                        var c = 0;\n                        for (var j = cellIdx + 1; j <= endCellIdx; j++) {\n                            if (c > colLen) {\n                                c = 0;\n                            }\n                            this.updateValue(i, j, cells[parseInt(c.toString(), 10)]);\n                            c++;\n                        }\n                    }\n                    this.selectCellsByRange({ rowIndex: startrowIdx, cellIndex: this.startCellIndex }, { rowIndex: endrowIdx, cellIndex: endCellIdx });\n                }\n                break;\n            case this.autoFillRLselection && startCellIdx > endCellIdx && // left\n                startCellIdx - endCellIdx + 1 > endrowIdx - startrowIdx - rowLen && //left top\n                startCellIdx - endCellIdx + 1 > startrowIdx - endrowIdx: // left bottom\n                this.startAFCell = this.parent.getCellFromIndex(startrowIdx, endCellIdx);\n                this.endAFCell = this.endCell;\n                if (!isApply) {\n                    this.drawAFBorders();\n                }\n                else {\n                    for (var i = startrowIdx; i <= startrowIdx + rowLen; i++) {\n                        var cells = this.getAutoFillCells(i, startCellIdx);\n                        cells.reverse();\n                        var c = 0;\n                        for (var j = this.startCellIndex - 1; j >= endCellIdx; j--) {\n                            if (c > colLen) {\n                                c = 0;\n                            }\n                            this.updateValue(i, j, cells[parseInt(c.toString(), 10)]);\n                            c++;\n                        }\n                    }\n                    this.selectCellsByRange({ rowIndex: startrowIdx, cellIndex: endCellIdx }, { rowIndex: startrowIdx + rowLen, cellIndex: this.startCellIndex + colLen });\n                }\n                break;\n            case startrowIdx > endrowIdx: //up\n                this.startAFCell = this.parent.getCellFromIndex(endrowIdx, startCellIdx);\n                this.endAFCell = this.endCell;\n                if (!isApply) {\n                    this.drawAFBorders();\n                }\n                else {\n                    var trIdx = parseInt(this.endCell.parentElement.getAttribute(_base_string_literals__WEBPACK_IMPORTED_MODULE_5__.ariaRowIndex), 10) - 1;\n                    var r = trIdx;\n                    for (var i = startrowIdx - 1; i >= endrowIdx; i--) {\n                        if (r === this.startIndex - 1) {\n                            r = trIdx;\n                        }\n                        var cells = this.getAutoFillCells(r, startCellIdx);\n                        var c = 0;\n                        r--;\n                        for (var j = this.startCellIndex; j <= this.startCellIndex + colLen; j++) {\n                            this.updateValue(i, j, cells[parseInt(c.toString(), 10)]);\n                            c++;\n                        }\n                    }\n                    this.selectCellsByRange({ rowIndex: endrowIdx, cellIndex: startCellIdx + colLen }, { rowIndex: startrowIdx + rowLen, cellIndex: startCellIdx });\n                }\n                break;\n            default: //down\n                this.endAFCell = this.parent.getCellFromIndex(endrowIdx, startCellIdx + colLen);\n                if (!isApply) {\n                    this.drawAFBorders();\n                }\n                else {\n                    var trIdx = parseInt(this.endCell.parentElement.getAttribute(_base_string_literals__WEBPACK_IMPORTED_MODULE_5__.ariaRowIndex), 10) - 1;\n                    var r = this.startIndex;\n                    for (var i = trIdx + 1; i <= endrowIdx; i++) {\n                        if (r === trIdx + 1) {\n                            r = this.startIndex;\n                        }\n                        var cells = this.getAutoFillCells(r, startCellIdx);\n                        r++;\n                        var c = 0;\n                        for (var m = this.startCellIndex; m <= this.startCellIndex + colLen; m++) {\n                            this.updateValue(i, m, cells[parseInt(c.toString(), 10)]);\n                            c++;\n                        }\n                    }\n                    this.selectCellsByRange({ rowIndex: trIdx - rowLen, cellIndex: startCellIdx }, { rowIndex: endrowIdx, cellIndex: startCellIdx + colLen });\n                }\n                break;\n        }\n    };\n    Selection.prototype.mouseUpHandler = function (e) {\n        this.stopTimer();\n        document.body.classList.remove('e-disableuserselect');\n        if (this.element && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.element.parentElement)) {\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.remove)(this.element);\n        }\n        if (this.isDragged && this.selectedRowCellIndexes.length === 1 && this.selectedRowCellIndexes[0].cellIndexes.length === 1) {\n            this.mUPTarget = (0,_base_util__WEBPACK_IMPORTED_MODULE_2__.parentsUntil)(e.target, _base_string_literals__WEBPACK_IMPORTED_MODULE_5__.rowCell);\n        }\n        else {\n            this.mUPTarget = null;\n        }\n        var closeRowCell = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(e.target, '.e-rowcell');\n        if (this.isDragged && !this.isAutoFillSel && this.selectionSettings.mode === 'Cell' &&\n            closeRowCell && closeRowCell.classList.contains(_base_string_literals__WEBPACK_IMPORTED_MODULE_5__.rowCell)) {\n            var rowIndex = parseInt(closeRowCell.parentElement.getAttribute(_base_string_literals__WEBPACK_IMPORTED_MODULE_5__.ariaRowIndex), 10) - 1;\n            var cellIndex = parseInt(closeRowCell.getAttribute(_base_string_literals__WEBPACK_IMPORTED_MODULE_5__.ariaColIndex), 10) - 1;\n            this.isDragged = false;\n            this.clearCellSelection();\n            this.selectCellsByRange({ rowIndex: this.startDIndex, cellIndex: this.startDCellIndex }, { rowIndex: rowIndex, cellIndex: cellIndex });\n        }\n        this.isDragged = false;\n        this.updateAutoFillPosition();\n        if (this.isAutoFillSel) {\n            this.preventFocus = true;\n            var lastCell = (0,_base_util__WEBPACK_IMPORTED_MODULE_2__.parentsUntil)(e.target, _base_string_literals__WEBPACK_IMPORTED_MODULE_5__.rowCell);\n            this.endAFCell = lastCell ? lastCell : this.endCell === this.endAFCell ? this.startAFCell : this.endAFCell;\n            this.startAFCell = this.startCell;\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.endAFCell) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.startAFCell)) {\n                this.updateStartCellsIndex();\n                this.selectLikeAutoFill(e, true);\n                this.updateAutoFillPosition();\n                this.hideAFBorders();\n                this.positionBorders();\n                if (this.parent.isFrozenGrid()) {\n                    this.showHideBorders('none', true);\n                    this.refreshFrozenBorders();\n                }\n                if (this.parent.aggregates.length > 0) {\n                    this.parent.notify(_base_constant__WEBPACK_IMPORTED_MODULE_3__.refreshFooterRenderer, {});\n                }\n            }\n            this.isAutoFillSel = false;\n            this.preventFocus = false;\n        }\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(this.parent.getContent(), 'mousemove', this.mouseMoveHandler);\n        if (this.parent.frozenRows) {\n            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(this.parent.getHeaderContent(), 'mousemove', this.mouseMoveHandler);\n        }\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(document, 'mouseup', this.mouseUpHandler);\n    };\n    Selection.prototype.hideAutoFill = function () {\n        if (this.autofill) {\n            this.autofill.style.display = 'none';\n        }\n    };\n    /**\n     * @returns {void}\n     * @hidden\n     */\n    Selection.prototype.updateAutoFillPosition = function () {\n        if (this.parent.enableAutoFill && !this.parent.isEdit &&\n            this.selectionSettings.cellSelectionMode.indexOf('Box') > -1 && !this.isRowType() && !this.isSingleSel()\n            && this.selectedRowCellIndexes.length) {\n            var index = parseInt(this.target.getAttribute(_base_string_literals__WEBPACK_IMPORTED_MODULE_5__.ariaColIndex), 10) - 1;\n            var rindex = parseInt(this.target.getAttribute('index'), 10);\n            var rowIndex = this.selectedRowCellIndexes[this.selectedRowCellIndexes.length - 1].rowIndex;\n            var cells = this.getAutoFillCells(rowIndex, index).filter(function (ele) { return ele.style.display === ''; });\n            var col = this.parent.getColumnByIndex(index);\n            var isFrozenCol = col.getFreezeTableName() === 'movable';\n            var isFrozenRow = rindex < this.parent.frozenRows;\n            var isFrozenRight = this.parent.getFrozenMode() === _base_string_literals__WEBPACK_IMPORTED_MODULE_5__.leftRight\n                && col.getFreezeTableName() === _base_string_literals__WEBPACK_IMPORTED_MODULE_5__.frozenRight;\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('#' + this.parent.element.id + '_autofill', (0,_base_util__WEBPACK_IMPORTED_MODULE_2__.parentsUntil)(this.target, _base_string_literals__WEBPACK_IMPORTED_MODULE_5__.table))) {\n                if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('#' + this.parent.element.id + '_autofill', this.parent.element)) {\n                    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('#' + this.parent.element.id + '_autofill', this.parent.element).remove();\n                }\n                this.autofill = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div', { className: 'e-autofill', id: this.parent.element.id + '_autofill' });\n                this.autofill.style.display = 'none';\n                if (this.target.classList.contains('e-leftfreeze') || this.target.classList.contains('e-rightfreeze') ||\n                    this.target.classList.contains('e-fixedfreeze')) {\n                    this.autofill.classList.add('e-freeze-autofill');\n                }\n                if (!isFrozenRow) {\n                    if (!isFrozenCol) {\n                        this.parent.getContentTable().parentElement.appendChild(this.autofill);\n                    }\n                    else {\n                        this.parent.getContentTable().parentElement.appendChild(this.autofill);\n                    }\n                }\n                else {\n                    if (!isFrozenCol) {\n                        this.parent.getHeaderTable().parentElement.appendChild(this.autofill);\n                    }\n                    else {\n                        this.parent.getHeaderTable().parentElement.appendChild(this.autofill);\n                    }\n                }\n                if (isFrozenRight) {\n                    if (isFrozenRow) {\n                        this.parent.getHeaderTable().parentElement.appendChild(this.autofill);\n                    }\n                    else {\n                        this.parent.getContentTable().parentElement.appendChild(this.autofill);\n                    }\n                }\n            }\n            var cell = cells[cells.length - 1];\n            if (cell && cell.offsetParent) {\n                var clientRect = cell.getBoundingClientRect();\n                var parentOff = cell.offsetParent.getBoundingClientRect();\n                if (cell.offsetParent.classList.contains('e-content') || cell.offsetParent.classList.contains('e-headercontent')) {\n                    parentOff = cell.offsetParent.querySelector('table').getBoundingClientRect();\n                }\n                var colWidth = this.isLastCell(cell) ? 4 : 0;\n                var rowHeight = this.isLastRow(cell) ? 3 : 0;\n                if (!this.parent.enableRtl) {\n                    this.autofill.style.left = clientRect.left - parentOff.left + clientRect.width - 4 - colWidth + 'px';\n                }\n                else {\n                    this.autofill.style.right = parentOff.right - clientRect.right + clientRect.width - 4 - colWidth + 'px';\n                }\n                this.autofill.style.top = clientRect.top - parentOff.top + clientRect.height - 5 - rowHeight + 'px';\n            }\n            this.autofill.style.display = '';\n        }\n        else {\n            this.hideAutoFill();\n        }\n    };\n    Selection.prototype.mouseDownHandler = function (e) {\n        this.mouseButton = e.button;\n        var target = e.target;\n        var gObj = this.parent;\n        var isDrag;\n        var gridElement = (0,_base_util__WEBPACK_IMPORTED_MODULE_2__.parentsUntil)(target, 'e-grid');\n        if (gridElement && gridElement.id !== gObj.element.id || (0,_base_util__WEBPACK_IMPORTED_MODULE_2__.parentsUntil)(target, _base_string_literals__WEBPACK_IMPORTED_MODULE_5__.headerContent) && !this.parent.frozenRows ||\n            (0,_base_util__WEBPACK_IMPORTED_MODULE_2__.parentsUntil)(target, 'e-editedbatchcell') || (0,_base_util__WEBPACK_IMPORTED_MODULE_2__.parentsUntil)(target, _base_string_literals__WEBPACK_IMPORTED_MODULE_5__.editedRow)) {\n            return;\n        }\n        if (e.shiftKey || e.ctrlKey) {\n            e.preventDefault();\n        }\n        if ((0,_base_util__WEBPACK_IMPORTED_MODULE_2__.parentsUntil)(target, _base_string_literals__WEBPACK_IMPORTED_MODULE_5__.rowCell) && !e.shiftKey && !e.ctrlKey) {\n            if (gObj.selectionSettings.cellSelectionMode.indexOf('Box') > -1 && !this.isRowType() && !this.isSingleSel()) {\n                this.isCellDrag = true;\n                isDrag = true;\n            }\n            else if (gObj.allowRowDragAndDrop && !gObj.isEdit && !this.parent.selectionSettings.checkboxOnly) {\n                this.isRowDragSelected = false;\n                if (!this.isRowType() || this.isSingleSel() || (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(target, 'td').classList.contains('e-selectionbackground')) {\n                    this.isDragged = false;\n                    return;\n                }\n                isDrag = true;\n                this.element = this.parent.createElement('div', { className: 'e-griddragarea' });\n                gObj.getContent().appendChild(this.element);\n            }\n            if (isDrag) {\n                this.enableDrag(e, true);\n            }\n        }\n        this.updateStartEndCells();\n        if (target.classList.contains('e-autofill') || target.classList.contains('e-xlsel')) {\n            this.isCellDrag = true;\n            this.isAutoFillSel = true;\n            this.enableDrag(e);\n        }\n    };\n    Selection.prototype.updateStartEndCells = function () {\n        var cells = [].slice.call(this.parent.element.getElementsByClassName('e-cellselectionbackground'));\n        this.startCell = cells[0];\n        this.endCell = cells[cells.length - 1];\n        if (this.startCell) {\n            this.startIndex = parseInt(this.startCell.parentElement.getAttribute(_base_string_literals__WEBPACK_IMPORTED_MODULE_5__.ariaRowIndex), 10) - 1;\n            this.startCellIndex = parseInt((0,_base_util__WEBPACK_IMPORTED_MODULE_2__.parentsUntil)(this.startCell, _base_string_literals__WEBPACK_IMPORTED_MODULE_5__.rowCell).getAttribute(_base_string_literals__WEBPACK_IMPORTED_MODULE_5__.ariaColIndex), 10) - 1;\n        }\n    };\n    Selection.prototype.updateStartCellsIndex = function () {\n        if (this.startCell) {\n            this.startIndex = parseInt(this.startCell.parentElement.getAttribute(_base_string_literals__WEBPACK_IMPORTED_MODULE_5__.ariaRowIndex), 10) - 1;\n            this.startCellIndex = parseInt((0,_base_util__WEBPACK_IMPORTED_MODULE_2__.parentsUntil)(this.startCell, _base_string_literals__WEBPACK_IMPORTED_MODULE_5__.rowCell).getAttribute(_base_string_literals__WEBPACK_IMPORTED_MODULE_5__.ariaColIndex), 10) - 1;\n        }\n    };\n    Selection.prototype.enableDrag = function (e, isUpdate) {\n        var gObj = this.parent;\n        if (isUpdate) {\n            var tr = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(e.target, 'tr');\n            this.startDIndex = parseInt(tr.getAttribute(_base_string_literals__WEBPACK_IMPORTED_MODULE_5__.ariaRowIndex), 10) - 1;\n            this.startDCellIndex = parseInt((0,_base_util__WEBPACK_IMPORTED_MODULE_2__.parentsUntil)(e.target, _base_string_literals__WEBPACK_IMPORTED_MODULE_5__.rowCell)\n                .getAttribute(_base_string_literals__WEBPACK_IMPORTED_MODULE_5__.ariaColIndex), 10) - 1;\n        }\n        document.body.classList.add('e-disableuserselect');\n        var gBRect = gObj.element.getBoundingClientRect();\n        var postion = (0,_base_util__WEBPACK_IMPORTED_MODULE_2__.getPosition)(e);\n        this.x = postion.x - gBRect.left;\n        this.y = postion.y - gBRect.top;\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(gObj.getContent(), 'mousemove', this.mouseMoveHandler, this);\n        if (this.parent.frozenRows) {\n            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(gObj.getHeaderContent(), 'mousemove', this.mouseMoveHandler, this);\n        }\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(document, 'mouseup', this.mouseUpHandler, this);\n    };\n    Selection.prototype.clearSelAfterRefresh = function (e) {\n        var isInfiniteScroll = this.parent.enableInfiniteScrolling && e.requestType === 'infiniteScroll';\n        if (e.requestType !== 'virtualscroll' && !this.parent.isPersistSelection && !isInfiniteScroll) {\n            this.clearSelection();\n        }\n        if ((e.requestType === 'virtualscroll' || isInfiniteScroll) && this.parent.isPersistSelection && this.isPartialSelection\n            && this.isHdrSelectAllClicked) {\n            var rowObj = this.parent.getRowsObject().filter(function (e) { return e.isSelectable; });\n            var indexes = [];\n            this.selectedRowState = {};\n            this.persistSelectedData = [];\n            for (var i = 0; i < rowObj.length; i++) {\n                indexes.push(rowObj[parseInt(i.toString(), 10)].index);\n                var pkValue = this.getPkValue(this.primaryKey, rowObj[parseInt(i.toString(), 10)].data);\n                this.selectedRowState[\"\" + pkValue] = true;\n                this.persistSelectedData.push(rowObj[parseInt(i.toString(), 10)].data);\n            }\n            this.selectedRowIndexes = indexes;\n        }\n    };\n    /**\n     * @returns {void}\n     * @hidden\n     */\n    Selection.prototype.addEventListener = function () {\n        if (this.parent.isDestroyed) {\n            return;\n        }\n        this.evtHandlers = [{ event: _base_constant__WEBPACK_IMPORTED_MODULE_3__.uiUpdate, handler: this.enableAfterRender },\n            { event: _base_constant__WEBPACK_IMPORTED_MODULE_3__.initialEnd, handler: this.initializeSelection },\n            { event: _base_constant__WEBPACK_IMPORTED_MODULE_3__.rowSelectionComplete, handler: this.onActionComplete },\n            { event: _base_constant__WEBPACK_IMPORTED_MODULE_3__.cellSelectionComplete, handler: this.onActionComplete },\n            { event: _base_constant__WEBPACK_IMPORTED_MODULE_3__.inBoundModelChanged, handler: this.onPropertyChanged },\n            { event: _base_constant__WEBPACK_IMPORTED_MODULE_3__.cellFocused, handler: this.onCellFocused },\n            { event: _base_constant__WEBPACK_IMPORTED_MODULE_3__.beforeFragAppend, handler: this.clearSelAfterRefresh },\n            { event: _base_constant__WEBPACK_IMPORTED_MODULE_3__.columnPositionChanged, handler: this.columnPositionChanged },\n            { event: _base_constant__WEBPACK_IMPORTED_MODULE_3__.contentReady, handler: this.initialEnd },\n            { event: _base_constant__WEBPACK_IMPORTED_MODULE_3__.rowsRemoved, handler: this.rowsRemoved },\n            { event: _base_constant__WEBPACK_IMPORTED_MODULE_3__.headerRefreshed, handler: this.refreshHeader },\n            { event: _base_constant__WEBPACK_IMPORTED_MODULE_3__.destroyAutoFillElements, handler: this.destroyAutoFillElements },\n            { event: _base_constant__WEBPACK_IMPORTED_MODULE_3__.destroy, handler: this.destroy }];\n        (0,_base_util__WEBPACK_IMPORTED_MODULE_2__.addRemoveEventListener)(this.parent, this.evtHandlers, true, this);\n        this.actionBeginFunction = this.actionBegin.bind(this);\n        this.actionCompleteFunction = this.actionComplete.bind(this);\n        this.parent.addEventListener(_base_constant__WEBPACK_IMPORTED_MODULE_3__.actionBegin, this.actionBeginFunction);\n        this.parent.addEventListener(_base_constant__WEBPACK_IMPORTED_MODULE_3__.actionComplete, this.actionCompleteFunction);\n        this.addEventListener_checkbox();\n    };\n    /**\n     * @returns {void}\n     * @hidden\n     */\n    Selection.prototype.removeEventListener = function () {\n        if (this.parent.isDestroyed) {\n            return;\n        }\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(document, 'mouseup', this.mouseUpHandler);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(this.parent.getContent(), 'mousedown', this.mouseDownHandler);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(this.parent.getHeaderContent(), 'mousedown', this.mouseDownHandler);\n        (0,_base_util__WEBPACK_IMPORTED_MODULE_2__.addRemoveEventListener)(this.parent, this.evtHandlers, false);\n        this.parent.removeEventListener(_base_constant__WEBPACK_IMPORTED_MODULE_3__.actionBegin, this.actionBeginFunction);\n        this.parent.removeEventListener(_base_constant__WEBPACK_IMPORTED_MODULE_3__.actionComplete, this.actionCompleteFunction);\n        this.removeEventListener_checkbox();\n        this.parent.off(_base_constant__WEBPACK_IMPORTED_MODULE_3__.destroyAutoFillElements, this.destroyAutoFillElements);\n    };\n    Selection.prototype.wireEvents = function () {\n        this.isMacOS = navigator.userAgent.indexOf('Mac OS') !== -1;\n        if (this.isMacOS) {\n            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(this.parent.element, 'keydown', this.keyDownHandler, this);\n            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(this.parent.element, 'keyup', this.keyUpHandler, this);\n        }\n        else {\n            if (!this.parent.allowKeyboard) {\n                _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(this.parent.element, 'keydown', this.keyDownHandler, this);\n            }\n        }\n    };\n    Selection.prototype.unWireEvents = function () {\n        if (this.isMacOS) {\n            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(this.parent.element, 'keydown', this.keyDownHandler);\n            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(this.parent.element, 'keyup', this.keyUpHandler);\n        }\n        else {\n            if (!this.parent.allowKeyboard) {\n                _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(this.parent.element, 'keydown', this.keyDownHandler);\n            }\n        }\n    };\n    Selection.prototype.columnPositionChanged = function () {\n        if (!this.parent.isPersistSelection) {\n            this.clearSelection();\n        }\n    };\n    Selection.prototype.refreshHeader = function () {\n        var checkboxColumn = this.parent.getColumns().filter(function (col) { return col.type === 'checkbox'; });\n        if (checkboxColumn.length && !this.parent.getDataModule().isRemote()) {\n            this.gridCurrentRecord = this.getData();\n        }\n        this.setCheckAllState();\n    };\n    Selection.prototype.rowsRemoved = function (e) {\n        for (var i = 0; i < e.records.length; i++) {\n            var pkValue = this.getPkValue(this.primaryKey, e.records[parseInt(i.toString(), 10)]);\n            delete (this.selectedRowState[\"\" + pkValue]);\n            --this.totalRecordsCount;\n        }\n        this.setCheckAllState();\n    };\n    Selection.prototype.beforeFragAppend = function (e) {\n        if (e.requestType !== 'virtualscroll' && !this.parent.isPersistSelection) {\n            this.clearSelection();\n        }\n    };\n    Selection.prototype.getCheckAllBox = function () {\n        return this.parent.getHeaderContent().querySelector('.e-checkselectall');\n    };\n    Selection.prototype.enableAfterRender = function (e) {\n        if (e.module === this.getModuleName() && e.enable) {\n            this.render();\n            this.initPerisistSelection();\n        }\n    };\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    Selection.prototype.render = function (e) {\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(this.parent.getContent(), 'mousedown', this.mouseDownHandler, this);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(this.parent.getHeaderContent(), 'mousedown', this.mouseDownHandler, this);\n    };\n    Selection.prototype.onPropertyChanged = function (e) {\n        if (e.module !== this.getModuleName()) {\n            return;\n        }\n        var gObj = this.parent;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(e.properties.type)) {\n            if (this.selectionSettings.type === 'Single') {\n                gObj.element.removeAttribute('aria-multiselectable');\n                if (this.selectedRowCellIndexes.length > 1) {\n                    this.clearCellSelection();\n                    this.prevCIdxs = undefined;\n                }\n                if (this.selectedRowIndexes.length > 1) {\n                    this.clearRowSelection();\n                    this.prevRowIndex = undefined;\n                }\n                if (this.selectedColumnsIndexes.length > 1) {\n                    this.clearColumnSelection();\n                    this.prevColIndex = undefined;\n                }\n                this.enableSelectMultiTouch = false;\n                this.hidePopUp();\n            }\n            else if (this.selectionSettings.type === 'Multiple') {\n                gObj.element.setAttribute('aria-multiselectable', 'true');\n            }\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(e.properties.mode) ||\n            !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(e.properties.cellSelectionMode)) {\n            this.clearSelection();\n            this.prevRowIndex = undefined;\n            this.prevCIdxs = undefined;\n            this.prevColIndex = undefined;\n        }\n        this.isPersisted = true;\n        this.checkBoxSelectionChanged();\n        this.isPersisted = false;\n        if (!this.parent.isCheckBoxSelection) {\n            this.initPerisistSelection();\n        }\n        var checkboxColumn = this.parent.getColumns().filter(function (col) { return col.type === 'checkbox'; });\n        if (checkboxColumn.length) {\n            gObj.isCheckBoxSelection = !(this.selectionSettings.checkboxMode === 'ResetOnRowClick');\n        }\n        this.drawBorders();\n    };\n    Selection.prototype.hidePopUp = function () {\n        if (this.parent.element.querySelector('.e-gridpopup').getElementsByClassName('e-rowselect').length) {\n            this.parent.element.querySelector('.e-gridpopup').style.display = 'none';\n        }\n    };\n    Selection.prototype.initialEnd = function () {\n        if (!this.selectedRowIndexes.length) {\n            this.parent.off(_base_constant__WEBPACK_IMPORTED_MODULE_3__.contentReady, this.initialEnd);\n            this.selectRow(this.parent.selectedRowIndex);\n        }\n    };\n    Selection.prototype.checkBoxSelectionChanged = function () {\n        var gobj = this.parent;\n        gobj.off(_base_constant__WEBPACK_IMPORTED_MODULE_3__.contentReady, this.checkBoxSelectionChanged);\n        var checkboxColumn = gobj.getColumns().filter(function (col) { return col.type === 'checkbox'; });\n        if (checkboxColumn.length > 0) {\n            gobj.isCheckBoxSelection = true;\n            this.chkField = checkboxColumn[0].field;\n            this.totalRecordsCount = this.parent.pageSettings.totalRecordsCount;\n            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.totalRecordsCount)) {\n                this.totalRecordsCount = this.getCurrentBatchRecordChanges().length;\n            }\n            if (this.isSingleSel()) {\n                gobj.selectionSettings.type = 'Multiple';\n                gobj.dataBind();\n            }\n            else {\n                this.initPerisistSelection();\n            }\n        }\n        if (!gobj.isCheckBoxSelection && !this.isPersisted) {\n            this.chkField = null;\n            this.initPerisistSelection();\n        }\n    };\n    Selection.prototype.initPerisistSelection = function () {\n        var gobj = this.parent;\n        if (this.parent.selectionSettings.persistSelection && this.parent.getPrimaryKeyFieldNames().length > 0) {\n            gobj.isPersistSelection = true;\n            this.ensureCheckboxFieldSelection();\n        }\n        else if (this.parent.getPrimaryKeyFieldNames().length > 0) {\n            gobj.isPersistSelection = false;\n            this.ensureCheckboxFieldSelection();\n        }\n        else {\n            gobj.isPersistSelection = false;\n            this.selectedRowState = {};\n        }\n    };\n    Selection.prototype.ensureCheckboxFieldSelection = function () {\n        var gobj = this.parent;\n        this.primaryKey = this.parent.getPrimaryKeyFieldNames()[0];\n        if (!gobj.enableVirtualization && this.chkField\n            && ((gobj.isPersistSelection && Object.keys(this.selectedRowState).length === 0) ||\n                !gobj.isPersistSelection)) {\n            this.dataSuccess((!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.parent.dataSource) && this.parent.dataSource.result) ||\n                this.parent.getDataModule().isRemote() ? this.parent.getCurrentViewRecords() :\n                this.parent.renderModule.data.dataManager.dataSource.json);\n        }\n    };\n    Selection.prototype.dataSuccess = function (res) {\n        for (var i = 0; i < res.length; i++) {\n            var pkValue = this.getPkValue(this.primaryKey, res[parseInt(i.toString(), 10)]);\n            var checkedFieldData = res[parseInt(i.toString(), 10)][this.chkField];\n            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.selectedRowState[\"\" + pkValue]) && checkedFieldData && typeof checkedFieldData === 'boolean') {\n                this.selectedRowState[\"\" + pkValue] = checkedFieldData;\n                if (this.parent.isPersistSelection) {\n                    this.persistSelectedData.push(res[parseInt(i.toString(), 10)]);\n                }\n            }\n        }\n    };\n    Selection.prototype.setRowSelection = function (state) {\n        if (!(this.parent.getDataModule().isRemote() || (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.parent.dataSource)\n            && this.parent.dataSource.result))) {\n            if (state) {\n                if (this.isPartialSelection && (this.parent.enableVirtualization || this.parent.enableInfiniteScrolling)) {\n                    var rowObj = this.parent.getRowsObject().filter(function (e) { return e.isSelectable; });\n                    for (var _i = 0, rowObj_1 = rowObj; _i < rowObj_1.length; _i++) {\n                        var row = rowObj_1[_i];\n                        this.selectedRowState[this.getPkValue(this.primaryKey, row.data)] = true;\n                    }\n                }\n                else {\n                    var selectedData = this.isPartialSelection ? this.parent.partialSelectedRecords : this.getData();\n                    if (this.parent.groupSettings.columns.length) {\n                        for (var _a = 0, _b = this.isPartialSelection ? selectedData : selectedData.records; _a < _b.length; _a++) {\n                            var data = _b[_a];\n                            this.selectedRowState[this.getPkValue(this.primaryKey, data)] = true;\n                        }\n                    }\n                    else {\n                        for (var _c = 0, selectedData_1 = selectedData; _c < selectedData_1.length; _c++) {\n                            var data = selectedData_1[_c];\n                            this.selectedRowState[this.getPkValue(this.primaryKey, data)] = true;\n                        }\n                    }\n                }\n            }\n            else {\n                this.selectedRowState = {};\n            }\n            // (this.getData()).forEach(function (data) {\n            //     this.selectedRowState[data[this.primaryKey]] = true;\n            // })\n        }\n        else {\n            if (state) {\n                var selectedStateKeys = Object.keys(this.selectedRowState);\n                var unSelectedRowStateKeys = Object.keys(this.unSelectedRowState);\n                if (!this.isCheckboxReset) {\n                    var rowData = (this.parent.groupSettings.columns.length && this.parent.isPersistSelection) ?\n                        this.parent.currentViewData['records'] : this.parent.currentViewData;\n                    for (var _d = 0, rowData_1 = rowData; _d < rowData_1.length; _d++) {\n                        var data = rowData_1[_d];\n                        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(data[this.primaryKey])) {\n                            var key = data[this.primaryKey].toString();\n                            if (selectedStateKeys.indexOf(key) === -1 && unSelectedRowStateKeys.indexOf(key) === -1) {\n                                this.selectedRowState[data[this.primaryKey]] = true;\n                            }\n                        }\n                    }\n                }\n            }\n            else {\n                this.selectedRowState = {};\n                this.unSelectedRowState = {};\n                this.rmtHdrChkbxClicked = false;\n            }\n        }\n    };\n    Selection.prototype.getData = function () {\n        return this.parent.getDataModule().dataManager.executeLocal(this.parent.getDataModule().generateQuery(true));\n    };\n    Selection.prototype.getAvailableSelectedData = function () {\n        var filteredSearchedSelectedData = new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__.DataManager(this.persistSelectedData).executeLocal(this.parent.getDataModule().generateQuery(true));\n        if (this.parent.groupSettings.columns.length && filteredSearchedSelectedData &&\n            filteredSearchedSelectedData.records) {\n            filteredSearchedSelectedData = filteredSearchedSelectedData.records.slice();\n        }\n        return filteredSearchedSelectedData;\n    };\n    Selection.prototype.refreshPersistSelection = function () {\n        var rows = this.parent.getRows();\n        this.totalRecordsCount = this.parent.getCurrentViewRecords().length;\n        if (this.parent.allowPaging) {\n            this.totalRecordsCount = this.parent.pageSettings.totalRecordsCount;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(rows) && rows.length > 0 && (this.parent.isPersistSelection || this.chkField)) {\n            var indexes = [];\n            for (var j = 0; j < rows.length; j++) {\n                var rowObj = this.getRowObj(rows[parseInt(j.toString(), 10)]);\n                var pKey = rowObj ? rowObj.data ? this.getPkValue(this.primaryKey, rowObj.data) : null : null;\n                if (pKey === null) {\n                    return;\n                }\n                if (this.isPartialSelection && !rowObj.isSelectable) {\n                    continue;\n                }\n                var checkState = void 0;\n                var chkBox = rows[parseInt(j.toString(), 10)].querySelector('.e-checkselect');\n                if (this.selectedRowState[\"\" + pKey] || (this.parent.checkAllRows === 'Check' && this.selectedRowState[\"\" + pKey] &&\n                    this.totalRecordsCount === Object.keys(this.selectedRowState).length && this.chkAllCollec.indexOf(pKey) < 0)\n                    || (this.parent.checkAllRows === 'Uncheck' && this.chkAllCollec.indexOf(pKey) > 0 && !this.parent.selectedRowIndex)\n                    || (this.parent.checkAllRows === 'Intermediate' && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.chkField) && rowObj.data[this.chkField])) {\n                    indexes.push(parseInt(rows[parseInt(j.toString(), 10)].getAttribute(_base_string_literals__WEBPACK_IMPORTED_MODULE_5__.ariaRowIndex), 10) - 1);\n                    checkState = true;\n                }\n                else {\n                    checkState = false;\n                    if (this.checkedTarget !== chkBox && this.parent.isCheckBoxSelection && chkBox) {\n                        (0,_base_util__WEBPACK_IMPORTED_MODULE_2__.removeAddCboxClasses)(chkBox.nextElementSibling, checkState);\n                    }\n                }\n                this.updatePersistCollection(rows[parseInt(j.toString(), 10)], checkState);\n            }\n            if (this.isSingleSel() && indexes.length > 0) {\n                this.selectRow(indexes[0], true);\n            }\n            else {\n                this.selectRows(indexes);\n            }\n        }\n        if ((this.parent.isCheckBoxSelection || this.parent.selectionSettings.checkboxMode === 'ResetOnRowClick') && this.getCurrentBatchRecordChanges().length > 0) {\n            this.setCheckAllState();\n        }\n    };\n    Selection.prototype.actionBegin = function (e) {\n        if (e.requestType === 'save' && this.parent.isPersistSelection) {\n            var editChkBox = this.parent.element.querySelector('.e-edit-checkselect');\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(editChkBox)) {\n                var row = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(editChkBox, '.' + _base_string_literals__WEBPACK_IMPORTED_MODULE_5__.editedRow);\n                if (row) {\n                    if (this.parent.editSettings.mode === 'Dialog') {\n                        row = this.parent.element.querySelector('.e-dlgeditrow');\n                    }\n                    var rowObj = this.getRowObj(row);\n                    if (!rowObj) {\n                        return;\n                    }\n                    this.selectedRowState[this.getPkValue(this.primaryKey, rowObj.data)] = rowObj.isSelected = editChkBox.checked;\n                }\n                else {\n                    this.isCheckedOnAdd = editChkBox.checked;\n                }\n            }\n        }\n        if (this.parent.isPersistSelection && this.isPartialSelection) {\n            if (e.requestType === 'paging' && (this.parent.getDataModule().isRemote()\n                || (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.parent.dataSource) && this.parent.dataSource.result))) {\n                this.selectedRowIndexes = [];\n            }\n            if (e.requestType === 'filtering' || e.requestType === 'searching') {\n                this.parent.partialSelectedRecords = [];\n                this.parent.disableSelectedRecords = [];\n            }\n        }\n    };\n    Selection.prototype.actionComplete = function (e) {\n        if (e.requestType === 'save' && this.parent.isPersistSelection) {\n            if (e.action === 'add') {\n                if (this.isCheckedOnAdd) {\n                    var rowObj = this.parent.getRowObjectFromUID(this.parent.getRows()[e.selectedRow].getAttribute('data-uid'));\n                    this.selectedRowState[this.getPkValue(this.primaryKey, rowObj.data)] = rowObj.isSelected = this.isCheckedOnAdd;\n                }\n                this.isHdrSelectAllClicked = false;\n                this.setCheckAllState();\n            }\n            this.refreshPersistSelection();\n        }\n        if (e.requestType === 'delete' && this.parent.isPersistSelection) {\n            var records = e.data;\n            var data = records.slice();\n            for (var i = 0; i < data.length; i++) {\n                var pkValue = this.getPkValue(this.primaryKey, data[parseInt(i.toString(), 10)]);\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(pkValue)) {\n                    this.updatePersistDelete(pkValue, this.isPartialSelection);\n                }\n            }\n            this.isHdrSelectAllClicked = false;\n            this.setCheckAllState();\n            this.totalRecordsCount = this.parent.pageSettings.totalRecordsCount;\n        }\n        if (e.requestType === 'paging') {\n            if (this.parent.isPersistSelection && this.isPartialSelection && this.isHdrSelectAllClicked) {\n                var rows = this.parent.getRowsObject();\n                var indexes = [];\n                for (var i = 0; i < rows.length; i++) {\n                    if (rows[parseInt(i.toString(), 10)].isSelectable) {\n                        indexes.push(rows[parseInt(i.toString(), 10)].index);\n                    }\n                }\n                if (indexes.length) {\n                    this.selectRows(indexes);\n                }\n            }\n            this.prevRowIndex = undefined;\n            this.prevCIdxs = undefined;\n            this.prevECIdxs = undefined;\n        }\n    };\n    Selection.prototype.onDataBound = function () {\n        var checkboxColumn = this.parent.getColumns().filter(function (col) { return col.type === 'checkbox'; });\n        if (checkboxColumn.length && !this.parent.getDataModule().isRemote()) {\n            this.gridCurrentRecord = this.getData();\n        }\n        if (!this.parent.enableVirtualization && this.parent.isPersistSelection) {\n            if (this.selectedRecords.length) {\n                this.isPrevRowSelection = true;\n            }\n        }\n        if ((this.parent.getDataModule().isRemote() || (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.parent.dataSource)\n            && this.parent.dataSource.result)) && this.rmtHdrChkbxClicked) {\n            if (this.parent.checkAllRows === 'Intermediate') {\n                this.setRowSelection(true);\n            }\n            else if (this.parent.checkAllRows === 'Uncheck') {\n                this.setRowSelection(false);\n            }\n        }\n        if (this.parent.enableVirtualization) {\n            this.setCheckAllState();\n        }\n        if (this.parent.isPersistSelection) {\n            this.refreshPersistSelection();\n        }\n        this.initialRowSelection = this.isRowType() && this.parent.element.querySelectorAll('.e-selectionbackground') &&\n            this.parent.getSelectedRows().length ? true : false;\n        if (this.parent.isCheckBoxSelection && !this.initialRowSelection) {\n            var totalRecords = this.parent.getRowsObject();\n            var indexes = [];\n            for (var i = 0; i < totalRecords.length; i++) {\n                if (totalRecords[parseInt(i.toString(), 10)].isSelected) {\n                    indexes.push(i);\n                }\n            }\n            if (indexes.length) {\n                this.selectRows(indexes);\n            }\n            this.initialRowSelection = true;\n        }\n    };\n    Selection.prototype.updatePersistSelectedData = function (checkState) {\n        if (this.parent.isPersistSelection) {\n            var rows = this.parent.getRows();\n            for (var i = 0; i < rows.length; i++) {\n                this.updatePersistCollection(rows[parseInt(i.toString(), 10)], checkState);\n            }\n            if (this.parent.checkAllRows === 'Uncheck') {\n                this.setRowSelection(false);\n                this.persistSelectedData = (this.parent.getDataModule().isRemote()\n                    || (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.parent.dataSource) && this.parent.dataSource.result))\n                    ? this.persistSelectedData : [];\n            }\n            else if (this.parent.checkAllRows === 'Check') {\n                this.setRowSelection(true);\n                this.persistSelectedData = !(this.parent.getDataModule().isRemote()\n                    || (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.parent.dataSource) && this.parent.dataSource.result))\n                    && !this.isPartialSelection ?\n                    this.parent.groupSettings.columns.length ? this.getData().records.slice() :\n                        this.getData().slice() : this.persistSelectedData;\n            }\n        }\n    };\n    Selection.prototype.checkSelectAllAction = function (checkState) {\n        var cRenderer = this.getRenderer();\n        var editForm = this.parent.element.querySelector('.e-gridform');\n        this.checkedTarget = this.getCheckAllBox();\n        if (checkState && this.getCurrentBatchRecordChanges().length) {\n            this.parent.checkAllRows = 'Check';\n            this.updatePersistSelectedData(checkState);\n            this.selectRowsByRange(cRenderer.getVirtualRowIndex(0), cRenderer.getVirtualRowIndex(this.getCurrentBatchRecordChanges().length - 1));\n            if (this.checkVirtualCheckBox() && !this.parent.isPersistSelection) {\n                this.virtualSelectedData = this.virtualCheckBoxData().slice();\n                this.selectedRowIndexes = Object.keys(this.virtualSelectedData).map(function (key) { return parseInt(key, 10); });\n            }\n        }\n        else {\n            this.parent.checkAllRows = 'Uncheck';\n            this.updatePersistSelectedData(checkState);\n            this.clearSelection();\n        }\n        this.chkAllCollec = [];\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(editForm)) {\n            var editChkBox = editForm.querySelector('.e-edit-checkselect');\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(editChkBox)) {\n                (0,_base_util__WEBPACK_IMPORTED_MODULE_2__.removeAddCboxClasses)(editChkBox.nextElementSibling, checkState);\n            }\n        }\n    };\n    Selection.prototype.checkSelectAll = function (checkBox) {\n        var _this = this;\n        var stateStr = this.getCheckAllStatus(checkBox);\n        var state = stateStr === 'Check';\n        this.isHeaderCheckboxClicked = true;\n        if ((this.parent.getDataModule().isRemote() || (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.parent.dataSource)\n            && this.parent.dataSource.result)) && ((stateStr === 'Uncheck' || this.isCheckboxReset) ||\n            (stateStr === 'Intermediate' && this.parent.isPersistSelection))) {\n            this.rmtHdrChkbxClicked = true;\n        }\n        else {\n            this.rmtHdrChkbxClicked = false;\n        }\n        if (this.rmtHdrChkbxClicked && this.isCheckboxReset) {\n            this.unSelectedRowState = {};\n        }\n        this.isCheckboxReset = false;\n        if (stateStr === 'Intermediate') {\n            if (!this.chkField && !this.parent.isPersistSelection) {\n                state = this.getCurrentBatchRecordChanges().some(function (data) {\n                    return _this.getPkValue(_this.primaryKey, data) in _this.selectedRowState;\n                });\n            }\n            if ((this.parent.getDataModule().isRemote() || (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.parent.dataSource)\n                && this.parent.dataSource.result)) && this.parent.isPersistSelection) {\n                for (var i = 0; i < this.getCurrentBatchRecordChanges().length; i++) {\n                    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.getPkValue(this.primaryKey, this.getCurrentBatchRecordChanges()[\"\" + i]))) {\n                        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                        if (Object.keys(this.selectedRowState).includes((this.getPkValue(this.primaryKey, this.getCurrentBatchRecordChanges()[\"\" + i])).toString())) {\n                            state = true;\n                        }\n                        else {\n                            state = false;\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n        if (this.parent.isPersistSelection && this.parent.allowPaging) {\n            this.totalRecordsCount = this.parent.pageSettings.totalRecordsCount;\n        }\n        this.checkSelectAllAction(!state);\n        this.target = null;\n        if (this.getCurrentBatchRecordChanges().length > 0) {\n            this.setCheckAllState();\n            this.updateSelectedRowIndexes();\n        }\n        this.triggerChkChangeEvent(checkBox, !state);\n    };\n    Selection.prototype.getCheckAllStatus = function (ele) {\n        var classes;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(ele)) {\n            classes = ele.nextElementSibling.classList;\n        }\n        else {\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.getCheckAllBox())) {\n                classes = this.getCheckAllBox().nextElementSibling.classList;\n            }\n        }\n        var status = 'None';\n        if (classes instanceof DOMTokenList) {\n            if (classes.contains('e-check')) {\n                status = 'Check';\n            }\n            else if (classes.contains('e-uncheck')) {\n                status = 'Uncheck';\n            }\n            else if (classes.contains('e-stop')) {\n                status = 'Intermediate';\n            }\n        }\n        return status;\n    };\n    Selection.prototype.checkSelect = function (checkBox) {\n        var target = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(this.checkedTarget, '.' + _base_string_literals__WEBPACK_IMPORTED_MODULE_5__.rowCell);\n        var gObj = this.parent;\n        this.isMultiCtrlRequest = true;\n        var rIndex = 0;\n        this.isHeaderCheckboxClicked = false;\n        if ((0,_base_util__WEBPACK_IMPORTED_MODULE_2__.isGroupAdaptive)(gObj)) {\n            var uid = target.parentElement.getAttribute('data-uid');\n            if (this.parent.enableVirtualization && this.parent.groupSettings.columns.length) {\n                rIndex = parseInt(target.parentElement.getAttribute(_base_string_literals__WEBPACK_IMPORTED_MODULE_5__.ariaRowIndex), 10) - 1;\n            }\n            else {\n                rIndex = gObj.getRows().map(function (m) { return m.getAttribute('data-uid'); }).indexOf(uid);\n            }\n        }\n        else {\n            rIndex = parseInt(target.parentElement.getAttribute(_base_string_literals__WEBPACK_IMPORTED_MODULE_5__.ariaRowIndex), 10) - 1;\n        }\n        if (this.parent.isPersistSelection && this.parent.element.getElementsByClassName(_base_string_literals__WEBPACK_IMPORTED_MODULE_5__.addedRow).length > 0 &&\n            this.parent.editSettings.newRowPosition === 'Top' && !this.parent.editSettings.showAddNewRow) {\n            ++rIndex;\n        }\n        this.rowCellSelectionHandler(rIndex, parseInt(target.getAttribute(_base_string_literals__WEBPACK_IMPORTED_MODULE_5__.ariaColIndex), 10) - 1);\n        this.moveIntoUncheckCollection((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(target, '.' + _base_string_literals__WEBPACK_IMPORTED_MODULE_5__.row));\n        this.setCheckAllState();\n        this.isMultiCtrlRequest = false;\n        this.triggerChkChangeEvent(checkBox, checkBox.nextElementSibling.classList.contains('e-check'));\n    };\n    Selection.prototype.moveIntoUncheckCollection = function (row) {\n        if (this.parent.checkAllRows === 'Check' || this.parent.checkAllRows === 'Uncheck') {\n            var rowObj = this.getRowObj(row);\n            var pKey = rowObj && rowObj.data ? this.getPkValue(this.primaryKey, rowObj.data) : null;\n            if (!pKey) {\n                return;\n            }\n            if (this.chkAllCollec.indexOf(pKey) < 0) {\n                this.chkAllCollec.push(pKey);\n            }\n            else {\n                this.chkAllCollec.splice(this.chkAllCollec.indexOf(pKey), 1);\n            }\n        }\n    };\n    Selection.prototype.triggerChkChangeEvent = function (checkBox, checkState) {\n        this.parent.trigger(_base_constant__WEBPACK_IMPORTED_MODULE_3__.checkBoxChange, {\n            checked: checkState, selectedRowIndexes: this.parent.getSelectedRowIndexes(),\n            target: checkBox\n        });\n        if (!this.parent.isEdit) {\n            this.checkedTarget = null;\n        }\n    };\n    Selection.prototype.updateSelectedRowIndexes = function () {\n        if (this.parent.isCheckBoxSelection && (this.parent.enableVirtualization || this.parent.enableInfiniteScrolling) &&\n            this.isPartialSelection && !(this.parent.getDataModule().isRemote() || (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.parent.dataSource)\n            && this.parent.dataSource.result))\n            && this.parent.selectionSettings.persistSelection) {\n            if (this.parent.checkAllRows !== 'Uncheck') {\n                var rowObj = this.parent.getRowsObject().filter(function (e) { return e.isSelectable; });\n                for (var _i = 0, rowObj_2 = rowObj; _i < rowObj_2.length; _i++) {\n                    var row = rowObj_2[_i];\n                    this.selectedRowIndexes.push(row.index);\n                }\n            }\n        }\n        if (this.parent.isCheckBoxSelection && this.parent.enableVirtualization && !this.isPartialSelection &&\n            (this.parent.getDataModule().isRemote() || (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.parent.dataSource)\n                && this.parent.dataSource.result))\n            && !this.parent.isPersistSelection && this.parent.checkAllRows === 'Check') {\n            var rowObj = this.parent.getRowsObject().filter(function (e) { return e.isSelectable; });\n            if (rowObj.length !== this.selectedRowIndexes.length) {\n                for (var _a = 0, rowObj_3 = rowObj; _a < rowObj_3.length; _a++) {\n                    var row = rowObj_3[_a];\n                    if (this.selectedRowIndexes.indexOf(row.index) <= -1) {\n                        this.selectedRowIndexes.push(row.index);\n                    }\n                }\n            }\n        }\n    };\n    Selection.prototype.updateSelectedRowIndex = function (index) {\n        if (this.parent.isCheckBoxSelection && (this.parent.enableVirtualization || this.parent.enableInfiniteScrolling)\n            && !(this.parent.getDataModule().isRemote() || (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.parent.dataSource)\n                && this.parent.dataSource.result))\n            && !this.isPartialSelection) {\n            if (this.parent.checkAllRows === 'Check') {\n                this.selectedRowIndexes = [];\n                var dataLength = this.parent.groupSettings.columns.length ? this.getData()['records'].length :\n                    this.getData().length;\n                for (var data = 0; data < dataLength; data++) {\n                    this.selectedRowIndexes.push(data);\n                }\n            }\n            else if (this.parent.checkAllRows === 'Uncheck') {\n                this.selectedRowIndexes = [];\n            }\n            else {\n                var row = this.parent.getRowByIndex(index);\n                if (index && row && row.getAttribute('aria-selected') === 'false') {\n                    var selectedVal = this.selectedRowIndexes.indexOf(index);\n                    this.selectedRowIndexes.splice(selectedVal, 1);\n                }\n            }\n        }\n    };\n    Selection.prototype.isAllSelected = function (count) {\n        if (this.parent.getDataModule().isRemote()\n            || (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.parent.dataSource) && this.parent.dataSource.result)) {\n            return this.getAvailableSelectedData().length === (this.parent.enableVirtualization || this.parent.enableInfiniteScrolling\n                ? this.parent.totalDataRecordsCount : this.totalRecordsCount);\n        }\n        else {\n            if (this.isPartialSelection) {\n                if (this.parent.allowPaging && this.parent.pageSettings.pageSize < this.parent.pageSettings.totalRecordsCount) {\n                    var data = this.parent.partialSelectedRecords;\n                    for (var i = 0; i < data.length; i++) {\n                        var pKey = this.getPkValue(this.primaryKey, data[parseInt(i.toString(), 10)]);\n                        if (!this.selectedRowState[\"\" + pKey]) {\n                            return false;\n                        }\n                    }\n                    return true;\n                }\n                else {\n                    return this.isSelectAllRowCount(count);\n                }\n            }\n            else {\n                var data = this.getData();\n                if (this.parent.groupSettings.columns.length && data['records']) {\n                    data = data['records'];\n                }\n                for (var i = 0; i < data.length; i++) {\n                    var pKey = this.getPkValue(this.primaryKey, data[parseInt(i.toString(), 10)]);\n                    if (!this.selectedRowState[\"\" + pKey]) {\n                        return false;\n                    }\n                }\n                return true;\n            }\n        }\n    };\n    Selection.prototype.someDataSelected = function () {\n        if ((this.parent.getDataModule().isRemote() || (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.parent.dataSource)\n            && this.parent.dataSource.result))\n            && (this.parent.searchSettings.key.length || this.parent.filterSettings.columns.length)) {\n            var filteredSearchedSelectedData = this.getAvailableSelectedData();\n            for (var i = 0; i < filteredSearchedSelectedData.length; i++) {\n                var pKey = this.getPkValue(this.primaryKey, filteredSearchedSelectedData[parseInt(i.toString(), 10)]);\n                if (this.selectedRowState[\"\" + pKey]) {\n                    return false;\n                }\n            }\n        }\n        var data = this.isPartialSelection ? this.parent.partialSelectedRecords\n            : (this.parent.getDataModule().isRemote() || (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.parent.dataSource)\n                && this.parent.dataSource.result)) ? [] : this.getData();\n        for (var i = 0; i < data.length; i++) {\n            var pKey = this.getPkValue(this.primaryKey, data[parseInt(i.toString(), 10)]);\n            if (this.selectedRowState[\"\" + pKey]) {\n                return false;\n            }\n        }\n        return true;\n    };\n    Selection.prototype.setCheckAllState = function (index, isInteraction) {\n        if (this.parent.isCheckBoxSelection || this.parent.selectionSettings.checkboxMode === 'ResetOnRowClick') {\n            var checkToSelectAll = false;\n            var isFiltered = false;\n            var checkedLen = Object.keys(this.selectedRowState).length;\n            if (this.parent.element.classList.contains('e-treelistgrid') && this.parent.isPersistSelection && !this.parent.enableVirtualization &&\n                !this.parent.getDataModule().isRemote() && Array.isArray(this.parent.dataSource) &&\n                checkedLen === this.parent.dataSource.length && checkedLen > this.totalRecordsCount) {\n                checkedLen = this.totalRecordsCount;\n            }\n            if (!this.parent.isPersistSelection) {\n                checkedLen = this.selectedRowIndexes.length;\n                this.totalRecordsCount = this.getCurrentBatchRecordChanges().length;\n            }\n            if (this.parent.isPersistSelection && !((this.parent.getDataModule().isRemote() ||\n                (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.parent.dataSource) && this.parent.dataSource.result)) &&\n                this.isPartialSelection)\n                && (this.parent.searchSettings.key.length || this.parent.filterSettings.columns.length)) {\n                isFiltered = true;\n                checkToSelectAll = this.isAllSelected(checkedLen);\n            }\n            var input = this.getCheckAllBox();\n            if (input) {\n                var spanEle = input.nextElementSibling;\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([spanEle], ['e-check', 'e-stop', 'e-uncheck']);\n                (0,_base_util__WEBPACK_IMPORTED_MODULE_2__.setChecked)(input, false);\n                input.indeterminate = false;\n                var getRecord = this.parent.getDataModule().isRemote() ? [] : this.gridCurrentRecord;\n                if (this.parent.groupSettings.columns.length && getRecord['records']) {\n                    getRecord = getRecord['records'];\n                }\n                this.totalRecordsCount = this.checkVirtualCheckBox() ? getRecord.length : this.totalRecordsCount;\n                if ((checkToSelectAll && isFiltered && (this.parent.getDataModule().isRemote() ||\n                    (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.parent.dataSource) && this.parent.dataSource.result) ||\n                    getRecord.length)) || (!isFiltered && ((checkedLen === this.totalRecordsCount && this.totalRecordsCount\n                    && !this.isPartialSelection && (!(this.parent.getDataModule().isRemote()\n                    || (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.parent.dataSource) && this.parent.dataSource.result))\n                    || this.parent.allowPaging)) ||\n                    (!this.parent.enableVirtualization && !this.parent.enableInfiniteScrolling\n                        && this.isPartialSelection && (this.isSelectAllRowCount(checkedLen) || this.isHdrSelectAllClicked))\n                    || ((this.parent.enableVirtualization || this.parent.enableInfiniteScrolling)\n                        && !this.parent.allowPaging && ((!(this.parent.getDataModule().isRemote()\n                        || (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.parent.dataSource) && this.parent.dataSource.result)) &&\n                        getRecord.length && checkedLen === getRecord.length) || ((this.parent.getDataModule().isRemote()\n                        || (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.parent.dataSource) && this.parent.dataSource.result)) &&\n                        !this.isPartialSelection && ((checkedLen === this.parent.totalDataRecordsCount) || ((this.\n                        isSelectAllRowCount(checkedLen) || checkedLen === this.totalRecordsCount) && !this.parent.isPersistSelection))) ||\n                        (this.isPartialSelection && (this.isHdrSelectAllClicked || this.isSelectAllRowCount(checkedLen)))))\n                    || (checkedLen === this.totalRecordsCount && this.totalRecordsCount && !this.isPartialSelection &&\n                        !this.parent.allowPaging && !this.parent.enableVirtualization && !this.parent.enableInfiniteScrolling)))) {\n                    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([spanEle], ['e-check']);\n                    (0,_base_util__WEBPACK_IMPORTED_MODULE_2__.setChecked)(input, true);\n                    if (isInteraction) {\n                        this.getRenderer().setSelection(null, true, true);\n                    }\n                    this.parent.checkAllRows = 'Check';\n                }\n                else if (((!this.selectedRowIndexes.length && (!this.parent.enableVirtualization ||\n                    (!this.persistSelectedData.length && !isFiltered) || (isFiltered && this.someDataSelected())) ||\n                    checkedLen === 0 && this.getCurrentBatchRecordChanges().length === 0) && !this.parent.allowPaging) ||\n                    (this.parent.allowPaging && (checkedLen === 0 || (checkedLen && isFiltered && this.someDataSelected())))) {\n                    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([spanEle], ['e-uncheck']);\n                    if (isInteraction) {\n                        this.getRenderer().setSelection(null, false, true);\n                    }\n                    this.parent.checkAllRows = 'Uncheck';\n                }\n                else {\n                    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([spanEle], ['e-stop']);\n                    this.parent.checkAllRows = 'Intermediate';\n                    input.indeterminate = true;\n                }\n                if (checkedLen === 0 && this.getCurrentBatchRecordChanges().length === 0) {\n                    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([spanEle.parentElement], ['e-checkbox-disabled']);\n                }\n                else {\n                    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([spanEle.parentElement], ['e-checkbox-disabled']);\n                }\n                if (this.isPartialSelection) {\n                    var rowCount = this.parent.getRowsObject().filter(function (e) { return e.isSelectable; }).length;\n                    if (rowCount === 0 && spanEle.parentElement.querySelector('.e-frame').classList.contains('e-uncheck')) {\n                        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([spanEle.parentElement], ['e-checkbox-disabled']);\n                    }\n                    else {\n                        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([spanEle.parentElement], ['e-checkbox-disabled']);\n                    }\n                }\n                if ((this.parent.enableVirtualization || this.parent.enableInfiniteScrolling)\n                    && !this.parent.allowPaging && !(this.parent.getDataModule().isRemote()\n                    || (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.parent.dataSource) && this.parent.dataSource.result))) {\n                    this.updateSelectedRowIndex(index);\n                }\n            }\n        }\n    };\n    Selection.prototype.checkVirtualCheckBox = function () {\n        return this.parent.enableVirtualization && !(this.parent.getDataModule().isRemote() || (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.parent.dataSource)\n            && this.parent.dataSource.result)) && this.parent.isCheckBoxSelection && !this.isPartialSelection;\n    };\n    Selection.prototype.virtualCheckBoxData = function () {\n        var data = this.getData();\n        if (this.parent.groupSettings.columns.length && data['records']) {\n            data = data['records'];\n        }\n        return data;\n    };\n    Selection.prototype.isSelectAllRowCount = function (count) {\n        var rowCount = 0;\n        var rowObj = this.parent.getRowsObject();\n        if (this.parent.selectionSettings.persistSelection && (this.parent.enableVirtualization || this.parent.enableInfiniteScrolling)) {\n            var dataLen = (this.parent.getDataModule().isRemote() || (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.parent.dataSource)\n                && this.parent.dataSource.result)) ?\n                this.parent.totalDataRecordsCount : this.getData() && this.getData().length;\n            if (dataLen === rowObj.length) {\n                rowCount = rowObj.filter(function (e) { return e.isSelectable; }).length;\n                return rowCount && count === rowCount;\n            }\n            else {\n                return false;\n            }\n        }\n        else {\n            if (this.parent.allowPaging && this.parent.selectionSettings.persistSelection) {\n                rowCount = this.parent.partialSelectedRecords.length + this.parent.disableSelectedRecords.length;\n                if (rowCount === this.totalRecordsCount) {\n                    return this.parent.partialSelectedRecords.length && count === this.parent.partialSelectedRecords.length;\n                }\n                else {\n                    return false;\n                }\n            }\n            else {\n                rowCount = rowObj.filter(function (e) { return e.isSelectable; }).length;\n                return rowCount && count === rowCount;\n            }\n        }\n    };\n    Selection.prototype.keyDownHandler = function (e) {\n        // Below are keyCode for command key in MAC OS. Safari/Chrome(91-Left command, 93-Right Command), Opera(17), FireFox(224)\n        if ((_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.info.name === 'opera' && e.keyCode === 17) || (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.info.name === 'mozilla' && e.keyCode === 224) ||\n            (((_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.info.name === 'safari') || (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.info.name === 'chrome')) && (e.keyCode === 91 || e.keyCode === 93))) {\n            this.cmdKeyPressed = true;\n        }\n        var targetHeadCell = (0,_base_util__WEBPACK_IMPORTED_MODULE_2__.parentsUntil)(e.target, 'e-headercell');\n        var targetRowCell = (0,_base_util__WEBPACK_IMPORTED_MODULE_2__.parentsUntil)(e.target, _base_string_literals__WEBPACK_IMPORTED_MODULE_5__.rowCell);\n        var isCheckBox = targetHeadCell ? targetHeadCell.children[0].classList.contains('e-headerchkcelldiv') :\n            targetRowCell ? targetRowCell.classList.contains('e-gridchkbox') : false;\n        if (isCheckBox && !this.parent.allowKeyboard && e.keyCode === 32) {\n            e.preventDefault();\n        }\n    };\n    Selection.prototype.keyUpHandler = function (e) {\n        if ((_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.info.name === 'opera' && e.keyCode === 17) || (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.info.name === 'mozilla' && e.keyCode === 224) ||\n            (((_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.info.name === 'safari') || (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.info.name === 'chrome')) && (e.keyCode === 91 || e.keyCode === 93))) {\n            this.cmdKeyPressed = false;\n        }\n    };\n    Selection.prototype.clickHandler = function (e) {\n        var target = e.target;\n        this.actualTarget = target;\n        if (!this.isAutoFillSel && !e.ctrlKey && !e.shiftKey) {\n            this.startAFCell = this.endAFCell = null;\n        }\n        if (this.selectionSettings.persistSelection) {\n            this.deSelectedData = (0,_base_util__WEBPACK_IMPORTED_MODULE_2__.iterateExtend)(this.persistSelectedData);\n        }\n        if ((0,_base_util__WEBPACK_IMPORTED_MODULE_2__.parentsUntil)(target, _base_string_literals__WEBPACK_IMPORTED_MODULE_5__.row) || (0,_base_util__WEBPACK_IMPORTED_MODULE_2__.parentsUntil)(target, 'e-headerchkcelldiv') ||\n            (this.selectionSettings.allowColumnSelection && target.classList.contains('e-headercell'))) {\n            this.isInteracted = true;\n        }\n        this.cmdKeyPressed = e.metaKey;\n        this.isMultiCtrlRequest = e.ctrlKey || this.enableSelectMultiTouch ||\n            (this.isMacOS && this.cmdKeyPressed);\n        if (!this.parent.allowKeyboard) {\n            this.isMultiShiftRequest = false;\n            this.isMultiCtrlRequest = false;\n        }\n        else {\n            this.isMultiShiftRequest = e.shiftKey;\n        }\n        this.isMultiCtrlRequestCell = this.isMultiCtrlRequest;\n        this.popUpClickHandler(e);\n        var chkSelect = false;\n        this.preventFocus = true;\n        var checkBox;\n        var checkWrap = (0,_base_util__WEBPACK_IMPORTED_MODULE_2__.parentsUntil)(target, 'e-checkbox-wrapper');\n        this.checkSelectAllClicked = checkWrap && checkWrap.getElementsByClassName('e-checkselectall') ||\n            (this.selectionSettings.persistSelection && (0,_base_util__WEBPACK_IMPORTED_MODULE_2__.parentsUntil)(target, _base_string_literals__WEBPACK_IMPORTED_MODULE_5__.row)) ? true : false;\n        if (this.selectionSettings.persistSelection && this.isPartialSelection && (0,_base_util__WEBPACK_IMPORTED_MODULE_2__.parentsUntil)(target, 'e-headerchkcelldiv')\n            && !target.querySelector('.e-checkbox-disabled')) {\n            this.isHdrSelectAllClicked = true;\n        }\n        if (checkWrap && checkWrap.querySelectorAll('.e-checkselect,.e-checkselectall').length > 0) {\n            checkBox = checkWrap.querySelector('input[type=\"checkbox\"]');\n            chkSelect = true;\n        }\n        this.drawBorders();\n        this.updateAutoFillPosition();\n        target = (0,_base_util__WEBPACK_IMPORTED_MODULE_2__.parentsUntil)(target, _base_string_literals__WEBPACK_IMPORTED_MODULE_5__.rowCell);\n        if (this.parent.isReact && (target && !target.parentElement && target.classList.contains('e-rowcell'))) {\n            target = this.parent.getCellFromIndex(parseInt(target.getAttribute('index'), 10), parseInt(target.getAttribute('aria-colindex'), 10) - 1);\n        }\n        if (this.isRowDragSelected && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(target) && this.parent.allowRowDragAndDrop &&\n            this.selectionSettings.persistSelection && this.checkSelectAllClicked) {\n            this.isRowDragSelected = false;\n        }\n        if (((target && target.parentElement.classList.contains(_base_string_literals__WEBPACK_IMPORTED_MODULE_5__.row) && !this.parent.selectionSettings.checkboxOnly) || chkSelect)\n            && !this.isRowDragSelected) {\n            if (this.parent.isCheckBoxSelection) {\n                this.isMultiCtrlRequest = true;\n            }\n            this.target = target;\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(checkBox)) {\n                this.checkedTarget = checkBox;\n                if (checkBox.classList.contains('e-checkselectall')) {\n                    this.checkSelectAll(checkBox);\n                }\n                else {\n                    this.checkSelect(checkBox);\n                }\n            }\n            else {\n                var rIndex = 0;\n                rIndex = parseInt(target.parentElement.getAttribute(_base_string_literals__WEBPACK_IMPORTED_MODULE_5__.ariaRowIndex), 10) - 1;\n                if (this.parent.isPersistSelection && !this.parent.editSettings.showAddNewRow\n                    && this.parent.element.getElementsByClassName(_base_string_literals__WEBPACK_IMPORTED_MODULE_5__.addedRow).length > 0) {\n                    ++rIndex;\n                }\n                if (!this.mUPTarget || !this.mUPTarget.isEqualNode(target)) {\n                    this.rowCellSelectionHandler(rIndex, parseInt(target.getAttribute(_base_string_literals__WEBPACK_IMPORTED_MODULE_5__.ariaColIndex), 10) - 1);\n                }\n                if (this.parent.isCheckBoxSelection) {\n                    this.moveIntoUncheckCollection((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(target, '.' + _base_string_literals__WEBPACK_IMPORTED_MODULE_5__.row));\n                    this.setCheckAllState();\n                }\n            }\n            if (!this.parent.isCheckBoxSelection && _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice && !this.isSingleSel()) {\n                this.showPopup(e);\n            }\n        }\n        else if (e.target.classList.contains('e-headercell') &&\n            !e.target.classList.contains('e-stackedheadercell')) {\n            var uid = e.target.querySelector('.e-headercelldiv').getAttribute('e-mappinguid');\n            this.headerSelectionHandler(this.parent.getColumnIndexByUid(uid));\n        }\n        this.isMultiCtrlRequest = false;\n        this.isMultiCtrlRequestCell = this.isMultiCtrlRequest;\n        this.isMultiShiftRequest = false;\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(e.target, '.e-unboundcell'))) {\n            this.preventFocus = false;\n        }\n    };\n    Selection.prototype.popUpClickHandler = function (e) {\n        var target = e.target;\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(target, '.e-headercell') || e.target.classList.contains(_base_string_literals__WEBPACK_IMPORTED_MODULE_5__.rowCell) ||\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(target, '.e-gridpopup')) {\n            if (target.classList.contains('e-rowselect')) {\n                if (!target.classList.contains('e-spanclicked')) {\n                    target.classList.add('e-spanclicked');\n                    this.enableSelectMultiTouch = true;\n                }\n                else {\n                    target.classList.remove('e-spanclicked');\n                    this.enableSelectMultiTouch = false;\n                    this.parent.element.querySelector('.e-gridpopup').style.display = 'none';\n                }\n            }\n        }\n        else {\n            this.parent.element.querySelector('.e-gridpopup').style.display = 'none';\n        }\n    };\n    Selection.prototype.showPopup = function (e) {\n        if (!this.selectionSettings.enableSimpleMultiRowSelection) {\n            (0,_base_util__WEBPACK_IMPORTED_MODULE_2__.setCssInGridPopUp)(this.parent.element.querySelector('.e-gridpopup'), e, 'e-rowselect e-icons e-icon-rowselect' +\n                (!this.isSingleSel() && (this.selectedRecords.length > 1\n                    || this.selectedRowCellIndexes.length > 1) ? ' e-spanclicked' : ''));\n        }\n    };\n    Selection.prototype.rowCellSelectionHandler = function (rowIndex, cellIndex) {\n        if ((!this.isMultiCtrlRequest && !this.isMultiShiftRequest) || this.isSingleSel()) {\n            if (!this.isDragged) {\n                this.selectRow(rowIndex, this.selectionSettings.enableToggle);\n            }\n            this.selectCell({ rowIndex: rowIndex, cellIndex: cellIndex }, this.selectionSettings.enableToggle);\n            if (this.selectedRowCellIndexes.length) {\n                this.updateAutoFillPosition();\n            }\n            this.drawBorders();\n        }\n        else if (this.isMultiShiftRequest) {\n            if (this.parent.isCheckBoxSelection || (!this.parent.isCheckBoxSelection &&\n                !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(this.target, '.' + _base_string_literals__WEBPACK_IMPORTED_MODULE_5__.rowCell).classList.contains(_base_string_literals__WEBPACK_IMPORTED_MODULE_5__.gridChkBox))) {\n                this.selectRowsByRange((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isUndefined)(this.prevRowIndex) ? rowIndex : this.prevRowIndex, rowIndex);\n            }\n            else {\n                this.addRowsToSelection([rowIndex]);\n            }\n            this.selectCellsByRange((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isUndefined)(this.prevCIdxs) ? { rowIndex: rowIndex, cellIndex: cellIndex } : this.prevCIdxs, { rowIndex: rowIndex, cellIndex: cellIndex });\n            this.updateAutoFillPosition();\n            this.drawBorders();\n        }\n        else {\n            this.addRowsToSelection([rowIndex]);\n            if (this.selectionSettings.mode === 'Both') {\n                var checkboxColumn = this.parent.getColumns().find(function (col) { return col.type === 'checkbox'; });\n                var checkboxColumnIndexCheck = checkboxColumn && checkboxColumn.index !== cellIndex;\n                if (checkboxColumnIndexCheck && !this.isMultiCtrlRequestCell) {\n                    this.selectCell({ rowIndex: rowIndex, cellIndex: cellIndex }, this.selectionSettings.enableToggle);\n                }\n                else if (!checkboxColumn || checkboxColumnIndexCheck) {\n                    this.addCellsToSelection([{ rowIndex: rowIndex, cellIndex: cellIndex }]);\n                }\n            }\n            else {\n                this.addCellsToSelection([{ rowIndex: rowIndex, cellIndex: cellIndex }]);\n            }\n            this.showHideBorders('none');\n        }\n        this.isDragged = false;\n    };\n    Selection.prototype.onCellFocused = function (e) {\n        if (this.parent.frozenRows && e.container.isHeader && e.byKey) {\n            if (e.keyArgs.action === 'upArrow') {\n                if (this.parent.allowFiltering) {\n                    e.isJump = e.element.tagName === 'INPUT' ? true : false;\n                }\n                else {\n                    e.isJump = e.element.tagName === 'TH' ? true : false;\n                }\n            }\n            else {\n                if (e.keyArgs.action === 'downArrow') {\n                    var rIdx = Number(e.element.parentElement.getAttribute(_base_string_literals__WEBPACK_IMPORTED_MODULE_5__.ariaRowIndex)) - 1;\n                    e.isJump = rIdx === 0 ? true : false;\n                }\n                else {\n                    if (e.keyArgs.action === 'ctrlHome') {\n                        e.isJump = true;\n                    }\n                }\n            }\n        }\n        var clear = ((e.container.isHeader && e.isJump) ||\n            (e.container.isContent && !e.container.isSelectable)) && !(e.byKey && e.keyArgs.action === 'space')\n            && !(e.element.classList.contains('e-detailrowexpand') || e.element.classList.contains('e-detailrowcollapse'));\n        var headerAction = (e.container.isHeader && e.element.tagName !== 'TD' && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(e.element, '.' + _base_string_literals__WEBPACK_IMPORTED_MODULE_5__.rowCell))\n            && !(e.byKey && e.keyArgs.action === 'space');\n        if (!e.byKey || clear) {\n            if (clear && !(this.parent.isCheckBoxSelection || (this.selectionSettings.persistSelection && (e.parent.classList.contains('e-recordplusexpand') ||\n                e.parent.classList.contains('e-groupcaption'))))) {\n                this.clearSelection();\n            }\n            return;\n        }\n        var _a = e.container.isContent ? e.container.indexes : e.indexes, rowIndex = _a[0], cellIndex = _a[1];\n        var prev = this.focus.getPrevIndexes();\n        if (e.element.parentElement.querySelector('.e-rowcelldrag') || e.element.parentElement.querySelector('.e-dtdiagonalright')\n            || e.element.parentElement.querySelector('.e-dtdiagonaldown')) {\n            prev.cellIndex = prev.cellIndex - 1;\n        }\n        if (this.parent.frozenRows) {\n            if (e.container.isHeader && (e.element.tagName === 'TD' || (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(e.element, '.' + _base_string_literals__WEBPACK_IMPORTED_MODULE_5__.rowCell))) {\n                var hdrLength = this.parent.getHeaderTable().querySelector('thead').childElementCount;\n                if (this.parent.editSettings.showAddNewRow && this.parent.editSettings.newRowPosition === 'Top' &&\n                    e.keyArgs.action === 'upArrow') {\n                    hdrLength++;\n                }\n                rowIndex -= hdrLength;\n                prev.rowIndex = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(prev.rowIndex) ? prev.rowIndex - hdrLength : null;\n            }\n            else {\n                rowIndex += this.parent.frozenRows;\n                prev.rowIndex = prev.rowIndex === 0 || !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(prev.rowIndex) ? prev.rowIndex + this.parent.frozenRows : null;\n            }\n        }\n        if (this.parent.enableInfiniteScrolling && this.parent.infiniteScrollSettings.enableCache) {\n            rowIndex = parseInt(e.element.parentElement.getAttribute('aria-rowindex'), 10) - 1;\n        }\n        if ((headerAction || (['ctrlPlusA', 'escape'].indexOf(e.keyArgs.action) === -1 &&\n            e.keyArgs.action !== 'space' && rowIndex === prev.rowIndex && cellIndex === prev.cellIndex)) &&\n            !this.selectionSettings.allowColumnSelection) {\n            return;\n        }\n        if (this.parent.enableVirtualization) {\n            rowIndex = parseInt(e.element.parentElement.getAttribute('aria-rowindex'), 10) - 1;\n            if (!this.parent.enableColumnVirtualization && !this.parent.groupSettings.columns.length &&\n                this.parent.totalDataRecordsCount >= 1) {\n                if (e.keyArgs.action === 'ctrlHome') {\n                    rowIndex = 0;\n                    this.parent.isFocusFirstCell = true;\n                }\n                else if (e.keyArgs.action === 'ctrlEnd') {\n                    rowIndex = this.parent.totalDataRecordsCount - 1;\n                    this.isFocusLastCell = true;\n                }\n            }\n        }\n        if (this.parent.editSettings.showAddNewRow && this.parent.editSettings.newRowPosition === 'Top' &&\n            (!this.parent.enableVirtualization && !this.parent.enableInfiniteScrolling) && e.keyArgs.action === 'downArrow') {\n            rowIndex--;\n        }\n        this.preventFocus = true;\n        var columnIndex = this.getKeyColIndex(e);\n        if (this.needColumnSelection) {\n            cellIndex = columnIndex;\n        }\n        if (this.parent.element.classList.contains('e-gridcell-read') && (e.keyArgs.action === 'tab' || e.keyArgs.action === 'shiftTab'\n            || e.keyArgs.action === 'rightArrow' || e.keyArgs.action === 'leftArrow')) {\n            var targetLabel = this.target.getAttribute('aria-label');\n            targetLabel = this.target.innerHTML + ' column header ' + this.parent.getColumnByIndex(cellIndex).field;\n            this.target.setAttribute('aria-label', targetLabel);\n        }\n        switch (e.keyArgs.action) {\n            case 'downArrow':\n            case 'upArrow':\n            case 'enter':\n            case 'shiftEnter':\n                this.target = e.element;\n                this.isKeyAction = true;\n                this.applyDownUpKey(rowIndex, cellIndex);\n                break;\n            case 'rightArrow':\n            case 'leftArrow':\n                this.applyRightLeftKey(rowIndex, cellIndex);\n                break;\n            case 'shiftDown':\n            case 'shiftUp':\n                this.shiftDownKey(rowIndex, cellIndex);\n                break;\n            case 'shiftLeft':\n            case 'shiftRight':\n                this.applyShiftLeftRightKey(rowIndex, cellIndex);\n                break;\n            case 'home':\n            case 'end':\n                cellIndex = e.keyArgs.action === 'end' ? this.getLastColIndex(rowIndex) : 0;\n                this.applyHomeEndKey(rowIndex, cellIndex);\n                break;\n            case 'ctrlHome':\n            case 'ctrlEnd':\n                this.applyCtrlHomeEndKey(rowIndex, cellIndex);\n                break;\n            case 'escape':\n                this.clearSelection();\n                if (this.parent.clipboardModule) {\n                    window.navigator['clipboard'].writeText('');\n                }\n                break;\n            case 'ctrlPlusA':\n                this.ctrlPlusA();\n                break;\n            case 'space':\n                this.applySpaceSelection(e.element);\n                break;\n            case 'tab':\n                if (this.parent.editSettings.allowNextRowEdit) {\n                    this.selectRow(rowIndex);\n                }\n                break;\n        }\n        this.needColumnSelection = false;\n        this.preventFocus = false;\n        this.positionBorders();\n        if (this.parent.isFrozenGrid()) {\n            this.showHideBorders('none', true);\n            this.refreshFrozenBorders();\n        }\n        this.updateAutoFillPosition();\n    };\n    Selection.prototype.getKeyColIndex = function (e) {\n        var uid;\n        var index = null;\n        var stackedHeader = e.element.querySelector('.e-stackedheadercelldiv');\n        if (this.selectionSettings.allowColumnSelection && (0,_base_util__WEBPACK_IMPORTED_MODULE_2__.parentsUntil)(e.element, 'e-columnheader')) {\n            this.needColumnSelection = e.container.isHeader ? true : false;\n            if (stackedHeader) {\n                if (e.keyArgs.action === 'rightArrow' || e.keyArgs.action === 'leftArrow') {\n                    return index;\n                }\n                uid = stackedHeader.getAttribute('e-mappinguid');\n                var innerColumn = this.getstackedColumns(this.parent.getColumnByUid(uid).columns);\n                var lastIndex = this.parent.getColumnIndexByUid(innerColumn[innerColumn.length - 1].uid);\n                var firstIndex = this.parent.getColumnIndexByUid(innerColumn[0].uid);\n                index = this.prevColIndex >= lastIndex ? firstIndex : lastIndex;\n            }\n            else {\n                index = this.parent.getColumnIndexByUid(e.element\n                    .querySelector('.e-headercelldiv').getAttribute('e-mappinguid'));\n            }\n        }\n        return index;\n    };\n    /**\n     * Apply ctrl + A key selection\n     *\n     * @returns {void}\n     * @hidden\n     */\n    Selection.prototype.ctrlPlusA = function () {\n        if (this.isRowType() && !this.isSingleSel()) {\n            var rowObj = this.parent.getRowsObject();\n            this.selectRowsByRange(rowObj[0].index, rowObj[rowObj.length - 1].index);\n        }\n        if (this.isCellType() && !this.isSingleSel()) {\n            this.selectCellsByRange({ rowIndex: 0, cellIndex: 0 }, { rowIndex: this.parent.getRows().length - 1, cellIndex: this.parent.getColumns().length - 1 });\n        }\n    };\n    Selection.prototype.applySpaceSelection = function (target) {\n        if (target.classList.contains('e-checkselectall')) {\n            this.checkedTarget = target;\n            this.checkSelectAll(this.checkedTarget);\n        }\n        else {\n            if (target.classList.contains('e-checkselect')) {\n                this.checkedTarget = target;\n                this.checkSelect(this.checkedTarget);\n            }\n        }\n    };\n    Selection.prototype.applyDownUpKey = function (rowIndex, cellIndex) {\n        var gObj = this.parent;\n        if (this.parent.isCheckBoxSelection && this.parent.checkAllRows === 'Check' && !this.selectionSettings.persistSelection &&\n            !this.selectionSettings.checkboxOnly) {\n            this.checkSelectAllAction(false);\n            this.checkedTarget = null;\n        }\n        if (this.isRowType() && !this.selectionSettings.checkboxOnly) {\n            if (this.parent.frozenRows) {\n                this.selectRow(rowIndex, true);\n                this.applyUpDown(gObj.selectedRowIndex);\n            }\n            else {\n                this.selectRow(rowIndex, true);\n                this.applyUpDown(gObj.selectedRowIndex);\n            }\n        }\n        if (this.isCellType()) {\n            this.selectCell({ rowIndex: rowIndex, cellIndex: cellIndex }, true);\n        }\n        if (this.selectionSettings.allowColumnSelection && this.needColumnSelection) {\n            this.selectColumn(cellIndex);\n        }\n    };\n    Selection.prototype.applyUpDown = function (rowIndex) {\n        if (rowIndex < 0) {\n            return;\n        }\n        if (!this.target) {\n            this.target = this.parent.getRows()[0].children[this.parent.groupSettings.columns.length || 0];\n        }\n        var cIndex = parseInt(this.target.getAttribute(_base_string_literals__WEBPACK_IMPORTED_MODULE_5__.ariaColIndex), 10) - 1;\n        var row = this.contentRenderer.getRowByIndex(rowIndex);\n        if (row) {\n            this.target = row.getElementsByClassName(_base_string_literals__WEBPACK_IMPORTED_MODULE_5__.rowCell)[parseInt(cIndex.toString(), 10)];\n        }\n        this.addAttribute(this.target);\n        if (this.parent.element.classList.contains('e-gridcell-read')) {\n            var targetLabel = this.target.getAttribute('aria-label');\n            targetLabel = this.target.innerHTML;\n            this.target.setAttribute('aria-label', targetLabel);\n        }\n    };\n    Selection.prototype.applyRightLeftKey = function (rowIndex, cellIndex) {\n        if (this.selectionSettings.allowColumnSelection && this.needColumnSelection) {\n            this.selectColumn(cellIndex);\n        }\n        else if (this.isCellType()) {\n            this.selectCell({ rowIndex: rowIndex, cellIndex: cellIndex }, true);\n            this.addAttribute(this.target);\n        }\n    };\n    Selection.prototype.applyHomeEndKey = function (rowIndex, cellIndex) {\n        if (this.isCellType()) {\n            this.selectCell({ rowIndex: rowIndex, cellIndex: cellIndex }, true);\n        }\n        else {\n            this.addAttribute(this.parent.getCellFromIndex(rowIndex, cellIndex));\n        }\n    };\n    /**\n     * Apply shift+down key selection\n     *\n     * @param {number} rowIndex - specfies the rowIndex\n     * @param {number} cellIndex - specifies the CellIndex\n     * @returns {void}\n     * @hidden\n     */\n    Selection.prototype.shiftDownKey = function (rowIndex, cellIndex) {\n        this.isMultiShiftRequest = true;\n        if (this.isRowType() && !this.isSingleSel()) {\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isUndefined)(this.prevRowIndex)) {\n                this.selectRowsByRange(this.prevRowIndex, rowIndex);\n                this.applyUpDown(rowIndex);\n            }\n            else if (this.isPartialSelection) {\n                this.selectRow(rowIndex, true);\n            }\n            else {\n                this.selectRow(0, true);\n            }\n        }\n        if (this.isCellType() && !this.isSingleSel()) {\n            this.selectCellsByRange(this.prevCIdxs || { rowIndex: 0, cellIndex: 0 }, { rowIndex: rowIndex, cellIndex: cellIndex });\n        }\n        this.isMultiShiftRequest = false;\n    };\n    Selection.prototype.applyShiftLeftRightKey = function (rowIndex, cellIndex) {\n        this.isMultiShiftRequest = true;\n        if (this.selectionSettings.allowColumnSelection && this.needColumnSelection) {\n            this.selectColumnsByRange(this.prevColIndex, cellIndex);\n        }\n        else {\n            this.selectCellsByRange(this.prevCIdxs, { rowIndex: rowIndex, cellIndex: cellIndex });\n        }\n        this.isMultiShiftRequest = false;\n    };\n    Selection.prototype.getstackedColumns = function (column) {\n        var innerColumnIndexes = [];\n        for (var i = 0, len = column.length; i < len; i++) {\n            if (column[parseInt(i.toString(), 10)].columns) {\n                this.getstackedColumns(column[parseInt(i.toString(), 10)].columns);\n            }\n            else {\n                innerColumnIndexes.push(column[parseInt(i.toString(), 10)]);\n            }\n        }\n        return innerColumnIndexes;\n    };\n    Selection.prototype.applyCtrlHomeEndKey = function (rowIndex, cellIndex) {\n        if (this.isRowType()) {\n            this.selectRow(rowIndex, true);\n            if (!(this.parent.enableVirtualization || this.parent.enableColumnVirtualization)) {\n                this.addAttribute(this.parent.getCellFromIndex(rowIndex, cellIndex));\n            }\n        }\n        if (this.isCellType()) {\n            this.selectCell({ rowIndex: rowIndex, cellIndex: cellIndex }, true);\n        }\n    };\n    Selection.prototype.addRemoveClassesForRow = function (row, isAdd, clearAll) {\n        var args = [];\n        for (var _i = 3; _i < arguments.length; _i++) {\n            args[_i - 3] = arguments[_i];\n        }\n        if (row) {\n            var cells = [].slice.call(row.getElementsByClassName(_base_string_literals__WEBPACK_IMPORTED_MODULE_5__.rowCell));\n            var detailIndentCell = row.querySelector('.e-detailrowcollapse') || row.querySelector('.e-detailrowexpand');\n            var dragdropIndentCell = row.querySelector('.e-rowdragdrop');\n            if (detailIndentCell) {\n                cells.push(detailIndentCell);\n            }\n            if (dragdropIndentCell) {\n                cells.push(dragdropIndentCell);\n            }\n            _base_util__WEBPACK_IMPORTED_MODULE_2__.addRemoveActiveClasses.apply(void 0, [cells, isAdd].concat(args));\n        }\n        this.getRenderer().setSelection(row ? row.getAttribute('data-uid') : null, isAdd, clearAll);\n    };\n    Selection.prototype.isRowType = function () {\n        return this.selectionSettings.mode === 'Row' || this.selectionSettings.mode === 'Both';\n    };\n    Selection.prototype.isCellType = function () {\n        return this.selectionSettings.mode === 'Cell' || this.selectionSettings.mode === 'Both';\n    };\n    Selection.prototype.isSingleSel = function () {\n        return this.selectionSettings.type === 'Single';\n    };\n    Selection.prototype.getRenderer = function () {\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.contentRenderer)) {\n            this.contentRenderer = this.factory.getRenderer(_base_enum__WEBPACK_IMPORTED_MODULE_4__.RenderType.Content);\n        }\n        return this.contentRenderer;\n    };\n    /**\n     * Gets the collection of selected records.\n     *\n     * @returns {Object[]} returns the Object\n     */\n    Selection.prototype.getSelectedRecords = function () {\n        var selectedData = [];\n        if (!this.selectionSettings.persistSelection && this.selectedRecords.length) {\n            selectedData = this.parent.getRowsObject().filter(function (row) { return row.isSelected; })\n                .map(function (m) { return m.data; });\n        }\n        else {\n            selectedData = this.persistSelectedData;\n        }\n        if (this.checkVirtualCheckBox() && !this.parent.isPersistSelection) {\n            selectedData = this.virtualSelectedData;\n        }\n        return selectedData;\n    };\n    /**\n     * Select the column by passing start column index\n     *\n     * @param {number} index - specifies the index\n     * @returns {void}\n     */\n    Selection.prototype.selectColumn = function (index) {\n        var gObj = this.parent;\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(gObj.getColumns()[parseInt(index.toString(), 10)])) {\n            return;\n        }\n        var column = gObj.getColumnByIndex(index);\n        var selectedCol = gObj.getColumnHeaderByUid(column.uid);\n        var isColSelected = selectedCol.classList.contains('e-columnselection');\n        if ((!gObj.selectionSettings.allowColumnSelection)) {\n            return;\n        }\n        var isMultiColumns = this.selectedColumnsIndexes.length > 1 &&\n            this.selectedColumnsIndexes.indexOf(index) > -1;\n        this.clearColDependency();\n        if (!this.selectionSettings.enableToggle || isMultiColumns || !isColSelected) {\n            var args = {\n                columnIndex: index, headerCell: selectedCol,\n                column: column,\n                cancel: false, target: this.actualTarget,\n                isInteracted: this.isInteracted, previousColumnIndex: this.prevColIndex,\n                isCtrlPressed: this.isMultiCtrlRequest, isShiftPressed: this.isMultiShiftRequest\n            };\n            this.onActionBegin(args, _base_constant__WEBPACK_IMPORTED_MODULE_3__.columnSelecting);\n            if (args.cancel) {\n                this.disableInteracted();\n                return;\n            }\n            if (isMultiColumns || !(isColSelected && gObj.selectionSettings.enableToggle && index === this.prevColIndex)) {\n                this.updateColSelection(selectedCol, index);\n            }\n            var selectedArgs = {\n                columnIndex: index, headerCell: selectedCol,\n                column: column,\n                target: this.actualTarget,\n                isInteracted: this.isInteracted, previousColumnIndex: this.prevColIndex\n            };\n            this.onActionComplete(selectedArgs, _base_constant__WEBPACK_IMPORTED_MODULE_3__.columnSelected);\n        }\n        this.updateColProps(index);\n    };\n    /**\n     * Select the columns by passing start and end column index\n     *\n     * @param  {number} startIndex - specifies the start index\n     * @param  {number} endIndex - specifies the end index\n     * @returns {void}\n     */\n    Selection.prototype.selectColumnsByRange = function (startIndex, endIndex) {\n        var gObj = this.parent;\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(gObj.getColumns()[parseInt(startIndex.toString(), 10)])) {\n            return;\n        }\n        var indexes = [];\n        if (gObj.selectionSettings.type === 'Single' || (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(endIndex)) {\n            indexes[0] = startIndex;\n        }\n        else {\n            var min = startIndex < endIndex;\n            for (var i = startIndex; min ? i <= endIndex : i >= endIndex; min ? i++ : i--) {\n                indexes.push(i);\n            }\n        }\n        this.selectColumns(indexes);\n    };\n    /**\n     * Select the columns by passing column indexes\n     *\n     * @param  {number[]} columnIndexes - specifies the columnIndexes\n     * @returns {void}\n     */\n    Selection.prototype.selectColumns = function (columnIndexes) {\n        var gObj = this.parent;\n        var selectedCol = this.getselectedCols();\n        if (gObj.selectionSettings.type === 'Single') {\n            columnIndexes = [columnIndexes[0]];\n        }\n        if (!gObj.selectionSettings.allowColumnSelection) {\n            return;\n        }\n        this.clearColDependency();\n        var selectingArgs = {\n            columnIndex: columnIndexes[0], headerCell: selectedCol,\n            columnIndexes: columnIndexes,\n            column: gObj.getColumnByIndex(columnIndexes[0]),\n            cancel: false, target: this.actualTarget,\n            isInteracted: this.isInteracted, previousColumnIndex: this.prevColIndex,\n            isCtrlPressed: this.isMultiCtrlRequest, isShiftPressed: this.isMultiShiftRequest\n        };\n        this.onActionBegin(selectingArgs, _base_constant__WEBPACK_IMPORTED_MODULE_3__.columnSelecting);\n        if (selectingArgs.cancel) {\n            this.disableInteracted();\n            return;\n        }\n        for (var i = 0, len = columnIndexes.length; i < len; i++) {\n            this.updateColSelection(gObj.getColumnHeaderByUid(gObj.getColumnByIndex(columnIndexes[parseInt(i.toString(), 10)]).uid), columnIndexes[parseInt(i.toString(), 10)]);\n        }\n        selectedCol = this.getselectedCols();\n        var selectedArgs = {\n            columnIndex: columnIndexes[0], headerCell: selectedCol,\n            columnIndexes: columnIndexes,\n            column: gObj.getColumnByIndex(columnIndexes[0]),\n            target: this.actualTarget,\n            isInteracted: this.isInteracted, previousColumnIndex: this.prevColIndex\n        };\n        this.onActionComplete(selectedArgs, _base_constant__WEBPACK_IMPORTED_MODULE_3__.columnSelected);\n        this.updateColProps(columnIndexes[0]);\n    };\n    /**\n     * Select the column with existing column by passing column index\n     *\n     * @param  {number} startIndex - specifies the start index\n     * @returns {void}\n     */\n    Selection.prototype.selectColumnWithExisting = function (startIndex) {\n        var gObj = this.parent;\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(gObj.getColumns()[parseInt(startIndex.toString(), 10)])) {\n            return;\n        }\n        var newCol = gObj.getColumnHeaderByUid(gObj.getColumnByIndex(startIndex).uid);\n        var selectedCol = this.getselectedCols();\n        if (gObj.selectionSettings.type === 'Single') {\n            this.clearColDependency();\n        }\n        if (!gObj.selectionSettings.allowColumnSelection) {\n            return;\n        }\n        if (this.selectedColumnsIndexes.indexOf(startIndex) > -1) {\n            this.clearColumnSelection(startIndex);\n        }\n        else {\n            var selectingArgs = {\n                columnIndex: startIndex, headerCell: selectedCol,\n                columnIndexes: this.selectedColumnsIndexes,\n                column: gObj.getColumnByIndex(startIndex),\n                cancel: false, target: this.actualTarget,\n                isInteracted: this.isInteracted, previousColumnIndex: this.prevColIndex,\n                isCtrlPressed: this.isMultiCtrlRequest, isShiftPressed: this.isMultiShiftRequest\n            };\n            this.onActionBegin(selectingArgs, _base_constant__WEBPACK_IMPORTED_MODULE_3__.columnSelecting);\n            if (selectingArgs.cancel) {\n                this.disableInteracted();\n                return;\n            }\n            this.updateColSelection(newCol, startIndex);\n            selectedCol = this.getselectedCols();\n            var selectedArgs = {\n                columnIndex: startIndex, headerCell: selectedCol,\n                column: gObj.getColumnByIndex(startIndex),\n                columnIndexes: this.selectedColumnsIndexes,\n                target: this.actualTarget,\n                isInteracted: this.isInteracted, previousColumnIndex: this.prevColIndex\n            };\n            this.onActionComplete(selectedArgs, _base_constant__WEBPACK_IMPORTED_MODULE_3__.columnSelected);\n        }\n        this.updateColProps(startIndex);\n    };\n    /**\n     * Clear the column selection\n     *\n     * @param {number} clearIndex - specifies the clearIndex\n     * @returns {void}\n     */\n    Selection.prototype.clearColumnSelection = function (clearIndex) {\n        if (this.isColumnSelected) {\n            var gObj = this.parent;\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(clearIndex) && this.selectedColumnsIndexes.indexOf(clearIndex) === -1) {\n                return;\n            }\n            var index = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(clearIndex) ? clearIndex :\n                this.selectedColumnsIndexes[this.selectedColumnsIndexes.length - 1];\n            var column = gObj.getColumnByIndex(index);\n            var selectedCol = gObj.getColumnHeaderByUid(column.uid);\n            var deselectedArgs = {\n                columnIndex: index, headerCell: selectedCol,\n                columnIndexes: this.selectedColumnsIndexes,\n                column: column,\n                cancel: false, target: this.actualTarget,\n                isInteracted: this.isInteracted\n            };\n            var isCanceled = this.columnDeselect(deselectedArgs, _base_constant__WEBPACK_IMPORTED_MODULE_3__.columnDeselecting);\n            if (isCanceled) {\n                this.disableInteracted();\n                return;\n            }\n            var selectedHeader = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(clearIndex) ? [selectedCol] :\n                [].slice.call(gObj.getHeaderContent().getElementsByClassName('e-columnselection'));\n            var selectedCells = this.getSelectedColumnCells(clearIndex);\n            for (var i = 0, len = selectedHeader.length; i < len; i++) {\n                (0,_base_util__WEBPACK_IMPORTED_MODULE_2__.addRemoveActiveClasses)([selectedHeader[parseInt(i.toString(), 10)]], false, 'e-columnselection');\n            }\n            for (var i = 0, len = selectedCells.length; i < len; i++) {\n                (0,_base_util__WEBPACK_IMPORTED_MODULE_2__.addRemoveActiveClasses)([selectedCells[parseInt(i.toString(), 10)]], false, 'e-columnselection');\n            }\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(clearIndex)) {\n                this.selectedColumnsIndexes.splice(this.selectedColumnsIndexes.indexOf(clearIndex), 1);\n                this.parent.getColumns()[parseInt(clearIndex.toString(), 10)].isSelected = false;\n            }\n            else {\n                this.columnDeselect(deselectedArgs, _base_constant__WEBPACK_IMPORTED_MODULE_3__.columnDeselected);\n                this.selectedColumnsIndexes = [];\n                this.isColumnSelected = false;\n                this.parent.getColumns().filter(function (col) { return col.isSelected = false; });\n            }\n        }\n    };\n    Selection.prototype.getselectedCols = function () {\n        var gObj = this.parent;\n        var selectedCol;\n        if (this.selectedColumnsIndexes.length > 1) {\n            selectedCol = [];\n            for (var i = 0; i < this.selectedColumnsIndexes.length; i++) {\n                (selectedCol).push(gObj.getColumnHeaderByUid(gObj.getColumnByIndex(this.selectedColumnsIndexes[parseInt(i.toString(), 10)]).uid));\n            }\n        }\n        else {\n            selectedCol = gObj.getColumnHeaderByUid(gObj.getColumnByIndex(this.selectedColumnsIndexes[0]).uid);\n        }\n        return selectedCol;\n    };\n    Selection.prototype.getSelectedColumnCells = function (clearIndex) {\n        var gObj = this.parent;\n        var isRowTemplate = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.parent.rowTemplate);\n        var rows = isRowTemplate ? gObj.getRows() : gObj.getDataRows();\n        var seletedcells = [];\n        var selectionString = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(clearIndex) ? '[aria-colindex=\"' + (clearIndex + 1) + '\"]' : '.e-columnselection';\n        for (var i = 0, len = rows.length; i < len; i++) {\n            seletedcells = seletedcells.concat([].slice.call(rows[parseInt(i.toString(), 10)].querySelectorAll(selectionString)));\n        }\n        return seletedcells;\n    };\n    Selection.prototype.columnDeselect = function (args, event) {\n        if (event === 'columnDeselected') {\n            delete args.cancel;\n        }\n        this.onActionComplete(args, event);\n        return args.cancel;\n    };\n    Selection.prototype.updateColProps = function (startIndex) {\n        this.prevColIndex = startIndex;\n        this.isColumnSelected = this.selectedColumnsIndexes.length && true;\n    };\n    Selection.prototype.clearColDependency = function () {\n        this.clearColumnSelection();\n        this.selectedColumnsIndexes = [];\n    };\n    Selection.prototype.updateColSelection = function (selectedCol, startIndex) {\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.parent.getColumns()[parseInt(startIndex.toString(), 10)])) {\n            return;\n        }\n        var isRowTemplate = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.parent.rowTemplate);\n        var rows = isRowTemplate ? this.parent.getRows() : this.parent.getDataRows();\n        this.selectedColumnsIndexes.push(startIndex);\n        this.parent.getColumns()[parseInt(startIndex.toString(), 10)].isSelected = true;\n        startIndex = startIndex + this.parent.getIndentCount();\n        (0,_base_util__WEBPACK_IMPORTED_MODULE_2__.addRemoveActiveClasses)([selectedCol], true, 'e-columnselection');\n        for (var j = 0, len = rows.length; j < len; j++) {\n            if (rows[parseInt(j.toString(), 10)].classList.contains(_base_string_literals__WEBPACK_IMPORTED_MODULE_5__.row)) {\n                if ((rows[parseInt(j.toString(), 10)].classList.contains(_base_string_literals__WEBPACK_IMPORTED_MODULE_5__.editedRow)\n                    || rows[parseInt(j.toString(), 10)].classList.contains(_base_string_literals__WEBPACK_IMPORTED_MODULE_5__.addedRow))\n                    && this.parent.editSettings.mode === 'Normal'\n                    && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(rows[parseInt(j.toString(), 10)].querySelector('tr').childNodes[parseInt(startIndex.toString(), 10)])) {\n                    (0,_base_util__WEBPACK_IMPORTED_MODULE_2__.addRemoveActiveClasses)([rows[parseInt(j.toString(), 10)].querySelector('tr').childNodes[parseInt(startIndex.toString(), 10)]], true, 'e-columnselection');\n                }\n                else {\n                    if (this.parent.isSpan && this.parent.isFrozenGrid()) {\n                        var cells = rows[parseInt(j.toString(), 10)].querySelectorAll('.e-rowcell');\n                        for (var i = 0; i < cells.length; i++) {\n                            if (cells[parseInt(i.toString(), 10)].getAttribute('aria-colindex') === selectedCol.getAttribute('aria-colindex')) {\n                                (0,_base_util__WEBPACK_IMPORTED_MODULE_2__.addRemoveActiveClasses)([cells[parseInt(i.toString(), 10)]], true, 'e-columnselection');\n                            }\n                        }\n                    }\n                    else if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(rows[parseInt(j.toString(), 10)].childNodes[parseInt(startIndex.toString(), 10)])) {\n                        (0,_base_util__WEBPACK_IMPORTED_MODULE_2__.addRemoveActiveClasses)([rows[parseInt(j.toString(), 10)].childNodes[parseInt(startIndex.toString(), 10)]], true, 'e-columnselection');\n                    }\n                }\n            }\n        }\n    };\n    Selection.prototype.headerSelectionHandler = function (colIndex) {\n        if ((!this.isMultiCtrlRequest && !this.isMultiShiftRequest) || this.isSingleSel()) {\n            this.selectColumn(colIndex);\n        }\n        else if (this.isMultiShiftRequest) {\n            this.selectColumnsByRange((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isUndefined)(this.prevColIndex) ? colIndex : this.prevColIndex, colIndex);\n        }\n        else {\n            this.selectColumnWithExisting(colIndex);\n        }\n    };\n    // eslint-disable-next-line camelcase\n    Selection.prototype.addEventListener_checkbox = function () {\n        var _this = this;\n        this.parent.on(_base_constant__WEBPACK_IMPORTED_MODULE_3__.dataReady, this.dataReady, this);\n        this.onDataBoundFunction = this.onDataBound.bind(this);\n        this.parent.addEventListener(_base_constant__WEBPACK_IMPORTED_MODULE_3__.dataBound, this.onDataBoundFunction);\n        this.parent.on(_base_constant__WEBPACK_IMPORTED_MODULE_3__.refreshInfinitePersistSelection, this.onDataBoundFunction);\n        this.parent.on(_base_constant__WEBPACK_IMPORTED_MODULE_3__.contentReady, this.checkBoxSelectionChanged, this);\n        this.parent.on(_base_constant__WEBPACK_IMPORTED_MODULE_3__.beforeRefreshOnDataChange, this.initPerisistSelection, this);\n        this.parent.on(_base_constant__WEBPACK_IMPORTED_MODULE_3__.onEmpty, this.setCheckAllForEmptyGrid, this);\n        this.actionCompleteFunc = this.actionCompleteHandler.bind(this);\n        this.parent.addEventListener(_base_constant__WEBPACK_IMPORTED_MODULE_3__.actionComplete, this.actionCompleteFunc);\n        this.parent.on(_base_constant__WEBPACK_IMPORTED_MODULE_3__.click, this.clickHandler, this);\n        this.resizeEndFn = function () {\n            _this.updateAutoFillPosition();\n            _this.drawBorders();\n        };\n        this.resizeEndFn.bind(this);\n        this.parent.addEventListener(_base_constant__WEBPACK_IMPORTED_MODULE_3__.resizeStop, this.resizeEndFn);\n    };\n    // eslint-disable-next-line camelcase\n    Selection.prototype.removeEventListener_checkbox = function () {\n        this.parent.off(_base_constant__WEBPACK_IMPORTED_MODULE_3__.dataReady, this.dataReady);\n        this.parent.removeEventListener(_base_constant__WEBPACK_IMPORTED_MODULE_3__.dataBound, this.onDataBoundFunction);\n        this.parent.removeEventListener(_base_constant__WEBPACK_IMPORTED_MODULE_3__.actionComplete, this.actionCompleteFunc);\n        this.parent.off(_base_constant__WEBPACK_IMPORTED_MODULE_3__.refreshInfinitePersistSelection, this.onDataBoundFunction);\n        this.parent.off(_base_constant__WEBPACK_IMPORTED_MODULE_3__.onEmpty, this.setCheckAllForEmptyGrid);\n        this.parent.off(_base_constant__WEBPACK_IMPORTED_MODULE_3__.click, this.clickHandler);\n        this.parent.removeEventListener(_base_constant__WEBPACK_IMPORTED_MODULE_3__.resizeStop, this.resizeEndFn);\n        this.parent.off(_base_constant__WEBPACK_IMPORTED_MODULE_3__.beforeRefreshOnDataChange, this.initPerisistSelection);\n    };\n    Selection.prototype.setCheckAllForEmptyGrid = function () {\n        var checkAllBox = this.getCheckAllBox();\n        if (checkAllBox) {\n            this.parent.isCheckBoxSelection = true;\n            var spanEle = checkAllBox.nextElementSibling;\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([spanEle], ['e-check', 'e-stop', 'e-uncheck']);\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([spanEle.parentElement], ['e-checkbox-disabled']);\n        }\n    };\n    Selection.prototype.dataReady = function (e) {\n        this.isHeaderCheckboxClicked = false;\n        var isInfinitecroll = this.parent.enableInfiniteScrolling && e.requestType === 'infiniteScroll';\n        if (e.requestType !== 'virtualscroll' && !this.parent.isPersistSelection && !isInfinitecroll) {\n            this.disableUI = !this.parent.enableImmutableMode && !(e.requestType === 'save' && e['action'] === 'add');\n            this.clearSelection();\n            this.setCheckAllState();\n            this.disableUI = false;\n        }\n    };\n    Selection.prototype.actionCompleteHandler = function (e) {\n        if (e.requestType === 'save' && this.parent.isPersistSelection) {\n            this.refreshPersistSelection();\n        }\n    };\n    Selection.prototype.selectRowIndex = function (index) {\n        this.parent.isSelectedRowIndexUpdating = true;\n        if (((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.parent.selectedRowIndex) || this.parent.selectedRowIndex === -1) || !this.parent.enablePersistence) {\n            this.parent.selectedRowIndex = index;\n        }\n        else {\n            this.parent.selectedRowIndex = -1;\n        }\n    };\n    Selection.prototype.disableInteracted = function () {\n        this.isInteracted = false;\n    };\n    Selection.prototype.activeTarget = function () {\n        this.actualTarget = this.isInteracted ? this.actualTarget : null;\n    };\n    return Selection;\n}());\n\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-grids/src/grid/actions/selection.js?");

/***/ })

}]);