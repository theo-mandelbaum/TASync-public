"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkej2_vue_samples"] = self["webpackChunkej2_vue_samples"] || []).push([["chunk-vendors-node_modules_syncfusion_ej2-circulargauge_src_circular-gauge_circular-gauge_js-a718ae6-2073e88a"],{

/***/ "./node_modules/@syncfusion/ej2-circulargauge/src/circular-gauge/circular-gauge.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-circulargauge/src/circular-gauge/circular-gauge.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CircularGauge: () => (/* binding */ CircularGauge)\n/* harmony export */ });\n/* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @syncfusion/ej2-base */ \"./node_modules/@syncfusion/ej2-base/index.js\");\n/* harmony import */ var _syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @syncfusion/ej2-svg-base */ \"./node_modules/@syncfusion/ej2-svg-base/index.js\");\n/* harmony import */ var _utils_helper_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils/helper-common */ \"./node_modules/@syncfusion/ej2-circulargauge/src/circular-gauge/utils/helper-common.js\");\n/* harmony import */ var _utils_helper_circular_gauge__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils/helper-circular-gauge */ \"./node_modules/@syncfusion/ej2-circulargauge/src/circular-gauge/utils/helper-circular-gauge.js\");\n/* harmony import */ var _model_base__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./model/base */ \"./node_modules/@syncfusion/ej2-circulargauge/src/circular-gauge/model/base.js\");\n/* harmony import */ var _axes_axis__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./axes/axis */ \"./node_modules/@syncfusion/ej2-circulargauge/src/circular-gauge/axes/axis.js\");\n/* harmony import */ var _annotations_annotations__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./annotations/annotations */ \"./node_modules/@syncfusion/ej2-circulargauge/src/circular-gauge/annotations/annotations.js\");\n/* harmony import */ var _user_interaction_tooltip__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./user-interaction/tooltip */ \"./node_modules/@syncfusion/ej2-circulargauge/src/circular-gauge/user-interaction/tooltip.js\");\n/* harmony import */ var _model_constants__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./model/constants */ \"./node_modules/@syncfusion/ej2-circulargauge/src/circular-gauge/model/constants.js\");\n/* harmony import */ var _axes_axis_panel__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./axes/axis-panel */ \"./node_modules/@syncfusion/ej2-circulargauge/src/circular-gauge/axes/axis-panel.js\");\n/* harmony import */ var _model_theme__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./model/theme */ \"./node_modules/@syncfusion/ej2-circulargauge/src/circular-gauge/model/theme.js\");\n/* harmony import */ var _utils_helper_legend__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./utils/helper-legend */ \"./node_modules/@syncfusion/ej2-circulargauge/src/circular-gauge/utils/helper-legend.js\");\n/* harmony import */ var _legend_legend__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./legend/legend */ \"./node_modules/@syncfusion/ej2-circulargauge/src/circular-gauge/legend/legend.js\");\n/* harmony import */ var _model_pdf_export__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./model/pdf-export */ \"./node_modules/@syncfusion/ej2-circulargauge/src/circular-gauge/model/pdf-export.js\");\n/* harmony import */ var _model_image_export__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./model/image-export */ \"./node_modules/@syncfusion/ej2-circulargauge/src/circular-gauge/model/image-export.js\");\n/* harmony import */ var _model_print__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./model/print */ \"./node_modules/@syncfusion/ej2-circulargauge/src/circular-gauge/model/print.js\");\n/* harmony import */ var _axes_gradient__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./axes/gradient */ \"./node_modules/@syncfusion/ej2-circulargauge/src/circular-gauge/axes/gradient.js\");\nvar __extends = (undefined && undefined.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable max-len */\n/**\n * Circular Gauge\n */\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * Represents the circular gauge control. This is used to customize the properties of the circular gauge to visualize the data in circular scale.\n * ```html\n * <div id=\"gauge\"/>\n * <script>\n *   var gaugeObj = new CircularGauge();\n *   gaugeObj.appendTo(\"#gauge\");\n * </script>\n * ```\n */\nvar CircularGauge = /** @class */ (function (_super) {\n    __extends(CircularGauge, _super);\n    /**\n     * Constructor for creating the widget\n     *\n     * @param {CircularGaugeModel} options - Specifies the options\n     * @param {string} element - Specifies the element\n     * @hidden\n     */\n    function CircularGauge(options, element) {\n        var _this = _super.call(this, options, element) || this;\n        /** @private */\n        _this.allowLoadingAnimation = false;\n        /** @private */\n        _this.isRangeUpdate = false;\n        /** @private */\n        _this.isAnimationProgress = true;\n        /** @private */\n        _this.isResize = false;\n        /** @private */\n        _this.isOverAllAnimationComplete = false;\n        /** @private */\n        _this.isDrag = false;\n        /**\n         * @private\n         */\n        _this.gradientCount = 0;\n        CircularGauge_1.Inject(_axes_gradient__WEBPACK_IMPORTED_MODULE_16__.Gradient);\n        if (element) {\n            _this.appendTo(element);\n        }\n        return _this;\n    }\n    CircularGauge_1 = CircularGauge;\n    /**\n     * To create svg object, renderer and binding events for the container.\n     *\n     * @returns {void}\n     */\n    CircularGauge.prototype.preRender = function () {\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.element)) {\n            this.unWireEvents();\n            this.trigger(_model_constants__WEBPACK_IMPORTED_MODULE_8__.load, { gauge: this });\n            this.initPrivateVariable();\n            this.setCulture();\n            this.createSvg();\n            this.wireEvents();\n        }\n    };\n    /**\n     * To render the circular gauge elements\n     *\n     * @returns {void}\n     */\n    CircularGauge.prototype.render = function () {\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.element)) {\n            this.setTheme();\n            this.calculateBounds();\n            this.isPropertyChange = false;\n            this.allowLoadingAnimation = ((this.animationDuration === 0 && _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.animationMode === 'Enable') || this.animationDuration > 0)\n                && !this.isOverAllAnimationComplete;\n            this.renderElements(true);\n            this.renderAnimation();\n            this.renderComplete();\n        }\n    };\n    CircularGauge.prototype.setTheme = function () {\n        this.themeStyle = (0,_model_theme__WEBPACK_IMPORTED_MODULE_10__.getThemeStyle)(this.theme);\n    };\n    /**\n     * Method to unbind events for circular gauge\n     *\n     * @returns {void}\n     */\n    CircularGauge.prototype.unWireEvents = function () {\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(this.element, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.touchStartEvent, this.gaugeOnMouseDown);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(this.element, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.touchMoveEvent, this.mouseMove);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(this.element, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.touchEndEvent, this.mouseEnd);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(this.element, 'click', this.gaugeOnMouseClick);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(this.element, 'contextmenu', this.gaugeRightClick);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(this.element, (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isPointer ? 'pointerleave' : 'mouseleave'), this.mouseLeave);\n        window.removeEventListener((_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isTouch && ('orientation' in window && 'onorientationchange' in window)) ? 'orientationchange' : 'resize', this.resizeEvent);\n    };\n    /**\n     * Method to bind events for circular gauge\n     *\n     * @returns {void}\n     */\n    CircularGauge.prototype.wireEvents = function () {\n        /*! Bind the Event handler */\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(this.element, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.touchStartEvent, this.gaugeOnMouseDown, this);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(this.element, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.touchMoveEvent, this.mouseMove, this);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(this.element, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.touchEndEvent, this.mouseEnd, this);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(this.element, 'click', this.gaugeOnMouseClick, this);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(this.element, 'contextmenu', this.gaugeRightClick, this);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(this.element, (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isPointer ? 'pointerleave' : 'mouseleave'), this.mouseLeave, this);\n        this.resizeEvent = this.gaugeResize.bind(this);\n        window.addEventListener((_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isTouch && ('orientation' in window && 'onorientationchange' in window)) ? 'orientationchange' : 'resize', this.resizeEvent);\n        /*! Apply the style for circular gauge */\n        this.setGaugeStyle(this.element);\n    };\n    /**\n     * Handles the mouse click on accumulation chart.\n     *\n     * @param {PointerEvent} e - Specifies the pointer event\n     * @returns {boolean} - Returns the boolean value\n     * @private\n     */\n    CircularGauge.prototype.gaugeOnMouseClick = function (e) {\n        this.setMouseXY(e);\n        if (this.legendModule && this.legendSettings.visible) {\n            this.legendModule.click(e);\n        }\n        return false;\n    };\n    /**\n     * Handles the mouse move.\n     *\n     * @param {PointerEvent} e - Specifies the pointer event\n     * @returns {boolean} - Returns the boolean value\n     * @private\n     */\n    CircularGauge.prototype.mouseMove = function (e) {\n        var _this = this;\n        this.setMouseXY(e);\n        var args = this.getMouseArgs(e, 'touchmove', _model_constants__WEBPACK_IMPORTED_MODULE_8__.gaugeMouseMove);\n        this.trigger('gaugeMouseMove', args, function (observedArgs) {\n            var dragArgs;\n            var pointerDrag = false;\n            if ((!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(_this.activePointer) ? _this.activePointer.pathElement[0].id === args.target.id : true)) {\n                var pointerIndex = args.target.id.indexOf('_Pointer_') > -1 ? parseInt(args.target.id.slice(-1), 10) : null;\n                var axisIndex = args.target.id.indexOf('_Axis_') > -1 ? parseInt(args.target.id.split('_Axis_')[1], 10) : null;\n                pointerDrag = (_this.allowPointerDrag && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(axisIndex) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(pointerIndex))\n                    ? _this.axes[axisIndex].pointers[pointerIndex].enableDrag\n                    : _this.enablePointerDrag;\n                _this.isPointerDragged = pointerDrag;\n            }\n            if (!args.cancel) {\n                if ((_this.isPointerDragged || _this.enableRangeDrag) && _this.svgObject.getAttribute('cursor') !== 'grabbing') {\n                    if ((args.target.id.indexOf('_Pointer_') !== -1 && _this.isPointerDragged) || (_this.enableRangeDrag && args.target.id.indexOf('_Range_') !== -1)) {\n                        _this.svgObject.setAttribute('cursor', 'pointer');\n                    }\n                    else {\n                        _this.svgObject.setAttribute('cursor', 'auto');\n                    }\n                }\n                else if (_this.svgObject.getAttribute('cursor') !== 'grabbing') {\n                    _this.svgObject.setAttribute('cursor', 'auto');\n                }\n                var svgElement = (0,_utils_helper_common__WEBPACK_IMPORTED_MODULE_2__.getElement)(_this.element.id + '_svg');\n                var extraWidth = _this.element.getBoundingClientRect().left - svgElement.getBoundingClientRect().left;\n                if (_this.isPointerDragged && _this.activePointer) {\n                    _this.isDrag = true;\n                    e.preventDefault();\n                    var dragPointInd = parseInt(_this.activePointer.pathElement[0].id.slice(-1), 10);\n                    var dragAxisInd = parseInt(_this.activePointer.pathElement[0].id.split('_Axis_')[1], 10);\n                    dragArgs = {\n                        axis: _this.activeAxis,\n                        pointer: _this.activePointer,\n                        previousValue: _this.activePointer.currentValue,\n                        name: _model_constants__WEBPACK_IMPORTED_MODULE_8__.dragMove,\n                        type: _model_constants__WEBPACK_IMPORTED_MODULE_8__.pointerMove,\n                        currentValue: null,\n                        axisIndex: dragAxisInd,\n                        pointerIndex: dragPointInd\n                    };\n                    _this.pointerDrag(new _utils_helper_common__WEBPACK_IMPORTED_MODULE_2__.GaugeLocation(args.x + extraWidth, args.y), dragAxisInd, dragPointInd);\n                    dragArgs.currentValue = _this.activePointer.currentValue;\n                    _this.trigger(_model_constants__WEBPACK_IMPORTED_MODULE_8__.dragMove, dragArgs);\n                    _this.activeRange = null;\n                }\n                else if (_this.enableRangeDrag && _this.activeRange) {\n                    _this.isDrag = true;\n                    e.preventDefault();\n                    var dragAxisInd = parseInt(_this.activeRange.pathElement[0].id.split('_Axis_')[1], 10);\n                    var dragRangeInd = parseInt(_this.activeRange.pathElement[0].id.split('Range_')[1], 10);\n                    dragArgs = {\n                        axis: _this.activeAxis,\n                        name: _model_constants__WEBPACK_IMPORTED_MODULE_8__.dragMove,\n                        type: _model_constants__WEBPACK_IMPORTED_MODULE_8__.rangeMove,\n                        range: _this.activeRange,\n                        axisIndex: dragAxisInd,\n                        rangeIndex: dragRangeInd\n                    };\n                    _this.rangeDrag(new _utils_helper_common__WEBPACK_IMPORTED_MODULE_2__.GaugeLocation(args.x + extraWidth, args.y), dragAxisInd, dragRangeInd);\n                    _this.trigger(_model_constants__WEBPACK_IMPORTED_MODULE_8__.dragMove, dragArgs);\n                }\n            }\n        });\n        this.notify(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.touchMoveEvent, e);\n        (0,_utils_helper_legend__WEBPACK_IMPORTED_MODULE_11__.titleTooltip)(e, e.clientX, e.clientY, this, false);\n        return false;\n    };\n    /**\n     * Handles the mouse leave.\n     *\n     * @param {PointerEvent} e - Specifies the pointer event\n     * @returns {boolean} - Returns the boolean value\n     * @private\n     */\n    CircularGauge.prototype.mouseLeave = function (e) {\n        this.setMouseXY(e);\n        this.activeAxis = null;\n        this.activePointer = null;\n        this.activeRange = null;\n        this.svgObject.setAttribute('cursor', 'auto');\n        var args = this.getMouseArgs(e, 'touchmove', _model_constants__WEBPACK_IMPORTED_MODULE_8__.gaugeMouseLeave);\n        this.trigger(_model_constants__WEBPACK_IMPORTED_MODULE_8__.gaugeMouseLeave, args);\n        return false;\n    };\n    /**\n     * Handles the mouse right click.\n     *\n     * @param {MouseEvent | PointerEvent} event - Specifies the pointer or mouse event.\n     * @returns {boolean} - Returns the boolean value.\n     * @private\n     */\n    CircularGauge.prototype.gaugeRightClick = function (event) {\n        if (event.buttons === 2 || event.pointerType === 'touch') {\n            event.preventDefault();\n            event.stopPropagation();\n            return false;\n        }\n        return true;\n    };\n    /**\n     * Handles the pointer draf while mouse move on gauge.\n     *\n     * @param {GaugeLocation} location - Specifies the location of the gauge\n     * @param {number} axisIndex - Specifies the axis index\n     * @param {number} pointerIndex - Specifies the pointer index\n     * @returns {void}\n     * @private\n     */\n    CircularGauge.prototype.pointerDrag = function (location, axisIndex, pointerIndex) {\n        var axis = this.activeAxis;\n        var range = axis.visibleRange;\n        var value = (0,_utils_helper_circular_gauge__WEBPACK_IMPORTED_MODULE_3__.getValueFromAngle)((0,_utils_helper_common__WEBPACK_IMPORTED_MODULE_2__.getAngleFromLocation)(this.midPoint, location), range.max, range.min, axis.startAngle, axis.endAngle, axis.direction === 'ClockWise');\n        if (value >= range.min && value <= range.max) {\n            this.axes[axisIndex].pointers[pointerIndex].value = value;\n            this.activePointer.currentValue = value;\n            this.gaugeAxisLayoutPanel.pointerRenderer.setPointerValue(axis, this.activePointer, value);\n        }\n    };\n    /**\n     * Handles the range draf while mouse move on gauge.\n     *\n     * @param {GaugeLocation} location - Specifies the gauge location\n     * @param {number} axisIndex - Specifies the axis index\n     * @param {number} rangeIndex - Specifies the range index\n     * @returns {void}\n     * @private\n     */\n    CircularGauge.prototype.rangeDrag = function (location, axisIndex, rangeIndex) {\n        if (this.activeAxis) {\n            var axis = this.activeAxis;\n            var range = axis.visibleRange;\n            var value = (0,_utils_helper_circular_gauge__WEBPACK_IMPORTED_MODULE_3__.getValueFromAngle)((0,_utils_helper_common__WEBPACK_IMPORTED_MODULE_2__.getAngleFromLocation)(this.midPoint, location), range.max, range.min, axis.startAngle, axis.endAngle, axis.direction === 'ClockWise');\n            if (value >= range.min && value <= range.max) {\n                var previousValue1 = this.activeRange.currentValue;\n                this.activeRange.currentValue = value;\n                var add = (this.activeRange.end - this.activeRange.start);\n                var div = add / 2;\n                var avg = parseFloat(this.activeRange.start.toString()) + div;\n                var start = typeof this.activeRange.start === 'string' ? parseFloat(this.activeRange.start) : this.activeRange.start;\n                var end = typeof this.activeRange.end === 'string' ? parseFloat(this.activeRange.end) : this.activeRange.end;\n                this.startValue = (value < avg) ? value : ((previousValue1 < avg) ? previousValue1 : ((start < end) ? this.activeRange.start : this.activeRange.end));\n                this.endValue = (value < avg) ? ((previousValue1 > avg) ? previousValue1 : ((start < end) ? this.activeRange.end : this.activeRange.start)) : value;\n                this.axes[axisIndex].ranges[rangeIndex].start = this.startValue;\n                this.axes[axisIndex].ranges[rangeIndex].end = this.endValue;\n                if (this.isTouch) {\n                    this.setRangeValue(axisIndex, rangeIndex, this.startValue, this.endValue);\n                }\n            }\n        }\n    };\n    /**\n     * Handles the mouse down on gauge.\n     *\n     * @param {PointerEvent} e - Specifies the pointer event\n     * @returns {boolean} - Returns the boolean value\n     * @private\n     */\n    CircularGauge.prototype.gaugeOnMouseDown = function (e) {\n        var _this = this;\n        this.setMouseXY(e);\n        var currentPointer;\n        var currentRange;\n        var args = this.getMouseArgs(e, 'touchstart', _model_constants__WEBPACK_IMPORTED_MODULE_8__.gaugeMouseDown);\n        var pointerDrag = false;\n        var pointerIndex = args.target.id.indexOf('_Pointer_') > -1 ? parseInt(args.target.id.slice(-1), 10) : null;\n        var axisIndex = args.target.id.indexOf('_Axis_') > -1 ? parseInt(args.target.id.split('_Axis_')[1], 10) : null;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(axisIndex) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(pointerIndex)) {\n            pointerDrag = this.allowPointerDrag ? this.axes[axisIndex].pointers[pointerIndex].enableDrag\n                : this.enablePointerDrag;\n        }\n        this.trigger('gaugeMouseDown', args, function (observedArgs) {\n            if (!args.cancel &&\n                args.target.id.indexOf(_this.element.id + '_Axis_') >= 0 &&\n                args.target.id.indexOf('_Pointer_') >= 0) {\n                currentPointer = (0,_utils_helper_common__WEBPACK_IMPORTED_MODULE_2__.getPointer)(args.target.id, _this);\n                _this.activeAxis = _this.axes[currentPointer.axisIndex];\n                _this.activePointer = _this.activeAxis.pointers[currentPointer.pointerIndex];\n                if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(_this.activePointer.pathElement)) {\n                    _this.activePointer.pathElement = [e.target];\n                }\n                if (_this.activePointer.type === 'Marker' && _this.activePointer.markerShape === 'Text' && _this.activePointer.pathElement.length === 0) {\n                    _this.activePointer.pathElement = [e.target];\n                }\n                var pointInd = parseInt(_this.activePointer.pathElement[0].id.slice(-1), 10);\n                var axisInd = parseInt(_this.activePointer.pathElement[0].id.split('_Axis_')[1], 10);\n                _this.trigger(_model_constants__WEBPACK_IMPORTED_MODULE_8__.dragStart, {\n                    axis: _this.activeAxis,\n                    name: _model_constants__WEBPACK_IMPORTED_MODULE_8__.dragStart,\n                    type: _model_constants__WEBPACK_IMPORTED_MODULE_8__.pointerStart,\n                    pointer: _this.activePointer,\n                    currentValue: _this.activePointer.currentValue,\n                    pointerIndex: pointInd,\n                    axisIndex: axisInd\n                });\n                if (pointerDrag) {\n                    _this.svgObject.setAttribute('cursor', 'grabbing');\n                }\n            }\n            else if (!args.cancel &&\n                args.target.id.indexOf(_this.element.id + '_Axis_') >= 0 &&\n                args.target.id.indexOf('_Range_') >= 0) {\n                currentRange = (0,_utils_helper_circular_gauge__WEBPACK_IMPORTED_MODULE_3__.getRange)(args.target.id, _this);\n                _this.activeAxis = _this.axes[currentRange.axisIndex];\n                _this.activeRange = _this.activeAxis.ranges[currentRange.rangeIndex];\n                if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(_this.activeRange.pathElement)) {\n                    _this.activeRange.pathElement = [e.target];\n                }\n                var rangeInd = parseInt(_this.activeRange.pathElement[0].id.split('Range_')[1], 10);\n                var axisInd = parseInt(_this.activeRange.pathElement[0].id.split('_Axis_')[1], 10);\n                _this.trigger(_model_constants__WEBPACK_IMPORTED_MODULE_8__.dragStart, {\n                    axis: _this.activeAxis,\n                    name: _model_constants__WEBPACK_IMPORTED_MODULE_8__.dragStart,\n                    type: _model_constants__WEBPACK_IMPORTED_MODULE_8__.rangeStart,\n                    range: _this.activeRange,\n                    axisIndex: axisInd,\n                    rangeIndex: rangeInd\n                });\n                if (_this.enableRangeDrag) {\n                    _this.svgObject.setAttribute('cursor', 'grabbing');\n                }\n            }\n        });\n        return false;\n    };\n    /**\n     * Handles the mouse end.\n     *\n     * @param {PointerEvent} e - Specifies the pointer event\n     * @returns {boolean} - Returns the boolean value\n     * @private\n     */\n    CircularGauge.prototype.mouseEnd = function (e) {\n        this.setMouseXY(e);\n        var args = this.getMouseArgs(e, 'touchend', _model_constants__WEBPACK_IMPORTED_MODULE_8__.gaugeMouseUp);\n        this.isTouch = e.pointerType === 'touch' || e.pointerType === '2' || e.type === 'touchend';\n        this.trigger(_model_constants__WEBPACK_IMPORTED_MODULE_8__.gaugeMouseUp, args);\n        var pointerDrag = false;\n        if (this.activeAxis && this.activePointer) {\n            var pointerIndex = parseInt(this.activePointer.pathElement[0].id.slice(-1), 10);\n            var axisIndex = parseInt(this.activePointer.pathElement[0].id.split('_Axis_')[1], 10);\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(axisIndex) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(pointerIndex)) {\n                pointerDrag = this.allowPointerDrag ? this.axes[axisIndex].pointers[pointerIndex].enableDrag\n                    : this.enablePointerDrag;\n            }\n            if (pointerDrag) {\n                this.svgObject.setAttribute('cursor', 'auto');\n                this.trigger(_model_constants__WEBPACK_IMPORTED_MODULE_8__.dragEnd, {\n                    name: _model_constants__WEBPACK_IMPORTED_MODULE_8__.dragEnd,\n                    type: _model_constants__WEBPACK_IMPORTED_MODULE_8__.pointerEnd,\n                    axis: this.activeAxis,\n                    pointer: this.activePointer,\n                    currentValue: this.activePointer.currentValue,\n                    axisIndex: axisIndex,\n                    pointerIndex: pointerIndex\n                });\n                this.activeAxis = null;\n                this.activePointer = null;\n                this.isPointerDragged = false;\n            }\n        }\n        else if (this.activeAxis && this.activeRange && this.enableRangeDrag) {\n            this.svgObject.setAttribute('cursor', 'auto');\n            var rangeInd = parseInt(this.activeRange.pathElement[0].id.slice(-1), 10);\n            var axisInd = parseInt(this.activeRange.pathElement[0].id.split('_Axis_')[1], 10);\n            this.trigger(_model_constants__WEBPACK_IMPORTED_MODULE_8__.dragEnd, {\n                name: _model_constants__WEBPACK_IMPORTED_MODULE_8__.dragEnd,\n                type: _model_constants__WEBPACK_IMPORTED_MODULE_8__.rangeEnd,\n                axis: this.activeAxis,\n                range: this.activeRange,\n                axisIndex: axisInd,\n                rangeIndex: rangeInd\n            });\n            this.activeAxis = null;\n            this.activeRange = null;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.activePointer)) {\n            this.activePointer = null;\n        }\n        this.isDrag = false;\n        this.svgObject.setAttribute('cursor', 'auto');\n        this.notify(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.touchEndEvent, e);\n        if (e.type.indexOf('touch') > -1 && (args.target.id === (this.element.id + '_CircularGaugeTitle') || args.target.id.indexOf('_gauge_legend_') > -1)) {\n            var touchArg = e;\n            (0,_utils_helper_legend__WEBPACK_IMPORTED_MODULE_11__.titleTooltip)(e, touchArg.changedTouches[0].pageX, touchArg.changedTouches[0].pageY, this, true);\n        }\n        return false;\n    };\n    /**\n     * Handles the mouse event arguments.\n     *\n     * @param {PointerEvent} e - Specifies the pointer event\n     * @param {string} type - Specifies the type\n     * @param {string} name - Specifies the name\n     * @returns {IMouseEventArgs} - Returns the mouse event args\n     * @private\n     */\n    CircularGauge.prototype.getMouseArgs = function (e, type, name) {\n        var rect = this.element.getBoundingClientRect();\n        var location = new _utils_helper_common__WEBPACK_IMPORTED_MODULE_2__.GaugeLocation(-rect.left, -rect.top);\n        var isTouch = (e.type === type);\n        location.x += isTouch ? e.changedTouches[0].clientX : e.clientX;\n        location.y += isTouch ? e.changedTouches[0].clientY : e.clientY;\n        return {\n            cancel: false, name: name,\n            x: location.x, y: location.y,\n            target: isTouch ? e.target : e.target\n        };\n    };\n    /**\n     * Handles the gauge resize.\n     *\n     * @param {Event} e - Specifies the event\n     * @returns {boolean} - Returns the boolean value\n     * @private\n     */\n    CircularGauge.prototype.gaugeResize = function (e) {\n        var _this = this;\n        if (!this.isDestroyed) {\n            // eslint-disable-next-line prefer-const\n            var args = {\n                gauge: this,\n                previousSize: this.availableSize,\n                name: _model_constants__WEBPACK_IMPORTED_MODULE_8__.resized,\n                cancel: false,\n                currentSize: this.calculateSvgSize()\n            };\n            this.trigger(_model_constants__WEBPACK_IMPORTED_MODULE_8__.resized, args);\n            if (!args.cancel) {\n                if (this.resizeTo) {\n                    clearTimeout(this.resizeTo);\n                }\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.element) && this.element.classList.contains('e-circulargauge')) {\n                    this.animatePointer = false;\n                    this.resizeTo = window.setTimeout(function () {\n                        _this.isResize = true;\n                        _this.isPropertyChange = true;\n                        _this.createSvg();\n                        _this.calculateBounds();\n                        _this.allowLoadingAnimation = false;\n                        if (_this.isOverAllAnimationComplete) {\n                            _this.loadingAnimationDuration = [];\n                        }\n                        _this.renderElements();\n                        _this.isResize = false;\n                    }, 500);\n                }\n            }\n        }\n        return false;\n    };\n    /**\n     * Applying styles for circular gauge elements\n     *\n     * @param {HTMLElement} element - Specifies the html element\n     * @returns {void}\n     */\n    CircularGauge.prototype.setGaugeStyle = function (element) {\n        element.style.touchAction = 'element';\n        element.style.msTouchAction = 'element';\n        element.style.msContentZooming = 'none';\n        element.style.msUserSelect = 'none';\n        element.style.webkitUserSelect = 'none';\n        element.style.position = 'relative';\n    };\n    /**\n     * Method to set culture for gauge\n     *\n     * @returns {void}\n     */\n    CircularGauge.prototype.setCulture = function () {\n        this.intl = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Internationalization();\n    };\n    /**\n     * Methods to create svg element for circular gauge.\n     *\n     * @returns {void}\n     */\n    CircularGauge.prototype.createSvg = function () {\n        this.removeSvg();\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.renderer)) {\n            this.renderer = new _syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_1__.SvgRenderer(this.element.id);\n        }\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.gaugeAxisLayoutPanel)) {\n            this.gaugeAxisLayoutPanel = new _axes_axis_panel__WEBPACK_IMPORTED_MODULE_9__.AxisLayoutPanel(this);\n        }\n        this.availableSize = this.calculateSvgSize();\n        this.svgObject = this.renderer.createSvg({\n            id: this.element.id + '_svg',\n            width: this.availableSize.width,\n            height: this.availableSize.height\n        });\n    };\n    /**\n     * To Remove the SVG from circular gauge.\n     *\n     * @returns {void}\n     * @private\n     */\n    CircularGauge.prototype.removeSvg = function () {\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.element)) {\n            (0,_utils_helper_common__WEBPACK_IMPORTED_MODULE_2__.removeElement)(this.element.id + '_Secondary_Element');\n            if (this.svgObject) {\n                while (this.svgObject.childNodes.length > 0) {\n                    while (this.svgObject.childNodes.length > 0) {\n                        this.svgObject.removeChild(this.svgObject.firstChild);\n                    }\n                    if (!this.svgObject.hasChildNodes() && this.svgObject.parentNode) {\n                        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.remove)(this.svgObject);\n                    }\n                }\n                if (!this.svgObject.hasChildNodes() && this.svgObject.parentNode) {\n                    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.remove)(this.svgObject);\n                }\n            }\n            (0,_utils_helper_common__WEBPACK_IMPORTED_MODULE_2__.removeElement)(this.element.id + '_svg');\n            this.clearTemplate();\n        }\n    };\n    /**\n     * To initialize the circular gauge private variable.\n     *\n     * @returns {void}\n     * @private\n     */\n    CircularGauge.prototype.initPrivateVariable = function () {\n        if (this.element.id === '') {\n            var collection = document.getElementsByClassName('e-circulargauge').length;\n            this.element.id = 'circulargauge_control_' + collection;\n        }\n        this.renderer = new _syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_1__.SvgRenderer(this.element.id);\n        this.gaugeAxisLayoutPanel = new _axes_axis_panel__WEBPACK_IMPORTED_MODULE_9__.AxisLayoutPanel(this);\n        this.animatePointer = true;\n    };\n    /**\n     * To calculate the size of the circular gauge element.\n     *\n     * @returns {void}\n     */\n    CircularGauge.prototype.calculateSvgSize = function () {\n        var containerWidth = this.element.offsetWidth;\n        var containerHeight = this.element.offsetHeight;\n        var borderWidth = parseInt(this.element.style.borderWidth.split('px').join(''), 10) * 2;\n        var width = (0,_utils_helper_common__WEBPACK_IMPORTED_MODULE_2__.stringToNumber)(this.width, containerWidth) || containerWidth || 600;\n        var height = (0,_utils_helper_common__WEBPACK_IMPORTED_MODULE_2__.stringToNumber)(this.height, containerHeight) || containerHeight || 450;\n        width = !isNaN(borderWidth) ? (width - borderWidth) : width;\n        height = !isNaN(borderWidth) ? (height - borderWidth) : height;\n        return new _utils_helper_common__WEBPACK_IMPORTED_MODULE_2__.Size(width, height);\n    };\n    /**\n     * To calculate the spacing of the circular gauge element.\n     *\n     * @param {number} top - Specifies the top value\n     * @param {number} left - Specifies the left value\n     * @param {number} width - Specifies the width\n     * @param {number} height - Specifies the height\n     * @param {number} radius - Specifies the radius\n     * @param {number} titleHeight - Specifies the titleHeight\n     * @param {number} isUpperAngle - Specifies the isUpperAngle\n     * @param {number} isLowerAngle - Specifies the isLowerAngle\n     * @param {number} isFullPercent - Specifies the boolean value\n     * @param {number} isUpper - Specifies the boolean value\n     * @param {number} isLower - Specifies the boolean value\n     * @returns {void}\n     */\n    /* eslint-disable max-len */\n    CircularGauge.prototype.radiusAndCenterCalculation = function (top, left, width, height, radius, titleHeight, isUpperAngle, isLowerAngle, isFullPercent, radiusPercent, isUpper, isLower) {\n        var rect;\n        var bottom = this.margin.bottom + this.border.width;\n        var minRadius;\n        var widthRadius;\n        var centerX;\n        var centerY;\n        if (this.moveToCenter && this.axes.length === 1 &&\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.centerXpoint) && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.centerYpoint)) {\n            rect = new _utils_helper_common__WEBPACK_IMPORTED_MODULE_2__.Rect(left, top, width, height);\n        }\n        else {\n            if (!this.allowMargin) {\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.legendModule) && (width > height) && (this.legendSettings.position === 'Top' || this.legendSettings.position === 'Bottom')) {\n                    minRadius = Math.min(width, height) / 2;\n                    rect = new _utils_helper_common__WEBPACK_IMPORTED_MODULE_2__.Rect((left + (width / 2) - minRadius), (top + (height / 2) - minRadius), minRadius * 2, minRadius * 2);\n                }\n                else {\n                    if (width > height && (isLowerAngle && isLower || isUpperAngle && isUpper)) {\n                        widthRadius = ((width) / 2);\n                        var heightValue = isUpper && isLower ? (height / 2) : (height * (3 / 4));\n                        if (widthRadius > heightValue) {\n                            widthRadius = heightValue;\n                        }\n                        rect = new _utils_helper_common__WEBPACK_IMPORTED_MODULE_2__.Rect((left + (width / 2) - widthRadius), (top + (height / 2) - widthRadius), widthRadius * 2, widthRadius * 2);\n                    }\n                    else {\n                        if (height > width) {\n                            var heightRadius = height / 2;\n                            rect = new _utils_helper_common__WEBPACK_IMPORTED_MODULE_2__.Rect((left + (width / 2) - radius), (top + (height / 2) - heightRadius), radius * 2, heightRadius * 2);\n                        }\n                        else {\n                            rect = new _utils_helper_common__WEBPACK_IMPORTED_MODULE_2__.Rect((left + (width / 2) - radius), (top + (height / 2) - radius), radius * 2, radius * 2);\n                        }\n                    }\n                }\n            }\n            else {\n                rect = new _utils_helper_common__WEBPACK_IMPORTED_MODULE_2__.Rect((left + (width / 2) - radius), (top + (height / 2) - radius), radius * 2, radius * 2);\n            }\n        }\n        this.gaugeRect = rect;\n        if (this.legendModule && this.legendSettings.visible) {\n            this.legendModule.getLegendOptions(this.axes);\n            this.legendModule.calculateLegendBounds(this.gaugeRect, this.availableSize);\n        }\n        if (!this.allowMargin) {\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.legendModule) && (isUpperAngle || isLowerAngle) && (width > height) && (this.legendSettings.position === 'Top' || this.legendSettings.position === 'Bottom')) {\n                var difference = height - this.gaugeRect.height;\n                this.gaugeRect.width = width - ((this.availableSize.width - this.gaugeRect.width) / 2);\n                this.gaugeRect.y = this.gaugeRect.y - difference;\n                this.gaugeRect.height = this.gaugeRect.height + difference + ((this.availableSize.height - this.gaugeRect.height) / 2);\n            }\n            else if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.legendModule) && (isUpperAngle || isLowerAngle) && (width > height) && (this.legendSettings.position === 'Left' || this.legendSettings.position === 'Right')) {\n                var difference = this.gaugeRect.height - this.gaugeRect.width;\n                this.gaugeRect.x = this.legendSettings.position === 'Right'\n                    ? this.gaugeRect.x + this.margin.right : this.gaugeRect.x;\n                this.gaugeRect.width = this.legendSettings.position === 'Left' ?\n                    Math.abs(width - ((this.availableSize.width - this.gaugeRect.width + difference) / 2))\n                    : Math.abs(width - ((this.availableSize.width - this.gaugeRect.width) / 2) - 10);\n            }\n            centerX = this.centerXpoint !== null ?\n                (0,_utils_helper_common__WEBPACK_IMPORTED_MODULE_2__.stringToNumber)(this.centerXpoint, this.availableSize.width) : this.gaugeRect.x + (this.gaugeRect.width / 2);\n            if ((isUpperAngle || isLowerAngle) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.legendModule)) {\n                centerX = (this.legendSettings.position === 'Top' || this.legendSettings.position === 'Bottom')\n                    ? this.availableSize.width / 2 : this.legendSettings.position === 'Right' ? (this.gaugeRect.width / 2) + this.margin.right :\n                    centerX;\n            }\n            centerY = ((isUpperAngle || isLowerAngle) ? (isUpperAngle ?\n                (((this.gaugeRect.height * (3 / 4) + this.gaugeRect.y) - bottom))\n                : (((this.gaugeRect.height * (1 / 4)) + (this.gaugeRect.y)))) : this.gaugeRect.y + (this.gaugeRect.height / 2));\n            centerY = !isFullPercent && (isUpperAngle || isLowerAngle) ? (this.gaugeRect.height / 2) + this.gaugeRect.y + (radiusPercent * (3 / 4) * (1 / 2)) : centerY;\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.axes) && this.axes.length > 1 && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.midPoint)) {\n                isUpper = isUpperAngle ? isUpperAngle : isUpper;\n                isLower = isLowerAngle ? isLowerAngle : isLower;\n                if (isUpper && isLower) {\n                    centerY = (this.availableSize.height / 2) - bottom;\n                }\n            }\n        }\n        else {\n            centerX = this.centerXpoint !== null ?\n                (0,_utils_helper_common__WEBPACK_IMPORTED_MODULE_2__.stringToNumber)(this.centerXpoint, this.availableSize.width) : this.gaugeRect.x + (this.gaugeRect.width / 2);\n            centerY = this.centerYpoint !== null ?\n                (0,_utils_helper_common__WEBPACK_IMPORTED_MODULE_2__.stringToNumber)(this.centerYpoint, this.availableSize.height) : this.gaugeRect.y + (this.gaugeRect.height / 2);\n        }\n        this.midPoint = new _utils_helper_common__WEBPACK_IMPORTED_MODULE_2__.GaugeLocation(centerX, centerY);\n    };\n    /**\n     * Method to calculate the availble size for circular gauge.\n     *\n     * @returns {void}\n     */\n    CircularGauge.prototype.calculateBounds = function () {\n        var padding = 5;\n        var rect;\n        var margin = this.margin;\n        var titleHeight = 0;\n        if (this.title) {\n            titleHeight = (0,_utils_helper_common__WEBPACK_IMPORTED_MODULE_2__.measureText)(this.title, this.titleStyle).height + padding;\n        }\n        var top = margin.top + titleHeight + this.border.width;\n        var left = margin.left + this.border.width;\n        var isUpper = false;\n        var isLower = false;\n        var width = this.availableSize.width - left - margin.right - this.border.width;\n        var height = this.availableSize.height - top - this.border.width - margin.bottom;\n        var radius = Math.min(width, height) / 2;\n        this.centerXpoint = (this.centerX === '') ? null : this.centerX;\n        this.centerYpoint = (this.centerY === '') ? null : this.centerY;\n        if (this.moveToCenter && this.axes.length === 1 &&\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.centerXpoint) && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.centerYpoint)) {\n            rect = new _utils_helper_common__WEBPACK_IMPORTED_MODULE_2__.Rect(left, top, width, height);\n        }\n        if (!this.allowMargin) {\n            for (var j = 0; j < this.axes.length; j++) {\n                var isUpperAngle = 270 <= this.axes[j].startAngle && this.axes[j].startAngle <= 360 &&\n                    0 <= this.axes[j].endAngle && this.axes[j].endAngle <= 90;\n                var isLowerAngle = 90 >= this.axes[j].startAngle && this.axes[j].startAngle <= 180 &&\n                    180 <= this.axes[j].endAngle && 270 <= this.axes[j].endAngle && 0 !== this.axes[j].startAngle &&\n                    360 !== this.axes[j].endAngle;\n                isUpper = isUpperAngle ? isUpperAngle : isUpper;\n                isLower = isLowerAngle ? isLowerAngle : isLower;\n                var isFullPercent = this.axes[j].radius !== null ? parseInt(this.axes[0].radius.split('%')[0], 10) >= 100 : true;\n                var radiusPercent = this.axes[j].radius !== null ? radius * (parseInt(this.axes[0].radius.split('%')[0], 10) / 100) : radius;\n                this.radiusAndCenterCalculation(top, left, width, height, radius, titleHeight, isUpperAngle, isLowerAngle, isFullPercent, radiusPercent, isUpper, isLower);\n            }\n        }\n        else {\n            rect = new _utils_helper_common__WEBPACK_IMPORTED_MODULE_2__.Rect((left + (width / 2) - radius), (top + (height / 2) - radius), radius * 2, radius * 2);\n            this.radiusAndCenterCalculation(top, left, width, height, radius, titleHeight, false, false, null, null, false, false);\n        }\n        this.gaugeAxisLayoutPanel.measureAxis(this.gaugeRect);\n    };\n    /**\n     * To render elements for circular gauge\n     *\n     * @param {boolean} animate - Specifies whether animation is true or false\n     * @returns {void}\n     */\n    CircularGauge.prototype.renderElements = function (animate) {\n        if (animate === void 0) { animate = true; }\n        this.renderBorder();\n        this.renderTitle();\n        this.gaugeAxisLayoutPanel.renderAxes(animate);\n        this.renderLegend();\n        this.element.appendChild(this.svgObject);\n        this.trigger(_model_constants__WEBPACK_IMPORTED_MODULE_8__.loaded, { gauge: this });\n        (0,_utils_helper_common__WEBPACK_IMPORTED_MODULE_2__.removeElement)('gauge-measuretext');\n    };\n    CircularGauge.prototype.renderAnimation = function () {\n        if (this.allowLoadingAnimation) {\n            for (var i = 0; i < this.axes.length; i++) {\n                this.gaugeAxisLayoutPanel.axisLineAnimation(i, this.loadingAnimationDuration[i], this);\n            }\n        }\n    };\n    /**\n     * Method to render legend for accumulation chart\n     *\n     * @returns {void}\n     */\n    CircularGauge.prototype.renderLegend = function () {\n        if (!this.legendModule || !this.legendSettings.visible) {\n            return null;\n        }\n        if (this.legendModule.legendCollection.length) {\n            this.legendModule.renderLegend(this.legendSettings, this.legendModule.legendBounds);\n        }\n    };\n    /**\n     * Method to render the title for circular gauge.\n     *\n     * @returns {void}\n     */\n    CircularGauge.prototype.renderTitle = function () {\n        if (this.title) {\n            // eslint-disable-next-line prefer-const\n            var style = {\n                color: this.titleStyle.color,\n                size: this.titleStyle.size || this.themeStyle.titleFontSize,\n                fontFamily: this.titleStyle.fontFamily || this.themeStyle.fontFamily,\n                fontStyle: this.titleStyle.fontStyle,\n                fontWeight: this.titleStyle.fontWeight || this.themeStyle.titleFontWeight,\n                opacity: this.titleStyle.opacity\n            };\n            var titleSize = style.size;\n            if (!isNaN(Number(titleSize))) {\n                style.size = titleSize + 'px';\n            }\n            var width = Math.abs((this.margin.left + this.margin.right) - this.availableSize.width);\n            var trimmedTitle = (0,_utils_helper_legend__WEBPACK_IMPORTED_MODULE_11__.textTrim)(width, this.title, style);\n            var size = (0,_utils_helper_common__WEBPACK_IMPORTED_MODULE_2__.measureText)(trimmedTitle, style);\n            var options = new _utils_helper_common__WEBPACK_IMPORTED_MODULE_2__.TextOption(this.element.id + '_CircularGaugeTitle', this.availableSize.width / 2, this.margin.top + 3 * (size.height / 4), 'middle', trimmedTitle);\n            var element = (0,_utils_helper_common__WEBPACK_IMPORTED_MODULE_2__.textElement)(options, style, style.color || this.themeStyle.titleFontColor, this.svgObject, '');\n            element.setAttribute('aria-label', this.description || this.title);\n            element.setAttribute('role', 'region');\n            element.setAttribute('tabindex', this.tabIndex.toString());\n        }\n    };\n    /**\n     * Method to render the border for circular gauge.\n     *\n     * @returns {void}\n     */\n    CircularGauge.prototype.renderBorder = function () {\n        var borderWidth = this.border.width;\n        if (borderWidth > 0 || (this.background || this.themeStyle.backgroundColor)) {\n            this.svgObject.appendChild(this.renderer.drawRectangle(new _utils_helper_common__WEBPACK_IMPORTED_MODULE_2__.RectOption(this.element.id + '_CircularGaugeBorder', this.background || this.themeStyle.backgroundColor, this.border, null, new _utils_helper_common__WEBPACK_IMPORTED_MODULE_2__.Rect(borderWidth / 2, borderWidth / 2, this.availableSize.width - borderWidth, this.availableSize.height - borderWidth))));\n        }\n    };\n    /* eslint-disable valid-jsdoc */\n    /**\n     * This method is used to set the pointer value dynamically for circular gauge.\n     *\n     * @param {number} axisIndex - Specifies the index value for the axis in circular gauge.\n     * @param {number} pointerIndex - Specifies the index value for the pointer in circular gauge.\n     * @param {number} value - Specifies the value for the pointer in circular gauge.\n     */\n    CircularGauge.prototype.setPointerValue = function (axisIndex, pointerIndex, value) {\n        var _this = this;\n        var axis = this.axes[axisIndex];\n        var pointer = axis.pointers[pointerIndex];\n        var pointerRadius = pointer.currentRadius;\n        this.allowLoadingAnimation = false;\n        if (!this.isDestroyed && pointer.currentValue !== value) {\n            var enableAnimation_1 = pointer.animation.enable || _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.animationMode === 'Enable';\n            value = value < axis.visibleRange.min ? axis.visibleRange.min : value;\n            value = value > axis.visibleRange.max ? axis.visibleRange.max : value;\n            pointer['isPointerAnimation'] = true;\n            document.getElementById(this.element.id + '_Axis_' + axisIndex + '_Pointer_' + pointerIndex).style.visibility = 'visible';\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(pointer.pathElement)) {\n                pointer.pathElement.map(function (element) {\n                    if (pointer.type === 'RangeBar') {\n                        (0,_utils_helper_circular_gauge__WEBPACK_IMPORTED_MODULE_3__.setStyles)(element, pointer.color, pointer.border);\n                        if (enableAnimation_1) {\n                            _this.gaugeAxisLayoutPanel.pointerRenderer.performRangeBarAnimation(element, pointer.currentValue, value, axis, pointer, axisIndex);\n                        }\n                        else {\n                            _this.isAnimationProgress = false;\n                            _this.gaugeAxisLayoutPanel.pointerRenderer.setPointerValue(axis, pointer, value);\n                        }\n                    }\n                    else {\n                        if (element.id.indexOf('_Pointer_NeedleCap_') >= 0) {\n                            (0,_utils_helper_circular_gauge__WEBPACK_IMPORTED_MODULE_3__.setStyles)(element, pointer.cap.color, pointer.cap.border);\n                        }\n                        else if (element.id.indexOf('_Pointer_NeedleTail_') >= 0) {\n                            (0,_utils_helper_circular_gauge__WEBPACK_IMPORTED_MODULE_3__.setStyles)(element, pointer.needleTail.color, pointer.needleTail.border);\n                        }\n                        else if (element.id.indexOf('_Pointer_NeedleRect_') >= 0) {\n                            (0,_utils_helper_circular_gauge__WEBPACK_IMPORTED_MODULE_3__.setStyles)(element, 'transparent', { color: 'transparent', width: 0 });\n                        }\n                        else if (pointer.type === 'Marker' && pointer.markerShape !== 'Text') {\n                            (0,_utils_helper_circular_gauge__WEBPACK_IMPORTED_MODULE_3__.setStyles)(element, pointer.color, pointer.border);\n                        }\n                        if (enableAnimation_1) {\n                            if (pointer.type === 'Marker' && pointer.markerShape === 'Text') {\n                                _this.gaugeAxisLayoutPanel.pointerRenderer.performTextAnimation(element, pointer.currentValue, value, axis, pointer, axisIndex);\n                            }\n                            else {\n                                _this.gaugeAxisLayoutPanel.pointerRenderer.performNeedleAnimation(element, pointer.currentValue, value, axis, pointer, axisIndex);\n                            }\n                        }\n                        else {\n                            _this.gaugeAxisLayoutPanel.pointerRenderer.setPointerValue(axis, pointer, value);\n                        }\n                    }\n                });\n            }\n            if (this.allowLoadingAnimation && !pointer.animation.enable) {\n                this.allowLoadingAnimation = false;\n                pointer.value = value;\n            }\n        }\n        this.isProtectedOnChange = true;\n        pointer.previousValue = pointer.currentValue;\n        pointer.currentValue = value;\n        pointer.value = value;\n        this.isProtectedOnChange = false;\n    };\n    /**\n     * This method is used to set the annotation content dynamically for circular gauge.\n     *\n     * @param {number} axisIndex - Specifies the index value for the axis in circular gauge.\n     * @param {number} annotationIndex - Specifies the index value for the annotation in circular gauge.\n     * @param {string | Function} content - Specifies the content for the annotation in circular gauge.\n     * @returns {void}\n     */\n    CircularGauge.prototype.setAnnotationValue = function (axisIndex, annotationIndex, content) {\n        if (!this.isDestroyed) {\n            this.allowLoadingAnimation = false;\n            var isElementExist = (0,_utils_helper_common__WEBPACK_IMPORTED_MODULE_2__.getElement)(this.element.id + '_Annotations_' + axisIndex) !== null;\n            var element = (0,_utils_helper_common__WEBPACK_IMPORTED_MODULE_2__.getElement)(this.element.id + '_Annotations_' + axisIndex) ||\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div', {\n                    id: this.element.id + '_Annotations_' + axisIndex, styles: this.animationDuration > 0 ? 'opacity: 0' : 'opacity: 1'\n                });\n            var annotation = this.axes[axisIndex].annotations[annotationIndex];\n            if (content !== null) {\n                (0,_utils_helper_common__WEBPACK_IMPORTED_MODULE_2__.removeElement)(this.element.id + '_Axis_' + axisIndex + '_Annotation_' + annotationIndex);\n                annotation.content = content;\n                this.annotationsModule.createTemplate(element, annotationIndex, axisIndex, this);\n                var secondaryElement = (0,_utils_helper_common__WEBPACK_IMPORTED_MODULE_2__.getElement)(this.element.id + '_Secondary_Element');\n                if (!isElementExist && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(secondaryElement)) {\n                    secondaryElement.appendChild(element);\n                }\n            }\n        }\n    };\n    /**\n     * This method is used to print the rendered circular gauge.\n     *\n     * @param {string[] | string | Element} id - Specifies the element to print the circular gauge.\n     */\n    CircularGauge.prototype.print = function (id) {\n        if (this.allowPrint && this.printModule) {\n            this.printModule.print(this, id);\n        }\n    };\n    /**\n     * This method is used to perform the export functionality for the circular gauge.\n     *\n     * @param {ExportType} type - Specifies the type of the export.\n     * @param {string} fileName - Specifies the file name for the exported file.\n     * @param {PdfPageOrientation}  orientation - Specifies the orientation for the exported PDF document.\n     * @param {boolean} allowDownload - Specifies whether to download as a file.\n     * @returns {Promise<string>} - Specifies the base64 string of the exported image which is returned when the allowDownload is set to false.\n     */\n    CircularGauge.prototype.export = function (type, fileName, orientation, allowDownload) {\n        var _this = this;\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(allowDownload)) {\n            allowDownload = true;\n        }\n        if (type === 'PDF' && this.allowPdfExport && this.pdfExportModule) {\n            // eslint-disable-next-line\n            return new Promise(function (resolve, reject) {\n                resolve(_this.pdfExportModule.export(_this, type, fileName, orientation, allowDownload));\n            });\n        }\n        else if (this.allowImageExport && (type !== 'PDF') && this.imageExportModule) {\n            // eslint-disable-next-line\n            return new Promise(function (resolve, reject) {\n                resolve(_this.imageExportModule.export(_this, type, fileName, allowDownload));\n            });\n        }\n        return null;\n    };\n    /**\n     * Method to set mouse x, y from events\n     *\n     * @param {PointerEvent} e - Specifies the pointer event\n     * @returns {void}\n     */\n    CircularGauge.prototype.setMouseXY = function (e) {\n        var pageX;\n        var pageY;\n        var svgRect = (0,_utils_helper_common__WEBPACK_IMPORTED_MODULE_2__.getElement)(this.element.id + '_svg').getBoundingClientRect();\n        var rect = this.element.getBoundingClientRect();\n        if (e.type.indexOf('touch') > -1) {\n            this.isTouch = true;\n            var touchArg = e;\n            pageY = touchArg.changedTouches[0].clientY;\n            pageX = touchArg.changedTouches[0].clientX;\n        }\n        else {\n            this.isTouch = e.pointerType === 'touch' || e.pointerType === '2';\n            pageX = e.clientX;\n            pageY = e.clientY;\n        }\n        this.mouseY = (pageY - rect.top) - Math.max(svgRect.top - rect.top, 0);\n        this.mouseX = (pageX - rect.left) - Math.max(svgRect.left - rect.left, 0);\n    };\n    /**\n     * This method is used to set the range values dynamically for circular gauge.\n     *\n     * @param {number} axisIndex - Specifies the index value for the axis in circular gauge.\n     * @param {number} rangeIndex - Specifies the index value for the range in circular gauge.\n     * @param {number} start - Specifies the start value for the current range in circular gauge.\n     * @param {number} end - Specifies the end value for the current range in circular gauge.\n     */\n    CircularGauge.prototype.setRangeValue = function (axisIndex, rangeIndex, start, end) {\n        this.allowLoadingAnimation = false;\n        var element = (0,_utils_helper_common__WEBPACK_IMPORTED_MODULE_2__.getElement)(this.element.id + '_Axis_' + axisIndex + '_Range_' + rangeIndex);\n        var axis = this.axes[axisIndex];\n        var range = axis.ranges[rangeIndex];\n        var axisRange = axis.visibleRange;\n        var isClockWise = axis.direction === 'ClockWise';\n        var startValue = Math.min(Math.max(start, axisRange.min), end);\n        var endValue = Math.min(Math.max(start, end), axisRange.max);\n        var oldRangeStart = range.start;\n        var oldRangeEnd = range.end;\n        range.start = start;\n        range.end = end;\n        if (range.start !== range.end && oldRangeStart === oldRangeEnd && this.legendModule && this.legendSettings.visible) {\n            this.legendModule.getLegendOptions(this.axes);\n            var height = this.legendModule.legendBounds.height + this.legendSettings.margin.top + this.legendSettings.margin.bottom + this.legendSettings.border.width;\n            var width = this.legendModule.legendBounds.width + this.legendSettings.margin.left + this.legendSettings.margin.right + this.legendSettings.border.width;\n            // eslint-disable-next-line prefer-const\n            var rect = this.gaugeRect;\n            var position = this.legendModule.position;\n            if (position === 'Bottom') {\n                rect.height = rect.height + height;\n            }\n            if (position === 'Top') {\n                rect.height = rect.height + height;\n                rect.y = rect.y - height;\n            }\n            if (position === 'Left') {\n                rect.width = rect.width + width;\n                rect.x = rect.x - width;\n            }\n            if (position === 'Right') {\n                rect.width = rect.width + width;\n            }\n            this.legendModule.calculateLegendBounds(rect, this.availableSize);\n            if (this.legendModule.legendCollection.length) {\n                this.legendModule.renderLegend(this.legendSettings, this.legendModule.legendBounds);\n            }\n        }\n        this.isRangeUpdate = true;\n        var startAngle = (0,_utils_helper_common__WEBPACK_IMPORTED_MODULE_2__.getAngleFromValue)(startValue, axisRange.max, axisRange.min, axis.startAngle, axis.endAngle, isClockWise);\n        var endAngle = (0,_utils_helper_common__WEBPACK_IMPORTED_MODULE_2__.getAngleFromValue)(endValue, axisRange.max, axisRange.min, axis.startAngle, axis.endAngle, isClockWise);\n        var startWidth;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(range.startWidth) && range.startWidth.length > 0) {\n            startWidth = (0,_utils_helper_common__WEBPACK_IMPORTED_MODULE_2__.toPixel)(range.startWidth, range.currentRadius);\n        }\n        else {\n            startWidth = range.startWidth;\n        }\n        var endWidth;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(range.endWidth) && range.endWidth.length > 0) {\n            endWidth = (0,_utils_helper_common__WEBPACK_IMPORTED_MODULE_2__.toPixel)(range.endWidth, range.currentRadius);\n        }\n        else {\n            endWidth = range.endWidth;\n        }\n        endAngle = isClockWise ? endAngle : [startAngle, startAngle = endAngle][0];\n        endWidth = isClockWise ? endWidth : [startWidth, startWidth = endWidth][0];\n        element.setAttribute('d', (0,_utils_helper_common__WEBPACK_IMPORTED_MODULE_2__.getPathArc)(this.midPoint, Math.round(startAngle), Math.round(endAngle), range.currentRadius, startWidth, endWidth, range, axis));\n        (0,_utils_helper_circular_gauge__WEBPACK_IMPORTED_MODULE_3__.setStyles)(element, (range.color ? range.color : range.rangeColor), {\n            color: (range.color ? range.color : range.rangeColor),\n            width: 0\n        });\n    };\n    /**\n     * This method destroys the circular gauge. This method removes the events associated with the circular gauge and disposes the objects created for rendering and updating the circular gauge.\n     *\n     * @method destroy\n     * @return {void}\n     * @member of Circular-Gauge\n     */\n    CircularGauge.prototype.destroy = function () {\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.element)) {\n            this.unWireEvents();\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.tooltipModule)) {\n            this.tooltipModule.removeEventListener();\n        }\n        _super.prototype.destroy.call(this);\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.gaugeAxisLayoutPanel)) {\n            this.gaugeAxisLayoutPanel.destroy();\n        }\n        this.availableSize = null;\n        this.midPoint = null;\n        this.activePointer = null;\n        this.activeAxis = null;\n        this.activeRange = null;\n        this.gaugeRect = null;\n        this.gaugeAxisLayoutPanel = null;\n        this.themeStyle = null;\n        this.loadingAnimationDuration = null;\n        this.intl = null;\n        this.removeSvg();\n        this.resizeEvent = null;\n        this.svgObject = null;\n        this.renderer = null;\n    };\n    /**\n     * To provide the array of modules needed for control rendering\n     *\n     * @returns {ModuleDeclaration[]} - Returns the modules\n     * @private\n     */\n    CircularGauge.prototype.requiredModules = function () {\n        var modules = [];\n        var annotationEnable = false;\n        var axes = this.axes;\n        axes.map(function (axis) {\n            axis.annotations.map(function (annotation) {\n                if (!annotationEnable) {\n                    annotationEnable = ((!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(annotation.content) && annotation.content.length !== 0) || typeof (annotation.content) === 'function');\n                }\n            });\n        });\n        if (annotationEnable) {\n            modules.push({\n                member: 'Annotations',\n                args: [this, _annotations_annotations__WEBPACK_IMPORTED_MODULE_6__.Annotations],\n                name: 'Annotations'\n            });\n        }\n        if (this.tooltip.enable) {\n            modules.push({\n                member: 'Tooltip',\n                args: [this, _user_interaction_tooltip__WEBPACK_IMPORTED_MODULE_7__.GaugeTooltip],\n                name: 'Tooltip'\n            });\n        }\n        if (this.allowPrint) {\n            modules.push({\n                member: 'Print',\n                args: [this, _model_print__WEBPACK_IMPORTED_MODULE_15__.Print],\n                name: 'Print'\n            });\n        }\n        if (this.allowImageExport) {\n            modules.push({\n                member: 'ImageExport',\n                args: [this, _model_image_export__WEBPACK_IMPORTED_MODULE_14__.ImageExport],\n                name: 'ImageExport'\n            });\n        }\n        if (this.allowPdfExport) {\n            modules.push({\n                member: 'PdfExport',\n                args: [this, _model_pdf_export__WEBPACK_IMPORTED_MODULE_13__.PdfExport],\n                name: 'PdfExport'\n            });\n        }\n        if (this.legendSettings.visible) {\n            modules.push({\n                member: 'Legend',\n                args: [this, _legend_legend__WEBPACK_IMPORTED_MODULE_12__.Legend],\n                name: 'Legend'\n            });\n        }\n        modules.push({\n            member: 'Gradient',\n            args: [this, _axes_gradient__WEBPACK_IMPORTED_MODULE_16__.Gradient],\n            name: 'Gradient'\n        });\n        return modules;\n    };\n    /**\n     * Get the properties to be maintained in the persisted state.\n     *\n     * @returns {string} - Returns the string\n     * @private\n     */\n    CircularGauge.prototype.getPersistData = function () {\n        return this.addOnPersist([]);\n    };\n    /**\n     * Called internally if any of the property value changed.\n     *\n     * @param {CircularGaugeModel} newProp - Specifies the new property\n     * @param {CircularGaugeModel} oldProp - Specifies the old property\n     * @returns {void}\n     * @private\n     */\n    CircularGauge.prototype.onPropertyChanged = function (newProp, oldProp) {\n        // property method calculated\n        if (!this.isDestroyed) {\n            this.isPropertyChange = true;\n            var renderer = false;\n            this.allowLoadingAnimation = this.animationDuration > 0 && !this.isOverAllAnimationComplete ? true : false;\n            var refreshBounds = false;\n            var refreshWithoutAnimation = false;\n            var isPointerValueSame = (Object.keys(newProp).length === 1 && newProp instanceof Object &&\n                !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.activePointer));\n            for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {\n                var prop = _a[_i];\n                switch (prop) {\n                    case 'height':\n                    case 'width':\n                    case 'centerX':\n                    case 'centerY':\n                    case 'margin':\n                        this.createSvg();\n                        refreshBounds = true;\n                        break;\n                    case 'animationDuration':\n                        this.allowLoadingAnimation = true;\n                        break;\n                    case 'title':\n                        refreshBounds = (newProp.title === '' || oldProp.title === '');\n                        renderer = !(newProp.title === '' || oldProp.title === '');\n                        break;\n                    case 'titleStyle':\n                        if (newProp.titleStyle && newProp.titleStyle.size) {\n                            refreshBounds = true;\n                        }\n                        else {\n                            renderer = true;\n                        }\n                        break;\n                    case 'border':\n                        renderer = true;\n                        break;\n                    case 'background':\n                        renderer = true;\n                        break;\n                    case 'legendSettings':\n                        refreshWithoutAnimation = true;\n                        break;\n                    case 'axes':\n                        // eslint-disable-next-line no-case-declarations\n                        var axesPropertyLength = this.axes.length;\n                        for (var x = 0; x < axesPropertyLength; x++) {\n                            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(newProp.axes[x])) {\n                                var collection = Object.keys(newProp.axes[x]);\n                                for (var _b = 0, collection_1 = collection; _b < collection_1.length; _b++) {\n                                    var collectionProp = collection_1[_b];\n                                    if (collectionProp === 'pointers') {\n                                        var pointerPropertyLength = Object.keys(newProp.axes[x].pointers).length;\n                                        for (var y = 0; y < pointerPropertyLength; y++) {\n                                            var index = parseInt(Object.keys(newProp.axes[x].pointers)[y], 10);\n                                            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(Object.keys(newProp.axes[x].pointers[index]))) {\n                                                this.allowLoadingAnimation = false;\n                                                this.loadingAnimationDuration = [];\n                                                this.isAnimationProgress = this.axes[x].pointers[index].animation.enable;\n                                                this.axes[x].pointers[index]['previousValue'] = this.axes[x].pointers[index]['currentValue'];\n                                                this.axes[x].pointers[index]['isPointerAnimation'] = Object.keys(newProp.axes[x].pointers[index]).indexOf('value') > -1;\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                        refreshWithoutAnimation = true;\n                        break;\n                }\n            }\n            if (!isPointerValueSame && !this.isRangeUpdate) {\n                if (!refreshBounds && renderer) {\n                    this.removeSvg();\n                    this.renderElements();\n                }\n                if (refreshBounds || this.allowLoadingAnimation) {\n                    this.removeSvg();\n                    this.calculateBounds();\n                    this.renderElements();\n                    if (this.allowLoadingAnimation) {\n                        this.allowLoadingAnimation = this.animationDuration > 0 && !this.isOverAllAnimationComplete ? true : false;\n                        this.renderAnimation();\n                    }\n                }\n                if (refreshWithoutAnimation && !renderer && !refreshBounds && !this.allowLoadingAnimation) {\n                    this.removeSvg();\n                    this.calculateBounds();\n                    this.renderElements(false);\n                }\n            }\n            this.isRangeUpdate = false;\n        }\n    };\n    /**\n     * Get component name for circular gauge\n     *\n     * @returns {string} - Returns the module name\n     * @private\n     */\n    CircularGauge.prototype.getModuleName = function () {\n        return 'circulargauge';\n    };\n    var CircularGauge_1;\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(null)\n    ], CircularGauge.prototype, \"width\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(null)\n    ], CircularGauge.prototype, \"height\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({ color: 'transparent', width: 0 }, _model_base__WEBPACK_IMPORTED_MODULE_4__.Border)\n    ], CircularGauge.prototype, \"border\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(null)\n    ], CircularGauge.prototype, \"background\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('')\n    ], CircularGauge.prototype, \"title\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(0)\n    ], CircularGauge.prototype, \"animationDuration\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({ size: null, color: null, fontWeight: null, fontFamily: null }, _model_base__WEBPACK_IMPORTED_MODULE_4__.Font)\n    ], CircularGauge.prototype, \"titleStyle\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({}, _model_base__WEBPACK_IMPORTED_MODULE_4__.Margin)\n    ], CircularGauge.prototype, \"margin\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Collection)([{}], _axes_axis__WEBPACK_IMPORTED_MODULE_5__.Axis)\n    ], CircularGauge.prototype, \"axes\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({}, _model_base__WEBPACK_IMPORTED_MODULE_4__.TooltipSettings)\n    ], CircularGauge.prototype, \"tooltip\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], CircularGauge.prototype, \"enablePointerDrag\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], CircularGauge.prototype, \"enableRangeDrag\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], CircularGauge.prototype, \"allowPrint\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], CircularGauge.prototype, \"allowImageExport\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], CircularGauge.prototype, \"allowPdfExport\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(true)\n    ], CircularGauge.prototype, \"allowRangePreRender\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(null)\n    ], CircularGauge.prototype, \"centerX\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(null)\n    ], CircularGauge.prototype, \"centerY\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], CircularGauge.prototype, \"moveToCenter\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('Material')\n    ], CircularGauge.prototype, \"theme\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], CircularGauge.prototype, \"useGroupingSeparator\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(null)\n    ], CircularGauge.prototype, \"description\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(0)\n    ], CircularGauge.prototype, \"tabIndex\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(true)\n    ], CircularGauge.prototype, \"allowMargin\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({}, _model_base__WEBPACK_IMPORTED_MODULE_4__.LegendSettings)\n    ], CircularGauge.prototype, \"legendSettings\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], CircularGauge.prototype, \"loaded\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], CircularGauge.prototype, \"load\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], CircularGauge.prototype, \"animationComplete\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], CircularGauge.prototype, \"axisLabelRender\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], CircularGauge.prototype, \"radiusCalculate\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], CircularGauge.prototype, \"annotationRender\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], CircularGauge.prototype, \"legendRender\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], CircularGauge.prototype, \"tooltipRender\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], CircularGauge.prototype, \"dragStart\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], CircularGauge.prototype, \"dragMove\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], CircularGauge.prototype, \"dragEnd\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], CircularGauge.prototype, \"gaugeMouseMove\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], CircularGauge.prototype, \"gaugeMouseLeave\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], CircularGauge.prototype, \"gaugeMouseDown\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], CircularGauge.prototype, \"gaugeMouseUp\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], CircularGauge.prototype, \"resized\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], CircularGauge.prototype, \"beforePrint\", void 0);\n    CircularGauge = CircularGauge_1 = __decorate([\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.NotifyPropertyChanges\n    ], CircularGauge);\n    return CircularGauge;\n}(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Component));\n\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-circulargauge/src/circular-gauge/circular-gauge.js?");

/***/ })

}]);