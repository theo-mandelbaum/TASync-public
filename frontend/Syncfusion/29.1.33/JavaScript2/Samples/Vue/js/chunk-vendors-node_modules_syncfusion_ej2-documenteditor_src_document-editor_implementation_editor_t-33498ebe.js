"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkej2_vue_samples"] = self["webpackChunkej2_vue_samples"] || []).push([["chunk-vendors-node_modules_syncfusion_ej2-documenteditor_src_document-editor_implementation_editor_t-33498ebe"],{

/***/ "./node_modules/@syncfusion/ej2-documenteditor/src/document-editor/implementation/editor/table-resizer.js":
/*!****************************************************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-documenteditor/src/document-editor/implementation/editor/table-resizer.js ***!
  \****************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TableResizer: () => (/* binding */ TableResizer)\n/* harmony export */ });\n/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../index */ \"./node_modules/@syncfusion/ej2-documenteditor/src/document-editor/implementation/index.js\");\n/* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @syncfusion/ej2-base */ \"./node_modules/@syncfusion/ej2-base/index.js\");\n/* harmony import */ var _editor_helper__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./editor-helper */ \"./node_modules/@syncfusion/ej2-documenteditor/src/document-editor/implementation/editor/editor-helper.js\");\n\n\n\n/**\n * @private\n */\nvar TableResizer = /** @class */ (function () {\n    function TableResizer(node) {\n        this.resizeNode = 0;\n        this.resizerPosition = -1;\n        this.currentResizingTable = undefined;\n        this.isResizerEnabled = false;\n        this.owner = node;\n        this.documentHelper = this.owner.documentHelper;\n        this.startingPoint = new _editor_helper__WEBPACK_IMPORTED_MODULE_2__.Point(0, 0);\n    }\n    Object.defineProperty(TableResizer.prototype, \"viewer\", {\n        get: function () {\n            return this.owner.viewer;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    TableResizer.prototype.getModuleName = function () {\n        return 'TableResizer';\n    };\n    TableResizer.prototype.updateResizingHistory = function (touchPoint) {\n        if (this.owner.editorHistoryModule) {\n            this.owner.editorHistoryModule.updateResizingHistory(touchPoint, this);\n        }\n        this.documentHelper.isRowOrCellResizing = false;\n        this.resizerPosition = -1;\n    };\n    TableResizer.prototype.handleResize = function (point) {\n        this.owner.documentHelper.isRowOrCellResizing = true;\n        this.startingPoint.x = point.x;\n        this.startingPoint.y = point.y;\n        //Initialize resizing history.\n        this.owner.editorHistoryModule.initResizingHistory(point, this);\n    };\n    //Table Resizing implementation starts\n    TableResizer.prototype.isInRowResizerArea = function (touchPoint) {\n        var position = this.getRowReSizerPosition(undefined, touchPoint);\n        if (position === -1) {\n            return false;\n        }\n        else {\n            this.resizeNode = 1;\n            this.resizerPosition = position;\n            return true;\n        }\n    };\n    TableResizer.prototype.isInCellResizerArea = function (touchPoint) {\n        var position = this.getCellReSizerPosition(touchPoint);\n        if (position === -1) {\n            this.isResizerEnabled = false;\n            return false;\n        }\n        else {\n            this.resizeNode = 0;\n            this.isResizerEnabled = true;\n            this.resizerPosition = position;\n            return true;\n        }\n    };\n    TableResizer.prototype.getCellReSizerPosition = function (touchPoint) {\n        var position = -1;\n        var resizerBoundaryWidth = 2;\n        var tableWidget = this.getTableWidget(touchPoint);\n        var cellWidget = this.getTableCellWidget(touchPoint);\n        var cellSpacing = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(tableWidget) ? 0 : tableWidget.tableFormat.cellSpacing;\n        if (tableWidget && cellSpacing > 0) {\n            this.currentResizingTable = tableWidget;\n            /* eslint-disable-next-line max-len */\n            if (this.documentHelper.isInsideRect(tableWidget.x - _editor_helper__WEBPACK_IMPORTED_MODULE_2__.HelperMethods.convertPointToPixel(tableWidget.leftBorderWidth) - 0.25, tableWidget.y, _editor_helper__WEBPACK_IMPORTED_MODULE_2__.HelperMethods.convertPointToPixel(tableWidget.leftBorderWidth) + 0.5, tableWidget.height, touchPoint)) {\n                return position = 0;\n            }\n            var startingPointX = tableWidget.x;\n            for (var i = 0; i < tableWidget.tableHolder.columns.length; i++) {\n                var preferredWidth = _editor_helper__WEBPACK_IMPORTED_MODULE_2__.HelperMethods.convertPointToPixel(tableWidget.tableHolder.columns[parseInt(i.toString(), 10)].preferredWidth);\n                /* eslint-disable-next-line max-len */\n                if ((this.documentHelper.isInsideRect(startingPointX - 1, tableWidget.y, tableWidget.leftBorderWidth + resizerBoundaryWidth, tableWidget.height, touchPoint))) {\n                    return position = i > 0 ? i : 0;\n                    /* eslint-disable-next-line max-len */\n                }\n                else if (i > 0 && (this.documentHelper.isInsideRect(startingPointX + preferredWidth - resizerBoundaryWidth / 2, tableWidget.y, resizerBoundaryWidth, tableWidget.height, touchPoint))) {\n                    return position = (i + 1);\n                }\n                startingPointX = startingPointX + preferredWidth;\n            }\n        }\n        else {\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(cellWidget)) {\n                this.currentResizingTable = cellWidget.ownerTable;\n                /* eslint-disable-next-line max-len */\n                if (this.documentHelper.isInsideRect(cellWidget.x - cellWidget.margin.left - resizerBoundaryWidth / 2, cellWidget.y - cellWidget.margin.top, resizerBoundaryWidth, cellWidget.height + cellWidget.margin.top + cellWidget.margin.bottom, touchPoint)) {\n                    return position = cellWidget.columnIndex;\n                }\n                else if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(cellWidget.nextRenderedWidget)\n                    /* eslint-disable-next-line max-len */\n                    && this.documentHelper.isInsideRect(cellWidget.x + cellWidget.margin.right + cellWidget.width - resizerBoundaryWidth / 2, cellWidget.y - cellWidget.margin.top, resizerBoundaryWidth, cellWidget.height + cellWidget.margin.top + cellWidget.margin.bottom, touchPoint)) {\n                    return position = (cellWidget.columnIndex + cellWidget.cellFormat.columnSpan);\n                }\n                else if (cellWidget.childWidgets.length > 0) {\n                    return this.getCellReSizerPositionInternal(cellWidget, touchPoint); // Gets the nested table resizer position.\n                }\n            }\n        }\n        return position;\n    };\n    TableResizer.prototype.getCellReSizerPositionInternal = function (cellWidget, touchPoint) {\n        var position = -1;\n        var childTableWidget = this.getTableWidgetFromWidget(touchPoint, cellWidget);\n        var childCellWidget = undefined;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(childTableWidget) && childTableWidget.tableFormat.cellSpacing > 0) {\n            this.currentResizingTable = childTableWidget;\n            /* eslint-disable-next-line max-len */\n            if (this.documentHelper.isInsideRect(childTableWidget.x - childTableWidget.leftBorderWidth - 0.25, childTableWidget.y, childTableWidget.leftBorderWidth + 0.5, childTableWidget.height, touchPoint)) {\n                return position = 0;\n            }\n            var startingPointX = childTableWidget.x;\n            for (var i = 0; i < childTableWidget.tableHolder.columns.length; i++) {\n                var preferredWidth = _editor_helper__WEBPACK_IMPORTED_MODULE_2__.HelperMethods.convertPointToPixel(childTableWidget.tableHolder.columns[parseInt(i.toString(), 10)].preferredWidth);\n                /* eslint-disable-next-line max-len */\n                if ((this.documentHelper.isInsideRect(startingPointX - 1, childTableWidget.y, childTableWidget.leftBorderWidth + 2, childTableWidget.height, touchPoint))) {\n                    return position = i > 0 ? i : 0;\n                    /* eslint-disable-next-line max-len */\n                }\n                else if (i > 0 && (this.documentHelper.isInsideRect(startingPointX + preferredWidth - 1, childTableWidget.y, 2, childTableWidget.height, touchPoint))) {\n                    return position = (i + 1);\n                }\n                startingPointX = startingPointX + preferredWidth;\n            }\n        }\n        else {\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(childTableWidget)) {\n                childCellWidget = childTableWidget.getTableCellWidget(touchPoint);\n            }\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(childCellWidget)) {\n                this.currentResizingTable = childCellWidget.ownerTable;\n                /* eslint-disable-next-line max-len */\n                if (this.documentHelper.isInsideRect(childCellWidget.x - childCellWidget.margin.left - 1, childCellWidget.y - childCellWidget.margin.top, 2, childCellWidget.height, touchPoint)) {\n                    return position = childCellWidget.columnIndex;\n                }\n                else if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(childCellWidget.nextRenderedWidget)\n                    /* eslint-disable-next-line max-len */\n                    && this.documentHelper.isInsideRect(childCellWidget.x + childCellWidget.margin.right + childCellWidget.width - 1, childCellWidget.y - childCellWidget.margin.top, 2, childCellWidget.height, touchPoint)) {\n                    return position = (childCellWidget.columnIndex + childCellWidget.cellFormat.columnSpan);\n                }\n                else if (childCellWidget.childWidgets.length > 0) {\n                    return this.getCellReSizerPositionInternal(childCellWidget, touchPoint);\n                }\n            }\n            else if (this.isResizerEnabled && this.owner.selection.getSelectedCells().length === 0 && this.owner.documentHelper.isMouseDown) {\n                position = this.resizerPosition;\n            }\n        }\n        return position;\n    };\n    TableResizer.prototype.getRowReSizerPosition = function (widget, touchPoint) {\n        var tableWidget = undefined;\n        var cellWidget = undefined;\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(widget)) {\n            tableWidget = this.getTableWidget(touchPoint);\n            cellWidget = this.getTableCellWidget(touchPoint);\n        }\n        else {\n            tableWidget = this.getTableWidgetFromWidget(touchPoint, widget);\n        }\n        var cellSpacing = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(tableWidget) ? 0 : tableWidget.tableFormat.cellSpacing;\n        if (tableWidget && cellSpacing > 0) {\n            this.currentResizingTable = tableWidget;\n            /* eslint-disable-next-line max-len */\n            if (this.owner.documentHelper.isInsideRect(tableWidget.x, tableWidget.y + tableWidget.height - cellSpacing, this.getActualWidth(tableWidget.lastChild), ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(tableWidget.nextSplitWidget) ? tableWidget.bottomBorderWidth + cellSpacing : 0), touchPoint)) {\n                return tableWidget.lastChild.rowIndex;\n            }\n            for (var i = 0; i < tableWidget.childWidgets.length; i++) {\n                //Need to consider for splitted widgets\n                var rowWidget = tableWidget.childWidgets[parseInt(i.toString(), 10)];\n                if (tableWidget.childWidgets.indexOf(rowWidget) > -1\n                    /* eslint-disable-next-line max-len */\n                    && (this.owner.documentHelper.isInsideRect(rowWidget.x, rowWidget.y + rowWidget.height + cellSpacing / 2, this.getActualWidth(rowWidget), cellSpacing / 2, touchPoint))) {\n                    return rowWidget.rowIndex;\n                }\n            }\n        }\n        else {\n            if (tableWidget && cellWidget) {\n                cellWidget = this.getTableCellWidget(touchPoint);\n            }\n            if (cellWidget) {\n                var rowWidget = cellWidget.containerWidget;\n                var height = 0;\n                if (rowWidget.rowIndex === rowWidget.ownerTable.childWidgets.length - 1) {\n                    height = rowWidget.bottomBorderWidth + 2;\n                }\n                else {\n                    height = rowWidget.nextRenderedWidget.topBorderWidth + 2;\n                }\n                /* eslint-disable-next-line max-len */\n                if (this.owner.documentHelper.isInsideRect(rowWidget.x, rowWidget.y + rowWidget.height - height, rowWidget.width, height * 2, touchPoint)) {\n                    this.currentResizingTable = rowWidget.ownerTable;\n                    return rowWidget.rowIndex;\n                }\n                else {\n                    if (cellWidget.childWidgets.length > 0) {\n                        return this.getRowReSizerPosition(cellWidget, touchPoint);\n                    }\n                }\n            }\n        }\n        return -1;\n    };\n    TableResizer.prototype.handleResizing = function (touchPoint, isTableMarkerDragging, dragValue) {\n        this.owner.isShiftingEnabled = true;\n        if (!isTableMarkerDragging) {\n            if (this.resizeNode === 0) {\n                dragValue = touchPoint.x - this.startingPoint.x;\n                this.resizeTableCellColumn(dragValue);\n            }\n            else {\n                dragValue = touchPoint.y - this.startingPoint.y;\n                this.resizeTableRow(dragValue);\n            }\n        }\n        else {\n            if (this.resizeNode === 0) {\n                this.resizeTableCellColumn(dragValue);\n            }\n        }\n    };\n    TableResizer.prototype.resizeTableRow = function (dragValue) {\n        var table = this.currentResizingTable;\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(table) || dragValue === 0 || this.resizerPosition === -1) {\n            return;\n        }\n        var selection = this.owner.selectionModule;\n        if (table.isInsideTable) {\n            this.owner.isLayoutEnabled = false; //Layouting is disabled to skip the child table layouting.\n        }\n        var row = undefined;\n        if (this.resizerPosition > -1) {\n            row = table.childWidgets[this.resizerPosition];\n            if (row) {\n                this.updateRowHeight(row, dragValue);\n            }\n            selection.selectPosition(selection.start, selection.end);\n        }\n        if (table.isInsideTable) {\n            var parentTable = this.owner.documentHelper.layout.getParentTable(table);\n            this.owner.isLayoutEnabled = true; //layouting is enabled to layout the parent table of the nested table.\n            table = parentTable;\n        }\n        this.startingPoint.y += _editor_helper__WEBPACK_IMPORTED_MODULE_2__.HelperMethods.convertPointToPixel(dragValue);\n        this.owner.documentHelper.layout.reLayoutTable(table);\n        this.owner.editorModule.isSkipOperationsBuild = this.owner.enableCollaborativeEditing;\n        this.owner.editorModule.reLayout(this.owner.selectionModule);\n        this.owner.editorModule.isSkipOperationsBuild = false;\n        if (row) {\n            this.getRowReSizerPosition(undefined, this.startingPoint);\n        }\n        if (this.currentResizingTable && (this.currentResizingTable.childWidgets === undefined\n            || this.currentResizingTable.childWidgets[this.resizerPosition] === undefined)) {\n            this.resizerPosition = -1;\n        }\n    };\n    TableResizer.prototype.getTableWidget = function (cursorPoint) {\n        var widget = undefined;\n        var currentPage = this.owner.documentHelper.currentPage;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(currentPage)) {\n            for (var i = 0; i < currentPage.bodyWidgets.length; i++) {\n                var bodyWidget = currentPage.bodyWidgets[parseInt(i.toString(), 10)];\n                widget = this.getTableWidgetFromWidget(cursorPoint, bodyWidget);\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(widget)) {\n                    break;\n                }\n                if (this.documentHelper.owner.layoutType === 'Pages') {\n                    var body = currentPage.headerWidget;\n                    widget = this.getTableWidgetFromWidget(cursorPoint, body);\n                    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(widget)) {\n                        break;\n                    }\n                    var bodywid = currentPage.footerWidget;\n                    widget = this.getTableWidgetFromWidget(cursorPoint, bodywid);\n                    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(widget)) {\n                        break;\n                    }\n                }\n            }\n        }\n        return widget;\n    };\n    TableResizer.prototype.getTableWidgetFromWidget = function (point, widget) {\n        for (var j = 0; j < widget.childWidgets.length; j++) {\n            if (widget.childWidgets[parseInt(j.toString(), 10)] instanceof _index__WEBPACK_IMPORTED_MODULE_0__.TableWidget) {\n                var childWidget = widget.childWidgets[parseInt(j.toString(), 10)];\n                var tableWidth = 0;\n                if (childWidget.wrapTextAround) {\n                    tableWidth = childWidget.getTableCellWidth();\n                }\n                if (!(childWidget.wrapTextAround) && childWidget.y <= point.y && (childWidget.y + childWidget.height) >= point.y) {\n                    return childWidget;\n                }\n                if ((childWidget.wrapTextAround &&\n                    (childWidget.x <= point.x && (childWidget.x + tableWidth) >= point.x &&\n                        childWidget.y <= point.y && (childWidget.y + childWidget.height) >= point.y))) {\n                    return childWidget;\n                }\n            }\n        }\n        return undefined;\n    };\n    TableResizer.prototype.getTableCellWidget = function (cursorPoint) {\n        var widget = undefined;\n        var currentPage = this.owner.documentHelper.currentPage;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(currentPage)) {\n            for (var i = 0; i < currentPage.bodyWidgets.length; i++) {\n                var bodyWidget = currentPage.bodyWidgets[parseInt(i.toString(), 10)];\n                widget = bodyWidget.getTableCellWidget(cursorPoint);\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(widget)) {\n                    break;\n                }\n                if (this.documentHelper.owner.layoutType === 'Pages' && this.viewer.owner.enableHeaderAndFooter) {\n                    var body = currentPage.headerWidget;\n                    widget = body.getTableCellWidget(cursorPoint);\n                    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(widget)) {\n                        break;\n                    }\n                    var bodywid = currentPage.footerWidget;\n                    widget = bodywid.getTableCellWidget(cursorPoint);\n                    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(widget)) {\n                        break;\n                    }\n                }\n            }\n        }\n        return widget;\n    };\n    TableResizer.prototype.updateRowHeight = function (row, dragValue) {\n        var rowFormat = row.rowFormat;\n        if (rowFormat.heightType === 'Auto') {\n            rowFormat.heightType = 'AtLeast';\n            var row_1 = rowFormat.ownerBase;\n            var currentHeight = this.owner.documentHelper.layout.getRowHeight(row_1, [row_1]);\n            //the minimum height of the Row in MS word is 2.7 points which is equal to 3.6 pixel.\n            if (currentHeight + dragValue >= 2.7 && rowFormat.height !== currentHeight + dragValue) {\n                rowFormat.height = currentHeight + dragValue;\n            }\n        }\n        else {\n            //the minimum height of the Row in MS word is 2.7 points which is equal to 3.6 pixel.\n            if (rowFormat.height !== rowFormat.height + dragValue) {\n                rowFormat.height = rowFormat.height + dragValue < 2.7 ? 2.7 : rowFormat.height + dragValue;\n            }\n        }\n    };\n    //Resize Table cell\n    TableResizer.prototype.resizeTableCellColumn = function (dragValue) {\n        var table = this.currentResizingTable;\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(table) || dragValue === 0 || (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(table.childWidgets) || this.resizerPosition < 0) {\n            return;\n        }\n        var selectionFlag = true;\n        var selection = this.owner.selectionModule;\n        this.owner.editorModule.setOffsetValue(selection);\n        table = table.combineWidget(this.viewer);\n        this.owner.isLayoutEnabled = false;\n        // table.PreserveGrid = true;\n        this.setPreferredWidth(table);\n        var containerWidth = table.getOwnerWidth(true);\n        var newIndent = table.leftIndent;\n        var tableAlignment = table.tableFormat.tableAlignment;\n        if (!selection.isEmpty) {\n            selectionFlag = this.resizeColumnWithSelection(selection, table, dragValue);\n        }\n        if (!selectionFlag) {\n            this.updateGridValue(table, true);\n            return;\n        }\n        if (this.resizerPosition === 0) {\n            // Todo: need to handle the resizing of first column and table indent.\n            var columnIndex = this.resizerPosition;\n            var rightColumn = table.tableHolder.columns[parseInt(columnIndex.toString(), 10)];\n            var width = rightColumn.preferredWidth;\n            if (dragValue > 0) {\n                var prevDragValue = dragValue;\n                do {\n                    var newWidth = _editor_helper__WEBPACK_IMPORTED_MODULE_2__.HelperMethods.round(rightColumn.preferredWidth - dragValue, 1);\n                    if (newWidth >= rightColumn.minimumWidth) {\n                        rightColumn.preferredWidth = newWidth;\n                        newIndent = table.leftIndent + dragValue;\n                        newIndent = newIndent >= -1440 ? (newIndent <= 1440 ? newIndent : 1440) : -1440;\n                        break;\n                    }\n                    else {\n                        prevDragValue = dragValue;\n                        dragValue += newWidth - rightColumn.minimumWidth;\n                    }\n                } while (dragValue !== prevDragValue);\n            }\n            else {\n                var prevDragValue = dragValue;\n                do {\n                    var newWidth = _editor_helper__WEBPACK_IMPORTED_MODULE_2__.HelperMethods.round(rightColumn.preferredWidth - dragValue, 1);\n                    if (newWidth <= 2112) {\n                        rightColumn.preferredWidth = newWidth;\n                        newIndent = table.leftIndent + dragValue;\n                        newIndent = newIndent >= -1440 ? (newIndent <= 1440 ? newIndent : 1440) : -1440;\n                        break;\n                    }\n                    else {\n                        prevDragValue = dragValue;\n                        dragValue -= newWidth - 2112;\n                    }\n                } while (dragValue !== prevDragValue);\n            }\n            var dragOffset = dragValue;\n            if (tableAlignment !== 'Left' && (table.tableHolder.getTotalWidth(0) > containerWidth) && table.tableFormat.preferredWidthType === 'Auto') {\n                if (table.tableHolder.isFitColumns(containerWidth, table.tableHolder.tableWidth, table.tableFormat.preferredWidthType === 'Auto')) {\n                    table.tableHolder.fitColumns(containerWidth, table.tableHolder.tableWidth, table.tableFormat.preferredWidthType === 'Auto', table.tableFormat.allowAutoFit);\n                }\n                else {\n                    rightColumn.preferredWidth = width;\n                }\n                dragOffset = 0;\n            }\n            if (tableAlignment === 'Center'\n                && (table.tableHolder.getTotalWidth(0) < containerWidth || table.tableFormat.preferredWidthType !== 'Auto')) {\n                dragOffset = dragOffset / 2;\n            }\n            table.tableFormat.leftIndent = tableAlignment === 'Left' ? newIndent : 0;\n            table.tableHolder.tableWidth = table.tableHolder.getTotalWidth(0);\n            this.updateCellPreferredWidths(table);\n            if (table.tableFormat.preferredWidthType !== 'Auto') {\n                table.updateWidth(dragValue);\n            }\n            this.updateGridValue(table, true, dragOffset);\n        }\n        else if (table !== null && this.resizerPosition === table.tableHolder.columns.length) {\n            // Todo: need to handle the resizing of last column and table width.\n            this.resizeColumnAtLastColumnIndex(table, dragValue, containerWidth);\n        }\n        else {\n            if (this.resizerPosition === -1) {\n                this.owner.isLayoutEnabled = true;\n                return;\n            }\n            this.resizeCellAtMiddle(table, dragValue);\n        }\n        // table.PreserveGrid = false;\n        this.owner.isLayoutEnabled = true;\n        selection.selectPosition(selection.start, selection.end);\n    };\n    TableResizer.prototype.resizeColumnWithSelection = function (selection, table, dragValue) {\n        //const newIndent: number = table.leftIndent;\n        var cellwidget = this.getTableCellWidget(this.startingPoint);\n        if (cellwidget && (selection.selectedWidgets.containsKey(cellwidget) || (cellwidget.previousWidget\n            && selection.selectedWidgets.containsKey((cellwidget.previousWidget))))) {\n            var selectedCells = selection.getSelectedCells();\n            if (this.resizerPosition === 0) {\n                this.resizeColumnAtStart(table, dragValue, selectedCells);\n            }\n            else if (table !== null && this.resizerPosition === table.tableHolder.columns.length) {\n                var leftColumnCollection = this.getColumnCells(table, this.resizerPosition, true);\n                for (var i = 0; i < leftColumnCollection.length; i++) {\n                    var cell = leftColumnCollection[parseInt(i.toString(), 10)];\n                    if (selectedCells.indexOf(cell) !== -1) {\n                        this.increaseOrDecreaseWidth(cell, dragValue, true);\n                    }\n                }\n                //Updates the grid after value for all the rows.\n                this.updateRowsGridAfterWidth(table);\n                table.updateWidth(dragValue);\n                table.tableFormat.allowAutoFit = false;\n                this.updateGridValue(table, true, dragValue);\n            }\n            else {\n                if (this.resizerPosition === -1) {\n                    return false;\n                }\n                var columnIndex = this.resizerPosition;\n                var leftColumnCollection = this.getColumnCells(table, columnIndex, true);\n                var rightColumnCollection = this.getColumnCells(table, columnIndex, false);\n                var isColumnResizing = this.isColumnSelected(table, columnIndex);\n                if (leftColumnCollection.length > 0 && !isColumnResizing) {\n                    for (var i = 0; i < leftColumnCollection.length; i++) {\n                        if (selectedCells.indexOf(leftColumnCollection[parseInt(i.toString(), 10)]) === -1) {\n                            leftColumnCollection.splice(i, 1);\n                            i--;\n                        }\n                    }\n                }\n                if (rightColumnCollection.length > 0 && !isColumnResizing) {\n                    for (var i = 0; i < rightColumnCollection.length; i++) {\n                        if (selectedCells.indexOf(rightColumnCollection[parseInt(i.toString(), 10)]) === -1) {\n                            rightColumnCollection.splice(i, 1);\n                            i--;\n                        }\n                    }\n                }\n                //Getting the adjacent cell collections for left side selected cells in the right column collection.\n                if (leftColumnCollection.length === 0 && rightColumnCollection.length > 0) {\n                    for (var i = 0; i < rightColumnCollection.length; i++) {\n                        var cell = rightColumnCollection[parseInt(i.toString(), 10)];\n                        if (cell.previousWidget) {\n                            leftColumnCollection.push(cell.previousWidget);\n                        }\n                    }\n                }\n                else if (rightColumnCollection.length === 0 && leftColumnCollection.length > 0) {\n                    for (var i = 0; i < leftColumnCollection.length; i++) {\n                        var cell = leftColumnCollection[parseInt(i.toString(), 10)];\n                        if (cell.nextWidget) {\n                            rightColumnCollection.push(cell.nextWidget);\n                        }\n                    }\n                }\n                this.changeWidthOfCells(table, leftColumnCollection, rightColumnCollection, dragValue);\n                if (table.tableFormat.allowAutoFit) {\n                    table.updateWidth(dragValue);\n                }\n                table.tableFormat.allowAutoFit = false;\n                this.updateGridValue(table, true, dragValue);\n            }\n            selection.selectPosition(selection.start, selection.end);\n        }\n        return false;\n    };\n    TableResizer.prototype.resizeColumnAtStart = function (table, dragValue, selectedCells) {\n        var newIndent = table.leftIndent;\n        //const rightColumnCollection: TableCellWidget[] = this.getColumnCells(table, this.resizerPosition, false);\n        var offset = 0;\n        var selectedRow = selectedCells[0].ownerRow;\n        var rowFormat = selectedRow.rowFormat;\n        if (rowFormat.beforeWidth > 0) {\n            var newGridBefore = rowFormat.beforeWidth + dragValue;\n            if (newGridBefore > 0) {\n                this.updateGridBefore(selectedRow, dragValue);\n            }\n            else {\n                var leastGridBefore = this.getLeastGridBefore(table, selectedRow);\n                if (newGridBefore < leastGridBefore && offset !== newGridBefore) {\n                    newIndent = table.leftIndent + newGridBefore;\n                    table.tableFormat.leftIndent = newIndent >= -1440 ? (newIndent <= 1440 ? newIndent : 1440) : -1440;\n                    for (var i = 0; i < table.childWidgets.length; i++) {\n                        var tableRow = table.childWidgets[parseInt(i.toString(), 10)];\n                        if (selectedRow !== tableRow) {\n                            this.updateGridBefore(tableRow, -newGridBefore);\n                        }\n                    }\n                }\n            }\n        }\n        else {\n            if (dragValue < 0) {\n                newIndent = table.leftIndent + dragValue;\n                table.tableFormat.leftIndent = newIndent >= -1440 ? (newIndent <= 1440 ? newIndent : 1440) : -1440;\n                this.updateWidthForCells(table, selectedCells, dragValue);\n            }\n            else {\n                var leastGridBefore = this.getLeastGridBefore(table, selectedRow);\n                var currentTableIndent = table.tableFormat.leftIndent;\n                if (currentTableIndent === 0) {\n                    for (var i = 0; i < table.childWidgets.length; i++) {\n                        var tableRow = table.childWidgets[parseInt(i.toString(), 10)];\n                        if (selectedCells.indexOf(tableRow.childWidgets[0]) !== -1) {\n                            this.updateGridBefore(tableRow, dragValue);\n                            this.increaseOrDecreaseWidth(tableRow.childWidgets[0], dragValue, false);\n                        }\n                    }\n                }\n                else {\n                    var difference = leastGridBefore - dragValue;\n                    if (difference > 0) {\n                        newIndent = table.leftIndent + dragValue;\n                        table.tableFormat.leftIndent = newIndent >= -1440 ? (newIndent <= 1440 ? newIndent : 1440) : -1440;\n                        this.updateWidthForCells(table, selectedCells, dragValue);\n                    }\n                    else {\n                        newIndent = table.leftIndent + leastGridBefore;\n                        table.tableFormat.leftIndent = newIndent >= -1440 ? (newIndent <= 1440 ? newIndent : 1440) : -1440;\n                        for (var i = 0; i < table.childWidgets.length; i++) {\n                            var tableRow = table.childWidgets[parseInt(i.toString(), 10)];\n                            if (selectedCells.indexOf(tableRow.childWidgets[0]) !== -1) {\n                                this.increaseOrDecreaseWidth(tableRow.childWidgets[0], dragValue, false);\n                                this.updateGridBefore(tableRow, dragValue - leastGridBefore);\n                            }\n                            else {\n                                this.updateGridBefore(tableRow, -leastGridBefore);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        table.tableFormat.allowAutoFit = false;\n        this.updateGridValue(table, true, dragValue);\n    };\n    TableResizer.prototype.updateWidthForCells = function (table, selectedCells, dragValue) {\n        for (var i = 0; i < table.childWidgets.length; i++) {\n            var tableRow = table.childWidgets[parseInt(i.toString(), 10)];\n            if (selectedCells.indexOf(tableRow.childWidgets[0]) !== -1) {\n                this.increaseOrDecreaseWidth(tableRow.childWidgets[0], dragValue, false);\n            }\n            else {\n                this.updateGridBefore(tableRow, -dragValue);\n            }\n        }\n    };\n    TableResizer.prototype.resizeColumnAtLastColumnIndex = function (table, dragValue, containerWidth) {\n        var tableAlignment = table.tableFormat.tableAlignment;\n        var preferredWidth = table.tableFormat.preferredWidth;\n        var hasTableWidth = preferredWidth;\n        var columnIndex = this.resizerPosition;\n        var leftColumn = table.tableHolder.columns[columnIndex - 1];\n        var prevDragValue = 0;\n        while (dragValue !== prevDragValue) {\n            var newWidth = _editor_helper__WEBPACK_IMPORTED_MODULE_2__.HelperMethods.round(leftColumn.preferredWidth + dragValue, 1);\n            if (newWidth >= leftColumn.minimumWidth) {\n                leftColumn.preferredWidth = newWidth;\n                prevDragValue = dragValue;\n            }\n            else {\n                prevDragValue = dragValue;\n                dragValue -= newWidth - leftColumn.minimumWidth;\n            }\n        }\n        this.updateCellPreferredWidths(table);\n        if (hasTableWidth || table.tableHolder.getTotalWidth(0) > containerWidth) {\n            table.tableFormat.allowAutoFit = false;\n            table.updateWidth(dragValue);\n            table.tableHolder.tableWidth = table.tableHolder.getTotalWidth(0);\n        }\n        var dragOffset = dragValue;\n        if (tableAlignment === 'Right') {\n            dragOffset = 0;\n        }\n        else if (tableAlignment === 'Center') {\n            dragOffset = dragOffset / 2;\n        }\n        this.updateGridValue(table, true, dragOffset);\n    };\n    TableResizer.prototype.resizeCellAtMiddle = function (table, dragValue) {\n        var columnIndex = this.resizerPosition;\n        var leftColumn = table.tableHolder.columns[columnIndex - 1];\n        var rightColumn = table.tableHolder.columns[parseInt(columnIndex.toString(), 10)];\n        if (dragValue > 0) {\n            var isContinue = true;\n            while (isContinue) {\n                var newWidth = _editor_helper__WEBPACK_IMPORTED_MODULE_2__.HelperMethods.round(rightColumn.preferredWidth - dragValue, 1);\n                if (newWidth >= rightColumn.minimumWidth) {\n                    rightColumn.preferredWidth = newWidth;\n                    leftColumn.preferredWidth = leftColumn.preferredWidth + dragValue;\n                    isContinue = false;\n                }\n                else {\n                    dragValue += newWidth - rightColumn.minimumWidth;\n                }\n            }\n        }\n        else {\n            var isContinue = true;\n            while (isContinue) {\n                var newWidth = _editor_helper__WEBPACK_IMPORTED_MODULE_2__.HelperMethods.round(leftColumn.preferredWidth + dragValue, 1);\n                if (newWidth >= leftColumn.minimumWidth) {\n                    leftColumn.preferredWidth = newWidth;\n                    rightColumn.preferredWidth = rightColumn.preferredWidth - dragValue;\n                    isContinue = false;\n                }\n                else {\n                    dragValue -= newWidth - leftColumn.minimumWidth;\n                }\n            }\n        }\n        // Update the cell widths based on the columns preferred width\n        this.updateCellPreferredWidths(table);\n        if (table.tableFormat.allowAutoFit) {\n            table.updateWidth(dragValue);\n        }\n        table.tableFormat.allowAutoFit = false;\n        table.tableHolder.tableWidth = table.tableHolder.getTotalWidth(0);\n        this.updateGridValue(table, false, dragValue);\n    };\n    TableResizer.prototype.updateGridValue = function (table, isUpdate, dragValue) {\n        if (isUpdate) {\n            table.calculateGrid();\n            table.isGridUpdated = false;\n        }\n        table.buildTableColumns();\n        table.isGridUpdated = true;\n        this.viewer.owner.isLayoutEnabled = true;\n        if (table.isInsideTable) {\n            var parentTable = this.documentHelper.layout.getParentTable(table);\n            this.documentHelper.layout.reLayoutTable(parentTable); // Need to optmize this.\n        }\n        else {\n            this.documentHelper.layout.reLayoutTable(table);\n        }\n        this.owner.editorModule.getOffsetValue(this.documentHelper.selection);\n        this.owner.editorModule.isSkipOperationsBuild = this.owner.enableCollaborativeEditing;\n        this.owner.editorModule.reLayout(this.owner.selectionModule);\n        this.owner.editorModule.isSkipOperationsBuild = false;\n        if (dragValue) {\n            this.startingPoint.x += _editor_helper__WEBPACK_IMPORTED_MODULE_2__.HelperMethods.convertPointToPixel(dragValue);\n            // this.resizerPosition = this.getCellReSizerPosition(this.startingPoint);\n        }\n    };\n    TableResizer.prototype.getColumnCells = function (table, columnIndex, isLeftSideCollection) {\n        var cells = [];\n        for (var i = 0; i < table.childWidgets.length; i++) {\n            var row = table.childWidgets[parseInt(i.toString(), 10)];\n            for (var j = 0; j < row.childWidgets.length; j++) {\n                var cell = row.childWidgets[parseInt(j.toString(), 10)];\n                if (isLeftSideCollection) {\n                    if (cell.columnIndex + cell.cellFormat.columnSpan === columnIndex) {\n                        cells.push(cell);\n                    }\n                }\n                else {\n                    if (cell.columnIndex === columnIndex) {\n                        cells.push(cell);\n                    }\n                }\n            }\n        }\n        return cells;\n    };\n    TableResizer.prototype.updateGridBefore = function (row, offset) {\n        if (row.rowFormat.beforeWidth + offset !== row.rowFormat.beforeWidth) {\n            row.rowFormat.beforeWidth = row.rowFormat.beforeWidth + offset;\n            row.rowFormat.gridBeforeWidth = row.rowFormat.beforeWidth;\n        }\n    };\n    TableResizer.prototype.getLeastGridBefore = function (table, ignoreRow) {\n        var gridBefore = 0;\n        var flag = 0;\n        for (var i = 0; i < table.childWidgets.length; i++) {\n            var row = table.childWidgets[parseInt(i.toString(), 10)];\n            if (row !== ignoreRow) {\n                if (flag === 0) {\n                    gridBefore = row.rowFormat.beforeWidth;\n                    flag++;\n                }\n                if (row.rowFormat.beforeWidth <= gridBefore) {\n                    gridBefore = row.rowFormat.beforeWidth;\n                }\n            }\n        }\n        return gridBefore;\n    };\n    TableResizer.prototype.increaseOrDecreaseWidth = function (cell, dragValue, isIncrease) {\n        var preferredWidth = cell.cellFormat.preferredWidth;\n        if (cell.cellFormat.preferredWidthType === 'Auto') {\n            preferredWidth = cell.cellFormat.cellWidth;\n            cell.cellFormat.preferredWidthType = 'Point';\n        }\n        var minimumWidth = cell.ownerColumn.minWidth;\n        if (cell.cellFormat.preferredWidthType === 'Percent') {\n            minimumWidth = cell.convertPointToPercent(minimumWidth);\n        }\n        // Margins properties usedd for internal purpose.\n        if (isIncrease) {\n            cell.cellFormat.preferredWidth = preferredWidth + dragValue > minimumWidth ? preferredWidth + dragValue : minimumWidth;\n        }\n        else {\n            cell.cellFormat.preferredWidth = preferredWidth - dragValue > minimumWidth ? preferredWidth - dragValue : minimumWidth;\n        }\n    };\n    /* eslint-disable-next-line max-len */\n    TableResizer.prototype.changeWidthOfCells = function (table, leftColumnCollection, rightColumnCollection, dragValue) {\n        if (leftColumnCollection.length > 0) {\n            var flag = false;\n            for (var i = 0; i < leftColumnCollection.length; i++) {\n                var cell = leftColumnCollection[parseInt(i.toString(), 10)];\n                this.increaseOrDecreaseWidth(cell, dragValue, true);\n                if (cell.cellIndex === cell.ownerRow.childWidgets.length - 1) {\n                    flag = true;\n                }\n            }\n            if (flag) {\n                this.updateRowsGridAfterWidth(table);\n            }\n        }\n        if (rightColumnCollection.length > 0) {\n            var diff = 0;\n            for (var i = 0; i < rightColumnCollection.length; i++) {\n                var cell = rightColumnCollection[parseInt(i.toString(), 10)];\n                if (cell.cellIndex === 0) {\n                    var newGridBefore = cell.ownerRow.rowFormat.beforeWidth + dragValue;\n                    if (newGridBefore >= 0) {\n                        this.updateGridBefore(cell.ownerRow, dragValue);\n                    }\n                    else {\n                        if (diff !== newGridBefore) {\n                            diff = newGridBefore;\n                        }\n                        cell.ownerRow.rowFormat.gridBeforeWidth = 0;\n                        cell.ownerRow.rowFormat.gridBeforeWidthType = 'Auto';\n                    }\n                }\n                this.increaseOrDecreaseWidth(cell, dragValue, false);\n            }\n            if (diff !== 0) {\n                var newIndent = table.leftIndent + diff;\n                table.tableFormat.leftIndent = newIndent >= -1440 ? (newIndent <= 1440 ? newIndent : 1440) : -1440;\n                for (var j = 0; j < table.childWidgets.length; j++) {\n                    var row = table.childWidgets[parseInt(j.toString(), 10)];\n                    if (rightColumnCollection.indexOf(row.childWidgets[0]) === -1) {\n                        this.updateGridBefore(row, diff > 0 ? diff : -diff);\n                    }\n                }\n            }\n        }\n    };\n    TableResizer.prototype.updateRowsGridAfterWidth = function (table) {\n        var maxRowWidth = this.getMaxRowWidth(table, true);\n        for (var i = 0; i < table.childWidgets.length; i++) {\n            var row = table.childWidgets[parseInt(i.toString(), 10)];\n            var currentRowWidth = this.getRowWidth(row, true);\n            if (maxRowWidth >= currentRowWidth && row.rowFormat.afterWidth !== maxRowWidth - currentRowWidth) {\n                var value = maxRowWidth - currentRowWidth;\n                row.rowFormat.gridAfterWidth = value;\n                row.rowFormat.afterWidth = value;\n            }\n        }\n    };\n    TableResizer.prototype.getRowWidth = function (row, toUpdateGridAfter) {\n        var rowWidth = 0;\n        if (toUpdateGridAfter) {\n            rowWidth = rowWidth + row.rowFormat.beforeWidth;\n        }\n        for (var i = 0; i < row.childWidgets.length; i++) {\n            var cell = row.childWidgets[parseInt(i.toString(), 10)];\n            rowWidth += cell.cellFormat.cellWidth;\n        }\n        return rowWidth;\n    };\n    TableResizer.prototype.getMaxRowWidth = function (table, toUpdateGridAfter) {\n        var width = 0;\n        for (var i = 0; i < table.childWidgets.length; i++) {\n            var row = table.childWidgets[parseInt(i.toString(), 10)];\n            var rowWidth = 0;\n            if (toUpdateGridAfter) {\n                rowWidth = rowWidth + row.rowFormat.beforeWidth;\n            }\n            for (var i_1 = 0; i_1 < row.childWidgets.length; i_1++) {\n                var cell = row.childWidgets[parseInt(i_1.toString(), 10)];\n                rowWidth += cell.cellFormat.cellWidth;\n            }\n            if (width < rowWidth) {\n                width = rowWidth;\n            }\n        }\n        return width;\n    };\n    TableResizer.prototype.isColumnSelected = function (table, columnIndex) {\n        var selection = this.owner.selectionModule;\n        var selectedCells = selection.getSelectedCells();\n        var leftColumnCells = this.getColumnCells(table, columnIndex, true);\n        var rightColumnCells = this.getColumnCells(table, columnIndex, false);\n        var isColumnSelected = false;\n        for (var i = 0; i < leftColumnCells.length; i++) {\n            var columnCell = leftColumnCells[parseInt(i.toString(), 10)];\n            isColumnSelected = selectedCells.indexOf(columnCell) !== -1 ? true : false;\n        }\n        if (!isColumnSelected) {\n            for (var i = 0; i < rightColumnCells.length; i++) {\n                var columnCell = rightColumnCells[parseInt(i.toString(), 10)];\n                isColumnSelected = selectedCells.indexOf(columnCell) !== -1 ? true : false;\n            }\n        }\n        return isColumnSelected;\n    };\n    TableResizer.prototype.applyProperties = function (table, tableHistoryInfo) {\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(tableHistoryInfo)) {\n            return;\n        }\n        // PreserveGrid = true;\n        if (tableHistoryInfo.tableHolder) {\n            table.tableHolder = tableHistoryInfo.tableHolder.clone();\n        }\n        if (tableHistoryInfo.tableFormat !== null) {\n            table.tableFormat.leftIndent = tableHistoryInfo.tableFormat.leftIndent;\n            table.tableFormat.preferredWidth = tableHistoryInfo.tableFormat.preferredWidth;\n            table.tableFormat.preferredWidthType = tableHistoryInfo.tableFormat.preferredWidthType;\n            table.tableFormat.allowAutoFit = tableHistoryInfo.tableFormat.allowAutoFit;\n        }\n        for (var i = 0; i < table.childWidgets.length; i++) {\n            var row = table.childWidgets[parseInt(i.toString(), 10)];\n            var rowFormat = tableHistoryInfo.rows[parseInt(i.toString(), 10)];\n            row.rowFormat.gridBefore = rowFormat.gridBefore;\n            row.rowFormat.gridBeforeWidth = rowFormat.gridBeforeWidth;\n            row.rowFormat.gridBeforeWidthType = rowFormat.gridBeforeWidthType;\n            row.rowFormat.gridAfter = rowFormat.gridAfter;\n            row.rowFormat.gridAfterWidth = rowFormat.gridAfterWidth;\n            row.rowFormat.gridAfterWidthType = rowFormat.gridAfterWidthType;\n            for (var j = 0; j < row.childWidgets.length; j++) {\n                var cell = row.childWidgets[parseInt(j.toString(), 10)];\n                var cellFormat = rowFormat.cells[parseInt(j.toString(), 10)];\n                cell.columnIndex = cellFormat.columnIndex;\n                cell.cellFormat.columnSpan = cellFormat.columnSpan;\n                cell.cellFormat.preferredWidth = cellFormat.preferredWidth;\n                cell.cellFormat.preferredWidthType = cellFormat.preferredWidthType;\n            }\n        }\n        var containerWidth = table.getOwnerWidth(true);\n        var tableWidth = table.getTableClientWidth(containerWidth);\n        //Sets the width to cells\n        table.setWidthToCells(tableWidth, table.tableFormat.preferredWidthType === 'Auto');\n        // PreserveGrid = false;\n    };\n    TableResizer.prototype.getActualWidth = function (row) {\n        var width = 0;\n        if (row.childWidgets.length > 0) {\n            for (var i = 0; i < row.childWidgets.length; i++) {\n                width += row.childWidgets[parseInt(i.toString(), 10)].cellFormat.cellWidth;\n            }\n        }\n        return width;\n    };\n    TableResizer.prototype.setPreferredWidth = function (table) {\n        for (var i = 0; i < table.childWidgets.length; i++) {\n            var rw = table.childWidgets[parseInt(i.toString(), 10)];\n            var rowFormat = rw.rowFormat;\n            if (rowFormat.gridBefore > 0) {\n                rowFormat.gridBeforeWidth = rowFormat.beforeWidth;\n                rowFormat.gridBeforeWidthType = 'Point';\n            }\n            for (var j = 0; j < rw.childWidgets.length; j++) {\n                var cell = rw.childWidgets[parseInt(j.toString(), 10)];\n                cell.cellFormat.preferredWidth = cell.cellFormat.cellWidth;\n                cell.cellFormat.preferredWidthType = 'Point';\n            }\n            if (rowFormat.gridAfter > 0) {\n                rowFormat.gridAfterWidth = rowFormat.afterWidth;\n                rowFormat.gridAfterWidthType = 'Point';\n            }\n        }\n    };\n    TableResizer.prototype.updateCellPreferredWidths = function (table) {\n        var tableWidth = table.tableHolder.tableWidth;\n        for (var i = 0; i < table.childWidgets.length; i++) {\n            var row = table.childWidgets[parseInt(i.toString(), 10)];\n            if (row.rowFormat.gridBefore > 0) {\n                var width = table.tableHolder.getCellWidth(0, row.rowFormat.gridBefore, tableWidth);\n                this.updateGridBeforeWidth(width, row);\n            }\n            for (var j = 0; j < row.childWidgets.length; j++) {\n                var cell = row.childWidgets[parseInt(j.toString(), 10)];\n                cell.updateWidth(table.tableHolder.getCellWidth(cell.columnIndex, cell.cellFormat.columnSpan, tableWidth));\n            }\n            if (row.rowFormat.gridAfter > 0) {\n                /* eslint-disable-next-line max-len */\n                this.updateGridAfterWidth(table.tableHolder.getCellWidth(row.childWidgets.length, row.rowFormat.gridAfter, tableWidth), row);\n            }\n        }\n    };\n    TableResizer.prototype.updateGridBeforeWidth = function (width, row) {\n        var rowFormat = row.rowFormat;\n        if (width !== rowFormat.beforeWidth) {\n            rowFormat.beforeWidth = width;\n            if (rowFormat.gridBeforeWidthType === 'Auto') {\n                rowFormat.gridBeforeWidthType = 'Point';\n            }\n            if (rowFormat.gridBeforeWidthType === 'Point') {\n                rowFormat.gridBeforeWidth = rowFormat.beforeWidth;\n            }\n            else {\n                // The value is calculated from the pixel values hence, its converted to percent using method.\n                var ownerWidth = row.ownerTable.getTableClientWidth(row.ownerTable.getOwnerWidth(true));\n                var value = row.ownerTable.convertPointToPercent(rowFormat.beforeWidth, ownerWidth);\n                rowFormat.gridBeforeWidth = value;\n            }\n        }\n    };\n    TableResizer.prototype.updateGridAfterWidth = function (width, row) {\n        var rowFormat = row.rowFormat;\n        if (width !== rowFormat.afterWidth) {\n            rowFormat.afterWidth = width;\n        }\n        if (rowFormat.gridAfterWidthType === 'Auto') {\n            rowFormat.gridAfterWidthType = 'Point';\n        }\n        if (rowFormat.gridAfterWidthType === 'Point') {\n            rowFormat.gridAfterWidth = rowFormat.afterWidth;\n        }\n        else {\n            // The value is calculated from the pixel values hence, its converted to percent using method.\n            var ownerWidth = row.ownerTable.getTableClientWidth(row.ownerTable.getOwnerWidth(true));\n            var value = row.ownerTable.convertPointToPercent(rowFormat.afterWidth, ownerWidth);\n            rowFormat.gridAfterWidth = value;\n        }\n    };\n    /**\n     * @private\n     * @returns {void}\n     */\n    TableResizer.prototype.destroy = function () {\n        this.documentHelper = undefined;\n        this.owner = undefined;\n    };\n    return TableResizer;\n}());\n\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-documenteditor/src/document-editor/implementation/editor/table-resizer.js?");

/***/ })

}]);