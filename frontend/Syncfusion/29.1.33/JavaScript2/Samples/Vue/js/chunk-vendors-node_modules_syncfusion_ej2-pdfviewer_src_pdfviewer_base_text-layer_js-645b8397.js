"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkej2_vue_samples"] = self["webpackChunkej2_vue_samples"] || []).push([["chunk-vendors-node_modules_syncfusion_ej2-pdfviewer_src_pdfviewer_base_text-layer_js-645b8397"],{

/***/ "./node_modules/@syncfusion/ej2-pdfviewer/src/pdfviewer/base/text-layer.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-pdfviewer/src/pdfviewer/base/text-layer.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TextLayer: () => (/* binding */ TextLayer)\n/* harmony export */ });\n/* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @syncfusion/ej2-base */ \"./node_modules/@syncfusion/ej2-base/index.js\");\n/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../index */ \"./node_modules/@syncfusion/ej2-pdfviewer/src/pdfviewer/index.js\");\n\n\n/**\n * TextLayer module is used to handle the text content on the control.\n *\n * @hidden\n */\nvar TextLayer = /** @class */ (function () {\n    /**\n     * @param {PdfViewer} pdfViewer - The PdfViewer.\n     * @param {PdfViewerBase} pdfViewerBase - The PdfViewerBase.\n     * @private\n     */\n    function TextLayer(pdfViewer, pdfViewerBase) {\n        this.textBoundsArray = [];\n        /**\n         * @private\n         */\n        this.characterBound = [];\n        this.pdfViewer = pdfViewer;\n        this.pdfViewerBase = pdfViewerBase;\n    }\n    /**\n     * @param {number} pageNumber - The pageNumber.\n     * @param {number} pageWidth - The pageWidth.\n     * @param {number} pageHeight - The pageHeight.\n     * @param {HTMLElement} pageDiv - The pageDiv.\n     * @returns {HTMLElement} - The HTMLElement.\n     * @private\n     */\n    TextLayer.prototype.addTextLayer = function (pageNumber, pageWidth, pageHeight, pageDiv) {\n        var textDiv = document.getElementById(this.pdfViewer.element.id + '_textLayer_' + pageNumber);\n        var textLayer;\n        if (!textDiv) {\n            textLayer = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div', { id: this.pdfViewer.element.id + '_textLayer_' + pageNumber, className: 'e-pv-text-layer' });\n            textLayer.style.width = pageWidth + 'px';\n            textLayer.style.height = pageHeight + 'px';\n            if ((_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice && !this.pdfViewer.enableDesktopMode)) {\n                textLayer.classList.add('e-pv-text-selection-none');\n            }\n            if (pageDiv) {\n                pageDiv.appendChild(textLayer);\n            }\n        }\n        this.pdfViewerBase.applyElementStyles(textLayer, pageNumber);\n        return textLayer;\n    };\n    /**\n     * @param {number} pageNumber - The pageNumber.\n     * @param {any} textContents - The textContents.\n     * @param {any} textBounds - The textBounds.\n     * @param {any} rotation - The rotation.\n     * @param {any} rtldoc - The rtldoc\n     * @returns {void}\n     * @private\n     */\n    TextLayer.prototype.renderTextContents = function (pageNumber, textContents, textBounds, rotation, rtldoc) {\n        var textLayer = document.getElementById(this.pdfViewer.element.id + '_textLayer_' + pageNumber);\n        var canvasElement = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('canvas');\n        var isRTLText;\n        if (this.pdfViewerBase.clientSideRendering) {\n            isRTLText = false;\n        }\n        var linebounds = [];\n        var lineContent = [];\n        var yValue;\n        var heightValue;\n        if (textBounds.length > 1) {\n            if (textBounds[0].Width === 0 && textBounds.length > 2) {\n                yValue = textBounds[1].Y;\n                heightValue = textBounds[1].Height;\n            }\n            else {\n                yValue = textBounds[0].Y;\n                heightValue = textBounds[0].Height;\n            }\n        }\n        var idNumber = 0;\n        if (canvasElement && textLayer && textLayer.childNodes.length === 0) {\n            for (var i = 0; i < textContents.length; i++) {\n                if ((!(textContents[parseInt(i.toString(), 10)].includes('\\r\\n')) && !(textContents[parseInt(i.toString(), 10)].includes('\\u0002'))) && i !== textBounds.length - 1 && rotation === 0 && !rtldoc) {\n                    linebounds.push(textBounds[parseInt(i.toString(), 10)]);\n                    lineContent.push(textContents[parseInt(i.toString(), 10)]);\n                    if (yValue > textBounds[parseInt(i.toString(), 10)].Y && textBounds[parseInt(i.toString(), 10)].Width !== 0) {\n                        yValue = textBounds[parseInt(i.toString(), 10)].Y;\n                    }\n                    if (heightValue < textBounds[parseInt(i.toString(), 10)].Height && textBounds[parseInt(i.toString(), 10)].Width !== 0) {\n                        heightValue = textBounds[parseInt(i.toString(), 10)].Height;\n                    }\n                }\n                else {\n                    linebounds.push(textBounds[parseInt(i.toString(), 10)]);\n                    lineContent.push(textContents[parseInt(i.toString(), 10)]);\n                    if (yValue > textBounds[parseInt(i.toString(), 10)].Y && textBounds[parseInt(i.toString(), 10)].Width !== 0) {\n                        yValue = textBounds[parseInt(i.toString(), 10)].Y;\n                    }\n                    if (heightValue < textBounds[parseInt(i.toString(), 10)].Height && textBounds[parseInt(i.toString(), 10)].Width !== 0) {\n                        heightValue = textBounds[parseInt(i.toString(), 10)].Height;\n                    }\n                    for (var j = 0; j < linebounds.length; j++) {\n                        var bounds = linebounds[parseInt(j.toString(), 10)];\n                        var textDiv = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div', { id: this.pdfViewer.element.id + '_text_' + pageNumber + '_' + idNumber, className: 'e-pv-text', attrs: { 'tabindex': '-1' } });\n                        var textContent = lineContent[parseInt(j.toString(), 10)];\n                        if (textContent === ' ' && j !== linebounds.length - 1 && j !== 0) {\n                            bounds.Height = linebounds[j - 1].Height;\n                            bounds.Y = linebounds[j - 1].Y;\n                        }\n                        textDiv.textContent = textContent.replace(/&nbsp;/g, ' ');\n                        var newLine = lineContent[parseInt(j.toString(), 10)].replace(/  +/g, ' ');\n                        if (newLine !== ' ') {\n                            textDiv.style.whiteSpace = 'pre';\n                        }\n                        if (this.pdfViewerBase.clientSideRendering) {\n                            if (textContent === ' ') {\n                                textDiv.style.whiteSpace = 'pre';\n                            }\n                            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(textDiv.textContent) && textContent !== ' ') {\n                                isRTLText = this.pdfViewerBase.checkIsRtlText(textDiv.textContent);\n                                textDiv.style.direction = isRTLText ? 'rtl' : 'ltr';\n                            }\n                            else {\n                                textDiv.style.direction = isRTLText ? 'rtl' : 'ltr';\n                            }\n                        }\n                        if (bounds.Width === 0 && j !== linebounds.length - 1 && j !== 0) {\n                            if (linebounds[j + 1].X - (linebounds[j - 1].X + linebounds[j - 1].Width) < 30 && (!lineContent[j - 1].includes('\\r\\n') && !(textContents[parseInt(j.toString(), 10)].includes('\\u0002')))) {\n                                bounds.Width = linebounds[j + 1].X - (linebounds[j - 1].X + linebounds[j - 1].Width);\n                                bounds.X = linebounds[j - 1].X + linebounds[j - 1].Width;\n                                if (bounds.Width < 0) {\n                                    bounds.Width = 0;\n                                }\n                                else {\n                                    textDiv.style.whiteSpace = 'pre';\n                                }\n                            }\n                        }\n                        if ((j !== 0 || linebounds.length - 1 === 0 || (bounds.Y - yValue) > 20 && bounds.Width !== 0) && idNumber !== 0 && ((textBounds[idNumber - 1].Y - textBounds[parseInt(idNumber.toString(), 10)].Y) > 11 || ((textBounds[parseInt(idNumber.toString(), 10)].Y - textBounds[idNumber - 1].Y) > 11)) && lineContent[parseInt(j.toString(), 10)] !== ' ') {\n                            yValue = linebounds[parseInt(j.toString(), 10)].Y;\n                            heightValue = linebounds[parseInt(j.toString(), 10)].Height;\n                        }\n                        if (bounds) {\n                            if (bounds.Rotation !== 270) {\n                                bounds.Y = yValue;\n                                bounds.Height = heightValue;\n                            }\n                            this.setStyleToTextDiv(textDiv, bounds.X, bounds.Y, bounds.Bottom, bounds.Width, bounds.Height, bounds.Rotation);\n                        }\n                        this.setTextElementProperties(textDiv);\n                        var context = canvasElement.getContext('2d');\n                        context.font = textDiv.style.fontSize + ' ' + textDiv.style.fontFamily;\n                        var contextWidth = context.measureText(lineContent[parseInt(j.toString(), 10)].replace(/(\\r\\n|\\n|\\r)/gm, '')).width;\n                        if (bounds) {\n                            var scale = void 0;\n                            if (bounds.Rotation === 90 || (this.pdfViewerBase.clientSideRendering && bounds.Rotation === 270)) {\n                                scale = bounds.Height * this.pdfViewerBase.getZoomFactor() / contextWidth;\n                            }\n                            else {\n                                scale = bounds.Width * this.pdfViewerBase.getZoomFactor() / contextWidth;\n                            }\n                            this.applyTextRotation(scale, textDiv, rotation, bounds.Rotation, bounds);\n                        }\n                        textLayer.appendChild(textDiv);\n                        // EJ2-855106- Optimize performance by eliminating unnecessary getBoundingClientRect usage in this method.\n                        this.resizeExcessDiv(textLayer, textDiv);\n                        if (this.pdfViewer.textSelectionModule && this.pdfViewer.enableTextSelection && !this.pdfViewerBase.isTextSelectionDisabled && textDiv.className !== 'e-pdfviewer-formFields'\n                            && textDiv.className !== 'e-pdfviewer-signatureformfields' && textDiv.className !== 'e-pdfviewer-signatureformfields-signature') {\n                            textDiv.classList.add('e-pv-cursor');\n                        }\n                        if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice && !this.pdfViewer.enableDesktopMode) {\n                            textDiv.classList.add('e-enable-text-selection');\n                        }\n                        idNumber++;\n                    }\n                    linebounds = [];\n                    lineContent = [];\n                    if (i < textBounds.length - 1) {\n                        if (textBounds[i + 1].Width === 0 && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(textBounds[i + 2])) {\n                            yValue = textBounds[i + 2].Y;\n                            heightValue = textBounds[i + 2].Height;\n                        }\n                        else {\n                            yValue = textBounds[i + 1].Y;\n                            heightValue = textBounds[i + 1].Height;\n                        }\n                    }\n                }\n            }\n            this.pdfViewerBase.releaseCanvas(canvasElement);\n        }\n    };\n    /**\n     * @param {number} pageNumber -This is pageNumber\n     * @param {any} textContents - This is textContents\n     * @param {any} textBounds - This is textBounds\n     * @param {any} rotation - This is rotation\n     * @param {boolean} isTextSearch - This is isTextSearch\n     * @private\n     * @returns {void}\n     */\n    TextLayer.prototype.resizeTextContents = function (pageNumber, textContents, textBounds, rotation, isTextSearch) {\n        var textLayer = this.pdfViewerBase.getElement('_textLayer_' + pageNumber);\n        var canvasElement = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('canvas');\n        if (canvasElement) {\n            for (var i = 0; i < textLayer.childNodes.length; i++) {\n                var bounds = void 0;\n                var textDiv = this.pdfViewerBase.getElement('_text_' + pageNumber + '_' + i);\n                if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(textDiv)) {\n                    break;\n                }\n                if (textBounds) {\n                    bounds = textBounds[parseInt(i.toString(), 10)];\n                    if (bounds) {\n                        this.setStyleToTextDiv(textDiv, bounds.X, bounds.Y, bounds.Bottom, bounds.Width, bounds.Height, bounds.Rotation);\n                    }\n                }\n                this.setTextElementProperties(textDiv);\n                var context = canvasElement.getContext('2d');\n                context.font = textDiv.style.fontSize + ' ' + textDiv.style.fontFamily;\n                var contextWidth = void 0;\n                if (textContents) {\n                    var textContent = textContents[parseInt(i.toString(), 10)];\n                    if (textContent) {\n                        contextWidth = context.measureText(textContent.replace(/(\\r\\n|\\n|\\r)/gm, '')).width;\n                    }\n                }\n                else {\n                    contextWidth = context.measureText(textDiv.textContent.replace(/(\\r\\n|\\n|\\r)/gm, '')).width;\n                }\n                if (bounds) {\n                    var scale = void 0;\n                    if (bounds.Rotation === 90 || (this.pdfViewerBase.clientSideRendering && bounds.Rotation === 270)) {\n                        scale = bounds.Height * this.pdfViewerBase.getZoomFactor() / contextWidth;\n                    }\n                    else {\n                        scale = bounds.Width * this.pdfViewerBase.getZoomFactor() / contextWidth;\n                    }\n                    this.applyTextRotation(scale, textDiv, rotation, bounds.Rotation, bounds);\n                }\n                // EJ2-855106- Optimize performance by eliminating unnecessary getBoundingClientRect usage in this method.\n                this.resizeExcessDiv(textLayer, textDiv);\n            }\n            this.pdfViewerBase.releaseCanvas(canvasElement);\n        }\n        else {\n            textLayer.parentElement.removeChild(textLayer);\n        }\n        if (this.pdfViewer.textSearch) {\n            if (!isTextSearch) {\n                this.pdfViewer.textSearch.resizeSearchElements(pageNumber);\n            }\n        }\n    };\n    TextLayer.prototype.applyTextRotation = function (scale, textDiv, rotation, textRotation, bounds) {\n        var scaleString = 'scaleX(' + scale + ')';\n        if (this.pdfViewerBase.clientSideRendering) {\n            if (rotation === 0) {\n                if (textRotation === 0) {\n                    textDiv.style.transform = scaleString;\n                }\n                else if (textRotation === 90) {\n                    textDiv.style.left = (bounds.X + bounds.Width) * this.pdfViewerBase.getZoomFactor() + 'px';\n                    textDiv.style.top = bounds.Y * this.pdfViewerBase.getZoomFactor() + 'px';\n                    textDiv.style.transform = 'rotate(' + textRotation + 'deg) ' + scaleString;\n                }\n                else if (textRotation === 180) {\n                    textDiv.style.left = (bounds.X + bounds.Width) * this.pdfViewerBase.getZoomFactor() + 'px';\n                    textDiv.style.top = (bounds.Y + bounds.Height) * this.pdfViewerBase.getZoomFactor() + 'px';\n                    textDiv.style.transform = 'rotate(' + textRotation + 'deg) ' + scaleString;\n                }\n                else if (textRotation === 270) {\n                    textDiv.style.left = bounds.X * this.pdfViewerBase.getZoomFactor() + 'px';\n                    textDiv.style.top = (bounds.Y + bounds.Height) * this.pdfViewerBase.getZoomFactor() + 'px';\n                    textDiv.style.transform = 'rotate(' + textRotation + 'deg) ' + scaleString;\n                }\n                else {\n                    textDiv.style.transform = scaleString;\n                }\n            }\n            else if (rotation === 1) {\n                var textRotationAngle = textRotation + 90;\n                if (textRotationAngle >= 360) {\n                    textRotationAngle -= 360;\n                }\n                if (textRotation === 0) {\n                    textDiv.style.transform = 'rotate(90deg) ' + scaleString;\n                }\n                else if (textRotation === 90) {\n                    textDiv.style.left = bounds.X * this.pdfViewerBase.getZoomFactor() + 'px';\n                    textDiv.style.top = (bounds.Y + bounds.Width) * this.pdfViewerBase.getZoomFactor() + 'px';\n                    textDiv.style.transform = 'rotate(' + textRotationAngle + 'deg) ' + scaleString;\n                }\n                else if (textRotation === 180) {\n                    textDiv.style.left = (bounds.X - bounds.Height) * this.pdfViewerBase.getZoomFactor() + 'px';\n                    textDiv.style.top = (bounds.Y + bounds.Width) * this.pdfViewerBase.getZoomFactor() + 'px';\n                    textDiv.style.transform = 'rotate(' + textRotationAngle + 'deg) ' + scaleString;\n                }\n                else if (textRotation === 270) {\n                    textDiv.style.left = (bounds.X - bounds.Height) * this.pdfViewerBase.getZoomFactor() + 'px';\n                    textDiv.style.top = (bounds.Y) * this.pdfViewerBase.getZoomFactor() + 'px';\n                    textDiv.style.transform = 'rotate(' + textRotationAngle + 'deg) ' + scaleString;\n                }\n                else {\n                    textDiv.style.transform = 'rotate(90deg) ' + scaleString;\n                }\n            }\n            else if (rotation === 2) {\n                var textRotationAngle = textRotation + 180;\n                if (textRotationAngle >= 360) {\n                    textRotationAngle -= 360;\n                }\n                if (textRotation === 0) {\n                    textDiv.style.transform = 'rotate(180deg) ' + scaleString;\n                }\n                else if (textRotation === 90) {\n                    textDiv.style.left = (bounds.X - bounds.Width) * this.pdfViewerBase.getZoomFactor() + 'px';\n                    textDiv.style.top = bounds.Y * this.pdfViewerBase.getZoomFactor() + 'px';\n                    textDiv.style.transform = 'rotate(' + (textRotationAngle) + 'deg) ' + scaleString;\n                }\n                else if (textRotation === 180) {\n                    textDiv.style.left = (bounds.X - bounds.Width) * this.pdfViewerBase.getZoomFactor() + 'px';\n                    textDiv.style.top = (bounds.Y - bounds.Height) * this.pdfViewerBase.getZoomFactor() + 'px';\n                    textDiv.style.transform = 'rotate(' + (textRotationAngle) + 'deg) ' + scaleString;\n                }\n                else if (textRotation === 270) {\n                    textDiv.style.left = bounds.X * this.pdfViewerBase.getZoomFactor() + 'px';\n                    textDiv.style.top = (bounds.Y - bounds.Height) * this.pdfViewerBase.getZoomFactor() + 'px';\n                    textDiv.style.transform = 'rotate(' + (textRotationAngle) + 'deg) ' + scaleString;\n                }\n                else {\n                    textDiv.style.transform = 'rotate(180deg) ' + scaleString;\n                }\n            }\n            else if (rotation === 3) {\n                var textRotationAngle = textRotation + 270;\n                if (textRotationAngle >= 360) {\n                    textRotationAngle -= 360;\n                }\n                if (textRotation === 0) {\n                    textDiv.style.transform = 'rotate(270deg) ' + scaleString;\n                }\n                else if (textRotation === 90) {\n                    textDiv.style.left = bounds.X * this.pdfViewerBase.getZoomFactor() + 'px';\n                    textDiv.style.top = (bounds.Y - bounds.Width) * this.pdfViewerBase.getZoomFactor() + 'px';\n                    textDiv.style.transform = 'rotate(' + (textRotationAngle) + 'deg) ' + scaleString;\n                }\n                else if (textRotation === 180) {\n                    textDiv.style.left = (bounds.X + bounds.Height) * this.pdfViewerBase.getZoomFactor() + 'px';\n                    textDiv.style.top = (bounds.Y - bounds.Width) * this.pdfViewerBase.getZoomFactor() + 'px';\n                    textDiv.style.transform = 'rotate(' + (textRotationAngle) + 'deg) ' + scaleString;\n                }\n                else if (textRotation === 270) {\n                    textDiv.style.left = (bounds.X + bounds.Height) * this.pdfViewerBase.getZoomFactor() + 'px';\n                    textDiv.style.top = (bounds.Y) * this.pdfViewerBase.getZoomFactor() + 'px';\n                    textDiv.style.transform = 'rotate(' + (textRotationAngle) + 'deg) ' + scaleString;\n                }\n                else {\n                    textDiv.style.transform = 'rotate(270deg) ' + scaleString;\n                }\n            }\n        }\n        else {\n            if (rotation === 0) {\n                if ((textRotation >= 0 && textRotation < 90)) {\n                    textDiv.style.transform = scaleString;\n                }\n                else if ((textRotation === 90) || (textRotation === 270)) {\n                    if ((textRotation === 270)) {\n                        textDiv.style.left = (bounds.X * this.pdfViewerBase.getZoomFactor()) + 'px';\n                        textDiv.style.top = ((bounds.Y + bounds.Width) * this.pdfViewerBase.getZoomFactor()) + 'px';\n                        textDiv.style.height = (bounds.Height * this.pdfViewerBase.getZoomFactor()) + 'px';\n                        textDiv.style.fontSize = (bounds.Height * this.pdfViewerBase.getZoomFactor()) + 'px';\n                    }\n                    else {\n                        textDiv.style.left = ((bounds.X + bounds.Width) * this.pdfViewerBase.getZoomFactor()) + 'px';\n                        textDiv.style.top = (bounds.Y * this.pdfViewerBase.getZoomFactor()) + 'px';\n                        textDiv.style.height = (bounds.Width * this.pdfViewerBase.getZoomFactor()) + 'px';\n                        textDiv.style.fontSize = (bounds.Width * this.pdfViewerBase.getZoomFactor()) + 'px';\n                        textDiv.style.transformOrigin = '0% 0%';\n                    }\n                    textDiv.style.transform = 'rotate(' + textRotation + 'deg) ' + scaleString;\n                }\n                else {\n                    textDiv.style.transform = 'rotate(' + textRotation + 'deg) ' + scaleString;\n                }\n            }\n            else if (rotation === 1) {\n                if (textRotation === 0) {\n                    textDiv.style.transform = 'rotate(90deg) ' + scaleString;\n                }\n                else if (textRotation === -90) {\n                    textDiv.style.transform = scaleString;\n                }\n                else {\n                    textRotation = textRotation + 90;\n                    textDiv.style.transform = 'rotate(' + textRotation + 'deg) ' + scaleString;\n                }\n            }\n            else if (rotation === 2) {\n                if (textRotation === 0) {\n                    textDiv.style.transform = 'rotate(180deg) ' + scaleString;\n                }\n                else if (textRotation === 180) {\n                    textDiv.style.transform = scaleString;\n                }\n                else {\n                    textDiv.style.transform = 'rotate(' + textRotation + 'deg) ' + scaleString;\n                }\n            }\n            else if (rotation === 3) {\n                if (textRotation === 0) {\n                    textDiv.style.transform = 'rotate(-90deg) ' + scaleString;\n                }\n                else if (textRotation === 90) {\n                    textDiv.style.transform = scaleString;\n                }\n                else {\n                    textDiv.style.transform = 'rotate(' + textRotation + 'deg) ' + scaleString;\n                }\n            }\n        }\n    };\n    TextLayer.prototype.setTextElementProperties = function (textDiv) {\n        textDiv.style.fontFamily = 'serif';\n        textDiv.style.transformOrigin = this.pdfViewerBase.clientSideRendering ? '0% 0%' : '0%';\n    };\n    /**\n     * @param {number} pageNumber - The pageNumber.\n     * @returns {void}\n     * @private\n     */\n    TextLayer.prototype.resizeTextContentsOnZoom = function (pageNumber) {\n        var renderObject = _index__WEBPACK_IMPORTED_MODULE_1__.PdfViewerBase.sessionStorageManager.getItem(this.pdfViewerBase.getDocumentId() + '_' + pageNumber + '_' + this.getPreviousZoomFactor());\n        var textBounds = [];\n        var textContents = [];\n        var rotation;\n        if (renderObject) {\n            var data = JSON.parse(renderObject);\n            textBounds = data['textBounds'];\n            textContents = data['textContent'];\n            rotation = data['rotation'];\n        }\n        if (textBounds.length !== 0) {\n            this.textBoundsArray.push({ pageNumber: pageNumber, textBounds: textBounds });\n            this.resizeTextContents(pageNumber, textContents, textBounds, rotation);\n        }\n        else {\n            var textElements = this.textBoundsArray.filter(function (obj) {\n                return obj.pageNumber === pageNumber;\n            });\n            if (textElements) {\n                if (textElements.length !== 0) {\n                    textBounds = textElements[0]['textBounds'];\n                    this.resizeTextContents(pageNumber, null, textBounds, rotation);\n                }\n            }\n        }\n    };\n    /**\n     * EJ2-855106- Optimize performance by eliminating unnecessary getBoundingClientRect usage in this method.\n     *\n     * @param {HTMLElement} textLayer - This is textLayer\n     * @param {HTMLElement} textDiv - This is textDiv\n     * @returns {void}\n     */\n    TextLayer.prototype.resizeExcessDiv = function (textLayer, textDiv) {\n        // EJ2-855106- Optimize performance by eliminating unnecessary getBoundingClientRect usage in this method.\n        // const textLayerPosition: ClientRect = textLayer.getBoundingClientRect();\n        // const textDivPosition: ClientRect = textDiv.getBoundingClientRect();\n        //\n        // if ((textDivPosition.width + textDivPosition.left) >= (textLayerPosition.width + textLayerPosition.left) || (textDivPosition.width > textLayerPosition.width)) {\n        //     // 'auto' width is set to reset the size of the div to its contents.\n        //     textDiv.style.width = 'auto';\n        //     // Client width gets reset by 'auto' width property which has the width of the content.\n        //     textDiv.style.width = textDiv.clientWidth + 'px';\n        // }\n    };\n    /**\n     * @private\n     * @param {boolean} isPinchZoomed - The isPinchZoomed.\n     * @returns {void}\n     */\n    TextLayer.prototype.clearTextLayers = function (isPinchZoomed) {\n        var lowerPageValue = this.pdfViewerBase.currentPageNumber - 3;\n        lowerPageValue = (lowerPageValue > 0) ? lowerPageValue : 0;\n        var higherPageValue = this.pdfViewerBase.currentPageNumber + 1;\n        higherPageValue = (higherPageValue < this.pdfViewerBase.pageCount) ? higherPageValue : (this.pdfViewerBase.pageCount - 1);\n        var textLayers = document.querySelectorAll('div[id*=\"' + this.pdfViewer.element.id + '_textLayer_\"]');\n        for (var i = 0; i < textLayers.length; i++) {\n            textLayers[parseInt(i.toString(), 10)].style.display = 'block';\n            if (this.pdfViewerBase.getMagnified() && (this.getTextSelectionStatus() || this.getTextSearchStatus())) {\n                var pageNumber = parseInt(textLayers[parseInt(i.toString(), 10)].id.split('_textLayer_')[1], 10);\n                if (!(((lowerPageValue + 1) <= pageNumber) && (pageNumber <= (higherPageValue - 1)))) {\n                    this.removeElement(textLayers[parseInt(i.toString(), 10)], isPinchZoomed);\n                }\n            }\n            else if (this.pdfViewerBase.getPinchZoomed()) {\n                this.removeElement(textLayers[parseInt(i.toString(), 10)], isPinchZoomed);\n            }\n            else {\n                this.removeElement(textLayers[parseInt(i.toString(), 10)], isPinchZoomed);\n            }\n        }\n    };\n    TextLayer.prototype.removeElement = function (element, isPinchZoomed) {\n        if (isPinchZoomed) {\n            this.removeForeignObjects(element);\n        }\n        else {\n            if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isIE) {\n                if (element.parentElement) {\n                    element.parentElement.removeChild(element);\n                }\n                else if (element.parentNode) {\n                    element.parentNode.removeChild(element);\n                }\n            }\n            else {\n                element.remove();\n            }\n        }\n    };\n    TextLayer.prototype.removeForeignObjects = function (element) {\n        var childElements = element.getElementsByClassName('foreign-object');\n        if (childElements) {\n            for (var i = 0; i < childElements.length; i++) {\n                var child = childElements[parseInt(i.toString(), 10)];\n                var parent_1 = child.parentElement;\n                if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice) {\n                    if (parent_1.classList.contains('e-pv-text-layer') && parent_1.className !== 'e-pv-checkbox-outer-div') {\n                        element.removeChild(child);\n                        i--;\n                    }\n                    else if (parent_1.className === 'e-pv-checkbox-outer-div') {\n                        var outerDivParent = document.getElementById(child.id);\n                        if (outerDivParent) {\n                            outerDivParent.remove();\n                            i--;\n                        }\n                    }\n                }\n                else if (parent_1.className === 'e-pv-text-layer') {\n                    element.removeChild(child);\n                    i--;\n                }\n            }\n        }\n    };\n    /**\n     * @param {number} pageNumber - This is pageNumber\n     * @param {number} divId - This is divId\n     * @param {number} fromOffset - This is fromoffset\n     * @param {number} toOffset - This is toOffset\n     * @param {string} textString - This is textString\n     * @param {string} className - This is className\n     * @param {boolean} isRTLText - This is isRTLText\n     * @private\n     * @returns {void}\n     */\n    TextLayer.prototype.convertToSpan = function (pageNumber, divId, fromOffset, toOffset, textString, className, isRTLText) {\n        var textDiv = this.pdfViewerBase.getElement('_text_' + pageNumber + '_' + divId);\n        var textContent = textString.substring(fromOffset, toOffset);\n        var node = document.createTextNode(textContent);\n        if (className) {\n            var spanElement = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('span');\n            spanElement.className = className + ' e-pv-text';\n            if (this.pdfViewerBase.clientSideRendering && isRTLText) {\n                if (toOffset === textString.length) {\n                    spanElement.style.left = 0 + 'px';\n                    spanElement.style.top = 0 + 'px';\n                }\n                else {\n                    if (textDiv.style.direction === 'rtl') {\n                        var currentText = textDiv.textContent;\n                        textDiv.textContent = textString.substring(toOffset, textString.length);\n                        var textBounds = textDiv.getBoundingClientRect();\n                        spanElement.style.left = textBounds.width + 'px';\n                        spanElement.style.top = 0 + 'px';\n                        textDiv.textContent = currentText;\n                    }\n                }\n            }\n            spanElement.style.height = textDiv.style.height;\n            spanElement.appendChild(node);\n            textDiv.appendChild(spanElement);\n        }\n        else {\n            textDiv.appendChild(node);\n        }\n    };\n    /**\n     * @param {number} startPage - This is startPage\n     * @param {number} endPage - This is endPage\n     * @param {number} anchorOffsetDiv - This is anchorOffsetDiv\n     * @param {number} focusOffsetDiv - This is focusOffsetDiv\n     * @param {number} anchorOffset - This is anchorOffset\n     * @param {number} focusOffset - This is focusOffset\n     * @private\n     * @returns {void}\n     */\n    TextLayer.prototype.applySpanForSelection = function (startPage, endPage, anchorOffsetDiv, focusOffsetDiv, anchorOffset, focusOffset) {\n        if (this.pdfViewer.textSelectionModule) {\n            for (var i = startPage; i <= endPage; i++) {\n                var isRTLText = void 0;\n                if (this.pdfViewerBase.clientSideRendering) {\n                    var storedData = JSON.parse(this.pdfViewerBase.pageTextDetails[this.pdfViewerBase.documentId + '_' + i + '_textDetails']);\n                    var pageText = storedData['pageText'];\n                    isRTLText = this.pdfViewerBase.checkIsRtlText(pageText);\n                }\n                var startId = void 0;\n                var endId = void 0;\n                var textDivs = this.pdfViewerBase.getElement('_textLayer_' + i).childNodes;\n                if (i === startPage) {\n                    startId = anchorOffsetDiv;\n                    endId = textDivs.length - 1;\n                }\n                else if (i === endPage) {\n                    startId = 0;\n                    endId = focusOffsetDiv;\n                }\n                else {\n                    startId = 0;\n                    endId = textDivs.length - 1;\n                }\n                if (startPage === endPage) {\n                    startId = anchorOffsetDiv;\n                    endId = focusOffsetDiv;\n                }\n                for (var j = startId; j <= endId; j++) {\n                    var textDiv = this.pdfViewerBase.getElement('_text_' + i + '_' + j);\n                    var initId = void 0;\n                    var lastId = void 0;\n                    var length_1 = void 0;\n                    if (textDiv && textDiv.textContent) {\n                        length_1 = textDiv.textContent.length;\n                        var textContent = textDiv.textContent;\n                        textDiv.textContent = '';\n                        if (j === startId) {\n                            if (i === startPage) {\n                                initId = anchorOffset;\n                            }\n                            else {\n                                initId = 0;\n                            }\n                            lastId = length_1;\n                            this.convertToSpan(i, j, 0, initId, textContent, null, isRTLText);\n                        }\n                        else if (j === endId && i === endPage) {\n                            initId = 0;\n                            lastId = focusOffset;\n                        }\n                        else {\n                            initId = 0;\n                            lastId = length_1;\n                        }\n                        if (startId === endId && startPage === endPage) {\n                            initId = anchorOffset;\n                            lastId = focusOffset;\n                        }\n                        this.convertToSpan(i, j, initId, lastId, textContent, 'e-pv-maintaincontent', isRTLText);\n                        if (j === endId && i === endPage) {\n                            this.convertToSpan(i, j, lastId, textContent.length, textContent, null, isRTLText);\n                        }\n                    }\n                }\n            }\n        }\n    };\n    /**\n     * @private\n     * @returns {void}\n     */\n    TextLayer.prototype.clearDivSelection = function () {\n        var textLayers = document.querySelectorAll('div[id*=\"' + this.pdfViewer.element.id + '_textLayer_\"]');\n        for (var i = 0; i < textLayers.length; i++) {\n            var childNodes = textLayers[parseInt(i.toString(), 10)].childNodes;\n            for (var j = 0; j < childNodes.length; j++) {\n                var textDiv = childNodes[parseInt(j.toString(), 10)];\n                if (textDiv.className !== 'e-pdfviewer-formFields' && textDiv.className !== 'e-pdfviewer-signatureformfields' && textDiv.className !== 'e-pdfviewer-signatureformfields-signature') {\n                    var textContent = textDiv.textContent;\n                    if (textDiv.childNodes.length > 1 || textDiv.childNodes.length === 1 && (textDiv.childNodes[0].tagName === 'SPAN')) {\n                        textDiv.textContent = '';\n                        textDiv.textContent = textContent;\n                    }\n                }\n            }\n        }\n    };\n    TextLayer.prototype.setStyleToTextDiv = function (textDiv, left, top, bottom, width, height, rotation) {\n        textDiv.style.left = left * this.pdfViewerBase.getZoomFactor() + 'px';\n        textDiv.style.top = top * this.pdfViewerBase.getZoomFactor() + 'px';\n        var textHeight;\n        if (rotation === 90 || (this.pdfViewerBase.clientSideRendering && rotation === 270)) {\n            textHeight = width * this.pdfViewerBase.getZoomFactor();\n        }\n        else {\n            textHeight = height * this.pdfViewerBase.getZoomFactor();\n        }\n        textDiv.style.height = textHeight + 'px';\n        textDiv.style.fontSize = textHeight + 'px';\n    };\n    TextLayer.prototype.getTextSelectionStatus = function () {\n        if (this.pdfViewer.textSelectionModule) {\n            return this.pdfViewer.textSelectionModule.isTextSelection;\n        }\n        else {\n            return false;\n        }\n    };\n    /**\n     * @param {boolean} isAdd - The isAdd.\n     * @returns {void}\n     * @private\n     */\n    TextLayer.prototype.modifyTextCursor = function (isAdd) {\n        var textLayerList = document.querySelectorAll('div[id*=\"' + this.pdfViewer.element.id + '_textLayer_\"]');\n        for (var i = 0; i < textLayerList.length; i++) {\n            var childNodes = textLayerList[parseInt(i.toString(), 10)].childNodes;\n            for (var j = 0; j < childNodes.length; j++) {\n                var textElement = childNodes[parseInt(j.toString(), 10)];\n                if (isAdd && textElement.className !== 'e-pdfviewer-formFields' && textElement.className !== 'e-pdfviewer-signatureformfields' && textElement.className !== 'e-pdfviewer-signatureformfields-signature') {\n                    textElement.classList.add('e-pv-cursor');\n                }\n                else {\n                    textElement.classList.remove('e-pv-cursor');\n                }\n            }\n        }\n    };\n    /**\n     * @param {Selection} selection - The Selection.\n     * @returns {boolean} - Returns true or false.\n     * @private\n     */\n    TextLayer.prototype.isBackWardSelection = function (selection) {\n        var position = selection.anchorNode.compareDocumentPosition(selection.focusNode);\n        var backward = false;\n        if (!position && selection.anchorOffset > selection.focusOffset || position === Node.DOCUMENT_POSITION_PRECEDING) {\n            backward = true;\n        }\n        return backward;\n    };\n    /**\n     * @param {Node} element - The element.\n     * @returns {number} - Returns number.\n     * @private\n     */\n    TextLayer.prototype.getPageIndex = function (element) {\n        var pageId;\n        var parentElement = element.parentElement;\n        if (!parentElement) {\n            parentElement = element.parentNode;\n        }\n        if (parentElement.className === 'e-pv-text-layer') {\n            pageId = parseInt(element.id.split('_text_')[1], 10);\n        }\n        else {\n            pageId = parseInt(parentElement.id.split('_text_')[1], 10);\n        }\n        return pageId;\n    };\n    /**\n     * @param {Node} element - The element.\n     * @param {number} pageIndex - The pageIndex.\n     * @returns {number} - Returns number.\n     * @private\n     */\n    TextLayer.prototype.getTextIndex = function (element, pageIndex) {\n        var textIndex;\n        var parentElement = element.parentElement;\n        if (!parentElement) {\n            parentElement = element.parentNode;\n        }\n        if (parentElement.className === 'e-pv-text-layer') {\n            textIndex = parseInt(element.id.split('_text_' + pageIndex + '_')[1], 10);\n        }\n        else {\n            textIndex = parseInt(parentElement.id.split('_text_' + pageIndex + '_')[1], 10);\n        }\n        return textIndex;\n    };\n    TextLayer.prototype.getPreviousZoomFactor = function () {\n        if (this.pdfViewer.magnificationModule) {\n            return this.pdfViewer.magnificationModule.previousZoomFactor;\n        }\n        else {\n            return 1;\n        }\n    };\n    /**\n     * @private\n     * @returns {boolean} - Returns true or false.\n     */\n    TextLayer.prototype.getTextSearchStatus = function () {\n        if (this.pdfViewer.textSearchModule) {\n            return this.pdfViewer.textSearchModule.isTextSearch;\n        }\n        else {\n            return false;\n        }\n    };\n    return TextLayer;\n}());\n\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-pdfviewer/src/pdfviewer/base/text-layer.js?");

/***/ })

}]);