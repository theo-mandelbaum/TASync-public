"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkej2_vue_samples"] = self["webpackChunkej2_vue_samples"] || []).push([["chunk-vendors-node_modules_syncfusion_ej2-pivotview_src_common_popups_grouping_js-2c081da4"],{

/***/ "./node_modules/@syncfusion/ej2-pivotview/src/common/popups/grouping.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-pivotview/src/common/popups/grouping.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Grouping: () => (/* binding */ Grouping)\n/* harmony export */ });\n/* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @syncfusion/ej2-base */ \"./node_modules/@syncfusion/ej2-base/index.js\");\n/* harmony import */ var _base_css_constant__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../base/css-constant */ \"./node_modules/@syncfusion/ej2-pivotview/src/common/base/css-constant.js\");\n/* harmony import */ var _syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @syncfusion/ej2-popups */ \"./node_modules/@syncfusion/ej2-popups/index.js\");\n/* harmony import */ var _syncfusion_ej2_inputs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @syncfusion/ej2-inputs */ \"./node_modules/@syncfusion/ej2-inputs/index.js\");\n/* harmony import */ var _syncfusion_ej2_dropdowns__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @syncfusion/ej2-dropdowns */ \"./node_modules/@syncfusion/ej2-dropdowns/index.js\");\n/* harmony import */ var _base_util__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../base/util */ \"./node_modules/@syncfusion/ej2-pivotview/src/base/util.js\");\n/* harmony import */ var _base_export_util__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../base/export-util */ \"./node_modules/@syncfusion/ej2-pivotview/src/base/export-util.js\");\n/* harmony import */ var _syncfusion_ej2_buttons__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @syncfusion/ej2-buttons */ \"./node_modules/@syncfusion/ej2-buttons/index.js\");\n/* harmony import */ var _syncfusion_ej2_calendars__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @syncfusion/ej2-calendars */ \"./node_modules/@syncfusion/ej2-calendars/index.js\");\n/* harmony import */ var _common_base_constant__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../common/base/constant */ \"./node_modules/@syncfusion/ej2-pivotview/src/common/base/constant.js\");\n\n\n\n\n\n\n\n\n\n\n/**\n * `Grouping` module to create grouping option for date, number and custom in popup.\n */\n/** @hidden */\nvar Grouping = /** @class */ (function () {\n    /**\n     * Constructor for the group UI rendering.\n     *\n     * @param {PivotView} parent - Instance.\n     * @hidden\n     */\n    function Grouping(parent) {\n        this.dateGroup = /_date_group_years|_date_group_quarters|_date_group_quarterYear|_date_group_months|_date_group_days|_date_group_hours|_date_group_minutes|_date_group_seconds/g;\n        this.parent = parent;\n        this.parent.groupingModule = this;\n        this.addEventListener();\n    }\n    /**\n     * For internal use only - Get the module name.\n     *\n     * @returns {string} - string\n     * @private\n     */\n    Grouping.prototype.getModuleName = function () {\n        return 'grouping';\n    };\n    Grouping.prototype.render = function (args) {\n        var target = args.target;\n        var option = args.option;\n        var parentElement = args.parentElement;\n        var selectedCellsInfo = [];\n        this.parentElement = parentElement;\n        this.isUpdate = false;\n        var colIndex = parseInt(target.getAttribute('aria-colindex'), 10) - 1;\n        var rowIndex = Number(target.getAttribute('index'));\n        var cell = this.parent.engineModule.pivotValues[rowIndex][colIndex];\n        var fieldName = cell.valueSort.axis.toString();\n        selectedCellsInfo = this.getSelectedCells(cell.axis, fieldName, cell.actualText.toString());\n        selectedCellsInfo.push({ axis: cell.axis, fieldName: fieldName, name: cell.actualText.toString(), cellInfo: cell });\n        if (option.replace(parentElement.id, '').indexOf('_custom_group') !== -1) {\n            this.createGroupSettings(fieldName, selectedCellsInfo);\n        }\n        else {\n            this.updateUnGroupSettings(fieldName, selectedCellsInfo);\n        }\n    };\n    /**\n     * Returns the selected members/headers by checing the valid members from the pivot table.\n     *\n     * @function getSelectedOptions\n     * @param  {SelectedCellsInfo[]} selectedCellsInfo - Get the members name from the given selected cells information\n     * @returns {string[]} - string\n     * @hidden\n     */\n    Grouping.prototype.getSelectedOptions = function (selectedCellsInfo) {\n        var selectedOptions = [];\n        for (var _i = 0, selectedCellsInfo_1 = selectedCellsInfo; _i < selectedCellsInfo_1.length; _i++) {\n            var option = selectedCellsInfo_1[_i];\n            if (_base_util__WEBPACK_IMPORTED_MODULE_5__.PivotUtil.inArray(option.name, selectedOptions) === -1) {\n                selectedOptions.push(option.name);\n            }\n        }\n        return selectedOptions;\n    };\n    Grouping.prototype.createGroupSettings = function (fieldName, selectedCellsInfo) {\n        var fieldList = this.parent.engineModule.fieldList[fieldName];\n        var group = this.getGroupSettings(fieldName);\n        if (selectedCellsInfo.length > 0) {\n            var type = void 0;\n            var isInvalid = false;\n            if (fieldList.isCustomField) {\n                if (!group) {\n                    var dateGroup = this.getGroupSettings(fieldName.replace(this.dateGroup, ''));\n                    var customGroup = this.getGroupSettings(fieldName.replace(/_custom_group/g, ''));\n                    if (dateGroup) {\n                        isInvalid = false;\n                        type = 'date';\n                        fieldName = fieldName.replace(this.dateGroup, '');\n                    }\n                    else if (customGroup) {\n                        isInvalid = selectedCellsInfo.length === 1;\n                        type = 'custom';\n                    }\n                }\n                else if (group && group.type === 'Custom') {\n                    if (selectedCellsInfo.length === 1) {\n                        isInvalid = true;\n                    }\n                    else {\n                        isInvalid = false;\n                        type = 'custom';\n                    }\n                }\n                else if (group && group.type === 'Number') {\n                    isInvalid = false;\n                    type = 'number';\n                }\n            }\n            else {\n                if (group) {\n                    if (group.type === 'Number' || group.type === 'Date') {\n                        isInvalid = false;\n                        type = group.type === 'Date' ? 'date' : 'number';\n                    }\n                    else if (group.type === 'Custom') {\n                        isInvalid = selectedCellsInfo.length === 1;\n                        type = 'custom';\n                    }\n                }\n                else {\n                    if (fieldList.type === 'number' ||\n                        (['datetime', 'date']).indexOf(fieldList.type) !== -1 || this.isDateType(fieldName)) {\n                        isInvalid = false;\n                        type = (selectedCellsInfo.length === 1 ? ((['datetime', 'date']).indexOf(fieldList.type) !== -1 ||\n                            this.isDateType(fieldName)) ? 'date' : 'number' : 'custom');\n                    }\n                    else if (fieldList.type === 'string') {\n                        isInvalid = selectedCellsInfo.length === 1;\n                        type = 'custom';\n                    }\n                }\n            }\n            if (isInvalid) {\n                this.parent.pivotCommon.errorDialog.createErrorDialog(this.parent.localeObj.getConstant('warning'), this.parent.localeObj.getConstant('invalidSelection'));\n                this.parent.grid.clearSelection();\n            }\n            else if (type && type !== '') {\n                this.createGroupDialog(fieldName, type, selectedCellsInfo);\n            }\n        }\n    };\n    Grouping.prototype.updateUnGroupSettings = function (fieldName, selectedCellsInfo) {\n        var fieldList = this.parent.engineModule.fieldList[fieldName];\n        var groupFields = _base_util__WEBPACK_IMPORTED_MODULE_5__.PivotUtil.cloneGroupSettings(this.parent.dataSourceSettings.groupSettings);\n        var group = this.getGroupSettings(fieldName);\n        if (selectedCellsInfo.length > 0) {\n            var type = void 0;\n            if (fieldList.isCustomField) {\n                if (!group) {\n                    var dateGroup = this.getGroupSettings(fieldName.replace(this.dateGroup, ''));\n                    var customGroup = this.getGroupSettings(fieldName.replace(/_custom_group/g, ''));\n                    if (dateGroup) {\n                        type = 'date';\n                        fieldName = fieldName.replace(this.dateGroup, '');\n                    }\n                    else if (customGroup) {\n                        type = 'custom';\n                    }\n                }\n                else if (group.type === 'Custom') {\n                    type = 'custom';\n                }\n            }\n            else {\n                if (group) {\n                    if (group.type === 'Number' || group.type === 'Date') {\n                        type = group.type === 'Date' ? 'date' : 'number';\n                    }\n                }\n            }\n            if (type === 'date' || type === 'number') {\n                groupFields = this.validateSettings(fieldName, groupFields, type, []);\n            }\n            else if (type === 'custom') {\n                var selectedOptions = this.getSelectedOptions(selectedCellsInfo);\n                groupFields = this.validateSettings(fieldName, groupFields, type, selectedOptions);\n            }\n            this.updateDateSource(groupFields, type);\n        }\n    };\n    Grouping.prototype.updateDateSource = function (groupFields, type) {\n        if (this.isUpdate) {\n            this.parent.setProperties({ dataSourceSettings: { groupSettings: groupFields } }, true);\n            this.parent.updateGroupingReport(groupFields, (type === 'date' ? 'Date' : type === 'custom' ? 'Custom' : 'Number'));\n            if (this.parent.dataSourceSettings.mode === 'Server') {\n                this.parent.getEngine('onRefresh');\n            }\n            else {\n                this.parent.initEngine();\n            }\n        }\n    };\n    Grouping.prototype.removeGroupSettings = function (fieldName, selectedOptions, groupFields, groupNames) {\n        var index = groupNames.indexOf(fieldName);\n        if (index !== -1) {\n            var field = groupFields[index];\n            for (var j = 0, len = field.customGroups.length; j < len; j++) {\n                if (field.customGroups[j]) {\n                    var group = field.customGroups[j];\n                    if (_base_util__WEBPACK_IMPORTED_MODULE_5__.PivotUtil.inArray(group.groupName, selectedOptions) !== -1) {\n                        groupFields = this.modifyParentGroupItems(fieldName, groupFields, [group.groupName], group.items, groupNames);\n                        field.customGroups.splice(j, 1);\n                        this.isUpdate = true;\n                        j--;\n                        len--;\n                    }\n                }\n            }\n        }\n        delete this.parent.engineModule.groupingFieldsInfo[fieldName];\n        return groupFields;\n    };\n    Grouping.prototype.getGroupSettings = function (fieldName) {\n        for (var _i = 0, _a = this.parent.dataSourceSettings.groupSettings; _i < _a.length; _i++) {\n            var group = _a[_i];\n            if (group.name === fieldName) {\n                return group;\n            }\n        }\n        return undefined;\n    };\n    Grouping.prototype.isDateType = function (fieldName) {\n        for (var _i = 0, _a = this.parent.dataSourceSettings.formatSettings; _i < _a.length; _i++) {\n            var format = _a[_i];\n            if (format.name === fieldName && format.type) {\n                return true;\n            }\n        }\n        return false;\n    };\n    /**\n     * Returns the selected members/headers by checing the valid members from the pivot table.\n     *\n     * @function getSelectedCells\n     * @param  {string} axis - Spicifies the axis name for the given field.\n     * @param  {string} fieldName - Gets selected members for the given field name.\n     * @param  {string} name - specifies the selected member name for the given field.\n     * @returns {SelectedCellsInfo[]} - return type\n     * @hidden\n     */\n    Grouping.prototype.getSelectedCells = function (axis, fieldName, name) {\n        var selectedCellsInfo = [];\n        var selectedElements = this.parent.element.querySelectorAll('.' + _base_css_constant__WEBPACK_IMPORTED_MODULE_1__.CELL_SELECTED_BGCOLOR + ',.' + _base_css_constant__WEBPACK_IMPORTED_MODULE_1__.SELECTED_BGCOLOR);\n        for (var i = 0; i < selectedElements.length; i++) {\n            var element = selectedElements[i];\n            var colIndex = parseInt(element.getAttribute('aria-colindex'), 10) - 1;\n            var rowIndex = Number(element.getAttribute('index'));\n            var cell = this.parent.engineModule.pivotValues[rowIndex][colIndex];\n            if (cell && (cell.axis === axis) && !(cell.type === 'grand sum' || cell.type === 'sum') &&\n                cell.valueSort.axis === fieldName && name !== cell.actualText.toString()) {\n                selectedCellsInfo.push({\n                    axis: cell.axis,\n                    fieldName: cell.valueSort.axis.toString(),\n                    name: cell.actualText.toString(),\n                    cellInfo: cell\n                });\n            }\n        }\n        return selectedCellsInfo;\n    };\n    Grouping.prototype.createGroupDialog = function (fieldName, type, selectedCellsInfo) {\n        var groupDialogElement = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div', {\n            id: this.parentElement.id + '_GroupDialog',\n            className: 'e-group-field-settings',\n            attrs: { 'data-field': fieldName, 'data-type': type }\n        });\n        this.parentElement.appendChild(groupDialogElement);\n        var groupDialog = new _syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_2__.Dialog({\n            animationSettings: { effect: 'Fade' },\n            allowDragging: true,\n            header: this.parent.localeObj.getConstant('grouping'),\n            content: this.createGroupOptions(fieldName, type),\n            isModal: true,\n            visible: true,\n            showCloseIcon: true,\n            enableRtl: this.parent.enableRtl,\n            locale: this.parent.locale,\n            enableHtmlSanitizer: this.parent.enableHtmlSanitizer,\n            width: 300,\n            height: 'auto',\n            position: { X: 'center', Y: 'center' },\n            buttons: [\n                {\n                    click: this.updateGroupSettings.bind(this, selectedCellsInfo),\n                    isFlat: false,\n                    buttonModel: { cssClass: _base_css_constant__WEBPACK_IMPORTED_MODULE_1__.OK_BUTTON_CLASS + (this.parent.cssClass ? (' ' + this.parent.cssClass) : ''), content: this.parent.localeObj.getConstant('ok'), isPrimary: true }\n                },\n                {\n                    click: function () {\n                        groupDialog.hide();\n                    },\n                    isFlat: false,\n                    buttonModel: { cssClass: _base_css_constant__WEBPACK_IMPORTED_MODULE_1__.CANCEL_BUTTON_CLASS + (this.parent.cssClass ? (' ' + this.parent.cssClass) : ''), content: this.parent.localeObj.getConstant('cancel') }\n                }\n            ],\n            closeOnEscape: true,\n            close: this.removeDialog.bind(this),\n            target: this.parentElement,\n            cssClass: this.parent.cssClass\n        });\n        groupDialog.isStringTemplate = true;\n        groupDialog.appendTo(groupDialogElement);\n    };\n    Grouping.prototype.createGroupOptions = function (fieldName, type) {\n        var _this = this;\n        var groupInstance = this;\n        var mainDiv = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div', {\n            className: 'e-group-field-div-content', id: this.parentElement.id + '_group_field_div_content',\n            attrs: { 'data-fieldName': fieldName, 'data-type': type }\n        });\n        var groupWrapperDiv1 = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div', { className: 'e-group-option-container' });\n        mainDiv.appendChild(groupWrapperDiv1);\n        // this.parentElement.appendChild(mainDiv);\n        var dataSource = this.parent.dataSourceSettings;\n        var groupField = _base_util__WEBPACK_IMPORTED_MODULE_5__.PivotUtil.getFieldByName(fieldName, dataSource.groupSettings);\n        switch (type) {\n            case 'custom':\n                {\n                    var caption = void 0;\n                    var dataFields = dataSource.rows;\n                    dataFields = dataFields.concat(dataSource.columns, dataSource.values, dataSource.filters);\n                    var actualField = _base_util__WEBPACK_IMPORTED_MODULE_5__.PivotUtil.getFieldByName(fieldName.replace(/_custom_group/g, ''), dataFields);\n                    if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(actualField) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.parent.clonedReport)) {\n                        var clonedReport = this.parent.clonedReport;\n                        var clonedDataFields = clonedReport.rows;\n                        clonedDataFields = clonedDataFields.concat(clonedReport.columns, clonedReport.values, clonedReport.filters);\n                        actualField = _base_util__WEBPACK_IMPORTED_MODULE_5__.PivotUtil.getFieldByName(fieldName.replace(/_custom_group/g, ''), clonedDataFields);\n                    }\n                    var currentField = _base_util__WEBPACK_IMPORTED_MODULE_5__.PivotUtil.getFieldByName(fieldName, dataFields);\n                    var nextField = _base_util__WEBPACK_IMPORTED_MODULE_5__.PivotUtil.getFieldByName(fieldName + '_custom_group', dataFields);\n                    if (currentField) {\n                        var newFieldName = fieldName + '_custom_group';\n                        caption = nextField ? nextField.caption :\n                            this.parent.engineModule.fieldList[actualField.name].caption + (newFieldName.match(/_custom_group/g).length + 1);\n                    }\n                    var captionInputTextDiv1 = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div', {\n                        className: 'e-caption-option-text'\n                    });\n                    captionInputTextDiv1.innerText = this.parent.localeObj.getConstant('groupFieldCaption');\n                    var captionInputDiv1 = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div', { className: 'e-group-caption-container' });\n                    var captionInputField1 = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('input', {\n                        id: this.parentElement.id + 'group_caption_option',\n                        className: 'e-group-caption-text',\n                        attrs: { 'type': 'text' }\n                    });\n                    captionInputDiv1.appendChild(captionInputTextDiv1);\n                    captionInputDiv1.appendChild(captionInputField1);\n                    groupWrapperDiv1.appendChild(captionInputDiv1);\n                    var inputTextDiv1 = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div', {\n                        className: 'e-input-option-text'\n                    });\n                    inputTextDiv1.innerText = this.parent.localeObj.getConstant('groupTitle');\n                    var inputDiv1 = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div', { className: 'e-group-input-container' });\n                    var inputField1 = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('input', {\n                        id: this.parentElement.id + 'group_input_option',\n                        className: 'e-group-input-text',\n                        attrs: { 'type': 'text' }\n                    });\n                    inputDiv1.appendChild(inputTextDiv1);\n                    inputDiv1.appendChild(inputField1);\n                    groupWrapperDiv1.appendChild(inputDiv1);\n                    var captionInputObj1 = new _syncfusion_ej2_inputs__WEBPACK_IMPORTED_MODULE_3__.MaskedTextBox({\n                        placeholder: this.parent.localeObj.getConstant('captionName'),\n                        enableRtl: this.parent.enableRtl,\n                        locale: this.parent.locale,\n                        value: caption, width: '100%',\n                        cssClass: this.parent.cssClass\n                    });\n                    captionInputObj1.isStringTemplate = true;\n                    captionInputObj1.appendTo(captionInputField1);\n                    var inputObj1 = new _syncfusion_ej2_inputs__WEBPACK_IMPORTED_MODULE_3__.MaskedTextBox({\n                        placeholder: this.parent.localeObj.getConstant('groupName'),\n                        enableRtl: this.parent.enableRtl,\n                        locale: this.parent.locale,\n                        width: '100%',\n                        cssClass: this.parent.cssClass\n                    });\n                    inputObj1.isStringTemplate = true;\n                    inputObj1.appendTo(inputField1);\n                }\n                break;\n            case 'date':\n            case 'number':\n                {\n                    var startAtWrapper = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div', {\n                        className: 'e-group-start-option-container'\n                    });\n                    var startAtOptionDiv1 = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('input', {\n                        id: this.parentElement.id + 'group_start_option',\n                        className: 'e-group_start_option',\n                        attrs: { 'type': 'checkbox' }\n                    });\n                    var startAtInputField1 = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('input', {\n                        id: this.parentElement.id + 'group_start_input',\n                        className: 'e-group_start_input',\n                        attrs: { 'type': 'text' }\n                    });\n                    startAtWrapper.appendChild(startAtOptionDiv1);\n                    startAtWrapper.appendChild(startAtInputField1);\n                    groupWrapperDiv1.appendChild(startAtWrapper);\n                    var endAtWrapper = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div', {\n                        className: 'e-group-end-option-container'\n                    });\n                    var endAtOptionDiv1 = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('input', {\n                        id: this.parentElement.id + 'group_end_option',\n                        className: 'e-group_end_option',\n                        attrs: { 'type': 'checkbox' }\n                    });\n                    var endAtInputField1 = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('input', {\n                        id: this.parentElement.id + 'group_end_input',\n                        className: 'e-group_end_input',\n                        attrs: { 'type': 'text' }\n                    });\n                    endAtWrapper.appendChild(endAtOptionDiv1);\n                    endAtWrapper.appendChild(endAtInputField1);\n                    groupWrapperDiv1.appendChild(endAtWrapper);\n                    var intervalWrapper = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div', {\n                        className: 'e-group-interval-option-container'\n                    });\n                    var intervalTextDiv1 = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div', {\n                        className: 'e-group-inerval-option-text'\n                    });\n                    intervalTextDiv1.innerText = this.parent.localeObj.getConstant('groupBy');\n                    var intervalInputField1 = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('input', {\n                        id: this.parentElement.id + 'group_interval_input',\n                        className: 'e-group_interval_input',\n                        attrs: { 'type': 'text' }\n                    });\n                    intervalWrapper.appendChild(intervalTextDiv1);\n                    intervalWrapper.appendChild(intervalInputField1);\n                    groupWrapperDiv1.appendChild(intervalWrapper);\n                    var startAt = undefined;\n                    var endAt = undefined;\n                    if (type === 'date') {\n                        var selectedGroups = [];\n                        var groupData = [\n                            { value: 'Seconds', text: this.parent.localeObj.getConstant('Seconds') },\n                            { value: 'Minutes', text: this.parent.localeObj.getConstant('Minutes') },\n                            { value: 'Hours', text: this.parent.localeObj.getConstant('Hours') },\n                            { value: 'Days', text: this.parent.localeObj.getConstant('Days') },\n                            { value: 'Months', text: this.parent.localeObj.getConstant('Months') },\n                            { value: 'QuarterYear', text: this.parent.localeObj.getConstant('QuarterYear') },\n                            { value: 'Quarters', text: this.parent.localeObj.getConstant('Quarters') },\n                            { value: 'Years', text: this.parent.localeObj.getConstant('Years') }\n                        ];\n                        if (groupField && groupField.type === 'Date') {\n                            selectedGroups = groupField.groupInterval;\n                            startAt = groupField.startingAt ? groupField.startingAt.toString() : undefined;\n                            endAt = groupField.endingAt ? groupField.endingAt.toString() : undefined;\n                        }\n                        else {\n                            selectedGroups = ['Months'];\n                        }\n                        var startAtInputObj = new _syncfusion_ej2_calendars__WEBPACK_IMPORTED_MODULE_8__.DateTimePicker({\n                            placeholder: this.parent.localeObj.getConstant('chooseDate'),\n                            enableRtl: this.parent.enableRtl,\n                            locale: this.parent.locale,\n                            format: 'dd/MM/yyyy hh:mm:ss a',\n                            enabled: !(startAt === undefined),\n                            width: '100%',\n                            cssClass: this.parent.cssClass\n                        });\n                        startAtInputObj.isStringTemplate = true;\n                        startAtInputObj.appendTo(startAtInputField1);\n                        var endAtInputObj = new _syncfusion_ej2_calendars__WEBPACK_IMPORTED_MODULE_8__.DateTimePicker({\n                            placeholder: this.parent.localeObj.getConstant('chooseDate'),\n                            enableRtl: this.parent.enableRtl,\n                            locale: this.parent.locale,\n                            format: 'dd/MM/yyyy hh:mm:ss a',\n                            enabled: !(endAt === undefined),\n                            width: '100%',\n                            cssClass: this.parent.cssClass\n                        });\n                        endAtInputObj.isStringTemplate = true;\n                        endAtInputObj.appendTo(endAtInputField1);\n                        _syncfusion_ej2_dropdowns__WEBPACK_IMPORTED_MODULE_4__.MultiSelect.Inject(_syncfusion_ej2_dropdowns__WEBPACK_IMPORTED_MODULE_4__.CheckBoxSelection);\n                        var intervalObj_1 = new _syncfusion_ej2_dropdowns__WEBPACK_IMPORTED_MODULE_4__.MultiSelect({\n                            dataSource: groupData,\n                            value: selectedGroups,\n                            fields: { text: 'text', value: 'value' },\n                            mode: 'CheckBox',\n                            showDropDownIcon: true,\n                            enableSelectionOrder: false,\n                            placeholder: this.parent.localeObj.getConstant('selectGroup'),\n                            filterBarPlaceholder: this.parent.localeObj.getConstant('example') + ' ' + this.parent.localeObj.getConstant('Months'),\n                            enableRtl: this.parent.enableRtl,\n                            locale: this.parent.locale,\n                            enableHtmlSanitizer: this.parent.enableHtmlSanitizer,\n                            cssClass: this.parent.cssClass,\n                            select: function () {\n                                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getInstance)((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('#' + groupInstance.parentElement.id + '_GroupDialog', document), _syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_2__.Dialog).element.querySelector('.' + _base_css_constant__WEBPACK_IMPORTED_MODULE_1__.OK_BUTTON_CLASS).removeAttribute('disabled');\n                            },\n                            removed: function () {\n                                var nodeList = intervalObj_1['liCollections'];\n                                var activeListCount = 0;\n                                nodeList.forEach(function (item) {\n                                    if (item.classList.contains('e-active')) {\n                                        activeListCount++;\n                                    }\n                                });\n                                if (activeListCount === 0) {\n                                    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getInstance)((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('#' + groupInstance.parentElement.id + '_GroupDialog', document), _syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_2__.Dialog).element.querySelector('.' + _base_css_constant__WEBPACK_IMPORTED_MODULE_1__.OK_BUTTON_CLASS).setAttribute('disabled', 'disabled');\n                                }\n                            }\n                        });\n                        intervalObj_1.isStringTemplate = true;\n                        intervalObj_1.appendTo(intervalInputField1);\n                        startAtInputObj.value = startAt === undefined ? null : new Date(startAt);\n                        startAtInputObj.dataBind();\n                        endAtInputObj.value = endAt === undefined ? null : new Date(endAt);\n                        endAtInputObj.dataBind();\n                    }\n                    else {\n                        var selectedInterval = undefined;\n                        if (groupField && groupField.type === 'Number') {\n                            selectedInterval = groupField.rangeInterval;\n                            startAt = groupField.startingAt ? groupField.startingAt.toString() : undefined;\n                            endAt = groupField.endingAt ? groupField.endingAt.toString() : undefined;\n                        }\n                        else {\n                            selectedInterval = 2;\n                        }\n                        var startAtInputObj = new _syncfusion_ej2_inputs__WEBPACK_IMPORTED_MODULE_3__.NumericTextBox({\n                            placeholder: this.parent.localeObj.getConstant('enterValue'),\n                            enableRtl: this.parent.enableRtl,\n                            locale: this.parent.locale,\n                            showClearButton: true,\n                            format: '###.##########',\n                            value: startAt === undefined ? undefined : parseFloat(startAt),\n                            enabled: !(startAt === undefined),\n                            width: '100%',\n                            cssClass: this.parent.cssClass\n                        });\n                        startAtInputObj.isStringTemplate = true;\n                        startAtInputObj.appendTo(startAtInputField1);\n                        var endAtInputObj = new _syncfusion_ej2_inputs__WEBPACK_IMPORTED_MODULE_3__.NumericTextBox({\n                            placeholder: this.parent.localeObj.getConstant('enterValue'),\n                            enableRtl: this.parent.enableRtl,\n                            locale: this.parent.locale,\n                            showClearButton: true,\n                            format: '###.##########',\n                            value: endAt === undefined ? undefined : parseFloat(endAt),\n                            enabled: !(endAt === undefined),\n                            width: '100%',\n                            cssClass: this.parent.cssClass\n                        });\n                        endAtInputObj.isStringTemplate = true;\n                        endAtInputObj.appendTo(endAtInputField1);\n                        var intervalObj = new _syncfusion_ej2_inputs__WEBPACK_IMPORTED_MODULE_3__.NumericTextBox({\n                            placeholder: this.parent.localeObj.getConstant('enterValue'),\n                            enableRtl: this.parent.enableRtl,\n                            locale: this.parent.locale,\n                            showClearButton: true,\n                            format: '###.##########',\n                            min: 0,\n                            value: selectedInterval,\n                            width: '100%',\n                            cssClass: this.parent.cssClass\n                        });\n                        intervalObj.isStringTemplate = true;\n                        intervalObj.appendTo(intervalInputField1);\n                    }\n                    var startAtObj = new _syncfusion_ej2_buttons__WEBPACK_IMPORTED_MODULE_7__.CheckBox({\n                        label: this.parent.localeObj.getConstant('startAt'),\n                        checked: !(startAt === undefined),\n                        enableRtl: this.parent.enableRtl,\n                        locale: this.parent.locale,\n                        enableHtmlSanitizer: this.parent.enableHtmlSanitizer,\n                        cssClass: this.parent.cssClass,\n                        change: function (args) {\n                            var startAtObj = (type === 'date' ?\n                                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getInstance)((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('#' + _this.parentElement.id + 'group_start_input'), _syncfusion_ej2_calendars__WEBPACK_IMPORTED_MODULE_8__.DateTimePicker) :\n                                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getInstance)((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('#' + _this.parentElement.id + 'group_start_input'), _syncfusion_ej2_inputs__WEBPACK_IMPORTED_MODULE_3__.NumericTextBox));\n                            startAtObj.enabled = args.checked;\n                            startAtObj.dataBind();\n                        }\n                    });\n                    startAtObj.isStringTemplate = true;\n                    startAtObj.appendTo(startAtOptionDiv1);\n                    var endAtObj = new _syncfusion_ej2_buttons__WEBPACK_IMPORTED_MODULE_7__.CheckBox({\n                        label: this.parent.localeObj.getConstant('endAt'),\n                        checked: !(endAt === undefined),\n                        enableRtl: this.parent.enableRtl,\n                        locale: this.parent.locale,\n                        enableHtmlSanitizer: this.parent.enableHtmlSanitizer,\n                        cssClass: this.parent.cssClass,\n                        change: function (args) {\n                            var endAtObj = (type === 'date' ?\n                                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getInstance)((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('#' + _this.parentElement.id + 'group_end_input'), _syncfusion_ej2_calendars__WEBPACK_IMPORTED_MODULE_8__.DateTimePicker) :\n                                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getInstance)((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('#' + _this.parentElement.id + 'group_end_input'), _syncfusion_ej2_inputs__WEBPACK_IMPORTED_MODULE_3__.NumericTextBox));\n                            endAtObj.enabled = args.checked;\n                            endAtObj.dataBind();\n                        }\n                    });\n                    endAtObj.isStringTemplate = true;\n                    endAtObj.appendTo(endAtOptionDiv1);\n                }\n                break;\n        }\n        return mainDiv;\n    };\n    Grouping.prototype.updateGroupSettings = function (selectedCellsInfo) {\n        var groupDialog = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getInstance)((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('#' + this.parentElement.id + '_GroupDialog', document), _syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_2__.Dialog);\n        var dialogElement = groupDialog.element;\n        var groupType = dialogElement.getAttribute('data-type');\n        var fieldName = dialogElement.getAttribute('data-field');\n        var groupFields = _base_util__WEBPACK_IMPORTED_MODULE_5__.PivotUtil.cloneGroupSettings(this.parent.dataSourceSettings.groupSettings);\n        if (groupFields.length === 0 && !this.parent.clonedDataSet && !this.parent.clonedReport) {\n            var dataSet = this.parent.engineModule.data;\n            this.parent.clonedDataSet = this.parent.dataSourceSettings.type === 'CSV' ? _base_util__WEBPACK_IMPORTED_MODULE_5__.PivotUtil.getClonedCSVData(dataSet) : _base_util__WEBPACK_IMPORTED_MODULE_5__.PivotUtil.getClonedData(dataSet);\n            this.parent.setProperties({ dataSourceSettings: { dataSource: [] } }, true);\n            this.parent.clonedReport = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)({}, this.parent.dataSourceSettings, null, true);\n            this.parent.setProperties({ dataSourceSettings: { dataSource: dataSet } }, true);\n        }\n        if (groupType === 'custom') {\n            var inputInstance = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getInstance)((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('#' + this.parentElement.id + 'group_input_option'), _syncfusion_ej2_inputs__WEBPACK_IMPORTED_MODULE_3__.MaskedTextBox);\n            var captionInputInstance = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getInstance)((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('#' + this.parentElement.id + 'group_caption_option'), _syncfusion_ej2_inputs__WEBPACK_IMPORTED_MODULE_3__.MaskedTextBox);\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([inputInstance.element], _base_css_constant__WEBPACK_IMPORTED_MODULE_1__.EMPTY_FIELD);\n            if (inputInstance.value === null || inputInstance.value === '') {\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([inputInstance.element], _base_css_constant__WEBPACK_IMPORTED_MODULE_1__.EMPTY_FIELD);\n                inputInstance.element.focus();\n                return;\n            }\n            var selectedOptions = this.getSelectedOptions(selectedCellsInfo);\n            var customGroup = { groupName: inputInstance.value, items: selectedOptions };\n            var splicedItems = [];\n            var newItems = [];\n            var field = { name: fieldName, caption: captionInputInstance.value, type: 'Custom', customGroups: [] };\n            var isUpdated = false;\n            for (var i = 0, len = groupFields.length; i < len; i++) {\n                if (groupFields[i].name === fieldName) {\n                    field = groupFields[i];\n                    field.caption = captionInputInstance.value;\n                    for (var j = 0, len_1 = field.customGroups.length; j < len_1; j++) {\n                        if (field.customGroups[j]) {\n                            var group = field.customGroups[j];\n                            if (group.items && _base_export_util__WEBPACK_IMPORTED_MODULE_6__.PivotExportUtil.isContainCommonElements(group.items, selectedOptions)) {\n                                splicedItems = this.mergeArray(splicedItems, [group.groupName]);\n                                newItems = this.mergeArray(newItems, group.items);\n                                field.customGroups.splice(j, 1);\n                                j--;\n                                len_1--;\n                            }\n                        }\n                    }\n                    for (var _i = 0, selectedOptions_1 = selectedOptions; _i < selectedOptions_1.length; _i++) {\n                        var item = selectedOptions_1[_i];\n                        var index = newItems.indexOf(item);\n                        if (index !== -1) {\n                            newItems.splice(index, 1);\n                        }\n                    }\n                    newItems = this.mergeArray(newItems, [customGroup.groupName]);\n                    field.customGroups.push(customGroup);\n                    this.isUpdate = true;\n                    isUpdated = true;\n                    break;\n                }\n            }\n            if (!isUpdated) {\n                field.customGroups.push(customGroup);\n                this.isUpdate = true;\n                groupFields.push(field);\n            }\n            groupFields = this.validateSettings(fieldName, groupFields, groupType, (splicedItems.length === 0 ?\n                customGroup.items : splicedItems), newItems);\n        }\n        else if (groupType === 'date' || groupType === 'number') {\n            var startCheckBoxInstance = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getInstance)((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('#' + this.parentElement.id + 'group_start_option'), _syncfusion_ej2_buttons__WEBPACK_IMPORTED_MODULE_7__.CheckBox);\n            var endCheckBoxInstance = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getInstance)((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('#' + this.parentElement.id + 'group_end_option'), _syncfusion_ej2_buttons__WEBPACK_IMPORTED_MODULE_7__.CheckBox);\n            var startInputInstance = (groupType === 'date' ?\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getInstance)((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('#' + this.parentElement.id + 'group_start_input'), _syncfusion_ej2_calendars__WEBPACK_IMPORTED_MODULE_8__.DateTimePicker) :\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getInstance)((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('#' + this.parentElement.id + 'group_start_input'), _syncfusion_ej2_inputs__WEBPACK_IMPORTED_MODULE_3__.NumericTextBox));\n            var endInputInstance = (groupType === 'date' ?\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getInstance)((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('#' + this.parentElement.id + 'group_end_input'), _syncfusion_ej2_calendars__WEBPACK_IMPORTED_MODULE_8__.DateTimePicker) :\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getInstance)((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('#' + this.parentElement.id + 'group_end_input'), _syncfusion_ej2_inputs__WEBPACK_IMPORTED_MODULE_3__.NumericTextBox));\n            var intervalInstance = (groupType === 'date' ?\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getInstance)((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('#' + this.parentElement.id + 'group_interval_input'), _syncfusion_ej2_dropdowns__WEBPACK_IMPORTED_MODULE_4__.MultiSelect) :\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getInstance)((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('#' + this.parentElement.id + 'group_interval_input'), _syncfusion_ej2_inputs__WEBPACK_IMPORTED_MODULE_3__.NumericTextBox));\n            var startAt = startCheckBoxInstance.checked ? startInputInstance.value.toString() : undefined;\n            var endAt = endCheckBoxInstance.checked ? endInputInstance.value.toString() : undefined;\n            var field = { name: fieldName, startingAt: startAt, endingAt: endAt };\n            if (groupType === 'date') {\n                var selectedItems = [];\n                for (var _a = 0, _b = intervalInstance.value; _a < _b.length; _a++) {\n                    var list = _b[_a];\n                    selectedItems.push(list);\n                }\n                field.type = 'Date';\n                field.groupInterval = selectedItems;\n            }\n            else {\n                field.type = 'Number';\n                field.rangeInterval = intervalInstance.value;\n            }\n            var isUpdated = false;\n            for (var i = 0, len = groupFields.length; i < len; i++) {\n                if (groupFields[i].name === fieldName) {\n                    groupFields.splice(i, 1, field);\n                    this.isUpdate = true;\n                    isUpdated = true;\n                    break;\n                }\n            }\n            if (!isUpdated) {\n                this.isUpdate = true;\n                groupFields.push(field);\n            }\n            groupFields = this.validateSettings(fieldName, groupFields, groupType, [], []);\n        }\n        groupDialog.close();\n        this.updateDateSource(groupFields, groupType);\n    };\n    Grouping.prototype.getGroupBasedSettings = function (groupFields) {\n        var groups = {};\n        for (var _i = 0, groupFields_1 = groupFields; _i < groupFields_1.length; _i++) {\n            var group = groupFields_1[_i];\n            if (groups[group.type]) {\n                groups[group.type].push(group);\n            }\n            else {\n                groups[group.type] = [group];\n            }\n        }\n        return groups;\n    };\n    Grouping.prototype.getGroupByName = function (groupFields) {\n        var customFields = {};\n        for (var _i = 0, groupFields_2 = groupFields; _i < groupFields_2.length; _i++) {\n            var field = groupFields_2[_i];\n            var name_1 = field.name.replace(/_custom_group/g, '');\n            if (customFields[name_1]) {\n                customFields[name_1].push(field);\n            }\n            else {\n                customFields[name_1] = [field];\n            }\n        }\n        return customFields;\n    };\n    Grouping.prototype.validateSettings = function (fieldName, groupFields, groupType, splicedItems, newItems) {\n        var validatedSettings = [];\n        var groups = this.getGroupBasedSettings(groupFields);\n        var groupOrders = ['Date', 'Number', 'Custom'];\n        if (groups[groupOrders[2]] && groupType === 'custom') {\n            var customFields = this.getGroupByName(groups[groupOrders[2]]);\n            if (customFields[fieldName.replace(/_custom_group/g, '')]) {\n                var customGroups = customFields[fieldName.replace(/_custom_group/g, '')];\n                var fields = customGroups.map(function (item) { return item.name; });\n                if (newItems) {\n                    customGroups = this.modifyParentGroupItems(fieldName, customGroups, splicedItems, newItems, fields);\n                }\n                else {\n                    customGroups = this.removeGroupSettings(fieldName.replace('_custom_group', ''), splicedItems, customGroups, fields);\n                }\n            }\n            var orderedGroups = [];\n            for (var _i = 0, _a = Object.keys(customFields); _i < _a.length; _i++) {\n                var field = _a[_i];\n                var fields = customFields[field].map(function (item) { return item.name; });\n                orderedGroups = this.reOrderSettings(customFields[field], fields, orderedGroups, field, fieldName);\n            }\n            groups[groupOrders[2]] = orderedGroups;\n        }\n        else if ((groupType === 'date' || groupType === 'number') && !newItems) {\n            var groupFields_3 = groupType === 'date' ? groups[groupOrders[0]] : groups[groupOrders[1]];\n            if (groupType === 'date') {\n                groups[groupOrders[0]] = groupFields_3.filter(function (field) { return field.name !== fieldName; });\n                var groupingTypes_1 = [\n                    '_date_group_years',\n                    '_date_group_quarters',\n                    '_date_group_quarterYear',\n                    '_date_group_months',\n                    '_date_group_days',\n                    '_date_group_hours',\n                    '_date_group_minutes',\n                    '_date_group_seconds'\n                ];\n                if (groups[groupOrders[0]].length === 0) {\n                    delete this.parent.engineModule.groupingFieldsInfo[fieldName];\n                    var _loop_1 = function (key) {\n                        if (groupingTypes_1.some(function (dateTypes) { return key === \"\" + fieldName + dateTypes; })) {\n                            delete this_1.parent.engineModule.groupingFieldsInfo[key];\n                        }\n                    };\n                    var this_1 = this;\n                    for (var key in this.parent.engineModule.groupingFieldsInfo) {\n                        _loop_1(key);\n                    }\n                    var _loop_2 = function (key) {\n                        if (groupingTypes_1.some(function (dateTypes) { return key === \"\" + fieldName + dateTypes; })) {\n                            delete this_2.parent.engineModule.fieldList[key];\n                        }\n                    };\n                    var this_2 = this;\n                    for (var key in this.parent.engineModule.fieldList) {\n                        _loop_2(key);\n                    }\n                    var updatedFields = this.parent.engineModule.fields.filter(function (item) {\n                        return !groupingTypes_1.some(function (dateTypes) { return item === \"\" + fieldName + dateTypes; });\n                    });\n                    this.parent.engineModule.fields = updatedFields;\n                }\n            }\n            else {\n                groups[groupOrders[1]] = groupFields_3.filter(function (field) { return field.name !== fieldName; });\n            }\n            this.isUpdate = true;\n        }\n        for (var _b = 0, groupOrders_1 = groupOrders; _b < groupOrders_1.length; _b++) {\n            var order = groupOrders_1[_b];\n            if (groups[order]) {\n                validatedSettings = validatedSettings.concat(groups[order]);\n            }\n        }\n        return validatedSettings;\n    };\n    Grouping.prototype.reOrderSettings = function (customGroups, fields, orderedSettings, fieldName, groupedFieldName) {\n        var index = fields.indexOf(fieldName);\n        if (index > -1 && customGroups[index].customGroups && customGroups[index].customGroups.length > 0) {\n            orderedSettings.push(customGroups[index]);\n            this.reOrderSettings(customGroups, fields, orderedSettings, fieldName + '_custom_group');\n        }\n        else if (index > -1 && customGroups[index].customGroups && customGroups[index].customGroups.length === 0 &&\n            !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(groupedFieldName)) {\n            delete this.parent.engineModule.fieldList[groupedFieldName];\n            delete this.parent.engineModule.groupingFieldsInfo[groupedFieldName];\n            var updatedFields = this.parent.engineModule.fields.filter(function (value) { return value !== groupedFieldName; });\n            this.parent.engineModule.fields = updatedFields;\n        }\n        return orderedSettings;\n    };\n    Grouping.prototype.modifyParentGroupItems = function (fieldName, groupFields, splicedItems, newItems, fields) {\n        var index = fields.indexOf(fieldName + '_custom_group');\n        if (index !== -1) {\n            var field = groupFields[index];\n            if (field.customGroups && field.customGroups.length > 0) {\n                for (var i = 0, len = field.customGroups.length; i < len; i++) {\n                    if (field.customGroups[i]) {\n                        var isItemsUpdated = false;\n                        var group = field.customGroups[i];\n                        if (group.items) {\n                            for (var _i = 0, splicedItems_1 = splicedItems; _i < splicedItems_1.length; _i++) {\n                                var item = splicedItems_1[_i];\n                                var pos = group.items.indexOf(item);\n                                if (pos !== -1) {\n                                    group.items.splice(pos, 1);\n                                    this.isUpdate = true;\n                                    isItemsUpdated = true;\n                                }\n                            }\n                            if (isItemsUpdated) {\n                                group.items = this.mergeArray(group.items, newItems);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return groupFields;\n    };\n    Grouping.prototype.mergeArray = function (collection1, collection2) {\n        var resultArray = [];\n        var array = collection1.concat(collection2);\n        var len = array.length;\n        var assoc = {};\n        while (len--) {\n            var item = String(array[len]);\n            if (!assoc[item]) {\n                resultArray.unshift(item);\n                assoc[item] = true;\n            }\n        }\n        return resultArray;\n    };\n    Grouping.prototype.removeDialog = function () {\n        if ((this.parent.grid && this.parent.grid.isDestroyed) || (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.parent.grid)) {\n            return;\n        }\n        this.parent.grid.clearSelection();\n        var element = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('#' + this.parent.element.id + '_GroupDialog', document);\n        var groupDialog = element ? (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getInstance)(element, _syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_2__.Dialog) : null;\n        if (groupDialog && !groupDialog.isDestroyed) {\n            groupDialog.destroy();\n        }\n        if (this.parent.element && document.getElementById(this.parent.element.id + '_GroupDialog')) {\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.remove)(document.getElementById(this.parent.element.id + '_GroupDialog'));\n        }\n    };\n    /**\n     *\n     * @returns {void}\n     * @hidden\n     */\n    Grouping.prototype.addEventListener = function () {\n        if (this.parent.isDestroyed) {\n            return;\n        }\n        this.parent.on(_common_base_constant__WEBPACK_IMPORTED_MODULE_9__.initGrouping, this.render, this); //For initial rendering\n    };\n    /**\n     *\n     * @returns {void}\n     * @hidden\n     */\n    Grouping.prototype.removeEventListener = function () {\n        if (this.parent.isDestroyed) {\n            return;\n        }\n        this.removeDialog();\n        this.parent.off(_common_base_constant__WEBPACK_IMPORTED_MODULE_9__.initGrouping, this.render);\n    };\n    /**\n     * To destroy the pivot button event listener\n     *\n     * @returns {void}\n     * @hidden\n     */\n    Grouping.prototype.destroy = function () {\n        this.removeEventListener();\n    };\n    return Grouping;\n}());\n\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-pivotview/src/common/popups/grouping.js?");

/***/ })

}]);