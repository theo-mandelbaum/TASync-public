"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkej2_vue_samples"] = self["webpackChunkej2_vue_samples"] || []).push([["chunk-vendors-node_modules_syncfusion_ej2-interactive-chat_src_chat-ui_chat-ui_js-fd2f2a24"],{

/***/ "./node_modules/@syncfusion/ej2-interactive-chat/src/chat-ui/chat-ui.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-interactive-chat/src/chat-ui/chat-ui.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ChatUI: () => (/* binding */ ChatUI),\n/* harmony export */   Message: () => (/* binding */ Message),\n/* harmony export */   MessageStatus: () => (/* binding */ MessageStatus),\n/* harmony export */   User: () => (/* binding */ User)\n/* harmony export */ });\n/* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @syncfusion/ej2-base */ \"./node_modules/@syncfusion/ej2-base/index.js\");\n/* harmony import */ var _interactive_chat_base_interactive_chat_base__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../interactive-chat-base/interactive-chat-base */ \"./node_modules/@syncfusion/ej2-interactive-chat/src/interactive-chat-base/interactive-chat-base.js\");\n/* harmony import */ var _syncfusion_ej2_navigations__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @syncfusion/ej2-navigations */ \"./node_modules/@syncfusion/ej2-navigations/index.js\");\n/* harmony import */ var _syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @syncfusion/ej2-popups */ \"./node_modules/@syncfusion/ej2-popups/index.js\");\n/* harmony import */ var _syncfusion_ej2_buttons__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @syncfusion/ej2-buttons */ \"./node_modules/@syncfusion/ej2-buttons/index.js\");\nvar __extends = (undefined && undefined.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __assign = (undefined && undefined.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n// eslint-disable-next-line @typescript-eslint/triple-slash-reference\n///<reference path='../interactive-chat-base/interactive-chat-base-model.d.ts'/>\n\n\n\n\n\n\nvar MessageStatus = /** @class */ (function (_super) {\n    __extends(MessageStatus, _super);\n    function MessageStatus() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('')\n    ], MessageStatus.prototype, \"iconCss\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('')\n    ], MessageStatus.prototype, \"text\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('')\n    ], MessageStatus.prototype, \"tooltip\", void 0);\n    return MessageStatus;\n}(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.ChildProperty));\n\n/**\n * Represents a user model for a messages in the chatUI component.\n */\nvar User = /** @class */ (function (_super) {\n    __extends(User, _super);\n    function User() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('')\n    ], User.prototype, \"id\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('Default')\n    ], User.prototype, \"user\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('')\n    ], User.prototype, \"avatarUrl\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('')\n    ], User.prototype, \"avatarBgColor\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('')\n    ], User.prototype, \"cssClass\", void 0);\n    return User;\n}(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.ChildProperty));\n\n/**\n *  Represents a model for a messages in the chatUI component.\n */\nvar Message = /** @class */ (function (_super) {\n    __extends(Message, _super);\n    function Message() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('')\n    ], Message.prototype, \"id\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('')\n    ], Message.prototype, \"text\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({}, User)\n    ], Message.prototype, \"author\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('')\n    ], Message.prototype, \"timeStamp\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('')\n    ], Message.prototype, \"timeStampFormat\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({}, MessageStatus)\n    ], Message.prototype, \"status\", void 0);\n    return Message;\n}(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.ChildProperty));\n\nvar ChatUI = /** @class */ (function (_super) {\n    __extends(ChatUI, _super);\n    /**\n     * Constructor for creating the component\n     *\n     * @param {ChatUIModel} options - Specifies the ChatUIModel model.\n     * @param {string | HTMLElement} element - Specifies the element to render as component.\n     * @private\n     */\n    function ChatUI(options, element) {\n        var _this = _super.call(this, options, element) || this;\n        _this.multiplier = 3;\n        return _this;\n    }\n    /**\n     * Initialize the event handler\n     *\n     * @private\n     * @returns {void}\n     */\n    ChatUI.prototype.preRender = function () {\n        if (!this.element.id) {\n            this.element.id = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getUniqueID)('e-' + this.getModuleName());\n        }\n    };\n    ChatUI.prototype.getDirective = function () {\n        return 'EJS-CHATUI';\n    };\n    /**\n     * To get component name.\n     *\n     * @returns {string} - It returns the current module name.\n     * @private\n     */\n    ChatUI.prototype.getModuleName = function () {\n        return 'chat-ui';\n    };\n    /**\n     * Get the properties to be maintained in the persisted state.\n     *\n     * @private\n     * @returns {string} - It returns the persisted data.\n     */\n    ChatUI.prototype.getPersistData = function () {\n        return this.addOnPersist([]);\n    };\n    ChatUI.prototype.render = function () {\n        this.renderChatUIView();\n    };\n    ChatUI.prototype.renderChatUIView = function () {\n        this.intl = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Internationalization();\n        this.setDimension(this.element, this.width, this.height);\n        this.renderViewSections(this.element, 'e-chat-header', 'e-chat-content');\n        this.viewWrapper = this.element.querySelector('.e-chat-content');\n        this.chatHeader = this.element.querySelector('.e-chat-header');\n        this.renderChatHeader();\n        this.renderChatContentElement();\n        this.renderChatSuggestionsElement();\n        this.renderChatFooterContent();\n        this.addCssClass(this.element, this.cssClass);\n        this.addRtlClass(this.element, this.enableRtl);\n        this.updateHeader(this.showHeader, this.chatHeader, this.viewWrapper);\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.messages) || this.messages.length <= 0) {\n            this.renderBannerView(this.emptyChatTemplate, this.messageWrapper, 'emptyChatTemplate');\n            this.isEmptyChatTemplateRendered = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.messageWrapper.querySelector('.e-empty-chat-template')) ? false : true;\n        }\n        this.updateTextAreaObject(this.textareaObj);\n        this.wireEvents();\n        this.renderTypingIndicator();\n        this.updateScrollPosition(false, 0);\n    };\n    ChatUI.prototype.updateScrollPosition = function (isMethodCall, timeDelay) {\n        var _this = this;\n        if (this.isReact || this.isAngular) {\n            setTimeout(function () {\n                if (isMethodCall) {\n                    _this.handleAutoScroll();\n                }\n                else {\n                    _this.scrollToBottom();\n                }\n            }, timeDelay);\n        }\n        else {\n            this.scrollToBottom();\n        }\n    };\n    ChatUI.prototype.renderChatHeader = function () {\n        if (this.headerText) {\n            var headerContainer = this.createElement('div', { className: 'e-header' });\n            if (this.headerIconCss) {\n                var iconElement = this.createElement('span', { className: \"e-header-icon e-icons \" + this.headerIconCss });\n                headerContainer.appendChild(iconElement);\n            }\n            var headerTextElement = this.createElement('div', { className: 'e-header-text' });\n            headerTextElement.innerHTML = this.headerText;\n            headerContainer.appendChild(headerTextElement);\n            this.chatHeader.appendChild(headerContainer);\n            this.renderChatHeaderToolbar(headerContainer);\n        }\n    };\n    ChatUI.prototype.renderChatHeaderToolbar = function (headerContainer) {\n        var _this = this;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.headerToolbar) && this.headerToolbar.items.length > 0) {\n            var toolbarEle = this.createElement('div', { className: 'e-chat-toolbar' });\n            /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n            var pushToolbar = this.headerToolbar.items.map(function (item) { return ({\n                type: item.type,\n                template: item.template,\n                disabled: item.disabled,\n                cssClass: item.cssClass,\n                visible: item.visible,\n                tooltipText: item.tooltip,\n                prefixIcon: item.iconCss,\n                text: item.text,\n                align: item.align\n            }); });\n            this.toolbar = new _syncfusion_ej2_navigations__WEBPACK_IMPORTED_MODULE_2__.Toolbar({\n                items: pushToolbar,\n                height: '100%',\n                enableRtl: this.enableRtl,\n                clicked: function (args) {\n                    var eventItemArgs = {\n                        type: args.item.type,\n                        text: args.item.text,\n                        iconCss: args.item.prefixIcon,\n                        cssClass: args.item.cssClass,\n                        tooltip: args.item.tooltipText,\n                        template: args.item.template,\n                        disabled: args.item.disabled,\n                        visible: args.item.visible,\n                        align: args.item.align,\n                        tabIndex: args.item.tabIndex\n                    };\n                    var eventArgs = {\n                        item: eventItemArgs,\n                        event: args.originalEvent,\n                        cancel: false\n                    };\n                    if (_this.headerToolbar.itemClicked) {\n                        _this.headerToolbar.itemClicked.call(_this, eventArgs);\n                    }\n                }\n            });\n            this.toolbar.appendTo(toolbarEle);\n            headerContainer.appendChild(toolbarEle);\n        }\n    };\n    ChatUI.prototype.updateHeaderToolbar = function () {\n        var headerContainer = this.chatHeader.querySelector('.e-header');\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.toolbar)) {\n            var pushToolbar = this.headerToolbar.items.map(function (item) { return ({\n                type: item.type,\n                template: item.template,\n                disabled: item.disabled,\n                cssClass: item.cssClass,\n                visible: item.visible,\n                tooltipText: item.tooltip,\n                prefixIcon: item.iconCss,\n                text: item.text,\n                align: item.align\n            }); });\n            this.toolbar.items = pushToolbar;\n        }\n        else {\n            this.renderChatHeaderToolbar(headerContainer);\n        }\n    };\n    ChatUI.prototype.renderChatContentElement = function () {\n        this.messageWrapper = this.createElement('div', { className: 'e-message-wrapper', attrs: { 'tabindex': '0' } });\n        this.viewWrapper.prepend(this.messageWrapper);\n        this.content = this.createElement('div', { className: 'e-typing-suggestions' });\n        this.viewWrapper.append(this.content);\n        this.renderScrollDown();\n        this.setChatMsgId();\n        this.renderMessageGroup(this.messageWrapper);\n    };\n    ChatUI.prototype.setChatMsgId = function () {\n        var _this = this;\n        if (this.messages && this.messages.length > 0) {\n            var prevOnChange = this.isProtectedOnChange;\n            this.isProtectedOnChange = true;\n            this.messages = this.messages.map(function (msg, index) {\n                return __assign({}, msg, { id: msg.id || _this.element.id + \"-message-\" + (index + 1) });\n            });\n            this.isProtectedOnChange = prevOnChange;\n        }\n    };\n    ChatUI.prototype.renderScrollDown = function () {\n        var scrollDownButton = this.createElement('button', { id: 'scrollDownButton' });\n        this.downArrowIcon = new _syncfusion_ej2_buttons__WEBPACK_IMPORTED_MODULE_4__.Fab({\n            iconCss: 'e-icons e-chat-scroll-down',\n            position: 'BottomRight',\n            target: this.content,\n            isPrimary: false\n        });\n        this.downArrowIcon.appendTo(scrollDownButton);\n    };\n    ChatUI.prototype.loadBatch = function () {\n        for (var i = this.startIndex - 1; i >= 0; i--) {\n            var currIndex = i; // To pass the actual index of the reversed item.\n            var prevIndex = i === this.messages.length - 1 ? -1 : currIndex + 1;\n            this.updateMessageTimeFormats(this.messages[parseInt(i.toString(), 10)], currIndex);\n            var currentMessageDate = this.getMessageDate(currIndex);\n            currentMessageDate.setHours(0, 0, 0, 0);\n            if (Math.min(currIndex, prevIndex) >= 0) {\n                var lastMessageDate = this.getMessageDate(prevIndex);\n                lastMessageDate.setHours(0, 0, 0, 0);\n                if (currentMessageDate.getTime() === lastMessageDate.getTime()) {\n                    var prevTimeBreak = this.messageWrapper.querySelectorAll('.e-timebreak')[0];\n                    if (prevTimeBreak) {\n                        prevTimeBreak.remove();\n                    }\n                }\n            }\n            this.renderGroup(this.messageWrapper, this.messages[parseInt(i.toString(), 10)], true, currIndex, prevIndex);\n            if (this.showTimeBreak) {\n                this.messageWrapper.prepend(this.createTimebreakElement(currentMessageDate));\n            }\n            var viewportHeight = window.innerHeight;\n            var loadHeight = viewportHeight * this.multiplier;\n            this.startIndex = i;\n            if (this.messageWrapper.scrollHeight > loadHeight) {\n                break;\n            }\n        }\n    };\n    ChatUI.prototype.renderMessageGroup = function (chatContentWrapper) {\n        var _this = this;\n        if (this.loadOnDemand) {\n            if (this.messages && this.messages.length <= 0) {\n                return;\n            }\n            (0,_syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_3__.createSpinner)({ target: this.messageWrapper });\n            this.startIndex = this.messages.length;\n            this.loadBatch();\n        }\n        else {\n            this.messages.forEach(function (msg, i) {\n                _this.renderGroup(chatContentWrapper, msg, false, i, i - 1);\n            });\n        }\n    };\n    ChatUI.prototype.isTimeBreakAdded = function (chatContentWrapper, loadOldChat) {\n        return loadOldChat ?\n            chatContentWrapper.firstElementChild.classList.contains('e-timebreak') :\n            chatContentWrapper.lastElementChild.classList.contains('e-timebreak');\n    };\n    ChatUI.prototype.getLastUser = function (prevIndex) {\n        if (prevIndex >= 0) {\n            return this.messages[parseInt(prevIndex.toString(), 10)].author.id;\n        }\n        return '';\n    };\n    ChatUI.prototype.renderGroup = function (chatContentWrapper, msg, loadOldChat, index, prevIndex) {\n        var messageGroup;\n        if (!loadOldChat) {\n            this.updateMessageTimeFormats(msg, index);\n            this.handleTimeBreak(prevIndex, index, loadOldChat);\n        }\n        if (msg.author.id === this.user.id) {\n            var hasTimeBreak = this.showTimeBreak && this.isTimeBreakAdded(chatContentWrapper, loadOldChat);\n            if ((msg.author.id !== this.getLastUser(prevIndex)) || hasTimeBreak) {\n                messageGroup = this.createElement('div', { className: \"e-message-group e-right \" + (this.messageTemplate ? 'e-message-item-template' : '') });\n                this.manageChatContent(loadOldChat, chatContentWrapper, messageGroup);\n                this.addGroupItems(msg, messageGroup, false, true, index, loadOldChat);\n            }\n            else {\n                var length_1 = this.element.querySelectorAll('.e-message-group.e-right').length;\n                messageGroup = this.element.querySelectorAll('.e-message-group.e-right')[loadOldChat ? 0 : length_1 - 1];\n                this.addGroupItems(msg, messageGroup, false, true, index, loadOldChat);\n            }\n        }\n        else {\n            if (this.getLastUser(prevIndex) !== msg.author.id || this.isTimeVaries(index, prevIndex)) {\n                messageGroup = this.createElement('div', { className: \"e-message-group e-left \" + (this.messageTemplate ? 'e-message-item-template' : '') });\n                var avatarElement = this.createAvatarIcon(msg.author, false);\n                if (!this.messageTemplate) {\n                    messageGroup.prepend(avatarElement);\n                }\n                this.manageChatContent(loadOldChat, chatContentWrapper, messageGroup);\n                if (this.loadOnDemand) {\n                    this.loadLeftGroupOnDemand(msg, loadOldChat, index, messageGroup);\n                }\n                else {\n                    this.createLeftGroupItems(messageGroup, msg, index);\n                    this.addGroupItems(msg, messageGroup, true, false, index, loadOldChat);\n                }\n            }\n            else {\n                var length_2 = this.element.querySelectorAll('.e-message-group.e-left').length;\n                messageGroup = this.element.querySelectorAll('.e-message-group.e-left')[loadOldChat ? 0 : length_2 - 1];\n                if (!loadOldChat) {\n                    this.addGroupItems(msg, messageGroup, false, false, index, loadOldChat);\n                }\n                else {\n                    this.loadLeftGroupOnDemand(msg, loadOldChat, index, messageGroup);\n                }\n            }\n        }\n    };\n    ChatUI.prototype.isTimeVaries = function (index, prevIndex) {\n        var currentMessageDate = this.getMessageDate(index);\n        currentMessageDate.setHours(0, 0, 0, 0);\n        var lastMessageDate = this.getMessageDate(prevIndex);\n        lastMessageDate.setHours(0, 0, 0, 0);\n        return currentMessageDate.getTime() !== lastMessageDate.getTime();\n    };\n    ChatUI.prototype.loadLeftGroupOnDemand = function (msg, loadOldChat, index, messageGroup) {\n        // To check if the previous author is the same as the current author. If not, create a group header.\n        var isAnyMsgPresent = this.messages[parseInt((index - 1).toString(), 10)] ? true : false;\n        var prevAuthorId = isAnyMsgPresent ? this.messages[parseInt((index - 1).toString(), 10)].author.id : '';\n        var shouldCreateHeader = prevAuthorId !== msg.author.id ? true : false;\n        if (shouldCreateHeader || this.isTimeVaries(index, index - 1)) {\n            this.addGroupItems(msg, messageGroup, true, false, index, loadOldChat);\n            this.createLeftGroupItems(messageGroup, msg, index);\n        }\n        else {\n            this.addGroupItems(msg, messageGroup, false, false, index, loadOldChat);\n        }\n    };\n    ChatUI.prototype.createLeftGroupItems = function (messageGroup, msg, index) {\n        if (this.messageTemplate) {\n            return;\n        }\n        var userHeaderContainer = this.createElement('div', {\n            className: 'e-message-header-container'\n        });\n        var userHeader = this.createElement('div', {\n            className: 'e-message-header'\n        });\n        userHeader.innerHTML = msg.author.user;\n        var timeSpan = this.getTimeStampElement(msg.timeStamp\n            ? msg.timeStamp\n            : new Date(), msg.timeStampFormat, index);\n        this.appendChildren(userHeaderContainer, userHeader, timeSpan);\n        this.insertBeforeChildren(messageGroup, userHeaderContainer);\n    };\n    ChatUI.prototype.createAvatarIcon = function (author, isTypingUser) {\n        var userName = author.user.trim();\n        var nameParts = userName.split(' ');\n        var initials = nameParts.length > 1\n            ? \"\" + nameParts[0][0] + nameParts[nameParts.length - 1][0]\n            : userName[0];\n        var avatarIcon = this.createElement((!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(author.avatarUrl) && author.avatarUrl !== '') ? 'img' : 'span', { className: \" \" + (!isTypingUser ? 'e-message-icon' : 'e-user-icon') + \" \" + author.cssClass });\n        if (author.avatarBgColor) {\n            avatarIcon.style.backgroundColor = author.avatarBgColor;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(author.avatarUrl) && author.avatarUrl !== '') {\n            avatarIcon.src = author.avatarUrl;\n            avatarIcon.alt = userName;\n        }\n        else {\n            avatarIcon.innerHTML = initials;\n        }\n        return avatarIcon;\n    };\n    ChatUI.prototype.getTimeStampElement = function (timeStamp, timeStampFormat, index) {\n        var formattedTime = this.getFormattedTime(timeStamp, timeStampFormat);\n        return this.createElement('div', {\n            className: 'e-time',\n            innerHTML: this.showTimeStamp ? formattedTime : ''\n        });\n    };\n    ChatUI.prototype.updateTimeFormats = function (timeStampFormat, fullTime, index) {\n        if (this.messages[parseInt(index.toString(), 10)]) {\n            var prevOnChange = this.isProtectedOnChange;\n            this.isProtectedOnChange = true;\n            this.messages[parseInt(index.toString(), 10)].timeStamp = this.intl.parseDate(fullTime, { format: 'dd/MM/yyyy hh:mm a' });\n            this.messages[parseInt(index.toString(), 10)].timeStampFormat = timeStampFormat;\n            this.isProtectedOnChange = prevOnChange;\n        }\n    };\n    ChatUI.prototype.getFormattedTime = function (timeStamp, timeStampFormat) {\n        timeStamp = typeof timeStamp === 'string' ? new Date(timeStamp) : timeStamp;\n        return this.intl.formatDate(timeStamp, { format: this.getFormat(timeStampFormat) });\n    };\n    ChatUI.prototype.getFormat = function (timeStampFormat) {\n        var hasValue = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(timeStampFormat) && timeStampFormat.length > 0;\n        return hasValue ? timeStampFormat\n            : (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.timeStampFormat) && this.timeStampFormat.length) ? this.timeStampFormat : 'dd/MM/yyyy hh:mm a';\n    };\n    ChatUI.prototype.addGroupItems = function (msg, messageGroup, isUserTimeStampRendered, showStatus, index, loadOldChat) {\n        var messageItem = this.createElement('div', { className: 'e-message-item', id: \"\" + msg.id });\n        var messageStatusWrapper = this.createElement('div', { className: 'e-status-wrapper' });\n        var timeSpan = this.getTimeStampElement(msg.timeStamp ? msg.timeStamp : new Date(), msg.timeStampFormat, index);\n        var textElement = this.createElement('div', {\n            className: 'e-text',\n            innerHTML: msg.text\n        });\n        if (this.messageTemplate) {\n            this.getContextObject('messageTemplate', messageGroup, index, msg);\n        }\n        else {\n            if (!isUserTimeStampRendered) {\n                messageItem.appendChild(timeSpan);\n            }\n            if (showStatus) {\n                var messageElement = this.createElement('div', { className: 'e-status-item' });\n                var statusIcon = this.createElement('span', { attrs: { class: \"e-status-icon \" + (msg.status ? msg.status.iconCss : ''), title: \"\" + (msg.status ? msg.status.tooltip : '') } });\n                var statusText = this.createElement('div', { innerHTML: msg.status ? msg.status.text : '', className: 'e-status-text' });\n                this.appendChildren(messageElement, textElement, statusIcon);\n                this.appendChildren(messageStatusWrapper, messageElement, statusText);\n                messageItem.appendChild(messageStatusWrapper);\n            }\n            else {\n                messageItem.appendChild(textElement);\n            }\n            this.manageChatContent(loadOldChat, messageGroup, messageItem);\n        }\n    };\n    ChatUI.prototype.manageChatContent = function (loadOldChat, parentItem, ChildItem) {\n        if (loadOldChat) {\n            parentItem.prepend(ChildItem);\n        }\n        else {\n            parentItem.appendChild(ChildItem);\n        }\n    };\n    ChatUI.prototype.createTimebreakElement = function (date) {\n        var timebreakDiv = this.createElement('div', { className: \"e-timebreak \" + (this.timeBreakTemplate ? 'e-timebreak-template' : '') });\n        var formattedTime = this.getFormattedTime(date, 'MMMM d, yyyy');\n        if (this.timeBreakTemplate) {\n            this.getContextObject('timeBreakTemplate', timebreakDiv, null, null, date);\n        }\n        else {\n            var timeStampEle = this.createElement('span', { className: 'e-timestamp' });\n            timeStampEle.innerHTML = formattedTime;\n            timebreakDiv.appendChild(timeStampEle);\n        }\n        return timebreakDiv;\n    };\n    ChatUI.prototype.handleTimeBreak = function (lastMsgIndex, index, loadOldChat) {\n        if (!this.showTimeBreak) {\n            return;\n        }\n        var currentMessageDate = this.getMessageDate(index);\n        currentMessageDate.setHours(0, 0, 0, 0);\n        if (lastMsgIndex === -1) {\n            this.messageWrapper.appendChild(this.createTimebreakElement(currentMessageDate));\n        }\n        else if (index > 0) {\n            var lastMessageDate = this.getMessageDate(lastMsgIndex);\n            lastMessageDate.setHours(0, 0, 0, 0);\n            if ((currentMessageDate.getTime() !== lastMessageDate.getTime()) && !loadOldChat) {\n                this.messageWrapper.appendChild(this.createTimebreakElement(currentMessageDate));\n            }\n        }\n    };\n    ChatUI.prototype.renderNewMessage = function (msg, index) {\n        if (this.isEmptyChatTemplateRendered) {\n            var introContainer = this.messageWrapper.querySelector('.e-empty-chat-template');\n            this.messageWrapper.removeChild(introContainer);\n            this.isEmptyChatTemplateRendered = false;\n        }\n        this.renderGroup(this.messageWrapper, msg, false, index, index - 1);\n    };\n    ChatUI.prototype.loadMoreMessages = function () {\n        var _this = this;\n        if (this.startIndex <= 0) {\n            return;\n        }\n        var currentScrollOffset = this.messageWrapper.scrollHeight - this.messageWrapper.scrollTop;\n        (0,_syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_3__.showSpinner)(this.messageWrapper);\n        setTimeout(function () {\n            (0,_syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_3__.hideSpinner)(_this.messageWrapper);\n            _this.loadBatch();\n            _this.messageWrapper.scrollTop = _this.messageWrapper.scrollHeight - currentScrollOffset;\n        }, 1000);\n    };\n    ChatUI.prototype.updateMessageTimeFormats = function (msg, index) {\n        var fullTime = this.getFormattedTime(msg.timeStamp\n            ? msg.timeStamp\n            : new Date(), 'dd/MM/yyyy hh:mm a');\n        this.updateTimeFormats(msg.timeStampFormat, fullTime, index);\n    };\n    ChatUI.prototype.getMessageDate = function (index) {\n        return new Date(this.messages[parseInt(index.toString(), 10)].timeStamp);\n    };\n    ChatUI.prototype.renderChatSuggestionsElement = function () {\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.suggestions) && this.suggestions.length > 0) {\n            this.renderSuggestions(this.suggestions, null, this.suggestionTemplate, 'suggestion', 'suggestionTemplate', this.onSuggestionClick);\n        }\n    };\n    ChatUI.prototype.handleSuggestionUpdate = function () {\n        if (this.suggestionsElement) {\n            this.suggestionsElement.remove();\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.suggestions) && this.suggestions.length > 0) {\n            this.renderSuggestions(this.suggestions, null, this.suggestionTemplate, 'suggestion', 'suggestionTemplate', this.onSuggestionClick);\n        }\n        this.toggleScrollIcon();\n    };\n    ChatUI.prototype.onSuggestionClick = function (e) {\n        this.suggestionsElement.hidden = true;\n        this.textareaObj.value = e.target.innerText;\n        this.onSendIconClick(e);\n    };\n    ChatUI.prototype.renderChatFooterContent = function () {\n        this.footer = this.getElement('footer');\n        var footerClass = \"e-footer \" + (this.footerTemplate ? 'e-footer-template' : '');\n        this.footer.className = footerClass;\n        this.renderChatFooter();\n        this.viewWrapper.append(this.footer);\n        this.updateFooter(this.showFooter, this.footer);\n    };\n    ChatUI.prototype.renderChatFooter = function () {\n        var _this = this;\n        this.textareaObj = this.renderFooterContent(this.footerTemplate, this.footer, '', this.placeholder, false, 'e-chat-textarea');\n        var sendIconClass = 'e-chat-send e-icons disabled';\n        if (!this.footerTemplate) {\n            this.sendIcon = this.renderSendIcon(sendIconClass, this.footer);\n        }\n        if (this.textareaObj) {\n            this.textareaObj.input = this.handleInput.bind(this);\n            this.textareaObj.blur = function (args) { return _this.triggerUserTyping(args.event, args.value); };\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.textareaObj.value)) {\n                this.activateSendIcon(this.textareaObj.value.length);\n            }\n        }\n    };\n    ChatUI.prototype.handleInput = function (args) {\n        this.triggerUserTyping(args.event, args.value);\n        this.activateSendIcon(args.value.length);\n        this.updateTextAreaObject(this.textareaObj);\n    };\n    ChatUI.prototype.triggerUserTyping = function (event, value) {\n        var eventArgs = {\n            event: event,\n            message: value,\n            user: this.user,\n            isTyping: event.type === 'blur' ? false : value.length > 0 ? true : false\n        };\n        this.trigger('userTyping', eventArgs);\n    };\n    ChatUI.prototype.renderTypingIndicator = function () {\n        var _this = this;\n        this.l10n = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.L10n('chat-ui', {\n            oneUserTyping: '{0} is typing',\n            twoUserTyping: '{0} and {1} are typing',\n            threeUserTyping: '{0}, {1}, and {2} other are typing',\n            multipleUsersTyping: '{0}, {1}, and {2} others are typing'\n        }, this.locale);\n        if (this.indicatorWrapper) {\n            this.indicatorWrapper.remove();\n        }\n        if (!this.typingUsers || this.typingUsers.length === 0) {\n            return;\n        }\n        this.indicatorWrapper = this.createElement('div', {\n            className: \"e-typing-indicator \" + (this.typingUsersTemplate ? 'e-typing-indicator-template' : '')\n        });\n        if (this.typingUsersTemplate) {\n            this.getContextObject('typingUsersTemplate', this.indicatorWrapper, null, null, null);\n        }\n        else {\n            this.typingUsers.slice(0, 3).forEach(function (user) {\n                var avatarElement = _this.createAvatarIcon(user, true);\n                _this.indicatorWrapper.appendChild(avatarElement);\n            });\n            var typingMessage = this.createElement('span', { className: 'e-user-text' });\n            this.indicatorWrapper.appendChild(typingMessage);\n            this.updateUserText();\n            var indicatorContainer = this.createElement('div', { className: 'e-indicator-wrapper' });\n            for (var i = 0; i < 3; i++) {\n                var indicator = this.createElement('span', {\n                    className: 'e-indicator'\n                });\n                this.appendChildren(indicatorContainer, indicator);\n            }\n            this.indicatorWrapper.appendChild(indicatorContainer);\n        }\n        this.content.prepend(this.indicatorWrapper);\n    };\n    ChatUI.prototype.updateUserText = function () {\n        var _this = this;\n        if (this.typingUsersTemplate) {\n            return;\n        }\n        this.l10n.setLocale(this.locale);\n        var userNames = this.typingUsers.filter(function (user) { return user.user !== _this.user.user; })\n            .map(function (user) { return user.user; });\n        var displayText = this.getTypingMessage(userNames);\n        var typingMessage = this.indicatorWrapper.querySelector('.e-user-text');\n        typingMessage.innerHTML = displayText;\n    };\n    ChatUI.prototype.getTypingMessage = function (userNames) {\n        if (userNames.length >= 3) {\n            return this.l10n.getConstant(userNames.length > 3 ? 'multipleUsersTyping' : 'threeUserTyping')\n                .replace('{0}', userNames[0].toString())\n                .replace('{1}', userNames[1].toString())\n                .replace('{2}', (userNames.length - 2).toString());\n        }\n        else {\n            var userTemplate = this.l10n.getConstant(userNames.length === 2 ? 'twoUserTyping' : 'oneUserTyping');\n            return userNames.length === 2\n                ? userTemplate.replace('{0}', userNames[0].toString()).replace('{1}', userNames[1].toString())\n                : userTemplate.replace('{0}', userNames[0].toString());\n        }\n    };\n    ChatUI.prototype.updateTypingUsers = function (users) {\n        var prevOnChange = this.isProtectedOnChange;\n        this.isProtectedOnChange = true;\n        this.typingUsers = users;\n        this.isProtectedOnChange = prevOnChange;\n        this.renderTypingIndicator();\n    };\n    ChatUI.prototype.activateSendIcon = function (value) {\n        this.sendIcon.classList.toggle('disabled', value === 0);\n        this.sendIcon.classList.toggle('enabled', value > 0);\n    };\n    ChatUI.prototype.updateHeaderIcon = function () {\n        var existingIconElement = this.element.querySelector('.e-header-icon');\n        if (existingIconElement) {\n            existingIconElement.className = \"e-header-icon e-icons \" + this.headerIconCss;\n        }\n        else {\n            var headerContainer = this.element.querySelector('.e-header');\n            if (headerContainer) {\n                var iconElement = this.createElement('span', {\n                    className: \"e-header-icon e-icons \" + this.headerIconCss\n                });\n                headerContainer.prepend(iconElement);\n            }\n        }\n    };\n    ChatUI.prototype.updateHeaderText = function () {\n        if (this.headerText) {\n            var headerTextEle = this.element.querySelector('.e-header-text');\n            if (headerTextEle) {\n                headerTextEle.innerHTML = this.headerText;\n            }\n        }\n    };\n    ChatUI.prototype.renderUpdatedMessage = function () {\n        this.messageWrapper.innerHTML = '';\n        this.setChatMsgId();\n        this.renderMessageGroup(this.messageWrapper);\n    };\n    ChatUI.prototype.onSendIconClick = function (event) {\n        var _this = this;\n        if (!this.textareaObj.value.trim()) {\n            return;\n        }\n        var newMessageObj = {\n            id: this.element.id + \"-message-\" + (this.messages.length + 1),\n            author: this.user,\n            text: this.textareaObj.value\n        };\n        var prevOnChange = this.isProtectedOnChange;\n        this.textareaObj.value = '';\n        this.textareaObj.dataBind();\n        this.updateTextAreaObject(this.textareaObj);\n        this.activateSendIcon(this.textareaObj.value.length);\n        var eventArgs = {\n            cancel: false,\n            message: newMessageObj\n        };\n        this.triggerUserTyping(event, '');\n        this.trigger('messageSend', eventArgs, function (args) {\n            if (args.cancel) {\n                return;\n            }\n            newMessageObj = args.message;\n            _this.isProtectedOnChange = true;\n            _this.messages = _this.messages.concat([newMessageObj]);\n            _this.isProtectedOnChange = prevOnChange;\n            _this.renderNewMessage(newMessageObj, (_this.messages.length - 1));\n        });\n        if (this.suggestionsElement) {\n            this.suggestionsElement.hidden = false;\n        }\n        // To prevent the issue where scrolling does not move to the bottom in the `messageTemplate` case on Angular and React platforms.\n        this.updateScrollPosition(false, 5);\n    };\n    ChatUI.prototype.getContextObject = function (templateName, contentElement, index, message, currentMessagedate) {\n        var template;\n        var context = {};\n        switch (templateName.toLowerCase()) {\n            case 'messagetemplate': {\n                template = this.messageTemplate;\n                context = { message: message, index: index };\n                break;\n            }\n            case 'timebreaktemplate': {\n                template = this.timeBreakTemplate;\n                context = { messageDate: currentMessagedate };\n                break;\n            }\n            case 'typinguserstemplate': {\n                template = this.typingUsersTemplate;\n                context = { users: this.typingUsers };\n                break;\n            }\n        }\n        this.updateContent(template, contentElement, context, templateName);\n    };\n    ChatUI.prototype.handleAutoScroll = function () {\n        if (this.isScrollAtBottom) {\n            this.updateScroll(this.messageWrapper);\n        }\n        if (this.autoScrollToBottom) {\n            this.updateScroll(this.messageWrapper);\n        }\n        this.toggleScrollIcon();\n    };\n    ChatUI.prototype.footerKeyHandler = function (e) {\n        this.keyHandler(e, 'footer');\n    };\n    ChatUI.prototype.scrollBottomKeyHandler = function (e) {\n        this.keyHandler(e, 'scrollBottom');\n    };\n    ChatUI.prototype.keyHandler = function (event, value) {\n        if (event.key === 'Enter' && !event.shiftKey) {\n            switch (value) {\n                case 'footer':\n                    event.preventDefault();\n                    this.onSendIconClick(event);\n                    break;\n                case 'scrollBottom':\n                    this.scrollToBottom();\n                    break;\n            }\n        }\n    };\n    ChatUI.prototype.updateFooter = function (showFooter, footerElement) {\n        if (!showFooter) {\n            footerElement.hidden = true;\n        }\n        else {\n            footerElement.hidden = false;\n        }\n    };\n    ChatUI.prototype.handleScroll = function () {\n        var atBottom = this.checkScrollAtBottom();\n        if (atBottom) {\n            this.toggleClassName(this.downArrowIcon.element, atBottom, 'downArrow');\n            var suggestionEle = this.element.querySelector('.e-suggestions');\n            if (suggestionEle) {\n                this.toggleClassName(suggestionEle, atBottom, 'suggestion');\n                if (!atBottom || !this.isScrollAtBottom) {\n                    this.updateScroll(this.messageWrapper);\n                }\n            }\n        }\n        if (this.loadOnDemand && this.messageWrapper.scrollTop === 0) {\n            this.multiplier += this.multiplier;\n            this.loadMoreMessages();\n        }\n        this.isScrollAtBottom = atBottom;\n    };\n    ChatUI.prototype.checkScrollAtBottom = function () {\n        var scrollThreshold = 5;\n        var scrollTop = Math.floor(this.messageWrapper.scrollTop);\n        var scrollHeight = Math.floor(this.messageWrapper.scrollHeight);\n        var clientHeight = Math.floor(this.messageWrapper.clientHeight);\n        return scrollHeight - scrollTop <= clientHeight + scrollThreshold;\n    };\n    ChatUI.prototype.toggleClassName = function (element, atBottom, name) {\n        switch (name) {\n            case 'downArrow':\n                element.classList.toggle('e-arrowdown-hide', atBottom);\n                element.classList.toggle('e-arrowdown-show', !atBottom);\n                break;\n            case 'suggestion':\n                element.classList.toggle('e-show-suggestions', atBottom);\n                element.classList.toggle('e-hide-suggestions', !atBottom);\n                break;\n            case 'scroll':\n                element.classList.toggle('e-scroll-smooth', !atBottom);\n                break;\n        }\n    };\n    ChatUI.prototype.toggleScrollIcon = function () {\n        var atBottom = this.checkScrollAtBottom();\n        this.toggleClassName(this.downArrowIcon.element, atBottom, 'downArrow');\n        var suggestionEle = this.element.querySelector('.e-suggestions');\n        if (suggestionEle) {\n            this.toggleClassName(suggestionEle, atBottom, 'suggestion');\n            if (atBottom) {\n                this.updateScroll(this.messageWrapper);\n            }\n        }\n        this.isScrollAtBottom = atBottom;\n    };\n    ChatUI.prototype.scrollBtnClick = function () {\n        this.toggleClassName(this.messageWrapper, false, 'scroll');\n        this.scrollToBottom();\n        this.toggleClassName(this.messageWrapper, true, 'scroll');\n    };\n    ChatUI.prototype.updateMessageItem = function (message, msgId) {\n        if (message.author || message.timeStamp || this.messageTemplate) {\n            this.renderUpdatedMessage();\n            return;\n        }\n        var messageItem = this.messageWrapper.querySelector(\"#\" + msgId);\n        if (!messageItem) {\n            return;\n        }\n        if (message.id) {\n            messageItem.id = message.id;\n        }\n        var textElement = messageItem.querySelector('.e-text');\n        if (textElement && message.text) {\n            textElement.innerHTML = message.text;\n        }\n        if (message.status) {\n            var statusTextElement = messageItem.querySelector('.e-status-text');\n            if (statusTextElement && message.status.text) {\n                statusTextElement.innerHTML = message.status.text;\n            }\n            var statusIconElement = messageItem.querySelector('.e-status-icon');\n            if (statusIconElement && message.status.iconCss) {\n                var iconCss = message.status.iconCss;\n                statusIconElement.className = \"e-status-icon \" + iconCss;\n                if (message.status.tooltip) {\n                    statusIconElement.title = message.status.tooltip;\n                }\n            }\n        }\n    };\n    ChatUI.prototype.wireEvents = function () {\n        this.wireFooterEvents(this.sendIcon, this.footer, this.footerTemplate, this.textareaObj);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(this.messageWrapper, 'scroll', this.handleScroll, this);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(this.downArrowIcon.element, 'click', this.scrollBtnClick, this);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(this.downArrowIcon.element, 'keydown', this.scrollBottomKeyHandler, this);\n    };\n    ChatUI.prototype.unwireEvents = function () {\n        this.unWireFooterEvents(this.sendIcon, this.footer, this.footerTemplate, this.textareaObj);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(this.messageWrapper, 'scroll', this.handleScroll);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(this.downArrowIcon.element, 'click', this.scrollBtnClick);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(this.downArrowIcon.element, 'keydown', this.scrollBottomKeyHandler);\n    };\n    ChatUI.prototype.destroyChatUI = function () {\n        var properties = [\n            'content',\n            'sendIcon',\n            'footer',\n            'indicatorWrapper',\n            'messageWrapper',\n            'viewWrapper',\n            'chatHeader'\n        ];\n        for (var _i = 0, properties_1 = properties; _i < properties_1.length; _i++) {\n            var prop = properties_1[_i];\n            var element = prop;\n            this.removeAndNullify(this[element]);\n            this[element] = null;\n        }\n    };\n    /**\n     * Scrolls to the last message in the conversation area of the Chat UI component.\n     * This method allows programmatic control to ensure the chat view is scrolled to the bottom, typically used when new messages are added or to refocus on the most recent conversation.\n     *\n     * @returns {void}\n     */\n    ChatUI.prototype.scrollToBottom = function () {\n        this.updateScroll(this.messageWrapper);\n        this.toggleScrollIcon();\n    };\n    /**\n     * Appends a new message to the end of the Chat UI conversation area.\n     * This method adds the specified message as the latest entry in the chat:\n     *\n     * @function addMessage\n     * @param {string | MessageModel} message - The message to be added to the conversation. Accepts either a plain text string or a `MessageModel` object.\n     * - If `message` is a string, a `MessageModel` will be automatically created with the current user’s details, and the message will be appended.\n     * - If `message` is an instance of `MessageModel`, it can represent a message from either the current user or another participant and will be appended directly.\n     * @returns {void} No return value.\n     */\n    ChatUI.prototype.addMessage = function (message) {\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(message)) {\n            return;\n        }\n        var prevOnChange = this.isProtectedOnChange;\n        this.isProtectedOnChange = true;\n        if (typeof message === 'string') {\n            var newMessageObj = {\n                id: this.element.id + \"-message-\" + (this.messages.length + 1),\n                author: this.user,\n                text: message,\n                timeStamp: new Date(),\n                timeStampFormat: this.timeStampFormat\n            };\n            this.messages = this.messages.concat([newMessageObj]);\n            this.renderNewMessage(newMessageObj, (this.messages.length - 1));\n        }\n        else {\n            var newMessageObj = __assign({}, message, { id: message.id || this.element.id + \"-message-\" + (this.messages.length + 1) });\n            this.messages = this.messages.concat([newMessageObj]);\n            this.renderNewMessage(newMessageObj, (this.messages.length - 1));\n        }\n        // To prevent the issue where scrolling does not move to the bottom in the `messageTemplate` case on Angular and React platforms.\n        this.updateScrollPosition(true, 5);\n        this.isProtectedOnChange = prevOnChange;\n    };\n    /**\n     * Updates an existing message in the Chat UI component.\n     * This method allows for modifying a message that has already been added to the conversation.\n     * It requires the unique identifier of the message to be updated and the new message content as a `MessageModel`.\n     *\n     * @function updateMessage\n     * @param {MessageModel} message - The updated message content represented as a `MessageModel`.\n     * @param {string} msgId - The unique identifier of the message to be updated.\n     * @returns {void} No return value.\n     */\n    ChatUI.prototype.updateMessage = function (message, msgId) {\n        var prevOnChange = this.isProtectedOnChange;\n        this.isProtectedOnChange = true;\n        this.messages = this.messages.map(function (messageItem) {\n            return messageItem.id === msgId ? __assign({}, messageItem, message) : messageItem;\n        });\n        this.updateMessageItem(message, msgId);\n        this.isProtectedOnChange = prevOnChange;\n    };\n    /**\n     * Scrolls to a specific message in the Chat UI component based on the provided message ID.\n     * Locates the message with the specified ID and scrolls it to the view.\n     *\n     * @function scrollToMessage\n     * @param {string} messageId - The unique identifier of the message to navigate to the corresponding message rendered in the chat UI.\n     * @returns {void}.\n     */\n    ChatUI.prototype.scrollToMessage = function (messageId) {\n        var messageElement = this.messageWrapper.querySelector(\"#\" + messageId);\n        if (!messageElement) {\n            return;\n        }\n        messageElement.scrollIntoView({\n            behavior: 'smooth',\n            block: 'start'\n        });\n    };\n    /**\n     * Sets focus for the input textarea in the Chat UI component.\n     * Ensures that user input is directed to the chat input field.\n     *\n     * @function focus\n     * @returns {void}.\n     */\n    ChatUI.prototype.focus = function () {\n        if (this.textareaObj) {\n            this.textareaObj.focusIn();\n        }\n    };\n    ChatUI.prototype.destroy = function () {\n        _super.prototype.destroy.call(this);\n        this.unwireEvents();\n        if (this.cssClass) {\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([this.element], this.cssClass.split(' '));\n        }\n        this.element.classList.remove('e-rtl');\n        this.destroyAndNullify(this.textareaObj);\n        this.destroyAndNullify(this.downArrowIcon);\n        this.destroyAndNullify(this.toolbar);\n        this.destroyChatUI();\n        this.intl = null;\n    };\n    /**\n     * Called if any of the property value is changed.\n     *\n     * @param  {ChatUIModel} newProp - Specifies new properties\n     * @param  {ChatUIModel} oldProp - Specifies old properties\n     * @returns {void}\n     * @private\n     */\n    ChatUI.prototype.onPropertyChanged = function (newProp, oldProp) {\n        for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {\n            var prop = _a[_i];\n            switch (prop) {\n                case 'width':\n                case 'height':\n                    this.setDimension(this.element, this.width, this.height);\n                    break;\n                case 'placeholder':\n                    if (this.textareaObj) {\n                        this.textareaObj.placeholder = this.placeholder;\n                    }\n                    break;\n                case 'cssClass':\n                    this.updateCssClass(this.element, newProp.cssClass, oldProp.cssClass);\n                    break;\n                case 'enableRtl':\n                    this.element.classList[this.enableRtl ? 'add' : 'remove']('e-rtl');\n                    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.toolbar)) {\n                        this.toolbar.enableRtl = this.enableRtl;\n                        this.toolbar.dataBind();\n                    }\n                    break;\n                case 'showHeader':\n                    this.updateHeader(this.showHeader, this.chatHeader, this.viewWrapper);\n                    break;\n                case 'headerText':\n                    this.updateHeaderText();\n                    break;\n                case 'headerIconCss':\n                    this.updateHeaderIcon();\n                    break;\n                case 'messages': {\n                    this.renderUpdatedMessage();\n                    // To prevent the issue where scrolling does not move to the bottom in the `messageTemplate` case on Angular and React platforms.\n                    this.updateScrollPosition(true, 5);\n                    break;\n                }\n                case 'user': {\n                    var newUser = {\n                        id: newProp.user.id,\n                        user: newProp.user.user,\n                        avatarUrl: newProp.user.avatarUrl,\n                        avatarBgColor: newProp.user.avatarBgColor,\n                        cssClass: newProp.user.cssClass\n                    };\n                    this.user = __assign({}, this.user, newUser);\n                    break;\n                }\n                case 'showTimeStamp':\n                case 'timeStampFormat':\n                case 'showTimeBreak':\n                    if (this.messages.length > 0) {\n                        this.renderUpdatedMessage();\n                    }\n                    break;\n                case 'showFooter':\n                    this.updateFooter(this.showFooter, this.footer);\n                    break;\n                case 'autoScrollToBottom':\n                    this.handleAutoScroll();\n                    break;\n                case 'suggestions':\n                    this.handleSuggestionUpdate();\n                    break;\n                case 'typingUsers':\n                    this.updateTypingUsers(this.typingUsers);\n                    break;\n                case 'locale':\n                    if (!this.typingUsers || this.typingUsers.length === 0) {\n                        return;\n                    }\n                    this.updateUserText();\n                    break;\n                case 'headerToolbar':\n                    this.updateHeaderToolbar();\n                    break;\n                case 'currencyCode':\n                    this.refresh();\n                    break;\n            }\n        }\n    };\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('100%')\n    ], ChatUI.prototype, \"width\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('100%')\n    ], ChatUI.prototype, \"height\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({}, User)\n    ], ChatUI.prototype, \"user\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('Chat')\n    ], ChatUI.prototype, \"headerText\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('')\n    ], ChatUI.prototype, \"headerIconCss\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('Type your message…')\n    ], ChatUI.prototype, \"placeholder\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('')\n    ], ChatUI.prototype, \"cssClass\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(true)\n    ], ChatUI.prototype, \"showHeader\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(true)\n    ], ChatUI.prototype, \"showFooter\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({ items: [] }, _interactive_chat_base_interactive_chat_base__WEBPACK_IMPORTED_MODULE_1__.ToolbarSettings)\n    ], ChatUI.prototype, \"headerToolbar\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)([])\n    ], ChatUI.prototype, \"suggestions\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], ChatUI.prototype, \"showTimeBreak\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Collection)([], Message)\n    ], ChatUI.prototype, \"messages\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Collection)([], User)\n    ], ChatUI.prototype, \"typingUsers\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('dd/MM/yyyy hh:mm a')\n    ], ChatUI.prototype, \"timeStampFormat\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(true)\n    ], ChatUI.prototype, \"showTimeStamp\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], ChatUI.prototype, \"autoScrollToBottom\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], ChatUI.prototype, \"loadOnDemand\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('')\n    ], ChatUI.prototype, \"suggestionTemplate\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('')\n    ], ChatUI.prototype, \"footerTemplate\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('')\n    ], ChatUI.prototype, \"emptyChatTemplate\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('')\n    ], ChatUI.prototype, \"messageTemplate\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('')\n    ], ChatUI.prototype, \"timeBreakTemplate\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('')\n    ], ChatUI.prototype, \"typingUsersTemplate\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], ChatUI.prototype, \"messageSend\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], ChatUI.prototype, \"userTyping\", void 0);\n    ChatUI = __decorate([\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.NotifyPropertyChanges\n    ], ChatUI);\n    return ChatUI;\n}(_interactive_chat_base_interactive_chat_base__WEBPACK_IMPORTED_MODULE_1__.InterActiveChatBase));\n\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-interactive-chat/src/chat-ui/chat-ui.js?");

/***/ })

}]);