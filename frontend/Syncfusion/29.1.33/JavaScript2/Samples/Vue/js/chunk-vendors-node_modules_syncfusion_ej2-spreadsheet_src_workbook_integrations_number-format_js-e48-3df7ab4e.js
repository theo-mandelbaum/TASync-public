"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkej2_vue_samples"] = self["webpackChunkej2_vue_samples"] || []).push([["chunk-vendors-node_modules_syncfusion_ej2-spreadsheet_src_workbook_integrations_number-format_js-e48-3df7ab4e"],{

/***/ "./node_modules/@syncfusion/ej2-spreadsheet/src/workbook/integrations/number-format.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-spreadsheet/src/workbook/integrations/number-format.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   WorkbookNumberFormat: () => (/* binding */ WorkbookNumberFormat),\n/* harmony export */   configureLocalizedFormat: () => (/* binding */ configureLocalizedFormat),\n/* harmony export */   convertToDefaultFormat: () => (/* binding */ convertToDefaultFormat),\n/* harmony export */   getFormatFromType: () => (/* binding */ getFormatFromType),\n/* harmony export */   getTypeFromFormat: () => (/* binding */ getTypeFromFormat)\n/* harmony export */ });\n/* harmony import */ var _common_index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common/index */ \"./node_modules/@syncfusion/ej2-spreadsheet/src/workbook/common/index.js\");\n/* harmony import */ var _base_index__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../base/index */ \"./node_modules/@syncfusion/ej2-spreadsheet/src/workbook/base/index.js\");\n/* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @syncfusion/ej2-base */ \"./node_modules/@syncfusion/ej2-base/index.js\");\n/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./../index */ \"./node_modules/@syncfusion/ej2-spreadsheet/src/workbook/index.js\");\n/* harmony import */ var _common_internalization__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../common/internalization */ \"./node_modules/@syncfusion/ej2-spreadsheet/src/workbook/common/internalization.js\");\n\n\n\n\n\n\n\n\n\n\n/**\n * Specifies number format.\n */\nvar WorkbookNumberFormat = /** @class */ (function () {\n    function WorkbookNumberFormat(parent) {\n        this.parent = parent;\n        this.localeObj = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.getNumericObject)(this.parent.locale);\n        var dependables = _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.IntlBase.getDependables(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.cldrData, this.parent.locale, null).dateObject;\n        if (dependables.dayPeriods && dependables.dayPeriods && dependables.dayPeriods.format && dependables.dayPeriods.format.wide) {\n            this.localeObj.am = dependables.dayPeriods.format.wide.am || 'AM';\n            this.localeObj.pm = dependables.dayPeriods.format.wide.pm || 'PM';\n        }\n        else {\n            this.localeObj.am = 'AM';\n            this.localeObj.pm = 'PM';\n        }\n        this.updateLocalizedFormats(dependables);\n        this.addEventListener();\n    }\n    WorkbookNumberFormat.prototype.numberFormatting = function (args) {\n        var sheetIdx = this.parent.activeSheetIndex;\n        var activeSheet = true;\n        if (args.range && args.range.indexOf('!') > -1) {\n            sheetIdx = (0,_base_index__WEBPACK_IMPORTED_MODULE_1__.getSheetIndex)(this.parent, args.range.substring(0, args.range.lastIndexOf('!')));\n            activeSheet = sheetIdx === this.parent.activeSheetIndex;\n        }\n        var sheet = (0,_base_index__WEBPACK_IMPORTED_MODULE_1__.getSheet)(this.parent, sheetIdx);\n        var formatRange = args.range ? ((args.range.lastIndexOf('!') > -1) ?\n            args.range.substring(args.range.lastIndexOf('!') + 1) : args.range) : sheet.selectedRange;\n        var selectedRange = (0,_common_index__WEBPACK_IMPORTED_MODULE_0__.getSwapRange)((0,_common_index__WEBPACK_IMPORTED_MODULE_0__.getRangeIndexes)(formatRange));\n        args.curSym = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.getNumberDependable)(this.parent.locale, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.defaultCurrencyCode);\n        var fArgs;\n        var cell;\n        var prevFormat;\n        var row;\n        var isVisibleRow;\n        for (var rowIdx = selectedRange[0]; rowIdx <= selectedRange[2]; rowIdx++) {\n            row = (0,_base_index__WEBPACK_IMPORTED_MODULE_1__.getRow)(sheet, rowIdx);\n            isVisibleRow = activeSheet && !(0,_base_index__WEBPACK_IMPORTED_MODULE_1__.isHiddenRow)(sheet, rowIdx);\n            for (var colIdx = selectedRange[1]; colIdx <= selectedRange[3]; colIdx++) {\n                cell = (0,_base_index__WEBPACK_IMPORTED_MODULE_1__.getCell)(rowIdx, colIdx, sheet, false, true);\n                prevFormat = cell.format;\n                if (!(0,_common_index__WEBPACK_IMPORTED_MODULE_0__.isReadOnly)(cell, sheet.columns[colIdx], row) &&\n                    !(0,_common_index__WEBPACK_IMPORTED_MODULE_0__.updateCell)(this.parent, sheet, { cell: { format: args.format }, rowIdx: rowIdx, colIdx: colIdx })) {\n                    cell = (0,_base_index__WEBPACK_IMPORTED_MODULE_1__.getCell)(rowIdx, colIdx, sheet);\n                    if (!(cell.rowSpan < 0 || cell.colSpan < 0)) {\n                        fArgs = { value: cell.value, format: cell.format, rowIndex: rowIdx, colIndex: colIdx, sheetIndex: sheetIdx,\n                            cell: cell, refresh: activeSheet, curSymbol: args.curSym };\n                        this.getFormattedCell(fArgs);\n                        if (isVisibleRow) {\n                            this.setCell(fArgs);\n                            if (fArgs.td) {\n                                this.parent.notify(_common_index__WEBPACK_IMPORTED_MODULE_0__.refreshCellElement, fArgs);\n                                if (cell.wrap && (!row || !row.customHeight) && prevFormat !== args.format) {\n                                    this.parent.notify(_common_index__WEBPACK_IMPORTED_MODULE_0__.wrapEvent, { range: [rowIdx, colIdx, rowIdx, colIdx], wrap: true, sheet: sheet, initial: true,\n                                        td: fArgs.td, isOtherAction: true });\n                                }\n                            }\n                            if (prevFormat && prevFormat !== args.format && prevFormat.includes('[') &&\n                                (0,_base_index__WEBPACK_IMPORTED_MODULE_1__.getCustomColors)().indexOf((0,_base_index__WEBPACK_IMPORTED_MODULE_1__.getColorCode)(args.format)) === -1) {\n                                this.removeFormatColor(fArgs, { format: prevFormat, style: cell.style });\n                            }\n                        }\n                    }\n                    this.parent.setUsedRange(rowIdx, colIdx);\n                }\n            }\n        }\n        if (sheet.conditionalFormats && sheet.conditionalFormats.length) {\n            this.parent.notify(_common_index__WEBPACK_IMPORTED_MODULE_0__.applyCF, { indexes: selectedRange, isAction: true, isEdit: true });\n        }\n        if (this.parent.chartColl && this.parent.chartColl.length) {\n            this.parent.notify(_index__WEBPACK_IMPORTED_MODULE_3__.refreshChart, { range: selectedRange });\n        }\n    };\n    WorkbookNumberFormat.prototype.isDigitPlaceHolder = function (char) {\n        return char === '#' || char === '0' || char === '?' || char === '.';\n    };\n    WorkbookNumberFormat.prototype.parseToLocalizedFormat = function (args) {\n        if (args.decimalGroupSepsChanged && (args.format.includes('.') || args.format.includes(','))) {\n            var formatChar = void 0;\n            var endPos = void 0;\n            var prevChar_1;\n            var formatChars = args.format.split('');\n            for (var idx = 0; idx < formatChars.length; idx++) {\n                formatChar = formatChars[idx];\n                if (formatChar === '\"') {\n                    endPos = args.format.indexOf('\"', idx + 1);\n                    if (endPos > -1) {\n                        idx = endPos;\n                    }\n                }\n                else if (formatChar === '_' || formatChar === '*' || formatChar === '\\\\') {\n                    idx++;\n                }\n                else if (formatChar === '[') {\n                    endPos = args.format.indexOf(']', idx + 1);\n                    if (endPos > -1) {\n                        idx = endPos;\n                    }\n                }\n                else if (formatChar === ',') {\n                    if (this.isDigitPlaceHolder(formatChars[idx - 1])) {\n                        formatChars[idx] = this.localeObj.group;\n                    }\n                }\n                else if (formatChar === '.') {\n                    if (formatChars[idx - 1]) {\n                        prevChar_1 = formatChars[idx - 1].toLowerCase();\n                        if (!['d', 'm', 'y', 'h'].some(function (char) { return prevChar_1 === char; })) {\n                            formatChars[idx] = this.localeObj.decimal;\n                        }\n                    }\n                    else {\n                        formatChars[idx] = this.localeObj.decimal;\n                    }\n                }\n            }\n            args.format = formatChars.join('');\n        }\n        if (args.curChanged && args.format.includes(\"\\\"\" + args.curSym + \"\\\"\")) {\n            args.format = args.format.split(\"\\\"\" + args.curSym + \"\\\"\").join(args.curSym);\n        }\n    };\n    WorkbookNumberFormat.prototype.updateLocalizedFormats = function (dependables, isFormatMapping) {\n        var _this = this;\n        var _a;\n        numberFormatsCode = {\n            currency: ['$#,##0.00', '$#,##0', '$#,##0_);($#,##0)', '$#,##0_);[Red]($#,##0)', '$#,##0.00_);($#,##0.00)',\n                '$#,##0.00_);[Red]($#,##0.00)'],\n            accounting: ['_($* #,##0_);_($* (#,##0);_($* \"-\"_);_(@_)', '_(* #,##0_);_(* (#,##0);_(* \"-\"_);_(@_)',\n                '_($* #,##0.00_);_($* (#,##0.00);_($* \"-\"??_);_(@_)', '_(* #,##0.00_);_(* (#,##0.00);_(* \"-\"??_);_(@_)'],\n            time: dependables.timeFormats && dependables.timeFormats.medium === 'HH:mm:ss' ? 'HH:mm:ss' : 'h:mm:ss AM/PM'\n        };\n        var curSym = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.getNumberDependable)(this.parent.locale, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.defaultCurrencyCode);\n        var args = { curChanged: curSym !== '$', curSym: curSym,\n            decimalGroupSepsChanged: this.localeObj.decimal !== '.' && this.localeObj.group !== ',' };\n        if (args.curChanged) {\n            var intl = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.Internationalization(this.parent.locale);\n            var formatStr = intl.getNumberPattern({ currency: '$', useGrouping: true, format: 'c0' }, true);\n            if (formatStr && formatStr.endsWith('$')) {\n                var curSpacing_1 = formatStr[formatStr.indexOf('$') - 1].trim().length ? '' : ' ';\n                numberFormatsCode.currency.forEach(function (format, index) {\n                    if (format.includes('$#,##0')) {\n                        var decimalFormat = '';\n                        var decimalPart = format.split('$#,##0.')[1];\n                        if (decimalPart) {\n                            var decimalCount = 0;\n                            while (decimalPart[decimalCount] === '0') {\n                                decimalFormat += '0';\n                                decimalCount++;\n                            }\n                        }\n                        if (decimalFormat) {\n                            decimalFormat = \".\" + decimalFormat;\n                        }\n                        numberFormatsCode.currency[index] = format.split(\"$#,##0\" + decimalFormat).join(\"#,##0\" + decimalFormat + curSpacing_1 + \"\\\"\" + curSym + \"\\\"\");\n                    }\n                });\n                numberFormatsCode.accounting.forEach(function (format, index) {\n                    if (format.slice(0, format.indexOf('#')).includes('$')) {\n                        var formatArr_1 = format.split(';');\n                        var replaceIdx_1;\n                        formatArr_1.forEach(function (formatStr, index) {\n                            if (formatStr.includes('$')) {\n                                formatStr = formatStr.replace('$', '');\n                                if (formatStr.includes('0)')) {\n                                    replaceIdx_1 = formatStr.indexOf('0)') + 2;\n                                }\n                                else {\n                                    replaceIdx_1 = formatStr.lastIndexOf(formatStr.includes('0') ? '0' : (formatStr.includes('?') ? '?' :\n                                        (formatStr.includes('\"-\"') ? '\"' : '#'))) + 1;\n                                }\n                                if (replaceIdx_1 > 0) {\n                                    formatArr_1[index] = formatStr.slice(0, replaceIdx_1) + curSpacing_1 + (\"\\\"\" + curSym + \"\\\"\") +\n                                        formatStr.slice(replaceIdx_1);\n                                }\n                            }\n                        });\n                        numberFormatsCode.accounting[index] = formatArr_1.join(';');\n                    }\n                });\n            }\n            else {\n                var updateLocalizedCurrency = function (format, index, formats) { return formats[index] = format.split('$').join(\"\\\"\" + curSym + \"\\\"\"); };\n                numberFormatsCode.currency.forEach(updateLocalizedCurrency);\n                numberFormatsCode.accounting.forEach(updateLocalizedCurrency);\n            }\n        }\n        var customFormats = ['General', '0', '0.00', '#,##0', '#,##0.00', '#,##0_);(#,##0)', '#,##0_);[Red](#,##0)',\n            '#,##0.00_);(#,##0.00)', '#,##0.00_);[Red](#,##0.00)', numberFormatsCode.currency[2], numberFormatsCode.currency[3],\n            numberFormatsCode.currency[4], numberFormatsCode.currency[5], '0%', '0.00%', '0.00E+00', '##0.0E+0', '# ?/?', '# ??/??',\n            'm/d/yyyy', 'd-mmm-yy', 'd-mmm', 'mmm-yy', 'h:mm AM/PM', 'h:mm:ss AM/PM', 'h:mm', 'h:mm:ss', 'm/d/yyyy h:mm', 'mm:ss',\n            'mm:ss.0', '@', '[h]:mm:ss'].concat(numberFormatsCode.accounting);\n        if (isFormatMapping) {\n            (_a = this.customFormats).splice.apply(_a, [0, customFormats.length].concat(customFormats));\n        }\n        else {\n            this.customFormats = customFormats;\n            this.localizedFormats = [];\n        }\n        var defaultFormatsId = [0, 1, 2, 3, 4, 37, 38, 39, 40, 5, 6, 7, 8, 9, 10, 11, 48, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n            21, 22, 45, 47, 49, 46, 42, 41, 44, 43];\n        var formatIdx;\n        defaultFormatsId.forEach(function (id, index) {\n            if (defaultFormats && defaultFormats.has(id)) {\n                _this.customFormats[index] = defaultFormats.get(id);\n                formatIdx = [5, 6, 7, 8].indexOf(id);\n                if (formatIdx > -1) {\n                    numberFormatsCode.currency[formatIdx + 2] = _this.customFormats[index];\n                }\n                else {\n                    formatIdx = [42, 41, 44, 43].indexOf(id);\n                    if (formatIdx > -1) {\n                        numberFormatsCode.accounting[formatIdx] = _this.customFormats[index];\n                    }\n                }\n            }\n            args.format = _this.customFormats[index];\n            _this.parseToLocalizedFormat(args);\n            _this.localizedFormats[index] = args.format;\n        });\n        var _loop_1 = function (idx) {\n            var cusFormatIdx = this_1.localizedFormats.findIndex(function (format, index) { return format === _this.localizedFormats[idx] && index < defaultFormatsId.length; });\n            if (cusFormatIdx > -1) {\n                this_1.localizedFormats.splice(idx, 1);\n                this_1.customFormats.splice(idx, 1);\n                idx--;\n            }\n            out_idx_1 = idx;\n        };\n        var this_1 = this, out_idx_1;\n        for (var idx = defaultFormatsId.length; idx < this.localizedFormats.length; idx++) {\n            _loop_1(idx);\n            idx = out_idx_1;\n        }\n    };\n    WorkbookNumberFormat.prototype.localizedFormatAction = function (args) {\n        if (args.action === 'getLocalizedFormats') {\n            args.defaultFormats = this.customFormats;\n            args.localizedFormats = this.localizedFormats;\n        }\n        else if (args.action === 'mapNumberFormatId') {\n            this.updateLocalizedFormats(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.IntlBase.getDependables(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.cldrData, this.parent.locale, null).dateObject, true);\n        }\n        else {\n            args.curSym = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.getNumberDependable)(this.parent.locale, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.defaultCurrencyCode);\n            if (args.action === 'parseToDefaultFormat') {\n                this.parseToDefaultFormat(args);\n            }\n            else {\n                // addToCustomFormats action\n                args.decimalGroupSepsChanged = this.localeObj.decimal !== '.' && this.localeObj.group !== ',';\n                args.curChanged = args.curSym !== '$';\n                if (!args.defaultFormat) {\n                    args.defaultFormat = args.format;\n                    this.parseToLocalizedFormat(args);\n                }\n                if (this.localizedFormats.indexOf(args.format) === -1) {\n                    this.localizedFormats.push(args.format);\n                    this.customFormats.push(args.defaultFormat);\n                }\n            }\n        }\n    };\n    WorkbookNumberFormat.prototype.parseToDefaultFormat = function (args) {\n        var _this = this;\n        var decimalSepChanged = this.localeObj.decimal !== '.' && args.format.includes(this.localeObj.decimal);\n        var groupSepChanged = this.localeObj.group !== ',' && args.format.includes(this.localeObj.group);\n        var curSymChanged = args.curSym !== '$' && args.format.includes(args.curSym);\n        if (decimalSepChanged || groupSepChanged || curSymChanged) {\n            var endPos_1;\n            var prevChar_2;\n            var formatChar_1;\n            var formatSection_1 = args.format.split(';');\n            formatSection_1.forEach(function (format, index) {\n                var formatChars = format.split('');\n                for (var idx = 0; idx < formatChars.length; idx++) {\n                    formatChar_1 = formatChars[idx];\n                    if (formatChar_1 === '\"') {\n                        idx = format.indexOf('\"', idx + 1);\n                    }\n                    else if (formatChar_1 === '_' || formatChar_1 === '*' || formatChar_1 === '\\\\') {\n                        idx++;\n                    }\n                    else if (formatChar_1 === '[') {\n                        endPos_1 = format.indexOf(']', idx + 1);\n                        if (endPos_1 > -1) {\n                            idx = endPos_1;\n                        }\n                    }\n                    else if (decimalSepChanged && formatChar_1 === _this.localeObj.decimal) {\n                        prevChar_2 = formatChars[idx - 1];\n                        if (prevChar_2) {\n                            prevChar_2 = prevChar_2.toLowerCase();\n                            if (!['d', 'm', 'y', 'h'].some(function (char) { return prevChar_2 === char; })) {\n                                formatChars[idx] = '.';\n                            }\n                        }\n                        else {\n                            formatChars[idx] = '.';\n                        }\n                    }\n                    else if (groupSepChanged && formatChar_1 === _this.localeObj.group) {\n                        if (_this.isDigitPlaceHolder(formatChars[idx - 1])) {\n                            formatChars[idx] = ',';\n                        }\n                    }\n                    else if (curSymChanged) {\n                        if (formatChar_1 === args.curSym) {\n                            formatChars[idx] = \"\\\"\" + args.curSym + \"\\\"\";\n                        }\n                        else if (args.curSym.startsWith(formatChar_1) &&\n                            format.substring(idx, idx + args.curSym.length) === args.curSym) {\n                            formatChars.splice(idx, args.curSym.length, \"\\\"\" + args.curSym + \"\\\"\");\n                        }\n                    }\n                }\n                formatSection_1[index] = formatChars.join('');\n            });\n            args.format = formatSection_1.join(';');\n        }\n    };\n    /**\n     * @hidden\n     *\n     * @param {Object} args - Specifies the args.\n     * @returns {string} - to get formatted cell.\n     */\n    WorkbookNumberFormat.prototype.getFormattedCell = function (args) {\n        var fResult = args.value === undefined || args.value === null ? '' : args.value;\n        args.sheetIndex = args.sheetIndex === undefined ? this.parent.activeSheetIndex : args.sheetIndex;\n        var sheet = (0,_base_index__WEBPACK_IMPORTED_MODULE_1__.getSheet)(this.parent, args.sheetIndex);\n        var cell = args.cell || (0,_base_index__WEBPACK_IMPORTED_MODULE_1__.getCell)(args.rowIndex, args.colIndex, sheet, false, true);\n        var rightAlign = false;\n        var intl = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.Internationalization();\n        if (!args.curSymbol) {\n            args.curSymbol = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.getNumberDependable)(this.parent.locale, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.defaultCurrencyCode);\n        }\n        if ((!args.format || args.format === 'General') && !args.skipFormatCheck && (!cell.formula ||\n            !cell.formula.toLowerCase().startsWith('=text('))) {\n            args.type = args.format = 'General';\n            if (!cell.formula || (cell.formula && cell.formula.indexOf('&-') === -1)) { // for 5&-3=>5-3.\n                var dateEventArgs = { value: fResult, updatedVal: fResult, cell: cell, isEdit: args.isEdit,\n                    intl: intl };\n                this.checkDateFormat(dateEventArgs);\n                if (dateEventArgs.isDate || dateEventArgs.isTime) {\n                    rightAlign = true;\n                    cell.value = args.value = dateEventArgs.updatedVal;\n                    if (cell.format && cell.format !== 'General') {\n                        args.format = cell.format;\n                        args.type = getTypeFromFormat(args.format);\n                    }\n                    else {\n                        cell.format = args.format = getFormatFromType(dateEventArgs.isDate ? 'ShortDate' : 'Time');\n                    }\n                }\n            }\n        }\n        else {\n            args.type = getTypeFromFormat(args.format);\n            if (args.skipFormatCheck && !args.format && args.type === 'General') {\n                args.format = 'General';\n            }\n        }\n        if (cell.format && this.isCustomType(cell)) {\n            args.type = 'Custom';\n            var isTextFormat = cell.format.indexOf('@') > -1;\n            if (fResult !== '' && !isTextFormat && this.isPercentageValue(fResult.toString(), args, cell)) {\n                fResult = args.value.toString();\n            }\n            var isCustomText = void 0;\n            var option = {};\n            if (defaultFormats && (0,_common_index__WEBPACK_IMPORTED_MODULE_0__.isImported)(this.parent)) {\n                cell.format = args.format = this.getMatchingCustomFormat(cell.format);\n            }\n            var orgFormat = cell.format;\n            cell.format = cell.format.split('\\\\').join('');\n            var formats = cell.format.split(';');\n            if ((0,_index__WEBPACK_IMPORTED_MODULE_3__.isCustomDateTime)(formats[0], true, option, true)) {\n                if (fResult !== '') {\n                    args.result = this.processCustomDateTime(args, cell, option.type !== 'time', formats);\n                    isCustomText = !args.formatApplied;\n                }\n                args.result = args.result || cell.value;\n            }\n            else if (formats.length > 1) {\n                if (cell.format.indexOf('<') > -1 || cell.format.indexOf('>') > -1) {\n                    args.result = this.processCustomConditions(cell, args);\n                }\n                else {\n                    var numObj = (0,_common_internalization__WEBPACK_IMPORTED_MODULE_4__.checkIsNumberAndGetNumber)(cell, this.parent.locale, this.localeObj.group, this.localeObj.decimal, args.curSymbol);\n                    if (numObj.isNumber) {\n                        cell.value = numObj.value;\n                        this.processCustomAccounting(cell, args, formats, formats[0]);\n                        isCustomText = false;\n                    }\n                    else {\n                        args.result = this.processCustomText(cell, args, formats);\n                        isCustomText = true;\n                    }\n                }\n                cell.format = orgFormat;\n            }\n            else if (isTextFormat) {\n                isCustomText = true;\n                args.result = this.processCustomText(cell, args);\n            }\n            else {\n                var numObj = (0,_common_internalization__WEBPACK_IMPORTED_MODULE_4__.checkIsNumberAndGetNumber)({ value: fResult }, this.parent.locale, this.localeObj.group, this.localeObj.decimal);\n                if (numObj.isNumber) {\n                    cell.value = args.value = numObj.value;\n                    if (cell.format.includes('E+0')) {\n                        if (args.format !== cell.format) {\n                            args.format = cell.format;\n                        }\n                        this.checkAndSetColor(args);\n                        var numberFormat = args.format.split('E')[0];\n                        var formatArr = numberFormat.split('.');\n                        if (this.localeObj.decimal !== '.' && formatArr.length === 1) {\n                            formatArr = numberFormat.split(this.localeObj.decimal);\n                        }\n                        args.result = formatArr[0].length > 1 ? this.scientificHashFormat(args, formatArr) : this.scientificFormat(args);\n                    }\n                    else {\n                        args.result = this.processCustomNumberFormat(cell, args);\n                        isCustomText = !(0,_common_index__WEBPACK_IMPORTED_MODULE_0__.isNumber)(cell.value);\n                    }\n                }\n                else {\n                    if (cell.format && cell.format.includes('[')) {\n                        this.removeFormatColor(args, { format: cell.format, style: cell.style });\n                    }\n                    isCustomText = args.dataUpdate = true;\n                }\n            }\n            if (args.dataUpdate) {\n                args.formattedText = args.result || ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(args.value) ? '' : args.value.toString());\n            }\n            else {\n                args.value = args.result;\n                args.formattedText = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(args.value) ? '' : args.value.toString();\n            }\n            if (isCustomText) {\n                args.isRightAlign = false;\n            }\n            else {\n                args.isRightAlign = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(args.value);\n            }\n        }\n        else {\n            var result = this.processFormats(args, fResult, rightAlign, cell, intl, sheet);\n            args.formattedText = result.fResult || (args.value === undefined || args.value === null ? '' : args.value.toString());\n            args.isRightAlign = result.rightAlign;\n        }\n        if (args.rowIndex !== undefined) {\n            if (cell.format && args.formattedText && args.formattedText !== cell.value && cell.format !== 'General') {\n                cell.formattedText = args.formattedText;\n            }\n            else if (cell.formattedText) {\n                delete cell.formattedText;\n            }\n        }\n        return args.formattedText;\n    };\n    WorkbookNumberFormat.prototype.isCustomType = function (cell) {\n        var format = getTypeFromFormat(cell.format);\n        return (format === 'General' && cell.format !== 'General') || (format === 'Time' && this.parent.isEdit);\n    };\n    WorkbookNumberFormat.prototype.processCustomFill = function (format, cell, args, formatText) {\n        var repeatChar = format[format.indexOf('*') + 1];\n        var codes = format.split('*' + repeatChar);\n        if (args.rowIndex === undefined || args.dataUpdate) {\n            formatText = formatText || this.processCustomNumberFormat({ format: codes.join(''), value: cell.value }, args);\n        }\n        else {\n            var secText = void 0;\n            if (codes[1]) {\n                var cellVal = parseFloat(cell.value);\n                if (cellVal < 0) {\n                    secText = this.processCustomNumberFormat({ format: codes[1], value: Math.abs(cellVal).toString() }, args);\n                    formatText = \"-\" + codes[0].split('\\'').join('');\n                }\n                else {\n                    secText = this.processCustomNumberFormat({ format: codes[1], value: cell.value }, args);\n                    formatText = codes[0].split('\\'').join('');\n                }\n                if (cellVal === 0) {\n                    secText = secText.split('0').join('');\n                }\n            }\n            else {\n                formatText = formatText || this.processCustomNumberFormat({ format: codes[0], value: cell.value }, args);\n            }\n            args.isRowFill = true;\n            this.setCell(args);\n            this.parent.notify(_common_index__WEBPACK_IMPORTED_MODULE_0__.rowFillHandler, { cell: cell, cellEle: args.td, rowIdx: args.rowIndex, colIdx: args.colIndex, beforeFillText: formatText,\n                repeatChar: repeatChar, afterFillText: secText });\n            formatText = this.parent.isPrintingProcessing ? formatText + secText : formatText;\n        }\n        return formatText;\n    };\n    WorkbookNumberFormat.prototype.processCustomDateTime = function (args, cell, isDate, formatSections) {\n        var _this = this;\n        if (this.localeObj.decimal !== '.' && cell.value && cell.value.toString().includes(this.localeObj.decimal)) {\n            var cellVal = cell.value.replace(this.localeObj.decimal, '.');\n            if ((0,_common_index__WEBPACK_IMPORTED_MODULE_0__.isNumber)(cellVal)) {\n                cell.value = args.value = cellVal;\n            }\n        }\n        var isCustomDate;\n        var checkCustomDate = function () {\n            var cellVal = cell.value.toString();\n            if (cellVal.includes(_this.localeObj.dateSeparator) || cellVal.indexOf('-') > 0 || cellVal.includes(_this.localeObj.timeSeparator)) {\n                return true;\n            }\n            var formats = _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.IntlBase.getDependables(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.cldrData, _this.parent.locale, null).dateObject;\n            var months = formats.months['stand-alone'] && formats.months['stand-alone'].abbreviated;\n            return months && !!Object.keys(months).find(function (key) { return cellVal.includes(months[\"\" + key]); });\n        };\n        if (!(0,_common_index__WEBPACK_IMPORTED_MODULE_0__.isNumber)(cell.value)) {\n            isCustomDate = checkCustomDate();\n            if (!isCustomDate) {\n                return this.processCustomText(cell, args, formatSections);\n            }\n        }\n        else if (formatSections.length > 1 && parseFloat(cell.value) <= 0) {\n            args.formatApplied = this.processCustomAccounting(cell, args, formatSections);\n            if (args.formatApplied) {\n                return args.result;\n            }\n        }\n        var type;\n        var custFormat = formatSections[0];\n        var intl = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.Internationalization();\n        var formatDateTime = function (checkDate) {\n            var isValidDate;\n            var dateArgs;\n            if (isCustomDate) {\n                var noOfDays = void 0;\n                if (cell.format.includes('[h]')) {\n                    var timeArr = cell.value.toString().split(':');\n                    if (timeArr.length > 1 && Number(timeArr[0]) >= 24) {\n                        noOfDays = Number(timeArr[0]) / 24;\n                        timeArr[0] = '24';\n                        cell.value = timeArr.join(':');\n                    }\n                }\n                dateArgs = (0,_common_index__WEBPACK_IMPORTED_MODULE_0__.toDate)(cell.value, new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.Internationalization(), _this.parent.locale, custFormat, cell);\n                isValidDate = dateArgs.dateObj && dateArgs.dateObj.toString() !== 'Invalid Date';\n                if (isValidDate) {\n                    if (dateArgs.dateObj.getFullYear() < 1900) {\n                        return '';\n                    }\n                    else {\n                        var dateIntVal = (0,_common_index__WEBPACK_IMPORTED_MODULE_0__.dateToInt)(dateArgs.dateObj, cell.value.toString().includes(':'), dateArgs.type === 'time');\n                        if (noOfDays >= 1) {\n                            dateIntVal += noOfDays;\n                            dateArgs.dateObj = (0,_common_index__WEBPACK_IMPORTED_MODULE_0__.intToDate)(dateIntVal);\n                        }\n                        cell.value = dateIntVal.toString();\n                    }\n                }\n            }\n            else {\n                if (_this.checkAndProcessNegativeValue(args, cell.value)) {\n                    args.formatApplied = true;\n                    return args.formattedText;\n                }\n                dateArgs = { dateObj: (0,_common_index__WEBPACK_IMPORTED_MODULE_0__.intToDate)(parseFloat(cell.value)) };\n                isValidDate = dateArgs.dateObj && dateArgs.dateObj.toString() !== 'Invalid Date';\n            }\n            if (isValidDate) {\n                if (checkDate && isDate) {\n                    args.dateObj = dateArgs.dateObj;\n                }\n                args.formatApplied = true;\n                var result = void 0;\n                if (custFormat.startsWith('MM-dd-yyyy ')) { // While auto detect date time value, we will set this format only.\n                    custFormat = custFormat.split(' ').splice(1).join(' ');\n                    result = intl.formatDate(dateArgs.dateObj, { type: 'date', skeleton: 'yMd' }) + (custFormat ? ' ' +\n                        intl.formatDate(dateArgs.dateObj, { type: type, format: custFormat }) : '');\n                }\n                else {\n                    result = intl.formatDate(dateArgs.dateObj, { type: type, format: custFormat });\n                    custFormat = custFormat.toLowerCase();\n                    if (custFormat.startsWith('[h]')) {\n                        var totalHours = (Number(cell.value.toString().split('.')[0]) * 24) + dateArgs.dateObj.getHours();\n                        result = totalHours.toString() + result.slice(result.indexOf(']') + 1);\n                    }\n                    else if (custFormat.startsWith('[m')) {\n                        var totalMins = (Number(cell.value.toString().split('.')[0]) * 1440) + (dateArgs.dateObj.getHours() * 60)\n                            + dateArgs.dateObj.getMinutes();\n                        result = totalMins.toString() + result.slice(result.indexOf(']') + 1);\n                    }\n                    else if (custFormat.startsWith('[s')) {\n                        result = ((Number(cell.value.toString().split('.')[0]) * 86400) + (((dateArgs.dateObj.getHours() * 60) +\n                            dateArgs.dateObj.getMinutes()) * 60) + dateArgs.dateObj.getSeconds()).toString();\n                    }\n                }\n                if (isShortMeridian) {\n                    return result.replace(_this.localeObj.am, 'A').replace(_this.localeObj.pm, 'P');\n                }\n                return result;\n            }\n            return '';\n        };\n        custFormat = custFormat.split('_(').join(' ').split('_)').join(' ');\n        if (cell.format.indexOf('h') > -1) {\n            custFormat = custFormat.split('h').join('H');\n            type = 'time';\n        }\n        if (cell.format.indexOf('s') > -1) {\n            type = 'time';\n        }\n        var isShortMeridian = cell.format.indexOf('A/P') > -1;\n        if (cell.format.indexOf('AM/PM') > -1 || isShortMeridian) {\n            custFormat = custFormat.split('H').join('h');\n            custFormat = custFormat.split('A/P').join('AM/PM').split('AM/PM').join('a');\n            type = 'time';\n        }\n        if (cell.format.indexOf('d') > -1) {\n            type = 'date';\n            // Split the format with ' ' for replacing d with E only for a day of the week in the MMM d, yyyy ddd format\n            var formatArr = custFormat.split(' ');\n            var dayMatchStr = void 0;\n            var splitFormat = void 0;\n            var part = void 0;\n            var separator = void 0;\n            for (var formatIdx = 0; formatIdx < formatArr.length; formatIdx++) {\n                separator = formatArr[formatIdx].includes(this.localeObj.dateSeparator) ? this.localeObj.dateSeparator : '-';\n                splitFormat = formatArr[formatIdx].split(separator);\n                for (var index = 0; index < splitFormat.length; index++) {\n                    part = splitFormat[index];\n                    dayMatchStr = part.match(/d/g);\n                    if (dayMatchStr && dayMatchStr.length > 2) {\n                        splitFormat[index] = part.split('d').join('E');\n                    }\n                }\n                formatArr[formatIdx] = splitFormat.join(separator);\n            }\n            custFormat = formatArr.join(' ');\n        }\n        if (cell.format.indexOf('m') > -1) {\n            if (cell.format.indexOf('s') > -1 || cell.format.indexOf('h') > -1) {\n                type = 'time';\n                if (cell.format.includes(' ')) {\n                    var formatArr = custFormat.split(' ');\n                    if (formatArr[0].includes('d') || formatArr[0].includes('y')) {\n                        formatArr[0] = formatArr[0].split('m').join('M');\n                        custFormat = formatArr.join(' ');\n                    }\n                }\n            }\n            else {\n                type = 'date';\n                custFormat = custFormat.split('m').join('M');\n                if (custFormat.includes('MMMMM')) {\n                    var prevFormat = custFormat;\n                    custFormat = 'MMMM';\n                    var monthName = formatDateTime()[0];\n                    custFormat = prevFormat.split('MMMMM').join('p');\n                    return formatDateTime(args.checkDate).split('p').join(monthName);\n                }\n            }\n        }\n        return formatDateTime(args.checkDate);\n    };\n    WorkbookNumberFormat.prototype.processCustomConditions = function (cell, args) {\n        if ((0,_common_index__WEBPACK_IMPORTED_MODULE_0__.isNumber)(cell.value)) {\n            var formatArr = cell.format.split(';');\n            var val = Number(cell.value);\n            var compareVal = void 0;\n            var conditionNotMatch = void 0;\n            var colorCode = void 0;\n            for (var i = 0; i < formatArr.length; i++) {\n                cell.format = formatArr[i];\n                colorCode = (0,_base_index__WEBPACK_IMPORTED_MODULE_1__.getColorCode)(cell.format);\n                if (colorCode) {\n                    cell.format = cell.format.split(\"[\" + colorCode + \"]\").join('');\n                }\n                if (cell.format.includes('[')) {\n                    compareVal = cell.format.split('[')[1].split(']')[0];\n                    var ltEqualTo = compareVal.split('<=');\n                    var gtEqualTo = compareVal.split('>=');\n                    var lessThan = compareVal.split('<');\n                    var greaterThan = compareVal.split('>');\n                    if ((ltEqualTo.length === 2 && val <= Number(ltEqualTo[1])) ||\n                        (gtEqualTo.length === 2 && val >= Number(gtEqualTo[1])) ||\n                        (lessThan.length === 2 && val < Number(lessThan[1])) ||\n                        (greaterThan.length === 2 && val > Number(greaterThan[1]))) {\n                        cell.format = formatArr[i].split(\"[\" + compareVal + \"]\").join('');\n                        conditionNotMatch = false;\n                        break;\n                    }\n                    conditionNotMatch = compareVal.split(/<=|>=|<|>/).length === 2;\n                }\n                else {\n                    cell.format = formatArr[i];\n                    conditionNotMatch = false;\n                    break;\n                }\n            }\n            if (conditionNotMatch) {\n                this.removeFormatColor(args, { format: formatArr.join(''), style: cell.style });\n                return this.processCustomFill('*#', cell, args, '#####');\n            }\n            return this.processCustomNumberFormat(cell, args);\n        }\n        else {\n            return cell.value;\n        }\n    };\n    WorkbookNumberFormat.prototype.processCustomAccounting = function (cell, args, formats, format) {\n        var cellVal = parseFloat(cell.value);\n        if (cellVal < 0) {\n            if (!formats[1].includes('@')) {\n                format = formats[1];\n            }\n        }\n        else if (cellVal === 0 && formats[2] && !formats[2].includes('@')) {\n            format = formats[2].includes(args.curSymbol + \"0\") ? formats[2].split('0').join('#') : formats[2];\n        }\n        if (format) {\n            args.result = this.processCustomNumberFormat({\n                format: cell.format, value: cellVal < 0 ? Math.abs(cellVal).toString() : cell.value, style: cell.style\n            }, args, format);\n            return true;\n        }\n        return false;\n    };\n    WorkbookNumberFormat.prototype.processCustomText = function (cell, args, formatSections) {\n        var cellVal = cell.value || cell.value ? cell.value.toString() : '';\n        var format;\n        if (formatSections) {\n            if (formatSections[3]) {\n                format = formatSections[3];\n            }\n            else if (formatSections[1] && formatSections[1].includes('@')) {\n                format = formatSections[1];\n            }\n            else {\n                return cellVal;\n            }\n        }\n        else {\n            format = cell.format;\n        }\n        var result = this.processCustomNumberFormat({ format: format.split('@').join('#'), value: cellVal.split(cellVal).join('1') }, args);\n        if (result) {\n            result = result.split('1').join(cellVal);\n            if (this.localeObj.decimal !== '.' && (0,_common_index__WEBPACK_IMPORTED_MODULE_0__.isNumber)(result) && result.includes('.')) {\n                result = result.replace('.', this.localeObj.decimal);\n            }\n        }\n        return result;\n    };\n    WorkbookNumberFormat.prototype.thousandSeparator = function (count, value) {\n        while (count) {\n            value = value / 1000;\n            count--;\n        }\n        return value;\n    };\n    WorkbookNumberFormat.prototype.getSeparatorCount = function (cell) {\n        var count = 0;\n        var codes = ['#', '0'];\n        for (var i = 0; i < cell.format.length; i++) {\n            if (cell.format[i] === '\"' && cell.format[i - 1] !== '\\\\') {\n                i = cell.format.indexOf('\"', i + 1);\n            }\n            else if (cell.format[i] === ',' && !(codes.indexOf(cell.format[i + 1]) > -1)) {\n                count++;\n            }\n        }\n        return count;\n    };\n    WorkbookNumberFormat.prototype.processDigits = function (cell, customFormat) {\n        customFormat = customFormat.split('?').join('0');\n        var cellValue = cell.value.toString();\n        cellValue = this.getFormattedNumber(customFormat, parseFloat(cellValue));\n        if (cellValue && cellValue.includes(this.localeObj.decimal)) {\n            var valArr = cellValue.split(this.localeObj.decimal);\n            cellValue = valArr[0] + this.localeObj.decimal + valArr[1].split('0').join('  ');\n        }\n        return cellValue || cell.value;\n    };\n    WorkbookNumberFormat.prototype.processFormatWithSpace = function (format, cell, cellValue) {\n        var space = ' ';\n        var args = { cell: cell, char: space, width: 0 };\n        this.parent.notify(_index__WEBPACK_IMPORTED_MODULE_3__.getTextSpace, args);\n        var spaceWidth = args.width;\n        var count;\n        var result = { format: format, formattedText: '' };\n        for (var i = 0; i < format.length; i++) {\n            if (format[i] === '_') {\n                args.char = format[i + 1];\n                this.parent.notify(_index__WEBPACK_IMPORTED_MODULE_3__.getTextSpace, args);\n                var textWidth = args.width;\n                count = Math.round(textWidth / spaceWidth);\n                format = format.replace(format[i] + format[i + 1], space.repeat(count));\n            }\n        }\n        var lastSpaceCount = format.length - format.trim().length;\n        if (lastSpaceCount > 0) {\n            result.formattedText = this.getFormattedNumber(format.trim(), cellValue);\n            if (format[0] === ' ') {\n                var frontSpaceCount = 1;\n                var idx = 1;\n                while (format[idx] === ' ') {\n                    frontSpaceCount++;\n                    idx++;\n                }\n                lastSpaceCount -= frontSpaceCount;\n                result.formattedText = space.repeat(frontSpaceCount) + result.formattedText;\n            }\n            result.formattedText += space.repeat(lastSpaceCount);\n        }\n        else {\n            result.formattedText = this.getFormattedNumber(format, cellValue);\n        }\n        result.format = format;\n        return result;\n    };\n    WorkbookNumberFormat.prototype.removeFormatColor = function (args, cell) {\n        if ((0,_base_index__WEBPACK_IMPORTED_MODULE_1__.getCustomColors)().indexOf((0,_base_index__WEBPACK_IMPORTED_MODULE_1__.getColorCode)(cell.format)) > -1) {\n            args.color = cell.style && cell.style.color ? cell.style.color : '';\n            this.applyColor(args);\n        }\n    };\n    WorkbookNumberFormat.prototype.processCustomNumberFormat = function (cell, args, format) {\n        if (!cell.format) {\n            return '';\n        }\n        var formattedText = cell.value;\n        var numArgs = (0,_common_internalization__WEBPACK_IMPORTED_MODULE_4__.checkIsNumberAndGetNumber)(cell, this.parent.locale, this.localeObj.group, this.localeObj.decimal);\n        if (numArgs.isNumber) {\n            var isFormatted = void 0;\n            var isZeroFormat = void 0;\n            cell.value = numArgs.value;\n            var cellValue = parseFloat(cell.value.toString());\n            var customFormat = format || cell.format;\n            if (cell.format.indexOf('[') > -1) {\n                var colorCode = (0,_base_index__WEBPACK_IMPORTED_MODULE_1__.getColorCode)(customFormat);\n                if (colorCode) {\n                    customFormat = customFormat.split(\"[\" + colorCode + \"]\").join('');\n                    args.color = colorCode.toLowerCase();\n                    this.applyColor(args);\n                }\n                else {\n                    this.removeFormatColor(args, cell);\n                }\n            }\n            if (customFormat.indexOf('\"') > -1 || customFormat.indexOf('\\\\') > -1) {\n                customFormat = this.processText(customFormat);\n                isZeroFormat = cellValue === 0 && !customFormat.includes('#') && !customFormat.includes('0');\n                if (isZeroFormat) {\n                    customFormat += '#';\n                }\n            }\n            var separatorCount = this.getSeparatorCount(cell);\n            if (separatorCount) {\n                isFormatted = true;\n                var result = this.thousandSeparator(separatorCount, cellValue);\n                if (customFormat.indexOf('.') === -1) {\n                    result = Math.round(result);\n                }\n                formattedText = this.getFormattedNumber(customFormat.split(',').join(''), result);\n                if (result === 0) {\n                    formattedText = formattedText.replace('0', '');\n                }\n            }\n            if (customFormat.indexOf('?') > -1) {\n                isFormatted = true;\n                formattedText = this.processDigits(cell, customFormat);\n                customFormat = customFormat.split('?').join('');\n            }\n            if (customFormat.indexOf('_') > -1) {\n                isFormatted = true;\n                var result = this.processFormatWithSpace(customFormat, cell, cellValue);\n                customFormat = result.format;\n                formattedText = result.formattedText;\n            }\n            if (formattedText && customFormat.indexOf('?') > -1) {\n                formattedText = formattedText.replace('?', ' ');\n            }\n            if (customFormat.indexOf('*') > -1) {\n                isFormatted = true;\n                formattedText = this.processCustomFill(customFormat, cell, args);\n            }\n            if (customFormat === 'General') {\n                isFormatted = true;\n                formattedText = cellValue.toString();\n            }\n            if (!isFormatted) {\n                formattedText = this.getFormattedNumber(customFormat, cellValue);\n            }\n            if (isZeroFormat && formattedText) {\n                formattedText = formattedText.replace('0', '');\n            }\n            // Need to remove this line once this case is handled by core team.\n            if (customFormat[0] === '#' && cellValue >= 0 && cellValue < 1) {\n                var formatArr = customFormat.split('#').join('').split('.');\n                if (!formatArr[0].includes('0')) {\n                    if (cellValue === 0 && customFormat.includes('.') && (!formatArr[1] || !formatArr[1].includes('0'))) {\n                        formattedText = this.getFormattedNumber(customFormat, 0.1);\n                        formattedText = formattedText.replace('1', '');\n                    }\n                    var textArr = formattedText.split(this.localeObj.decimal);\n                    textArr[0] = textArr[0].toString().replace(/^0+/, '');\n                    formattedText = textArr.join(this.localeObj.decimal);\n                }\n            }\n            if (formattedText === '-0') { // Need to remove this line once this case is handled by core team.\n                formattedText = '0';\n            }\n        }\n        return formattedText;\n    };\n    WorkbookNumberFormat.prototype.processText = function (format) {\n        var custFormat = format;\n        if (custFormat.indexOf('\"') > -1) {\n            custFormat = custFormat.split('\"').join('\\'');\n        }\n        else if (custFormat.indexOf('\\\\') > -1) {\n            custFormat = custFormat.split('\\\\').join('');\n        }\n        return custFormat;\n    };\n    WorkbookNumberFormat.prototype.processFormats = function (args, fResult, isRightAlign, cell, intl, sheet) {\n        var options;\n        if (this.parent.isEdit && (args.type === 'Scientific' && !(0,_common_index__WEBPACK_IMPORTED_MODULE_0__.isNumber)(args.value))) {\n            args.type = 'General';\n        }\n        if (fResult !== '') {\n            var numArgs = void 0;\n            if (args.type !== 'General' && args.type !== 'Text' && this.isPercentageValue(fResult.toString(), args, cell)) {\n                fResult = args.value.toString();\n            }\n            switch (args.type) {\n                case 'General':\n                    options = { args: args, fResult: fResult, intl: intl, isRightAlign: isRightAlign,\n                        cell: cell, rowIdx: Number(args.rowIndex), colIdx: Number(args.colIndex), sheet: sheet };\n                    if (!(options.fResult.toString().startsWith('\\n') || options.fResult.toString().endsWith('\\n '))) {\n                        this.autoDetectGeneralFormat(options);\n                    }\n                    fResult = options.fResult;\n                    isRightAlign = options.isRightAlign;\n                    break;\n                case 'Number':\n                    numArgs = (0,_common_internalization__WEBPACK_IMPORTED_MODULE_4__.checkIsNumberAndGetNumber)({ value: fResult }, this.parent.locale, this.localeObj.group, this.localeObj.decimal, args.curSymbol, true, true);\n                    if (numArgs.isNumber) {\n                        cell.value = args.value = numArgs.value;\n                        fResult = this.applyNumberFormat(args, intl);\n                        isRightAlign = true;\n                    }\n                    break;\n                case 'Currency':\n                    numArgs = (0,_common_internalization__WEBPACK_IMPORTED_MODULE_4__.checkIsNumberAndGetNumber)({ value: fResult, format: args.format }, this.parent.locale, this.localeObj.group, this.localeObj.decimal, args.curSymbol);\n                    if (numArgs.isNumber) {\n                        cell.value = args.value = numArgs.value;\n                        fResult = this.currencyFormat(args, intl, cell);\n                        isRightAlign = true;\n                    }\n                    break;\n                case 'Percentage':\n                    numArgs = (0,_common_internalization__WEBPACK_IMPORTED_MODULE_4__.checkIsNumberAndGetNumber)({ value: fResult }, this.parent.locale, this.localeObj.group, this.localeObj.decimal, args.curSymbol, true, true);\n                    if (numArgs.isNumber) {\n                        cell.value = args.value = numArgs.value;\n                        fResult = this.percentageFormat(args, intl);\n                        isRightAlign = true;\n                    }\n                    break;\n                case 'Accounting':\n                    fResult = this.accountingFormat(args, fResult, intl, cell);\n                    isRightAlign = args.formatApplied;\n                    break;\n                case 'ShortDate':\n                    fResult = this.checkAndProcessNegativeValue(args, args.value) ? args.formattedText : this.shortDateFormat(args, intl, cell);\n                    isRightAlign = !!fResult;\n                    break;\n                case 'LongDate':\n                    fResult = this.checkAndProcessNegativeValue(args, args.value) ? args.formattedText : this.longDateFormat(args, intl);\n                    isRightAlign = !!fResult;\n                    break;\n                case 'Time':\n                    fResult = this.checkAndProcessNegativeValue(args, args.value) ? args.formattedText : this.timeFormat(args, intl, cell);\n                    isRightAlign = !!fResult;\n                    break;\n                case 'Fraction':\n                    numArgs = (0,_common_internalization__WEBPACK_IMPORTED_MODULE_4__.checkIsNumberAndGetNumber)({ value: fResult }, this.parent.locale, this.localeObj.group, this.localeObj.decimal, null, true);\n                    if (numArgs.isNumber) {\n                        cell.value = args.value = numArgs.value;\n                        fResult = this.fractionFormat(args);\n                        isRightAlign = true;\n                    }\n                    break;\n                case 'Scientific':\n                    numArgs = (0,_common_internalization__WEBPACK_IMPORTED_MODULE_4__.checkIsNumberAndGetNumber)({ value: fResult }, this.parent.locale, this.localeObj.group, this.localeObj.decimal);\n                    if (numArgs.isNumber) {\n                        cell.value = args.value = numArgs.value;\n                        fResult = this.scientificFormat(args);\n                        isRightAlign = true;\n                    }\n                    break;\n                case 'Text':\n                    if (this.localeObj.decimal !== '.' && (0,_common_index__WEBPACK_IMPORTED_MODULE_0__.isNumber)(fResult) && fResult.toString().includes('.')) {\n                        fResult = fResult.toString().replace('.', this.localeObj.decimal);\n                    }\n                    isRightAlign = false;\n                    break;\n            }\n        }\n        return { fResult: fResult, rightAlign: isRightAlign };\n    };\n    WorkbookNumberFormat.prototype.autoDetectGeneralFormat = function (options) {\n        var val = options.fResult;\n        var prevVal;\n        var addressFormula = options.args.cell && options.args.cell.formula && options.args.cell.formula.indexOf('ADDRESS(') > 0;\n        var isDollarFormula = options.args.cell && options.args.cell.formula && options.args.cell.formula.indexOf('DOLLAR(') > 0;\n        var isTextFormula = options.args.cell && options.args.cell.formula && options.args.cell.formula.indexOf('TEXT(') > 0;\n        if (isDollarFormula && options.fResult && options.fResult.toString().includes(options.args.curSymbol) || isTextFormula) {\n            return;\n        }\n        if (options.fResult && this.localeObj.decimal !== '.') {\n            var cellVal = options.fResult.toString();\n            prevVal = cellVal;\n            if (cellVal.includes(this.localeObj.decimal)) {\n                cellVal = cellVal.replace(this.localeObj.decimal, '.');\n                if ((0,_common_index__WEBPACK_IMPORTED_MODULE_0__.isNumber)(cellVal)) {\n                    if (cellVal.includes('E')) {\n                        options.fResult = cellVal;\n                    }\n                    else {\n                        options.fResult = options.args.value = cellVal = Number(cellVal).toString();\n                        (0,_base_index__WEBPACK_IMPORTED_MODULE_1__.setCell)(options.rowIdx, options.colIdx, options.sheet, { value: cellVal }, true);\n                    }\n                    prevVal = cellVal.replace('.', this.localeObj.decimal);\n                }\n            }\n        }\n        if ((0,_common_index__WEBPACK_IMPORTED_MODULE_0__.isNumber)(options.fResult)) {\n            var cellVal = Number(options.fResult).toString();\n            if (options.fResult.toString().includes('E')) {\n                options.args.format = getFormatFromType('Scientific');\n                (0,_base_index__WEBPACK_IMPORTED_MODULE_1__.setCell)(options.rowIdx, options.colIdx, options.sheet, { value: cellVal, format: options.args.format }, true);\n                options.args.value = cellVal;\n                options.fResult = this.scientificFormat(options.args);\n            }\n            else if (options.args.format) {\n                if (options.args.format.indexOf('%') > -1) {\n                    options.fResult = this.percentageFormat(options.args, options.intl);\n                }\n                else if (options.args.format.indexOf(options.args.curSymbol) > -1) {\n                    options.fResult = this.currencyFormat(options.args, options.intl, options.args.cell);\n                }\n                else {\n                    options.fResult = this.applyNumberFormat(options.args, options.intl);\n                }\n            }\n            if (options.args.format === 'General') {\n                if (options.args.cell && options.args.cell.formula && cellVal.includes('.') && cellVal.length > 11) {\n                    var decIndex = cellVal.indexOf('.') + 1;\n                    prevVal = null;\n                    if (options.args.cell.formula.includes('RANDBETWEEN')) {\n                        options.fResult = cellVal = decIndex < 7 ? cellVal : (parseFloat(cellVal)).toFixed(0);\n                    }\n                }\n                options.cellVal = cellVal;\n                options.prevVal = prevVal;\n                this.parseDecimalNumber(options);\n                if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(options.fResult) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(options.cellVal)) {\n                    options.fResult = options.cellVal;\n                }\n            }\n            options.isRightAlign = true;\n        }\n        if (options.fResult) {\n            this.updateAutoDetectNumberFormat(options);\n        }\n        if (addressFormula) {\n            options.isRightAlign = false;\n            options.fResult = val;\n        }\n    };\n    WorkbookNumberFormat.prototype.parseDecimalNumber = function (options) {\n        var cellValArr = options.cellVal.split('.');\n        if (cellValArr[0].length > 11) {\n            options.cellVal = (Math.abs(Number(cellValArr[0])).toString()).substring(0, 6).replace(/0+$/, '');\n            var digitLen = options.cellVal.length - 1;\n            if (digitLen > -1) {\n                options.fResult = this.scientificFormat(options.args, digitLen > 5 ? 5 : digitLen);\n            }\n        }\n        else if (cellValArr[1]) {\n            if (options.cellVal.length > 11) {\n                // Subtract with 10 to neglect the decimal point.\n                var rightDigitLen = 10 - (cellValArr[0].length - (Math.sign(Number(options.cellVal)) < 0 ? 1 : 0));\n                options.fResult = Number(Number(options.cellVal).toFixed(rightDigitLen > 0 ? rightDigitLen : 0)).toString();\n            }\n            else if (options.cellVal.includes('e-')) {\n                var expVal = options.cellVal.split('e-');\n                var digitLen = Number(expVal[1]) + (expVal[0].includes('.') ? expVal[0].split('.')[1].length : 0);\n                expVal[0] = expVal[0].replace('.', this.localeObj.decimal);\n                if (expVal[1].length === 1) {\n                    expVal[1] = '0' + expVal[1];\n                }\n                if (!options.args.updateValue) {\n                    (0,_base_index__WEBPACK_IMPORTED_MODULE_1__.setCell)(options.rowIdx, options.colIdx, options.sheet, { value: Number(options.cellVal).toFixed(digitLen) }, true);\n                }\n                options.fResult = expVal.join('E-');\n            }\n            else if (options.prevVal) {\n                options.fResult = options.prevVal;\n            }\n            else if (options.args.updateValue && this.localeObj.decimal !== '.') {\n                options.fResult = options.cellVal.replace('.', this.localeObj.decimal);\n            }\n        }\n    };\n    WorkbookNumberFormat.prototype.updateAutoDetectNumberFormat = function (options) {\n        var res = options.fResult.toString();\n        var cell = options.args.cell || options.cell;\n        if (this.isPercentageValue(res, options.args, cell)) {\n            cell.format = res.includes(this.localeObj.decimal) ? getFormatFromType('Percentage') : '0%';\n            if (!options.args.updateValue) {\n                options.args.format = cell.format;\n                options.fResult = this.percentageFormat(options.args, options.intl);\n                options.isRightAlign = true;\n            }\n        }\n        else {\n            var fractionArr = res ? res.toString().split('/') : [];\n            var isFraction = (this.parent.isEdit && getTypeFromFormat(cell.format) === 'Scientific' && fractionArr.length === 2 && (0,_common_index__WEBPACK_IMPORTED_MODULE_0__.isNumber)(fractionArr[0]) && (0,_common_index__WEBPACK_IMPORTED_MODULE_0__.isNumber)(fractionArr[1]));\n            if (res.includes(' ') || isFraction) {\n                var valArr = isFraction ? fractionArr : res.split(' ');\n                if (isFraction || valArr[1].includes('/') && (0,_common_index__WEBPACK_IMPORTED_MODULE_0__.isNumber)(valArr[0]) && Number(valArr[0]) % 1 === 0) {\n                    var fracArr = isFraction ? fractionArr : valArr[1].split('/');\n                    if ((0,_common_index__WEBPACK_IMPORTED_MODULE_0__.isNumber)(fracArr[0]) && Number(fracArr[0]) % 1 === 0 && (0,_common_index__WEBPACK_IMPORTED_MODULE_0__.isNumber)(fracArr[1]) && Number(fracArr[1]) % 1 === 0) {\n                        cell.format = \"# \" + (fracArr[0].length > 1 || fracArr[1].length > 1 ? '??/??' : '?/?');\n                        cell.value = isFraction ? (Number(fracArr[0]) / Number(fracArr[1])).toString() :\n                            (Number(valArr[0]) + (Number(fracArr[0]) / Number(fracArr[1]))).toString();\n                        if (!options.args.updateValue) {\n                            options.args.value = cell.value;\n                            options.args.format = cell.format;\n                            options.fResult = this.fractionFormat(options.args);\n                            options.isRightAlign = true;\n                        }\n                        return;\n                    }\n                }\n            }\n            var format = '';\n            if (res.includes(options.args.curSymbol)) { // Auto detect 1000 separator format with currency symbol\n                format = res.includes(this.localeObj.decimal) ? numberFormatsCode.currency[0] : numberFormatsCode.currency[1];\n                res = res.replace(options.args.curSymbol, '');\n            }\n            var isEdit = this.localeObj.decimal === '.' || (options.args.isEdit && !cell.formula);\n            if (isEdit && res.includes(this.localeObj.group) &&\n                (0,_common_internalization__WEBPACK_IMPORTED_MODULE_4__.parseThousandSeparator)(res, this.parent.locale, this.localeObj.group, this.localeObj.decimal)) {\n                res = res.split(this.localeObj.group).join('');\n                if (!format) { // Auto detect 1000 separator format\n                    format = (res.includes(this.localeObj.decimal) ? '#,##0.00' : '#,##0');\n                }\n            }\n            if (format) {\n                res = res.replace(this.localeObj.decimal, '.');\n                if ((0,_common_index__WEBPACK_IMPORTED_MODULE_0__.isNumber)(res)) {\n                    options.args.value = Number(res).toString();\n                    if (options.args.updateValue) {\n                        options.args.cell.value = options.args.value;\n                        options.args.cell.format = format;\n                    }\n                    else {\n                        options.args.format = format;\n                        (0,_base_index__WEBPACK_IMPORTED_MODULE_1__.setCell)(options.rowIdx, options.colIdx, options.sheet, { value: options.args.value, format: format }, true);\n                        if (format.includes('\"')) {\n                            format = this.processText(format);\n                        }\n                        options.fResult = this.getFormattedNumber(format, Number(options.args.value));\n                        options.isRightAlign = true;\n                    }\n                }\n            }\n            else if (this.localeObj.decimal !== '.' && options.args.format === 'General' && (0,_common_index__WEBPACK_IMPORTED_MODULE_0__.isNumber)(res) && res.includes('.')) {\n                options.fResult = Number(res).toString().replace('.', this.localeObj.decimal);\n            }\n        }\n    };\n    WorkbookNumberFormat.prototype.isPercentageValue = function (value, args, cell) {\n        if (value.includes('%')) {\n            var valArr = value.split('%');\n            if (valArr[0] !== '' && valArr[1].trim() === '') {\n                var numArgs = (0,_common_internalization__WEBPACK_IMPORTED_MODULE_4__.checkIsNumberAndGetNumber)({ value: valArr[0] }, this.parent.locale, this.localeObj.group, this.localeObj.decimal);\n                if (numArgs.isNumber) {\n                    args.value = Number(numArgs.value) / 100;\n                    cell.value = args.value.toString();\n                    return true;\n                }\n            }\n        }\n        return false;\n    };\n    WorkbookNumberFormat.prototype.findSuffix = function (zeros, resultSuffix) {\n        var len = zeros.length;\n        var suffixLen = len - resultSuffix.length;\n        return zeros.substr(0, suffixLen < 0 ? 0 : suffixLen) + resultSuffix;\n    };\n    WorkbookNumberFormat.prototype.applyNumberFormat = function (args, intl) {\n        args.format = this.isCustomFormat(args.format);\n        var formatArr = args.format.split(';');\n        if (Number(args.value) > 0) {\n            args.format = formatArr[0];\n        }\n        else if (Number(args.value) === 0) {\n            args.format = formatArr[2] ? formatArr[2] : formatArr[0];\n            if (args.format.indexOf('\"') > -1 && args.format.indexOf('#') === -1) {\n                args.format = args.format.split('_').join(' ').split('*').join(' ').split('?').join(' ').split('\"').join('');\n                return args.format;\n            }\n        }\n        else if (Number(args.value) < 0) {\n            args.format = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(formatArr[1]) ? formatArr[1].split('*').join(' ') : formatArr[0];\n            if (args.format.indexOf('-') > -1) {\n                args.value = args.value.toString().split('-').join('');\n            }\n        }\n        else {\n            args.format = formatArr[3] ? formatArr[3] : formatArr[0];\n            args.format = args.format.split('_').join(' ').split('*').join(' ').split('?').join(' ');\n            if (args.format.indexOf('@') > -1) {\n                return args.format.split('@').join(args.value.toString());\n            }\n        }\n        args.format = args.format.split('_').join(' ').split('*').join(' ').split('\"').join('');\n        if (args.format.indexOf('?') > -1 && args.format.indexOf(this.localeObj.decimal) > -1) {\n            var formatDecimalLen = args.format.split(this.localeObj.decimal)[1].length;\n            var replaceString = '';\n            if (Number(args.value) % 1) {\n                var valueDecimalLen = args.value.toString().split('.')[1].length;\n                if (formatDecimalLen > valueDecimalLen) {\n                    replaceString = ' ';\n                }\n                else {\n                    replaceString = '0';\n                }\n            }\n            args.format = args.format.split('?').join(replaceString);\n        }\n        else {\n            args.format = args.format.split('?').join(' ');\n        }\n        if (Number(args.value) < 0 && args.cell && args.cell.format) {\n            args.format = args.cell.format;\n        }\n        return intl.formatNumber(Number(args.value), { format: args.format });\n    };\n    WorkbookNumberFormat.prototype.isCustomFormat = function (format) {\n        if (format === '_-* #,##0.00_-;-* #,##0.00_-;_-* \"-\"_-;_-@_-' || format === '_-* #,##0_-;-* #,##0_-;_-* \"-\"_-;_-@_-') {\n            format = '';\n        }\n        format = format === '' ? getFormatFromType('Number') : format;\n        format = format.toString().split('_)').join(' ').split('_(').join(' ').split('[Red]').join('');\n        return format;\n    };\n    WorkbookNumberFormat.prototype.currencyFormat = function (args, intl, cell) {\n        args.format = args.format || getFormatFromType('Currency');\n        args.format = args.format.split('_(').join(' ').split('_)').join(' ');\n        var formatArr = args.format.split(';');\n        var colorCode = (0,_base_index__WEBPACK_IMPORTED_MODULE_1__.getColorCode)(args.format);\n        var cellVal = Number(args.value);\n        if (cellVal >= 0 || (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(formatArr[1])) {\n            if (colorCode) {\n                args.color = cell.style && cell.style.color ? cell.style.color : '';\n                this.applyColor(args);\n            }\n            args.format = formatArr[0];\n        }\n        else {\n            cellVal = Math.abs(cellVal);\n            args.format = formatArr[1].split(\"[\" + colorCode + \"]\").join('').split('*').join(' ');\n            if (colorCode) {\n                args.color = colorCode.toLowerCase();\n                this.applyColor(args);\n            }\n        }\n        args.format = this.getFormatForOtherCurrency(args.format);\n        if (args.format.includes('\"')) {\n            args.format = this.processText(args.format);\n        }\n        return intl.formatNumber(cellVal, { format: args.format, currency: _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.defaultCurrencyCode });\n    };\n    WorkbookNumberFormat.prototype.applyColor = function (args) {\n        if (args.refresh) {\n            this.setCell(args);\n            if (args.td && args.td.style.color !== args.color) {\n                this.parent.notify(_common_index__WEBPACK_IMPORTED_MODULE_0__.applyCellFormat, { style: { color: args.color }, rowIdx: args.rowIndex, colIdx: args.colIndex,\n                    td: args.td });\n            }\n        }\n    };\n    WorkbookNumberFormat.prototype.setCell = function (args) {\n        if (!args.td) {\n            var mergeArgs = {\n                sheet: (0,_base_index__WEBPACK_IMPORTED_MODULE_1__.getSheet)(this.parent, args.sheetIndex),\n                cell: args.cell, rowIdx: args.rowIndex, colIdx: args.colIndex\n            };\n            if (args.cell.rowSpan > 1 || args.cell.colSpan > 1) {\n                (0,_index__WEBPACK_IMPORTED_MODULE_3__.setVisibleMergeIndex)(mergeArgs);\n            }\n            args.td = this.parent.getCell(mergeArgs.rowIdx, mergeArgs.colIdx);\n        }\n    };\n    WorkbookNumberFormat.prototype.percentageFormat = function (args, intl) {\n        args.format = args.format === '' ? getFormatFromType('Percentage') : args.format;\n        return intl.formatNumber(Number(args.value), {\n            format: args.format\n        });\n    };\n    WorkbookNumberFormat.prototype.accountingFormat = function (args, fResult, intl, cell) {\n        args.format = args.format || getFormatFromType('Accounting');\n        args.format = args.format.split('_(').join(' ').split('_)').join(' ').split('[Red]').join('').split('_').join('');\n        var formatArr = args.format.split(';');\n        var numArgs = (0,_common_internalization__WEBPACK_IMPORTED_MODULE_4__.checkIsNumberAndGetNumber)({ value: fResult }, this.parent.locale, this.localeObj.group, this.localeObj.decimal, args.curSymbol, false, true);\n        if (numArgs.isNumber) {\n            cell.value = args.value = numArgs.value;\n            var cellVal = Number(args.value);\n            if (cellVal >= 0) {\n                args.format = cellVal === 0 && formatArr[2] ? formatArr[2] : formatArr[0];\n            }\n            else {\n                args.format = formatArr[1].split('*').join(' ');\n                cellVal = Math.abs(cellVal);\n            }\n            if (args.format.includes(args.curSymbol)) {\n                if (args.format.includes('\"')) {\n                    args.format = this.processText(args.format);\n                }\n            }\n            args.format = this.getFormatForOtherCurrency(args.format);\n            args.formatApplied = true;\n            if (cellVal === 0) {\n                args.format = this.processText(args.format.split('*').join(' ').split('?').join(' '));\n                if (!args.format.includes('#') && !args.format.includes('0')) {\n                    args.format += '#';\n                    var formattedText = intl.formatNumber(cellVal, { format: args.format, currency: _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.defaultCurrencyCode });\n                    if (formattedText.includes('0')) {\n                        formattedText = formattedText.replace('0', '');\n                    }\n                    return args.dataUpdate ? formattedText.split(' ').join('') : formattedText;\n                }\n                var result = intl.formatNumber(cellVal, { format: args.format, currency: _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.defaultCurrencyCode });\n                return args.dataUpdate ? result.split(' ').join('') : result;\n            }\n            else {\n                var result = intl.formatNumber(cellVal, { format: args.format, currency: _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.defaultCurrencyCode });\n                return args.dataUpdate ? result.split(' ').join('') : result;\n            }\n        }\n        else if (formatArr[3]) {\n            return this.processCustomText(cell, args, formatArr);\n        }\n        return fResult;\n    };\n    WorkbookNumberFormat.prototype.getFormatForOtherCurrency = function (format) {\n        if (format.indexOf('[$') > -1) {\n            var symbol = format.split(']')[0].split('[$')[1].split('-')[0];\n            if (format.indexOf('0') > format.indexOf('[$')) {\n                format = symbol + format.slice(format.indexOf(']') + 1, format.length);\n            }\n            else {\n                format = format.slice(0, format.indexOf('[$')) + symbol;\n            }\n        }\n        return format;\n    };\n    WorkbookNumberFormat.prototype.checkAndProcessNegativeValue = function (args, cellValue) {\n        if (cellValue && (0,_common_index__WEBPACK_IMPORTED_MODULE_0__.isNumber)(cellValue) && Number(cellValue) < 0) {\n            if (args.rowIndex === undefined || args.dataUpdate) {\n                args.formattedText = '#'.repeat(args.dataUpdate ? 7 : 10);\n                return true;\n            }\n            args.isRowFill = true;\n            this.setCell(args);\n            var eventArgs = { cell: args.cell, cellEle: args.td, rowIdx: args.rowIndex, colIdx: args.colIndex,\n                repeatChar: '#' };\n            this.parent.notify(_common_index__WEBPACK_IMPORTED_MODULE_0__.rowFillHandler, eventArgs);\n            args.formattedText = eventArgs.formattedText;\n            return true;\n        }\n        return false;\n    };\n    WorkbookNumberFormat.prototype.shortDateFormat = function (args, intl, cell) {\n        var dateObj;\n        if (defaultFormats && (0,_common_index__WEBPACK_IMPORTED_MODULE_0__.isImported)(this.parent) && cell && cell.format === 'm/d/yyyy' && defaultFormats.has(14)) {\n            cell.format = args.format = defaultFormats.get(14);\n        }\n        var format;\n        if (args.format === '' || args.format === 'General' || args.format === 'mm-dd-yyyy' || args.format === 'm/d/yyyy') {\n            format = 'MM-dd-yyyy';\n            dateObj = { type: 'date', skeleton: 'yMd' };\n        }\n        else {\n            format = args.format;\n            if (args.format === getFormatFromType('ShortDate')) {\n                dateObj = { type: 'date', skeleton: 'yMd' };\n            }\n            else {\n                dateObj = { type: 'date', format: args.format };\n            }\n        }\n        var shortDate;\n        args.value = args.value.toString();\n        var checkForDateFormat = this.checkForDateFormat(args, cell);\n        if (args.value && cell && (!(0,_common_index__WEBPACK_IMPORTED_MODULE_0__.isNumber)(args.value) || checkForDateFormat)) {\n            var dateArgs = {\n                value: args.value, updatedVal: args.value, cell: cell, isEdit: args.isEdit, intl: intl,\n                skipCellFormat: true, format: format\n            };\n            this.checkDateFormat(dateArgs);\n            if (dateArgs.isDate || dateArgs.isTime) {\n                cell.value = args.value = dateArgs.updatedVal;\n                shortDate = dateArgs.dateObj;\n            }\n            else if (checkForDateFormat) {\n                shortDate = (0,_common_index__WEBPACK_IMPORTED_MODULE_0__.intToDate)(args.value);\n            }\n            else {\n                return '';\n            }\n        }\n        else {\n            shortDate = (0,_common_index__WEBPACK_IMPORTED_MODULE_0__.intToDate)(args.value);\n        }\n        if (!shortDate || shortDate.toString() === 'Invalid Date') {\n            return '';\n        }\n        else if (shortDate.getFullYear() < 1900 || shortDate.getFullYear() > 9999) {\n            return (0,_common_index__WEBPACK_IMPORTED_MODULE_0__.isNumber)(args.value) ? args.value.toString() : '';\n        }\n        if (args.checkDate) {\n            args.dateObj = shortDate;\n        }\n        return intl.formatDate(shortDate, dateObj);\n    };\n    WorkbookNumberFormat.prototype.longDateFormat = function (args, intl) {\n        args.value = args.value.toString();\n        var longDate;\n        var checkForDateFormat = this.checkForDateFormat(args, args.cell);\n        if ((args.value.includes(this.localeObj.dateSeparator) || args.value.indexOf('-') > 0) && (!(0,_common_index__WEBPACK_IMPORTED_MODULE_0__.isNumber)(args.value)\n            || checkForDateFormat)) {\n            if (checkForDateFormat) {\n                var dateEventArgs = {\n                    value: args.value, updatedVal: args.value, cell: args.cell, isEdit: args.isEdit,\n                    intl: intl\n                };\n                this.checkDateFormat(dateEventArgs);\n                if (dateEventArgs.isDate || dateEventArgs.isTime) {\n                    longDate = dateEventArgs.dateObj;\n                    args.cell.value = args.value = (0,_common_index__WEBPACK_IMPORTED_MODULE_0__.dateToInt)(longDate).toString();\n                }\n                else {\n                    longDate = (0,_common_index__WEBPACK_IMPORTED_MODULE_0__.intToDate)(args.value);\n                }\n            }\n            else {\n                longDate = (0,_common_index__WEBPACK_IMPORTED_MODULE_0__.toDate)(args.value, intl, this.parent.locale, '', args.cell).dateObj;\n                if (longDate && longDate.toString() !== 'Invalid Date' && longDate.getFullYear() >= 1900) {\n                    args.cell.value = args.value = (0,_common_index__WEBPACK_IMPORTED_MODULE_0__.dateToInt)(longDate).toString();\n                }\n                else {\n                    return (0,_common_index__WEBPACK_IMPORTED_MODULE_0__.isNumber)(args.value) ? args.value : '';\n                }\n            }\n        }\n        else {\n            longDate = (0,_common_index__WEBPACK_IMPORTED_MODULE_0__.intToDate)(args.value);\n        }\n        if (!longDate || longDate.toString() === 'Invalid Date') {\n            return '';\n        }\n        else if (longDate.getFullYear() < 1900 || longDate.getFullYear() > 9999) {\n            return (0,_common_index__WEBPACK_IMPORTED_MODULE_0__.isNumber)(args.value) ? args.value.toString() : '';\n        }\n        if (args.checkDate) {\n            args.dateObj = longDate;\n        }\n        return intl.formatDate(longDate, { type: 'date', skeleton: 'full' });\n    };\n    WorkbookNumberFormat.prototype.checkForDateFormat = function (args, cell) {\n        var checkForDateFormat;\n        var value = args.value;\n        if (this.localeObj.decimal === '.' || (args.isEdit && !cell.formula)) {\n            if (value.includes(this.localeObj.group) &&\n                (0,_common_internalization__WEBPACK_IMPORTED_MODULE_4__.parseThousandSeparator)(value, this.parent.locale, this.localeObj.group, this.localeObj.decimal)) {\n                value = value.replace(this.localeObj.group, '');\n                if (this.localeObj.decimal !== '.' && value.includes(this.localeObj.decimal)) {\n                    value = value.replace(this.localeObj.decimal, '.');\n                }\n                if ((0,_common_index__WEBPACK_IMPORTED_MODULE_0__.isNumber)(value) && cell) {\n                    cell.value = args.value = value;\n                }\n                return false;\n            }\n            else {\n                checkForDateFormat = this.localeObj.dateSeparator === '.' && value.includes('.');\n            }\n            if (this.localeObj.decimal !== '.' && !(0,_common_index__WEBPACK_IMPORTED_MODULE_0__.isNumber)(value) && value.includes(this.localeObj.decimal)) {\n                value = value.replace(this.localeObj.decimal, '.');\n                if ((0,_common_index__WEBPACK_IMPORTED_MODULE_0__.isNumber)(value) && cell) {\n                    cell.value = args.value = value;\n                }\n            }\n        }\n        return checkForDateFormat;\n    };\n    WorkbookNumberFormat.prototype.timeFormat = function (args, intl, cell) {\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(args.value)) {\n            return '';\n        }\n        var defaultCode = getFormatFromType('Time');\n        var code;\n        if (args.format === '' || args.format === 'General') {\n            code = defaultCode;\n        }\n        if (args.format === 'h:mm:ss AM/PM') {\n            code = 'h:mm:ss a';\n        }\n        else {\n            code = args.format;\n        }\n        var cellVal = args.value.toString();\n        if (!(0,_common_index__WEBPACK_IMPORTED_MODULE_0__.isNumber)(cellVal) && cell) {\n            var timeArgs = { value: cellVal, updatedVal: cellVal, cell: cell, isEdit: args.isEdit, intl: intl,\n                skipCellFormat: true };\n            this.checkDateFormat(timeArgs);\n            if (timeArgs.isDate || timeArgs.isTime) {\n                cell.value = cellVal = timeArgs.updatedVal;\n            }\n            else {\n                return '';\n            }\n        }\n        var value = cellVal.split('.');\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(value[1])) {\n            cellVal = parseFloat((value[0] + 1) + '.' + value[1]) || cellVal;\n        }\n        return intl.formatDate((0,_common_index__WEBPACK_IMPORTED_MODULE_0__.intToDate)(cellVal), { type: 'time', skeleton: 'medium', format: code });\n    };\n    WorkbookNumberFormat.prototype.scientificHashFormat = function (args, fArr) {\n        var fractionCount = this.findDecimalPlaces(args.format);\n        var wholeCount = (fArr[0].split('0').length - 1) + (fArr[0].split('#').length - 1);\n        var formattedVal = Number(args.value).toExponential(fractionCount + wholeCount);\n        var expoSeparator;\n        if (formattedVal.includes('e+')) {\n            expoSeparator = 'e+';\n        }\n        else if (formattedVal.includes('e-')) {\n            expoSeparator = 'e-';\n        }\n        else {\n            return formattedVal;\n        }\n        var exponentArr = formattedVal.split(expoSeparator);\n        var decimalArr = exponentArr[0].split('.');\n        var exponent = Number(exponentArr[1]);\n        var fractionDiff;\n        if (expoSeparator === 'e-') {\n            var expoVal = exponent + Math.abs(exponent - (wholeCount * (exponent > wholeCount ? 2 : 1)));\n            fractionDiff = expoVal - exponent;\n            exponentArr[1] = expoVal.toString();\n        }\n        else {\n            fractionDiff = exponent % wholeCount;\n            exponentArr[1] = (exponent - fractionDiff).toString();\n        }\n        if (fractionDiff > 0) {\n            decimalArr[0] += decimalArr[1].substring(0, fractionDiff);\n            decimalArr[1] = decimalArr[1].slice(fractionDiff);\n            exponentArr[0] = decimalArr.join('.');\n        }\n        var base = Number('1' + '0'.repeat(fractionCount));\n        return this.getFormattedNumber(fArr.join('.'), Number((Math.round(Number(exponentArr[0]) * base) / base).toFixed(fractionCount))) +\n            expoSeparator.toUpperCase() + this.findSuffix(args.format.split('+')[1], exponentArr[1]);\n    };\n    WorkbookNumberFormat.prototype.scientificFormat = function (args, prefix) {\n        if (!args.format) {\n            args.format = getFormatFromType('Scientific');\n        }\n        var zeros = args.format.split('+')[1] || '00';\n        if (prefix === undefined) {\n            prefix = this.findDecimalPlaces(args.format);\n        }\n        var fResult = Number(args.value).toExponential(prefix);\n        if (fResult.indexOf('e+') > -1) {\n            fResult = fResult.split('e+')[0] + 'E+' + this.findSuffix(zeros, fResult.split('e+')[1]);\n        }\n        else if (fResult.indexOf('e-') > -1) {\n            fResult = fResult.split('e-')[0] + 'E-' + this.findSuffix(zeros, fResult.split('e-')[1]);\n        }\n        return fResult.replace('.', this.localeObj.decimal);\n    };\n    WorkbookNumberFormat.prototype.fractionFormat = function (args) {\n        var _a, _b;\n        var fractionResult;\n        args.format = args.format || getFormatFromType('Fraction');\n        this.checkAndSetColor(args);\n        var valueArr = args.value.toString().split('.');\n        var fractionDigit = args.format.split('?').length / 2;\n        var formatArr = args.format.split(' ');\n        var fractionArr = formatArr[1] ? formatArr[1].split('/') : [];\n        if (/^\\?{1,3}\\/\\?{1,3}$|^\\?\\/[248]$|^\\?\\?\\/16$/.test(formatArr[1])) {\n            if (valueArr.length === 2 && !valueArr[1].startsWith('0'.repeat(fractionArr[1].trim().length || 0))) {\n                var _c = [0, 1, Number.MAX_VALUE], numerator = _c[0], denominator = _c[1], minError = _c[2];\n                var denominatorLimit = fractionArr[1].includes('?') ?\n                    Number('9'.repeat(fractionArr[1].split('?').length - 1)) : Number(fractionArr[1]);\n                var decimalPart = parseFloat(\"0.\" + valueArr[1]);\n                for (var tempDenom = 1; tempDenom <= denominatorLimit; tempDenom++) {\n                    var tempNumer = Math.round(decimalPart * tempDenom);\n                    var error = Math.abs(decimalPart - tempNumer / tempDenom);\n                    if (error < minError) {\n                        _a = [tempNumer, tempDenom, error], numerator = _a[0], denominator = _a[1], minError = _a[2];\n                    }\n                }\n                var gcd = (0,_common_index__WEBPACK_IMPORTED_MODULE_0__.getGcd)(numerator, denominator);\n                _b = [numerator / gcd, denominator / gcd], numerator = _b[0], denominator = _b[1];\n                if (numerator === denominator) {\n                    valueArr[0] = \"\" + (parseInt(valueArr[0], 10) + 1);\n                }\n                else if (numerator !== 0) {\n                    fractionResult = numerator + \"/\" + denominator;\n                }\n            }\n        }\n        else if (valueArr.length === 2 && !valueArr[1].startsWith('0'.repeat(fractionDigit))) {\n            fractionResult = (0,_common_index__WEBPACK_IMPORTED_MODULE_0__.toFraction)(Number(args.value));\n        }\n        var suffixVal = this.getFormattedNumber(formatArr[0], Math.abs(Number(valueArr[0])));\n        if (fractionResult) {\n            suffixVal = suffixVal === '0' ? '' : suffixVal;\n            return (Number(args.value) < 0 ? '-' : '') + suffixVal + \" \" + fractionResult;\n        }\n        else {\n            return (Number(args.value) < 0 ? '-' : '') + suffixVal + \" \" + '  '.repeat(fractionDigit * 2);\n        }\n    };\n    WorkbookNumberFormat.prototype.checkAndSetColor = function (args) {\n        var colorCode = (0,_base_index__WEBPACK_IMPORTED_MODULE_1__.getColorCode)(args.format);\n        if (colorCode) {\n            args.format = args.format.split(\"[\" + colorCode + \"]\").join('');\n            args.color = colorCode.toLowerCase();\n            this.applyColor(args);\n        }\n    };\n    WorkbookNumberFormat.prototype.findDecimalPlaces = function (code) {\n        var eIndex = code.toUpperCase().indexOf('E');\n        if (eIndex > -1) {\n            var decIndex = code.indexOf(this.localeObj.decimal);\n            if (decIndex === -1 && this.localeObj.decimal !== '.') {\n                decIndex = code.indexOf('.');\n            }\n            return decIndex > 0 ? code.substring(decIndex + 1, eIndex).length : 0;\n        }\n        return 2;\n    };\n    WorkbookNumberFormat.prototype.checkDateFormat = function (args) {\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(args.value)) {\n            return;\n        }\n        var cell = args.cell || (0,_base_index__WEBPACK_IMPORTED_MODULE_1__.getCell)(args.rowIndex, args.colIndex, (0,_base_index__WEBPACK_IMPORTED_MODULE_1__.getSheet)(this.parent, (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(args.sheetIndex) ? this.parent.activeSheetIndex : args.sheetIndex), false, true);\n        var cellFormat = cell.format;\n        if (this.parent.isEdit && getTypeFromFormat(cell.format) === 'Scientific') {\n            cell.format = '';\n        }\n        var props = this.checkCustomDateFormat(args.value.toString(), cell, args.isEdit);\n        if (props.val !== 'Invalid') {\n            var noOfDays = void 0;\n            if (props.format.startsWith('[h]')) {\n                var timeArr = props.val.split(':');\n                if (timeArr.length > 1 && Number(timeArr[0]) >= 24) {\n                    noOfDays = Number(timeArr[0]) / 24;\n                    timeArr[0] = '24';\n                    props.val = timeArr.join(':');\n                }\n            }\n            var dateObj = (0,_common_index__WEBPACK_IMPORTED_MODULE_0__.toDate)(props.val, args.intl || new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.Internationalization(this.parent.locale), this.parent.locale, props.format || args.format, args.skipCellFormat && cell, props.isDateTime);\n            if (dateObj.dateObj && dateObj.dateObj.toString() !== 'Invalid Date') {\n                var year = dateObj.dateObj.getFullYear();\n                if (year >= 1900 && year <= 9999) {\n                    args.isTime = dateObj.type === 'time';\n                    var dateIntVal = (0,_common_index__WEBPACK_IMPORTED_MODULE_0__.dateToInt)(dateObj.dateObj, props.val.includes(':'), args.isTime);\n                    if (noOfDays >= 1) {\n                        dateIntVal += noOfDays;\n                        dateObj.dateObj = (0,_common_index__WEBPACK_IMPORTED_MODULE_0__.intToDate)(dateIntVal);\n                    }\n                    props.val = dateIntVal.toString();\n                    if (!cell.format || cell.format === 'General') {\n                        if (args.isTime) {\n                            cell.format = getFormatFromType('Time');\n                        }\n                        else {\n                            cell.format = getFormatFromType('ShortDate');\n                        }\n                        if (args.updateValue) {\n                            cell.value = props.val;\n                            return;\n                        }\n                    }\n                    args.isDate = dateObj.type === 'date' || dateObj.type === 'datetime';\n                    args.dateObj = dateObj.dateObj;\n                }\n                args.updatedVal = props.val;\n            }\n        }\n        else if (cellFormat) {\n            cell.format = cellFormat;\n        }\n    };\n    WorkbookNumberFormat.prototype.checkCustomTimeFormat = function (val, cell) {\n        var _this = this;\n        var format = [];\n        var am = \" \" + this.localeObj.am;\n        var pm = \" \" + this.localeObj.pm;\n        var isTewlveHr = val.includes(am) || val.includes(pm);\n        if (!isTewlveHr) {\n            if (val.includes(am.toLowerCase()) || val.includes(pm.toLowerCase())) {\n                val = val.replace(am.toLowerCase(), am).replace(pm.toLowerCase(), pm);\n                isTewlveHr = true;\n            }\n        }\n        var timeArr = val.split(this.localeObj.timeSeparator);\n        var isDefaultTime = timeArr.length === 3 && isTewlveHr;\n        var twelveHrRep;\n        if (timeArr.length <= 3) {\n            var timeProp_1;\n            var valArr_1;\n            var maxHour_1 = isTewlveHr ? 12 : 23;\n            timeArr.forEach(function (timeVal, index) {\n                timeVal = timeVal.trim();\n                timeArr[index] = timeVal;\n                if (timeVal.includes(am) || timeVal.includes(pm)) {\n                    twelveHrRep = ' AM/PM';\n                    timeVal = timeVal.replace(am, '').replace(pm, '');\n                }\n                else {\n                    twelveHrRep = '';\n                }\n                timeProp_1 = Number(timeVal);\n                if ((0,_common_index__WEBPACK_IMPORTED_MODULE_0__.isNumber)(timeProp_1) && timeProp_1 >= 0) {\n                    if (timeProp_1 >= 24 && index === 0 && timeArr.length > 1) {\n                        format.push('[h]');\n                    }\n                    else if (timeProp_1 <= maxHour_1 && index === 0) {\n                        format.push('h' + twelveHrRep);\n                        if (timeArr.length === 1) {\n                            if (twelveHrRep) {\n                                valArr_1 = val.split(' ');\n                                valArr_1[0] += _this.localeObj.timeSeparator + \"00\";\n                                timeArr[0] = valArr_1.join(' ');\n                            }\n                            else {\n                                format = [];\n                                val = 'Invalid';\n                            }\n                        }\n                    }\n                    else if (timeProp_1 <= 60 && (format.length === 1 || format.length === 2)) {\n                        if (format.length === 1) {\n                            format.push('mm' + twelveHrRep);\n                            if (timeArr.length === 2 && format[0] === '[h]') {\n                                format.push('ss');\n                            }\n                        }\n                        else {\n                            format.push('ss');\n                        }\n                        if (timeVal.length === 1) {\n                            timeArr[index] = \"0\" + timeArr[index];\n                        }\n                    }\n                    else {\n                        format = [];\n                        val = 'Invalid';\n                    }\n                }\n                else {\n                    format = [];\n                    val = 'Invalid';\n                }\n            });\n        }\n        else {\n            val = 'Invalid';\n        }\n        if (format.length) {\n            val = timeArr.join(this.localeObj.timeSeparator);\n            var formatCode = void 0;\n            if (isDefaultTime) {\n                formatCode = this.customFormats[24];\n            }\n            else {\n                formatCode = format.join(':');\n                if (defaultFormats) {\n                    formatCode = this.getMatchingCustomFormat(formatCode);\n                }\n            }\n            if (!cell.format || cell.format === 'General') {\n                cell.format = formatCode;\n                return { val: val, format: formatCode };\n            }\n        }\n        return { val: val, format: '' };\n    };\n    WorkbookNumberFormat.prototype.checkCustomDateFormat = function (val, cell, isEdit) {\n        var _this = this;\n        var separator;\n        var cellFormat = cell.format;\n        var timeArgs;\n        if (val.includes(this.localeObj.dateSeparator) && ((!val.includes(\" \" + this.localeObj.am) &&\n            !val.includes(\" \" + this.localeObj.pm)) ||\n            val.replace(\" \" + this.localeObj.am, '').replace(\" \" + this.localeObj.pm, '').includes(this.localeObj.dateSeparator))) {\n            separator = this.localeObj.dateSeparator;\n        }\n        else if (val.indexOf('-') > 0) {\n            separator = '-';\n        }\n        else if (val.indexOf(',') > 0) {\n            var intl = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.Internationalization(this.parent.locale);\n            var parsedDate = intl.parseDate(val, { skeleton: 'full' });\n            if (parsedDate && !isNaN(parsedDate.getTime())) {\n                return { val: val, format: '', isDateTime: false };\n            }\n            return { val: 'Invalid', format: '' };\n        }\n        else {\n            if (val.includes(this.localeObj.timeSeparator) || val.includes(\" \" + this.localeObj.am) ||\n                val.includes(\" \" + this.localeObj.pm)) {\n                return this.checkCustomTimeFormat(val, cell);\n            }\n            return { val: 'Invalid', format: '' };\n        }\n        if (val.includes(this.localeObj.timeSeparator) && val.includes(' ')) {\n            var valArr = val.split(' ');\n            val = valArr.shift();\n            timeArgs = this.checkCustomTimeFormat(valArr.join(' '), cell);\n            if (timeArgs.val === 'Invalid') {\n                return { val: 'Invalid', format: '' };\n            }\n        }\n        var dateArr = val.split(separator);\n        var format = '';\n        var formatArr = [];\n        var updateFormat = function (defaultCode) {\n            format = formatArr.join(separator);\n            if (!cellFormat || cellFormat === 'General') {\n                cell.format = defaultCode;\n            }\n        };\n        var firstVal;\n        var formats = _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.IntlBase.getDependables(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.cldrData, this.parent.locale, null).dateObject;\n        var months = formats.months['stand-alone'] ? formats.months['stand-alone'].wide : {};\n        var abbreviatedMonth = formats.months['stand-alone'] ? formats.months['stand-alone'].abbreviated : { '1': '' };\n        var enUSMonth = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n        var isMonth = function (monthValue, monthKey, dateVal, dateLength) {\n            if (abbreviatedMonth[\"\" + monthKey] && abbreviatedMonth[\"\" + monthKey].toLowerCase() === dateVal) {\n                firstVal = enUSMonth[Number(monthKey) - 1];\n                return;\n            }\n            var shortMonthValue = monthValue.substring(0, dateLength);\n            if (shortMonthValue === dateVal) {\n                firstVal = enUSMonth[Number(monthKey) - 1];\n            }\n        };\n        if (dateArr.length === 2) {\n            var updateSecValue = function (secVal) {\n                val = firstVal;\n                formatArr[0] = 'MMM';\n                if (Number(secVal) <= 31 && Number(secVal) > 0) {\n                    val = secVal + separator + val;\n                    if (_this.localeObj.dateSeparator !== '/' && separator !== '-') {\n                        val += separator + new Date().getFullYear();\n                    }\n                    formatArr.splice(0, 0, 'dd');\n                    updateFormat(_this.customFormats[21]);\n                }\n                else {\n                    if (secVal.length === 2 && (0,_common_index__WEBPACK_IMPORTED_MODULE_0__.isNumber)(secVal) && Number(secVal) > -1) {\n                        secVal = (Number(secVal) < 30 ? new Date().getFullYear().toString().slice(0, 2) : '19') + secVal;\n                    }\n                    if (Number(secVal) >= 1900 && Number(secVal) <= 9999) {\n                        val = '1' + separator + val + separator + secVal;\n                        formatArr[1] = 'yyyy';\n                        updateFormat(_this.customFormats[22]);\n                    }\n                    else {\n                        val = 'Invalid'; //Set as Invalid for invalid data like May-June.\n                    }\n                }\n            };\n            dateArr[0] = dateArr[0].toLowerCase().trim();\n            dateArr[1] = dateArr[1].toLowerCase().trim();\n            if (!Number(dateArr[0]) && dateArr[0].length >= abbreviatedMonth['1'].length) {\n                Object.keys(months).find(function (key) { return isMonth(months[\"\" + key].toLowerCase(), key, dateArr[0], dateArr[0].length); });\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(firstVal) && !dateArr[0].includes(',')) { // Added ',' checking to skip updating for the MMM d, yyyy ddd format.\n                    updateSecValue(dateArr[1]);\n                }\n            }\n            else if (!Number(dateArr[1]) && dateArr[1].length >= abbreviatedMonth['1'].length) {\n                Object.keys(months).find(function (key) { return isMonth(months[\"\" + key].toLowerCase(), key, dateArr[1], dateArr[1].length); });\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(firstVal)) {\n                    updateSecValue(dateArr[0]);\n                }\n            }\n            else if (Number(dateArr[0]) && Number(dateArr[0]) <= 12 && Number(dateArr[1]) && (this.localeObj.dateSeparator === '/' ||\n                separator === '-' || (isEdit && !cell.formula))) {\n                firstVal = enUSMonth[Number(dateArr[0]) - 1];\n                updateSecValue(dateArr[1]);\n            }\n            if (!formatArr.length) {\n                val = 'Invalid';\n            }\n        }\n        else if (dateArr.length > 2) {\n            var _loop_2 = function (i) {\n                if ((0,_common_index__WEBPACK_IMPORTED_MODULE_0__.isNumber)(dateArr[i])) {\n                    if (dateArr[i].length !== 4 && dateArr[i].length !== 2 && dateArr[i].length !== 1) {\n                        val = 'Invalid';\n                    }\n                }\n                else {\n                    dateArr[i] = dateArr[i].trim();\n                    Object.keys(months).find(function (key) {\n                        return isMonth(months[\"\" + key].toLowerCase(), key, dateArr[i].trim().toLowerCase(), dateArr[i].length);\n                    });\n                    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(firstVal)) {\n                        if (i === 1) {\n                            formatArr[1] = 'MMM';\n                            dateArr[2] = dateArr[2].trim();\n                            if (dateArr[2].length === 2 && (0,_common_index__WEBPACK_IMPORTED_MODULE_0__.isNumber)(dateArr[2]) && Number(dateArr[2]) > -1) {\n                                dateArr[2] = (Number(dateArr[2]) < 30 ? new Date().getFullYear().toString().slice(0, 2) : '19') + dateArr[2];\n                            }\n                            if (Number(dateArr[0]) <= 31 && Number(dateArr[2]) >= 1900 && Number(dateArr[2]) <= 9999) {\n                                val = dateArr[0] + separator + firstVal;\n                                val += (separator + dateArr[2]);\n                                formatArr[0] = 'd';\n                                formatArr[2] = 'yy';\n                                updateFormat(this_2.customFormats[20]);\n                                // Changed year format alone when given year value with 4 digits like 20-May-2022\n                                formatArr[2] = 'yyyy';\n                                format = formatArr.join(separator);\n                            }\n                        }\n                    }\n                    else {\n                        val = 'Invalid';\n                    }\n                }\n            };\n            var this_2 = this;\n            for (var i = 0; i < dateArr.length; i++) {\n                _loop_2(i);\n            }\n        }\n        var isDateTime;\n        if (timeArgs && val !== 'Invalid') {\n            if (!cellFormat || cellFormat === 'General') {\n                cell.format = this.customFormats[27];\n            }\n            if (format && timeArgs.format) {\n                format += \" \" + timeArgs.format;\n            }\n            val += \" \" + timeArgs.val;\n            isDateTime = true;\n        }\n        return { val: val, format: format, isDateTime: isDateTime };\n    };\n    WorkbookNumberFormat.prototype.formattedBarText = function (args) {\n        var _this = this;\n        if (args.value === '' || (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(args.value)) {\n            return;\n        }\n        var option = {};\n        var format = (args.cell && args.cell.format) || '';\n        var type = args.type || (format && (0,_index__WEBPACK_IMPORTED_MODULE_3__.isCustomDateTime)(format, true, option, true) ? option.type : '');\n        var intl = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.Internationalization();\n        var beforeText = args.value;\n        var date = args.showFormattedText && (format === 'dd-MM-yyyy' || format === 'dd/MM/yyyy') ? format :\n            getFormatFromType('ShortDate');\n        var time = getFormatFromType('Time');\n        if (time === 'h:mm:ss AM/PM') {\n            time = 'h:mm:ss a';\n        }\n        var timeFormat = format.toLowerCase();\n        var parseOtherCultureNumber = function () {\n            if (_this.localeObj.decimal !== '.' && args.value) {\n                args.value = args.value.toString();\n                if ((0,_common_index__WEBPACK_IMPORTED_MODULE_0__.isNumber)(args.value) && args.value.includes('.')) {\n                    args.value = args.value.replace('.', _this.localeObj.decimal);\n                }\n            }\n        };\n        if (type === 'time' && timeFormat.includes('m') && !timeFormat.includes(':m') && !timeFormat.includes('m:') &&\n            !timeFormat.includes('[m') && !timeFormat.includes('am')) {\n            type = 'date';\n        }\n        if (type === 'date') {\n            var val = args.value.toString();\n            args.value = this.shortDateFormat({ type: type, value: args.value, format: date }, intl, args.cell);\n            if (args.value && val.includes('.')) {\n                args.value += \" \" + this.timeFormat({ type: type, value: val, format: time }, intl);\n            }\n        }\n        else if (type.includes('time')) {\n            if (beforeText && Number(beforeText) >= 1 || type === 'datetime') {\n                args.value = this.shortDateFormat({ type: type, value: args.value, format: date }, intl) + ' ' +\n                    this.timeFormat({ type: type, value: args.value, format: time }, intl);\n            }\n            else {\n                args.value = this.timeFormat({ type: type, value: args.value, format: time }, intl);\n            }\n        }\n        else if (args.cell.format && args.cell.format.includes('%') && (0,_common_index__WEBPACK_IMPORTED_MODULE_0__.isNumber)(args.cell.value)) {\n            args.value = this.parent.getDisplayText(args.cell);\n            if (!args.value.includes('%')) {\n                args.value = beforeText;\n                parseOtherCultureNumber();\n            }\n        }\n        else {\n            parseOtherCultureNumber();\n        }\n        if (!args.value || (args.value && args.value.toString().indexOf('null') > -1)) {\n            args.value = beforeText;\n        }\n    };\n    WorkbookNumberFormat.prototype.getFormattedNumber = function (format, value) {\n        return new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.Internationalization().formatNumber(Number(value), { format: format }) || '';\n    };\n    WorkbookNumberFormat.prototype.getMatchingCustomFormat = function (format) {\n        if (format === '#,##0_);(#,##0)' && defaultFormats.has(37)) {\n            return defaultFormats.get(37);\n        }\n        else if (format === '#,##0_);[Red](#,##0)' && defaultFormats.has(38)) {\n            return defaultFormats.get(38);\n        }\n        else if (format === '#,##0.00_);(#,##0.00)' && defaultFormats.has(39)) {\n            return defaultFormats.get(39);\n        }\n        else if (format === '#,##0.00_);[Red](#,##0.00)' && defaultFormats.has(40)) {\n            return defaultFormats.get(40);\n        }\n        else if (format === 'd-mmm-yy' && defaultFormats.has(15)) {\n            return defaultFormats.get(15);\n        }\n        else if (format === 'd-mmm' && defaultFormats.has(16)) {\n            return defaultFormats.get(16);\n        }\n        else if (format === 'mmm-yy' && defaultFormats.has(17)) {\n            return defaultFormats.get(17);\n        }\n        else if (format === 'h:mm AM/PM' && defaultFormats.has(18)) {\n            return defaultFormats.get(18);\n        }\n        else if (format === 'h:mm:ss AM/PM' && defaultFormats.has(19)) {\n            return defaultFormats.get(19);\n        }\n        else if (format === 'h:mm' && defaultFormats.has(20)) {\n            return defaultFormats.get(20);\n        }\n        else if (format === 'h:mm:ss' && defaultFormats.has(21)) {\n            return defaultFormats.get(21);\n        }\n        else if (format === 'm/d/yyyy h:mm' && defaultFormats.has(22)) {\n            return defaultFormats.get(22);\n        }\n        else if (format === 'mm:ss' && defaultFormats.has(45)) {\n            return defaultFormats.get(45);\n        }\n        else {\n            return format;\n        }\n    };\n    /**\n     * Adding event listener for number format.\n     *\n     * @returns {void} - Adding event listener for number format.\n     */\n    WorkbookNumberFormat.prototype.addEventListener = function () {\n        this.parent.on(_common_index__WEBPACK_IMPORTED_MODULE_0__.applyNumberFormatting, this.numberFormatting, this);\n        this.parent.on(_common_index__WEBPACK_IMPORTED_MODULE_0__.getFormattedCellObject, this.getFormattedCell, this);\n        this.parent.on(_common_index__WEBPACK_IMPORTED_MODULE_0__.checkDateFormat, this.checkDateFormat, this);\n        this.parent.on(_common_index__WEBPACK_IMPORTED_MODULE_0__.getFormattedBarText, this.formattedBarText, this);\n        this.parent.on(_common_index__WEBPACK_IMPORTED_MODULE_0__.checkNumberFormat, this.updateAutoDetectNumberFormat, this);\n        this.parent.on(_common_index__WEBPACK_IMPORTED_MODULE_0__.parseDecimalNumber, this.parseDecimalNumber, this);\n        this.parent.on(_common_index__WEBPACK_IMPORTED_MODULE_0__.localizedFormatAction, this.localizedFormatAction, this);\n    };\n    /**\n     * Removing event listener for number format.\n     *\n     * @returns {void} -  Removing event listener for number format.\n     */\n    WorkbookNumberFormat.prototype.removeEventListener = function () {\n        if (!this.parent.isDestroyed) {\n            this.parent.off(_common_index__WEBPACK_IMPORTED_MODULE_0__.applyNumberFormatting, this.numberFormatting);\n            this.parent.off(_common_index__WEBPACK_IMPORTED_MODULE_0__.getFormattedCellObject, this.getFormattedCell);\n            this.parent.off(_common_index__WEBPACK_IMPORTED_MODULE_0__.checkDateFormat, this.checkDateFormat);\n            this.parent.off(_common_index__WEBPACK_IMPORTED_MODULE_0__.getFormattedBarText, this.formattedBarText);\n            this.parent.off(_common_index__WEBPACK_IMPORTED_MODULE_0__.checkNumberFormat, this.updateAutoDetectNumberFormat);\n            this.parent.off(_common_index__WEBPACK_IMPORTED_MODULE_0__.parseDecimalNumber, this.parseDecimalNumber);\n            this.parent.off(_common_index__WEBPACK_IMPORTED_MODULE_0__.localizedFormatAction, this.localizedFormatAction);\n        }\n    };\n    /**\n     * To Remove the event listeners.\n     *\n     * @returns {void} - To Remove the event listeners.\n     */\n    WorkbookNumberFormat.prototype.destroy = function () {\n        this.removeEventListener();\n        if (defaultFormats && !this.parent.refreshing) {\n            defaultFormats.clear();\n            defaultFormats = null;\n        }\n        numberFormatsCode = this.parent = this.localeObj = this.customFormats = this.localizedFormats = null;\n    };\n    /**\n     * Get the workbook number format module name.\n     *\n     * @returns {string} - Get the module name.\n     */\n    WorkbookNumberFormat.prototype.getModuleName = function () {\n        return 'workbookNumberFormat';\n    };\n    return WorkbookNumberFormat;\n}());\n\nvar defaultFormats;\nvar numberFormatsCode;\n/**\n * Retrieves the built-in format code based on the specified number format type in either localized or non-localized format.\n *\n * @param {string} type - Specifies the type of number formatting.\n * @returns {string} - The built-in format code for the specified number format type.\n */\nfunction getFormatFromType(type) {\n    var formatType = type.split(' ').join('');\n    if (!numberFormatsCode) {\n        switch (formatType) {\n            case 'Currency':\n                return '$#,##0.00';\n            case 'Accounting':\n                return '_($* #,##0.00_);_($* (#,##0.00);_($* \"-\"??_);_(@_)';\n            case 'Time':\n                return 'h:mm:ss AM/PM';\n            default:\n                return 'General';\n        }\n    }\n    var getDefaultFormat = function (format, id) {\n        return defaultFormats && defaultFormats.has(id) ? defaultFormats.get(id) : format;\n    };\n    var code = 'General';\n    switch (formatType) {\n        case 'Number':\n            code = getDefaultFormat('0.00', 2);\n            break;\n        case 'Currency':\n            code = numberFormatsCode.currency[0];\n            break;\n        case 'Accounting':\n            code = numberFormatsCode.accounting[2];\n            break;\n        case 'ShortDate':\n            code = getDefaultFormat('m/d/yyyy', 14);\n            break;\n        case 'LongDate':\n            code = 'dddd, mmmm dd, yyyy';\n            break;\n        case 'Time':\n            code = numberFormatsCode.time;\n            break;\n        case 'Percentage':\n            code = getDefaultFormat('0.00%', 10);\n            break;\n        case 'Fraction':\n            code = getDefaultFormat('# ?/?', 12);\n            break;\n        case 'Scientific':\n            code = getDefaultFormat('0.00E+00', 11);\n            break;\n        case 'Text':\n            code = getDefaultFormat('@', 49);\n            break;\n        case 'CurrencyWithColorCode':\n            code = numberFormatsCode.currency[5];\n            break;\n    }\n    return code;\n}\n/**\n * @hidden\n * @param {string} format -  Specidfies the format.\n * @param {boolean} isRibbonUpdate - Specifies where we are updating the type in the number format button.\n * @returns {string} - To get type from format.\n */\nfunction getTypeFromFormat(format, isRibbonUpdate) {\n    var code = 'General';\n    switch (format) {\n        case '0':\n        case '0.00':\n        case '#,##0':\n        case '#,##0.00':\n            code = 'Number';\n            break;\n        case '$#,##0.00':\n        case '$#,##0':\n        case '$#,##0_);[Red]($#,##0)':\n        case '$#,##0.00_);($#,##0.00)':\n        case '$#,##0_);($#,##0)':\n        case '$#,##0.00_);[Red]($#,##0.00)':\n            code = 'Currency';\n            break;\n        case '_($* #,##0.00_);_($* (#,##0.00);_($* \"-\"??_);_(@_)':\n        case '_ $ * #,##0.00_ ;_ $ * -#,##0.00_ ;_ $ * \"-\"??_ ;_ @_ ':\n        case '_($* #,##0_);_($* (#,##0);_($* \"-\"_);_(@_)':\n            code = 'Accounting';\n            break;\n        case 'mm-dd-yyyy':\n        case 'm/d/yyyy':\n        case 'dd/MM/yyyy':\n            code = 'ShortDate';\n            break;\n        case 'dddd, mmmm dd, yyyy':\n            code = 'LongDate';\n            break;\n        case 'h:mm:ss AM/PM':\n            code = 'Time';\n            break;\n        case '0.00%':\n        case '0%':\n            code = 'Percentage';\n            break;\n        case '0.00E+00':\n            code = 'Scientific';\n            break;\n        case '@':\n            code = 'Text';\n            break;\n        default:\n            if (format) {\n                if (!numberFormatsCode) {\n                    break;\n                }\n                if (format === numberFormatsCode.time) {\n                    code = 'Time';\n                }\n                else if (numberFormatsCode.currency.indexOf(format) > -1) {\n                    code = 'Currency';\n                }\n                else if (numberFormatsCode.accounting.indexOf(format) > -1) {\n                    if (isRibbonUpdate) {\n                        code = 'Accounting';\n                    }\n                }\n                else if (format.includes('?/?') || ['2', '4', '8', '16'].indexOf(format.split('?/')[1]) > -1) {\n                    code = 'Fraction';\n                }\n                if (defaultFormats && code === 'General' && isRibbonUpdate) {\n                    var isDefaultFormat = function (ids) {\n                        return ids.some(function (id) { return defaultFormats.has(id) && defaultFormats.get(id) === format; });\n                    };\n                    if (isDefaultFormat([1, 2, 3, 4])) {\n                        code = 'Number';\n                    }\n                    else if (isDefaultFormat([14])) {\n                        code = 'ShortDate';\n                    }\n                    else if (isDefaultFormat([9, 10])) {\n                        code = 'Percentage';\n                    }\n                    else if (isDefaultFormat([11])) {\n                        code = 'Scientific';\n                    }\n                    else if (isDefaultFormat([49])) {\n                        code = 'Text';\n                    }\n                }\n                isRibbonUpdate = false;\n            }\n            break;\n    }\n    if (isRibbonUpdate && numberFormatsCode && ((code === 'Currency' && numberFormatsCode.currency[0] !== '$#,##0.00') ||\n        (code === 'Accounting' && numberFormatsCode.accounting[2] !== '_($* #,##0.00_);_($* (#,##0.00);_($* \"-\"??_);_(@_)'))) {\n        code = 'General';\n    }\n    return code;\n}\n/**\n * This method converts a culture-specific format code, which may include localized decimal separators, group separators, and\n * currency symbols, to a default culture (en-US) format code. The default format uses a default decimal separator (.),\n * group separators (,), and a currency symbol.\n *\n * @param {Workbook} context - Specifies the workbook instance containing the format code to be converted.\n * @param {string} format - The culture-specific format code, with localized decimal separators, group separators, and currency symbols,\n * that needs to be converted to the default format.\n * @returns {string} - Returns the default culture (en-US) format code, using the default decimal separator (.), group separators (,), and\n * currency symbol.\n */\nfunction convertToDefaultFormat(context, format) {\n    var eventArgs = { action: 'parseToDefaultFormat', format: format };\n    context.notify(_common_index__WEBPACK_IMPORTED_MODULE_0__.localizedFormatAction, eventArgs);\n    return eventArgs.format;\n}\n/**\n * Populates culture-based number formats in the custom format dialog. By default, the decimal separator, group separator, and\n * currency symbol are updated based on the current culture. Currency and date formats can vary across cultures.\n * Excel maintains a default number format ID for each format code in the custom format dialog. This method maps these culture-based\n * format codes to their corresponding number format IDs, and the mapped formats will be populated in the custom format dialog.\n *\n * @param {Workbook} context - Specifies the workbook instance. If the component is not initialized, pass null for this parameter.\n * @param {FormatOption[]} formatOptions - Specifies the collection of number format IDs and their corresponding format codes.\n * @param {boolean} [clearMappedFormats] - Specifies whether to clear existing mapped formats or not. By default, this is set to true.\n * @returns {void}\n */\nfunction configureLocalizedFormat(context, formatOptions, clearMappedFormats) {\n    if (clearMappedFormats === void 0) { clearMappedFormats = true; }\n    if (clearMappedFormats && defaultFormats) {\n        defaultFormats.clear();\n        defaultFormats = null;\n    }\n    if (formatOptions && formatOptions.length) {\n        if (!defaultFormats) {\n            defaultFormats = new Map();\n        }\n        formatOptions.forEach(function (format) {\n            defaultFormats.set(format.id, format.code);\n        });\n    }\n    if (context) {\n        context.notify(_common_index__WEBPACK_IMPORTED_MODULE_0__.localizedFormatAction, { action: 'mapNumberFormatId' });\n    }\n}\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-spreadsheet/src/workbook/integrations/number-format.js?");

/***/ })

}]);