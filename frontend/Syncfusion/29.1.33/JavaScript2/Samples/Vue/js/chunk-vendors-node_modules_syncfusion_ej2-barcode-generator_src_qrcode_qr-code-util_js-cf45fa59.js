"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkej2_vue_samples"] = self["webpackChunkej2_vue_samples"] || []).push([["chunk-vendors-node_modules_syncfusion_ej2-barcode-generator_src_qrcode_qr-code-util_js-cf45fa59"],{

/***/ "./node_modules/@syncfusion/ej2-barcode-generator/src/qrcode/qr-code-util.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-barcode-generator/src/qrcode/qr-code-util.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ModuleValue: () => (/* binding */ ModuleValue),\n/* harmony export */   QRCode: () => (/* binding */ QRCode)\n/* harmony export */ });\n/* harmony import */ var _barcode_enum_enum__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../barcode/enum/enum */ \"./node_modules/@syncfusion/ej2-barcode-generator/src/barcode/enum/enum.js\");\n/* harmony import */ var _qr_barcode_values__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./qr-barcode-values */ \"./node_modules/@syncfusion/ej2-barcode-generator/src/qrcode/qr-barcode-values.js\");\n/* harmony import */ var _qr_error_correction__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./qr-error-correction */ \"./node_modules/@syncfusion/ej2-barcode-generator/src/qrcode/qr-error-correction.js\");\n/* harmony import */ var _barcode_utility_dom_util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../barcode/utility/dom-util */ \"./node_modules/@syncfusion/ej2-barcode-generator/src/barcode/utility/dom-util.js\");\n/* harmony import */ var _barcode_rendering_renderer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../barcode/rendering/renderer */ \"./node_modules/@syncfusion/ej2-barcode-generator/src/barcode/rendering/renderer.js\");\n\n\n\n\n\n/**\n * Qrcode used to calculate the Qrcode control\n */\nvar QRCode = /** @class */ (function () {\n    function QRCode() {\n        this.mVersion = _barcode_enum_enum__WEBPACK_IMPORTED_MODULE_0__.QRCodeVersion.Version01;\n        this.mInputMode = 'NumericMode';\n        this.validInput = true;\n        /**\n         * Total bits required in mixing mode.\n         */\n        this.totalBits = 0;\n        /**\n         * Holds the data of Function Pattern.\n         */\n        this.mModuleValue = [];\n        this.mDataAllocationValues = [[], []];\n        /**\n         * Set version for mixing mode.\n         */\n        this.mixVersionERC = true;\n        /**\n         * Data to be currently encoded in Mixing Mode\n         */\n        this.mixExecutablePart = null;\n        /**\n         * Count of mixing mode blocks.\n         */\n        this.mixDataCount = 0;\n        /**\n         * Holds the Number of Modules.\n         */\n        this.mNoOfModules = 21;\n        /**\n         * Check if User Mentioned Mode\n         */\n        this.mIsUserMentionedMode = false;\n        this.chooseDefaultMode = false;\n        this.mixRemainingPart = null;\n        this.isXdimension = false;\n        this.mXDimension = 1;\n        this.mIsEci = false;\n        /** @private */\n        this.mIsUserMentionedErrorCorrectionLevel = false;\n        this.mEciAssignmentNumber = 3;\n        /** @private */\n        this.mIsUserMentionedVersion = false;\n        /** @private */\n        this.mErrorCorrectionLevel = _barcode_enum_enum__WEBPACK_IMPORTED_MODULE_0__.ErrorCorrectionLevel.Low;\n        this.textList = [];\n        this.mode = [];\n    }\n    Object.defineProperty(QRCode.prototype, \"XDimension\", {\n        /**\n         * Get or Private set the XDimension values.\n         *\n         * @returns {number}Get or Private set the XDimension values..\n         * @private\n         */\n        get: function () {\n            return this.mXDimension;\n        },\n        /**\n         *  Get or Private set the XDimension values.\n         *\n         * @param {number} value - Get or Private set the XDimension values.\n         * @private\n         */\n        set: function (value) {\n            this.mXDimension = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(QRCode.prototype, \"inputMode\", {\n        get: function () {\n            return this.mInputMode;\n        },\n        set: function (value) {\n            this.mInputMode = value;\n            this.mIsUserMentionedMode = true;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(QRCode.prototype, \"version\", {\n        /**\n         *Get or Private set the version\n         *\n         * @returns {QRCodeVersion}Get or Private set the version\n         * @private\n         */\n        get: function () {\n            return this.mVersion;\n        },\n        /**\n         *  Get or Private set the version\n         *\n         * @param {QRCodeVersion} value - Get or Private set the version\n         * @private\n         */\n        set: function (value) {\n            this.mVersion = value;\n            this.mNoOfModules = (this.mVersion - 1) * 4 + 21;\n            if (value !== _barcode_enum_enum__WEBPACK_IMPORTED_MODULE_0__.QRCodeVersion.Auto) {\n                this.mIsUserMentionedVersion = true;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    QRCode.prototype.getBaseAttributes = function (width, height, offSetX, offsetY, color, strokeColor) {\n        var options = {\n            width: width, height: height, x: offSetX, y: offsetY, color: color, strokeColor: strokeColor\n        };\n        return options;\n    };\n    QRCode.prototype.getInstance = function (id) {\n        var barCode = document.getElementById(id);\n        var barcodeRenderer = new _barcode_rendering_renderer__WEBPACK_IMPORTED_MODULE_4__.BarcodeRenderer(barCode.id, this.isSvgMode);\n        return barcodeRenderer;\n    };\n    QRCode.prototype.drawImage = function (canvas, options) {\n        // render image for the qrcode generator\n        var barcodeRenderer = this.getInstance(canvas.id);\n        for (var i = 0; i < options.length; i++) {\n            barcodeRenderer.renderRectElement(canvas, options[parseInt(i.toString(), 10)]);\n        }\n    };\n    /**\n     * Draw the QR code in SVG.\n     *\n     *  @param {HTMLElement} char - Provide the char to render .\n     *  @param {HTMLElement} canvas - Provide the canvas element .\n     *  @param {HTMLElement} height - Provide the height for the canvas element .\n     *  @param {HTMLElement} width - Provide the width for the canvas element .\n     *  @param {HTMLElement} margin - Provide the margin for thecanvas element .\n     *  @param {HTMLElement} displayText - Provide display text for the canvas element .\n     *  @param {HTMLElement} mode - Provide the mode to render .\n     *  @param {HTMLElement} foreColor - Provide the color for the barcode to render.\n     *  @param {HTMLElement} logo - Provide the logo for the QR code.\n     *  @returns {boolean} Draw the barcode SVG .\n     *  @private\n     */\n    QRCode.prototype.draw = function (char, canvas, height, width, margin, displayText, mode, foreColor, logo) {\n        this.isSvgMode = mode;\n        this.generateValues();\n        if (this.validInput) {\n            var size = void 0;\n            var actualWidth = width - (margin.left + margin.right);\n            var actualHeight = height - (margin.top + margin.bottom);\n            size = (actualWidth >= actualHeight) ? actualHeight : actualWidth;\n            var dimension = this.XDimension;\n            var quietZone = _barcode_enum_enum__WEBPACK_IMPORTED_MODULE_0__.QuietZone.All;\n            var x = (actualWidth >= size) ? (actualWidth - size) / 2 : 0;\n            var y = (actualHeight >= size) ? (actualHeight - size) / 2 : 0;\n            y += margin.top;\n            x += margin.left;\n            var textBounds = this.drawDisplayText(canvas, x, y, size, actualHeight, displayText, char, margin, foreColor);\n            actualHeight -= (textBounds.height);\n            if (displayText.margin.bottom > 0) {\n                if (displayText.position === 'Top') {\n                    y += (displayText.margin.bottom);\n                    actualHeight -= (displayText.margin.bottom);\n                }\n                else {\n                    actualHeight -= displayText.margin.bottom;\n                }\n            }\n            if (displayText.margin.top > 0) {\n                if (displayText.position === 'Top') {\n                    y += (displayText.margin.top);\n                    actualHeight -= (displayText.margin.top);\n                }\n                else {\n                    actualHeight -= displayText.margin.top;\n                }\n            }\n            size = (actualWidth >= actualHeight) ? actualHeight : actualWidth;\n            var moduleCount = this.mNoOfModules + 2 * quietZone + 1;\n            dimension = size / moduleCount;\n            // Calculations to place the logo in the center of the QR code.\n            var imageBound = null;\n            var imageAttributes = null;\n            if (logo !== null && logo.imageSource !== '') {\n                x = ((actualWidth >= size) ? (actualWidth - size) / 2 : 0) + margin.left;\n                var qrsize = size - (((2 * quietZone) + 1) * dimension);\n                var sizeRatio = 0.3;\n                var imgwidth = logo.width ? Math.min(logo.width, qrsize * sizeRatio) : qrsize * sizeRatio;\n                var imgheight = logo.height ? Math.min(logo.height, qrsize * sizeRatio) : qrsize * sizeRatio;\n                var ximg = (x + (quietZone * dimension)) + (qrsize / 2) - (imgwidth / 2);\n                var yimg = (y + (quietZone * dimension)) + (qrsize / 2) - (imgheight / 2);\n                imageAttributes = {\n                    x: ximg,\n                    y: yimg,\n                    width: imgwidth,\n                    height: imgheight,\n                    color: 'transparent',\n                    imageSource: logo.imageSource\n                };\n                imageBound = {\n                    x: imageAttributes.x,\n                    y: imageAttributes.y,\n                    width: imageAttributes.width,\n                    height: imageAttributes.height\n                };\n            }\n            this.isXdimension = true;\n            width = (this.mNoOfModules + 2 * quietZone) * dimension;\n            height = (this.mNoOfModules + 2 * quietZone) * dimension;\n            var w = this.mNoOfModules + 2 * quietZone;\n            var h = this.mNoOfModules + 2 * quietZone;\n            var optionsCollection = [];\n            for (var i = 0; i < w; i++) {\n                for (var j = 0; j < h; j++) {\n                    var color = void 0;\n                    color = (this.mModuleValue[parseInt(i.toString(), 10)][parseInt(j.toString(), 10)].isBlack) ? foreColor : 'white';\n                    if (this.mDataAllocationValues[parseInt(j.toString(), 10)][parseInt(i.toString(), 10)].isFilled) {\n                        if (this.mDataAllocationValues[parseInt(j.toString(), 10)][parseInt(i.toString(), 10)].isBlack) {\n                            color = foreColor;\n                        }\n                    }\n                    if (color !== 'white') {\n                        var options = this.getBaseAttributes(dimension, dimension, x, displayText.position === 'Bottom' ? y : y + textBounds.height / 2, color);\n                        // To exclude options, if it is contained by imageBounds region.\n                        var currentBound = { x: options.x, y: options.y, width: dimension, height: dimension };\n                        if (imageBound == null || !this.containsRect(imageBound, currentBound)) {\n                            optionsCollection.push(options);\n                        }\n                    }\n                    x = x + dimension;\n                }\n                y = y + dimension;\n                x = ((actualWidth >= size) ? (actualWidth - size) / 2 : 0) + margin.left;\n            }\n            this.drawImage(canvas, optionsCollection);\n            if (imageAttributes) {\n                this.drawImage(canvas, [imageAttributes]);\n            }\n            this.mModuleValue = undefined;\n            this.mDataAllocationValues = undefined;\n            return true;\n        }\n        else {\n            return false;\n        }\n    };\n    // Helper function to check if one rectangle contains another\n    QRCode.prototype.containsRect = function (rect1, rect2) {\n        return rect1.x <= rect2.x &&\n            rect1.x + rect1.width >= rect2.x + rect2.width &&\n            rect1.y <= rect2.y &&\n            rect1.y + rect1.height >= rect2.y + rect2.height;\n    };\n    QRCode.prototype.drawText = function (canvas, options) {\n        var barcodeRenderer = this.getInstance(canvas.id);\n        barcodeRenderer.renderTextElement(canvas, options);\n    };\n    QRCode.prototype.drawDisplayText = function (canvas, x, y, width, height, text, value, margin, foreColor) {\n        var displayText = text;\n        (0,_barcode_utility_dom_util__WEBPACK_IMPORTED_MODULE_3__.createMeasureElements)();\n        var options = this.getBaseAttributes(width, height, x, y, 'black');\n        options.string = (displayText.text ? displayText.text : value);\n        options.color = foreColor;\n        options.fontStyle = displayText.font;\n        options.stringSize = displayText.size;\n        options.visibility = displayText.visibility;\n        var textSize = (0,_barcode_utility_dom_util__WEBPACK_IMPORTED_MODULE_3__.measureText)(options);\n        var textHeight = (textSize.height / 2) + 2;\n        options.height = textHeight;\n        options.x = ((x + width / 2) - textSize.width / 2) + displayText.margin.left - displayText.margin.right;\n        if (text.position === 'Bottom') {\n            if (text.margin.top > 0) {\n                options.y = ((y + height));\n            }\n            if (text.margin.bottom > 0) {\n                options.y = ((y + height)) - displayText.margin.bottom;\n            }\n            else {\n                if (margin.top < 10) {\n                    options.y = height + textSize.height / 2;\n                }\n                else {\n                    options.y = height + margin.top;\n                }\n            }\n        }\n        else {\n            if (text.margin.top > 0) {\n                options.y = y + text.margin.top + textSize.height / 2;\n            }\n            else {\n                options.y = y + textSize.height / 2;\n            }\n        }\n        if (text.visibility) {\n            this.drawText(canvas, options);\n        }\n        return options;\n    };\n    QRCode.prototype.generateValues = function () {\n        this.mQrBarcodeValues = new _qr_barcode_values__WEBPACK_IMPORTED_MODULE_1__.PdfQRBarcodeValues(this.mVersion, this.mErrorCorrectionLevel);\n        this.initialize();\n        this.mQrBarcodeValues = new _qr_barcode_values__WEBPACK_IMPORTED_MODULE_1__.PdfQRBarcodeValues(this.mVersion, this.mErrorCorrectionLevel);\n        for (var i = 0; i < this.mNoOfModules; i++) {\n            // eslint-disable-next-line\n            this.mModuleValue.push([0]);\n            for (var j = 0; j < this.mNoOfModules; j++) {\n                this.mModuleValue[parseInt(i.toString(), 10)][parseInt(j.toString(), 10)] = new ModuleValue();\n            }\n        }\n        this.drawPDP(0, 0);\n        this.drawPDP(this.mNoOfModules - 7, 0);\n        this.drawPDP(0, this.mNoOfModules - 7);\n        this.drawTimingPattern();\n        if (this.mVersion !== 1) {\n            var allignCoOrdinates = this.getAlignmentPatternCoOrdinates();\n            for (var _i = 0, _a = Object.keys(allignCoOrdinates); _i < _a.length; _i++) {\n                var i = _a[_i];\n                for (var _b = 0, _c = Object.keys(allignCoOrdinates); _b < _c.length; _b++) {\n                    var j = _c[_b];\n                    if (!this.mModuleValue[allignCoOrdinates[\"\" + i]][allignCoOrdinates[\"\" + j]].isPdp) {\n                        this.drawAlignmentPattern(allignCoOrdinates[\"\" + i], allignCoOrdinates[\"\" + j]);\n                    }\n                }\n            }\n        }\n        this.allocateFormatAndVersionInformation();\n        var encodeData = null;\n        encodeData = this.encodeData();\n        this.dataAllocationAndMasking(encodeData);\n        this.drawFormatInformation();\n        this.addQuietZone();\n        this.mQrBarcodeValues.FormatInformation = undefined;\n        this.mQrBarcodeValues.NumberOfDataCodeWord = undefined;\n        this.mQrBarcodeValues.NumberOfErrorCorrectingCodeWords = undefined;\n        this.mQrBarcodeValues.VersionInformation = undefined;\n        this.mQrBarcodeValues.alphanumericDataCapacityHigh = undefined;\n        this.mQrBarcodeValues.alphanumericDataCapacityLow = undefined;\n        this.mQrBarcodeValues.alphanumericDataCapacityMedium = undefined;\n        this.mQrBarcodeValues.alphanumericDataCapacityQuartile = undefined;\n        this.mQrBarcodeValues.binaryDataCapacityHigh = undefined;\n        this.mQrBarcodeValues.dataCapacityValues = undefined;\n        this.mQrBarcodeValues.endValues = undefined;\n        this.mQrBarcodeValues.dataCapacityValues = undefined;\n        this.mQrBarcodeValues = undefined;\n        this.mIsUserMentionedVersion = undefined;\n        this.mVersion = undefined;\n    };\n    /**\n     * Draw the PDP in the given location\n     *\n     * @returns {void} Draw the PDP in the given location.\n     * @param {string} x - The x co-ordinate.\n     * @param {string} y - The y co-ordinate.\n     * @private\n     */\n    QRCode.prototype.drawPDP = function (x, y) {\n        var i;\n        var j;\n        for (i = x, j = y; i < x + 7; i++, j++) {\n            this.mModuleValue[parseInt(i.toString(), 10)][parseInt(y.toString(), 10)].isBlack = true;\n            this.mModuleValue[parseInt(i.toString(), 10)][parseInt(y.toString(), 10)].isFilled = true;\n            this.mModuleValue[parseInt(i.toString(), 10)][parseInt(y.toString(), 10)].isPdp = true;\n            this.mModuleValue[parseInt(i.toString(), 10)][y + 6].isBlack = true;\n            this.mModuleValue[parseInt(i.toString(), 10)][y + 6].isFilled = true;\n            this.mModuleValue[parseInt(i.toString(), 10)][y + 6].isPdp = true;\n            if (y + 7 < this.mNoOfModules) {\n                this.mModuleValue[parseInt(i.toString(), 10)][y + 7].isBlack = false;\n                this.mModuleValue[parseInt(i.toString(), 10)][y + 7].isFilled = true;\n                this.mModuleValue[parseInt(i.toString(), 10)][y + 7].isPdp = true;\n            }\n            else if (y - 1 >= 0) {\n                this.mModuleValue[parseInt(i.toString(), 10)][y - 1].isBlack = false;\n                this.mModuleValue[parseInt(i.toString(), 10)][y - 1].isFilled = true;\n                this.mModuleValue[parseInt(i.toString(), 10)][y - 1].isPdp = true;\n            }\n            this.mModuleValue[parseInt(x.toString(), 10)][parseInt(j.toString(), 10)].isBlack = true;\n            this.mModuleValue[parseInt(x.toString(), 10)][parseInt(j.toString(), 10)].isFilled = true;\n            this.mModuleValue[parseInt(x.toString(), 10)][parseInt(j.toString(), 10)].isPdp = true;\n            this.mModuleValue[x + 6][parseInt(j.toString(), 10)].isBlack = true;\n            this.mModuleValue[x + 6][parseInt(j.toString(), 10)].isFilled = true;\n            this.mModuleValue[x + 6][parseInt(j.toString(), 10)].isPdp = true;\n            if (x + 7 < this.mNoOfModules) {\n                this.mModuleValue[x + 7][parseInt(j.toString(), 10)].isBlack = false;\n                this.mModuleValue[x + 7][parseInt(j.toString(), 10)].isFilled = true;\n                this.mModuleValue[x + 7][parseInt(j.toString(), 10)].isPdp = true;\n            }\n            else if (x - 1 >= 0) {\n                this.mModuleValue[x - 1][parseInt(j.toString(), 10)].isBlack = false;\n                this.mModuleValue[x - 1][parseInt(j.toString(), 10)].isFilled = true;\n                this.mModuleValue[x - 1][parseInt(j.toString(), 10)].isPdp = true;\n            }\n        }\n        if (x + 7 < this.mNoOfModules && y + 7 < this.mNoOfModules) {\n            this.mModuleValue[x + 7][y + 7].isBlack = false;\n            this.mModuleValue[x + 7][y + 7].isFilled = true;\n            this.mModuleValue[x + 7][y + 7].isPdp = true;\n        }\n        else if (x + 7 < this.mNoOfModules && y + 7 >= this.mNoOfModules) {\n            this.mModuleValue[x + 7][y - 1].isBlack = false;\n            this.mModuleValue[x + 7][y - 1].isFilled = true;\n            this.mModuleValue[x + 7][y - 1].isPdp = true;\n        }\n        else if (x + 7 >= this.mNoOfModules && y + 7 < this.mNoOfModules) {\n            this.mModuleValue[x - 1][y + 7].isBlack = false;\n            this.mModuleValue[x - 1][y + 7].isFilled = true;\n            this.mModuleValue[x - 1][y + 7].isPdp = true;\n        }\n        x++;\n        y++;\n        for (i = x, j = y; i < x + 5; i++, j++) {\n            this.mModuleValue[parseInt(i.toString(), 10)][parseInt(y.toString(), 10)].isBlack = false;\n            this.mModuleValue[parseInt(i.toString(), 10)][parseInt(y.toString(), 10)].isFilled = true;\n            this.mModuleValue[parseInt(i.toString(), 10)][parseInt(y.toString(), 10)].isPdp = true;\n            this.mModuleValue[parseInt(i.toString(), 10)][y + 4].isBlack = false;\n            this.mModuleValue[parseInt(i.toString(), 10)][y + 4].isFilled = true;\n            this.mModuleValue[parseInt(i.toString(), 10)][y + 4].isPdp = true;\n            this.mModuleValue[parseInt(x.toString(), 10)][parseInt(j.toString(), 10)].isBlack = false;\n            this.mModuleValue[parseInt(x.toString(), 10)][parseInt(j.toString(), 10)].isFilled = true;\n            this.mModuleValue[parseInt(x.toString(), 10)][parseInt(j.toString(), 10)].isPdp = true;\n            this.mModuleValue[x + 4][parseInt(j.toString(), 10)].isBlack = false;\n            this.mModuleValue[x + 4][parseInt(j.toString(), 10)].isFilled = true;\n            this.mModuleValue[x + 4][parseInt(j.toString(), 10)].isPdp = true;\n        }\n        x++;\n        y++;\n        for (i = x, j = y; i < x + 3; i++, j++) {\n            this.mModuleValue[parseInt(i.toString(), 10)][parseInt(y.toString(), 10)].isBlack = true;\n            this.mModuleValue[parseInt(i.toString(), 10)][parseInt(y.toString(), 10)].isFilled = true;\n            this.mModuleValue[parseInt(i.toString(), 10)][parseInt(y.toString(), 10)].isPdp = true;\n            this.mModuleValue[parseInt(i.toString(), 10)][y + 2].isBlack = true;\n            this.mModuleValue[parseInt(i.toString(), 10)][y + 2].isFilled = true;\n            this.mModuleValue[parseInt(i.toString(), 10)][y + 2].isPdp = true;\n            this.mModuleValue[parseInt(x.toString(), 10)][parseInt(j.toString(), 10)].isBlack = true;\n            this.mModuleValue[parseInt(x.toString(), 10)][parseInt(j.toString(), 10)].isFilled = true;\n            this.mModuleValue[parseInt(x.toString(), 10)][parseInt(j.toString(), 10)].isPdp = true;\n            this.mModuleValue[x + 2][parseInt(j.toString(), 10)].isBlack = true;\n            this.mModuleValue[x + 2][parseInt(j.toString(), 10)].isFilled = true;\n            this.mModuleValue[x + 2][parseInt(j.toString(), 10)].isPdp = true;\n        }\n        this.mModuleValue[x + 1][y + 1].isBlack = true;\n        this.mModuleValue[x + 1][y + 1].isFilled = true;\n        this.mModuleValue[x + 1][y + 1].isPdp = true;\n    };\n    /**\n     * Draw the Timing Pattern\n     *\n     * @returns {void} Draw the PDP in the given location.\n     * @private\n     */\n    QRCode.prototype.drawTimingPattern = function () {\n        for (var i = 8; i < this.mNoOfModules - 8; i += 2) {\n            this.mModuleValue[parseInt(i.toString(), 10)][6].isBlack = true;\n            this.mModuleValue[parseInt(i.toString(), 10)][6].isFilled = true;\n            this.mModuleValue[i + 1][6].isBlack = false;\n            this.mModuleValue[i + 1][6].isFilled = true;\n            this.mModuleValue[6][parseInt(i.toString(), 10)].isBlack = true;\n            this.mModuleValue[6][parseInt(i.toString(), 10)].isFilled = true;\n            this.mModuleValue[6][i + 1].isBlack = false;\n            this.mModuleValue[6][i + 1].isFilled = true;\n        }\n        this.mModuleValue[this.mNoOfModules - 8][8].isBlack = true;\n        this.mModuleValue[this.mNoOfModules - 8][8].isFilled = true;\n    };\n    /* tslint:disable */\n    QRCode.prototype.initialize = function () {\n        if (!this.mIsUserMentionedMode) {\n            this.chooseDefaultMode = true;\n        }\n        //Task 913517: Handle null properties for diagram and barcode properties -phase1\n        this.mVersion = this.mVersion || 1;\n        this.mErrorCorrectionLevel = this.mErrorCorrectionLevel || 7;\n        var mode = 'NumericMode';\n        //const alphaCount: number = 0;\n        //const numCount: number = 0;\n        //const binaryCount: number = 0;\n        for (var i = 0; i < this.text.length; i++) {\n            // eslint-disable-next-line\n            if (this.text.charCodeAt(i) < 58 && this.text.charCodeAt(i) > 47) {\n            }\n            else if ((this.text.charCodeAt(i) < 91 && this.text.charCodeAt(i) > 64) ||\n                this.text[parseInt(i.toString(), 10)] === '$' || this.text[parseInt(i.toString(), 10)] === '%' || this.text[parseInt(i.toString(), 10)] === '*' ||\n                this.text[parseInt(i.toString(), 10)] === '+' || this.text[parseInt(i.toString(), 10)] === '-' || this.text[parseInt(i.toString(), 10)] === '.' ||\n                this.text[parseInt(i.toString(), 10)] === '/' || this.text[parseInt(i.toString(), 10)] === ':' || this.text[parseInt(i.toString(), 10)] === ' ') {\n                mode = 'AlphaNumericMode';\n            }\n            else if ((this.text.charCodeAt(i) >= 65377 && this.text.charCodeAt(i) <= 65439) ||\n                (this.text.charCodeAt(i) >= 97 && this.text.charCodeAt(i) <= 122)) {\n                mode = 'BinaryMode';\n                break;\n            }\n            else {\n                mode = 'BinaryMode';\n                this.mIsEci = true;\n                break;\n            }\n        }\n        if (this.mIsUserMentionedMode) {\n            if (mode !== this.mInputMode) {\n                if (((mode === 'AlphaNumericMode' || mode === 'BinaryMode') && this.mInputMode === 'NumericMode')\n                    || (mode === 'BinaryMode' && this.mInputMode === 'AlphaNumericMode')) {\n                    this.validInput = false;\n                    if (mode !== this.mInputMode) {\n                        if (((mode === 'AlphaNumericMode' || mode === 'BinaryMode') && this.mInputMode === 'NumericMode')\n                            || (mode === 'BinaryMode' && this.mInputMode === 'AlphaNumericMode')) {\n                            this.validInput = false;\n                        }\n                    }\n                }\n            }\n        }\n        this.inputMode = mode;\n        if (this.mIsEci === true) {\n            for (var i = 0; i < this.text.length; i++) {\n                if (this.text.charCodeAt(i) >= 32 && this.text.charCodeAt(i) <= 255) {\n                    continue;\n                }\n            }\n        }\n        if (this.mixVersionERC) {\n            if (!this.mIsUserMentionedVersion || (this.mVersion & _barcode_enum_enum__WEBPACK_IMPORTED_MODULE_0__.QRCodeVersion.Auto)) {\n                var dataCapacityOfVersions = null;\n                if (this.mIsUserMentionedErrorCorrectionLevel) {\n                    switch (this.mInputMode) {\n                        case 'NumericMode':\n                            switch (this.mErrorCorrectionLevel) {\n                                case 7:\n                                    dataCapacityOfVersions = this.mQrBarcodeValues.numericDataCapacityLow;\n                                    break;\n                                case 15:\n                                    dataCapacityOfVersions = this.mQrBarcodeValues.numericDataCapacityMedium;\n                                    break;\n                                case 25:\n                                    dataCapacityOfVersions = this.mQrBarcodeValues.numericDataCapacityQuartile;\n                                    break;\n                                case 30:\n                                    dataCapacityOfVersions = this.mQrBarcodeValues.numericDataCapacityHigh;\n                                    break;\n                            }\n                            break;\n                        case 'AlphaNumericMode':\n                            switch (this.mErrorCorrectionLevel) {\n                                case 7:\n                                    dataCapacityOfVersions = this.mQrBarcodeValues.alphanumericDataCapacityLow;\n                                    break;\n                                case 15:\n                                    dataCapacityOfVersions = this.mQrBarcodeValues.alphanumericDataCapacityMedium;\n                                    break;\n                                case 25:\n                                    dataCapacityOfVersions = this.mQrBarcodeValues.alphanumericDataCapacityQuartile;\n                                    break;\n                                case 30:\n                                    dataCapacityOfVersions = this.mQrBarcodeValues.alphanumericDataCapacityHigh;\n                                    break;\n                            }\n                            break;\n                        case 'BinaryMode':\n                            switch (this.mErrorCorrectionLevel) {\n                                case 7:\n                                    dataCapacityOfVersions = this.mQrBarcodeValues.binaryDataCapacityLow;\n                                    break;\n                                case 15:\n                                    dataCapacityOfVersions = this.mQrBarcodeValues.binaryDataCapacityMedium;\n                                    break;\n                                case 25:\n                                    dataCapacityOfVersions = this.mQrBarcodeValues.binaryDataCapacityQuartile;\n                                    break;\n                                case 30:\n                                    dataCapacityOfVersions = this.mQrBarcodeValues.binaryDataCapacityHigh;\n                                    break;\n                            }\n                            break;\n                    }\n                }\n                else {\n                    this.mErrorCorrectionLevel = _barcode_enum_enum__WEBPACK_IMPORTED_MODULE_0__.ErrorCorrectionLevel.Medium;\n                    switch (this.mInputMode) {\n                        case 'NumericMode':\n                            dataCapacityOfVersions = this.mQrBarcodeValues.numericDataCapacityMedium;\n                            break;\n                        case 'AlphaNumericMode':\n                            dataCapacityOfVersions = this.mQrBarcodeValues.alphanumericDataCapacityMedium;\n                            break;\n                        case 'BinaryMode':\n                            dataCapacityOfVersions = this.mQrBarcodeValues.binaryDataCapacityMedium;\n                            break;\n                    }\n                }\n                var i = void 0;\n                for (i = 0; i < dataCapacityOfVersions.length; i++) {\n                    if (dataCapacityOfVersions[parseInt(i.toString(), 10)] > this.text.length) {\n                        break;\n                    }\n                }\n                this.version = i + 1;\n            }\n            else if (this.mIsUserMentionedVersion) {\n                if (this.mIsUserMentionedErrorCorrectionLevel) {\n                    var capacity = 0;\n                    if (this.mInputMode === 'AlphaNumericMode') {\n                        capacity = this.mQrBarcodeValues.getAlphanumericDataCapacity(this.mVersion, this.mErrorCorrectionLevel);\n                    }\n                    else if (this.mInputMode === 'NumericMode') {\n                        capacity = this.mQrBarcodeValues.getNumericDataCapacity(this.mVersion, this.mErrorCorrectionLevel);\n                    }\n                    if (this.mInputMode === 'BinaryMode') {\n                        capacity = this.mQrBarcodeValues.getBinaryDataCapacity(this.mVersion, this.mErrorCorrectionLevel);\n                    }\n                    if (capacity < this.text.length) {\n                        if (!this.chooseDefaultMode) {\n                            this.validInput = false;\n                        }\n                        else {\n                            this.mixVersionERC = false;\n                        }\n                    }\n                }\n                else {\n                    var capacityLow = 0;\n                    var capacityMedium = 0;\n                    var capacityQuartile = 0;\n                    var capacityHigh = 0;\n                    if (this.mInputMode === 'AlphaNumericMode') {\n                        capacityLow = this.mQrBarcodeValues.getAlphanumericDataCapacity(this.mVersion, _barcode_enum_enum__WEBPACK_IMPORTED_MODULE_0__.ErrorCorrectionLevel.Low);\n                        capacityMedium = this.mQrBarcodeValues.getAlphanumericDataCapacity(this.mVersion, _barcode_enum_enum__WEBPACK_IMPORTED_MODULE_0__.ErrorCorrectionLevel.Medium);\n                        capacityQuartile = this.mQrBarcodeValues.getAlphanumericDataCapacity(this.mVersion, _barcode_enum_enum__WEBPACK_IMPORTED_MODULE_0__.ErrorCorrectionLevel.Quartile);\n                        capacityHigh = this.mQrBarcodeValues.getAlphanumericDataCapacity(this.mVersion, _barcode_enum_enum__WEBPACK_IMPORTED_MODULE_0__.ErrorCorrectionLevel.High);\n                    }\n                    else if (this.mInputMode === 'NumericMode') {\n                        capacityLow = this.mQrBarcodeValues.getNumericDataCapacity(this.mVersion, _barcode_enum_enum__WEBPACK_IMPORTED_MODULE_0__.ErrorCorrectionLevel.Low);\n                        capacityMedium = this.mQrBarcodeValues.getNumericDataCapacity(this.mVersion, _barcode_enum_enum__WEBPACK_IMPORTED_MODULE_0__.ErrorCorrectionLevel.Medium);\n                        capacityQuartile = this.mQrBarcodeValues.getNumericDataCapacity(this.mVersion, _barcode_enum_enum__WEBPACK_IMPORTED_MODULE_0__.ErrorCorrectionLevel.Quartile);\n                        capacityHigh = this.mQrBarcodeValues.getNumericDataCapacity(this.mVersion, _barcode_enum_enum__WEBPACK_IMPORTED_MODULE_0__.ErrorCorrectionLevel.High);\n                    }\n                    else if (this.mInputMode === 'BinaryMode') {\n                        capacityLow = this.mQrBarcodeValues.getBinaryDataCapacity(this.mVersion, _barcode_enum_enum__WEBPACK_IMPORTED_MODULE_0__.ErrorCorrectionLevel.Low);\n                        capacityMedium = this.mQrBarcodeValues.getBinaryDataCapacity(this.mVersion, _barcode_enum_enum__WEBPACK_IMPORTED_MODULE_0__.ErrorCorrectionLevel.Medium);\n                        capacityQuartile = this.mQrBarcodeValues.getBinaryDataCapacity(this.mVersion, _barcode_enum_enum__WEBPACK_IMPORTED_MODULE_0__.ErrorCorrectionLevel.Quartile);\n                        capacityHigh = this.mQrBarcodeValues.getBinaryDataCapacity(this.mVersion, _barcode_enum_enum__WEBPACK_IMPORTED_MODULE_0__.ErrorCorrectionLevel.High);\n                    }\n                    if (capacityHigh > this.text.length) {\n                        this.mErrorCorrectionLevel = _barcode_enum_enum__WEBPACK_IMPORTED_MODULE_0__.ErrorCorrectionLevel.High;\n                    }\n                    else if (capacityQuartile > this.text.length) {\n                        this.mErrorCorrectionLevel = _barcode_enum_enum__WEBPACK_IMPORTED_MODULE_0__.ErrorCorrectionLevel.Quartile;\n                    }\n                    else if (capacityMedium > this.text.length) {\n                        this.mErrorCorrectionLevel = _barcode_enum_enum__WEBPACK_IMPORTED_MODULE_0__.ErrorCorrectionLevel.Medium;\n                    }\n                    else if (capacityLow > this.text.length) {\n                        this.mErrorCorrectionLevel = _barcode_enum_enum__WEBPACK_IMPORTED_MODULE_0__.ErrorCorrectionLevel.Low;\n                    }\n                    else {\n                        this.validInput = false;\n                    }\n                }\n            }\n        }\n    };\n    /* tslint:enable */\n    /**\n     * Adds quietzone to the QR Barcode..\\\n     *\n     * @returns {void}  Adds quietzone to the QR Barcode. .\n     * @private\n     */\n    QRCode.prototype.addQuietZone = function () {\n        var quietZone = _barcode_enum_enum__WEBPACK_IMPORTED_MODULE_0__.QuietZone.All;\n        var w = this.mNoOfModules + 2 * quietZone;\n        var h = this.mNoOfModules + 2 * quietZone;\n        var tempValue1 = [];\n        var tempValue2 = [];\n        for (var i = 0; i < w; i++) {\n            // tslint:disable-next-line:no-any\n            // eslint-disable-next-line\n            tempValue1.push([0]);\n            // tslint:disable-next-line:no-any\n            // eslint-disable-next-line\n            tempValue2.push([0]);\n            for (var j = 0; j < h; j++) {\n                tempValue1[parseInt(i.toString(), 10)][parseInt(j.toString(), 10)] = new ModuleValue();\n                tempValue2[parseInt(i.toString(), 10)][parseInt(j.toString(), 10)] = new ModuleValue();\n            }\n        }\n        // Top quietzone.\n        for (var i = 0; i < h; i++) {\n            tempValue1[0][parseInt(i.toString(), 10)] = new ModuleValue();\n            tempValue1[0][parseInt(i.toString(), 10)].isBlack = false;\n            tempValue1[0][parseInt(i.toString(), 10)].isFilled = false;\n            tempValue1[0][parseInt(i.toString(), 10)].isPdp = false;\n            tempValue2[0][parseInt(i.toString(), 10)] = new ModuleValue();\n            tempValue2[0][parseInt(i.toString(), 10)].isBlack = false;\n            tempValue2[0][parseInt(i.toString(), 10)].isFilled = false;\n            tempValue2[0][parseInt(i.toString(), 10)].isPdp = false;\n        }\n        for (var i = quietZone; i < w - quietZone; i++) {\n            // Left quietzone.\n            tempValue1[parseInt(i.toString(), 10)][0] = new ModuleValue();\n            tempValue1[parseInt(i.toString(), 10)][0].isBlack = false;\n            tempValue1[parseInt(i.toString(), 10)][0].isFilled = false;\n            tempValue1[parseInt(i.toString(), 10)][0].isPdp = false;\n            tempValue2[parseInt(i.toString(), 10)][0] = new ModuleValue();\n            tempValue2[parseInt(i.toString(), 10)][0].isBlack = false;\n            tempValue2[parseInt(i.toString(), 10)][0].isFilled = false;\n            tempValue2[parseInt(i.toString(), 10)][0].isPdp = false;\n            for (var j = quietZone; j < h - quietZone; j++) {\n                tempValue1[parseInt(i.toString(), 10)][parseInt(j.toString(), 10)] = this.mModuleValue[i - quietZone][j - quietZone];\n                tempValue2[parseInt(i.toString(), 10)][parseInt(j.toString(), 10)] =\n                    this.mDataAllocationValues[i - quietZone][j - quietZone];\n            }\n            // Right quietzone.\n            tempValue1[parseInt(i.toString(), 10)][h - quietZone] = new ModuleValue();\n            tempValue1[parseInt(i.toString(), 10)][h - quietZone].isBlack = false;\n            tempValue1[parseInt(i.toString(), 10)][h - quietZone].isFilled = false;\n            tempValue1[parseInt(i.toString(), 10)][h - quietZone].isPdp = false;\n            tempValue2[parseInt(i.toString(), 10)][h - quietZone] = new ModuleValue();\n            tempValue2[parseInt(i.toString(), 10)][h - quietZone].isBlack = false;\n            tempValue2[parseInt(i.toString(), 10)][h - quietZone].isFilled = false;\n            tempValue2[parseInt(i.toString(), 10)][h - quietZone].isPdp = false;\n        }\n        //Bottom quietzone.\n        for (var i = 0; i < h; i++) {\n            tempValue1[w - quietZone][parseInt(i.toString(), 10)] = new ModuleValue();\n            tempValue1[w - quietZone][parseInt(i.toString(), 10)].isBlack = false;\n            tempValue1[w - quietZone][parseInt(i.toString(), 10)].isFilled = false;\n            tempValue1[w - quietZone][parseInt(i.toString(), 10)].isPdp = false;\n            tempValue2[w - quietZone][parseInt(i.toString(), 10)] = new ModuleValue();\n            tempValue2[w - quietZone][parseInt(i.toString(), 10)].isBlack = false;\n            tempValue2[w - quietZone][parseInt(i.toString(), 10)].isFilled = false;\n            tempValue2[w - quietZone][parseInt(i.toString(), 10)].isPdp = false;\n        }\n        this.mModuleValue = tempValue1;\n        this.mDataAllocationValues = tempValue2;\n    };\n    /**\n     * Draw the Format Information.\\\n     *\n     * @returns {void} Draw the Format Information .\n     * @private\n     */\n    QRCode.prototype.drawFormatInformation = function () {\n        var formatInformation = this.mQrBarcodeValues.FormatInformation;\n        var count = 0;\n        for (var i = 0; i < 7; i++) {\n            //Draw from 14 to 8\n            if (i === 6) {\n                this.mModuleValue[i + 1][8].isBlack = formatInformation[parseInt(count.toString(), 10)] === 1 ? true : false;\n            }\n            else {\n                this.mModuleValue[parseInt(i.toString(), 10)][8].isBlack =\n                    formatInformation[parseInt(count.toString(), 10)] === 1 ? true : false;\n            }\n            this.mModuleValue[8][this.mNoOfModules - i - 1].isBlack = formatInformation[count++] === 1 ? true : false;\n        }\n        count = 14;\n        for (var i = 0; i < 7; i++) {\n            //Draw from 0 to 6\n            if (i === 6) {\n                this.mModuleValue[8][i + 1].isBlack = formatInformation[parseInt(count.toString(), 10)] === 1 ? true : false;\n            }\n            else {\n                this.mModuleValue[8][parseInt(i.toString(), 10)].isBlack =\n                    formatInformation[parseInt(count.toString(), 10)] === 1 ? true : false;\n            }\n            this.mModuleValue[this.mNoOfModules - i - 1][8].isBlack = formatInformation[count--] === 1 ? true : false;\n        }\n        //Draw 7\n        this.mModuleValue[8][8].isBlack = formatInformation[7] === 1 ? true : false;\n        this.mModuleValue[8][this.mNoOfModules - 8].isBlack = formatInformation[7] === 1 ? true : false;\n    };\n    /**\n     * Allocates the Encoded Data and then Mask\n     *\n     * @param Data - Encoded Data\n     */\n    /* tslint:disable */\n    QRCode.prototype.dataAllocationAndMasking = function (data) {\n        this.mDataAllocationValues = [];\n        for (var i = 0; i < this.mNoOfModules; i++) {\n            // tslint:disable-next-line:no-any\n            // eslint-disable-next-line\n            this.mDataAllocationValues.push([0]);\n            for (var j = 0; j < this.mNoOfModules; j++) {\n                this.mDataAllocationValues[parseInt(i.toString(), 10)][parseInt(j.toString(), 10)] = new ModuleValue();\n            }\n        }\n        var point = 0;\n        for (var i = this.mNoOfModules - 1; i >= 0; i -= 2) {\n            for (var j = this.mNoOfModules - 1; j >= 0; j--) {\n                if (!(this.mModuleValue[parseInt(i.toString(), 10)][parseInt(j.toString(), 10)].isFilled\n                    && this.mModuleValue[i - 1][parseInt(j.toString(), 10)].isFilled)) {\n                    if (!this.mModuleValue[parseInt(i.toString(), 10)][parseInt(j.toString(), 10)].isFilled) {\n                        if (point + 1 < data.length) {\n                            this.mDataAllocationValues[parseInt(i.toString(), 10)][parseInt(j.toString(), 10)].isBlack = data[point++];\n                        }\n                        if ((i + j) % 3 === 0) {\n                            this.mDataAllocationValues[parseInt(i.toString(), 10)][parseInt(j.toString(), 10)].isBlack =\n                                (this.mDataAllocationValues[parseInt(i.toString(), 10)][parseInt(j.toString(), 10)].isBlack) ? true : false;\n                        }\n                        else {\n                            this.mDataAllocationValues[parseInt(i.toString(), 10)][parseInt(j.toString(), 10)].isBlack =\n                                (this.mDataAllocationValues[parseInt(i.toString(), 10)][parseInt(j.toString(), 10)].isBlack) ? false : true;\n                        }\n                        this.mDataAllocationValues[parseInt(i.toString(), 10)][parseInt(j.toString(), 10)].isFilled = true;\n                    }\n                    if (!this.mModuleValue[i - 1][parseInt(j.toString(), 10)].isFilled) {\n                        if (point + 1 < data.length) {\n                            this.mDataAllocationValues[i - 1][parseInt(j.toString(), 10)].isBlack = data[point++];\n                        }\n                        if ((i - 1 + j) % 3 === 0) {\n                            this.mDataAllocationValues[i - 1][parseInt(j.toString(), 10)].isBlack =\n                                (this.mDataAllocationValues[i - 1][parseInt(j.toString(), 10)].isBlack) ? true : false;\n                        }\n                        else {\n                            this.mDataAllocationValues[i - 1][parseInt(j.toString(), 10)].isBlack =\n                                (this.mDataAllocationValues[i - 1][parseInt(j.toString(), 10)].isBlack) ? false : true;\n                        }\n                        this.mDataAllocationValues[i - 1][parseInt(j.toString(), 10)].isFilled = true;\n                    }\n                }\n            }\n            i -= 2;\n            if (i === 6) {\n                i--;\n            }\n            for (var k = 0; k < this.mNoOfModules; k++) {\n                if (!(this.mModuleValue[parseInt(i.toString(), 10)][parseInt(k.toString(), 10)].isFilled\n                    && this.mModuleValue[i - 1][parseInt(k.toString(), 10)].isFilled)) {\n                    if (!this.mModuleValue[parseInt(i.toString(), 10)][parseInt(k.toString(), 10)].isFilled) {\n                        if (point + 1 < data.length) {\n                            this.mDataAllocationValues[parseInt(i.toString(), 10)][parseInt(k.toString(), 10)].isBlack = data[point++];\n                        }\n                        if ((i + k) % 3 !== 0) {\n                            this.mDataAllocationValues[parseInt(i.toString(), 10)][parseInt(k.toString(), 10)].isBlack =\n                                (this.mDataAllocationValues[parseInt(i.toString(), 10)][parseInt(k.toString(), 10)].isBlack) ? false : true;\n                        }\n                        else {\n                            this.mDataAllocationValues[parseInt(i.toString(), 10)][parseInt(k.toString(), 10)].isBlack =\n                                (this.mDataAllocationValues[parseInt(i.toString(), 10)][parseInt(k.toString(), 10)].isBlack) ? true : false;\n                        }\n                        this.mDataAllocationValues[parseInt(i.toString(), 10)][parseInt(k.toString(), 10)].isFilled = true;\n                    }\n                    if (!this.mModuleValue[i - 1][parseInt(k.toString(), 10)].isFilled) {\n                        if (point + 1 < data.length) {\n                            this.mDataAllocationValues[i - 1][parseInt(k.toString(), 10)].isBlack = data[point++];\n                        }\n                        if ((i - 1 + k) % 3 !== 0) {\n                            this.mDataAllocationValues[i - 1][parseInt(k.toString(), 10)].isBlack =\n                                (this.mDataAllocationValues[i - 1][parseInt(k.toString(), 10)].isBlack) ? false : true;\n                        }\n                        else {\n                            this.mDataAllocationValues[i - 1][parseInt(k.toString(), 10)].isBlack =\n                                (this.mDataAllocationValues[i - 1][parseInt(k.toString(), 10)].isBlack) ? true : false;\n                        }\n                        this.mDataAllocationValues[i - 1][parseInt(k.toString(), 10)].isFilled = true;\n                    }\n                }\n            }\n        }\n        for (var i = 0; i < this.mNoOfModules; i++) {\n            for (var j = 0; j < this.mNoOfModules; j++) {\n                if (!this.mModuleValue[parseInt(i.toString(), 10)][parseInt(j.toString(), 10)].isFilled) {\n                    var flag = this.mDataAllocationValues[parseInt(i.toString(), 10)][parseInt(j.toString(), 10)].isBlack;\n                    if (flag) {\n                        this.mDataAllocationValues[parseInt(i.toString(), 10)][parseInt(j.toString(), 10)].isBlack = false;\n                    }\n                    else {\n                        this.mDataAllocationValues[parseInt(i.toString(), 10)][parseInt(j.toString(), 10)].isBlack = true;\n                    }\n                }\n            }\n        }\n    };\n    /* tslint:enable */\n    /**\n     *  Allocates Format and Version Information.\\\n     *\n     * @returns {void}  Allocates Format and Version Information.\n     * @private\n     */\n    QRCode.prototype.allocateFormatAndVersionInformation = function () {\n        for (var i = 0; i < 9; i++) {\n            this.mModuleValue[8][parseInt(i.toString(), 10)].isFilled = true;\n            this.mModuleValue[parseInt(i.toString(), 10)][8].isFilled = true;\n        }\n        for (var i = this.mNoOfModules - 8; i < this.mNoOfModules; i++) {\n            this.mModuleValue[8][parseInt(i.toString(), 10)].isFilled = true;\n            this.mModuleValue[parseInt(i.toString(), 10)][8].isFilled = true;\n        }\n        if (this.mVersion > 6) {\n            var versionInformation = this.mQrBarcodeValues.VersionInformation;\n            var count = 0;\n            for (var i = 0; i < 6; i++) {\n                for (var j = 2; j >= 0; j--) {\n                    this.mModuleValue[parseInt(i.toString(), 10)][this.mNoOfModules - 9 - j].isBlack =\n                        versionInformation[parseInt(count.toString(), 10)] === 1 ? true : false;\n                    this.mModuleValue[parseInt(i.toString(), 10)][this.mNoOfModules - 9 - j].isFilled = true;\n                    this.mModuleValue[this.mNoOfModules - 9 - j][parseInt(i.toString(), 10)].isBlack =\n                        versionInformation[count++] === 1 ? true : false;\n                    this.mModuleValue[this.mNoOfModules - 9 - j][parseInt(i.toString(), 10)].isFilled = true;\n                }\n            }\n        }\n    };\n    /**\n     *Draw the Alignment Pattern in the given location.\\\n     *\n     * @returns {void} Draw the Alignment Pattern in the given location .\n     *  @param {HTMLElement} x - Provide the canvas element .\n     *  @param {HTMLElement} y - Provide the canvas element .\n     * @private\n     */\n    QRCode.prototype.drawAlignmentPattern = function (x, y) {\n        var i;\n        var j;\n        for (i = x - 2, j = y - 2; i < x + 3; i++, j++) {\n            this.mModuleValue[parseInt(i.toString(), 10)][y - 2].isBlack = true;\n            this.mModuleValue[parseInt(i.toString(), 10)][y - 2].isFilled = true;\n            this.mModuleValue[parseInt(i.toString(), 10)][y + 2].isBlack = true;\n            this.mModuleValue[parseInt(i.toString(), 10)][y + 2].isFilled = true;\n            this.mModuleValue[x - 2][parseInt(j.toString(), 10)].isBlack = true;\n            this.mModuleValue[x - 2][parseInt(j.toString(), 10)].isFilled = true;\n            this.mModuleValue[x + 2][parseInt(j.toString(), 10)].isBlack = true;\n            this.mModuleValue[x + 2][parseInt(j.toString(), 10)].isFilled = true;\n        }\n        for (i = x - 1, j = y - 1; i < x + 2; i++, j++) {\n            this.mModuleValue[parseInt(i.toString(), 10)][y - 1].isBlack = false;\n            this.mModuleValue[parseInt(i.toString(), 10)][y - 1].isFilled = true;\n            this.mModuleValue[parseInt(i.toString(), 10)][y + 1].isBlack = false;\n            this.mModuleValue[parseInt(i.toString(), 10)][y + 1].isFilled = true;\n            this.mModuleValue[x - 1][parseInt(j.toString(), 10)].isBlack = false;\n            this.mModuleValue[x - 1][parseInt(j.toString(), 10)].isFilled = true;\n            this.mModuleValue[x + 1][parseInt(j.toString(), 10)].isBlack = false;\n            this.mModuleValue[x + 1][parseInt(j.toString(), 10)].isFilled = true;\n        }\n        this.mModuleValue[parseInt(x.toString(), 10)][parseInt(y.toString(), 10)].isBlack = true;\n        this.mModuleValue[parseInt(x.toString(), 10)][parseInt(y.toString(), 10)].isFilled = true;\n    };\n    /**\n     *Gets the Allignment pattern coordinates of the current version.\\\n     *\n     * @returns {number[]}Gets the Allignment pattern coordinates of the current version. .\n     * @private\n     */\n    QRCode.prototype.getAlignmentPatternCoOrdinates = function () {\n        var allign = null;\n        switch ((this.mVersion)) {\n            case 2:\n                allign = [6, 18];\n                break;\n            case 3:\n                allign = [6, 22];\n                break;\n            case 4:\n                allign = [6, 26];\n                break;\n            case 5:\n                allign = [6, 30];\n                break;\n            case 6:\n                allign = [6, 34];\n                break;\n            case 7:\n                allign = [6, 22, 38];\n                break;\n            case 8:\n                allign = [6, 24, 42];\n                break;\n            case 9:\n                allign = [6, 26, 46];\n                break;\n            case 10:\n                allign = [6, 28, 50];\n                break;\n            case 11:\n                allign = [6, 30, 54];\n                break;\n            case 12:\n                allign = [6, 32, 58];\n                break;\n            case 13:\n                allign = [6, 34, 62];\n                break;\n            case 14:\n                allign = [6, 26, 46, 66];\n                break;\n            case 15:\n                allign = [6, 26, 48, 70];\n                break;\n            case 16:\n                allign = [6, 26, 50, 74];\n                break;\n            case 17:\n                allign = [6, 30, 54, 78];\n                break;\n            case 18:\n                allign = [6, 30, 56, 82];\n                break;\n            case 19:\n                allign = [6, 30, 58, 86];\n                break;\n            case 20:\n                allign = [6, 34, 62, 90];\n                break;\n            case 21:\n                allign = [6, 28, 50, 72, 94];\n                break;\n            case 22:\n                allign = [6, 26, 50, 74, 98];\n                break;\n            case 23:\n                allign = [6, 30, 54, 78, 102];\n                break;\n            case 24:\n                allign = [6, 28, 54, 80, 106];\n                break;\n            case 25:\n                allign = [6, 32, 58, 84, 110];\n                break;\n            case 26:\n                allign = [6, 30, 58, 86, 114];\n                break;\n            case 27:\n                allign = [6, 34, 62, 90, 118];\n                break;\n            case 28:\n                allign = [6, 26, 50, 74, 98, 122];\n                break;\n            case 29:\n                allign = [6, 30, 54, 78, 102, 126];\n                break;\n            case 30:\n                allign = [6, 26, 52, 78, 104, 130];\n                break;\n            case 31:\n                allign = [6, 30, 56, 82, 108, 134];\n                break;\n            case 32:\n                allign = [6, 34, 60, 86, 112, 138];\n                break;\n            case 33:\n                allign = [6, 30, 58, 86, 114, 142];\n                break;\n            case 34:\n                allign = [6, 34, 62, 90, 118, 146];\n                break;\n            case 35:\n                allign = [6, 30, 54, 78, 102, 126, 150];\n                break;\n            case 36:\n                allign = [6, 24, 50, 76, 102, 128, 154];\n                break;\n            case 37:\n                allign = [6, 28, 54, 80, 106, 132, 158];\n                break;\n            case 38:\n                allign = [6, 32, 58, 84, 110, 136, 162];\n                break;\n            case 39:\n                allign = [6, 26, 54, 82, 110, 138, 166];\n                break;\n            case 40:\n                allign = [6, 30, 58, 86, 114, 142, 170];\n                break;\n        }\n        return allign;\n    };\n    /**\n     * Encode the Input Data\n     */\n    /* tslint:disable */\n    QRCode.prototype.encodeData = function () {\n        var encodeData = [];\n        switch (this.mInputMode) {\n            case 'NumericMode':\n                encodeData.push(false);\n                encodeData.push(false);\n                encodeData.push(false);\n                encodeData.push(true);\n                break;\n            case 'AlphaNumericMode':\n                encodeData.push(false);\n                encodeData.push(false);\n                encodeData.push(true);\n                encodeData.push(false);\n                break;\n            case 'BinaryMode':\n                if (this.mIsEci) {\n                    //Add ECI Mode Indicator\n                    encodeData.push(false);\n                    encodeData.push(true);\n                    encodeData.push(true);\n                    encodeData.push(true);\n                    //Add ECI assignment number\n                    var numberInBool = this.stringToBoolArray(this.mEciAssignmentNumber.toString(), 8);\n                    // eslint-disable-next-line\n                    for (var _i = 0, _a = Object.keys(numberInBool); _i < _a.length; _i++) {\n                        var x = _a[_i];\n                        encodeData.push(numberInBool[\"\" + x]);\n                    }\n                }\n                encodeData.push(false);\n                encodeData.push(true);\n                encodeData.push(false);\n                encodeData.push(false);\n                break;\n        }\n        var numberOfBitsInCharacterCountIndicator = 0;\n        if (this.mVersion < 10) {\n            switch (this.mInputMode) {\n                case 'NumericMode':\n                    numberOfBitsInCharacterCountIndicator = 10;\n                    break;\n                case 'AlphaNumericMode':\n                    numberOfBitsInCharacterCountIndicator = 9;\n                    break;\n                case 'BinaryMode':\n                    numberOfBitsInCharacterCountIndicator = 8;\n                    break;\n            }\n        }\n        else if (this.mVersion < 27) {\n            switch (this.mInputMode) {\n                case 'NumericMode':\n                    numberOfBitsInCharacterCountIndicator = 12;\n                    break;\n                case 'AlphaNumericMode':\n                    numberOfBitsInCharacterCountIndicator = 11;\n                    break;\n                case 'BinaryMode':\n                    numberOfBitsInCharacterCountIndicator = 16;\n                    break;\n            }\n        }\n        else {\n            switch (this.mInputMode) {\n                case 'NumericMode':\n                    numberOfBitsInCharacterCountIndicator = 14;\n                    break;\n                case 'AlphaNumericMode':\n                    numberOfBitsInCharacterCountIndicator = 13;\n                    break;\n                case 'BinaryMode':\n                    numberOfBitsInCharacterCountIndicator = 16;\n                    break;\n            }\n        }\n        var numberOfBitsInCharacterCountIndicatorInBool = this.intToBoolArray(this.text.length, numberOfBitsInCharacterCountIndicator);\n        for (var i = 0; i < numberOfBitsInCharacterCountIndicator; i++) {\n            encodeData.push(numberOfBitsInCharacterCountIndicatorInBool[parseInt(i.toString(), 10)]);\n        }\n        if (this.mInputMode === 'NumericMode') {\n            var dataStringArray = this.text.split('');\n            var number = '';\n            for (var i = 0; i < dataStringArray.length; i++) {\n                var numberInBool = void 0;\n                number += dataStringArray[parseInt(i.toString(), 10)];\n                if (i % 3 === 2 && i !== 0 || i === dataStringArray.length - 1) {\n                    if (number.toString().length === 3) {\n                        numberInBool = this.stringToBoolArray(number, 10);\n                    }\n                    else if (number.toString().length === 2) {\n                        numberInBool = this.stringToBoolArray(number, 7);\n                    }\n                    else {\n                        numberInBool = this.stringToBoolArray(number, 4);\n                    }\n                    number = '';\n                    for (var _b = 0, _c = Object.keys(numberInBool); _b < _c.length; _b++) {\n                        var x = _c[_b];\n                        encodeData.push(numberInBool[\"\" + x]);\n                    }\n                }\n            }\n        }\n        else if (this.mInputMode === 'AlphaNumericMode') {\n            var dataStringArray = this.text.split('');\n            var numberInString = '';\n            var number = 0;\n            for (var i = 0; i < dataStringArray.length; i++) {\n                var numberInBool = void 0;\n                numberInString += dataStringArray[parseInt(i.toString(), 10)];\n                if (i % 2 === 0 && i + 1 !== dataStringArray.length) {\n                    number = 45 * this.mQrBarcodeValues.getAlphaNumericValues(dataStringArray[parseInt(i.toString(), 10)]);\n                }\n                if (i % 2 === 1 && i !== 0) {\n                    number += this.mQrBarcodeValues.getAlphaNumericValues(dataStringArray[parseInt(i.toString(), 10)]);\n                    numberInBool = this.intToBoolArray(number, 11);\n                    number = 0;\n                    for (var _d = 0, _e = Object.keys(numberInBool); _d < _e.length; _d++) {\n                        var x = _e[_d];\n                        encodeData.push(numberInBool[\"\" + x]);\n                    }\n                    numberInString = '';\n                }\n                if (i !== 1 && numberInString !== '') {\n                    if (i + 1 === dataStringArray.length && numberInString.length === 1) {\n                        number = this.mQrBarcodeValues.getAlphaNumericValues(dataStringArray[parseInt(i.toString(), 10)]);\n                        numberInBool = this.intToBoolArray(number, 6);\n                        number = 0;\n                        for (var _f = 0, _g = Object.keys(numberInBool); _f < _g.length; _f++) {\n                            var x = _g[_f];\n                            encodeData.push(numberInBool[\"\" + x]);\n                        }\n                    }\n                }\n            }\n        }\n        else if (this.mInputMode === 'BinaryMode') {\n            var dataStringArray = this.text.split('');\n            for (var i = 0; i < dataStringArray.length; i++) {\n                var number = 0;\n                if ((this.text.charCodeAt(i) >= 32 && this.text.charCodeAt(i) <= 126) || (this.text.charCodeAt(i) >= 161 &&\n                    this.text.charCodeAt(i) <= 255 || (this.text.charCodeAt(i) === 10 || this.text.charCodeAt(i) === 13))) {\n                    number = dataStringArray[parseInt(i.toString(), 10)].charCodeAt(0);\n                }\n                else if (this.text.charCodeAt(i) >= 65377 && this.text.charCodeAt(i) <= 65439) {\n                    number = dataStringArray[parseInt(i.toString(), 10)].charCodeAt(0) - 65216;\n                }\n                else if ((this.text.charCodeAt(i) >= 1025 && this.text.charCodeAt(i) <= 1119)) {\n                    number = dataStringArray[parseInt(i.toString(), 10)].charCodeAt(0) - 864;\n                }\n                else {\n                    this.validInput = false;\n                }\n                var numberInBool = this.intToBoolArray(number, 8);\n                // eslint-disable-next-line\n                for (var _h = 0, _j = Object.keys(numberInBool); _h < _j.length; _h++) {\n                    var x = _j[_h];\n                    encodeData.push(numberInBool[x]);\n                }\n            }\n        }\n        if (this.mixDataCount === 0) {\n            for (var i = 0; i < 4; i++) {\n                if (encodeData.length / 8 === this.mQrBarcodeValues.NumberOfDataCodeWord) {\n                    break;\n                }\n                else {\n                    encodeData.push(false);\n                }\n            }\n            for (;;) { //Add Padding Bits\n                if (encodeData.length % 8 === 0) {\n                    break;\n                }\n                else {\n                    encodeData.push(false);\n                }\n            }\n            for (;;) {\n                if (encodeData.length / 8 === this.mQrBarcodeValues.NumberOfDataCodeWord) {\n                    break;\n                }\n                else {\n                    encodeData.push(true);\n                    encodeData.push(true);\n                    encodeData.push(true);\n                    encodeData.push(false);\n                    encodeData.push(true);\n                    encodeData.push(true);\n                    encodeData.push(false);\n                    encodeData.push(false);\n                }\n                if (encodeData.length / 8 === this.mQrBarcodeValues.NumberOfDataCodeWord) {\n                    break;\n                }\n                else {\n                    encodeData.push(false);\n                    encodeData.push(false);\n                    encodeData.push(false);\n                    encodeData.push(true);\n                    encodeData.push(false);\n                    encodeData.push(false);\n                    encodeData.push(false);\n                    encodeData.push(true);\n                }\n            }\n            var dataBits = this.mQrBarcodeValues.NumberOfDataCodeWord;\n            var blocks = this.mQrBarcodeValues.NumberOfErrorCorrectionBlocks;\n            var totalBlockSize = blocks[0];\n            if (blocks.length === 6) {\n                totalBlockSize = blocks[0] + blocks[3];\n            }\n            var ds1 = [];\n            var testEncodeData = encodeData;\n            if (blocks.length === 6) {\n                var dataCodeWordLength = blocks[0] * blocks[2] * 8;\n                testEncodeData = [];\n                for (var i = 0; i < dataCodeWordLength; i++) {\n                    testEncodeData.push(encodeData[parseInt(i.toString(), 10)]);\n                }\n            }\n            var dsOne = [];\n            dsOne = this.createBlocks(testEncodeData, blocks[0]);\n            for (var i = 0; i < blocks[0]; i++) {\n                ds1[parseInt(i.toString(), 10)] = this.splitCodeWord(dsOne, i, testEncodeData.length / 8 / blocks[0]);\n            }\n            if (blocks.length === 6) {\n                testEncodeData = [];\n                for (var i = blocks[0] * blocks[2] * 8; i < encodeData.length; i++) {\n                    testEncodeData.push(encodeData[parseInt(i.toString(), 10)]);\n                }\n                var dsTwo = [];\n                dsTwo = this.createBlocks(testEncodeData, blocks[3]);\n                for (var i = blocks[0], count_1 = 0; i < totalBlockSize; i++) {\n                    ds1[parseInt(i.toString(), 10)] = this.splitCodeWord(dsTwo, count_1++, testEncodeData.length / 8 / blocks[3]);\n                }\n            }\n            encodeData = null;\n            encodeData = [];\n            for (var i = 0; i < 125; i++) {\n                for (var k = 0; k < totalBlockSize; k++) {\n                    for (var j = 0; j < 8; j++) {\n                        if (i < ds1[parseInt(k.toString(), 10)].length) {\n                            encodeData.push(ds1[parseInt(k.toString(), 10)][parseInt(i.toString(), 10)][parseInt(j.toString(), 10)] === '1' ? true : false);\n                        }\n                    }\n                }\n            }\n            var ec = new _qr_error_correction__WEBPACK_IMPORTED_MODULE_2__.ErrorCorrectionCodewords(this.mVersion, this.mErrorCorrectionLevel);\n            dataBits = this.mQrBarcodeValues.NumberOfDataCodeWord;\n            var eccw = this.mQrBarcodeValues.NumberOfErrorCorrectingCodeWords;\n            blocks = this.mQrBarcodeValues.NumberOfErrorCorrectionBlocks;\n            if (blocks.length === 6) {\n                ec.DataBits = (dataBits - blocks[3] * blocks[5]) / blocks[0];\n            }\n            else {\n                ec.DataBits = dataBits / blocks[0];\n            }\n            ec.Eccw = eccw / totalBlockSize;\n            var polynomial = [];\n            var count = 0;\n            for (var i = 0; i < blocks[0]; i++) {\n                ec.DC = ds1[parseInt(count.toString(), 10)];\n                polynomial[count++] = ec.getErcw();\n            }\n            if (blocks.length === 6) {\n                ec.DataBits = (dataBits - blocks[0] * blocks[2]) / blocks[3];\n                for (var i = 0; i < blocks[3]; i++) {\n                    ec.DC = ds1[parseInt(count.toString(), 10)];\n                    polynomial[count++] = ec.getErcw();\n                }\n            }\n            if (blocks.length !== 6) {\n                for (var i = 0; i < polynomial[0].length; i++) {\n                    for (var k = 0; k < blocks[0]; k++) {\n                        for (var j = 0; j < 8; j++) {\n                            if (i < polynomial[parseInt(k.toString(), 10)].length) {\n                                encodeData.push(polynomial[parseInt(k.toString(), 10)][parseInt(i.toString(), 10)][parseInt(j.toString(), 10)] === '1' ? true : false);\n                            }\n                        }\n                    }\n                }\n            }\n            else {\n                for (var i = 0; i < polynomial[0].length; i++) {\n                    for (var k = 0; k < totalBlockSize; k++) {\n                        for (var j = 0; j < 8; j++) {\n                            if (i < polynomial[parseInt(k.toString(), 10)].length) {\n                                encodeData.push(polynomial[parseInt(k.toString(), 10)][parseInt(i.toString(), 10)][parseInt(j.toString(), 10)] === '1' ? true : false);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return encodeData;\n    };\n    /* tslint:enable */\n    /**\n     *  Converts string value to Boolean\\\n     *\n     * @returns {boolean[]}  Converts string value to Boolean .\n     *  @param {HTMLElement} numberInString - Provide the canvas element .\n     *  @param {number} noOfBits - Provide the canvas element .\n     * @private\n     */\n    QRCode.prototype.stringToBoolArray = function (numberInString, noOfBits) {\n        var numberInBool = [];\n        var dataStringArray = numberInString.split('');\n        var number = 0;\n        for (var i = 0; i < dataStringArray.length; i++) {\n            number = number * 10 + dataStringArray[parseInt(i.toString(), 10)].charCodeAt(0) - 48;\n        }\n        for (var i = 0; i < noOfBits; i++) {\n            numberInBool[noOfBits - i - 1] = ((number >> i) & 1) === 1;\n        }\n        return numberInBool;\n    };\n    /**\n     *  Converts Integer value to Boolean\\\n     *\n     * @returns {boolean[]}  Converts Integer value to Boolean .\n     * @param {HTMLElement} number -The Integer value .\n     * @param {number} noOfBits - Number of Bits .\n     * @private\n     */\n    QRCode.prototype.intToBoolArray = function (number, noOfBits) {\n        var numberInBool = [];\n        for (var i = 0; i < noOfBits; i++) {\n            numberInBool[noOfBits - i - 1] = ((number >> i) & 1) === 1;\n        }\n        return numberInBool;\n    };\n    /**\n     *  Splits the Code words\\\n     *\n     * @returns {boolean[]}  Splits the Code words .\n     * @param {HTMLElement} ds -The Encoded value Blocks .\n     * @param {number} blk - Index of Block Number .\n     * @param {number} count -  Length of the Block .\n     * @private\n     */\n    QRCode.prototype.splitCodeWord = function (ds, blk, count) {\n        var ds1 = [];\n        for (var i = 0; i < count; i++) {\n            ds1.push(ds[parseInt(blk.toString(), 10)][parseInt(i.toString(), 10)]);\n        }\n        return ds1;\n    };\n    /**\n     *  Creates the Blocks\\\n     *\n     * @returns {boolean[]} Creates the Blocks .\n     * @param {HTMLElement} encodeData -The Encoded value. .\n     * @param {number} noOfBlocks -Number of Blocks .\n     * @private\n     */\n    QRCode.prototype.createBlocks = function (encodeData, noOfBlocks) {\n        var ret = [];\n        var cols = encodeData.length / 8 / noOfBlocks;\n        var stringValue = '';\n        var i = 0;\n        var blockNumber = 0;\n        for (var i_1 = 0; i_1 < noOfBlocks; i_1++) {\n            // tslint:disable-next-line:no-any\n            // eslint-disable-next-line\n            ret.push([0]);\n            for (var j = 0; j < cols; j++) {\n                ret[parseInt(i_1.toString(), 10)][parseInt(j.toString(), 10)] = '';\n            }\n        }\n        for (var j = 0; j < encodeData.length; j++) {\n            if (j % 8 === 0 && j !== 0) {\n                ret[parseInt(blockNumber.toString(), 10)][parseInt(i.toString(), 10)] = stringValue;\n                stringValue = '';\n                i++;\n                if (i === (encodeData.length / noOfBlocks / 8)) {\n                    blockNumber++;\n                    i = 0;\n                }\n            }\n            stringValue += encodeData[parseInt(j.toString(), 10)] ? '1' : '0';\n        }\n        ret[parseInt(blockNumber.toString(), 10)][parseInt(i.toString(), 10)] = stringValue;\n        return ret;\n    };\n    return QRCode;\n}());\n\n/** @private */\nvar ModuleValue = /** @class */ (function () {\n    function ModuleValue() {\n        this.isBlack = false;\n        this.isFilled = false;\n        this.isPdp = false;\n    }\n    return ModuleValue;\n}());\n\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-barcode-generator/src/qrcode/qr-code-util.js?");

/***/ })

}]);