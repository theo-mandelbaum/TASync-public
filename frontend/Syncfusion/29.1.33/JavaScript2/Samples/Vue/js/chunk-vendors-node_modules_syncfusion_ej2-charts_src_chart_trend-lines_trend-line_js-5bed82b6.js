"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkej2_vue_samples"] = self["webpackChunkej2_vue_samples"] || []).push([["chunk-vendors-node_modules_syncfusion_ej2-charts_src_chart_trend-lines_trend-line_js-5bed82b6"],{

/***/ "./node_modules/@syncfusion/ej2-charts/src/chart/trend-lines/trend-line.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-charts/src/chart/trend-lines/trend-line.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Trendlines: () => (/* binding */ Trendlines)\n/* harmony export */ });\n/* harmony import */ var _series_chart_series__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../series/chart-series */ \"./node_modules/@syncfusion/ej2-charts/src/chart/series/chart-series.js\");\n/* harmony import */ var _common_utils_helper__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../common/utils/helper */ \"./node_modules/@syncfusion/ej2-charts/src/common/utils/helper.js\");\n/* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @syncfusion/ej2-base */ \"./node_modules/@syncfusion/ej2-base/index.js\");\n\n\n\n/**\n * The `Trendlines` module is used to render six types of trendlines in the chart.\n */\nvar Trendlines = /** @class */ (function () {\n    function Trendlines() {\n    }\n    /**\n     * Initializes the series collection for the specified trendline in the chart.\n     *\n     * @param {Trendline} trendline - The trendline for which the series collection is initialized.\n     * @param {Chart} chart - The chart instance.\n     * @returns {void}\n     * @private\n     */\n    Trendlines.prototype.initSeriesCollection = function (trendline, chart) {\n        var trendLineSeries = new _series_chart_series__WEBPACK_IMPORTED_MODULE_0__.Series(trendline, 'targetSeries', {}, true);\n        if (trendline.type === 'Linear' || trendline.type === 'MovingAverage') {\n            trendLineSeries.type = 'Line';\n        }\n        else {\n            trendLineSeries.type = 'Spline';\n        }\n        this.setSeriesProperties(trendLineSeries, trendline, trendline.type, trendline.fill, trendline.width, chart);\n    };\n    /**\n     * Sets the properties for the specified series related to the specified trendline.\n     *\n     * @param {Series} series - The series to which properties are applied.\n     * @param {Trendline} trendline - The trendline associated with the series.\n     * @param {string} name - The name of the series.\n     * @param {string} fill - The fill color of the series.\n     * @param {number} width - The width of the series.\n     * @param {Chart} chart - The chart instance.\n     * @returns {void}\n     */\n    Trendlines.prototype.setSeriesProperties = function (series, trendline, name, fill, width, chart) {\n        series.name = trendline.name;\n        series.xName = 'x';\n        series.yName = 'y';\n        series.fill = fill || 'blue';\n        series.width = width;\n        series.dashArray = trendline.dashArray;\n        series.clipRectElement = trendline.clipRectElement;\n        series.points = [];\n        series.enableTooltip = trendline.enableTooltip;\n        series.index = trendline.index;\n        series.sourceIndex = trendline.sourceIndex;\n        series.interior = series.fill;\n        series.animation = trendline.animation;\n        series.legendShape = 'HorizontalLine';\n        series.marker = trendline.marker;\n        series.category = 'TrendLine';\n        series.chart = chart;\n        series.xMin = Infinity;\n        series.xMax = -Infinity;\n        series.yMin = Infinity;\n        series.yMax = -Infinity;\n        series.xData = [];\n        series.yData = [];\n        trendline.targetSeries = series;\n        if (chart.isBlazor) {\n            trendline.targetSeries.border = {}; // To avoid console error in blazor\n            trendline.targetSeries.connector = {}; // To avoid console error in blazor\n        }\n    };\n    /**\n     * Creates elements for the specified trendline and adds them to the chart.\n     *\n     * @param {Chart} chart - The chart instance.\n     * @param {Trendline} trendline - The trendline for which elements are created.\n     * @param {number} index - The index of the trendline.\n     * @param {Element} element - The parent element to which trendline elements are added.\n     * @param {Element} clipRectElement - The clip rect element associated with the chart.\n     * @returns {void}\n     */\n    Trendlines.prototype.createTrendLineElements = function (chart, trendline, index, element, clipRectElement) {\n        trendline.trendLineElement = element;\n        trendline.targetSeries.clipRectElement = clipRectElement;\n        trendline.targetSeries.seriesElement = element;\n        if (chart.trendLineElements) {\n            chart.trendLineElements.appendChild(trendline.trendLineElement);\n        }\n    };\n    /**\n     * Retrieves the data point at the specified index from the series.\n     *\n     * @param {Object} x - The x-value of the data point.\n     * @param {Object} y - The y-value of the data point.\n     * @param {Series} series - The series from which to retrieve the data point.\n     * @param {number} index - The index of the data point in the series.\n     * @returns {Points} - The data point object.\n     */\n    Trendlines.prototype.getDataPoint = function (x, y, series, index) {\n        var trendPoint = new _series_chart_series__WEBPACK_IMPORTED_MODULE_0__.Points();\n        trendPoint.x = series.xAxis.valueType === 'DateTime' ? new Date(Number(x)) : x;\n        trendPoint.y = y;\n        trendPoint.xValue = Number(x);\n        trendPoint.color = series.fill;\n        trendPoint.index = index;\n        trendPoint.yValue = Number(y);\n        trendPoint.visible = true;\n        series.xMin = Math.min(series.xMin, trendPoint.xValue);\n        series.yMin = Math.min(series.yMin, trendPoint.yValue);\n        series.xMax = Math.max(series.xMax, trendPoint.xValue);\n        series.yMax = Math.max(series.yMax, trendPoint.yValue);\n        series.xData.push(trendPoint.xValue);\n        return trendPoint;\n    };\n    /**\n     * Finds the slope and intercept for the trendline.\n     *\n     * @param {number[]} xValues - The array of x-values.\n     * @param {number[]} yValues - The array of y-values.\n     * @param {Trendline} trendline - The trendline configuration.\n     * @param {Points[]} points - The data points for the trendline.\n     * @returns {SlopeIntercept} - The slope and intercept values.\n     */\n    Trendlines.prototype.findSlopeIntercept = function (xValues, yValues, trendline, points) {\n        var xAvg = 0;\n        var yAvg = 0;\n        var xyAvg = 0;\n        var xxAvg = 0;\n        var index = 0;\n        var slope = 0;\n        var intercept = 0;\n        while (index < points.length) {\n            // To fix trendline not rendered issue while Nan Value is provided for y values.\n            if (isNaN(yValues[index])) {\n                yValues[index] = ((yValues[index - 1] + yValues[index + 1]) / 2);\n            }\n            xAvg += xValues[index];\n            yAvg += yValues[index];\n            xyAvg += xValues[index] * yValues[index];\n            xxAvg += xValues[index] * xValues[index];\n            index++;\n        }\n        var type = trendline.type;\n        if (trendline.intercept && (type === 'Linear' || type === 'Exponential')) {\n            intercept = trendline.intercept;\n            switch (type) {\n                case 'Linear':\n                    slope = ((xyAvg) - (trendline.intercept * xAvg)) / xxAvg;\n                    break;\n                case 'Exponential':\n                    slope = ((xyAvg) - (Math.log(Math.abs(trendline.intercept)) * xAvg)) / xxAvg;\n                    break;\n            }\n        }\n        else {\n            slope = ((points.length * xyAvg) - (xAvg * yAvg)) / ((points.length * xxAvg) - (xAvg * xAvg));\n            slope = (type === 'Linear' ? slope : Math.abs(slope));\n            if (type === 'Exponential' || type === 'Power') {\n                intercept = Math.exp((yAvg - (slope * xAvg)) / points.length);\n            }\n            else {\n                intercept = (yAvg - (slope * xAvg)) / points.length;\n            }\n        }\n        return { slope: slope, intercept: intercept };\n    };\n    /**\n     * Initializes the data source for the trendline.\n     *\n     * @param {Trendline} trendline - The trendline configuration.\n     * @returns {void}\n     * @private\n     */\n    Trendlines.prototype.initDataSource = function (trendline) {\n        var points = trendline.points;\n        if (points && points.length) {\n            //prepare data\n            var trendlineSeries = trendline.targetSeries;\n            switch (trendline.type) {\n                case 'Linear':\n                    this.setLinearRange(points, trendline, trendlineSeries);\n                    break;\n                case 'Exponential':\n                    this.setExponentialRange(points, trendline, trendlineSeries);\n                    break;\n                case 'MovingAverage':\n                    this.setMovingAverageRange(points, trendline, trendlineSeries);\n                    break;\n                case 'Polynomial':\n                    this.setPolynomialRange(points, trendline, trendlineSeries);\n                    break;\n                case 'Power':\n                    this.setPowerRange(points, trendline, trendlineSeries);\n                    break;\n                case 'Logarithmic':\n                    this.setLogarithmicRange(points, trendline, trendlineSeries);\n                    break;\n            }\n            if (trendline.type !== 'Linear' && trendline.type !== 'MovingAverage') {\n                trendlineSeries.chart.splineSeriesModule.findSplinePoint(trendlineSeries);\n            }\n        }\n    };\n    /**\n     * Sets the range for an exponential trendline.\n     *\n     * @param {Points[]} points - The data points of the series.\n     * @param {Trendline} trendline - The exponential trendline configuration.\n     * @param {Series} series - The series to which the trendline belongs.\n     * @returns {void}\n     */\n    Trendlines.prototype.setExponentialRange = function (points, trendline, series) {\n        var xValue = [];\n        var yValue = [];\n        var index = 0;\n        while (index < points.length) {\n            var point = points[index];\n            var yDataValue = point.yValue ? Math.log(point.yValue) : 0;\n            xValue.push(point.xValue);\n            yValue.push(yDataValue);\n            index++;\n        }\n        var slopeIntercept = this.findSlopeIntercept(xValue, yValue, trendline, points);\n        series.points = this.getExponentialPoints(trendline, points, xValue, yValue, series, slopeIntercept);\n    };\n    /**\n     * Sets the range for a logarithmic trendline.\n     *\n     * @param {Points[]} points - The data points of the series.\n     * @param {Trendline} trendline - The logarithmic trendline configuration.\n     * @param {Series} series - The series to which the trendline belongs.\n     * @returns {void}\n     */\n    Trendlines.prototype.setLogarithmicRange = function (points, trendline, series) {\n        var xLogValue = [];\n        var yLogValue = [];\n        var xPointsLgr = [];\n        var index = 0;\n        while (index < points.length) {\n            var point = points[index];\n            var xDataValue = point.xValue ? Math.log(point.xValue) : 0;\n            xPointsLgr.push(point.xValue);\n            xLogValue.push(xDataValue);\n            yLogValue.push(point.yValue);\n            index++;\n        }\n        var slopeIntercept = this.findSlopeIntercept(xLogValue, yLogValue, trendline, points);\n        series.points = this.getLogarithmicPoints(trendline, points, xPointsLgr, yLogValue, series, slopeIntercept);\n    };\n    /**\n     * Sets the range for a polynomial trendline.\n     *\n     * @param {Points[]} points - The data points of the series.\n     * @param {Trendline} trendline - The polynomial trendline configuration.\n     * @param {Series} series - The series to which the trendline belongs.\n     * @returns {void}\n     */\n    Trendlines.prototype.setPolynomialRange = function (points, trendline, series) {\n        var xPolyValues = [];\n        var yPolyValues = [];\n        var index = 0;\n        while (index < points.length) {\n            var point = points[index];\n            xPolyValues.push(point.xValue);\n            yPolyValues.push(point.yValue);\n            index++;\n        }\n        series.points = this.getPolynomialPoints(trendline, points, xPolyValues, yPolyValues, series);\n    };\n    /**\n     * Sets the range for a power trendline.\n     *\n     * @param {Points[]} points - The data points of the series.\n     * @param {Trendline} trendline - The power trendline configuration.\n     * @param {Series} series - The series to which the trendline belongs.\n     * @returns {void}\n     */\n    Trendlines.prototype.setPowerRange = function (points, trendline, series) {\n        var xValues = [];\n        var yValues = [];\n        var powerPoints = [];\n        var index = 0;\n        while (index < points.length) {\n            var point = points[index];\n            var xDataValue = point.xValue ? Math.log(point.xValue) : 0;\n            var yDataValue = point.yValue ? Math.log(point.yValue) : 0;\n            powerPoints.push(point.xValue);\n            xValues.push(xDataValue);\n            yValues.push(yDataValue);\n            index++;\n        }\n        var slopeIntercept = this.findSlopeIntercept(xValues, yValues, trendline, points);\n        series.points = this.getPowerPoints(trendline, points, powerPoints, yValues, series, slopeIntercept);\n    };\n    /**\n     * Sets the range for a linear trendline.\n     *\n     * @param {Points[]} points - The data points of the series.\n     * @param {Trendline} trendline - The linear trendline configuration.\n     * @param {Series} series - The series to which the trendline belongs.\n     * @returns {void}\n     */\n    Trendlines.prototype.setLinearRange = function (points, trendline, series) {\n        var xValues = [];\n        var yValues = [];\n        var index = 0;\n        while (index < points.length) {\n            var point = points[index];\n            xValues.push(point.xValue);\n            yValues.push(point.yValue);\n            index++;\n        }\n        var slopeIntercept = this.findSlopeIntercept(xValues, yValues, trendline, points);\n        series.points = this.getLinearPoints(trendline, points, xValues, yValues, series, slopeIntercept);\n    };\n    /**\n     * Sets the range for a moving average trendline.\n     *\n     * @param {Points[]} points - The data points of the series.\n     * @param {Trendline} trendline - The moving average trendline configuration.\n     * @param {Series} series - The series to which the trendline belongs.\n     * @returns {void}\n     */\n    Trendlines.prototype.setMovingAverageRange = function (points, trendline, series) {\n        var xValues = [];\n        var yValues = [];\n        var xAvgValues = [];\n        var index = 0;\n        while (index < points.length) {\n            var point = points[index];\n            xAvgValues.push(point.xValue);\n            xValues.push(index + 1);\n            yValues.push(point.yValue);\n            index++;\n        }\n        series.points = this.getMovingAveragePoints(trendline, points, xAvgValues, yValues, series);\n    };\n    /**\n     * Calculates the points for a logarithmic trendline.\n     *\n     * @param {Trendline} trendline - The logarithmic trendline configuration.\n     * @param {Points[]} points - The data points of the series.\n     * @param {number[]} xValues - The x values of the data points.\n     * @param {number[]} yValues - The y values of the data points.\n     * @param {Series} series - The series to which the trendline belongs.\n     * @param {SlopeIntercept} slopeInterceptLog - The slope and intercept of the logarithmic trendline.\n     * @returns {Points[]} - The calculated points for the logarithmic trendline.\n     */\n    Trendlines.prototype.getLogarithmicPoints = function (trendline, points, xValues, yValues, series, slopeInterceptLog) {\n        var midPoint = Math.round((points.length / 2));\n        var pts = [];\n        var x1Log = xValues[0] - trendline.backwardForecast;\n        var x1 = x1Log ? Math.log(x1Log) : 0;\n        var y1Log = slopeInterceptLog.intercept + (slopeInterceptLog.slope * x1);\n        var x2Log = xValues[midPoint - 1];\n        var x2 = x2Log ? Math.log(x2Log) : 0;\n        var y2Log = slopeInterceptLog.intercept + (slopeInterceptLog.slope * x2);\n        var x3Log = xValues[xValues.length - 1] + trendline.forwardForecast;\n        var x3 = x3Log ? Math.log(x3Log) : 0;\n        var y3Log = slopeInterceptLog.intercept + (slopeInterceptLog.slope * x3);\n        pts.push(this.getDataPoint(x1Log, y1Log, series, pts.length));\n        pts.push(this.getDataPoint(x2Log, y2Log, series, pts.length));\n        pts.push(this.getDataPoint(x3Log, y3Log, series, pts.length));\n        return pts;\n    };\n    /**\n     * Calculates the points for a power trendline.\n     *\n     * @param {Trendline} trendline - The power trendline configuration.\n     * @param {Points[]} points - The data points of the series.\n     * @param {number[]} xValues - The x values of the data points.\n     * @param {number[]} yValues - The y values of the data points.\n     * @param {Series} series - The series to which the trendline belongs.\n     * @param {SlopeIntercept} slopeInterceptPower - The slope and intercept of the power trendline.\n     * @returns {Points[]} - The calculated points for the power trendline.\n     */\n    Trendlines.prototype.getPowerPoints = function (trendline, points, xValues, yValues, series, slopeInterceptPower) {\n        var midPoint = Math.round((points.length / 2));\n        var pts = [];\n        var x1 = xValues[0] - trendline.backwardForecast;\n        x1 = x1 > -1 ? x1 : 0;\n        var y1 = slopeInterceptPower.intercept * Math.pow(x1, slopeInterceptPower.slope);\n        var x2 = xValues[midPoint - 1];\n        var y2 = slopeInterceptPower.intercept * Math.pow(x2, slopeInterceptPower.slope);\n        var x3 = xValues[xValues.length - 1] + trendline.forwardForecast;\n        var y3 = slopeInterceptPower.intercept * Math.pow(x3, slopeInterceptPower.slope);\n        pts.push(this.getDataPoint(x1, y1, series, pts.length));\n        pts.push(this.getDataPoint(x2, y2, series, pts.length));\n        pts.push(this.getDataPoint(x3, y3, series, pts.length));\n        return pts;\n    };\n    /**\n     * Calculates the points for a polynomial trendline.\n     *\n     * @param {Trendline} trendline - The polynomial trendline configuration.\n     * @param {Points[]} points - The data points of the series.\n     * @param {number[]} xValues - The x values of the data points.\n     * @param {number[]} yValues - The y values of the data points.\n     * @param {Series} series - The series to which the trendline belongs.\n     * @returns {Points[]} - The calculated points for the polynomial trendline.\n     */\n    Trendlines.prototype.getPolynomialPoints = function (trendline, points, xValues, yValues, series) {\n        var pts = [];\n        var polynomialOrder = points.length <= trendline.polynomialOrder ? points.length : trendline.polynomialOrder;\n        polynomialOrder = Math.max(2, polynomialOrder);\n        polynomialOrder = Math.min(6, polynomialOrder);\n        trendline.polynomialOrder = polynomialOrder;\n        trendline.polynomialSlopes = [];\n        trendline.polynomialSlopes.length = trendline.polynomialOrder + 1;\n        var index = 0;\n        while (index < xValues.length) {\n            var xVal = xValues[index];\n            var yVal = yValues[index];\n            var subIndex = 0;\n            while (subIndex <= trendline.polynomialOrder) {\n                if (!trendline.polynomialSlopes[subIndex]) {\n                    trendline.polynomialSlopes[subIndex] = 0;\n                }\n                trendline.polynomialSlopes[subIndex] += Math.pow(xVal, subIndex) * yVal;\n                ++subIndex;\n            }\n            index++;\n        }\n        var numArray = [];\n        numArray.length = 1 + 2 * trendline.polynomialOrder;\n        var matrix = [];\n        matrix.length = trendline.polynomialOrder + 1;\n        var newIndex = 0;\n        while (newIndex < (trendline.polynomialOrder + 1)) {\n            matrix[newIndex] = [];\n            matrix[newIndex].length = 3;\n            newIndex++;\n        }\n        var nIndex = 0;\n        while (nIndex < xValues.length) {\n            var d = xValues[nIndex];\n            var num2 = 1.0;\n            var nIndex2 = 0;\n            while (nIndex2 < numArray.length) {\n                if (!numArray[nIndex2]) {\n                    numArray[nIndex2] = 0;\n                }\n                numArray[nIndex2] += num2;\n                num2 *= d;\n                ++nIndex2;\n            }\n            ++nIndex;\n        }\n        var nnIndex = 0;\n        while (nnIndex <= trendline.polynomialOrder) {\n            var nnIndex2 = 0;\n            while (nnIndex2 <= trendline.polynomialOrder) {\n                matrix[nnIndex][nnIndex2] = numArray[nnIndex + nnIndex2];\n                ++nnIndex2;\n            }\n            ++nnIndex;\n        }\n        if (!this.gaussJordanElimination(matrix, trendline.polynomialSlopes)) {\n            trendline.polynomialSlopes = null;\n        }\n        pts = this.getPoints(trendline, points, xValues, series);\n        return pts;\n    };\n    /**\n     * Calculates the points for a moving average trendline.\n     *\n     * @param {Trendline} trendline - The moving average trendline configuration.\n     * @param {Points[]} points - The data points of the series.\n     * @param {number[]} xValues - The x values of the data points.\n     * @param {number[]} yValues - The y values of the data points.\n     * @param {Series} series - The series to which the trendline belongs.\n     * @returns {Points[]} - The calculated points for the moving average trendline.\n     */\n    Trendlines.prototype.getMovingAveragePoints = function (trendline, points, xValues, yValues, series) {\n        var pts = [];\n        var period = trendline.period >= points.length ? points.length - 1 : trendline.period;\n        period = period === 1 ? 1 : Math.max(2, period);\n        var index = 0;\n        var y;\n        var x;\n        var count;\n        var nullCount;\n        while (index < points.length) {\n            y = count = nullCount = 0;\n            for (var j = index; count < period; j++) {\n                count++;\n                y += yValues[j];\n            }\n            y = period - nullCount < 0 ? null : y ? y / (period - nullCount) : y;\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(y) && !isNaN(y)) {\n                x = xValues[period - 1 + index];\n                pts.push(this.getDataPoint(x, y, series, pts.length));\n            }\n            index++;\n        }\n        return pts;\n    };\n    /**\n     * Calculates the points for a linear trendline.\n     *\n     * @param {Trendline} trendline - The linear trendline configuration.\n     * @param {Points[]} points - The data points of the series.\n     * @param {number[]} xValues - The x values of the data points.\n     * @param {number[]} yValues - The y values of the data points.\n     * @param {Series} series - The series to which the trendline belongs.\n     * @param {SlopeIntercept} slopeInterceptLinear - The slope and intercept of the linear trendline.\n     * @returns {Points[]} - The calculated points for the linear trendline.\n     */\n    Trendlines.prototype.getLinearPoints = function (trendline, points, xValues, yValues, series, slopeInterceptLinear) {\n        var pts = [];\n        var max = xValues.indexOf(Math.max.apply(null, xValues));\n        var min = xValues.indexOf(Math.min.apply(null, xValues));\n        var x1Linear = xValues[min] - trendline.backwardForecast;\n        var y1Linear = slopeInterceptLinear.slope * x1Linear + slopeInterceptLinear.intercept;\n        var x2Linear = xValues[max] + trendline.forwardForecast;\n        var y2Linear = slopeInterceptLinear.slope * x2Linear + slopeInterceptLinear.intercept;\n        pts.push(this.getDataPoint(x1Linear, y1Linear, series, pts.length));\n        pts.push(this.getDataPoint(x2Linear, y2Linear, series, pts.length));\n        return pts;\n    };\n    /**\n     * Calculates the points for an exponential trendline.\n     *\n     * @param {Trendline} trendline - The exponential trendline configuration.\n     * @param {Points[]} points - The data points of the series.\n     * @param {number[]} xValues - The x values of the data points.\n     * @param {number[]} yValues - The y values of the data points.\n     * @param {Series} series - The series to which the trendline belongs.\n     * @param {SlopeIntercept} slopeInterceptExp - The slope and intercept of the exponential trendline.\n     * @returns {Points[]} - The calculated points for the exponential trendline.\n     */\n    Trendlines.prototype.getExponentialPoints = function (trendline, points, xValues, yValues, series, slopeInterceptExp) {\n        var midPoint = Math.round((points.length / 2));\n        var ptsExp = [];\n        var x1 = xValues[0] - trendline.backwardForecast;\n        var y1 = slopeInterceptExp.intercept * Math.exp(slopeInterceptExp.slope * x1);\n        var x2 = xValues[midPoint - 1];\n        var y2 = slopeInterceptExp.intercept * Math.exp(slopeInterceptExp.slope * x2);\n        var x3 = xValues[xValues.length - 1] + trendline.forwardForecast;\n        var y3 = slopeInterceptExp.intercept * Math.exp(slopeInterceptExp.slope * x3);\n        ptsExp.push(this.getDataPoint(x1, isNaN(y1) ? 0 : y1, series, ptsExp.length));\n        ptsExp.push(this.getDataPoint(x2, isNaN(y2) ? 0 : y2, series, ptsExp.length));\n        ptsExp.push(this.getDataPoint(x3, isNaN(y3) ? 0 : y3, series, ptsExp.length));\n        return ptsExp;\n    };\n    /**\n     * Calculates the points for the specified type of trendline.\n     *\n     * @param {Trendline} trendline - The trendline configuration.\n     * @param {Points[]} points - The data points of the series.\n     * @param {number[]} xValues - The x values of the data points.\n     * @param {Series} series - The series to which the trendline belongs.\n     * @returns {Points[]} - The calculated points for the trendline.\n     */\n    Trendlines.prototype.getPoints = function (trendline, points, xValues, series) {\n        var polynomialSlopes = trendline.polynomialSlopes;\n        var pts = [];\n        var x1 = 1;\n        var index = 1;\n        var xValue;\n        var yValue;\n        // We have to sort the points in ascending order. Because, the data source of the series may be random order.\n        points.sort(function (a, b) { return a.xValue - b.xValue; });\n        xValues.sort(function (a, b) { return a - b; });\n        while (polynomialSlopes !== null && index <= polynomialSlopes.length) {\n            if (index === 1) {\n                xValue = xValues[0] - trendline.backwardForecast;\n                yValue = this.getPolynomialYValue(polynomialSlopes, xValue);\n                pts.push(this.getDataPoint(xValue, yValue, series, pts.length));\n            }\n            else if (index === polynomialSlopes.length) {\n                xValue = xValues[points.length - 1] + trendline.forwardForecast;\n                yValue = this.getPolynomialYValue(polynomialSlopes, xValue);\n                pts.push(this.getDataPoint(xValue, yValue, series, pts.length));\n            }\n            else {\n                x1 += (points.length + (series.xAxis.valueType === 'DateTime' ? index : trendline.forwardForecast)) / polynomialSlopes.length;\n                xValue = xValues[parseInt(x1.toString(), 10) - 1];\n                yValue = this.getPolynomialYValue(polynomialSlopes, xValue);\n                pts.push(this.getDataPoint(xValue, yValue, series, pts.length));\n            }\n            index++;\n        }\n        return pts;\n    };\n    /**\n     * Calculates the y value for the specified x value using polynomial regression.\n     *\n     * @param {number[]} slopes - The coefficients of the polynomial equation.\n     * @param {number} x - The x value for which to calculate the y value.\n     * @returns {number} - The calculated y value.\n     */\n    Trendlines.prototype.getPolynomialYValue = function (slopes, x) {\n        var sum = 0;\n        var index = 0;\n        while (index < slopes.length) {\n            sum += slopes[index] * Math.pow(x, index);\n            index++;\n        }\n        return sum;\n    };\n    /**\n     * Applies Gauss-Jordan elimination to solve a system of linear equations represented by a matrix.\n     * Updates the coefficients of the polynomial equation.\n     *\n     * @param {number[][]} matrix - The matrix representing the system of linear equations.\n     * @param {number[]} polynomialSlopes - The coefficients of the polynomial equation to be updated.\n     * @returns {boolean} - A boolean indicating whether the elimination process was successful.\n     */\n    Trendlines.prototype.gaussJordanElimination = function (matrix, polynomialSlopes) {\n        var length = matrix.length;\n        var numArray1 = [];\n        var numArray2 = [];\n        var numArray3 = [];\n        numArray1.length = length;\n        numArray2.length = length;\n        numArray3.length = length;\n        var index = 0;\n        while (index < length) {\n            numArray3[index] = 0;\n            ++index;\n        }\n        var index1 = 0;\n        while (index1 < length) {\n            var num1 = 0;\n            var index2 = 0;\n            var index3 = 0;\n            var index4 = 0;\n            while (index4 < length) {\n                if (numArray3[index4] !== 1) {\n                    var index5 = 0;\n                    while (index5 < length) {\n                        if (numArray3[index5] === 0 && Math.abs(matrix[index4][index5]) >= num1) {\n                            num1 = Math.abs(matrix[index4][index5]);\n                            index2 = index4;\n                            index3 = index5;\n                        }\n                        ++index5;\n                    }\n                }\n                ++index4;\n            }\n            ++numArray3[index3];\n            if (index2 !== index3) {\n                var index4_1 = 0;\n                while (index4_1 < length) {\n                    var num2 = matrix[index2][index4_1];\n                    matrix[index2][index4_1] = matrix[index3][index4_1];\n                    matrix[index3][index4_1] = num2;\n                    ++index4_1;\n                }\n                var num3 = polynomialSlopes[index2];\n                polynomialSlopes[index2] = polynomialSlopes[index3];\n                polynomialSlopes[index3] = num3;\n            }\n            numArray2[index1] = index2;\n            numArray1[index1] = index3;\n            if (matrix[index3][index3] === 0.0) {\n                return false;\n            }\n            var num4 = 1.0 / matrix[index3][index3];\n            matrix[index3][index3] = 1.0;\n            var iindex4 = 0;\n            while (iindex4 < length) {\n                matrix[index3][iindex4] *= num4;\n                ++iindex4;\n            }\n            polynomialSlopes[index3] *= num4;\n            var iandex4 = 0;\n            while (iandex4 < length) {\n                if (iandex4 !== index3) {\n                    var num2 = matrix[iandex4][index3];\n                    matrix[iandex4][index3] = 0.0;\n                    var index5 = 0;\n                    while (index5 < length) {\n                        matrix[iandex4][index5] -= matrix[index3][index5] * num2;\n                        ++index5;\n                    }\n                    polynomialSlopes[iandex4] -= polynomialSlopes[index3] * num2;\n                }\n                ++iandex4;\n            }\n            ++index1;\n        }\n        var iindex1 = length - 1;\n        while (iindex1 >= 0) {\n            if (numArray2[iindex1] !== numArray1[iindex1]) {\n                var iindex2 = 0;\n                while (iindex2 < length) {\n                    var num = matrix[iindex2][numArray2[iindex1]];\n                    matrix[iindex2][numArray2[iindex1]] = matrix[iindex2][numArray1[iindex1]];\n                    matrix[iindex2][numArray1[iindex1]] = num;\n                    ++iindex2;\n                }\n            }\n            --iindex1;\n        }\n        return true;\n    };\n    /**\n     * Retrieves the elements required for rendering trendlines for a series in the chart.\n     *\n     * @param {Series} series - The series for which trendlines are to be rendered.\n     * @param {Chart} chart - The chart instance.\n     * @returns {void}\n     * @private\n     */\n    Trendlines.prototype.getTrendLineElements = function (series, chart) {\n        (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_1__.findClipRect)(series);\n        var clipRect = series.clipRect;\n        var clipRectElement = chart.renderer.drawClipPath(new _common_utils_helper__WEBPACK_IMPORTED_MODULE_1__.RectOption(chart.element.id + '_ChartTrendlineClipRect_' + series.index, 'transparent', { width: 1, color: 'Gray' }, 1, {\n            x: 0, y: 0, width: clipRect.width,\n            height: clipRect.height\n        }));\n        var element = chart.renderer.createGroup({\n            'id': chart.element.id + 'TrendlineSeriesGroup' + series.index,\n            'transform': 'translate(' + clipRect.x + ',' + clipRect.y + ')',\n            'clip-path': 'url(#' + chart.element.id + '_ChartTrendlineClipRect_' + series.index + ')'\n        });\n        //defines the clip rect element\n        if (element) {\n            element.appendChild(clipRectElement);\n        }\n        for (var _i = 0, _a = series.trendlines; _i < _a.length; _i++) {\n            var trendline = _a[_i];\n            this.createTrendLineElements(chart, trendline, trendline.index, element, clipRectElement);\n        }\n    };\n    /**\n     * To destroy the trendline.\n     *\n     * @returns {void}\n     * @private\n     */\n    Trendlines.prototype.destroy = function () {\n        /**\n         * Destroys the Linear Trendline.\n         */\n    };\n    /**\n     * Get module name.\n     *\n     * @returns {string} - Returns the module name.\n     */\n    Trendlines.prototype.getModuleName = function () {\n        /**\n         * Returns the module name of the series.\n         */\n        return 'TrendLine';\n    };\n    return Trendlines;\n}());\n\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-charts/src/chart/trend-lines/trend-line.js?");

/***/ })

}]);