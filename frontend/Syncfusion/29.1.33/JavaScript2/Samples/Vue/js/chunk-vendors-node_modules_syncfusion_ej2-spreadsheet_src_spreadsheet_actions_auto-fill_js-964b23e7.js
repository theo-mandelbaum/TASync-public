"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkej2_vue_samples"] = self["webpackChunkej2_vue_samples"] || []).push([["chunk-vendors-node_modules_syncfusion_ej2-spreadsheet_src_spreadsheet_actions_auto-fill_js-964b23e7"],{

/***/ "./node_modules/@syncfusion/ej2-spreadsheet/src/spreadsheet/actions/auto-fill.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-spreadsheet/src/spreadsheet/actions/auto-fill.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AutoFill: () => (/* binding */ AutoFill)\n/* harmony export */ });\n/* harmony import */ var _spreadsheet_index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../spreadsheet/index */ \"./node_modules/@syncfusion/ej2-spreadsheet/src/spreadsheet/index.js\");\n/* harmony import */ var _common_index__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../common/index */ \"./node_modules/@syncfusion/ej2-spreadsheet/src/spreadsheet/common/index.js\");\n/* harmony import */ var _workbook_index__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../workbook/index */ \"./node_modules/@syncfusion/ej2-spreadsheet/src/workbook/index.js\");\n/* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @syncfusion/ej2-base */ \"./node_modules/@syncfusion/ej2-base/index.js\");\n/* harmony import */ var _syncfusion_ej2_splitbuttons__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @syncfusion/ej2-splitbuttons */ \"./node_modules/@syncfusion/ej2-splitbuttons/index.js\");\n\n\n\n\n\n\n\n\n\n/**\n * AutoFill module allows to perform auto fill functionalities.\n */\nvar AutoFill = /** @class */ (function () {\n    function AutoFill(parent) {\n        this.fillOptionIndex = 0;\n        this.parent = parent;\n        this.addEventListener();\n    }\n    AutoFill.prototype.getfillItems = function () {\n        var l10n = this.parent.serviceLocator.getService(_spreadsheet_index__WEBPACK_IMPORTED_MODULE_0__.locale);\n        return [\n            { text: l10n.getConstant('CopyCells') },\n            { text: l10n.getConstant('FillSeries') },\n            { text: l10n.getConstant('FillFormattingOnly') },\n            { text: l10n.getConstant('FillWithoutFormatting') }\n        ];\n    };\n    AutoFill.prototype.createAutoFillElement = function () {\n        if (this.parent.allowAutoFill) {\n            var element = this.parent.getMainContent();\n            var ele = this.parent.createElement('div', { className: 'e-autofill' });\n            if (element.lastElementChild && element.lastElementChild.classList.contains('e-ss-overlay')) {\n                element.insertBefore(ele, element.getElementsByClassName('e-ss-overlay')[0]);\n            }\n            else {\n                element.appendChild(ele);\n            }\n            this.autoFillElement = ele;\n            if (this.autoFillDropDown) {\n                this.autoFillDropDown.destroy();\n                this.autoFillDropDown = null;\n            }\n            this.getautofillDDB({ id: this.parent.element.id + '_autofilloptionbtn', appendElem: element });\n        }\n    };\n    AutoFill.prototype.getautofillDDB = function (args) {\n        var _this = this;\n        this.splitBtnElem = this.parent.createElement('button', { id: args.id, className: 'e-filloption', attrs: { 'type': 'button' } });\n        this.splitBtnElem.appendChild(this.parent.createElement('span', { className: 'e-tbar-btn-text' }));\n        this.autoFillDropDown = new _syncfusion_ej2_splitbuttons__WEBPACK_IMPORTED_MODULE_4__.DropDownButton({\n            cssClass: 'e-dragfill-ddb',\n            iconCss: 'e-icons e-dragfill-icon',\n            items: this.getfillItems(),\n            createPopupOnClick: true,\n            enableRtl: this.parent.enableRtl,\n            select: function (args) {\n                _this.autoFillOptionClick({ type: _this.getFillType(args.item.text) });\n            },\n            beforeOpen: function () { return _this.autoFillClick(); }\n        });\n        this.autoFillDropDown.createElement = this.parent.createElement;\n        this.autoFillDropDown.appendTo(this.splitBtnElem);\n        args.appendElem.appendChild(this.splitBtnElem);\n        return this.autoFillDropDown;\n    };\n    AutoFill.prototype.getFillType = function (text) {\n        var l10n = this.parent.serviceLocator.getService(_spreadsheet_index__WEBPACK_IMPORTED_MODULE_0__.locale);\n        var type;\n        if (text === l10n.getConstant('CopyCells')) {\n            type = 'CopyCells';\n        }\n        else if (text === l10n.getConstant('FillSeries')) {\n            type = 'FillSeries';\n        }\n        else if (text === l10n.getConstant('FillFormattingOnly')) {\n            type = 'FillFormattingOnly';\n        }\n        else {\n            type = 'FillWithoutFormatting';\n        }\n        return type;\n    };\n    AutoFill.prototype.autoFillClick = function () {\n        var l10n = this.parent.serviceLocator.getService(_spreadsheet_index__WEBPACK_IMPORTED_MODULE_0__.locale);\n        var fillInfo = { fillType: 'FillSeries', disableItems: [''] };\n        this.parent.notify(_workbook_index__WEBPACK_IMPORTED_MODULE_2__.getFillInfo, fillInfo);\n        this.autoFillDropDown.setProperties({ 'items': this.getfillItems() }, true);\n        this.autoFillDropDown.removeItems(fillInfo.disableItems);\n        this.refreshAutoFillOption(l10n.getConstant(fillInfo.fillType));\n    };\n    AutoFill.prototype.getFillRange = function (pStartCell, pEndCell, pFillCell, direction) {\n        switch (direction) {\n            case 'Up':\n                return [pFillCell.rowIndex, pStartCell.colIndex, pStartCell.rowIndex - 1, pEndCell.colIndex];\n            case 'Right':\n                return [pStartCell.rowIndex, pEndCell.colIndex + 1, pEndCell.rowIndex, pFillCell.colIndex];\n            case 'Down':\n                return [pEndCell.rowIndex + 1, pStartCell.colIndex, pFillCell.rowIndex, pEndCell.colIndex];\n            case 'Left':\n                return [pStartCell.rowIndex, pFillCell.colIndex, pEndCell.rowIndex, pStartCell.colIndex - 1];\n        }\n    };\n    AutoFill.prototype.autoFillOptionClick = function (args) {\n        var l10n = this.parent.serviceLocator.getService(_spreadsheet_index__WEBPACK_IMPORTED_MODULE_0__.locale);\n        var sheet = this.parent.getActiveSheet();\n        var range = (0,_workbook_index__WEBPACK_IMPORTED_MODULE_2__.getSwapRange)((0,_workbook_index__WEBPACK_IMPORTED_MODULE_2__.getRangeIndexes)(this.parent.selectionModule.dAutoFillCell));\n        var currcell = (0,_workbook_index__WEBPACK_IMPORTED_MODULE_2__.getRangeIndexes)(sheet.selectedRange);\n        var minr = range[0];\n        var minc = range[1];\n        var maxr = range[2];\n        var maxc = range[3];\n        var dir = this.getDirection({ rowIndex: maxr, colIndex: maxc }, { rowIndex: currcell[2],\n            colIndex: currcell[3] });\n        var dataRange = [minr, minc, maxr, maxc];\n        var fillRange = this.getFillRange({ rowIndex: minr, colIndex: minc }, { rowIndex: maxr, colIndex: maxc }, { rowIndex: currcell[2], colIndex: currcell[3] }, dir);\n        this.refreshAutoFillOption(l10n.getConstant(args.type));\n        var evtArgs = { isUndo: true, isPublic: true, preventReSelect: true,\n            preventEvt: args.type === 'FillWithoutFormatting',\n            setCollection: args.type === 'FillFormattingOnly' || args.type === 'FillWithoutFormatting', isFromAutoFillOption: true };\n        this.parent.notify(_spreadsheet_index__WEBPACK_IMPORTED_MODULE_0__.performUndoRedo, evtArgs);\n        var eventArgs = { dataRange: sheet.name + '!' + (0,_workbook_index__WEBPACK_IMPORTED_MODULE_2__.getRangeAddress)(dataRange), fillRange: sheet.name + '!' + (0,_workbook_index__WEBPACK_IMPORTED_MODULE_2__.getRangeAddress)(fillRange), direction: dir, fillType: args.type, isFillOptClick: true };\n        this.isVerticalFill = eventArgs.direction === 'Down' || eventArgs.direction === 'Up';\n        this.parent.notify(_workbook_index__WEBPACK_IMPORTED_MODULE_2__.setAutoFill, eventArgs);\n        this.positionAutoFillElement({ isautofill: true });\n        var autoFillArgs = { dataRange: eventArgs.dataRange, fillRange: eventArgs.fillRange,\n            fillType: eventArgs.fillType, direction: eventArgs.direction, selectedRange: sheet.name + '!' + (0,_workbook_index__WEBPACK_IMPORTED_MODULE_2__.getRangeAddress)(currcell),\n            undoArgs: evtArgs.undoArgs };\n        this.parent.notify(_spreadsheet_index__WEBPACK_IMPORTED_MODULE_0__.completeAction, { eventArgs: autoFillArgs, action: 'autofill' });\n        if (this.parent.showAggregate) {\n            this.parent.notify(_spreadsheet_index__WEBPACK_IMPORTED_MODULE_0__.showAggregate, {});\n        }\n        this.autoFillClick();\n    };\n    AutoFill.prototype.refreshAutoFillOption = function (type) {\n        for (var i = 0; i < this.autoFillDropDown.items.length; i++) {\n            this.autoFillDropDown.items[i].iconCss = '';\n        }\n        for (var i = 0; i < this.autoFillDropDown.items.length; i++) {\n            if (this.autoFillDropDown.items[i].text === type) {\n                this.autoFillDropDown.items[i].iconCss = 'e-icons e-selected-icon';\n            }\n        }\n        if (['Copy Cells', 'Fill Series', 'Fill Formatting Only', 'Fill Without Formatting'].indexOf(type) < 0) {\n            this.autoFillDropDown.items[this.fillOptionIndex].iconCss = '';\n        }\n        this.autoFillDropDown.dataBind();\n    };\n    AutoFill.prototype.positionAutoFillElement = function (args) {\n        var top = 0;\n        var left = 0;\n        var sheet = this.parent.getActiveSheet();\n        var indexes = (0,_workbook_index__WEBPACK_IMPORTED_MODULE_2__.getSwapRange)((0,_workbook_index__WEBPACK_IMPORTED_MODULE_2__.getRangeIndexes)(sheet.selectedRange));\n        var tdiff = -5;\n        var ldiff = -5;\n        var otdiff = 6;\n        var oldiff = 6;\n        var isRowSelected = (indexes[1] === 0 && indexes[3] === sheet.colCount - 1);\n        var isColSelected = (indexes[0] === 0 && indexes[2] === sheet.rowCount - 1);\n        var rowIdx = indexes[2];\n        var colIdx = indexes[3];\n        var height;\n        var width;\n        var pos;\n        var isRtl = this.parent.enableRtl;\n        var cell = this.parent.getCell(rowIdx, colIdx);\n        if ((0,_workbook_index__WEBPACK_IMPORTED_MODULE_2__.isHiddenCol)(sheet, indexes[3]) || (0,_workbook_index__WEBPACK_IMPORTED_MODULE_2__.isHiddenRow)(sheet, indexes[2]) ||\n            (cell && cell.classList.contains('e-formularef-selection')) || (sheet.isProtected && sheet.protectSettings.selectUnLockedCells\n            && (0,_spreadsheet_index__WEBPACK_IMPORTED_MODULE_0__.isLockedCells)(this.parent, indexes))) {\n            this.hideAutoFillElement();\n            return;\n        }\n        if ((sheet.isProtected && (sheet.protectSettings.selectCells || sheet.protectSettings.selectUnLockedCells)) || !sheet.isProtected) {\n            if (isRowSelected) {\n                tdiff = -5;\n                ldiff = -1;\n                otdiff = 6;\n                oldiff = 2;\n                rowIdx = indexes[2];\n                colIdx = indexes[1];\n            }\n            else if (isColSelected) {\n                ldiff = -5;\n                tdiff = 0;\n                otdiff = 1;\n                oldiff = 6;\n                rowIdx = indexes[0];\n                colIdx = indexes[3];\n            }\n            if (sheet.frozenColumns || sheet.frozenRows) {\n                if (isColSelected || isRowSelected) {\n                    (0,_spreadsheet_index__WEBPACK_IMPORTED_MODULE_0__.setPosition)(this.parent, this.autoFillElement, indexes, 'e-autofill', args && args.preventAnimation);\n                    if (this.parent.autoFillSettings.showFillOptions && args && args.isautofill) {\n                        (0,_spreadsheet_index__WEBPACK_IMPORTED_MODULE_0__.setPosition)(this.parent, this.autoFillDropDown.element, indexes, 'e-filloption');\n                    }\n                }\n                else {\n                    (0,_spreadsheet_index__WEBPACK_IMPORTED_MODULE_0__.setPosition)(this.parent, this.autoFillElement, [rowIdx, colIdx, rowIdx, colIdx], 'e-autofill', args && args.preventAnimation);\n                    if (this.parent.autoFillSettings.showFillOptions && args && args.isautofill) {\n                        (0,_spreadsheet_index__WEBPACK_IMPORTED_MODULE_0__.setPosition)(this.parent, this.autoFillDropDown.element, [rowIdx, colIdx, rowIdx, colIdx], 'e-filloption');\n                    }\n                }\n                if (this.autoFillElement) {\n                    this.autoFillCell = { rowIndex: rowIdx, colIndex: colIdx };\n                    var autoFillHandles = this.parent.element.querySelectorAll('.e-autofill');\n                    if (autoFillHandles.length) {\n                        var clientRect = autoFillHandles[0].getBoundingClientRect();\n                        this.autoFillElementPosition = {\n                            left: clientRect.left, top: clientRect.top\n                        };\n                        [].slice.call(autoFillHandles).forEach(function (autoFillElem) {\n                            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.removeClass)([autoFillElem], 'e-hide');\n                        });\n                    }\n                }\n            }\n            else {\n                pos = (0,_spreadsheet_index__WEBPACK_IMPORTED_MODULE_0__.getCellPosition)(sheet, [rowIdx, colIdx, rowIdx, colIdx], this.parent.frozenRowCount(sheet), this.parent.frozenColCount(sheet), this.parent.viewport.beforeFreezeHeight, this.parent.viewport.beforeFreezeWidth, this.parent.sheetModule.colGroupWidth);\n                height = (0,_workbook_index__WEBPACK_IMPORTED_MODULE_2__.getRowsHeight)(sheet, rowIdx, rowIdx, true);\n                width = (0,_workbook_index__WEBPACK_IMPORTED_MODULE_2__.getColumnsWidth)(sheet, colIdx, colIdx, true);\n                if (!isColSelected) {\n                    top += height;\n                }\n                if (!isRowSelected) {\n                    left += width;\n                }\n                top += Math.round(pos.top) + tdiff;\n                left += Math.round(pos.left) + ldiff;\n                if (this.autoFillElement) {\n                    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.removeClass)([this.autoFillElement], 'e-hide');\n                    this.autoFillElement.style.top = top + 'px';\n                    if (isRtl) {\n                        this.autoFillElement.style.right = left + 'px';\n                    }\n                    else {\n                        this.autoFillElement.style.left = left + 'px';\n                    }\n                    this.autoFillCell = { rowIndex: rowIdx, colIndex: colIdx };\n                    var clientRect = this.autoFillElement.getBoundingClientRect();\n                    this.autoFillElementPosition = {\n                        left: clientRect.left, top: clientRect.top\n                    };\n                    if (this.parent.autoFillSettings.showFillOptions && args && args.isautofill) {\n                        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.removeClass)([this.autoFillDropDown.element], 'e-hide');\n                        var sheetPanel = this.parent.element.querySelector('.e-main-panel');\n                        var virtualable = this.parent.element.querySelector('.e-main-panel .e-sheet-content .e-virtualable');\n                        var scroller = this.parent.element.querySelector('.e-sheet-panel .e-scrollbar .e-scroller');\n                        var rowOffset = virtualable && virtualable.clientHeight < sheetPanel.clientHeight ?\n                            (sheetPanel.clientHeight - virtualable.clientHeight) : 0;\n                        var columnsOffset = virtualable && virtualable.clientWidth < sheetPanel.clientWidth ?\n                            (sheetPanel.clientWidth - virtualable.clientWidth) : 0;\n                        var autoFillDropDownRect = this.autoFillDropDown.element.getBoundingClientRect();\n                        if ((sheetPanel.scrollTop + sheetPanel.clientHeight - rowOffset) < (top + autoFillDropDownRect.height)) {\n                            top -= autoFillDropDownRect.height;\n                        }\n                        if ((scroller.scrollLeft + scroller.clientWidth - columnsOffset) < (left + autoFillDropDownRect.width)) {\n                            left -= autoFillDropDownRect.width;\n                        }\n                        this.autoFillDropDown.element.style.top = top + otdiff + 'px';\n                        if (isRtl) {\n                            this.autoFillDropDown.element.style.right = left + oldiff + 'px';\n                        }\n                        else {\n                            this.autoFillDropDown.element.style.left = left + oldiff + 'px';\n                        }\n                    }\n                }\n            }\n        }\n    };\n    AutoFill.prototype.hideAutoFillElement = function () {\n        var elem = this.parent.element;\n        [].slice.call(elem.querySelectorAll('.e-autofill')).forEach(function (optElem) {\n            if (elem) {\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.addClass)([optElem], 'e-hide');\n            }\n        });\n    };\n    AutoFill.prototype.hideAutoFillOptions = function () {\n        var elem = this.parent.element;\n        [].slice.call(elem.querySelectorAll('.e-filloption')).forEach(function (optElem) {\n            if (elem) {\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.addClass)([optElem], 'e-hide');\n            }\n        });\n    };\n    AutoFill.prototype.selectAutoFillRange = function (args) {\n        var rowObj = { clientY: (0,_spreadsheet_index__WEBPACK_IMPORTED_MODULE_0__.getClientY)(args.e), target: args.e.target };\n        var colObj = { clientX: (0,_spreadsheet_index__WEBPACK_IMPORTED_MODULE_0__.getClientX)(args.e), target: args.e.target };\n        var sheet = this.parent.getActiveSheet();\n        this.parent.notify(_spreadsheet_index__WEBPACK_IMPORTED_MODULE_0__.getRowIdxFromClientY, rowObj);\n        this.parent.notify(_spreadsheet_index__WEBPACK_IMPORTED_MODULE_0__.getColIdxFromClientX, colObj);\n        var rangeIndexes;\n        var autofillRange = this.getAutoFillRange({ rowIndex: rowObj.clientY, colIndex: colObj.clientX });\n        if (autofillRange && autofillRange.fillRange) {\n            rangeIndexes = [autofillRange.startCell.rowIndex, autofillRange.startCell.colIndex, autofillRange.endCell.rowIndex,\n                autofillRange.endCell.colIndex];\n        }\n        else {\n            rangeIndexes = (0,_workbook_index__WEBPACK_IMPORTED_MODULE_2__.getRangeIndexes)(sheet.selectedRange);\n        }\n        args.indexes = rangeIndexes;\n        return rangeIndexes;\n    };\n    AutoFill.prototype.getAutoFillRange = function (idx) {\n        var sheet = this.parent.getActiveSheet();\n        var aCell = this.autoFillCell;\n        var range = (0,_workbook_index__WEBPACK_IMPORTED_MODULE_2__.getSwapRange)((0,_workbook_index__WEBPACK_IMPORTED_MODULE_2__.getRangeIndexes)(sheet.selectedRange));\n        var minr = range[0];\n        var minc = range[1];\n        var maxr = range[2];\n        var maxc = range[3];\n        var inRange = (0,_workbook_index__WEBPACK_IMPORTED_MODULE_2__.isInRange)(range, [idx.rowIndex, idx.colIndex, idx.rowIndex, idx.colIndex], true);\n        var minIdx = { rowIndex: minr, colIndex: minc };\n        var scell = { rowIndex: range[0], colIndex: range[1] };\n        var ecell = { rowIndex: range[2], colIndex: range[3] };\n        var maxIdx = { rowIndex: maxr, colIndex: maxc };\n        var modifiedIdx = this.modifyRangeForMerge(idx.rowIndex, idx.colIndex, aCell.rowIndex, aCell.colIndex, range);\n        if (idx.rowIndex < aCell.rowIndex) { // up\n            if ((minr - idx.rowIndex > idx.colIndex - maxc) && (minr - idx.rowIndex > minc - idx.colIndex)) {\n                return inRange ? { startCell: minIdx, endCell: { rowIndex: idx.rowIndex, colIndex: maxc } } : { startCell: maxIdx, endCell: { rowIndex: modifiedIdx.rowIndex, colIndex: minc }, fillRange: [modifiedIdx.rowIndex, minc, minr - 1, maxc], direction: 'Up' };\n            }\n            else if (idx.colIndex > aCell.colIndex) {\n                return { startCell: minIdx, endCell: { rowIndex: maxr, colIndex: idx.colIndex },\n                    fillRange: [minr, maxc + 1, maxr, idx.colIndex], direction: 'Right' };\n            }\n            else if (idx.colIndex < aCell.colIndex) {\n                return inRange ? { startCell: minIdx, endCell: maxIdx } : { startCell: maxIdx, endCell: { rowIndex: minr, colIndex: idx.colIndex }, fillRange: [minr, idx.colIndex, maxr, minc - 1], direction: 'Left' };\n            }\n            else {\n                return { startCell: scell, endCell: ecell };\n            }\n        }\n        else if (idx.colIndex > aCell.colIndex) { // right\n            if ((idx.rowIndex - maxr > idx.colIndex - maxc)) {\n                return { startCell: minIdx, endCell: { rowIndex: idx.rowIndex, colIndex: maxc },\n                    fillRange: [maxr + 1, minc, idx.rowIndex, maxc], direction: 'Down' };\n            }\n            else {\n                return { startCell: minIdx, endCell: { rowIndex: maxr, colIndex: modifiedIdx.colIndex },\n                    fillRange: [minr, maxc + 1, maxr, modifiedIdx.colIndex], direction: 'Right' };\n            }\n        }\n        else if (idx.colIndex < aCell.colIndex) { // left\n            if ((idx.rowIndex - maxr > maxc - idx.colIndex) || ((idx.rowIndex - minr > maxc - idx.colIndex) && idx.rowIndex !== maxr)) {\n                return { startCell: minIdx, endCell: { rowIndex: idx.rowIndex, colIndex: maxc },\n                    fillRange: [maxr + 1, minc, idx.rowIndex, maxc], direction: 'Down' };\n            }\n            else {\n                return inRange ? { startCell: minIdx, endCell: maxIdx } : { startCell: maxIdx, endCell: { rowIndex: minr, colIndex: modifiedIdx.colIndex }, fillRange: [minr, modifiedIdx.colIndex, maxr, minc - 1], direction: 'Left' };\n            }\n        }\n        else if (idx.rowIndex > aCell.rowIndex) { // down\n            return { startCell: minIdx, endCell: { rowIndex: modifiedIdx.rowIndex, colIndex: maxc },\n                fillRange: [maxr + 1, minc, modifiedIdx.rowIndex, maxc], direction: 'Down' };\n        }\n        else if (idx.rowIndex === aCell.rowIndex && idx.colIndex === aCell.colIndex) {\n            return { startCell: scell, endCell: ecell };\n        }\n        else {\n            return { startCell: scell, endCell: ecell };\n        }\n    };\n    AutoFill.prototype.modifyRangeForMerge = function (rowIdx, colIdx, autoFillRowIdx, autoFillColIdx, selRange) {\n        var modifiedIdx = { rowIndex: rowIdx, colIndex: colIdx };\n        if (this.isMergedRange(selRange)) {\n            var selRowCount = selRange[2] - selRange[0] + 1;\n            var selColCount = selRange[3] - selRange[1] + 1;\n            var remainder = void 0;\n            if (rowIdx < autoFillRowIdx) { // up\n                remainder = (selRange[2] - rowIdx + 1) % selRowCount;\n                if (remainder && rowIdx - (selRowCount - remainder) >= 0) {\n                    modifiedIdx.rowIndex = rowIdx - (selRowCount - remainder);\n                }\n            }\n            else if (colIdx > autoFillColIdx) { // right\n                remainder = (colIdx - selRange[1] + 1) % selColCount;\n                if (remainder) {\n                    modifiedIdx.colIndex = colIdx + (selColCount - remainder);\n                }\n            }\n            else if (colIdx < autoFillColIdx) { // left\n                remainder = (selRange[3] - colIdx + 1) % selColCount;\n                if (remainder && colIdx - (selColCount - remainder) >= 0) {\n                    modifiedIdx.colIndex = colIdx - (selColCount - remainder);\n                }\n            }\n            else if (rowIdx > autoFillRowIdx) { // down\n                remainder = (rowIdx - selRange[0] + 1) % selRowCount;\n                if (remainder) {\n                    modifiedIdx.rowIndex = rowIdx + (selRowCount - remainder);\n                }\n            }\n        }\n        return modifiedIdx;\n    };\n    AutoFill.prototype.performAutoFill = function (args) {\n        if (args.rangeInfo || !(args.event.clientX > this.autoFillElementPosition.left &&\n            args.event.clientX < this.autoFillElementPosition.left + 10) ||\n            !(args.event.clientY > this.autoFillElementPosition.top && args.event.clientY < this.autoFillElementPosition.top + 10)) {\n            var autofillRange = void 0;\n            if (args.rangeInfo) {\n                autofillRange = args.rangeInfo;\n            }\n            else {\n                var rowObj = {\n                    clientY: (0,_spreadsheet_index__WEBPACK_IMPORTED_MODULE_0__.getClientY)(args.event), target: args.event.target\n                };\n                var colObj = {\n                    clientX: (0,_spreadsheet_index__WEBPACK_IMPORTED_MODULE_0__.getClientX)(args.event), target: args.event.target\n                };\n                this.parent.notify(_spreadsheet_index__WEBPACK_IMPORTED_MODULE_0__.getRowIdxFromClientY, rowObj);\n                this.parent.notify(_spreadsheet_index__WEBPACK_IMPORTED_MODULE_0__.getColIdxFromClientX, colObj);\n                autofillRange = this.getAutoFillRange({ rowIndex: rowObj.clientY, colIndex: colObj.clientX });\n            }\n            var sheet = this.parent.getActiveSheet();\n            if (autofillRange && autofillRange.fillRange) {\n                var eventArgs = {\n                    dataRange: sheet.name + '!' + args.dAutoFillCell,\n                    fillRange: sheet.name + '!' + (0,_workbook_index__WEBPACK_IMPORTED_MODULE_2__.getRangeAddress)(autofillRange.fillRange), direction: autofillRange.direction,\n                    fillType: args.fillType || this.parent.autoFillSettings.fillType, cancel: false\n                };\n                var isReadonlyCells = (0,_workbook_index__WEBPACK_IMPORTED_MODULE_2__.isReadOnlyCells)(this.parent, (0,_workbook_index__WEBPACK_IMPORTED_MODULE_2__.getRangeIndexes)(args.dAutoFillCell)) ||\n                    (0,_workbook_index__WEBPACK_IMPORTED_MODULE_2__.isReadOnlyCells)(this.parent, autofillRange.fillRange);\n                if (isReadonlyCells) {\n                    this.parent.notify(_common_index__WEBPACK_IMPORTED_MODULE_1__.readonlyAlert, null);\n                    return;\n                }\n                this.parent.notify(_workbook_index__WEBPACK_IMPORTED_MODULE_2__.beginAction, { eventArgs: eventArgs, action: 'autofill' });\n                if (eventArgs.cancel) {\n                    return;\n                }\n                var isLockedCell = (0,_spreadsheet_index__WEBPACK_IMPORTED_MODULE_0__.isLockedCells)(this.parent, autofillRange.fillRange);\n                if (sheet.isProtected && isLockedCell) {\n                    this.parent.notify(_common_index__WEBPACK_IMPORTED_MODULE_1__.editAlert, null);\n                    return;\n                }\n                if (args.rangeInfo) {\n                    this.performAutoFillAction(eventArgs, null, isLockedCell);\n                }\n                else {\n                    this.performAutoFillAction(eventArgs, autofillRange, isLockedCell);\n                    this.positionAutoFillElement({ isautofill: true });\n                }\n            }\n        }\n        else {\n            this.positionAutoFillElement({ isautofill: false });\n        }\n    };\n    AutoFill.prototype.refreshCell = function (options) {\n        this.parent.serviceLocator.getService('cell').refreshRange([options.rowIndex, options.colIndex, options.rowIndex, options.colIndex]);\n    };\n    AutoFill.prototype.getDirection = function (endCell, currcell, isVerticalFill) {\n        isVerticalFill = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(isVerticalFill) ? this.isVerticalFill : isVerticalFill;\n        if (isVerticalFill) {\n            if (currcell.rowIndex < endCell.rowIndex) { // up\n                return 'Up';\n            }\n            else if (currcell.rowIndex > endCell.rowIndex) { // down\n                return 'Down';\n            }\n            else if (currcell.colIndex > endCell.colIndex) { // right\n                return 'Right';\n            }\n            else if (currcell.colIndex < endCell.colIndex) { // left\n                return 'Left';\n            }\n        }\n        else {\n            if (currcell.colIndex > endCell.colIndex) { // right\n                return 'Right';\n            }\n            else if (currcell.colIndex < endCell.colIndex) { // left\n                return 'Left';\n            }\n            else if (currcell.rowIndex < endCell.rowIndex) { // up\n                return 'Up';\n            }\n            else if (currcell.rowIndex > endCell.rowIndex) { // down\n                return 'Down';\n            }\n        }\n        return null;\n    };\n    AutoFill.prototype.performAutoFillAction = function (args, autoFillRange, isLockedCell) {\n        var _this = this;\n        var sheet = this.parent.getActiveSheet();\n        var l10n = this.parent.serviceLocator.getService(_spreadsheet_index__WEBPACK_IMPORTED_MODULE_0__.locale);\n        if (this.isMergedRange((0,_workbook_index__WEBPACK_IMPORTED_MODULE_2__.getRangeIndexes)(args.fillRange))) {\n            var dialogInst_1 = this.parent.serviceLocator.getService(_spreadsheet_index__WEBPACK_IMPORTED_MODULE_0__.dialog);\n            dialogInst_1.show({\n                isModal: true, showCloseIcon: true, height: 180, width: 400, content: l10n.getConstant('AutoFillMergeAlertMsg'),\n                buttons: [{\n                        buttonModel: { content: this.parent.serviceLocator.getService(_spreadsheet_index__WEBPACK_IMPORTED_MODULE_0__.locale).getConstant('Ok'), isPrimary: true },\n                        click: function () { dialogInst_1.hide(); _this.parent.selectRange(args.dataRange); }\n                    }],\n                close: function () { dialogInst_1.hide(); _this.parent.selectRange(args.dataRange); }\n            }, false);\n            return;\n        }\n        this.isVerticalFill = args.direction === 'Down' || args.direction === 'Up';\n        this.parent.notify(_workbook_index__WEBPACK_IMPORTED_MODULE_2__.setAutoFill, {\n            dataRange: args.dataRange,\n            fillRange: args.fillRange, direction: args.direction, fillType: args.fillType, isLockedCell: isLockedCell\n        });\n        var selRange = autoFillRange ? (0,_workbook_index__WEBPACK_IMPORTED_MODULE_2__.getRangeAddress)([autoFillRange.startCell.rowIndex, autoFillRange.startCell.colIndex,\n            autoFillRange.endCell.rowIndex, autoFillRange.endCell.colIndex]) : sheet.selectedRange;\n        (0,_workbook_index__WEBPACK_IMPORTED_MODULE_2__.updateSelectedRange)(this.parent, selRange, sheet);\n        var autoFillArgs = { dataRange: args.dataRange, fillRange: args.fillRange, fillType: args.fillType, direction: args.direction,\n            selectedRange: selRange };\n        this.parent.notify(_spreadsheet_index__WEBPACK_IMPORTED_MODULE_0__.completeAction, {\n            eventArgs: autoFillArgs, action: sheet.conditionalFormats && sheet.conditionalFormats.length > 0 &&\n                sheet.conditionalFormats[sheet.conditionalFormats.length - 1].action === 'autofillWithCF' ? 'autofillWithCF' :\n                'autofill'\n        });\n        this.parent.trigger('select', { range: this.parent.getActiveSheet().selectedRange });\n        if (this.parent.showAggregate) {\n            this.parent.notify(_spreadsheet_index__WEBPACK_IMPORTED_MODULE_0__.showAggregate, {});\n        }\n        this.parent.notify(_workbook_index__WEBPACK_IMPORTED_MODULE_2__.refreshRibbonIcons, null);\n    };\n    AutoFill.prototype.getRangeData = function (options) {\n        var arr = [];\n        var sheet = this.parent.getActiveSheet();\n        var minr = options.range[0];\n        var minc = options.range[1];\n        var maxr = options.range[2];\n        var maxc = options.range[3];\n        var minCol = minc;\n        var cell;\n        while (minr <= maxr) {\n            if ((0,_workbook_index__WEBPACK_IMPORTED_MODULE_2__.isHiddenRow)(sheet, minr)) {\n                minr++;\n                continue;\n            }\n            minc = minCol;\n            while (minc <= maxc) {\n                if ((0,_workbook_index__WEBPACK_IMPORTED_MODULE_2__.isHiddenCol)(sheet, minc)) {\n                    minc++;\n                    continue;\n                }\n                cell = (0,_workbook_index__WEBPACK_IMPORTED_MODULE_2__.getCell)(minr, minc, sheet);\n                arr.push(cell);\n                minc++;\n            }\n            minr++;\n        }\n        return arr;\n    };\n    AutoFill.prototype.isMergedRange = function (range) {\n        var i = 0;\n        var data = this.getRangeData({ range: range, sheetIdx: this.parent.activeSheetIndex });\n        for (i = 0; i < data.length; i++) {\n            if (data[i] && (data[i].rowSpan || data[i].colSpan)) {\n                return true;\n            }\n        }\n        return false;\n    };\n    AutoFill.prototype.addEventListener = function () {\n        this.parent.on(_spreadsheet_index__WEBPACK_IMPORTED_MODULE_0__.contentLoaded, this.createAutoFillElement, this);\n        this.parent.on(_spreadsheet_index__WEBPACK_IMPORTED_MODULE_0__.positionAutoFillElement, this.positionAutoFillElement, this);\n        this.parent.on(_spreadsheet_index__WEBPACK_IMPORTED_MODULE_0__.hideAutoFillOptions, this.hideAutoFillOptions, this);\n        this.parent.on(_spreadsheet_index__WEBPACK_IMPORTED_MODULE_0__.hideAutoFillElement, this.hideAutoFillElement, this);\n        this.parent.on(_spreadsheet_index__WEBPACK_IMPORTED_MODULE_0__.performAutoFill, this.performAutoFill, this);\n        this.parent.on(_spreadsheet_index__WEBPACK_IMPORTED_MODULE_0__.selectAutoFillRange, this.selectAutoFillRange, this);\n        this.parent.on(_workbook_index__WEBPACK_IMPORTED_MODULE_2__.refreshCell, this.refreshCell, this);\n        this.parent.on(_workbook_index__WEBPACK_IMPORTED_MODULE_2__.getautofillDDB, this.getautofillDDB, this);\n    };\n    AutoFill.prototype.removeEventListener = function () {\n        if (!this.parent.isDestroyed) {\n            this.parent.off(_spreadsheet_index__WEBPACK_IMPORTED_MODULE_0__.contentLoaded, this.createAutoFillElement);\n            this.parent.off(_spreadsheet_index__WEBPACK_IMPORTED_MODULE_0__.positionAutoFillElement, this.positionAutoFillElement);\n            this.parent.off(_spreadsheet_index__WEBPACK_IMPORTED_MODULE_0__.hideAutoFillOptions, this.hideAutoFillOptions);\n            this.parent.off(_spreadsheet_index__WEBPACK_IMPORTED_MODULE_0__.hideAutoFillElement, this.hideAutoFillElement);\n            this.parent.off(_spreadsheet_index__WEBPACK_IMPORTED_MODULE_0__.performAutoFill, this.performAutoFill);\n            this.parent.off(_spreadsheet_index__WEBPACK_IMPORTED_MODULE_0__.selectAutoFillRange, this.selectAutoFillRange);\n            this.parent.off(_workbook_index__WEBPACK_IMPORTED_MODULE_2__.refreshCell, this.refreshCell);\n            this.parent.off(_workbook_index__WEBPACK_IMPORTED_MODULE_2__.getautofillDDB, this.getautofillDDB);\n        }\n    };\n    /**\n     * Destroy AutoFill module.\n     *\n     * @returns {void} - Destroy auto fill module.\n     */\n    AutoFill.prototype.destroy = function () {\n        this.removeEventListener();\n        if (this.autoFillElement) {\n            this.autoFillElement.remove();\n        }\n        this.autoFillElement = null;\n        this.autoFillElementPosition = null;\n        this.autoFillCell = null;\n        if (this.autoFillDropDown) {\n            this.autoFillDropDown.destroy();\n        }\n        this.autoFillDropDown = null;\n        this.isVerticalFill = null;\n        this.fillOptionIndex = null;\n        if (this.splitBtnElem) {\n            (0,_spreadsheet_index__WEBPACK_IMPORTED_MODULE_0__.removeAllChildren)(this.splitBtnElem);\n            this.splitBtnElem.remove();\n        }\n        this.splitBtnElem = null;\n        this.parent = null;\n    };\n    /**\n     * Get the AutoFill module name.\n     *\n     * @returns {string} - Get the auto fill module name.\n     */\n    AutoFill.prototype.getModuleName = function () {\n        return 'autofill';\n    };\n    return AutoFill;\n}());\n\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-spreadsheet/src/spreadsheet/actions/auto-fill.js?");

/***/ })

}]);