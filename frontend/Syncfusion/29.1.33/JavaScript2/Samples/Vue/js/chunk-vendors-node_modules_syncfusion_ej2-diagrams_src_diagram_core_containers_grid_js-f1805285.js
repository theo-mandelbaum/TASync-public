"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkej2_vue_samples"] = self["webpackChunkej2_vue_samples"] || []).push([["chunk-vendors-node_modules_syncfusion_ej2-diagrams_src_diagram_core_containers_grid_js-f1805285"],{

/***/ "./node_modules/@syncfusion/ej2-diagrams/src/diagram/core/containers/grid.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-diagrams/src/diagram/core/containers/grid.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ColumnDefinition: () => (/* binding */ ColumnDefinition),\n/* harmony export */   GridCell: () => (/* binding */ GridCell),\n/* harmony export */   GridPanel: () => (/* binding */ GridPanel),\n/* harmony export */   GridRow: () => (/* binding */ GridRow),\n/* harmony export */   RowDefinition: () => (/* binding */ RowDefinition)\n/* harmony export */ });\n/* harmony import */ var _elements_diagram_element__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../elements/diagram-element */ \"./node_modules/@syncfusion/ej2-diagrams/src/diagram/core/elements/diagram-element.js\");\n/* harmony import */ var _canvas__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./canvas */ \"./node_modules/@syncfusion/ej2-diagrams/src/diagram/core/containers/canvas.js\");\n/* harmony import */ var _container__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./container */ \"./node_modules/@syncfusion/ej2-diagrams/src/diagram/core/containers/container.js\");\n/* harmony import */ var _primitives_size__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../primitives/size */ \"./node_modules/@syncfusion/ej2-diagrams/src/diagram/primitives/size.js\");\n/* harmony import */ var _utility_base_util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../utility/base-util */ \"./node_modules/@syncfusion/ej2-diagrams/src/diagram/utility/base-util.js\");\n/* harmony import */ var _elements_text_element__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../elements/text-element */ \"./node_modules/@syncfusion/ej2-diagrams/src/diagram/core/elements/text-element.js\");\nvar __extends = (undefined && undefined.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/* eslint-disable no-self-assign */\n\n\n\n\n\n\n/**\n * Grid panel is used to arrange the children in a table like structure\n */\nvar GridPanel = /** @class */ (function (_super) {\n    __extends(GridPanel, _super);\n    function GridPanel() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.childTable = [];\n        _this.cellStyle = {};\n        _this.desiredRowHeight = [];\n        _this.desiredCellWidth = [];\n        return _this;\n    }\n    /**\n     * rowDefinitions method \\\n     *\n     * @returns { RowDefinition[] } columnDefinitions method .\\\n     *\n     * @private\n     */\n    GridPanel.prototype.rowDefinitions = function () {\n        return this.rowDefns;\n    };\n    /**\n     * columnDefinitions method \\\n     *\n     * @returns { ColumnDefinition[] } columnDefinitions method .\\\n     *\n     * @private\n     */\n    GridPanel.prototype.columnDefinitions = function () {\n        return this.colDefns;\n    };\n    GridPanel.prototype.addObject = function (obj, rowId, columnId, rowSpan, columnSpan) {\n        //check if exists\n        if (this.rows.length >= rowId) {\n            var row = this.rows[parseInt(rowId.toString(), 10)];\n            if (row.cells.length > columnId) {\n                columnSpan = columnSpan || 1;\n                rowSpan = rowSpan || 1;\n                var cell = row.cells[parseInt(columnId.toString(), 10)];\n                cell.columnSpan = Math.max(columnSpan, cell.columnSpan);\n                cell.rowSpan = Math.max(rowSpan, cell.rowSpan);\n                var object = new GridCellItem();\n                object = obj;\n                object.rowId = rowId;\n                object.columnId = columnId;\n                object.columnSpan = columnSpan;\n                this.childTable[object.id] = object;\n                this.addObjectToCell(object, cell);\n            }\n        }\n    };\n    // public setCellStyle(rowId: number, columnId: number, cellStyle: ShapeStyleModel): void {\n    //     if (this.rows.length > rowId) {\n    //         let row: GridRow = this.rows[rowId];\n    //         if (row.cells.length > columnId) {\n    //             let cell: GridCell = row.cells[columnId];\n    //             cell.style = cellStyle;\n    //         }\n    //     }\n    // }\n    // public getRowId(obj: DiagramElement): number {\n    //     return (this.childTable[obj.id] as GridCellItem).rowId;\n    // }\n    // public getColumnId(obj: DiagramElement): number {\n    //     return (this.childTable[obj.id] as GridCellItem).columnId;\n    // }\n    // public getRowSpan(obj: DiagramElement): number {\n    //     return (this.childTable[obj.id] as GridCellItem).rowSpan;\n    // }\n    // public getColumnSpan(obj: DiagramElement): number {\n    //     return (this.childTable[obj.id] as GridCellItem).columnSpan;\n    // }\n    GridPanel.prototype.addObjectToCell = function (obj, cell) {\n        if (!cell.children) {\n            cell.children = [];\n        }\n        // obj.minWidth = cell.desiredCellWidth; obj.minHeight = cell.desiredCellHeight;\n        obj.style.strokeColor = 'black';\n        obj.style.strokeWidth = 1;\n        //Bug 853721: Grid lines remain hidden when lane fill is set to transparent.\n        // Removed below code in which the fill set as white.\n        // obj.style.fill = 'white';\n        cell.children.push(obj);\n    };\n    /**\n     * updateProperties method \\\n     *\n     * @returns { void } updateProperties method .\\\n     * @param {number} offsetX - provide the Connector value.\n     * @param {number} offsetY - provide the Connector value.\n     * @param {number} width - provide the Connector value.\n     * @param {number} height - provide the Connector value.\n     *\n     * @private\n     */\n    GridPanel.prototype.updateProperties = function (offsetX, offsetY, width, height) {\n        this.offsetX = offsetX;\n        this.offsetY = offsetY;\n        this.width = width;\n        this.height = height;\n    };\n    /**\n     * setDefinitions method \\\n     *\n     * @returns { void } setDefinitions method .\\\n     * @param {RowDefinition[]} rows - provide the rows value.\n     * @param {ColumnDefinition[]} columns - provide the Connector value.\n     *\n     * @private\n     */\n    GridPanel.prototype.setDefinitions = function (rows, columns) {\n        this.rowDefns = rows;\n        this.colDefns = columns;\n        this.children = [];\n        this.rows = this.rows || [];\n        for (var i = 0; i < rows.length; i++) {\n            var rowDefn = rows[parseInt(i.toString(), 10)];\n            var row = new GridRow();\n            row.cells = [];\n            var defaultCell = new ColumnDefinition();\n            //replace this 100 with a proper property\n            defaultCell.width = this.width;\n            var columns_1 = this.colDefns;\n            if (columns_1 === undefined || columns_1.length < 1) {\n                columns_1 = [defaultCell];\n            }\n            this.addCellInRow(columns_1, rowDefn, row);\n            this.rows.push(row);\n        }\n    };\n    /**\n     * addCellInRow method \\\n     *\n     * @returns { void } addCellInRow method .\\\n     * @param {ColumnDefinition[]} columns - provide the rows value.\n     * @param {RowDefinition} rowDefn - provide the Connector value.\n     * @param {GridRow} row - provide the Connector value.\n     *\n     * @private\n     */\n    GridPanel.prototype.addCellInRow = function (columns, rowDefn, row) {\n        for (var j = 0; j < columns.length; j++) {\n            var colDefn = columns[parseInt(j.toString(), 10)];\n            var cell = new GridCell();\n            cell.children = [];\n            this.cellStyle.fill = 'none';\n            this.cellStyle.strokeColor = 'none';\n            cell.id = (0,_utility_base_util__WEBPACK_IMPORTED_MODULE_4__.randomId)();\n            cell.style = this.cellStyle;\n            cell.desiredCellWidth = cell.minWidth = colDefn.width;\n            cell.desiredCellHeight = cell.minHeight = rowDefn.height;\n            row.cells.push(cell);\n            this.children.push(cell);\n        }\n    };\n    /**\n     * calculateSize method \\\n     *\n     * @returns { void } calculateSize method .\\\n     *\n     * @private\n     */\n    GridPanel.prototype.calculateSize = function () {\n        var rows = this.rows || [];\n        var calculateHeight = 0;\n        var calculateWidth = 0;\n        for (var i = 0; i < rows.length; i++) {\n            var row = this.rows[parseInt(i.toString(), 10)];\n            calculateWidth = 0;\n            for (var j = 0; j < row.cells.length; j++) {\n                calculateWidth += row.cells[parseInt(j.toString(), 10)].desiredCellWidth;\n                if (j === row.cells.length - 1) {\n                    if (this.width && this.width !== calculateWidth) {\n                        row.cells[parseInt(j.toString(), 10)].desiredCellWidth += (this.width - calculateWidth);\n                        row.cells[parseInt(j.toString(), 10)].minWidth = row.cells[parseInt(j.toString(), 10)].desiredCellWidth;\n                        if (row.cells[parseInt(j.toString(), 10)].children && row.cells[parseInt(j.toString(), 10)].children.length) {\n                            row.cells[parseInt(j.toString(), 10)].children[0].width =\n                                row.cells[parseInt(j.toString(), 10)].desiredCellWidth;\n                        }\n                        this.colDefns[parseInt(j.toString(), 10)].width = row.cells[parseInt(j.toString(), 10)].desiredCellWidth;\n                    }\n                    calculateHeight += row.cells[parseInt(j.toString(), 10)].desiredCellHeight;\n                    if (i === rows.length - 1) {\n                        if (this.height && this.height !== calculateHeight) {\n                            var height = (this.height - calculateHeight);\n                            if (height > 0) {\n                                for (var k = 0; k < row.cells.length; k++) {\n                                    row.cells[parseInt(k.toString(), 10)].desiredCellHeight += height;\n                                    row.cells[parseInt(k.toString(), 10)].minHeight =\n                                        row.cells[parseInt(k.toString(), 10)].desiredCellHeight =\n                                            row.cells[parseInt(k.toString(), 10)].desiredCellHeight;\n                                    if (row.cells[parseInt(k.toString(), 10)].children\n                                        && row.cells[parseInt(k.toString(), 10)].children.length) {\n                                        row.cells[parseInt(k.toString(), 10)].children[0].height =\n                                            row.cells[parseInt(k.toString(), 10)].desiredCellHeight;\n                                    }\n                                }\n                                this.rowDefns[parseInt(i.toString(), 10)].height += height;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    };\n    /**\n     * updateRowHeight method \\\n     *\n     * @returns { void } updateRowHeight method .\\\n     * @param {number} rowId - provide the rows value.\n     * @param {number} height - provide the Connector value.\n     * @param {boolean} isConsiderChild - provide the Connector value.\n     * @param {number} padding - provide the Connector value.\n     * @param {boolean} isUndoRedo - Provide if its undo-redo action or not\n     * @private\n     */\n    GridPanel.prototype.updateRowHeight = function (rowId, height, isConsiderChild, padding, isUndoRedo) {\n        var row = this.rows[parseInt(rowId.toString(), 10)];\n        this.rowDefns[parseInt(rowId.toString(), 10)].height = height;\n        if (this.height !== undefined) {\n            this.height += height - row.cells[0].desiredCellHeight;\n        }\n        for (var i = 0; i < row.cells.length; i++) {\n            row.cells[parseInt(i.toString(), 10)].desiredCellHeight = row.cells[parseInt(i.toString(), 10)].minHeight = height;\n            if (row.cells[parseInt(i.toString(), 10)].children && row.cells[parseInt(i.toString(), 10)].children.length) {\n                row.cells[parseInt(i.toString(), 10)].children[0].height = height;\n                this.setTextRefresh(row.cells[parseInt(i.toString(), 10)].children[0]);\n            }\n        }\n        this.desiredRowHeight[parseInt(rowId.toString(), 10)] = height;\n        this.measure(new _primitives_size__WEBPACK_IMPORTED_MODULE_3__.Size(this.width, this.height));\n        this.arrange(this.desiredSize);\n        if (isConsiderChild) {\n            var minHeight = (padding !== undefined) ? this.calculateCellHeightBasedOnChildren(rowId, padding) :\n                this.calculateCellHeight(rowId);\n            if (minHeight > height && !isUndoRedo) {\n                this.updateRowHeight(rowId, minHeight, false);\n            }\n        }\n    };\n    GridPanel.prototype.setTextRefresh = function (canvas) {\n        if (canvas.children && canvas.children.length) {\n            // eslint-disable-next-line @typescript-eslint/ban-types\n            var children = canvas.children;\n            for (var i = 0; i < children.length; i++) {\n                if (children[parseInt(i.toString(), 10)] instanceof _elements_text_element__WEBPACK_IMPORTED_MODULE_5__.TextElement) {\n                    children[parseInt(i.toString(), 10)].refreshTextElement();\n                }\n                if (children[parseInt(i.toString(), 10)] instanceof _canvas__WEBPACK_IMPORTED_MODULE_1__.Canvas) {\n                    this.setTextRefresh(children[parseInt(i.toString(), 10)]);\n                }\n            }\n        }\n    };\n    /**\n     * updateColumnWidth method \\\n     *\n     * @returns { void } updateColumnWidth method .\\\n     * @param {number} colId - provide the rows value.\n     * @param {number} width - provide the Connector value.\n     * @param {boolean} isConsiderChild - provide the Connector value.\n     * @param {number} padding - provide the Connector value.\n     * @param {boolean} isUndoRedo - Provide if its undo-redo action or not\n     *\n     * @private\n     */\n    GridPanel.prototype.updateColumnWidth = function (colId, width, isConsiderChild, padding, isUndoRedo) {\n        this.colDefns[parseInt(colId.toString(), 10)].width = width;\n        if (this.width !== undefined) {\n            this.width += width - this.rows[this.rows.length - 1].cells[parseInt(colId.toString(), 10)].desiredCellWidth;\n        }\n        for (var i = 0; i < this.rows.length; i++) {\n            this.setTextRefresh(this.rows[parseInt(i.toString(), 10)].cells[0]);\n            this.rows[parseInt(i.toString(), 10)].cells[parseInt(colId.toString(), 10)].desiredCellWidth =\n                this.rows[parseInt(i.toString(), 10)].cells[parseInt(colId.toString(), 10)].minWidth = width;\n            if (this.rows[parseInt(i.toString(), 10)].cells[parseInt(colId.toString(), 10)].children\n                && this.rows[parseInt(i.toString(), 10)].cells[parseInt(colId.toString(), 10)].children.length) {\n                this.rows[parseInt(i.toString(), 10)].cells[parseInt(colId.toString(), 10)].children[0].width = width;\n            }\n        }\n        this.desiredCellWidth[parseInt(colId.toString(), 10)] = width;\n        this.measure(new _primitives_size__WEBPACK_IMPORTED_MODULE_3__.Size(this.width, this.height));\n        this.arrange(this.desiredSize);\n        if (isConsiderChild) {\n            var minWidth = (padding !== undefined) ? this.calculateCellWidthBasedOnChildren(colId, padding) :\n                this.calculateCellWidth(colId);\n            if (minWidth > width && !isUndoRedo) {\n                this.updateColumnWidth(colId, minWidth, false);\n            }\n        }\n    };\n    GridPanel.prototype.calculateCellWidth = function (colIndex) {\n        var maxWidth;\n        var width;\n        var cell;\n        for (var i = 0; i < this.rows.length; i++) {\n            cell = this.rows[parseInt(i.toString(), 10)].cells[parseInt(colIndex.toString(), 10)];\n            if (cell.columnSpan === 1) {\n                width = (cell.outerBounds.width > cell.bounds.width &&\n                    (cell.children.length === 0 || cell.children[0].maxWidth === undefined)) ? cell.outerBounds.width : cell.bounds.width;\n                if (maxWidth) {\n                    maxWidth = (maxWidth < width) ? width : maxWidth;\n                }\n                else {\n                    maxWidth = width;\n                }\n            }\n        }\n        return maxWidth;\n    };\n    GridPanel.prototype.calculateCellHeight = function (rowIndex) {\n        var maxHeight;\n        var height;\n        var cell;\n        var row = this.rows[parseInt(rowIndex.toString(), 10)];\n        for (var i = 0; i < row.cells.length; i++) {\n            cell = row.cells[parseInt(i.toString(), 10)];\n            height = (cell.outerBounds.height > cell.bounds.height) ? cell.outerBounds.height : cell.bounds.height;\n            if (maxHeight) {\n                maxHeight = (maxHeight < height) ? height : maxHeight;\n            }\n            else {\n                maxHeight = height;\n            }\n        }\n        return maxHeight;\n    };\n    GridPanel.prototype.calculateCellSizeBasedOnChildren = function (cell, option, padding, maxSize) {\n        var maxBounds;\n        var canvas = (cell && cell.children.length > 0) ? cell.children[0] : undefined;\n        if (canvas && cell.columnSpan === 1) {\n            maxBounds = (option === 'Width') ? canvas.bounds.right : canvas.bounds.bottom;\n            if (!maxSize) {\n                maxSize = (option === 'Width') ? canvas.bounds.width : canvas.bounds.height;\n            }\n            for (var j = 0; j < canvas.children.length; j++) {\n                var children = canvas.children[parseInt(j.toString(), 10)];\n                if (children instanceof _canvas__WEBPACK_IMPORTED_MODULE_1__.Canvas) {\n                    if (children.id.indexOf('header') === -1) {\n                        var bounds = ((option === 'Width') ? children.bounds.right : children.bounds.bottom) + padding;\n                        if (bounds > maxBounds) {\n                            var size = (bounds - maxBounds) + ((option === 'Width') ? canvas.bounds.width : canvas.bounds.height);\n                            if (maxSize) {\n                                maxSize = (maxSize < size) ? size : maxSize;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return maxSize;\n    };\n    GridPanel.prototype.calculateCellWidthBasedOnChildren = function (colIndex, padding) {\n        var maxWidth; //let width: number;  let maxBounds: number; let canvas: Canvas;\n        var cell;\n        for (var i = 0; i < this.rows.length; i++) {\n            cell = this.rows[parseInt(i.toString(), 10)].cells[parseInt(colIndex.toString(), 10)];\n            maxWidth = this.calculateCellSizeBasedOnChildren(cell, 'Width', padding, maxWidth);\n        }\n        return maxWidth;\n    };\n    GridPanel.prototype.calculateCellHeightBasedOnChildren = function (rowIndex, padding) {\n        var maxHeight;\n        var cell;\n        // let maxBounds: number; let canvas: Canvas;\n        var row = this.rows[parseInt(rowIndex.toString(), 10)];\n        for (var i = 0; i < row.cells.length; i++) {\n            cell = row.cells[parseInt(i.toString(), 10)];\n            maxHeight = this.calculateCellSizeBasedOnChildren(cell, 'Height', padding, maxHeight);\n        }\n        return maxHeight;\n    };\n    /**\n     * addRow method \\\n     *\n     * @returns { void } addRow method .\\\n     * @param {number} rowId - provide the rowId value.\n     * @param {number} rowDefn - provide the rowDefn value.\n     * @param {boolean} isMeasure - provide the isMeasure value.\n     *\n     * @private\n     */\n    GridPanel.prototype.addRow = function (rowId, rowDefn, isMeasure) {\n        if (this.rowDefns.length > 0) {\n            this.rowDefns.splice(rowId, 0, rowDefn);\n        }\n        else {\n            this.rowDefns.push(rowDefn);\n        }\n        var row = new GridRow();\n        row.cells = [];\n        var defaultCell = new ColumnDefinition();\n        defaultCell.width = this.width;\n        var columns = this.colDefns;\n        this.addCellInRow(columns, rowDefn, row);\n        if (rowId > this.rows.length - 1) {\n            this.rows.push(row);\n        }\n        else {\n            this.rows.splice(rowId, 0, row);\n        }\n        if (isMeasure) {\n            this.measure(new _primitives_size__WEBPACK_IMPORTED_MODULE_3__.Size(this.width, this.height));\n            this.arrange(this.desiredSize);\n        }\n    };\n    /**\n     * addColumn method \\\n     *\n     * @returns { void } addColumn method .\\\n     * @param {number} columnId - provide the rowId value.\n     * @param {number} column - provide the rowDefn value.\n     * @param {boolean} isMeasure - provide the isMeasure value.\n     *\n     * @private\n     */\n    GridPanel.prototype.addColumn = function (columnId, column, isMeasure) {\n        var row;\n        var rowDefn;\n        var colDefn;\n        var cell;\n        var rows = this.rows;\n        if (this.colDefns.length > 0) {\n            this.colDefns.splice(columnId, 0, column);\n        }\n        else {\n            this.colDefns.push(column);\n        }\n        if (this.width !== undefined) {\n            this.width += column.width;\n        }\n        for (var i = 0; i < rows.length; i++) {\n            row = rows[parseInt(i.toString(), 10)];\n            rowDefn = this.rowDefns[parseInt(i.toString(), 10)];\n            colDefn = column;\n            cell = new GridCell();\n            cell.style = this.cellStyle;\n            cell.desiredCellWidth = cell.minWidth = colDefn.width;\n            cell.desiredCellHeight = cell.minHeight = rowDefn.height;\n            cell.children = [];\n            if (columnId > row.cells.length - 1) {\n                row.cells.push(cell);\n            }\n            else {\n                row.cells.splice(columnId, 0, cell);\n            }\n            this.children.push(cell);\n        }\n        if (isMeasure) {\n            this.measure(new _primitives_size__WEBPACK_IMPORTED_MODULE_3__.Size(this.width, this.height));\n            this.arrange(this.desiredSize);\n        }\n    };\n    /**\n     * removeRow method \\\n     *\n     * @returns { void } removeRow method .\\\n     * @param {number} rowId - provide the rowId value.\n     *\n     * @private\n     */\n    GridPanel.prototype.removeRow = function (rowId) {\n        var cell;\n        var element;\n        var rows = this.rows;\n        var removeRow = rows[parseInt(rowId.toString(), 10)];\n        this.height -= this.rowDefns[parseInt(rowId.toString(), 10)].height;\n        for (var i = 0; i < removeRow.cells.length; i++) {\n            cell = removeRow.cells[parseInt(i.toString(), 10)];\n            this.children.splice(this.children.indexOf(cell), 1);\n            element = document.getElementById(cell.id + '_groupElement');\n            if (element && element.parentElement) {\n                element.parentElement.removeChild(element);\n            }\n        }\n        this.rows.splice(rowId, 1);\n        this.rowDefns.splice(rowId, 1);\n        this.measure(new _primitives_size__WEBPACK_IMPORTED_MODULE_3__.Size(this.width, this.height));\n        this.arrange(this.desiredSize);\n    };\n    /**\n     * removeColumn method \\\n     *\n     * @returns { void } removeColumn method .\\\n     * @param {number} columnId - provide the rowId value.\n     *\n     * @private\n     */\n    GridPanel.prototype.removeColumn = function (columnId) {\n        var cell;\n        var element;\n        var rows = this.rows;\n        this.width -= this.colDefns[parseInt(columnId.toString(), 10)].width;\n        for (var i = 0; i < rows.length; i++) {\n            cell = rows[parseInt(i.toString(), 10)].cells[parseInt(columnId.toString(), 10)];\n            this.children.splice(this.children.indexOf(cell), 1);\n            element = document.getElementById(cell.id + '_groupElement');\n            if (element && element.parentElement) {\n                element.parentElement.removeChild(element);\n            }\n            rows[parseInt(i.toString(), 10)].cells.splice(columnId, 1);\n        }\n        this.colDefns.splice(columnId, 1);\n        this.measure(new _primitives_size__WEBPACK_IMPORTED_MODULE_3__.Size(this.width, this.height));\n        this.arrange(this.desiredSize);\n    };\n    /**\n     * updateRowIndex method \\\n     *\n     * @returns { void } updateRowIndex method .\\\n     * @param {number} currentIndex - provide the rowId value.\n     * @param {number} newIndex - provide the rowId value.\n     *\n     * @private\n     */\n    GridPanel.prototype.updateRowIndex = function (currentIndex, newIndex) {\n        //const rows: GridRow[] = this.rows;\n        var temp = this.rows[parseInt(currentIndex.toString(), 10)];\n        this.rows.splice(currentIndex, 1);\n        this.rows.splice(newIndex, 0, temp);\n        var tempRow = this.rowDefns[parseInt(currentIndex.toString(), 10)];\n        this.rowDefns.splice(currentIndex, 1);\n        this.rowDefns.splice(newIndex, 0, tempRow);\n        this.measure(new _primitives_size__WEBPACK_IMPORTED_MODULE_3__.Size(this.width, this.height));\n        this.arrange(this.desiredSize);\n    };\n    /**\n     * updateColumnIndex method \\\n     *\n     * @returns { void } updateColumnIndex method .\\\n     * @param {number} startRowIndex - provide the startRowIndex value.\n     * @param {number} currentIndex - provide the currentIndex value.\n     * @param {number} newIndex - provide the newIndex value.\n     *\n     * @private\n     */\n    GridPanel.prototype.updateColumnIndex = function (startRowIndex, currentIndex, newIndex) {\n        var temp;\n        var cell;\n        for (var i = startRowIndex; i < this.rows.length; i++) {\n            temp = this.rows[parseInt(i.toString(), 10)];\n            cell = this.rows[parseInt(i.toString(), 10)].cells[parseInt(currentIndex.toString(), 10)];\n            temp.cells.splice(currentIndex, 1);\n            temp.cells.splice(newIndex, 0, cell);\n        }\n        var tempCol = this.colDefns[parseInt(currentIndex.toString(), 10)];\n        this.colDefns.splice(currentIndex, 1);\n        this.colDefns.splice(newIndex, 0, tempCol);\n        var tempSize = this.desiredCellWidth[parseInt(currentIndex.toString(), 10)];\n        this.desiredCellWidth.splice(currentIndex, 1);\n        this.desiredCellWidth.splice(newIndex, 0, tempSize);\n        this.measure(new _primitives_size__WEBPACK_IMPORTED_MODULE_3__.Size(this.width, this.height));\n        this.arrange(this.desiredSize);\n    };\n    /**\n     * measure method \\\n     *\n     * @returns { Size } measure method .\\\n     * @param {Size} availableSize - provide the startRowIndex value.\n     *\n     * @private\n     */\n    GridPanel.prototype.measure = function (availableSize) {\n        var desired = undefined;\n        if (this.rows !== undefined && this.rows.length > 0) {\n            var i = 0;\n            var j = 0;\n            desired = new _primitives_size__WEBPACK_IMPORTED_MODULE_3__.Size(0, 0);\n            this.calculateSize();\n            for (var _i = 0, _a = this.rows; _i < _a.length; _i++) {\n                var row = _a[_i];\n                j = 0;\n                for (var _b = 0, _c = row.cells; _b < _c.length; _b++) {\n                    var cell = _c[_b];\n                    var size = cell.measure(new _primitives_size__WEBPACK_IMPORTED_MODULE_3__.Size(cell.desiredCellWidth, cell.desiredCellHeight));\n                    if (cell.rowSpan === 1) {\n                        if (j === 0 || this.desiredRowHeight[parseInt(i.toString(), 10)] === undefined) {\n                            this.desiredRowHeight[parseInt(i.toString(), 10)] = size.height;\n                        }\n                        else {\n                            this.desiredRowHeight[parseInt(i.toString(), 10)] =\n                                Math.max(size.height, this.desiredRowHeight[parseInt(i.toString(), 10)]);\n                        }\n                    }\n                    if (cell.columnSpan === 1) {\n                        if (i === 0 || this.desiredCellWidth[parseInt(j.toString(), 10)] === undefined) {\n                            this.desiredCellWidth[parseInt(j.toString(), 10)] = size.width;\n                        }\n                        else {\n                            this.desiredCellWidth[parseInt(j.toString(), 10)] =\n                                Math.max(size.width, this.desiredCellWidth[parseInt(j.toString(), 10)]);\n                        }\n                        if (i === this.rows.length - 1) {\n                            desired.width += this.desiredCellWidth[parseInt(j.toString(), 10)];\n                        }\n                    }\n                    j++;\n                }\n                desired.height += this.desiredRowHeight[parseInt(i.toString(), 10)];\n                i++;\n            }\n            //to-do update definitions\n            i = j = 0;\n            var rowIndex = 0;\n            for (var _d = 0, _e = this.rows; _d < _e.length; _d++) {\n                var row = _e[_d];\n                j = 0;\n                var cellIndex = 0;\n                for (var _f = 0, _g = row.cells; _f < _g.length; _f++) {\n                    var cell = _g[_f];\n                    if (cell.columnSpan !== 1) {\n                        cell.desiredSize.width = 0;\n                        for (var start = 0; start < cell.columnSpan; start++) {\n                            if ((start + j) < row.cells.length) {\n                                cell.desiredSize.width += this.desiredCellWidth[start + j];\n                                cell.minWidth = cell.desiredSize.width;\n                                cell.measure(cell.desiredSize);\n                            }\n                        }\n                        j++;\n                    }\n                    else {\n                        cell.desiredSize.width = this.desiredCellWidth[parseInt(cellIndex.toString(), 10)];\n                        cell.measure(cell.desiredSize);\n                    }\n                    if (cell.rowSpan !== 1) {\n                        cell.desiredSize.height = 0;\n                        for (var start = 0; start < cell.rowSpan; start++) {\n                            if ((start + rowIndex) < this.rows.length) {\n                                cell.desiredSize.height += this.desiredRowHeight[start + rowIndex];\n                                cell.minHeight = cell.desiredSize.height;\n                                cell.measure(cell.desiredSize);\n                            }\n                        }\n                    }\n                    else {\n                        cell.desiredSize.height = this.desiredRowHeight[parseInt(rowIndex.toString(), 10)];\n                        cell.measure(cell.desiredSize);\n                    }\n                    i++;\n                    cellIndex++;\n                }\n                rowIndex++;\n            }\n        }\n        if (desired === undefined) {\n            desired = _super.prototype.validateDesiredSize.call(this, desired, availableSize);\n        }\n        _super.prototype.stretchChildren.call(this, desired);\n        this.desiredSize = desired;\n        return desired;\n    };\n    /**\n     * arrange method \\\n     *\n     * @returns { Size } arrange method .\\\n     * @param {Size} desiredSize - provide the startRowIndex value.\n     * @param {boolean} isChange - provide the startRowIndex value.\n     *\n     * @private\n     */\n    GridPanel.prototype.arrange = function (desiredSize, isChange) {\n        var j = 0;\n        var i = 0;\n        if (this.rows !== undefined && this.rows.length > 0) {\n            var x = this.offsetX - desiredSize.width * this.pivot.x;\n            var y = this.offsetY - desiredSize.height * this.pivot.y;\n            var cellX = x;\n            for (var _i = 0, _a = this.rows; _i < _a.length; _i++) {\n                var row = _a[_i];\n                cellX = x;\n                j = 0;\n                for (var _b = 0, _c = row.cells; _b < _c.length; _b++) {\n                    var cell = _c[_b];\n                    var cellWidth = Math.max(this.desiredCellWidth[parseInt(j.toString(), 10)], cell.desiredSize.width);\n                    var cellHeight = Math.max(this.desiredRowHeight[parseInt(i.toString(), 10)], cell.desiredSize.height);\n                    cell.offsetX = cellX + cellWidth * cell.pivot.x;\n                    cell.offsetY = y + cellHeight * cell.pivot.y;\n                    cellX += this.desiredCellWidth[parseInt(j.toString(), 10)];\n                    cell.arrange(new _primitives_size__WEBPACK_IMPORTED_MODULE_3__.Size(cellWidth, cellHeight));\n                    j++;\n                }\n                y += this.desiredRowHeight[parseInt(i.toString(), 10)];\n                i++;\n            }\n            if (isChange) {\n                // Need to remove the unwanted the child elements in the grid\n                // Used for row span and column span.\n                var cell = void 0;\n                var row = void 0;\n                var k = void 0;\n                var z = void 0;\n                var removeCell = void 0;\n                for (i = 0; i < this.rows.length; i++) {\n                    row = this.rows[parseInt(i.toString(), 10)];\n                    for (j = 0; j < row.cells.length; j++) {\n                        cell = row.cells[parseInt(j.toString(), 10)];\n                        if (cell.columnSpan > 1) {\n                            // remove a child element when a column span is greater than 1\n                            this.children.splice((this.children.indexOf(cell)) + 1, cell.columnSpan - 1);\n                        }\n                        if (cell.rowSpan > 1) {\n                            for (k = i, z = 0; ((k + cell.rowSpan - 1) < this.rows.length && z < cell.rowSpan - 1); k++, z++) {\n                                removeCell = this.rows[k + 1].cells[parseInt(j.toString(), 10)];\n                                // remove a child element when a row span is greater than 1\n                                this.children.splice(this.children.indexOf(removeCell), 1);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        this.actualSize = desiredSize;\n        this.updateBounds();\n        return desiredSize;\n    };\n    return GridPanel;\n}(_container__WEBPACK_IMPORTED_MODULE_2__.Container));\n\n/**\n * Defines the behavior of the RowDefinition of node\n */\nvar RowDefinition = /** @class */ (function () {\n    function RowDefinition() {\n        /** returns the height of node */\n        this.height = undefined;\n    }\n    return RowDefinition;\n}());\n\n/**\n * Defines the behavior of the ColumnDefinition of node\n */\nvar ColumnDefinition = /** @class */ (function () {\n    function ColumnDefinition() {\n        /** returns the width of node */\n        this.width = undefined;\n    }\n    return ColumnDefinition;\n}());\n\n/** @private */\nvar GridRow = /** @class */ (function () {\n    function GridRow() {\n        this.cells = null;\n    }\n    return GridRow;\n}());\n\n/** @private */\nvar GridCell = /** @class */ (function (_super) {\n    __extends(GridCell, _super);\n    function GridCell() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.columnSpan = 1;\n        _this.rowSpan = 1;\n        return _this;\n    }\n    return GridCell;\n}(_canvas__WEBPACK_IMPORTED_MODULE_1__.Canvas));\n\nvar GridCellItem = /** @class */ (function (_super) {\n    __extends(GridCellItem, _super);\n    function GridCellItem() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.rowId = 0;\n        _this.columnId = 0;\n        _this.rowSpan = 1;\n        _this.columnSpan = 1;\n        return _this;\n    }\n    return GridCellItem;\n}(_elements_diagram_element__WEBPACK_IMPORTED_MODULE_0__.DiagramElement));\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-diagrams/src/diagram/core/containers/grid.js?");

/***/ })

}]);