"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkej2_vue_samples"] = self["webpackChunkej2_vue_samples"] || []).push([["chunk-vendors-node_modules_syncfusion_ej2-pdfviewer_src_pdfviewer_annotation_free-text-annotation_js-2313d28c"],{

/***/ "./node_modules/@syncfusion/ej2-pdfviewer/src/pdfviewer/annotation/free-text-annotation.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-pdfviewer/src/pdfviewer/annotation/free-text-annotation.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FreeTextAnnotation: () => (/* binding */ FreeTextAnnotation)\n/* harmony export */ });\n/* harmony import */ var _base_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./../base/types */ \"./node_modules/@syncfusion/ej2-pdfviewer/src/pdfviewer/base/types.js\");\n/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../index */ \"./node_modules/@syncfusion/ej2-pdfviewer/src/pdfviewer/index.js\");\n/* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @syncfusion/ej2-base */ \"./node_modules/@syncfusion/ej2-base/index.js\");\n\n\n\n/**\n * @hidden\n */\nvar FreeTextAnnotation = /** @class */ (function () {\n    function FreeTextAnnotation(pdfviewer, pdfViewerBase) {\n        /**\n         * @private\n         */\n        this.inputBoxCount = 0;\n        /**\n         * @private\n         */\n        this.isFreeTextValueChange = false;\n        /**\n         * @private\n         */\n        this.isAddAnnotationProgramatically = false;\n        /**\n         * @private\n         */\n        this.isInuptBoxInFocus = false;\n        /**\n         * @private\n         */\n        this.freeTextPageNumbers = [];\n        /**\n         * @private\n         */\n        this.selectedText = '';\n        /**\n         * @private\n         */\n        this.isTextSelected = false;\n        this.selectionStart = 0;\n        this.selectionEnd = 0;\n        /**\n         * @private\n         */\n        this.isBold = false;\n        /**\n         * @private\n         */\n        this.isItalic = false;\n        /**\n         * @private\n         */\n        this.isUnderline = false;\n        /**\n         * @private\n         */\n        this.isStrikethrough = false;\n        this.isReadonly = false;\n        this.isMaximumWidthReached = false;\n        this.freeTextPaddingLeft = 4;\n        this.freeTextPaddingTop = 5;\n        this.defaultFontSize = 16;\n        this.lineGap = 1.5;\n        /**\n         * @private\n         */\n        this.previousText = 'Type Here';\n        /**\n         * @private\n         */\n        this.currentPosition = [];\n        this.pdfViewer = pdfviewer;\n        this.pdfViewerBase = pdfViewerBase;\n        this.updateTextProperties();\n        this.inputBoxElement = document.createElement('textarea');\n        this.inputBoxElement.style.position = 'absolute';\n        this.inputBoxElement.style.Width = this.defautWidth;\n        this.inputBoxElement.style.Height = this.defaultHeight;\n        this.inputBoxElement.style.zIndex = '5';\n        this.inputBoxElement.style.fontSize = this.fontSize + 'px';\n        this.inputBoxElement.className = 'free-text-input';\n        this.inputBoxElement.style.resize = 'none';\n        this.inputBoxElement.style.borderColor = this.borderColor;\n        this.inputBoxElement.style.background = this.fillColor;\n        this.inputBoxElement.style.borderStyle = this.borderStyle;\n        this.inputBoxElement.style.borderWidth = this.borderWidth + 'px';\n        this.inputBoxElement.style.padding = this.padding;\n        this.inputBoxElement.style.paddingLeft = this.freeTextPaddingLeft + 'px';\n        this.inputBoxElement.style.paddingTop = this.freeTextPaddingTop * (parseFloat(this.inputBoxElement.style.fontSize) / this.defaultFontSize) + 'px';\n        this.inputBoxElement.style.borderRadius = '2px';\n        this.inputBoxElement.style.verticalAlign = 'middle';\n        this.inputBoxElement.style.fontFamily = this.fontFamily;\n        this.inputBoxElement.style.color = this.pdfViewer.freeTextSettings.fontColor ?\n            this.pdfViewer.freeTextSettings.fontColor : '#000';\n        this.inputBoxElement.style.overflow = 'hidden';\n        this.inputBoxElement.style.wordBreak = this.wordBreak;\n        this.inputBoxElement.readOnly = this.isReadonly;\n        this.inputBoxElement.addEventListener('focusout', this.onFocusOutInputBox.bind(this));\n        this.inputBoxElement.addEventListener('keydown', this.onKeyDownInputBox.bind(this));\n        this.inputBoxElement.addEventListener('mouseup', this.onMouseUpInputBox.bind(this));\n        this.freeTextPageNumbers = [];\n    }\n    /**\n     * @private\n     * @returns {void}\n     */\n    FreeTextAnnotation.prototype.updateTextProperties = function () {\n        this.defautWidth = this.pdfViewer.freeTextSettings.width ? this.pdfViewer.freeTextSettings.width : 151;\n        this.defaultHeight = this.pdfViewer.freeTextSettings.height ? this.pdfViewer.freeTextSettings.height : 24.6;\n        this.borderColor = this.pdfViewer.freeTextSettings.borderColor ? this.pdfViewer.freeTextSettings.borderColor : '#ffffff00';\n        this.fillColor = this.pdfViewer.freeTextSettings.fillColor ? this.pdfViewer.freeTextSettings.fillColor : '#fff';\n        this.borderStyle = this.pdfViewer.freeTextSettings.borderStyle ? this.pdfViewer.freeTextSettings.borderStyle : 'solid';\n        this.borderWidth = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(this.pdfViewer.freeTextSettings.borderWidth) ?\n            this.pdfViewer.freeTextSettings.borderWidth : 1;\n        this.fontSize = this.pdfViewer.freeTextSettings.fontSize ? this.pdfViewer.freeTextSettings.fontSize : 16;\n        this.opacity = this.pdfViewer.freeTextSettings.opacity ? this.pdfViewer.freeTextSettings.opacity : 1;\n        this.fontColor = this.pdfViewer.freeTextSettings.fontColor ? this.pdfViewer.freeTextSettings.fontColor : '#000';\n        this.author = (this.pdfViewer.freeTextSettings.author && this.pdfViewer.freeTextSettings.author !== 'Guest') ? this.pdfViewer.freeTextSettings.author : this.pdfViewer.annotationSettings.author ? this.pdfViewer.annotationSettings.author : 'Guest';\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(this.pdfViewer.annotationModule)) {\n            if (this.getRgbCode(this.borderColor).a === 0) {\n                this.borderWidth = 0;\n            }\n        }\n        if (this.pdfViewer.freeTextSettings.fontFamily) {\n            var fontName = this.pdfViewer.freeTextSettings.fontFamily;\n            if (fontName === 'Helvetica' || fontName === 'Times New Roman' || fontName === 'Courier' || fontName === 'Symbol' || fontName === 'ZapfDingbats') {\n                this.fontFamily = fontName;\n            }\n            else {\n                this.fontFamily = 'Helvetica';\n            }\n        }\n        else {\n            this.fontFamily = 'Helvetica';\n        }\n        this.textAlign = this.pdfViewer.freeTextSettings.textAlignment ? this.pdfViewer.freeTextSettings.textAlignment : 'Left';\n        this.defaultText = this.pdfViewer.freeTextSettings.defaultText ? this.pdfViewer.freeTextSettings.defaultText : 'Type here';\n        this.isReadonly = false;\n        if (this.pdfViewer.freeTextSettings.enableAutoFit) {\n            this.wordBreak = 'break-all';\n            this.padding = '2px';\n        }\n        else {\n            this.padding = '0px';\n            this.wordBreak = 'break-word';\n        }\n        if (this.pdfViewer.freeTextSettings.isLock || this.pdfViewer.annotationSettings.isLock\n            || this.pdfViewer.freeTextSettings.isReadonly) {\n            this.isReadonly = true;\n        }\n        this.isBold = (this.pdfViewer.freeTextSettings.fontStyle & _base_types__WEBPACK_IMPORTED_MODULE_0__.FontStyle.Bold) === _base_types__WEBPACK_IMPORTED_MODULE_0__.FontStyle.Bold;\n        this.isItalic = (this.pdfViewer.freeTextSettings.fontStyle & _base_types__WEBPACK_IMPORTED_MODULE_0__.FontStyle.Italic) === _base_types__WEBPACK_IMPORTED_MODULE_0__.FontStyle.Italic;\n        this.isUnderline = (this.pdfViewer.freeTextSettings.fontStyle & _base_types__WEBPACK_IMPORTED_MODULE_0__.FontStyle.Underline) === _base_types__WEBPACK_IMPORTED_MODULE_0__.FontStyle.Underline;\n        this.isStrikethrough = (this.pdfViewer.freeTextSettings.fontStyle & _base_types__WEBPACK_IMPORTED_MODULE_0__.FontStyle.Strikethrough) === _base_types__WEBPACK_IMPORTED_MODULE_0__.FontStyle.Strikethrough;\n    };\n    /**\n     * @param {any} shapeAnnotations - It describes about the shape annotations\n     * @param {number} pageNumber - It describes about the page number value\n     * @param {boolean} isImportAction - It ensures whether the isImportAction is true or not\n     * @param {boolean} isAnnotOrderAction - It ensures whether the isAnnotOrderAction is true or not\n     * @private\n     * @returns {void}\n     */\n    FreeTextAnnotation.prototype.renderFreeTextAnnotations = function (shapeAnnotations, pageNumber, isImportAction, isAnnotOrderAction) {\n        var isFreeTextAdded = false;\n        if (!isImportAction) {\n            for (var p = 0; p < this.freeTextPageNumbers.length; p++) {\n                if (this.freeTextPageNumbers[parseInt(p.toString(), 10)] === pageNumber) {\n                    isFreeTextAdded = true;\n                    break;\n                }\n            }\n        }\n        if (shapeAnnotations && (!isFreeTextAdded || isAnnotOrderAction)) {\n            if (shapeAnnotations.length >= 1) {\n                this.freeTextPageNumbers.push(pageNumber);\n                for (var i = 0; i < shapeAnnotations.length; i++) {\n                    var annotation = shapeAnnotations[parseInt(i.toString(), 10)];\n                    annotation.annotationAddMode = this.pdfViewer.annotationModule.\n                        findAnnotationMode(annotation, pageNumber, annotation.AnnotType);\n                    if (annotation.AnnotType) {\n                        var vertexPoints = null;\n                        if (annotation.VertexPoints) {\n                            vertexPoints = [];\n                            for (var j = 0; j < annotation.VertexPoints.length; j++) {\n                                var point = { x: annotation.VertexPoints[parseInt(j.toString(), 10)].X,\n                                    y: annotation.VertexPoints[parseInt(j.toString(), 10)].Y };\n                                vertexPoints.push(point);\n                            }\n                        }\n                        annotation.AnnotationSettings = annotation.AnnotationSettings ?\n                            annotation.AnnotationSettings : this.pdfViewer.annotationModule.updateSettings(this.pdfViewer.freeTextSettings);\n                        if (annotation.IsLocked) {\n                            annotation.AnnotationSettings.isLock = annotation.IsLocked;\n                        }\n                        var paddingValue = 0.5;\n                        var annotationBoundsX = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(annotation.Bounds.X) ?\n                            annotation.Bounds.X - paddingValue : annotation.Bounds.x;\n                        var annotationBoundsY = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(annotation.Bounds.Y) ?\n                            annotation.Bounds.Y - paddingValue : annotation.Bounds.y;\n                        var width = annotation.Bounds.Width ?\n                            annotation.Bounds.Width : annotation.Bounds.width;\n                        var height = annotation.Bounds.Height ?\n                            annotation.Bounds.Height : annotation.Bounds.height;\n                        var isAddedProgramatically = annotation.isAddAnnotationProgramatically ?\n                            annotation.isAddAnnotationProgramatically : false;\n                        var rotateValue = this.getRotationValue(pageNumber, isAddedProgramatically);\n                        var pageRotate = annotation.PageRotation;\n                        if (Math.sign(annotation.Rotate) === 1) {\n                            annotation.Rotate = -annotation.Rotate + rotateValue;\n                        }\n                        else {\n                            annotation.Rotate = annotation.Rotate + rotateValue;\n                        }\n                        var rotateAngle = Math.abs(annotation.Rotate);\n                        if (isImportAction && rotateValue !== pageRotate) {\n                            if (this.pdfViewerBase.isJsonImported) {\n                                var pageDetails = this.pdfViewerBase.pageSize[parseInt(pageNumber.toString(), 10)];\n                                var boundsX = annotation.Bounds.X;\n                                var boundsY = annotation.Bounds.Y;\n                                var annotationWidth = width;\n                                var annotationHeight = height;\n                                if (pageRotate > 0) {\n                                    var rotatation = pageRotate / 90;\n                                    if (rotatation === 1) {\n                                        height = width;\n                                        width = annotation.Bounds.Height;\n                                        annotationBoundsX = annotation.Bounds.Y;\n                                        if (rotateValue !== 270) {\n                                            annotationBoundsY = pageDetails.height - annotation.Bounds.X -\n                                                annotation.Bounds.Width;\n                                        }\n                                        else {\n                                            annotationBoundsY = pageDetails.width - annotation.Bounds.X -\n                                                annotation.Bounds.Width;\n                                        }\n                                    }\n                                    else if (rotatation === 2) {\n                                        if (rotateValue !== 270 && rotateValue !== 90) {\n                                            annotationBoundsX = pageDetails.width - annotation.Bounds.X -\n                                                annotation.Bounds.Width;\n                                            annotationBoundsY = pageDetails.height - annotation.Bounds.Y -\n                                                annotation.Bounds.Height;\n                                        }\n                                        else {\n                                            annotationBoundsX = pageDetails.height - annotation.Bounds.X -\n                                                annotation.Bounds.Width;\n                                            annotationBoundsY = pageDetails.width - annotation.Bounds.Y -\n                                                annotation.Bounds.Height;\n                                        }\n                                    }\n                                    else if (rotatation === 3) {\n                                        height = width;\n                                        width = annotation.Bounds.Height;\n                                        if (rotateValue !== 90) {\n                                            annotationBoundsX = pageDetails.width - annotation.Bounds.Y - width;\n                                        }\n                                        else {\n                                            annotationBoundsX = pageDetails.height - annotation.Bounds.Y - width;\n                                        }\n                                        annotationBoundsY = annotation.Bounds.X;\n                                    }\n                                    boundsX = annotationBoundsX;\n                                    boundsY = annotationBoundsY;\n                                    annotationWidth = width;\n                                    annotationHeight = height;\n                                }\n                                rotateAngle = (rotateValue / 90) % 4;\n                                if (rotateAngle === 1) {\n                                    height = width;\n                                    width = annotationHeight;\n                                    annotationBoundsX = pageDetails.width - boundsY - annotationHeight - paddingValue;\n                                    annotationBoundsY = boundsX - paddingValue;\n                                    rotateAngle = 90;\n                                }\n                                else if (rotateAngle === 2) {\n                                    annotationBoundsX = pageDetails.width - boundsX - annotationWidth - paddingValue;\n                                    annotationBoundsY = pageDetails.height - boundsY - annotationHeight - paddingValue;\n                                    rotateAngle = 180;\n                                }\n                                else if (rotateAngle === 3) {\n                                    height = width;\n                                    width = annotationHeight;\n                                    annotationBoundsX = boundsY - paddingValue;\n                                    annotationBoundsY = pageDetails.height - boundsX - height - paddingValue;\n                                    rotateAngle = 270;\n                                }\n                                else if (rotateAngle === 0) {\n                                    annotationBoundsX = boundsX - paddingValue;\n                                    annotationBoundsY = boundsY - paddingValue;\n                                }\n                            }\n                        }\n                        if (rotateAngle === 90 || rotateAngle === 270) {\n                            var rotationHeight = height;\n                            var rotationWidth = width;\n                            height = rotationWidth;\n                            width = rotationHeight;\n                            annotationBoundsX = (annotationBoundsX - (width / 2)) + (height / 2);\n                            annotationBoundsY = (annotationBoundsY) + (width / 2 - height / 2);\n                        }\n                        annotation.allowedInteractions = annotation.AllowedInteractions ? annotation.AllowedInteractions :\n                            this.pdfViewer.annotationModule.updateAnnotationAllowedInteractions(annotation);\n                        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(annotation) && annotation.MarkupText && annotation.MarkupText.includes('\\n')) {\n                            var noOfLines = annotation.MarkupText.split('\\n').length;\n                            var newHeight = noOfLines * annotation.FontSize * this.lineGap;\n                            var pageHeight = this.pdfViewerBase.pageSize[parseInt(pageNumber.toString(), 10)].height\n                                - annotation.Bounds.Y;\n                            if (height < newHeight) {\n                                height = newHeight;\n                            }\n                            if (height > pageHeight) {\n                                height = pageHeight;\n                            }\n                        }\n                        var annot = {\n                            author: annotation.Author, modifiedDate: annotation.ModifiedDate, subject: annotation.Subject, id: 'freetext' + this.inputBoxCount,\n                            rotateAngle: annotation.Rotate, dynamicText: annotation.MarkupText, strokeColor: annotation.StrokeColor,\n                            thickness: annotation.Thickness, fillColor: annotation.FillColor,\n                            bounds: {\n                                x: annotationBoundsX, y: annotationBoundsY, left: annotationBoundsX, top: annotationBoundsY,\n                                width: width, height: height, right: annotation.Bounds.Right,\n                                bottom: annotation.Bounds.Bottom\n                            }, annotName: annotation.AnnotName, shapeAnnotationType: 'FreeText',\n                            pageIndex: pageNumber, opacity: annotation.Opacity, fontColor: annotation.FontColor,\n                            fontSize: annotation.FontSize, pageRotation: rotateValue,\n                            fontFamily: annotation.FontFamily, notes: annotation.MarkupText, textAlign: annotation.TextAlign,\n                            comments: this.pdfViewer.annotationModule.getAnnotationComments(annotation.Comments, annotation, annotation.Author),\n                            review: { state: annotation.State, stateModel: annotation.StateModel,\n                                modifiedDate: annotation.ModifiedDate, author: annotation.Author },\n                            font: { isBold: annotation.Font.Bold, isItalic: annotation.Font.Italic,\n                                isStrikeout: annotation.Font.Strikeout, isUnderline: annotation.Font.Underline },\n                            annotationSelectorSettings: this.getSettings(annotation), annotationSettings: annotation.AnnotationSettings,\n                            customData: this.pdfViewer.annotation.getCustomData(annotation),\n                            annotationAddMode: annotation.annotationAddMode, allowedInteractions: annotation.allowedInteractions,\n                            isPrint: annotation.IsPrint, isCommentLock: annotation.IsCommentLock, isReadonly: annotation.IsReadonly,\n                            isAddAnnotationProgrammatically: isAddedProgramatically, isTransparentSet: annotation.IsTransparentSet\n                        };\n                        if (isImportAction) {\n                            annot.id = annotation.AnnotName;\n                            annot.previousFontSize = annotation.FontSize ? annotation.FontSize : this.fontSize;\n                        }\n                        var addedAnnot = this.pdfViewer.add(annot);\n                        this.pdfViewer.annotationModule.storeAnnotations(pageNumber, annot, '_annotations_freetext');\n                        if (this.isAddAnnotationProgramatically) {\n                            var settings = {\n                                opacity: annot.opacity, borderColor: annot.strokeColor, borderWidth: annot.thickness,\n                                author: annotation.author, subject: annotation.subject, modifiedDate: annotation.modifiedDate,\n                                fillColor: annot.fillColor, fontSize: annot.fontSize, width: annot.bounds.width,\n                                height: annot.bounds.height, fontColor: annot.fontColor, fontFamily: annot.fontFamily,\n                                defaultText: annot.dynamicText, fontStyle: annot.font, textAlignment: annot.textAlign\n                            };\n                            this.pdfViewer.fireAnnotationAdd(annot.pageIndex, annot.annotName, 'FreeText', annot.bounds, settings);\n                        }\n                        this.inputBoxCount += 1;\n                        this.pdfViewer.annotation.freeTextAnnotationModule.isFreeTextValueChange = true;\n                        this.pdfViewer.nodePropertyChange(addedAnnot, {});\n                        this.pdfViewer.annotation.freeTextAnnotationModule.isFreeTextValueChange = false;\n                    }\n                }\n            }\n        }\n    };\n    /**\n     * @param {any} annotation - It describes about the annotation\n     * @private\n     * @returns {AnnotationSelectorSettingsModel} - AnnotationSelectorSettingsModel\n     */\n    FreeTextAnnotation.prototype.getSettings = function (annotation) {\n        var selector = this.pdfViewer.annotationSelectorSettings;\n        if (annotation.AnnotationSelectorSettings) {\n            selector = typeof (annotation.AnnotationSelectorSettings) === 'string' ? JSON.parse(annotation.AnnotationSelectorSettings) : annotation.AnnotationSelectorSettings;\n        }\n        else if (this.pdfViewer.freeTextSettings.annotationSelectorSettings) {\n            selector = this.pdfViewer.freeTextSettings.annotationSelectorSettings;\n            this.pdfViewerBase.updateSelectorSettings(selector);\n        }\n        return selector;\n    };\n    /**\n     * @param {AnnotType} type - Annotation type\n     * @private\n     * @returns {void}\n     */\n    FreeTextAnnotation.prototype.setAnnotationType = function (type) {\n        this.pdfViewerBase.disableTextSelectionMode();\n        this.pdfViewer.annotationModule.isFormFieldShape = false;\n        switch (type) {\n            case 'FreeText': {\n                this.currentAnnotationMode = 'FreeText';\n                this.updateTextProperties();\n                var modifiedDateRect = this.pdfViewer.annotation.stickyNotesAnnotationModule.getDateAndTime();\n                this.pdfViewer.drawingObject = {\n                    shapeAnnotationType: 'FreeText', strokeColor: this.borderColor,\n                    fillColor: this.fillColor, opacity: this.opacity, notes: '', isCommentLock: false,\n                    thickness: this.borderWidth, borderDashArray: '0', modifiedDate: modifiedDateRect,\n                    author: this.author, subject: this.pdfViewer.freeTextSettings.subject,\n                    font: {\n                        isBold: this.isBold, isItalic: this.isItalic, isStrikeout: this.isStrikethrough,\n                        isUnderline: this.isUnderline\n                    }, textAlign: this.textAlign\n                };\n                this.pdfViewer.tool = 'Select';\n                break;\n            }\n        }\n    };\n    /**\n     * @param {string} property - It describes about the property name\n     * @param {number} pageNumber - It describes about the page number value\n     * @param {any} annotationBase - It describes about the annotation base\n     * @param {boolean} isNewAdded - It describes about whether the isNewAdded is true or not\n     * @private\n     * @returns {IFreeTextAnnotation} - Ifreetextannotation\n     */\n    FreeTextAnnotation.prototype.modifyInCollection = function (property, pageNumber, annotationBase, isNewAdded) {\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(annotationBase.formFieldAnnotationType) && annotationBase.formFieldAnnotationType !== '') {\n            this.pdfViewer.annotationModule.isFormFieldShape = true;\n        }\n        else {\n            this.pdfViewer.annotationModule.isFormFieldShape = false;\n        }\n        var currentAnnotObject = null;\n        var isEdited = false;\n        var pageAnnotations = this.getAnnotations(pageNumber, null);\n        if (pageAnnotations !== null && annotationBase) {\n            for (var i = 0; i < pageAnnotations.length; i++) {\n                if (annotationBase.id === pageAnnotations[parseInt(i.toString(), 10)].id) {\n                    if (property === 'bounds') {\n                        this.pdfViewerBase.isBounds =\n                            this.pdfViewerBase.boundsCalculation(pageAnnotations[parseInt(i.toString(), 10)].bounds, annotationBase.wrapper.bounds);\n                        if (this.pdfViewerBase.isBounds) {\n                            pageAnnotations[parseInt(i.toString(), 10)].bounds = {\n                                left: annotationBase.bounds.x, top: annotationBase.bounds.y,\n                                width: annotationBase.bounds.width, height: annotationBase.bounds.height,\n                                right: annotationBase.bounds.right,\n                                bottom: annotationBase.bounds.bottom\n                            };\n                        }\n                    }\n                    else if (property === 'fill') {\n                        pageAnnotations[parseInt(i.toString(), 10)].fillColor = annotationBase.wrapper.children[0].style.fill;\n                    }\n                    else if (property === 'stroke') {\n                        pageAnnotations[parseInt(i.toString(), 10)].strokeColor = annotationBase.wrapper.children[0].style.strokeColor;\n                    }\n                    else if (property === 'opacity') {\n                        pageAnnotations[parseInt(i.toString(), 10)].opacity = annotationBase.wrapper.children[0].style.opacity;\n                    }\n                    else if (property === 'thickness') {\n                        pageAnnotations[parseInt(i.toString(), 10)].thickness = annotationBase.wrapper.children[0].style.strokeWidth;\n                    }\n                    else if (property === 'notes') {\n                        pageAnnotations[parseInt(i.toString(), 10)].note = annotationBase.notes;\n                    }\n                    else if (property === 'delete') {\n                        currentAnnotObject = pageAnnotations.splice(i, 1)[0];\n                        break;\n                    }\n                    else if (property === 'dynamicText') {\n                        if (pageAnnotations[parseInt(i.toString(), 10)].dynamicText !== annotationBase.dynamicText) {\n                            isEdited = true;\n                            this.pdfViewer.fireCommentEdit(pageAnnotations[parseInt(i.toString(), 10)].annotName, annotationBase.dynamicText, pageAnnotations[parseInt(i.toString(), 10)]);\n                        }\n                        pageAnnotations[parseInt(i.toString(), 10)].dynamicText = annotationBase.dynamicText;\n                    }\n                    else if (property === 'fontColor') {\n                        pageAnnotations[parseInt(i.toString(), 10)].fontColor = annotationBase.fontColor;\n                    }\n                    else if (property === 'fontSize') {\n                        pageAnnotations[parseInt(i.toString(), 10)].fontSize = annotationBase.fontSize;\n                    }\n                    else if (property === 'fontFamily') {\n                        pageAnnotations[parseInt(i.toString(), 10)].fontFamily = annotationBase.fontFamily;\n                    }\n                    else if (property === 'textPropertiesChange') {\n                        pageAnnotations[parseInt(i.toString(), 10)].font = { isBold: annotationBase.font.isBold,\n                            isItalic: annotationBase.font.isItalic, isStrikeout: annotationBase.font.isStrikeout,\n                            isUnderline: annotationBase.font.isUnderline };\n                    }\n                    else if (property === 'textAlign') {\n                        pageAnnotations[parseInt(i.toString(), 10)].textAlign = annotationBase.textAlign;\n                    }\n                    if (this.pdfViewerBase.isBounds) {\n                        pageAnnotations[parseInt(i.toString(), 10)].modifiedDate =\n                            this.pdfViewer.annotation.stickyNotesAnnotationModule.getDateAndTime();\n                    }\n                    this.pdfViewer.annotationModule.storeAnnotationCollections(pageAnnotations[parseInt(i.toString(), 10)], pageNumber);\n                }\n            }\n            this.manageAnnotations(pageAnnotations, pageNumber);\n        }\n        if (!isNewAdded && isEdited) {\n            this.pdfViewerBase.updateDocumentEditedProperty(true);\n        }\n        return currentAnnotObject;\n    };\n    /**\n     * @param {number} pageNumber - This is pageNumber\n     * @param {IFreeTextAnnotation} annotationBase - This is annotationBase\n     * @private\n     * @returns {void}\n     */\n    FreeTextAnnotation.prototype.addInCollection = function (pageNumber, annotationBase) {\n        if (annotationBase) {\n            var pageAnnotations = this.getAnnotations(pageNumber, null);\n            if (pageAnnotations) {\n                pageAnnotations.push(annotationBase);\n            }\n            this.manageAnnotations(pageAnnotations, pageNumber);\n        }\n    };\n    /**\n     * @private\n     * @returns {string} - string\n     */\n    FreeTextAnnotation.prototype.saveFreeTextAnnotations = function () {\n        var storeObject = _index__WEBPACK_IMPORTED_MODULE_1__.PdfViewerBase.sessionStorageManager.getItem(this.pdfViewerBase.documentId + '_annotations_freetext');\n        if (this.pdfViewerBase.isStorageExceed) {\n            storeObject = this.pdfViewerBase.annotationStorage[this.pdfViewerBase.documentId + '_annotations_freetext'];\n        }\n        var annotations = [];\n        for (var j = 0; j < this.pdfViewerBase.pageCount; j++) {\n            annotations[parseInt(j.toString(), 10)] = [];\n        }\n        if (storeObject && !this.pdfViewer.annotationSettings.skipDownload) {\n            var annotationCollection = JSON.parse(storeObject);\n            for (var i = 0; i < annotationCollection.length; i++) {\n                var newArray = [];\n                var pageAnnotationObject = annotationCollection[parseInt(i.toString(), 10)];\n                if (pageAnnotationObject) {\n                    for (var z = 0; pageAnnotationObject.annotations.length > z; z++) {\n                        this.pdfViewer.annotationModule.updateModifiedDate(pageAnnotationObject.annotations[parseInt(z.toString(), 10)]);\n                        pageAnnotationObject.annotations[parseInt(z.toString(), 10)].bounds =\n                            this.getBoundsBasedOnRotation(pageAnnotationObject.annotations[parseInt(z.toString(), 10)].bounds, pageAnnotationObject.annotations[parseInt(z.toString(), 10)].rotateAngle, pageAnnotationObject.pageIndex, pageAnnotationObject.annotations[parseInt(z.toString(), 10)]);\n                        pageAnnotationObject.annotations[parseInt(z.toString(), 10)].bounds =\n                            JSON.stringify(this.pdfViewer.annotation.getBounds(pageAnnotationObject.\n                                annotations[parseInt(z.toString(), 10)].bounds, pageAnnotationObject.pageIndex));\n                        var strokeColorString = pageAnnotationObject.annotations[parseInt(z.toString(), 10)].strokeColor;\n                        pageAnnotationObject.annotations[parseInt(z.toString(), 10)].strokeColor =\n                            JSON.stringify(this.getRgbCode(strokeColorString));\n                        var fillColorString = pageAnnotationObject.annotations[parseInt(z.toString(), 10)].fillColor;\n                        pageAnnotationObject.annotations[parseInt(z.toString(), 10)].fillColor =\n                            JSON.stringify(this.getRgbCode(fillColorString));\n                        var fontColorString = pageAnnotationObject.annotations[parseInt(z.toString(), 10)].fontColor;\n                        pageAnnotationObject.annotations[parseInt(z.toString(), 10)].fontColor =\n                            JSON.stringify(this.getRgbCode(fontColorString));\n                        pageAnnotationObject.annotations[parseInt(z.toString(), 10)].vertexPoints =\n                            JSON.stringify(pageAnnotationObject.annotations[parseInt(z.toString(), 10)].vertexPoints);\n                        if (pageAnnotationObject.annotations[parseInt(z.toString(), 10)].rectangleDifference !== null) {\n                            pageAnnotationObject.annotations[parseInt(z.toString(), 10)].rectangleDifference =\n                                JSON.stringify(pageAnnotationObject.annotations[parseInt(z.toString(), 10)].rectangleDifference);\n                        }\n                        pageAnnotationObject.annotations[parseInt(z.toString(), 10)].padding = this.getPaddingValues(this.fontSize);\n                    }\n                    newArray = pageAnnotationObject.annotations;\n                }\n                annotations[pageAnnotationObject.pageIndex] = newArray;\n            }\n        }\n        return JSON.stringify(annotations);\n    };\n    FreeTextAnnotation.prototype.getRotationValue = function (pageIndex, isAddedProgrammatically) {\n        var pageDetails = this.pdfViewerBase.pageSize[parseInt(pageIndex.toString(), 10)];\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(isAddedProgrammatically) && isAddedProgrammatically) {\n            return 0;\n        }\n        else {\n            if (pageDetails.rotation === 0) {\n                return 0;\n            }\n            else if (pageDetails.rotation === 1) {\n                return 90;\n            }\n            else if (pageDetails.rotation === 2) {\n                return 180;\n            }\n            else if (pageDetails.rotation === 3) {\n                return 270;\n            }\n            return 0;\n        }\n    };\n    FreeTextAnnotation.prototype.getBoundsBasedOnRotation = function (bounds, rotateAngle, pageIndex, annotation, isAddedProgrammatically) {\n        var rotateValue = this.getRotationValue(pageIndex, isAddedProgrammatically);\n        var paddingValue = 0.5;\n        annotation.rotateAngle = rotateAngle - rotateValue;\n        annotation.pageRotation = rotateValue;\n        if (rotateAngle === 90 || rotateAngle === -90 || rotateAngle === 270 || rotateAngle === -270) {\n            var x = bounds.left + (bounds.width / 2) - (bounds.height / 2);\n            var y = bounds.top - (bounds.width / 2 - bounds.height / 2);\n            return { x: x + paddingValue, y: y + paddingValue, left: x + paddingValue,\n                top: y + paddingValue, width: bounds.height, height: bounds.width };\n        }\n        else {\n            return { x: bounds.left + paddingValue, y: bounds.top + paddingValue,\n                left: bounds.left + paddingValue, top: bounds.top + paddingValue, width: bounds.width, height: bounds.height };\n        }\n    };\n    FreeTextAnnotation.prototype.manageAnnotations = function (pageAnnotations, pageNumber) {\n        var storeObject = _index__WEBPACK_IMPORTED_MODULE_1__.PdfViewerBase.sessionStorageManager.getItem(this.pdfViewerBase.documentId + '_annotations_freetext');\n        if (this.pdfViewerBase.isStorageExceed) {\n            storeObject = this.pdfViewerBase.annotationStorage[this.pdfViewerBase.documentId + '_annotations_freetext'];\n        }\n        if (storeObject) {\n            var annotObject = JSON.parse(storeObject);\n            if (!this.pdfViewerBase.isStorageExceed) {\n                _index__WEBPACK_IMPORTED_MODULE_1__.PdfViewerBase.sessionStorageManager.removeItem(this.pdfViewerBase.documentId + '_annotations_freetext');\n            }\n            var index = this.pdfViewer.annotationModule.getPageCollection(annotObject, pageNumber);\n            if (index != null && annotObject[parseInt(index.toString(), 10)]) {\n                annotObject[parseInt(index.toString(), 10)].annotations = pageAnnotations;\n            }\n            var annotationStringified = JSON.stringify(annotObject);\n            if (this.pdfViewerBase.isStorageExceed) {\n                this.pdfViewerBase.annotationStorage[this.pdfViewerBase.documentId + '_annotations_freetext'] = annotationStringified;\n            }\n            else {\n                _index__WEBPACK_IMPORTED_MODULE_1__.PdfViewerBase.sessionStorageManager.setItem(this.pdfViewerBase.documentId + '_annotations_freetext', annotationStringified);\n            }\n        }\n    };\n    FreeTextAnnotation.prototype.getAnnotations = function (pageIndex, shapeAnnotations) {\n        var annotationCollection;\n        var storeObject = _index__WEBPACK_IMPORTED_MODULE_1__.PdfViewerBase.sessionStorageManager.getItem(this.pdfViewerBase.documentId + '_annotations_freetext');\n        if (this.pdfViewerBase.isStorageExceed) {\n            storeObject = this.pdfViewerBase.annotationStorage[this.pdfViewerBase.documentId + '_annotations_freetext'];\n        }\n        if (storeObject) {\n            var annotObject = JSON.parse(storeObject);\n            var index = this.pdfViewer.annotationModule.getPageCollection(annotObject, pageIndex);\n            if (index != null && annotObject[parseInt(index.toString(), 10)]) {\n                annotationCollection = annotObject[parseInt(index.toString(), 10)].annotations;\n            }\n            else {\n                annotationCollection = shapeAnnotations;\n            }\n        }\n        else {\n            annotationCollection = shapeAnnotations;\n        }\n        return annotationCollection;\n    };\n    FreeTextAnnotation.prototype.getRgbCode = function (colorString) {\n        // eslint-disable-next-line\n        if (!colorString.match(/#([a-z0-9]+)/gi) && !colorString.match(/^rgba?\\((\\d+),\\s*(\\d+),\\s*(\\d+)(?:,\\s*(\\d+(?:\\.\\d+)?))?\\)$/)) {\n            colorString = this.pdfViewer.annotationModule.nameToHash(colorString);\n        }\n        var stringArray = colorString.split(',');\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(stringArray[1])) {\n            colorString = this.pdfViewer.annotationModule.getValue(colorString, 'rgba');\n            stringArray = colorString.split(',');\n        }\n        var r = parseFloat(stringArray[0].split('(')[1]);\n        var g = parseFloat(stringArray[1]);\n        var b = parseFloat(stringArray[2]);\n        var a = parseFloat(stringArray[3]);\n        return { r: r, g: g, b: b, a: a };\n    };\n    /**\n     * @private\n     * @returns {void}\n     */\n    FreeTextAnnotation.prototype.onFocusOutInputBox = function () {\n        var allowServerDataBind = this.pdfViewer.allowServerDataBinding;\n        this.pdfViewer.enableServerDataBinding(false);\n        if (!this.pdfViewerBase.isFreeTextContextMenu) {\n            this.pdfViewer.fireBeforeAddFreeTextAnnotation(this.inputBoxElement.value);\n            if (this.pdfViewer.enableHtmlSanitizer && this.inputBoxElement) {\n                this.inputBoxElement.value = _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.SanitizeHtmlHelper.sanitize(this.inputBoxElement.value);\n            }\n            var pageIndex = this.inputBoxElement.id && this.inputBoxElement.id.split('_freeText_')[1] && this.inputBoxElement.id.split('_freeText_')[1].split('_')[0] ? parseFloat(this.inputBoxElement.id.split('_freeText_')[1].split('_')[0]) : this.pdfViewerBase.currentPageNumber - 1;\n            var pageDiv = this.pdfViewerBase.getElement('_pageDiv_' + (pageIndex));\n            var width = parseFloat(this.inputBoxElement.style.width);\n            // Removed the line since when we click on the freetext the size gets changed. Task Id: 847135\n            if (this.pdfViewer.freeTextSettings.enableAutoFit && !this.isMaximumWidthReached && this.isNewFreeTextAnnot) {\n                width = parseFloat(this.inputBoxElement.style.width);\n                var characterLength = 8;\n                this.inputBoxElement.style.width = (width - characterLength) + 'px';\n            }\n            var inputEleHeight = parseFloat(this.inputBoxElement.style.height);\n            var inputEleWidth = parseFloat(this.inputBoxElement.style.width);\n            var inputEleLeft = parseFloat(this.inputBoxElement.style.left);\n            if (this.pdfViewerBase.isMixedSizeDocument) {\n                var canvas = this.pdfViewerBase.getAnnotationCanvas('_annotationCanvas_', pageIndex);\n                inputEleLeft = inputEleLeft - canvas.offsetLeft;\n            }\n            var inputEleTop = parseFloat(this.inputBoxElement.style.top);\n            var zoomFactor = this.pdfViewerBase.getZoomFactor();\n            if (this.pdfViewer.isValidFreeText) {\n                this.inputBoxElement.value = 'Type Here';\n                this.pdfViewer.isValidFreeText = false;\n            }\n            var inputValue = this.inputBoxElement.value;\n            var isNewlyAdded = false;\n            if (this.isNewFreeTextAnnot === true) {\n                var currentDateString = this.pdfViewer.annotation.stickyNotesAnnotationModule.getDateAndTime();\n                var annotationName = this.pdfViewer.annotation.createGUID();\n                this.isNewFreeTextAnnot = false;\n                isNewlyAdded = true;\n                var commentsDivid = this.pdfViewer.annotation.stickyNotesAnnotationModule.addComments('freeText', pageIndex + 1);\n                if (commentsDivid) {\n                    document.getElementById(commentsDivid).id = annotationName;\n                }\n                var annotationSelectorSettings = this.pdfViewer.freeTextSettings.annotationSelectorSettings;\n                this.pdfViewerBase.updateSelectorSettings(annotationSelectorSettings);\n                var annotationSettings = this.pdfViewer.annotationModule.updateSettings(this.pdfViewer.freeTextSettings);\n                this.author = this.author ? this.author : this.pdfViewer.freeTextSettings.author ? this.pdfViewer.freeTextSettings.author : 'Guest';\n                this.subject = this.subject ? this.subject : this.pdfViewer.freeTextSettings.subject ? this.pdfViewer.freeTextSettings.subject : 'Text Box';\n                var allowedInteractions = this.pdfViewer.freeTextSettings.allowedInteractions ?\n                    this.pdfViewer.freeTextSettings.allowedInteractions : this.pdfViewer.annotationSettings.allowedInteractions;\n                var annot = {\n                    author: this.author, modifiedDate: currentDateString, subject: this.subject, id: 'free_text' + this.inputBoxCount,\n                    rotateAngle: 0, dynamicText: inputValue, strokeColor: this.borderColor,\n                    thickness: this.borderWidth, fillColor: this.fillColor,\n                    bounds: {\n                        left: inputEleLeft / zoomFactor, top: inputEleTop / zoomFactor, x: inputEleLeft / zoomFactor,\n                        y: inputEleTop / zoomFactor, width: inputEleWidth / zoomFactor, height: inputEleHeight / zoomFactor\n                    }, annotName: annotationName,\n                    shapeAnnotationType: 'FreeText', pageIndex: pageIndex, fontColor: this.fontColor, fontSize: this.fontSize,\n                    fontFamily: this.fontFamily, opacity: this.opacity, comments: [], textAlign: this.textAlign,\n                    font: { isBold: this.isBold, isItalic: this.isItalic, isStrikeout: this.isStrikethrough,\n                        isUnderline: this.isUnderline },\n                    review: { state: 'Unmarked', stateModel: 'None', modifiedDate: currentDateString, author: this.author },\n                    annotationSelectorSettings: annotationSelectorSettings, annotationSettings: annotationSettings,\n                    customData: this.pdfViewer.annotationModule.getData('FreeText'), isPrint: (this.pdfViewer.freeTextSettings && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(this.pdfViewer.freeTextSettings.isPrint)) ? this.pdfViewer.freeTextSettings.isPrint : true,\n                    allowedInteractions: allowedInteractions, isReadonly: this.isReadonly\n                };\n                if (this.pdfViewer.enableRtl) {\n                    annot.textAlign = 'Right';\n                }\n                var annotation = this.pdfViewer.add(annot);\n                var bounds = { left: annot.bounds.x, top: annot.bounds.y, width: annot.bounds.width,\n                    height: annot.bounds.height };\n                var settings = {\n                    opacity: annot.opacity, borderColor: annot.strokeColor, borderWidth: annot.thickness,\n                    author: annotation.author, subject: annotation.subject, modifiedDate: annotation.modifiedDate,\n                    fillColor: annot.fillColor, fontSize: annot.fontSize, width: annot.bounds.width,\n                    height: annot.bounds.height, fontColor: annot.fontColor, fontFamily: annot.fontFamily,\n                    defaultText: annot.dynamicText, fontStyle: annot.font, textAlignment: annot.textAlign\n                };\n                this.pdfViewer.annotation.storeAnnotations(pageIndex, annot, '_annotations_freetext');\n                this.pdfViewer.fireAnnotationAdd(annot.pageIndex, annot.annotName, 'FreeText', bounds, settings);\n                this.pdfViewer.fireCommentAdd(annot.annotName, annot.dynamicText, annot);\n                this.pdfViewer.annotation.addAction(pageIndex, null, annotation, 'Addition', '', annotation, annotation);\n                this.pdfViewer.renderSelector(annot.pageIndex);\n                this.pdfViewer.clearSelection(annot.pageIndex);\n                this.pdfViewerBase.updateDocumentEditedProperty(true);\n                this.selectedAnnotation = annotation;\n            }\n            this.isInuptBoxInFocus = false;\n            if (this.selectedAnnotation && this.pdfViewer.selectedItems.annotations) {\n                var isRotated = this.selectedAnnotation.pageRotation === 90 || this.selectedAnnotation.pageRotation === 270;\n                inputEleHeight = parseFloat(isRotated ? this.inputBoxElement.style.width : this.inputBoxElement.style.height) / zoomFactor;\n                inputEleWidth = parseFloat(isRotated ? this.inputBoxElement.style.height : this.inputBoxElement.style.width) / zoomFactor;\n                var heightDiff = (inputEleHeight - this.selectedAnnotation.bounds.height);\n                var y = undefined;\n                if (heightDiff > 0) {\n                    y = this.selectedAnnotation.wrapper.offsetY + (heightDiff / 2);\n                    y = y > 0 ? y : undefined;\n                }\n                var widthDiff = (inputEleWidth - this.selectedAnnotation.bounds.width);\n                var x = undefined;\n                if (widthDiff > 0) {\n                    x = this.selectedAnnotation.wrapper.offsetX + (widthDiff / 2);\n                    x = x > 0 ? x : undefined;\n                }\n                else {\n                    widthDiff = Math.abs(widthDiff);\n                    x = this.selectedAnnotation.wrapper.offsetX - (widthDiff / 2);\n                }\n                this.selectedAnnotation.bounds.width = inputEleWidth;\n                this.selectedAnnotation.bounds.height = inputEleHeight;\n                var lineSpace = 0;\n                lineSpace = ((parseFloat(this.inputBoxElement.style.fontSize) / zoomFactor) / (this.defaultFontSize / 2));\n                this.selectedAnnotation.wrapper.children[1].margin.left = this.freeTextPaddingLeft;\n                this.selectedAnnotation.wrapper.children[1].margin.top =\n                    ((parseFloat(this.inputBoxElement.style.paddingTop) / zoomFactor)) + lineSpace;\n                this.pdfViewer.annotation.modifyDynamicTextValue(inputValue, this.selectedAnnotation.annotName);\n                this.selectedAnnotation.dynamicText = inputValue;\n                this.modifyInCollection('dynamicText', pageIndex, this.selectedAnnotation, isNewlyAdded);\n                this.modifyInCollection('bounds', pageIndex, this.selectedAnnotation, isNewlyAdded);\n                this.pdfViewer.nodePropertyChange(this.selectedAnnotation, { bounds: { width: this.selectedAnnotation.bounds.width,\n                        height: this.selectedAnnotation.bounds.height, y: y, x: x } });\n                var commentsDiv = document.getElementById(this.selectedAnnotation.annotName);\n                if (commentsDiv && commentsDiv.childNodes) {\n                    if (commentsDiv.childNodes[0].ej2_instances) {\n                        commentsDiv.childNodes[0].ej2_instances[0].value = inputValue;\n                    }\n                    else if (commentsDiv.childNodes[0].childNodes && commentsDiv.childNodes[0].childNodes[1].ej2_instances) {\n                        commentsDiv.childNodes[0].childNodes[1].ej2_instances[0].value = inputValue;\n                    }\n                }\n                this.pdfViewer.renderSelector(this.selectedAnnotation.pageIndex, this.selectedAnnotation.annotationSelectorSettings);\n            }\n            if (this.inputBoxElement.parentElement) {\n                if (pageDiv && (pageDiv.id === this.inputBoxElement.parentElement.id)) {\n                    pageDiv.removeChild(this.inputBoxElement);\n                }\n                else {\n                    this.inputBoxElement.parentElement.removeChild(this.inputBoxElement);\n                }\n            }\n            var canvass = this.pdfViewerBase.getAnnotationCanvas('_annotationCanvas_', pageIndex);\n            this.pdfViewer.renderDrawing(canvass, pageIndex);\n            this.inputBoxCount += 1;\n        }\n        else {\n            this.inputBoxElement.focus();\n            if (!this.isTextSelected) {\n                window.getSelection().removeAllRanges();\n            }\n        }\n        this.pdfViewer.enableServerDataBinding(allowServerDataBind, true);\n    };\n    /**\n     * @param {KeyboardEvent} event - event\n     * @private\n     * @returns {void}\n     */\n    FreeTextAnnotation.prototype.onKeyDownInputBox = function (event) {\n        // eslint-disable-next-line\n        if (event.which !== 18) {\n            // eslint-disable-next-line\n            var inuptEleObj_1 = this;\n            if (event.which === 9 || ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(this.pdfViewer.selectedItems.annotations[0]) && !this.isNewFreeTextAnnot)) {\n                event.preventDefault();\n            }\n            this.selectedAnnotation = this.pdfViewer.selectedItems.annotations &&\n                this.isNewFreeTextAnnot ? this.pdfViewer.selectedItems.annotations[0]\n                : this.selectedAnnotation;\n            setTimeout(function () {\n                if (inuptEleObj_1.defaultHeight < inuptEleObj_1.inputBoxElement.scrollHeight\n                    && parseInt(inuptEleObj_1.inputBoxElement.style.height, 10) < inuptEleObj_1.inputBoxElement.scrollHeight) {\n                    inuptEleObj_1.updateFreeTextAnnotationSize(true);\n                }\n                else {\n                    inuptEleObj_1.updateFreeTextAnnotationSize(false);\n                }\n            }, 0);\n        }\n    };\n    FreeTextAnnotation.prototype.updateFreeTextAnnotationSize = function (isSize) {\n        // eslint-disable-next-line\n        var inuptEleObj = this;\n        var enableAutoFit = inuptEleObj.pdfViewer.freeTextSettings.enableAutoFit;\n        if (enableAutoFit) {\n            this.autoFitFreeText();\n        }\n        else {\n            this.isMaximumWidthReached = true;\n        }\n        if (this.isMaximumWidthReached) {\n            var previousHeight = inuptEleObj.inputBoxElement.getBoundingClientRect().height;\n            if (!isSize && !inuptEleObj.inputBoxElement.readOnly) {\n                inuptEleObj.inputBoxElement.style.height = 'auto';\n            }\n            var currentHeight = inuptEleObj.inputBoxElement.getBoundingClientRect().height;\n            var difference = currentHeight - previousHeight;\n            var fontSize = parseFloat(inuptEleObj.inputBoxElement.style.fontSize);\n            inuptEleObj.inputBoxElement.style.height = inuptEleObj.inputBoxElement.readOnly ? inuptEleObj.inputBoxElement.style.height : inuptEleObj.inputBoxElement.scrollHeight + (fontSize / 2) + 'px';\n            inuptEleObj.inputBoxElement.style.height = (difference < 0 && !inuptEleObj.inputBoxElement.readOnly) ? (previousHeight + 'px') : inuptEleObj.inputBoxElement.style.height;\n        }\n        var zoomFactor = inuptEleObj.pdfViewerBase.getZoomFactor();\n        var isRotated = this.selectedAnnotation && (this.selectedAnnotation.pageRotation === 90 ||\n            this.selectedAnnotation.pageRotation === 270);\n        var inputEleHeight = parseFloat(isRotated ? this.inputBoxElement.style.width :\n            this.inputBoxElement.style.height) / zoomFactor;\n        var inputEleWidth = parseFloat(isRotated ? this.inputBoxElement.style.height :\n            this.inputBoxElement.style.width) / zoomFactor;\n        var x = 0;\n        if (this.selectedAnnotation) {\n            var heightDiff = void 0;\n            if (this.selectedAnnotation.pageRotation === 90 || this.selectedAnnotation.pageRotation === 270) {\n                heightDiff = (inputEleWidth - inuptEleObj.selectedAnnotation.bounds.width);\n            }\n            else {\n                heightDiff = (inputEleHeight - inuptEleObj.selectedAnnotation.bounds.height);\n            }\n            var y = 0;\n            if (heightDiff > 0) {\n                y = inuptEleObj.selectedAnnotation.wrapper.offsetY + (heightDiff / 2);\n            }\n            else {\n                heightDiff = Math.abs(heightDiff);\n                y = inuptEleObj.selectedAnnotation.wrapper.offsetY - (heightDiff / 2);\n            }\n            if (enableAutoFit) {\n                var widthDiff = (inputEleWidth - inuptEleObj.selectedAnnotation.bounds.width);\n                if (widthDiff > 0) {\n                    x = inuptEleObj.selectedAnnotation.wrapper.offsetX + (widthDiff / 2);\n                }\n                else {\n                    widthDiff = Math.abs(widthDiff);\n                    x = inuptEleObj.selectedAnnotation.wrapper.offsetX - (widthDiff / 2);\n                }\n            }\n            inuptEleObj.selectedAnnotation.bounds.width = inputEleWidth;\n            inuptEleObj.selectedAnnotation.bounds.height = inputEleHeight;\n            if (enableAutoFit) {\n                inuptEleObj.pdfViewer.nodePropertyChange(inuptEleObj.selectedAnnotation, { bounds: { width: inuptEleObj.selectedAnnotation.bounds.width, height: inuptEleObj.selectedAnnotation.bounds.height, y: y, x: x } });\n            }\n            else {\n                inuptEleObj.pdfViewer.nodePropertyChange(inuptEleObj.selectedAnnotation, { bounds: { width: inuptEleObj.selectedAnnotation.bounds.width, height: inuptEleObj.selectedAnnotation.bounds.height, y: y } });\n            }\n            inuptEleObj.pdfViewer.renderSelector(inuptEleObj.selectedAnnotation.pageIndex, this.selectedAnnotation.annotationSelectorSettings);\n        }\n    };\n    /**\n     * @param {number} xPosition - This is xPosition\n     * @param {number} yPosition - This is yPosition\n     * @private\n     * @returns {void}\n     */\n    FreeTextAnnotation.prototype.autoFitFreeText = function (xPosition, yPosition) {\n        var pageIndex = this.pdfViewerBase.currentPageNumber - 1;\n        var canvas = this.pdfViewerBase.getAnnotationCanvas('_annotationCanvas_', pageIndex);\n        var context = canvas.getContext('2d');\n        var fontSize = this.inputBoxElement.style.fontSize;\n        if (this.pdfViewer.freeTextSettings.fontStyle === _base_types__WEBPACK_IMPORTED_MODULE_0__.FontStyle.Bold || this.inputBoxElement.style.fontWeight === 'bold') {\n            context.font = 'bold' + ' ' + fontSize + ' ' + this.inputBoxElement.style.fontFamily;\n        }\n        else {\n            context.font = fontSize + ' ' + this.inputBoxElement.style.fontFamily;\n        }\n        var highestTextNode = '';\n        var textNodes = [];\n        var textboxValue = this.inputBoxElement.value;\n        if (textboxValue.indexOf('\\n') > -1) {\n            textNodes = textboxValue.split('\\n');\n            for (var j = 0; j < textNodes.length; j++) {\n                var textNodeData = context.measureText(textNodes[parseInt(j.toString(), 10)]);\n                var highestTextNodeData = context.measureText(highestTextNode);\n                if (textNodeData.width > highestTextNodeData.width) {\n                    highestTextNode = textNodes[parseInt(j.toString(), 10)];\n                }\n            }\n            this.isMaximumWidthReached = true;\n        }\n        else {\n            highestTextNode = textboxValue;\n            this.isMaximumWidthReached = false;\n        }\n        var textwidth = context.measureText(highestTextNode);\n        fontSize = parseFloat(this.inputBoxElement.style.fontSize);\n        var inputEleWidth;\n        var characterLength = 8;\n        var inputEleHeight = (fontSize + (fontSize / 2));\n        if (this.isNewFreeTextAnnot) {\n            inputEleWidth = Math.ceil(textwidth.width + ((characterLength + 1) * 2));\n            this.inputBoxElement.style.height = inputEleHeight + 'px';\n            this.inputBoxElement.style.top = (yPosition) - (inputEleHeight / 2) + 'px';\n        }\n        else {\n            inputEleWidth = Math.ceil(textwidth.width) + fontSize + Math.ceil(characterLength / 2);\n        }\n        // Removed the line since when we double click on the freetext the size gets changed. Task Id: 847135\n        this.inputBoxElement.style.width = inputEleWidth + 'px';\n        var maxWidth = this.pdfViewerBase.getPageWidth(pageIndex) - parseFloat(this.inputBoxElement.style.left);\n        if (parseFloat(this.inputBoxElement.style.width) > maxWidth) {\n            this.isMaximumWidthReached = true;\n            if (this.isNewAddedAnnot && xPosition) {\n                inputEleWidth = inputEleWidth - characterLength;\n                this.inputBoxElement.style.width = inputEleWidth + 'px';\n                var width = xPosition + (inputEleWidth * this.pdfViewerBase.getZoomFactor());\n                var x = parseFloat(this.inputBoxElement.style.left);\n                if (width >= this.pdfViewerBase.getPageWidth(pageIndex)) {\n                    x = this.pdfViewerBase.getPageWidth(pageIndex) - inputEleWidth;\n                }\n                this.inputBoxElement.style.left = x + 'px';\n            }\n            else {\n                this.inputBoxElement.style.width = maxWidth + 'px';\n            }\n        }\n    };\n    /**\n     * @param {MouseEvent} event - This is Mouse event\n     * @private\n     * @returns {void}\n     */\n    FreeTextAnnotation.prototype.onMouseUpInputBox = function (event) {\n        var target = event.target;\n        this.selectionStart = 0;\n        this.selectionEnd = 0;\n        if (event.which === 3 && target) {\n            this.selectionStart = target.selectionStart;\n            this.selectionEnd = target.selectionEnd;\n        }\n        if (event.which === 3 && window.getSelection() !== null && window.getSelection().toString() !== '') {\n            this.isTextSelected = true;\n        }\n        else {\n            this.isTextSelected = false;\n        }\n    };\n    /**\n     * @param {PointModel} currentPosition - This is current position\n     * @param {PdfAnnotationBaseModel} annotation - This is annotation\n     * @param {number} pageIndex - This is pageIndex\n     * @private\n     * @returns {void}\n     */\n    FreeTextAnnotation.prototype.addInuptElemet = function (currentPosition, annotation, pageIndex) {\n        if (annotation === void 0) { annotation = null; }\n        this.currentPosition = [];\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(pageIndex)) {\n            pageIndex = this.pdfViewerBase.currentPageNumber - 1;\n        }\n        if (annotation) {\n            pageIndex = annotation.pageIndex;\n        }\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isBlazor)() && annotation === null && this.pdfViewer.selectedItems.annotations.length === 0) {\n            this.updateTextProperties();\n        }\n        this.inputBoxElement.id = this.pdfViewer.element.id + '_freeText_' + pageIndex + '_' + this.inputBoxCount;\n        var pageDiv = this.pdfViewerBase.getElement('_pageDiv_' + (pageIndex));\n        var canvass = this.pdfViewerBase.getAnnotationCanvas('_annotationCanvas_', pageIndex);\n        var zoomFactor = this.pdfViewerBase.getZoomFactor();\n        this.inputBoxElement.value = (annotation && annotation.dynamicText) ? annotation.dynamicText : this.defaultText;\n        this.inputBoxElement.style.boxSizing = 'border-box';\n        this.inputBoxElement.style.left = ((currentPosition.x)) + 'px';\n        this.inputBoxElement.style.top = ((currentPosition.y)) - ((this.defaultHeight * zoomFactor) / 2) + 'px';\n        if (this.pdfViewer.freeTextSettings.enableAutoFit) {\n            this.inputBoxElement.style.wordBreak = 'break-all';\n        }\n        else {\n            this.inputBoxElement.style.wordBreak = 'break-word';\n        }\n        if (annotation) {\n            this.applyFreetextStyles(zoomFactor, annotation.isReadonly);\n        }\n        else {\n            this.applyFreetextStyles(zoomFactor);\n        }\n        if (this.isBold) {\n            this.inputBoxElement.style.fontWeight = 'bold';\n        }\n        else {\n            this.inputBoxElement.style.fontWeight = 'normal';\n        }\n        if (this.isItalic) {\n            this.inputBoxElement.style.fontStyle = 'italic';\n        }\n        else {\n            this.inputBoxElement.style.fontStyle = 'normal';\n        }\n        this.inputBoxElement.style.textDecoration = 'none';\n        if (this.isUnderline) {\n            this.inputBoxElement.style.textDecoration = 'underline';\n        }\n        if (this.isStrikethrough) {\n            this.inputBoxElement.style.textDecoration = 'line-through';\n        }\n        if (this.pdfViewer.enableRtl) {\n            this.inputBoxElement.style.textAlign = 'right';\n            this.inputBoxElement.style.direction = 'rtl';\n            this.inputBoxElement.style.left = ((currentPosition.x)) - ((this.defautWidth * zoomFactor / 2));\n        }\n        else {\n            this.inputBoxElement.style.textAlign = this.textAlign.toLowerCase();\n        }\n        this.inputBoxElement.style.borderColor = this.borderColor;\n        this.inputBoxElement.style.color = this.fontColor;\n        this.inputBoxElement.style.background = this.fillColor;\n        if (annotation && annotation.wrapper && annotation.wrapper.children[0]) {\n            this.inputBoxElement.style.opacity = annotation.wrapper.children[0].style.opacity;\n        }\n        if (this.isNewFreeTextAnnot === true) {\n            this.pdfViewer.clearSelection(pageIndex);\n        }\n        if (annotation && annotation.wrapper && annotation.wrapper.bounds) {\n            var annotationBounds = annotation.wrapper.bounds;\n            if (annotationBounds.left) {\n                this.inputBoxElement.style.left = ((annotationBounds.left) * zoomFactor) + 'px';\n            }\n            if (annotationBounds.top) {\n                this.inputBoxElement.style.top = ((annotationBounds.top) * zoomFactor) + 'px';\n            }\n            this.inputBoxElement.style.height = annotationBounds.height ? (annotationBounds.height * zoomFactor) + 'px' : (this.defaultHeight * zoomFactor) + 'px';\n            this.inputBoxElement.style.width = annotationBounds.width ? (annotationBounds.width * zoomFactor) + 'px' : (this.defautWidth * zoomFactor) + 'px';\n            this.selectedAnnotation = annotation;\n            this.previousText = this.selectedAnnotation.dynamicText;\n            this.selectedAnnotation.dynamicText = '';\n            this.inputBoxElement.style.borderColor = this.selectedAnnotation.strokeColor;\n            this.inputBoxElement.style.color = this.selectedAnnotation.fontColor;\n            this.inputBoxElement.style.background = this.selectedAnnotation.fillColor;\n            if (this.selectedAnnotation.font.isBold === true) {\n                this.inputBoxElement.style.fontWeight = 'bold';\n            }\n            if (this.selectedAnnotation.font.isItalic === true) {\n                this.inputBoxElement.style.fontStyle = 'italic';\n            }\n            if (this.selectedAnnotation.font.isUnderline === true) {\n                this.inputBoxElement.style.textDecoration = 'underline';\n            }\n            if (this.selectedAnnotation.font.isStrikeout === true) {\n                this.inputBoxElement.style.textDecoration = 'line-through';\n            }\n            if (this.pdfViewer.enableRtl) {\n                this.inputBoxElement.style.textAlign = 'right';\n                this.inputBoxElement.style.direction = 'rtl';\n            }\n            else if (this.selectedAnnotation.textAlign) {\n                this.inputBoxElement.style.textAlign = this.selectedAnnotation.textAlign;\n            }\n            this.inputBoxElement.style.fontSize = (this.selectedAnnotation.fontSize * zoomFactor) + 'px';\n            this.inputBoxElement.style.fontFamily = this.selectedAnnotation.fontFamily;\n            this.pdfViewer.nodePropertyChange(this.selectedAnnotation, {});\n        }\n        if (this.pdfViewerBase.isMixedSizeDocument) {\n            this.inputBoxElement.style.left = (parseFloat(this.inputBoxElement.style.left)) + canvass.offsetLeft + 'px';\n        }\n        this.pdfViewer.annotation.freeTextAnnotationModule.isFreeTextValueChange = false;\n        if (this.pdfViewer.freeTextSettings.enableAutoFit) {\n            this.autoFitFreeText(currentPosition.x, currentPosition.y);\n        }\n        this.inputBoxElement.style.paddingLeft = (this.freeTextPaddingLeft * zoomFactor) + 'px';\n        this.inputBoxElement.style.paddingTop = ((((parseFloat(this.inputBoxElement.style.fontSize) / zoomFactor) / this.defaultFontSize) / zoomFactor)) * this.freeTextPaddingTop + 'px';\n        var lineSpace = 0;\n        lineSpace = ((parseFloat(this.inputBoxElement.style.fontSize) / zoomFactor) / (this.defaultFontSize / 2));\n        this.inputBoxElement.style.paddingTop = ((parseFloat(this.inputBoxElement.style.paddingTop)) - lineSpace) + 'px';\n        pageDiv.appendChild(this.inputBoxElement);\n        if (!this.pdfViewer.freeTextSettings.enableAutoFit && (this.defaultHeight * zoomFactor)\n            < this.inputBoxElement.scrollHeight && parseInt(this.inputBoxElement.style.height, 10) < this.inputBoxElement.scrollHeight) {\n            this.inputBoxElement.style.height = this.inputBoxElement.scrollHeight + 'px';\n        }\n        this.isInuptBoxInFocus = true;\n        this.inputBoxElement.focus();\n        if (this.isNewFreeTextAnnot === true || this.inputBoxElement.value === this.defaultText) {\n            this.inputBoxElement.select();\n            this.pdfViewerBase.isFreeTextSelected = true;\n        }\n        this.currentPosition.push(parseInt(this.inputBoxElement.style.left, 10) / zoomFactor, parseInt(this.inputBoxElement.style.top, 10) / zoomFactor, parseInt(this.inputBoxElement.style.width, 10) / zoomFactor, parseInt(this.inputBoxElement.style.height, 10) / zoomFactor);\n    };\n    FreeTextAnnotation.prototype.applyFreetextStyles = function (zoomFactor, isReadonly) {\n        this.inputBoxElement.style.height = (this.defaultHeight * zoomFactor) + 'px';\n        this.inputBoxElement.style.width = (this.defautWidth * zoomFactor) + 'px';\n        this.inputBoxElement.style.borderWidth = (this.borderWidth * zoomFactor) + 'px';\n        this.inputBoxElement.style.fontSize = (this.fontSize * zoomFactor) + 'px';\n        this.inputBoxElement.style.fontFamily = this.fontFamily;\n        this.inputBoxElement.readOnly = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(isReadonly) ? this.isReadonly : isReadonly;\n    };\n    /**\n     * @private\n     * @returns {void}\n     */\n    FreeTextAnnotation.prototype.copySelectedText = function () {\n        if (window.getSelection() !== null) {\n            this.selectedText = window.getSelection().toString();\n            var textArea = document.createElement('textarea');\n            textArea.contentEditable = 'true';\n            textArea.textContent = this.selectedText;\n            textArea.style.position = 'fixed';\n            document.body.appendChild(textArea);\n            textArea.select();\n            try {\n                document.execCommand('copy');\n            }\n            catch (ex) {\n                console.warn('Copy to clipboard failed.', ex);\n            }\n            finally {\n                if (textArea) {\n                    document.body.removeChild(textArea);\n                }\n            }\n        }\n    };\n    /**\n     * @param {any} target - It describes about the target text\n     * @private\n     * @returns {void}\n     */\n    FreeTextAnnotation.prototype.pasteSelectedText = function (target) {\n        if (this.selectedText !== '' && target) {\n            var text = target.value;\n            target.value = text.slice(0, this.selectionStart) + this.selectedText + text.slice(this.selectionEnd, text.length);\n        }\n        var events = event;\n        this.onKeyDownInputBox(events);\n    };\n    /**\n     * @param {any} target - It describes the targeted selected text\n     * @private\n     * @returns {void}\n     */\n    FreeTextAnnotation.prototype.cutSelectedText = function (target) {\n        if (window.getSelection() !== null) {\n            var text = target.value;\n            this.selectedText = window.getSelection().toString();\n            target.value = text.slice(0, target.selectionStart) + text.slice(target.selectionEnd);\n            var textArea = document.createElement('textarea');\n            textArea.contentEditable = 'true';\n            textArea.textContent = this.selectedText;\n            textArea.style.position = 'fixed';\n            document.body.appendChild(textArea);\n            textArea.select();\n            try {\n                document.execCommand('cut');\n            }\n            catch (ex) {\n                console.warn('Copy to clipboard failed.', ex);\n            }\n            finally {\n                if (textArea) {\n                    document.body.removeChild(textArea);\n                }\n            }\n        }\n    };\n    /**\n     * @param {any} shapeAnnotations - It describes about the shape annotations\n     * @param {number} pageNumber - It describes about the page number value\n     * @private\n     * @returns {void}\n     */\n    FreeTextAnnotation.prototype.saveImportedFreeTextAnnotations = function (shapeAnnotations, pageNumber) {\n        var annotation = shapeAnnotations;\n        if (annotation.AnnotType) {\n            var vertexPoints = null;\n            if (annotation.VertexPoints) {\n                vertexPoints = [];\n                for (var j = 0; j < annotation.VertexPoints.length; j++) {\n                    var point = { x: annotation.VertexPoints[parseInt(j.toString(), 10)].X,\n                        y: annotation.VertexPoints[parseInt(j.toString(), 10)].Y };\n                    vertexPoints.push(point);\n                }\n            }\n            annotation.AnnotationSettings = annotation.AnnotationSettings ? annotation.AnnotationSettings :\n                this.pdfViewer.annotationModule.updateSettings(this.pdfViewer.freeTextSettings);\n            annotation.allowedInteractions = annotation.AllowedInteractions ? annotation.AllowedInteractions :\n                this.pdfViewer.annotationModule.updateAnnotationAllowedInteractions(annotation);\n            var annotationBoundsX = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(annotation.Bounds.X) ? annotation.Bounds.X : annotation.Bounds.x;\n            var annotationBoundsY = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(annotation.Bounds.Y) ? annotation.Bounds.Y : annotation.Bounds.y;\n            var annotationBoundsWidth = annotation.Bounds.Width ? annotation.Bounds.Width : annotation.Bounds.width;\n            var annotationBoundsHeight = annotation.Bounds.Height ? annotation.Bounds.Height : annotation.Bounds.height;\n            var annot = {\n                author: annotation.Author, allowedInteractions: annotation.allowedInteractions, modifiedDate: annotation.ModifiedDate, subject: annotation.Subject, id: 'freetext',\n                rotateAngle: annotation.Rotate, dynamicText: annotation.MarkupText, strokeColor: annotation.StrokeColor,\n                thickness: annotation.Thickness, fillColor: annotation.FillColor,\n                bounds: {\n                    x: annotationBoundsX, y: annotationBoundsY, left: annotationBoundsX, top: annotationBoundsY,\n                    width: annotationBoundsWidth, height: annotationBoundsHeight, right: annotation.Bounds.Right,\n                    bottom: annotation.Bounds.Bottom\n                }, annotName: annotation.AnnotName, shapeAnnotationType: 'FreeText',\n                pageIndex: pageNumber, opacity: annotation.Opacity, fontColor: annotation.FontColor, fontSize: annotation.FontSize,\n                fontFamily: annotation.FontFamily, notes: annotation.MarkupText, textAlign: annotation.TextAlign,\n                comments: this.pdfViewer.annotationModule.\n                    getAnnotationComments(annotation.Comments, annotation, annotation.Author),\n                review: { state: annotation.State, stateModel: annotation.StateModel,\n                    modifiedDate: annotation.ModifiedDate, author: annotation.Author },\n                font: { isBold: annotation.Font.Bold, isItalic: annotation.Font.Italic,\n                    isStrikeout: annotation.Font.Strikeout, isUnderline: annotation.Font.Underline },\n                annotationSelectorSettings: this.getSettings(annotation), annotationSettings: annotation.AnnotationSettings,\n                customData: this.pdfViewer.annotation.getCustomData(annotation),\n                isPrint: annotation.IsPrint, isCommentLock: annotation.IsCommentLock, isReadonly: annotation.IsReadonly\n            };\n            this.pdfViewer.annotationModule.storeAnnotations(pageNumber, annot, '_annotations_freetext');\n        }\n    };\n    /**\n     * @param {any} shapeAnnotations - It describes about the shape annotations\n     * @param {number} pageNumber - It describes about the page number value\n     * @private\n     * @returns {void}\n     */\n    FreeTextAnnotation.prototype.updateFreeTextAnnotationCollections = function (shapeAnnotations, pageNumber) {\n        var annotation = shapeAnnotations;\n        annotation.annotationAddMode = this.pdfViewer.annotationModule.findAnnotationMode(annotation, pageNumber, annotation.AnnotType);\n        if (annotation.AnnotType) {\n            var vertexPoints = null;\n            if (annotation.VertexPoints) {\n                vertexPoints = [];\n                for (var j = 0; j < annotation.VertexPoints.length; j++) {\n                    var point = { x: annotation.VertexPoints[parseInt(j.toString(), 10)].X,\n                        y: annotation.VertexPoints[parseInt(j.toString(), 10)].Y };\n                    vertexPoints.push(point);\n                }\n            }\n            annotation.AnnotationSettings = annotation.AnnotationSettings ? annotation.AnnotationSettings :\n                this.pdfViewer.annotationModule.updateSettings(this.pdfViewer.freeTextSettings);\n            if (annotation.IsLocked) {\n                annotation.AnnotationSettings.isLock = annotation.IsLocked;\n            }\n            annotation.allowedInteractions = annotation.AllowedInteractions ? annotation.AllowedInteractions :\n                this.pdfViewer.annotationModule.updateAnnotationAllowedInteractions(annotation);\n            var annotationBoundsX = annotation.Bounds.X ? annotation.Bounds.X : annotation.Bounds.x;\n            var annotationBoundsY = annotation.Bounds.Y ? annotation.Bounds.Y : annotation.Bounds.y;\n            var width = annotation.Bounds.Width ? annotation.Bounds.Width : annotation.Bounds.width;\n            var height = annotation.Bounds.Height ? annotation.Bounds.Height : annotation.Bounds.height;\n            var annot = {\n                author: annotation.Author, allowedInteractions: annotation.allowedInteractions, modifiedDate: annotation.ModifiedDate, subject: annotation.Subject, id: 'freetext',\n                rotateAngle: annotation.Rotate, dynamicText: annotation.MarkupText, strokeColor: annotation.StrokeColor,\n                thickness: annotation.Thickness, fillColor: annotation.FillColor,\n                bounds: {\n                    x: annotationBoundsX, y: annotationBoundsY, left: annotationBoundsX, top: annotationBoundsY,\n                    width: width, height: height, right: annotation.Bounds.Right,\n                    bottom: annotation.Bounds.Bottom\n                }, annotationId: annotation.AnnotName, shapeAnnotationType: 'FreeText',\n                pageIndex: pageNumber, opacity: annotation.Opacity, fontColor: annotation.FontColor, fontSize: annotation.FontSize,\n                fontFamily: annotation.FontFamily, notes: annotation.MarkupText,\n                comments: this.pdfViewer.annotationModule.\n                    getAnnotationComments(annotation.Comments, annotation, annotation.Author),\n                review: { state: annotation.State, stateModel: annotation.StateModel,\n                    modifiedDate: annotation.ModifiedDate, author: annotation.Author },\n                customData: this.pdfViewer.annotation.getCustomData(annotation),\n                font: { isBold: annotation.Font.Bold, isItalic: annotation.Font.Italic,\n                    isStrikeout: annotation.Font.Strikeout, isUnderline: annotation.Font.Underline },\n                pageNumber: pageNumber, annotationSettings: annotation.AnnotationSettings,\n                isCommentLock: annotation.IsCommentLock, isReadonly: annotation.IsReadonly, isPrint: annotation.IsPrint\n            };\n            return annot;\n        }\n    };\n    /**\n     * This method used to add annotations with using program.\n     *\n     * @param {FreeTextSettings} annotationObject - This is annotation object\n     * @param {IPoint} offset - It describes about the annotation bounds\n     * @returns {object} - object\n     * @private\n     */\n    FreeTextAnnotation.prototype.updateAddAnnotationDetails = function (annotationObject, offset) {\n        //Creating new object if annotationObject is null\n        if (!annotationObject) {\n            annotationObject = { offset: { x: 1, y: 1 }, pageNumber: 0, width: undefined, height: undefined };\n            offset = annotationObject.offset;\n        }\n        else if (!annotationObject.offset) {\n            offset = { x: 1, y: 1 };\n        }\n        else {\n            offset = annotationObject.offset;\n        }\n        //Creating the CurrentDate and Annotation name\n        var currentDateString = this.pdfViewer.annotation.stickyNotesAnnotationModule.getDateAndTime();\n        var annotationName = this.pdfViewer.annotation.createGUID();\n        var fontStyle = annotationObject.fontStyle ? annotationObject.fontStyle : _base_types__WEBPACK_IMPORTED_MODULE_0__.FontStyle.None;\n        //Creating annotation settings\n        var annotationSelectorSettings = this.pdfViewer.freeTextSettings.annotationSelectorSettings;\n        this.pdfViewerBase.updateSelectorSettings(annotationSelectorSettings);\n        var annotationSettings = this.pdfViewer.annotationModule.updateSettings(this.pdfViewer.freeTextSettings);\n        var allowedInteractions = this.pdfViewer.freeTextSettings.allowedInteractions ?\n            this.pdfViewer.freeTextSettings.allowedInteractions : this.pdfViewer.annotationSettings.allowedInteractions;\n        annotationObject.author = annotationObject.author ? annotationObject.author : this.pdfViewer.annotationModule.updateAnnotationAuthor('freeText', annotationSettings.annotationSubType);\n        annotationSettings.isLock = annotationObject.isLock ? annotationObject.isLock : annotationSettings.isLock;\n        if (this.pdfViewer.freeTextSettings.isLock || this.pdfViewer.annotationSettings.isLock ||\n            this.pdfViewer.freeTextSettings.isReadonly) {\n            annotationObject.isReadonly = true;\n        }\n        annotationSettings.minHeight = annotationObject.minHeight ? annotationObject.minHeight : 0;\n        annotationSettings.minWidth = annotationObject.minWidth ? annotationObject.minWidth : 0;\n        annotationSettings.maxWidth = annotationObject.maxWidth ? annotationObject.maxWidth : 0;\n        annotationSettings.maxHeight = annotationObject.maxHeight ? annotationObject.maxHeight : 0;\n        annotationObject.width = annotationObject.width ? annotationObject.width : 150;\n        annotationObject.height = annotationObject.height ? annotationObject.height : 24.6;\n        //Creating Annotation objects with it's proper properties\n        var freeTextAnnotation = [];\n        var freeText = {\n            AllowedInteractions: annotationObject.allowedInteractions ? annotationObject.allowedInteractions : allowedInteractions,\n            AnnotName: annotationName,\n            AnnotType: 'freeText',\n            AnnotationFlags: 'Default',\n            AnnotationIntent: null,\n            AnnotationSelectorSettings: annotationObject.annotationSelectorSettings ?\n                annotationObject.annotationSelectorSettings : annotationSelectorSettings,\n            AnnotationSettings: annotationSettings,\n            Author: annotationObject.author ? annotationObject.author : 'Guest',\n            Border: { HorizontalRadius: 0, VerticalRadius: 0, Width: !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(annotationObject.borderWidth) ?\n                    annotationObject.borderWidth : 1 },\n            BorderColor: { IsEmpty: true, B: 255, Blue: 1, C: 0, G: 255 },\n            Bounds: { X: offset.x, Y: offset.y, Width: annotationObject.width,\n                Height: annotationObject.height, Left: offset.x, Top: offset.y, Right: offset.x + annotationObject.width,\n                Bottom: offset.y + annotationObject.height },\n            CalloutLines: null,\n            Color: { IsEmpty: false, B: 51, Blue: 0.2, C: 0, G: 255 },\n            Comments: null,\n            CreatedDate: currentDateString,\n            CustomData: annotationObject.customData ? annotationObject.customData : null,\n            ExistingCustomData: null,\n            FillColor: annotationObject.fillColor ? annotationObject.fillColor : '#ffffff00',\n            Flatten: false,\n            FlattenPopups: false,\n            Font: { Bold: (fontStyle & _base_types__WEBPACK_IMPORTED_MODULE_0__.FontStyle.Bold) === _base_types__WEBPACK_IMPORTED_MODULE_0__.FontStyle.Bold,\n                Italic: (fontStyle & _base_types__WEBPACK_IMPORTED_MODULE_0__.FontStyle.Italic) === _base_types__WEBPACK_IMPORTED_MODULE_0__.FontStyle.Italic,\n                Strikeout: (fontStyle & _base_types__WEBPACK_IMPORTED_MODULE_0__.FontStyle.Strikethrough) === _base_types__WEBPACK_IMPORTED_MODULE_0__.FontStyle.Strikethrough,\n                Underline: (fontStyle & _base_types__WEBPACK_IMPORTED_MODULE_0__.FontStyle.Underline) === _base_types__WEBPACK_IMPORTED_MODULE_0__.FontStyle.Underline },\n            FontColor: annotationObject.fontColor ? annotationObject.fontColor : '#000',\n            FontFamily: annotationObject.fontFamily ? annotationObject.fontFamily : 'Helvetica',\n            FontSize: annotationObject.fontSize ? annotationObject.fontSize : 16,\n            FreeTextAnnotationType: 'Text Box',\n            InnerColor: null,\n            IsCommentLock: false,\n            IsLock: annotationObject.isLock ? annotationObject.isLock : false,\n            IsPrint: !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(annotationObject.isPrint) ? annotationObject.isPrint : true,\n            Layer: null,\n            LineEndingStyle: 'OpenArrow',\n            Location: null,\n            MarkupText: annotationObject.defaultText ? annotationObject.defaultText : 'Type Here',\n            ModifiedDate: '',\n            Name: annotationName,\n            Opacity: annotationObject.opacity ? annotationObject.opacity : 1,\n            Page: null,\n            PageTags: null,\n            ReviewHistory: null,\n            Rotate: 0,\n            IsReadonly: annotationObject.isReadonly ? annotationObject.isReadonly : false,\n            State: 'Unmarked',\n            StateModel: 'None',\n            StrokeColor: annotationObject.borderColor ? annotationObject.borderColor : '#ffffff00',\n            Subject: annotationObject.subject ? annotationObject.subject : 'Text Box',\n            Text: annotationObject.defaultText ? annotationObject.defaultText : 'Type Here',\n            TextAlign: annotationObject.textAlignment ? annotationObject.textAlignment : 'Left',\n            TextMarkupColor: null,\n            Thickness: !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(annotationObject.borderWidth) ? annotationObject.borderWidth : 1,\n            isAddAnnotationProgramatically: true\n        };\n        //Adding the annotation object to an array and return it\n        freeTextAnnotation[0] = freeText;\n        return { freeTextAnnotation: freeTextAnnotation };\n    };\n    /**\n     * This method used to get the padding.\n     *\n     * @param {number} fontSize - This is font size\n     * @returns {any} - any\n     */\n    FreeTextAnnotation.prototype.getPaddingValues = function (fontSize) {\n        var leftPadding = 4; // Left padding used in the drawing.js\n        var topPadding = 5; // Top padding used in the drawing.js\n        var inputBoxpadding = 2; // we have set the input box padding for the free text.\n        topPadding = (topPadding - inputBoxpadding) * (fontSize / 16);\n        return [leftPadding, topPadding];\n    };\n    /**\n     * @param {any} currentPosition - currentPosition\n     * @private\n     * @returns {void}\n     */\n    FreeTextAnnotation.prototype.addInputInZoom = function (currentPosition) {\n        var zoomFactor = this.pdfViewerBase.getZoomFactor();\n        this.inputBoxElement.style.left = (currentPosition.x * zoomFactor) + 'px';\n        this.inputBoxElement.style.top = (currentPosition.y * zoomFactor) + 'px';\n        this.inputBoxElement.style.height = (currentPosition.height * zoomFactor) + 'px';\n        this.inputBoxElement.style.width = (currentPosition.width * zoomFactor) + 'px';\n        this.inputBoxElement.style.borderWidth = (this.borderWidth * zoomFactor) + 'px';\n        this.inputBoxElement.style.fontSize = (this.fontSize * zoomFactor) + 'px';\n    };\n    return FreeTextAnnotation;\n}());\n\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-pdfviewer/src/pdfviewer/annotation/free-text-annotation.js?");

/***/ })

}]);