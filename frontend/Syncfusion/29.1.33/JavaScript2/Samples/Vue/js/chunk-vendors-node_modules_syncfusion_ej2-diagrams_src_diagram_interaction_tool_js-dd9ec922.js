"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkej2_vue_samples"] = self["webpackChunkej2_vue_samples"] || []).push([["chunk-vendors-node_modules_syncfusion_ej2-diagrams_src_diagram_interaction_tool_js-dd9ec922"],{

/***/ "./node_modules/@syncfusion/ej2-diagrams/src/diagram/interaction/tool.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-diagrams/src/diagram/interaction/tool.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ConnectTool: () => (/* binding */ ConnectTool),\n/* harmony export */   ConnectorDrawingTool: () => (/* binding */ ConnectorDrawingTool),\n/* harmony export */   ExpandTool: () => (/* binding */ ExpandTool),\n/* harmony export */   FixedUserHandleTool: () => (/* binding */ FixedUserHandleTool),\n/* harmony export */   FreeHandTool: () => (/* binding */ FreeHandTool),\n/* harmony export */   LabelDragTool: () => (/* binding */ LabelDragTool),\n/* harmony export */   LabelResizeTool: () => (/* binding */ LabelResizeTool),\n/* harmony export */   LabelRotateTool: () => (/* binding */ LabelRotateTool),\n/* harmony export */   LabelTool: () => (/* binding */ LabelTool),\n/* harmony export */   MoveTool: () => (/* binding */ MoveTool),\n/* harmony export */   NodeDrawingTool: () => (/* binding */ NodeDrawingTool),\n/* harmony export */   PolyLineDrawingTool: () => (/* binding */ PolyLineDrawingTool),\n/* harmony export */   PolygonDrawingTool: () => (/* binding */ PolygonDrawingTool),\n/* harmony export */   ResizeTool: () => (/* binding */ ResizeTool),\n/* harmony export */   RotateTool: () => (/* binding */ RotateTool),\n/* harmony export */   SelectTool: () => (/* binding */ SelectTool),\n/* harmony export */   TextDrawingTool: () => (/* binding */ TextDrawingTool),\n/* harmony export */   ToolBase: () => (/* binding */ ToolBase),\n/* harmony export */   ZoomPanTool: () => (/* binding */ ZoomPanTool)\n/* harmony export */ });\n/* harmony import */ var _objects_node__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../objects/node */ \"./node_modules/@syncfusion/ej2-diagrams/src/diagram/objects/node.js\");\n/* harmony import */ var _objects_connector__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../objects/connector */ \"./node_modules/@syncfusion/ej2-diagrams/src/diagram/objects/connector.js\");\n/* harmony import */ var _primitives_point__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../primitives/point */ \"./node_modules/@syncfusion/ej2-diagrams/src/diagram/primitives/point.js\");\n/* harmony import */ var _objects_port__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../objects/port */ \"./node_modules/@syncfusion/ej2-diagrams/src/diagram/objects/port.js\");\n/* harmony import */ var _utility_base_util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utility/base-util */ \"./node_modules/@syncfusion/ej2-diagrams/src/diagram/utility/base-util.js\");\n/* harmony import */ var _primitives_rect__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../primitives/rect */ \"./node_modules/@syncfusion/ej2-diagrams/src/diagram/primitives/rect.js\");\n/* harmony import */ var _utility_path_util__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utility/path-util */ \"./node_modules/@syncfusion/ej2-diagrams/src/diagram/utility/path-util.js\");\n/* harmony import */ var _utility_constraints_util__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../utility/constraints-util */ \"./node_modules/@syncfusion/ej2-diagrams/src/diagram/utility/constraints-util.js\");\n/* harmony import */ var _primitives_matrix__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../primitives/matrix */ \"./node_modules/@syncfusion/ej2-diagrams/src/diagram/primitives/matrix.js\");\n/* harmony import */ var _enum_enum__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./../enum/enum */ \"./node_modules/@syncfusion/ej2-diagrams/src/diagram/enum/enum.js\");\n/* harmony import */ var _core_elements_text_element__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../core/elements/text-element */ \"./node_modules/@syncfusion/ej2-diagrams/src/diagram/core/elements/text-element.js\");\n/* harmony import */ var _actions__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./actions */ \"./node_modules/@syncfusion/ej2-diagrams/src/diagram/interaction/actions.js\");\n/* harmony import */ var _utility_diagram_util__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../utility/diagram-util */ \"./node_modules/@syncfusion/ej2-diagrams/src/diagram/utility/diagram-util.js\");\n/* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @syncfusion/ej2-base */ \"./node_modules/@syncfusion/ej2-base/index.js\");\n/* harmony import */ var _utility_connector__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../utility/connector */ \"./node_modules/@syncfusion/ej2-diagrams/src/diagram/utility/connector.js\");\n/* harmony import */ var _container_interaction__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./container-interaction */ \"./node_modules/@syncfusion/ej2-diagrams/src/diagram/interaction/container-interaction.js\");\nvar __extends = (undefined && undefined.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (undefined && undefined.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * Defines the interactive tools\n */\nvar ToolBase = /** @class */ (function () {\n    /**\n     * Initializes the tool\n     *\n     * @param {CommandHandler} command Command that is corresponding to the current action\n     * @param protectChange\n     */\n    function ToolBase(command, protectChange) {\n        if (protectChange === void 0) { protectChange = false; }\n        /**\n         * Command that is corresponding to the current action\n         */\n        this.commandHandler = null;\n        // protected deepDiffer: DeepDiffMapper = new DeepDiffMapper();\n        /**\n         * Sets/Gets whether the interaction is being done\n         */\n        this.inAction = false;\n        /**\n         * Sets/Gets the protect change\n         */\n        this.isProtectChange = false;\n        /**\n         * Sets/Gets the current element that is under mouse\n         */\n        this.currentElement = null;\n        /**   @private  */\n        this.blocked = false;\n        this.isTooltipVisible = false;\n        /** @private */\n        this.childTable = {};\n        /**\n         * Sets/Gets the previous object when mouse down\n         */\n        this.undoElement = { nodes: [], connectors: [] };\n        this.checkProperty = true;\n        this.undoParentElement = { nodes: [], connectors: [] };\n        this.commandHandler = command;\n        this.isProtectChange = protectChange;\n    }\n    ToolBase.prototype.startAction = function (currentElement) {\n        this.currentElement = currentElement;\n        this.inAction = true;\n    };\n    /**\n     * @param args\n     * @private\n     */\n    ToolBase.prototype.mouseDown = function (args) {\n        this.currentElement = args.source;\n        this.startPosition = this.currentPosition = this.prevPosition = args.position;\n        this.isTooltipVisible = true;\n        this.startAction(args.source);\n        this.checkProperty = true;\n        // Bug fix - EJ2-44495 -Node does not gets selected on slight movement of mouse when drag constraints disabled for node\n        this.mouseDownElement = args.source;\n    };\n    ToolBase.prototype.checkPropertyValue = function () {\n        if (this.checkProperty) {\n            this.commandHandler.startTransaction(this.isProtectChange);\n        }\n    };\n    /**\n     * @param args\n     * @private\n     */\n    ToolBase.prototype.mouseMove = function (args) {\n        this.currentPosition = args.position;\n        if (this.inAction) {\n            this.commandHandler.startTransaction(this.isProtectChange);\n            this.checkProperty = false;\n        }\n        //this.currentElement = currentElement;\n        return !this.blocked;\n    };\n    /**\n     * @param args\n     * @private\n     */\n    ToolBase.prototype.mouseUp = function (args) {\n        this.checkPropertyValue();\n        this.currentPosition = args.position;\n        // this.currentElement = currentElement;\n        this.isTooltipVisible = false;\n        this.commandHandler.endTransaction(this.isProtectChange);\n        this.endAction();\n        // Bug fix - EJ2-44495 -Node does not gets selected on slight movement of mouse when drag constraints disabled for node\n        this.mouseDownElement = null;\n    };\n    ToolBase.prototype.endAction = function () {\n        if (!this.isTooltipVisible) {\n            this.commandHandler.closeTooltip();\n        }\n        this.commandHandler = null;\n        this.currentElement = null;\n        this.currentPosition = null;\n        this.inAction = false;\n        this.blocked = false;\n    };\n    /**\n     * @param args\n     * @private\n     */\n    ToolBase.prototype.mouseWheel = function (args) {\n        this.currentPosition = args.position;\n    };\n    /**\n     * @param args\n     * @private\n     */\n    ToolBase.prototype.mouseLeave = function (args) {\n        this.mouseUp(args);\n    };\n    ToolBase.prototype.updateSize = function (shape, startPoint, endPoint, corner, initialBounds, angle) {\n        shape = this.commandHandler.renderContainerHelper(shape) || shape;\n        var horizontalsnap = { snapped: false, offset: 0, left: false, right: false };\n        var verticalsnap = { snapped: false, offset: 0, top: false, bottom: false };\n        var difx = this.currentPosition.x - this.startPosition.x;\n        var dify = this.currentPosition.y - this.startPosition.y;\n        var snapEnabled = (!(shape instanceof _core_elements_text_element__WEBPACK_IMPORTED_MODULE_10__.TextElement)) && this.commandHandler.snappingModule\n            && this.commandHandler.snappingModule.canSnap();\n        var snapLine = snapEnabled ? this.commandHandler.snappingModule.getLayer() : null;\n        var rotateAngle = (shape instanceof _core_elements_text_element__WEBPACK_IMPORTED_MODULE_10__.TextElement) ? angle : shape.rotateAngle;\n        var matrix;\n        matrix = (0,_primitives_matrix__WEBPACK_IMPORTED_MODULE_8__.identityMatrix)();\n        (0,_primitives_matrix__WEBPACK_IMPORTED_MODULE_8__.rotateMatrix)(matrix, -rotateAngle, 0, 0);\n        var x = shape.offsetX;\n        var y = shape.offsetY;\n        var w = shape.width;\n        var h = shape.height;\n        x = x - w * shape.pivot.x;\n        y = y - h * shape.pivot.y;\n        var deltaWidth = 0;\n        var deltaHeight = 0;\n        var diff;\n        var width = (shape instanceof _core_elements_text_element__WEBPACK_IMPORTED_MODULE_10__.TextElement) ? shape.actualSize.width : shape.width;\n        var height = (shape instanceof _core_elements_text_element__WEBPACK_IMPORTED_MODULE_10__.TextElement) ? shape.actualSize.height : shape.height;\n        switch (corner) {\n            case 'ResizeWest':\n                diff = (0,_primitives_matrix__WEBPACK_IMPORTED_MODULE_8__.transformPointByMatrix)(matrix, ({ x: difx, y: dify }));\n                difx = diff.x;\n                dify = diff.y;\n                deltaHeight = 1;\n                difx = snapEnabled ? this.commandHandler.snappingModule.snapLeft(horizontalsnap, verticalsnap, snapLine, difx, dify, shape, endPoint === startPoint, initialBounds) :\n                    difx;\n                dify = 0;\n                deltaWidth = (initialBounds.width - difx) / width;\n                break;\n            case 'ResizeEast':\n                diff = (0,_primitives_matrix__WEBPACK_IMPORTED_MODULE_8__.transformPointByMatrix)(matrix, ({ x: difx, y: dify }));\n                difx = diff.x;\n                dify = diff.y;\n                difx = snapEnabled ? this.commandHandler.snappingModule.snapRight(horizontalsnap, verticalsnap, snapLine, difx, dify, shape, endPoint === startPoint, initialBounds) :\n                    difx;\n                dify = 0;\n                deltaWidth = (initialBounds.width + difx) / width;\n                deltaHeight = 1;\n                break;\n            case 'ResizeNorth':\n                deltaWidth = 1;\n                diff = (0,_primitives_matrix__WEBPACK_IMPORTED_MODULE_8__.transformPointByMatrix)(matrix, ({ x: difx, y: dify }));\n                difx = diff.x;\n                dify = diff.y;\n                dify = snapEnabled ? this.commandHandler.snappingModule.snapTop(horizontalsnap, verticalsnap, snapLine, difx, dify, shape, endPoint === startPoint, initialBounds) :\n                    dify;\n                deltaHeight = (initialBounds.height - dify) / height;\n                break;\n            case 'ResizeSouth':\n                deltaWidth = 1;\n                diff = (0,_primitives_matrix__WEBPACK_IMPORTED_MODULE_8__.transformPointByMatrix)(matrix, ({ x: difx, y: dify }));\n                difx = diff.x;\n                dify = diff.y;\n                dify = snapEnabled ? this.commandHandler.snappingModule.snapBottom(horizontalsnap, verticalsnap, snapLine, difx, dify, shape, endPoint === startPoint, initialBounds) :\n                    dify;\n                deltaHeight = (initialBounds.height + dify) / height;\n                break;\n            case 'ResizeNorthEast':\n                diff = (0,_primitives_matrix__WEBPACK_IMPORTED_MODULE_8__.transformPointByMatrix)(matrix, ({ x: difx, y: dify }));\n                difx = diff.x;\n                dify = diff.y;\n                difx = snapEnabled ? this.commandHandler.snappingModule.snapRight(horizontalsnap, verticalsnap, snapLine, difx, dify, shape, endPoint === startPoint, initialBounds) :\n                    difx;\n                dify = snapEnabled ? this.commandHandler.snappingModule.snapTop(horizontalsnap, verticalsnap, snapLine, difx, dify, shape, endPoint === startPoint, initialBounds) :\n                    dify;\n                deltaWidth = (initialBounds.width + difx) / width;\n                deltaHeight = (initialBounds.height - dify) / height;\n                break;\n            case 'ResizeNorthWest':\n                diff = (0,_primitives_matrix__WEBPACK_IMPORTED_MODULE_8__.transformPointByMatrix)(matrix, ({ x: difx, y: dify }));\n                difx = diff.x;\n                dify = diff.y;\n                dify = !snapEnabled ? dify : this.commandHandler.snappingModule.snapTop(horizontalsnap, verticalsnap, snapLine, difx, dify, shape, endPoint === startPoint, initialBounds);\n                difx = !snapEnabled ? difx : this.commandHandler.snappingModule.snapLeft(horizontalsnap, verticalsnap, snapLine, difx, dify, shape, endPoint === startPoint, initialBounds);\n                deltaWidth = (initialBounds.width - difx) / width;\n                deltaHeight = (initialBounds.height - dify) / height;\n                break;\n            case 'ResizeSouthEast':\n                diff = (0,_primitives_matrix__WEBPACK_IMPORTED_MODULE_8__.transformPointByMatrix)(matrix, ({ x: difx, y: dify }));\n                difx = diff.x;\n                dify = diff.y;\n                dify = !snapEnabled ? dify : this.commandHandler.snappingModule.snapBottom(horizontalsnap, verticalsnap, snapLine, difx, dify, shape, endPoint === startPoint, initialBounds);\n                difx = !snapEnabled ? difx : this.commandHandler.snappingModule.snapRight(horizontalsnap, verticalsnap, snapLine, difx, dify, shape, endPoint === startPoint, initialBounds);\n                deltaHeight = (initialBounds.height + dify) / height;\n                deltaWidth = (initialBounds.width + difx) / width;\n                break;\n            case 'ResizeSouthWest':\n                diff = (0,_primitives_matrix__WEBPACK_IMPORTED_MODULE_8__.transformPointByMatrix)(matrix, ({ x: difx, y: dify }));\n                difx = diff.x;\n                dify = diff.y;\n                dify = snapEnabled ? this.commandHandler.snappingModule.snapBottom(horizontalsnap, verticalsnap, snapLine, difx, dify, shape, endPoint === startPoint, initialBounds) : dify;\n                difx = snapEnabled ? this.commandHandler.snappingModule.snapLeft(horizontalsnap, verticalsnap, snapLine, difx, dify, shape, endPoint === startPoint, initialBounds) : difx;\n                deltaWidth = (initialBounds.width - difx) / width;\n                deltaHeight = (initialBounds.height + dify) / height;\n                break;\n        }\n        return { width: deltaWidth, height: deltaHeight };\n    };\n    ToolBase.prototype.getPivot = function (corner) {\n        switch (corner) {\n            case 'ResizeWest':\n                return { x: 1, y: 0.5 };\n            case 'ResizeEast':\n                return { x: 0, y: 0.5 };\n            case 'ResizeNorth':\n                return { x: 0.5, y: 1 };\n            case 'ResizeSouth':\n                return { x: 0.5, y: 0 };\n            case 'ResizeNorthEast':\n                return { x: 0, y: 1 };\n            case 'ResizeNorthWest':\n                return { x: 1, y: 1 };\n            case 'ResizeSouthEast':\n                return { x: 0, y: 0 };\n            case 'ResizeSouthWest':\n                return { x: 1, y: 0 };\n        }\n        return { x: 0.5, y: 0.5 };\n    };\n    //method to get node shape name\n    ToolBase.prototype.getShapeType = function () {\n        var shape;\n        // eslint-disable-next-line no-constant-condition\n        if (this.commandHandler.diagram.drawingObject.shape.type === 'Image' ||\n            this.commandHandler.diagram.drawingObject.shape.type === 'HTML' ||\n            this.commandHandler.diagram.drawingObject.shape.type === 'Native' ||\n            this.commandHandler.diagram.drawingObject.shape.type === 'Path') {\n            shape = this.commandHandler.diagram.drawingObject.shape.type;\n        }\n        else {\n            shape = this.commandHandler.diagram.drawingObject.shape.shape;\n        }\n        return shape;\n    };\n    //EJ2-52203-Method to trigger ElementDraw Event when we draw node or connector with the drawing Tool\n    ToolBase.prototype.triggerElementDrawEvent = function (source, state, objectType, elementType, isMouseDownAction) {\n        var arg = {\n            source: source, state: state, objectType: objectType, cancel: false, elementType: elementType\n        };\n        this.commandHandler.triggerEvent(_enum_enum__WEBPACK_IMPORTED_MODULE_9__.DiagramEvent.elementDraw, arg);\n        if (isMouseDownAction && arg.cancel) {\n            {\n                this.commandHandler.diagram.resetTool();\n                this.inAction = false;\n            }\n        }\n    };\n    return ToolBase;\n}());\n\n/**\n * Helps to select the objects\n */\nvar SelectTool = /** @class */ (function (_super) {\n    __extends(SelectTool, _super);\n    function SelectTool(commandHandler, protectChange, action) {\n        var _this = _super.call(this, commandHandler, true) || this;\n        _this.action = action;\n        return _this;\n    }\n    /**\n     * @param args\n     * @private\n     */\n    SelectTool.prototype.mouseDown = function (args) {\n        this.inAction = true;\n        _super.prototype.mouseDown.call(this, args);\n    };\n    /**\n     * @param args\n     * @private\n     */\n    SelectTool.prototype.mouseMove = function (args) {\n        _super.prototype.mouseMove.call(this, args);\n        //draw selected region\n        if (this.inAction && _primitives_point__WEBPACK_IMPORTED_MODULE_2__.Point.equals(this.currentPosition, this.prevPosition) === false) {\n            var rect = _primitives_rect__WEBPACK_IMPORTED_MODULE_5__.Rect.toBounds([this.prevPosition, this.currentPosition]);\n            // Bug fix - EJ2-44495 -Node does not gets selected on slight movement of mouse when drag constraints disabled for node\n            if (this.mouseDownElement && !(0,_utility_constraints_util__WEBPACK_IMPORTED_MODULE_7__.canMove)(this.mouseDownElement)) {\n                this.commandHandler.clearObjectSelection(this.mouseDownElement);\n            }\n            else {\n                this.commandHandler.clearSelectedItems();\n                this.commandHandler.drawSelectionRectangle(rect.x, rect.y, rect.width, rect.height);\n            }\n        }\n        return !this.blocked;\n    };\n    /**\n     * @param args\n     * @private\n     */\n    SelectTool.prototype.mouseUp = function (args) {\n        this.checkPropertyValue();\n        //rubber band selection\n        if (!this.commandHandler.isUserHandle(this.currentPosition)) {\n            if (_primitives_point__WEBPACK_IMPORTED_MODULE_2__.Point.equals(this.currentPosition, this.prevPosition) === false && this.inAction) {\n                var region = _primitives_rect__WEBPACK_IMPORTED_MODULE_5__.Rect.toBounds([this.prevPosition, this.currentPosition]);\n                this.commandHandler.doRubberBandSelection(region);\n            }\n            else {\n                //single selection\n                var arrayNodes = this.commandHandler.getSelectedObject();\n                if (!this.commandHandler.hasSelection() || !args.info || !args.info.ctrlKey) {\n                    this.commandHandler.clearSelection(args.source === null ? true : false);\n                    if (this.action === 'LabelSelect') {\n                        this.commandHandler.labelSelect(args.source, args.sourceWrapper, arrayNodes);\n                    }\n                    else if (args.source) {\n                        this.commandHandler.selectObjects([args.source], false, arrayNodes);\n                    }\n                }\n                else {\n                    //handling multiple selection\n                    if (args && args.source) {\n                        if (!this.commandHandler.isSelected(args.source)) {\n                            this.commandHandler.selectObjects([args.source], true);\n                        }\n                        else {\n                            if (args.clickCount === 1) {\n                                this.commandHandler.unSelect(args.source);\n                                // this.commandHandler.updateBlazorSelector();\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        this.inAction = false;\n        _super.prototype.mouseUp.call(this, args);\n    };\n    /**\n     * @param args\n     * @private\n     */\n    SelectTool.prototype.mouseLeave = function (args) {\n        if (this.inAction) {\n            this.mouseUp(args);\n        }\n    };\n    return SelectTool;\n}(ToolBase));\n\nvar FixedUserHandleTool = /** @class */ (function (_super) {\n    __extends(FixedUserHandleTool, _super);\n    function FixedUserHandleTool() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * @param args\n     * @private\n     */\n    FixedUserHandleTool.prototype.mouseUp = function (args) {\n        this.checkPropertyValue();\n        this.inAction = false;\n        var val = args.source;\n        var fixedUserHandle;\n        var iconId = args.sourceWrapper.id;\n        for (var i = 0; i < val.fixedUserHandles.length; i++) {\n            if (iconId.indexOf(val.fixedUserHandles[parseInt(i.toString(), 10)].id) > -1) {\n                fixedUserHandle = val.fixedUserHandles[parseInt(i.toString(), 10)];\n            }\n        }\n        var arg = {\n            fixedUserHandle: fixedUserHandle,\n            element: args.source\n        };\n        var trigger = _enum_enum__WEBPACK_IMPORTED_MODULE_9__.DiagramEvent.fixedUserHandleClick;\n        this.commandHandler.triggerEvent(trigger, arg);\n        _super.prototype.mouseUp.call(this, args);\n    };\n    return FixedUserHandleTool;\n}(ToolBase));\n\n/**\n * Helps to edit the selected connectors\n */\nvar ConnectTool = /** @class */ (function (_super) {\n    __extends(ConnectTool, _super);\n    function ConnectTool(commandHandler, endPoint) {\n        var _this = _super.call(this, commandHandler, true) || this;\n        _this.isConnected = false;\n        _this.endPoint = endPoint;\n        return _this;\n    }\n    /**\n     * @param args\n     * @private\n     */\n    ConnectTool.prototype.mouseDown = function (args) {\n        return __awaiter(this, void 0, void 0, function () {\n            var oldValue, connectors, i, segment, segmentpoint1, segmentpoint2;\n            return __generator(this, function (_a) {\n                this.inAction = true;\n                this.undoElement = undefined;\n                if (!(this instanceof ConnectorDrawingTool)) {\n                    this.undoElement = (0,_utility_base_util__WEBPACK_IMPORTED_MODULE_4__.cloneObject)(args.source);\n                }\n                _super.prototype.mouseDown.call(this, args);\n                if (args.source && args.source.connectors) {\n                    oldValue = { x: this.prevPosition.x, y: this.prevPosition.y };\n                    connectors = args.source.connectors[0];\n                    this.oldConnector = (0,_utility_base_util__WEBPACK_IMPORTED_MODULE_4__.cloneObject)(connectors);\n                }\n                // Sets the selected segment\n                if (this.endPoint === 'BezierSourceThumb' || this.endPoint === 'BezierTargetThumb') {\n                    for (i = 0; i < connectors.segments.length; i++) {\n                        segment = connectors.segments[parseInt(i.toString(), 10)];\n                        segmentpoint1 = !_primitives_point__WEBPACK_IMPORTED_MODULE_2__.Point.isEmptyPoint(segment.point1) ? segment.point1 : segment.bezierPoint1;\n                        segmentpoint2 = !_primitives_point__WEBPACK_IMPORTED_MODULE_2__.Point.isEmptyPoint(segment.point2) ? segment.point2 : segment.bezierPoint2;\n                        //(EJ2-70650)-Unable to drag bezier control thumb, when we increase handleSize value\n                        //Added below code for drag the bezier control thumb while increasing handle size(For hitPadding)\n                        if (this.currentElement.handleSize !== connectors.hitPadding) {\n                            connectors.hitPadding = this.currentElement.handleSize;\n                        }\n                        if ((0,_actions__WEBPACK_IMPORTED_MODULE_11__.contains)(this.currentPosition, segmentpoint1, connectors.hitPadding) ||\n                            (0,_actions__WEBPACK_IMPORTED_MODULE_11__.contains)(this.currentPosition, segmentpoint2, connectors.hitPadding)) {\n                            this.selectedSegment = segment;\n                        }\n                    }\n                }\n                this.currentPosition = args.position;\n                return [2 /*return*/];\n            });\n        });\n    };\n    /**\n     * @param args\n     * @private\n     */\n    ConnectTool.prototype.mouseUp = function (args) {\n        return __awaiter(this, void 0, void 0, function () {\n            var connector, nodeEndId, portEndId, arg, oldValues, newValues, connector, targetPortName, targetNodeNode, target, arg, trigger, obj, entry, obj, entry, connector;\n            return __generator(this, function (_a) {\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_13__.isBlazor)() && this.isConnected && args.source.connectors) {\n                    connector = args.source.connectors[0];\n                    nodeEndId = this.endPoint === 'ConnectorSourceEnd' ? 'sourceID' : 'targetID';\n                    portEndId = this.endPoint === 'ConnectorSourceEnd' ? 'sourcePortID' : 'targetPortID';\n                    arg = {\n                        connector: (0,_utility_diagram_util__WEBPACK_IMPORTED_MODULE_12__.cloneBlazorObject)(connector),\n                        oldValue: { nodeId: this.oldConnector[\"\" + nodeEndId], portId: this.oldConnector[\"\" + portEndId] },\n                        newValue: { nodeId: connector[\"\" + nodeEndId], portId: connector[\"\" + portEndId] }, cancel: false,\n                        state: 'Changed', connectorEnd: this.endPoint\n                    };\n                    //875655- ConnectionChange Event not triggered in Changed state for port change in same node\n                    if (connector[\"\" + nodeEndId] !== this.oldConnector[\"\" + nodeEndId] || connector[\"\" + portEndId] !== this.oldConnector[\"\" + portEndId]) {\n                        this.commandHandler.triggerEvent(_enum_enum__WEBPACK_IMPORTED_MODULE_9__.DiagramEvent.connectionChange, arg);\n                        this.isConnected = false;\n                    }\n                }\n                this.checkPropertyValue();\n                this.commandHandler.updateSelector();\n                this.commandHandler.removeSnap();\n                if ((!(this instanceof ConnectorDrawingTool)) && ((this.endPoint === 'ConnectorSourceEnd' &&\n                    args.source.connectors.length &&\n                    ((!_primitives_point__WEBPACK_IMPORTED_MODULE_2__.Point.equals(args.source.connectors[0].sourcePoint, this.undoElement.connectors[0].sourcePoint) ||\n                        (args.source.connectors[0].sourceID !== this.undoElement.connectors[0].sourceID)))) ||\n                    (this.endPoint === 'ConnectorTargetEnd' &&\n                        ((!_primitives_point__WEBPACK_IMPORTED_MODULE_2__.Point.equals(args.source.connectors[0].targetPoint, this.undoElement.connectors[0].targetPoint))\n                            || (args.source.connectors[0].targetID !== this.undoElement.connectors[0].targetID))))) {\n                    oldValues = void 0;\n                    newValues = void 0;\n                    connector = void 0;\n                    if (args.source && args.source.connectors && this.endPoint === 'ConnectorSourceEnd') {\n                        //941055: The sourcePointChange event's old and new values are the same\n                        oldValues = { x: this.oldConnector.sourcePoint.x, y: this.oldConnector.sourcePoint.y };\n                        connector = args.source.connectors[0];\n                        newValues = { x: connector.sourcePoint.x, y: connector.sourcePoint.y };\n                    }\n                    else if (args.source && args.source.connectors && this.endPoint === 'ConnectorTargetEnd') {\n                        oldValues = { x: this.oldConnector.targetPoint.x, y: this.oldConnector.targetPoint.y };\n                        connector = args.source.connectors[0];\n                        newValues = { x: connector.targetPoint.x, y: connector.targetPoint.y };\n                    }\n                    targetPortName = void 0;\n                    targetNodeNode = void 0;\n                    if (args.target) {\n                        target = this.commandHandler.findTarget(args.targetWrapper, args.target, this.endPoint === 'ConnectorSourceEnd', true);\n                        // eslint-disable-next-line @typescript-eslint/no-unused-expressions\n                        targetNodeNode = target.id;\n                        if (target instanceof _objects_port__WEBPACK_IMPORTED_MODULE_3__.PointPort) {\n                            //941055: The target node is undefined while connected to the port\n                            targetPortName = target.id;\n                            targetNodeNode = args.target.id;\n                        }\n                    }\n                    arg = {\n                        connector: connector, state: 'Completed', targetNode: targetNodeNode,\n                        oldValue: oldValues, newValue: newValues, cancel: false, targetPort: targetPortName\n                    };\n                    trigger = this.endPoint === 'ConnectorSourceEnd' ? _enum_enum__WEBPACK_IMPORTED_MODULE_9__.DiagramEvent.sourcePointChange : _enum_enum__WEBPACK_IMPORTED_MODULE_9__.DiagramEvent.targetPointChange;\n                    this.commandHandler.triggerEvent(trigger, arg);\n                    this.commandHandler.removeTerminalSegment(connector, true);\n                    if (this.undoElement && args.source) {\n                        obj = void 0;\n                        obj = (0,_utility_base_util__WEBPACK_IMPORTED_MODULE_4__.cloneObject)(args.source);\n                        entry = {\n                            type: 'ConnectionChanged', redoObject: (0,_utility_base_util__WEBPACK_IMPORTED_MODULE_4__.cloneObject)(obj), undoObject: (0,_utility_base_util__WEBPACK_IMPORTED_MODULE_4__.cloneObject)(this.undoElement),\n                            category: 'Internal'\n                        };\n                        this.commandHandler.addHistoryEntry(entry);\n                    }\n                }\n                else if (!(this instanceof ConnectorDrawingTool) &&\n                    (this.endPoint === 'BezierTargetThumb' || this.endPoint === 'BezierSourceThumb')) {\n                    if (this.undoElement && args.source) {\n                        obj = (0,_utility_base_util__WEBPACK_IMPORTED_MODULE_4__.cloneObject)(args.source);\n                        entry = {\n                            type: 'SegmentChanged', redoObject: obj, undoObject: this.undoElement, category: 'Internal'\n                        };\n                        this.commandHandler.addHistoryEntry(entry);\n                    }\n                }\n                // this.commandHandler.updateBlazorSelector();\n                this.canCancel = undefined;\n                this.tempArgs = undefined;\n                //(EJ2-66201) - Exception occurs when mouse-hover on ports in node\n                if (args.source && args.source.connectors) {\n                    connector = args.source.connectors[0];\n                    if (connector.isBezierEditing) {\n                        connector.isBezierEditing = false;\n                    }\n                }\n                _super.prototype.mouseUp.call(this, args);\n                return [2 /*return*/];\n            });\n        });\n    };\n    /* tslint:disable */\n    /**\n     * @param args\n     * @private\n     */\n    ConnectTool.prototype.mouseMove = function (args) {\n        _super.prototype.mouseMove.call(this, args);\n        var tempArgs;\n        if ((!(this instanceof ConnectorDrawingTool)) && ((this.endPoint === 'ConnectorSourceEnd' &&\n            _primitives_point__WEBPACK_IMPORTED_MODULE_2__.Point.equals(args.source.connectors[0].sourcePoint, this.undoElement.connectors[0].sourcePoint)) ||\n            (this.endPoint === 'ConnectorTargetEnd' &&\n                _primitives_point__WEBPACK_IMPORTED_MODULE_2__.Point.equals(args.source.connectors[0].targetPoint, this.undoElement.connectors[0].targetPoint)))) {\n            var oldValue = void 0;\n            var connectors = void 0;\n            if (args.source && args.source.connectors) {\n                oldValue = { x: this.prevPosition.x, y: this.prevPosition.y };\n                connectors = args.source.connectors[0];\n            }\n            var targetPort = void 0;\n            var targetNode = void 0;\n            if (args.target) {\n                targetNode = args.target.id;\n                var target = this.commandHandler.findTarget(args.targetWrapper, args.target, this.endPoint === 'ConnectorSourceEnd', true);\n                // eslint-disable-next-line @typescript-eslint/no-unused-expressions\n                (target instanceof _objects_port__WEBPACK_IMPORTED_MODULE_3__.PointPort || target instanceof _objects_node__WEBPACK_IMPORTED_MODULE_0__.BpmnSubEvent) ? targetPort = target.id : targetNode = target.id;\n            }\n            var arg = {\n                connector: connectors, state: 'Start', targetNode: targetNode,\n                oldValue: oldValue, newValue: oldValue, cancel: false, targetPort: targetPort\n            };\n            var trigger = this.endPoint === 'ConnectorSourceEnd' ?\n                _enum_enum__WEBPACK_IMPORTED_MODULE_9__.DiagramEvent.sourcePointChange : _enum_enum__WEBPACK_IMPORTED_MODULE_9__.DiagramEvent.targetPointChange;\n            this.commandHandler.triggerEvent(trigger, arg);\n        }\n        this.currentPosition = args.position;\n        if (this.currentPosition && this.prevPosition) {\n            var diffX = this.currentPosition.x - this.prevPosition.x;\n            var diffY = this.currentPosition.y - this.prevPosition.y;\n            var newValue = void 0;\n            var oldValue = void 0;\n            var inPort = void 0;\n            var outPort = void 0;\n            this.currentPosition = this.commandHandler.snapConnectorEnd(this.currentPosition);\n            var connector = void 0;\n            if (args.source && args.source.connectors) {\n                newValue = { x: this.currentPosition.x, y: this.currentPosition.y };\n                oldValue = { x: this.prevPosition.x, y: this.prevPosition.y };\n                connector = args.source.connectors[0];\n            }\n            var targetPortId = void 0;\n            var targetNodeId = void 0;\n            if (args.target) {\n                var target = this.commandHandler.findTarget(args.targetWrapper, args.target, this.endPoint === 'ConnectorSourceEnd', true);\n                // eslint-disable-next-line @typescript-eslint/no-unused-expressions\n                (target instanceof _objects_port__WEBPACK_IMPORTED_MODULE_3__.PointPort) ? targetPortId = target.id : targetNodeId = target.id;\n            }\n            var arg = {\n                connector: connector, state: 'Progress', targetNode: targetNodeId,\n                oldValue: oldValue, newValue: newValue, cancel: false, targetPort: targetPortId\n            };\n            if (!(this instanceof ConnectorDrawingTool)) {\n                var trigger = this.endPoint === 'ConnectorSourceEnd' ?\n                    _enum_enum__WEBPACK_IMPORTED_MODULE_9__.DiagramEvent.sourcePointChange : _enum_enum__WEBPACK_IMPORTED_MODULE_9__.DiagramEvent.targetPointChange;\n                this.commandHandler.triggerEvent(trigger, arg);\n            }\n            if (args.target) {\n                inPort = (0,_utility_diagram_util__WEBPACK_IMPORTED_MODULE_12__.getInOutConnectPorts)(args.target, true);\n                outPort = (0,_utility_diagram_util__WEBPACK_IMPORTED_MODULE_12__.getInOutConnectPorts)(args.target, false);\n            }\n            if (!arg.cancel && this.inAction && this.endPoint !== undefined && diffX !== 0 || diffY !== 0) {\n                // EJ2-65331 - The condition checks whether the cancel argument is true or false\n                if (!arg.cancel) {\n                    this.blocked = !this.commandHandler.dragConnectorEnds(this.endPoint, args.source, this.currentPosition, this.selectedSegment, args.target, targetPortId);\n                    this.commandHandler.updateSelector();\n                }\n                if (args.target && ((this.endPoint === 'ConnectorSourceEnd' && ((0,_utility_constraints_util__WEBPACK_IMPORTED_MODULE_7__.canOutConnect)(args.target) || (0,_utility_constraints_util__WEBPACK_IMPORTED_MODULE_7__.canPortOutConnect)(outPort)))\n                    || (this.endPoint === 'ConnectorTargetEnd' && ((0,_utility_constraints_util__WEBPACK_IMPORTED_MODULE_7__.canInConnect)(args.target) || (0,_utility_constraints_util__WEBPACK_IMPORTED_MODULE_7__.canPortInConnect)(inPort))))) {\n                    if (this.commandHandler.canDisconnect(this.endPoint, args, targetPortId, targetNodeId)) {\n                        tempArgs = this.commandHandler.disConnect(args.source, this.endPoint, this.canCancel);\n                        this.isConnected = true;\n                    }\n                    var target = this.commandHandler.findTarget(args.targetWrapper, args.target, this.endPoint === 'ConnectorSourceEnd', true);\n                    if (target instanceof _objects_node__WEBPACK_IMPORTED_MODULE_0__.Node) {\n                        if (((0,_utility_constraints_util__WEBPACK_IMPORTED_MODULE_7__.canInConnect)(target) && this.endPoint === 'ConnectorTargetEnd')\n                            || ((0,_utility_constraints_util__WEBPACK_IMPORTED_MODULE_7__.canOutConnect)(target) && this.endPoint === 'ConnectorSourceEnd')) {\n                            tempArgs = this.commandHandler.connect(this.endPoint, args, this.canCancel);\n                            this.isConnected = true;\n                        }\n                    }\n                    else {\n                        var isConnect = this.checkConnect(target);\n                        if (isConnect) {\n                            this.isConnected = true;\n                            tempArgs = this.commandHandler.connect(this.endPoint, args, this.canCancel);\n                        }\n                    }\n                }\n                else if (this.endPoint.indexOf('Bezier') === -1) {\n                    this.isConnected = true;\n                    tempArgs = this.commandHandler.disConnect(args.source, this.endPoint, this.canCancel);\n                    this.commandHandler.updateSelector();\n                }\n            }\n            if (this.commandHandler.canEnableDefaultTooltip()) {\n                var content_1 = this.getTooltipContent(args.position);\n                var contentTemp = function () {\n                    return content_1;\n                };\n                this.commandHandler.showTooltip(args.source, args.position, (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_13__.initializeCSPTemplate)(contentTemp), 'ConnectTool', this.isTooltipVisible);\n                this.isTooltipVisible = false;\n            }\n            if (tempArgs) {\n                this.tempArgs = tempArgs;\n            }\n        }\n        this.prevPosition = this.currentPosition;\n        return !this.blocked;\n    };\n    /**\n     * @param args\n     * @private\n     */\n    ConnectTool.prototype.mouseLeave = function (args) {\n        this.mouseUp(args);\n    };\n    ConnectTool.prototype.getTooltipContent = function (position) {\n        return 'X:' + Math.round(position.x) + ' ' + 'Y:' + Math.round(position.y);\n    };\n    ConnectTool.prototype.checkConnect = function (target) {\n        if ((0,_utility_constraints_util__WEBPACK_IMPORTED_MODULE_7__.canPortInConnect)(target) && this.endPoint === 'ConnectorTargetEnd') {\n            return true;\n        }\n        else if ((0,_utility_constraints_util__WEBPACK_IMPORTED_MODULE_7__.canPortOutConnect)(target) && this.endPoint === 'ConnectorSourceEnd') {\n            return true;\n        }\n        else if (!(target.constraints & _enum_enum__WEBPACK_IMPORTED_MODULE_9__.PortConstraints.None) && !(0,_utility_constraints_util__WEBPACK_IMPORTED_MODULE_7__.canPortInConnect)(target) && !(0,_utility_constraints_util__WEBPACK_IMPORTED_MODULE_7__.canPortOutConnect)(target)\n            && (target.constraints === undefined || (target.constraints & (_enum_enum__WEBPACK_IMPORTED_MODULE_9__.PortConstraints.Default & ~(_enum_enum__WEBPACK_IMPORTED_MODULE_9__.PortConstraints.InConnect | _enum_enum__WEBPACK_IMPORTED_MODULE_9__.PortConstraints.OutConnect))) > 0)) {\n            return true;\n        }\n        return false;\n    };\n    /**   @private  */\n    ConnectTool.prototype.endAction = function () {\n        _super.prototype.endAction.call(this);\n        this.prevPosition = null;\n        this.endPoint = null;\n    };\n    return ConnectTool;\n}(ToolBase));\n\n/**\n * Drags the selected objects\n */\nvar MoveTool = /** @class */ (function (_super) {\n    __extends(MoveTool, _super);\n    function MoveTool(commandHandler, objType) {\n        var _this = _super.call(this, commandHandler, true) || this;\n        /**   @private  */\n        _this.currentTarget = null;\n        _this.isStartAction = false;\n        _this.canCancel = false;\n        _this.canTrigger = false;\n        _this.objectType = objType;\n        return _this;\n    }\n    /**\n     * @param args\n     * @private\n     */\n    MoveTool.prototype.mouseDown = function (args) {\n        if (args.source instanceof _objects_node__WEBPACK_IMPORTED_MODULE_0__.Node || args.source instanceof _objects_connector__WEBPACK_IMPORTED_MODULE_1__.Connector) {\n            var arrayNodes = this.commandHandler.getSelectedObject();\n            this.commandHandler.selectObjects([args.source], args.info && args.info.ctrlKey, arrayNodes);\n            var selectedObject = { nodes: [], connectors: [] };\n            if (args.source instanceof _objects_node__WEBPACK_IMPORTED_MODULE_0__.Node) {\n                selectedObject.nodes.push((0,_utility_base_util__WEBPACK_IMPORTED_MODULE_4__.cloneObject)(args.source));\n            }\n            else {\n                selectedObject.connectors.push((0,_utility_base_util__WEBPACK_IMPORTED_MODULE_4__.cloneObject)(args.source));\n            }\n            this.undoElement = (0,_utility_base_util__WEBPACK_IMPORTED_MODULE_4__.cloneObject)(selectedObject);\n            //909582-History change event args old value is undefined upon node drag\n            var wrapper = args.source.wrapper;\n            this.undoElement.offsetX = wrapper.offsetX;\n            this.undoElement.offsetY = wrapper.offsetY;\n        }\n        else {\n            this.undoElement = (0,_utility_base_util__WEBPACK_IMPORTED_MODULE_4__.cloneObject)(args.source);\n        }\n        this.undoParentElement = this.commandHandler.getSubProcess(args.source);\n        if (this.objectType === 'Port') {\n            this.portId = args.sourceWrapper.id;\n        }\n        this.commandHandler.insertBlazorConnector(args.source);\n        _super.prototype.mouseDown.call(this, args);\n        this.initialOffset = { x: 0, y: 0 };\n    };\n    MoveTool.prototype.getPort = function (args) {\n        var port;\n        var sourceId = args.source.id;\n        var sourcePorts = args.source.ports;\n        for (var i = 0; i < sourcePorts.length; i++) {\n            if (args.sourceWrapper.id === sourceId + '_' + sourcePorts[parseInt(i.toString(), 10)].id) {\n                port = sourcePorts[parseInt(i.toString(), 10)];\n                break;\n            }\n        }\n        return port;\n    };\n    /* tslint:disable */\n    /**\n     * @param args\n     * @param isPreventHistory\n     * @param args\n     * @param isPreventHistory\n     * @private\n     */\n    MoveTool.prototype.mouseUp = function (args, isPreventHistory) {\n        return __awaiter(this, void 0, void 0, function () {\n            var oldValues, newValues, obj, historyAdded, object, redoObject, wrapper, isSubGroupSelection, currentSelection, i, isSelector, isSingleSelectedObject, isSameSize, isDifferentPosition, isDifferentSourcePoint, isDifferentTargetPoint, arg, canAddHistory, nameTable, i, entry, entry_1, snappedPoint, canSplit, i, i, arg, nodes, isEndGroup, temp, i, i, helper, entry, port, nodePorts, connPorts, i, i, arg;\n            return __generator(this, function (_a) {\n                this.checkPropertyValue();\n                historyAdded = false;\n                redoObject = { nodes: [], connectors: [] };\n                if (this.objectType !== 'Port') {\n                    if (args.source instanceof _objects_node__WEBPACK_IMPORTED_MODULE_0__.Node || args.source instanceof _objects_connector__WEBPACK_IMPORTED_MODULE_1__.Connector) {\n                        if (args.source instanceof _objects_node__WEBPACK_IMPORTED_MODULE_0__.Node) {\n                            redoObject.nodes.push((0,_utility_base_util__WEBPACK_IMPORTED_MODULE_4__.cloneObject)(args.source));\n                        }\n                        else {\n                            redoObject.connectors.push((0,_utility_base_util__WEBPACK_IMPORTED_MODULE_4__.cloneObject)(args.source));\n                        }\n                        obj = (0,_utility_base_util__WEBPACK_IMPORTED_MODULE_4__.cloneObject)(redoObject);\n                        wrapper = args.source.wrapper;\n                        obj.offsetX = wrapper.offsetX;\n                        obj.offsetY = wrapper.offsetY;\n                    }\n                    else {\n                        obj = (0,_utility_base_util__WEBPACK_IMPORTED_MODULE_4__.cloneObject)(args.source);\n                    }\n                    object = this.commandHandler.renderContainerHelper(args.source) || args.source || this.commandHandler.renderContainerHelper(args.source);\n                    if ((object.id === 'helper') || (object.id !== 'helper')) {\n                        isSubGroupSelection = false;\n                        if (object instanceof _objects_node__WEBPACK_IMPORTED_MODULE_0__.Selector) {\n                            currentSelection = (0,_utility_base_util__WEBPACK_IMPORTED_MODULE_4__.cloneObject)(object);\n                            // check currentSelection.selectedObjects array contains same object of this.undoElement.selectedObjects array\n                            if (currentSelection.selectedObjects.length === this.undoElement.selectedObjects.length) {\n                                for (i = 0; i < currentSelection.selectedObjects.length; i++) {\n                                    if (currentSelection.selectedObjects[parseInt(i.toString(), 10)].id !==\n                                        this.undoElement.selectedObjects[parseInt(i.toString(), 10)].id) {\n                                        isSubGroupSelection = true;\n                                        break;\n                                    }\n                                }\n                            }\n                        }\n                        isSelector = object instanceof _objects_node__WEBPACK_IMPORTED_MODULE_0__.Selector;\n                        isSingleSelectedObject = object instanceof _objects_node__WEBPACK_IMPORTED_MODULE_0__.Selector && object.selectedObjects && object.selectedObjects.length === 1;\n                        isSameSize = object instanceof _objects_node__WEBPACK_IMPORTED_MODULE_0__.Selector && Math.round(object.width) === Math.round(this.undoElement.width) && Math.round(object.height) === Math.round(this.undoElement.height);\n                        isDifferentPosition = object.offsetX !== this.undoElement.offsetX || object.offsetY !== this.undoElement.offsetY;\n                        isDifferentSourcePoint = object.sourcePoint !== this.undoElement.sourcePoint;\n                        isDifferentTargetPoint = object.targetPoint !== this.undoElement.targetPoint;\n                        if (!isSubGroupSelection &&\n                            (((isSelector && (isSameSize || isSingleSelectedObject)) || !isSelector) && (isDifferentPosition || isDifferentSourcePoint || isDifferentTargetPoint))\n                            || this.isSelectionHasConnector(object)) {\n                            if (args.source) {\n                                newValues = { offsetX: args.source.wrapper.offsetX, offsetY: args.source.wrapper.offsetY };\n                                oldValues = { offsetX: args.source.wrapper.offsetX, offsetY: args.source.wrapper.offsetY };\n                            }\n                            arg = {\n                                source: args.source, state: 'Completed', oldValue: this.intialValue, newValue: newValues,\n                                target: this.currentTarget, targetPosition: this.currentPosition, allowDrop: true, cancel: false\n                            };\n                            arg = {\n                                source: (0,_utility_diagram_util__WEBPACK_IMPORTED_MODULE_12__.cloneBlazorObject)(args.source), state: 'Completed',\n                                oldValue: (0,_utility_diagram_util__WEBPACK_IMPORTED_MODULE_12__.cloneBlazorObject)(this.intialValue), newValue: (0,_utility_diagram_util__WEBPACK_IMPORTED_MODULE_12__.cloneBlazorObject)(newValues),\n                                target: (0,_utility_diagram_util__WEBPACK_IMPORTED_MODULE_12__.cloneBlazorObject)(this.currentTarget), targetPosition: (0,_utility_diagram_util__WEBPACK_IMPORTED_MODULE_12__.cloneBlazorObject)(this.currentPosition),\n                                allowDrop: arg.allowDrop, cancel: arg.cancel\n                            };\n                            canAddHistory = true;\n                            //EJ2-69852): Position Change event trigger for clicking second time in swimlane header issue\n                            if (object.id === 'helper') {\n                                if (this.canTrigger) {\n                                    //EJ2-925499 - Undo/Redo not working after moveing multiselected nodes inside swimlane while line routing enabled\n                                    if ((obj.nodes.length > 1 || obj.connectors.length > 1) && (this.commandHandler.diagram.lineRoutingModule &&\n                                        (this.commandHandler.diagram.constraints & _enum_enum__WEBPACK_IMPORTED_MODULE_9__.DiagramConstraints.LineRouting))) {\n                                        nameTable = this.commandHandler.diagram.nameTable;\n                                        for (i = 0; i < obj.nodes.length; i++) {\n                                            if (!(nameTable[obj.nodes[parseInt(i.toString(), 10)].parentId] &&\n                                                nameTable[obj.nodes[parseInt(i.toString(), 10)].parentId].isLane)) {\n                                                canAddHistory = false;\n                                                break;\n                                            }\n                                        }\n                                    }\n                                    else {\n                                        canAddHistory = true;\n                                    }\n                                    this.commandHandler.triggerEvent(_enum_enum__WEBPACK_IMPORTED_MODULE_9__.DiagramEvent.positionChange, arg);\n                                    this.connectorEndPointChangeEvent(arg);\n                                }\n                                else {\n                                    canAddHistory = false;\n                                }\n                            }\n                            else {\n                                this.commandHandler.triggerEvent(_enum_enum__WEBPACK_IMPORTED_MODULE_9__.DiagramEvent.positionChange, arg);\n                                this.connectorEndPointChangeEvent(arg);\n                            }\n                            if (!isPreventHistory && canAddHistory) {\n                                this.commandHandler.startGroupAction();\n                                historyAdded = true;\n                                entry = {\n                                    type: 'PositionChanged',\n                                    redoObject: (0,_utility_base_util__WEBPACK_IMPORTED_MODULE_4__.cloneObject)(obj), undoObject: (0,_utility_base_util__WEBPACK_IMPORTED_MODULE_4__.cloneObject)(this.undoElement), category: 'Internal'\n                                };\n                                if (obj.nodes[0] && obj.nodes[0].processId) {\n                                    entry_1 = {\n                                        type: 'SizeChanged', category: 'Internal',\n                                        undoObject: this.undoParentElement, redoObject: this.commandHandler.getSubProcess(args.source)\n                                    };\n                                    this.commandHandler.addHistoryEntry(entry_1);\n                                }\n                                this.commandHandler.addHistoryEntry(entry);\n                            }\n                        }\n                    }\n                    snappedPoint = this.commandHandler.snapPoint(this.prevPosition, this.currentPosition, 0, 0);\n                    this.commandHandler.removeSnap();\n                    this.commandHandler.removeHighlighter();\n                    if (args.source && this.currentTarget && (0,_utility_constraints_util__WEBPACK_IMPORTED_MODULE_7__.canAllowDrop)(this.currentTarget) &&\n                        this.commandHandler.isDroppable(args.source, this.currentTarget)) {\n                        canSplit = true;\n                        this.commandHandler.drop(this.currentElement, this.currentTarget, this.currentPosition);\n                        if (this.currentTarget && this.currentTarget instanceof _objects_connector__WEBPACK_IMPORTED_MODULE_1__.Connector) {\n                            if (this.commandHandler.diagram.enableConnectorSplit === true) {\n                                //EJ2-894577- Restricting the connector splitting if any one edge is already connected to the node\n                                if (this.currentElement && this.currentElement instanceof _objects_node__WEBPACK_IMPORTED_MODULE_0__.Node) {\n                                    if (this.currentElement.children !== undefined) {\n                                        for (i = 0; i < this.currentElement.children.length; i++) {\n                                            if (this.currentElement.children[parseInt(i.toString(), 10)] === this.currentTarget.sourceID ||\n                                                this.currentElement.children[parseInt(i.toString(), 10)] === this.currentTarget.targetID) {\n                                                canSplit = false;\n                                            }\n                                        }\n                                    }\n                                    else {\n                                        if (this.currentElement.id === this.currentTarget.sourceID || this.currentElement.id === this.currentTarget.targetID) {\n                                            canSplit = false;\n                                        }\n                                    }\n                                    if (canSplit) {\n                                        this.commandHandler.connectorSplit(this.currentElement, this.currentTarget);\n                                    }\n                                }\n                                else if (this.currentElement instanceof _objects_node__WEBPACK_IMPORTED_MODULE_0__.Selector && !(this.commandHandler.PreventConnectorSplit)) {\n                                    if (this.currentElement.nodes[0].children) {\n                                        for (i = 0; i < this.currentElement.nodes[0].children.length; i++) {\n                                            if (this.currentElement.nodes[0].children[parseInt(i.toString(), 10)] === this.currentTarget.sourceID ||\n                                                this.currentElement.nodes[0].children[parseInt(i.toString(), 10)] === this.currentTarget.targetID) {\n                                                canSplit = false;\n                                            }\n                                        }\n                                    }\n                                    else {\n                                        if ((this.currentElement.nodes[0]).id === this.currentTarget.sourceID ||\n                                            (this.currentElement.nodes[0]).id === this.currentTarget.targetID) {\n                                            canSplit = false;\n                                        }\n                                    }\n                                    if (canSplit) {\n                                        this.commandHandler.connectorSplit(this.currentElement.nodes[0], this.currentTarget);\n                                        this.commandHandler.PreventConnectorSplit = false;\n                                    }\n                                }\n                            }\n                        }\n                        arg = {\n                            element: args.source, target: this.currentTarget, position: this.currentPosition, cancel: false\n                        };\n                        this.commandHandler.triggerEvent(_enum_enum__WEBPACK_IMPORTED_MODULE_9__.DiagramEvent.drop, arg);\n                        if (!arg.cancel && args.source && this.commandHandler.isParentAsContainer(this.currentTarget) && !this.commandHandler.isTargetSubProcess(this.currentTarget)) {\n                            nodes = (args.source instanceof _objects_node__WEBPACK_IMPORTED_MODULE_0__.Selector) ? args.source.nodes : [args.source];\n                            isEndGroup = false;\n                            temp = void 0;\n                            for (i = 0; i < nodes.length; i++) {\n                                if (nodes[0].parentId === nodes[parseInt(i.toString(), 10)].parentId) {\n                                    temp = true;\n                                }\n                                else {\n                                    temp = false;\n                                    break;\n                                }\n                            }\n                            // 902192: Diagram node resized wrongly while dragging and drop on multiple selected nodes in another lane Issue Fix\n                            if (this.commandHandler.diagram.selectedItems.nodes.length !== nodes.length) {\n                                nodes = this.commandHandler.diagram.selectedItems.nodes;\n                            }\n                            if (this.commandHandler.diagram.selectedItems.nodes.length > 1) {\n                                //929543: To calculate the difference between the target lane bounds and selector bounds.\n                                // We use this difference values to set the margin left and margin top for the child nodes of lane.\n                                nodes = this.calculateDiff(this.commandHandler.diagram.selectedItems, this.currentTarget, this.commandHandler.diagram);\n                                this.commandHandler.diagram.multiselect = true;\n                            }\n                            else {\n                                this.commandHandler.diagram.multiselect = false;\n                            }\n                            for (i = 0; i < nodes.length; i++) {\n                                if (!nodes[parseInt(i.toString(), 10)].container && !(this.commandHandler.diagram.cancelPositionChange)) {\n                                    isEndGroup = true;\n                                    this.commandHandler.updateLaneChildrenZindex(nodes[parseInt(i.toString(), 10)], this.currentTarget);\n                                    this.commandHandler.dropChildToContainer(this.currentTarget, nodes[parseInt(i.toString(), 10)]);\n                                    this.commandHandler.renderContainerHelper(nodes[parseInt(i.toString(), 10)]);\n                                }\n                            }\n                            //929543: To update the lane size based on the dropped child nodes entire bounds.\n                            if (nodes.length > 1) {\n                                helper = this.commandHandler.diagram.nameTable['helper'];\n                                if (helper) {\n                                    (0,_container_interaction__WEBPACK_IMPORTED_MODULE_15__.updateLaneBoundsWithSelector)(this.currentTarget, helper, this.commandHandler.diagram);\n                                }\n                            }\n                            if (historyAdded && this.commandHandler.isContainer && isEndGroup) {\n                                this.commandHandler.endGroupAction();\n                            }\n                        }\n                    }\n                    if (args.source && this.currentTarget) {\n                        this.commandHandler.dropAnnotation(args.source, this.currentTarget);\n                    }\n                    this.commandHandler.updateSelector();\n                    if (historyAdded && !this.commandHandler.isContainer) {\n                        this.commandHandler.endGroupAction();\n                    }\n                }\n                else {\n                    redoObject.nodes.push((0,_utility_base_util__WEBPACK_IMPORTED_MODULE_4__.cloneObject)(args.source));\n                    args.portId = this.portId;\n                    obj = (0,_utility_base_util__WEBPACK_IMPORTED_MODULE_4__.cloneObject)(redoObject);\n                    entry = {\n                        type: 'PortPositionChanged', objectId: this.portId,\n                        redoObject: (0,_utility_base_util__WEBPACK_IMPORTED_MODULE_4__.cloneObject)(obj), undoObject: (0,_utility_base_util__WEBPACK_IMPORTED_MODULE_4__.cloneObject)(this.undoElement), category: 'Internal'\n                    };\n                    this.commandHandler.addHistoryEntry(entry);\n                    port = this.getPort(args);\n                    if (port) {\n                        nodePorts = this.undoElement.nodes.length > 0 ? this.undoElement.nodes[0].ports : [];\n                        connPorts = this.undoElement.connectors.length > 0 ? this.undoElement.connectors[0].ports : [];\n                        for (i = 0; i < nodePorts.length; i++) {\n                            if (port.id === nodePorts[parseInt(i.toString(), 10)].id) {\n                                oldValues = {\n                                    offsetX: nodePorts[parseInt(i.toString(), 10)].offset.x,\n                                    offsetY: nodePorts[parseInt(i.toString(), 10)].offset.y\n                                };\n                                newValues = { offsetX: port.offset.x, offsetY: port.offset.y };\n                                break;\n                            }\n                        }\n                        for (i = 0; i < connPorts.length; i++) {\n                            if (port.id === connPorts[parseInt(i.toString(), 10)].id) {\n                                oldValues = {\n                                    offset: connPorts[parseInt(i.toString(), 10)].offset\n                                };\n                                newValues = { offset: port.offset };\n                                break;\n                            }\n                        }\n                    }\n                    arg = {\n                        source: port, state: 'Completed', oldValue: oldValues, newValue: newValues,\n                        target: this.currentTarget, targetPosition: this.currentPosition, allowDrop: true, cancel: false\n                    };\n                    this.commandHandler.triggerEvent(_enum_enum__WEBPACK_IMPORTED_MODULE_9__.DiagramEvent.positionChange, arg);\n                }\n                // this.commandHandler.updateBlazorSelector();\n                _super.prototype.mouseUp.call(this, args);\n                return [2 /*return*/];\n            });\n        });\n    };\n    MoveTool.prototype.clearDiff = function (nodes) {\n        nodes.forEach(function (node, index) {\n            delete node.diffX;\n            delete node.diffY;\n        });\n    };\n    MoveTool.prototype.calculateDiff = function (selector, target, diagram) {\n        this.clearDiff(selector.nodes);\n        var selectorLeft = selector.wrapper.bounds.left;\n        var selectorTop = selector.wrapper.bounds.top;\n        var targetLeft = target.wrapper.bounds.left;\n        var targetTop = target.wrapper.bounds.top;\n        var diffLeft;\n        var diffTop;\n        var swimlane = diagram.nameTable[target.parentId];\n        if (target.columnIndex === 0 && swimlane && swimlane.shape.orientation === 'Horizontal') {\n            targetLeft += 50;\n        }\n        if (target.rowIndex === 1 && swimlane && swimlane.shape.orientation === 'Vertical') {\n            targetTop += 50;\n        }\n        if (selectorLeft < targetLeft) {\n            diffLeft = targetLeft - selectorLeft;\n        }\n        else {\n            diffLeft = 0;\n        }\n        if (selectorTop < targetTop) {\n            diffTop = targetTop - selectorTop;\n        }\n        else {\n            diffTop = 0;\n        }\n        var nodes = selector.nodes;\n        nodes.forEach(function (node, index) {\n            node.diffX = diffLeft;\n            node.diffY = diffTop;\n        });\n        return nodes;\n    };\n    //EJ2-59309-While drag the connected node the connector endPointChange event does not get trigger\n    MoveTool.prototype.connectorEndPointChangeEvent = function (arg, snappedPoint) {\n        var selectedElement = arg.source;\n        if (selectedElement instanceof _objects_node__WEBPACK_IMPORTED_MODULE_0__.Selector && selectedElement.nodes.length > 0) {\n            for (var i = 0; i < selectedElement.nodes.length; i++) {\n                var node = selectedElement.nodes[parseInt(i.toString(), 10)];\n                if (node && node.inEdges.length > 0) {\n                    for (var j = 0; j < node.inEdges.length; j++) {\n                        var connector = this.commandHandler.diagram.getObject(node.inEdges[parseInt(j.toString(), 10)]);\n                        this.triggerEndPointEvent(connector, arg, snappedPoint, 'targetPointChange');\n                    }\n                }\n                if (node && node.outEdges.length > 0) {\n                    for (var j = 0; j < node.outEdges.length; j++) {\n                        var connector = this.commandHandler.diagram.getObject(node.outEdges[parseInt(j.toString(), 10)]);\n                        this.triggerEndPointEvent(connector, arg, snappedPoint, 'sourcePointChange');\n                    }\n                }\n            }\n        }\n    };\n    MoveTool.prototype.triggerEndPointEvent = function (connector, arg, snappedPoint, eventName) {\n        var args = {\n            connector: connector, state: arg.state, targetNode: connector.targetID, targetPort: connector.targetPortID,\n            sourceNode: connector.sourceID, sourcePort: connector.sourcePortID, oldValue: { x: connector.targetPoint.x, y: connector.targetPoint.y },\n            newValue: { x: connector.targetPoint.x + (snappedPoint ? snappedPoint.x : 0), y: connector.targetPoint.y + (snappedPoint ? snappedPoint.y : 0) }, cancel: arg.cancel\n        };\n        this.commandHandler.triggerEvent((eventName === 'targetPointChange') ? _enum_enum__WEBPACK_IMPORTED_MODULE_9__.DiagramEvent.targetPointChange : _enum_enum__WEBPACK_IMPORTED_MODULE_9__.DiagramEvent.sourcePointChange, args);\n    };\n    MoveTool.prototype.isSelectionHasConnector = function (args) {\n        if (args.nodes && args.connectors && args.nodes.length > 0 && args.connectors.length > 0 &&\n            (args.width !== this.undoElement.width || args.height !== this.undoElement.height)) {\n            return true;\n        }\n        return false;\n    };\n    // private getBlazorPositionChangeEventArgs(args: IDraggingEventArgs | IBlazorDraggingEventArgs, target: IElement): any {\n    // args = {\n    //     source: cloneBlazorObject(args.source), state: args.state, oldValue: args.oldValue, newValue: args.newValue,\n    //     target: getObjectType(target) === Connector ? { connector: cloneBlazorObject(target) }\n    //         : { node: cloneBlazorObject(target) },\n    //     targetPosition: this.currentPosition, allowDrop: true, cancel: false\n    // };\n    // return args as IBlazorDraggingEventArgs;\n    // }\n    /* tslint:disable */\n    /**\n     * @param args\n     * @private\n     */\n    MoveTool.prototype.mouseMove = function (args) {\n        _super.prototype.mouseMove.call(this, args);\n        var isSame = false;\n        var object;\n        object = this.commandHandler.renderContainerHelper(args.source) ||\n            args.source;\n        if (object instanceof _objects_node__WEBPACK_IMPORTED_MODULE_0__.Node || object instanceof _objects_connector__WEBPACK_IMPORTED_MODULE_1__.Connector) {\n            if (object instanceof _objects_node__WEBPACK_IMPORTED_MODULE_0__.Node) {\n                if (object.offsetX === this.undoElement.nodes[0].offsetX &&\n                    object.offsetY === this.undoElement.nodes[0].offsetY) {\n                    isSame = true;\n                }\n            }\n            else {\n                if (_primitives_point__WEBPACK_IMPORTED_MODULE_2__.Point.equals(object.sourcePoint, this.undoElement.connectors[0].sourcePoint) &&\n                    _primitives_point__WEBPACK_IMPORTED_MODULE_2__.Point.equals(object.targetPoint, this.undoElement.connectors[0].targetPoint)) {\n                    isSame = true;\n                }\n            }\n        }\n        else {\n            if (object.wrapper.offsetX === this.undoElement.wrapper.offsetX &&\n                object.wrapper.offsetY === this.undoElement.wrapper.offsetY) {\n                isSame = true;\n            }\n        }\n        var oldValues;\n        if (object) {\n            oldValues = { offsetX: object.wrapper.offsetX, offsetY: object.wrapper.offsetY };\n        }\n        var arg = {\n            source: object, state: 'Start', oldValue: oldValues, newValue: oldValues,\n            target: args.target, targetPosition: args.position, allowDrop: true, cancel: false\n        };\n        arg = {\n            source: (0,_utility_diagram_util__WEBPACK_IMPORTED_MODULE_12__.cloneBlazorObject)(object), state: 'Start', oldValue: (0,_utility_diagram_util__WEBPACK_IMPORTED_MODULE_12__.cloneBlazorObject)(oldValues),\n            newValue: (0,_utility_diagram_util__WEBPACK_IMPORTED_MODULE_12__.cloneBlazorObject)(oldValues),\n            target: args.target, targetPosition: args.position, allowDrop: arg.allowDrop, cancel: arg.cancel\n        };\n        //EJ2-909578: - Position change incorrect event args value for port dragging\n        if (this.objectType === 'Port') {\n            var port = this.getPort(args);\n            if (port) {\n                var nodePorts = this.undoElement.nodes.length > 0 ? this.undoElement.nodes[0].ports : [];\n                var connPorts = this.undoElement.connectors.length > 0 ? this.undoElement.connectors[0].ports : [];\n                for (var i = 0; i < nodePorts.length; i++) {\n                    oldValues = { offsetX: port.offset.x, offsetY: port.offset.y };\n                    if (port.offset.x !== nodePorts[parseInt(i.toString(), 10)].offset.x || port.offset.y !== nodePorts[parseInt(i.toString(), 10)].offset.y) {\n                        isSame = false;\n                        break;\n                    }\n                }\n                for (var i = 0; i < connPorts.length; i++) {\n                    oldValues = { offset: port.offset };\n                    if (port.offset !== connPorts[parseInt(i.toString(), 10)].offset) {\n                        isSame = false;\n                        break;\n                    }\n                }\n            }\n            arg = {\n                source: port, state: 'Start', oldValue: oldValues, newValue: oldValues,\n                target: args.target, targetPosition: args.position, allowDrop: true, cancel: false\n            };\n        }\n        //(EJ2-277624)-In the positionChange event, during the completed state, old and new values remain identical.\n        if (!this.isStartAction) {\n            this.intialValue = { offsetX: object.wrapper.offsetX, offsetY: object.wrapper.offsetY };\n            if ((this.commandHandler.diagram.lineRoutingModule &&\n                (this.commandHandler.diagram.constraints & _enum_enum__WEBPACK_IMPORTED_MODULE_9__.DiagramConstraints.LineRouting)\n                && (this.commandHandler.diagram.layout.type !== 'ComplexHierarchicalTree'))) {\n                var INFLATE_MARGIN = 40;\n                var nodeBounds = (0,_utility_base_util__WEBPACK_IMPORTED_MODULE_4__.getBounds)(object.wrapper);\n                nodeBounds.Inflate(INFLATE_MARGIN);\n                var nearbyObjects = this.commandHandler.diagram.spatialSearch.findObjects(nodeBounds);\n                for (var _i = 0, nearbyObjects_1 = nearbyObjects; _i < nearbyObjects_1.length; _i++) {\n                    var item = nearbyObjects_1[_i];\n                    if (item instanceof _objects_connector__WEBPACK_IMPORTED_MODULE_1__.Connector && this.commandHandler.diagram.routedConnectors.indexOf(item.id) === -1) {\n                        // this.commandHandler.diagram.lineConnector.push(item.id);\n                    }\n                }\n            }\n        }\n        if (isSame && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_13__.isBlazor)()) {\n            this.commandHandler.triggerEvent(_enum_enum__WEBPACK_IMPORTED_MODULE_9__.DiagramEvent.positionChange, arg);\n            this.connectorEndPointChangeEvent(arg);\n            this.isStartAction = true;\n        }\n        this.commandHandler.diagram.cancelPositionChange = arg.cancel;\n        this.currentPosition = args.position;\n        if (this.objectType !== 'Port') {\n            var x = this.currentPosition.x - this.prevPosition.x;\n            var y = this.currentPosition.y - this.prevPosition.y;\n            var diffX = this.initialOffset.x + (this.currentPosition.x - this.prevPosition.x);\n            var diffY = this.initialOffset.y + (this.currentPosition.y - this.prevPosition.y);\n            this.commandHandler.dragOverElement(args, this.currentPosition);\n            this.commandHandler.disConnect(args.source);\n            this.commandHandler.removeSnap();\n            var oldValues_1;\n            var newValues = void 0;\n            var snappedPoint = this.commandHandler.snapPoint(this.prevPosition, this.currentPosition, diffX, diffY);\n            this.initialOffset.x = diffX - snappedPoint.x;\n            this.initialOffset.y = diffY - snappedPoint.y;\n            if (object) {\n                oldValues_1 = { offsetX: object.wrapper.offsetX, offsetY: object.wrapper.offsetY };\n                newValues = {\n                    offsetX: object.wrapper.offsetX + snappedPoint.x,\n                    offsetY: object.wrapper.offsetY + snappedPoint.y\n                };\n            }\n            if (this.currentTarget && args.target !== this.currentTarget) {\n                this.commandHandler.removeChildFromBPmn(args.source, args.target, this.currentTarget);\n            }\n            this.currentTarget = args.target;\n            var arg_1 = {\n                source: object, state: 'Progress', oldValue: oldValues_1, newValue: newValues,\n                target: args.target, targetPosition: args.position, allowDrop: true, cancel: false\n            };\n            this.commandHandler.triggerEvent(_enum_enum__WEBPACK_IMPORTED_MODULE_9__.DiagramEvent.positionChange, arg_1);\n            this.commandHandler.diagram.cancelPositionChange = arg_1.cancel;\n            this.canTrigger = true;\n            this.connectorEndPointChangeEvent(arg_1, snappedPoint);\n            if (!arg_1.cancel && !this.canCancel) {\n                this.blocked = !this.commandHandler.dragSelectedObjects(snappedPoint.x, snappedPoint.y);\n                var blocked = !(this.commandHandler.mouseOver(this.currentElement, this.currentTarget, this.currentPosition));\n                this.blocked = this.blocked || blocked;\n            }\n            this.commandHandler.removeStackHighlighter();\n            this.commandHandler.renderStackHighlighter(args);\n            if (this.currentTarget && (args.source !== this.currentTarget) &&\n                this.commandHandler.isDroppable(args.source, this.currentTarget) && args.source.id !== 'helper') {\n                var object_1 = (args.source instanceof _objects_node__WEBPACK_IMPORTED_MODULE_0__.Selector) ? args.source.nodes[0] : args.source;\n                if ((!this.commandHandler.isParentAsContainer(object_1, true))\n                    && (object_1.shape.type !== 'SwimLane' && !object_1.shape.isPhase)) {\n                    if (this.currentTarget.isLane) {\n                        this.commandHandler.renderStackHighlighter(args, this.currentTarget);\n                    }\n                    else {\n                        this.commandHandler.drawHighlighter(this.currentTarget);\n                    }\n                }\n            }\n            else {\n                this.commandHandler.removeHighlighter();\n            }\n            if (this.commandHandler.canEnableDefaultTooltip()) {\n                var content_2 = this.getTooltipContent(args.source);\n                var contentTemp = function () {\n                    return content_2;\n                };\n                this.commandHandler.showTooltip(args.source, args.position, (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_13__.initializeCSPTemplate)(contentTemp), 'MoveTool', this.isTooltipVisible);\n                this.isTooltipVisible = false;\n            }\n        }\n        else {\n            var matrix = (0,_primitives_matrix__WEBPACK_IMPORTED_MODULE_8__.identityMatrix)();\n            var node = args.source;\n            var oldValues_2;\n            var newValues = void 0;\n            var nodePorts = this.undoElement.nodes.length > 0 ? this.undoElement.nodes[0].ports : [];\n            var connPorts = this.undoElement.connectors.length > 0 ? this.undoElement.connectors[0].ports : [];\n            var port = this.getPort(args);\n            if (port) {\n                for (var i = 0; i < nodePorts.length; i++) {\n                    oldValues_2 = { offsetX: port.offset.x, offsetY: port.offset.y };\n                    break;\n                }\n                for (var i = 0; i < connPorts.length; i++) {\n                    oldValues_2 = { offset: port.offset };\n                    break;\n                }\n            }\n            (0,_primitives_matrix__WEBPACK_IMPORTED_MODULE_8__.rotateMatrix)(matrix, -node.rotateAngle || -node.wrapper.rotateAngle, node.offsetX || node.wrapper.offsetX, node.offsetY || node.wrapper.offsetY);\n            var prevPosition = (0,_primitives_matrix__WEBPACK_IMPORTED_MODULE_8__.transformPointByMatrix)(matrix, { x: this.prevPosition.x, y: this.prevPosition.y });\n            var position = (0,_primitives_matrix__WEBPACK_IMPORTED_MODULE_8__.transformPointByMatrix)(matrix, { x: args.position.x, y: args.position.y });\n            this.commandHandler.portDrag(args.source, args.sourceWrapper, position.x - prevPosition.x, position.y - prevPosition.y);\n            //EJ2-909578: - Position change incorrect event args value for port dragging\n            //Required correction on data type\n            if (port) {\n                for (var i = 0; i < nodePorts.length; i++) {\n                    newValues = { offsetX: port.offset.x, offsetY: port.offset.y };\n                    break;\n                }\n                for (var i = 0; i < connPorts.length; i++) {\n                    newValues = { offset: port.offset };\n                    break;\n                }\n            }\n            var arg_2 = {\n                source: port, state: 'Progress', oldValue: oldValues_2, newValue: newValues,\n                target: args.target, targetPosition: args.position, allowDrop: true, cancel: false\n            };\n            this.commandHandler.triggerEvent(_enum_enum__WEBPACK_IMPORTED_MODULE_9__.DiagramEvent.positionChange, arg_2);\n        }\n        this.prevPosition = this.currentPosition;\n        return !this.blocked;\n    };\n    MoveTool.prototype.getTooltipContent = function (node) {\n        return 'X:' + Math.round(node.wrapper.bounds.x) + ' ' + 'Y:' + Math.round(node.wrapper.bounds.y);\n    };\n    /**\n     * @param args\n     * @private\n     */\n    MoveTool.prototype.mouseLeave = function (args) {\n        this.mouseUp(args);\n    };\n    /**   @private  */\n    MoveTool.prototype.endAction = function () {\n        _super.prototype.endAction.call(this);\n        this.currentTarget = null;\n        this.prevPosition = null;\n    };\n    return MoveTool;\n}(ToolBase));\n\n/**\n * Rotates the selected objects\n */\nvar RotateTool = /** @class */ (function (_super) {\n    __extends(RotateTool, _super);\n    function RotateTool(commandHandler) {\n        var _this = _super.call(this, commandHandler, true) || this;\n        /** @private */\n        _this.rotateStart = false;\n        return _this;\n    }\n    /**\n     * @param args\n     * @private\n     */\n    RotateTool.prototype.mouseDown = function (args) {\n        this.undoElement = (0,_utility_base_util__WEBPACK_IMPORTED_MODULE_4__.cloneObject)(args.source);\n        if (this.undoElement.nodes[0] && this.undoElement.nodes[0].children) {\n            var objects = [];\n            var nodes = this.commandHandler.getAllDescendants(this.undoElement.nodes[0], objects);\n            for (var i = 0; i < nodes.length; i++) {\n                var node = this.commandHandler.cloneChild(nodes[parseInt(i.toString(), 10)].id);\n                this.childTable[nodes[parseInt(i.toString(), 10)].id] = (0,_utility_base_util__WEBPACK_IMPORTED_MODULE_4__.cloneObject)(node);\n            }\n        }\n        _super.prototype.mouseDown.call(this, args);\n    };\n    /**\n     * @param args\n     * @private\n     */\n    RotateTool.prototype.mouseUp = function (args) {\n        return __awaiter(this, void 0, void 0, function () {\n            var object, oldValue, newValue, arg, obj, entry;\n            return __generator(this, function (_a) {\n                this.checkPropertyValue();\n                object = this.commandHandler.renderContainerHelper(args.source) || args.source;\n                if (this.undoElement.rotateAngle !== object.wrapper.rotateAngle) {\n                    oldValue = { rotateAngle: this.undoElement.rotateAngle };\n                    newValue = { rotateAngle: object.wrapper.rotateAngle };\n                    arg = {\n                        source: args.source, state: 'Completed', oldValue: oldValue,\n                        newValue: newValue, cancel: false\n                    };\n                    this.commandHandler.triggerEvent(_enum_enum__WEBPACK_IMPORTED_MODULE_9__.DiagramEvent.rotateChange, arg);\n                    obj = void 0;\n                    obj = (0,_utility_base_util__WEBPACK_IMPORTED_MODULE_4__.cloneObject)(args.source);\n                    entry = {\n                        type: 'RotationChanged', redoObject: (0,_utility_base_util__WEBPACK_IMPORTED_MODULE_4__.cloneObject)(obj), undoObject: (0,_utility_base_util__WEBPACK_IMPORTED_MODULE_4__.cloneObject)(this.undoElement), category: 'Internal',\n                        childTable: this.childTable\n                    };\n                    this.commandHandler.addHistoryEntry(entry);\n                    this.commandHandler.updateSelector();\n                    this.rotateStart = false;\n                }\n                // this.commandHandler.updateBlazorSelector();\n                this.canCancel = undefined;\n                this.tempArgs = undefined;\n                _super.prototype.mouseUp.call(this, args);\n                return [2 /*return*/];\n            });\n        });\n    };\n    /**\n     * @param args\n     * @private\n     */\n    RotateTool.prototype.mouseMove = function (args) {\n        _super.prototype.mouseMove.call(this, args);\n        var object;\n        object = this.commandHandler.renderContainerHelper(args.source) || args.source;\n        if (this.undoElement.rotateAngle === object.wrapper.rotateAngle && !this.rotateStart) {\n            var oldValue_1 = { rotateAngle: object.wrapper.rotateAngle };\n            var arg_3 = {\n                source: args.source, state: 'Start', oldValue: oldValue_1, newValue: oldValue_1, cancel: false\n            };\n            this.commandHandler.triggerEvent(_enum_enum__WEBPACK_IMPORTED_MODULE_9__.DiagramEvent.rotateChange, arg_3);\n            this.rotateStart = true;\n        }\n        this.currentPosition = args.position;\n        var refPoint = { x: object.wrapper.offsetX, y: object.wrapper.offsetY };\n        var angle = _primitives_point__WEBPACK_IMPORTED_MODULE_2__.Point.findAngle(refPoint, this.currentPosition) + 90;\n        var snapAngle = this.commandHandler.snapAngle(angle);\n        angle = snapAngle !== 0 ? snapAngle : angle;\n        angle = (angle + 360) % 360;\n        var oldValue = { rotateAngle: object.wrapper.rotateAngle };\n        var newValue = { rotateAngle: angle };\n        var arg = {\n            source: args.source, state: 'Progress', oldValue: oldValue,\n            newValue: newValue, cancel: false\n        };\n        var arg1 = {\n            source: (0,_utility_diagram_util__WEBPACK_IMPORTED_MODULE_12__.cloneBlazorObject)(args.source), state: 'Progress', oldValue: (0,_utility_diagram_util__WEBPACK_IMPORTED_MODULE_12__.cloneBlazorObject)(oldValue),\n            newValue: (0,_utility_diagram_util__WEBPACK_IMPORTED_MODULE_12__.cloneBlazorObject)(newValue), cancel: arg.cancel\n        };\n        this.commandHandler.triggerEvent(_enum_enum__WEBPACK_IMPORTED_MODULE_9__.DiagramEvent.rotateChange, arg1);\n        if (!arg1.cancel) {\n            this.blocked = !(this.commandHandler.rotateSelectedItems(angle - object.wrapper.rotateAngle));\n        }\n        if (this.commandHandler.canEnableDefaultTooltip()) {\n            var content_3 = this.getTooltipContent(args.source);\n            var contentTemp = function () {\n                return content_3;\n            };\n            this.commandHandler.showTooltip(args.source, args.position, (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_13__.initializeCSPTemplate)(contentTemp), 'RotateTool', this.isTooltipVisible);\n            this.isTooltipVisible = false;\n        }\n        return !this.blocked;\n    };\n    RotateTool.prototype.getTooltipContent = function (node) {\n        return Math.round((node.rotateAngle % 360)).toString() + '\\xB0';\n    };\n    /**\n     * @param args\n     * @private\n     */\n    RotateTool.prototype.mouseLeave = function (args) {\n        this.mouseUp(args);\n    };\n    /**   @private  */\n    RotateTool.prototype.endAction = function () {\n        _super.prototype.endAction.call(this);\n    };\n    return RotateTool;\n}(ToolBase));\n\n/**\n * Scales the selected objects\n */\nvar ResizeTool = /** @class */ (function (_super) {\n    __extends(ResizeTool, _super);\n    function ResizeTool(commandHandler, corner) {\n        var _this = _super.call(this, commandHandler, true) || this;\n        /** @private */\n        _this.resizeStart = false;\n        /**   @private  */\n        _this.initialBounds = new _primitives_rect__WEBPACK_IMPORTED_MODULE_5__.Rect();\n        _this.canCancel = false;\n        _this.corner = corner;\n        return _this;\n    }\n    /**\n     * @param args\n     * @private\n     */\n    ResizeTool.prototype.mouseDown = function (args) {\n        var oldValues;\n        this.undoElement = (0,_utility_base_util__WEBPACK_IMPORTED_MODULE_4__.cloneObject)(args.source);\n        this.undoParentElement = this.commandHandler.getSubProcess(args.source);\n        _super.prototype.mouseDown.call(this, args);\n        if (this.undoElement.nodes[0] && this.undoElement.nodes[0].children) {\n            var elements = [];\n            var nodes = this.commandHandler.getAllDescendants(this.undoElement.nodes[0], elements);\n            for (var i = 0; i < nodes.length; i++) {\n                var node = this.commandHandler.cloneChild(nodes[parseInt(i.toString(), 10)].id);\n                this.childTable[nodes[parseInt(i.toString(), 10)].id] = (0,_utility_base_util__WEBPACK_IMPORTED_MODULE_4__.cloneObject)(node);\n            }\n        }\n        this.commandHandler.checkSelection(args.source, this.corner);\n        _super.prototype.mouseDown.call(this, args);\n        this.initialBounds.x = args.source.wrapper.offsetX;\n        this.initialBounds.y = args.source.wrapper.offsetY;\n        this.initialBounds.height = args.source.wrapper.actualSize.height;\n        this.initialBounds.width = args.source.wrapper.actualSize.width;\n    };\n    /**\n     * @param args\n     * @param isPreventHistory\n     * @param args\n     * @param isPreventHistory\n     * @private\n     */\n    ResizeTool.prototype.mouseUp = function (args, isPreventHistory) {\n        return __awaiter(this, void 0, void 0, function () {\n            var object, deltaValues, oldValue, arg, obj, entry, entry_2;\n            return __generator(this, function (_a) {\n                this.checkPropertyValue();\n                this.commandHandler.removeSnap();\n                this.commandHandler.updateSelector();\n                object = this.commandHandler.renderContainerHelper(args.source) || args.source;\n                if ((this.undoElement.offsetX !== object.wrapper.offsetX || this.undoElement.offsetY !== object.wrapper.offsetY ||\n                    this.undoElement.width !== object.wrapper.bounds.width || this.undoElement.height !== object.wrapper.bounds.height)) {\n                    deltaValues = this.updateSize(args.source, this.currentPosition, this.prevPosition, this.corner, this.initialBounds);\n                    this.blocked = this.scaleObjects(deltaValues.width, deltaValues.height, this.corner, this.currentPosition, this.prevPosition, object);\n                    oldValue = {\n                        width: args.source.wrapper.actualSize.width, height: args.source.wrapper.actualSize.height\n                    };\n                    arg = {\n                        source: (0,_utility_diagram_util__WEBPACK_IMPORTED_MODULE_12__.cloneBlazorObject)(args.source), state: 'Completed',\n                        oldValue: this.startValues, newValue: oldValue, cancel: false\n                    };\n                    this.commandHandler.triggerEvent(_enum_enum__WEBPACK_IMPORTED_MODULE_9__.DiagramEvent.sizeChange, arg);\n                    obj = (0,_utility_base_util__WEBPACK_IMPORTED_MODULE_4__.cloneObject)(args.source);\n                    entry = {\n                        type: 'SizeChanged', redoObject: (0,_utility_base_util__WEBPACK_IMPORTED_MODULE_4__.cloneObject)(obj), undoObject: (0,_utility_base_util__WEBPACK_IMPORTED_MODULE_4__.cloneObject)(this.undoElement), category: 'Internal',\n                        childTable: this.childTable\n                    };\n                    this.resizeStart = false;\n                    if (!isPreventHistory) {\n                        this.commandHandler.startGroupAction();\n                        this.commandHandler.addHistoryEntry(entry);\n                        if (obj.nodes[0] && obj.nodes[0].processId) {\n                            entry_2 = {\n                                type: 'SizeChanged', redoObject: this.commandHandler.getSubProcess(args.source),\n                                undoObject: this.undoParentElement, category: 'Internal'\n                            };\n                            this.commandHandler.addHistoryEntry(entry_2);\n                        }\n                        this.commandHandler.endGroupAction();\n                    }\n                }\n                // this.commandHandler.updateBlazorSelector();\n                _super.prototype.mouseUp.call(this, args);\n                return [2 /*return*/, !this.blocked];\n            });\n        });\n    };\n    /**\n     * @param args\n     * @private\n     */\n    ResizeTool.prototype.mouseMove = function (args) {\n        _super.prototype.mouseMove.call(this, args);\n        var object;\n        object = this.commandHandler.renderContainerHelper(args.source) || args.source;\n        if (this.undoElement.offsetX === object.wrapper.offsetX && this.undoElement.offsetY === object.wrapper.offsetY && !this.resizeStart) {\n            var oldValue = {\n                width: args.source.wrapper.actualSize.width, height: args.source.wrapper.actualSize.height\n            };\n            //EJ2-866122 - Need to enhance the sizeChange Event\n            this.startValues = oldValue;\n            var arg = {\n                source: args.source, state: 'Start', oldValue: oldValue, newValue: this.currentElement, cancel: false\n            };\n            this.commandHandler.triggerEvent(_enum_enum__WEBPACK_IMPORTED_MODULE_9__.DiagramEvent.sizeChange, arg);\n            this.resizeStart = true;\n        }\n        this.currentPosition = args.position;\n        var x = this.currentPosition.x - this.startPosition.x;\n        var y = this.currentPosition.y - this.startPosition.y;\n        var changes = { x: x, y: y };\n        changes = (0,_utility_base_util__WEBPACK_IMPORTED_MODULE_4__.rotatePoint)(-this.currentElement.wrapper.rotateAngle, undefined, undefined, changes);\n        var sx = (this.currentElement.wrapper.actualSize.width + changes.x) / this.currentElement.wrapper.actualSize.width;\n        var sy = (this.currentElement.wrapper.actualSize.height + changes.y) / this.currentElement.wrapper.actualSize.height;\n        changes = this.getChanges(changes);\n        this.commandHandler.removeSnap();\n        var deltaValues = this.updateSize(args.source, this.startPosition, this.currentPosition, this.corner, this.initialBounds);\n        this.blocked = !(this.scaleObjects(deltaValues.width, deltaValues.height, this.corner, this.startPosition, this.currentPosition, object));\n        if (this.commandHandler.canEnableDefaultTooltip()) {\n            var content_4 = this.getTooltipContent(args.source);\n            //Task 834121: Content-Security-Policy support for diagram\n            var contentTemp = function () {\n                return content_4;\n            };\n            this.commandHandler.showTooltip(args.source, args.position, (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_13__.initializeCSPTemplate)(contentTemp), 'ResizeTool', this.isTooltipVisible);\n            this.isTooltipVisible = false;\n        }\n        this.prevPosition = this.currentPosition;\n        return !this.blocked;\n    };\n    /**\n     * @param args\n     * @private\n     */\n    ResizeTool.prototype.mouseLeave = function (args) {\n        this.mouseUp(args);\n    };\n    ResizeTool.prototype.getTooltipContent = function (node) {\n        return 'W:' + Math.round(node.wrapper.bounds.width) + ' ' + 'H:' + Math.round(node.wrapper.bounds.height);\n    };\n    ResizeTool.prototype.getChanges = function (change) {\n        switch (this.corner) {\n            case 'ResizeEast':\n                return { x: change.x, y: 0 };\n            case 'ResizeSouthEast':\n                return change;\n            case 'ResizeSouth':\n                return { x: 0, y: change.y };\n            case 'ResizeNorth':\n                return { x: 0, y: -change.y };\n            case 'ResizeNorthEast':\n                return { x: change.x, y: -change.y };\n            case 'ResizeNorthWest':\n                return { x: -change.x, y: -change.y };\n            case 'ResizeWest':\n                return { x: -change.x, y: 0 };\n            case 'ResizeSouthWest':\n                return { x: -change.x, y: change.y };\n        }\n        return change;\n    };\n    /**\n     * Updates the size with delta width and delta height using scaling.\n     */\n    /**\n     * Aspect ratio used to resize the width or height based on resizing the height or width\n     *\n     * @param deltaWidth\n     * @param deltaHeight\n     * @param corner\n     * @param startPoint\n     * @param endPoint\n     * @param source\n     * @param deltaWidth\n     * @param deltaHeight\n     * @param corner\n     * @param startPoint\n     * @param endPoint\n     * @param source\n     * @param deltaWidth\n     * @param deltaHeight\n     * @param corner\n     * @param startPoint\n     * @param endPoint\n     * @param source\n     * @param deltaWidth\n     * @param deltaHeight\n     * @param corner\n     * @param startPoint\n     * @param endPoint\n     * @param source\n     * @param deltaWidth\n     * @param deltaHeight\n     * @param corner\n     * @param startPoint\n     * @param endPoint\n     * @param source\n     * @param deltaWidth\n     * @param deltaHeight\n     * @param corner\n     * @param startPoint\n     * @param endPoint\n     * @param source\n     */\n    ResizeTool.prototype.scaleObjects = function (deltaWidth, deltaHeight, corner, startPoint, endPoint, source) {\n        if (source instanceof _objects_node__WEBPACK_IMPORTED_MODULE_0__.Selector && source.nodes.length === 1 && source.nodes[0].constraints & _enum_enum__WEBPACK_IMPORTED_MODULE_9__.NodeConstraints.AspectRatio) {\n            if (corner === 'ResizeWest' || corner === 'ResizeEast' || corner === 'ResizeNorth' || corner === 'ResizeSouth') {\n                if (!(deltaHeight === 1 && deltaWidth === 1)) {\n                    deltaHeight = deltaWidth = Math.max(deltaHeight === 1 ? 0 : deltaHeight, deltaWidth === 1 ? 0 : deltaWidth);\n                }\n            }\n            else {\n                deltaHeight = deltaWidth = Math.max(deltaHeight, deltaWidth);\n            }\n        }\n        var oldValue = {\n            width: source.width, height: source.height\n        };\n        this.blocked = this.commandHandler.scaleSelectedItems(deltaWidth, deltaHeight, this.getPivot(this.corner));\n        var newValue = {\n            width: source.width, height: source.height\n        };\n        var arg;\n        arg = { source: source, state: 'Progress', oldValue: oldValue, newValue: newValue, cancel: false };\n        var arg1;\n        arg1 = {\n            source: (0,_utility_diagram_util__WEBPACK_IMPORTED_MODULE_12__.cloneBlazorObject)(source), state: 'Progress',\n            oldValue: (0,_utility_diagram_util__WEBPACK_IMPORTED_MODULE_12__.cloneBlazorObject)(oldValue), newValue: (0,_utility_diagram_util__WEBPACK_IMPORTED_MODULE_12__.cloneBlazorObject)(newValue), cancel: arg.cancel\n        };\n        this.commandHandler.triggerEvent(_enum_enum__WEBPACK_IMPORTED_MODULE_9__.DiagramEvent.sizeChange, arg1);\n        if (arg1.cancel || this.canCancel) {\n            this.commandHandler.scaleSelectedItems(1 / deltaWidth, 1 / deltaHeight, this.getPivot(this.corner));\n        }\n        return this.blocked;\n    };\n    return ResizeTool;\n}(ToolBase));\n\n/**\n * Draws a node that is defined by the user\n */\nvar NodeDrawingTool = /** @class */ (function (_super) {\n    __extends(NodeDrawingTool, _super);\n    function NodeDrawingTool(commandHandler, sourceObject) {\n        var _this = _super.call(this, commandHandler, true) || this;\n        _this.sourceObject = sourceObject;\n        return _this;\n    }\n    /**\n     * @param args\n     * @private\n     */\n    NodeDrawingTool.prototype.mouseDown = function (args) {\n        _super.prototype.mouseDown.call(this, args);\n        this.inAction = true;\n        this.commandHandler.setFocus();\n        this.triggerElementDrawEvent(args.source, 'Start', 'Node', this.getShapeType(), true);\n    };\n    /**\n     * @param args\n     * @private\n     */\n    NodeDrawingTool.prototype.mouseMove = function (args) {\n        _super.prototype.mouseMove.call(this, args);\n        var checkBoundaryConstraints;\n        var node = {\n            offsetX: this.currentPosition.x, width: 3, height: 3,\n            offsetY: this.currentPosition.y\n        };\n        if (!this.drawingObject) {\n            this.drawingObject = this.commandHandler.drawObject(node);\n        }\n        this.triggerElementDrawEvent(this.drawingObject, 'Progress', 'Node', this.getShapeType(), false);\n        if (this.inAction && _primitives_point__WEBPACK_IMPORTED_MODULE_2__.Point.equals(this.currentPosition, this.prevPosition) === false) {\n            var rect = _primitives_rect__WEBPACK_IMPORTED_MODULE_5__.Rect.toBounds([this.prevPosition, this.currentPosition]);\n            checkBoundaryConstraints = this.commandHandler.checkBoundaryConstraints(undefined, undefined, rect);\n            if (checkBoundaryConstraints) {\n                this.commandHandler.updateNodeDimension(this.drawingObject, rect);\n            }\n        }\n        return checkBoundaryConstraints;\n    };\n    /**\n     * @param args\n     * @private\n     */\n    NodeDrawingTool.prototype.mouseUp = function (args) {\n        this.checkPropertyValue();\n        var checkBoundaryConstraints;\n        var rect = _primitives_rect__WEBPACK_IMPORTED_MODULE_5__.Rect.toBounds([this.prevPosition, this.currentPosition]);\n        checkBoundaryConstraints = this.commandHandler.checkBoundaryConstraints(undefined, undefined, rect);\n        if (this.drawingObject && this.drawingObject instanceof _objects_node__WEBPACK_IMPORTED_MODULE_0__.Node) {\n            this.commandHandler.addObjectToDiagram(this.drawingObject);\n            this.triggerElementDrawEvent(this.drawingObject, 'Completed', 'Node', this.getShapeType(), false);\n            this.drawingObject = null;\n        }\n        // this.commandHandler.updateBlazorSelector();\n        _super.prototype.mouseUp.call(this, args);\n        this.inAction = false;\n    };\n    /**   @private  */\n    NodeDrawingTool.prototype.endAction = function () {\n        _super.prototype.endAction.call(this);\n    };\n    /**\n     * @param args\n     * @private\n     */\n    NodeDrawingTool.prototype.mouseLeave = function (args) {\n        if (this.inAction) {\n            this.mouseUp(args);\n        }\n    };\n    return NodeDrawingTool;\n}(ToolBase));\n\n/**\n * Draws a connector that is defined by the user\n */\nvar ConnectorDrawingTool = /** @class */ (function (_super) {\n    __extends(ConnectorDrawingTool, _super);\n    function ConnectorDrawingTool(commandHandler, endPoint, sourceObject) {\n        var _this = _super.call(this, commandHandler, endPoint) || this;\n        _this.sourceObject = sourceObject;\n        return _this;\n    }\n    /**\n     * @param args\n     * @private\n     */\n    ConnectorDrawingTool.prototype.mouseDown = function (args) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                _super.prototype.mouseDown.call(this, args);\n                this.inAction = true;\n                this.commandHandler.setFocus();\n                this.triggerElementDrawEvent(args.source, 'Start', 'Connector', this.commandHandler.diagram.drawingObject.type, true);\n                return [2 /*return*/];\n            });\n        });\n    };\n    /**\n     * @param args\n     * @private\n     */\n    ConnectorDrawingTool.prototype.mouseMove = function (args) {\n        this.commandHandler.enableServerDataBinding(false);\n        if (this.inAction) {\n            var connector = {\n                sourcePoint: this.currentPosition, targetPoint: this.currentPosition\n            };\n            if (!this.drawingObject) {\n                this.drawingObject = this.commandHandler.drawObject(connector);\n            }\n            args.source = this.drawingObject;\n            this.triggerElementDrawEvent(args.source, 'Progress', 'Connector', this.drawingObject.type, false);\n            //Bug 874781: Port Draw Connection is not proper with group node.\n            if (args.actualObject && (args.actualObject.parentId || args.actualObject.children) && this.drawingObject.sourceID === '') {\n                this.setTarget(args);\n            }\n            if (((args.target && args.target instanceof _objects_node__WEBPACK_IMPORTED_MODULE_0__.Node) || (args.actualObject && args.sourceWrapper && (0,_utility_diagram_util__WEBPACK_IMPORTED_MODULE_12__.checkPort)(args.actualObject, args.sourceWrapper)))\n                && (this.endPoint !== 'ConnectorTargetEnd' || ((0,_utility_constraints_util__WEBPACK_IMPORTED_MODULE_7__.canInConnect)(args.target)))) {\n                this.commandHandler.connect(this.endPoint, args);\n            }\n            this.endPoint = 'ConnectorTargetEnd';\n        }\n        if (!this.inAction) {\n            this.commandHandler.updateSelector();\n            //EJ2-899368 : Highlighters for Connector Element Draw with userhandle updated wrongly\n            if (args.source && !args.source.isLane && args.sourceWrapper) {\n                this.commandHandler.renderHighlighter(args, true);\n            }\n        }\n        _super.prototype.mouseMove.call(this, args);\n        this.commandHandler.enableServerDataBinding(true);\n        return !this.blocked;\n    };\n    // Sets the target while drawing connector from the group node port or its children port.\n    ConnectorDrawingTool.prototype.setTarget = function (args) {\n        if (args.target) {\n            if (!args.sourceWrapper.id.includes(args.target.id)) {\n                if (args.target.parentId && args.sourceWrapper.id.includes(args.target.parentId)) {\n                    args.target = this.commandHandler.diagram.nameTable[args.target.parentId];\n                }\n            }\n        }\n        else {\n            if (!args.sourceWrapper.id.includes(args.actualObject.id)) {\n                if (args.actualObject.parentId && args.sourceWrapper.id.includes(args.actualObject.parentId)) {\n                    args.target = this.commandHandler.diagram.nameTable[args.actualObject.parentId];\n                }\n            }\n            else {\n                args.target = args.actualObject;\n            }\n        }\n    };\n    /**\n     * @param args\n     * @private\n     */\n    ConnectorDrawingTool.prototype.mouseUp = function (args) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                this.commandHandler.enableServerDataBinding(false);\n                this.checkPropertyValue();\n                if (this.drawingObject && this.drawingObject instanceof _objects_connector__WEBPACK_IMPORTED_MODULE_1__.Connector) {\n                    this.commandHandler.addObjectToDiagram(this.drawingObject);\n                    this.triggerElementDrawEvent(this.drawingObject, 'Completed', 'Connector', this.drawingObject.type, false);\n                    this.drawingObject = null;\n                }\n                // this.commandHandler.updateBlazorSelector();\n                this.inAction = false;\n                this.commandHandler.enableServerDataBinding(true);\n                _super.prototype.mouseUp.call(this, args);\n                return [2 /*return*/];\n            });\n        });\n    };\n    /**   @private  */\n    ConnectorDrawingTool.prototype.endAction = function () {\n        _super.prototype.endAction.call(this);\n    };\n    /**\n     * @param args\n     * @private\n     */\n    ConnectorDrawingTool.prototype.mouseLeave = function (args) {\n        if (this.inAction) {\n            this.mouseUp(args);\n        }\n    };\n    return ConnectorDrawingTool;\n}(ConnectTool));\n\nvar TextDrawingTool = /** @class */ (function (_super) {\n    __extends(TextDrawingTool, _super);\n    function TextDrawingTool(commandHandler) {\n        return _super.call(this, commandHandler, true) || this;\n    }\n    /**\n     * @param args\n     * @private\n     */\n    TextDrawingTool.prototype.mouseDown = function (args) {\n        _super.prototype.mouseDown.call(this, args);\n        this.commandHandler.clearSelection();\n        var node = {\n            shape: { type: 'Text' },\n            offsetX: this.currentPosition.x,\n            offsetY: this.currentPosition.y\n        };\n        if (!args.source) {\n            this.drawingNode = this.commandHandler.drawObject(node);\n        }\n    };\n    /**\n     * @param args\n     * @private\n     */\n    TextDrawingTool.prototype.mouseMove = function (args) {\n        _super.prototype.mouseMove.call(this, args);\n        if (!this.drawingNode) {\n            var node = {\n                shape: { type: 'Text' }, offsetX: this.currentPosition.x, width: 30, height: 30,\n                // EJ2-42640-Text size is different if Text Node is created over another diagram commited by sivakumar sekar\n                // commanded style property and added it after the object is drawn\n                // style: { strokeDashArray: '2 2', fill: 'transparent' },\n                offsetY: this.currentPosition.y\n            };\n            this.drawingNode = this.commandHandler.drawObject(node);\n            this.drawingNode.style.strokeDashArray = '2 2';\n            this.drawingNode.style.fill = 'transparent';\n        }\n        else {\n            this.drawingNode.style.strokeColor = 'black';\n            this.drawingNode.style.strokeDashArray = '2 2';\n            this.drawingNode.style.fill = 'transparent';\n        }\n        if (this.inAction && _primitives_point__WEBPACK_IMPORTED_MODULE_2__.Point.equals(this.currentPosition, this.prevPosition) === false) {\n            var rect = _primitives_rect__WEBPACK_IMPORTED_MODULE_5__.Rect.toBounds([this.prevPosition, this.currentPosition]);\n            this.commandHandler.updateNodeDimension(this.drawingNode, rect);\n        }\n        return !this.blocked;\n    };\n    /**\n     * @param args\n     * @private\n     */\n    TextDrawingTool.prototype.mouseUp = function (args) {\n        this.checkPropertyValue();\n        if (this.drawingNode) {\n            this.drawingNode.style.strokeColor = 'none';\n            this.drawingNode.style.fill = 'none';\n        }\n        else {\n            this.drawingNode = args.source;\n        }\n        if (this.drawingNode && (this.drawingNode instanceof _objects_node__WEBPACK_IMPORTED_MODULE_0__.Node)) {\n            this.commandHandler.addText(this.drawingNode, this.currentPosition);\n        }\n        _super.prototype.mouseUp.call(this, args);\n        this.inAction = false;\n    };\n    /**   @private  */\n    TextDrawingTool.prototype.endAction = function () {\n        _super.prototype.endAction.call(this);\n    };\n    return TextDrawingTool;\n}(ToolBase));\n\n/**\n * Pans the diagram control on drag\n */\nvar ZoomPanTool = /** @class */ (function (_super) {\n    __extends(ZoomPanTool, _super);\n    function ZoomPanTool(commandHandler, zoom) {\n        var _this = _super.call(this, commandHandler) || this;\n        _this.zooming = zoom;\n        return _this;\n    }\n    /**\n     * @param args\n     * @private\n     */\n    ZoomPanTool.prototype.mouseDown = function (args) {\n        _super.prototype.mouseDown.call(this, args);\n        this.inAction = true;\n        this.commandHandler.setBlazorDiagramProps(true);\n    };\n    /**\n     * @param args\n     * @private\n     */\n    ZoomPanTool.prototype.mouseMove = function (args) {\n        _super.prototype.mouseMove.call(this, args);\n        if (this.inAction) {\n            if (!this.zooming && _primitives_point__WEBPACK_IMPORTED_MODULE_2__.Point.equals(this.currentPosition, this.prevPosition) === false) {\n                var difX = this.currentPosition.x - this.prevPosition.x;\n                var difY = this.currentPosition.y - this.prevPosition.y;\n                this.commandHandler.scroll(difX, difY, this.currentPosition);\n            }\n            else if (args.moveTouches && args.moveTouches.length && args.moveTouches.length >= 2) {\n                var startTouch0 = args.startTouches[0];\n                var startTouch1 = args.startTouches[1];\n                var moveTouch0 = args.moveTouches[0];\n                var moveTouch1 = args.moveTouches[1];\n                var scale = this.getDistance(moveTouch0, moveTouch1) / this.getDistance(startTouch0, startTouch1);\n                var focusPoint = args.position;\n                // 927527: Diagram flickers while performing pinch zoom\n                if (scale !== 1) {\n                    this.commandHandler.zoom(scale, 0, 0, focusPoint);\n                }\n                this.updateTouch(startTouch0, moveTouch0);\n                this.updateTouch(startTouch1, moveTouch1);\n            }\n        }\n        this.commandHandler.dataBinding();\n        return !this.blocked;\n    };\n    /**\n     * @param args\n     * @private\n     */\n    ZoomPanTool.prototype.mouseUp = function (args) {\n        this.commandHandler.setBlazorDiagramProps(false);\n        this.checkPropertyValue();\n        this.commandHandler.updatePanState(false);\n        _super.prototype.mouseUp.call(this, args);\n        this.inAction = false;\n    };\n    /**   @private  */\n    ZoomPanTool.prototype.endAction = function () {\n        _super.prototype.endAction.call(this);\n    };\n    ZoomPanTool.prototype.getDistance = function (touch1, touch2) {\n        var x = touch2.pageX - touch1.pageX;\n        var y = touch2.pageY - touch1.pageY;\n        return Math.sqrt((x * x) + (y * y));\n    };\n    ZoomPanTool.prototype.updateTouch = function (startTouch, moveTouch) {\n        startTouch.pageX = moveTouch.pageX;\n        startTouch.pageY = moveTouch.pageY;\n    };\n    return ZoomPanTool;\n}(ToolBase));\n\n/**\n * Animate the layout during expand and collapse\n */\nvar ExpandTool = /** @class */ (function (_super) {\n    __extends(ExpandTool, _super);\n    function ExpandTool(commandHandler) {\n        return _super.call(this, commandHandler, true) || this;\n    }\n    /**\n     * @param args\n     * @private\n     */\n    ExpandTool.prototype.mouseUp = function (args) {\n        this.checkPropertyValue();\n        this.commandHandler.initExpand(args);\n        _super.prototype.mouseUp.call(this, args);\n    };\n    return ExpandTool;\n}(ToolBase));\n\n/**\n * Opens the annotation hypeLink at mouse up\n */\nvar LabelTool = /** @class */ (function (_super) {\n    __extends(LabelTool, _super);\n    function LabelTool(commandHandler) {\n        return _super.call(this, commandHandler, true) || this;\n    }\n    /**\n     * @param args\n     * @private\n     */\n    LabelTool.prototype.mouseUp = function (args) {\n        this.checkPropertyValue();\n        var tab = '_blank';\n        var windowOption = '';\n        var windowHeight = window.innerHeight;\n        var windowWidth = window.innerWidth;\n        var screenTop = window.screenTop;\n        var screenLeft = window.screenLeft;\n        if (args.sourceWrapper.hyperlink.hyperlinkOpenState === 'CurrentTab') {\n            tab = '_self';\n        }\n        else if (args.sourceWrapper.hyperlink.hyperlinkOpenState === 'NewWindow') {\n            windowOption = 'height=' + windowHeight + ',width=' + windowWidth + ',top=' + screenTop + ',left=' + screenLeft;\n        }\n        var win = window.open(args.sourceWrapper.hyperlink.link, tab, windowOption);\n        win.focus();\n        _super.prototype.mouseUp.call(this, args);\n    };\n    return LabelTool;\n}(ToolBase));\n\n/**\n * Draws a Polygon shape node dynamically using polygon Tool\n */\nvar PolygonDrawingTool = /** @class */ (function (_super) {\n    __extends(PolygonDrawingTool, _super);\n    function PolygonDrawingTool(commandHandler) {\n        return _super.call(this, commandHandler, true) || this;\n    }\n    /**\n     * @param args\n     * @private\n     */\n    PolygonDrawingTool.prototype.mouseDown = function (args) {\n        _super.prototype.mouseDown.call(this, args);\n        this.inAction = true;\n        if (!this.drawingObject) {\n            this.startPoint = { x: this.startPosition.x, y: this.startPosition.y };\n            var node = {\n                offsetX: this.currentPosition.x,\n                offsetY: this.currentPosition.y,\n                width: 5, height: 5,\n                // 916722: Apply custom style to polygon shape by removing the default style during polygon drawing.\n                shape: {\n                    type: 'Basic',\n                    shape: 'Polygon',\n                    points: [{ x: this.startPoint.x, y: this.startPoint.y }, { x: this.currentPosition.x, y: this.currentPosition.y }]\n                }\n            };\n            // 920152: elementDraw event not triggered for Polygon Drawing tool\n            this.triggerElementDrawEvent(args.source, 'Start', 'Node', this.getShapeType(), true);\n            this.drawingObject = this.commandHandler.drawObject(node);\n        }\n        else {\n            var pt = void 0;\n            var obj = this.drawingObject.shape;\n            pt = obj.points[obj.points.length - 1];\n            pt = { x: pt.x, y: pt.y };\n            this.drawingObject.shape.points.push(pt);\n        }\n    };\n    /**\n     * @param args\n     * @private\n     */\n    PolygonDrawingTool.prototype.mouseMove = function (args) {\n        _super.prototype.mouseMove.call(this, args);\n        if (this.inAction) {\n            var obj = this.drawingObject.shape;\n            obj.points[obj.points.length - 1].x = this.currentPosition.x;\n            obj.points[obj.points.length - 1].y = this.currentPosition.y;\n            this.drawingObject.wrapper.children[0].data = (0,_utility_path_util__WEBPACK_IMPORTED_MODULE_6__.getPolygonPath)(this.drawingObject.shape.points);\n            // 920152: elementDraw event not triggered for Polygon Drawing tool\n            this.triggerElementDrawEvent(this.drawingObject, 'Progress', 'Node', this.getShapeType(), false);\n            if (this.inAction && _primitives_point__WEBPACK_IMPORTED_MODULE_2__.Point.equals(this.currentPosition, this.prevPosition) === false) {\n                var region = _primitives_rect__WEBPACK_IMPORTED_MODULE_5__.Rect.toBounds(this.drawingObject.shape.points);\n                this.commandHandler.updateNodeDimension(this.drawingObject, region);\n            }\n        }\n        return true;\n    };\n    /**\n     * @param args\n     * @param dblClickArgs\n     * @param args\n     * @param dblClickArgs\n     * @private\n     */\n    PolygonDrawingTool.prototype.mouseUp = function (args, dblClickArgs) {\n        this.checkPropertyValue();\n        _super.prototype.mouseMove.call(this, args);\n        if (this.inAction) {\n            this.inAction = false;\n            this.commandHandler.addObjectToDiagram(this.drawingObject);\n            // 920152: elementDraw event not triggered for Polygon Drawing tool\n            this.triggerElementDrawEvent(this.drawingObject, 'Completed', 'Node', this.getShapeType(), false);\n        }\n        this.endAction();\n    };\n    /**\n     * @param args\n     * @private\n     */\n    PolygonDrawingTool.prototype.mouseWheel = function (args) {\n        _super.prototype.mouseWheel.call(this, args);\n        this.mouseMove(args);\n    };\n    /**   @private  */\n    PolygonDrawingTool.prototype.endAction = function () {\n        this.inAction = false;\n        this.drawingObject = null;\n    };\n    return PolygonDrawingTool;\n}(ToolBase));\n\n/**\n * Draws a PolyLine Connector dynamically using PolyLine Drawing Tool\n */\nvar PolyLineDrawingTool = /** @class */ (function (_super) {\n    __extends(PolyLineDrawingTool, _super);\n    function PolyLineDrawingTool(commandHandler) {\n        return _super.call(this, commandHandler, true) || this;\n    }\n    /**\n     * @param args\n     * @private\n     */\n    PolyLineDrawingTool.prototype.mouseMove = function (args) {\n        _super.prototype.mouseMove.call(this, args);\n        if (this.inAction) {\n            var obj = this.drawingObject;\n            obj.targetPoint = this.currentPosition;\n            // 920152: elementDraw event not triggered for Polyline Drawing tool\n            // 927554: ElementDraw Arguments updated wrongly for Polyline drawing\n            this.triggerElementDrawEvent(this.drawingObject, 'Progress', 'Connector', this.commandHandler.diagram.drawingObject.type, false);\n            this.commandHandler.updateConnectorPoints(obj);\n        }\n        return true;\n    };\n    /**\n     * @param args\n     * @private\n     */\n    PolyLineDrawingTool.prototype.mouseDown = function (args) {\n        _super.prototype.mouseDown.call(this, args);\n        this.inAction = true;\n        if (!this.drawingObject) {\n            var connector = {\n                id: 'Connector',\n                type: 'Straight',\n                sourcePoint: this.currentPosition,\n                targetPoint: this.currentPosition\n            };\n            // 920152: elementDraw event not triggered for Polyline Drawing tool\n            this.triggerElementDrawEvent(args.source, 'Start', 'Connector', this.commandHandler.diagram.drawingObject.type, true);\n            if (this.inAction) {\n                this.drawingObject = this.commandHandler.drawObject(connector);\n            }\n        }\n        else {\n            var drawObject = this.drawingObject;\n            var segment = void 0;\n            segment = new _objects_connector__WEBPACK_IMPORTED_MODULE_1__.StraightSegment(drawObject, 'segments', { type: 'Straight' }, true);\n            segment.point = this.currentPosition;\n            drawObject.segments[drawObject.segments.length - 1] = segment;\n        }\n    };\n    /**\n     * @param args\n     * @private\n     */\n    PolyLineDrawingTool.prototype.mouseWheel = function (args) {\n        _super.prototype.mouseWheel.call(this, args);\n        this.mouseMove(args);\n    };\n    /**\n     * @param args\n     * @private\n     */\n    PolyLineDrawingTool.prototype.mouseUp = function (args) {\n        this.checkPropertyValue();\n        _super.prototype.mouseMove.call(this, args);\n        if (this.inAction) {\n            if (this.drawingObject) {\n                var drawObject = this.drawingObject;\n                drawObject.segments[drawObject.segments.length - 1].point = { x: 0, y: 0 };\n                this.commandHandler.addObjectToDiagram(this.drawingObject);\n                // 920152: elementDraw event not triggered for Polyline Drawing tool\n                // 927554: ElementDraw Arguments updated wrongly for Polyline drawing\n                this.triggerElementDrawEvent(this.drawingObject, 'Completed', 'Connector', this.commandHandler.diagram.drawingObject.type, false);\n            }\n        }\n        this.endAction();\n    };\n    /**   @private  */\n    PolyLineDrawingTool.prototype.endAction = function () {\n        this.drawingObject = null;\n        this.inAction = false;\n    };\n    return PolyLineDrawingTool;\n}(ToolBase));\n\nvar LabelDragTool = /** @class */ (function (_super) {\n    __extends(LabelDragTool, _super);\n    function LabelDragTool(commandHandler) {\n        return _super.call(this, commandHandler, true) || this;\n    }\n    /**\n     * @param args\n     * @private\n     */\n    LabelDragTool.prototype.mouseDown = function (args) {\n        this.inAction = true;\n        this.undoElement = (0,_utility_base_util__WEBPACK_IMPORTED_MODULE_4__.cloneObject)(args.source);\n        this.annotationId = args.sourceWrapper.id;\n        _super.prototype.mouseDown.call(this, args);\n    };\n    /**\n     * @param args\n     * @private\n     */\n    LabelDragTool.prototype.mouseMove = function (args) {\n        _super.prototype.mouseMove.call(this, args);\n        var difx = this.currentPosition.x - this.prevPosition.x;\n        var dify = this.currentPosition.y - this.prevPosition.y;\n        var node = args.source;\n        if (node instanceof _objects_node__WEBPACK_IMPORTED_MODULE_0__.Node) {\n            var matrix = (0,_primitives_matrix__WEBPACK_IMPORTED_MODULE_8__.identityMatrix)();\n            (0,_primitives_matrix__WEBPACK_IMPORTED_MODULE_8__.rotateMatrix)(matrix, -node.rotateAngle, 0, 0);\n            var diff = (0,_primitives_matrix__WEBPACK_IMPORTED_MODULE_8__.transformPointByMatrix)(matrix, { x: difx, y: dify });\n            difx = diff.x;\n            dify = diff.y;\n        }\n        if (this.inAction) {\n            this.commandHandler.labelDrag(args.source, args.sourceWrapper, difx, dify);\n            this.commandHandler.updateSelector();\n        }\n        this.prevPosition = this.currentPosition;\n        return !this.blocked;\n    };\n    /**\n     * @param args\n     * @private\n     */\n    LabelDragTool.prototype.mouseUp = function (args) {\n        this.checkPropertyValue();\n        var redoValue = args.source;\n        this.inAction = false;\n        var entryValue = {\n            type: 'AnnotationPropertyChanged',\n            objectId: this.annotationId, undoObject: (0,_utility_base_util__WEBPACK_IMPORTED_MODULE_4__.cloneObject)(this.undoElement),\n            category: 'Internal', redoObject: (0,_utility_base_util__WEBPACK_IMPORTED_MODULE_4__.cloneObject)(redoValue)\n        };\n        this.commandHandler.addHistoryEntry(entryValue);\n        _super.prototype.mouseUp.call(this, args);\n    };\n    /**\n     * @param args\n     * @private\n     */\n    LabelDragTool.prototype.mouseLeave = function (args) {\n        this.mouseUp(args);\n    };\n    return LabelDragTool;\n}(ToolBase));\n\nvar LabelResizeTool = /** @class */ (function (_super) {\n    __extends(LabelResizeTool, _super);\n    function LabelResizeTool(commandHandler, corner) {\n        var _this = _super.call(this, commandHandler, true) || this;\n        _this.corner = corner;\n        return _this;\n    }\n    /**\n     * @param args\n     * @private\n     */\n    LabelResizeTool.prototype.mouseDown = function (args) {\n        this.inAction = true;\n        var object = (args.source.nodes.length) ?\n            args.source.nodes[0] : args.source.connectors[0];\n        this.annotationId = args.source.wrapper.children[0].id;\n        this.undoElement = (0,_utility_base_util__WEBPACK_IMPORTED_MODULE_4__.cloneObject)(object);\n        var annotation = args.source.wrapper.children[0];\n        this.initialBounds = {\n            x: annotation.offsetX,\n            y: annotation.offsetY,\n            width: annotation.actualSize.width,\n            height: annotation.actualSize.height\n        };\n        _super.prototype.mouseDown.call(this, args);\n    };\n    /**\n     * @param args\n     * @private\n     */\n    LabelResizeTool.prototype.mouseMove = function (args) {\n        _super.prototype.mouseMove.call(this, args);\n        if (this.inAction) {\n            this.resizeObject(args);\n        }\n        return !this.blocked;\n    };\n    /**\n     * @param args\n     * @private\n     */\n    LabelResizeTool.prototype.mouseUp = function (args) {\n        this.checkPropertyValue();\n        var redoObject = (args.source.nodes.length) ?\n            args.source.nodes[0] : args.source.connectors[0];\n        this.inAction = false;\n        var entry = {\n            type: 'AnnotationPropertyChanged', objectId: this.annotationId,\n            redoObject: (0,_utility_base_util__WEBPACK_IMPORTED_MODULE_4__.cloneObject)(redoObject), undoObject: (0,_utility_base_util__WEBPACK_IMPORTED_MODULE_4__.cloneObject)(this.undoElement), category: 'Internal'\n        };\n        this.commandHandler.addHistoryEntry(entry);\n        _super.prototype.mouseUp.call(this, args);\n    };\n    /**\n     * @param args\n     * @private\n     */\n    LabelResizeTool.prototype.mouseLeave = function (args) {\n        this.mouseUp(args);\n    };\n    /**\n     * @param args\n     * @private\n     */\n    LabelResizeTool.prototype.resizeObject = function (args) {\n        var object;\n        object = (args.source.nodes.length) ? args.source.nodes[0] : args.source.connectors[0];\n        var textElement = args.source.wrapper.children[0];\n        var deltaWidth;\n        var deltaHeight;\n        var center = { x: textElement.offsetX, y: textElement.offsetY };\n        var rotateAngle = textElement.rotateAngle;\n        rotateAngle += (object instanceof _objects_node__WEBPACK_IMPORTED_MODULE_0__.Node) ? object.rotateAngle : 0;\n        rotateAngle = (rotateAngle + 360) % 360;\n        var trans = (0,_primitives_matrix__WEBPACK_IMPORTED_MODULE_8__.identityMatrix)();\n        (0,_primitives_matrix__WEBPACK_IMPORTED_MODULE_8__.rotateMatrix)(trans, rotateAngle, center.x, center.y);\n        var corner = this.corner.slice(5);\n        var pivot = this.updateSize(textElement, this.startPosition, this.currentPosition, corner, this.initialBounds, rotateAngle);\n        var x = textElement.offsetX - textElement.actualSize.width * textElement.pivot.x;\n        var y = textElement.offsetY - textElement.actualSize.height * textElement.pivot.y;\n        var pivotPoint = this.getPivot(corner);\n        pivotPoint = { x: x + textElement.actualSize.width * pivotPoint.x, y: y + textElement.actualSize.height * pivotPoint.y };\n        var point = (0,_primitives_matrix__WEBPACK_IMPORTED_MODULE_8__.transformPointByMatrix)(trans, pivotPoint);\n        pivot.x = point.x;\n        pivot.y = point.y;\n        deltaWidth = pivot.width;\n        deltaHeight = pivot.height;\n        deltaWidth = (deltaWidth < 0) ? 1 : deltaWidth;\n        deltaHeight = (deltaHeight < 0) ? 1 : deltaHeight;\n        this.commandHandler.labelResize(object, args.source.annotation, deltaWidth, deltaHeight, pivot, args.source);\n        this.commandHandler.updateSelector();\n    };\n    return LabelResizeTool;\n}(ToolBase));\n\nvar LabelRotateTool = /** @class */ (function (_super) {\n    __extends(LabelRotateTool, _super);\n    function LabelRotateTool(commandHandler) {\n        return _super.call(this, commandHandler, true) || this;\n    }\n    /**\n     * @param args\n     * @private\n     */\n    LabelRotateTool.prototype.mouseDown = function (args) {\n        this.inAction = true;\n        this.annotationId = args.source.wrapper.children[0].id;\n        var object = (args.source.nodes.length) ?\n            args.source.nodes[0] : args.source.connectors[0];\n        this.undoElement = (0,_utility_base_util__WEBPACK_IMPORTED_MODULE_4__.cloneObject)(object);\n        _super.prototype.mouseDown.call(this, args);\n    };\n    /**\n     * @param args\n     * @private\n     */\n    LabelRotateTool.prototype.mouseMove = function (args) {\n        _super.prototype.mouseMove.call(this, args);\n        if (args.source) {\n            if (this.inAction) {\n                var object = args.source.nodes[0] ? args.source.nodes[0] :\n                    args.source.connectors[0];\n                var annotation = void 0;\n                annotation = (args.source.annotation);\n                this.commandHandler.labelRotate(object, annotation, this.currentPosition, args.source);\n                this.commandHandler.updateSelector();\n            }\n        }\n        this.prevPosition = this.currentPosition;\n        return !this.blocked;\n    };\n    /**\n     * @param args\n     * @private\n     */\n    LabelRotateTool.prototype.mouseUp = function (args) {\n        this.checkPropertyValue();\n        this.inAction = false;\n        var redoEntry = (args.source.nodes.length) ?\n            args.source.nodes[0] : args.source.connectors[0];\n        var entryObject = {\n            type: 'AnnotationPropertyChanged', objectId: this.annotationId,\n            redoObject: (0,_utility_base_util__WEBPACK_IMPORTED_MODULE_4__.cloneObject)(redoEntry),\n            undoObject: (0,_utility_base_util__WEBPACK_IMPORTED_MODULE_4__.cloneObject)(this.undoElement), category: 'Internal'\n        };\n        this.commandHandler.addHistoryEntry(entryObject);\n        _super.prototype.mouseUp.call(this, args);\n    };\n    /**\n     * @param args\n     * @private\n     */\n    LabelRotateTool.prototype.mouseLeave = function (args) {\n        this.mouseUp(args);\n    };\n    return LabelRotateTool;\n}(ToolBase));\n\n/**\n * EJ2-33302 - Freehand drawing support in diagram control.\n */\nvar FreeHandTool = /** @class */ (function (_super) {\n    __extends(FreeHandTool, _super);\n    function FreeHandTool(commandHandler) {\n        return _super.call(this, commandHandler, true) || this;\n    }\n    /**\n     * mouseMove - Collect the points using current mouse position and convert it into pathData.\n     * @param args\n     * @private\n     */\n    FreeHandTool.prototype.mouseMove = function (args) {\n        _super.prototype.mouseMove.call(this, args);\n        if (this.inAction) {\n            var obj = this.drawingObject.shape;\n            var pt = this.currentPosition;\n            obj.points.push(pt);\n            this.drawingObject.wrapper.children[0].data = (0,_utility_path_util__WEBPACK_IMPORTED_MODULE_6__.getFreeHandPath)(this.drawingObject.shape.points);\n            obj.data = (0,_utility_path_util__WEBPACK_IMPORTED_MODULE_6__.getFreeHandPath)(obj.points);\n            // 920152: elementDraw event not triggered for Freehand Drawing tool\n            this.triggerElementDrawEvent(args.source, 'Progress', 'Connector', this.drawingObject.type, false);\n            if (this.inAction && _primitives_point__WEBPACK_IMPORTED_MODULE_2__.Point.equals(this.currentPosition, this.prevPosition) === false) {\n                var region = _primitives_rect__WEBPACK_IMPORTED_MODULE_5__.Rect.toBounds(this.drawingObject.shape.points);\n                this.commandHandler.updateNodeDimension(this.drawingObject, region);\n            }\n        }\n        return true;\n    };\n    /**\n     * @param args\n     * @private\n     */\n    FreeHandTool.prototype.mouseDown = function (args) {\n        _super.prototype.mouseDown.call(this, args);\n        this.inAction = true;\n        this.startPoint = { x: this.startPosition.x, y: this.startPosition.y };\n        var node = {\n            offsetX: this.currentPosition.x,\n            offsetY: this.currentPosition.y,\n            width: 5, height: 5,\n            style: { strokeColor: 'black', strokeWidth: 1, fill: 'transparent' },\n            shape: {\n                type: 'Path',\n                points: [{ x: this.startPoint.x, y: this.startPoint.y }, { x: this.currentPosition.x, y: this.currentPosition.y }]\n            }\n        };\n        // 920152: elementDraw event not triggered for Freehand Drawing tool\n        this.triggerElementDrawEvent(args.source, 'Start', 'Connector', this.commandHandler.diagram.drawingObject.type, true);\n        this.drawingObject = this.commandHandler.drawObject(node);\n    };\n    /**\n     * mouseUp - Remove the drawn object. Reduce and smoothen the collected points and create\n     * a bezier connector using the smoothened points.\n     * @param args\n     * @private\n     */\n    FreeHandTool.prototype.mouseUp = function (args) {\n        this.checkPropertyValue();\n        var tolerance = 10;\n        var smoothValue = 0.5;\n        if (this.inAction) {\n            this.inAction = false;\n            var obj = this.drawingObject.shape;\n            var points = obj.points;\n            this.commandHandler.addObjectToDiagram(this.drawingObject);\n            var prevId = this.drawingObject.id;\n            var prevObj = this.commandHandler.diagram.nameTable[\"\" + prevId];\n            this.commandHandler.diagram.remove(prevObj);\n            points = this.pointReduction(points, tolerance);\n            // 927557: controlPointsVisibility Property values not considered in Freehand drawing\n            var bezierSettings = {};\n            if (this.commandHandler.diagram.drawingObject.bezierSettings) {\n                bezierSettings = this.commandHandler.diagram.drawingObject.bezierSettings;\n            }\n            if (bezierSettings.allowSegmentsReset === undefined) {\n                bezierSettings.allowSegmentsReset = false;\n            }\n            //EJ2-69816 - Added below code to set the allow segment reset as false to avoid the unwanted segment reset.\n            var newObj = {\n                id: 'newConnector' + (0,_utility_base_util__WEBPACK_IMPORTED_MODULE_4__.randomId)(), type: 'Bezier',\n                sourcePoint: { x: points[0].x, y: points[0].y }, targetPoint: { x: points[points.length - 1].x, y: points[points.length - 1].y },\n                //EJ2-873504[BUG]- Source and target decorator for free hand connector is not rendered.\n                segments: [], bezierSettings: bezierSettings\n            };\n            this.drawingObject = this.commandHandler.drawObject(newObj);\n            this.drawingObject = this.bezierCurveSmoothness(points, smoothValue, this.drawingObject, obj);\n            this.commandHandler.updateConnectorPoints(this.drawingObject);\n            this.commandHandler.addObjectToDiagram(this.drawingObject);\n            // 920152: elementDraw event not triggered for Freehand Drawing tool\n            // 927554: ElementDraw Arguments updated wrongly for Freehand drawing\n            this.triggerElementDrawEvent(this.drawingObject, 'Completed', 'Connector', this.commandHandler.diagram.drawingObject.type, false);\n            //(EJ2-70838)- Added code to resolve style property not added dynamically for freehand connector\n            // Added code to resolve style property not added dynamically for freehand connector\n            _super.prototype.mouseUp.call(this, args);\n        }\n    };\n    /**\n     * Reduce the collected points based on tolerance value.\n     * @param points\n     * @param tolerance\n     * @returns points\n     */\n    FreeHandTool.prototype.pointReduction = function (points, tolerance) {\n        if (points === null || points.length < 3) {\n            return points;\n        }\n        var firstPoint = 0;\n        var lastPoint = points.length - 1;\n        var pointIndex = [];\n        pointIndex.push(firstPoint);\n        pointIndex.push(lastPoint);\n        while (points[parseInt(firstPoint.toString(), 10)] === (points[parseInt(lastPoint.toString(), 10)])) {\n            lastPoint--;\n        }\n        this.reduction(points, firstPoint, lastPoint, tolerance, pointIndex);\n        var returnedPoints = [];\n        pointIndex.sort(function (a, b) { return a - b; });\n        pointIndex.forEach(function (element) {\n            returnedPoints.push(points[parseInt(element.toString(), 10)]);\n        });\n        return returnedPoints;\n    };\n    FreeHandTool.prototype.reduction = function (points, firstPoint, lastPoint, tolerance, pointIndex) {\n        var maxDistance = 0;\n        var largestPointIndex = 0;\n        for (var i = firstPoint; i < lastPoint; i++) {\n            var distance = this.perpendicularDistance(points[parseInt(firstPoint.toString(), 10)], points[parseInt(lastPoint.toString(), 10)], points[parseInt(i.toString(), 10)]);\n            if (distance > maxDistance) {\n                maxDistance = distance;\n                largestPointIndex = i;\n            }\n        }\n        if (maxDistance > tolerance && largestPointIndex !== 0) {\n            pointIndex.push(largestPointIndex);\n            this.reduction(points, firstPoint, largestPointIndex, tolerance, pointIndex);\n            this.reduction(points, largestPointIndex, lastPoint, tolerance, pointIndex);\n        }\n    };\n    /**\n     * Calculate the perpendicular distance of each point with first and last points\n     * @param point1\n     * @param point2\n     * @param point3\n     * @returns\n     */\n    FreeHandTool.prototype.perpendicularDistance = function (point1, point2, point3) {\n        var area = Math.abs(.5 * ((point1.x * point2.y - point2.x * point1.y) +\n            (point2.x * point3.y - point3.x * point2.y) + (point3.x * point1.y - point1.x * point3.y)));\n        var base = Math.sqrt(Math.pow(point1.x - point2.x, 2) + Math.pow(point1.y - point2.y, 2));\n        var height = area / base * 2;\n        return height;\n    };\n    /**\n     * Smoothen the bezier curve based on the points and smoothValue.\n     * @param points\n     * @param smoothValue\n     * @param drawingObject\n     * @param obj\n     * @returns drawingObject\n     */\n    FreeHandTool.prototype.bezierCurveSmoothness = function (points, smoothValue, drawingObject, obj) {\n        if (points.length < 3) {\n            return drawingObject;\n        }\n        for (var i = 0; i < points.length - 1; i++) {\n            var pointx1 = points[parseInt(i.toString(), 10)].x;\n            var pointy1 = points[parseInt(i.toString(), 10)].y;\n            var pointx2 = points[i + 1].x;\n            var pointy2 = points[i + 1].y;\n            var pointx0 = void 0;\n            var pointy0 = void 0;\n            if (i === 0) {\n                var previousPoint = points[parseInt(i.toString(), 10)];\n                pointx0 = previousPoint.x;\n                pointy0 = previousPoint.y;\n            }\n            else {\n                pointx0 = points[i - 1].x;\n                pointy0 = points[i - 1].y;\n            }\n            var pointx3 = void 0;\n            var pointy3 = void 0;\n            if (i === points.length - 2) {\n                var nextPoint = points[i + 1];\n                pointx3 = nextPoint.x;\n                pointy3 = nextPoint.y;\n            }\n            else {\n                pointx3 = points[i + 2].x;\n                pointy3 = points[i + 2].y;\n            }\n            var xc1 = (pointx0 + pointx1) / 2.0;\n            var yc1 = (pointy0 + pointy1) / 2.0;\n            var xc2 = (pointx1 + pointx2) / 2.0;\n            var yc2 = (pointy1 + pointy2) / 2.0;\n            var xc3 = (pointx2 + pointx3) / 2.0;\n            var yc3 = (pointy2 + pointy3) / 2.0;\n            var point0 = {};\n            var point1 = {};\n            var point2 = {};\n            var point3 = {};\n            point0.x = pointx0;\n            point0.y = pointy0;\n            point1.x = pointx1;\n            point1.y = pointy1;\n            point2.x = pointx2;\n            point2.y = pointy2;\n            point3.x = pointx3;\n            point3.y = pointy3;\n            var len1 = _primitives_point__WEBPACK_IMPORTED_MODULE_2__.Point.findLength(point0, point1);\n            var len2 = _primitives_point__WEBPACK_IMPORTED_MODULE_2__.Point.findLength(point1, point2);\n            var len3 = _primitives_point__WEBPACK_IMPORTED_MODULE_2__.Point.findLength(point2, point3);\n            var k1 = len1 / (len1 + len2);\n            var k2 = len2 / (len2 + len3);\n            var xm1 = xc1 + (xc2 - xc1) * k1;\n            var ym1 = yc1 + (yc2 - yc1) * k1;\n            var xm2 = xc2 + (xc3 - xc2) * k2;\n            var ym2 = yc2 + (yc3 - yc2) * k2;\n            var Controlpointx1 = xm1 + (xc2 - xm1) * smoothValue + pointx1 - xm1;\n            var Controlpointy1 = ym1 + (yc2 - ym1) * smoothValue + pointy1 - ym1;\n            var Controlpointx2 = xm2 + (xc2 - xm2) * smoothValue + pointx2 - xm2;\n            var Controlpointy2 = ym2 + (yc2 - ym2) * smoothValue + pointy2 - ym2;\n            var segment = new _objects_connector__WEBPACK_IMPORTED_MODULE_1__.BezierSegment(obj, 'segments', { type: 'Bezier' }, true);\n            var cnPt1 = { x: Controlpointx1, y: Controlpointy1 };\n            var cnPt2 = { x: Controlpointx2, y: Controlpointy2 };\n            var segSourcePoint = { x: pointx1, y: pointy1 };\n            var segTargetPoint = { x: pointx2, y: pointy2 };\n            segment.type = 'Bezier';\n            drawingObject.segments[parseInt(i.toString(), 10)] = segment;\n            if (i === 0) {\n                cnPt1 = { x: pointx1, y: pointy1 };\n            }\n            if (i === points.length - 2) {\n                cnPt2 = { x: pointx2, y: pointy2 };\n            }\n            drawingObject.segments[parseInt(i.toString(), 10)].vector1 = { angle: (0,_utility_connector__WEBPACK_IMPORTED_MODULE_14__.findAngle)(segSourcePoint, cnPt1), distance: _primitives_point__WEBPACK_IMPORTED_MODULE_2__.Point.findLength(segSourcePoint, cnPt1) };\n            drawingObject.segments[parseInt(i.toString(), 10)].vector2 = { angle: (0,_utility_connector__WEBPACK_IMPORTED_MODULE_14__.findAngle)(segTargetPoint, cnPt2), distance: _primitives_point__WEBPACK_IMPORTED_MODULE_2__.Point.findLength(segTargetPoint, cnPt2) };\n            drawingObject.segments[parseInt(i.toString(), 10)].point = segTargetPoint;\n        }\n        return drawingObject;\n    };\n    return FreeHandTool;\n}(ToolBase));\n\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-diagrams/src/diagram/interaction/tool.js?");

/***/ })

}]);