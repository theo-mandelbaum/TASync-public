"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkej2_vue_samples"] = self["webpackChunkej2_vue_samples"] || []).push([["chunk-vendors-node_modules_syncfusion_ej2-buttons_src_chips_chip-list_js-993c69c9"],{

/***/ "./node_modules/@syncfusion/ej2-buttons/src/chips/chip-list.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-buttons/src/chips/chip-list.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ChipList: () => (/* binding */ ChipList),\n/* harmony export */   classNames: () => (/* binding */ classNames)\n/* harmony export */ });\n/* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @syncfusion/ej2-base */ \"./node_modules/@syncfusion/ej2-base/index.js\");\nvar __extends = (undefined && undefined.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\n\n\n\nvar classNames = {\n    chipSet: 'e-chip-set',\n    chip: 'e-chip',\n    avatar: 'e-chip-avatar',\n    text: 'e-chip-text',\n    icon: 'e-chip-icon',\n    delete: 'e-chip-delete',\n    deleteIcon: 'e-dlt-btn',\n    multiSelection: 'e-multi-selection',\n    singleSelection: 'e-selection',\n    active: 'e-active',\n    chipWrapper: 'e-chip-avatar-wrap',\n    iconWrapper: 'e-chip-icon-wrap',\n    focused: 'e-focused',\n    disabled: 'e-disabled',\n    rtl: 'e-rtl',\n    template: 'e-chip-template',\n    chipList: 'e-chip-list',\n    customIcon: 'e-icons',\n    chipDrag: 'e-chip-drag',\n    dragAndDrop: 'e-drag-and-drop',\n    dropRestricted: 'e-error-treeview',\n    cloneChip: 'e-clone-chip',\n    dragIndicator: 'e-drag-indicator'\n};\n/**\n * A chip component is a small block of essential information, mostly used on contacts or filter tags.\n * ```html\n * <div id=\"chip\"></div>\n * ```\n * ```typescript\n * <script>\n * var chipObj = new ChipList();\n * chipObj.appendTo(\"#chip\");\n * </script>\n * ```\n */\nvar ChipList = /** @class */ (function (_super) {\n    __extends(ChipList, _super);\n    function ChipList(options, element) {\n        var _this = _super.call(this, options, element) || this;\n        _this.multiSelectedChip = [];\n        return _this;\n    }\n    ChipList_1 = ChipList;\n    /**\n     * Initialize the event handler\n     *\n     * @private\n     */\n    ChipList.prototype.preRender = function () {\n        //prerender\n    };\n    /**\n     * To find the chips length.\n     *\n     * @returns boolean\n     * @private\n     */\n    ChipList.prototype.chipType = function () {\n        return (this.chips && this.chips.length && this.chips.length > 0);\n    };\n    /**\n     * To Initialize the control rendering.\n     *\n     * @returns void\n     * @private\n     */\n    ChipList.prototype.render = function () {\n        this.type = (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.chips) && this.chips.length) ? 'chipset' : (this.text || this.element.innerText ? 'chip' : 'chipset');\n        this.setAttributes();\n        this.createChip();\n        this.setRtl();\n        this.select(this.selectedChips);\n        this.wireEvent(false);\n        this.rippleFunction = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.rippleEffect)(this.element, {\n            selector: '.' + classNames.chip\n        });\n        this.renderComplete();\n        this.dragCollection = [];\n        if (this.allowDragAndDrop) {\n            this.enableDraggingChips();\n        }\n    };\n    ChipList.prototype.enableDraggingChips = function () {\n        var _this = this;\n        var clonedChipElement;\n        var chipElements = this.element.querySelectorAll('.' + classNames.chip);\n        chipElements.forEach(function (chip, index) {\n            _this.dragObj = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Draggable(chip, {\n                preventDefault: false,\n                clone: true,\n                dragArea: _this.dragArea,\n                helper: function () {\n                    clonedChipElement = chip.cloneNode(true);\n                    clonedChipElement.classList.add(classNames.cloneChip);\n                    _this.element.appendChild(clonedChipElement);\n                    return clonedChipElement;\n                },\n                dragStart: function (args) {\n                    _this.dragIndicator = _this.createElement('div', { className: classNames.dragIndicator });\n                    document.body.appendChild(_this.dragIndicator);\n                    var chipData = _this.find(args.element);\n                    var dragStartArgs = {\n                        cancel: false,\n                        event: args.event,\n                        draggedItem: args.element,\n                        draggedItemData: chipData,\n                        dropTarget: null\n                    };\n                    _this.trigger('dragStart', dragStartArgs, function () {\n                        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(dragStartArgs.cancel)) {\n                            dragStartArgs.cancel = false;\n                        }\n                    });\n                    if (!dragStartArgs.cancel) {\n                        clonedChipElement.setAttribute('drag-indicator-index', index.toString());\n                    }\n                    else {\n                        _this.dragObj.intDestroy(args.event);\n                    }\n                },\n                drag: function (args) {\n                    var chipData = _this.find(args.element);\n                    var draggingArgs = {\n                        event: args.event,\n                        draggedItem: args.element,\n                        draggedItemData: chipData,\n                        dropTarget: null\n                    };\n                    _this.trigger('dragging', draggingArgs);\n                    var draggingIconEle = clonedChipElement.querySelector('.' + classNames.chipDrag);\n                    if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(draggingIconEle)) {\n                        draggingIconEle = _this.createElement('span', { className: classNames.customIcon + \" \" + classNames.dragAndDrop + \" \" + classNames.chipDrag });\n                        clonedChipElement.prepend(draggingIconEle);\n                    }\n                    _this.allowExternalDragging(args, clonedChipElement, draggingIconEle);\n                },\n                dragStop: function (args) {\n                    var chipData = _this.find(args.element);\n                    var dragStopArgs = {\n                        cancel: false,\n                        event: args.event,\n                        draggedItem: args.element,\n                        draggedItemData: chipData,\n                        dropTarget: args.target\n                    };\n                    _this.trigger('dragStop', dragStopArgs, function () {\n                        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(dragStopArgs.cancel)) {\n                            dragStopArgs.cancel = false;\n                        }\n                    });\n                    if (!dragStopArgs.cancel) {\n                        _this.allowExternalDrop(args, clonedChipElement);\n                    }\n                    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(_this.dragIndicator)) {\n                        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.remove)(_this.dragIndicator);\n                    }\n                    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(clonedChipElement)) {\n                        clonedChipElement.remove();\n                    }\n                }\n            });\n            if (_this.dragCollection.indexOf(_this.dragObj) === -1) {\n                _this.dragCollection.push(_this.dragObj);\n            }\n        });\n    };\n    ChipList.prototype.checkInstance = function (args, context) {\n        var isInstanceMatched = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(args.target.closest('.' + classNames.chipList)) &&\n            args.target.closest('.' + classNames.chipList).id !== context.element.id;\n        if (isInstanceMatched) {\n            this.updatedInstance = args.target.closest('.' + classNames.chipList);\n        }\n        return isInstanceMatched;\n    };\n    ChipList.prototype.setIcons = function (currentInstance, draggingIconEle, target, indicatorEle, outOfDragArea) {\n        var isTargetInside = currentInstance.element.contains(target);\n        var isDroppable = target.closest('.e-droppable');\n        if ((isTargetInside || isDroppable) && !outOfDragArea) {\n            draggingIconEle.classList.add(classNames.dragAndDrop);\n            draggingIconEle.classList.remove(classNames.dropRestricted);\n            if (isDroppable) {\n                indicatorEle.style.display = 'none';\n            }\n        }\n        else {\n            draggingIconEle.classList.remove(classNames.dragAndDrop);\n            draggingIconEle.classList.add(classNames.dropRestricted);\n            indicatorEle.style.display = 'none';\n        }\n    };\n    ChipList.prototype.allowExternalDragging = function (args, clonedChipElement, draggingIconEle) {\n        var currentInstance;\n        var closestChip = null;\n        var closestDistance = Infinity;\n        var newIndex = -1;\n        var outOfDragArea = false;\n        if (this.checkInstance(args, this)) {\n            this.dragIndicator.style.display = 'none';\n            currentInstance = this.getCurrentInstance(args);\n            currentInstance.dragIndicator = this.dragIndicator;\n            if (!currentInstance.allowDragAndDrop) {\n                return;\n            }\n        }\n        else {\n            currentInstance = this;\n        }\n        var indicatorEle = currentInstance.dragIndicator;\n        indicatorEle.style.display = 'inline';\n        outOfDragArea = this.dragAreaCheck(this.dragArea, args.target, outOfDragArea, draggingIconEle, indicatorEle);\n        this.setIcons(currentInstance, draggingIconEle, args.target, indicatorEle, outOfDragArea);\n        currentInstance.element.appendChild(clonedChipElement);\n        var droppedRect = clonedChipElement.getBoundingClientRect();\n        var allChips = Array.from(currentInstance.element.querySelectorAll('.' + classNames.chip));\n        allChips.forEach(function (chip, i) {\n            if (chip !== clonedChipElement) {\n                var rect_1 = chip.getBoundingClientRect();\n                var distance = Math.sqrt(Math.pow(droppedRect.left - rect_1.left, 2) + Math.pow(droppedRect.top - rect_1.top, 2));\n                if (distance < closestDistance) {\n                    closestDistance = distance;\n                    closestChip = chip;\n                    newIndex = i;\n                }\n            }\n        });\n        if (newIndex === -1) {\n            newIndex = allChips.length;\n        }\n        var chipsDistance = this.getChipsDistance(currentInstance);\n        var cloneRect = clonedChipElement.getBoundingClientRect();\n        var rect;\n        if (closestChip || allChips.length > 0) {\n            var targetChip = closestChip || allChips[allChips.length - 1];\n            rect = targetChip.getBoundingClientRect();\n            indicatorEle.style.top = rect.top + window.scrollY + 'px';\n            indicatorEle.style.left = currentInstance.enableRtl ? (rect.right + chipsDistance + 'px') :\n                (rect.left - chipsDistance + window.scrollX + 'px');\n        }\n        if (currentInstance.enableRtl) {\n            if (cloneRect.left < rect.left - rect.width / 2 && cloneRect.top > rect.top) {\n                indicatorEle.style.left = rect.left - chipsDistance + window.scrollX + 'px';\n            }\n        }\n        else if (cloneRect.left > rect.left + rect.width / 2 && cloneRect.top > rect.top) {\n            indicatorEle.style.left = rect.left + rect.width + chipsDistance + window.scrollX + 'px';\n        }\n    };\n    ChipList.prototype.dragAreaCheck = function (dragArea, target, outOfDragArea, draggingIconEle, indicatorEle) {\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(dragArea)) {\n            return false;\n        }\n        var isString = typeof dragArea === 'string';\n        var isHtmlElement = dragArea instanceof HTMLElement;\n        var dragAreaElement = isString ? document.querySelector(dragArea) : dragArea;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(dragAreaElement)) {\n            if ((isString || isHtmlElement) && !dragAreaElement.contains(target)) {\n                outOfDragArea = true;\n                indicatorEle.style.display = 'none';\n                draggingIconEle.classList.add(classNames.dropRestricted);\n                draggingIconEle.classList.remove(classNames.dragAndDrop);\n            }\n        }\n        return outOfDragArea;\n    };\n    ChipList.prototype.getChipsDistance = function (currentInstance) {\n        var constValue = 4;\n        if (currentInstance.chips.length <= 1) {\n            return constValue;\n        }\n        var constantDistance;\n        var firstChipClientRect = currentInstance.find(0).element.getBoundingClientRect();\n        var secondChipClientRect = currentInstance.find(1).element.getBoundingClientRect();\n        var firstChipLeft = firstChipClientRect.left;\n        if (currentInstance.enableRtl) {\n            var secondChipRight = secondChipClientRect.right;\n            constantDistance = firstChipLeft < secondChipRight ? constValue : ((firstChipLeft - secondChipRight) / 2);\n            return constantDistance;\n        }\n        else {\n            var firstChipWidth = firstChipClientRect.width;\n            var secondChipLeft = secondChipClientRect.left;\n            constantDistance = secondChipLeft < (firstChipLeft + firstChipWidth) ?\n                constValue : (secondChipLeft - (firstChipLeft + firstChipWidth)) / 2;\n            return constantDistance;\n        }\n    };\n    ChipList.prototype.getCurrentInstance = function (args) {\n        var chipContainer = args.target.closest('.' + classNames.chipList);\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(chipContainer) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(chipContainer.ej2_instances)) {\n            for (var i = 0; i < chipContainer.ej2_instances.length; i++) {\n                if (chipContainer.ej2_instances[parseInt(i.toString(), 10)] instanceof ChipList_1) {\n                    return chipContainer.ej2_instances[i];\n                }\n            }\n        }\n        return null;\n    };\n    ChipList.prototype.allowExternalDrop = function (args, clonedChipElement) {\n        var originalIndex = parseInt(clonedChipElement.getAttribute('drag-indicator-index'), 10);\n        var currentInstance;\n        var outOfDragArea = false;\n        var isInstanceChanged = false;\n        if (this.checkInstance(args, this)) {\n            isInstanceChanged = true;\n            currentInstance = this.getCurrentInstance(args);\n            if (!currentInstance.allowDragAndDrop) {\n                return;\n            }\n        }\n        else {\n            currentInstance = this;\n        }\n        var indicatorEle = currentInstance.dragIndicator;\n        indicatorEle.style.display = 'inline';\n        if (!currentInstance.element.contains(args.target)) {\n            return;\n        }\n        outOfDragArea = this.dragAreaCheck(this.dragArea, args.target, outOfDragArea, clonedChipElement.querySelector('.' + classNames.chipDrag), indicatorEle);\n        if (outOfDragArea) {\n            return;\n        }\n        var indicatorRect = indicatorEle.getBoundingClientRect();\n        var allChips = Array.from(currentInstance.element.querySelectorAll('.' + classNames.chip));\n        var newIndex = -1;\n        var topOffset = false;\n        var leftOffset = false;\n        var rightOffset = false;\n        for (var i = 0; i < allChips.length; i++) {\n            if (allChips[i] !== clonedChipElement) {\n                var chipRect = allChips[i].getBoundingClientRect();\n                topOffset = indicatorRect.top < chipRect.top + chipRect.height / 2;\n                leftOffset = indicatorRect.left < chipRect.left + chipRect.width / 2;\n                rightOffset = indicatorRect.left > chipRect.left + chipRect.width / 2;\n                if ((!currentInstance.enableRtl && topOffset && leftOffset) || (currentInstance.enableRtl && topOffset && rightOffset)) {\n                    newIndex = i;\n                    if (i > originalIndex && !isInstanceChanged) {\n                        newIndex = i - 1;\n                    }\n                    break;\n                }\n            }\n        }\n        if (newIndex === -1) {\n            var nextChipIndex = void 0;\n            for (var i = 0; i < allChips.length; i++) {\n                var chipRect = allChips[i].getBoundingClientRect();\n                if ((chipRect.top > indicatorRect.top) || (chipRect.top === indicatorRect.top && chipRect.left > indicatorRect.left)) {\n                    nextChipIndex = i;\n                    break;\n                }\n            }\n            if (nextChipIndex !== allChips.length) {\n                newIndex = nextChipIndex;\n            }\n            else {\n                newIndex = allChips.length;\n            }\n        }\n        var currentChipList = Array.from(this.chips);\n        if (isInstanceChanged) {\n            this.dropChip(currentChipList, originalIndex, currentInstance, newIndex, true);\n        }\n        else if (newIndex !== originalIndex) {\n            this.dropChip(currentChipList, originalIndex, currentInstance, newIndex, false);\n        }\n    };\n    ChipList.prototype.dropChip = function (currentChipList, originalIndex, currentInstance, newIndex, instanceChanged) {\n        var draggedChip = currentChipList.splice(originalIndex, 1)[0];\n        if (!instanceChanged) {\n            currentChipList.splice(newIndex, 0, draggedChip);\n            currentInstance.chips = currentChipList;\n        }\n        else {\n            var newChips = Array.from(currentInstance.chips);\n            newChips.splice(newIndex, 0, draggedChip);\n            currentInstance.chips = newChips;\n        }\n        this.chips = currentChipList;\n        currentInstance.dataBind();\n        this.dataBind();\n        currentInstance.enableDraggingChips();\n    };\n    ChipList.prototype.createChip = function () {\n        this.innerText = (this.element.innerText && this.element.innerText.length !== 0)\n            ? this.element.innerText.trim() : this.element.innerText;\n        this.element.innerHTML = '';\n        this.chipCreation(this.type === 'chip' ? [this.innerText ? this.innerText : this.text] : this.chips);\n    };\n    ChipList.prototype.setAttributes = function () {\n        if (this.type === 'chip') {\n            if (this.enabled) {\n                this.element.tabIndex = 0;\n            }\n            this.element.setAttribute('role', 'button');\n        }\n        else {\n            this.element.classList.add(classNames.chipSet);\n            this.element.setAttribute('role', 'listbox');\n            if (this.selection === 'Multiple') {\n                this.element.classList.add(classNames.multiSelection);\n                this.element.setAttribute('aria-multiselectable', 'true');\n            }\n            else if (this.selection === 'Single') {\n                this.element.classList.add(classNames.singleSelection);\n                this.element.setAttribute('aria-multiselectable', 'false');\n            }\n            else {\n                this.element.setAttribute('aria-multiselectable', 'false');\n            }\n        }\n    };\n    ChipList.prototype.setRtl = function () {\n        this.element.classList[this.enableRtl ? 'add' : 'remove'](classNames.rtl);\n    };\n    ChipList.prototype.renderTemplates = function () {\n        if (this.isReact) {\n            this.renderReactTemplates();\n        }\n    };\n    ChipList.prototype.templateParser = function (template) {\n        if (template) {\n            try {\n                if (typeof template !== 'function' && document.querySelectorAll(template).length) {\n                    return (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.compile)(document.querySelector(template).innerHTML.trim());\n                }\n                else {\n                    return (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.compile)(template);\n                }\n            }\n            catch (error) {\n                return (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.compile)(template);\n            }\n        }\n        return undefined;\n    };\n    ChipList.prototype.chipCreation = function (data) {\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(data)) {\n            return;\n        }\n        var chipListArray = [];\n        var attributeArray = [];\n        for (var i = 0; i < data.length; i++) {\n            var fieldsData = this.getFieldValues(data[i]);\n            var attributesValue = fieldsData.htmlAttributes;\n            attributeArray.push(attributesValue);\n            var chipArray = this.elementCreation(fieldsData);\n            var className = (classNames.chip + ' ' + (fieldsData.enabled ? ' ' : classNames.disabled) + ' ' +\n                (fieldsData.avatarIconCss || fieldsData.avatarText ? classNames.chipWrapper : (fieldsData.leadingIconCss ?\n                    classNames.iconWrapper : ' ')) + ' ' + fieldsData.cssClass).split(' ').filter(function (css) { return css; });\n            if (!this.chipType() || this.type === 'chip') {\n                chipListArray = chipArray;\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([this.element], className);\n                this.element.setAttribute('aria-label', fieldsData.text);\n                if (fieldsData.value) {\n                    this.element.setAttribute('data-value', fieldsData.value.toString());\n                }\n            }\n            else {\n                var wrapper = this.createElement('DIV', {\n                    className: className.join(' '), attrs: {\n                        tabIndex: '0', role: 'option',\n                        'aria-label': fieldsData.text, 'aria-selected': 'false'\n                    }\n                });\n                if (this.enableDelete) {\n                    wrapper.setAttribute('aria-keyshortcuts', 'Press delete or backspace key to delete');\n                }\n                if (fieldsData.value) {\n                    wrapper.setAttribute('data-value', fieldsData.value.toString());\n                }\n                if (fieldsData.enabled) {\n                    wrapper.setAttribute('aria-disabled', 'false');\n                }\n                else {\n                    wrapper.removeAttribute('tabindex');\n                    wrapper.setAttribute('aria-disabled', 'true');\n                }\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(attributeArray[i])) {\n                    if (attributeArray.length > i && Object.keys(attributeArray[i]).length) {\n                        var htmlAttr = [];\n                        htmlAttr = (Object.keys(attributeArray[i]));\n                        for (var j = 0; j < htmlAttr.length; j++) {\n                            wrapper.setAttribute(htmlAttr[j], attributeArray[i][htmlAttr[j]]);\n                        }\n                    }\n                }\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.append)(chipArray, wrapper);\n                chipListArray.push(wrapper);\n            }\n        }\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.append)(chipListArray, this.element);\n    };\n    ChipList.prototype.getFieldValues = function (data) {\n        var chipEnabled = !(this.enabled.toString() === 'false');\n        var fields = {\n            text: typeof data === 'object' ? (data.text ? data.text.toString() : this.text.toString()) :\n                (!this.chipType() ? (this.innerText ? this.innerText : this.text.toString()) : data.toString()),\n            cssClass: typeof data === 'object' ? (data.cssClass ? data.cssClass.toString() : this.cssClass.toString()) :\n                (this.cssClass.toString()),\n            leadingIconCss: typeof data === 'object' ? (data.leadingIconCss ? data.leadingIconCss.toString() :\n                this.leadingIconCss.toString()) : (this.leadingIconCss.toString()),\n            avatarIconCss: typeof data === 'object' ? (data.avatarIconCss ? data.avatarIconCss.toString() :\n                this.avatarIconCss.toString()) : (this.avatarIconCss.toString()),\n            avatarText: typeof data === 'object' ? (data.avatarText ? data.avatarText.toString() : this.avatarText.toString()) :\n                (this.avatarText.toString()),\n            trailingIconCss: typeof data === 'object' ? (data.trailingIconCss ? data.trailingIconCss.toString() :\n                this.trailingIconCss.toString()) : (this.trailingIconCss.toString()),\n            enabled: typeof data === 'object' ? (data.enabled !== undefined ? (data.enabled.toString() === 'false' ? false : true) :\n                chipEnabled) : (chipEnabled),\n            value: typeof data === 'object' ? ((data.value ? data.value.toString() : null)) : null,\n            leadingIconUrl: typeof data === 'object' ? (data.leadingIconUrl ? data.leadingIconUrl.toString() : this.leadingIconUrl) :\n                this.leadingIconUrl,\n            trailingIconUrl: typeof data === 'object' ? (data.trailingIconUrl ? data.trailingIconUrl.toString() : this.trailingIconUrl) :\n                this.trailingIconUrl,\n            htmlAttributes: typeof data === 'object' ? (data.htmlAttributes ? data.htmlAttributes : this.htmlAttributes) : this.htmlAttributes,\n            template: typeof data === 'object' ? (data.template ? data.template : null) : null\n        };\n        return fields;\n    };\n    ChipList.prototype.elementCreation = function (fields) {\n        var chipArray = [];\n        if (fields.avatarText || fields.avatarIconCss) {\n            var className = (classNames.avatar + ' ' + fields.avatarIconCss).trim();\n            var chipAvatarElement = this.createElement('span', { className: className });\n            chipAvatarElement.innerText = fields.avatarText;\n            chipArray.push(chipAvatarElement);\n        }\n        else if (fields.leadingIconCss) {\n            var className = (classNames.icon + ' ' + fields.leadingIconCss).trim();\n            var chipIconElement = this.createElement('span', { className: className });\n            chipArray.push(chipIconElement);\n        }\n        else if (fields.leadingIconUrl) {\n            var className = (classNames.avatar + ' ' + 'image-url').trim();\n            var chipIconElement = this.createElement('span', { className: className });\n            chipIconElement.style.backgroundImage = 'url(' + fields.leadingIconUrl + ')';\n            chipArray.push(chipIconElement);\n        }\n        var chipTextElement = this.createElement('span', { className: classNames.text });\n        chipTextElement.innerText = fields.text;\n        chipArray.push(chipTextElement);\n        if (fields.template) {\n            var templateWrapper = this.createElement('div', { className: classNames.template });\n            var templateContent = this.templateParser(fields.template)(fields, this, 'template', this.element.id + '_template', false);\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.append)(templateContent, templateWrapper);\n            chipArray.push(templateWrapper);\n            this.renderTemplates();\n        }\n        if (fields.trailingIconCss || (this.chipType() && this.enableDelete)) {\n            var className = (classNames.delete + ' ' +\n                (fields.trailingIconCss ? fields.trailingIconCss : classNames.deleteIcon)).trim();\n            var chipdeleteElement = this.createElement('span', { className: className });\n            chipArray.push(chipdeleteElement);\n        }\n        else if (fields.trailingIconUrl) {\n            var className = ('trailing-icon-url').trim();\n            var chipIconsElement = this.createElement('span', { className: className });\n            chipIconsElement.style.backgroundImage = 'url(' + fields.trailingIconUrl + ')';\n            chipArray.push(chipIconsElement);\n        }\n        return chipArray;\n    };\n    /**\n     * A function that finds chip based on given input.\n     *\n     * @param  {number | HTMLElement } fields - We can pass index number or element of chip.\n     * {% codeBlock src='chips/find/index.md' %}{% endcodeBlock %}\n     *\n     *  @returns {void}\n     */\n    ChipList.prototype.find = function (fields) {\n        var chipData = { text: '', index: -1, element: this.element, data: '' };\n        var chipElement = fields instanceof HTMLElement ?\n            fields : this.element.querySelectorAll('.' + classNames.chip)[fields];\n        if (chipElement && this.chipType()) {\n            chipData.index = Array.prototype.slice.call(this.element.querySelectorAll('.' + classNames.chip)).indexOf(chipElement);\n            var chip = this.chips[chipData.index];\n            if (typeof chip === 'object' && chip !== null) {\n                var chipModel = chip;\n                if (chipModel.text !== undefined) {\n                    chipData.text = chipModel.text.toString();\n                }\n            }\n            else if (chip !== undefined) {\n                chipData.text = chip.toString();\n            }\n            chipData.data = chip;\n            chipData.element = chipElement;\n        }\n        return chipData;\n    };\n    /**\n     * Allows adding the chip item(s) by passing a single or array of string, number, or ChipModel values.\n     *\n     * @param  {string[] | number[] | ChipModel[] | string | number | ChipModel} chipsData - We can pass array of string or\n     *  array of number or array of chip model or string data or number data or chip model.\n     * {% codeBlock src='chips/add/index.md' %}{% endcodeBlock %}\n     *\n     * @returns {void}\n     * @deprecated\n     */\n    ChipList.prototype.add = function (chipsData) {\n        var _a;\n        if (this.type !== 'chip') {\n            var fieldData = chipsData instanceof Array ?\n                chipsData : [chipsData];\n            this.chips = (_a = [].slice.call(this.chips)).concat.apply(_a, fieldData);\n            this.chipCreation(fieldData);\n        }\n    };\n    /**\n     * Allows selecting the chip item(s) by passing a single or array of string, number, or ChipModel values.\n     *\n     * @param  {number | number[] | HTMLElement | HTMLElement[]} fields - We can pass number or array of number\n     *  or chip element or array of chip element.\n     * {% codeBlock src='chips/select/index.md' %}{% endcodeBlock %}\n     *\n     *  @returns {void}\n     */\n    ChipList.prototype.select = function (fields, selectionType) {\n        this.onSelect(fields, false, selectionType);\n    };\n    ChipList.prototype.multiSelection = function (newProp) {\n        var items = this.element.querySelectorAll('.' + classNames.chip);\n        for (var j = 0; j < newProp.length; j++) {\n            if (typeof newProp[j] === 'string') {\n                for (var k = 0; k < items.length; k++) {\n                    if (newProp[j] !== k) {\n                        if (newProp[j] === items[k].attributes[5].value) {\n                            this.multiSelectedChip.push(k);\n                            break;\n                        }\n                    }\n                }\n            }\n            else {\n                this.multiSelectedChip.push(newProp[j]);\n            }\n        }\n    };\n    ChipList.prototype.onSelect = function (fields, callFromProperty, selectionType) {\n        var index;\n        var chipNodes;\n        var chipValue = null;\n        if (this.chipType() && this.selection !== 'None') {\n            if (callFromProperty) {\n                var chipElements = this.element.querySelectorAll('.' + classNames.chip);\n                for (var i = 0; i < chipElements.length; i++) {\n                    chipElements[i].setAttribute('aria-selected', 'false');\n                    chipElements[i].classList.remove(classNames.active);\n                }\n            }\n            var fieldData = fields instanceof Array ? fields : [fields];\n            for (var i = 0; i < fieldData.length; i++) {\n                var chipElement = fieldData[i] instanceof HTMLElement ? fieldData[i]\n                    : this.element.querySelectorAll('.' + classNames.chip)[fieldData[i]];\n                if (selectionType !== 'index') {\n                    for (var j = 0; j < this.chips.length; j++) {\n                        chipNodes = this.element.querySelectorAll('.' + classNames.chip)[j];\n                        var fieldsData = this.getFieldValues(this.chips[j]);\n                        if (selectionType === 'value') {\n                            if (fieldsData.value !== null) {\n                                chipValue = chipNodes.dataset.value;\n                            }\n                        }\n                        else if (selectionType === 'text') {\n                            chipValue = chipNodes.innerText;\n                        }\n                        if (chipValue === fieldData[i].toString()) {\n                            index = j;\n                            chipElement = this.element.querySelectorAll('.' + classNames.chip)[index];\n                        }\n                    }\n                }\n                if (chipElement instanceof HTMLElement) {\n                    this.selectionHandler(chipElement);\n                }\n            }\n        }\n    };\n    /**\n     * Allows removing the chip item(s) by passing a single or array of string, number, or ChipModel values.\n     *\n     * @param  {number | number[] | HTMLElement | HTMLElement[]} fields - We can pass number or array of number\n     *  or chip element or array of chip element.\n     * {% codeBlock src='chips/remove/index.md' %}{% endcodeBlock %}\n     *\n     *  @returns {void}\n     */\n    ChipList.prototype.remove = function (fields) {\n        var _this = this;\n        if (this.chipType()) {\n            var fieldData = fields instanceof Array ? fields : [fields];\n            var chipElements_1 = [];\n            var chipCollection_1 = this.element.querySelectorAll('.' + classNames.chip);\n            fieldData.forEach(function (data) {\n                var chipElement = data instanceof HTMLElement ? data\n                    : chipCollection_1[data];\n                if (chipElement instanceof HTMLElement) {\n                    chipElements_1.push(chipElement);\n                }\n            });\n            chipElements_1.forEach(function (element) {\n                var chips = _this.element.querySelectorAll('.' + classNames.chip);\n                var index = Array.prototype.slice.call(chips).indexOf(element);\n                _this.deleteHandler(element, index);\n            });\n        }\n    };\n    /**\n     * Returns the selected chip(s) data.\n     * {% codeBlock src='chips/getSelectedChips/index.md' %}{% endcodeBlock %}\n     *\n     *  @returns {void}\n     */\n    ChipList.prototype.getSelectedChips = function () {\n        var selectedChips;\n        if (this.chipType() && this.selection !== 'None') {\n            var selectedItems = { texts: [], Indexes: [], data: [], elements: [] };\n            var items = this.element.querySelectorAll('.' + classNames.active);\n            for (var i = 0; i < items.length; i++) {\n                var chip = items[i];\n                selectedItems.elements.push(chip);\n                var index = Array.prototype.slice.call(this.element.querySelectorAll('.' + classNames.chip)).indexOf(chip);\n                selectedItems.Indexes.push(index);\n                selectedItems.data.push(this.chips[index]);\n                var text = typeof this.chips[index] === 'object' ?\n                    this.chips[index].text ? this.chips[index].text\n                        : null : this.chips[index].toString();\n                selectedItems.texts.push(text);\n            }\n            var selectedItem = {\n                text: selectedItems.texts[0], index: selectedItems.Indexes[0],\n                data: selectedItems.data[0], element: selectedItems.elements[0]\n            };\n            selectedChips = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(selectedItem.index) ?\n                (this.selection === 'Multiple' ? selectedItems : selectedItem) : undefined;\n        }\n        return selectedChips;\n    };\n    ChipList.prototype.wireEvent = function (unWireEvent) {\n        if (!unWireEvent) {\n            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(this.element, 'click', this.clickHandler, this);\n            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(this.element, 'focusout', this.focusOutHandler, this);\n            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(this.element, 'keydown', this.keyHandler, this);\n            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(this.element, 'keyup', this.keyHandler, this);\n        }\n        else {\n            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(this.element, 'click', this.clickHandler);\n            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(this.element, 'focusout', this.focusOutHandler);\n            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(this.element, 'keydown', this.keyHandler);\n            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(this.element, 'keyup', this.keyHandler);\n        }\n    };\n    ChipList.prototype.keyHandler = function (e) {\n        if (e.target.classList.contains(classNames.chip)) {\n            if (e.type === 'keydown') {\n                if (e.keyCode === 13 || e.keyCode === 32) {\n                    this.clickHandler(e);\n                }\n                else if ((e.keyCode === 46 || e.keyCode === 8) && this.enableDelete) {\n                    this.clickHandler(e, true);\n                }\n            }\n            else if (e.keyCode === 9) {\n                this.focusInHandler(e.target);\n            }\n        }\n    };\n    ChipList.prototype.focusInHandler = function (chipWrapper) {\n        if (!chipWrapper.classList.contains(classNames.focused)) {\n            chipWrapper.classList.add(classNames.focused);\n        }\n    };\n    ChipList.prototype.focusOutHandler = function (e) {\n        var chipWrapper = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(e.target, '.' + classNames.chip);\n        var focusedElement = !this.chipType() ? (this.element.classList.contains(classNames.focused) ?\n            this.element : null) : this.element.querySelector('.' + classNames.focused);\n        if (chipWrapper && focusedElement) {\n            focusedElement.classList.remove(classNames.focused);\n        }\n    };\n    ChipList.prototype.clickHandler = function (e, del) {\n        var _this = this;\n        if (del === void 0) { del = false; }\n        var chipWrapper = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(e.target, '.' + classNames.chip);\n        if (chipWrapper) {\n            var chipDataArgs = void 0;\n            if (this.chipType()) {\n                chipDataArgs = this.find(chipWrapper);\n            }\n            else {\n                var index = Array.prototype.slice.call(this.element.querySelectorAll('.' + classNames.chip)).indexOf(chipWrapper);\n                chipDataArgs = {\n                    text: this.innerText ? this.innerText : this.text,\n                    element: chipWrapper, data: this.text, index: index\n                };\n            }\n            chipDataArgs.event = e;\n            chipDataArgs.cancel = false;\n            this.trigger('beforeClick', chipDataArgs, function (observedArgs) {\n                if (!observedArgs.cancel) {\n                    _this.clickEventHandler(observedArgs.element, e, del);\n                }\n            });\n        }\n    };\n    ChipList.prototype.clickEventHandler = function (chipWrapper, e, del) {\n        var _this = this;\n        if (this.chipType()) {\n            var chipData_1 = this.find(chipWrapper);\n            chipData_1.event = e;\n            var deleteElement = e.target.classList.contains(classNames.deleteIcon) ?\n                e.target : (del ? chipWrapper.querySelector('.' + classNames.deleteIcon) : undefined);\n            if (deleteElement && this.enableDelete) {\n                chipData_1.cancel = false;\n                var deletedItemArgs = chipData_1;\n                this.trigger('delete', deletedItemArgs, function (observedArgs) {\n                    if (!observedArgs.cancel) {\n                        _this.deleteHandler(observedArgs.element, observedArgs.index);\n                        _this.selectionHandler(chipWrapper);\n                        chipData_1.selected = observedArgs.element.classList.contains(classNames.active);\n                        var selectedItemArgs = chipData_1;\n                        _this.trigger('click', selectedItemArgs);\n                        var chipElement = _this.element.querySelectorAll('.' + classNames.chip)[observedArgs.index];\n                        if (chipElement) {\n                            chipElement.focus();\n                            _this.focusInHandler(chipElement);\n                        }\n                    }\n                });\n            }\n            else if (this.selection !== 'None') {\n                this.selectionHandler(chipWrapper);\n                chipData_1.selected = chipWrapper.classList.contains(classNames.active);\n                var selectedItemArgs = chipData_1;\n                this.trigger('click', selectedItemArgs);\n            }\n            else {\n                this.focusInHandler(chipWrapper);\n                var clickedItemArgs = chipData_1;\n                this.trigger('click', clickedItemArgs);\n            }\n        }\n        else {\n            this.focusInHandler(chipWrapper);\n            var clickedItemArgs = {\n                text: this.innerText ? this.innerText : this.text,\n                element: chipWrapper, data: this.text, event: e\n            };\n            this.trigger('click', clickedItemArgs);\n        }\n    };\n    ChipList.prototype.selectionHandler = function (chipWrapper) {\n        if (this.selection === 'Single') {\n            var activeElement = this.element.querySelector('.' + classNames.active);\n            if (activeElement && activeElement !== chipWrapper) {\n                activeElement.classList.remove(classNames.active);\n                activeElement.setAttribute('aria-selected', 'false');\n            }\n            this.setProperties({ selectedChips: null }, true);\n        }\n        else {\n            this.setProperties({ selectedChips: [] }, true);\n        }\n        if (chipWrapper.classList.contains(classNames.active)) {\n            chipWrapper.classList.remove(classNames.active);\n            chipWrapper.setAttribute('aria-selected', 'false');\n        }\n        else {\n            chipWrapper.classList.add(classNames.active);\n            chipWrapper.setAttribute('aria-selected', 'true');\n        }\n        this.updateSelectedChips();\n    };\n    ChipList.prototype.updateSelectedChips = function () {\n        var chipListEle = this.element.querySelectorAll('.' + classNames.chip);\n        var chipCollIndex = [];\n        var chipCollValue = [];\n        var chip = null;\n        var value = null;\n        for (var i = 0; i < chipListEle.length; i++) {\n            var selectedEle = this.element.querySelectorAll('.' + classNames.chip)[i];\n            if (selectedEle.getAttribute('aria-selected') === 'true') {\n                value = selectedEle.getAttribute('data-value');\n                if (this.selection === 'Single' && selectedEle.classList.contains('e-active')) {\n                    chip = value ? value : i;\n                    break;\n                }\n                else {\n                    chip = value ? chipCollValue.push(value) : chipCollIndex.push(i);\n                }\n            }\n        }\n        this.setProperties({ selectedChips: this.selection === 'Single' ? chip : value ? chipCollValue : chipCollIndex }, true);\n    };\n    ChipList.prototype.deleteHandler = function (chipWrapper, index) {\n        // Used to store the deleted chip item details.\n        var deletedChipData = this.find(chipWrapper);\n        this.chips.splice(index, 1);\n        this.setProperties({ chips: this.chips }, true);\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)(chipWrapper);\n        this.trigger('deleted', deletedChipData);\n    };\n    /**\n     * Removes the component from the DOM and detaches all its related event handlers. Also, it removes the attributes and classes.\n     * {% codeBlock src='chips/destroy/index.md' %}{% endcodeBlock %}\n     *\n     *  @returns {void}\n     */\n    ChipList.prototype.destroy = function () {\n        for (var i = 0; i < this.dragCollection.length; i++) {\n            this.dragCollection[i].destroy();\n        }\n        this.dragCollection = [];\n        this.clearTemplate();\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([this.element], [classNames.chipSet, classNames.chip, classNames.rtl,\n            classNames.multiSelection, classNames.singleSelection, classNames.disabled, classNames.chipWrapper, classNames.iconWrapper,\n            classNames.active, classNames.focused].concat(this.cssClass ? this.cssClass.toString().split(' ').filter(function (css) { return css; }) : []));\n        this.removeMultipleAttributes(['tabindex', 'role', 'aria-label', 'aria-multiselectable'], this.element);\n        this.wireEvent(true);\n        this.rippleFunction();\n        _super.prototype.destroy.call(this);\n        this.element.innerHTML = '';\n        this.element.innerText = this.innerText;\n    };\n    ChipList.prototype.removeMultipleAttributes = function (attributes, element) {\n        attributes.forEach(function (attr) {\n            element.removeAttribute(attr);\n        });\n    };\n    ChipList.prototype.getPersistData = function () {\n        return this.addOnPersist([]);\n    };\n    ChipList.prototype.getModuleName = function () {\n        return 'chip-list';\n    };\n    /**\n     * Called internally if any of the property value changed.\n     *\n     * @returns void\n     * @private\n     */\n    ChipList.prototype.onPropertyChanged = function (newProp, oldProp) {\n        for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {\n            var prop = _a[_i];\n            switch (prop) {\n                case 'chips':\n                case 'text':\n                case 'avatarText':\n                case 'avatarIconCss':\n                case 'leadingIconCss':\n                case 'trailingIconCss':\n                case 'selection':\n                case 'enableDelete':\n                case 'enabled':\n                    this.refresh();\n                    break;\n                case 'cssClass':\n                    if (!this.chipType()) {\n                        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([this.element], oldProp.cssClass.toString().split(' ').filter(function (css) { return css; }));\n                        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([this.element], newProp.cssClass.toString().split(' ').filter(function (css) { return css; }));\n                    }\n                    else {\n                        this.refresh();\n                    }\n                    break;\n                case 'selectedChips':\n                    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)(this.element.querySelectorAll('.e-active'), 'e-active');\n                    if (this.selection === 'Multiple') {\n                        this.multiSelectedChip = [];\n                        this.multiSelection(newProp.selectedChips);\n                        this.onSelect(this.multiSelectedChip, true);\n                        this.updateSelectedChips();\n                    }\n                    else {\n                        this.onSelect(newProp.selectedChips, true);\n                    }\n                    break;\n                case 'enableRtl':\n                    this.setRtl();\n                    break;\n                case 'allowDragAndDrop':\n                    for (var i = 0; i < this.dragCollection.length; i++) {\n                        this.dragCollection[i].destroy();\n                    }\n                    this.dragCollection = [];\n                    if (this.allowDragAndDrop) {\n                        this.enableDraggingChips();\n                    }\n                    break;\n                case 'dragArea':\n                    if (this.allowDragAndDrop) {\n                        for (var i = 0; i < this.dragCollection.length; i++) {\n                            this.dragCollection[i].dragArea = this.dragArea;\n                        }\n                    }\n                    break;\n            }\n        }\n    };\n    var ChipList_1;\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)([])\n    ], ChipList.prototype, \"chips\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('')\n    ], ChipList.prototype, \"text\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('')\n    ], ChipList.prototype, \"avatarText\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('')\n    ], ChipList.prototype, \"avatarIconCss\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('')\n    ], ChipList.prototype, \"htmlAttributes\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('')\n    ], ChipList.prototype, \"leadingIconCss\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('')\n    ], ChipList.prototype, \"trailingIconCss\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('')\n    ], ChipList.prototype, \"leadingIconUrl\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('')\n    ], ChipList.prototype, \"trailingIconUrl\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('')\n    ], ChipList.prototype, \"cssClass\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(true)\n    ], ChipList.prototype, \"enabled\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)([])\n    ], ChipList.prototype, \"selectedChips\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('None')\n    ], ChipList.prototype, \"selection\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], ChipList.prototype, \"enableDelete\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], ChipList.prototype, \"allowDragAndDrop\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(null)\n    ], ChipList.prototype, \"dragArea\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], ChipList.prototype, \"created\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], ChipList.prototype, \"click\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], ChipList.prototype, \"beforeClick\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], ChipList.prototype, \"delete\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], ChipList.prototype, \"deleted\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], ChipList.prototype, \"dragStart\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], ChipList.prototype, \"dragging\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], ChipList.prototype, \"dragStop\", void 0);\n    ChipList = ChipList_1 = __decorate([\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.NotifyPropertyChanges\n    ], ChipList);\n    return ChipList;\n}(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Component));\n\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-buttons/src/chips/chip-list.js?");

/***/ })

}]);