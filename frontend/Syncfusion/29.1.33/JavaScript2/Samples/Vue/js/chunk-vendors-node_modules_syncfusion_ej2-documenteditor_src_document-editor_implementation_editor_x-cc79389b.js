"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkej2_vue_samples"] = self["webpackChunkej2_vue_samples"] || []).push([["chunk-vendors-node_modules_syncfusion_ej2-documenteditor_src_document-editor_implementation_editor_x-cc79389b"],{

/***/ "./node_modules/@syncfusion/ej2-documenteditor/src/document-editor/implementation/editor/xml-pane.js":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-documenteditor/src/document-editor/implementation/editor/xml-pane.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   XmlPane: () => (/* binding */ XmlPane)\n/* harmony export */ });\n/* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @syncfusion/ej2-base */ \"./node_modules/@syncfusion/ej2-base/index.js\");\n/* harmony import */ var _syncfusion_ej2_navigations__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @syncfusion/ej2-navigations */ \"./node_modules/@syncfusion/ej2-navigations/index.js\");\n/* harmony import */ var _syncfusion_ej2_dropdowns__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @syncfusion/ej2-dropdowns */ \"./node_modules/@syncfusion/ej2-dropdowns/index.js\");\n/* harmony import */ var _syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @syncfusion/ej2-popups */ \"./node_modules/@syncfusion/ej2-popups/index.js\");\n\n\n\n\n/**\n * xml Pane class.\n */\nvar XmlPane = /** @class */ (function () {\n    /**\n     * @param {DocumentHelper} documentHelper - Specifies the document helper.\n     * @param {boolean} isRtl - Specifies the Rtl.\n     * @private\n     */\n    function XmlPane(documentHelper, isRtl) {\n        var _this = this;\n        /**\n         * @private\n         */\n        this.isXmlPaneShow = false;\n        /**\n         * @private\n         */\n        this.isAddedDocumentXml = false;\n        /**\n         * @private\n         */\n        this.contextMenuInstance = undefined;\n        /**\n         * To set Drop Down List Data.\n         *\n         * @param {Object} key.\n         * @private\n         * @returns {void}\n         */\n        this.DropDownListData = [\n            { ID: 'Choose', Value: 'Choose an XML file' },\n            { ID: 'Add', Value: '(Add new part...)' }\n        ];\n        /**\n    * To set Default Treeview data.\n    * @param {Object} key.\n    * @returns {void}\n    */\n        this.hierarchicalData = [];\n        this.field = {\n            dataSource: this.hierarchicalData,\n            id: 'id',\n            text: 'displayText',\n            hasChildren: 'hasChild',\n            value: \"displayValue\",\n            parentID: 'pid',\n            tooltip: 'tooltip',\n        };\n        /**\n        * To handle File Selection.\n        * @returns {void}\n        */\n        this.handleFileSelect = function () {\n            var input = document.createElement('input');\n            input.type = 'file';\n            input.accept = '.xml';\n            input.onchange = function (e) {\n                var target = e.target;\n                if (target.files && target.files.length > 0) {\n                    var file = target.files[0];\n                    _this.onFileSelect(file);\n                }\n            };\n            input.click();\n        };\n        /**\n         * Close the xml pane.\n         *\n         * @private\n         * @returns {void}\n         */\n        this.onClose = function () {\n            _this.showXmlProperties(false);\n            _this.documentHelper.owner.selectionModule.closeXmlPane();\n            _this.documentHelper.owner.documentEditorSettings.showNavigationPane = false;\n            _this.documentHelper.updateFocus();\n            _this.destroyInternal();\n        };\n        this.documentHelper = documentHelper;\n        this.isRtl = isRtl;\n    }\n    Object.defineProperty(XmlPane.prototype, \"viewer\", {\n        get: function () {\n            return this.documentHelper.owner.viewer;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    XmlPane.prototype.getModuleName = function () {\n        return 'XmlPane';\n    };\n    /**\n     * @private\n     * @param {boolean} enable - enable/disable header footer pane.\n     * @returns {void}\n     */\n    XmlPane.prototype.enableDisableElements = function (enable) {\n        if (enable) {\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.classList)(this.element, [], ['e-de-overlay']);\n        }\n        else {\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.classList)(this.element, ['e-de-overlay'], []);\n        }\n    };\n    /**\n     * Initialize the Xml Mapping.\n     *\n     * @private\n     * @param {L10n} localeValue - Specifies the localization based on culture.\n     * @param {boolean} isRtl - Specifies the Rtl.\n     * @returns {void}\n     */\n    /* eslint-disable  */\n    XmlPane.prototype.initializeXmlMapping = function () {\n        var _this = this;\n        var localObj = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.L10n('documenteditor', this.documentHelper.owner.defaultLocale, this.documentHelper.owner.locale);\n        var elementId = 'xml_mapping_properties';\n        this.element = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div', { id: this.documentHelper.owner.element.id + elementId, className: 'e-de-op' });\n        var headerDiv = this.createDivTemplate('_header_footer', this.element, 'padding-bottom:0');\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.classList)(headerDiv, ['e-de-cntr-pane-padding'], []);\n        headerDiv.style.paddingLeft = '0px';\n        var headerLabel = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('label', { className: 'e-de-prop-header-label' });\n        headerLabel.innerHTML = localObj.getConstant('XML Mapping');\n        var closeButtonFloat;\n        if (!this.isRtl) {\n            closeButtonFloat = 'float:right;';\n        }\n        else {\n            closeButtonFloat = 'float:left;';\n        }\n        var closeIcon = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('span', {\n            id: '_header_footer_close',\n            className: 'e-de-ctnr-close e-de-close-icon e-icons',\n            styles: 'display:inline-block;cursor:pointer;' + closeButtonFloat\n        });\n        closeIcon.addEventListener('click', function () {\n            _this.onClose();\n        });\n        headerDiv.appendChild(headerLabel);\n        headerDiv.appendChild(closeIcon);\n        // first div\n        var optionsLabelDiv = this.createDivTemplate(elementId + '_xml', this.element);\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.classList)(optionsLabelDiv, ['e-de-cntr-pane-padding'], []);\n        optionsLabelDiv.style.paddingLeft = '0px';\n        optionsLabelDiv.style.paddingRight = '5px';\n        optionsLabelDiv.style.width = '275px';\n        var optionsLabel = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('label', { className: 'e-de-ctnr-prop-label', styles: 'height:20px;' });\n        optionsLabel.innerHTML = localObj.getConstant('Custom XML Part');\n        optionsLabelDiv.appendChild(optionsLabel);\n        var optionsDiv = this.createDivTemplate(elementId + '_xmlDiv', optionsLabelDiv);\n        var firstPageDiv = this.createDivTemplate(elementId + '_firstPageDiv', optionsDiv);\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.classList)(firstPageDiv, ['e-de-hdr-ftr-frst-div'], []);\n        var firstPage = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('input', { id: elementId + '_firstPageDiv' + '_dropdownlist', className: 'e-de-prop-sub-label' });\n        firstPage.type = 'text';\n        firstPage.tabIndex = 1;\n        firstPageDiv.appendChild(firstPage);\n        // second div\n        this.positionLabelDiv = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div', { id: elementId + '_positionLabelDiv', className: 'e-de-scrollbar-hide', styles: 'width:270px;height:310px;list-style:none;padding-right:5px;overflow:auto;' });\n        this.element.appendChild(this.positionLabelDiv);\n        // second div tree view\n        var tree = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div', { id: 'tree', className: 'e-de-scrollbar-hide', styles: 'width:270px;height:310px;list-style:none;padding-right:5px;overflow:auto;' });\n        var ul = document.createElement('ul');\n        ul.contentEditable = 'false';\n        ul.style.width = 'auto';\n        ul.className = 'e-list-parent e-ul';\n        ul.style.paddingLeft = '0px';\n        ul.id = 'e-de-pane-contextmenu-list';\n        ul.style.listStyle = 'none';\n        ul.style.margin = '0px';\n        ul.style.maxHeight = 'auto';\n        ul.oncontextmenu = this.disableBrowserContextmenu;\n        this.treeviewObject = new _syncfusion_ej2_navigations__WEBPACK_IMPORTED_MODULE_1__.TreeView({\n            fields: this.field,\n            cssClass: 'e-de-custom-treeview',\n        });\n        this.treeviewObject.appendTo(tree);\n        this.positionLabelDiv.appendChild(tree);\n        this.positionLabelDiv.appendChild(ul);\n        this.documentHelper.owner.editor.dictionaryObject[this.documentHelper.owner.editor.dictionaryObjectIndexIncrement++] = {\n            ID: 'Default',\n            Data: this.hierarchicalData\n        };\n        if (this.documentHelper.owner.editor.xmlData && this.documentHelper.owner.editor.xmlData.length === 0) {\n            this.documentHelper.owner.editor.xmlData = this.hierarchicalData;\n        }\n    };\n    /**\n    * To initialize Context Menu.\n    * @returns {void}\n    */\n    XmlPane.prototype.initializeContextMenu = function () {\n        var menuItems = [\n            {\n                text: 'Insert Content control',\n                id: 'Insert',\n                items: [\n                    {\n                        text: 'Plain Text',\n                        id: 'PlainText'\n                    },\n                    {\n                        text: 'Picture',\n                        id: 'Picture'\n                    },\n                    {\n                        text: 'CheckBox',\n                        id: 'CheckBox'\n                    },\n                    {\n                        text: 'Combo Box',\n                        id: 'ComboBox'\n                    },\n                    {\n                        text: 'Dropdown List',\n                        id: 'DropdownList'\n                    },\n                    {\n                        text: 'Date Picker',\n                        id: 'DatePicker'\n                    },\n                ]\n            },\n            {\n                text: 'Map to selected content control',\n                id: 'MapToSelectedContentControl'\n            },\n        ];\n        var menuOptions = {\n            target: '#tree',\n            items: menuItems,\n            select: this.handleContextMenuItem.bind(this),\n            beforeOpen: this.contextMenuBeforeOpen.bind(this)\n        };\n        this.contextMenuInstance = new _syncfusion_ej2_navigations__WEBPACK_IMPORTED_MODULE_1__.ContextMenu(menuOptions, '#e-de-pane-contextmenu-list');\n    };\n    /**\n    * To intialize Drop Down List.\n    * @returns {void}\n    */\n    XmlPane.prototype.intializeDropDownList = function () {\n        this.dropDownListObject = new _syncfusion_ej2_dropdowns__WEBPACK_IMPORTED_MODULE_2__.DropDownList({\n            dataSource: this.DropDownListData,\n            fields: { text: 'Value', value: 'ID' },\n            text: this.DropDownListData[0].Value,\n            select: this.handleDropDownList.bind(this)\n        });\n        this.dropDownListObject.appendTo('#xml_mapping_properties_firstPageDiv_dropdownlist');\n    };\n    /**\n    * To handle Drop Down List collection by selection.\n    * @param {SelectEventArgs} args.\n    * @private\n    * @returns {void}\n    */\n    XmlPane.prototype.handleDropDownList = function (args) {\n        var regx = /(no namespace)/;\n        var currentID;\n        var selectedItem = args.item.innerText;\n        for (var i = 0; i < this.DropDownListData.length; i++) {\n            if (this.dropDownListObject.dataSource[i].Value == selectedItem) {\n                currentID = this.dropDownListObject.dataSource[i].ID;\n            }\n        }\n        if (selectedItem === '(Add new part...)') {\n            this.documentHelper.owner.prefixMappings = \" \";\n            this.handleFileSelect();\n        }\n        else if (regx.test(selectedItem)) {\n            this.documentHelper.owner.prefixMappings = \" \";\n            for (var i = 0; i < this.documentHelper.owner.editor.dictionaryObject.length; i++) {\n                if (currentID === this.documentHelper.owner.editor.dictionaryObject[i].ID) {\n                    this.handleTreeviewObject(i);\n                }\n            }\n        }\n        else if (selectedItem === 'Choose an XML file') {\n            this.documentHelper.owner.prefixMappings = \" \";\n            this.handleTreeviewObject(0);\n        }\n        else {\n            this.documentHelper.owner.prefixMappings = selectedItem;\n            for (var i = 0; i < this.documentHelper.owner.editor.dictionaryObject.length; i++) {\n                if (currentID === this.documentHelper.owner.editor.dictionaryObject[i].ID) {\n                    this.handleTreeviewObject(i);\n                }\n            }\n        }\n    };\n    /**\n    * To handle Treeview object collection based on the xml Data.\n    * @param {number} index.\n    * @returns {void}\n    */\n    XmlPane.prototype.handleTreeviewObject = function (index) {\n        this.treeviewObject.fields.dataSource = this.documentHelper.owner.editor.dictionaryObject[index].Data;\n        this.treeviewObject.dataBind();\n        this.documentHelper.owner.editor.xmlData = this.documentHelper.owner.editor.dictionaryObject[index].Data;\n    };\n    /**\n    * To context Menu scenario Before Open.\n    * @param {BeforeOpenCloseMenuEventArgs} args.\n    * @returns {void}\n    */\n    XmlPane.prototype.contextMenuBeforeOpen = function (args) {\n        var contentControl = this.documentHelper.owner.selection.currentContentControl;\n        var contentControlImage = this.documentHelper.owner.getImageContentControl();\n        var content = this.treeviewObject.selectedNodes;\n        var node = this.treeviewObject.getNode(content[0]);\n        if (node.hasChildren) {\n            args.cancel = true;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.contextMenuInstance)) {\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(contentControl) || !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(contentControlImage)) {\n                this.contextMenuInstance.enableItems(['Map to selected content control'], true);\n            }\n            else {\n                this.contextMenuInstance.enableItems(['Map to selected content control'], false);\n            }\n        }\n    };\n    /**\n    * To handle Context Menu Items based on Type of content control.\n    * @param {MenuEventArgs} args.\n    * @returns {void}\n    */\n    XmlPane.prototype.handleContextMenuItem = function (args) {\n        var item = args.element.id;\n        switch (item) {\n            case 'RichText':\n            case 'PlainText':\n            case 'Picture':\n            case 'ComboBox':\n            case 'DropdownList':\n            case 'CheckBox':\n            case 'DatePicker':\n                this.applyContentControl(item);\n                break;\n            case 'MapToSelectedContentControl':\n                var contentControl = this.documentHelper.owner.selection.currentContentControl;\n                var contentControlImage = this.documentHelper.owner.getImageContentControl();\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(contentControl) || !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(contentControlImage)) {\n                    this.documentHelper.owner.isXmlMapCC = true;\n                    if (this.documentHelper.owner.isXmlMapCC && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.documentHelper.owner.editor.xmlData.length) && this.documentHelper.owner.editor.xmlData.length > 0) {\n                        this.getXmlPath();\n                    }\n                    this.documentHelper.owner.selection.selectContentInternal(contentControl);\n                    if (contentControl.contentControlProperties.type !== 'CheckBox') {\n                        this.insertContent(contentControl);\n                    }\n                }\n                break;\n        }\n    };\n    XmlPane.prototype.disableBrowserContextmenu = function () {\n        return false;\n    };\n    /**\n    * To apply Content Control.\n    * @param {string} args.\n    * @returns {void}\n    */\n    XmlPane.prototype.applyContentControl = function (args) {\n        var _this = this;\n        this.documentHelper.owner.isXmlMapCC = true;\n        if (this.documentHelper.owner.isXmlMapCC && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.documentHelper.owner.editor.xmlData.length) && this.documentHelper.owner.editor.xmlData.length > 0) {\n            this.getXmlPath();\n        }\n        var contentControl = this.documentHelper.owner.selection.currentContentControl;\n        var contentControlImage = this.documentHelper.owner.getImageContentControl();\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(contentControl) || !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(contentControlImage)) {\n            var localObj = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.L10n('documenteditor', this.documentHelper.owner.defaultLocale);\n            localObj.setLocale(this.documentHelper.owner.locale);\n            this.alertDialog = _syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_3__.DialogUtility.alert({\n                title: localObj.getConstant('Information'),\n                content: localObj.getConstant('Discard Content Control'),\n                okButton: { text: localObj.getConstant('Ok') },\n                showCloseIcon: true,\n                closeOnEscape: true,\n                animationSettings: { effect: 'Zoom' },\n                position: { X: 'center', Y: 'center' },\n                close: function () {\n                    _this.closeDialogUtils.bind(_this);\n                }\n            });\n        }\n        else {\n            switch (args) {\n                case 'PlainText':\n                    this.documentHelper.owner.editor.insertContentControl('Text');\n                    this.insertContent();\n                    break;\n                case 'RichText':\n                    this.documentHelper.owner.editor.insertContentControl('RichText');\n                    this.insertContent();\n                    break;\n                case 'Picture':\n                    this.documentHelper.owner.showDialog('PictureContentControl');\n                    break;\n                case 'ComboBox':\n                    this.documentHelper.owner.editor.insertContentControl('ComboBox');\n                    this.insertContent();\n                    break;\n                case 'DropdownList':\n                    this.documentHelper.owner.editor.insertContentControl('DropDownList');\n                    this.insertContent();\n                    break;\n                case 'CheckBox':\n                    this.documentHelper.owner.editor.insertContentControl('CheckBox');\n                    break;\n                case 'DatePicker':\n                    this.documentHelper.owner.editor.insertContentControl('Date');\n                    this.insertContent();\n                    break;\n            }\n        }\n    };\n    /**\n    * To insert Content inside the content control.\n    * @returns {void}\n    */\n    XmlPane.prototype.insertContent = function (contentControl) {\n        var selectedNode = this.treeviewObject.selectedNodes.toString();\n        for (var i = 1; i < this.documentHelper.owner.editor.xmlData.length; i++) {\n            var xmlID = this.documentHelper.owner.editor.xmlData[i].id.toString();\n            if (selectedNode == xmlID) {\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.documentHelper.owner.editor.xmlData[i].displayValue)) {\n                    var content = this.documentHelper.owner.editor.xmlData[i].displayValue.toString();\n                    if (contentControl) {\n                        var text = this.documentHelper.owner.editor.getResultContentControlText(contentControl);\n                        if (text !== content) {\n                            this.documentHelper.owner.editor.insertText(content);\n                            this.documentHelper.owner.editor.addXmlProperties(contentControl.contentControlProperties, this.documentHelper.owner.xPathString);\n                        }\n                    }\n                    else {\n                        this.documentHelper.owner.editor.insertText(content);\n                    }\n                }\n            }\n        }\n        this.documentHelper.owner.isXmlMapCC = false;\n    };\n    /**\n     * @private\n     * @returns {void}\n     */\n    XmlPane.prototype.updateContent = function (updatedText, xpath) {\n        if (updatedText === String.fromCharCode(9744) || updatedText === String.fromCharCode(9746)) {\n            this.updateCheckBoxContentControl(updatedText, xpath);\n        }\n        else {\n            if (this.documentHelper.owner.xmlPaneModule.isXmlPaneShow) {\n                this.updateXMLData(updatedText);\n            }\n            var start = this.documentHelper.selection.start.clone();\n            var end = this.documentHelper.selection.end.clone();\n            for (var i = 0; i < this.documentHelper.contentControlCollection.length; i++) {\n                var contentControl = this.documentHelper.contentControlCollection[i];\n                if (contentControl.contentControlProperties.xmlMapping && contentControl.contentControlProperties.xmlMapping.xPath === xpath && contentControl.contentControlProperties.type !== 'CheckBox') {\n                    var text = this.documentHelper.owner.editor.getResultContentControlText(contentControl);\n                    if (text !== updatedText) {\n                        this.updateContentControl(contentControl, updatedText);\n                    }\n                }\n            }\n            this.documentHelper.selection.selectRange(start, end);\n        }\n    };\n    XmlPane.prototype.updateContentControl = function (contentControl, updatedText) {\n        this.documentHelper.selection.selectContentControlInternal(contentControl);\n        this.documentHelper.owner.editor.insertText(updatedText);\n    };\n    XmlPane.prototype.updateCheckBoxContentControl = function (updatedText, xpath) {\n        var isChecked;\n        if (updatedText === String.fromCharCode(9746)) {\n            isChecked = 'true';\n        }\n        else if (updatedText === String.fromCharCode(9744)) {\n            isChecked = 'false';\n        }\n        if (this.documentHelper.owner.xmlPaneModule.isXmlPaneShow) {\n            this.updateXMLData(updatedText);\n        }\n        var start = this.documentHelper.selection.start.clone();\n        var end = this.documentHelper.selection.end.clone();\n        for (var i = 0; i < this.documentHelper.contentControlCollection.length; i++) {\n            var contentControl = this.documentHelper.contentControlCollection[i];\n            if (contentControl.contentControlProperties.xmlMapping && contentControl.contentControlProperties.xmlMapping.xPath === xpath && contentControl.contentControlProperties.type !== 'CheckBox') {\n                this.updateContentControl(contentControl, isChecked);\n            }\n            else if (contentControl.contentControlProperties.xmlMapping && contentControl.contentControlProperties.xmlMapping.xPath === xpath && contentControl.contentControlProperties.type === 'CheckBox') {\n                this.updateContentControl(contentControl, updatedText);\n            }\n        }\n        this.documentHelper.selection.selectRange(start, end);\n    };\n    XmlPane.prototype.updateXMLData = function (Text) {\n        var selectedNode = this.treeviewObject.selectedNodes.toString();\n        for (var i = 1; i < this.documentHelper.owner.editor.xmlData.length; i++) {\n            var xmlID = this.documentHelper.owner.editor.xmlData[i].id.toString();\n            if (selectedNode === xmlID) {\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.documentHelper.owner.editor.xmlData[i].displayValue)) {\n                    this.documentHelper.owner.editor.xmlData[i].displayValue = Text;\n                }\n            }\n        }\n    };\n    /**\n    * To get the XMLpath to bind in the XML mapping property\n    * @returns {}\n    */\n    XmlPane.prototype.getXmlPath = function () {\n        var selectedNode = this.treeviewObject.selectedNodes.toString();\n        var xPath = \"\";\n        var nodeId = Number(selectedNode) - 1;\n        for (var i = this.documentHelper.owner.editor.xmlData.length - 1; i >= 0; i--) {\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.documentHelper.owner.editor.xmlData[nodeId]) && this.documentHelper.owner.editor.xmlData[nodeId].pid == this.documentHelper.owner.editor.xmlData[i].id.toString()) {\n                xPath = \"\\\\\" + this.documentHelper.owner.editor.xmlData[i].displayText + \"[1]\" + \"\\\\\" + xPath;\n                nodeId = i;\n            }\n        }\n        var nodeNumber = Number(selectedNode) - 1;\n        if (this.documentHelper.owner.editor.xmlData[nodeNumber]) {\n            xPath = xPath + this.documentHelper.owner.editor.xmlData[nodeNumber].displayText.toString() + \"[1]\";\n            this.documentHelper.owner.xPathString = xPath;\n        }\n    };\n    XmlPane.prototype.closeDialogUtils = function () {\n        this.alertDialog.close();\n        this.alertDialog = undefined;\n    };\n    /**\n    * To create Div Template.\n    * @param {string} id.\n    * @param {HTMLElement} parentDiv.\n    * @param {string} style.\n    * @returns {HTMLElement}\n    */\n    XmlPane.prototype.createDivTemplate = function (id, parentDiv, style) {\n        var divElement;\n        if (style) {\n            divElement = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div', { id: id, styles: style });\n        }\n        else {\n            divElement = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div', { id: id });\n        }\n        parentDiv.appendChild(divElement);\n        return divElement;\n    };\n    /**\n    * To on File Selection.\n    * @param {File} file.\n    * @returns {void}\n    */\n    XmlPane.prototype.onFileSelect = function (file) {\n        var _this = this;\n        var reader = new FileReader();\n        reader.onload = function () {\n            var xmlString = reader.result;\n            _this.addDataFromCustomXML(xmlString);\n        };\n        reader.readAsText(file);\n    };\n    /**\n     * data from xml to the xml pane.\n     *\n     * @private\n     * @param {string} xmlString - Specifies the custom xmlpart xml.\n     * @returns {void}\n     */\n    XmlPane.prototype.addDataFromCustomXML = function (xmlString) {\n        this.documentHelper.owner.editor.getPrefixMapping(xmlString);\n        var parsedXml = this.documentHelper.owner.editor.parseXml(xmlString);\n        var arr = this.documentHelper.owner.editor.objectToArray(parsedXml);\n        this.documentHelper.owner.editor.setXmlData(parsedXml, arr);\n        this.addingNewFileToDropDownList();\n    };\n    /**\n    * To add New File To Drop Down List.\n    * @param {File} file.\n    * @private\n    * @returns {void}\n    */\n    XmlPane.prototype.addingNewFileToDropDownList = function () {\n        if (this.documentHelper.owner.editor.XMLFilesNameSpaceCount == 1 && this.documentHelper.owner.prefixMappings == null) {\n            this.DropDownListData.splice(this.DropDownListData.length - 1, 0, { ID: \"(no namespace)_\" + this.documentHelper.owner.editor.XMLFilesCount, Value: \"(no namespace)\" });\n            this.documentHelper.owner.editor.XMLFilesNameSpaceCount++;\n        }\n        else if (this.documentHelper.owner.editor.XMLFilesNameSpaceCount > 1 && this.documentHelper.owner.prefixMappings == null) {\n            this.DropDownListData.splice(this.DropDownListData.length - 1, 0, { ID: \"(no namespace)_\" + this.documentHelper.owner.editor.XMLFilesCount, Value: \"(no namespace) (\" + this.documentHelper.owner.editor.XMLFilesNameSpaceCount + \")\" });\n            this.documentHelper.owner.editor.XMLFilesNameSpaceCount++;\n        }\n        else if (this.documentHelper.owner.prefixMappings) {\n            this.DropDownListData.splice(this.DropDownListData.length - 1, 0, { ID: \"(no namespace)_\" + this.documentHelper.owner.editor.XMLFilesCount, Value: this.documentHelper.owner.prefixMappings });\n        }\n        this.dropDownListObject.dataSource = this.DropDownListData;\n        this.dropDownListObject.refresh();\n        this.dropDownListObject.value = this.DropDownListData[0].ID;\n        this.dropDownListObject.text = this.DropDownListData[0].Value;\n        this.documentHelper.owner.editor.XMLFilesCount++;\n    };\n    /**\n     * To show Xml Properties.\n     *\n     * @private\n     * @param {boolean} show - Specifies showing or hiding the xml pane.\n     * @returns {void}\n     */\n    XmlPane.prototype.showXmlProperties = function (show) {\n        this.isXmlPaneShow = show;\n        if (show) {\n            this.localeValue = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.L10n('documenteditor', this.documentHelper.owner.defaultLocale);\n            this.localeValue.setLocale(this.documentHelper.owner.locale);\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(XmlPane)) {\n                this.initializeXmlMapping();\n                var isRtl = this.documentHelper.owner.enableRtl;\n                var optionsPaneContainerStyle = void 0;\n                if (isRtl) {\n                    optionsPaneContainerStyle = 'display:inline-flex;direction:rtl;';\n                }\n                else {\n                    optionsPaneContainerStyle = 'display:inline-flex;';\n                }\n                this.documentHelper.optionsPaneContainer.insertBefore(this.documentHelper.owner.xmlPaneModule.element, this.documentHelper.viewerContainer);\n                this.documentHelper.owner.isXmlPaneTool = true;\n            }\n            this.documentHelper.owner.resize();\n            if (show && !this.contextMenuInstance) {\n                this.initializeContextMenu();\n                this.intializeDropDownList();\n                // To check whether the xml Mapping were newly added or the existing one for closing/opening xml pane.\n                if (!this.isAddedDocumentXml) {\n                    this.isAddedDocumentXml = true;\n                    for (var i = 0; i < this.documentHelper.customXmlData.length; i++) {\n                        var key = this.documentHelper.customXmlData.keys[i];\n                        var xmlValue = this.documentHelper.customXmlData.get(key);\n                        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(xmlValue)) {\n                            this.addDataFromCustomXML(xmlValue);\n                        }\n                    }\n                }\n            }\n            this.documentHelper.updateViewerSize();\n        }\n        else {\n            this.documentHelper.updateViewerSize();\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.element)) {\n                if (this.element.style.display !== 'none') {\n                    this.element.style.display = 'none';\n                }\n            }\n            this.destroyInternal();\n            this.documentHelper.owner.isXmlPaneTool = false;\n            this.documentHelper.owner.triggerResize();\n        }\n    };\n    /**\n    * @private\n    * @returns {void}\n    */\n    XmlPane.prototype.clear = function () {\n        if (this.DropDownListData.length > 2) {\n            for (var i = 0; i < this.DropDownListData.length; i++) {\n                var id = this.DropDownListData[i].ID;\n                if (id !== \"Choose\" && id !== 'Add') {\n                    this.DropDownListData.splice(i, 1);\n                    i--;\n                }\n            }\n        }\n        this.isAddedDocumentXml = false;\n    };\n    /**\n     * Dispose the internal objects which are maintained.\n     *\n     * @private\n     * @returns {void}\n     */\n    XmlPane.prototype.destroyInternal = function () {\n        if (this.treeviewObject) {\n            this.treeviewObject.destroy();\n            this.treeviewObject = undefined;\n        }\n        if (this.contextMenuInstance) {\n            this.contextMenuInstance.destroy();\n            this.contextMenuInstance = undefined;\n        }\n        if (this.positionLabelDiv) {\n            this.positionLabelDiv.innerHTML = '';\n            this.positionLabelDiv = undefined;\n        }\n        if (this.dropDownListObject) {\n            this.dropDownListObject.destroy();\n            this.dropDownListObject = undefined;\n        }\n        if (this.element) {\n            this.element.innerHTML = '';\n            if (this.element.parentElement) {\n                this.element.parentElement.removeChild(this.element);\n            }\n        }\n        this.element = undefined;\n    };\n    /**\n     * Dispose the internal objects which are maintained.\n     *\n     * @private\n     * @returns {void}\n     */\n    XmlPane.prototype.destroy = function () {\n        if (this.treeviewObject) {\n            this.treeviewObject.destroy();\n            this.treeviewObject = undefined;\n        }\n        if (this.contextMenuInstance) {\n            this.contextMenuInstance.destroy();\n            this.contextMenuInstance = undefined;\n        }\n        if (this.positionLabelDiv) {\n            this.positionLabelDiv.innerHTML = '';\n            this.positionLabelDiv = undefined;\n        }\n        if (this.dropDownListObject) {\n            this.dropDownListObject.destroy();\n            this.dropDownListObject = undefined;\n        }\n        if (this.element) {\n            this.element.innerHTML = '';\n            if (this.element.parentElement) {\n                this.element.parentElement.removeChild(this.element);\n            }\n        }\n        this.element = undefined;\n        this.documentHelper = undefined;\n    };\n    return XmlPane;\n}());\n\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-documenteditor/src/document-editor/implementation/editor/xml-pane.js?");

/***/ })

}]);