"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkej2_vue_samples"] = self["webpackChunkej2_vue_samples"] || []).push([["chunk-vendors-node_modules_syncfusion_ej2-inputs_src_otp-input_otp-input_js-4443c514"],{

/***/ "./node_modules/@syncfusion/ej2-inputs/src/otp-input/otp-input.js":
/*!************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-inputs/src/otp-input/otp-input.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   OtpInput: () => (/* binding */ OtpInput),\n/* harmony export */   OtpInputStyle: () => (/* binding */ OtpInputStyle),\n/* harmony export */   OtpInputType: () => (/* binding */ OtpInputType),\n/* harmony export */   TextTransform: () => (/* binding */ TextTransform)\n/* harmony export */ });\n/* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @syncfusion/ej2-base */ \"./node_modules/@syncfusion/ej2-base/index.js\");\nvar __extends = (undefined && undefined.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar INPUTFIELD = 'e-otp-input-field';\nvar RTL = 'e-rtl';\n/**\n * Specifies the type of input for the Otp (One-Time Password) input component.\n */\nvar OtpInputType;\n(function (OtpInputType) {\n    /**\n     * Specifies the type of input to be number for the Otp input.\n     */\n    OtpInputType[\"Number\"] = \"number\";\n    /**\n     * Specifies the type of input to be text for the Otp input.\n     */\n    OtpInputType[\"Text\"] = \"text\";\n    /**\n     * Specifies the type of input to be password for the Otp input.\n     */\n    OtpInputType[\"Password\"] = \"password\";\n})(OtpInputType || (OtpInputType = {}));\n/**\n * Specifies the style variant for the Otp (One-Time Password) input component.\n */\nvar OtpInputStyle;\n(function (OtpInputStyle) {\n    /**\n     * Specifies the style of the Otp input to be outlined.\n     */\n    OtpInputStyle[\"Outlined\"] = \"outlined\";\n    /**\n     * Specifies the style of the Otp input to be underlined.\n     */\n    OtpInputStyle[\"Underlined\"] = \"underlined\";\n    /**\n     * Specifies the style of the Otp input to be filled.\n     */\n    OtpInputStyle[\"Filled\"] = \"filled\";\n})(OtpInputStyle || (OtpInputStyle = {}));\n/**\n * Enum for the case transformation options for OTP input text.\n *\n * @readonly\n * @enum {string}\n */\nvar TextTransform;\n(function (TextTransform) {\n    /**\n     * No case transformation. The input text remains unchanged.\n     */\n    TextTransform[\"None\"] = \"none\";\n    /**\n     * Convert the input text to uppercase.\n     */\n    TextTransform[\"Uppercase\"] = \"uppercase\";\n    /**\n     * Convert the input text to lowercase.\n     */\n    TextTransform[\"Lowercase\"] = \"lowercase\";\n})(TextTransform || (TextTransform = {}));\n/**\n * Represents the Otp component that allows the user to enter the otp values.\n * ```html\n * <div id='OTPInput'></div>\n * ```\n * ```typescript\n * <script>\n *   var OtpinputObj = new OtpInput();\n *   OtpinputObj.appendTo('#OTPInput');\n * </script>\n * ```\n */\nvar OtpInput = /** @class */ (function (_super) {\n    __extends(OtpInput, _super);\n    function OtpInput(options, element) {\n        var _this = _super.call(this, options, element) || this;\n        /* Private variables */\n        _this.inputs = [];\n        _this.previousValue = '';\n        _this.separatorElements = [];\n        _this.shouldFireFocus = true;\n        _this.shouldFireBlur = true;\n        _this.isFocusInCalled = false;\n        _this.isFocusOutCalled = false;\n        _this.handleWheelEvent = function (e) {\n            e.preventDefault();\n        };\n        return _this;\n    }\n    OtpInput.prototype.preRender = function () {\n        if (!this.element.id) {\n            this.element.id = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getUniqueID)('e-' + this.getModuleName());\n        }\n    };\n    OtpInput.prototype.render = function () {\n        this.initialize();\n    };\n    OtpInput.prototype.initialize = function () {\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.attributes)(this.element, { 'role': 'group' });\n        this.renderInputs();\n        this.renderSeparator(1, this.inputs.length);\n        this.addPlaceHolder();\n        this.updateCssClass(this.cssClass);\n        this.updateVariantClass();\n        this.updateAriaLabel(this.ariaLabels);\n        this.setElementAttributes(this.htmlAttributes, this.element);\n        if (this.enableRtl) {\n            this.element.classList.add(RTL);\n        }\n        this.previousValue = this.value.toString();\n        if (this.autoFocus) {\n            this.focusIn();\n        }\n    };\n    OtpInput.prototype.renderInputs = function () {\n        this.hiddenInputEle = this.createElement('input', {\n            id: 'otpInput_hidden',\n            attrs: {\n                name: this.element.id,\n                type: 'hidden',\n                value: this.type === 'number' ? this.value.toString().replace(/\\D/g, '') : this.value.toString(),\n                autoComplete: 'off'\n            }\n        });\n        this.element.appendChild(this.hiddenInputEle);\n        for (var i = 0; i < this.length; i++) {\n            this.createOtpInput(i);\n        }\n    };\n    OtpInput.prototype.createOtpInput = function (index) {\n        var valueContainer = this.getDefaultValue();\n        var inputValue = '';\n        if (valueContainer) {\n            var valueAtIndex = valueContainer[parseInt(index.toString(), 10)];\n            if (this.type === 'number') {\n                if (!isNaN(Number(valueAtIndex))) {\n                    inputValue = valueAtIndex;\n                }\n            }\n            else {\n                inputValue = valueAtIndex || '';\n            }\n        }\n        var inputEle = this.createElement('input', {\n            id: this.element.id + \"-\" + (index + 1),\n            className: INPUTFIELD + ' ' + 'e-input',\n            attrs: {\n                maxlength: '1',\n                type: this.type,\n                inputmode: this.htmlAttributes['inputmode'] || (this.type === 'number' ? 'numeric' : 'text')\n            }\n        });\n        if (this.disabled) {\n            inputEle.setAttribute('disabled', 'disabled');\n        }\n        this.element.appendChild(inputEle);\n        this.inputs.push(inputEle);\n        if (inputValue) {\n            inputEle.value = inputValue;\n        }\n        this.wireEvents(inputEle, index);\n    };\n    OtpInput.prototype.renderSeparator = function (index, length) {\n        if (this.separator.length > 0) {\n            for (var i = index; i < length; i++) {\n                var separatorElement = this.createElement('span', {\n                    className: 'e-otp-separator'\n                });\n                separatorElement.textContent = this.separator;\n                this.separatorElements.push(separatorElement);\n                this.element.insertBefore(separatorElement, this.inputs[parseInt(i.toString(), 10)]);\n            }\n        }\n    };\n    OtpInput.prototype.updateSeparatorValue = function () {\n        var _this = this;\n        if (this.separator === '') {\n            this.separatorElements.forEach(function (element) { return (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.remove)(element); });\n            this.separatorElements = [];\n        }\n        else {\n            this.separatorElements.forEach(function (element) {\n                element.textContent = _this.separator;\n            });\n        }\n    };\n    OtpInput.prototype.addPlaceHolder = function () {\n        for (var i = 0; i < this.inputs.length; i++) {\n            var placeholderValue = this.placeholder.length <= 1 ? this.placeholder : this.placeholder.charAt(i);\n            this.setElementAttributes({ 'placeholder': placeholderValue }, this.inputs[parseInt(i.toString(), 10)]);\n        }\n    };\n    OtpInput.prototype.updateInputType = function (inputType) {\n        var inputMode = this.htmlAttributes['inputmode'] || (inputType === 'number' ? 'numeric' : 'text');\n        this.inputs.forEach(function (input) {\n            input.type = inputType;\n            input.setAttribute('inputmode', inputMode);\n        });\n    };\n    OtpInput.prototype.getDefaultValue = function () {\n        var extractedValue = typeof this.value === 'number' ? this.value.toString() : this.value;\n        if (this.textTransform) {\n            extractedValue = this.getTransformedText(extractedValue);\n        }\n        // To remove the white space if present.\n        var value = extractedValue.replace(/\\s/g, '');\n        return value.length > 0 ? value.split('') : undefined;\n    };\n    OtpInput.prototype.getTransformedText = function (transformingText) {\n        var transformedText = this.textTransform.toLowerCase() === TextTransform.Lowercase ? transformingText.toLowerCase() :\n            this.textTransform.toLowerCase() === TextTransform.Uppercase ? transformingText.toUpperCase() : transformingText;\n        return transformedText;\n    };\n    OtpInput.prototype.handleInputChange = function (index, event) {\n        var currentInputElement = this.inputs[parseInt(index.toString(), 10)];\n        if (currentInputElement && index < this.length - 1 && currentInputElement.value.length > 0) {\n            var nextInputElement = this.inputs[parseInt(index.toString(), 10) + 1];\n            this.shouldFireFocus = this.shouldFireBlur = false;\n            nextInputElement.focus();\n            if (nextInputElement && nextInputElement.value.length > 0) {\n                nextInputElement.select();\n            }\n        }\n        var target = event.target;\n        if (target.value.length > 1) {\n            target.value = target.value.slice(0, 1);\n        }\n        if (this.textTransform) {\n            target.value = this.getTransformedText(target.value);\n        }\n        this.triggerInputEvent(index, event);\n        this.triggerValuechanged(event, true);\n    };\n    OtpInput.prototype.handleKeyAction = function (index, event) {\n        if (event.key.length > 1 && !((index === 0 && event.key === 'Backspace') ||\n            (index === this.length - 1 && event.key === 'Delete'))) {\n            this.shouldFireFocus = this.shouldFireBlur = false;\n        }\n        var currentInputElement = this.inputs[parseInt(index.toString(), 10)];\n        var previousInputElement = this.inputs[parseInt(index.toString(), 10) - 1];\n        var nextInputElement = this.inputs[parseInt(index.toString(), 10) + 1];\n        if (event.key === 'Delete') {\n            var value = '';\n            if (currentInputElement.value.length > 0) {\n                value = currentInputElement.value;\n                currentInputElement.value = '';\n            }\n            else if (index !== this.inputs.length - 1) {\n                value = nextInputElement.value;\n                nextInputElement.value = '';\n                nextInputElement.focus();\n            }\n            if (value.length > 0) {\n                this.triggerInputEvent(index, event);\n            }\n        }\n        else if (event.key === 'Backspace') {\n            if (index !== 0 && currentInputElement.value.length === 0) {\n                var previousValue = previousInputElement.value;\n                previousInputElement.value = '';\n                previousInputElement.focus();\n                if (previousValue.length > 0) {\n                    this.triggerInputEvent(index, event);\n                }\n            }\n        }\n        else if (event.key === 'ArrowLeft' || event.key === 'ArrowRight') {\n            if (event.key === 'ArrowLeft' && index > 0) {\n                previousInputElement.focus();\n                previousInputElement.select();\n            }\n            else if (event.key === 'ArrowRight' && index < this.inputs.length - 1) {\n                nextInputElement.focus();\n                nextInputElement.select();\n            }\n            event.preventDefault();\n        }\n        else if (event.key === 'ArrowUp' || event.key === 'ArrowDown') {\n            event.preventDefault();\n        }\n        else if (event.key !== 'Tab' && !event.shiftKey && !event.ctrlKey) {\n            if (this.type === 'number' && (/\\D/.test(event.key.toLocaleLowerCase()))) {\n                event.preventDefault();\n            }\n        }\n    };\n    OtpInput.prototype.handleSelection = function (index) {\n        var currentInputElement = this.inputs[parseInt(index.toString(), 10)];\n        if (currentInputElement.value) {\n            currentInputElement.select();\n        }\n    };\n    OtpInput.prototype.handleFocus = function (index, event) {\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([this.inputs[parseInt(index.toString(), 10)]], 'e-otp-input-focus');\n        if (this.shouldFireFocus) {\n            var eventArgs = {\n                element: this.element,\n                event: event,\n                index: index,\n                isInteracted: this.isFocusInCalled ? false : true,\n                value: this.value\n            };\n            this.trigger('focus', eventArgs);\n        }\n        this.shouldFireFocus = true;\n    };\n    OtpInput.prototype.handleBlur = function (index, event) {\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([this.inputs[parseInt(index.toString(), 10)]], 'e-otp-input-focus');\n        if (this.shouldFireBlur) {\n            var eventArgs = {\n                element: this.element,\n                event: event,\n                value: this.value,\n                index: index,\n                isInteracted: this.isFocusOutCalled ? false : true\n            };\n            this.trigger('blur', eventArgs);\n        }\n        this.shouldFireBlur = true;\n    };\n    OtpInput.prototype.handlePaste = function (index, event) {\n        var clipboardData = event.clipboardData;\n        if (clipboardData) {\n            var pastedText = clipboardData.getData('text');\n            var pastedValues = pastedText.split('');\n            var pastedValueIndex = 0;\n            for (var i = index; i < this.inputs.length; i++) {\n                if (pastedValues.length > 0 && pastedValues[parseInt(pastedValueIndex.toString(), 10)]) {\n                    this.inputs[parseInt(i.toString(), 10)].value = pastedValues[parseInt(pastedValueIndex.toString(), 10)];\n                    pastedValueIndex++;\n                    this.updateValueProperty();\n                }\n            }\n            this.focusIn();\n            this.triggerValuechanged(event, true);\n        }\n    };\n    OtpInput.prototype.triggerInputEvent = function (index, event) {\n        var previousValue = this.value.toString();\n        this.updateValueProperty();\n        var inputEventArgs = {\n            element: this.element,\n            event: event,\n            previousValue: previousValue,\n            value: this.value.toString(),\n            index: index\n        };\n        this.trigger('input', inputEventArgs);\n    };\n    OtpInput.prototype.triggerValuechanged = function (event, isInteracted) {\n        if (this.length === this.value.toString().length) {\n            if (this.previousValue !== this.value) {\n                var eventArgs = {\n                    element: this.element,\n                    event: event,\n                    isInteracted: isInteracted ? isInteracted : false,\n                    previousValue: this.previousValue,\n                    value: this.value\n                };\n                this.trigger('valueChanged', eventArgs);\n                this.previousValue = this.value.toString();\n            }\n        }\n    };\n    OtpInput.prototype.wireEvents = function (inputEle, index) {\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(inputEle, 'focus', this.handleFocus.bind(this, index), this);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(inputEle, 'blur', this.handleBlur.bind(this, index), this);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(inputEle, 'input', this.handleInputChange.bind(this, index), this);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(inputEle, 'keydown', this.handleKeyAction.bind(this, index), this);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(inputEle, 'click', this.handleSelection.bind(this, index), this);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(inputEle, 'paste', this.handlePaste.bind(this, index), this);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(inputEle, 'wheel', this.handleWheelEvent, this);\n    };\n    OtpInput.prototype.unWireEvents = function () {\n        for (var i = 0; i < this.inputs.length; i++) {\n            var currentInputElement = this.inputs[parseInt(i.toString(), 10)];\n            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(currentInputElement, 'focus', this.handleFocus.bind(this, i));\n            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(currentInputElement, 'blur', this.handleBlur.bind(this, i));\n            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(currentInputElement, 'input', this.handleInputChange.bind(this, i));\n            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(currentInputElement, 'keydown', this.handleKeyAction.bind(this, i));\n            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(currentInputElement, 'click', this.handleSelection.bind(this, i));\n            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(currentInputElement, 'paste', this.handlePaste.bind(this, i));\n            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(currentInputElement, 'wheel', this.handleWheelEvent);\n        }\n    };\n    OtpInput.prototype.updateValueProperty = function () {\n        var value = '';\n        this.inputs.forEach(function (input) {\n            value += input.value;\n        });\n        var prevOnChange = this.isProtectedOnChange;\n        this.isProtectedOnChange = true;\n        this.value = typeof this.value === 'number' ? parseInt(value, 10) : value;\n        this.isProtectedOnChange = prevOnChange;\n        this.hiddenInputEle.value = this.value.toString();\n    };\n    OtpInput.prototype.updateInputValue = function (previousValue) {\n        var stringifiedValue = this.value.toString();\n        if (this.textTransform) {\n            stringifiedValue = this.getTransformedText(stringifiedValue);\n        }\n        var previousStringValue = previousValue.toString();\n        for (var i = 0; i < this.inputs.length; i++) {\n            if (previousStringValue.charAt(i) !== stringifiedValue.charAt(i)) {\n                this.inputs[parseInt(i.toString(), 10)].value = stringifiedValue.charAt(i);\n                this.hiddenInputEle.value = stringifiedValue;\n            }\n        }\n        this.focusIn();\n    };\n    OtpInput.prototype.updateCssClass = function (addCss, removeCss) {\n        if (removeCss === void 0) { removeCss = ''; }\n        var _a, _b;\n        var cssClasses;\n        if (removeCss) {\n            cssClasses = removeCss.trim().split(' ');\n            (_a = this.element.classList).remove.apply(_a, cssClasses);\n        }\n        if (addCss) {\n            cssClasses = addCss.trim().split(' ');\n            (_b = this.element.classList).add.apply(_b, cssClasses);\n        }\n    };\n    OtpInput.prototype.updateVariantClass = function () {\n        var variantClass = this.stylingMode.toLocaleLowerCase() === 'outlined' ? 'outline' : this.stylingMode.toLocaleLowerCase();\n        var validClasses = ['underlined', 'filled', 'outline'];\n        if (validClasses.indexOf(variantClass) !== -1) {\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([this.element], validClasses.map(function (cls) { return \"e-\" + cls; }));\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([this.element], \"e-\" + variantClass);\n        }\n    };\n    OtpInput.prototype.updateAriaLabel = function (customAriaLabel) {\n        this.inputs.forEach(function (input, index) {\n            var defaultLabel = \"Enter Otp Character \" + (index + 1);\n            var ariaLabel = customAriaLabel && customAriaLabel.length > 0\n                ? customAriaLabel[parseInt(index.toString(), 10)] || defaultLabel\n                : defaultLabel;\n            input.setAttribute('aria-label', ariaLabel);\n        });\n    };\n    OtpInput.prototype.updateDisabledState = function () {\n        var _this = this;\n        this.inputs.forEach(function (input) {\n            if (_this.disabled) {\n                input.setAttribute('disabled', 'disabled');\n            }\n            else {\n                input.removeAttribute('disabled');\n            }\n        });\n    };\n    OtpInput.prototype.setElementAttributes = function (htmlAttributes, element) {\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(htmlAttributes)) {\n            for (var key in htmlAttributes) {\n                if (key === 'class') {\n                    var elementClass = htmlAttributes['class'].replace(/\\s+/g, ' ').trim();\n                    if (elementClass) {\n                        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([element], elementClass.split(' '));\n                    }\n                }\n                else if (key === 'inputmode') {\n                    this.setInputMode(htmlAttributes[\"\" + key]);\n                }\n                else if (key === 'name' && this.element.id === element.id) {\n                    this.hiddenInputEle.setAttribute(key, htmlAttributes[\"\" + key]);\n                }\n                else {\n                    element.setAttribute(key, htmlAttributes[\"\" + key]);\n                }\n            }\n        }\n    };\n    OtpInput.prototype.setInputMode = function (inputModeValue) {\n        for (var i = 0; i < this.inputs.length; i++) {\n            this.inputs[parseInt(i.toString(), 10)].setAttribute('inputmode', inputModeValue);\n        }\n    };\n    OtpInput.prototype.handleLengthChange = function (currentValue, previousValue) {\n        var isLengthAdded = (currentValue - previousValue) > 0;\n        if (isLengthAdded) {\n            for (var i = previousValue; i < currentValue; i++) {\n                this.createOtpInput(i);\n            }\n            this.renderSeparator(previousValue, currentValue);\n            this.addPlaceHolder();\n            this.updateAriaLabel(this.ariaLabels);\n        }\n        else {\n            if (currentValue >= 0 && this.inputs.length > 0) {\n                for (var i = currentValue; i < this.inputs.length; i++) {\n                    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.remove)(this.inputs[parseInt(i.toString(), 10)]);\n                }\n                this.inputs.splice(currentValue);\n                if (this.separatorElements.length > 0) {\n                    // separator should be completely removed when length is 0 or 1;\n                    var index = currentValue === 0 ? 0 : currentValue - 1;\n                    for (var i = index; i < this.separatorElements.length; i++) {\n                        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.remove)(this.separatorElements[parseInt(i.toString(), 10)]);\n                    }\n                    this.separatorElements.splice(index);\n                }\n            }\n        }\n    };\n    /**\n     * To get component name.\n     *\n     * @returns {string} - Module Name\n     * @private\n     */\n    OtpInput.prototype.getModuleName = function () {\n        return 'otpinput';\n    };\n    /**\n     * To get the properties to be maintained in the persisted state.\n     *\n     * @returns {string} - Persist data\n     */\n    OtpInput.prototype.getPersistData = function () {\n        return this.addOnPersist([]);\n    };\n    /**\n     * Destroy the Otp input.\n     *\n     * @returns {void}\n     */\n    OtpInput.prototype.destroy = function () {\n        _super.prototype.destroy.call(this);\n        this.unWireEvents();\n        this.inputs.forEach(function (input) { (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.remove)(input); });\n        this.separatorElements.forEach(function (separatorElement) { (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.remove)(separatorElement); });\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.remove)(this.hiddenInputEle);\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([this.element], ['e-underlined', 'e-filled', 'e-outline', 'e-rtl']);\n        if (this.cssClass) {\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([this.element], this.cssClass.trim().split(' '));\n        }\n        this.element.removeAttribute('role');\n        this.inputs = [];\n        this.separatorElements = [];\n        this.hiddenInputEle = null;\n    };\n    /**\n     * Sets the focus to the Otp input for interaction.\n     *\n     * @returns {void}\n     */\n    OtpInput.prototype.focusIn = function () {\n        this.isFocusInCalled = true;\n        var focusIndex = this.inputs.length - 1;\n        for (var index = 0; index < this.inputs.length; index++) {\n            if (!(this.inputs[parseInt(index.toString(), 10)].value.length > 0)) {\n                focusIndex = index;\n                break;\n            }\n        }\n        this.inputs[parseInt(focusIndex.toString(), 10)].focus();\n        this.isFocusInCalled = false;\n    };\n    /**\n     * Remove the focus from Otp input, if it is in focus state.\n     *\n     * @returns {void}\n     */\n    OtpInput.prototype.focusOut = function () {\n        this.isFocusOutCalled = true;\n        this.inputs.forEach(function (input) {\n            input.blur();\n        });\n        this.isFocusOutCalled = false;\n    };\n    /**\n     * Called internally if any of the property value changed.\n     *\n     * @param  {OtpInputModel} newProp - Specifies new properties\n     * @param  {OtpInputModel} oldProp - Specifies old properties\n     * @returns {void}\n     * @private\n     */\n    OtpInput.prototype.onPropertyChanged = function (newProp, oldProp) {\n        for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {\n            var prop = _a[_i];\n            switch (prop) {\n                case 'textTransform':\n                    this.updateInputValue(this.value);\n                    break;\n                case 'value':\n                    this.updateInputValue(oldProp.value);\n                    this.triggerValuechanged();\n                    break;\n                case 'placeholder':\n                    this.addPlaceHolder();\n                    break;\n                case 'disabled':\n                    this.updateDisabledState();\n                    break;\n                case 'cssClass':\n                    this.updateCssClass(newProp.cssClass, oldProp.cssClass);\n                    break;\n                case 'separator':\n                    if (oldProp.separator === '') {\n                        this.renderSeparator(1, this.inputs.length);\n                    }\n                    else {\n                        this.updateSeparatorValue();\n                    }\n                    break;\n                case 'htmlAttributes':\n                    this.setElementAttributes(newProp.htmlAttributes, this.element);\n                    break;\n                case 'type':\n                    this.updateInputType(newProp.type);\n                    break;\n                case 'stylingMode':\n                    this.updateVariantClass();\n                    break;\n                case 'ariaLabels':\n                    this.updateAriaLabel(newProp.ariaLabels);\n                    break;\n                case 'length':\n                    this.handleLengthChange(newProp.length, oldProp.length);\n                    break;\n                case 'enableRtl':\n                    this.element.classList[this.enableRtl ? 'add' : 'remove'](RTL);\n                    break;\n                case 'autoFocus':\n                    if (this.autoFocus) {\n                        this.focusIn();\n                    }\n                    break;\n            }\n        }\n    };\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(4)\n    ], OtpInput.prototype, \"length\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('')\n    ], OtpInput.prototype, \"value\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(OtpInputType.Number)\n    ], OtpInput.prototype, \"type\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('')\n    ], OtpInput.prototype, \"separator\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('')\n    ], OtpInput.prototype, \"placeholder\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(OtpInputStyle.Outlined)\n    ], OtpInput.prototype, \"stylingMode\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], OtpInput.prototype, \"disabled\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('')\n    ], OtpInput.prototype, \"cssClass\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], OtpInput.prototype, \"autoFocus\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(TextTransform.None)\n    ], OtpInput.prototype, \"textTransform\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)({})\n    ], OtpInput.prototype, \"htmlAttributes\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)([])\n    ], OtpInput.prototype, \"ariaLabels\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], OtpInput.prototype, \"created\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], OtpInput.prototype, \"valueChanged\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], OtpInput.prototype, \"focus\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], OtpInput.prototype, \"blur\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], OtpInput.prototype, \"input\", void 0);\n    OtpInput = __decorate([\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.NotifyPropertyChanges\n    ], OtpInput);\n    return OtpInput;\n}(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Component));\n\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-inputs/src/otp-input/otp-input.js?");

/***/ })

}]);