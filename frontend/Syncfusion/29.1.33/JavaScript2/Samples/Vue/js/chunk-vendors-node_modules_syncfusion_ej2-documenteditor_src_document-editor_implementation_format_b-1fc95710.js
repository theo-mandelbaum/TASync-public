"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkej2_vue_samples"] = self["webpackChunkej2_vue_samples"] || []).push([["chunk-vendors-node_modules_syncfusion_ej2-documenteditor_src_document-editor_implementation_format_b-1fc95710"],{

/***/ "./node_modules/@syncfusion/ej2-documenteditor/src/document-editor/implementation/format/border.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-documenteditor/src/document-editor/implementation/format/border.js ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   WBorder: () => (/* binding */ WBorder)\n/* harmony export */ });\n/* harmony import */ var _base_dictionary__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../base/dictionary */ \"./node_modules/@syncfusion/ej2-documenteditor/src/document-editor/base/dictionary.js\");\n/* harmony import */ var _base_unique_format__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../base/unique-format */ \"./node_modules/@syncfusion/ej2-documenteditor/src/document-editor/base/unique-format.js\");\n/* harmony import */ var _base_unique_formats__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../base/unique-formats */ \"./node_modules/@syncfusion/ej2-documenteditor/src/document-editor/base/unique-formats.js\");\n/* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @syncfusion/ej2-base */ \"./node_modules/@syncfusion/ej2-base/index.js\");\n\n\n\n\n/**\n * @private\n */\nvar WBorder = /** @class */ (function () {\n    function WBorder(node) {\n        this.uniqueBorderFormat = undefined;\n        this.ownerBase = undefined;\n        this.ownerBase = node;\n    }\n    Object.defineProperty(WBorder.prototype, \"color\", {\n        get: function () {\n            return this.getPropertyValue('color');\n        },\n        set: function (value) {\n            this.setPropertyValue('color', value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(WBorder.prototype, \"lineStyle\", {\n        get: function () {\n            return this.getPropertyValue('lineStyle');\n        },\n        set: function (value) {\n            this.setPropertyValue('lineStyle', value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(WBorder.prototype, \"lineWidth\", {\n        get: function () {\n            return this.getPropertyValue('lineWidth');\n        },\n        set: function (value) {\n            this.setPropertyValue('lineWidth', value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(WBorder.prototype, \"shadow\", {\n        get: function () {\n            return this.getPropertyValue('shadow');\n        },\n        set: function (value) {\n            this.setPropertyValue('shadow', value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(WBorder.prototype, \"space\", {\n        get: function () {\n            return this.getPropertyValue('space');\n        },\n        set: function (value) {\n            this.setPropertyValue('space', value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(WBorder.prototype, \"hasNoneStyle\", {\n        get: function () {\n            return this.getPropertyValue('hasNoneStyle');\n        },\n        set: function (value) {\n            this.setPropertyValue('hasNoneStyle', value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(WBorder.prototype, \"isBorderDefined\", {\n        get: function () {\n            return (this.lineStyle !== 'None' ||\n                (this.hasNoneStyle && this.hasValue('hasNoneStyle')));\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /* eslint-disable */\n    WBorder.prototype.getPropertyValue = function (property) {\n        var hasValue = this.hasValue(property);\n        if (hasValue) {\n            var propertyType = _base_unique_format__WEBPACK_IMPORTED_MODULE_1__.WUniqueFormat.getPropertyType(WBorder.uniqueFormatType, property);\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(this.uniqueBorderFormat)) {\n                var propValue = this.uniqueBorderFormat.propertiesHash.get(propertyType);\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(propValue)) {\n                    return propValue;\n                }\n            }\n        }\n        return WBorder.getPropertyDefaultValue(property);\n    };\n    WBorder.prototype.setPropertyValue = function (property, value) {\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(value) || value === '') {\n            value = WBorder.getPropertyDefaultValue(property);\n        }\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(this.uniqueBorderFormat)) {\n            this.initializeUniqueBorder(property, value);\n        }\n        else {\n            var propertyType = _base_unique_format__WEBPACK_IMPORTED_MODULE_1__.WUniqueFormat.getPropertyType(this.uniqueBorderFormat.uniqueFormatType, property);\n            if (this.uniqueBorderFormat.propertiesHash.containsKey(propertyType) &&\n                this.uniqueBorderFormat.propertiesHash.get(propertyType) === value) {\n                //Do nothing, since no change in property value and return\n                return;\n            }\n            this.uniqueBorderFormat = WBorder.uniqueBorderFormats.updateUniqueFormat(this.uniqueBorderFormat, property, value);\n        }\n    };\n    WBorder.prototype.initializeUniqueBorder = function (property, propValue) {\n        var uniqueBorderFormatTemp = new _base_dictionary__WEBPACK_IMPORTED_MODULE_0__.Dictionary();\n        this.addUniqueBorderFormat('color', property, propValue, uniqueBorderFormatTemp);\n        this.addUniqueBorderFormat('lineStyle', property, propValue, uniqueBorderFormatTemp);\n        this.addUniqueBorderFormat('lineWidth', property, propValue, uniqueBorderFormatTemp);\n        this.addUniqueBorderFormat('shadow', property, propValue, uniqueBorderFormatTemp);\n        this.addUniqueBorderFormat('space', property, propValue, uniqueBorderFormatTemp);\n        this.addUniqueBorderFormat('hasNoneStyle', property, propValue, uniqueBorderFormatTemp);\n        this.uniqueBorderFormat = WBorder.uniqueBorderFormats.addUniqueFormat(uniqueBorderFormatTemp, WBorder.uniqueFormatType);\n    };\n    WBorder.prototype.addUniqueBorderFormat = function (property, modifiedProperty, propValue, uniqueBorderFormatTemp) {\n        var propertyType = _base_unique_format__WEBPACK_IMPORTED_MODULE_1__.WUniqueFormat.getPropertyType(WBorder.uniqueFormatType, property);\n        if (property === modifiedProperty) {\n            uniqueBorderFormatTemp.add(propertyType, propValue);\n        }\n    };\n    WBorder.getPropertyDefaultValue = function (property) {\n        var value = undefined;\n        /* eslint-enable */\n        switch (property) {\n            case 'color':\n                value = '#000000';\n                break;\n            case 'lineStyle':\n                value = 'None';\n                break;\n            case 'lineWidth':\n                value = 0;\n                break;\n            case 'shadow':\n                value = false;\n                break;\n            case 'space':\n                value = 0;\n                break;\n            case 'hasNoneStyle':\n                value = false;\n                break;\n        }\n        return value;\n    };\n    WBorder.prototype.getLineWidth = function () {\n        /* eslint-disable */\n        switch (this.lineStyle) {\n            case 'None':\n            case 'Cleared':\n                return 0;\n            case 'Triple':\n            case 'Double':\n            case 'ThinThickSmallGap':\n            case 'ThickThinSmallGap':\n            case 'ThinThickThinSmallGap':\n            case 'ThinThickMediumGap':\n            case 'ThickThinMediumGap':\n            case 'ThinThickThinMediumGap':\n            case 'ThinThickLargeGap':\n            case 'ThickThinLargeGap':\n            case 'ThinThickThinLargeGap':\n            case 'Emboss3D':\n            case 'Engrave3D':\n                {\n                    var lineArray = this.getBorderLineWidthArray(this.lineStyle, this.lineWidth);\n                    var width = 0;\n                    for (var i = 0; i < lineArray.length; i++) {\n                        width += lineArray[i];\n                    }\n                    return width;\n                }\n            case 'Single':\n            case 'DashLargeGap':\n            case 'DashSmallGap':\n            case 'Dot':\n            case 'DashDot':\n            case 'DashDotDot':\n            case 'Thick':\n                return (this.lineWidth >= 0.5 ? this.lineWidth : 0.5);\n            case 'SingleWavy':\n                return (this.lineWidth === 1.5 ? 3 : 2.5); //Double wave border only draw with the fixed width\n            case 'DoubleWavy':\n                return (6.75); //Double wave border only draw with the fixed width\n            case 'DashDotStroked':\n            case 'Outset':\n                return (this.lineWidth >= 0.5 ? this.lineWidth : 0.5);\n        }\n        return (this.lineWidth >= 0.5 ? this.lineWidth : 0.5);\n        /* eslint-enable */\n    };\n    WBorder.prototype.getBorderLineWidthArray = function (lineStyle, lineWidth) {\n        var borderLineArray = [lineWidth];\n        switch (lineStyle) {\n            case 'Double':\n                borderLineArray = [1, 1, 1];\n                break;\n            case 'ThinThickSmallGap':\n                borderLineArray = [1, -0.75, -0.75];\n                break;\n            case 'ThickThinSmallGap':\n                borderLineArray = [-0.75, -0.75, 1];\n                break;\n            case 'ThinThickMediumGap':\n                borderLineArray = [1, 0.5, 0.5];\n                break;\n            case 'ThickThinMediumGap':\n                borderLineArray = [0.5, 0.5, 1];\n                break;\n            case 'ThinThickLargeGap':\n                borderLineArray = [-1.5, 1, -0.75];\n                break;\n            case 'ThickThinLargeGap':\n                borderLineArray = [-0.75, 1, -1.5];\n                break;\n            case 'Triple':\n                borderLineArray = [1, 1, 1, 1, 1];\n                break;\n            case 'ThinThickThinSmallGap':\n                borderLineArray = [-0.75, -0.75, 1, -0.75, -0.75];\n                break;\n            case 'ThinThickThinMediumGap':\n                borderLineArray = [0.5, 0.5, 1, 0.5, 0.5];\n                break;\n            case 'ThinThickThinLargeGap':\n                borderLineArray = [-0.75, 1, -1.5, 1, -0.75];\n                break;\n            case 'Emboss3D':\n            case 'Engrave3D':\n                borderLineArray = [0.25, 0, 1, 0, 0.25];\n                break;\n        }\n        if (borderLineArray.length === 1) {\n            return [lineWidth];\n        }\n        for (var i = 0; i < borderLineArray.length; i++) {\n            if (borderLineArray[parseInt(i.toString(), 10)] >= 0) {\n                borderLineArray[parseInt(i.toString(), 10)] = borderLineArray[parseInt(i.toString(), 10)] * lineWidth;\n            }\n            else {\n                borderLineArray[parseInt(i.toString(), 10)] = Math.abs(borderLineArray[parseInt(i.toString(), 10)]);\n            }\n        }\n        return borderLineArray;\n    };\n    WBorder.prototype.getBorderWeight = function () {\n        var weight = 0;\n        var numberOfLines = this.getNumberOfLines();\n        var borderNumber = this.getBorderNumber();\n        switch (this.lineStyle) {\n            case 'Single':\n            case 'DashSmallGap':\n            case 'DashDot':\n            case 'DashDotDot':\n            case 'Double':\n            case 'Triple':\n            case 'ThinThickSmallGap':\n            case 'ThickThinSmallGap':\n            case 'ThinThickThinSmallGap':\n            case 'ThinThickMediumGap':\n            case 'ThickThinMediumGap':\n            case 'ThinThickThinMediumGap':\n            case 'ThinThickLargeGap':\n            case 'ThickThinLargeGap':\n            case 'ThinThickThinLargeGap':\n            case 'SingleWavy':\n            case 'DoubleWavy':\n            case 'DashDotStroked':\n            case 'Emboss3D':\n            case 'Engrave3D':\n            case 'Outset':\n            case 'Inset':\n            case 'Thick':\n                weight = this.lineWidth * borderNumber;\n                break;\n            case 'Dot':\n            case 'DashLargeGap':\n                weight = 1;\n                break;\n        }\n        return weight;\n    };\n    WBorder.prototype.getBorderNumber = function () {\n        var borderNumber = 0;\n        switch (this.lineStyle) {\n            case 'Single':\n                borderNumber = 1;\n                break;\n            case 'Thick':\n                borderNumber = 2;\n                break;\n            case 'Double':\n                borderNumber = 3;\n                break;\n            case 'Dot':\n                borderNumber = 4;\n                break;\n            case 'DashLargeGap': //dashed.\n                borderNumber = 5;\n                break;\n            case 'DashDot':\n                borderNumber = 6;\n                break;\n            case 'DashDotDot':\n                borderNumber = 7;\n                break;\n            case 'Triple':\n                borderNumber = 8;\n                break;\n            case 'ThinThickSmallGap':\n                borderNumber = 9;\n                break;\n            case 'ThickThinSmallGap':\n                borderNumber = 10;\n                break;\n            case 'ThinThickThinSmallGap':\n                borderNumber = 11;\n                break;\n            case 'ThinThickMediumGap':\n                borderNumber = 12;\n                break;\n            case 'ThickThinMediumGap':\n                borderNumber = 13;\n                break;\n            case 'ThinThickThinMediumGap':\n                borderNumber = 14;\n                break;\n            case 'ThinThickLargeGap':\n                borderNumber = 15;\n                break;\n            case 'ThickThinLargeGap':\n                borderNumber = 16;\n                break;\n            case 'ThinThickThinLargeGap':\n                borderNumber = 17;\n                break;\n            case 'SingleWavy': //wave.\n                borderNumber = 18;\n                break;\n            case 'DoubleWavy':\n                borderNumber = 19;\n                break;\n            case 'DashSmallGap':\n                borderNumber = 20;\n                break;\n            case 'DashDotStroked':\n                borderNumber = 21;\n                break;\n            case 'Emboss3D':\n                borderNumber = 22;\n                break;\n            case 'Engrave3D':\n                borderNumber = 23;\n                break;\n            case 'Outset':\n                borderNumber = 24;\n                break;\n            case 'Inset':\n                borderNumber = 25;\n                break;\n        }\n        return borderNumber;\n    };\n    WBorder.prototype.getNumberOfLines = function () {\n        //ToDo: Need to analyze more on this.\n        var value = 0;\n        switch (this.lineStyle) {\n            case 'Single':\n            case 'Dot':\n            case 'DashSmallGap':\n            case 'DashLargeGap':\n            case 'DashDot':\n            case 'DashDotDot':\n                value = 1;\n                break;\n            case 'Double':\n                value = 3;\n                break;\n            case 'Triple':\n                value = 5;\n                break;\n            case 'ThinThickSmallGap':\n                value = 3;\n                break;\n            case 'ThickThinSmallGap':\n                value = 3;\n                break;\n            case 'ThinThickThinSmallGap':\n                value = 5;\n                break;\n            case 'ThinThickMediumGap':\n                value = 3;\n                break;\n            case 'ThickThinMediumGap':\n                value = 3;\n                break;\n            case 'ThinThickThinMediumGap':\n                value = 5;\n                break;\n            case 'ThinThickLargeGap':\n                value = 3;\n                break;\n            case 'ThickThinLargeGap':\n                value = 3;\n                break;\n            case 'ThinThickThinLargeGap':\n                value = 5;\n                break;\n            case 'SingleWavy':\n                value = 1;\n                break;\n            case 'DoubleWavy':\n                value = 2;\n                break;\n            case 'DashDotStroked':\n                value = 1;\n                break;\n            case 'Emboss3D':\n            case 'Engrave3D':\n                value = 3;\n                break;\n            case 'Outset':\n            case 'Inset':\n            case 'Thick':\n                value = 1;\n                break;\n        }\n        return value;\n    };\n    WBorder.prototype.getPrecedence = function () {\n        var value = 0;\n        switch (this.lineStyle) {\n            case 'Single':\n                value = 1;\n                break;\n            case 'Thick':\n                value = 2;\n                break;\n            case 'Double':\n                value = 3;\n                break;\n            case 'Dot':\n                value = 4;\n                break;\n            case 'DashLargeGap': //dashed.\n                value = 5;\n                break;\n            case 'DashDot':\n                value = 6;\n                break;\n            case 'DashDotDot':\n                value = 7;\n                break;\n            case 'Triple':\n                value = 8;\n                break;\n            case 'ThinThickSmallGap':\n                value = 9;\n                break;\n            case 'ThickThinSmallGap':\n                value = 10;\n                break;\n            case 'ThinThickThinSmallGap':\n                value = 11;\n                break;\n            case 'ThinThickMediumGap':\n                value = 12;\n                break;\n            case 'ThickThinMediumGap':\n                value = 13;\n                break;\n            case 'ThinThickThinMediumGap':\n                value = 14;\n                break;\n            case 'ThinThickLargeGap':\n                value = 15;\n                break;\n            case 'ThickThinLargeGap':\n                value = 16;\n                break;\n            case 'ThinThickThinLargeGap':\n                value = 17;\n                break;\n            case 'SingleWavy': //wave.\n                value = 18;\n                break;\n            case 'DoubleWavy':\n                value = 19;\n                break;\n            case 'DashSmallGap':\n                value = 20;\n                break;\n            case 'DashDotStroked':\n                value = 21;\n                break;\n            case 'Emboss3D':\n                value = 22;\n                break;\n            case 'Engrave3D':\n                value = 23;\n                break;\n            case 'Outset':\n                value = 24;\n                break;\n            case 'Inset':\n                value = 25;\n                break;\n        }\n        return value;\n    };\n    WBorder.prototype.hasValues = function () {\n        return this.hasValue('color') || this.hasValue('lineStyle') || this.hasValue('lineWidth') || this.hasValue('shadow') || this.hasValue('space') || this.hasValue('hasNoneStyle');\n    };\n    WBorder.prototype.hasValue = function (property) {\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(this.uniqueBorderFormat)) {\n            var propertyType = _base_unique_format__WEBPACK_IMPORTED_MODULE_1__.WUniqueFormat.getPropertyType(this.uniqueBorderFormat.uniqueFormatType, property);\n            return this.uniqueBorderFormat.propertiesHash.containsKey(propertyType);\n        }\n        return false;\n    };\n    WBorder.prototype.cloneFormat = function () {\n        var border = new WBorder(undefined);\n        border.color = this.color;\n        border.lineStyle = this.lineStyle;\n        border.lineWidth = this.lineWidth;\n        border.shadow = this.shadow;\n        border.space = this.space;\n        return border;\n    };\n    /**\n     * @private\n     * @returns {void}\n     */\n    WBorder.prototype.clearFormat = function () {\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(this.uniqueBorderFormat)) {\n            WBorder.uniqueBorderFormats.remove(this.uniqueBorderFormat);\n        }\n        this.uniqueBorderFormat = undefined;\n    };\n    /**\n     * Disposes the internal objects which are maintained.\n     *\n     * @private\n     * @returns {void}\n     */\n    WBorder.prototype.destroy = function () {\n        this.clearFormat();\n        this.ownerBase = undefined;\n    };\n    /**\n     * @private\n     * @param  {WBorder} border - Specifies the border\n     * @returns {boolean} - Returns true or false\n     */\n    WBorder.prototype.isEqualFormat = function (border) {\n        var value = false;\n        if (this.color === border.color && this.lineStyle === border.lineStyle\n            && this.lineWidth === border.lineWidth && this.shadow === border.shadow\n            && this.space === border.space) {\n            value = true;\n        }\n        return value;\n    };\n    WBorder.prototype.copyFormat = function (border) {\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(border) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(border.uniqueBorderFormat)) {\n            if (border.hasValue('color')) {\n                this.color = border.color;\n            }\n            if (border.hasValue('lineStyle')) {\n                this.lineStyle = border.lineStyle;\n            }\n            if (border.hasValue('lineWidth')) {\n                this.lineWidth = border.lineWidth;\n            }\n            if (border.hasValue('shadow')) {\n                this.shadow = border.shadow;\n            }\n            if (border.hasValue('space')) {\n                this.space = border.space;\n            }\n            if (border.hasValue('hasNoneStyle')) {\n                this.hasNoneStyle = border.hasNoneStyle;\n            }\n        }\n    };\n    WBorder.clear = function () {\n        this.uniqueBorderFormats.clear();\n    };\n    WBorder.uniqueBorderFormats = new _base_unique_formats__WEBPACK_IMPORTED_MODULE_2__.WUniqueFormats();\n    WBorder.uniqueFormatType = 1;\n    return WBorder;\n}());\n\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-documenteditor/src/document-editor/implementation/format/border.js?");

/***/ })

}]);