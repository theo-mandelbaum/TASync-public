"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkej2_vue_samples"] = self["webpackChunkej2_vue_samples"] || []).push([["chunk-vendors-node_modules_syncfusion_ej2-pdf_src_pdf_core_utils_js-4cefdee2"],{

/***/ "./node_modules/@syncfusion/ej2-pdf/src/pdf/core/utils.js":
/*!****************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-pdf/src/pdf/core/utils.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseException: () => (/* binding */ BaseException),\n/* harmony export */   FormatError: () => (/* binding */ FormatError),\n/* harmony export */   ParserEndOfFileException: () => (/* binding */ ParserEndOfFileException),\n/* harmony export */   _addProcSet: () => (/* binding */ _addProcSet),\n/* harmony export */   _annotationFlagsToString: () => (/* binding */ _annotationFlagsToString),\n/* harmony export */   _appendChar: () => (/* binding */ _appendChar),\n/* harmony export */   _arabicToLetter: () => (/* binding */ _arabicToLetter),\n/* harmony export */   _arabicToRoman: () => (/* binding */ _arabicToRoman),\n/* harmony export */   _areArrayEqual: () => (/* binding */ _areArrayEqual),\n/* harmony export */   _areNotEqual: () => (/* binding */ _areNotEqual),\n/* harmony export */   _byteArrayToHexString: () => (/* binding */ _byteArrayToHexString),\n/* harmony export */   _bytesToString: () => (/* binding */ _bytesToString),\n/* harmony export */   _calculateBounds: () => (/* binding */ _calculateBounds),\n/* harmony export */   _checkComment: () => (/* binding */ _checkComment),\n/* harmony export */   _checkField: () => (/* binding */ _checkField),\n/* harmony export */   _checkInkPoints: () => (/* binding */ _checkInkPoints),\n/* harmony export */   _checkReview: () => (/* binding */ _checkReview),\n/* harmony export */   _checkRotation: () => (/* binding */ _checkRotation),\n/* harmony export */   _checkType: () => (/* binding */ _checkType),\n/* harmony export */   _compressStream: () => (/* binding */ _compressStream),\n/* harmony export */   _convertNumber: () => (/* binding */ _convertNumber),\n/* harmony export */   _convertToColor: () => (/* binding */ _convertToColor),\n/* harmony export */   _copyRange: () => (/* binding */ _copyRange),\n/* harmony export */   _decode: () => (/* binding */ _decode),\n/* harmony export */   _decodeText: () => (/* binding */ _decodeText),\n/* harmony export */   _decodeUnicodeBytes: () => (/* binding */ _decodeUnicodeBytes),\n/* harmony export */   _defaultToString: () => (/* binding */ _defaultToString),\n/* harmony export */   _defineProperty: () => (/* binding */ _defineProperty),\n/* harmony export */   _emptyPdfData: () => (/* binding */ _emptyPdfData),\n/* harmony export */   _encode: () => (/* binding */ _encode),\n/* harmony export */   _encodeValue: () => (/* binding */ _encodeValue),\n/* harmony export */   _escapePdfName: () => (/* binding */ _escapePdfName),\n/* harmony export */   _findPage: () => (/* binding */ _findPage),\n/* harmony export */   _floatToString: () => (/* binding */ _floatToString),\n/* harmony export */   _fromRectangle: () => (/* binding */ _fromRectangle),\n/* harmony export */   _getBezierArc: () => (/* binding */ _getBezierArc),\n/* harmony export */   _getColorValue: () => (/* binding */ _getColorValue),\n/* harmony export */   _getCommentsOrReview: () => (/* binding */ _getCommentsOrReview),\n/* harmony export */   _getDecoder: () => (/* binding */ _getDecoder),\n/* harmony export */   _getFontStyle: () => (/* binding */ _getFontStyle),\n/* harmony export */   _getInheritableProperty: () => (/* binding */ _getInheritableProperty),\n/* harmony export */   _getItemValue: () => (/* binding */ _getItemValue),\n/* harmony export */   _getLatinCharacter: () => (/* binding */ _getLatinCharacter),\n/* harmony export */   _getNewGuidString: () => (/* binding */ _getNewGuidString),\n/* harmony export */   _getPageIndex: () => (/* binding */ _getPageIndex),\n/* harmony export */   _getSize: () => (/* binding */ _getSize),\n/* harmony export */   _getSpecialCharacter: () => (/* binding */ _getSpecialCharacter),\n/* harmony export */   _getStateTemplate: () => (/* binding */ _getStateTemplate),\n/* harmony export */   _getUpdatedBounds: () => (/* binding */ _getUpdatedBounds),\n/* harmony export */   _hexStringToByteArray: () => (/* binding */ _hexStringToByteArray),\n/* harmony export */   _hexStringToString: () => (/* binding */ _hexStringToString),\n/* harmony export */   _isArrayEqual: () => (/* binding */ _isArrayEqual),\n/* harmony export */   _isNullOrUndefined: () => (/* binding */ _isNullOrUndefined),\n/* harmony export */   _isRightToLeftCharacters: () => (/* binding */ _isRightToLeftCharacters),\n/* harmony export */   _isWhiteSpace: () => (/* binding */ _isWhiteSpace),\n/* harmony export */   _mapAnnotationIntent: () => (/* binding */ _mapAnnotationIntent),\n/* harmony export */   _mapAnnotationState: () => (/* binding */ _mapAnnotationState),\n/* harmony export */   _mapAnnotationStateModel: () => (/* binding */ _mapAnnotationStateModel),\n/* harmony export */   _mapAttachmentIcon: () => (/* binding */ _mapAttachmentIcon),\n/* harmony export */   _mapBlendMode: () => (/* binding */ _mapBlendMode),\n/* harmony export */   _mapBorderEffectStyle: () => (/* binding */ _mapBorderEffectStyle),\n/* harmony export */   _mapBorderStyle: () => (/* binding */ _mapBorderStyle),\n/* harmony export */   _mapFont: () => (/* binding */ _mapFont),\n/* harmony export */   _mapGraphicsUnit: () => (/* binding */ _mapGraphicsUnit),\n/* harmony export */   _mapHighlightMode: () => (/* binding */ _mapHighlightMode),\n/* harmony export */   _mapLineEndingStyle: () => (/* binding */ _mapLineEndingStyle),\n/* harmony export */   _mapMarkupAnnotationType: () => (/* binding */ _mapMarkupAnnotationType),\n/* harmony export */   _mapMeasurementUnit: () => (/* binding */ _mapMeasurementUnit),\n/* harmony export */   _mapPopupIcon: () => (/* binding */ _mapPopupIcon),\n/* harmony export */   _mapRubberStampIcon: () => (/* binding */ _mapRubberStampIcon),\n/* harmony export */   _numberToString: () => (/* binding */ _numberToString),\n/* harmony export */   _obtainDestination: () => (/* binding */ _obtainDestination),\n/* harmony export */   _obtainFontDetails: () => (/* binding */ _obtainFontDetails),\n/* harmony export */   _parseColor: () => (/* binding */ _parseColor),\n/* harmony export */   _parseRectangle: () => (/* binding */ _parseRectangle),\n/* harmony export */   _removeDuplicateFromResources: () => (/* binding */ _removeDuplicateFromResources),\n/* harmony export */   _removeDuplicateReference: () => (/* binding */ _removeDuplicateReference),\n/* harmony export */   _removeReferences: () => (/* binding */ _removeReferences),\n/* harmony export */   _reverseMapAnnotationState: () => (/* binding */ _reverseMapAnnotationState),\n/* harmony export */   _reverseMapAnnotationStateModel: () => (/* binding */ _reverseMapAnnotationStateModel),\n/* harmony export */   _reverseMapBlendMode: () => (/* binding */ _reverseMapBlendMode),\n/* harmony export */   _reverseMapEndingStyle: () => (/* binding */ _reverseMapEndingStyle),\n/* harmony export */   _reverseMapHighlightMode: () => (/* binding */ _reverseMapHighlightMode),\n/* harmony export */   _reverseMapPdfFontStyle: () => (/* binding */ _reverseMapPdfFontStyle),\n/* harmony export */   _reverseMarkupAnnotationType: () => (/* binding */ _reverseMarkupAnnotationType),\n/* harmony export */   _setMatrix: () => (/* binding */ _setMatrix),\n/* harmony export */   _stringToAnnotationFlags: () => (/* binding */ _stringToAnnotationFlags),\n/* harmony export */   _stringToBigEndianBytes: () => (/* binding */ _stringToBigEndianBytes),\n/* harmony export */   _stringToBytes: () => (/* binding */ _stringToBytes),\n/* harmony export */   _stringToPdfString: () => (/* binding */ _stringToPdfString),\n/* harmony export */   _stringToStyle: () => (/* binding */ _stringToStyle),\n/* harmony export */   _stringToUnicodeArray: () => (/* binding */ _stringToUnicodeArray),\n/* harmony export */   _styleToString: () => (/* binding */ _styleToString),\n/* harmony export */   _toRectangle: () => (/* binding */ _toRectangle),\n/* harmony export */   _toSigned16: () => (/* binding */ _toSigned16),\n/* harmony export */   _toSigned32: () => (/* binding */ _toSigned32),\n/* harmony export */   _toUnsigned: () => (/* binding */ _toUnsigned),\n/* harmony export */   _tryParseFontStream: () => (/* binding */ _tryParseFontStream),\n/* harmony export */   _updateBounds: () => (/* binding */ _updateBounds),\n/* harmony export */   _updatePageCount: () => (/* binding */ _updatePageCount),\n/* harmony export */   _updatePageSettings: () => (/* binding */ _updatePageSettings),\n/* harmony export */   _updateVisibility: () => (/* binding */ _updateVisibility)\n/* harmony export */ });\n/* harmony import */ var _pdf_primitives__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./pdf-primitives */ \"./node_modules/@syncfusion/ej2-pdf/src/pdf/core/pdf-primitives.js\");\n/* harmony import */ var _pdf_page__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./pdf-page */ \"./node_modules/@syncfusion/ej2-pdf/src/pdf/core/pdf-page.js\");\n/* harmony import */ var _enumerator__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./enumerator */ \"./node_modules/@syncfusion/ej2-pdf/src/pdf/core/enumerator.js\");\n/* harmony import */ var _graphics_pdf_graphics__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./graphics/pdf-graphics */ \"./node_modules/@syncfusion/ej2-pdf/src/pdf/core/graphics/pdf-graphics.js\");\n/* harmony import */ var _base_stream__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./base-stream */ \"./node_modules/@syncfusion/ej2-pdf/src/pdf/core/base-stream.js\");\n/* harmony import */ var _annotations_annotation__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./annotations/annotation */ \"./node_modules/@syncfusion/ej2-pdf/src/pdf/core/annotations/annotation.js\");\n/* harmony import */ var _graphics_pdf_template__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./graphics/pdf-template */ \"./node_modules/@syncfusion/ej2-pdf/src/pdf/core/graphics/pdf-template.js\");\n/* harmony import */ var _form_field__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./form/field */ \"./node_modules/@syncfusion/ej2-pdf/src/pdf/core/form/field.js\");\n/* harmony import */ var _fonts_pdf_standard_font__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./fonts/pdf-standard-font */ \"./node_modules/@syncfusion/ej2-pdf/src/pdf/core/fonts/pdf-standard-font.js\");\n/* harmony import */ var _graphics_images_jpeg_decoder__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./graphics/images/jpeg-decoder */ \"./node_modules/@syncfusion/ej2-pdf/src/pdf/core/graphics/images/jpeg-decoder.js\");\n/* harmony import */ var _graphics_images_png_decoder__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./graphics/images/png-decoder */ \"./node_modules/@syncfusion/ej2-pdf/src/pdf/core/graphics/images/png-decoder.js\");\n/* harmony import */ var _syncfusion_ej2_compression__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @syncfusion/ej2-compression */ \"./node_modules/@syncfusion/ej2-compression/index.js\");\nvar __extends = (undefined && undefined.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * Gets the unsigned value.\n *\n * @param {number} value input value.\n * @param {number} bits bits to process.\n * @returns {number} unsigned value.\n */\nfunction _toUnsigned(value, bits) {\n    return (value & ((Math.pow(2, bits)) - 1));\n}\n/**\n * Gets the signed 16 bit value.\n *\n * @param {number} value input value.\n * @returns {number} unsigned value.\n */\nfunction _toSigned16(value) {\n    return (value << 16) >> 16;\n}\n/**\n * Gets the signed 32 bit value.\n *\n * @param {number} value input value.\n * @returns {number} unsigned value.\n */\nfunction _toSigned32(value) {\n    return (value << 0);\n}\n/**\n * Copy values from one array to another.\n *\n * @param {number[]} target destination array.\n * @param {number} at target index.\n * @param {number[]} source source array.\n * @param {number} start start index.\n * @param {number} end end index.\n * @returns {void} Returns nothing.\n */\nfunction _copyRange(target, at, source, start, end) {\n    if (start === null || typeof start === 'undefined') {\n        start = 0;\n    }\n    end = (typeof end === 'undefined') ? source.length : end;\n    start = Math.max(0, Math.min(source.length, start));\n    end = Math.max(0, Math.min(source.length, end));\n    if (at + (end - start) > target.length) {\n        target.length = at + (end - start);\n    }\n    for (var i = start, j = at; i < end; i++, j++) {\n        target[Number.parseInt(j.toString(), 10)] = source[Number.parseInt(i.toString(), 10)];\n    }\n}\n/**\n * Checks the type of the image using header bytes.\n *\n * @param {Uint8Array} imageData image data.\n * @param {number[]} header header bytes.\n * @returns {boolean} Header matched or not.\n */\nfunction _checkType(imageData, header) {\n    for (var i = 0; i < header.length; i++) {\n        if (header[Number.parseInt(i.toString(), 10)] !== imageData[Number.parseInt(i.toString(), 10)]) {\n            return false;\n        }\n    }\n    return true;\n}\n/**\n * Gets the image decoder.\n *\n * @param {Uint8Array} imageData image data.\n * @returns {_ImageDecoder} Image decoder.\n */\nfunction _getDecoder(imageData) {\n    var decoder;\n    if (_checkType(imageData, [255, 216])) {\n        decoder = new _graphics_images_jpeg_decoder__WEBPACK_IMPORTED_MODULE_9__._JpegDecoder(imageData);\n    }\n    else if (_checkType(imageData, [137, 80, 78, 71, 13, 10, 26, 10])) {\n        decoder = new _graphics_images_png_decoder__WEBPACK_IMPORTED_MODULE_10__._PngDecoder(imageData);\n    }\n    else {\n        throw new Error('Unsupported image format');\n    }\n    return decoder;\n}\n/**\n * Gets the page rotation.\n *\n * @param {PdfPage} page Page.\n * @param {number} height Height.\n * @param {number} left Left.\n * @returns {number} Page rotation.\n */\nfunction _checkRotation(page, height, left) {\n    var topValue = 0;\n    left = (typeof left === 'undefined' || left === null) ? 0 : left;\n    if (page.rotation === _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfRotationAngle.angle90) {\n        topValue = (typeof height === 'undefined' || height === null) ? 0 : left;\n    }\n    else if (page.rotation === _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfRotationAngle.angle180) {\n        topValue = (typeof height === 'undefined' || height === null) ? 0 : height;\n    }\n    else if (page.rotation === _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfRotationAngle.angle270) {\n        var size = page.size;\n        topValue = (typeof height === 'undefined' || height === null) ? 0 : size[0] - left;\n    }\n    return topValue;\n}\n/**\n * Gets the page index.\n *\n * @param {PdfDocument} loadedDocument Loaded document.\n * @param {_PdfDictionary} pageDictionary Page dictionary.\n * @returns {number} Page index.\n */\nfunction _getPageIndex(loadedDocument, pageDictionary) {\n    var index = -1;\n    for (var i = 0; i < loadedDocument.pageCount; i++) {\n        var page = loadedDocument.getPage(i);\n        if (page._pageDictionary === pageDictionary) {\n            index = i;\n            break;\n        }\n    }\n    return index;\n}\n/**\n * Convert string value from annotation flag\n *\n * @private\n * @param {PdfAnnotationFlag} flag Annotation flag.\n * @returns {string} Valid string to write into XML.\n */\nfunction _annotationFlagsToString(flag) {\n    var values = [];\n    if ((flag & _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfAnnotationFlag.hidden) !== 0) {\n        values.push('hidden');\n    }\n    if ((flag & _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfAnnotationFlag.invisible) !== 0) {\n        values.push('invisible');\n    }\n    if ((flag & _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfAnnotationFlag.locked) !== 0) {\n        values.push('locked');\n    }\n    if ((flag & _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfAnnotationFlag.noRotate) !== 0) {\n        values.push('norotate');\n    }\n    if ((flag & _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfAnnotationFlag.noView) !== 0) {\n        values.push('noview');\n    }\n    if ((flag & _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfAnnotationFlag.noZoom) !== 0) {\n        values.push('nozoom');\n    }\n    if ((flag & _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfAnnotationFlag.print) !== 0) {\n        values.push('print');\n    }\n    if ((flag & _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfAnnotationFlag.readOnly) !== 0) {\n        values.push('readonly');\n    }\n    if ((flag & _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfAnnotationFlag.toggleNoView) !== 0) {\n        values.push('togglenoview');\n    }\n    if ((flag & _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfAnnotationFlag.default) !== 0) {\n        values.push('default');\n    }\n    return values.join(',');\n}\n/**\n * Convert string value to annotation flag\n *\n * @private\n * @param {string} flag String value to map\n * @returns {PdfAnnotationFlag} Annotation flag\n */\nfunction _stringToAnnotationFlags(flag) {\n    switch (flag) {\n        case 'hidden':\n            return _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfAnnotationFlag.hidden;\n        case 'invisible':\n            return _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfAnnotationFlag.invisible;\n        case 'locked':\n            return _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfAnnotationFlag.locked;\n        case 'norotate':\n            return _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfAnnotationFlag.noRotate;\n        case 'noview':\n            return _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfAnnotationFlag.noView;\n        case 'nozoom':\n            return _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfAnnotationFlag.noZoom;\n        case 'print':\n            return _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfAnnotationFlag.print;\n        case 'readonly':\n            return _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfAnnotationFlag.readOnly;\n        case 'togglenoview':\n            return _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfAnnotationFlag.toggleNoView;\n        default:\n            return _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfAnnotationFlag.default;\n    }\n}\n/**\n * Convert string value to byte array\n *\n * @private\n * @param {string} value string value.\n * @returns {string} Valid string to write into PDF.\n */\nfunction _stringToPdfString(value) {\n    if (typeof value === 'string' && value.length > 0 && value.charCodeAt(0) >= '\\xEF'.charCodeAt(0)) {\n        var encoding = void 0;\n        if (value[0] === '\\xEF' && value[1] === '\\xBB' && value[2] === '\\xBF') {\n            encoding = 'utf-8';\n        }\n        else if (value[0] === '\\xFF' && value[1] === '\\xFE') {\n            encoding = 'utf-16le';\n        }\n        else if (value[0] === '\\xFE' && value[1] === '\\xFF') {\n            encoding = 'utf-16be';\n        }\n        if (encoding) {\n            try {\n                return (new TextDecoder(encoding, { fatal: true })).decode(_stringToBytes(value));\n            }\n            catch (e) { } // eslint-disable-line\n        }\n    }\n    var buffer = [];\n    var translateTable = [\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x2d8,\n        0x2c7, 0x2c6, 0x2d9, 0x2dd, 0x2db, 0x2da, 0x2dc, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0x2022, 0x2020, 0x2021, 0x2026, 0x2014, 0x2013, 0x192,\n        0x2044, 0x2039, 0x203a, 0x2212, 0x2030, 0x201e, 0x201c, 0x201d, 0x2018,\n        0x2019, 0x201a, 0x2122, 0xfb01, 0xfb02, 0x141, 0x152, 0x160, 0x178, 0x17d,\n        0x131, 0x142, 0x153, 0x161, 0x17e, 0, 0x20ac\n    ];\n    for (var i = 0; i < value.length; i++) {\n        var code = translateTable[value.charCodeAt(i)];\n        buffer.push(code ? String.fromCharCode(code) : value.charAt(i));\n    }\n    return buffer.join('');\n}\n/**\n * Convert string value to byte array\n *\n * @private\n * @param {string} value string value.\n * @param {boolean} isDirect Whether to return a number[] or Uint8Array.\n * @param {boolean} isPassword Whether the string is a password.\n * @param {number[]} destination Destination array.\n * @returns {number[] | Uint8Array} Byte array\n */\nfunction _stringToBytes(value, isDirect, isPassword, destination) {\n    if (isDirect === void 0) { isDirect = false; }\n    if (isPassword === void 0) { isPassword = false; }\n    var bytes = [];\n    if (destination) {\n        bytes = destination;\n    }\n    if (isPassword) {\n        for (var i = 0; i < value.length; i++) {\n            bytes.push(value.charCodeAt(i));\n        }\n    }\n    else {\n        for (var i = 0; i < value.length; i++) {\n            var charCode = value.charCodeAt(i);\n            if (charCode < 0x80) {\n                bytes.push(charCode);\n            }\n            else if (charCode < 0x800) {\n                bytes.push((charCode >> 6) | 0xC0);\n                bytes.push((charCode & 0x3F) | 0x80);\n            }\n            else if (charCode < 0xD800 || charCode >= 0xE000) {\n                bytes.push((charCode >> 12) | 0xE0);\n                bytes.push(((charCode >> 6) & 0x3F) | 0x80);\n                bytes.push((charCode & 0x3F) | 0x80);\n            }\n            else {\n                i++;\n                charCode = 0x10000 + (((charCode & 0x3FF) << 10) | (value.charCodeAt(i) & 0x3FF));\n                bytes.push((charCode >> 18) | 0xF0);\n                bytes.push(((charCode >> 12) & 0x3F) | 0x80);\n                bytes.push(((charCode >> 6) & 0x3F) | 0x80);\n                bytes.push((charCode & 0x3F) | 0x80);\n            }\n        }\n    }\n    return isDirect ? bytes : new Uint8Array(bytes);\n}\n/**\n * Check equal or not.\n *\n * @private\n * @param {number[]} first byte array.\n * @param {number[]} second byte array.\n * @returns {boolean} Equal or not\n */\nfunction _areArrayEqual(first, second) {\n    if (first.length !== second.length) {\n        return false;\n    }\n    for (var i = 0; i < first.length; i++) {\n        if (first[Number.parseInt(i.toString(), 10)] !== second[Number.parseInt(i.toString(), 10)]) {\n            return false;\n        }\n    }\n    return true;\n}\n/**\n * Convert number to string as round value with fixed decimal points 2.\n *\n * @private\n * @param {number[]} value number value.\n * @returns {boolean} Equal string.\n */\nfunction _numberToString(value) {\n    if (Number.isInteger(value)) {\n        return value.toString();\n    }\n    return value.toFixed(7);\n}\n/**\n * Check whether entries in two array are equal or not.\n *\n * @private\n * @param {number[]} value first array.\n * @param {number[]} current second array.\n * @returns {boolean} Return true if for each elements are equal in both array.\n */\nfunction _areNotEqual(value, current) {\n    var result = false;\n    if (value.length !== current.length) {\n        return true;\n    }\n    for (var i = 0; i < value.length; i++) {\n        if (value[i] !== current[i]) { // eslint-disable-line\n            result = true;\n            break;\n        }\n    }\n    return result;\n}\n/**\n * Process bytes and convert as string.\n *\n * @private\n * @param {Uint8Array} bytes Input data.\n * @param {boolean} isJson Whether is json or xfdf.\n * @returns {string} String value processed from input bytes.\n */\nfunction _bytesToString(bytes, isJson) {\n    if (isJson === void 0) { isJson = false; }\n    var length = bytes.length;\n    var max = 8192;\n    var stringBuffer = [];\n    if (length < max) {\n        return (isJson ? _decodeUnicodeBytes(bytes) : String.fromCharCode.apply(null, bytes));\n    }\n    for (var i = 0; i < length; i += max) {\n        var chunkEnd = Math.min(i + max, length);\n        var chunk = bytes.subarray(i, chunkEnd);\n        stringBuffer.push(isJson ? _decodeUnicodeBytes(chunk) : String.fromCharCode.apply(null, chunk));\n    }\n    return stringBuffer.join('');\n}\n/**\n * Decode unicode string.\n *\n * @private\n * @param {Uint8Array} bytes Input data.\n * @returns {string} String value processed from input bytes.\n */\nfunction _decodeUnicodeBytes(bytes) {\n    var result = '';\n    var i = 0;\n    while (i < bytes.length) {\n        var byte = bytes[i++];\n        if (byte < 0x80) {\n            result += String.fromCharCode(byte);\n        }\n        else if (byte < 0xE0) {\n            result += String.fromCharCode(((byte & 0x1F) << 6) | (bytes[i++] & 0x3F));\n        }\n        else if (byte < 0xF0) {\n            result += String.fromCharCode(((byte & 0x0F) << 12) | ((bytes[i++] & 0x3F) << 6) | (bytes[i++] & 0x3F));\n        }\n        else {\n            var codePoint = ((byte & 0x07) << 18) | ((bytes[i++] & 0x3F) << 12) |\n                ((bytes[i++] & 0x3F) << 6) | (bytes[i++] & 0x3F) - 0x10000;\n            result += String.fromCharCode((codePoint >> 10) + 0xD800, (codePoint & 0x03FF) + 0xDC00);\n        }\n    }\n    return result;\n}\n/**\n * Convert string to unicode array.\n *\n * @private\n * @param {string} value string value.\n * @returns {Uint8Array} unicode array\n */\nfunction _stringToUnicodeArray(value) {\n    var output = [];\n    if (value !== null && typeof value !== 'undefined') {\n        for (var i = 0; i < value.length; i++) {\n            var code = value.charCodeAt(i);\n            output.push(code / 256 >>> 0);\n            output.push(code & 0xff);\n        }\n    }\n    var unicodeArray = new Uint8Array(output);\n    return unicodeArray;\n}\n/**\n * Convert byte array to hex string.\n *\n * @private\n * @param {Uint8Array} byteArray Byte array.\n * @returns {string} Hex string.\n */\nfunction _byteArrayToHexString(byteArray) {\n    var nextHexByte;\n    var stringBuffer = [];\n    for (var i = 0; i < byteArray.length; i++) {\n        nextHexByte = byteArray[Number.parseInt(i.toString(), 10)].toString(16).toUpperCase();\n        if (nextHexByte.length < 2) {\n            nextHexByte = '0' + nextHexByte;\n        }\n        stringBuffer.push(nextHexByte);\n    }\n    return stringBuffer.join('');\n}\n/**\n * Convert hex string to byte array.\n *\n * @private\n * @param {string} hexString Hex string.\n * @param {boolean} isDirect Whether to return object or number[]. Default is false.\n * @returns {Uint8Array | number[]} Byte array.\n */\nfunction _hexStringToByteArray(hexString, isDirect) {\n    if (isDirect === void 0) { isDirect = false; }\n    var array = [];\n    if (hexString) {\n        for (var i = 0; i < hexString.length; i += 2) {\n            array.push(Number.parseInt(hexString.substring(i, i + 2), 16));\n        }\n    }\n    return isDirect ? array : new Uint8Array(array);\n}\n/**\n * Convert hex string to normal string.\n *\n * @private\n * @param {string} hexString Hex string.\n * @returns {string} Normal string.\n */\nfunction _hexStringToString(hexString) {\n    var result = '';\n    if (hexString && hexString[0] === '#') {\n        hexString = hexString.substring(1);\n        for (var i = 0; i < hexString.length; i += 2) {\n            result += String.fromCharCode(Number.parseInt(hexString.substring(i, i + 2), 16));\n        }\n        return result;\n    }\n    return hexString;\n}\n/**\n * Check whether the character code is white space.\n *\n * @private\n * @param {number} ch The character code to check.\n * @returns {boolean} True if the character is space, otherwise false.\n */\nfunction _isWhiteSpace(ch) {\n    return ch === 0x20 || ch === 0x09 || ch === 0x0d || ch === 0x0a;\n}\n/**\n * Decode a chunk of base64 string into Uint8Array.\n *\n * @private\n * @param {string} input The base64 string to decode.\n * @returns {Uint8Array} Decoded bytes as Uint8Array.\n */\nfunction _decodeChunk(input) {\n    var key = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\n    var chr1;\n    var chr2;\n    var chr3;\n    var enc1;\n    var enc2;\n    var enc3;\n    var enc4;\n    var i = 0;\n    var resultIndex = 0;\n    input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, ''); // eslint-disable-line\n    var totalLength = input.length * 3 / 4;\n    if (input.charAt(input.length - 1) === key.charAt(64)) {\n        totalLength--;\n    }\n    var output = new Array(totalLength | 0);\n    while (i < input.length) {\n        enc1 = key.indexOf(input.charAt(i++));\n        enc2 = key.indexOf(input.charAt(i++));\n        enc3 = key.indexOf(input.charAt(i++));\n        enc4 = key.indexOf(input.charAt(i++));\n        chr1 = (enc1 << 2) | (enc2 >> 4);\n        chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\n        chr3 = ((enc3 & 3) << 6) | enc4;\n        if (resultIndex < totalLength) {\n            output[resultIndex++] = chr1;\n        }\n        if (resultIndex < totalLength) {\n            output[resultIndex++] = chr2;\n        }\n        if (resultIndex < totalLength) {\n            output[resultIndex++] = chr3;\n        }\n    }\n    return new Uint8Array(output);\n}\n/**\n * Decode bytes from base64 string.\n *\n * @private\n * @param {string} input The base64 string to decode.\n * @param {boolean} isDirect Whether to return object or number[]. Default is false.\n * @returns {Uint8Array | number[]} Decoded bytes.\n */\nfunction _decode(input, isDirect) {\n    if (isDirect === void 0) { isDirect = false; }\n    var chunkSize = 3000000;\n    if (input.length >= chunkSize) {\n        input = input.replace(/[^A-Za-z0-9+/=]/g, '');\n        var outputChunks = [];\n        var totalLength = 0;\n        for (var i = 0; i < input.length; i += chunkSize) {\n            var chunk = input.substring(i, i + chunkSize);\n            var decodedChunk = _decodeChunk(chunk);\n            outputChunks.push(decodedChunk);\n            totalLength += decodedChunk.length;\n        }\n        var output = new Uint8Array(totalLength);\n        var offset = 0;\n        for (var _i = 0, outputChunks_1 = outputChunks; _i < outputChunks_1.length; _i++) {\n            var chunk = outputChunks_1[_i];\n            output.set(chunk, offset);\n            offset += chunk.length;\n        }\n        return isDirect ? Array.from(output) : output;\n    }\n    else {\n        var key = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\n        var chr1 = void 0;\n        var chr2 = void 0;\n        var chr3 = void 0;\n        var enc1 = void 0;\n        var enc2 = void 0;\n        var enc3 = void 0;\n        var enc4 = void 0;\n        var i = 0;\n        var resultIndex = 0;\n        input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, ''); // eslint-disable-line\n        var totalLength = input.length * 3 / 4;\n        if (input.charAt(input.length - 1) === key.charAt(64)) {\n            totalLength--;\n        }\n        var output = new Array(totalLength | 0);\n        while (i < input.length) {\n            enc1 = key.indexOf(input.charAt(i++));\n            enc2 = key.indexOf(input.charAt(i++));\n            enc3 = key.indexOf(input.charAt(i++));\n            enc4 = key.indexOf(input.charAt(i++));\n            chr1 = (enc1 << 2) | (enc2 >> 4);\n            chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\n            chr3 = ((enc3 & 3) << 6) | enc4;\n            if (resultIndex < totalLength) {\n                output[resultIndex++] = chr1;\n            }\n            if (resultIndex < totalLength) {\n                output[resultIndex++] = chr2;\n            }\n            if (resultIndex < totalLength) {\n                output[resultIndex++] = chr3;\n            }\n        }\n        return isDirect ? output : new Uint8Array(output);\n    }\n}\n/**\n * Encode a chunk of bytes to base64 string.\n *\n * @private\n * @param {Uint8Array} bytes Bytes to encode.\n * @param {boolean} isLastChunk Defines a last chunk of bytes.\n * @returns {string} Decoded string.\n */\nfunction _encodeChunk(bytes, isLastChunk) {\n    if (isLastChunk === void 0) { isLastChunk = false; }\n    var key = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\n    var output = [];\n    var length = bytes.length;\n    var i = 0;\n    while (i < length) {\n        var byte1 = bytes[i++];\n        var byte2 = i < length ? bytes[i++] : 0;\n        var byte3 = i < length ? bytes[i++] : 0;\n        var value1 = byte1 >> 2;\n        var value2 = ((byte1 & 3) << 4) | (byte2 >> 4);\n        var value3 = ((byte2 & 15) << 2) | (byte3 >> 6);\n        var value4 = byte3 & 63;\n        output.push(key[Number.parseInt(value1.toString(), 10)], key[Number.parseInt(value2.toString(), 10)], i - 1 > length ? '=' : key[Number.parseInt(value3.toString(), 10)], i > length ? '=' : key[Number.parseInt(value4.toString(), 10)]);\n    }\n    if (isLastChunk) {\n        if (length % 3 === 1) {\n            output[output.length - 1] = '=';\n            output[output.length - 2] = '=';\n        }\n        else if (length % 3 === 2) {\n            output[output.length - 1] = '=';\n        }\n    }\n    return output.join('');\n}\n/**\n * Encode bytes to base64 string.\n *\n * @private\n * @param {Uint8Array} bytes Bytes to encode.\n * @returns {string} Decoded string.\n */\nfunction _encode(bytes) {\n    var chunkSize = 3000000;\n    var key = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\n    var length = bytes.length;\n    if (length >= chunkSize) {\n        var output = [];\n        if (length > chunkSize) {\n            for (var start = 0; start < length; start += chunkSize) {\n                var chunk = bytes.subarray(start, Math.min(start + chunkSize, length));\n                if ((start + chunkSize) >= length) {\n                    output.push(_encodeChunk(chunk, true));\n                }\n                else {\n                    output.push(_encodeChunk(chunk));\n                }\n            }\n        }\n        else {\n            output.push(_encodeChunk(bytes, true));\n        }\n        return output.join('');\n    }\n    else {\n        var output = '';\n        var currentChar = 0;\n        for (var i = 0; i < bytes.length; i++) {\n            if (i % 3 === 0) {\n                currentChar = (bytes[Number.parseInt(i.toString(), 10)] >> 2);\n                output += key[Number.parseInt(currentChar.toString(), 10)];\n                currentChar = (bytes[Number.parseInt(i.toString(), 10)] << 4) & 63;\n            }\n            else if (i % 3 === 1) {\n                currentChar += (bytes[Number.parseInt(i.toString(), 10)] >> 4);\n                output += key[Number.parseInt(currentChar.toString(), 10)];\n                currentChar = (bytes[Number.parseInt(i.toString(), 10)] << 2) & 63;\n            }\n            else if (i % 3 === 2) {\n                currentChar += (bytes[Number.parseInt(i.toString(), 10)] >> 6);\n                output += key[Number.parseInt(currentChar.toString(), 10)];\n                currentChar = bytes[Number.parseInt(i.toString(), 10)] & 63;\n                output += key[Number.parseInt(currentChar.toString(), 10)];\n            }\n        }\n        if (bytes.length % 3 === 1) {\n            output += key[Number.parseInt(currentChar.toString(), 10)] + \"==\";\n        }\n        if (bytes.length % 3 === 2) {\n            output += key[Number.parseInt(currentChar.toString(), 10)] + \"=\";\n        }\n        return output;\n    }\n}\n/**\n * Get property value in inheritable mode.\n *\n * @private\n * @param {_PdfDictionary} dictionary Input dictionary.\n * @param {string} key Input dictionary.\n * @param {boolean} isArray Search array.\n * @param {boolean} stopWhenFound Stop when found.\n * @param {string[]} parentKey Key string for parent node.\n * @returns {any} Property value.\n */\nfunction _getInheritableProperty(dictionary, key, isArray, stopWhenFound) {\n    if (isArray === void 0) { isArray = false; }\n    if (stopWhenFound === void 0) { stopWhenFound = true; }\n    var parentKey = [];\n    for (var _i = 4; _i < arguments.length; _i++) {\n        parentKey[_i - 4] = arguments[_i];\n    }\n    var values; // eslint-disable-line\n    var refSet = new Set(); // eslint-disable-line\n    while (dictionary instanceof _pdf_primitives__WEBPACK_IMPORTED_MODULE_0__._PdfDictionary && dictionary.objId && !refSet.has(dictionary.objId)) {\n        if (dictionary.objId) {\n            refSet.add(dictionary.objId);\n        }\n        var value = isArray ? dictionary.getArray(key) : dictionary.get(key); // eslint-disable-line\n        if (value !== undefined) {\n            if (stopWhenFound) {\n                return value;\n            }\n            if (!values) {\n                values = [];\n            }\n            values.push(value);\n        }\n        var index = 0;\n        var hasParent = false;\n        while (index < parentKey.length) {\n            var element = parentKey[index]; // eslint-disable-line\n            if (dictionary.has(element)) {\n                dictionary = dictionary.get(element);\n                hasParent = true;\n                break;\n            }\n            index++;\n        }\n        if (!hasParent) {\n            break;\n        }\n    }\n    return values;\n}\n/**\n * Calculate bounds of annotation or field.\n *\n * @private\n * @param {_PdfDictionary} dictionary Input dictionary.\n * @param {boolean} isWidget Input page.\n * @returns {any} Bounds value.\n */\nfunction _parseRectangle(dictionary, isWidget) {\n    var rectangle = { x: 0, y: 0, width: 0, height: 0 };\n    var elements = dictionary.getArray('Rect');\n    if (elements && Array.isArray(elements)) {\n        var x1 = elements[0];\n        var y1 = elements[1];\n        var x2 = elements[2];\n        var y2 = elements[3];\n        if (typeof x1 !== 'undefined' && typeof y1 !== 'undefined' && typeof x2 !== 'undefined' && typeof y2 !== 'undefined') {\n            rectangle.x = Math.min(x1, x2);\n            rectangle.y = Math.min(y1, y2);\n            rectangle.width = Math.max(x1, x2) - rectangle.x;\n            rectangle.height = Math.max(y1, y2) - rectangle.y;\n            if (isWidget) {\n                rectangle.height = parseFloat(rectangle.height.toFixed(3));\n                if (elements[1] < 0) {\n                    rectangle.y = elements[1];\n                    if (elements[1] > elements[3]) {\n                        rectangle.y -= rectangle.height;\n                    }\n                }\n            }\n        }\n    }\n    return rectangle;\n}\n/**\n * Calculate bounds of annotation or field.\n *\n * @private\n * @param {_PdfDictionary} dictionary Input dictionary.\n * @param {string} page Input page.\n * @returns {any} Bounds value.\n */\nfunction _calculateBounds(dictionary, page) {\n    var rect;\n    if (dictionary.has('Rect')) {\n        rect = _parseRectangle(dictionary);\n        if (page) {\n            var size = page.size;\n            var mBox = page.mediaBox;\n            var cropBox = page.cropBox;\n            if (cropBox && Array.isArray(cropBox) && cropBox.length === 4 && page._pageDictionary.has('CropBox')) {\n                if ((cropBox[0] !== 0 || cropBox[1] !== 0 || size[0] === cropBox[2] ||\n                    size[1] === cropBox[3]) && (rect.x !== cropBox[0])) {\n                    rect.x -= cropBox[0];\n                    rect.y = cropBox[3] - (rect.y + rect.height);\n                }\n                else {\n                    rect.y = size[1] - (rect.y + rect.height);\n                }\n            }\n            else if (mBox && Array.isArray(mBox) && mBox.length === 4 && page._pageDictionary.has('MediaBox')) {\n                if (mBox[0] > 0 || mBox[1] > 0 || size[0] === mBox[2] || size[1] === mBox[3]) {\n                    rect.x -= mBox[0];\n                    rect.y = mBox[3] - (rect.y + rect.height);\n                }\n                else {\n                    rect.y = size[1] - (rect.y + rect.height);\n                }\n            }\n            else {\n                rect.y = size[1] - (rect.y + rect.height);\n            }\n        }\n        else {\n            rect.y = rect.y + rect.height;\n        }\n    }\n    return rect;\n}\n/**\n * Calculate bounds of annotation or field.\n *\n * @private\n * @param {number[]} value array value.\n * @returns {any} Rectangle value.\n */\nfunction _toRectangle(value) {\n    return {\n        x: Math.min(value[0], value[2]),\n        y: Math.min(value[1], value[3]),\n        width: Math.abs(value[0] - value[2]),\n        height: Math.abs(value[1] - value[3])\n    };\n}\n/**\n * Calculate bounds of annotation or field.\n *\n * @private\n * @param {any} value Rectangle value.\n * @param {any} value.x X value.\n * @param {any} value.y Y value.\n * @param {any} value.width Width value.\n * @param {any} value.height Height value.\n * @returns {number[]} Bounds value.\n */\nfunction _fromRectangle(value) {\n    return [value.x, value.y, value.x + value.width, value.y + value.height];\n}\n/**\n * Calculate bounds of annotation or field.\n *\n * @private\n * @param {number[]} value Input dictionary.\n * @param {string} page Input page.\n * @returns {number[]} Bounds value.\n */\nfunction _getUpdatedBounds(value, page) {\n    var x = value[0];\n    var y = value[1];\n    var width = value[2];\n    var height = value[3];\n    if (page) {\n        var size = page.size;\n        var pageWidth = size[0];\n        var pageHeight = size[1];\n        var mBox = page.mediaBox;\n        var cropBox = page.cropBox;\n        if (cropBox && Array.isArray(cropBox) && cropBox.length === 4) {\n            if (cropBox[0] !== 0 || cropBox[1] !== 0 || pageWidth === cropBox[2] || pageHeight === cropBox[3]) {\n                x += cropBox[0];\n                y = cropBox[3] - (y + height);\n            }\n            else {\n                y = pageHeight - (y + height);\n            }\n        }\n        else if (mBox && Array.isArray(mBox) && mBox.length === 4) {\n            if (mBox[0] > 0 || mBox[1] > 0 || pageWidth === mBox[2] || pageHeight === mBox[3]) {\n                x -= mBox[0];\n                y = mBox[3] - (y + height);\n            }\n            else {\n                y = pageHeight - (y + height);\n            }\n        }\n        else {\n            y = pageHeight - (y + height);\n        }\n    }\n    return [x, y, x + width, y + height];\n}\n/**\n * Parse RGB color.\n *\n * @private\n * @param {string} colorString Color value in string format.\n * @returns {number[]} RGB color value.\n */\nfunction _convertToColor(colorString) {\n    var color = _getColorValue(colorString);\n    if (!color) {\n        var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(colorString);\n        if (result) {\n            color = [Number.parseInt(result[1], 16), parseInt(result[2], 16), parseInt(result[3], 16)];\n        }\n    }\n    return color;\n}\n/**\n * Parse RGB color.\n *\n * @private\n * @param {number[]} array Color array in dictionary.\n * @returns {number[]} RGB color value.\n */\nfunction _parseColor(array) {\n    var color;\n    if (array) {\n        if (array.length === 1) {\n            var entry = array[0];\n            if (typeof entry !== 'undefined') {\n                var round = Math.round(entry * 255);\n                color = [round, round, round];\n            }\n        }\n        else if (array.length === 3) {\n            var r = array[0];\n            var g = array[1];\n            var b = array[2];\n            if (typeof r !== 'undefined' && typeof g !== 'undefined' && typeof b !== 'undefined') {\n                color = [Math.round(r * 255), Math.round(g * 255), Math.round(b * 255)];\n            }\n        }\n        else if (array.length === 4) {\n            var c = array[0];\n            var m = array[1];\n            var y = array[2];\n            var k = array[3];\n            if (typeof c !== 'undefined' && typeof m !== 'undefined' && typeof y !== 'undefined' && typeof k !== 'undefined') {\n                var fBlack = k * 255;\n                color = [Math.round(255 - Math.min(255, ((c * (255 - fBlack)) + fBlack))),\n                    Math.round(255 - Math.min(255, ((m * (255 - fBlack)) + fBlack))),\n                    Math.round(255 - Math.min(255, ((y * (255 - fBlack)) + fBlack)))];\n            }\n        }\n    }\n    return color;\n}\n/**\n * Get the border style in _PdfName.\n *\n * @private\n * @param {PdfBorderStyle} style border style in enum.\n * @returns {_PdfName} border style in _PdfName.\n */\nfunction _mapBorderStyle(style) {\n    var token = 'S';\n    switch (style) {\n        case _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfBorderStyle.dot:\n        case _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfBorderStyle.dashed:\n            token = 'D';\n            break;\n        case _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfBorderStyle.beveled:\n            token = 'B';\n            break;\n        case _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfBorderStyle.inset:\n            token = 'I';\n            break;\n        case _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfBorderStyle.underline:\n            token = 'U';\n            break;\n    }\n    return _pdf_primitives__WEBPACK_IMPORTED_MODULE_0__._PdfName.get(token);\n}\n/**\n * Get the border effect style in _PdfName.\n *\n * @private\n * @param {string} style border effect style as string.\n * @returns {PdfBorderEffectStyle} border effect style.\n */\nfunction _mapBorderEffectStyle(style) {\n    var value = _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfBorderEffectStyle.solid;\n    switch (style) {\n        case 'C':\n            value = _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfBorderEffectStyle.cloudy;\n            break;\n    }\n    return value;\n}\n/**\n * Get the string value for line ending style.\n *\n * @private\n * @param {PdfLineEndingStyle} style style in enum.\n * @returns {string} value default None.\n */\nfunction _reverseMapEndingStyle(style) {\n    var value = 'None';\n    if (typeof style !== 'undefined') {\n        switch (style) {\n            case _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfLineEndingStyle.openArrow:\n                value = 'OpenArrow';\n                break;\n            case _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfLineEndingStyle.closedArrow:\n                value = 'ClosedArrow';\n                break;\n            case _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfLineEndingStyle.rOpenArrow:\n                value = 'ROpenArrow';\n                break;\n            case _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfLineEndingStyle.rClosedArrow:\n                value = 'RClosedArrow';\n                break;\n            case _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfLineEndingStyle.butt:\n                value = 'Butt';\n                break;\n            case _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfLineEndingStyle.diamond:\n                value = 'Diamond';\n                break;\n            case _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfLineEndingStyle.circle:\n                value = 'Circle';\n                break;\n            case _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfLineEndingStyle.square:\n                value = 'Square';\n                break;\n            case _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfLineEndingStyle.slash:\n                value = 'Slash';\n                break;\n        }\n    }\n    return value;\n}\n/**\n * Get the enum value for line ending style.\n *\n * @private\n * @param {string} style Style value in string.\n * @param {PdfLineEndingStyle} defaultValue Default style value to return.\n * @returns {PdfLineEndingStyle} enum value default 0.\n */\nfunction _mapLineEndingStyle(style, defaultValue) {\n    var value = typeof defaultValue !== 'undefined' ? defaultValue : _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfLineEndingStyle.none;\n    switch (style.toLowerCase()) {\n        case 'openarrow':\n            value = _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfLineEndingStyle.openArrow;\n            break;\n        case 'closedarrow':\n            value = _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfLineEndingStyle.closedArrow;\n            break;\n        case 'ropenarrow':\n            value = _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfLineEndingStyle.rOpenArrow;\n            break;\n        case 'rclosedarrow':\n            value = _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfLineEndingStyle.rClosedArrow;\n            break;\n        case 'butt':\n            value = _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfLineEndingStyle.butt;\n            break;\n        case 'diamond':\n            value = _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfLineEndingStyle.diamond;\n            break;\n        case 'circle':\n            value = _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfLineEndingStyle.circle;\n            break;\n        case 'square':\n            value = _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfLineEndingStyle.square;\n            break;\n        case 'slash':\n            value = _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfLineEndingStyle.slash;\n            break;\n    }\n    return value;\n}\n/**\n * Get highlight mode.\n *\n * @private\n * @param {string} mode Mode entry in dictionary.\n * @returns {PdfHighlightMode} Highlight mode.\n */\nfunction _mapHighlightMode(mode) {\n    switch (mode) {\n        case 'P':\n            return _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfHighlightMode.push;\n        case 'N':\n            return _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfHighlightMode.noHighlighting;\n        case 'O':\n            return _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfHighlightMode.outline;\n        default:\n            return _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfHighlightMode.invert;\n    }\n}\n/**\n * Get highlight mode as string.\n *\n * @private\n * @param {PdfHighlightMode} mode Mode entry.\n * @returns {_PdfName} Highlight mode as PDF name.\n */\nfunction _reverseMapHighlightMode(mode) {\n    switch (mode) {\n        case _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfHighlightMode.push:\n            return _pdf_primitives__WEBPACK_IMPORTED_MODULE_0__._PdfName.get('P');\n        case _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfHighlightMode.noHighlighting:\n            return _pdf_primitives__WEBPACK_IMPORTED_MODULE_0__._PdfName.get('N');\n        case _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfHighlightMode.outline:\n            return _pdf_primitives__WEBPACK_IMPORTED_MODULE_0__._PdfName.get('O');\n        default:\n            return _pdf_primitives__WEBPACK_IMPORTED_MODULE_0__._PdfName.get('I');\n    }\n}\n/**\n * Reverse map blend mode.\n *\n * @private\n * @param {PdfBlendMode} mode Mode entry.\n * @returns {_PdfName} Blend mode as name.\n */\nfunction _reverseMapBlendMode(mode) {\n    var token = 'Normal';\n    switch (mode) {\n        case _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfBlendMode.multiply:\n            token = 'Multiply';\n            break;\n        case _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfBlendMode.screen:\n            token = 'Screen';\n            break;\n        case _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfBlendMode.overlay:\n            token = 'Overlay';\n            break;\n        case _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfBlendMode.darken:\n            token = 'Darken';\n            break;\n        case _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfBlendMode.lighten:\n            token = 'Lighten';\n            break;\n        case _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfBlendMode.colorDodge:\n            token = 'ColorDodge';\n            break;\n        case _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfBlendMode.colorBurn:\n            token = 'ColorBurn';\n            break;\n        case _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfBlendMode.hardLight:\n            token = 'HardLight';\n            break;\n        case _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfBlendMode.softLight:\n            token = 'SoftLight';\n            break;\n        case _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfBlendMode.difference:\n            token = 'Difference';\n            break;\n        case _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfBlendMode.exclusion:\n            token = 'Exclusion';\n            break;\n        case _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfBlendMode.hue:\n            token = 'Hue';\n            break;\n        case _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfBlendMode.saturation:\n            token = 'Saturation';\n            break;\n        case _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfBlendMode.color:\n            token = 'Color';\n            break;\n        case _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfBlendMode.luminosity:\n            token = 'Luminosity';\n            break;\n        default:\n            token = 'Normal';\n            break;\n    }\n    return _pdf_primitives__WEBPACK_IMPORTED_MODULE_0__._PdfName.get(token);\n}\n/**\n * Map blend mode.\n *\n * @private\n * @param {_PdfName} token Blend mode as name.\n * @returns {PdfBlendMode} Mode value;\n */\nfunction _mapBlendMode(token) {\n    var style = _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfBlendMode.normal;\n    switch (token.name) {\n        case 'Multiply':\n            style = _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfBlendMode.multiply;\n            break;\n        case 'Screen':\n            style = _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfBlendMode.screen;\n            break;\n        case 'Overlay':\n            style = _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfBlendMode.overlay;\n            break;\n        case 'Darken':\n            style = _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfBlendMode.darken;\n            break;\n        case 'Lighten':\n            style = _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfBlendMode.lighten;\n            break;\n        case 'ColorDodge':\n            style = _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfBlendMode.colorDodge;\n            break;\n        case 'ColorBurn':\n            style = _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfBlendMode.colorBurn;\n            break;\n        case 'HardLight':\n            style = _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfBlendMode.hardLight;\n            break;\n        case 'SoftLight':\n            style = _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfBlendMode.softLight;\n            break;\n        case 'Difference':\n            style = _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfBlendMode.difference;\n            break;\n        case 'Exclusion':\n            style = _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfBlendMode.exclusion;\n            break;\n        case 'Hue':\n            style = _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfBlendMode.hue;\n            break;\n        case 'Saturation':\n            style = _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfBlendMode.saturation;\n            break;\n        case 'Color':\n            style = _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfBlendMode.color;\n            break;\n        case 'Luminosity':\n            style = _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfBlendMode.luminosity;\n            break;\n        default:\n            style = _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfBlendMode.normal;\n            break;\n    }\n    return style;\n}\n/**\n * Convert float to string.\n *\n * @private\n * @param {number} value number value.\n * @returns {string} equal fixed length string value;\n */\nfunction _floatToString(value) {\n    var returnString = value.toFixed(2);\n    if (returnString === '0.00') {\n        returnString = '.00';\n    }\n    return returnString;\n}\n/**\n * Check and add proc set value.\n *\n * @private\n * @param {string} value entry.\n * @param {_PdfDictionary} dictionary source dictionary.\n * @returns {void} Nothing;\n */\nfunction _addProcSet(value, dictionary) {\n    var name = _pdf_primitives__WEBPACK_IMPORTED_MODULE_0__._PdfName.get(value);\n    if (dictionary.has('ProcSet')) {\n        var procset = dictionary.getArray('ProcSet');\n        if (procset && procset.indexOf(name) === -1) {\n            procset.push(name);\n            dictionary.update('ProcSet', procset);\n        }\n    }\n    else {\n        dictionary.update('ProcSet', [name]);\n    }\n}\n/**\n * Get new GUID string.\n *\n * @private\n * @returns {string} A new GUID string;\n */\nfunction _getNewGuidString() {\n    return 'aaaaaaaa-aaaa-4aaa-baaa-aaaaaaaaaaaa'.replace(/[ab]/g, function (c) {\n        var random = Math.random() * 16 | 0;\n        var result = c === 'a' ? random : (random & 0x3 | 0x8);\n        return result.toString(16);\n    });\n}\n/**\n * Escape PDF name.\n *\n * @private\n * @param {string} value name value.\n * @returns {string} equal and processed name value;\n */\nfunction _escapePdfName(value) {\n    var buffer = [];\n    var start = 0;\n    for (var i = 0; i < value.length; i++) {\n        var char = value.charCodeAt(i);\n        if (char < 0x21 ||\n            char > 0x7e ||\n            char === 0x23 ||\n            char === 0x28 ||\n            char === 0x29 ||\n            char === 0x3c ||\n            char === 0x3e ||\n            char === 0x5b ||\n            char === 0x5d ||\n            char === 0x7b ||\n            char === 0x7d ||\n            char === 0x2f ||\n            char === 0x25) {\n            if (start < i) {\n                buffer.push(value.substring(start, i));\n            }\n            buffer.push(\"#\" + char.toString(16));\n            start = i + 1;\n        }\n    }\n    if (buffer.length === 0) {\n        return value;\n    }\n    if (start < value.length) {\n        buffer.push(value.substring(start, value.length));\n    }\n    return buffer.join('');\n}\n/**\n * Calculate bezier arc points.\n *\n * @private\n * @param {number} x1 value.\n * @param {number} y1 value.\n * @param {number} x2 value.\n * @param {number} y2 value.\n * @param {number} start value.\n * @param {number} extent value.\n * @returns {number[]} bezier arc points;\n */\nfunction _getBezierArc(x1, y1, x2, y2, start, extent) {\n    if (x1 > x2) {\n        var swap = x1;\n        x1 = x2;\n        x2 = swap;\n    }\n    if (y2 > y1) {\n        var swap = y1;\n        y1 = y2;\n        y2 = swap;\n    }\n    var angle;\n    var count;\n    if (Math.abs(extent) <= 90) {\n        angle = extent;\n        count = 1;\n    }\n    else {\n        count = Math.ceil(Math.abs(extent) / 90);\n        angle = extent / count;\n    }\n    var first = ((x1 + x2) / 2);\n    var second = ((y1 + y2) / 2);\n    var firstAngle = ((x2 - x1) / 2);\n    var secondAngle = ((y2 - y1) / 2);\n    var half = (angle * (Math.PI / 360));\n    var value = (Math.abs(4.0 / 3.0 * (1.0 - Math.cos(half)) / Math.sin(half)));\n    var points = [];\n    for (var i = 0; (i < count); i++) {\n        var zero = (((start + (i * angle)) * (Math.PI / 180)));\n        var one = (((start + ((i + 1) * angle)) * (Math.PI / 180)));\n        var cosZero = (Math.cos(zero));\n        var cosOne = (Math.cos(one));\n        var sinZero = (Math.sin(zero));\n        var sinOne = (Math.sin(one));\n        if ((angle > 0)) {\n            points.push(first + (firstAngle * cosZero));\n            points.push(second - (secondAngle * sinZero));\n            points.push(first + (firstAngle * (cosZero - (value * sinZero))));\n            points.push(second - (secondAngle * (sinZero + (value * cosZero))));\n            points.push(first + (firstAngle * (cosOne + (value * sinOne))));\n            points.push(second - (secondAngle * (sinOne - (value * cosOne))));\n            points.push(first + (firstAngle * cosOne));\n            points.push(second - (secondAngle * sinOne));\n        }\n        else {\n            points.push(first + (firstAngle * cosZero));\n            points.push(second - (secondAngle * sinZero));\n            points.push(first + (firstAngle * (cosZero + (value * sinZero))));\n            points.push(second - (secondAngle * (sinZero - (value * cosZero))));\n            points.push(first + (firstAngle * (cosOne - (value * sinOne))));\n            points.push(second - (secondAngle * (sinOne + (value * cosOne))));\n            points.push(first + (firstAngle * cosOne));\n            points.push(second - (secondAngle * sinOne));\n        }\n    }\n    return points;\n}\n/**\n * Find page of the annotation.\n *\n * @private\n * @param {PdfDocument} document PDF document.\n * @param {_PdfReference} reference Annotation reference.\n * @returns {PdfPage} Page of the annotation;\n */\nfunction _findPage(document, reference) {\n    var page;\n    for (var i = 0; i < document.pageCount && typeof page === 'undefined'; i++) {\n        var entry = document.getPage(i);\n        if (entry && entry._pageDictionary.has('Annots')) {\n            var annots = entry._pageDictionary.get('Annots');\n            if (annots !== null && typeof annots !== 'undefined' && annots.length > 0) {\n                for (var j = 0; j < annots.length && typeof page === 'undefined'; j++) {\n                    var ref = annots[Number.parseInt(j.toString(), 10)];\n                    if (ref !== null && typeof ref !== 'undefined' && ref instanceof _pdf_primitives__WEBPACK_IMPORTED_MODULE_0__._PdfReference && ref === reference) {\n                        page = entry;\n                    }\n                }\n            }\n        }\n    }\n    return page;\n}\n/**\n * Check the field is checked or not.\n *\n * @private\n * @param {_PdfDictionary} dictionary PDF dictionary.\n * @returns {boolean} True if the field is checked, otherwise false;\n */\nfunction _checkField(dictionary) {\n    var check = false;\n    if (dictionary.has('AS')) {\n        var state = dictionary.get('AS');\n        if (state) {\n            check = state.name !== 'Off';\n        }\n        else {\n            var actual = dictionary.get('V');\n            if (actual) {\n                check = actual.name === _getItemValue(dictionary);\n            }\n        }\n    }\n    return check;\n}\n/**\n * Get item value from state item field.\n *\n * @private\n * @param {_PdfDictionary} itemDictionary PDF document.\n * @returns {string} value of item;\n */\nfunction _getItemValue(itemDictionary) {\n    var itemValue = '';\n    var name;\n    if (itemDictionary.has('AS')) {\n        name = itemDictionary.get('AS');\n        if (name !== null && name.name !== 'Off') {\n            itemValue = name.name;\n        }\n    }\n    if (itemValue === '' && itemDictionary.has('AP')) {\n        var dictionary = itemDictionary.get('AP');\n        if (dictionary && dictionary.has('N')) {\n            var appearance = dictionary.get('N');\n            if (appearance instanceof _base_stream__WEBPACK_IMPORTED_MODULE_4__._PdfBaseStream) {\n                appearance = appearance.dictionary;\n            }\n            if (appearance && appearance instanceof _pdf_primitives__WEBPACK_IMPORTED_MODULE_0__._PdfDictionary) {\n                var keys_1 = [];\n                appearance.forEach(function (key, value) {\n                    keys_1.push(key);\n                });\n                for (var i = 0; i < keys_1.length; i++) {\n                    if (keys_1[Number.parseInt(i.toString(), 10)] !== 'Off') {\n                        itemValue = keys_1[Number.parseInt(i.toString(), 10)];\n                        break;\n                    }\n                }\n            }\n        }\n    }\n    return itemValue;\n}\n/**\n * Get state item template.\n *\n * @private\n * @param {_PdfCheckFieldState} state Check field state.\n * @param {PdfStateItem | PdfField} item source to check.\n * @returns {PdfTemplate} Appearance template;\n */\nfunction _getStateTemplate(state, item) {\n    var value = state === _enumerator__WEBPACK_IMPORTED_MODULE_2__._PdfCheckFieldState.checked ? _getItemValue(item._dictionary) : 'Off';\n    var template;\n    if (item._dictionary.has('AP')) {\n        var dictionary = item._dictionary.get('AP');\n        if (dictionary && dictionary.has('N')) {\n            var appearance = dictionary.get('N');\n            if (appearance && appearance instanceof _base_stream__WEBPACK_IMPORTED_MODULE_4__._PdfBaseStream) {\n                appearance = appearance.dictionary;\n            }\n            if (appearance && appearance instanceof _pdf_primitives__WEBPACK_IMPORTED_MODULE_0__._PdfDictionary && (value && value !== '' && appearance.has(value))) {\n                var stream = appearance.get(value);\n                var reference = appearance.getRaw(value);\n                if (reference) {\n                    stream.reference = reference;\n                }\n                if (stream) {\n                    template = new _graphics_pdf_template__WEBPACK_IMPORTED_MODULE_6__.PdfTemplate(stream, item._crossReference);\n                }\n            }\n        }\n    }\n    return template;\n}\n/**\n * Get color value\n *\n * @private\n * @param {string} colorName name of the color.\n * @returns {number[]} return color value as number array.\n */\nfunction _getColorValue(colorName) {\n    var color;\n    switch (colorName) {\n        case 'transparent':\n            color = [255, 255, 255];\n            break;\n        case 'aliceblue':\n            color = [240, 248, 255];\n            break;\n        case 'antiquewhite':\n            color = [250, 235, 215];\n            break;\n        case 'aqua':\n            color = [0, 255, 255];\n            break;\n        case 'aquamarine':\n            color = [127, 255, 212];\n            break;\n        case 'azure':\n            color = [240, 255, 255];\n            break;\n        case 'beige':\n            color = [245, 245, 220];\n            break;\n        case 'bisque':\n            color = [255, 228, 196];\n            break;\n        case 'black':\n            color = [0, 0, 0];\n            break;\n        case 'blanchedalmond':\n            color = [255, 235, 205];\n            break;\n        case 'blue':\n            color = [0, 0, 255];\n            break;\n        case 'blueviolet':\n            color = [138, 43, 226];\n            break;\n        case 'brown':\n            color = [165, 42, 42];\n            break;\n        case 'burlywood':\n            color = [222, 184, 135];\n            break;\n        case 'cadetBlue':\n            color = [95, 158, 160];\n            break;\n        case 'chartreuse':\n            color = [127, 255, 0];\n            break;\n        case 'chocolate':\n            color = [210, 105, 30];\n            break;\n        case 'coral':\n            color = [255, 127, 80];\n            break;\n        case 'cornflowerblue':\n            color = [100, 149, 237];\n            break;\n        case 'cornsilk':\n            color = [255, 248, 220];\n            break;\n        case 'crimson':\n            color = [220, 20, 60];\n            break;\n        case 'cyan':\n            color = [0, 255, 255];\n            break;\n        case 'darkblue':\n            color = [0, 0, 139];\n            break;\n        case 'darkcyan':\n            color = [0, 139, 139];\n            break;\n        case 'darkgoldenrod':\n            color = [184, 134, 11];\n            break;\n        case 'darkgray':\n            color = [169, 169, 169];\n            break;\n        case 'darkgreen':\n            color = [0, 100, 0];\n            break;\n        case 'darkkhaki':\n            color = [189, 183, 107];\n            break;\n        case 'darkmagenta':\n            color = [139, 0, 139];\n            break;\n        case 'darkolivegreen':\n            color = [85, 107, 47];\n            break;\n        case 'darkorange':\n            color = [255, 140, 0];\n            break;\n        case 'darkorchid':\n            color = [153, 50, 204];\n            break;\n        case 'darkred':\n            color = [139, 0, 0];\n            break;\n        case 'darksalmon':\n            color = [233, 150, 122];\n            break;\n        case 'darkseagreen':\n            color = [143, 188, 139];\n            break;\n        case 'darkslateblue':\n            color = [72, 61, 139];\n            break;\n        case 'darkslategray':\n            color = [47, 79, 79];\n            break;\n        case 'darkturquoise':\n            color = [0, 206, 209];\n            break;\n        case 'darkviolet':\n            color = [148, 0, 211];\n            break;\n        case 'deeppink':\n            color = [255, 20, 147];\n            break;\n        case 'deepskyblue':\n            color = [0, 191, 255];\n            break;\n        case 'dimgray':\n            color = [105, 105, 105];\n            break;\n        case 'dodgerblue':\n            color = [30, 144, 255];\n            break;\n        case 'firebrick':\n            color = [178, 34, 34];\n            break;\n        case 'floralwhite':\n            color = [255, 250, 240];\n            break;\n        case 'forestgreen':\n            color = [34, 139, 34];\n            break;\n        case 'fuchsia':\n            color = [255, 0, 255];\n            break;\n        case 'gainsboro':\n            color = [220, 220, 220];\n            break;\n        case 'ghostwhite':\n            color = [248, 248, 255];\n            break;\n        case 'gold':\n            color = [255, 215, 0];\n            break;\n        case 'goldenrod':\n            color = [218, 165, 32];\n            break;\n        case 'gray':\n            color = [128, 128, 128];\n            break;\n        case 'green':\n            color = [0, 128, 0];\n            break;\n        case 'greenyellow':\n            color = [173, 255, 47];\n            break;\n        case 'honeydew':\n            color = [240, 255, 240];\n            break;\n        case 'hotpink':\n            color = [255, 105, 180];\n            break;\n        case 'indianred':\n            color = [205, 92, 92];\n            break;\n        case 'indigo':\n            color = [75, 0, 130];\n            break;\n        case 'ivory':\n            color = [255, 255, 240];\n            break;\n        case 'khaki':\n            color = [240, 230, 140];\n            break;\n        case 'lavender':\n            color = [230, 230, 250];\n            break;\n        case 'lavenderblush':\n            color = [255, 240, 245];\n            break;\n        case 'lawngreen':\n            color = [124, 252, 0];\n            break;\n        case 'lemonchiffon':\n            color = [255, 250, 205];\n            break;\n        case 'lightblue':\n            color = [173, 216, 230];\n            break;\n        case 'lightcoral':\n            color = [240, 128, 128];\n            break;\n        case 'lightcyan':\n            color = [224, 255, 255];\n            break;\n        case 'lightgoldenrodyellow':\n            color = [250, 250, 210];\n            break;\n        case 'lightgreen':\n            color = [144, 238, 144];\n            break;\n        case 'lightgray':\n            color = [211, 211, 211];\n            break;\n        case 'LightPink':\n            color = [255, 182, 193];\n            break;\n        case 'lightsalmon':\n            color = [255, 160, 122];\n            break;\n        case 'lightseagreen':\n            color = [32, 178, 170];\n            break;\n        case 'lightskyblue':\n            color = [135, 206, 250];\n            break;\n        case 'lightslategray':\n            color = [119, 136, 153];\n            break;\n        case 'lightsteelblue':\n            color = [176, 196, 222];\n            break;\n        case 'lightyellow':\n            color = [255, 255, 224];\n            break;\n        case 'lime':\n            color = [0, 255, 0];\n            break;\n        case 'limeGreen':\n            color = [50, 205, 50];\n            break;\n        case 'linen':\n            color = [250, 240, 230];\n            break;\n        case 'magenta':\n            color = [255, 0, 255];\n            break;\n        case 'maroon':\n            color = [128, 0, 0];\n            break;\n        case 'mediumaquamarine':\n            color = [102, 205, 170];\n            break;\n        case 'mediumblue':\n            color = [0, 0, 205];\n            break;\n        case 'mediumorchid':\n            color = [186, 85, 211];\n            break;\n        case 'mediumpurple':\n            color = [147, 112, 219];\n            break;\n        case 'mediumseagreen':\n            color = [60, 179, 113];\n            break;\n        case 'mediumslateblue':\n            color = [123, 104, 238];\n            break;\n        case 'mediumspringgreen':\n            color = [0, 250, 154];\n            break;\n        case 'mediumturquoise':\n            color = [72, 209, 204];\n            break;\n        case 'mediumvioletred':\n            color = [199, 21, 133];\n            break;\n        case 'midnightblue':\n            color = [25, 25, 112];\n            break;\n        case 'mintcream':\n            color = [245, 255, 250];\n            break;\n        case 'mistyrose':\n            color = [255, 228, 225];\n            break;\n        case 'moccasin':\n            color = [255, 228, 181];\n            break;\n        case 'navajowhite':\n            color = [255, 222, 173];\n            break;\n        case 'navy':\n            color = [0, 0, 128];\n            break;\n        case 'oldLace':\n            color = [253, 245, 230];\n            break;\n        case 'olive':\n            color = [128, 128, 0];\n            break;\n        case 'olivedrab':\n            color = [107, 142, 35];\n            break;\n        case 'orange':\n            color = [255, 165, 0];\n            break;\n        case 'orangered':\n            color = [255, 69, 0];\n            break;\n        case 'orchid':\n            color = [218, 112, 214];\n            break;\n        case 'palegoldenrod':\n            color = [238, 232, 170];\n            break;\n        case 'palegreen':\n            color = [152, 251, 152];\n            break;\n        case 'paleturquoise':\n            color = [175, 238, 238];\n            break;\n        case 'palebioletred':\n            color = [219, 112, 147];\n            break;\n        case 'papayawhip':\n            color = [255, 239, 213];\n            break;\n        case 'peachpuff':\n            color = [255, 218, 185];\n            break;\n        case 'peru':\n            color = [205, 133, 63];\n            break;\n        case 'pink':\n            color = [255, 192, 203];\n            break;\n        case 'plum':\n            color = [221, 160, 221];\n            break;\n        case 'powderblue':\n            color = [176, 224, 230];\n            break;\n        case 'purple':\n            color = [128, 0, 128];\n            break;\n        case 'red':\n            color = [255, 0, 0];\n            break;\n        case 'rosybrown':\n            color = [188, 143, 143];\n            break;\n        case 'royalblue':\n            color = [65, 105, 225];\n            break;\n        case 'saddlebrown':\n            color = [139, 69, 19];\n            break;\n        case 'salmon':\n            color = [250, 128, 114];\n            break;\n        case 'sandybrown':\n            color = [244, 164, 96];\n            break;\n        case 'seagreen':\n            color = [46, 139, 87];\n            break;\n        case 'seashell':\n            color = [255, 245, 238];\n            break;\n        case 'sienna':\n            color = [160, 82, 45];\n            break;\n        case 'silver':\n            color = [192, 192, 192];\n            break;\n        case 'skyblue':\n            color = [135, 206, 235];\n            break;\n        case 'slateblue':\n            color = [106, 90, 205];\n            break;\n        case 'slategray':\n            color = [112, 128, 144];\n            break;\n        case 'snow':\n            color = [255, 250, 250];\n            break;\n        case 'springgreen':\n            color = [0, 255, 127];\n            break;\n        case 'steelblue':\n            color = [70, 130, 180];\n            break;\n        case 'tan':\n            color = [210, 180, 140];\n            break;\n        case 'teal':\n            color = [0, 128, 128];\n            break;\n        case 'thistle':\n            color = [216, 191, 216];\n            break;\n        case 'tomato':\n            color = [255, 99, 71];\n            break;\n        case 'turquoise':\n            color = [64, 224, 208];\n            break;\n        case 'violet':\n            color = [238, 130, 238];\n            break;\n        case 'wheat':\n            color = [245, 222, 179];\n            break;\n        case 'white':\n            color = [255, 255, 255];\n            break;\n        case 'whitesmoke':\n            color = [245, 245, 245];\n            break;\n        case 'yellow':\n            color = [255, 255, 0];\n            break;\n        case 'yellowgreen':\n            color = [154, 205, 50];\n            break;\n    }\n    return color;\n}\n/**\n * Update box value in template bounds.\n *\n * @private\n * @param {PdfTemplate} template Template object.\n * @param {number} angle Angle value.\n * @returns {void} Nothing.\n */\nfunction _setMatrix(template, angle) {\n    var box = template._content.dictionary.getArray('BBox');\n    if (box && typeof angle !== 'undefined' && angle !== null) {\n        if (angle === 0) {\n            template._content.dictionary.set('Matrix', [1, 0, 0, 1, -box[0], -box[1]]);\n        }\n        else {\n            var matrix = new _graphics_pdf_graphics__WEBPACK_IMPORTED_MODULE_3__._PdfTransformationMatrix();\n            if (angle === 90) {\n                matrix._translate(box[3], -box[0]);\n            }\n            else if (angle === 180) {\n                matrix._translate(box[2], box[3]);\n            }\n            else if (angle === 270) {\n                matrix._translate(-box[1], box[2]);\n            }\n            matrix._rotate(angle);\n            template._content.dictionary.set('Matrix', matrix._matrix._elements);\n        }\n    }\n}\n/**\n * Get the state item style to string\n *\n * @private\n * @param {PdfCheckBoxStyle} style State item style.\n * @returns {string} return as string value.\n */\nfunction _styleToString(style) {\n    var value = '4';\n    switch (style) {\n        case _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfCheckBoxStyle.circle:\n            value = 'l';\n            break;\n        case _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfCheckBoxStyle.cross:\n            value = '8';\n            break;\n        case _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfCheckBoxStyle.diamond:\n            value = 'u';\n            break;\n        case _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfCheckBoxStyle.square:\n            value = 'n';\n            break;\n        case _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfCheckBoxStyle.star:\n            value = 'H';\n            break;\n    }\n    return value;\n}\n/**\n * Get the string to state item style\n *\n * @private\n * @param {string} style State item style as string.\n * @returns {PdfCheckBoxStyle} return as state item style.\n */\nfunction _stringToStyle(style) {\n    var value = _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfCheckBoxStyle.check;\n    switch (style) {\n        case 'l':\n            value = _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfCheckBoxStyle.circle;\n            break;\n        case '8':\n            value = _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfCheckBoxStyle.cross;\n            break;\n        case 'u':\n            value = _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfCheckBoxStyle.diamond;\n            break;\n        case 'n':\n            value = _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfCheckBoxStyle.square;\n            break;\n        case 'H':\n            value = _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfCheckBoxStyle.star;\n            break;\n    }\n    return value;\n}\n/**\n * Map measurement unit type.\n *\n * @private\n * @param {string} unitString measurement unit as string.\n * @returns {PdfMeasurementUnit} measurement unit.\n */\nfunction _mapMeasurementUnit(unitString) {\n    var unit;\n    switch (unitString) {\n        case 'cm':\n            unit = _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfMeasurementUnit.centimeter;\n            break;\n        case 'in':\n            unit = _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfMeasurementUnit.inch;\n            break;\n        case 'mm':\n            unit = _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfMeasurementUnit.millimeter;\n            break;\n        case 'p':\n            unit = _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfMeasurementUnit.pica;\n            break;\n        case 'pt':\n            unit = _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfMeasurementUnit.point;\n            break;\n        default:\n            unit = _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfMeasurementUnit.centimeter;\n            break;\n    }\n    return unit;\n}\n/**\n * Map markup annotation type.\n *\n * @private\n * @param {string} text markup type as string.\n * @returns {PdfTextMarkupAnnotationType} markup type as name.\n */\nfunction _mapMarkupAnnotationType(text) {\n    var type;\n    switch (text) {\n        case 'Highlight':\n            type = _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfTextMarkupAnnotationType.highlight;\n            break;\n        case 'Squiggly':\n            type = _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfTextMarkupAnnotationType.squiggly;\n            break;\n        case 'StrikeOut':\n            type = _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfTextMarkupAnnotationType.strikeOut;\n            break;\n        case 'Underline':\n            type = _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfTextMarkupAnnotationType.underline;\n            break;\n        default:\n            type = _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfTextMarkupAnnotationType.highlight;\n            break;\n    }\n    return type;\n}\n/**\n * Reverse text markup annotation type.\n *\n * @private\n * @param {PdfTextMarkupAnnotationType} type markup type.\n * @returns {string} markup type as name.\n */\nfunction _reverseMarkupAnnotationType(type) {\n    var token = 'Highlight';\n    switch (type) {\n        case _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfTextMarkupAnnotationType.highlight:\n            token = 'Highlight';\n            break;\n        case _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfTextMarkupAnnotationType.squiggly:\n            token = 'Squiggly';\n            break;\n        case _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfTextMarkupAnnotationType.strikeOut:\n            token = 'StrikeOut';\n            break;\n        case _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfTextMarkupAnnotationType.underline:\n            token = 'Underline';\n            break;\n        default:\n            token = 'Highlight';\n            break;\n    }\n    return token;\n}\n/**\n * Map graphics unit.\n *\n * @private\n * @param {string} unitString String value.\n * @returns {_PdfGraphicsUnit} PDF graphics unit.\n */\nfunction _mapGraphicsUnit(unitString) {\n    var unit;\n    switch (unitString) {\n        case 'cm':\n            unit = _enumerator__WEBPACK_IMPORTED_MODULE_2__._PdfGraphicsUnit.centimeter;\n            break;\n        case 'in':\n            unit = _enumerator__WEBPACK_IMPORTED_MODULE_2__._PdfGraphicsUnit.inch;\n            break;\n        case 'mm':\n            unit = _enumerator__WEBPACK_IMPORTED_MODULE_2__._PdfGraphicsUnit.millimeter;\n            break;\n        case 'p':\n            unit = _enumerator__WEBPACK_IMPORTED_MODULE_2__._PdfGraphicsUnit.pica;\n            break;\n        case 'pt':\n            unit = _enumerator__WEBPACK_IMPORTED_MODULE_2__._PdfGraphicsUnit.point;\n            break;\n        default:\n            unit = _enumerator__WEBPACK_IMPORTED_MODULE_2__._PdfGraphicsUnit.centimeter;\n            break;\n    }\n    return unit;\n}\n/**\n * Map rubber stamp icon.\n *\n * @param {string} iconString String value.\n * @returns {PdfRubberStampAnnotationIcon} Rubber stamp icon.\n */\nfunction _mapRubberStampIcon(iconString) {\n    var icon;\n    switch (iconString) {\n        case '#Approved':\n        case 'SBApproved':\n            icon = _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfRubberStampAnnotationIcon.approved;\n            break;\n        case '#AsIs':\n        case 'SBAsIs':\n            icon = _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfRubberStampAnnotationIcon.asIs;\n            break;\n        case '#Completed':\n        case 'SBCompleted':\n            icon = _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfRubberStampAnnotationIcon.completed;\n            break;\n        case '#Confidential':\n        case 'SBConfidential':\n            icon = _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfRubberStampAnnotationIcon.confidential;\n            break;\n        case '#Departmental':\n        case 'SBDepartmental':\n            icon = _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfRubberStampAnnotationIcon.departmental;\n            break;\n        case '#Draft':\n        case 'SBDraft':\n            icon = _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfRubberStampAnnotationIcon.draft;\n            break;\n        case '#Experimental':\n        case 'SBExperimental':\n            icon = _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfRubberStampAnnotationIcon.experimental;\n            break;\n        case '#Expired':\n        case 'SBExpired':\n            icon = _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfRubberStampAnnotationIcon.expired;\n            break;\n        case '#Final':\n        case 'SBFinal':\n            icon = _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfRubberStampAnnotationIcon.final;\n            break;\n        case '#ForComment':\n        case 'SBForComment':\n            icon = _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfRubberStampAnnotationIcon.forComment;\n            break;\n        case '#ForPublicRelease':\n        case 'SBForPublicRelease':\n            icon = _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfRubberStampAnnotationIcon.forPublicRelease;\n            break;\n        case '#InformationOnly':\n        case 'SBInformationOnly':\n            icon = _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfRubberStampAnnotationIcon.informationOnly;\n            break;\n        case '#NotApproved':\n        case 'SBNotApproved':\n            icon = _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfRubberStampAnnotationIcon.notApproved;\n            break;\n        case '#NotForPublicRelease':\n        case 'SBNotForPublicRelease':\n            icon = _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfRubberStampAnnotationIcon.notForPublicRelease;\n            break;\n        case '#PreliminaryResults':\n        case 'SBPreliminaryResults':\n            icon = _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfRubberStampAnnotationIcon.preliminaryResults;\n            break;\n        case '#Sold':\n        case 'SBSold':\n            icon = _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfRubberStampAnnotationIcon.sold;\n            break;\n        case '#TopSecret':\n        case 'SBTopSecret':\n            icon = _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfRubberStampAnnotationIcon.topSecret;\n            break;\n        case '#Void':\n        case 'SBVoid':\n            icon = _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfRubberStampAnnotationIcon.void;\n            break;\n        default:\n            icon = _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfRubberStampAnnotationIcon.draft;\n            break;\n    }\n    return icon;\n}\n/**\n * Map popup icon.\n *\n * @private\n * @param {string} iconString String value.\n * @returns {PdfRubberStampAnnotationIcon} Popup icon.\n */\nfunction _mapPopupIcon(iconString) {\n    var icon;\n    switch (iconString) {\n        case 'Note':\n            icon = _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfPopupIcon.note;\n            break;\n        case 'Comment':\n            icon = _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfPopupIcon.comment;\n            break;\n        case 'Help':\n            icon = _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfPopupIcon.help;\n            break;\n        case 'Insert':\n            icon = _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfPopupIcon.insert;\n            break;\n        case 'Key':\n            icon = _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfPopupIcon.key;\n            break;\n        case 'NewParagraph':\n            icon = _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfPopupIcon.newParagraph;\n            break;\n        case 'Paragraph':\n            icon = _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfPopupIcon.paragraph;\n            break;\n        default:\n            icon = _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfPopupIcon.note;\n            break;\n    }\n    return icon;\n}\n/**\n * Convert annotation state to string value.\n *\n * @private\n * @param {PdfAnnotationState} type Annotation state.\n * @returns {string} String value.\n */\nfunction _reverseMapAnnotationState(type) {\n    var token = 'None';\n    switch (type) {\n        case _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfAnnotationState.none:\n            token = 'None';\n            break;\n        case _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfAnnotationState.accepted:\n            token = 'Accepted';\n            break;\n        case _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfAnnotationState.rejected:\n            token = 'Rejected';\n            break;\n        case _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfAnnotationState.cancel:\n            token = 'Cancelled';\n            break;\n        case _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfAnnotationState.completed:\n            token = 'Completed';\n            break;\n        case _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfAnnotationState.marked:\n            token = 'Marked';\n            break;\n        case _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfAnnotationState.unmarked:\n            token = 'Unmarked';\n            break;\n        case _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfAnnotationState.unknown:\n            token = 'Unknown';\n            break;\n        default:\n            token = 'None';\n            break;\n    }\n    return token;\n}\n/**\n * Convert string value to annotation state.\n *\n * @private\n * @param {string} type String value.\n * @returns {PdfAnnotationState} Annotation state.\n */\nfunction _mapAnnotationState(type) {\n    var token = _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfAnnotationState.none;\n    switch (type) {\n        case 'None':\n            token = _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfAnnotationState.none;\n            break;\n        case 'Accepted':\n            token = _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfAnnotationState.accepted;\n            break;\n        case 'Rejected':\n            token = _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfAnnotationState.rejected;\n            break;\n        case 'Cancelled':\n            token = _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfAnnotationState.cancel;\n            break;\n        case 'Completed':\n            token = _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfAnnotationState.completed;\n            break;\n        case 'Marked':\n            token = _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfAnnotationState.marked;\n            break;\n        case 'Unmarked':\n            token = _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfAnnotationState.unmarked;\n            break;\n        case 'Unknown':\n            token = _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfAnnotationState.unknown;\n            break;\n    }\n    return token;\n}\n/**\n * Convert annotation state model to string value.\n *\n * @private\n * @param {PdfAnnotationStateModel} type Annotation state model.\n * @returns {string} String value.\n */\nfunction _reverseMapAnnotationStateModel(type) {\n    var token = 'None';\n    switch (type) {\n        case _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfAnnotationStateModel.none:\n            token = 'None';\n            break;\n        case _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfAnnotationStateModel.marked:\n            token = 'Marked';\n            break;\n        case _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfAnnotationStateModel.review:\n            token = 'Review';\n            break;\n        default:\n            token = 'None';\n            break;\n    }\n    return token;\n}\n/**\n * Convert string value to annotation state model.\n *\n * @private\n * @param {string} type String value.\n * @returns {PdfAnnotationStateModel} Annotation state model.\n */\nfunction _mapAnnotationStateModel(type) {\n    var token = _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfAnnotationStateModel.none;\n    switch (type) {\n        case 'None':\n            token = _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfAnnotationStateModel.none;\n            break;\n        case 'Marked':\n            token = _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfAnnotationStateModel.marked;\n            break;\n        case 'Review':\n            token = _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfAnnotationStateModel.review;\n            break;\n    }\n    return token;\n}\n/**\n * Map attachment icon.\n *\n * @private\n * @param {string} iconString String value.\n * @returns {PdfAttachmentIcon} Icon.\n */\nfunction _mapAttachmentIcon(iconString) {\n    var icon;\n    switch (iconString) {\n        case 'PushPin':\n            icon = _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfAttachmentIcon.pushPin;\n            break;\n        case 'Tag':\n            icon = _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfAttachmentIcon.tag;\n            break;\n        case 'Graph':\n            icon = _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfAttachmentIcon.graph;\n            break;\n        case 'Paperclip':\n            icon = _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfAttachmentIcon.paperClip;\n            break;\n        default:\n            icon = _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfAttachmentIcon.pushPin;\n            break;\n    }\n    return icon;\n}\n/**\n * Map attachment intent.\n *\n * @private\n * @param {string} intentString String value.\n * @returns {PdfAnnotationIntent} intent.\n */\nfunction _mapAnnotationIntent(intentString) {\n    var intent;\n    switch (intentString) {\n        case 'None':\n            intent = _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfAnnotationIntent.none;\n            break;\n        case 'FreeTextCallout':\n            intent = _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfAnnotationIntent.freeTextCallout;\n            break;\n        case 'FreeTextTypeWriter':\n            intent = _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfAnnotationIntent.freeTextTypeWriter;\n            break;\n        default:\n            intent = _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfAnnotationIntent.none;\n            break;\n    }\n    return intent;\n}\n/**\n * Convert PDF font style to string value.\n *\n * @private\n * @param {PdfFontStyle} style Font style.\n * @returns {string} String value.\n */\nfunction _reverseMapPdfFontStyle(style) {\n    var value = [];\n    if ((style & _fonts_pdf_standard_font__WEBPACK_IMPORTED_MODULE_8__.PdfFontStyle.bold) > 0) {\n        value.push('Bold');\n    }\n    if ((style & _fonts_pdf_standard_font__WEBPACK_IMPORTED_MODULE_8__.PdfFontStyle.italic) > 0) {\n        value.push('Italic');\n    }\n    if ((style & _fonts_pdf_standard_font__WEBPACK_IMPORTED_MODULE_8__.PdfFontStyle.underline) > 0) {\n        value.push('Underline');\n    }\n    if ((style & _fonts_pdf_standard_font__WEBPACK_IMPORTED_MODULE_8__.PdfFontStyle.strikeout) > 0) {\n        value.push('Strikeout');\n    }\n    if (value.length === 0) {\n        return 'Regular';\n    }\n    return value.join(', ');\n}\n/**\n * Get special character.\n *\n * @private\n * @param {string} input Input string.\n * @returns {string} String value.\n */\nfunction _getSpecialCharacter(input) {\n    var result;\n    switch (input) {\n        case 'head2right':\n            result = '\\u27A2';\n            break;\n        case 'aacute':\n            result = 'a\\u0301';\n            break;\n        case 'eacute':\n            result = 'e\\u0301';\n            break;\n        case 'iacute':\n            result = 'i\\u0301';\n            break;\n        case 'oacute':\n            result = 'o\\u0301';\n            break;\n        case 'uacute':\n            result = 'u\\u0301';\n            break;\n        case 'circleright':\n            result = '\\u27B2';\n            break;\n        case 'bleft':\n            result = '\\u21E6';\n            break;\n        case 'bright':\n            result = '\\u21E8';\n            break;\n        case 'bup':\n            result = '\\u21E7';\n            break;\n        case 'bdown':\n            result = '\\u21E9';\n            break;\n        case 'barb4right':\n            result = '\\u2794';\n            break;\n        case 'bleftright':\n            result = '\\u2B04';\n            break;\n        case 'bupdown':\n            result = '\\u21F3';\n            break;\n        case 'bnw':\n            result = '\\u2B00';\n            break;\n        case 'bne':\n            result = '\\u2B01';\n            break;\n        case 'bsw':\n            result = '\\u2B03';\n            break;\n        case 'bse':\n            result = '\\u2B02';\n            break;\n        case 'bdash1':\n            result = '\\u25AD';\n            break;\n        case 'bdash2':\n            result = '\\u25AB';\n            break;\n        case 'xmarkbld':\n            result = '\\u2717';\n            break;\n        case 'checkbld':\n            result = '\\u2713';\n            break;\n        case 'boxxmarkbld':\n            result = '\\u2612';\n            break;\n        case 'boxcheckbld':\n            result = '\\u2611';\n            break;\n        case 'space':\n            result = '\\u0020';\n            break;\n        case 'pencil':\n            result = '\\u270F';\n            break;\n        case 'scissors':\n            result = '\\u2702';\n            break;\n        case 'scissorscutting':\n            result = '\\u2701';\n            break;\n        case 'readingglasses':\n            result = '\\u2701';\n            break;\n        case 'bell':\n            result = '\\u2701';\n            break;\n        case 'book':\n            result = '\\u2701';\n            break;\n        case 'telephonesolid':\n            result = '\\u2701';\n            break;\n        case 'telhandsetcirc':\n            result = '\\u2701';\n            break;\n        case 'envelopeback':\n            result = '\\u2701';\n            break;\n        case 'hourglass':\n            result = '\\u231B';\n            break;\n        case 'keyboard':\n            result = '\\u2328';\n            break;\n        case 'tapereel':\n            result = '\\u2707';\n            break;\n        case 'handwrite':\n            result = '\\u270D';\n            break;\n        case 'handv':\n            result = '\\u270C';\n            break;\n        case 'handptleft':\n            result = '\\u261C';\n            break;\n        case 'handptright':\n            result = '\\u261E';\n            break;\n        case 'handptup':\n            result = '\\u261D';\n            break;\n        case 'handptdown':\n            result = '\\u261F';\n            break;\n        case 'smileface':\n            result = '\\u263A';\n            break;\n        case 'frownface':\n            result = '\\u2639';\n            break;\n        case 'skullcrossbones':\n            result = '\\u2620';\n            break;\n        case 'flag':\n            result = '\\u2690';\n            break;\n        case 'pennant':\n            result = '\\u1F6A9';\n            break;\n        case 'airplane':\n            result = '\\u2708';\n            break;\n        case 'sunshine':\n            result = '\\u263C';\n            break;\n        case 'droplet':\n            result = '\\u1F4A7';\n            break;\n        case 'snowflake':\n            result = '\\u2744';\n            break;\n        case 'crossshadow':\n            result = '\\u271E';\n            break;\n        case 'crossmaltese':\n            result = '\\u2720';\n            break;\n        case 'starofdavid':\n            result = '\\u2721';\n            break;\n        case 'crescentstar':\n            result = '\\u262A';\n            break;\n        case 'yinyang':\n            result = '\\u262F';\n            break;\n        case 'om':\n            result = '\\u0950';\n            break;\n        case 'wheel':\n            result = '\\u2638';\n            break;\n        case 'aries':\n            result = '\\u2648';\n            break;\n        case 'taurus':\n            result = '\\u2649';\n            break;\n        case 'gemini':\n            result = '\\u264A';\n            break;\n        case 'cancer':\n            result = '\\u264B';\n            break;\n        case 'leo':\n            result = '\\u264C';\n            break;\n        case 'virgo':\n            result = '\\u264D';\n            break;\n        case 'libra':\n            result = '\\u264E';\n            break;\n        case 'scorpio':\n            result = '\\u264F';\n            break;\n        case 'saggitarius':\n            result = '\\u2650';\n            break;\n        case 'capricorn':\n            result = '\\u2651';\n            break;\n        case 'aquarius':\n            result = '\\u2652';\n            break;\n        case 'pisces':\n            result = '\\u2653';\n            break;\n        case 'ampersanditlc':\n            result = '\\u0026';\n            break;\n        case 'ampersandit':\n            result = '\\u0026';\n            break;\n        case 'circle6':\n            result = '\\u25CF';\n            break;\n        case 'circleshadowdwn':\n            result = '\\u274D';\n            break;\n        case 'square6':\n            result = '\\u25A0';\n            break;\n        case 'box3':\n            result = '\\u25A1';\n            break;\n        case 'boxshadowdwn':\n            result = '\\u2751';\n            break;\n        case 'boxshadowup':\n            result = '\\u2752';\n            break;\n        case 'lozenge4':\n            result = '\\u2B27';\n            break;\n        case 'lozenge6':\n            result = '\\u29EB';\n            break;\n        case 'rhombus6':\n            result = '\\u25C6';\n            break;\n        case 'xrhombus':\n            result = '\\u2756';\n            break;\n        case 'rhombus4':\n            result = '\\u2B25';\n            break;\n        case 'clear':\n            result = '\\u2327';\n            break;\n        case 'escape':\n            result = '\\u2353';\n            break;\n        case 'command':\n            result = '\\u2318';\n            break;\n        case 'rosette':\n            result = '\\u2740';\n            break;\n        case 'rosettesolid':\n            result = '\\u273F';\n            break;\n        case 'quotedbllftbld':\n            result = '\\u275D';\n            break;\n        case 'quotedblrtbld':\n            result = '\\u275E';\n            break;\n        case '.notdef':\n            result = '\\u25AF';\n            break;\n        case 'zerosans':\n            result = '\\u24EA';\n            break;\n        case 'onesans':\n            result = '\\u2460';\n            break;\n        case 'twosans':\n            result = '\\u2461';\n            break;\n        case 'threesans':\n            result = '\\u2462';\n            break;\n        case 'foursans':\n            result = '\\u2463';\n            break;\n        case 'fivesans':\n            result = '\\u2464';\n            break;\n        case 'sixsans':\n            result = '\\u2465';\n            break;\n        case 'sevensans':\n            result = '\\u2466';\n            break;\n        case 'eightsans':\n            result = '\\u2467';\n            break;\n        case 'ninesans':\n            result = '\\u2468';\n            break;\n        case 'tensans':\n            result = '\\u2469';\n            break;\n        case 'zerosansinv':\n            result = '\\u24FF';\n            break;\n        case 'onesansinv':\n            result = '\\u2776';\n            break;\n        case 'twosansinv':\n            result = '\\u2777';\n            break;\n        case 'threesansinv':\n            result = '\\u2778';\n            break;\n        case 'foursansinv':\n            result = '\\u2779';\n            break;\n        case 'circle2':\n            result = '\\u00B7';\n            break;\n        case 'circle4':\n            result = '\\u2022';\n            break;\n        case 'square2':\n            result = '\\u25AA';\n            break;\n        case 'ring2':\n            result = '\\u25CB';\n            break;\n        case 'ringbutton2':\n            result = '\\u25C9';\n            break;\n        case 'target':\n            result = '\\u25CE';\n            break;\n        case 'square4':\n            result = '\\u25AA';\n            break;\n        case 'box2':\n            result = '\\u25FB';\n            break;\n        case 'crosstar2':\n            result = '\\u2726';\n            break;\n        case 'pentastar2':\n            result = '\\u2605';\n            break;\n        case 'hexstar2':\n            result = '\\u2736';\n            break;\n        case 'octastar2':\n            result = '\\u2734';\n            break;\n        case 'dodecastar3':\n            result = '\\u2739';\n            break;\n        case 'octastar4':\n            result = '\\u2735';\n            break;\n        case 'registercircle':\n            result = '\\u2316';\n            break;\n        case 'cuspopen':\n            result = '\\u27E1';\n            break;\n        case 'cuspopen1':\n            result = '\\u2311';\n            break;\n        case 'circlestar':\n            result = '\\u2605';\n            break;\n        case 'starshadow':\n            result = '\\u2730';\n            break;\n        case 'deleteleft':\n            result = '\\u232B';\n            break;\n        case 'deleteright':\n            result = '\\u2326';\n            break;\n        case 'scissorsoutline':\n            result = '\\u2704';\n            break;\n        case 'telephone':\n            result = '\\u260F';\n            break;\n        case 'telhandset':\n            result = '\\u1F4DE';\n            break;\n        case 'handptlft1':\n            result = '\\u261C';\n            break;\n        case 'handptrt1':\n            result = '\\u261E';\n            break;\n        case 'handptlftsld1':\n            result = '\\u261A';\n            break;\n        case 'handptrtsld1':\n            result = '\\u261B';\n            break;\n        case 'handptup1':\n            result = '\\u261D';\n            break;\n        case 'handptdwn1':\n            result = '\\u261F';\n            break;\n        case 'xmark':\n            result = '\\u2717';\n            break;\n        case 'check':\n            result = '\\u2713';\n            break;\n        case 'boxcheck':\n            result = '\\u2611';\n            break;\n        case 'boxx':\n            result = '\\u2612';\n            break;\n        case 'boxxbld':\n            result = '\\u2612';\n            break;\n        case 'circlex':\n            result = '=\\u2314';\n            break;\n        case 'circlexbld':\n            result = '\\u2314';\n            break;\n        case 'prohibit':\n        case 'prohibitbld':\n            result = '\\u29B8';\n            break;\n        case 'ampersanditaldm':\n        case 'ampersandbld':\n        case 'ampersandsans':\n        case 'ampersandsandm':\n            result = '\\u0026';\n            break;\n        case 'interrobang':\n        case 'interrobangdm':\n        case 'interrobangsans':\n        case 'interrobngsandm':\n            result = '\\u203D';\n            break;\n        case 'sacute':\n            result = 'ś';\n            break;\n        case 'Sacute':\n            result = 'Ś';\n            break;\n        case 'eogonek':\n            result = 'ę';\n            break;\n        case 'cacute':\n            result = 'ć';\n            break;\n        case 'aogonek':\n            result = 'ą';\n            break;\n        default:\n            result = input;\n            break;\n    }\n    return result;\n}\n/**\n * Get latin character.\n *\n * @private\n * @param {string} input Input string.\n * @returns {string} String value.\n */\nfunction _getLatinCharacter(input) {\n    var result;\n    switch (input) {\n        case 'zero':\n            result = '0';\n            break;\n        case 'one':\n            result = '1';\n            break;\n        case 'two':\n            result = '2';\n            break;\n        case 'three':\n            result = '3';\n            break;\n        case 'four':\n            result = '4';\n            break;\n        case 'five':\n            result = '5';\n            break;\n        case 'six':\n            result = '6';\n            break;\n        case 'seven':\n            result = '7';\n            break;\n        case 'eight':\n            result = '8';\n            break;\n        case 'nine':\n            result = '9';\n            break;\n        case 'aacute':\n            result = 'á';\n            break;\n        case 'asciicircum':\n            result = '^';\n            break;\n        case 'asciitilde':\n            result = '~';\n            break;\n        case 'asterisk':\n            result = '*';\n            break;\n        case 'at':\n            result = '@';\n            break;\n        case 'atilde':\n            result = 'ã';\n            break;\n        case 'backslash':\n            result = '\\\\';\n            break;\n        case 'bar':\n            result = '|';\n            break;\n        case 'braceleft':\n            result = '{';\n            break;\n        case 'braceright':\n            result = '}';\n            break;\n        case 'bracketleft':\n            result = '[';\n            break;\n        case 'bracketright':\n            result = ']';\n            break;\n        case 'breve':\n            result = '˘';\n            break;\n        case 'brokenbar':\n            result = '|';\n            break;\n        case 'bullet3':\n            result = '•';\n            break;\n        case 'bullet':\n            result = '•';\n            break;\n        case 'caron':\n            result = 'ˇ';\n            break;\n        case 'ccedilla':\n            result = 'ç';\n            break;\n        case 'cedilla':\n            result = '¸';\n            break;\n        case 'cent':\n            result = '¢';\n            break;\n        case 'circumflex':\n            result = 'ˆ';\n            break;\n        case 'colon':\n            result = ':';\n            break;\n        case 'comma':\n            result = ',';\n            break;\n        case 'copyright':\n            result = '©';\n            break;\n        case 'currency1':\n            result = '¤';\n            break;\n        case 'dagger':\n            result = '†';\n            break;\n        case 'daggerdbl':\n            result = '‡';\n            break;\n        case 'degree':\n            result = '°';\n            break;\n        case 'dieresis':\n            result = '¨';\n            break;\n        case 'divide':\n            result = '÷';\n            break;\n        case 'dollar':\n            result = '$';\n            break;\n        case 'dotaccent':\n            result = '˙';\n            break;\n        case 'dotlessi':\n            result = 'ı';\n            break;\n        case 'eacute':\n            result = 'é';\n            break;\n        case 'middot':\n            result = '˙';\n            break;\n        case 'edieresis':\n            result = 'ë';\n            break;\n        case 'egrave':\n            result = 'è';\n            break;\n        case 'ellipsis':\n            result = '...';\n            break;\n        case 'emdash':\n            result = '—';\n            break;\n        case 'endash':\n            result = '–';\n            break;\n        case 'equal':\n            result = '=';\n            break;\n        case 'eth':\n            result = 'ð';\n            break;\n        case 'exclam':\n            result = '!';\n            break;\n        case 'exclamdown':\n            result = '¡';\n            break;\n        case 'florin':\n            result = 'ƒ';\n            break;\n        case 'fraction':\n            result = '⁄';\n            break;\n        case 'germandbls':\n            result = 'ß';\n            break;\n        case 'grave':\n            result = '`';\n            break;\n        case 'greater':\n            result = '>';\n            break;\n        case 'guillemotleft4':\n            result = '«';\n            break;\n        case 'guillemotright4':\n            result = '»';\n            break;\n        case 'guilsinglleft':\n            result = '‹';\n            break;\n        case 'guilsinglright':\n            result = '›';\n            break;\n        case 'hungarumlaut':\n            result = '˝';\n            break;\n        case 'hyphen5':\n            result = '-';\n            break;\n        case 'iacute':\n            result = 'í';\n            break;\n        case 'icircumflex':\n            result = 'î';\n            break;\n        case 'idieresis':\n            result = 'ï';\n            break;\n        case 'igrave':\n            result = 'ì';\n            break;\n        case 'less':\n            result = '<';\n            break;\n        case 'logicalnot':\n            result = '¬';\n            break;\n        case 'lslash':\n            result = 'ł';\n            break;\n        case 'Lslash':\n            result = 'Ł';\n            break;\n        case 'macron':\n            result = '¯';\n            break;\n        case 'minus':\n            result = '−';\n            break;\n        case 'mu':\n            result = 'μ';\n            break;\n        case 'multiply':\n            result = '×';\n            break;\n        case 'ntilde':\n            result = 'ñ';\n            break;\n        case 'numbersign':\n            result = '#';\n            break;\n        case 'oacute':\n            result = 'ó';\n            break;\n        case 'ocircumflex':\n            result = 'ô';\n            break;\n        case 'odieresis':\n            result = 'ö';\n            break;\n        case 'oe':\n            result = 'oe';\n            break;\n        case 'ogonek':\n            result = '˛';\n            break;\n        case 'ograve':\n            result = 'ò';\n            break;\n        case 'onehalf':\n            result = '1/2';\n            break;\n        case 'onequarter':\n            result = '1/4';\n            break;\n        case 'onesuperior':\n            result = '¹';\n            break;\n        case 'ordfeminine':\n            result = 'ª';\n            break;\n        case 'ordmasculine':\n            result = 'º';\n            break;\n        case 'otilde':\n            result = 'õ';\n            break;\n        case 'paragraph':\n            result = '¶';\n            break;\n        case 'parenleft':\n            result = '(';\n            break;\n        case 'parenright':\n            result = ')';\n            break;\n        case 'percent':\n            result = '%';\n            break;\n        case 'period':\n            result = '.';\n            break;\n        case 'periodcentered':\n            result = '·';\n            break;\n        case 'perthousand':\n            result = '‰';\n            break;\n        case 'plus':\n            result = '+';\n            break;\n        case 'plusminus':\n            result = '±';\n            break;\n        case 'question':\n            result = '?';\n            break;\n        case 'questiondown':\n            result = '¿';\n            break;\n        case 'quotedbl':\n            result = '\\'';\n            break;\n        case 'quotedblbase':\n            result = '„';\n            break;\n        case 'quotedblleft':\n            result = '“';\n            break;\n        case 'quotedblright':\n            result = '”';\n            break;\n        case 'quoteleft':\n            result = '‘';\n            break;\n        case 'quoteright':\n            result = '’';\n            break;\n        case 'quotesinglbase':\n            result = '‚';\n            break;\n        case 'quotesingle':\n            result = '\\'';\n            break;\n        case 'registered':\n            result = '®';\n            break;\n        case 'ring':\n            result = '˚';\n            break;\n        case 'scaron':\n            result = 'š';\n            break;\n        case 'section':\n            result = '§';\n            break;\n        case 'semicolon':\n            result = ';';\n            break;\n        case 'slash':\n            result = '/';\n            break;\n        case 'space6':\n            result = ' ';\n            break;\n        case 'space':\n            result = ' ';\n            break;\n        case 'udieresis':\n            result = 'ü';\n            break;\n        case 'uacute':\n            result = 'ú';\n            break;\n        case 'Ecircumflex':\n            result = 'Ê';\n            break;\n        case 'hyphen':\n            result = '-';\n            break;\n        case 'underscore':\n            result = '_';\n            break;\n        case 'adieresis':\n            result = 'ä';\n            break;\n        case 'ampersand':\n            result = '&';\n            break;\n        case 'Adieresis':\n            result = 'Ä';\n            break;\n        case 'Udieresis':\n            result = 'Ü';\n            break;\n        case 'ccaron':\n            result = 'č';\n            break;\n        case 'Scaron':\n            result = 'Š';\n            break;\n        case 'zcaron':\n            result = 'ž';\n            break;\n        case 'sterling':\n            result = '£';\n            break;\n        case 'agrave':\n            result = 'à';\n            break;\n        case 'ecircumflex':\n            result = 'ê';\n            break;\n        case 'acircumflex':\n            result = 'â';\n            break;\n        case 'Oacute':\n            result = 'Ó';\n            break;\n        default:\n            result = input;\n            break;\n    }\n    return result;\n}\n/**\n * Encode value to string.\n *\n * @private\n * @param {string} value Input string.\n * @returns {string} result.\n */\nfunction _encodeValue(value) {\n    var name = '';\n    for (var i = 0; i < value.length; i++) {\n        var code = value.charCodeAt(i) & 0xff;\n        var entry = String.fromCharCode(code);\n        var hex = '';\n        switch (entry) {\n            case ' ':\n            case '%':\n            case '(':\n            case ')':\n            case '<':\n            case '>':\n            case '[':\n            case ']':\n            case '{':\n            case '}':\n            case '/':\n            case '#':\n                name += '#';\n                hex = code.toString(16).toUpperCase();\n                name += (hex.length === 1 ? ('0' + hex) : hex);\n                break;\n            default:\n                if (code > 126 || code < 37) {\n                    name += '#';\n                    hex = code.toString(16).toUpperCase();\n                    name += (hex.length === 1 ? ('0' + hex) : hex);\n                }\n                else {\n                    name += entry;\n                }\n                break;\n        }\n    }\n    return name;\n}\n/**\n * Parse and retrieve comments and review history from the annotation.\n *\n * @private\n * @param {PdfComment} annotation Input annotation.\n * @param {boolean} isReview Input is review or not.\n * @returns {PdfPopupAnnotationCollection} result.\n */\nfunction _getCommentsOrReview(annotation, isReview) {\n    if (isReview) {\n        return annotation.reviewHistory;\n    }\n    else {\n        return annotation.comments;\n    }\n}\n/**\n * Returns true if input dictionary is belongs to the review history.\n *\n * @private\n * @param {_PdfDictionary} dictionary Input dictionary.\n * @returns {boolean} Input is review or not.\n */\nfunction _checkReview(dictionary) {\n    var flag = dictionary.get('F');\n    return ((dictionary.has('State') || dictionary.has('StateModel')) && (flag === 30 || flag === 128));\n}\n/**\n * Returns true if input dictionary is belongs to the comments.\n *\n * @private\n * @param {_PdfDictionary} dictionary Input dictionary.\n * @returns {boolean} Input is comments or not.\n */\nfunction _checkComment(dictionary) {\n    var flag = dictionary.get('F');\n    return (!(dictionary.has('State') || dictionary.has('StateModel')) && (flag === 28 || flag === 128));\n}\n/**\n * Update visibility.\n *\n * @private\n * @param {_PdfDictionary} dictionary Input dictionary.\n * @param {PdfFormFieldVisibility} value Visibility.\n * @returns {void} Nothing.\n */\nfunction _updateVisibility(dictionary, value) {\n    if (dictionary.has('F')) {\n        delete dictionary._map.F;\n        dictionary._updated = true;\n    }\n    switch (value) {\n        case _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfFormFieldVisibility.hidden:\n            dictionary.update('F', _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfAnnotationFlag.hidden);\n            break;\n        case _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfFormFieldVisibility.hiddenPrintable:\n            dictionary.update('F', (_enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfAnnotationFlag.noView | _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfAnnotationFlag.print));\n            break;\n        case _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfFormFieldVisibility.visible:\n            if (dictionary.has('DV')) {\n                delete dictionary._map.DV;\n                dictionary._updated = true;\n            }\n            if (dictionary.has('MK')) {\n                var mkDict = dictionary.get('MK');\n                if (mkDict && mkDict.has('BG')) {\n                    delete mkDict._map.BG;\n                    mkDict._updated = true;\n                }\n            }\n            break;\n    }\n}\n/**\n * Remove duplicate reference.\n *\n * @private\n * @param {_PdfDictionary} dictionary Input dictionary.\n * @param {_PdfCrossReference} crossTable Cross reference table.\n * @param {string} key Key string for appearance type.\n * @returns {void} Nothing.\n */\nfunction _removeDuplicateReference(dictionary, crossTable, key) {\n    if (dictionary && dictionary.has(key)) {\n        var oldAppearance = dictionary.getRaw(key);\n        if (oldAppearance && oldAppearance instanceof _pdf_primitives__WEBPACK_IMPORTED_MODULE_0__._PdfReference && oldAppearance._isNew) {\n            var appearance = dictionary.get(key); // eslint-disable-line\n            if (appearance) {\n                if (appearance instanceof _pdf_primitives__WEBPACK_IMPORTED_MODULE_0__._PdfReference) {\n                    appearance = crossTable._fetch(appearance);\n                }\n                var appearanceDictionary = void 0;\n                if (appearance instanceof _pdf_primitives__WEBPACK_IMPORTED_MODULE_0__._PdfDictionary) {\n                    appearanceDictionary = appearance;\n                }\n                else if (appearance instanceof _base_stream__WEBPACK_IMPORTED_MODULE_4__._PdfBaseStream) {\n                    appearanceDictionary = appearance.dictionary;\n                }\n                if (appearanceDictionary && appearanceDictionary.has('Resources')) {\n                    _removeDuplicateFromResources(appearanceDictionary.get('Resources'), crossTable);\n                }\n            }\n            crossTable._cacheMap.delete(oldAppearance);\n        }\n    }\n}\n/**\n * Remove duplicate reference from resources.\n *\n * @private\n * @param {_PdfDictionary} resources Input resources.\n * @param {_PdfCrossReference} crossTable Cross reference table.\n * @returns {void} Nothing.\n */\nfunction _removeDuplicateFromResources(resources, crossTable) {\n    if (resources && resources.size > 0) {\n        resources.forEach(function (key, value) {\n            if (typeof key !== 'undefined' && typeof value !== 'undefined') {\n                if (value instanceof _pdf_primitives__WEBPACK_IMPORTED_MODULE_0__._PdfReference) {\n                    var reference = value;\n                    if (reference._isNew) {\n                        var dictionary = resources.get(key);\n                        if (dictionary && dictionary instanceof _pdf_primitives__WEBPACK_IMPORTED_MODULE_0__._PdfDictionary) {\n                            if (key === 'XObject' && dictionary.has('Resources')) {\n                                _removeDuplicateFromResources(dictionary.get('Resources'), crossTable);\n                            }\n                            crossTable._cacheMap.delete(reference);\n                        }\n                    }\n                }\n                else if (value instanceof _pdf_primitives__WEBPACK_IMPORTED_MODULE_0__._PdfDictionary) {\n                    if (value.has('Resources')) {\n                        _removeDuplicateFromResources(value.get('Resources'), crossTable);\n                    }\n                    if (key === 'Font' || key === 'XObject' || key === 'ExtGState') {\n                        _removeDuplicateFromResources(value, crossTable);\n                    }\n                }\n            }\n        });\n    }\n}\n/**\n * Remove duplicate reference.\n *\n * @private\n * @param {any} normal Input.\n * @param {_PdfCrossReference} crossReference Cross reference table.\n * @param {string} firstKey Key string for appearance type.\n * @param {string} secondKey Key string for appearance type.\n * @returns {void} Nothing.\n */\nfunction _removeReferences(normal, crossReference, firstKey, secondKey) {\n    var normalElement;\n    if (normal) {\n        if (normal instanceof _pdf_primitives__WEBPACK_IMPORTED_MODULE_0__._PdfDictionary) {\n            normalElement = normal;\n        }\n        else if (normal instanceof _base_stream__WEBPACK_IMPORTED_MODULE_4__._PdfStream) {\n            normalElement = normal.dictionary;\n        }\n    }\n    if (normalElement) {\n        _removeDuplicateReference(normalElement, crossReference, firstKey);\n        _removeDuplicateReference(normalElement, crossReference, secondKey);\n    }\n}\nvar BaseException = /** @class */ (function () {\n    function BaseException(message, name) {\n        this.message = message;\n        this.name = name;\n    }\n    return BaseException;\n}());\n\nvar FormatError = /** @class */ (function (_super) {\n    __extends(FormatError, _super);\n    function FormatError(message) {\n        return _super.call(this, message, 'FormatError') || this;\n    }\n    return FormatError;\n}(BaseException));\n\nvar ParserEndOfFileException = /** @class */ (function (_super) {\n    __extends(ParserEndOfFileException, _super);\n    function ParserEndOfFileException(message) {\n        return _super.call(this, message, 'ParserEndOfFileException') || this;\n    }\n    return ParserEndOfFileException;\n}(BaseException));\n\n/**\n * Gets the default string.\n *\n * @param {string} item Input string.\n * @returns {string} result.\n */\nfunction _defaultToString(item) {\n    if (Object.prototype.toString.call(item) === '[object String]') {\n        return '$s' + item;\n    }\n    else {\n        return '$o' + item.toString();\n    }\n}\n/**\n * Gets the form field font.\n *\n * @param {PdfForm} form form.\n * @param {PdfWidgetAnnotation} widget widget annotation.\n * @param {PdfField} field field.\n * @returns {PdfFont} font.\n */\nfunction _obtainFontDetails(form, widget, field) {\n    var fontFamily = '';\n    var fontSize;\n    var font;\n    var defaultAppearance;\n    if (widget && widget._dictionary.has('DA') || field._dictionary.has('DA')) {\n        if (widget && widget._dictionary.has('DA')) {\n            defaultAppearance = widget._dictionary.get('DA');\n        }\n        else {\n            defaultAppearance = field._dictionary.get('DA');\n        }\n    }\n    if (defaultAppearance && defaultAppearance !== '' && defaultAppearance.indexOf('Tf') !== -1) {\n        var textCollection = defaultAppearance.split(' ');\n        for (var i = 0; i < textCollection.length; i++) {\n            if (textCollection[Number.parseInt(i.toString(), 10)].indexOf('Tf') !== -1) {\n                fontFamily = textCollection[i - 2];\n                while (fontFamily !== '' && fontFamily.length > 1 && fontFamily[0] === '/') {\n                    fontFamily = fontFamily.substring(1);\n                }\n                fontSize = Number.parseFloat(textCollection[i - 1]);\n            }\n        }\n    }\n    if (fontFamily) {\n        fontFamily = fontFamily.trim();\n    }\n    if (form && form._dictionary.has('DR')) {\n        var resources = form._dictionary.get('DR');\n        if (resources.has('Font')) {\n            var fonts = resources.get('Font');\n            if (fonts.has(fontFamily)) {\n                var fontDictionary = fonts.get(fontFamily);\n                if (fontDictionary && fontFamily && fontDictionary.has('BaseFont')) {\n                    var baseFont = fontDictionary.get('BaseFont');\n                    var textFontStyle = _fonts_pdf_standard_font__WEBPACK_IMPORTED_MODULE_8__.PdfFontStyle.regular;\n                    if (baseFont) {\n                        defaultAppearance = baseFont.name;\n                        textFontStyle = _getFontStyle(baseFont.name);\n                        if (defaultAppearance.includes('-')) {\n                            defaultAppearance = defaultAppearance.substring(0, defaultAppearance.indexOf('-'));\n                        }\n                        if (widget && widget._dictionary.has('DA')) {\n                            font = _mapFont(defaultAppearance, fontSize, textFontStyle, widget);\n                        }\n                        else if (field && field._dictionary.has('DA')) {\n                            font = _mapFont(defaultAppearance, fontSize, textFontStyle, field);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    if ((font === null || typeof font === 'undefined') && fontSize) {\n        font = new _fonts_pdf_standard_font__WEBPACK_IMPORTED_MODULE_8__.PdfStandardFont(_fonts_pdf_standard_font__WEBPACK_IMPORTED_MODULE_8__.PdfFontFamily.helvetica, fontSize, _fonts_pdf_standard_font__WEBPACK_IMPORTED_MODULE_8__.PdfFontStyle.regular);\n    }\n    if ((font === null || typeof font === 'undefined') || (font && font.size === 1)) {\n        if (widget) {\n            font = widget._circleCaptionFont;\n        }\n        else if (field) {\n            font = field._circleCaptionFont;\n        }\n    }\n    return font;\n}\n/**\n * Gets the font style.\n *\n * @param {string} fontFamilyString Font family string.\n * @returns {PdfFontStyle} result.\n */\nfunction _getFontStyle(fontFamilyString) {\n    var position = fontFamilyString.indexOf('-');\n    if (position < 0) {\n        position = fontFamilyString.indexOf(',');\n    }\n    var style = _fonts_pdf_standard_font__WEBPACK_IMPORTED_MODULE_8__.PdfFontStyle.regular;\n    if (position >= 0) {\n        var standardName = fontFamilyString.substring(position + 1, fontFamilyString.length);\n        switch (standardName) {\n            case 'Bold':\n            case 'BoldMT':\n                style = _fonts_pdf_standard_font__WEBPACK_IMPORTED_MODULE_8__.PdfFontStyle.bold;\n                break;\n            case 'Italic':\n            case 'ItalicMT':\n            case 'Oblique':\n            case 'It':\n                style = _fonts_pdf_standard_font__WEBPACK_IMPORTED_MODULE_8__.PdfFontStyle.italic;\n                break;\n            case 'BoldItalic':\n            case 'BoldItalicMT':\n            case 'BoldOblique':\n                style = _fonts_pdf_standard_font__WEBPACK_IMPORTED_MODULE_8__.PdfFontStyle.bold | _fonts_pdf_standard_font__WEBPACK_IMPORTED_MODULE_8__.PdfFontStyle.italic;\n                break;\n        }\n    }\n    return style;\n}\n/**\n * Map the font.\n *\n * @param {string} name Font name.\n * @param {number} size Font size.\n * @param {PdfFontStyle} style Font style.\n * @param {PdfAnnotation} annotation Annotation or Field.\n * @returns {PdfFont} result.\n */\nfunction _mapFont(name, size, style, annotation) {\n    var font;\n    var fontFamily = name ? name : '';\n    if (fontFamily.includes('-')) {\n        fontFamily = fontFamily.substring(0, fontFamily.indexOf('-'));\n    }\n    if (typeof size === 'undefined' && annotation instanceof _annotations_annotation__WEBPACK_IMPORTED_MODULE_5__.PdfLineAnnotation && annotation._isLoaded) {\n        size = 10;\n    }\n    var fontSize = typeof size !== 'undefined' ? size : 1;\n    if (annotation._dictionary.has('DS') || annotation._dictionary.has('DA')) {\n        switch (fontFamily) {\n            case 'Helv':\n            case 'Helvetica':\n                font = new _fonts_pdf_standard_font__WEBPACK_IMPORTED_MODULE_8__.PdfStandardFont(_fonts_pdf_standard_font__WEBPACK_IMPORTED_MODULE_8__.PdfFontFamily.helvetica, fontSize, style);\n                break;\n            case 'Cour':\n            case 'Courier':\n                font = new _fonts_pdf_standard_font__WEBPACK_IMPORTED_MODULE_8__.PdfStandardFont(_fonts_pdf_standard_font__WEBPACK_IMPORTED_MODULE_8__.PdfFontFamily.courier, fontSize, style);\n                break;\n            case 'Symb':\n            case 'Symbol':\n                font = new _fonts_pdf_standard_font__WEBPACK_IMPORTED_MODULE_8__.PdfStandardFont(_fonts_pdf_standard_font__WEBPACK_IMPORTED_MODULE_8__.PdfFontFamily.symbol, fontSize, style);\n                break;\n            case 'Times':\n            case 'TiRo':\n            case 'TimesRoman':\n                font = new _fonts_pdf_standard_font__WEBPACK_IMPORTED_MODULE_8__.PdfStandardFont(_fonts_pdf_standard_font__WEBPACK_IMPORTED_MODULE_8__.PdfFontFamily.timesRoman, fontSize, style);\n                break;\n            case 'ZaDb':\n            case 'ZapfDingbats':\n                font = new _fonts_pdf_standard_font__WEBPACK_IMPORTED_MODULE_8__.PdfStandardFont(_fonts_pdf_standard_font__WEBPACK_IMPORTED_MODULE_8__.PdfFontFamily.zapfDingbats, fontSize, style);\n                break;\n            case 'MonotypeSungLight':\n                font = new _fonts_pdf_standard_font__WEBPACK_IMPORTED_MODULE_8__.PdfCjkStandardFont(_fonts_pdf_standard_font__WEBPACK_IMPORTED_MODULE_8__.PdfCjkFontFamily.monotypeSungLight, fontSize, style);\n                break;\n            case 'SinoTypeSongLight':\n                font = new _fonts_pdf_standard_font__WEBPACK_IMPORTED_MODULE_8__.PdfCjkStandardFont(_fonts_pdf_standard_font__WEBPACK_IMPORTED_MODULE_8__.PdfCjkFontFamily.sinoTypeSongLight, fontSize, style);\n                break;\n            case 'MonotypeHeiMedium':\n                font = new _fonts_pdf_standard_font__WEBPACK_IMPORTED_MODULE_8__.PdfCjkStandardFont(_fonts_pdf_standard_font__WEBPACK_IMPORTED_MODULE_8__.PdfCjkFontFamily.monotypeHeiMedium, fontSize, style);\n                break;\n            case 'HanyangSystemsGothicMedium':\n                font = new _fonts_pdf_standard_font__WEBPACK_IMPORTED_MODULE_8__.PdfCjkStandardFont(_fonts_pdf_standard_font__WEBPACK_IMPORTED_MODULE_8__.PdfCjkFontFamily.hanyangSystemsGothicMedium, fontSize, style);\n                break;\n            case 'HanyangSystemsShinMyeongJoMedium':\n                font = new _fonts_pdf_standard_font__WEBPACK_IMPORTED_MODULE_8__.PdfCjkStandardFont(_fonts_pdf_standard_font__WEBPACK_IMPORTED_MODULE_8__.PdfCjkFontFamily.hanyangSystemsShinMyeongJoMedium, fontSize, style);\n                break;\n            case 'HeiseiKakuGothicW5':\n                font = new _fonts_pdf_standard_font__WEBPACK_IMPORTED_MODULE_8__.PdfCjkStandardFont(_fonts_pdf_standard_font__WEBPACK_IMPORTED_MODULE_8__.PdfCjkFontFamily.heiseiKakuGothicW5, fontSize, style);\n                break;\n            case 'HeiseiMinchoW3':\n                font = new _fonts_pdf_standard_font__WEBPACK_IMPORTED_MODULE_8__.PdfCjkStandardFont(_fonts_pdf_standard_font__WEBPACK_IMPORTED_MODULE_8__.PdfCjkFontFamily.heiseiMinchoW3, fontSize, style);\n                break;\n            default:\n                if (annotation._dictionary.has('AP')) {\n                    var fontData = _tryParseFontStream(annotation._dictionary, annotation._crossReference, annotation);\n                    if (annotation._hasData) {\n                        var base64String = _encode(fontData);\n                        font = new _fonts_pdf_standard_font__WEBPACK_IMPORTED_MODULE_8__.PdfTrueTypeFont(base64String, fontSize, style);\n                    }\n                }\n                break;\n        }\n    }\n    if (font === null || typeof font === 'undefined') {\n        if (annotation instanceof _annotations_annotation__WEBPACK_IMPORTED_MODULE_5__.PdfAnnotation) {\n            if (annotation._type !== _enumerator__WEBPACK_IMPORTED_MODULE_2__._PdfAnnotationType.widgetAnnotation) {\n                font = new _fonts_pdf_standard_font__WEBPACK_IMPORTED_MODULE_8__.PdfStandardFont(_fonts_pdf_standard_font__WEBPACK_IMPORTED_MODULE_8__.PdfFontFamily.helvetica, fontSize, style);\n            }\n            else {\n                font = annotation._circleCaptionFont;\n            }\n        }\n        else if (annotation instanceof _form_field__WEBPACK_IMPORTED_MODULE_7__.PdfField) {\n            font = annotation._circleCaptionFont;\n        }\n    }\n    return font;\n}\n/**\n * Gets the font stream.\n *\n * @param {_PdfDictionary} widgetDictionary Widget dictionary.\n * @param {_PdfCrossReference} crossReference Cross reference.\n * @param {PdfAnnotation} annotation Annotation.\n * @returns {Uint8Array} result.\n */\nfunction _tryParseFontStream(widgetDictionary, crossReference, annotation) {\n    var fontData;\n    var apperance = widgetDictionary.get('AP');\n    if (apperance && apperance instanceof _pdf_primitives__WEBPACK_IMPORTED_MODULE_0__._PdfDictionary && apperance.has('N')) {\n        var normal = apperance.get('N');\n        if (normal && normal instanceof _base_stream__WEBPACK_IMPORTED_MODULE_4__._PdfStream && normal.dictionary.has('Resources')) {\n            var resourcesDictionary = normal.dictionary.get('Resources');\n            if (resourcesDictionary && resourcesDictionary.has('Font')) {\n                var fontDictionary = resourcesDictionary.get('Font');\n                if (fontDictionary && fontDictionary instanceof _pdf_primitives__WEBPACK_IMPORTED_MODULE_0__._PdfDictionary) {\n                    fontDictionary.forEach(function (key, value) {\n                        if (value) {\n                            var dictionary = crossReference._fetch(value);\n                            if (dictionary && dictionary.has('DescendantFonts')) {\n                                var descendant = dictionary.getArray('DescendantFonts'); // eslint-disable-line\n                                if (descendant && descendant.length > 0) {\n                                    for (var i = 0; i < descendant.length; i++) {\n                                        var descendantFont = descendant[Number.parseInt(i.toString(), 10)]; // eslint-disable-line\n                                        if (descendantFont && descendantFont instanceof _pdf_primitives__WEBPACK_IMPORTED_MODULE_0__._PdfDictionary && descendantFont.has('FontDescriptor')) {\n                                            var fontDescriptor = descendantFont.get('FontDescriptor');\n                                            if (fontDescriptor && fontDescriptor.has('FontFile2')) {\n                                                var fontFile = fontDescriptor.get('FontFile2');\n                                                if (fontFile && fontFile instanceof _base_stream__WEBPACK_IMPORTED_MODULE_4__._PdfStream && fontFile.length > 0) {\n                                                    fontData = fontFile.getByteRange(fontFile.start, fontFile.end);\n                                                    if (fontData && fontData.length > 0) {\n                                                        annotation._hasData = true;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    });\n                }\n            }\n        }\n    }\n    return fontData;\n}\n/**\n * Gets the boolean if two arrays are equal.\n *\n * @param {Array<number[]>} inkPointsCollection Ink points collection.\n * @param {Array<number[]>} previousCollection Previous collection.\n * @returns {boolean} result.\n */\nfunction _checkInkPoints(inkPointsCollection, previousCollection) {\n    if (inkPointsCollection.length !== previousCollection.length) {\n        return false;\n    }\n    for (var i = 0; i < inkPointsCollection.length; i++) {\n        if (!_areArrayEqual(inkPointsCollection[Number.parseInt(i.toString(), 10)], previousCollection[Number.parseInt(i.toString(), 10)])) {\n            return false;\n        }\n    }\n    return true;\n}\n/**\n * Gets the Destination.\n *\n * @param {_PdfDictionary} dictionary widget dictionary.\n * @param {string} key bookmark or action dictionary key.\n * @returns {PdfDestination} destination.\n */\nfunction _obtainDestination(dictionary, key) {\n    var page;\n    var destination;\n    if (dictionary) {\n        var destinationArray = void 0; // eslint-disable-line\n        if (dictionary.has(key)) {\n            destinationArray = dictionary.getArray(key);\n        }\n        var loadedDocument = dictionary._crossReference._document;\n        var mode = void 0;\n        if (destinationArray && Array.isArray(destinationArray) && destinationArray.length > 0) {\n            var value = destinationArray[0]; // eslint-disable-line\n            var left = void 0;\n            var height = void 0;\n            var bottom = void 0;\n            var right = void 0;\n            var zoom = void 0;\n            if (typeof value === 'number') {\n                var pageNumber = destinationArray[0];\n                if (pageNumber >= 0) {\n                    var document_1 = dictionary._crossReference._document;\n                    if (document_1 && document_1.pageCount > pageNumber) {\n                        page = document_1.getPage(pageNumber);\n                    }\n                    if (destinationArray.length > 1) {\n                        mode = destinationArray[1];\n                    }\n                    if (mode && mode.name === 'XYZ') {\n                        if (destinationArray.length > 2) {\n                            left = destinationArray[2];\n                        }\n                        if (destinationArray.length > 3) {\n                            height = destinationArray[3];\n                        }\n                        if (destinationArray.length > 4) {\n                            zoom = destinationArray[4];\n                        }\n                        if (page) {\n                            var topValue = (height === null || typeof height === 'undefined') ? 0 : page.size[1] - height;\n                            var leftValue = (left === null || typeof left === 'undefined') ? 0 : left;\n                            if (page.rotation !== _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfRotationAngle.angle0) {\n                                _checkRotation(page, height, left);\n                            }\n                            destination = new _pdf_page__WEBPACK_IMPORTED_MODULE_1__.PdfDestination(page, [leftValue, topValue]);\n                            destination._index = pageNumber;\n                            destination.zoom = (typeof zoom !== 'undefined' && zoom !== null) ? zoom : 0;\n                            if (left === null || height === null || zoom === null || typeof left === 'undefined'\n                                || typeof height === 'undefined' || typeof zoom === 'undefined') {\n                                destination._setValidation(false);\n                            }\n                        }\n                    }\n                }\n            }\n            if (value instanceof _pdf_primitives__WEBPACK_IMPORTED_MODULE_0__._PdfDictionary) {\n                var pageDictionary = value;\n                var index = void 0;\n                if (loadedDocument && pageDictionary) {\n                    index = _getPageIndex(loadedDocument, pageDictionary);\n                }\n                if (typeof index !== 'undefined' && index !== null && index >= 0) {\n                    page = loadedDocument.getPage(index);\n                }\n                if (destinationArray.length > 1) {\n                    mode = destinationArray[1];\n                }\n                if (mode) {\n                    if (mode.name === 'XYZ') {\n                        if (destinationArray.length > 2) {\n                            left = destinationArray[2];\n                        }\n                        if (destinationArray.length > 3) {\n                            height = destinationArray[3];\n                        }\n                        if (destinationArray.length > 4) {\n                            zoom = destinationArray[4];\n                        }\n                        if (page) {\n                            var topValue = (height === null || typeof height === 'undefined') ? 0 : page.size[1] - height;\n                            var leftValue = (left === null || typeof left === 'undefined') ? 0 : left;\n                            if (page.rotation !== _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfRotationAngle.angle0) {\n                                topValue = _checkRotation(page, height, left);\n                            }\n                            destination = new _pdf_page__WEBPACK_IMPORTED_MODULE_1__.PdfDestination(page, [leftValue, topValue]);\n                            destination._index = index;\n                            destination.zoom = (typeof zoom !== 'undefined' && zoom !== null) ? zoom : 0;\n                            if (left === null || height === null || zoom === null || typeof left === 'undefined' ||\n                                typeof height === 'undefined' || typeof zoom === 'undefined') {\n                                destination._setValidation(false);\n                            }\n                        }\n                    }\n                    else {\n                        if (mode.name === 'FitR') {\n                            if (destinationArray.length > 2) {\n                                left = destinationArray[2];\n                            }\n                            if (destinationArray.length > 3) {\n                                bottom = destinationArray[3];\n                            }\n                            if (destinationArray.length > 4) {\n                                right = destinationArray[4];\n                            }\n                            if (destinationArray.length > 5) {\n                                height = destinationArray[5];\n                            }\n                            if (page) {\n                                left = (left === null || typeof left === 'undefined') ? 0 : left;\n                                bottom = (bottom === null || typeof bottom === 'undefined') ? 0 : bottom;\n                                height = (height === null || typeof height === 'undefined') ? 0 : height;\n                                right = (right === null || typeof right === 'undefined') ? 0 : right;\n                                destination = new _pdf_page__WEBPACK_IMPORTED_MODULE_1__.PdfDestination(page, [left, bottom, right, height]);\n                                destination._index = index;\n                                destination.mode = _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfDestinationMode.fitR;\n                            }\n                        }\n                        else if (mode.name === 'FitBH' || mode.name === 'FitH') {\n                            if (destinationArray.length >= 3) {\n                                height = destinationArray[2];\n                            }\n                            if (typeof index !== 'undefined' && index !== null && index >= 0) {\n                                page = loadedDocument.getPage(index);\n                            }\n                            if (page && page.size) {\n                                var topValue = (height === null || typeof height === 'undefined') ? 0 : page.size[1] - height;\n                                destination = new _pdf_page__WEBPACK_IMPORTED_MODULE_1__.PdfDestination(page, [0, topValue]);\n                                destination._index = index;\n                                destination.mode = _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfDestinationMode.fitH;\n                                if (height === null || typeof height === 'undefined') {\n                                    destination._setValidation(false);\n                                }\n                            }\n                        }\n                        else {\n                            if (page && mode.name === 'Fit') {\n                                destination = new _pdf_page__WEBPACK_IMPORTED_MODULE_1__.PdfDestination(page);\n                                destination._index = index;\n                                destination.mode = _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfDestinationMode.fitToPage;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    return destination;\n}\n/**\n * Update the annotation bounds.\n *\n * @param {PdfAnnotation} annotation annotation.\n * @param {number[]} bounds annotation bounds.\n * @returns {number[]} bounds.\n */\nfunction _updateBounds(annotation, bounds) {\n    if (bounds) {\n        annotation._bounds = { x: bounds[0], y: bounds[1], width: bounds[2], height: bounds[3] };\n    }\n    var rect;\n    if (annotation._page && annotation.bounds) {\n        rect = [annotation.bounds.x, annotation.bounds.y + annotation.bounds.height,\n            annotation.bounds.width, annotation.bounds.height];\n        if (annotation._page._isNew && annotation._page._pageSettings) {\n            var pageSettings = annotation._page._pageSettings;\n            var pageBounds = [pageSettings.margins.left, pageSettings.margins.top, pageSettings.size[0] -\n                    (pageSettings.margins.left + pageSettings.margins.right),\n                pageSettings.size[1] - (pageSettings.margins.top + pageSettings.margins.bottom)];\n            rect[0] += pageBounds[0];\n            rect[1] = pageSettings.size[1] - (pageBounds[1] + rect[1]);\n        }\n        else {\n            var size = annotation._page.size;\n            rect[1] = size[1] - (annotation.bounds.y + annotation.bounds.height);\n            var cropBoxOrMediaBox = annotation._getCropOrMediaBox();\n            if (cropBoxOrMediaBox && cropBoxOrMediaBox.length > 2 && (cropBoxOrMediaBox[0] !== 0 || cropBoxOrMediaBox[1] !== 0)) {\n                rect[0] += cropBoxOrMediaBox[0];\n                rect[1] += cropBoxOrMediaBox[1];\n            }\n        }\n        return [rect[0], rect[1], rect[0] + rect[2], rect[1] + rect[3]];\n    }\n    return rect;\n}\n/**\n * Decode text.\n *\n * @param {string} text Text to decode.\n * @param {boolean} isColorSpace Color space or not\n * @param {boolean} isPassword Password or not\n * @returns {string} Decoded text.\n */\nfunction _decodeText(text, isColorSpace, isPassword) {\n    if (text && typeof text === 'string' && !isColorSpace && !isPassword) {\n        if (text.startsWith('þÿ')) {\n            text = text.substring(2);\n            if (text.endsWith('ÿý')) {\n                text = text.substring(0, text.length - 2);\n            }\n            var bytes = _stringToBytes(text, false, true);\n            var result = '';\n            for (var i = 0; i < bytes.length; i += 2) {\n                var x = bytes[Number.parseInt(i.toString(), 10)] << 8;\n                var y = bytes[Number.parseInt((i + 1).toString(), 10)];\n                var codeUnit = x | y;\n                result += String.fromCharCode(codeUnit);\n            }\n            text = result;\n        }\n    }\n    return text;\n}\n/**\n * Number of bytes required to save the number.\n *\n * @param {number} input number.\n * @returns {number} number of bytes.\n */\nfunction _getSize(input) {\n    var size = 0;\n    var uintMaxValue = 0xFFFFFFFF;\n    var ushortMaxValue = 0xFFFF;\n    var byteMaxValue = 0xFF;\n    if (input <= uintMaxValue) {\n        if (input <= ushortMaxValue) {\n            if (input <= byteMaxValue) {\n                size = 1;\n            }\n            else {\n                size = 2;\n            }\n        }\n        else {\n            if (input <= (ushortMaxValue | (ushortMaxValue << 8))) {\n                size = 3;\n            }\n            else {\n                size = 4;\n            }\n        }\n    }\n    else {\n        size = 8;\n    }\n    return size;\n}\n/**\n * Convert the string to big endian bytes.\n *\n * @param {string} input string.\n * @returns {number[]} bytes.\n */\nfunction _stringToBigEndianBytes(input) {\n    var bytes = [];\n    for (var i = 0; i < input.length; i++) {\n        var charCode = input.charCodeAt(Number.parseInt(i.toString(), 10));\n        if (charCode <= 0xFFFF) {\n            bytes.push((charCode >> 8) & 0xFF);\n            bytes.push(charCode & 0xFF);\n        }\n    }\n    return bytes;\n}\n/**\n * Convert number respect to ordered list number style.\n *\n * @param {number} intArabic Input value.\n * @param {PdfNumberStyle} numberStyle Number style.\n * @returns {string} String value.\n */\nfunction _convertNumber(intArabic, numberStyle) {\n    switch (numberStyle) {\n        case _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfNumberStyle.none:\n            return '';\n        case _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfNumberStyle.numeric:\n            return intArabic.toString();\n        case _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfNumberStyle.lowerLatin:\n            return _arabicToLetter(intArabic).toLowerCase();\n        case _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfNumberStyle.lowerRoman:\n            return _arabicToRoman(intArabic).toLowerCase();\n        case _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfNumberStyle.upperLatin:\n            return _arabicToLetter(intArabic);\n        case _enumerator__WEBPACK_IMPORTED_MODULE_2__.PdfNumberStyle.upperRoman:\n            return _arabicToRoman(intArabic);\n    }\n}\n/**\n * Convert arabic numbers to roman style.\n *\n * @param {number} intArabic Input value.\n * @returns {string} String value.\n */\nfunction _arabicToRoman(intArabic) {\n    var retval = '';\n    var romanNumerals = [\n        [1000, 'M'], [900, 'CM'], [500, 'D'], [400, 'CD'],\n        [100, 'C'], [90, 'XC'], [50, 'L'], [40, 'XL'],\n        [10, 'X'], [9, 'IX'], [5, 'V'], [4, 'IV'], [1, 'I']\n    ];\n    for (var _i = 0, romanNumerals_1 = romanNumerals; _i < romanNumerals_1.length; _i++) {\n        var _a = romanNumerals_1[_i], value = _a[0], numeral = _a[1];\n        while (intArabic >= value) {\n            retval += numeral;\n            intArabic -= value;\n        }\n    }\n    return retval;\n}\n/**\n * Convert arabic numbers to alphabet.\n *\n * @param {number} arabic Input value.\n * @returns {string} String value.\n */\nfunction _arabicToLetter(arabic) {\n    var result = '';\n    while (arabic > 0) {\n        var remainder = arabic % 26;\n        arabic = Math.floor(arabic / 26);\n        if (remainder === 0) {\n            arabic--;\n            remainder = 26;\n        }\n        result = _appendChar(remainder) + result;\n    }\n    return result;\n}\n/**\n * Convert character code to string.\n *\n * @param {number} value Input value.\n * @returns {string} String value.\n */\nfunction _appendChar(value) {\n    if (value <= 0 || value > 26) {\n        throw new Error('Value can not be less 0 and greater 26');\n    }\n    return String.fromCharCode(64 + value);\n}\n/**\n * Check whether the value is null or undefined.\n *\n * @param {any} value Input value.\n * @returns {boolean} Return true if the value is null or undefined; otherwise, return false\n */\nfunction _isNullOrUndefined(value) {\n    if (value !== null && typeof value !== 'undefined') {\n        return true;\n    }\n    return false;\n}\n/**\n * Compare two arrays of numbers to determine if they are equal.\n *\n * This function checks if two arrays have the same length and\n * identical elements in the same order.\n *\n * @param {number[]} arr1 - The first array to compare.\n * @param {number[]} arr2 - The second array to compare.\n * @returns {boolean} 'true' if the arrays are equal, otherwise 'false'.\n */\nfunction _isArrayEqual(arr1, arr2) {\n    if (arr1.length !== arr2.length) {\n        return false;\n    }\n    for (var i = 0, ii = arr1.length; i < ii; i++) {\n        if (arr1[Number.parseInt(i.toString(), 10)] !== arr2[Number.parseInt(i.toString(), 10)]) {\n            return false;\n        }\n    }\n    return true;\n}\n/**\n * Defines a property on an object with specific attributes.\n *\n * @param {Object} obj - The target object on which the property will be defined.\n * @param {string} prop - The name of the property to define.\n * @param {any} value - The value to assign to the property.\n * @param {boolean} [serializable = false] - If true, the property will not be enumerable.\n * @returns {any} The value of the property that was defined.\n *\n */\nfunction _defineProperty(obj, prop, value, serializable) {\n    if (serializable === void 0) { serializable = false; }\n    Object.defineProperty(obj, prop, {\n        value: value,\n        enumerable: !serializable,\n        configurable: true,\n        writable: false\n    });\n    return value;\n}\n/**\n * Compresses the content of a PDFBaseStream\n *\n * @param {_PdfBaseStream} stream - Base stream to compress.\n * @param {boolean} isExport - Denotes compress the stream as a hex-encoded string.\n * @returns {boolean} compressed string.\n */\nfunction _compressStream(stream, isExport) {\n    if (isExport === void 0) { isExport = false; }\n    var value = stream.getString();\n    var byteArray = [];\n    for (var i = 0; i < value.length; i++) {\n        byteArray.push(value.charCodeAt(i));\n    }\n    var dataArray = new Uint8Array(byteArray);\n    var sw = new _syncfusion_ej2_compression__WEBPACK_IMPORTED_MODULE_11__.CompressedStreamWriter();\n    sw.write(dataArray, 0, dataArray.length);\n    sw.close();\n    value = sw.getCompressedString;\n    stream.dictionary.update('Filter', _pdf_primitives__WEBPACK_IMPORTED_MODULE_0__._PdfName.get('FlateDecode'));\n    if (isExport) {\n        var buffer = [];\n        for (var i = 0; i < value.length; i++) {\n            buffer.push(value.charCodeAt(i) & 0xff);\n        }\n        return _byteArrayToHexString(new Uint8Array(buffer));\n    }\n    return value;\n}\n/**\n * Check whether the input string contains any right-to-left (RTL) characters.\n *\n * @param {string} input The input string.\n * @returns {boolean} Returns true if the string contains any RTL characters; otherwise, returns false.\n */\nfunction _isRightToLeftCharacters(input) {\n    // Unicode range for RTL characters\n    var rtlRegex = /[\\u0590-\\u08FF\\uFB1D-\\uFDFF\\uFE70-\\uFEFF]/;\n    return rtlRegex.test(input);\n}\n/**\n * Updates the page count value in the dictionary\n *\n * @param {_PdfDictionary} dictionary - Dictionary to update page count.\n * @param {number} valueToIncrement - Page count.\n * @returns {void} Nothing.\n */\nfunction _updatePageCount(dictionary, valueToIncrement) {\n    dictionary.update('Count', dictionary.get('Count') + valueToIncrement);\n    if (dictionary.has('Parent')) {\n        var parentDictionary = dictionary.get('Parent');\n        if (parentDictionary && parentDictionary.get('Type').name === 'Pages') {\n            _updatePageCount(parentDictionary, valueToIncrement);\n        }\n    }\n}\n/**\n * Updates the page settings in the dictionary\n *\n * @param {_PdfDictionary} dictionary - Dictionary to update page settings.\n * @param {PdfPageSettings} settings - PDF page settings.\n * @returns {void} Nothing.\n */\nfunction _updatePageSettings(dictionary, settings) {\n    var bounds = [0, 0, settings.size[0], settings.size[1]];\n    dictionary.update('MediaBox', bounds);\n    dictionary.update('CropBox', bounds);\n    var rotate = Math.floor(settings.rotation) * 90;\n    if (rotate >= 360) {\n        rotate = rotate % 360;\n    }\n    dictionary.update('Rotate', rotate);\n}\n/**\n * Base64 encoded string representing an empty PDF document.\n */\nvar _emptyPdfData = 'JVBERi0xLjQNCiWDkvr+DQoxIDAgb2JqDQo8PA0KL1R5cGUgL0NhdGFsb2cNCi9QYWdlcyAyIDAgUg0KL0Fjcm9Gb3JtIDMgMCBSDQo+Pg0KZW5kb2JqDQoyIDAgb2JqDQo8PA0KL1R5cGUgL1BhZ2VzDQovS2lkcyBbNCAwIFJdDQovQ291bnQgMQ0KL1Jlc291cmNlcyA8PD4+DQoNCi9NZWRpYUJveCBbLjAwIC4wMCA1OTUuMDAgODQyLjAwXQ0KL1JvdGF0ZSAwDQo+Pg0KZW5kb2JqDQozIDAgb2JqDQo8PA0KL0ZpZWxkcyBbXQ0KPj4NCmVuZG9iag0KNCAwIG9iag0KPDwNCi9Db3VudCAxDQovVHlwZSAvUGFnZXMNCi9LaWRzIFs1IDAgUl0NCi9QYXJlbnQgMiAwIFINCj4+DQplbmRvYmoNCjUgMCBvYmoNCjw8DQovVHlwZSAvUGFnZQ0KL1BhcmVudCA0IDAgUg0KPj4NCmVuZG9iag0KeHJlZg0KMCA2DQowMDAwMDAwMDAwIDY1NTM1IGYNCjAwMDAwMDAwMTcgMDAwMDAgbg0KMDAwMDAwMDA4OSAwMDAwMCBuDQowMDAwMDAwMjE4IDAwMDAwIG4NCjAwMDAwMDAyNTUgMDAwMDAgbg0KMDAwMDAwMDMzNCAwMDAwMCBuDQp0cmFpbGVyDQo8PA0KL1Jvb3QgMSAwIFINCi9TaXplIDYNCj4+DQoNCnN0YXJ0eHJlZg0KMzg3DQolJUVPRg0K';\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-pdf/src/pdf/core/utils.js?");

/***/ })

}]);