"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkej2_vue_samples"] = self["webpackChunkej2_vue_samples"] || []).push([["chunk-vendors-node_modules_syncfusion_ej2-pivotview_src_pivotview_base_pivotview_js-fe542a3b"],{

/***/ "./node_modules/@syncfusion/ej2-pivotview/src/pivotview/base/pivotview.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-pivotview/src/pivotview/base/pivotview.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CellEditSettings: () => (/* binding */ CellEditSettings),\n/* harmony export */   ConditionalSettings: () => (/* binding */ ConditionalSettings),\n/* harmony export */   DisplayOption: () => (/* binding */ DisplayOption),\n/* harmony export */   GroupingBarSettings: () => (/* binding */ GroupingBarSettings),\n/* harmony export */   HyperlinkSettings: () => (/* binding */ HyperlinkSettings),\n/* harmony export */   PageSettings: () => (/* binding */ PageSettings),\n/* harmony export */   PagerSettings: () => (/* binding */ PagerSettings),\n/* harmony export */   PivotView: () => (/* binding */ PivotView),\n/* harmony export */   VirtualScrollSettings: () => (/* binding */ VirtualScrollSettings)\n/* harmony export */ });\n/* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @syncfusion/ej2-base */ \"./node_modules/@syncfusion/ej2-base/index.js\");\n/* harmony import */ var _base_engine__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../base/engine */ \"./node_modules/@syncfusion/ej2-pivotview/src/base/engine.js\");\n/* harmony import */ var _syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @syncfusion/ej2-popups */ \"./node_modules/@syncfusion/ej2-popups/index.js\");\n/* harmony import */ var _common_base_constant__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../common/base/constant */ \"./node_modules/@syncfusion/ej2-pivotview/src/common/base/constant.js\");\n/* harmony import */ var _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../common/base/css-constant */ \"./node_modules/@syncfusion/ej2-pivotview/src/common/base/css-constant.js\");\n/* harmony import */ var _renderer_render__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../renderer/render */ \"./node_modules/@syncfusion/ej2-pivotview/src/pivotview/renderer/render.js\");\n/* harmony import */ var _common_actions_common__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../common/actions/common */ \"./node_modules/@syncfusion/ej2-pivotview/src/common/actions/common.js\");\n/* harmony import */ var _model_datasourcesettings__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../model/datasourcesettings */ \"./node_modules/@syncfusion/ej2-pivotview/src/model/datasourcesettings.js\");\n/* harmony import */ var _model_gridsettings__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../model/gridsettings */ \"./node_modules/@syncfusion/ej2-pivotview/src/pivotview/model/gridsettings.js\");\n/* harmony import */ var _syncfusion_ej2_grids__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @syncfusion/ej2-grids */ \"./node_modules/@syncfusion/ej2-grids/index.js\");\n/* harmony import */ var _actions_keyboard__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../actions/keyboard */ \"./node_modules/@syncfusion/ej2-pivotview/src/pivotview/actions/keyboard.js\");\n/* harmony import */ var _common_popups_context_menu__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../common/popups/context-menu */ \"./node_modules/@syncfusion/ej2-pivotview/src/common/popups/context-menu.js\");\n/* harmony import */ var _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @syncfusion/ej2-data */ \"./node_modules/@syncfusion/ej2-data/index.js\");\n/* harmony import */ var _actions_virtualscroll__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../actions/virtualscroll */ \"./node_modules/@syncfusion/ej2-pivotview/src/pivotview/actions/virtualscroll.js\");\n/* harmony import */ var _actions_drill_through__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../actions/drill-through */ \"./node_modules/@syncfusion/ej2-pivotview/src/pivotview/actions/drill-through.js\");\n/* harmony import */ var _base_util__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../../base/util */ \"./node_modules/@syncfusion/ej2-pivotview/src/base/util.js\");\n/* harmony import */ var _pivotchart_index__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../../pivotchart/index */ \"./node_modules/@syncfusion/ej2-pivotview/src/pivotchart/index.js\");\n/* harmony import */ var _model_chartsettings__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../model/chartsettings */ \"./node_modules/@syncfusion/ej2-pivotview/src/pivotview/model/chartsettings.js\");\n/* harmony import */ var _syncfusion_ej2_charts__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! @syncfusion/ej2-charts */ \"./node_modules/@syncfusion/ej2-charts/index.js\");\n/* harmony import */ var _syncfusion_ej2_pdf_export__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! @syncfusion/ej2-pdf-export */ \"./node_modules/@syncfusion/ej2-pdf-export/index.js\");\n/* harmony import */ var _base_olap_engine__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../../base/olap/engine */ \"./node_modules/@syncfusion/ej2-pivotview/src/base/olap/engine.js\");\n/* harmony import */ var _pivotchart_actions_chart_export__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ../../pivotchart/actions/chart-export */ \"./node_modules/@syncfusion/ej2-pivotview/src/pivotchart/actions/chart-export.js\");\n/* harmony import */ var _syncfusion_ej2_file_utils__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! @syncfusion/ej2-file-utils */ \"./node_modules/@syncfusion/ej2-file-utils/index.js\");\nvar __extends = (undefined && undefined.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * Allows a set of options for customizing the grouping bar UI with a variety of settings such as UI visibility to a specific view port,\n * customizing the pivot button features such as filtering, sorting, changing aggregate types, removing any fields.\n * The options available to customize the grouping bar UI are:\n * * `showFilterIcon`: Allows you to show or hide the filter icon that used to be displayed on the pivot button of the grouping bar UI.\n * This filter icon is used to filter the members of a particular field at runtime in the pivot table.\n * * `showSortIcon`: Allows you to show or hide the sort icon that used to be displayed in the pivot button of the grouping bar UI.\n * This sort icon is used to order members of a particular fields either in ascending or descending at runtime.\n * * `showRemoveIcon`: Allows you to show or hide the remove icon that used to be displayed in the pivot button of the grouping bar UI.\n * This remove icon is used to remove any field during runtime.\n * * `showValueTypeIcon`: Allows you to show or hide the value type icon that used to be displayed in the pivot button of the grouping bar UI.\n * This value type icon helps to select the appropriate aggregation type to value fields at runtime.\n * * `displayMode`: Allow options to show the grouping bar UI to specific view port such as either pivot table or pivot chart or both table and chart.\n * For example, to show the grouping bar UI to pivot table on its own, set the property `displayMode` to **Table**.\n * * `allowDragAndDrop`: Allows you to restrict the pivot buttons that were used to drag on runtime in the grouping bar UI. This will prevent you from modifying the current report.\n */\nvar GroupingBarSettings = /** @class */ (function (_super) {\n    __extends(GroupingBarSettings, _super);\n    function GroupingBarSettings() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(true)\n    ], GroupingBarSettings.prototype, \"showFilterIcon\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(true)\n    ], GroupingBarSettings.prototype, \"showSortIcon\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(true)\n    ], GroupingBarSettings.prototype, \"showRemoveIcon\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(true)\n    ], GroupingBarSettings.prototype, \"showValueTypeIcon\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('Both')\n    ], GroupingBarSettings.prototype, \"displayMode\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(true)\n    ], GroupingBarSettings.prototype, \"allowDragAndDrop\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], GroupingBarSettings.prototype, \"showFieldsPanel\", void 0);\n    return GroupingBarSettings;\n}(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.ChildProperty));\n\n/**\n * Allow options for performing CRUD operations, such as add, edit, delete, and update the raw items of any cell from the pivot table.\n * The raw items can be viewed in a data grid that used to be displayed as a dialog by double-clicking the appropriate value cell in the pivot table.\n * CRUD operations can be performed in this data grid either by double-clicking the cells or using toolbar options.\n * The options available are as follows:\n * * `allowAdding`: Allows you to add a new record to the data grid used to update the appropriate cells in the pivot table.\n * * `allowEditing`: Allows you to edit the existing record in the data grid that used to update the appropriate cells in the pivot table.\n * * `allowDeleting`: Allows you to delete the existing record from the data grid that used to  update the appropriate cells in the pivot table.\n * * `allowCommandColumns`: Allows an additional column appended in the data grid layout holds the command buttons to perform the CRUD operations to edit,\n * delete, and update the raw items to the data grid that used to update the appropriate cells in the pivot table.\n * * `mode`: Allow options for performing CRUD operations with different modes in the data grid that used to update the appropriate cells in the pivot table.\n * The available modes are normal, batch and dialog. **Normal** mode is enabled for CRUD operations in the data grid by default.\n * * `allowEditOnDblClick`: Allows you to restrict CRUD operations by double-clicking the appropriate value cell in the pivot table.\n * * `showConfirmDialog`: Allows you to show the confirmation dialog to save and discard CRUD operations performed in the data grid that used to update the appropriate cells in the pivot table.\n * * `showDeleteConfirmDialog`: Allows you to show the confirmation dialog to delete any records from the data grid.\n *\n * > This feature is applicable only for the relational data source.\n */\nvar CellEditSettings = /** @class */ (function (_super) {\n    __extends(CellEditSettings, _super);\n    function CellEditSettings() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], CellEditSettings.prototype, \"allowAdding\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], CellEditSettings.prototype, \"allowEditing\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], CellEditSettings.prototype, \"allowDeleting\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], CellEditSettings.prototype, \"allowCommandColumns\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], CellEditSettings.prototype, \"allowInlineEditing\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('Normal')\n    ], CellEditSettings.prototype, \"mode\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(true)\n    ], CellEditSettings.prototype, \"allowEditOnDblClick\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(true)\n    ], CellEditSettings.prototype, \"showConfirmDialog\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], CellEditSettings.prototype, \"showDeleteConfirmDialog\", void 0);\n    return CellEditSettings;\n}(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.ChildProperty));\n\n/**\n * Allow options for setting the visibility of hyperlink based on specific condition. The options available here are as follows:\n * * `measure`: Allows you to specify the value field caption to get visibility of hyperlink option for specific measure.\n * * `condition`: Allows you to choose the operator type such as equals, greater than, less than, etc.\n * * `value1`: Allows you to set the start value.\n * * `value2`: Allows you to set the end value. This option will be used by default when the operator **Between** and **NotBetween** is chosen to apply.\n */\nvar ConditionalSettings = /** @class */ (function (_super) {\n    __extends(ConditionalSettings, _super);\n    function ConditionalSettings() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)()\n    ], ConditionalSettings.prototype, \"measure\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)()\n    ], ConditionalSettings.prototype, \"label\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('NotEquals')\n    ], ConditionalSettings.prototype, \"conditions\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)()\n    ], ConditionalSettings.prototype, \"value1\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)()\n    ], ConditionalSettings.prototype, \"value2\", void 0);\n    return ConditionalSettings;\n}(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.ChildProperty));\n\n/**\n * Allow a set of options to display a hyperlink to link data for individual cells that are shown in the pivot table.\n * These options allow you to enable a separate hyperlink for row headers, column headers, value cells, and summary cells in the `hyperlinkSettings` class.\n * The options available are:\n * * `showHyperlink`: Allows you to set the visibility of hyperlink in all cells.\n * * `showRowHeaderHyperlink`: Allows you to set the visibility of hyperlink in row headers.\n * * `showColumnHeaderHyperlink`: Allows you to set the visibility of hyperlink in column headers.\n * * `showValueCellHyperlink`: Allows you to set the visibility of hyperlink in value cells.\n * * `showSummaryCellHyperlink`: Allows you to set the visibility of hyperlink in summary cells.\n * * `headerText`: Allows you to set the visibility of hyperlink based on header text.\n * * `conditionalSettings`: Allows you to set the visibility of hyperlink based on specific condition.\n * * `cssClass`: Allows you to add CSS class name to the hyperlink options.\n *\n * > By default, the hyperlink options are disabled for all cells in the pivot table.\n */\nvar HyperlinkSettings = /** @class */ (function (_super) {\n    __extends(HyperlinkSettings, _super);\n    function HyperlinkSettings() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], HyperlinkSettings.prototype, \"showHyperlink\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], HyperlinkSettings.prototype, \"showRowHeaderHyperlink\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], HyperlinkSettings.prototype, \"showColumnHeaderHyperlink\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], HyperlinkSettings.prototype, \"showValueCellHyperlink\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], HyperlinkSettings.prototype, \"showSummaryCellHyperlink\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Collection)([], ConditionalSettings)\n    ], HyperlinkSettings.prototype, \"conditionalSettings\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)()\n    ], HyperlinkSettings.prototype, \"headerText\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('')\n    ], HyperlinkSettings.prototype, \"cssClass\", void 0);\n    return HyperlinkSettings;\n}(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.ChildProperty));\n\n/**\n * Allows you to configure page information such as page size and current page details for each axis in order to display the pivot table with a specific page when paging.\n */\nvar PageSettings = /** @class */ (function (_super) {\n    __extends(PageSettings, _super);\n    function PageSettings() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(5)\n    ], PageSettings.prototype, \"columnPageSize\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(5)\n    ], PageSettings.prototype, \"rowPageSize\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(1)\n    ], PageSettings.prototype, \"currentColumnPage\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(1)\n    ], PageSettings.prototype, \"currentRowPage\", void 0);\n    return PageSettings;\n}(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.ChildProperty));\n\n/**\n * Allows a set of options for customizing the paging UI with a variety of settings such as UI position, template and visibility to a specific axis info such as page size, paging data.\n * > To use this option, it requires the property `enablePaging` to be true.\n */\nvar PagerSettings = /** @class */ (function (_super) {\n    __extends(PagerSettings, _super);\n    function PagerSettings() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('Bottom')\n    ], PagerSettings.prototype, \"position\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], PagerSettings.prototype, \"isInversed\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(true)\n    ], PagerSettings.prototype, \"showRowPager\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(true)\n    ], PagerSettings.prototype, \"showColumnPager\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(true)\n    ], PagerSettings.prototype, \"showRowPageSize\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(true)\n    ], PagerSettings.prototype, \"showColumnPageSize\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)([10, 50, 100, 200])\n    ], PagerSettings.prototype, \"rowPageSizes\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)([5, 10, 20, 50, 100])\n    ], PagerSettings.prototype, \"columnPageSizes\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], PagerSettings.prototype, \"enableCompactView\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)()\n    ], PagerSettings.prototype, \"template\", void 0);\n    return PagerSettings;\n}(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.ChildProperty));\n\n/**\n * Allow options to configure the view port as either pivot table or pivot chart or both table and chart. The options available are:\n * * `view`: Allows you to choose the view port as either pivot table or pivot chart or both table and chart.\n * * `primary`: Allows you to set the primary view to be either pivot table or pivot chart. To use this option, it requires the property `view` to be **Both**.\n */\nvar DisplayOption = /** @class */ (function (_super) {\n    __extends(DisplayOption, _super);\n    function DisplayOption() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('Table')\n    ], DisplayOption.prototype, \"view\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('Table')\n    ], DisplayOption.prototype, \"primary\", void 0);\n    return DisplayOption;\n}(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.ChildProperty));\n\n/**\n * Represents a class that allows defining values for options relating to the virtual scrolling experience in the pivot table.\n */\nvar VirtualScrollSettings = /** @class */ (function (_super) {\n    __extends(VirtualScrollSettings, _super);\n    function VirtualScrollSettings() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], VirtualScrollSettings.prototype, \"allowSinglePage\", void 0);\n    return VirtualScrollSettings;\n}(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.ChildProperty));\n\n/**\n * Represents the PivotView component.\n * ```html\n * <div id=\"PivotView\"></div>\n * <script>\n *  var pivotviewObj = new PivotView({ enableGroupingBar: true });\n *  pivotviewObj.appendTo(\"#pivotview\");\n * </script>\n * ```\n */\nvar PivotView = /** @class */ (function (_super) {\n    __extends(PivotView, _super);\n    /**\n     * Constructor for creating the widget\n     *\n     * @param  {PivotViewModel} options - options.\n     * @param  {string|HTMLElement} element - element.\n     */\n    function PivotView(options, element) {\n        var _this_1 = _super.call(this, options, element) || this;\n        /** @hidden */\n        _this_1.verticalScrollScale = 1;\n        /** @hidden */\n        _this_1.horizontalScrollScale = 1;\n        /** @hidden */\n        _this_1.scrollerBrowserLimit = 8000000;\n        /** @hidden */\n        _this_1.lastSortInfo = {};\n        /** @hidden */\n        _this_1.lastFilterInfo = {};\n        /** @hidden */\n        _this_1.lastAggregationInfo = {};\n        /** @hidden */\n        _this_1.lastCalcFieldInfo = {};\n        /** @hidden */\n        _this_1.isScrolling = false;\n        /** @hidden */\n        _this_1.allowEngineExport = false;\n        /** @hidden */\n        _this_1.isInitial = true;\n        _this_1.shiftLockedPos = [];\n        _this_1.savedSelectedCellsPos = [];\n        _this_1.cellSelectionPos = [];\n        _this_1.isPopupClicked = false;\n        _this_1.isMouseDown = false;\n        _this_1.isMouseUp = false;\n        _this_1.fieldsType = {};\n        _this_1.remoteData = [];\n        _this_1.defaultItems = {};\n        _this_1.isCellBoxMultiSelection = false;\n        /** @hidden */\n        _this_1.gridCellCollection = {};\n        /** @hidden */\n        _this_1.rowRangeSelection = { enable: false, startIndex: 0, endIndex: 0 };\n        /** @hidden */\n        _this_1.isStaticRefresh = false;\n        /** @hidden */\n        _this_1.isStaticFieldList = false;\n        /** @hidden */\n        _this_1.resizeInfo = {};\n        /** @hidden */\n        _this_1.scrollPosObject = {\n            vertical: 0, horizontal: 0, verticalSection: 0,\n            horizontalSection: 0, top: 0, left: 0, scrollDirection: { direction: '', position: 0 }\n        };\n        /** @hidden */\n        _this_1.pivotColumns = [];\n        /** @hidden */\n        _this_1.totColWidth = 0;\n        /** @hidden */\n        _this_1.posCount = 0;\n        /** @hidden */\n        _this_1.isModified = false;\n        /** @hidden */\n        _this_1.isInitialRendering = false;\n        _this_1.needsID = true;\n        _this_1.pivotRefresh = _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Component.prototype.refresh;\n        _this_1.request = typeof window !== 'undefined' ? new XMLHttpRequest() : null;\n        /** @hidden */\n        _this_1.isServerWaitingPopup = false;\n        /** @hidden */\n        _this_1.actionObj = {};\n        /** @hidden */\n        _this_1.defaultFieldListOrder = 'None';\n        /** @hidden */\n        _this_1.destroyEngine = false;\n        _this_1.pivotView = _this_1;\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.setValue)('mergePersistData', _this_1.mergePersistPivotData, _this_1);\n        return _this_1;\n    }\n    /**\n     * To provide the array of modules needed for control rendering\n     *\n     * @returns {ModuleDeclaration[]} - return.\n     * @hidden\n     */\n    PivotView.prototype.requiredModules = function () {\n        var modules = [];\n        if (this.showGroupingBar) {\n            modules.push({ args: [this], member: 'groupingBar' });\n        }\n        if (this.allowConditionalFormatting) {\n            modules.push({ args: [this], member: 'conditionalFormatting' });\n        }\n        if (this.allowNumberFormatting) {\n            modules.push({ args: [this], member: 'numberFormatting' });\n        }\n        if (this.allowCalculatedField) {\n            modules.push({ args: [this], member: 'calculatedField' });\n        }\n        if (this.showToolbar && (this.toolbar.length > 0 || this.toolbarTemplate)) {\n            modules.push({ args: [this], member: 'toolbar' });\n        }\n        if (this.showFieldList) {\n            modules.push({ args: [this], member: 'fieldList' });\n        }\n        if (this.allowExcelExport) {\n            modules.push({ args: [this], member: 'excelExport' });\n        }\n        if (this.allowPdfExport) {\n            modules.push({ args: [this], member: 'pdfExport' });\n        }\n        if (this.enableVirtualization) {\n            modules.push({ args: [this], member: 'virtualscroll' });\n        }\n        if (this.allowGrouping) {\n            modules.push({ args: [this], member: 'grouping' });\n        }\n        if (this.allowDrillThrough || (this.editSettings && this.editSettings.allowEditing)) {\n            modules.push({ args: [this], member: 'drillThrough' });\n        }\n        if (this.enablePaging) {\n            modules.push({ args: [this], member: 'pager' });\n        }\n        return modules;\n    };\n    /**\n     *\n     * For internal use only - Initializing internal properties;\n     *\n     * @private\n     */\n    PivotView.prototype.preRender = function () {\n        if (this.dataSourceSettings && this.dataSourceSettings.providerType === 'SSAS') {\n            this.dataType = 'olap';\n            this.olapEngineModule = new _base_olap_engine__WEBPACK_IMPORTED_MODULE_20__.OlapEngine();\n        }\n        else {\n            this.dataType = 'pivot';\n            this.engineModule = new _base_engine__WEBPACK_IMPORTED_MODULE_1__.PivotEngine();\n        }\n        this.isAdaptive = _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice;\n        if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isIE || _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.info.name === 'edge') {\n            this.scrollerBrowserLimit = 1500000;\n        }\n        else if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.info.name === 'chrome') {\n            this.scrollerBrowserLimit = 15000000;\n        }\n        this.isTouchMode = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(this.element, 'e-bigger') ? true : false;\n        this.initProperties();\n        this.renderToolTip();\n        this.keyboardModule = new _actions_keyboard__WEBPACK_IMPORTED_MODULE_10__.KeyboardInteraction(this);\n        this.contextMenuModule = new _common_popups_context_menu__WEBPACK_IMPORTED_MODULE_11__.PivotContextMenu(this);\n        this.globalize = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Internationalization(this.locale);\n        if (this.showFieldList || this.showGroupingBar || this.allowNumberFormatting || this.allowCalculatedField ||\n            (this.toolbar && this.showToolbar) || this.allowGrouping || this.gridSettings.contextMenuItems || this.allowDrillThrough) {\n            this.commonModule = new _common_actions_common__WEBPACK_IMPORTED_MODULE_6__.Common(this);\n        }\n        if (this.allowPdfExport && (this.displayOption.view === 'Both' || this.displayOption.view === 'Chart')) {\n            this.chartExportModule = new _pivotchart_actions_chart_export__WEBPACK_IMPORTED_MODULE_21__.ChartExport(this);\n        }\n        this.defaultLocale = {\n            applyToGrandTotal: 'Apply to Grand Total',\n            grandTotal: 'Grand Total',\n            total: 'Total',\n            value: 'Value',\n            noValue: 'No value',\n            row: 'Row',\n            column: 'Column',\n            collapse: 'Collapse',\n            expand: 'Expand',\n            rowAxisPrompt: 'Drop row here',\n            columnAxisPrompt: 'Drop column here',\n            valueAxisPrompt: 'Drop value here',\n            filterAxisPrompt: 'Drop filter here',\n            filter: 'Filter',\n            filtered: 'Filtered',\n            sort: 'Sort',\n            filters: 'Filters',\n            rows: 'Rows',\n            columns: 'Columns',\n            values: 'Values',\n            close: 'Close',\n            cancel: 'Cancel',\n            delete: 'Delete',\n            CalculatedField: 'Calculated Field',\n            createCalculatedField: 'Create Calculated Field',\n            fieldName: 'Enter the field name',\n            error: 'Error',\n            invalidFormula: 'Invalid formula.',\n            dropText: 'Example: (\"Sum(Order_Count)\" + \"Sum(In_Stock)\") * 250',\n            dropTextMobile: 'Add fields and edit formula here.',\n            dropAction: 'Calculated field cannot be place in any other region except value axis.',\n            alert: 'Alert',\n            warning: 'Warning',\n            ok: 'OK',\n            search: 'Search',\n            drag: 'Drag',\n            remove: 'Remove',\n            allFields: 'All Fields',\n            formula: 'Formula',\n            addToRow: 'Add to Row',\n            addToColumn: 'Add to Column',\n            addToValue: 'Add to Value',\n            addToFilter: 'Add to Filter',\n            emptyData: 'No records to display',\n            fieldExist: 'A field already exists in this name. Please enter a different name.',\n            confirmText: 'A calculation field already exists in this name. Do you want to replace it?',\n            noMatches: 'No matches',\n            format: 'Summaries values by',\n            edit: 'Edit',\n            clear: 'Clear',\n            sortAscending: 'Sort ascending order',\n            sortDescending: 'Sort descending order',\n            sortNone: 'Sort data order',\n            clearCalculatedField: 'Clear edited field info',\n            editCalculatedField: 'Edit calculated field',\n            formulaField: 'Drag and drop fields to formula',\n            dragField: 'Drag field to formula',\n            clearFilter: 'Clear',\n            by: 'by',\n            all: 'All',\n            multipleItems: 'Multiple items',\n            member: 'Member',\n            label: 'Label',\n            date: 'Date',\n            enterValue: 'Enter value',\n            chooseDate: 'Enter date',\n            Before: 'Before',\n            BeforeOrEqualTo: 'Before Or Equal To',\n            After: 'After',\n            AfterOrEqualTo: 'After Or Equal To',\n            labelTextContent: 'Show the items for which the label',\n            dateTextContent: 'Show the items for which the date',\n            valueTextContent: 'Show the items for which',\n            Equals: 'Equals',\n            DoesNotEquals: 'Does Not Equal',\n            BeginWith: 'Begins With',\n            DoesNotBeginWith: 'Does Not Begin With',\n            EndsWith: 'Ends With',\n            DoesNotEndsWith: 'Does Not End With',\n            Contains: 'Contains',\n            DoesNotContains: 'Does Not Contain',\n            GreaterThan: 'Greater Than',\n            GreaterThanOrEqualTo: 'Greater Than Or Equal To',\n            LessThan: 'Less Than',\n            LessThanOrEqualTo: 'Less Than Or Equal To',\n            Between: 'Between',\n            NotBetween: 'Not Between',\n            And: 'and',\n            Sum: 'Sum',\n            Count: 'Count',\n            DistinctCount: 'Distinct Count',\n            Product: 'Product',\n            Avg: 'Avg',\n            Median: 'Median',\n            Min: 'Min',\n            SampleVar: 'Sample Var',\n            PopulationVar: 'Population Var',\n            RunningTotals: 'Running Totals',\n            Max: 'Max',\n            Index: 'Index',\n            SampleStDev: 'Sample StDev',\n            PopulationStDev: 'Population StDev',\n            PercentageOfRowTotal: '% of Row Total',\n            PercentageOfParentTotal: '% of Parent Total',\n            PercentageOfParentColumnTotal: '% of Parent Column Total',\n            PercentageOfParentRowTotal: '% of Parent Row Total',\n            DifferenceFrom: 'Difference From',\n            PercentageOfDifferenceFrom: '% of Difference From',\n            PercentageOfGrandTotal: '% of Grand Total',\n            PercentageOfColumnTotal: '% of Column Total',\n            MoreOption: 'More...',\n            NotEquals: 'Not Equals',\n            AllValues: 'All Values',\n            conditionalFormatting: 'Conditional Formatting',\n            apply: 'Apply',\n            condition: 'Add Condition',\n            formatLabel: 'Format',\n            valueFieldSettings: 'Value field settings',\n            baseField: 'Base field',\n            baseItem: 'Base item',\n            summarizeValuesBy: 'Summarize values by',\n            sourceName: 'Field name :',\n            sourceCaption: 'Field caption',\n            example: 'e.g:',\n            editorDataLimitMsg: ' more items. Search to refine further.',\n            details: 'Details',\n            manageRecords: 'Manage Records',\n            Years: 'Years',\n            Quarters: 'Quarters',\n            Months: 'Months',\n            Days: 'Days',\n            Hours: 'Hours',\n            Minutes: 'Minutes',\n            Seconds: 'Seconds',\n            save: 'Save a report',\n            new: 'Create a new report',\n            load: 'Load',\n            saveAs: 'Save as current report',\n            rename: 'Rename a current report',\n            deleteReport: 'Delete a current report',\n            export: 'Export',\n            subTotals: 'Sub totals',\n            grandTotals: 'Grand totals',\n            reportName: 'Report Name :',\n            pdf: 'PDF',\n            excel: 'Excel',\n            csv: 'CSV',\n            png: 'PNG',\n            jpeg: 'JPEG',\n            svg: 'SVG',\n            mdxQuery: 'MDX Query',\n            showSubTotals: 'Show subtotals',\n            doNotShowSubTotals: 'Do not show subtotals',\n            showSubTotalsRowsOnly: 'Show subtotals rows only',\n            showSubTotalsColumnsOnly: 'Show subtotals columns only',\n            showGrandTotals: 'Show grand totals',\n            doNotShowGrandTotals: 'Do not show grand totals',\n            showGrandTotalsRowsOnly: 'Show grand totals rows only',\n            showGrandTotalsColumnsOnly: 'Show grand totals columns only',\n            fieldList: 'Show fieldlist',\n            grid: 'Show table',\n            toolbarFormatting: 'Conditional formatting',\n            chart: 'Chart',\n            reportMsg: 'Please enter valid report name!!!',\n            reportList: 'Report list',\n            removeConfirm: 'Are you sure you want to delete this report?',\n            emptyReport: 'No reports found!!',\n            bar: 'Bar',\n            pie: 'Pie',\n            funnel: 'Funnel',\n            doughnut: 'Doughnut',\n            pyramid: 'Pyramid',\n            stackingcolumn: 'Stacked Column',\n            stackingarea: 'Stacked Area',\n            stackingbar: 'Stacked Bar',\n            stackingline: 'Stacked Line',\n            stepline: 'Step Line',\n            steparea: 'Step Area',\n            splinearea: 'Spline Area',\n            spline: 'Spline',\n            stackingcolumn100: '100% Stacked Column',\n            stackingbar100: '100% Stacked Bar',\n            stackingarea100: '100% Stacked Area',\n            stackingline100: '100% Stacked Line',\n            bubble: 'Bubble',\n            pareto: 'Pareto',\n            radar: 'Radar',\n            line: 'Line',\n            area: 'Area',\n            scatter: 'Scatter',\n            polar: 'Polar',\n            of: 'of',\n            emptyFormat: 'No format found!!!',\n            emptyInput: 'Enter a value',\n            newReportConfirm: 'Do you want to save the changes to this report?',\n            emptyReportName: 'Enter a report name',\n            qtr: 'Qtr',\n            null: 'null',\n            undefined: 'undefined',\n            groupOutOfRange: 'Out of Range',\n            fieldDropErrorAction: 'The field you are moving cannot be placed in that area of the report',\n            aggregate: 'Aggregate',\n            drillThrough: 'Drill Through',\n            ascending: 'Ascending',\n            descending: 'Descending',\n            number: 'Number',\n            currency: 'Currency',\n            percentage: 'Percentage',\n            formatType: 'Format Type',\n            customText: 'Currency Symbol',\n            symbolPosition: 'Symbol Position',\n            left: 'Left',\n            right: 'Right',\n            grouping: 'Grouping',\n            true: 'True',\n            false: 'False',\n            decimalPlaces: 'Decimal Places',\n            numberFormat: 'Number Formatting',\n            memberType: 'Field Type',\n            formatString: 'Format',\n            expressionField: 'Expression',\n            customFormat: 'Enter custom format string',\n            numberFormatString: 'Example: C, P, 0000 %, ###0.##0#, etc.',\n            selectedHierarchy: 'Parent Hierarchy',\n            olapDropText: 'Example: [Measures].[Order Quantity] + ([Measures].[Order Quantity] * 0.10)',\n            Percent: 'Percent',\n            Currency: 'Currency',\n            Custom: 'Custom',\n            Measure: 'Measure',\n            Dimension: 'Dimension',\n            Standard: 'Standard',\n            blank: '(Blank)',\n            fieldTooltip: 'Drag and drop fields to create an expression. ' +\n                'And, if you want to edit the existing calculated fields! ' +\n                'You can achieve it by simply selecting the field under \"Calculated Members\".',\n            fieldTitle: 'Field Name',\n            QuarterYear: 'Quarter Year',\n            drillError: 'Cannot show the raw items of calculated fields.',\n            caption: 'Field Caption',\n            copy: 'Copy',\n            defaultReport: 'Sample Report',\n            customFormatString: 'Custom Format',\n            invalidFormat: 'Invalid Format.',\n            group: 'Group',\n            unGroup: 'Ungroup',\n            invalidSelection: 'Cannot group that selection.',\n            groupName: 'Enter the caption to display in header',\n            captionName: 'Enter the caption for group field',\n            selectedItems: 'Selected items',\n            groupFieldCaption: 'Field caption',\n            groupTitle: 'Group name',\n            startAt: 'Starting at',\n            endAt: 'Ending at',\n            groupBy: 'Interval by',\n            selectGroup: 'Select groups',\n            multipleAxes: 'Multiple Axis',\n            showLegend: 'Show Legend',\n            exit: 'Exit',\n            chartTypeSettings: 'Chart Type Settings',\n            ChartType: 'Chart Type',\n            yes: 'Yes',\n            no: 'No',\n            numberFormatMenu: 'Number Formatting...',\n            conditionalFormattingMenu: 'Conditional Formatting...',\n            removeCalculatedField: 'Are you sure you want to delete this calculated field?',\n            replaceConfirmBefore: 'A report named ',\n            replaceConfirmAfter: ' already exists. Do you want to replace it?',\n            invalidJSON: 'Invalid JSON data',\n            invalidCSV: 'Invalid CSV data',\n            stacked: 'Stacked',\n            single: 'Single',\n            combined: 'Combined',\n            multipleAxisMode: 'Multiple Axis Mode',\n            grandTotalPosition: 'Grand totals position',\n            top: 'Top',\n            bottom: 'Bottom',\n            None: 'None',\n            rowPage: 'Row pager',\n            rowPerPage: 'Rows per page',\n            columnPage: 'Column pager',\n            columnPerPage: 'Columns per page',\n            goToFirstPage: 'Go to first page',\n            goToPreviousPage: 'Go to previous page',\n            goToNextPage: 'Go to next page',\n            goToLastPage: 'Go to last page',\n            subTotalPosition: 'Subtotals position',\n            auto: 'Auto',\n            loading: 'Loading...',\n            add: 'Add'\n        };\n        this.localeObj = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.L10n(this.getModuleName(), this.defaultLocale, this.locale);\n        this.renderContextMenu();\n        this.isDragging = false;\n        this.pivotDeferLayoutUpdate = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.pivotDeferLayoutUpdate) ? this.allowDeferLayoutUpdate :\n            this.pivotDeferLayoutUpdate;\n        this.addInternalEvents();\n        //setCurrencyCode(this.currencyCode);\n    };\n    PivotView.prototype.onBeforeTooltipOpen = function (args) {\n        args.element.classList.add('e-pivottooltipwrap');\n    };\n    PivotView.prototype.renderToolTip = function () {\n        if (this.showTooltip) {\n            if (this.tooltipTemplate) {\n                this.tooltip = new _syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_2__.Tooltip({\n                    target: 'td.e-valuescontent',\n                    cssClass: 'e-pivottooltiptemplate' + (this.cssClass ? (' ' + this.cssClass) : ''),\n                    showTipPointer: false,\n                    position: 'BottomRight',\n                    mouseTrail: true,\n                    enableRtl: this.enableRtl,\n                    locale: this.locale,\n                    enableHtmlSanitizer: this.enableHtmlSanitizer,\n                    beforeRender: this.setToolTip.bind(this),\n                    beforeOpen: this.onBeforeTooltipOpen\n                });\n            }\n            else {\n                this.tooltip = new _syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_2__.Tooltip({\n                    target: 'td.e-valuescontent',\n                    cssClass: this.cssClass,\n                    showTipPointer: false,\n                    position: 'BottomRight',\n                    mouseTrail: true,\n                    enableRtl: this.enableRtl,\n                    locale: this.locale,\n                    enableHtmlSanitizer: this.enableHtmlSanitizer,\n                    beforeRender: this.setToolTip.bind(this),\n                    beforeOpen: this.onBeforeTooltipOpen\n                });\n            }\n            this.tooltip.isStringTemplate = true;\n            this.tooltip.appendTo(this.element);\n        }\n        else if (this.tooltip) {\n            this.tooltip.destroy();\n        }\n    };\n    /** @hidden */\n    PivotView.prototype.renderContextMenu = function () {\n        if (this.gridSettings.contextMenuItems || (this.allowGrouping && this.dataType === 'pivot')) {\n            var conmenuItems = [];\n            var groupItems = [];\n            var customItems = [];\n            var exportItems = [];\n            var aggItems = [];\n            var expItems = [];\n            var aggregateItems = [];\n            if (this.gridSettings.contextMenuItems) {\n                for (var _i = 0, _a = this.gridSettings.contextMenuItems; _i < _a.length; _i++) {\n                    var item = _a[_i];\n                    if (typeof item === 'string' && this.getDefaultItems().indexOf(item) !== -1) {\n                        if (item.toString().toLowerCase().indexOf('aggregate') !== -1 && this.dataType === 'pivot') {\n                            aggregateItems = [\n                                { text: this.localeObj.getConstant('Sum') }\n                            ];\n                            var aggregateGroup = this.buildDefaultItems('Aggregate');\n                            aggregateGroup.items = aggregateItems;\n                            aggItems.push(aggregateGroup);\n                        }\n                        else if (item.toString().toLowerCase().indexOf('export') !== -1) {\n                            exportItems.push(this.buildDefaultItems(item));\n                        }\n                        else {\n                            conmenuItems.push(this.buildDefaultItems(item));\n                        }\n                    }\n                    else if (typeof item !== 'string') {\n                        customItems.push(item);\n                    }\n                }\n            }\n            if (this.allowGrouping && this.dataType === 'pivot') {\n                if (!this.getFieldByID(this.element.id + '_custom_group', this.gridSettings.contextMenuItems)) {\n                    groupItems.push(this.buildDefaultItems('Group'));\n                }\n                if (!this.getFieldByID(this.element.id + '_custom_ungroup', this.gridSettings.contextMenuItems)) {\n                    groupItems.push(this.buildDefaultItems('Ungroup'));\n                }\n            }\n            if (exportItems.length > 0) {\n                var exportGroupItems = this.buildDefaultItems('export');\n                exportGroupItems.items = exportItems;\n                expItems.push(exportGroupItems);\n            }\n            var contextMenuItems = [];\n            Array.prototype.push.apply(contextMenuItems, aggItems);\n            Array.prototype.push.apply(contextMenuItems, conmenuItems);\n            Array.prototype.push.apply(contextMenuItems, groupItems);\n            Array.prototype.push.apply(contextMenuItems, expItems);\n            Array.prototype.push.apply(contextMenuItems, customItems);\n            this.setProperties({ gridSettings: { contextMenuItems: contextMenuItems } }, true);\n        }\n    };\n    PivotView.prototype.getFieldByID = function (id, fields) {\n        return new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_12__.DataManager({ json: fields }).executeLocal(new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_12__.Query().where('id', 'equal', id))[0];\n    };\n    /**\n     *\n     * @hidden\n     *\n     */\n    PivotView.prototype.getAllSummaryType = function () {\n        return ['Sum', 'Count', 'DistinctCount', 'Product', 'Min', 'Max', 'Avg', 'Median', 'Index',\n            'PopulationVar', 'SampleVar', 'PopulationStDev', 'SampleStDev', 'RunningTotals', 'PercentageOfGrandTotal',\n            'PercentageOfColumnTotal', 'PercentageOfRowTotal', 'PercentageOfParentColumnTotal', 'PercentageOfParentRowTotal',\n            'DifferenceFrom', 'PercentageOfDifferenceFrom', 'PercentageOfParentTotal'];\n    };\n    PivotView.prototype.getDefaultItems = function () {\n        return ['Drillthrough', 'Expand',\n            'Collapse', 'Pdf Export', 'Excel Export', 'Csv Export', 'Sort Ascending', 'Sort Descending',\n            'Aggregate', 'CalculatedField'];\n    };\n    PivotView.prototype.buildDefaultItems = function (item) {\n        var menuItem;\n        switch (item) {\n            case 'Aggregate':\n                menuItem = {\n                    text: this.localeObj.getConstant('aggregate'), target: 'th.e-valuesheader,td.e-valuescontent,.e-stot.e-rowsheader',\n                    id: this.element.id + '_aggregate'\n                };\n                break;\n            case 'CalculatedField':\n                menuItem = {\n                    text: this.localeObj.getConstant('CalculatedField'), target: 'td.e-valuescontent',\n                    id: this.element.id + '_CalculatedField'\n                };\n                break;\n            case 'Drillthrough':\n                menuItem = {\n                    text: this.localeObj.getConstant('drillThrough'), target: 'td.e-valuescontent',\n                    id: this.element.id + '_drillthrough_menu', iconCss: _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.PIVOTVIEW_GRID + ' ' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.ICON\n                };\n                break;\n            case 'export':\n                menuItem = {\n                    text: this.localeObj.getConstant('export'), target: 'td.e-valuescontent',\n                    id: this.element.id + '_exporting', iconCss: _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.PIVOTVIEW_EXPORT + ' ' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.ICON\n                };\n                break;\n            case 'Pdf Export':\n                menuItem = {\n                    text: this.localeObj.getConstant('pdf'), id: this.element.id + '_pdf',\n                    iconCss: _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.GRID_PDF_EXPORT + ' ' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.ICON\n                };\n                break;\n            case 'Excel Export':\n                menuItem = {\n                    text: this.localeObj.getConstant('excel'), id: this.element.id + '_excel',\n                    iconCss: _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.GRID_EXCEL_EXPORT + ' ' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.ICON\n                };\n                break;\n            case 'Csv Export':\n                menuItem = {\n                    text: this.localeObj.getConstant('csv'), id: this.element.id + '_csv',\n                    iconCss: _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.GRID_CSV_EXPORT + ' ' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.ICON\n                };\n                break;\n            case 'Expand':\n                menuItem = {\n                    text: this.localeObj.getConstant('expand'), target: 'td.e-rowsheader,.e-columnsheader',\n                    id: this.element.id + '_expand', iconCss: _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.PIVOTVIEW_EXPAND + ' ' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.ICON\n                };\n                break;\n            case 'Collapse':\n                menuItem = {\n                    text: this.localeObj.getConstant('collapse'), target: 'td.e-rowsheader,.e-columnsheader',\n                    id: this.element.id + '_collapse', iconCss: _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.PIVOTVIEW_COLLAPSE + ' ' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.ICON\n                };\n                break;\n            case 'Sort Ascending':\n                menuItem = {\n                    text: this.localeObj.getConstant('ascending'), target: 'th.e-valuesheader,.e-stot',\n                    id: this.element.id + '_sortasc', iconCss: _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.ICON_ASC + ' ' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.ICON\n                };\n                break;\n            case 'Sort Descending':\n                menuItem = {\n                    text: this.localeObj.getConstant('descending'), target: 'th.e-valuesheader,.e-stot',\n                    id: this.element.id + '_sortdesc', iconCss: _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.ICON_DESC + ' ' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.ICON\n                };\n                break;\n            case 'Group':\n                menuItem = {\n                    text: this.localeObj.getConstant('group'), target: 'td.e-rowsheader,.e-columnsheader',\n                    id: this.element.id + '_custom_group', iconCss: _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.PIVOTVIEW_GROUP + ' ' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.ICON\n                };\n                break;\n            case 'Ungroup':\n                menuItem = {\n                    text: this.localeObj.getConstant('unGroup'), target: 'td.e-rowsheader,.e-columnsheader',\n                    id: this.element.id + '_custom_ungroup', iconCss: _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.PIVOTVIEW_UN_GROUP + ' ' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.ICON\n                };\n                break;\n        }\n        this.defaultItems[item] = {\n            text: menuItem.text, id: menuItem.id,\n            target: menuItem.target, iconCss: menuItem.iconCss\n        };\n        return this.defaultItems[item];\n    };\n    PivotView.prototype.initProperties = function () {\n        this.isTabular = this.gridSettings.layout === 'Tabular' ? true : false;\n        this.pivotRefresh = _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Component.prototype.refresh;\n        this.minHeight = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.minHeight) ? 300 : (this.minHeight < 10 ? 10 : this.minHeight);\n        this.isScrolling = false;\n        this.allowServerDataBinding = false;\n        this.isStaticRefresh = false;\n        this.setProperties({ pivotValues: [] }, true);\n        this.allowServerDataBinding = true;\n        this.scrollPosObject = {\n            vertical: 0, horizontal: 0, verticalSection: 0,\n            horizontalSection: 0, top: 0, left: 0, scrollDirection: { direction: '', position: 0 }\n        };\n        this.queryCellInfo = this.gridSettings.queryCellInfo ? this.gridSettings.queryCellInfo.bind(this) : undefined;\n        this.headerCellInfo = this.gridSettings.headerCellInfo ? this.gridSettings.headerCellInfo.bind(this) : undefined;\n        this.resizing = this.gridSettings.resizing ? this.gridSettings.resizing.bind(this) : undefined;\n        this.resizeStop = this.gridSettings.resizeStop ? this.gridSettings.resizeStop.bind(this) : undefined;\n        this.pdfHeaderQueryCellInfo = this.gridSettings.pdfHeaderQueryCellInfo ? this.gridSettings.pdfHeaderQueryCellInfo : undefined;\n        this.pdfQueryCellInfo = this.gridSettings.pdfQueryCellInfo ? this.gridSettings.pdfQueryCellInfo : undefined;\n        this.excelHeaderQueryCellInfo = this.gridSettings.excelHeaderQueryCellInfo ? this.gridSettings.excelHeaderQueryCellInfo : undefined;\n        this.excelQueryCellInfo = this.gridSettings.excelQueryCellInfo ? this.gridSettings.excelQueryCellInfo : undefined;\n        this.columnDragStart = this.gridSettings.columnDragStart ? this.gridSettings.columnDragStart.bind(this) : undefined;\n        this.columnDrag = this.gridSettings.columnDrag ? this.gridSettings.columnDrag.bind(this) : undefined;\n        this.columnDrop = this.gridSettings.columnDrop ? this.gridSettings.columnDrop.bind(this) : undefined;\n        this.beforeColumnsRender = this.gridSettings.columnRender ? this.gridSettings.columnRender : undefined;\n        this.selected = this.gridSettings.cellSelected ? this.gridSettings.cellSelected : undefined;\n        this.selecting = this.gridSettings.cellSelecting ? this.gridSettings.cellSelecting : undefined;\n        this.cellDeselected = this.gridSettings.cellDeselected ? this.gridSettings.cellDeselected : undefined;\n        this.rowSelected = this.gridSettings.rowSelected ? this.gridSettings.rowSelected : undefined;\n        this.rowDeselected = this.gridSettings.rowDeselected ? this.gridSettings.rowDeselected : undefined;\n        this.chartTooltipRender = this.chartSettings.tooltipRender ? this.chartSettings.tooltipRender : undefined;\n        this.chartLegendClick = this.chartSettings.legendClick ? this.chartSettings.legendClick : undefined;\n        this.chartLoaded = this.chartSettings.loaded ? this.chartSettings.loaded : undefined;\n        this.chartLoad = this.chartSettings.load ? this.chartSettings.load : undefined;\n        this.chartResized = this.chartSettings.resized ? this.chartSettings.resized : undefined;\n        this.chartAxisLabelRender = this.chartSettings.axisLabelRender ? this.chartSettings.axisLabelRender : undefined;\n        this.multiLevelLabelClick = this.chartSettings.multiLevelLabelClick ? this.chartSettings.multiLevelLabelClick : undefined;\n        this.chartPointClick = this.chartSettings.pointClick ? this.chartSettings.pointClick : undefined;\n        this.contextMenuClick = this.gridSettings.contextMenuClick ? this.gridSettings.contextMenuClick : undefined;\n        this.contextMenuOpen = this.gridSettings.contextMenuOpen ? this.gridSettings.contextMenuOpen : undefined;\n        this.beforePdfExport = this.gridSettings.beforePdfExport ? this.gridSettings.beforePdfExport.bind(this) : undefined;\n        this.beforeExcelExport = this.gridSettings.beforeExcelExport ? this.gridSettings.beforeExcelExport.bind(this) : undefined;\n        this.beforePrint = this.chartSettings.beforePrint ? this.chartSettings.beforePrint : undefined;\n        this.animationComplete = this.chartSettings.animationComplete ? this.chartSettings.animationComplete : undefined;\n        this.legendRender = this.chartSettings.legendRender ? this.chartSettings.legendRender : undefined;\n        this.textRender = this.chartSettings.textRender ? this.chartSettings.textRender : undefined;\n        this.pointRender = this.chartSettings.pointRender ? this.chartSettings.pointRender : undefined;\n        this.seriesRender = this.chartSettings.seriesRender ? this.chartSettings.seriesRender : undefined;\n        this.chartMouseMove = this.chartSettings.chartMouseMove ? this.chartSettings.chartMouseMove : undefined;\n        this.chartMouseClick = this.chartSettings.chartMouseClick ? this.chartSettings.chartMouseClick : undefined;\n        this.pointMove = this.chartSettings.pointMove ? this.chartSettings.pointMove : undefined;\n        this.chartMouseLeave = this.chartSettings.chartMouseLeave ? this.chartSettings.chartMouseLeave : undefined;\n        this.chartMouseDown = this.chartSettings.chartMouseDown ? this.chartSettings.chartMouseDown : undefined;\n        this.chartMouseUp = this.chartSettings.chartMouseUp ? this.chartSettings.chartMouseUp : undefined;\n        this.dragComplete = this.chartSettings.dragComplete ? this.chartSettings.dragComplete : undefined;\n        this.zoomComplete = this.chartSettings.zoomComplete ? this.chartSettings.zoomComplete : undefined;\n        this.scrollStart = this.chartSettings.scrollStart ? this.chartSettings.scrollStart : undefined;\n        this.scrollEnd = this.chartSettings.scrollEnd ? this.chartSettings.scrollEnd : undefined;\n        this.scrollChanged = this.chartSettings.scrollChanged ? this.chartSettings.scrollChanged : undefined;\n        this.multiLevelLabelRender = this.chartSettings.multiLevelLabelRender ? this.chartSettings.multiLevelLabelRender : undefined;\n        if (this.gridSettings.rowHeight === null) {\n            if (this.isTouchMode) {\n                this.setProperties({ gridSettings: { rowHeight: 36 } }, true);\n            }\n            else {\n                this.setProperties({ gridSettings: { rowHeight: this.isAdaptive ? 36 : 30 } }, true);\n            }\n        }\n        if (this.chartSettings && this.chartSettings.showMemberSeries && !this.chartSettings.showPointColorByMembers) {\n            this.setProperties({ chartSettings: { showPointColorByMembers: true } }, true);\n        }\n        this.element.style.height = '100%';\n        if (this.enableVirtualization) {\n            this.updatePageSettings(true);\n        }\n        this.isCellBoxMultiSelection = this.gridSettings.allowSelection &&\n            this.gridSettings.selectionSettings.cellSelectionMode === 'Box' &&\n            this.gridSettings.selectionSettings.mode === 'Cell' && this.gridSettings.selectionSettings.type === 'Multiple';\n        if (this.allowGrouping && !this.isCellBoxMultiSelection) {\n            this.isCellBoxMultiSelection = true;\n            this.setProperties({ gridSettings: { allowSelection: true, selectionSettings: { cellSelectionMode: 'Box', mode: 'Cell', type: 'Multiple' } } }, true);\n        }\n        if (this.displayOption.view !== 'Table') {\n            this.pivotChartModule = new _pivotchart_index__WEBPACK_IMPORTED_MODULE_16__.PivotChart(this);\n        }\n        this.currentView = this.currentView ? this.currentView : (this.displayOption.view === 'Both' ?\n            this.displayOption.primary : this.displayOption.view);\n    };\n    /**\n     *\n     * @hidden\n     *\n     */\n    PivotView.prototype.updatePageSettings = function (isInit) {\n        if (this.enableVirtualization) {\n            var colValues = 1;\n            var rowValues = 1;\n            if (this.dataSourceSettings.values.length > 1 && this.dataType === 'pivot') {\n                if (this.dataSourceSettings.valueAxis === 'row') {\n                    rowValues = this.dataSourceSettings.values.length;\n                }\n                else {\n                    colValues = this.dataSourceSettings.values.length;\n                }\n            }\n            var heightAsNumber = this.getHeightAsNumber();\n            if (isNaN(heightAsNumber)) {\n                heightAsNumber = this.element.offsetHeight;\n            }\n            this.pageSettings = {\n                currentColumnPage: isInit ? 1 : this.pageSettings.currentColumnPage,\n                currentRowPage: isInit ? 1 : this.pageSettings.currentRowPage,\n                columnPageSize: Math.ceil((Math.floor((this.getWidthAsNumber()) /\n                    this.gridSettings.columnWidth) - 1) / colValues),\n                rowPageSize: Math.ceil(Math.floor((heightAsNumber) / this.gridSettings.rowHeight) / rowValues)\n            };\n        }\n    };\n    /**\n     * Initialize the control rendering\n     *\n     * @returns {void}\n     * @hidden\n     */\n    PivotView.prototype.render = function () {\n        this.loadData();\n    };\n    PivotView.prototype.loadData = function () {\n        if (this.dataSourceSettings.formatSettings.length > 0) {\n            var formatfield = this.dataSourceSettings.formatSettings;\n            for (var i = 0; i < formatfield.length; i++) {\n                if ((!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(formatfield[i].maximumFractionDigits) || !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(formatfield[i].minimumFractionDigits)) && formatfield[i].format.match(/^(P|N|C|P[0-9]|C[0-9]|N[0-9])$/g) === null) {\n                    formatfield[i].maximumFractionDigits = undefined;\n                    formatfield[i].minimumIntegerDigits = undefined;\n                }\n            }\n        }\n        if (this.dataType === 'pivot' && this.dataSourceSettings.url && this.dataSourceSettings.url !== '') {\n            if (this.dataSourceSettings.mode === 'Server') {\n                this.guid = _base_util__WEBPACK_IMPORTED_MODULE_15__.PivotUtil.generateUUID();\n                this.initialLoad();\n                if (this.displayOption.view !== 'Chart') {\n                    this.renderEmptyGrid();\n                }\n                else {\n                    this.refreshData();\n                }\n                this.showWaitingPopup();\n            }\n            else {\n                var request = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Fetch(this.dataSourceSettings.url, 'GET');\n                request.send().then(function (response) { return typeof (response) === 'string' ? response : response.text(); })\n                    .then(this.onReadyStateChange.bind(this));\n            }\n        }\n        else {\n            this.initialLoad();\n        }\n    };\n    PivotView.prototype.onSuccess = function (excelExportProperties) {\n        if (this.request.readyState === XMLHttpRequest.DONE) {\n            if (this.currentAction === 'onExcelExport' || this.currentAction === 'onCsvExport') {\n                if (this.request.status === 200) {\n                    var buffer = this.request.response;\n                    var fileName = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(excelExportProperties.fileName) ? (this.currentAction === 'onExcelExport' ? 'default.xlsx' : 'default.csv') : excelExportProperties.fileName;\n                    _syncfusion_ej2_file_utils__WEBPACK_IMPORTED_MODULE_22__.Save.save(fileName, buffer);\n                }\n            }\n            else {\n                this.isServerWaitingPopup = true;\n                try {\n                    var params = {\n                        action: this.currentAction,\n                        response: this.request.responseText\n                    };\n                    this.trigger(_common_base_constant__WEBPACK_IMPORTED_MODULE_3__.afterServiceInvoke, params);\n                    var engine = JSON.parse(this.request.responseText);\n                    if (this.currentAction === 'fetchFieldMembers') {\n                        var currentMembers = JSON.parse(engine.members);\n                        var dateMembers = [];\n                        var members = {};\n                        var isDateField = _base_util__WEBPACK_IMPORTED_MODULE_15__.PivotUtil.isDateField(engine.memberName, this.engineModule);\n                        var isNumberType = this.engineModule.fieldList[engine.memberName].type === 'number';\n                        var keys = Object.keys(currentMembers);\n                        for (var i = 0, j = keys.length; i < j; i++) {\n                            var values = currentMembers[keys[i]];\n                            var formattedValue = isDateField ?\n                                this.engineModule.getFormattedValue(values.Name, engine.memberName) :\n                                { formattedText: values.Caption };\n                            members[keys[i]] = {\n                                index: values.Index, ordinal: values.Ordinal,\n                                isDrilled: values.IsDrilled, caption: formattedValue.formattedText\n                            };\n                            dateMembers.push({\n                                formattedText: formattedValue.formattedText,\n                                actualText: isDateField ? formattedValue.actualText : isNumberType ?\n                                    (!isNaN(Number(values.Name)) ? Number(values.Name) : values.Name) : values.Name\n                            });\n                        }\n                        this.engineModule.fieldList[engine.memberName].members = members;\n                        this.engineModule.fieldList[engine.memberName].dateMember = dateMembers;\n                        if (this.showGroupingBar) {\n                            this.pivotButtonModule.updateFilterEvents();\n                        }\n                        else {\n                            this.pivotFieldListModule.pivotButtonModule.updateFilterEvents();\n                        }\n                    }\n                    else if (this.currentAction === 'fetchRawData') {\n                        var valueCaption = this.engineModule.fieldList[this.drillThroughValue.actualText.toString()]\n                            ? this.engineModule.fieldList[this.drillThroughValue.actualText.toString()].caption\n                            : this.drillThroughValue.actualText.toString();\n                        var aggType = this.engineModule.fieldList[this.drillThroughValue.actualText] ? this.engineModule.fieldList[this.drillThroughValue.actualText].aggregateType : '';\n                        var rawData = JSON.parse(engine.rawData);\n                        var parsedObj = JSON.parse(engine.indexObject);\n                        var indexObject = {};\n                        for (var len = 0; len < parsedObj.length; len++) {\n                            indexObject[parsedObj[len].Key] = parsedObj[len].Value;\n                        }\n                        this.drillThroughValue.indexObject = indexObject;\n                        this.drillThroughModule.triggerDialog(valueCaption, aggType, rawData, this.drillThroughValue, this.drillThroughElement);\n                        this.hideWaitingPopup();\n                    }\n                    else {\n                        var fList = _base_util__WEBPACK_IMPORTED_MODULE_15__.PivotUtil.formatFieldList(JSON.parse(engine.fieldList));\n                        if (this.engineModule.fieldList) {\n                            var keys = Object.keys(this.engineModule.fieldList);\n                            for (var i = 0; i < keys.length; i++) {\n                                if (this.engineModule.fieldList[keys[i]] && fList[keys[i]]) {\n                                    fList[keys[i]].dateMember = this.engineModule.fieldList[keys[i]].dateMember;\n                                    fList[keys[i]].formattedMembers =\n                                        this.engineModule.fieldList[keys[i]].formattedMembers;\n                                    fList[keys[i]].members = this.engineModule.fieldList[keys[i]].members;\n                                }\n                            }\n                        }\n                        this.engineModule.fieldList = fList;\n                        this.engineModule.fields = JSON.parse(engine.fields);\n                        this.engineModule.rowCount = JSON.parse(engine.pivotCount).RowCount;\n                        this.engineModule.columnCount = JSON.parse(engine.pivotCount).ColumnCount;\n                        this.engineModule.rowStartPos = JSON.parse(engine.pivotCount).RowStartPosition;\n                        this.engineModule.colStartPos = JSON.parse(engine.pivotCount).ColumnStartPosition;\n                        this.engineModule.rowFirstLvl = JSON.parse(engine.pivotCount).RowFirstLevel;\n                        this.engineModule.colFirstLvl = JSON.parse(engine.pivotCount).ColumnFirstLevel;\n                        this.engineModule.columnPageCount = JSON.parse(engine.pivotCount).ColumnPageCount;\n                        this.engineModule.rowPageCount = JSON.parse(engine.pivotCount).RowPageCount;\n                        var rowPos = void 0;\n                        var pivotValues = _base_util__WEBPACK_IMPORTED_MODULE_15__.PivotUtil.formatPivotValues(JSON.parse(engine.pivotValue));\n                        for (var rCnt = 0; rCnt < pivotValues.length; rCnt++) {\n                            if (pivotValues[rCnt] && pivotValues[rCnt][0] && pivotValues[rCnt][0].axis === 'row') {\n                                rowPos = rCnt;\n                                break;\n                            }\n                        }\n                        this.engineModule.headerContent = _base_util__WEBPACK_IMPORTED_MODULE_15__.PivotUtil.frameContent(pivotValues, 'header', rowPos, this);\n                        this.engineModule.pageSettings = this.pageSettings;\n                        if (this.dataSourceSettings.groupSettings.length > 0) {\n                            _base_util__WEBPACK_IMPORTED_MODULE_15__.PivotUtil.updateReport(this, JSON.parse(engine.dataSourceSettings));\n                        }\n                        var valueSort = JSON.parse(engine.dataSourceSettings).ValueSortSettings;\n                        this.engineModule.valueSortSettings = {\n                            headerText: valueSort.HeaderText,\n                            headerDelimiter: valueSort.HeaderDelimiter,\n                            sortOrder: valueSort.SortOrder,\n                            columnIndex: valueSort.ColumnIndex\n                        };\n                        this.engineModule.pivotValues = pivotValues;\n                        this.engineModule.isEmptyData = engine.isEmptyData;\n                        this.engineModule.isEngineUpdated = engine.isEngineUpdated;\n                        for (var _i = 0, _a = this.dataSourceSettings.values; _i < _a.length; _i++) {\n                            var value = _a[_i];\n                            this.engineModule.valueAxisFields[value.name] = value;\n                        }\n                        this.engineModule.globalize = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.globalize) ? this.globalize : new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Internationalization();\n                        this.engineModule.formatFields = this.engineModule.setFormattedFields(this.dataSourceSettings.formatSettings);\n                    }\n                }\n                catch (error) {\n                    this.engineModule.pivotValues = [];\n                }\n                if (this.currentAction === 'onScroll') {\n                    if (this.scrollDirection === 'vertical') {\n                        var rowValues = this.dataSourceSettings.valueAxis === 'row' ? this.dataSourceSettings.values.length : 1;\n                        var exactSize = (this.pageSettings.rowPageSize * rowValues * this.gridSettings.rowHeight);\n                        var exactPage = Math.ceil(this.engineModule.rowStartPos / (this.pageSettings.rowPageSize * rowValues));\n                        var pos = exactSize * exactPage -\n                            (this.engineModule.rowFirstLvl * rowValues * this.gridSettings.rowHeight);\n                        this.scrollPosObject.verticalSection = pos;\n                    }\n                    else if (this.scrollDirection === 'horizondal') {\n                        var colValues = this.dataSourceSettings.valueAxis === 'column' ? this.dataSourceSettings.values.length : 1;\n                        var exactSize = (this.pageSettings.columnPageSize * colValues * this.gridSettings.columnWidth);\n                        var exactPage = Math.ceil(this.engineModule.colStartPos / (this.pageSettings.columnPageSize * colValues));\n                        var pos = exactSize * exactPage -\n                            (this.engineModule.colFirstLvl * colValues * this.gridSettings.columnWidth);\n                        this.scrollPosObject.horizontalSection = pos;\n                    }\n                }\n                if (this.currentAction !== 'fetchFieldMembers' && this.currentAction !== 'fetchRawData') {\n                    this.initEngine();\n                    if (this.calculatedFieldModule && this.calculatedFieldModule.isRequireUpdate) {\n                        this.calculatedFieldModule.endDialog();\n                        this.calculatedFieldModule.isRequireUpdate = false;\n                    }\n                    if (this.pivotFieldListModule && this.pivotFieldListModule.calculatedFieldModule &&\n                        this.pivotFieldListModule.calculatedFieldModule.isRequireUpdate) {\n                        this.pivotFieldListModule.calculatedFieldModule.endDialog();\n                        this.pivotFieldListModule.calculatedFieldModule.isRequireUpdate = false;\n                    }\n                }\n            }\n        }\n    };\n    /** @hidden */\n    PivotView.prototype.getEngine = function (action, drillItem, sortItem, aggField, cField, filterItem, memberName, rawDataArgs, editArgs, excelExportProperties) {\n        var _this_1 = this;\n        this.engineModule.isEmptyData = false;\n        if (this.element.querySelector('.e-spin-hide') && !(action === 'onExcelExport' || action === 'onCsvExport')) {\n            this.showWaitingPopup();\n        }\n        this.currentAction = action;\n        this.isServerWaitingPopup = false;\n        var customProperties = {\n            pageSettings: JSON.parse(this.getPageSettings()).pageSettings,\n            enableValueSorting: this.enableValueSorting,\n            enablePaging: this.enablePaging,\n            enableVirtualization: this.enableVirtualization,\n            allowDataCompression: this.allowDataCompression,\n            enableDrillThrough: (this.allowDrillThrough || this.editSettings.allowEditing),\n            locale: JSON.stringify(_base_util__WEBPACK_IMPORTED_MODULE_15__.PivotUtil.getLocalizedObject(this)),\n            savedFieldList: (action === 'onDrop' && this.engineModule.fieldList !== null) ?\n                _base_util__WEBPACK_IMPORTED_MODULE_15__.PivotUtil.getClonedFieldList(this.engineModule.fieldList, true) : undefined,\n            enableOptimizedRendering: this.enableVirtualization && this.virtualScrollSettings &&\n                this.virtualScrollSettings.allowSinglePage,\n            requestType: 'string',\n            headers: { 'Content-type': 'application/json' }\n        };\n        if (this.request.readyState === XMLHttpRequest.UNSENT || this.request.readyState === XMLHttpRequest.OPENED) {\n            this.request.withCredentials = false;\n        }\n        var params = {\n            request: this.request,\n            dataSourceSettings: JSON.parse(this.getPersistData()).dataSourceSettings,\n            action: action,\n            customProperties: {},\n            internalProperties: customProperties,\n            drillItem: drillItem,\n            sortItem: sortItem,\n            aggregatedItem: aggField,\n            calculatedItem: cField,\n            filterItem: filterItem,\n            memberName: memberName,\n            fetchRawDataArgs: rawDataArgs,\n            editArgs: editArgs,\n            hash: this.guid,\n            excelExportProperties: excelExportProperties,\n            exportAllPages: this.exportAllPages,\n            isGroupingUpdated: (this.currentAction === 'onRefresh' && this.dataSourceSettings.groupSettings.length > 0) ? true : (this.groupingModule ? this.groupingModule.isUpdate : false)\n        };\n        this.trigger(_common_base_constant__WEBPACK_IMPORTED_MODULE_3__.beforeServiceInvoke, params, function (observedArgs) {\n            _this_1.request = observedArgs.request;\n            params.internalProperties = observedArgs.internalProperties;\n            params.customProperties = observedArgs.customProperties;\n            params.dataSourceSettings = observedArgs.dataSourceSettings;\n            params.calculatedItem = observedArgs.calculatedItem;\n            params.drillItem = observedArgs.drillItem;\n            params.editArgs = observedArgs.editArgs;\n            params.fetchRawDataArgs = observedArgs.fetchRawDataArgs;\n            params.filterItem = observedArgs.filterItem;\n            params.hash = observedArgs.hash;\n            params.memberName = observedArgs.memberName;\n            params.sortItem = observedArgs.sortItem;\n            params.excelExportProperties = observedArgs.excelExportProperties;\n            params.exportAllPages = observedArgs.exportAllPages;\n        });\n        this.request.open('POST', this.dataSourceSettings.url, true);\n        this.request.onreadystatechange = this.onSuccess.bind(this, params.excelExportProperties);\n        if (params.action === 'onExcelExport' || params.action === 'onCsvExport') {\n            this.request.responseType = 'blob';\n        }\n        else {\n            this.request.responseType = '';\n        }\n        var keys = Object.keys(params.internalProperties.headers);\n        for (var i = 0; i < keys.length; i++) {\n            var headerKey = keys[i];\n            var headerValue = String(params.internalProperties.headers[headerKey]);\n            this.request.setRequestHeader(headerKey, headerValue);\n        }\n        if (params.internalProperties.requestType === 'string') {\n            this.request.send(JSON.stringify(params));\n        }\n        else if (params.internalProperties.requestType === 'base64') {\n            this.request.send(btoa(JSON.stringify(params)));\n        }\n    };\n    /**\n     * It returns chart settings.\n     *\n     * @returns {string} - string.\n     * @hidden\n     */\n    PivotView.prototype.getChartSettings = function () {\n        var keyEntity = ['chartSettings'];\n        var chartLoadEvent = this.chartSettings['load'];\n        var chartLoadedEvent = this.chartSettings['loaded'];\n        var chartTextRenderEvent = this.chartSettings['textRender'];\n        var chartPointRenderEvent = this.chartSettings['pointRender'];\n        var chartSeriesRenderEvent = this.chartSettings['seriesRender'];\n        var chartLegendRenderEvent = this.chartSettings['legendRender'];\n        var chartPointClickEvent = this.chartSettings['pointClick'];\n        var chartTooltipRenderEvent = this.chartSettings['tooltipRender'];\n        var chartLegendClickEvent = this.chartSettings['legendClick'];\n        var chartMultiLevelLabelRenderEvent = this.chartSettings['multiLevelLabelRender'];\n        var chartBeforePrintEvent = this.chartSettings['beforePrint'];\n        var chartAnimationCompleteEvent = this.chartSettings['animationComplete'];\n        var chartMouseMoveEvent = this.chartSettings['chartMouseMove'];\n        var chartMouseClickEvent = this.chartSettings['chartMouseClick'];\n        var chartPointMoveEvent = this.chartSettings['pointMove'];\n        var chartMouseLeaveEvent = this.chartSettings['chartMouseLeave'];\n        var chartMouseDownEvent = this.chartSettings['chartMouseDown'];\n        var chartMouseUpEvent = this.chartSettings['chartMouseUp'];\n        var chartDragCompleteEvent = this.chartSettings['dragComplete'];\n        var chartZoomCompleteEvent = this.chartSettings['zoomComplete'];\n        var chartScrollStartEvent = this.chartSettings['scrollStart'];\n        var chartScrollEndEvent = this.chartSettings['scrollEnd'];\n        var chartScrollChangedEvent = this.chartSettings['scrollChanged'];\n        this.chartSettings['load'] = undefined;\n        this.chartSettings['loaded'] = undefined;\n        this.chartSettings['textRender'] = undefined;\n        this.chartSettings['pointRender'] = undefined;\n        this.chartSettings['seriesRender'] = undefined;\n        this.chartSettings['legendRender'] = undefined;\n        this.chartSettings['pointClick'] = undefined;\n        this.chartSettings['tooltipRender'] = undefined;\n        this.chartSettings['legendClick'] = undefined;\n        this.chartSettings['multiLevelLabelRender'] = undefined;\n        this.chartSettings['beforePrint'] = undefined;\n        this.chartSettings['animationComplete'] = undefined;\n        this.chartSettings['chartMouseMove'] = undefined;\n        this.chartSettings['chartMouseClick'] = undefined;\n        this.chartSettings['pointMove'] = undefined;\n        this.chartSettings['chartMouseLeave'] = undefined;\n        this.chartSettings['chartMouseDown'] = undefined;\n        this.chartSettings['chartMouseUp'] = undefined;\n        this.chartSettings['dragComplete'] = undefined;\n        this.chartSettings['zoomComplete'] = undefined;\n        this.chartSettings['scrollStart'] = undefined;\n        this.chartSettings['scrollEnd'] = undefined;\n        this.chartSettings['scrollChanged'] = undefined;\n        var persistData = this.addOnPersist(keyEntity);\n        this.chartSettings['load'] = chartLoadEvent;\n        this.chartSettings['loaded'] = chartLoadedEvent;\n        this.chartSettings['textRender'] = chartTextRenderEvent;\n        this.chartSettings['pointRender'] = chartPointRenderEvent;\n        this.chartSettings['seriesRender'] = chartSeriesRenderEvent;\n        this.chartSettings['legendRender'] = chartLegendRenderEvent;\n        this.chartSettings['pointClick'] = chartPointClickEvent;\n        this.chartSettings['tooltipRender'] = chartTooltipRenderEvent;\n        this.chartSettings['legendClick'] = chartLegendClickEvent;\n        this.chartSettings['multiLevelLabelRender'] = chartMultiLevelLabelRenderEvent;\n        this.chartSettings['beforePrint'] = chartBeforePrintEvent;\n        this.chartSettings['animationComplete'] = chartAnimationCompleteEvent;\n        this.chartSettings['chartMouseMove'] = chartMouseMoveEvent;\n        this.chartSettings['chartMouseClick'] = chartMouseClickEvent;\n        this.chartSettings['pointMove'] = chartPointMoveEvent;\n        this.chartSettings['chartMouseLeave'] = chartMouseLeaveEvent;\n        this.chartSettings['chartMouseDown'] = chartMouseDownEvent;\n        this.chartSettings['chartMouseUp'] = chartMouseUpEvent;\n        this.chartSettings['dragComplete'] = chartDragCompleteEvent;\n        this.chartSettings['zoomComplete'] = chartZoomCompleteEvent;\n        this.chartSettings['scrollStart'] = chartScrollStartEvent;\n        this.chartSettings['scrollEnd'] = chartScrollEndEvent;\n        this.chartSettings['scrollChanged'] = chartScrollChangedEvent;\n        return persistData;\n    };\n    /**\n     * It returns page settings.\n     *\n     * @returns {string} - string.\n     * @hidden\n     */\n    PivotView.prototype.getPageSettings = function () {\n        var keyEntity = ['pageSettings'];\n        var persistData = this.addOnPersist(keyEntity);\n        return persistData;\n    };\n    PivotView.prototype.onReadyStateChange = function (result) {\n        var dataSource = [];\n        if (this.dataSourceSettings.type === 'CSV') {\n            var jsonObject = result.split(/\\r?\\n|\\r/);\n            // (dataSource as string[][]).push(jsonObject[0].split(',').map(function (e) { return e.replace(/ /g, '').replace(/^\\\"(.+)\\\"$/, \"$1\"); }));\n            for (var i = 0; i < jsonObject.length; i++) {\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(jsonObject[i]) && jsonObject[i] !== '') {\n                    dataSource.push(jsonObject[i].split(','));\n                }\n            }\n        }\n        else {\n            try {\n                dataSource = JSON.parse(result);\n            }\n            catch (error) {\n                dataSource = [];\n            }\n        }\n        if (dataSource && dataSource.length > 0) {\n            this.setProperties({ dataSourceSettings: { dataSource: dataSource } }, true);\n        }\n        this.initialLoad();\n    };\n    PivotView.prototype.initialLoad = function () {\n        var _this_1 = this;\n        try {\n            this.cellTemplateFn = this.templateParser(this.cellTemplate);\n            this.tooltipTemplateFn = this.templateParser(this.tooltipTemplate);\n            if (this.spinnerTemplate) {\n                (0,_syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_2__.createSpinner)({ target: this.element, template: this.spinnerTemplate, cssClass: this.cssClass\n                        ? this.cssClass : undefined }, this.createElement);\n            }\n            else {\n                (0,_syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_2__.createSpinner)({ target: this.element, cssClass: this.cssClass ? this.cssClass : undefined }, this.createElement);\n            }\n            var loadArgs_1 = {\n                dataSourceSettings: this.dataSourceSettings,\n                pivotview: this,\n                fieldsType: {},\n                defaultFieldListOrder: this.defaultFieldListOrder\n            };\n            this.trigger(_common_base_constant__WEBPACK_IMPORTED_MODULE_3__.load, loadArgs_1, function (observedArgs) {\n                _this_1.dataSourceSettings = observedArgs.dataSourceSettings;\n                _this_1.fieldsType = observedArgs.fieldsType;\n                _this_1.defaultFieldListOrder = loadArgs_1.defaultFieldListOrder;\n                _this_1.updateClass();\n                _this_1.notify(_common_base_constant__WEBPACK_IMPORTED_MODULE_3__.initSubComponent, {});\n                _this_1.notify(_common_base_constant__WEBPACK_IMPORTED_MODULE_3__.initialLoad, {});\n                if (_this_1.isAdaptive) {\n                    _this_1.contextMenuModule.render();\n                }\n                _this_1.notify(_common_base_constant__WEBPACK_IMPORTED_MODULE_3__.initToolbar, {});\n                _this_1.notify(_common_base_constant__WEBPACK_IMPORTED_MODULE_3__.initPivotPager, {});\n            });\n        }\n        catch (execption) {\n            this.actionFailureMethod(execption);\n        }\n    };\n    /**\n     * Register the internal events.\n     *\n     * @returns {void}\n     * @hidden\n     */\n    PivotView.prototype.addInternalEvents = function () {\n        this.on(_common_base_constant__WEBPACK_IMPORTED_MODULE_3__.initialLoad, this.generateData, this);\n        this.on(_common_base_constant__WEBPACK_IMPORTED_MODULE_3__.dataReady, this.renderPivotGrid, this);\n        this.on(_common_base_constant__WEBPACK_IMPORTED_MODULE_3__.contentReady, this.onContentReady, this);\n    };\n    /**\n     * De-Register the internal events.\n     *\n     * @returns {void}\n     * @hidden\n     */\n    PivotView.prototype.removeInternalEvents = function () {\n        this.off(_common_base_constant__WEBPACK_IMPORTED_MODULE_3__.initialLoad, this.generateData);\n        this.off(_common_base_constant__WEBPACK_IMPORTED_MODULE_3__.dataReady, this.renderPivotGrid);\n        this.off(_common_base_constant__WEBPACK_IMPORTED_MODULE_3__.contentReady, this.onContentReady);\n    };\n    /**\n     * Get the Pivot widget properties to be maintained in the persisted state.\n     *\n     * @returns {string} - string.\n     */\n    PivotView.prototype.getPersistData = function (isRemoveDatasource) {\n        var keyEntity = ['dataSourceSettings', 'pivotValues', 'gridSettings', 'chartSettings', 'displayOption', 'pageSettings'];\n        var columnRender = this.gridSettings['columnRender'];\n        var excelQueryCellInfo = this.gridSettings['excelQueryCellInfo'];\n        var excelHeaderQueryCellInfo = this.gridSettings['excelHeaderQueryCellInfo'];\n        var pdfQueryCellInfo = this.gridSettings['pdfQueryCellInfo'];\n        var pdfHeaderQueryCellInfo = this.gridSettings['pdfHeaderQueryCellInfo'];\n        var chartLoadEvent = this.chartSettings['load'];\n        var chartLoadedEvent = this.chartSettings['loaded'];\n        var chartTextRenderEvent = this.chartSettings['textRender'];\n        var chartPointRenderEvent = this.chartSettings['pointRender'];\n        var chartSeriesRenderEvent = this.chartSettings['seriesRender'];\n        var chartLegendRenderEvent = this.chartSettings['legendRender'];\n        var chartPointClickEvent = this.chartSettings['pointClick'];\n        var chartTooltipRenderEvent = this.chartSettings['tooltipRender'];\n        var chartLegendClickEvent = this.chartSettings['legendClick'];\n        var chartMultiLevelLabelRenderEvent = this.chartSettings['multiLevelLabelRender'];\n        var chartBeforePrintEvent = this.chartSettings['beforePrint'];\n        var chartAnimationCompleteEvent = this.chartSettings['animationComplete'];\n        var chartMouseMoveEvent = this.chartSettings['chartMouseMove'];\n        var chartMouseClickEvent = this.chartSettings['chartMouseClick'];\n        var chartPointMoveEvent = this.chartSettings['pointMove'];\n        var chartMouseLeaveEvent = this.chartSettings['chartMouseLeave'];\n        var chartMouseDownEvent = this.chartSettings['chartMouseDown'];\n        var chartMouseUpEvent = this.chartSettings['chartMouseUp'];\n        var chartDragCompleteEvent = this.chartSettings['dragComplete'];\n        var chartZoomCompleteEvent = this.chartSettings['zoomComplete'];\n        var chartScrollStartEvent = this.chartSettings['scrollStart'];\n        var chartScrollEndEvent = this.chartSettings['scrollEnd'];\n        var chartScrollChangedEvent = this.chartSettings['scrollChanged'];\n        this.gridSettings['columnRender'] = undefined;\n        this.gridSettings['excelQueryCellInfo'] = undefined;\n        this.gridSettings['excelHeaderQueryCellInfo'] = undefined;\n        this.gridSettings['pdfQueryCellInfo'] = undefined;\n        this.gridSettings['pdfHeaderQueryCellInfo'] = undefined;\n        this.chartSettings['tooltipRender'] = undefined;\n        this.chartSettings['legendClick'] = undefined;\n        this.chartSettings['multiLevelLabelRender'] = undefined;\n        this.chartSettings['load'] = undefined;\n        this.chartSettings['loaded'] = undefined;\n        this.chartSettings['textRender'] = undefined;\n        this.chartSettings['pointRender'] = undefined;\n        this.chartSettings['seriesRender'] = undefined;\n        this.chartSettings['legendRender'] = undefined;\n        this.chartSettings['pointClick'] = undefined;\n        this.chartSettings['beforePrint'] = undefined;\n        this.chartSettings['animationComplete'] = undefined;\n        this.chartSettings['chartMouseMove'] = undefined;\n        this.chartSettings['chartMouseClick'] = undefined;\n        this.chartSettings['pointMove'] = undefined;\n        this.chartSettings['chartMouseLeave'] = undefined;\n        this.chartSettings['chartMouseDown'] = undefined;\n        this.chartSettings['chartMouseUp'] = undefined;\n        this.chartSettings['dragComplete'] = undefined;\n        this.chartSettings['zoomComplete'] = undefined;\n        this.chartSettings['scrollStart'] = undefined;\n        this.chartSettings['scrollEnd'] = undefined;\n        this.chartSettings['scrollChanged'] = undefined;\n        var dataSource = [];\n        if (isRemoveDatasource) {\n            dataSource = (this.dataSourceSettings.dataSource && !(this.dataSourceSettings.dataSource instanceof _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_12__.DataManager)) ? this.dataSourceSettings.dataSource.slice() : this.dataSourceSettings.dataSource;\n            this.setProperties({ dataSourceSettings: { dataSource: [] } }, true);\n        }\n        var persistData = this.addOnPersist(keyEntity);\n        this.gridSettings['columnRender'] = columnRender;\n        this.gridSettings['excelQueryCellInfo'] = excelQueryCellInfo;\n        this.gridSettings['excelHeaderQueryCellInfo'] = excelHeaderQueryCellInfo;\n        this.gridSettings['pdfQueryCellInfo'] = pdfQueryCellInfo;\n        this.gridSettings['pdfHeaderQueryCellInfo'] = pdfHeaderQueryCellInfo;\n        this.chartSettings['load'] = chartLoadEvent;\n        this.chartSettings['loaded'] = chartLoadedEvent;\n        this.chartSettings['textRender'] = chartTextRenderEvent;\n        this.chartSettings['pointRender'] = chartPointRenderEvent;\n        this.chartSettings['seriesRender'] = chartSeriesRenderEvent;\n        this.chartSettings['legendRender'] = chartLegendRenderEvent;\n        this.chartSettings['pointClick'] = chartPointClickEvent;\n        this.chartSettings['tooltipRender'] = chartTooltipRenderEvent;\n        this.chartSettings['legendClick'] = chartLegendClickEvent;\n        this.chartSettings['multiLevelLabelRender'] = chartMultiLevelLabelRenderEvent;\n        this.chartSettings['beforePrint'] = chartBeforePrintEvent;\n        this.chartSettings['animationComplete'] = chartAnimationCompleteEvent;\n        this.chartSettings['chartMouseMove'] = chartMouseMoveEvent;\n        this.chartSettings['chartMouseClick'] = chartMouseClickEvent;\n        this.chartSettings['pointMove'] = chartPointMoveEvent;\n        this.chartSettings['chartMouseLeave'] = chartMouseLeaveEvent;\n        this.chartSettings['chartMouseDown'] = chartMouseDownEvent;\n        this.chartSettings['chartMouseUp'] = chartMouseUpEvent;\n        this.chartSettings['dragComplete'] = chartDragCompleteEvent;\n        this.chartSettings['zoomComplete'] = chartZoomCompleteEvent;\n        this.chartSettings['scrollStart'] = chartScrollStartEvent;\n        this.chartSettings['scrollEnd'] = chartScrollEndEvent;\n        this.chartSettings['scrollChanged'] = chartScrollChangedEvent;\n        if (isRemoveDatasource) {\n            this.setProperties({ dataSourceSettings: { dataSource: dataSource } }, true);\n        }\n        return persistData;\n    };\n    /**\n     * Loads pivot Layout\n     *\n     * @param {string} persistData - Specifies the persist data to be loaded to pivot.\n     * @returns {void}\n     */\n    PivotView.prototype.loadPersistData = function (persistData) {\n        var pivotData = JSON.parse(persistData);\n        this.allowServerDataBinding = false;\n        this.setProperties({\n            gridSettings: pivotData.gridSettings,\n            pivotValues: pivotData.pivotValues,\n            chartSettings: pivotData.chartSettings,\n            displayOption: pivotData.displayOption\n        }, true);\n        if (pivotData.displayOption.primary === 'Chart') {\n            this.currentView = 'Chart';\n        }\n        else {\n            this.currentView = 'Table';\n        }\n        this.allowServerDataBinding = true;\n        if (this.dataSourceSettings && this.dataSourceSettings.dataSource && this.dataSourceSettings.dataSource instanceof _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_12__.DataManager\n            && pivotData.dataSourceSettings && pivotData.dataSourceSettings.dataSource &&\n            pivotData.dataSourceSettings.dataSource.dataSource && this.dataSourceSettings.dataSource.dataSource &&\n            pivotData.dataSourceSettings.dataSource.dataSource.url === this.dataSourceSettings.dataSource.dataSource.url) {\n            pivotData.dataSourceSettings.dataSource = this.dataSourceSettings.dataSource;\n        }\n        this.dataSourceSettings = pivotData.dataSourceSettings;\n    };\n    PivotView.prototype.mergePersistPivotData = function () {\n        var data = window.localStorage.getItem(this.getModuleName() + this.element.id);\n        if (!((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(data) || (data === ''))) {\n            var dataObj = JSON.parse(data);\n            if (this.dataSourceSettings && this.dataSourceSettings.dataSource && this.dataSourceSettings.dataSource instanceof _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_12__.DataManager\n                && dataObj.dataSourceSettings && dataObj.dataSourceSettings.dataSource &&\n                dataObj.dataSourceSettings.dataSource.dataSource && this.dataSourceSettings.dataSource.dataSource &&\n                dataObj.dataSourceSettings.dataSource.dataSource.url === this.dataSourceSettings.dataSource.dataSource.url) {\n                dataObj.dataSourceSettings.dataSource = this.dataSourceSettings.dataSource;\n            }\n            this.setProperties(dataObj, true);\n        }\n    };\n    /**\n     * Method to open conditional formatting dialog.\n     *\n     * @returns {void}\n     */\n    PivotView.prototype.showConditionalFormattingDialog = function () {\n        if (this.conditionalFormattingModule) {\n            this.conditionalFormattingModule.showConditionalFormattingDialog();\n        }\n    };\n    /**\n     * Method to open calculated field dialog.\n     *\n     * @returns {void}\n     */\n    PivotView.prototype.createCalculatedFieldDialog = function () {\n        if (this.calculatedFieldModule) {\n            this.calculatedFieldModule.createCalculatedFieldDialog();\n        }\n    };\n    /**\n     * It returns the Module name.\n     *\n     * @returns {string} - string.\n     * @hidden\n     */\n    PivotView.prototype.getModuleName = function () {\n        return 'pivotview';\n    };\n    /**\n     * Copy the selected rows or cells data into clipboard.\n     *\n     * @param {boolean} withHeader - Specifies whether the column header text needs to be copied along with rows or cells.\n     * @returns {void}\n     * @hidden\n     */\n    PivotView.prototype.copy = function (withHeader) {\n        this.grid.copy(withHeader);\n    };\n    /**\n     * By default, prints all the pages of the Grid and hides the pager.\n     * > You can customize print options using the\n     * [`printMode`](./api-pivotgrid.html#printmode-string).\n     *\n     * @returns {void}\n     * @hidden\n     */\n    // public print(): void {\n    //     this.grid.print();\n    // }\n    /**\n     *\n     * Called internally if any of the property value changed.\n     *\n     * @returns {void}\n     * @hidden\n     */\n    PivotView.prototype.onPropertyChanged = function (newProp, oldProp) {\n        var isRequireRefresh = false;\n        for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {\n            var prop = _a[_i];\n            switch (prop) {\n                case 'dataSourceSettings':\n                case 'hyperlinkSettings':\n                case 'allowDrillThrough':\n                case 'editSettings':\n                case 'allowDataCompression': {\n                    if (newProp.dataSourceSettings && ((!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(newProp.dataSourceSettings.dataSource) &&\n                        !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.clonedDataSet) && this.clonedDataSet !== newProp.dataSourceSettings.dataSource &&\n                        !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(newProp.dataSourceSettings.groupSettings) &&\n                        newProp.dataSourceSettings.groupSettings.length > 0) ||\n                        (Object.keys(newProp.dataSourceSettings).length === 1 && Object.keys(newProp.dataSourceSettings)[0] === 'dataSource'\n                            && this.dataSourceSettings.groupSettings.length > 0))) {\n                        this.clonedDataSet = newProp.dataSourceSettings.dataSource;\n                        this.engineModule.groupingFields = {};\n                    }\n                    if (newProp.dataSourceSettings && Object.keys(newProp.dataSourceSettings).length === 1\n                        && newProp.dataSourceSettings.groupSettings && this.dataType === 'pivot') {\n                        this.updateGroupingReport(newProp.dataSourceSettings.groupSettings, 'Date');\n                    }\n                    var changedProps = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(newProp.dataSourceSettings) ? Object.keys(newProp.dataSourceSettings)\n                        : [];\n                    if (changedProps.indexOf('dataSource') > -1 && newProp.dataSourceSettings.type !== 'CSV') {\n                        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.savedDataSourceSettings) && this.dataSourceSettings.dataSource.length > 0) {\n                            _base_util__WEBPACK_IMPORTED_MODULE_15__.PivotUtil.updateDataSourceSettings(this, this.savedDataSourceSettings);\n                            this.savedDataSourceSettings = undefined;\n                        }\n                        if (newProp.dataSourceSettings.dataSource && newProp.dataSourceSettings.dataSource.length === 0) {\n                            this.savedDataSourceSettings = _base_util__WEBPACK_IMPORTED_MODULE_15__.PivotUtil.getClonedDataSourceSettings(this.dataSourceSettings);\n                            this.setProperties({ dataSourceSettings: { rows: [] } }, true);\n                            this.setProperties({ dataSourceSettings: { columns: [] } }, true);\n                            this.setProperties({ dataSourceSettings: { values: [] } }, true);\n                            this.setProperties({ dataSourceSettings: { filters: [] } }, true);\n                        }\n                        if (!this.isStaticRefresh) {\n                            this.pivotValues = [];\n                            if (this.dataType === 'pivot') {\n                                this.engineModule.fieldList = null;\n                                this.engineModule.isEmptyData = true;\n                                this.engineModule.data = [];\n                                this.engineModule.groupingFieldsInfo = {};\n                            }\n                            else if (this.dataType === 'olap') {\n                                this.olapEngineModule.fieldList = {};\n                                this.olapEngineModule.fieldListData = undefined;\n                                this.olapEngineModule.isEmptyData = true;\n                            }\n                        }\n                        this.showWaitingPopup();\n                        this.notify(_common_base_constant__WEBPACK_IMPORTED_MODULE_3__.initialLoad, {});\n                    }\n                    else {\n                        if (_base_util__WEBPACK_IMPORTED_MODULE_15__.PivotUtil.isButtonIconRefesh(prop, oldProp, newProp)) {\n                            if (this.showGroupingBar && this.groupingBarModule) {\n                                this.axisFieldModule.render();\n                            }\n                            if (this.showFieldList && this.pivotFieldListModule) {\n                                var rows = _base_util__WEBPACK_IMPORTED_MODULE_15__.PivotUtil.cloneFieldSettings(this.dataSourceSettings.rows);\n                                var columns = _base_util__WEBPACK_IMPORTED_MODULE_15__.PivotUtil.cloneFieldSettings(this.dataSourceSettings.columns);\n                                var values = _base_util__WEBPACK_IMPORTED_MODULE_15__.PivotUtil.cloneFieldSettings(this.dataSourceSettings.values);\n                                var filters = _base_util__WEBPACK_IMPORTED_MODULE_15__.PivotUtil.cloneFieldSettings(this.dataSourceSettings.filters);\n                                this.pivotFieldListModule.setProperties({ dataSourceSettings: { rows: rows, columns: columns,\n                                        values: values, filters: filters } }, true);\n                                this.pivotFieldListModule.axisFieldModule.render();\n                                if (this.pivotFieldListModule.treeViewModule.fieldTable && !this.isAdaptive) {\n                                    this.pivotFieldListModule.notify(_common_base_constant__WEBPACK_IMPORTED_MODULE_3__.treeViewUpdate, {});\n                                }\n                            }\n                        }\n                        else {\n                            this.remoteData = [];\n                            if (this.dataType === 'pivot' && this.dataSourceSettings.url && this.dataSourceSettings.url !== '' &&\n                                !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(newProp.dataSourceSettings) &&\n                                ('type' in newProp.dataSourceSettings || 'url' in newProp.dataSourceSettings)) {\n                                this.engineModule.fieldList = null;\n                                this.loadData();\n                            }\n                            else {\n                                if (newProp.dataSourceSettings && ((this.dataType === 'pivot' && 'dataSource' in newProp.dataSourceSettings) ||\n                                    (this.dataType === 'olap' && 'url' in newProp.dataSourceSettings))) {\n                                    if (!this.isStaticRefresh) {\n                                        if (this.dataType === 'pivot') {\n                                            this.engineModule.fieldList = null;\n                                            this.engineModule.isEmptyData = true;\n                                            this.engineModule.data = [];\n                                            this.engineModule.groupingFieldsInfo = {};\n                                        }\n                                        else if (this.dataType === 'olap') {\n                                            this.olapEngineModule.fieldList = {};\n                                            this.olapEngineModule.fieldListData = undefined;\n                                            this.olapEngineModule.isEmptyData = true;\n                                        }\n                                        this.pivotValues = [];\n                                    }\n                                }\n                                this.notify(_common_base_constant__WEBPACK_IMPORTED_MODULE_3__.initialLoad, {});\n                            }\n                        }\n                    }\n                    break;\n                }\n                case 'height':\n                case 'width':\n                    this.layoutRefresh();\n                    break;\n                case 'pivotValues':\n                case 'displayOption': {\n                    if (newProp.displayOption && Object.keys(newProp.displayOption).length === 1 &&\n                        newProp.displayOption.view) {\n                        this.currentView = (newProp.displayOption.view === 'Both' ?\n                            this.displayOption.primary : newProp.displayOption.view);\n                        if (this.showGroupingBar || this.showFieldList) {\n                            if (this.showFieldList && this.pivotFieldListModule) {\n                                this.pivotFieldListModule.destroyEngine = true;\n                                this.pivotFieldListModule.destroy();\n                                if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('#' + this.element.id + '_PivotFieldList', this.element) !== null) {\n                                    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.remove)((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('#' + this.element.id + '_PivotFieldList', this.element));\n                                }\n                                this.pivotFieldListModule.destroyEngine = false;\n                            }\n                            /**\n                             * Below lines are affected the grouping bar render between table and chart.\n                             * In \"Init subcomponent\" function, grouping bar rendered properly for table and chart view.\n                             * So, The below lines are commanded out.\n                             */\n                            // if (this.showGroupingBar && this.groupingBarModule) {\n                            //     this.groupingBarModule.destroy();\n                            // }\n                            this.notify(_common_base_constant__WEBPACK_IMPORTED_MODULE_3__.initSubComponent, this);\n                        }\n                        switch (newProp.displayOption.view) {\n                            case 'Both':\n                                if (!this.pivotChartModule) {\n                                    this.pivotChartModule = new _pivotchart_index__WEBPACK_IMPORTED_MODULE_16__.PivotChart(this);\n                                }\n                                if (!this.grid) {\n                                    this.renderEmptyGrid();\n                                }\n                                break;\n                            case 'Chart':\n                                if (this.grid) {\n                                    this.grid.destroy();\n                                    this.grid = undefined;\n                                }\n                                if (!this.pivotChartModule) {\n                                    this.pivotChartModule = new _pivotchart_index__WEBPACK_IMPORTED_MODULE_16__.PivotChart(this);\n                                }\n                                break;\n                            case 'Table':\n                                if (!this.grid) {\n                                    this.renderEmptyGrid();\n                                }\n                                if (this.pivotChartModule) {\n                                    this.destroyEngine = true;\n                                    this.pivotChartModule.destroy();\n                                    this.destroyEngine = false;\n                                    this.chart = undefined;\n                                    this.pivotChartModule = undefined;\n                                }\n                                break;\n                        }\n                    }\n                    else if (this.showToolbar && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(newProp.displayOption) && newProp.displayOption.view) {\n                        this.currentView = (newProp.displayOption.view === 'Both' ?\n                            this.displayOption.primary : newProp.displayOption.view);\n                    }\n                    if (this.showToolbar && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(newProp.displayOption) && newProp.displayOption.view) {\n                        if (newProp.displayOption.view === 'Chart') {\n                            this.toolbarModule.createChartMenu();\n                            this.toggleButtonState(_common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.TOOLBAR_GRID, 'add');\n                            this.toggleButtonState(_common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.TOOLBAR_CHART, 'remove');\n                        }\n                        else if (newProp.displayOption.view === 'Table') {\n                            var gridElement = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('#' + this.element.id + '_grid', this.element);\n                            gridElement.style.display = 'block';\n                            this.toggleButtonState(_common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.TOOLBAR_CHART, 'add');\n                            this.toggleButtonState(_common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.TOOLBAR_GRID, 'remove');\n                        }\n                        else {\n                            this.toolbarModule.createChartMenu();\n                            this.toggleButtonState(_common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.TOOLBAR_GRID, 'remove');\n                            this.toggleButtonState(_common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.TOOLBAR_CHART, 'remove');\n                        }\n                    }\n                    var engine = this.dataType === 'pivot' ? this.engineModule : this.olapEngineModule;\n                    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(engine.fieldList) || !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(engine.pivotValues)) {\n                        this.notify(_common_base_constant__WEBPACK_IMPORTED_MODULE_3__.dataReady, {});\n                    }\n                    break;\n                }\n                case 'gridSettings':\n                    this.isTabular = this.gridSettings.layout === 'Tabular' ? true : false;\n                    this.lastGridSettings = newProp.gridSettings;\n                    this.isCellBoxMultiSelection = this.gridSettings.allowSelection &&\n                        this.gridSettings.selectionSettings.cellSelectionMode === 'Box' &&\n                        this.gridSettings.selectionSettings.mode === 'Cell' && this.gridSettings.selectionSettings.type === 'Multiple';\n                    if (this.allowGrouping && this.groupingModule && !this.isCellBoxMultiSelection) {\n                        this.setProperties({ gridSettings: { allowSelection: true, selectionSettings: { cellSelectionMode: 'Box', mode: 'Cell', type: 'Multiple' } } }, true);\n                        this.isCellBoxMultiSelection = true;\n                    }\n                    if (this.renderModule && this.grid) {\n                        this.renderModule.updateGridSettings();\n                    }\n                    if (newProp.gridSettings.layout) {\n                        this.initialLoad();\n                    }\n                    break;\n                case 'chartSettings': {\n                    if (this.showGroupingBar &&\n                        this.groupingBarModule &&\n                        (Object.keys(newProp.chartSettings).indexOf('enableMultipleAxis') !== -1 ||\n                            (newProp.chartSettings.chartSeries && Object.keys(newProp.chartSettings.chartSeries).indexOf('type') !== -1))) {\n                        this.groupingBarModule.renderLayout();\n                        if (this.pivotChartModule) {\n                            this.groupingBarModule.appendToElement();\n                        }\n                    }\n                    if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.pivotChartModule) && this.displayOption.view !== 'Table') {\n                        this.pivotChartModule = new _pivotchart_index__WEBPACK_IMPORTED_MODULE_16__.PivotChart(this);\n                    }\n                    var engineModule = this.dataType === 'pivot' ? this.engineModule : this.olapEngineModule;\n                    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.pivotChartModule) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(engineModule.pivotValues)) {\n                        this.pivotChartModule.loadChart(this, this.chartSettings);\n                    }\n                    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(engineModule.pivotValues) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(engineModule.fieldList)) {\n                        this.notify(_common_base_constant__WEBPACK_IMPORTED_MODULE_3__.uiUpdate, this);\n                    }\n                    break;\n                }\n                case 'locale':\n                case 'currencyCode':\n                case 'enableRtl':\n                    if (this.tooltip) {\n                        this.tooltip.destroy();\n                    }\n                    if (this.dataSourceSettings.groupSettings && this.dataSourceSettings.groupSettings.length > 0 && this.clonedDataSet) {\n                        var dataSet = this.dataSourceSettings.type === 'CSV' ?\n                            _base_util__WEBPACK_IMPORTED_MODULE_15__.PivotUtil.getClonedCSVData(this.clonedDataSet) :\n                            _base_util__WEBPACK_IMPORTED_MODULE_15__.PivotUtil.getClonedData(this.clonedDataSet);\n                        this.setProperties({ dataSourceSettings: { dataSource: dataSet } }, true);\n                    }\n                    _super.prototype.refresh.call(this);\n                    this.updateClass();\n                    break;\n                case 'enableValueSorting':\n                    this.enableValueSorting = newProp.enableValueSorting;\n                    this.updateDataSource();\n                    break;\n                case 'showGroupingBar':\n                    if (this.element.querySelector('.e-grouping-bar')) {\n                        this.element.querySelector('.e-grouping-bar').remove();\n                    }\n                    else if (this.groupingBarModule) {\n                        this.groupingBarModule.renderLayout();\n                        if (!this.commonModule) {\n                            this.commonModule = new _common_actions_common__WEBPACK_IMPORTED_MODULE_6__.Common(this);\n                        }\n                        this.notify(_common_base_constant__WEBPACK_IMPORTED_MODULE_3__.initialLoad, {});\n                    }\n                    if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(newProp.showFieldList)) {\n                        this.renderPivotGrid();\n                    }\n                    break;\n                case 'showFieldList':\n                    this.initialLoad();\n                    break;\n                case 'groupingBarSettings':\n                    if (this.showGroupingBar && this.groupingBarModule) {\n                        if (newProp.groupingBarSettings && Object.keys(newProp.groupingBarSettings).indexOf('showFieldsPanel') > -1) {\n                            this.groupingBarModule.RefreshFieldsPanel();\n                            this.layoutRefresh();\n                        }\n                        else {\n                            this.axisFieldModule.render();\n                        }\n                    }\n                    break;\n                case 'showValuesButton':\n                    if (this.showGroupingBar && this.groupingBarModule && this.axisFieldModule) {\n                        this.axisFieldModule.render();\n                    }\n                    if (this.showFieldList && this.pivotFieldListModule && this.pivotFieldListModule.axisFieldModule) {\n                        this.pivotFieldListModule.setProperties({ showValuesButton: newProp.showValuesButton }, true);\n                        this.pivotFieldListModule.axisFieldModule.render();\n                    }\n                    break;\n                case 'showTooltip':\n                    this.renderToolTip();\n                    break;\n                case 'showToolbar':\n                case 'toolbar':\n                    if (this.toolbarModule && this.showToolbar) {\n                        this.toolbarModule.refreshToolbar();\n                    }\n                    break;\n                case 'chartTypes':\n                    if (this.toolbarModule) {\n                        this.toolbarModule.createChartMenu();\n                    }\n                    break;\n                case 'aggregateTypes':\n                    if (this.showGroupingBar && this.groupingBarModule) {\n                        if (this.axisFieldModule) {\n                            this.axisFieldModule.render();\n                        }\n                    }\n                    if (this.showFieldList && this.pivotFieldListModule && this.pivotFieldListModule.axisFieldModule) {\n                        this.pivotFieldListModule.setProperties({ aggregateTypes: newProp.aggregateTypes }, true);\n                        this.pivotFieldListModule.axisFieldModule.render();\n                    }\n                    break;\n                case 'enableFieldSearching':\n                    if (this.pivotFieldListModule) {\n                        this.pivotFieldListModule.enableFieldSearching = this.enableFieldSearching;\n                    }\n                    break;\n                case 'pageSettings':\n                    if (!this.enableVirtualization) {\n                        this.engineModule.pageSettings = this.pageSettings;\n                        if (this.engineModule.fieldList) {\n                            this.refreshPageData();\n                        }\n                        else {\n                            this.initialLoad();\n                        }\n                    }\n                    break;\n                case 'pagerSettings':\n                case 'enablePaging':\n                    if (this.isStaticFieldList && this.isStaticRefresh) {\n                        this.isStaticRefresh = false;\n                    }\n                    this.initialLoad();\n                    break;\n                case 'cellTemplate':\n                    this.cellTemplateFn = this.templateParser(this.cellTemplate);\n                    isRequireRefresh = true;\n                    break;\n                case 'tooltipTemplate':\n                    this.tooltipTemplateFn = this.templateParser(this.tooltipTemplate);\n                    isRequireRefresh = true;\n                    break;\n                case 'allowCalculatedField':\n                    if (this.pivotFieldListModule) {\n                        this.pivotFieldListModule.allowCalculatedField = this.allowCalculatedField;\n                    }\n                    break;\n                case 'allowDeferLayoutUpdate':\n                    this.pivotDeferLayoutUpdate = this.allowDeferLayoutUpdate;\n                    if (this.pivotFieldListModule) {\n                        this.pivotFieldListModule.allowDeferLayoutUpdate = this.allowDeferLayoutUpdate;\n                    }\n                    break;\n                case 'allowGrouping':\n                    this.refresh();\n                    break;\n            }\n        }\n        if (isRequireRefresh && this.grid) {\n            this.grid.refreshColumns();\n        }\n    };\n    PivotView.prototype.toggleButtonState = function (buttonClass, action) {\n        var button = this.element.querySelector('.' + buttonClass);\n        if (button) {\n            var closestDisabledElement = button.closest('.e-toolbar-item');\n            if (closestDisabledElement) {\n                if (action === 'add') {\n                    closestDisabledElement.classList.add(_common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.MENU_DISABLE);\n                }\n                else if (action === 'remove') {\n                    closestDisabledElement.classList.remove(_common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.MENU_DISABLE);\n                }\n            }\n        }\n    };\n    /**\n     * Method to parse the template string.\n     *\n     * @private\n     */\n    PivotView.prototype.templateParser = function (template) {\n        if (template) {\n            try {\n                if (typeof template !== 'function' && document.querySelectorAll(template).length) {\n                    return (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.compile)(document.querySelector(template).innerHTML.trim());\n                }\n                else {\n                    return (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.compile)(template);\n                }\n            }\n            catch (error) {\n                return (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.compile)(template);\n            }\n        }\n        return undefined;\n    };\n    /**\n     * Method to get the cell template.\n     *\n     * @private\n     */\n    PivotView.prototype.getCellTemplate = function () {\n        return this.cellTemplateFn;\n    };\n    /**\n     * @hidden\n     */\n    PivotView.prototype.appendHtml = function (node, innerHtml) {\n        var tempElement = document.createElement('div');\n        tempElement.innerHTML = innerHtml;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(tempElement.firstChild)) {\n            node.appendChild(tempElement.firstChild);\n        }\n        return node;\n    };\n    /**\n     * Render the UI section of PivotView.\n     *\n     * @returns {void}\n     * @hidden\n     */\n    PivotView.prototype.renderPivotGrid = function () {\n        this.isEmptyGrid = false;\n        this.notEmpty = true;\n        this.clearTemplate();\n        if (this.showGroupingBar) {\n            if (this.pivotChartModule) {\n                this.appendChartElement();\n            }\n            this.groupingBarModule.appendToElement();\n        }\n        if (this.pivotChartModule) {\n            this.pivotChartModule.engineModule = this.engineModule;\n            this.pivotChartModule.loadChart(this, this.chartSettings);\n            if (this.enableRtl && this.chart && document.body.getAttribute('dir') !== 'rtl') {\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([this.chart.element], _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.PIVOTCHART_LTR);\n            }\n        }\n        if (this.enableVirtualization) {\n            this.virtualscrollModule = new _actions_virtualscroll__WEBPACK_IMPORTED_MODULE_13__.VirtualScroll(this);\n        }\n        if (this.allowDrillThrough || this.editSettings.allowEditing) {\n            this.drillThroughModule = new _actions_drill_through__WEBPACK_IMPORTED_MODULE_14__.DrillThrough(this);\n        }\n        if (this.enablePaging) {\n            this.notify(_common_base_constant__WEBPACK_IMPORTED_MODULE_3__.initPivotPager, this);\n        }\n        if (this.displayOption.view !== 'Chart') {\n            if (this.hyperlinkSettings) {\n                this.isRowCellHyperlink = (this.hyperlinkSettings.showRowHeaderHyperlink ?\n                    true : this.hyperlinkSettings.showHyperlink ? true : false);\n                this.isColumnCellHyperlink = (this.hyperlinkSettings.showColumnHeaderHyperlink ?\n                    true : this.hyperlinkSettings.showHyperlink ? true : false);\n                this.isValueCellHyperlink = (this.hyperlinkSettings.showValueCellHyperlink ?\n                    true : this.hyperlinkSettings.showHyperlink ? true : false);\n                this.isSummaryCellHyperlink = (this.hyperlinkSettings.showSummaryCellHyperlink ?\n                    true : this.hyperlinkSettings.showHyperlink ? true : false);\n                this.applyHyperlinkSettings();\n            }\n            this.renderModule = this.renderModule ? this.renderModule : new _renderer_render__WEBPACK_IMPORTED_MODULE_5__.Render(this);\n            this.renderModule.render(true);\n        }\n        else if (this.grid) {\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.remove)(this.grid.element);\n        }\n        var isNumberFormattingApplied = this.actionObj.actionName === _common_base_constant__WEBPACK_IMPORTED_MODULE_3__.openNumberFormatting ||\n            this.actionObj.actionName === _common_base_constant__WEBPACK_IMPORTED_MODULE_3__.numberFormattingMenu;\n        var isConditionalFormattingApplied = this.actionObj.actionName === _common_base_constant__WEBPACK_IMPORTED_MODULE_3__.conditionalFormattingMenu ||\n            this.actionObj.actionName === _common_base_constant__WEBPACK_IMPORTED_MODULE_3__.openConditionalFormatting;\n        if ((this.showFieldList || this.allowNumberFormatting || this.allowCalculatedField ||\n            this.toolbar || this.allowGrouping || this.gridSettings.contextMenuItems) &&\n            !(isNumberFormattingApplied || isConditionalFormattingApplied)) {\n            this.notify(_common_base_constant__WEBPACK_IMPORTED_MODULE_3__.uiUpdate, this);\n            if (this.pivotFieldListModule && this.allowDeferLayoutUpdate) {\n                this.pivotFieldListModule.clonedDataSource = _base_util__WEBPACK_IMPORTED_MODULE_15__.PivotUtil.getClonedDataSourceSettings(this.dataSourceSettings);\n            }\n        }\n        if (this.allowConditionalFormatting) {\n            this.applyFormatting(this.pivotValues);\n        }\n        if (this.showToolbar) {\n            if (this.displayOption.view === 'Both' && this.chart && this.grid) {\n                if (this.showGroupingBar && this.groupingBarModule && this.element.querySelector('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.GROUPING_BAR_CLASS)) {\n                    this.groupingBarModule.refreshUI();\n                }\n                if (this.toolbarModule && this.toolbarModule.toolbar) {\n                    this.toolbarModule.toolbar.width = this.getGridWidthAsNumber();\n                }\n                if (this.chartSettings.enableScrollOnMultiAxis && this.chartSettings.enableMultipleAxis) {\n                    this.element.querySelector('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.PIVOTCHART).style.width = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.formatUnit)(this.getGridWidthAsNumber());\n                }\n                this.chart.width = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.formatUnit)(this.getGridWidthAsNumber());\n                if (this.currentView === 'Table') {\n                    this.grid.element.style.display = '';\n                    this.chart.element.style.display = 'none';\n                    if (this.chartSettings.enableMultipleAxis && this.chartSettings.enableScrollOnMultiAxis) {\n                        this.element.querySelector('.e-pivotchart').style.display = 'none';\n                    }\n                }\n                else {\n                    this.grid.element.style.display = 'none';\n                    this.chart.element.style.display = '';\n                    if (this.chartSettings.enableMultipleAxis && this.chartSettings.enableScrollOnMultiAxis) {\n                        this.element.querySelector('.e-pivotchart').style.display = '';\n                    }\n                }\n            }\n        }\n        if (this.toolbarModule) {\n            _base_util__WEBPACK_IMPORTED_MODULE_15__.PivotUtil.toggleFieldListIconVisibility(this);\n            if (this.toolbarModule && this.toolbarModule.action !== 'New' && this.toolbarModule.action !== 'Load'\n                && this.toolbarModule.action !== 'Remove') {\n                this.isModified = true;\n            }\n            if (!this.isInitialRendering) {\n                this.isModified = false;\n                this.isInitialRendering = !this.isInitialRendering;\n            }\n            this.toolbarModule.action = '';\n        }\n    };\n    /**\n     * Appends the chart element to the DOM, based on the component's display options and settings.\n     *\n     * @returns {void}\n     * @hidden\n     */\n    PivotView.prototype.appendChartElement = function () {\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('#' + this.element.id + '_chart', this.element)) {\n            if (this.displayOption.view === 'Both') {\n                if (this.displayOption.primary === 'Chart') {\n                    (this.element.insertBefore(((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div', {\n                        className: _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.PIVOTCHART, id: this.element.id + '_chart'\n                    })), this.element.querySelector('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.GRID_CLASS)));\n                }\n                else {\n                    (this.element.appendChild((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div', {\n                        className: _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.PIVOTCHART, id: this.element.id + '_chart'\n                    })));\n                }\n            }\n            else {\n                this.element.appendChild((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div', {\n                    className: _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.PIVOTCHART, id: this.element.id + '_chart'\n                }));\n            }\n            var width = this.width.toString();\n            if (this.showToolbar && this.grid) {\n                width = this.getGridWidthAsNumber().toString();\n            }\n            var height = this.pivotChartModule.getChartHeight();\n            var tmpChart = void 0;\n            if (this.chartSettings && this.chartSettings.chartSeries &&\n                this.pivotChartModule['accumulationType'].indexOf(this.chartSettings.chartSeries.type) > -1) {\n                tmpChart = new _syncfusion_ej2_charts__WEBPACK_IMPORTED_MODULE_18__.AccumulationChart({ width: width, height: height });\n            }\n            else {\n                tmpChart = new _syncfusion_ej2_charts__WEBPACK_IMPORTED_MODULE_18__.Chart({ width: width, height: height });\n            }\n            tmpChart.appendTo((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('#' + this.element.id + '_chart', this.element));\n            if (this.showToolbar) {\n                if (this.displayOption.view === 'Both' && this.currentView === 'Chart') {\n                    this.grid.element.style.display = 'none';\n                }\n                if (this.currentView !== 'Chart') {\n                    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('#' + this.element.id + '_chart', this.element).style.display = 'none';\n                }\n            }\n        }\n    };\n    /**\n     * @hidden\n     */\n    PivotView.prototype.showWaitingPopup = function () {\n        if (this.grid && this.grid.element && !this.spinnerTemplate && this.currentView === 'Table') {\n            (0,_syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_2__.showSpinner)(this.grid.element);\n        }\n        else {\n            (0,_syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_2__.showSpinner)(this.element);\n        }\n    };\n    /**\n     * @hidden\n     */\n    PivotView.prototype.hideWaitingPopup = function () {\n        if (this.grid && this.grid.element && !this.spinnerTemplate && this.currentView === 'Table') {\n            (0,_syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_2__.hideSpinner)(this.grid.element);\n        }\n        else {\n            (0,_syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_2__.hideSpinner)(this.element);\n        }\n    };\n    /**\n     * Updates the PivotEngine using dataSource from Pivot View component.\n     *\n     * @function updateDataSource\n     * @returns {void}\n     * @hidden\n     */\n    PivotView.prototype.updateDataSource = function () {\n        var _this_1 = this;\n        this.showWaitingPopup();\n        var pivot = this;\n        //setTimeout(() => {\n        var isSorted = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(pivot.lastSortInfo) && Object.keys(pivot.lastSortInfo).length > 0 ? true : false;\n        var isFiltered = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(pivot.lastFilterInfo) && Object.keys(pivot.lastFilterInfo).length > 0 ? true : false;\n        var isAggChange = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(pivot.lastAggregationInfo) && Object.keys(pivot.lastAggregationInfo).length > 0 ?\n            true : false;\n        var isCalcChange = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(pivot.lastCalcFieldInfo) && Object.keys(pivot.lastCalcFieldInfo).length > 0 ?\n            true : false;\n        var args = {\n            dataSourceSettings: _base_util__WEBPACK_IMPORTED_MODULE_15__.PivotUtil.getClonedDataSourceSettings(pivot.dataSourceSettings)\n        };\n        pivot.trigger(_common_base_constant__WEBPACK_IMPORTED_MODULE_3__.enginePopulating, args, function (observedArgs) {\n            if (!((pivot.enableVirtualization || pivot.enablePaging) && (isSorted || isFiltered || isAggChange || isCalcChange))) {\n                _base_util__WEBPACK_IMPORTED_MODULE_15__.PivotUtil.updateDataSourceSettings(pivot, observedArgs.dataSourceSettings);\n            }\n            pivot.updatePageSettings(false);\n            if (isSorted && pivot.dataSourceSettings.valueSortSettings.headerText !== '') {\n                pivot.setProperties({ dataSourceSettings: { valueSortSettings: { headerText: '' } } }, true);\n            }\n            if (pivot.dataType === 'pivot' && (pivot.enableVirtualization || pivot.enablePaging) && (isSorted || isFiltered || isAggChange || isCalcChange)) {\n                if (isSorted) {\n                    if (_this_1.dataSourceSettings.mode === 'Server') {\n                        pivot.getEngine('onSort', null, pivot.lastSortInfo, null, null, null, null);\n                    }\n                    else {\n                        pivot.engineModule.onSort(pivot.lastSortInfo, pivot.dataSourceSettings);\n                    }\n                    pivot.lastSortInfo = {};\n                }\n                if (isAggChange) {\n                    if (_this_1.dataSourceSettings.mode === 'Server') {\n                        pivot.getEngine('onAggregation', null, null, pivot.lastAggregationInfo, null, null, null);\n                    }\n                    else {\n                        pivot.engineModule.onAggregation(pivot.lastAggregationInfo, pivot.dataSourceSettings);\n                    }\n                    pivot.lastAggregationInfo = {};\n                }\n                if (isCalcChange) {\n                    if (_this_1.dataSourceSettings.mode === 'Server') {\n                        pivot.getEngine('onCalcOperation', null, null, null, pivot.lastCalcFieldInfo, null, null);\n                    }\n                    else {\n                        pivot.engineModule.onCalcOperation(pivot.lastCalcFieldInfo, pivot.dataSourceSettings);\n                    }\n                    pivot.lastCalcFieldInfo = {};\n                }\n                if (isFiltered) {\n                    if (_this_1.dataSourceSettings.mode === 'Server') {\n                        pivot.getEngine('onFilter', null, null, null, null, pivot.lastFilterInfo, null);\n                    }\n                    else {\n                        pivot.engineModule.onFilter(pivot.lastFilterInfo, pivot.dataSourceSettings);\n                    }\n                    pivot.lastFilterInfo = {};\n                }\n                pivot.allowServerDataBinding = false;\n                pivot.setProperties({ pivotValues: pivot.engineModule.pivotValues }, true);\n                pivot.allowServerDataBinding = true;\n                if (pivot.dataSourceSettings.mode !== 'Server') {\n                    pivot.enginePopulatedEventMethod('updateDataSource');\n                }\n            }\n            else {\n                if (pivot.dataType === 'olap') {\n                    var customProperties = {\n                        mode: '',\n                        savedFieldList: pivot.olapEngineModule.fieldList,\n                        savedFieldListData: pivot.olapEngineModule.fieldListData,\n                        pageSettings: pivot.pageSettings,\n                        enableValueSorting: pivot.enableValueSorting,\n                        isDrillThrough: (pivot.allowDrillThrough || pivot.editSettings.allowEditing),\n                        localeObj: pivot.localeObj,\n                        enableVirtualization: _this_1.enableVirtualization\n                    };\n                    if (isCalcChange || isSorted) {\n                        pivot.olapEngineModule.savedFieldList = pivot.olapEngineModule.fieldList;\n                        pivot.olapEngineModule.savedFieldListData = pivot.olapEngineModule.fieldListData;\n                        if (isCalcChange) {\n                            pivot.olapEngineModule.updateCalcFields(pivot.dataSourceSettings, pivot.lastCalcFieldInfo);\n                            pivot.lastCalcFieldInfo = {};\n                        }\n                        else {\n                            pivot.olapEngineModule.onSort(pivot.dataSourceSettings);\n                            pivot.lastSortInfo = {};\n                        }\n                    }\n                    else {\n                        _base_util__WEBPACK_IMPORTED_MODULE_15__.PivotUtil.renderOlapEngine(pivot, customProperties);\n                    }\n                    pivot.allowServerDataBinding = false;\n                    pivot.setProperties({ pivotValues: pivot.olapEngineModule.pivotValues }, true);\n                    pivot.allowServerDataBinding = true;\n                    pivot.enginePopulatedEventMethod('updateDataSource');\n                }\n                else {\n                    var customProperties = {\n                        mode: '',\n                        savedFieldList: pivot.engineModule.fieldList,\n                        pageSettings: pivot.pageSettings,\n                        enableValueSorting: pivot.enableValueSorting,\n                        isDrillThrough: (pivot.allowDrillThrough || pivot.editSettings.allowEditing),\n                        localeObj: pivot.localeObj,\n                        fieldsType: pivot.fieldsType,\n                        clonedReport: pivot.clonedReport,\n                        globalize: pivot.globalize,\n                        currenyCode: pivot.currencyCode,\n                        enablePaging: _this_1.enablePaging,\n                        enableVirtualization: _this_1.enableVirtualization,\n                        allowDataCompression: _this_1.allowDataCompression,\n                        enableHtmlSanitizer: _this_1.enableHtmlSanitizer,\n                        enableOptimizedRendering: _this_1.enableVirtualization && _this_1.virtualscrollModule &&\n                            _this_1.virtualScrollSettings.allowSinglePage,\n                        isTabularLayout: _this_1.isTabular\n                    };\n                    if (pivot.dataSourceSettings.mode === 'Server') {\n                        if (isSorted) {\n                            pivot.getEngine('onSort', null, pivot.lastSortInfo, null, null, null, null);\n                        }\n                        else if (isAggChange) {\n                            pivot.getEngine('onAggregation', null, null, pivot.lastAggregationInfo, null, null, null);\n                        }\n                        else if (isCalcChange) {\n                            pivot.getEngine('onCalcOperation', null, null, null, pivot.lastCalcFieldInfo, null, null);\n                        }\n                        else if (isFiltered) {\n                            pivot.getEngine('onFilter', null, null, null, null, pivot.lastFilterInfo, null);\n                        }\n                        else {\n                            pivot.getEngine('onDrop', null, null, null, null, null, null);\n                        }\n                    }\n                    else {\n                        pivot.engineModule.renderEngine(pivot.dataSourceSettings, customProperties, pivot.aggregateCellInfo ?\n                            pivot.getValueCellInfo.bind(pivot) : undefined, pivot.onHeadersSort ? pivot.getHeaderSortInfo.bind(pivot)\n                            : undefined);\n                        pivot.allowServerDataBinding = false;\n                        pivot.setProperties({ pivotValues: pivot.engineModule.pivotValues }, true);\n                        pivot.allowServerDataBinding = true;\n                        pivot.enginePopulatedEventMethod('updateDataSource');\n                    }\n                    pivot.lastSortInfo = {};\n                    pivot.lastAggregationInfo = {};\n                    pivot.lastCalcFieldInfo = {};\n                    pivot.lastFilterInfo = {};\n                }\n            }\n        });\n        //});\n    };\n    PivotView.prototype.refreshPageData = function () {\n        var args = {\n            dataSourceSettings: _base_util__WEBPACK_IMPORTED_MODULE_15__.PivotUtil.getClonedDataSourceSettings(this.dataSourceSettings)\n        };\n        this.actionBeginMethod();\n        this.showWaitingPopup();\n        this.trigger(_common_base_constant__WEBPACK_IMPORTED_MODULE_3__.enginePopulating, args);\n        if (this.dataType === 'pivot') {\n            if (this.dataSourceSettings.mode === 'Server') {\n                this.getEngine('onPageChange', null, null, null, null, null, null);\n            }\n            else {\n                this.engineModule.generateGridData(this.dataSourceSettings, true, false, this.engineModule.headerCollection);\n            }\n            this.setProperties({ pivotValues: this.engineModule.pivotValues }, true);\n            this.enginePopulatedEventMethod('updateDataSource');\n        }\n        this.actionObj.actionName = this.getActionCompleteName();\n        if (this.actionObj.actionName) {\n            this.actionCompleteMethod();\n        }\n    };\n    /**\n     * Export the Pivot table data to an Excel file (.xlsx).\n     *\n     * @param  {ExcelExportProperties} excelExportProperties - Defines the export properties for customizing the table, such as custom columns, data source, and theme.\n     * @param  {boolean} isMultipleExport - Specifies whether multiple exports are enabled.\n     * @param  {workbook} workbook - Defines the Workbook if multiple exports are enabled.\n     * @param  {boolean} isBlob - If set to true, the exported file will be returned as blob data.\n     * @returns {void}\n     */\n    PivotView.prototype.excelExport = function (excelExportProperties, isMultipleExport, workbook, isBlob) {\n        if (this.dataSourceSettings.mode === 'Server') {\n            this.getEngine('onExcelExport', null, null, null, null, null, null, null, null, excelExportProperties);\n        }\n        else {\n            if ((this.enableVirtualization || this.enablePaging || this.allowEngineExport || (this.allowConditionalFormatting\n                && this.dataSourceSettings.conditionalFormatSettings.length > 0))) {\n                this.excelExportModule.exportToExcel('Excel', excelExportProperties, isBlob);\n            }\n            else {\n                this.exportType = 'Excel';\n                this.grid.excelExport(excelExportProperties, isMultipleExport, workbook, isBlob);\n            }\n            this.actionObj.actionName = this.getActionCompleteName();\n            var actionInfo = {\n                exportInfo: { type: this.exportType, info: excelExportProperties }\n            };\n            this.actionObj.actionInfo = actionInfo;\n            if (this.actionObj.actionName) {\n                this.actionCompleteMethod();\n            }\n        }\n    };\n    /**\n     * Export the Pivot table data to a CSV file (.csv).\n     *\n     * @param  {ExcelExportProperties} excelExportProperties - Defines the export properties for customizing the table, such as custom columns, data source, and theme.\n     * @param  {boolean} isMultipleExport - Specifies whether multiple exports are enabled.\n     * @param  {workbook} workbook - Defines the Workbook if multiple exports are enabled.\n     * @param  {boolean} isBlob - If set to true, the export will be returned as blob data.\n     * @returns {void}\n     */\n    PivotView.prototype.csvExport = function (excelExportProperties, isMultipleExport, workbook, isBlob) {\n        if (this.dataSourceSettings.mode === 'Server') {\n            this.getEngine('onCsvExport', null, null, null, null, null, null, null, null, excelExportProperties);\n        }\n        else {\n            if ((this.enableVirtualization || this.enablePaging || this.allowEngineExport || (this.allowConditionalFormatting\n                && this.dataSourceSettings.conditionalFormatSettings.length > 0))) {\n                this.excelExportModule.exportToExcel('CSV', excelExportProperties, isBlob);\n            }\n            else {\n                this.exportType = 'CSV';\n                this.grid.csvExport(excelExportProperties, isMultipleExport, workbook, isBlob);\n            }\n            this.actionObj.actionName = this.getActionCompleteName();\n            var actionInfo = {\n                exportInfo: { type: this.exportType, info: excelExportProperties }\n            };\n            this.actionObj.actionInfo = actionInfo;\n            if (this.actionObj.actionName) {\n                this.actionCompleteMethod();\n            }\n        }\n    };\n    /**\n     *\n     * Export pivot table data to PDF document.\n     *\n     * @param  {PdfExportProperties} pdfExportProperties - Defines the export properties of the Grid.\n     * @param  {boolean} isMultipleExport - Define to enable multiple export.\n     * @param  {Object} pdfDoc - Defined the PDF document if multiple export is enabled.\n     * @param  {boolean} isBlob - If 'isBlob' set to true, then it will be returned as blob data.\n     * @returns {Promise<Object>} - Returns the pivot table data to PDF document\n     */\n    PivotView.prototype.gridPdfExport = function (pdfExportProperties, isMultipleExport, pdfDoc, isBlob) {\n        var args = {\n            pdfExportProperties: pdfExportProperties, isMultipleExport: isMultipleExport, isBlob: isBlob, pdfDoc: pdfDoc, currentExportView: 'Table',\n            pdfMargins: {}\n        };\n        var pdfDocument = null;\n        this.trigger(_common_base_constant__WEBPACK_IMPORTED_MODULE_3__.beforeExport, args);\n        if (this.pdfExportModule) {\n            this.pdfExportModule.exportProperties = args;\n        }\n        if (this.dataSourceSettings.mode !== 'Server' && ((this.enableVirtualization || this.enablePaging || this.allowEngineExport ||\n            Object.keys(args.pdfMargins).length > 0) || args.height || args.width || (this.allowConditionalFormatting &&\n            this.dataSourceSettings.conditionalFormatSettings.length > 0))) {\n            pdfDocument = this.pdfExportModule.exportToPDF(args.pdfExportProperties, args.isMultipleExport, args.pdfDoc, args.isBlob);\n        }\n        else {\n            pdfDocument = this.grid.pdfExport(args.pdfExportProperties, args.isMultipleExport, args.pdfDoc, args.isBlob);\n        }\n        this.actionObj.actionName = this.getActionCompleteName();\n        var actionInfo = {\n            exportInfo: { type: 'PDF', info: pdfExportProperties }\n        };\n        this.actionObj.actionInfo = actionInfo;\n        if (this.actionObj.actionName) {\n            this.actionCompleteMethod();\n        }\n        return pdfDocument;\n    };\n    /**\n     * Method allow to export the pivot chart as PDF and image formats like PNG, JPEG, and SVG.\n     *\n     * @param {ExportType} type - Defines the export type.\n     * @param {PdfExportProperties} pdfExportProperties - Allows to define the export properties for the chart.\n     * @param {boolean} isMultipleExport - Allows to export multiple tables and charts into a single PDF document.\n     * @param {Object} pdfDoc - Allows the export of an external PDF document along with current PDF document.\n     * @param {boolean} isBlob - Allows the PDF document to be saved as blob data.\n     * @returns {Promise<Object>} - Method returns the pivot chart as PDF and image formats like PNG, JPEG, and SVG.\n     */\n    PivotView.prototype.chartExport = function (type, pdfExportProperties, isMultipleExport, pdfDoc, isBlob) {\n        var args = {\n            pdfExportProperties: pdfExportProperties, isMultipleExport: isMultipleExport, isBlob: isBlob, pdfDoc: pdfDoc,\n            type: type, currentExportView: 'Chart', pdfMargins: {}\n        };\n        this.trigger(_common_base_constant__WEBPACK_IMPORTED_MODULE_3__.beforeExport, args);\n        this.chartExportModule.exportProperties = args;\n        var pdfDocument;\n        var fileName = args.fileName ? args.fileName : (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(pdfExportProperties) &&\n            !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(pdfExportProperties.fileName)) ? pdfExportProperties.fileName : 'default';\n        if (type === 'PDF') {\n            pdfDocument = this.chartExportModule.pdfChartExport(args.pdfExportProperties, args.pdfDoc, args.isMultipleExport, args.isBlob);\n        }\n        else {\n            var orientation_1 = (args.orientation === 0 || args.orientation) ? args.orientation :\n                (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(pdfExportProperties) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(pdfExportProperties.pageOrientation)) ? (pdfExportProperties.pageOrientation === 'Landscape' ?\n                    _syncfusion_ej2_pdf_export__WEBPACK_IMPORTED_MODULE_19__.PdfPageOrientation.Landscape : _syncfusion_ej2_pdf_export__WEBPACK_IMPORTED_MODULE_19__.PdfPageOrientation.Portrait) : _syncfusion_ej2_pdf_export__WEBPACK_IMPORTED_MODULE_19__.PdfPageOrientation.Landscape;\n            pdfDocument = this.chart.exportModule.export(args.type, fileName, orientation_1, null);\n        }\n        this.actionObj.actionName = this.getActionCompleteName();\n        var actionInfo = {\n            exportInfo: { type: type, info: fileName }\n        };\n        this.actionObj.actionInfo = actionInfo;\n        if (this.actionObj.actionName) {\n            this.actionCompleteMethod();\n        }\n        return pdfDocument;\n    };\n    /**\n     * Method allow to export both pivot table and pivot chart in a same PDF document.\n     *\n     * @param {PdfExportProperties} pdfExportProperties - Allows to define the export properties for the table and chart.\n     * @param {boolean} isMultipleExport - Allows to export multiple tables and charts into a single PDF document.\n     * @param {Object} pdfDoc - Allows the export of an external PDF document along with current PDF document.\n     * @param {boolean} isBlob - Allows the PDF document to be saved as blob data.\n     * @param {boolean} exportBothTableAndChart - When the `view` property inside the `displayOption` is set to **Both**, both table and chart data can be exported into a single PDF document.\n     * @returns {Promise<Object>} - Method returns the both pivot table and pivot chart in a same PDF document.\n     */\n    PivotView.prototype.pdfExport = function (pdfExportProperties, isMultipleExport, pdfDoc, isBlob, exportBothTableAndChart) {\n        var _this_1 = this;\n        var pdfDocument = null;\n        return new Promise(function (resolve) {\n            if (exportBothTableAndChart && _this_1.displayOption.view === 'Both') {\n                if (_this_1.displayOption.primary === 'Chart') {\n                    var chartAndTableExportDocument = _this_1.chartExport('PDF', pdfExportProperties, true, pdfDoc, false);\n                    chartAndTableExportDocument.then(function (pdfData) {\n                        pdfDocument = _this_1.gridPdfExport(pdfExportProperties, isMultipleExport, pdfData, isBlob);\n                        resolve(pdfDocument);\n                    });\n                }\n                else {\n                    var tableAndChartExportDocument = _this_1.gridPdfExport(pdfExportProperties, true, pdfDoc, false);\n                    tableAndChartExportDocument.then(function (pdfData) {\n                        pdfDocument = _this_1.chartExport('PDF', pdfExportProperties, isMultipleExport, pdfData, isBlob);\n                        resolve(pdfDocument);\n                    });\n                }\n            }\n            else {\n                var tableExportDocumnt = _this_1.gridPdfExport(pdfExportProperties, isMultipleExport, pdfDoc, isBlob);\n                resolve(tableExportDocumnt);\n            }\n        });\n    };\n    /**\n     * Print method for the chart.\n     *\n     * @returns {void}\n     */\n    PivotView.prototype.printChart = function () {\n        if (this.chart) {\n            this.chart.print();\n        }\n    };\n    /** @hidden */\n    PivotView.prototype.onDrill = function (target, chartDrillInfo) {\n        var _this_1 = this;\n        var delimiter = (this.dataSourceSettings.drilledMembers[0] && this.dataSourceSettings.drilledMembers[0].delimiter) ?\n            this.dataSourceSettings.drilledMembers[0].delimiter : '**';\n        var fieldName = '';\n        var axis = '';\n        var action = '';\n        if (chartDrillInfo) {\n            fieldName = chartDrillInfo.fieldName;\n            axis = chartDrillInfo.cell.axis;\n            action = chartDrillInfo.isDrilled ? 'up' : 'down';\n        }\n        else {\n            var rowHeaderCell = target.closest('td.e-rowsheader');\n            axis = rowHeaderCell ? 'row' : 'column';\n            fieldName = axis === 'row' ? (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(target, 'td').getAttribute('fieldname') : (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(target, 'th').getAttribute('fieldname');\n            action = target.classList.contains(_common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.COLLAPSE) ? 'up' : 'down';\n        }\n        if (this.dataType === 'pivot') {\n            var clonedDrillMembers_1 = _base_util__WEBPACK_IMPORTED_MODULE_15__.PivotUtil.cloneDrillMemberSettings(this.dataSourceSettings.drilledMembers);\n            var colIndex = axis === 'row' ? parseInt((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(target, 'td').getAttribute('aria-colindex'), 10) - 1 : parseInt((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(target, 'th').getAttribute('aria-colindex'), 10) - 1;\n            var rowIndex = axis === 'row' ? Number((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(target, 'td').getAttribute('index')) : Number((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(target, 'th').getAttribute('index'));\n            var currentCell = chartDrillInfo ? chartDrillInfo.cell :\n                this.engineModule.pivotValues[rowIndex][colIndex];\n            var memberName = currentCell.valueSort.levelName.\n                split(this.engineModule.valueSortSettings.headerDelimiter).join(delimiter);\n            var fieldAvail = false;\n            if (this.dataSourceSettings.drilledMembers.length === 0) {\n                this.setProperties({ dataSourceSettings: { drilledMembers: [{ name: fieldName, items: [memberName],\n                                delimiter: delimiter }] } }, true);\n            }\n            else {\n                var drillMembers = _base_util__WEBPACK_IMPORTED_MODULE_15__.PivotUtil.cloneDrillMemberSettings(this.dataSourceSettings.drilledMembers);\n                for (var fCnt = 0; fCnt < drillMembers.length; fCnt++) {\n                    var field = drillMembers[fCnt];\n                    memberName = memberName.split(delimiter).join(field.delimiter ? field.delimiter : delimiter);\n                    delimiter = field.delimiter = field.delimiter ? field.delimiter : delimiter;\n                    if (field.name === fieldName) {\n                        fieldAvail = true;\n                        var memIndex = field.items.indexOf(memberName);\n                        if (memIndex > -1) {\n                            field.items.splice(memIndex, 1);\n                        }\n                        else {\n                            field.items.push(memberName);\n                        }\n                    }\n                    else {\n                        continue;\n                    }\n                }\n                this.setProperties({ dataSourceSettings: { drilledMembers: drillMembers } }, true);\n                if (!fieldAvail) {\n                    this.dataSourceSettings.drilledMembers.push({ name: fieldName, items: [memberName], delimiter: delimiter });\n                }\n            }\n            this.showWaitingPopup();\n            var pivot_1 = this;\n            //setTimeout(() => {\n            var drilledItem_1 = {\n                fieldName: fieldName, memberName: memberName, delimiter: delimiter,\n                axis: axis,\n                action: action,\n                currentCell: currentCell\n            };\n            var drillArgs = {\n                drillInfo: drilledItem_1,\n                pivotview: pivot_1,\n                cancel: false\n            };\n            pivot_1.trigger(_common_base_constant__WEBPACK_IMPORTED_MODULE_3__.drill, drillArgs, function (observedArgs) {\n                if (!observedArgs.cancel) {\n                    var args = {\n                        dataSourceSettings: _base_util__WEBPACK_IMPORTED_MODULE_15__.PivotUtil.getClonedDataSourceSettings(_this_1.dataSourceSettings)\n                    };\n                    pivot_1.trigger(_common_base_constant__WEBPACK_IMPORTED_MODULE_3__.enginePopulating, args);\n                    pivot_1.setProperties({ dataSourceSettings: args.dataSourceSettings }, true);\n                    if (pivot_1.enableVirtualization || pivot_1.enablePaging) {\n                        if (_this_1.dataSourceSettings.mode === 'Server') {\n                            _this_1.getEngine('onDrill', drilledItem_1, null, null, null, null, null);\n                        }\n                        else {\n                            pivot_1.engineModule.drilledMembers = pivot_1.dataSourceSettings.drilledMembers;\n                            pivot_1.engineModule.onDrill(drilledItem_1);\n                        }\n                    }\n                    else if (_this_1.dataSourceSettings.mode === 'Server') {\n                        _this_1.getEngine('onDrill', drilledItem_1, null, null, null, null, null);\n                    }\n                    else {\n                        pivot_1.engineModule.generateGridData(pivot_1.dataSourceSettings, true);\n                    }\n                    pivot_1.allowServerDataBinding = false;\n                    pivot_1.setProperties({ pivotValues: pivot_1.engineModule.pivotValues }, true);\n                    pivot_1.allowServerDataBinding = true;\n                    var eventArgs = {\n                        dataSourceSettings: _base_util__WEBPACK_IMPORTED_MODULE_15__.PivotUtil.getClonedDataSourceSettings(args.dataSourceSettings),\n                        pivotValues: _this_1.pivotValues\n                    };\n                    _this_1.trigger(_common_base_constant__WEBPACK_IMPORTED_MODULE_3__.enginePopulated, eventArgs);\n                    pivot_1.engineModule.pivotValues = eventArgs.pivotValues;\n                    var actionInfo = {\n                        drillInfo: drilledItem_1\n                    };\n                    _this_1.actionObj.actionInfo = actionInfo;\n                    pivot_1.renderPivotGrid();\n                }\n                else {\n                    _this_1.hideWaitingPopup();\n                    _this_1.setProperties({ dataSourceSettings: { drilledMembers: clonedDrillMembers_1 } }, true);\n                }\n            });\n        }\n        else {\n            this.onOlapDrill(fieldName, axis, action, delimiter, target, chartDrillInfo);\n        }\n    };\n    PivotView.prototype.onOlapDrill = function (fieldName, axis, action, delimiter, target, chartDrillInfo) {\n        var _this_1 = this;\n        var pivot = this;\n        var clonedDrillMembers = _base_util__WEBPACK_IMPORTED_MODULE_15__.PivotUtil.cloneDrillMemberSettings(this.dataSourceSettings.drilledMembers);\n        var currentCell;\n        if (chartDrillInfo) {\n            currentCell = chartDrillInfo.cell;\n        }\n        else {\n            var colIndex = axis === 'row' ? parseInt((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(target, 'td').getAttribute('aria-colindex'), 10) - 1\n                : parseInt((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(target, 'th').getAttribute('aria-colindex'), 10) - 1;\n            var rowIndex = axis === 'row' ? Number((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(target, 'td').getAttribute('index')) : Number((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(target, 'th').getAttribute('index'));\n            currentCell = this.olapEngineModule.pivotValues[rowIndex][colIndex];\n        }\n        var tupInfo = axis === 'row' ? this.olapEngineModule.tupRowInfo[currentCell.ordinal] :\n            this.olapEngineModule.tupColumnInfo[currentCell.ordinal];\n        var drillInfo = {\n            axis: axis,\n            action: action,\n            fieldName: fieldName,\n            delimiter: '~~',\n            memberName: tupInfo.uNameCollection,\n            currentCell: currentCell\n        };\n        this.showWaitingPopup();\n        var drillArgs = {\n            drillInfo: drillInfo,\n            pivotview: pivot,\n            cancel: false\n        };\n        var isAttributeHierarchy = this.olapEngineModule.fieldList[drillInfo.fieldName]\n            && this.olapEngineModule.fieldList[drillInfo.fieldName].isHierarchy;\n        var fieldPos = tupInfo.drillInfo.map(function (item) { return item.hierarchy; }).indexOf(currentCell.hierarchy.toString());\n        var clonedMembers = _base_util__WEBPACK_IMPORTED_MODULE_15__.PivotUtil.cloneDrillMemberSettings(this.dataSourceSettings.drilledMembers);\n        if (drillInfo && drillInfo.action === 'down') {\n            var fields = tupInfo.drillInfo.map(function (item) { return item.uName; });\n            var member = '';\n            for (var pos = 0; pos <= fieldPos; pos++) {\n                var field = fields[pos];\n                var members = field.split('~~');\n                member = member + (member !== '' ? '~~' : '') + members[members.length - 1];\n            }\n            var drillSets = this.olapEngineModule.getDrilledSets(drillInfo.memberName, currentCell, (this.olapEngineModule.fieldList[currentCell.hierarchy] &&\n                !this.olapEngineModule.fieldList[currentCell.hierarchy].hasAllMember) ? currentCell.valueSort.levelName.split(this.dataSourceSettings.valueSortSettings.headerDelimiter).length - 1 : fieldPos, axis);\n            var keys = Object.keys(drillSets);\n            for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {\n                var key = keys_1[_i];\n                var drillSet = drillSets[key];\n                for (var i = 0, cnt = clonedMembers.length; i < cnt; i++) {\n                    var drillMembers = clonedMembers[i];\n                    var memberItem = drillSet;\n                    if (drillMembers.delimiter) {\n                        memberItem = memberItem.replace(/~~/g, drillMembers.delimiter);\n                    }\n                    var items = [];\n                    for (var itemPos = 0; itemPos < drillMembers.items.length; itemPos++) {\n                        if (drillMembers.items[itemPos].indexOf(memberItem) !== 0) {\n                            items[items.length] = drillMembers.items[itemPos];\n                        }\n                    }\n                    drillMembers.items = items;\n                }\n            }\n            this.olapEngineModule.drilledSets[currentCell.actualText] = tupInfo.members[fieldPos];\n            drillInfo.memberName = member;\n            var drillItem = [];\n            for (var _a = 0, clonedMembers_1 = clonedMembers; _a < clonedMembers_1.length; _a++) {\n                var field = clonedMembers_1[_a];\n                if (field.name === drillInfo.fieldName) {\n                    drillItem.push(field);\n                }\n            }\n            if (drillItem.length > 0) {\n                if (drillItem[0].delimiter) {\n                    member = member.replace(/~~/g, drillItem[0].delimiter);\n                }\n                var index = _base_util__WEBPACK_IMPORTED_MODULE_15__.PivotUtil.inArray(member, drillItem[0].items);\n                if (index === -1) {\n                    drillItem[0].items.push(member);\n                }\n                if (isAttributeHierarchy) {\n                    var i = 0;\n                    while (i < drillItem[0].items.length) {\n                        if (drillItem[0].items[i] === member) {\n                            drillItem[0].items.splice(i, 1);\n                        }\n                        else {\n                            ++i;\n                        }\n                    }\n                }\n            }\n            else if (!isAttributeHierarchy) {\n                var drilledMember = { name: drillInfo.fieldName, items: [member], delimiter: '~~' };\n                if (!clonedMembers) {\n                    clonedMembers = [drilledMember];\n                }\n                else {\n                    clonedMembers.push(drilledMember);\n                }\n            }\n            drillArgs.drillInfo.memberName = member;\n            this.setProperties({ dataSourceSettings: { drilledMembers: clonedMembers } }, true);\n            pivot.trigger(_common_base_constant__WEBPACK_IMPORTED_MODULE_3__.drill, drillArgs, function (observedArgs) {\n                if (!observedArgs.cancel) {\n                    var args = {\n                        dataSourceSettings: _base_util__WEBPACK_IMPORTED_MODULE_15__.PivotUtil.getClonedDataSourceSettings(_this_1.dataSourceSettings)\n                    };\n                    _this_1.trigger(_common_base_constant__WEBPACK_IMPORTED_MODULE_3__.enginePopulating, args);\n                    _this_1.setProperties({ dataSourceSettings: args.dataSourceSettings }, true);\n                    _this_1.olapEngineModule.updateDrilledInfo(_this_1.dataSourceSettings);\n                    _this_1.allowServerDataBinding = false;\n                    _this_1.setProperties({ pivotValues: _this_1.olapEngineModule.pivotValues }, true);\n                    _this_1.allowServerDataBinding = true;\n                    var eventArgs = {\n                        dataSourceSettings: _base_util__WEBPACK_IMPORTED_MODULE_15__.PivotUtil.getClonedDataSourceSettings(args.dataSourceSettings),\n                        pivotValues: pivot.olapEngineModule.pivotValues\n                    };\n                    _this_1.trigger(_common_base_constant__WEBPACK_IMPORTED_MODULE_3__.enginePopulated, eventArgs);\n                    _this_1.olapEngineModule.pivotValues = eventArgs.pivotValues;\n                    _this_1.renderPivotGrid();\n                }\n                else {\n                    _this_1.hideWaitingPopup();\n                    _this_1.setProperties({ dataSourceSettings: { drilledMembers: clonedDrillMembers } }, true);\n                }\n            });\n        }\n        else {\n            delete this.olapEngineModule.drilledSets[currentCell.actualText];\n            var drillSets = this.olapEngineModule.getDrilledSets(drillInfo.memberName, currentCell, fieldPos, axis);\n            var keys = Object.keys(drillSets);\n            var fields = tupInfo.drillInfo.map(function (item) { return item.uName; });\n            var member = '';\n            for (var pos = 0; pos <= fieldPos; pos++) {\n                var field = fields[pos];\n                var members = field.split('~~');\n                member = member + (member !== '' ? '~~' : '') + members[members.length - 1];\n            }\n            for (var _b = 0, keys_2 = keys; _b < keys_2.length; _b++) {\n                var key = keys_2[_b];\n                var drillSet = drillSets[key];\n                var drillItemCollection = [];\n                for (var i = 0, cnt = clonedMembers.length; i < cnt; i++) {\n                    var drillItem = clonedMembers[i];\n                    var member_1 = drillSet;\n                    if (drillItem.name === drillInfo.fieldName) {\n                        drillItemCollection.push(drillItem);\n                    }\n                    if (drillItem.delimiter) {\n                        member_1 = drillSet.replace(/~~/g, drillItem.delimiter);\n                    }\n                    if (!isAttributeHierarchy) {\n                        var items = [];\n                        for (var itemPos = 0; itemPos < drillItem.items.length; itemPos++) {\n                            if (drillItem.items[itemPos].indexOf(member_1) !== 0) {\n                                items[items.length] = drillItem.items[itemPos];\n                            }\n                        }\n                        drillItem.items = items;\n                    }\n                }\n                if (isAttributeHierarchy) {\n                    if (drillItemCollection.length > 0) {\n                        if (drillItemCollection[0].delimiter) {\n                            member = member.replace(/~~/g, drillItemCollection[0].delimiter);\n                        }\n                        var index = _base_util__WEBPACK_IMPORTED_MODULE_15__.PivotUtil.inArray(member, drillItemCollection[0].items);\n                        if (index === -1) {\n                            drillItemCollection[0].items.push(member);\n                        }\n                    }\n                    else {\n                        var drilledMember = { name: drillInfo.fieldName, items: [member], delimiter: '~~' };\n                        if (!clonedMembers) {\n                            clonedMembers = [drilledMember];\n                        }\n                        else {\n                            clonedMembers.push(drilledMember);\n                        }\n                    }\n                }\n            }\n            var drilledMembers_1 = [];\n            for (var _c = 0, clonedMembers_2 = clonedMembers; _c < clonedMembers_2.length; _c++) {\n                var fields_1 = clonedMembers_2[_c];\n                if (fields_1.items.length > 0) {\n                    drilledMembers_1.push(fields_1);\n                }\n            }\n            this.setProperties({ dataSourceSettings: { drilledMembers: clonedMembers } }, true);\n            pivot.trigger(_common_base_constant__WEBPACK_IMPORTED_MODULE_3__.drill, drillArgs, function (observedArgs) {\n                if (!observedArgs.cancel) {\n                    var args = {\n                        dataSourceSettings: _base_util__WEBPACK_IMPORTED_MODULE_15__.PivotUtil.getClonedDataSourceSettings(_this_1.dataSourceSettings)\n                    };\n                    _this_1.trigger(_common_base_constant__WEBPACK_IMPORTED_MODULE_3__.enginePopulating, args);\n                    _this_1.setProperties({ dataSourceSettings: args.dataSourceSettings }, true);\n                    _this_1.setProperties({ dataSourceSettings: { drilledMembers: drilledMembers_1 } }, true);\n                    _this_1.olapEngineModule.updateDrilledInfo(_this_1.dataSourceSettings);\n                    _this_1.allowServerDataBinding = false;\n                    _this_1.setProperties({ pivotValues: _this_1.olapEngineModule.pivotValues }, true);\n                    _this_1.allowServerDataBinding = true;\n                    var eventArgs = {\n                        dataSourceSettings: _base_util__WEBPACK_IMPORTED_MODULE_15__.PivotUtil.getClonedDataSourceSettings(args.dataSourceSettings),\n                        pivotValues: pivot.olapEngineModule.pivotValues\n                    };\n                    _this_1.trigger(_common_base_constant__WEBPACK_IMPORTED_MODULE_3__.enginePopulated, eventArgs);\n                    _this_1.olapEngineModule.pivotValues = eventArgs.pivotValues;\n                    _this_1.renderPivotGrid();\n                }\n                else {\n                    _this_1.hideWaitingPopup();\n                    _this_1.setProperties({ dataSourceSettings: { drilledMembers: clonedDrillMembers } }, true);\n                }\n            });\n        }\n    };\n    /**\n     *\n     * @returns {void}\n     * @hidden\n     */\n    PivotView.prototype.onContentReady = function () {\n        var horiScrollHeight = (0,_syncfusion_ej2_grids__WEBPACK_IMPORTED_MODULE_9__.getScrollBarWidth)();\n        this.isPopupClicked = false;\n        var verOffset;\n        var vWidth;\n        if (this.showFieldList && this.pivotFieldListModule && this.dataSourceSettings.mode !== 'Server') {\n            this.pivotFieldListModule.element.style.display = 'block';\n            (0,_syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_2__.hideSpinner)(this.pivotFieldListModule.fieldListSpinnerElement);\n        }\n        else if (this.fieldListSpinnerElement) {\n            (0,_syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_2__.hideSpinner)(this.fieldListSpinnerElement);\n        }\n        if (!this.isEmptyGrid) {\n            if ((this.dataSourceSettings.mode === 'Server' && this.isServerWaitingPopup) || this.dataSourceSettings.mode === 'Local') {\n                this.hideWaitingPopup();\n            }\n        }\n        else if (this.pivotValues.length > 0) {\n            this.isEmptyGrid = false;\n            this.notEmpty = true;\n        }\n        var mCnt = this.element.querySelector('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.CONTENT_VIRTUALTABLE_DIV) ?\n            this.element.querySelector('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.CONTENT_VIRTUALTABLE_DIV) : this.element.querySelector('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.CONTENT_CLASS);\n        var mHdr = this.element.querySelector('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.MOVABLEHEADER_DIV);\n        var enableOptimizedRendering = this.virtualScrollSettings && this.virtualScrollSettings.allowSinglePage && this.dataType === 'pivot';\n        if (this.grid) {\n            var gridContentDiv = this.element.querySelector('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.GRID_CONTENT);\n            var isHorizontalOverFlow = mCnt.parentElement.offsetWidth < mCnt.querySelector('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.TABLE).offsetWidth;\n            var engine = this.dataType === 'pivot' ? this.engineModule : this.olapEngineModule;\n            if (this.enableVirtualization && engine && this.virtualscrollModule) {\n                if (enableOptimizedRendering && this.element.querySelector('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.PIVOT_CONTENT_LOADER)) {\n                    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([mHdr, mCnt], ['e-virtual-pivot-content']);\n                    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([this.element.querySelector('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.PIVOT_CONTENT_LOADER)], [_common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.PIVOT_HIDE_LOADER]);\n                    if (this.grid && this.grid.element.querySelector('.e-spinner-inner')) {\n                        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([this.grid.element.querySelector('.e-spinner-inner')], [_common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.PIVOT_HIDE_LOADER]);\n                    }\n                }\n                if (enableOptimizedRendering) {\n                    var loaderElement = this.element.querySelector('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.PIVOT_CONTENT_LOADER);\n                    if (!loaderElement) {\n                        loaderElement = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div', {\n                            className: _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.PIVOT_CONTENT_LOADER + ' ' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.PIVOT_HIDE_LOADER,\n                            innerHTML: this.localeObj.getConstant('loading')\n                        });\n                        if (this.grid.element && !this.element.querySelector('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.PIVOT_CONTENT_LOADER)) {\n                            this.grid.element.insertBefore(loaderElement, this.grid.element.firstElementChild);\n                        }\n                    }\n                    if (this.element.querySelector('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.HEADERCONTENT) && this.element.querySelector('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.GRID_CONTENT)) {\n                        var height = this.element.querySelector('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.GRID_CONTENT).offsetHeight + this.element.querySelector('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.HEADERCONTENT).offsetHeight;\n                        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.setStyleAttribute)(loaderElement, { 'height': height + 'px', 'width': this.element.querySelector('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.HEADERCONTENT).offsetWidth + 'px', 'padding': Math.floor(height / 2) + 'px' });\n                    }\n                }\n                if (this.element.querySelector('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.CONTENT_CLASS) &&\n                    !this.element.querySelector('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.CONTENT_CLASS).querySelector('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.VIRTUALTRACK_DIV)) {\n                    this.virtualDiv = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div', { className: _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.VIRTUALTRACK_DIV });\n                    this.element.querySelector('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.CONTENT_CLASS).appendChild(this.virtualDiv);\n                }\n                if (this.element.querySelector('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.MOVABLEHEADER_DIV) &&\n                    !this.element.querySelector('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.MOVABLEHEADER_DIV).querySelector('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.VIRTUALTRACK_DIV)) {\n                    this.virtualHeaderDiv = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div', { className: _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.VIRTUALTRACK_DIV });\n                    this.element.querySelector('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.MOVABLEHEADER_DIV).appendChild(this.virtualHeaderDiv);\n                }\n                else {\n                    this.virtualHeaderDiv =\n                        this.element.querySelector('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.MOVABLEHEADER_DIV).querySelector('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.VIRTUALTRACK_DIV);\n                }\n                var virtualScrollTableDiv = gridContentDiv.querySelector('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.VIRTUALTABLE_DIV);\n                if (gridContentDiv && !virtualScrollTableDiv) {\n                    this.virtualTableDiv = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div', { className: _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.VIRTUALTABLE_DIV });\n                    gridContentDiv.appendChild(this.virtualTableDiv);\n                    virtualScrollTableDiv = gridContentDiv.querySelector('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.VIRTUALTABLE_DIV);\n                    this.virtualScrollDiv = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div', { className: _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.VIRTUALSCROLL_DIV });\n                    virtualScrollTableDiv.appendChild(this.virtualScrollDiv);\n                    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.setStyleAttribute)(virtualScrollTableDiv, {\n                        minHeight: horiScrollHeight + 'px',\n                        maxHeight: horiScrollHeight + 'px',\n                        overflowX: 'scroll'\n                    });\n                    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.setStyleAttribute)(this.virtualScrollDiv, {\n                        height: '0.1px'\n                    });\n                    var newContentVirtualDiv = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div', {\n                        className: _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.CONTENT_VIRTUALTABLE_DIV\n                    });\n                    (newContentVirtualDiv).append.apply((newContentVirtualDiv), Array.prototype.slice.call(mCnt.childNodes));\n                    mCnt.appendChild(newContentVirtualDiv);\n                    newContentVirtualDiv.scrollLeft = 0;\n                }\n                var movableTable = this.element.querySelector('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.CONTENT_CLASS).querySelector('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.TABLE);\n                var vHeight = (this.gridSettings.rowHeight * engine.rowCount + 0.1 - movableTable.clientHeight);\n                if (vHeight > this.scrollerBrowserLimit) {\n                    this.verticalScrollScale = vHeight / this.scrollerBrowserLimit;\n                    vHeight = this.scrollerBrowserLimit;\n                }\n                vWidth = this.gridSettings.columnWidth * engine.columnCount;\n                if (vWidth > this.scrollerBrowserLimit) {\n                    this.horizontalScrollScale = vWidth / this.scrollerBrowserLimit;\n                    vWidth = this.scrollerBrowserLimit;\n                }\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.setStyleAttribute)(this.virtualDiv, {\n                    height: (vHeight > 0.1 ? vHeight : 0.1) + 'px',\n                    width: (vWidth > 0.1 ? vWidth : 0.1) + 'px'\n                });\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.setStyleAttribute)(this.virtualHeaderDiv, {\n                    height: 0, width: (vWidth > 0.1 ? vWidth : 0.1) + 'px'\n                });\n                if (this.isAdaptive) {\n                    mCnt.style.minHeight = '1px';\n                    mCnt.style.minHeight = '1px';\n                }\n                var ele = this.isAdaptive ? mCnt : (gridContentDiv.querySelector('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.VIRTUALTABLE_DIV) ?\n                    gridContentDiv.querySelector('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.VIRTUALTABLE_DIV) : mCnt);\n                verOffset = (mCnt.parentElement.scrollTop > this.scrollerBrowserLimit) ?\n                    mCnt.querySelector('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.TABLE).style.transform.split(',')[1].trim() :\n                    (enableOptimizedRendering ? mCnt.parentElement.scrollTop :\n                        -(((mCnt.parentElement.scrollTop * this.verticalScrollScale) -\n                            this.scrollPosObject.verticalSection - mCnt.parentElement.scrollTop))) + 'px)';\n                if (Number(verOffset.split('px')[0]) > this.virtualDiv.clientHeight) {\n                    verOffset = this.virtualDiv.clientHeight + 'px)';\n                }\n                var eleScrollLeft = Math.abs(ele.scrollLeft);\n                var horiOffset = (eleScrollLeft > this.scrollerBrowserLimit) ?\n                    (mCnt.querySelector('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.TABLE).style.transform.split(',')[0].trim() + ',') :\n                    'translate(' + ((this.enableRtl ? 1 : -1) * ((eleScrollLeft * this.horizontalScrollScale)\n                        - this.scrollPosObject.horizontalSection - eleScrollLeft)) + 'px,';\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.setStyleAttribute)(mCnt.querySelector('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.TABLE), {\n                    transform: horiOffset + verOffset\n                });\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.setStyleAttribute)(mHdr.querySelector('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.TABLE), {\n                    transform: horiOffset + 0 + 'px)'\n                });\n                if ((!isHorizontalOverFlow && gridContentDiv && virtualScrollTableDiv) || this.isAdaptive) {\n                    virtualScrollTableDiv.style.display = 'none';\n                }\n                else {\n                    virtualScrollTableDiv.style.display = 'block';\n                }\n                var translateValue = Number(-mCnt.querySelector('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.TABLE).style.transform.split('(')[1].split(',')[0].split('px')[0]);\n                this.virtualscrollModule.alignFreezedCells(translateValue, true);\n                if (isHorizontalOverFlow) {\n                    var newScrollWidth = 0;\n                    if (this.pivotColumns.length < 25) {\n                        newScrollWidth = (vWidth + mCnt.querySelector('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.TABLE).querySelector('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.FREEZED_CELL)\n                            .offsetWidth + (gridContentDiv.offsetWidth - gridContentDiv.clientWidth));\n                    }\n                    else {\n                        newScrollWidth = (vWidth + (gridContentDiv.offsetWidth - gridContentDiv.clientWidth));\n                    }\n                    if (this.grid.height !== 'auto') {\n                        this.grid.element.querySelector('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.VIRTUALSCROLL_DIV).style.width = newScrollWidth + horiScrollHeight + 'px';\n                    }\n                    else {\n                        this.grid.element.querySelector('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.VIRTUALSCROLL_DIV).style.width = newScrollWidth + 'px';\n                    }\n                }\n                if (this.grid.element.querySelector('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.CONTENT_VIRTUALTABLE_DIV)) {\n                    if (mCnt.parentElement.scrollHeight === mCnt.scrollHeight) {\n                        mCnt.style.overflowY = '';\n                    }\n                }\n                var colValues = this.dataType === 'pivot' ? (this.dataSourceSettings.valueAxis === 'column' ? this.dataSourceSettings.values.length : 1) : 1;\n                var exactSize = (this.pageSettings.columnPageSize * colValues * this.gridSettings.columnWidth);\n                var hScrollPos = (ele.scrollWidth - (Math.abs(eleScrollLeft) + ele.offsetWidth));\n                if (this.virtualscrollModule && exactSize > 0 && hScrollPos <= exactSize && (eleScrollLeft > 0)) {\n                    var mCntScrollPos = (mCnt.scrollWidth - (Math.abs(mCnt.scrollLeft) + mCnt.parentElement.offsetWidth));\n                    var vertiTop = undefined;\n                    if (mCntScrollPos < 1 && this.scrollDirection === 'horizondal') {\n                        if (mCnt.parentElement.scrollTop > 0) {\n                            vertiTop = mCnt.parentElement.scrollTop;\n                        }\n                        this.virtualDiv.style.display = 'none';\n                        mCntScrollPos = (mCnt.scrollWidth - (Math.abs(mCnt.scrollLeft) + mCnt.parentElement.offsetWidth));\n                    }\n                    this.virtualDiv.style.display = '';\n                    if (vertiTop) {\n                        mCnt.parentElement.scrollTop = vertiTop;\n                    }\n                    var mCntVScrollPos = (mCnt.scrollWidth - (Math.abs(mCnt.scrollLeft) + mCnt.parentElement.offsetWidth));\n                    if (mCntScrollPos > 1) {\n                        this.scrollPosObject.horizontalSection -= (hScrollPos <= 0 ? (mCntScrollPos > hScrollPos ? mCntScrollPos\n                            : -mCntVScrollPos) : (mCntVScrollPos === mCntScrollPos ? (mCntScrollPos - hScrollPos) :\n                            (mCntScrollPos < mCntVScrollPos && (hScrollPos === mCntVScrollPos || hScrollPos > mCntScrollPos) ?\n                                -(mCntVScrollPos - mCntScrollPos) : 0)));\n                        if (this.grid.height !== 'auto') {\n                            this.scrollPosObject.horizontalSection -= horiScrollHeight;\n                        }\n                        this.scrollPosObject.horizontalSection = (this.scrollPosObject.horizontalSection >=\n                            -(this.element.querySelector('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.GRID_CLASS)\n                                .querySelector('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.HEADERCELL + '.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.FREEZED_CELL).offsetWidth)) ?\n                            this.scrollPosObject.horizontalSection :\n                            -(this.element.querySelector('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.GRID_CLASS)\n                                .querySelector('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.HEADERCELL + '.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.FREEZED_CELL).offsetWidth);\n                    }\n                    horiOffset = (eleScrollLeft > this.scrollerBrowserLimit) ?\n                        (mCnt.querySelector('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.TABLE).style.transform.split(',')[0].trim() + ',') :\n                        'translate(' + ((this.enableRtl ? 1 : -1) * ((eleScrollLeft * this.horizontalScrollScale)\n                            - this.scrollPosObject.horizontalSection - eleScrollLeft)) + 'px,';\n                    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.setStyleAttribute)(mCnt.querySelector('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.TABLE), {\n                        transform: horiOffset + verOffset\n                    });\n                    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.setStyleAttribute)(mHdr.querySelector('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.TABLE), {\n                        transform: horiOffset + 0 + 'px)'\n                    });\n                    translateValue = Number(-mCnt.querySelector('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.TABLE).style.transform.split('(')[1].split(',')[0].split('px')[0]);\n                    this.virtualscrollModule.alignFreezedCells(translateValue, true);\n                }\n            }\n            if (this.currentView !== 'Chart') {\n                this.grid.hideScroll();\n            }\n            if (this.showGroupingBar) {\n                if (this.groupingBarModule && this.element.querySelector('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.GROUPING_BAR_CLASS)) {\n                    this.groupingBarModule.setGridRowWidth();\n                }\n                if (this.actionObj.fieldInfo && this.actionObj.fieldInfo.fieldName) {\n                    var pivotButton = this.pivotButtonModule.parentElement.querySelector(\"[data-uid=\\\"\" + this.actionObj.fieldInfo.fieldName + \"\\\"]\");\n                    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(pivotButton)) {\n                        pivotButton.focus();\n                    }\n                }\n                this.element.style.minWidth = this.isAdaptive ? (this.minWidth ? this.minWidth + 'px' : '310px') : this.minWidth ? this.minWidth + 'px' : '400px';\n                this.grid.element.style.minWidth = this.isAdaptive ? (this.minWidth ? this.minWidth + 'px' : '310px') : this.minWidth ? this.minWidth + 'px' : '400px';\n            }\n            else {\n                this.element.style.minWidth = this.minWidth ? this.minWidth + 'px' : '310px';\n                this.grid.element.style.minWidth = this.minWidth ? this.minWidth + 'px' : '310px';\n            }\n        }\n        this.unwireEvents();\n        this.wireEvents();\n        this.isChartLoaded = false;\n        if (!this.isEmptyGrid) {\n            this.trigger(_common_base_constant__WEBPACK_IMPORTED_MODULE_3__.dataBound);\n        }\n        this.actionObj.actionName = this.getActionCompleteName();\n        if (this.actionObj.actionName) {\n            if (this.actionObj.actionName === _common_base_constant__WEBPACK_IMPORTED_MODULE_3__.fieldFiltered && this.pivotCommon && this.pivotCommon.filterDialog) {\n                clearTimeout(this.timeOutObj);\n                this.timeOutObj = setTimeout(this.pivotCommon.filterDialog.setFocus.bind(this.pivotCommon.filterDialog));\n            }\n            if (this.actionObj.actionName !== _common_base_constant__WEBPACK_IMPORTED_MODULE_3__.windowResize) {\n                this.actionCompleteMethod();\n            }\n        }\n        if (this.groupingModule) {\n            this.groupingModule.isUpdate = false;\n        }\n        if (this.engineModule) {\n            this.engineModule.clearProperties();\n        }\n        if (this.virtualscrollModule && this.grid) {\n            this.virtualscrollModule.onHorizondalScroll(mHdr, mCnt);\n        }\n        if (!this.isAdaptive && this.enableVirtualization && mCnt && this.virtualscrollModule && !enableOptimizedRendering) {\n            var movableVirtualScrollBar = mCnt.parentElement.parentElement.querySelector('.e-movablescrolldiv');\n            if (vWidth < (mCnt.parentElement.clientWidth * 3)) {\n                mCnt.style.overflowX = 'visible';\n                movableVirtualScrollBar.style.display = 'none';\n                mHdr.scrollLeft = mCnt.parentElement.scrollLeft;\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.setStyleAttribute)(mCnt.querySelector('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.TABLE), {\n                    transform: 'translate(0px,' + verOffset\n                });\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.setStyleAttribute)(mHdr.querySelector('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.TABLE), {\n                    transform: 'translate(0px, 0px)'\n                });\n                this.virtualscrollModule.alignFreezedCells(0, true);\n            }\n            else {\n                _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(this.element.querySelector('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.GRID_CONTENT).querySelector('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.CONTENT_CLASS), 'scroll', this.headerScrollUpdate);\n                var contentLeft = this.element.querySelector('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.GRID_CONTENT).querySelector('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.CONTENT_CLASS).scrollLeft;\n                mCnt.style.overflowX = 'auto';\n                movableVirtualScrollBar.style.display = 'block';\n                if (contentLeft !== 0) {\n                    movableVirtualScrollBar.scrollLeft = contentLeft;\n                }\n                if ((movableVirtualScrollBar.scrollLeft !== mCnt.scrollLeft) && (mCnt.scrollLeft !== 0)) {\n                    movableVirtualScrollBar.scrollLeft = mCnt.scrollLeft;\n                }\n            }\n        }\n        this.isStaticRefresh = false;\n    };\n    PivotView.prototype.setToolTip = function (args) {\n        var _this_1 = this;\n        var colIndex = parseInt(args.target.getAttribute('aria-colindex'), 10) - 1;\n        var rowIndex = Number(args.target.getAttribute('index'));\n        var cell = (this.dataSourceSettings.values.length > 0 && this.pivotValues &&\n            this.pivotValues[rowIndex] && this.pivotValues[rowIndex][colIndex]) ?\n            this.pivotValues[rowIndex][colIndex] : undefined;\n        this.tooltip.content = '';\n        var aggregateType;\n        var caption;\n        var hasField = false;\n        if (cell && this.dataType === 'olap') {\n            var measureName = cell.actualText;\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(measureName) && this.olapEngineModule.fieldList &&\n                !this.olapEngineModule.fieldList[measureName]) {\n                var tupleInfo = this.olapEngineModule.tupRowInfo;\n                measureName = cell.rowOrdinal > -1 && tupleInfo.length > 0 && tupleInfo[cell.rowOrdinal] &&\n                    !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(tupleInfo[cell.rowOrdinal].measureName) ? tupleInfo[cell.rowOrdinal].measureName : measureName;\n            }\n            if (this.olapEngineModule.fieldList && this.olapEngineModule.fieldList[measureName]) {\n                var field = this.olapEngineModule.fieldList[measureName];\n                aggregateType = field.isCalculatedField ? field.type : field.aggregateType;\n                caption = (this.olapEngineModule.dataFields[measureName] &&\n                    this.olapEngineModule.dataFields[measureName].caption) ?\n                    this.olapEngineModule.dataFields[measureName].caption : field.caption;\n                hasField = true;\n            }\n        }\n        else {\n            if (cell && this.engineModule.fieldList && this.engineModule.fieldList[cell.actualText]) {\n                var field = this.engineModule.fieldList[cell.actualText];\n                aggregateType = field.aggregateType;\n                if ((aggregateType !== 'DistinctCount') && (field.type !== 'number' || field.type === 'include' ||\n                    field.type === 'exclude')) {\n                    aggregateType = 'Count';\n                }\n                else {\n                    aggregateType = (aggregateType === undefined) ? 'Sum' : field.aggregateType;\n                }\n                caption = field.caption;\n                hasField = true;\n            }\n        }\n        if (cell && hasField) {\n            var columnIndex = (this.isTabular && this.engineModule.rowMaxLevel > 0) ? this.engineModule.rowMaxLevel : 0;\n            var rowHeaders = this.getRowText(rowIndex, columnIndex);\n            var columnHeaders = this.getColText(0, colIndex, rowIndex);\n            var value = (cell.formattedText === '' ? this.localeObj.getConstant('noValue') :\n                cell.formattedText);\n            if (this.tooltipTemplate && this.getTooltipTemplate() !== undefined) {\n                var rowFields = this.getHeaderField(rowIndex, colIndex, 'row');\n                var columnFields = this.getHeaderField(rowIndex, colIndex, 'column');\n                var templateObject = {\n                    rowHeaders: rowHeaders,\n                    columnHeaders: columnHeaders,\n                    aggregateType: aggregateType,\n                    valueField: caption,\n                    value: value,\n                    rowFields: rowFields,\n                    columnFields: columnFields\n                };\n                if (typeof (this.tooltipTemplate) === 'function' && this.isReact) {\n                    var tooltipContent_1 = document.createElement('div');\n                    this.getTooltipTemplate()(templateObject, this, 'tooltipTemplate', this.element.id + 'tooltipTemplate', null, null, tooltipContent_1);\n                    this.renderReactTemplates(function () {\n                        if (_this_1.enableHtmlSanitizer) {\n                            _this_1.tooltip.content = _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.SanitizeHtmlHelper.sanitize(tooltipContent_1.outerHTML);\n                        }\n                        else {\n                            _this_1.tooltip.content = tooltipContent_1.outerHTML;\n                        }\n                    });\n                }\n                else {\n                    var element = this.getTooltipTemplate()(templateObject, this, 'tooltipTemplate', this.element.id + 'tooltipTemplate')[0].outerHTML;\n                    if (this.enableHtmlSanitizer) {\n                        this.tooltip.content = _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.SanitizeHtmlHelper.sanitize(element);\n                    }\n                    else {\n                        this.tooltip.content = element;\n                    }\n                }\n            }\n            else {\n                var contentTemp_1 = '<div class=' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.PIVOTTOOLTIP + '><p class=' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.TOOLTIP_HEADER + '>' +\n                    this.localeObj.getConstant('row') + ':</p><p class=' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.TOOLTIP_CONTENT + '>' +\n                    rowHeaders + '</p></br><p class=' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.TOOLTIP_HEADER + '>' + this.localeObj.getConstant('column') +\n                    ':</p><p class=' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.TOOLTIP_CONTENT + '>' + columnHeaders + '</p></br>' +\n                    (cell.actualText !== '' ? ('<p class=' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.TOOLTIP_HEADER + '>' + (this.dataType === 'olap' ? '' :\n                        (this.localeObj.getConstant(aggregateType) + ' ' + this.localeObj.getConstant('of') + ' ')) +\n                        caption + ':</p><p class=' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.TOOLTIP_CONTENT + '>' + value + '</p></div>') : '');\n                var contentFunc = function () {\n                    return contentTemp_1;\n                };\n                this.tooltip.content = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.initializeCSPTemplate)(contentFunc);\n            }\n        }\n        else {\n            args.cancel = true;\n        }\n    };\n    /** @hidden */\n    PivotView.prototype.getTooltipTemplate = function () {\n        return this.tooltipTemplateFn;\n    };\n    /** @hidden */\n    PivotView.prototype.getHeaderField = function (rowIndex, colIndex, axis) {\n        var fields = '';\n        var len;\n        var engineModule = this.dataType === 'olap' ? this.olapEngineModule : this.engineModule;\n        var delimiter = engineModule.valueSortSettings.headerDelimiter;\n        if (axis === 'row') {\n            len = this.pivotValues[rowIndex][0].valueSort.levelName.toString().split(delimiter).length;\n            for (var i = 0; i < len && this.dataSourceSettings.rows.length > 0 && this.dataSourceSettings.rows[i]; i++) {\n                fields += (i ? ' - ' : '') + ((this.dataSourceSettings.rows[i].caption) ? this.dataSourceSettings.rows[i].caption : this.dataSourceSettings.rows[i].name);\n            }\n        }\n        else {\n            if (this.dataSourceSettings.columns.length > 0) {\n                var pos = this.dataSourceSettings.values.length === 0 ? 0 :\n                    Number(Object.keys(engineModule.headerContent)[Object.keys(engineModule.headerContent).length - 1]);\n                len =\n                    this.pivotValues[pos][colIndex].valueSort.levelName.toString().split(delimiter).length;\n                len = this.dataSourceSettings.values.length > 1 ? len - 1 : len;\n            }\n            for (var j = 0; j < len && this.dataSourceSettings.columns.length > 0 &&\n                this.dataSourceSettings.columns[j]; j++) {\n                fields += (j ? ' - ' : '') + ((this.dataSourceSettings.columns[j].caption) ? this.dataSourceSettings.columns[j].caption : this.dataSourceSettings.columns[j].name);\n            }\n        }\n        return fields;\n    };\n    PivotView.prototype.getLevel = function (cell) {\n        var levelName = cell.valueSort ? cell.valueSort.levelName.toString() : '';\n        var memberPos = cell.actualText ?\n            cell.actualText.toString().split(this.dataSourceSettings.valueSortSettings.headerDelimiter).length : 0;\n        var levelPosition = levelName.split(this.dataSourceSettings.valueSortSettings.headerDelimiter).length -\n            (memberPos ? memberPos - 1 : memberPos);\n        return levelPosition ? (levelPosition - 1) : 0;\n    };\n    /**\n     * It used to get row text\n     *\n     * @param {number} rowIndex - Specifies row Index.\n     * @param {number} colIndex - Specifies column Index.\n     * @returns {string} - Returns row text.\n     * @hidden\n     */\n    PivotView.prototype.getRowText = function (rowIndex, colIndex) {\n        var cell = this.pivotValues[rowIndex][colIndex];\n        var rowText = '';\n        if (cell) {\n            var level = this.getLevel(cell);\n            rowText = cell.type === 'grand sum' ? this.localeObj.getConstant('grandTotal') : cell.formattedText;\n            if (this.dataSourceSettings.valueAxis === 'row') {\n                rowText = (this.dataSourceSettings.rows.length === 0 && this.dataSourceSettings.values.length > 1) ? this.pivotValues[rowIndex][0].valueSort.levelName.toString().slice((this.localeObj.getConstant('grandTotal')\n                    + this.dataSourceSettings.valueSortSettings.headerDelimiter).length).toString()\n                    : this.dataSourceSettings.values.length === 1 ? !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.dataSourceSettings.values[0].caption)\n                        ? this.dataSourceSettings.values[0].caption : this.dataSourceSettings.values[0].name\n                        : this.pivotValues[rowIndex][0].valueSort.levelName.toString();\n                rowText = rowText.split(this.dataSourceSettings.valueSortSettings.headerDelimiter).join(' - ');\n            }\n            else {\n                if (this.isTabular) {\n                    while (level > 0) {\n                        colIndex--;\n                        cell = this.pivotValues[rowIndex][colIndex];\n                        rowText = rowText + this.dataSourceSettings.valueSortSettings.headerDelimiter + cell.formattedText;\n                        level = level - 1;\n                    }\n                }\n                else {\n                    while (level > 0 || cell.index === undefined) {\n                        rowIndex--;\n                        cell = this.pivotValues[rowIndex][colIndex];\n                        if (cell.index !== undefined) {\n                            if (level > cell.level) {\n                                rowText = rowText + this.dataSourceSettings.valueSortSettings.headerDelimiter + cell.formattedText;\n                                level = level - 1;\n                            }\n                        }\n                    }\n                }\n            }\n            rowText = rowText.split(this.dataSourceSettings.valueSortSettings.headerDelimiter).reverse().join(' - ');\n        }\n        return rowText;\n    };\n    PivotView.prototype.getColText = function (rowIndex, colIndex, limit) {\n        var cell = this.pivotValues[0][colIndex];\n        var axis = cell.axis;\n        var colText = cell.type === 'grand sum' ? this.localeObj.getConstant('grandTotal') : cell.formattedText;\n        while (axis !== 'value' && limit > rowIndex) {\n            rowIndex++;\n            if (this.pivotValues[rowIndex]) {\n                cell = this.pivotValues[rowIndex][colIndex];\n                axis = cell.axis;\n                if (cell.type !== 'sum' && cell.type !== 'grand sum' && axis !== 'value') {\n                    colText = colText + ' - ' + cell.formattedText;\n                }\n            }\n        }\n        return colText;\n    };\n    PivotView.prototype.updateClass = function () {\n        if (this.enableRtl) {\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([this.element], _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.RTL);\n        }\n        else {\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([this.element], _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.RTL);\n        }\n        if (this.isAdaptive) {\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([this.element], _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.DEVICE);\n        }\n        else {\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([this.element], _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.DEVICE);\n        }\n        if (this.cssClass) {\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([this.element], this.cssClass.split(' '));\n        }\n    };\n    PivotView.prototype.mouseRclickHandler = function (e) {\n        if (e.which === 3) {\n            this.lastCellClicked = e.target;\n        }\n        else if (e.which === 0) {\n            this.lastCellClicked = e.target;\n        }\n        this.lastCellClicked = e.target;\n    };\n    PivotView.prototype.mouseDownHandler = function (e) {\n        if (e.which === 3) {\n            this.lastCellClicked = e.target;\n        }\n        if (this.isCellBoxMultiSelection) {\n            this.isMouseDown = e.target.closest('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.PIVOT_BUTTON_CLASS) ? false : true;\n            this.isMouseUp = false;\n            this.lastSelectedElement = undefined;\n        }\n    };\n    PivotView.prototype.mouseMoveHandler = function (e) {\n        var _this_1 = this;\n        if (this.isCellBoxMultiSelection) {\n            e.preventDefault();\n            var ele_1 = e.target ? e.target : undefined;\n            if (this.isMouseDown && ele_1 && (!ele_1.classList.contains('e-expand') && !ele_1.classList.contains('e-collapse'))) {\n                var axis = (ele_1.parentElement.classList.contains(_common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.ROWSHEADER) || ele_1.classList.contains(_common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.ROWSHEADER)) ? 'row' : 'column';\n                ele_1 = axis === 'column' ? (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(ele_1, 'th') : (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(ele_1, 'td');\n                if (ele_1) {\n                    var colIndex = parseInt(ele_1.getAttribute('aria-colindex'), 10) - 1;\n                    var rowIndex = Number(ele_1.getAttribute('index'));\n                    var selectArgs = {\n                        cancel: false,\n                        isCellClick: true,\n                        currentCell: ele_1,\n                        data: this.pivotValues[rowIndex][colIndex]\n                    };\n                    this.trigger(_common_base_constant__WEBPACK_IMPORTED_MODULE_3__.cellSelecting, selectArgs, function (observedArgs) {\n                        if (!observedArgs.cancel) {\n                            _this_1.grid.clearSelection();\n                            var parentElement = _this_1.parentAt(ele_1, 'TH');\n                            if (_this_1.lastSelectedElement && _this_1.lastSelectedElement !== parentElement &&\n                                parentElement.classList.contains(_common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.SELECTED_BGCOLOR)) {\n                                _this_1.lastSelectedElement.classList.remove(_common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.CELL_ACTIVE_BGCOLOR);\n                                _this_1.lastSelectedElement.classList.remove(_common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.SELECTED_BGCOLOR);\n                                _this_1.lastSelectedElement = parentElement;\n                            }\n                            else {\n                                _this_1.lastSelectedElement = parentElement;\n                                if (!(parentElement.classList.contains(_common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.HEADERCELL) &&\n                                    parentElement.classList.contains(_common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.FREEZED_CELL))) {\n                                    parentElement.classList.add(_common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.CELL_ACTIVE_BGCOLOR);\n                                    parentElement.classList.add(_common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.SELECTED_BGCOLOR);\n                                }\n                            }\n                            _this_1.renderModule.selected();\n                        }\n                    });\n                }\n            }\n        }\n    };\n    PivotView.prototype.mouseUpHandler = function () {\n        if (this.isCellBoxMultiSelection) {\n            this.isMouseDown = false;\n            this.isMouseUp = true;\n        }\n    };\n    PivotView.prototype.parentAt = function (target, tagName) {\n        while (target.tagName !== tagName) {\n            if (target.parentElement) {\n                target = target.parentElement;\n            }\n            else {\n                break;\n            }\n        }\n        return target;\n    };\n    PivotView.prototype.mouseClickHandler = function (e) {\n        if (e.which === 3) {\n            this.lastCellClicked = e.target;\n        }\n        else if (e.which === 0) {\n            this.lastCellClicked = e.target;\n        }\n        var target = e.target;\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(target, '.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.PIVOT_BUTTON_CLASS)) {\n            return;\n        }\n        var ele = null;\n        var rowHeaderCell = target.closest('td.e-rowsheader');\n        var axis = rowHeaderCell ? 'row' : 'column';\n        ele = axis === 'column' ? (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(target, 'th') : (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(target, 'td');\n        if (axis === 'column' && !ele && this.gridSettings.selectionSettings.mode !== 'Row') {\n            ele = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(target, 'td');\n        }\n        if (!target.classList.contains(_common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.COLLAPSE) && !target.classList.contains(_common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.EXPAND) && this.enableValueSorting && !target.classList.contains(_common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.RESIZED) && !(target.classList.contains(_common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.RHANDLER) && target.classList.contains(_common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.RCURSOR)) && !(this.dataType === 'olap' && this.enableVirtualization)) {\n            var engine = this.dataType === 'pivot' ? this.engineModule : this.olapEngineModule;\n            this.cellClicked(target, ele, e);\n            try {\n                if (ele && ((ele.parentElement.parentElement.parentElement.parentElement.classList.contains(_common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.HEADERCONTENT) &&\n                    this.dataSourceSettings.valueAxis === 'column' && !ele.classList.contains(_common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.FREEZED_CELL)) ||\n                    (ele.parentElement.classList.contains('e-row') && this.dataSourceSettings.valueAxis === 'row') &&\n                        (ele.classList.contains('e-rowsheader') || ele.classList.contains('e-stot')))) {\n                    var FieldName = ele.getAttribute('fieldname');\n                    var fieldInfo = _base_util__WEBPACK_IMPORTED_MODULE_15__.PivotUtil.getFieldInfo(FieldName, this);\n                    this.actionObj.actionName = _common_base_constant__WEBPACK_IMPORTED_MODULE_3__.sortValue;\n                    this.actionObj.fieldInfo = fieldInfo.fieldItem;\n                    if (this.actionBeginMethod()) {\n                        return;\n                    }\n                    var colIndex = parseInt(ele.getAttribute('aria-colindex'), 10) - 1;\n                    var rowIndex = Number(ele.getAttribute('index'));\n                    if (this.dataSourceSettings.valueAxis === 'row' && (this.dataSourceSettings.values.length > 1 || this.dataSourceSettings.alwaysShowValueHeader)) {\n                        var header = this.pivotValues[rowIndex][colIndex];\n                        if (this.dataSourceSettings.valueIndex === -1) {\n                            rowIndex = header.type === 'value' || header.memberType === 3 ? rowIndex : (rowIndex + 1);\n                        }\n                        else {\n                            var level = this.getLevel(header);\n                            rowIndex = (level <= engine.measureIndex && header.members && header.members.length > 0) ?\n                                header.members[0].rowIndex : rowIndex;\n                        }\n                    }\n                    else if (this.dataSourceSettings.valueAxis === 'column' && (this.dataSourceSettings.values.length > 1 || this.dataSourceSettings.alwaysShowValueHeader)) {\n                        colIndex = ((parseInt(ele.getAttribute('aria-colindex'), 10) - 1) + Number(ele.getAttribute('aria-colspan')) - 1);\n                        rowIndex = engine.headerContent.length - 1;\n                    }\n                    this.setProperties({\n                        dataSourceSettings: {\n                            valueSortSettings: {\n                                columnIndex: ((parseInt(ele.getAttribute('aria-colindex'), 10) - 1) + Number(ele.getAttribute('aria-colspan')) - 1),\n                                sortOrder: this.dataSourceSettings.valueSortSettings.sortOrder === 'Descending' ?\n                                    'Ascending' : 'Descending',\n                                headerText: this.pivotValues[rowIndex][colIndex].valueSort.levelName,\n                                headerDelimiter: this.dataSourceSettings.valueSortSettings.headerDelimiter ?\n                                    this.dataSourceSettings.valueSortSettings.headerDelimiter : '.'\n                            }\n                        }\n                    }, true);\n                    this.showWaitingPopup();\n                    var pivot = this;\n                    engine.enableValueSorting = true;\n                    if (pivot.enableVirtualization || pivot.enablePaging) {\n                        if (pivot.dataSourceSettings.enableSorting) {\n                            for (var _i = 0, _a = Object.keys(pivot.engineModule.fieldList); _i < _a.length; _i++) {\n                                var key = _a[_i];\n                                pivot.engineModule.fieldList[key].sort = 'Ascending';\n                            }\n                            pivot.setProperties({ dataSourceSettings: { sortSettings: [] } }, true);\n                        }\n                        if (pivot.dataSourceSettings.mode === 'Server') {\n                            pivot.getEngine('onValueSort', null, null, null, null, null, null);\n                        }\n                        else {\n                            pivot.engineModule.rMembers = pivot.engineModule.headerCollection.rowHeaders;\n                            pivot.engineModule.cMembers = pivot.engineModule.headerCollection.columnHeaders;\n                            pivot.engineModule.applyValueSorting();\n                            pivot.engineModule.updateEngine();\n                        }\n                    }\n                    else if (pivot.dataSourceSettings.mode === 'Server') {\n                        pivot.getEngine('onValueSort', null, null, null, null, null, null);\n                    }\n                    else if (this.dataType === 'olap') {\n                        pivot.olapEngineModule.onSort(pivot.dataSourceSettings, true);\n                    }\n                    else {\n                        pivot.engineModule.generateGridData(pivot.dataSourceSettings, true);\n                    }\n                    pivot.allowServerDataBinding = false;\n                    pivot.setProperties({ pivotValues: engine.pivotValues }, true);\n                    pivot.allowServerDataBinding = true;\n                    var actionInfo = {\n                        valueSortInfo: engine.valueSortSettings\n                    };\n                    this.actionObj.actionInfo = actionInfo;\n                    pivot.renderPivotGrid();\n                }\n            }\n            catch (execption) {\n                this.actionFailureMethod(execption);\n            }\n        }\n        else if (target.classList.contains(_common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.COLLAPSE) || target.classList.contains(_common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.EXPAND)) {\n            var drillFieldName = target.parentElement.getAttribute('fieldname');\n            var fieldInfo = _base_util__WEBPACK_IMPORTED_MODULE_15__.PivotUtil.getFieldInfo(drillFieldName, this);\n            var actionName = target.classList.contains(_common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.COLLAPSE) ? this.actionObj.actionName = _common_base_constant__WEBPACK_IMPORTED_MODULE_3__.drillUp : target.classList.contains(_common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.EXPAND) ? this.actionObj.actionName = _common_base_constant__WEBPACK_IMPORTED_MODULE_3__.drillDown : '';\n            this.actionObj.actionName = actionName;\n            this.actionObj.fieldInfo = fieldInfo.fieldItem;\n            if (this.actionBeginMethod()) {\n                return;\n            }\n            try {\n                this.onDrill(target);\n            }\n            catch (execption) {\n                this.actionFailureMethod(execption);\n            }\n        }\n        else {\n            this.cellClicked(target, ele, e);\n            return;\n        }\n    };\n    PivotView.prototype.updateTotColWidth = function () {\n        this.totColWidth = 0;\n        for (var _i = 0, _a = this.pivotColumns; _i < _a.length; _i++) {\n            var column = _a[_i];\n            this.totColWidth = this.totColWidth + column.width;\n        }\n    };\n    PivotView.prototype.framePivotColumns = function (gridcolumns) {\n        for (var _i = 0, gridcolumns_1 = gridcolumns; _i < gridcolumns_1.length; _i++) {\n            var column = gridcolumns_1[_i];\n            if (column.columns && column.columns.length > 0) {\n                this.framePivotColumns(column.columns);\n            }\n            else {\n                var levelName = column.field === '0.formattedText' ? '' : ((column.customAttributes &&\n                    column.customAttributes.cell && column.customAttributes.cell.valueSort) ?\n                    column.customAttributes.cell.valueSort.levelName : '');\n                var width = this.renderModule.setSavedWidth(column.field === '0.formattedText' ? column.field :\n                    levelName, Number(column.width === 'auto' ? column.minWidth : column.width));\n                this.pivotColumns.push({\n                    allowReordering: column.allowReordering,\n                    allowResizing: column.allowResizing,\n                    headerText: levelName,\n                    width: width,\n                    autoFit: column.autoFit\n                });\n                this.totColWidth = this.totColWidth + Number(width);\n            }\n        }\n    };\n    /** @hidden */\n    PivotView.prototype.setGridColumns = function (gridcolumns) {\n        if ((!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.totColWidth) && this.totColWidth > 0) || this.renderModule.isAutoFitEnabled) {\n            for (var _i = 0, gridcolumns_2 = gridcolumns; _i < gridcolumns_2.length; _i++) {\n                var column = gridcolumns_2[_i];\n                if (column.columns && column.columns.length > 0) {\n                    this.setGridColumns(column.columns);\n                }\n                else if (this.renderModule.isAutoFitEnabled) {\n                    column.autoFit = this.pivotColumns[this.posCount].autoFit;\n                    this.posCount++;\n                }\n                else {\n                    var levelName = column.field === '0.formattedText' ? '' :\n                        (column.customAttributes ? column.customAttributes.cell.valueSort.levelName : '');\n                    column.allowReordering = this.pivotColumns[this.posCount].allowReordering;\n                    column.allowResizing = this.pivotColumns[this.posCount].allowResizing;\n                    column.autoFit = this.pivotColumns[this.posCount].autoFit;\n                    var calcWidth = this.renderModule.setSavedWidth(column.field === '0.formattedText' ? column.field :\n                        levelName, Number(this.pivotColumns[this.posCount].width));\n                    if (!column.autoFit) {\n                        if (column.width !== 'auto') {\n                            column.width = calcWidth;\n                        }\n                        else {\n                            column.minWidth = calcWidth;\n                        }\n                    }\n                    else {\n                        this.renderModule.isAutoFitEnabled = true;\n                    }\n                    this.posCount++;\n                    if (column.allowReordering) {\n                        this.gridSettings.allowReordering = true;\n                    }\n                    if (column.allowResizing) {\n                        this.gridSettings.allowResizing = true;\n                    }\n                }\n            }\n            if (this.gridSettings.allowReordering) {\n                _syncfusion_ej2_grids__WEBPACK_IMPORTED_MODULE_9__.Grid.Inject(_syncfusion_ej2_grids__WEBPACK_IMPORTED_MODULE_9__.Reorder);\n            }\n            if (this.gridSettings.allowResizing) {\n                _syncfusion_ej2_grids__WEBPACK_IMPORTED_MODULE_9__.Grid.Inject(_syncfusion_ej2_grids__WEBPACK_IMPORTED_MODULE_9__.Resize);\n            }\n        }\n    };\n    /** @hidden */\n    PivotView.prototype.fillGridColumns = function (gridcolumns) {\n        for (var _i = 0, gridcolumns_3 = gridcolumns; _i < gridcolumns_3.length; _i++) {\n            var column = gridcolumns_3[_i];\n            column.allowReordering = this.gridSettings.allowReordering;\n            column.allowResizing = this.gridSettings.allowResizing;\n            column.clipMode = this.gridSettings.clipMode;\n            this.posCount++;\n            if (column.columns && column.columns.length > 0) {\n                this.fillGridColumns(column.columns);\n            }\n        }\n    };\n    /** @hidden */\n    PivotView.prototype.triggerColumnRenderEvent = function (gridcolumns) {\n        this.pivotColumns = [];\n        this.totColWidth = 0;\n        this.framePivotColumns(gridcolumns);\n        var firstColWidth = this.pivotColumns[0].width;\n        var eventArgs = {\n            columns: this.pivotColumns,\n            dataSourceSettings: this.dataSourceSettings,\n            stackedColumns: this.getStackedColumns(gridcolumns, [])\n        };\n        this.trigger(_common_base_constant__WEBPACK_IMPORTED_MODULE_3__.beforeColumnsRender, eventArgs);\n        this.updateTotColWidth();\n        if (firstColWidth !== this.pivotColumns[0].width) {\n            this.firstColWidth = this.pivotColumns[0].width;\n            this.renderModule.resColWidth = parseInt(this.firstColWidth.toString(), 10);\n        }\n        this.posCount = 0;\n        this.setGridColumns(gridcolumns);\n    };\n    /** @hidden */\n    PivotView.prototype.setCommonColumnsWidth = function (columns, width) {\n        for (var _i = 0, columns_1 = columns; _i < columns_1.length; _i++) {\n            var column = columns_1[_i];\n            if (this.isTabular) {\n                if (column.index > this.engineModule.rowMaxLevel) {\n                    if (column.columns) {\n                        this.setCommonColumnsWidth(column.columns, width);\n                    }\n                    else {\n                        this.setColumnWidth(column, width);\n                    }\n                }\n                else {\n                    column.width = !this.firstColWidth ? column.width : this.firstColWidth;\n                }\n            }\n            else {\n                if (column.field !== '0.formattedText') {\n                    if (column.columns) {\n                        this.setCommonColumnsWidth(column.columns, width);\n                    }\n                    else {\n                        this.setColumnWidth(column, width);\n                    }\n                }\n                else {\n                    column.width = !this.firstColWidth ? column.width : this.firstColWidth;\n                }\n            }\n        }\n    };\n    /** @hidden */\n    PivotView.prototype.getHeightAsNumber = function () {\n        var height;\n        var displayMode;\n        if (isNaN(this.height)) {\n            if (this.height.toString().indexOf('%') > -1) {\n                if (this.isAngular && this.element && this.element.style) {\n                    displayMode = window.getComputedStyle(this.element).display;\n                    this.element.style.display = 'block';\n                }\n                height = (parseFloat(this.height.toString()) / 100) * this.element.offsetHeight;\n                if (this.isAngular && this.element && this.element.style) {\n                    this.element.style.display = displayMode;\n                }\n            }\n            else if (this.height.toString().indexOf('px') > -1) {\n                height = Number(this.height.toString().split('px')[0]);\n            }\n        }\n        else {\n            height = Number(this.height);\n        }\n        if ((height < this.minHeight) || (this.height === 'auto')) {\n            height = this.minHeight;\n        }\n        return height;\n    };\n    /** @hidden */\n    PivotView.prototype.getWidthAsNumber = function () {\n        var width;\n        if (isNaN(this.width)) {\n            if (this.width.toString().indexOf('%') > -1) {\n                width = (parseFloat(this.width.toString()) / 100) * this.element.offsetWidth;\n            }\n            else if (this.width.toString().indexOf('px') > -1) {\n                width = Number(this.width.toString().split('px')[0]);\n            }\n            if (isNaN(width)) {\n                width = this.element.offsetWidth;\n            }\n        }\n        else {\n            width = Number(this.width);\n        }\n        if (width < 400 && !this.isAdaptive) {\n            width = this.minWidth ? this.minWidth : 400;\n        }\n        else if (this.isAdaptive && width < 310) {\n            width = this.minWidth ? this.minWidth : 310;\n        }\n        return width;\n    };\n    /** @hidden */\n    PivotView.prototype.getGridWidthAsNumber = function () {\n        var width;\n        var offsetWidth = this.element.offsetWidth ? this.element.offsetWidth :\n            this.element.getBoundingClientRect().width;\n        if (isNaN(this.grid.width)) {\n            if (this.grid.width.toString().indexOf('%') > -1) {\n                width = (parseFloat(this.grid.width.toString()) / 100) * offsetWidth;\n            }\n            else if (this.grid.width.toString().indexOf('px') > -1) {\n                width = Number(this.grid.width.toString().split('px')[0]);\n            }\n            if (isNaN(width)) {\n                width = offsetWidth;\n            }\n        }\n        else {\n            width = Number(this.grid.width);\n        }\n        return width;\n    };\n    /** @hidden */\n    PivotView.prototype.onWindowResize = function () {\n        this.actionObj.actionName = _common_base_constant__WEBPACK_IMPORTED_MODULE_3__.windowResize;\n        if (this.actionBeginMethod()) {\n            return;\n        }\n        clearTimeout(this.timeOutObj);\n        this.timeOutObj = setTimeout(this.layoutRefresh.bind(this), 500);\n        this.actionObj.actionName = this.getActionCompleteName();\n        if (this.actionObj.actionName) {\n            this.actionCompleteMethod();\n        }\n    };\n    /**\n     * Refreshes the Pivot Table for blazor layoutRefresh is called for other base refresh is called.\n     *\n     * @returns {void}\n     */\n    PivotView.prototype.refresh = function () {\n        this.pivotRefresh();\n    };\n    /** @hidden */\n    PivotView.prototype.layoutRefresh = function () {\n        if (this.element && this.element.classList.contains('e-pivotview') &&\n            (this.dataType === 'olap' ? (this.olapEngineModule && this.olapEngineModule.pivotValues) :\n                this.engineModule && this.engineModule.pivotValues)) {\n            if (this.grid) {\n                var colLength = (this.dataType === 'olap' && this.olapEngineModule.pivotValues.length > 0) ?\n                    this.olapEngineModule.pivotValues[0].length : (this.dataSourceSettings.values.length > 0 &&\n                    this.engineModule && this.engineModule.pivotValues.length > 0 ? this.engineModule.pivotValues[0].length : 2);\n                var colWidth = this.renderModule.calculateColWidth(colLength);\n                this.grid.width = this.renderModule.calculateGridWidth();\n                this.renderModule.calculateGridHeight(true);\n                if (this.gridSettings.allowAutoResizing) {\n                    this.setCommonColumnsWidth(this.grid.columns, colWidth);\n                }\n                this.triggerColumnRenderEvent(this.grid.columns);\n                this.grid.refreshColumns();\n                if (this.renderModule.isAutoFitEnabled) {\n                    this.renderModule.addPivotAutoFitClass();\n                }\n                else {\n                    this.renderModule.removePivotAutoFitClass();\n                }\n                if (this.showGroupingBar && this.groupingBarModule && this.element.querySelector('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.GROUPING_BAR_CLASS)) {\n                    this.groupingBarModule.setGridRowWidth();\n                }\n                if (this.chart && this.pivotChartModule) {\n                    this.chart.height = this.pivotChartModule.getResizedChartHeight();\n                }\n            }\n            if (this.showToolbar && this.toolbarModule && this.toolbarModule.toolbar) {\n                this.toolbarModule.toolbar.width = this.grid ? this.getGridWidthAsNumber() : this.getWidthAsNumber();\n            }\n            if (this.enablePaging) {\n                this.notify(_common_base_constant__WEBPACK_IMPORTED_MODULE_3__.initPivotPager, this);\n            }\n            if (this.chart && ((this.showToolbar && this.currentView === 'Chart') || !this.showToolbar)) {\n                this.chart.width = (this.showToolbar && this.grid) ? this.getGridWidthAsNumber().toString() :\n                    (this.displayOption.view === 'Both' && this.grid) ? this.getGridWidthAsNumber().toString() : this.getWidthAsNumber().toString();\n                this.chart.height = this.pivotChartModule.getResizedChartHeight();\n                if (this.displayOption.view === 'Chart' && this.showGroupingBar && this.groupingBarModule &&\n                    this.element.querySelector('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.CHART_GROUPING_BAR_CLASS)) {\n                    this.groupingBarModule.refreshUI();\n                }\n            }\n        }\n    };\n    PivotView.prototype.cellClicked = function (target, ele, e) {\n        var _this_1 = this;\n        if (target.classList.contains(_common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.ROW_SELECT)) {\n            if (target.classList.contains(_common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.SPAN_CLICKED)) {\n                this.isPopupClicked = false;\n            }\n            else {\n                this.isPopupClicked = true;\n            }\n        }\n        if (ele && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.pivotValues) && this.pivotValues.length > 0) {\n            var colIndex_1 = parseInt(ele.getAttribute('aria-colindex'), 10) - 1;\n            var rowIndex_1 = Number(ele.getAttribute('index'));\n            var colSpan_1 = Number(ele.getAttribute('aria-colspan'));\n            var selectArgs = {\n                cancel: false,\n                isCellClick: true,\n                currentCell: ele,\n                data: this.pivotValues[rowIndex_1][colIndex_1]\n            };\n            this.trigger(_common_base_constant__WEBPACK_IMPORTED_MODULE_3__.cellSelecting, selectArgs, function (observedArgs) {\n                if (_this_1.gridSettings.allowSelection) {\n                    if (_this_1.gridSettings.selectionSettings.mode === 'Both' ? !ele.classList.contains(_common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.ROW_CELL_CLASS) :\n                        _this_1.gridSettings.selectionSettings.mode !== 'Row') {\n                        if (!observedArgs.cancel) {\n                            _this_1.clearSelection(ele, e);\n                            _this_1.applyColumnSelection(e, ele, colIndex_1, colIndex_1 + (colSpan_1 > 0 ? (colSpan_1 - 1) : 0), rowIndex_1);\n                        }\n                    }\n                    else {\n                        _this_1.clearSelection(ele, e);\n                    }\n                    if (_this_1.gridSettings.selectionSettings.mode !== 'Column' && !ele.classList.contains(_common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.COLUMNSHEADER)) {\n                        _this_1.rowDeselect(ele, e, rowIndex_1, _this_1.gridSettings.selectionSettings.mode, observedArgs);\n                    }\n                    if (_this_1.gridSettings.selectionSettings.mode !== 'Column' && !observedArgs.cancel) {\n                        if (_this_1.gridSettings.selectionSettings.type === 'Multiple' ? (!e.ctrlKey && !e.shiftKey) :  true && _this_1.selectedRowIndex !== rowIndex_1) {\n                            _this_1.selectedRowIndex = rowIndex_1;\n                            _this_1.grid.selectionModule.selectRow(rowIndex_1 - _this_1.renderModule.rowStartPos);\n                        }\n                        else {\n                            _this_1.selectedRowIndex = undefined;\n                        }\n                    }\n                }\n                if (_this_1.cellClick && observedArgs.isCellClick) {\n                    _this_1.trigger(_common_base_constant__WEBPACK_IMPORTED_MODULE_3__.cellClick, {\n                        currentCell: ele,\n                        data: _this_1.pivotValues[rowIndex_1][colIndex_1],\n                        nativeEvent: e\n                    });\n                }\n                _this_1.getSelectedCellsPos();\n            });\n        }\n        else {\n            this.clearSelection(null, e);\n        }\n    };\n    PivotView.prototype.rowDeselect = function (ele, e, rowIndex, mode, observedArgs) {\n        if (!e.shiftKey && !e.ctrlKey && this.gridSettings.selectionSettings.mode !== 'Both'\n            || this.gridSettings.selectionSettings.type === 'Single') {\n            if (!ele.classList.contains(_common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.CELL_SELECTED_BGCOLOR) && !ele.classList.contains(_common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.SELECTED_BGCOLOR)\n                && !ele.classList.contains(_common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.CELL_ACTIVE_BGCOLOR)) {\n                if (!observedArgs.cancel) {\n                    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)(this.element.querySelectorAll('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.CELL_SELECTED_BGCOLOR), _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.CELL_SELECTED_BGCOLOR);\n                    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)(this.element.querySelectorAll('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.SELECTED_BGCOLOR), _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.SELECTED_BGCOLOR);\n                    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)(this.element.querySelectorAll('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.CELL_ACTIVE_BGCOLOR), _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.CELL_ACTIVE_BGCOLOR);\n                }\n                else {\n                    this.setSavedSelectedCells();\n                }\n            }\n            else {\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)(this.element.querySelectorAll('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.CELL_SELECTED_BGCOLOR), _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.CELL_SELECTED_BGCOLOR);\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)(this.element.querySelectorAll('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.SELECTED_BGCOLOR), _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.SELECTED_BGCOLOR);\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)(this.element.querySelectorAll('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.CELL_ACTIVE_BGCOLOR), _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.CELL_ACTIVE_BGCOLOR);\n                if (!observedArgs.cancel) {\n                    if ((mode === 'Cell')) {\n                        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([ele], [_common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.CELL_SELECTED_BGCOLOR]);\n                    }\n                    else if (mode === 'Row' || this.gridSettings.selectionSettings.type === 'Single') {\n                        var query = '[index=\"' + rowIndex + '\"]';\n                        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)(this.element.querySelectorAll(query), [_common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.SELECTED_BGCOLOR, _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.CELL_ACTIVE_BGCOLOR]);\n                        if (mode !== 'Row') {\n                            ele.classList.add(_common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.CELL_SELECTED_BGCOLOR);\n                        }\n                    }\n                }\n                else {\n                    this.setSavedSelectedCells();\n                }\n            }\n        }\n        else if (((e.shiftKey || e.ctrlKey) || this.gridSettings.selectionSettings.mode === 'Both') && (observedArgs.cancel)) {\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)(this.element.querySelectorAll('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.CELL_SELECTED_BGCOLOR), _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.CELL_SELECTED_BGCOLOR);\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)(this.element.querySelectorAll('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.SELECTED_BGCOLOR), _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.SELECTED_BGCOLOR);\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)(this.element.querySelectorAll('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.CELL_ACTIVE_BGCOLOR), _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.CELL_ACTIVE_BGCOLOR);\n            this.setSavedSelectedCells();\n        }\n    };\n    /** @hidden */\n    PivotView.prototype.clearSelection = function (ele, e) {\n        if ((!e.shiftKey && !e.ctrlKey) || this.gridSettings.selectionSettings.type === 'Single') {\n            if (this.gridSettings.selectionSettings.mode === 'Cell') {\n                if (ele && ele.classList.contains(_common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.COLUMNSHEADER)) {\n                    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)(this.element.querySelectorAll(('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.ROW_CELL_CLASS + '.') + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.CELL_SELECTED_BGCOLOR), _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.CELL_SELECTED_BGCOLOR);\n                }\n                else {\n                    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)(this.element.querySelectorAll(('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.COLUMNSHEADER + '.') + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.CELL_ACTIVE_BGCOLOR), [_common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.CELL_ACTIVE_BGCOLOR, _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.SELECTED_BGCOLOR]);\n                }\n            }\n            else if (this.gridSettings.selectionSettings.mode === 'Both') {\n                if (ele && ele.classList.contains(_common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.ROW_CELL_CLASS)) {\n                    for (var _i = 0, _a = [].slice.call(this.element.querySelectorAll('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.SELECTED_BGCOLOR + ', .' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.CELL_SELECTED_BGCOLOR)); _i < _a.length; _i++) {\n                        var ele_2 = _a[_i];\n                        // if (Number((ele as HTMLElement).getAttribute('index')) !== rowIndex) {\n                        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([ele_2], [_common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.CELL_ACTIVE_BGCOLOR, _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.SELECTED_BGCOLOR, _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.CELL_SELECTED_BGCOLOR]);\n                        // }\n                    }\n                }\n                else {\n                    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)(this.element.querySelectorAll('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.CELL_SELECTED_BGCOLOR), _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.CELL_SELECTED_BGCOLOR);\n                }\n            }\n        }\n    };\n    /** @hidden */\n    PivotView.prototype.applyRowSelection = function (colIndex, rowIndex, e) {\n        var pivotValue = this.engineModule.pivotValues[rowIndex][colIndex];\n        if (!e.ctrlKey && !e.shiftKey && pivotValue && this.selectedRowIndex !== rowIndex) {\n            this.selectedRowIndex = rowIndex;\n            var parentLevel = pivotValue.level;\n            var rCount = rowIndex;\n            do {\n                rCount++;\n                pivotValue = this.engineModule.pivotValues[rCount][colIndex];\n            } while (pivotValue && parentLevel < pivotValue.level);\n            var _this = this;\n            if (this.isAdaptive) {\n                this.rowRangeSelection = {\n                    enable: true,\n                    startIndex: rowIndex - _this.renderModule.rowStartPos,\n                    endIndex: rCount - (1 + _this.renderModule.rowStartPos)\n                };\n            }\n            else {\n                _this.grid.selectionModule.selectRowsByRange(rowIndex -\n                    _this.renderModule.rowStartPos, rCount - (1 + _this.renderModule.rowStartPos));\n            }\n        }\n        else {\n            this.selectedRowIndex = undefined;\n        }\n    };\n    /** @hidden */\n    PivotView.prototype.applyColumnSelection = function (e, target, colStart, colEnd, rowStart) {\n        if (!target.classList.contains(_common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.ROWSHEADER) &&\n            (this.gridSettings.selectionSettings.mode === 'Cell' ? target.classList.contains(_common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.COLUMNSHEADER) : true)) {\n            var isCtrl = e.ctrlKey;\n            if (this.isAdaptive && this.gridSettings.selectionSettings.type === 'Multiple') {\n                this.grid.selectionModule['showPopup'](e);\n                if (this.isPopupClicked) {\n                    this.element.querySelector('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.ROW_SELECT).classList.add(_common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.SPAN_CLICKED);\n                    isCtrl = true;\n                }\n                else {\n                    this.element.querySelector('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.ROW_SELECT).classList.remove(_common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.SPAN_CLICKED);\n                    isCtrl = false;\n                }\n            }\n            var queryStringArray = [];\n            var type = this.gridSettings.selectionSettings.type;\n            var isToggle = target.classList.contains(_common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.CELL_ACTIVE_BGCOLOR);\n            var activeColumns = [];\n            var actColPos = {};\n            for (var cCnt = colStart; cCnt <= colEnd; cCnt++) {\n                activeColumns.push(cCnt.toString());\n            }\n            if (!isCtrl || type === 'Single') {\n                for (var _i = 0, _a = [].slice.call(this.element.querySelectorAll('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.CELL_ACTIVE_BGCOLOR)); _i < _a.length; _i++) {\n                    var ele = _a[_i];\n                    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([ele], [_common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.CELL_ACTIVE_BGCOLOR, _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.SELECTED_BGCOLOR]);\n                    if (activeColumns.indexOf((parseInt(ele.getAttribute('aria-colindex'), 10) - 1).toString()) === -1) {\n                        isToggle = false;\n                    }\n                    var colIndex = parseInt(ele.getAttribute('aria-colindex'), 10) - 1;\n                    actColPos[colIndex] = colIndex;\n                }\n                activeColumns = Object.keys(actColPos).length > 0 ? Object.keys(actColPos).sort(function (a, b) {\n                    return parseInt(a, 10) - parseInt(b, 10);\n                }) : activeColumns;\n            }\n            else {\n                isToggle = false;\n            }\n            if (type === 'Multiple' && e.shiftKey) {\n                this.shiftLockedPos = this.shiftLockedPos.length === 0 ? activeColumns : this.shiftLockedPos;\n                if (Number(this.shiftLockedPos[0]) <= colStart) {\n                    colStart = Number(this.shiftLockedPos[0]);\n                }\n                else {\n                    colEnd = colEnd < Number(this.shiftLockedPos[this.shiftLockedPos.length - 1]) ?\n                        Number(this.shiftLockedPos[this.shiftLockedPos.length - 1]) : colEnd;\n                }\n            }\n            else {\n                this.shiftLockedPos = [];\n            }\n            var rowSelectedList = [];\n            if (e.ctrlKey && this.gridSettings.selectionSettings.mode === 'Both' && type === 'Multiple' && !target.classList.contains(_common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.ROWSHEADER)) {\n                for (var _b = 0, _c = [].slice.call(this.element.querySelectorAll('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.ROWSHEADER + '.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.CELL_SELECTED_BGCOLOR)); _b < _c.length; _b++) {\n                    var ele = _c[_b];\n                    rowSelectedList.push(ele.getAttribute('index'));\n                }\n            }\n            var count = colStart;\n            while (count <= colEnd) {\n                queryStringArray.push('[aria-colindex=\"' + (count + 1) + '\"]' + (this.gridSettings.selectionSettings.mode === 'Cell' ?\n                    '[index=\"' + rowStart + '\"]' : '') + '');\n                count++;\n            }\n            if (!isToggle) {\n                rowStart = target.classList.contains(_common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.HEADERCELL) ? rowStart : (this.renderModule.rowStartPos - 1);\n                var isTargetSelected = target.classList.contains(_common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.CELL_ACTIVE_BGCOLOR);\n                for (var _d = 0, _e = [].slice.call(this.element.querySelectorAll(queryStringArray.toString())); _d < _e.length; _d++) {\n                    var ele = _e[_d];\n                    if (Number(ele.getAttribute('index')) >= rowStart) {\n                        if (isTargetSelected && isCtrl && (rowSelectedList.indexOf(ele.getAttribute('index')) === -1)) {\n                            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([ele], [_common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.CELL_ACTIVE_BGCOLOR, _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.SELECTED_BGCOLOR]);\n                        }\n                        else {\n                            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([ele], [_common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.CELL_ACTIVE_BGCOLOR, _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.SELECTED_BGCOLOR]);\n                        }\n                    }\n                }\n            }\n            this.renderModule.selected();\n        }\n    };\n    PivotView.prototype.getSelectedCellsPos = function () {\n        var control = this;\n        control.savedSelectedCellsPos = [];\n        control.cellSelectionPos = [];\n        for (var _i = 0, _a = [].slice.call(this.element.querySelectorAll('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.SELECTED_BGCOLOR)); _i < _a.length; _i++) {\n            var ele = _a[_i];\n            control.savedSelectedCellsPos.push({ rowIndex: ele.getAttribute('index'), colIndex: (parseInt(ele.getAttribute('aria-colindex'), 10) - 1).toString() });\n        }\n        for (var _b = 0, _c = [].slice.call(this.element.querySelectorAll('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.CELL_SELECTED_BGCOLOR)); _b < _c.length; _b++) {\n            var ele = _c[_b];\n            control.cellSelectionPos.push({ rowIndex: ele.getAttribute('index'), colIndex: (parseInt(ele.getAttribute('aria-colindex'), 10) - 1).toString() });\n        }\n    };\n    PivotView.prototype.setSavedSelectedCells = function () {\n        var control = this;\n        for (var _i = 0, _a = [].slice.call(this.savedSelectedCellsPos); _i < _a.length; _i++) {\n            var item = _a[_i];\n            var query = '[aria-colindex=\"' + (parseInt(item.colIndex, 10) + 1) + '\"][index=\"' + item.rowIndex + '\"]';\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([control.element.querySelector(query)], [_common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.CELL_ACTIVE_BGCOLOR, _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.SELECTED_BGCOLOR]);\n        }\n        for (var _b = 0, _c = [].slice.call(this.cellSelectionPos); _b < _c.length; _b++) {\n            var item = _c[_b];\n            var query = '[aria-colindex=\"' + (parseInt(item.colIndex, 10) + 1) + '\"][index=\"' + item.rowIndex + '\"]';\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([control.element.querySelector(query)], [_common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.CELL_SELECTED_BGCOLOR]);\n        }\n    };\n    PivotView.prototype.renderEmptyGrid = function () {\n        var _this_1 = this;\n        this.isEmptyGrid = true;\n        this.notEmpty = false;\n        this.isInitial = true;\n        this.renderModule = this.renderModule ? this.renderModule : new _renderer_render__WEBPACK_IMPORTED_MODULE_5__.Render(this);\n        if (this.grid && this.grid.element && this.element.querySelector('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.GRID_CLASS)) {\n            this.notEmpty = true;\n            this.grid.setProperties({\n                columns: this.renderModule.frameEmptyColumns(),\n                dataSource: this.renderModule.frameEmptyData()\n            }, true);\n            this.grid.notify('datasource-modified', {});\n            this.grid.refreshColumns();\n        }\n        else {\n            if (this.element.querySelector('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.GRID_CLASS)) {\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.remove)(this.element.querySelector('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.GRID_CLASS));\n            }\n            this.renderModule.bindGrid(this, true);\n            this.grid.showSpinner = function () {\n                // show spinner method called\n            };\n            this.grid.hideSpinner = function () {\n                // hide spinner method called\n            };\n            var element = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div', { id: this.element.id + '_grid' });\n            this.element.appendChild(element);\n            this.grid.isStringTemplate = true;\n            this.grid.appendTo(element);\n            this.grid.off('data-ready', this.grid.dataReady);\n            this.grid.on('data-ready', function () {\n                _this_1.grid.scrollModule.setWidth();\n                _this_1.grid.scrollModule.setHeight();\n            });\n        }\n    };\n    /** @hidden */\n    PivotView.prototype.initEngine = function () {\n        var _this_1 = this;\n        if (this.element.querySelector('.e-spin-hide')) {\n            this.showWaitingPopup();\n        }\n        if (this.dataType === 'pivot') {\n            var data = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.dataSourceSettings.dataSource) &&\n                this.dataSourceSettings.dataSource.length > 0\n                ? this.dataSourceSettings.dataSource[0] :\n                !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.engineModule.data) ? this.engineModule.data[0] : undefined;\n            if (data && this.pivotCommon) {\n                var isArray = Object.prototype.toString.call(data) === '[object Array]';\n                if (isArray && this.dataSourceSettings.type === 'JSON') {\n                    this.pivotCommon.errorDialog.createErrorDialog(this.localeObj.getConstant('error'), this.localeObj.getConstant('invalidJSON'));\n                    return;\n                }\n                else if (!isArray && this.dataSourceSettings.type === 'CSV') {\n                    this.pivotCommon.errorDialog.createErrorDialog(this.localeObj.getConstant('error'), this.localeObj.getConstant('invalidCSV'));\n                    return;\n                }\n            }\n        }\n        var args = {\n            dataSourceSettings: _base_util__WEBPACK_IMPORTED_MODULE_15__.PivotUtil.getClonedDataSourceSettings(this.dataSourceSettings)\n        };\n        this.trigger(_common_base_constant__WEBPACK_IMPORTED_MODULE_3__.enginePopulating, args, function (observedArgs) {\n            _base_util__WEBPACK_IMPORTED_MODULE_15__.PivotUtil.updateDataSourceSettings(_this_1, observedArgs.dataSourceSettings);\n            _this_1.updatePageSettings(false);\n            var customProperties = {\n                mode: '',\n                savedFieldList: undefined,\n                pageSettings: _this_1.pageSettings,\n                enableValueSorting: _this_1.enableValueSorting,\n                isDrillThrough: (_this_1.allowDrillThrough || _this_1.editSettings.allowEditing),\n                localeObj: _this_1.localeObj,\n                fieldsType: _this_1.fieldsType,\n                clonedReport: _this_1.clonedReport,\n                globalize: _this_1.globalize,\n                currenyCode: _this_1.currencyCode,\n                enablePaging: _this_1.enablePaging,\n                enableVirtualization: _this_1.enableVirtualization,\n                allowDataCompression: _this_1.allowDataCompression,\n                enableHtmlSanitizer: _this_1.enableHtmlSanitizer,\n                enableOptimizedRendering: _this_1.enableVirtualization && _this_1.virtualScrollSettings &&\n                    _this_1.virtualScrollSettings.allowSinglePage,\n                isTabularLayout: _this_1.isTabular\n            };\n            if (_this_1.dataType === 'pivot') {\n                if (_this_1.dataSourceSettings.groupSettings && _this_1.dataSourceSettings.groupSettings.length > 0) {\n                    var dataSet = _this_1.engineModule.data;\n                    _this_1.clonedDataSet = (_this_1.clonedDataSet ? _this_1.clonedDataSet : _this_1.dataSourceSettings.type === 'CSV' ? _base_util__WEBPACK_IMPORTED_MODULE_15__.PivotUtil.getClonedCSVData(dataSet)\n                        : _base_util__WEBPACK_IMPORTED_MODULE_15__.PivotUtil.getClonedData(dataSet));\n                    var dataSourceSettings = JSON.parse(_this_1.getPersistData()).dataSourceSettings;\n                    dataSourceSettings.dataSource = [];\n                    _this_1.clonedReport = _this_1.clonedReport ? _this_1.clonedReport : dataSourceSettings;\n                }\n                if (_this_1.dataSourceSettings.mode !== 'Server') {\n                    _this_1.engineModule.renderEngine(_this_1.dataSourceSettings, customProperties, _this_1.aggregateCellInfo\n                        ? _this_1.getValueCellInfo.bind(_this_1) : undefined, _this_1.onHeadersSort ? _this_1.getHeaderSortInfo.bind(_this_1) : undefined);\n                }\n                _this_1.allowServerDataBinding = false;\n                _this_1.setProperties({ pivotValues: _this_1.engineModule.pivotValues }, true);\n                _this_1.allowServerDataBinding = true;\n                _this_1.enginePopulatedEventMethod('initEngine');\n            }\n            else if (_this_1.dataSourceSettings.providerType === 'SSAS' && _this_1.dataType === 'olap') {\n                customProperties.savedFieldList = _this_1.olapEngineModule.fieldList;\n                customProperties.savedFieldListData = _this_1.olapEngineModule.fieldListData;\n                _base_util__WEBPACK_IMPORTED_MODULE_15__.PivotUtil.renderOlapEngine(_this_1, customProperties);\n                _this_1.allowServerDataBinding = false;\n                _this_1.setProperties({ pivotValues: _this_1.olapEngineModule.pivotValues }, true);\n                _this_1.allowServerDataBinding = true;\n                _this_1.enginePopulatedEventMethod('initEngine');\n            }\n        });\n    };\n    PivotView.prototype.enginePopulatedEventMethod = function (action, control) {\n        if (action === 'initEngine') {\n            var this$_1 = control ? control : this;\n            this.trigger(_common_base_constant__WEBPACK_IMPORTED_MODULE_3__.enginePopulated, { pivotValues: this.pivotValues }, function (observedArgs) {\n                if (this$_1.dataType === 'olap') {\n                    this$_1.olapEngineModule.pivotValues = observedArgs.pivotValues;\n                    this$_1.setProperties({ pivotValues: this$_1.olapEngineModule.pivotValues }, true);\n                }\n                else {\n                    this$_1.engineModule.pivotValues = observedArgs.pivotValues;\n                    this$_1.setProperties({ pivotValues: this$_1.engineModule.pivotValues }, true);\n                }\n                this$_1.notify(_common_base_constant__WEBPACK_IMPORTED_MODULE_3__.dataReady, {});\n                this$_1.notEmpty = true;\n            });\n        }\n        else {\n            var pivot_2 = control ? control : this;\n            var eventArgs = {\n                dataSourceSettings: pivot_2.dataSourceSettings,\n                pivotValues: pivot_2.pivotValues\n            };\n            pivot_2.trigger(_common_base_constant__WEBPACK_IMPORTED_MODULE_3__.enginePopulated, eventArgs, function (observedArgs) {\n                pivot_2.dataSourceSettings = observedArgs.dataSourceSettings;\n                if (pivot_2.dataType === 'olap') {\n                    pivot_2.olapEngineModule.pivotValues = observedArgs.pivotValues;\n                    pivot_2.allowServerDataBinding = false;\n                    pivot_2.setProperties({ pivotValues: pivot_2.olapEngineModule.pivotValues }, true);\n                    pivot_2.allowServerDataBinding = true;\n                }\n                else {\n                    pivot_2.engineModule.pivotValues = observedArgs.pivotValues;\n                    pivot_2.allowServerDataBinding = false;\n                    pivot_2.setProperties({ pivotValues: pivot_2.engineModule.pivotValues }, true);\n                    pivot_2.allowServerDataBinding = true;\n                }\n                if (pivot_2.pivotCommon) {\n                    pivot_2.pivotCommon.engineModule = pivot_2.dataType === 'olap' ? pivot_2.olapEngineModule : pivot_2.engineModule;\n                    pivot_2.pivotCommon.dataSourceSettings = pivot_2.dataSourceSettings;\n                }\n                pivot_2.renderPivotGrid();\n            });\n        }\n    };\n    PivotView.prototype.generateData = function () {\n        if (!this.isStaticRefresh) {\n            if (this.displayOption.view === 'Chart' || !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.grid)) {\n                this.showWaitingPopup();\n                clearTimeout(this.timeOutObj);\n                this.timeOutObj = setTimeout(this.refreshData.bind(this), 100);\n            }\n            else {\n                this.renderEmptyGrid();\n                this.showWaitingPopup();\n            }\n        }\n    };\n    /** @hidden */\n    PivotView.prototype.refreshData = function () {\n        var pivot = this;\n        if (!pivot.isStaticRefresh) {\n            if (pivot.dataSourceSettings && (pivot.dataSourceSettings.dataSource || pivot.dataSourceSettings.url)) {\n                if (pivot.dataSourceSettings.dataSource instanceof _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_12__.DataManager) {\n                    if (pivot.dataType === 'pivot' && pivot.remoteData.length > 0) {\n                        if (!this.element.querySelector('.e-spinner-pane')) {\n                            this.showWaitingPopup();\n                        }\n                        this.engineModule.data = pivot.remoteData;\n                        this.initEngine();\n                    }\n                    else if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(pivot.engineModule.data) && pivot.engineModule.data.length === 0) {\n                        clearTimeout(this.timeOutObj);\n                        this.timeOutObj = setTimeout(pivot.getData.bind(pivot), 100);\n                    }\n                    else {\n                        pivot.initEngine();\n                    }\n                }\n                else if ((this.dataSourceSettings.url !== '' && this.dataType === 'olap') ||\n                    (pivot.dataSourceSettings.dataSource && pivot.dataSourceSettings.dataSource.length > 0\n                        || (this.engineModule.data && this.engineModule.data.length > 0))) {\n                    if (pivot.dataType === 'pivot') {\n                        this.hideWaitingPopup();\n                        pivot.engineModule.data = pivot.dataSourceSettings.dataSource;\n                    }\n                    pivot.initEngine();\n                }\n                else {\n                    if (this.dataSourceSettings.mode === 'Server') {\n                        this.getEngine('onRefresh');\n                    }\n                    else {\n                        this.notify(_common_base_constant__WEBPACK_IMPORTED_MODULE_3__.dataReady, {});\n                        this.hideWaitingPopup();\n                    }\n                }\n            }\n            else {\n                this.notify(_common_base_constant__WEBPACK_IMPORTED_MODULE_3__.dataReady, {});\n                this.hideWaitingPopup();\n            }\n        }\n        else {\n            pivot.isStaticRefresh = false;\n            pivot.hideWaitingPopup();\n        }\n    };\n    PivotView.prototype.getValueCellInfo = function (aggregateObj) {\n        var args = aggregateObj;\n        this.trigger(_common_base_constant__WEBPACK_IMPORTED_MODULE_3__.aggregateCellInfo, args);\n        return args;\n    };\n    /**\n     *\n     * @param {HeadersSortEventArgs} sortingObj - args.\n     * @returns {HeadersSortEventArgs}\n     * @hidden\n     */\n    PivotView.prototype.getHeaderSortInfo = function (sortingObj) {\n        var args = sortingObj;\n        this.trigger(_common_base_constant__WEBPACK_IMPORTED_MODULE_3__.onHeadersSort, args);\n        return args;\n    };\n    /**\n     * De-Register the internal events.\n     *\n     * @param {Object} args - args.\n     * @returns {void}\n     * @hidden\n     */\n    PivotView.prototype.bindTriggerEvents = function (args) {\n        this.trigger((0,_syncfusion_ej2_grids__WEBPACK_IMPORTED_MODULE_9__.getObject)('name', args), args);\n    };\n    PivotView.prototype.getData = function () {\n        if (this.dataSourceSettings.dataSource.defaultQuery) {\n            this.dataSourceSettings.dataSource.executeQuery(this.dataSourceSettings.dataSource\n                .defaultQuery).then(this.executeQuery.bind(this));\n        }\n        else {\n            this.dataSourceSettings.dataSource.executeQuery(new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_12__.Query()).then(this.executeQuery.bind(this));\n        }\n    };\n    PivotView.prototype.executeQuery = function (e) {\n        if (!this.element.querySelector('.e-spinner-pane')) {\n            this.showWaitingPopup();\n        }\n        var pivot = this;\n        pivot.engineModule.data = e.result;\n        if (this.isEmptyGrid && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(pivot.engineModule.data) && pivot.engineModule.data.length === 0) {\n            this.hideWaitingPopup();\n        }\n        else if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(pivot.engineModule.data) && pivot.engineModule.data.length > 0) {\n            this.isEmptyGrid = false;\n            pivot.initEngine();\n        }\n        else {\n            this.isEmptyGrid = true;\n            this.hideWaitingPopup();\n            this.renderEmptyGrid();\n            this.engineModule.fieldList = null;\n            this.engineModule.isEmptyData = true;\n            this.pivotValues = [];\n            this.engineModule.data = [];\n            this.notify(_common_base_constant__WEBPACK_IMPORTED_MODULE_3__.dataReady, {});\n        }\n    };\n    /** @hidden */\n    PivotView.prototype.applyFormatting = function (pivotValues) {\n        if (pivotValues) {\n            var colIndex = [];\n            for (var len = pivotValues.length, i = 0; i < len; i++) {\n                if (pivotValues[i] !== undefined && pivotValues[i][0] === undefined) {\n                    colIndex.push(i);\n                }\n            }\n            for (var i = 0; i < pivotValues.length; i++) {\n                for (var j = this.isTabular ? (this.engineModule.rowMaxLevel + 1) : 1; (pivotValues[i] &&\n                    j < pivotValues[i].length); j++) {\n                    if (pivotValues[i][j].axis === 'value' && pivotValues[i][j].formattedText !== '') {\n                        pivotValues[i][j].style = undefined;\n                        pivotValues[i][j].cssClass = undefined;\n                        var format_1 = this.dataSourceSettings.conditionalFormatSettings;\n                        for (var k = 0; k < format_1.length; k++) {\n                            if ((format_1[k].applyGrandTotals === true || (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(format_1[k].applyGrandTotals))\n                                ? true : !pivotValues[i][j].isGrandSum) {\n                                if (this.checkCondition(pivotValues[i][j].value, format_1[k].conditions, format_1[k].value1, format_1[k].value2)) {\n                                    // let ilen: number =\n                                    //     (this.dataSourceSettings.valueAxis === 'row' ? i : this.engineModule.headerContent.length - 1);\n                                    // let jlen: number = (this.dataSourceSettings.valueAxis === 'row' ? 0 : j);\n                                    if ((!format_1[k].measure || pivotValues[i][j].actualText ===\n                                        format_1[k].measure) &&\n                                        (format_1[k].measure === undefined || format_1[k].measure !== '') && (format_1[k].label === undefined ||\n                                        format_1[k].label !== '') && ((!format_1[k].label ||\n                                        (pivotValues[i][0].valueSort.levelName\n                                            .indexOf(format_1[k].label)) > -1) ||\n                                        (pivotValues[i][j].rowHeaders\n                                            .indexOf(format_1[k].label) > -1) ||\n                                        (pivotValues[i][j].columnHeaders\n                                            .indexOf(format_1[k].label) > -1))) {\n                                        if (format_1[k].style && format_1[k].style.backgroundColor) {\n                                            format_1[k].style.backgroundColor = format_1[k].style.backgroundColor.charAt(0) === '#' &&\n                                                this.conditionalFormattingModule.isHex(format_1[k].style.backgroundColor.substr(1))\n                                                ? format_1[k].style.backgroundColor :\n                                                this.conditionalFormattingModule.colourNameToHex(format_1[k].style.backgroundColor);\n                                        }\n                                        if (format_1[k].style && format_1[k].style.color) {\n                                            format_1[k].style.color = format_1[k].style.color.charAt(0) === '#' &&\n                                                this.conditionalFormattingModule.isHex(format_1[k].style.color.substr(1)) ?\n                                                format_1[k].style.color :\n                                                this.conditionalFormattingModule.colourNameToHex(format_1[k].style.color);\n                                        }\n                                        pivotValues[i][j].style = format_1[k].style;\n                                        pivotValues[i][j].cssClass = 'format' + this.element.id + k;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            var format = this.dataSourceSettings.conditionalFormatSettings;\n            for (var k = 0; k < format.length; k++) {\n                var sheet = (this.createStyleSheet.bind(this))();\n                var str = 'color: ' + format[k].style.color + '!important;background-color: ' + format[k].style.backgroundColor +\n                    '!important;font-size: ' + format[k].style.fontSize + '!important;font-family: ' + format[k].style.fontFamily +\n                    ' !important;';\n                var formatClass = '.format' + this.element.id + k;\n                sheet.insertRule(formatClass + ', ' + formatClass + ' .e-cellvalue' + '{' + str + '}', 0);\n            }\n        }\n    };\n    PivotView.prototype.createStyleSheet = function () {\n        var style = document.createElement('style');\n        style.appendChild(document.createTextNode(''));\n        document.head.appendChild(style);\n        return style.sheet;\n    };\n    PivotView.prototype.applyHyperlinkSettings = function () {\n        if (this.pivotValues) {\n            var pivotValues = this.pivotValues;\n            var colIndex = [];\n            for (var len = pivotValues.length, i = 0; i < len; i++) {\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(pivotValues[i]) && pivotValues[i][0] === undefined) {\n                    colIndex.push(i);\n                }\n            }\n            if (this.hyperlinkSettings.conditionalSettings.length > 0) {\n                for (var i = 0; i < pivotValues.length; i++) {\n                    for (var j = this.isTabular ? (this.engineModule.rowMaxLevel + 1) : 1; (pivotValues[i] &&\n                        j < pivotValues[i].length); j++) {\n                        if (pivotValues[i][j].axis === 'value') {\n                            pivotValues[i][j].enableHyperlink = false;\n                            var collection = this.hyperlinkSettings.conditionalSettings;\n                            for (var k = 0; k < collection.length; k++) {\n                                if (this.checkCondition(pivotValues[i][j].value, collection[k].conditions, collection[k].value1, collection[k].value2)) {\n                                    var ilen = (this.dataSourceSettings.valueAxis === 'row' ?\n                                        i : (this.dataType === 'pivot' ?\n                                        this.engineModule.headerContent.length - 1 : this.olapEngineModule.headerContent.length - 1));\n                                    var jlen = (this.dataSourceSettings.valueAxis === 'row' ? 0 : j);\n                                    if ((!collection[k].measure || this.dataSourceSettings.values.length === 1 ||\n                                        (pivotValues[ilen][jlen].valueSort &&\n                                            (pivotValues[ilen][jlen].actualText ===\n                                                collection[k].measure))) && (!collection[k].label ||\n                                        ((pivotValues[colIndex[collection[k].label.split('.').length - 1]] &&\n                                            pivotValues[colIndex[collection[k].label.split('.').length - 1]][j] &&\n                                            pivotValues[colIndex[collection[k].label.split('.').length - 1]][j].valueSort &&\n                                            pivotValues[colIndex[collection[k].label.split('.').length - 1]][j].\n                                                valueSort[collection[k].label]) || (pivotValues[i][0].\n                                            valueSort.levelName.indexOf(collection[k].label) > -1)))) {\n                                        pivotValues[i][j].enableHyperlink = true;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.hyperlinkSettings.headerText)) {\n                var headerDelimiter = this.dataSourceSettings.valueSortSettings.headerDelimiter ? this.dataSourceSettings.valueSortSettings.headerDelimiter : '.';\n                for (var i = 0; i < pivotValues.length; i++) {\n                    for (var j = this.isTabular ? (this.engineModule.rowMaxLevel + 1) : 1; (pivotValues[i] &&\n                        j < pivotValues[i].length); j++) {\n                        if (pivotValues[i][j].axis === 'value') {\n                            var label = this.hyperlinkSettings.headerText;\n                            if (pivotValues[i][0].valueSort.levelName.indexOf(label) > -1) {\n                                pivotValues[i][0].enableHyperlink = true;\n                                pivotValues[i][j].enableHyperlink = true;\n                            }\n                            else {\n                                var isApplyHyperLink = false;\n                                for (var k = 0; k < colIndex.length; k++) {\n                                    label = headerDelimiter + this.hyperlinkSettings.headerText;\n                                    if ((headerDelimiter + (pivotValues[colIndex[k]][j]).valueSort\n                                        .levelName).indexOf(label) > -1) {\n                                        pivotValues[colIndex[k]][j].enableHyperlink = true;\n                                        isApplyHyperLink = true;\n                                    }\n                                }\n                                pivotValues[i][j].enableHyperlink = isApplyHyperLink;\n                            }\n                        }\n                    }\n                }\n            }\n            else {\n                return;\n            }\n        }\n    };\n    PivotView.prototype.checkCondition = function (cellValue, conditions, conditionalValue1, conditionalValue2) {\n        switch (conditions) {\n            case 'LessThan':\n                return cellValue < conditionalValue1;\n            case 'LessThanOrEqualTo':\n                return cellValue <= conditionalValue1;\n            case 'GreaterThan':\n                return cellValue > conditionalValue1;\n            case 'GreaterThanOrEqualTo':\n                return cellValue >= conditionalValue1;\n            case 'Equals':\n                return cellValue === conditionalValue1;\n            case 'NotEquals':\n                return cellValue !== conditionalValue1;\n            case 'Between':\n                return (conditionalValue1 < conditionalValue2 && cellValue >= conditionalValue1 && cellValue <= conditionalValue2) ||\n                    (conditionalValue1 > conditionalValue2 && cellValue <= conditionalValue1 && cellValue >= conditionalValue2);\n            case 'NotBetween':\n                return !((conditionalValue1 < conditionalValue2 && cellValue >= conditionalValue1 && cellValue <= conditionalValue2) ||\n                    (conditionalValue1 > conditionalValue2 && cellValue <= conditionalValue1 && cellValue >= conditionalValue2));\n            default:\n                return false;\n        }\n    };\n    /** @hidden */\n    PivotView.prototype.updateGroupingReport = function (newGroupSettings, updateGroupType) {\n        if (!this.clonedDataSet && !this.clonedReport) {\n            var dataSet = this.engineModule.data;\n            this.clonedDataSet = this.dataSourceSettings.type === 'CSV' ? _base_util__WEBPACK_IMPORTED_MODULE_15__.PivotUtil.getClonedCSVData(dataSet) : _base_util__WEBPACK_IMPORTED_MODULE_15__.PivotUtil.getClonedData(dataSet);\n            var dataSourceSettings = JSON.parse(this.getPersistData()).dataSourceSettings;\n            dataSourceSettings.dataSource = [];\n            this.clonedReport = this.clonedReport ? this.clonedReport : dataSourceSettings;\n        }\n        var dateGroup = /_date_group_years|_date_group_quarters|_date_group_quarterYear|_date_group_months|_date_group_days|_date_group_hours|_date_group_minutes|_date_group_seconds/g;\n        var data = this.dataSourceSettings.type === 'CSV' ? _base_util__WEBPACK_IMPORTED_MODULE_15__.PivotUtil.getClonedCSVData(this.clonedDataSet) : _base_util__WEBPACK_IMPORTED_MODULE_15__.PivotUtil.getClonedData(this.clonedDataSet);\n        var dataSource = this.dataSourceSettings;\n        var clonedReport = this.clonedReport.properties ?\n            this.clonedReport.properties : this.clonedReport;\n        var axisFields = [dataSource.rows, dataSource.columns, dataSource.values, dataSource.filters];\n        var fieldSettings = [dataSource.filterSettings, dataSource.sortSettings, dataSource.formatSettings, dataSource.drilledMembers];\n        var clonedAxisFields = clonedReport.rows;\n        clonedAxisFields = clonedAxisFields.concat(clonedReport.columns, clonedReport.values, clonedReport.filters);\n        if (newGroupSettings.length === 0 || newGroupSettings.length > 0) {\n            this.engineModule.groupingFields = {};\n            this.setProperties({ dataSourceSettings: { dataSource: data, groupSettings: newGroupSettings.length > 0\n                        ? dataSource.groupSettings : [] } }, true);\n            var isDateGroupUpdated = updateGroupType === 'Date';\n            var fields = [];\n            var newFieldName_1;\n            for (var i = 0, cnt = axisFields.length; i < cnt; i++) {\n                var _loop_1 = function (j, len) {\n                    var fieldName = axisFields[i][j].name;\n                    if (fields.indexOf(fieldName) === -1) {\n                        fields.push(fieldName);\n                    }\n                    var index = fields.indexOf(fieldName);\n                    if ((!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(fieldName.match(dateGroup)) &&\n                        isDateGroupUpdated) || (fieldName.indexOf('_custom_group') !== -1 &&\n                        !_base_util__WEBPACK_IMPORTED_MODULE_15__.PivotUtil.getFieldByName(fieldName.replace('_custom_group', ''), dataSource.groupSettings))) {\n                        axisFields[i].splice(j, 1);\n                        fields.splice(index, 1);\n                        j--;\n                        len--;\n                        fieldName = fieldName.split('_')[0];\n                        var isSameField = false;\n                        for (var i_1 = 0; i_1 < axisFields.length; i_1++) {\n                            isSameField = axisFields[i_1].filter(function (x) { return x.name === fieldName; }).length > 0 ?\n                                true : false;\n                            if (isSameField) {\n                                break;\n                            }\n                        }\n                        if (!isSameField) {\n                            newFieldName_1 = fieldName.split('_')[0];\n                            var fieldObj = _base_util__WEBPACK_IMPORTED_MODULE_15__.PivotUtil.getFieldByName(newFieldName_1, clonedAxisFields);\n                            clonedAxisFields = clonedAxisFields.filter(function (x) { return x.name !== newFieldName_1; });\n                            fields.push(newFieldName_1);\n                            if (fieldObj) {\n                                if (!isSameField) {\n                                    axisFields[i].splice(++j, 0, fieldObj);\n                                }\n                                else {\n                                    axisFields[i].splice(j, 1, fieldObj);\n                                }\n                            }\n                        }\n                    }\n                    else {\n                        var fieldObj = _base_util__WEBPACK_IMPORTED_MODULE_15__.PivotUtil.getFieldByName(fieldName, clonedAxisFields);\n                        if (fieldObj) {\n                            axisFields[i].splice(j, 1, fieldObj);\n                        }\n                        else if (newFieldName_1 === fieldName) {\n                            axisFields[i].splice(j, 1);\n                        }\n                    }\n                    out_j_1 = j;\n                    out_len_1 = len;\n                };\n                var out_j_1, out_len_1;\n                for (var j = 0, len = axisFields[i].length; j < len; j++) {\n                    _loop_1(j, len);\n                    j = out_j_1;\n                    len = out_len_1;\n                }\n            }\n            for (var _i = 0, fields_2 = fields; _i < fields_2.length; _i++) {\n                var fieldName = fields_2[_i];\n                var filterObj = _base_util__WEBPACK_IMPORTED_MODULE_15__.PivotUtil.getFilterItemByName(fieldName, clonedReport.filterSettings);\n                var sortObj = _base_util__WEBPACK_IMPORTED_MODULE_15__.PivotUtil.getFieldByName(fieldName, clonedReport.sortSettings);\n                var formatObj = _base_util__WEBPACK_IMPORTED_MODULE_15__.PivotUtil.getFieldByName(fieldName, clonedReport.formatSettings);\n                var drillObj = _base_util__WEBPACK_IMPORTED_MODULE_15__.PivotUtil.getFieldByName(fieldName, clonedReport.drilledMembers);\n                var settingsObj = [filterObj, sortObj, formatObj, drillObj];\n                for (var i = 0, cnt = fieldSettings.length; i < cnt; i++) {\n                    var isExists = false;\n                    for (var j = 0, len = fieldSettings[i].length; j < len; j++) {\n                        var name_1 = fieldSettings[i][j].name;\n                        if ((!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(name_1.match(dateGroup)) && isDateGroupUpdated) || (name_1.indexOf('_custom_group') !== -1 &&\n                            !_base_util__WEBPACK_IMPORTED_MODULE_15__.PivotUtil.getFieldByName(name_1.replace('_custom_group', ''), dataSource.groupSettings))) {\n                            fieldSettings[i].splice(j, 1);\n                            j--;\n                            len--;\n                        }\n                        else if (fieldName === fieldSettings[i][j].name) {\n                            isExists = true;\n                            if (settingsObj[i]) {\n                                fieldSettings[i].splice(j, 1, settingsObj[i]);\n                            }\n                            else {\n                                fieldSettings[i].splice(j, 1);\n                                j--;\n                                len--;\n                            }\n                            break;\n                        }\n                    }\n                    if (!isExists && i === 0 && filterObj) {\n                        fieldSettings[i].push(filterObj);\n                    }\n                    if (!isExists && i === 1 && sortObj) {\n                        fieldSettings[i].push(sortObj);\n                    }\n                    if (!isExists && i === 2 && formatObj) {\n                        fieldSettings[i].push(formatObj);\n                    }\n                    if (!isExists && i === 3 && drillObj) {\n                        fieldSettings[i].push(drillObj);\n                    }\n                }\n            }\n        }\n    };\n    PivotView.prototype.removeButtonFocus = function () {\n        if (document.querySelectorAll('.e-btn-focused')) {\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)(document.querySelectorAll('.e-btn-focused'), 'e-btn-focused');\n        }\n    };\n    PivotView.prototype.wireEvents = function () {\n        var enableOptimizedRendering = this.virtualScrollSettings && this.virtualScrollSettings.allowSinglePage && this.dataType === 'pivot';\n        if (this.displayOption.view !== 'Chart') {\n            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(this.element, this.isAdaptive ? 'touchend' : 'click', this.mouseClickHandler, this);\n            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(this.element, 'mousedown', this.mouseDownHandler, this);\n            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(this.element.querySelector('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.GRID_HEADER), 'mousemove', this.mouseMoveHandler, this);\n            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(this.element, 'mouseup', this.mouseUpHandler, this);\n            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(this.element, this.isAdaptive ? 'touchend' : 'contextmenu', this.mouseRclickHandler, this);\n            if (this.virtualscrollModule && this.enableVirtualization && !enableOptimizedRendering) {\n                _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(this.element.querySelector('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.GRID_CONTENT).querySelector('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.CONTENT_CLASS), 'scroll', this.headerScrollUpdate, this);\n            }\n        }\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(document, this.isAdaptive ? 'touchend' : 'click', this.removeButtonFocus, this);\n        window.addEventListener('resize', this.onWindowResize.bind(this), true);\n    };\n    PivotView.prototype.headerScrollUpdate = function () {\n        if (this.element.querySelector('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.MOVABLEHEADER_DIV).scrollLeft !== this.element.querySelector('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.GRID_CONTENT).querySelector('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.CONTENT_CLASS).scrollLeft) {\n            this.virtualscrollModule.direction = 'horizondal';\n        }\n        this.element.querySelector('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.MOVABLEHEADER_DIV).scrollLeft = this.element.querySelector('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.GRID_CONTENT).querySelector('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.CONTENT_CLASS).scrollLeft;\n    };\n    PivotView.prototype.unwireEvents = function () {\n        if (this.displayOption.view !== 'Chart') {\n            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(this.element, this.isAdaptive ? 'touchend' : 'click', this.mouseClickHandler);\n            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(this.element, 'mousedown', this.mouseDownHandler);\n            if (this.element.querySelector('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.GRID_HEADER)) {\n                _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(this.element.querySelector('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.GRID_HEADER), 'mousemove', this.mouseMoveHandler);\n            }\n            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(this.element, 'mouseup', this.mouseUpHandler);\n            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(this.element, this.isAdaptive ? 'touchend' : 'contextmenu', this.mouseRclickHandler);\n            if (this.virtualscrollModule && this.enableVirtualization && this.element.querySelector('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.GRID_CONTENT)) {\n                _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(this.element.querySelector('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.GRID_CONTENT).querySelector('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.CONTENT_CLASS), 'scroll', this.headerScrollUpdate);\n            }\n        }\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(document, this.isAdaptive ? 'touchend' : 'click', this.removeButtonFocus);\n        window.removeEventListener('resize', this.onWindowResize.bind(this), true);\n    };\n    /** @hidden */\n    PivotView.prototype.actionBeginMethod = function () {\n        var eventArgs = {\n            dataSourceSettings: _base_util__WEBPACK_IMPORTED_MODULE_15__.PivotUtil.getClonedDataSourceSettings(this.dataSourceSettings),\n            actionName: this.actionObj.actionName,\n            fieldInfo: this.actionObj.fieldInfo,\n            cancel: false\n        };\n        this.trigger(_common_base_constant__WEBPACK_IMPORTED_MODULE_3__.actionBegin, eventArgs);\n        return eventArgs.cancel;\n    };\n    /** @hidden */\n    PivotView.prototype.actionCompleteMethod = function () {\n        var eventArgs = {\n            dataSourceSettings: _base_util__WEBPACK_IMPORTED_MODULE_15__.PivotUtil.getClonedDataSourceSettings(this.dataSourceSettings),\n            actionName: this.actionObj.actionName,\n            fieldInfo: this.actionObj.fieldInfo,\n            actionInfo: this.actionObj.actionInfo\n        };\n        this.trigger(_common_base_constant__WEBPACK_IMPORTED_MODULE_3__.actionComplete, eventArgs);\n        this.actionObj.actionName = '';\n        this.actionObj.actionInfo = undefined;\n        this.actionObj.fieldInfo = undefined;\n    };\n    /** @hidden */\n    PivotView.prototype.actionFailureMethod = function (error) {\n        var eventArgs = {\n            actionName: this.actionObj.actionName,\n            errorInfo: error\n        };\n        this.trigger(_common_base_constant__WEBPACK_IMPORTED_MODULE_3__.actionFailure, eventArgs);\n    };\n    /** @hidden */\n    PivotView.prototype.getActionCompleteName = function () {\n        var actionName;\n        switch (this.actionObj.actionName) {\n            case _common_base_constant__WEBPACK_IMPORTED_MODULE_3__.openConditionalFormatting:\n                actionName = _common_base_constant__WEBPACK_IMPORTED_MODULE_3__.conditionallyFormatted;\n                break;\n            case _common_base_constant__WEBPACK_IMPORTED_MODULE_3__.conditionalFormattingMenu:\n                actionName = _common_base_constant__WEBPACK_IMPORTED_MODULE_3__.conditionallyFormatted;\n                break;\n            case _common_base_constant__WEBPACK_IMPORTED_MODULE_3__.openNumberFormatting:\n                actionName = _common_base_constant__WEBPACK_IMPORTED_MODULE_3__.numberFormatted;\n                break;\n            case _common_base_constant__WEBPACK_IMPORTED_MODULE_3__.numberFormattingMenu:\n                actionName = _common_base_constant__WEBPACK_IMPORTED_MODULE_3__.numberFormatted;\n                break;\n            case _common_base_constant__WEBPACK_IMPORTED_MODULE_3__.tableView:\n                actionName = _common_base_constant__WEBPACK_IMPORTED_MODULE_3__.tableViewed;\n                break;\n            case _common_base_constant__WEBPACK_IMPORTED_MODULE_3__.chartView:\n                actionName = _common_base_constant__WEBPACK_IMPORTED_MODULE_3__.chartViewed;\n                break;\n            case _common_base_constant__WEBPACK_IMPORTED_MODULE_3__.hideSubTotals:\n                actionName = _common_base_constant__WEBPACK_IMPORTED_MODULE_3__.subTotalsHidden;\n                break;\n            case _common_base_constant__WEBPACK_IMPORTED_MODULE_3__.subTotalsRow:\n                actionName = _common_base_constant__WEBPACK_IMPORTED_MODULE_3__.subTotalsRowShown;\n                break;\n            case _common_base_constant__WEBPACK_IMPORTED_MODULE_3__.subTotalsColumn:\n                actionName = _common_base_constant__WEBPACK_IMPORTED_MODULE_3__.subTotalsColumnShown;\n                break;\n            case _common_base_constant__WEBPACK_IMPORTED_MODULE_3__.showSubTotals:\n                actionName = _common_base_constant__WEBPACK_IMPORTED_MODULE_3__.subTotalsShown;\n                break;\n            case _common_base_constant__WEBPACK_IMPORTED_MODULE_3__.hideGrandTotals:\n                actionName = _common_base_constant__WEBPACK_IMPORTED_MODULE_3__.grandTotalsHidden;\n                break;\n            case _common_base_constant__WEBPACK_IMPORTED_MODULE_3__.grandTotalsRow:\n                actionName = _common_base_constant__WEBPACK_IMPORTED_MODULE_3__.grandTotalsRowShown;\n                break;\n            case _common_base_constant__WEBPACK_IMPORTED_MODULE_3__.grandTotalsColumn:\n                actionName = _common_base_constant__WEBPACK_IMPORTED_MODULE_3__.grandTotalsColumnShown;\n                break;\n            case _common_base_constant__WEBPACK_IMPORTED_MODULE_3__.showGrandTotals:\n                actionName = _common_base_constant__WEBPACK_IMPORTED_MODULE_3__.grandTotalsShown;\n                break;\n            case _common_base_constant__WEBPACK_IMPORTED_MODULE_3__.sortValue:\n                actionName = _common_base_constant__WEBPACK_IMPORTED_MODULE_3__.valueSorted;\n                break;\n            case _common_base_constant__WEBPACK_IMPORTED_MODULE_3__.openCalculatedField:\n                actionName = _common_base_constant__WEBPACK_IMPORTED_MODULE_3__.calculatedFieldApplied;\n                break;\n            case _common_base_constant__WEBPACK_IMPORTED_MODULE_3__.editCalculatedField:\n                actionName = _common_base_constant__WEBPACK_IMPORTED_MODULE_3__.calculatedFieldEdited;\n                break;\n            case _common_base_constant__WEBPACK_IMPORTED_MODULE_3__.sortField:\n                actionName = _common_base_constant__WEBPACK_IMPORTED_MODULE_3__.fieldSorted;\n                break;\n            case _common_base_constant__WEBPACK_IMPORTED_MODULE_3__.filterField:\n                actionName = _common_base_constant__WEBPACK_IMPORTED_MODULE_3__.fieldFiltered;\n                break;\n            case _common_base_constant__WEBPACK_IMPORTED_MODULE_3__.removeField:\n                actionName = _common_base_constant__WEBPACK_IMPORTED_MODULE_3__.fieldRemoved;\n                break;\n            case _common_base_constant__WEBPACK_IMPORTED_MODULE_3__.aggregateField:\n                actionName = _common_base_constant__WEBPACK_IMPORTED_MODULE_3__.fieldAggregated;\n                break;\n            case _common_base_constant__WEBPACK_IMPORTED_MODULE_3__.editRecord:\n                actionName = _common_base_constant__WEBPACK_IMPORTED_MODULE_3__.recordEdited;\n                break;\n            case _common_base_constant__WEBPACK_IMPORTED_MODULE_3__.reportChange:\n                actionName = _common_base_constant__WEBPACK_IMPORTED_MODULE_3__.reportChanged;\n                break;\n            case _common_base_constant__WEBPACK_IMPORTED_MODULE_3__.saveEditedRecords:\n                actionName = _common_base_constant__WEBPACK_IMPORTED_MODULE_3__.editedRecordsSaved;\n                break;\n            case _common_base_constant__WEBPACK_IMPORTED_MODULE_3__.addNewRecord:\n                actionName = _common_base_constant__WEBPACK_IMPORTED_MODULE_3__.newRecordAdded;\n                break;\n            case _common_base_constant__WEBPACK_IMPORTED_MODULE_3__.removeRecord:\n                actionName = _common_base_constant__WEBPACK_IMPORTED_MODULE_3__.recordRemoved;\n                break;\n            case _common_base_constant__WEBPACK_IMPORTED_MODULE_3__.pngExport:\n                actionName = _common_base_constant__WEBPACK_IMPORTED_MODULE_3__.pngExported;\n                break;\n            case _common_base_constant__WEBPACK_IMPORTED_MODULE_3__.jpegExport:\n                actionName = _common_base_constant__WEBPACK_IMPORTED_MODULE_3__.jpegExported;\n                break;\n            case _common_base_constant__WEBPACK_IMPORTED_MODULE_3__.svgExport:\n                actionName = _common_base_constant__WEBPACK_IMPORTED_MODULE_3__.svgExported;\n                break;\n            case _common_base_constant__WEBPACK_IMPORTED_MODULE_3__.pdfExport:\n                actionName = _common_base_constant__WEBPACK_IMPORTED_MODULE_3__.pdfExported;\n                break;\n            case _common_base_constant__WEBPACK_IMPORTED_MODULE_3__.csvExport:\n                actionName = _common_base_constant__WEBPACK_IMPORTED_MODULE_3__.csvExported;\n                break;\n            case _common_base_constant__WEBPACK_IMPORTED_MODULE_3__.excelExport:\n                actionName = _common_base_constant__WEBPACK_IMPORTED_MODULE_3__.excelExported;\n                break;\n            case _common_base_constant__WEBPACK_IMPORTED_MODULE_3__.windowResize:\n                actionName = _common_base_constant__WEBPACK_IMPORTED_MODULE_3__.windowResized;\n                break;\n            case _common_base_constant__WEBPACK_IMPORTED_MODULE_3__.saveCurrentReport:\n                actionName = _common_base_constant__WEBPACK_IMPORTED_MODULE_3__.reportSaved;\n                break;\n            case _common_base_constant__WEBPACK_IMPORTED_MODULE_3__.addNewReport:\n                actionName = _common_base_constant__WEBPACK_IMPORTED_MODULE_3__.newReportAdded;\n                break;\n            case _common_base_constant__WEBPACK_IMPORTED_MODULE_3__.saveAsCurrentReport:\n                actionName = _common_base_constant__WEBPACK_IMPORTED_MODULE_3__.reportReSaved;\n                break;\n            case _common_base_constant__WEBPACK_IMPORTED_MODULE_3__.renameCurrentReport:\n                actionName = _common_base_constant__WEBPACK_IMPORTED_MODULE_3__.reportRenamed;\n                break;\n            case _common_base_constant__WEBPACK_IMPORTED_MODULE_3__.horizontalScroll:\n                actionName = _common_base_constant__WEBPACK_IMPORTED_MODULE_3__.horizontalScrolled;\n                break;\n            case _common_base_constant__WEBPACK_IMPORTED_MODULE_3__.verticalScroll:\n                actionName = _common_base_constant__WEBPACK_IMPORTED_MODULE_3__.verticalScrolled;\n                break;\n            case _common_base_constant__WEBPACK_IMPORTED_MODULE_3__.rowPageNavigation:\n                actionName = _common_base_constant__WEBPACK_IMPORTED_MODULE_3__.rowPageNavigated;\n                break;\n            case _common_base_constant__WEBPACK_IMPORTED_MODULE_3__.columnPageNavigation:\n                actionName = _common_base_constant__WEBPACK_IMPORTED_MODULE_3__.columnPageNavigated;\n                break;\n            default:\n                actionName = this.actionObj.actionName;\n        }\n        return actionName;\n    };\n    /** @hidden */\n    PivotView.prototype.getStackedColumns = function (gridcolumns, stackedColumns) {\n        for (var _i = 0, gridcolumns_4 = gridcolumns; _i < gridcolumns_4.length; _i++) {\n            var column = gridcolumns_4[_i];\n            stackedColumns.push(column);\n            if (column.columns && column.columns.length > 0) {\n                this.getStackedColumns(column.columns, stackedColumns);\n            }\n        }\n        return stackedColumns;\n    };\n    /**\n     * To destroy the PivotView elements.\n     *\n     * @returns {void}\n     */\n    PivotView.prototype.destroy = function () {\n        this.removeInternalEvents();\n        if (this.engineModule) {\n            this.engineModule.fieldList = {};\n            this.engineModule.rMembers = null;\n            this.engineModule.cMembers = null;\n            this.engineModule.valueMatrix = [];\n            this.engineModule = {};\n        }\n        if (this.olapEngineModule) {\n            this.olapEngineModule.fieldList = {};\n            this.olapEngineModule = {};\n        }\n        if (this.showGroupingBar && this.groupingBarModule) {\n            this.groupingBarModule.destroy();\n        }\n        if (this.allowGrouping && this.groupingModule) {\n            this.groupingModule.destroy();\n        }\n        if (this.showToolbar && this.toolbarModule) {\n            this.toolbarModule.destroy();\n        }\n        if (this.enablePaging && this.pagerModule) {\n            this.pagerModule.destroy();\n        }\n        if (this.enableVirtualization && this.virtualscrollModule) {\n            this.virtualscrollModule.destroy();\n        }\n        if (this.allowConditionalFormatting && this.conditionalFormattingModule) {\n            this.conditionalFormattingModule.destroy();\n        }\n        if (this.allowNumberFormatting && this.numberFormattingModule) {\n            this.numberFormattingModule.destroy();\n        }\n        if (this.contextMenuModule) {\n            this.contextMenuModule.destroy();\n        }\n        if (this.keyboardModule) {\n            this.keyboardModule.destroy();\n        }\n        if (this.tooltip && !this.tooltip.isDestroyed) {\n            this.tooltip.destroy();\n        }\n        if (this.calculatedFieldModule) {\n            this.calculatedFieldModule.destroy();\n        }\n        if (this.chart && !this.chart.isDestroyed) {\n            this.chart.destroy();\n            if (this.chart.isDestroyed && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('#' + this.element.id + '_chart', this.element)) {\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.remove)((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('#' + this.element.id + '_chart', this.element));\n            }\n        }\n        if (this.grid && !this.grid.isDestroyed) {\n            this.grid.destroy();\n            if (this.grid.isDestroyed && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('#' + this.element.id + '_grid', this.element)) {\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.remove)((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('#' + this.element.id + '_grid', this.element));\n            }\n        }\n        if (this.commonModule) {\n            this.commonModule.destroy();\n        }\n        if (this.pivotChartModule) {\n            this.pivotChartModule.destroy();\n        }\n        if (this.pivotButtonModule && !this.pivotButtonModule.isDestroyed) {\n            this.pivotButtonModule.destroy();\n        }\n        if (this.pivotFieldListModule && !this.pivotFieldListModule.isDestroyed) {\n            this.pivotFieldListModule.destroy();\n            if (this.pivotFieldListModule.isDestroyed && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('#' + this.element.id + '_PivotFieldList', this.element) !== null) {\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.remove)((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('#' + this.element.id + '_PivotFieldList', this.element));\n            }\n        }\n        if ((this.allowDrillThrough || (this.editSettings && this.editSettings.allowEditing)) && this.drillThroughModule) {\n            this.drillThroughModule.destroy();\n        }\n        if (this.chartExportModule) {\n            this.chartExportModule.destroy();\n        }\n        this.unwireEvents();\n        _super.prototype.destroy.call(this);\n        if (this.groupingBarModule) {\n            this.groupingBarModule = null;\n        }\n        if (this.groupingModule) {\n            this.groupingModule = null;\n        }\n        if (this.pivotFieldListModule) {\n            this.pivotFieldListModule = null;\n        }\n        if (this.calculatedFieldModule) {\n            this.calculatedFieldModule = null;\n        }\n        if (this.conditionalFormattingModule) {\n            this.conditionalFormattingModule = null;\n        }\n        if (this.numberFormattingModule) {\n            this.numberFormattingModule = null;\n        }\n        if (this.toolbarModule) {\n            this.toolbarModule = null;\n        }\n        if (this.pagerModule) {\n            this.pagerModule = null;\n        }\n        if (this.virtualscrollModule) {\n            this.virtualscrollModule = null;\n        }\n        if (this.contextMenuModule) {\n            this.contextMenuModule = null;\n        }\n        if (this.keyboardModule) {\n            this.keyboardModule = null;\n        }\n        if (this.tooltip) {\n            this.tooltip = null;\n        }\n        if (this.chart) {\n            this.chart = null;\n        }\n        if (this.grid) {\n            this.grid = null;\n        }\n        if (this.commonModule) {\n            this.commonModule = null;\n        }\n        if (this.pivotChartModule) {\n            this.pivotChartModule = null;\n        }\n        if (this.pivotButtonModule) {\n            this.pivotButtonModule = null;\n        }\n        if (this.renderModule) {\n            this.renderModule = null;\n        }\n        if (this.axisFieldModule) {\n            this.axisFieldModule = null;\n        }\n        if (this.pdfExportModule) {\n            this.pdfExportModule = null;\n        }\n        if (this.excelExportModule) {\n            this.excelExportModule = null;\n        }\n        if (this.drillThroughModule) {\n            this.drillThroughModule = null;\n        }\n        if (this.clonedDataSet) {\n            this.clonedDataSet = null;\n        }\n        if (this.clonedReport) {\n            this.clonedReport = null;\n        }\n        if (this.pagerModule) {\n            this.pagerModule = null;\n        }\n        if (this.chartExportModule) {\n            this.chartExportModule = null;\n        }\n        if (this.exportSpecifiedPages) {\n            this.exportSpecifiedPages = undefined;\n        }\n        this.element.innerHTML = '';\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([this.element], _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.ROOT);\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([this.element], _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.RTL);\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([this.element], _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.DEVICE);\n        this.globalize = null;\n        this.localeObj = null;\n        this.currentView = null;\n        this.fieldListSpinnerElement = null;\n        this.lastSortInfo = null;\n        this.lastFilterInfo = null;\n        this.lastAggregationInfo = null;\n        this.lastCalcFieldInfo = null;\n        this.lastCellClicked = null;\n        this.lastColumn = null;\n        this.pivotCommon = null;\n    };\n    /**\n     * Method to open the number formatting dialog to set the format dynamically.\n     *\n     * @returns {void}\n     */\n    PivotView.prototype.showNumberFormattingDialog = function () {\n        if (this.allowNumberFormatting) {\n            this.numberFormattingModule.showNumberFormattingDialog();\n        }\n    };\n    /** @hidden */\n    PivotView.prototype.getValuesHeader = function (pivotCell, type) {\n        var values = this.dataSourceSettings.values;\n        if (type === 'value' && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(pivotCell.valueSort) && (this.localeObj.getConstant('grandTotal') + this.dataSourceSettings.valueSortSettings.headerDelimiter + pivotCell.formattedText)\n            === pivotCell.valueSort.levelName && ((pivotCell.axis === 'column' && this.dataSourceSettings.columns.length === 0 && this.dataSourceSettings.valueAxis === 'column') || (pivotCell.axis === 'row' &&\n            this.dataSourceSettings.rows.length === 0 && this.dataSourceSettings.valueAxis === 'row'))) {\n            return this.localeObj.getConstant('total') + ' ' + this.localeObj.getConstant(this.engineModule.fieldList[pivotCell.actualText].aggregateType) + ' ' +\n                this.localeObj.getConstant('of') + ' ' + pivotCell.formattedText;\n        }\n        else if (type === 'grandTotal' && values.length === 1 && this.dataSourceSettings.valueAxis === 'row' && pivotCell.formattedText === this.localeObj.getConstant('grandTotal')) {\n            return this.localeObj.getConstant('total') + ' ' + this.localeObj.getConstant(values[values.length - 1].type) + ' ' +\n                this.localeObj.getConstant('of') + ' ' + (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(values[values.length - 1].caption) ? values[values.length - 1].caption\n                : values[values.length - 1].name);\n        }\n        return pivotCell.formattedText;\n    };\n    PivotView.prototype.setColumnWidth = function (column, width) {\n        if (!column.autoFit) {\n            if (column.width !== 'auto') {\n                column.width = (this.renderModule.lastColumn && column.field === this.renderModule.lastColumn.field) ?\n                    (width - 3) : width;\n            }\n            else {\n                column.minWidth = width;\n            }\n        }\n    };\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('USD')\n    ], PivotView.prototype, \"currencyCode\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], PivotView.prototype, \"showFieldList\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({}, _model_gridsettings__WEBPACK_IMPORTED_MODULE_8__.GridSettings)\n    ], PivotView.prototype, \"gridSettings\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({}, _model_chartsettings__WEBPACK_IMPORTED_MODULE_17__.ChartSettings)\n    ], PivotView.prototype, \"chartSettings\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({}, GroupingBarSettings)\n    ], PivotView.prototype, \"groupingBarSettings\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({}, HyperlinkSettings)\n    ], PivotView.prototype, \"hyperlinkSettings\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({}, PageSettings)\n    ], PivotView.prototype, \"pageSettings\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({}, PagerSettings)\n    ], PivotView.prototype, \"pagerSettings\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({}, _model_datasourcesettings__WEBPACK_IMPORTED_MODULE_7__.DataSourceSettings)\n    ], PivotView.prototype, \"dataSourceSettings\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({}, CellEditSettings)\n    ], PivotView.prototype, \"editSettings\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({}, DisplayOption)\n    ], PivotView.prototype, \"displayOption\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({}, VirtualScrollSettings)\n    ], PivotView.prototype, \"virtualScrollSettings\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)()\n    ], PivotView.prototype, \"pivotValues\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], PivotView.prototype, \"showGroupingBar\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(true)\n    ], PivotView.prototype, \"showTooltip\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], PivotView.prototype, \"showToolbar\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)([])\n    ], PivotView.prototype, \"toolbar\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], PivotView.prototype, \"showValuesButton\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], PivotView.prototype, \"allowCalculatedField\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], PivotView.prototype, \"enableFieldSearching\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], PivotView.prototype, \"enableValueSorting\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], PivotView.prototype, \"allowConditionalFormatting\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], PivotView.prototype, \"allowNumberFormatting\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('auto')\n    ], PivotView.prototype, \"height\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('auto')\n    ], PivotView.prototype, \"width\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], PivotView.prototype, \"allowExcelExport\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], PivotView.prototype, \"enableVirtualization\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], PivotView.prototype, \"enablePaging\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], PivotView.prototype, \"allowDrillThrough\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], PivotView.prototype, \"allowPdfExport\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], PivotView.prototype, \"allowDeferLayoutUpdate\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], PivotView.prototype, \"allowDataCompression\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(1000)\n    ], PivotView.prototype, \"maxNodeLimitInMemberEditor\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(10000)\n    ], PivotView.prototype, \"maxRowsInDrillThrough\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(true)\n    ], PivotView.prototype, \"loadOnDemandInMemberEditor\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], PivotView.prototype, \"enableHtmlSanitizer\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)()\n    ], PivotView.prototype, \"cellTemplate\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)()\n    ], PivotView.prototype, \"toolbarTemplate\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)()\n    ], PivotView.prototype, \"tooltipTemplate\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)()\n    ], PivotView.prototype, \"spinnerTemplate\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], PivotView.prototype, \"allowGrouping\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(true)\n    ], PivotView.prototype, \"exportAllPages\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(['Sum', 'Count', 'DistinctCount', 'Product', 'Min', 'Max', 'Avg', 'Median', 'Index', 'PopulationVar', 'SampleVar', 'PopulationStDev', 'SampleStDev', 'RunningTotals', 'PercentageOfGrandTotal', 'PercentageOfColumnTotal', 'PercentageOfRowTotal', 'PercentageOfParentColumnTotal', 'PercentageOfParentRowTotal', 'DifferenceFrom', 'PercentageOfDifferenceFrom', 'PercentageOfParentTotal'])\n    ], PivotView.prototype, \"aggregateTypes\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(['Column', 'Bar', 'Line', 'Area', 'Scatter', 'Polar', 'StackingColumn', 'StackingArea', 'StackingBar', 'StackingLine', 'StepLine', 'StepArea', 'SplineArea', 'Spline', 'StackingColumn100', 'StackingBar100', 'StackingArea100', 'StackingLine100', 'Bubble', 'Pareto', 'Radar', 'Pie', 'Doughnut', 'Funnel', 'Pyramid'])\n    ], PivotView.prototype, \"chartTypes\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('')\n    ], PivotView.prototype, \"cssClass\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], PivotView.prototype, \"queryCellInfo\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], PivotView.prototype, \"headerCellInfo\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], PivotView.prototype, \"resizing\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], PivotView.prototype, \"resizeStop\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], PivotView.prototype, \"pdfHeaderQueryCellInfo\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], PivotView.prototype, \"pdfQueryCellInfo\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], PivotView.prototype, \"excelHeaderQueryCellInfo\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], PivotView.prototype, \"excelQueryCellInfo\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], PivotView.prototype, \"columnDragStart\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], PivotView.prototype, \"columnDrag\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], PivotView.prototype, \"columnDrop\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], PivotView.prototype, \"beforePdfExport\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], PivotView.prototype, \"beforeExcelExport\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], PivotView.prototype, \"beforeColumnsRender\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], PivotView.prototype, \"selected\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], PivotView.prototype, \"selecting\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], PivotView.prototype, \"cellDeselected\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], PivotView.prototype, \"rowSelected\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], PivotView.prototype, \"rowDeselected\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], PivotView.prototype, \"chartTooltipRender\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], PivotView.prototype, \"chartLegendClick\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], PivotView.prototype, \"beforePrint\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], PivotView.prototype, \"animationComplete\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], PivotView.prototype, \"legendRender\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], PivotView.prototype, \"textRender\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], PivotView.prototype, \"pointRender\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], PivotView.prototype, \"seriesRender\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], PivotView.prototype, \"chartMouseMove\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], PivotView.prototype, \"chartMouseClick\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], PivotView.prototype, \"pointMove\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], PivotView.prototype, \"chartMouseLeave\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], PivotView.prototype, \"chartMouseDown\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], PivotView.prototype, \"chartMouseUp\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], PivotView.prototype, \"dragComplete\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], PivotView.prototype, \"zoomComplete\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], PivotView.prototype, \"scrollStart\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], PivotView.prototype, \"scrollEnd\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], PivotView.prototype, \"scrollChanged\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], PivotView.prototype, \"multiLevelLabelRender\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], PivotView.prototype, \"chartLoaded\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], PivotView.prototype, \"chartLoad\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], PivotView.prototype, \"chartResized\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], PivotView.prototype, \"chartAxisLabelRender\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], PivotView.prototype, \"multiLevelLabelClick\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], PivotView.prototype, \"chartPointClick\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], PivotView.prototype, \"contextMenuClick\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], PivotView.prototype, \"contextMenuOpen\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], PivotView.prototype, \"onPdfCellRender\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], PivotView.prototype, \"saveReport\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], PivotView.prototype, \"fetchReport\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], PivotView.prototype, \"loadReport\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], PivotView.prototype, \"renameReport\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], PivotView.prototype, \"removeReport\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], PivotView.prototype, \"newReport\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], PivotView.prototype, \"toolbarRender\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], PivotView.prototype, \"toolbarClick\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], PivotView.prototype, \"load\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], PivotView.prototype, \"enginePopulating\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], PivotView.prototype, \"enginePopulated\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], PivotView.prototype, \"onFieldDropped\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], PivotView.prototype, \"fieldDrop\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], PivotView.prototype, \"fieldDragStart\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], PivotView.prototype, \"dataBound\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], PivotView.prototype, \"created\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], PivotView.prototype, \"destroyed\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], PivotView.prototype, \"beforeExport\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], PivotView.prototype, \"exportComplete\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], PivotView.prototype, \"conditionalFormatting\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], PivotView.prototype, \"memberFiltering\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], PivotView.prototype, \"cellClick\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], PivotView.prototype, \"drillThrough\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], PivotView.prototype, \"editCompleted\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], PivotView.prototype, \"beginDrillThrough\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], PivotView.prototype, \"hyperlinkCellClick\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], PivotView.prototype, \"cellSelecting\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], PivotView.prototype, \"drill\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], PivotView.prototype, \"cellSelected\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], PivotView.prototype, \"chartSeriesCreated\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], PivotView.prototype, \"aggregateCellInfo\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], PivotView.prototype, \"fieldListRefreshed\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], PivotView.prototype, \"memberEditorOpen\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], PivotView.prototype, \"calculatedFieldCreate\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], PivotView.prototype, \"numberFormatting\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], PivotView.prototype, \"aggregateMenuOpen\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], PivotView.prototype, \"fieldRemove\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], PivotView.prototype, \"beforeServiceInvoke\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], PivotView.prototype, \"afterServiceInvoke\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], PivotView.prototype, \"actionBegin\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], PivotView.prototype, \"actionComplete\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], PivotView.prototype, \"actionFailure\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], PivotView.prototype, \"onHeadersSort\", void 0);\n    PivotView = __decorate([\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.NotifyPropertyChanges\n    ], PivotView);\n    return PivotView;\n}(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Component));\n\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-pivotview/src/pivotview/base/pivotview.js?");

/***/ })

}]);