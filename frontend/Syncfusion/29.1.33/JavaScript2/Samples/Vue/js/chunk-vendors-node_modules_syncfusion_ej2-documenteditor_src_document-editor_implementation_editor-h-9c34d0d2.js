"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkej2_vue_samples"] = self["webpackChunkej2_vue_samples"] || []).push([["chunk-vendors-node_modules_syncfusion_ej2-documenteditor_src_document-editor_implementation_editor-h-9c34d0d2"],{

/***/ "./node_modules/@syncfusion/ej2-documenteditor/src/document-editor/implementation/editor-history/base-history-info.js":
/*!****************************************************************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-documenteditor/src/document-editor/implementation/editor-history/base-history-info.js ***!
  \****************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseHistoryInfo: () => (/* binding */ BaseHistoryInfo)\n/* harmony export */ });\n/* harmony import */ var _format_paragraph_format__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../format/paragraph-format */ \"./node_modules/@syncfusion/ej2-documenteditor/src/document-editor/implementation/format/paragraph-format.js\");\n/* harmony import */ var _format_section_format__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../format/section-format */ \"./node_modules/@syncfusion/ej2-documenteditor/src/document-editor/implementation/format/section-format.js\");\n/* harmony import */ var _format_character_format__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../format/character-format */ \"./node_modules/@syncfusion/ej2-documenteditor/src/document-editor/implementation/format/character-format.js\");\n/* harmony import */ var _format_list_format__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../format/list-format */ \"./node_modules/@syncfusion/ej2-documenteditor/src/document-editor/implementation/format/list-format.js\");\n/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../index */ \"./node_modules/@syncfusion/ej2-documenteditor/src/document-editor/implementation/index.js\");\n/* harmony import */ var _history_helper__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./history-helper */ \"./node_modules/@syncfusion/ej2-documenteditor/src/document-editor/implementation/editor-history/history-helper.js\");\n/* harmony import */ var _viewer_page__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../viewer/page */ \"./node_modules/@syncfusion/ej2-documenteditor/src/document-editor/implementation/viewer/page.js\");\n/* harmony import */ var _base_dictionary__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../base/dictionary */ \"./node_modules/@syncfusion/ej2-documenteditor/src/document-editor/base/dictionary.js\");\n/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../index */ \"./node_modules/@syncfusion/ej2-documenteditor/src/document-editor/index.js\");\n/* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @syncfusion/ej2-base */ \"./node_modules/@syncfusion/ej2-base/index.js\");\n/* harmony import */ var _format_index__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../format/index */ \"./node_modules/@syncfusion/ej2-documenteditor/src/document-editor/implementation/format/index.js\");\n/* harmony import */ var _editor_editor_helper__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../editor/editor-helper */ \"./node_modules/@syncfusion/ej2-documenteditor/src/document-editor/implementation/editor/editor-helper.js\");\n/* harmony import */ var _base_types__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../base/types */ \"./node_modules/@syncfusion/ej2-documenteditor/src/document-editor/base/types.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// Code for Comparing the offset calculated using old approach and optimized approach\n// /**\n//  * @private\n//  */\n// export class MyError extends Error {\n//     constructor(message: string) {\n//         super(message);\n//     }\n// }\n// export function throwCustomError(condition: boolean, message: string) {\n//     if (condition) {\n//         throw new MyError(message);\n//     }\n// }\n/**\n * @private\n */\nvar BaseHistoryInfo = /** @class */ (function () {\n    function BaseHistoryInfo(node) {\n        this.cellOperation = [];\n        this.splittedRevisions = [];\n        this.isRemovedNodes = false;\n        this.modifiedFormatOperation = [];\n        this.revisionOperation = [];\n        /**\n         * @private\n         */\n        this.markerData = [];\n        /**\n         * @private\n         */\n        this.pastedComments = [];\n        this.ownerIn = node;\n        this.documentHelper = node.documentHelper;\n        this.modifiedPropertiesIn = [];\n        this.modifiedNodeLength = [];\n        this.removedNodesIn = [];\n        this.insertedNodes = [];\n    }\n    Object.defineProperty(BaseHistoryInfo.prototype, \"owner\", {\n        //Properties\n        //gets owner control\n        get: function () {\n            return this.ownerIn;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(BaseHistoryInfo.prototype, \"editorHistory\", {\n        get: function () {\n            return this.owner.editorHistoryModule;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(BaseHistoryInfo.prototype, \"action\", {\n        get: function () {\n            return this.actionIn;\n        },\n        set: function (value) {\n            this.actionIn = value;\n            if (this.owner.enableCollaborativeEditing && !this.editorHistory.isUndoing && this.cellOperation.length === 0) {\n                if (value === 'DeleteColumn' || value === 'DeleteCells' || value === 'ClearCells' || value === 'MergeCells') {\n                    if (!(this.owner.selectionModule.isTableSelected(true) || this.owner.selectionModule.isRowSelect()) || value === 'ClearCells' || value === 'MergeCells') {\n                        this.insertedText = _base_types__WEBPACK_IMPORTED_MODULE_12__.CONTROL_CHARACTERS.Cell;\n                        this.deleteColumnOperation(this.action);\n                    }\n                }\n                else if (value === 'Accept Change' || value === 'Reject Change') {\n                    this.createAcceptRejectOperation(this.action);\n                }\n                else if (value === 'SectionBreak') {\n                    this.insertedText = _base_types__WEBPACK_IMPORTED_MODULE_12__.CONTROL_CHARACTERS.Section_Break;\n                    this.type = 'NewPage';\n                }\n                else if (value === 'SectionBreakContinuous') {\n                    this.insertedText = _base_types__WEBPACK_IMPORTED_MODULE_12__.CONTROL_CHARACTERS.Section_Break;\n                    this.type = 'Continuous';\n                }\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(BaseHistoryInfo.prototype, \"modifiedProperties\", {\n        get: function () {\n            return this.modifiedPropertiesIn;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(BaseHistoryInfo.prototype, \"removedNodes\", {\n        /* eslint-enable */\n        get: function () {\n            return this.removedNodesIn;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(BaseHistoryInfo.prototype, \"selectionStart\", {\n        //gets or sets selection start\n        get: function () {\n            return this.selectionStartIn;\n        },\n        set: function (value) {\n            this.selectionStartIn = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(BaseHistoryInfo.prototype, \"selectionEnd\", {\n        get: function () {\n            return this.selectionEndIn;\n        },\n        set: function (value) {\n            this.selectionEndIn = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(BaseHistoryInfo.prototype, \"insertPosition\", {\n        get: function () {\n            return this.insertPositionIn;\n        },\n        set: function (value) {\n            this.insertPositionIn = value;\n            if (this.owner.enableCollaborativeEditing && !this.owner.editorModule.isRemoteAction && value !== '' && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_9__.isNullOrUndefined)(value) && value.indexOf('C') === -1) {\n                //TODO: Insert position not needed in all the cases. Need to optimize it.\n                this.insertIndex = this.owner.selectionModule.getAbsolutePositionFromRelativePosition(value);\n                // Code for Comparing the offset calculated using old approach and optimized approach\n                // this.owner.selection.isNewApproach = true;\n                // this.newInsertIndex = this.owner.selection.getAbsolutePositionFromRelativePosition(value);\n                // this.owner.selection.isNewApproach = false;\n                // throwCustomError(this.newInsertIndex !== this.insertIndex, \"New InsertIndex \" + this.newInsertIndex + \" and old insertIndex \" + this.insertIndex + \" doesnot match\");\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(BaseHistoryInfo.prototype, \"endPosition\", {\n        get: function () {\n            return this.endPositionIn;\n        },\n        set: function (value) {\n            this.endPositionIn = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(BaseHistoryInfo.prototype, \"viewer\", {\n        get: function () {\n            return this.ownerIn.viewer;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    BaseHistoryInfo.prototype.updateSelection = function () {\n        this.updateCollaborativeSelection(this.owner.selectionModule.start.clone(), this.owner.selectionModule.end.clone());\n        var blockInfo = this.owner.selectionModule.getParagraphInfo(this.owner.selectionModule.start);\n        this.selectionStart = this.owner.selectionModule.getHierarchicalIndex(blockInfo.paragraph, blockInfo.offset.toString());\n        blockInfo = this.owner.selectionModule.getParagraphInfo(this.owner.selectionModule.end);\n        this.selectionEnd = this.owner.selectionModule.getHierarchicalIndex(blockInfo.paragraph, blockInfo.offset.toString());\n    };\n    BaseHistoryInfo.prototype.updateCollaborativeSelection = function (start, end) {\n        if (this.owner.enableCollaborativeEditing && !this.owner.editorModule.isRemoteAction) {\n            //TODO: Need to consider formard and backward selection\n            if (this.action === 'RemoveEditRange') {\n                var startEdit = this.owner.selectionModule.getEditRangeStartElement();\n                var position = this.owner.selectionModule.getPosition(startEdit);\n                start = position.startPosition;\n                end = position.endPosition;\n            }\n            else {\n                this.updateTableSelection(start, end);\n            }\n            this.startIndex = this.owner.selectionModule.getAbsolutePositionFromRelativePosition(start);\n            // Code for Comparing the offset calculated using old approach and optimized approach\n            // this.owner.selection.isNewApproach = true;\n            // this.newStartIndex = this.owner.selection.getAbsolutePositionFromRelativePosition(start);\n            // this.owner.selection.isNewApproach = false;\n            this.owner.selectionModule.isEndOffset = true;\n            this.endIndex = this.owner.selectionModule.getAbsolutePositionFromRelativePosition(end);\n            // Code for Comparing the offset calculated using old approach and optimized approach\n            // this.owner.selection.isNewApproach = true;\n            // this.newEndIndex = this.owner.selection.getAbsolutePositionFromRelativePosition(end);\n            // this.owner.selection.isNewApproach = false;\n            this.owner.selectionModule.isEndOffset = false;\n            var isForward = this.owner.selectionModule.isForward;\n            if (isForward) {\n                this.startIndex -= this.owner.selectionModule.getTableRelativeValue(start, end);\n            }\n            else {\n                this.endIndex -= this.owner.selectionModule.getTableRelativeValue(end, start);\n            }\n            // if (this.action === 'BackSpace' || this.action === 'Delete') {\n            var isParagraphStart = isForward ? (start.paragraph.equals(end.paragraph)\n                && start.isAtParagraphStart) : (start.paragraph.equals(end.paragraph) && end.isAtParagraphStart);\n            if ((isParagraphStart || !start.paragraph.equals(end.paragraph))) {\n                if (isForward) {\n                    this.endIndex += this.paraInclude(end);\n                }\n                else {\n                    this.startIndex += this.paraInclude(start);\n                }\n            }\n            // }\n            if (!this.owner.enableTrackChanges) {\n                this.splitOperationForDelete(start, end);\n            }\n            // Code for Comparing the offset calculated using old approach and optimized approach\n            // throwCustomError(this.newStartIndex !== this.startIndex, \"New StartIndex \" + this.newStartIndex + \" and old StartIndex \" + this.startIndex + \" doesnot match\");\n            // throwCustomError(this.newEndIndex !== this.endIndex, \"New EndIndex \" + this.newEndIndex + \" and old EndIndex \" + this.endIndex + \" doesnot match\");\n        }\n    };\n    BaseHistoryInfo.prototype.paraInclude = function (position) {\n        var paragrapthInfo = this.owner.selectionModule.getParagraphInfo(position);\n        if (position.paragraph.getTotalLength() < paragrapthInfo.offset) {\n            if (!(position.paragraph.isInsideTable\n                && position.paragraph.equals(position.paragraph.associatedCell.lastChild))) {\n                return 1;\n            }\n        }\n        return 0;\n    };\n    /**\n     * This method will set position when the multple cell selected.\n     *\n     * @param {TextPosition} startPosition - Specifies the start position.\n     * @param {TextPosition} endPosition - Specifies the end position.\n     * @private\n     * @returns {void}\n     */\n    BaseHistoryInfo.prototype.updateTableSelection = function (startPosition, endPosition) {\n        var start = startPosition;\n        var end = endPosition;\n        if (!this.owner.selectionModule.isForward) {\n            start = endPosition;\n            end = startPosition;\n        }\n        if (start.paragraph.isInsideTable) {\n            var firstPara = this.owner.selectionModule.getFirstParagraph(start.paragraph.associatedCell);\n            if (end.paragraph.isInsideTable) {\n                if (!start.paragraph.associatedCell.equals(end.paragraph.associatedCell)) {\n                    var lastPara = this.owner.selectionModule.getLastParagraph(end.paragraph.associatedCell);\n                    start.setPosition(firstPara.firstChild, true);\n                    end.setPositionParagraph(lastPara.lastChild, lastPara.lastChild.getEndOffset() + 1);\n                }\n            }\n            else {\n                start.setPosition(firstPara.firstChild, true);\n            }\n        }\n        else if (end.paragraph.isInsideTable) {\n            var lastPara = this.owner.selectionModule.getLastParagraph(end.paragraph.associatedCell);\n            end.setPositionParagraph(lastPara.lastChild, lastPara.lastChild.getEndOffset() + 1);\n        }\n    };\n    /**\n     * start is para and end is in row.\n     *\n     * @param {TextPosition} startPosition - Specifies the start position.\n     * @param {TextPosition} endPosition - Specifies the end position.\n     * @private\n     * @returns {void}\n     */\n    BaseHistoryInfo.prototype.splitOperationForDelete = function (startPosition, endPosition) {\n        // when start is para and end is row. we are building the operation like:\n        // fisrt delete the end table from table start to selection end.\n        // second need to paste the content from the start para and need to paste it in the next row.\n        // third delete the start paragraph to before wiget of end table.\n        var start = startPosition;\n        var end = endPosition;\n        if (!this.owner.selectionModule.isForward) {\n            start = endPosition;\n            end = startPosition;\n        }\n        if (!start.paragraph.isInsideTable && end.paragraph.isInsideTable && (this.action === 'BackSpace' || this.action === 'Delete')) {\n            var lastParagraph = this.owner.selectionModule.getLastBlockInLastCell(end.paragraph.associatedCell.ownerTable);\n            if (!lastParagraph.associatedCell.equals(end.paragraph.associatedCell)) {\n                var PasteLength = this.startIndex;\n                var endLineWidget = start.currentWidget;\n                var endOffset = start.offset;\n                start.setPosition(start.paragraph.firstChild, true);\n                this.startIndex = this.owner.selectionModule.getAbsolutePositionFromRelativePosition(start);\n                var startIndex = this.startIndex;\n                var table = this.owner.documentHelper.layout.getParentTable(end.paragraph.associatedCell.ownerTable);\n                var paragraphInfo = { 'paragraph': null, 'offset': 0 };\n                var tableStart = this.owner.selectionModule.getPositionInfoForHeaderFooter(paragraphInfo, { position: 0, done: false }, table).position;\n                // Table start will get the offset for table. So adding plus one to row offset.\n                this.startIndex = tableStart + 1;\n                this.cellOperation.push(this.getDeleteOperation(this.action));\n                // This will add the paste content in first and first cell so adding plus 3.\n                this.startIndex = tableStart + 3;\n                if (endOffset !== 0) {\n                    this.pasteContent = this.owner.sfdtExportModule.write((this.owner.documentEditorSettings.optimizeSfdt ? 1 : 0), start.currentWidget, start.offset, endLineWidget, endOffset, false, true);\n                    this.cellOperation.push(this.getPasteOpertion(this.pasteContent, PasteLength - startIndex));\n                }\n                this.endIndex = tableStart;\n                this.startIndex = startIndex;\n                this.cellOperation.push(this.getDeleteOperation(this.action));\n            }\n        }\n        if (this.action === 'PasteColumn' || this.action === 'PasteOverwrite' || this.action === 'PasteRow') {\n            //when inserting new colomn in paste. first deleting the table and inserting the whole table.\n            var table = startPosition.paragraph.associatedCell.ownerTable;\n            var paragraphInfo = { 'paragraph': null, 'offset': 0 };\n            this.startIndex = this.owner.selectionModule.getPositionInfoForHeaderFooter(paragraphInfo, { position: 0, done: false }, table).position;\n            this.endIndex = this.startIndex + this.owner.selectionModule.getBlockLength(undefined, table, 0, { done: false }, true, undefined, undefined);\n        }\n    };\n    BaseHistoryInfo.prototype.setBookmarkInfo = function (bookmark) {\n        this.removedNodes.push({ 'bookmark': bookmark, 'startIndex': bookmark.indexInOwner, 'endIndex': bookmark.reference.indexInOwner });\n    };\n    BaseHistoryInfo.prototype.setContentControlInfo = function (contentControl) {\n        this.removedNodes.push({ 'contentcontrol': contentControl, 'startIndex': contentControl.indexInOwner, 'endIndex': contentControl.reference.indexInOwner });\n    };\n    BaseHistoryInfo.prototype.setFormFieldInfo = function (field, value) {\n        this.removedNodes.push({ 'formField': field, 'value': value });\n    };\n    BaseHistoryInfo.prototype.setEditRangeInfo = function (editStart) {\n        this.removedNodes.push({ 'editStart': editStart, 'startIndex': editStart.indexInOwner, 'endIndex': editStart.editRangeEnd.indexInOwner });\n    };\n    BaseHistoryInfo.prototype.setContentControlCheckBox = function (contentControl, value) {\n        this.removedNodes.push({ 'contentControlCheckBox': contentControl, 'value': value });\n    };\n    BaseHistoryInfo.prototype.revertFormTextFormat = function () {\n        /* eslint-disable @typescript-eslint/no-explicit-any */\n        var fieldInfo = this.removedNodes[0];\n        var text = fieldInfo.value;\n        /* eslint-enable @typescript-eslint/no-explicit-any */\n        var formField = fieldInfo.formField;\n        if (this.editorHistory.isUndoing) {\n            this.owner.editorModule.applyTextFormatInternal(formField, text);\n            this.editorHistory.recordChanges(this);\n        }\n        else {\n            text = _editor_editor_helper__WEBPACK_IMPORTED_MODULE_11__.HelperMethods.formatText(formField.formFieldData.format, text);\n            this.owner.editorModule.applyTextFormatInternal(formField, text);\n            this.editorHistory.undoStack.push(this);\n        }\n    };\n    BaseHistoryInfo.prototype.revertFormField = function () {\n        /* eslint-disable @typescript-eslint/no-explicit-any */\n        var fieldInfo = this.removedNodes[0];\n        /* eslint-enable @typescript-eslint/no-explicit-any */\n        var field = fieldInfo.formField;\n        if (field.formFieldData instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_6__.CheckBoxFormField) {\n            this.owner.editorModule.toggleCheckBoxFormField(field, true, fieldInfo.value);\n        }\n        else {\n            this.owner.editorModule.updateFormField(field, fieldInfo.value);\n        }\n    };\n    BaseHistoryInfo.prototype.revertContentControl = function () {\n        var contentControlInfo = this.removedNodes[0];\n        var contentcontrol = contentControlInfo.contentcontrol;\n        if (this.editorHistory.isUndoing) {\n            var markerData = this.owner.editorModule.getMarkerData(contentcontrol);\n            this.markerData.push(markerData);\n            contentcontrol.line.children.splice(contentControlInfo.startIndex, 0, contentcontrol);\n            this.documentHelper.owner.editorModule.insertContentControlInCollection(contentcontrol);\n            //const previousNode: ElementBox = contentControl.previousNode;\n            this.markerData.push(markerData);\n            contentcontrol.reference.line.children.splice(contentControlInfo.endIndex, 0, contentcontrol.reference);\n            this.owner.editorModule.updatePropertiesToBlock(contentcontrol, true);\n            this.owner.selectionModule.updateContentControlHighlightSelection();\n            this.editorHistory.recordChanges(this);\n            this.viewer.updateScrollBars();\n            this.owner.editorModule.fireContentChange();\n        }\n        else {\n            this.owner.editorModule.removeContentControlInternal();\n            this.editorHistory.undoStack.push(this);\n        }\n    };\n    BaseHistoryInfo.prototype.revertBookmark = function () {\n        var bookmarkInfo = this.removedNodes[0];\n        var bookmark = bookmarkInfo.bookmark;\n        // When perform undo, redo for drag and drop operation, bookmark reference changed so we couldn't insert or delete proper bookmark. so updated the bookmark based on name.\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_9__.isNullOrUndefined)(bookmark) && (bookmark.line.indexInOwner === -1 || bookmark.line.paragraph.indexInOwner === -1) &&\n            !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_9__.isNullOrUndefined)(this.owner.documentHelper) && this.owner.documentHelper.bookmarks.length > 0) {\n            bookmark = this.owner.documentHelper.bookmarks.get(bookmark.name);\n            this.removedNodes[0].bookmark = bookmark;\n        }\n        if (this.editorHistory.isUndoing) {\n            var markerData = this.owner.editorModule.getMarkerData(bookmark);\n            this.documentHelper.bookmarks.add(bookmark.name, bookmark);\n            this.markerData.push(markerData);\n            bookmark.line.children.splice(bookmarkInfo.startIndex, 0, bookmark);\n            var previousNode = bookmark.previousNode;\n            if (previousNode instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_6__.FieldElementBox && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_9__.isNullOrUndefined)(previousNode.formFieldData)) {\n                previousNode.formFieldData.name = bookmark.name;\n            }\n            this.markerData.push(markerData);\n            bookmark.reference.line.children.splice(bookmarkInfo.endIndex, 0, bookmark.reference);\n            // Skip recording the changes if the currentHistoryInfo action is InsertBookmark. Because, the changes will be recorded in the update complex history.\n            if (!(this.editorHistory.currentHistoryInfo && this.editorHistory.currentHistoryInfo.action === 'InsertBookmark')) {\n                this.editorHistory.recordChanges(this);\n            }\n            if (this.owner.documentEditorSettings.showBookmarks === true) {\n                this.viewer.updateScrollBars();\n            }\n            this.owner.editorModule.fireContentChange();\n        }\n        else {\n            this.owner.editorModule.deleteBookmarkInternal(bookmark);\n            // Skip recording the changes if the currentHistoryInfo action is InsertBookmark. Because, the changes will be recorded in the update complex history.\n            if (!(this.editorHistory.currentHistoryInfo && this.editorHistory.currentHistoryInfo.action === 'InsertBookmark')) {\n                this.editorHistory.undoStack.push(this);\n            }\n        }\n    };\n    BaseHistoryInfo.prototype.revertComment = function () {\n        var editPosition = this.insertPosition;\n        var comment = this.removedNodes[0];\n        var insert = false;\n        if (this.action === 'ResolveComment') {\n            this.editorHistory.currentBaseHistoryInfo = this;\n            this.owner.editorModule.resolveOrReopenComment(comment, !comment.isResolved);\n            return;\n        }\n        if (this.action === 'EditComment') {\n            var modifiedCommentObject = this.modifiedProperties[0];\n            this.editorHistory.currentBaseHistoryInfo = this;\n            var commentView = this.owner.commentReviewPane.commentPane.comments.get(comment);\n            commentView.commentText.innerText = modifiedCommentObject.text;\n            modifiedCommentObject.text = comment.text;\n            comment.text = commentView.commentText.innerText;\n            this.owner.editorHistoryModule.updateHistory();\n            this.owner.fireContentChange();\n            return;\n        }\n        if (this.action === 'InsertCommentWidget') {\n            insert = (this.editorHistory.isRedoing);\n        }\n        else if (this.action === 'DeleteCommentWidget') {\n            insert = (this.editorHistory.isUndoing);\n        }\n        if (insert) {\n            if (comment) {\n                this.insertedElement = comment.clone();\n                if (comment.isReply) {\n                    this.owner.editorModule.addReplyComment(comment, this.insertPosition);\n                }\n                else {\n                    this.owner.editorModule.addCommentWidget(comment, false, true, true);\n                }\n            }\n        }\n        else {\n            var commentElement = this.owner.editorModule.getCommentElementBox(editPosition);\n            this.owner.editorModule.deleteCommentWidget(commentElement);\n        }\n    };\n    BaseHistoryInfo.prototype.revertEditRangeRegion = function () {\n        var editRangeInfo = this.removedNodes[0];\n        var editStart = editRangeInfo.editStart;\n        if (this.editorHistory.isUndoing) {\n            var user = editStart.user === '' ? editStart.group : editStart.user;\n            this.owner.editorModule.updateRangeCollection(editStart, user);\n            this.markerData.push(this.owner.editorModule.getMarkerData(editStart));\n            this.markerData.push(this.owner.editorModule.getMarkerData(editStart.editRangeEnd));\n            editStart.line.children.splice(editRangeInfo.startIndex, 0, editStart);\n            editStart.editRangeEnd.line.children.splice(editRangeInfo.endIndex, 0, editStart.editRangeEnd);\n            this.editorHistory.recordChanges(this);\n        }\n        else {\n            this.owner.editorModule.removeUserRestrictionsInternal(editStart);\n            this.editorHistory.undoStack.push(this);\n        }\n        this.owner.editorModule.fireContentChange();\n    };\n    BaseHistoryInfo.prototype.revertContentControlProperties = function () {\n        var start = this.selectionStart;\n        var end = this.selectionEnd;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_9__.isNullOrUndefined)(this.selectionStart) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_9__.isNullOrUndefined)(this.selectionEnd)) {\n            var selectionStartTextPosition = this.owner.selectionModule.getTextPosBasedOnLogicalIndex(start);\n            var selectionEndTextPosition = this.owner.selectionModule.getTextPosBasedOnLogicalIndex(end);\n            this.owner.selectionModule.selectRange(selectionStartTextPosition, selectionEndTextPosition);\n            var contentcontrol = this.owner.selection.currentContentControl;\n            if (contentcontrol) {\n                if (contentcontrol.contentControlProperties.type === 'CheckBox' && this.modifiedProperties.length === 0) {\n                    var contentControlInfo = this.removedNodes[0];\n                    this.owner.editorModule.toggleContentControlCheckBox(contentcontrol, !contentControlInfo.value);\n                    contentControlInfo.value = !contentControlInfo.value;\n                }\n                else {\n                    var contenControlObject = this.modifiedProperties.pop();\n                    this.editorHistory.currentBaseHistoryInfo = this;\n                    var content = this.owner.editorModule.getContentControlPropObject(contentcontrol.contentControlProperties);\n                    this.owner.editorModule.assignContentControl(contentcontrol.contentControlProperties, contenControlObject);\n                    this.modifiedProperties.push(content);\n                    this.format = JSON.stringify(contenControlObject);\n                }\n            }\n        }\n        if (this.editorHistory.isUndoing) {\n            this.editorHistory.recordChanges(this);\n        }\n        else {\n            this.editorHistory.undoStack.push(this);\n        }\n        this.owner.editorModule.fireContentChange();\n    };\n    /* eslint-disable  */\n    BaseHistoryInfo.prototype.revert = function () {\n        if (this.action === 'FormTextFormat') {\n            this.revertFormTextFormat();\n            return;\n        }\n        if (this.action === 'UpdateFormField') {\n            this.revertFormField();\n            return;\n        }\n        if (this.action === 'DeleteBookmark') {\n            this.revertBookmark();\n            return;\n        }\n        if (this.action === 'RemoveContentControl') {\n            this.revertContentControl();\n            return;\n        }\n        if (this.action === 'RemoveEditRange') {\n            this.revertEditRangeRegion();\n            return;\n        }\n        if (this.action === 'InsertCommentWidget' || this.action === 'DeleteCommentWidget' || this.action === 'ResolveComment' || this.action === 'EditComment') {\n            this.revertComment();\n            return;\n        }\n        if (this.action === 'UpdateContentControl') {\n            this.revertContentControlProperties();\n            return;\n        }\n        if (this.action === 'ListFormat' && this.owner.editorModule.listNumberFormat !== '') {\n            var abstractList = this.documentHelper.lists[0].abstractList.levels[this.owner.editorModule.listLevelNumber];\n            var currentListLevelPattern = abstractList.listLevelPattern;\n            var currentNUmberFormat = abstractList.numberFormat;\n            abstractList.listLevelPattern = this.owner.editorModule.listLevelPattern;\n            abstractList.numberFormat = this.owner.editorModule.listNumberFormat;\n            this.owner.editorModule.listLevelPattern = currentListLevelPattern;\n            this.owner.editorModule.listNumberFormat = currentNUmberFormat;\n        }\n        this.owner.isShiftingEnabled = true;\n        var selectionStartTextPosition = undefined;\n        var selectionEndTextPosition = undefined;\n        var start = this.selectionStart;\n        var end = this.selectionEnd;\n        this.collabStart = this.selectionStart;\n        this.collabEnd = this.selectionEnd;\n        var isForwardSelection = _index__WEBPACK_IMPORTED_MODULE_4__.TextPosition.isForwardSelection(start, end);\n        if (this.modifiedProperties.length > 0 || this.action === 'Selection'\n            || this.action === 'ClearCharacterFormat' || this.action === 'ClearParagraphFormat') {\n            selectionStartTextPosition = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_9__.isNullOrUndefined)(start) ? this.owner.selectionModule.getTextPosBasedOnLogicalIndex(start) : undefined;\n            selectionEndTextPosition = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_9__.isNullOrUndefined)(end) ? this.owner.selectionModule.getTextPosBasedOnLogicalIndex(end) : undefined;\n            if (this.owner.enableCollaborativeEditing) {\n                this.updateCollaborativeSelection(selectionStartTextPosition, selectionEndTextPosition);\n            }\n            this.revertModifiedProperties(selectionStartTextPosition, selectionEndTextPosition);\n        }\n        else {\n            if (this.owner.enableCollaborativeEditing) {\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_9__.isNullOrUndefined)(this.insertPosition)) {\n                    this.insertIndex = this.owner.selectionModule.getAbsolutePositionFromRelativePosition(this.insertPosition);\n                }\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_9__.isNullOrUndefined)(this.endPosition)) {\n                    var startPosition = this.owner.selection.getTextPosBasedOnLogicalIndex(this.insertPosition);\n                    var endPosition = this.owner.selection.getTextPosBasedOnLogicalIndex(this.endPosition);\n                    this.updateCollaborativeSelection(startPosition, endPosition);\n                }\n            }\n            var sel = this.owner.selectionModule;\n            var deletedNodes = this.removedNodes;\n            if (this.removedNodes.length > 0) {\n                if (this.action === 'InsertTable' && this.editorHistory.isRedoing) {\n                    for (var i = 0; i < this.removedNodes.length; i++) {\n                        this.insertedNodes.push(this.removedNodes[parseInt(i.toString(), 10)]);\n                    }\n                }\n                this.isRemovedNodes = true;\n            }\n            else {\n                this.isRemovedNodes = false;\n            }\n            this.removedNodesIn = [];\n            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_9__.isNullOrUndefined)(this.endPosition)) {\n                this.endPosition = this.insertPosition;\n            }\n            var isForward = _index__WEBPACK_IMPORTED_MODULE_4__.TextPosition.isForwardSelection(this.insertPosition, this.endPosition);\n            var insertTextPosition = sel.getTextPosBasedOnLogicalIndex(isForward ? this.insertPosition : this.endPosition);\n            var endTextPosition = sel.getTextPosBasedOnLogicalIndex(isForward ? this.endPosition : this.insertPosition);\n            // Set the endRevisionLogicalIndex based on undo stack value when the selection contains a table with the above paragraph (undoing).\n            if (this.action === 'RemoveRowTrack' && this.editorHistory.isUndoing) {\n                this.owner.selectionModule.select(this.selectionEnd, this.selectionEnd);\n                var isLastChild = (this.owner.selectionModule.start.paragraph === this.owner.editor.getLastParaForBodywidgetCollection(this.owner.selectionModule.start.paragraph));\n                if (this.owner.selectionModule.start.paragraph.isInsideTable || isLastChild && this.owner.selectionModule.end.paragraph.isEmpty() && deletedNodes.length > 0 && deletedNodes[0] instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_6__.TableWidget) {\n                    this.endRevisionLogicalIndex = this.selectionEnd;\n                }\n            }\n            if (this.editorHistory.isUndoing) {\n                if (this.lastElementRevision && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_9__.isNullOrUndefined)(this.isAcceptOrReject) && deletedNodes.length > 0 && deletedNodes[0] instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_6__.ParagraphWidget && deletedNodes[0].isEmpty()) {\n                    this.endRevisionLogicalIndex = this.selectionEnd;\n                }\n                else if (this.action === 'Delete' && this.editorHistory.currentHistoryInfo\n                    && this.editorHistory.currentHistoryInfo.action === 'RemoveHyperlink'\n                    && this.lastElementRevision instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_6__.FieldElementBox) {\n                    // Bug 873011: Updated the selection for delete operation on \"RemoveHyperlink\" undo case.\n                    this.endRevisionLogicalIndex = this.selectionEnd;\n                }\n                else if (this.lastElementRevision && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_9__.isNullOrUndefined)(this.endRevisionLogicalIndex)) {\n                    this.updateEndRevisionInfo();\n                }\n                else if (this.action === 'RemoveRowTrack') {\n                    this.endRevisionLogicalIndex = this.selectionEnd;\n                }\n            }\n            if (this.action === 'ClearRevisions') {\n                // Bug 873011: Handled the separate undo revision for field begin and field end for \"ClearRevisions\" action on hyperlink undo.\n                var fieldBegin = sel.getHyperlinkField();\n                if (this.isHyperlinkField && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_9__.isNullOrUndefined)(fieldBegin)) {\n                    var offset = fieldBegin.fieldSeparator.line.getOffset(fieldBegin.fieldSeparator, 1);\n                    endTextPosition.setPositionParagraph(fieldBegin.fieldSeparator.line, offset);\n                    this.undoRevisionForElements(insertTextPosition, endTextPosition, deletedNodes[deletedNodes.length - 1]);\n                    var fieldEnd = fieldBegin.fieldEnd;\n                    insertTextPosition.setPositionParagraph(fieldEnd.line, fieldEnd.line.getOffset(fieldEnd, 0));\n                    endTextPosition.setPositionParagraph(fieldEnd.line, fieldEnd.line.getOffset(fieldEnd, 1));\n                    this.undoRevisionForElements(insertTextPosition, endTextPosition, deletedNodes[deletedNodes.length - 1]);\n                }\n                else {\n                    this.owner.selectionModule.select(this.selectionEnd, this.selectionEnd);\n                    this.undoRevisionForElements(insertTextPosition, endTextPosition, deletedNodes[deletedNodes.length - 1]);\n                }\n                var id = deletedNodes[deletedNodes.length - 1];\n                if (this.removedNodes.indexOf(id) === -1) {\n                    this.removedNodes.push(id);\n                }\n                deletedNodes = [];\n            }\n            if (this.action === 'Uppercase') {\n                sel.selectPosition(insertTextPosition, endTextPosition);\n                this.editorHistory.currentBaseHistoryInfo = this;\n                var editModule = this.owner.editorModule;\n                editModule.changeSelectedTextCase(sel, insertTextPosition, endTextPosition, this.action.toString(), deletedNodes);\n                editModule.reLayout(sel);\n                return;\n            }\n            if (this.action === 'Lowercase') {\n                sel.selectPosition(insertTextPosition, endTextPosition);\n                this.editorHistory.currentBaseHistoryInfo = this;\n                var editModule = this.owner.editorModule;\n                editModule.changeSelectedTextCase(sel, insertTextPosition, endTextPosition, this.action.toString(), deletedNodes);\n                editModule.reLayout(sel);\n                return;\n            }\n            if (this.action === 'CapitalizeEachWord') {\n                sel.selectPosition(insertTextPosition, endTextPosition);\n                this.editorHistory.currentBaseHistoryInfo = this;\n                var editModule = this.owner.editorModule;\n                editModule.changeSelectedTextCase(sel, insertTextPosition, endTextPosition, this.action.toString(), deletedNodes);\n                editModule.reLayout(sel);\n                return;\n            }\n            if (this.action === 'SentenceCase') {\n                sel.selectPosition(insertTextPosition, endTextPosition);\n                this.editorHistory.currentBaseHistoryInfo = this;\n                var editModule = this.owner.editorModule;\n                editModule.changeSelectedTextCase(sel, insertTextPosition, endTextPosition, this.action.toString(), deletedNodes);\n                editModule.reLayout(sel);\n                return;\n            }\n            if (this.action === 'ToggleCase') {\n                sel.selectPosition(insertTextPosition, endTextPosition);\n                this.editorHistory.currentBaseHistoryInfo = this;\n                var editModule = this.owner.editorModule;\n                editModule.changeSelectedTextCase(sel, insertTextPosition, endTextPosition, this.action.toString(), deletedNodes);\n                editModule.reLayout(sel);\n                return;\n            }\n            if (insertTextPosition.isAtSamePosition(endTextPosition)) {\n                sel.selectContent(insertTextPosition, true);\n            }\n            else {\n                sel.selectPosition(insertTextPosition, endTextPosition);\n            }\n            if (this.action === 'InsertHyperlink' && this.editorHistory.isRedoing) {\n                var fieldBegin = this.owner.selectionModule.getHyperlinkField();\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_9__.isNullOrUndefined)(fieldBegin)) {\n                    var offset = (fieldBegin.line).getOffset(fieldBegin, 0);\n                    insertTextPosition.setPositionParagraph(fieldBegin.line, offset);\n                    this.owner.selectionModule.start.setPositionInternal(insertTextPosition);\n                    offset = fieldBegin.fieldEnd.line.getOffset(fieldBegin.fieldEnd, 1);\n                    endTextPosition.setPositionParagraph(fieldBegin.fieldEnd.line, offset);\n                }\n            }\n            this.editorHistory.currentBaseHistoryInfo = this;\n            this.selectionStart = this.insertPosition;\n            this.insertPosition = undefined;\n            this.selectionEnd = this.endPosition;\n            this.endPosition = undefined;\n            // Use this property to skip deletion if already selected content deleted case.\n            var isRemoveContent = false;\n            var isDeletecell = false;\n            if (this.action === 'DeleteCells' || this.action === 'RemoveRowTrack') {\n                isDeletecell = true;\n            }\n            if (this.endRevisionLogicalIndex && deletedNodes.length > 0) {\n                var currentPosition = sel.getTextPosBasedOnLogicalIndex(this.endRevisionLogicalIndex);\n                if ((this.editorHistory.isUndoing && !this.editorHistory.currentBaseHistoryInfo.isRevisionEndInAnotherCell) || (this.editorHistory.isRedoing && insertTextPosition.isAtSamePosition(endTextPosition))) {\n                    sel.selectPosition(insertTextPosition, currentPosition);\n                }\n                this.collabEnd = this.endRevisionLogicalIndex;\n                if (this.owner.enableCollaborativeEditing) {\n                    this.endIndex = this.owner.selectionModule.getAbsolutePositionFromRelativePosition(currentPosition);\n                    this.endIndex += this.paraInclude(currentPosition);\n                }\n                if (this.editorHistory.isUndoing || (this.editorHistory.isRedoing && !this.owner.selectionModule.isEmpty && deletedNodes.length > 0)) {\n                    this.owner.editorModule.deleteSelectedContents(sel, true, isDeletecell);\n                    isRemoveContent = true;\n                }\n            }\n            if (!insertTextPosition.isAtSamePosition(endTextPosition) && !isRemoveContent) {\n                isRemoveContent = this.action === 'BackSpace' || this.action === 'Delete' || this.action === 'ClearCells'\n                    || this.action === 'DeleteCells' || this.action === 'PasteOverwrite' || this.action === \"PasteRow\" || this.action === 'PasteNested';\n                var skipDelete = (deletedNodes.length > 0 && this.action === 'ParaMarkTrack') || this.action === 'ClearRevisions' || this.action === 'AcceptTOC';\n                if (!(isRemoveContent) && this.action !== 'MergeCells' && this.action !== 'InsertRowAbove'\n                    && this.action !== 'InsertRowBelow' && this.action !== 'InsertColumnLeft'\n                    && this.action !== 'InsertColumnRight' && this.action !== 'Borders'\n                    && this.action !== 'DeleteTable' && this.action !== 'DeleteColumn' && this.action !== 'DeleteRow') {\n                    sel.end.setPositionInternal(endTextPosition);\n                    if (!this.owner.selectionModule.isEmpty && !skipDelete) {\n                        if (this.editorHistory.isRedoing && this.action !== 'Accept Change' && this.action !== 'ParaMarkTrack' &&\n                            this.action !== 'ParaMarkReject' && this.action !== 'RemoveRowTrack') {\n                            this.owner.editorModule.removeSelectedContents(sel);\n                        }\n                        else {\n                            // Bug 873011: Handled the separate deletion for field begin and field end for \"Accept Change\" action on hyperlink redo.\n                            var fieldBegin = sel.getHyperlinkField();\n                            if (this.isHyperlinkField && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_9__.isNullOrUndefined)(fieldBegin)\n                                && this.editorHistory.isRedoing && this.action === 'Accept Change') {\n                                var fieldEnd = fieldBegin.fieldEnd;\n                                sel.start.setPositionParagraph(fieldBegin.line, (fieldBegin.line).getOffset(fieldBegin, 0));\n                                sel.end.setPositionParagraph(fieldBegin.fieldSeparator.line, (fieldBegin.fieldSeparator.line).getOffset(fieldBegin.fieldSeparator, 1));\n                                this.owner.editorModule.deleteSelectedContents(sel, true);\n                                if (this.editorHistory && this.editorHistory.currentBaseHistoryInfo) {\n                                    this.editorHistory.currentBaseHistoryInfo.removedNodes.reverse();\n                                }\n                                sel.start.setPositionParagraph(fieldEnd.line, (fieldEnd.line).getOffset(fieldEnd, 0));\n                                sel.end.setPositionParagraph(fieldEnd.line, (fieldEnd.line).getOffset(fieldEnd, 1));\n                                this.owner.editorModule.deleteSelectedContents(sel, true);\n                                if (this.editorHistory && this.editorHistory.currentBaseHistoryInfo) {\n                                    this.editorHistory.currentBaseHistoryInfo.removedNodes.reverse();\n                                }\n                            }\n                            else {\n                                this.owner.editorModule.deleteSelectedContents(sel, true);\n                            }\n                        }\n                        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_9__.isNullOrUndefined)(this.editorHistory.currentHistoryInfo) &&\n                            this.editorHistory.currentHistoryInfo.action === 'PageBreak' && this.documentHelper.blockToShift) {\n                            this.documentHelper.layout.shiftLayoutedItems(false);\n                        }\n                    }\n                }\n            }\n            else if (this.action === 'SectionBreakContinuous' && insertTextPosition && this.editorHistory.isUndoing) {\n                if (insertTextPosition.offset === 0 && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_9__.isNullOrUndefined)(insertTextPosition.paragraph.previousRenderedWidget) && insertTextPosition.paragraph.previousRenderedWidget instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_6__.ParagraphWidget && insertTextPosition.paragraph.previousRenderedWidget.isEndsWithPageBreak && insertTextPosition.paragraph.containerWidget instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_6__.BodyWidget && insertTextPosition.currentWidget === insertTextPosition.currentWidget.paragraph.firstChild && insertTextPosition.paragraph.containerWidget.sectionFormat.breakCode === 'NoBreak') {\n                    var section = insertTextPosition.paragraph.previousRenderedWidget.containerWidget;\n                    this.owner.editorModule.combineSectionInternal(this.owner.selectionModule, section, insertTextPosition.paragraph.containerWidget);\n                    this.owner.editorModule.layoutWholeDocument();\n                }\n            }\n            else {\n                isRemoveContent = false;\n                if (!insertTextPosition.isAtSamePosition(endTextPosition)) {\n                    isRemoveContent = this.action === 'BackSpace' || this.action === 'Delete' || this.action === 'ClearCells'\n                        || this.action === 'DeleteCells';\n                }\n            }\n            if (this.action === 'Paste' && this.pastedComments.length > 0) {\n                if (this.editorHistory.isUndoing) {\n                    for (var i = 0; i < this.pastedComments.length; i++) {\n                        var comment = this.pastedComments[i];\n                        this.owner.editorModule.deleteCommentWidget(comment);\n                    }\n                }\n                else if (this.editorHistory.isRedoing) {\n                    for (var j = 0; j < this.pastedComments.length; j++) {\n                        var comment = this.pastedComments[j];\n                        this.owner.editorModule.addCommentWidget(comment, false, this.owner.showComments, false);\n                        if (comment.replyComments.length > 0) {\n                            for (var k = 0; k < comment.replyComments.length; k++) {\n                                this.owner.commentReviewPane.addReply(comment.replyComments[k], false, false);\n                            }\n                        }\n                    }\n                }\n            }\n            var isRedoAction = (this.editorHistory.isRedoing && !isRemoveContent);\n            isRemoveContent = this.lastElementRevision ? false : isRemoveContent;\n            this.revertModifiedNodes(deletedNodes, isRedoAction, isForwardSelection ? start : end, start === end, isForwardSelection ? end : start);\n            // Use this property to delete table or cell based on history action.\n            if (isRemoveContent) {\n                this.removeContent(insertTextPosition, endTextPosition, isDeletecell);\n            }\n            //this.owner.editorModule.reLayout(this.documentHelper.selection);\n        }\n        var isSelectionChanged = false;\n        var updateSelection = false;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_9__.isNullOrUndefined)(this.editorHistory.currentHistoryInfo) && (this.editorHistory.currentHistoryInfo.action === 'Reject All' || this.editorHistory.currentHistoryInfo.action === 'Accept All' || this.editorHistory.currentHistoryInfo.action === 'Paste')) {\n            updateSelection = true;\n        }\n        if (this.action !== 'TrackingPageBreak' && ((this.editorHistory.isUndoing || this.endRevisionLogicalIndex || this.action === 'RemoveRowTrack' || updateSelection) && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_9__.isNullOrUndefined)(this.editorHistory.currentHistoryInfo) || updateSelection) ||\n            ((this.action === 'InsertRowAbove' || this.action === 'Borders' || this.action === 'InsertRowBelow' || this.action === 'InsertColumnLeft' || this.action === 'InsertColumnRight' || this.action === 'Accept Change' || this.action === 'PasteColumn' || this.action === 'PasteRow' || this.action === 'PasteOverwrite' || this.action === 'PasteNested') && (this.editorHistory.isRedoing\n                || this.editorHistory.currentHistoryInfo.action === 'Paste'))) {\n            if (this.action === 'RemoveRowTrack' && this.editorHistory.isRedoing) {\n                selectionStartTextPosition = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_9__.isNullOrUndefined)(this.selectionStart) ? this.owner.selectionModule.getTextPosBasedOnLogicalIndex(this.selectionStart) : undefined;\n                selectionEndTextPosition = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_9__.isNullOrUndefined)(this.selectionEnd) ? this.owner.selectionModule.getTextPosBasedOnLogicalIndex(this.selectionEnd) : undefined;\n            }\n            else {\n                selectionStartTextPosition = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_9__.isNullOrUndefined)(start) ? this.owner.selectionModule.getTextPosBasedOnLogicalIndex(start) : undefined;\n                selectionEndTextPosition = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_9__.isNullOrUndefined)(end) ? this.owner.selectionModule.getTextPosBasedOnLogicalIndex(end) : undefined;\n            }\n            if (this.action !== 'ModifyStyle') {\n                this.owner.selectionModule.selectRange(selectionStartTextPosition, selectionEndTextPosition);\n            }\n            this.documentHelper.updateFocus();\n            isSelectionChanged = true;\n        }\n        this.owner.trackChangesPane.isTrackingPageBreak = false;\n        var index = this.insertIndex;\n        // Updates insert position of history info instance.\n        this.insertPosition = start;\n        this.endPosition = end;\n        if (this.action === 'InsertHyperlink') {\n            this.insertIndex = index;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_9__.isNullOrUndefined)(this.editorHistory.currentHistoryInfo) &&\n            (this.editorHistory.currentHistoryInfo.action === 'Accept All'\n                || this.editorHistory.currentHistoryInfo.action === 'Reject All' || this.editorHistory.currentHistoryInfo.action === 'RemoveComment')) {\n            if (this.owner.documentHelper.blockToShift) {\n                this.owner.documentHelper.layout.shiftLayoutedItems(false);\n            }\n        }\n        this.owner.editorModule.reLayout(this.owner.selectionModule, this.owner.selectionModule.isEmpty);\n        if (this.editorHistory.isUndoing && this.action === 'SectionBreak') {\n            this.owner.editorModule.isSkipOperationsBuild = this.owner.enableCollaborativeEditing;\n            this.owner.editorModule.layoutWholeDocument();\n            this.owner.editorModule.isSkipOperationsBuild = false;\n        }\n        if (isSelectionChanged) {\n            this.documentHelper.scrollToPosition(this.owner.selectionModule.start, this.owner.selectionModule.end);\n        }\n        this.highlightListText();\n    };\n    BaseHistoryInfo.prototype.highlightListText = function () {\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_9__.isNullOrUndefined)(this.editorHistory.currentHistoryInfo)) {\n            if (this.action === 'ListCharacterFormat' || (this.editorHistory.currentHistoryInfo.action === 'ListSelect' && this.action === 'ListFormat')) {\n                var selectionStartTextPosition = this.owner.selectionModule.getTextPosBasedOnLogicalIndex(this.selectionStart);\n                var widget = selectionStartTextPosition.currentWidget;\n                this.documentHelper.selection.highlightListText(widget);\n            }\n        }\n    };\n    BaseHistoryInfo.prototype.removeContent = function (insertTextPosition, endTextPosition, isDeletecell) {\n        //If the base parent of the insert text position and end text position is null \n        //then the paragraphs already removed.\n        //Example scenario: In table editing that is delete cells operation \n        // we will backed up the entire table ad it will be replaced on undo operation.\n        //At that time if the positions are in table \n        //which is already replaced in undo (revert modified nodes method) then the base parent of the paragraph will be null.\n        //So again, selecting the content and deleting is unnecessary\n        // and it will cause improper position updates and null reference exceptions. \n        if ((!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_9__.isNullOrUndefined)(insertTextPosition.paragraph.containerWidget) &&\n            insertTextPosition.paragraph.containerWidget instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_6__.BodyWidget &&\n            (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_9__.isNullOrUndefined)(endTextPosition.paragraph.containerWidget)\n                && endTextPosition.paragraph.containerWidget instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_6__.BodyWidget))\n            || (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_9__.isNullOrUndefined)(insertTextPosition.paragraph.containerWidget)\n                && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_9__.isNullOrUndefined)(endTextPosition.paragraph.containerWidget)\n                && insertTextPosition.paragraph.containerWidget instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_6__.TableCellWidget\n                && endTextPosition.paragraph.containerWidget instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_6__.TableCellWidget\n                && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_9__.isNullOrUndefined)(insertTextPosition.paragraph.bodyWidget)) ||\n            (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_9__.isNullOrUndefined)(insertTextPosition.paragraph.containerWidget)\n                && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_9__.isNullOrUndefined)(endTextPosition.paragraph.containerWidget)\n                && insertTextPosition.paragraph.containerWidget instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_6__.TextFrame\n                && endTextPosition.paragraph.containerWidget instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_6__.TextFrame)) {\n            //Removes if any empty paragraph is added while delete.\n            this.owner.selectionModule.selectRange(insertTextPosition, endTextPosition);\n            this.documentHelper.updateFocus();\n            var isDelete = false;\n            if (this.action === 'BackSpace' || this.action === 'Uppercase' || this.action === 'RemoveRowTrack') {\n                isDelete = true;\n            }\n            this.owner.editorModule.deleteSelectedContents(this.owner.selectionModule, isDelete, isDeletecell);\n        }\n    };\n    BaseHistoryInfo.prototype.updateEndRevisionInfo = function () {\n        this.lastElementRevision = this.checkAdjacentNodeForMarkedRevision(this.lastElementRevision);\n        var currentRevision = this.retrieveEndPosition(this.lastElementRevision);\n        var blockInfo = this.owner.selectionModule.getParagraphInfo(currentRevision);\n        var isLastChild = (blockInfo.paragraph == this.owner.editor.getLastParaForBodywidgetCollection(blockInfo.paragraph));\n        if (blockInfo.paragraph.isInsideTable && blockInfo.paragraph == this.owner.selection.getLastParagraph(blockInfo.paragraph.associatedCell)) {\n            isLastChild = true;\n        }\n        var isAtParagraphEnd = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_9__.isNullOrUndefined)(this.selectionEnd) ? true : false;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_9__.isNullOrUndefined)(this.selectionEnd)) {\n            var position = this.owner.selectionModule.getTextPosBasedOnLogicalIndex(this.selectionEnd);\n            var paragraphInfo = this.owner.selectionModule.getParagraphInfo(position);\n            if (paragraphInfo.paragraph === blockInfo.paragraph) {\n                isAtParagraphEnd = paragraphInfo.paragraph.getLength() + 1 === paragraphInfo.offset;\n            }\n            else {\n                isAtParagraphEnd = true;\n            }\n        }\n        if (blockInfo.paragraph.getLength() == blockInfo.offset && isAtParagraphEnd && !isLastChild) {\n            blockInfo.offset++;\n        }\n        this.endRevisionLogicalIndex = this.owner.selectionModule.getHierarchicalIndex(blockInfo.paragraph, blockInfo.offset.toString());\n        this.lastElementRevision.isMarkedForRevision = false;\n    };\n    BaseHistoryInfo.prototype.retrieveEndPosition = function (elementBox) {\n        var endPosition = new _index__WEBPACK_IMPORTED_MODULE_4__.TextPosition(this.owner);\n        var offset = elementBox.line.getOffset(elementBox, 0) + elementBox.length;\n        endPosition.setPositionFromLine(elementBox.line, offset);\n        return endPosition;\n    };\n    /**\n     * Method to retrieve exact spitted node which is marked as last available element.\n     *\n     * @param {ElementBox} elementBox - Specifies the element box\n     * @returns {ElementBox} - Returns element box\n     */\n    BaseHistoryInfo.prototype.checkAdjacentNodeForMarkedRevision = function (elementBox) {\n        var nextItem = elementBox.nextNode;\n        var markedNode;\n        while (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_9__.isNullOrUndefined)(nextItem) && nextItem.isMarkedForRevision) {\n            markedNode = nextItem;\n            nextItem = nextItem.nextNode;\n        }\n        return !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_9__.isNullOrUndefined)(markedNode) ? markedNode : elementBox;\n    };\n    BaseHistoryInfo.prototype.revertModifiedProperties = function (start, end) {\n        if (this.action === 'CellFormat' || this.action === 'CellOptions' || this.action === 'TableOptions') {\n            this.owner.isShiftingEnabled = false;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_9__.isNullOrUndefined)(start) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_9__.isNullOrUndefined)(end)) {\n            this.owner.selectionModule.selectRange(start, end);\n        }\n        this.documentHelper.updateFocus();\n        if (this.action === 'RowResizing' || this.action === 'CellResizing') {\n            this.revertResizing();\n        }\n        else if (this.action === 'CellOptions' || this.action === 'TableOptions') {\n            this.revertTableDialogProperties(this.action);\n        }\n        else if (this.action !== 'Selection') {\n            this.revertProperties();\n        }\n    };\n    // Redoes the Action\n    BaseHistoryInfo.prototype.redoAction = function () {\n        var editor = this.owner.editorModule;\n        this.action = this.action;\n        switch (this.action) {\n            case 'BackSpace':\n                editor.singleBackspace(this.owner.selectionModule, true);\n                break;\n            case 'Delete':\n                editor.singleDelete(this.owner.selectionModule, true);\n                break;\n            case 'DeleteTable':\n                editor.deleteTable();\n                break;\n            case 'DeleteColumn':\n                editor.deleteColumn();\n                break;\n            case 'DeleteRow':\n                editor.deleteRow();\n                break;\n            case 'MergeCells':\n                editor.mergeSelectedCellsInTable();\n                break;\n            case 'InsertRowAbove':\n                editor.insertRow(true);\n                break;\n            case 'InsertRowBelow':\n                editor.insertRow(false);\n                break;\n            case 'InsertColumnLeft':\n                editor.insertColumn(true);\n                break;\n            case 'InsertColumnRight':\n                editor.insertColumn(true);\n                break;\n            case 'SectionBreak':\n                editor.insertSection(this.owner.selectionModule, true);\n                break;\n            case 'SectionBreakContinuous':\n                editor.insertSection(this.owner.selectionModule, true, undefined, true);\n                break;\n            case 'TableAutoFitToContents':\n                editor.autoFitTable('FitToContents');\n                break;\n            case 'TableAutoFitToWindow':\n                editor.autoFitTable('FitToWindow');\n                break;\n            case 'TableFixedColumnWidth':\n                editor.autoFitTable('FixedColumnWidth');\n                break;\n            case 'RemoveRowTrack':\n                this.owner.selectionModule.handleAcceptReject(true);\n                break;\n        }\n    };\n    BaseHistoryInfo.prototype.revertModifiedNodes = function (deletedNodes, isRedoAction, start, isEmptySelection, end) {\n        if (isRedoAction && (this.action === 'BackSpace' || this.action === 'Delete' || this.action === 'DeleteTable'\n            || this.action === 'DeleteColumn' || this.action === 'DeleteRow' || this.action === 'InsertRowAbove' ||\n            this.action === 'InsertRowBelow' || this.action === 'InsertColumnLeft' || this.action === 'InsertColumnRight'\n            || this.action === 'MergeCells' || this.action === 'SectionBreak' || this.action === 'SectionBreakContinuous' || this.action === 'TableAutoFitToContents' ||\n            this.action === 'TableAutoFitToWindow' || this.action === 'TableFixedColumnWidth' || this.action === 'PasteColumn' || this.action === 'PasteOverwrite' || this.action === 'PasteNested')) {\n            this.redoAction();\n            if (this.action === 'SectionBreak' || this.action === 'SectionBreakContinuous') {\n                return;\n            }\n        }\n        if (deletedNodes.length > 0) {\n            //tslint:disable-next-line:max-line-length\n            if ((this.editorHistory.isUndoing && (this.action === 'RemoveRowTrack' || this.action === 'DeleteCells' ||\n                this.action === 'DeleteColumn' || this.action === 'DeleteRow' || this.action === 'MergeCells'))\n                || (this.action === 'InsertRowAbove' || this.action === 'InsertRowBelow' || this.action === 'InsertColumnLeft'\n                    //tslint:disable-next-line:max-line-length\n                    || this.action === 'ClearCells' || this.action === 'InsertColumnRight' || this.action === 'Borders' || this.action === 'TableAutoFitToContents' || this.action === 'TableAutoFitToWindow' ||\n                    this.action === 'TableFixedColumnWidth' || this.action === 'RemoveRowTrack' || this.action === 'PasteColumn' || this.action === 'PasteRow' || this.action === 'PasteOverwrite' || this.action === 'PasteNested')) {\n                var insertIndex = this.selectionStart;\n                var block = this.owner.editorModule.getBlock({ index: insertIndex }).node;\n                var lastNode = deletedNodes[deletedNodes.length - 1];\n                if ((block instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_6__.TableWidget || block.previousRenderedWidget instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_6__.TableWidget || block.isInsideTable)\n                    && lastNode instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_6__.TableWidget) {\n                    if (block instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_6__.ParagraphWidget && !block.isInsideTable) {\n                        block = block.previousRenderedWidget;\n                    }\n                    else if (block instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_6__.ParagraphWidget && block.isInsideTable) {\n                        block = block.associatedCell.ownerTable;\n                    }\n                    block = block.combineWidget(this.viewer);\n                    if (this.owner.enableCollaborativeEditing) {\n                        var paragraphInfo = { 'paragraph': null, 'offset': 0 };\n                        this.startIndex = this.owner.selectionModule.getPositionInfoForHeaderFooter(paragraphInfo, { position: 0, done: false }, block).position;\n                        this.endIndex = this.startIndex + this.owner.selectionModule.getBlockLength(undefined, block, 0, { done: false }, true, undefined, undefined);\n                        var operation = this.getDeleteOperation('Delete');\n                        if (this.owner.enableTrackChanges) {\n                            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_9__.isNullOrUndefined)(operation.markerData)) {\n                                operation.markerData = {};\n                            }\n                            operation.markerData.isSkipTracking = true;\n                        }\n                        this.cellOperation.push(operation);\n                    }\n                    this.owner.editorModule.insertTableInternal(block, lastNode, false);\n                    if (this.action === 'PasteColumn' || this.action === 'PasteRow' || this.action === 'PasteOverwrite' || this.action === 'PasteNested') {\n                        this.removedNodes.push(block);\n                    }\n                    else {\n                        deletedNodes.splice(deletedNodes.indexOf(lastNode), 1);\n                        // Call the insertRemovedNodes API to insert remining elements that are present in the removed nodes collection.\n                        if (deletedNodes.length > 0) {\n                            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_9__.isNullOrUndefined)(deletedNodes[deletedNodes.length - 1]) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_9__.isNullOrUndefined)(lastNode.nextRenderedWidget) && lastNode.nextRenderedWidget instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_6__.ParagraphWidget) {\n                                this.owner.selectionModule.start.setPositionParagraph(lastNode.nextRenderedWidget.firstChild, 0);\n                                this.owner.selectionModule.end.setPositionParagraph(lastNode.nextRenderedWidget.firstChild, 0);\n                            }\n                            this.insertRemovedNodes(deletedNodes, deletedNodes[deletedNodes.length - 1]);\n                        }\n                    }\n                }\n                else if (lastNode instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_6__.TableWidget && !(this.action === 'RemoveRowTrack')) {\n                    this.owner.editorModule.insertBlock(lastNode);\n                }\n                else {\n                    this.insertRemovedNodes(deletedNodes, deletedNodes[deletedNodes.length - 1]);\n                }\n            }\n            else {\n                var initialStart = start;\n                var block = this.owner.editorModule.getBlock({ index: initialStart }).node;\n                // initialStart = blockObj.position;\n                if (deletedNodes.length > 0 && (this.action === 'BackSpace' && isEmptySelection\n                    || (!(block instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_6__.TableWidget) && !(block instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_6__.HeaderFooterWidget)))) {\n                    var lastNode = deletedNodes[0];\n                    if (lastNode instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_6__.BodyWidget && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_9__.isNullOrUndefined)(deletedNodes[1])) {\n                        lastNode = deletedNodes[1];\n                    }\n                    if (this.action === 'TrackingPageBreak' || ((this.action === 'SectionBreak' || this.action === 'SectionBreakContinuous') && lastNode instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_6__.BodyWidget ||\n                        !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_9__.isNullOrUndefined)(this.editorHistory.currentHistoryInfo) &&\n                            this.editorHistory.currentHistoryInfo.action === 'PageBreak')) {\n                        lastNode = deletedNodes[1];\n                    }\n                    var skipinsert = false;\n                    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_9__.isNullOrUndefined)(this.isAcceptOrReject)) {\n                        skipinsert = true;\n                        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_9__.isNullOrUndefined)(this.owner.selectionModule.start.paragraph.nextRenderedWidget) && this.owner.selectionModule.start.paragraph.nextRenderedWidget instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_6__.TableWidget) {\n                            skipinsert = false;\n                        }\n                        else if (this.action === 'BackSpace' && deletedNodes.length == 2 && lastNode instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_6__.ParagraphWidget && lastNode.isEmpty() && deletedNodes[1] instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_6__.ParagraphWidget && deletedNodes[1].isEmpty()) {\n                            //When selecting the paramark and give backspace then adding two paragraph. So skipping it.\n                            skipinsert = false;\n                        }\n                    }\n                    if (lastNode instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_6__.ParagraphWidget && this.owner.selectionModule.start.offset > 0 && !skipinsert) {\n                        if (this.editorHistory && this.editorHistory.currentBaseHistoryInfo && this.editorHistory.currentBaseHistoryInfo.action === 'Paste' && deletedNodes.length === 1) {\n                            this.owner.editorModule.insertNewParagraphWidget(lastNode, false);\n                        }\n                        else {\n                            this.owner.editorModule.insertNewParagraphWidget(lastNode, true);\n                        }\n                        if (lastNode.characterFormat.removedIds.length > 0) {\n                            this.owner.editorModule.constructRevisionFromID(lastNode.characterFormat, undefined);\n                        }\n                        deletedNodes.splice(deletedNodes.indexOf(lastNode), 1);\n                        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_9__.isNullOrUndefined)(block)) {\n                            var nextBlock = this.documentHelper.selection.getNextParagraphBlock(lastNode.getSplitWidgets().pop());\n                            this.owner.selectionModule.getNextRenderedBlock(lastNode);\n                            var startParagraph = this.owner.selectionModule.start.paragraph;\n                            if (nextBlock && startParagraph && startParagraph.bodyWidget instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_6__.BodyWidget\n                                && !startParagraph.isInsideTable && !this.owner.selectionModule.isinEndnote && !this.owner.selectionModule.isinFootnote\n                                && !startParagraph.bodyWidget.equals(nextBlock.bodyWidget)) {\n                                nextBlock = undefined;\n                            }\n                            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_9__.isNullOrUndefined)(nextBlock)) {\n                                //Sets the selection as starting of last paragraph.\n                                this.owner.selectionModule.selectParagraphInternal(lastNode, true);\n                            }\n                        }\n                    }\n                    if (lastNode instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_6__.TableWidget && this.owner.selectionModule.start.offset > 0) {\n                        var firstBlock = deletedNodes[deletedNodes.length - 1];\n                        if (firstBlock instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_6__.ParagraphWidget) {\n                            this.owner.editorModule.insertNewParagraphWidget(firstBlock, true);\n                            deletedNodes.splice(deletedNodes.indexOf(firstBlock), 1);\n                            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_9__.isNullOrUndefined)(block)) {\n                                var nextBlock = this.documentHelper.selection.getNextParagraphBlock(firstBlock.getSplitWidgets().pop());\n                                if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_9__.isNullOrUndefined)(nextBlock)) {\n                                    //Sets the selection as starting of last paragraph.\n                                    this.owner.selectionModule.selectParagraphInternal(firstBlock, true);\n                                }\n                            }\n                        }\n                    }\n                }\n                if (deletedNodes.length > 0) {\n                    var firstNode = deletedNodes[deletedNodes.length - 1];\n                    if (block instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_6__.TableWidget) {\n                        block = block.combineWidget(this.viewer);\n                        if (firstNode instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_6__.TableWidget) {\n                            if (this.owner.enableCollaborativeEditing) {\n                                var paragraphInfo = { 'paragraph': null, 'offset': 0 };\n                                var startIndex = this.owner.selectionModule.getPositionInfoForHeaderFooter(paragraphInfo, { position: 0, done: false }, block).position;\n                                var endIndex = startIndex + this.owner.selectionModule.getBlockLength(undefined, block, 0, { done: false }, true, undefined, undefined);\n                                var operation = this.getDeleteOperation('Delete');\n                                operation.offset = startIndex;\n                                operation.length = endIndex - startIndex;\n                                this.cellOperation.push(operation);\n                            }\n                            this.owner.editorModule.insertTableInternal(block, firstNode, true);\n                            deletedNodes.splice(deletedNodes.indexOf(firstNode), 1);\n                            this.insertPosition = start;\n                            var nextWidget = firstNode.getSplitWidgets().pop();\n                            if (nextWidget.nextRenderedWidget instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_6__.TableWidget) {\n                                block = nextWidget.nextRenderedWidget;\n                            }\n                            else {\n                                initialStart = start;\n                                block = this.owner.editorModule.getBlock({ index: initialStart }).node;\n                            }\n                        }\n                    }\n                    //Checks if first node is paragraph and current insert position is paragraph end.\n                    if (firstNode instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_6__.ParagraphWidget && this.owner.selectionModule.start.offset > 0\n                        && this.owner.selectionModule.start.offset === this.owner.selectionModule.getLineLength(this.owner.selectionModule.start.paragraph.lastChild)) {\n                        var editor = this.owner.editorModule;\n                        editor.insertNewParagraphWidget(firstNode, false);\n                        if (firstNode.characterFormat.removedIds.length > 0) {\n                            this.owner.editorModule.constructRevisionFromID(firstNode.characterFormat, undefined);\n                        }\n                        deletedNodes.splice(deletedNodes.indexOf(firstNode), 1);\n                        //Removes the intermediate empty paragraph instance.\n                        if (this.action !== 'Paste' && this.owner.selectionModule.start.paragraph !== firstNode.containerWidget.lastChild) {\n                            editor.removeBlock(this.owner.selectionModule.start.paragraph);\n                        }\n                        var paragraph = this.documentHelper.selection.getNextParagraphBlock(firstNode.getSplitWidgets().pop());\n                        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_9__.isNullOrUndefined)(paragraph) && firstNode !== firstNode.containerWidget.lastChild) {\n                            this.owner.selectionModule.selectParagraphInternal(paragraph, true);\n                        }\n                        else if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_9__.isNullOrUndefined)(firstNode)) {\n                            this.owner.selectionModule.selectParagraphInternal(firstNode, false);\n                        }\n                    }\n                    else if (deletedNodes[0] instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_6__.TableWidget && deletedNodes.length !== 1) {\n                        var nextNode = deletedNodes[1];\n                        if (nextNode instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_6__.ParagraphWidget && nextNode.isEmpty()) {\n                            deletedNodes.splice(deletedNodes.indexOf(nextNode), 1);\n                        }\n                    }\n                }\n                if (deletedNodes.length > 0) {\n                    if (block instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_6__.TableWidget) {\n                        block = block.combineWidget(this.viewer);\n                    }\n                    this.insertRemovedNodes(deletedNodes, block, end);\n                }\n            }\n        }\n    };\n    BaseHistoryInfo.prototype.insertRemovedNodes = function (deletedNodes, block, endIndex) {\n        // Use this property to relayout whole document (after complete all insertion intead of each section insertion) when insert section (this functionality already added in insertSection API).\n        var isRelayout = false;\n        var isSelectionInsideTable = this.owner.selection.start.paragraph.isInsideTable;\n        for (var i = deletedNodes.length - 1, index = 0; i > -1; i--) {\n            var node = deletedNodes[i];\n            // BUG 926010: If multiple blocks are inserted into a single cell, then the entire table will be layout for each block insertion, which may lead to performance issues.\n            // Therefore, we should layout the entire table only after the last block insertion.\n            if (i === 0) {\n                isSelectionInsideTable = false;\n            }\n            if (this.isHyperlinkField && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_9__.isNullOrUndefined)(endIndex) && node instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_6__.FieldElementBox && node.fieldType === 1) {\n                // Bug 873011: Updated the selection for field end element insertion on \"Accept Change\" undo case.\n                this.owner.selectionModule.start.setPositionInternal(this.owner.selectionModule.getTextPosBasedOnLogicalIndex(endIndex));\n                this.owner.selectionModule.end.setPositionInternal(this.owner.selectionModule.start);\n            }\n            if (node instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_6__.ElementBox) {\n                this.owner.editorModule.insertInlineInSelection(this.owner.selectionModule, node);\n            }\n            else if (node instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_6__.ParagraphWidget && node.childWidgets === undefined) {\n                this.owner.selection.moveToNextParagraph();\n            }\n            else if (node instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_6__.BlockWidget) {\n                if (node instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_6__.TableRowWidget) {\n                    if (block instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_6__.TableWidget) {\n                        block.childWidgets.splice(index, 0, node);\n                        this.owner.editorModule.updateNextBlocksIndex(node, true);\n                        if (i === 0 || !(deletedNodes[i - 1] instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_6__.TableRowWidget)) {\n                            this.documentHelper.layout.layoutBodyWidgetCollection(block.index, block.containerWidget, block, false);\n                        }\n                    }\n                }\n                else if (block instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_6__.TableWidget && this.action !== 'RemoveRowTrack') {\n                    this.owner.editorModule.insertBlockTable(this.owner.selectionModule, node, block);\n                }\n                else {\n                    if (node instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_6__.ParagraphWidget && !node.isInsideTable && this.action === 'RemoveRowTrack') {\n                        this.owner.editorModule.insertNewParagraphWidget(node, false);\n                    }\n                    else if (node instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_6__.TableWidget && this.action === 'RemoveRowTrack') {\n                        this.owner.editorModule.insertTableInternal(node, node, false, true);\n                        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_9__.isNullOrUndefined)(deletedNodes[i - 1]) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_9__.isNullOrUndefined)(node.nextRenderedWidget) && node.nextRenderedWidget instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_6__.ParagraphWidget) {\n                            this.owner.selectionModule.start.setPositionParagraph(node.nextRenderedWidget.firstChild, 0);\n                            this.owner.selectionModule.end.setPositionParagraph(node.nextRenderedWidget.firstChild, 0);\n                        }\n                    }\n                    else {\n                        this.owner.editorModule.insertBlock(node, isSelectionInsideTable);\n                    }\n                }\n            }\n            else if (node instanceof _format_character_format__WEBPACK_IMPORTED_MODULE_2__.WCharacterFormat) {\n                var insertIndex = this.selectionStart;\n                var wiget = this.owner.editorModule.getBlock({ index: insertIndex }).node;\n                if (wiget instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_6__.ParagraphWidget) {\n                    if (node.removedIds.length > 0) {\n                        wiget.characterFormat.removedIds = node.removedIds.slice();\n                        this.owner.editorModule.constructRevisionFromID(wiget.characterFormat, true);\n                    }\n                    else if (wiget.characterFormat.revisions.length > 0) {\n                        for (var i_1 = 0; i_1 < wiget.characterFormat.revisions.length; i_1++) {\n                            var currentRevision = wiget.characterFormat.revisions[i_1];\n                            var index_1 = currentRevision.range.indexOf(wiget.characterFormat);\n                            if (index_1 !== -1) {\n                                currentRevision.range.splice(index_1, 1);\n                                this.owner.trackChangesPane.updateCurrentTrackChanges(currentRevision);\n                                if (currentRevision.range.length === 0) {\n                                    this.owner.revisions.remove(currentRevision);\n                                }\n                            }\n                        }\n                        node.ownerBase = wiget;\n                        wiget.characterFormat = node;\n                    }\n                }\n            }\n            else if (node instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_6__.BodyWidget) {\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_9__.isNullOrUndefined)(node.removedHeaderFooters) && node.removedHeaderFooters.length !== 0) {\n                    this.owner.documentHelper.headersFooters.splice(node.sectionIndex, 0, node.removedHeaderFooters[0]);\n                    node.removedHeaderFooters = undefined;\n                }\n                isRelayout = true;\n                this.owner.editorModule.insertSection(this.owner.selectionModule, false, true, undefined, undefined, node.sectionFormat);\n            }\n            else if (typeof (node) === 'string' && this.action === 'AcceptTOC') {\n                var insertIndex = this.selectionStart;\n                var widget = this.owner.editorModule.getBlock({ index: insertIndex }).node;\n                var endWidget = this.owner.editorModule.getBlock({ index: this.selectionEnd }).node;\n                var currentRevision = this.owner.documentHelper.revisionsInternal.get(node);\n                if (this.editorHistory.isUndoing) {\n                    while (widget instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_6__.ParagraphWidget && widget !== endWidget) {\n                        this.owner.editorModule.insertRevisionForBlock(widget, currentRevision.revisionType, true, currentRevision);\n                        widget = this.documentHelper.selection.getNextParagraphBlock(widget.getSplitWidgets().pop());\n                    }\n                    this.owner.editorModule.insertRevisionForBlock(endWidget, currentRevision.revisionType, true, currentRevision);\n                }\n                else {\n                    while (currentRevision.range.length > 0) {\n                        var item = currentRevision.range[0];\n                        var revisionIndex = item.revisions.indexOf(currentRevision);\n                        if (revisionIndex >= 0) {\n                            item.revisions.splice(revisionIndex, 1);\n                            var rangeIndex = currentRevision.range.indexOf(item);\n                            currentRevision.range.splice(rangeIndex, 1);\n                            this.owner.trackChangesPane.updateCurrentTrackChanges(currentRevision);\n                        }\n                        if (currentRevision.range.length === 0) {\n                            this.owner.revisions.remove(currentRevision);\n                        }\n                    }\n                }\n                this.owner.editorModule.addRemovedNodes(currentRevision.revisionID);\n            }\n        }\n        if (isRelayout) {\n            this.documentHelper.contentControlCollection = [];\n            this.owner.editorModule.layoutWholeDocument(true);\n        }\n        deletedNodes = [];\n    };\n    BaseHistoryInfo.prototype.undoRevisionForElements = function (start, end, id) {\n        var currentPara = start.paragraph;\n        var endPara = end.paragraph;\n        var currentRevision = this.documentHelper.revisionsInternal.get(id);\n        var startoffset = this.owner.selectionModule.getParagraphInfo(start).offset;\n        var endoffset = this.owner.selectionModule.getParagraphInfo(end).offset;\n        var isSamePara = start.paragraph === end.paragraph;\n        var isSplittedWidget = false;\n        if (this.editorHistory.isUndoing) {\n            while (currentPara !== endPara) {\n                isSplittedWidget = false;\n                var endOffset = 0;\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_9__.isNullOrUndefined)(currentPara.previousSplitWidget)) {\n                    startoffset = currentPara.previousSplitWidget.getLength() + 1;\n                    endOffset = currentPara.previousSplitWidget.getLength() + currentPara.getLength();\n                }\n                else {\n                    endOffset = currentPara.getLength();\n                }\n                this.owner.editorModule.applyRevisionForCurrentPara(currentPara, startoffset, endOffset, id, true);\n                //Correct the condition to get next widget instead of next widget of next splitted widget\n                currentPara = this.documentHelper.selection.getNextParagraphBlock(currentPara);\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_9__.isNullOrUndefined)(currentPara) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_9__.isNullOrUndefined)(currentPara.previousRenderedWidget) && currentPara.previousRenderedWidget instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_6__.ParagraphWidget && currentPara.previousRenderedWidget.nextSplitWidget && currentPara === endPara) {\n                    isSplittedWidget = true;\n                }\n                if (currentPara !== endPara) {\n                    startoffset = 0;\n                }\n            }\n            if (currentPara === endPara) {\n                if (!isSamePara) {\n                    startoffset = 0;\n                }\n                // Update the startoffset to the paragraph end if next paragraph is splitted widget\n                if (isSplittedWidget) {\n                    startoffset = currentPara.previousRenderedWidget.getLength();\n                }\n                this.owner.editorModule.applyRevisionForCurrentPara(currentPara, startoffset, endoffset, id, false);\n            }\n        }\n        else {\n            while (currentRevision.range.length > 0) {\n                var item = currentRevision.range[0];\n                var revisionIndex = item.revisions.indexOf(currentRevision);\n                if (revisionIndex >= 0) {\n                    item.revisions.splice(revisionIndex, 1);\n                    var rangeIndex = currentRevision.range.indexOf(item);\n                    currentRevision.range.splice(rangeIndex, 1);\n                }\n                if (currentRevision.range.length === 0) {\n                    this.owner.revisions.remove(currentRevision);\n                }\n                if (currentPara.characterFormat.revisions.length > 0 && this.editorHistory.isRedoing) {\n                    for (var i = 0; i < currentPara.characterFormat.revisions.length; i++) {\n                        var revision = currentPara.characterFormat.revisions[i];\n                        if (revision.range.length === 0) {\n                            currentPara.characterFormat.revisions.splice(i, 1);\n                            i--;\n                        }\n                    }\n                }\n            }\n        }\n        this.owner.trackChangesPane.updateCurrentTrackChanges(currentRevision);\n        this.removedNodes.push(id);\n    };\n    BaseHistoryInfo.prototype.revertResizing = function () {\n        this.editorHistory.currentBaseHistoryInfo = this;\n        if (this.action === 'RowResizing') {\n            if (this.modifiedProperties[0] instanceof _history_helper__WEBPACK_IMPORTED_MODULE_5__.RowHistoryFormat) {\n                var prevRowHistoryFormat = this.modifiedProperties[0];\n                var position = prevRowHistoryFormat.tableHierarchicalIndex;\n                var block = this.owner.editorModule.getBlock({ index: position }).node;\n                if (block instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_6__.TableWidget) {\n                    this.modifiedProperties[0].revertChanges(this.editorHistory.isRedoing, this.owner, block);\n                }\n            }\n        }\n        else {\n            if (this.modifiedProperties[0] instanceof _history_helper__WEBPACK_IMPORTED_MODULE_5__.TableHistoryInfo) {\n                //selected cell resizing the condition checks done based on the selected widgets only. so need to highlight the selection.\n                if (this.owner.selectionModule.selectedWidgets.length === 0) {\n                    this.owner.selectionModule.highlightSelection(true);\n                }\n                var prevTableHistoryInfo = this.modifiedProperties[0];\n                var position = prevTableHistoryInfo.tableHierarchicalIndex;\n                var block = this.owner.editorModule.getBlock({ index: position }).node;\n                if (block instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_6__.TableWidget) {\n                    var tableResize = this.owner.editorModule.tableResize;\n                    this.owner.editorModule.setOffsetValue(this.owner.selectionModule);\n                    block = block.combineWidget(this.owner.viewer);\n                    tableResize.currentResizingTable = block;\n                    this.modifiedProperties.splice(0, 1);\n                    if (this.editorHistory.isUndoing || this.editorHistory.isRedoing) {\n                        var tableHistoryInfoCurrent = new _history_helper__WEBPACK_IMPORTED_MODULE_5__.TableHistoryInfo(block, this.owner);\n                        this.modifiedProperties.splice(0, 0, tableHistoryInfoCurrent);\n                        this.owner.isLayoutEnabled = false;\n                        tableResize.applyProperties(tableResize.currentResizingTable, prevTableHistoryInfo);\n                        tableResize.currentResizingTable.isGridUpdated = true;\n                        this.owner.isLayoutEnabled = true;\n                        tableResize.updateGridValue(tableResize.currentResizingTable, false);\n                        prevTableHistoryInfo.destroy();\n                        prevTableHistoryInfo = undefined;\n                    }\n                }\n            }\n        }\n    };\n    BaseHistoryInfo.prototype.revertTableDialogProperties = function (action) {\n        this.owner.isShiftingEnabled = false;\n        this.editorHistory.currentBaseHistoryInfo = this;\n        this.currentPropertyIndex = 0;\n        if (action === 'CellOptions') {\n            var selection = this.owner.selectionModule;\n            var cellFormat = this.modifiedProperties[0];\n            this.owner.editorModule.updateCellMargins(selection, cellFormat);\n        }\n        else if (action === 'TableOptions') {\n            this.owner.tableOptionsDialogModule.applyTableOptionsHelper(this.modifiedProperties[0]);\n        }\n        this.currentPropertyIndex = 0;\n        this.owner.isShiftingEnabled = true;\n    };\n    BaseHistoryInfo.prototype.addModifiedPropertiesForSection = function (format, property, value) {\n        if (this.editorHistory.isUndoing || this.editorHistory.isRedoing) {\n            var modifiedProperties = this.modifiedProperties;\n            var previousFormat = (this.currentPropertyIndex < modifiedProperties.length ?\n                modifiedProperties[this.currentPropertyIndex] : modifiedProperties[modifiedProperties.length - 1]);\n            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_9__.isNullOrUndefined)(property)) {\n                value = previousFormat;\n                if (this.currentPropertyIndex < this.modifiedProperties.length) {\n                    this.modifiedProperties[this.currentPropertyIndex] = format.cloneFormat();\n                }\n                else {\n                    this.modifiedProperties[this.modifiedProperties.length - 1] = format.cloneFormat();\n                }\n            }\n            else {\n                value = previousFormat.getPropertyValue(property);\n                previousFormat.copyFormat(format);\n            }\n            this.currentPropertyIndex++;\n        }\n        else {\n            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_9__.isNullOrUndefined)(property)) {\n                this.modifiedProperties.push(format.cloneFormat());\n            }\n            else {\n                var currentFormat = new _format_section_format__WEBPACK_IMPORTED_MODULE_1__.WSectionFormat();\n                currentFormat.copyFormat(format);\n                this.modifiedProperties.push(currentFormat);\n            }\n        }\n        return value;\n    };\n    BaseHistoryInfo.prototype.addModifiedProperties = function (format, property, value) {\n        if (this.editorHistory.isUndoing || this.editorHistory.isRedoing) {\n            var previousFormat = (this.currentPropertyIndex < this.modifiedProperties.length ? this.modifiedProperties[this.currentPropertyIndex] : this.modifiedProperties[this.modifiedProperties.length - 1]);\n            var skipRemove = false;\n            if (format.ownerBase instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_6__.ElementBox) {\n                var prevLength = this.modifiedNodeLength[this.currentPropertyIndex];\n                if (format.ownerBase.length < prevLength) {\n                    skipRemove = true;\n                    this.modifiedNodeLength[this.currentPropertyIndex] = format.ownerBase.length;\n                    this.modifiedNodeLength.splice(this.currentPropertyIndex + 1, 0, prevLength - format.ownerBase.length);\n                    //Adds a copy of character format at next position for splitted inline.\n                    var nextFormat = new _format_character_format__WEBPACK_IMPORTED_MODULE_2__.WCharacterFormat(undefined);\n                    nextFormat.copyFormat(previousFormat);\n                    this.modifiedProperties.splice(this.currentPropertyIndex + 1, 0, nextFormat);\n                }\n            }\n            if (this.action === 'ClearCharacterFormat') {\n                if (this.editorHistory.isUndoing) {\n                    value = previousFormat;\n                    if (!skipRemove) {\n                        this.modifiedProperties.splice(this.currentPropertyIndex, 1);\n                        this.currentPropertyIndex--;\n                    }\n                }\n                else {\n                    this.modifiedProperties.push(format.cloneFormat());\n                }\n            }\n            else {\n                value = previousFormat;\n                if (this.currentPropertyIndex < this.modifiedProperties.length) {\n                    this.modifiedProperties[this.currentPropertyIndex] = format.cloneFormat();\n                }\n                else {\n                    this.modifiedProperties[this.modifiedProperties.length - 1] = format.cloneFormat();\n                }\n            }\n            this.currentPropertyIndex++;\n        }\n        else {\n            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_9__.isNullOrUndefined)(property)) {\n                this.modifiedProperties.push(format.cloneFormat());\n            }\n            else {\n                var currentFormat = new _format_character_format__WEBPACK_IMPORTED_MODULE_2__.WCharacterFormat(undefined);\n                currentFormat.copyFormat(format);\n                this.modifiedProperties.push(currentFormat);\n            }\n            if (format.ownerBase instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_6__.ElementBox) {\n                this.modifiedNodeLength.push(format.ownerBase.length);\n            }\n            else {\n                this.modifiedNodeLength.push(0);\n            }\n        }\n        return value;\n    };\n    /**\n     * build character Operation for undo/redo\n     *\n     * @private\n     * @returns {void}\n     */\n    BaseHistoryInfo.prototype.buildCharacterFormatOperation = function (widget, format) {\n        var position = this.owner.selectionModule.getElementPosition(widget, true).startPosition;\n        var start = this.owner.selectionModule.getAbsolutePositionFromRelativePosition(position);\n        position.offset += widget.length;\n        var end = this.owner.selectionModule.getAbsolutePositionFromRelativePosition(position);\n        var characterData = this.owner.sfdtExportModule.writeCharacterFormat(format, 0, true);\n        var operation = {\n            action: 'Format',\n            offset: start,\n            length: end - start,\n            format: JSON.stringify(characterData),\n            type: 'CharacterFormat',\n        };\n        this.modifiedFormatOperation.push(operation);\n    };\n    BaseHistoryInfo.prototype.addModifiedPropertiesForParagraphFormat = function (format, property, value) {\n        if (this.editorHistory.isUndoing || this.editorHistory.isRedoing) {\n            var previousFormat = (this.currentPropertyIndex < this.modifiedProperties.length ? this.modifiedProperties[this.currentPropertyIndex] : this.modifiedProperties[this.modifiedProperties.length - 1]);\n            if (this.action === 'ClearParagraphFormat') {\n                if (this.editorHistory.isUndoing) {\n                    value = previousFormat;\n                    this.modifiedProperties.splice(this.currentPropertyIndex, 1);\n                    this.currentPropertyIndex--;\n                }\n                else {\n                    this.modifiedProperties.push(format.cloneFormat());\n                }\n                this.currentPropertyIndex++;\n                return value;\n            }\n            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_9__.isNullOrUndefined)(property)) {\n                value = previousFormat;\n                if (this.currentPropertyIndex < this.modifiedProperties.length) {\n                    this.modifiedProperties[this.currentPropertyIndex] = format.cloneFormat();\n                }\n                else {\n                    this.modifiedProperties[this.modifiedProperties.length - 1] = format.cloneFormat();\n                }\n                this.currentPropertyIndex++;\n                return value;\n            }\n            if (property === 'listFormat') {\n                value = new _format_paragraph_format__WEBPACK_IMPORTED_MODULE_0__.WParagraphFormat(undefined);\n                value.copyFormat(previousFormat);\n                previousFormat.listFormat = new _format_list_format__WEBPACK_IMPORTED_MODULE_3__.WListFormat(previousFormat);\n                previousFormat.listFormat.copyFormat(format.listFormat);\n                this.currentPropertyIndex++;\n                return value;\n            }\n            if (property === 'tabStop') {\n                value = [];\n                for (var i = 0; i < previousFormat.tabs.length; i++) {\n                    value.push(previousFormat.tabs[i]);\n                }\n                var currentFormat = new _format_paragraph_format__WEBPACK_IMPORTED_MODULE_0__.WParagraphFormat(undefined);\n                currentFormat.copyFormat(format);\n                this.modifiedProperties[this.currentPropertyIndex] = currentFormat;\n                this.currentPropertyIndex++;\n                return value;\n            }\n            if (property === 'styleName') {\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_9__.isNullOrUndefined)(previousFormat.baseStyle)) {\n                    value = new _format_index__WEBPACK_IMPORTED_MODULE_10__.WParagraphStyle();\n                    value.copyStyle(previousFormat.baseStyle);\n                    this.currentPropertyIndex++;\n                    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_9__.isNullOrUndefined)(format.baseStyle)) {\n                        previousFormat.baseStyle = new _format_index__WEBPACK_IMPORTED_MODULE_10__.WParagraphStyle();\n                        previousFormat.baseStyle.copyStyle(format.baseStyle);\n                    }\n                    return value;\n                }\n                else {\n                    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_9__.isNullOrUndefined)(format.baseStyle)) {\n                        previousFormat.baseStyle = new _format_index__WEBPACK_IMPORTED_MODULE_10__.WParagraphStyle();\n                        previousFormat.baseStyle.copyStyle(format.baseStyle);\n                    }\n                    return undefined;\n                }\n            }\n            if (property === 'borders') {\n                value = previousFormat.borders.cloneFormat();\n            }\n            else if (this.action.indexOf('Border') >= 0) {\n                value = previousFormat.borders.getBorder(property.replace('Border', ''));\n            }\n            else {\n                value = previousFormat.getPropertyValue(property);\n            }\n            previousFormat.copyFormat(format);\n            this.currentPropertyIndex++;\n        }\n        else {\n            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_9__.isNullOrUndefined)(property)) {\n                this.modifiedProperties.push(format.cloneFormat());\n            }\n            else {\n                var currentFormat = new _format_paragraph_format__WEBPACK_IMPORTED_MODULE_0__.WParagraphFormat(undefined);\n                currentFormat.copyFormat(format);\n                this.modifiedProperties.push(currentFormat);\n            }\n        }\n        return value;\n    };\n    /**\n     * build paragraph Operation for undo/redo\n     *\n     * @private\n     * @returns {void}\n     */\n    BaseHistoryInfo.prototype.getParagraohFormatOperation = function (paragarph, format) {\n        var _a;\n        if ((this.modifiedProperties.length > 1 || this.modifiedFormatOperation.length > 0) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_9__.isNullOrUndefined)(paragarph)) {\n            var position = this.owner.selectionModule.setPositionForBlock(paragarph, true);\n            this.startIndex = this.owner.selectionModule.getAbsolutePositionFromRelativePosition(position);\n            this.endIndex = this.startIndex + this.owner.selectionModule.getBlockLength(undefined, paragarph, 0, { done: false }, true, undefined, undefined) - 1;\n            this.insertedFormat = format;\n            (_a = this.modifiedFormatOperation).push.apply(_a, this.getActionInfo(true));\n        }\n    };\n    BaseHistoryInfo.prototype.addModifiedPropertiesForContinueNumbering = function (paragraphFormat, value) {\n        if (this.editorHistory.isUndoing || this.editorHistory.isRedoing) {\n            var previousFormat = (this.currentPropertyIndex < this.modifiedProperties.length ? this.modifiedProperties[this.currentPropertyIndex] : this.modifiedProperties[this.modifiedProperties.length - 1]);\n            value = previousFormat;\n            if (this.currentPropertyIndex < this.modifiedProperties.length) {\n                this.modifiedProperties[this.currentPropertyIndex] = paragraphFormat.cloneFormat();\n            }\n            else {\n                this.modifiedProperties[this.modifiedProperties.length - 1] = paragraphFormat.cloneFormat();\n            }\n            this.currentPropertyIndex++;\n            return value;\n        }\n        else {\n            var currentFormat = new _format_paragraph_format__WEBPACK_IMPORTED_MODULE_0__.WParagraphFormat();\n            currentFormat.copyFormat(paragraphFormat);\n            this.modifiedProperties.push(currentFormat);\n        }\n        return value;\n    };\n    BaseHistoryInfo.prototype.addModifiedPropertiesForRestartNumbering = function (listFormat, value) {\n        if (this.editorHistory.isUndoing || this.editorHistory.isRedoing) {\n            var listId = (this.currentPropertyIndex < this.modifiedProperties.length ? this.modifiedProperties[this.currentPropertyIndex] : this.modifiedProperties[this.modifiedProperties.length - 1]);\n            value = listId;\n            if (this.currentPropertyIndex < this.modifiedProperties.length) {\n                this.modifiedProperties[this.currentPropertyIndex] = listFormat.listId;\n            }\n            else {\n                this.modifiedProperties[this.modifiedProperties.length - 1] = listFormat.listId;\n            }\n            this.currentPropertyIndex++;\n            return value;\n        }\n        else {\n            this.modifiedProperties.push(listFormat.listId);\n        }\n        return value;\n    };\n    BaseHistoryInfo.prototype.addModifiedPropertiesForList = function (listLevel) {\n        var value;\n        if (this.editorHistory.isUndoing || this.editorHistory.isRedoing) {\n            var previousLevel = (this.currentPropertyIndex < this.modifiedProperties.length ? this.modifiedProperties[this.currentPropertyIndex] : this.modifiedProperties[this.modifiedProperties.length - 1]);\n            value = previousLevel;\n            previousLevel = new _history_helper__WEBPACK_IMPORTED_MODULE_5__.ModifiedLevel(listLevel, this.owner.editorModule.cloneListLevel(listLevel));\n            if (this.currentPropertyIndex < this.modifiedProperties.length) {\n                this.modifiedProperties[this.currentPropertyIndex] = previousLevel;\n            }\n            else {\n                this.modifiedProperties[this.modifiedProperties.length - 1] = previousLevel;\n            }\n            this.currentPropertyIndex++;\n        }\n        else {\n            this.modifiedProperties.push(new _history_helper__WEBPACK_IMPORTED_MODULE_5__.ModifiedLevel(listLevel, this.owner.editorModule.cloneListLevel(listLevel)));\n            value = listLevel;\n        }\n        return value;\n    };\n    BaseHistoryInfo.prototype.revertProperties = function () {\n        this.editorHistory.currentBaseHistoryInfo = this;\n        this.currentPropertyIndex = 0;\n        var property = this.getProperty();\n        this.viewer.owner.editorModule.setOffsetValue(this.documentHelper.selection);\n        if (this.action === 'ClearCharacterFormat' || this.modifiedProperties[0] instanceof _format_character_format__WEBPACK_IMPORTED_MODULE_2__.WCharacterFormat) {\n            if (this.action === 'ListCharacterFormat') {\n                this.owner.editorModule.updateListCharacterFormat(this.documentHelper.selection, property, undefined);\n                return;\n            }\n            this.owner.editorModule.updateSelectionCharacterFormatting(property, undefined, false);\n        }\n        else if (this.action === 'ClearParagraphFormat' || this.modifiedProperties[0] instanceof _format_paragraph_format__WEBPACK_IMPORTED_MODULE_0__.WParagraphFormat) {\n            if (this.action === 'ContinueNumbering') {\n                this.owner.editorModule.revertContinueNumbering(this.owner.selectionModule, this.modifiedProperties[0]);\n                return;\n            }\n            if (this.action === 'StyleName' && this.modifiedProperties[0] instanceof _format_paragraph_format__WEBPACK_IMPORTED_MODULE_0__.WParagraphFormat) {\n                this.owner.editorModule.updateSelectionParagraphFormatting(property, this.modifiedProperties[0].baseStyle, false);\n                return;\n            }\n            this.owner.editorModule.setPreviousBlockToLayout();\n            this.owner.editorModule.updateSelectionParagraphFormatting(property, undefined, false);\n        }\n        else if (this.action === 'LinkToPrevious' && this.modifiedProperties[0] instanceof _format_section_format__WEBPACK_IMPORTED_MODULE_1__.WSectionFormat) {\n            var sectionIndex = parseInt(this.selectionStart.split(';')[0]);\n            this.owner.editorModule.updateHeaderFooters(property, undefined, sectionIndex, this.modifiedProperties[0].removedHeaderFooters[0]);\n        }\n        else if (this.modifiedProperties[0] instanceof _format_section_format__WEBPACK_IMPORTED_MODULE_1__.WSectionFormat) {\n            this.owner.editorModule.updateSectionFormat(property, undefined);\n        }\n        else if (this.action === 'RestartNumbering') {\n            this.owner.editorModule.restartListAtInternal(this.owner.selectionModule, this.modifiedProperties[0]);\n            return;\n        }\n        else if (this.modifiedProperties[0] instanceof _index__WEBPACK_IMPORTED_MODULE_4__.ImageSizeInfo) {\n            var imageInfo = this.modifiedProperties[0];\n            this.insertedData = { width: _editor_editor_helper__WEBPACK_IMPORTED_MODULE_11__.HelperMethods.convertPixelToPoint(imageInfo.width), height: _editor_editor_helper__WEBPACK_IMPORTED_MODULE_11__.HelperMethods.convertPixelToPoint(imageInfo.height), alternativeText: imageInfo.alternatetext };\n            this.owner.selectionModule.updateImageSize(imageInfo);\n        }\n        else if (this.modifiedProperties[0] instanceof _history_helper__WEBPACK_IMPORTED_MODULE_5__.ModifiedLevel) {\n            var modified = new _base_dictionary__WEBPACK_IMPORTED_MODULE_7__.Dictionary();\n            for (var i = 0; i < this.modifiedProperties.length; i++) {\n                var modifiedLevel = this.modifiedProperties[i];\n                // modified.modifiedLevels.add(modifiedLevel.ownerListLevel.levelNumber, modifiedLevel);\n                modified.add(i, modifiedLevel);\n            }\n            this.editorHistory.updateListChanges(modified);\n            modified.destroy();\n            modified = undefined;\n        }\n        else if (this.modifiedProperties[0] instanceof _format_index__WEBPACK_IMPORTED_MODULE_10__.WTableFormat) {\n            this.owner.editorModule.updateTableFormat(this.owner.selectionModule, property, undefined);\n        }\n        else if (this.modifiedProperties[0] instanceof _format_index__WEBPACK_IMPORTED_MODULE_10__.WCellFormat) {\n            this.owner.isShiftingEnabled = true;\n            this.owner.editorModule.updateCellFormat(this.owner.selectionModule, property, undefined);\n        }\n        else if (this.modifiedProperties[0] instanceof _format_index__WEBPACK_IMPORTED_MODULE_10__.WRowFormat) {\n            this.owner.editorModule.updateRowFormat(this.owner.selectionModule, property, undefined);\n        }\n        else if (this.action === 'ModifyStyle') {\n            var styleObject = this.modifiedProperties.pop();\n            this.owner.editor.updateStyleObject(styleObject);\n        }\n        this.currentPropertyIndex = 0;\n        if (this.action === 'ClearCharacterFormat' || this.action === 'ClearParagraphFormat') {\n            this.owner.editorModule.getOffsetValue(this.documentHelper.selection);\n        }\n        this.owner.editorModule.startParagraph = undefined;\n        this.owner.editorModule.endParagraph = undefined;\n    };\n    BaseHistoryInfo.prototype.addModifiedCellOptions = function (applyFormat, format, table) {\n        var currentFormat;\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_9__.isNullOrUndefined)(applyFormat.bottomMargin) && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_9__.isNullOrUndefined)(applyFormat.topMargin)\n            && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_9__.isNullOrUndefined)(applyFormat.rightMargin) && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_9__.isNullOrUndefined)(applyFormat.leftMargin)) {\n            currentFormat = this.copyCellOptions(table.tableFormat);\n        }\n        else {\n            currentFormat = this.copyCellOptions(applyFormat);\n        }\n        if (this.editorHistory.isUndoing || this.editorHistory.isRedoing) {\n            var previousFormat = (this.currentPropertyIndex < this.modifiedProperties.length ? this.modifiedProperties[this.currentPropertyIndex] : this.modifiedProperties[this.modifiedProperties.length - 1]);\n            format = previousFormat;\n            if (this.currentPropertyIndex < this.modifiedProperties.length) {\n                this.modifiedProperties[this.currentPropertyIndex] = this.copyCellOptions(applyFormat);\n            }\n            else {\n                this.modifiedProperties[this.modifiedProperties.length - 1] = this.copyCellOptions(applyFormat);\n            }\n            this.currentPropertyIndex++;\n            return format;\n        }\n        else {\n            this.modifiedProperties.push(currentFormat);\n        }\n        return format;\n    };\n    BaseHistoryInfo.prototype.copyCellOptions = function (format) {\n        var cellFormat = new _format_index__WEBPACK_IMPORTED_MODULE_10__.WCellFormat();\n        cellFormat.topMargin = format.topMargin;\n        cellFormat.rightMargin = format.rightMargin;\n        cellFormat.bottomMargin = format.bottomMargin;\n        cellFormat.leftMargin = format.leftMargin;\n        return cellFormat;\n    };\n    BaseHistoryInfo.prototype.addModifiedTableOptions = function (format) {\n        var currentFormat = this.copyTableOptions(format);\n        if (this.editorHistory.isUndoing || this.editorHistory.isRedoing) {\n            var previousFormat = (this.currentPropertyIndex < this.modifiedProperties.length ? this.modifiedProperties[this.currentPropertyIndex] : this.modifiedProperties[this.modifiedProperties.length - 1]);\n            if (this.currentPropertyIndex < this.modifiedProperties.length) {\n                this.modifiedProperties.splice(this.currentPropertyIndex, 1, currentFormat);\n            }\n            else {\n                this.modifiedProperties.splice(this.modifiedProperties.length - 1, 1, currentFormat);\n            }\n            this.currentPropertyIndex++;\n        }\n        else {\n            this.modifiedProperties.push(currentFormat);\n        }\n    };\n    BaseHistoryInfo.prototype.copyTableOptions = function (format) {\n        var tableFormat = new _format_index__WEBPACK_IMPORTED_MODULE_10__.WTableFormat();\n        tableFormat.topMargin = format.topMargin;\n        tableFormat.rightMargin = format.rightMargin;\n        tableFormat.bottomMargin = format.bottomMargin;\n        tableFormat.leftMargin = format.leftMargin;\n        tableFormat.cellSpacing = format.cellSpacing;\n        return tableFormat;\n    };\n    BaseHistoryInfo.prototype.getProperty = function () {\n        switch (this.action) {\n            case 'Bold':\n                return 'bold';\n            case 'Italic':\n                return 'italic';\n            case 'FontColor':\n                return 'fontColor';\n            case 'FontFamily':\n                return 'fontFamily';\n            case 'FontSize':\n                return 'fontSize';\n            case 'HighlightColor':\n                return 'highlightColor';\n            case 'BaselineAlignment':\n                return 'baselineAlignment';\n            case 'Strikethrough':\n                return 'strikethrough';\n            case 'Underline':\n                return 'underline';\n            case 'AfterSpacing':\n                return 'afterSpacing';\n            case 'BeforeSpacing':\n                return 'beforeSpacing';\n            case 'LeftIndent':\n                return 'leftIndent';\n            case 'RightIndent':\n                return 'rightIndent';\n            case 'FirstLineIndent':\n                return 'firstLineIndent';\n            case 'LineSpacingType':\n                return 'lineSpacingType';\n            case 'LineSpacing':\n                return 'lineSpacing';\n            case 'TextAlignment':\n                return 'textAlignment';\n            case 'ListFormat':\n                return 'listFormat';\n            case 'PageHeight':\n                return 'pageHeight';\n            case 'PageWidth':\n                return 'pageWidth';\n            case 'DifferentOddAndEvenPages':\n                return 'differentOddAndEvenPages';\n            case 'TableAlignment':\n                return 'tableAlignment';\n            case 'TableLeftIndent':\n                return 'leftIndent';\n            case 'DefaultCellSpacing':\n                return 'cellSpacing';\n            case 'LeftMargin':\n            case 'CellLeftMargin':\n            case 'DefaultCellLeftMargin':\n                return 'leftMargin';\n            case 'RightMargin':\n            case 'CellRightMargin':\n            case 'DefaultCellRightMargin':\n                return 'rightMargin';\n            case 'TopMargin':\n            case 'CellTopMargin':\n            case 'DefaultCellTopMargin':\n                return 'topMargin';\n            case 'BottomMargin':\n            case 'CellBottomMargin':\n            case 'DefaultCellBottomMargin':\n                return 'bottomMargin';\n            case 'CellContentVerticalAlignment':\n                return 'verticalAlignment';\n            case 'RowHeight':\n                return 'height';\n            case 'RowHeightType':\n                return 'heightType';\n            case 'RowHeader':\n                return 'isHeader';\n            case 'AllowBreakAcrossPages':\n                return 'allowBreakAcrossPages';\n            case 'TablePreferredWidth':\n            case 'CellPreferredWidth':\n                return 'preferredWidth';\n            case 'TablePreferredWidthType':\n            case 'CellPreferredWidthType':\n                return 'preferredWidthType';\n            case 'Shading':\n                return 'shading';\n            case 'StyleName':\n                return 'styleName';\n            case 'ParagraphBidi':\n            case 'TableBidi':\n                return 'bidi';\n            case 'ContextualSpacing':\n                return 'contextualSpacing';\n            case 'LinkToPrevious':\n                return 'linkToPrevious';\n            case 'LeftBorder':\n            case 'TopBorder':\n            case 'RightBorder':\n            case 'BottomBorder':\n            case 'HorizontalBorder':\n            case 'VerticalBorder':\n            case 'Borders':\n                return (this.action[0].toLowerCase() + this.action.slice(1));\n            case 'TabStop':\n                return 'tabStop';\n        }\n        return undefined;\n    };\n    BaseHistoryInfo.prototype.getCharacterPropertyValue = function (property, modifiedProperty) {\n        var value;\n        if (property === 'bold') {\n            value = modifiedProperty.bold;\n        }\n        else if (property === 'italic') {\n            value = modifiedProperty.italic;\n        }\n        else if (property === 'fontColor') {\n            value = modifiedProperty.fontColor;\n        }\n        else if (property === 'fontFamily') {\n            value = modifiedProperty.fontFamily;\n        }\n        else if (property === 'fontSize') {\n            value = modifiedProperty.fontSize;\n        }\n        else if (property === 'highlightColor') {\n            value = modifiedProperty.highlightColor;\n        }\n        else if (property === 'baselineAlignment') {\n            value = modifiedProperty.baselineAlignment;\n        }\n        else if (property === 'strikethrough') {\n            value = modifiedProperty.strikethrough;\n        }\n        else if (property === 'underline') {\n            value = modifiedProperty.underline;\n        }\n        return value;\n    };\n    BaseHistoryInfo.prototype.addModifiedTableProperties = function (format, property, value) {\n        if (this.editorHistory.isUndoing || this.editorHistory.isRedoing) {\n            var previousTableFormat = (this.currentPropertyIndex < this.modifiedProperties.length ? this.modifiedProperties[this.currentPropertyIndex] : this.modifiedProperties[this.modifiedProperties.length - 1]);\n            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_9__.isNullOrUndefined)(property)) {\n                value = previousTableFormat;\n                if (this.currentPropertyIndex < this.modifiedProperties.length) {\n                    this.modifiedProperties[this.currentPropertyIndex] = format.cloneFormat();\n                }\n                else {\n                    this.modifiedProperties[this.modifiedProperties.length - 1] = format.cloneFormat();\n                }\n                this.currentPropertyIndex++;\n                return value;\n            }\n            if (property === 'shading') {\n                value = previousTableFormat.shading;\n            }\n            else {\n                value = previousTableFormat.getPropertyValue(property);\n            }\n            previousTableFormat.copyFormat(format);\n            this.currentPropertyIndex++;\n        }\n        else {\n            var currentFormat = new _format_index__WEBPACK_IMPORTED_MODULE_10__.WTableFormat();\n            currentFormat.copyFormat(format);\n            this.modifiedProperties.push(currentFormat);\n        }\n        return value;\n    };\n    BaseHistoryInfo.prototype.addModifiedRowProperties = function (rowFormat, property, value) {\n        if (this.editorHistory.isUndoing || this.editorHistory.isRedoing) {\n            var previousFormat = (this.currentPropertyIndex < this.modifiedProperties.length ? this.modifiedProperties[this.currentPropertyIndex] : this.modifiedProperties[this.modifiedProperties.length - 1]);\n            if (this.owner.enableCollaborativeEditing && this.modifiedProperties.length > 1 && rowFormat.ownerBase) {\n                var paragraphInfo = { 'paragraph': null, 'offset': 0 };\n                var startIndex = this.owner.selectionModule.getPositionInfoForHeaderFooter(paragraphInfo, { position: 0, done: false }, rowFormat.ownerBase).position;\n                var endIndex = startIndex + 1;\n                var rowData = {};\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_9__.isNullOrUndefined)(this.owner.sfdtExportModule)) {\n                    this.owner.sfdtExportModule.assignRowFormat(rowData, previousFormat, 0);\n                }\n                var operation = {\n                    action: 'Format',\n                    offset: startIndex,\n                    length: endIndex - startIndex,\n                    format: JSON.stringify(rowData),\n                    type: 'RowFormat',\n                };\n                this.modifiedFormatOperation.push(operation);\n            }\n            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_9__.isNullOrUndefined)(property)) {\n                value = previousFormat;\n                if (this.currentPropertyIndex < this.modifiedProperties.length) {\n                    this.modifiedProperties[this.currentPropertyIndex] = rowFormat.cloneFormat();\n                }\n                else {\n                    this.modifiedProperties[this.modifiedProperties.length - 1] = rowFormat.cloneFormat();\n                }\n                this.currentPropertyIndex++;\n                return value;\n            }\n            value = previousFormat.getPropertyValue(property);\n            previousFormat.copyFormat(rowFormat);\n            this.currentPropertyIndex++;\n        }\n        else {\n            var currentFormat = new _format_index__WEBPACK_IMPORTED_MODULE_10__.WRowFormat();\n            currentFormat.copyFormat(rowFormat);\n            this.modifiedProperties.push(currentFormat);\n        }\n        return value;\n    };\n    BaseHistoryInfo.prototype.addModifiedCellProperties = function (cellFormat, property, value) {\n        if (this.editorHistory.isUndoing || this.editorHistory.isRedoing) {\n            var previousFormat = (this.currentPropertyIndex < this.modifiedProperties.length ? this.modifiedProperties[this.currentPropertyIndex] : this.modifiedProperties[this.modifiedProperties.length - 1]);\n            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_9__.isNullOrUndefined)(property)) {\n                value = previousFormat;\n                if (this.currentPropertyIndex < this.modifiedProperties.length) {\n                    this.modifiedProperties[this.currentPropertyIndex] = cellFormat.cloneFormat();\n                }\n                else {\n                    this.modifiedProperties[this.modifiedProperties.length - 1] = cellFormat.cloneFormat();\n                }\n                this.currentPropertyIndex++;\n                return value;\n            }\n            if (property === 'shading') {\n                value = previousFormat.shading;\n            }\n            else {\n                value = previousFormat.getPropertyValue(property);\n            }\n            previousFormat.copyFormat(cellFormat);\n            this.currentPropertyIndex++;\n        }\n        else {\n            var currentFormat = new _format_index__WEBPACK_IMPORTED_MODULE_10__.WCellFormat();\n            currentFormat.copyFormat(cellFormat);\n            this.modifiedProperties.push(currentFormat);\n        }\n        return value;\n    };\n    /**\n     * @private\n     * @returns {void}\n     */\n    BaseHistoryInfo.prototype.destroy = function () {\n        this.selectionStart = undefined;\n        this.selectionEnd = undefined;\n        this.insertPosition = undefined;\n        this.endPosition = undefined;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_9__.isNullOrUndefined)(this.modifiedNodeLength)) {\n            this.modifiedNodeLength = [];\n            this.modifiedNodeLength = undefined;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_9__.isNullOrUndefined)(this.modifiedProperties)) {\n            for (var i = 0; i < this.modifiedProperties.length; i++) {\n                var property = this.modifiedProperties[i];\n                if (property instanceof _format_character_format__WEBPACK_IMPORTED_MODULE_2__.WCharacterFormat) {\n                    property.destroy();\n                }\n                else if (property instanceof _format_paragraph_format__WEBPACK_IMPORTED_MODULE_0__.WParagraphFormat) {\n                    property.destroy();\n                }\n                else if (property instanceof _format_section_format__WEBPACK_IMPORTED_MODULE_1__.WSectionFormat) {\n                    property.destroy();\n                }\n                else if (property instanceof _history_helper__WEBPACK_IMPORTED_MODULE_5__.ModifiedLevel) {\n                    property.destroy();\n                }\n                this.modifiedProperties.splice(this.modifiedProperties.indexOf(property), 1);\n                i--;\n            }\n            this.modifiedPropertiesIn = undefined;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_9__.isNullOrUndefined)(this.removedNodes)) {\n            for (var i = 0; i < this.removedNodes.length; i++) {\n                var node = this.removedNodes[i];\n                if (node instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_6__.ParagraphWidget) {\n                    node.destroyInternal(this.viewer);\n                }\n                else if (node instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_6__.ElementBox && !(node instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_6__.CommentCharacterElementBox)) {\n                    node.destroy();\n                }\n                this.removedNodes.splice(this.removedNodes.indexOf(node), 1);\n                i--;\n            }\n            this.removedNodesIn = undefined;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_9__.isNullOrUndefined)(this.insertedNodes)) {\n            for (var i = 0; i < this.insertedNodes.length; i++) {\n                var node = this.insertedNodes[i];\n                if (node instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_6__.ParagraphWidget) {\n                    node.destroyInternal(this.viewer);\n                }\n                else if (node instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_6__.ElementBox && !(node instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_6__.CommentCharacterElementBox)) {\n                    node.destroy();\n                }\n                this.insertedNodes.splice(this.insertedNodes.indexOf(node), 1);\n                i--;\n            }\n            this.insertedNodes = undefined;\n        }\n        this.ownerIn = undefined;\n    };\n    /**\n     * @private\n     */\n    BaseHistoryInfo.prototype.recordInsertRevisionDeletetion = function (widget, startOffset, endOffset) {\n        if (this.startIndex > this.endIndex) {\n            var temp = this.startIndex;\n            this.startIndex = this.endIndex;\n            this.endIndex = temp;\n        }\n        var startIndex = this.startIndex;\n        var endIndex = this.endIndex;\n        if (widget instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_6__.TextElementBox || widget instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_6__.ImageElementBox || widget instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_6__.FieldElementBox || widget instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_6__.BookmarkElementBox) {\n            if (widget.revisions.length > 0) {\n                var currentStart = this.owner.selectionModule.getElementPosition(widget, true).startPosition;\n                startOffset = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_9__.isNullOrUndefined)(startOffset) ? 0 : startOffset;\n                endOffset = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_9__.isNullOrUndefined)(endOffset) ? widget.length : endOffset;\n                currentStart.setPositionParagraph(widget.line, startOffset + currentStart.offset);\n                this.startIndex = this.owner.selectionModule.getAbsolutePositionFromRelativePosition(currentStart);\n                this.endIndex = this.startIndex + endOffset;\n                var revision = this.owner.editorModule.retrieveRevisionInOder(widget);\n                var currentUser = this.owner.currentUser === '' ? 'Guest user' : this.owner.currentUser;\n                if (revision.revisionType === 'Insertion' && revision.author !== currentUser) {\n                    this.revisionOperation.push(this.getFormatOperation());\n                }\n                else if (revision.revisionType === 'Insertion') {\n                    var operation = this.getDeleteOperation('Delete', undefined, undefined);\n                    this.revisionOperation.push(operation);\n                    endIndex -= operation.length;\n                }\n                else if (revision.revisionType === 'Deletion') {\n                    if (revision.author !== currentUser) {\n                        var operation = this.getFormatOperation(widget);\n                        if (widget.removedIds.length > 0) {\n                            for (var i = 0; i < widget.removedIds.length; i++) {\n                                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_9__.isNullOrUndefined)(operation.markerData.removedIds)) {\n                                    operation.markerData.removedIds = [];\n                                }\n                                operation.markerData.removedIds.push(widget.removedIds[i]);\n                            }\n                        }\n                        this.revisionOperation.push(operation);\n                    }\n                }\n            }\n        }\n        else if (widget instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_6__.ParagraphWidget) {\n            var isAllRevision = true;\n            for (var i = 0; i < widget.childWidgets.length; i++) {\n                var line = widget.childWidgets[i];\n                if (line.children.length === 0) {\n                    isAllRevision = false;\n                }\n                for (var j = 0; j < line.children.length; j++) {\n                    var element = line.children[j];\n                    if (element.revisions.length <= 0) {\n                        isAllRevision = false;\n                    }\n                    else if (element.revisions[0].revisionType !== 'Insertion') {\n                        isAllRevision = false;\n                    }\n                }\n            }\n            if (isAllRevision) {\n                var position = new _index__WEBPACK_IMPORTED_MODULE_4__.TextPosition(this.owner);\n                position.setPositionParagraph(widget.childWidgets[0], 0);\n                this.startIndex = this.owner.selectionModule.getAbsolutePositionFromRelativePosition(position);\n                var length_1 = this.owner.selectionModule.getBlockLength(undefined, widget, 0, { done: false }, true, undefined, undefined);\n                var currentUser = this.owner.currentUser === '' ? 'Guest user' : this.owner.currentUser;\n                var revision = this.owner.editorModule.retrieveRevisionInOder(widget.childWidgets[0].children[0]);\n                if (currentUser === revision.author) {\n                    this.endIndex = this.startIndex + length_1;\n                    this.revisionOperation.push(this.getDeleteOperation(this.action, undefined, this.getRemovedText(widget)));\n                    endIndex -= length_1;\n                }\n            }\n            else {\n                for (var i = 0; i < widget.childWidgets.length; i++) {\n                    for (var j = 0; j < widget.childWidgets[i].children.length; j++) {\n                        this.recordInsertRevisionDeletetion(widget.childWidgets[i].children[j]);\n                        startIndex = this.startIndex;\n                        endIndex = this.endIndex;\n                    }\n                }\n            }\n        }\n        this.startIndex = startIndex;\n        this.endIndex = endIndex;\n    };\n    /**\n     * @private\n     */\n    BaseHistoryInfo.prototype.getDeleteOperationsForTrackChanges = function () {\n        var operations = [];\n        var startIndex = this.startIndex;\n        var endIndex = this.endIndex;\n        var insertIndex = this.insertIndex;\n        var isInsertRevision = false;\n        this.startIndex = startIndex;\n        this.endIndex = endIndex;\n        for (var i = 0; i < this.revisionOperation.length; i++) {\n            if (this.revisionOperation[i].action == 'Format' && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_9__.isNullOrUndefined)(this.revisionOperation[i].markerData)) {\n                this.revisionOperation[i].markerData = this.markerData.pop();\n            }\n            operations.push(this.revisionOperation[i]);\n        }\n        for (var i = this.removedNodes.length - 1; i >= 0; i--) {\n            var element = this.removedNodes[i];\n            if (element instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_6__.TextElementBox || element instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_6__.ImageElementBox || element instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_6__.FieldElementBox || element instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_6__.BookmarkElementBox) {\n                if (element.removedIds.length === 0) {\n                    var operation = this.getFormatOperation();\n                    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_9__.isNullOrUndefined)(operation.markerData)) {\n                        for (var j = 0; j < this.markerData.length; j++) {\n                            if (this.markerData[j].revisionType === 'Deletion') {\n                                if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_9__.isNullOrUndefined)(operation.markerData.splittedRevisions)) {\n                                    operation.markerData.splittedRevisions = [];\n                                }\n                                if (this.checkValidRevision(this.markerData[j].revisionId)) {\n                                    operation.markerData.splittedRevisions.push(this.markerData[j]);\n                                }\n                                this.markerData.splice(j, 1);\n                                j--;\n                            }\n                        }\n                    }\n                    operations.push(operation);\n                    break;\n                }\n            }\n            else if (element instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_6__.ParagraphWidget) {\n                if (element.characterFormat.revisions.length > 0) {\n                    operations.push(this.getDeleteOperation(this.action));\n                }\n                else if (element.characterFormat.removedIds.length > 0) {\n                    var operation = this.getDeleteOperation(this.action);\n                    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_9__.isNullOrUndefined)(this.isAcceptOrReject)) {\n                        operation.markerData.isAcceptOrReject = this.isAcceptOrReject;\n                    }\n                    operations.push(operation);\n                    var position = this.owner.selectionModule.getTextPosBasedOnLogicalIndex(this.insertPosition);\n                    if (!position.isAtParagraphStart) {\n                        //When accept the delete revision if paragraph is not start then paragraph is combining.\n                        var endIndex_1 = this.endIndex;\n                        this.endIndex = this.startIndex;\n                        operations.push(this.getDeleteOperation('Delete'));\n                        this.endIndex = endIndex_1;\n                    }\n                    break;\n                }\n                else if (element.characterFormat.revisions.length === 0) {\n                    var operation = this.getFormatOperation();\n                    for (var j = 0; j < this.markerData.length; j++) {\n                        if (this.markerData[j].revisionType === 'Deletion') {\n                            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_9__.isNullOrUndefined)(operation.markerData.splittedRevisions)) {\n                                operation.markerData.splittedRevisions = [];\n                            }\n                            if (this.checkValidRevision(this.markerData[j].revisionId)) {\n                                operation.markerData.splittedRevisions.push(this.markerData[j]);\n                            }\n                            this.markerData.splice(j, 1);\n                            j--;\n                        }\n                    }\n                    this.markerData = [];\n                    operations.push(operation);\n                    break;\n                }\n            }\n        }\n        return operations;\n    };\n    BaseHistoryInfo.prototype.checkValidRevision = function (revisionID) {\n        for (var i = 0; i < this.owner.revisions.changes.length; i++) {\n            if (this.owner.revisions.changes[i].revisionID === revisionID) {\n                return true;\n            }\n        }\n        return false;\n    };\n    /**\n     * @private\n     */\n    BaseHistoryInfo.prototype.getDeleteOperationForTrackChanges = function (element) {\n        var operation;\n        if (element instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_6__.TextElementBox || element instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_6__.ImageElementBox || element instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_6__.FieldElementBox || element instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_6__.BookmarkElementBox) {\n            if (element.removedIds.length === 0) {\n                operation = this.getFormatOperation(element);\n            }\n            else if (element.removedIds.length > 0) {\n                var revisionId = element.removedIds[0];\n                var revision = this.owner.editorModule.getRevision(revisionId);\n                var currentUser = this.owner.currentUser === '' ? 'Guest user' : this.owner.currentUser;\n                if (revision.revisionType === 'Insertion' && revision.author !== currentUser) {\n                    operation = this.getFormatOperation(element);\n                }\n                else if (revision.revisionType === 'Insertion') {\n                    operation = this.getDeleteOperation(this.action, undefined, this.getRemovedText(element));\n                }\n                else if (revision.revisionType === 'Deletion') {\n                    if (revision.author !== currentUser) {\n                        operation = this.getFormatOperation(element);\n                        if (element.removedIds.length > 0) {\n                            for (var i = 0; i < element.removedIds.length; i++) {\n                                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_9__.isNullOrUndefined)(operation.markerData.removedIds)) {\n                                    operation.markerData.removedIds = [];\n                                }\n                                operation.markerData.removedIds.push(element.removedIds[i]);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        if (this.action !== 'Enter' && !(element instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_6__.ParagraphWidget) && ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_9__.isNullOrUndefined)(operation) || operation.action !== 'Delete')) {\n            this.startIndex += element.length;\n        }\n        return operation;\n    };\n    /**\n     * @private\n     */\n    BaseHistoryInfo.prototype.getActionInfo = function (isInvertOperation) {\n        var action = this.action;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_9__.isNullOrUndefined)(this.isAcceptOrReject) && this.isAcceptOrReject === 'Reject') {\n            action = 'Reject Change';\n        }\n        var operations = [];\n        switch (action.toString()) {\n            case 'Insert':\n            case 'InsertTextParaReplace':\n            case 'Enter':\n            case 'InsertInline':\n            case 'SectionBreak':\n            case 'SectionBreakContinuous':\n                if (this.removedNodes.length > 0 && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_9__.isNullOrUndefined)(this.dropDownIndex)) {\n                    if (this.owner.enableTrackChanges && !this.editorHistory.isUndoing) {\n                        operations = this.getDeleteOperationsForTrackChanges();\n                        if (action !== 'InsertInline') {\n                            this.insertIndex = this.endIndex;\n                        }\n                    }\n                    else {\n                        if (action === 'InsertTextParaReplace') {\n                            // when action is equal to InsertTextParaReplace we need not to calculate the para mark.\n                            this.startIndex > this.endIndex ? this.startIndex - 1 : this.endIndex -= 1;\n                        }\n                        var deleteOperation = this.getDeleteOperation(action);\n                        if (action === 'Enter' && this.owner.enableTrackChanges && this.editorHistory.isUndoing) {\n                            deleteOperation.markerData = { isSkipTracking: true };\n                        }\n                        operations.push(deleteOperation);\n                    }\n                }\n                if ((action === 'Enter' || this.insertedText.length > 0)) {\n                    if (!this.editorHistory.isUndoing && (!this.editorHistory.isRedoing || action === 'Enter' || action === 'SectionBreak' || action === 'SectionBreakContinuous')) {\n                        var operation = this.getInsertOperation(action);\n                        if (this.owner.enableTrackChanges && this.action !== 'Enter') {\n                            if (this.insertedElement instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_6__.FootnoteElementBox) {\n                                operation.markerData = this.markerData[0];\n                                this.markerData.splice(0, 1);\n                                operation.text = _base_types__WEBPACK_IMPORTED_MODULE_12__.CONTROL_CHARACTERS.Marker_Start;\n                                operation.markerData.type = this.insertedElement.footnoteType;\n                                operation.markerData.revisionForFootnoteEndnoteContent = this.markerData.pop();\n                            }\n                            operations.push(operation);\n                            for (var i = 0; i < this.splittedRevisions.length; i++) {\n                                if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_9__.isNullOrUndefined)(operation.markerData)) {\n                                    operation.markerData = {};\n                                }\n                                if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_9__.isNullOrUndefined)(operation.markerData.splittedRevisions)) {\n                                    operation.markerData.splittedRevisions = [];\n                                }\n                                operation.markerData.splittedRevisions.push(this.splittedRevisions[i]);\n                            }\n                        }\n                        else {\n                            operations.push(operation);\n                        }\n                    }\n                    else if (this.isRemovedNodes) {\n                        var operationCollection = this.getDeleteContent(action);\n                        operations = operations.concat(operationCollection);\n                    }\n                }\n                var operation2 = operations[operations.length - 1];\n                if (action === 'Insert' && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_9__.isNullOrUndefined)(operation2.text)) {\n                    operation2.length = operation2.text.length;\n                }\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_9__.isNullOrUndefined)(this.dropDownIndex)) {\n                    operation2.markerData = { 'type': 'Field', 'dropDownIndex': this.dropDownIndex };\n                    operation2.offset = this.getElementAbsolutePosition(this.fieldBegin);\n                    operation2.type = 'DropDown';\n                }\n                break;\n            case 'InsertTable':\n            case 'InsertTableBelow':\n                if (this.removedNodes.length > 0) {\n                    operations.push(this.getDeleteOperation(action));\n                }\n                if (this.editorHistory.isUndoing && this.isRemovedNodes) {\n                    operations.push(this.getUndoRedoOperation(action));\n                }\n                else {\n                    var tableRowOperation = this.buildTableRowCellOperation(action);\n                    for (var i = 0; i < tableRowOperation.length; i++) {\n                        operations.push(tableRowOperation[i]);\n                    }\n                }\n                break;\n            case 'InsertRowAbove':\n            case 'InsertRowBelow':\n            case 'InsertColumnLeft':\n            case 'InsertColumnRight':\n                if (this.editorHistory.isUndoing) {\n                    for (var i = 0; i < this.cellOperation.length; i++) {\n                        operations.push(this.cellOperation[i]);\n                    }\n                    var operation = this.getUndoRedoOperation(action, true);\n                    if (this.owner.enableTrackChanges && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_9__.isNullOrUndefined)(operation.markerData)) {\n                        operation.markerData = { isSkipTracking: true };\n                    }\n                    operations.push(operation);\n                }\n                else {\n                    var tableCellOperation = this.buildTableRowCellOperation(action);\n                    if (action === 'InsertRowAbove' || action === 'InsertRowBelow') {\n                        operations = tableCellOperation.slice();\n                    }\n                    else {\n                        operations = tableCellOperation.reverse().slice();\n                    }\n                }\n                break;\n            case 'BackSpace':\n            case 'Delete':\n            case 'Cut':\n            case 'DeleteBookmark':\n            case 'RemoveEditRange':\n            case 'RemoveContentControl':\n                if (this.editorHistory.isUndoing) {\n                    if (action == \"DeleteBookmark\" || action == \"RemoveEditRange\") {\n                        this.startIndex -= 1;\n                        this.insertIndex = this.startIndex;\n                        this.insertedText = _base_types__WEBPACK_IMPORTED_MODULE_12__.CONTROL_CHARACTERS.Marker_Start;\n                        operations.push(this.getInsertOperation(action));\n                        this.insertedText = _base_types__WEBPACK_IMPORTED_MODULE_12__.CONTROL_CHARACTERS.Marker_End;\n                        operations.push(this.getInsertOperation(action, true));\n                        if (action === 'RemoveEditRange') {\n                            var operation = operations[operations.length - 1];\n                            operation.offset -= 1;\n                        }\n                        this.startIndex += 1;\n                    }\n                    else {\n                        if (this.endRevisionLogicalIndex && this.editorHistory.isUndoing) {\n                            if (this.removedNodes.length > 0) {\n                                var deleteOperation = this.getDeleteOperation(action);\n                                deleteOperation.markerData = { isSkipTracking: true };\n                                operations.push(deleteOperation);\n                            }\n                            if (this.isRemovedNodes) {\n                                var operationCollection = this.getDeleteContent(action);\n                                operations = operations.concat(operationCollection);\n                            }\n                        }\n                        else {\n                            var operationCollection = this.getDeleteContent(action);\n                            operations = operations.concat(operationCollection);\n                        }\n                    }\n                }\n                else {\n                    if (this.cellOperation.length > 0) {\n                        operations = this.cellOperation;\n                        this.cellOperation = [];\n                    }\n                    else {\n                        if (this.removedNodes.length > 0) {\n                            if (this.owner.enableTrackChanges) {\n                                if (this.editorHistory.isRedoing) {\n                                    if (this.removedNodes.length > 0) {\n                                        var deleteOperation = this.getDeleteOperation(action);\n                                        deleteOperation.markerData = { isSkipTracking: true };\n                                        operations.push(deleteOperation);\n                                    }\n                                    if (this.isRemovedNodes) {\n                                        var operationCollection = this.getDeleteContent(action);\n                                        operations = operations.concat(operationCollection);\n                                    }\n                                }\n                                else {\n                                    operations = this.getDeleteOperationsForTrackChanges();\n                                }\n                            }\n                            else {\n                                var deleteOperation = this.getDeleteOperation(action);\n                                operations.push(deleteOperation);\n                                for (var i = 0; i < this.removedNodes.length; i++) {\n                                    var element = this.removedNodes[parseInt(i.toString(), 10)];\n                                    if (element instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_6__.BodyWidget) {\n                                        var headersFooters = element.removedHeaderFooters;\n                                        for (var j = 0; j < headersFooters.length; j++) {\n                                            var headerFooter = headersFooters[parseInt(j.toString(), 10)];\n                                            var keysLength = Object.keys(headerFooter).length;\n                                            if (keysLength > 0) {\n                                                operations.push(this.getDeleteOperation('DeleteHeaderFooter', undefined));\n                                                break;\n                                            }\n                                        }\n                                    }\n                                }\n                                if (action === 'DeleteBookmark' || action === 'RemoveEditRange') {\n                                    operations.push(this.getDeleteOperation(action, true));\n                                    if (action === 'RemoveEditRange') {\n                                        var operation = operations[operations.length - 1];\n                                        operation.offset -= 1;\n                                    }\n                                }\n                                else if (action === \"RemoveContentControl\") {\n                                    var operation = this.getDeleteOperation(action, true);\n                                    operation.text = _base_types__WEBPACK_IMPORTED_MODULE_12__.CONTROL_CHARACTERS.Marker_End;\n                                    operations.push(operation);\n                                }\n                            }\n                        }\n                    }\n                }\n                this.markerData = [];\n                break;\n            case 'ResolveComment':\n            case 'EditComment':\n                for (var i = 0; i < this.removedNodes.length; i++) {\n                    var operation = this.getUpdateOperation();\n                    operations.push(this.getCommentOperation(operation, action, this.removedNodes[i]));\n                }\n                break;\n            case 'ClearRevisions':\n            case 'TrackingPageBreak':\n            case 'AcceptTOC':\n                if (this.editorHistory.isUndoing || this.editorHistory.isRedoing) {\n                    if (this.removedNodes.length > 0) {\n                        var deleteOperation = this.getDeleteOperation(action);\n                        deleteOperation.markerData = { isSkipTracking: true };\n                        operations.push(deleteOperation);\n                    }\n                    if (this.isRemovedNodes) {\n                        var revision = void 0;\n                        if (typeof (this.removedNodes[0]) === 'string') {\n                            revision = this.owner.editorModule.getRevision(this.removedNodes[0]);\n                        }\n                        if (revision && revision.range[0] instanceof _format_character_format__WEBPACK_IMPORTED_MODULE_2__.WCharacterFormat) {\n                            operations.push(this.getInsertOperation('Enter'));\n                        }\n                        else {\n                            var operationCollection = this.getDeleteContent(action);\n                            operations = operations.concat(operationCollection);\n                        }\n                    }\n                }\n                else {\n                    if (this.removedNodes.length > 0) {\n                        var revision = this.owner.editorModule.getRevision(this.removedNodes[0]);\n                        if (action === 'TrackingPageBreak') {\n                            if (!(typeof this.removedNodes[0] === 'string')) {\n                                var operation = this.getDeleteOperation(action);\n                                operation.markerData.isAcceptOrReject = 'Reject';\n                                operations.push(operation);\n                                break;\n                            }\n                        }\n                        operations.push(this.getRevisionOperation(revision));\n                    }\n                }\n                break;\n            case 'Reject Change':\n                if (this.isRemovedNodes) {\n                    var operationCollection = this.getDeleteContent(action);\n                    operations = operations.concat(operationCollection);\n                }\n                else {\n                    var operation = this.getDeleteOperation(action);\n                    operation.markerData.isAcceptOrReject = 'Reject';\n                    operations.push(operation);\n                }\n                break;\n            case 'Accept Change':\n                if (this.isRemovedNodes) {\n                    var operationCollection = this.getDeleteContent(action);\n                    operations = operations.concat(operationCollection);\n                }\n                else {\n                    var deleteOperation = this.getDeleteOperation(action);\n                    deleteOperation.markerData.isAcceptOrReject = 'Accept';\n                    operations.push(deleteOperation);\n                }\n                break;\n            case 'Paste':\n            case 'PasteColumn':\n            case 'PasteOverwrite':\n            case 'PasteRow':\n                if (this.editorHistory.isUndoing || this.editorHistory.isRedoing) {\n                    if (this.removedNodes.length > 0) {\n                        operations.push(this.getDeleteOperation('Delete'));\n                    }\n                    if (this.isRemovedNodes) {\n                        if (this.action === 'Paste') {\n                            var operationCollection = this.getDeleteContent(action);\n                            operations = operations.concat(operationCollection);\n                        }\n                        else {\n                            operations.push(this.getUndoRedoOperation(action, true));\n                        }\n                    }\n                }\n                else {\n                    if (this.removedNodes.length > 0) {\n                        operations.push(this.getDeleteOperation('Delete'));\n                    }\n                    var length_2 = this.getPasteContentLength();\n                    if (action !== 'Paste') {\n                        if (this.owner.selectionModule.start.paragraph.isInsideTable) {\n                            length_2 = this.owner.selectionModule.getBlockLength(undefined, this.owner.selectionModule.start.paragraph.associatedCell.ownerTable, 0, { done: false }, true, undefined, undefined);\n                        }\n                    }\n                    var pasteOperation = {\n                        action: 'Insert',\n                        offset: this.startIndex,\n                        length: length_2,\n                        pasteContent: JSON.stringify(this.pasteContent),\n                        type: (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_9__.isNullOrUndefined)(this.type) ? 'Paste' : this.type,\n                        markerData: this.markerData.pop()\n                    };\n                    operations.push(pasteOperation);\n                }\n                break;\n            case 'InsertHyperlink':\n                if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_9__.isNullOrUndefined)(this.fieldBegin)) {\n                    operations.push(this.getDeleteOperation('BackSpace'));\n                    if (this.isRemovedNodes) {\n                        var operationCollection = this.getDeleteContent(action);\n                        operations = operations.concat(operationCollection);\n                    }\n                }\n                else {\n                    if (this.isEditHyperlink) {\n                        operations = this.getEditHyperlinkOperation();\n                    }\n                    else {\n                        operations = this.getFieldOperation();\n                    }\n                }\n                this.fieldBegin = undefined;\n                break;\n            case 'UpdateFormField':\n                this.insertedText = '';\n                var operation1 = this.getInsertOperation('UpdateFormField');\n                operation1.text = _base_types__WEBPACK_IMPORTED_MODULE_12__.CONTROL_CHARACTERS.Marker_Start;\n                operation1.markerData = { 'type': 'Field', 'checkBoxValue': this.fieldBegin.formFieldData.checked };\n                operation1.offset = this.getElementAbsolutePosition(this.fieldBegin);\n                operations.push(operation1);\n                break;\n            case 'DeleteRow':\n            case 'DeleteCells':\n            case 'DeleteColumn':\n            case 'DeleteTable':\n            case 'ClearCells':\n            case 'MergeCells':\n                if (this.editorHistory.isUndoing) {\n                    if (action == 'DeleteTable') {\n                        operations.push(this.getUndoRedoOperation(action));\n                    }\n                    else {\n                        operations = this.cellOperation.slice();\n                        this.insertIndex = this.startIndex;\n                        operations.push(this.getUndoRedoOperation(action, true));\n                        this.cellOperation = [];\n                    }\n                }\n                else {\n                    if (this.removedNodes.length > 0) {\n                        if (this.cellOperation.length > 0) {\n                            // For delete column and delete cell.\n                            for (var i = 0; i < this.cellOperation.length; i++) {\n                                operations.push(this.cellOperation[i]);\n                            }\n                            if (action === 'MergeCells') {\n                                operations.push(this.getPasteMergeOperation());\n                                operations.push(this.getFormatOperation());\n                                this.type = undefined;\n                            }\n                            else {\n                                operations.reverse();\n                            }\n                        }\n                        else {\n                            if (this.owner.enableTrackChanges) {\n                                operations.push(this.getFormatOperation(undefined, action));\n                            }\n                            else {\n                                operations.push(this.getDeleteOperation(action));\n                            }\n                        }\n                        this.cellOperation = [];\n                    }\n                }\n                break;\n            case 'RemoveRowTrack':\n                if (this.editorHistory.isUndoing) {\n                    if (this.isRemovedNodes && this.editorHistory.isUndoing) {\n                        operations = this.cellOperation.slice();\n                        var operationCollection = this.getDeleteContent(action);\n                        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_9__.isNullOrUndefined)(operationCollection[0].markerData)) {\n                            operationCollection[0].markerData = { isSkipTracking: true };\n                        }\n                        operations.push.apply(operations, operationCollection);\n                    }\n                }\n                else {\n                    if (this.removedNodes.length > 0) {\n                        if (this.cellOperation.length > 0) {\n                            operations.push.apply(operations, this.cellOperation);\n                        }\n                        else {\n                            operations = this.revisionOperation.slice();\n                            this.getTrackchangesOperation(operations);\n                        }\n                    }\n                }\n                break;\n            case 'RowResizing':\n            case 'CellResizing':\n                operations = this.getResizingOperation(action);\n                break;\n            case 'ImageResizing':\n                operations.push(this.getFormatOperation());\n                break;\n            case 'Bold':\n            case 'Italic':\n            case 'Underline':\n            case 'FontSize':\n            case 'Strikethrough':\n            case 'BaselineAlignment':\n            case 'HighlightColor':\n            case 'FontColor':\n            case 'FontFamily':\n            case 'Uppercase':\n            case 'Lowercase':\n            case 'CapitalizeEachWord':\n            case 'SentenceCase':\n            case 'ToggleCase':\n            case 'CharacterFormat':\n                if (this.editorHistory.isUndoing || this.editorHistory.isRedoing) {\n                    if (action === 'Uppercase') {\n                        operations.push(this.getDeleteOperation(action));\n                        if (this.removedNodes) {\n                            var operationCollection = this.getDeleteContent(action);\n                            operations = operations.concat(operationCollection);\n                        }\n                    }\n                    else {\n                        operations = this.modifiedFormatOperation;\n                        this.modifiedFormatOperation = [];\n                    }\n                }\n                else {\n                    var charFormatOperation = this.buildFormatOperation(action, true);\n                    operations = charFormatOperation.slice();\n                }\n                break;\n            case 'AfterSpacing':\n            case 'BeforeSpacing':\n            case 'RightIndent':\n            case 'LeftIndent':\n            case 'FirstLineIndent':\n            case 'LineSpacing':\n            case 'LineSpacingType':\n            case 'TextAlignment':\n            case 'Borders':\n            case 'TopBorder':\n            case 'BottomBorder':\n            case 'LeftBorder':\n            case 'RightBorder':\n            case 'HorizontalBorder':\n            case 'VerticalBorder':\n            case 'ListFormat':\n            case 'ParagraphFormat':\n            case 'StyleName':\n            case 'ClearParagraphFormat':\n            case 'SpaceBeforeAuto':\n            case 'SpaceAfterAuto':\n            case 'ParagraphBidi':\n            case 'ContextualSpacing':\n            case 'ContinueNumbering':\n            case 'List':\n                if (this.modifiedFormatOperation.length > 0 && !isInvertOperation) {\n                    operations = this.modifiedFormatOperation;\n                    this.modifiedFormatOperation = [];\n                }\n                else {\n                    if (isInvertOperation && this.editorHistory.isUndoing && (action === 'ListFormat' || action === 'ClearParagraphFormat')) {\n                        action = 'ParagraphFormat';\n                    }\n                    if (action === 'ContinueNumbering') {\n                        this.type = action.toString();\n                    }\n                    if (action === 'Borders' && this.removedNodes[this.removedNodes.length - 1] instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_6__.TableWidget) {\n                        this.insertedText = _base_types__WEBPACK_IMPORTED_MODULE_12__.CONTROL_CHARACTERS.Cell;\n                        this.type = 'CellFormat';\n                        this.createCellFormat(action);\n                        operations = this.getSelectedCellOperation(action, undefined, true, false, true);\n                        break;\n                    }\n                    var paraFormatOperation = this.buildFormatOperation(action, false);\n                    operations = paraFormatOperation.slice();\n                }\n                break;\n            case 'TableAlignment':\n            case 'DefaultCellSpacing':\n            case 'TableLeftIndent':\n            case 'DefaultCellLeftMargin':\n            case 'DefaultCellRightMargin':\n            case 'DefaultCellTopMargin':\n            case 'DefaultCellBottomMargin':\n            case 'TablePreferredWidth':\n            case 'TablePreferredWidthType':\n            case 'TableBidi':\n                this.createTableFormat(action);\n                this.type = 'TableFormat';\n                operations.push(this.getFormatOperation());\n                this.format = undefined;\n                break;\n            case 'RestartNumbering':\n                this.type = action.toString();\n                var numberingOperation = this.getFormatOperation(undefined, action);\n                this.createListFormat(action, numberingOperation);\n                operations.push(numberingOperation);\n                break;\n            case 'Shading':\n                this.createCellFormat(action);\n                this.type = 'CellFormat';\n                operations = this.getSelectedCellOperation(action, undefined, undefined, true, true);\n                break;\n            case 'TableAutoFitToContents':\n            case 'TableAutoFitToWindow':\n            case 'TableFixedColumnWidth':\n                if (this.editorHistory.isUndoing) {\n                    operations = this.getDeleteContent('Insert');\n                }\n                else {\n                    this.createTableFormat(action);\n                    this.type = 'TableFormat';\n                    this.insertedText = action.toString();\n                    operations.push(this.getFormatOperation());\n                    this.format = undefined;\n                }\n                break;\n            case 'SectionFormat':\n            case 'HeaderDistance':\n            case 'FooterDistance':\n            case 'DifferentFirstPage':\n            case 'DifferentOddAndEvenPages':\n            case 'PageWidth':\n            case 'PageHeight':\n            case 'LeftMargin':\n            case 'TopMargin':\n            case 'RightMargin':\n            case 'BottomMargin':\n            case 'RestartPageNumbering':\n            case 'PageStartingNumber':\n            case 'EndnoteNumberFormat':\n            case 'FootNoteNumberFormat':\n            case 'RestartIndexForEndnotes':\n            case 'RestartIndexForFootnotes':\n            case 'InitialFootNoteNumber':\n            case 'InitialEndNoteNumber':\n            case 'LineBetweenColumns':\n            case 'EqualWidth':\n            case 'BreakCode':\n            case 'LinkToPrevious':\n                this.createSectionFormat(action);\n                this.type = 'SectionFormat';\n                operations.push(this.getFormatOperation(undefined));\n                if (action === 'LinkToPrevious') {\n                    var operation = operations[operations.length - 1];\n                    operation.offset = this.insertIndex;\n                }\n                break;\n            case 'RowHeight':\n            case 'RowHeightType':\n            case 'AllowBreakAcrossPages':\n            case 'RowHeader':\n                if (this.editorHistory.isUndoing || this.editorHistory.isRedoing && this.modifiedProperties.length > 1) {\n                    operations = this.modifiedFormatOperation;\n                    this.modifiedFormatOperation = [];\n                }\n                else {\n                    this.createRowFormat(action);\n                    this.type = 'RowFormat';\n                    operations.push(this.getFormatOperation(undefined));\n                    this.format = undefined;\n                }\n                break;\n            case 'CellContentVerticalAlignment':\n            case 'CellLeftMargin':\n            case 'CellRightMargin':\n            case 'CellBottomMargin':\n            case 'CellTopMargin':\n            case 'CellPreferredWidth':\n            case 'CellPreferredWidthType':\n                this.createCellFormat(action);\n                this.type = 'CellFormat';\n                operations = this.getSelectedCellOperation(action, false, false, false, true).slice();\n                this.format = undefined;\n                break;\n            case 'UpdateContentControl':\n                if (this.modifiedProperties.length > 0) {\n                    var operation = this.getFormatOperation();\n                    operation.text = _base_types__WEBPACK_IMPORTED_MODULE_12__.CONTROL_CHARACTERS.Marker_Start;\n                    operations.push(operation);\n                }\n                else if (this.removedNodes.length > 0) {\n                    var operation = this.getFormatOperation();\n                    operation.text = _base_types__WEBPACK_IMPORTED_MODULE_12__.CONTROL_CHARACTERS.Marker_Start;\n                    var contentControlInfo = this.removedNodes[0];\n                    operation.markerData = { 'type': 'ContentControlCheckBox', checkBoxValue: contentControlInfo.value };\n                    operations.push(operation);\n                }\n                break;\n        }\n        this.cellOperation = [];\n        this.revisionOperation = [];\n        this.isRemovedNodes = false;\n        return operations;\n    };\n    BaseHistoryInfo.prototype.getTrackchangesOperation = function (operations) {\n        var markerInfo = this.markerData;\n        for (var i = markerInfo.length - 1; i >= 0; i--) {\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_9__.isNullOrUndefined)(markerInfo[i].revisionId)) {\n                var revision = this.getRevision(markerInfo[i].revisionId);\n                if (revision && revision.range.length > 0) {\n                    if (revision.range[0] instanceof _format_index__WEBPACK_IMPORTED_MODULE_10__.WRowFormat) {\n                        operations.push(this.buildRowOperationForTrackChanges(revision.range[0].ownerBase, 'RemoveRowTrack'));\n                    }\n                    else {\n                        var startPosition = new _index__WEBPACK_IMPORTED_MODULE_4__.TextPosition(this.owner);\n                        var endPosition = new _index__WEBPACK_IMPORTED_MODULE_4__.TextPosition(this.owner);\n                        this.owner.selection.selectRevision(revision, startPosition, endPosition);\n                        this.startIndex = this.owner.selectionModule.getAbsolutePositionFromRelativePosition(startPosition);\n                        this.endIndex = this.owner.selectionModule.getAbsolutePositionFromRelativePosition(endPosition);\n                        operations.push(this.getFormatOperation(undefined));\n                    }\n                }\n                else {\n                    this.owner.editorModule.removeMarkerInfoRevision(markerInfo[i].revisionId, markerInfo);\n                }\n            }\n        }\n    };\n    BaseHistoryInfo.prototype.getRevision = function (revisionId) {\n        for (var i = 0; i < this.owner.revisions.changes.length; i++) {\n            var revision = this.owner.revisions.changes[i].revisionID;\n            if (revision === revisionId) {\n                return this.owner.revisions.changes[i];\n            }\n        }\n        return undefined;\n    };\n    BaseHistoryInfo.prototype.getElementAbsolutePosition = function (element) {\n        if (element) {\n            var position = this.owner.selectionModule.getElementPosition(element);\n            var startIndex = this.owner.selectionModule.getAbsolutePositionFromRelativePosition(position.startPosition);\n            return startIndex;\n        }\n        return undefined;\n    };\n    /**\n     * @private\n     */\n    BaseHistoryInfo.prototype.getFieldOperation = function () {\n        var operations = [];\n        var element = this.fieldBegin;\n        var isFieldEnd = false;\n        var elementOffset = this.insertIndex;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_9__.isNullOrUndefined)(element)) {\n            do {\n                var insertedText = void 0;\n                var Data = void 0;\n                var elementLength = void 0;\n                var characterFormat = void 0;\n                var type = void 0;\n                if (!element.skipformFieldLength) {\n                    if (element instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_6__.FieldElementBox) {\n                        if (element.fieldType === 0 && this.getRemovedText() !== '') {\n                            operations.push(this.getDeleteOperation('Delete'));\n                            var operation_1 = operations[operations.length - 1];\n                            operation_1.offset = elementOffset;\n                            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_9__.isNullOrUndefined)(operation_1.markerData) && this.owner.enableTrackChanges) {\n                                operation_1.markerData.isSkipTracking = true;\n                            }\n                        }\n                        insertedText = element.fieldType === 0 ? _base_types__WEBPACK_IMPORTED_MODULE_12__.CONTROL_CHARACTERS.Marker_Start : element.fieldType === 1 ? _base_types__WEBPACK_IMPORTED_MODULE_12__.CONTROL_CHARACTERS.Marker_End : element.fieldType === 2 ? _base_types__WEBPACK_IMPORTED_MODULE_12__.CONTROL_CHARACTERS.Field_Separator : '';\n                        if (element.fieldType === 0 && element.formFieldData) {\n                            type = this.formFieldType;\n                            if (element.revisions.length > 0) {\n                                Data = this.owner.editorModule.getRevisionMarkerData(Data, element.revisions[0]);\n                            }\n                            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_9__.isNullOrUndefined)(Data)) {\n                                Data = {};\n                            }\n                            Data.type = 'Field';\n                            Data.formFieldData = JSON.stringify(element.formFieldData);\n                        }\n                        else {\n                            if (element.revisions.length > 0) {\n                                Data = this.owner.editorModule.getRevisionMarkerData(Data, element.revisions[0]);\n                            }\n                            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_9__.isNullOrUndefined)(Data)) {\n                                Data = {};\n                            }\n                            Data.type = 'Field';\n                        }\n                        elementLength = element.length;\n                    }\n                    else if (this.fieldBegin.formFieldData && element instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_6__.BookmarkElementBox) {\n                        insertedText = element.bookmarkType === 0 ? _base_types__WEBPACK_IMPORTED_MODULE_12__.CONTROL_CHARACTERS.Marker_Start : _base_types__WEBPACK_IMPORTED_MODULE_12__.CONTROL_CHARACTERS.Marker_End;\n                        Data = { 'bookmarkName': element.name, 'type': 'Bookmark' };\n                        elementLength = element.length;\n                    }\n                    else if (element instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_6__.TextElementBox) {\n                        insertedText = element.text;\n                        elementLength = element.length;\n                        if (element.revisions.length > 0) {\n                            Data = this.owner.editorModule.getRevisionMarkerData(Data, element.revisions[0]);\n                        }\n                    }\n                    if (!(element instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_6__.BookmarkElementBox)) {\n                        var characterData = this.owner.sfdtExportModule.writeCharacterFormat(element.characterFormat, 0);\n                        characterFormat = JSON.stringify(characterData);\n                    }\n                    var operation = {\n                        action: 'Insert',\n                        offset: elementOffset,\n                        type: type,\n                        text: insertedText,\n                        length: elementLength,\n                        markerData: Data,\n                        format: characterFormat\n                    };\n                    operations.push(operation);\n                    elementOffset += element.length;\n                    Data = undefined;\n                    type = undefined;\n                    characterFormat = undefined;\n                    if (element instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_6__.FieldElementBox && element.fieldType === 1) {\n                        isFieldEnd = true;\n                        if (this.fieldBegin.formFieldData && element.nextNode instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_6__.BookmarkElementBox) {\n                            var elementBox = element.nextNode;\n                            insertedText = elementBox.bookmarkType === 0 ? _base_types__WEBPACK_IMPORTED_MODULE_12__.CONTROL_CHARACTERS.Marker_Start : _base_types__WEBPACK_IMPORTED_MODULE_12__.CONTROL_CHARACTERS.Marker_End;\n                            if (elementBox.revisions.length > 0) {\n                                Data = this.owner.editorModule.getRevisionMarkerData(Data, elementBox.revisions[0]);\n                            }\n                            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_9__.isNullOrUndefined)(Data)) {\n                                Data = {};\n                            }\n                            Data.bookmarkName = elementBox.name;\n                            Data.type = 'Bookmark';\n                            elementLength = elementBox.length;\n                            var operation_2 = {\n                                action: 'Insert',\n                                offset: elementOffset,\n                                text: insertedText,\n                                length: elementLength,\n                                markerData: Data\n                            };\n                            operations.push(operation_2);\n                        }\n                    }\n                }\n                element = element.nextNode;\n            } while (!isFieldEnd && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_9__.isNullOrUndefined)(element));\n        }\n        return operations;\n    };\n    /**\n     * @private\n     * @returns {Operation}\n     * This method will build the operation for undo/Redo deleted content as paste action.\n     */\n    BaseHistoryInfo.prototype.getDeleteContent = function (action) {\n        var operations = [];\n        var startPosition = this.owner.selectionModule.getTextPosBasedOnLogicalIndex(this.collabStart);\n        var endPosition = this.owner.selectionModule.getTextPosBasedOnLogicalIndex(this.collabEnd);\n        var paraEnd = endPosition.clone();\n        paraEnd.offset = endPosition.offset - 1;\n        var isParaSelected = startPosition.isAtParagraphStart && paraEnd.isAtParagraphEnd;\n        if (isParaSelected && (!startPosition.currentWidget.paragraph.isInsideTable)) {\n            operations.push(this.getInsertOperation('Enter', false, true));\n            operations.push(this.getUndoRedoOperation(action));\n        }\n        else if (startPosition.paragraph == endPosition.paragraph) {\n            if (startPosition.isAtSamePosition(endPosition)) {\n                if (this.owner.selectionModule.isEmpty && action === 'BackSpace') {\n                    this.insertIndex -= 1;\n                }\n                operations.push(this.getUndoRedoOperation(action, false, true));\n            }\n            else {\n                operations.push(this.getUndoRedoOperation(action));\n            }\n        }\n        else {\n            if (startPosition.currentWidget.paragraph.isInsideTable) {\n                operations = this.cellOperation.slice();\n                operations.push(this.getUndoRedoOperation(action, true));\n            }\n            else {\n                operations.push(this.getUndoRedoOperation(action));\n                this.startIndex = this.endIndex + 1;\n                if (!(startPosition.isAtParagraphStart || paraEnd.isAtParagraphEnd)) {\n                    var operation = this.getDeleteOperation('Delete');\n                    if (this.owner.enableTrackChanges) {\n                        operation.markerData = { isSkipTracking: true };\n                    }\n                    operations.push(operation);\n                }\n            }\n        }\n        return operations;\n    };\n    BaseHistoryInfo.prototype.getEditHyperlinkOperation = function () {\n        var operations = [];\n        var element = this.fieldBegin;\n        if (element) {\n            var startIndex = this.getElementAbsolutePosition(element);\n            operations.push(this.getDeleteOperation('Delete'));\n            var operation = operations[operations.length - 1];\n            operation.offset = startIndex;\n            var fieldCode = this.getRemovedFieldCode();\n            operation.length = fieldCode.length;\n            operation.text = fieldCode;\n            operations.push(this.getInsertOperation('InsertHyperlink'));\n            operation = operations[operations.length - 1];\n            operation.offset = startIndex;\n            fieldCode = this.owner.selectionModule.getFieldCode(element, true);\n            operation.text = fieldCode;\n            operation.length = fieldCode.length;\n        }\n        return operations;\n    };\n    BaseHistoryInfo.prototype.getPasteContentLength = function () {\n        var length = 0;\n        for (var i = 0; i < this.insertedNodes.length; i++) {\n            var block = this.insertedNodes[i];\n            if (block instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_6__.TextElementBox) {\n                length += block.length;\n            }\n            else {\n                length += this.owner.selectionModule.getBlockLength(undefined, block, 0, { done: false }, true, undefined, undefined);\n            }\n        }\n        this.insertedNodes = [];\n        return length;\n    };\n    /**\n     * @private\n     * @returns {Operation}\n     */\n    BaseHistoryInfo.prototype.getUpdateOperation = function () {\n        var operation = {\n            action: 'Update'\n        };\n        return operation;\n    };\n    BaseHistoryInfo.prototype.getResizingOperation = function (action) {\n        var operations = [];\n        var tableResize = this.owner.editorModule.tableResize;\n        var table = tableResize.currentResizingTable;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_9__.isNullOrUndefined)(table.childWidgets)) {\n            table = table.combineWidget(this.owner.viewer);\n            var resizerPosition = tableResize.resizerPosition;\n            var paragraphInfo = { 'paragraph': null, 'offset': 0 };\n            if (action == 'RowResizing') {\n                var row = table.childWidgets[resizerPosition];\n                if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_9__.isNullOrUndefined)(row)) {\n                    row = this.modifiedProperties[0].rowFormat.ownerBase;\n                }\n                this.startIndex = this.owner.selectionModule.getPositionInfoForHeaderFooter(paragraphInfo, { position: 0, done: false }, row).position;\n                this.endIndex = this.startIndex + this.getRowLength(row);\n                var rowFormat = {};\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_9__.isNullOrUndefined)(this.owner.sfdtExportModule)) {\n                    this.owner.sfdtExportModule.assignRowFormat(rowFormat, row.rowFormat, 0);\n                }\n                this.format = JSON.stringify(rowFormat);\n                this.insertedText = _base_types__WEBPACK_IMPORTED_MODULE_12__.CONTROL_CHARACTERS.Row;\n                operations.push(this.getFormatOperation());\n            }\n            else {\n                var rightColumnIndex = resizerPosition;\n                var leftColumnIndex = resizerPosition - 1;\n                this.insertedText = _base_types__WEBPACK_IMPORTED_MODULE_12__.CONTROL_CHARACTERS.Cell;\n                var isResize = false;\n                if (!this.owner.selectionModule.isEmpty) {\n                    var cellwidget = tableResize.getTableCellWidget(tableResize.startingPoint);\n                    if (cellwidget && (this.owner.selectionModule.selectedWidgets.containsKey(cellwidget) || (cellwidget.previousWidget\n                        && this.owner.selectionModule.selectedWidgets.containsKey((cellwidget.previousWidget))))) {\n                        isResize = true;\n                        var selectedCells = this.owner.selectionModule.getSelectedCells();\n                        var startCell = selectedCells[0];\n                        var endCell = selectedCells[selectedCells.length - 1];\n                        var rowStartIndex = table.childWidgets.indexOf(startCell.ownerRow);\n                        var count = table.childWidgets.indexOf(endCell.ownerRow);\n                        var row = table.childWidgets[rowStartIndex];\n                        while (row && row.index <= count) {\n                            var cell = row.firstChild;\n                            while (cell) {\n                                if (cell.index == rightColumnIndex || cell.index == leftColumnIndex) {\n                                    var cellFormat = {};\n                                    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_9__.isNullOrUndefined)(this.owner.sfdtExportModule)) {\n                                        cellFormat = this.owner.sfdtExportModule.writeCellFormat(cell.cellFormat, 0);\n                                    }\n                                    this.startIndex = this.owner.selectionModule.getPositionInfoForHeaderFooter(paragraphInfo, { position: 0, done: false }, cell).position;\n                                    // Plus one for adding the cell index.\n                                    this.endIndex = this.startIndex + this.owner.selectionModule.calculateCellLength(cell) + 1;\n                                    this.type = \"CellFormat\";\n                                    this.format = JSON.stringify(cellFormat);\n                                    operations.push(this.getFormatOperation());\n                                }\n                                cell = cell.nextWidget;\n                            }\n                            var rowFormat = {};\n                            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_9__.isNullOrUndefined)(this.owner.sfdtExportModule)) {\n                                this.owner.sfdtExportModule.assignRowFormat(rowFormat, row.rowFormat, 0);\n                            }\n                            this.format = JSON.stringify(rowFormat);\n                            this.type = \"RowFormat\";\n                            this.startIndex = this.owner.selectionModule.getPositionInfoForHeaderFooter(paragraphInfo, { position: 0, done: false }, row).position;\n                            this.endIndex = this.startIndex + this.getRowLength(row);\n                            operations.push(this.getFormatOperation());\n                            row = row.getSplitWidgets().pop().nextRenderedWidget;\n                        }\n                    }\n                }\n                else {\n                    isResize = true;\n                    var row = table.firstChild;\n                    while (row) {\n                        var cell = row.firstChild;\n                        while (cell) {\n                            if (cell.index == rightColumnIndex || cell.index == leftColumnIndex) {\n                                var cellFormat = {};\n                                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_9__.isNullOrUndefined)(this.owner.sfdtExportModule)) {\n                                    cellFormat = this.owner.sfdtExportModule.writeCellFormat(cell.cellFormat, 0);\n                                }\n                                this.startIndex = this.owner.selectionModule.getPositionInfoForHeaderFooter(paragraphInfo, { position: 0, done: false }, cell).position;\n                                // Plus one for adding the cell index.\n                                this.endIndex = this.startIndex + this.owner.selectionModule.calculateCellLength(cell) + 1;\n                                this.type = \"CellFormat\";\n                                this.format = JSON.stringify(cellFormat);\n                                operations.push(this.getFormatOperation());\n                            }\n                            cell = cell.nextWidget;\n                        }\n                        var rowFormat = {};\n                        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_9__.isNullOrUndefined)(this.owner.sfdtExportModule)) {\n                            this.owner.sfdtExportModule.assignRowFormat(rowFormat, row.rowFormat, 0);\n                        }\n                        this.format = JSON.stringify(rowFormat);\n                        this.type = \"RowFormat\";\n                        this.startIndex = this.owner.selectionModule.getPositionInfoForHeaderFooter(paragraphInfo, { position: 0, done: false }, row).position;\n                        this.endIndex = this.startIndex + this.getRowLength(row);\n                        operations.push(this.getFormatOperation());\n                        row = row.getSplitWidgets().pop().nextRenderedWidget;\n                    }\n                }\n                if (isResize) {\n                    var tableFormat = {};\n                    tableFormat = this.owner.sfdtExportModule ? this.owner.sfdtExportModule.writeTableFormat(table.tableFormat, 0) : {};\n                    this.format = JSON.stringify(tableFormat);\n                    this.type = \"TableFormat\";\n                    this.startIndex = this.owner.selectionModule.getPositionInfoForHeaderFooter(paragraphInfo, { position: 0, done: false }, table).position;\n                    // this.startIndex will get the offset of table. So in get block length it will start from the table. So doing minus one.\n                    this.endIndex = this.startIndex + this.owner.selectionModule.getBlockLength(undefined, table, 0, { done: false }, true, undefined, undefined) - 1;\n                    operations.push(this.getFormatOperation());\n                }\n            }\n            this.owner.documentHelper.layout.reLayoutTable(table);\n        }\n        this.format = undefined;\n        return operations;\n    };\n    BaseHistoryInfo.prototype.getRowLength = function (row) {\n        var length = 0;\n        for (var i = 0; i < row.childWidgets.length; i++) {\n            // for collab editing for row amd cell we are adding plus one index to the offset. So it will calculate the widgets inside the cell one. So adding plus one offset.\n            length += this.owner.selectionModule.calculateCellLength(row.childWidgets[i]) + 1;\n        }\n        return length;\n    };\n    /**\n     * @private\n     * @returns {Operation}\n     */\n    BaseHistoryInfo.prototype.getDeleteOperation = function (action, setEndIndex, text) {\n        if (this.startIndex > this.endIndex) {\n            var temp = this.startIndex;\n            this.startIndex = this.endIndex;\n            this.endIndex = temp;\n        }\n        // if (action === 'Delete' && this.endIndex === this.startIndex) {\n        //     this.startIndex++;\n        //     this.endIndex++;\n        // }\n        if (action === 'Delete' && this.endIndex < this.startIndex) {\n            var start = this.startIndex;\n            this.startIndex = this.endIndex;\n            this.endIndex = start;\n        }\n        if (this.endIndex === this.startIndex && action !== 'DeleteBookmark' && action !== 'RemoveEditRange' && this.action !== 'InsertHyperlink') {\n            if (action === 'BackSpace' || action === 'Insert' || action === 'Enter') {\n                this.startIndex--;\n            }\n            else {\n                this.endIndex++;\n            }\n        }\n        if (action === 'DeleteHeaderFooter') {\n            this.startIndex = this.headerFooterStart;\n            this.endIndex = this.headerFooterEnd;\n        }\n        var selectionLength = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_9__.isNullOrUndefined)(text) ? text.length : this.endIndex - this.startIndex;\n        var removedText;\n        if (action === 'DeleteBookmark' || action === 'RemoveEditRange' || action === \"RemoveContentControl\") {\n            removedText = this.insertedText;\n            selectionLength = 1;\n        }\n        else if (action === 'DeleteHeaderFooter') {\n            removedText === '';\n        }\n        else if (action === 'DeleteTable' || action === 'DeleteRow' || action === 'DeleteColumn' || action === 'MergeCells' || action === 'RemoveRowTrack') {\n            removedText = this.insertedText;\n            if (action !== 'DeleteTable' && action !== 'DeleteRow') {\n                selectionLength = this.tableRelatedLength;\n            }\n        }\n        else {\n            removedText = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_9__.isNullOrUndefined)(text) ? text : this.getRemovedText();\n        }\n        if (action === 'Cut' && removedText[removedText.length - 1] === ' ' && selectionLength < removedText.length) {\n            selectionLength = removedText.length;\n        }\n        var operation = {\n            action: 'Delete',\n            offset: setEndIndex ? this.endIndex : this.startIndex,\n            text: removedText,\n            length: (action === 'Paste' || selectionLength === 0) ? removedText.length : selectionLength,\n            skipOperation: action === 'DeleteHeaderFooter' ? true : undefined,\n            markerData: this.markerData[0],\n        };\n        if (this.removedNodes[0] instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_6__.FootnoteElementBox) {\n            if (this.editorHistory.isUndoing && operation.length >= 3) {\n                operation.length += 1;\n            }\n            else {\n                var element = this.removedNodes[0];\n                var lastPara = element.bodyWidget.lastChild;\n                var positionInfo = { position: 0, done: false };\n                var paragraphInfo = { paragraph: lastPara, offset: this.owner.selectionModule.getParagraphLength(lastPara) + 1 };\n                this.owner.selectionModule.getPositionInfoForBodyContent(paragraphInfo, positionInfo, element.bodyWidget.firstChild);\n                operation.length += positionInfo.position;\n            }\n        }\n        return operation;\n    };\n    /**\n     * @private\n     * @returns {Operation}\n     */\n    BaseHistoryInfo.prototype.getInsertOperation = function (action, setEndIndex, skipMarkerData) {\n        var insertedText = action === 'Enter' ? '\\n' : this.insertedText;\n        var length;\n        if (action === 'InsertTable' || action === 'InsertTableBelow' || action === 'InsertRowAbove' || action === 'InsertRowBelow'\n            || action === 'InsertColumnLeft' || action === 'InsertColumnRight' || action === 'MergeCells' || action === 'RemoveRowTrack') {\n            length = this.tableRelatedLength;\n            if (this.action === 'InsertTable' || this.action === 'InsertTableBelow') {\n                this.insertIndex = this.startIndex;\n            }\n        }\n        else {\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_9__.isNullOrUndefined)(insertedText)) {\n                length = insertedText.length;\n            }\n        }\n        var operation = {\n            action: 'Insert',\n            offset: setEndIndex ? this.endIndex : this.insertIndex,\n            text: insertedText,\n            type: this.type,\n            length: length,\n            skipOperation: false,\n            imageData: this.insertedData,\n            format: this.format,\n        };\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_9__.isNullOrUndefined)(this.markerData) && !skipMarkerData) {\n            operation.markerData = this.markerData.pop();\n        }\n        if (this.insertedElement instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_6__.FootnoteElementBox) {\n            operation.length += this.getFootNoteLength();\n        }\n        return operation;\n    };\n    BaseHistoryInfo.prototype.getFootNoteLength = function () {\n        var lastPara = this.insertedElement.bodyWidget.lastChild;\n        var positionInfo = { position: 0, done: false };\n        var paragraphInfo = { paragraph: lastPara, offset: this.owner.selectionModule.getParagraphLength(lastPara) + 1 };\n        this.owner.selectionModule.getPositionInfoForBodyContent(paragraphInfo, positionInfo, this.insertedElement.bodyWidget.firstChild);\n        return positionInfo.position;\n    };\n    BaseHistoryInfo.prototype.getUndoRedoOperation = function (action, isTableInsert, issamePosition) {\n        var table;\n        var lastPara;\n        var startLine;\n        var lastLine;\n        var endoffset;\n        var startOffset;\n        var startPosition = this.owner.selectionModule.getTextPosBasedOnLogicalIndex(this.collabStart);\n        var endPosition = this.owner.selectionModule.getTextPosBasedOnLogicalIndex(this.collabEnd);\n        var length = 0;\n        if (isTableInsert) {\n            if (action === 'BackSpace' || action === 'Delete' || action === 'Insert') {\n                table = startPosition.paragraph.associatedCell.ownerTable.combineWidget(this.owner.viewer);\n                var paragraphInfo = { 'paragraph': null, 'offset': 0 };\n                this.startIndex = this.owner.selectionModule.getPositionInfoForHeaderFooter(paragraphInfo, { position: 0, done: false }, table).position;\n                if (endPosition.currentWidget.paragraph.isInsideTable) {\n                    lastPara = this.documentHelper.getLastParagraphBlock(endPosition.currentWidget.paragraph.associatedCell.ownerTable);\n                    lastLine = lastPara.lastChild;\n                    endoffset = lastPara.lastChild.getEndOffset();\n                }\n                else {\n                    lastLine = endPosition.currentWidget;\n                    endoffset = endPosition.offset;\n                }\n            }\n            else {\n                table = this.owner.selectionModule.start.paragraph.associatedCell.ownerTable.combineWidget(this.owner.viewer);\n                lastPara = this.documentHelper.getLastParagraphBlock(table);\n                lastLine = lastPara.lastChild;\n                endoffset = lastPara.lastChild.getEndOffset();\n            }\n            startLine = this.documentHelper.getFirstParagraphBlock(table).firstChild;\n            startOffset = 0;\n            length = this.owner.selectionModule.getBlockLength(undefined, table, 0, { done: false }, true, undefined, undefined);\n        }\n        else {\n            startLine = startPosition.currentWidget;\n            lastLine = endPosition.currentWidget;\n            endoffset = issamePosition ? (action == 'BackSpace' ? endPosition.offset : endPosition.offset + 1) : endPosition.offset;\n            startOffset = issamePosition ? (action === 'BackSpace' ? startPosition.offset - 1 : startPosition.offset) : startPosition.offset;\n            var startIndex = this.owner.selectionModule.getAbsolutePositionFromRelativePosition(this.collabStart);\n            var endIndex = this.owner.selectionModule.getAbsolutePositionFromRelativePosition(this.collabEnd);\n            length = endIndex - startIndex;\n        }\n        this.pasteContent = this.owner.sfdtExportModule.write((this.owner.documentEditorSettings.optimizeSfdt ? 1 : 0), startLine, startOffset, lastLine, endoffset, false, true);\n        return this.getPasteOpertion(this.pasteContent, length);\n    };\n    BaseHistoryInfo.prototype.getPasteOpertion = function (pasteContent, length) {\n        var pasteOperation = {\n            action: 'Insert',\n            offset: this.startIndex,\n            length: length > 0 ? length : 1,\n            pasteContent: JSON.stringify(pasteContent),\n            type: 'Paste'\n        };\n        if (this.owner.enableTrackChanges) {\n            pasteOperation.markerData = { isSkipTracking: true };\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_9__.isNullOrUndefined)(this.insertedElement) && this.insertedElement instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_6__.FootnoteElementBox) {\n            pasteOperation.length += this.getFootNoteLength();\n        }\n        return pasteOperation;\n    };\n    // Builds the Table and Row operation.\n    BaseHistoryInfo.prototype.buildTableRowCellOperation = function (action) {\n        var operations = [];\n        if (this.insertedNodes.length > 0) {\n            if (this.insertedNodes[0] instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_6__.TableRowWidget) {\n                var row = this.insertedNodes[0];\n                var paragraphInfo = { 'paragraph': null, 'offset': 0 };\n                this.insertIndex = this.owner.selectionModule.getPositionInfoForHeaderFooter(paragraphInfo, { position: 0, done: false }, this.insertedNodes[0]).position;\n                var length_3 = this.insertedNodes.length;\n                if (row.ownerTable.childWidgets.length === row.indexInOwner + length_3) {\n                    this.insertIndex -= 1;\n                }\n            }\n            if (this.insertedNodes.length > 1 && action === 'InsertTable') {\n                var enterOperation = this.getInsertOperation('Enter', false, true);\n                if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_9__.isNullOrUndefined)(enterOperation.markerData)) {\n                    enterOperation.markerData = {};\n                }\n                enterOperation.markerData.isSkipTracking = true;\n                operations.push(enterOperation);\n            }\n            for (var i = 0; i < this.insertedNodes.length; i++) {\n                if (this.insertedNodes[i] instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_6__.TableWidget) {\n                    var tableWidget = this.insertedNodes[i].combineWidget(this.owner.viewer);\n                    this.tableRelatedLength = action === 'InsertTableBelow' ? 0 : 1;\n                    this.insertedText = _base_types__WEBPACK_IMPORTED_MODULE_12__.CONTROL_CHARACTERS.Table;\n                    var tableFormat = this.owner.sfdtExportModule ? this.owner.sfdtExportModule.writeTableFormat(tableWidget.tableFormat, 0) : {};\n                    this.format = JSON.stringify(tableFormat);\n                    operations.push(this.getInsertOperation(action, false, true));\n                    for (var j = 0; j < tableWidget.childWidgets.length; j++) {\n                        var row = tableWidget.childWidgets[j];\n                        operations.push(this.buildRowOperation(row, action));\n                        for (var k = 0; k < row.childWidgets.length; k++) {\n                            var cell = row.childWidgets[k];\n                            var cellOperations = this.buildCellOperation(cell, action, true);\n                            for (var l = 0; l < cellOperations.length; l++) {\n                                operations.push(cellOperations[l]);\n                            }\n                        }\n                    }\n                }\n                else if (this.insertedNodes[i] instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_6__.TableRowWidget) {\n                    var row = this.insertedNodes[i];\n                    operations.push(this.buildRowOperation(row, action));\n                    for (var j = 0; j < row.childWidgets.length; j++) {\n                        var cell = row.childWidgets[j];\n                        var cellOperations = this.buildCellOperation(cell, action, true);\n                        for (var l = 0; l < cellOperations.length; l++) {\n                            operations.push(cellOperations[l]);\n                        }\n                    }\n                }\n                else if (this.insertedNodes[i] instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_6__.TableCellWidget) {\n                    var cell = this.insertedNodes[i];\n                    var table = cell.ownerTable.combineWidget(this.owner.viewer);\n                    var num = 0;\n                    for (var j = 0; j < table.childWidgets.length; j++) {\n                        i = this.insertedNodes.length;\n                        var row = table.childWidgets[j];\n                        for (var k = 0; k < row.childWidgets.length; k++) {\n                            var cell_1 = row.childWidgets[k];\n                            var paragraphInfo = { 'paragraph': null, 'offset': 0 };\n                            if (this.insertedNodes.indexOf(cell_1) !== -1) {\n                                var offset = this.owner.selectionModule.getPositionInfoForHeaderFooter(paragraphInfo, { position: 0, done: false }, cell_1).position;\n                                this.insertIndex = offset - num;\n                                if (cell_1.ownerTable.childWidgets.length === cell_1.ownerRow.indexInOwner + 1) {\n                                    if (this.insertedNodes.indexOf(row.childWidgets[row.childWidgets.length - 1]) !== -1) {\n                                        this.insertIndex -= 1;\n                                    }\n                                }\n                                var cellOperations = this.buildCellOperation(cell_1, action, true);\n                                for (var l = 0; l < cellOperations.length; l++) {\n                                    operations.push(cellOperations[l]);\n                                }\n                                num += 2;\n                            }\n                            else {\n                                var offset = this.owner.selectionModule.getPositionInfoForHeaderFooter(paragraphInfo, { position: 0, done: false }, cell_1).position;\n                                this.insertIndex = offset - num;\n                                var cellOperations = this.buildCellOperation(cell_1, action, false);\n                                for (var l = 0; l < cellOperations.length; l++) {\n                                    operations.push(cellOperations[l]);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            this.insertedNodes = [];\n        }\n        return operations;\n    };\n    BaseHistoryInfo.prototype.assignRevisionData = function (type, author, date, revisionId) {\n        var markerData = {\n            revisionType: type,\n            author: author,\n            date: date,\n            revisionId: revisionId\n        };\n        return markerData;\n    };\n    BaseHistoryInfo.prototype.createAcceptRejectOperation = function (action) {\n        var start = this.owner.selectionModule.start;\n        if (!start.paragraph.isInsideTable) {\n            return;\n        }\n        var row = start.paragraph.associatedCell.ownerRow;\n        var length = 0;\n        this.insertedText = _base_types__WEBPACK_IMPORTED_MODULE_12__.CONTROL_CHARACTERS.Row;\n        if (row.rowFormat.revisions.length > 0) {\n            var revision = row.rowFormat.revisions[0];\n            var isAcceptOrReject = void 0;\n            if (action === 'Accept Change') {\n                isAcceptOrReject = 'Accept';\n            }\n            else if (action === 'Reject Change') {\n                isAcceptOrReject = 'Reject';\n            }\n            this.markerData.push(this.owner.editorModule.getMarkerData(undefined, undefined, revision, isAcceptOrReject));\n        }\n        var paragraphInfo = { 'paragraph': null, 'offset': 0 };\n        var offset = this.owner.selectionModule.getPositionInfoForHeaderFooter(paragraphInfo, { position: 0, done: false }, row).position;\n        if (row.rowFormat.revisions.length > 0) {\n            if (row.rowFormat.revisions[0].revisionType === 'Insertion') {\n                if (action === 'Accept Change') {\n                    this.startIndex = offset;\n                    this.tableRelatedLength = 1;\n                    this.cellOperation.push(this.getFormatOperation(undefined, 'RemoveRowTrack'));\n                }\n                else if (action === 'Reject Change') {\n                    this.startIndex = offset;\n                    for (var j = 0; j < row.childWidgets.length; j++) {\n                        length += this.owner.selectionModule.calculateCellLength(row.childWidgets[j]) + 1;\n                    }\n                    this.tableRelatedLength = length;\n                    this.cellOperation.push(this.getDeleteOperation('RemoveRowTrack'));\n                }\n            }\n            else if (row.rowFormat.revisions[0].revisionType === 'Deletion') {\n                if (action === 'Accept Change') {\n                    this.startIndex = offset;\n                    // this.tableRelatedLength = 0;\n                    for (var j = 0; j < row.childWidgets.length; j++) {\n                        length += this.owner.selectionModule.calculateCellLength(row.childWidgets[j]) + 1;\n                    }\n                    this.tableRelatedLength = length;\n                    this.cellOperation.push(this.getDeleteOperation('RemoveRowTrack'));\n                }\n                else if (action === 'Reject Change') {\n                    this.startIndex = offset;\n                    for (var j = 0; j < row.childWidgets.length; j++) {\n                        length += this.owner.selectionModule.calculateCellLength(row.childWidgets[j]) + 1;\n                    }\n                    this.tableRelatedLength = length;\n                    this.cellOperation.push(this.getFormatOperation(undefined, 'RemoveRowTrack'));\n                }\n            }\n            this.markerData = [];\n        }\n    };\n    BaseHistoryInfo.prototype.buildRowOperation = function (row, action) {\n        this.insertedText = _base_types__WEBPACK_IMPORTED_MODULE_12__.CONTROL_CHARACTERS.Row;\n        var rowFormat = {};\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_9__.isNullOrUndefined)(this.owner.sfdtExportModule)) {\n            this.owner.sfdtExportModule.assignRowFormat(rowFormat, row.rowFormat, 0);\n        }\n        this.format = JSON.stringify(rowFormat);\n        if (action === 'InsertTable' && row.rowFormat.revisions.length > 0) {\n            var revision = row.rowFormat.revisions[row.rowFormat.revisions.length - 1];\n            var lastRevision = this.markerData[this.markerData.length - 1];\n            if (!(!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_9__.isNullOrUndefined)(lastRevision) && lastRevision.revisionId === revision.revisionID)) {\n                this.markerData.push(this.owner.editorModule.getMarkerData(undefined, undefined, revision));\n            }\n        }\n        this.tableRelatedLength = 1;\n        var operation = this.getInsertOperation(action);\n        this.format = undefined;\n        return operation;\n    };\n    /**\n     * @private\n     */\n    BaseHistoryInfo.prototype.buildRowOperationForTrackChanges = function (row, action) {\n        var paragraphInfo = { 'paragraph': null, 'offset': 0 };\n        var length = 0;\n        var offset = this.owner.selectionModule.getPositionInfoForHeaderFooter(paragraphInfo, { position: 0, done: false }, row).position;\n        this.startIndex = offset;\n        for (var j = 0; j < row.childWidgets.length; j++) {\n            length += this.owner.selectionModule.calculateCellLength(row.childWidgets[j]) + 1;\n        }\n        this.tableRelatedLength = length;\n        this.insertedText = _base_types__WEBPACK_IMPORTED_MODULE_12__.CONTROL_CHARACTERS.Row;\n        var operation = this.getFormatOperation(undefined, action);\n        this.insertedText = '';\n        return operation;\n    };\n    BaseHistoryInfo.prototype.buildCellOperation = function (cell, action, isCellInserted) {\n        var operations = [];\n        this.tableRelatedLength = isCellInserted ? 1 : 0;\n        this.insertedText = _base_types__WEBPACK_IMPORTED_MODULE_12__.CONTROL_CHARACTERS.Cell;\n        this.type = 'CellFormat';\n        var cellFormat = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_9__.isNullOrUndefined)(this.owner.sfdtExportModule) ? this.owner.sfdtExportModule.writeCellFormat(cell.cellFormat, 0) : {};\n        this.format = JSON.stringify(cellFormat);\n        operations.push(this.getInsertOperation(action, false, true));\n        if (!isCellInserted) {\n            return operations;\n        }\n        this.tableRelatedLength = isCellInserted ? 1 : 0;\n        this.type = 'ParagraphFormat';\n        var paragraphFormat = this.owner.sfdtExportModule.writeParagraphFormat(cell.childWidgets[0].paragraphFormat, 0, true);\n        this.format = JSON.stringify(paragraphFormat);\n        operations.push(this.getInsertOperation(action, false, true));\n        this.tableRelatedLength = 0;\n        this.type = 'CharacterFormat';\n        var characterData = this.owner.sfdtExportModule.writeCharacterFormat(cell.childWidgets[0].characterFormat, 0, true);\n        this.format = JSON.stringify(characterData);\n        operations.push(this.getInsertOperation(action, false, true));\n        this.format = undefined;\n        this.type = undefined;\n        return operations;\n    };\n    BaseHistoryInfo.prototype.deleteColumnOperation = function (action) {\n        var startCell = this.owner.editorModule.getOwnerCell(this.owner.selectionModule.isForward);\n        var endCell = this.owner.editorModule.getOwnerCell(!this.owner.selectionModule.isForward);\n        var table = startCell.ownerTable.combineWidget(this.owner.viewer);\n        var deleteCells = [];\n        var rowStartIndex = 0;\n        var count = 0;\n        if (action === 'DeleteColumn') {\n            deleteCells = table.getColumnCellsForSelection(startCell, endCell);\n        }\n        else {\n            var start = this.owner.selectionModule.getCellLeft(startCell.ownerRow, startCell);\n            var end = start + startCell.cellFormat.cellWidth;\n            var endCellLeft = this.owner.selectionModule.getCellLeft(endCell.ownerRow, endCell);\n            var endCellRight = endCellLeft + endCell.cellFormat.cellWidth;\n            var cellInfo = this.owner.editorModule.updateSelectedCellsInTable(start, end, endCellLeft, endCellRight);\n            start = cellInfo.start;\n            end = cellInfo.end;\n            count = table.childWidgets.indexOf(endCell.ownerRow);\n            rowStartIndex = table.childWidgets.indexOf(startCell.ownerRow);\n            for (var i = rowStartIndex; i <= count; i++) {\n                var row = table.childWidgets[i];\n                for (var j = 0; j < row.childWidgets.length; j++) {\n                    var cell = row.childWidgets[j];\n                    var cellStart = this.owner.selectionModule.getCellLeft(row, cell);\n                    if (_editor_editor_helper__WEBPACK_IMPORTED_MODULE_11__.HelperMethods.round(start, 2) <= _editor_editor_helper__WEBPACK_IMPORTED_MODULE_11__.HelperMethods.round(cellStart, 2)\n                        && _editor_editor_helper__WEBPACK_IMPORTED_MODULE_11__.HelperMethods.round(cellStart, 2) < _editor_editor_helper__WEBPACK_IMPORTED_MODULE_11__.HelperMethods.round(end, 2)) {\n                        deleteCells.push(cell);\n                    }\n                }\n            }\n        }\n        var isRowSelect = this.owner.selectionModule.isRowSelect() && rowStartIndex != count;\n        for (var i = 0; i < deleteCells.length; i++) {\n            if (action === 'ClearCells') {\n                this.deleteCell(action, deleteCells[i], false);\n            }\n            else if (action === 'MergeCells') {\n                if (i !== 0) {\n                    var isRowOffset = isRowSelect && (!deleteCells[0].ownerRow.equals(deleteCells[i].ownerRow)) && deleteCells[i].index == 0;\n                    this.deleteCell(action, deleteCells[i], isRowOffset);\n                }\n            }\n            else {\n                this.deleteCell('DeleteColumn', deleteCells[i], false);\n            }\n        }\n        if (action === 'MergeCells') {\n            this.cellOperation.reverse();\n            this.deleteCell('ClearCells', deleteCells[0], false);\n        }\n    };\n    BaseHistoryInfo.prototype.getPasteMergeOperation = function () {\n        var cell = this.owner.selectionModule.start.paragraph.associatedCell;\n        var paragraphInfo = { 'paragraph': null, 'offset': 0 };\n        var offset = this.owner.selectionModule.getPositionInfoForHeaderFooter(paragraphInfo, { position: 0, done: false }, cell).position;\n        var length = this.owner.selectionModule.calculateCellLength(cell) - 1;\n        var firstParagraph = this.owner.selectionModule.getFirstParagraph(cell);\n        var lastParagraph = this.owner.selectionModule.getLastParagraph(cell);\n        var startline = firstParagraph.firstChild;\n        var lastLine = lastParagraph.lastChild;\n        this.pasteContent = this.owner.sfdtExportModule.write((this.owner.documentEditorSettings.optimizeSfdt ? 1 : 0), startline, 0, lastLine, lastLine.getEndOffset(), false, true);\n        this.startIndex = offset + 1;\n        var pasteOperation = {\n            action: 'Insert',\n            offset: this.startIndex,\n            length: length,\n            pasteContent: JSON.stringify(this.pasteContent),\n            type: 'Paste'\n        };\n        this.insertedText = _base_types__WEBPACK_IMPORTED_MODULE_12__.CONTROL_CHARACTERS.Cell;\n        this.type = 'CellFormat';\n        this.startIndex = offset;\n        this.endIndex = offset;\n        this.format = JSON.stringify(this.owner.sfdtExportModule.writeCellFormat(cell.cellFormat, 0));\n        return pasteOperation;\n    };\n    BaseHistoryInfo.prototype.deleteCell = function (action, cell, isRowDelete) {\n        this.tableRelatedLength = this.owner.selectionModule.calculateCellLength(cell) + 1;\n        var paragraphInfo = { 'paragraph': null, 'offset': 0 };\n        this.startIndex = this.owner.selectionModule.getPositionInfoForHeaderFooter(paragraphInfo, { position: 0, done: false }, cell).position;\n        this.startIndex -= isRowDelete ? 1 : 0;\n        this.tableRelatedLength += isRowDelete ? 1 : 0;\n        if (!this.owner.enableTrackChanges) {\n            if (action === 'ClearCells') {\n                var block = cell.childWidgets[0];\n                if (cell.childWidgets.length === 1 && block instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_6__.ParagraphWidget && block.isEmpty()) {\n                    return;\n                }\n                this.endIndex = this.startIndex + this.tableRelatedLength - 1;\n                this.startIndex += 1;\n                this.cellOperation.push(this.getDeleteOperation('ClearCells'));\n            }\n            else {\n                this.cellOperation.push(this.getDeleteOperation('DeleteColumn'));\n            }\n        }\n    };\n    /**\n     * @private\n     * @returns {Operation}\n     */\n    BaseHistoryInfo.prototype.getFormatOperation = function (element, action, skipIncrement) {\n        if (this.startIndex > this.endIndex) {\n            var temp = this.startIndex;\n            this.startIndex = this.endIndex;\n            this.endIndex = temp;\n        }\n        var length = 0;\n        if (this.endIndex === this.startIndex && !skipIncrement && this.action !== 'DeleteBookmark' && this.action !== 'RemoveEditRange' && this.action !== 'InsertHyperlink') {\n            if (this.action === 'BackSpace') {\n                this.startIndex--;\n            }\n            else {\n                this.endIndex++;\n            }\n        }\n        if (action === 'RemoveRowTrack') {\n            length = this.tableRelatedLength;\n        }\n        else if (action === 'RowResizing' || action === 'CellResizing' || action === 'ImageResizing') {\n            length = this.insertedText.length;\n        }\n        else {\n            length = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_9__.isNullOrUndefined)(element) ? element.length : this.endIndex - this.startIndex;\n        }\n        var formatOperation = {\n            action: 'Format',\n            offset: this.startIndex,\n            length: length,\n            markerData: this.markerData[this.markerData.length - 1],\n            imageData: this.insertedData,\n            text: this.insertedText,\n            format: this.format\n        };\n        this.markerData.pop();\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_9__.isNullOrUndefined)(action)) {\n            formatOperation.type = action.toString();\n        }\n        else {\n            formatOperation.type = this.type;\n        }\n        return formatOperation;\n    };\n    BaseHistoryInfo.prototype.getRemovedText = function (element) {\n        var text = '';\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_9__.isNullOrUndefined)(element)) {\n            var node = element;\n            if (node instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_6__.ParagraphWidget) {\n                text += this.getParagraphText(node);\n            }\n            else if (node instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_6__.ElementBox) {\n                if (node instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_6__.TextElementBox) {\n                    text += node.text;\n                }\n                else {\n                    if (!(node instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_6__.ListTextElementBox)) {\n                        text += _viewer_page__WEBPACK_IMPORTED_MODULE_6__.ElementBox.objectCharacter;\n                    }\n                }\n            }\n            else if (node instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_6__.TableWidget) {\n                text += this.getTableText(node);\n            }\n            else if (node instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_6__.TableRowWidget) {\n                text += this.getRowText(node);\n            }\n        }\n        else {\n            for (var i = this.removedNodes.length - 1; i >= 0; i--) {\n                var node = this.removedNodes[i];\n                if (node instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_6__.ParagraphWidget) {\n                    text += this.getParagraphText(node);\n                }\n                else if (node instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_6__.ElementBox) {\n                    if (node instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_6__.TextElementBox) {\n                        text += node.text;\n                    }\n                    else {\n                        if (!(node instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_6__.ListTextElementBox)) {\n                            text += _viewer_page__WEBPACK_IMPORTED_MODULE_6__.ElementBox.objectCharacter;\n                        }\n                    }\n                }\n                else if (node instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_6__.TableWidget) {\n                    text += this.getTableText(node);\n                }\n                else if (node instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_6__.TableRowWidget) {\n                    text += this.getRowText(node);\n                }\n            }\n        }\n        return text;\n    };\n    BaseHistoryInfo.prototype.getRevisionOperation = function (revision) {\n        if (revision.revisionType === 'Insertion') {\n            // Accept operation - Insertion\n            this.markerData.push(this.owner.editorModule.getMarkerData(undefined, undefined, revision, 'Accept'));\n            return this.getFormatOperation();\n        }\n        else if (revision.revisionType === 'Deletion') {\n            // Reject operation - Deletion\n            this.markerData.push(this.owner.editorModule.getMarkerData(undefined, undefined, revision, 'Reject'));\n            return this.getFormatOperation();\n        }\n        return {};\n    };\n    BaseHistoryInfo.prototype.getRemovedFieldCode = function () {\n        var fieldCode = '';\n        var isStarted = false;\n        for (var i = this.removedNodes.length - 1; i >= 0; i--) {\n            var node = this.removedNodes[i];\n            if (node instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_6__.ElementBox) {\n                if (node instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_6__.FieldElementBox && node.fieldType === 0) {\n                    isStarted = true;\n                }\n                if (node && node instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_6__.TextElementBox) {\n                    if (isStarted) {\n                        fieldCode += node.text;\n                    }\n                }\n                if (node instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_6__.FieldElementBox\n                    && (node.fieldType === 2 || node.fieldType === 1)) {\n                    return fieldCode;\n                }\n            }\n            else if (node instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_6__.ParagraphWidget) {\n                for (var i_2 = 0; i_2 < node.childWidgets.length; i_2++) {\n                    var lineWidget = node.childWidgets[i_2];\n                    for (var j = 0; j < lineWidget.children.length; j++) {\n                        var element = lineWidget.children[j];\n                        if (element instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_6__.FieldElementBox && element.fieldType === 0) {\n                            isStarted = true;\n                        }\n                        if (element instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_6__.TextElementBox) {\n                            if (isStarted) {\n                                fieldCode += element.text;\n                            }\n                        }\n                        if (element instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_6__.FieldElementBox\n                            && (element.fieldType === 2 || element.fieldType === 1)) {\n                            return fieldCode;\n                        }\n                    }\n                }\n            }\n        }\n        return undefined;\n    };\n    //  Add for loop to iterate paragraph child elements and get text \n    BaseHistoryInfo.prototype.getParagraphText = function (paragraph) {\n        var text = '';\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_9__.isNullOrUndefined)(paragraph) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_9__.isNullOrUndefined)(paragraph.childWidgets)) {\n            for (var i = 0; i < paragraph.childWidgets.length; i++) {\n                var line = paragraph.childWidgets[i];\n                for (var j = 0; j < line.children.length; j++) {\n                    if (line.children[j] instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_6__.ListTextElementBox) {\n                        continue;\n                    }\n                    if (line.children[j] instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_6__.TextElementBox) {\n                        text += line.children[j].text;\n                    }\n                    else {\n                        text += _viewer_page__WEBPACK_IMPORTED_MODULE_6__.ElementBox.objectCharacter;\n                    }\n                }\n            }\n            return text + '\\n';\n        }\n        return text;\n    };\n    //  Add for loop to iterate table child elements and get text\n    BaseHistoryInfo.prototype.getTableText = function (table) {\n        var text = _base_types__WEBPACK_IMPORTED_MODULE_12__.CONTROL_CHARACTERS.Table;\n        for (var i = 0; i < table.childWidgets.length; i++) {\n            var row = table.childWidgets[i];\n            text += this.getRowText(row);\n        }\n        return text;\n    };\n    // Add for loop to iterate table row child elements and get text\n    BaseHistoryInfo.prototype.getRowText = function (row) {\n        var text = _base_types__WEBPACK_IMPORTED_MODULE_12__.CONTROL_CHARACTERS.Row;\n        for (var j = 0; j < row.childWidgets.length; j++) {\n            var cell = row.childWidgets[j];\n            for (var k = 0; k < cell.childWidgets.length; k++) {\n                text += _base_types__WEBPACK_IMPORTED_MODULE_12__.CONTROL_CHARACTERS.Cell;\n                var block = cell.childWidgets[k];\n                if (block instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_6__.ParagraphWidget) {\n                    text += this.getParagraphText(block);\n                }\n                else {\n                    text += this.getTableText(block);\n                }\n            }\n        }\n        return text;\n    };\n    /**\n     * @private\n     * @returns {Operation}\n     */\n    BaseHistoryInfo.prototype.getCommentOperation = function (operation, action, comment) {\n        if (action === 'InsertInline' || action === 'RemoveInline') {\n            var commentRangeElement = action === 'RemoveInline' ? this.removedNodes[0] : this.insertedElement;\n            var commentElement = commentRangeElement.comment;\n            operation.text = commentRangeElement.commentType === 0 ? _base_types__WEBPACK_IMPORTED_MODULE_12__.CONTROL_CHARACTERS.Marker_Start : _base_types__WEBPACK_IMPORTED_MODULE_12__.CONTROL_CHARACTERS.Marker_End;\n            operation.markerData = {\n                type: 'Comment',\n                commentId: commentRangeElement.commentId,\n                ownerCommentId: commentElement.isReply ? commentElement.ownerComment.commentId : undefined\n            };\n        }\n        else if (action === 'InsertCommentWidget' || action === 'DeleteCommentWidget') {\n            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_9__.isNullOrUndefined)(comment)) {\n                comment = this.removedNodes[0];\n            }\n            operation.length = 1;\n            operation.action = 'Format';\n            operation.offset = this.startIndex < this.endIndex ? this.endIndex : this.startIndex;\n            // To get the offset of end comment element box we are seperating minus one to it.\n            operation.offset -= 1;\n            operation.text = _base_types__WEBPACK_IMPORTED_MODULE_12__.CONTROL_CHARACTERS.Marker_Start + _base_types__WEBPACK_IMPORTED_MODULE_12__.CONTROL_CHARACTERS.Marker_End;\n            operation.markerData = {\n                type: 'Comment',\n                commentId: comment.commentId,\n                author: comment.author,\n                date: comment.date,\n                commentIndex: comment.isReply ? comment.ownerComment.replyComments.indexOf(comment) : this.owner.documentHelper.comments.indexOf(comment),\n                initial: comment.initial,\n                done: comment.isResolved,\n                text: comment.text,\n                isReply: comment.isReply\n            };\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_9__.isNullOrUndefined)(comment.ownerComment)) {\n                // Get the position of the comment owner offset\n                var position = this.owner.selection.getElementPosition(comment.ownerComment.commentEnd, true).startPosition;\n                operation.offset = this.owner.selectionModule.getAbsolutePositionFromRelativePosition(position);\n            }\n            if (action === 'DeleteCommentWidget') {\n                operation.offset = this.startIndex < this.endIndex ? this.endIndex : this.startIndex;\n                // To get the offset of end comment element box we are seperating minus one to it. \n                operation.offset -= 1;\n                operation.markerData.commentAction = 'remove';\n            }\n            else if (action === 'InsertCommentWidget') {\n                operation.markerData.commentAction = 'add';\n            }\n        }\n        else if (action === 'ResolveComment') {\n            operation.action = 'Format';\n            operation.length = 1;\n            operation.text = _base_types__WEBPACK_IMPORTED_MODULE_12__.CONTROL_CHARACTERS.Marker_Start + _base_types__WEBPACK_IMPORTED_MODULE_12__.CONTROL_CHARACTERS.Marker_End;\n            operation.offset = this.startIndex < this.endIndex ? this.endIndex : this.startIndex;\n            // To get the offset of end comment element box we are seperating minus one to it.\n            operation.offset -= 1;\n            operation.markerData = {\n                type: 'Comment',\n                commentId: comment.commentId,\n                done: comment.isResolved\n            };\n        }\n        else if (action === 'EditComment') {\n            operation.action = 'Format';\n            operation.length = 1;\n            operation.text = _base_types__WEBPACK_IMPORTED_MODULE_12__.CONTROL_CHARACTERS.Marker_Start + _base_types__WEBPACK_IMPORTED_MODULE_12__.CONTROL_CHARACTERS.Marker_End;\n            operation.offset = this.startIndex < this.endIndex ? this.endIndex : this.startIndex;\n            // To get the offset of end comment element box we are seperating minus one to it.\n            operation.offset -= 1;\n            operation.markerData = {\n                type: 'Comment',\n                text: comment.text,\n            };\n        }\n        return operation;\n    };\n    /**\n     * @private\n     */\n    BaseHistoryInfo.prototype.getDeleteCommentOperation = function (modifiedActions, operations) {\n        for (var i = 0; i < modifiedActions.length; i++) {\n            var currentHistory = modifiedActions[i];\n            if (currentHistory instanceof _index__WEBPACK_IMPORTED_MODULE_4__.HistoryInfo && (currentHistory.action === 'DeleteComment')) {\n                this.getDeleteCommentOperation(currentHistory.modifiedActions, operations);\n            }\n            else {\n                var operation = currentHistory.getDeleteOperation(currentHistory.action);\n                currentHistory.getCommentOperation(operation, currentHistory.action);\n                if (currentHistory.action === 'DeleteCommentWidget' && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_9__.isNullOrUndefined)(modifiedActions[i + 1])) {\n                    // For update operation we need end offset. So taking the offset from end remove inline history.\n                    var updateHistory = modifiedActions[i + 1];\n                    operation.offset = updateHistory.startIndex < updateHistory.endIndex ? updateHistory.startIndex : updateHistory.endIndex;\n                }\n                operations.push(operation);\n            }\n        }\n    };\n    /**\n     * @private\n     * @returns {Operation}\n     */\n    BaseHistoryInfo.prototype.buildFormatOperation = function (action, ischarFormat) {\n        var operations = [];\n        if ((action === 'ApplyStyle' || action === 'StyleName') && this.insertedFormat instanceof _format_index__WEBPACK_IMPORTED_MODULE_10__.WParagraphStyle) {\n            this.insertedFormat = this.insertedFormat.name;\n            this.type = 'ParagraphFormat';\n            this.createParagraphFormat(action);\n        }\n        else {\n            if (action === 'ApplyStyle' || action === 'StyleName') {\n                if (this.insertedFormat instanceof _format_character_format__WEBPACK_IMPORTED_MODULE_2__.WCharacterFormat && this.insertedFormat.baseCharStyle) {\n                    this.insertedFormat = this.insertedFormat.baseCharStyle.name;\n                }\n                else {\n                    this.insertedFormat = this.insertedFormat.name;\n                }\n            }\n            if (ischarFormat) {\n                this.type = 'CharacterFormat';\n                this.createCharacterFormat(action);\n            }\n            else {\n                this.type = action == 'ContinueNumbering' ? 'ContinueNumbering' : 'ParagraphFormat';\n                this.createParagraphFormat(action);\n            }\n        }\n        operations = this.getSelectedCellOperation(action, ischarFormat);\n        this.format = undefined;\n        return operations;\n    };\n    /**\n     * @private\n     * @returns {Operation}\n     */\n    BaseHistoryInfo.prototype.getSelectedCellOperation = function (action, ischarFormat, isBorder, isShading, isCell) {\n        var operations = [];\n        var start = this.owner.selectionModule.start;\n        var end = this.owner.selectionModule.end;\n        if (start.paragraph.isInsideTable && end.paragraph.isInsideTable && (start.paragraph.associatedCell.ownerTable.equals(end.paragraph.associatedCell.ownerTable)\n            && this.owner.selectionModule.isCellSelected(start.paragraph.associatedCell, start, end))) {\n            var selectCells = this.owner.selectionModule.getSelectedCells();\n            for (var i = 0; i < selectCells.length; i++) {\n                var cell = selectCells[i];\n                var paragraphInfo = { 'paragraph': null, 'offset': 0 };\n                this.startIndex = this.owner.selectionModule.getPositionInfoForHeaderFooter(paragraphInfo, { position: 0, done: false }, cell).position;\n                // Plus one is for cell index\n                var length_4 = this.owner.selectionModule.calculateCellLength(cell) + 1;\n                this.endIndex = this.startIndex + length_4;\n                if (length_4 === 0 && ischarFormat) {\n                    continue;\n                }\n                if ((this.editorHistory.isUndoing || this.editorHistory.isRedoing) && !ischarFormat) {\n                    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_9__.isNullOrUndefined)(this.owner.sfdtExportModule)) {\n                        var cellFormat = this.owner.sfdtExportModule.writeCellFormat(cell.cellFormat, 0);\n                        this.format = JSON.stringify(cellFormat);\n                    }\n                }\n                else {\n                    this.writeBorderFormat(isBorder, isShading, cell);\n                }\n                var formatOperation = void 0;\n                if (action === 'ListFormat') {\n                    formatOperation = this.getFormatOperation(undefined, undefined, true);\n                    formatOperation.type = 'ListFormat';\n                    this.createListFormat(action, formatOperation);\n                }\n                else {\n                    formatOperation = this.getFormatOperation(undefined, undefined, true);\n                }\n                operations.push(formatOperation);\n            }\n        }\n        else {\n            var operation = void 0;\n            if (action === 'ListFormat') {\n                operation = this.getFormatOperation(undefined, action);\n                this.createListFormat(action, operation);\n            }\n            else {\n                if (start.paragraph.isInsideTable && isCell) {\n                    var paragraphInfo = { 'paragraph': null, 'offset': 0 };\n                    this.startIndex = this.owner.selectionModule.getPositionInfoForHeaderFooter(paragraphInfo, { position: 0, done: false }, start.paragraph.associatedCell).position;\n                    var length_5 = this.owner.selectionModule.calculateCellLength(start.paragraph.associatedCell) + 1;\n                    this.endIndex = this.startIndex + length_5;\n                    this.writeBorderFormat(isBorder, isShading, start.paragraph.associatedCell);\n                }\n                if (action === 'ClearFormat' && this.editorHistory.isUndoing) {\n                    this.buildclearFormatOperations(operations);\n                    return operations;\n                }\n                else {\n                    operation = this.getFormatOperation(undefined, undefined, true);\n                }\n            }\n            operations.push(operation);\n        }\n        return operations;\n    };\n    BaseHistoryInfo.prototype.buildclearFormatOperations = function (operations) {\n        var start = this.owner.selectionModule.getTextPosBasedOnLogicalIndex(this.collabStart);\n        var end = this.owner.selectionModule.getTextPosBasedOnLogicalIndex(this.collabEnd);\n        var block = start.paragraph;\n        var isBreak = false;\n        do {\n            isBreak = block.equals(end.paragraph);\n            if (block instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_6__.ParagraphWidget) {\n                this.buildclearFormatOperation(block, operations);\n            }\n            else {\n                var positionInfo = { done: false };\n                this.tableClearFormatOperation(block, end.paragraph, operations, positionInfo);\n                if (positionInfo.done) {\n                    isBreak = true;\n                }\n            }\n            block = block.nextRenderedWidget;\n        } while (!isBreak);\n    };\n    BaseHistoryInfo.prototype.tableClearFormatOperation = function (table, endParagraph, operations, positionInfo) {\n        var row = table.firstChild;\n        while (row) {\n            var cell = row.firstChild;\n            while (cell) {\n                var childBlock = cell.firstChild;\n                if (childBlock instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_6__.ParagraphWidget) {\n                    this.buildclearFormatOperation(childBlock, operations);\n                }\n                else {\n                    this.tableClearFormatOperation(childBlock, endParagraph, operations, positionInfo);\n                    if (positionInfo.done) {\n                        return;\n                    }\n                }\n                if (endParagraph.equals(childBlock)) {\n                    positionInfo.done = true;\n                    return;\n                }\n                cell = cell.nextWidget;\n            }\n            row = row.getSplitWidgets().pop().nextRenderedWidget;\n        }\n    };\n    BaseHistoryInfo.prototype.buildclearFormatOperation = function (paragraph, operations) {\n        var isParagraphFormat = true;\n        for (var i = 0; i < paragraph.childWidgets.length; i++) {\n            var inlines = paragraph.childWidgets[i];\n            for (var j = 0; j < inlines.children.length; j++) {\n                if (inlines.children[j] instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_6__.TextElementBox) {\n                    var currentStart = this.owner.selectionModule.getElementPosition(inlines.children[j], true).startPosition;\n                    this.startIndex = this.owner.selectionModule.getAbsolutePositionFromRelativePosition(currentStart);\n                    var operation = this.getFormatOperation(inlines.children[j]);\n                    operation.length += 1;\n                    if (isParagraphFormat) {\n                        var paraFormatOperation = {\n                            action: 'Format',\n                            offset: operation.offset,\n                            length: operation.length,\n                            type: 'ParagraphFormat',\n                            format: JSON.stringify(this.owner.sfdtExportModule.writeParagraphFormat(paragraph.paragraphFormat, 0, true))\n                        };\n                        operations.push(paraFormatOperation);\n                        isParagraphFormat = false;\n                    }\n                    operation.type = 'CharacterFormat';\n                    operation.format = JSON.stringify(this.owner.sfdtExportModule.writeCharacterFormat(inlines.children[j].characterFormat, 0, true));\n                    operations.push(operation);\n                }\n            }\n        }\n    };\n    BaseHistoryInfo.prototype.writeBorderFormat = function (isBorder, isShading, cell) {\n        var cellFormat = {};\n        if (isBorder) {\n            cellFormat['borders'] = _editor_editor_helper__WEBPACK_IMPORTED_MODULE_11__.HelperMethods.writeBorders(cell.cellFormat.borders, 0);\n            this.format = JSON.stringify(cellFormat);\n        }\n        if (isShading) {\n            cellFormat['shading'] = this.owner.sfdtExportModule ? this.owner.sfdtExportModule.writeShading(cell.cellFormat.shading, 0) : {};\n            this.format = JSON.stringify(cellFormat);\n        }\n    };\n    BaseHistoryInfo.prototype.createListFormat = function (action, operation) {\n        var listId;\n        var nsid;\n        if (action === 'ListFormat') {\n            listId = this.insertedFormat.listId;\n            operation.text = action.toString().charAt(0).toLowerCase() + action.toString().slice(1);\n        }\n        else {\n            listId = this.insertedFormat.listId;\n            nsid = this.insertedFormat.nsid;\n        }\n        if (listId > -1) {\n            var list = this.owner.documentHelper.getListById(listId);\n            var listData = {};\n            listData.optimizeSfdt = this.owner.documentEditorSettings.optimizeSfdt;\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_9__.isNullOrUndefined)(this.owner.sfdtExportModule)) {\n                this.owner.sfdtExportModule.keywordIndex = this.owner.documentEditorSettings.optimizeSfdt ? 1 : 0;\n                listData[_index__WEBPACK_IMPORTED_MODULE_8__.listsProperty[this.owner.sfdtExportModule.keywordIndex]] = [];\n                listData[_index__WEBPACK_IMPORTED_MODULE_8__.listsProperty[this.owner.sfdtExportModule.keywordIndex]].push(this.owner.sfdtExportModule.writeList(list));\n                listData[_index__WEBPACK_IMPORTED_MODULE_8__.abstractListsProperty[this.owner.sfdtExportModule.keywordIndex]] = [];\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_9__.isNullOrUndefined)(list)) {\n                    listData[_index__WEBPACK_IMPORTED_MODULE_8__.abstractListsProperty[this.owner.sfdtExportModule.keywordIndex]].push(this.owner.sfdtExportModule.writeAbstractList(list.abstractList));\n                }\n                if (action == 'RestartNumbering') {\n                    listData[_index__WEBPACK_IMPORTED_MODULE_8__.listIdProperty[this.owner.sfdtExportModule.keywordIndex]] = listId;\n                    listData[_index__WEBPACK_IMPORTED_MODULE_8__.nsidProperty] = nsid;\n                }\n            }\n            operation.listData = JSON.stringify(listData);\n        }\n    };\n    BaseHistoryInfo.prototype.createCharacterFormat = function (action) {\n        var characterFormat = {};\n        if (action === 'Uppercase') {\n            characterFormat.Uppercase = true;\n        }\n        else if (action === 'Lowercase') {\n            characterFormat.Lowercase = true;\n        }\n        else if (action === 'SentenceCase') {\n            characterFormat.SentenceCase = true;\n        }\n        else if (action === 'ToggleCase') {\n            characterFormat.ToggleCase = true;\n        }\n        else if (action === 'CapitalizeEachWord') {\n            characterFormat.CapitalizeEachWord = true;\n        }\n        else if (action === 'ApplyStyle' || action === 'StyleName') {\n            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_9__.isNullOrUndefined)(this.insertedFormat)) {\n                characterFormat.styleName = null;\n            }\n            else {\n                characterFormat.styleName = this.insertedFormat;\n            }\n        }\n        else if (action === 'CharacterFormat') {\n            var charFormat = this.insertedFormat;\n            characterFormat.bold = charFormat.hasValue('bold') ? charFormat.bold : characterFormat.bold;\n            characterFormat.italic = charFormat.hasValue('italic') ? charFormat.italic : characterFormat.italic;\n            characterFormat.fontSize = charFormat.hasValue('fontSize') ? charFormat.fontSize : characterFormat.fontSize;\n            characterFormat.underline = charFormat.hasValue('underline') ? charFormat.underline : characterFormat.underline;\n            characterFormat.strikethrough = charFormat.hasValue('strikethrough') ? charFormat.strikethrough : characterFormat.strikethrough;\n            characterFormat.baselineAlignment = charFormat.hasValue('baselineAlignment') ? charFormat.baselineAlignment : characterFormat.baselineAlignment;\n            characterFormat.highlightColor = charFormat.hasValue('highlightColor') ? charFormat.highlightColor : characterFormat.highlightColor;\n            characterFormat.fontColor = charFormat.hasValue('fontColor') ? charFormat.fontColor : characterFormat.fontColor;\n            characterFormat.fontFamily = charFormat.hasValue('fontFamily') ? charFormat.fontFamily : characterFormat.fontFamily;\n            characterFormat.allCaps = charFormat.hasValue('allCaps') ? charFormat.allCaps : characterFormat.allCaps;\n            characterFormat.LowerCase = charFormat.hasValue('Lowercase') ? charFormat.Lowercase : characterFormat.Lowercase;\n            characterFormat.Uppercase = charFormat.hasValue('Uppercase') ? charFormat.Lowercase : characterFormat.Uppercase;\n            characterFormat.CapitalizeEachWord = charFormat.hasValue('CapitalizeEachWord') ? charFormat.CapitalizeEachWord : characterFormat.CapitalizeEachWord;\n            characterFormat.SentenceCase = charFormat.hasValue('SentenceCase') ? charFormat.SentenceCase : characterFormat.SentenceCase;\n            characterFormat.ToggleCase = charFormat.hasValue('ToggleCase') ? charFormat.ToggleCase : characterFormat.ToggleCase;\n        }\n        else {\n            if (this.insertedFormat === 'increment' || this.insertedFormat === 'decrement') {\n                this.type = this.insertedFormat;\n                characterFormat.fontSize = 0;\n            }\n            else {\n                if (action !== 'ClearFormat') {\n                    var text = action.toString().charAt(0).toLowerCase() + action.toString().slice(1);\n                    if (this.insertedFormat instanceof _format_character_format__WEBPACK_IMPORTED_MODULE_2__.WCharacterFormat && (this.editorHistory.isUndoing || this.editorHistory.isRedoing)) {\n                        this.insertedFormat = this.insertedFormat[text];\n                    }\n                    characterFormat[text] = this.insertedFormat;\n                }\n            }\n        }\n        this.format = JSON.stringify(characterFormat);\n    };\n    BaseHistoryInfo.prototype.createParagraphFormat = function (action) {\n        var paragraphFormat = {};\n        if (action === 'ParagraphFormat' || action === 'ContinueNumbering') {\n            var paraFormat = this.insertedFormat;\n            paragraphFormat.afterSpacing = paraFormat.hasValue('afterSpacing') ? paraFormat.afterSpacing : paragraphFormat.afterSpacing;\n            paragraphFormat.beforeSpacing = paraFormat.hasValue('beforeSpacing') ? paraFormat.beforeSpacing : paragraphFormat.beforeSpacing;\n            paragraphFormat.spaceAfterAuto = paraFormat.hasValue('spaceAfterAuto') ? paraFormat.spaceAfterAuto : paragraphFormat.spaceAfterAuto;\n            paragraphFormat.spaceBeforeAuto = paraFormat.hasValue('spaceBeforeAuto') ? paraFormat.spaceBeforeAuto : paragraphFormat.spaceBeforeAuto;\n            paragraphFormat.rightIndent = paraFormat.hasValue('rightIndent') ? paraFormat.rightIndent : paragraphFormat.rightIndent;\n            paragraphFormat.leftIndent = paraFormat.hasValue('leftIndent') ? paraFormat.leftIndent : paragraphFormat.leftIndent;\n            paragraphFormat.firstLineIndent = paraFormat.hasValue('firstLineIndent') ? paraFormat.firstLineIndent : paragraphFormat.firstLineIndent;\n            paragraphFormat.lineSpacing = paraFormat.hasValue('lineSpacing') ? paraFormat.lineSpacing : paragraphFormat.lineSpacing;\n            paragraphFormat.lineSpacingType = paraFormat.hasValue('lineSpacingType') ? paraFormat.lineSpacingType : paragraphFormat.lineSpacingType;\n            paragraphFormat.textAlignment = paraFormat.hasValue('textAlignment') ? paraFormat.textAlignment : paragraphFormat.textAlignment;\n            paragraphFormat.outlineLevel = paraFormat.hasValue('outlineLevel') ? paraFormat.outlineLevel : paragraphFormat.outlineLevel;\n            paragraphFormat.bidi = paraFormat.hasValue('bidi') ? paraFormat.bidi : paragraphFormat.bidi;\n            if (paragraphFormat.bidi) {\n                if (paragraphFormat.textAlignment === 'Right') {\n                    paragraphFormat.textAlignment = 'Left';\n                }\n                else if (paragraphFormat.textAlignment === 'Left') {\n                    paragraphFormat.textAlignment = 'Right';\n                }\n            }\n            paragraphFormat.borders = paraFormat.hasValue('borders') ? paraFormat.borders : paragraphFormat.borders;\n            if (paraFormat.listFormat.listId !== -1) {\n                var listFormat = {};\n                listFormat.listId = paraFormat.listFormat.listId;\n                listFormat.listLevelNumber = paraFormat.listFormat.listLevelNumber;\n                listFormat.nsid = paraFormat.listFormat.nsid;\n                paragraphFormat.listFormat = listFormat;\n            }\n            paragraphFormat.styleName = paraFormat.hasValue('styleName') ? paragraphFormat.styleName.name : undefined;\n            paragraphFormat.contextualSpacing = paraFormat.hasValue('contextualSpacing') ? paraFormat.contextualSpacing : paragraphFormat.contextualSpacing;\n            paragraphFormat.keepWithNext = paraFormat.hasValue('keepWithNext') ? paraFormat.keepWithNext : paragraphFormat.keepWithNext;\n            paragraphFormat.keepLinesTogether = paraFormat.hasValue('keepLinesTogether') ? paraFormat.keepLinesTogether : paragraphFormat.keepLinesTogether;\n            paragraphFormat.widowControl = paraFormat.hasValue('contextualSpacing') ? paraFormat.widowControl : paragraphFormat.widowControl;\n        }\n        else if (action === 'ListFormat') {\n            if (this.insertedFormat instanceof _format_paragraph_format__WEBPACK_IMPORTED_MODULE_0__.WParagraphFormat) {\n                this.insertedFormat = this.insertedFormat.listFormat;\n            }\n            var listFormat = {};\n            listFormat.listId = this.insertedFormat.listId;\n            listFormat.nsid = this.insertedFormat.nsid;\n            listFormat.listLevelNumber = this.insertedFormat.listLevelNumber;\n            paragraphFormat.listFormat = listFormat;\n        }\n        else if (action === 'ApplyStyle' || action === 'StyleName') {\n            paragraphFormat.styleName = this.insertedFormat;\n        }\n        else if (action === 'ParagraphBidi') {\n            paragraphFormat.bidi = this.insertedFormat;\n        }\n        else if (action === 'Borders') {\n            paragraphFormat['borders'] = _editor_editor_helper__WEBPACK_IMPORTED_MODULE_11__.HelperMethods.writeBorders(this.insertedFormat, 0);\n        }\n        else {\n            if (this.insertedFormat instanceof _format_paragraph_format__WEBPACK_IMPORTED_MODULE_0__.WParagraphFormat) {\n                var paraFormat = this.owner.sfdtExportModule.writeParagraphFormat(this.insertedFormat, 0);\n                paragraphFormat[action.toString().charAt(0).toLowerCase() + action.toString().slice(1)] = paraFormat;\n            }\n            else if (action === 'List') {\n                paragraphFormat = this.insertedFormat;\n            }\n            else {\n                paragraphFormat[action.toString().charAt(0).toLowerCase() + action.toString().slice(1)] = this.insertedFormat;\n            }\n        }\n        this.format = JSON.stringify(paragraphFormat);\n    };\n    /**\n     * @private\n     * @returns {void}\n     */\n    BaseHistoryInfo.prototype.createTableFormat = function (action) {\n        var paragraphInfo = { 'paragraph': null, 'offset': 0 };\n        this.startIndex = this.owner.selectionModule.getPositionInfoForHeaderFooter(paragraphInfo, { position: 0, done: false }, this.owner.selectionModule.start.paragraph.associatedCell.ownerTable).position;\n        this.endIndex = this.startIndex;\n        this.endIndex += this.owner.selectionModule.getBlockLength(undefined, this.owner.selectionModule.start.paragraph.associatedCell.ownerTable.combineWidget(this.owner.viewer), 0, { done: false }, true, undefined, undefined) - 1;\n        var tableFormat = {};\n        if (action === 'TableFormat') {\n            var tabFormat = this.insertedFormat;\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_9__.isNullOrUndefined)(tabFormat)) {\n                tableFormat.bidi = tabFormat.hasValue('bidi') ? tabFormat.bidi : undefined;\n                tableFormat.preferredWidth = tabFormat.hasValue('preferredWidth') ? tabFormat.preferredWidth : undefined;\n                tableFormat.preferredWidthType = tabFormat.hasValue('preferredWidthType') ? tabFormat.preferredWidthType : undefined;\n                tableFormat.tableAlignment = tabFormat.hasValue('tableAlignment') ? tabFormat.tableAlignment : undefined;\n                tableFormat.leftIndent = tabFormat.hasValue('leftIndent') ? tabFormat.leftIndent : undefined;\n            }\n        }\n        else if (action === 'TableOptions') {\n            var tableOption = this.owner.selectionModule.start.paragraph.associatedCell.ownerTable.tableFormat;\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_9__.isNullOrUndefined)(tableOption)) {\n                tableFormat.cellSpacing = tableOption.hasValue('cellSpacing') ? tableOption.cellSpacing : undefined;\n                tableFormat.leftMargin = tableOption.hasValue('leftMargin') ? tableOption.leftMargin : undefined;\n                tableFormat.topMargin = tableOption.hasValue('topMargin') ? tableOption.topMargin : undefined;\n                tableFormat.rightMargin = tableOption.hasValue('rightMargin') ? tableOption.rightMargin : undefined;\n                tableFormat.bottomMargin = tableOption.hasValue('bottomMargin') ? tableOption.bottomMargin : undefined;\n            }\n        }\n        else if (action === 'BordersAndShading') {\n            var tabBorderFormat = this.insertedFormat;\n            tableFormat = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_9__.isNullOrUndefined)(this.owner.sfdtExportModule) ? this.owner.sfdtExportModule.writeTableFormat(tabBorderFormat, 0) : {};\n        }\n        else {\n            tableFormat[this.getTableFormatString(action)] = this.insertedFormat;\n        }\n        this.format = JSON.stringify(tableFormat);\n    };\n    /**\n     * @private\n     * @returns {void}\n     */\n    BaseHistoryInfo.prototype.createRowFormat = function (action) {\n        var rowFormat = {};\n        if (this.editorHistory.isUndoing || this.editorHistory.isRedoing) {\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_9__.isNullOrUndefined)(this.owner.sfdtExportModule)) {\n                this.owner.sfdtExportModule.assignRowFormat(rowFormat, this.owner.selectionModule.start.paragraph.associatedCell.ownerRow.rowFormat, 0);\n            }\n        }\n        else {\n            if (action === 'RowFormat') {\n                var rForamt = this.insertedFormat;\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_9__.isNullOrUndefined)(rForamt)) {\n                    rowFormat.height = rForamt.hasValue('height') ? rForamt.height : undefined;\n                    rowFormat.heightType = rForamt.hasValue('heightType') ? rForamt.heightType : undefined;\n                    rowFormat.isHeader = rForamt.hasValue('isHeader') ? rForamt.isHeader : undefined;\n                    rowFormat.allowBreakAcrossPages = rForamt.hasValue('allowBreakAcrossPages') ? rForamt.allowBreakAcrossPages : undefined;\n                }\n            }\n            else {\n                rowFormat[this.getRowString(action)] = this.insertedFormat;\n            }\n        }\n        this.format = JSON.stringify(rowFormat);\n    };\n    /**\n     * @private\n     * @returns {void}\n     */\n    BaseHistoryInfo.prototype.createCellFormat = function (action) {\n        var cellFormat = {};\n        if (action === 'CellFormat') {\n            var cFormat = this.insertedFormat;\n            cellFormat.preferredWidth = cFormat.hasValue('preferredWidth') ? cFormat.preferredWidth : undefined;\n            cellFormat.preferredWidthType = cFormat.hasValue('preferredWidthType') ? cFormat.preferredWidthType : undefined;\n            cellFormat.verticalAlignment = cFormat.hasValue('verticalAlignment') ? cFormat.verticalAlignment : undefined;\n        }\n        else if (action === 'CellOptions') {\n            var cellOption = this.insertedFormat;\n            cellFormat.leftMargin = cellOption.leftMargin;\n            cellFormat.rightMargin = cellOption.rightMargin;\n            cellFormat.bottomMargin = cellOption.bottomMargin;\n            cellFormat.topMargin = cellOption.topMargin;\n        }\n        else if (action === 'Shading') {\n            cellFormat[this.getCellString(action)] = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_9__.isNullOrUndefined)(this.owner.sfdtExportModule) ? this.owner.sfdtExportModule.writeShading(this.insertedFormat, 0) : {};\n        }\n        else if (action === 'Borders') {\n            cellFormat['borders'] = _editor_editor_helper__WEBPACK_IMPORTED_MODULE_11__.HelperMethods.writeBorders(this.insertedFormat, 0);\n        }\n        else if (action === 'BordersAndShading') {\n            cellFormat['shading'] = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_9__.isNullOrUndefined)(this.owner.sfdtExportModule) ? this.owner.sfdtExportModule.writeShading(this.insertedFormat, 0) : {};\n            cellFormat['borders'] = _editor_editor_helper__WEBPACK_IMPORTED_MODULE_11__.HelperMethods.writeBorders(this.insertedFormat.borders, 0);\n        }\n        else {\n            cellFormat[this.getCellString(action)] = this.insertedFormat;\n        }\n        this.format = JSON.stringify(cellFormat);\n    };\n    BaseHistoryInfo.prototype.getTableFormatString = function (property) {\n        switch (property) {\n            case 'TableAlignment':\n                return 'tableAlignment';\n            case 'TableLeftIndent':\n                return 'leftIndent';\n            case 'DefaultCellLeftMargin':\n                return 'leftMargin';\n            case 'DefaultCellRightMargin':\n                return 'rightMargin';\n            case 'DefaultCellBottomMargin':\n                return 'bottomMargin';\n            case 'DefaultCellTopMargin':\n                return 'topMargin';\n            case 'TablePreferredWidth':\n                return 'preferredWidth';\n            case 'TablePreferredWidthType':\n                return 'preferredWidthType';\n            case 'Shading':\n                return 'shading';\n            case 'TableBidi':\n                return 'bidi';\n            default:\n                return 'cellSpacing';\n        }\n    };\n    BaseHistoryInfo.prototype.createSectionFormat = function (action) {\n        var sectionFormat = {};\n        if (this.editorHistory.isUndoing || this.editorHistory.isRedoing) {\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_9__.isNullOrUndefined)(this.owner.sfdtExportModule)) {\n                this.owner.sfdtExportModule.writeSectionFormat(this.owner.selectionModule.start.paragraph.bodyWidget.sectionFormat, sectionFormat, 0);\n            }\n        }\n        else {\n            if (action === 'LinkToPrevious') {\n                var headerFooterWidget = this.owner.selectionModule.start.paragraph.bodyWidget;\n                var sectionIndex = headerFooterWidget.sectionIndex;\n                var headerFooterType = headerFooterWidget.headerFooterType;\n                this.format = JSON.stringify({ linkToPrevious: this.insertedFormat, sectionIndex: sectionIndex, headerFooterType: headerFooterType });\n                return;\n            }\n            else if (action === 'SectionFormat') {\n                var secFormat = this.insertedFormat;\n                this.owner.sfdtExportModule.writeSectionFormat(secFormat, sectionFormat, 0);\n            }\n            else {\n                sectionFormat[action[0].toLowerCase() + action.slice(1)] = this.insertedFormat;\n            }\n        }\n        this.format = JSON.stringify(sectionFormat);\n    };\n    BaseHistoryInfo.prototype.getRowString = function (property) {\n        switch (property) {\n            case 'RowHeight':\n                return 'height';\n            case 'RowHeightType':\n                return 'heightType';\n            case 'RowHeader':\n                return 'isHeader';\n            default:\n                return 'allowBreakAcrossPages';\n        }\n    };\n    BaseHistoryInfo.prototype.getCellString = function (property) {\n        switch (property) {\n            case 'CellContentVerticalAlignment':\n                return 'verticalAlignment';\n            case 'CellLeftMargin':\n                return 'leftMargin';\n            case 'CellRightMargin':\n                return 'rightMargin';\n            case 'CellBottomMargin':\n                return 'bottomMargin';\n            case 'CellTopMargin':\n                return 'topMargin';\n            case 'CellPreferredWidth':\n                return 'preferredWidth';\n            case 'Shading':\n                return 'shading';\n            default:\n                return 'preferredWidthType';\n        }\n    };\n    return BaseHistoryInfo;\n}());\n\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-documenteditor/src/document-editor/implementation/editor-history/base-history-info.js?");

/***/ })

}]);