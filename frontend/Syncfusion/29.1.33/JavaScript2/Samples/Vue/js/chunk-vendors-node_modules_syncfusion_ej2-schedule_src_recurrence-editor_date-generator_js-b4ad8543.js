"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkej2_vue_samples"] = self["webpackChunkej2_vue_samples"] || []).push([["chunk-vendors-node_modules_syncfusion_ej2-schedule_src_recurrence-editor_date-generator_js-b4ad8543"],{

/***/ "./node_modules/@syncfusion/ej2-schedule/src/recurrence-editor/date-generator.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-schedule/src/recurrence-editor/date-generator.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   extractObjectFromRule: () => (/* binding */ extractObjectFromRule),\n/* harmony export */   generate: () => (/* binding */ generate),\n/* harmony export */   generateSummary: () => (/* binding */ generateSummary),\n/* harmony export */   getCalendarUtil: () => (/* binding */ getCalendarUtil),\n/* harmony export */   getDateFromRecurrenceDateString: () => (/* binding */ getDateFromRecurrenceDateString),\n/* harmony export */   getRecurrenceStringFromDate: () => (/* binding */ getRecurrenceStringFromDate)\n/* harmony export */ });\n/* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @syncfusion/ej2-base */ \"./node_modules/@syncfusion/ej2-base/index.js\");\n/* harmony import */ var _schedule_base_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../schedule/base/util */ \"./node_modules/@syncfusion/ej2-schedule/src/schedule/base/util.js\");\n/* harmony import */ var _common_calendar_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../common/calendar-util */ \"./node_modules/@syncfusion/ej2-schedule/src/common/calendar-util.js\");\n/* harmony import */ var _schedule_timezone_timezone__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../schedule/timezone/timezone */ \"./node_modules/@syncfusion/ej2-schedule/src/schedule/timezone/timezone.js\");\n/* eslint-disable max-len */\n\n\n\n\n/**\n * Date Generator from Recurrence Rule\n */\n/**\n * Generate Summary from Recurrence Rule\n *\n * @param {string} rule Accepts the Recurrence rule\n * @param {L10n} localeObject Accepts the locale object\n * @param {string} locale Accepts the locale name\n * @param {CalendarType} calendarType Accepts the calendar type\n * @returns {string} Returns the summary string from given recurrence rule\n */\nfunction generateSummary(rule, localeObject, locale, calendarType) {\n    if (calendarType === void 0) { calendarType = 'Gregorian'; }\n    var ruleObject = extractObjectFromRule(rule);\n    var summary = localeObject.getConstant(EVERY) + ' ';\n    var cldrObj;\n    var cldrObj1;\n    var calendarMode = calendarType.toLowerCase();\n    if (locale === 'en' || locale === 'en-US') {\n        var nameSpace1 = 'months.stand-alone.abbreviated';\n        var nameSpace = 'days.stand-alone.abbreviated';\n        cldrObj1 = ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)(nameSpace1, (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getDefaultDateObject)(calendarMode)));\n        cldrObj = ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)(nameSpace, (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getDefaultDateObject)(calendarMode)));\n    }\n    else {\n        var nameSpace1 = 'main.' + locale + '.dates.calendars.' + calendarMode + '.months.stand-alone.abbreviated';\n        var nameSpace = 'main.' + locale + '.dates.calendars.' + calendarMode + '.days.stand-alone.abbreviated';\n        cldrObj1 =\n            ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)(nameSpace1, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.cldrData));\n        cldrObj =\n            ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)(nameSpace, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.cldrData));\n    }\n    if (ruleObject.interval > 1) {\n        summary += ruleObject.interval + ' ';\n    }\n    switch (ruleObject.freq) {\n        case 'DAILY':\n            summary += localeObject.getConstant(DAYS);\n            break;\n        case 'WEEKLY':\n            summary += localeObject.getConstant(WEEKS) + ' ' + localeObject.getConstant(ON) + ' ';\n            ruleObject.day.forEach(function (day, index) {\n                summary += (0,_schedule_base_util__WEBPACK_IMPORTED_MODULE_1__.capitalizeFirstWord)((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)(DAYINDEXOBJECT[\"\" + day], cldrObj), 'single');\n                summary += (((ruleObject.day.length - 1) === index) ? '' : ', ');\n            });\n            break;\n        case 'MONTHLY':\n            summary += localeObject.getConstant(MONTHS) + ' ' + localeObject.getConstant(ON) + ' ';\n            summary += getMonthSummary(ruleObject, cldrObj, localeObject);\n            break;\n        case 'YEARLY':\n            summary += localeObject.getConstant(YEARS) + ' ' + localeObject.getConstant(ON) + ' ';\n            summary += (0,_schedule_base_util__WEBPACK_IMPORTED_MODULE_1__.capitalizeFirstWord)((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)((ruleObject.month[0]).toString(), cldrObj1), 'single') + ' ';\n            summary += getMonthSummary(ruleObject, cldrObj, localeObject);\n            break;\n    }\n    if (ruleObject.count) {\n        summary += ', ' + (ruleObject.count) + ' ' + localeObject.getConstant(TIMES);\n    }\n    else if (ruleObject.until) {\n        var tempDate = ruleObject.until;\n        summary += ', ' + localeObject.getConstant(UNTIL)\n            + ' ' + tempDate.getDate()\n            + ' ' + (0,_schedule_base_util__WEBPACK_IMPORTED_MODULE_1__.capitalizeFirstWord)((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)((tempDate.getMonth() + 1).toString(), cldrObj1), 'single')\n            + ' ' + tempDate.getFullYear();\n    }\n    return summary;\n}\n/**\n * Generates Month summary\n *\n * @param {RecRule} ruleObject Accepts the recurrence rule object\n * @param {string[]} cldrObj Accepts the collections of month name from calendar\n * @param {L10n} localeObj Accepts the locale object\n * @returns {string} Returns the month summary string from given recurrence rule object\n * @private\n */\nfunction getMonthSummary(ruleObject, cldrObj, localeObj) {\n    var summary = '';\n    if (ruleObject.monthDay.length) {\n        summary += ruleObject.monthDay[0];\n    }\n    else if (ruleObject.day) {\n        var pos = ruleObject.setPosition - 1;\n        summary += localeObj.getConstant(WEEKPOS[pos > -1 ? pos : (WEEKPOS.length - 1)])\n            + ' ' + (0,_schedule_base_util__WEBPACK_IMPORTED_MODULE_1__.capitalizeFirstWord)((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)(DAYINDEXOBJECT[ruleObject.day[0]], cldrObj), 'single');\n    }\n    return summary;\n}\n/**\n * Generates the date collections from the given recurrence rule\n *\n * @param {Date} startDate Accepts the rule start date\n * @param {string} rule Accepts the recurrence rule\n * @param {string} excludeDate Accepts the exception dates in string format\n * @param {number} startDayOfWeek Accepts the start day index of week\n * @param {number} maximumCount Accepts the maximum number count to generate date collections\n * @param {Date} viewDate Accepts the current date instead of start date\n * @param {CalendarType} calendarMode Accepts the calendar type\n * @param {string} newTimezone Accepts the timezone name\n * @returns {number[]} Returns the collection of dates\n */\nfunction generate(startDate, rule, excludeDate, startDayOfWeek, maximumCount, viewDate, calendarMode, newTimezone) {\n    if (maximumCount === void 0) { maximumCount = MAXOCCURRENCE; }\n    if (viewDate === void 0) { viewDate = null; }\n    if (calendarMode === void 0) { calendarMode = 'Gregorian'; }\n    if (newTimezone === void 0) { newTimezone = null; }\n    var ruleObject = extractObjectFromRule(rule);\n    var cacheDate;\n    calendarUtil = getCalendarUtil(calendarMode);\n    var data = [];\n    var modifiedDate = new Date(startDate.getTime());\n    tempExcludeDate = [];\n    var tempDate = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(excludeDate) ? [] : excludeDate.split(',');\n    var tz = new _schedule_timezone_timezone__WEBPACK_IMPORTED_MODULE_3__.Timezone();\n    tempDate.forEach(function (content) {\n        var parsedDate = getDateFromRecurrenceDateString(content);\n        if (newTimezone) {\n            parsedDate = tz.add(new Date(parsedDate.getTime()), newTimezone);\n        }\n        tempExcludeDate.push(new Date(parsedDate.getTime()).setHours(0, 0, 0, 0));\n    });\n    ruleObject.recExceptionCount = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(ruleObject.count) ? tempExcludeDate.length : 0;\n    if (viewDate && viewDate > startDate && !ruleObject.count) {\n        tempViewDate = new Date(new Date(viewDate.getTime()).setHours(0, 0, 0));\n    }\n    else {\n        tempViewDate = null;\n    }\n    if (!ruleObject.until && tempViewDate) {\n        cacheDate = new Date(tempViewDate.getTime());\n        cacheDate.setDate(tempViewDate.getDate() + maximumCount * (ruleObject.interval));\n        ruleObject.until = cacheDate;\n    }\n    if (ruleObject.until && startDate > ruleObject.until) {\n        return data;\n    }\n    maxOccurrence = maximumCount;\n    startDayOfWeek = startDayOfWeek || 0;\n    setFirstDayOfWeek(DAYINDEX[parseInt(startDayOfWeek.toString(), 10)]);\n    if (ruleObject.until) {\n        var end = (0,_schedule_base_util__WEBPACK_IMPORTED_MODULE_1__.resetTime)(ruleObject.until);\n        ruleObject.until = new Date(end.getFullYear(), end.getMonth(), end.getDate(), 23, 59, 59);\n    }\n    switch (ruleObject.freq) {\n        case 'DAILY':\n            dailyType(modifiedDate, ruleObject.until, data, ruleObject);\n            break;\n        case 'WEEKLY':\n            weeklyType(modifiedDate, ruleObject.until, data, ruleObject, startDayOfWeek);\n            break;\n        case 'MONTHLY':\n            monthlyType(modifiedDate, ruleObject.until, data, ruleObject);\n            break;\n        case 'YEARLY':\n            yearlyType(modifiedDate, ruleObject.until, data, ruleObject);\n    }\n    return data;\n}\n/**\n * Generate date object from given date string\n *\n * @param {string} recDateString Accepts the exception date as string\n * @returns {Date} Returns the date from exception date string\n */\nfunction getDateFromRecurrenceDateString(recDateString) {\n    return new Date(recDateString.substr(0, 4) +\n        '-' + recDateString.substr(4, 2) +\n        '-' + recDateString.substr(6, 5) +\n        ':' + recDateString.substr(11, 2) +\n        ':' + recDateString.substr(13));\n}\n/**\n * Internal method to handle exclude date\n *\n * @param {number[]} data Accepts the exception date collections\n * @param {number} date Accepts the new exclude date\n * @returns {void}\n * @private\n */\nfunction excludeDateHandler(data, date) {\n    var zeroIndex = new Date(date).setHours(0, 0, 0, 0);\n    if (tempExcludeDate.indexOf(zeroIndex) === -1 && (!tempViewDate || zeroIndex >= tempViewDate.getTime())) {\n        data.push(date);\n    }\n}\n/**\n * Internal method for get date count\n *\n * @param {Date} startDate Accepts the date\n * @param {RecRule} ruleObject Accepts the recurrence rule object\n * @returns {number} Returns the number of date count\n * @private\n */\nfunction getDateCount(startDate, ruleObject) {\n    var count = maxOccurrence;\n    if (ruleObject.count) {\n        count = ruleObject.count;\n    }\n    else if (ruleObject.until) {\n        if (ruleObject.freq === 'DAILY' || ruleObject.freq === 'WEEKLY') {\n            count = Math.floor((ruleObject.until.getTime() - startDate.getTime()) / _schedule_base_util__WEBPACK_IMPORTED_MODULE_1__.MS_PER_DAY) + 1;\n        }\n        else if (ruleObject.freq === 'MONTHLY' || ruleObject.freq === 'YEARLY') {\n            count = Math.floor(((ruleObject.until.getMonth() + 12 * ruleObject.until.getFullYear()) -\n                (startDate.getMonth() + 12 * startDate.getFullYear())) / ruleObject.interval) +\n                (ruleObject.day.length > 1 ? (Math.floor((ruleObject.until.getTime() - startDate.getTime()) / _schedule_base_util__WEBPACK_IMPORTED_MODULE_1__.MS_PER_DAY) + 1) : 1);\n            if (ruleObject.freq === 'YEARLY') {\n                count = ruleObject.month.length > 1 ? (count * ruleObject.month.length) : count;\n            }\n        }\n    }\n    return count;\n}\n/**\n *  Internal method for daily type recurrence rule\n *\n * @param {Date} startDate Accepts the strat date\n * @param {Date} endDate Accepts the end date\n * @param {number[]} data Accepts the collection of dates\n * @param {RecRule} ruleObject Accepts the recurrence rule object\n * @returns {void}\n * @private\n */\nfunction dailyType(startDate, endDate, data, ruleObject) {\n    var tempDate = new Date(startDate.getTime());\n    var interval = ruleObject.interval;\n    var expectedCount = getDateCount(startDate, ruleObject);\n    var state;\n    var expectedDays = ruleObject.day;\n    while (compareDates(tempDate, endDate)) {\n        state = true;\n        state = validateRules(tempDate, ruleObject);\n        if (state && (expectedDays.indexOf(DAYINDEX[tempDate.getDay()]) > -1 || expectedDays.length === 0)) {\n            excludeDateHandler(data, tempDate.getTime());\n            if (expectedCount && (data.length + ruleObject.recExceptionCount) >= expectedCount) {\n                break;\n            }\n        }\n        tempDate.setDate(tempDate.getDate() + interval);\n        if (tempDate.getHours() !== startDate.getHours()) {\n            tempDate.setHours(startDate.getHours());\n        }\n    }\n}\n/**\n * Internal method for weekly type recurrence rule\n *\n * @param {Date} startDate Accepts the strat date\n * @param {Date} endDate Accepts the end date\n * @param {number[]} data Accepts the collection of dates\n * @param {RecRule} ruleObject Accepts the recurrence rule object\n * @param {number} startDayOfWeek Accepts the start day index of week\n * @returns {void}\n * @private\n */\nfunction weeklyType(startDate, endDate, data, ruleObject, startDayOfWeek) {\n    var tempDate = new Date(startDate.getTime());\n    if (!ruleObject.day.length) {\n        ruleObject.day.push(DAYINDEX[startDate.getDay()]);\n    }\n    var interval = ruleObject.interval;\n    var expectedDays = ruleObject.day;\n    var expectedCount = getDateCount(startDate, ruleObject);\n    var weekState = true;\n    var wkstIndex;\n    var weekCollection = [];\n    if (expectedDays.length > 1) {\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(ruleObject.wkst) || ruleObject.wkst === '') {\n            ruleObject.wkst = dayIndex[0];\n        }\n        wkstIndex = DAYINDEX.indexOf(ruleObject.wkst);\n        while (compareDates(tempDate, endDate)) {\n            var startDateDiff = DAYINDEX.indexOf(DAYINDEX[tempDate.getDay()]) - wkstIndex;\n            startDateDiff = startDateDiff === -1 ? 6 : startDateDiff;\n            var weekstartDate = (0,_schedule_base_util__WEBPACK_IMPORTED_MODULE_1__.addDays)(tempDate, -startDateDiff);\n            var weekendDate = (0,_schedule_base_util__WEBPACK_IMPORTED_MODULE_1__.addDays)(weekstartDate, 6);\n            var compareTempDate = new Date(tempDate.getTime());\n            weekendDate = (0,_schedule_base_util__WEBPACK_IMPORTED_MODULE_1__.resetTime)(weekendDate);\n            compareTempDate = (0,_schedule_base_util__WEBPACK_IMPORTED_MODULE_1__.resetTime)(compareTempDate);\n            while (weekendDate >= compareTempDate) {\n                if (expectedDays.indexOf(DAYINDEX[tempDate.getDay()]) > -1) {\n                    weekCollection.push([tempDate.getTime()]);\n                }\n                if (expectedCount && (data.length + ruleObject.recExceptionCount) >= expectedCount) {\n                    break;\n                }\n                tempDate.setDate(tempDate.getDate() + 1);\n                if (tempDate.getHours() !== startDate.getHours()) {\n                    tempDate.setHours(startDate.getHours());\n                }\n                compareTempDate = new Date(tempDate.getTime());\n                compareTempDate = (0,_schedule_base_util__WEBPACK_IMPORTED_MODULE_1__.resetTime)(compareTempDate);\n            }\n            tempDate.setDate(tempDate.getDate() - 1);\n            if (expectedCount && (data.length + ruleObject.recExceptionCount) >= expectedCount) {\n                break;\n            }\n            tempDate.setDate((tempDate.getDate()) + 1 + ((interval - 1) * 7));\n            insertDataCollection(weekCollection, weekState, startDate, endDate, data, ruleObject);\n            weekCollection = [];\n        }\n    }\n    else {\n        tempDate = getStartDateForWeek(startDate, ruleObject.day);\n        if (interval > 1 && dayIndex.indexOf(ruleObject.day[0]) < (startDate.getDay() - startDayOfWeek)) {\n            tempDate.setDate(tempDate.getDate() + ((interval - 1) * 7));\n        }\n        while (compareDates(tempDate, endDate)) {\n            weekState = validateRules(tempDate, ruleObject);\n            if (weekState && (expectedDays.indexOf(DAYINDEX[tempDate.getDay()]) > -1)) {\n                excludeDateHandler(data, tempDate.getTime());\n            }\n            if (expectedCount && (data.length + ruleObject.recExceptionCount) >= expectedCount) {\n                break;\n            }\n            tempDate.setDate(tempDate.getDate() + (interval * 7));\n        }\n        insertDataCollection(weekCollection, weekState, startDate, endDate, data, ruleObject);\n        weekCollection = [];\n    }\n}\n/**\n *  Internal method for monthly type recurrence rule\n *\n * @param {Date} startDate Accepts the strat date\n * @param {Date} endDate Accepts the end date\n * @param {number[]} data Accepts the collection of dates\n * @param {RecRule} ruleObject Accepts the recurrence rule object\n * @returns {void}\n * @private\n */\nfunction monthlyType(startDate, endDate, data, ruleObject) {\n    // Set monthday value if BYDAY, BYMONTH and Month day property is not set based on start date\n    if (!ruleObject.month.length && !ruleObject.day.length && !ruleObject.monthDay.length) {\n        ruleObject.monthDay.push(startDate.getDate());\n        if (ruleObject.freq === 'YEARLY') {\n            ruleObject.month.push(startDate.getMonth() + 1);\n        }\n    }\n    else if (ruleObject.month.length > 0 && !ruleObject.day.length && !ruleObject.monthDay.length) {\n        ruleObject.monthDay.push(startDate.getDate());\n    }\n    var ruleType = validateMonthlyRuleType(ruleObject);\n    switch (ruleType) {\n        case 'day':\n            switch (ruleObject.freq) {\n                case 'MONTHLY':\n                    monthlyDayTypeProcessforMonthFreq(startDate, endDate, data, ruleObject);\n                    break;\n                case 'YEARLY':\n                    monthlyDayTypeProcess(startDate, endDate, data, ruleObject);\n                    break;\n            }\n            break;\n        case 'both':\n        case 'date':\n            switch (ruleObject.freq) {\n                case 'MONTHLY':\n                    monthlyDateTypeProcessforMonthFreq(startDate, endDate, data, ruleObject);\n                    break;\n                case 'YEARLY':\n                    monthlyDateTypeProcess(startDate, endDate, data, ruleObject);\n                    break;\n            }\n            break;\n    }\n}\n/**\n * Internal method for yearly type recurrence rule\n *\n * @param {Date} startDate Accepts the strat date\n * @param {Date} endDate Accepts the end date\n * @param {number[]} data Accepts the collection of dates\n * @param {RecRule} ruleObject Accepts the recurrence rule object\n * @returns {void}\n * @private\n */\nfunction yearlyType(startDate, endDate, data, ruleObject) {\n    var typeValue = checkYearlyType(ruleObject);\n    switch (typeValue) {\n        case 'MONTH':\n            monthlyType(startDate, endDate, data, ruleObject);\n            break;\n        case 'WEEKNO':\n            processWeekNo(startDate, endDate, data, ruleObject);\n            break;\n        case 'YEARDAY':\n            processYearDay(startDate, endDate, data, ruleObject);\n            break;\n    }\n}\n/**\n * Internal method for process week no\n *\n * @param {Date} startDate Accepts the strat date\n * @param {Date} endDate Accepts the end date\n * @param {number[]} data Accepts the collection of dates\n * @param {RecRule} ruleObject Accepts the recurrence rule object\n * @returns {void}\n * @private\n */\nfunction processWeekNo(startDate, endDate, data, ruleObject) {\n    var stDate = calendarUtil.getYearLastDate(startDate, 0);\n    var tempDate;\n    var expectedCount = getDateCount(startDate, ruleObject);\n    var state;\n    var startDay;\n    var firstWeekSpan;\n    var weekNos = ruleObject.weekNo;\n    var weekNo;\n    var maxDate;\n    var minDate;\n    var weekCollection = [];\n    var expectedDays = ruleObject.day;\n    while (compareDates(stDate, endDate)) {\n        startDay = dayIndex.indexOf(DAYINDEX[stDate.getDay()]);\n        firstWeekSpan = (6 - startDay) + 1;\n        for (var index = 0; index < weekNos.length; index++) {\n            weekNo = weekNos[parseInt(index.toString(), 10)];\n            weekNo = (weekNo > 0) ? weekNo : 53 + weekNo + 1;\n            maxDate = (weekNo === 1) ? firstWeekSpan : firstWeekSpan + ((weekNo - 1) * 7);\n            minDate = (weekNo === 1) ? firstWeekSpan - 7 : firstWeekSpan + ((weekNo - 2) * 7);\n            while (minDate < maxDate) {\n                tempDate = new Date(stDate.getTime() + (_schedule_base_util__WEBPACK_IMPORTED_MODULE_1__.MS_PER_DAY * minDate));\n                if (expectedDays.length === 0 || expectedDays.indexOf(DAYINDEX[tempDate.getDay()]) > -1) {\n                    if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(ruleObject.setPosition)) {\n                        insertDateCollection(state, startDate, endDate, data, ruleObject, tempDate.getTime());\n                    }\n                    else {\n                        weekCollection.push([tempDate.getTime()]);\n                    }\n                }\n                minDate++;\n            }\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(ruleObject.setPosition)) {\n            insertDatasIntoExistingCollection(weekCollection, state, startDate, endDate, data, ruleObject);\n        }\n        if (expectedCount && (data.length + ruleObject.recExceptionCount) >= expectedCount) {\n            return;\n        }\n        stDate = calendarUtil.getYearLastDate(tempDate, ruleObject.interval);\n        weekCollection = [];\n    }\n}\n/**\n * Internal method for process year day\n *\n * @param {Date} startDate Accepts the strat date\n * @param {Date} endDate Accepts the end date\n * @param {number[]} data Accepts the collection of dates\n * @param {RecRule} ruleObject Accepts the recurrence rule object\n * @returns {void}\n * @private\n */\nfunction processYearDay(startDate, endDate, data, ruleObject) {\n    var stDate = calendarUtil.getYearLastDate(startDate, 0);\n    var tempDate;\n    var expectedCount = getDateCount(startDate, ruleObject);\n    var state;\n    var dateCollection = [];\n    var date;\n    var expectedDays = ruleObject.day;\n    while (compareDates(stDate, endDate)) {\n        for (var index = 0; index < ruleObject.yearDay.length; index++) {\n            date = ruleObject.yearDay[parseInt(index.toString(), 10)];\n            tempDate = new Date(stDate.getTime());\n            if ((date === calendarUtil.getLeapYearDaysCount() || date === -calendarUtil.getLeapYearDaysCount()) &&\n                (!calendarUtil.isLeapYear(calendarUtil.getFullYear(tempDate), 1))) {\n                tempDate.setDate(tempDate.getDate() + 1);\n                continue;\n            }\n            tempDate.setDate(tempDate.getDate() + ((date < 0) ?\n                calendarUtil.getYearDaysCount(tempDate, 1) + 1 + date : date));\n            if (expectedDays.length === 0 || expectedDays.indexOf(DAYINDEX[tempDate.getDay()]) > -1) {\n                if (ruleObject.setPosition == null) {\n                    insertDateCollection(state, startDate, endDate, data, ruleObject, tempDate.getTime());\n                }\n                else {\n                    dateCollection.push([tempDate.getTime()]);\n                }\n            }\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(ruleObject.setPosition)) {\n            insertDatasIntoExistingCollection(dateCollection, state, startDate, endDate, data, ruleObject);\n        }\n        if (expectedCount && (data.length + ruleObject.recExceptionCount) >= expectedCount) {\n            return;\n        }\n        stDate = calendarUtil.getYearLastDate(tempDate, ruleObject.interval);\n        dateCollection = [];\n    }\n}\n/**\n * Internal method to check yearly type\n *\n * @param {RecRule} ruleObject Accepts the recurrence rule object\n * @returns {YearRuleType} Returns the Yearly rule type object\n * @private\n */\nfunction checkYearlyType(ruleObject) {\n    if (ruleObject.yearDay.length) {\n        return 'YEARDAY';\n    }\n    else if (ruleObject.weekNo.length) {\n        return 'WEEKNO';\n    }\n    return 'MONTH';\n}\n/**\n * Internal method to initialize recurrence rule variables\n *\n * @param {Date} startDate Accepts the start date\n * @param {RecRule} ruleObject Accepts the recurrence rule object\n * @returns {RuleData} Return the rule data object\n * @private\n */\nfunction initializeRecRuleVariables(startDate, ruleObject) {\n    var ruleData = {\n        monthCollection: [],\n        index: 0,\n        tempDate: new Date(startDate.getTime()),\n        mainDate: new Date(startDate.getTime()),\n        expectedCount: getDateCount(startDate, ruleObject),\n        monthInit: 0,\n        dateCollection: []\n    };\n    if (ruleObject.month.length) {\n        calendarUtil.setMonth(ruleData.tempDate, ruleObject.month[0], ruleData.tempDate.getDate());\n    }\n    return ruleData;\n}\n/**\n * Internal method for process monthly date type recurrence rule\n *\n * @param {Date} startDate Accepts the strat date\n * @param {Date} endDate Accepts the end date\n * @param {number[]} data Accepts the collection of dates\n * @param {RecRule} ruleObject Accepts the recurrence rule object\n * @returns {void}\n * @private\n */\nfunction monthlyDateTypeProcess(startDate, endDate, data, ruleObject) {\n    if (ruleObject.month.length) {\n        monthlyDateTypeProcessforMonthFreq(startDate, endDate, data, ruleObject);\n        return;\n    }\n    var ruleData = initializeRecRuleVariables(startDate, ruleObject);\n    var currentMonthDate;\n    ruleData.tempDate = ruleData.mainDate = calendarUtil.getMonthStartDate(ruleData.tempDate);\n    while (compareDates(ruleData.tempDate, endDate)) {\n        currentMonthDate = new Date(ruleData.tempDate.getTime());\n        while (calendarUtil.isSameYear(currentMonthDate, ruleData.tempDate) &&\n            (ruleData.expectedCount && (data.length + ruleObject.recExceptionCount) <= ruleData.expectedCount)) {\n            if (ruleObject.month.length === 0 || (ruleObject.month.length > 0\n                && !calendarUtil.checkMonth(ruleData.tempDate, ruleObject.month))) {\n                processDateCollectionForByMonthDay(ruleObject, ruleData, endDate, false);\n                ruleData.beginDate = new Date(ruleData.tempDate.getTime());\n                ruleData.monthInit = setNextValidDate(ruleData.tempDate, ruleObject, ruleData.monthInit, ruleData.beginDate);\n            }\n            else {\n                calendarUtil.setValidDate(ruleData.tempDate, 1, 1);\n                ruleData.tempDate = getStartDateForWeek(ruleData.tempDate, ruleObject.day);\n                break;\n            }\n        }\n        ruleData.tempDate.setFullYear(currentMonthDate.getFullYear(), currentMonthDate.getMonth(), currentMonthDate.getDate());\n        insertDataCollection(ruleData.dateCollection, ruleData.state, startDate, endDate, data, ruleObject);\n        if (calendarUtil.isLastMonth(ruleData.tempDate)) {\n            calendarUtil.setValidDate(ruleData.tempDate, 1, 1);\n            ruleData.tempDate = getStartDateForWeek(ruleData.tempDate, ruleObject.day);\n        }\n        if (ruleData.expectedCount && (data.length + ruleObject.recExceptionCount) >= ruleData.expectedCount) {\n            return;\n        }\n        ruleData.tempDate.setFullYear(ruleData.tempDate.getFullYear() + ruleObject.interval - 1);\n        ruleData.tempDate = getStartDateForWeek(ruleData.tempDate, ruleObject.day);\n        ruleData.monthInit = setNextValidDate(ruleData.tempDate, ruleObject, ruleData.monthInit, ruleData.beginDate);\n        ruleData.dateCollection = [];\n    }\n}\n/**\n * Internal method for process monthly date type with month frequency from recurrence rule\n *\n * @param {Date} startDate Accepts the strat date\n * @param {Date} endDate Accepts the end date\n * @param {number[]} data Accepts the collection of dates\n * @param {RecRule} ruleObject Accepts the recurrence rule object\n * @returns {void}\n * @private\n */\nfunction monthlyDateTypeProcessforMonthFreq(startDate, endDate, data, ruleObject) {\n    var ruleData = initializeRecRuleVariables(startDate, ruleObject);\n    ruleData.tempDate = ruleData.mainDate = calendarUtil.getMonthStartDate(ruleData.tempDate);\n    if (((ruleObject.freq === 'MONTHLY' && ruleObject.interval === 12) || (ruleObject.freq === 'YEARLY')) &&\n        calendarUtil.getMonthDaysCount(startDate) < ruleObject.monthDay[0]) {\n        return;\n    }\n    while (compareDates(ruleData.tempDate, endDate)) {\n        ruleData.beginDate = new Date(ruleData.tempDate.getTime());\n        processDateCollectionForByMonthDay(ruleObject, ruleData, endDate, true, startDate, data);\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(ruleObject.setPosition)) {\n            insertDatasIntoExistingCollection(ruleData.dateCollection, ruleData.state, startDate, endDate, data, ruleObject);\n        }\n        if (ruleData.expectedCount && (data.length + ruleObject.recExceptionCount) >= ruleData.expectedCount) {\n            return;\n        }\n        ruleData.monthInit = setNextValidDate(ruleData.tempDate, ruleObject, ruleData.monthInit, ruleData.beginDate);\n        ruleData.dateCollection = [];\n    }\n}\n/**\n * To process date collection for Monthly & Yearly based on BYMONTH Day property\n *\n * @param {RecRule} ruleObject Accepts the recurrence rule object\n * @param {RuleData} recRuleVariables Accepts the rule data\n * @param {Date} endDate Accepts the end date\n * @param {boolean} isByMonth Accepts the boolean to validate either month or not\n * @param {Date} startDate Accepts the start date\n * @param {number[]} data Accepts the collection of dates\n * @returns {void}\n * @private\n */\nfunction processDateCollectionForByMonthDay(ruleObject, recRuleVariables, endDate, isByMonth, startDate, data) {\n    for (var index = 0; index < ruleObject.monthDay.length; index++) {\n        recRuleVariables.date = ruleObject.monthDay[parseInt(index.toString(), 10)];\n        recRuleVariables.tempDate = calendarUtil.getMonthStartDate(recRuleVariables.tempDate);\n        var maxDate = calendarUtil.getMonthDaysCount(recRuleVariables.tempDate);\n        recRuleVariables.date = recRuleVariables.date > 0 ? recRuleVariables.date : (maxDate + recRuleVariables.date + 1);\n        if (validateProperDate(recRuleVariables.tempDate, recRuleVariables.date, recRuleVariables.mainDate)\n            && (recRuleVariables.date > 0)) {\n            calendarUtil.setDate(recRuleVariables.tempDate, recRuleVariables.date);\n            if (endDate && recRuleVariables.tempDate > endDate) {\n                return;\n            }\n            if (ruleObject.day.length === 0 || ruleObject.day.indexOf(DAYINDEX[recRuleVariables.tempDate.getDay()]) > -1) {\n                if (isByMonth && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(ruleObject.setPosition) && (recRuleVariables.expectedCount\n                    && (data.length + ruleObject.recExceptionCount) < recRuleVariables.expectedCount)) {\n                    insertDateCollection(recRuleVariables.state, startDate, endDate, data, ruleObject, recRuleVariables.tempDate.getTime());\n                }\n                else {\n                    recRuleVariables.dateCollection.push([recRuleVariables.tempDate.getTime()]);\n                }\n            }\n        }\n    }\n}\n/**\n * Internal method to set next valid date\n *\n * @param {Date} tempDate Accepts the date\n * @param {RecRule} ruleObject Accepts the recurrence rule object\n * @param {number} monthInit Accepts the initial month\n * @param {Date} beginDate Accepts the initial date\n * @param {number} interval Accepts the interval duration\n * @returns {number} Returnx the next valid date\n * @private\n */\nfunction setNextValidDate(tempDate, ruleObject, monthInit, beginDate, interval) {\n    if (beginDate === void 0) { beginDate = null; }\n    var monthData = beginDate ? beginDate.getMonth() : 0;\n    var startDate = calendarUtil.getMonthStartDate(tempDate);\n    interval = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(interval) ? ruleObject.interval : interval;\n    tempDate.setFullYear(startDate.getFullYear());\n    tempDate.setMonth(startDate.getMonth());\n    tempDate.setDate(startDate.getDate());\n    if (ruleObject.month.length) {\n        monthInit++;\n        monthInit = monthInit % ruleObject.month.length;\n        calendarUtil.setMonth(tempDate, ruleObject.month[parseInt(monthInit.toString(), 10)], 1);\n        if (monthInit === 0) {\n            calendarUtil.addYears(tempDate, interval, ruleObject.month[0]);\n        }\n    }\n    else {\n        if (beginDate && (beginDate.getFullYear() < tempDate.getFullYear())) {\n            monthData = tempDate.getMonth() - 1;\n        }\n        calendarUtil.setValidDate(tempDate, interval, 1, monthData, beginDate);\n    }\n    return monthInit;\n}\n/**\n * To get month collection when BYDAY property having more than one value in list.\n *\n * @param {Date} startDate Accepts the strat date\n * @param {Date} endDate Accepts the end date\n * @param {number[]} data Accepts the collection of dates\n * @param {RecRule} ruleObject Accepts the recurrence rule object\n * @returns {void}\n * @private\n */\nfunction getMonthCollection(startDate, endDate, data, ruleObject) {\n    var expectedDays = ruleObject.day;\n    var tempDate = new Date(startDate.getTime());\n    tempDate = calendarUtil.getMonthStartDate(tempDate);\n    var monthCollection = [];\n    var dateCollection = [];\n    var dates = [];\n    var index;\n    var state;\n    var expectedCount = getDateCount(startDate, ruleObject);\n    var monthInit = 0;\n    var beginDate;\n    if (ruleObject.month.length) {\n        calendarUtil.setMonth(tempDate, ruleObject.month[0], 1);\n    }\n    tempDate = getStartDateForWeek(tempDate, ruleObject.day);\n    while (compareDates(tempDate, endDate)\n        && (expectedCount && (data.length + ruleObject.recExceptionCount) < expectedCount)) {\n        var currentMonthDate = new Date(tempDate.getTime());\n        var isHavingNumber = expectedDays.map(function (item) { return HASNUMBER.test(item); });\n        if (isHavingNumber.indexOf(true) > -1) {\n            for (var j = 0; j <= expectedDays.length - 1; j++) {\n                var expectedDaysArray = expectedDays[parseInt(j.toString(), 10)].match(SPLITNUMBERANDSTRING);\n                var position = parseInt(expectedDaysArray[0], 10);\n                tempDate = new Date(tempDate.getTime());\n                tempDate = calendarUtil.getMonthStartDate(tempDate);\n                tempDate = getStartDateForWeek(tempDate, expectedDays);\n                currentMonthDate.setFullYear(tempDate.getFullYear(), tempDate.getMonth(), tempDate.getDate());\n                while (calendarUtil.isSameYear(currentMonthDate, tempDate) && calendarUtil.isSameMonth(currentMonthDate, tempDate)) {\n                    if (expectedDaysArray[expectedDaysArray.length - 1] === DAYINDEX[currentMonthDate.getDay()]) {\n                        monthCollection.push([currentMonthDate.getTime()]);\n                    }\n                    currentMonthDate.setDate(currentMonthDate.getDate() + (1));\n                }\n                currentMonthDate.setDate(currentMonthDate.getDate() - (1));\n                if (expectedDaysArray[0].indexOf('-') > -1) {\n                    index = monthCollection.length - (-1 * position);\n                }\n                else {\n                    index = position - 1;\n                }\n                index = isNaN(index) ? 0 : index;\n                if (monthCollection.length > 0) {\n                    if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(ruleObject.setPosition)) {\n                        insertDatasIntoExistingCollection(monthCollection, state, startDate, endDate, data, ruleObject, index);\n                    }\n                    else {\n                        dateCollection = [(filterDateCollectionByIndex(monthCollection, index, dates))];\n                    }\n                }\n                if (expectedCount && (data.length + ruleObject.recExceptionCount) >= expectedCount) {\n                    return;\n                }\n                monthCollection = [];\n            }\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(ruleObject.setPosition)) {\n                insertDateCollectionBasedonBySetPos(dateCollection, state, startDate, endDate, data, ruleObject);\n                dates = [];\n            }\n            monthInit = setNextValidDate(tempDate, ruleObject, monthInit, beginDate);\n            tempDate = getStartDateForWeek(tempDate, ruleObject.day);\n            monthCollection = [];\n        }\n        else {\n            var weekCollection = [];\n            var dayCycleData = processWeekDays(expectedDays);\n            currentMonthDate.setFullYear(tempDate.getFullYear(), tempDate.getMonth(), tempDate.getDate());\n            var initialDate = new Date(tempDate.getTime());\n            beginDate = new Date(tempDate.getTime());\n            while (calendarUtil.isSameMonth(initialDate, tempDate)) {\n                weekCollection.push(tempDate.getTime());\n                if (expectedDays.indexOf(DAYINDEX[tempDate.getDay()]) > -1) {\n                    monthCollection.push(weekCollection);\n                    weekCollection = [];\n                }\n                tempDate.setDate(tempDate.getDate()\n                    + dayCycleData[DAYINDEX[tempDate.getDay()]]);\n            }\n            index = ((ruleObject.setPosition < 1) ? (monthCollection.length + ruleObject.setPosition) : ruleObject.setPosition - 1);\n            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(ruleObject.setPosition)) {\n                index = 0;\n                var datas = [];\n                for (var week = 0; week < monthCollection.length; week++) {\n                    for (var row = 0; row < monthCollection[parseInt(week.toString(), 10)].length; row++) {\n                        datas.push(monthCollection[parseInt(week.toString(), 10)][parseInt(row.toString(), 10)]);\n                    }\n                }\n                monthCollection = [datas];\n            }\n            if (monthCollection.length > 0) {\n                insertDatasIntoExistingCollection(monthCollection, state, startDate, endDate, data, ruleObject, index);\n            }\n            if (expectedCount && (data.length + ruleObject.recExceptionCount) >= expectedCount) {\n                return;\n            }\n            monthInit = setNextValidDate(tempDate, ruleObject, monthInit, beginDate);\n            tempDate = getStartDateForWeek(tempDate, ruleObject.day);\n            monthCollection = [];\n        }\n    }\n}\n/**\n * To process monday day type for FREQ=MONTHLY\n *\n * @param {Date} startDate Accepts the strat date\n * @param {Date} endDate Accepts the end date\n * @param {number[]} data Accepts the collection of dates\n * @param {RecRule} ruleObject Accepts the recurrence rule object\n * @returns {void}\n * @private\n */\nfunction monthlyDayTypeProcessforMonthFreq(startDate, endDate, data, ruleObject) {\n    var expectedDays = ruleObject.day;\n    // When BYDAY property having more than 1 value.\n    if (expectedDays.length > 1) {\n        getMonthCollection(startDate, endDate, data, ruleObject);\n        return;\n    }\n    var tempDate = new Date(startDate.getTime());\n    var expectedCount = getDateCount(startDate, ruleObject);\n    var monthCollection = [];\n    var beginDate;\n    var monthInit = 0;\n    tempDate = calendarUtil.getMonthStartDate(tempDate);\n    if (ruleObject.month.length) {\n        calendarUtil.setMonth(tempDate, ruleObject.month[0], 1);\n    }\n    tempDate = getStartDateForWeek(tempDate, ruleObject.day);\n    while (compareDates(tempDate, endDate) && (expectedCount && (data.length + ruleObject.recExceptionCount) < expectedCount)) {\n        beginDate = new Date(tempDate.getTime());\n        var currentMonthDate = new Date(tempDate.getTime());\n        while (calendarUtil.isSameMonth(tempDate, currentMonthDate)) {\n            monthCollection.push([currentMonthDate.getTime()]);\n            currentMonthDate.setDate(currentMonthDate.getDate() + (7));\n        }\n        // To filter date collection based on BYDAY Index, then BYSETPOS and to insert datas into existing collection\n        insertDateCollectionBasedonIndex(monthCollection, startDate, endDate, data, ruleObject);\n        monthInit = setNextValidDate(tempDate, ruleObject, monthInit, beginDate);\n        tempDate = getStartDateForWeek(tempDate, ruleObject.day);\n        monthCollection = [];\n    }\n}\n/**\n * To process monday day type for FREQ=YEARLY\n *\n * @param {Date} startDate Accepts the strat date\n * @param {Date} endDate Accepts the end date\n * @param {number[]} data Accepts the collection of dates\n * @param {RecRule} ruleObject Accepts the recurrence rule object\n * @returns {void}\n * @private\n */\nfunction monthlyDayTypeProcess(startDate, endDate, data, ruleObject) {\n    var expectedDays = ruleObject.day;\n    var isHavingNumber = expectedDays.map(function (item) { return HASNUMBER.test(item); });\n    // If BYDAY property having more than 1 value in list\n    if (expectedDays.length > 1 && isHavingNumber.indexOf(true) > -1) {\n        processDateCollectionforByDayWithInteger(startDate, endDate, data, ruleObject);\n        return;\n    }\n    else if (ruleObject.month.length && expectedDays.length === 1 && isHavingNumber.indexOf(true) > -1) {\n        monthlyDayTypeProcessforMonthFreq(startDate, endDate, data, ruleObject);\n        return;\n    }\n    var tempDate = new Date(startDate.getTime());\n    var currentMonthDate;\n    var expectedCount = getDateCount(startDate, ruleObject);\n    var interval = ruleObject.interval;\n    var monthCollection = [];\n    if (ruleObject.month.length) {\n        calendarUtil.setMonth(tempDate, ruleObject.month[0], tempDate.getDate());\n    }\n    // Set the date as start date of the yeear if yearly freq having ByDay property alone\n    if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(ruleObject.setPosition) && ruleObject.month.length === 0 && ruleObject.weekNo.length === 0) {\n        tempDate.setFullYear(startDate.getFullYear(), 0, 1);\n    }\n    tempDate = calendarUtil.getMonthStartDate(tempDate);\n    tempDate = getStartDateForWeek(tempDate, ruleObject.day);\n    while (compareDates(tempDate, endDate)) {\n        currentMonthDate = new Date(tempDate.getTime());\n        while (calendarUtil.isSameYear(currentMonthDate, tempDate) &&\n            (expectedCount && (data.length + ruleObject.recExceptionCount) <= expectedCount)) {\n            currentMonthDate = new Date(tempDate.getTime());\n            while (calendarUtil.isSameYear(currentMonthDate, tempDate)) {\n                if (ruleObject.month.length === 0 || (ruleObject.month.length > 0\n                    && !calendarUtil.checkMonth(tempDate, ruleObject.month))) {\n                    if (expectedDays.length > 1) {\n                        if (calendarUtil.compareMonth(currentMonthDate, tempDate)) {\n                            calendarUtil.setValidDate(tempDate, 1, 1);\n                            tempDate = getStartDateForWeek(tempDate, ruleObject.day);\n                            break;\n                        }\n                        if (expectedDays.indexOf(DAYINDEX[currentMonthDate.getDay()]) > -1) {\n                            monthCollection.push([currentMonthDate.getTime()]);\n                        }\n                        currentMonthDate.setDate(currentMonthDate.getDate() + (1));\n                    }\n                    else {\n                        // If BYDAY property having 1 value in list\n                        if (currentMonthDate.getFullYear() > tempDate.getFullYear()) {\n                            calendarUtil.setValidDate(tempDate, 1, 1);\n                            tempDate = getStartDateForWeek(tempDate, ruleObject.day);\n                            break;\n                        }\n                        var newstr = getDayString(expectedDays[0]);\n                        if (DAYINDEX[currentMonthDate.getDay()] === newstr\n                            && new Date(currentMonthDate.getFullYear(), currentMonthDate.getMonth(), 0)\n                                > new Date(startDate.getFullYear())) {\n                            monthCollection.push([currentMonthDate.getTime()]);\n                        }\n                        currentMonthDate.setDate(currentMonthDate.getDate() + (7));\n                    }\n                }\n                else {\n                    calendarUtil.setValidDate(tempDate, 1, 1);\n                    tempDate = getStartDateForWeek(tempDate, ruleObject.day);\n                    break;\n                }\n            }\n        }\n        tempDate.setFullYear(currentMonthDate.getFullYear(), currentMonthDate.getMonth(), currentMonthDate.getDate());\n        // To filter date collection based on BYDAY Index, then BYSETPOS and to insert datas into existing collection\n        insertDateCollectionBasedonIndex(monthCollection, startDate, endDate, data, ruleObject);\n        if (calendarUtil.isLastMonth(tempDate)) {\n            calendarUtil.setValidDate(tempDate, 1, 1);\n            tempDate = getStartDateForWeek(tempDate, ruleObject.day);\n        }\n        tempDate.setFullYear(tempDate.getFullYear() + interval - 1);\n        if (expectedCount && (data.length + ruleObject.recExceptionCount) >= expectedCount) {\n            return;\n        }\n        tempDate = getStartDateForWeek(tempDate, ruleObject.day);\n        monthCollection = [];\n    }\n}\n/**\n * To process the recurrence rule when BYDAY property having values with integer\n *\n * @param {Date} startDate Accepts the strat date\n * @param {Date} endDate Accepts the end date\n * @param {number[]} data Accepts the collection of dates\n * @param {RecRule} ruleObject Accepts the recurrence rule object\n * @returns {void}\n * @private\n */\nfunction processDateCollectionforByDayWithInteger(startDate, endDate, data, ruleObject) {\n    var expectedDays = ruleObject.day;\n    var expectedCount = getDateCount(startDate, ruleObject);\n    var tempDate = new Date(startDate.getTime());\n    var interval = ruleObject.interval;\n    var monthCollection = [];\n    var dateCollection = [];\n    var index;\n    var state;\n    var monthInit = 0;\n    var currentMonthDate;\n    var currentDate;\n    var beginDate;\n    tempDate = calendarUtil.getMonthStartDate(tempDate);\n    var datas = [];\n    if (ruleObject.month.length) {\n        calendarUtil.setMonth(tempDate, ruleObject.month[0], 1);\n    }\n    tempDate = getStartDateForWeek(tempDate, ruleObject.day);\n    while (compareDates(tempDate, endDate)) {\n        currentMonthDate = new Date(tempDate.getTime());\n        for (var i = 0; i <= ruleObject.month.length; i++) {\n            for (var j = 0; j <= expectedDays.length - 1; j++) {\n                tempDate = calendarUtil.getMonthStartDate(tempDate);\n                tempDate = getStartDateForWeek(tempDate, ruleObject.day);\n                monthCollection = [];\n                while (calendarUtil.isSameYear(currentMonthDate, tempDate) &&\n                    (expectedCount && (data.length + ruleObject.recExceptionCount) <= expectedCount)) {\n                    while (calendarUtil.isSameYear(currentMonthDate, tempDate)) {\n                        currentMonthDate = new Date(tempDate.getTime());\n                        if (ruleObject.month.length === 0 ||\n                            (ruleObject.month.length > 0 && ruleObject.month[parseInt(i.toString(), 10)] === calendarUtil.getMonth(currentMonthDate))) {\n                            var expectedDaysArray = expectedDays[parseInt(j.toString(), 10)].match(SPLITNUMBERANDSTRING);\n                            var position = parseInt(expectedDaysArray[0], 10);\n                            currentDate = new Date(tempDate.getTime());\n                            while (calendarUtil.isSameYear(currentDate, tempDate)\n                                && calendarUtil.isSameMonth(currentDate, tempDate)) {\n                                if (expectedDaysArray[expectedDaysArray.length - 1] === DAYINDEX[currentDate.getDay()]) {\n                                    monthCollection.push([currentDate.getTime()]);\n                                }\n                                currentDate.setDate(currentDate.getDate() + (1));\n                            }\n                            currentDate.setDate(currentDate.getDate() - (1));\n                            if (expectedDaysArray[0].indexOf('-') > -1) {\n                                index = monthCollection.length - (-1 * position);\n                            }\n                            else {\n                                index = position - 1;\n                            }\n                            index = isNaN(index) ? 0 : index;\n                        }\n                        monthInit = setNextValidDate(tempDate, ruleObject, monthInit, beginDate, 1);\n                        tempDate = getStartDateForWeek(tempDate, ruleObject.day);\n                    }\n                }\n                tempDate = j === 0 && currentDate ? new Date(currentDate.getTime()) : new Date(currentMonthDate.getTime());\n                if (monthCollection.length > 0) {\n                    if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(ruleObject.setPosition)) {\n                        insertDatasIntoExistingCollection(monthCollection, state, startDate, endDate, data, ruleObject, index);\n                    }\n                    else {\n                        dateCollection = [(filterDateCollectionByIndex(monthCollection, index, datas))];\n                    }\n                }\n                if (expectedCount && (data.length + ruleObject.recExceptionCount) >= expectedCount) {\n                    return;\n                }\n            }\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(ruleObject.setPosition)) {\n            insertDateCollectionBasedonBySetPos(dateCollection, state, startDate, endDate, data, ruleObject);\n            datas = [];\n        }\n        if (calendarUtil.isLastMonth(tempDate)) {\n            calendarUtil.setValidDate(tempDate, 1, 1);\n            tempDate.setFullYear(tempDate.getFullYear() + interval - 1);\n        }\n        else {\n            tempDate.setFullYear(tempDate.getFullYear() + interval);\n        }\n        tempDate = getStartDateForWeek(tempDate, ruleObject.day);\n        if (ruleObject.month.length) {\n            calendarUtil.setMonth(tempDate, ruleObject.month[0], tempDate.getDate());\n        }\n    }\n}\n/**\n * To get recurrence collection if BYSETPOS is null\n *\n * @param {number[]} monthCollection Accepts the month collection dates\n * @param {string[]} expectedDays Accepts the exception dates\n * @returns {RuleData} Returns the rule data object\n * @private\n */\nfunction getRecurrenceCollection(monthCollection, expectedDays) {\n    var index;\n    var recurrenceCollectionObject = { monthCollection: [], index: 0 };\n    if (expectedDays.length === 1) {\n        // To split numeric value from BYDAY property value\n        var expectedDaysArrays = expectedDays[0].match(SPLITNUMBERANDSTRING);\n        var arrPosition = void 0;\n        if (expectedDaysArrays.length > 1) {\n            arrPosition = parseInt(expectedDaysArrays[0], 10);\n            index = ((arrPosition < 1) ? (monthCollection.length + arrPosition) : arrPosition - 1);\n        }\n        else {\n            index = 0;\n            monthCollection = getDateCollectionforBySetPosNull(monthCollection);\n        }\n    }\n    else {\n        index = 0;\n        monthCollection = getDateCollectionforBySetPosNull(monthCollection);\n    }\n    recurrenceCollectionObject.monthCollection = monthCollection;\n    recurrenceCollectionObject.index = index;\n    return recurrenceCollectionObject;\n}\n/**\n * Internal method to process the data collections\n *\n * @param {number[]} dateCollection Accepts the date collections\n * @param {boolean} state Accepts the state\n * @param {Date} startDate Accepts the start date\n * @param {Date} endDate Accepts the end date\n * @param {number[]} data Accepts the collection of numbers\n * @param {RecRule} ruleObject Accepts the recurrence rule object\n * @returns {void}\n * @private\n */\nfunction insertDataCollection(dateCollection, state, startDate, endDate, data, ruleObject) {\n    var index = ((ruleObject.setPosition < 1) ?\n        (dateCollection.length + ruleObject.setPosition) : ruleObject.setPosition - 1);\n    if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(ruleObject.setPosition)) {\n        index = 0;\n        dateCollection = getDateCollectionforBySetPosNull(dateCollection);\n    }\n    if (dateCollection.length > 0) {\n        insertDatasIntoExistingCollection(dateCollection, state, startDate, endDate, data, ruleObject, index);\n    }\n}\n/**\n * To process month collection if BYSETPOS is null\n *\n * @param {number[]} monthCollection Accepts the month date collections\n * @returns {number[]} Returns the month date collections\n * @private\n */\nfunction getDateCollectionforBySetPosNull(monthCollection) {\n    var datas = [];\n    for (var week = 0; week < monthCollection.length; week++) {\n        for (var row = 0; row < monthCollection[parseInt(week.toString(), 10)].length; row++) {\n            datas.push(new Date(monthCollection[parseInt(week.toString(), 10)][parseInt(row.toString(), 10)]).getTime());\n        }\n    }\n    monthCollection = datas.length > 0 ? [datas] : [];\n    return monthCollection;\n}\n/**\n * To filter date collection based on BYDAY Index, then BYSETPOS and to insert datas into existing collection\n *\n * @param {number[]} monthCollection Accepts the month date collections\n * @param {Date} startDate Accepts the start date\n * @param {Date} endDate Accepts the end date\n * @param {number[]} data Accepts the date collections\n * @param {RecRule} ruleObject Accepts the recurrence rule object\n * @returns {void}\n * @private\n */\nfunction insertDateCollectionBasedonIndex(monthCollection, startDate, endDate, data, ruleObject) {\n    var expectedDays = ruleObject.day;\n    var state;\n    var datas = [];\n    var dateCollection = [];\n    var recurrenceCollections = getRecurrenceCollection(monthCollection, expectedDays);\n    monthCollection = recurrenceCollections.monthCollection;\n    var index = recurrenceCollections.index;\n    if (ruleObject.setPosition != null) {\n        dateCollection = [(filterDateCollectionByIndex(monthCollection, index, datas))];\n        insertDateCollectionBasedonBySetPos(dateCollection, state, startDate, endDate, data, ruleObject);\n    }\n    else {\n        if (monthCollection.length > 0) {\n            insertDatasIntoExistingCollection(monthCollection, state, startDate, endDate, data, ruleObject, index);\n        }\n    }\n    datas = [];\n}\n/**\n * To filter date collection when BYDAY property having values with number\n *\n * @param {number[]} monthCollection Accepts the date collections\n * @param {number} index Accepts the index of date collections\n * @param {number[]} datas Accepts the collection of dates\n * @returns {number[]} Returns the collection of dates\n * @private\n */\nfunction filterDateCollectionByIndex(monthCollection, index, datas) {\n    for (var week = 0; week < monthCollection[parseInt(index.toString(), 10)].length; week++) {\n        datas.push(monthCollection[parseInt(index.toString(), 10)][parseInt(week.toString(), 10)]);\n    }\n    return datas;\n}\n/**\n * To insert processed date collection in final array element\n *\n * @param {boolean} state Accepts the state of the recurrence rule\n * @param {Date} startDate Accepts the start date\n * @param {Date} endDate Accepts the end date\n * @param {number[]} data Accepts the collection of date\n * @param {RecRule} ruleObject Accepts the recurrence rule object\n * @param {number} dayData Accepts the date index\n * @returns {void}\n * @private\n */\nfunction insertDateCollection(state, startDate, endDate, data, ruleObject, dayData) {\n    var expectedCount = getDateCount(startDate, ruleObject);\n    var chDate = new Date(dayData);\n    state = validateRules(chDate, ruleObject);\n    if ((chDate >= startDate) && compareDates(chDate, endDate) && state\n        && expectedCount && (data.length + ruleObject.recExceptionCount) < expectedCount) {\n        excludeDateHandler(data, dayData);\n    }\n}\n/**\n * Return the last week number of given month and year.\n *\n * @param {number} year Accepts the Year in number format\n * @param {number} startDayOfWeek Accepts the start date\n * @param {number[]} monthCollection Accepts the collection of dates\n * @param {number} week Accepts the week in number format\n * @param {RecRule} ruleObject Accepts the recurrence rule object\n * @returns {number} returns week number\n * @private\n */\nfunction weekCount(year, startDayOfWeek, monthCollection, week, ruleObject) {\n    var firstDayOfWeek = startDayOfWeek || 0;\n    var firstOfMonth = new Date(year, ruleObject.month[0] - 1, 1);\n    var lastOfMonth = new Date(year, ruleObject.month[0], 0);\n    var numberOfDaysInMonth = lastOfMonth.getDate();\n    var firstWeekDay = (firstOfMonth.getDay() - firstDayOfWeek + 7) % 7;\n    var used = firstWeekDay + numberOfDaysInMonth;\n    var count = Math.ceil(used / 7) - 1;\n    var dayData = monthCollection[parseInt(week.toString(), 10)][parseInt(count.toString(), 10)];\n    var chDate = new Date(dayData);\n    var state = validateRules(chDate, ruleObject);\n    return (state) ? count : count - 1;\n}\n/**\n * To process date collection based on Byset position after process the collection based on BYDAY property value index: EX:BYDAY=1SUm-1SU\n *\n * @param {number[]} monthCollection Accepts the collection of dates\n * @param {boolean} state Accepts the state of the recurrence rule\n * @param {Date} startDate Accepts the start date\n * @param {Date} endDate Accepts the end date\n * @param {number[]} data Accepts the collection of date\n * @param {RecRule} ruleObject Accepts the recurrence rule object\n * @returns {void}\n * @private\n */\nfunction insertDateCollectionBasedonBySetPos(monthCollection, state, startDate, endDate, data, ruleObject) {\n    if (monthCollection.length > 0) {\n        for (var week = 0; week < monthCollection.length; week++) {\n            monthCollection[parseInt(week.toString(), 10)].sort();\n            var expectedDays = ruleObject.day;\n            var isHavingNumber = expectedDays.map(function (item) { return HASNUMBER.test(item); });\n            var weekIndex = (ruleObject.freq === 'YEARLY' && (ruleObject.validRules.indexOf('BYMONTH') > -1) &&\n                !(isHavingNumber.indexOf(true) > -1)) ?\n                weekCount(new Date(monthCollection[0][0]).getFullYear(), 0, monthCollection, week, ruleObject)\n                : (monthCollection[parseInt(week.toString(), 10)].length + ruleObject.setPosition);\n            var index = ((ruleObject.setPosition < 1) ? weekIndex : ruleObject.setPosition - 1);\n            var dayData = monthCollection[parseInt(week.toString(), 10)][parseInt(index.toString(), 10)];\n            insertDateCollection(state, startDate, endDate, data, ruleObject, dayData);\n        }\n    }\n}\n/**\n * To insert datas into existing collection which is processed from previous loop.\n *\n * @param {number[]} monthCollection Accepts the collection of dates\n * @param {boolean} state Accepts the state of the recurrence rule\n * @param {Date} startDate Accepts the start date\n * @param {Date} endDate Accepts the end date\n * @param {number[]} data Accepts the collection of date\n * @param {RecRule} ruleObject Accepts the recurrence rule object\n * @param {number} index Accepts the index value\n * @returns {void}\n * @private\n */\nfunction insertDatasIntoExistingCollection(monthCollection, state, startDate, endDate, data, ruleObject, index) {\n    if (monthCollection.length > 0) {\n        index = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(index) ? index :\n            ((ruleObject.setPosition < 1)\n                ? (monthCollection.length + ruleObject.setPosition) : ruleObject.setPosition - 1);\n        monthCollection[parseInt(index.toString(), 10)].sort();\n        for (var week = 0; week < monthCollection[parseInt(index.toString(), 10)].length; week++) {\n            var dayData = monthCollection[parseInt(index.toString(), 10)][parseInt(week.toString(), 10)];\n            insertDateCollection(state, startDate, endDate, data, ruleObject, dayData);\n        }\n    }\n}\n/**\n * Internal method to compare dates\n *\n * @param {Date} startDate Accepts the start date\n * @param {Date} endDate Accepts the end date\n * @returns {boolean} Returns the result of checking start and end dates\n * @private\n */\nfunction compareDates(startDate, endDate) {\n    return endDate ? (startDate <= endDate) : true;\n}\n/**\n * Internal method to get day string\n *\n * @param {string} expectedDays Accepts the exception date string\n * @returns {string} Returns the valid string\n * @private\n */\nfunction getDayString(expectedDays) {\n    // To get BYDAY value without numeric value\n    var newstr = expectedDays.replace(REMOVENUMBERINSTRING, '');\n    return newstr;\n}\n/**\n * Internal method to check day index\n *\n * @param {number} day Accepts the day index\n * @param {string[]} expectedDays Accepts the exception dates\n * @returns {boolean} Returns the index date\n * @private\n */\nfunction checkDayIndex(day, expectedDays) {\n    var sortedExpectedDays = [];\n    expectedDays.forEach(function (element) {\n        var expectedDaysNumberSplit = element.match(SPLITNUMBERANDSTRING);\n        if (expectedDaysNumberSplit.length === 2) {\n            sortedExpectedDays.push(expectedDaysNumberSplit[1]);\n        }\n        else {\n            sortedExpectedDays.push(expectedDaysNumberSplit[0]);\n        }\n    });\n    return (sortedExpectedDays.indexOf(DAYINDEX[parseInt(day.toString(), 10)]) === -1);\n}\n/**\n * Internal method to get start date of week\n *\n * @param {Date} startDate Accepts the start date\n * @param {string[]} expectedDays Accepts the exception dates\n * @returns {Date} Return the week start date\n * @private\n */\nfunction getStartDateForWeek(startDate, expectedDays) {\n    var tempDate = new Date(startDate.getTime());\n    var newstr;\n    if (expectedDays.length > 0) {\n        var expectedDaysArr = [];\n        for (var i = 0; i <= expectedDays.length - 1; i++) {\n            newstr = getDayString(expectedDays[parseInt(i.toString(), 10)]);\n            expectedDaysArr.push(newstr);\n        }\n        if (expectedDaysArr.indexOf(DAYINDEX[tempDate.getDay()]) === -1) {\n            do {\n                tempDate.setDate(tempDate.getDate() + 1);\n            } while (expectedDaysArr.indexOf(DAYINDEX[tempDate.getDay()]) === -1);\n        }\n    }\n    return tempDate;\n}\n/**\n * Method to generate recurrence rule object from given rule\n *\n * @param {string} rules Accepts the recurrence rule\n * @returns {RecRule} Returns the recurrence rule object\n */\nfunction extractObjectFromRule(rules) {\n    var ruleObject = {\n        freq: null,\n        interval: 1,\n        count: null,\n        until: null,\n        day: [],\n        wkst: null,\n        month: [],\n        weekNo: [],\n        monthDay: [],\n        yearDay: [],\n        setPosition: null,\n        validRules: []\n    };\n    var rulesList = rules.split(';');\n    var splitData = [];\n    var temp;\n    rulesList.forEach(function (data) {\n        splitData = data.split('=');\n        switch (splitData[0]) {\n            case 'UNTIL':\n                temp = splitData[1];\n                ruleObject.until = getDateFromRecurrenceDateString(temp);\n                break;\n            case 'BYDAY':\n                ruleObject.day = splitData[1].split(',');\n                ruleObject.validRules.push(splitData[0]);\n                break;\n            case 'BYMONTHDAY':\n                ruleObject.monthDay = splitData[1].split(',').map(Number);\n                ruleObject.validRules.push(splitData[0]);\n                break;\n            case 'BYMONTH':\n                ruleObject.month = splitData[1].split(',').map(Number);\n                ruleObject.validRules.push(splitData[0]);\n                break;\n            case 'BYYEARDAY':\n                ruleObject.yearDay = splitData[1].split(',').map(Number);\n                ruleObject.validRules.push(splitData[0]);\n                break;\n            case 'BYWEEKNO':\n                ruleObject.weekNo = splitData[1].split(',').map(Number);\n                ruleObject.validRules.push(splitData[0]);\n                break;\n            case 'INTERVAL':\n                ruleObject.interval = parseInt(splitData[1], 10);\n                break;\n            case 'COUNT':\n                ruleObject.count = parseInt(splitData[1], 10);\n                break;\n            case 'BYSETPOS':\n                ruleObject.setPosition = parseInt(splitData[1], 10) > 4 ? -1 : parseInt(splitData[1], 10);\n                break;\n            case 'FREQ':\n                ruleObject.freq = splitData[1];\n                break;\n            case 'WKST':\n                ruleObject.wkst = splitData[1];\n                break;\n        }\n    });\n    if ((ruleObject.freq === 'MONTHLY') && (ruleObject.monthDay.length === 0)) {\n        var index = ruleObject.validRules.indexOf('BYDAY');\n        ruleObject.validRules.splice(index, 1);\n    }\n    return ruleObject;\n}\n/**\n * Internal method to validate proper date\n *\n * @param {Date} tempDate Accepts the date value\n * @param {number} data Accepts the data value\n * @param {Date} startDate Accepts the start date\n * @returns {boolean} Returns the result of date validate\n * @private\n */\nfunction validateProperDate(tempDate, data, startDate) {\n    var maxDate = calendarUtil.getMonthDaysCount(tempDate);\n    return (data <= maxDate) && (tempDate >= startDate);\n}\n/**\n * Internal method to process week days\n *\n * @param {string[]} expectedDays Accepts the expection dates\n * @returns {Object} Returns the weekdays object\n * @private\n */\nfunction processWeekDays(expectedDays) {\n    var dayCycle = {};\n    expectedDays.forEach(function (element, index) {\n        if (index === expectedDays.length - 1) {\n            var startIndex = dayIndex.indexOf(element);\n            var temp = startIndex;\n            while (temp % 7 !== dayIndex.indexOf(expectedDays[0])) {\n                temp++;\n            }\n            dayCycle[\"\" + element] = temp - startIndex;\n        }\n        else {\n            dayCycle[\"\" + element] = dayIndex.indexOf(expectedDays[(index + 1)]) - dayIndex.indexOf(element);\n        }\n    });\n    return dayCycle;\n}\n/**\n * Internal method to check date\n *\n * @param {Date} tempDate Accepts the date value\n * @param {number[]} expectedDate Accepts the exception dates\n * @returns {boolean} Returns the boolean value\n * @private\n */\nfunction checkDate(tempDate, expectedDate) {\n    var temp = expectedDate.slice(0);\n    var data;\n    var maxDate = calendarUtil.getMonthDaysCount(tempDate);\n    data = temp.shift();\n    while (data) {\n        if (data < 0) {\n            data = data + maxDate + 1;\n        }\n        if (data === tempDate.getDate()) {\n            return false;\n        }\n        data = temp.shift();\n    }\n    return true;\n}\n/**\n * Internal method to check the year value\n *\n * @param {Date} tempDate Accepts the date value\n * @param {number[]} expectedyearDay Accepts the exception dates in year\n * @returns {boolean} Returns the boolean value\n * @private\n */\nfunction checkYear(tempDate, expectedyearDay) {\n    var temp = expectedyearDay.slice(0);\n    var data;\n    var yearDay = getYearDay(tempDate);\n    data = temp.shift();\n    while (data) {\n        if (data < 0) {\n            data = data + calendarUtil.getYearDaysCount(tempDate, 0) + 1;\n        }\n        if (data === yearDay) {\n            return false;\n        }\n        data = temp.shift();\n    }\n    return true;\n}\n/**\n * Internal method to get the year day\n *\n * @param {Date} currentDate Accepts the date value\n * @returns {number} Returns the boolean value\n * @private\n */\nfunction getYearDay(currentDate) {\n    if (!startDateCollection[calendarUtil.getFullYear(currentDate)]) {\n        startDateCollection[calendarUtil.getFullYear(currentDate)] = calendarUtil.getYearLastDate(currentDate, 0);\n    }\n    var tempDate = startDateCollection[calendarUtil.getFullYear(currentDate)];\n    var diff = currentDate.getTime() - tempDate.getTime();\n    return Math.ceil(diff / _schedule_base_util__WEBPACK_IMPORTED_MODULE_1__.MS_PER_DAY);\n}\n/**\n * Internal method to validate monthly rule type\n *\n * @param {RecRule} ruleObject Accepts the recurrence rule object\n * @returns {MonthlyType} Returns the monthly type object\n * @private\n */\nfunction validateMonthlyRuleType(ruleObject) {\n    if (ruleObject.monthDay.length && !ruleObject.day.length) {\n        return 'date';\n    }\n    else if (!ruleObject.monthDay.length && ruleObject.day.length) {\n        return 'day';\n    }\n    return 'both';\n}\n/**\n * Internal method to re-order the week days based on first day of week\n *\n * @param {string[]} days Accepts the week days value\n * @returns {void}\n * @private\n */\nfunction rotate(days) {\n    var data = days.shift();\n    days.push(data);\n}\n/**\n * Internal method to set first day of week\n *\n * @param {string} day Accepts the first day string\n * @returns {void}\n * @private\n */\nfunction setFirstDayOfWeek(day) {\n    while (dayIndex[0] !== day) {\n        rotate(dayIndex);\n    }\n}\n/**\n * Internal method to validate recurrence rule\n *\n * @param {Date} tempDate Accepts the date value\n * @param {RecRule} ruleObject Accepts the recurrence rule object\n * @returns {boolean} Returns the boolean value\n * @private\n */\nfunction validateRules(tempDate, ruleObject) {\n    var state = true;\n    var expectedDays = ruleObject.day;\n    var expectedMonth = ruleObject.month;\n    var expectedDate = calendarUtil.getExpectedDays(tempDate, ruleObject.monthDay);\n    var expectedyearDay = ruleObject.yearDay;\n    ruleObject.validRules.forEach(function (rule) {\n        switch (rule) {\n            case 'BYDAY':\n                if (checkDayIndex(tempDate.getDay(), expectedDays)) {\n                    state = false;\n                }\n                break;\n            case 'BYMONTH':\n                if (calendarUtil.checkMonth(tempDate, expectedMonth)) {\n                    state = false;\n                }\n                break;\n            case 'BYMONTHDAY':\n                if (checkDate(tempDate, expectedDate)) {\n                    state = false;\n                }\n                break;\n            case 'BYYEARDAY':\n                if (checkYear(tempDate, expectedyearDay)) {\n                    state = false;\n                }\n                break;\n        }\n    });\n    return state;\n}\n/**\n * Internal method to get calendar util\n *\n * @param {CalendarType} calendarMode Accepts the calendar type object\n * @returns {CalendarUtil} Returns the calendar util object\n * @private\n */\nfunction getCalendarUtil(calendarMode) {\n    if (calendarMode === 'Islamic') {\n        return new _common_calendar_util__WEBPACK_IMPORTED_MODULE_2__.Islamic();\n    }\n    return new _common_calendar_util__WEBPACK_IMPORTED_MODULE_2__.Gregorian();\n}\nvar startDateCollection = {};\nvar tempExcludeDate;\nvar dayIndex = ['SU', 'MO', 'TU', 'WE', 'TH', 'FR', 'SA'];\nvar maxOccurrence;\nvar tempViewDate;\nvar calendarUtil;\nvar DAYINDEX = ['SU', 'MO', 'TU', 'WE', 'TH', 'FR', 'SA'];\nvar MAXOCCURRENCE = 43;\nvar WEEKPOS = ['first', 'second', 'third', 'fourth', 'last'];\nvar TIMES = 'summaryTimes';\nvar ON = 'summaryOn';\nvar EVERY = 'every';\nvar UNTIL = 'summaryUntil';\nvar DAYS = 'summaryDay';\nvar WEEKS = 'summaryWeek';\nvar MONTHS = 'summaryMonth';\nvar YEARS = 'summaryYear';\nvar DAYINDEXOBJECT = {\n    SU: 'sun',\n    MO: 'mon',\n    TU: 'tue',\n    WE: 'wed',\n    TH: 'thu',\n    FR: 'fri',\n    SA: 'sat'\n};\n// To check string has number\nvar HASNUMBER = /\\d/;\n// To find the numbers in string\nvar REMOVENUMBERINSTRING = /[^A-Z]+/;\n// To split number and string\nvar SPLITNUMBERANDSTRING = /[a-z]+|[^a-z]+/gi;\n/**\n * Method to generate string from date\n *\n * @param {Date} date Accepts the date value\n * @returns {string} Returns the string value\n */\nfunction getRecurrenceStringFromDate(date) {\n    return [date.getUTCFullYear(),\n        roundDateValues(date.getUTCMonth() + 1),\n        roundDateValues(date.getUTCDate()),\n        'T',\n        roundDateValues(date.getUTCHours()),\n        roundDateValues(date.getUTCMinutes()),\n        roundDateValues(date.getUTCSeconds()),\n        'Z'].join('');\n}\n/**\n * Internal method to round the date values\n *\n * @param {string | number} date Accepts the date value in either string or number format\n * @returns {string} Returns the date value in string format\n * @private\n */\nfunction roundDateValues(date) {\n    return ('0' + date).slice(-2);\n}\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-schedule/src/recurrence-editor/date-generator.js?");

/***/ })

}]);