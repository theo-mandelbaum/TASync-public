"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkej2_vue_samples"] = self["webpackChunkej2_vue_samples"] || []).push([["chunk-vendors-node_modules_syncfusion_ej2-pdf_src_pdf_core_graphics_pdf-path_js-5573a10c"],{

/***/ "./node_modules/@syncfusion/ej2-pdf/src/pdf/core/graphics/pdf-path.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-pdf/src/pdf/core/graphics/pdf-path.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PdfPath: () => (/* binding */ PdfPath)\n/* harmony export */ });\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./../utils */ \"./node_modules/@syncfusion/ej2-pdf/src/pdf/core/utils.js\");\n/* harmony import */ var _enumerator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./../enumerator */ \"./node_modules/@syncfusion/ej2-pdf/src/pdf/core/enumerator.js\");\n\n\n/**\n * Implements graphics path, which is a sequence of primitive graphics elements.\n *\n * ```typescript\n * // Load an existing PDF document\n * let document: PdfDocument = new PdfDocument(data, password);\n * // Access the first page\n * let page: PdfPage = document.getPage(0);\n * // Gets the graphics object of the PDF page\n * let graphics: PdfGraphics = page.graphics;\n * // Create a new pen\n * let pen: PdfPen = new PdfPen([0, 0, 0], 1);\n * // Create a new PDF path\n * let path: PdfPath = new PdfPath();\n * // Add a line to the Graphics path\n * path.addLine(10, 250, 200, 250);\n * // Draw the path on the PDF page\n * graphics.drawPath(path, pen);\n * // Save the document\n * document.save('output.pdf');\n * // Destroy the document\n * document.destroy();\n * ```\n */\nvar PdfPath = /** @class */ (function () {\n    function PdfPath(points, pathTypes) {\n        this._points = [];\n        this._pathTypes = [];\n        this._isRoundedRectangle = false;\n        this._fillMode = _enumerator__WEBPACK_IMPORTED_MODULE_1__.PdfFillMode.winding;\n        this._isStart = true;\n        this._isXps = false;\n        this._brush = undefined;\n        this._pen = undefined;\n        if (points && pathTypes) {\n            if (Array.isArray(points) && Array.isArray(pathTypes)) {\n                this._points = points;\n                this._pathTypes = pathTypes;\n            }\n            else {\n                throw new Error('Invalid constructor arguments.');\n            }\n        }\n        else {\n            this._points = [];\n            this._pathTypes = [];\n        }\n    }\n    Object.defineProperty(PdfPath.prototype, \"lastPoint\", {\n        /**\n         * Gets the last point of the path.\n         *\n         * @returns {number[]} The value of the last point.\n         *\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data, password);\n         * // Access the first page\n         * let page: PdfPage = document.getPage(0);\n         * // Gets the graphics object of the PDF page\n         * let graphics: PdfGraphics = page.graphics;\n         * // Create a new pen\n         * let pen: PdfPen = new PdfPen([0, 0, 0], 1);\n         * // Create a new brush\n         * let brush: PdfBrush = new PdfBrush([0, 255, 255]);\n         * // Create a new PDF path\n         * let path: PdfPath = new PdfPath([[50, 50], [100, 50], [100, 100], [50, 100], [50, 50]], [0, 1, 1, 1, 1]);\n         * // Get the last point of the path.\n         * let lastPoint: number[] = path.lastPoint;\n         * // Draw the path on the PDF page.\n         * page.graphics.drawPath(path, pen, brush);\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        get: function () {\n            var value = [0, 0];\n            var count = this._points.length;\n            if (this._points.length > 0) {\n                value[0] = this._points[count - 1][0];\n                value[1] = this._points[count - 1][1];\n            }\n            return value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfPath.prototype, \"pathPoints\", {\n        /**\n         * Gets the array of points that represent the x and y coordinates defining the path.\n         *\n         * @returns {Array<number[]>} An array of arrays of numbers, where each inner array represents a set of points.\n         *\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data, password);\n         * // Access the first page\n         * let page: PdfPage = document.getPage(0);\n         * // Gets the graphics object of the PDF page\n         * let graphics: PdfGraphics = page.graphics;\n         * // Create a new pen\n         * let pen: PdfPen = new PdfPen([0, 0, 0], 1);\n         * // Create a new brush\n         * let brush: PdfBrush = new PdfBrush([0, 255, 255]);\n         * // Create a new PDF path\n         * let path: PdfPath = new PdfPath([[50, 50], [100, 50], [100, 100], [50, 100], [50, 50]], [0, 1, 1, 1, 1]);\n         * // Get the path points of the path\n         * let pathPoints: Array<number[]> = path.pathPoints;\n         * // Draw the path on the PDF page\n         * page.graphics.drawPath(path, pen, brush);\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        get: function () {\n            return this._points;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfPath.prototype, \"pathTypes\", {\n        /**\n         * Gets the types of the corresponding points in the path.\n         *\n         * @returns {PathPointType[]} An array of `PathPointType` objects representing the types of each path point.\n         *\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data, password);\n         * // Access the first page\n         * let page: PdfPage = document.getPage(0);\n         * // Gets the graphics object of the PDF page\n         * let graphics: PdfGraphics = page.graphics;\n         * // Create a new pen\n         * let pen: PdfPen = new PdfPen([0, 0, 0], 1);\n         * // Create a new brush\n         * let brush: PdfBrush = new PdfBrush([0, 255, 255]);\n         * // Create a new PDF path\n         * let path: PdfPath = new PdfPath([[50, 50], [100, 50], [100, 100], [50, 100], [50, 50]], [0, 1, 1, 1, 1]);\n         * // Get the path types of the path\n         * let pathTypes: PathPointType[] = path.pathTypes;\n         * // Draw the path on the PDF page\n         * page.graphics.drawPath(path, pen, brush);\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        get: function () {\n            return this._pathTypes;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfPath.prototype, \"fillMode\", {\n        /**\n         * Gets the fill mode.\n         *\n         * @returns {PdfFillMode} The fill mode of the PDF path.\n         *\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data, password);\n         * // Access the first page\n         * let page: PdfPage = document.getPage(0);\n         * // Gets the graphics object of the PDF page\n         * let graphics: PdfGraphics = page.graphics;\n         * // Create a new pen\n         * let pen: PdfPen = new PdfPen([0, 0, 0], 1);\n         * // Create a new brush\n         * let brush: PdfBrush = new PdfBrush([0, 255, 255]);\n         * // Create a new PDF path\n         * let path: PdfPath = new PdfPath([[50, 50], [100, 50], [100, 100], [50, 100], [50, 50]], [0, 1, 1, 1, 1]);\n         * // Get the fill mode of the path\n         * let fillMode: PdfFillMode = path.fillMode;\n         * // Draw the path on the PDF page\n         * page.graphics.drawPath(path, pen, brush);\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        get: function () {\n            return this._fillMode;\n        },\n        /**\n         * Sets the fill mode.\n         *\n         * @param {PdfFillMode} mode The fill mode of the path.\n         *\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data, password);\n         * // Access the first page\n         * let page: PdfPage = document.getPage(0);\n         * // Gets the graphics object of the PDF page\n         * let graphics: PdfGraphics = page.graphics;\n         * // Create a new pen\n         * let pen: PdfPen = new PdfPen([0, 0, 0], 1);\n         * // Create a new brush\n         * let brush: PdfBrush = new PdfBrush([0, 255, 255]);\n         * // Create a new PDF path\n         * let path: PdfPath = new PdfPath([[50, 50], [100, 50], [100, 100], [50, 100], [50, 50]], [0, 1, 1, 1, 1]);\n         * // Set the fill mode of the path\n         * path.fillMode = PdfFillMode.alternate;\n         * // Draw the path on the PDF page\n         * page.graphics.drawPath(path, pen, brush);\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        set: function (mode) {\n            this._fillMode = mode;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    PdfPath.prototype.addPath = function (arg1, arg2) {\n        if (arg1 instanceof PdfPath) {\n            this._addPath(arg1._points, arg1._pathTypes);\n        }\n        else if (Array.isArray(arg1) && Array.isArray(arg2)) {\n            this._addPath(arg1, arg2);\n        }\n    };\n    PdfPath.prototype._addPath = function (pathPoints, pathTypes) {\n        if (!pathPoints || pathPoints.length === 0) {\n            throw new Error('Path points cannot be null or undefined.');\n        }\n        if (!pathTypes || pathTypes.length === 0) {\n            throw new Error('Path types cannot be null or undefined.');\n        }\n        if (pathPoints.length !== pathTypes.length) {\n            throw new Error('The argument arrays should be of equal length.');\n        }\n        for (var i = 0; i < pathPoints.length; i++) {\n            if (i >= pathPoints.length || i < 0) {\n                throw new Error('Index' + i + 'is out of bounds.');\n            }\n            this._points.push(pathPoints[Number.parseInt(i.toString(), 10)].slice());\n            this._pathTypes.push(pathTypes[Number.parseInt(i.toString(), 10)]);\n        }\n    };\n    /**\n     * Adds a line segment to the path.\n     *\n     * @param {number} x1 The x-coordinate of the starting point of the line.\n     * @param {number} y1 The y-coordinate of the starting point of the line.\n     * @param {number} x2 The x-coordinate of the ending point of the line.\n     * @param {number} y2 The y-coordinate of the ending point of the line.\n     * @returns {void} Nothing\n     *\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data, password);\n     * // Access the first page\n     * let page: PdfPage = document.getPage(0);\n     * // Gets the graphics object of the PDF page\n     * let graphics: PdfGraphics = page.graphics;\n     * // Create a new pen\n     * let pen: PdfPen = new PdfPen([0, 0, 0], 1);\n     * // Create a new PDF path\n     * let path: PdfPath = new PdfPath();\n     * // Add a line segment to the path\n     * path.addLine(10, 250, 200, 250);\n     * // Draw the path on the PDF page\n     * graphics.drawPath(path, pen);\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    PdfPath.prototype.addLine = function (x1, y1, x2, y2) {\n        this._addPoints([x1, y1, x2, y2], _enumerator__WEBPACK_IMPORTED_MODULE_1__.PathPointType.line);\n    };\n    PdfPath.prototype._addLines = function (linePoints) {\n        var start = linePoints[0];\n        if (linePoints.length === 1) {\n            this._addPoint(linePoints[0], _enumerator__WEBPACK_IMPORTED_MODULE_1__.PathPointType.line);\n        }\n        else {\n            for (var i = 1; i < linePoints.length; i++) {\n                var last = linePoints[Number.parseInt(i.toString(), 10)];\n                this.addLine(start[0], start[1], last[0], last[1]);\n                start = last;\n            }\n        }\n    };\n    PdfPath.prototype._addPoints = function (points, type, start, end) {\n        var startIndex = (typeof start !== 'undefined') ? start : 0;\n        var endIndex = (typeof end !== 'undefined') ? end : points.length;\n        for (var i = startIndex; i < endIndex; i += 2) {\n            var point = [points[Number.parseInt(i.toString(), 10)], points[i + 1]];\n            if (i === startIndex) {\n                if (this._points.length === 0 || this._isStart) {\n                    this._addPoint(point, _enumerator__WEBPACK_IMPORTED_MODULE_1__.PathPointType.start);\n                    this._isStart = false;\n                }\n                else if (this._isRoundedRectangle && (point[0] !== this.lastPoint[0] || point[1] !== this.lastPoint[1])) {\n                    this._addPoint(point, _enumerator__WEBPACK_IMPORTED_MODULE_1__.PathPointType.line);\n                }\n                else if (point[0] !== this.lastPoint[0] && point[1] !== this.lastPoint[1]) {\n                    this._addPoint(point, _enumerator__WEBPACK_IMPORTED_MODULE_1__.PathPointType.line);\n                }\n            }\n            else {\n                this._addPoint(point, type);\n            }\n        }\n    };\n    PdfPath.prototype._addPoint = function (point, type) {\n        this._points.push(point);\n        this._pathTypes.push(type);\n    };\n    /**\n     * Adds an arc within a bounding rectangle using the angles that define the start and sweep of the arc.\n     *\n     * @param {number} x The x-coordinate of the upper-left corner of the rectangular region.\n     * @param {number} y The y-coordinate of the upper-left corner of the rectangular region.\n     * @param {number} width The width of the rectangular region.\n     * @param {number} height The height of the rectangular region.\n     * @param {number} startAngle The start angle of the arc.\n     * @param {number} sweepAngle The angle between start angle and the end of the arc.\n     * @returns {void} Nothing\n     *\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(readFromResources('Empty.pdf'));\n     * // Access the first page\n     * let page: PdfPage = document.getPage(0);\n     * // Gets the graphics object of the PDF page\n     * let graphics: PdfGraphics = page.graphics;\n     * // Create a new pen\n     * let pen: PdfPen = new PdfPen([0, 0, 0], 1);\n     * // Create a new PDF path\n     * let path: PdfPath = new PdfPath();\n     * // Add a Bezier curve to the path\n     * path.addBezier(10, 100, 50, 150, 150, 150, 200, 100);\n     * // Draw the path on the PDF page\n     * graphics.drawPath(path, pen);\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    PdfPath.prototype.addArc = function (x, y, width, height, startAngle, sweepAngle) {\n        var points = (0,_utils__WEBPACK_IMPORTED_MODULE_0__._getBezierArc)(x, y, x + width, y + height, startAngle, sweepAngle);\n        for (var i = 0; i < points.length; ++i) {\n            var list = [points[Number.parseInt(i.toString(), 10)],\n                points[++i],\n                points[++i],\n                points[++i],\n                points[++i],\n                points[++i],\n                points[++i],\n                points[++i]];\n            this._addPoints(list, _enumerator__WEBPACK_IMPORTED_MODULE_1__.PathPointType.bezier);\n        }\n    };\n    /**\n     * Adds a rectangle to the path.\n     *\n     * @param {number} x The x-coordinate of the upper-left corner of the rectangle.\n     * @param {number} y The y-coordinate of the upper-left corner of the rectangle.\n     * @param {number} width The width of the rectangle.\n     * @param {number} height The height of the rectangle.\n     * @returns {void} Nothing\n     *\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data, password);\n     * // Access the first page\n     * let page: PdfPage = document.getPage(0);\n     * // Gets the graphics object of the PDF page\n     * let graphics: PdfGraphics = page.graphics;\n     * // Create a new pen\n     * let pen: PdfPen = new PdfPen([0, 0, 0], 1);\n     * // Create a new brush\n     * let brush: PdfBrush = new PdfBrush([0, 255, 255]);\n     * // Create a new PDF path\n     * let path: PdfPath = new PdfPath();\n     * // Add a rectangle to the path\n     * path.addRectangle(10, 20, 50, 100);\n     * // Draw the path on the PDF page\n     * graphics.drawPath(path, pen, brush);\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    PdfPath.prototype.addRectangle = function (x, y, width, height) {\n        this.startFigure();\n        this._addPoints([x, y, x + width, y, x + width, y + height, x, y + height], _enumerator__WEBPACK_IMPORTED_MODULE_1__.PathPointType.line);\n        this.closeFigure();\n    };\n    /**\n     * Adds a polygon to the path.\n     *\n     * @param {Array<number[]>} points The points of the polygon, where each point is an array of two numbers representing the x and y coordinates.\n     * @returns {void} Nothing\n     *\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data, password);\n     * // Access the first page\n     * let page: PdfPage = document.getPage(0);\n     * // Gets the graphics object of the PDF page\n     * let graphics: PdfGraphics = page.graphics;\n     * // Create a new pen\n     * let pen: PdfPen = new PdfPen([0, 0, 0], 1);\n     * // Create a new brush\n     * let brush: PdfBrush = new PdfBrush([0, 255, 255]);\n     * // Create a new PDF path\n     * let path: PdfPath = new PdfPath();\n     * // Add a polygon to the path\n     * path.addPolygon([[200, 10], [300, 100], [150, 100], [200, 10]]);\n     * // Draw the path on the PDF page\n     * graphics.drawPath(path, pen, brush);\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    PdfPath.prototype.addPolygon = function (points) {\n        var newPoints = [];\n        points.forEach(function (element) {\n            newPoints.push(element[0], element[1]);\n        });\n        this.startFigure();\n        this._addPoints(newPoints, _enumerator__WEBPACK_IMPORTED_MODULE_1__.PathPointType.line);\n        this.closeFigure();\n    };\n    /**\n     * Adds an ellipse to the path.\n     *\n     * @param {number} x The x-coordinate of the upper-left corner of the rectangular region that bounds the ellipse.\n     * @param {number} y The y-coordinate of the upper-left corner of the rectangular region that bounds the ellipse.\n     * @param {number} width The width of the bounding rectangle for the ellipse.\n     * @param {number} height The height of the bounding rectangle for the ellipse.\n     * @returns {void} Nothing\n     *\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data, password);\n     * // Access the first page\n     * let page: PdfPage = document.getPage(0);\n     * // Gets the graphics object of the PDF page\n     * let graphics: PdfGraphics = page.graphics;\n     * // Create a new pen\n     * let pen: PdfPen = new PdfPen([0, 0, 0], 1);\n     * // Create a new brush\n     * let brush: PdfBrush = new PdfBrush([0, 255, 255]);\n     * // Create a new PDF path\n     * let path: PdfPath = new PdfPath();\n     * // Add an ellipse to the path\n     * path.addEllipse(200, 200, 100, 50);\n     * // Draw the path on the PDF page\n     * graphics.drawPath(path, pen, brush);\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    PdfPath.prototype.addEllipse = function (x, y, width, height) {\n        this.startFigure();\n        this.addArc(x, y, width, height, 0, 360);\n        this.closeFigure();\n    };\n    /**\n     * Adds a Bezier curve to the path using specified coordinates for the start point, two control points, and the end point.\n     *\n     * @param {number} startX The x-coordinate of the starting point of the Bezier curve.\n     * @param {number} startY The y-coordinate of the starting point of the Bezier curve.\n     * @param {number} firstX The x-coordinate of the first control point of the Bezier curve.\n     * @param {number} firstY The y-coordinate of the first control point of the Bezier curve.\n     * @param {number} secondX The x-coordinate of the second control point of the Bezier curve.\n     * @param {number} secondY The y-coordinate of the second control point of the Bezier curve.\n     * @param {number} endX The x-coordinate of the ending point of the Bezier curve.\n     * @param {number} endY The y-coordinate of the ending point of the Bezier curve.\n     * @returns {void} Nothing\n     *\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data, password);\n     * // Access the first page\n     * let page: PdfPage = document.getPage(0);\n     * // Gets the graphics object of the PDF page\n     * let graphics: PdfGraphics = page.graphics;\n     * // Create a new pen\n     * let pen: PdfPen = new PdfPen([0, 0, 0], 1);\n     * // Create a new brush\n     * let brush: PdfBrush = new PdfBrush([0, 255, 255]);\n     * // Create a new PDF path\n     * let path: PdfPath = new PdfPath();\n     * // Add a Bezier curve to the path\n     * path.addBezier(100, 100, 150, 150, 50, 250, 100, 300);\n     * // Draw the path on the PDF page\n     * graphics.drawPath(path, pen, brush);\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    PdfPath.prototype.addBezier = function (startX, startY, firstX, firstY, secondX, secondY, endX, endY) {\n        var points = [startX, startY, firstX, firstY, secondX, secondY, endX, endY];\n        this._addPoints(points, _enumerator__WEBPACK_IMPORTED_MODULE_1__.PathPointType.bezier);\n    };\n    PdfPath.prototype._addBezierPoints = function (pointsCollection) {\n        if (pointsCollection.length < 4) {\n            throw Error('Incorrect size of array points');\n        }\n        var bound = 3;\n        var index = 0;\n        var start = pointsCollection[Number.parseInt(index.toString(), 10)];\n        index++;\n        while ((index + bound) <= pointsCollection.length) {\n            var inner1 = pointsCollection[Number.parseInt(index.toString(), 10)];\n            index++;\n            var inner2 = pointsCollection[Number.parseInt(index.toString(), 10)];\n            index++;\n            var end = pointsCollection[Number.parseInt(index.toString(), 10)];\n            index++;\n            this.addBezier(start[0], start[1], inner1[0], inner1[1], inner2[0], inner2[1], end[0], end[1]);\n            start = end;\n        }\n    };\n    /**\n     * Adds a pie slice to the path.\n     *\n     * @param {number} x The x-coordinate of the upper-left corner of the bounding rectangle.\n     * @param {number} y The y-coordinate of the upper-left corner of the bounding rectangle.\n     * @param {number} width The width of the bounding rectangle.\n     * @param {number} height The height of the bounding rectangle.\n     * @param {number} startAngle The angle in degrees measured clockwise from the x-axis to the start of the pie slice.\n     * @param {number} sweepAngle The angle in degrees measured clockwise from the startAngle parameter to the end of the pie slice.\n     * @returns {void} Nothing\n     *\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data, password);\n     * // Access the first page\n     * let page: PdfPage = document.getPage(0);\n     * // Gets the graphics object of the PDF page\n     * let graphics: PdfGraphics = page.graphics;\n     * // Create a new pen\n     * let pen: PdfPen = new PdfPen([0, 0, 0], 1);\n     * // Create a new brush\n     * let brush: PdfBrush = new PdfBrush([0, 255, 255]);\n     * // Create a new PDF path\n     * let path: PdfPath = new PdfPath();\n     * // Add a pie slice to the path\n     * path.addPie(0, 20, 100, 100, 270, 45);\n     * // Draw the path on the PDF page\n     * graphics.drawPath(path, pen, brush);\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    PdfPath.prototype.addPie = function (x, y, width, height, startAngle, sweepAngle) {\n        this.startFigure();\n        this.addArc(x, y, width, height, startAngle, sweepAngle);\n        this._addPoint([x + width / 2, y + height / 2], _enumerator__WEBPACK_IMPORTED_MODULE_1__.PathPointType.line);\n        this.closeFigure();\n    };\n    /**\n     * Starts a new figure in the path.\n     *\n     * @returns {void} Nothing\n     *\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data, password);\n     * // Access the first page\n     * let page: PdfPage = document.getPage(0);\n     * // Gets the graphics object of the PDF page\n     * let graphics: PdfGraphics = page.graphics;\n     * // Create a new pen\n     * let pen: PdfPen = new PdfPen([0, 0, 0], 1);\n     * // Create a new brush\n     * let brush: PdfBrush = new PdfBrush([0, 255, 255]);\n     * // Create a new PDF path\n     * let path: PdfPath = new PdfPath();\n     * // Start a new figure in the path\n     * path.startFigure();\n     * // Add some path points (optional)\n     * path.addLine(50, 50, 100, 50);\n     * // Draw the path on the PDF page\n     * graphics.drawPath(path, pen, brush);\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    PdfPath.prototype.startFigure = function () {\n        this._isStart = true;\n    };\n    PdfPath.prototype.closeFigure = function (index) {\n        if (typeof index !== 'undefined') {\n            var type = this._pathTypes[Number.parseInt(index.toString(), 10)];\n            type |= _enumerator__WEBPACK_IMPORTED_MODULE_1__.PathPointType.closePath;\n            this._pathTypes[Number.parseInt(index.toString(), 10)] = type;\n        }\n        else {\n            if (this._points.length > 0) {\n                this.closeFigure(this._points.length - 1);\n            }\n            this.startFigure();\n        }\n    };\n    /**\n     * Closes all non-closed figures in the path.\n     *\n     * @returns {void} Nothing\n     *\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data, password);\n     * // Access the first page\n     * let page: PdfPage = document.getPage(0);\n     * // Gets the graphics object of the PDF page\n     * let graphics: PdfGraphics = page.graphics;\n     * // Create a new pen\n     * let pen: PdfPen = new PdfPen([0, 0, 0], 1);\n     * // Create a new brush\n     * let brush: PdfBrush = new PdfBrush([0, 255, 255]);\n     * // Create a new PDF path\n     * let path: PdfPath = new PdfPath([[50, 50], [100, 50], [100, 100], [50, 100], [50, 50]], [0, 1, 1, 1, 1]);\n     * // Close all non-closed figures\n     * path.closeAllFigures();\n     * // Draw the path on the PDF page\n     * page.graphics.drawPath(path, pen, brush);\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    PdfPath.prototype.closeAllFigures = function () {\n        for (var i = 0; i < this._points.length; ++i) {\n            var pointType = this._pathTypes[Number.parseInt(i.toString(), 10)];\n            var flag = false;\n            if (i !== 0 && pointType === _enumerator__WEBPACK_IMPORTED_MODULE_1__.PathPointType.start) {\n                this.closeFigure(i - 1);\n                flag = true;\n            }\n            else if (i === this._pathTypes.length - 1 && !flag && this._isXps) {\n                if (this._points[0][0] === this._points[Number.parseInt(i.toString(), 10)][0] &&\n                    this._points[0][1] === this._points[Number.parseInt(i.toString(), 10)][1]) {\n                    this.closeFigure(i);\n                }\n            }\n        }\n    };\n    PdfPath.prototype._getBounds = function () {\n        var bounds = [0, 0, 0, 0];\n        if (this._points.length > 0) {\n            var xmin = this._points[0][0];\n            var xmax = this._points[0][0];\n            var ymin = this._points[0][1];\n            var ymax = this._points[0][1];\n            for (var i = 1; i < this._points.length; ++i) {\n                var point = this._points[Number.parseInt(i.toString(), 10)];\n                xmin = Math.min(point[0], xmin);\n                xmax = Math.max(point[0], xmax);\n                ymin = Math.min(point[1], ymin);\n                ymax = Math.max(point[1], ymax);\n            }\n            bounds = [xmin, ymin, xmax - xmin, ymax - ymin];\n        }\n        return bounds;\n    };\n    return PdfPath;\n}());\n\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-pdf/src/pdf/core/graphics/pdf-path.js?");

/***/ })

}]);