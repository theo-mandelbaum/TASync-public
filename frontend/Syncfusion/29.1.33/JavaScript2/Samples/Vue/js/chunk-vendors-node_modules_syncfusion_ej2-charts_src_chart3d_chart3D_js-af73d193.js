"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkej2_vue_samples"] = self["webpackChunkej2_vue_samples"] || []).push([["chunk-vendors-node_modules_syncfusion_ej2-charts_src_chart3d_chart3D_js-af73d193"],{

/***/ "./node_modules/@syncfusion/ej2-charts/src/chart3d/chart3D.js":
/*!********************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-charts/src/chart3d/chart3D.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Chart3D: () => (/* binding */ Chart3D)\n/* harmony export */ });\n/* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @syncfusion/ej2-base */ \"./node_modules/@syncfusion/ej2-base/index.js\");\n/* harmony import */ var _syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @syncfusion/ej2-svg-base */ \"./node_modules/@syncfusion/ej2-svg-base/index.js\");\n/* harmony import */ var _common_utils_helper__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../common/utils/helper */ \"./node_modules/@syncfusion/ej2-charts/src/common/utils/helper.js\");\n/* harmony import */ var _common_model_constants__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../common/model/constants */ \"./node_modules/@syncfusion/ej2-charts/src/common/model/constants.js\");\n/* harmony import */ var _model_chart3d_Interface__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./model/chart3d-Interface */ \"./node_modules/@syncfusion/ej2-charts/src/chart3d/model/chart3d-Interface.js\");\n/* harmony import */ var _axis_cartesian_panel__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./axis/cartesian-panel */ \"./node_modules/@syncfusion/ej2-charts/src/chart3d/axis/cartesian-panel.js\");\n/* harmony import */ var _model_theme__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./model/theme */ \"./node_modules/@syncfusion/ej2-charts/src/chart3d/model/theme.js\");\n/* harmony import */ var _common_model_base__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../common/model/base */ \"./node_modules/@syncfusion/ej2-charts/src/common/model/base.js\");\n/* harmony import */ var _utils_chart3dRender__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./utils/chart3dRender */ \"./node_modules/@syncfusion/ej2-charts/src/chart3d/utils/chart3dRender.js\");\n/* harmony import */ var _utils_renderer__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./utils/renderer */ \"./node_modules/@syncfusion/ej2-charts/src/chart3d/utils/renderer.js\");\n/* harmony import */ var _axis_axis__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./axis/axis */ \"./node_modules/@syncfusion/ej2-charts/src/chart3d/axis/axis.js\");\n/* harmony import */ var _common_model_data__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../common/model/data */ \"./node_modules/@syncfusion/ej2-charts/src/common/model/data.js\");\n/* harmony import */ var _series_chart_series__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./series/chart-series */ \"./node_modules/@syncfusion/ej2-charts/src/chart3d/series/chart-series.js\");\n/* harmony import */ var _user_interaction_tooltip__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./user-interaction/tooltip */ \"./node_modules/@syncfusion/ej2-charts/src/chart3d/user-interaction/tooltip.js\");\n/* harmony import */ var _legend_legend__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./legend/legend */ \"./node_modules/@syncfusion/ej2-charts/src/chart3d/legend/legend.js\");\n/* harmony import */ var _common_utils_print__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../common/utils/print */ \"./node_modules/@syncfusion/ej2-charts/src/common/utils/print.js\");\nvar __extends = (undefined && undefined.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * The Chart3D class represents a 3D chart component that extends the Component class\n * and implements the INotifyPropertyChanged interface.\n *\n * @public\n * @class\n * @extends Component<HTMLElement>\n * @implements {INotifyPropertyChanged} INotifyPropertyChanged\n */\nvar Chart3D = /** @class */ (function (_super) {\n    __extends(Chart3D, _super);\n    /**\n     * Constructor for creating the 3D chart\n     *\n     * @param {Chart3DModel} options - Specifies the 3D chart model.\n     * @param {string | HTMLElement} element - Specifies the element for the 3D chart.\n     * @hidden\n     */\n    function Chart3D(options, element) {\n        var _this = _super.call(this, options, element) || this;\n        _this.previousTargetId = '';\n        _this.currentPointIndex = 0;\n        _this.currentSeriesIndex = 0;\n        _this.currentLegendIndex = 0;\n        /** @public */\n        _this.animated = false;\n        /** @private */\n        _this.isPointMouseDown = false;\n        /** @private */\n        _this.visible = 0;\n        /** @private */\n        _this.clickCount = 0;\n        /** @private */\n        _this.maxPointCount = 0;\n        /** @private */\n        _this.singleClickTimer = 0;\n        /** @private */\n        _this.isRtlEnabled = false;\n        /** @private */\n        _this.scaleX = 1;\n        /** @private */\n        _this.scaleY = 1;\n        _this.chartId = 57723;\n        /** @private */\n        _this.isLegendClicked = false;\n        /** @private */\n        _this.rotateActivate = false;\n        /** @private */\n        _this.isRemove = false;\n        /** @private */\n        _this.polygons = [];\n        return _this;\n    }\n    /**\n     * Checks if the given elementId has special characters and modifies it if necessary.\n     *\n     * @param {string} elementId - The input elementId to be checked.\n     * @returns {string} - The modified elementId.\n     */\n    Chart3D.prototype.isIdHasSpecialCharacter = function (elementId) {\n        var regex = /^[A-Za-z ]+$/;\n        var numberRegex = /^[0-9 ]+$/;\n        var childElementId = '';\n        if (!regex.test(elementId)) {\n            var start = 0;\n            if (numberRegex.test(elementId[0])) {\n                childElementId += ('\\\\3' + elementId[0]);\n                start = 1;\n            }\n            for (var i = start; i < elementId.length; i++) {\n                if (!regex.test(elementId[i]) && elementId.indexOf('-') === -1 &&\n                    elementId.indexOf('_') === -1 && elementId.indexOf('\\\\') === -1 && !numberRegex.test(elementId[i])) {\n                    childElementId += ('\\\\' + elementId[i]);\n                }\n                else {\n                    childElementId += elementId[i];\n                }\n            }\n            return childElementId;\n        }\n        else {\n            return elementId;\n        }\n    };\n    /**\n     * For internal use only - Initialize the event handler;\n     *\n     * @returns {void}\n     */\n    Chart3D.prototype.preRender = function () {\n        this.element.id = this.isIdHasSpecialCharacter(this.element.id);\n        this.allowServerDataBinding = false;\n        this.unWireEvents();\n        this.initPrivateVariable();\n        this.setCulture();\n        this.wireEvents();\n        this.element.setAttribute('dir', this.enableRtl ? 'rtl' : '');\n    };\n    /**\n     * Initializes private variables and prepares the chart component for rendering.\n     *\n     * @returns {void}\n     */\n    Chart3D.prototype.initPrivateVariable = function () {\n        this.delayRedraw = false;\n        this.animateSeries = true;\n        this.horizontalAxes = [];\n        this.verticalAxes = [];\n        this.polygons = [];\n        this.vector = new _utils_chart3dRender__WEBPACK_IMPORTED_MODULE_8__.Vector3D(0, 0, 0);\n        this.wallRender = new _utils_renderer__WEBPACK_IMPORTED_MODULE_9__.WallRenderer();\n        this.matrixObj = new _utils_chart3dRender__WEBPACK_IMPORTED_MODULE_8__.Matrix3D();\n        this.bspTreeObj = new _utils_chart3dRender__WEBPACK_IMPORTED_MODULE_8__.BinaryTreeBuilder();\n        this.polygon = new _utils_chart3dRender__WEBPACK_IMPORTED_MODULE_8__.Polygon3D();\n        this.graphics = new _utils_chart3dRender__WEBPACK_IMPORTED_MODULE_8__.Graphics3D();\n        this.transform3D = new _utils_chart3dRender__WEBPACK_IMPORTED_MODULE_8__.ChartTransform3D();\n        this.svg3DRenderer = new _utils_chart3dRender__WEBPACK_IMPORTED_MODULE_8__.Svg3DRenderer();\n        this.axisRender = new _utils_renderer__WEBPACK_IMPORTED_MODULE_9__.AxisRenderer();\n        this.chart3DRender = new _utils_chart3dRender__WEBPACK_IMPORTED_MODULE_8__.Chart3DRender();\n        this.chartAxisLayoutPanel = new _axis_cartesian_panel__WEBPACK_IMPORTED_MODULE_5__.CartesianAxisLayoutPanel(this);\n        this.refreshAxis();\n        this.refreshDefinition(this.rows);\n        this.refreshDefinition(this.columns);\n        if (this.tooltip3DModule) {\n            this.tooltip3DModule.previousPoints = [];\n        }\n        this.element.setAttribute('role', 'region');\n        this.element.setAttribute('tabindex', '0');\n        this.element.style.outline = 'none';\n        this.element.setAttribute('aria-label', this.description || this.title + '. Syncfusion interactive chart.');\n        if (!(this.element.classList.contains('e-chart-focused'))) {\n            this.element.setAttribute('class', this.element.getAttribute('class') + ' e-chart-focused');\n        }\n        if (this.element.id === '') {\n            var collection = document.getElementsByClassName('e-chart').length;\n            this.element.id = 'chart_' + this.chartId + '_' + collection;\n        }\n        this.svgId = this.element.id + '_svg';\n    };\n    /**\n     * Method to set culture for chart.\n     *\n     * @returns {void}\n     */\n    Chart3D.prototype.setCulture = function () {\n        this.intl = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Internationalization();\n        this.localeObject = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.L10n(this.getModuleName(), this.defaultLocalConstants, this.locale);\n    };\n    /**\n     * To Initialize the 3D chart rendering.\n     *\n     * @returns {void}\n     */\n    Chart3D.prototype.render = function () {\n        var _this = this;\n        this.svgRenderer = new _syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_1__.SvgRenderer(this.element.id);\n        var loadEventData = {\n            chart: this, theme: this.theme, cancel: false\n        };\n        /**\n         * Load event for the 3D chart componet.\n         */\n        this.trigger(_common_model_constants__WEBPACK_IMPORTED_MODULE_3__.load, loadEventData, function () {\n            if (!loadEventData.cancel) {\n                _this.cartesianChartRendering();\n            }\n        });\n    };\n    /**\n     * Renders the chart using a Cartesian coordinate system.\n     *\n     * This function is responsible for rendering the chart's graphical elements and data points using a Cartesian coordinate system.\n     * It may include actions such as drawing axes, plotting data, and applying visual styles.\n     *\n     * @returns {void}\n     */\n    Chart3D.prototype.cartesianChartRendering = function () {\n        this.setTheme();\n        this.createChartSvg();\n        this.calculateVisibleSeries();\n        this.calculateVisibleAxis();\n        this.processData();\n        this.renderComplete();\n        this.allowServerDataBinding = true;\n    };\n    /**\n     * Method to create SVG element.\n     *\n     * @returns {void}\n     */\n    Chart3D.prototype.createChartSvg = function () {\n        this.removeSvg();\n        (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_2__.createSvg)(this);\n    };\n    /**\n     * Method to remove the SVG.\n     *\n     * @returns {void}\n     * @private\n     */\n    Chart3D.prototype.removeSvg = function () {\n        if (this.redraw) {\n            return null;\n        }\n        (0,_syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_1__.removeElement)(this.element.id + '_Secondary_Element');\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        if (this.isReact) {\n            this.clearTemplate();\n        }\n        var removeLength = 0;\n        if (this.svgObject) {\n            while (this.svgObject.childNodes.length > removeLength) {\n                this.svgObject.removeChild(this.svgObject.firstChild);\n            }\n            if (!this.svgObject.hasChildNodes() && this.svgObject.parentNode) {\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.remove)(this.svgObject);\n            }\n        }\n    };\n    /**\n     * Processes and prepares data for rendering.\n     *\n     * @param {boolean} render - (Optional) Indicates whether to trigger rendering after data processing.\n     * @returns {void}\n     */\n    Chart3D.prototype.processData = function (render) {\n        if (render === void 0) { render = true; }\n        this.visibleSeriesCount = 0;\n        var check = true;\n        for (var _i = 0, _a = this.visibleSeries; _i < _a.length; _i++) {\n            var series = _a[_i];\n            if (!series.visible && !this.legendSettings.visible) {\n                this.visibleSeriesCount++;\n                continue;\n            }\n            this.initializeDataModule(series);\n        }\n        if (render && (!this.visibleSeries.length || this.visibleSeriesCount === this.visibleSeries.length && check)) {\n            this.refreshBound();\n            this.trigger('loaded', { chart: this });\n        }\n    };\n    /**\n     * Initializes the data module for a three-dimensional series.\n     *\n     * @param {Chart3DSeries} series - The series for which data module is initialized.\n     * @returns {void}\n     */\n    Chart3D.prototype.initializeDataModule = function (series) {\n        series.xData = [];\n        series.yData = [];\n        var dataSource;\n        var isAngular = 'isAngular';\n        if (this[isAngular]) {\n            dataSource = Object.keys(series.dataSource).length ? series.dataSource : this.dataSource;\n        }\n        else {\n            dataSource = series.dataSource || this.dataSource;\n        }\n        series.dataModule = new _common_model_data__WEBPACK_IMPORTED_MODULE_11__.Data(dataSource, series.query);\n        series.points = [];\n        series.refreshDataManager(this);\n    };\n    /**\n     * Animate the series bounds.\n     *\n     * @param {number} duration - Specifies the duration of the animation.\n     * @private\n     * @returns {void}\n     */\n    Chart3D.prototype.animate = function (duration) {\n        this.redraw = true;\n        this.animated = true; //used to set duration as 1000 for animation at default 300\n        this.duration = duration ? duration : 1000;\n    };\n    /**\n     * Refresh the chart bounds.\n     *\n     * @private\n     * @returns {void}\n     */\n    Chart3D.prototype.refreshBound = function () {\n        if (this.legend3DModule && this.legendSettings.visible) {\n            this.legend3DModule.getLegendOptions(this.visibleSeries, this);\n        }\n        if (this.tooltip.enable && this.tooltip3DModule) {\n            this.tooltip3DModule.previousPoints = [];\n        }\n        this.calculateStackValues();\n        this.calculateBounds();\n        this.renderElements();\n        (0,_syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_1__.removeElement)('chartmeasuretext');\n        this.removeSelection();\n    };\n    /**\n     * Clears the selection state in the chart.\n     *\n     * @returns {void}\n     */\n    Chart3D.prototype.removeSelection = function () {\n        for (var _i = 0, _a = this.visibleSeries; _i < _a.length; _i++) {\n            var series = _a[_i];\n            if (series.visible) {\n                for (var _b = 0, _c = series.points; _b < _c.length; _b++) {\n                    var point = _c[_b];\n                    point.isSelect = false;\n                }\n            }\n        }\n    };\n    /**\n     * Calculates stacked values for three-dimensional series in the chart.\n     *\n     * @returns {void}\n     */\n    Chart3D.prototype.calculateStackValues = function () {\n        var series;\n        var isCalculateStacking = false;\n        for (var i = 0, len = this.visibleSeries.length; i < len; i++) {\n            series = this.visibleSeries[i];\n            series.position = series.rectCount = undefined;\n            if (((series.type.indexOf('Stacking') !== -1)) && !isCalculateStacking) {\n                series.calculateStackedValue(series.type.indexOf('100') > -1, this);\n                isCalculateStacking = true;\n            }\n        }\n    };\n    /**\n     * Calculates the bounds and dimensions for the chart area.\n     *\n     * @returns {void}\n     */\n    Chart3D.prototype.calculateBounds = function () {\n        var margin = this.margin;\n        // Title Height;\n        var titleHeight = 0;\n        var subTitleHeight = 0;\n        var titleWidth = 0;\n        var padding = this.titleStyle.position === 'Top' || (this.titleStyle.position === 'Bottom') ? 15 : 5;\n        var left = margin.left + this.border.width;\n        var width = this.availableSize.width - left - margin.right - this.border.width;\n        var elementSpacing = 0;\n        var top = margin.top + this.border.width;\n        var height = this.availableSize.height - top - this.border.width - margin.bottom;\n        this.titleCollection = [];\n        this.subTitleCollection = [];\n        if (this.title) {\n            this.titleCollection = (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_2__.getTitle)(this.title, this.titleStyle, (this.titleStyle.position === 'Left' || this.titleStyle.position === 'Right' ? height : width), this.enableRtl, this.themeStyle.chartTitleFont);\n            titleHeight = ((0,_syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_1__.measureText)(this.title, this.titleStyle, this.themeStyle.chartTitleFont).height * this.titleCollection.length) + padding;\n            if (this.subTitle) {\n                var maxWidth = 0;\n                for (var _i = 0, _a = this.titleCollection; _i < _a.length; _i++) {\n                    var titleText = _a[_i];\n                    titleWidth = (0,_syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_1__.measureText)(titleText, this.titleStyle, this.themeStyle.chartSubTitleFont).width;\n                    maxWidth = titleWidth > maxWidth ? titleWidth : maxWidth;\n                }\n                this.subTitleCollection = (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_2__.getTitle)(this.subTitle, this.subTitleStyle, maxWidth, this.enableRtl, this.themeStyle.chartSubTitleFont);\n                subTitleHeight = ((0,_syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_1__.measureText)(this.subTitle, this.subTitleStyle, this.themeStyle.chartSubTitleFont).height * this.subTitleCollection.length) +\n                    padding;\n            }\n        }\n        else if (this.legendSettings.position !== 'Top' && this.border.width) {\n            elementSpacing = 10;\n        }\n        top = margin.top + elementSpacing + this.border.width;\n        height = this.availableSize.height - top - this.border.width - margin.bottom;\n        var marginTotal = subTitleHeight + titleHeight + this.titleStyle.border.width + this.subTitleStyle.border.width;\n        switch (this.titleStyle.position) {\n            case 'Top':\n                top += marginTotal;\n                height -= marginTotal;\n                break;\n            case 'Bottom':\n                height -= marginTotal;\n                break;\n            case 'Left':\n                left += marginTotal;\n                width -= marginTotal;\n                break;\n            case 'Right':\n                left -= (this.titleStyle.border.width + this.subTitleStyle.border.width);\n                width -= marginTotal;\n                break;\n        }\n        this.initialClipRect = new _syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_1__.Rect(left, top, width, height);\n        if (this.legend3DModule && this.legendSettings.visible) {\n            this.legend3DModule.calculateLegendBounds(this.initialClipRect, this.availableSize, null);\n        }\n        this.chartAxisLayoutPanel.measureAxis(this.initialClipRect);\n    };\n    /**\n     * Renders various chart elements, including the border, title, series, legend, and datalabel etc.\n     *\n     * @returns {void}\n     */\n    Chart3D.prototype.renderElements = function () {\n        this.renderBorder();\n        this.renderTitle();\n        this.createSeriesElements();\n        this.render3DChart();\n        this.renderLegend();\n        this.performSelection();\n        this.setSecondaryElementPosition();\n        this.doAnimation();\n    };\n    /**\n     * Animates the height of an SVG element.\n     *\n     * @param {HTMLElement} element - The SVG element to animate.\n     * @param {Chart3DSeries} series - The series related to the animation.\n     * @param {Chart3DPoint} point - The point related to the animation.\n     * @param {HTMLElement} dataLabelElement - The data label element related to the animation.\n     * @param {HTMLElement} shapeElement - The shape element related to the animation.\n     * @param {HTMLElement} templateElement - The template element related to the animation.\n     * @returns {void}\n     */\n    Chart3D.prototype.animateRect = function (element, series, point, dataLabelElement, shapeElement, templateElement) {\n        var option = series.animation;\n        var duration = series.chart.animated ? series.chart.duration : option.duration;\n        var effect = (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_2__.getAnimationFunction)('Linear');\n        var elementHeight = element.getAttribute('height') ? +element.getAttribute('height') : 0;\n        var elementWidth = element.getAttribute('width') ? +element.getAttribute('width') : 0;\n        var isPlot = point.yValue < 0;\n        var centerX;\n        var centerY;\n        var x = +element.getAttribute('x');\n        var y = +element.getAttribute('y');\n        if (!series.chart.requireInvertedAxis) {\n            centerY = (isPlot !== series.yAxis.isAxisInverse) ? y : y + elementHeight;\n            centerX = isPlot ? x : x + elementWidth;\n        }\n        else {\n            if (series.type.indexOf('Stacking') > -1) {\n                centerX = x;\n                centerY = y;\n            }\n            else {\n                centerY = isPlot ? y : y + elementHeight;\n                centerX = (isPlot !== series.yAxis.isAxisInverse) ? x + elementWidth : x;\n            }\n        }\n        var value;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(element)) {\n            element.style.visibility = 'hidden';\n            if (dataLabelElement) {\n                dataLabelElement.style.visibility = 'hidden';\n            }\n            if (shapeElement) {\n                shapeElement.style.visibility = 'hidden';\n            }\n            if (templateElement) {\n                templateElement.style.visibility = 'hidden';\n            }\n            new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Animation({}).animate(element, {\n                duration: (duration === 0 && _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.animationMode === 'Enable') ? 1000 : duration,\n                delay: option.delay,\n                progress: function (args) {\n                    if (args.timeStamp >= args.delay) {\n                        element.style.visibility = 'visible';\n                        if (!series.chart.requireInvertedAxis) {\n                            elementHeight = elementHeight ? elementHeight : 1;\n                            value = effect(args.timeStamp - args.delay, 0, elementHeight, args.duration);\n                            element.setAttribute('transform', 'translate(' + centerX + ' ' + centerY +\n                                ') scale(1,' + (value / elementHeight) + ') translate(' + (-centerX) + ' ' + (-centerY) + ')');\n                        }\n                        else {\n                            elementWidth = elementWidth ? elementWidth : 1;\n                            value = effect(args.timeStamp - args.delay, 0, elementWidth, args.duration);\n                            element.setAttribute('transform', 'translate(' + centerX + ' ' + centerY +\n                                ') scale(' + (value / elementWidth) + ', 1) translate(' + (-centerX) + ' ' + (-centerY) + ')');\n                        }\n                    }\n                },\n                end: function () {\n                    element.setAttribute('transform', 'translate(0,0)');\n                    if (dataLabelElement) {\n                        dataLabelElement.style.visibility = 'visible';\n                    }\n                    if (shapeElement) {\n                        shapeElement.style.visibility = 'visible';\n                    }\n                    if (templateElement) {\n                        templateElement.style.visibility = 'visible';\n                    }\n                    series.chart.trigger('animationComplete', { series: series });\n                }\n            });\n        }\n    };\n    /**\n     * Animates the series.\n     *\n     * @returns {void}\n     */\n    Chart3D.prototype.doAnimation = function () {\n        var _this = this;\n        var _loop_1 = function (i) {\n            var series = this_1.visibleSeries[i];\n            if (series.visible && series.animation.enable && this_1.animateSeries && !this_1.rotateActivate) {\n                var dataLabelElement = void 0;\n                var shapeElement = void 0;\n                var templateElement = void 0;\n                var options = new _common_utils_helper__WEBPACK_IMPORTED_MODULE_2__.RectOption(this_1.element.id + '_ChartSeriesClipRect_' + i, 'transparent', { width: 1, color: 'Gray' }, 1, {\n                    x: 0, y: 0,\n                    width: this_1.availableSize.width,\n                    height: this_1.availableSize.height\n                });\n                var clipRectElement = (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_2__.appendClipElement)(this_1.redraw, options, this_1.svgRenderer);\n                (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_2__.appendChildElement)(false, this_1.chart3D, clipRectElement.children[0], this_1.redraw);\n                for (var k = 0; series.visiblePoints && k < series.visiblePoints.length; k++) {\n                    var point = series.visiblePoints[k];\n                    var elements = document.querySelectorAll(\"[id*=\\\"region-series-\" + i + \"\\\"]\");\n                    elements.forEach(function (element) {\n                        element.setAttribute('clip-path', 'url(#' + _this.element.id + '_ChartSeriesClipRect_' + i + ')');\n                    });\n                    if (series.dataLabel.visible) {\n                        dataLabelElement = (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_2__.getElement)(this_1.element.id + '-svg-series-' + series.index + '-point-' + k + '-data-label');\n                        shapeElement = (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_2__.getElement)(this_1.element.id + '-svg-data-label-series-' + series.index + '-point-' + k);\n                        templateElement = (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_2__.getElement)(this_1.element.id + '-series-' + series.index + '-data-label-' + k);\n                    }\n                    this_1.animateRect(document.getElementById(this_1.element.id + '_ChartSeriesClipRect_' + i).children[0], series, point, dataLabelElement, shapeElement, templateElement);\n                }\n            }\n        };\n        var this_1 = this;\n        for (var i = 0; i < this.visibleSeries.length; i++) {\n            _loop_1(i);\n        }\n    };\n    /**\n     * Performs data selection based on selected data indexes.\n     *\n     * @returns {void}\n     */\n    Chart3D.prototype.performSelection = function () {\n        var selectedDataIndexes = [];\n        if (this.selection3DModule) {\n            selectedDataIndexes = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)([], this.selection3DModule.selectedDataIndexes, null, true);\n            this.selection3DModule.invokeSelection(this);\n        }\n        if (this.highlight3DModule) {\n            this.highlight3DModule.invokeHighlight(this);\n        }\n        if ((!this.highlight3DModule || (this.legendSettings.enableHighlight && this.highlightMode === 'None')) && this.tooltip3DModule) {\n            this.tooltip3DModule.seriesStyles();\n        }\n        if (selectedDataIndexes.length > 0) {\n            this.selection3DModule.selectedDataIndexes = selectedDataIndexes;\n            this.selection3DModule.redrawSelection(this, this.selectionMode);\n        }\n    };\n    /**\n     * To render the legend.\n     *\n     * @returns {void}\n     */\n    Chart3D.prototype.renderLegend = function () {\n        if (this.legend3DModule && this.legend3DModule.legendCollections.length && this.legendSettings.visible) {\n            this.legend3DModule.calTotalPage = true;\n            var bounds = this.legend3DModule.legendBounds;\n            this.legend3DModule.renderLegend(this, this.legendSettings, bounds);\n        }\n        if (!this.redraw) {\n            this.element.appendChild(this.svgObject);\n        }\n    };\n    /**\n     * To set the left and top position for secondary element in chart.\n     *\n     * @returns {void}\n     */\n    Chart3D.prototype.setSecondaryElementPosition = function () {\n        var element = (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_2__.getElement)(this.element.id + '_Secondary_Element');\n        if (!element) {\n            return;\n        }\n        var rect = this.element.getBoundingClientRect();\n        var svgRect = (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_2__.getElement)(this.svgId).getBoundingClientRect();\n        element.style.left = Math.max(svgRect.left - rect.left, 0) + 'px';\n        element.style.top = Math.max(svgRect.top - rect.top, 0) + 'px';\n    };\n    /**\n     * Initializes module-specific elements and settings for the chart.\n     *\n     * @returns {void}\n     */\n    Chart3D.prototype.initializeModuleElements = function () {\n        this.dataLabelCollections = [];\n        var elementId = this.element.id;\n        if (this.series.length) {\n            this.seriesElements = this.svgRenderer.createGroup({ id: elementId + 'SeriesCollection' });\n        }\n        this.dataLabelElements = this.renderer.createGroup({ id: elementId + 'DataLabelCollection' });\n    };\n    /**\n     * Renders elements specific to chart series.\n     *\n     * @returns {void}\n     */\n    Chart3D.prototype.createSeriesElements = function () {\n        // Initialize the series elements values\n        this.initializeModuleElements();\n        var elementId = this.element.id;\n        var tooltipDiv = (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_2__.redrawElement)(this.redraw, elementId + '_Secondary_Element') ||\n            this.createElement('div');\n        tooltipDiv.id = elementId + '_Secondary_Element';\n        tooltipDiv.style.cssText = 'position: relative';\n        (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_2__.appendChildElement)(false, this.element, tooltipDiv, this.redraw);\n        // For userInteraction\n        if (this.tooltip.enable) {\n            (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_2__.appendChildElement)(false, this.svgObject, this.renderer.createGroup({ id: elementId + '_UserInteraction', style: 'pointer-events:none;' }), this.redraw);\n        }\n    };\n    /**\n     * Renders the chart title.\n     *\n     * @returns {void}\n     */\n    Chart3D.prototype.renderTitle = function () {\n        var rect;\n        var margin = this.margin;\n        var elementSpacing = 5;\n        if (this.title) {\n            var getAnchor = (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_2__.getTextAnchor)(this.titleStyle.textAlignment, this.enableRtl);\n            var elementSize = (0,_syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_1__.measureText)(this.title, this.titleStyle, this.themeStyle.chartTitleFont);\n            rect = new _syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_1__.Rect(margin.left, 0, this.availableSize.width - margin.left - margin.right, 0);\n            var borderWidth = this.titleStyle.border.width;\n            var positionY = this.margin.top + ((elementSize.height) * 3 / 4);\n            var positionX = (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_2__.titlePositionX)(rect, this.titleStyle || this.themeStyle.chartTitleFont) + borderWidth;\n            var rotation = void 0;\n            var alignment = this.titleStyle.textAlignment;\n            var subtitleSize = (0,_syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_1__.measureText)(this.subTitle, this.subTitleStyle, this.themeStyle.chartSubTitleFont);\n            switch (this.titleStyle.position) {\n                case 'Top':\n                    positionY += borderWidth * 0.5;\n                    positionX += getAnchor === 'start' ? borderWidth * 0.5 + this.border.width :\n                        getAnchor === 'end' ? ((-borderWidth * 2) - this.border.width) : 0;\n                    break;\n                case 'Bottom':\n                    positionX += getAnchor === 'start' ? (borderWidth * 0.5) + this.border.width :\n                        getAnchor === 'end' ? (-borderWidth * 2) - this.border.width : 0;\n                    positionY = this.availableSize.height - this.margin.bottom - subtitleSize.height - (elementSize.height / 2) -\n                        (borderWidth * 0.5) - (this.subTitleStyle.border.width * 0.5);\n                    break;\n                case 'Left':\n                    positionX = this.margin.left + ((elementSize.height) * 3 / 4) + (borderWidth * 0.5);\n                    positionY = alignment === 'Near' ? margin.bottom + (borderWidth * 0.5) + this.border.width :\n                        alignment === 'Far' ? this.availableSize.height - margin.bottom - (borderWidth * 0.5) - this.border.width : this.availableSize.height / 2;\n                    getAnchor = alignment === 'Near' ? 'end' : alignment === 'Far' ? 'start' : 'middle';\n                    getAnchor = this.enableRtl ? (getAnchor === 'end' ? 'start' : getAnchor === 'start' ? 'end' : getAnchor) : getAnchor;\n                    rotation = 'rotate(' + -90 + ',' + positionX + ',' + positionY + ')';\n                    break;\n                case 'Right':\n                    positionX = this.availableSize.width - this.margin.right - ((elementSize.height) * 3 / 4) - (borderWidth * 0.5);\n                    positionY = alignment === 'Near' ? margin.bottom + (borderWidth * 0.5) + this.border.width :\n                        alignment === 'Far' ? this.availableSize.height - margin.bottom - (borderWidth * 0.5) - this.border.width : this.availableSize.height / 2;\n                    getAnchor = alignment === 'Near' ? 'start' : alignment === 'Far' ? 'end' : 'middle';\n                    getAnchor = this.enableRtl ? (getAnchor === 'end' ? 'start' : getAnchor === 'start' ? 'end' : getAnchor) : getAnchor;\n                    rotation = 'rotate(' + 90 + ',' + positionX + ',' + positionY + ')';\n                    break;\n                case 'Custom':\n                    positionX = this.titleStyle.x;\n                    positionY = this.titleStyle.y;\n                    getAnchor = 'middle';\n                    break;\n            }\n            var borderOptions = {\n                'id': this.element.id + '-chart-title-border',\n                'x': positionX - (getAnchor === 'middle' ? (elementSize.width / 2) + elementSpacing : getAnchor === 'end' ? elementSize.width + elementSpacing : elementSpacing),\n                'y': positionY - elementSize.height + (elementSize.height / 4),\n                'rx': this.titleStyle.border.cornerRadius,\n                'ry': this.titleStyle.border.cornerRadius,\n                'width': elementSize.width + (elementSpacing * 2),\n                'height': elementSize.height * this.titleCollection.length,\n                'fill': this.titleStyle.background,\n                'stroke-width': borderWidth,\n                'stroke': this.titleStyle.border.color,\n                'transform': rotation ? rotation : ''\n            };\n            var htmlObject = (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_2__.redrawElement)(this.redraw, this.element.id + '-chart-title-border', borderOptions, this.renderer)\n                || this.renderer.drawRectangle(borderOptions);\n            (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_2__.appendChildElement)(false, this.svgObject, htmlObject, this.redraw);\n            var options = new _syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_1__.TextOption(this.element.id + '-chart-title', positionX, positionY, getAnchor, this.titleCollection, rotation, 'auto');\n            var element = (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_2__.redrawElement)(this.redraw, this.element.id + '-chart-title', options, this.renderer) ||\n                (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_2__.textElement)(this.renderer, options, this.titleStyle, this.titleStyle.color || this.themeStyle.chartTitleFont.color, this.svgObject, null, null, null, null, null, null, null, null, false, null, this.themeStyle.chartTitleFont);\n            if (element) {\n                element.setAttribute('tabindex', '0');\n                element.style.outline = 'none';\n                element.setAttribute('class', 'e-chart-focused');\n            }\n            if (this.subTitle) {\n                this.renderSubTitle(options);\n            }\n        }\n    };\n    /**\n     * Renders the chart sub title.\n     *\n     * @param {TextOption} options - Specifies the text option.\n     * @returns {void}\n     */\n    Chart3D.prototype.renderSubTitle = function (options) {\n        var maxWidth = 0;\n        var titleWidth = 0;\n        var padding = 10;\n        var alignment = this.titleStyle.textAlignment;\n        for (var _i = 0, _a = this.titleCollection; _i < _a.length; _i++) {\n            var titleText = _a[_i];\n            titleWidth = (0,_syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_1__.measureText)(titleText, this.titleStyle, this.themeStyle.chartTitleFont).width;\n            maxWidth = titleWidth > maxWidth ? titleWidth : maxWidth;\n        }\n        var subTitleElementSize = (0,_syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_1__.measureText)(this.subTitleCollection.\n            reduce(function (a, b) { return (a.length > b.length ? a : b); }), this.subTitleStyle, this.themeStyle.chartSubTitleFont);\n        var getAnchor = (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_2__.getTextAnchor)(this.subTitleStyle.textAlignment, this.enableRtl);\n        var rect = new _syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_1__.Rect(alignment === 'Center' ? (options.x - maxWidth * 0.5) : alignment === 'Far' ? options.x - maxWidth : options.x, 0, maxWidth, 0);\n        if (this.titleStyle.position === 'Left') {\n            rect.x = alignment === 'Center' ? (options.x - maxWidth * 0.5) : alignment === 'Far' ? this.margin.left + ((subTitleElementSize.height) * 3 / 4) : (options.x - maxWidth);\n        }\n        var elementSize = (0,_syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_1__.measureText)(this.title, this.titleStyle, this.themeStyle.chartTitleFont);\n        var positionY = options.y * options.text.length + subTitleElementSize.height + (padding / 2) +\n            this.titleStyle.border.width + (this.subTitleStyle.border.width * 0.5);\n        if (this.titleStyle.position === 'Bottom') {\n            positionY = options.y * options.text.length + (padding / 2) + (elementSize.height / 2) + (subTitleElementSize.height / 2);\n        }\n        var borderOptions = {\n            'id': this.element.id + '-chart-sub-title-border',\n            'x': (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_2__.titlePositionX)(rect, this.subTitleStyle) - (getAnchor === 'middle' ? (subTitleElementSize.width / 2) + padding / 2 : getAnchor === 'end' ? subTitleElementSize.width + padding / 2 : padding / 2),\n            'y': positionY - subTitleElementSize.height + (subTitleElementSize.height / 4),\n            'rx': this.subTitleStyle.border.cornerRadius,\n            'ry': this.subTitleStyle.border.cornerRadius,\n            'width': subTitleElementSize.width + padding,\n            'height': subTitleElementSize.height * this.subTitleCollection.length,\n            'fill': this.subTitleStyle.background,\n            'stroke-width': this.subTitleStyle.border.width,\n            'stroke': this.subTitleStyle.border.color,\n            'transform': options.transform\n        };\n        var htmlObject = (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_2__.redrawElement)(this.redraw, this.element.id + '-chart-sub-title-border', borderOptions, this.renderer)\n            || this.renderer.drawRectangle(borderOptions);\n        (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_2__.appendChildElement)(false, this.svgObject, htmlObject, this.redraw);\n        var subTitleOptions = new _syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_1__.TextOption(this.element.id + '-chart-sub-title', (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_2__.titlePositionX)(rect, this.subTitleStyle), positionY, (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_2__.getTextAnchor)(this.subTitleStyle.textAlignment, this.enableRtl), this.subTitleCollection, options.transform, 'auto');\n        var element = (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_2__.redrawElement)(this.redraw, this.element.id + '-chart-sub-title', subTitleOptions, this.renderer) ||\n            (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_2__.textElement)(this.renderer, subTitleOptions, this.subTitleStyle, this.subTitleStyle.color || this.themeStyle.chartSubTitleFont.color, this.svgObject, null, null, null, null, null, null, null, null, false, null, this.themeStyle.chartSubTitleFont);\n    };\n    /**\n     * Renders the chart border.\n     *\n     * @returns {void}\n     */\n    Chart3D.prototype.renderBorder = function () {\n        var x = 0;\n        var y = 0;\n        var width = this.border.width;\n        var backGroundImage = this.backgroundImage;\n        var fillColor = backGroundImage ? 'transparent' : (this.background || this.themeStyle.background);\n        var rect = new _common_utils_helper__WEBPACK_IMPORTED_MODULE_2__.RectOption(this.element.id + '-chart-border', fillColor, this.border, 1, new _syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_1__.Rect(width * 0.5 + x, width * 0.5 + y, this.availableSize.width - width, this.availableSize.height - width), 0, 0, '', this.border.dashArray);\n        this.htmlObject = (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_2__.redrawElement)(this.redraw, this.element.id + '-chart-border', rect, this.renderer)\n            || this.renderer.drawRectangle(rect);\n        this.htmlObject.setAttribute('aria-hidden', 'true');\n        (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_2__.appendChildElement)(false, this.svgObject, this.htmlObject, this.redraw);\n        // to draw back ground image for chart\n        if (backGroundImage) {\n            var image = new _common_utils_helper__WEBPACK_IMPORTED_MODULE_2__.ImageOption(this.availableSize.height - width, this.availableSize.width - width, backGroundImage, 0, 0, this.element.id + '-chart-background', 'visible', 'none');\n            this.htmlObject = (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_2__.redrawElement)(this.redraw, this.element.id + '-chart-background', image, this.renderer)\n                || this.renderer.drawImage(image);\n            (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_2__.appendChildElement)(false, this.svgObject, this.htmlObject, this.redraw);\n        }\n    };\n    /**\n     * To provide the array of modules needed for control rendering\n     *\n     * @returns {ModuleDeclaration[]} - Array of modules needed for control rendering\n     * @private\n     */\n    Chart3D.prototype.requiredModules = function () {\n        var _this = this;\n        var modules = [];\n        var series = this.series;\n        var moduleName;\n        var dataLabelEnable = false;\n        if (this.tooltip.enable) {\n            modules.push({\n                member: 'Tooltip3D',\n                args: [this]\n            });\n        }\n        series.map(function (value) {\n            _this.isLegend = (_this.legendSettings.visible && ((value.name !== '') || !!_this.isLegend));\n            moduleName = value.type.indexOf('100') !== -1 ? value.type.replace('100', '') + 'Series3D' : value.type + 'Series3D';\n            dataLabelEnable = value.dataLabel.visible || dataLabelEnable;\n            if (!modules.some(function (currentModule) {\n                return currentModule.member === moduleName;\n            })) {\n                modules.push({\n                    member: moduleName,\n                    args: [_this, series]\n                });\n            }\n        });\n        if (dataLabelEnable) {\n            modules.push({\n                member: 'DataLabel3D',\n                args: [this, series]\n            });\n        }\n        modules = this.findAxisModule(modules);\n        if (this.isLegend) {\n            modules.push({\n                member: 'Legend3D',\n                args: [this]\n            });\n        }\n        if (this.enableExport) {\n            modules.push({\n                member: 'Export3D',\n                args: [this]\n            });\n        }\n        if (this.selectionMode !== 'None') {\n            modules.push({\n                member: 'Selection3D',\n                args: [this]\n            });\n        }\n        if (this.highlightMode !== 'None' || this.legendSettings.enableHighlight) {\n            modules.push({\n                member: 'Highlight3D',\n                args: [this]\n            });\n        }\n        return modules;\n    };\n    /**\n     * Finds axis modules within a collection of module declarations.\n     *\n     * @param {ModuleDeclaration[]} modules - The collection of module declarations to search for axis modules.\n     * @returns {ModuleDeclaration[]} - An array of module declarations representing axis modules.\n     */\n    Chart3D.prototype.findAxisModule = function (modules) {\n        var axisCollections = [];\n        axisCollections.push(this.primaryXAxis);\n        axisCollections.push(this.primaryYAxis);\n        axisCollections = axisCollections.concat(this.axes);\n        var datetimeEnabled = false;\n        var categoryEnabled = false;\n        var logarithmicEnabled = false;\n        var dateTimeCategoryEnabled = false;\n        for (var _i = 0, axisCollections_1 = axisCollections; _i < axisCollections_1.length; _i++) {\n            var axis = axisCollections_1[_i];\n            datetimeEnabled = axis.valueType === 'DateTime' || datetimeEnabled;\n            categoryEnabled = axis.valueType === 'Category' || categoryEnabled;\n            logarithmicEnabled = axis.valueType === 'Logarithmic' || logarithmicEnabled;\n            dateTimeCategoryEnabled = axis.valueType === 'DateTimeCategory' || dateTimeCategoryEnabled;\n        }\n        if (datetimeEnabled) {\n            modules.push({\n                member: 'DateTime3D',\n                args: [this]\n            });\n        }\n        if (categoryEnabled) {\n            modules.push({\n                member: 'Category3D',\n                args: [this]\n            });\n        }\n        if (logarithmicEnabled) {\n            modules.push({\n                member: 'Logarithmic3D',\n                args: [this]\n            });\n        }\n        if (dateTimeCategoryEnabled) {\n            modules.push({\n                member: 'DateTimeCategory3D',\n                args: [this]\n            });\n        }\n        return modules;\n    };\n    /**\n     * Sets the theme for the chart.\n     *\n     * @returns {void}\n     */\n    Chart3D.prototype.setTheme = function () {\n        /** Set theme */\n        this.themeStyle = (0,_model_theme__WEBPACK_IMPORTED_MODULE_6__.get3DThemeColor)(this.theme);\n    };\n    /**\n     * Handles to set style for key event on the document.\n     *\n     * @param {target} target - element which currently focused.\n     * @returns {void}\n     * @private\n     */\n    Chart3D.prototype.setNavigationStyle = function (target) {\n        var currentElement = document.getElementById(target);\n        if (currentElement) {\n            currentElement.style.setProperty('outline', \"1.5px solid \" + this.themeStyle.tabColor);\n        }\n    };\n    /**\n     * Handles to remove style for key event on the document.\n     *\n     * @returns {void}\n     * @private\n     */\n    Chart3D.prototype.removeNavigationStyle = function () {\n        var currentElement = document.querySelectorAll(\"[id*=_Point_], [id*=\" + this.element.id + \"], [id*=_ChartBorder], text[id*=_ChartTitle],g[id*=_chart_legend],  text[id*=_ChartSubTitle], div[id*=_Annotation]\");\n        if (currentElement) {\n            currentElement.forEach(function (element) {\n                if (element instanceof HTMLElement || element instanceof SVGElement) {\n                    element.style.setProperty('outline', 'none');\n                }\n            });\n        }\n    };\n    /**\n     * Renders the three-dimensional chart, creating a 3D visualization.\n     *\n     * The function sets up a 3D perspective, depth, rotation, and tilt to create a 3D visualization of the chart.\n     *\n     * @returns {void}\n     */\n    Chart3D.prototype.render3DChart = function () {\n        this.chart3D = this.svgRenderer.createGroup({ 'id': this.element.id + '-svg-chart-3d' });\n        this.chart3D.setAttribute('role', 'region');\n        this.chart3D.setAttribute('aria-hidden', 'false');\n        this.draw3DAxis();\n        this.wallRender.update3DWall(this);\n        this.renderSeries();\n        (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_2__.appendChildElement)(false, this.svgObject, this.chart3D, this.redraw);\n        var size = new _syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_1__.Size(this.availableSize.width, this.availableSize.height);\n        this.graphics.prepareView(this.perspectiveAngle, this.depth, this.rotation, this.tilt, size, this);\n        this.graphics.view(this.svgObject, this);\n    };\n    /**\n     * Draws three-dimensional axes for the chart.\n     *\n     * @returns {void}\n     */\n    Chart3D.prototype.draw3DAxis = function () {\n        for (var i = 0; i < this.axisCollections.length; i++) {\n            this.axisRender.drawAxes(i, this.axisCollections[i], this);\n        }\n    };\n    /**\n     * Renders chart series elements.\n     *\n     * @private\n     * @returns {void}\n     */\n    Chart3D.prototype.renderSeries = function () {\n        var visibility;\n        for (var _i = 0, _a = this.visibleSeries; _i < _a.length; _i++) {\n            var item = _a[_i];\n            visibility = item.visible;\n            if (visibility) {\n                this.visible++;\n                item.renderSeries(this);\n            }\n        }\n        this.visible = 0;\n    };\n    /**\n     * Initializes the configuration for an axis within a three-dimensional chart series.\n     *\n     * @param {Chart3DSeries} series - The series to which the axis belongs.\n     * @param {Chart3DAxis} axis - The axis to be configured and initialized.\n     * @param {boolean} isSeries - Indicates whether the axis configuration is for the series.\n     * @returns {void}\n     */\n    Chart3D.prototype.initAxis = function (series, axis, isSeries) {\n        if (series.xAxisName === axis.name || (series.xAxisName == null && axis.name === 'primaryXAxis')) {\n            axis.orientation = this.requireInvertedAxis ? 'Vertical' : 'Horizontal';\n            series.xAxis = axis;\n            if (isSeries) {\n                axis.series.push(series);\n            }\n        }\n        else if (series.yAxisName === axis.name || (series.yAxisName == null && axis.name === 'primaryYAxis')) {\n            axis.orientation = this.requireInvertedAxis ? 'Horizontal' : 'Vertical';\n            series.yAxis = axis;\n            if (isSeries) {\n                axis.series.push(series);\n            }\n        }\n    };\n    /**\n     * Calculate the visible axis.\n     *\n     * @private\n     * @returns {void}\n     */\n    Chart3D.prototype.calculateVisibleAxis = function () {\n        var axis;\n        var axes = [this.primaryXAxis, this.primaryYAxis];\n        axes = axes.concat(this.axes);\n        this.axisCollections = [];\n        for (var i = 0, len = axes.length; i < len; i++) {\n            axis = axes[i];\n            axis.series = [];\n            axis.labels = [];\n            axis.indexLabels = {};\n            axis.orientation = (i === 0) ? (this.requireInvertedAxis ? 'Vertical' : 'Horizontal') :\n                (i === 1) ? (this.requireInvertedAxis ? 'Horizontal' : 'Vertical') : axis.orientation;\n            for (var _i = 0, _a = this.visibleSeries; _i < _a.length; _i++) {\n                var series = _a[_i];\n                this.initAxis(series, axis, true);\n            }\n            if (axis.orientation != null) {\n                this.axisCollections.push(axis);\n            }\n        }\n        if (this.rows.length > 0 && this.columns.length > 0) {\n            this.chartAxisLayoutPanel.measure();\n        }\n    };\n    /**\n     * Unbinding events from the element while component destroy.\n     *\n     * @hidden\n     * @returns {void}\n     */\n    Chart3D.prototype.unWireEvents = function () {\n        var startEvent = _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.touchStartEvent;\n        var moveEvent = _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.touchMoveEvent;\n        var stopEvent = _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.touchEndEvent;\n        var cancelEvent = _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isPointer ? 'pointerleave' : 'mouseleave';\n        /** UnBind the Event handler */\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(this.element, startEvent, this.chartOnMouseDown);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(this.element, moveEvent, this.mouseMove);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(this.element, stopEvent, this.mouseEnd);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(this.element, 'click', this.chartOnMouseClick);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(this.element, cancelEvent, this.mouseLeave);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(this.element, 'keydown', this.chartKeyDown);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(document.body, 'keydown', this.documentKeyHandler);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(this.element, 'keyup', this.chartKeyUp);\n        window.removeEventListener((_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isTouch && ('orientation' in window && 'onorientationchange' in window)) ? 'orientationchange' : 'resize', this.resizeBound);\n        /**\n         * To fix memory issue\n         */\n        if (this.touchObject) {\n            this.touchObject.destroy();\n            this.touchObject = null;\n        }\n    };\n    /**\n     * Binding events to the element while component creation.\n     *\n     * @hidden\n     * @returns {void}\n     */\n    Chart3D.prototype.wireEvents = function () {\n        /**\n         * To fix react timeout destroy issue.\n         */\n        if (!this.element) {\n            return;\n        }\n        /** Find the Events type */\n        var cancelEvent = _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isPointer ? 'pointerleave' : 'mouseleave';\n        /** Bind the Event handler */\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(this.element, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.touchStartEvent, this.chartOnMouseDown, this);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(this.element, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.touchMoveEvent, this.mouseMove, this);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(this.element, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.touchEndEvent, this.mouseEnd, this);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(this.element, 'click', this.chartOnMouseClick, this);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(this.element, cancelEvent, this.mouseLeave, this);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(this.element, 'keydown', this.chartKeyDown, this);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(document.body, 'keydown', this.documentKeyHandler, this);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(this.element, 'keyup', this.chartKeyUp, this);\n        this.resizeBound = this.chartResize.bind(this);\n        window.addEventListener((_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isTouch && ('orientation' in window && 'onorientationchange' in window)) ? 'orientationchange' : 'resize', this.resizeBound);\n        this.longPressBound = this.longPress.bind(this);\n        this.touchObject = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Touch(this.element, { tapHold: this.longPressBound, tapHoldThreshold: 500 });\n        /** Apply the style for chart */\n        this.setStyle(this.element);\n    };\n    /**\n     * Handles the long press on chart.\n     *\n     * @param {TapEventArgs} e - Specifies the tap event arguments.\n     * @returns {boolean} false\n     * @private\n     */\n    Chart3D.prototype.longPress = function (e) {\n        this.mouseX = (e && e.originalEvent.changedTouches) ? (e.originalEvent.changedTouches[0].clientX) : 0;\n        this.mouseY = (e && e.originalEvent.changedTouches) ? (e.originalEvent.changedTouches[0].clientY) : 0;\n        this.startMove = true;\n        this.setMouseXY(this.mouseX, this.mouseY);\n        this.notify('tapHold', e);\n        return false;\n    };\n    /**\n     * Handles the mouse click on chart.\n     *\n     * @param {PointerEvent | TouchEvent} e - Specifies the pointer event.\n     * @returns {boolean} false\n     * @private\n     */\n    Chart3D.prototype.chartOnMouseClick = function (e) {\n        var _this = this;\n        var element = e.target;\n        var chart = this;\n        this.clickCount++;\n        var timeInterval = 400;\n        if (this.clickCount === 1) {\n            this.singleClickTimer = +setTimeout(function () {\n                chart.clickCount = 0;\n                chart.trigger('chart3DMouseClick', { target: element.id, x: chart.mouseX, y: chart.mouseY });\n            }, timeInterval);\n        }\n        else if (this.clickCount === 2) {\n            clearTimeout(this.singleClickTimer);\n            this.clickCount = 0;\n        }\n        var isAngular = 'isAngular';\n        if (this[isAngular]) {\n            //const observers: string = 'observers';\n            timeInterval = 0;\n        }\n        else {\n            timeInterval = 0;\n        }\n        if (this.clickCount === 1 && this.pointClick) {\n            this.singleClickTimer = +setTimeout(function () {\n                _this.clickCount = 0;\n                _this.triggerPointEvent(_common_model_constants__WEBPACK_IMPORTED_MODULE_3__.pointClick, e);\n            }, timeInterval);\n        }\n        this.removeNavigationStyle();\n        this.notify('click', e);\n        return false;\n    };\n    /**\n     * Export method for the chart.\n     *\n     * @param {ExportType} type - Specifies the type of the export.\n     * @param {string} fileName - Specifies the file name of the exported file.\n     * @returns {void}\n     */\n    Chart3D.prototype.export = function (type, fileName) {\n        if (this.export3DModule) {\n            this.export3DModule.export(type, fileName);\n            if (this.afterExport) {\n                this.export3DModule.getDataUrl(this);\n            }\n        }\n    };\n    /**\n     * Handles the chart resize.\n     *\n     * @returns {boolean} false\n     * @private\n     */\n    Chart3D.prototype.chartResize = function () {\n        var _this = this;\n        this.animateSeries = false;\n        var arg = {\n            chart: this,\n            currentSize: new _syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_1__.Size(0, 0),\n            previousSize: new _syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_1__.Size(this.availableSize.width, this.availableSize.height)\n        };\n        var beforeResizeArgs = { cancel: false };\n        if (this.resizeTo) {\n            clearTimeout(this.resizeTo);\n        }\n        this.trigger(_common_model_constants__WEBPACK_IMPORTED_MODULE_3__.beforeResize, beforeResizeArgs);\n        if (!beforeResizeArgs.cancel) {\n            this.resizeTo = +setTimeout(function () {\n                if (_this.isDestroyed) {\n                    clearTimeout(_this.resizeTo);\n                    return;\n                }\n                _this.createChartSvg();\n                arg.currentSize = _this.availableSize;\n                _this.trigger(_common_model_constants__WEBPACK_IMPORTED_MODULE_3__.resized, arg);\n                _this.polygons = [];\n                _this.refreshAxis();\n                _this.refreshBound();\n                _this.trigger('loaded', { chart: _this });\n            }, 500);\n        }\n        return false;\n    };\n    /**\n     * Triggers a point-specific event with the specified event type and event data.\n     *\n     * @param {string} event - The type of event to trigger.\n     * @param {PointerEvent | TouchEvent} [e] - (Optional) The event data associated with the triggered event.\n     * @returns {void}\n     */\n    Chart3D.prototype.triggerPointEvent = function (event, e) {\n        var evt = e;\n        var series = null;\n        var point = null;\n        var index;\n        var pointIndex;\n        var seriesIndex;\n        var targetElement = evt.target;\n        if (targetElement) {\n            var nodeName = targetElement.nodeName;\n            if ((nodeName === 'path' || nodeName === 'shape') && targetElement.id.indexOf('-region-') > 1) {\n                index = targetElement.id.match(/(\\d+)/g);\n                pointIndex = parseInt(index[index.length - 1].toString(), 10);\n                seriesIndex = parseInt(index[index.length - 2].toString(), 10);\n            }\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(seriesIndex)) {\n                series = this.visibleSeries[seriesIndex];\n            }\n            if (series && series.visible) {\n                point = series.points[pointIndex];\n            }\n        }\n        if (series && point) {\n            this.trigger(event, {\n                series: series,\n                point: point,\n                seriesIndex: seriesIndex, pointIndex: pointIndex,\n                x: this.mouseX, y: this.mouseY\n            });\n        }\n    };\n    /**\n     * Handles the mouse down on chart.\n     *\n     * @param {PointerEvent} e - Specifies the pointer event.\n     * @returns {boolean} false\n     * @private\n     */\n    Chart3D.prototype.chartOnMouseDown = function (e) {\n        var pageX;\n        var pageY;\n        var touchArg;\n        var rect = this.element.getBoundingClientRect();\n        var element = e.target;\n        this.trigger('chart3DMouseDown', { target: element.id, x: this.mouseX, y: this.mouseY });\n        if (e.type === 'touchstart') {\n            this.isTouch = true;\n            touchArg = e;\n            pageX = touchArg.changedTouches[0].clientX;\n            pageY = touchArg.changedTouches[0].clientY;\n        }\n        else {\n            this.isTouch = e.pointerType === 'touch';\n            pageX = e.clientX;\n            pageY = e.clientY;\n        }\n        var svgRect = (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_2__.getElement)(this.svgId).getBoundingClientRect();\n        this.mouseDownX = this.previousMouseMoveX = (pageX - rect.left) - Math.max(svgRect.left - rect.left, 0);\n        this.mouseDownY = this.previousMouseMoveY = (pageY - rect.top) - Math.max(svgRect.top - rect.top, 0);\n        if (this.enableRotation) {\n            if (this.isTouch && this.tooltip3DModule && this.tooltip3DModule.svgTooltip) {\n                this.tooltip3DModule.svgTooltip.fadeOut();\n            }\n            this.rotateActivate = true;\n            this.previousCoords = { x: this.mouseDownX, y: this.mouseDownY };\n        }\n        this.notify(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.touchStartEvent, e);\n        return false;\n    };\n    /**\n     * Handles the mouse move on chart.\n     *\n     * @param {PointerEvent} e - Specifies the pointer event.\n     * @returns {boolean} false\n     * @private\n     */\n    Chart3D.prototype.mouseMove = function (e) {\n        var pageX;\n        var pageY;\n        var touchArg;\n        if (e.type === 'touchmove') {\n            this.isTouch = true;\n            touchArg = e;\n            pageX = touchArg.changedTouches[0].clientX;\n            pageY = touchArg.changedTouches[0].clientY;\n        }\n        else {\n            this.isTouch = e.pointerType === 'touch' || e.pointerType === '2' || this.isTouch;\n            pageX = e.clientX;\n            pageY = e.clientY;\n        }\n        if ((0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_2__.getElement)(this.svgId)) {\n            this.setMouseXY(pageX, pageY);\n            this.chartOnMouseMove(e);\n        }\n        return false;\n    };\n    /**\n     * Handles the mouse leave on chart.\n     *\n     * @param {PointerEvent} e - Specifies the pointer event.\n     * @returns {boolean} false\n     * @private\n     */\n    Chart3D.prototype.mouseLeave = function (e) {\n        var pageX;\n        var pageY;\n        var touchArg;\n        if (e.type === 'touchleave') {\n            this.isTouch = true;\n            touchArg = e;\n            pageX = touchArg.changedTouches[0].clientX;\n            pageY = touchArg.changedTouches[0].clientY;\n        }\n        else {\n            this.isTouch = e.pointerType === 'touch' || e.pointerType === '2';\n            pageX = e.clientX;\n            pageY = e.clientY;\n        }\n        this.setMouseXY(pageX, pageY);\n        this.chartOnMouseLeave(e);\n        return false;\n    };\n    /**\n     * Handles the mouse up on chart.\n     *\n     * @param {PointerEvent} e - Specifies the pointer event.\n     * @returns {boolean} false\n     * @private\n     */\n    Chart3D.prototype.mouseEnd = function (e) {\n        var pageY;\n        var pageX;\n        var touchArg;\n        if (e.type === 'touchend') {\n            touchArg = e;\n            pageX = touchArg.changedTouches[0].clientX;\n            this.isTouch = true;\n            pageY = touchArg.changedTouches[0].clientY;\n        }\n        else {\n            pageY = e.clientY;\n            pageX = e.clientX;\n            this.isTouch = e.pointerType === 'touch' || e.pointerType === '2';\n        }\n        this.setMouseXY(pageX, pageY);\n        this.chartOnMouseUp(e);\n        return false;\n    };\n    /**\n     * Handles the mouse up on chart.\n     *\n     * @param {PointerEvent | TouchEvent} e - Specifies the pointer event.\n     * @private\n     * @returns {boolean} false\n     */\n    Chart3D.prototype.chartOnMouseUp = function (e) {\n        var element = e.target;\n        this.trigger('chart3DMouseUp', { target: element.id, x: this.mouseX, y: this.mouseY });\n        if (this.isTouch) {\n            this.titleTooltip(e, this.mouseX, this.mouseY);\n            this.axisTooltip(e, this.mouseX, this.mouseY, this.isTouch);\n        }\n        this.notify(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.touchEndEvent, e);\n        this.rotateActivate = false;\n        this.delayRedraw = false;\n        return false;\n    };\n    /**\n     * Prints the chart in the page.\n     *\n     * @param {string[] | string | Element} id - The id of the chart to be printed on the page.\n     * @returns {void}\n     */\n    Chart3D.prototype.print = function (id) {\n        var printChart = new _common_utils_print__WEBPACK_IMPORTED_MODULE_15__.PrintUtils(this);\n        printChart.print(id);\n    };\n    /**\n     * Handles the mouse move on chart.\n     *\n     * @param {PointerEvent | TouchEvent} e - Specifies the pointer event.\n     * @returns {boolean} false\n     * @private\n     */\n    Chart3D.prototype.chartOnMouseMove = function (e) {\n        var element = e.target;\n        this.trigger('chart3DMouseMove', { target: element.id, x: this.mouseX, y: this.mouseY });\n        if (this.pointMove) {\n            this.triggerPointEvent(_common_model_constants__WEBPACK_IMPORTED_MODULE_3__.pointMove, e);\n        }\n        if (!this.isTouch) {\n            this.titleTooltip(e, this.mouseX, this.mouseY);\n            this.axisTooltip(e, this.mouseX, this.mouseY);\n        }\n        if (this.rotateActivate && (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_2__.withInBounds)(this.mouseX, this.mouseY, this.chartAxisLayoutPanel.seriesClipRect)) {\n            var difX = this.previousCoords.x - this.mouseX;\n            var difY = this.previousCoords.y - this.mouseY;\n            if (difX || difY) {\n                this.tilt -= difY;\n                this.rotation += difX;\n                if (!this.isTouch) {\n                    var grpElement = document.getElementById(this.chart3D.id);\n                    grpElement.innerHTML = '';\n                    grpElement.remove();\n                }\n                else {\n                    document.querySelectorAll('[id*=\"axis-label-\"]').forEach(function (axisElement) { return axisElement.remove(); });\n                    this.delayRedraw = true;\n                }\n                var size = { width: this.availableSize.width, height: this.availableSize.height };\n                this.graphics.view(this.svgObject, this, this.rotation, this.tilt, size, this.perspectiveAngle, this.depth);\n                (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_2__.appendChildElement)(false, this.svgObject, this.chart3D, this.redraw);\n                this.previousCoords.y = this.mouseY;\n                this.previousCoords.x = this.mouseX;\n                this.isRemove = false;\n            }\n        }\n        this.notify(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.touchMoveEvent, e);\n        this.isTouch = false;\n        return false;\n    };\n    /**\n     * Displays a tooltip for a title or element at the specified coordinates.\n     *\n     * @param {Event} event - The event triggering the tooltip display.\n     * @param {number} x - The X-coordinate for the tooltip.\n     * @param {number} y - The Y-coordinate for the tooltip.\n     * @param {boolean} [isTouch] - (Optional) Indicates whether the event was triggered by a touch input.\n     * @returns {void}\n     */\n    Chart3D.prototype.titleTooltip = function (event, x, y, isTouch) {\n        var targetId = event.target.id;\n        var id = (targetId === (this.element.id + '-chart-title') || targetId === (this.element.id + '-chart-sub-title') ||\n            targetId.indexOf('-axis-title') > -1 || targetId.indexOf('_legend_title') > -1);\n        var index = 0;\n        if (targetId.indexOf('-axis-title') > -1) {\n            index = parseInt(((targetId.replace(this.element.id + '-svg', '')).replace('-axis-title', '')).split('-')[1], 10);\n        }\n        if (id && (event.target.textContent.indexOf('...') > -1)) {\n            var title = (targetId === (this.element.id + '-chart-title')) ? this.title :\n                targetId.indexOf('-axis-title') > -1 ? this.axisCollections[index].title :\n                    targetId.indexOf('-chart-sub-title') > -1 ? this.subTitle : this.legendSettings.title;\n            (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_2__.showTooltip)(title, x, y, this.element.offsetWidth, this.element.id + '-EJ2-title-tooltip', (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_2__.getElement)(this.element.id + '_Secondary_Element'), isTouch);\n        }\n        else {\n            (0,_syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_1__.removeElement)(this.element.id + '-EJ2-title-tooltip');\n        }\n    };\n    /**\n     * To find mouse x, y coordinate for the chart.\n     *\n     * @param {number} pageX - Specifies the x value of the pageX.\n     * @param {number} pageY - Specifies the y value of the pageY.\n     * @returns {void}\n     */\n    Chart3D.prototype.setMouseXY = function (pageX, pageY) {\n        if ((0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_2__.getElement)(this.svgId)) {\n            var svgRect = (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_2__.getElement)(this.svgId).getBoundingClientRect();\n            var rect = this.element.getBoundingClientRect();\n            this.mouseY = ((pageY - rect.top) - Math.max(svgRect.top - rect.top, 0) / this.scaleX);\n            this.mouseX = ((pageX - rect.left) - Math.max(svgRect.left - rect.left, 0) / this.scaleY);\n        }\n    };\n    /**\n     * Handles the mouse leave on chart.\n     *\n     * @param {PointerEvent | TouchEvent} e - Specifies the pointer event.\n     * @returns {boolean} false\n     * @private\n     */\n    Chart3D.prototype.chartOnMouseLeave = function (e) {\n        var element = e.target;\n        var cancelEvent = _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isPointer ? 'pointerleave' : 'mouseleave';\n        this.trigger('chart3DMouseLeave', { target: element.id, x: this.mouseX, y: this.mouseY });\n        (0,_syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_1__.removeElement)(this.element.id + '-EJ2-axis-label-tooltip');\n        this.isPointMouseDown = false;\n        this.notify(cancelEvent, e);\n        this.rotateActivate = false;\n        this.delayRedraw = false;\n        return false;\n    };\n    /**\n     * Handles the 'onkeydown' keyboard event on the chart.\n     *\n     * @param {KeyboardEvent} e - Specifies the keydown event arguments.\n     * @returns {boolean} false\n     * @private\n     */\n    Chart3D.prototype.chartKeyDown = function (e) {\n        var actionKey = '';\n        if (e.code === 'Tab') {\n            this.removeNavigationStyle();\n        }\n        if (e.code === 'Space') {\n            e.preventDefault();\n        }\n        if (this.tooltip.enable && ((e.code === 'Tab' && this.previousTargetId.indexOf('-series') > -1) || e.code === 'Escape')) {\n            actionKey = 'ESC';\n        }\n        if (this.highlightMode !== 'None' && e.code === 'Tab' && this.previousTargetId.indexOf('_chart_legend_') > -1) {\n            if (this.highlight3DModule) {\n                this.highlight3DModule.removeLegendHighlightStyles();\n            }\n        }\n        if (e.ctrlKey && (e.key === 'p')) {\n            e.preventDefault();\n            actionKey = 'CtrlP';\n        }\n        if (actionKey !== '') {\n            this.chartKeyboardNavigations(e, e.target.id, actionKey);\n        }\n        return false;\n    };\n    /**\n     *Handles the 'onkeyup' keyboard event on the chart..\n     *\n     * @param {KeyboardEvent} e - Specifies the keyup event arguments.\n     * @returns {boolean} false\n     * @private\n     */\n    Chart3D.prototype.chartKeyUp = function (e) {\n        var actionKey = '';\n        var targetId = e.target['id'];\n        var groupElement;\n        var targetElement = e.target;\n        var titleElement = (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_2__.getElement)(this.element.id + '-chart-title');\n        var seriesElement = (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_2__.getElement)(this.element.id + '-svg-0-region-series-0-point-0');\n        var legendElement = (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_2__.getElement)(this.element.id + '_chart_legend_translate_g');\n        var pagingElement = (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_2__.getElement)(this.element.id + '_chart_legend_pageup');\n        this.removeNavigationStyle();\n        if (titleElement) {\n            titleElement.setAttribute('class', 'e-chart-focused');\n        }\n        if (seriesElement) {\n            var className = seriesElement.getAttribute('class');\n            if (className && className.indexOf('e-chart-focused') === -1) {\n                className = className + ' e-chart-focused';\n            }\n            else if (!className) {\n                className = 'e-chart-focused';\n            }\n            seriesElement.setAttribute('class', className);\n        }\n        if (legendElement) {\n            var firstChild = legendElement.firstElementChild;\n            var className = firstChild.getAttribute('class');\n            if (className && className.indexOf('e-chart-focused') === -1) {\n                className = className + ' e-chart-focused';\n            }\n            else if (!className) {\n                className = 'e-chart-focused';\n            }\n            firstChild.setAttribute('class', className);\n        }\n        if (pagingElement) {\n            pagingElement.setAttribute('class', 'e-chart-focused');\n        }\n        if (e.code === 'Tab') {\n            if (this.previousTargetId !== '') {\n                if ((this.previousTargetId.indexOf('-series-') > -1 && targetId.indexOf('-series-') === -1)) {\n                    var previousElement = (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_2__.getElement)(this.element.id + '-svg-0-region-series-' + this.currentSeriesIndex + '-point-' + this.currentPointIndex);\n                    this.setTabIndex(previousElement, seriesElement);\n                    this.currentPointIndex = 0;\n                    this.currentSeriesIndex = 0;\n                }\n                else if (this.previousTargetId.indexOf('_chart_legend_page') > -1 && targetId.indexOf('_chart_legend_page') === -1\n                    && targetId.indexOf('_chart_legend_g_') === -1) {\n                    this.setTabIndex(e.target, (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_2__.getElement)(this.element.id + '_chart_legend_pageup'));\n                }\n                else if (this.previousTargetId.indexOf('_chart_legend_g_') > -1 && targetId.indexOf('_chart_legend_g_') === -1) {\n                    groupElement = (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_2__.getElement)(this.element.id + '_chart_legend_translate_g');\n                    this.setTabIndex(groupElement.children[this.currentLegendIndex], groupElement.firstElementChild);\n                }\n            }\n            this.previousTargetId = targetId;\n            if (targetId.indexOf('-series-') > -1) {\n                this.currentSeriesIndex = +(targetId.split('-series-')[1].split('-point-')[0]);\n                targetElement.removeAttribute('tabindex');\n                targetElement.blur();\n                targetId = this.focusChild(targetElement);\n            }\n            actionKey = this.highlightMode !== 'None' || this.tooltip.enable ? 'Tab' : '';\n        }\n        else if (e.code.indexOf('Arrow') > -1) {\n            e.preventDefault();\n            this.previousTargetId = targetId;\n            if (targetId.indexOf('_chart_legend_page') > -1) {\n                if (e.code === 'ArrowLeft') {\n                    (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_2__.getElement)(this.element.id + '_chart_legend_pagedown').removeAttribute('tabindex');\n                    this.focusChild((0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_2__.getElement)(this.element.id + '_chart_legend_pageup'));\n                }\n                else if (e.code === 'ArrowRight') {\n                    (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_2__.getElement)(this.element.id + '_chart_legend_pageup').removeAttribute('tabindex');\n                    this.focusChild((0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_2__.getElement)(this.element.id + '_chart_legend_pagedown'));\n                }\n            }\n            else if ((targetId.indexOf('_chart_legend_') > -1)) {\n                var legendElement_1 = targetElement.parentElement.children;\n                legendElement_1[this.currentLegendIndex].removeAttribute('tabindex');\n                this.currentLegendIndex += (e.code === 'ArrowUp' || e.code === 'ArrowRight') ? +1 : -1;\n                this.currentLegendIndex = this.getActualIndex(this.currentLegendIndex, legendElement_1.length);\n                var currentLegend = legendElement_1[this.currentLegendIndex];\n                this.focusChild(currentLegend);\n                this.removeNavigationStyle();\n                this.setNavigationStyle(currentLegend.id);\n                targetId = currentLegend.children[1].id;\n                actionKey = this.highlightMode !== 'None' ? 'ArrowMove' : '';\n            }\n            else if (targetId.indexOf('-series-') > -1) {\n                var currentPoint = e.target;\n                targetElement.removeAttribute('tabindex');\n                targetElement.blur();\n                if (e.code === 'ArrowRight' || e.code === 'ArrowLeft') {\n                    this.currentSeriesIndex = this.currentSeriesIndex + (e.code === 'ArrowRight' ? 1 : -1);\n                    this.currentSeriesIndex = this.getActualIndex(this.currentSeriesIndex, this.series.length);\n                }\n                else {\n                    this.currentPointIndex += e.code === 'ArrowUp' ? 1 : -1;\n                }\n                if (targetId.indexOf('-point-') > -1) {\n                    this.currentPointIndex = this.getActualIndex(this.currentPointIndex, this.visibleSeries[this.currentSeriesIndex].points.length ?\n                        this.currentSeries.points.length : 1);\n                    var pointElements = document.querySelectorAll('[id*=\"svg-0-region-series-' + this.currentSeriesIndex + '-point-' +\n                        this.currentPointIndex + '\"]');\n                    for (var i = 0; i < pointElements.length; i++) {\n                        if (pointElements[i].id.split('-point-')[1].split('-')[0] === this.currentPointIndex.toString()) {\n                            currentPoint = pointElements[i];\n                        }\n                    }\n                }\n                targetId = this.focusChild(currentPoint);\n                this.removeNavigationStyle();\n                this.setNavigationStyle(currentPoint.id);\n                actionKey = this.tooltip.enable || this.highlightMode !== 'None' ? 'ArrowMove' : '';\n            }\n        }\n        else if ((e.code === 'Enter' || e.code === 'Space') && ((targetId.indexOf('_chart_legend_') > -1) ||\n            (targetId.indexOf('-point-') > -1))) {\n            targetId = (targetId.indexOf('_chart_legend_page') > -1) ? targetId : ((targetId.indexOf('_chart_legend_') > -1) ?\n                targetElement.children[1].id : targetId);\n            actionKey = 'Enter';\n        }\n        if (actionKey !== '') {\n            this.chartKeyboardNavigations(e, targetId, actionKey);\n        }\n        if (e.code === 'Tab') {\n            this.setNavigationStyle(targetId);\n        }\n        return false;\n    };\n    /**\n     * Sets the tabindex for the current element and removes it from the previous element.\n     *\n     * @param {HTMLElement} previousElement - The element whose tabindex should be removed.\n     * @param {HTMLElement} currentElement - The element to which tabindex should be set.\n     * @returns {void}\n     * @private\n     */\n    Chart3D.prototype.setTabIndex = function (previousElement, currentElement) {\n        if (previousElement) {\n            previousElement.removeAttribute('tabindex');\n        }\n        if (currentElement) {\n            currentElement.setAttribute('tabindex', '0');\n        }\n    };\n    /**\n     * Calculates the actual index considering boundary conditions within a given range.\n     *\n     * @param {number} index - The index to be adjusted.\n     * @param {number} totalLength - The total length or maximum allowed index value.\n     * @returns {number} - The adjusted index within the valid range.\n     */\n    Chart3D.prototype.getActualIndex = function (index, totalLength) {\n        return index > totalLength - 1 ? 0 : (index < 0 ? totalLength - 1 : index);\n    };\n    /**\n     *  Used to configure tooltips for the chart's axes.\n     *\n     * @private\n     * @param {Event} event - Specifies the event args.\n     * @param {number} x - Specifies the x value.\n     * @param {number} y - Specifies the y value.\n     * @param {boolean} isTouch - Specifies the boolean value.\n     * @description - Handles the axis tooltip.\n     * @returns {void}\n     */\n    Chart3D.prototype.axisTooltip = function (event, x, y, isTouch) {\n        var targetId = event.target.id;\n        if ((targetId.indexOf('axis-label') > -1) &&\n            (event.target.textContent.indexOf('...') > -1)) {\n            var isTitleOrLegendEnabled = (this.legendSettings.visible || this.primaryXAxis.title === '');\n            (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_2__.showTooltip)(this.findAxisLabel(targetId), x, y, this.element.offsetWidth, this.element.id + '-EJ2-axis-label-tooltip', (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_2__.getElement)(this.element.id + '_Secondary_Element'), isTouch, isTitleOrLegendEnabled);\n        }\n        else {\n            (0,_syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_1__.removeElement)(this.element.id + '-EJ2-axis-label-tooltip');\n        }\n    };\n    /**\n     * Searches for an axis label based on the provided text.\n     *\n     * @param {string} text - The text to search for within the axis label collection.\n     * @returns {string} - The matching axis label, or an empty string if no match is found.\n     */\n    Chart3D.prototype.findAxisLabel = function (text) {\n        var texts = ((text.replace(this.element.id + '-', '')).replace('-axis-label', '')).split('-');\n        return this.axisCollections[parseInt(texts[0], 10)].visibleLabels[parseInt(texts[1], 10)].originalText;\n    };\n    /**\n     * Sets focus on a child element within the parent element.\n     *\n     * @param {HTMLElement} element - The parent element containing the child to be focused.\n     * @returns {string} - A message indicating the result of the focus operation.\n     */\n    Chart3D.prototype.focusChild = function (element) {\n        element.setAttribute('tabindex', '0');\n        var className = element.getAttribute('class');\n        element.setAttribute('tabindex', '0');\n        if (className && className.indexOf('e-chart-focused') === -1) {\n            className = 'e-chart-focused ' + className;\n        }\n        else if (!className) {\n            className = 'e-chart-focused';\n        }\n        element.setAttribute('class', className);\n        element.focus();\n        return element.id;\n    };\n    /**\n     * Handles the document onkey.\n     *\n     * @param {KeyboardEvent} e - The keyboard event triggering the navigation.\n     * @private\n     * @returns {void}\n     */\n    Chart3D.prototype.documentKeyHandler = function (e) {\n        if (e.altKey && e.keyCode === 74 && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.element)) {\n            this.element.focus();\n        }\n    };\n    /**\n     * Handles chart keyboard navigation events.\n     *\n     * @param {KeyboardEvent} e - The keyboard event triggering the navigation.\n     * @param {string} targetId - The ID of the target element or chart component.\n     * @param { string} actionKey - - The type of keyboard action (e.g., 'Tab' or 'ArrowMove').\n     * @returns {void}\n     */\n    Chart3D.prototype.chartKeyboardNavigations = function (e, targetId, actionKey) {\n        this.isLegendClicked = false;\n        this.removeNavigationStyle();\n        this.setNavigationStyle(targetId);\n        switch (actionKey) {\n            case 'Tab':\n            case 'ArrowMove':\n                if (this.highlight3DModule) {\n                    this.highlight3DModule.removeLegendHighlightStyles();\n                }\n                if (targetId.indexOf('-point-') > -1) {\n                    if (document.activeElement) {\n                        var element = document.activeElement;\n                        var rect = element.getBoundingClientRect();\n                        // Client coordinates (relative to the viewport)\n                        var clientX = rect.left + rect.width / 2;\n                        var clientY = rect.top;\n                        // Page coordinates (relative to the whole document)\n                        var pageX = window.scrollX + clientX;\n                        var pageY = window.scrollY + clientY;\n                        this.mouseX = pageX;\n                        this.mouseY = pageY;\n                    }\n                    if (this.highlight3DModule) {\n                        this.highlight3DModule.highlightChart(document.getElementById(targetId), 'mousemove');\n                        this.highlight3DModule.completeSelection();\n                    }\n                    if (this.tooltip3DModule) {\n                        var data = { series: this.visibleSeries[targetId.split('-series-')[1].split('-point-')[0]], point: this.visibleSeries[targetId.split('-series-')[1].split('-point-')[0]].points[targetId.split('-point-')[1].split('-')[0]] };\n                        var svgElement = document.getElementById(this.element.id + '_tooltip_svg');\n                        var isFirst = (svgElement && parseInt(svgElement.getAttribute('opacity'), 10) > 0);\n                        var tooltipDiv = this.tooltip3DModule.getTooltipElement(isFirst);\n                        if (this.tooltip3DModule.pushData(data, !isFirst, tooltipDiv, true)) {\n                            this.tooltip3DModule.triggerTooltipRender(data, !isFirst, this.tooltip3DModule.getTooltipText(data), this.tooltip3DModule.findHeader(data));\n                        }\n                    }\n                }\n                if (this.highlight3DModule && this.highlightMode !== 'None') {\n                    targetId = targetId.indexOf('_chart_legend_g_') > -1 ? document.getElementById(targetId).firstChild['id'] : targetId;\n                    var legendID = this.element.id + '_chart_legend';\n                    var legendItemsId = [legendID + '_text_', legendID + '_shape_marker_',\n                        legendID + '_shape_'];\n                    for (var i = 0; i < legendItemsId.length; i++) {\n                        var id = legendItemsId[i];\n                        if (targetId.indexOf(id) > -1) {\n                            document.getElementById(targetId).setAttribute('class', '');\n                            this.highlight3DModule.legendSelection(this, parseInt(targetId.split(id)[1], 10), document.getElementById(targetId), 'mousemove');\n                            break;\n                        }\n                    }\n                }\n                break;\n            case 'Enter':\n            case 'Space':\n                if (targetId.indexOf('_chart_legend_') > -1) {\n                    this.isLegendClicked = true;\n                    this.legend3DModule.click(e);\n                    this.focusChild(document.getElementById(targetId).parentElement);\n                    this.setNavigationStyle(document.getElementById(targetId).parentElement.id);\n                }\n                else {\n                    if (this.selection3DModule) {\n                        this.selection3DModule.calculateSelectedElements(document.getElementById(targetId), 'click');\n                    }\n                    this.setNavigationStyle(targetId);\n                }\n                break;\n            case 'CtrlP':\n                this.print();\n                break;\n            case 'ESC':\n                this.tooltip3DModule.removeTooltip(1);\n                break;\n        }\n    };\n    /**\n     *  Applys the style for chart.\n     *\n     * @private\n     * @param {HTMLElement} element - Specifies the element.\n     * @returns {void}\n     */\n    Chart3D.prototype.setStyle = function (element) {\n        var disableScroll = this.selectionMode !== 'None' || this.highlightMode !== 'None';\n        element.style.touchAction = this.enableRotation || disableScroll ? 'none' : 'element';\n        element.style.msTouchAction = disableScroll ? 'none' : 'element';\n        element.style.msContentZooming = 'none';\n        element.style.msUserSelect = 'none';\n        element.style.webkitUserSelect = 'none';\n        element.style.position = 'relative';\n        element.style.display = 'block';\n        element.style.overflow = 'hidden';\n        element.style.height = (element.style.height || (this.height && this.height.indexOf('%') === -1)) ? element.style.height : 'inherit';\n    };\n    /**\n     * The method to determine whether it is a secondary axis or not.\n     *\n     * @param  {Chart3DAxis} axis - Specifies the axis.\n     * @returns {boolean} Returns the boolean value.\n     * @private\n     */\n    Chart3D.prototype.isSecondaryAxis = function (axis) {\n        return (this.axes.indexOf(axis) > -1);\n    };\n    /**\n     * To refresh the rows and columns.\n     *\n     * @param {Chart3DRow[] | Chart3DColumn} definitions - Specifies the row or column definition.\n     * @private\n     * @returns {void}\n     */\n    Chart3D.prototype.refreshDefinition = function (definitions) {\n        for (var _i = 0, definitions_1 = definitions; _i < definitions_1.length; _i++) {\n            var item = definitions_1[_i];\n            item.axes = [];\n        }\n    };\n    /**\n     * Adds new series to the chart\n     *\n     * @param {Chart3DSeriesModel[]} seriesCollection - The series collection to be added to the chart.\n     * @returns {void}\n     */\n    Chart3D.prototype.addSeries = function (seriesCollection) {\n        this.animateSeries = false;\n        for (var _i = 0, seriesCollection_1 = seriesCollection; _i < seriesCollection_1.length; _i++) {\n            var series = seriesCollection_1[_i];\n            series = new _series_chart_series__WEBPACK_IMPORTED_MODULE_12__.Chart3DSeries(this, 'series', series);\n            this.series.push(series);\n        }\n        this.refresh();\n    };\n    /**\n     * Removes a series from the chart\n     *\n     * @param {number} index - The index of the series to be removed from the chart.\n     * @returns {void}\n     */\n    Chart3D.prototype.removeSeries = function (index) {\n        this.redraw = false;\n        this.animateSeries = false;\n        if (this.visibleSeries[index]) {\n            this.visibleSeries[index].xAxis.orientation = null;\n            this.visibleSeries[index].yAxis.orientation = null;\n        }\n        for (var i = 0; i < this.axes.length; i++) {\n            if (this.axes[i].orientation === null) {\n                this.axes.splice(i, 1);\n            }\n        }\n        this.series.splice(index, 1);\n        this.refresh();\n    };\n    /**\n     * Refresh the axis default value.\n     *\n     * @private\n     * @returns {void}\n     */\n    Chart3D.prototype.refreshAxis = function () {\n        var axis = this.primaryXAxis;\n        axis.rect = new _syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_1__.Rect(undefined, undefined, 0, 0);\n        axis = this.primaryYAxis;\n        axis.isStack100 = false;\n        axis.rect = new _syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_1__.Rect(undefined, undefined, 0, 0);\n        for (var _i = 0, _a = this.axes; _i < _a.length; _i++) {\n            var item = _a[_i];\n            axis = item;\n            axis.rect = new _syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_1__.Rect(undefined, undefined, 0, 0);\n            axis.isStack100 = false;\n        }\n    };\n    /**\n     * Refresh the 3D chart axis.\n     *\n     * @param {Chart3DAxis} axis - Specifies the axis.\n     * @returns {boolean} Returns the boolean value.\n     * @private\n     */\n    Chart3D.prototype.axisChange = function (axis) {\n        if (!axis.name && !axis.valueType) {\n            return false;\n        }\n        this.refreshDefinition(this.columns);\n        this.refreshDefinition(this.rows);\n        this.calculateVisibleAxis();\n        this.processData();\n        return true;\n    };\n    /**\n     * Get visible series by index.\n     *\n     * @param {Chart3DSeries[]} visibleSeries - Specifies the visible series.\n     * @param {number} index - Specifies the index.\n     * @returns {Chart3DSeries} Returns the chart 3D series.\n     */\n    Chart3D.prototype.getVisibleSeries = function (visibleSeries, index) {\n        for (var _i = 0, visibleSeries_1 = visibleSeries; _i < visibleSeries_1.length; _i++) {\n            var series = visibleSeries_1[_i];\n            if (index === series.index) {\n                return series;\n            }\n        }\n        return null;\n    };\n    /**\n     * To remove style element.\n     *\n     * @private\n     * @returns {void}\n     */\n    Chart3D.prototype.removeStyles = function () {\n        (0,_syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_1__.removeElement)(this.element.id + '_ej2_chart_selection');\n        (0,_syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_1__.removeElement)(this.element.id + '_ej2_chart_highlight');\n    };\n    /**\n     * To find the 3D chart visible series.\n     *\n     * @private\n     * @returns {void}\n     */\n    Chart3D.prototype.calculateVisibleSeries = function () {\n        var series;\n        this.visibleSeries = [];\n        var colors = this.palettes.length ? this.palettes : (0,_model_theme__WEBPACK_IMPORTED_MODULE_6__.get3DSeriesColor)(this.theme);\n        var count = colors.length;\n        var seriesCollection = this.series;\n        var vibileSeries = this.series[0];\n        if (vibileSeries) {\n            this.requireInvertedAxis = ((vibileSeries.type.indexOf('Bar') !== -1) && !this.isTransposed) ||\n                ((vibileSeries.type.indexOf('Bar') === -1) && this.isTransposed);\n        }\n        for (var i = 0, len = seriesCollection.length; i < len; i++) {\n            series = seriesCollection[i];\n            series.category = 'Series';\n            series.index = i;\n            series.interior = series.fill || colors[i % count];\n            if (this.isSecondaryAxis(series.xAxis)) {\n                series.xAxis.internalVisibility = series.xAxis.series.some(function (value) { return (value.visible); });\n            }\n            if (this.isSecondaryAxis(series.yAxis)) {\n                series.yAxis.internalVisibility = series.yAxis.series.some(function (value) { return (value.visible); });\n            }\n            switch (series.type) {\n                case 'Bar':\n                case 'StackingBar':\n                case 'StackingBar100':\n                    if (seriesCollection[0].type.indexOf('Bar') === -1) {\n                        continue;\n                    }\n                    break;\n                default:\n                    if (seriesCollection[0].type.indexOf('Bar') > -1) {\n                        continue;\n                    }\n                    break;\n            }\n            this.visibleSeries.push(series);\n            seriesCollection[i] = series;\n        }\n    };\n    Chart3D.prototype.highlightAnimation = function (element, index, duration, startOpacity) {\n        var endOpacity = parseFloat(this.visibleSeries[index].opacity.toString());\n        if (endOpacity) {\n            new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Animation({}).animate(element, {\n                duration: duration,\n                progress: function (args) {\n                    element.style.animation = '';\n                    var progress = args.timeStamp / args.duration;\n                    var currentOpacity = startOpacity + (endOpacity - startOpacity) * progress;\n                    element.setAttribute('opacity', currentOpacity.toString());\n                },\n                end: function () {\n                    element.setAttribute('opacity', endOpacity.toString());\n                }\n            });\n        }\n    };\n    Chart3D.prototype.stopElementAnimation = function (element, index) {\n        var endOpacity = parseFloat(this.visibleSeries[index].opacity.toString());\n        var animation = element.getAttribute('e-animate');\n        if (animation) {\n            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Animation.stop(element);\n        }\n        element.setAttribute('opacity', endOpacity.toString());\n    };\n    /**\n     * To destroy the widget.\n     *\n     * @function destroy\n     * @member of Chart\n     * @returns {void}\n     */\n    Chart3D.prototype.destroy = function () {\n        this.horizontalAxes = [];\n        this.verticalAxes = [];\n        this.visibleSeries = [];\n        this.axisCollections = [];\n        this.seriesElements = null;\n        this.chartAxisLayoutPanel = null;\n        this.dataLabelElements = null;\n        this.dataLabelCollections = null;\n        (0,_syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_1__.removeElement)(this.element.id + 'Keyboard_chart_focus');\n        (0,_syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_1__.removeElement)(this.element.id + '_ej2_chart_highlight');\n        (0,_syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_1__.removeElement)('chartmeasuretext');\n        var highlightElement = document.getElementById(this.element.id + '_ej2_chart_highlight');\n        if (highlightElement) {\n            highlightElement.remove();\n        }\n        var selectionElement = document.getElementById(this.element.id + '_ej2_chart_selection');\n        if (selectionElement) {\n            selectionElement.remove();\n        }\n        /**\n         * To fix react timeout destroy issue.\n         */\n        if (this.element) {\n            this.unWireEvents();\n            if (this.isReact) {\n                this.clearTemplate();\n            }\n            _super.prototype.destroy.call(this);\n            this.polygons = [];\n            var grpElement = document.getElementById(this.chart3D.id);\n            if (grpElement) {\n                grpElement.innerHTML = '';\n                grpElement.remove();\n            }\n            this.removeSvg();\n            this.svgObject = null;\n        }\n    };\n    /**\n     * For internal use only - Get the module name.\n     *\n     * @returns {string} returns the module name\n     * @private\n     */\n    Chart3D.prototype.getModuleName = function () {\n        return 'chart3d';\n    };\n    /**\n     * Get the properties to be maintained in the persisted state.\n     *\n     * @private\n     * @returns {string} returns the string.\n     */\n    Chart3D.prototype.getPersistData = function () {\n        var keyEntity = ['loaded'];\n        return this.addOnPersist(keyEntity);\n    };\n    /**\n     * Called internally if any of the property value changed.\n     *\n     * @private\n     * @param {Chart3DModel} newProp - Specifies the new property.\n     * @param {Chart3DModel} oldProp - Specifies the old property.\n     * @returns {void}\n     */\n    Chart3D.prototype.onPropertyChanged = function (newProp, oldProp) {\n        var renderer = false;\n        var refreshBounds = false;\n        var axis;\n        this.animateSeries = false;\n        var len;\n        var seriesRefresh = false;\n        var series;\n        if (!this.delayRedraw) {\n            for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {\n                var prop = _a[_i];\n                switch (prop) {\n                    case 'primaryXAxis':\n                        axis = newProp.primaryXAxis;\n                        refreshBounds = this.axisChange(axis);\n                        if (newProp.primaryXAxis.edgeLabelPlacement) {\n                            renderer = true;\n                        }\n                        refreshBounds = true;\n                        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(axis.isInversed) || !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(axis.opposedPosition)) {\n                            this.primaryXAxis.setIsInversedAndOpposedPosition();\n                        }\n                        break;\n                    case 'primaryYAxis':\n                        axis = newProp.primaryYAxis;\n                        refreshBounds = this.axisChange(axis);\n                        if (newProp.primaryYAxis.edgeLabelPlacement) {\n                            renderer = true;\n                        }\n                        refreshBounds = true;\n                        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(axis.isInversed) || !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(axis.opposedPosition)) {\n                            this.primaryYAxis.setIsInversedAndOpposedPosition();\n                        }\n                        break;\n                    case 'axes':\n                        for (var _b = 0, _c = Object.keys(newProp.axes); _b < _c.length; _b++) {\n                            var index = _c[_b];\n                            axis = newProp.axes[index];\n                            refreshBounds = refreshBounds || this.axisChange(axis);\n                            refreshBounds = true;\n                            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(axis.isInversed) || !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(axis.opposedPosition)) {\n                                this.axes[index].setIsInversedAndOpposedPosition();\n                            }\n                        }\n                        break;\n                    case 'height':\n                    case 'width':\n                        this.createChartSvg();\n                        refreshBounds = true;\n                        break;\n                    case 'subTitle':\n                    case 'title':\n                        refreshBounds = true;\n                        break;\n                    case 'titleStyle':\n                        if (newProp.titleStyle && (newProp.titleStyle.size || newProp.titleStyle.textOverflow)) {\n                            refreshBounds = true;\n                        }\n                        else {\n                            renderer = true;\n                        }\n                        break;\n                    case 'subTitleStyle':\n                        if (newProp.subTitleStyle && (newProp.subTitleStyle.size || newProp.subTitleStyle.textOverflow)) {\n                            refreshBounds = true;\n                        }\n                        else {\n                            renderer = true;\n                        }\n                        break;\n                    case 'border':\n                        renderer = true;\n                        break;\n                    case 'series':\n                        len = this.series.length;\n                        for (var i = 0; i < len; i++) {\n                            series = newProp.series[i];\n                            if (series && (series.dataSource || series.query || series.xName ||\n                                series.yName || series.size || series.fill || series.name || series.type)) {\n                                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)(this.getVisibleSeries(this.visibleSeries, i), series, null, true);\n                                seriesRefresh = true;\n                            }\n                        }\n                        if (this.availableSize && this.element) {\n                            this.element.style.height = (!this.element.style.height || this.element.style.height === 'inherit') ? (this.availableSize.height + 'px') : this.element.style.height;\n                        }\n                        if (seriesRefresh) {\n                            this.calculateVisibleSeries();\n                            this.refreshDefinition(this.columns);\n                            this.refreshDefinition(this.rows);\n                            this.calculateVisibleAxis();\n                            this.processData(false);\n                            refreshBounds = true;\n                        }\n                        break;\n                    case 'background':\n                        renderer = true;\n                        break;\n                    case 'dataSource':\n                        this.processData(false);\n                        refreshBounds = true;\n                        break;\n                    case 'legendSettings':\n                        if (!newProp.legendSettings.background || !newProp.legendSettings.opacity) {\n                            refreshBounds = true;\n                        }\n                        renderer = true;\n                        break;\n                    case 'palettes':\n                        this.calculateVisibleSeries();\n                        renderer = true;\n                        break;\n                    case 'selectedDataIndexes':\n                        if (this.selection3DModule) {\n                            this.selection3DModule.currentMode = this.selectionMode;\n                            this.selection3DModule.selectedDataIndexes = this.selectedDataIndexes;\n                            this.selection3DModule.styleId = this.element.id + '_ej2_chart_selection';\n                            this.selection3DModule.redrawSelection(this, oldProp.selectionMode, true);\n                        }\n                        break;\n                    case 'selectionMode':\n                        if (this.selection3DModule && newProp.selectionMode && newProp.selectionMode.indexOf('Drag') === -1) {\n                            this.selection3DModule.currentMode = this.selectionMode;\n                            this.selection3DModule.styleId = this.element.id + '_ej2_chart_selection';\n                            this.selection3DModule.redrawSelection(this, oldProp.selectionMode, true);\n                        }\n                        break;\n                    case 'isMultiSelect':\n                        if (this.selection3DModule && !newProp.isMultiSelect && this.selection3DModule.selectedDataIndexes.length > 1) {\n                            this.selection3DModule.currentMode = this.selectionMode;\n                            this.selection3DModule.styleId = this.element.id + '_ej2_chart_selection';\n                            this.selection3DModule.redrawSelection(this, oldProp.selectionMode);\n                        }\n                        break;\n                    case 'highlightMode':\n                    case 'selectionPattern':\n                    case 'highlightPattern':\n                        this.removeStyles();\n                        renderer = true;\n                        break;\n                    case 'theme':\n                        this.animateSeries = true;\n                        break;\n                    case 'enableRtl':\n                    case 'locale':\n                    case 'currencyCode':\n                        this.refresh();\n                        break;\n                    case 'tooltip':\n                        if (this.tooltip3DModule) { // To check the tooltip enable is true.\n                            this.tooltip3DModule.previousPoints = [];\n                            if (this.tooltip.template) {\n                                this.tooltip3DModule.template = this.tooltip.template;\n                            }\n                        }\n                        break;\n                    case 'enableRotation':\n                    case 'tilt':\n                    case 'depth':\n                    case 'wallSize':\n                    case 'rotation':\n                    case 'perspectiveAngle':\n                    case 'enableSideBySidePlacement':\n                        renderer = true;\n                        break;\n                }\n            }\n            if (!refreshBounds && renderer) {\n                this.removeSvg();\n                this.polygons = [];\n                this.renderElements();\n                this.trigger('loaded', { chart: this });\n            }\n            if (refreshBounds) {\n                this.removeSvg();\n                if (this.isReact) {\n                    this.clearTemplate();\n                }\n                this.polygons = [];\n                this.refreshAxis();\n                this.refreshBound();\n                this.trigger('loaded', { chart: this });\n                this.redraw = false;\n                this.animated = false;\n            }\n        }\n    };\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('')\n    ], Chart3D.prototype, \"title\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('')\n    ], Chart3D.prototype, \"subTitle\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('Bootstrap5')\n    ], Chart3D.prototype, \"theme\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(null)\n    ], Chart3D.prototype, \"description\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(null)\n    ], Chart3D.prototype, \"width\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(null)\n    ], Chart3D.prototype, \"backgroundImage\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(null)\n    ], Chart3D.prototype, \"background\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('')\n    ], Chart3D.prototype, \"dataSource\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(null)\n    ], Chart3D.prototype, \"height\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(50)\n    ], Chart3D.prototype, \"depth\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(2)\n    ], Chart3D.prototype, \"wallSize\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(0)\n    ], Chart3D.prototype, \"tilt\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], Chart3D.prototype, \"enableRotation\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(0)\n    ], Chart3D.prototype, \"rotation\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(true)\n    ], Chart3D.prototype, \"enableSideBySidePlacement\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(90)\n    ], Chart3D.prototype, \"perspectiveAngle\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(null)\n    ], Chart3D.prototype, \"wallColor\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], Chart3D.prototype, \"isTransposed\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('USD')\n    ], Chart3D.prototype, \"currencyCode\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], Chart3D.prototype, \"enableExport\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Chart3D.prototype, \"load\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Chart3D.prototype, \"loaded\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Chart3D.prototype, \"pointClick\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Chart3D.prototype, \"pointMove\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Chart3D.prototype, \"pointRender\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Chart3D.prototype, \"legendRender\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Chart3D.prototype, \"legendClick\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Chart3D.prototype, \"seriesRender\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Chart3D.prototype, \"textRender\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Chart3D.prototype, \"tooltipRender\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Chart3D.prototype, \"beforeResize\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Chart3D.prototype, \"resized\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Chart3D.prototype, \"chart3DMouseMove\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Chart3D.prototype, \"chart3DMouseClick\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Chart3D.prototype, \"chart3DMouseDown\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Chart3D.prototype, \"chart3DMouseLeave\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Chart3D.prototype, \"chart3DMouseUp\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Chart3D.prototype, \"axisLabelRender\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Chart3D.prototype, \"selectionComplete\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Chart3D.prototype, \"beforeExport\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Chart3D.prototype, \"afterExport\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Chart3D.prototype, \"beforePrint\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({}, _common_model_base__WEBPACK_IMPORTED_MODULE_7__.Margin)\n    ], Chart3D.prototype, \"margin\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({ fontFamily: null, size: null, fontStyle: null, fontWeight: null, color: null }, _model_chart3d_Interface__WEBPACK_IMPORTED_MODULE_4__.TitleSettings)\n    ], Chart3D.prototype, \"titleStyle\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({ fontFamily: null, size: null, fontStyle: null, fontWeight: null, color: null }, _model_chart3d_Interface__WEBPACK_IMPORTED_MODULE_4__.TitleSettings)\n    ], Chart3D.prototype, \"subTitleStyle\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({}, _legend_legend__WEBPACK_IMPORTED_MODULE_14__.Chart3DLegendSettings)\n    ], Chart3D.prototype, \"legendSettings\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({ color: '#DDDDDD', width: 0 }, _common_model_base__WEBPACK_IMPORTED_MODULE_7__.Border)\n    ], Chart3D.prototype, \"border\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({ name: 'primaryXAxis' }, _axis_axis__WEBPACK_IMPORTED_MODULE_10__.Chart3DAxis)\n    ], Chart3D.prototype, \"primaryXAxis\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({ name: 'primaryYAxis' }, _axis_axis__WEBPACK_IMPORTED_MODULE_10__.Chart3DAxis)\n    ], Chart3D.prototype, \"primaryYAxis\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({}, _user_interaction_tooltip__WEBPACK_IMPORTED_MODULE_13__.Chart3DTooltipSettings)\n    ], Chart3D.prototype, \"tooltip\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Collection)([{}], _axis_axis__WEBPACK_IMPORTED_MODULE_10__.Chart3DRow)\n    ], Chart3D.prototype, \"rows\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Collection)([{}], _axis_axis__WEBPACK_IMPORTED_MODULE_10__.Chart3DColumn)\n    ], Chart3D.prototype, \"columns\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Collection)([{}], _axis_axis__WEBPACK_IMPORTED_MODULE_10__.Chart3DAxis)\n    ], Chart3D.prototype, \"axes\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Collection)([{}], _series_chart_series__WEBPACK_IMPORTED_MODULE_12__.Chart3DSeries)\n    ], Chart3D.prototype, \"series\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('')\n    ], Chart3D.prototype, \"highlightColor\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('None')\n    ], Chart3D.prototype, \"selectionMode\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('None')\n    ], Chart3D.prototype, \"highlightMode\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('None')\n    ], Chart3D.prototype, \"selectionPattern\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('None')\n    ], Chart3D.prototype, \"highlightPattern\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], Chart3D.prototype, \"isMultiSelect\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Collection)([], _common_model_base__WEBPACK_IMPORTED_MODULE_7__.Indexes)\n    ], Chart3D.prototype, \"selectedDataIndexes\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], Chart3D.prototype, \"useGroupingSeparator\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)([])\n    ], Chart3D.prototype, \"palettes\", void 0);\n    Chart3D = __decorate([\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.NotifyPropertyChanges\n    ], Chart3D);\n    return Chart3D;\n}(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Component));\n\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-charts/src/chart3d/chart3D.js?");

/***/ })

}]);