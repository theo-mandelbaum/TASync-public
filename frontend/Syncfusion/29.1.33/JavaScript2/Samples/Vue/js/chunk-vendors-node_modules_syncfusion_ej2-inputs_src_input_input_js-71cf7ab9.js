"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkej2_vue_samples"] = self["webpackChunkej2_vue_samples"] || []).push([["chunk-vendors-node_modules_syncfusion_ej2-inputs_src_input_input_js-71cf7ab9"],{

/***/ "./node_modules/@syncfusion/ej2-inputs/src/input/input.js":
/*!****************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-inputs/src/input/input.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Input: () => (/* binding */ Input),\n/* harmony export */   TEXTBOX_FOCUS: () => (/* binding */ TEXTBOX_FOCUS),\n/* harmony export */   containerAttributes: () => (/* binding */ containerAttributes)\n/* harmony export */ });\n/* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @syncfusion/ej2-base */ \"./node_modules/@syncfusion/ej2-base/index.js\");\n/* eslint-disable valid-jsdoc, jsdoc/require-jsdoc, jsdoc/require-returns, jsdoc/require-param */\n\n\nvar CLASSNAMES = {\n    RTL: 'e-rtl',\n    DISABLE: 'e-disabled',\n    INPUT: 'e-input',\n    TEXTAREA: 'e-multi-line-input',\n    INPUTGROUP: 'e-input-group',\n    FLOATINPUT: 'e-float-input',\n    FLOATLINE: 'e-float-line',\n    FLOATTEXT: 'e-float-text',\n    FLOATTEXTCONTENT: 'e-float-text-content',\n    CLEARICON: 'e-clear-icon',\n    CLEARICONHIDE: 'e-clear-icon-hide',\n    LABELTOP: 'e-label-top',\n    LABELBOTTOM: 'e-label-bottom',\n    NOFLOATLABEL: 'e-no-float-label',\n    INPUTCUSTOMTAG: 'e-input-custom-tag',\n    FLOATCUSTOMTAG: 'e-float-custom-tag'\n};\n/**\n * Defines the constant attributes for the input element container.\n */\nvar containerAttributes = ['title', 'style', 'class'];\n/**\n * Defines the constant focus class for the input element.\n */\nvar TEXTBOX_FOCUS = 'e-input-focus';\n/**\n * Base for Input creation through util methods.\n */\n// eslint-disable-next-line @typescript-eslint/no-namespace\nvar Input;\n(function (Input) {\n    var privateInputObj = {\n        container: null,\n        buttons: [],\n        clearButton: null\n    };\n    var floatType;\n    var isBindClearAction = true;\n    /**\n     * Create a wrapper to input element with multiple span elements and set the basic properties to input based components.\n     * ```\n     * E.g : Input.createInput({ element: element, floatLabelType : \"Auto\", properties: { placeholder: 'Search' } });\n     * ```\n     *\n     */\n    function createInput(args, internalCreateElement) {\n        args.element.__eventHandlers = {};\n        var makeElement = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(internalCreateElement) ? internalCreateElement : _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement;\n        var inputObject = { container: null, buttons: [], clearButton: null };\n        floatType = args.floatLabelType;\n        isBindClearAction = args.bindClearAction;\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(args.floatLabelType) || args.floatLabelType === 'Never') {\n            inputObject.container = createInputContainer(args, CLASSNAMES.INPUTGROUP, CLASSNAMES.INPUTCUSTOMTAG, 'span', makeElement);\n            args.element.parentNode.insertBefore(inputObject.container, args.element);\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([args.element], CLASSNAMES.INPUT);\n            inputObject.container.appendChild(args.element);\n        }\n        else {\n            createFloatingInput(args, inputObject, makeElement);\n        }\n        bindInitialEvent(args);\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(args.properties) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(args.properties.showClearButton) &&\n            args.properties.showClearButton) {\n            setClearButton(args.properties.showClearButton, args.element, inputObject, true, makeElement);\n            inputObject.clearButton.setAttribute('role', 'button');\n            if (inputObject.container.classList.contains(CLASSNAMES.FLOATINPUT)) {\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([inputObject.container], CLASSNAMES.INPUTGROUP);\n            }\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(args.buttons)) {\n            for (var i = 0; i < args.buttons.length; i++) {\n                inputObject.buttons.push(appendSpan(args.buttons[i], inputObject.container, makeElement));\n            }\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(args.element) && args.element.tagName === 'TEXTAREA') {\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([inputObject.container], CLASSNAMES.TEXTAREA);\n        }\n        validateInputType(inputObject.container, args.element);\n        inputObject = setPropertyValue(args, inputObject);\n        createSpanElement(inputObject.container, makeElement);\n        privateInputObj = inputObject;\n        return inputObject;\n    }\n    Input.createInput = createInput;\n    function bindFocusEventHandler(args) {\n        var parent = getParentNode(args.element);\n        if (parent.classList.contains('e-input-group') || parent.classList.contains('e-outline') || parent.classList.contains('e-filled')) {\n            parent.classList.add('e-input-focus');\n        }\n        if (args.floatLabelType !== 'Never') {\n            setTimeout(function () {\n                Input.calculateWidth(args.element, parent);\n            }, 80);\n        }\n    }\n    function bindBlurEventHandler(args) {\n        var parent = getParentNode(args.element);\n        if (parent.classList.contains('e-input-group') || parent.classList.contains('e-outline') || parent.classList.contains('e-filled')) {\n            parent.classList.remove('e-input-focus');\n        }\n        if (args.floatLabelType !== 'Never') {\n            setTimeout(function () {\n                Input.calculateWidth(args.element, parent);\n            }, 80);\n        }\n    }\n    function bindInputEventHandler(args) {\n        checkInputValue(args.floatLabelType, args.element);\n    }\n    function bindInitialEvent(args) {\n        checkInputValue(args.floatLabelType, args.element);\n        var focusHandler = function () { return bindFocusEventHandler(args); };\n        var blurHandler = function () { return bindBlurEventHandler(args); };\n        var inputHandler = function () { return bindInputEventHandler(args); };\n        args.element.addEventListener('focus', focusHandler);\n        args.element.addEventListener('blur', blurHandler);\n        args.element.addEventListener('input', inputHandler);\n        args.element.__eventHandlers['inputFocusHandler'] = { focusHandler: focusHandler };\n        args.element.__eventHandlers['inputBlurHandler'] = { blurHandler: blurHandler };\n        args.element.__eventHandlers['inputHandler'] = { inputHandler: inputHandler };\n    }\n    Input.bindInitialEvent = bindInitialEvent;\n    function unbindInitialEvent(args) {\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(args.element)) {\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(args.element.__eventHandlers)) {\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(args.element.__eventHandlers['inputFocusHandler'])\n                    && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(args.element.__eventHandlers['inputBlurHandler'])\n                    && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(args.element.__eventHandlers['inputHandler'])) {\n                    var focusHandler_1 = args.element.__eventHandlers['inputFocusHandler'].focusHandler;\n                    var blurHandler_1 = args.element.__eventHandlers['inputBlurHandler'].blurHandler;\n                    var inputHandler_1 = args.element.__eventHandlers['inputHandler'].inputHandler;\n                    args.element.removeEventListener('focus', focusHandler_1);\n                    args.element.removeEventListener('blur', blurHandler_1);\n                    args.element.removeEventListener('input', inputHandler_1);\n                    // Clean up stored bound functions\n                    delete args.element.__eventHandlers['inputFocusHandler'];\n                    delete args.element.__eventHandlers['inputBlurHandler'];\n                    delete args.element.__eventHandlers['inputHandler'];\n                }\n            }\n        }\n    }\n    function checkInputValue(floatLabelType, inputElement) {\n        var inputValue = inputElement.value;\n        var inputParent = inputElement.parentElement;\n        var grandParent = inputParent && inputParent.parentElement;\n        if (inputValue !== '' && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(inputValue)) {\n            if (inputParent && inputParent.classList.contains('e-input-group')) {\n                inputParent.classList.add('e-valid-input');\n            }\n            else if (grandParent && grandParent.classList.contains('e-input-group')) {\n                grandParent.classList.add('e-valid-input');\n            }\n        }\n        else if (floatLabelType !== 'Always') {\n            if (inputParent && inputParent.classList.contains('e-input-group')) {\n                inputParent.classList.remove('e-valid-input');\n            }\n            else if (grandParent && grandParent.classList.contains('e-input-group')) {\n                grandParent.classList.remove('e-valid-input');\n            }\n        }\n    }\n    function _focusFn() {\n        var label = getParentNode(this).getElementsByClassName('e-float-text')[0];\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(label)) {\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([label], CLASSNAMES.LABELTOP);\n            if (label.classList.contains(CLASSNAMES.LABELBOTTOM)) {\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([label], CLASSNAMES.LABELBOTTOM);\n            }\n        }\n    }\n    function _blurFn() {\n        var parent = getParentNode(this);\n        if ((parent.getElementsByTagName('textarea')[0]) ? parent.getElementsByTagName('textarea')[0].value === '' :\n            parent.getElementsByTagName('input')[0].value === '') {\n            var label = parent.getElementsByClassName('e-float-text')[0];\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(label)) {\n                if (label.classList.contains(CLASSNAMES.LABELTOP)) {\n                    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([label], CLASSNAMES.LABELTOP);\n                }\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([label], CLASSNAMES.LABELBOTTOM);\n            }\n        }\n    }\n    function wireFloatingEvents(element) {\n        element.addEventListener('focus', _focusFn);\n        element.addEventListener('blur', _blurFn);\n    }\n    Input.wireFloatingEvents = wireFloatingEvents;\n    function unwireFloatingEvents(element) {\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(element)) {\n            element.removeEventListener('focus', _focusFn);\n            element.removeEventListener('blur', _blurFn);\n        }\n    }\n    function inputEventHandler(args) {\n        validateLabel(args.element, args.floatLabelType);\n    }\n    function blurEventHandler(args) {\n        validateLabel(args.element, args.floatLabelType);\n    }\n    function createFloatingInput(args, inputObject, internalCreateElement) {\n        var makeElement = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(internalCreateElement) ? internalCreateElement : _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement;\n        if (args.floatLabelType === 'Auto') {\n            wireFloatingEvents(args.element);\n        }\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(inputObject.container)) {\n            inputObject.container = createInputContainer(args, CLASSNAMES.FLOATINPUT, CLASSNAMES.FLOATCUSTOMTAG, 'div', makeElement);\n            inputObject.container.classList.add(CLASSNAMES.INPUTGROUP);\n            if (args.element.parentNode) {\n                args.element.parentNode.insertBefore(inputObject.container, args.element);\n            }\n        }\n        else {\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(args.customTag)) {\n                inputObject.container.classList.add(CLASSNAMES.FLOATCUSTOMTAG);\n            }\n            inputObject.container.classList.add(CLASSNAMES.FLOATINPUT);\n        }\n        var floatLinelement = makeElement('span', { className: CLASSNAMES.FLOATLINE });\n        var floatLabelElement = makeElement('label', { className: CLASSNAMES.FLOATTEXT });\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(args.element.id) && args.element.id !== '') {\n            floatLabelElement.id = 'label_' + args.element.id.replace(/ /g, '_');\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.attributes)(args.element, { 'aria-labelledby': floatLabelElement.id });\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(args.element.placeholder) && args.element.placeholder !== '') {\n            floatLabelElement.innerText = encodePlaceHolder(args.element.placeholder);\n            args.element.removeAttribute('placeholder');\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(args.properties) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(args.properties.placeholder) &&\n            args.properties.placeholder !== '') {\n            floatLabelElement.innerText = encodePlaceHolder(args.properties.placeholder);\n        }\n        if (!floatLabelElement.innerText) {\n            inputObject.container.classList.add(CLASSNAMES.NOFLOATLABEL);\n        }\n        if (inputObject.container.classList.contains('e-float-icon-left')) {\n            var inputWrap = inputObject.container.querySelector('.e-input-in-wrap');\n            inputWrap.appendChild(args.element);\n            inputWrap.appendChild(floatLinelement);\n            inputWrap.appendChild(floatLabelElement);\n        }\n        else {\n            inputObject.container.appendChild(args.element);\n            inputObject.container.appendChild(floatLinelement);\n            inputObject.container.appendChild(floatLabelElement);\n        }\n        updateLabelState(args.element.value, floatLabelElement);\n        if (args.floatLabelType === 'Always') {\n            if (floatLabelElement.classList.contains(CLASSNAMES.LABELBOTTOM)) {\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([floatLabelElement], CLASSNAMES.LABELBOTTOM);\n            }\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([floatLabelElement], CLASSNAMES.LABELTOP);\n        }\n        if (args.floatLabelType === 'Auto') {\n            var inputFloatHandler = function () { return inputEventHandler(args); };\n            var blurFloatHandler = function () { return blurEventHandler(args); };\n            // Add event listeners using the defined functions\n            args.element.addEventListener('input', inputFloatHandler);\n            args.element.addEventListener('blur', blurFloatHandler);\n            // Store the event handler functions to remove them later\n            args.element.__eventHandlers['floatInputHandler'] = { inputFloatHandler: inputFloatHandler };\n            args.element.__eventHandlers['floatBlurHandler'] = { blurFloatHandler: blurFloatHandler };\n        }\n        else {\n            unWireFloatLabelEvents(args);\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(args.element.getAttribute('id'))) {\n            floatLabelElement.setAttribute('for', args.element.getAttribute('id'));\n        }\n    }\n    function unWireFloatLabelEvents(args) {\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(args.element) &&\n            !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(args.element.__eventHandlers)\n            && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(args.element.__eventHandlers['floatInputHandler'])\n            && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(args.element.__eventHandlers['floatBlurHandler'])) {\n            var inputFloatHandler = args.element.__eventHandlers['floatInputHandler'].inputFloatHandler;\n            var blurFloatHandler = args.element.__eventHandlers['floatBlurHandler'].blurFloatHandler;\n            // Remove the event listeners using the defined functions\n            args.element.removeEventListener('input', inputFloatHandler);\n            args.element.removeEventListener('blur', blurFloatHandler);\n            // Clean up stored event handler functions\n            delete args.element.__eventHandlers['floatInputHandler'];\n            delete args.element.__eventHandlers['floatBlurHandler'];\n        }\n    }\n    function checkFloatLabelType(type, container) {\n        if (type === 'Always' && container.classList.contains('e-outline')) {\n            container.classList.add('e-valid-input');\n        }\n    }\n    function setPropertyValue(args, inputObject) {\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(args.properties)) {\n            for (var _i = 0, _a = Object.keys(args.properties); _i < _a.length; _i++) {\n                var prop = _a[_i];\n                switch (prop) {\n                    case 'cssClass':\n                        setCssClass(args.properties.cssClass, [inputObject.container]);\n                        checkFloatLabelType(args.floatLabelType, inputObject.container);\n                        break;\n                    case 'enabled':\n                        setEnabled(args.properties.enabled, args.element, args.floatLabelType, inputObject.container);\n                        break;\n                    case 'enableRtl':\n                        setEnableRtl(args.properties.enableRtl, [inputObject.container]);\n                        break;\n                    case 'placeholder':\n                        setPlaceholder(args.properties.placeholder, args.element);\n                        break;\n                    case 'readonly':\n                        setReadonly(args.properties.readonly, args.element);\n                        break;\n                }\n            }\n        }\n        return inputObject;\n    }\n    function updateIconState(value, button, readonly) {\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(button)) {\n            if (value && !readonly) {\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([button], CLASSNAMES.CLEARICONHIDE);\n            }\n            else {\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([button], CLASSNAMES.CLEARICONHIDE);\n            }\n        }\n    }\n    function updateLabelState(value, label, element) {\n        if (element === void 0) { element = null; }\n        if (value) {\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([label], CLASSNAMES.LABELTOP);\n            if (label.classList.contains(CLASSNAMES.LABELBOTTOM)) {\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([label], CLASSNAMES.LABELBOTTOM);\n            }\n        }\n        else {\n            var isNotFocused = element != null ? element !== document.activeElement : true;\n            if (isNotFocused) {\n                if (label.classList.contains(CLASSNAMES.LABELTOP)) {\n                    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([label], CLASSNAMES.LABELTOP);\n                }\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([label], CLASSNAMES.LABELBOTTOM);\n            }\n        }\n    }\n    function getParentNode(element) {\n        var parentNode = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(element.parentNode) ? element\n            : element.parentNode;\n        if (parentNode && parentNode.classList.contains('e-input-in-wrap')) {\n            parentNode = parentNode.parentNode;\n        }\n        return parentNode;\n    }\n    /**\n     * To create clear button.\n     */\n    function createClearButton(element, inputObject, initial, internalCreateElement) {\n        var makeElement = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(internalCreateElement) ? internalCreateElement : _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement;\n        var button = makeElement('span', { className: CLASSNAMES.CLEARICON });\n        var container = inputObject.container;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(initial)) {\n            container.appendChild(button);\n        }\n        else {\n            var baseElement = inputObject.container.classList.contains(CLASSNAMES.FLOATINPUT) ?\n                inputObject.container.querySelector('.' + CLASSNAMES.FLOATTEXT) : element;\n            baseElement.insertAdjacentElement('afterend', button);\n        }\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([button], CLASSNAMES.CLEARICONHIDE);\n        wireClearBtnEvents(element, button, container);\n        button.setAttribute('aria-label', 'close');\n        return button;\n    }\n    function clickHandler(event, element, button) {\n        if (!(element.classList.contains(CLASSNAMES.DISABLE) || element.readOnly)) {\n            event.preventDefault();\n            if (element !== document.activeElement) {\n                element.focus();\n            }\n            element.value = '';\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([button], CLASSNAMES.CLEARICONHIDE);\n        }\n    }\n    function inputHandler(element, button) {\n        updateIconState(element.value, button);\n    }\n    function focusHandler(element, button) {\n        updateIconState(element.value, button, element.readOnly);\n    }\n    function blurHandler(element, button) {\n        setTimeout(function () {\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(button)) {\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([button], CLASSNAMES.CLEARICONHIDE);\n                button = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(element) && element.classList.contains('e-combobox') ? null : button;\n            }\n        }, 200);\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    function wireClearBtnEvents(element, button, container) {\n        if (isBindClearAction === undefined || isBindClearAction) {\n            var clickHandlerEvent = function (e) { return clickHandler(e, element, button); };\n            button.addEventListener('click', clickHandlerEvent);\n            element.__eventHandlers['clearClickHandler'] = { clickHandlerEvent: clickHandlerEvent };\n        }\n        var inputHandlerEvent = function () { return inputHandler(element, button); };\n        var focusHandlerEvent = function () { return focusHandler(element, button); };\n        var blurHandlerEvent = function () { return blurHandler(element, button); };\n        element.addEventListener('input', inputHandlerEvent);\n        element.addEventListener('focus', focusHandlerEvent);\n        element.addEventListener('blur', blurHandlerEvent);\n        // Store the bound functions to remove them later\n        element.__eventHandlers['clearInputHandler'] = { inputHandlerEvent: inputHandlerEvent };\n        element.__eventHandlers['clearFocusHandler'] = { focusHandlerEvent: focusHandlerEvent };\n        element.__eventHandlers['clearBlurHandler'] = { blurHandlerEvent: blurHandlerEvent };\n    }\n    Input.wireClearBtnEvents = wireClearBtnEvents;\n    function unWireClearBtnEvents(element, button) {\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(element) &&\n            !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(element.__eventHandlers)) {\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(element.__eventHandlers['clearClickHandler'])) {\n                var clickHandlerEvent = element.__eventHandlers['clearClickHandler'].clickHandlerEvent;\n                if (isBindClearAction === undefined || isBindClearAction) {\n                    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(button)) {\n                        button.removeEventListener('click', clickHandlerEvent);\n                    }\n                }\n                delete element.__eventHandlers['clearClickHandler'];\n            }\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(element.__eventHandlers['clearInputHandler'])\n                && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(element.__eventHandlers['clearFocusHandler'])\n                && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(element.__eventHandlers['clearBlurHandler'])) {\n                var inputHandlerEvent = element.__eventHandlers['clearInputHandler'].inputHandlerEvent;\n                var focusHandlerEvent = element.__eventHandlers['clearFocusHandler'].focusHandlerEvent;\n                var blurHandlerEvent = element.__eventHandlers['clearBlurHandler'].blurHandlerEvent;\n                element.removeEventListener('input', inputHandlerEvent);\n                element.removeEventListener('focus', focusHandlerEvent);\n                element.removeEventListener('blur', blurHandlerEvent);\n                // Clean up stored Event functions\n                delete element.__eventHandlers['clearInputHandler'];\n                delete element.__eventHandlers['clearFocusHandler'];\n                delete element.__eventHandlers['clearBlurHandler'];\n            }\n        }\n    }\n    function destroy(args, button) {\n        if (button === void 0) { button = null; }\n        unbindInitialEvent(args);\n        if (args.floatLabelType === 'Auto') {\n            unWireFloatLabelEvents(args);\n        }\n        if (args.properties.showClearButton) {\n            unWireClearBtnEvents(args.element, button);\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(args.buttons)) {\n            _internalRipple(false, null, args.buttons);\n        }\n        unwireFloatingEvents(args.element);\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(args.element)) {\n            delete args.element.__eventHandlers;\n            if (args.element.classList.contains(CLASSNAMES.INPUT)) {\n                args.element.classList.remove(CLASSNAMES.INPUT);\n            }\n        }\n        privateInputObj = null;\n    }\n    Input.destroy = destroy;\n    function validateLabel(element, floatLabelType) {\n        var parent = getParentNode(element);\n        if (parent.classList.contains(CLASSNAMES.FLOATINPUT) && floatLabelType === 'Auto') {\n            var label = getParentNode(element).getElementsByClassName('e-float-text')[0];\n            updateLabelState(element.value, label, element);\n        }\n    }\n    /**\n     * To create input box contianer.\n     */\n    function createInputContainer(args, className, tagClass, tag, internalCreateElement) {\n        var makeElement = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(internalCreateElement) ? internalCreateElement : _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement;\n        var container;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(args.customTag)) {\n            container = makeElement(args.customTag, { className: className });\n            container.classList.add(tagClass);\n        }\n        else {\n            container = makeElement(tag, { className: className });\n        }\n        container.classList.add('e-control-wrapper');\n        return container;\n    }\n    function encodePlaceHolder(placeholder) {\n        var result = '';\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(placeholder) && placeholder !== '') {\n            var spanEle = document.createElement('span');\n            spanEle.innerHTML = '<input  placeholder=\"' + placeholder + '\"/>';\n            var hiddenInput = (spanEle.children[0]);\n            result = hiddenInput.placeholder;\n        }\n        return result;\n    }\n    /**\n     * Sets the value to the input element.\n     * ```\n     * E.g : Input.setValue('content', element, \"Auto\", true );\n     * ```\n     *\n     * @param {string} value - Specify the value of the input element.\n     * @param {HTMLInputElement | HTMLTextAreaElement} element - The element on which the specified value is updated.\n     * @param {string} floatLabelType - Specify the float label type of the input element.\n     * @param {boolean} clearButton - Boolean value to specify whether the clear icon is enabled / disabled on the input.\n     */\n    function setValue(value, element, floatLabelType, clearButton) {\n        element.value = value;\n        if (floatLabelType !== 'Never') {\n            calculateWidth(element, element.parentElement);\n        }\n        if ((!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(floatLabelType)) && floatLabelType === 'Auto') {\n            validateLabel(element, floatLabelType);\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(clearButton) && clearButton) {\n            var parentElement = getParentNode(element);\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(parentElement)) {\n                var button = parentElement.getElementsByClassName(CLASSNAMES.CLEARICON)[0];\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(button)) {\n                    if (element.value && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(parentElement) && parentElement.classList.contains('e-input-focus')) {\n                        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([button], CLASSNAMES.CLEARICONHIDE);\n                    }\n                    else {\n                        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([button], CLASSNAMES.CLEARICONHIDE);\n                    }\n                }\n            }\n        }\n        checkInputValue(floatLabelType, element);\n    }\n    Input.setValue = setValue;\n    /**\n     * Sets the single or multiple cssClass to wrapper of input element.\n     * ```\n     * E.g : Input.setCssClass('e-custom-class', [element]);\n     * ```\n     *\n     * @param {string} cssClass - Css class names which are needed to add.\n     * @param {Element[] | NodeList} elements - The elements which are needed to add / remove classes.\n     * @param {string} oldClass\n     * - Css class names which are needed to remove. If old classes are need to remove, can give this optional parameter.\n     */\n    function setCssClass(cssClass, elements, oldClass) {\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(oldClass) && oldClass !== '') {\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)(elements, oldClass.split(' '));\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(cssClass) && cssClass !== '') {\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)(elements, cssClass.split(' '));\n        }\n    }\n    Input.setCssClass = setCssClass;\n    /**\n     * Set the width to the placeholder when it overflows on the button such as spinbutton, clearbutton, icon etc\n     * ```\n     * E.g : Input.calculateWidth(element, container);\n     * ```\n     *\n     * @param {any} element - Input element which is need to add.\n     * @param {HTMLElement} container - The parent element which is need to get the label span to calculate width\n     */\n    function calculateWidth(element, container, moduleName) {\n        if (moduleName !== 'multiselect' && !_isElementVisible(element)) {\n            return;\n        }\n        var elementWidth = moduleName === 'multiselect' ? element : element.clientWidth - parseInt(getComputedStyle(element, null).getPropertyValue('padding-left'), 10);\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(container) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(container.getElementsByClassName('e-float-text-content')[0])) {\n            if (container.getElementsByClassName('e-float-text-content')[0].classList.contains('e-float-text-overflow')) {\n                container.getElementsByClassName('e-float-text-content')[0].classList.remove('e-float-text-overflow');\n            }\n            if (elementWidth < container.getElementsByClassName('e-float-text-content')[0].clientWidth || elementWidth === container.getElementsByClassName('e-float-text-content')[0].clientWidth) {\n                container.getElementsByClassName('e-float-text-content')[0].classList.add('e-float-text-overflow');\n            }\n        }\n    }\n    Input.calculateWidth = calculateWidth;\n    /**\n     * Set the width to the wrapper of input element.\n     * ```\n     * E.g : Input.setWidth('200px', container);\n     * ```\n     *\n     * @param {number | string} width - Width value which is need to add.\n     * @param {HTMLElement} container - The element on which the width is need to add.\n     */\n    function setWidth(width, container) {\n        if (typeof width === 'number') {\n            container.style.width = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.formatUnit)(width);\n        }\n        else if (typeof width === 'string') {\n            container.style.width = (width.match(/px|%|em/)) ? (width) : ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.formatUnit)(width));\n        }\n        calculateWidth(container.firstChild, container);\n    }\n    Input.setWidth = setWidth;\n    /**\n     * Set the placeholder attribute to the input element.\n     * ```\n     * E.g : Input.setPlaceholder('Search here', element);\n     * ```\n     *\n     * @param {string} placeholder - Placeholder value which is need to add.\n     * @param {HTMLInputElement | HTMLTextAreaElement} element - The element on which the placeholder is need to add.\n     */\n    function setPlaceholder(placeholder, element) {\n        placeholder = encodePlaceHolder(placeholder);\n        var parentElement = getParentNode(element);\n        if (parentElement.classList.contains(CLASSNAMES.FLOATINPUT)) {\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(placeholder) && placeholder !== '') {\n                var floatTextContent = parentElement.getElementsByClassName('e-float-text-content')[0];\n                if (floatTextContent && floatTextContent.children[0]) {\n                    floatTextContent.children[0].textContent = placeholder;\n                }\n                else {\n                    parentElement.getElementsByClassName(CLASSNAMES.FLOATTEXT)[0].textContent = placeholder;\n                }\n                parentElement.classList.remove(CLASSNAMES.NOFLOATLABEL);\n                element.removeAttribute('placeholder');\n            }\n            else {\n                parentElement.classList.add(CLASSNAMES.NOFLOATLABEL);\n                var floatTextContent = parentElement.getElementsByClassName('e-float-text-content')[0];\n                if (floatTextContent) {\n                    floatTextContent.children[0].textContent = '';\n                }\n                else {\n                    parentElement.getElementsByClassName(CLASSNAMES.FLOATTEXT)[0].textContent = '';\n                }\n            }\n        }\n        else {\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(placeholder) && placeholder !== '') {\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.attributes)(element, { 'placeholder': placeholder });\n            }\n            else {\n                element.removeAttribute('placeholder');\n            }\n        }\n    }\n    Input.setPlaceholder = setPlaceholder;\n    /**\n     * Set the read only attribute to the input element\n     * ```\n     * E.g : Input.setReadonly(true, element);\n     * ```\n     *\n     * @param {boolean} isReadonly\n     * - Boolean value to specify whether to set read only. Setting \"True\" value enables read only.\n     * @param {HTMLInputElement | HTMLTextAreaElement} element\n     * - The element which is need to enable read only.\n     */\n    function setReadonly(isReadonly, element, floatLabelType) {\n        if (isReadonly) {\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.attributes)(element, { readonly: '' });\n        }\n        else {\n            element.removeAttribute('readonly');\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(floatLabelType)) {\n            validateLabel(element, floatLabelType);\n        }\n    }\n    Input.setReadonly = setReadonly;\n    /**\n     * Displays the element direction from right to left when its enabled.\n     * ```\n     * E.g : Input.setEnableRtl(true, [inputObj.container]);\n     * ```\n     *\n     * @param {boolean} isRtl\n     * - Boolean value to specify whether to set RTL. Setting \"True\" value enables the RTL mode.\n     * @param {Element[] | NodeList} elements\n     * - The elements that are needed to enable/disable RTL.\n     */\n    function setEnableRtl(isRtl, elements) {\n        if (isRtl) {\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)(elements, CLASSNAMES.RTL);\n        }\n        else {\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)(elements, CLASSNAMES.RTL);\n        }\n    }\n    Input.setEnableRtl = setEnableRtl;\n    /**\n     * Enables or disables the given input element.\n     * ```\n     * E.g : Input.setEnabled(false, element);\n     * ```\n     *\n     * @param {boolean} isEnable\n     * - Boolean value to specify whether to enable or disable.\n     * @param {HTMLInputElement | HTMLTextAreaElement} element\n     * - Element to be enabled or disabled.\n     */\n    function setEnabled(isEnable, element, floatLabelType, inputContainer) {\n        var disabledAttrs = { 'disabled': '', 'aria-disabled': 'true' };\n        var considerWrapper = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(inputContainer) ? false : true;\n        if (isEnable) {\n            element.classList.remove(CLASSNAMES.DISABLE);\n            removeAttributes(disabledAttrs, element);\n            if (considerWrapper) {\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([inputContainer], CLASSNAMES.DISABLE);\n            }\n        }\n        else {\n            element.classList.add(CLASSNAMES.DISABLE);\n            addAttributes(disabledAttrs, element);\n            if (considerWrapper) {\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([inputContainer], CLASSNAMES.DISABLE);\n            }\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(floatLabelType)) {\n            validateLabel(element, floatLabelType);\n        }\n    }\n    Input.setEnabled = setEnabled;\n    function setClearButton(isClear, element, inputObject, initial, internalCreateElement) {\n        var makeElement = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(internalCreateElement) ? internalCreateElement : _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement;\n        if (isClear) {\n            inputObject.clearButton = createClearButton(element, inputObject, initial, makeElement);\n        }\n        else {\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.remove)(inputObject.clearButton);\n            inputObject.clearButton = null;\n        }\n    }\n    Input.setClearButton = setClearButton;\n    /**\n     * Removing the multiple attributes from the given element such as \"disabled\",\"id\" , etc.\n     * ```\n     * E.g : Input.removeAttributes({ 'disabled': 'disabled', 'aria-disabled': 'true' }, element);\n     * ```\n     *\n     * @param {string} attrs\n     * - Array of attributes which are need to removed from the element.\n     * @param {HTMLInputElement | HTMLElement} element\n     * - Element on which the attributes are needed to be removed.\n     */\n    function removeAttributes(attrs, element) {\n        for (var _i = 0, _a = Object.keys(attrs); _i < _a.length; _i++) {\n            var key = _a[_i];\n            var parentElement = getParentNode(element);\n            if (key === 'disabled') {\n                element.classList.remove(CLASSNAMES.DISABLE);\n            }\n            if (key === 'disabled' && parentElement.classList.contains(CLASSNAMES.INPUTGROUP)) {\n                parentElement.classList.remove(CLASSNAMES.DISABLE);\n            }\n            if (key === 'placeholder' && parentElement.classList.contains(CLASSNAMES.FLOATINPUT)) {\n                parentElement.getElementsByClassName(CLASSNAMES.FLOATTEXT)[0].textContent = '';\n            }\n            else {\n                element.removeAttribute(key);\n            }\n        }\n    }\n    Input.removeAttributes = removeAttributes;\n    /**\n     * Adding the multiple attributes to the given element such as \"disabled\",\"id\" , etc.\n     * ```\n     * E.g : Input.addAttributes({ 'id': 'inputpopup' }, element);\n     * ```\n     *\n     * @param {string} attrs\n     * - Array of attributes which is added to element.\n     * @param {HTMLInputElement | HTMLElement} element\n     * - Element on which the attributes are needed to be added.\n     */\n    function addAttributes(attrs, element) {\n        for (var _i = 0, _a = Object.keys(attrs); _i < _a.length; _i++) {\n            var key = _a[_i];\n            var parentElement = getParentNode(element);\n            if (key === 'disabled') {\n                element.classList.add(CLASSNAMES.DISABLE);\n            }\n            if (key === 'disabled' && parentElement.classList.contains(CLASSNAMES.INPUTGROUP)) {\n                parentElement.classList.add(CLASSNAMES.DISABLE);\n            }\n            if (key === 'placeholder' && parentElement.classList.contains(CLASSNAMES.FLOATINPUT)) {\n                parentElement.getElementsByClassName(CLASSNAMES.FLOATTEXT)[0].textContent = attrs[\"\" + key];\n            }\n            else {\n                element.setAttribute(key, attrs[\"\" + key]);\n            }\n        }\n    }\n    Input.addAttributes = addAttributes;\n    function removeFloating(input) {\n        var container = input.container;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(container) && container.classList.contains(CLASSNAMES.FLOATINPUT)) {\n            var inputEle = container.querySelector('textarea') ? container.querySelector('textarea') :\n                container.querySelector('input');\n            var placeholder = container.querySelector('.' + CLASSNAMES.FLOATTEXT).textContent;\n            var clearButton = container.querySelector('.e-clear-icon') !== null;\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)(container.querySelector('.' + CLASSNAMES.FLOATLINE));\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)(container.querySelector('.' + CLASSNAMES.FLOATTEXT));\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.classList)(container, [CLASSNAMES.INPUTGROUP], [CLASSNAMES.FLOATINPUT]);\n            unwireFloatingEvents(inputEle);\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.attributes)(inputEle, { 'placeholder': placeholder });\n            inputEle.classList.add(CLASSNAMES.INPUT);\n            if (!clearButton && inputEle.tagName === 'INPUT') {\n                inputEle.removeAttribute('required');\n            }\n        }\n    }\n    Input.removeFloating = removeFloating;\n    function addFloating(input, type, placeholder, internalCreateElement) {\n        var makeElement = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(internalCreateElement) ? internalCreateElement : _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement;\n        var container = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(input, '.' + CLASSNAMES.INPUTGROUP);\n        floatType = type;\n        var customTag = container.tagName;\n        customTag = customTag !== 'DIV' && customTag !== 'SPAN' ? customTag : null;\n        var args = { element: input, floatLabelType: type,\n            customTag: customTag, properties: { placeholder: placeholder } };\n        if (type !== 'Never') {\n            var iconEle = container.querySelector('.e-clear-icon');\n            var inputObj = { container: container };\n            input.classList.remove(CLASSNAMES.INPUT);\n            createFloatingInput(args, inputObj, makeElement);\n            createSpanElement(inputObj.container, makeElement);\n            calculateWidth(args.element, inputObj.container);\n            var isPrependIcon = container.classList.contains('e-float-icon-left');\n            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(iconEle)) {\n                if (isPrependIcon) {\n                    var inputWrap = container.querySelector('.e-input-in-wrap');\n                    iconEle = inputWrap.querySelector('.e-input-group-icon');\n                }\n                else {\n                    iconEle = container.querySelector('.e-input-group-icon');\n                }\n            }\n            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(iconEle)) {\n                if (isPrependIcon) {\n                    iconEle = container.querySelector('.e-input-group-icon');\n                }\n            }\n            else {\n                var floatLine = container.querySelector('.' + CLASSNAMES.FLOATLINE);\n                var floatText = container.querySelector('.' + CLASSNAMES.FLOATTEXT);\n                var wrapper = isPrependIcon ? container.querySelector('.e-input-in-wrap') : container;\n                wrapper.insertBefore(input, iconEle);\n                wrapper.insertBefore(floatLine, iconEle);\n                wrapper.insertBefore(floatText, iconEle);\n            }\n        }\n        else {\n            unWireFloatLabelEvents(args);\n        }\n        checkFloatLabelType(type, input.parentElement);\n    }\n    Input.addFloating = addFloating;\n    /**\n     * Create the span inside the label and add the label text into the span textcontent\n     * ```\n     * E.g : Input.createSpanElement(inputObject, makeElement);\n     * ```\n     *\n     * @param {Element} inputObject\n     * - Element which is need to get the label\n     * @param {createElementParams} makeElement\n     * - Element which is need to create the span\n     */\n    function createSpanElement(inputObject, makeElement) {\n        if (inputObject.classList.contains('e-outline') && inputObject.getElementsByClassName('e-float-text')[0]) {\n            var labelSpanElement = makeElement('span', { className: CLASSNAMES.FLOATTEXTCONTENT });\n            labelSpanElement.innerHTML = inputObject.getElementsByClassName('e-float-text')[0].innerHTML;\n            inputObject.getElementsByClassName('e-float-text')[0].innerHTML = '';\n            inputObject.getElementsByClassName('e-float-text')[0].appendChild(labelSpanElement);\n        }\n    }\n    Input.createSpanElement = createSpanElement;\n    /**\n     * Enable or Disable the ripple effect on the icons inside the Input. Ripple effect is only applicable for material theme.\n     * ```\n     * E.g : Input.setRipple(true, [inputObjects]);\n     * ```\n     *\n     * @param {boolean} isRipple\n     * - Boolean value to specify whether to enable the ripple effect.\n     * @param {InputObject[]} inputObj\n     * - Specify the collection of input objects.\n     */\n    function setRipple(isRipple, inputObj) {\n        for (var i = 0; i < inputObj.length; i++) {\n            _internalRipple(isRipple, inputObj[parseInt(i.toString(), 10)].container);\n        }\n    }\n    Input.setRipple = setRipple;\n    function _internalRipple(isRipple, container, button) {\n        var argsButton = [];\n        argsButton.push(button);\n        var buttons = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(button) ?\n            container.querySelectorAll('.e-input-group-icon') : argsButton;\n        if (isRipple && buttons.length > 0) {\n            for (var index = 0; index < buttons.length; index++) {\n                buttons[parseInt(index.toString(), 10)].addEventListener('mousedown', _onMouseDownRipple, false);\n                buttons[parseInt(index.toString(), 10)].addEventListener('mouseup', _onMouseUpRipple, false);\n            }\n        }\n        else if (buttons.length > 0) {\n            for (var index = 0; index < buttons.length; index++) {\n                buttons[parseInt(index.toString(), 10)].removeEventListener('mousedown', _onMouseDownRipple, this);\n                buttons[parseInt(index.toString(), 10)].removeEventListener('mouseup', _onMouseUpRipple, this);\n            }\n        }\n    }\n    function _onMouseRipple(container, button) {\n        if (!container.classList.contains('e-disabled') && !container.querySelector('input').readOnly) {\n            button.classList.add('e-input-btn-ripple');\n        }\n    }\n    function _isElementVisible(element) {\n        if (!element) {\n            return false;\n        }\n        // Check if the element or any of its parents are hidden using display: none\n        var currentElement = element;\n        while (currentElement && currentElement !== document.body) {\n            var style = window.getComputedStyle(currentElement);\n            if (style.display === 'none') {\n                return false;\n            }\n            currentElement = currentElement.parentElement;\n        }\n        // If none of the elements have display: none, the element is considered visible\n        return true;\n    }\n    function _onMouseDownRipple() {\n        var ele =  false || this;\n        var parentEle = this.parentElement;\n        while (!parentEle.classList.contains('e-input-group')) {\n            parentEle = parentEle.parentElement;\n        }\n        _onMouseRipple(parentEle, ele);\n    }\n    function _onMouseUpRipple() {\n        var ele =  false || this;\n        setTimeout(function () {\n            ele.classList.remove('e-input-btn-ripple');\n        }, 500);\n    }\n    function createIconEle(iconClass, makeElement) {\n        var button = makeElement('span', { className: iconClass });\n        button.classList.add('e-input-group-icon');\n        return button;\n    }\n    /**\n     * Creates a new span element with the given icons added and append it in container element.\n     * ```\n     * E.g : Input.addIcon('append', 'e-icon-spin', inputObj.container, inputElement);\n     * ```\n     *\n     * @param {string} position - Specify the icon placement on the input.Possible values are append and prepend.\n     * @param {string | string[]} icons - Icon classes which are need to add to the span element which is going to created.\n     * Span element acts as icon or button element for input.\n     * @param {HTMLElement} container - The container on which created span element is going to append.\n     * @param {HTMLElement} input - The inputElement on which created span element is going to prepend.\n     */\n    function addIcon(position, icons, container, input, internalCreate) {\n        var result = typeof (icons) === 'string' ? icons.split(',')\n            : icons;\n        if (position.toLowerCase() === 'append') {\n            for (var _i = 0, result_1 = result; _i < result_1.length; _i++) {\n                var icon = result_1[_i];\n                appendSpan(icon, container, internalCreate);\n            }\n        }\n        else {\n            for (var _a = 0, result_2 = result; _a < result_2.length; _a++) {\n                var icon = result_2[_a];\n                prependSpan(icon, container, input, internalCreate);\n            }\n        }\n        if (container.getElementsByClassName('e-input-group-icon')[0] && container.getElementsByClassName('e-float-text-overflow')[0]) {\n            container.getElementsByClassName('e-float-text-overflow')[0].classList.add('e-icon');\n        }\n    }\n    Input.addIcon = addIcon;\n    /**\n     * Creates a new span element with the given icons added and prepend it in input element.\n     * ```\n     * E.g : Input.prependSpan('e-icon-spin', inputObj.container, inputElement);\n     * ```\n     *\n     * @param {string} iconClass - Icon classes which are need to add to the span element which is going to created.\n     * Span element acts as icon or button element for input.\n     * @param {HTMLElement} container - The container on which created span element is going to append.\n     * @param {HTMLElement} inputElement - The inputElement on which created span element is going to prepend.\n     */\n    function prependSpan(iconClass, container, inputElement, internalCreateElement) {\n        var makeElement = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(internalCreateElement) ? internalCreateElement : _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement;\n        var button = createIconEle(iconClass, makeElement);\n        container.classList.add('e-float-icon-left');\n        var innerWrapper = container.querySelector('.e-input-in-wrap');\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(innerWrapper)) {\n            innerWrapper = makeElement('span', { className: 'e-input-in-wrap' });\n            inputElement.parentNode.insertBefore(innerWrapper, inputElement);\n            var result = container.querySelectorAll(inputElement.tagName + ' ~ *');\n            innerWrapper.appendChild(inputElement);\n            for (var i = 0; i < result.length; i++) {\n                var element = result[parseInt(i.toString(), 10)];\n                var parentElement = innerWrapper.parentElement;\n                if (!(element.classList.contains('e-float-line')) || (!(parentElement && parentElement.classList.contains('e-filled')) && parentElement)) {\n                    innerWrapper.appendChild(element);\n                }\n            }\n        }\n        innerWrapper.parentNode.insertBefore(button, innerWrapper);\n        _internalRipple(true, container, button);\n        return button;\n    }\n    Input.prependSpan = prependSpan;\n    /**\n     * Creates a new span element with the given icons added and append it in container element.\n     * ```\n     * E.g : Input.appendSpan('e-icon-spin', inputObj.container);\n     * ```\n     *\n     * @param {string} iconClass - Icon classes which are need to add to the span element which is going to created.\n     * Span element acts as icon or button element for input.\n     * @param {HTMLElement} container - The container on which created span element is going to append.\n     */\n    function appendSpan(iconClass, container, internalCreateElement) {\n        var makeElement = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(internalCreateElement) ? internalCreateElement : _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement;\n        var button = createIconEle(iconClass, makeElement);\n        var wrap = (container.classList.contains('e-float-icon-left')) ? container.querySelector('.e-input-in-wrap') :\n            container;\n        wrap.appendChild(button);\n        _internalRipple(true, container, button);\n        return button;\n    }\n    Input.appendSpan = appendSpan;\n    function validateInputType(containerElement, input) {\n        if (input.type === 'hidden') {\n            containerElement.classList.add('e-hidden');\n        }\n        else if (containerElement.classList.contains('e-hidden')) {\n            containerElement.classList.remove('e-hidden');\n        }\n    }\n    Input.validateInputType = validateInputType;\n    function updateHTMLAttributesToElement(htmlAttributes, element) {\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(htmlAttributes)) {\n            for (var _i = 0, _a = Object.keys(htmlAttributes); _i < _a.length; _i++) {\n                var key = _a[_i];\n                if (containerAttributes.indexOf(key) < 0) {\n                    element.setAttribute(key, htmlAttributes[\"\" + key]);\n                }\n            }\n        }\n    }\n    Input.updateHTMLAttributesToElement = updateHTMLAttributesToElement;\n    function updateCssClass(newClass, oldClass, container) {\n        setCssClass(getInputValidClassList(newClass), [container], getInputValidClassList(oldClass));\n    }\n    Input.updateCssClass = updateCssClass;\n    function getInputValidClassList(inputClassName) {\n        var result = inputClassName;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(inputClassName) && inputClassName !== '') {\n            result = (inputClassName.replace(/\\s+/g, ' ')).trim();\n        }\n        return result;\n    }\n    Input.getInputValidClassList = getInputValidClassList;\n    function updateHTMLAttributesToWrapper(htmlAttributes, container) {\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(htmlAttributes)) {\n            for (var _i = 0, _a = Object.keys(htmlAttributes); _i < _a.length; _i++) {\n                var key = _a[_i];\n                if (containerAttributes.indexOf(key) > -1) {\n                    if (key === 'class') {\n                        var updatedClassValues = this.getInputValidClassList(htmlAttributes[\"\" + key]);\n                        if (updatedClassValues !== '') {\n                            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([container], updatedClassValues.split(' '));\n                        }\n                    }\n                    else if (key === 'style') {\n                        var setStyle = container.getAttribute(key);\n                        setStyle = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(setStyle) ? (setStyle + htmlAttributes[\"\" + key]) :\n                            htmlAttributes[\"\" + key];\n                        container.setAttribute(key, setStyle);\n                    }\n                    else {\n                        container.setAttribute(key, htmlAttributes[\"\" + key]);\n                    }\n                }\n            }\n        }\n    }\n    Input.updateHTMLAttributesToWrapper = updateHTMLAttributesToWrapper;\n    function isBlank(inputString) {\n        return (!inputString || /^\\s*$/.test(inputString));\n    }\n    Input.isBlank = isBlank;\n})(Input || (Input = {}));\n/* eslint-enable valid-jsdoc, jsdoc/require-jsdoc, jsdoc/require-returns, jsdoc/require-param */\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-inputs/src/input/input.js?");

/***/ })

}]);