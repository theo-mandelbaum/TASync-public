"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkej2_vue_samples"] = self["webpackChunkej2_vue_samples"] || []).push([["chunk-vendors-node_modules_syncfusion_ej2-pdf_src_pdf_core_list_pdf-list_js-c71d58bb"],{

/***/ "./node_modules/@syncfusion/ej2-pdf/src/pdf/core/list/pdf-list.js":
/*!************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-pdf/src/pdf/core/list/pdf-list.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PdfList: () => (/* binding */ PdfList),\n/* harmony export */   PdfOrderedList: () => (/* binding */ PdfOrderedList),\n/* harmony export */   PdfUnorderedList: () => (/* binding */ PdfUnorderedList),\n/* harmony export */   _PdfListInfo: () => (/* binding */ _PdfListInfo),\n/* harmony export */   _PdfListLayouter: () => (/* binding */ _PdfListLayouter)\n/* harmony export */ });\n/* harmony import */ var _enumerator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../enumerator */ \"./node_modules/@syncfusion/ej2-pdf/src/pdf/core/enumerator.js\");\n/* harmony import */ var _fonts__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../fonts */ \"./node_modules/@syncfusion/ej2-pdf/src/pdf/core/fonts/index.js\");\n/* harmony import */ var _graphics_pdf_graphics__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../graphics/pdf-graphics */ \"./node_modules/@syncfusion/ej2-pdf/src/pdf/core/graphics/pdf-graphics.js\");\n/* harmony import */ var _graphics_pdf_template__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../graphics/pdf-template */ \"./node_modules/@syncfusion/ej2-pdf/src/pdf/core/graphics/pdf-template.js\");\n/* harmony import */ var _graphics__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../graphics */ \"./node_modules/@syncfusion/ej2-pdf/src/pdf/core/graphics/index.js\");\n/* harmony import */ var _pdf_page__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../pdf-page */ \"./node_modules/@syncfusion/ej2-pdf/src/pdf/core/pdf-page.js\");\n/* harmony import */ var _pdf_list_item__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./pdf-list-item */ \"./node_modules/@syncfusion/ej2-pdf/src/pdf/core/list/pdf-list-item.js\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./../utils */ \"./node_modules/@syncfusion/ej2-pdf/src/pdf/core/utils.js\");\nvar __extends = (undefined && undefined.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n\n\n\n\n\n\n\n\n/**\n * Represents base class for lists.\n * ```typescript\n * // Load an existing PDF document\n * let document: PdfDocument = new PdfDocument(data);\n * // Access the first page\n * let page: PdfPage = document.getPage(0);\n * // Assign the array of string items\n * let products: string[] = ['Excel', 'Power', 'Point', 'Word', 'PDF'];\n * // Initialize a new brush\n * let brush: PdfBrush =  new PdfBrush([0, 255, 255])\n * // Add an item to item collection by passing the string array\n * let items: PdfListItemCollection = new PdfListItemCollection(products);\n * // Create a new instance of ordered list\n * let list: PdfList = new PdfOrderedList(items);\n * // Draw the ordered list with specified items\n * list.draw(page, 0, 20, 500, 700);\n * // Get the brush associated with the ordered list\n * let listBrush: PdfBrush = list.brush;\n * // Save the document\n * document.save('output.pdf');\n * // Destroy the document\n * document.destroy();\n * ```\n */\nvar PdfList = /** @class */ (function () {\n    function PdfList() {\n        this._textIndent = 5;\n        this._indent = 10;\n        this._alignment = _enumerator__WEBPACK_IMPORTED_MODULE_0__.PdfListMarkerAlignment.left;\n        this._delimiter = '.';\n        this._suffix = '.';\n        this._enableHierarchy = false;\n        this._currentIndex = 0;\n        this._size = [0, 0];\n        this._defaultFont = new _fonts__WEBPACK_IMPORTED_MODULE_1__.PdfStandardFont(_fonts__WEBPACK_IMPORTED_MODULE_1__.PdfFontFamily.helvetica, 8);\n    }\n    Object.defineProperty(PdfList.prototype, \"brush\", {\n        /**\n         * Gets the `PdfBrush` object associated with the list.\n         *\n         * @returns {PdfBrush} The `PdfBrush` object to specify fill text rendering mode.\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data);\n         * // Access the first page\n         * let page: PdfPage = document.getPage(0);\n         * // Assign the array of string items\n         * let products: string[] = ['Excel', 'Power', 'Point', 'Word', 'PDF'];\n         * // Initialize a new brush\n         * let brush: PdfBrush =  new PdfBrush([0, 255, 255]);\n         * // Add an item to item collection by passing the string array\n         * let items: PdfListItemCollection = new PdfListItemCollection(products);\n         * // Create a new instance of ordered list\n         * let list: PdfOrderedList = new PdfOrderedList(items);\n         * // Draw the ordered list with specified items\n         * list.draw(page, 0, 20, 500, 700);\n         * // Get the brush associated with the ordered list\n         * let listBrush: PdfBrush = list.brush;\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        get: function () {\n            return this._brush;\n        },\n        /**\n         * Sets the `PdfBrush` object associated with the list.\n         *\n         * @param {PdfBrush} value The `PdfBrush` object to specify fill text rendering mode.\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data);\n         * // Access the first page\n         * let page: PdfPage = document.getPage(0);\n         * // Assign the array of string items\n         * let products: string[] = ['Excel', 'Power', 'Point', 'Word', 'PDF'];\n         * // Add an item to item collection by passing the string array\n         * let items: PdfListItemCollection = new PdfListItemCollection(products);\n         * // Create a new Ordered list and set the brush\n         * let list: PdfOrderedList = new PdfOrderedList(items, {brush: new PdfBrush([255, 0, 0])});\n         * // Set fill color to the list\n         * list.brush = brush;\n         * // Draw the ordered list with specified items\n         * list.draw(page, 0, 20, 500, 700);\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        set: function (value) {\n            this._brush = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfList.prototype, \"pen\", {\n        /**\n         * Gets the `PdfPen` object associated with the list.\n         *\n         * @returns {PdfPen} The `PdfPen` object to specify stroke properties for text rendering.\n         * ```typescript\n         * // Load an existing document\n         * let document: PdfDocument = new PdfDocument(data);\n         * // Access the first page\n         * let page: PdfPage = document.getPage(0);\n         * // Assign the array of string items\n         * let products: string[] = ['Excel', 'Power', 'Point', 'Word', 'PDF'];\n         * // Create an instance of item collection and add the list item\n         * let items: PdfListItemCollection = new PdfListItemCollection(products);\n         * // create a new ordered list and draw the list\n         * let list: PdfOrderedList = new PdfOrderedList(items, {pen: new PdfPen([0, 255, 255], 1)});\n         * list.draw(page, 0, 20, 500, 700);\n         * // Retrieve the pen associated with the ordered list\n         * let itemPen: PdfPen = list.pen;\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        get: function () {\n            return this._pen;\n        },\n        /**\n         * Sets the `PdfPen` object associated with the list.\n         *\n         * @param {PdfPen} value The `PdfPen` object to specify fill text rendering mode.\n         * // Load an existing document\n         * let document: PdfDocument = new PdfDocument(data);\n         * // Access the first page\n         * let page: PdfPage = document.getPage(0);\n         * // Assign the array of string items\n         * let products: string[] = ['Excel', 'Power', 'Point', 'Word', 'PDF'];\n         * // Create an instance of item collection and add the list item\n         * let items: PdfListItemCollection = new PdfListItemCollection(products);\n         * // Create a new pen\n         * let pen: PdfPen =  new PdfPen([0, 255, 255], 1);\n         * // Create a new ordered list\n         * let list: PdfOrderedList = new PdfOrderedList(items);\n         * // Set the pen for the ordered list\n         * list.pen = pen;\n         * // Draw the list associated with items\n         * list.draw(page, 0, 20, 500, 700);\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        set: function (value) {\n            this._pen = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfList.prototype, \"font\", {\n        /**\n         * Gets the font of the list item.\n         *\n         * @returns {PdfFont} The font used for the list items.\n         * ```typescript\n         * // Load the existing document\n         * let document: PdfDocument = new PdfDocument(data);\n         * // Access the first page\n         * let page: PdfPage = document.getPage(0);\n         * // Assign the array of string items\n         * let products: string[] = ['Excel', 'Power', 'Point', 'Word', 'PDF'];\n         * // Add an item to list item collection by passing the string array\n         * let items: PdfListItemCollection = new PdfListItemCollection(products);\n         * // Create a new ordered list\n         * let list: PdfOrderedList = new PdfOrderedList(items);\n         * // Draw the items on the page\n         * list.draw(page, 0, 20, 500, 700);\n         * /// Retrieve the font used for the list items\n         * let itemPen: PdfFont = list.font;\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ````\n         */\n        get: function () {\n            return this._font;\n        },\n        /**\n         * Sets the `PdfFont` object associated with the list.\n         *\n         * @param {PdfFont} value The `PdfPen` object to to set for the list items.\n         * ```typescript\n         * // Load an existing document\n         * let document: PdfDocument = new PdfDocument(data);\n         * // Access the first page\n         * let page: PdfPage = document.getPage(0);\n         * // Assign the array of string items\n         * let products: string[] = ['Excel', 'Power', 'Point', 'Word', 'PDF'];\n         * // Create an instance of item collection and add the list item\n         * let items: PdfListItemCollection = new PdfListItemCollection(products);\n         * // Create a new font for list\n         * let font: PdfStandardFont = new PdfStandardFont(PdfFontFamily.timesRoman, 12);\n         * // Create a new ordered list with items and font\n         * let list: PdfOrderedList = new PdfOrderedList(items);\n         * list.font = font;\n         * // Draw the items on the page\n         * list.draw(page, 0, 20, 500, 700);\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        set: function (value) {\n            this._font = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfList.prototype, \"stringFormat\", {\n        /**\n         * Gets the text layout format associated with the list item.\n         *\n         * @returns {PdfStringFormat} The `PdfStringFormat` object that specifies the text layout information.\n         * ```typescript\n         * // Load the existing document\n         * let document: PdfDocument = new PdfDocument(data);\n         * // Access the first page\n         * let page: PdfPage = document.getPage(0);\n         * // Assign the array of string items\n         * let products: string[] = ['Excel', 'Power', 'Point', 'Word', 'PDF'];\n         * // Add an items to  listitem collection by passing the string array\n         * let items: PdfListItemCollection = new PdfListItemCollection(products);\n         * // Create a new ordered list with items\n         * let list: PdfOrderedList = new PdfOrderedList(items);\n         * // Draw the items on the page\n         * list.draw(page, 0, 20, 500, 700);\n         * // Getting the text layout format used by the list items\n         * let itemFormat: PdfStringFormat = list.stringFormat;\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ````\n         */\n        get: function () {\n            return this._stringFormat;\n        },\n        /**\n         * Sets the text layout format of the list item.\n         *\n         * @param {PdfStringFormat} value The `PdfStringFormat` object that specifies the text layout information.\n         * ```typescript\n         * // Load an existing document\n         * let document: PdfDocument = new PdfDocument(data);\n         * // Access the first page\n         * let page: PdfPage = document.getPage(0);\n         * // Assign the array of string items\n         * let products: string[] = ['Excel', 'Power', 'Point', 'Word', 'PDF'];\n         * // Create an instance of item collection and add the list item\n         * let items: PdfListItemCollection = new PdfListItemCollection(products);\n         * // Create a new  format with alignment settings for list\n         * let itemFormat: PdfStringFormat =  new PdfStringFormat(PdfTextAlignment.right, PdfVerticalAlignment.bottom);\n         * // Add an item to list item collection by passing the string array\n         * let items: PdfListItemCollection = new PdfListItemCollection(items);\n         * // Create a ordered list with the item collection\n         * let list: PdfOrderedList = new PdfOrderedList();\n         * // Set the text layout format for the list\n         * list.stringFormat = itemFormat;\n         * // Draw the items on the page with the updated format\n         * list.draw(page, 0, 20, 500, 700);\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ````\n         */\n        set: function (value) {\n            this._stringFormat = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfList.prototype, \"indent\", {\n        /**\n         * Gets the indent of the list.\n         *\n         * @returns {number} The indent value of the list.\n         * ```typescript\n         * // Load an existing document\n         * let document: PdfDocument = new PdfDocument(data);\n         * // Access the first page\n         * let page: PdfPage = document.getPage(0);\n         * // Assign the array of string items\n         * let products: string[] = ['Excel', 'Power', 'Point', 'Word', 'PDF'];\n         * // Add an item to list item collection by passing the string array\n         * let items: PdfListItemCollection = new PdfListItemCollection(products);\n         * // Create a of ordered list\n         * let list: PdfOrderedList = new PdfOrderedList(items);\n         * // Draw the list on the page associated with items\n         * list.draw(page, 0, 20, 500, 700);\n         * // Get the current indent value used by the list\n         * let itemIndent: number = list.indent;\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ````\n         */\n        get: function () {\n            return this._indent;\n        },\n        /**\n         * Sets the indent of the list.\n         *\n         * @param {number} value The indent value to set for the list.\n         * ```typescript\n         * //Load an existing document\n         * let document: PdfDocument = new PdfDocument(data);\n         * // Access the first page\n         * let page: PdfPage = document.getPage(0);\n         * // Assign the array of string items\n         * let products: string[] = ['Excel', 'Power', 'Point', 'Word', 'PDF'];\n         * // Add an items to list item collection by passing the string array\n         * let items: PdfListItemCollection = new PdfListItemCollection(products);\n         * // Create a of ordered list\n         * let list: PdfOrderedList = new PdfOrderedList(items);\n         * // Set the indent value for the list\n         * list.indent = 40;\n         * // Draw the items on the page with the specified indent\n         * list.draw(page, 0, 20, 500, 700);\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ````\n         */\n        set: function (value) {\n            this._indent = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfList.prototype, \"textIndent\", {\n        /**\n         * Gets the text indent of the list.\n         *\n         * @returns {number} The text indent of the list.\n         * ```typescript\n         * // Load the existing document\n         * let document: PdfDocument = new PdfDocument(data);\n         * // Access the first page\n         * let page: PdfPage = document.getPage(0);\n         * // Assign the array of string items\n         * let products: string[] = ['Excel', 'Power', 'Point', 'Word', 'PDF'];\n         * // Add an items to list item collection by passing the string array\n         * let items: PdfListItemCollection = new PdfListItemCollection(products);\n         * // Create an new ordered list\n         * let list: PdfOrderedList = new PdfOrderedList(items);\n         * // Draw the list on the page associated with items\n         * list.draw(page, 0, 20, 500, 700);\n         * // Get the current text indent value of the list\n         * let textIndent: number = list.textIndent;\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ````\n         */\n        get: function () {\n            return this._textIndent;\n        },\n        /**\n         * Sets the text indent of the list.\n         *\n         * @param {number} value The text indent value to set for the list.\n         * ```typescript\n         * // Load an existing document\n         * let document: PdfDocument = new PdfDocument(data);\n         * // Access the first page\n         * let page: PdfPage = document.getPage(0);\n         * // Assign the array of string items\n         * let products: string[] = ['Excel', 'Power', 'Point', 'Word', 'PDF'];\n         * // Add an item to list item collection by passing the string array\n         * let items: PdfListItemCollection = new PdfListItemCollection(products);\n         * // Create a new ordered list\n         * let list: PdfOrderedList = new PdfOrderedList(items);\n         * // Set the text indent value for the list\n         * list.textIndent = 40;\n         * // Draw the items on the page with the updated text indent\n         * list.draw(page, 0, 20, 500, 700);\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ````\n         */\n        set: function (value) {\n            this._textIndent = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfList.prototype, \"delimiter\", {\n        /**\n         * Gets the delimiter string used to separate items in the list.\n         *\n         * @returns {string} The delimiter string used in the list.\n         * ```typescript\n         * // Load an existing document\n         * let document: PdfDocument = new PdfDocument(data);\n         * // Access the first page\n         * let page: PdfPage = document.getPage(0);\n         * // Assign the array of string items\n         * let products: string[] = ['Excel', 'Power', 'Point', 'Word', 'PDF'];\n         * // Create an instance of PdfListItemCollection by passing the string array\n         * let items: PdfListItemCollection = new PdfListItemCollection(products);\n         * // Create a new ordered list\n         * let list: PdfOrderedList = new PdfOrderedList(items);\n         * // Draw the list on the page associated with items\n         * list.draw(page, 0, 20, 500, 700);\n         * // Get the delimiter used in the list\n         * let delimiter: string = list.delimiter;\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ````\n         */\n        get: function () {\n            return this._delimiter;\n        },\n        /**\n         * Sets the delimiter string used to separate items in the list.\n         *\n         * @param {string} value The delimiter string to be set.\n         * ```typescript\n         * // Load an existing document\n         * let document: PdfDocument = new PdfDocument(data);\n         * // Access the first page\n         * let page: PdfPage = document.getPage(0);\n         * // Assign the array of string items\n         * let products: string[] = ['Excel', 'Power', 'Point', 'Word', 'PDF'];\n         * // Add an item to list item collection by passing the string array\n         * let items: PdfListItemCollection = new PdfListItemCollection(products);\n         * // Create a new ordered list\n         * let list: PdfOrderedList = new PdfOrderedList(items);\n         * // Set the delimiter for the list\n         * list.delimiter = ')';\n         * // Draw the list on the page associated with items\n         * list.draw(page, 0, 20, 500, 700);\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ````\n         */\n        set: function (value) {\n            this._delimiter = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfList.prototype, \"suffix\", {\n        get: function () {\n            return this._suffix;\n        },\n        set: function (value) {\n            this._suffix = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfList.prototype, \"enableHierarchy\", {\n        /**\n         * Gets a value indicating whether hierarchical structure is enabled for the list.\n         *\n         * @returns {boolean} `true` if hierarchical structure is enabled; otherwise, `false`.\n         * // Load an existing document\n         * let document: PdfDocument = new PdfDocument(data);\n         * // Access the first page\n         * let page: PdfPage = document.getPage(0);\n         * // Assign the array of string items\n         * let products: string[] = ['Excel', 'Power', 'Point', 'Word', 'PDF'];\n         * // Add an item to list item collection by passing the string array\n         * let items: PdfListItemCollection = new PdfListItemCollection(products);\n         * // Create a new ordered list\n         * let list: PdfOrderedList = new PdfOrderedList(items);\n         * // Draw the items associated with the items\n         * list.draw(page, 0, 20, 500, 700);\n         * // Get the hierarchical structure status\n         * let enableHierarchy: boolean = list.enableHierarchy;\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ````\n         */\n        get: function () {\n            return this._enableHierarchy;\n        },\n        /**\n         * Sets a value indicating whether hierarchical structure is enabled for the list.\n         *\n         * @param {boolean} value The boolean flag to enable or disable hierarchical structure.\n         * ```typescript\n         * // Load an existing document\n         * let document: PdfDocument = new PdfDocument(data);\n         * // Access the first page\n         * let page: PdfPage = document.getPage(0);\n         * // Assign the array of string items\n         * let products: string[] = ['Excel', 'Power', 'Point', 'Word', 'PDF'];\n         * // Add an item to list item collection by passing the string array\n         * let items: PdfListItemCollection = new PdfListItemCollection(products);\n         * // Create a new ordered list\n         * let list: PdfOrderedList = new PdfOrderedList(items);\n         * // Set the hierarchical structure status\n         * list.enableHierarchy = true;\n         * / Draw the list on the page associated with items\n         * list.draw(page, 0, 20, 500, 700);\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ````\n         */\n        set: function (value) {\n            this._enableHierarchy = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfList.prototype, \"alignment\", {\n        /**\n         * Gets the text alignment of the list.\n         *\n         * @returns {PdfTextAlignment} The text alignment.\n         * // Load an existing document\n         * let document: PdfDocument = new PdfDocument(data);\n         * // Access the first page\n         * let page: PdfPage = document.getPage(0);\n         * // Assign the array of string items\n         * let products: string[] = ['Excel', 'Power', 'Point', 'Word', 'PDF'];\n         * // Add an item to list item collection by passing the string array\n         * let items: PdfListItemCollection = new PdfListItemCollection(products);\n         * // Create a new ordered list\n         * let list: PdfOrderedList = new PdfOrderedList(items);\n         * // Draw the list on the page associated with items\n         * list.draw(page, 0, 20, 500, 700);\n         * // Get the alignment of the list\n         * let listAlignment: PdfTextAlignment = list.alignment;\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ````\n         */\n        get: function () {\n            return this._alignment;\n        },\n        /**\n         * Sets the text alignment of the list.\n         *\n         * @param {PdfTextAlignment} value The text alignment to set for the list.\n         * ```typescript\n         * // Load an existing document\n         * let document: PdfDocument = new PdfDocument(data);\n         * // Access the first page\n         * let page: PdfPage = document.getPage(0);\n         * // Assign the array of string items\n         * let products: string[] = ['Excel', 'Power', 'Point', 'Word', 'PDF'];\n         * // Add an items to list item collection by passing the string array\n         * let items: PdfListItemCollection = new PdfListItemCollection(products);\n         * // Create a new ordered list\n         * let list: PdfOrderedList = new PdfOrderedList(items);\n         * // Set the alignment for the list\n         * list.alignment = PdfTextAlignment.left;\n         * // Draw the items on the page\n         * list.draw(page, 0, 20, 500, 700);\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ````\n         */\n        set: function (value) {\n            this._alignment = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfList.prototype, \"items\", {\n        /**\n         * Gets the item collection of the list.\n         *\n         * @returns {PdfListItemCollection} The list item collection.\n         * ```typescript\n         * // Load an existing document\n         * let document: PdfDocument = new PdfDocument(data);\n         * // Access the first page\n         * let page: PdfPage = document.getPage(0);\n         * // Assign the array of string items\n         * let products: string[] = ['Excel', 'Power', 'Point', 'Word', 'PDF'];\n         * // Add an items to list item collection by passing the string array\n         * let items: PdfListItemCollection = new PdfListItemCollection(products);\n         * // Create a new ordered list\n         * let list: PdfOrderedList = new PdfOrderedList(items);\n         * // Get the item collection\n         * let collection: PdfListItemCollection = list.items;\n         * // Draw the list on the page associated with item collection\n         * list.draw(page, 0, 20, 500, 700);\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ````\n         */\n        get: function () {\n            return this._itemCollection;\n        },\n        /**\n         * Sets the item collection of the list.\n         *\n         * @param {PdfListItemCollection} value The list item collection.\n         * ```typescript\n         * // Load an existing document\n         * let document: PdfDocument = new PdfDocument(data);\n         * // Access the first page\n         * let page: PdfPage = document.getPage(0);\n         * // Create a new ordered list\n         * let list: PdfOrderedList = new PdfOrderedList();\n         * // Sets the item collection\n         * list.items = new PdfListItemCollection(['Excel', 'Power', 'Point', 'Word', 'PDF']);\n         * // Draw the list on the page associated with item collection\n         * list.draw(page, 0, 20, 500, 700);\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ````\n         */\n        set: function (value) {\n            this._itemCollection = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfList.prototype, \"_markerRightToLeft\", {\n        get: function () {\n            return this._alignment === _enumerator__WEBPACK_IMPORTED_MODULE_0__.PdfListMarkerAlignment.right;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    PdfList.prototype.draw = function (arg1, arg2, arg3, arg4, arg5, arg6) {\n        if (arg1 instanceof _pdf_page__WEBPACK_IMPORTED_MODULE_5__.PdfPage) {\n            if (arg1._isNew) {\n                return this._drawInternal(arg1, arg2, arg3, arg4, arg5, arg6);\n            }\n            else {\n                (new _PdfListLayouter(this)).layout(arg1.graphics, [arg2, arg3, 0, 0]);\n            }\n        }\n        else {\n            (new _PdfListLayouter(this)).layout(arg1, [arg2, arg3, 0, 0]);\n        }\n    };\n    PdfList.prototype._drawInternal = function (arg1, arg2, arg3, arg4, arg5, arg6) {\n        var parameter = new _graphics__WEBPACK_IMPORTED_MODULE_4__._PdfLayoutParameters();\n        parameter._page = arg1;\n        if (arg4 === null || typeof arg4 === 'undefined') {\n            parameter._bounds = [arg2, arg3, 0, 0];\n            parameter._format = new _graphics__WEBPACK_IMPORTED_MODULE_4__.PdfLayoutFormat();\n        }\n        else if (typeof arg4 === 'number') {\n            parameter._bounds = [arg2, arg3, arg4, arg5];\n            if (arg6) {\n                parameter._format = arg6;\n            }\n            else {\n                parameter._format = new _graphics__WEBPACK_IMPORTED_MODULE_4__.PdfLayoutFormat();\n            }\n        }\n        else if (arg4 instanceof _graphics__WEBPACK_IMPORTED_MODULE_4__.PdfLayoutFormat) {\n            parameter._bounds = [arg2, arg3, 0, 0];\n            parameter._format = arg4;\n        }\n        return this._layout(parameter);\n    };\n    PdfList.prototype._layout = function (parameter) {\n        return (new _PdfListLayouter(this)).layoutInternal(parameter);\n    };\n    return PdfList;\n}());\n\n/**\n * Represents an ordered list in a PDF document.\n * ```typescript\n * // Load an existing document\n * let document: PdfDocument = new PdfDocument(data);\n * // Access the first page\n * let page: PdfPage = document.getPage(0);\n * // Define an array of strings representing items to be added\n * let products: string[] = ['Excel', 'Power', 'Point', 'Word', 'PDF'];\n * // Add the items to list item collection by passing the array of products\n * let items: PdfListItemCollection = new PdfListItemCollection(products);\n * // Create an instance of ordered list\n * let list: PdfOrderedList = new PdfOrderedList(items);\n * // Draw the ordered list on the page\n * list.draw(page, 0, 20, layout);\n * // Save the document\n * document.save('output.pdf');\n * // Destroy the document\n * document.destroy();\n * ````\n */\nvar PdfOrderedList = /** @class */ (function (_super) {\n    __extends(PdfOrderedList, _super);\n    function PdfOrderedList(items, settings) {\n        var _this = _super.call(this) || this;\n        _this._startNumber = 1;\n        if (items) {\n            _this._itemCollection = items;\n        }\n        else {\n            _this._itemCollection = new _pdf_list_item__WEBPACK_IMPORTED_MODULE_6__.PdfListItemCollection();\n        }\n        if (settings) {\n            if (settings.font) {\n                _this._font = settings.font;\n            }\n            if (settings.format) {\n                _this._stringFormat = settings.format;\n            }\n            if (settings.pen) {\n                _this._pen = settings.pen;\n            }\n            if (settings.brush) {\n                _this._brush = settings.brush;\n            }\n            if (settings.style) {\n                _this._style = settings.style;\n            }\n            else {\n                _this._style = _enumerator__WEBPACK_IMPORTED_MODULE_0__.PdfNumberStyle.numeric;\n            }\n            if (settings.indent) {\n                _this._indent = settings.indent;\n            }\n            if (settings.textIndent) {\n                _this._textIndent = settings.textIndent;\n            }\n            if (settings.alignment) {\n                _this._alignment = settings.alignment;\n            }\n            if (settings.delimiter) {\n                _this._delimiter = settings.delimiter;\n            }\n            if (settings.suffix) {\n                _this._suffix = settings.suffix;\n            }\n        }\n        else {\n            _this._style = _enumerator__WEBPACK_IMPORTED_MODULE_0__.PdfNumberStyle.numeric;\n        }\n        return _this;\n    }\n    Object.defineProperty(PdfOrderedList.prototype, \"style\", {\n        /**\n         * Gets the numbering style used for the ordered list.\n         *\n         * @returns {PdfNumberStyle} The numbering style used for the ordered list.\n         *  ```typescript\n         * // Load an existing document\n         * let document: PdfDocument = new PdfDocument(data);\n         * // Access the first page\n         * let page: PdfPage = document.getPage(0);\n         * // Assign the array of string items\n         * let products: string[] = ['Excel', 'Power', 'Point', 'Word', 'PDF'];\n         * // Add the items to list item collection by passing the array of products\n         * let items: PdfListItemCollection = new PdfListItemCollection(products);\n         * // Initialize the instance of ordered list and pass the item collection\n         * let list: PdfOrderedList = new PdfOrderedList(items);\n         * // Get the numbering style used for the ordered list\n         * let style: PdfNumberStyle = list.style;\n         * // Draw the ordered list on the page\n         * list.draw(page, 0, 20, 500, 700);\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        get: function () {\n            return this._style;\n        },\n        /**\n         * Sets the numbering style used for the ordered list.\n         *\n         * @param {PdfNumberStyle} value The numbering style used for the ordered list.\n         * ```typescript\n         * // Load an existing document\n         * let document: PdfDocument = new PdfDocument(data);\n         * // Access the first page\n         * let page: PdfPage = document.getPage(0);\n         *  // Assign the array of string items\n         * let products: string[] = ['Excel', 'Power', 'Point', 'Word', 'PDF'];\n         * // Add the items to list item collection by passing the array of products\n         * let items: PdfListItemCollection = new PdfListItemCollection(products);\n         * // Initialize the instance of ordered list and pass the item collection\n         * let list: PdfOrderedList = new PdfOrderedList(items);\n         * // Define a style for the list\n         * let style: PdfNumberStyle = PdfNumberStyle.lowerLatin;\n         * // Set the numbering style for the list items\n         * list.style = style;\n         * // Draw the ordered list on the page\n         * list.draw(page, 0, 20, 500, 700);\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        set: function (value) {\n            this._style = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfOrderedList.prototype, \"startNumber\", {\n        /**\n         * Gets the starting number used for the ordered list.\n         *\n         * @returns {number} The starting number of the ordered list.\n         * ```typescript\n         * // Load an existing document\n         * let document: PdfDocument = new PdfDocument(data);\n         * // Access the first page\n         * let page: PdfPage = document.getPage(0);\n         * // Assign the array of string items\n         * let products: string[] = ['Excel', 'Power', 'Point', 'Word', 'PDF'];\n         * // Add the items to list item collection by passing the array of products\n         * let items: PdfListItemCollection = new PdfListItemCollection(products);\n         * // Initialize the instance of ordered list and pass the item collection\n         * let list: PdfOrderedList = new PdfOrderedList(items);\n         * // Get the starting number used for the ordered list\n         * let startnumber: number = list.startNumber;\n         * // Draw the ordered list on the page\n         * list.draw(page, 0, 20, 500, 700);\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        get: function () {\n            return this._startNumber;\n        },\n        /**\n         * Sets the starting number to be used for the ordered list.\n         *\n         * @param {number} value The starting number to set.\n         * ```typescript\n         * // Load an existing document\n         * let document: PdfDocument = new PdfDocument(data);\n         * // Access the first page\n         * let page: PdfPage = document.getPage(0);\n         * // Assign the array of string items\n         * let products: string[] = ['Excel', 'Power', 'Point', 'Word', 'PDF'];\n         * // Add the items to list item collection by passing the array of products\n         * let items: PdfListItemCollection = new PdfListItemCollection(products);\n         * // Initialize the instance of ordered list and pass the item collection\n         * let list: PdfOrderedList = new PdfOrderedList(items);\n         * // Set the starting number for the ordered list\n         * list.startNumber = 5;\n         * // Draw the ordered list on the page\n         * list.draw(page, 0, 20, 500, 700);\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        set: function (value) {\n            if (value <= 0) {\n                throw new Error('Start number should be greater than 0.');\n            }\n            this._startNumber = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    PdfOrderedList.prototype._getNumber = function () {\n        return (0,_utils__WEBPACK_IMPORTED_MODULE_7__._convertNumber)(this._startNumber + this._currentIndex, this._style);\n    };\n    return PdfOrderedList;\n}(PdfList));\n\n/**\n * Represents the Unordered lists.\n * ```typescript\n * // Load an existing PDF document\n * let document: PdfDocument = new PdfDocument(data);\n * // Access the first page\n * let page: PdfPage = document.getPage(0);\n * // Define the items in the unordered list\n * let products: string[] = ['Excel', 'Power', 'Point', 'Word', 'PDF'];\n * // Create an instance of PdfListItemCollection by passing the string array\n * let items: PdfListItemCollection = new PdfListItemCollection(products);\n * // Create an instance of PdfUnorderedList\n * let list: PdfUnorderedList = new PdfUnorderedList();\n * // Draw the unordered list on the page\n * list.draw(page, 0, 20, layout);\n * // Save the document\n * document.save('output.pdf');\n * // Destroy the document\n * document.destroy();\n * ````\n */\nvar PdfUnorderedList = /** @class */ (function (_super) {\n    __extends(PdfUnorderedList, _super);\n    function PdfUnorderedList(items, settings) {\n        var _this = _super.call(this) || this;\n        if (items) {\n            _this._itemCollection = items;\n        }\n        else {\n            _this._itemCollection = new _pdf_list_item__WEBPACK_IMPORTED_MODULE_6__.PdfListItemCollection();\n        }\n        if (settings) {\n            if (settings.font) {\n                _this._font = settings.font;\n            }\n            if (settings.format) {\n                _this._stringFormat = settings.format;\n            }\n            if (settings.pen) {\n                _this._pen = settings.pen;\n            }\n            if (settings.brush) {\n                _this._brush = settings.brush;\n            }\n            if (settings.style) {\n                _this._style = settings.style;\n            }\n            else {\n                _this._style = _enumerator__WEBPACK_IMPORTED_MODULE_0__.PdfUnorderedListStyle.disk;\n            }\n            if (settings.indent) {\n                _this._indent = settings.indent;\n            }\n            if (settings.textIndent) {\n                _this._textIndent = settings.textIndent;\n            }\n            if (settings.alignment) {\n                _this._alignment = settings.alignment;\n            }\n            if (settings.delimiter) {\n                _this._delimiter = settings.delimiter;\n            }\n            if (settings.suffix) {\n                _this._suffix = settings.suffix;\n            }\n        }\n        else {\n            _this._style = _enumerator__WEBPACK_IMPORTED_MODULE_0__.PdfUnorderedListStyle.disk;\n        }\n        return _this;\n    }\n    Object.defineProperty(PdfUnorderedList.prototype, \"style\", {\n        /**\n         * Gets the style used for the unordered list.\n         *\n         * @returns {PdfUnorderedListStyle} The style used for the unordered list.\n         * ```typescript\n         * // Load an existing document\n         * let document: PdfDocument = new PdfDocument(data);\n         * // Access the first page\n         * let page: PdfPage = document.getPage(0);\n         * // Define the items in the unordered list\n         * let products: string[] = ['Excel', 'Power', 'Point', 'Word', 'PDF'];\n         * // Add the items to list item collection by passing the array of products\n         * let items: PdfListItemCollection = new PdfListItemCollection(products);\n         * // Initialize an instance of the unordered list and pass the list item collection\n         * let list: PdfUnorderedList = new PdfUnorderedList(items);\n         * // Get the style used for the unordered list\n         * let style: PdfUnorderedListStyle = list.style;\n         * // Draw the unordered list on the page\n         * list.draw(page, 0, 20, 500, 700);\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        get: function () {\n            return this._style;\n        },\n        /**\n         * Sets the style used for the unordered list.\n         *\n         * @param {PdfUnorderedListStyle} value The style to set for the unordered list.\n         * ```typescript\n         * // Load the existing document\n         * let document: PdfDocument = new PdfDocument(data);\n         * // Access the first page\n         * let page: PdfPage = document.getPage(0);\n         * // Define the items in the unordered list\n         * let products: string[] = ['Excel', 'Power', 'Point', 'Word', 'PDF'];\n         * // Add the items to list item collection by passing the array of products\n         * let items: PdfListItemCollection = new PdfListItemCollection(products);\n         * // Initialize an instance of the unordered list and pass the list item collection\n         * let list: PdfUnorderedList = new PdfUnorderedList(items);\n         * // Initialize a style for the unordered list\n         * let style: PdfUnorderedListStyle = PdfUnorderedListStyle.circle;\n         * // Set the style for the unordered list items\n         * list.style = style;\n         * // Draw the unordered list on the page\n         * list.draw(page, 0, 20, 500, 700);\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        set: function (value) {\n            this._style = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    PdfUnorderedList.prototype._getStyledText = function () {\n        switch (this._style) {\n            case _enumerator__WEBPACK_IMPORTED_MODULE_0__.PdfUnorderedListStyle.disk:\n                return '\\x6C';\n            case _enumerator__WEBPACK_IMPORTED_MODULE_0__.PdfUnorderedListStyle.square:\n                return '\\x6E';\n            case _enumerator__WEBPACK_IMPORTED_MODULE_0__.PdfUnorderedListStyle.asterisk:\n                return '\\x5D';\n            case _enumerator__WEBPACK_IMPORTED_MODULE_0__.PdfUnorderedListStyle.circle:\n                return '\\x6D';\n            default:\n                return '';\n        }\n    };\n    PdfUnorderedList.prototype._draw = function (graphics, x, y, brush, pen) {\n        var template = new _graphics_pdf_template__WEBPACK_IMPORTED_MODULE_3__.PdfTemplate([0, 0, this._size[0], this._size[1]], graphics._crossReference);\n        var bounds = [0, 0, 0, 0];\n        if (pen) {\n            bounds[0] = bounds[0] + pen._width;\n            bounds[1] = bounds[1] + pen._width;\n        }\n        template.graphics.drawString(this._getStyledText(), this._unicodeFont, bounds, pen, brush);\n        graphics.drawTemplate(template, { x: x, y: y, width: template.size[0], height: template.size[1] });\n    };\n    return PdfUnorderedList;\n}(PdfList));\n\nvar _PdfListInfo = /** @class */ (function () {\n    function _PdfListInfo(list, index, number) {\n        this._list = list;\n        this._index = index;\n        this._number = number;\n    }\n    return _PdfListInfo;\n}());\n\nvar _PdfListLayouter = /** @class */ (function () {\n    function _PdfListLayouter(element) {\n        this._indent = 0;\n        this._information = [];\n        this._markerMaxWidth = 0;\n        this._finish = false;\n        this._usePaginateBounds = true;\n        this._resultHeight = 0;\n        this._size = [0, 0];\n        this._index = 0;\n        this._element = element;\n    }\n    _PdfListLayouter.prototype.layout = function (graphics, bounds) {\n        this._graphics = graphics;\n        var parameter = new _graphics__WEBPACK_IMPORTED_MODULE_4__._PdfLayoutParameters();\n        parameter._bounds = bounds;\n        parameter._format = new _graphics__WEBPACK_IMPORTED_MODULE_4__.PdfLayoutFormat();\n        parameter._format.layout = _enumerator__WEBPACK_IMPORTED_MODULE_0__.PdfLayoutType.onePage;\n        this.layoutInternal(parameter);\n    };\n    _PdfListLayouter.prototype.layoutInternal = function (parameter) {\n        this._currentPage = parameter._page;\n        this._bounds = parameter._bounds.slice();\n        if (this._currentPage) {\n            if (parameter._bounds[2] === 0 && parameter._bounds[3] === 0) {\n                var pageSize = this._currentPage.graphics.clientSize;\n                this._bounds[2] = pageSize[0] - this._bounds[0];\n                this._bounds[3] = pageSize[1] - this._bounds[1];\n            }\n            this._graphics = this._currentPage.graphics;\n        }\n        var pageResult = new _graphics__WEBPACK_IMPORTED_MODULE_4__._PageLayoutResult();\n        pageResult.broken = false;\n        pageResult.y = this._bounds[1];\n        this._curList = this._element;\n        this._indent = this._curList.indent;\n        this._setCurrentParameters(this._curList);\n        if (!this._curList.brush) {\n            this._currentBrush = new _graphics_pdf_graphics__WEBPACK_IMPORTED_MODULE_2__.PdfBrush([0, 0, 0]);\n        }\n        if (!this._curList.font) {\n            this._currentFont = this._curList._defaultFont;\n        }\n        if (this._curList instanceof PdfOrderedList) {\n            this._markerMaxWidth = this._getMarkerMaxWidth(this._curList, this._information);\n        }\n        var useOnPage = parameter._format.layout === _enumerator__WEBPACK_IMPORTED_MODULE_0__.PdfLayoutType.onePage;\n        while (!this._finish) {\n            pageResult.y = this._bounds[1];\n            pageResult = this._layoutOnPage(pageResult);\n            if (useOnPage) {\n                break;\n            }\n            if (this._currentPage && !this._finish) {\n                this._currentPage = this._getNextPage(this._currentPage);\n            }\n            this._graphics = this._currentPage.graphics;\n            if (parameter._bounds[2] === 0 && parameter._bounds[3] === 0) {\n                var pageSize = this._currentPage.graphics.clientSize;\n                this._bounds[2] = pageSize[0] - this._bounds[0];\n                this._bounds[3] = pageSize[1] - this._bounds[1];\n            }\n            if (parameter._format && parameter._format.usePaginateBounds && this._usePaginateBounds) {\n                this._bounds = parameter._format._paginateBounds;\n            }\n        }\n        this._information = [];\n        var finalBounds = [this._bounds[0], pageResult.y, this._bounds[2], this._resultHeight];\n        var result = new _graphics__WEBPACK_IMPORTED_MODULE_4__.PdfLayoutResult(this._currentPage, finalBounds);\n        if (this._currentFormat) {\n            this._currentFormat._isList = false;\n        }\n        return result;\n    };\n    _PdfListLayouter.prototype._layoutOnPage = function (pageResult) {\n        var height = 0;\n        var resultantHeight = 0;\n        var y = this._bounds[1];\n        var x = this._bounds[0];\n        this._size = [this._bounds[2] - this._indent, this._bounds[3]];\n        while (true) { // eslint-disable-line\n            for (; this._index < this._curList.items.count; ++this._index) {\n                var item = this._curList.items.at(this._index);\n                var result = this._drawItem(pageResult, x, this._curList, this._index, this._indent, this._information, item, height, y);\n                pageResult = result.pageResult;\n                height = result.height;\n                y = result.y;\n                resultantHeight += height;\n                if (pageResult.broken) {\n                    return pageResult;\n                }\n                pageResult.markerWrote = false;\n                if (item.subList && item.subList.items.count > 0) {\n                    if (this._curList instanceof PdfOrderedList) {\n                        var oList = this._curList;\n                        oList._currentIndex = this._index;\n                        var info = new _PdfListInfo(this._curList, this._index, oList._getNumber());\n                        info._brush = this._currentBrush;\n                        info._font = this._currentFont;\n                        info._format = this._currentFormat;\n                        info._pen = this._currentPen;\n                        info._markerWidth = this._markerMaxWidth;\n                        this._information.push(info);\n                    }\n                    else {\n                        var info = new _PdfListInfo(this._curList, this._index);\n                        info._brush = this._currentBrush;\n                        info._font = this._currentFont;\n                        info._format = this._currentFormat;\n                        info._pen = this._currentPen;\n                        this._information.push(info);\n                    }\n                    this._curList = item.subList;\n                    if (this._curList instanceof PdfOrderedList) {\n                        this._markerMaxWidth = this._getMarkerMaxWidth(this._curList, this._information);\n                    }\n                    this._index = -1;\n                    this._indent += this._curList.indent;\n                    this._size[0] = this._size[0] - this._curList.indent;\n                    this._setCurrentParameters(item);\n                    this._setCurrentParameters(this._curList);\n                }\n            }\n            if (this._information.length === 0) {\n                this._resultHeight = resultantHeight;\n                this._finish = true;\n                break;\n            }\n            var listInfo = this._information.pop();\n            this._index = listInfo._index + 1;\n            this._indent -= this._curList.indent;\n            this._size[0] = this._size[0] + this._curList.indent;\n            this._markerMaxWidth = listInfo._markerWidth;\n            this._currentBrush = listInfo._brush;\n            this._currentPen = listInfo._pen;\n            this._currentFont = listInfo._font;\n            this._currentFormat = listInfo._format;\n            this._curList = listInfo._list;\n        }\n        return pageResult;\n    };\n    _PdfListLayouter.prototype._drawItem = function (pageResult, x, curList, index, indent, info, item, height, y) {\n        var layouter = new _fonts__WEBPACK_IMPORTED_MODULE_1__._PdfStringLayouter();\n        var result;\n        var textIndent = curList.textIndent;\n        var posY = height + y;\n        var posX = indent + x;\n        var itemHeight = 0;\n        var itemSize = this._size;\n        var text = item.text;\n        var markerText;\n        var itemBrush = this._currentBrush;\n        var markerHeight = 0;\n        if (item.brush) {\n            itemBrush = item.brush;\n        }\n        var itemPen = this._currentPen;\n        if (item.pen) {\n            itemPen = item.pen;\n        }\n        var itemFont = this._currentFont;\n        if (item.font) {\n            itemFont = item.font;\n        }\n        var itemFormat = this._currentFormat;\n        if (item.stringFormat) {\n            itemFormat = item.stringFormat;\n        }\n        if ((this._size[0] <= 0 || this._size[0] < itemFont.size) && this._currentPage) {\n            throw new Error('There is not enough space to layout list.');\n        }\n        this._size[1] = this._size[1] - height;\n        if (pageResult.broken) {\n            text = pageResult.itemText;\n            markerText = pageResult.markerText;\n        }\n        var canDrawMarker = true;\n        var markerResult = this._createMarkerResult(index, curList, info, item);\n        if (markerResult) {\n            if (curList instanceof PdfOrderedList) {\n                posX += this._markerMaxWidth;\n                pageResult.markerWidth = this._markerMaxWidth;\n            }\n            else {\n                posX += markerResult._actualSize[0];\n                pageResult.markerWidth = markerResult._actualSize[0];\n            }\n            markerHeight = markerResult._actualSize[1];\n            if (this._currentPage) {\n                canDrawMarker = (markerHeight < this._size[1]);\n            }\n            if (markerResult._empty) {\n                canDrawMarker = false;\n            }\n        }\n        else {\n            posX += curList._size[0];\n            pageResult.markerWidth = curList._size[0];\n            markerHeight = curList._size[1];\n            if (this._currentPage) {\n                canDrawMarker = (markerHeight < this._size[1]);\n            }\n        }\n        if (!markerText || markerText === '') {\n            canDrawMarker = true;\n        }\n        if (text && canDrawMarker) {\n            itemSize = this._size;\n            itemSize[0] = itemSize[0] - pageResult.markerWidth;\n            if (item.textIndent === 0) {\n                itemSize[0] = itemSize[0] - textIndent;\n            }\n            else {\n                itemSize[0] = itemSize[0] - item.textIndent;\n            }\n            if ((itemSize[0] <= 0 || itemSize[0] < itemFont.size) && this._currentPage) {\n                throw new Error('Not enough space to layout the text. The marker is too long or there is not enough space to draw it.');\n            }\n            var itemX = posX;\n            if (!curList._markerRightToLeft) {\n                if (item.textIndent === 0) {\n                    itemX += textIndent;\n                }\n                else {\n                    itemX += item.textIndent;\n                }\n            }\n            else {\n                itemX -= pageResult.markerWidth;\n                if (itemFormat && (itemFormat.alignment === _enumerator__WEBPACK_IMPORTED_MODULE_0__.PdfTextAlignment.right || itemFormat.alignment === _enumerator__WEBPACK_IMPORTED_MODULE_0__.PdfTextAlignment.center)) {\n                    itemX -= indent;\n                }\n            }\n            if (!this._currentPage && itemFormat) {\n                itemFormat = Object.assign({}, itemFormat);\n                itemFormat.alignment = _enumerator__WEBPACK_IMPORTED_MODULE_0__.PdfTextAlignment.left;\n            }\n            result = layouter._layout(text, itemFont, itemFormat, itemSize);\n            var rect = [itemX, posY, itemSize[0], itemSize[1]];\n            this._graphics._drawStringLayoutResult(result, itemFont, itemPen, itemBrush, rect, itemFormat);\n            y = posY;\n            itemHeight = result._actualSize[1];\n        }\n        height = (itemHeight < markerHeight) ? markerHeight : itemHeight;\n        if ((result && result._remainder && result._remainder !== '') ||\n            (markerResult && markerResult._remainder && markerResult._remainder !== '') ||\n            !canDrawMarker) {\n            y = 0;\n            height = 0;\n            if (result) {\n                pageResult.itemText = result._remainder;\n                if (result._remainder === item.text) {\n                    canDrawMarker = false;\n                }\n            }\n            else {\n                if (canDrawMarker) {\n                    pageResult.itemText = undefined;\n                }\n                else {\n                    pageResult.itemText = item.text;\n                }\n            }\n            if (markerResult) {\n                pageResult.markerText = markerResult._remainder;\n            }\n            else {\n                pageResult.markerText = undefined;\n            }\n            pageResult.broken = true;\n            pageResult.y = 0;\n            this._bounds[1] = 0;\n        }\n        else {\n            pageResult.broken = false;\n        }\n        if (result) {\n            pageResult.markerX = posX;\n            if (itemFormat) {\n                switch (itemFormat.alignment) {\n                    case _enumerator__WEBPACK_IMPORTED_MODULE_0__.PdfTextAlignment.right:\n                        pageResult.markerX = posX + itemSize[0] - result._actualSize[0];\n                        break;\n                    case _enumerator__WEBPACK_IMPORTED_MODULE_0__.PdfTextAlignment.center:\n                        pageResult.markerX = posX + (itemSize[0] / 2) - (result._actualSize[0] / 2);\n                        break;\n                }\n            }\n            if (curList._markerRightToLeft) {\n                pageResult.markerX += result._actualSize[0];\n                if (item.textIndent === 0) {\n                    pageResult.markerX += textIndent;\n                }\n                else {\n                    pageResult.markerX += item.textIndent;\n                }\n                if (itemFormat && (itemFormat.alignment === _enumerator__WEBPACK_IMPORTED_MODULE_0__.PdfTextAlignment.right || itemFormat.alignment === _enumerator__WEBPACK_IMPORTED_MODULE_0__.PdfTextAlignment.center)) {\n                    pageResult.markerX -= indent;\n                }\n            }\n        }\n        if (canDrawMarker && !pageResult.markerWrote) {\n            pageResult.markerWrote = this._drawMarker(curList, item, markerResult, posY, pageResult.markerX);\n            if (curList instanceof PdfOrderedList) {\n                pageResult.markerWidth = markerResult._actualSize[0];\n            }\n            else {\n                pageResult.markerWidth = curList._size[0];\n            }\n        }\n        return { pageResult: pageResult, height: height, y: y };\n    };\n    _PdfListLayouter.prototype._createMarkerResult = function (index, curList, info, item) {\n        if (curList instanceof PdfOrderedList) {\n            return this._createOrderedMarkerResult(curList, item, index, info, false);\n        }\n        else {\n            return this._createUnorderedMarkerResult(curList, item);\n        }\n    };\n    _PdfListLayouter.prototype._drawMarker = function (curList, item, markerResult, posY, posX) {\n        if (curList instanceof PdfOrderedList) {\n            if (curList.font && markerResult) {\n                if (curList.font.size > markerResult._actualSize[1]) {\n                    posY += (curList.font.size / 2) - (markerResult._actualSize[1] / 2);\n                    markerResult._actualSize[1] = markerResult._actualSize[1] + posY;\n                }\n                this._drawOrderedMarker(curList, markerResult, item, posX, posY);\n            }\n        }\n        else {\n            if (curList.font && markerResult) {\n                if (curList.font.size > markerResult._actualSize[1]) {\n                    posY += (curList.font.size / 2) - (markerResult._actualSize[1] / 2);\n                    markerResult._actualSize[1] = markerResult._actualSize[1] + posY;\n                }\n            }\n            this._drawUnorderedMarker(curList, markerResult, item, posX, posY);\n        }\n        return true;\n    };\n    _PdfListLayouter.prototype._drawUnorderedMarker = function (curList, markerResult, item, posX, posY) {\n        var markerFont = this._getMarkerFont(curList, item);\n        var markerPen = this._getMarkerPen(curList, item);\n        var markerBrush = this._getMarkerBrush(curList, item);\n        if (markerResult) {\n            curList._size = markerResult._actualSize;\n            curList._unicodeFont = new _fonts__WEBPACK_IMPORTED_MODULE_1__.PdfStandardFont(_fonts__WEBPACK_IMPORTED_MODULE_1__.PdfFontFamily.zapfDingbats, markerFont.size);\n            curList._draw(this._graphics, posX - markerResult._actualSize[0], posY, markerBrush, markerPen);\n        }\n        else {\n            curList._size = [markerFont.size, markerFont.size];\n            curList._draw(this._graphics, posX - markerFont.size, posY, markerBrush, markerPen);\n        }\n    };\n    _PdfListLayouter.prototype._drawOrderedMarker = function (curList, markerResult, item, posX, posY) {\n        var markerFont = this._getMarkerFont(curList, item);\n        var markerPen = this._getMarkerPen(curList, item);\n        var markerBrush = this._getMarkerBrush(curList, item);\n        var rect = [posX - this._markerMaxWidth, posY, this._markerMaxWidth, markerResult._actualSize[1]];\n        var markerFormat = this._setMarkerStringFormat(curList, this._getMarkerFormat(curList, item));\n        this._graphics._drawStringLayoutResult(markerResult, markerFont, markerPen, markerBrush, rect, markerFormat);\n    };\n    _PdfListLayouter.prototype._setCurrentParameters = function (element) {\n        if (element.brush) {\n            this._currentBrush = element.brush;\n        }\n        if (element.pen) {\n            this._currentPen = element.pen;\n        }\n        if (element.font) {\n            this._currentFont = element.font;\n        }\n        if (element.stringFormat) {\n            this._currentFormat = element.stringFormat;\n            if (element instanceof PdfList) {\n                this._currentFormat._isList = true;\n            }\n        }\n    };\n    _PdfListLayouter.prototype._getMarkerMaxWidth = function (list, infromation) {\n        var width = -1;\n        for (var i = 0; i < list.items.count; i++) {\n            var result = this._createOrderedMarkerResult(list, list.items.at(i), i + list.startNumber, infromation, true);\n            if (width < result._actualSize[0]) {\n                width = result._actualSize[0];\n            }\n        }\n        return width;\n    };\n    _PdfListLayouter.prototype._createUnorderedMarkerResult = function (list, item) {\n        var markerFont = this._getMarkerFont(list, item);\n        var layouter = new _fonts__WEBPACK_IMPORTED_MODULE_1__._PdfStringLayouter();\n        var uFont = new _fonts__WEBPACK_IMPORTED_MODULE_1__.PdfStandardFont(_fonts__WEBPACK_IMPORTED_MODULE_1__.PdfFontFamily.zapfDingbats, markerFont.size);\n        var result = layouter._layout(list._getStyledText(), uFont, null, this._size);\n        list._size = result._actualSize;\n        if (list.pen) {\n            result._size = [result._actualSize[0] + 2 * list.pen._width, result._actualSize[1] + 2 * list.pen._width];\n        }\n        return result;\n    };\n    _PdfListLayouter.prototype._createOrderedMarkerResult = function (list, item, index, infromation, findMaxWidth) {\n        list._currentIndex = index;\n        var text = '';\n        if (list.style !== _enumerator__WEBPACK_IMPORTED_MODULE_0__.PdfNumberStyle.none) {\n            text = list._getNumber() + list.suffix;\n        }\n        if (list.enableHierarchy) {\n            var collection = infromation.slice();\n            for (var i = 0; i < collection.length; i++) {\n                var listInfo = collection[Number.parseInt(i.toString(), 10)];\n                var orderedList = listInfo._list;\n                if (!(orderedList && orderedList instanceof PdfOrderedList && orderedList.style !== _enumerator__WEBPACK_IMPORTED_MODULE_0__.PdfNumberStyle.none)) {\n                    break;\n                }\n                text = listInfo._number + orderedList.delimiter + text;\n                if (!orderedList.enableHierarchy) {\n                    break;\n                }\n            }\n        }\n        var layouter = new _fonts__WEBPACK_IMPORTED_MODULE_1__._PdfStringLayouter();\n        var font = this._getMarkerFont(list, item);\n        var format = this._getMarkerFormat(list, item);\n        var markerSize = [0, 0];\n        if (!findMaxWidth) {\n            markerSize[0] = this._markerMaxWidth;\n            format = this._setMarkerStringFormat(list, format);\n        }\n        return layouter._layout(text, font, format, markerSize);\n    };\n    _PdfListLayouter.prototype._setMarkerStringFormat = function (list, format) {\n        if (format) {\n            format = Object.assign({}, format);\n        }\n        else {\n            format = new _fonts__WEBPACK_IMPORTED_MODULE_1__.PdfStringFormat();\n        }\n        if (!list.stringFormat) {\n            format.alignment = _enumerator__WEBPACK_IMPORTED_MODULE_0__.PdfTextAlignment.right;\n            if (list._markerRightToLeft) {\n                format.alignment = _enumerator__WEBPACK_IMPORTED_MODULE_0__.PdfTextAlignment.left;\n            }\n        }\n        if (!this._currentPage && format) {\n            format = Object.assign({}, format);\n            format.alignment = _enumerator__WEBPACK_IMPORTED_MODULE_0__.PdfTextAlignment.left;\n        }\n        return format;\n    };\n    _PdfListLayouter.prototype._getMarkerFont = function (list, item) {\n        var markerFont = list.font;\n        if (!markerFont) {\n            markerFont = item.font;\n            if (!markerFont) {\n                markerFont = this._currentFont;\n            }\n        }\n        list.font = markerFont;\n        return markerFont;\n    };\n    _PdfListLayouter.prototype._getMarkerFormat = function (list, item) {\n        var markerFormat = list.stringFormat;\n        if (!markerFormat) {\n            markerFormat = item.stringFormat;\n            if (!markerFormat) {\n                markerFormat = this._currentFormat;\n            }\n        }\n        return markerFormat;\n    };\n    _PdfListLayouter.prototype._getMarkerPen = function (list, item) {\n        var markerPen = list.pen;\n        if (!markerPen) {\n            markerPen = item.pen;\n            if (!markerPen) {\n                markerPen = this._currentPen;\n            }\n        }\n        return markerPen;\n    };\n    _PdfListLayouter.prototype._getMarkerBrush = function (list, item) {\n        var markerBrush = list.brush;\n        if (!markerBrush) {\n            markerBrush = item.brush;\n            if (!markerBrush) {\n                markerBrush = this._currentBrush;\n            }\n        }\n        return markerBrush;\n    };\n    _PdfListLayouter.prototype._getNextPage = function (page) {\n        var document = page._crossReference._document;\n        if (page._pageIndex < document.pageCount - 1) {\n            return document.getPage(page._pageIndex + 1);\n        }\n        else {\n            return document.addPage();\n        }\n    };\n    return _PdfListLayouter;\n}());\n\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-pdf/src/pdf/core/list/pdf-list.js?");

/***/ })

}]);