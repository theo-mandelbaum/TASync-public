"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkej2_vue_samples"] = self["webpackChunkej2_vue_samples"] || []).push([["chunk-vendors-node_modules_syncfusion_ej2-pivotview_src_pivotview_actions_d"],{

/***/ "./node_modules/@syncfusion/ej2-pivotview/src/pivotview/actions.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-pivotview/src/pivotview/actions.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DrillThrough: () => (/* reexport safe */ _actions_drill_through__WEBPACK_IMPORTED_MODULE_4__.DrillThrough),\n/* harmony export */   ExcelExport: () => (/* reexport safe */ _actions_excel_export__WEBPACK_IMPORTED_MODULE_0__.ExcelExport),\n/* harmony export */   KeyboardInteraction: () => (/* reexport safe */ _actions_keyboard__WEBPACK_IMPORTED_MODULE_2__.KeyboardInteraction),\n/* harmony export */   PDFExport: () => (/* reexport safe */ _actions_pdf_export__WEBPACK_IMPORTED_MODULE_1__.PDFExport),\n/* harmony export */   Pager: () => (/* reexport safe */ _actions_pager__WEBPACK_IMPORTED_MODULE_5__.Pager),\n/* harmony export */   VirtualScroll: () => (/* reexport safe */ _actions_virtualscroll__WEBPACK_IMPORTED_MODULE_3__.VirtualScroll)\n/* harmony export */ });\n/* harmony import */ var _actions_excel_export__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./actions/excel-export */ \"./node_modules/@syncfusion/ej2-pivotview/src/pivotview/actions/excel-export.js\");\n/* harmony import */ var _actions_pdf_export__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./actions/pdf-export */ \"./node_modules/@syncfusion/ej2-pivotview/src/pivotview/actions/pdf-export.js\");\n/* harmony import */ var _actions_keyboard__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./actions/keyboard */ \"./node_modules/@syncfusion/ej2-pivotview/src/pivotview/actions/keyboard.js\");\n/* harmony import */ var _actions_virtualscroll__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./actions/virtualscroll */ \"./node_modules/@syncfusion/ej2-pivotview/src/pivotview/actions/virtualscroll.js\");\n/* harmony import */ var _actions_drill_through__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./actions/drill-through */ \"./node_modules/@syncfusion/ej2-pivotview/src/pivotview/actions/drill-through.js\");\n/* harmony import */ var _actions_pager__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./actions/pager */ \"./node_modules/@syncfusion/ej2-pivotview/src/pivotview/actions/pager.js\");\n/**\n * Action export\n */\n\n\n\n\n\n\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-pivotview/src/pivotview/actions.js?");

/***/ }),

/***/ "./node_modules/@syncfusion/ej2-pivotview/src/pivotview/actions/drill-through.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-pivotview/src/pivotview/actions/drill-through.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DrillThrough: () => (/* binding */ DrillThrough)\n/* harmony export */ });\n/* harmony import */ var _common_base_constant__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../common/base/constant */ \"./node_modules/@syncfusion/ej2-pivotview/src/common/base/constant.js\");\n/* harmony import */ var _common_popups_drillthrough_dialog__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../common/popups/drillthrough-dialog */ \"./node_modules/@syncfusion/ej2-pivotview/src/common/popups/drillthrough-dialog.js\");\n/* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @syncfusion/ej2-base */ \"./node_modules/@syncfusion/ej2-base/index.js\");\n\n\n\n\n/**\n * `DrillThrough` module.\n */\nvar DrillThrough = /** @class */ (function () {\n    /**\n     * Constructor.\n     *\n     * @param {PivotView} parent - Instance of pivot table.\n     * @hidden\n     */\n    function DrillThrough(parent) {\n        this.parent = parent;\n        this.drillThroughDialog = new _common_popups_drillthrough_dialog__WEBPACK_IMPORTED_MODULE_1__.DrillThroughDialog(this.parent);\n        this.addInternalEvents();\n    }\n    /**\n     * It returns the Module name.\n     *\n     * @returns {string} - string.\n     * @hidden\n     */\n    DrillThrough.prototype.getModuleName = function () {\n        return 'drillThrough';\n    };\n    DrillThrough.prototype.addInternalEvents = function () {\n        this.parent.on(_common_base_constant__WEBPACK_IMPORTED_MODULE_0__.contentReady, this.wireEvents, this);\n    };\n    DrillThrough.prototype.wireEvents = function () {\n        this.unWireEvents();\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.EventHandler.add(this.parent.element, 'dblclick', this.mouseClickHandler, this);\n    };\n    DrillThrough.prototype.unWireEvents = function () {\n        if (this.parent.isDestroyed) {\n            return;\n        }\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.EventHandler.remove(this.parent.element, 'dblclick', this.mouseClickHandler);\n    };\n    DrillThrough.prototype.mouseClickHandler = function (e) {\n        var target = e.target;\n        var ele = null;\n        if (target.classList.contains('e-stackedheadercelldiv') || target.classList.contains('e-headercelldiv') ||\n            target.classList.contains('e-stackedheadertext') || target.classList.contains('e-headertext')) {\n            ele = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.closest)(target.parentElement, 'th');\n        }\n        else if (target.classList.contains('e-cellvalue')) {\n            ele = target.parentElement;\n        }\n        else if (target.classList.contains('e-headercell') || target.classList.contains('e-rowcell')) {\n            ele = target;\n        }\n        if (ele) {\n            if (this.parent.pivotValues.length > 0 && this.parent.dataSourceSettings.values.length > 0 &&\n                (this.parent.allowDrillThrough || this.parent.editSettings.allowEditing) && ele.classList.contains('e-valuescontent')) {\n                var colIndex = parseInt(ele.getAttribute('aria-colindex'), 10) - 1;\n                var rowIndex = Number(ele.getAttribute('index'));\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(this.parent.pivotValues[rowIndex]) &&\n                    !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(this.parent.pivotValues[rowIndex][colIndex])) {\n                    this.executeDrillThrough(this.parent.pivotValues[rowIndex][colIndex], rowIndex, colIndex, ele);\n                }\n            }\n        }\n    };\n    /** @hidden */\n    DrillThrough.prototype.executeDrillThrough = function (pivotValue, rowIndex, colIndex, element) {\n        this.parent.drillThroughElement = element;\n        this.parent.drillThroughValue = pivotValue;\n        var engine = this.parent.dataType === 'olap' ? this.parent.olapEngineModule : this.parent.engineModule;\n        var valueCaption = '';\n        var aggType = '';\n        var rawData = [];\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(pivotValue.rowHeaders) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(pivotValue.columnHeaders)) {\n            if (this.parent.dataType === 'olap') {\n                var tupleInfo = void 0;\n                if (this.parent.dataSourceSettings.valueAxis === 'row') {\n                    tupleInfo = engine.tupRowInfo[pivotValue.rowOrdinal];\n                }\n                else {\n                    tupleInfo = engine.tupColumnInfo[pivotValue.colOrdinal];\n                }\n                var measureName = tupleInfo ?\n                    engine.getUniqueName(tupleInfo.measureName) : pivotValue.actualText;\n                if (engine.fieldList[measureName] && engine.fieldList[measureName].isCalculatedField) {\n                    this.parent.pivotCommon.errorDialog.createErrorDialog(this.parent.localeObj.getConstant('error'), this.parent.localeObj.getConstant('drillError'));\n                    return;\n                }\n                valueCaption = engine.fieldList[measureName || pivotValue.actualText].caption;\n                aggType = engine.fieldList[measureName || pivotValue.actualText].aggregateType;\n                try {\n                    this.parent.olapEngineModule.getDrillThroughData(pivotValue, this.parent.maxRowsInDrillThrough);\n                    rawData = JSON.parse(engine.gridJSON);\n                }\n                catch (exception) {\n                    if (this.parent.olapEngineModule.errorInfo) {\n                        this.parent.actionFailureMethod(this.parent.olapEngineModule.errorInfo);\n                    }\n                    this.parent.pivotCommon.errorDialog.createErrorDialog(this.parent.localeObj.getConstant('error'), this.parent.olapEngineModule.errorInfo ?\n                        this.parent.olapEngineModule.errorInfo : engine.gridJSON);\n                    this.parent.olapEngineModule.errorInfo = undefined;\n                    return;\n                }\n            }\n            else {\n                valueCaption = engine.fieldList[pivotValue.actualText.toString()] ?\n                    engine.fieldList[pivotValue.actualText.toString()].caption : pivotValue.actualText.toString();\n                aggType = engine.fieldList[pivotValue.actualText] ? engine.fieldList[pivotValue.actualText].aggregateType : '';\n                if (this.parent.dataSourceSettings.mode === 'Server') {\n                    this.parent.getEngine('fetchRawData', null, null, null, null, null, null, { rowIndex: rowIndex, columnIndex: colIndex });\n                }\n                else {\n                    if (this.parent.allowDataCompression) {\n                        var indexArray = Object.keys(pivotValue.indexObject);\n                        this.drillThroughDialog.indexString = [];\n                        for (var _i = 0, indexArray_1 = indexArray; _i < indexArray_1.length; _i++) {\n                            var cIndex = indexArray_1[_i];\n                            for (var _a = 0, _b = this.parent.engineModule.groupRawIndex[Number(cIndex)]; _a < _b.length; _a++) {\n                                var aIndex = _b[_a];\n                                rawData.push(this.parent.engineModule.actualData[aIndex]);\n                                this.drillThroughDialog.indexString.push(aIndex.toString());\n                            }\n                        }\n                    }\n                    else {\n                        var indexArray = Object.keys(pivotValue.indexObject);\n                        for (var _c = 0, indexArray_2 = indexArray; _c < indexArray_2.length; _c++) {\n                            var index = indexArray_2[_c];\n                            rawData.push(this.parent.engineModule.data[Number(index)]);\n                        }\n                    }\n                }\n            }\n            if (this.parent.dataSourceSettings.mode !== 'Server') {\n                this.triggerDialog(valueCaption, aggType, rawData, pivotValue, element);\n            }\n        }\n    };\n    DrillThrough.prototype.frameData = function (eventArgs) {\n        var keyPos = 0;\n        var dataPos = 0;\n        var data = [];\n        while (dataPos < eventArgs.rawData.length) {\n            var framedHeader = {};\n            while (keyPos < eventArgs.gridColumns.length) {\n                framedHeader[eventArgs.gridColumns[keyPos].field] = this.parent.dataSourceSettings.mode === 'Server' ?\n                    eventArgs.rawData[dataPos][this.parent.engineModule.fields.indexOf(eventArgs.gridColumns[keyPos]\n                        .field) !== -1 ? this.parent.engineModule.fields.indexOf(eventArgs.gridColumns[keyPos].field) : 0] :\n                    eventArgs.rawData[dataPos][this.parent.engineModule.fieldKeys[eventArgs.gridColumns[keyPos]\n                        .field]];\n                keyPos++;\n            }\n            data.push(framedHeader);\n            dataPos++;\n            keyPos = 0;\n        }\n        eventArgs.rawData = data;\n        return eventArgs;\n    };\n    /** @hidden */\n    DrillThrough.prototype.triggerDialog = function (valueCaption, aggType, rawData, pivotValue, element) {\n        var valuetText = aggType === 'CalculatedField' ? valueCaption.toString() : aggType !== '' ?\n            (this.parent.localeObj.getConstant(aggType) + ' ' + this.parent.localeObj.getConstant('of') + ' ' + valueCaption) :\n            valueCaption;\n        valuetText = this.parent.enableHtmlSanitizer ? _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.SanitizeHtmlHelper.sanitize(valuetText) : valuetText;\n        var rowHeaders = this.parent.dataSourceSettings.valueAxis === 'row' ? this.parent.getRowText(Number(element.getAttribute('index')), 0) :\n            pivotValue.rowHeaders === '' ? '' : pivotValue.rowHeaders.toString().split(this.parent.dataSourceSettings.valueSortSettings.headerDelimiter).join(' - ');\n        var eventArgs = {\n            currentTarget: element,\n            currentCell: pivotValue,\n            rawData: rawData,\n            rowHeaders: rowHeaders,\n            columnHeaders: pivotValue.columnHeaders === '' ? '' : pivotValue.columnHeaders.toString().split(this.parent.dataSourceSettings.valueSortSettings.headerDelimiter).join(' - '),\n            value: valuetText + '(' + pivotValue.formattedText + ')',\n            gridColumns: this.drillThroughDialog.frameGridColumns(rawData),\n            cancel: false\n        };\n        if (this.parent.dataSourceSettings.type === 'CSV') {\n            eventArgs = this.frameData(eventArgs);\n        }\n        var drillThrough = this;\n        this.parent.trigger(_common_base_constant__WEBPACK_IMPORTED_MODULE_0__.drillThrough, eventArgs, function (observedArgs) {\n            if (!eventArgs.cancel) {\n                drillThrough.drillThroughDialog.showDrillThroughDialog(observedArgs);\n            }\n        });\n    };\n    /**\n     * To destroy the drillthrough module.\n     *\n     * @returns  {void}\n     * @hidden\n     */\n    DrillThrough.prototype.destroy = function () {\n        this.unWireEvents();\n        if (this.drillThroughDialog) {\n            this.drillThroughDialog.destroy();\n            this.drillThroughDialog = null;\n        }\n        else {\n            return;\n        }\n    };\n    return DrillThrough;\n}());\n\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-pivotview/src/pivotview/actions/drill-through.js?");

/***/ }),

/***/ "./node_modules/@syncfusion/ej2-pivotview/src/pivotview/actions/excel-export.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-pivotview/src/pivotview/actions/excel-export.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ExcelExport: () => (/* binding */ ExcelExport)\n/* harmony export */ });\n/* harmony import */ var _syncfusion_ej2_excel_export__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @syncfusion/ej2-excel-export */ \"./node_modules/@syncfusion/ej2-excel-export/index.js\");\n/* harmony import */ var _common_base_constant__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../common/base/constant */ \"./node_modules/@syncfusion/ej2-pivotview/src/common/base/constant.js\");\n/* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @syncfusion/ej2-base */ \"./node_modules/@syncfusion/ej2-base/index.js\");\n/* harmony import */ var _base_export_util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../base/export-util */ \"./node_modules/@syncfusion/ej2-pivotview/src/base/export-util.js\");\n\n\n\n\n/**\n * @hidden\n * `ExcelExport` module is used to handle the Excel export action.\n */\nvar ExcelExport = /** @class */ (function () {\n    /**\n     * Constructor for the PivotGrid Excel Export module.\n     *\n     * @param {PivotView} parent - Instance of pivot table.\n     * @hidden\n     */\n    function ExcelExport(parent) {\n        this.actualrCnt = 0;\n        this.parent = parent;\n    }\n    /**\n     * For internal use only - Get the module name.\n     *\n     * @returns {string} - string.\n     * @private\n     */\n    ExcelExport.prototype.getModuleName = function () {\n        return 'excelExport';\n    };\n    ExcelExport.prototype.addHeaderAndFooter = function (excelExportProperties, stringValue, type, rowCount) {\n        var cells = [];\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(excelExportProperties.rows)) {\n            this.actualrCnt = (type === 'footer') ? this.actualrCnt + rowCount - (excelExportProperties.rows[0].cells.length) : this.actualrCnt;\n            var row = excelExportProperties.rows;\n            for (var i = 0; i < row.length; i++) {\n                var spanCount = 0;\n                cells = [];\n                var currentRow = row[i];\n                for (var j = 0; j < currentRow.cells.length; j++) {\n                    cells.push({\n                        index: spanCount + 1, value: currentRow.cells[j].value,\n                        colSpan: currentRow.cells[j].colSpan, rowSpan: currentRow.cells[j].rowSpan,\n                        style: currentRow.cells[j].style\n                    });\n                    spanCount = spanCount + cells[j].colSpan;\n                }\n                this.actualrCnt++;\n                this.rows.push({ index: this.actualrCnt, cells: cells });\n            }\n            this.actualrCnt = (type === 'header') ? rowCount : this.actualrCnt;\n        }\n        else {\n            if (stringValue !== '') {\n                if (type === 'footer') {\n                    this.actualrCnt++;\n                }\n                cells.push({\n                    index: 1, value: stringValue\n                });\n                this.rows.push({ index: this.actualrCnt + 1, cells: cells });\n                this.actualrCnt = (type === 'header') ? this.actualrCnt + 2 : this.actualrCnt;\n            }\n        }\n    };\n    /**\n     *\n     * Method to perform excel export.\n     *\n     * @hidden\n     */\n    ExcelExport.prototype.exportToExcel = function (type, exportProperties, isBlob) {\n        this.rows = [];\n        this.actualrCnt = 0;\n        var isHeaderSet = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(exportProperties) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(exportProperties.header);\n        var isFooterSet = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(exportProperties) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(exportProperties.footer);\n        var isFileNameSet = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(exportProperties) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(exportProperties.fileName);\n        this.engine = this.parent.dataType === 'olap' ? this.parent.olapEngineModule : this.parent.engineModule;\n        /** Event trigerring */\n        var clonedValues;\n        var currentPivotValues = _base_export_util__WEBPACK_IMPORTED_MODULE_3__.PivotExportUtil.getClonedPivotValues(this.engine.pivotValues);\n        var customFileName = isFileNameSet ? exportProperties.fileName : type === 'CSV' ? 'default.csv' : 'default.xlsx';\n        if (this.parent.exportAllPages && (this.parent.enableVirtualization || this.parent.enablePaging)) {\n            var pageSettings = this.engine.pageSettings;\n            var mdxQuery = void 0;\n            this.engine.isPagingOrVirtualizationEnabled = false;\n            if (this.parent.dataType === 'olap') {\n                this.updateOlapPageSettings(true);\n                mdxQuery = this.parent.olapEngineModule.mdxQuery.slice(0);\n            }\n            else {\n                this.engine.pageSettings = null;\n            }\n            this.engine.generateGridData(this.parent.dataSourceSettings, true, true);\n            this.parent.applyFormatting(this.engine.pivotValues);\n            clonedValues = _base_export_util__WEBPACK_IMPORTED_MODULE_3__.PivotExportUtil.getClonedPivotValues(this.engine.pivotValues);\n            this.engine.pivotValues = currentPivotValues;\n            this.engine.pageSettings = pageSettings;\n            this.engine.isPagingOrVirtualizationEnabled = true;\n            if (this.parent.dataType === 'olap') {\n                this.updateOlapPageSettings(false);\n                this.parent.olapEngineModule.mdxQuery = mdxQuery;\n            }\n        }\n        else {\n            clonedValues = currentPivotValues;\n        }\n        var args = {\n            fileName: customFileName, header: '', footer: '', dataCollections: [clonedValues], excelExportProperties: exportProperties\n        };\n        var fileName;\n        var header;\n        var footer;\n        var dataCollections;\n        this.parent.trigger(_common_base_constant__WEBPACK_IMPORTED_MODULE_1__.beforeExport, args, function (observedArgs) {\n            fileName = observedArgs.fileName;\n            header = observedArgs.header;\n            footer = observedArgs.footer;\n            dataCollections = observedArgs.dataCollections;\n        });\n        if (!isHeaderSet && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(args.excelExportProperties) && header !== '') {\n            this.addHeaderAndFooter({}, header, 'header', undefined);\n        }\n        else if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(args.excelExportProperties) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(args.excelExportProperties.header)) {\n            this.addHeaderAndFooter(args.excelExportProperties.header, '', 'header', args.excelExportProperties.header.headerRows);\n        }\n        /** Fill data and export */\n        var workSheets = [];\n        for (var dataColl = 0; dataColl < dataCollections.length; dataColl++) {\n            var pivotValues = dataCollections[dataColl];\n            var colLen = 0;\n            var rowLen = pivotValues.length;\n            var formatList = this.parent.renderModule.getFormatList();\n            var maxLevel = 0;\n            for (var rCnt = 0; rCnt < rowLen; rCnt++) {\n                if (pivotValues[rCnt]) {\n                    this.actualrCnt++;\n                    colLen = pivotValues[rCnt].length;\n                    var cells = [];\n                    for (var cCnt = 0; cCnt < colLen; cCnt++) {\n                        if (pivotValues[rCnt][cCnt]) {\n                            var pivotCell = pivotValues[rCnt][cCnt];\n                            var field = (this.parent.dataSourceSettings.valueAxis === 'row' &&\n                                this.parent.dataType === 'olap' && pivotCell.rowOrdinal &&\n                                this.engine.tupRowInfo[pivotCell.rowOrdinal]) ?\n                                this.engine.tupRowInfo[pivotCell.rowOrdinal].measureName :\n                                pivotCell.actualText;\n                            var styles = (pivotCell.axis === 'row') ? { hAlign: 'Left', bold: true, wrapText: true } : { numberFormat: formatList[field], bold: false, wrapText: true };\n                            var headerStyle = { bold: true, vAlign: 'Center', wrapText: true, indent: cCnt === 0 ? pivotCell.level * 10 : 0 };\n                            if (!(pivotCell.level === -1 && !pivotCell.rowSpan)) {\n                                var aggMatrix = this.engine.aggregatedValueMatrix;\n                                var cellValue = pivotCell.axis === 'value' ? ((aggMatrix[rCnt] && aggMatrix[rCnt][cCnt]) ? aggMatrix[rCnt][cCnt] : (pivotCell.formattedText === '#DIV/0!' ? pivotCell.formattedText : pivotCell.value)) : pivotCell.formattedText;\n                                var isgetValuesHeader = ((this.parent.dataSourceSettings.rows.length === 0 && this.parent.dataSourceSettings.valueAxis === 'row')\n                                    || (this.parent.dataSourceSettings.columns.length === 0 && this.parent.dataSourceSettings.valueAxis === 'column'));\n                                if (pivotCell.type === 'grand sum' && !(this.parent.dataSourceSettings.values.length === 1 && this.parent.dataSourceSettings.valueAxis === 'row' && pivotCell.axis === 'column')) {\n                                    cellValue = isgetValuesHeader ? this.parent.getValuesHeader(pivotCell, 'grandTotal') : this.parent.localeObj.getConstant('grandTotal');\n                                }\n                                else if (pivotCell.type === 'sum') {\n                                    cellValue = cellValue.toString().replace('Total', this.parent.localeObj.getConstant('total'));\n                                }\n                                else {\n                                    cellValue = (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(pivotCell.valueSort) && (this.parent.localeObj.getConstant('grandTotal') + this.parent.dataSourceSettings.valueSortSettings.headerDelimiter + pivotCell.formattedText\n                                        === pivotCell.valueSort.levelName) && isgetValuesHeader) ? this.parent.getValuesHeader(pivotCell, 'value') : cellValue;\n                                }\n                                if (!(pivotCell.level === -1 && !pivotCell.rowSpan) && pivotCell.rowSpan !== 0) {\n                                    cells.push({\n                                        index: cCnt + 1, value: cellValue,\n                                        colSpan: pivotCell.colSpan, rowSpan: (pivotCell.rowSpan === -1 ? 1 : pivotCell.rowSpan)\n                                    });\n                                    var lastCell = cells[cells.length - 1];\n                                    if (pivotCell.axis === 'value') {\n                                        if (isNaN(pivotCell.value) || pivotCell.formattedText === '' ||\n                                            pivotCell.formattedText === undefined || (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(pivotCell.value)) {\n                                            lastCell.value = type === 'Excel' ? null : '';\n                                        }\n                                        styles.numberFormat = typeof cellValue === 'string' ? undefined : styles.numberFormat;\n                                        lastCell.style = styles;\n                                    }\n                                    else {\n                                        lastCell.style = headerStyle;\n                                        if (pivotCell.axis === 'row' && cCnt === 0) {\n                                            lastCell.style = styles;\n                                            if (this.parent.dataType === 'olap') {\n                                                var indent = this.parent.renderModule.indentCollection[rCnt];\n                                                lastCell.style.indent = indent * 2;\n                                                maxLevel = maxLevel > indent ? maxLevel : indent;\n                                            }\n                                            else {\n                                                var levelName = pivotCell.valueSort ? pivotCell.valueSort.levelName.toString() : '';\n                                                var memberPos = pivotCell.actualText ?\n                                                    pivotCell.actualText.toString().\n                                                        split(this.parent.dataSourceSettings.valueSortSettings.headerDelimiter).length : 0;\n                                                var levelPosition = levelName.\n                                                    split(this.parent.dataSourceSettings.valueSortSettings.headerDelimiter).length -\n                                                    (memberPos ? memberPos - 1 : memberPos);\n                                                var level = levelPosition ? (levelPosition - 1) : 0;\n                                                lastCell.style.indent = level * 2;\n                                                maxLevel = level > maxLevel ? level : maxLevel;\n                                            }\n                                        }\n                                    }\n                                    if (pivotCell.style || lastCell.style.backColor || lastCell.style.fontColor ||\n                                        lastCell.style.fontName || lastCell.style.fontSize) {\n                                        lastCell.style.backColor = lastCell.style.backColor ? lastCell.style.backColor\n                                            : pivotCell.style.backgroundColor;\n                                        lastCell.style.fontColor = lastCell.style.fontColor ? lastCell.style.fontColor\n                                            : pivotCell.style.color;\n                                        lastCell.style.fontName = lastCell.style.fontName ? lastCell.style.fontName\n                                            : pivotCell.style.fontFamily;\n                                        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(lastCell.style.fontSize) || !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(pivotCell.style.fontSize)) {\n                                            lastCell.style.fontSize = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(lastCell.style.fontSize) ? Number(lastCell.style.fontSize) : Number(pivotCell.style.fontSize.split('px')[0]);\n                                        }\n                                    }\n                                    lastCell.style.borders = { color: '#000000', lineStyle: 'thin' };\n                                    var excelHeaderQueryCellInfoArgs = void 0;\n                                    var excelQueryCellInfoArgs = void 0;\n                                    if (pivotCell.axis === 'column') {\n                                        excelHeaderQueryCellInfoArgs = {\n                                            style: headerStyle,\n                                            cell: pivotCell\n                                        };\n                                        this.parent.trigger(_common_base_constant__WEBPACK_IMPORTED_MODULE_1__.excelHeaderQueryCellInfo, excelHeaderQueryCellInfoArgs);\n                                    }\n                                    else {\n                                        excelQueryCellInfoArgs = {\n                                            style: styles,\n                                            cell: pivotCell,\n                                            column: undefined,\n                                            data: pivotValues,\n                                            value: cellValue\n                                        };\n                                        this.parent.trigger(_common_base_constant__WEBPACK_IMPORTED_MODULE_1__.excelQueryCellInfo, excelQueryCellInfoArgs);\n                                    }\n                                    lastCell.value = (pivotCell.axis === 'column') ? excelHeaderQueryCellInfoArgs.cell.formattedText : excelQueryCellInfoArgs.value;\n                                    lastCell.style = (pivotCell.axis === 'column') ? excelHeaderQueryCellInfoArgs.style : excelQueryCellInfoArgs.style;\n                                }\n                            }\n                            cCnt = cCnt + (pivotCell.colSpan ? (pivotCell.colSpan - 1) : 0);\n                        }\n                        else {\n                            var pivotCell = { formattedText: '' };\n                            var excelHeaderQueryCellInfoArgs = void 0;\n                            if (pivotCell) {\n                                excelHeaderQueryCellInfoArgs = {\n                                    style: undefined,\n                                    cell: pivotCell\n                                };\n                                this.parent.trigger(_common_base_constant__WEBPACK_IMPORTED_MODULE_1__.excelHeaderQueryCellInfo, excelHeaderQueryCellInfoArgs);\n                            }\n                            cells.push({\n                                index: cCnt + 1, colSpan: 1, rowSpan: 1, value: pivotCell.formattedText,\n                                style: excelHeaderQueryCellInfoArgs.style\n                            });\n                        }\n                    }\n                    this.rows.push({ index: this.actualrCnt, cells: cells });\n                }\n            }\n            if (isFooterSet) {\n                this.addHeaderAndFooter(exportProperties.footer, '', 'footer', exportProperties.footer.footerRows);\n            }\n            else if (!isFooterSet && footer !== '' && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(args.excelExportProperties)) {\n                this.addHeaderAndFooter({}, footer, 'footer', undefined);\n            }\n            else if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(args.excelExportProperties) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(args.excelExportProperties.footer)) {\n                this.addHeaderAndFooter(args.excelExportProperties.footer, '', 'footer', args.excelExportProperties.footer.footerRows);\n            }\n            var columns = [];\n            for (var cCnt = 0; cCnt < colLen; cCnt++) {\n                columns.push({ index: cCnt + 1, width: 100 });\n            }\n            if (maxLevel > 0) {\n                columns[0].width = 100 + (maxLevel * 20);\n            }\n            workSheets.push({ columns: columns, rows: this.rows });\n        }\n        var book = new _syncfusion_ej2_excel_export__WEBPACK_IMPORTED_MODULE_0__.Workbook({ worksheets: workSheets }, type === 'Excel' ? 'xlsx' : 'csv', undefined, this.parent.currencyCode);\n        var fileExtension = fileName.split('.').pop();\n        var blobData;\n        if (!isBlob) {\n            book.save(fileExtension === 'xlsx' || fileExtension === 'csv' ? fileName : (fileName + (type === 'Excel' ? '.xlsx' : '.csv')));\n        }\n        else {\n            blobData = book.saveAsBlob(fileExtension === 'xlsx' || type === 'Excel' ?\n                'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' : 'text/csv');\n        }\n        var exportCompleteEventArgs = {\n            type: type,\n            promise: isBlob ? blobData : null\n        };\n        this.parent.trigger(_common_base_constant__WEBPACK_IMPORTED_MODULE_1__.exportComplete, exportCompleteEventArgs);\n    };\n    ExcelExport.prototype.updateOlapPageSettings = function (isUpdate) {\n        this.parent.olapEngineModule.isExporting = isUpdate ? true : false;\n        if (!this.parent.exportSpecifiedPages) {\n            this.parent.olapEngineModule.pageSettings = isUpdate ? null : this.parent.olapEngineModule.pageSettings;\n            this.parent.olapEngineModule.isPaging = isUpdate ? false : true;\n        }\n        else {\n            this.parent.olapEngineModule.exportSpeciedPages = this.parent.exportSpecifiedPages = isUpdate ?\n                this.parent.exportSpecifiedPages : undefined;\n        }\n    };\n    /**\n     * To destroy the excel export module\n     *\n     * @returns {void}\n     * @hidden\n     */\n    ExcelExport.prototype.destroy = function () {\n        if (this.engine) {\n            this.engine = null;\n        }\n    };\n    return ExcelExport;\n}());\n\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-pivotview/src/pivotview/actions/excel-export.js?");

/***/ })

}]);