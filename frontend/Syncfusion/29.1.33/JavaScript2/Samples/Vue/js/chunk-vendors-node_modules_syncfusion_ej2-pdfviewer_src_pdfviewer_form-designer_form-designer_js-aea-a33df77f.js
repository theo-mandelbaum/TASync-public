"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkej2_vue_samples"] = self["webpackChunkej2_vue_samples"] || []).push([["chunk-vendors-node_modules_syncfusion_ej2-pdfviewer_src_pdfviewer_form-designer_form-designer_js-aea-a33df77f"],{

/***/ "./node_modules/@syncfusion/ej2-pdfviewer/src/pdfviewer/form-designer/form-designer.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-pdfviewer/src/pdfviewer/form-designer/form-designer.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FormDesigner: () => (/* binding */ FormDesigner)\n/* harmony export */ });\n/* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @syncfusion/ej2-base */ \"./node_modules/@syncfusion/ej2-base/index.js\");\n/* harmony import */ var _syncfusion_ej2_drawings__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @syncfusion/ej2-drawings */ \"./node_modules/@syncfusion/ej2-drawings/index.js\");\n/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../index */ \"./node_modules/@syncfusion/ej2-pdfviewer/src/pdfviewer/index.js\");\n/* harmony import */ var _syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @syncfusion/ej2-popups */ \"./node_modules/@syncfusion/ej2-popups/index.js\");\n/* harmony import */ var _syncfusion_ej2_navigations__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @syncfusion/ej2-navigations */ \"./node_modules/@syncfusion/ej2-navigations/index.js\");\n/* harmony import */ var _syncfusion_ej2_splitbuttons__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @syncfusion/ej2-splitbuttons */ \"./node_modules/@syncfusion/ej2-splitbuttons/index.js\");\n/* harmony import */ var _syncfusion_ej2_inputs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @syncfusion/ej2-inputs */ \"./node_modules/@syncfusion/ej2-inputs/index.js\");\n/* harmony import */ var _syncfusion_ej2_dropdowns__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @syncfusion/ej2-dropdowns */ \"./node_modules/@syncfusion/ej2-dropdowns/index.js\");\n/* harmony import */ var _syncfusion_ej2_buttons__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @syncfusion/ej2-buttons */ \"./node_modules/@syncfusion/ej2-buttons/index.js\");\n/* harmony import */ var _base_types__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../base/types */ \"./node_modules/@syncfusion/ej2-pdfviewer/src/pdfviewer/base/types.js\");\n/* harmony import */ var _drawing_drawing_util__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../drawing/drawing-util */ \"./node_modules/@syncfusion/ej2-pdfviewer/src/pdfviewer/drawing/drawing-util.js\");\n/* harmony import */ var _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @syncfusion/ej2-pdf */ \"./node_modules/@syncfusion/ej2-pdf/index.js\");\n/* harmony import */ var _base_pdfviewer_utlis__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../base/pdfviewer-utlis */ \"./node_modules/@syncfusion/ej2-pdfviewer/src/pdfviewer/base/pdfviewer-utlis.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * The `FormDesigner` module is used to handle form designer actions of PDF viewer.\n */\nvar FormDesigner = /** @class */ (function () {\n    /**\n     * @param {PdfViewer} viewer - It describes about the viewer\n     * @param {PdfViewerBase} base - It describes about the base\n     * @private\n     */\n    function FormDesigner(viewer, base) {\n        this.formFieldTooltips = [];\n        this.isFormFieldExistingInCollection = false;\n        this.multilineCheckboxCheckedState = false;\n        this.formFieldListItemCollection = [];\n        this.formFieldListItemDataSource = [];\n        this.isInitialField = false;\n        this.isSetFormFieldMode = false;\n        this.isAddFormFieldProgrammatically = false;\n        this.isAddFormFieldUi = false;\n        this.increasedSize = 5;\n        this.defaultZoomValue = 1;\n        this.defaultFontSize = 10;\n        this.signIndicatorPadding = 3;\n        this.signIndicatorMinimunFontSize = 1;\n        this.signatureFieldPropertyChanged = {\n            isReadOnlyChanged: false,\n            isRequiredChanged: false,\n            isVisibilityChanged: false,\n            isNameChanged: false,\n            isPrintChanged: false,\n            isTooltipChanged: false,\n            isThicknessChanged: false\n        };\n        this.initialFieldPropertyChanged = {\n            isReadOnlyChanged: false,\n            isRequiredChanged: false,\n            isVisibilityChanged: false,\n            isNameChanged: false,\n            isPrintChanged: false,\n            isTooltipChanged: false,\n            isThicknessChanged: false\n        };\n        this.textFieldPropertyChanged = {\n            isReadOnlyChanged: false,\n            isRequiredChanged: false,\n            isBackgroundColorChanged: false,\n            isBorderColorChanged: false,\n            isAlignmentChanged: false,\n            isFontSizeChanged: false,\n            isNameChanged: false,\n            isToolTipChanged: false,\n            isThicknessChanged: false,\n            isVisibilityChanged: false,\n            isPrintChanged: false,\n            isSelected: false,\n            isFontFamilyChanged: false,\n            isFontStyle: false,\n            isValueChanged: false,\n            isMaXLength: false,\n            isColorChanged: false,\n            isMultilineChanged: false\n        };\n        this.passwordFieldPropertyChanged = {\n            isReadOnlyChanged: false,\n            isRequiredChanged: false,\n            isBackgroundColorChanged: false,\n            isBorderColorChanged: false,\n            isAlignmentChanged: false,\n            isFontSizeChanged: false,\n            isNameChanged: false,\n            isToolTipChanged: false,\n            isThicknessChanged: false,\n            isVisibilityChanged: false,\n            isPrintChanged: false,\n            isSelected: false,\n            isFontFamilyChanged: false,\n            isFontStyle: false,\n            isValueChanged: false,\n            isMaXLength: false,\n            isColorChanged: false\n        };\n        this.checkBoxFieldPropertyChanged = {\n            isReadOnlyChanged: false,\n            isRequiredChanged: false,\n            isBackgroundColorChanged: false,\n            isBorderColorChanged: false,\n            isNameChanged: false,\n            isToolTipChanged: false,\n            isThicknessChanged: false,\n            isVisibilityChanged: false,\n            isPrintChanged: false,\n            isCheckedChanged: false,\n            isValueChanged: false\n        };\n        this.radioButtonFieldPropertyChanged = {\n            isReadOnlyChanged: false,\n            isRequiredChanged: false,\n            isBackgroundColorChanged: false,\n            isBorderColorChanged: false,\n            isNameChanged: false,\n            isToolTipChanged: false,\n            isThicknessChanged: false,\n            isVisibilityChanged: false,\n            isPrintChanged: false,\n            isSelectedChanged: false,\n            isValueChanged: false\n        };\n        this.dropdownFieldPropertyChanged = {\n            isReadOnlyChanged: false,\n            isRequiredChanged: false,\n            isBackgroundColorChanged: false,\n            isBorderColorChanged: false,\n            isAlignmentChanged: false,\n            isFontSizeChanged: false,\n            isNameChanged: false,\n            isToolTipChanged: false,\n            isThicknessChanged: false,\n            isVisibilityChanged: false,\n            isPrintChanged: false,\n            isSelected: false,\n            isFontFamilyChanged: false,\n            isFontStyle: false,\n            isColorChanged: false,\n            isOptionChanged: false\n        };\n        this.listBoxFieldPropertyChanged = {\n            isReadOnlyChanged: false,\n            isRequiredChanged: false,\n            isBackgroundColorChanged: false,\n            isBorderColorChanged: false,\n            isAlignmentChanged: false,\n            isFontSizeChanged: false,\n            isNameChanged: false,\n            isToolTipChanged: false,\n            isThicknessChanged: false,\n            isVisibilityChanged: false,\n            isPrintChanged: false,\n            isSelected: false,\n            isFontFamilyChanged: false,\n            isFontStyle: false,\n            isColorChanged: false,\n            isOptionChanged: false\n        };\n        /**\n         * @private\n         */\n        this.disableSignatureClickEvent = false;\n        /**\n         * @private\n         */\n        this.formFieldIndex = 0;\n        /**\n         * @private\n         */\n        this.formFieldIdIndex = 0;\n        /**\n         * @private\n         */\n        this.isProgrammaticSelection = false;\n        /**\n         * @private\n         */\n        this.isShapeCopied = false;\n        /**\n         * @private\n         */\n        this.isFormFieldSizeUpdated = false;\n        this.isDrawHelper = false;\n        this.isFormFieldUpdated = false;\n        /**\n         * @private\n         */\n        this.isPropertyDialogOpen = false;\n        this.pdfViewer = viewer;\n        this.pdfViewerBase = base;\n    }\n    /**\n     * @param {string} formFieldAnnotationType - It describes about the form field annotation type\n     * @param {PdfFormFieldBaseModel} obj - It describes about the object\n     * @param {Event} event - It describes about the event\n     * @private\n     * @returns {void}\n     */\n    FormDesigner.prototype.drawHelper = function (formFieldAnnotationType, obj, event) {\n        var textLayer = document.getElementById(this.pdfViewer.element.id + '_textLayer_' + this.pdfViewerBase.activeElements.activePageID);\n        var canvasElement = document.getElementById(this.pdfViewer.element.id + '_pageCanvas_' + this.pdfViewerBase.activeElements.activePageID);\n        if (canvasElement !== null && textLayer !== null) {\n            var zoomValue = this.pdfViewerBase.getZoomFactor();\n            var HtmlElementAttribute = {\n                'id': 'FormField_helper_html_element',\n                'class': 'foreign-object'\n            };\n            var bounds = this.updateFormFieldInitialSize(obj, formFieldAnnotationType);\n            var htmlElement = this.createHtmlElement('div', HtmlElementAttribute);\n            this.isDrawHelper = true;\n            if (formFieldAnnotationType === 'SignatureField' || formFieldAnnotationType === 'InitialField') {\n                htmlElement.appendChild(this.createSignatureDialog(this.pdfViewer, obj, bounds));\n            }\n            else if (formFieldAnnotationType === 'DropdownList') {\n                var element = { id: 'dropdown_helper' };\n                htmlElement.appendChild(this.createDropDownList(element, obj));\n            }\n            else if (formFieldAnnotationType === 'ListBox') {\n                var element = { id: 'listbox_helper' };\n                htmlElement.appendChild(this.createListBox(element, obj));\n            }\n            else {\n                htmlElement.appendChild(this.createInputElement(formFieldAnnotationType, obj, bounds));\n            }\n            textLayer.appendChild(htmlElement);\n            var point = this.pdfViewerBase.getMousePosition(event);\n            htmlElement.setAttribute('style', 'height:' + bounds.height * zoomValue + 'px; width:' + bounds.width * zoomValue + 'px;left:' + point.x * zoomValue + 'px; top:' + point.y * zoomValue + 'px;' +\n                'position:absolute;opacity: 0.5;');\n        }\n    };\n    /**\n     * @param {string} formFieldAnnotationType - It describes about the form field annotation type\n     * @param {DiagramHtmlElement} element - It describes about the diagram html element\n     * @param {PdfFormFieldBaseModel} drawingObject - It describes about the drawing object\n     * @param {number} pageIndex - It describes about the page index\n     * @param {PdfViewer} commandHandler - It describes about the command handler\n     * @param {string} fieldId - It describes about the field id\n     * @param {boolean} isAddedProgrammatically - It describes about the isAddedProgrammatically\n     * @private\n     * @returns {HTMLElement} - html element\n     */\n    FormDesigner.prototype.drawHTMLContent = function (formFieldAnnotationType, element, drawingObject, pageIndex, commandHandler, fieldId, isAddedProgrammatically) {\n        var textLayer = document.getElementById(this.pdfViewer.element.id + '_textLayer_' + pageIndex);\n        var canvasElement = document.getElementById(this.pdfViewer.element.id + '_pageCanvas_' + pageIndex);\n        var formFieldElement = document.getElementById('form_field_' + element.id + '_html_element');\n        if (formFieldElement === null && element !== null && canvasElement !== null && textLayer) {\n            var zoomValue = this.pdfViewerBase.getZoomFactor();\n            var parentHtmlElementAttribute = {\n                'id': 'form_field_' + element.id + '_html_element',\n                'class': 'foreign-object'\n            };\n            var parentHtmlElement = this.createHtmlElement('div', parentHtmlElementAttribute);\n            var HtmlElementAttribute = {\n                'id': element.id + '_html_element',\n                'class': 'foreign-object'\n            };\n            var htmlElement = this.createHtmlElement('div', HtmlElementAttribute);\n            if (drawingObject.fontFamily === 'TimesRoman') {\n                drawingObject.fontFamily = 'Times New Roman';\n            }\n            if (formFieldAnnotationType === 'SignatureField' || formFieldAnnotationType === 'InitialField') {\n                element.template = htmlElement.appendChild(this.createSignatureDialog(commandHandler, drawingObject));\n            }\n            else if (formFieldAnnotationType === 'DropdownList') {\n                element.template = htmlElement.appendChild(this.createDropDownList(element, drawingObject));\n            }\n            else if (formFieldAnnotationType === 'ListBox') {\n                element.template = htmlElement.appendChild(this.createListBox(element, drawingObject));\n            }\n            else {\n                element.template = htmlElement.appendChild(this.createInputElement(formFieldAnnotationType, drawingObject));\n            }\n            var divElement = document.createElement('div');\n            divElement.id = drawingObject.id + '_designer_name';\n            divElement.style.fontSize = this.defaultFontSize + 'px';\n            divElement.className = 'e-pv-show-designer-name';\n            if (this.pdfViewer.designerMode) {\n                divElement.innerHTML = drawingObject.name;\n                divElement.style.position = 'absolute';\n            }\n            else {\n                divElement.innerHTML = '';\n                divElement.style.position = 'initial';\n            }\n            if (formFieldAnnotationType === 'Checkbox' && (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice)) {\n                //Creating outer div for checkbox in mobile device\n                var bounds = drawingObject.bounds;\n                var outerDivHeight = bounds.height + this.increasedSize;\n                var outerDivWidth = bounds.width + this.increasedSize;\n                var outerDivAttribute = {\n                    'id': drawingObject.id + '_outer_div',\n                    'className': 'e-pv-checkbox-outer-div'\n                };\n                var outerDiv = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div', outerDivAttribute);\n                outerDiv.setAttribute('style', 'height:' + outerDivHeight * zoomValue + 'px; width:' + outerDivWidth * zoomValue + 'px;left:' + bounds.x * zoomValue + 'px; top:' + bounds.y * zoomValue + 'px;' +\n                    'position:absolute; opacity: 1;');\n                htmlElement.appendChild(divElement);\n                outerDiv.addEventListener('click', this.setCheckBoxState.bind(this));\n                parentHtmlElement.appendChild(htmlElement);\n                textLayer.appendChild(outerDiv);\n                outerDiv.appendChild(parentHtmlElement);\n            }\n            else {\n                htmlElement.appendChild(divElement);\n                parentHtmlElement.appendChild(htmlElement);\n                textLayer.appendChild(parentHtmlElement);\n            }\n            if (formFieldAnnotationType === 'RadioButton') {\n                if (document.getElementsByClassName('e-pv-radiobtn-span').length > 0) {\n                    var spanElement = document.getElementsByClassName('e-pv-radiobtn-span');\n                    for (var i = 0; i < spanElement.length; i++) {\n                        if (spanElement[parseInt(i.toString(), 10)].id.split('_')[0] === drawingObject.id) {\n                            var bounds = this.getCheckboxRadioButtonBounds(drawingObject);\n                            spanElement[parseInt(i.toString(), 10)].style.width = (bounds.width / 2) + 'px';\n                            spanElement[parseInt(i.toString(), 10)].style.height = (bounds.height / 2) + 'px';\n                            if (parseInt(spanElement[parseInt(i.toString(), 10)].style.width, 10) <= 1 ||\n                                parseInt(spanElement[parseInt(i.toString(), 10)].style.height, 10) <= 1) {\n                                spanElement[parseInt(i.toString(), 10)].style.width = '1px';\n                                spanElement[parseInt(i.toString(), 10)].style.height = '1px';\n                                spanElement[parseInt(i.toString(), 10)].style.margin = '1px';\n                            }\n                        }\n                    }\n                }\n            }\n            var point = (0,_syncfusion_ej2_drawings__WEBPACK_IMPORTED_MODULE_1__.cornersPointsBeforeRotation)(element).topLeft;\n            if (formFieldAnnotationType === 'Checkbox' && (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice)) {\n                htmlElement.setAttribute('style', 'height:' + (element.actualSize.height * zoomValue) + 'px; width:' + (element.actualSize.width * zoomValue) +\n                    'px;left:' + point.x * zoomValue + 'px; top:' + point.y * zoomValue + 'px;' +\n                    'transform:rotate(' + (element.rotateAngle + element.parentTransform) + 'deg);' +\n                    'pointer-events:' + ((this.pdfViewer.designerMode) ? 'none' : 'all')\n                    + ';visibility:' + ((element.visible) ? 'visible' : 'hidden') + ';opacity:' + element.style.opacity + ';');\n            }\n            else {\n                htmlElement.setAttribute('style', 'height:' + (element.actualSize.height * zoomValue) + 'px; width:' + (element.actualSize.width * zoomValue) +\n                    'px;left:' + point.x * zoomValue + 'px; top:' + point.y * zoomValue + 'px;' +\n                    'position:absolute;transform:rotate(' + (element.rotateAngle + element.parentTransform) + 'deg);' +\n                    'pointer-events:' + ((this.pdfViewer.designerMode) ? 'none' : 'all')\n                    + ';visibility:' + ((element.visible) ? 'visible' : 'hidden') + ';opacity:' + element.style.opacity + ';');\n            }\n            this.updateFormDesignerFieldInSessionStorage(point, element, formFieldAnnotationType, drawingObject);\n            if (formFieldAnnotationType === 'SignatureField' || formFieldAnnotationType === 'InitialField') {\n                if (drawingObject.value) {\n                    var elementId = this.pdfViewer.drawing.copiedElementID + '_content';\n                    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.pdfViewer.nameTable[\"\" + elementId])) {\n                        var value = this.pdfViewer.nameTable[\"\" + elementId].value;\n                        var signatureType = (value.indexOf('base64')) > -1 ? 'Image' : ((value.startsWith('M') && value.split(',')[1].split(' ')[1].startsWith('L')) ? 'Path' : 'Type');\n                        this.pdfViewer.formFieldsModule.drawSignature(signatureType, value, element.template, drawingObject.fontFamily);\n                    }\n                }\n            }\n            var field = {\n                name: drawingObject.name, id: drawingObject.id, value: drawingObject.value, fontFamily: drawingObject.fontFamily,\n                fontSize: drawingObject.fontSize, fontStyle: drawingObject.fontStyle,\n                color: drawingObject.color, backgroundColor: drawingObject.backgroundColor, alignment: drawingObject.alignment,\n                isReadonly: drawingObject.isReadonly, visibility: drawingObject.visibility,\n                maxLength: drawingObject.maxLength, isRequired: drawingObject.isRequired, isPrint: drawingObject.isPrint,\n                rotation: drawingObject.rotateAngle, tooltip: drawingObject.tooltip,\n                borderColor: drawingObject.borderColor, thickness: drawingObject.thickness, options: drawingObject.options,\n                pageNumber: drawingObject.pageNumber, isChecked: drawingObject.isChecked,\n                isSelected: drawingObject.isSelected, customData: drawingObject.customData, bounds: drawingObject.bounds\n            };\n            if (!this.pdfViewer.isFormFieldsLoaded || isAddedProgrammatically) {\n                this.pdfViewerBase.updateDocumentEditedProperty(true);\n            }\n            if (this.isSetFormFieldMode || isAddedProgrammatically) {\n                var pageIndex_1 = this.pdfViewerBase.activeElements.activePageID ?\n                    this.pdfViewerBase.activeElements.activePageID : field.pageNumber - 1;\n                this.pdfViewer.fireFormFieldAddEvent('formFieldAdd', field, pageIndex_1);\n            }\n            this.isSetFormFieldMode = false;\n        }\n        else {\n            var point = (0,_syncfusion_ej2_drawings__WEBPACK_IMPORTED_MODULE_1__.cornersPointsBeforeRotation)(element).topLeft;\n            this.updateFormDesignerFieldInSessionStorage(point, element, formFieldAnnotationType, drawingObject);\n        }\n        return element.template;\n    };\n    /**\n     * @param {PointModel} point - It describes about the point\n     * @param {DiagramHtmlElement} element - It describes about the element\n     * @param {string} formFieldType - It describes about the form field type\n     * @param {PdfFormFieldBaseModel} drawingObject - It describes about the drawing object\n     * @private\n     * @returns {void}\n     */\n    FormDesigner.prototype.updateFormDesignerFieldInSessionStorage = function (point, element, formFieldType, drawingObject) {\n        var zoomValue = this.pdfViewerBase.getZoomFactor();\n        var formDesignObj = {\n            id: element.id, lineBound: { X: point.x * zoomValue, Y: point.y * zoomValue, Width: element.actualSize.width * zoomValue,\n                Height: element.actualSize.height * zoomValue },\n            name: drawingObject.name, zoomValue: zoomValue, pageNumber: drawingObject.pageNumber, value: drawingObject.value,\n            formFieldAnnotationType: formFieldType, isMultiline: drawingObject.isMultiline,\n            signatureType: drawingObject.signatureType, signatureBound: drawingObject.signatureBound,\n            fontFamily: drawingObject.fontFamily, fontSize: drawingObject.fontSize, fontStyle: drawingObject.fontStyle,\n            fontColor: this.getRgbCode(drawingObject.color),\n            borderColor: this.getRgbCode(drawingObject.borderColor), thickness: drawingObject.thickness,\n            backgroundColor: this.getRgbCode(drawingObject.backgroundColor),\n            textAlign: drawingObject.alignment, isChecked: drawingObject.isChecked, isSelected: drawingObject.isSelected,\n            isReadonly: drawingObject.isReadonly, font: {\n                isBold: drawingObject.font.isBold, isItalic: drawingObject.font.isItalic, isStrikeout: drawingObject.font.isStrikeout,\n                isUnderline: drawingObject.font.isUnderline\n            }, selectedIndex: drawingObject.selectedIndex, radiobuttonItem: null,\n            option: drawingObject.options ? drawingObject.options : [], visibility: drawingObject.visibility,\n            maxLength: drawingObject.maxLength, isRequired: drawingObject.isRequired, isPrint: drawingObject.isPrint,\n            rotation: drawingObject.rotateAngle, tooltip: drawingObject.tooltip,\n            insertSpaces: drawingObject.insertSpaces, customData: drawingObject.customData\n        };\n        if (formDesignObj.formFieldAnnotationType === 'RadioButton') {\n            formDesignObj.radiobuttonItem = [];\n            formDesignObj.radiobuttonItem.push({\n                id: element.id, lineBound: { X: point.x * zoomValue, Y: point.y * zoomValue,\n                    Width: element.actualSize.width * zoomValue, Height: element.actualSize.height * zoomValue },\n                name: drawingObject.name, zoomValue: zoomValue, pageNumber: drawingObject.pageNumber,\n                value: drawingObject.value, formFieldAnnotationType: formFieldType,\n                fontFamily: drawingObject.fontFamily, fontSize: drawingObject.fontSize, fontStyle: drawingObject.fontStyle,\n                fontColor: this.getRgbCode(drawingObject.color),\n                borderColor: this.getRgbCode(drawingObject.borderColor), thickness: drawingObject.thickness,\n                backgroundColor: this.getRgbCode(drawingObject.backgroundColor),\n                textAlign: drawingObject.alignment, isChecked: drawingObject.isChecked, isSelected: drawingObject.isSelected,\n                isReadonly: drawingObject.isReadonly, visibility: drawingObject.visibility,\n                maxLength: drawingObject.maxLength, isRequired: drawingObject.isRequired, isPrint: drawingObject.isPrint,\n                rotation: 0, tooltip: drawingObject.tooltip\n            });\n        }\n        var isItemAdd = this.getRadioButtonItem(formDesignObj, drawingObject);\n        if (!isItemAdd) {\n            for (var i = 0; i < this.pdfViewerBase.formFieldCollection.length; i++) {\n                var formFieldElement = this.pdfViewerBase.formFieldCollection[parseInt(i.toString(), 10)];\n                if (formFieldElement['Key'] === formDesignObj.id) {\n                    this.pdfViewerBase.formFieldCollection.splice(i, 1);\n                    this.pdfViewerBase.formFieldCollection.push({ Key: element.id, FormField: formDesignObj });\n                    this.isFormFieldExistingInCollection = true;\n                }\n            }\n            if (!this.isFormFieldExistingInCollection) {\n                this.pdfViewerBase.formFieldCollection.push({ Key: element.id, FormField: formDesignObj });\n            }\n            this.pdfViewerBase.setItemInSessionStorage(this.pdfViewerBase.formFieldCollection, '_formDesigner');\n            this.isFormFieldExistingInCollection = false;\n            if (this.pdfViewerBase.formFieldCollection.length > 0) {\n                this.pdfViewerBase.enableFormFieldButton(true);\n            }\n            else {\n                this.pdfViewerBase.enableFormFieldButton(false);\n            }\n        }\n    };\n    FormDesigner.prototype.getRadioButtonItem = function (radiobutton, formFieldProperty) {\n        var data = this.pdfViewerBase.getItemFromSessionStorage('_formDesigner');\n        var isItemAdd = false;\n        if (data) {\n            var formFieldsData = JSON.parse(data);\n            for (var i = 0; i < formFieldsData.length; i++) {\n                var currentData = formFieldsData[parseInt(i.toString(), 10)];\n                var radiobuttonItem = void 0;\n                if (radiobutton.formFieldAnnotationType === 'RadioButton') {\n                    if (radiobutton.radiobuttonItem && currentData.FormField.radiobuttonItem) {\n                        for (var m = 0; m < currentData.FormField.radiobuttonItem.length; m++) {\n                            if (currentData.FormField.radiobuttonItem[parseInt(m.toString(), 10)].id === radiobutton.id) {\n                                radiobuttonItem = {\n                                    lineBound: radiobutton.lineBound, id: radiobutton.id,\n                                    name: radiobutton.name, zoomValue: radiobutton.zoomValue, pageNumber: radiobutton.pageNumber,\n                                    value: radiobutton.value, formFieldAnnotationType: radiobutton.formFieldAnnotationType,\n                                    fontFamily: radiobutton.fontFamily, fontSize: radiobutton.fontSize,\n                                    fontStyle: radiobutton.fontStyle, fontColor: this.getRgbCode(formFieldProperty.color),\n                                    borderColor: this.getRgbCode(formFieldProperty.borderColor),\n                                    thickness: formFieldProperty.thickness,\n                                    backgroundColor: this.getRgbCode(formFieldProperty.backgroundColor),\n                                    textAlign: radiobutton.textAlign, isChecked: radiobutton.isChecked,\n                                    isSelected: radiobutton.isSelected,\n                                    isReadonly: radiobutton.isReadonly, visibility: radiobutton.visibility,\n                                    maxLength: radiobutton.maxLength, isRequired: radiobutton.isRequired, isPrint: radiobutton.isPrint,\n                                    rotation: 0, tooltip: radiobutton.tooltip\n                                };\n                                currentData.FormField.radiobuttonItem.splice(m, 1);\n                                currentData.FormField.radiobuttonItem.push(radiobuttonItem);\n                                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.pdfViewerBase.formFieldCollection[parseInt(i.toString(), 10)])) {\n                                    if (this.pdfViewerBase.formFieldCollection[parseInt(i.toString(), 10)].FormField.name ===\n                                        currentData.FormField.name) {\n                                        this.pdfViewerBase.formFieldCollection[parseInt(i.toString(), 10)].FormField.radiobuttonItem =\n                                            currentData.FormField.radiobuttonItem;\n                                        isItemAdd = true;\n                                    }\n                                }\n                                break;\n                            }\n                            else {\n                                if (radiobutton.formFieldAnnotationType === currentData.FormField.formFieldAnnotationType &&\n                                    radiobutton.name === currentData.FormField.name) {\n                                    radiobuttonItem = {\n                                        lineBound: radiobutton.lineBound, id: radiobutton.id,\n                                        name: radiobutton.name, zoomValue: radiobutton.zoomValue, pageNumber: radiobutton.pageNumber,\n                                        value: radiobutton.value, formFieldAnnotationType: radiobutton.formFieldAnnotationType,\n                                        fontFamily: radiobutton.fontFamily, fontSize: radiobutton.fontSize,\n                                        fontStyle: radiobutton.fontStyle, fontColor: this.getRgbCode(formFieldProperty.color),\n                                        borderColor: this.getRgbCode(formFieldProperty.borderColor),\n                                        thickness: formFieldProperty.thickness,\n                                        backgroundColor: this.getRgbCode(formFieldProperty.backgroundColor),\n                                        textAlign: radiobutton.textAlign, isChecked: radiobutton.isChecked,\n                                        isSelected: radiobutton.isSelected,\n                                        isReadonly: radiobutton.isReadonly, visibility: radiobutton.visibility,\n                                        maxLength: radiobutton.maxLength, isRequired: radiobutton.isRequired,\n                                        isPrint: radiobutton.isPrint, rotation: 0, tooltip: radiobutton.tooltip\n                                    };\n                                    var isContainsRadiobuttonItem = false;\n                                    for (var i_1 = 0; i_1 < currentData.FormField.radiobuttonItem.length; i_1++) {\n                                        if (currentData.FormField.radiobuttonItem[parseInt(i_1.toString(), 10)].id === radiobuttonItem.id) {\n                                            currentData.FormField.radiobuttonItem[parseInt(i_1.toString(), 10)] = radiobuttonItem;\n                                            isContainsRadiobuttonItem = true;\n                                            break;\n                                        }\n                                    }\n                                    if (!isContainsRadiobuttonItem) {\n                                        currentData.FormField.radiobuttonItem.push(radiobuttonItem);\n                                    }\n                                    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.pdfViewerBase.formFieldCollection[parseInt(i.toString(), 10)])) {\n                                        this.pdfViewerBase.formFieldCollection[parseInt(i.toString(), 10)].FormField.radiobuttonItem =\n                                            currentData.FormField.radiobuttonItem;\n                                        isItemAdd = true;\n                                        for (var l = 0; l < this.pdfViewerBase.formFieldCollection.length; l++) {\n                                            var formFieldElement = this.pdfViewerBase.formFieldCollection[parseInt(l.toString(), 10)];\n                                            if (formFieldElement['Key'] === radiobuttonItem.id) {\n                                                this.pdfViewerBase.formFieldCollection.splice(l, 1);\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            if (isItemAdd) {\n                this.pdfViewerBase.setItemInSessionStorage(this.pdfViewerBase.formFieldCollection, '_formDesigner');\n            }\n        }\n        return isItemAdd;\n    };\n    FormDesigner.prototype.getRgbCode = function (colorString) {\n        // eslint-disable-next-line\n        if (!colorString.match(/#([a-z0-9]+)/gi) && !colorString.match(/^rgba?\\((\\d+),\\s*(\\d+),\\s*(\\d+)(?:,\\s*(\\d+(?:\\.\\d+)?))?\\)$/)) {\n            var colorCode = this.nameToHash(colorString);\n            if (colorCode !== '') {\n                colorString = colorCode;\n            }\n        }\n        var stringArray = colorString.split(',');\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(stringArray[1])) {\n            colorString = this.getValue(colorString, 'rgba');\n            stringArray = colorString.split(',');\n        }\n        var r = parseInt(stringArray[0].split('(')[1], 10);\n        var g = parseInt(stringArray[1], 10);\n        var b = parseInt(stringArray[2], 10);\n        var a = parseFloat(stringArray[3]) * 100;\n        if (isNaN(a)) {\n            a = 0;\n        }\n        return { r: r, g: g, b: b, a: a };\n    };\n    /**\n     * @param {string} colour -It describes about the color\n     * @private\n     * @returns {string} - string\n     */\n    FormDesigner.prototype.nameToHash = function (colour) {\n        var colours = {\n            'aliceblue': '#f0f8ff', 'antiquewhite': '#faebd7', 'aqua': '#00ffff', 'aquamarine': '#7fffd4', 'azure': '#f0ffff',\n            'beige': '#f5f5dc', 'bisque': '#ffe4c4', 'black': '#000000', 'blanchedalmond': '#ffebcd', 'blue': '#0000ff',\n            'blueviolet': '#8a2be2', 'brown': '#a52a2a', 'burlywood': '#deb887', 'yellow': '#ffff00', 'yellowgreen': '#9acd32',\n            'cadetblue': '#5f9ea0', 'chartreuse': '#7fff00', 'chocolate': '#d2691e', 'coral': '#ff7f50',\n            'cornflowerblue': '#6495ed', 'cornsilk': '#fff8dc', 'crimson': '#dc143c',\n            'cyan': '#00ffff', 'darkblue': '#00008b', 'darkcyan': '#008b8b', 'darkgoldenrod': '#b8860b', 'darkgray': '#a9a9a9',\n            'darkred': '#8b0000', 'darksalmon': '#e9967a', 'darkgreen': '#006400', 'darkkhaki': '#bdb76b',\n            'darkmagenta': '#8b008b', 'darkolivegreen': '#556b2f', 'darkorange': '#ff8c00', 'darkorchid': '#9932cc',\n            'darkseagreen': '#8fbc8f', 'darkslateblue': '#483d8b', 'darkslategray': '#2f4f4f', 'darkturquoise': '#00ced1',\n            'darkviolet': '#9400d3', 'deeppink': '#ff1493', 'deepskyblue': '#00bfff', 'dimgray': '#696969',\n            'dodgerblue': '#1e90ff', 'firebrick': '#b22222', 'floralwhite': '#fffaf0',\n            'forestgreen': '#228b22', 'fuchsia': '#ff00ff', 'gainsboro': '#dcdcdc', 'ghostwhite': '#f8f8ff',\n            'gold': '#ffd700', 'goldenrod': '#daa520', 'gray': '#808080', 'green': '#008000',\n            'greenyellow': '#adff2f', 'honeydew': '#f0fff0', 'hotpink': '#ff69b4', 'indianred ': '#cd5c5c',\n            'mediumorchid': '#ba55d3', 'mediumpurple': '#9370d8', 'indigo': '#4b0082', 'ivory': '#fffff0',\n            'navy': '#000080', 'oldlace': '#fdf5e6', 'olive': '#808000', 'khaki': '#f0e68c',\n            'lavender': '#e6e6fa', 'lavenderblush': '#fff0f5', 'lawngreen': '#7cfc00', 'lemonchiffon': '#fffacd',\n            'lightblue': '#add8e6', 'lightcoral': '#f08080', 'lightcyan': '#e0ffff',\n            'lightgoldenrodyellow': '#fafad2', 'lightgrey': '#d3d3d3', 'lightgreen': '#90ee90',\n            'lightpink': '#ffb6c1', 'lightsalmon': '#ffa07a', 'lightseagreen': '#20b2aa',\n            'lightskyblue': '#87cefa', 'lightslategray': '#778899', 'lightsteelblue': '#b0c4de',\n            'lightyellow': '#ffffe0', 'lime': '#00ff00', 'limegreen': '#32cd32', 'linen': '#faf0e6',\n            'magenta': '#ff00ff', 'maroon': '#800000', 'mediumaquamarine': '#66cdaa', 'mediumblue': '#0000cd',\n            'mediumseagreen': '#3cb371', 'mediumslateblue': '#7b68ee', 'mediumspringgreen': '#00fa9a',\n            'mediumturquoise': '#48d1cc', 'mediumvioletred': '#c71585', 'midnightblue': '#191970',\n            'mintcream': '#f5fffa', 'mistyrose': '#ffe4e1', 'moccasin': '#ffe4b5', 'navajowhite': '#ffdead',\n            'rebeccapurple': '#663399', 'red': '#ff0000', 'rosybrown': '#bc8f8f', 'royalblue': '#4169e1',\n            'olivedrab': '#6b8e23', 'orange': '#ffa500', 'orangered': '#ff4500', 'orchid': '#da70d6',\n            'palegoldenrod': '#eee8aa', 'palegreen': '#98fb98', 'paleturquoise': '#afeeee',\n            'palevioletred': '#d87093', 'papayawhip': '#ffefd5', 'peachpuff': '#ffdab9', 'peru': '#cd853f',\n            'wheat': '#f5deb3', 'white': '#ffffff', 'whitesmoke': '#f5f5f5', 'pink': '#ffc0cb', 'plum': '#dda0dd',\n            'steelblue': '#4682b4', 'violet': '#ee82ee', 'powderblue': '#b0e0e6', 'purple': '#800080',\n            'saddlebrown': '#8b4513', 'salmon': '#fa8072', 'sandybrown': '#f4a460', 'seagreen': '#2e8b57',\n            'seashell': '#fff5ee', 'sienna': '#a0522d', 'silver': '#c0c0c0', 'skyblue': '#87ceeb',\n            'slateblue': '#6a5acd', 'slategray': '#708090', 'snow': '#fffafa', 'springgreen': '#00ff7f',\n            'tan': '#d2b48c', 'teal': '#008080', 'thistle': '#d8bfd8', 'tomato': '#ff6347', 'turquoise': '#40e0d0'\n        };\n        if (typeof colours[colour.toLowerCase()] !== 'undefined') {\n            return colours[colour.toLowerCase()];\n        }\n        return '';\n    };\n    /**\n     * @param {string} value - It describes about the value\n     * @param {string} type - It describes about the type\n     * @private\n     * @returns {string} - string\n     */\n    FormDesigner.prototype.getValue = function (value, type) {\n        type = !type ? 'hex' : type.toLowerCase();\n        if (value[0] === 'r') {\n            var cValue = this.convertRgbToNumberArray(value);\n            if (type === 'hex' || type === 'hexa') {\n                var hex = this.rgbToHex(cValue);\n                return type === 'hex' ? hex.slice(0, 7) : hex;\n            }\n            else {\n                if (type === 'hsv') {\n                    // eslint-disable-next-line\n                    return this.convertToHsvString(this.rgbToHsv.apply(this, cValue.slice(0, 3)));\n                }\n                else {\n                    if (type === 'hsva') {\n                        // eslint-disable-next-line\n                        return this.convertToHsvString(this.rgbToHsv.apply(this, cValue));\n                    }\n                    else {\n                        return 'null';\n                    }\n                }\n            }\n        }\n        else {\n            if (value[0] === 'h') {\n                // eslint-disable-next-line\n                var cValue = this.hsvToRgb.apply(this, this.convertRgbToNumberArray(value));\n                if (type === 'rgba') {\n                    return this.convertToRgbString(cValue);\n                }\n                else {\n                    if (type === 'hex' || type === 'hexa') {\n                        var hex = this.rgbToHex(cValue);\n                        return type === 'hex' ? hex.slice(0, 7) : hex;\n                    }\n                    else {\n                        if (type === 'rgb') {\n                            return this.convertToRgbString(cValue.slice(0, 3));\n                        }\n                        else {\n                            return 'null';\n                        }\n                    }\n                }\n            }\n            else {\n                value = this.roundValue(value);\n                var rgb = this.hexToRgb(value);\n                if (type === 'rgb' || type === 'hsv') {\n                    rgb = rgb.slice(0, 3);\n                }\n                if (type === 'rgba' || type === 'rgb') {\n                    return this.convertToRgbString(rgb);\n                }\n                else {\n                    if (type === 'hsva' || type === 'hsv') {\n                        // eslint-disable-next-line\n                        return this.convertToHsvString(this.rgbToHsv.apply(this, rgb));\n                    }\n                    else {\n                        if (type === 'hex') {\n                            return value.slice(0, 7);\n                        }\n                        else {\n                            if (type === 'a') {\n                                return rgb[3].toString();\n                            }\n                            else {\n                                return 'null';\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    };\n    FormDesigner.prototype.convertRgbToNumberArray = function (value) {\n        return (value.slice(value.indexOf('(') + 1, value.indexOf(')'))).split(',').map(function (n, i) {\n            return (i !== 3) ? parseInt(n, 10) : parseFloat(n);\n        });\n    };\n    FormDesigner.prototype.convertToRgbString = function (rgb) {\n        return rgb.length ? rgb.length === 4 ? 'rgba(' + rgb.join() + ')' : 'rgb(' + rgb.join() + ')' : '';\n    };\n    FormDesigner.prototype.convertToHsvString = function (hsv) {\n        return hsv.length === 4 ? 'hsva(' + hsv.join() + ')' : 'hsv(' + hsv.join() + ')';\n    };\n    FormDesigner.prototype.roundValue = function (value) {\n        if (!value) {\n            return '';\n        }\n        if (value[0] !== '#') {\n            value = '#' + value;\n        }\n        var len = value.length;\n        if (len === 4) {\n            value += 'f';\n            len = 5;\n        }\n        if (len === 5) {\n            var tempValue = '';\n            for (var i = 1, len_1 = value.length; i < len_1; i++) {\n                tempValue += (value.charAt(i) + value.charAt(i));\n            }\n            value = '#' + tempValue;\n            len = 9;\n        }\n        if (len === 7) {\n            value += 'ff';\n        }\n        return value;\n    };\n    FormDesigner.prototype.hexToRgb = function (hex) {\n        if (!hex) {\n            return [];\n        }\n        hex = hex.trim();\n        if (hex.length !== 9) {\n            hex = this.roundValue(hex);\n        }\n        var opacity = Number((parseInt(hex.slice(-2), 16) / 255).toFixed(2));\n        hex = hex.slice(1, 7);\n        var bigInt = parseInt(hex, 16);\n        var h = [];\n        h.push((bigInt >> 16) & 255);\n        h.push((bigInt >> 8) & 255);\n        h.push(bigInt & 255);\n        h.push(opacity);\n        return h;\n    };\n    FormDesigner.prototype.rgbToHsv = function (r, g, b, opacity) {\n        r /= 255;\n        g /= 255;\n        b /= 255;\n        var max = Math.max(r, g, b);\n        var min = Math.min(r, g, b);\n        var h;\n        var v = max;\n        var d = max - min;\n        var s = max === 0 ? 0 : d / max;\n        if (max === min) {\n            h = 0;\n        }\n        else {\n            switch (max) {\n                case r:\n                    h = (g - b) / d + (g < b ? 6 : 0);\n                    break;\n                case g:\n                    h = (b - r) / d + 2;\n                    break;\n                case b:\n                    h = (r - g) / d + 4;\n                    break;\n            }\n            h /= 6;\n        }\n        var hsv = [Math.round(h * 360), Math.round(s * 1000) / 10, Math.round(v * 1000) / 10];\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(opacity)) {\n            hsv.push(opacity);\n        }\n        return hsv;\n    };\n    FormDesigner.prototype.hsvToRgb = function (h, s, v, opacity) {\n        var r;\n        var g;\n        var b;\n        s /= 100;\n        v /= 100;\n        if (s === 0) {\n            r = g = b = v;\n            return [Math.round(r * 255), Math.round(g * 255), Math.round(b * 255), opacity];\n        }\n        h /= 60;\n        var i = Math.floor(h);\n        var f = h - i;\n        var p = v * (1 - s);\n        var q = v * (1 - s * f);\n        var t = v * (1 - s * (1 - f));\n        switch (i) {\n            case 0:\n                r = v;\n                g = t;\n                b = p;\n                break;\n            case 1:\n                r = q;\n                g = v;\n                b = p;\n                break;\n            case 2:\n                r = p;\n                g = v;\n                b = t;\n                break;\n            case 3:\n                r = p;\n                g = q;\n                b = v;\n                break;\n            case 4:\n                r = t;\n                g = p;\n                b = v;\n                break;\n            default:\n                r = v;\n                g = p;\n                b = q;\n        }\n        var rgb = [Math.round(r * 255), Math.round(g * 255), Math.round(b * 255)];\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(opacity)) {\n            rgb.push(opacity);\n        }\n        return rgb;\n    };\n    FormDesigner.prototype.rgbToHex = function (rgb) {\n        return rgb.length ? ('#' + this.hex(rgb[0]) + this.hex(rgb[1]) + this.hex(rgb[2]) +\n            (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(rgb[3]) ? (rgb[3] !== 0 ? (Math.round(rgb[3] * 255) + 0x10000).toString(16).substr(-2) : '00') : '')) : '';\n    };\n    /**\n     * @param {number} pageNumber - It describes about the page number\n     * @param {HTMLElement} canvas - It describes about the html element\n     * @private\n     * @returns {void}\n     */\n    FormDesigner.prototype.updateCanvas = function (pageNumber, canvas) {\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(canvas)) {\n            canvas = this.pdfViewerBase.getAnnotationCanvas('_annotationCanvas_', pageNumber);\n            var zoom = this.pdfViewerBase.getZoomFactor();\n            var ratio = this.pdfViewerBase.getZoomRatio(zoom);\n            if (canvas) {\n                var width = this.pdfViewerBase.pageSize[parseInt(pageNumber.toString(), 10)].width;\n                var height = this.pdfViewerBase.pageSize[parseInt(pageNumber.toString(), 10)].height;\n                canvas.width = width * ratio;\n                canvas.height = height * ratio;\n                canvas.style.width = width * zoom + 'px';\n                canvas.style.height = height * zoom + 'px';\n            }\n        }\n        this.pdfViewer.drawing.refreshCanvasDiagramLayer(canvas, pageNumber);\n    };\n    /**\n     * @param {number} pageIndex - It describes about the page index\n     * @private\n     * @returns {void}\n     */\n    FormDesigner.prototype.rerenderFormFields = function (pageIndex) {\n        var _this = this;\n        var zoomValue = this.pdfViewerBase.getZoomFactor();\n        var data = this.pdfViewerBase.getItemFromSessionStorage('_formDesigner');\n        var signatureValueRender = false;\n        if (data) {\n            var formFieldsData = JSON.parse(data);\n            if (formFieldsData[0] === '[') {\n                formFieldsData = JSON.parse(formFieldsData);\n            }\n            var textLayer = document.getElementById(this.pdfViewer.element.id + '_textLayer_' + pageIndex);\n            var canvasElement = document.getElementById(this.pdfViewer.element.id + '_pageCanvas_' + pageIndex);\n            if (formFieldsData !== null && canvasElement !== null && textLayer !== null) {\n                var _loop_1 = function (i) {\n                    var currentData = formFieldsData[parseInt(i.toString(), 10)].FormField;\n                    if (currentData.pageNumber === pageIndex + 1) {\n                        var domElementId = document.getElementById('form_field_' + currentData.id + '_html_element');\n                        if (!domElementId) {\n                            var signatureField = this_1.pdfViewer.nameTable[formFieldsData[parseInt(i.toString(), 10)].Key.split('_')[0]];\n                            var element_1 = signatureField.wrapper.children[0];\n                            var obj = this_1.pdfViewer.formFieldCollections.filter(function (field) { return currentData.id.split('_')[0] === field.id; });\n                            if (element_1 && obj.length > 0 && obj[0].visibility === 'visible') {\n                                if (currentData.formFieldAnnotationType === 'RadioButton') {\n                                    for (var j = 0; j < currentData.radiobuttonItem.length; j++) {\n                                        signatureField = this_1.pdfViewer.nameTable[currentData.radiobuttonItem[parseInt(j.toString(), 10)].id.split('_')[0]];\n                                        element_1 = signatureField.wrapper.children[0];\n                                        currentData.radiobuttonItem[parseInt(j.toString(), 10)] =\n                                            this_1.renderFormFieldsInZooming(element_1, currentData.radiobuttonItem[parseInt(j.toString(), 10)], signatureField, zoomValue);\n                                        this_1.pdfViewerBase.formFieldCollection[parseInt(i.toString(), 10)].\n                                            FormField.radiobuttonItem[parseInt(j.toString(), 10)].lineBound =\n                                            currentData.radiobuttonItem[parseInt(j.toString(), 10)].lineBound;\n                                        this_1.pdfViewerBase.formFieldCollection[parseInt(i.toString(), 10)].\n                                            FormField.radiobuttonItem[parseInt(j.toString(), 10)].zoomValue = zoomValue;\n                                    }\n                                }\n                                else {\n                                    var filteredField = this_1.pdfViewerBase.formFieldCollection.filter(function (field) {\n                                        return field.FormField.id === currentData.id;\n                                    });\n                                    if (currentData && currentData.value === '') {\n                                        currentData.value = filteredField[0] ? filteredField[0].FormField.value : '';\n                                        currentData.signatureType = filteredField[0] ? filteredField[0].FormField.signatureType : '';\n                                    }\n                                    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(currentData)) {\n                                        currentData.visibility = obj[0].visibility;\n                                        filteredField[0].FormField.visibility = obj[0].visibility;\n                                    }\n                                    var zoomCurrentData = this_1.renderFormFieldsInZooming(element_1, currentData, signatureField, zoomValue);\n                                    if (currentData.formFieldAnnotationType === 'SignatureField' || currentData.formFieldAnnotationType === 'InitialField') {\n                                        // eslint-disable-next-line\n                                        var proxy_1 = this_1;\n                                        formFieldsData.filter(function (item) {\n                                            if (item.FormField.name === currentData.name && item.FormField.id !== currentData.id && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(proxy_1.pdfViewer.nameTable[item.FormField.id]) && proxy_1.pdfViewer.nameTable[item.FormField.id].value !== '') {\n                                                currentData.value = proxy_1.pdfViewer.nameTable[item.FormField.id].value;\n                                                currentData.signatureType = item.FormField.signatureType === 'Text' ? 'Type' : item.FormField.signatureType;\n                                                if (currentData.value !== '') {\n                                                    currentData.signatureBound = item.FormField.signatureBound;\n                                                }\n                                            }\n                                        });\n                                        if (((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(proxy_1.pdfViewer.nameTable[currentData.id])\n                                            || proxy_1.pdfViewer.nameTable[currentData.id].value === '') && currentData.value !== '') {\n                                            this_1.pdfViewer.formFieldsModule.drawSignature(currentData.signatureType, currentData.value, currentData);\n                                            signatureValueRender = true;\n                                        }\n                                    }\n                                    currentData.lineBound = zoomCurrentData.lineBound;\n                                    if (currentData.signatureBound) {\n                                        currentData.signatureBound = zoomCurrentData.signatureBound;\n                                        this_1.pdfViewerBase.formFieldCollection[parseInt(i.toString(), 10)].FormField.signatureBound =\n                                            currentData.signatureBound;\n                                        if ((currentData.formFieldAnnotationType === 'SignatureField' || currentData.formFieldAnnotationType === 'InitialField') && currentData.signatureType === 'Image' && signatureValueRender) {\n                                            setTimeout(function () {\n                                                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(_this.pdfViewer.nameTable[element_1.id.split('_')[0] + '_content'])) {\n                                                    _this.pdfViewer.nameTable[element_1.id.split('_')[0] + '_content'].signatureBound = currentData.signatureBound;\n                                                }\n                                            }, 10);\n                                        }\n                                        else {\n                                            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this_1.pdfViewer.nameTable[element_1.id.split('_')[0] + '_content'])) {\n                                                this_1.pdfViewer.nameTable[element_1.id.split('_')[0] + '_content'].signatureBound = currentData.signatureBound;\n                                            }\n                                        }\n                                    }\n                                    this_1.pdfViewerBase.formFieldCollection[parseInt(i.toString(), 10)].FormField.lineBound =\n                                        currentData.lineBound;\n                                    this_1.pdfViewerBase.formFieldCollection[parseInt(i.toString(), 10)].FormField.zoomValue = zoomValue;\n                                }\n                                this_1.pdfViewerBase.setItemInSessionStorage(this_1.pdfViewerBase.formFieldCollection, '_formDesigner');\n                            }\n                        }\n                    }\n                    if (this_1.pdfViewerBase.isFocusField && this_1.pdfViewerBase.focusField) {\n                        var currentField = document.getElementById(this_1.pdfViewerBase.focusField.id);\n                        if (currentField) {\n                            if ((this_1.pdfViewerBase.focusField.type === 'SignatureField' || this_1.pdfViewerBase.focusField.type === 'InitialField') && this_1.pdfViewer.formDesignerModule) {\n                                currentField.parentElement.focus();\n                            }\n                            else {\n                                currentField.focus();\n                            }\n                            this_1.pdfViewerBase.isFocusField = false;\n                            this_1.pdfViewerBase.focusField = [];\n                        }\n                    }\n                };\n                var this_1 = this;\n                for (var i = 0; i < formFieldsData.length; i++) {\n                    _loop_1(i);\n                }\n            }\n        }\n    };\n    FormDesigner.prototype.renderFormFieldsInZooming = function (element, currentData, signatureField, zoomValue) {\n        if (element) {\n            var parentHtmlElementAttribute = {\n                'id': 'form_field_' + element.id + '_html_element',\n                'class': 'foreign-object'\n            };\n            var parentHtmlElement = this.createHtmlElement('div', parentHtmlElementAttribute);\n            var HtmlElementAttribute = {\n                'id': element.id + '_html_element',\n                'class': 'foreign-object'\n            };\n            var htmlElement = this.createHtmlElement('div', HtmlElementAttribute);\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(currentData)) {\n                signatureField.visibility = currentData.visibility;\n            }\n            if (currentData.formFieldAnnotationType === 'SignatureField' || currentData.formFieldAnnotationType === 'InitialField') {\n                this.disableSignatureClickEvent = true;\n                signatureField.value = currentData.value;\n                signatureField.signatureType = currentData.signatureType;\n                signatureField.signatureBound = currentData.signatureBound;\n                element.template = htmlElement.appendChild(this.createSignatureDialog(this.pdfViewer, signatureField));\n                this.disableSignatureClickEvent = false;\n            }\n            else if (currentData.formFieldAnnotationType === 'DropdownList') {\n                element.template = htmlElement.appendChild(this.createDropDownList(element, signatureField));\n            }\n            else if (currentData.formFieldAnnotationType === 'ListBox') {\n                element.template = htmlElement.appendChild(this.createListBox(element, signatureField));\n            }\n            else {\n                element.template = htmlElement.appendChild(this.createInputElement(currentData.formFieldAnnotationType, signatureField));\n            }\n            var divElement = document.createElement('div');\n            divElement.id = signatureField.id + '_designer_name';\n            if (zoomValue > 0.5) {\n                divElement.style.fontSize = this.defaultFontSize + 'px';\n            }\n            else {\n                divElement.style.fontSize = '6px';\n            }\n            divElement.className = 'e-pv-show-designer-name';\n            if (this.pdfViewer.designerMode) {\n                divElement.innerHTML = signatureField.name;\n                divElement.style.position = 'absolute';\n            }\n            else {\n                divElement.innerHTML = '';\n                divElement.style.position = 'initial';\n            }\n            htmlElement.appendChild(divElement);\n            parentHtmlElement.appendChild(htmlElement);\n            var textLayer = document.getElementById(this.pdfViewer.element.id + '_textLayer_' + (currentData.pageNumber - 1));\n            textLayer.appendChild(parentHtmlElement);\n            if (signatureField.formFieldAnnotationType === 'RadioButton') {\n                if (document.getElementsByClassName('e-pv-radiobtn-span').length > 0) {\n                    // this.renderRadioButtonSpan(spanElement, bounds, zoomValue);\n                }\n            }\n            var point = (0,_syncfusion_ej2_drawings__WEBPACK_IMPORTED_MODULE_1__.cornersPointsBeforeRotation)(signatureField.wrapper.children[0]).topLeft;\n            if (currentData.formFieldAnnotationType === 'Checkbox' && (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice)) {\n                //ReCreate outer div while zoom options\n                var outerDivHeight = element.actualSize.height + this.increasedSize;\n                var outerDivWidth = element.actualSize.width + this.increasedSize;\n                var outerDivAttribute = {\n                    'id': element.id + '_outer_div',\n                    'className': 'e-pv-checkbox-outer-div'\n                };\n                var outerDiv = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div', outerDivAttribute);\n                outerDiv.setAttribute('style', 'height:' + outerDivHeight * zoomValue + 'px; width:' + outerDivWidth * zoomValue + 'px;left:' + point.x * zoomValue + 'px; top:' + point.y * zoomValue + 'px;' +\n                    'position:absolute; opacity: 1;');\n                outerDiv.appendChild(parentHtmlElement);\n                outerDiv.addEventListener('click', this.setCheckBoxState.bind(this));\n                textLayer.appendChild(outerDiv);\n                htmlElement.setAttribute('style', 'height:' + (element.actualSize.height * zoomValue) + 'px; width:' + (element.actualSize.width * zoomValue) +\n                    'px;left:' + point.x * zoomValue + 'px; top:' + point.y * zoomValue + 'px;' +\n                    'transform:rotate(' + (element.rotateAngle + element.parentTransform) + 'deg);' +\n                    'pointer-events:' + ((this.pdfViewer.designerMode) ? 'none' : 'all')\n                    + ';visibility:' + ((element.visible) ? 'visible' : 'hidden') + ';opacity:' + element.style.opacity + ';');\n            }\n            else {\n                htmlElement.setAttribute('style', 'height:' + (element.actualSize.height * zoomValue) + 'px; width:' + (element.actualSize.width * zoomValue) +\n                    'px;left:' + point.x * zoomValue + 'px; top:' + point.y * zoomValue + 'px;' +\n                    'position:absolute;transform:rotate(' + (element.rotateAngle + element.parentTransform) + 'deg);' +\n                    'pointer-events:' + ((this.pdfViewer.designerMode) ? 'none' : 'all')\n                    + ';visibility:' + ((element.visible) ? 'visible' : 'hidden') + ';opacity:' + element.style.opacity + ';');\n            }\n            currentData.lineBound = { X: point.x * zoomValue, Y: point.y * zoomValue, Width: element.actualSize.width *\n                    zoomValue, Height: element.actualSize.height * zoomValue };\n            if (currentData.signatureBound && signatureField.wrapper.children[1]) {\n                var signPoint = signatureField.wrapper.children[1].bounds;\n                currentData.signatureBound.x = signPoint.x * zoomValue;\n                currentData.signatureBound.y = signPoint.y * zoomValue;\n                currentData.signatureBound.width = signPoint.width * zoomValue;\n                currentData.signatureBound.height = signPoint.height * zoomValue;\n            }\n        }\n        return currentData;\n    };\n    /* This method was commented for this task ID EJ2-61222, A method renderRadioButtonSpan was\n        implemented and the values which was already taken from getCheckBoxRadioButtonBounds,\n        are again calculated based on zoomValues and the size of the radio button was changed.\n        This makes the radio button big in size. Refer previous task IDs EJ2-50668 and EJ2-57850 Where these lines were added. */\n    /* private renderRadioButtonSpan(spanElement: HTMLCollectionOf<Element>, bounds: any, zoomValue: number): void {\n        for (let i: number = 0; i < spanElement.length; i++) {\n            (spanElement as any)[i].style.width = Math.floor(bounds.width - 10) + \"px\";\n            (spanElement as any)[i].style.height = Math.floor(bounds.height - 10) + \"px\";\n            if (bounds.width <= 14 && parseInt((spanElement as any)[i].style.width, 10) >= 2) {\n                if (parseInt((spanElement as any)[i].style.width, 10) <= 5) {\n                    if (bounds.width > 10) {\n                        (spanElement as any)[i].style.width = Math.floor(bounds.width / (1 + zoomValue)) + \"px\";\n                        (spanElement as any)[i].style.height = Math.floor(bounds.height / (1 + zoomValue)) + \"px\";\n                        (spanElement as any)[i].style.margin = Math.round(bounds.width / 4) + \"px\";\n                    }\n                    else if (bounds.width < 10 && bounds.width > 5) {\n                        (spanElement as any)[i].style.width = (bounds.width / 1.85) + \"px\";\n                        (spanElement as any)[i].style.height = (bounds.height / 1.85) + \"px\";\n                    }\n                    else if (bounds.width <= 5) {\n                        (spanElement as any)[i].style.width = (bounds.width / 1.85) + \"px\";\n                        (spanElement as any)[i].style.height = (bounds.height / 1.85) + \"px\";\n                        (spanElement as any)[i].style.margin = (bounds.width / 3.5) + \"px\";\n                    }\n                }\n            }\n            if (parseInt((spanElement as any)[i].style.width, 10) <= 1 || parseInt((spanElement as any)[i].style.height, 10) <= 1) {\n                if ((bounds.width * zoomValue) >= 2) {\n                    (spanElement as any)[i].style.width = Math.round(bounds.width / 1.65) + \"px\";\n                    (spanElement as any)[i].style.height = Math.round(bounds.height / 1.65) + \"px\";\n                    (spanElement as any)[i].style.margin = bounds.width / 3.8 + \"px\";;\n                } else {\n                    (spanElement as any)[i].style.width = \"1px\";\n                    (spanElement as any)[i].style.height = \"1px\";\n                    (spanElement as any)[i].style.margin = \"1px\";\n                }\n            }\n            if (bounds.width > 14) {\n                (spanElement as any)[i].style.width = (bounds.width / 2) + \"px\";\n                (spanElement[i] as any).style.height = (bounds.height / 2) + \"px\";\n            }\n            if (zoomValue <= 1 && zoomValue > 0.70) {\n                (spanElement as any)[i].style.width = (bounds.width / 1.85) + \"px\";\n                (spanElement[i] as any).style.height = (bounds.height / 1.85) + \"px\";\n            }\n\n        }\n    }\n    */\n    /**\n     * @param {DrawingElement} obj - It describes about the object\n     * @param {string} formFieldAnnotationType - It describes about the form field annotation type\n     * @private\n     * @returns {any} - any\n     */\n    FormDesigner.prototype.updateFormFieldInitialSize = function (obj, formFieldAnnotationType) {\n        var zoomValue = this.pdfViewerBase.getZoomFactor();\n        switch (formFieldAnnotationType) {\n            case 'Textbox':\n                obj.width = 200 * zoomValue;\n                obj.height = 24 * zoomValue;\n                break;\n            case 'PasswordField':\n                obj.width = 200 * zoomValue;\n                obj.height = 24 * zoomValue;\n                break;\n            case 'SignatureField':\n            case 'InitialField':\n                obj.width = 200 * zoomValue;\n                obj.height = 63 * zoomValue;\n                break;\n            case 'Checkbox':\n                obj.width = 20 * zoomValue;\n                obj.height = 20 * zoomValue;\n                break;\n            case 'RadioButton':\n                obj.width = 20 * zoomValue;\n                obj.height = 20 * zoomValue;\n                break;\n            case 'DropdownList':\n                obj.width = 200 * zoomValue;\n                obj.height = 24 * zoomValue;\n                break;\n            case 'ListBox':\n                obj.width = 198 * zoomValue;\n                obj.height = 66 * zoomValue;\n                break;\n        }\n        return { width: obj.width, height: obj.height };\n    };\n    /**\n     * @param {PdfAnnotationBaseModel} actualObject - It describes about the actual object\n     * @private\n     * @returns {void}\n     */\n    FormDesigner.prototype.updateHTMLElement = function (actualObject) {\n        var element = actualObject.wrapper.children[0];\n        var zoomValue = this.pdfViewerBase.getZoomFactor();\n        if (element) {\n            var htmlElement = document.getElementById(element.id + '_html_element');\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(htmlElement)) {\n                var point = (0,_syncfusion_ej2_drawings__WEBPACK_IMPORTED_MODULE_1__.cornersPointsBeforeRotation)(actualObject.wrapper.children[0]).topLeft;\n                htmlElement.setAttribute('style', 'height:' + (element.actualSize.height * zoomValue) + 'px; width:' + (element.actualSize.width * zoomValue) +\n                    'px;left:' + point.x * zoomValue + 'px; top:' + point.y * zoomValue + 'px;' +\n                    'position:absolute;transform:rotate(' + (element.rotateAngle + element.parentTransform) + 'deg);' +\n                    'pointer-events:' + ((this.pdfViewer.designerMode) ? 'none' : 'all')\n                    + ';visibility:' + ((element.visible) ? 'visible' : 'hidden') + ';opacity:' + element.style.opacity + ';');\n                var data = this.pdfViewerBase.getItemFromSessionStorage('_formDesigner');\n                if (actualObject.formFieldAnnotationType === 'RadioButton') {\n                    var labelContainer = htmlElement.firstElementChild.firstElementChild;\n                    var spanElement = htmlElement.firstElementChild.firstElementChild.lastElementChild;\n                    if (element.actualSize.width > element.actualSize.height) {\n                        htmlElement.firstElementChild.style.display = 'inherit';\n                        labelContainer.style.width = labelContainer.style.height = (element.actualSize.height * zoomValue) + 'px';\n                        spanElement.style.width = spanElement.style.height = (element.actualSize.height / 2) + 'px';\n                    }\n                    else {\n                        htmlElement.firstElementChild.style.display = 'flex';\n                        labelContainer.style.width = labelContainer.style.height = (element.actualSize.width * zoomValue) + 'px';\n                        spanElement.style.width = spanElement.style.height = (element.actualSize.width / 2) + 'px';\n                    }\n                    if (zoomValue < 1 && labelContainer.style.width <= 20 && labelContainer.style.height <= 20) {\n                        spanElement.style.margin = Math.round(parseInt(labelContainer.style.width, 10) / 3.5) + 'px';\n                    }\n                    else {\n                        spanElement.style.margin = Math.round(parseInt(labelContainer.style.width, 10) / 4) + 'px';\n                    }\n                }\n                if (actualObject.formFieldAnnotationType === 'Checkbox') {\n                    var minCheckboxWidth = 20;\n                    var labelContainer = htmlElement.firstElementChild.firstElementChild;\n                    var spanElement = htmlElement.firstElementChild.firstElementChild.lastElementChild.firstElementChild;\n                    if (element.actualSize.width > element.actualSize.height) {\n                        htmlElement.firstElementChild.style.display = 'inherit';\n                        labelContainer.style.width = labelContainer.style.height = (element.actualSize.height * zoomValue) + 'px';\n                        spanElement.style.width = ((element.actualSize.height / 5) * zoomValue) + 'px';\n                        spanElement.style.height = ((element.actualSize.height / 2.5) * zoomValue) + 'px';\n                        spanElement.style.left = ((element.actualSize.height / 2.5) * zoomValue) + 'px';\n                        spanElement.style.top = ((element.actualSize.height / 5) * zoomValue) + 'px';\n                    }\n                    else {\n                        htmlElement.firstElementChild.style.display = 'flex';\n                        labelContainer.style.width = labelContainer.style.height = (element.actualSize.width * zoomValue) + 'px';\n                        spanElement.style.width = ((element.actualSize.width / 5) * zoomValue) + 'px';\n                        spanElement.style.height = ((element.actualSize.width / 2.5) * zoomValue) + 'px';\n                        spanElement.style.left = ((element.actualSize.width / 2.5) * zoomValue) + 'px';\n                        spanElement.style.top = ((element.actualSize.width / 5) * zoomValue) + 'px';\n                    }\n                    if (spanElement.className.indexOf('e-pv-cb-checked') !== -1) {\n                        var checkboxWidth = parseInt(labelContainer.style.width, 10);\n                        if (checkboxWidth > minCheckboxWidth) {\n                            spanElement.style.borderWidth = '3px';\n                        }\n                        else if (checkboxWidth <= 15) {\n                            spanElement.style.borderWidth = '1px';\n                        }\n                        else {\n                            spanElement.style.borderWidth = '2px';\n                        }\n                    }\n                }\n                if (actualObject.formFieldAnnotationType === 'SignatureField' || actualObject.formFieldAnnotationType === 'InitialField') {\n                    var signatureDiv = htmlElement.firstElementChild.firstElementChild;\n                    var indicatorSpan = signatureDiv.nextElementSibling;\n                    var bounds = this.getBounds(indicatorSpan);\n                    var options = {\n                        height: element.actualSize.height,\n                        width: element.actualSize.width,\n                        signatureIndicatorSettings: {\n                            text: indicatorSpan.textContent,\n                            width: bounds.width,\n                            height: bounds.height\n                        },\n                        initialIndicatorSettings: {\n                            text: indicatorSpan.textContent,\n                            width: bounds.width,\n                            height: bounds.height\n                        }\n                    };\n                    this.updateSignatureandInitialIndicator(actualObject, options, signatureDiv);\n                }\n                var formFieldsData = JSON.parse(data);\n                for (var i = 0; i < formFieldsData.length; i++) {\n                    if (formFieldsData[parseInt(i.toString(), 10)].FormField.formFieldAnnotationType === 'RadioButton') {\n                        for (var j = 0; j < formFieldsData[parseInt(i.toString(), 10)].FormField.radiobuttonItem.length; j++) {\n                            if (element.id === formFieldsData[parseInt(i.toString(), 10)].\n                                FormField.radiobuttonItem[parseInt(j.toString(), 10)].id) {\n                                this.pdfViewerBase.formFieldCollection[parseInt(i.toString(), 10)].\n                                    FormField.radiobuttonItem[parseInt(j.toString(), 10)].lineBound =\n                                    { X: point.x * zoomValue, Y: point.y * zoomValue, Width: element.actualSize.width *\n                                            zoomValue, Height: element.actualSize.height * zoomValue };\n                                this.pdfViewerBase.formFieldCollection[parseInt(i.toString(), 10)].\n                                    FormField.radiobuttonItem[parseInt(j.toString(), 10)].zoomValue = zoomValue;\n                                break;\n                            }\n                        }\n                    }\n                    else {\n                        if (formFieldsData[parseInt(i.toString(), 10)].Key === element.id) {\n                            formFieldsData[parseInt(i.toString(), 10)].FormField.lineBound =\n                                { X: point.x * zoomValue, Y: point.y * zoomValue, Width: element.actualSize.width *\n                                        zoomValue, Height: element.actualSize.height * zoomValue };\n                            if (formFieldsData[parseInt(i.toString(), 10)].FormField.signatureBound) {\n                                var x = (point.x * zoomValue) + (element.actualSize.width * zoomValue) / 2;\n                                x = x - formFieldsData[parseInt(i.toString(), 10)].FormField.signatureBound.width / 2;\n                                var y = (point.y * zoomValue) + (element.actualSize.height * zoomValue) / 2;\n                                y = y - formFieldsData[parseInt(i.toString(), 10)].FormField.signatureBound.height / 2;\n                                formFieldsData[parseInt(i.toString(), 10)].FormField.signatureBound.x = x;\n                                formFieldsData[parseInt(i.toString(), 10)].FormField.signatureBound.y = y;\n                                this.pdfViewerBase.formFieldCollection[parseInt(i.toString(), 10)].FormField.signatureBound =\n                                    formFieldsData[parseInt(i.toString(), 10)].FormField.signatureBound;\n                                this.pdfViewer.nameTable[element.id.split('_')[0] + '_content'].signatureBound = formFieldsData[parseInt(i.toString(), 10)].FormField.signatureBound;\n                            }\n                            this.pdfViewerBase.formFieldCollection[parseInt(i.toString(), 10)].FormField.lineBound =\n                                formFieldsData[parseInt(i.toString(), 10)].FormField.lineBound;\n                        }\n                    }\n                }\n                this.pdfViewerBase.setItemInSessionStorage(this.pdfViewerBase.formFieldCollection, '_formDesigner');\n            }\n        }\n    };\n    FormDesigner.prototype.getCheckboxRadioButtonBounds = function (drawingObject, bounds, isPrint) {\n        var zoomValue = isPrint ? this.defaultZoomValue : this.pdfViewerBase.getZoomFactor();\n        var width = 0;\n        var height = 0;\n        var display = '';\n        if (bounds) {\n            if (bounds.width > bounds.height) {\n                width = height = bounds.height * zoomValue;\n                display = 'inherit';\n            }\n            else {\n                width = height = bounds.width * zoomValue;\n                display = 'flex';\n            }\n        }\n        else if (drawingObject) {\n            if (drawingObject.bounds.width > drawingObject.bounds.height) {\n                width = height = drawingObject.bounds.height * zoomValue;\n                display = 'inherit';\n            }\n            else {\n                width = height = drawingObject.bounds.width * zoomValue;\n                display = 'flex';\n            }\n        }\n        return { width: width, height: height, display: display };\n    };\n    FormDesigner.prototype.updateSessionFormFieldProperties = function (updatedFormFields) {\n        var zoomValue = this.pdfViewerBase.getZoomFactor();\n        var element = updatedFormFields.wrapper.children[0];\n        var data = this.pdfViewerBase.getItemFromSessionStorage('_formDesigner');\n        var formFieldsData = JSON.parse(data);\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(element)) {\n            for (var i = 0; i < formFieldsData.length; i++) {\n                if (formFieldsData[parseInt(i.toString(), 10)].FormField.formFieldAnnotationType === 'RadioButton') {\n                    for (var j = 0; j < formFieldsData[parseInt(i.toString(), 10)].FormField.radiobuttonItem.length; j++) {\n                        if (element.id === formFieldsData[parseInt(i.toString(), 10)].\n                            FormField.radiobuttonItem[parseInt(j.toString(), 10)].id) {\n                            var radioButtonItemUpdate = {\n                                id: element.id, lineBound: {\n                                    X: element.bounds.x * zoomValue, Y: element.bounds.y * zoomValue,\n                                    Width: element.bounds.width * zoomValue, Height: element.bounds.height * zoomValue\n                                },\n                                name: updatedFormFields.name, zoomValue: zoomValue, pageNumber: updatedFormFields.pageNumber,\n                                value: updatedFormFields.value, formFieldAnnotationType: updatedFormFields.formFieldAnnotationType,\n                                fontFamily: updatedFormFields.fontFamily, fontSize: updatedFormFields.fontSize,\n                                fontStyle: updatedFormFields.fontStyle,\n                                fontColor: this.getRgbCode(updatedFormFields.color),\n                                backgroundColor: this.getRgbCode(updatedFormFields.backgroundColor),\n                                borderColor: this.getRgbCode(updatedFormFields.borderColor),\n                                thickness: updatedFormFields.thickness, textAlign: updatedFormFields.alignment,\n                                isChecked: updatedFormFields.isChecked, isSelected: updatedFormFields.isSelected,\n                                isReadonly: updatedFormFields.isReadonly, visibility: updatedFormFields.visibility,\n                                maxLength: updatedFormFields.maxLength, isRequired: updatedFormFields.isRequired,\n                                isPrint: updatedFormFields.isPrint, rotation: 0, tooltip: updatedFormFields.tooltip,\n                                isMultiline: updatedFormFields.isMultiline, insertSpaces: updatedFormFields.insertSpaces,\n                                isTransparent: updatedFormFields.isTransparent,\n                                zIndex: updatedFormFields.zIndex, customData: updatedFormFields.customData\n                            };\n                            formFieldsData[parseInt(i.toString(), 10)].FormField.radiobuttonItem[parseInt(j.toString(), 10)] =\n                                radioButtonItemUpdate;\n                            if (this.pdfViewerBase.formFieldCollection[parseInt(i.toString(), 10)] &&\n                                this.pdfViewerBase.formFieldCollection[parseInt(i.toString(), 10)].FormField &&\n                                this.pdfViewerBase.formFieldCollection[parseInt(i.toString(), 10)].\n                                    FormField.radiobuttonItem[parseInt(j.toString(), 10)]) {\n                                this.pdfViewerBase.formFieldCollection[parseInt(i.toString(), 10)].\n                                    FormField.radiobuttonItem[parseInt(j.toString(), 10)] = radioButtonItemUpdate;\n                                this.pdfViewerBase.formFieldCollection[parseInt(i.toString(), 10)].\n                                    FormField.tooltip = radioButtonItemUpdate.tooltip;\n                            }\n                            break;\n                        }\n                    }\n                }\n                else if (formFieldsData[parseInt(i.toString(), 10)].Key === element.id) {\n                    var formDesignObj = {\n                        id: element.id, lineBound: {\n                            X: element.bounds.x * zoomValue, Y: element.bounds.y * zoomValue,\n                            Width: element.bounds.width * zoomValue, Height: element.bounds.height * zoomValue\n                        },\n                        name: updatedFormFields.name, zoomValue: zoomValue, pageNumber: updatedFormFields.pageNumber,\n                        value: updatedFormFields.value, formFieldAnnotationType: updatedFormFields.formFieldAnnotationType,\n                        fontFamily: updatedFormFields.fontFamily, fontSize: updatedFormFields.fontSize,\n                        fontStyle: updatedFormFields.fontStyle, fontColor: this.getRgbCode(updatedFormFields.color),\n                        backgroundColor: this.getRgbCode(updatedFormFields.backgroundColor),\n                        borderColor: this.getRgbCode(updatedFormFields.borderColor),\n                        thickness: updatedFormFields.thickness, textAlign: updatedFormFields.alignment,\n                        isChecked: updatedFormFields.isChecked, isSelected: updatedFormFields.isSelected,\n                        isReadonly: updatedFormFields.isReadonly, font: {\n                            isBold: updatedFormFields.font.isBold,\n                            isItalic: updatedFormFields.font.isItalic, isStrikeout: updatedFormFields.font.isStrikeout,\n                            isUnderline: updatedFormFields.font.isUnderline\n                        }, selectedIndex: updatedFormFields.selectedIndex,\n                        radiobuttonItem: null, option: updatedFormFields.options ? updatedFormFields.options : [],\n                        visibility: updatedFormFields.visibility, maxLength: updatedFormFields.maxLength,\n                        isRequired: updatedFormFields.isRequired, isPrint: updatedFormFields.isPrint, rotation: 0,\n                        tooltip: updatedFormFields.tooltip,\n                        isMultiline: updatedFormFields.isMultiline, insertSpaces: updatedFormFields.insertSpaces,\n                        isTransparent: updatedFormFields.isTransparent, zIndex: updatedFormFields.zIndex,\n                        customData: updatedFormFields.customData\n                    };\n                    if (formFieldsData[parseInt(i.toString(), 10)].FormField.formFieldAnnotationType === 'SignatureField' || formFieldsData[parseInt(i.toString(), 10)].FormField.formFieldAnnotationType === 'InitialField') {\n                        var updatedSignatureFormFields = updatedFormFields;\n                        var formDesignObj_1 = {\n                            id: element.id, lineBound: {\n                                X: element.bounds.x * zoomValue, Y: element.bounds.y * zoomValue,\n                                Width: element.bounds.width * zoomValue, Height: element.bounds.height * zoomValue\n                            },\n                            name: updatedFormFields.name, zoomValue: zoomValue, pageNumber: updatedFormFields.pageNumber,\n                            value: updatedFormFields.value, formFieldAnnotationType: updatedFormFields.formFieldAnnotationType,\n                            fontFamily: updatedFormFields.fontFamily, fontSize: updatedFormFields.fontSize,\n                            fontStyle: updatedFormFields.fontStyle, fontColor: this.getRgbCode(updatedFormFields.color),\n                            backgroundColor: this.getRgbCode(updatedFormFields.backgroundColor),\n                            borderColor: this.getRgbCode(updatedFormFields.borderColor), thickness: updatedFormFields.thickness,\n                            textAlign: updatedFormFields.alignment, isChecked: updatedFormFields.isChecked,\n                            isSelected: updatedFormFields.isSelected,\n                            isReadonly: updatedFormFields.isReadonly, font: {\n                                isBold: updatedFormFields.font.isBold,\n                                isItalic: updatedFormFields.font.isItalic, isStrikeout: updatedFormFields.font.isStrikeout,\n                                isUnderline: updatedFormFields.font.isUnderline\n                            }, selectedIndex: updatedFormFields.selectedIndex,\n                            radiobuttonItem: null, option: updatedFormFields.options ? updatedFormFields.options : [],\n                            visibility: updatedFormFields.visibility, maxLength: updatedFormFields.maxLength,\n                            isRequired: updatedFormFields.isRequired, isPrint: updatedFormFields.isPrint,\n                            rotation: 0, tooltip: updatedFormFields.tooltip,\n                            signatureType: updatedFormFields.signatureType, signatureBound: updatedSignatureFormFields.signatureBound,\n                            isMultiline: updatedFormFields.isMultiline, insertSpaces: updatedFormFields.insertSpaces,\n                            isTransparent: updatedFormFields.isTransparent, zIndex: updatedFormFields.zIndex,\n                            customData: updatedFormFields.customData\n                        };\n                        formFieldsData[parseInt(i.toString(), 10)].FormField = formDesignObj_1;\n                        this.pdfViewerBase.formFieldCollection[parseInt(i.toString(), 10)].FormField = formDesignObj_1;\n                    }\n                    else {\n                        formFieldsData[parseInt(i.toString(), 10)].FormField = formDesignObj;\n                        this.pdfViewerBase.formFieldCollection[parseInt(i.toString(), 10)].FormField = formDesignObj;\n                    }\n                    break;\n                }\n            }\n        }\n        if (this.pdfViewerBase.formFieldCollection.length > 0) {\n            this.pdfViewerBase.enableFormFieldButton(true);\n        }\n        else {\n            this.pdfViewerBase.enableFormFieldButton(false);\n        }\n        this.pdfViewerBase.setItemInSessionStorage(this.pdfViewerBase.formFieldCollection, '_formDesigner');\n    };\n    /**\n     * @param {any} commandHandler - It describes about the command handler\n     * @param {any} signatureField - It describes about the signature field\n     * @param {any} bounds - It describes about the bounds\n     * @param {boolean} isPrint - It describes about the isPrint\n     * @private\n     * @returns {HTMLElement} - html element\n     */\n    FormDesigner.prototype.createSignatureDialog = function (commandHandler, signatureField, bounds, isPrint) {\n        this.isInitialField = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(signatureField.isInitialField) ? false : signatureField.isInitialField;\n        this.pdfViewerBase.isInitialField = this.isInitialField;\n        this.pdfViewerBase.isInitialField = signatureField.isInitialField;\n        var element = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div');\n        element.className = 'foreign-object';\n        element.style.position = 'absolute';\n        element.style.width = '100%';\n        element.style.height = '100%';\n        element.addEventListener('focus', this.focusFormFields.bind(this));\n        element.addEventListener('blur', this.blurFormFields.bind(this));\n        var divElement = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div');\n        divElement.style.width = '100%';\n        divElement.style.height = '100%';\n        divElement.style.position = 'absolute';\n        divElement.style.backgroundColor = 'transparent';\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(signatureField.thickness)) {\n            divElement.className = 'e-pdfviewer-signatureformfields-signature';\n            divElement.style.border = (signatureField.thickness) + 'px solid #303030';\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(signatureField.value) && signatureField.value !== '') {\n            divElement.className = 'e-pdfviewer-signatureformfields-signature';\n            divElement.style.pointerEvents = 'none';\n        }\n        else {\n            divElement.className = 'e-pdfviewer-signatureformfields';\n            divElement.style.pointerEvents = '';\n        }\n        divElement.id = signatureField.id;\n        divElement.disabled = signatureField.isReadonly;\n        element.appendChild(divElement);\n        var signatureFieldSettings = this.pdfViewer.signatureFieldSettings;\n        var initialFieldSettings = this.pdfViewer.initialFieldSettings;\n        if (!signatureFieldSettings.signatureIndicatorSettings) {\n            signatureFieldSettings.signatureIndicatorSettings = { opacity: 1, backgroundColor: 'orange', width: 19, height: 10, fontSize: 10, text: null, color: 'black' };\n        }\n        if (!signatureFieldSettings.signatureDialogSettings) {\n            signatureFieldSettings.signatureDialogSettings =\n                { displayMode: _base_types__WEBPACK_IMPORTED_MODULE_9__.DisplayMode.Draw | _base_types__WEBPACK_IMPORTED_MODULE_9__.DisplayMode.Text | _base_types__WEBPACK_IMPORTED_MODULE_9__.DisplayMode.Upload, hideSaveSignature: false };\n        }\n        if (!initialFieldSettings.initialIndicatorSettings) {\n            initialFieldSettings.initialIndicatorSettings = { opacity: 1, backgroundColor: 'orange', width: 19, height: 10, fontSize: 10, text: null, color: 'black' };\n        }\n        if (!initialFieldSettings.initialDialogSettings) {\n            initialFieldSettings.initialDialogSettings =\n                { displayMode: _base_types__WEBPACK_IMPORTED_MODULE_9__.DisplayMode.Draw | _base_types__WEBPACK_IMPORTED_MODULE_9__.DisplayMode.Text | _base_types__WEBPACK_IMPORTED_MODULE_9__.DisplayMode.Upload, hideSaveSignature: false };\n        }\n        //check whether the width for sign indicator has default value or not and then set the default width value for initial field.\n        var indicatorSettings;\n        if (signatureField.isInitialField) {\n            indicatorSettings = signatureField.signatureIndicatorSettings ?\n                signatureField.signatureIndicatorSettings : initialFieldSettings.initialIndicatorSettings;\n        }\n        else {\n            indicatorSettings = signatureField.signatureIndicatorSettings ?\n                signatureField.signatureIndicatorSettings : signatureFieldSettings.signatureIndicatorSettings;\n        }\n        var defaultWidth = this.pdfViewer.signatureFieldSettings.signatureIndicatorSettings.width ===\n            19 ? (signatureField.isInitialField ? 30 : 25) : this.pdfViewer.signatureFieldSettings.signatureIndicatorSettings.width;\n        var signatureFieldIndicatorWidth = indicatorSettings.width ? indicatorSettings.width :\n            (signatureField.signatureIndicatorSettings && signatureField.signatureIndicatorSettings.width) ?\n                signatureField.signatureIndicatorSettings.width : defaultWidth;\n        var defaultHeight = this.pdfViewer.signatureFieldSettings.signatureIndicatorSettings.height ===\n            10 ? 13 : this.pdfViewer.signatureFieldSettings.signatureIndicatorSettings.height;\n        var signatureFieldIndicatorHeight = indicatorSettings.height ? indicatorSettings.height :\n            (signatureField.signatureIndicatorSettings && signatureField.signatureIndicatorSettings.height) ?\n                signatureField.signatureIndicatorSettings.height : defaultHeight;\n        var signatureFieldIndicatorBG = indicatorSettings.backgroundColor ? (indicatorSettings.backgroundColor === 'orange' ? '#FFE48559' : indicatorSettings.backgroundColor) : (signatureField.signatureIndicatorSettings && signatureField.signatureIndicatorSettings.backgroundColor) ? signatureField.signatureIndicatorSettings.backgroundColor : '#FFE48559';\n        var signatureFieldWidth = signatureField.bounds ? signatureField.bounds.width : bounds.width;\n        var signatureFieldHeight = signatureField.bounds ? signatureField.bounds.height : bounds.height;\n        var height = signatureFieldIndicatorHeight > signatureFieldHeight / 2 ? signatureFieldHeight / 2 :\n            signatureFieldIndicatorHeight;\n        var width = signatureFieldIndicatorWidth > signatureFieldWidth / 2 ? signatureFieldWidth / 2 :\n            signatureFieldIndicatorWidth;\n        var fontSize = 10;\n        if (signatureField.signatureIndicatorSettings && signatureField.signatureIndicatorSettings.fontSize) {\n            fontSize = signatureField.signatureIndicatorSettings.fontSize > height / 2 ? 10 :\n                signatureField.signatureIndicatorSettings.fontSize;\n        }\n        else {\n            fontSize = this.pdfViewer.signatureFieldSettings.signatureIndicatorSettings.fontSize > height / 2 ?\n                10 : this.pdfViewer.signatureFieldSettings.signatureIndicatorSettings.fontSize;\n        }\n        var spanElement = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('span');\n        if (!initialFieldSettings.initialIndicatorSettings) {\n            initialFieldSettings.initialIndicatorSettings = { opacity: 1, backgroundColor: 'orange', width: 19, height: 10, fontSize: 10, text: null, color: 'black' };\n        }\n        if (!initialFieldSettings.initialDialogSettings) {\n            initialFieldSettings.initialDialogSettings =\n                { displayMode: _base_types__WEBPACK_IMPORTED_MODULE_9__.DisplayMode.Draw | _base_types__WEBPACK_IMPORTED_MODULE_9__.DisplayMode.Text | _base_types__WEBPACK_IMPORTED_MODULE_9__.DisplayMode.Upload, hideSaveSignature: false };\n        }\n        var fieldText = signatureField.signatureIndicatorSettings ? signatureField.signatureIndicatorSettings.text : null;\n        if (signatureField.formFieldAnnotationType === 'InitialField') {\n            spanElement.id = 'initialIcon_' + signatureField.pageIndex + '_' + this.setFormFieldIdIndex();\n            spanElement.style.fontFamily = 'Helvetica';\n            this.setIndicatorText(spanElement, fieldText, this.pdfViewer.initialFieldSettings.initialIndicatorSettings.text, 'Initial');\n        }\n        else {\n            spanElement.style.height = '';\n            spanElement.style.width = '';\n            spanElement.id = 'signIcon_' + signatureField.pageIndex + '_' + this.setFormFieldIdIndex();\n            spanElement.style.fontFamily = 'Helvetica';\n            this.setIndicatorText(spanElement, fieldText, this.pdfViewer.signatureFieldSettings.signatureIndicatorSettings.text, 'Sign');\n        }\n        spanElement.style.overflow = 'hidden';\n        spanElement.style.whiteSpace = 'nowrap';\n        spanElement.style.padding = '2px 3px 2px 1px';\n        spanElement.style.boxSizing = 'border-box';\n        var zoomValue = this.pdfViewerBase.getZoomFactor();\n        spanElement.style.textAlign = 'left';\n        spanElement.style.fontSize = (fontSize * zoomValue) + 'px';\n        var boundsOfSpan = this.getBounds(spanElement);\n        //Set spanelement indicator property\n        spanElement.style.backgroundColor = signatureFieldIndicatorBG;\n        spanElement.style.color = indicatorSettings.color;\n        spanElement.style.opacity = indicatorSettings.opacity;\n        spanElement.style.height = signatureFieldIndicatorHeight;\n        spanElement.style.width = signatureFieldIndicatorWidth;\n        spanElement.style.position = 'absolute';\n        var widthNew = this.setHeightWidth(signatureFieldWidth, width, boundsOfSpan.width + fontSize, zoomValue);\n        spanElement.style.width = widthNew + 'px';\n        var heightNew = this.setHeightWidth(signatureFieldHeight, height, boundsOfSpan.height, zoomValue);\n        spanElement.style.height = heightNew + 'px';\n        if (zoomValue < 1) {\n            var heightValue = parseInt(spanElement.style.height, 10);\n            spanElement.style.fontSize = (heightValue - this.signIndicatorPadding) < this.signIndicatorMinimunFontSize ? this.signIndicatorMinimunFontSize + 'px' : heightValue - this.signIndicatorPadding + 'px';\n        }\n        if (!isPrint) {\n            element.appendChild(spanElement);\n        }\n        this.updateSignInitialFieldProperties(signatureField, signatureField.isInitialField, this.pdfViewer.isFormDesignerToolbarVisible, this.isSetFormFieldMode);\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(signatureField.tooltip) && signatureField.tooltip !== '') {\n            this.setToolTip(signatureField.tooltip, element.firstElementChild);\n        }\n        this.updateSignatureFieldProperties(signatureField, element, isPrint);\n        return element;\n    };\n    FormDesigner.prototype.setIndicatorText = function (spanElement, fieldText, indicatorText, defaultText) {\n        spanElement.innerHTML = fieldText ? fieldText : indicatorText ? indicatorText : defaultText;\n    };\n    FormDesigner.prototype.getBounds = function (htmlElement) {\n        var clonedElement = htmlElement.cloneNode(true);\n        clonedElement.style.height = '';\n        clonedElement.style.width = '';\n        clonedElement.id = clonedElement.id + '_clonedElement';\n        document.body.appendChild(clonedElement);\n        var clone = document.getElementById(clonedElement.id);\n        var bounds = clone.getBoundingClientRect();\n        document.body.removeChild(clonedElement);\n        return bounds;\n    };\n    FormDesigner.prototype.updateSignatureandInitialIndicator = function (formFieldObject, options, htmlElement) {\n        if (htmlElement !== null) {\n            var fieldBounds = htmlElement.getBoundingClientRect();\n            var zoomValue = this.pdfViewerBase.getZoomFactor();\n            var spanElement = htmlElement.nextElementSibling;\n            var objIndicatorSettings = void 0;\n            var indicatorSettings = void 0;\n            if (formFieldObject.formFieldAnnotationType === 'SignatureField') {\n                objIndicatorSettings = formFieldObject.signatureIndicatorSettings;\n                indicatorSettings = options.signatureIndicatorSettings;\n            }\n            if (formFieldObject.formFieldAnnotationType === 'InitialField') {\n                objIndicatorSettings = formFieldObject.signatureIndicatorSettings ?\n                    formFieldObject.signatureIndicatorSettings : this.pdfViewer.initialFieldSettings.initialIndicatorSettings;\n                indicatorSettings = options.initialIndicatorSettings;\n            }\n            spanElement.style.width = '';\n            spanElement.style.height = '';\n            if (indicatorSettings && objIndicatorSettings) {\n                if (indicatorSettings.text !== undefined) {\n                    this.setIndicatorText(spanElement, indicatorSettings.text, indicatorSettings.text, 'Sign');\n                    objIndicatorSettings.text = indicatorSettings.text;\n                }\n                if (indicatorSettings.fontSize) {\n                    spanElement.style.fontSize = indicatorSettings.fontSize > formFieldObject.height / 2 ? 10 : indicatorSettings.fontSize * zoomValue + 'px';\n                    objIndicatorSettings.fontSize = indicatorSettings.fontSize;\n                }\n                var bounds = this.getBounds(spanElement);\n                if (indicatorSettings.color) {\n                    spanElement.style.color = indicatorSettings.color;\n                    objIndicatorSettings.color = this.nameToHash(indicatorSettings.color);\n                }\n                if (indicatorSettings.backgroundColor) {\n                    spanElement.style.backgroundColor = indicatorSettings.backgroundColor;\n                    objIndicatorSettings.backgroundColor = this.nameToHash(indicatorSettings.backgroundColor);\n                }\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(indicatorSettings.opacity)) {\n                    spanElement.style.opacity = indicatorSettings.opacity;\n                    objIndicatorSettings.opacity = indicatorSettings.opacity;\n                }\n                if (indicatorSettings.width || options.width || indicatorSettings.text) {\n                    var width = this.setHeightWidth(fieldBounds.width, indicatorSettings.width, bounds.width, zoomValue);\n                    spanElement.style.width = width + 'px';\n                    objIndicatorSettings.width = width;\n                }\n                if (indicatorSettings.height || options.height || indicatorSettings.text) {\n                    var height = this.setHeightWidth(fieldBounds.height, indicatorSettings.height, bounds.height, zoomValue);\n                    spanElement.style.height = height + 'px';\n                    objIndicatorSettings.height = height;\n                }\n            }\n            this.updateSignatureFieldProperties(formFieldObject, htmlElement, formFieldObject.isPrint);\n            if (formFieldObject.signatureIndicatorSettings && objIndicatorSettings) {\n                formFieldObject.signatureIndicatorSettings = objIndicatorSettings;\n            }\n            return formFieldObject;\n        }\n    };\n    FormDesigner.prototype.setHeightWidth = function (fieldBound, indicatorBound, referenceBound, zoomValue) {\n        var heightOrWidth;\n        if (fieldBound / 2 > indicatorBound && referenceBound < indicatorBound) {\n            heightOrWidth = indicatorBound * zoomValue;\n        }\n        else if (referenceBound <= fieldBound / 2) {\n            heightOrWidth = referenceBound * zoomValue;\n        }\n        else {\n            heightOrWidth = fieldBound / 2 * zoomValue;\n        }\n        return heightOrWidth;\n    };\n    /**\n     * @param {DiagramHtmlElement} dropdownElement -  It describes about the dropdown element\n     * @param {PdfFormFieldBaseModel} drawingObject - It describes about the drawing object\n     * @param {boolean} isPrint - It describes about the isPrint\n     * @private\n     * @returns {HTMLElement} - html element\n     */\n    FormDesigner.prototype.createDropDownList = function (dropdownElement, drawingObject, isPrint) {\n        var element = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div');\n        element.className = 'foreign-object';\n        element.style.position = 'absolute';\n        element.style.width = '100%';\n        element.style.height = '100%';\n        element.style.backgroundColor = drawingObject.backgroundColor;\n        var select = document.createElement('select');\n        select.addEventListener('change', this.dropdownChange.bind(this));\n        select.addEventListener('focus', this.focusFormFields.bind(this));\n        select.addEventListener('blur', this.blurFormFields.bind(this));\n        select.id = drawingObject.id;\n        select.name = 'editabledropdown' + this.pdfViewerBase.activeElements.activePageID + dropdownElement.id;\n        select.setAttribute('aria-label', 'editabledropdown' + this.pdfViewerBase.activeElements.activePageID + dropdownElement.id);\n        select.className = 'e-pv-formfield-dropdown';\n        select.style.width = '100%';\n        select.style.height = '100%';\n        select.style.position = 'absolute';\n        this.updateDropdownFieldSettingsProperties(drawingObject, this.pdfViewer.isFormDesignerToolbarVisible, this.isSetFormFieldMode);\n        var dropDownChildren = drawingObject.options ? drawingObject.options : [];\n        this.updateDropdownListProperties(drawingObject, select, isPrint);\n        for (var j = 0; j < dropDownChildren.length; j++) {\n            var option = document.createElement('option');\n            option.className = 'e-pv-formfield-dropdown';\n            option.value = dropDownChildren[parseInt(j.toString(), 10)].itemValue;\n            option.text = dropDownChildren[parseInt(j.toString(), 10)].itemName;\n            this.updateDropdownListProperties(drawingObject, option);\n            select.appendChild(option);\n        }\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(drawingObject.selectedIndex) || drawingObject.selectedIndex.length === 0) {\n            select.selectedIndex = -1;\n        }\n        else {\n            select.selectedIndex = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(drawingObject.selectedIndex) ? drawingObject.selectedIndex : 0;\n        }\n        element.appendChild(select);\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(drawingObject.tooltip) && drawingObject.tooltip !== '') {\n            this.setToolTip(drawingObject.tooltip, element.firstElementChild);\n        }\n        return element;\n    };\n    /**\n     * @param {DiagramHtmlElement} listBoxElement - It describes about the list box element\n     * @param {PdfFormFieldBaseModel} drawingObject - It describes about the drawing object\n     * @param {boolean} isPrint - It describes about the isPrint\n     * @private\n     * @returns {HTMLElement} - html element\n     */\n    FormDesigner.prototype.createListBox = function (listBoxElement, drawingObject, isPrint) {\n        var element = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div');\n        element.className = 'foreign-object';\n        element.style.position = 'absolute';\n        element.style.width = '100%';\n        element.style.height = '100%';\n        element.style.backgroundColor = drawingObject.backgroundColor;\n        var select = document.createElement('select');\n        select.addEventListener('click', this.listBoxChange.bind(this));\n        select.addEventListener('focus', this.focusFormFields.bind(this));\n        select.addEventListener('blur', this.blurFormFields.bind(this));\n        select.id = drawingObject.id;\n        select.name = 'editabledropdown' + this.pdfViewerBase.activeElements.activePageID + listBoxElement.id;\n        select.setAttribute('aria-label', 'editabledropdown' + this.pdfViewerBase.activeElements.activePageID + listBoxElement.id);\n        select.className = 'e-pv-formfield-listbox';\n        select.style.width = '100%';\n        select.style.height = '100%';\n        select.style.position = 'absolute';\n        select.multiple = true;\n        this.updatelistBoxFieldSettingsProperties(drawingObject, this.pdfViewer.isFormDesignerToolbarVisible, this.isSetFormFieldMode);\n        var dropDownChildren = drawingObject.options ? drawingObject.options : [];\n        this.updateListBoxProperties(drawingObject, select, isPrint);\n        for (var j = 0; j < dropDownChildren.length; j++) {\n            var option = document.createElement('option');\n            option.className = 'e-pv-formfield-listbox';\n            option.value = dropDownChildren[parseInt(j.toString(), 10)].itemValue;\n            option.text = dropDownChildren[parseInt(j.toString(), 10)].itemName;\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(drawingObject.selectedIndex)) {\n                for (var k = 0; k < drawingObject.selectedIndex.length; k++) {\n                    if (j === drawingObject.selectedIndex[parseInt(k.toString(), 10)]) {\n                        option.selected = true;\n                    }\n                }\n            }\n            select.appendChild(option);\n        }\n        element.appendChild(select);\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(drawingObject.tooltip) && drawingObject.tooltip !== '') {\n            this.setToolTip(drawingObject.tooltip, element.firstElementChild);\n        }\n        return element;\n    };\n    /**\n     * @param {string} formFieldAnnotationType - It describes about the form field annotation type\n     * @param {PdfFormFieldBaseModel} drawingObject - It describes about the drawing object\n     * @param {any} formFieldBounds - It describes about the form field bounds\n     * @param {boolean} isPrint - It describes about the isPrint\n     * @private\n     * @returns {HTMLElement} - html element\n     */\n    FormDesigner.prototype.createInputElement = function (formFieldAnnotationType, drawingObject, formFieldBounds, isPrint) {\n        var zoomValue = this.pdfViewerBase.getZoomFactor();\n        var element = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div');\n        element.className = 'foreign-object';\n        element.style.position = 'absolute';\n        element.style.width = '100%';\n        element.style.height = '100%';\n        var labelElement;\n        var checkboxDiv;\n        var innerSpan;\n        var inputElement = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('input');\n        var textArea = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('textarea');\n        inputElement.id = drawingObject.id;\n        inputElement.setAttribute('aria-label', this.pdfViewer.element.id + 'formfilldesigner');\n        inputElement.style.position = 'absolute';\n        if (formFieldAnnotationType === 'Textbox') {\n            if (drawingObject.isMultiline) {\n                textArea = this.createTextAreaElement(inputElement.id);\n                this.updateTextFieldSettingProperties(drawingObject, this.pdfViewer.isFormDesignerToolbarVisible, this.isSetFormFieldMode);\n                this.updateTextboxProperties(drawingObject, textArea, isPrint);\n            }\n            else {\n                inputElement = this.createTextboxElement(inputElement.id);\n                this.updateTextFieldSettingProperties(drawingObject, this.pdfViewer.isFormDesignerToolbarVisible, this.isSetFormFieldMode);\n                this.updateTextboxProperties(drawingObject, inputElement, isPrint);\n            }\n        }\n        else if (formFieldAnnotationType === 'Checkbox') {\n            var zoomLevel = isPrint ? this.defaultZoomValue : this.pdfViewerBase.getZoomFactor();\n            var minCheckboxWidth = 20;\n            element.style.display = 'flex';\n            element.style.alignItems = 'center';\n            var bounds = this.getCheckboxRadioButtonBounds(drawingObject, formFieldBounds, isPrint);\n            element.style.display = bounds.display;\n            labelElement = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('label', { className: 'e-pv-checkbox-container' });\n            labelElement.style.width = drawingObject.bounds ? (drawingObject.bounds.width * zoomLevel) + 'px' : bounds.width + 'px';\n            labelElement.style.height = drawingObject.bounds ? (drawingObject.bounds.height * zoomLevel) + 'px' : bounds.height + 'px';\n            if (this.isDrawHelper) {\n                labelElement.style.cursor = 'crosshair';\n            }\n            else {\n                labelElement.style.cursor = 'pointer';\n            }\n            checkboxDiv = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div', { className: 'e-pv-checkbox-div' });\n            if (!_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice) {\n                checkboxDiv.addEventListener('click', this.setCheckBoxState.bind(this));\n                checkboxDiv.addEventListener('focus', this.focusFormFields.bind(this));\n                checkboxDiv.addEventListener('blur', this.blurFormFields.bind(this));\n            }\n            checkboxDiv.id = drawingObject.id + '_input';\n            if (drawingObject.isChecked) {\n                innerSpan = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('span', { className: 'e-pv-checkbox-span e-pv-cb-checked' });\n            }\n            else {\n                innerSpan = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('span', { className: 'e-pv-checkbox-span e-pv-cb-unchecked' });\n            }\n            innerSpan.id = drawingObject.id + '_input_span';\n            labelElement.id = drawingObject.id + '_input_label';\n            innerSpan.style.width = (bounds.width / 5) + 'px';\n            innerSpan.style.height = (bounds.height / 2.5) + 'px';\n            innerSpan.style.left = (bounds.width / 2.5) + 'px';\n            innerSpan.style.top = (bounds.height / 5) + 'px';\n            if (innerSpan.className.indexOf('e-pv-cb-checked') !== -1) {\n                var checkboxWidth = parseInt(labelElement.style.width, 10);\n                if (checkboxWidth > minCheckboxWidth) {\n                    innerSpan.style.borderWidth = '3px';\n                }\n                else if (checkboxWidth <= 15) {\n                    innerSpan.style.borderWidth = '1px';\n                }\n                else {\n                    innerSpan.style.borderWidth = '2px';\n                }\n            }\n            if (isPrint) {\n                checkboxDiv.style.backgroundColor = 'rgb(218, 234, 247)';\n                checkboxDiv.style.border = '1px solid #303030';\n                checkboxDiv.style.visibility = 'visible';\n                checkboxDiv.style.height = '100%';\n                checkboxDiv.style.width = '100%';\n                checkboxDiv.style.position = 'absolute';\n                if (innerSpan.className.indexOf('e-pv-cb-checked') !== -1) {\n                    innerSpan.style.border = 'solid #303030';\n                    innerSpan.style.position = 'absolute';\n                    innerSpan.style.borderLeft = 'transparent';\n                    innerSpan.style.borderTop = 'transparent';\n                    innerSpan.style.transform = 'rotate(45deg)';\n                    var checkboxWidth = parseInt(labelElement.style.width, 10);\n                    if (checkboxWidth > minCheckboxWidth) {\n                        innerSpan.style.borderWidth = '3px';\n                    }\n                    else if (checkboxWidth <= 15) {\n                        innerSpan.style.borderWidth = '1px';\n                    }\n                    else {\n                        innerSpan.style.borderWidth = '2px';\n                    }\n                }\n            }\n            inputElement.type = 'checkbox';\n            inputElement.style.margin = '0px';\n            inputElement.style.width = bounds.width + 'px';\n            inputElement.style.height = bounds.height + 'px';\n            if (!isPrint) {\n                this.updateCheckBoxFieldSettingsProperties(drawingObject, this.pdfViewer.isFormDesignerToolbarVisible, this.isSetFormFieldMode);\n            }\n            this.updateCheckboxProperties(drawingObject, checkboxDiv);\n            inputElement.appendChild(labelElement);\n            labelElement.appendChild(checkboxDiv);\n            checkboxDiv.appendChild(innerSpan);\n            if (isPrint) {\n                inputElement.style.outlineWidth = drawingObject.thickness + 'px';\n                inputElement.style.outlineColor = drawingObject.borderColor;\n                inputElement.style.outlineStyle = 'solid';\n                inputElement.style.background = drawingObject.backgroundColor;\n            }\n        }\n        else if (formFieldAnnotationType === 'PasswordField') {\n            inputElement.type = 'password';\n            inputElement.className = 'e-pv-formfield-input';\n            inputElement.style.width = '100%';\n            inputElement.style.height = '100%';\n            inputElement.style.borderStyle = 'solid';\n            inputElement.addEventListener('click', this.inputElementClick.bind(this));\n            inputElement.addEventListener('focus', this.focusFormFields.bind(this));\n            inputElement.addEventListener('blur', this.blurFormFields.bind(this));\n            inputElement.addEventListener('change', this.getTextboxValue.bind(this));\n            this.updatePasswordFieldSettingProperties(drawingObject, this.pdfViewer.isFormDesignerToolbarVisible, this.isSetFormFieldMode);\n            this.updatePasswordFieldProperties(drawingObject, inputElement, isPrint);\n        }\n        else {\n            /*\n            The below line have been commented for \"EJ2-59941 bug\"\n            While setting the textAlign to center the radio button position moved from center to the parent element\n            instead of left to the parent element\n            element.style.textAlign = (Browser.info.name === \"chrome\") ? \"-webkit-center\" : \"center\";\n            */\n            element.style.display = 'flex';\n            element.style.alignItems = 'center';\n            var bounds = this.getCheckboxRadioButtonBounds(drawingObject, formFieldBounds, isPrint);\n            element.style.display = bounds.display;\n            labelElement = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('label', { className: 'e-pv-radiobtn-container' });\n            labelElement.style.width = bounds.width + 'px';\n            labelElement.style.height = bounds.height + 'px';\n            labelElement.style.display = 'table';\n            labelElement.style.verticalAlign = 'middle';\n            labelElement.style.borderWidth = drawingObject.thickness + 'px';\n            labelElement.style.boxShadow = drawingObject.borderColor + ' 0px 0px 0px ' + drawingObject.thickness + 'px';\n            labelElement.style.borderRadius = '50%';\n            labelElement.style.visibility = drawingObject.visibility;\n            if (this.isDrawHelper) {\n                labelElement.style.cursor = 'crosshair';\n            }\n            else {\n                labelElement.style.cursor = 'pointer';\n            }\n            labelElement.style.background = drawingObject.backgroundColor;\n            innerSpan = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('span', { className: 'e-pv-radiobtn-span' });\n            innerSpan.id = drawingObject.id + '_input_span';\n            innerSpan.style.width = Math.floor(bounds.width / 2) + 'px';\n            innerSpan.style.height = Math.floor(bounds.height / 2) + 'px';\n            if (zoomValue < 1 && bounds.width <= 20 && bounds.height <= 20) {\n                innerSpan.style.margin = Math.round(parseInt(labelElement.style.width, 10) / 3.5) + 'px';\n            }\n            else {\n                innerSpan.style.margin = Math.round(parseInt(labelElement.style.width, 10) / 4) + 'px';\n            }\n            labelElement.addEventListener('click', this.setRadioButtonState.bind(this));\n            labelElement.id = drawingObject.id + '_input_label';\n            inputElement.type = 'radio';\n            if (!isPrint) {\n                inputElement.className = 'e-pv-radio-btn';\n            }\n            inputElement.style.margin = '0px';\n            inputElement.addEventListener('click', function (event) {\n                event.stopPropagation();\n            });\n            inputElement.addEventListener('focus', this.focusFormFields.bind(this));\n            inputElement.addEventListener('blur', this.blurFormFields.bind(this));\n            inputElement.style.width = bounds.width + 'px';\n            inputElement.style.height = bounds.height + 'px';\n            this.updateRadioButtonFieldSettingProperties(drawingObject, this.pdfViewer.isFormDesignerToolbarVisible, this.isSetFormFieldMode);\n            this.updateRadioButtonProperties(drawingObject, inputElement, labelElement);\n            labelElement.appendChild(inputElement);\n            labelElement.appendChild(innerSpan);\n            if (drawingObject.isRequired) {\n                labelElement.style.boxShadow = 'red 0px 0px 0px ' + drawingObject.thickness + 'px';\n            }\n            // if (isPrint) {\n            //     inputElement.style.outlineWidth = drawingObject.thickness + 'px';\n            //     inputElement.style.outlineColor = drawingObject.borderColor;\n            //     inputElement.style.outlineStyle = 'solid';\n            //     inputElement.style.background = drawingObject.backgroundColor;\n            // }\n        }\n        if ((formFieldAnnotationType === 'Checkbox' || formFieldAnnotationType === 'RadioButton') && !isPrint) {\n            element.appendChild(labelElement);\n        }\n        else if (formFieldAnnotationType === 'Checkbox' && isPrint) {\n            element.appendChild(labelElement);\n        }\n        else {\n            if (drawingObject.isMultiline) {\n                element.appendChild(textArea);\n            }\n            else {\n                element.appendChild(inputElement);\n            }\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(drawingObject.tooltip) && drawingObject.tooltip !== '') {\n            if (formFieldAnnotationType === 'RadioButton') {\n                this.setToolTip(drawingObject.tooltip, labelElement);\n            }\n            else if (formFieldAnnotationType === 'Textbox' || formFieldAnnotationType === 'PasswordField') {\n                this.setToolTip(drawingObject.tooltip, element.firstElementChild);\n            }\n            else if (formFieldAnnotationType === 'Checkbox') {\n                this.setToolTip(drawingObject.tooltip, element.firstElementChild.lastElementChild);\n            }\n        }\n        this.isDrawHelper = false;\n        return element;\n    };\n    FormDesigner.prototype.listBoxChange = function (event) {\n        var data = this.pdfViewerBase.getItemFromSessionStorage('_formDesigner');\n        var formFieldsData = JSON.parse(data);\n        var targetField = null;\n        var _loop_2 = function (i) {\n            if (formFieldsData[parseInt(i.toString(), 10)].Key.split('_')[0] === event.currentTarget.id.split('_')[0] ||\n                this_2.pdfViewer.nameTable[event.currentTarget.id.split('_')[0]].name === formFieldsData[parseInt(i.toString(), 10)].FormField.name) {\n                if (formFieldsData[parseInt(i.toString(), 10)].Key.split('_')[0] !== event.currentTarget.id.split('_')[0]) {\n                    var inputElement = document.getElementById((formFieldsData[parseInt(i.toString(), 10)].Key.split('_')[0] + '_content_html_element')).firstElementChild.firstElementChild;\n                    for (var k = 0; k < event.currentTarget.options.length; k++) {\n                        inputElement.options[parseInt(k.toString(), 10)].selected =\n                            event.currentTarget.options[parseInt(k.toString(), 10)].selected;\n                    }\n                }\n                formFieldsData[parseInt(i.toString(), 10)].FormField.selectedIndex = [];\n                var oldValues = this_2.pdfViewerBase.formFieldCollection[parseInt(i.toString(), 10)].FormField.selectedIndex;\n                for (var j = 0; j < event.currentTarget.selectedOptions.length; j++) {\n                    var selectIndex = event.currentTarget.selectedOptions[parseInt(j.toString(), 10)].index;\n                    var oldValueIndex = 0;\n                    if (this_2.pdfViewerBase.formFieldCollection[parseInt(i.toString(), 10)].FormField.selectedIndex &&\n                        this_2.pdfViewerBase.formFieldCollection[parseInt(i.toString(), 10)].FormField.selectedIndex.length !== 0) {\n                        if (this_2.pdfViewerBase.formFieldCollection[parseInt(i.toString(), 10)].FormField.selectedIndex[0] >= 0) {\n                            oldValueIndex = this_2.pdfViewerBase.formFieldCollection[parseInt(i.toString(), 10)].\n                                FormField.selectedIndex.pop();\n                        }\n                        this_2.pdfViewerBase.formFieldCollection[parseInt(i.toString(), 10)].FormField.selectedIndex.push(oldValueIndex);\n                    }\n                    var oldValue = formFieldsData[parseInt(i.toString(), 10)].FormField.\n                        option[parseInt(oldValueIndex.toString(), 10)].itemValue;\n                    formFieldsData[parseInt(i.toString(), 10)].FormField.selectedIndex.push(selectIndex);\n                    this_2.pdfViewer.nameTable[formFieldsData[parseInt(i.toString(), 10)].Key.split('_')[0]].selectedIndex = formFieldsData[parseInt(i.toString(), 10)].FormField.selectedIndex;\n                    this_2.pdfViewerBase.formFieldCollection[parseInt(i.toString(), 10)].FormField.selectedIndex =\n                        formFieldsData[parseInt(i.toString(), 10)].FormField.selectedIndex;\n                    var newValue = formFieldsData[parseInt(i.toString(), 10)].FormField.\n                        option[parseInt(selectIndex.toString(), 10)].itemValue;\n                    this_2.pdfViewerBase.formFieldCollection[parseInt(i.toString(), 10)].FormField.value = newValue;\n                    this_2.updateFormFieldCollections(this_2.pdfViewerBase.formFieldCollection[parseInt(i.toString(), 10)].FormField);\n                    targetField = this_2.pdfViewer.formFieldCollections[this_2.pdfViewer.formFieldCollections.findIndex(function (el) { return (el.id + '_content' === formFieldsData[parseInt(i.toString(), 10)].FormField.id); })];\n                    this_2.pdfViewer.fireFormFieldPropertiesChangeEvent('formFieldPropertiesChange', formFieldsData[parseInt(i.toString(), 10)].FormField, this_2.pdfViewerBase.formFieldCollection[parseInt(i.toString(), 10)].FormField.pageNumber, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, oldValue, newValue);\n                }\n                if (this_2.pdfViewer.annotation) {\n                    this_2.pdfViewer.annotation.addAction(this_2.pdfViewerBase.formFieldCollection[parseInt(i.toString(), 10)].FormField.pageNumber, null, this_2.pdfViewerBase.formFieldCollection[parseInt(i.toString(), 10)].FormField, 'FormField Value Change', '', oldValues, this_2.pdfViewerBase.formFieldCollection[parseInt(i.toString(), 10)].FormField.selectedIndex);\n                }\n            }\n        };\n        var this_2 = this;\n        for (var i = 0; i < formFieldsData.length; i++) {\n            _loop_2(i);\n        }\n        this.pdfViewerBase.setItemInSessionStorage(this.pdfViewerBase.formFieldCollection, '_formDesigner');\n        this.updateFormFieldSessions(targetField);\n    };\n    FormDesigner.prototype.dropdownChange = function (event) {\n        var data = this.pdfViewerBase.getItemFromSessionStorage('_formDesigner');\n        var formFieldsData = JSON.parse(data);\n        var targetField = null;\n        var _loop_3 = function (i) {\n            if (formFieldsData[parseInt(i.toString(), 10)].Key.split('_')[0] === event.target.id.split('_')[0] ||\n                this_3.pdfViewer.nameTable[event.target.id.split('_')[0]].name === formFieldsData[parseInt(i.toString(), 10)].FormField.name) {\n                this_3.pdfViewerBase.formFieldCollection[parseInt(i.toString(), 10)].FormField.selectedIndex = [];\n                var selectIndex = document.getElementById(event.currentTarget.id).selectedIndex;\n                var oldValueIndex = 0;\n                if (formFieldsData[parseInt(i.toString(), 10)].FormField.selectedIndex.length !== 0) {\n                    oldValueIndex = formFieldsData[parseInt(i.toString(), 10)].FormField.selectedIndex.pop();\n                    formFieldsData[parseInt(i.toString(), 10)].FormField.selectedIndex.push(oldValueIndex);\n                }\n                var oldValue = formFieldsData[parseInt(i.toString(), 10)].FormField.\n                    option[parseInt(oldValueIndex.toString(), 10)].itemValue;\n                this_3.pdfViewerBase.formFieldCollection[parseInt(i.toString(), 10)].FormField.selectedIndex.push(selectIndex);\n                formFieldsData[parseInt(i.toString(), 10)].FormField.selectedIndex =\n                    this_3.pdfViewerBase.formFieldCollection[parseInt(i.toString(), 10)].FormField.selectedIndex;\n                this_3.pdfViewer.nameTable[formFieldsData[parseInt(i.toString(), 10)].Key.split('_')[0]].selectedIndex = this_3.pdfViewerBase.formFieldCollection[parseInt(i.toString(), 10)].FormField.selectedIndex;\n                var newValue = formFieldsData[parseInt(i.toString(), 10)].\n                    FormField.option[parseInt(selectIndex.toString(), 10)].itemValue;\n                this_3.pdfViewerBase.formFieldCollection[parseInt(i.toString(), 10)].FormField.value = newValue;\n                if (formFieldsData[parseInt(i.toString(), 10)].Key.split('_')[0] !== event.target.id.split('_')[0]) {\n                    var inputElement = document.getElementById((formFieldsData[parseInt(i.toString(), 10)].Key.split('_')[0] + '_content_html_element')).firstElementChild.firstElementChild;\n                    inputElement.selectedIndex = selectIndex;\n                }\n                this_3.updateFormFieldCollections(this_3.pdfViewerBase.formFieldCollection[parseInt(i.toString(), 10)].FormField);\n                targetField = this_3.pdfViewer.formFieldCollections[this_3.pdfViewer.formFieldCollections.findIndex(function (el) { return (el.id + '_content' === formFieldsData[parseInt(i.toString(), 10)].FormField.id); })];\n                this_3.pdfViewer.fireFormFieldPropertiesChangeEvent('formFieldPropertiesChange', formFieldsData[parseInt(i.toString(), 10)].FormField, this_3.pdfViewerBase.formFieldCollection[parseInt(i.toString(), 10)].FormField.pageNumber, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, oldValue, newValue);\n                if (this_3.pdfViewer.annotation) {\n                    this_3.pdfViewer.annotation.addAction(this_3.pdfViewerBase.formFieldCollection[parseInt(i.toString(), 10)].FormField.pageNumber, null, this_3.pdfViewerBase.formFieldCollection[parseInt(i.toString(), 10)].FormField, 'FormField Value Change', '', oldValueIndex, selectIndex);\n                }\n            }\n        };\n        var this_3 = this;\n        for (var i = 0; i < formFieldsData.length; i++) {\n            _loop_3(i);\n        }\n        this.pdfViewerBase.setItemInSessionStorage(this.pdfViewerBase.formFieldCollection, '_formDesigner');\n        this.updateFormFieldSessions(targetField);\n    };\n    FormDesigner.prototype.setCheckBoxState = function (event) {\n        if ((_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice) ? (event.target.classList.contains('') || event.target.classList.contains('e-pv-checkbox-outer-div') || event.target.classList.contains('e-pv-checkbox-div')) && event.currentTarget.classList.contains('e-pv-checkbox-outer-div') && !this.pdfViewer.designerMode : !this.pdfViewer.designerMode) {\n            var minCheckboxWidth = 20;\n            var isChecked = false;\n            var checkTarget = void 0;\n            var targetField = null;\n            if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice) {\n                checkTarget = document.getElementById(event.target.id.split('_')[0] + '_input');\n            }\n            else {\n                checkTarget = event.target;\n            }\n            if (event.target.id !== 'undefined_input' && !this.pdfViewer.nameTable[event.target.id.split('_')[0]].isReadonly && !this.pdfViewer.designerMode) {\n                if (checkTarget && checkTarget.firstElementChild && checkTarget.firstElementChild.className === 'e-pv-checkbox-span e-pv-cb-checked') {\n                    checkTarget.firstElementChild.classList.remove('e-pv-cb-checked');\n                    checkTarget.firstElementChild.classList.add('e-pv-checkbox-span', 'e-pv-cb-unchecked');\n                    isChecked = false;\n                }\n                else if (checkTarget.className === 'e-pv-checkbox-span e-pv-cb-checked') {\n                    checkTarget.classList.remove('e-pv-cb-checked');\n                    checkTarget.classList.add('e-pv-checkbox-span', 'e-pv-cb-unchecked');\n                    isChecked = false;\n                }\n                else {\n                    checkTarget.firstElementChild.classList.remove('e-pv-cb-unchecked');\n                    checkTarget.firstElementChild.classList.add('e-pv-checkbox-span', 'e-pv-cb-checked');\n                    isChecked = true;\n                }\n                var data = this.pdfViewerBase.getItemFromSessionStorage('_formDesigner');\n                if (isChecked) {\n                    if (checkTarget.firstElementChild.className.indexOf('e-pv-cb-checked') !== -1) {\n                        var checkboxWidth = parseInt(event.target.parentElement.style.width, 10);\n                        if (checkboxWidth > minCheckboxWidth) {\n                            checkTarget.firstElementChild.style.borderWidth = '3px';\n                        }\n                        else if (checkboxWidth <= 15) {\n                            checkTarget.firstElementChild.style.borderWidth = '1px';\n                        }\n                        else {\n                            checkTarget.firstElementChild.style.borderWidth = '2px';\n                        }\n                    }\n                }\n                var formFieldsData_1 = JSON.parse(data);\n                var _loop_4 = function (i) {\n                    if (formFieldsData_1[parseInt(i.toString(), 10)].Key.split('_')[0] === event.target.id.split('_')[0] ||\n                        this_4.pdfViewer.nameTable[event.target.id.split('_')[0]].name === formFieldsData_1[parseInt(i.toString(), 10)].FormField.name) {\n                        this_4.pdfViewer.nameTable[formFieldsData_1[parseInt(i.toString(), 10)].Key.split('_')[0]].isChecked = isChecked;\n                        var oldValue = this_4.pdfViewerBase.formFieldCollection[parseInt(i.toString(), 10)].FormField.isChecked;\n                        formFieldsData_1[parseInt(i.toString(), 10)].FormField.isChecked = isChecked;\n                        this_4.pdfViewerBase.formFieldCollection[parseInt(i.toString(), 10)].FormField.isChecked =\n                            formFieldsData_1[parseInt(i.toString(), 10)].FormField.isChecked;\n                        if (formFieldsData_1[parseInt(i.toString(), 10)].Key.split('_')[0] !== event.target.id.split('_')[0]) {\n                            var checkboxElement = document.getElementById(formFieldsData_1[parseInt(i.toString(), 10)].Key.split('_')[0] + '_input').firstElementChild;\n                            if (isChecked) {\n                                if (checkboxElement.classList.contains('e-pv-cb-unchecked')) {\n                                    checkboxElement.classList.remove('e-pv-cb-unchecked');\n                                }\n                                checkboxElement.classList.add('e-pv-cb-checked');\n                            }\n                            else {\n                                if (checkboxElement.classList.contains('e-pv-cb-checked')) {\n                                    checkboxElement.classList.remove('e-pv-cb-checked');\n                                }\n                                checkboxElement.classList.add('e-pv-cb-unchecked');\n                            }\n                        }\n                        this_4.updateFormFieldCollections(this_4.pdfViewerBase.formFieldCollection[parseInt(i.toString(), 10)].FormField);\n                        targetField = this_4.pdfViewer.formFieldCollections[this_4.pdfViewer.formFieldCollections.findIndex(function (el) { return (el.id + '_content' === formFieldsData_1[parseInt(i.toString(), 10)].FormField.id); })];\n                        this_4.pdfViewer.fireFormFieldPropertiesChangeEvent('formFieldPropertiesChange', formFieldsData_1[parseInt(i.toString(), 10)].FormField, this_4.pdfViewerBase.formFieldCollection[parseInt(i.toString(), 10)].FormField.pageNumber, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, oldValue, isChecked);\n                        if (this_4.pdfViewer.annotation) {\n                            this_4.pdfViewer.annotation.addAction(this_4.pdfViewerBase.formFieldCollection[parseInt(i.toString(), 10)].FormField.pageNumber, null, this_4.pdfViewerBase.formFieldCollection[parseInt(i.toString(), 10)].FormField, 'FormField Value Change', '', oldValue, isChecked);\n                        }\n                    }\n                };\n                var this_4 = this;\n                for (var i = 0; i < formFieldsData_1.length; i++) {\n                    _loop_4(i);\n                }\n                this.pdfViewerBase.setItemInSessionStorage(this.pdfViewerBase.formFieldCollection, '_formDesigner');\n                this.updateFormFieldSessions(targetField);\n            }\n        }\n    };\n    FormDesigner.prototype.setCheckedValue = function (element, isChecked) {\n        if (isChecked) {\n            element.firstElementChild.classList.remove('e-pv-cb-unchecked');\n            element.firstElementChild.classList.add('e-pv-checkbox-span', 'e-pv-cb-checked');\n        }\n        else {\n            element.firstElementChild.classList.remove('e-pv-cb-checked');\n            element.firstElementChild.classList.add('e-pv-checkbox-span', 'e-pv-cb-unchecked');\n        }\n    };\n    FormDesigner.prototype.setRadioButtonState = function (event) {\n        var data = this.pdfViewerBase.getItemFromSessionStorage('_formDesigner');\n        var formFieldsData = JSON.parse(data);\n        var targetField = null;\n        var _loop_5 = function (i) {\n            if (formFieldsData[parseInt(i.toString(), 10)].FormField.radiobuttonItem != null) {\n                var oldValue = void 0;\n                var undoElement = void 0;\n                var redoElement = void 0;\n                for (var j = 0; j < formFieldsData[parseInt(i.toString(), 10)].FormField.radiobuttonItem.length; j++) {\n                    if (formFieldsData[parseInt(i.toString(), 10)].FormField.radiobuttonItem[parseInt(j.toString(), 10)].id.split('_')[0] === event.currentTarget.id.split('_')[0]) {\n                        if (!this_5.pdfViewer.nameTable[event.currentTarget.id.split('_')[0]].isReadonly) {\n                            this_5.pdfViewer.nameTable[event.currentTarget.id.split('_')[0]].isSelected = true;\n                            formFieldsData[parseInt(i.toString(), 10)].FormField.\n                                radiobuttonItem[parseInt(j.toString(), 10)].isSelected = true;\n                            oldValue = this_5.pdfViewerBase.formFieldCollection[parseInt(i.toString(), 10)].\n                                FormField.radiobuttonItem[parseInt(j.toString(), 10)].isSelected;\n                            if (!oldValue) {\n                                undoElement = this_5.pdfViewerBase.formFieldCollection[parseInt(i.toString(), 10)].\n                                    FormField.radiobuttonItem[parseInt(j.toString(), 10)];\n                            }\n                            this_5.pdfViewerBase.formFieldCollection[parseInt(i.toString(), 10)].FormField.\n                                radiobuttonItem[parseInt(j.toString(), 10)].isSelected = true;\n                            this_5.pdfViewer.fireFormFieldPropertiesChangeEvent('formFieldPropertiesChange', formFieldsData[parseInt(i.toString(), 10)].FormField, this_5.pdfViewerBase.formFieldCollection[parseInt(i.toString(), 10)].FormField.pageNumber, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true);\n                        }\n                    }\n                    else {\n                        if (this_5.pdfViewer.nameTable[event.currentTarget.id.split('_')[0]].name === formFieldsData[parseInt(i.toString(), 10)].FormField.radiobuttonItem[parseInt(j.toString(), 10)].name) {\n                            this_5.pdfViewer.nameTable[formFieldsData[parseInt(i.toString(), 10)].FormField.radiobuttonItem[parseInt(j.toString(), 10)].id.split('_')[0]].isSelected = false;\n                            var oldValue_1 = this_5.pdfViewerBase.formFieldCollection[parseInt(i.toString(), 10)].FormField.\n                                radiobuttonItem[parseInt(j.toString(), 10)].isSelected;\n                            formFieldsData[parseInt(i.toString(), 10)].FormField.\n                                radiobuttonItem[parseInt(j.toString(), 10)].isSelected = false;\n                            oldValue_1 = this_5.pdfViewerBase.formFieldCollection[parseInt(i.toString(), 10)].\n                                FormField.radiobuttonItem[parseInt(j.toString(), 10)].isSelected;\n                            if (oldValue_1) {\n                                redoElement = this_5.pdfViewerBase.formFieldCollection[parseInt(i.toString(), 10)].\n                                    FormField.radiobuttonItem[parseInt(j.toString(), 10)];\n                            }\n                            this_5.pdfViewerBase.formFieldCollection[parseInt(i.toString(), 10)].FormField.\n                                radiobuttonItem[parseInt(j.toString(), 10)].isSelected =\n                                formFieldsData[parseInt(i.toString(), 10)].FormField.radiobuttonItem[parseInt(j.toString(), 10)].isSelected;\n                            this_5.pdfViewer.fireFormFieldPropertiesChangeEvent('formFieldPropertiesChange', formFieldsData[parseInt(i.toString(), 10)].FormField, this_5.pdfViewerBase.formFieldCollection[parseInt(i.toString(), 10)].FormField.pageNumber, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false);\n                        }\n                    }\n                    this_5.updateFormFieldCollections(this_5.pdfViewerBase.formFieldCollection[parseInt(i.toString(), 10)].\n                        FormField.radiobuttonItem[parseInt(j.toString(), 10)]);\n                    targetField = this_5.pdfViewer.formFieldCollections[this_5.pdfViewer.formFieldCollections.findIndex(function (el) { return (el.id + '_content' === formFieldsData[parseInt(i.toString(), 10)].FormField.id); })];\n                }\n                if ((undoElement != null || redoElement != null) && this_5.pdfViewer.annotation) {\n                    this_5.pdfViewer.annotation.addAction(this_5.pdfViewerBase.formFieldCollection[parseInt(i.toString(), 10)].FormField.pageNumber, null, this_5.pdfViewerBase.formFieldCollection[parseInt(i.toString(), 10)].FormField, 'FormField Value Change', '', undoElement, redoElement);\n                }\n            }\n        };\n        var this_5 = this;\n        for (var i = 0; i < formFieldsData.length; i++) {\n            _loop_5(i);\n        }\n        this.pdfViewerBase.setItemInSessionStorage(this.pdfViewerBase.formFieldCollection, '_formDesigner');\n        this.updateFormFieldSessions(targetField);\n    };\n    FormDesigner.prototype.getTextboxValue = function (event) {\n        var data = this.pdfViewerBase.getItemFromSessionStorage('_formDesigner');\n        var formFieldsData = JSON.parse(data);\n        var targetField = null;\n        var _loop_6 = function (i) {\n            if (formFieldsData[parseInt(i.toString(), 10)].Key.split('_')[0] === event.target.id.split('_')[0] ||\n                this_6.pdfViewer.nameTable[event.target.id.split('_')[0]].name === formFieldsData[parseInt(i.toString(), 10)].FormField.name) {\n                var oldValue = this_6.pdfViewerBase.formFieldCollection[parseInt(i.toString(), 10)].FormField.value;\n                formFieldsData[parseInt(i.toString(), 10)].FormField.value = event.target.value;\n                if (this_6.pdfViewer.enableHtmlSanitizer) {\n                    formFieldsData[parseInt(i.toString(), 10)].FormField.value =\n                        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.SanitizeHtmlHelper.sanitize(formFieldsData[parseInt(i.toString(), 10)].FormField.value);\n                }\n                this_6.pdfViewer.nameTable[formFieldsData[parseInt(i.toString(), 10)].Key.split('_')[0]].value = formFieldsData[parseInt(i.toString(), 10)].FormField.value;\n                this_6.pdfViewerBase.formFieldCollection[parseInt(i.toString(), 10)].FormField.value =\n                    formFieldsData[parseInt(i.toString(), 10)].FormField.value;\n                if (formFieldsData[parseInt(i.toString(), 10)].Key.split('_')[0] !== event.target.id.split('_')[0]) {\n                    var element = document.getElementById(formFieldsData[parseInt(i.toString(), 10)].Key.split('_')[0] + '_content_html_element');\n                    if (element && element.firstElementChild && element.firstElementChild.firstElementChild) {\n                        var inputElement = element.firstElementChild.firstElementChild;\n                        inputElement.value = formFieldsData[parseInt(i.toString(), 10)].FormField.value;\n                    }\n                }\n                this_6.updateFormFieldCollections(this_6.pdfViewerBase.formFieldCollection[parseInt(i.toString(), 10)].FormField);\n                targetField = this_6.pdfViewer.formFieldCollections[this_6.pdfViewer.formFieldCollections.findIndex(function (el) { return (el.id + '_content' === formFieldsData[parseInt(i.toString(), 10)].FormField.id); })];\n                this_6.pdfViewer.fireFormFieldPropertiesChangeEvent('formFieldPropertiesChange', this_6.pdfViewerBase.formFieldCollection[parseInt(i.toString(), 10)].FormField, this_6.pdfViewerBase.formFieldCollection[parseInt(i.toString(), 10)].FormField.pageNumber, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, oldValue, event.target.value);\n                if (this_6.pdfViewer.annotation) {\n                    this_6.pdfViewer.annotation.addAction(this_6.pdfViewerBase.formFieldCollection[parseInt(i.toString(), 10)].FormField.pageNumber, null, this_6.pdfViewerBase.formFieldCollection[parseInt(i.toString(), 10)].FormField, 'FormField Value Change', '', oldValue, event.target.value);\n                }\n            }\n        };\n        var this_6 = this;\n        for (var i = 0; i < formFieldsData.length; i++) {\n            _loop_6(i);\n        }\n        this.pdfViewerBase.setItemInSessionStorage(this.pdfViewerBase.formFieldCollection, '_formDesigner');\n        this.updateFormFieldSessions(targetField);\n    };\n    FormDesigner.prototype.inputElementClick = function (event) {\n        event.target.focus();\n    };\n    FormDesigner.prototype.updateFormFieldSessions = function (field) {\n        var fieldData = this.pdfViewerBase.getItemFromSessionStorage('_formfields');\n        var formFieldsDatas = JSON.parse(fieldData);\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(formFieldsDatas) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(field)) {\n            for (var x = 0; x < formFieldsDatas.length; x++) {\n                if (formFieldsDatas[parseInt(x.toString(), 10)].ActualFieldName === field.name) {\n                    if (field.type === 'Textbox' || field.type === 'PasswordField') {\n                        formFieldsDatas[parseInt(x.toString(), 10)].Value = field.value;\n                    }\n                    else if (field.type === 'Checkbox') {\n                        formFieldsDatas[parseInt(x.toString(), 10)].Selected = field.isChecked;\n                    }\n                    else if (field.type === 'RadioButton') {\n                        formFieldsDatas[parseInt(x.toString(), 10)].Selected = field.isSelected;\n                    }\n                    else if (field.type === 'DropdownList') {\n                        formFieldsDatas[parseInt(x.toString(), 10)].Value = field.value;\n                    }\n                    else if (field.type === 'ListBox') {\n                        formFieldsDatas[parseInt(x.toString(), 10)].Value = field.value;\n                    }\n                }\n            }\n            this.pdfViewerBase.setItemInSessionStorage(formFieldsDatas, '_formfields');\n        }\n    };\n    FormDesigner.prototype.focusFormFields = function (event) {\n        var currentTarget = event.target;\n        if (currentTarget || currentTarget.className === 'e-pv-checkbox-outer-div') {\n            var colorBorder = (currentTarget.style.borderColor === 'transparent' ? '#000000' : currentTarget.style.borderColor);\n            currentTarget.style.boxShadow = '0 0 5px ' + colorBorder;\n        }\n        if (currentTarget && (currentTarget.className === 'e-pv-radiobtn-container' || currentTarget.className === 'e-pv-radio-btn' || currentTarget.className === 'e-pv-radiobtn-span') && currentTarget.style.borderColor === 'transparent') {\n            var colorBorder = (currentTarget.style.borderColor === 'transparent' ? '#000000' : currentTarget.style.borderColor);\n            currentTarget.parentElement.style.boxShadow = '0px 0px 5px ' + colorBorder;\n        }\n        if (currentTarget && (currentTarget.className === 'e-pv-radiobtn-container' || currentTarget.className === 'e-pv-radio-btn' || currentTarget.className === 'e-pv-radiobtn-span')) {\n            currentTarget.parentElement.style.boxShadow = currentTarget.style.borderColor + '0px 0px 5px ' + currentTarget.style.borderWidth;\n        }\n    };\n    FormDesigner.prototype.blurFormFields = function (event) {\n        var currentTarget = event.target;\n        currentTarget.style.boxShadow = '';\n        if (currentTarget.type === 'radio' && currentTarget.style.borderColor === 'transparent') {\n            var colorBorder = (currentTarget.style.borderColor === 'transparent' ? '#000000' : currentTarget.style.borderColor);\n            currentTarget.parentElement.style.boxShadow = '0px 0px 0px ' + colorBorder;\n        }\n        if (currentTarget.type === 'radio') {\n            currentTarget.parentElement.style.boxShadow = currentTarget.style.borderColor + '0px 0px 0px ' + currentTarget.style.borderWidth;\n        }\n    };\n    FormDesigner.prototype.setTextBoxFontStyle = function (fontStyle) {\n        return { isBold: (fontStyle & _base_types__WEBPACK_IMPORTED_MODULE_9__.FontStyle.Bold) === _base_types__WEBPACK_IMPORTED_MODULE_9__.FontStyle.Bold,\n            isItalic: (fontStyle & _base_types__WEBPACK_IMPORTED_MODULE_9__.FontStyle.Italic) === _base_types__WEBPACK_IMPORTED_MODULE_9__.FontStyle.Italic,\n            isStrikeout: (fontStyle & _base_types__WEBPACK_IMPORTED_MODULE_9__.FontStyle.Strikethrough) === _base_types__WEBPACK_IMPORTED_MODULE_9__.FontStyle.Strikethrough,\n            isUnderline: (fontStyle & _base_types__WEBPACK_IMPORTED_MODULE_9__.FontStyle.Underline) === _base_types__WEBPACK_IMPORTED_MODULE_9__.FontStyle.Underline };\n    };\n    /**\n     * Adds form field to the PDF page.\n     *\n     * @param {FormFieldType} formFieldType - It describes about the form field type\n     * @param {TextFieldSettings} options - It describes about the options\n     * @param {boolean} isCollection - It describes about the isCollection\n     * @param {string} id - It describes about the id\n     * @returns {HTMLElement} - html element\n     */\n    FormDesigner.prototype.addFormField = function (formFieldType, options, isCollection, id) {\n        var HTMLElement = this.addField(formFieldType, options, isCollection, id, true);\n        return HTMLElement;\n    };\n    /**\n     * Adds form field to the PDF page.\n     *\n     * @param {FormFieldType} formFieldType - It describes about the form field type\n     * @param {TextFieldSettings} options - It describes about the options\n     * @param {boolean} isCollection - It describes about the isCollection\n     * @param {string} id - It describes about the id\n     * @param {boolean} isAddedProgrammatically - It describes about the isAddedProgrammatically\n     * @private\n     * @returns {HTMLElement} - html element\n     */\n    FormDesigner.prototype.addField = function (formFieldType, options, isCollection, id, isAddedProgrammatically) {\n        var obj = {\n            thickness: 1, bounds: { x: options.bounds.X, y: options.bounds.Y, width: options.bounds.Width, height: options.bounds.Height },\n            fontFamily: !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(options.fontFamily) ? options.fontFamily : 'Helvetica', fontSize: !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(options.fontSize) ? options.fontSize : 10,\n            color: !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(options.color) ? options.color : 'black', backgroundColor: !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(options.backgroundColor) ? options.backgroundColor : '#daeaf7ff',\n            alignment: !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(options.alignment) ? options.alignment : 'left', isReadonly: options.isReadOnly ? options.isReadOnly : false, rotateAngle: options.rotateAngle ? options.rotateAngle : options.rotationAngle, isTransparent: options.isTransparent, insertSpaces: options.insertSpaces, isChecked: options.isChecked, isMultiline: options.isMultiline, isSelected: options.isSelected, options: options.options, selectedIndex: options.selectedIndex, signatureIndicatorSettings: options.signatureIndicatorSettings, signatureType: options.signatureType, zIndex: options.zIndex\n        };\n        obj.customData = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(options.customData) ? options.customData : '';\n        obj.fontStyle = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(options.fontStyle) ? options.fontStyle : 'None';\n        obj.visibility = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(options.visibility) ? options.visibility : 'visible';\n        obj.value = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(options.value) ? options.value : '';\n        obj.isRequired = options.isRequired ? options.isRequired : false;\n        obj.isPrint = options.isPrint ? options.isPrint : true;\n        obj.pageNumber = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(options.pageNumber) ? options.pageNumber : this.pdfViewerBase.currentPageNumber;\n        obj.pageIndex = obj.pageNumber - 1;\n        obj.font = options.font;\n        obj.id = id;\n        if (isCollection || (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(isCollection)) {\n            this.setFormFieldIndex();\n        }\n        switch (formFieldType) {\n            case 'Textbox':\n                obj.formFieldAnnotationType = formFieldType;\n                obj.isMultiline = options.isMultiline;\n                obj.name = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(options.name) ? options.name : 'Textbox' + this.formFieldIndex;\n                obj.insertSpaces = options.insertSpaces;\n                obj.maxLength = options.maxLength;\n                obj.thickness = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(options.thickness) ? options.thickness : 1;\n                obj.borderColor = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(options.borderColor) ? options.borderColor : '#303030';\n                if (options.font) {\n                    obj.font = options.font;\n                }\n                else if (this.pdfViewer.textFieldSettings.fontStyle) {\n                    obj.font = this.setTextBoxFontStyle(this.pdfViewer.textFieldSettings.fontStyle);\n                }\n                break;\n            case 'Password':\n                obj.formFieldAnnotationType = 'PasswordField';\n                obj.name = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(options.name) ? options.name : 'Password' + this.formFieldIndex;\n                obj.maxLength = options.maxLength;\n                obj.thickness = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(options.thickness) ?\n                    options.thickness : 1;\n                obj.borderColor = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(options.borderColor) ? options.borderColor : '#303030';\n                break;\n            case 'DropDown':\n                obj.formFieldAnnotationType = 'DropdownList';\n                obj.name = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(options.name) ? options.name : 'Dropdown' + this.formFieldIndex;\n                obj.options = options.options ? options.options : [];\n                for (var i = 0; i < this.pdfViewer.formFieldCollection.length; i++) {\n                    var formField = this.pdfViewer.formFieldCollection[parseInt(i.toString(), 10)];\n                    if (formField.formFieldAnnotationType === 'DropdownList' && formField.name === obj.name) {\n                        obj.options = formField.options;\n                        break;\n                    }\n                }\n                obj.selectedIndex = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(options.selectedIndex) ? options.selectedIndex : [0];\n                obj.thickness = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(options.thickness) ?\n                    options.thickness : 1;\n                obj.borderColor = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(options.borderColor) ? options.borderColor : '#303030';\n                if (options.font) {\n                    obj.font = options.font;\n                }\n                else if (this.pdfViewer.DropdownFieldSettings.fontStyle) {\n                    obj.font = this.setTextBoxFontStyle(this.pdfViewer.DropdownFieldSettings.fontStyle);\n                }\n                break;\n            case 'ListBox':\n                obj.formFieldAnnotationType = formFieldType;\n                obj.name = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(options.name) ? options.name : 'List Box' + this.formFieldIndex;\n                obj.options = options.options ? options.options : [];\n                for (var i = 0; i < this.pdfViewer.formFieldCollection.length; i++) {\n                    var formField = this.pdfViewer.formFieldCollection[parseInt(i.toString(), 10)];\n                    if (formField.formFieldAnnotationType === formFieldType && formField.name === obj.name) {\n                        obj.options = formField.options;\n                        break;\n                    }\n                }\n                obj.selectedIndex = options.selectedIndex;\n                obj.thickness = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(options.thickness) ?\n                    options.thickness : 1;\n                obj.borderColor = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(options.borderColor) ? options.borderColor : '#303030';\n                if (options.font) {\n                    obj.font = options.font;\n                }\n                else if (this.pdfViewer.listBoxFieldSettings.fontStyle) {\n                    obj.font = this.setTextBoxFontStyle(this.pdfViewer.listBoxFieldSettings.fontStyle);\n                }\n                break;\n            case 'CheckBox':\n                obj.formFieldAnnotationType = 'Checkbox';\n                obj.bounds = { x: options.bounds.X, y: options.bounds.Y, width: options.bounds.Width, height: options.bounds.Height };\n                obj.backgroundColor = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(options.backgroundColor) ? options.backgroundColor : '#daeaf7ff';\n                obj.isReadonly = options.isReadOnly ? options.isReadOnly : false;\n                obj.name = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(options.name) ? options.name : 'Check Box' + this.formFieldIndex;\n                obj.isChecked = options.isChecked ? options.isChecked : false;\n                obj.visibility = options.visibility ? options.visibility : 'visible';\n                obj.isRequired = options.isRequired ? options.isRequired : false;\n                obj.thickness = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(options.thickness) ?\n                    options.thickness : 1;\n                obj.borderColor = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(options.borderColor) ? options.borderColor : '#303030';\n                break;\n            case 'RadioButton':\n                obj.formFieldAnnotationType = formFieldType;\n                obj.bounds = { x: options.bounds.X, y: options.bounds.Y, width: options.bounds.Width, height: options.bounds.Height };\n                obj.backgroundColor = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(options.backgroundColor) ? options.backgroundColor : '#daeaf7ff';\n                obj.isReadonly = options.isReadOnly ? options.isReadOnly : false;\n                obj.name = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(options.name) ? options.name : 'Radio Button' + this.formFieldIndex;\n                obj.isSelected = options.isSelected ? options.isSelected : false;\n                obj.visibility = options.visibility ? options.visibility : 'visible';\n                obj.isRequired = options.isRequired ? options.isRequired : false;\n                obj.thickness = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(options.thickness) ?\n                    options.thickness : 1;\n                obj.borderColor = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(options.borderColor) ? options.borderColor : '#303030';\n                break;\n            case 'SignatureField': {\n                obj.formFieldAnnotationType = formFieldType;\n                obj.bounds = { x: options.bounds.X, y: options.bounds.Y, width: options.bounds.Width, height: options.bounds.Height };\n                obj.isReadonly = this.pdfViewer.signatureFieldSettings.isReadOnly ? this.pdfViewer.signatureFieldSettings.isReadOnly :\n                    (options.isReadOnly ? options.isReadOnly : false);\n                obj.backgroundColor = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(options.backgroundColor) ?\n                    _base_pdfviewer_utlis__WEBPACK_IMPORTED_MODULE_12__.PdfViewerUtils.setTransparencyToHex(this.colorNametoHashValue(options.backgroundColor)) : obj.isReadonly ? 'trasnparent' : '#daeaf7ff';\n                obj.borderColor = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(options.borderColor) ?\n                    options.borderColor : '#303030';\n                obj.fontSize = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(options.fontSize) ?\n                    options.fontSize : 10;\n                obj.fontStyle = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(options.fontStyle) ? options.fontStyle : 'None';\n                obj.name = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(options.name) ? options.name : 'Signature' + this.formFieldIndex;\n                obj.isRequired = options.isRequired ? options.isRequired : false;\n                obj.thickness = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(options.thickness) ? options.thickness : 1;\n                var indicatorSettings = options.signatureIndicatorSettings ?\n                    options.signatureIndicatorSettings :\n                    options.initialIndicatorSettings;\n                obj.signatureIndicatorSettings = indicatorSettings ? { opacity: indicatorSettings.opacity ? indicatorSettings.opacity : 1,\n                    backgroundColor: indicatorSettings.backgroundColor ? indicatorSettings.backgroundColor : 'orange',\n                    width: indicatorSettings.width ? indicatorSettings.width : 19,\n                    height: indicatorSettings.height ? indicatorSettings.height : 10, fontSize: indicatorSettings.fontSize ?\n                        indicatorSettings.fontSize : 10,\n                    text: indicatorSettings.text ? indicatorSettings.text : null, color: indicatorSettings.color ? indicatorSettings.color : 'black'\n                } : null;\n                break;\n            }\n            case 'InitialField': {\n                obj.formFieldAnnotationType = formFieldType;\n                obj.bounds = { x: options.bounds.X, y: options.bounds.Y, width: options.bounds.Width, height: options.bounds.Height };\n                obj.isReadonly = this.pdfViewer.initialFieldSettings.isReadOnly ?\n                    this.pdfViewer.initialFieldSettings.isReadOnly : (options.isReadOnly ? options.isReadOnly : false);\n                obj.backgroundColor = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(options.backgroundColor) ?\n                    _base_pdfviewer_utlis__WEBPACK_IMPORTED_MODULE_12__.PdfViewerUtils.setTransparencyToHex(this.colorNametoHashValue(options.backgroundColor)) : obj.isReadonly ? 'trasnparent' :\n                    '#daeaf7ff';\n                obj.borderColor = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(options.borderColor) ?\n                    options.borderColor : '#303030';\n                obj.fontSize = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(options.fontSize) ?\n                    options.fontSize : 10;\n                obj.thickness = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(options.thickness) ? options.thickness : 1;\n                obj.fontStyle = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(options.fontStyle) ? options.fontStyle : 'None';\n                obj.name = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(options.name) ? options.name : 'Initial' + this.formFieldIndex;\n                obj.isRequired = options.isRequired ? options.isRequired : false;\n                obj.isInitialField = true;\n                var indicatorSettingsInitial = options.initialIndicatorSettings ?\n                    options.initialIndicatorSettings :\n                    options.signatureIndicatorSettings;\n                obj.signatureIndicatorSettings = indicatorSettingsInitial ? {\n                    opacity: indicatorSettingsInitial.opacity ?\n                        indicatorSettingsInitial.opacity : 1,\n                    backgroundColor: indicatorSettingsInitial.backgroundColor ? indicatorSettingsInitial.backgroundColor : 'orange',\n                    width: indicatorSettingsInitial.width ? indicatorSettingsInitial.width : 19,\n                    height: indicatorSettingsInitial.height ? indicatorSettingsInitial.height : 10,\n                    fontSize: indicatorSettingsInitial.fontSize ? indicatorSettingsInitial.fontSize : 10,\n                    text: indicatorSettingsInitial.text ? indicatorSettingsInitial.text : null, color: indicatorSettingsInitial.color ? indicatorSettingsInitial.color : 'black'\n                } : null;\n                break;\n            }\n        }\n        obj.tooltip = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(options.tooltip) ? options.tooltip : '';\n        this.setFormFieldIndex();\n        var HTMLElement = null;\n        if (isCollection) {\n            this.addFieldCollection(obj);\n        }\n        else {\n            HTMLElement = this.drawFormField(obj, isAddedProgrammatically);\n        }\n        return HTMLElement;\n    };\n    FormDesigner.prototype.addFieldCollection = function (node) {\n        var formField = {\n            id: (0,_syncfusion_ej2_drawings__WEBPACK_IMPORTED_MODULE_1__.randomId)(), name: node.name, value: node.value,\n            type: node.formFieldAnnotationType, isReadOnly: node.isReadonly, fontFamily: node.fontFamily,\n            fontSize: node.fontSize, fontStyle: node.fontStyle, color: node.color,\n            backgroundColor: node.backgroundColor, isMultiline: node.isMultiline,\n            alignment: node.alignment, visibility: node.visibility,\n            maxLength: node.maxLength, isRequired: node.isRequired,\n            isPrint: node.isPrint, isSelected: node.isSelected,\n            insertSpaces: node.insertSpaces, isChecked: node.isChecked,\n            tooltip: node.tooltip, bounds: node.bounds, thickness: node.thickness,\n            pageIndex: node.pageIndex, borderColor: node.borderColor,\n            signatureIndicatorSettings: node.signatureIndicatorSettings,\n            rotateAngle: node.rotateAngle, isTransparent: node.isTransparent,\n            options: node.options, selectedIndex: node.selectedIndex,\n            signatureType: node.signatureType, zIndex: node.zIndex,\n            pageNumber: node.pageNumber, customData: node.customData\n        };\n        this.pdfViewer.formFieldCollections.push(formField);\n    };\n    /**\n     * @param {PdfFormFieldBaseModel} obj - It describes about the pdf formfield base model\n     * @param {boolean} isAddedProgrammatically - It describes about the isAddedProgrammatically\n     * @private\n     * @returns {void}\n     */\n    FormDesigner.prototype.drawFormField = function (obj, isAddedProgrammatically) {\n        var node = this.pdfViewer.add(obj);\n        var index = this.pdfViewer.formFieldCollections.findIndex(function (el) { return el.id === node.id; });\n        var data;\n        if (index > -1) {\n            data = this.pdfViewer.formFieldCollections[parseInt(index.toString(), 10)];\n            if (this.isFormFieldUpdated) {\n                this.updateNodeBasedOnCollections(node, data);\n            }\n        }\n        var formFieldIndex = this.pdfViewer.formFieldCollection.findIndex(function (el) { return el.id === node.id; });\n        if (formFieldIndex < 0) {\n            this.pdfViewer.formFieldCollection.push(node);\n        }\n        else if (formFieldIndex > -1) {\n            this.pdfViewer.formFieldCollection[parseInt(formFieldIndex.toString(), 10)] = node;\n        }\n        var formField = {\n            id: node.id, name: node.name, value: node.value,\n            type: node.formFieldAnnotationType, isReadOnly: node.isReadonly, fontFamily: node.fontFamily,\n            fontSize: node.fontSize, fontStyle: node.fontStyle, color: node.color,\n            backgroundColor: node.backgroundColor, isMultiline: node.isMultiline,\n            alignment: node.alignment, visibility: node.visibility,\n            maxLength: node.maxLength, isRequired: node.isRequired,\n            isPrint: node.isPrint, isSelected: node.isSelected,\n            isChecked: node.isChecked, tooltip: node.tooltip,\n            bounds: node.bounds, pageIndex: node.pageIndex, thickness: node.thickness,\n            borderColor: node.borderColor,\n            signatureIndicatorSettings: node.signatureIndicatorSettings,\n            insertSpaces: node.insertSpaces, rotateAngle: node.rotateAngle,\n            isTransparent: node.isTransparent, options: node.options,\n            selectedIndex: node.selectedIndex, signatureType: node.signatureType,\n            zIndex: node.zIndex, pageNumber: node.pageNumber,\n            customData: node.customData\n        };\n        if (index > -1) {\n            this.pdfViewer.formFieldCollections[parseInt(index.toString(), 10)] = formField;\n        }\n        else {\n            this.pdfViewer.formFieldCollections.push(formField);\n        }\n        var HTMLElement = this.drawHTMLContent(node.formFieldAnnotationType, node.wrapper.children[0], node, obj.pageNumber - 1, this.pdfViewer, null, isAddedProgrammatically);\n        return HTMLElement;\n    };\n    /**\n     * Update the node value based on the collections\n     *\n     * @param {PdfFormFieldBaseModel} node - It describes about the node\n     * @param {any} data - It describes about the data\n     * @returns {void}\n     */\n    FormDesigner.prototype.updateNodeBasedOnCollections = function (node, data) {\n        node.name = data.name;\n        node.value = data.value;\n        node.isReadonly = data.isReadOnly;\n        node.fontFamily = data.fontFamily;\n        node.fontSize = data.fontSize;\n        node.fontStyle = data.fontStyle.toString();\n        node.color = data.color;\n        node.backgroundColor = data.backgroundColor;\n        node.alignment = data.alignment;\n        node.visibility = data.visibility;\n        node.maxLength = data.maxLength;\n        node.isRequired = data.isRequired;\n        node.isPrint = data.isPrint;\n        node.isSelected = data.isSelected;\n        node.isChecked = data.isChecked;\n        node.tooltip = data.tooltip;\n        node.thickness = data.thickness;\n        node.borderColor = data.borderColor;\n        node.customData = data.customData;\n    };\n    /**\n     * Set the form field mode to add the form field on user interaction.\n     *\n     * @param {FormFieldType} formFieldType - It describes about the form field Id\n     * @param {Item} options - It describes about the options\n     * @returns {void}\n     */\n    FormDesigner.prototype.setFormFieldMode = function (formFieldType, options) {\n        if (this.pdfViewer.selectedItems && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.pdfViewer.selectedItems.annotations) &&\n            this.pdfViewer.selectedItems.annotations.length > 0 && this.pdfViewerBase.activeElements &&\n            !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.pdfViewerBase.activeElements.activePageID)) {\n            this.pdfViewer.clearSelection(this.pdfViewerBase.activeElements.activePageID);\n        }\n        var formFieldElement = document.getElementById('FormField_helper_html_element');\n        if (this.pdfViewer.isFormDesignerToolbarVisible && formFieldElement) {\n            formFieldElement.remove();\n        }\n        this.isAddFormFieldUi = true;\n        switch (formFieldType) {\n            case 'Textbox':\n                this.activateTextboxElement(formFieldType);\n                this.isSetFormFieldMode = true;\n                break;\n            case 'Password': {\n                var passwordType = 'PasswordField';\n                this.activatePasswordField(passwordType);\n                this.isSetFormFieldMode = true;\n                break;\n            }\n            case 'CheckBox': {\n                var checkboxType = 'Checkbox';\n                this.activateCheckboxElement(checkboxType);\n                this.isSetFormFieldMode = true;\n                break;\n            }\n            case 'RadioButton':\n                this.activateRadioButtonElement(formFieldType);\n                this.isSetFormFieldMode = true;\n                break;\n            case 'DropDown': {\n                var dropdownType = 'DropdownList';\n                this.activateDropDownListElement(dropdownType, options);\n                this.isSetFormFieldMode = true;\n                break;\n            }\n            case 'ListBox':\n                this.activateListboxElement(formFieldType, options);\n                this.isSetFormFieldMode = true;\n                break;\n            case 'SignatureField':\n            case 'InitialField':\n                this.activateSignatureBoxElement(formFieldType);\n                this.isSetFormFieldMode = true;\n        }\n    };\n    /**\n     * Reset the form fields into its original state.\n     *\n     * @param {string} formFieldId - It describes about the form field id\n     * @returns {void}\n     */\n    FormDesigner.prototype.resetFormField = function (formFieldId) {\n        var formField = this.getFormField(formFieldId);\n        if (formField) {\n            switch (formField.formFieldAnnotationType) {\n                case 'Textbox':\n                    this.resetTextboxProperties(formField);\n                    break;\n                case 'PasswordField':\n                    this.resetPasswordProperties(formField);\n                    break;\n                case 'Checkbox':\n                    this.resetCheckboxProperties(formField);\n                    break;\n                case 'RadioButton':\n                    this.resetRadioButtonProperties(formField);\n                    break;\n                case 'DropdownList':\n                    this.resetDropdownListProperties(formField);\n                    break;\n                case 'ListBox':\n                    this.resetListBoxProperties(formField);\n                    break;\n                case 'SignatureField':\n                case 'InitialField':\n                    this.resetSignatureTextboxProperties(formField);\n                    break;\n            }\n            this.updateSessionFormFieldProperties(formField);\n        }\n    };\n    /**\n     * Select the form field in the PDF Viewer.\n     *\n     * @param {string} formFieldId - It describes about the form field id\n     * @returns {void}\n     */\n    FormDesigner.prototype.selectFormField = function (formFieldId) {\n        var formField = this.getFormField(formFieldId);\n        if (formField) {\n            this.isProgrammaticSelection = true;\n            this.pdfViewer.select([formField.id]);\n            this.isProgrammaticSelection = false;\n        }\n    };\n    /**\n     * Update the form field with the given properties and value.\n     *\n     * @param {string} formFieldId - It describes about the form field Id\n     * @param {TextFieldSettings} options - It describes about the options\n     * @returns {void}\n     */\n    FormDesigner.prototype.updateFormField = function (formFieldId, options) {\n        var formField = this.getFormField(formFieldId);\n        this.isFormFieldUpdated = true;\n        var selectedItem = this.pdfViewer.selectedItems.formFields[0];\n        if (formField) {\n            if (!formField.isReadonly || (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(options.isReadOnly) && !options.isReadOnly)) {\n                switch (formField.formFieldAnnotationType) {\n                    case 'Textbox':\n                    case 'PasswordField':\n                    case 'DropdownList':\n                    case 'ListBox':\n                    case 'SignatureField':\n                    case 'InitialField': {\n                        var inputElement = document.getElementById(formField.id + '_content_html_element');\n                        if (inputElement) {\n                            inputElement = inputElement.firstElementChild.firstElementChild;\n                            this.isAddFormFieldProgrammatically = true;\n                            this.formFieldPropertyChange(formField, options, inputElement, selectedItem);\n                        }\n                        else {\n                            this.updateFormFieldsInCollections(formFieldId, options);\n                            this.updateDesignerSession(formFieldId, options);\n                            this.rerenderFormFields(formFieldId.pageIndex);\n                        }\n                        break;\n                    }\n                    case 'RadioButton': {\n                        var radioButtonDivDivElement = document.getElementById(formField.id + '_content_html_element');\n                        if (radioButtonDivDivElement) {\n                            radioButtonDivDivElement = radioButtonDivDivElement.firstElementChild.firstElementChild.firstElementChild;\n                            this.formFieldPropertyChange(formField, options, radioButtonDivDivElement);\n                        }\n                        else {\n                            this.updateFormFieldsInCollections(formFieldId, options);\n                            this.updateDesignerSession(formFieldId, options);\n                        }\n                        break;\n                    }\n                    case 'Checkbox': {\n                        var checkboxDivElement = document.getElementById(formField.id + '_content_html_element');\n                        if (checkboxDivElement) {\n                            checkboxDivElement = checkboxDivElement.firstElementChild.firstElementChild.lastElementChild;\n                            this.formFieldPropertyChange(formField, options, checkboxDivElement);\n                        }\n                        else {\n                            this.updateFormFieldsInCollections(formFieldId, options);\n                            this.updateDesignerSession(formFieldId, options);\n                        }\n                        break;\n                    }\n                }\n            }\n        }\n        else {\n            this.updateFormFieldsInCollections(formFieldId, options);\n            this.updateFormFieldsInFieldsSession(formFieldId, options);\n        }\n    };\n    /**\n     * Update the form field in the form designer session.\n     *\n     * @param {any} formFieldId - It describes about the form field id\n     * @param {any} options - It describes about the options\n     * @returns {void}\n     */\n    FormDesigner.prototype.updateDesignerSession = function (formFieldId, options) {\n        var fieldId = (typeof formFieldId === 'object') ? formFieldId.id : formFieldId;\n        var actualObject = this.pdfViewer.nameTable[\"\" + fieldId];\n        var bound = actualObject.bounds;\n        var wrapper = actualObject.wrapper.children[0];\n        var type = actualObject.formFieldAnnotationType;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(options.customData) && actualObject.customData !== options.customData) {\n            actualObject.customData = options.customData;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(options.name) && actualObject.name !== options.name) {\n            actualObject.name = options.name;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(options.borderColor) && actualObject.borderColor !== options.borderColor) {\n            actualObject.borderColor = options.borderColor;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(options.backgroundColor) && actualObject.backgroundColor !== options.backgroundColor) {\n            actualObject.backgroundColor = options.backgroundColor;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(options.value) && actualObject.value !== options.value) {\n            actualObject.value = options.value;\n        }\n        this.updateFormDesignerFieldInSessionStorage(bound, wrapper, type, actualObject);\n    };\n    /**\n     * Update the form field in the form field session.\n     *\n     * @param {any} formFieldId - It describes about the form field id\n     * @param {any} options - It describes about the options\n     * @returns {void}\n     */\n    FormDesigner.prototype.updateFormFieldsInFieldsSession = function (formFieldId, options) {\n        var fieldsData = this.pdfViewerBase.getItemFromSessionStorage('_formfields');\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(fieldsData)) {\n            var data = JSON.parse(fieldsData);\n            for (var x = 0; x < data.length; x++) {\n                if (data[\"\" + x].FieldName === formFieldId.name) {\n                    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(options.customData) && data[\"\" + x].CustomData !== options.customData) {\n                        data[\"\" + x].CustomData = options.customData;\n                    }\n                    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(options.backgroundColor) && data[\"\" + x].BackColor !== options.backgroundColor) {\n                        data[\"\" + x].BackColor = this.getRgbCode(options.backgroundColor);\n                    }\n                    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(options.borderColor) && data[\"\" + x].BorderColor !== options.borderColor) {\n                        data[\"\" + x].BorderColor = this.getRgbCode(options.borderColor);\n                    }\n                    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(options.name) && data[\"\" + x].Name !== options.name) {\n                        data[\"\" + x].Name = options.name;\n                    }\n                    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(options.value) && data[\"\" + x].Value !== options.value) {\n                        data[\"\" + x].Value = options.value;\n                    }\n                }\n            }\n            this.pdfViewerBase.setItemInSessionStorage(data, '_formfields');\n        }\n    };\n    /**\n     * Update the form field in the form field collections.\n     *\n     * @param {any} formFieldId - It describes about the form field id\n     * @param {any} options - It describes about the options\n     * @returns {void}\n     */\n    FormDesigner.prototype.updateFormFieldsInCollections = function (formFieldId, options) {\n        var formFieldCollection = this.pdfViewer.formFieldCollections;\n        var _loop_7 = function (i) {\n            var currentData = formFieldCollection[parseInt(i.toString(), 10)];\n            var fieldId = (typeof formFieldId === 'object') ? formFieldId.id : formFieldId;\n            if (currentData.id === fieldId) {\n                this_7.updateFormFieldData(currentData, options);\n                var formFieldIndex = this_7.pdfViewer.formFieldCollections.findIndex(function (el) { return el.id === fieldId; });\n                this_7.pdfViewer.formFieldCollections[parseInt(formFieldIndex.toString(), 10)] = currentData;\n            }\n        };\n        var this_7 = this;\n        for (var i = 0; i < formFieldCollection.length; i++) {\n            _loop_7(i);\n        }\n    };\n    /**\n     * Update the form field data based on the value\n     *\n     * @param {any} currentData - It describes about the current data\n     * @param {any} options - It describes about the options\n     * @returns {void}\n     */\n    FormDesigner.prototype.updateFormFieldData = function (currentData, options) {\n        if (options.name && currentData.name !== options.name) {\n            currentData.name = options.name;\n        }\n        if (currentData.type !== 'SignatureField' || currentData.type !== 'InitialField') {\n            if (options.thickness && currentData.thickness !== options.thickness) {\n                currentData.thickness = options.thickness;\n            }\n            if (options.borderColor) {\n                var borderColor = this.colorNametoHashValue(options.borderColor);\n                if (currentData.borderColor !== borderColor) {\n                    currentData.borderColor = borderColor;\n                }\n            }\n        }\n        if (options.backgroundColor) {\n            var backColor = this.colorNametoHashValue(options.backgroundColor);\n            if (currentData.backgroundColor !== backColor) {\n                currentData.backgroundColor = backColor;\n                var id = currentData.id;\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.pdfViewer.nameTable[\"\" + id])) {\n                    this.pdfViewer.nameTable[\"\" + id].backgroundColor = backColor;\n                }\n            }\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(options.customData) && currentData.customData !== options.customData) {\n            currentData.customData = options.customData;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(options.isReadOnly) && currentData.isReadonly !== options.isReadOnly) {\n            currentData.isReadOnly = options.isReadOnly;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(options.isRequired) && currentData.isRequired !== options.isRequired) {\n            currentData.isRequired = options.isRequired;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(options.isPrint) && currentData.isPrint !== options.isPrint) {\n            currentData.isPrint = options.isPrint;\n        }\n        if (options.visibility && currentData.visibility !== options.visibility) {\n            currentData.visibility = options.visibility;\n        }\n        if (options.tooltip && currentData.tooltip !== options.tooltip) {\n            currentData.tooltip = options.tooltip;\n        }\n        if (currentData.type === 'Checkbox' && (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(options.isChecked) && currentData.isChecked === options.isChecked)) {\n            currentData.isChecked = options.isChecked;\n        }\n        if (currentData.type === 'RadioButton' && (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(options.isSelected) && currentData.isSelected === options.isSelected)) {\n            currentData.isSelected = options.isSelected;\n        }\n        if ((currentData.type === 'DropdownList' || currentData.type === 'ListBox') && options.options) {\n            currentData.options = options.options;\n        }\n        if (currentData.type === 'Textbox' || currentData.type === 'SignatureField' || currentData.type === 'InitialField' ||\n            currentData.type === 'DropdownList' || currentData.type === 'ListBox' ||\n            currentData.type === 'PasswordField') {\n            if (options.value && currentData.value !== options.value) {\n                currentData.value = options.value;\n            }\n            if (options.fontSize && currentData.fontSize !== options.fontSize) {\n                currentData.fontSize = options.fontSize;\n            }\n            if (options.color) {\n                var color = this.colorNametoHashValue(options.color);\n                if (currentData.color !== color) {\n                    currentData.color = color;\n                }\n            }\n            if (currentData.type !== 'SignatureField') {\n                if (options.alignment && currentData.alignment !== options.alignment) {\n                    currentData.alignment = options.alignment;\n                }\n                if (options.maxLength && currentData.maxLength !== options.maxLength) {\n                    currentData.maxLength = options.maxLength;\n                }\n            }\n            if (currentData.type !== 'PasswordField') {\n                if (options.fontFamily && currentData.fontFamily !== options.fontFamily) {\n                    currentData.fontFamily = options.fontFamily;\n                }\n                if (options.fontStyle && currentData.fontStyle !== options.fontStyle) {\n                    currentData.fontStyle = options.fontStyle;\n                }\n            }\n        }\n    };\n    FormDesigner.prototype.formFieldPropertyChange = function (formFieldObject, options, htmlElement, selectedItem) {\n        var isValueChanged = false;\n        var isFontFamilyChanged = false;\n        var isFontSizeChanged = false;\n        var isFontStyleChanged = false;\n        var isColorChanged = false;\n        var isBackgroundColorChanged = false;\n        var isBorderColorChanged = false;\n        var isBorderWidthChanged = false;\n        var isAlignmentChanged = false;\n        var isReadOnlyChanged = false;\n        var isVisibilityChanged = false;\n        var isMaxLengthChanged = false;\n        var isRequiredChanged = false;\n        var isPrintChanged = false;\n        var isToolTipChanged = false;\n        var isCustomDataChanged = false;\n        var isNameChanged = false;\n        var oldValue;\n        var newValue;\n        var zoomValue = this.pdfViewerBase.getZoomFactor();\n        if (options.name) {\n            if (formFieldObject.name !== options.name) {\n                isNameChanged = true;\n            }\n            formFieldObject.name = options.name;\n            var designerName = document.getElementById(formFieldObject.id + '_designer_name');\n            designerName.innerHTML = formFieldObject.name;\n            designerName.style.fontSize = formFieldObject.fontSize ? (formFieldObject.fontSize * zoomValue) + 'px' : (10 * zoomValue) + 'px';\n            htmlElement.name = options.name;\n            this.pdfViewer.nameTable[formFieldObject.id.split('_')[0]].name = formFieldObject.name;\n            if (isNameChanged) {\n                this.updateFormFieldPropertiesChanges('formFieldPropertiesChange', formFieldObject, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, oldValue, newValue, isNameChanged);\n            }\n        }\n        if (formFieldObject.formFieldAnnotationType) {\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(options.thickness)) {\n                if (formFieldObject.thickness !== options.thickness) {\n                    isBorderWidthChanged = true;\n                    oldValue = formFieldObject.thickness;\n                    newValue = options.thickness;\n                }\n                htmlElement.style.borderWidth = options.thickness.toString() + 'px';\n                formFieldObject.thickness = options.thickness;\n                this.pdfViewer.nameTable[formFieldObject.id.split('_')[0]].thickness = options.thickness;\n                if (isBorderWidthChanged) {\n                    this.updateFormFieldPropertiesChanges('formFieldPropertiesChange', formFieldObject, false, false, false, false, false, false, false, isBorderWidthChanged, false, false, false, false, false, false, false, false, oldValue, newValue);\n                }\n            }\n            if (options.borderColor) {\n                var borderColor = this.colorNametoHashValue(options.borderColor);\n                if (formFieldObject.borderColor !== borderColor) {\n                    isBorderColorChanged = true;\n                    oldValue = formFieldObject.borderColor;\n                    newValue = borderColor;\n                }\n                formFieldObject.borderColor = borderColor;\n                htmlElement.style.borderColor = borderColor;\n                if (formFieldObject.formFieldAnnotationType === 'RadioButton') {\n                    htmlElement.parentElement.style.boxShadow = borderColor + ' 0px 0px 0px ' + formFieldObject.thickness + 'px';\n                    this.setToolTip(options.tooltip, htmlElement.parentElement);\n                }\n                this.pdfViewer.nameTable[formFieldObject.id.split('_')[0]].borderColor = borderColor;\n                if (isBorderColorChanged) {\n                    this.updateFormFieldPropertiesChanges('formFieldPropertiesChange', formFieldObject, false, false, false, false, false, false, isBorderColorChanged, false, false, false, false, false, false, false, false, false, oldValue, newValue);\n                }\n            }\n        }\n        if (options.backgroundColor) {\n            var backColor = this.colorNametoHashValue(options.backgroundColor);\n            backColor = formFieldObject.formFieldAnnotationType === 'SignatureField' || formFieldObject.formFieldAnnotationType ===\n                'InitialField' ? _base_pdfviewer_utlis__WEBPACK_IMPORTED_MODULE_12__.PdfViewerUtils.setTransparencyToHex(backColor) : _base_pdfviewer_utlis__WEBPACK_IMPORTED_MODULE_12__.PdfViewerUtils.removeAlphaValueFromHex(backColor);\n            if (formFieldObject.backgroundColor !== backColor) {\n                isBackgroundColorChanged = true;\n                oldValue = formFieldObject.backgroundColor;\n                newValue = backColor;\n            }\n            formFieldObject.backgroundColor = backColor;\n            if (formFieldObject.formFieldAnnotationType === 'SignatureField' || formFieldObject.formFieldAnnotationType === 'InitialField') {\n                htmlElement.parentElement.style.background = backColor;\n            }\n            else {\n                htmlElement.style.background = backColor;\n            }\n            if (formFieldObject.formFieldAnnotationType === 'RadioButton') {\n                htmlElement.parentElement.style.background = formFieldObject.backgroundColor;\n            }\n            this.pdfViewer.nameTable[formFieldObject.id.split('_')[0]].backgroundColor = backColor;\n            if (isBackgroundColorChanged) {\n                this.updateFormFieldPropertiesChanges('formFieldPropertiesChange', formFieldObject, false, false, false, false, false, isBackgroundColorChanged, false, false, false, false, false, false, false, false, false, false, oldValue, newValue);\n            }\n        }\n        if (options.bounds) {\n            formFieldObject.bounds = { x: options.bounds.X, y: options.bounds.Y, width: options.bounds.Width,\n                height: options.bounds.Height };\n            var formField_1 = this.pdfViewer.nameTable[formFieldObject.id.split('_')[0]];\n            formField_1.bounds = { x: options.bounds.X, y: options.bounds.Y, width: options.bounds.Width, height: options.bounds.Height };\n            formField_1.wrapper.bounds = new _syncfusion_ej2_drawings__WEBPACK_IMPORTED_MODULE_1__.Rect(options.bounds.X, options.bounds.Y, options.bounds.Width, options.bounds.Height);\n            this.pdfViewer.drawing.nodePropertyChange(formField_1, {\n                bounds: {\n                    x: formField_1.wrapper.bounds.x, y: formField_1.wrapper.bounds.y,\n                    width: formField_1.wrapper.bounds.width, height: formField_1.wrapper.bounds.height\n                }\n            });\n            var element = formField_1.wrapper.children[0];\n            var point = (0,_syncfusion_ej2_drawings__WEBPACK_IMPORTED_MODULE_1__.cornersPointsBeforeRotation)(formField_1.wrapper.children[0]).topLeft;\n            var hEment = document.getElementById(element.id + '_html_element');\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(hEment)) {\n                hEment.setAttribute('style', 'height:' + (element.actualSize.height * zoomValue) + 'px; width:' + (element.actualSize.width * zoomValue) +\n                    'px;left:' + point.x * zoomValue + 'px; top:' + point.y * zoomValue + 'px;' +\n                    'position:absolute;transform:rotate(' + (element.rotateAngle + element.parentTransform) + 'deg);' +\n                    'pointer-events:' + ((this.pdfViewer.designerMode) ? 'none' : 'all')\n                    + ';visibility:' + ((element.visible) ? 'visible' : 'hidden') + ';opacity:' + element.style.opacity + ';');\n            }\n            this.isFormFieldSizeUpdated = true;\n            this.pdfViewer.select([formFieldObject.id]);\n            if (formField_1.formFieldAnnotationType === 'RadioButton' || formField_1.formFieldAnnotationType === 'Checkbox') {\n                this.updateHTMLElement(formFieldObject);\n            }\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(options.isRequired)) {\n            if (formFieldObject.isRequired !== options.isRequired) {\n                isRequiredChanged = true;\n                oldValue = formFieldObject.isRequired;\n                newValue = options.isRequired;\n            }\n            formFieldObject.isRequired = options.isRequired;\n            this.setRequiredToElement(formFieldObject, htmlElement, options.isRequired);\n            this.setRequiredToFormField(formFieldObject, options.isRequired);\n            this.pdfViewer.nameTable[formFieldObject.id.split('_')[0]].isRequired = options.isRequired;\n            if (isRequiredChanged) {\n                this.updateFormFieldPropertiesChanges('formFieldPropertiesChange', formFieldObject, false, false, false, false, false, false, false, false, false, false, false, false, isRequiredChanged, false, false, false, oldValue, newValue);\n            }\n        }\n        if (options.visibility) {\n            if (formFieldObject.visibility !== options.visibility) {\n                isVisibilityChanged = true;\n                oldValue = formFieldObject.visibility;\n                newValue = options.visibility;\n            }\n            formFieldObject.visibility = options.visibility;\n            htmlElement.style.visibility = options.visibility;\n            if (formFieldObject.formFieldAnnotationType === 'RadioButton') {\n                htmlElement.parentElement.style.visibility = formFieldObject.visibility;\n            }\n            if (formFieldObject.formFieldAnnotationType === 'SignatureField' || formFieldObject.formFieldAnnotationType === 'InitialField') {\n                htmlElement.parentElement.style.visibility = formFieldObject.visibility;\n                var annotation = this.pdfViewer.nameTable[formFieldObject.id.split('_')[0] + '_content'];\n                var data = this.pdfViewerBase.getItemFromSessionStorage('_formDesigner');\n                var formFieldsData = JSON.parse(data);\n                var index = this.getFormFiledIndex(formFieldObject.id.split('_')[0]);\n                if (formFieldObject.visibility === 'hidden') {\n                    if (annotation) {\n                        this.hideSignatureValue(formFieldObject, annotation, index, formFieldsData);\n                    }\n                }\n                else {\n                    if (annotation) {\n                        this.showSignatureValue(formFieldObject, oldValue, annotation, index, formFieldsData);\n                    }\n                }\n            }\n            this.pdfViewer.nameTable[formFieldObject.id.split('_')[0]].visibility = options.visibility;\n            if (isVisibilityChanged) {\n                this.updateFormFieldPropertiesChanges('formFieldPropertiesChange', formFieldObject, false, false, false, false, false, false, false, false, false, false, isVisibilityChanged, false, false, false, false, false, oldValue, newValue);\n            }\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(options.isPrint)) {\n            if (formFieldObject.isPrint !== options.isPrint) {\n                isPrintChanged = true;\n                oldValue = formFieldObject.isPrint;\n                newValue = options.isPrint;\n            }\n            formFieldObject.isPrint = options.isPrint;\n            this.pdfViewer.nameTable[formFieldObject.id.split('_')[0]].isPrint = options.isPrint;\n            if (isPrintChanged) {\n                this.updateFormFieldPropertiesChanges('formFieldPropertiesChange', formFieldObject, false, false, false, false, false, false, false, false, false, false, false, false, false, isPrintChanged, false, false, oldValue, newValue);\n            }\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(options.tooltip)) {\n            if (formFieldObject.tooltip !== options.tooltip) {\n                isToolTipChanged = true;\n                oldValue = formFieldObject.tooltip;\n                newValue = options.tooltip;\n            }\n            formFieldObject.tooltip = options.tooltip;\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(options.tooltip)) {\n                if (formFieldObject.formFieldAnnotationType === 'RadioButton') {\n                    this.setToolTip(options.tooltip, htmlElement.parentElement);\n                }\n                else {\n                    this.setToolTip(options.tooltip, htmlElement);\n                }\n            }\n            this.pdfViewer.nameTable[formFieldObject.id.split('_')[0]].tooltip = options.tooltip;\n            if (isToolTipChanged) {\n                this.updateFormFieldPropertiesChanges('formFieldPropertiesChange', formFieldObject, false, false, false, false, false, false, false, false, false, false, false, false, false, false, isToolTipChanged, false, oldValue, newValue);\n            }\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(options.customData)) {\n            if (formFieldObject.customData !== options.customData) {\n                isCustomDataChanged = true;\n                oldValue = formFieldObject.customData;\n                newValue = options.customData;\n            }\n            formFieldObject.customData = options.customData;\n            this.pdfViewer.nameTable[formFieldObject.id.split('_')[0]].customData = options.customData;\n            if (isCustomDataChanged) {\n                this.updateFormFieldPropertiesChanges('formFieldPropertiesChange', formFieldObject, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, isCustomDataChanged, oldValue, newValue);\n            }\n        }\n        if ((formFieldObject.formFieldAnnotationType === 'Checkbox') && ((!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(options.isChecked)) || options.isChecked || options.value)) {\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(options.isChecked) && formFieldObject.isChecked !==\n                this.checkboxCheckedState) {\n                isValueChanged = true;\n                oldValue = formFieldObject.isChecked;\n                newValue = options.isChecked;\n            }\n            formFieldObject.isChecked = options.isChecked;\n            htmlElement.checked = options.isChecked;\n            this.setCheckedValue(htmlElement, options.isChecked);\n            this.pdfViewer.nameTable[formFieldObject.id.split('_')[0]].isChecked = options.isChecked;\n            if (options.value || options.isChecked) {\n                if (formFieldObject.value !== options.value) {\n                    isValueChanged = true;\n                    oldValue = formFieldObject.value;\n                    newValue = options.value;\n                }\n                formFieldObject.value = options.value;\n                this.pdfViewer.nameTable[formFieldObject.id.split('_')[0]].value = options.value;\n                if (isValueChanged) {\n                    this.updateFormFieldPropertiesChanges('formFieldPropertiesChange', formFieldObject, isValueChanged, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, oldValue, newValue);\n                }\n            }\n        }\n        if (formFieldObject.formFieldAnnotationType === 'RadioButton' && ((!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(options.isSelected)) || options.isSelected || options.value)) {\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(options.isSelected) && formFieldObject.isSelected !==\n                options.isSelected) {\n                isValueChanged = true;\n                oldValue = formFieldObject.isSelected;\n                newValue = this.checkboxCheckedState;\n            }\n            formFieldObject.isSelected = options.isSelected;\n            htmlElement.checked = options.isSelected;\n            this.pdfViewer.nameTable[formFieldObject.id.split('_')[0]].isSelected = options.isSelected;\n            if (options.value || options.isSelected) {\n                if (formFieldObject.value !== options.value) {\n                    isValueChanged = true;\n                    oldValue = formFieldObject.value;\n                    newValue = options.value;\n                }\n                formFieldObject.value = options.value;\n                this.pdfViewer.nameTable[formFieldObject.id.split('_')[0]].value = options.value;\n                if (isValueChanged) {\n                    this.updateFormFieldPropertiesChanges('formFieldPropertiesChange', formFieldObject, isValueChanged, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, oldValue, newValue);\n                }\n            }\n        }\n        if (formFieldObject.formFieldAnnotationType === 'DropdownList' || formFieldObject.formFieldAnnotationType === 'ListBox') {\n            if (options.options) {\n                formFieldObject.options = options.options;\n                formFieldObject.selectedIndex = [];\n                formFieldObject.selectedIndex.push(0);\n                this.updateDropDownListDataSource(formFieldObject, htmlElement);\n                this.pdfViewer.nameTable[formFieldObject.id.split('_')[0]].options = formFieldObject.options;\n            }\n        }\n        if (formFieldObject.formFieldAnnotationType === 'Textbox' || formFieldObject.formFieldAnnotationType === 'SignatureField' || formFieldObject.formFieldAnnotationType === 'InitialField' ||\n            formFieldObject.formFieldAnnotationType === 'DropdownList' || formFieldObject.formFieldAnnotationType === 'ListBox'\n            || formFieldObject.formFieldAnnotationType === 'PasswordField') {\n            if (options.value || options.isMultiline) {\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(options.value) && formFieldObject.value !==\n                    options.value) {\n                    isValueChanged = true;\n                    oldValue = formFieldObject.value;\n                    newValue = options.value;\n                }\n                formFieldObject.value = options.value ? options.value : formFieldObject.value;\n                if (formFieldObject.formFieldAnnotationType === 'Textbox' && options.isMultiline) {\n                    this.addMultilineTextbox(formFieldObject, 'e-pv-formfield-input', true);\n                    this.multilineCheckboxCheckedState = true;\n                    if (document.getElementById(formFieldObject.id + '_content_html_element')) {\n                        this.updateTextboxFormDesignerProperties(formFieldObject);\n                    }\n                    else {\n                        this.updateFormFieldPropertiesInCollections(formFieldObject);\n                    }\n                }\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(options.isMultiline) && formFieldObject.isMultiline !==\n                    options.isMultiline) {\n                    isValueChanged = true;\n                    formFieldObject.isMultiline = options.isMultiline;\n                }\n                if (!(formFieldObject.formFieldAnnotationType === 'DropdownList' || formFieldObject.formFieldAnnotationType === 'ListBox') && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(options.value)) {\n                    htmlElement.value = options.value;\n                }\n                else if (formFieldObject.formFieldAnnotationType === 'DropdownList' || formFieldObject.formFieldAnnotationType === 'ListBox') {\n                    formFieldObject.selectedIndex = [];\n                    for (var i = 0; i < htmlElement.options.length; i++) {\n                        if (htmlElement.options[parseInt(i.toString(), 10)].text === options.value) {\n                            htmlElement.options.selectedIndex = i;\n                            formFieldObject.selectedIndex.push(i);\n                        }\n                    }\n                    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(options.selectedIndex) && formFieldObject.selectedIndex !==\n                        options.selectedIndex) {\n                        formFieldObject.selectedIndex = options.selectedIndex;\n                        htmlElement.options.selectedIndex = options.selectedIndex;\n                    }\n                }\n                this.pdfViewer.nameTable[formFieldObject.id.split('_')[0]].value = options.value ? options.value : formFieldObject.value;\n                if (isValueChanged) {\n                    this.updateFormFieldPropertiesChanges('formFieldPropertiesChange', formFieldObject, isValueChanged, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, oldValue, newValue);\n                }\n            }\n            else if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(options) &&\n                !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(options.isMultiline) && !options.isMultiline) {\n                this.renderTextbox(selectedItem);\n                this.multilineCheckboxCheckedState = true;\n                if (document.getElementById(selectedItem.id + '_content_html_element')) {\n                    this.updateTextboxFormDesignerProperties(selectedItem);\n                }\n                else {\n                    this.updateFormFieldPropertiesInCollections(selectedItem);\n                }\n            }\n            if (options.fontSize) {\n                if (formFieldObject.fontSize !== options.fontSize) {\n                    isFontSizeChanged = true;\n                    oldValue = formFieldObject.fontSize;\n                    newValue = options.fontSize;\n                }\n                formFieldObject.fontSize = options.fontSize;\n                htmlElement.style.fontSize = (options.fontSize * zoomValue) + 'px';\n                this.pdfViewer.nameTable[formFieldObject.id.split('_')[0]].fontSize = options.fontSize;\n                if (isFontSizeChanged) {\n                    this.updateFormFieldPropertiesChanges('formFieldPropertiesChange', formFieldObject, false, false, isFontSizeChanged, false, false, false, false, false, false, false, false, false, false, false, false, false, oldValue, newValue);\n                }\n            }\n            if (options.color) {\n                var color = this.colorNametoHashValue(options.color);\n                if (formFieldObject.color !== color) {\n                    isColorChanged = true;\n                    oldValue = formFieldObject.color;\n                    newValue = color;\n                }\n                formFieldObject.color = color;\n                htmlElement.style.color = color;\n                this.pdfViewer.nameTable[formFieldObject.id.split('_')[0]].color = color;\n                if (isColorChanged) {\n                    this.updateFormFieldPropertiesChanges('formFieldPropertiesChange', formFieldObject, false, false, false, false, isColorChanged, false, false, false, false, false, false, false, false, false, false, false, oldValue, newValue);\n                }\n            }\n            if (formFieldObject.formFieldAnnotationType !== 'SignatureField') {\n                if (options.alignment) {\n                    if (formFieldObject.alignment !== options.alignment) {\n                        isAlignmentChanged = true;\n                        oldValue = formFieldObject.alignment;\n                        newValue = options.alignment;\n                    }\n                    formFieldObject.alignment = options.alignment;\n                    htmlElement.style.textAlign = options.alignment;\n                    this.pdfViewer.nameTable[formFieldObject.id.split('_')[0]].alignment = options.alignment;\n                    if (isAlignmentChanged) {\n                        this.updateFormFieldPropertiesChanges('formFieldPropertiesChange', formFieldObject, false, false, false, false, false, false, false, false, isAlignmentChanged, false, false, false, false, false, false, false, oldValue, newValue);\n                    }\n                }\n                if (options.maxLength) {\n                    if (formFieldObject.maxLength !== options.maxLength) {\n                        isMaxLengthChanged = true;\n                        oldValue = formFieldObject.maxLength;\n                        newValue = options.maxLength;\n                    }\n                    formFieldObject.maxLength = options.maxLength;\n                    htmlElement.maxLength = options.maxLength;\n                    this.pdfViewer.nameTable[formFieldObject.id.split('_')[0]].maxLength = options.maxLength;\n                    if (isMaxLengthChanged) {\n                        this.updateFormFieldPropertiesChanges('formFieldPropertiesChange', formFieldObject, false, false, false, false, false, false, false, false, false, false, false, isMaxLengthChanged, false, false, false, false, oldValue, newValue);\n                    }\n                }\n            }\n            if (formFieldObject.formFieldAnnotationType !== 'PasswordField') {\n                if (options.fontFamily) {\n                    if (formFieldObject.fontFamily !== options.fontFamily) {\n                        isFontFamilyChanged = true;\n                        oldValue = formFieldObject.fontFamily;\n                        newValue = options.fontFamily;\n                    }\n                    formFieldObject.fontFamily = options.fontFamily;\n                    htmlElement.style.fontFamily = options.fontFamily;\n                    this.pdfViewer.nameTable[formFieldObject.id.split('_')[0]].fontFamily = options.fontFamily;\n                    if (isFontFamilyChanged) {\n                        this.updateFormFieldPropertiesChanges('formFieldPropertiesChange', formFieldObject, false, isFontFamilyChanged, false, false, false, false, false, false, false, false, false, false, false, false, false, false, oldValue, newValue);\n                    }\n                }\n                var oldFontStyle = '';\n                var newFontStyle = '';\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(options.fontStyle)) {\n                    oldFontStyle += formFieldObject.font.isBold ? 'Bold' + ', ' : '';\n                    oldFontStyle += formFieldObject.font.isItalic ? 'Italic' + ', ' : '';\n                    oldFontStyle += formFieldObject.font.isStrikeout ? 'Strikethrough' + ', ' : '';\n                    oldFontStyle += formFieldObject.font.isUnderline ? 'Underline' + ', ' : '';\n                    if ((!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(options.fontStyle)) && (options.fontStyle === _base_types__WEBPACK_IMPORTED_MODULE_9__.FontStyle.None)) {\n                        htmlElement.style.fontWeight = '';\n                        htmlElement.style.fontStyle = '';\n                        formFieldObject.fontStyle = '';\n                        htmlElement.style.textDecoration = '';\n                        formFieldObject.font.isBold = false;\n                        formFieldObject.font.isItalic = false;\n                        formFieldObject.font.isUnderline = false;\n                        formFieldObject.font.isStrikeout = false;\n                        this.setDropdownFontStyleValue(htmlElement, 'none', '');\n                        this.pdfViewer.nameTable[formFieldObject.id.split('_')[0]].font.isBold = false;\n                        this.pdfViewer.nameTable[formFieldObject.id.split('_')[0]].font.isItalic = false;\n                        this.pdfViewer.nameTable[formFieldObject.id.split('_')[0]].font.isUnderline = false;\n                        this.pdfViewer.nameTable[formFieldObject.id.split('_')[0]].font.isStrikeout = false;\n                        newFontStyle = '';\n                    }\n                    else {\n                        if ((options.fontStyle & _base_types__WEBPACK_IMPORTED_MODULE_9__.FontStyle.Bold) !== 0) {\n                            htmlElement.style.fontWeight = 'bold';\n                            formFieldObject.fontStyle = 'Bold';\n                            formFieldObject.font.isBold = true;\n                            this.pdfViewer.nameTable[formFieldObject.id.split('_')[0]].font.isBold = true;\n                            this.setDropdownFontStyleValue(htmlElement, 'bold', 'bold');\n                        }\n                        newFontStyle += formFieldObject.font.isBold ? 'Bold' + ', ' : '';\n                        if ((options.fontStyle & _base_types__WEBPACK_IMPORTED_MODULE_9__.FontStyle.Italic) !== 0) {\n                            htmlElement.style.fontStyle = 'italic';\n                            formFieldObject.fontStyle = 'Italic';\n                            formFieldObject.font.isItalic = true;\n                            this.pdfViewer.nameTable[formFieldObject.id.split('_')[0]].font.isItalic = true;\n                        }\n                        newFontStyle += formFieldObject.font.isItalic ? 'Italic' + ', ' : '';\n                        if ((options.fontStyle & _base_types__WEBPACK_IMPORTED_MODULE_9__.FontStyle.Strikethrough) !== 0) {\n                            htmlElement.style.textDecoration = 'line-through';\n                            formFieldObject.font.isStrikeout = true;\n                            formFieldObject.fontStyle = 'Strikethrough';\n                            this.pdfViewer.nameTable[formFieldObject.id.split('_')[0]].font.isStrikeout = true;\n                        }\n                        newFontStyle += formFieldObject.font.isStrikeout ? 'Strikethrough' + ', ' : '';\n                        if ((options.fontStyle & _base_types__WEBPACK_IMPORTED_MODULE_9__.FontStyle.Underline) !== 0) {\n                            htmlElement.style.textDecoration = 'underline';\n                            formFieldObject.fontStyle = 'Underline';\n                            formFieldObject.font.isUnderline = true;\n                            this.pdfViewer.nameTable[formFieldObject.id.split('_')[0]].font.isUnderline = true;\n                        }\n                        newFontStyle += formFieldObject.font.isUnderline ? 'Underline' + ', ' : '';\n                    }\n                    isFontStyleChanged = true;\n                    if (isFontStyleChanged) {\n                        this.updateFormFieldPropertiesChanges('formFieldPropertiesChange', formFieldObject, false, false, false, isFontStyleChanged, false, false, false, false, false, false, false, false, false, false, false, false, oldFontStyle, newFontStyle);\n                    }\n                }\n            }\n        }\n        // EJ2-856550 - the multiline true and add value programmattically. after setting the multiline value below code works.\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(options.isReadOnly)) {\n            if (formFieldObject.isReadonly !== options.isReadOnly) {\n                isReadOnlyChanged = true;\n                oldValue = formFieldObject.isReadonly;\n                newValue = options.isReadOnly;\n            }\n            formFieldObject.isReadonly = options.isReadOnly;\n            this.setReadOnlyProperty(formFieldObject, htmlElement);\n            if (formFieldObject.formFieldAnnotationType === 'RadioButton') {\n                htmlElement.parentElement.style.pointerEvents = options.isReadOnly ? 'none' : 'auto';\n                var data = this.pdfViewerBase.getItemFromSessionStorage('_formDesigner');\n                var formFieldsData = JSON.parse(data);\n                for (var i = 0; i < formFieldsData.length; i++) {\n                    if (formFieldsData[parseInt(i.toString(), 10)].FormField.id.split('_')[0] === formFieldObject.id) {\n                        for (var j = 0; j < formFieldsData[parseInt(i.toString(), 10)].FormField.radiobuttonItem.length; j++) {\n                            var radiobuttonItem = formFieldsData[parseInt(i.toString(), 10)].FormField.\n                                radiobuttonItem[parseInt(j.toString(), 10)];\n                            var currentElement = document.getElementById(radiobuttonItem.id + '_html_element').firstElementChild.firstElementChild.firstElementChild;\n                            currentElement.parentElement.style.pointerEvents = options.isReadOnly ? 'none' : 'auto';\n                            radiobuttonItem.isReadonly = formFieldObject.isReadonly;\n                            this.pdfViewerBase.formFieldCollection[parseInt(i.toString(), 10)].FormField.\n                                radiobuttonItem[parseInt(j.toString(), 10)].isReadonly = formFieldObject.isReadonly;\n                            this.setReadOnlyProperty(radiobuttonItem, currentElement);\n                            this.pdfViewerBase.formFieldCollection[parseInt(i.toString(), 10)].FormField.\n                                radiobuttonItem[parseInt(j.toString(), 10)].backgroundColor = typeof radiobuttonItem.backgroundColor\n                                !== 'object' ? this.getRgbCode(radiobuttonItem.backgroundColor) :\n                                radiobuttonItem.backgroundColor;\n                        }\n                        formFieldsData[parseInt(i.toString(), 10)].FormField.isReadonly = formFieldObject.isReadonly;\n                        this.pdfViewerBase.formFieldCollection[parseInt(i.toString(), 10)].FormField.isReadonly =\n                            formFieldObject.isReadonly;\n                    }\n                }\n            }\n            else {\n                htmlElement.style.pointerEvents = options.isReadOnly ? (options.isMultiline ? 'auto' : 'none') : 'auto';\n            }\n            if (isReadOnlyChanged) {\n                this.updateFormFieldPropertiesChanges('formFieldPropertiesChange', formFieldObject, false, false, false, false, false, false, false, false, false, isReadOnlyChanged, false, false, false, false, false, false, oldValue, newValue);\n            }\n        }\n        if ((formFieldObject.formFieldAnnotationType === 'SignatureField' && options.signatureIndicatorSettings) || (formFieldObject.formFieldAnnotationType === 'InitialField' && options.initialIndicatorSettings)) {\n            formFieldObject = this.updateSignatureandInitialIndicator(formFieldObject, options, htmlElement);\n        }\n        this.updateSessionFormFieldProperties(formFieldObject);\n        var formField = {\n            id: formFieldObject.id, name: formFieldObject.name,\n            value: formFieldObject.value,\n            type: formFieldObject.formFieldAnnotationType, isReadOnly: formFieldObject.isReadonly,\n            fontFamily: formFieldObject.fontFamily,\n            fontSize: formFieldObject.fontSize, fontStyle: formFieldObject.fontStyle,\n            color: formFieldObject.color,\n            backgroundColor: formFieldObject.backgroundColor,\n            alignment: formFieldObject.alignment,\n            visibility: formFieldObject.visibility,\n            maxLength: formFieldObject.maxLength,\n            isRequired: formFieldObject.isRequired,\n            isPrint: formFieldObject.isPrint, tooltip: formFieldObject.tooltip,\n            bounds: formFieldObject.bounds, thickness: formFieldObject.thickness,\n            borderColor: formFieldObject.borderColor, pageIndex: formFieldObject.pageIndex,\n            insertSpaces: formFieldObject.insertSpaces,\n            isTransparent: formFieldObject.isTransparent,\n            options: formFieldObject.options,\n            pageNumber: formFieldObject.pageNumber,\n            rotateAngle: formFieldObject.rotateAngle,\n            selectedIndex: formFieldObject.selectedIndex,\n            signatureIndicatorSettings: formFieldObject.signatureIndicatorSettings,\n            signatureType: formFieldObject.signatureType, zIndex: formFieldObject.zIndex,\n            isChecked: formFieldObject.isChecked,\n            isMultiline: formFieldObject.isMultiline,\n            isSelected: formFieldObject.isSelected,\n            customData: formFieldObject.customData\n        };\n        this.pdfViewer.formFieldCollections[this.pdfViewer.formFieldCollections.findIndex(function (el) { return el.id === formField.id; })] = formField;\n        this.pdfViewer.formFieldCollection[this.pdfViewer.formFieldCollection.\n            findIndex(function (el) { return el.id === formField.id; })] = formFieldObject;\n    };\n    FormDesigner.prototype.colorNametoHashValue = function (colorString) {\n        var colorCode = colorString;\n        // eslint-disable-next-line\n        if (!colorCode.match(/#([a-z0-9]+)/gi) && !colorCode.match(/^rgba?\\((\\d+),\\s*(\\d+),\\s*(\\d+)(?:,\\s*(\\d+(?:\\.\\d+)?))?\\)$/)) {\n            colorCode = this.nameToHash(colorCode);\n        }\n        return colorCode !== '' ? colorCode : colorString;\n    };\n    /**\n     * @param {string} formFieldId - It describes about the form field id\n     * @private\n     * @returns {PdfFormFieldBaseModel} - pdf formfiels base model\n     */\n    FormDesigner.prototype.getFormField = function (formFieldId) {\n        var formField;\n        var formFieldCollectionObject;\n        if (typeof formFieldId === 'object') {\n            formFieldCollectionObject = this.getAnnotationsFromAnnotationCollections(formFieldId.id);\n            if (formFieldCollectionObject) {\n                formField = this.pdfViewer.nameTable[formFieldCollectionObject.id];\n            }\n        }\n        if (typeof formFieldId === 'string') {\n            formFieldCollectionObject = this.getAnnotationsFromAnnotationCollections(formFieldId);\n            if (formFieldCollectionObject) {\n                formField = this.pdfViewer.nameTable[formFieldCollectionObject.id];\n            }\n        }\n        return formField;\n    };\n    FormDesigner.prototype.resetTextboxProperties = function (obj) {\n        var inputElement = document.getElementById(obj.id + '_content_html_element').firstElementChild.firstElementChild;\n        if (inputElement) {\n            obj.name = 'textboxField';\n            obj.value = '';\n            obj.fontFamily = 'Helvetica';\n            obj.fontSize = 10;\n            obj.fontStyle = 'None';\n            obj.color = 'black';\n            obj.backgroundColor = '#daeaf7ff';\n            obj.alignment = 'left';\n            obj.visibility = 'visible';\n            obj.isReadonly = false;\n            obj.isRequired = false;\n            obj.tooltip = '';\n            obj.isPrint = true;\n            obj.borderColor = '#303030';\n            obj.thickness = 1;\n            obj.maxLength = 0;\n            this.updateTextboxProperties(obj, inputElement);\n        }\n    };\n    FormDesigner.prototype.resetPasswordProperties = function (obj) {\n        var inputElement = document.getElementById(obj.id + '_content_html_element').firstElementChild.firstElementChild;\n        if (inputElement) {\n            obj.name = 'passswordField';\n            obj.value = '';\n            obj.fontFamily = 'Helvetica';\n            obj.fontSize = 10;\n            obj.fontStyle = 'None';\n            obj.color = 'black';\n            obj.backgroundColor = '#daeaf7ff';\n            obj.alignment = 'left';\n            obj.visibility = 'visible';\n            obj.isReadonly = false;\n            obj.isRequired = false;\n            obj.tooltip = '';\n            obj.isPrint = true;\n            obj.borderColor = '#303030';\n            obj.thickness = 1;\n            obj.maxLength = 0;\n            this.updatePasswordFieldProperties(obj, inputElement);\n        }\n    };\n    FormDesigner.prototype.resetCheckboxProperties = function (obj) {\n        var inputElement = document.getElementById(obj.id + '_content_html_element').firstElementChild.firstElementChild;\n        if (inputElement) {\n            obj.name = 'checkboxField';\n            obj.isChecked = false;\n            obj.backgroundColor = '#daeaf7ff';\n            obj.visibility = 'visible';\n            obj.isReadonly = false;\n            obj.isRequired = false;\n            obj.tooltip = '';\n            obj.isPrint = true;\n            obj.borderColor = '#303030';\n            obj.thickness = 1;\n            this.updateCheckboxProperties(obj, inputElement);\n        }\n    };\n    FormDesigner.prototype.resetRadioButtonProperties = function (obj) {\n        var inputElement = document.getElementById(obj.id + '_content_html_element').firstElementChild.firstElementChild;\n        if (inputElement) {\n            obj.name = 'RadioButtonField';\n            obj.isSelected = false;\n            obj.backgroundColor = '#daeaf7ff';\n            obj.visibility = 'visible';\n            obj.isReadonly = false;\n            obj.isRequired = false;\n            obj.tooltip = '';\n            obj.isPrint = true;\n            obj.borderColor = '#303030';\n            obj.thickness = 1;\n            this.updateRadioButtonProperties(obj, inputElement);\n        }\n    };\n    FormDesigner.prototype.resetDropdownListProperties = function (obj) {\n        var inputElement = document.getElementById(obj.id + '_content_html_element').firstElementChild.firstElementChild;\n        if (inputElement) {\n            obj.name = 'dropDownField';\n            obj.value = '';\n            obj.fontFamily = 'Helvetica';\n            obj.fontSize = 10;\n            obj.fontStyle = 'None';\n            obj.color = 'black';\n            obj.backgroundColor = '#daeaf7ff';\n            obj.alignment = 'left';\n            obj.visibility = 'visible';\n            obj.isReadonly = false;\n            obj.isRequired = false;\n            obj.tooltip = '';\n            obj.isPrint = true;\n            obj.borderColor = '#303030';\n            obj.thickness = 1;\n            obj.options = [];\n            this.updateDropdownListProperties(obj, inputElement);\n            if (obj.options) {\n                this.updateDropDownListDataSource(obj, inputElement);\n            }\n        }\n    };\n    FormDesigner.prototype.resetListBoxProperties = function (obj) {\n        var inputElement = document.getElementById(obj.id + '_content_html_element').firstElementChild.firstElementChild;\n        if (inputElement) {\n            obj.name = 'listBoxField';\n            obj.value = '';\n            obj.fontFamily = 'Helvetica';\n            obj.fontSize = 10;\n            obj.fontStyle = 'None';\n            obj.color = 'black';\n            obj.backgroundColor = '#daeaf7ff';\n            obj.alignment = 'left';\n            obj.visibility = 'visible';\n            obj.isReadonly = false;\n            obj.isRequired = false;\n            obj.tooltip = '';\n            obj.isPrint = true;\n            obj.borderColor = '#303030';\n            obj.thickness = 1;\n            obj.options = [];\n            this.updateListBoxProperties(obj, inputElement);\n            if (obj.options) {\n                this.updateDropDownListDataSource(obj, inputElement);\n            }\n        }\n    };\n    FormDesigner.prototype.resetSignatureTextboxProperties = function (obj) {\n        var inputElement = document.getElementById(obj.id + '_content_html_element').firstElementChild.firstElementChild;\n        if (inputElement) {\n            obj.name = 'signatureField';\n            obj.value = '';\n            obj.fontFamily = 'Helvetica';\n            obj.fontSize = 10;\n            obj.fontStyle = 'None';\n            obj.color = 'black';\n            obj.backgroundColor = '#daeaf7ff';\n            obj.isRequired = false;\n            obj.isReadonly = false;\n            obj.tooltip = '';\n            obj.isPrint = true;\n            obj.visibility = 'visible';\n            this.updateSignatureFieldProperties(obj, inputElement);\n        }\n    };\n    /**\n     * Deletes the form field from the PDF page.\n     *\n     * @param {string} formFieldId - It describes about the form field id\n     * @param {boolean} addAction - It describes about the addAction\n     * @returns {void}\n     */\n    FormDesigner.prototype.deleteFormField = function (formFieldId, addAction) {\n        if (addAction === void 0) { addAction = true; }\n        var formField = this.getFormField(formFieldId);\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(formField) && formFieldId) {\n            var data = this.pdfViewerBase.getItemFromSessionStorage('_formfields');\n            var FormfieldsData = JSON.parse(data);\n            this.pdfViewer.formFieldCollection =\n                this.pdfViewer.formFieldCollection.filter(function (field) { return formFieldId.id !== field.id; });\n            for (var i = 0; i < this.pdfViewer.formFieldCollections.length; i++) {\n                if (formFieldId.id === this.pdfViewer.formFieldCollections[parseInt(i.toString(), 10)].id) {\n                    for (var j = 0; j < FormfieldsData.length; j++) {\n                        if (formFieldId.name === FormfieldsData[parseInt(j.toString(), 10)].FieldName) {\n                            FormfieldsData.splice(j, 1);\n                            this.pdfViewer.formFieldCollections.splice(i, 1);\n                            var stringify = JSON.stringify(FormfieldsData);\n                            _index__WEBPACK_IMPORTED_MODULE_2__.PdfViewerBase.sessionStorageManager.setItem(this.pdfViewerBase.documentId + '_formfields', stringify);\n                        }\n                    }\n                }\n            }\n        }\n        if (formField) {\n            this.clearSelection(formFieldId);\n            this.pdfViewer.remove(formField);\n            this.pdfViewer.renderDrawing();\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.pdfViewer.toolbar) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.pdfViewer.toolbar.formDesignerToolbarModule)) {\n                this.pdfViewer.toolbar.formDesignerToolbarModule.showHideDeleteIcon(false);\n            }\n            if (this.pdfViewerBase.formFieldCollection.length > 0) {\n                this.pdfViewerBase.enableFormFieldButton(true);\n            }\n            else {\n                this.pdfViewerBase.enableFormFieldButton(false);\n            }\n            if (addAction && this.pdfViewer.annotation) {\n                this.pdfViewer.annotation.addAction(this.pdfViewerBase.currentPageNumber, null, formField, 'Delete', '', formField, formField);\n            }\n        }\n    };\n    /**\n     * Clears the selection of the form field in the PDF page.\n     *\n     * @param {string} formFieldId - It describes about the form field id\n     * @returns {void}\n     */\n    FormDesigner.prototype.clearSelection = function (formFieldId) {\n        var formField;\n        var formFieldCollectionObject;\n        if (typeof formFieldId === 'object') {\n            formFieldCollectionObject = this.getAnnotationsFromAnnotationCollections(formFieldId.id);\n            formField = this.pdfViewer.nameTable[formFieldCollectionObject.id];\n        }\n        if (typeof formFieldId === 'string') {\n            formFieldCollectionObject = this.getAnnotationsFromAnnotationCollections(formFieldId);\n            formField = this.pdfViewer.nameTable[formFieldCollectionObject.id];\n        }\n        if (formField && (this.pdfViewer.selectedItems && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.pdfViewer.selectedItems.\n            properties.formFields) && this.pdfViewer.selectedItems.properties.formFields.length > 0 &&\n            this.pdfViewer.selectedItems.properties.formFields[0].id === formField.id)) {\n            var pageId = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.pdfViewerBase.activeElements.activePageID) ?\n                this.pdfViewerBase.activeElements.activePageID : formField.pageIndex;\n            this.pdfViewer.clearSelection(pageId);\n        }\n    };\n    /**\n     * @param {string} mode - It describes about the mode\n     * @private\n     * @returns {void}\n     */\n    FormDesigner.prototype.setMode = function (mode) {\n        if (mode && mode.indexOf('designer') !== -1) {\n            this.enableDisableFormFieldsInteraction(true);\n            this.pdfViewerBase.disableTextSelectionMode();\n        }\n        else {\n            this.enableDisableFormFieldsInteraction(false);\n            if (this.pdfViewer.textSelectionModule) {\n                this.pdfViewer.textSelectionModule.enableTextSelectionMode();\n            }\n        }\n    };\n    FormDesigner.prototype.enableDisableFormFieldsInteraction = function (enableDesignerMode) {\n        var collections = this.pdfViewer.formFieldCollection;\n        if (collections && collections.length > 0) {\n            for (var i = 0; i < collections.length; i++) {\n                var element = document.getElementById(collections[parseInt(i.toString(), 10)].id + '_content_html_element');\n                var designerName = document.getElementById(collections[parseInt(i.toString(), 10)].id + '_designer_name');\n                if (element) {\n                    if (enableDesignerMode) {\n                        this.pdfViewer.designerMode = true;\n                        element.style.pointerEvents = 'none';\n                        designerName.innerHTML = collections[parseInt(i.toString(), 10)].name;\n                        var zoomValue = this.pdfViewerBase.getZoomFactor();\n                        designerName.style.fontSize = this.defaultFontSize + 'px';\n                        designerName.style.position = 'absolute';\n                        switch (collections[parseInt(i.toString(), 10)].formFieldAnnotationType) {\n                            case 'Textbox':\n                            case 'PasswordField':\n                            case 'DropdownList':\n                            case 'ListBox':\n                            case 'SignatureField':\n                            case 'InitialField':\n                            case 'RadioButton': {\n                                var inputElement = document.getElementById(collections[parseInt(i.toString(), 10)].id + '_content_html_element').firstElementChild.firstElementChild;\n                                inputElement.style.pointerEvents = 'none';\n                                break;\n                            }\n                            case 'Checkbox': {\n                                var checkboxDivElement = document.getElementById(collections[parseInt(i.toString(), 10)].id + '_content_html_element').firstElementChild.firstElementChild.lastElementChild;\n                                checkboxDivElement.style.pointerEvents = 'none';\n                                break;\n                            }\n                        }\n                    }\n                    else {\n                        this.pdfViewer.designerMode = false;\n                        element.style.pointerEvents = 'all';\n                        designerName.innerHTML = '';\n                        designerName.style.position = 'initial';\n                        if (collections[parseInt(i.toString(), 10)].formFieldAnnotationType === 'RadioButton') {\n                            this.updateRadioButtonDesignerProperties(collections[parseInt(i.toString(), 10)], true);\n                        }\n                        if (collections[parseInt(i.toString(), 10)].formFieldAnnotationType === 'Checkbox') {\n                            this.updateCheckboxFormDesignerProperties(collections[parseInt(i.toString(), 10)], true);\n                        }\n                        switch (collections[parseInt(i.toString(), 10)].formFieldAnnotationType) {\n                            case 'Textbox':\n                            case 'PasswordField':\n                            case 'DropdownList':\n                            case 'ListBox':\n                            case 'SignatureField':\n                            case 'InitialField':\n                            case 'RadioButton': {\n                                var inputElement = document.getElementById(collections[parseInt(i.toString(), 10)].id + '_content_html_element').firstElementChild.firstElementChild;\n                                inputElement.style.pointerEvents = collections[parseInt(i.toString(), 10)].isReadonly ? (collections[parseInt(i.toString(), 10)].isMultiline ? 'auto' : 'none') : 'auto';\n                                break;\n                            }\n                            case 'Checkbox': {\n                                var checkboxDivElement = document.getElementById(collections[parseInt(i.toString(), 10)].id + '_content_html_element').firstElementChild.firstElementChild.lastElementChild;\n                                checkboxDivElement.style.pointerEvents = collections[parseInt(i.toString(), 10)].isReadonly ? (collections[parseInt(i.toString(), 10)].isMultiline ? 'auto' : 'none') : 'auto';\n                                break;\n                            }\n                        }\n                        this.pdfViewer.clearSelection(collections[parseInt(i.toString(), 10)].pageIndex);\n                    }\n                }\n            }\n        }\n    };\n    FormDesigner.prototype.getAnnotationsFromAnnotationCollections = function (annotationId) {\n        var collections = this.pdfViewer.formFieldCollection;\n        if (collections && annotationId) {\n            for (var i = 0; i < collections.length; i++) {\n                if (collections[parseInt(i.toString(), 10)].id === annotationId) {\n                    return collections[parseInt(i.toString(), 10)];\n                }\n            }\n        }\n    };\n    /**\n     * @param {string} formFieldId - It describes about the form field id\n     * @private\n     * @returns {void}\n     */\n    FormDesigner.prototype.updateSignatureValue = function (formFieldId) {\n        for (var i = 0; i < this.pdfViewerBase.formFieldCollection.length; i++) {\n            if (formFieldId === this.pdfViewerBase.formFieldCollection[parseInt(i.toString(), 10)].FormField.id) {\n                this.pdfViewerBase.formFieldCollection[parseInt(i.toString(), 10)].FormField.value = '';\n                this.pdfViewer.nameTable[this.pdfViewerBase.formFieldCollection[parseInt(i.toString(), 10)].FormField.id.split('_')[0]].value = '';\n                this.pdfViewer.nameTable[this.pdfViewerBase.formFieldCollection[parseInt(i.toString(), 10)].FormField.id].value = '';\n                this.pdfViewerBase.formFieldCollection[parseInt(i.toString(), 10)].FormField.signatureType = '';\n                this.pdfViewer.nameTable[this.pdfViewerBase.formFieldCollection[parseInt(i.toString(), 10)].FormField.id.split('_')[0]].signatureType = '';\n                this.pdfViewer.nameTable[this.pdfViewerBase.formFieldCollection[parseInt(i.toString(), 10)].FormField.id].signatureType = '';\n            }\n        }\n    };\n    /**\n     * @param {string} annotationId - It describes about the annotation id\n     * @param {string} fieldName - It describes about the field name\n     * @private\n     * @returns {void}\n     */\n    FormDesigner.prototype.removeFieldsFromAnnotationCollections = function (annotationId, fieldName) {\n        var data = this.pdfViewerBase.getItemFromSessionStorage('_formDesigner');\n        var formFieldsData = JSON.parse(data);\n        var sessiondata = this.pdfViewerBase.getItemFromSessionStorage('_formfields');\n        var sessionformFields;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(sessiondata)) {\n            sessionformFields = JSON.parse(sessiondata);\n        }\n        for (var i = 0; i < formFieldsData.length; i++) {\n            if (formFieldsData[parseInt(i.toString(), 10)].Key.split('_')[0] === annotationId) {\n                formFieldsData.splice(i, 1);\n                this.pdfViewerBase.formFieldCollection.splice(i, 1);\n                break;\n            }\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(sessionformFields)) {\n            for (var i = 0; i < sessionformFields.length; i++) {\n                if (sessionformFields[parseInt(i.toString(), 10)].FieldName === fieldName) {\n                    sessionformFields.splice(parseInt(i.toString(), 10), 1);\n                    sessionStorage.setItem(this.pdfViewerBase.documentId + '_formfields', JSON.stringify(sessionformFields));\n                    break;\n                }\n            }\n        }\n        this.pdfViewerBase.setItemInSessionStorage(this.pdfViewerBase.formFieldCollection, '_formDesigner');\n        var storeObject = _index__WEBPACK_IMPORTED_MODULE_2__.PdfViewerBase.sessionStorageManager.getItem(this.pdfViewerBase.documentId + '_annotations_shape');\n        if (storeObject) {\n            var annotObject = JSON.parse(storeObject);\n            var index = this.pdfViewer.annotationModule.getPageCollection(annotObject, this.pdfViewerBase.currentPageNumber - 1);\n            if (index != null && annotObject[parseInt(index.toString(), 10)]) {\n                for (var m = 0; m < annotObject[parseInt(index.toString(), 10)].annotations.length; m++) {\n                    if (annotationId === annotObject[parseInt(index.toString(), 10)].annotations[parseInt(m.toString(), 10)].id) {\n                        annotObject[parseInt(index.toString(), 10)].annotations.splice(m, 1);\n                        break;\n                    }\n                }\n                var annotationStringified = JSON.stringify(annotObject);\n                _index__WEBPACK_IMPORTED_MODULE_2__.PdfViewerBase.sessionStorageManager.setItem(this.pdfViewerBase.documentId + '_annotations_shape', annotationStringified);\n            }\n        }\n        var collections = this.pdfViewer.formFieldCollection;\n        if (collections && annotationId) {\n            for (var i = 0; i < collections.length; i++) {\n                if (collections[parseInt(i.toString(), 10)].formFieldId === annotationId) {\n                    this.pdfViewer.formFieldCollection.splice(i, 1);\n                }\n            }\n        }\n    };\n    /**\n     * @private\n     * @returns {number} - number\n     */\n    FormDesigner.prototype.setFormFieldIndex = function () {\n        if (this.pdfViewer.formFieldCollections.length > 0) {\n            var lastFormField = this.pdfViewer.formFieldCollections[this.pdfViewer.formFieldCollections.length - 1];\n            // eslint-disable-next-line\n            var lastFormFieldIndex = lastFormField && lastFormField.name ? (!isNaN(parseInt(lastFormField.name.match(/\\d+/), 10)) ?\n                parseInt(lastFormField.name.match(/\\d+/), 10) : this.pdfViewer.formFieldCollections.length) : null;\n            if (this.isAddFormFieldUi) {\n                this.formFieldIndex = this.formFieldIndex > this.pdfViewer.formFieldCollections.length ?\n                    lastFormFieldIndex + 1 : this.pdfViewer.formFieldCollections.length + 1;\n            }\n            else {\n                this.formFieldIndex = isNaN(lastFormFieldIndex) ? this.formFieldIndex + 1 : lastFormFieldIndex + 1;\n            }\n        }\n        else {\n            this.formFieldIndex++;\n        }\n        return this.formFieldIndex;\n    };\n    FormDesigner.prototype.setFormFieldIdIndex = function () {\n        this.formFieldIdIndex = this.formFieldIdIndex + 1;\n        return this.formFieldIdIndex;\n    };\n    FormDesigner.prototype.activateTextboxElement = function (formFieldType) {\n        this.pdfViewer.drawingObject = {\n            formFieldAnnotationType: formFieldType,\n            name: 'Textbox' + this.setFormFieldIndex(), value: '', fontFamily: 'Helvetica', fontSize: this.defaultFontSize, fontStyle: 'None', color: 'black',\n            backgroundColor: '#daeaf7ff', thickness: 1, borderColor: '#303030', alignment: 'left', isReadonly: false, visibility: 'visible', isRequired: false, isPrint: true, rotateAngle: 0, tooltip: '', customData: '', font: { isItalic: false, isBold: false, isStrikeout: false, isUnderline: false }\n        };\n        this.pdfViewer.tool = 'DrawTool';\n    };\n    FormDesigner.prototype.activatePasswordField = function (formFieldType) {\n        this.pdfViewer.drawingObject = {\n            formFieldAnnotationType: formFieldType,\n            name: 'Password' + this.setFormFieldIndex(), value: '', fontFamily: 'Helvetica', fontSize: this.defaultFontSize, fontStyle: 'None', color: 'black',\n            alignment: 'left', backgroundColor: '#daeaf7ff', thickness: 1, borderColor: '#303030', isReadonly: false, visibility: 'visible', isRequired: false, isPrint: true, rotateAngle: 0, tooltip: '', customData: '', font: { isItalic: false, isBold: false, isStrikeout: false, isUnderline: false }\n        };\n        this.pdfViewer.tool = 'DrawTool';\n    };\n    FormDesigner.prototype.activateCheckboxElement = function (formFieldType) {\n        this.pdfViewer.drawingObject = {\n            formFieldAnnotationType: formFieldType,\n            name: 'Check Box' + this.setFormFieldIndex(), isChecked: false, fontSize: this.defaultFontSize, backgroundColor: '#daeaf7ff', color: 'black', thickness: 1, borderColor: '#303030', isReadonly: false, visibility: 'visible', isPrint: true, rotateAngle: 0, tooltip: '', customData: ''\n        };\n        this.pdfViewer.tool = 'DrawTool';\n    };\n    FormDesigner.prototype.activateRadioButtonElement = function (formFieldType) {\n        this.pdfViewer.drawingObject = {\n            formFieldAnnotationType: formFieldType,\n            name: 'Radio Button' + this.setFormFieldIndex(), isSelected: false, fontSize: this.defaultFontSize, backgroundColor: '#daeaf7ff', color: 'black', thickness: 1, borderColor: '#303030', isReadonly: false, visibility: 'visible', isPrint: true, rotateAngle: 0, tooltip: '', customData: ''\n        };\n        this.pdfViewer.tool = 'DrawTool';\n    };\n    FormDesigner.prototype.activateDropDownListElement = function (formFieldType, dropDownOptions) {\n        this.pdfViewer.drawingObject = {\n            formFieldAnnotationType: formFieldType,\n            name: 'Dropdown' + this.setFormFieldIndex(), fontFamily: 'Helvetica', fontSize: this.defaultFontSize, fontStyle: 'None', color: 'black', backgroundColor: '#daeaf7ff', thickness: 1, borderColor: '#303030',\n            alignment: 'left', isReadonly: false, visibility: 'visible', isRequired: false, isPrint: true, rotateAngle: 0, tooltip: '', customData: '',\n            options: dropDownOptions, isMultiSelect: false, font: { isItalic: false, isBold: false, isStrikeout: false, isUnderline: false }\n        };\n        this.pdfViewer.tool = 'DrawTool';\n    };\n    FormDesigner.prototype.activateListboxElement = function (formFieldType, listBoxOptions) {\n        this.pdfViewer.drawingObject = {\n            formFieldAnnotationType: formFieldType,\n            name: 'List Box' + this.setFormFieldIndex(), fontFamily: 'Helvetica', fontSize: this.defaultFontSize, fontStyle: 'None', color: 'black', backgroundColor: '#daeaf7ff', thickness: 1, borderColor: '#303030',\n            alignment: 'left', isReadonly: false, visibility: 'visible', isRequired: false, isPrint: true, rotateAngle: 0, tooltip: '', customData: '',\n            options: listBoxOptions, isMultiSelect: true, font: { isItalic: false, isBold: false, isStrikeout: false, isUnderline: false }\n        };\n        this.pdfViewer.tool = 'DrawTool';\n    };\n    FormDesigner.prototype.activateSignatureBoxElement = function (formFieldType) {\n        var propertyValues = { opacity: 1, backgroundColor: 'rgba(255, 228, 133, 0.35)', width: 19, height: 10, fontSize: this.defaultFontSize, text: null, color: 'black' };\n        switch (formFieldType) {\n            case 'SignatureField':\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.pdfViewer.signatureFieldSettings.signatureIndicatorSettings)) {\n                    propertyValues = this.pdfViewer.signatureFieldSettings.signatureIndicatorSettings;\n                }\n                break;\n            case 'InitialField':\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.pdfViewer.initialFieldSettings.initialIndicatorSettings)) {\n                    propertyValues = this.pdfViewer.initialFieldSettings.initialIndicatorSettings;\n                }\n                break;\n            default:\n                break;\n        }\n        this.pdfViewer.drawingObject = {\n            formFieldAnnotationType: formFieldType,\n            name: formFieldType === 'InitialField' || this.pdfViewer.isInitialFieldToolbarSelection ? 'Initial' + this.setFormFieldIndex() : 'Signature' + this.setFormFieldIndex(), fontFamily: 'Helvetica', fontSize: this.defaultFontSize, fontStyle: 'None', color: 'black', backgroundColor: '#daeaf7ff', alignment: 'left',\n            isReadonly: false, visibility: 'visible', isRequired: false, isPrint: true, rotateAngle: 0, tooltip: '', customData: '', font: { isItalic: false, isBold: false, isStrikeout: false, isUnderline: false },\n            isInitialField: formFieldType === 'InitialField' || this.pdfViewer.isInitialFieldToolbarSelection, signatureIndicatorSettings: { opacity: propertyValues.opacity, backgroundColor: propertyValues.backgroundColor, width: propertyValues.width, height: propertyValues.height, fontSize: propertyValues.fontSize, text: propertyValues.text, color: propertyValues.color }\n        };\n        this.pdfViewer.tool = 'DrawTool';\n    };\n    /**\n     * @param {PdfFormFieldBaseModel} obj - It describes about the object\n     * @param {HTMLElement} inputElement - It describes about the input element\n     * @param {boolean} isPrint - It describes about the isPrint\n     * @private\n     * @returns {void}\n     */\n    FormDesigner.prototype.updateTextboxProperties = function (obj, inputElement, isPrint) {\n        var fillColor = '#daeaf7ff';\n        inputElement.name = obj.name ? obj.name : 'Textbox' + this.setFormFieldIndex();\n        inputElement.value = obj.value ? obj.value : '';\n        var zoomValue = isPrint ? this.defaultZoomValue : this.pdfViewerBase.getZoomFactor();\n        if (obj.insertSpaces) {\n            var font = ((obj.bounds.width * zoomValue / obj.maxLength) - (obj.fontSize * zoomValue / 2)) - (0.6 * zoomValue);\n            inputElement.style.letterSpacing = '' + font + 'px';\n            inputElement.style.fontFamily = 'monospace';\n            inputElement.style.paddingLeft = (font / 2) + 'px';\n        }\n        else {\n            inputElement.style.fontFamily = obj.fontFamily && this.getFontFamily(obj.fontFamily) ? obj.fontFamily : 'Helvetica';\n        }\n        inputElement.style.fontSize = obj.fontSize ? (obj.fontSize * zoomValue) + 'px' : (10 * zoomValue) + 'px';\n        if (obj.font.isBold) {\n            inputElement.style.fontWeight = 'bold';\n        }\n        if (obj.font.isItalic) {\n            inputElement.style.fontStyle = 'italic';\n        }\n        if (obj.font.isUnderline && obj.font.isStrikeout) {\n            inputElement.style.textDecoration = 'underline line-through';\n        }\n        else if (obj.font.isStrikeout) {\n            inputElement.style.textDecoration = 'line-through';\n        }\n        else if (obj.font.isUnderline) {\n            inputElement.style.textDecoration = 'underline';\n        }\n        if (obj.isTransparent && obj.borderColor === '#ffffffff') {\n            inputElement.style.backgroundColor = 'transparent';\n            inputElement.style.borderColor = 'transparent';\n        }\n        else {\n            inputElement.style.backgroundColor = obj.backgroundColor ? obj.backgroundColor : '#daeaf7ff';\n            inputElement.style.borderColor = obj.borderColor ? obj.borderColor : '#303030';\n        }\n        inputElement.style.color = obj.color ? obj.color : 'black';\n        inputElement.style.borderWidth = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(obj.thickness) ? obj.thickness + 'px' : '1px';\n        inputElement.style.textAlign = obj.alignment ? obj.alignment.toLowerCase() : 'left';\n        inputElement.style.visibility = obj.visibility ? obj.visibility : 'visible';\n        inputElement.style.pointerEvents = obj.isReadonly ? (obj.isMultiline ? 'default' : 'none') : 'default';\n        inputElement.style.resize = obj.isMultiline && !this.pdfViewer.isFormDesignerToolbarVisible ? 'none' : 'default';\n        if (obj.isReadonly) {\n            inputElement.disabled = true;\n            inputElement.style.cursor = 'default';\n            inputElement.style.backgroundColor = obj.backgroundColor !== fillColor ? obj.backgroundColor : 'transparent';\n        }\n        if (obj.isRequired) {\n            inputElement.required = true;\n            inputElement.style.border = '1px solid red';\n            inputElement.style.borderWidth = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(obj.thickness) ? obj.thickness + 'px' : '1px';\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(obj.maxLength)) {\n            inputElement.maxLength = obj.maxLength === 0 ? 524288 : obj.maxLength;\n        }\n        inputElement.tabIndex = this.formFieldIndex;\n        inputElement.setAttribute('aria-label', this.pdfViewer.element.id + 'formfilldesigner');\n    };\n    /**\n     * @param {PdfFormFieldBaseModel} obj - It describes about the object\n     * @param {HTMLElement} inputElement - It describes about the input element\n     * @param {boolean} isPrint - It describes about the isPrint\n     * @private\n     * @returns {void}\n     */\n    FormDesigner.prototype.updatePasswordFieldProperties = function (obj, inputElement, isPrint) {\n        var fillColor = '#daeaf7ff';\n        inputElement.name = obj.name ? obj.name : 'Password' + this.setFormFieldIndex();\n        inputElement.value = obj.value ? obj.value : '';\n        inputElement.style.fontFamily = obj.fontFamily ? obj.fontFamily : 'Helvetica';\n        var zoomValue = isPrint ? this.defaultZoomValue : this.pdfViewerBase.getZoomFactor();\n        inputElement.style.fontSize = obj.fontSize ? (obj.fontSize * zoomValue) + 'px' : (10 * zoomValue) + 'px';\n        if (obj.font.isBold) {\n            inputElement.style.fontWeight = 'bold';\n        }\n        if (obj.font.isItalic) {\n            inputElement.style.fontStyle = 'italic';\n        }\n        if (obj.font.isStrikeout) {\n            inputElement.style.textDecoration = 'line-through';\n        }\n        if (obj.font.isUnderline) {\n            inputElement.style.textDecoration = 'underline';\n        }\n        inputElement.style.borderWidth = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(obj.thickness) ? obj.thickness + 'px' : '1px';\n        inputElement.style.color = obj.color ? obj.color : 'black';\n        inputElement.style.backgroundColor = obj.backgroundColor ? obj.backgroundColor : '#daeaf7ff';\n        inputElement.style.borderColor = obj.borderColor ? obj.borderColor : '#303030';\n        inputElement.style.textAlign = obj.alignment ? obj.alignment.toLowerCase() : 'left';\n        inputElement.style.visibility = obj.visibility ? obj.visibility : 'visible';\n        inputElement.style.pointerEvents = obj.isReadonly ? 'none' : 'default';\n        if (obj.isReadonly) {\n            inputElement.disabled = true;\n            inputElement.style.cursor = 'default';\n            inputElement.style.backgroundColor = obj.backgroundColor !== fillColor ? obj.backgroundColor : 'transparent';\n        }\n        if (obj.isRequired) {\n            inputElement.required = true;\n            inputElement.style.border = '1px solid red';\n            inputElement.style.borderWidth = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(obj.thickness) ? obj.thickness + 'px' : '1px';\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(obj.maxLength)) {\n            inputElement.maxLength = obj.maxLength === 0 ? 524288 : obj.maxLength;\n        }\n        inputElement.tabIndex = this.formFieldIndex;\n    };\n    /**\n     * @param {PdfFormFieldBaseModel} obj - It describes about the object\n     * @param {HTMLElement} inputElement - It describes about the input element\n     * @private\n     * @returns {void}\n     */\n    FormDesigner.prototype.updateCheckboxProperties = function (obj, inputElement) {\n        var fillColor = '#daeaf7ff';\n        inputElement.name = obj.name ? obj.name : 'Check Box' + this.setFormFieldIndex();\n        inputElement.checked = obj.isChecked ? true : false;\n        if (obj.isTransparent && obj.borderColor === '#ffffffff') {\n            inputElement.style.backgroundColor = 'transparent';\n            inputElement.style.borderColor = 'transparent';\n        }\n        else {\n            inputElement.style.backgroundColor = obj.backgroundColor ? obj.backgroundColor : '#daeaf7ff';\n            inputElement.style.borderColor = obj.borderColor ? obj.borderColor : '#303030';\n        }\n        inputElement.style.visibility = obj.visibility ? obj.visibility : 'visible';\n        inputElement.style.pointerEvents = obj.isReadonly ? 'none' : 'default';\n        inputElement.style.borderWidth = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(obj.thickness) ? obj.thickness + 'px' : '1px';\n        if (obj.isReadonly) {\n            inputElement.disabled = true;\n            inputElement.style.cursor = 'default';\n            inputElement.style.backgroundColor = obj.backgroundColor !== fillColor ? obj.backgroundColor : 'transparent';\n        }\n        if (obj.isRequired) {\n            inputElement.required = true;\n            inputElement.style.border = '1px solid red';\n            inputElement.style.borderWidth = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(obj.thickness) ? obj.thickness + 'px' : '1px';\n        }\n        inputElement.tabIndex = this.formFieldIndex;\n    };\n    /**\n     * @param {PdfFormFieldBaseModel} obj - It describes about the object\n     * @param {HTMLElement} inputElement - It describes about the input element\n     * @param {HTMLElement} labelElement - It describes about the label element\n     * @private\n     * @returns {void}\n     */\n    FormDesigner.prototype.updateRadioButtonProperties = function (obj, inputElement, labelElement) {\n        var fillColor = '#daeaf7ff';\n        inputElement.name = obj.name ? obj.name : 'Radio Button' + this.setFormFieldIndex();\n        inputElement.checked = obj.isSelected ? true : false;\n        inputElement.style.backgroundColor = obj.backgroundColor ? obj.backgroundColor : '#daeaf7ff';\n        inputElement.style.borderColor = obj.borderColor ? obj.borderColor : '#303030';\n        inputElement.style.visibility = obj.visibility ? obj.visibility : 'visible';\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(labelElement)) {\n            labelElement.style.pointerEvents = obj.isReadonly ? 'none' : 'default';\n        }\n        else {\n            inputElement.style.pointerEvents = obj.isReadonly ? 'none' : 'default';\n        }\n        inputElement.style.borderWidth = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(obj.thickness) ? obj.thickness + 'px' : '1px';\n        if (obj.isReadonly) {\n            inputElement.disabled = true;\n            inputElement.style.cursor = 'default';\n            inputElement.style.backgroundColor = obj.backgroundColor !== fillColor ? obj.backgroundColor : 'transparent';\n        }\n        if (obj.isRequired) {\n            inputElement.required = true;\n            inputElement.style.border = '1px solid red';\n            inputElement.style.borderWidth = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(obj.thickness) ? obj.thickness + 'px' : '1px';\n        }\n        inputElement.tabIndex = this.formFieldIndex;\n    };\n    /**\n     * @param {PdfFormFieldBaseModel} obj - It describes about the object\n     * @param {HTMLElement} inputElement - It describes about the input element\n     * @param {boolean} isPrint - It describes about the isPrint\n     * @private\n     * @returns {void}\n     */\n    FormDesigner.prototype.updateDropdownListProperties = function (obj, inputElement, isPrint) {\n        var fillColor = '#daeaf7ff';\n        inputElement.name = obj.name ? obj.name : 'Dropdown' + this.setFormFieldIndex();\n        inputElement.value = obj.value ? obj.value : '';\n        inputElement.style.fontFamily = obj.fontFamily ? obj.fontFamily : 'Helvetica';\n        var zoomValue = isPrint ? this.defaultZoomValue : this.pdfViewerBase.getZoomFactor();\n        inputElement.style.fontSize = obj.fontSize ? (obj.fontSize * zoomValue) + 'px' : (10 * zoomValue) + 'px';\n        if (obj.font.isBold) {\n            inputElement.style.fontWeight = 'bold';\n        }\n        if (obj.font.isItalic) {\n            inputElement.style.fontStyle = 'italic';\n        }\n        if (obj.font.isStrikeout) {\n            inputElement.style.textDecoration = 'line-through';\n        }\n        if (obj.font.isUnderline) {\n            inputElement.style.textDecoration = 'underline';\n        }\n        inputElement.style.borderWidth = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(obj.thickness) ? obj.thickness + 'px' : '1px';\n        inputElement.style.color = obj.color ? obj.color : 'black';\n        inputElement.style.backgroundColor = obj.backgroundColor ? obj.backgroundColor : '#daeaf7ff';\n        inputElement.style.borderColor = obj.borderColor ? obj.borderColor : '#303030';\n        inputElement.style.textAlign = obj.alignment ? obj.alignment.toLowerCase() : 'left';\n        inputElement.style.visibility = obj.visibility ? obj.visibility : 'visible';\n        inputElement.style.pointerEvents = obj.isReadonly ? 'none' : 'default';\n        if (obj.isReadonly) {\n            inputElement.disabled = true;\n            inputElement.style.cursor = 'default';\n            inputElement.style.backgroundColor = obj.backgroundColor !== fillColor ? obj.backgroundColor : 'transparent';\n        }\n        if (obj.isRequired) {\n            inputElement.required = true;\n            inputElement.style.border = '1px solid red';\n            inputElement.style.borderWidth = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(obj.thickness) ? obj.thickness + 'px' : '1px';\n        }\n        inputElement.tabIndex = this.formFieldIndex;\n    };\n    /**\n     * @param {PdfFormFieldBaseModel} obj - It describes about the object\n     * @param {HTMLElement} inputElement - It describes about the input element\n     * @param {boolean} isPrint - It describes about the isPrint\n     * @private\n     * @returns {void}\n     */\n    FormDesigner.prototype.updateListBoxProperties = function (obj, inputElement, isPrint) {\n        var fillColor = '#daeaf7ff';\n        inputElement.name = obj.name ? obj.name : 'List Box' + this.setFormFieldIndex();\n        inputElement.value = obj.value ? obj.value : '';\n        inputElement.style.fontFamily = obj.fontFamily ? obj.fontFamily : 'Helvetica';\n        var zoomValue = isPrint ? this.defaultZoomValue : this.pdfViewerBase.getZoomFactor();\n        inputElement.style.fontSize = obj.fontSize ? (obj.fontSize * zoomValue) + 'px' : (10 * zoomValue) + 'px';\n        if (obj.font.isBold) {\n            inputElement.style.fontWeight = 'bold';\n        }\n        if (obj.font.isItalic) {\n            inputElement.style.fontStyle = 'italic';\n        }\n        if (obj.font.isStrikeout) {\n            inputElement.style.textDecoration = 'line-through';\n        }\n        if (obj.font.isUnderline) {\n            inputElement.style.textDecoration = 'underline';\n        }\n        inputElement.style.color = obj.color ? obj.color : 'black';\n        inputElement.style.backgroundColor = obj.backgroundColor ? obj.backgroundColor : '#daeaf7ff';\n        inputElement.style.borderColor = obj.borderColor ? obj.borderColor : '#303030';\n        inputElement.style.textAlign = obj.alignment ? obj.alignment.toLowerCase() : 'left';\n        inputElement.style.visibility = obj.visibility ? obj.visibility : 'visible';\n        inputElement.style.pointerEvents = obj.isReadonly ? 'none' : 'default';\n        inputElement.style.borderWidth = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(obj.thickness) ? obj.thickness + 'px' : '1px';\n        if (obj.isReadonly) {\n            inputElement.disabled = true;\n            inputElement.style.cursor = 'default';\n            inputElement.style.backgroundColor = obj.backgroundColor !== fillColor ? obj.backgroundColor : 'transparent';\n        }\n        if (obj.isRequired) {\n            inputElement.required = true;\n            inputElement.style.border = '1px solid red';\n            inputElement.style.borderWidth = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(obj.thickness) ? obj.thickness + 'px' : '1px';\n        }\n        inputElement.tabIndex = this.formFieldIndex;\n    };\n    /**\n     * @param {PdfFormFieldBaseModel} obj - It describes about the object\n     * @param {HTMLElement} inputElement - It describes about the input element\n     * @param {boolean} isPrint - It describes about the isPrint\n     * @private\n     * @returns {void}\n     */\n    FormDesigner.prototype.updateSignatureFieldProperties = function (obj, inputElement, isPrint) {\n        inputElement.name = obj.name ? obj.name : 'Signature' + this.setFormFieldIndex();\n        inputElement.value = obj.value ? obj.value : '';\n        inputElement.style.fontFamily = obj.fontFamily ? obj.fontFamily : 'Helvetica';\n        inputElement.style.visibility = obj.visibility ? obj.visibility : 'visible';\n        var zoomValue = this.pdfViewerBase.getZoomFactor();\n        inputElement.style.fontSize = obj.fontSize ? (obj.fontSize * zoomValue) + 'px' : (10 * zoomValue) + 'px';\n        if (obj.font.isBold) {\n            inputElement.style.fontWeight = 'bold';\n        }\n        if (obj.font.isItalic) {\n            inputElement.style.fontStyle = 'italic';\n        }\n        if (obj.font.isStrikeout) {\n            inputElement.style.textDecoration = 'line-through';\n        }\n        if (obj.font.isUnderline) {\n            inputElement.style.textDecoration = 'underline';\n        }\n        inputElement.style.color = obj.color ? obj.color : 'black';\n        inputElement.style.borderWidth = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(obj.thickness) ? obj.thickness + 'px' : '1px';\n        var background = obj.backgroundColor ? obj.backgroundColor : '#FFE48559';\n        background = _base_pdfviewer_utlis__WEBPACK_IMPORTED_MODULE_12__.PdfViewerUtils.setTransparencyToHex(background);\n        if (obj.isTransparent && obj.borderColor === '#ffffffff') {\n            inputElement.style.backgroundColor = 'transparent';\n            inputElement.style.borderColor = 'transparent';\n            if (inputElement.firstElementChild) {\n                inputElement.firstElementChild.style.borderColor = 'transparent';\n            }\n        }\n        else {\n            inputElement.style.backgroundColor = isPrint ? 'transparent' : background;\n            inputElement.style.borderColor = obj.borderColor ? obj.borderColor : '#303030';\n            if (inputElement.firstElementChild) {\n                inputElement.firstElementChild.style.borderColor = obj.borderColor ? obj.borderColor : '#303030';\n            }\n        }\n        inputElement.style.pointerEvents = obj.isReadonly ? 'none' : 'default';\n        if (obj.isReadonly) {\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(inputElement.firstElementChild)) {\n                inputElement.firstElementChild.disabled = true;\n            }\n            inputElement.style.cursor = 'default';\n        }\n        if (obj.isRequired) {\n            inputElement.required = true;\n            if (inputElement.firstElementChild) {\n                var thickness = (obj.thickness > 0) ? obj.thickness : 1;\n                inputElement.firstElementChild.style.border = thickness + 'px solid red';\n            }\n            else {\n                inputElement.style.border = '1px solid red';\n            }\n            inputElement.style.borderWidth = obj.thickness ? obj.thickness + 'px' : '1px';\n        }\n        inputElement.tabIndex = this.formFieldIndex;\n    };\n    /**\n     * @param {string} elementType - It describes about the elementt type\n     * @param {object} attribute - It describes about the attribut\n     * @private\n     * @returns {HTMLElement} - html element\n     */\n    FormDesigner.prototype.createHtmlElement = function (elementType, attribute) {\n        var element = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)(elementType);\n        this.setAttributeHtml(element, attribute);\n        return element;\n    };\n    FormDesigner.prototype.setAttributeHtml = function (element, attributes) {\n        var keys = Object.keys(attributes);\n        for (var i = 0; i < keys.length; i++) {\n            if (keys[parseInt(i.toString(), 10)] !== 'style') {\n                element.setAttribute(keys[parseInt(i.toString(), 10)], attributes[keys[parseInt(i.toString(), 10)]]);\n            }\n            else {\n                this.applyStyleAgainstCsp(element, attributes[keys[parseInt(i.toString(), 10)]]);\n            }\n        }\n    };\n    FormDesigner.prototype.applyStyleAgainstCsp = function (svg, attributes) {\n        var keys = attributes.split(';');\n        for (var i = 0; i < keys.length; i++) {\n            var attribute = keys[parseInt(i.toString(), 10)].split(':');\n            if (attribute.length === 2) {\n                svg.style[attribute[0].trim()] = attribute[1].trim();\n            }\n        }\n    };\n    FormDesigner.prototype.getFieldBounds = function (bound, pageIndex) {\n        var pageDetails = this.pdfViewerBase.pageSize[parseInt(pageIndex.toString(), 10)];\n        bound = { X: bound.X ? bound.X : bound.x, Y: bound.Y ? bound.Y : bound.y, Width: bound.Width ? bound.Width : bound.width,\n            Height: bound.Height ? bound.Height : bound.height };\n        var bounds;\n        if (pageDetails) {\n            switch (pageDetails.rotation) {\n                case 0:\n                    bounds = bound;\n                    break;\n                case 1:\n                    bounds = { X: bound.Y - (bound.Width / 2 - bound.Height / 2), Y: pageDetails.width - bound.X - bound.Height -\n                            (bound.Width / 2 - bound.Height / 2), Width: bound.Width, Height: bound.Height };\n                    break;\n                case 2:\n                    bounds = { X: pageDetails.width - bound.X - bound.Width, Y: pageDetails.height - bound.Y - bound.Height,\n                        Width: bound.Width, Height: bound.Height };\n                    break;\n                case 3:\n                    bounds = { X: (pageDetails.height - bound.Y - bound.Width + (bound.Width / 2 - bound.Height / 2)),\n                        Y: bound.X + (bound.Width / 2 - bound.Height / 2), Width: bound.Height, Height: bound.Width };\n                    break;\n            }\n        }\n        if (!bounds) {\n            bounds = bound;\n        }\n        return bounds;\n    };\n    /**\n     * @private\n     * @returns {string} - string\n     */\n    FormDesigner.prototype.downloadFormDesigner = function () {\n        var _this = this;\n        var data = this.pdfViewerBase.getItemFromSessionStorage('_formDesigner');\n        if (data || (this.pdfViewer.formDesignerModule && this.pdfViewer.formFieldCollections.length > 0)) {\n            var formFieldsData = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(data) ? JSON.parse(data) : [];\n            // Get Formfields present in non rendered pages\n            if (formFieldsData && formFieldsData.length !== this.pdfViewer.formFieldCollections.length) {\n                var formFieldNotContains = this.pdfViewer.formFieldCollections.filter(function (_a) {\n                    var id1 = _a.id;\n                    return !_this.pdfViewer.formFieldCollection.some(function (_a) {\n                        var id2 = _a.id;\n                        return id2 === id1;\n                    });\n                });\n                var _loop_8 = function (k) {\n                    var items = this_8.loadedFormFieldValue(formFieldNotContains[parseInt(k.toString(), 10)]);\n                    if (items.formFieldAnnotationType === 'RadioButton') {\n                        var index = formFieldsData.findIndex(function (field) { return field.FormField.name === items.name; });\n                        if (index && index >= 0) {\n                            formFieldsData[parseInt(index.toString(), 10)].FormField.radiobuttonItem.push(items);\n                        }\n                        else {\n                            formFieldsData.push({ Key: items.id + '_content', FormField: items });\n                        }\n                    }\n                    else {\n                        formFieldsData.push({ Key: items.id + '_content', FormField: items });\n                    }\n                };\n                var this_8 = this;\n                for (var k = 0; k < formFieldNotContains.length; k++) {\n                    _loop_8(k);\n                }\n            }\n            var _loop_9 = function (i) {\n                var currentData = formFieldsData[parseInt(i.toString(), 10)].FormField;\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(currentData)) {\n                    if ((currentData.formFieldAnnotationType === 'SignatureField' || currentData.formFieldAnnotationType === 'InitialField') && ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(currentData.signatureBound))) {\n                        var filteredField = this_9.pdfViewer.formFieldCollections.filter(function (field) {\n                            return field.id === currentData.id.split('_')[0];\n                        });\n                        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(currentData.signatureType) && currentData.signatureType === '') {\n                            currentData.signatureType = filteredField[0].signatureType;\n                        }\n                        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(currentData.value) && currentData.value === '') {\n                            currentData.value = filteredField[0].value;\n                        }\n                        if (currentData.signatureType === 'Image') {\n                            var imageUrl = (currentData.value.toString()).split(',')[1];\n                            var image = new _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_11__.PdfBitmap(imageUrl);\n                            var boundsObjects = {\n                                x: currentData.lineBound.X, y: currentData.lineBound.Y,\n                                width: currentData.lineBound.Width, height: currentData.lineBound.Height\n                            };\n                            //Draw image in page graphics\n                            if (this_9.pdfViewer.signatureFitMode === 'Default') {\n                                var padding = Math.min(boundsObjects.height / this_9.pdfViewer.formFieldsModule.paddingDifferenceValue, boundsObjects.width / this_9.pdfViewer.formFieldsModule.paddingDifferenceValue);\n                                var maxHeight = boundsObjects.height - padding;\n                                var maxWidth = boundsObjects.width - padding;\n                                var imageWidth = image.width;\n                                var imageHeight = image.height;\n                                var beforeWidth = boundsObjects.width;\n                                var beforeHeight = boundsObjects.height;\n                                var ratio = Math.min(maxWidth / imageWidth, maxHeight / imageHeight);\n                                boundsObjects.width = imageWidth * ratio;\n                                boundsObjects.height = imageHeight * ratio;\n                                boundsObjects.x = boundsObjects.x + (beforeWidth - boundsObjects.width) / 2;\n                                boundsObjects.y = boundsObjects.y + (beforeHeight - boundsObjects.height) / 2;\n                            }\n                            currentData.signatureBound = boundsObjects;\n                            image = null;\n                        }\n                        else if (currentData.signatureType === 'Path') {\n                            var boundsObjects = {\n                                x: currentData.lineBound.X, y: currentData.lineBound.Y,\n                                width: currentData.lineBound.Width, height: currentData.lineBound.Height\n                            };\n                            if (this_9.pdfViewer.signatureFitMode === 'Default') {\n                                var zoomvalue = this_9.pdfViewerBase.getZoomFactor();\n                                currentData.LineBounds = { X: _base_pdfviewer_utlis__WEBPACK_IMPORTED_MODULE_12__.PdfViewerUtils.convertPixelToPoint(currentData.lineBound.X),\n                                    Y: _base_pdfviewer_utlis__WEBPACK_IMPORTED_MODULE_12__.PdfViewerUtils.convertPixelToPoint(currentData.lineBound.Y),\n                                    Width: _base_pdfviewer_utlis__WEBPACK_IMPORTED_MODULE_12__.PdfViewerUtils.convertPixelToPoint(currentData.lineBound.Width),\n                                    Height: _base_pdfviewer_utlis__WEBPACK_IMPORTED_MODULE_12__.PdfViewerUtils.convertPixelToPoint(currentData.lineBound.Height) };\n                                var signatureBounds = this_9.pdfViewerBase.signatureModule.\n                                    updateSignatureAspectRatio(filteredField[0].value, false, null, currentData);\n                                boundsObjects = this_9.pdfViewer.formFieldsModule.\n                                    getSignBounds(i, currentData.rotation, currentData.pageNumber, zoomvalue, currentData.lineBound.X, currentData.lineBound.Y, signatureBounds.width, signatureBounds.height, true);\n                                boundsObjects.x = boundsObjects.x + signatureBounds.left;\n                                boundsObjects.y = boundsObjects.y + signatureBounds.top;\n                            }\n                            currentData.signatureBound = boundsObjects;\n                            var collectionData = (0,_syncfusion_ej2_drawings__WEBPACK_IMPORTED_MODULE_1__.processPathData)(filteredField[0].value);\n                            var csData = (0,_syncfusion_ej2_drawings__WEBPACK_IMPORTED_MODULE_1__.splitArrayCollection)(collectionData);\n                            currentData.value = JSON.stringify(csData);\n                        }\n                        else if (currentData.signatureType === 'Type') {\n                            var zoomvalue = this_9.pdfViewerBase.getZoomFactor();\n                            var bounds = this_9.pdfViewer.formFieldsModule.\n                                getSignBounds(i, currentData.rotation, currentData.pageNumber, zoomvalue, currentData.lineBound.X, currentData.lineBound.Y, currentData.lineBound.Width, currentData.lineBound.Height);\n                            if (this_9.pdfViewer.signatureFitMode === 'Default') {\n                                bounds = this_9.pdfViewer.formFieldsModule.getDefaultBoundsforSign(bounds);\n                            }\n                            currentData.signatureBound = bounds;\n                            currentData.signatureType = 'Text';\n                            var fontSize = bounds.height / this_9.pdfViewer.formFieldsModule.signatureFontSizeConstent;\n                            var textWidth = this_9.pdfViewer.formFieldsModule.\n                                getTextWidth(currentData.value, fontSize, currentData.fontFamily);\n                            var widthRatio = 1;\n                            if (textWidth > bounds.width) {\n                                widthRatio = bounds.width / textWidth;\n                            }\n                            currentData.fontSize = this_9.pdfViewer.formFieldsModule.getFontSize(Math.floor((fontSize * widthRatio)));\n                        }\n                    }\n                }\n                currentData.Multiline = currentData.isMultiline;\n                if (currentData.isRequired) {\n                    if (currentData.formFieldAnnotationType === 'Textbox' || currentData.formFieldAnnotationType === 'PasswordField' || currentData.Multiline) {\n                        if (currentData.value === null || currentData.value === '') {\n                            this_9.pdfViewerBase.validateForm = true;\n                            this_9.pdfViewerBase.nonFillableFields[currentData.name] = currentData.value;\n                        }\n                        else {\n                            delete (this_9.pdfViewerBase.nonFillableFields[currentData.name]);\n                        }\n                    }\n                    else if (currentData.formFieldAnnotationType === 'RadioButton') {\n                        if (currentData.radiobuttonItem) {\n                            var isSelected = false;\n                            for (var j = 0; j < currentData.radiobuttonItem.length; j++) {\n                                if (currentData.radiobuttonItem[parseInt(j.toString(), 10)].isSelected) {\n                                    isSelected = true;\n                                    break;\n                                }\n                            }\n                            if (!isSelected) {\n                                this_9.pdfViewerBase.validateForm = true;\n                                this_9.pdfViewerBase.nonFillableFields[currentData.name] = isSelected;\n                            }\n                            else {\n                                delete (this_9.pdfViewerBase.nonFillableFields[currentData.name]);\n                            }\n                        }\n                    }\n                    else if (currentData.formFieldAnnotationType === 'Checkbox') {\n                        if (currentData.isChecked === false) {\n                            this_9.pdfViewerBase.validateForm = true;\n                            this_9.pdfViewerBase.nonFillableFields[currentData.name] = currentData.isChecked;\n                        }\n                        else {\n                            delete (this_9.pdfViewerBase.nonFillableFields[currentData.name]);\n                        }\n                    }\n                    else if (currentData.formFieldAnnotationType === 'DropdownList' || currentData.formFieldAnnotationType === 'ListBox') {\n                        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(currentData.selectedIndex) || currentData.selectedIndex.length === 0) {\n                            this_9.pdfViewerBase.validateForm = true;\n                            this_9.pdfViewerBase.nonFillableFields[currentData.name] = currentData.selectedIndex;\n                        }\n                        else {\n                            delete (this_9.pdfViewerBase.nonFillableFields[currentData.name]);\n                        }\n                    }\n                    else if (currentData.formFieldAnnotationType === 'SignatureField' || currentData.formFieldAnnotationType === 'InitialField') {\n                        if (currentData.value === null || currentData.value === '') {\n                            this_9.pdfViewerBase.validateForm = true;\n                            this_9.pdfViewerBase.nonFillableFields[currentData.name] = currentData.value;\n                        }\n                        else {\n                            delete (this_9.pdfViewerBase.nonFillableFields[currentData.name]);\n                        }\n                    }\n                }\n                if (currentData) {\n                    if (currentData.formFieldAnnotationType === 'SignatureField' || currentData.formFieldAnnotationType === 'InitialField') {\n                        if (currentData.signatureType === 'Text' && !this_9.pdfViewerBase.signatureModule.checkDefaultFont(currentData.fontFamily)) {\n                            this_9.getTextToImage(currentData);\n                        }\n                    }\n                }\n            };\n            var this_9 = this;\n            for (var i = 0; i < formFieldsData.length; i++) {\n                _loop_9(i);\n            }\n            return (JSON.stringify(formFieldsData));\n        }\n        else {\n            return null;\n        }\n    };\n    FormDesigner.prototype.getTextToImage = function (currentData) {\n        var signTypeCanvas = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('canvas');\n        signTypeCanvas.width = currentData.lineBound.Width / this.pdfViewerBase.getZoomFactor() || 150;\n        signTypeCanvas.height = currentData.lineBound.Height / this.pdfViewerBase.getZoomFactor() || currentData.fontSize * 2;\n        var canvasContext = signTypeCanvas.getContext('2d');\n        var x = signTypeCanvas.width / 2;\n        var y = (signTypeCanvas.height / 2) + currentData.fontSize / 2 - 10;\n        canvasContext.textAlign = 'center';\n        canvasContext.font = currentData.fontSize + 'px ' + currentData.fontFamily;\n        canvasContext.fillText(currentData.value, x, y);\n        currentData.value = JSON.stringify(signTypeCanvas.toDataURL('image/png'));\n        currentData.signatureType = 'Image';\n    };\n    /**\n     * @param {any} currentData - It describes about the current data\n     * @private\n     * @returns {any} - any\n     */\n    FormDesigner.prototype.loadedFormFieldValue = function (currentData) {\n        var backgroundColor = this.getRgbCode(currentData.backgroundColor);\n        var bounds = currentData.bounds;\n        var backColor = currentData.backgroundColor ? { r: backgroundColor.r, g: backgroundColor.g,\n            b: backgroundColor.b, a: backgroundColor.a } : { r: 218, g: 234, b: 247, a: 100 };\n        var fontColor = this.hexToRgb(currentData.color);\n        var foreColor = currentData.color ? { r: fontColor[0], g: fontColor[1], b: fontColor[2], a: 100 } :\n            { r: 0, g: 0, b: 0, a: 100 };\n        var borderColor = this.hexToRgb(currentData.borderColor);\n        var borderRGB = currentData.borderColor ? { r: borderColor[0], g: borderColor[1], b: borderColor[2], a: 100 } :\n            { r: 48, g: 48, b: 48, a: 100 };\n        var value;\n        var options = [];\n        var dropListoptions = [];\n        var selectedIndex = [];\n        var finalSignBounds;\n        var signType = '';\n        this.data = this.pdfViewerBase.getItemFromSessionStorage('_formfields');\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.data)) {\n            this.formFieldsData = JSON.parse(this.data);\n            if ((currentData.type === 'DropdownList' || currentData.type === 'ListBox')) {\n                var dropListData = this.formFieldsData.filter(function (fieldData) { return (currentData.name === fieldData.FieldName); });\n                if (dropListData.length > 0) {\n                    dropListoptions = dropListData[0].TextList;\n                    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(dropListData[0].selectedIndex)) {\n                        selectedIndex.push(dropListData[0].selectedIndex);\n                    }\n                    else {\n                        selectedIndex.push(dropListData[0].SelectedList[0]);\n                    }\n                    for (var i = 0; i < dropListoptions.length; i++) {\n                        options.push({ itemName: dropListoptions[parseInt(i.toString(), 10)],\n                            itemValue: dropListoptions[parseInt(i.toString(), 10)] });\n                    }\n                }\n            }\n            if ((currentData.type === 'InitialField' || currentData.type === 'SignatureField')) {\n                this.formFieldsData = JSON.parse(this.data);\n                if (this.formFieldsData[0] === '[') {\n                    this.formFieldsData = JSON.parse(this.formFieldsData);\n                }\n                var signData_1 = this.formFieldsData.filter(function (signfieldName) { return (currentData.name === signfieldName.FieldName); });\n                if (signData_1.length > 0) {\n                    var boundsData = this.formFieldsData.filter(function (datafieldName) { return (datafieldName.Name === 'ink' || datafieldName.Name === 'SignatureField' || datafieldName.Name === 'SignatureImage' || datafieldName.Name === 'SignatureText') && (signData_1[0].FieldName === datafieldName.FieldName.split('_')[0]); });\n                    for (var i = 0; i < boundsData.length; i++) {\n                        if ((signData_1[0].FieldName !== boundsData[parseInt(i.toString(), 10)].FieldName)) {\n                            value = boundsData[parseInt(i.toString(), 10)].Value;\n                            currentData.fontFamily = boundsData[parseInt(i.toString(), 10)].FontFamily;\n                            currentData.fontSize = boundsData[parseInt(i.toString(), 10)].FontSize;\n                            if (!signData_1.Bounds) {\n                                var signBounds = boundsData[parseInt(i.toString(), 10)].LineBounds;\n                                var currentLeft = void 0;\n                                var currentTop = void 0;\n                                var currentWidth = void 0;\n                                var currentHeight = void 0;\n                                var currentPage = parseFloat(boundsData[parseInt(i.toString(), 10)].PageIndex);\n                                if (signBounds.x || signBounds.y || signBounds.width || signBounds.height) {\n                                    currentLeft = signBounds.x;\n                                    currentTop = signBounds.y;\n                                    currentWidth = signBounds.width;\n                                    currentHeight = signBounds.height;\n                                }\n                                else {\n                                    currentLeft = this.pdfViewer.formFieldsModule.ConvertPointToPixel(signBounds.X);\n                                    currentTop = this.pdfViewer.formFieldsModule.ConvertPointToPixel(signBounds.Y);\n                                    currentWidth = this.pdfViewer.formFieldsModule.ConvertPointToPixel(signBounds.Width);\n                                    currentHeight = this.pdfViewer.formFieldsModule.ConvertPointToPixel(signBounds.Height);\n                                }\n                                var bound = { left: currentLeft, top: currentTop, width: currentWidth, height: currentHeight };\n                                finalSignBounds = this.pdfViewer.formFieldsModule.updateSignatureBounds(bound, currentPage, false);\n                            }\n                            if (boundsData[parseInt(i.toString(), 10)].Name === 'SignatureImage') {\n                                signType = 'Image';\n                            }\n                            if (boundsData[parseInt(i.toString(), 10)].Name === 'ink') {\n                                signType = 'Path';\n                            }\n                            if (boundsData[parseInt(i.toString(), 10)].Name === 'SignatureText') {\n                                signType = 'Text';\n                            }\n                            if (signType === 'Path') {\n                                var collectionData = (0,_syncfusion_ej2_drawings__WEBPACK_IMPORTED_MODULE_1__.processPathData)(boundsData[parseInt(i.toString(), 10)].Value);\n                                var csData = (0,_syncfusion_ej2_drawings__WEBPACK_IMPORTED_MODULE_1__.splitArrayCollection)(collectionData);\n                                value = JSON.stringify(csData);\n                            }\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n        var fieldProperties = {\n            lineBound: { X: bounds.x, Y: bounds.y, Width: bounds.width, Height: bounds.height },\n            pageNumber: parseFloat(currentData.pageIndex) + 1, name: currentData.name, tooltip: currentData.tooltip,\n            value: value ? value : currentData.value, radiobuttonItem: [],\n            signatureType: currentData.signatureType ? currentData.signatureType : signType, id: currentData.id,\n            insertSpaces: currentData.insertSpaces ? currentData.insertSpaces : false,\n            isChecked: currentData.isChecked ? currentData.isChecked : false,\n            isSelected: currentData.isSelected ? currentData.isSelected : false, fontFamily: currentData.fontFamily,\n            fontStyle: currentData.fontStyle, backgroundColor: backColor, fontColor: foreColor, borderColor: borderRGB,\n            thickness: currentData.thickness,\n            fontSize: currentData.fontSize, isMultiline: currentData.isMultiline ? currentData.isMultiline : false, rotation: 0,\n            isReadOnly: currentData.isReadOnly ? currentData.isReadOnly : false,\n            isRequired: currentData.isRequired ? currentData.isRequired : false, textAlign: currentData.alignment,\n            formFieldAnnotationType: currentData.type,\n            zoomValue: 1, option: options, maxLength: currentData.maxLength ? currentData.maxLength : 0,\n            visibility: currentData.visibility, font: { isItalic: false, isBold: false, isStrikeout: false, isUnderline: false },\n            customData: currentData.customData\n        };\n        if (finalSignBounds) {\n            fieldProperties.signatureBound = finalSignBounds;\n        }\n        if (selectedIndex.length > 0) {\n            fieldProperties.selectedIndex = selectedIndex;\n        }\n        if (currentData.type === 'RadioButton') {\n            var field = {\n                lineBound: { X: bounds.x, Y: bounds.y, Width: bounds.width, Height: bounds.height },\n                pageNumber: parseFloat(currentData.pageIndex) + 1, name: currentData.name, tooltip: currentData.tooltip,\n                value: currentData.value, signatureType: currentData.signatureType ? currentData.signatureType : '', id: currentData.id,\n                isChecked: currentData.isChecked ? currentData.isChecked : false, isSelected: currentData.isSelected ?\n                    currentData.isSelected : false,\n                fontFamily: currentData.fontFamily, fontStyle: currentData.fontStyle, backgroundColor: backColor,\n                fontColor: foreColor, borderColor: borderRGB, thickness: currentData.thickness, fontSize: currentData.fontSize, rotation: 0,\n                isReadOnly: currentData.isReadOnly ? currentData.isReadOnly : false, isRequired: currentData.isRequired ?\n                    currentData.isRequired : false,\n                textAlign: currentData.alignment, formFieldAnnotationType: currentData.type, zoomValue: 1,\n                maxLength: currentData.maxLength ? currentData.maxLength : 0, visibility: currentData.visibility,\n                font: { isItalic: false, isBold: false, isStrikeout: false, isUnderline: false },\n                customData: currentData.customData\n            };\n            fieldProperties.radiobuttonItem.push(field);\n        }\n        else {\n            fieldProperties.radiobuttonItem = [];\n        }\n        return fieldProperties;\n    };\n    /**\n     * @param {HTMLElement} pageDiv - It describes about the pageDiv\n     * @param {number} pageWidth - It describes about the pageWidth\n     * @param {number} pageHeight - It describes about the pageHeight\n     * @param {number} pageNumber - It describes about the pageNumber\n     * @param {string} displayMode - It describes about the displayMode\n     * @private\n     * @returns {HTMLElement} - html element\n     */\n    FormDesigner.prototype.createAnnotationLayer = function (pageDiv, pageWidth, pageHeight, pageNumber, displayMode) {\n        var canvas = this.pdfViewerBase.getElement('_annotationCanvas_' + pageNumber);\n        if (canvas) {\n            this.updateAnnotationCanvas(canvas, pageWidth, pageHeight, pageNumber);\n            return canvas;\n        }\n        else {\n            var annotationCanvas = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('canvas', { id: this.pdfViewer.element.id + '_annotationCanvas_' + pageNumber, className: 'e-pv-annotation-canvas' });\n            this.updateAnnotationCanvas(annotationCanvas, pageWidth, pageHeight, pageNumber);\n            pageDiv.appendChild(annotationCanvas);\n            return annotationCanvas;\n        }\n    };\n    /**\n     * @param {number} width - It describes about the width\n     * @param {number} height - It describes about the height\n     * @param {number} pageNumber - It describes about the page number\n     * @private\n     * @returns {void}\n     */\n    FormDesigner.prototype.resizeAnnotations = function (width, height, pageNumber) {\n        var canvas = this.pdfViewerBase.getAnnotationCanvas('_annotationCanvas_', pageNumber);\n        if (canvas) {\n            canvas.style.width = width + 'px';\n            canvas.style.height = height + 'px';\n            this.pdfViewerBase.applyElementStyles(canvas, pageNumber);\n        }\n    };\n    /**\n     * @param {Event} event - It describes about the event\n     * @private\n     * @returns {number} - number\n     */\n    FormDesigner.prototype.getEventPageNumber = function (event) {\n        var eventTarget = event.target;\n        if (eventTarget.classList.contains('e-pv-hyperlink')) {\n            eventTarget = eventTarget.parentElement;\n        }\n        else if (eventTarget.parentElement.classList.contains('foreign-object') || (eventTarget.parentElement.classList.contains('e-pv-radiobtn-container'))) {\n            eventTarget = eventTarget.closest('.e-pv-text-layer');\n        }\n        var pageString = eventTarget.id.split('_text_')[1] || eventTarget.id.split('_textLayer_')[1] || eventTarget.id.split('_annotationCanvas_')[1] || eventTarget.id.split('_pageDiv_')[1];\n        if (isNaN(pageString)) {\n            event = this.pdfViewerBase.annotationEvent;\n            if (event) {\n                eventTarget = event.target;\n                pageString = eventTarget.id.split('_text_')[1] || eventTarget.id.split('_textLayer_')[1] || eventTarget.id.split('_annotationCanvas_')[1] || eventTarget.id.split('_pageDiv_')[1];\n            }\n        }\n        return parseInt(pageString, 10);\n    };\n    FormDesigner.prototype.getPropertyPanelHeaderContent = function (formFieldType) {\n        switch (formFieldType) {\n            case 'Textbox':\n                return this.pdfViewer.localeObj.getConstant('Textbox');\n            case 'PasswordField':\n                return this.pdfViewer.localeObj.getConstant('Password');\n            case 'Checkbox':\n                return this.pdfViewer.localeObj.getConstant('Check Box');\n            case 'RadioButton':\n                return this.pdfViewer.localeObj.getConstant('Radio Button');\n            case 'DropdownList':\n                return this.pdfViewer.localeObj.getConstant('Dropdown');\n            case 'ListBox':\n                return this.pdfViewer.localeObj.getConstant('List Box');\n            case 'InitialField':\n                return this.pdfViewer.localeObj.getConstant('Initial');\n            case 'SignatureField':\n                return this.pdfViewer.localeObj.getConstant('Signature');\n        }\n    };\n    /**\n     * @private\n     * @returns {void}\n     */\n    FormDesigner.prototype.createPropertiesWindow = function () {\n        var _this = this;\n        var elementID = this.pdfViewer.element.id;\n        var propertyWinMinHeight;\n        var dialogDiv = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div', { id: elementID + '_properties_window', className: 'e-pv-properties-form-field-window' });\n        var appearanceTab = this.createAppearanceTab();\n        this.pdfViewerBase.pageContainer.appendChild(dialogDiv);\n        if (this.pdfViewer.selectedItems.formFields[0].formFieldAnnotationType !== 'DropdownList' && this.pdfViewer.selectedItems.formFields[0].formFieldAnnotationType !== 'ListBox') {\n            propertyWinMinHeight = '430px';\n        }\n        else {\n            propertyWinMinHeight = '505px';\n        }\n        this.propertiesDialog = new _syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_3__.Dialog({\n            showCloseIcon: true, closeOnEscape: false, isModal: true, header: '<div class=\"e-pv-form-field-property-header\"> ' + this.getPropertyPanelHeaderContent(this.pdfViewer.selectedItems.formFields[0].formFieldAnnotationType) + ' ' + this.pdfViewer.localeObj.getConstant('Properties') + '</div>',\n            minHeight: propertyWinMinHeight, target: this.pdfViewer.element, content: appearanceTab, beforeOpen: function () {\n                _this.isPropertyDialogOpen = true;\n            }, allowDragging: true, close: function () {\n                _this.destroyPropertiesWindow();\n                _this.isPropertyDialogOpen = false;\n            }\n        });\n        if (!_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice || this.pdfViewer.enableDesktopMode) {\n            this.propertiesDialog.buttons = [\n                { buttonModel: { content: this.pdfViewer.localeObj.getConstant('Cancel') }, click: this.onCancelClicked.bind(this) },\n                { buttonModel: { content: this.pdfViewer.localeObj.getConstant('OK'), isPrimary: true }, click: this.onOkClicked.bind(this) }\n            ];\n        }\n        else {\n            this.propertiesDialog.buttons = [\n                { buttonModel: { content: this.pdfViewer.localeObj.getConstant('Cancel') }, click: this.onCancelClicked.bind(this) },\n                { buttonModel: { content: this.pdfViewer.localeObj.getConstant('OK'), isPrimary: true }, click: this.onOkClicked.bind(this) }\n            ];\n        }\n        if (this.pdfViewer.enableRtl) {\n            this.propertiesDialog.enableRtl = true;\n        }\n        var propertySpliterBottom = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div');\n        propertySpliterBottom.className = 'e-pv-properties-bottom-spliter';\n        dialogDiv.appendChild(propertySpliterBottom);\n        this.propertiesDialog.appendTo(dialogDiv);\n    };\n    FormDesigner.prototype.onOkClicked = function (args) {\n        var selectedItem = this.pdfViewer.selectedItems.formFields[0];\n        var clonedItem = (0,_drawing_drawing_util__WEBPACK_IMPORTED_MODULE_10__.cloneObject)(selectedItem);\n        this.isAddFormFieldProgrammatically = false;\n        if (selectedItem) {\n            switch (selectedItem.formFieldAnnotationType) {\n                case 'Textbox':\n                case 'PasswordField': {\n                    if (this.formFieldMultiline && this.formFieldMultiline.checked && selectedItem.formFieldAnnotationType === 'Textbox' && this.multilineCheckboxCheckedState) {\n                        this.renderMultilineText(selectedItem);\n                    }\n                    else if (selectedItem.formFieldAnnotationType === 'Textbox' && this.multilineCheckboxCheckedState) {\n                        this.renderTextbox(selectedItem);\n                    }\n                    if (selectedItem.formFieldAnnotationType === 'PasswordField') {\n                        this.updateTextboxFormDesignerProperties(selectedItem);\n                    }\n                    if (selectedItem.formFieldAnnotationType === 'Textbox') {\n                        var textboxCollection = this.checkTextboxName(selectedItem);\n                        if (textboxCollection && textboxCollection.length > 0) {\n                            for (var i = 0; i < textboxCollection.length; i++) {\n                                var item = textboxCollection[parseInt(i.toString(), 10)];\n                                if (item.id === selectedItem.id) {\n                                    if (selectedItem.isMultiline) {\n                                        this.renderMultilineText(item);\n                                    }\n                                    else {\n                                        this.renderTextbox(item);\n                                    }\n                                    if (document.getElementById(item.id + '_content_html_element')) {\n                                        this.updateTextboxFormDesignerProperties(item);\n                                    }\n                                    else {\n                                        this.updateFormFieldPropertiesInCollections(item);\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    this.multilineCheckboxCheckedState = false;\n                    var point = (0,_syncfusion_ej2_drawings__WEBPACK_IMPORTED_MODULE_1__.cornersPointsBeforeRotation)(selectedItem.wrapper.children[0]).topLeft;\n                    this.updateFormDesignerFieldInSessionStorage(point, selectedItem.wrapper.children[0], selectedItem.formFieldAnnotationType, selectedItem);\n                    break;\n                }\n                case 'Checkbox': {\n                    this.updateCheckboxFormDesignerProperties(selectedItem, false);\n                    var point1 = (0,_syncfusion_ej2_drawings__WEBPACK_IMPORTED_MODULE_1__.cornersPointsBeforeRotation)(selectedItem.wrapper.children[0]).topLeft;\n                    this.updateFormDesignerFieldInSessionStorage(point1, selectedItem.wrapper.children[0], selectedItem.formFieldAnnotationType, selectedItem);\n                    break;\n                }\n                case 'RadioButton': {\n                    this.updateRadioButtonDesignerProperties(selectedItem, false);\n                    var point2 = (0,_syncfusion_ej2_drawings__WEBPACK_IMPORTED_MODULE_1__.cornersPointsBeforeRotation)(selectedItem.wrapper.children[0]).topLeft;\n                    this.updateFormDesignerFieldInSessionStorage(point2, selectedItem.wrapper.children[0], selectedItem.formFieldAnnotationType, selectedItem);\n                    break;\n                }\n                case 'SignatureField':\n                case 'InitialField': {\n                    this.updateSignatureTextboxProperties(selectedItem);\n                    var point3 = (0,_syncfusion_ej2_drawings__WEBPACK_IMPORTED_MODULE_1__.cornersPointsBeforeRotation)(selectedItem.wrapper.children[0]).topLeft;\n                    this.updateFormDesignerFieldInSessionStorage(point3, selectedItem.wrapper.children[0], selectedItem.formFieldAnnotationType, selectedItem);\n                    break;\n                }\n                case 'DropdownList': {\n                    this.updateDropdownFormDesignerProperties(selectedItem);\n                    var point4 = (0,_syncfusion_ej2_drawings__WEBPACK_IMPORTED_MODULE_1__.cornersPointsBeforeRotation)(selectedItem.wrapper.children[0]).topLeft;\n                    this.updateFormDesignerFieldInSessionStorage(point4, selectedItem.wrapper.children[0], selectedItem.formFieldAnnotationType, selectedItem);\n                    break;\n                }\n                case 'ListBox': {\n                    this.updateListBoxFormDesignerProperties(selectedItem);\n                    var point5 = (0,_syncfusion_ej2_drawings__WEBPACK_IMPORTED_MODULE_1__.cornersPointsBeforeRotation)(selectedItem.wrapper.children[0]).topLeft;\n                    this.updateFormDesignerFieldInSessionStorage(point5, selectedItem.wrapper.children[0], selectedItem.formFieldAnnotationType, selectedItem);\n                    break;\n                }\n            }\n            this.updateFormFieldCollections(selectedItem);\n            var cloneChangedNode = (0,_drawing_drawing_util__WEBPACK_IMPORTED_MODULE_10__.cloneObject)(selectedItem);\n            if (this.pdfViewer.annotation) {\n                this.pdfViewer.annotation.addAction(this.pdfViewerBase.currentPageNumber, null, selectedItem, 'FormDesigner Properties Change', '', clonedItem, cloneChangedNode);\n            }\n        }\n        this.propertiesDialog.hide();\n    };\n    /**\n     * Update the form fields properties to the collection while rendering the page\n     *\n     * @param {any} item - It describes about the item\n     * @returns {void}\n     */\n    FormDesigner.prototype.updateFormFieldPropertiesInCollections = function (item) {\n        var formFieldCollection = this.pdfViewer.formFieldCollections;\n        for (var i = 0; i < formFieldCollection.length; i++) {\n            var currentData = formFieldCollection[parseInt(i.toString(), 10)];\n            if (currentData.id === item.id && currentData.name === item.name) {\n                if (this.formFieldName && this.formFieldName.value) {\n                    currentData.name = this.formFieldName.value;\n                }\n                if (this.formFieldValue && (item.value !== this.formFieldValue.value)) {\n                    currentData.value = this.formFieldValue.value;\n                }\n                if (this.formFieldAlign && (item.alignment !== this.formFieldAlign)) {\n                    currentData.alignment = this.formFieldAlign;\n                }\n                if (this.formFieldPrinting && (item.isPrint !== this.formFieldPrinting.checked)) {\n                    currentData.isPrint = this.formFieldPrinting.checked;\n                }\n                if (this.formFieldTooltip && (item.tooltip !== this.formFieldTooltip.value)) {\n                    currentData.tooltip = this.formFieldTooltip.value;\n                }\n                if (this.formFieldVisibility && (item.visibility !== this.formFieldVisibility.value)) {\n                    currentData.visibility = this.formFieldVisibility;\n                }\n                if (this.formFieldFontFamily && this.formFieldFontFamily.value) {\n                    currentData.fontFamily = this.formFieldFontFamily.value;\n                }\n                if (this.formFieldFontSize && this.formFieldFontSize.value) {\n                    currentData.fontSize = parseInt(this.formFieldFontSize.value.toString(), 10);\n                }\n                if (this.fontColorValue && (item.color !== this.fontColorValue)) {\n                    currentData.color = this.fontColorValue;\n                }\n                if (this.backgroundColorValue && (item.backgroundColor !== this.backgroundColorValue)) {\n                    currentData.backgroundColor = this.backgroundColorValue;\n                }\n                if (this.borderColorValue && (item.borderColor !== this.borderColorValue)) {\n                    currentData.borderColor = this.borderColorValue;\n                }\n                if (this.formFieldBorderWidth && item.thickness !== parseInt(this.formFieldBorderWidth, 10)) {\n                    currentData.thickness = parseInt(this.formFieldBorderWidth, 10);\n                }\n                if (this.formFieldReadOnly && (item.isReadonly !== this.formFieldReadOnly.checked)) {\n                    currentData.isReadOnly = this.formFieldReadOnly.checked;\n                }\n                if (this.formFieldRequired && (item.isRequired !== this.formFieldRequired.checked)) {\n                    currentData.isRequired = this.formFieldRequired.checked;\n                }\n                if (i !== 0 && i < this.pdfViewer.formFieldCollection.length) {\n                    currentData.fontStyle = this.pdfViewer.formFieldCollection[i - 1].fontStyle;\n                }\n                else {\n                    currentData.fontStyle = this.pdfViewer.formFieldCollection[i + 1].fontStyle;\n                }\n                var formFieldIndex = this.pdfViewer.formFieldCollections.findIndex(function (el) { return el.id === item.id; });\n                this.pdfViewer.formFieldCollections[parseInt(formFieldIndex.toString(), 10)] = currentData;\n            }\n        }\n    };\n    FormDesigner.prototype.checkTextboxName = function (selectedItem) {\n        var textboxObjectCollection = [];\n        for (var i = 0; i < this.pdfViewer.formFieldCollection.length; i++) {\n            var item = this.pdfViewer.formFieldCollection[parseInt(i.toString(), 10)];\n            if (item.name === selectedItem.name && item.formFieldAnnotationType === 'Textbox') {\n                textboxObjectCollection.push(item);\n            }\n        }\n        return textboxObjectCollection;\n    };\n    FormDesigner.prototype.renderMultilineText = function (selectedItem, isUndoRedo) {\n        if (isUndoRedo) {\n            this.reRenderMultilineTextbox(selectedItem, 'e-pv-formfield-input');\n        }\n        else {\n            this.addMultilineTextbox(selectedItem, 'e-pv-formfield-input', true);\n        }\n    };\n    FormDesigner.prototype.renderTextbox = function (selectedItem, isUndoRedo) {\n        if (isUndoRedo) {\n            this.reRenderMultilineTextbox(selectedItem, 'e-pv-formfield-textarea');\n        }\n        else {\n            this.addMultilineTextbox(selectedItem, 'e-pv-formfield-textarea', false);\n        }\n    };\n    FormDesigner.prototype.addMultilineTextbox = function (selectedItem, className, isMultiline) {\n        var wrapperElement = selectedItem.wrapper.children[0];\n        selectedItem.isMultiline = isMultiline;\n        if (document.getElementById(wrapperElement.id + '_html_element')) {\n            var htmlElement = document.getElementById(wrapperElement.id + '_html_element').children[0];\n            var textAreaId = htmlElement.children[0].id;\n            document.getElementById(htmlElement.children[0].id).remove();\n            if (className.indexOf('e-pv-formfield-textarea') !== -1) {\n                var inputElement = this.createTextboxElement(textAreaId);\n                wrapperElement.template = htmlElement.appendChild(inputElement);\n            }\n            else {\n                var textArea = this.createTextAreaElement(textAreaId);\n                textArea.value = selectedItem.value;\n                wrapperElement.template = htmlElement.appendChild(textArea);\n            }\n            var index = this.getFormFiledIndex(selectedItem.id.split('_')[0]);\n            this.pdfViewerBase.formFieldCollection[parseInt(index.toString(), 10)].FormField.isMultiline = selectedItem.isMultiline;\n            this.pdfViewer.nameTable[selectedItem.id.split('_')[0]].isMultiline = selectedItem.isMultiline;\n        }\n    };\n    FormDesigner.prototype.reRenderMultilineTextbox = function (selectedItem, className) {\n        var wrapperElement = document.getElementById(selectedItem.id + '_content_html_element');\n        if (wrapperElement) {\n            var textareaElement = wrapperElement.firstElementChild.firstElementChild;\n            var textareaId = textareaElement.id;\n            textareaElement.remove();\n            if (className.indexOf('e-pv-formfield-textarea') !== -1) {\n                var textboxElement = this.createTextboxElement(textareaId);\n                wrapperElement.firstElementChild.appendChild(textboxElement);\n            }\n            else {\n                var textboxElement = this.createTextAreaElement(textareaId);\n                wrapperElement.firstElementChild.appendChild(textboxElement);\n            }\n        }\n    };\n    FormDesigner.prototype.createTextAreaElement = function (id) {\n        var textArea = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('textarea');\n        textArea.id = id;\n        textArea.className = 'e-pv-formfield-textarea';\n        textArea.style.width = '100%';\n        textArea.style.height = '100%';\n        textArea.style.borderStyle = 'solid';\n        textArea.addEventListener('click', this.inputElementClick.bind(this));\n        textArea.addEventListener('change', this.getTextboxValue.bind(this));\n        return textArea;\n    };\n    FormDesigner.prototype.createTextboxElement = function (id) {\n        var inputElement = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('input');\n        inputElement.id = id;\n        inputElement.type = 'text';\n        inputElement.className = 'e-pv-formfield-input';\n        inputElement.autocomplete = 'off';\n        inputElement.style.width = '100%';\n        inputElement.style.height = '100%';\n        inputElement.style.position = 'absolute';\n        inputElement.style.borderStyle = 'solid';\n        inputElement.addEventListener('click', this.inputElementClick.bind(this));\n        inputElement.addEventListener('change', this.getTextboxValue.bind(this));\n        inputElement.addEventListener('focus', this.focusFormFields.bind(this));\n        inputElement.addEventListener('blur', this.blurFormFields.bind(this));\n        return inputElement;\n    };\n    /**\n     * @param {PdfFormFieldBaseModel} formFieldObject - It describes about the form field object\n     * @private\n     * @returns {void}\n     */\n    FormDesigner.prototype.updateFormFieldCollections = function (formFieldObject) {\n        var formField = {\n            id: formFieldObject.id.split('_')[0], name: formFieldObject.name, value: formFieldObject.value,\n            type: formFieldObject.type ? formFieldObject.type :\n                formFieldObject.formFieldAnnotationType, isReadOnly: formFieldObject.isReadonly,\n            fontFamily: formFieldObject.fontFamily, isMultiline: formFieldObject.isMultiline,\n            fontSize: formFieldObject.fontSize, fontStyle: formFieldObject.fontStyle, color: formFieldObject.color ? formFieldObject.color : this.getRgbToHex(formFieldObject.fontColor), backgroundColor: typeof formFieldObject.backgroundColor === 'string' ? formFieldObject.backgroundColor : this.getRgbToHex(formFieldObject.backgroundColor),\n            alignment: formFieldObject.alignment ?\n                formFieldObject.alignment : formFieldObject.textAlign,\n            visibility: formFieldObject.visibility,\n            maxLength: formFieldObject.maxLength,\n            isRequired: formFieldObject.isRequired,\n            isPrint: formFieldObject.isPrint, isSelected: formFieldObject.isSelected, isChecked: formFieldObject.isChecked,\n            tooltip: formFieldObject.tooltip,\n            bounds: formFieldObject.bounds ? formFieldObject.bounds : formFieldObject.lineBound,\n            thickness: formFieldObject.thickness,\n            borderColor: typeof formFieldObject.borderColor === 'string' ?\n                formFieldObject.borderColor :\n                this.getRgbToHex(formFieldObject.borderColor),\n            pageIndex: !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(formFieldObject.pageNumber) ? formFieldObject.pageNumber - 1 : formFieldObject.pageIndex,\n            insertSpaces: formFieldObject.insertSpaces,\n            isTransparent: formFieldObject.isTransparent ?\n                formFieldObject.isTransparent : false,\n            options: formFieldObject.option ? formFieldObject.option :\n                formFieldObject.options, pageNumber: formFieldObject.pageNumber,\n            rotateAngle: !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(formFieldObject.rotateAngle) ?\n                formFieldObject.rotateAngle : formFieldObject.rotation,\n            selectedIndex: formFieldObject.selectedIndex,\n            signatureIndicatorSettings: formFieldObject.signatureIndicatorSettings,\n            signatureType: formFieldObject.signatureType,\n            zIndex: formFieldObject.zIndex,\n            customData: formFieldObject.customData\n        };\n        this.pdfViewer.formFieldCollections[this.pdfViewer.formFieldCollections.findIndex(function (el) { return el.id === formField.id; })] = formField;\n    };\n    /**\n     * Get the Hex value from the RGB value.\n     *\n     * @param {string} color - It describes about the color\n     * @returns {void}\n     */\n    FormDesigner.prototype.getRgbToHex = function (color) {\n        return ('#' + this.hex(color.r) + this.hex(color.g) + this.hex(color.b));\n    };\n    /**\n     * @param {PdfFormFieldBaseModel} selectedItem - It describes about the selected item\n     * @param {boolean} isUndoRedo - It describes about the isUndoRedo\n     * @private\n     * @returns {void}\n     */\n    FormDesigner.prototype.updateDropdownFormDesignerProperties = function (selectedItem, isUndoRedo) {\n        var dropdownElement = document.getElementById(selectedItem.id + '_content_html_element').firstElementChild.firstElementChild;\n        if (this.pdfViewer.designerMode || isUndoRedo) {\n            var data = this.pdfViewerBase.getItemFromSessionStorage('_formDesigner');\n            var formFieldsData_2 = JSON.parse(data);\n            var index_1 = this.getFormFiledIndex(selectedItem.id.split('_')[0]);\n            selectedItem.options = this.createDropdownDataSource(selectedItem);\n            this.updateDropDownListDataSource(selectedItem, dropdownElement);\n            selectedItem.selectedIndex = [];\n            if (index_1 > -1) {\n                formFieldsData_2[parseInt(index_1.toString(), 10)].FormField.option = selectedItem.options;\n                this.pdfViewerBase.formFieldCollection[parseInt(index_1.toString(), 10)].FormField.option = selectedItem.options;\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(selectedItem.options) && selectedItem.options.length > 0) {\n                    if (formFieldsData_2[parseInt(index_1.toString(), 10)] &&\n                        formFieldsData_2[parseInt(index_1.toString(), 10)].FormField.value) {\n                        var selectedIndex = selectedItem.options.findIndex(function (x) {\n                            return x.itemValue === formFieldsData_2[parseInt(index_1.toString(), 10)].FormField.value;\n                        });\n                        selectedItem.selectedIndex.push(selectedIndex);\n                    }\n                    else {\n                        selectedItem.selectedIndex.push(0);\n                    }\n                }\n            }\n            this.pdfViewer.nameTable[selectedItem.id.split('_')[0]].options = selectedItem.options;\n            if ((this.formFieldName && this.formFieldName.value) || isUndoRedo) {\n                this.updateNamePropertyChange(selectedItem, dropdownElement, isUndoRedo, index_1, formFieldsData_2);\n            }\n            if (this.formFieldValue && formFieldsData_2[parseInt(index_1.toString(), 10)] &&\n                formFieldsData_2[parseInt(index_1.toString(), 10)].FormField.value || isUndoRedo) {\n                this.updateValuePropertyChange(selectedItem, dropdownElement, isUndoRedo, index_1, formFieldsData_2);\n            }\n            if (this.formFieldPrinting || isUndoRedo) {\n                this.updateIsPrintPropertyChange(selectedItem, isUndoRedo, index_1, formFieldsData_2);\n            }\n            if ((this.formFieldTooltip) || isUndoRedo) {\n                this.updateTooltipPropertyChange(selectedItem, dropdownElement, isUndoRedo, index_1, formFieldsData_2);\n            }\n            if (this.formFieldVisibility || isUndoRedo) {\n                this.updateVisibilityPropertyChange(selectedItem, dropdownElement, isUndoRedo, index_1, formFieldsData_2);\n            }\n            if ((this.formFieldFontFamily && this.formFieldFontFamily.value) || isUndoRedo) {\n                this.updateFontFamilyPropertyChange(selectedItem, dropdownElement, isUndoRedo, index_1, formFieldsData_2);\n            }\n            if ((this.formFieldFontSize && this.formFieldFontSize.value) || isUndoRedo) {\n                this.updateFontSizePropertyChange(selectedItem, dropdownElement, isUndoRedo, index_1, formFieldsData_2);\n            }\n            this.updateFontStylePropertyChange(selectedItem, dropdownElement, isUndoRedo, index_1, formFieldsData_2);\n            if (this.formFieldAlign || isUndoRedo) {\n                this.updateAlignmentPropertyChange(selectedItem, dropdownElement, isUndoRedo, index_1, formFieldsData_2);\n            }\n            if (this.fontColorValue || isUndoRedo) {\n                this.updateColorPropertyChange(selectedItem, dropdownElement, isUndoRedo, index_1, formFieldsData_2);\n            }\n            if (this.backgroundColorValue || isUndoRedo) {\n                this.updateBackgroundColorPropertyChange(selectedItem, dropdownElement, isUndoRedo, index_1, formFieldsData_2);\n            }\n            if (this.borderColorValue || isUndoRedo) {\n                this.updateBorderColorPropertyChange(selectedItem, dropdownElement, isUndoRedo, index_1, formFieldsData_2);\n            }\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.formFieldBorderWidth) || isUndoRedo) {\n                this.updateBorderThicknessPropertyChange(selectedItem, dropdownElement, isUndoRedo, index_1, formFieldsData_2);\n            }\n            if (this.formFieldReadOnly || isUndoRedo) {\n                this.updateIsReadOnlyPropertyChange(selectedItem, dropdownElement, isUndoRedo, index_1, formFieldsData_2);\n            }\n            if (this.formFieldRequired || isUndoRedo) {\n                this.updateIsRequiredPropertyChange(selectedItem, dropdownElement, isUndoRedo, index_1, formFieldsData_2);\n            }\n        }\n        if (isUndoRedo) {\n            this.pdfViewerBase.setItemInSessionStorage(this.pdfViewerBase.formFieldCollection, '_formDesigner');\n        }\n    };\n    /**\n     * @param {PdfFormFieldBaseModel} selectedItem - It describes about the selected item\n     * @param {boolean} isUndoRedo - It describes about the isUndoRedo\n     * @private\n     * @returns {void}\n     */\n    FormDesigner.prototype.updateListBoxFormDesignerProperties = function (selectedItem, isUndoRedo) {\n        var dropdownElement = document.getElementById(selectedItem.id + '_content_html_element').firstElementChild.firstElementChild;\n        if (this.pdfViewer.designerMode || isUndoRedo) {\n            var data = this.pdfViewerBase.getItemFromSessionStorage('_formDesigner');\n            var formFieldsData_3 = JSON.parse(data);\n            var index_2 = this.getFormFiledIndex(selectedItem.id.split('_')[0]);\n            selectedItem.options = this.createDropdownDataSource(selectedItem);\n            this.updateDropDownListDataSource(selectedItem, dropdownElement);\n            selectedItem.selectedIndex = [];\n            if (index_2 > -1) {\n                formFieldsData_3[parseInt(index_2.toString(), 10)].FormField.option = selectedItem.options;\n                this.pdfViewerBase.formFieldCollection[parseInt(index_2.toString(), 10)].FormField.option = selectedItem.options;\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(selectedItem.options) && selectedItem.options.length > 0) {\n                    if (formFieldsData_3[parseInt(index_2.toString(), 10)] && formFieldsData_3[parseInt(index_2.toString(), 10)].FormField.value) {\n                        selectedItem.selectedIndex.push(selectedItem.options.findIndex(function (x) {\n                            return x.itemValue === formFieldsData_3[parseInt(index_2.toString(), 10)].FormField.value;\n                        }));\n                    }\n                    else {\n                        selectedItem.selectedIndex.push(0);\n                    }\n                }\n            }\n            this.pdfViewer.nameTable[selectedItem.id.split('_')[0]].options = selectedItem.options;\n            if ((this.formFieldName && this.formFieldName.value) || isUndoRedo) {\n                this.updateNamePropertyChange(selectedItem, dropdownElement, isUndoRedo, index_2, formFieldsData_3);\n            }\n            if (this.formFieldPrinting || isUndoRedo) {\n                this.updateIsPrintPropertyChange(selectedItem, isUndoRedo, index_2, formFieldsData_3);\n            }\n            if ((this.formFieldTooltip) || isUndoRedo) {\n                this.updateTooltipPropertyChange(selectedItem, dropdownElement, isUndoRedo, index_2, formFieldsData_3);\n            }\n            if (this.formFieldVisibility || isUndoRedo) {\n                this.updateVisibilityPropertyChange(selectedItem, dropdownElement, isUndoRedo, index_2, formFieldsData_3);\n            }\n            if ((this.formFieldFontFamily && this.formFieldFontFamily.value) || isUndoRedo) {\n                this.updateFontFamilyPropertyChange(selectedItem, dropdownElement, isUndoRedo, index_2, formFieldsData_3);\n            }\n            if ((this.formFieldFontSize && this.formFieldFontSize.value) || isUndoRedo) {\n                this.updateFontSizePropertyChange(selectedItem, dropdownElement, isUndoRedo, index_2, formFieldsData_3);\n            }\n            this.updateFontStylePropertyChange(selectedItem, dropdownElement, isUndoRedo, index_2, formFieldsData_3);\n            if (this.formFieldAlign || isUndoRedo) {\n                this.updateAlignmentPropertyChange(selectedItem, dropdownElement, isUndoRedo, index_2, formFieldsData_3);\n            }\n            if (this.fontColorValue || isUndoRedo) {\n                this.updateColorPropertyChange(selectedItem, dropdownElement, isUndoRedo, index_2, formFieldsData_3);\n            }\n            if (this.backgroundColorValue || isUndoRedo) {\n                this.updateBackgroundColorPropertyChange(selectedItem, dropdownElement, isUndoRedo, index_2, formFieldsData_3);\n            }\n            if (this.borderColorValue || isUndoRedo) {\n                this.updateBorderColorPropertyChange(selectedItem, dropdownElement, isUndoRedo, index_2, formFieldsData_3);\n            }\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.formFieldBorderWidth) || isUndoRedo) {\n                this.updateBorderThicknessPropertyChange(selectedItem, dropdownElement, isUndoRedo, index_2, formFieldsData_3);\n            }\n            if (this.formFieldReadOnly || isUndoRedo) {\n                this.updateIsReadOnlyPropertyChange(selectedItem, dropdownElement, isUndoRedo, index_2, formFieldsData_3);\n            }\n            if (this.formFieldRequired || isUndoRedo) {\n                this.updateIsRequiredPropertyChange(selectedItem, dropdownElement, isUndoRedo, index_2, formFieldsData_3);\n            }\n        }\n        if (isUndoRedo) {\n            this.pdfViewerBase.setItemInSessionStorage(this.pdfViewerBase.formFieldCollection, '_formDesigner');\n        }\n    };\n    FormDesigner.prototype.updateDropDownListDataSource = function (selectedItem, dropdownElement) {\n        while (dropdownElement.firstChild) {\n            dropdownElement.firstChild.remove();\n        }\n        for (var j = 0; j < selectedItem.options.length; j++) {\n            var option = document.createElement('option');\n            option.className = 'e-pv-formfield-dropdown';\n            option.value = selectedItem.options[parseInt(j.toString(), 10)].itemValue;\n            option.text = selectedItem.options[parseInt(j.toString(), 10)].itemName;\n            dropdownElement.appendChild(option);\n        }\n    };\n    FormDesigner.prototype.createDropdownDataSource = function (selectedItem) {\n        var ulItem = document.getElementById(this.pdfViewer.element.id + '_ul_list_item');\n        this.formFieldListItemDataSource = [];\n        if (ulItem && ulItem.children && ulItem.children.length > 0) {\n            for (var i = 0; i < ulItem.children.length; i++) {\n                var liItem = ulItem.children[parseInt(i.toString(), 10)];\n                this.formFieldListItemDataSource.push({ itemName: liItem.innerHTML, itemValue: liItem.innerHTML });\n            }\n        }\n        else if (selectedItem && selectedItem.options.length > 0) {\n            this.formFieldListItemDataSource = selectedItem.options;\n        }\n        return this.formFieldListItemDataSource;\n    };\n    /**\n     * @param {PdfFormFieldBaseModel} selectedItem - It describes about the selected Item\n     * @param {boolean} isUndoRedo - It describes about the isUndoRedo\n     * @private\n     * @returns {void}\n     */\n    FormDesigner.prototype.updateSignatureTextboxProperties = function (selectedItem, isUndoRedo) {\n        var inputElement = document.getElementById(selectedItem.id + '_content_html_element').firstElementChild.firstElementChild;\n        var data = this.pdfViewerBase.getItemFromSessionStorage('_formDesigner');\n        var formFieldsData = JSON.parse(data);\n        var index = this.getFormFiledIndex(selectedItem.id.split('_')[0]);\n        if (this.pdfViewer.designerMode || isUndoRedo) {\n            if ((this.formFieldName && this.formFieldName.value) || isUndoRedo) {\n                this.updateNamePropertyChange(selectedItem, inputElement, isUndoRedo, index, formFieldsData);\n            }\n            if (this.formFieldPrinting || isUndoRedo) {\n                this.updateIsPrintPropertyChange(selectedItem, isUndoRedo, index, formFieldsData);\n            }\n            if ((this.formFieldTooltip) || isUndoRedo) {\n                this.updateTooltipPropertyChange(selectedItem, inputElement, isUndoRedo, index, formFieldsData);\n            }\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.formFieldBorderWidth) || isUndoRedo) {\n                this.updateBorderThicknessPropertyChange(selectedItem, inputElement, isUndoRedo, index, formFieldsData);\n            }\n            if (this.formFieldVisibility || isUndoRedo) {\n                this.updateVisibilityPropertyChange(selectedItem, inputElement, isUndoRedo, index, formFieldsData);\n            }\n            if (this.formFieldReadOnly || isUndoRedo) {\n                this.updateIsReadOnlyPropertyChange(selectedItem, inputElement, isUndoRedo, index, formFieldsData);\n            }\n            if (this.formFieldRequired || isUndoRedo) {\n                this.updateIsRequiredPropertyChange(selectedItem, inputElement, isUndoRedo, index, formFieldsData);\n            }\n        }\n        if (isUndoRedo) {\n            this.pdfViewerBase.setItemInSessionStorage(this.pdfViewerBase.formFieldCollection, '_formDesigner');\n        }\n    };\n    /**\n     * @param {PdfFormFieldBaseModel} selectedItem - It describes about the selected item\n     * @param {boolean} updateValue - It describes about the update value\n     * @param {boolean} isUndoRedo - isUndoRedo\n     * @private\n     * @returns {void}\n     */\n    FormDesigner.prototype.updateCheckboxFormDesignerProperties = function (selectedItem, updateValue, isUndoRedo) {\n        var checkBoxElement = document.getElementById(selectedItem.id + '_content_html_element').firstElementChild.firstElementChild.lastElementChild;\n        var data = this.pdfViewerBase.getItemFromSessionStorage('_formDesigner');\n        var formFieldsData = JSON.parse(data);\n        var index = this.getFormFiledIndex(selectedItem.id.split('_')[0]);\n        if ((this.formFieldName && this.formFieldName.value) || isUndoRedo) {\n            this.updateNamePropertyChange(selectedItem, checkBoxElement, isUndoRedo, index, formFieldsData);\n        }\n        if (this.formFieldValue || isUndoRedo) {\n            this.updateValuePropertyChange(selectedItem, checkBoxElement, isUndoRedo, index, formFieldsData, updateValue);\n        }\n        if (this.backgroundColorValue || isUndoRedo) {\n            this.updateBackgroundColorPropertyChange(selectedItem, checkBoxElement, isUndoRedo, index, formFieldsData);\n        }\n        if (this.borderColorValue || isUndoRedo) {\n            this.updateBorderColorPropertyChange(selectedItem, checkBoxElement, isUndoRedo, index, formFieldsData);\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.formFieldBorderWidth) || isUndoRedo) {\n            this.updateBorderThicknessPropertyChange(selectedItem, checkBoxElement, isUndoRedo, index, formFieldsData);\n        }\n        if (this.formFieldChecked) {\n            this.checkboxCheckedState = this.formFieldChecked.checked;\n        }\n        if (this.formFieldPrinting || isUndoRedo) {\n            this.updateIsPrintPropertyChange(selectedItem, isUndoRedo, index, formFieldsData);\n        }\n        if ((this.formFieldTooltip) || isUndoRedo) {\n            this.updateTooltipPropertyChange(selectedItem, checkBoxElement, isUndoRedo, index, formFieldsData);\n        }\n        if (this.formFieldVisibility || isUndoRedo) {\n            this.updateVisibilityPropertyChange(selectedItem, checkBoxElement, isUndoRedo, index, formFieldsData);\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.checkboxCheckedState) || isUndoRedo) {\n            this.updateIsCheckedPropertyChange(selectedItem, checkBoxElement, isUndoRedo, index, formFieldsData);\n        }\n        if ((this.pdfViewer.designerMode && this.borderColorValue) || isUndoRedo) {\n            this.updateBorderColorPropertyChange(selectedItem, checkBoxElement, isUndoRedo, index, formFieldsData);\n        }\n        if ((this.pdfViewer.designerMode && this.formFieldBorderWidth) || isUndoRedo) {\n            this.updateBorderThicknessPropertyChange(selectedItem, checkBoxElement, isUndoRedo, index, formFieldsData);\n        }\n        if (this.formFieldReadOnly || isUndoRedo) {\n            this.updateIsReadOnlyPropertyChange(selectedItem, checkBoxElement, isUndoRedo, index, formFieldsData);\n        }\n        if (this.formFieldRequired || isUndoRedo) {\n            this.updateIsRequiredPropertyChange(selectedItem, checkBoxElement, isUndoRedo, index, formFieldsData);\n        }\n        if (isUndoRedo) {\n            this.pdfViewerBase.setItemInSessionStorage(this.pdfViewerBase.formFieldCollection, '_formDesigner');\n        }\n    };\n    /**\n     * @param {PdfFormFieldBaseModel} selectedItem - It describes about the selected item\n     * @param {boolean} updateValue - It describes about the update value\n     * @param {boolean} isUndoRedo - It describes about the isUndoRedo\n     * @private\n     * @returns {void}\n     */\n    FormDesigner.prototype.updateRadioButtonDesignerProperties = function (selectedItem, updateValue, isUndoRedo) {\n        var radioButton = document.getElementById(selectedItem.id + '_content_html_element').firstElementChild.firstElementChild.firstElementChild;\n        var data = this.pdfViewerBase.getItemFromSessionStorage('_formDesigner');\n        var formFieldsData = JSON.parse(data);\n        var index = this.getFormFiledIndex(selectedItem.id.split('_')[0]);\n        if ((this.formFieldName && this.formFieldName.value) || isUndoRedo) {\n            this.updateNamePropertyChange(selectedItem, radioButton, isUndoRedo, index, formFieldsData);\n        }\n        if (this.formFieldValue || isUndoRedo) {\n            this.updateValuePropertyChange(selectedItem, radioButton, isUndoRedo, index, formFieldsData, updateValue);\n        }\n        if (this.formFieldChecked) {\n            this.checkboxCheckedState = this.formFieldChecked.checked;\n        }\n        if (this.formFieldPrinting || isUndoRedo) {\n            this.updateIsPrintPropertyChange(selectedItem, isUndoRedo, index, formFieldsData);\n        }\n        if ((this.formFieldTooltip) || isUndoRedo) {\n            this.updateTooltipPropertyChange(selectedItem, radioButton, isUndoRedo, index, formFieldsData);\n        }\n        if (this.formFieldVisibility || isUndoRedo) {\n            this.updateVisibilityPropertyChange(selectedItem, radioButton, isUndoRedo, index, formFieldsData);\n        }\n        if ((this.pdfViewer.designerMode && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.formFieldBorderWidth)) || isUndoRedo) {\n            this.updateBorderThicknessPropertyChange(selectedItem, radioButton, isUndoRedo, index, formFieldsData);\n        }\n        if (this.backgroundColorValue || isUndoRedo) {\n            this.updateBackgroundColorPropertyChange(selectedItem, radioButton, isUndoRedo, index, formFieldsData);\n        }\n        if (this.borderColorValue || isUndoRedo) {\n            this.updateBorderColorPropertyChange(selectedItem, radioButton, isUndoRedo, index, formFieldsData);\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.checkboxCheckedState) || isUndoRedo) {\n            this.updateIsSelectedPropertyChange(selectedItem, radioButton, isUndoRedo, index, formFieldsData);\n        }\n        if (this.formFieldReadOnly || isUndoRedo) {\n            this.updateIsReadOnlyPropertyChange(selectedItem, radioButton, isUndoRedo, index, formFieldsData);\n        }\n        if (this.formFieldRequired || isUndoRedo) {\n            this.updateIsRequiredPropertyChange(selectedItem, radioButton, isUndoRedo, index, formFieldsData);\n        }\n        if (isUndoRedo) {\n            var formField = this.pdfViewer.nameTable[selectedItem.id.split('_')[0]];\n            var point2 = (0,_syncfusion_ej2_drawings__WEBPACK_IMPORTED_MODULE_1__.cornersPointsBeforeRotation)(formField.wrapper.children[0]).topLeft;\n            this.updateFormDesignerFieldInSessionStorage(point2, formField.wrapper.children[0], formField.formFieldAnnotationType, formField);\n        }\n    };\n    /**\n     * @param {PdfFormFieldBaseModel} selectedItem - It describes about the selected item\n     * @param {boolean} isUndoRedo - It describes about the isUndoRedo\n     * @private\n     * @returns {void}\n     */\n    FormDesigner.prototype.updateTextboxFormDesignerProperties = function (selectedItem, isUndoRedo) {\n        var inputElement = document.getElementById(selectedItem.id + '_content_html_element').firstElementChild.firstElementChild;\n        var isMaxLengthChanged = false;\n        var oldValue;\n        var newValue;\n        var data = this.pdfViewerBase.getItemFromSessionStorage('_formDesigner');\n        var formFieldsData = JSON.parse(data);\n        var index = this.getFormFiledIndex(selectedItem.id.split('_')[0]);\n        if (this.pdfViewer.designerMode || isUndoRedo || this.isAddFormFieldProgrammatically) {\n            if ((this.formFieldName && this.formFieldName.value) || isUndoRedo) {\n                this.updateNamePropertyChange(selectedItem, inputElement, isUndoRedo, index, formFieldsData);\n            }\n            if (this.isAddFormFieldProgrammatically ? selectedItem.value : this.formFieldValue || isUndoRedo) {\n                this.updateValuePropertyChange(selectedItem, inputElement, isUndoRedo, index, formFieldsData);\n            }\n            if (this.formFieldPrinting || isUndoRedo) {\n                this.updateIsPrintPropertyChange(selectedItem, isUndoRedo, index, formFieldsData);\n            }\n            if ((this.formFieldTooltip) || isUndoRedo) {\n                this.updateTooltipPropertyChange(selectedItem, inputElement, isUndoRedo, index, formFieldsData);\n            }\n            if (this.formFieldVisibility || isUndoRedo) {\n                this.updateVisibilityPropertyChange(selectedItem, inputElement, isUndoRedo, index, formFieldsData);\n            }\n            if ((this.isAddFormFieldProgrammatically ? selectedItem.fontFamily : this.formFieldFontFamily &&\n                this.formFieldFontFamily.value) || isUndoRedo) {\n                this.updateFontFamilyPropertyChange(selectedItem, inputElement, isUndoRedo, index, formFieldsData);\n            }\n            if ((this.isAddFormFieldProgrammatically ? selectedItem.fontSize : this.formFieldFontSize &&\n                this.formFieldFontSize.value) || isUndoRedo) {\n                this.updateFontSizePropertyChange(selectedItem, inputElement, isUndoRedo, index, formFieldsData);\n            }\n            this.updateFontStylePropertyChange(selectedItem, inputElement, isUndoRedo, index, formFieldsData);\n            if (this.formFieldAlign || isUndoRedo || this.multilineCheckboxCheckedState) {\n                this.updateAlignmentPropertyChange(selectedItem, inputElement, isUndoRedo, index, formFieldsData);\n            }\n            if (this.maxLengthItem || isUndoRedo) {\n                if (this.maxLengthItem && (selectedItem.maxLength !== this.maxLengthItem.value)) {\n                    isMaxLengthChanged = true;\n                    oldValue = selectedItem.maxLength;\n                    newValue = this.maxLengthItem.value;\n                }\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.maxLengthItem)) {\n                    var maxLength = this.maxLengthItem.value === 0 ? 524288 : this.maxLengthItem.value;\n                    if (isUndoRedo && selectedItem.maxLength !== 0) {\n                        inputElement.maxLength = selectedItem.maxLength;\n                    }\n                    else {\n                        inputElement.maxLength = maxLength;\n                        selectedItem.maxLength = this.maxLengthItem.value;\n                    }\n                }\n                if (index > -1) {\n                    formFieldsData[parseInt(index.toString(), 10)].FormField.maxLength = selectedItem.maxLength;\n                    this.pdfViewerBase.formFieldCollection[parseInt(index.toString(), 10)].FormField.maxLength = selectedItem.maxLength;\n                }\n                this.pdfViewer.nameTable[selectedItem.id.split('_')[0]].maxLength = selectedItem.maxLength;\n                if (isMaxLengthChanged) {\n                    this.updateFormFieldPropertiesChanges('formFieldPropertiesChange', selectedItem, false, false, false, false, false, false, false, false, false, false, false, isMaxLengthChanged, false, false, false, false, oldValue, newValue);\n                }\n            }\n            if (this.fontColorValue || isUndoRedo || this.multilineCheckboxCheckedState) {\n                this.updateColorPropertyChange(selectedItem, inputElement, isUndoRedo, index, formFieldsData);\n            }\n            if (this.backgroundColorValue || isUndoRedo || this.multilineCheckboxCheckedState) {\n                this.updateBackgroundColorPropertyChange(selectedItem, inputElement, isUndoRedo, index, formFieldsData);\n            }\n            if (this.borderColorValue || isUndoRedo || this.multilineCheckboxCheckedState) {\n                this.updateBorderColorPropertyChange(selectedItem, inputElement, isUndoRedo, index, formFieldsData);\n            }\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.formFieldBorderWidth) || isUndoRedo) {\n                this.updateBorderThicknessPropertyChange(selectedItem, inputElement, isUndoRedo, index, formFieldsData);\n            }\n            if (this.formFieldReadOnly || isUndoRedo) {\n                this.updateIsReadOnlyPropertyChange(selectedItem, inputElement, isUndoRedo, index, formFieldsData);\n            }\n            if (this.isAddFormFieldProgrammatically || this.formFieldRequired || isUndoRedo) {\n                this.updateIsRequiredPropertyChange(selectedItem, inputElement, isUndoRedo, index, formFieldsData);\n            }\n        }\n        if (!this.pdfViewer.designerMode) {\n            if (this.formFieldVisibility && this.formFieldVisibility.value) {\n                selectedItem.visibility = this.formFieldVisibility.value;\n                var visibleItem = document.getElementById(selectedItem.id + '_content_html_element').firstElementChild.firstElementChild;\n                visibleItem.style.visibility = selectedItem.visibility;\n            }\n        }\n        this.updateFormFieldCollections(selectedItem);\n        if (isUndoRedo) {\n            this.pdfViewerBase.setItemInSessionStorage(this.pdfViewerBase.formFieldCollection, '_formDesigner');\n        }\n    };\n    /**\n     * @param {any} selectedItem - It describes about the selected item\n     * @param {any} element - It describes about the element\n     * @param {boolean} isUndoRedo - It describes about the isUndoRedo\n     * @param {number} index - It describes about the index\n     * @param {any} formFieldsData - It describes about the form fields data\n     * @private\n     * @returns {void}\n     */\n    FormDesigner.prototype.updateIsCheckedPropertyChange = function (selectedItem, element, isUndoRedo, index, formFieldsData) {\n        if (this.pdfViewer.designerMode || isUndoRedo) {\n            var isValueChanged = false;\n            var oldValue = void 0;\n            var newValue = void 0;\n            if (selectedItem.isChecked !== this.checkboxCheckedState) {\n                isValueChanged = true;\n                oldValue = selectedItem.isChecked;\n                newValue = this.checkboxCheckedState;\n            }\n            if (!isUndoRedo) {\n                selectedItem.isChecked = this.checkboxCheckedState;\n            }\n            if (index > -1) {\n                formFieldsData[parseInt(index.toString(), 10)].FormField.isChecked = selectedItem.isChecked;\n                this.pdfViewerBase.formFieldCollection[parseInt(index.toString(), 10)].FormField.isChecked = selectedItem.isChecked;\n            }\n            this.pdfViewer.nameTable[selectedItem.id.split('_')[0]].isChecked = selectedItem.isChecked;\n            if (isValueChanged) {\n                this.updateFormFieldPropertiesChanges('formFieldPropertiesChange', selectedItem, isValueChanged, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, oldValue, newValue);\n            }\n        }\n        if (!this.pdfViewer.designerMode || isUndoRedo) {\n            var checkboxElement = document.getElementById(selectedItem.id + '_input').firstElementChild;\n            if (selectedItem.isChecked) {\n                if (checkboxElement.classList.contains('e-pv-cb-unchecked')) {\n                    checkboxElement.classList.remove('e-pv-cb-unchecked');\n                }\n                checkboxElement.classList.add('e-pv-cb-checked');\n            }\n            else {\n                if (checkboxElement.classList.contains('e-pv-cb-checked')) {\n                    checkboxElement.classList.remove('e-pv-cb-checked');\n                }\n                checkboxElement.classList.add('e-pv-cb-unchecked');\n            }\n        }\n    };\n    /**\n     * @param {any} selectedItem - It describes about the selected item\n     * @param {any} element - It describes about the element\n     * @param {boolean} isUndoRedo - It describes about the isUndoRedo\n     * @param {number} index - It describes about the index\n     * @param {any} formFieldsData - It describes about the form fields data\n     * @private\n     * @returns {void}\n     */\n    FormDesigner.prototype.updateIsSelectedPropertyChange = function (selectedItem, element, isUndoRedo, index, formFieldsData) {\n        if (this.pdfViewer.designerMode || isUndoRedo) {\n            var isValueChanged = false;\n            var oldValue = void 0;\n            var newValue = void 0;\n            if (selectedItem.isSelected !== this.checkboxCheckedState) {\n                isValueChanged = true;\n                oldValue = selectedItem.isSelected;\n                newValue = this.checkboxCheckedState;\n            }\n            if (!isUndoRedo) {\n                selectedItem.isSelected = this.checkboxCheckedState;\n            }\n            if (index > -1) {\n                formFieldsData[parseInt(index.toString(), 10)].FormField.isSelected = selectedItem.isSelected;\n                for (var i = 0; i < formFieldsData[parseInt(index.toString(), 10)].FormField.radiobuttonItem.length; i++) {\n                    if (formFieldsData[parseInt(index.toString(), 10)].FormField.radiobuttonItem[parseInt(i.toString(), 10)].id.split('_')[0] === selectedItem.id.split('_')[0]) {\n                        formFieldsData[parseInt(index.toString(), 10)].\n                            FormField.radiobuttonItem[parseInt(i.toString(), 10)].isSelected = selectedItem.isSelected;\n                        this.pdfViewerBase.formFieldCollection[parseInt(index.toString(), 10)].\n                            FormField.radiobuttonItem[parseInt(i.toString(), 10)].isSelected = selectedItem.isSelected;\n                    }\n                }\n            }\n            this.pdfViewer.nameTable[selectedItem.id.split('_')[0]].isSelected = selectedItem.isSelected;\n            if (isValueChanged) {\n                this.updateFormFieldPropertiesChanges('formFieldPropertiesChange', selectedItem, isValueChanged, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, oldValue, newValue);\n            }\n        }\n        if (!this.pdfViewer.designerMode || isUndoRedo) {\n            element.checked = selectedItem.isSelected;\n            if (index > -1) {\n                formFieldsData[parseInt(index.toString(), 10)].FormField.isSelected = selectedItem.isSelected;\n                this.pdfViewerBase.formFieldCollection[parseInt(index.toString(), 10)].FormField.isSelected = selectedItem.isSelected;\n                for (var i = 0; i < formFieldsData[parseInt(index.toString(), 10)].FormField.radiobuttonItem.length; i++) {\n                    if (formFieldsData[parseInt(index.toString(), 10)].FormField.radiobuttonItem[parseInt(i.toString(), 10)].id.split('_')[0] === selectedItem.id.split('_')[0]) {\n                        formFieldsData[parseInt(index.toString(), 10)].FormField.\n                            radiobuttonItem[parseInt(i.toString(), 10)].isSelected = selectedItem.isSelected;\n                        this.pdfViewerBase.formFieldCollection[parseInt(index.toString(), 10)].\n                            FormField.radiobuttonItem[parseInt(i.toString(), 10)].isSelected = selectedItem.isSelected;\n                    }\n                }\n            }\n            this.pdfViewerBase.setItemInSessionStorage(this.pdfViewerBase.formFieldCollection, '_formDesigner');\n            this.pdfViewer.nameTable[selectedItem.id.split('_')[0]].isSelected = selectedItem.isSelected;\n        }\n    };\n    /**\n     * @param {any} selectedItem - It describes about the selected item\n     * @param {any} element - It describes about the element\n     * @param {boolean} isUndoRedo - It describes about the isUndoRedo\n     * @param {number} index - It describes about the index\n     * @param {any} formFieldsData - It describes about the form fields data\n     * @param {boolean} updateValue - It describes about the update value\n     * @private\n     * @returns {void}\n     */\n    FormDesigner.prototype.updateValuePropertyChange = function (selectedItem, element, isUndoRedo, index, formFieldsData, updateValue) {\n        var isValueChanged = false;\n        var oldValue;\n        var newValue;\n        if (selectedItem.formFieldAnnotationType !== 'DropdownList' && this.formFieldValue && (selectedItem.value !== this.formFieldValue.value)) {\n            isValueChanged = true;\n            oldValue = selectedItem.value;\n            newValue = this.formFieldValue.value;\n        }\n        else if (selectedItem.formFieldAnnotationType === 'DropdownList' && this.formFieldValue && (selectedItem.value !== formFieldsData[parseInt(index.toString(), 10)].FormField.value)) {\n            isValueChanged = true;\n            oldValue = selectedItem.value;\n            newValue = formFieldsData[parseInt(index.toString(), 10)].FormField.value;\n        }\n        if (isUndoRedo) {\n            element.value = selectedItem.value;\n        }\n        else {\n            if (updateValue) {\n                isValueChanged = false;\n            }\n            else if (!this.isAddFormFieldProgrammatically) {\n                if (selectedItem.formFieldAnnotationType === 'DropdownList') {\n                    selectedItem.value = formFieldsData[parseInt(index.toString(), 10)].FormField.value;\n                }\n                else {\n                    selectedItem.value = this.formFieldValue ? this.formFieldValue.value : selectedItem.value;\n                }\n                if (selectedItem.formFieldAnnotationType === 'DropdownList') {\n                    element.value = formFieldsData[parseInt(index.toString(), 10)].FormField.value;\n                }\n                else {\n                    element.value = this.formFieldValue ? this.formFieldValue.value : selectedItem.value;\n                }\n            }\n            // EJ2-856550 - to get select item while add multiline programatically.\n            else {\n                if (selectedItem.formFieldAnnotationType === 'DropdownList') {\n                    selectedItem.value = formFieldsData[parseInt(index.toString(), 10)].FormField.value;\n                }\n                if (selectedItem.formFieldAnnotationType === 'DropdownList') {\n                    element.value = formFieldsData[parseInt(index.toString(), 10)].FormField.value;\n                }\n                else {\n                    element.value = selectedItem.value;\n                }\n            }\n        }\n        if (index > -1) {\n            formFieldsData[parseInt(index.toString(), 10)].FormField.value = selectedItem.value;\n            this.pdfViewerBase.formFieldCollection[parseInt(index.toString(), 10)].FormField.value = selectedItem.value;\n        }\n        this.pdfViewer.nameTable[selectedItem.id.split('_')[0]].value = selectedItem.value;\n        if (isValueChanged) {\n            this.updateFormFieldPropertiesChanges('formFieldPropertiesChange', selectedItem, isValueChanged, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, oldValue, newValue);\n        }\n    };\n    FormDesigner.prototype.updateFontStylePropertyChange = function (selectedItem, element, isUndoRedo, index, formFieldsData) {\n        var isFontStyleChanged = false;\n        var oldValue = '';\n        var newValue = '';\n        var result = this.updateFontStyle(element, selectedItem, isUndoRedo, index, formFieldsData);\n        isFontStyleChanged = result[0];\n        oldValue = result[1];\n        newValue = result[2];\n        if (index > -1) {\n            formFieldsData[parseInt(index.toString(), 10)].FormField.fontStyle = selectedItem.fontStyle;\n            this.pdfViewerBase.formFieldCollection[parseInt(index.toString(), 10)].FormField.fontStyle = selectedItem.fontStyle;\n        }\n        this.pdfViewer.nameTable[selectedItem.id.split('_')[0]].fontStyle = selectedItem.fontStyle;\n        if (isFontStyleChanged) {\n            this.updateFormFieldPropertiesChanges('formFieldPropertiesChange', selectedItem, false, false, false, isFontStyleChanged, false, false, false, false, false, false, false, false, false, false, false, false, oldValue, newValue);\n        }\n    };\n    FormDesigner.prototype.updateBorderThicknessPropertyChange = function (selectedItem, element, isUndoRedo, index, formFieldsData) {\n        var isBorderWidthChanged = false;\n        var oldValue;\n        var newValue;\n        var borderWidth = parseInt(this.formFieldBorderWidth, 10);\n        if (selectedItem.thickness !== borderWidth) {\n            isBorderWidthChanged = true;\n            oldValue = selectedItem.thickness;\n            newValue = borderWidth ? borderWidth : selectedItem.thickness;\n        }\n        if (isUndoRedo) {\n            element.style.borderWidth = selectedItem.thickness.toString();\n        }\n        else {\n            element.style.borderWidth = this.formFieldBorderWidth ? this.formFieldBorderWidth + 'px' : selectedItem.thickness + 'px';\n            selectedItem.thickness = borderWidth;\n        }\n        if (index > -1) {\n            formFieldsData[parseInt(index.toString(), 10)].FormField.thickness = selectedItem.thickness;\n            this.pdfViewerBase.formFieldCollection[parseInt(index.toString(), 10)].FormField.thickness = selectedItem.thickness;\n        }\n        this.pdfViewer.nameTable[selectedItem.id.split('_')[0]].thickness = selectedItem.thickness;\n        if (isBorderWidthChanged) {\n            this.updateFormFieldPropertiesChanges('formFieldPropertiesChange', selectedItem, false, false, false, false, false, false, false, isBorderWidthChanged, false, false, false, false, false, false, false, false, oldValue, newValue);\n        }\n    };\n    FormDesigner.prototype.updateBorderColorPropertyChange = function (selectedItem, element, isUndoRedo, index, formFieldsData) {\n        var isBorderColorChanged = false;\n        var oldValue;\n        var newValue;\n        if (selectedItem.borderColor !== this.borderColorValue) {\n            isBorderColorChanged = true;\n            oldValue = selectedItem.borderColor;\n            newValue = this.borderColorValue ? this.borderColorValue : selectedItem.borderColor;\n        }\n        if (this.pdfViewer.enableHtmlSanitizer && this.borderColorValue) {\n            this.borderColorValue = _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.SanitizeHtmlHelper.sanitize(this.borderColorValue);\n        }\n        if (isUndoRedo) {\n            element.style.borderColor = selectedItem.borderColor;\n        }\n        else {\n            element.style.borderColor = this.borderColorValue ? this.borderColorValue : selectedItem.borderColor;\n            selectedItem.borderColor = this.borderColorValue ? this.borderColorValue : selectedItem.borderColor;\n        }\n        if (selectedItem.formFieldAnnotationType === 'RadioButton') {\n            element.parentElement.style.boxShadow = this.borderColorValue + ' 0px 0px 0px ' + selectedItem.thickness + 'px';\n        }\n        if (index > -1) {\n            formFieldsData[parseInt(index.toString(), 10)].FormField.borderColor = this.getRgbCode(selectedItem.borderColor);\n            this.pdfViewerBase.formFieldCollection[parseInt(index.toString(), 10)].FormField.borderColor =\n                this.getRgbCode(selectedItem.borderColor);\n        }\n        this.pdfViewer.nameTable[selectedItem.id.split('_')[0]].borderColor = selectedItem.borderColor;\n        if (isBorderColorChanged) {\n            this.updateFormFieldPropertiesChanges('formFieldPropertiesChange', selectedItem, false, false, false, false, false, false, isBorderColorChanged, false, false, false, false, false, false, false, false, false, oldValue, newValue);\n        }\n    };\n    FormDesigner.prototype.updateBackgroundColorPropertyChange = function (selectedItem, element, isUndoRedo, index, formFieldsData) {\n        var isBackgroundColorChanged = false;\n        var oldValue;\n        var newValue;\n        if (selectedItem.backgroundColor !== this.backgroundColorValue) {\n            isBackgroundColorChanged = true;\n            oldValue = selectedItem.backgroundColor;\n            newValue = this.backgroundColorValue ? this.backgroundColorValue : selectedItem.backgroundColor;\n        }\n        if (this.pdfViewer.enableHtmlSanitizer && this.backgroundColorValue) {\n            this.backgroundColorValue = _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.SanitizeHtmlHelper.sanitize(this.backgroundColorValue);\n        }\n        if (isUndoRedo) {\n            if (selectedItem.formFieldAnnotationType === 'RadioButton') {\n                element.parentElement.style.background = selectedItem.backgroundColor;\n            }\n            else {\n                element.style.background = selectedItem.backgroundColor;\n            }\n        }\n        else {\n            if (selectedItem.formFieldAnnotationType === 'RadioButton') {\n                element.parentElement.style.background = this.backgroundColorValue ?\n                    this.backgroundColorValue : selectedItem.backgroundColor;\n            }\n            else {\n                element.style.background = this.backgroundColorValue ? this.backgroundColorValue : selectedItem.backgroundColor;\n            }\n            selectedItem.backgroundColor = this.backgroundColorValue ? this.backgroundColorValue : selectedItem.backgroundColor;\n        }\n        if (index > -1) {\n            formFieldsData[parseInt(index.toString(), 10)].FormField.backgroundColor = this.getRgbCode(selectedItem.backgroundColor);\n            this.pdfViewerBase.formFieldCollection[parseInt(index.toString(), 10)].FormField.backgroundColor =\n                this.getRgbCode(selectedItem.backgroundColor);\n        }\n        this.pdfViewer.nameTable[selectedItem.id.split('_')[0]].backgroundColor = selectedItem.backgroundColor;\n        if (isBackgroundColorChanged) {\n            this.updateFormFieldPropertiesChanges('formFieldPropertiesChange', selectedItem, false, false, false, false, false, isBackgroundColorChanged, false, false, false, false, false, false, false, false, false, false, oldValue, newValue);\n        }\n    };\n    FormDesigner.prototype.updateColorPropertyChange = function (selectedItem, element, isUndoRedo, index, formFieldsData) {\n        var isColorChanged = false;\n        var oldValue;\n        var newValue;\n        if (selectedItem.color !== this.fontColorValue) {\n            isColorChanged = true;\n            oldValue = selectedItem.color;\n            newValue = this.fontColorValue ? this.fontColorValue : selectedItem.color;\n        }\n        if (this.pdfViewer.enableHtmlSanitizer && this.fontColorValue) {\n            this.fontColorValue = _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.SanitizeHtmlHelper.sanitize(this.fontColorValue);\n        }\n        if (isUndoRedo) {\n            element.style.color = selectedItem.color;\n        }\n        else {\n            element.style.color = this.fontColorValue ? this.fontColorValue : selectedItem.color;\n            selectedItem.color = this.fontColorValue ? this.fontColorValue : selectedItem.color;\n        }\n        if (index > -1) {\n            formFieldsData[parseInt(index.toString(), 10)].FormField.color = this.getRgbCode(selectedItem.color);\n            this.pdfViewerBase.formFieldCollection[parseInt(index.toString(), 10)].FormField.color = this.getRgbCode(selectedItem.color);\n        }\n        this.pdfViewer.nameTable[selectedItem.id.split('_')[0]].color = selectedItem.color;\n        if (isColorChanged) {\n            this.updateFormFieldPropertiesChanges('formFieldPropertiesChange', selectedItem, false, false, false, false, isColorChanged, false, false, false, false, false, false, false, false, false, false, false, oldValue, newValue);\n        }\n    };\n    FormDesigner.prototype.updateAlignmentPropertyChange = function (selectedItem, element, isUndoRedo, index, formFieldsData) {\n        var isAlignmentChanged = false;\n        var oldValue;\n        var newValue;\n        if (selectedItem.alignment !== this.formFieldAlign) {\n            isAlignmentChanged = true;\n            oldValue = selectedItem.alignment;\n            newValue = this.formFieldAlign ? this.formFieldAlign : selectedItem.alignment;\n        }\n        if (isUndoRedo) {\n            element.style.textAlign = selectedItem.alignment;\n            if ((selectedItem.formFieldAnnotationType === 'ListBox' || selectedItem.formFieldAnnotationType === 'DropdownList') && element.children.length > 0) {\n                element.style.textAlignLast = selectedItem.alignment;\n                for (var i = 0; i < element.children.length; i++) {\n                    var dropDownChild = element.children[parseInt(i.toString(), 10)];\n                    dropDownChild.style.textAlignLast = selectedItem.alignment;\n                    dropDownChild.style.textAlign = selectedItem.alignment;\n                }\n            }\n        }\n        else {\n            element.style.textAlign = this.formFieldAlign ? this.formFieldAlign : selectedItem.alignment;\n            selectedItem.alignment = this.formFieldAlign ? this.formFieldAlign : selectedItem.alignment;\n            if ((selectedItem.formFieldAnnotationType === 'ListBox' || selectedItem.formFieldAnnotationType === 'DropdownList') && element.children.length > 0) {\n                element.style.textAlignLast = this.formFieldAlign ? this.formFieldAlign : selectedItem.alignment;\n                for (var i = 0; i < element.children.length; i++) {\n                    var dropDownChild = element.children[parseInt(i.toString(), 10)];\n                    dropDownChild.style.textAlignLast = this.formFieldAlign ? this.formFieldAlign : selectedItem.alignment;\n                    dropDownChild.style.textAlign = this.formFieldAlign ? this.formFieldAlign : selectedItem.alignment;\n                }\n            }\n        }\n        if (index > -1) {\n            formFieldsData[parseInt(index.toString(), 10)].FormField.alignment = selectedItem.alignment;\n            this.pdfViewerBase.formFieldCollection[parseInt(index.toString(), 10)].FormField.alignment = selectedItem.alignment;\n        }\n        this.pdfViewer.nameTable[selectedItem.id.split('_')[0]].alignment = selectedItem.alignment;\n        if (isAlignmentChanged) {\n            this.updateFormFieldPropertiesChanges('formFieldPropertiesChange', selectedItem, false, false, false, false, false, false, false, false, isAlignmentChanged, false, false, false, false, false, false, false, oldValue, newValue);\n        }\n    };\n    FormDesigner.prototype.updateFontSizePropertyChange = function (selectedItem, element, isUndoRedo, index, formFieldsData) {\n        var isFontSizeChanged = false;\n        var oldValue;\n        var newValue;\n        var zoomValue = this.pdfViewerBase.getZoomFactor();\n        var fontSize = this.formFieldFontSize ? parseInt(this.formFieldFontSize.value.toString(), 10) :\n            (selectedItem && selectedItem.fontSize) ? parseInt(selectedItem.fontSize.toString(), 10) : 10;\n        var selectedFontSize = parseInt(selectedItem.fontSize, 10);\n        if (selectedFontSize !== fontSize) {\n            isFontSizeChanged = true;\n            oldValue = selectedItem.fontSize;\n            newValue = fontSize;\n        }\n        if (isUndoRedo) {\n            element.style.fontSize = (selectedItem.fontSize * zoomValue) + 'px'.toString();\n        }\n        else {\n            selectedItem.fontSize = fontSize;\n            element.style.fontSize = this.formFieldFontSize ? (parseInt(this.formFieldFontSize.value.toString(), 10) + 'px') : parseInt(selectedItem.fontSize.toString(), 10) + 'px';\n        }\n        if (index > -1) {\n            formFieldsData[parseInt(index.toString(), 10)].FormField.fontSize = selectedItem.fontSize;\n            this.pdfViewerBase.formFieldCollection[parseInt(index.toString(), 10)].FormField.fontSize = selectedItem.fontSize;\n        }\n        this.pdfViewer.nameTable[selectedItem.id.split('_')[0]].fontSize = selectedItem.fontSize;\n        if (isFontSizeChanged) {\n            this.updateFormFieldPropertiesChanges('formFieldPropertiesChange', selectedItem, false, false, isFontSizeChanged, false, false, false, false, false, false, false, false, false, false, false, false, false, oldValue, newValue);\n        }\n    };\n    FormDesigner.prototype.updateFontFamilyPropertyChange = function (selectedItem, element, isUndoRedo, index, formFieldsData) {\n        var isFontFamilyChanged = false;\n        var oldValue;\n        var newValue;\n        var fontFamily = this.pdfViewer.enableHtmlSanitizer ? _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.SanitizeHtmlHelper.sanitize(this.formFieldFontFamily ? this.formFieldFontFamily.value.toString() : '') : (this.formFieldFontFamily ? this.formFieldFontFamily.value.toString() : '');\n        if (selectedItem.fontFamily !== fontFamily) {\n            isFontFamilyChanged = true;\n            oldValue = selectedItem.fontFamily;\n            newValue = fontFamily;\n        }\n        if (isUndoRedo) {\n            element.style.fontFamily = selectedItem.fontFamily;\n        }\n        // EJ2-856550 - to ge selectItem fontfamily when font family empty string in add multiline programattically.\n        else if (fontFamily === '') {\n            fontFamily = selectedItem.fontFamily;\n            element.style.fontFamily = fontFamily;\n        }\n        else {\n            selectedItem.fontFamily = fontFamily;\n            element.style.fontFamily = fontFamily;\n        }\n        if (index > -1) {\n            formFieldsData[parseInt(index.toString(), 10)].FormField.fontFamily = selectedItem.fontFamily;\n            this.pdfViewerBase.formFieldCollection[parseInt(index.toString(), 10)].FormField.fontFamily = selectedItem.fontFamily;\n        }\n        this.pdfViewer.nameTable[selectedItem.id.split('_')[0]].fontFamily = selectedItem.fontFamily;\n        if (isFontFamilyChanged) {\n            this.updateFormFieldPropertiesChanges('formFieldPropertiesChange', selectedItem, false, isFontFamilyChanged, false, false, false, false, false, false, false, false, false, false, false, false, false, false, oldValue, newValue);\n        }\n    };\n    FormDesigner.prototype.updateVisibilityPropertyChange = function (selectedItem, element, isUndoRedo, index, formFieldsData) {\n        var isVisibilityChanged = false;\n        var oldValue;\n        var newValue;\n        if (this.formFieldVisibility && (selectedItem.visibility !== this.formFieldVisibility.value)) {\n            isVisibilityChanged = true;\n            oldValue = selectedItem.visibility;\n            newValue = this.formFieldVisibility.value;\n        }\n        if (!isUndoRedo) {\n            selectedItem.visibility = this.formFieldVisibility.value;\n        }\n        element.style.visibility = selectedItem.visibility;\n        if (selectedItem.formFieldAnnotationType === 'RadioButton') {\n            element.parentElement.style.visibility = selectedItem.visibility;\n        }\n        if (selectedItem.formFieldAnnotationType === 'SignatureField' || selectedItem.formFieldAnnotationType === 'InitialField') {\n            var signElement = document.getElementById(selectedItem.id + '_content_html_element').firstElementChild.children[1];\n            signElement.style.visibility = selectedItem.visibility;\n            signElement.parentElement.style.visibility = selectedItem.visibility;\n            var annotation = this.pdfViewer.nameTable[selectedItem.id.split('_')[0] + '_content'];\n            if (selectedItem.visibility === 'hidden') {\n                if (annotation) {\n                    this.hideSignatureValue(selectedItem, annotation, index, formFieldsData);\n                }\n            }\n            else {\n                if (annotation) {\n                    this.showSignatureValue(selectedItem, oldValue, annotation, index, formFieldsData);\n                }\n            }\n        }\n        if (index > -1) {\n            formFieldsData[parseInt(index.toString(), 10)].FormField.visibility = selectedItem.visibility;\n            this.pdfViewerBase.formFieldCollection[parseInt(index.toString(), 10)].FormField.visibility = selectedItem.visibility;\n        }\n        // selectedItem.visibility = this.formFieldVisibility.value;\n        this.pdfViewer.nameTable[selectedItem.id.split('_')[0]].visibility = selectedItem.visibility;\n        if (isVisibilityChanged) {\n            this.pdfViewerBase.setItemInSessionStorage(this.pdfViewerBase.formFieldCollection, '_formDesigner');\n            this.updateFormFieldPropertiesChanges('formFieldPropertiesChange', selectedItem, false, false, false, false, false, false, false, false, false, false, isVisibilityChanged, false, false, false, false, false, oldValue, newValue);\n        }\n    };\n    FormDesigner.prototype.hideSignatureValue = function (selectedItem, annotation, index, formFieldsData) {\n        selectedItem.wrapper.children.splice(selectedItem.wrapper.children.indexOf(annotation.wrapper.children[0]), 1);\n        this.pdfViewer.remove(annotation);\n        this.pdfViewer.renderDrawing();\n    };\n    FormDesigner.prototype.showSignatureValue = function (selectedItem, oldValue, annotation, index, formFieldsData) {\n        if (annotation.shapeAnnotationType === 'SignatureText') {\n            selectedItem.value = annotation.data;\n            selectedItem.signatureType = 'Text';\n            formFieldsData[parseInt(index.toString(), 10)].FormField.signatureType = 'Text';\n            formFieldsData[parseInt(index.toString(), 10)].FormField.value = annotation.data;\n            this.pdfViewerBase.formFieldCollection[parseInt(index.toString(), 10)].FormField.value = annotation.data;\n            this.pdfViewerBase.formFieldCollection[parseInt(index.toString(), 10)].FormField.signatureType = 'Text';\n        }\n        else if (annotation.shapeAnnotationType === 'SignatureImage') {\n            selectedItem.value = annotation.data;\n            selectedItem.signatureType = 'Image';\n            formFieldsData[parseInt(index.toString(), 10)].FormField.signatureType = 'Image';\n            formFieldsData[parseInt(index.toString(), 10)].FormField.value = annotation.data;\n            this.pdfViewerBase.formFieldCollection[parseInt(index.toString(), 10)].FormField.value = annotation.data;\n            this.pdfViewerBase.formFieldCollection[parseInt(index.toString(), 10)].FormField.signatureType = 'Image';\n        }\n        else {\n            formFieldsData[parseInt(index.toString(), 10)].FormField.signatureType = 'Path';\n            selectedItem.signatureType = 'Path';\n            this.pdfViewerBase.formFieldCollection[parseInt(index.toString(), 10)].FormField.signatureType = 'Path';\n            var collectionData = (0,_syncfusion_ej2_drawings__WEBPACK_IMPORTED_MODULE_1__.processPathData)(annotation.data);\n            var csData = (0,_syncfusion_ej2_drawings__WEBPACK_IMPORTED_MODULE_1__.splitArrayCollection)(collectionData);\n            selectedItem.value = JSON.stringify(csData);\n            formFieldsData[parseInt(index.toString(), 10)].FormField.value = JSON.stringify(csData);\n            this.pdfViewerBase.formFieldCollection[parseInt(index.toString(), 10)].FormField.value = JSON.stringify(csData);\n        }\n        selectedItem.signatureBound = annotation.signatureBound;\n        if (oldValue === 'hidden') {\n            this.pdfViewer.add(annotation);\n            selectedItem.wrapper.children.push(annotation.wrapper);\n            var canvass = this.pdfViewerBase.getAnnotationCanvas('_annotationCanvas_', selectedItem.pageIndex);\n            this.pdfViewer.renderDrawing(canvass, selectedItem.pageIndex);\n        }\n        this.pdfViewer.renderDrawing();\n    };\n    FormDesigner.prototype.updateTooltipPropertyChange = function (selectedItem, element, isUndoRedo, index, formFieldsData) {\n        var isToolTipChanged = false;\n        var oldValue;\n        var newValue;\n        if (this.formFieldTooltip && (selectedItem.tooltip !== this.formFieldTooltip.value)) {\n            isToolTipChanged = true;\n            oldValue = selectedItem.tooltip;\n            newValue = this.formFieldTooltip.value;\n        }\n        if (this.pdfViewer.enableHtmlSanitizer && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.formFieldTooltip) && this.formFieldTooltip.value) {\n            this.formFieldTooltip.value = _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.SanitizeHtmlHelper.sanitize(this.formFieldTooltip.value);\n        }\n        if (isUndoRedo) {\n            this.formFieldTooltip = new _syncfusion_ej2_inputs__WEBPACK_IMPORTED_MODULE_6__.TextBox();\n            this.formFieldTooltip.value = selectedItem.tooltip;\n        }\n        else {\n            selectedItem.tooltip = this.formFieldTooltip ? this.formFieldTooltip.value : selectedItem.tooltip;\n        }\n        if (index > -1) {\n            formFieldsData[parseInt(index.toString(), 10)].FormField.tooltip = selectedItem.tooltip;\n            this.pdfViewerBase.formFieldCollection[parseInt(index.toString(), 10)].FormField.tooltip = selectedItem.tooltip;\n        }\n        this.pdfViewer.nameTable[selectedItem.id.split('_')[0]].tooltip = this.formFieldTooltip.value;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.formFieldTooltip.value) && this.formFieldTooltip.value !== '') {\n            this.setToolTip(this.formFieldTooltip.value, selectedItem.formFieldAnnotationType === 'RadioButton' ? element.parentElement : element);\n        }\n        if (isToolTipChanged) {\n            this.pdfViewerBase.setItemInSessionStorage(this.pdfViewerBase.formFieldCollection, '_formDesigner');\n            this.updateFormFieldPropertiesChanges('formFieldPropertiesChange', selectedItem, false, false, false, false, false, false, false, false, false, false, false, false, false, false, isToolTipChanged, false, oldValue, newValue);\n        }\n    };\n    FormDesigner.prototype.updateNamePropertyChange = function (selectedItem, element, isUndoRedo, index, formFieldsData) {\n        var designerName = document.getElementById(selectedItem.id + '_designer_name');\n        var zoomValue = this.pdfViewerBase.getZoomFactor();\n        if (this.pdfViewer.enableHtmlSanitizer && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.formFieldName) && this.formFieldName.value) {\n            this.formFieldName.value = _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.SanitizeHtmlHelper.sanitize(this.formFieldName.value);\n        }\n        designerName.style.fontSize = this.defaultFontSize + 'px';\n        if (isUndoRedo) {\n            designerName.innerHTML = selectedItem.name;\n        }\n        else {\n            selectedItem.name = this.formFieldName ? this.formFieldName.value : selectedItem.name;\n            designerName.innerHTML = selectedItem.name;\n        }\n        if (index > -1) {\n            var oldValue = void 0;\n            var newValue = void 0;\n            var optionsLength = selectedItem.options.length;\n            oldValue = optionsLength > 1 ? selectedItem.options.slice(0, optionsLength - 1) : '';\n            newValue = selectedItem.options[optionsLength - 1];\n            if ((formFieldsData[parseInt(index.toString(), 10)].FormField.formFieldAnnotationType === 'DropdownList' || formFieldsData[parseInt(index.toString(), 10)].FormField.formFieldAnnotationType === 'ListBox') && (formFieldsData[parseInt(index.toString(), 10)].FormField.name === selectedItem.name) && formFieldsData[parseInt(index.toString(), 10)].FormField.option.length > 0) {\n                this.updateFormFieldPropertiesChanges('formFieldPropertiesChange', selectedItem, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, oldValue, newValue, true, formFieldsData[parseInt(index.toString(), 10)].FormField.name);\n            }\n            if (this.formFieldName && (selectedItem.name !== formFieldsData[parseInt(index.toString(), 10)].FormField.name)) {\n                oldValue = formFieldsData[parseInt(index.toString(), 10)].FormField.name;\n                newValue = selectedItem.name;\n            }\n            if (formFieldsData[parseInt(index.toString(), 10)].FormField.name !== selectedItem.name) {\n                this.updateFormFieldPropertiesChanges('formFieldPropertiesChange', selectedItem, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, oldValue, newValue, true, formFieldsData[parseInt(index.toString(), 10)].FormField.name);\n            }\n            formFieldsData[parseInt(index.toString(), 10)].FormField.name = selectedItem.name;\n            this.pdfViewerBase.formFieldCollection[parseInt(index.toString(), 10)].FormField.name = selectedItem.name;\n        }\n        element.name = selectedItem.name;\n        this.pdfViewer.nameTable[selectedItem.id.split('_')[0]].name = selectedItem.name;\n        if (selectedItem.formFieldAnnotationType === 'DropdownList' || selectedItem.formFieldAnnotationType === 'ListBox') {\n            for (var i = 0; i < this.pdfViewer.formFieldCollection.length; i++) {\n                var formField = this.pdfViewer.formFieldCollection[parseInt(i.toString(), 10)];\n                if ((formField.formFieldAnnotationType === 'DropdownList' || formField.formFieldAnnotationType === 'ListBox') && formField.name === selectedItem.name && formField.id !== selectedItem.id) {\n                    selectedItem.options = formField.options;\n                    this.updateDropDownListDataSource(selectedItem, element);\n                    break;\n                }\n            }\n        }\n    };\n    // Implemented this method to set the \"ReadOnly\" in the grouping elements. Task: 855079.\n    FormDesigner.prototype.setReadOnlyProperty = function (selectedItem, element) {\n        this.pdfViewer.nameTable[selectedItem.id.split('_')[0]].isReadonly = selectedItem.isReadonly;\n        this.setReadOnlyToElement(selectedItem, element, selectedItem.isReadonly);\n        this.setReadOnlyToFormField(selectedItem, selectedItem.isReadonly);\n    };\n    FormDesigner.prototype.updateIsReadOnlyPropertyChange = function (selectedItem, element, isUndoRedo, index, formFieldsData) {\n        var isReadOnlyChanged = false;\n        var oldValue;\n        var newValue;\n        if (this.formFieldReadOnly && (selectedItem.isReadonly !== this.formFieldReadOnly.checked)) {\n            isReadOnlyChanged = true;\n            oldValue = selectedItem.isReadonly;\n            newValue = this.formFieldReadOnly.checked;\n        }\n        if (isUndoRedo) {\n            this.formFieldReadOnly = new _syncfusion_ej2_buttons__WEBPACK_IMPORTED_MODULE_8__.CheckBox();\n            this.formFieldReadOnly.checked = selectedItem.isReadonly;\n        }\n        else {\n            selectedItem.isReadonly = this.formFieldReadOnly.checked;\n        }\n        if (index > -1) {\n            formFieldsData[parseInt(index.toString(), 10)].FormField.isReadonly = selectedItem.isReadonly;\n            this.pdfViewerBase.formFieldCollection[parseInt(index.toString(), 10)].FormField.isReadonly = selectedItem.isReadonly;\n            if (this.pdfViewerBase.formFieldCollection[parseInt(index.toString(), 10)].FormField.radiobuttonItem) {\n                for (var i = 0; i < this.pdfViewerBase.\n                    formFieldCollection[parseInt(index.toString(), 10)].FormField.radiobuttonItem.length; i++) {\n                    this.pdfViewerBase.formFieldCollection[parseInt(index.toString(), 10)].\n                        FormField.radiobuttonItem[parseInt(i.toString(), 10)].isReadonly = selectedItem.isReadonly;\n                    this.pdfViewer.nameTable[this.pdfViewerBase.formFieldCollection[parseInt(index.toString(), 10)].FormField.radiobuttonItem[parseInt(i.toString(), 10)].id.split('_')[0]].isReadonly = selectedItem.isReadonly;\n                    var currentElement = document.getElementById(this.pdfViewerBase.formFieldCollection[parseInt(index.toString(), 10)].FormField.radiobuttonItem[parseInt(i.toString(), 10)].id.split('_')[0]);\n                    var currentItem = this.pdfViewerBase.\n                        formFieldCollection[parseInt(index.toString(), 10)].FormField.radiobuttonItem[parseInt(i.toString(), 10)];\n                    this.setReadOnlyProperty(currentItem, currentElement);\n                    if (isReadOnlyChanged) {\n                        this.pdfViewerBase.formFieldCollection[parseInt(index.toString(), 10)].\n                            FormField.radiobuttonItem[parseInt(i.toString(), 10)].backgroundColor =\n                            typeof (currentItem.backgroundColor) === 'string' ? this.getRgbCode(currentItem.backgroundColor) : currentItem.backgroundColor;\n                    }\n                }\n                this.pdfViewerBase.setItemInSessionStorage(this.pdfViewerBase.formFieldCollection, '_formDesigner');\n            }\n        }\n        this.setReadOnlyProperty(selectedItem, element);\n        if (isReadOnlyChanged) {\n            this.pdfViewerBase.setItemInSessionStorage(this.pdfViewerBase.formFieldCollection, '_formDesigner');\n            this.updateFormFieldPropertiesChanges('formFieldPropertiesChange', selectedItem, false, false, false, false, false, false, false, false, false, isReadOnlyChanged, false, false, false, false, false, false, oldValue, newValue);\n        }\n    };\n    FormDesigner.prototype.updateIsRequiredPropertyChange = function (selectedItem, element, isUndoRedo, index, formFieldsData) {\n        var isRequiredChanged = false;\n        var oldValue;\n        var newValue;\n        if (this.formFieldRequired && (selectedItem.isRequired !== this.formFieldRequired.checked)) {\n            isRequiredChanged = true;\n            oldValue = selectedItem.isRequired;\n            newValue = this.formFieldRequired.checked;\n        }\n        if (isUndoRedo) {\n            this.formFieldRequired = new _syncfusion_ej2_buttons__WEBPACK_IMPORTED_MODULE_8__.CheckBox();\n            this.formFieldRequired.checked = selectedItem.isRequired;\n        }\n        else {\n            selectedItem.isRequired = this.formFieldRequired ? this.formFieldRequired.checked : selectedItem.isRequired;\n        }\n        if (index > -1) {\n            formFieldsData[parseInt(index.toString(), 10)].FormField.isRequired = selectedItem.isRequired;\n            this.pdfViewerBase.formFieldCollection[parseInt(index.toString(), 10)].FormField.isRequired = selectedItem.isRequired;\n            if (this.pdfViewerBase.formFieldCollection[parseInt(index.toString(), 10)].FormField.radiobuttonItem) {\n                for (var i = 0; i < this.pdfViewerBase.\n                    formFieldCollection[parseInt(index.toString(), 10)].FormField.radiobuttonItem.length; i++) {\n                    this.pdfViewerBase.formFieldCollection[parseInt(index.toString(), 10)].\n                        FormField.radiobuttonItem[parseInt(i.toString(), 10)].isRequired = selectedItem.isRequired;\n                    this.pdfViewer.nameTable[this.pdfViewerBase.formFieldCollection[parseInt(index.toString(), 10)].FormField.radiobuttonItem[parseInt(i.toString(), 10)].id.split('_')[0]].isRequired = selectedItem.isRequired;\n                }\n                this.pdfViewerBase.setItemInSessionStorage(this.pdfViewerBase.formFieldCollection, '_formDesigner');\n            }\n        }\n        this.pdfViewer.nameTable[selectedItem.id.split('_')[0]].isRequired = selectedItem.isRequired;\n        this.setRequiredToElement(selectedItem, element, selectedItem.isRequired);\n        this.setRequiredToFormField(selectedItem, selectedItem.isRequired);\n        if (isRequiredChanged) {\n            this.pdfViewerBase.setItemInSessionStorage(this.pdfViewerBase.formFieldCollection, '_formDesigner');\n            this.updateFormFieldPropertiesChanges('formFieldPropertiesChange', selectedItem, false, false, false, false, false, false, false, false, false, false, false, false, isRequiredChanged, false, false, false, oldValue, newValue);\n        }\n    };\n    FormDesigner.prototype.updateIsPrintPropertyChange = function (selectedItem, isUndoRedo, index, formFieldsData) {\n        var isPrintChanged = false;\n        var oldValue;\n        var newValue;\n        if (this.formFieldPrinting && (selectedItem.isPrint !== this.formFieldPrinting.checked)) {\n            isPrintChanged = true;\n            oldValue = selectedItem.isPrint;\n            newValue = this.formFieldPrinting.checked;\n        }\n        if (isUndoRedo) {\n            this.formFieldPrinting = new _syncfusion_ej2_buttons__WEBPACK_IMPORTED_MODULE_8__.CheckBox();\n            this.formFieldPrinting.checked = selectedItem.isPrint;\n        }\n        else {\n            selectedItem.isPrint = this.formFieldPrinting.checked;\n        }\n        if (index > -1) {\n            formFieldsData[parseInt(index.toString(), 10)].FormField.isPrint = selectedItem.isPrint;\n            this.pdfViewerBase.formFieldCollection[parseInt(index.toString(), 10)].FormField.isPrint = selectedItem.isPrint;\n        }\n        this.pdfViewer.nameTable[selectedItem.id.split('_')[0]].isPrint = selectedItem.isPrint;\n        if (isPrintChanged) {\n            this.updateFormFieldPropertiesChanges('formFieldPropertiesChange', selectedItem, false, false, false, false, false, false, false, false, false, false, false, false, false, isPrintChanged, false, false, oldValue, newValue);\n        }\n    };\n    /**\n     * @param {number} id - It describes about the id\n     * @private\n     * @returns {number} - number\n     */\n    FormDesigner.prototype.getFormFiledIndex = function (id) {\n        if (this.pdfViewerBase.formFieldCollection == null || this.pdfViewerBase.formFieldCollection.length === 0) {\n            return -1;\n        }\n        var index = this.pdfViewerBase.formFieldCollection.findIndex(function (el) { return el.Key.split('_')[0] === id; });\n        if (index > -1) {\n            return index;\n        }\n        else {\n            for (var i = 0; i < this.pdfViewerBase.formFieldCollection.length; i++) {\n                if (this.pdfViewerBase.formFieldCollection[parseInt(i.toString(), 10)].FormField.formFieldAnnotationType === 'RadioButton' && this.pdfViewerBase.formFieldCollection[parseInt(i.toString(), 10)].FormField.radiobuttonItem) {\n                    for (var k = 0; k < this.pdfViewerBase.\n                        formFieldCollection[parseInt(i.toString(), 10)].FormField.radiobuttonItem.length; k++) {\n                        if (this.pdfViewerBase.formFieldCollection[parseInt(i.toString(), 10)].FormField.\n                            radiobuttonItem[parseInt(k.toString(), 10)].id.split('_')[0] === id) {\n                            return i;\n                        }\n                    }\n                }\n            }\n        }\n        return -1;\n    };\n    FormDesigner.prototype.updateFontStyle = function (inputElement, selectedItem, isUndoRedo, index, formFieldsData) {\n        var isFontStyleChanged = false;\n        var oldValue = '';\n        var newValue = '';\n        if (this.formFieldBold) {\n            if (selectedItem.fontStyle !== 'Bold') {\n                isFontStyleChanged = true;\n                oldValue += selectedItem.font.isBold ? 'Bold' + ', ' : '';\n            }\n            if (isUndoRedo) {\n                if (selectedItem.font.isBold) {\n                    this.setFontStyleValues(selectedItem, 'Bold', this.formFieldBold, inputElement, true, 'bold', index, formFieldsData);\n                }\n                else {\n                    this.setFontStyleValues(selectedItem, 'None', this.formFieldBold, inputElement, false, '', index, formFieldsData);\n                }\n            }\n            else if (this.formFieldBold === 'bold') {\n                this.setFontStyleValues(selectedItem, 'Bold', this.formFieldBold, inputElement, true, 'bold', index, formFieldsData);\n            }\n            else {\n                this.setFontStyleValues(selectedItem, 'None', 'bold', inputElement, false, '', index, formFieldsData);\n            }\n        }\n        else if (selectedItem.font.isBold) {\n            this.setFontStyleValues(selectedItem, 'None', 'bold', inputElement, false, '', index, formFieldsData);\n        }\n        newValue += selectedItem.font.isBold ? 'Bold' + ', ' : '';\n        if (this.formFieldItalic) {\n            if (selectedItem.fontStyle !== 'Italic') {\n                isFontStyleChanged = true;\n                oldValue += selectedItem.font.isItalic ? 'Italic' + ', ' : '';\n            }\n            if (isUndoRedo) {\n                if (selectedItem.font.isItalic) {\n                    this.setFontStyleValues(selectedItem, 'Italic', this.formFieldItalic, inputElement, true, 'italic', index, formFieldsData);\n                }\n                else {\n                    this.setFontStyleValues(selectedItem, 'None', this.formFieldItalic, inputElement, false, '', index, formFieldsData);\n                }\n            }\n            else if (this.formFieldItalic === 'italic') {\n                this.setFontStyleValues(selectedItem, 'Italic', this.formFieldItalic, inputElement, true, 'italic', index, formFieldsData);\n            }\n            else {\n                this.setFontStyleValues(selectedItem, 'None', 'italic', inputElement, false, '', index, formFieldsData);\n            }\n        }\n        else if (selectedItem.font.isItalic) {\n            this.setFontStyleValues(selectedItem, 'None', 'italic', inputElement, false, '', index, formFieldsData);\n        }\n        newValue += selectedItem.font.isItalic ? 'Italic' + ', ' : '';\n        if (this.formFieldUnderline) {\n            if (selectedItem.fontStyle !== 'Underline') {\n                isFontStyleChanged = true;\n                oldValue += selectedItem.font.isUnderline ? 'Underline' + ', ' : '';\n            }\n            if (isUndoRedo) {\n                if (selectedItem.font.isUnderline) {\n                    this.setFontStyleValues(selectedItem, 'Underline', this.formFieldUnderline, inputElement, true, 'underline', index, formFieldsData);\n                }\n                else {\n                    this.setFontStyleValues(selectedItem, 'None', this.formFieldUnderline, inputElement, false, '', index, formFieldsData);\n                }\n            }\n            else if (this.formFieldUnderline === 'underline') {\n                this.setFontStyleValues(selectedItem, 'Underline', this.formFieldUnderline, inputElement, true, 'underline', index, formFieldsData);\n            }\n            else {\n                this.setFontStyleValues(selectedItem, 'None', 'underline', inputElement, false, '', index, formFieldsData);\n            }\n        }\n        else if (selectedItem.font.isUnderline) {\n            this.setFontStyleValues(selectedItem, 'None', 'underline', inputElement, false, '', index, formFieldsData);\n        }\n        newValue += selectedItem.font.isUnderline ? 'Underline' + ', ' : '';\n        if (this.formFieldStrikeOut) {\n            if (selectedItem.fontStyle !== 'Strikethrough') {\n                isFontStyleChanged = true;\n                oldValue += selectedItem.font.isStrikeout ? 'Strikethrough' + ', ' : '';\n            }\n            if (isUndoRedo) {\n                if (selectedItem.font.isStrikeout) {\n                    this.setFontStyleValues(selectedItem, 'Strikethrough', this.formFieldStrikeOut, inputElement, true, 'line-through', index, formFieldsData);\n                }\n                else {\n                    this.setFontStyleValues(selectedItem, 'None', this.formFieldStrikeOut, inputElement, false, '', index, formFieldsData);\n                }\n            }\n            else if (this.formFieldStrikeOut === 'line-through') {\n                this.setFontStyleValues(selectedItem, 'Strikethrough', this.formFieldStrikeOut, inputElement, true, 'line-through', index, formFieldsData);\n            }\n            else {\n                this.setFontStyleValues(selectedItem, 'None', 'line-through', inputElement, false, '', index, formFieldsData);\n            }\n        }\n        else if (selectedItem.font.isStrikeout) {\n            this.setFontStyleValues(selectedItem, 'None', 'line-through', inputElement, false, '', index, formFieldsData);\n        }\n        newValue += selectedItem.font.isStrikeout ? 'Strikethrough' + ', ' : '';\n        return [isFontStyleChanged, oldValue, newValue];\n    };\n    FormDesigner.prototype.setFontStyleValues = function (selectedItem, selectedItemFontStyle, fontStyleType, inputElement, isFontStyleEnabled, fontStyleValue, index, formFieldsData) {\n        if (fontStyleType === 'bold') {\n            selectedItem.fontStyle = selectedItemFontStyle;\n            selectedItem.font.isBold = isFontStyleEnabled;\n            inputElement.style.fontWeight = fontStyleValue;\n            this.setDropdownFontStyleValue(inputElement, fontStyleType, fontStyleValue);\n            if (index > -1) {\n                formFieldsData[parseInt(index.toString(), 10)].FormField.font.isBold = isFontStyleEnabled;\n                this.pdfViewerBase.formFieldCollection[parseInt(index.toString(), 10)].FormField.font.isBold = isFontStyleEnabled;\n            }\n            this.pdfViewer.nameTable[selectedItem.id.split('_')[0]].font.isBold = isFontStyleEnabled;\n        }\n        else if (fontStyleType === 'italic') {\n            inputElement.style.fontStyle = fontStyleValue;\n            this.setDropdownFontStyleValue(inputElement, fontStyleType, fontStyleValue);\n            selectedItem.fontStyle = selectedItemFontStyle;\n            selectedItem.font.isItalic = isFontStyleEnabled;\n            if (index > -1) {\n                formFieldsData[parseInt(index.toString(), 10)].FormField.font.isItalic = isFontStyleEnabled;\n                this.pdfViewerBase.formFieldCollection[parseInt(index.toString(), 10)].FormField.font.isItalic = isFontStyleEnabled;\n            }\n            this.pdfViewer.nameTable[selectedItem.id.split('_')[0]].font.isItalic = isFontStyleEnabled;\n        }\n        else if (fontStyleType === 'underline') {\n            this.setDropdownFontStyleValue(inputElement, fontStyleType, fontStyleValue);\n            inputElement.style.textDecoration = fontStyleValue;\n            selectedItem.fontStyle = selectedItemFontStyle;\n            selectedItem.font.isUnderline = isFontStyleEnabled;\n            if (index > -1) {\n                formFieldsData[parseInt(index.toString(), 10)].FormField.font.isUnderline = isFontStyleEnabled;\n                this.pdfViewerBase.formFieldCollection[parseInt(index.toString(), 10)].FormField.font.isUnderline = isFontStyleEnabled;\n            }\n            this.pdfViewer.nameTable[selectedItem.id.split('_')[0]].font.isUnderline = isFontStyleEnabled;\n        }\n        else if (fontStyleType === 'line-through') {\n            this.setDropdownFontStyleValue(inputElement, fontStyleType, fontStyleValue);\n            inputElement.style.textDecoration = fontStyleValue;\n            selectedItem.fontStyle = selectedItemFontStyle;\n            selectedItem.font.isStrikeout = isFontStyleEnabled;\n            if (index > -1) {\n                formFieldsData[parseInt(index.toString(), 10)].FormField.font.isStrikeout = isFontStyleEnabled;\n                this.pdfViewerBase.formFieldCollection[parseInt(index.toString(), 10)].FormField.font.isStrikeout = isFontStyleEnabled;\n            }\n            this.pdfViewer.nameTable[selectedItem.id.split('_')[0]].font.isStrikeout = isFontStyleEnabled;\n        }\n    };\n    FormDesigner.prototype.setDropdownFontStyleValue = function (dropdownElement, fontStyleType, value) {\n        if (dropdownElement.length > 0) {\n            for (var i = 0; i < dropdownElement.length; i++) {\n                if (fontStyleType === 'bold') {\n                    dropdownElement[parseInt(i.toString(), 10)].style.fontWeight = value;\n                }\n                else if (fontStyleType === 'italic') {\n                    dropdownElement[parseInt(i.toString(), 10)].style.fontStyle = value;\n                }\n                else if (fontStyleType === 'underline') {\n                    dropdownElement[parseInt(i.toString(), 10)].style.textDecoration = value;\n                }\n                else if (fontStyleType === 'line-through') {\n                    dropdownElement[parseInt(i.toString(), 10)].style.textDecoration = value;\n                }\n                else if (fontStyleType === 'none') {\n                    dropdownElement[parseInt(i.toString(), 10)].style.fontWeight = value;\n                }\n            }\n        }\n    };\n    /**\n     * @param {string} name - It describes about the name\n     * @param {PdfFormFieldBaseModel} selectedItem - It describes about the selected item\n     * @param {boolean} isValueChanged - It describes about the isValueChanged\n     * @param {boolean} isFontFamilyChanged - It describes about the isFontFamilyChanged\n     * @param {boolean} isFontSizeChanged - It describes about the isFontSizeChanged\n     * @param {boolean} isFontStyleChanged - It describes about the isFontStyleChanged\n     * @param {boolean} isColorChanged - It describes about the isColorChanged\n     * @param {boolean} isBackgroundColorChanged - It describes about the isBackgroundColorChanged\n     * @param {boolean} isBorderColorChanged - It describes about the isBorderColorChanged\n     * @param {boolean} isBorderWidthChanged - It describes about the isBorderWidthChanged\n     * @param {boolean} isAlignmentChanged - It describes about the isAlignmentChanged\n     * @param {boolean} isReadOnlyChanged - It describes about the isReadOnlyChanged\n     * @param {boolean} isVisibilityChanged - It describes about the isVisibilityChanged\n     * @param {boolean} isMaxLengthChanged - It describes about the isMaxLengthChanged\n     * @param {boolean} isRequiredChanged - It describes about the isRequiredChanged\n     * @param {boolean} isPrintChanged - It describes about the isPrintChanged\n     * @param {boolean} isToolTipChanged - It describes about the isToolTipChanged\n     * @param {boolean} isCustomDataChanged - It describes about the isCustomDataChanged\n     * @param {any} oldValue - It describes about the old value\n     * @param {any} newValue - It describes about the new value\n     * @param {boolean} isNamechanged - It describes about the isNameChanged\n     * @param {string} previousName - It describes about the previous name\n     * @private\n     * @returns {void}\n     */\n    FormDesigner.prototype.updateFormFieldPropertiesChanges = function (name, selectedItem, isValueChanged, isFontFamilyChanged, isFontSizeChanged, isFontStyleChanged, isColorChanged, isBackgroundColorChanged, isBorderColorChanged, isBorderWidthChanged, isAlignmentChanged, isReadOnlyChanged, isVisibilityChanged, isMaxLengthChanged, isRequiredChanged, isPrintChanged, isToolTipChanged, isCustomDataChanged, oldValue, newValue, isNamechanged, previousName) {\n        var field = {\n            name: selectedItem.name, id: selectedItem.id, value: selectedItem.value,\n            fontFamily: selectedItem.fontFamily, fontSize: selectedItem.fontSize,\n            fontStyle: selectedItem.fontStyle,\n            color: selectedItem.color, backgroundColor: selectedItem.backgroundColor,\n            alignment: selectedItem.alignment, isReadonly: selectedItem.isReadonly,\n            visibility: selectedItem.visibility,\n            maxLength: selectedItem.maxLength, isRequired: selectedItem.isRequired,\n            isPrint: selectedItem.isPrint, rotation: selectedItem.rotateAngle,\n            tooltip: selectedItem.tooltip, options: selectedItem.options,\n            isChecked: selectedItem.isChecked, isSelected: selectedItem.isSelected,\n            previousName: previousName, currentName: selectedItem.name, customData: selectedItem.customData\n        };\n        this.pdfViewer.fireFormFieldPropertiesChangeEvent('formFieldPropertiesChange', field, selectedItem.pageIndex, isValueChanged, isFontFamilyChanged, isFontSizeChanged, isFontStyleChanged, isColorChanged, isBackgroundColorChanged, isBorderColorChanged, isBorderWidthChanged, isAlignmentChanged, isReadOnlyChanged, isVisibilityChanged, isMaxLengthChanged, isRequiredChanged, isPrintChanged, isToolTipChanged, isCustomDataChanged, oldValue, newValue, isNamechanged);\n    };\n    FormDesigner.prototype.onCancelClicked = function (args) {\n        this.propertiesDialog.hide();\n    };\n    FormDesigner.prototype.select = function (e) {\n        if (e.isSwiped) {\n            e.cancel = true; // Prevent swiping between tab items\n        }\n    };\n    FormDesigner.prototype.createAppearanceTab = function () {\n        var elementID = this.pdfViewer.element.id;\n        var appearanceDiv = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div', { id: elementID + '_properties_appearance' });\n        if (this.pdfViewer.selectedItems.formFields[0].formFieldAnnotationType !== 'DropdownList' && this.pdfViewer.selectedItems.formFields[0].formFieldAnnotationType !== 'ListBox') {\n            appearanceDiv.style.height = '260px';\n        }\n        else {\n            appearanceDiv.style.height = '336px';\n        }\n        var propertySpliter = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div');\n        propertySpliter.className = 'e-pv-properties-header-spliter';\n        appearanceDiv.appendChild(propertySpliter);\n        var tabContainer = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div', { className: 'e-pv-properties-tab-style-prop' });\n        appearanceDiv.appendChild(tabContainer);\n        // <div style=\"/* border-color: red; *//* border-width: 2px; *//* background: red; *//* height: 1px; */width: 100%;position: absolute;padding-top: 35px;/* border-bottom-color: black; *//* border-bottom-width: 2px; *//* border: solid; */border-bottom-style: solid;border-bottom-width: 1px;left: 0;border-bottom-color: #E0E0E0;\"></div>\n        if (this.pdfViewer.selectedItems && (this.pdfViewer.selectedItems.formFields[0].formFieldAnnotationType === 'ListBox' || this.pdfViewer.selectedItems.formFields[0].formFieldAnnotationType === 'DropdownList')) {\n            this.tabControl = new _syncfusion_ej2_navigations__WEBPACK_IMPORTED_MODULE_4__.Tab({\n                items: [\n                    {\n                        header: { 'text': '<div class=\"e-pv-form-field-property-header-general\"> ' + this.pdfViewer.localeObj.getConstant('General') + '</div>' }, content: this.createGeneralProperties()\n                    },\n                    {\n                        header: { 'text': '<div class=\"e-pv-form-field-property-header-general\"> ' + this.pdfViewer.localeObj.getConstant('Appearance') + '</div>' }, content: this.createAppearanceProperties()\n                    },\n                    {\n                        header: { 'text': '<div class=\"e-pv-form-field-property-header-general\"> ' + this.pdfViewer.localeObj.getConstant('Options') + '</div>' }, content: this.createOptionProperties()\n                    }\n                ],\n                selecting: this.select\n            }, tabContainer);\n        }\n        else if (this.pdfViewer.selectedItems && (this.pdfViewer.selectedItems.formFields[0].formFieldAnnotationType === 'SignatureField' || this.pdfViewer.selectedItems.formFields[0].formFieldAnnotationType === 'InitialField')) {\n            this.tabControl = new _syncfusion_ej2_navigations__WEBPACK_IMPORTED_MODULE_4__.Tab({\n                items: [\n                    {\n                        header: { 'text': '<div class=\"e-pv-form-field-property-header-general\"> ' + this.pdfViewer.localeObj.getConstant('General') + '</div>' }, content: this.createGeneralProperties()\n                    }\n                ],\n                selecting: this.select\n            }, tabContainer);\n        }\n        else {\n            this.tabControl = new _syncfusion_ej2_navigations__WEBPACK_IMPORTED_MODULE_4__.Tab({\n                items: [\n                    {\n                        header: { 'text': '<div class=\"e-pv-form-field-property-header-general\"> ' + this.pdfViewer.localeObj.getConstant('General') + '</div>' }, content: this.createGeneralProperties()\n                    },\n                    {\n                        header: { 'text': '<div class=\"e-pv-form-field-property-header-general\"> ' + this.pdfViewer.localeObj.getConstant('Appearance') + '</div>' }, content: this.createAppearanceProperties()\n                    }\n                ],\n                selecting: this.select\n            }, tabContainer);\n        }\n        tabContainer.children[1].style.height = '100%';\n        return appearanceDiv;\n    };\n    FormDesigner.prototype.createGeneralProperties = function () {\n        var selectedItem = this.pdfViewer.selectedItems.formFields ?\n            this.pdfViewer.selectedItems.formFields[0] : null;\n        var visibilityItems = ['visible', 'hidden'];\n        var elementID = this.pdfViewer.element.id;\n        var generalPropertiesDiv = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div', { id: elementID + '_general_prop_appearance' });\n        var textStyleContainer = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div', { className: 'e-pv-properties-text-edit-prop' });\n        generalPropertiesDiv.appendChild(textStyleContainer);\n        var formFieldNameMainDiv = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div', { className: 'e-pv-properties-form-field-name-main-div' });\n        var formFieldNameDiv = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div', { className: 'e-pv-properties-name-edit-prop' });\n        var formFieldNameContainer = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('input', { className: 'e-pv-properties-name-edit-input e-input' });\n        formFieldNameDiv.appendChild(formFieldNameContainer);\n        formFieldNameMainDiv.appendChild(formFieldNameDiv);\n        this.formFieldName = new _syncfusion_ej2_inputs__WEBPACK_IMPORTED_MODULE_6__.TextBox({ type: 'text', floatLabelType: 'Always', placeholder: this.pdfViewer.localeObj.getConstant('Name'), value: selectedItem.name, cssClass: 'e-pv-properties-formfield-name' }, formFieldNameContainer);\n        textStyleContainer.appendChild(formFieldNameMainDiv);\n        var formFieldTooltipMainDiv = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div', { className: 'e-pv-properties-form-field-tooltip-main-div' });\n        var formFieldTooltipDiv = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div', { className: 'e-pv-properties-tooltip-edit-prop' });\n        var formFieldTooltipContainer = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('input', { className: 'e-pv-properties-tooltip-prop-input e-input' });\n        formFieldTooltipDiv.appendChild(formFieldTooltipContainer);\n        formFieldTooltipMainDiv.appendChild(formFieldTooltipDiv);\n        this.formFieldTooltip = new _syncfusion_ej2_inputs__WEBPACK_IMPORTED_MODULE_6__.TextBox({ type: 'text', floatLabelType: 'Always', placeholder: this.pdfViewer.localeObj.getConstant('Tooltip'), value: selectedItem.tooltip, cssClass: 'e-pv-properties-formfield-tooltip' }, formFieldTooltipContainer);\n        textStyleContainer.appendChild(formFieldTooltipMainDiv);\n        var visibilityContainer = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div', { className: 'e-pv-properties-visibility-style-prop' });\n        generalPropertiesDiv.appendChild(visibilityContainer);\n        var formFieldValueMainDiv = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div', { className: 'e-pv-properties-form-field-value-main-div' });\n        var formFieldValueDiv = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div', { className: 'e-pv-properties-value-edit-prop' });\n        var formFieldValueContainer = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('input', { className: 'e-pv-properties-value-input e-input' });\n        formFieldValueDiv.appendChild(formFieldValueContainer);\n        formFieldValueMainDiv.appendChild(formFieldValueDiv);\n        if (this.pdfViewer.selectedItems.formFields[0].formFieldAnnotationType === 'PasswordField') {\n            this.formFieldValue = new _syncfusion_ej2_inputs__WEBPACK_IMPORTED_MODULE_6__.TextBox({ type: 'password', floatLabelType: 'Always', placeholder: this.pdfViewer.localeObj.getConstant('Value'), value: selectedItem.value, cssClass: 'e-pv-properties-formfield-value' }, formFieldValueContainer);\n        }\n        else {\n            this.formFieldValue = new _syncfusion_ej2_inputs__WEBPACK_IMPORTED_MODULE_6__.TextBox({ type: 'text', floatLabelType: 'Always', placeholder: this.pdfViewer.localeObj.getConstant('Value'), value: selectedItem.value, cssClass: 'e-pv-properties-formfield-value' }, formFieldValueContainer);\n        }\n        if (this.pdfViewer.selectedItems.formFields[0].formFieldAnnotationType !== 'Textbox' && this.pdfViewer.selectedItems.formFields[0].formFieldAnnotationType !== 'PasswordField' && this.pdfViewer.selectedItems.formFields[0].formFieldAnnotationType !== 'RadioButton' && this.pdfViewer.selectedItems.formFields[0].formFieldAnnotationType !== 'Checkbox') {\n            this.formFieldValue.enabled = false;\n            this.formFieldValue.value = '';\n        }\n        visibilityContainer.appendChild(formFieldValueMainDiv);\n        var formFieldVisibilityMainDiv = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div', { className: 'e-pv-properties-form-field-visibility-main-div' });\n        var formFieldVisibilityDiv = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div', { className: 'e-pv-properties-visibility-edit-prop' });\n        var formFieldVisibilityContainer = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('input', { className: 'e-pv-properties-formfield-visibility' });\n        formFieldVisibilityDiv.appendChild(formFieldVisibilityContainer);\n        formFieldVisibilityMainDiv.appendChild(formFieldVisibilityDiv);\n        var selectedIndex = selectedItem.visibility === 'visible' ? 0 : 1;\n        this.formFieldVisibility = new _syncfusion_ej2_dropdowns__WEBPACK_IMPORTED_MODULE_7__.DropDownList({ dataSource: visibilityItems, floatLabelType: 'Always', index: selectedIndex, value: selectedItem.visibility, placeholder: this.pdfViewer.localeObj.getConstant('Form Field Visibility'), cssClass: 'e-pv-properties-formfield-visibility' }, formFieldVisibilityContainer);\n        visibilityContainer.appendChild(formFieldVisibilityMainDiv);\n        var checkboxMainDiv = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div', { className: 'e-pv-properties-checkbox-main-div-prop' });\n        var readOnly = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('input', { className: 'e-pv-properties-checkbox-readonly-input e-input' });\n        checkboxMainDiv.appendChild(readOnly);\n        this.formFieldReadOnly = new _syncfusion_ej2_buttons__WEBPACK_IMPORTED_MODULE_8__.CheckBox({ label: this.pdfViewer.localeObj.getConstant('Read Only'), checked: selectedItem.isReadonly, cssClass: 'e-pv-properties-form-field-checkbox' }, readOnly);\n        if (this.pdfViewer.selectedItems.formFields[0].formFieldAnnotationType === 'Checkbox' || this.pdfViewer.selectedItems.formFields[0].formFieldAnnotationType === 'RadioButton') {\n            var checkedState = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('input', { className: 'e-pv-properties-checkbox-checked-input e-input' });\n            checkboxMainDiv.appendChild(checkedState);\n            this.formFieldChecked = new _syncfusion_ej2_buttons__WEBPACK_IMPORTED_MODULE_8__.CheckBox({ label: this.pdfViewer.localeObj.getConstant('Checked'), cssClass: 'e-pv-properties-form-field-checkbox', checked: selectedItem.isChecked || selectedItem.isSelected, change: this.checkBoxChange.bind(this) }, checkedState);\n        }\n        var required = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('input', { className: 'e-pv-properties-checkbox-required-input e-input' });\n        checkboxMainDiv.appendChild(required);\n        this.formFieldRequired = new _syncfusion_ej2_buttons__WEBPACK_IMPORTED_MODULE_8__.CheckBox({ label: this.pdfViewer.localeObj.getConstant('Required'), checked: selectedItem.isRequired, cssClass: 'e-pv-properties-form-field-checkbox' }, required);\n        var showPrinting = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('input', { className: 'e-pv-properties-checkbox-printing-input e-input' });\n        checkboxMainDiv.appendChild(showPrinting);\n        this.formFieldPrinting = new _syncfusion_ej2_buttons__WEBPACK_IMPORTED_MODULE_8__.CheckBox({ label: this.pdfViewer.localeObj.getConstant('Show Printing'), checked: selectedItem.isPrint, cssClass: 'e-pv-properties-form-field-checkbox' }, showPrinting);\n        if (selectedItem.formFieldAnnotationType === 'Textbox') {\n            var multilineTextbox = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('input', { className: 'e-pv-properties-checkbox-multiline-input e-input' });\n            checkboxMainDiv.appendChild(multilineTextbox);\n            this.formFieldMultiline = new _syncfusion_ej2_buttons__WEBPACK_IMPORTED_MODULE_8__.CheckBox({ label: this.pdfViewer.localeObj.getConstant('Multiline'), checked: selectedItem.isMultiline, cssClass: 'e-pv-properties-form-field-checkbox', change: this.multilineCheckboxChange.bind(this) }, multilineTextbox);\n        }\n        generalPropertiesDiv.appendChild(checkboxMainDiv);\n        return generalPropertiesDiv;\n    };\n    FormDesigner.prototype.checkBoxChange = function (args) {\n        this.checkboxCheckedState = args.checked;\n    };\n    FormDesigner.prototype.multilineCheckboxChange = function (args) {\n        this.multilineCheckboxCheckedState = true;\n    };\n    FormDesigner.prototype.setToolTip = function (tooltipContent, targetElement) {\n        //initialize tooltip component\n        var tooltip = new _syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_3__.Tooltip({\n            content: (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.initializeCSPTemplate)(function () { return tooltipContent; })\n        });\n        // render initialized tooltip\n        tooltip.appendTo(targetElement);\n        tooltip.beforeOpen = this.tooltipBeforeOpen.bind(this);\n        this.formFieldTooltips.push(tooltip);\n    };\n    FormDesigner.prototype.tooltipBeforeOpen = function (args) {\n        var currentFormField = this.pdfViewer.nameTable[args.target.id.split('_')[0] !== '' ? args.target.id.split('_')[0] : !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(args.target.firstElementChild) ? args.target.firstElementChild.id.split('_')[0] : ''];\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(currentFormField)) {\n            args.element.children[0].innerHTML = currentFormField.tooltip;\n            if (args.element.children[0].innerHTML !== '') {\n                args.element.style.display = 'block';\n            }\n            else {\n                args.element.style.display = 'none';\n            }\n        }\n    };\n    FormDesigner.prototype.createAppearanceProperties = function () {\n        var selectedItem = this.pdfViewer.selectedItems.formFields ?\n            this.pdfViewer.selectedItems.formFields[0] : null;\n        var fontFamilyItems = ['Helvetica', 'Courier', 'Times New Roman', 'Symbol', 'ZapfDingbats'];\n        var fontSizeItems = ['6px', '8px', '10px', '12px', '14px', '16px', '18px', '20px', '24px', '28px', '32px', '36px', '40px'];\n        var elementID = this.pdfViewer.element.id;\n        var appearancePropertiesDiv = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div', { id: elementID + '_formatting_text_prop_appearance' });\n        var formatTextStyleContainer = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div', { className: 'e-pv-properties-format-text-style-prop' });\n        appearancePropertiesDiv.appendChild(formatTextStyleContainer);\n        this.createLabelElement(this.pdfViewer.localeObj.getConstant('Formatting'), formatTextStyleContainer, true, 'e-pv-properties-formfield-label', elementID + '_properties_formfield_formatting');\n        var fontItemsContainer = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div', { className: 'e-pv-properties-font-items-container' });\n        var fontFamilyDropdownContainer = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div', { className: 'e-pv-properties-font-family-container' });\n        var formatdropdownContainer = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('input', { className: 'e-pv-properties-format-font-family-prop' });\n        fontFamilyDropdownContainer.appendChild(formatdropdownContainer);\n        fontItemsContainer.appendChild(fontFamilyDropdownContainer);\n        this.formFieldFontFamily = new _syncfusion_ej2_dropdowns__WEBPACK_IMPORTED_MODULE_7__.DropDownList({ dataSource: fontFamilyItems, value: this.getFontFamily(selectedItem.fontFamily) ? selectedItem.fontFamily : 'Helvetica', cssClass: 'e-pv-properties-formfield-fontfamily' }, formatdropdownContainer);\n        this.setToolTip(this.pdfViewer.localeObj.getConstant('Font family'), fontFamilyDropdownContainer);\n        var fontSizeContainer = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div', { className: 'e-pv-properties-font-size-container' });\n        var fontSizeDropdownContainer = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('input', { className: 'e-pv-properties-format-font-family-prop' });\n        fontSizeContainer.appendChild(fontSizeDropdownContainer);\n        fontItemsContainer.appendChild(fontSizeContainer);\n        this.formFieldFontSize = new _syncfusion_ej2_dropdowns__WEBPACK_IMPORTED_MODULE_7__.DropDownList({ dataSource: fontSizeItems, value: selectedItem.fontSize + 'px', cssClass: 'e-pv-properties-formfield-fontsize' }, fontSizeDropdownContainer);\n        this.setToolTip(this.pdfViewer.localeObj.getConstant('Font size'), fontSizeContainer);\n        var fontStyleContainer = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div', { className: 'e-pv-properties-form-field-font-style' });\n        fontStyleContainer.onclick = this.fontStyleClicked.bind(this);\n        fontStyleContainer.appendChild(this.addClassFontItem('_formField_bold', 'e-pv-bold-icon', selectedItem.font.isBold));\n        fontStyleContainer.appendChild(this.addClassFontItem('_formField_italic', 'e-pv-italic-icon', selectedItem.font.isItalic));\n        fontStyleContainer.appendChild(this.addClassFontItem('_formField_underline_textinput', 'e-pv-underlinetext-icon', selectedItem.font.isUnderline));\n        fontStyleContainer.appendChild(this.addClassFontItem('_formField_strikeout', 'e-pv-strikeout-icon', selectedItem.font.isStrikeout));\n        fontItemsContainer.appendChild(fontStyleContainer);\n        this.getFontStyle(selectedItem.font);\n        appearancePropertiesDiv.appendChild(fontItemsContainer);\n        var fontColorContainer = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div', { className: 'e-pv-properties-font-color-container' });\n        var fontAlignContainer = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div', { className: 'e-pv-properties-form-field-font-align' });\n        fontAlignContainer.onclick = this.fontAlignClicked.bind(this);\n        var alignment = selectedItem.alignment.toLowerCase();\n        fontAlignContainer.appendChild(this.addClassFontItem('_formField_left_align', 'e-pv-left-align-icon', alignment === 'left' ? true : false));\n        fontAlignContainer.appendChild(this.addClassFontItem('_formField_center_align', 'e-pv-center-align-icon', alignment === 'center' ? true : false));\n        fontAlignContainer.appendChild(this.addClassFontItem('_formField_right_align', 'e-pv-right-align-icon', alignment === 'right' ? true : false));\n        this.getAlignment(alignment);\n        fontColorContainer.appendChild(fontAlignContainer);\n        this.fontColorElement = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div', { className: 'e-pv-formfield-textcolor-icon', id: this.pdfViewer.element.id + 'formField_textColor' });\n        this.fontColorElement.setAttribute('role', 'combobox');\n        this.fontColorPalette = this.createColorPicker(this.fontColorElement.id, selectedItem.color);\n        if (selectedItem.color !== 'black') {\n            this.fontColorValue = selectedItem.color;\n        }\n        else {\n            this.fontColorValue = null;\n        }\n        this.fontColorPalette.change = this.onFontColorChange.bind(this);\n        this.fontColorDropDown = this.createDropDownButton(this.fontColorElement, 'e-pv-annotation-textcolor-icon', this.fontColorPalette.element.parentElement);\n        fontColorContainer.appendChild(this.fontColorElement);\n        this.setToolTip(this.pdfViewer.localeObj.getConstant('Font color'), this.fontColorDropDown.element);\n        this.updateColorInIcon(this.fontColorElement, this.pdfViewer.selectedItems.formFields[0].color);\n        if (selectedItem.formFieldAnnotationType === 'Checkbox' || selectedItem.formFieldAnnotationType === 'RadioButton') {\n            this.fontColorPalette.disabled = true;\n            this.fontColorDropDown.disabled = true;\n            this.fontColorElement.style.pointerEvents = 'none';\n            this.fontColorElement.style.opacity = '0.5';\n            fontAlignContainer.style.pointerEvents = 'none';\n            fontAlignContainer.style.opacity = '0.5';\n            this.formFieldFontSize.enabled = false;\n            this.formFieldFontFamily.enabled = false;\n            fontFamilyDropdownContainer.style.pointerEvents = 'none';\n            fontSizeContainer.style.pointerEvents = 'none';\n            fontStyleContainer.style.pointerEvents = 'none';\n            fontStyleContainer.style.opacity = '0.5';\n        }\n        var maxLengthGroup = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div', { className: 'e-pv-formfield-maxlength-group', id: this.pdfViewer.element.id + 'formField_maxlength_group' });\n        var maxLengthContainer = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div', { className: 'e-pv-formfield-maxlength-icon', id: this.pdfViewer.element.id + 'formField_maxlength' });\n        maxLengthGroup.appendChild(maxLengthContainer);\n        this.createLabelElement(this.pdfViewer.localeObj.getConstant('Max Length'), maxLengthContainer, true, 'e-pv-properties-formfield-label', elementID + '_properties_formfield_maxlength');\n        var maxLengthDropdownContainer = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div', { className: 'e-pv-formfield-maxlength', id: this.pdfViewer.element.id + 'formField_maxlength_container' });\n        var maxLengthItemDropdown = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('input', { className: 'e-pv-formfield-maxlength-input e-input' });\n        maxLengthItemDropdown.setAttribute('aria-label', 'Max Length');\n        maxLengthDropdownContainer.appendChild(maxLengthItemDropdown);\n        maxLengthGroup.appendChild(maxLengthDropdownContainer);\n        // Render the Numeric Textbox\n        this.maxLengthItem = new _syncfusion_ej2_inputs__WEBPACK_IMPORTED_MODULE_6__.NumericTextBox({ format: 'n', value: selectedItem.maxLength !== 0 ? selectedItem.maxLength : 0, min: 0 }, maxLengthItemDropdown);\n        fontColorContainer.appendChild(maxLengthGroup);\n        this.setToolTip(this.pdfViewer.localeObj.getConstant('Max Length'), this.maxLengthItem.element);\n        if (selectedItem.formFieldAnnotationType !== 'Textbox' && selectedItem.formFieldAnnotationType !== 'PasswordField') {\n            this.maxLengthItem.enabled = false;\n            maxLengthContainer.style.pointerEvents = 'none';\n        }\n        appearancePropertiesDiv.appendChild(fontColorContainer);\n        var colorContainer = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div', { className: 'e-pv-properties-color-container-style-prop' });\n        var backgroundColorContainer = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div', { className: 'e-pv-properties-fill-color-style-prop' });\n        appearancePropertiesDiv.appendChild(backgroundColorContainer);\n        this.createLabelElement(this.pdfViewer.localeObj.getConstant('Fill'), backgroundColorContainer, true, 'e-pv-properties-formfield-label', elementID + '_properties_formfield_fontcolor');\n        this.colorDropDownElement = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div', { className: 'e-pv-formfield-fontcolor-icon', id: this.pdfViewer.element.id + 'formField_fontColor' });\n        this.colorDropDownElement.setAttribute('role', 'combobox');\n        this.colorPalette = this.createColorPicker(this.colorDropDownElement.id, selectedItem.backgroundColor);\n        this.colorPalette.change = this.onColorPickerChange.bind(this);\n        this.colorDropDown = this.createDropDownButton(this.colorDropDownElement, 'e-pv-annotation-color-icon', this.colorPalette.element.parentElement);\n        this.setToolTip(this.pdfViewer.localeObj.getConstant('Fill Color'), this.colorDropDown.element);\n        backgroundColorContainer.appendChild(this.colorDropDownElement);\n        colorContainer.appendChild(backgroundColorContainer);\n        this.updateColorInIcon(this.colorDropDownElement, this.pdfViewer.selectedItems.formFields[0].backgroundColor);\n        var strokeColorContainer = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div', { className: 'e-pv-properties-stroke-color-style-prop' });\n        this.createLabelElement(this.pdfViewer.localeObj.getConstant('Border'), strokeColorContainer, true, 'e-pv-properties-formfield-label', elementID + '_properties_formfield_strokecolor');\n        this.strokeDropDownElement = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div', { className: 'e-pv-formfield-strokecolor-icon', id: this.pdfViewer.element.id + 'formField_strokeColor' });\n        this.strokeDropDownElement.setAttribute('role', 'combobox');\n        this.strokeColorPicker = this.createColorPicker(this.strokeDropDownElement.id, selectedItem.borderColor);\n        this.strokeColorPicker.change = this.onStrokePickerChange.bind(this);\n        this.strokeDropDown = this.createDropDownButton(this.strokeDropDownElement, 'e-pv-annotation-stroke-icon', this.strokeColorPicker.element.parentElement);\n        this.setToolTip(this.pdfViewer.localeObj.getConstant('Border Color'), this.strokeDropDown.element);\n        strokeColorContainer.appendChild(this.strokeDropDownElement);\n        colorContainer.appendChild(strokeColorContainer);\n        this.updateColorInIcon(this.strokeDropDownElement, this.pdfViewer.selectedItems.formFields[0].borderColor);\n        var strokeThicknessContainer = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div', { className: 'e-pv-properties-stroke-thickness-style-prop' });\n        this.createLabelElement(this.pdfViewer.localeObj.getConstant('Thickness'), strokeThicknessContainer, true, 'e-pv-properties-formfield-label', elementID + '_properties_formfield_strokethickness');\n        this.thicknessElement = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div', { className: 'e-pv-formfield-strokethickness-icon', id: this.pdfViewer.element.id + 'formField_strokethickness' });\n        this.thicknessElement.setAttribute('role', 'combobox');\n        var thicknessContainer = this.createThicknessSlider(this.thicknessElement.id);\n        this.thicknessDropDown = this.createDropDownButton(this.thicknessElement, 'e-pv-annotation-thickness-icon', thicknessContainer);\n        this.thicknessDropDown.beforeOpen = this.thicknessDropDownBeforeOpen.bind(this);\n        this.setToolTip(this.pdfViewer.localeObj.getConstant('Thickness'), this.thicknessDropDown.element);\n        this.thicknessSlider.change = this.thicknessChange.bind(this);\n        this.thicknessSlider.changed = this.thicknessChange.bind(this);\n        strokeThicknessContainer.appendChild(this.thicknessElement);\n        colorContainer.appendChild(strokeThicknessContainer);\n        appearancePropertiesDiv.appendChild(colorContainer);\n        return appearancePropertiesDiv;\n    };\n    FormDesigner.prototype.thicknessChange = function (args) {\n        if (this.pdfViewer.selectedItems.formFields.length === 1) {\n            this.formFieldBorderWidth = args.value;\n            this.updateThicknessIndicator();\n        }\n    };\n    FormDesigner.prototype.thicknessDropDownBeforeOpen = function () {\n        if (this.pdfViewer.selectedItems.formFields.length === 1) {\n            this.formFieldBorderWidth = this.pdfViewer.selectedItems.formFields[0].thickness.toString();\n            this.thicknessSlider.value = this.pdfViewer.selectedItems.formFields[0].thickness;\n        }\n        this.updateThicknessIndicator();\n    };\n    FormDesigner.prototype.updateThicknessIndicator = function () {\n        this.thicknessIndicator.textContent = this.thicknessSlider.value + ' pt';\n    };\n    FormDesigner.prototype.createOptionProperties = function () {\n        var _this = this;\n        var elementID = this.pdfViewer.element.id;\n        var optionPropertiesDiv = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div', { id: elementID + '_option_prop_appearance' });\n        var listItemAddContainer = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div', { className: 'e-pv-properties-form-field-list-add-div' });\n        var formFieldListItemMainDiv = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div', { className: 'e-pv-properties-form-field-list-item-main-div' });\n        this.createLabelElement(this.pdfViewer.localeObj.getConstant('List Item'), formFieldListItemMainDiv, true, 'e-pv-properties-formfield-label', elementID + '_properties_formfield_listitem');\n        var formFieldListItemDiv = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div', { className: 'e-pv-properties-list-item-edit-prop' });\n        var formFieldListItemContainer = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('input', { className: 'e-pv-properties-list-item-input e-input' });\n        formFieldListItemContainer.setAttribute('aria-label', 'Item Name');\n        formFieldListItemContainer.addEventListener('keyup', function (args) {\n            _this.formFieldAddButton.disabled = true;\n            _this.formFieldListItem.value = args.target.value;\n            if (args.target && args.target.value) {\n                if (_this.formFieldListItemCollection.length > 0) {\n                    for (var i = 0; i < _this.formFieldListItemCollection.length; i++) {\n                        var itemName = _this.formFieldListItemCollection[parseInt(i.toString(), 10)];\n                        if (itemName === args.target.value) {\n                            _this.formFieldAddButton.disabled = true;\n                            break;\n                        }\n                        else {\n                            _this.formFieldAddButton.disabled = false;\n                        }\n                    }\n                }\n                else {\n                    _this.formFieldAddButton.disabled = false;\n                }\n            }\n        });\n        formFieldListItemDiv.appendChild(formFieldListItemContainer);\n        formFieldListItemMainDiv.appendChild(formFieldListItemDiv);\n        this.formFieldListItem = new _syncfusion_ej2_inputs__WEBPACK_IMPORTED_MODULE_6__.TextBox({ type: 'text', cssClass: 'e-pv-properties-formfield-listitem' }, formFieldListItemContainer);\n        listItemAddContainer.appendChild(formFieldListItemMainDiv);\n        optionPropertiesDiv.appendChild(listItemAddContainer);\n        var buttonDiv = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div', { className: 'e-pv-properties-form-field-list-btn-div' });\n        var buttonAddInput = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('button', { className: 'e-btn' });\n        buttonAddInput.addEventListener('click', this.addListItemOnClick.bind(this));\n        buttonDiv.appendChild(buttonAddInput);\n        this.formFieldAddButton = new _syncfusion_ej2_buttons__WEBPACK_IMPORTED_MODULE_8__.Button({ content: this.pdfViewer.localeObj.getConstant('Add'), disabled: true, cssClass: 'e-pv-properties-dropdown-btn' }, buttonAddInput);\n        listItemAddContainer.appendChild(buttonDiv);\n        var exportValueContainer = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div', { className: 'e-pv-properties-form-field-export-value-div' });\n        var formFieldexportValueMainDiv = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div', { className: 'e-pv-properties-form-field-export-value-main-div' });\n        this.createLabelElement(this.pdfViewer.localeObj.getConstant('Export Value'), formFieldexportValueMainDiv, true, 'e-pv-properties-formfield-label', elementID + '_properties_formfield_exportValue');\n        var formFieldExportItemDiv = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div', { className: 'e-pv-properties-export-value-edit-prop' });\n        var formFieldExportItemContainer = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('input', { className: 'e-pv-properties-export-value-input e-input' });\n        formFieldExportItemContainer.setAttribute('aria-label', 'Item Value');\n        formFieldExportItemDiv.appendChild(formFieldExportItemContainer);\n        formFieldexportValueMainDiv.appendChild(formFieldExportItemDiv);\n        this.formFieldListItem = new _syncfusion_ej2_inputs__WEBPACK_IMPORTED_MODULE_6__.TextBox({ type: 'text', cssClass: 'e-pv-properties-formfield-exportvalue' }, formFieldExportItemContainer);\n        exportValueContainer.appendChild(formFieldexportValueMainDiv);\n        optionPropertiesDiv.appendChild(exportValueContainer);\n        var dropdownListItemContainer = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div', { className: 'e-pv-properties-form-field-option-dropdown-list-div' });\n        var formFieldDropdownListMainDiv = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div', { className: 'e-pv-properties-form-field-option-dropdown-list-item-div' });\n        var selectedElement = this.pdfViewer.selectedItems.formFields[0];\n        if (selectedElement.formFieldAnnotationType === 'DropdownList') {\n            this.createLabelElement(this.pdfViewer.localeObj.getConstant('Dropdown Item List'), formFieldDropdownListMainDiv, true, 'e-pv-properties-formfield-label', elementID + '_properties_formfield_dropdown_listitem');\n        }\n        else {\n            this.createLabelElement(this.pdfViewer.localeObj.getConstant('List Box Item List'), formFieldDropdownListMainDiv, true, 'e-pv-properties-formfield-label', elementID + '_properties_formfield_dropdown_listitem');\n        }\n        dropdownListItemContainer.appendChild(formFieldDropdownListMainDiv);\n        var btnTextAreaContainer = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div', { className: 'e-pv-properties-form-field-btn-textarea-container' });\n        var textAreaContainer = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div', { className: 'e-pv-properties-formfield-textarea', styles: 'width:300px;height:123px;border:1px solid #E0E0E0;margin-right:15px;overflow:auto' });\n        var listElement = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('ul', { id: this.pdfViewer.element.id + '_ul_list_item', className: 'e-pv-form-designer-ul-list-items' });\n        var listCount = this.createListElement(listElement);\n        textAreaContainer.appendChild(listElement);\n        btnTextAreaContainer.appendChild(textAreaContainer);\n        var buttonGroup = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div', { className: 'e-pv-properties-form-field-group-btn-div' });\n        var deleteButtonDiv = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div', { className: 'e-pv-properties-form-field-delete-btn-div' });\n        var buttonDeleteInput = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('button', { className: 'e-btn' });\n        buttonDeleteInput.addEventListener('click', this.deleteListItem.bind(this));\n        deleteButtonDiv.appendChild(buttonDeleteInput);\n        this.formFieldDeleteButton = new _syncfusion_ej2_buttons__WEBPACK_IMPORTED_MODULE_8__.Button({ content: this.pdfViewer.localeObj.getConstant('Delete Item'), disabled: listCount > 0 ? false : true, cssClass: 'e-pv-properties-dropdown-btn' }, buttonDeleteInput);\n        buttonGroup.appendChild(deleteButtonDiv);\n        var upButtonDiv = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div', { className: 'e-pv-properties-form-field-up-btn-div' });\n        var buttonUpInput = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('button', { className: 'e-btn' });\n        buttonUpInput.addEventListener('click', this.moveUpListItem.bind(this));\n        upButtonDiv.appendChild(buttonUpInput);\n        this.formFieldUpButton = new _syncfusion_ej2_buttons__WEBPACK_IMPORTED_MODULE_8__.Button({ content: this.pdfViewer.localeObj.getConstant('Up'), disabled: listCount > 1 ? false : true, cssClass: 'e-pv-properties-dropdown-btn' }, buttonUpInput);\n        buttonGroup.appendChild(upButtonDiv);\n        var downButtonDiv = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div', { className: 'e-pv-properties-form-field-down-btn-div' });\n        var buttonDownInput = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('button', { className: 'e-btn' });\n        buttonDownInput.addEventListener('click', this.moveDownListItem.bind(this));\n        downButtonDiv.appendChild(buttonDownInput);\n        this.formFieldDownButton = new _syncfusion_ej2_buttons__WEBPACK_IMPORTED_MODULE_8__.Button({ content: this.pdfViewer.localeObj.getConstant('Down'), disabled: true, cssClass: 'e-pv-properties-dropdown-btn' }, buttonDownInput);\n        buttonGroup.appendChild(downButtonDiv);\n        btnTextAreaContainer.appendChild(buttonGroup);\n        dropdownListItemContainer.appendChild(btnTextAreaContainer);\n        optionPropertiesDiv.appendChild(dropdownListItemContainer);\n        return optionPropertiesDiv;\n    };\n    FormDesigner.prototype.addListItemOnClick = function () {\n        var dropdownValue = this.formFieldListItem.value;\n        this.formFieldListItemCollection.push(dropdownValue);\n        var ulElement = document.getElementById(this.pdfViewer.element.id + '_ul_list_item');\n        if (ulElement.children && ulElement.children.length > 0) {\n            for (var i = 0; i < ulElement.children.length; i++) {\n                var element = ulElement.children[parseInt(i.toString(), 10)];\n                if (element.classList.contains('e-pv-li-select')) {\n                    element.classList.remove('e-pv-li-select');\n                }\n            }\n        }\n        var createLiElement = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('li', { className: 'e-pv-formfield-li-element' });\n        createLiElement.addEventListener('click', this.listItemOnClick.bind(this));\n        createLiElement.innerHTML = dropdownValue;\n        createLiElement.classList.add('e-pv-li-select');\n        ulElement.appendChild(createLiElement);\n        this.formFieldDeleteButton.disabled = false;\n        this.formFieldAddButton.disabled = true;\n        if (createLiElement.previousElementSibling) {\n            this.formFieldUpButton.disabled = false;\n        }\n        if (!createLiElement.nextElementSibling) {\n            this.formFieldDownButton.disabled = true;\n        }\n    };\n    FormDesigner.prototype.listItemOnClick = function (args) {\n        var ulElement = document.getElementById(this.pdfViewer.element.id + '_ul_list_item');\n        if (ulElement.children && ulElement.children.length > 0) {\n            for (var i = 0; i < ulElement.children.length; i++) {\n                var element = ulElement.children[parseInt(i.toString(), 10)];\n                if (element.classList.contains('e-pv-li-select')) {\n                    element.classList.remove('e-pv-li-select');\n                }\n            }\n        }\n        if (args.target) {\n            args.target.classList.add('e-pv-li-select');\n        }\n        if (args.target.nextElementSibling) {\n            this.formFieldDownButton.disabled = false;\n        }\n        else {\n            this.formFieldDownButton.disabled = true;\n        }\n        if (args.target.previousElementSibling) {\n            this.formFieldUpButton.disabled = false;\n        }\n        else {\n            this.formFieldUpButton.disabled = true;\n        }\n    };\n    FormDesigner.prototype.deleteListItem = function () {\n        var ulElement = document.getElementById(this.pdfViewer.element.id + '_ul_list_item');\n        if (ulElement.children && ulElement.children.length > 0) {\n            for (var i = 0; i < ulElement.children.length; i++) {\n                var element = ulElement.children[parseInt(i.toString(), 10)];\n                if (element.classList.contains('e-pv-li-select')) {\n                    element.classList.remove('e-pv-li-select');\n                    this.formFieldListItemCollection.splice(i, 1);\n                    if (element.previousElementSibling) {\n                        element.previousElementSibling.classList.add('e-pv-li-select');\n                        if (!element.previousElementSibling.previousElementSibling) {\n                            this.formFieldUpButton.disabled = true;\n                        }\n                    }\n                    else if (element.nextElementSibling) {\n                        element.nextElementSibling.classList.add('e-pv-li-select');\n                        if (!element.nextElementSibling.nextElementSibling) {\n                            this.formFieldDownButton.disabled = true;\n                        }\n                    }\n                    element.remove();\n                }\n            }\n        }\n        if (ulElement.children && ulElement.children.length === 0) {\n            this.formFieldDeleteButton.disabled = true;\n            this.formFieldUpButton.disabled = true;\n            this.formFieldDownButton.disabled = true;\n        }\n        if (ulElement.children && ulElement.children.length === 1) {\n            this.formFieldDeleteButton.disabled = false;\n            this.formFieldUpButton.disabled = true;\n            this.formFieldDownButton.disabled = true;\n        }\n    };\n    FormDesigner.prototype.moveUpListItem = function () {\n        var ulElement = document.getElementById(this.pdfViewer.element.id + '_ul_list_item');\n        if (ulElement.children && ulElement.children.length > 0) {\n            for (var i = 0; i < ulElement.children.length; i++) {\n                var element = ulElement.children[parseInt(i.toString(), 10)];\n                if (element.classList.contains('e-pv-li-select')) {\n                    if (element.previousElementSibling) {\n                        element.parentNode.insertBefore(element, element.previousElementSibling);\n                        if (!element.previousElementSibling) {\n                            this.formFieldUpButton.disabled = true;\n                        }\n                    }\n                    else {\n                        this.formFieldUpButton.disabled = true;\n                    }\n                    if (element.nextElementSibling) {\n                        this.formFieldDownButton.disabled = false;\n                    }\n                }\n            }\n        }\n    };\n    FormDesigner.prototype.moveDownListItem = function () {\n        var element;\n        var ulElement = document.getElementById(this.pdfViewer.element.id + '_ul_list_item');\n        if (ulElement.children && ulElement.children.length > 0) {\n            for (var i = 0; i < ulElement.children.length; i++) {\n                element = ulElement.children[parseInt(i.toString(), 10)];\n                if (element.classList.contains('e-pv-li-select')) {\n                    if (element.nextElementSibling) {\n                        element.parentNode.insertBefore(element.nextElementSibling, element);\n                        break;\n                    }\n                    else {\n                        this.formFieldDownButton.disabled = true;\n                    }\n                }\n            }\n        }\n        if (!element.nextElementSibling) {\n            this.formFieldDownButton.disabled = true;\n        }\n        if (element.previousElementSibling) {\n            this.formFieldUpButton.disabled = false;\n        }\n    };\n    FormDesigner.prototype.createListElement = function (ulElement) {\n        var selectedElement = this.pdfViewer.selectedItems.formFields[0];\n        if (selectedElement) {\n            if (selectedElement.options && selectedElement.options.length > 0) {\n                for (var i = 0; i < selectedElement.options.length; i++) {\n                    var dropdownValue = selectedElement.options[parseInt(i.toString(), 10)].itemName;\n                    if (this.formFieldListItemCollection[parseInt(i.toString(), 10)] !==\n                        selectedElement.options[parseInt(i.toString(), 10)].itemName) {\n                        this.formFieldListItemCollection.push(dropdownValue);\n                        var createLiElement = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('li', { className: 'e-pv-formfield-li-element' });\n                        createLiElement.addEventListener('click', this.listItemOnClick.bind(this));\n                        createLiElement.addEventListener('focus', this.focusFormFields.bind(this));\n                        createLiElement.addEventListener('blur', this.blurFormFields.bind(this));\n                        createLiElement.innerHTML = dropdownValue;\n                        ulElement.appendChild(createLiElement);\n                    }\n                }\n                ulElement.children[ulElement.children.length - 1].classList.add('e-pv-li-select');\n            }\n        }\n        return ulElement.children.length;\n    };\n    FormDesigner.prototype.createThicknessSlider = function (idString) {\n        var outerContainer = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div', { className: 'e-pv-annotation-thickness-popup-container' });\n        document.body.appendChild(outerContainer);\n        var label = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('span', { id: idString + '_label', className: 'e-pv-annotation-thickness-label' });\n        label.textContent = this.pdfViewer.localeObj.getConstant('Line Thickness');\n        var sliderElement = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div', { id: idString + '_slider' });\n        this.thicknessSlider = new _syncfusion_ej2_inputs__WEBPACK_IMPORTED_MODULE_6__.Slider({ type: 'MinRange', cssClass: 'e-pv-annotation-thickness-slider', max: 12, min: 0 });\n        this.thicknessIndicator = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div', { id: idString + '_thickness_indicator', className: 'e-pv-annotation-thickness-indicator' });\n        this.thicknessIndicator.textContent = '0 pt';\n        if (!this.pdfViewer.enableRtl) {\n            outerContainer.appendChild(label);\n            outerContainer.appendChild(sliderElement);\n            this.thicknessSlider.appendTo(sliderElement);\n            outerContainer.appendChild(this.thicknessIndicator);\n        }\n        else {\n            outerContainer.appendChild(this.thicknessIndicator);\n            outerContainer.appendChild(sliderElement);\n            this.thicknessSlider.enableRtl = true;\n            this.thicknessSlider.appendTo(sliderElement);\n            outerContainer.appendChild(label);\n        }\n        this.thicknessSlider.element.parentElement.classList.add('e-pv-annotation-thickness-slider-container');\n        return outerContainer;\n    };\n    FormDesigner.prototype.createColorPicker = function (idString, color) {\n        var inputElement = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('input', { id: idString + '_target' });\n        document.body.appendChild(inputElement);\n        var colorPicker = new _syncfusion_ej2_inputs__WEBPACK_IMPORTED_MODULE_6__.ColorPicker({\n            inline: true, mode: 'Palette', cssClass: 'e-show-value', enableOpacity: false,\n            value: color, showButtons: false, modeSwitcher: false\n        });\n        if (this.pdfViewer.enableRtl) {\n            colorPicker.enableRtl = true;\n        }\n        colorPicker.appendTo(inputElement);\n        return colorPicker;\n    };\n    FormDesigner.prototype.fontStyleClicked = function (args) {\n        if (args.target) {\n            if (args.target.id.indexOf('formField_bold') !== -1) {\n                var item = (args.target.id.indexOf('formField_bold_div') !== -1) ? args.target : args.target.parentElement;\n                if (item.classList.contains('e-pv-li-select')) {\n                    this.isBold = true;\n                }\n                this.isBold = !this.isBold;\n                if (this.isBold) {\n                    this.formFieldBold = 'bold';\n                    item.classList.add('e-pv-li-select');\n                }\n                else {\n                    this.formFieldBold = 'normal';\n                    item.classList.remove('e-pv-li-select');\n                }\n            }\n            else if (args.target.id.indexOf('formField_italic') !== -1) {\n                var item = (args.target.id.indexOf('formField_italic_div') !== -1) ? args.target : args.target.parentElement;\n                if (item.classList.contains('e-pv-li-select')) {\n                    this.isItalic = true;\n                }\n                this.isItalic = !this.isItalic;\n                if (this.isItalic) {\n                    this.formFieldItalic = 'italic';\n                    item.classList.add('e-pv-li-select');\n                }\n                else {\n                    this.formFieldItalic = 'normal';\n                    item.classList.remove('e-pv-li-select');\n                }\n            }\n            else if (args.target.id.indexOf('formField_underline') !== -1) {\n                var item = (args.target.id.indexOf('formField_underline_textinput_div') !== -1) ? args.target : args.target.parentElement;\n                if (item.classList.contains('e-pv-li-select')) {\n                    this.isUnderline = true;\n                }\n                this.isUnderline = !this.isUnderline;\n                if (this.isUnderline) {\n                    this.formFieldUnderline = 'underline';\n                    this.isStrikeThrough = false;\n                    item.classList.add('e-pv-li-select');\n                }\n                else {\n                    this.formFieldUnderline = 'none';\n                    item.classList.remove('e-pv-li-select');\n                }\n            }\n            else if (args.target.id.indexOf('formField_strikeout') !== -1) {\n                var item = (args.target.id.indexOf('formField_strikeout_div') !== -1) ? args.target : args.target.parentElement;\n                if (item.classList.contains('e-pv-li-select')) {\n                    this.isStrikeThrough = true;\n                }\n                this.isStrikeThrough = !this.isStrikeThrough;\n                if (this.isStrikeThrough) {\n                    this.formFieldStrikeOut = 'line-through';\n                    this.isUnderline = false;\n                    item.classList.add('e-pv-li-select');\n                }\n                else {\n                    this.formFieldStrikeOut = 'none';\n                    item.classList.remove('e-pv-li-select');\n                }\n            }\n        }\n    };\n    FormDesigner.prototype.clearFontAlignIconSelection = function (currentElement) {\n        for (var i = 0; i < currentElement.children.length; i++) {\n            if (currentElement.children[parseInt(i.toString(), 10)].classList.contains('e-pv-li-select')) {\n                currentElement.children[parseInt(i.toString(), 10)].classList.remove('e-pv-li-select');\n            }\n        }\n    };\n    FormDesigner.prototype.fontAlignClicked = function (args) {\n        if (args.target) {\n            args.target.classList.remove('e-pv-li-select');\n            if (args.target.id.indexOf('_formField_left_align') !== -1) {\n                var item = (args.target.id.indexOf('_formField_left_align_div') !== -1) ? args.target : args.target.parentElement;\n                this.formFieldAlign = 'left';\n                this.clearFontAlignIconSelection(args.currentTarget);\n                item.classList.add('e-pv-li-select');\n            }\n            else if (args.target.id.indexOf('_formField_right_align') !== -1) {\n                var item = (args.target.id.indexOf('_formField_right_align_div') !== -1) ? args.target : args.target.parentElement;\n                this.formFieldAlign = 'right';\n                this.clearFontAlignIconSelection(args.currentTarget);\n                item.classList.add('e-pv-li-select');\n            }\n            else {\n                var item = (args.target.id.indexOf('_formField_center_align_div') !== -1) ? args.target : args.target.parentElement;\n                this.formFieldAlign = 'center';\n                this.clearFontAlignIconSelection(args.currentTarget);\n                item.classList.add('e-pv-li-select');\n            }\n        }\n    };\n    FormDesigner.prototype.onFontColorChange = function (args) {\n        this.fontColorValue = (args.currentValue.hex === '') ? '#ffffff00' : args.currentValue.hex;\n        this.updateColorInIcon(this.fontColorElement, this.fontColorValue);\n        this.fontColorDropDown.toggle();\n    };\n    FormDesigner.prototype.onColorPickerChange = function (args) {\n        this.backgroundColorValue = (args.currentValue.hex === '') ? '#ffffff00' : args.currentValue.hex;\n        this.updateColorInIcon(this.colorDropDownElement, this.backgroundColorValue);\n        this.colorDropDown.toggle();\n    };\n    /**\n     * @param {HTMLElement} element - It describes about the element\n     * @param {string} color - It describes about the color\n     * @private\n     * @returns {void}\n     */\n    FormDesigner.prototype.updateColorInIcon = function (element, color) {\n        element.childNodes[0].style.borderBottomColor = color;\n    };\n    FormDesigner.prototype.onStrokePickerChange = function (args) {\n        this.borderColorValue = (args.currentValue.hex === '') ? '#ffffff00' : args.currentValue.hex;\n        this.updateColorInIcon(this.strokeDropDownElement, this.borderColorValue);\n        this.strokeDropDown.toggle();\n    };\n    FormDesigner.prototype.createDropDownButton = function (element, iconClass, target) {\n        var popup = document.getElementById(target.id + '-popup');\n        if (popup) {\n            popup.remove();\n        }\n        var dropDownButton = new _syncfusion_ej2_splitbuttons__WEBPACK_IMPORTED_MODULE_5__.DropDownButton({ iconCss: iconClass + ' e-pv-icon', target: target });\n        if (this.pdfViewer.enableRtl) {\n            dropDownButton.enableRtl = true;\n        }\n        dropDownButton.appendTo(element);\n        return dropDownButton;\n    };\n    /**\n     * @param {string} idString - It describes about the id string\n     * @param {string} className - It describes about the class name\n     * @param {boolean} isSelectedStyle - It describes about the isSelectedStyle\n     * @private\n     * @returns {HTMLElement} - html element\n     */\n    FormDesigner.prototype.addClassFontItem = function (idString, className, isSelectedStyle) {\n        var element = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div', { id: this.pdfViewer.element.id + idString + '_div' });\n        element.classList.add(className + '-div');\n        var spanElement = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('span', { id: this.pdfViewer.element.id + idString + '_span' });\n        spanElement.classList.add(className);\n        spanElement.classList.add('e-pv-icon');\n        switch (className) {\n            case 'e-pv-bold-icon':\n                this.setToolTip(this.pdfViewer.localeObj.getConstant('Bold'), element);\n                break;\n            case 'e-pv-italic-icon':\n                this.setToolTip(this.pdfViewer.localeObj.getConstant('Italic'), element);\n                break;\n            case 'e-pv-underlinetext-icon':\n                this.setToolTip(this.pdfViewer.localeObj.getConstant('Underlines'), element);\n                break;\n            case 'e-pv-strikeout-icon':\n                this.setToolTip(this.pdfViewer.localeObj.getConstant('Strikethroughs'), element);\n                break;\n            case 'e-pv-left-align-icon':\n                this.setToolTip(this.pdfViewer.localeObj.getConstant('Align left'), element);\n                break;\n            case 'e-pv-center-align-icon':\n                this.setToolTip(this.pdfViewer.localeObj.getConstant('Center'), element);\n                break;\n            case 'e-pv-right-align-icon':\n                this.setToolTip(this.pdfViewer.localeObj.getConstant('Align right'), element);\n                break;\n        }\n        if (isSelectedStyle) {\n            element.classList.add('e-pv-li-select');\n        }\n        element.appendChild(spanElement);\n        return element;\n    };\n    FormDesigner.prototype.createLabelElement = function (labelText, parentElement, isLabelNeeded, className, idString) {\n        var container = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div', { id: idString + '_container', className: className + '-container' });\n        var label = null;\n        if (isLabelNeeded) {\n            label = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div', { id: idString + '_label', className: className });\n            label.textContent = labelText;\n            container.appendChild(label);\n        }\n        parentElement.appendChild(label);\n    };\n    FormDesigner.prototype.setReadOnlyToFormField = function (selectedItem, isReadOnly) {\n        for (var i = 0; i < this.pdfViewer.formFieldCollection.length; i++) {\n            var formField = this.pdfViewer.formFieldCollection[parseInt(i.toString(), 10)];\n            if (formField.formFieldAnnotationType === selectedItem.formFieldAnnotationType &&\n                formField.name === selectedItem.name && formField.id === selectedItem.id) {\n                formField.isReadonly = isReadOnly;\n                switch (formField.formFieldAnnotationType) {\n                    case 'Textbox':\n                    case 'PasswordField':\n                    case 'DropdownList':\n                    case 'ListBox':\n                    case 'SignatureField':\n                    case 'InitialField':\n                    case 'RadioButton': {\n                        var inputElement = document.getElementById(formField.id + '_content_html_element').firstElementChild.firstElementChild;\n                        this.setReadOnlyToElement(formField, inputElement, isReadOnly);\n                        break;\n                    }\n                    case 'Checkbox': {\n                        var checkboxDivElement = document.getElementById(formField.id + '_content_html_element').firstElementChild.firstElementChild.lastElementChild;\n                        this.setReadOnlyToElement(formField, checkboxDivElement, isReadOnly);\n                        break;\n                    }\n                }\n            }\n        }\n    };\n    /**\n     * @param {any} signatureFieldCollection - It describes about the signature field collection\n     * @private\n     * @returns {any} - any\n     */\n    FormDesigner.prototype.getFormDesignerSignField = function (signatureFieldCollection) {\n        var collectiondata = this.pdfViewer.formFieldCollections;\n        var dataCollection;\n        for (var i = 0; i < collectiondata.length; i++) {\n            dataCollection = collectiondata[parseInt(i.toString(), 10)].type;\n            if (dataCollection === 'SignatureField' || dataCollection === 'InitialField') {\n                signatureFieldCollection.push(collectiondata[parseInt(i.toString(), 10)]);\n            }\n        }\n        return signatureFieldCollection;\n    };\n    FormDesigner.prototype.setRequiredToFormField = function (selectedItem, isRequired) {\n        for (var i = 0; i < this.pdfViewer.formFieldCollection.length; i++) {\n            var formField = this.pdfViewer.formFieldCollection[parseInt(i.toString(), 10)];\n            if (formField.formFieldAnnotationType === selectedItem.formFieldAnnotationType &&\n                formField.name === selectedItem.name && formField.id === selectedItem.id) {\n                formField.isRequired = isRequired;\n                switch (formField.formFieldAnnotationType) {\n                    case 'Textbox':\n                    case 'PasswordField':\n                    case 'DropdownList':\n                    case 'SignatureField':\n                    case 'InitialField': {\n                        var inputElement = document.getElementById(formField.id + '_content_html_element').firstElementChild.firstElementChild;\n                        this.setRequiredToElement(formField, inputElement, isRequired);\n                        break;\n                    }\n                    case 'RadioButton': {\n                        var radioButtonDivDivElement = document.getElementById(formField.id + '_content_html_element').firstElementChild.firstElementChild.firstElementChild;\n                        this.setRequiredToElement(formField, radioButtonDivDivElement, isRequired);\n                        this.updateFormFieldCollections(formField);\n                        break;\n                    }\n                    case 'Checkbox': {\n                        var checkboxDivElement = document.getElementById(formField.id + '_content_html_element').firstElementChild.firstElementChild.lastElementChild;\n                        this.setRequiredToElement(formField, checkboxDivElement, isRequired);\n                        break;\n                    }\n                    default:\n                        break;\n                }\n            }\n        }\n    };\n    // Implemented this method to verify the background color of the selected item. Task: 855151\n    FormDesigner.prototype.isTransparentBackground = function (backgroundColor) {\n        if (typeof (backgroundColor) === 'object') {\n            backgroundColor = JSON.stringify(backgroundColor);\n        }\n        return backgroundColor === '#00000000' || backgroundColor === 'transparent' || backgroundColor === 'rgba(0,0,0,0)' || backgroundColor === '{\"r\":0,\"g\":0,\"b\":0,\"a\":0}';\n    };\n    FormDesigner.prototype.setReadOnlyToElement = function (selectedItem, inputElement, isReadOnly) {\n        var fillColor = '#daeaf7ff';\n        var color = { r: 218, g: 234, b: 247, a: 100 };\n        if (selectedItem.formFieldAnnotationType === 'DropdownList' || selectedItem.formFieldAnnotationType === 'ListBox') {\n            inputElement.parentElement.style.backgroundColor = inputElement.style.backgroundColor;\n        }\n        if (!isReadOnly && inputElement.disabled) {\n            inputElement.disabled = false;\n        }\n        if (isReadOnly) {\n            if (selectedItem.formFieldAnnotationType === 'RadioButton') {\n                inputElement.parentElement.style.cursor = 'default';\n            }\n            else if (selectedItem.formFieldAnnotationType === 'SignatureField' || selectedItem.formFieldAnnotationType === 'InitialField') {\n                var thickness = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(selectedItem.thickness) ? 1 : selectedItem.thickness;\n                inputElement.parentElement.style.borderWidth = thickness;\n            }\n            else {\n                inputElement.style.cursor = 'default';\n            }\n        }\n        if (isReadOnly && this.isAddFormFieldProgrammatically) {\n            this.previousBackgroundColor = selectedItem.backgroundColor;\n        }\n        if (selectedItem.formFieldAnnotationType === 'RadioButton') {\n            inputElement.style.backgroundColor = selectedItem.isReadonly ? ((selectedItem.backgroundColor !== fillColor &&\n                JSON.stringify(selectedItem.backgroundColor) !== JSON.stringify(color)) ? selectedItem.backgroundColor : 'transparent') :\n                (this.isTransparentBackground(selectedItem.backgroundColor) ? fillColor : selectedItem.backgroundColor);\n        }\n        else if (selectedItem.formFieldAnnotationType === 'SignatureField' || selectedItem.formFieldAnnotationType === 'InitialField') {\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(selectedItem) && selectedItem.value === '') {\n                var background = selectedItem.backgroundColor ? selectedItem.backgroundColor : '#FFE48559';\n                inputElement.parentElement.style.backgroundColor = isReadOnly ?\n                    background : _base_pdfviewer_utlis__WEBPACK_IMPORTED_MODULE_12__.PdfViewerUtils.setTransparencyToHex(background);\n            }\n        }\n        else {\n            inputElement.style.backgroundColor = selectedItem.isReadonly ? (selectedItem.backgroundColor !== fillColor ? selectedItem.backgroundColor : 'transparent') : (this.isTransparentBackground(selectedItem.backgroundColor) ? fillColor : (selectedItem.backgroundColor !== this.previousBackgroundColor) ? selectedItem.backgroundColor : this.previousBackgroundColor);\n        }\n        // Have configured the backgroundColor of the selectedItem to ensure that transparency is maintained when downloading and loading in the viewer. Task: 855151\n        selectedItem.backgroundColor = selectedItem.isReadonly ?\n            ((selectedItem.backgroundColor !== fillColor && JSON.stringify(selectedItem.backgroundColor) !== JSON.stringify(color)) ? selectedItem.backgroundColor : 'transparent') :\n            (this.isTransparentBackground(selectedItem.backgroundColor) ?\n                fillColor : (selectedItem.backgroundColor !== this.previousBackgroundColor) ?\n                selectedItem.backgroundColor : this.previousBackgroundColor);\n    };\n    FormDesigner.prototype.setRequiredToElement = function (selectedItem, inputElement, isRequired) {\n        if (isRequired) {\n            inputElement.required = true;\n            inputElement.style.border = '1px solid red';\n            if (selectedItem.formFieldAnnotationType === 'RadioButton') {\n                var thickness = selectedItem.thickness === 0 ? 1 : selectedItem.thickness;\n                inputElement.parentElement.style.boxShadow = 'red 0px 0px 0px ' + thickness + 'px';\n            }\n            else if (selectedItem.formFieldAnnotationType === 'SignatureField' || selectedItem.formFieldAnnotationType === 'InitialField') {\n                var thickness = (selectedItem.thickness > 0) ? selectedItem.thickness : 1;\n                inputElement.style.border = thickness + 'px solid red';\n            }\n        }\n        else {\n            inputElement.required = false;\n            if (selectedItem.formFieldAnnotationType === 'SignatureField' || selectedItem.formFieldAnnotationType === 'InitialField') {\n                inputElement.style.borderWidth = selectedItem.thickness;\n            }\n            else {\n                inputElement.style.borderWidth = selectedItem.thickness + 'px';\n            }\n            inputElement.style.borderColor = selectedItem.borderColor;\n            if (selectedItem.formFieldAnnotationType === 'RadioButton') {\n                inputElement.parentElement.style.boxShadow = selectedItem.borderColor + ' 0px 0px 0px ' + selectedItem.thickness + 'px';\n            }\n        }\n    };\n    /**\n     * @private\n     * @returns {void}\n     */\n    FormDesigner.prototype.destroyPropertiesWindow = function () {\n        this.formFieldListItemCollection = [];\n        this.formFieldListItemDataSource = [];\n        this.formFieldFontFamily = null;\n        this.formFieldFontSize = null;\n        this.formFieldAlign = null;\n        this.fontColorValue = null;\n        this.backgroundColorValue = null;\n        this.borderColorValue = null;\n        this.formFieldBorderWidth = null;\n        this.formFieldName = null;\n        this.formFieldChecked = null;\n        this.formFieldReadOnly = null;\n        this.formFieldRequired = null;\n        this.formFieldTooltip = null;\n        this.formFieldPrinting = null;\n        this.formFieldMultiline = null;\n        this.formFieldVisibility = null;\n        if (this.strokeColorPicker) {\n            this.strokeColorPicker.destroy();\n            this.strokeColorPicker = null;\n        }\n        if (this.strokeDropDown) {\n            this.strokeDropDown.destroy();\n            this.strokeDropDown = null;\n        }\n        if (this.strokeDropDownElement) {\n            this.strokeDropDownElement = null;\n        }\n        if (this.colorDropDownElement) {\n            this.colorDropDownElement = null;\n        }\n        if (this.colorPalette) {\n            this.colorPalette.destroy();\n            this.colorPalette = null;\n        }\n        if (this.colorDropDown) {\n            this.colorDropDown.destroy();\n            this.colorDropDown = null;\n        }\n        if (this.thicknessElement) {\n            this.thicknessElement = null;\n        }\n        if (this.thicknessDropDown) {\n            this.thicknessDropDown.destroy();\n            this.thicknessDropDown = null;\n        }\n        if (this.fontColorDropDown) {\n            this.fontColorDropDown.destroy();\n            this.fontColorDropDown = null;\n        }\n        if (this.fontColorPalette) {\n            this.fontColorPalette.destroy();\n            this.fontColorPalette = null;\n        }\n        if (this.maxLengthItem) {\n            this.maxLengthItem.destroy();\n            this.maxLengthItem = null;\n        }\n        var dialogElement = this.pdfViewerBase.getElement('_properties_window');\n        if (dialogElement) {\n            dialogElement.parentElement.removeChild(dialogElement);\n        }\n    };\n    /**\n     * @private\n     * @returns {void}\n     */\n    FormDesigner.prototype.destroy = function () {\n        this.destroyPropertiesWindow();\n        if (this.formFieldTooltips != null) {\n            for (var i = 0; i < this.formFieldTooltips.length; i++) {\n                this.formFieldTooltips[parseInt(i.toString(), 10)].destroy();\n            }\n            this.formFieldTooltips = [];\n        }\n    };\n    FormDesigner.prototype.hex = function (x) {\n        return ('0' + x.toString(16)).slice(-2);\n    };\n    /**\n     * @private\n     * @returns {string} - string\n     */\n    FormDesigner.prototype.getModuleName = function () {\n        return 'FormDesigner';\n    };\n    FormDesigner.prototype.updateAnnotationCanvas = function (canvas, pageWidth, pageHeight, pageNumber) {\n        var ratio = this.pdfViewerBase.getZoomRatio();\n        canvas.width = pageWidth * ratio;\n        canvas.height = pageHeight * ratio;\n        canvas.style.width = pageWidth + 'px';\n        canvas.style.height = pageHeight + 'px';\n        canvas.style.position = 'absolute';\n        canvas.style.zIndex = '1';\n        this.pdfViewerBase.applyElementStyles(canvas, pageNumber);\n    };\n    FormDesigner.prototype.getFontFamily = function (fontFamily) {\n        var fontFamilyNames = ['Helvetica', 'Courier', 'Times New Roman', 'Symbol', 'ZapfDingbats'];\n        return fontFamilyNames.indexOf(fontFamily) > -1 ? true : false;\n    };\n    FormDesigner.prototype.updateTextFieldSettingProperties = function (drawingObject, isFormDesignerToolbarVisible, isSetFormFieldMode) {\n        var textFieldSettings = this.pdfViewer.textFieldSettings;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(textFieldSettings.isReadOnly) && this.textFieldPropertyChanged.isReadOnlyChanged) {\n            drawingObject.isReadonly = textFieldSettings.isReadOnly;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(textFieldSettings.isRequired) && this.textFieldPropertyChanged.isRequiredChanged) {\n            drawingObject.isRequired = textFieldSettings.isRequired;\n        }\n        if (textFieldSettings.value && this.textFieldPropertyChanged.isValueChanged) {\n            drawingObject.value = this.pdfViewer.enableHtmlSanitizer ?\n                _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.SanitizeHtmlHelper.sanitize(textFieldSettings.value) : textFieldSettings.value;\n        }\n        if ((textFieldSettings.backgroundColor && textFieldSettings.backgroundColor !== 'white') && this.textFieldPropertyChanged.isBackgroundColorChanged) {\n            drawingObject.backgroundColor = this.pdfViewer.enableHtmlSanitizer ?\n                _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.SanitizeHtmlHelper.sanitize(textFieldSettings.backgroundColor) : textFieldSettings.backgroundColor;\n        }\n        if ((textFieldSettings.borderColor && textFieldSettings.borderColor !== 'black') && this.textFieldPropertyChanged.isBorderColorChanged) {\n            drawingObject.borderColor = this.pdfViewer.enableHtmlSanitizer ?\n                _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.SanitizeHtmlHelper.sanitize(textFieldSettings.borderColor) : textFieldSettings.borderColor;\n        }\n        if ((textFieldSettings.alignment && textFieldSettings.alignment !== 'Left') && this.textFieldPropertyChanged.isAlignmentChanged) {\n            drawingObject.alignment = textFieldSettings.alignment;\n        }\n        if ((textFieldSettings.color && textFieldSettings.color !== 'black') &&\n            this.textFieldPropertyChanged.isColorChanged) {\n            drawingObject.color = this.pdfViewer.enableHtmlSanitizer ?\n                _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.SanitizeHtmlHelper.sanitize(textFieldSettings.color) : textFieldSettings.color;\n        }\n        if ((textFieldSettings.fontFamily && textFieldSettings.fontFamily !== 'Helvetica') && this.textFieldPropertyChanged.isFontFamilyChanged) {\n            drawingObject.fontFamily = this.pdfViewer.enableHtmlSanitizer ?\n                _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.SanitizeHtmlHelper.sanitize(textFieldSettings.fontFamily) : textFieldSettings.fontFamily;\n        }\n        if ((textFieldSettings.fontSize && textFieldSettings.fontSize !== 10) && this.textFieldPropertyChanged.isFontSizeChanged) {\n            drawingObject.fontSize = textFieldSettings.fontSize;\n        }\n        if (textFieldSettings.fontStyle && this.textFieldPropertyChanged.isFontStyleChanged) {\n            drawingObject.fontStyle = this.getFontStyleName(textFieldSettings.fontStyle, drawingObject);\n        }\n        if (textFieldSettings.name && this.textFieldPropertyChanged.isNameChanged) {\n            drawingObject.name = this.pdfViewer.enableHtmlSanitizer ?\n                _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.SanitizeHtmlHelper.sanitize(textFieldSettings.name) : textFieldSettings.name;\n        }\n        if (textFieldSettings.tooltip && this.textFieldPropertyChanged.isToolTipChanged) {\n            drawingObject.tooltip = this.pdfViewer.enableHtmlSanitizer ?\n                _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.SanitizeHtmlHelper.sanitize(textFieldSettings.tooltip) : textFieldSettings.tooltip;\n        }\n        if ((textFieldSettings.thickness && textFieldSettings.thickness !== 1) && this.textFieldPropertyChanged.isThicknessChanged) {\n            drawingObject.thickness = textFieldSettings.thickness;\n        }\n        if (textFieldSettings.maxLength && this.textFieldPropertyChanged.isMaxLengthChanged) {\n            drawingObject.maxLength = textFieldSettings.maxLength;\n        }\n        if (textFieldSettings.visibility && this.textFieldPropertyChanged.isVisibilityChanged) {\n            drawingObject.visibility = textFieldSettings.visibility;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(textFieldSettings.isPrint) && this.textFieldPropertyChanged.isPrintChanged) {\n            drawingObject.isPrint = textFieldSettings.isPrint;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(textFieldSettings.isMultiline) && this.textFieldPropertyChanged.isMultilineChanged) {\n            drawingObject.isMultiline = textFieldSettings.isMultiline;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(textFieldSettings.customData) && this.textFieldPropertyChanged.isCustomDataChanged) {\n            drawingObject.customData = textFieldSettings.customData;\n        }\n    };\n    FormDesigner.prototype.updatePasswordFieldSettingProperties = function (drawingObject, isFormDesignerToolbarVisible, isSetFormFieldMode) {\n        var passwordFieldSettings = this.pdfViewer.passwordFieldSettings;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(passwordFieldSettings.isReadOnly) && this.passwordFieldPropertyChanged.isReadOnlyChanged) {\n            drawingObject.isReadonly = passwordFieldSettings.isReadOnly;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(passwordFieldSettings.isRequired) && this.passwordFieldPropertyChanged.isRequiredChanged) {\n            drawingObject.isRequired = passwordFieldSettings.isRequired;\n        }\n        if (passwordFieldSettings.value && this.passwordFieldPropertyChanged.isValueChanged) {\n            drawingObject.value = passwordFieldSettings.value;\n        }\n        if ((passwordFieldSettings.backgroundColor && passwordFieldSettings.backgroundColor !== 'white') && this.passwordFieldPropertyChanged.isBackgroundColorChanged) {\n            drawingObject.backgroundColor = this.pdfViewer.enableHtmlSanitizer ?\n                _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.SanitizeHtmlHelper.sanitize(passwordFieldSettings.backgroundColor) : passwordFieldSettings.backgroundColor;\n        }\n        if ((passwordFieldSettings.borderColor && passwordFieldSettings.borderColor !== 'black') && this.passwordFieldPropertyChanged.isBorderColorChanged) {\n            drawingObject.borderColor = this.pdfViewer.enableHtmlSanitizer ?\n                _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.SanitizeHtmlHelper.sanitize(passwordFieldSettings.borderColor) : passwordFieldSettings.borderColor;\n        }\n        if ((passwordFieldSettings.alignment && passwordFieldSettings.alignment !== 'Left') && this.passwordFieldPropertyChanged.isAlignmentChanged) {\n            drawingObject.alignment = passwordFieldSettings.alignment;\n        }\n        if ((passwordFieldSettings.color && passwordFieldSettings.color !== 'black') && this.passwordFieldPropertyChanged.isColorChanged) {\n            drawingObject.color = this.pdfViewer.enableHtmlSanitizer ?\n                _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.SanitizeHtmlHelper.sanitize(passwordFieldSettings.color) : passwordFieldSettings.color;\n        }\n        if ((passwordFieldSettings.fontFamily && passwordFieldSettings.fontFamily !== 'Helvetica') && this.passwordFieldPropertyChanged.isFontFamilyChanged) {\n            drawingObject.fontFamily = this.pdfViewer.enableHtmlSanitizer ?\n                _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.SanitizeHtmlHelper.sanitize(passwordFieldSettings.fontFamily) : passwordFieldSettings.fontFamily;\n        }\n        if ((passwordFieldSettings.fontSize && passwordFieldSettings.fontSize !== 10) &&\n            this.passwordFieldPropertyChanged.isFontSizeChanged) {\n            drawingObject.fontSize = passwordFieldSettings.fontSize;\n        }\n        if (passwordFieldSettings.fontStyle && this.passwordFieldPropertyChanged.isFontStyleChanged) {\n            drawingObject.fontStyle = this.getFontStyleName(passwordFieldSettings.fontStyle, drawingObject);\n        }\n        if (passwordFieldSettings.name && this.passwordFieldPropertyChanged.isNameChanged) {\n            drawingObject.name = this.pdfViewer.enableHtmlSanitizer ?\n                _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.SanitizeHtmlHelper.sanitize(passwordFieldSettings.name) : passwordFieldSettings.name;\n        }\n        if (passwordFieldSettings.tooltip && this.passwordFieldPropertyChanged.isToolTipChanged) {\n            drawingObject.tooltip = this.pdfViewer.enableHtmlSanitizer ?\n                _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.SanitizeHtmlHelper.sanitize(passwordFieldSettings.tooltip) : passwordFieldSettings.tooltip;\n        }\n        if ((passwordFieldSettings.thickness && passwordFieldSettings.thickness !== 1) &&\n            this.passwordFieldPropertyChanged.isThicknessChanged) {\n            drawingObject.thickness = passwordFieldSettings.thickness;\n        }\n        if (passwordFieldSettings.maxLength && this.passwordFieldPropertyChanged.isMaxLengthChanged) {\n            drawingObject.maxLength = passwordFieldSettings.maxLength;\n        }\n        if (passwordFieldSettings.visibility && this.passwordFieldPropertyChanged.isVisibilityChanged) {\n            drawingObject.visibility = passwordFieldSettings.visibility;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(passwordFieldSettings.isPrint) && this.passwordFieldPropertyChanged.isPrintChanged) {\n            drawingObject.isPrint = passwordFieldSettings.isPrint;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(passwordFieldSettings.customData) && this.passwordFieldPropertyChanged.isCustomDataChanged) {\n            drawingObject.customData = passwordFieldSettings.customData;\n        }\n    };\n    FormDesigner.prototype.updateCheckBoxFieldSettingsProperties = function (drawingObject, isFormDesignerToolbarVisible, isSetFormFieldMode) {\n        var checkBoxFieldSettings = this.pdfViewer.checkBoxFieldSettings;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(checkBoxFieldSettings.isReadOnly) && this.checkBoxFieldPropertyChanged.isReadOnlyChanged) {\n            drawingObject.isReadonly = checkBoxFieldSettings.isReadOnly;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(checkBoxFieldSettings.isRequired) && this.checkBoxFieldPropertyChanged.isRequiredChanged) {\n            drawingObject.isRequired = checkBoxFieldSettings.isRequired;\n        }\n        if (checkBoxFieldSettings.value && this.checkBoxFieldPropertyChanged.isValueChanged) {\n            drawingObject.value = checkBoxFieldSettings.value;\n        }\n        if ((checkBoxFieldSettings.backgroundColor && checkBoxFieldSettings.backgroundColor !== 'white') && this.checkBoxFieldPropertyChanged.isBackgroundColorChanged) {\n            drawingObject.backgroundColor = this.pdfViewer.enableHtmlSanitizer ?\n                _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.SanitizeHtmlHelper.sanitize(checkBoxFieldSettings.backgroundColor) : checkBoxFieldSettings.backgroundColor;\n        }\n        if ((checkBoxFieldSettings.borderColor && checkBoxFieldSettings.borderColor !== 'black') && this.checkBoxFieldPropertyChanged.isBorderColorChanged) {\n            drawingObject.borderColor = this.pdfViewer.enableHtmlSanitizer ?\n                _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.SanitizeHtmlHelper.sanitize(checkBoxFieldSettings.borderColor) : checkBoxFieldSettings.borderColor;\n        }\n        if (checkBoxFieldSettings.name && this.checkBoxFieldPropertyChanged.isNameChanged) {\n            drawingObject.name = _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.SanitizeHtmlHelper.sanitize(checkBoxFieldSettings.name);\n        }\n        if (checkBoxFieldSettings.tooltip && this.checkBoxFieldPropertyChanged.isToolTipChanged) {\n            drawingObject.tooltip = this.pdfViewer.enableHtmlSanitizer ?\n                _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.SanitizeHtmlHelper.sanitize(checkBoxFieldSettings.tooltip) : checkBoxFieldSettings.tooltip;\n        }\n        if ((checkBoxFieldSettings.thickness && checkBoxFieldSettings.thickness !== 1) &&\n            this.checkBoxFieldPropertyChanged.isThicknessChanged) {\n            drawingObject.thickness = checkBoxFieldSettings.thickness;\n        }\n        if (checkBoxFieldSettings.visibility && this.checkBoxFieldPropertyChanged.isVisibilityChanged) {\n            drawingObject.visibility = checkBoxFieldSettings.visibility;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(checkBoxFieldSettings.isPrint) && this.checkBoxFieldPropertyChanged.isPrintChanged) {\n            drawingObject.isPrint = checkBoxFieldSettings.isPrint;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(checkBoxFieldSettings.isChecked) && this.checkBoxFieldPropertyChanged.isCheckedChanged) {\n            drawingObject.isChecked = checkBoxFieldSettings.isChecked;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(checkBoxFieldSettings.customData) && this.checkBoxFieldPropertyChanged.isCustomDataChanged) {\n            drawingObject.customData = checkBoxFieldSettings.customData;\n        }\n    };\n    FormDesigner.prototype.updateRadioButtonFieldSettingProperties = function (drawingObject, isFormDesignerToolbarVisible, isSetFormFieldMode) {\n        var radioButtonFieldSettings = this.pdfViewer.radioButtonFieldSettings;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(radioButtonFieldSettings.isReadOnly) && this.radioButtonFieldPropertyChanged.isReadOnlyChanged) {\n            drawingObject.isReadonly = radioButtonFieldSettings.isReadOnly;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(radioButtonFieldSettings.isRequired) && this.radioButtonFieldPropertyChanged.isRequiredChanged) {\n            drawingObject.isRequired = radioButtonFieldSettings.isRequired;\n        }\n        if (radioButtonFieldSettings.value && this.radioButtonFieldPropertyChanged.isValueChanged) {\n            drawingObject.value = radioButtonFieldSettings.value;\n        }\n        if ((radioButtonFieldSettings.backgroundColor && radioButtonFieldSettings.backgroundColor !== 'white') &&\n            this.radioButtonFieldPropertyChanged.isBackgroundColorChanged) {\n            drawingObject.backgroundColor = this.pdfViewer.enableHtmlSanitizer ?\n                _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.SanitizeHtmlHelper.sanitize(radioButtonFieldSettings.backgroundColor) : radioButtonFieldSettings.backgroundColor;\n        }\n        if ((radioButtonFieldSettings.borderColor && radioButtonFieldSettings.borderColor !== 'black') &&\n            this.radioButtonFieldPropertyChanged.isBorderColorChanged) {\n            drawingObject.borderColor = this.pdfViewer.enableHtmlSanitizer ? _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.SanitizeHtmlHelper.\n                sanitize(radioButtonFieldSettings.borderColor) : radioButtonFieldSettings.borderColor;\n        }\n        if (radioButtonFieldSettings.name && this.radioButtonFieldPropertyChanged.isNameChanged) {\n            drawingObject.name = this.pdfViewer.enableHtmlSanitizer ?\n                _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.SanitizeHtmlHelper.sanitize(radioButtonFieldSettings.name) : radioButtonFieldSettings.name;\n        }\n        if (radioButtonFieldSettings.tooltip && this.radioButtonFieldPropertyChanged.isToolTipChanged) {\n            drawingObject.tooltip = this.pdfViewer.enableHtmlSanitizer ?\n                _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.SanitizeHtmlHelper.sanitize(radioButtonFieldSettings.tooltip) : radioButtonFieldSettings.tooltip;\n        }\n        if ((radioButtonFieldSettings.thickness && radioButtonFieldSettings.thickness !== 1) &&\n            this.radioButtonFieldPropertyChanged.isThicknessChanged) {\n            drawingObject.thickness = radioButtonFieldSettings.thickness;\n        }\n        if (radioButtonFieldSettings.visibility && this.radioButtonFieldPropertyChanged.isVisibilityChanged) {\n            drawingObject.visibility = radioButtonFieldSettings.visibility;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(radioButtonFieldSettings.isPrint) && this.radioButtonFieldPropertyChanged.isPrintChanged) {\n            drawingObject.isPrint = radioButtonFieldSettings.isPrint;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(radioButtonFieldSettings.isSelected) && this.radioButtonFieldPropertyChanged.isSelectedChanged) {\n            drawingObject.isSelected = radioButtonFieldSettings.isSelected;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(radioButtonFieldSettings.customData) && this.radioButtonFieldPropertyChanged.isCustomDataChanged) {\n            drawingObject.customData = radioButtonFieldSettings.customData;\n        }\n    };\n    FormDesigner.prototype.updateDropdownFieldSettingsProperties = function (drawingObject, isFormDesignerToolbarVisible, isSetFormFieldMode) {\n        var dropdownFieldSettings = this.pdfViewer.DropdownFieldSettings;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(dropdownFieldSettings.isReadOnly) && this.dropdownFieldPropertyChanged.isReadOnlyChanged) {\n            drawingObject.isReadonly = dropdownFieldSettings.isReadOnly;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(dropdownFieldSettings.isRequired) && this.dropdownFieldPropertyChanged.isRequiredChanged) {\n            drawingObject.isRequired = dropdownFieldSettings.isRequired;\n        }\n        if ((dropdownFieldSettings.backgroundColor && dropdownFieldSettings.backgroundColor !== 'white') && this.dropdownFieldPropertyChanged.isBackgroundColorChanged) {\n            drawingObject.backgroundColor = this.pdfViewer.enableHtmlSanitizer ?\n                _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.SanitizeHtmlHelper.sanitize(dropdownFieldSettings.backgroundColor) : dropdownFieldSettings.backgroundColor;\n        }\n        if ((dropdownFieldSettings.borderColor && dropdownFieldSettings.borderColor !== 'black') && this.dropdownFieldPropertyChanged.isBorderColorChanged) {\n            drawingObject.borderColor = this.pdfViewer.enableHtmlSanitizer ?\n                _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.SanitizeHtmlHelper.sanitize(dropdownFieldSettings.borderColor) : dropdownFieldSettings.borderColor;\n        }\n        if ((dropdownFieldSettings.alignment && dropdownFieldSettings.alignment !== 'Left') && this.dropdownFieldPropertyChanged.isAlignmentChanged) {\n            drawingObject.alignment = dropdownFieldSettings.alignment;\n        }\n        if ((dropdownFieldSettings.color && dropdownFieldSettings.color !== 'black') && this.dropdownFieldPropertyChanged.isColorChanged) {\n            drawingObject.color = this.pdfViewer.enableHtmlSanitizer ?\n                _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.SanitizeHtmlHelper.sanitize(dropdownFieldSettings.color) : dropdownFieldSettings.color;\n        }\n        if ((dropdownFieldSettings.fontFamily && dropdownFieldSettings.fontFamily !== 'Helvetica') && this.dropdownFieldPropertyChanged.isFontFamilyChanged) {\n            drawingObject.fontFamily = _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.SanitizeHtmlHelper.sanitize(dropdownFieldSettings.fontFamily);\n        }\n        if ((dropdownFieldSettings.fontSize && dropdownFieldSettings.fontSize !== 10) &&\n            this.dropdownFieldPropertyChanged.isFontSizeChanged) {\n            drawingObject.fontSize = dropdownFieldSettings.fontSize;\n        }\n        if (dropdownFieldSettings.fontStyle && this.dropdownFieldPropertyChanged.isFontStyleChanged) {\n            drawingObject.fontStyle = this.getFontStyleName(dropdownFieldSettings.fontStyle, drawingObject);\n        }\n        if (dropdownFieldSettings.name && this.dropdownFieldPropertyChanged.isNameChanged) {\n            drawingObject.name = this.pdfViewer.enableHtmlSanitizer ?\n                _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.SanitizeHtmlHelper.sanitize(dropdownFieldSettings.name) : dropdownFieldSettings.name;\n        }\n        if (dropdownFieldSettings.tooltip && this.dropdownFieldPropertyChanged.isToolTipChanged) {\n            drawingObject.tooltip = this.pdfViewer.enableHtmlSanitizer ?\n                _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.SanitizeHtmlHelper.sanitize(dropdownFieldSettings.tooltip) : dropdownFieldSettings.tooltip;\n        }\n        if ((dropdownFieldSettings && dropdownFieldSettings.thickness !== 1) && this.dropdownFieldPropertyChanged.isThicknessChanged) {\n            drawingObject.thickness = dropdownFieldSettings.thickness;\n        }\n        if (dropdownFieldSettings.visibility && this.dropdownFieldPropertyChanged.isVisibilityChanged) {\n            drawingObject.visibility = dropdownFieldSettings.visibility;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(dropdownFieldSettings.isPrint) && this.dropdownFieldPropertyChanged.isPrintChanged) {\n            drawingObject.isPrint = dropdownFieldSettings.isPrint;\n        }\n        if (dropdownFieldSettings.options && this.dropdownFieldPropertyChanged.isOptionChanged) {\n            drawingObject.options = drawingObject.options && drawingObject.options.length > 0 ?\n                drawingObject.options : dropdownFieldSettings.options;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(dropdownFieldSettings.customData) && this.dropdownFieldPropertyChanged.isCustomDataChanged) {\n            drawingObject.customData = dropdownFieldSettings.customData;\n        }\n    };\n    FormDesigner.prototype.updatelistBoxFieldSettingsProperties = function (drawingObject, isFormDesignerToolbarVisible, isSetFormFieldMode) {\n        var listBoxFieldSettings = this.pdfViewer.listBoxFieldSettings;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(listBoxFieldSettings.isReadOnly) && this.listBoxFieldPropertyChanged.isReadOnlyChanged) {\n            drawingObject.isReadonly = listBoxFieldSettings.isReadOnly;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(listBoxFieldSettings.isRequired) && this.listBoxFieldPropertyChanged.isRequiredChanged) {\n            drawingObject.isRequired = listBoxFieldSettings.isRequired;\n        }\n        if ((listBoxFieldSettings.backgroundColor && listBoxFieldSettings.backgroundColor !== 'white') && this.listBoxFieldPropertyChanged.isBackgroundColorChanged) {\n            drawingObject.backgroundColor = this.pdfViewer.enableHtmlSanitizer ?\n                _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.SanitizeHtmlHelper.sanitize(listBoxFieldSettings.backgroundColor) : listBoxFieldSettings.backgroundColor;\n        }\n        if ((listBoxFieldSettings.borderColor && listBoxFieldSettings.borderColor !== 'black') && this.listBoxFieldPropertyChanged.isBorderColorChanged) {\n            drawingObject.borderColor = this.pdfViewer.enableHtmlSanitizer ?\n                _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.SanitizeHtmlHelper.sanitize(listBoxFieldSettings.borderColor) : listBoxFieldSettings.borderColor;\n        }\n        if ((listBoxFieldSettings.alignment && listBoxFieldSettings.alignment !== 'Left') && this.listBoxFieldPropertyChanged.isAlignmentChanged) {\n            drawingObject.alignment = listBoxFieldSettings.alignment;\n        }\n        if ((listBoxFieldSettings.color && listBoxFieldSettings.color !== 'black') && this.listBoxFieldPropertyChanged.isColorChanged) {\n            drawingObject.color = this.pdfViewer.enableHtmlSanitizer ?\n                _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.SanitizeHtmlHelper.sanitize(listBoxFieldSettings.color) : listBoxFieldSettings.color;\n        }\n        if ((listBoxFieldSettings.fontFamily && listBoxFieldSettings.fontFamily !== 'Helvetica') && this.listBoxFieldPropertyChanged.isFontFamilyChanged) {\n            drawingObject.fontFamily = this.pdfViewer.enableHtmlSanitizer ?\n                _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.SanitizeHtmlHelper.sanitize(listBoxFieldSettings.fontFamily) : listBoxFieldSettings.fontFamily;\n        }\n        if ((listBoxFieldSettings.fontSize && listBoxFieldSettings.fontSize !== 10) && this.listBoxFieldPropertyChanged.isFontSizeChanged) {\n            drawingObject.fontSize = listBoxFieldSettings.fontSize;\n        }\n        if (listBoxFieldSettings.fontStyle && this.listBoxFieldPropertyChanged.isFontStyleChanged) {\n            drawingObject.fontStyle = this.getFontStyleName(listBoxFieldSettings.fontStyle, drawingObject);\n        }\n        if (listBoxFieldSettings.name && this.listBoxFieldPropertyChanged.isNameChanged) {\n            drawingObject.name = this.pdfViewer.enableHtmlSanitizer ?\n                _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.SanitizeHtmlHelper.sanitize(listBoxFieldSettings.name) : listBoxFieldSettings.name;\n        }\n        if (listBoxFieldSettings.tooltip && this.listBoxFieldPropertyChanged.isToolTipChanged) {\n            drawingObject.tooltip = this.pdfViewer.enableHtmlSanitizer ?\n                _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.SanitizeHtmlHelper.sanitize(listBoxFieldSettings.tooltip) : listBoxFieldSettings.tooltip;\n        }\n        if ((listBoxFieldSettings.thickness && listBoxFieldSettings.thickness !== 1) &&\n            this.listBoxFieldPropertyChanged.isThicknessChanged) {\n            drawingObject.thickness = listBoxFieldSettings.thickness;\n        }\n        if (listBoxFieldSettings.visibility && this.listBoxFieldPropertyChanged.isVisibilityChanged) {\n            drawingObject.visibility = listBoxFieldSettings.visibility;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(listBoxFieldSettings.isPrint) && this.listBoxFieldPropertyChanged.isPrintChanged) {\n            drawingObject.isPrint = listBoxFieldSettings.isPrint;\n        }\n        if (listBoxFieldSettings.options && this.listBoxFieldPropertyChanged.isOptionChanged) {\n            drawingObject.options = drawingObject.options && drawingObject.options.length > 0 ?\n                drawingObject.options : listBoxFieldSettings.options;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(listBoxFieldSettings.customData) && this.listBoxFieldPropertyChanged.isCustomDataChanged) {\n            drawingObject.customData = listBoxFieldSettings.customData;\n        }\n    };\n    FormDesigner.prototype.updateSignInitialFieldProperties = function (signatureField, isInitialField, isFormDesignerToolbarVisible, isSetFormFieldMode) {\n        var initialFieldSettings = this.pdfViewer.initialFieldSettings;\n        var signatureFieldSettings = this.pdfViewer.signatureFieldSettings;\n        if (isInitialField) {\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(initialFieldSettings.isReadOnly) && this.initialFieldPropertyChanged.isReadOnlyChanged) {\n                signatureField.isReadonly = initialFieldSettings.isReadOnly;\n            }\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(initialFieldSettings.isRequired) &&\n                this.initialFieldPropertyChanged.isRequiredChanged && !this.pdfViewer.magnificationModule.isFormFieldPageZoomed) {\n                signatureField.isRequired = initialFieldSettings.isRequired;\n            }\n            if (initialFieldSettings.visibility && this.initialFieldPropertyChanged.isVisibilityChanged &&\n                !this.pdfViewer.magnificationModule.isFormFieldPageZoomed) {\n                signatureField.visibility = initialFieldSettings.visibility;\n            }\n            if (initialFieldSettings.tooltip && this.initialFieldPropertyChanged.isTooltipChanged &&\n                !this.pdfViewer.magnificationModule.isFormFieldPageZoomed) {\n                signatureField.tooltip = this.pdfViewer.enableHtmlSanitizer ?\n                    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.SanitizeHtmlHelper.sanitize(initialFieldSettings.tooltip) : initialFieldSettings.tooltip;\n            }\n            if ((!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(initialFieldSettings.thickness) && isSetFormFieldMode === true) &&\n                this.initialFieldPropertyChanged.isThicknessChanged) {\n                signatureField.thickness = initialFieldSettings.thickness;\n            }\n            if (initialFieldSettings.name && this.initialFieldPropertyChanged.isNameChanged &&\n                !this.pdfViewer.magnificationModule.isFormFieldPageZoomed) {\n                signatureField.name = this.pdfViewer.enableHtmlSanitizer ?\n                    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.SanitizeHtmlHelper.sanitize(initialFieldSettings.name) : initialFieldSettings.name;\n            }\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(initialFieldSettings.isPrint) &&\n                this.initialFieldPropertyChanged.isPrintChanged && !this.pdfViewer.magnificationModule.isFormFieldPageZoomed) {\n                signatureField.isPrint = initialFieldSettings.isPrint;\n            }\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(initialFieldSettings.customData) && this.initialFieldPropertyChanged.isCustomDataChanged) {\n                signatureField.customData = initialFieldSettings.customData;\n            }\n        }\n        else {\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(signatureFieldSettings.isReadOnly) && this.signatureFieldPropertyChanged.isReadOnlyChanged) {\n                signatureField.isReadonly = signatureFieldSettings.isReadOnly;\n            }\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(signatureFieldSettings.isRequired) &&\n                this.signatureFieldPropertyChanged.isRequiredChanged && !this.pdfViewer.magnificationModule.isFormFieldPageZoomed) {\n                signatureField.isRequired = signatureFieldSettings.isRequired;\n            }\n            if (signatureFieldSettings.visibility && this.signatureFieldPropertyChanged.isVisibilityChanged &&\n                !this.pdfViewer.magnificationModule.isFormFieldPageZoomed) {\n                signatureField.visibility = signatureFieldSettings.visibility;\n            }\n            if (signatureFieldSettings.tooltip && this.signatureFieldPropertyChanged.isTooltipChanged &&\n                !this.pdfViewer.magnificationModule.isFormFieldPageZoomed) {\n                signatureField.tooltip = this.pdfViewer.enableHtmlSanitizer ?\n                    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.SanitizeHtmlHelper.sanitize(signatureFieldSettings.tooltip) : signatureFieldSettings.tooltip;\n            }\n            if ((!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(signatureFieldSettings.thickness) && isSetFormFieldMode === true) &&\n                this.signatureFieldPropertyChanged.isThicknessChanged) {\n                signatureField.thickness = signatureFieldSettings.thickness;\n            }\n            if (signatureFieldSettings.name && this.signatureFieldPropertyChanged.isNameChanged &&\n                !this.pdfViewer.magnificationModule.isFormFieldPageZoomed) {\n                signatureField.name = this.pdfViewer.enableHtmlSanitizer ?\n                    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.SanitizeHtmlHelper.sanitize(signatureFieldSettings.name) : signatureFieldSettings.name;\n            }\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(signatureFieldSettings.isPrint) && this.signatureFieldPropertyChanged.isPrintChanged &&\n                !this.pdfViewer.magnificationModule.isFormFieldPageZoomed) {\n                signatureField.isPrint = signatureFieldSettings.isPrint;\n            }\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(signatureFieldSettings.customData) && this.signatureFieldPropertyChanged.isCustomDataChanged) {\n                signatureField.customData = signatureFieldSettings.customData;\n            }\n        }\n    };\n    /**\n     * @param {any} newSignatureFieldSettings - It describes about the new signature field settings\n     * @param {boolean} isInitialField - It describes about the isInitialField\n     * @private\n     * @returns {void}\n     */\n    FormDesigner.prototype.updateSignatureSettings = function (newSignatureFieldSettings, isInitialField) {\n        isInitialField = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(isInitialField) ? isInitialField : false;\n        if (isInitialField) {\n            this.initialFieldPropertyChanged.isReadOnlyChanged = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(newSignatureFieldSettings.isReadOnly);\n            this.initialFieldPropertyChanged.isRequiredChanged = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(newSignatureFieldSettings.isRequired);\n            this.initialFieldPropertyChanged.isVisibilityChanged = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(newSignatureFieldSettings.visibility);\n            this.initialFieldPropertyChanged.isTooltipChanged = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(newSignatureFieldSettings.tooltip);\n            this.initialFieldPropertyChanged.isNameChanged = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(newSignatureFieldSettings.name);\n            this.initialFieldPropertyChanged.isPrintChanged = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(newSignatureFieldSettings.isPrint);\n            this.initialFieldPropertyChanged.isThicknessChanged = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(newSignatureFieldSettings.thickness);\n            this.initialFieldPropertyChanged.isCustomDataChanged = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(newSignatureFieldSettings.customData);\n        }\n        else {\n            this.signatureFieldPropertyChanged.isReadOnlyChanged = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(newSignatureFieldSettings.isReadOnly);\n            this.signatureFieldPropertyChanged.isRequiredChanged = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(newSignatureFieldSettings.isRequired);\n            this.signatureFieldPropertyChanged.isVisibilityChanged = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(newSignatureFieldSettings.visibility);\n            this.signatureFieldPropertyChanged.isTooltipChanged = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(newSignatureFieldSettings.tooltip);\n            this.signatureFieldPropertyChanged.isNameChanged = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(newSignatureFieldSettings.name);\n            this.signatureFieldPropertyChanged.isPrintChanged = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(newSignatureFieldSettings.isPrint);\n            this.signatureFieldPropertyChanged.isThicknessChanged = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(newSignatureFieldSettings.thickness);\n            this.signatureFieldPropertyChanged.isCustomDataChanged = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(newSignatureFieldSettings.customData);\n        }\n    };\n    /**\n     * @param {any} textFieldSettings - It describes about the text field settings\n     * @private\n     * @returns {void}\n     */\n    FormDesigner.prototype.updateTextFieldSettings = function (textFieldSettings) {\n        this.textFieldPropertyChanged.isReadOnlyChanged = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(textFieldSettings.isReadOnly);\n        this.textFieldPropertyChanged.isRequiredChanged = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(textFieldSettings.isRequired);\n        this.textFieldPropertyChanged.isValueChanged = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(textFieldSettings.value);\n        this.textFieldPropertyChanged.isBackgroundColorChanged = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(textFieldSettings.backgroundColor);\n        this.textFieldPropertyChanged.isBorderColorChanged = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(textFieldSettings.borderColor);\n        this.textFieldPropertyChanged.isAlignmentChanged = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(textFieldSettings.alignment);\n        this.textFieldPropertyChanged.isColorChanged = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(textFieldSettings.color);\n        this.textFieldPropertyChanged.isFontFamilyChanged = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(textFieldSettings.fontFamily);\n        this.textFieldPropertyChanged.isFontSizeChanged = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(textFieldSettings.fontSize);\n        this.textFieldPropertyChanged.isFontStyleChanged = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(textFieldSettings.fontStyle);\n        this.textFieldPropertyChanged.isNameChanged = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(textFieldSettings.name);\n        this.textFieldPropertyChanged.isToolTipChanged = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(textFieldSettings.tooltip);\n        this.textFieldPropertyChanged.isThicknessChanged = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(textFieldSettings.thickness);\n        this.textFieldPropertyChanged.isMaxLengthChanged = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(textFieldSettings.maxLength);\n        this.textFieldPropertyChanged.isVisibilityChanged = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(textFieldSettings.visibility);\n        this.textFieldPropertyChanged.isPrintChanged = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(textFieldSettings.isPrint);\n        this.textFieldPropertyChanged.isMultilineChanged = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(textFieldSettings.isMultiline);\n        this.textFieldPropertyChanged.isCustomDataChanged = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(textFieldSettings.customData);\n    };\n    /**\n     * @param {any} passwordFieldSettings - It describes about the password field settings\n     * @private\n     * @returns {void}\n     */\n    FormDesigner.prototype.updatePasswordFieldSettings = function (passwordFieldSettings) {\n        this.passwordFieldPropertyChanged.isReadOnlyChanged = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(passwordFieldSettings.isReadOnly);\n        this.passwordFieldPropertyChanged.isRequiredChanged = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(passwordFieldSettings.isRequired);\n        this.passwordFieldPropertyChanged.isValueChanged = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(passwordFieldSettings.value);\n        this.passwordFieldPropertyChanged.isBackgroundColorChanged = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(passwordFieldSettings.backgroundColor);\n        this.passwordFieldPropertyChanged.isBorderColorChanged = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(passwordFieldSettings.borderColor);\n        this.passwordFieldPropertyChanged.isAlignmentChanged = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(passwordFieldSettings.alignment);\n        this.passwordFieldPropertyChanged.isColorChanged = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(passwordFieldSettings.color);\n        this.passwordFieldPropertyChanged.isFontFamilyChanged = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(passwordFieldSettings.fontFamily);\n        this.passwordFieldPropertyChanged.isFontSizeChanged = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(passwordFieldSettings.fontSize);\n        this.passwordFieldPropertyChanged.isFontStyleChanged = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(passwordFieldSettings.fontStyle);\n        this.passwordFieldPropertyChanged.isNameChanged = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(passwordFieldSettings.name);\n        this.passwordFieldPropertyChanged.isToolTipChanged = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(passwordFieldSettings.tooltip);\n        this.passwordFieldPropertyChanged.isThicknessChanged = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(passwordFieldSettings.thickness);\n        this.passwordFieldPropertyChanged.isMaxLengthChanged = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(passwordFieldSettings.maxLength);\n        this.passwordFieldPropertyChanged.isVisibilityChanged = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(passwordFieldSettings.visibility);\n        this.passwordFieldPropertyChanged.isPrintChanged = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(passwordFieldSettings.isPrint);\n        this.passwordFieldPropertyChanged.isCustomDataChanged = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(passwordFieldSettings.customData);\n    };\n    /**\n     * @param {any} checkBoxFieldSettings - It describes about the checkbox field settings\n     * @private\n     * @returns {void}\n     */\n    FormDesigner.prototype.updateCheckBoxFieldSettings = function (checkBoxFieldSettings) {\n        this.checkBoxFieldPropertyChanged.isReadOnlyChanged = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(checkBoxFieldSettings.isReadOnly);\n        this.checkBoxFieldPropertyChanged.isRequiredChanged = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(checkBoxFieldSettings.isRequired);\n        this.checkBoxFieldPropertyChanged.isBackgroundColorChanged = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(checkBoxFieldSettings.backgroundColor);\n        this.checkBoxFieldPropertyChanged.isBorderColorChanged = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(checkBoxFieldSettings.borderColor);\n        this.checkBoxFieldPropertyChanged.isNameChanged = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(checkBoxFieldSettings.name);\n        this.checkBoxFieldPropertyChanged.isValueChanged = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(checkBoxFieldSettings.value);\n        this.checkBoxFieldPropertyChanged.isToolTipChanged = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(checkBoxFieldSettings.tooltip);\n        this.checkBoxFieldPropertyChanged.isThicknessChanged = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(checkBoxFieldSettings.thickness);\n        this.checkBoxFieldPropertyChanged.isVisibilityChanged = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(checkBoxFieldSettings.visibility);\n        this.checkBoxFieldPropertyChanged.isPrintChanged = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(checkBoxFieldSettings.isPrint);\n        this.checkBoxFieldPropertyChanged.isCheckedChanged = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(checkBoxFieldSettings.isChecked);\n        this.checkBoxFieldPropertyChanged.isCustomDataChanged = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(checkBoxFieldSettings.customData);\n    };\n    /**\n     * @param {any} radioButtonFieldSettings - It describes about the radio button field settings\n     * @private\n     * @returns {void}\n     */\n    FormDesigner.prototype.updateRadioButtonFieldSettings = function (radioButtonFieldSettings) {\n        this.radioButtonFieldPropertyChanged.isReadOnlyChanged = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(radioButtonFieldSettings.isReadOnly);\n        this.radioButtonFieldPropertyChanged.isRequiredChanged = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(radioButtonFieldSettings.isRequired);\n        this.radioButtonFieldPropertyChanged.isBackgroundColorChanged = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(radioButtonFieldSettings.backgroundColor);\n        this.radioButtonFieldPropertyChanged.isBorderColorChanged = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(radioButtonFieldSettings.borderColor);\n        this.radioButtonFieldPropertyChanged.isNameChanged = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(radioButtonFieldSettings.name);\n        this.radioButtonFieldPropertyChanged.isValueChanged = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(radioButtonFieldSettings.value);\n        this.radioButtonFieldPropertyChanged.isToolTipChanged = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(radioButtonFieldSettings.tooltip);\n        this.radioButtonFieldPropertyChanged.isThicknessChanged = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(radioButtonFieldSettings.thickness);\n        this.radioButtonFieldPropertyChanged.isVisibilityChanged = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(radioButtonFieldSettings.visibility);\n        this.radioButtonFieldPropertyChanged.isPrintChanged = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(radioButtonFieldSettings.isPrint);\n        this.radioButtonFieldPropertyChanged.isSelectedChanged = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(radioButtonFieldSettings.isSelected);\n        this.radioButtonFieldPropertyChanged.isCustomDataChanged = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(radioButtonFieldSettings.customData);\n    };\n    /**\n     * @param {any} dropdownFieldSettings - It describes about the dropdown field settings\n     * @private\n     * @returns {void}\n     */\n    FormDesigner.prototype.updateDropDownFieldSettings = function (dropdownFieldSettings) {\n        this.dropdownFieldPropertyChanged.isReadOnlyChanged = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(dropdownFieldSettings.isReadOnly);\n        this.dropdownFieldPropertyChanged.isRequiredChanged = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(dropdownFieldSettings.isRequired);\n        this.dropdownFieldPropertyChanged.isValueChanged = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(dropdownFieldSettings.value);\n        this.dropdownFieldPropertyChanged.isBackgroundColorChanged = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(dropdownFieldSettings.backgroundColor);\n        this.dropdownFieldPropertyChanged.isBorderColorChanged = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(dropdownFieldSettings.borderColor);\n        this.dropdownFieldPropertyChanged.isAlignmentChanged = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(dropdownFieldSettings.alignment);\n        this.dropdownFieldPropertyChanged.isColorChanged = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(dropdownFieldSettings.color);\n        this.dropdownFieldPropertyChanged.isFontFamilyChanged = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(dropdownFieldSettings.fontFamily);\n        this.dropdownFieldPropertyChanged.isFontSizeChanged = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(dropdownFieldSettings.fontSize);\n        this.dropdownFieldPropertyChanged.isFontStyleChanged = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(dropdownFieldSettings.fontStyle);\n        this.dropdownFieldPropertyChanged.isNameChanged = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(dropdownFieldSettings.name);\n        this.dropdownFieldPropertyChanged.isToolTipChanged = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(dropdownFieldSettings.tooltip);\n        this.dropdownFieldPropertyChanged.isThicknessChanged = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(dropdownFieldSettings.thickness);\n        this.dropdownFieldPropertyChanged.isVisibilityChanged = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(dropdownFieldSettings.visibility);\n        this.dropdownFieldPropertyChanged.isPrintChanged = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(dropdownFieldSettings.isPrint);\n        this.dropdownFieldPropertyChanged.isOptionChanged = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(dropdownFieldSettings.options);\n        this.dropdownFieldPropertyChanged.isCustomDataChanged = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(dropdownFieldSettings.customData);\n    };\n    /**\n     * @param {any} listBoxFieldSettings - It describes about the listBoxField settings\n     * @private\n     * @returns {void}\n     */\n    FormDesigner.prototype.updateListBoxFieldSettings = function (listBoxFieldSettings) {\n        this.listBoxFieldPropertyChanged.isReadOnlyChanged = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(listBoxFieldSettings.isReadOnly);\n        this.listBoxFieldPropertyChanged.isRequiredChanged = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(listBoxFieldSettings.isRequired);\n        this.listBoxFieldPropertyChanged.isBackgroundColorChanged = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(listBoxFieldSettings.backgroundColor);\n        this.listBoxFieldPropertyChanged.isBorderColorChanged = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(listBoxFieldSettings.borderColor);\n        this.listBoxFieldPropertyChanged.isAlignmentChanged = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(listBoxFieldSettings.alignment);\n        this.listBoxFieldPropertyChanged.isColorChanged = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(listBoxFieldSettings.color);\n        this.listBoxFieldPropertyChanged.isFontFamilyChanged = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(listBoxFieldSettings.fontFamily);\n        this.listBoxFieldPropertyChanged.isFontSizeChanged = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(listBoxFieldSettings.fontSize);\n        this.listBoxFieldPropertyChanged.isFontStyleChanged = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(listBoxFieldSettings.fontStyle);\n        this.listBoxFieldPropertyChanged.isNameChanged = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(listBoxFieldSettings.name);\n        this.listBoxFieldPropertyChanged.isToolTipChanged = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(listBoxFieldSettings.tooltip);\n        this.listBoxFieldPropertyChanged.isThicknessChanged = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(listBoxFieldSettings.thickness);\n        this.listBoxFieldPropertyChanged.isVisibilityChanged = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(listBoxFieldSettings.visibility);\n        this.listBoxFieldPropertyChanged.isPrintChanged = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(listBoxFieldSettings.isPrint);\n        this.listBoxFieldPropertyChanged.isOptionChanged = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(listBoxFieldSettings.options);\n        this.listBoxFieldPropertyChanged.isCustomDataChanged = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(listBoxFieldSettings.customData);\n    };\n    FormDesigner.prototype.getFontStyleName = function (fontStyle, drawingObject) {\n        var fontStyleName = 'None';\n        if (fontStyle === 1) {\n            drawingObject.font.isBold = true;\n            fontStyleName = 'Bold';\n        }\n        if (fontStyle === 2) {\n            drawingObject.font.isItalic = true;\n            fontStyleName = 'Italic';\n        }\n        if (fontStyle === 3) {\n            drawingObject.font.isBold = true;\n            drawingObject.font.isItalic = true;\n            fontStyleName = 'Bold Italic';\n        }\n        if (fontStyle === 4) {\n            drawingObject.font.isUnderline = true;\n            fontStyleName = 'Underline';\n        }\n        if (fontStyle === 5) {\n            drawingObject.font.isBold = true;\n            drawingObject.font.isUnderline = true;\n            fontStyleName = 'Bold Underline';\n        }\n        if (fontStyle === 6) {\n            drawingObject.font.isUnderline = true;\n            drawingObject.font.isItalic = true;\n            fontStyleName = 'Underline Italic';\n        }\n        if (fontStyle === 7) {\n            drawingObject.font.isBold = true;\n            drawingObject.font.isItalic = true;\n            drawingObject.font.isUnderline = true;\n            fontStyleName = 'Bold Italic Underline';\n        }\n        if (fontStyle === 8) {\n            drawingObject.font.isStrikeout = true;\n            fontStyleName = 'Strikethrough';\n        }\n        if (fontStyle === 9) {\n            drawingObject.font.isBold = true;\n            drawingObject.font.isStrikeout = true;\n            fontStyleName = 'Bold Strikethrough';\n        }\n        if (fontStyle === 10) {\n            drawingObject.font.isItalic = true;\n            drawingObject.font.isStrikeout = true;\n            fontStyleName = 'Italic Strikethrough';\n        }\n        if (fontStyle === 11) {\n            drawingObject.font.isBold = true;\n            drawingObject.font.isItalic = true;\n            drawingObject.font.isStrikeout = true;\n            fontStyleName = 'Bold Italic Strikethrough';\n        }\n        if (fontStyle === 12) {\n            drawingObject.font.isUnderline = true;\n            drawingObject.font.isStrikeout = true;\n            fontStyleName = 'Underline Strikethrough';\n        }\n        if (fontStyle === 13) {\n            drawingObject.font.isBold = true;\n            drawingObject.font.isUnderline = true;\n            drawingObject.font.isStrikeout = true;\n            fontStyleName = 'Bold Underline Strikethrough';\n        }\n        if (fontStyle === 14) {\n            drawingObject.font.isItalic = true;\n            drawingObject.font.isUnderline = true;\n            drawingObject.font.isStrikeout = true;\n            fontStyleName = 'Italic Underline Strikethrough';\n        }\n        if (fontStyle === 15) {\n            drawingObject.font.isBold = true;\n            drawingObject.font.isItalic = true;\n            drawingObject.font.isUnderline = true;\n            drawingObject.font.isStrikeout = true;\n            fontStyleName = 'Bold Italic Underline Strikethrough';\n        }\n        return fontStyleName;\n    };\n    FormDesigner.prototype.getAlignment = function (alignment) {\n        var align;\n        if (alignment === 'left') {\n            align = 'left';\n        }\n        else if (alignment === 'right') {\n            align = 'right';\n        }\n        else if (alignment === 'center') {\n            align = 'center';\n        }\n        this.formFieldAlign = align;\n    };\n    FormDesigner.prototype.getFontStyle = function (font) {\n        if (font.isBold) {\n            this.formFieldBold = 'bold';\n        }\n        if (font.isItalic) {\n            this.formFieldItalic = 'italic';\n        }\n        if (font.isUnderline) {\n            this.formFieldUnderline = 'underline';\n        }\n        if (font.isStrikeout) {\n            this.formFieldStrikeOut = 'line-through';\n        }\n    };\n    return FormDesigner;\n}());\n\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-pdfviewer/src/pdfviewer/form-designer/form-designer.js?");

/***/ })

}]);