"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkej2_vue_samples"] = self["webpackChunkej2_vue_samples"] || []).push([["chunk-vendors-node_modules_syncfusion_ej2-gantt_src_gantt_export_pdf-base_pdf-grid-table_js-60221b50"],{

/***/ "./node_modules/@syncfusion/ej2-gantt/src/gantt/export/pdf-base/pdf-grid-table.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-gantt/src/gantt/export/pdf-base/pdf-grid-table.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PdfTreeGridCell: () => (/* binding */ PdfTreeGridCell),\n/* harmony export */   PdfTreeGridCellCollection: () => (/* binding */ PdfTreeGridCellCollection),\n/* harmony export */   PdfTreeGridColumn: () => (/* binding */ PdfTreeGridColumn),\n/* harmony export */   PdfTreeGridColumnCollection: () => (/* binding */ PdfTreeGridColumnCollection),\n/* harmony export */   PdfTreeGridHeaderCollection: () => (/* binding */ PdfTreeGridHeaderCollection),\n/* harmony export */   PdfTreeGridRow: () => (/* binding */ PdfTreeGridRow),\n/* harmony export */   PdfTreeGridRowCollection: () => (/* binding */ PdfTreeGridRowCollection)\n/* harmony export */ });\n/* harmony import */ var _pdf_treegrid__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../pdf-treegrid */ \"./node_modules/@syncfusion/ej2-gantt/src/gantt/export/pdf-treegrid.js\");\n/* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @syncfusion/ej2-base */ \"./node_modules/@syncfusion/ej2-base/index.js\");\n/* harmony import */ var _syncfusion_ej2_pdf_export__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @syncfusion/ej2-pdf-export */ \"./node_modules/@syncfusion/ej2-pdf-export/index.js\");\n\n\n\n\n\n/**@hidden*/\nvar PdfTreeGridCell = /** @class */ (function () {\n    function PdfTreeGridCell(row) {\n        this.cellWidth = 0;\n        this.cellHeight = 0;\n        /** @private */\n        this.finishedDrawingCell = true;\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(row)) {\n            this.rowSpan = 1;\n            this.columnSpan = 1;\n        }\n        else {\n            this.row = row;\n        }\n        this.style = {};\n    }\n    Object.defineProperty(PdfTreeGridCell.prototype, \"height\", {\n        /**\n         * Gets the `height` of the PdfTreeGrid cell.[Read-Only].\n         *\n         * @returns {number} .\n         * @private\n         */\n        get: function () {\n            if (this.cellHeight === 0) {\n                this.cellHeight = this.measureHeight();\n            }\n            return this.cellHeight;\n        },\n        set: function (value) {\n            this.cellHeight = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfTreeGridCell.prototype, \"width\", {\n        /**\n         * Gets the `width` of the PdfTreeGrid cell.[Read-Only].\n         *\n         * @returns {number} .\n         * @private\n         */\n        get: function () {\n            if (this.cellWidth === 0) {\n                this.cellWidth = this.measureWidth();\n            }\n            return Math.round(this.cellWidth);\n        },\n        set: function (value) {\n            this.cellWidth = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    PdfTreeGridCell.prototype.measureWidth = function () {\n        var width = 0;\n        var layouter = new _syncfusion_ej2_pdf_export__WEBPACK_IMPORTED_MODULE_2__.PdfStringLayouter();\n        if (typeof this.value === 'string') {\n            /* eslint-disable-next-line */\n            var font = new _syncfusion_ej2_pdf_export__WEBPACK_IMPORTED_MODULE_2__.PdfStandardFont(this.row.treegrid.ganttStyle.fontFamily, this.style.fontSize, this.style.fontStyle);\n            if (this.row.isParentRow) {\n                font = new _syncfusion_ej2_pdf_export__WEBPACK_IMPORTED_MODULE_2__.PdfStandardFont(this.row.treegrid.ganttStyle.fontFamily, this.style.fontSize, _syncfusion_ej2_pdf_export__WEBPACK_IMPORTED_MODULE_2__.PdfFontStyle.Bold);\n            }\n            else {\n                font = new _syncfusion_ej2_pdf_export__WEBPACK_IMPORTED_MODULE_2__.PdfStandardFont(this.row.treegrid.ganttStyle.fontFamily, this.style.fontSize, this.style.fontStyle);\n            }\n            if (this.row.treegrid.ganttStyle.font) {\n                font = this.row.treegrid.ganttStyle.font;\n            }\n            /* eslint-disable-next-line */\n            var slr = layouter.layout(this.value, font, this.style.format, new _syncfusion_ej2_pdf_export__WEBPACK_IMPORTED_MODULE_2__.SizeF(Number.MAX_VALUE, Number.MAX_VALUE), false, new _syncfusion_ej2_pdf_export__WEBPACK_IMPORTED_MODULE_2__.SizeF(0, 0));\n            width += slr.actualSize.width;\n            width += (this.style.borders.left.width + this.style.borders.right.width) * 2;\n        }\n        if (typeof this.row.treegrid.style.cellPadding.left !== 'undefined' && this.row.treegrid.style.cellPadding.hasLeftPad) {\n            width += this.row.treegrid.style.cellPadding.left;\n        }\n        if (typeof this.row.treegrid.style.cellPadding.right !== 'undefined' && this.row.treegrid.style.cellPadding.hasRightPad) {\n            width += this.row.treegrid.style.cellPadding.right;\n        }\n        width += this.row.treegrid.style.cellSpacing;\n        return width;\n    };\n    /**\n     * @returns {number} .\n     * @private\n     */\n    /* eslint-disable */\n    PdfTreeGridCell.prototype.measureHeight = function () {\n        var rowHeight = this.row.treegrid.rowHeight;\n        var height = 0;\n        var width = this.calculateWidth();\n        width -= this.row.treegrid.style.cellPadding.right + this.row.treegrid.style.cellPadding.left;\n        width -= this.style.borders ? this.style.borders.left.width + this.style.borders.right.width : 0;\n        var layouter = new _syncfusion_ej2_pdf_export__WEBPACK_IMPORTED_MODULE_2__.PdfStringLayouter();\n        if (typeof this.value === 'string' || typeof this.remainingString === 'string') {\n            var currentValue = this.value;\n            if (!this.finishedDrawingCell) {\n                currentValue = !((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(this.remainingString) || this.remainingString === '') ? this.remainingString : this.value;\n            }\n            var font = null;\n            if (this.row.isParentRow) {\n                font = new _syncfusion_ej2_pdf_export__WEBPACK_IMPORTED_MODULE_2__.PdfStandardFont(this.row.treegrid.ganttStyle.fontFamily, this.style.fontSize, _syncfusion_ej2_pdf_export__WEBPACK_IMPORTED_MODULE_2__.PdfFontStyle.Bold);\n            }\n            else {\n                font = new _syncfusion_ej2_pdf_export__WEBPACK_IMPORTED_MODULE_2__.PdfStandardFont(this.row.treegrid.ganttStyle.fontFamily, this.style.fontSize, this.style.fontStyle);\n            }\n            if (this.row.treegrid.ganttStyle.font) {\n                font = this.row.treegrid.ganttStyle.font;\n            }\n            /* eslint-disable */\n            var slr = layouter.layout(currentValue, font, this.style.format, new _syncfusion_ej2_pdf_export__WEBPACK_IMPORTED_MODULE_2__.SizeF(width - 10, 0), false, new _syncfusion_ej2_pdf_export__WEBPACK_IMPORTED_MODULE_2__.SizeF(0, 0));\n            var value = Math.max(slr.lineHeight, slr.actualSize.height);\n            if (currentValue.length > 80) {\n                height += value + 20;\n            }\n            else {\n                height += value + (slr.size.height / 2);\n            }\n            height += (this.style.borders.top.width + this.style.borders.bottom.width) * 2;\n        }\n        height += this.row.treegrid.style.cellPadding.top + this.row.treegrid.style.cellPadding.bottom;\n        height += this.row.treegrid.style.cellSpacing;\n        return height > rowHeight ? height : rowHeight;\n    };\n    /* eslint-enable */\n    PdfTreeGridCell.prototype.calculateWidth = function () {\n        var cellIndex = this.row.cells.indexOf(this);\n        var columnSpan = this.columnSpan;\n        var width = 0;\n        for (var i = 0; i < columnSpan; i++) {\n            width += this.row.treegrid.columns.getColumn(cellIndex + i) ? this.row.treegrid.columns.getColumn(cellIndex + i).width : 0;\n        }\n        if (this.row.treegrid.columns.getColumn(cellIndex) && this.row.treegrid.columns.getColumn(cellIndex).isTreeColumn) {\n            width -= (this.row.level * 10);\n        }\n        return width;\n    };\n    /**\n     * `Draws` the specified graphics.\n     *\n     * @param {PdfGraphics} graphics .\n     * @param {RectangleF} bounds .\n     * @param {boolean} cancelSubsequentSpans .\n     * @param {number} leftAdjustment .\n     * @returns {PdfStringLayoutResult} .\n     * @private\n     */\n    PdfTreeGridCell.prototype.draw = function (graphics, bounds, cancelSubsequentSpans, leftAdjustment) {\n        var result = null;\n        var padding = 10;\n        // if (cancelSubsequentSpans) {\n        //     // Cancel all subsequent cell spans, if no space exists.\n        //     const currentCellIndex: number = this.row.cells.indexOf(this);\n        //     for (let i: number = currentCellIndex + 1; i <= currentCellIndex + this.columnSpan; i++) {\n        //         this.row.cells.getCell(i).isCellMergeContinue = false;\n        //         this.row.cells.getCell(i).isRowMergeContinue = false;\n        //     }\n        //     this.columnSpan = 1;\n        // }\n        // Skip cells which were already covered by span map.\n        // if (this.isCellMergeContinue || this.isRowMergeContinue) {\n        //     if (this.isCellMergeContinue && this.row.treegrid.style.allowHorizontalOverflow) {\n        //         if ((this.row.rowOverflowIndex > 0 && (this.row.cells.indexOf(this) !== this.row.rowOverflowIndex + 1)) ||\n        //             (this.row.rowOverflowIndex === 0 && this.isCellMergeContinue)) {\n        //             return result;\n        //         } else {\n        //             return result;\n        //         }\n        //     }\n        // }\n        //bounds = this.adjustContentLayoutArea(bounds);\n        this.drawCellBackground(graphics, bounds);\n        var textPen = null;\n        var textBrush = new _syncfusion_ej2_pdf_export__WEBPACK_IMPORTED_MODULE_2__.PdfSolidBrush(this.style.fontColor);\n        var font = null;\n        if (this.row.isParentRow) {\n            var fontStyle = _syncfusion_ej2_pdf_export__WEBPACK_IMPORTED_MODULE_2__.PdfFontStyle.Bold;\n            if (this.style.fontStyle) {\n                fontStyle = this.style.fontStyle;\n            }\n            font = new _syncfusion_ej2_pdf_export__WEBPACK_IMPORTED_MODULE_2__.PdfStandardFont(this.row.treegrid.ganttStyle.fontFamily, this.style.fontSize, fontStyle);\n        }\n        else {\n            font = new _syncfusion_ej2_pdf_export__WEBPACK_IMPORTED_MODULE_2__.PdfStandardFont(this.row.treegrid.ganttStyle.fontFamily, this.style.fontSize, this.style.fontStyle);\n        }\n        if (this.row.treegrid.ganttStyle.font) {\n            font = this.row.treegrid.ganttStyle.font;\n        }\n        var innerLayoutArea = bounds;\n        if (!this.isHeaderCell) {\n            /* eslint-disable-next-line */\n            innerLayoutArea.x = innerLayoutArea.x;\n            /* eslint-disable-next-line */\n            innerLayoutArea.width = innerLayoutArea.width;\n        }\n        if (innerLayoutArea.height >= graphics.clientSize.height) {\n            // To break row to next page\n            if (this.row.treegrid.allowRowBreakAcrossPages) {\n                innerLayoutArea.height -= innerLayoutArea.y;\n                bounds.height -= bounds.y;\n            }\n            else {\n                innerLayoutArea.height = graphics.clientSize.height;\n                bounds.height = graphics.clientSize.height;\n            }\n        }\n        innerLayoutArea = this.adjustContentLayoutArea(innerLayoutArea);\n        if (this.image && this.value) {\n            var imageBounds = void 0;\n            if (this.image.width <= innerLayoutArea.width) {\n                imageBounds = new _syncfusion_ej2_pdf_export__WEBPACK_IMPORTED_MODULE_2__.RectangleF(innerLayoutArea.x, innerLayoutArea.y, this.image.width, this.image.height);\n            }\n            else {\n                imageBounds = innerLayoutArea;\n            }\n            graphics.drawImage(this.image, imageBounds.x, imageBounds.y - 5, imageBounds.width, imageBounds.height);\n            var temp = null;\n            // font = new PdfStandardFont(this.row.treegrid.ganttStyle.fontFamily, this.style.fontSize, this.style.fontStyle);\n            var customisedFont = void 0;\n            var fontStyles = this.fontStyle;\n            if (!fontStyles) {\n                fontStyles = this.style;\n            }\n            var newFont = new _syncfusion_ej2_pdf_export__WEBPACK_IMPORTED_MODULE_2__.PdfStandardFont(fontStyles.fontFamily, fontStyles.fontSize, fontStyles.fontStyle);\n            if (fontStyles.fontFamily) {\n                customisedFont = newFont;\n            }\n            else {\n                customisedFont = font;\n            }\n            var customisedBrush = textBrush;\n            if (this.row.treegrid.ganttStyle.cell.fontBrush) {\n                customisedBrush = new _syncfusion_ej2_pdf_export__WEBPACK_IMPORTED_MODULE_2__.PdfSolidBrush(this.row.treegrid.ganttStyle.cell.fontBrush);\n            }\n            if (this.row.treegrid.ganttStyle.cell.format.alignment && !this.isHeaderCell) {\n                this.style.format.alignment = this.row.treegrid.ganttStyle.cell.format.alignment;\n            }\n            if (this.finishedDrawingCell) {\n                temp = (this.remainingString === '') ? this.remainingString : this.value;\n                /* eslint-disable-next-line */\n                graphics.drawString(temp, customisedFont, textPen, customisedBrush, (innerLayoutArea.x + leftAdjustment + (this.isHeaderCell && imageBounds.width ? imageBounds.width + 8 : 0)), this.isHeaderCell ? innerLayoutArea.y - 16 : innerLayoutArea.y, (innerLayoutArea.width - leftAdjustment - padding), (innerLayoutArea.height - padding), this.style.format);\n            }\n            else {\n                /* eslint-disable-next-line */\n                graphics.drawString(this.remainingString, customisedFont, textPen, customisedBrush, (innerLayoutArea.x + leftAdjustment), this.isHeaderCell ? innerLayoutArea.y - 16 : innerLayoutArea.y, this.style.format);\n            }\n            result = graphics.stringLayoutResult;\n        }\n        else if (typeof this.value === 'string' || typeof this.remainingString === 'string') {\n            var temp = null;\n            var customisedFont = void 0;\n            var newFont = new _syncfusion_ej2_pdf_export__WEBPACK_IMPORTED_MODULE_2__.PdfStandardFont(this.style.fontFamily, this.style.fontSize, this.style.fontStyle);\n            if (this.style.fontFamily) {\n                customisedFont = newFont;\n            }\n            else {\n                customisedFont = font;\n            }\n            var customisedBrush = textBrush;\n            if (this.row.treegrid.ganttStyle.cell.fontBrush) {\n                customisedBrush = new _syncfusion_ej2_pdf_export__WEBPACK_IMPORTED_MODULE_2__.PdfSolidBrush(this.row.treegrid.ganttStyle.cell.fontBrush);\n            }\n            if (this.row.treegrid.ganttStyle.cell.format.alignment && !this.isHeaderCell) {\n                this.style.format.alignment = this.row.treegrid.ganttStyle.cell.format.alignment;\n            }\n            if (this.finishedDrawingCell) {\n                temp = (this.remainingString === '') ? this.remainingString : this.value;\n                /* eslint-disable-next-line */\n                graphics.drawString(temp, customisedFont, textPen, customisedBrush, (innerLayoutArea.x + leftAdjustment), this.isHeaderCell ? innerLayoutArea.y - 16 : innerLayoutArea.y - 3, (innerLayoutArea.width - leftAdjustment - padding), (innerLayoutArea.height - padding), this.style.format);\n            }\n            else {\n                /* eslint-disable-next-line */\n                graphics.drawString(this.remainingString, customisedFont, textPen, customisedBrush, (innerLayoutArea.x + leftAdjustment), this.isHeaderCell ? innerLayoutArea.y - 16 : innerLayoutArea.y, this.style.format);\n            }\n            result = graphics.stringLayoutResult;\n        }\n        else if (this.value instanceof _syncfusion_ej2_pdf_export__WEBPACK_IMPORTED_MODULE_2__.PdfImage || this.value instanceof _syncfusion_ej2_pdf_export__WEBPACK_IMPORTED_MODULE_2__.PdfBitmap) {\n            var imageBounds = void 0;\n            if (this.value.width <= innerLayoutArea.width) {\n                imageBounds = new _syncfusion_ej2_pdf_export__WEBPACK_IMPORTED_MODULE_2__.RectangleF(innerLayoutArea.x, innerLayoutArea.y, this.value.width, innerLayoutArea.height);\n            }\n            else {\n                imageBounds = innerLayoutArea;\n            }\n            graphics.drawImage(this.value, imageBounds.x, imageBounds.y - 10, imageBounds.width, imageBounds.height);\n        }\n        else if (this.value instanceof _syncfusion_ej2_pdf_export__WEBPACK_IMPORTED_MODULE_2__.PdfTextWebLink) {\n            this.value.draw(graphics.currentPage, innerLayoutArea);\n        }\n        if (this.style.borders !== null) {\n            this.drawCellBorder(graphics, bounds);\n        }\n        return result;\n    };\n    /**\n     * Draw the `cell background`.\n     *\n     * @param {PdfGraphics} graphics .\n     * @param {RectangleF} bounds .\n     * @returns {void} .\n     * @private\n     */\n    PdfTreeGridCell.prototype.drawCellBackground = function (graphics, bounds) {\n        var backgroundBrush = new _syncfusion_ej2_pdf_export__WEBPACK_IMPORTED_MODULE_2__.PdfSolidBrush(this.style.backgroundColor);\n        if (backgroundBrush !== null) {\n            graphics.save();\n            graphics.drawRectangle(backgroundBrush, bounds.x, bounds.y, bounds.width, bounds.height);\n            graphics.restore();\n        }\n        // if (this.style.backgroundImage !== null) {\n        //     let image: PdfImage = this.getBackgroundImage();\n        //     graphics.drawImage(this.style.backgroundImage, bounds.x, bounds.y, bounds.width, bounds.height);\n        // }\n    };\n    /**\n     * `Adjusts the text layout area`.\n     *\n     * @param {RectangleF} bounds .\n     * @returns {RectangleF} .\n     * @private\n     */\n    PdfTreeGridCell.prototype.adjustContentLayoutArea = function (bounds) {\n        //Add Padding value to its Cell Bounds\n        var returnBounds = new _syncfusion_ej2_pdf_export__WEBPACK_IMPORTED_MODULE_2__.RectangleF(new _syncfusion_ej2_pdf_export__WEBPACK_IMPORTED_MODULE_2__.PointF(bounds.x, bounds.y), new _syncfusion_ej2_pdf_export__WEBPACK_IMPORTED_MODULE_2__.SizeF(bounds.width, bounds.height));\n        var cellPadding = this.style.padding;\n        if (this.value instanceof _pdf_treegrid__WEBPACK_IMPORTED_MODULE_0__.PdfTreeGrid) {\n            var size = this.value.size;\n            if (this.style.format.alignment === _syncfusion_ej2_pdf_export__WEBPACK_IMPORTED_MODULE_2__.PdfTextAlignment.Center) {\n                returnBounds.x += cellPadding.left + (returnBounds.width - size.width) / 2;\n                returnBounds.y += cellPadding.top + (returnBounds.height - size.height) / 2;\n            }\n            else if (this.style.format.alignment === _syncfusion_ej2_pdf_export__WEBPACK_IMPORTED_MODULE_2__.PdfTextAlignment.Left) {\n                returnBounds.x += cellPadding.left;\n                returnBounds.y += cellPadding.top;\n            }\n            else if (this.style.format.alignment === _syncfusion_ej2_pdf_export__WEBPACK_IMPORTED_MODULE_2__.PdfTextAlignment.Right) {\n                returnBounds.x += cellPadding.left + (returnBounds.width - size.width);\n                returnBounds.y += cellPadding.top;\n            }\n        }\n        else {\n            returnBounds.x += cellPadding.left;\n            returnBounds.y += cellPadding.top;\n        }\n        return returnBounds;\n    };\n    /**\n     * @param {PdfGraphics} graphics .\n     * @param {RectangleF} bounds .\n     * @returns {void} .\n     * @private\n     */\n    PdfTreeGridCell.prototype.drawCellBorder = function (graphics, bounds) {\n        if (this.row.treegrid.style.borderOverlapStyle === _syncfusion_ej2_pdf_export__WEBPACK_IMPORTED_MODULE_2__.PdfBorderOverlapStyle.Inside) {\n            bounds.x += this.style.borders.left.width;\n            bounds.y += this.style.borders.top.width;\n            bounds.width -= this.style.borders.right.width;\n            bounds.height -= this.style.borders.bottom.width;\n        }\n        if (this.style.borders.isAll && this.isHeaderCell) {\n            graphics.drawRectangle(this.style.borders.left, bounds.x, bounds.y, bounds.width, bounds.height);\n            graphics.restore();\n            return;\n        }\n        else {\n            var p1 = new _syncfusion_ej2_pdf_export__WEBPACK_IMPORTED_MODULE_2__.PointF(bounds.x, bounds.y + bounds.height);\n            var p2 = new _syncfusion_ej2_pdf_export__WEBPACK_IMPORTED_MODULE_2__.PointF(bounds.x, bounds.y);\n            var pen = this.style.borders.left;\n            pen.lineCap = (this.style.borders.left.dashStyle === _syncfusion_ej2_pdf_export__WEBPACK_IMPORTED_MODULE_2__.PdfDashStyle.Solid) ? _syncfusion_ej2_pdf_export__WEBPACK_IMPORTED_MODULE_2__.PdfLineCap.Square : pen.lineCap;\n            graphics.drawLine(pen, p1, p2);\n            graphics.restore();\n            p1 = new _syncfusion_ej2_pdf_export__WEBPACK_IMPORTED_MODULE_2__.PointF(bounds.x + bounds.width, bounds.y);\n            p2 = new _syncfusion_ej2_pdf_export__WEBPACK_IMPORTED_MODULE_2__.PointF(bounds.x + bounds.width, bounds.y + bounds.height);\n            pen = this.style.borders.right;\n            if ((bounds.x + bounds.width) > (graphics.clientSize.width - (pen.width / 2))) {\n                p1 = new _syncfusion_ej2_pdf_export__WEBPACK_IMPORTED_MODULE_2__.PointF(graphics.clientSize.width - (pen.width / 2), bounds.y);\n                p2 = new _syncfusion_ej2_pdf_export__WEBPACK_IMPORTED_MODULE_2__.PointF(graphics.clientSize.width - (pen.width / 2), bounds.y + bounds.height);\n            }\n            pen.lineCap = (this.style.borders.right.dashStyle === _syncfusion_ej2_pdf_export__WEBPACK_IMPORTED_MODULE_2__.PdfDashStyle.Solid) ? _syncfusion_ej2_pdf_export__WEBPACK_IMPORTED_MODULE_2__.PdfLineCap.Square : pen.lineCap;\n            graphics.drawLine(pen, p1, p2);\n            graphics.restore();\n            p1 = new _syncfusion_ej2_pdf_export__WEBPACK_IMPORTED_MODULE_2__.PointF(bounds.x, bounds.y);\n            p2 = new _syncfusion_ej2_pdf_export__WEBPACK_IMPORTED_MODULE_2__.PointF(bounds.x + bounds.width, bounds.y);\n            pen = this.style.borders.top;\n            pen.lineCap = (this.style.borders.top.dashStyle === _syncfusion_ej2_pdf_export__WEBPACK_IMPORTED_MODULE_2__.PdfDashStyle.Solid) ? _syncfusion_ej2_pdf_export__WEBPACK_IMPORTED_MODULE_2__.PdfLineCap.Square : pen.lineCap;\n            graphics.drawLine(pen, p1, p2);\n            graphics.restore();\n            p1 = new _syncfusion_ej2_pdf_export__WEBPACK_IMPORTED_MODULE_2__.PointF(bounds.x + bounds.width, bounds.y + bounds.height);\n            p2 = new _syncfusion_ej2_pdf_export__WEBPACK_IMPORTED_MODULE_2__.PointF(bounds.x, bounds.y + bounds.height);\n            pen = this.style.borders.bottom;\n            if (bounds.y + bounds.height > graphics.clientSize.height - pen.width / 2) {\n                p1 = new _syncfusion_ej2_pdf_export__WEBPACK_IMPORTED_MODULE_2__.PointF(bounds.x + bounds.width, graphics.clientSize.height - pen.width / 2);\n                p2 = new _syncfusion_ej2_pdf_export__WEBPACK_IMPORTED_MODULE_2__.PointF(bounds.x, graphics.clientSize.height - pen.width / 2);\n            }\n            pen.lineCap = (this.style.borders.bottom.dashStyle === _syncfusion_ej2_pdf_export__WEBPACK_IMPORTED_MODULE_2__.PdfDashStyle.Solid) ? _syncfusion_ej2_pdf_export__WEBPACK_IMPORTED_MODULE_2__.PdfLineCap.Square : pen.lineCap;\n            graphics.drawLine(pen, p1, p2);\n            graphics.restore();\n        }\n    };\n    return PdfTreeGridCell;\n}());\n\n/**\n * `PdfTreeGridCellCollection` class provides access to an ordered,\n * strongly typed collection of 'PdfTreeGridCell' objects.\n *\n * @private\n */\nvar PdfTreeGridCellCollection = /** @class */ (function () {\n    //Constructor\n    /**\n     * Initializes a new instance of the `PdfGridCellCollection` class with the row.\n     *\n     * @param { PdfTreeGridRow} row .\n     * @private\n     */\n    function PdfTreeGridCellCollection(row) {\n        this.treegridRow = row;\n        this.cells = [];\n    }\n    //Properties\n    /**\n     * Gets the current `cell`.\n     *\n     * @param {number} index .\n     * @returns {PdfTreeGridCell} .\n     * @private\n     */\n    PdfTreeGridCellCollection.prototype.getCell = function (index) {\n        if (index < 0 || index >= this.count) {\n            throw new Error('IndexOutOfRangeException');\n        }\n        return this.cells[index];\n    };\n    Object.defineProperty(PdfTreeGridCellCollection.prototype, \"count\", {\n        /**\n         * Gets the cells `count`.[Read-Only].\n         *\n         * @returns {number} .\n         * @private\n         */\n        get: function () {\n            return this.cells.length;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    //Implementation\n    /**\n     * `Adds` this instance.\n     *\n     * @param {PdfTreeGridCell} cell .\n     * @returns {PdfTreeGridCell | void} .\n     * @private\n     */\n    PdfTreeGridCellCollection.prototype.add = function (cell) {\n        if (typeof cell === 'undefined') {\n            var tempcell = new PdfTreeGridCell();\n            this.add(tempcell);\n            return cell;\n        }\n        else {\n            cell.row = this.treegridRow;\n            this.cells.push(cell);\n        }\n    };\n    /**\n     * Returns the `index of` a particular cell in the collection.\n     *\n     * @param {PdfTreeGridCell} cell .\n     * @returns {number} .\n     * @private\n     */\n    PdfTreeGridCellCollection.prototype.indexOf = function (cell) {\n        return this.cells.indexOf(cell);\n    };\n    return PdfTreeGridCellCollection;\n}());\n\n/**\n *\n */\nvar PdfTreeGridRow = /** @class */ (function () {\n    function PdfTreeGridRow(treegrid) {\n        this.treegridRowOverflowIndex = 0;\n        this.rowHeight = 0;\n        this.rowWidth = 0;\n        /* eslint-disable-next-line */\n        this._isParentRow = false;\n        this.intendLevel = 0;\n        this.pdfTreeGrid = treegrid;\n    }\n    Object.defineProperty(PdfTreeGridRow.prototype, \"cells\", {\n        get: function () {\n            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(this.treegridCells)) {\n                this.treegridCells = new PdfTreeGridCellCollection(this);\n            }\n            return this.treegridCells;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfTreeGridRow.prototype, \"isParentRow\", {\n        get: function () {\n            return this._isParentRow;\n        },\n        set: function (value) {\n            this._isParentRow = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfTreeGridRow.prototype, \"treegrid\", {\n        get: function () {\n            return this.pdfTreeGrid;\n        },\n        set: function (value) {\n            this.pdfTreeGrid = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfTreeGridRow.prototype, \"rowBreakHeight\", {\n        /**\n         * `Height` of the row yet to be drawn after split.\n         *\n         * @returns {number} .\n         * @private\n         */\n        get: function () {\n            if (typeof this.treegridRowBreakHeight === 'undefined') {\n                this.treegridRowBreakHeight = 0;\n            }\n            return this.treegridRowBreakHeight;\n        },\n        set: function (value) {\n            this.treegridRowBreakHeight = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfTreeGridRow.prototype, \"rowOverflowIndex\", {\n        /**\n         * `over flow index` of the row.\n         *\n         * @returns {number} .\n         * @private\n         */\n        get: function () {\n            return this.treegridRowOverflowIndex;\n        },\n        set: function (value) {\n            this.treegridRowOverflowIndex = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfTreeGridRow.prototype, \"level\", {\n        get: function () {\n            return this.intendLevel;\n        },\n        set: function (value) {\n            this.intendLevel = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfTreeGridRow.prototype, \"height\", {\n        /**\n         * Gets or sets the `height` of the row.\n         *\n         * @returns {number} .\n         * @private\n         */\n        get: function () {\n            if (this.rowHeight === 0) {\n                this.rowHeight = this.measureHeight();\n            }\n            return this.rowHeight;\n        },\n        set: function (value) {\n            this.rowHeight = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfTreeGridRow.prototype, \"width\", {\n        /**\n         * Gets or sets the `width` of the row.\n         *\n         * @returns {number} .\n         * @private\n         */\n        get: function () {\n            if (this.rowWidth === 0) {\n                this.rowWidth = this.measureWidth();\n            }\n            return this.rowWidth;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfTreeGridRow.prototype, \"rowIndex\", {\n        get: function () {\n            return this.treegrid.rows.rowCollection.indexOf(this);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    PdfTreeGridRow.prototype.measureWidth = function () {\n        var columns = this.treegrid.columns.columns;\n        var totalWidth = 0;\n        for (var i = 0; i < columns.length; i++) {\n            var column = columns[i];\n            totalWidth += column.width;\n        }\n        return totalWidth;\n    };\n    PdfTreeGridRow.prototype.measureHeight = function () {\n        var rowHeight = (this.cells.count !== 0 &&\n            !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(this.cells.getCell(0).height)) ? this.cells.getCell(0).height : 33;\n        for (var i = 0; i < this.cells.count; i++) {\n            var cell = this.cells.getCell(i);\n            if (cell.columnSpan === 1 || cell.rowSpan === 1) {\n                rowHeight = Math.max(rowHeight, cell.height);\n            }\n            else {\n                rowHeight = Math.min(rowHeight, cell.height);\n            }\n            cell.height = rowHeight;\n        }\n        return rowHeight;\n    };\n    return PdfTreeGridRow;\n}());\n\n/**\n * `PdfTreeGridRowCollection` class provides access to an ordered, strongly typed collection of 'PdfTreeGridRow' objects.\n *\n * @private\n */\nvar PdfTreeGridRowCollection = /** @class */ (function () {\n    // Constructor\n    /**\n     * Initializes a new instance of the `PdfTreeGridRowCollection` class with the parent grid.\n     *\n     * @param {PdfTreeGrid} treegrid .\n     * @private\n     */\n    function PdfTreeGridRowCollection(treegrid) {\n        this.rows = [];\n        this.treegrid = treegrid;\n    }\n    Object.defineProperty(PdfTreeGridRowCollection.prototype, \"count\", {\n        //Properties\n        /**\n         * Gets the number of header in the `PdfTreeGrid`.[Read-Only].\n         *\n         * @returns {number} .\n         * @private\n         */\n        get: function () {\n            return this.rows.length;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfTreeGridRowCollection.prototype, \"rowCollection\", {\n        //Implementation\n        /**\n         * Return the row collection of the `treegrid`.\n         *\n         * @returns {PdfTreeGridRow[]} .\n         * @private\n         */\n        get: function () {\n            return this.rows;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    PdfTreeGridRowCollection.prototype.addRow = function (row) {\n        if (typeof row === 'undefined') {\n            var row_1 = new PdfTreeGridRow(this.treegrid);\n            this.addRow(row_1);\n            return row_1;\n        }\n        else {\n            if (row.cells.count === 0) {\n                for (var i = 0; i < this.treegrid.columns.count; i++) {\n                    row.cells.add(new PdfTreeGridCell());\n                }\n            }\n            this.rows.push(row);\n        }\n    };\n    /**\n     * Return the row by index.\n     *\n     * @param {number} index .\n     * @returns {PdfTreeGridRow} .\n     * @private\n     */\n    PdfTreeGridRowCollection.prototype.getRow = function (index) {\n        return this.rows[index];\n    };\n    return PdfTreeGridRowCollection;\n}());\n\n/**\n * `PdfTreeGridHeaderCollection` class provides customization of the settings for the header.\n *\n * @private\n */\nvar PdfTreeGridHeaderCollection = /** @class */ (function () {\n    //constructor\n    /**\n     * Initializes a new instance of the `PdfTreeGridHeaderCollection` class with the parent grid.\n     *\n     * @param {PdfTreeGrid} treegrid .\n     * @private\n     */\n    function PdfTreeGridHeaderCollection(treegrid) {\n        /**\n         * The array to store the `rows` of the grid header.\n         *\n         * @returns {PdfTreeGridRow[]} .\n         * @private\n         */\n        this.rows = [];\n        this.treegrid = treegrid;\n        this.rows = [];\n    }\n    //Properties\n    /**\n     * Gets a 'PdfTreeGridRow' object that represents the `header` row in a 'PdfGridHeaderCollection' control.[Read-Only].\n     *\n     * @param {number} index .\n     * @returns {PdfTreeGridRow} .\n     * @private\n     */\n    PdfTreeGridHeaderCollection.prototype.getHeader = function (index) {\n        return (this.rows[index]);\n    };\n    Object.defineProperty(PdfTreeGridHeaderCollection.prototype, \"count\", {\n        /**\n         * Gets the `number of header` in the 'PdfGrid'.[Read-Only]\n         *\n         * @returns {number} .\n         * @private\n         */\n        get: function () {\n            return this.rows.length;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    //Implementation\n    /**\n     * `Adds` the specified row.\n     *\n     * @param {PdfTreeGridRow} row .\n     * @returns {void} .\n     * @private\n     */\n    PdfTreeGridHeaderCollection.prototype.add = function (row) {\n        this.rows.push(row);\n    };\n    PdfTreeGridHeaderCollection.prototype.indexOf = function (row) {\n        return this.rows.indexOf(row);\n    };\n    return PdfTreeGridHeaderCollection;\n}());\n\nvar PdfTreeGridColumn = /** @class */ (function () {\n    function PdfTreeGridColumn(treegrid) {\n        this.columnWidth = 0;\n        this.treeColumnIndex = false;\n        this._headerText = '';\n        this._field = '';\n        this.treegrid = treegrid;\n    }\n    Object.defineProperty(PdfTreeGridColumn.prototype, \"headerText\", {\n        get: function () {\n            return this._headerText;\n        },\n        set: function (value) {\n            this._headerText = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfTreeGridColumn.prototype, \"field\", {\n        get: function () {\n            return this._field;\n        },\n        set: function (value) {\n            this._field = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfTreeGridColumn.prototype, \"width\", {\n        get: function () {\n            return this.columnWidth;\n        },\n        set: function (value) {\n            this.columnWidth = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfTreeGridColumn.prototype, \"isTreeColumn\", {\n        get: function () {\n            return this.treeColumnIndex;\n        },\n        set: function (value) {\n            this.treeColumnIndex = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfTreeGridColumn.prototype, \"format\", {\n        /**\n         * Gets or sets the information about the text `formatting`.\n         *\n         * @returns {PdfStringFormat} .\n         * @private\n         */\n        get: function () {\n            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(this.stringFormat)) {\n                this.stringFormat = new _syncfusion_ej2_pdf_export__WEBPACK_IMPORTED_MODULE_2__.PdfStringFormat(); //GetDefaultFormat();\n            }\n            return this.stringFormat;\n        },\n        set: function (value) {\n            this.stringFormat = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return PdfTreeGridColumn;\n}());\n\n/**\n * `PdfTreeGridColumnCollection` class provides access to an ordered,\n * strongly typed collection of 'PdfTreeGridColumn' objects.\n *\n * @private\n */\nvar PdfTreeGridColumnCollection = /** @class */ (function () {\n    //properties\n    //Constructors\n    /**\n     * Initializes a new instance of the `PdfTreeGridColumnCollection` class with the parent grid.\n     *\n     * @param { PdfTreeGrid} treegrid .\n     * @private\n     */\n    function PdfTreeGridColumnCollection(treegrid) {\n        /**\n         * @private\n         */\n        this.internalColumns = [];\n        /**\n         * @private\n         */\n        this.columnWidth = 0;\n        this.treegrid = treegrid;\n        this.internalColumns = [];\n    }\n    //Implementation\n    /**\n     * `Add` a new column to the 'PdfGrid'.\n     *\n     * @param {number} count .\n     * @returns {void} .\n     * @private\n     */\n    PdfTreeGridColumnCollection.prototype.add = function (count) {\n        // public add(column : PdfGridColumn) : void\n        // public add(arg : number|PdfGridColumn) : void {\n        // if (typeof arg === 'number') {\n        for (var i = 0; i < count; i++) {\n            this.internalColumns.push(new PdfTreeGridColumn(this.treegrid));\n            for (var index = 0; index < this.treegrid.rows.count; index++) {\n                var row = this.treegrid.rows.getRow(index);\n                var cell = new PdfTreeGridCell();\n                cell.value = '';\n                row.cells.add(cell);\n            }\n        }\n        // } else {\n        //     let column : PdfGridColumn = new PdfGridColumn(this.grid);\n        //     this.columns.push(column);\n        //     return column;\n        // }\n    };\n    Object.defineProperty(PdfTreeGridColumnCollection.prototype, \"count\", {\n        /**\n         * Gets the `number of columns` in the 'PdfGrid'.[Read-Only].\n         *\n         * @returns {number} .\n         * @private\n         */\n        get: function () {\n            return this.internalColumns.length;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfTreeGridColumnCollection.prototype, \"width\", {\n        /**\n         * Gets the `widths`.\n         *\n         * @returns {number} .\n         * @private\n         */\n        get: function () {\n            if (this.columnWidth === 0) {\n                this.columnWidth = this.measureColumnsWidth();\n            }\n            return this.columnWidth;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfTreeGridColumnCollection.prototype, \"columns\", {\n        /**\n         * Gets the `array of PdfGridColumn`.[Read-Only]\n         *\n         * @returns {PdfTreeGridColumn[]} .\n         * @private\n         */\n        get: function () {\n            return this.internalColumns;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Gets the `PdfTreeGridColumn` from the specified index.[Read-Only]\n     *\n     * @param {number} index .\n     * @returns {PdfTreeGridColumn} .\n     * @private\n     */\n    PdfTreeGridColumnCollection.prototype.getColumn = function (index) {\n        if (index >= 0 && index <= this.columns.length) {\n            return this.columns[index];\n        }\n        else {\n            throw Error('can not get the column from the index: ' + index);\n        }\n    };\n    //Implementation\n    /**\n     * `Calculates the column widths`.\n     *\n     * @returns {number} .\n     * @private\n     */\n    PdfTreeGridColumnCollection.prototype.measureColumnsWidth = function () {\n        var totalWidth = 0;\n        this.treegrid.measureColumnsWidth();\n        for (var i = 0, count = this.internalColumns.length; i < count; i++) {\n            totalWidth += this.internalColumns[i].width;\n        }\n        return totalWidth;\n    };\n    /**\n     * Gets the `widths of the columns`.\n     *\n     * @param {number} totalWidth .\n     * @returns {number} .\n     * @private\n     */\n    PdfTreeGridColumnCollection.prototype.getDefaultWidths = function (totalWidth) {\n        var widths = [];\n        var subFactor = this.count;\n        for (var i = 0; i < this.count; i++) {\n            widths[i] = this.internalColumns[i].width;\n            if (this.internalColumns[i].width > 0) {\n                totalWidth -= this.internalColumns[i].width;\n                subFactor--;\n            }\n            else {\n                widths[i] = 0;\n            }\n        }\n        for (var i = 0; i < this.count; i++) {\n            var width = totalWidth / subFactor;\n            if (widths[i] <= 0) {\n                widths[i] = width;\n            }\n        }\n        return widths;\n    };\n    return PdfTreeGridColumnCollection;\n}());\n\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-gantt/src/gantt/export/pdf-base/pdf-grid-table.js?");

/***/ })

}]);