"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkej2_vue_samples"] = self["webpackChunkej2_vue_samples"] || []).push([["chunk-vendors-node_modules_syncfusion_ej2-diagrams_src_diagram_load-utility_modelProperties_js-62b65-096df34e"],{

/***/ "./node_modules/@syncfusion/ej2-diagrams/src/diagram/load-utility/modelProperties.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-diagrams/src/diagram/load-utility/modelProperties.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Ej1Serialization: () => (/* binding */ Ej1Serialization)\n/* harmony export */ });\n/* harmony import */ var _enum_enum__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../enum/enum */ \"./node_modules/@syncfusion/ej2-diagrams/src/diagram/enum/enum.js\");\n/* harmony import */ var _connectorProperties__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./connectorProperties */ \"./node_modules/@syncfusion/ej2-diagrams/src/diagram/load-utility/connectorProperties.js\");\n/* harmony import */ var _labelProperties__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./labelProperties */ \"./node_modules/@syncfusion/ej2-diagrams/src/diagram/load-utility/labelProperties.js\");\n/* harmony import */ var _nodeProperties__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./nodeProperties */ \"./node_modules/@syncfusion/ej2-diagrams/src/diagram/load-utility/nodeProperties.js\");\n/* harmony import */ var _portProperties__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./portProperties */ \"./node_modules/@syncfusion/ej2-diagrams/src/diagram/load-utility/portProperties.js\");\n\n\n\n\n\nvar Ej1Serialization = /** @class */ (function () {\n    function Ej1Serialization(diagram) {\n        this.labelProperties = new _labelProperties__WEBPACK_IMPORTED_MODULE_2__.LabelProperties(this);\n        this.connectorProperties = new _connectorProperties__WEBPACK_IMPORTED_MODULE_1__.ConnectorProperties(this.labelProperties);\n        this.portProperties = new _portProperties__WEBPACK_IMPORTED_MODULE_4__.PortProperties(this);\n        this.nodeProperties = new _nodeProperties__WEBPACK_IMPORTED_MODULE_3__.NodeProperties(this.labelProperties, this.portProperties);\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        this.convertedData = {};\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        this.items = [];\n        this.diagram = diagram;\n    }\n    //(EJ2-272287) Provide support to convert the EJ1 diagram to EJ2 diagram\n    //Getting the object data from the load diagram and serialize it into from EJ1 to EJ2\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    Ej1Serialization.prototype.getSerializedData = function (data) {\n        this.convertedData.mode = 'SVG';\n        this.convertedData.basicElements = [];\n        this.convertedData.width = data.width;\n        this.convertedData.height = data.height;\n        if (data.nodes && data.nodes.length > 0) {\n            this.nodeProperties.renderNodesCollection(this.convertedData, data);\n        }\n        else {\n            this.convertedData.nodes = data.nodes;\n        }\n        if (data.connectors && data.connectors.length > 0) {\n            this.connectorProperties.renderConnectorsCollection(this.convertedData, data);\n        }\n        else {\n            this.convertedData.connectors = data.connectors;\n        }\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        if (data.defaultSettings !== undefined) {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            this.convertedData.getNodeDefaults = this.getNodeDefaults(data.defaultSettings.node);\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            this.convertedData.getConnectorDefaults = this.getConnectorDefaults(data.defaultSettings.connector);\n        }\n        //this.convertedData.setNodeTemplate = this.getNodeTemplate((data as Diagram).nodeTemplate);\n        this.setLayers(this.convertedData, data);\n        this.setDataSourceSettings(this.convertedData, data);\n        this.setRulerSettings(this.convertedData, data);\n        this.setSnapSettings(this.convertedData, data);\n        if (data.snapSettings.enableSnapToObject) {\n            this.convertedData.snapSettings.constraints = this.convertedData.snapSettings.constraints | _enum_enum__WEBPACK_IMPORTED_MODULE_0__.SnapConstraints.SnapToObject;\n        }\n        else {\n            this.convertedData.snapSettings.constraints = this.convertedData.snapSettings.constraints & ~_enum_enum__WEBPACK_IMPORTED_MODULE_0__.SnapConstraints.SnapToObject;\n        }\n        if (data.pageSettings.backgroundImage === undefined) {\n            data.pageSettings.pageBackgroundColor = 'transparent';\n            data.pageSettings.backgroundImage = {\n                source: '',\n                scale: 'meet',\n                alignment: 'xmidymid'\n            };\n            data.pageSettings.showPageBreak = false;\n        }\n        this.setScrollSettings(this.convertedData, data);\n        this.setPageSettings(this.convertedData, data);\n        this.setContextMenu(this.convertedData, data);\n        this.setTooltip(this.convertedData, data);\n        this.setModelLayout(this.convertedData, data);\n        this.setSelectedItems(this.convertedData, data);\n        this.convertedData.constraints = this.setDiagramConstraints(data.constraints);\n        this.convertedData.tool = this.setDiagramTool(data.tool);\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        this.convertedData.drawType = data.drawType;\n        this.convertedData.commandManager = data.commandManager;\n        return this.convertedData;\n    };\n    //(EJ2-272287) Provide support to convert the EJ1 diagram to EJ2 diagram\n    //declare the node default properties\n    Ej1Serialization.prototype.getNodeDefaults = function (node) {\n        if (node) {\n            return this.nodeProperties.convertToNode(node);\n        }\n        else {\n            return null;\n        }\n    };\n    //(EJ2-272287) Provide support to convert the EJ1 diagram to EJ2 diagram\n    //declare the node default properties\n    Ej1Serialization.prototype.getConnectorDefaults = function (connector) {\n        if (connector) {\n            return this.connectorProperties.convertToConnector(connector);\n        }\n        else {\n            return null;\n        }\n    };\n    //(EJ2-272287) Provide support to convert the EJ1 diagram to EJ2 diagram\n    //Update the layers from the EJ1 JSON\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    Ej1Serialization.prototype.setLayers = function (convertedData, data) {\n        convertedData.layers = [];\n        if (data.layers.length > 0) {\n            for (var i = 0; i < data.layers.length; i++) {\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                var newLayer = {};\n                var layer = data.layers[parseInt(i.toString(), 10)];\n                newLayer.id = layer.name;\n                newLayer.visible = layer.visible;\n                newLayer.lock = layer.lock;\n                newLayer.objects = layer.objects;\n                convertedData.layers.push(newLayer);\n            }\n        }\n    };\n    //(EJ2-272287) Provide support to convert the EJ1 diagram to EJ2 diagram\n    //Update the dataSourceSettings from EJ1 to EJ2\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    Ej1Serialization.prototype.setDataSourceSettings = function (convertedData, data) {\n        convertedData.dataSourceSettings = {};\n        convertedData.dataSourceSettings.id = data.dataSourceSettings.id;\n        convertedData.dataSourceSettings.dataManager = data.dataSourceSettings.dataSource;\n        convertedData.dataSourceSettings.root = data.dataSourceSettings.root;\n        convertedData.dataSourceSettings.parentId = data.dataSourceSettings.parent;\n        convertedData.dataSourceSettings.crudAction = {\n            read: data.dataSourceSettings.crudAction.read,\n            create: data.dataSourceSettings.crudAction.create,\n            update: data.dataSourceSettings.crudAction.update,\n            destroy: data.dataSourceSettings.crudAction.destroy,\n            customFields: data.dataSourceSettings.customFields\n        };\n        if (data.dataSourceSettings.connectionDataSource) {\n            convertedData.dataSourceSettings.connectionDataSource = {};\n            convertedData.dataSourceSettings.connectionDataSource.id = data.dataSourceSettings.connectionDataSource.id;\n            convertedData.dataSourceSettings.connectionDataSource.dataManager = data.dataSourceSettings.connectionDataSource.dataSource;\n            convertedData.dataSourceSettings.connectionDataSource.sourceID = data.dataSourceSettings.connectionDataSource.sourceNode;\n            convertedData.dataSourceSettings.connectionDataSource.targetID = data.dataSourceSettings.connectionDataSource.targetNode;\n            convertedData.dataSourceSettings.connectionDataSource.sourcePointX = data.dataSourceSettings.connectionDataSource.sourcePointX;\n            convertedData.dataSourceSettings.connectionDataSource.sourcePointY = data.dataSourceSettings.connectionDataSource.sourcePointY;\n            convertedData.dataSourceSettings.connectionDataSource.targetPointX = data.dataSourceSettings.connectionDataSource.targetPointX;\n            convertedData.dataSourceSettings.connectionDataSource.targetPointY = data.dataSourceSettings.connectionDataSource.targetPointY;\n            convertedData.dataSourceSettings.connectionDataSource.crudAction = {\n                read: data.dataSourceSettings.connectionDataSource.crudAction.read,\n                create: data.dataSourceSettings.connectionDataSource.crudAction.create,\n                update: data.dataSourceSettings.connectionDataSource.crudAction.update,\n                destroy: data.dataSourceSettings.connectionDataSource.crudAction.destroy,\n                customFields: data.dataSourceSettings.connectionDataSource.customFields\n            };\n        }\n    };\n    //(EJ2-272287) Provide support to convert the EJ1 diagram to EJ2 diagram\n    //Update the ruler settings\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    Ej1Serialization.prototype.setRulerSettings = function (convertedData, data) {\n        convertedData.rulerSettings = {};\n        convertedData.rulerSettings.showRulers = data.rulerSettings.showRulers;\n        convertedData.rulerSettings.horizontalRuler = this.setRulerProperties(data.rulerSettings.horizontalRuler);\n        convertedData.rulerSettings.verticalRuler = this.setRulerProperties(data.rulerSettings.verticalRuler);\n    };\n    //(EJ2-272287) Provide support to convert the EJ1 diagram to EJ2 diagram\n    //Update the orientation of the ruler\n    Ej1Serialization.prototype.setRulerProperties = function (ruler) {\n        var rulerProperties = {};\n        rulerProperties.interval = ruler.interval;\n        rulerProperties.segmentWidth = ruler.segmentWidth;\n        // rulerProperties.tickAlignment = ruler.tickAlignment === 'rightorbottom' ? 'RightOrBottom' : 'LeftOrTop';\n        rulerProperties.markerColor = ruler.markerColor;\n        rulerProperties.thickness = ruler.thickness;\n        rulerProperties.arrangeTick = ruler.arrangeTick;\n        return rulerProperties;\n    };\n    //(EJ2-272287) Provide support to convert the EJ1 diagram to EJ2 diagram\n    //Update the snap settings\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    Ej1Serialization.prototype.setSnapSettings = function (convertedData, data) {\n        convertedData.snapSettings = {};\n        if (data.snapSettings) {\n            convertedData.snapSettings.horizontalGridLines = this.setGridLines(data.snapSettings.horizontalGridLines);\n            convertedData.snapSettings.verticalGridLines = this.setGridLines(data.snapSettings.verticalGridLines);\n            convertedData.snapSettings.snapAngle = data.snapSettings.snapAngle;\n            convertedData.snapSettings.snapObjectDistance = data.snapSettings.snapObjectDistance;\n            convertedData.snapSettings.constraints = this.setSnapConstraints(data.snapSettings.snapConstraints);\n        }\n    };\n    //(EJ2-272287) Provide support to convert the EJ1 diagram to EJ2 diagram\n    //Update the snap constraints from EJ1 to EJ2\n    Ej1Serialization.prototype.setSnapConstraints = function (constraints) {\n        var snapConstraints = _enum_enum__WEBPACK_IMPORTED_MODULE_0__.SnapConstraints.None;\n        if (constraints & _enum_enum__WEBPACK_IMPORTED_MODULE_0__.SnapConstraints.ShowHorizontalLines) {\n            snapConstraints = snapConstraints | _enum_enum__WEBPACK_IMPORTED_MODULE_0__.SnapConstraints.ShowHorizontalLines;\n        }\n        if (constraints & _enum_enum__WEBPACK_IMPORTED_MODULE_0__.SnapConstraints.ShowVerticalLines) {\n            snapConstraints = snapConstraints | _enum_enum__WEBPACK_IMPORTED_MODULE_0__.SnapConstraints.ShowVerticalLines;\n        }\n        if (constraints & _enum_enum__WEBPACK_IMPORTED_MODULE_0__.SnapConstraints.ShowLines) {\n            snapConstraints = snapConstraints | _enum_enum__WEBPACK_IMPORTED_MODULE_0__.SnapConstraints.ShowLines;\n        }\n        if (constraints & _enum_enum__WEBPACK_IMPORTED_MODULE_0__.SnapConstraints.SnapToHorizontalLines) {\n            snapConstraints = snapConstraints | _enum_enum__WEBPACK_IMPORTED_MODULE_0__.SnapConstraints.SnapToHorizontalLines;\n        }\n        if (constraints & _enum_enum__WEBPACK_IMPORTED_MODULE_0__.SnapConstraints.SnapToVerticalLines) {\n            snapConstraints = snapConstraints | _enum_enum__WEBPACK_IMPORTED_MODULE_0__.SnapConstraints.SnapToVerticalLines;\n        }\n        if (constraints & _enum_enum__WEBPACK_IMPORTED_MODULE_0__.SnapConstraints.SnapToLines) {\n            snapConstraints = snapConstraints | _enum_enum__WEBPACK_IMPORTED_MODULE_0__.SnapConstraints.SnapToLines;\n        }\n        return snapConstraints;\n    };\n    //(EJ2-272287) Provide support to convert the EJ1 diagram to EJ2 diagram\n    //Update the gridlines\n    Ej1Serialization.prototype.setGridLines = function (gridlines) {\n        var gridLinesProperties = {};\n        gridLinesProperties.lineColor = gridlines.lineColor;\n        gridLinesProperties.lineDashArray = gridlines.lineDashArray;\n        gridLinesProperties.lineIntervals = gridlines.lineInterval;\n        gridLinesProperties.snapIntervals = gridlines.snapInterval;\n        return gridLinesProperties;\n    };\n    //(EJ2-272287) Provide support to convert the EJ1 diagram to EJ2 diagram\n    //Update the scroll-settings\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    Ej1Serialization.prototype.setScrollSettings = function (convertedData, data) {\n        convertedData.scrollSettings = {\n            horizontalOffset: data.scrollSettings.horizontalOffset,\n            verticalOffset: data.scrollSettings.verticalOffset,\n            currentZoom: data.scrollSettings.currentZoom,\n            viewPortWidth: data.scrollSettings.viewPortWidth,\n            viewPortHeight: data.scrollSettings.viewPortHeight,\n            minZoom: data.scrollSettings.minZoom,\n            maxZoom: data.scrollSettings.maxZoom,\n            scrollLimit: (data.pageSettings.scrollLimit).charAt(0).toUpperCase() + (data.pageSettings.scrollLimit).slice(1),\n            scrollableArea: data.pageSettings.scrollableArea,\n            canAutoScroll: data.enableAutoScroll,\n            autoScrollBorder: data.pageSettings.autoScrollBorder\n        };\n    };\n    //(EJ2-272287) Provide support to convert the EJ1 diagram to EJ2 diagram\n    //Update the page settings\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    Ej1Serialization.prototype.setPageSettings = function (convertedData, data) {\n        convertedData.pageSettings = {\n            width: data.pageSettings.pageWidth,\n            height: data.pageSettings.pageHeight,\n            // eslint-disable-next-line max-len\n            margin: { left: data.pageSettings.pageMargin, right: data.pageSettings.pageMargin, top: data.pageSettings.pageMargin, bottom: data.pageSettings.pageMargin },\n            orientation: (data.pageSettings.pageOrientation).charAt(0).toUpperCase() + (data.pageSettings.pageOrientation).slice(1),\n            // eslint-disable-next-line max-len\n            boundaryConstraints: (data.pageSettings.boundaryConstraints).charAt(0).toUpperCase() + (data.pageSettings.boundaryConstraints).slice(1),\n            // eslint-disable-next-line max-len\n            background: { color: data.pageSettings.pageBackgroundColor, source: data.backgroundImage.source, scale: data.backgroundImage.scale, align: data.backgroundImage.align },\n            multiplePage: data.pageSettings.multiplePage,\n            showPageBreaks: data.pageSettings.showPageBreak\n        };\n    };\n    //(EJ2-272287) Provide support to convert the EJ1 diagram to EJ2 diagram\n    //Sets the contextmenu settings\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    Ej1Serialization.prototype.setContextMenu = function (convertedData, data) {\n        convertedData.contextMenuSettings = {};\n        convertedData.contextMenuSettings.show = data.enableContextMenu;\n        if (data.contextMenu !== undefined) {\n            convertedData.contextMenuSettings.showCustomMenuOnly = data.contextMenu.showCustomMenuItemsOnly;\n            convertedData.contextMenuSettings.items = this.getContextMenuItems(data.contextMenu.items);\n        }\n    };\n    //(EJ2-272287) Provide support to convert the EJ1 diagram to EJ2 diagram\n    //Update the contextmenu items\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    Ej1Serialization.prototype.getContextMenuItems = function (contextMenuItems) {\n        var menuItem = {};\n        for (var i = 0; i < contextMenuItems.length; i++) {\n            var oldMenuItem = contextMenuItems[parseInt(i.toString(), 10)];\n            menuItem.id = oldMenuItem.name;\n            menuItem.text = oldMenuItem.text;\n            this.items.push(menuItem);\n            if (contextMenuItems.subItems && contextMenuItems.subItems.length > 0) {\n                this.getContextMenuItems(contextMenuItems.subItems);\n            }\n        }\n        return this.items;\n    };\n    //(EJ2-272287) Provide support to convert the EJ1 diagram to EJ2 diagram\n    //Update the tooltip items\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    Ej1Serialization.prototype.setTooltip = function (convertedData, data) {\n        convertedData.tooltip = {\n            content: data.tooltip.templateId,\n            relativeMode: data.tooltip.relativeMode\n        };\n    };\n    //(EJ2-272287) Provide support to convert the EJ1 diagram to EJ2 diagram\n    //Sets the model layout for the converted data\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    Ej1Serialization.prototype.setModelLayout = function (convertedData, data) {\n        convertedData.layout = {\n            fixedNode: data.layout.fixedNode,\n            horizontalSpacing: data.layout.horizontalSpacing,\n            verticalSpacing: data.layout.verticalSpacing,\n            maxIteration: data.layout.maxIteration,\n            springFactor: data.layout.springFactor,\n            springLength: data.layout.springLength,\n            // eslint-disable-next-line max-len\n            margin: { left: data.layout.margin.left, right: data.layout.margin.right, top: data.layout.margin.top, bottom: data.layout.margin.bottom },\n            horizontalAlignment: (data.layout.horizontalAlignment).charAt(0).toUpperCase() + (data.layout.horizontalAlignment).slice(1),\n            verticalAlignment: (data.layout.verticalAlignment).charAt(0).toUpperCase() + (data.layout.verticalAlignment).slice(1),\n            orientation: data.layout.orientation === 'toptobottom' ? 'TopToBottom' : data.layout.orientation === 'bottomtotop' ? 'BottomToTop' : data.layout.orientation === 'righttoleft' ? 'RightToLeft' : 'LeftToRight',\n            connectorSegments: data.layout.getConnectorSegments,\n            type: (data.layout.type).charAt(0).toUpperCase() + (data.layout.type).slice(1),\n            getLayoutInfo: data.layout.getLayoutInfo,\n            bounds: data.layout.bounds,\n            root: data.layout.root\n        };\n        if (convertedData.layout && convertedData.layout.type === 'Hierarchicaltree') {\n            convertedData.layout.type = 'HierarchicalTree';\n        }\n        else if (convertedData.layout && convertedData.layout.type === 'Organizationalchart') {\n            convertedData.layout.type = 'OrganizationalChart';\n        }\n        else if (convertedData.layout && convertedData.layout.type === 'Radialtree') {\n            convertedData.layout.type = 'RadialTree';\n        }\n    };\n    //(EJ2-272287) Provide support to convert the EJ1 diagram to EJ2 diagram\n    //Sets the selected items to convert the data\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    Ej1Serialization.prototype.setSelectedItems = function (convertedData, data) {\n        convertedData.selectedItems = {};\n        var nodes = [];\n        var connectors = [];\n        convertedData.selectedItems.nodes = nodes;\n        convertedData.selectedItems.connectors = connectors;\n        convertedData.selectedItems.offsetX = data.selectedItems.offsetX;\n        convertedData.selectedItems.offsetY = data.selectedItems.offsetY;\n        convertedData.selectedItems.width = data.selectedItems.width;\n        convertedData.selectedItems.height = data.selectedItems.height;\n        convertedData.selectedItems.rotateAngle = data.selectedItems.rotateAngle;\n        convertedData.selectedItems.constraints = this.setSelectorConstraints(data.selectedItems.constraints);\n        convertedData.selectedItems.userHandles = data.selectedItems.userHandles;\n    };\n    //(EJ2-272287) Provide support to convert the EJ1 diagram to EJ2 diagram\n    //Update the selector constraints from EJ1 to EJ2\n    Ej1Serialization.prototype.setSelectorConstraints = function (constraints) {\n        var selectorConstraints = _enum_enum__WEBPACK_IMPORTED_MODULE_0__.SelectorConstraints.None;\n        if (constraints & _enum_enum__WEBPACK_IMPORTED_MODULE_0__.SelectorConstraints.ConnectorSourceThumb) {\n            selectorConstraints = selectorConstraints | _enum_enum__WEBPACK_IMPORTED_MODULE_0__.SelectorConstraints.Rotate;\n        }\n        if (constraints & _enum_enum__WEBPACK_IMPORTED_MODULE_0__.SelectorConstraints.ResizeAll) {\n            selectorConstraints = selectorConstraints | _enum_enum__WEBPACK_IMPORTED_MODULE_0__.SelectorConstraints.ResizeAll;\n        }\n        if (constraints & _enum_enum__WEBPACK_IMPORTED_MODULE_0__.SelectorConstraints.ResizeSouthEast) {\n            selectorConstraints = selectorConstraints | _enum_enum__WEBPACK_IMPORTED_MODULE_0__.SelectorConstraints.UserHandle;\n        }\n        if (constraints & _enum_enum__WEBPACK_IMPORTED_MODULE_0__.SelectorConstraints.ToolTip) {\n            selectorConstraints = selectorConstraints | _enum_enum__WEBPACK_IMPORTED_MODULE_0__.SelectorConstraints.ToolTip;\n        }\n        if (constraints & _enum_enum__WEBPACK_IMPORTED_MODULE_0__.SelectorConstraints.All) {\n            selectorConstraints = selectorConstraints | _enum_enum__WEBPACK_IMPORTED_MODULE_0__.SelectorConstraints.All;\n        }\n        return selectorConstraints;\n    };\n    //(EJ2-272287) Provide support to convert the EJ1 diagram to EJ2 diagram\n    //Update the diagram constraints from EJ1 to EJ2\n    Ej1Serialization.prototype.setDiagramConstraints = function (constraints) {\n        var diagramConstraints = _enum_enum__WEBPACK_IMPORTED_MODULE_0__.DiagramConstraints.None;\n        if (constraints & _enum_enum__WEBPACK_IMPORTED_MODULE_0__.DiagramConstraints.UserInteraction) {\n            diagramConstraints = diagramConstraints | _enum_enum__WEBPACK_IMPORTED_MODULE_0__.DiagramConstraints.UserInteraction;\n        }\n        if (constraints & _enum_enum__WEBPACK_IMPORTED_MODULE_0__.DiagramConstraints.ApiUpdate) {\n            diagramConstraints = diagramConstraints | _enum_enum__WEBPACK_IMPORTED_MODULE_0__.DiagramConstraints.ApiUpdate;\n        }\n        if (constraints & _enum_enum__WEBPACK_IMPORTED_MODULE_0__.DiagramConstraints.PageEditable) {\n            diagramConstraints = diagramConstraints | _enum_enum__WEBPACK_IMPORTED_MODULE_0__.DiagramConstraints.PageEditable;\n        }\n        if (constraints & _enum_enum__WEBPACK_IMPORTED_MODULE_0__.DiagramConstraints.LineRouting) {\n            diagramConstraints = diagramConstraints | _enum_enum__WEBPACK_IMPORTED_MODULE_0__.DiagramConstraints.Bridging;\n        }\n        if (constraints & _enum_enum__WEBPACK_IMPORTED_MODULE_0__.DiagramConstraints.Zoom) {\n            diagramConstraints = diagramConstraints | _enum_enum__WEBPACK_IMPORTED_MODULE_0__.DiagramConstraints.Zoom;\n        }\n        if (constraints & _enum_enum__WEBPACK_IMPORTED_MODULE_0__.DiagramConstraints.PanX) {\n            diagramConstraints = diagramConstraints | _enum_enum__WEBPACK_IMPORTED_MODULE_0__.DiagramConstraints.PanX;\n        }\n        if (constraints & _enum_enum__WEBPACK_IMPORTED_MODULE_0__.DiagramConstraints.PanY) {\n            diagramConstraints = diagramConstraints | _enum_enum__WEBPACK_IMPORTED_MODULE_0__.DiagramConstraints.PanY;\n        }\n        if (constraints & _enum_enum__WEBPACK_IMPORTED_MODULE_0__.DiagramConstraints.Pan) {\n            diagramConstraints = diagramConstraints | _enum_enum__WEBPACK_IMPORTED_MODULE_0__.DiagramConstraints.Pan;\n        }\n        if (constraints & _enum_enum__WEBPACK_IMPORTED_MODULE_0__.DiagramConstraints.UndoRedo) {\n            diagramConstraints = diagramConstraints | _enum_enum__WEBPACK_IMPORTED_MODULE_0__.DiagramConstraints.UndoRedo;\n        }\n        if (constraints & _enum_enum__WEBPACK_IMPORTED_MODULE_0__.DiagramConstraints.ZoomTextEdit) {\n            diagramConstraints = diagramConstraints | _enum_enum__WEBPACK_IMPORTED_MODULE_0__.DiagramConstraints.ZoomTextEdit;\n        }\n        return diagramConstraints;\n    };\n    //(EJ2-272287) Provide support to convert the EJ1 diagram to EJ2 diagram\n    //Update the diagram tool from EJ1 to EJ2\n    Ej1Serialization.prototype.setDiagramTool = function (tool) {\n        var diagramTool = _enum_enum__WEBPACK_IMPORTED_MODULE_0__.DiagramTools.None;\n        if (tool & _enum_enum__WEBPACK_IMPORTED_MODULE_0__.DiagramTools.MultipleSelect) {\n            diagramTool = diagramTool | _enum_enum__WEBPACK_IMPORTED_MODULE_0__.DiagramTools.SingleSelect;\n        }\n        if (tool & _enum_enum__WEBPACK_IMPORTED_MODULE_0__.DiagramTools.ZoomPan) {\n            diagramTool = diagramTool | _enum_enum__WEBPACK_IMPORTED_MODULE_0__.DiagramTools.MultipleSelect;\n        }\n        if (tool & _enum_enum__WEBPACK_IMPORTED_MODULE_0__.DiagramTools.DrawOnce) {\n            diagramTool = diagramTool | _enum_enum__WEBPACK_IMPORTED_MODULE_0__.DiagramTools.ZoomPan;\n        }\n        if (tool & _enum_enum__WEBPACK_IMPORTED_MODULE_0__.DiagramTools.ContinuousDraw) {\n            diagramTool = diagramTool | _enum_enum__WEBPACK_IMPORTED_MODULE_0__.DiagramTools.DrawOnce;\n        }\n        if (tool & _enum_enum__WEBPACK_IMPORTED_MODULE_0__.DiagramTools.ContinuousDraw) {\n            diagramTool = diagramTool | _enum_enum__WEBPACK_IMPORTED_MODULE_0__.DiagramTools.ContinuousDraw;\n        }\n        return diagramTool;\n    };\n    //     /* tslint:disable */\n    // /**\n    //  * To provide the array of modules needed for control rendering\n    //  *\n    //  * @returns {ModuleDeclaration[]} To provide the array of modules needed for control rendering .\\\n    //  * @private\n    //  */\n    //  public requiredModules(): ModuleDeclaration[] {\n    //     const modules: ModuleDeclaration[] = [];\n    //     modules.push({\n    //         member: 'NodeProperties',\n    //         args: []\n    //     });\n    //  return modules;\n    //  }\n    /**\n     * To destroy the ruler\n     *\n     * @returns {void} To destroy the ruler\n     */\n    Ej1Serialization.prototype.destroy = function () {\n        /**\n         * Destroys the Print and Export module\n         */\n    };\n    /**\n     * Get module name.\n     *\n     * @returns {string} Returns the module name\n     */\n    Ej1Serialization.prototype.getModuleName = function () {\n        /**\n         * Returns the module name\n         */\n        return 'Ej1Serialization';\n    };\n    return Ej1Serialization;\n}());\n\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-diagrams/src/diagram/load-utility/modelProperties.js?");

/***/ })

}]);