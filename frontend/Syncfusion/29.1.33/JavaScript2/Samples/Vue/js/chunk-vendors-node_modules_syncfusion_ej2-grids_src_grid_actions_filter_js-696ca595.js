"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkej2_vue_samples"] = self["webpackChunkej2_vue_samples"] || []).push([["chunk-vendors-node_modules_syncfusion_ej2-grids_src_grid_actions_filter_js-696ca595"],{

/***/ "./node_modules/@syncfusion/ej2-grids/src/grid/actions/filter.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-grids/src/grid/actions/filter.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Filter: () => (/* binding */ Filter)\n/* harmony export */ });\n/* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @syncfusion/ej2-base */ \"./node_modules/@syncfusion/ej2-base/index.js\");\n/* harmony import */ var _base_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../base/util */ \"./node_modules/@syncfusion/ej2-grids/src/grid/base/util.js\");\n/* harmony import */ var _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @syncfusion/ej2-data */ \"./node_modules/@syncfusion/ej2-data/index.js\");\n/* harmony import */ var _base_constant__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../base/constant */ \"./node_modules/@syncfusion/ej2-grids/src/grid/base/constant.js\");\n/* harmony import */ var _base_enum__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../base/enum */ \"./node_modules/@syncfusion/ej2-grids/src/grid/base/enum.js\");\n/* harmony import */ var _renderer_row_renderer__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../renderer/row-renderer */ \"./node_modules/@syncfusion/ej2-grids/src/grid/renderer/row-renderer.js\");\n/* harmony import */ var _models_cell__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../models/cell */ \"./node_modules/@syncfusion/ej2-grids/src/grid/models/cell.js\");\n/* harmony import */ var _models_row__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../models/row */ \"./node_modules/@syncfusion/ej2-grids/src/grid/models/row.js\");\n/* harmony import */ var _renderer_filter_cell_renderer__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../renderer/filter-cell-renderer */ \"./node_modules/@syncfusion/ej2-grids/src/grid/renderer/filter-cell-renderer.js\");\n/* harmony import */ var _renderer_filter_menu_renderer__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../renderer/filter-menu-renderer */ \"./node_modules/@syncfusion/ej2-grids/src/grid/renderer/filter-menu-renderer.js\");\n/* harmony import */ var _actions_checkbox_filter__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../actions/checkbox-filter */ \"./node_modules/@syncfusion/ej2-grids/src/grid/actions/checkbox-filter.js\");\n/* harmony import */ var _actions_excel_filter__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../actions/excel-filter */ \"./node_modules/@syncfusion/ej2-grids/src/grid/actions/excel-filter.js\");\n/* harmony import */ var _base_string_literals__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../base/string-literals */ \"./node_modules/@syncfusion/ej2-grids/src/grid/base/string-literals.js\");\n/* harmony import */ var _syncfusion_ej2_inputs__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @syncfusion/ej2-inputs */ \"./node_modules/@syncfusion/ej2-inputs/index.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n *\n * The `Filter` module is used to handle filtering action.\n */\nvar Filter = /** @class */ (function () {\n    /**\n     * Constructor for Grid filtering module\n     *\n     * @param {IGrid} parent - specifies the IGrid\n     * @param {FilterSettings} filterSettings - specifies the filterSettings\n     * @param {ServiceLocator} serviceLocator - specifes the serviceLocator\n     * @hidden\n     */\n    function Filter(parent, filterSettings, serviceLocator) {\n        this.predicate = 'and';\n        this.contentRefresh = true;\n        this.filterByMethod = true;\n        this.refresh = true;\n        this.values = {};\n        this.operators = {};\n        this.cellText = {};\n        this.nextFlMenuOpen = '';\n        this.type = { 'Menu': _renderer_filter_menu_renderer__WEBPACK_IMPORTED_MODULE_9__.FilterMenuRenderer, 'CheckBox': _actions_checkbox_filter__WEBPACK_IMPORTED_MODULE_10__.CheckBoxFilter, 'Excel': _actions_excel_filter__WEBPACK_IMPORTED_MODULE_11__.ExcelFilter };\n        /** @hidden */\n        this.filterOperators = {\n            contains: 'contains', endsWith: 'endswith', equal: 'equal', greaterThan: 'greaterthan', greaterThanOrEqual: 'greaterthanorequal',\n            lessThan: 'lessthan', lessThanOrEqual: 'lessthanorequal', notEqual: 'notequal', startsWith: 'startswith', wildCard: 'wildcard',\n            isNull: 'isnull', notNull: 'notnull', like: 'like'\n        };\n        this.fltrDlgDetails = { field: '', isOpen: false };\n        /** @hidden */\n        this.skipNumberInput = ['=', ' ', '!'];\n        this.skipStringInput = ['>', '<', '='];\n        this.actualPredicate = {};\n        /** @hidden */\n        this.inputList = [];\n        this.parent = parent;\n        this.filterSettings = filterSettings;\n        this.serviceLocator = serviceLocator;\n        this.addEventListener();\n        this.setFullScreenDialog();\n    }\n    /**\n     * To render filter bar when filtering enabled.\n     *\n     * @param {NotifyArgs} e - specifies the NotifyArgs\n     * @returns {void}\n     * @hidden\n     */\n    Filter.prototype.render = function (e) {\n        if (_syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_2__.DataUtil.getObject('args.isFrozen', e)) {\n            return;\n        }\n        var gObj = this.parent;\n        this.l10n = this.serviceLocator.getService('localization');\n        this.getLocalizedCustomOperators();\n        if (this.parent.filterSettings.type === 'FilterBar') {\n            if (gObj.columns.length) {\n                var fltrElem = this.parent.element.querySelector('.e-filterbar');\n                if (fltrElem) {\n                    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.remove)(fltrElem);\n                }\n                var rowRenderer = new _renderer_row_renderer__WEBPACK_IMPORTED_MODULE_5__.RowRenderer(this.serviceLocator, _base_enum__WEBPACK_IMPORTED_MODULE_4__.CellType.Filter, gObj);\n                var cellrender = this.serviceLocator.getService('cellRendererFactory');\n                cellrender.addCellRenderer(_base_enum__WEBPACK_IMPORTED_MODULE_4__.CellType.Filter, new _renderer_filter_cell_renderer__WEBPACK_IMPORTED_MODULE_8__.FilterCellRenderer(this.parent, this.serviceLocator));\n                this.valueFormatter = this.serviceLocator.getService('valueFormatter');\n                rowRenderer.element = this.parent.createElement('tr', { className: 'e-filterbar', attrs: { role: 'row' } });\n                var row = this.generateRow();\n                row.data = this.values;\n                this.parent.getHeaderContent().querySelector('thead:not(.e-masked-thead)').appendChild(rowRenderer.element);\n                var rowdrag = this.parent.element.querySelector('.e-rowdragheader');\n                this.element = rowRenderer.render(row, gObj.getColumns(), null, null, rowRenderer.element);\n                if (this.element.querySelectorAll('.e-leftfreeze').length &&\n                    (this.element.querySelectorAll('.e-indentcell').length || this.element.querySelectorAll('.e-grouptopleftcell').length)) {\n                    var td = this.element.querySelectorAll('.e-indentcell, .e-grouptopleftcell');\n                    for (var i = 0; i < td.length; i++) {\n                        td[parseInt(i.toString(), 10)].classList.add('e-leftfreeze');\n                        (0,_base_util__WEBPACK_IMPORTED_MODULE_1__.applyStickyLeftRightPosition)(td[parseInt(i.toString(), 10)], i * 30, this.parent.enableRtl, 'Left');\n                    }\n                }\n                (0,_base_util__WEBPACK_IMPORTED_MODULE_1__.addFixedColumnBorder)(this.element);\n                var detail = this.element.querySelector('.e-detailheadercell');\n                if (detail) {\n                    detail.className = 'e-filterbarcell e-mastercell';\n                }\n                if (rowdrag) {\n                    if (rowdrag.classList.contains('e-leftfreeze')) {\n                        rowdrag.className = 'e-dragheadercell e-mastercell e-leftfreeze';\n                    }\n                    else {\n                        rowdrag.className = 'e-filterbarcell e-mastercell';\n                    }\n                }\n                var gCells = [].slice.call(this.element.getElementsByClassName('e-grouptopleftcell'));\n                if (gCells.length) {\n                    gCells[gCells.length - 1].classList.add('e-lastgrouptopleftcell');\n                }\n                this.wireEvents();\n                this.parent.notify(_base_constant__WEBPACK_IMPORTED_MODULE_3__.freezeRender, { case: 'filter' });\n            }\n        }\n    };\n    /**\n     * To show the responsive custom filter dialog\n     *\n     * @param {boolean} enable - specifes dialog open\n     * @returns {void}\n     * @hidden\n     */\n    Filter.prototype.showCustomFilter = function (enable) {\n        this.responsiveDialogRenderer.isCustomDialog = enable;\n        this.responsiveDialogRenderer.showResponsiveDialog(this.column);\n    };\n    Filter.prototype.renderResponsiveChangeAction = function (args) {\n        this.responsiveDialogRenderer.action = args.action;\n    };\n    /**\n     * To create the filter module.\n     *\n     * @param {Column} col - specifies the filtering column name\n     * @returns {void}\n     * @hidden\n     */\n    Filter.prototype.setFilterModel = function (col) {\n        var type = col.filter.type || this.parent.filterSettings.type;\n        this.filterModule = new this.type[\"\" + type](this.parent, this.parent.filterSettings, this.serviceLocator, this.customOperators, this);\n    };\n    /**\n     * To destroy the filter bar.\n     *\n     * @returns {void}\n     * @hidden\n     */\n    Filter.prototype.destroy = function () {\n        var gridElement = this.parent.element;\n        if (!gridElement || (!gridElement.querySelector('.' + _base_string_literals__WEBPACK_IMPORTED_MODULE_12__.gridHeader) && !gridElement.querySelector('.' + _base_string_literals__WEBPACK_IMPORTED_MODULE_12__.gridContent))) {\n            return;\n        }\n        if (this.filterModule) {\n            this.filterModule.destroy();\n        }\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        if (!this.parent.refreshing && (this.parent.isDestroyed || !this.parent.allowFiltering)) {\n            this.filterSettings.columns = [];\n        }\n        this.updateFilterMsg();\n        this.removeEventListener();\n        this.unWireEvents();\n        if (this.filterSettings.type === 'FilterBar' && !this.parent.isDestroyed) {\n            if (this.filterSettings.showFilterBarOperator) {\n                var dropdownlist = [].slice.call(this.element.getElementsByClassName('e-filterbaroperator'));\n                for (var i = 0; i < dropdownlist.length; i++) {\n                    if (dropdownlist[parseInt(i.toString(), 10)].ej2_instances[0]) {\n                        dropdownlist[parseInt(i.toString(), 10)].ej2_instances[0].destroy();\n                    }\n                }\n            }\n            this.parent.getColumns().map(function (column) {\n                if (column.filterBarTemplate && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(column.filterBarTemplate.destroy)) {\n                    var destroyFn = column.filterBarTemplate.destroy;\n                    if (typeof destroyFn === 'string') {\n                        destroyFn = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)(destroyFn, window);\n                    }\n                    destroyFn();\n                }\n            });\n        }\n        if (this.element) {\n            if (this.element.parentElement) {\n                for (var i = 0; i < this.inputList.length; i++) {\n                    _syncfusion_ej2_inputs__WEBPACK_IMPORTED_MODULE_13__.Input.destroy(this.inputList[parseInt(i.toString(), 10)], this.inputList[parseInt(i.toString(), 10)].element.nextElementSibling);\n                    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.remove)(this.inputList[parseInt(i.toString(), 10)].element);\n                }\n                this.inputList = [];\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.remove)(this.element);\n                this.element = null;\n            }\n            var filterBarElement = this.parent.getHeaderContent().querySelector('.e-filterbar');\n            if (filterBarElement) {\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.remove)(filterBarElement);\n            }\n        }\n    };\n    Filter.prototype.setFullScreenDialog = function () {\n        if (this.serviceLocator) {\n            this.serviceLocator.registerAdaptiveService(this, this.parent.enableAdaptiveUI, _base_enum__WEBPACK_IMPORTED_MODULE_4__.ResponsiveDialogAction.isFilter);\n        }\n    };\n    Filter.prototype.generateRow = function () {\n        var options = {};\n        var row = new _models_row__WEBPACK_IMPORTED_MODULE_7__.Row(options);\n        row.cells = this.generateCells();\n        return row;\n    };\n    Filter.prototype.generateCells = function () {\n        //TODO: generate dummy column for group, detail, stacked row here for filtering;\n        var cells = [];\n        if (this.parent.allowGrouping) {\n            for (var c = 0, len = this.parent.groupSettings.columns.length; c < len; c++) {\n                cells.push(this.generateCell({}, _base_enum__WEBPACK_IMPORTED_MODULE_4__.CellType.HeaderIndent));\n            }\n        }\n        if (this.parent.detailTemplate || this.parent.childGrid) {\n            cells.push(this.generateCell({}, _base_enum__WEBPACK_IMPORTED_MODULE_4__.CellType.DetailHeader));\n        }\n        if (this.parent.isRowDragable() && this.parent.getFrozenMode() !== 'Right') {\n            cells.push(this.generateCell({}, _base_enum__WEBPACK_IMPORTED_MODULE_4__.CellType.RowDragHIcon));\n        }\n        for (var _i = 0, _a = this.parent.getColumns(); _i < _a.length; _i++) {\n            var dummy = _a[_i];\n            cells.push(this.generateCell(dummy));\n        }\n        if (this.parent.isRowDragable() && this.parent.getFrozenMode() === 'Right') {\n            cells.push(this.generateCell({}, _base_enum__WEBPACK_IMPORTED_MODULE_4__.CellType.RowDragHIcon));\n        }\n        return cells;\n    };\n    Filter.prototype.generateCell = function (column, cellType) {\n        var opt = {\n            'visible': column.visible,\n            'isDataCell': false,\n            'rowId': '',\n            'column': column,\n            'cellType': cellType ? cellType : _base_enum__WEBPACK_IMPORTED_MODULE_4__.CellType.Filter,\n            'attributes': { title: this.l10n.getConstant('FilterbarTitle') }\n        };\n        return new _models_cell__WEBPACK_IMPORTED_MODULE_6__.Cell(opt);\n    };\n    /**\n     * To update filterSettings when applying filter.\n     *\n     * @returns {void}\n     * @hidden\n     */\n    Filter.prototype.updateModel = function () {\n        var col = this.column.isForeignColumn() ? this.parent.getColumnByUid(this.column.uid) :\n            this.parent.getColumnByField(this.fieldName);\n        this.filterObjIndex = this.getFilteredColsIndexByField(col);\n        this.prevFilterObject = this.filterSettings.columns[this.filterObjIndex];\n        var arrayVal = Array.isArray(this.value) && this.value.length ? this.value : [this.value];\n        var moduleName = this.parent.dataSource.adaptor && this.parent.dataSource.adaptor.getModuleName ? this.parent.dataSource.adaptor.getModuleName() : undefined;\n        for (var i = 0, len = arrayVal.length; i < len; i++) {\n            var field = col.isForeignColumn() ? col.foreignKeyValue : this.fieldName;\n            var isMenuNotEqual = this.operator === 'notequal';\n            if (this.operator === 'in' || this.operator === 'notin') {\n                if (this.parent.getDataModule().isRemote() && (col.type === 'date' || col.type === 'dateonly' || col.type === 'datetime')) {\n                    arrayVal = _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_2__.DataUtil.parse.arrayReplacer(arrayVal);\n                }\n                this.currentFilterObject = {\n                    field: field, uid: col.uid, isForeignKey: col.isForeignColumn(), operator: this.operator,\n                    value: arrayVal, predicate: this.predicate,\n                    matchCase: this.matchCase, ignoreAccent: this.ignoreAccent, actualFilterValue: {}, actualOperator: {}\n                };\n                len = 0;\n            }\n            else {\n                this.currentFilterObject = {\n                    field: field, uid: col.uid, isForeignKey: col.isForeignColumn(), operator: this.operator,\n                    value: arrayVal[parseInt(i.toString(), 10)], predicate: this.predicate,\n                    matchCase: this.matchCase, ignoreAccent: this.ignoreAccent, actualFilterValue: {}, actualOperator: {}\n                };\n            }\n            var index = this.getFilteredColsIndexByField(col);\n            if (index > -1 && (!Array.isArray(this.value) || (Array.isArray(this.value) && (this.operator === 'in' || this.operator === 'notin')))) {\n                this.filterSettings.columns[parseInt(index.toString(), 10)] = this.currentFilterObject;\n            }\n            else {\n                this.filterSettings.columns.push(this.currentFilterObject);\n            }\n            if (!this.column.isForeignColumn() && (this.prevFilterObject && ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.prevFilterObject.value)\n                || this.prevFilterObject.value === '') && (this.prevFilterObject.operator === 'equal'\n                || this.prevFilterObject.operator === 'notequal')) && (moduleName !== 'ODataAdaptor' && moduleName !== 'ODataV4Adaptor')) {\n                this.handleExistingFilterCleanup(field);\n            }\n            if (!this.column.isForeignColumn() && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.value) && (this.operator === 'equal' ||\n                this.operator === 'notequal') && (moduleName !== 'ODataAdaptor' && moduleName !== 'ODataV4Adaptor')) {\n                this.handleExistingFilterCleanup(field);\n                if (col.type === 'string') {\n                    this.filterSettings.columns.push({\n                        field: field, ignoreAccent: this.ignoreAccent, matchCase: this.matchCase,\n                        operator: this.operator, predicate: isMenuNotEqual ? 'and' : 'or', value: ''\n                    });\n                }\n                this.filterSettings.columns.push({\n                    field: field, ignoreAccent: this.ignoreAccent, matchCase: this.matchCase,\n                    operator: this.operator, predicate: isMenuNotEqual ? 'and' : 'or', value: undefined\n                });\n                this.filterSettings.columns.push({\n                    field: field, ignoreAccent: this.ignoreAccent, matchCase: this.matchCase,\n                    operator: this.operator, predicate: isMenuNotEqual ? 'and' : 'or', value: null\n                });\n            }\n        }\n        // eslint-disable-next-line no-self-assign\n        this.filterSettings.columns = this.filterSettings.columns;\n        this.parent.dataBind();\n    };\n    Filter.prototype.handleExistingFilterCleanup = function (field) {\n        for (var i = 0; i < this.filterSettings.columns.length; i++) {\n            if (this.filterSettings.columns[\"\" + i].field === field &&\n                (this.filterSettings.columns[\"\" + i].operator === 'equal' ||\n                    this.filterSettings.columns[\"\" + i].operator === 'notequal') &&\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.filterSettings.columns[\"\" + i].value)) {\n                this.filterSettings.columns.splice(i, 1);\n                i = i - 1;\n            }\n        }\n    };\n    Filter.prototype.getFilteredColsIndexByField = function (col) {\n        var cols = this.filterSettings.columns;\n        for (var i = 0, len = cols.length; i < len; i++) {\n            if (cols[parseInt(i.toString(), 10)].uid === col.uid || (col.isForeignColumn()\n                && this.parent.getColumnByUid(col.uid).field === col.foreignKeyValue)) {\n                return i;\n            }\n        }\n        return -1;\n    };\n    /**\n     * To trigger action complete event.\n     *\n     * @param {NotifyArgs} e - specifies the NotifyArgs\n     * @returns {void}\n     * @hidden\n     */\n    Filter.prototype.onActionComplete = function (e) {\n        var args = !this.isRemove ? {\n            currentFilterObject: this.currentFilterObject,\n            /* tslint:disable:no-string-literal */\n            currentFilteringColumn: !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.column) ? this.column.field : undefined,\n            /* tslint:enable:no-string-literal */\n            columns: this.filterSettings.columns, requestType: 'filtering', type: _base_constant__WEBPACK_IMPORTED_MODULE_3__.actionComplete\n        } : {\n            requestType: 'filtering', type: _base_constant__WEBPACK_IMPORTED_MODULE_3__.actionComplete\n        };\n        this.parent.trigger(_base_constant__WEBPACK_IMPORTED_MODULE_3__.actionComplete, (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)(e, args));\n        this.isRemove = false;\n    };\n    Filter.prototype.wireEvents = function () {\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(this.parent.getHeaderContent(), 'keyup', this.keyUpHandlerImmediate, this);\n    };\n    Filter.prototype.unWireEvents = function () {\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(this.parent.getHeaderContent(), 'keyup', this.keyUpHandlerImmediate);\n    };\n    Filter.prototype.enableAfterRender = function (e) {\n        if (e.module === this.getModuleName() && e.enable) {\n            this.parent.getHeaderTable().classList.add('e-sortfilter');\n            this.render();\n        }\n    };\n    Filter.prototype.refreshFilterValue = function () {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.parent.modelObserver.boundedEvents)) {\n            this.parent.removeEventListener(_base_constant__WEBPACK_IMPORTED_MODULE_3__.beforeDataBound, this.refreshFilterValueFn);\n        }\n        if ((this.filterSettings.type === 'FilterBar' || this.filterSettings.type === 'Excel') && this.filterSettings.columns.length &&\n            !this.parent.getCurrentViewRecords().length) {\n            this.initialEnd();\n        }\n    };\n    Filter.prototype.initialEnd = function () {\n        this.parent.off(_base_constant__WEBPACK_IMPORTED_MODULE_3__.contentReady, this.initialEnd);\n        if (this.parent.getColumns().length && this.filterSettings.columns.length) {\n            var gObj = this.parent;\n            this.contentRefresh = false;\n            this.initialLoad = true;\n            for (var _i = 0, _a = gObj.filterSettings.columns; _i < _a.length; _i++) {\n                var col = _a[_i];\n                this.filterByColumn(col.field, col.operator, col.value, col.predicate, col.matchCase, col.ignoreAccent, col.actualFilterValue, col.actualOperator, col.isForeignKey);\n            }\n            this.initialLoad = false;\n            this.updateFilterMsg();\n            this.contentRefresh = true;\n        }\n    };\n    /**\n     * @returns {void}\n     * @hidden\n     */\n    Filter.prototype.addEventListener = function () {\n        if (this.parent.isDestroyed) {\n            return;\n        }\n        this.parent.on(_base_constant__WEBPACK_IMPORTED_MODULE_3__.setFullScreenDialog, this.setFullScreenDialog, this);\n        this.parent.on(_base_constant__WEBPACK_IMPORTED_MODULE_3__.uiUpdate, this.enableAfterRender, this);\n        this.parent.on(_base_constant__WEBPACK_IMPORTED_MODULE_3__.filterComplete, this.onActionComplete, this);\n        this.parent.on(_base_constant__WEBPACK_IMPORTED_MODULE_3__.inBoundModelChanged, this.onPropertyChanged, this);\n        this.parent.on(_base_constant__WEBPACK_IMPORTED_MODULE_3__.keyPressed, this.keyUpHandler, this);\n        this.parent.on(_base_constant__WEBPACK_IMPORTED_MODULE_3__.columnPositionChanged, this.columnPositionChanged, this);\n        this.parent.on(_base_constant__WEBPACK_IMPORTED_MODULE_3__.headerRefreshed, this.render, this);\n        this.parent.on(_base_constant__WEBPACK_IMPORTED_MODULE_3__.contentReady, this.initialEnd, this);\n        this.parent.on(_base_constant__WEBPACK_IMPORTED_MODULE_3__.filterMenuClose, this.filterMenuClose, this);\n        this.parent.on(_base_constant__WEBPACK_IMPORTED_MODULE_3__.renderResponsiveChangeAction, this.renderResponsiveChangeAction, this);\n        this.docClickHandler = this.clickHandler.bind(this);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(document, 'click', this.docClickHandler, this);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(this.parent.element, 'mousedown', this.refreshClearIcon, this);\n        this.parent.on(_base_constant__WEBPACK_IMPORTED_MODULE_3__.filterOpen, this.columnMenuFilter, this);\n        this.parent.on(_base_constant__WEBPACK_IMPORTED_MODULE_3__.click, this.filterIconClickHandler, this);\n        this.parent.on('persist-data-changed', this.initialEnd, this);\n        this.parent.on(_base_constant__WEBPACK_IMPORTED_MODULE_3__.closeFilterDialog, this.clickHandler, this);\n        this.parent.on(_base_constant__WEBPACK_IMPORTED_MODULE_3__.destroy, this.destroy, this);\n        this.refreshFilterValueFn = this.refreshFilterValue.bind(this);\n        this.parent.addEventListener(_base_constant__WEBPACK_IMPORTED_MODULE_3__.beforeDataBound, this.refreshFilterValueFn);\n    };\n    /**\n     * @returns {void}\n     * @hidden\n     */\n    Filter.prototype.removeEventListener = function () {\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(document, 'click', this.docClickHandler);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(this.parent.element, 'mousedown', this.refreshClearIcon);\n        if (this.parent.isDestroyed) {\n            return;\n        }\n        this.parent.off(_base_constant__WEBPACK_IMPORTED_MODULE_3__.setFullScreenDialog, this.setFullScreenDialog);\n        this.parent.off(_base_constant__WEBPACK_IMPORTED_MODULE_3__.uiUpdate, this.enableAfterRender);\n        this.parent.off(_base_constant__WEBPACK_IMPORTED_MODULE_3__.filterComplete, this.onActionComplete);\n        this.parent.off(_base_constant__WEBPACK_IMPORTED_MODULE_3__.inBoundModelChanged, this.onPropertyChanged);\n        this.parent.off(_base_constant__WEBPACK_IMPORTED_MODULE_3__.keyPressed, this.keyUpHandler);\n        this.parent.off(_base_constant__WEBPACK_IMPORTED_MODULE_3__.columnPositionChanged, this.columnPositionChanged);\n        this.parent.off(_base_constant__WEBPACK_IMPORTED_MODULE_3__.headerRefreshed, this.render);\n        this.parent.off(_base_constant__WEBPACK_IMPORTED_MODULE_3__.filterOpen, this.columnMenuFilter);\n        this.parent.off(_base_constant__WEBPACK_IMPORTED_MODULE_3__.filterMenuClose, this.filterMenuClose);\n        this.parent.off(_base_constant__WEBPACK_IMPORTED_MODULE_3__.renderResponsiveChangeAction, this.renderResponsiveChangeAction);\n        this.parent.off(_base_constant__WEBPACK_IMPORTED_MODULE_3__.click, this.filterIconClickHandler);\n        this.parent.off(_base_constant__WEBPACK_IMPORTED_MODULE_3__.closeFilterDialog, this.clickHandler);\n        this.parent.off(_base_constant__WEBPACK_IMPORTED_MODULE_3__.destroy, this.destroy);\n    };\n    Filter.prototype.refreshClearIcon = function (e) {\n        if (this.parent.allowFiltering && this.parent.filterSettings.type === 'FilterBar' &&\n            e.target.closest('th') && e.target.closest('th').classList.contains('e-filterbarcell') &&\n            e.target.classList.contains('e-clear-icon')) {\n            var targetText = e.target.previousElementSibling;\n            _syncfusion_ej2_inputs__WEBPACK_IMPORTED_MODULE_13__.Input.setValue(null, targetText, 'Never', true);\n            if (this.filterSettings.mode === 'Immediate') {\n                this.removeFilteredColsByField(targetText.id.slice(0, -14)); //Length of _filterBarcell = 14\n            }\n        }\n    };\n    Filter.prototype.filterMenuClose = function () {\n        this.fltrDlgDetails.isOpen = false;\n    };\n    /**\n     * Filters the Grid row by fieldName, filterOperator, and filterValue.\n     *\n     * @param  {string} fieldName - Defines the field name of the filter column.\n     * @param  {string} filterOperator - Defines the operator to filter records.\n     * @param  {string | number | Date | boolean} filterValue - Defines the value which is used to filter records.\n     * @param  {string} predicate - Defines the relationship of one filter query with another by using AND or OR predicate.\n     * @param  {boolean} matchCase - If match case is set to true, then the filter records\n     * the exact match or <br> filters records that are case insensitive (uppercase and lowercase letters treated the same).\n     * @param {boolean} ignoreAccent - If ignoreAccent set to true, then filter ignores the diacritic characters or accents while filtering.\n     * @param  {string} actualFilterValue - Defines the actual filter value for the filter column.\n     * @param  {string} actualOperator - Defines the actual filter operator for the filter column.\n     * @param  {boolean} isForeignColumn - Defines whether it is a foreign key column.\n     * @returns {void}\n     */\n    Filter.prototype.filterByColumn = function (fieldName, filterOperator, filterValue, predicate, matchCase, ignoreAccent, actualFilterValue, actualOperator, isForeignColumn) {\n        var _this = this;\n        var gObj = this.parent;\n        var filterCell;\n        if (typeof filterValue === 'string') {\n            filterValue = this.parent.sanitize(filterValue);\n        }\n        this.column = gObj.grabColumnByFieldFromAllCols(fieldName, isForeignColumn);\n        if (this.filterSettings.type === 'FilterBar' && this.filterSettings.showFilterBarOperator\n            && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.column.filterBarTemplate) && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.column.filterTemplate)) {\n            filterOperator = this.getOperatorName(fieldName);\n        }\n        if (filterOperator === 'like' && filterValue && filterValue.indexOf('%') === -1) {\n            filterValue = '%' + filterValue + '%';\n        }\n        if (!this.column) {\n            return;\n        }\n        if (this.filterSettings.type === 'FilterBar') {\n            filterCell = gObj.getHeaderContent().querySelector('[id=\\'' + this.column.field + '_filterBarcell\\']');\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.column.allowFiltering) && !this.column.allowFiltering) {\n            this.parent.log('action_disabled_column', { moduleName: this.getModuleName(), columnName: this.column.headerText });\n            return;\n        }\n        if ((0,_base_util__WEBPACK_IMPORTED_MODULE_1__.isActionPrevent)(gObj)) {\n            gObj.notify(_base_constant__WEBPACK_IMPORTED_MODULE_3__.preventBatch, {\n                instance: this, handler: this.filterByColumn, arg1: fieldName, arg2: filterOperator, arg3: filterValue, arg4: predicate,\n                arg5: matchCase, arg6: ignoreAccent, arg7: actualFilterValue, arg8: actualOperator\n            });\n            return;\n        }\n        this.predicate = predicate ? predicate : Array.isArray(filterValue) ? 'or' : 'and';\n        this.value = filterValue;\n        this.matchCase = matchCase || false;\n        this.ignoreAccent = this.ignoreAccent = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(ignoreAccent) ? ignoreAccent : this.parent.filterSettings.ignoreAccent;\n        this.fieldName = fieldName;\n        this.operator = filterOperator;\n        filterValue = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(filterValue) ? filterValue.toString() : filterValue;\n        if (filterValue === '') {\n            filterValue = null;\n        }\n        if (this.column.type === 'number' || this.column.type === 'date') {\n            this.matchCase = true;\n        }\n        if (filterCell && this.filterSettings.type === 'FilterBar') {\n            if ((filterValue && filterValue.length < 1) || (!this.filterByMethod &&\n                this.checkForSkipInput(this.column, filterValue))) {\n                this.filterStatusMsg = (filterValue && filterValue.length < 1) ? '' : this.l10n.getConstant('InvalidFilterMessage');\n                this.updateFilterMsg();\n                return;\n            }\n            if (filterCell.value !== filterValue) {\n                filterCell.value = filterValue;\n            }\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.column.format)) {\n            this.applyColumnFormat(filterValue);\n            if (this.initialLoad && this.filterSettings.type === 'FilterBar') {\n                filterCell.value = this.values[this.column.field];\n            }\n        }\n        else {\n            this.values[this.column.field] = filterValue; //this line should be above updateModel\n        }\n        var predObj = {\n            field: this.fieldName,\n            predicate: predicate,\n            matchCase: matchCase,\n            ignoreAccent: ignoreAccent,\n            operator: this.operator,\n            value: this.value,\n            type: this.column.type\n        };\n        var filterColumn = this.parent.filterSettings.columns.filter(function (fColumn) {\n            return (fColumn.field === _this.fieldName);\n        });\n        if (filterColumn.length > 1 && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.actualPredicate[this.fieldName])) {\n            this.actualPredicate[this.fieldName].push(predObj);\n        }\n        else {\n            this.actualPredicate[this.fieldName] = [predObj];\n        }\n        if (this.checkAlreadyColFiltered(this.column.field)) {\n            return;\n        }\n        this.updateModel();\n    };\n    Filter.prototype.applyColumnFormat = function (filterValue) {\n        var _this = this;\n        var getFlvalue = (this.column.type === 'date' || this.column.type === 'datetime' || this.column.type === 'dateonly') ?\n            new Date(filterValue) : parseFloat(filterValue);\n        if ((this.column.type === 'date' || this.column.type === 'datetime' || this.column.type === 'dateonly') && filterValue &&\n            Array.isArray(this.value) && filterValue.split(',').length > 1) {\n            this.values[this.column.field] = ((filterValue).split(',')).map(function (val) {\n                if (val === '') {\n                    val = null;\n                }\n                return _this.setFormatForFlColumn(new Date(val), _this.column);\n            });\n        }\n        else {\n            this.values[this.column.field] = this.setFormatForFlColumn(getFlvalue, this.column);\n        }\n    };\n    // To skip the second time request to server while applying initial filtering - EJ2-44361\n    Filter.prototype.skipUid = function (col) {\n        var flag = true;\n        var colLen = Object.keys((col));\n        for (var i = 0; i < colLen.length; i++) {\n            var key = Object.keys(col[colLen[parseInt(i.toString(), 10)]]);\n            if (key.length === 1 && key[0] === 'uid') {\n                flag = false;\n            }\n        }\n        return flag;\n    };\n    Filter.prototype.onPropertyChanged = function (e) {\n        if (e.module !== this.getModuleName()) {\n            return;\n        }\n        for (var _i = 0, _a = Object.keys(e.properties); _i < _a.length; _i++) {\n            var prop = _a[_i];\n            switch (prop) {\n                case 'columns':\n                    // eslint-disable-next-line no-case-declarations\n                    var col = 'columns';\n                    // eslint-disable-next-line no-case-declarations\n                    var args = {\n                        currentFilterObject: this.currentFilterObject, currentFilteringColumn: this.column ?\n                            this.column.field : undefined, action: 'filter', columns: this.filterSettings.columns,\n                        requestType: 'filtering', type: _base_constant__WEBPACK_IMPORTED_MODULE_3__.actionBegin, cancel: false\n                    };\n                    if (this.contentRefresh && this.skipUid(e.properties[\"\" + col])) {\n                        this.parent.notify(_base_constant__WEBPACK_IMPORTED_MODULE_3__.modelChanged, args);\n                        if (args.cancel) {\n                            if ((this.filterSettings.type === 'CheckBox' || this.filterSettings.type === 'Excel')) {\n                                this.filterSettings.columns = (this.actualData.length <= 1) ? this.checkboxPrevFilterObject :\n                                    this.checkboxFilterObject;\n                                this.actualPredicate[this.column.field] = this.filterSettings.columns;\n                                var col_1 = this.parent.getColumnByField(this.column.field);\n                                var iconClass = this.parent.showColumnMenu && col_1.showColumnMenu ? '.e-columnmenu' : '.e-icon-filter';\n                                var filterIconElement = this.parent.getColumnHeaderByField(this.column.field)\n                                    .querySelector(iconClass);\n                                if (this.checkboxPrevFilterObject.length === 0) {\n                                    filterIconElement.classList.remove('e-filtered');\n                                }\n                                else {\n                                    filterIconElement.classList.add('e-filtered');\n                                }\n                            }\n                            else {\n                                if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.prevFilterObject)) {\n                                    this.filterSettings.columns.splice(this.filterSettings.columns.length - 1, 1);\n                                }\n                                else {\n                                    this.filterSettings.columns[this.filterObjIndex] = this.prevFilterObject;\n                                }\n                            }\n                            return;\n                        }\n                        this.updateFilterIcon();\n                        this.refreshFilterSettings();\n                        this.updateFilterMsg();\n                        this.updateFilter();\n                    }\n                    break;\n                case 'showFilterBarStatus':\n                    if (e.properties[\"\" + prop]) {\n                        this.updateFilterMsg();\n                    }\n                    else if (this.parent.allowPaging) {\n                        this.parent.updateExternalMessage('');\n                    }\n                    break;\n                case 'showFilterBarOperator':\n                case 'type':\n                    this.parent.refreshHeader();\n                    this.refreshFilterSettings();\n                    if (this.parent.height === '100%') {\n                        this.parent.scrollModule.refresh();\n                    }\n                    break;\n            }\n        }\n    };\n    Filter.prototype.refreshFilterSettings = function () {\n        if (this.filterSettings.type === 'FilterBar') {\n            for (var i = 0; i < this.filterSettings.columns.length; i++) {\n                this.column = this.parent.grabColumnByUidFromAllCols(this.filterSettings.columns[parseInt(i.toString(), 10)].uid);\n                var filterValue = this.filterSettings.columns[parseInt(i.toString(), 10)].value;\n                filterValue = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(filterValue) && filterValue.toString();\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.column.format)) {\n                    this.applyColumnFormat(filterValue);\n                }\n                else {\n                    var key = this.filterSettings.columns[parseInt(i.toString(), 10)].field;\n                    this.values[\"\" + key] = this.filterSettings.columns[parseInt(i.toString(), 10)].value;\n                }\n                var filterElement = this.getFilterBarElement(this.column.field);\n                if (filterElement) {\n                    if (this.cellText[this.filterSettings.columns[parseInt(i.toString(), 10)].field] !== ''\n                        && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.cellText[this.filterSettings.columns[parseInt(i.toString(), 10)].field])) {\n                        filterElement.value = this.cellText[this.column.field];\n                    }\n                    else {\n                        filterElement.value = this.filterSettings.columns[parseInt(i.toString(), 10)].value;\n                    }\n                }\n            }\n            if (this.filterSettings.columns.length === 0) {\n                var col = this.parent.getColumns();\n                for (var i = 0; i < col.length; i++) {\n                    var filterElement = this.getFilterBarElement(col[parseInt(i.toString(), 10)].field);\n                    if (filterElement && filterElement.value !== '') {\n                        filterElement.value = '';\n                        delete this.values[col[parseInt(i.toString(), 10)].field];\n                    }\n                }\n            }\n        }\n    };\n    Filter.prototype.updateFilterIcon = function () {\n        if (this.filterSettings.columns.length === 0 && this.parent.element.querySelector('.e-filtered')) {\n            var fltrIconElement = [].slice.call(this.parent.element.getElementsByClassName('e-filtered'));\n            for (var i = 0, len = fltrIconElement.length; i < len; i++) {\n                fltrIconElement[parseInt(i.toString(), 10)].classList.remove('e-filtered');\n            }\n        }\n    };\n    Filter.prototype.getFilterBarElement = function (col) {\n        var selector = '[id=\\'' + col + '_filterBarcell\\']';\n        var filterElement;\n        if (selector && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.element)) {\n            filterElement = this.element.querySelector(selector);\n        }\n        return filterElement;\n    };\n    /**\n     * @private\n     * @returns {void}\n     */\n    Filter.prototype.refreshFilter = function () {\n        this.refreshFilterSettings();\n        this.updateFilterMsg();\n    };\n    /**\n     * Clears all the filtered rows of the Grid.\n     *\n     * @param {string[]} fields - returns the fields\n     * @returns {void}\n     */\n    Filter.prototype.clearFiltering = function (fields) {\n        var _this = this;\n        var cols = (0,_base_util__WEBPACK_IMPORTED_MODULE_1__.getActualPropFromColl)(this.filterSettings.columns);\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(fields)) {\n            this.refresh = false;\n            fields.forEach(function (field) { _this.removeFilteredColsByField(field, false); });\n            this.parent.setProperties({ filterSettings: { columns: this.filterSettings.columns } }, true);\n            this.parent.renderModule.refresh();\n            this.refresh = true;\n            return;\n        }\n        if ((0,_base_util__WEBPACK_IMPORTED_MODULE_1__.isActionPrevent)(this.parent)) {\n            this.parent.notify(_base_constant__WEBPACK_IMPORTED_MODULE_3__.preventBatch, { instance: this, handler: this.clearFiltering });\n            return;\n        }\n        for (var i = 0; i < cols.length; i++) {\n            cols[parseInt(i.toString(), 10)].uid = cols[parseInt(i.toString(), 10)].uid\n                || this.parent.getColumnByField(cols[parseInt(i.toString(), 10)].field).uid;\n        }\n        var colUid = cols.map(function (f) { return f.uid; });\n        var filteredcols = colUid.filter(function (item, pos) { return colUid.indexOf(item) === pos; });\n        this.refresh = false;\n        for (var i = 0, len = filteredcols.length; i < len; i++) {\n            this.removeFilteredColsByField(this.parent.getColumnByUid(filteredcols[parseInt(i.toString(), 10)]).field, false);\n        }\n        this.refresh = true;\n        if (filteredcols.length) {\n            this.parent.renderModule.refresh();\n        }\n        if (this.parent.filterSettings.columns.length === 0 && this.parent.element.querySelector('.e-filtered')) {\n            var fltrElement = [].slice.call(this.parent.element.getElementsByClassName('e-filtered'));\n            for (var i = 0, len = fltrElement.length; i < len; i++) {\n                fltrElement[0].classList.remove('e-filtered');\n            }\n        }\n        this.isRemove = true;\n        this.filterStatusMsg = '';\n        this.updateFilterMsg();\n    };\n    Filter.prototype.checkAlreadyColFiltered = function (field) {\n        var columns = this.filterSettings.columns;\n        for (var _i = 0, columns_1 = columns; _i < columns_1.length; _i++) {\n            var col = columns_1[_i];\n            if (col.field === field && this.parent.filterSettings.type === 'Menu' &&\n                (col.type === 'date' || col.type === 'datetime')) {\n                return (this.checkDateColumnValue(col.value, this.value) &&\n                    col.operator === this.operator && col.predicate === this.predicate);\n            }\n            else if (col.field === field && col.value === this.value &&\n                col.operator === this.operator && col.predicate === this.predicate) {\n                return true;\n            }\n        }\n        return false;\n    };\n    Filter.prototype.checkDateColumnValue = function (colDate, filterDate) {\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(colDate) && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(filterDate)) {\n            return true;\n        }\n        else if (colDate instanceof Date && filterDate instanceof Date) {\n            return colDate.getTime() === filterDate.getTime();\n        }\n        return false;\n    };\n    Filter.prototype.columnMenuFilter = function (args) {\n        this.column = args.col;\n        var ele = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(args.target, '#' + args.id);\n        if (args.isClose && !ele) {\n            this.filterModule.closeDialog();\n        }\n        else if (ele) {\n            this.filterDialogOpen(this.column, args.target);\n        }\n    };\n    Filter.prototype.filterDialogOpen = function (col, target, left, top) {\n        if (this.filterModule) {\n            this.filterModule.isresetFocus = false;\n            this.filterModule.closeDialog();\n        }\n        this.setFilterModel(col);\n        this.filterModule.openDialog(this.createOptions(col, target, left, top));\n    };\n    /**\n     * Create filter dialog options\n     *\n     * @param  {Column} col - Filtering column detail.\n     * @param  {Element} target -  Filter dialog target.\n     * @param  {number} left -  Filter dialog left position.\n     * @param  {number} top -  Filter dialog top position.\n     * @returns {Object} returns the created dialog options\n     * @hidden\n     */\n    Filter.prototype.createOptions = function (col, target, left, top) {\n        var gObj = this.parent;\n        var dataSource = col.filter.dataSource || gObj.dataSource && 'result' in gObj.dataSource ? gObj.dataSource :\n            gObj.getDataModule().dataManager;\n        var type = col.filter.type || this.parent.filterSettings.type;\n        var options = {\n            type: col.type, field: col.field, displayName: col.headerText,\n            dataSource: dataSource, format: col.format, height: 800, columns: gObj.getColumns(),\n            filteredColumns: gObj.filterSettings.columns, target: target, dataManager: gObj.getDataModule().dataManager,\n            formatFn: col.getFormatter(), ignoreAccent: gObj.filterSettings.ignoreAccent,\n            parserFn: col.getParser(), query: gObj.query, template: col.getFilterItemTemplate(),\n            hideSearchbox: (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(col.filter.hideSearchbox) ? false : col.filter.hideSearchbox,\n            handler: this.filterHandler.bind(this), localizedStrings: gObj.getLocaleConstants(),\n            position: { X: left, Y: top }, column: col, foreignKeyValue: col.foreignKeyValue,\n            actualPredicate: this.actualPredicate, localeObj: gObj.localeObj,\n            isRemote: gObj.getDataModule().isRemote(), allowCaseSensitive: this.filterSettings.enableCaseSensitivity,\n            isResponsiveFilter: this.parent.enableAdaptiveUI,\n            operator: this.actualPredicate[col.field] && type === 'Menu' ? this.actualPredicate[col.field][0].operator : 'equal',\n            parentTotalDataCount: gObj.getDataModule().isRemote() && gObj.allowPaging ? gObj.pagerModule.pagerObj.totalRecordsCount :\n                gObj.getDataModule().isRemote() ? gObj.totalDataRecordsCount : gObj.getFilteredRecords().length,\n            parentCurrentViewDataCount: gObj.currentViewData.length,\n            parentFilteredLocalRecords: !gObj.getDataModule().isRemote() ? gObj.getFilteredRecords() : []\n        };\n        return options;\n    };\n    /**\n     * Removes filtered column by field name.\n     *\n     * @param  {string} field - Defines column field name to remove filter.\n     * @param  {boolean} isClearFilterBar - Specifies whether the filter bar value needs to be cleared.\n     * @returns {void}\n     * @hidden\n     */\n    Filter.prototype.removeFilteredColsByField = function (field, isClearFilterBar) {\n        var fCell;\n        var cols = this.filterSettings.columns;\n        if ((0,_base_util__WEBPACK_IMPORTED_MODULE_1__.isActionPrevent)(this.parent)) {\n            var args = { instance: this, handler: this.removeFilteredColsByField, arg1: field, arg2: isClearFilterBar };\n            this.parent.notify(_base_constant__WEBPACK_IMPORTED_MODULE_3__.preventBatch, args);\n            return;\n        }\n        var colUid = cols.map(function (f) { return f.uid; });\n        var filteredColsUid = colUid.filter(function (item, pos) { return colUid.indexOf(item) === pos; });\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.column)) {\n            var col = this.column.isForeignColumn() ? this.parent.getColumnByUid(this.column.uid) :\n                this.parent.getColumnByField(field);\n            this.filterObjIndex = this.getFilteredColsIndexByField(col);\n            this.prevFilterObject = this.filterSettings.columns[this.filterObjIndex];\n        }\n        var _loop_1 = function (i, len) {\n            cols[parseInt(i.toString(), 10)].uid = cols[parseInt(i.toString(), 10)].uid\n                || this_1.parent.getColumnByField(cols[parseInt(i.toString(), 10)].field).uid;\n            var len_1 = cols.length;\n            var column = this_1.parent.grabColumnByUidFromAllCols(filteredColsUid[parseInt(i.toString(), 10)]);\n            if (column.field === field || (column.field === column.foreignKeyValue && column.isForeignColumn())) {\n                var currentPred = this_1.filterSettings.columns.filter(function (e) {\n                    return e.uid === column.uid;\n                })[0];\n                if (this_1.filterSettings.type === 'FilterBar' && !isClearFilterBar) {\n                    var selector = '[id=\\'' + column.field + '_filterBarcell\\']';\n                    fCell = this_1.parent.getHeaderContent().querySelector(selector);\n                    if (fCell) {\n                        fCell.value = '';\n                        delete this_1.values[\"\" + field];\n                    }\n                }\n                while (len_1--) {\n                    if (cols[parseInt(len_1.toString(), 10)].uid === column.uid) {\n                        cols.splice(len_1, 1);\n                    }\n                }\n                var fltrElement = this_1.parent.getColumnHeaderByField(column.field);\n                if (this_1.filterSettings.type !== 'FilterBar' || this_1.parent.showColumnMenu) {\n                    var iconClass = this_1.parent.showColumnMenu && column.showColumnMenu ? '.e-columnmenu' : '.e-icon-filter';\n                    fltrElement.querySelector(iconClass).classList.remove('e-filtered');\n                }\n                this_1.isRemove = true;\n                if (this_1.actualPredicate[\"\" + field]) {\n                    delete this_1.actualPredicate[\"\" + field];\n                }\n                if (this_1.values[\"\" + field]) {\n                    delete this_1.values[\"\" + field];\n                }\n                if (this_1.refresh) {\n                    this_1.parent.notify(_base_constant__WEBPACK_IMPORTED_MODULE_3__.modelChanged, {\n                        requestType: 'filtering', type: _base_constant__WEBPACK_IMPORTED_MODULE_3__.actionBegin, currentFilterObject: currentPred,\n                        currentFilterColumn: column, action: 'clearFilter'\n                    });\n                }\n                return \"break\";\n            }\n        };\n        var this_1 = this;\n        for (var i = 0, len = filteredColsUid.length; i < len; i++) {\n            var state_1 = _loop_1(i, len);\n            if (state_1 === \"break\")\n                break;\n        }\n        this.updateFilterMsg();\n    };\n    /**\n     * For internal use only - Get the module name.\n     *\n     * @returns {string} returns the module name\n     * @private\n     */\n    Filter.prototype.getModuleName = function () {\n        return 'filter';\n    };\n    Filter.prototype.keyUpHandlerImmediate = function (e) {\n        if (e.keyCode !== 13) {\n            this.keyUpHandler(e);\n        }\n    };\n    Filter.prototype.keyUpHandler = function (e) {\n        var gObj = this.parent;\n        var target = e.target;\n        if (target && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.matches)(target, '.e-filterbar input')) {\n            var closeHeaderEle = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(target, 'th.e-filterbarcell');\n            this.column = gObj.getColumnByUid(closeHeaderEle.getAttribute('e-mappinguid'));\n            if (!this.column) {\n                return;\n            }\n            if (e.action === 'altDownArrow' && this.parent.filterSettings.showFilterBarOperator) {\n                var dropDownListInput = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(target, 'span').querySelector('.e-filterbaroperator');\n                dropDownListInput.ej2_instances[0].showPopup();\n                dropDownListInput.focus();\n            }\n            if ((this.filterSettings.mode === 'Immediate' || (e.keyCode === 13 &&\n                !e.target.classList.contains('e-filterbaroperator')))\n                && e.keyCode !== 9 && !this.column.filterTemplate) {\n                this.value = target.value.trim();\n                this.processFilter(e);\n            }\n        }\n        if (e.action === 'altDownArrow' && this.filterSettings.type !== 'FilterBar' && !(0,_base_util__WEBPACK_IMPORTED_MODULE_1__.parentsUntil)(e.target, 'e-toolbar')\n            && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.parent.element.querySelector('.e-filter-popup')) && !this.parent.enableAdaptiveUI) {\n            var element = gObj.focusModule.currentInfo.element;\n            if (element && element.classList.contains('e-headercell') && !element.classList.contains('e-stackedheadercell')) {\n                var column = gObj.getColumnByUid(element.firstElementChild.getAttribute('e-mappinguid'));\n                this.openMenuByField(column.field);\n                this.parent.focusModule.clearIndicator();\n            }\n        }\n        if (e.action === 'escape' && this.filterSettings.type === 'Menu' && this.filterModule) {\n            if (this.parent.showColumnMenu && this.filterModule.isDialogOpen) {\n                this.parent.isColumnMenuFilterClosing = true;\n            }\n            this.filterModule.closeDialog();\n            gObj.notify(_base_constant__WEBPACK_IMPORTED_MODULE_3__.restoreFocus, {});\n            if (!this.parent.showColumnMenu) {\n                gObj.notify(_base_constant__WEBPACK_IMPORTED_MODULE_3__.restoreFocus, {});\n            }\n        }\n    };\n    Filter.prototype.updateCrossIcon = function (element) {\n        if (element.value.length) {\n            element.nextElementSibling.classList.remove('e-hide');\n        }\n    };\n    Filter.prototype.updateFilterMsg = function () {\n        if (this.filterSettings.type === 'FilterBar') {\n            var gObj = this.parent;\n            var getFormatFlValue = void 0;\n            var columns = this.filterSettings.columns;\n            var column = void 0;\n            if (!this.filterSettings.showFilterBarStatus) {\n                return;\n            }\n            if (columns.length > 0 && this.filterStatusMsg !== this.l10n.getConstant('InvalidFilterMessage')) {\n                this.filterStatusMsg = '';\n                for (var index = 0; index < columns.length; index++) {\n                    column = gObj.grabColumnByUidFromAllCols(columns[parseInt(index.toString(), 10)].uid)\n                        || gObj.grabColumnByFieldFromAllCols(columns[parseInt(index.toString(), 10)]\n                            .field, columns[parseInt(index.toString(), 10)].isForeignKey);\n                    if (index) {\n                        this.filterStatusMsg += ' && ';\n                    }\n                    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(column.format)) {\n                        var flValue = (column.type === 'date' || column.type === 'datetime' || column.type === 'dateonly') ?\n                            this.valueFormatter.fromView(this.values[column.field], column.getParser(), (column.type === 'dateonly' ? 'date' : column.type)) :\n                            this.values[column.field];\n                        if (!(column.type === 'date' || column.type === 'datetime' || column.type === 'dateonly')) {\n                            var formater = this.serviceLocator.getService('valueFormatter');\n                            getFormatFlValue = formater.toView(flValue, column.getParser()).toString();\n                        }\n                        else {\n                            getFormatFlValue = this.setFormatForFlColumn(flValue, column);\n                        }\n                        this.filterStatusMsg += column.headerText + ': ' + getFormatFlValue;\n                    }\n                    else {\n                        this.filterStatusMsg += column.headerText + ': ' + this.values[column.field];\n                    }\n                }\n            }\n            if (gObj.allowPaging) {\n                gObj.updateExternalMessage(this.filterStatusMsg);\n                if (this.parent.height === '100%') {\n                    this.parent.scrollModule.refresh();\n                }\n            }\n            //TODO: virtual paging\n            this.filterStatusMsg = '';\n        }\n    };\n    Filter.prototype.setFormatForFlColumn = function (value, column) {\n        var formater = this.serviceLocator.getService('valueFormatter');\n        return formater.toView(value, column.getFormatter()).toString();\n    };\n    Filter.prototype.checkForSkipInput = function (column, value) {\n        var isSkip;\n        if (column.type === 'number') {\n            if (_syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_2__.DataUtil.operatorSymbols[\"\" + value] || this.skipNumberInput.indexOf(value) > -1) {\n                isSkip = true;\n            }\n        }\n        else if (column.type === 'string') {\n            for (var _i = 0, value_1 = value; _i < value_1.length; _i++) {\n                var val = value_1[_i];\n                if (this.skipStringInput.indexOf(val) > -1) {\n                    isSkip = true;\n                }\n            }\n        }\n        return isSkip;\n    };\n    Filter.prototype.processFilter = function (e) {\n        this.stopTimer();\n        this.startTimer(e);\n    };\n    Filter.prototype.startTimer = function (e) {\n        var _this = this;\n        this.timer = window.setInterval(function () { _this.onTimerTick(); }, e.keyCode === 13 ? 0 : this.filterSettings.immediateModeDelay);\n    };\n    Filter.prototype.stopTimer = function () {\n        window.clearInterval(this.timer);\n    };\n    Filter.prototype.onTimerTick = function () {\n        var selector = '[id=\\'' + this.column.field + '_filterBarcell\\']';\n        var filterElement = this.element.querySelector(selector);\n        if (!filterElement) {\n            filterElement = this.parent.getHeaderContent().querySelector(selector);\n        }\n        var filterValue;\n        this.cellText[this.column.field] = filterElement.value;\n        this.stopTimer();\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.column.filterBarTemplate)) {\n            var templateRead = this.column.filterBarTemplate.read;\n            if (typeof templateRead === 'string') {\n                templateRead = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)(templateRead, window);\n            }\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(templateRead)) {\n                this.value = templateRead.call(this, filterElement);\n            }\n        }\n        else {\n            filterValue = JSON.parse(JSON.stringify(filterElement.value));\n        }\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.value) || this.value === '') {\n            this.removeFilteredColsByField(this.column.field);\n            return;\n        }\n        this.validateFilterValue(this.value);\n        this.filterByMethod = false;\n        this.filterByColumn(this.column.field, this.operator, this.value, this.predicate, this.filterSettings.enableCaseSensitivity, this.ignoreAccent, this.column.isForeignColumn());\n        this.filterByMethod = true;\n        filterElement.value = filterValue;\n        this.updateFilterMsg();\n    };\n    Filter.prototype.validateFilterValue = function (value) {\n        var skipInput;\n        var index;\n        this.matchCase = this.filterSettings.enableCaseSensitivity;\n        switch (this.column.type) {\n            case 'number':\n                if (this.column.filter.operator) {\n                    this.operator = this.column.filter.operator;\n                }\n                else {\n                    this.operator = this.filterOperators.equal;\n                }\n                skipInput = ['>', '<', '=', '!'];\n                for (var i = 0; i < value.length; i++) {\n                    if (skipInput.indexOf(value[parseInt(i.toString(), 10)]) > -1) {\n                        index = i;\n                        break;\n                    }\n                }\n                this.getOperator(value.substring(index));\n                if (index !== 0) {\n                    this.value = value.substring(0, index);\n                }\n                if (this.value !== '' && value.length >= 1) {\n                    this.value = this.valueFormatter.fromView(this.value, this.column.getParser(), this.column.type);\n                }\n                if (isNaN(this.value)) {\n                    this.filterStatusMsg = this.l10n.getConstant('InvalidFilterMessage');\n                }\n                break;\n            case 'date':\n            case 'datetime':\n                this.operator = this.filterOperators.equal;\n                if (this.value !== '' && !(this.value instanceof Date)) {\n                    this.getOperator(value);\n                    this.value = this.valueFormatter.fromView(this.value, this.column.getParser(), this.column.type);\n                    if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.value)) {\n                        this.filterStatusMsg = this.l10n.getConstant('InvalidFilterMessage');\n                    }\n                }\n                break;\n            case 'string':\n                this.matchCase = false;\n                if (this.column.filter.operator) {\n                    this.operator = this.column.filter.operator;\n                }\n                else {\n                    if (value.indexOf('*') !== -1 || value.indexOf('?') !== -1 || value.indexOf('%3f') !== -1) {\n                        this.operator = this.filterOperators.wildCard;\n                    }\n                    else if (value.indexOf('%') !== -1) {\n                        this.operator = this.filterOperators.like;\n                    }\n                    else {\n                        this.operator = this.filterOperators.startsWith;\n                    }\n                }\n                break;\n            case 'boolean':\n                if (value.toLowerCase() === 'true' || value === '1') {\n                    this.value = true;\n                }\n                else if (value.toLowerCase() === 'false' || value === '0') {\n                    this.value = false;\n                }\n                else if (value.length) {\n                    this.filterStatusMsg = this.l10n.getConstant('InvalidFilterMessage');\n                }\n                this.operator = this.filterOperators.equal;\n                break;\n            default:\n                if (this.column.filter.operator) {\n                    this.operator = this.column.filter.operator;\n                }\n                else {\n                    this.operator = this.filterOperators.equal;\n                }\n        }\n    };\n    Filter.prototype.getOperator = function (value) {\n        var singleOp = value.charAt(0);\n        var multipleOp = value.slice(0, 2);\n        var operators = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)({ '=': this.filterOperators.equal, '!': this.filterOperators.notEqual }, _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_2__.DataUtil.operatorSymbols);\n        // eslint-disable-next-line no-prototype-builtins\n        if (operators.hasOwnProperty(singleOp) || operators.hasOwnProperty(multipleOp)) {\n            this.operator = operators[\"\" + singleOp];\n            this.value = value.substring(1);\n            if (!this.operator) {\n                this.operator = operators[\"\" + multipleOp];\n                this.value = value.substring(2);\n            }\n        }\n        if (this.operator === this.filterOperators.lessThan || this.operator === this.filterOperators.greaterThan) {\n            if (this.value.charAt(0) === '=') {\n                this.operator = this.operator + 'orequal';\n                this.value = this.value.substring(1);\n            }\n        }\n    };\n    Filter.prototype.columnPositionChanged = function () {\n        if (this.parent.filterSettings.type !== 'FilterBar') {\n            return;\n        }\n    };\n    Filter.prototype.getLocalizedCustomOperators = function () {\n        var numOptr = [\n            { value: 'equal', text: this.l10n.getConstant('Equal') },\n            { value: 'greaterthan', text: this.l10n.getConstant('GreaterThan') },\n            { value: 'greaterthanorequal', text: this.l10n.getConstant('GreaterThanOrEqual') },\n            { value: 'lessthan', text: this.l10n.getConstant('LessThan') },\n            { value: 'lessthanorequal', text: this.l10n.getConstant('LessThanOrEqual') },\n            { value: 'notequal', text: this.l10n.getConstant('NotEqual') },\n            { value: 'isnull', text: this.l10n.getConstant('IsNull') },\n            { value: 'isnotnull', text: this.l10n.getConstant('NotNull') }\n        ];\n        this.customOperators = {\n            stringOperator: [\n                { value: 'startswith', text: this.l10n.getConstant('StartsWith') },\n                { value: 'endswith', text: this.l10n.getConstant('EndsWith') },\n                { value: 'contains', text: this.l10n.getConstant('Contains') },\n                { value: 'equal', text: this.l10n.getConstant('Equal') },\n                { value: 'isempty', text: this.l10n.getConstant('IsEmpty') },\n                { value: 'doesnotstartwith', text: this.l10n.getConstant('NotStartsWith') },\n                { value: 'doesnotendwith', text: this.l10n.getConstant('NotEndsWith') },\n                { value: 'doesnotcontain', text: this.l10n.getConstant('NotContains') },\n                { value: 'notequal', text: this.l10n.getConstant('NotEqual') },\n                { value: 'isnotempty', text: this.l10n.getConstant('IsNotEmpty') },\n                { value: 'like', text: this.l10n.getConstant('Like') }\n            ],\n            numberOperator: numOptr,\n            dateOperator: [\n                { value: 'equal', text: this.l10n.getConstant('Equal') },\n                { value: 'greaterthan', text: this.l10n.getConstant('GreaterThan') },\n                { value: 'greaterthanorequal', text: this.l10n.getConstant('GreaterThanOrEqual') },\n                { value: 'lessthan', text: this.l10n.getConstant('LessThan') },\n                { value: 'lessthanorequal', text: this.l10n.getConstant('LessThanOrEqual') },\n                { value: 'notequal', text: this.l10n.getConstant('NotEqual') },\n                { value: 'isnull', text: this.l10n.getConstant('IsNull') },\n                { value: 'isnotnull', text: this.l10n.getConstant('NotNull') }\n            ],\n            datetimeOperator: [\n                { value: 'equal', text: this.l10n.getConstant('Equal') },\n                { value: 'greaterthan', text: this.l10n.getConstant('GreaterThan') },\n                { value: 'greaterthanorequal', text: this.l10n.getConstant('GreaterThanOrEqual') },\n                { value: 'lessthan', text: this.l10n.getConstant('LessThan') },\n                { value: 'lessthanorequal', text: this.l10n.getConstant('LessThanOrEqual') },\n                { value: 'notequal', text: this.l10n.getConstant('NotEqual') },\n                { value: 'isnull', text: this.l10n.getConstant('IsNull') },\n                { value: 'isnotnull', text: this.l10n.getConstant('NotNull') }\n            ],\n            dateonlyOperator: [\n                { value: 'equal', text: this.l10n.getConstant('Equal') },\n                { value: 'greaterthan', text: this.l10n.getConstant('GreaterThan') },\n                { value: 'greaterthanorequal', text: this.l10n.getConstant('GreaterThanOrEqual') },\n                { value: 'lessthan', text: this.l10n.getConstant('LessThan') },\n                { value: 'lessthanorequal', text: this.l10n.getConstant('LessThanOrEqual') },\n                { value: 'notequal', text: this.l10n.getConstant('NotEqual') },\n                { value: 'isnull', text: this.l10n.getConstant('IsNull') },\n                { value: 'isnotnull', text: this.l10n.getConstant('NotNull') }\n            ],\n            booleanOperator: [\n                { value: 'equal', text: this.l10n.getConstant('Equal') },\n                { value: 'notequal', text: this.l10n.getConstant('NotEqual') }\n            ]\n        };\n        if (this.filterSettings.type === 'Menu') {\n            this.customOperators.stringOperator.push({ value: 'in', text: this.l10n.getConstant('In') }, { value: 'notin', text: this.l10n.getConstant('NotIn') });\n            this.customOperators.booleanOperator.push({ value: 'in', text: this.l10n.getConstant('In') }, { value: 'notin', text: this.l10n.getConstant('NotIn') });\n            this.customOperators.numberOperator.push({ value: 'in', text: this.l10n.getConstant('In') }, { value: 'notin', text: this.l10n.getConstant('NotIn') });\n        }\n    };\n    /**\n     * @param {string} field - specifies the field name\n     * @returns {void}\n     * @hidden\n     */\n    Filter.prototype.openMenuByField = function (field) {\n        var gObj = this.parent;\n        if (gObj.enableAdaptiveUI) {\n            this.showCustomFilter(false);\n            return;\n        }\n        var column = gObj.getColumnByField(field);\n        var header = gObj.getColumnHeaderByField(field);\n        var target = header.querySelector('.e-filtermenudiv');\n        if (!target) {\n            return;\n        }\n        var gClient = gObj.element.getBoundingClientRect();\n        var fClient = target.getBoundingClientRect();\n        this.filterDialogOpen(column, target, fClient.right - gClient.left, fClient.bottom - gClient.top);\n    };\n    Filter.prototype.filterIconClickHandler = function (e) {\n        var target = e.target;\n        if (target.classList.contains('e-filtermenudiv') && (this.parent.filterSettings.type === 'Menu' ||\n            this.parent.filterSettings.type === 'CheckBox' || this.parent.filterSettings.type === 'Excel')) {\n            var gObj = this.parent;\n            var col = gObj.getColumnByUid((0,_base_util__WEBPACK_IMPORTED_MODULE_1__.parentsUntil)(target, 'e-headercell').firstElementChild.getAttribute('e-mappinguid'));\n            this.column = col;\n            if (this.fltrDlgDetails.field === col.field && this.fltrDlgDetails.isOpen) {\n                return;\n            }\n            if (this.filterModule) {\n                this.filterModule.closeDialog();\n            }\n            this.fltrDlgDetails = { field: col.field, isOpen: true };\n            this.openMenuByField(col.field);\n        }\n    };\n    Filter.prototype.clickHandler = function (e) {\n        if (this.filterSettings.type === 'FilterBar' && this.filterSettings.showFilterBarOperator) {\n            if ((0,_base_util__WEBPACK_IMPORTED_MODULE_1__.parentsUntil)(e.target, 'e-filterbarcell') &&\n                e.target.classList.contains('e-input-group-icon')) {\n                var filterOperatorElement = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(e.target, 'div').\n                    querySelector('.e-filterbaroperator');\n                if (filterOperatorElement) {\n                    filterOperatorElement.focus();\n                }\n                else {\n                    e.target.focus();\n                }\n            }\n            if (e.target.classList.contains('e-list-item')) {\n                var inputId = document.querySelector('.e-popup-open').getAttribute('id').replace('_popup', '');\n                if (inputId.indexOf('grid-column') !== -1) {\n                    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(document.getElementById(inputId), 'div').querySelector('.e-filtertext').focus();\n                }\n            }\n        }\n        if (this.filterSettings.mode === 'Immediate' || this.parent.filterSettings.type === 'Menu' ||\n            this.parent.filterSettings.type === 'CheckBox' || this.parent.filterSettings.type === 'Excel') {\n            var target = e.target;\n            var datepickerEle = target.classList.contains('e-day'); // due to datepicker popup cause\n            var dialog = (0,_base_util__WEBPACK_IMPORTED_MODULE_1__.parentsUntil)(this.parent.element, 'e-dialog');\n            var hasDialog = false;\n            var popupEle = (0,_base_util__WEBPACK_IMPORTED_MODULE_1__.parentsUntil)(target, 'e-popup');\n            var filterPopup = document.getElementById(this.parent.element.id + '_e-popup');\n            var hasDialogClosed = this.parent.element.classList.contains('e-device') ?\n                document.querySelector('.e-filter-popup') : filterPopup && filterPopup.querySelector('.e-filter-popup') ?\n                filterPopup.querySelector('.e-filter-popup') : this.parent.element.querySelector('.e-filter-popup');\n            if (dialog && popupEle) {\n                hasDialog = dialog.id === popupEle.id;\n            }\n            if ((this.filterModule && hasDialogClosed && ((0,_base_util__WEBPACK_IMPORTED_MODULE_1__.parentsUntil)(target, 'e-excel-ascending') ||\n                (0,_base_util__WEBPACK_IMPORTED_MODULE_1__.parentsUntil)(target, 'e-excel-descending')))) {\n                this.filterModule.closeDialog(target);\n            }\n            if ((0,_base_util__WEBPACK_IMPORTED_MODULE_1__.parentsUntil)(target, 'e-filter-popup') || target.classList.contains('e-filtermenudiv')) {\n                return;\n            }\n            else if (this.filterModule && !(0,_base_util__WEBPACK_IMPORTED_MODULE_1__.parentsUntil)(target, 'e-date-overflow') && (!(0,_base_util__WEBPACK_IMPORTED_MODULE_1__.parentsUntil)(target, 'e-popup-wrapper')\n                && (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(target, '.e-filter-item.e-menu-item'))) && !datepickerEle\n                && !((0,_base_util__WEBPACK_IMPORTED_MODULE_1__.parentsUntil)(target, 'e-search-wrapper') && !hasDialogClosed)) {\n                if ((hasDialog && (!(0,_base_util__WEBPACK_IMPORTED_MODULE_1__.parentsUntil)(target, 'e-filter-popup'))\n                    && (!(0,_base_util__WEBPACK_IMPORTED_MODULE_1__.parentsUntil)(target, 'e-popup-flmenu'))) || (!popupEle && hasDialogClosed)) {\n                    this.filterModule.isresetFocus = (0,_base_util__WEBPACK_IMPORTED_MODULE_1__.parentsUntil)(target, 'e-grid') &&\n                        (0,_base_util__WEBPACK_IMPORTED_MODULE_1__.parentsUntil)(target, 'e-grid').id === this.parent.element.id && !((0,_base_util__WEBPACK_IMPORTED_MODULE_1__.parentsUntil)(target, 'e-search-wrapper')\n                        && hasDialogClosed);\n                    this.filterModule.closeDialog(target);\n                }\n            }\n        }\n    };\n    Filter.prototype.filterHandler = function (args) {\n        this.actualPredicate[args.field] = args.actualPredicate;\n        this.actualData = Object.keys(this.actualPredicate);\n        var dataManager = new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_2__.DataManager(this.filterSettings.columns);\n        var query = new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_2__.Query().where('field', this.filterOperators.equal, args.field);\n        this.checkboxFilterObject = dataManager.dataSource.json;\n        this.checkboxPrevFilterObject = dataManager.executeLocal(query);\n        for (var i = 0; i < this.checkboxPrevFilterObject.length; i++) {\n            var index = -1;\n            for (var j = 0; j < this.filterSettings.columns.length; j++) {\n                if (this.checkboxPrevFilterObject[parseInt(i.toString(), 10)].field ===\n                    this.filterSettings.columns[parseInt(j.toString(), 10)].field) {\n                    index = j;\n                    break;\n                }\n            }\n            if (index !== -1) {\n                this.filterSettings.columns.splice(index, 1);\n            }\n        }\n        if (this.values[args.field]) {\n            delete this.values[args.field];\n        }\n        var col = this.parent.getColumnByField(args.field);\n        var iconClass = this.parent.showColumnMenu && col.showColumnMenu ? '.e-columnmenu' : '.e-icon-filter';\n        var filterIconElement = this.parent.getColumnHeaderByField(args.field).querySelector(iconClass);\n        if (args.action === 'filtering') {\n            this.filterSettings.columns = this.filterSettings.columns.concat(args.filterCollection);\n            if (this.filterSettings.columns.length && filterIconElement) {\n                filterIconElement.classList.add('e-filtered');\n            }\n        }\n        else {\n            if (filterIconElement) {\n                filterIconElement.classList.remove('e-filtered');\n            }\n            args.requestType = 'filtering';\n            this.parent.renderModule.refresh(args); //hot-fix onpropertychanged not working for object { array }\n        }\n        this.parent.dataBind();\n    };\n    Filter.prototype.updateFilter = function () {\n        var cols = this.filterSettings.columns;\n        this.actualPredicate = {};\n        for (var i = 0; i < cols.length; i++) {\n            this.column = this.parent.getColumnByField(cols[parseInt(i.toString(), 10)].field) ||\n                (0,_base_util__WEBPACK_IMPORTED_MODULE_1__.getColumnByForeignKeyValue)(cols[parseInt(i.toString(), 10)].field, this.parent.getForeignKeyColumns());\n            var fieldName = cols[parseInt(i.toString(), 10)].field;\n            if (!this.parent.getColumnByField(cols[parseInt(i.toString(), 10)].field)) {\n                fieldName = (0,_base_util__WEBPACK_IMPORTED_MODULE_1__.getColumnByForeignKeyValue)(cols[parseInt(i.toString(), 10)].field, this.parent.getForeignKeyColumns()).field;\n            }\n            this.refreshFilterIcon(fieldName, cols[parseInt(i.toString(), 10)].operator, cols[parseInt(i.toString(), 10)].value, cols[parseInt(i.toString(), 10)].type, cols[parseInt(i.toString(), 10)].predicate, cols[parseInt(i.toString(), 10)].matchCase, cols[parseInt(i.toString(), 10)].ignoreAccent, cols[parseInt(i.toString(), 10)].uid);\n        }\n    };\n    Filter.prototype.refreshFilterIcon = function (fieldName, operator, value, type, predicate, matchCase, ignoreAccent, uid) {\n        var obj = {\n            field: fieldName,\n            predicate: predicate,\n            matchCase: matchCase,\n            ignoreAccent: ignoreAccent,\n            operator: operator,\n            value: value,\n            type: type\n        };\n        if (this.actualPredicate[\"\" + fieldName]) {\n            this.actualPredicate[\"\" + fieldName].push(obj);\n        }\n        else {\n            this.actualPredicate[\"\" + fieldName] = [obj];\n        }\n        var field = uid ? this.parent.grabColumnByUidFromAllCols(uid).field : fieldName;\n        this.addFilteredClass(field);\n    };\n    Filter.prototype.addFilteredClass = function (fieldName) {\n        var filterIconElement;\n        var col = this.parent.getColumnByField(fieldName);\n        if (this.parent.showColumnMenu && col.showColumnMenu) {\n            filterIconElement = this.parent.getColumnHeaderByField(fieldName).querySelector('.e-columnmenu');\n        }\n        else if (col) {\n            filterIconElement = this.parent.getColumnHeaderByField(fieldName).querySelector('.e-icon-filter');\n        }\n        if (filterIconElement) {\n            filterIconElement.classList.add('e-filtered');\n        }\n    };\n    /**\n     * @hidden\n     * @returns {FilterUI} returns the FilterUI\n     */\n    Filter.prototype.getFilterUIInfo = function () {\n        return this.filterModule ? this.filterModule.getFilterUIInfo() : {};\n    };\n    /**\n     * @param {string} field - specifies the field name\n     * @returns {string} returns the operator name\n     * @hidden\n     */\n    Filter.prototype.getOperatorName = function (field) {\n        return document.getElementById(this.parent.getColumnByField(field).uid).ej2_instances[0].value;\n    };\n    /**\n     * Renders checkbox items in Menu filter dialog.\n     *\n     * @returns {void}\n     */\n    Filter.prototype.renderCheckboxOnFilterMenu = function () {\n        return this.filterModule.renderCheckBoxMenu();\n    };\n    return Filter;\n}());\n\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-grids/src/grid/actions/filter.js?");

/***/ })

}]);