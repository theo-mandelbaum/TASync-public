"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkej2_vue_samples"] = self["webpackChunkej2_vue_samples"] || []).push([["chunk-vendors-node_modules_syncfusion_ej2-interactive-chat_src_ai-assistview_ai-assistview_js-328b4a-8cf039c7"],{

/***/ "./node_modules/@syncfusion/ej2-interactive-chat/src/ai-assistview/ai-assistview.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-interactive-chat/src/ai-assistview/ai-assistview.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AIAssistView: () => (/* binding */ AIAssistView),\n/* harmony export */   AssistView: () => (/* binding */ AssistView),\n/* harmony export */   AssistViewType: () => (/* binding */ AssistViewType),\n/* harmony export */   Prompt: () => (/* binding */ Prompt),\n/* harmony export */   PromptToolbarSettings: () => (/* binding */ PromptToolbarSettings),\n/* harmony export */   ResponseToolbarSettings: () => (/* binding */ ResponseToolbarSettings)\n/* harmony export */ });\n/* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @syncfusion/ej2-base */ \"./node_modules/@syncfusion/ej2-base/index.js\");\n/* harmony import */ var _syncfusion_ej2_navigations__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @syncfusion/ej2-navigations */ \"./node_modules/@syncfusion/ej2-navigations/index.js\");\n/* harmony import */ var _interactive_chat_base_interactive_chat_base__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../interactive-chat-base/interactive-chat-base */ \"./node_modules/@syncfusion/ej2-interactive-chat/src/interactive-chat-base/interactive-chat-base.js\");\nvar __extends = (undefined && undefined.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n// eslint-disable-next-line @typescript-eslint/triple-slash-reference\n///<reference path='../interactive-chat-base/interactive-chat-base-model.d.ts'/>\n\n\n\n\nvar ASSISTHEADER = 'e-aiassist-header-text e-assist-view-header';\n/* eslint-enable @typescript-eslint/no-misused-new, no-redeclare */\n/**\n * The prompts property maps the list of the prompts and binds the data to the suggestions.\n */\nvar Prompt = /** @class */ (function (_super) {\n    __extends(Prompt, _super);\n    function Prompt() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(null)\n    ], Prompt.prototype, \"prompt\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('')\n    ], Prompt.prototype, \"response\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(null)\n    ], Prompt.prototype, \"isResponseHelpful\", void 0);\n    return Prompt;\n}(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.ChildProperty));\n\n/**\n * Specifies the type of assist view.\n */\nvar AssistViewType;\n(function (AssistViewType) {\n    /**\n     * Represents the default assist view type.\n     */\n    AssistViewType[\"Assist\"] = \"Assist\";\n    /**\n     * Represents a custom assist view type.\n     */\n    AssistViewType[\"Custom\"] = \"Custom\";\n})(AssistViewType || (AssistViewType = {}));\n/**\n * The assistView property maps the customized AiAssistView.\n */\nvar AssistView = /** @class */ (function (_super) {\n    __extends(AssistView, _super);\n    function AssistView() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('Assist')\n    ], AssistView.prototype, \"type\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('')\n    ], AssistView.prototype, \"name\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)()\n    ], AssistView.prototype, \"iconCss\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)()\n    ], AssistView.prototype, \"viewTemplate\", void 0);\n    return AssistView;\n}(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.ChildProperty));\n\n/**\n * The promptToolbarSettings property maps the list of the promptToolbarSettings and binds the data to the prompt.\n */\nvar PromptToolbarSettings = /** @class */ (function (_super) {\n    __extends(PromptToolbarSettings, _super);\n    function PromptToolbarSettings() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('100%')\n    ], PromptToolbarSettings.prototype, \"width\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Collection)([], _interactive_chat_base_interactive_chat_base__WEBPACK_IMPORTED_MODULE_2__.ToolbarItem)\n    ], PromptToolbarSettings.prototype, \"items\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], PromptToolbarSettings.prototype, \"itemClicked\", void 0);\n    return PromptToolbarSettings;\n}(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.ChildProperty));\n\n/**\n * The responseToolbarSettings property maps the list of the responseToolbarSettings and binds the data to the output items.\n */\nvar ResponseToolbarSettings = /** @class */ (function (_super) {\n    __extends(ResponseToolbarSettings, _super);\n    function ResponseToolbarSettings() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('100%')\n    ], ResponseToolbarSettings.prototype, \"width\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Collection)([], _interactive_chat_base_interactive_chat_base__WEBPACK_IMPORTED_MODULE_2__.ToolbarItem)\n    ], ResponseToolbarSettings.prototype, \"items\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], ResponseToolbarSettings.prototype, \"itemClicked\", void 0);\n    return ResponseToolbarSettings;\n}(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.ChildProperty));\n\n/**\n * The `AIAssistView` component is designed to enhance user interaction by integrating AI driven assistance features.\n * It provides a seamless interface for incorporating suggestions & AI responses.\n *\n * ```html\n *  <div id='defaultAIAssistView'></div>\n * ```\n * ```typescript\n *  let aiAssistObj: AIAssistView = new AIAssistView();\n *  aiAssistObj.appendTo('#defaultAIAssistView');\n * ```\n */\nvar AIAssistView = /** @class */ (function (_super) {\n    __extends(AIAssistView, _super);\n    /**\n     * Constructor for creating the component\n     *\n     * @param {AIAssistViewModel} options - Specifies the AIAssistViewModel model.\n     * @param {string | HTMLElement} element - Specifies the element to render as component.\n     * @private\n     */\n    function AIAssistView(options, element) {\n        var _this = _super.call(this, options, element) || this;\n        _this.toolbarItems = [];\n        _this.displayContents = [];\n        _this.preTagElements = [];\n        return _this;\n    }\n    /**\n     * Initialize the event handler\n     *\n     * @private\n     * @returns {void}\n     */\n    AIAssistView.prototype.preRender = function () {\n        if (!this.element.id) {\n            this.element.id = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getUniqueID)('e-' + this.getModuleName());\n        }\n    };\n    AIAssistView.prototype.getDirective = function () {\n        return 'EJS-AIASSISTVIEW';\n    };\n    /**\n     * To get component name.\n     *\n     * @returns {string} - It returns the current module name.\n     * @private\n     */\n    AIAssistView.prototype.getModuleName = function () {\n        return 'aiassistview';\n    };\n    /**\n     * Get the properties to be maintained in the persisted state.\n     *\n     * @private\n     * @returns {string} - It returns the persisted data.\n     */\n    AIAssistView.prototype.getPersistData = function () {\n        return this.addOnPersist([]);\n    };\n    AIAssistView.prototype.render = function () {\n        this.renderPromptView();\n    };\n    AIAssistView.prototype.renderPromptView = function () {\n        this.setDimension(this.element, this.width, this.height);\n        this.renderViews();\n        this.renderToolbar();\n        this.updateTextAreaObject(this.textareaObj);\n        this.wireEvents();\n    };\n    AIAssistView.prototype.renderToolbar = function () {\n        this.updateHeaderToolbar();\n        if (this.assistViewTemplateIndex < 0) {\n            this.displayContents.unshift(this.contentWrapper);\n        }\n        else {\n            this.displayContents.unshift(this.assistCustomSection);\n        }\n        this.previousElement = this.displayContents[this.activeView];\n        this.renderHeaderToolbar();\n        this.viewWrapper = this.element.querySelector('.e-view-content');\n        this.updateActiveView();\n        this.addCssClass(this.element, this.cssClass);\n        this.updateHeader(this.showHeader, this.toolbarHeader, this.viewWrapper);\n        this.aiAssistViewRendered = true;\n        this.addRtlClass(this.element, this.enableRtl);\n    };\n    AIAssistView.prototype.renderViews = function () {\n        this.assistViewTemplateIndex = -1;\n        this.aiAssistViewRendered = false;\n        this.isAssistView = false;\n        this.isOutputRenderingStop = false;\n        this.isResponseRequested = false;\n        this.renderViewSections(this.element, 'e-view-header', 'e-view-content');\n        var isAssistViewAssigned = false;\n        var assistView;\n        var customViewTemplate;\n        var customViewCount = 1;\n        if (this.views.length > 0) {\n            for (var index = 0; index < this.views.length; index++) {\n                if (this.views[parseInt(index.toString(), 10)].type.toLocaleLowerCase() === 'assist' && !isAssistViewAssigned) {\n                    assistView = {\n                        text: this.views[parseInt(index.toString(), 10)].name || 'AI Assist',\n                        prefixIcon: this.views[parseInt(index.toString(), 10)].iconCss || 'e-icons e-assistview-icon',\n                        cssClass: ASSISTHEADER,\n                        htmlAttributes: { 'data-index': this.element.id + '_view_0' }\n                    };\n                    this.toolbarItems.unshift(assistView);\n                    if (this.views[parseInt(index.toString(), 10)].viewTemplate) {\n                        this.assistViewTemplateIndex = index;\n                    }\n                    isAssistViewAssigned = true;\n                    this.isAssistView = true;\n                }\n                else if (this.views[parseInt(index.toString(), 10)].type.toLocaleLowerCase() === 'custom') {\n                    customViewTemplate = this.createElement('div', { className: 'e-customview-content-section-' + customViewCount + ' e-custom-view' });\n                    this.getContextObject('customViewTemplate', customViewTemplate, -1, index);\n                    this.displayContents.push(customViewTemplate);\n                    this.toolbarItems.push({\n                        text: this.views[parseInt(index.toString(), 10)].name || '',\n                        prefixIcon: this.views[parseInt(index.toString(), 10)].iconCss || '',\n                        cssClass: 'e-aiassist-header-text e-custom-view-header',\n                        htmlAttributes: { 'data-index': this.element.id + '_view_' + customViewCount.toString() }\n                    });\n                    customViewCount++;\n                }\n            }\n        }\n        if (this.views.length === 0 || !isAssistViewAssigned) {\n            assistView = {\n                text: 'AI Assist',\n                prefixIcon: 'e-icons e-assistview-icon',\n                cssClass: ASSISTHEADER,\n                htmlAttributes: { 'data-index': this.element.id + '_view_0' }\n            };\n            this.toolbarItems.unshift(assistView);\n            isAssistViewAssigned = true;\n        }\n        if (this.assistViewTemplateIndex >= 0 && this.views[this.assistViewTemplateIndex].viewTemplate) {\n            this.assistCustomSection = this.createElement('div', { attrs: { class: 'e-assistview-content-section', 'data-index': this.element.id + '_view_0' } });\n            this.getContextObject('assistViewTemplate', this.assistCustomSection, -1, this.assistViewTemplateIndex);\n        }\n        else {\n            this.renderDefaultView();\n        }\n    };\n    AIAssistView.prototype.renderHeaderToolbar = function () {\n        var _this = this;\n        this.toolbar = new _syncfusion_ej2_navigations__WEBPACK_IMPORTED_MODULE_1__.Toolbar({\n            items: this.toolbarItems,\n            height: '100%',\n            enableRtl: this.enableRtl,\n            clicked: function (args) {\n                var eventItemArgs = {\n                    type: args.item.type,\n                    text: args.item.text,\n                    iconCss: args.item.prefixIcon,\n                    cssClass: args.item.cssClass,\n                    tooltip: args.item.tooltipText,\n                    template: args.item.template,\n                    disabled: args.item.disabled,\n                    visible: args.item.visible,\n                    align: args.item.align,\n                    tabIndex: args.item.tabIndex\n                };\n                var eventArgs = {\n                    item: eventItemArgs,\n                    event: args.originalEvent,\n                    cancel: false\n                };\n                if (_this.toolbarSettings.itemClicked) {\n                    _this.toolbarSettings.itemClicked.call(_this, eventArgs);\n                }\n                if (!eventArgs.cancel) {\n                    if (args.item.htmlAttributes) {\n                        var currentIndex = parseInt(args.item.htmlAttributes['data-index'].split(_this.element.id + '_view_')[1], 10);\n                        if (currentIndex !== _this.activeView) {\n                            var prevOnChange = _this.isProtectedOnChange;\n                            _this.isProtectedOnChange = true;\n                            var previousIndex = _this.getIndex(_this.activeView);\n                            _this.activeView = parseInt(args.item.htmlAttributes['data-index'].split(_this.element.id + '_view_')[1], 10);\n                            _this.updateActiveView(previousIndex);\n                            _this.isProtectedOnChange = prevOnChange;\n                        }\n                    }\n                }\n            }\n        });\n        this.toolbarHeader = this.element.querySelector('.e-view-header');\n        var toolbarEle = this.createElement('div');\n        this.toolbar.appendTo(toolbarEle);\n        this.toolbar.element.setAttribute('aria-label', 'assist-view-toolbar-header');\n        this.toolbarHeader.appendChild(toolbarEle);\n    };\n    AIAssistView.prototype.updateHeaderToolbar = function () {\n        if (this.toolbarSettings.items.length > 0) {\n            /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n            var pushToolbar = this.toolbarSettings.items.map(function (item) { return ({\n                type: item.type,\n                template: item.template,\n                disabled: item.disabled,\n                cssClass: item.cssClass,\n                visible: item.visible,\n                tooltipText: item.tooltip,\n                prefixIcon: item.iconCss,\n                text: item.text,\n                align: item.align\n            }); });\n            this.toolbarItems = this.toolbarItems.concat(pushToolbar);\n        }\n    };\n    AIAssistView.prototype.getIndex = function (currentIndex) {\n        return (((currentIndex) > (this.views.length - (this.isAssistView ? 1 : 0))) || (currentIndex < 0)) ?\n            0 : currentIndex;\n    };\n    AIAssistView.prototype.updateActiveView = function (previousIndex) {\n        var activeViewIndex = this.getIndex(this.activeView);\n        if (!this.aiAssistViewRendered) {\n            this.appendView(activeViewIndex);\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            if (this.toolbar.tbarEle[parseInt(activeViewIndex.toString(), 10)]) {\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                this.toolbar.tbarEle[parseInt(activeViewIndex.toString(), 10)].classList.add('e-active');\n            }\n        }\n        else if (previousIndex !== activeViewIndex) {\n            this.removePreviousView(previousIndex, activeViewIndex);\n            this.appendView(activeViewIndex);\n        }\n        this.previousElement = this.displayContents[parseInt(activeViewIndex.toString(), 10)];\n    };\n    AIAssistView.prototype.appendView = function (activeViewIndex) {\n        //updating the new view section according to the activeView property\n        if (activeViewIndex === 0 && this.assistViewTemplateIndex < 0) {\n            this.viewWrapper.append(this.contentWrapper, this.stopResponding, this.footer);\n        }\n        else if (activeViewIndex === 0 && this.assistViewTemplateIndex >= 0) {\n            this.viewWrapper.append(this.assistCustomSection);\n        }\n        else {\n            this.viewWrapper.append(this.displayContents[parseInt(activeViewIndex.toString(), 10)]);\n        }\n    };\n    AIAssistView.prototype.removePreviousView = function (previousIndex, activeViewIndex) {\n        // removing the previously binded element\n        this.viewWrapper.removeChild(this.previousElement);\n        if (previousIndex === 0 && this.assistViewTemplateIndex < 0) {\n            this.viewWrapper.removeChild(this.stopResponding);\n            this.viewWrapper.removeChild(this.footer);\n        }\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        if (this.toolbar.tbarEle[parseInt(activeViewIndex.toString(), 10)]) {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            this.toolbar.tbarEle[parseInt(activeViewIndex.toString(), 10)].classList.add('e-active');\n        }\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        if (previousIndex >= 0 && this.toolbar.tbarEle[parseInt(previousIndex.toString(), 10)]) {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            this.toolbar.tbarEle[parseInt(previousIndex.toString(), 10)].classList.remove('e-active');\n        }\n    };\n    AIAssistView.prototype.renderDefaultView = function () {\n        var viewWrapper = this.element.querySelector('.e-view-content');\n        this.createViewComponents(viewWrapper);\n        this.contentWrapper = this.element.querySelector('.e-views');\n        this.contentWrapper.setAttribute('data-index', this.element.id + '_view_0');\n        var contentContainer = this.element.querySelector('.e-view-container');\n        this.content = this.getElement('contentContainer');\n        this.footer = this.getElement('footer');\n        var footerClass = \"e-footer \" + (this.footerTemplate ? 'e-footer-template' : '');\n        this.footer.className = footerClass;\n        this.renderContent();\n        this.renderAssistViewFooter();\n        this.renderBannerView(this.bannerTemplate, contentContainer, 'bannerTemplate');\n        contentContainer.append(this.content);\n        this.renderStopResponding();\n    };\n    AIAssistView.prototype.renderStopResponding = function () {\n        this.stopResponding = this.createElement('div', { attrs: { class: 'e-stop-response', tabIndex: '0', 'aria-label': 'Stop Responding', role: 'button' } });\n        var stopRespondingIcon = this.createElement('span', { className: 'e-icons e-assist-stop' });\n        this.stopRespondingContent = this.createElement('span', { className: 'e-stop-response-text' });\n        this.l10n = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.L10n('aiassistview', { stopResponseText: 'Stop Responding' }, this.locale);\n        this.updateStopRespondingTitle();\n        this.appendChildren(this.stopResponding, stopRespondingIcon, this.stopRespondingContent);\n    };\n    AIAssistView.prototype.updateStopRespondingTitle = function () {\n        this.l10n.setLocale(this.locale);\n        this.stopRespondingContent.textContent = this.l10n.getConstant('stopResponseText');\n    };\n    AIAssistView.prototype.renderContent = function () {\n        this.renderSuggestions(this.promptSuggestions, this.promptSuggestionsHeader, this.promptSuggestionItemTemplate, 'promptSuggestion', 'promptSuggestionItemTemplate', this.onSuggestionClick);\n        this.renderOutputContent();\n        if (this.outputElement) {\n            this.renderSkeleton();\n        }\n    };\n    AIAssistView.prototype.renderOutputContent = function (isMethodCall) {\n        var _this = this;\n        this.outputElement = this.getElement('outputElement');\n        if (this.responseToolbarSettings.items.length === 0) {\n            var prevOnChange = this.isProtectedOnChange;\n            this.isProtectedOnChange = true;\n            this.responseToolbarSettings.items = [\n                { iconCss: 'e-icons e-assist-copy', tooltip: 'Copy', cssClass: 'check' },\n                { iconCss: 'e-icons e-assist-like', tooltip: 'Like' },\n                { iconCss: 'e-icons e-assist-dislike', tooltip: 'Dislike' }\n            ];\n            this.isProtectedOnChange = prevOnChange;\n        }\n        if (this.prompts) {\n            this.prompts.forEach(function (prompt, i) {\n                _this.renderOutputContainer(prompt.prompt, prompt.response, i);\n            });\n        }\n        if (this.suggestionsElement && this.content.contains(this.suggestionsElement)) {\n            this.content.insertBefore(this.outputElement, this.suggestionsElement);\n        }\n        else {\n            this.content.appendChild(this.outputElement);\n        }\n        if (isMethodCall) {\n            this.aiAssistViewRendered = true;\n        }\n    };\n    AIAssistView.prototype.renderAssistViewFooter = function () {\n        this.textareaObj = this.renderFooterContent(this.footerTemplate, this.footer, this.prompt, this.promptPlaceholder, this.showClearButton, 'e-assist-textarea');\n        var sendIconClass = 'e-assist-send e-icons disabled';\n        if (!this.footerTemplate) {\n            this.sendIcon = this.renderSendIcon(sendIconClass, this.footer);\n        }\n        if (this.textareaObj) {\n            this.textareaObj.input = this.handleInput.bind(this);\n            this.activateSendIcon(this.textareaObj.value.length);\n        }\n    };\n    AIAssistView.prototype.handleInput = function (args) {\n        var prevOnChange = this.isProtectedOnChange;\n        this.isProtectedOnChange = true;\n        this.prompt = args.value;\n        this.isProtectedOnChange = prevOnChange;\n        this.activateSendIcon(args.value.length);\n        this.updateTextAreaObject(this.textareaObj);\n        var eventArgs = {\n            value: args.value,\n            previousValue: args.previousValue,\n            event: args.event,\n            element: this.textareaObj.element\n        };\n        this.trigger('promptChanged', eventArgs);\n    };\n    AIAssistView.prototype.activateSendIcon = function (value) {\n        this.sendIcon.classList.toggle('disabled', value === 0);\n        this.sendIcon.classList.toggle('enabled', value > 0);\n    };\n    AIAssistView.prototype.footerKeyHandler = function (e) {\n        this.keyHandler(e, 'footer');\n    };\n    AIAssistView.prototype.stopResponseKeyHandler = function (e) {\n        this.keyHandler(e, 'stopresponse');\n    };\n    AIAssistView.prototype.wireEvents = function () {\n        this.wireFooterEvents(this.sendIcon, this.footer, this.footerTemplate, this.textareaObj);\n        if (this.stopResponding) {\n            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(this.stopResponding, 'click', this.respondingStopper, this);\n            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(this.stopResponding, 'keydown', this.stopResponseKeyHandler, this);\n        }\n    };\n    AIAssistView.prototype.unWireEvents = function () {\n        this.unWireFooterEvents(this.sendIcon, this.footer, this.footerTemplate, this.textareaObj);\n        if (this.stopResponding) {\n            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(this.stopResponding, 'click', this.respondingStopper);\n            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(this.stopResponding, 'keydown', this.stopResponseKeyHandler);\n        }\n        this.detachCodeCopyEventHandler();\n    };\n    AIAssistView.prototype.detachCodeCopyEventHandler = function () {\n        this.preTagElements.forEach(function (_a) {\n            var preTag = _a.preTag, handler = _a.handler;\n            var copyIcon = preTag.querySelector('.e-code-copy');\n            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(copyIcon, 'click', handler);\n        });\n        this.preTagElements = [];\n    };\n    AIAssistView.prototype.keyHandler = function (event, value) {\n        if (event.key === 'Enter' && !event.shiftKey) {\n            switch (value) {\n                case 'footer':\n                    event.preventDefault();\n                    if (!this.isResponseRequested) {\n                        this.onSendIconClick();\n                    }\n                    break;\n                case 'stopresponse':\n                    this.respondingStopper(event);\n                    break;\n            }\n        }\n    };\n    AIAssistView.prototype.respondingStopper = function (event) {\n        this.isOutputRenderingStop = true;\n        this.isResponseRequested = false;\n        this.lastStreamPrompt = '';\n        if (this.outputElement.hasChildNodes) {\n            var skeletonElement = this.element.querySelector('.e-loading-body');\n            if (skeletonElement) {\n                this.outputElement.removeChild(this.skeletonContainer);\n            }\n        }\n        this.stopResponding.classList.remove('e-btn-active');\n        var promptIndex = this.prompts ? this.prompts.length - 1 : -1;\n        var eventArgs = {\n            event: event,\n            prompt: promptIndex >= 0 ? this.prompts[parseInt(promptIndex.toString(), 10)].prompt : '',\n            dataIndex: this.prompts ? this.prompts.length - 1 : -1\n        };\n        this.trigger('stopRespondingClick', eventArgs);\n    };\n    AIAssistView.prototype.onSuggestionClick = function (e) {\n        this.suggestionsElement.hidden = true;\n        var prevOnChange = this.isProtectedOnChange;\n        this.isProtectedOnChange = true;\n        this.prompt = e.target.innerText;\n        this.isProtectedOnChange = prevOnChange;\n        this.onSendIconClick();\n    };\n    AIAssistView.prototype.onSendIconClick = function () {\n        if (this.isResponseRequested || !this.prompt.trim()) {\n            return;\n        }\n        this.isResponseRequested = true;\n        this.lastStreamPrompt = '';\n        if (this.suggestionsElement) {\n            this.suggestionsElement.hidden = true;\n        }\n        this.isOutputRenderingStop = false;\n        this.stopResponding.classList.add('e-btn-active');\n        this.addPrompt();\n        this.createOutputElement();\n        var eventArgs = {\n            cancel: false,\n            responseToolbarItems: this.responseToolbarSettings.items,\n            prompt: this.prompt,\n            promptSuggestions: this.promptSuggestions\n        };\n        if (!this.footerTemplate) {\n            var prevOnChange = this.isProtectedOnChange;\n            this.isProtectedOnChange = true;\n            this.prompt = this.textareaObj.value = '';\n            this.textareaObj.dataBind();\n            this.isProtectedOnChange = prevOnChange;\n            this.updateTextAreaObject(this.textareaObj);\n            this.activateSendIcon(this.textareaObj.value.length);\n        }\n        this.trigger('promptRequest', eventArgs);\n        if (this.contentWrapper) {\n            this.scrollToBottom();\n        }\n    };\n    AIAssistView.prototype.addPrompt = function () {\n        var prevOnChange = this.isProtectedOnChange;\n        this.isProtectedOnChange = true;\n        this.prompts = this.prompts.concat([{ prompt: this.prompt, response: '', isResponseHelpful: null }]);\n        this.isProtectedOnChange = prevOnChange;\n    };\n    AIAssistView.prototype.getContextObject = function (templateName, contentElement, index, arrayPosition) {\n        var template;\n        var context = {};\n        var contextIndex = index >= 0 ? index : -1;\n        var contextPrompt = index >= 0 ? this.prompts[parseInt(contextIndex.toString(), 10)].prompt : '';\n        var contextOutput = index >= 0 ? this.prompts[parseInt(contextIndex.toString(), 10)].response : '';\n        switch (templateName.toLowerCase()) {\n            case 'promptitemtemplate': {\n                template = this.promptItemTemplate;\n                context = { prompt: contextPrompt, toolbarItems: this.promptToolbarSettings.items, index: contextIndex };\n                break;\n            }\n            case 'responseitemtemplate': {\n                template = this.responseItemTemplate;\n                context = {\n                    prompt: contextPrompt,\n                    response: contextOutput,\n                    index: contextIndex,\n                    toolbarItems: this.responseToolbarSettings.items\n                };\n                break;\n            }\n            case 'customviewtemplate':\n            case 'assistviewtemplate': {\n                template = this.views[parseInt(arrayPosition.toString(), 10)].viewTemplate || '';\n                break;\n            }\n        }\n        this.updateContent(template, contentElement, context, templateName);\n    };\n    AIAssistView.prototype.createOutputElement = function () {\n        this.outputSuggestionEle = this.createElement('div', { attrs: { id: \"e-prompt-item_\" + (this.prompts.length - 1), class: \"e-prompt-container \" + (this.promptItemTemplate ? 'e-prompt-item-template' : '') } });\n        this.renderPrompt(this.prompt, this.prompts.length - 1);\n        this.outputElement.append(this.outputSuggestionEle, this.skeletonContainer);\n        this.skeletonContainer.hidden = false;\n    };\n    AIAssistView.prototype.renderOutputContainer = function (promptText, outputText, index, isMethodCall, isFinalUpdate) {\n        var outputContainer = this.createElement('div', { attrs: { id: \"e-response-item_\" + index, class: \"e-output-container \" + (this.responseItemTemplate ? 'e-response-item-template' : '') } });\n        this.renderOutput(outputContainer, promptText, outputText, isMethodCall, index, isFinalUpdate);\n        if (promptText) {\n            this.outputElement.append(this.outputSuggestionEle);\n        }\n        this.outputElement.append(outputContainer);\n        if (this.stopResponding && isFinalUpdate) {\n            this.stopResponding.classList.remove('e-btn-active');\n        }\n        if (!this.isOutputRenderingStop && !this.content.contains(this.suggestionsElement) && this.suggestionsElement) {\n            this.content.append(this.suggestionsElement);\n        }\n    };\n    AIAssistView.prototype.renderOutput = function (outputContainer, promptText, outputText, isMethodCall, index, isFinalUpdate) {\n        var promptIcon = this.createElement('span', {\n            className: 'e-output-icon e-icons ' + (this.responseIconCss || (this.isAssistView && this.views[0].iconCss) || 'e-assistview-icon')\n        });\n        var aiOutputEle = this.createElement('div', { className: 'e-output' });\n        if (!this.aiAssistViewRendered || isMethodCall) {\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(promptText)) {\n                this.outputSuggestionEle = this.createElement('div', { attrs: { id: \"e-prompt-item_\" + index, class: \"e-prompt-container \" + (this.promptItemTemplate ? 'e-prompt-item-template' : '') } });\n                this.renderPrompt(promptText, index);\n            }\n        }\n        var lastPrompt = { prompt: promptText, response: outputText };\n        if (lastPrompt.response) {\n            if (this.responseItemTemplate) {\n                this.getContextObject('responseItemTemplate', aiOutputEle, index);\n                if (this.outputElement.querySelector('.e-skeleton')) {\n                    this.outputElement.removeChild(this.skeletonContainer);\n                }\n                if (this.contentFooterEle) {\n                    this.contentFooterEle.classList.remove('e-assist-toolbar-active');\n                }\n                this.renderOutputToolbarItems(index, isFinalUpdate);\n                aiOutputEle.append(this.contentFooterEle);\n                outputContainer.append(aiOutputEle);\n            }\n            else {\n                this.renderOutputTextContainer(lastPrompt.response, aiOutputEle, index, false, isFinalUpdate);\n                outputContainer.append(promptIcon, aiOutputEle);\n            }\n        }\n        else if (this.aiAssistViewRendered) {\n            if (this.outputElement.querySelector('.e-skeleton')) {\n                this.outputElement.removeChild(this.skeletonContainer);\n            }\n            if (this.suggestionsElement) {\n                this.suggestionsElement.hidden = false;\n            }\n        }\n    };\n    AIAssistView.prototype.renderOutputTextContainer = function (response, aiOutputEle, index, isMethodCall, isFinalUpdate) {\n        var _this = this;\n        if (this.contentFooterEle) {\n            this.contentFooterEle.classList.remove('e-assist-toolbar-active');\n        }\n        this.outputContentBodyEle = this.createElement('div', { attrs: { class: 'e-content-body', tabindex: '0' } });\n        if (!isMethodCall) {\n            this.outputContentBodyEle.innerHTML = response;\n            var preTags = Array.from(this.outputContentBodyEle.querySelectorAll('pre'));\n            preTags.forEach(function (preTag) {\n                var copyIcon = document.createElement('span');\n                copyIcon.className = 'e-icons e-code-copy e-assist-copy';\n                preTag.insertBefore(copyIcon, preTag.firstChild);\n                _this.preTagElements.push({ preTag: preTag, handler: _this.getCopyHandler(preTag) });\n                _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(copyIcon, 'click', _this.preTagElements[_this.preTagElements.length - 1].handler);\n            });\n        }\n        this.renderOutputToolbarItems(index, isFinalUpdate);\n        this.appendChildren(aiOutputEle, this.outputContentBodyEle, this.contentFooterEle);\n    };\n    AIAssistView.prototype.getCopyHandler = function (preTag) {\n        return function () {\n            var preText = preTag.innerText;\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            window.navigator.clipboard.writeText(preText);\n            var copyIcon = preTag.querySelector('.e-code-copy');\n            copyIcon.className = 'e-icons e-code-copy e-assist-check';\n            setTimeout(function () {\n                copyIcon.className = 'e-icons e-code-copy e-assist-copy';\n            }, 1000);\n        };\n    };\n    AIAssistView.prototype.renderOutputToolbarItems = function (index, isFinalUpdate) {\n        this.contentFooterEle = this.createElement('div', { className: 'e-content-footer e-assist-toolbar-active' });\n        var footerContent = this.createElement('div');\n        this.renderResponseToolbar(index);\n        if (this.aiAssistViewRendered) {\n            if (this.outputElement.querySelector('.e-skeleton')) {\n                this.outputElement.removeChild(this.skeletonContainer);\n            }\n            if (isFinalUpdate && this.suggestionsElement) {\n                this.suggestionsElement.hidden = false;\n            }\n        }\n        this.responseToolbarEle.appendTo(footerContent);\n        this.responseToolbarEle.element.setAttribute('aria-label', \"response-toolbar-\" + index);\n        this.contentFooterEle.appendChild(footerContent);\n    };\n    AIAssistView.prototype.renderResponseToolbar = function (index) {\n        var _this = this;\n        var pushToolbar = this.responseToolbarSettings.items.map(function (item) {\n            var toolbarItem = {\n                type: item.type,\n                visible: item.visible,\n                disabled: item.disabled,\n                tooltipText: item.tooltip,\n                template: item.template,\n                prefixIcon: item.iconCss,\n                text: item.text,\n                cssClass: item.cssClass,\n                align: item.align,\n                width: _this.responseToolbarSettings.width\n            };\n            if (toolbarItem.prefixIcon === 'e-icons e-assist-like' && _this.prompts[parseInt(index.toString(), 10)].isResponseHelpful) {\n                toolbarItem.prefixIcon = 'e-icons e-assist-like-filled';\n            }\n            else if (toolbarItem.prefixIcon === 'e-icons e-assist-dislike' && _this.prompts[parseInt(index.toString(), 10)].isResponseHelpful === false) {\n                toolbarItem.prefixIcon = 'e-icons e-assist-dislike-filled';\n            }\n            return toolbarItem;\n        });\n        this.responseToolbarEle = new _syncfusion_ej2_navigations__WEBPACK_IMPORTED_MODULE_1__.Toolbar({\n            items: pushToolbar,\n            clicked: function (args) {\n                var eventItemArgs = {\n                    type: args.item.type,\n                    text: args.item.text,\n                    iconCss: args.item.prefixIcon,\n                    cssClass: args.item.cssClass,\n                    tooltip: args.item.tooltipText,\n                    template: args.item.template,\n                    disabled: args.item.disabled,\n                    visible: args.item.visible,\n                    align: args.item.align,\n                    tabIndex: args.item.tabIndex\n                };\n                var eventArgs = {\n                    item: eventItemArgs,\n                    event: args.originalEvent,\n                    cancel: false,\n                    dataIndex: index\n                };\n                if (_this.responseToolbarSettings.itemClicked) {\n                    _this.responseToolbarSettings.itemClicked.call(_this, eventArgs);\n                }\n                if (!eventArgs.cancel) {\n                    _this.handleItemClick(args, index);\n                }\n            }\n        });\n    };\n    AIAssistView.prototype.getClipBoardContent = function (value) {\n        var tempElement = document.createElement('div');\n        tempElement.innerHTML = value;\n        tempElement.style.top = '0';\n        tempElement.style.left = '0';\n        tempElement.style.position = 'fixed';\n        tempElement.style.opacity = '0';\n        document.body.appendChild(tempElement);\n        navigator.clipboard.write([\n            new ClipboardItem({\n                'text/html': new Blob([tempElement.innerHTML], { type: 'text/html' }),\n                'text/plain': new Blob([tempElement.innerText], { type: 'text/plain' })\n            })\n        ]);\n        document.body.removeChild(tempElement);\n    };\n    AIAssistView.prototype.handleItemClick = function (args, index) {\n        var _this = this;\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        args.item.controlParent.element.querySelector('.e-assist-dislike');\n        if (args.item.prefixIcon === 'e-icons e-assist-copy') {\n            this.getClipBoardContent(this.prompts[parseInt(index.toString(), 10)].response);\n            args.item.prefixIcon = 'e-icons e-assist-check';\n            this.responseToolbarEle.dataBind();\n            setTimeout(function () {\n                args.item.prefixIcon = 'e-icons e-assist-copy';\n                _this.responseToolbarEle.dataBind();\n            }, 1000);\n        }\n        var icon = args.item.prefixIcon;\n        var isLikeInteracted = icon === 'e-icons e-assist-like-filled' || icon === 'e-icons e-assist-like';\n        var isDislikeInteracted = icon === 'e-icons e-assist-dislike-filled' || icon === 'e-icons e-assist-dislike';\n        if (isLikeInteracted || isDislikeInteracted) {\n            var isHelpful = null;\n            if (isLikeInteracted) {\n                isHelpful = this.prompts[parseInt(index.toString(), 10)].isResponseHelpful === true ? null : true;\n            }\n            else if (isDislikeInteracted) {\n                isHelpful = this.prompts[parseInt(index.toString(), 10)].isResponseHelpful === false ? null : false;\n            }\n            var prevOnChange = this.isProtectedOnChange;\n            this.isProtectedOnChange = true;\n            this.prompts[parseInt(index.toString(), 10)].isResponseHelpful = isHelpful;\n            var promptItem = this.prompts[parseInt(index.toString(), 10)];\n            // eslint-disable-next-line  @typescript-eslint/no-explicit-any\n            var controlParentItems = args.item.controlParent.items;\n            if (isLikeInteracted) {\n                if (promptItem.isResponseHelpful === true) {\n                    args.item.prefixIcon = 'e-icons e-assist-like-filled';\n                    if (controlParentItems && controlParentItems.length > 2) {\n                        controlParentItems[2].prefixIcon = 'e-icons e-assist-dislike';\n                    }\n                }\n                else {\n                    args.item.prefixIcon = 'e-icons e-assist-like';\n                }\n            }\n            else if (isDislikeInteracted) {\n                if (promptItem.isResponseHelpful === false) {\n                    args.item.prefixIcon = 'e-icons e-assist-dislike-filled';\n                    if (controlParentItems && controlParentItems.length > 1) {\n                        controlParentItems[1].prefixIcon = 'e-icons e-assist-like';\n                    }\n                }\n                else {\n                    args.item.prefixIcon = 'e-icons e-assist-dislike';\n                }\n            }\n            this.responseToolbarEle.dataBind();\n            this.isProtectedOnChange = prevOnChange;\n        }\n    };\n    AIAssistView.prototype.renderPrompt = function (promptText, promptIndex) {\n        var outputPrompt = this.createElement('div', { attrs: { class: 'e-prompt-text', tabindex: '0' } });\n        var promptContent = this.createElement('div', { className: 'e-prompt-content' });\n        var promptToolbarContainer = this.createElement('div', { className: 'e-prompt-toolbar' });\n        var promptToolbar = this.createElement('div');\n        var userIcon = this.createElement('span', { className: this.promptIconCss ? 'e-prompt-icon e-icons '\n                + this.promptIconCss : '' });\n        if (this.promptItemTemplate) {\n            this.getContextObject('promptItemTemplate', this.outputSuggestionEle, promptIndex);\n        }\n        else {\n            outputPrompt.innerHTML = promptText;\n            this.appendChildren(promptContent, outputPrompt);\n            if (this.promptIconCss) {\n                promptContent.appendChild(userIcon);\n            }\n            this.outputSuggestionEle.append(promptContent);\n        }\n        this.renderPromptToolbar(promptToolbar, promptIndex);\n        promptToolbarContainer.append(promptToolbar);\n        this.appendChildren(this.outputSuggestionEle, promptToolbarContainer);\n    };\n    AIAssistView.prototype.renderPromptToolbar = function (element, promptIndex) {\n        var _this = this;\n        var pushToolbar = [];\n        if (this.promptToolbarSettings.items.length === 0) {\n            pushToolbar = [\n                { prefixIcon: 'e-icons e-assist-edit', tooltipText: 'Edit' },\n                { prefixIcon: 'e-icons e-assist-copy', tooltipText: 'Copy' }\n            ];\n            var prevOnChange = this.isProtectedOnChange;\n            this.isProtectedOnChange = true;\n            this.promptToolbarSettings.items = [\n                { iconCss: 'e-icons e-assist-edit', tooltip: 'Edit' },\n                { iconCss: 'e-icons e-assist-copy', tooltip: 'Copy' }\n            ];\n            this.isProtectedOnChange = prevOnChange;\n        }\n        else {\n            pushToolbar = this.promptToolbarSettings.items.map(function (item) { return ({\n                type: item.type,\n                template: item.template,\n                disabled: item.disabled,\n                cssClass: item.cssClass,\n                visible: item.visible,\n                tooltipText: item.tooltip,\n                prefixIcon: item.iconCss,\n                text: item.text,\n                align: item.align,\n                width: _this.promptToolbarSettings.width\n            }); });\n        }\n        this.promptToolbarEle = new _syncfusion_ej2_navigations__WEBPACK_IMPORTED_MODULE_1__.Toolbar({\n            items: pushToolbar,\n            clicked: function (args) {\n                var eventItemArgs = {\n                    type: args.item.type,\n                    text: args.item.text,\n                    iconCss: args.item.prefixIcon,\n                    cssClass: args.item.cssClass,\n                    tooltip: args.item.tooltipText,\n                    template: args.item.template,\n                    disabled: args.item.disabled,\n                    visible: args.item.visible,\n                    align: args.item.align,\n                    tabIndex: args.item.tabIndex\n                };\n                var eventArgs = {\n                    item: eventItemArgs,\n                    event: args.originalEvent,\n                    cancel: false,\n                    dataIndex: promptIndex\n                };\n                if (_this.promptToolbarSettings.itemClicked) {\n                    _this.promptToolbarSettings.itemClicked.call(_this, eventArgs);\n                }\n                if (!eventArgs.cancel) {\n                    if (args.item.prefixIcon === 'e-icons e-assist-edit') {\n                        _this.onEditIconClick(promptIndex);\n                    }\n                    if (args.item.prefixIcon === 'e-icons e-assist-copy') {\n                        _this.getClipBoardContent(_this.prompts[parseInt(promptIndex.toString(), 10)].prompt);\n                        args.item.prefixIcon = 'e-icons e-assist-check';\n                        _this.promptToolbarEle.dataBind();\n                        setTimeout(function () {\n                            args.item.prefixIcon = 'e-icons e-assist-copy';\n                            _this.promptToolbarEle.dataBind();\n                        }, 1000);\n                    }\n                }\n            }\n        });\n        this.promptToolbarEle.appendTo(element);\n        this.promptToolbarEle.element.setAttribute('aria-label', \"prompt-toolbar-\" + promptIndex);\n    };\n    AIAssistView.prototype.renderSkeleton = function () {\n        this.skeletonContainer = this.createElement('div', { className: 'e-output-container' });\n        var outputViewWrapper = this.createElement('div', { className: 'e-output', styles: 'width: 70%;' });\n        var skeletonIconEle = this.createElement('span', { className: 'e-output-icon e-skeleton e-skeleton-text e-shimmer-wave' });\n        var skeletonBodyEle = this.createElement('div', { className: 'e-loading-body' });\n        var skeletonFooterEle = this.createElement('div', { className: 'e-loading-footer' });\n        var _a = [\n            this.createElement('div', { className: 'e-skeleton e-skeleton-text e-shimmer-wave', styles: 'width: 100%; height: 15px;' }),\n            this.createElement('div', { className: 'e-skeleton e-skeleton-text e-shimmer-wave', styles: 'width: 75%; height: 15px;' }),\n            this.createElement('div', { className: 'e-skeleton e-skeleton-text e-shimmer-wave', styles: 'width: 50%; height: 15px;' })\n        ], skeletonLine1 = _a[0], skeletonLine2 = _a[1], skeletonLine3 = _a[2];\n        var footerSkeleton = [\n            this.createElement('div', { className: 'e-skeleton e-skeleton-text e-shimmer-wave', styles: 'width: 100%; height: 30px;' })\n        ][0];\n        this.appendChildren(skeletonBodyEle, skeletonLine1, skeletonLine2, skeletonLine3);\n        skeletonFooterEle.append(footerSkeleton);\n        this.appendChildren(outputViewWrapper, skeletonBodyEle, skeletonFooterEle);\n        this.appendChildren(this.skeletonContainer, skeletonIconEle, outputViewWrapper);\n    };\n    AIAssistView.prototype.onEditIconClick = function (promptIndex) {\n        if (this.textareaObj) {\n            if (this.suggestionsElement) {\n                this.suggestionsElement.hidden = true;\n            }\n            var prevOnChange = this.isProtectedOnChange;\n            this.isProtectedOnChange = true;\n            this.textareaObj.value = this.prompt = this.prompts[parseInt(promptIndex.toString(), 10)].prompt;\n            this.textareaObj.dataBind();\n            this.updateTextAreaObject(this.textareaObj);\n            this.textareaObj.focusIn();\n            this.isProtectedOnChange = prevOnChange;\n            this.activateSendIcon(this.prompt.length);\n        }\n    };\n    AIAssistView.prototype.updateIcons = function (newCss, isPromptIconCss) {\n        if (isPromptIconCss === void 0) { isPromptIconCss = false; }\n        var elements;\n        if (this.outputElement) {\n            if (isPromptIconCss) {\n                newCss = 'e-prompt-icon e-icons ' + newCss;\n                elements = this.outputElement.querySelectorAll('.e-prompt-icon');\n            }\n            else {\n                newCss = ' e-output-icon e-icons ' + newCss;\n                elements = this.outputElement.querySelectorAll('.e-output-icon');\n            }\n        }\n        for (var index = 0; index < (elements && elements.length); index++) {\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([elements[parseInt(index.toString(), 10)]], elements[parseInt(index.toString(), 10)].classList.toString().trim().split(' '));\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([elements[parseInt(index.toString(), 10)]], newCss.trim().split(' '));\n        }\n    };\n    AIAssistView.prototype.updateToolbarSettings = function (previousToolbar) {\n        var previousToolbarIndex = 0;\n        for (var index = this.views.length; index < this.toolbarItems.length; index++) {\n            if (previousToolbar.items[parseInt(previousToolbarIndex.toString(), 10)] === this.toolbarItems[parseInt(index.toString(), 10)]) {\n                this.toolbarItems.splice(index, 1);\n            }\n        }\n        this.updateHeaderToolbar();\n        this.toolbar.items = this.toolbarItems;\n    };\n    AIAssistView.prototype.updateResponse = function (response, index, isFinalUpdate, responseItem) {\n        if (!this.responseItemTemplate && responseItem) {\n            var outputContentBodyEle = responseItem.querySelector('.e-content-body');\n            if (outputContentBodyEle) {\n                outputContentBodyEle.innerHTML = response;\n            }\n            if (isFinalUpdate && this.suggestionsElement) {\n                this.suggestionsElement.hidden = false;\n            }\n        }\n        else {\n            this.renderOutputContainer(undefined, response, index, false, isFinalUpdate);\n        }\n    };\n    AIAssistView.prototype.destroy = function () {\n        _super.prototype.destroy.call(this);\n        this.unWireEvents();\n        this.destroyAndNullify(this.textareaObj);\n        this.destroyAndNullify(this.responseToolbarEle);\n        this.destroyAndNullify(this.promptToolbarEle);\n        this.destroyAndNullify(this.toolbar);\n        this.destroyAssistView();\n        //private html elements nullify\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.remove)(this.viewWrapper);\n        this.viewWrapper = null;\n        this.aiAssistViewRendered = null;\n        this.assistViewTemplateIndex = null;\n        this.toolbarItems = [];\n        this.displayContents = [];\n        this.isOutputRenderingStop = null;\n        this.isResponseRequested = null;\n        this.suggestionHeader = null;\n        this.previousElement = null;\n        this.assistCustomSection = null;\n        this.preTagElements = [];\n        // properties nullify\n        this.toolbarSettings = this.promptToolbarSettings = this.responseToolbarSettings = {};\n        if (this.cssClass) {\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([this.element], this.cssClass.split(' '));\n        }\n        this.element.classList.remove('e-rtl');\n    };\n    AIAssistView.prototype.destroyAssistView = function () {\n        var properties = [\n            'toolbarHeader',\n            'sendIcon',\n            'suggestions',\n            'skeletonContainer',\n            'outputElement',\n            'outputSuggestionEle',\n            'contentFooterEle',\n            'footer',\n            'assistCustomSection',\n            'content',\n            'stopRespondingContent',\n            'stopResponding',\n            'contentWrapper'\n        ];\n        for (var _i = 0, properties_1 = properties; _i < properties_1.length; _i++) {\n            var prop = properties_1[_i];\n            var element = prop;\n            this.removeAndNullify(this[element]);\n            this[element] = null;\n        }\n    };\n    /**\n     * Executes the specified prompt in the AIAssistView component. The method accepts a string representing the prompt.\n     *\n     * @param {string} prompt - The prompt text to be executed. It must be a non-empty string.\n     *\n     * @returns {void}\n     */\n    AIAssistView.prototype.executePrompt = function (prompt) {\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(prompt) && prompt.trim().length > 0) {\n            var prevOnChange = this.isProtectedOnChange;\n            this.isProtectedOnChange = true;\n            this.prompt = prompt;\n            this.isProtectedOnChange = prevOnChange;\n            this.onSendIconClick();\n        }\n    };\n    /**\n     * Adds a response to the last prompt or appends a new prompt data in the AIAssistView component.\n     *\n     * @param {string | Object} outputResponse - The response to be added. Can be a string representing the response or an object containing both the prompt and the response.\n     * - If `outputResponse` is a string, it updates the response for the last prompt in the prompts collection.\n     * - If `outputResponse` is an object, it can either update the response of an existing prompt if the prompt matches or append a new prompt data.\n     * @param {boolean} isFinalUpdate - Indicates whether this response is the final one, to hide the stop response button.\n     * @returns {void}\n     */\n    AIAssistView.prototype.addPromptResponse = function (outputResponse, isFinalUpdate) {\n        if (isFinalUpdate === void 0) { isFinalUpdate = true; }\n        var prevOnChange = this.isProtectedOnChange;\n        this.isProtectedOnChange = true;\n        if (!this.isOutputRenderingStop) {\n            var responseItem = this.element.querySelector(\"#e-response-item_\" + (this.prompts.length - 1));\n            var lastPrompt = this.prompts[this.prompts.length - 1];\n            if (typeof outputResponse === 'string') {\n                if (!this.isResponseRequested) {\n                    this.prompts = this.prompts.concat([{ prompt: null, response: null, isResponseHelpful: null }]);\n                    lastPrompt = this.prompts[this.prompts.length - 1];\n                }\n                lastPrompt.response = outputResponse;\n                this.updateResponse(lastPrompt.response, this.prompts.length - 1, isFinalUpdate, responseItem);\n            }\n            if (typeof outputResponse === 'object') {\n                var tPrompt = {\n                    prompt: outputResponse.prompt,\n                    response: outputResponse.response,\n                    isResponseHelpful: (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(outputResponse.isResponseHelpful) ? null :\n                        outputResponse.isResponseHelpful\n                };\n                if (this.prompt === tPrompt.prompt || this.lastStreamPrompt === tPrompt.prompt) {\n                    lastPrompt.response = tPrompt.response;\n                    lastPrompt.isResponseHelpful = tPrompt.isResponseHelpful;\n                    this.updateResponse(lastPrompt.response, this.prompts.length - 1, isFinalUpdate, responseItem);\n                }\n                else {\n                    this.prompts = this.prompts.concat([tPrompt]);\n                    this.renderOutputContainer(tPrompt.prompt, tPrompt.response, this.prompts.length - 1, true, isFinalUpdate);\n                }\n                if (!isFinalUpdate) {\n                    this.lastStreamPrompt = tPrompt.prompt;\n                }\n            }\n            if (isFinalUpdate && this.stopResponding) {\n                this.stopResponding.classList.remove('e-btn-active');\n            }\n            this.isResponseRequested = !isFinalUpdate;\n        }\n        this.isProtectedOnChange = prevOnChange;\n    };\n    /**\n     * Scrolls the view to the bottom to display the most recent response in the AIAssistView component.\n     * This method programmatically scrolls the view to the bottom,\n     * typically used when new responses are added or to refocus on the latest response.\n     *\n     * @returns {void}\n     */\n    AIAssistView.prototype.scrollToBottom = function () {\n        this.updateScroll(this.contentWrapper);\n    };\n    /**\n     * Called if any of the property value is changed.\n     *\n     * @param  {AIAssistViewModel} newProp - Specifies new properties\n     * @param  {AIAssistViewModel} oldProp - Specifies old properties\n     * @returns {void}\n     * @private\n     */\n    AIAssistView.prototype.onPropertyChanged = function (newProp, oldProp) {\n        for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {\n            var prop = _a[_i];\n            switch (prop) {\n                case 'width':\n                case 'height':\n                    this.setDimension(this.element, this.width, this.height);\n                    break;\n                case 'cssClass':\n                    this.updateCssClass(this.element, newProp.cssClass, oldProp.cssClass);\n                    break;\n                case 'promptIconCss':\n                    this.updateIcons(newProp.promptIconCss, true);\n                    break;\n                case 'responseIconCss':\n                    this.updateIcons(newProp.responseIconCss);\n                    break;\n                case 'showHeader':\n                    this.updateHeader(this.showHeader, this.toolbarHeader, this.viewWrapper);\n                    break;\n                case 'promptSuggestions':\n                    if (this.suggestionsElement) {\n                        this.suggestionsElement.remove();\n                    }\n                    if (!this.isOutputRenderingStop) {\n                        this.renderSuggestions(this.promptSuggestions, this.promptSuggestionsHeader, this.promptSuggestionItemTemplate, 'promptSuggestion', 'promptSuggestionItemTemplate', this.onSuggestionClick);\n                    }\n                    break;\n                case 'showClearButton':\n                    this.textareaObj.showClearButton = this.showClearButton;\n                    break;\n                case 'promptPlaceholder':\n                    this.textareaObj.placeholder = this.promptPlaceholder;\n                    break;\n                case 'promptSuggestionsHeader': {\n                    this.suggestionHeader.innerHTML = this.promptSuggestionsHeader;\n                    var suggestionHeaderElem = this.element.querySelector('.e-suggestions .e-suggestion-header');\n                    if (!suggestionHeaderElem) {\n                        this.suggestionsElement.append(this.suggestionHeader);\n                    }\n                    break;\n                }\n                case 'activeView': {\n                    var previousViewIndex = this.getIndex(oldProp.activeView);\n                    this.updateActiveView(previousViewIndex);\n                    break;\n                }\n                case 'enableRtl':\n                    this.element.classList[this.enableRtl ? 'add' : 'remove']('e-rtl');\n                    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.toolbar)) {\n                        this.toolbar.enableRtl = this.enableRtl;\n                        this.toolbar.dataBind();\n                    }\n                    break;\n                case 'toolbarSettings':\n                    this.updateToolbarSettings(oldProp.toolbarSettings);\n                    break;\n                case 'promptToolbarSettings':\n                case 'responseToolbarSettings':\n                case 'prompts':\n                    this.isOutputRenderingStop = false;\n                    if (this.outputElement) {\n                        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.remove)(this.outputElement);\n                    }\n                    if (this.stopResponding) {\n                        this.stopResponding.classList.remove('e-btn-active');\n                    }\n                    this.aiAssistViewRendered = false;\n                    this.renderOutputContent(true);\n                    this.detachCodeCopyEventHandler();\n                    break;\n                case 'prompt':\n                    if (!this.footerTemplate) {\n                        this.textareaObj.value = this.prompt;\n                        this.textareaObj.dataBind();\n                        this.updateTextAreaObject(this.textareaObj);\n                    }\n                    break;\n                case 'locale':\n                    if (this.assistViewTemplateIndex < 0) {\n                        this.updateStopRespondingTitle();\n                    }\n                    break;\n            }\n        }\n    };\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('')\n    ], AIAssistView.prototype, \"prompt\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('Type prompt for assistance...')\n    ], AIAssistView.prototype, \"promptPlaceholder\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Collection)([], Prompt)\n    ], AIAssistView.prototype, \"prompts\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)([])\n    ], AIAssistView.prototype, \"promptSuggestions\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('')\n    ], AIAssistView.prototype, \"promptSuggestionsHeader\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(true)\n    ], AIAssistView.prototype, \"showHeader\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({ items: [] }, _interactive_chat_base_interactive_chat_base__WEBPACK_IMPORTED_MODULE_2__.ToolbarSettings)\n    ], AIAssistView.prototype, \"toolbarSettings\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(0)\n    ], AIAssistView.prototype, \"activeView\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(null)\n    ], AIAssistView.prototype, \"promptIconCss\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(null)\n    ], AIAssistView.prototype, \"responseIconCss\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('100%')\n    ], AIAssistView.prototype, \"width\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('100%')\n    ], AIAssistView.prototype, \"height\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('')\n    ], AIAssistView.prototype, \"cssClass\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Collection)([], AssistView)\n    ], AIAssistView.prototype, \"views\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({ width: null, items: [] }, PromptToolbarSettings)\n    ], AIAssistView.prototype, \"promptToolbarSettings\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({ width: null, items: [] }, ResponseToolbarSettings)\n    ], AIAssistView.prototype, \"responseToolbarSettings\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], AIAssistView.prototype, \"showClearButton\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('')\n    ], AIAssistView.prototype, \"footerTemplate\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('')\n    ], AIAssistView.prototype, \"promptItemTemplate\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('')\n    ], AIAssistView.prototype, \"responseItemTemplate\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('')\n    ], AIAssistView.prototype, \"promptSuggestionItemTemplate\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('')\n    ], AIAssistView.prototype, \"bannerTemplate\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], AIAssistView.prototype, \"promptRequest\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], AIAssistView.prototype, \"promptChanged\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], AIAssistView.prototype, \"stopRespondingClick\", void 0);\n    AIAssistView = __decorate([\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.NotifyPropertyChanges\n    ], AIAssistView);\n    return AIAssistView;\n}(_interactive_chat_base_interactive_chat_base__WEBPACK_IMPORTED_MODULE_2__.InterActiveChatBase));\n\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-interactive-chat/src/ai-assistview/ai-assistview.js?");

/***/ })

}]);