"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkej2_vue_samples"] = self["webpackChunkej2_vue_samples"] || []).push([["chunk-vendors-node_modules_syncfusion_ej2-spreadsheet_src_workbook_base_sheet_js-a2339c0e"],{

/***/ "./node_modules/@syncfusion/ej2-spreadsheet/src/workbook/base/sheet.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-spreadsheet/src/workbook/base/sheet.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Range: () => (/* binding */ Range),\n/* harmony export */   Sheet: () => (/* binding */ Sheet),\n/* harmony export */   UsedRange: () => (/* binding */ UsedRange),\n/* harmony export */   duplicateSheet: () => (/* binding */ duplicateSheet),\n/* harmony export */   getMaxSheetId: () => (/* binding */ getMaxSheetId),\n/* harmony export */   getSelectedRange: () => (/* binding */ getSelectedRange),\n/* harmony export */   getSheet: () => (/* binding */ getSheet),\n/* harmony export */   getSheetIndex: () => (/* binding */ getSheetIndex),\n/* harmony export */   getSheetIndexByName: () => (/* binding */ getSheetIndexByName),\n/* harmony export */   getSheetIndexFromId: () => (/* binding */ getSheetIndexFromId),\n/* harmony export */   getSheetName: () => (/* binding */ getSheetName),\n/* harmony export */   getSheetNameCount: () => (/* binding */ getSheetNameCount),\n/* harmony export */   getSheetNameFromAddress: () => (/* binding */ getSheetNameFromAddress),\n/* harmony export */   getSingleSelectedRange: () => (/* binding */ getSingleSelectedRange),\n/* harmony export */   initSheet: () => (/* binding */ initSheet),\n/* harmony export */   moveSheet: () => (/* binding */ moveSheet),\n/* harmony export */   updateSelectedRange: () => (/* binding */ updateSelectedRange)\n/* harmony export */ });\n/* harmony import */ var _data__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./data */ \"./node_modules/@syncfusion/ej2-spreadsheet/src/workbook/base/data.js\");\n/* harmony import */ var _common_index__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../common/index */ \"./node_modules/@syncfusion/ej2-spreadsheet/src/workbook/common/index.js\");\n/* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @syncfusion/ej2-base */ \"./node_modules/@syncfusion/ej2-base/index.js\");\nvar __extends = (undefined && undefined.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\n\n\n\n/**\n * Configures the range processing for the spreadsheet.\n *  ```html\n * <div id='Spreadsheet'></div>\n * ```\n * ```typescript\n * let spreadsheet: Spreadsheet = new Spreadsheet({\n *      sheets: [{\n *                  name: 'First Sheet',\n *                  ranges: [{ dataSource: defaultData }],\n *                  rows: [{\n *                          index: 30,\n *                          cells: [{ index: 4, value: 'Total Amount:' },\n *                                  { formula: '=SUM(F2:F30)', style: { fontWeight: 'bold' } }]\n *                  }]\n * ...\n * });\n * spreadsheet.appendTo('#Spreadsheet');\n * ```\n */\nvar Range = /** @class */ (function (_super) {\n    __extends(Range, _super);\n    function Range() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Range.prototype.setProperties = function (prop, muteOnChange) {\n        var _this = this;\n        if (this['parentObj'].isComplexArraySetter && this['controlParent'] && this['controlParent'].isAngular) {\n            if (Object.keys(prop).length) {\n                if (this['parentObj']['currRangeIdx'] === undefined) {\n                    this['parentObj']['currRangeIdx'] = 0;\n                }\n                else {\n                    this['parentObj']['currRangeIdx'] += 1;\n                }\n                var range = this['parentObj'].ranges[this['parentObj']['currRangeIdx']];\n                if (range && range.info) {\n                    this.info = range.info;\n                }\n                setTimeout(function () {\n                    if (_this['parentObj']['currRangeIdx'] !== undefined) {\n                        delete _this['parentObj']['currRangeIdx'];\n                    }\n                });\n            }\n            else if (this['controlParent'].tagObjects[0].instance && this['controlParent'].tagObjects[0].instance.hasChanges\n                && !this['controlParent'].tagObjects[0].instance.isInitChanges) {\n                var sheetIdx = this['controlParent'].sheets.indexOf(this['parentObj']);\n                if (this['parentObj'].changedRangeIdx === undefined) {\n                    var rangeIdx_1;\n                    var tagObjects = this['controlParent'].tagObjects[0].instance.list[sheetIdx].tagObjects;\n                    for (var i = 0; i < tagObjects.length; i++) {\n                        if (tagObjects[i]['name'] === 'ranges') {\n                            tagObjects[i]['instance'].list\n                                .forEach(function (range, idx) {\n                                if (range.hasChanges) {\n                                    rangeIdx_1 = idx;\n                                }\n                            });\n                            break;\n                        }\n                    }\n                    this['parentObj'].changedRangeIdx = rangeIdx_1;\n                }\n            }\n        }\n        _super.prototype.setProperties.call(this, prop, muteOnChange);\n    };\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.Property)(null)\n    ], Range.prototype, \"dataSource\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.Property)('A1')\n    ], Range.prototype, \"startCell\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.Property)(null)\n    ], Range.prototype, \"query\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.Property)(null)\n    ], Range.prototype, \"fieldsOrder\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.Property)(true)\n    ], Range.prototype, \"showFieldAsHeader\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.Property)('')\n    ], Range.prototype, \"template\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.Property)('A1')\n    ], Range.prototype, \"address\", void 0);\n    return Range;\n}(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.ChildProperty));\n\n/**\n * Used range which contains end row index and end column index of the last used cell in sheet .\n */\nvar UsedRange = /** @class */ (function (_super) {\n    __extends(UsedRange, _super);\n    function UsedRange() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.Property)(0)\n    ], UsedRange.prototype, \"rowIndex\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.Property)(0)\n    ], UsedRange.prototype, \"colIndex\", void 0);\n    return UsedRange;\n}(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.ChildProperty));\n\n/**\n * Configures the sheet behavior for the spreadsheet.\n */\nvar Sheet = /** @class */ (function (_super) {\n    __extends(Sheet, _super);\n    function Sheet() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.Property)(null)\n    ], Sheet.prototype, \"rows\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.Property)(null)\n    ], Sheet.prototype, \"columns\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.Complex)({}, _common_index__WEBPACK_IMPORTED_MODULE_1__.ProtectSettings)\n    ], Sheet.prototype, \"protectSettings\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.Collection)([], Range)\n    ], Sheet.prototype, \"ranges\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.Collection)([], _common_index__WEBPACK_IMPORTED_MODULE_1__.ConditionalFormat)\n    ], Sheet.prototype, \"conditionalFormats\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.Property)(0)\n    ], Sheet.prototype, \"index\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.Property)('')\n    ], Sheet.prototype, \"name\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.Property)(100)\n    ], Sheet.prototype, \"rowCount\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.Property)(100)\n    ], Sheet.prototype, \"colCount\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.Property)('A1:A1')\n    ], Sheet.prototype, \"selectedRange\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.Property)('A1')\n    ], Sheet.prototype, \"activeCell\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.Complex)({}, UsedRange)\n    ], Sheet.prototype, \"usedRange\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.Property)('A1')\n    ], Sheet.prototype, \"topLeftCell\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.Property)(true)\n    ], Sheet.prototype, \"showHeaders\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.Property)(true)\n    ], Sheet.prototype, \"showGridLines\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.Property)(false)\n    ], Sheet.prototype, \"isProtected\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.Property)('Visible')\n    ], Sheet.prototype, \"state\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.Property)(0)\n    ], Sheet.prototype, \"frozenRows\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.Property)(0)\n    ], Sheet.prototype, \"frozenColumns\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.Property)('A1')\n    ], Sheet.prototype, \"paneTopLeftCell\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.Property)('')\n    ], Sheet.prototype, \"password\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.Property)(null)\n    ], Sheet.prototype, \"standardHeight\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.Property)(false)\n    ], Sheet.prototype, \"isSheetCalculated\", void 0);\n    return Sheet;\n}(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.ChildProperty));\n\n/**\n * To get sheet index from address.\n *\n * @hidden\n * @param {Workbook} context - Specifies the context.\n * @param {string} name - Specifies the name.\n * @returns {number} - To gget sheet index from address.\n */\nfunction getSheetIndex(context, name) {\n    var idx;\n    if (name.startsWith('\\'') && name.endsWith('\\'')) {\n        name = name.replace(/''/g, '\\'').replace(/^'|'$/g, '');\n    }\n    for (var i = 0; i < context.sheets.length; i++) {\n        if (context.sheets[i].name.toLowerCase() === name.toLowerCase()) {\n            idx = i;\n            break;\n        }\n    }\n    return idx;\n}\n/**\n * To get sheet index from sheet id.\n *\n * @hidden\n * @param {Workbook} context - Specifies the context.\n * @param {number} id - Specifies the id.\n * @returns {number} - To get the sheet index from id.\n */\nfunction getSheetIndexFromId(context, id) {\n    var idx;\n    for (var i = 0; i < context.sheets.length; i++) {\n        if (context.sheets[i].id === id) {\n            idx = i;\n            break;\n        }\n    }\n    return idx;\n}\n/**\n * To get sheet name from address.\n *\n * @hidden\n * @param {string} address - Specifies the address.\n * @returns {address} - To get Sheet Name From Address.\n */\nfunction getSheetNameFromAddress(address) {\n    var sheetRefIndex = address.lastIndexOf('!');\n    return sheetRefIndex > -1 ? address.substring(0, sheetRefIndex).replace(/'/gi, '') : address.replace(/'/gi, '');\n}\n/**\n * To get sheet index from sheet name.\n *\n * @hidden\n * @param {Object} context - Specifies the context.\n * @param {string} name - Specifies the name.\n * @param {SheetModel} info - Specifies the sheet info.\n * @returns {number} - To get the sheet index by name.\n */\nfunction getSheetIndexByName(context, name, info) {\n    var len = info.length;\n    for (var i = 0; i < len; i++) {\n        if (info[i].sheet.toUpperCase() === name.toUpperCase()) {\n            return info[i].index;\n        }\n    }\n    return -1;\n}\n/**\n * update selected range\n *\n * @hidden\n * @param {Workbook} context - Specifies the context.\n * @param {string} range - Specifies the range.\n * @param {SheetModel} sheet - Specifies the sheet.\n * @param {boolean} isMultiRange - Specifies the boolean value.\n * @returns {void} - Update the selected range.\n */\nfunction updateSelectedRange(context, range, sheet, isMultiRange) {\n    if (sheet === void 0) { sheet = {}; }\n    context.setSheetPropertyOnMute(sheet, 'selectedRange', isMultiRange ? sheet.selectedRange + ' ' + range : range);\n}\n/**\n * get selected range\n *\n * @hidden\n * @param {SheetModel} sheet - Specifies the sheet.\n * @returns {string} - Get selected range.\n */\nfunction getSelectedRange(sheet) {\n    return sheet && sheet.selectedRange || 'A1';\n}\n/**\n * @hidden\n * @param {SheetModel} sheet - Specifies the sheet.\n * @returns {string} - To get single selected range.\n */\nfunction getSingleSelectedRange(sheet) {\n    return sheet.selectedRange.split(' ')[0];\n}\n/**\n * @hidden\n * @param {Workbook} context - Specifies the context.\n * @param {number} idx - Specifies the idx.\n * @returns {SheetModel} - To get sheet.\n */\nfunction getSheet(context, idx) {\n    return context.sheets[idx];\n}\n/**\n * @hidden\n * @param {Workbook} context - Specifies the context.\n * @returns {number} - To get sheet name count.\n */\nfunction getSheetNameCount(context) {\n    var name = [];\n    context.sheets.forEach(function (sheet) {\n        name.push(sheet.name.toLowerCase());\n    });\n    for (var i = 0; i < name.length; i++) {\n        if (name.indexOf('sheet' + context.sheetNameCount) > -1) {\n            context.sheetNameCount++;\n        }\n        else {\n            return context.sheetNameCount++;\n        }\n    }\n    return context.sheetNameCount++;\n}\n/**\n * @hidden\n * @param {SheetModel[]} sheets - Specifies the sheets.\n * @returns {number} - To get sheet id.\n */\nfunction getMaxSheetId(sheets) {\n    var cnt = 0;\n    sheets.forEach(function (sheet) {\n        cnt = Math.max(sheet.id, cnt);\n    });\n    return cnt + 1;\n}\n/**\n * @hidden\n * @param {Workbook} context - Specifies the context.\n * @param {SheetModel[]} sheet - Specifies the sheet.\n * @param {boolean} isImport - Specifies is Import or not.\n * @returns {void} - To initiate sheet.\n */\nfunction initSheet(context, sheet, isImport) {\n    var sheets = sheet ? sheet : context.sheets;\n    sheets.forEach(function (sheet) {\n        sheet.id = sheet.id || 0;\n        sheet.name = sheet.name || '';\n        context.setSheetPropertyOnMute(sheet, 'rowCount', sheet.rowCount || 100);\n        context.setSheetPropertyOnMute(sheet, 'colCount', sheet.colCount || 100);\n        context.setSheetPropertyOnMute(sheet, 'topLeftCell', sheet.topLeftCell || 'A1');\n        context.setSheetPropertyOnMute(sheet, 'activeCell', sheet.activeCell || 'A1');\n        context.setSheetPropertyOnMute(sheet, 'selectedRange', sheet.selectedRange || sheet.activeCell + ':' + sheet.activeCell);\n        context.setSheetPropertyOnMute(sheet, 'usedRange', sheet.usedRange || { rowIndex: 0, colIndex: 0 });\n        context.setSheetPropertyOnMute(sheet, 'ranges', sheet.ranges ? sheet.ranges : []);\n        context.setSheetPropertyOnMute(sheet, 'rows', (sheet.rows && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.extend)([], sheet.rows, null, true)) || []);\n        context.setSheetPropertyOnMute(sheet, 'columns', sheet.columns || []);\n        context.setSheetPropertyOnMute(sheet, 'showHeaders', (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isUndefined)(sheet.showHeaders) ? true : sheet.showHeaders);\n        context.setSheetPropertyOnMute(sheet, 'showGridLines', (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isUndefined)(sheet.showGridLines) ? true : sheet.showGridLines);\n        context.setSheetPropertyOnMute(sheet, 'state', sheet.state || 'Visible');\n        sheet.maxHgts = sheet.maxHgts || [];\n        sheet.isImportProtected = sheet.isProtected && isImport;\n        sheet.protectSettings = sheet.protectSettings || { selectCells: false, formatCells: false, formatRows: false, formatColumns: false,\n            insertLink: false };\n        sheet.isProtected = sheet.isProtected || false;\n        if (!sheet.paneTopLeftCell || sheet.paneTopLeftCell === 'A1') {\n            sheet.frozenRows = sheet.frozenRows ? sheet.frozenRows : 0;\n            sheet.frozenColumns = sheet.frozenColumns ? sheet.frozenColumns : 0;\n            var indexes = (0,_common_index__WEBPACK_IMPORTED_MODULE_1__.getCellIndexes)(sheet.topLeftCell);\n            context.setSheetPropertyOnMute(sheet, 'paneTopLeftCell', (0,_common_index__WEBPACK_IMPORTED_MODULE_1__.getCellAddress)(sheet.frozenRows ? indexes[0] + sheet.frozenRows : indexes[0], sheet.frozenColumns ? indexes[1] + sheet.frozenColumns : indexes[1]));\n        }\n        (0,_data__WEBPACK_IMPORTED_MODULE_0__.processIdx)(sheet.columns);\n        initRow(sheet.rows, isImport);\n    });\n    (0,_data__WEBPACK_IMPORTED_MODULE_0__.processIdx)(sheets, true, context);\n}\n// function initRangeSettings(ranges: RangeModel[]): RangeModel[] {\n//     ranges.forEach((range: RangeModel) => {\n//         range.startCell = range.startCell || 'A1';\n//         range.address = range.address || 'A1';\n//         range.template = range.template || '';\n//         range.showFieldAsHeader = isUndefined(range.showFieldAsHeader) ? true : range.showFieldAsHeader;\n//     });\n//     return ranges;\n// }\n/**\n * @param {RowModel[]} rows - Specifies the rows.\n * @param {boolean} isImport - Specifies the operation is from Import or not.\n * @returns {void} - Specifies the row.\n */\nfunction initRow(rows, isImport) {\n    rows.forEach(function (row) {\n        if (row && row.cells) {\n            // Process cell indexes in ascending order when the import operation is performed.\n            (0,_data__WEBPACK_IMPORTED_MODULE_0__.processIdx)(row.cells, null, undefined, isImport);\n        }\n    });\n    (0,_data__WEBPACK_IMPORTED_MODULE_0__.processIdx)(rows, null, undefined, isImport);\n}\n/**\n * get sheet name\n *\n * @param {Workbook} context - Specifies the context.\n * @param {number} idx - Specifies the idx.\n * @returns {string} - To get sheet name.\n * @hidden\n */\nfunction getSheetName(context, idx) {\n    if (idx === void 0) { idx = context.activeSheetIndex; }\n    return getSheet(context, idx).name;\n}\n/**\n * @param {Workbook} context - Specifies context\n * @param {number} position - position to move a sheet in the list of sheets\n * @param {number[]} sheetIndexes - Specifies the sheet indexes of the sheets which is to be moved\n * @param {boolean} action - Specifies to trigger events\n * @param {boolean} isFromUpdateAction - Specifies is from UpdateAction or not.\n * @returns {void}\n * @hidden\n */\nfunction moveSheet(context, position, sheetIndexes, action, isFromUpdateAction) {\n    var needRefresh = !!sheetIndexes;\n    sheetIndexes = sheetIndexes || [context.activeSheetIndex];\n    var sheetName = getSheetName(context);\n    position = getNextPrevVisibleSheetIndex(context.sheets, position, context.activeSheetIndex > position);\n    var args = {\n        action: 'moveSheet', eventArgs: { position: position, sheetIndexes: sheetIndexes, cancel: false }\n    };\n    if (action) {\n        context.trigger('actionBegin', args);\n    }\n    if (!args.eventArgs.cancel) {\n        context.notify(_common_index__WEBPACK_IMPORTED_MODULE_1__.moveSheetHandler, { prevIndex: context.activeSheetIndex, currentIndex: position });\n        sheetIndexes.forEach(function (sIdx, idx) {\n            context.sheets.splice(position + idx, 0, context.sheets.splice(sIdx + (position > sIdx ? -1 * idx : 0), 1)[0]);\n        });\n        context.setProperties({\n            activeSheetIndex: isFromUpdateAction ? getSheetIndex(context, sheetName)\n                : (position > sheetIndexes[0] ? position - (sheetIndexes.length - 1) : position)\n        }, true);\n        context.notify(_common_index__WEBPACK_IMPORTED_MODULE_1__.moveOrDuplicateSheet, { refresh: needRefresh });\n        if (action) {\n            delete args.eventArgs.cancel;\n            context.trigger('actionComplete', args);\n        }\n    }\n}\n/**\n * @param {Workbook} context - Specifies context\n * @param {number} sheetIndex - Specifies sheetIndex to be duplicated\n * @param {boolean} action - Specifies to trigger events\n * @param {boolean} isFromUpdateAction - Specifies is from updateAction.\n * @returns {void}\n * @hidden\n */\nfunction duplicateSheet(context, sheetIndex, action, isFromUpdateAction) {\n    sheetIndex = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isUndefined)(sheetIndex) ? context.activeSheetIndex : sheetIndex;\n    var args = {\n        action: 'duplicateSheet', eventArgs: { sheetIndex: sheetIndex, cancel: false }\n    };\n    if (action) {\n        context.trigger('actionBegin', args);\n    }\n    if (!args.eventArgs.cancel) {\n        var originalSheet = getSheet(context, sheetIndex);\n        var sheet = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.extend)({}, originalSheet.properties ?\n            originalSheet.properties : originalSheet, {}, true);\n        sheet.id = getMaxSheetId(context.sheets);\n        var name_1 = sheet.name;\n        if (/^\\(\\d+\\)$/.test('(' + name_1.split(' (')[1])) {\n            name_1 = name_1.split(' (')[0];\n        }\n        var sheetNames_1 = [];\n        context.sheets.forEach(function (sheet) {\n            sheetNames_1.push(sheet.name);\n        });\n        for (var i = 2;; i++) {\n            if (sheetNames_1.indexOf(name_1 + ' (' + i + ')') === -1) {\n                sheet.name = name_1 + ' (' + i + ')';\n                break;\n            }\n        }\n        context.notify(_common_index__WEBPACK_IMPORTED_MODULE_1__.duplicateSheetFilterHandler, { sheetIndex: sheetIndex, newSheetIndex: sheetIndex + 1 });\n        context.notify(_common_index__WEBPACK_IMPORTED_MODULE_1__.updateSortCollection, { isDuplicate: true, curSheetIndex: sheetIndex, newSheetIndex: sheetIndex + 1 });\n        context.createSheet(sheetIndex + 1, [sheet]);\n        context.notify(_common_index__WEBPACK_IMPORTED_MODULE_1__.workbookFormulaOperation, { action: 'addSheet', sheetName: 'Sheet' + sheet.id, visibleName: sheet.name, sheetId: sheet.id });\n        if (!isFromUpdateAction) {\n            context.setProperties({ activeSheetIndex: sheetIndex + 1 }, true);\n        }\n        context.notify(_common_index__WEBPACK_IMPORTED_MODULE_1__.moveOrDuplicateSheet, { refresh: true, isDuplicate: true });\n        if (action) {\n            delete args.eventArgs.cancel;\n            context.trigger('actionComplete', args);\n        }\n    }\n}\n/**\n * @param {SheetModel[]} sheets - sheets of spreadsheet\n * @param {number} startIndex - index of the sheet to search from\n * @param {boolean} isPrevious - if set to `true`, its find the previous visible sheet index\n * @returns {number} - return next visible sheet\n */\nfunction getNextPrevVisibleSheetIndex(sheets, startIndex, isPrevious) {\n    for (var i = startIndex; isPrevious ? i >= 0 : i < sheets.length; isPrevious ? i-- : i++) {\n        if (!(sheets[i].state === 'Hidden' || sheets[i].state === 'VeryHidden')) {\n            startIndex = i;\n            break;\n        }\n    }\n    return startIndex;\n}\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-spreadsheet/src/workbook/base/sheet.js?");

/***/ })

}]);