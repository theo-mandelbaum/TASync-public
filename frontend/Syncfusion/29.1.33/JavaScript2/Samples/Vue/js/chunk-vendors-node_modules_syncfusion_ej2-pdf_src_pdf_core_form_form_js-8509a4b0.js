"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkej2_vue_samples"] = self["webpackChunkej2_vue_samples"] || []).push([["chunk-vendors-node_modules_syncfusion_ej2-pdf_src_pdf_core_form_form_js-8509a4b0"],{

/***/ "./node_modules/@syncfusion/ej2-pdf/src/pdf/core/form/form.js":
/*!********************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-pdf/src/pdf/core/form/form.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PdfForm: () => (/* binding */ PdfForm)\n/* harmony export */ });\n/* harmony import */ var _pdf_primitives__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./../pdf-primitives */ \"./node_modules/@syncfusion/ej2-pdf/src/pdf/core/pdf-primitives.js\");\n/* harmony import */ var _field__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./field */ \"./node_modules/@syncfusion/ej2-pdf/src/pdf/core/form/field.js\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./../utils */ \"./node_modules/@syncfusion/ej2-pdf/src/pdf/core/utils.js\");\n/* harmony import */ var _enumerator__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./../enumerator */ \"./node_modules/@syncfusion/ej2-pdf/src/pdf/core/enumerator.js\");\n/* harmony import */ var _pdf_page__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./../pdf-page */ \"./node_modules/@syncfusion/ej2-pdf/src/pdf/core/pdf-page.js\");\n/* harmony import */ var _annotations_annotation_collection__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./../annotations/annotation-collection */ \"./node_modules/@syncfusion/ej2-pdf/src/pdf/core/annotations/annotation-collection.js\");\n/* harmony import */ var _annotations_annotation__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./../annotations/annotation */ \"./node_modules/@syncfusion/ej2-pdf/src/pdf/core/annotations/annotation.js\");\n\n\n\n\n\n\n\n/**\n * Represents a PDF form.\n * ```typescript\n * // Load an existing PDF document\n * let document: PdfDocument = new PdfDocument(data, password);\n * // Access the form of the PDF document\n * let form: PdfForm = document.form;\n * // Save the document\n * document.save('output.pdf');\n * // Destroy the document\n * document.destroy();\n * ```\n */\nvar PdfForm = /** @class */ (function () {\n    /**\n     * Represents a loaded from the PDF document.\n     *\n     * @private\n     * @param {_PdfDictionary} dictionary Form dictionary.\n     * @param {_PdfCrossReference} crossReference Cross reference object.\n     */\n    function PdfForm(dictionary, crossReference) {\n        this._isDefaultAppearance = false;\n        this._hasKids = false;\n        this._setAppearance = false;\n        this._exportEmptyFields = false;\n        this._fieldCollection = [];\n        this._signFlag = _enumerator__WEBPACK_IMPORTED_MODULE_3__._SignatureFlag.none;\n        this._isNeedAppearances = false;\n        this._dictionary = dictionary;\n        this._crossReference = crossReference;\n        this._parsedFields = new Map();\n        this._fields = [];\n        this._createFields();\n    }\n    Object.defineProperty(PdfForm.prototype, \"count\", {\n        /**\n         * Gets the fields count (Read only).\n         *\n         * @returns {number} Fields count.\n         *\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data, password);\n         * // Access loaded form\n         * let form: PdfForm = document.form;\n         * // Gets the fields count\n         * let count: number = form.count;\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        get: function () {\n            return this._fields.length;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfForm.prototype, \"needAppearances\", {\n        /**\n         *  Gets a value indicating whether need appearances (Read only).\n         *\n         * @returns {boolean} Need appearances.\n         *\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data, password);\n         * // Access loaded form\n         * let form: PdfForm = document.form;\n         * // Gets the boolean flag indicating need appearances\n         * let needAppearances: number = form.needAppearances;\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        get: function () {\n            if (this._dictionary.has('NeedAppearances')) {\n                this._needAppearances = this._dictionary.get('NeedAppearances');\n            }\n            return this._needAppearances;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfForm.prototype, \"exportEmptyFields\", {\n        /**\n         *  Gets a value indicating whether allow to export empty fields or not.\n         *\n         * @returns {boolean} Export empty fields.\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data, password);\n         * // Access loaded form\n         * let form: PdfForm = document.form;\n         * // Gets a value indicating whether allow to export empty fields or not.\n         * let exportEmptyFields: boolean = form.exportEmptyFields;\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        get: function () {\n            return this._exportEmptyFields;\n        },\n        /**\n         *  Sets a value indicating whether allow to export empty fields or not.\n         *\n         * @param {boolean} value Export empty fields.\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data, password);\n         * // Access loaded form\n         * let form: PdfForm = document.form;\n         * // Sets a value indicating whether allow to export empty fields or not.\n         * form.exportEmptyFields = false;\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        set: function (value) {\n            this._exportEmptyFields = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfForm.prototype, \"_signatureFlag\", {\n        get: function () {\n            return this._signFlag;\n        },\n        set: function (value) {\n            if (value !== this._signFlag) {\n                this._signFlag = value;\n                this._dictionary.update('SigFlags', value);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Gets the `PdfField` at the specified index.\n     *\n     * @param {number} index Field index.\n     * @returns {PdfField} Loaded PDF form field at the specified index.\n     *\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data, password);\n     * // Access the loaded form field\n     * let field: PdfField = document.form.fieldAt(0);\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    PdfForm.prototype.fieldAt = function (index) {\n        if (index < 0 || index >= this._fields.length) {\n            throw Error('Index out of range.');\n        }\n        var field;\n        if (this._parsedFields.has(index)) {\n            field = this._parsedFields.get(index);\n            this._isNeedAppearances = true;\n        }\n        else {\n            var dictionary = void 0;\n            var ref = this._fields[index]; // eslint-disable-line\n            if (ref && ref instanceof _pdf_primitives__WEBPACK_IMPORTED_MODULE_0__._PdfReference) {\n                dictionary = this._crossReference._fetch(ref);\n            }\n            if (dictionary) {\n                field = this._parseFields(dictionary, ref);\n                this._parsedFields.set(index, field);\n                if (field && field instanceof _field__WEBPACK_IMPORTED_MODULE_1__.PdfField) {\n                    field._annotationIndex = index;\n                }\n            }\n        }\n        return field;\n    };\n    PdfForm.prototype._parseFields = function (dictionary, reference) {\n        var field;\n        if (dictionary) {\n            var key = (0,_utils__WEBPACK_IMPORTED_MODULE_2__._getInheritableProperty)(dictionary, 'FT', false, true, 'Parent');\n            var fieldFlags = 0;\n            var flag = (0,_utils__WEBPACK_IMPORTED_MODULE_2__._getInheritableProperty)(dictionary, 'Ff', false, true, 'Parent');\n            if (typeof flag !== 'undefined') {\n                fieldFlags = flag;\n            }\n            if (key) {\n                switch (key.name.toLowerCase()) {\n                    case 'tx':\n                        field = _field__WEBPACK_IMPORTED_MODULE_1__.PdfTextBoxField._load(this, dictionary, this._crossReference, reference);\n                        break;\n                    case 'btn':\n                        if ((fieldFlags & _enumerator__WEBPACK_IMPORTED_MODULE_3__._FieldFlag.pushButton) !== 0) {\n                            field = _field__WEBPACK_IMPORTED_MODULE_1__.PdfButtonField._load(this, dictionary, this._crossReference, reference);\n                        }\n                        else if ((fieldFlags & _enumerator__WEBPACK_IMPORTED_MODULE_3__._FieldFlag.radio) !== 0) {\n                            field = _field__WEBPACK_IMPORTED_MODULE_1__.PdfRadioButtonListField._load(this, dictionary, this._crossReference, reference);\n                        }\n                        else {\n                            field = _field__WEBPACK_IMPORTED_MODULE_1__.PdfCheckBoxField._load(this, dictionary, this._crossReference, reference);\n                        }\n                        break;\n                    case 'ch':\n                        if ((fieldFlags & _enumerator__WEBPACK_IMPORTED_MODULE_3__._FieldFlag.combo) !== 0) {\n                            field = _field__WEBPACK_IMPORTED_MODULE_1__.PdfComboBoxField._load(this, dictionary, this._crossReference, reference);\n                        }\n                        else {\n                            field = _field__WEBPACK_IMPORTED_MODULE_1__.PdfListBoxField._load(this, dictionary, this._crossReference, reference);\n                        }\n                        break;\n                    case 'sig':\n                        field = _field__WEBPACK_IMPORTED_MODULE_1__.PdfSignatureField._load(this, dictionary, this._crossReference, reference);\n                        break;\n                }\n            }\n        }\n        return field;\n    };\n    /**\n     * Add a new `PdfField`.\n     *\n     * @param {PdfField} field Field object to add.\n     * @returns {number} Field index.\n     *\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data, password);\n     * // Add a new form field\n     * let index: number = document.form.add(field);\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    PdfForm.prototype.add = function (field) {\n        this._fields.push(field._ref);\n        this._dictionary.update('Fields', this._fields);\n        this._parsedFields.set(this._fields.length - 1, field);\n        field._form = this;\n        this._crossReference._root._updated = true;\n        if (field instanceof _field__WEBPACK_IMPORTED_MODULE_1__.PdfSignatureField) {\n            field._form._signatureFlag = _enumerator__WEBPACK_IMPORTED_MODULE_3__._SignatureFlag.signatureExists | _enumerator__WEBPACK_IMPORTED_MODULE_3__._SignatureFlag.appendOnly;\n        }\n        this._isNeedAppearances = true;\n        return (this._fields.length - 1);\n    };\n    /**\n     * Remove the specified PDF form field.\n     *\n     * @param {PdfField} field Field object to remove.\n     * @returns {void} Nothing.\n     *\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data, password);\n     * // Access the loaded form field\n     * let field: PdfField = document.form.fieldAt(3);\n     * // Remove the form field\n     * document.form.removeField(field);\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    PdfForm.prototype.removeField = function (field) {\n        var index = this._fields.indexOf(field._ref);\n        if (index >= 0) {\n            this.removeFieldAt(index);\n        }\n    };\n    /**\n     * Remove the PDF form field from specified index.\n     *\n     * @param {number} index Field index to remove.\n     * @returns {void} Nothing.\n     *\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data, password);\n     * // Remove the form field from the specified index\n     * document.form.removeFieldAt(3);\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    PdfForm.prototype.removeFieldAt = function (index) {\n        var field = this.fieldAt(index);\n        if (field) {\n            if (field._kidsCount > 0) {\n                for (var i = field._kidsCount - 1; i >= 0; i--) {\n                    var item = field.itemAt(i);\n                    var page = void 0;\n                    if (item) {\n                        page = item._getPage();\n                        if (page) {\n                            page._removeAnnotation(item._ref);\n                        }\n                    }\n                }\n            }\n            else if (field._dictionary.has('Subtype') && field._dictionary.get('Subtype').name === 'Widget') {\n                var page = field.page;\n                if (page) {\n                    page._removeAnnotation(field._ref);\n                }\n            }\n            this._parsedFields.delete(index);\n            this._reorderParsedAnnotations(index);\n        }\n        this._fields.splice(index, 1);\n        var document = this._crossReference._document;\n        var catalog = document._catalog;\n        if (this._fields.length === 0 && document && catalog && catalog._catalogDictionary) {\n            catalog._catalogDictionary._updated = true;\n            this._crossReference._allowCatalog = true;\n        }\n        this._dictionary.set('Fields', this._fields);\n        this._dictionary._updated = true;\n    };\n    PdfForm.prototype._reorderParsedAnnotations = function (index) {\n        var result = new Map();\n        this._parsedFields.forEach(function (value, key) {\n            if (key > index) {\n                result.set(key - 1, value);\n            }\n            else {\n                result.set(key, value);\n            }\n        });\n        this._parsedFields = result;\n    };\n    /**\n     * Sets the flag to indicate the new appearance creation\n     * If true, appearance will not be created. Default appearance has been considered.\n     * If false, new appearance stream has been created from field values and updated as normal appearance.\n     *\n     * @param {boolean} value Set default appearance.\n     * @returns {void} Nothing.\n     *\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data, password);\n     * // Set boolean flag to create a new appearance stream for form fields.\n     * document.form.setDefaultAppearance(false);\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    PdfForm.prototype.setDefaultAppearance = function (value) {\n        this._setAppearance = !value;\n        this._needAppearances = value;\n        this._isDefaultAppearance = value;\n    };\n    PdfForm.prototype.orderFormFields = function (tabOrder) {\n        var _this = this;\n        if (tabOrder === null || typeof tabOrder === 'undefined') {\n            this.orderFormFields(new Map());\n        }\n        else {\n            var tab = void 0;\n            var document_1 = this._crossReference._document;\n            var value = void 0;\n            if (tabOrder && tabOrder instanceof Map) {\n                var setTabOrder = true;\n                if (tabOrder.size > 0) {\n                    this._tabCollection = tabOrder;\n                }\n                else {\n                    setTabOrder = false;\n                    this._tabCollection = tabOrder;\n                }\n                var fieldCollection = new Map();\n                this._fieldCollection = this._getFields();\n                if ((0,_utils__WEBPACK_IMPORTED_MODULE_2__._isNullOrUndefined)(this._fieldCollection) && this._fieldCollection.length > 0) {\n                    var page = this._fieldCollection[0].page;\n                    if (page && document_1) {\n                        for (var i = 0; i < this._fieldCollection.length; i++) {\n                            var field = this._fieldCollection[Number.parseInt(i.toString(), 10)];\n                            if (field.page) {\n                                var index = (0,_utils__WEBPACK_IMPORTED_MODULE_2__._getPageIndex)(document_1, this._sortItemByPageIndex(field, true)._pageDictionary);\n                                if (index >= 0) {\n                                    if (fieldCollection.has(index)) {\n                                        value = fieldCollection.get(index);\n                                        value.push(field);\n                                    }\n                                    else {\n                                        value = [];\n                                        value.push(field);\n                                        fieldCollection.set(index, value);\n                                    }\n                                    var page_1 = document_1.getPage(index);\n                                    if (!this._tabCollection.has(index)) {\n                                        this._tabCollection.set(index, page_1.tabOrder);\n                                    }\n                                    if (setTabOrder) {\n                                        page_1.tabOrder = this._tabCollection.get(index);\n                                    }\n                                }\n                            }\n                        }\n                        var fieldsCount_1 = 0;\n                        fieldCollection.forEach(function (value, key) {\n                            _this._tabOrder = _this._tabCollection.get(key);\n                            if (_this._tabOrder !== _enumerator__WEBPACK_IMPORTED_MODULE_3__.PdfFormFieldsTabOrder.structure) {\n                                var fields = value;\n                                fields.sort(function (pdfField1, pdfField2) {\n                                    return _this._compareFields(pdfField1, pdfField2);\n                                });\n                                for (var j = 0; j < fields.length; j++) {\n                                    var fieldIndex = _this._fieldCollection.indexOf(fields[Number.parseInt(j.toString(), 10)]);\n                                    if (fieldIndex !== -1 && fieldIndex !== fieldsCount_1 + j) {\n                                        var field = _this._fieldCollection[Number.parseInt(fieldIndex.toString(), 10)];\n                                        _this._fieldCollection.splice(fieldIndex, 1);\n                                        _this._fieldCollection.splice(fieldsCount_1 + j, 0, field);\n                                    }\n                                }\n                            }\n                            fieldsCount_1 += value.length;\n                        });\n                    }\n                }\n            }\n            else {\n                this._tabOrder = tabOrder;\n                tab = this._getOrder(this._tabOrder);\n                this._fieldCollection = this._getFields();\n                this._fieldCollection.sort(function (pdfField1, pdfField2) {\n                    return _this._compareFields(pdfField1, pdfField2);\n                });\n            }\n            this._parsedFields.clear();\n            for (var i = 0; i < this._fieldCollection.length; i++) {\n                this._parsedFields.set(Number.parseInt(i.toString(), 10), this._fieldCollection[Number.parseInt(i.toString(), 10)]);\n                this._fields[Number.parseInt(i.toString(), 10)] = this._fieldCollection[Number.parseInt(i.toString(), 10)]._ref;\n                if (tab) {\n                    this._fieldCollection[Number.parseInt(i.toString(), 10)].page._pageDictionary.update('Tabs', tab);\n                }\n            }\n            this._dictionary.update('Fields', this._fields);\n        }\n    };\n    PdfForm.prototype._createFields = function () {\n        var fields; // eslint-disable-line\n        if (this._dictionary.has('Fields')) {\n            fields = this._dictionary.get('Fields');\n        }\n        var hasNoKids = false;\n        var count = 0;\n        var nodes = []; // eslint-disable-line\n        while (typeof fields !== 'undefined' && fields !== null) {\n            for (; count < fields.length; count++) {\n                var ref = fields[count]; // eslint-disable-line\n                var fieldDictionary = void 0;\n                if (ref && ref instanceof _pdf_primitives__WEBPACK_IMPORTED_MODULE_0__._PdfReference) {\n                    fieldDictionary = this._crossReference._fetch(ref);\n                }\n                var fieldFlags = 0;\n                var flag = (0,_utils__WEBPACK_IMPORTED_MODULE_2__._getInheritableProperty)(fieldDictionary, 'Ff', false, true, 'Parent');\n                if (typeof flag !== 'undefined') {\n                    fieldFlags = flag;\n                }\n                var fieldKids = void 0;\n                if (fieldDictionary && fieldDictionary.has('Kids')) {\n                    fieldKids = fieldDictionary.get('Kids');\n                    if (typeof fieldKids !== 'undefined' && fieldKids.length > 0) {\n                        for (var i = 0; i < fieldKids.length; i++) {\n                            var reference = fieldKids[Number.parseInt(i.toString(), 10)];\n                            if (reference && reference instanceof _pdf_primitives__WEBPACK_IMPORTED_MODULE_0__._PdfReference) {\n                                var kidsDict = this._crossReference._fetch(reference);\n                                if (typeof kidsDict !== 'undefined' && !kidsDict.has('Parent')) {\n                                    kidsDict.update('Parent', ref);\n                                }\n                            }\n                            else if ((fieldFlags & _enumerator__WEBPACK_IMPORTED_MODULE_3__._FieldFlag.radio) !== 0) {\n                                hasNoKids = true;\n                            }\n                        }\n                    }\n                }\n                if (typeof fieldKids === 'undefined') {\n                    if (fieldDictionary) {\n                        if (this._fields.indexOf(ref) === -1) {\n                            this._fields.push(ref);\n                        }\n                    }\n                }\n                else {\n                    var isNode = (!fieldDictionary.has('FT')) || this._isNode(fieldKids);\n                    if (isNode) {\n                        nodes.push({ fields: fields, count: count });\n                        this._hasKids = true;\n                        count = -1;\n                        fields = fieldKids;\n                    }\n                    else {\n                        if (hasNoKids && (fieldFlags & _enumerator__WEBPACK_IMPORTED_MODULE_3__._FieldFlag.radio) !== 0) {\n                            continue;\n                        }\n                        else {\n                            this._fields.push(ref);\n                        }\n                    }\n                }\n            }\n            if (nodes.length === 0) {\n                break;\n            }\n            var entry = nodes.pop(); // eslint-disable-line\n            fields = entry.fields;\n            count = entry.count + 1;\n        }\n    };\n    PdfForm.prototype._isNode = function (kids) {\n        var isNode = false;\n        if ((0,_utils__WEBPACK_IMPORTED_MODULE_2__._isNullOrUndefined)(kids) && kids.length > 0) {\n            var entry = kids[0]; // eslint-disable-line\n            var dictionary = void 0;\n            if ((0,_utils__WEBPACK_IMPORTED_MODULE_2__._isNullOrUndefined)(entry)) {\n                if (entry instanceof _pdf_primitives__WEBPACK_IMPORTED_MODULE_0__._PdfDictionary) {\n                    dictionary = entry;\n                }\n                else if (entry instanceof _pdf_primitives__WEBPACK_IMPORTED_MODULE_0__._PdfReference) {\n                    dictionary = this._crossReference._fetch(entry);\n                }\n            }\n            if (dictionary && dictionary.has('Subtype')) {\n                var subtype = dictionary.get('Subtype');\n                if (subtype && subtype.name !== 'Widget') {\n                    isNode = true;\n                }\n            }\n        }\n        return isNode;\n    };\n    PdfForm.prototype._parseWidgetReferences = function () {\n        var _this = this;\n        if (typeof this._widgetReferences === 'undefined' && this.count > 0) {\n            this._widgetReferences = [];\n            this._fields.forEach(function (fieldReference) {\n                var dictionary = _this._crossReference._fetch(fieldReference);\n                if (dictionary) {\n                    if (dictionary.has('Kids')) {\n                        var fieldKids = dictionary.get('Kids');\n                        if (fieldKids && fieldKids.length > 0) {\n                            fieldKids.forEach(function (kidReference) {\n                                var kidDictionary;\n                                if (kidReference && kidReference instanceof _pdf_primitives__WEBPACK_IMPORTED_MODULE_0__._PdfDictionary) {\n                                    kidDictionary = kidReference;\n                                }\n                                else if (kidReference && kidReference instanceof _pdf_primitives__WEBPACK_IMPORTED_MODULE_0__._PdfReference) {\n                                    kidDictionary = _this._crossReference._fetch(kidReference);\n                                }\n                                if (kidDictionary && kidDictionary.has('Subtype')) {\n                                    var subtype = kidDictionary.get('Subtype');\n                                    if (subtype && subtype.name === 'Widget') {\n                                        _this._widgetReferences.push(kidReference);\n                                    }\n                                }\n                            });\n                        }\n                    }\n                    else {\n                        _this._widgetReferences.push(fieldReference);\n                    }\n                }\n            });\n        }\n        return this._widgetReferences;\n    };\n    PdfForm.prototype._doPostProcess = function (isFlatten, pageToImport) {\n        for (var i = this.count - 1; i >= 0; i--) {\n            var field = this.fieldAt(i);\n            if (field && !field._isLoaded && typeof field._tabIndex !== 'undefined' && field._tabIndex >= 0) {\n                var page = field._page;\n                if (page &&\n                    page._pageDictionary.has('Annots') &&\n                    (page.tabOrder === _enumerator__WEBPACK_IMPORTED_MODULE_3__.PdfFormFieldsTabOrder.manual || this._tabOrder === _enumerator__WEBPACK_IMPORTED_MODULE_3__.PdfFormFieldsTabOrder.manual)) {\n                    var annots = page._pageDictionary.get('Annots');\n                    var annotationCollection = new _annotations_annotation_collection__WEBPACK_IMPORTED_MODULE_5__.PdfAnnotationCollection(annots, this._crossReference, page);\n                    page._annotations = annotationCollection;\n                    for (var i_1 = 0; i_1 < field.itemsCount; i_1++) {\n                        var item = field.itemAt(i_1);\n                        if (item && item instanceof _annotations_annotation__WEBPACK_IMPORTED_MODULE_6__.PdfWidgetAnnotation) {\n                            var index = annots.indexOf(item._ref);\n                            if (index < 0) {\n                                index = field._annotationIndex;\n                            }\n                            if (index >= 0) {\n                                var annotations = page.annotations._reArrange(field._ref, field._tabIndex, index);\n                                page._pageDictionary.update('Annots', annotations);\n                                page._pageDictionary._updated = true;\n                            }\n                        }\n                    }\n                }\n            }\n            if (field && ((pageToImport && field.page === pageToImport) || !pageToImport)) {\n                if (pageToImport) {\n                    field._isImport = true;\n                }\n                field._doPostProcess(isFlatten || field.flatten);\n                if (!isFlatten && field.flatten || (isFlatten && pageToImport && field.page === pageToImport)) {\n                    this.removeFieldAt(i);\n                }\n            }\n        }\n    };\n    PdfForm.prototype._getFieldIndex = function (name) {\n        var index = -1;\n        if (this.count > 0) {\n            if (!this._fieldNames) {\n                this._fieldNames = [];\n            }\n            if (!this._indexedFieldNames) {\n                this._indexedFieldNames = [];\n            }\n            if (!this._actualFieldNames) {\n                this._actualFieldNames = [];\n            }\n            if (!this._indexedActualFieldNames) {\n                this._indexedActualFieldNames = [];\n            }\n            for (var i = 0; i < this.count; i++) {\n                var field = this.fieldAt(i);\n                if (field) {\n                    var fieldName = field.name;\n                    if (fieldName) {\n                        this._fieldNames.push(fieldName);\n                        this._indexedFieldNames.push(fieldName.split('[')[0]);\n                    }\n                    var actualName = field.actualName;\n                    if (actualName) {\n                        this._actualFieldNames.push(actualName);\n                        this._indexedActualFieldNames.push(actualName.split('[')[0]);\n                    }\n                }\n            }\n            var nameIndex = this._fieldNames.indexOf(name);\n            if (nameIndex !== -1) {\n                index = nameIndex;\n            }\n            else {\n                nameIndex = this._indexedFieldNames.indexOf(name);\n                if (nameIndex !== -1) {\n                    index = nameIndex;\n                }\n                else {\n                    nameIndex = this._actualFieldNames.indexOf(name);\n                    if (nameIndex !== -1) {\n                        index = nameIndex;\n                    }\n                    else {\n                        nameIndex = this._indexedActualFieldNames.indexOf(name);\n                        if (nameIndex !== -1) {\n                            index = nameIndex;\n                        }\n                    }\n                }\n            }\n        }\n        return index;\n    };\n    PdfForm.prototype._getFields = function () {\n        var fields = [];\n        for (var i = 0; i < this._fields.length; i++) {\n            var field = this.fieldAt(i);\n            if (field && field instanceof _field__WEBPACK_IMPORTED_MODULE_1__.PdfField) {\n                fields.push(field);\n            }\n        }\n        return fields;\n    };\n    PdfForm.prototype._getOrder = function (tabOrder) {\n        if (tabOrder !== _enumerator__WEBPACK_IMPORTED_MODULE_3__.PdfFormFieldsTabOrder.none) {\n            var tabs = '';\n            if (tabOrder === _enumerator__WEBPACK_IMPORTED_MODULE_3__.PdfFormFieldsTabOrder.row) {\n                tabs = 'R';\n            }\n            else if (tabOrder === _enumerator__WEBPACK_IMPORTED_MODULE_3__.PdfFormFieldsTabOrder.column) {\n                tabs = 'C';\n            }\n            else if (tabOrder === _enumerator__WEBPACK_IMPORTED_MODULE_3__.PdfFormFieldsTabOrder.structure) {\n                tabs = 'S';\n            }\n            return _pdf_primitives__WEBPACK_IMPORTED_MODULE_0__._PdfName.get(tabs);\n        }\n        return null;\n    };\n    PdfForm.prototype._compareFields = function (field1, field2) {\n        var result = 0;\n        var xdiff;\n        var index;\n        var page1 = field1.page;\n        var page2 = field2.page;\n        if (page1 && !page1._isNew && page1 instanceof _pdf_page__WEBPACK_IMPORTED_MODULE_4__.PdfPage && page2 && !page2._isNew && page2 instanceof _pdf_page__WEBPACK_IMPORTED_MODULE_4__.PdfPage) {\n            var page1Index = this._sortItemByPageIndex(field1, false)._pageIndex;\n            var page2Index = this._sortItemByPageIndex(field2, false)._pageIndex;\n            var rectangle1 = void 0;\n            if (field1._dictionary.has('Kids')) {\n                rectangle1 = this._getItemRectangle(field1);\n            }\n            else {\n                rectangle1 = this._getRectangle(field1._dictionary);\n            }\n            var rectangle2 = void 0;\n            if (field2._dictionary.has('Kids')) {\n                rectangle2 = this._getItemRectangle(field2);\n            }\n            else {\n                rectangle2 = this._getRectangle(field2._dictionary);\n            }\n            var firstHeight = rectangle1[3] - rectangle1[1];\n            var secondHeight = rectangle2[3] - rectangle2[1];\n            if (rectangle1 && rectangle1.length >= 2 && rectangle2 && rectangle2.length >= 2) {\n                var x1 = rectangle1[0];\n                var y1 = rectangle1[1];\n                var x2 = rectangle2[0];\n                var y2 = rectangle2[1];\n                if (typeof x1 === 'number' && typeof x2 === 'number' &&\n                    typeof y1 === 'number' && typeof y2 === 'number') {\n                    index = page1Index - page2Index;\n                    if (this._tabOrder === _enumerator__WEBPACK_IMPORTED_MODULE_3__.PdfFormFieldsTabOrder.row) {\n                        xdiff = this._compare(y2, y1);\n                        if (xdiff !== 0) {\n                            var isValid = xdiff === -1 && y1 > y2 && (y1 - firstHeight / 2) < y2;\n                            isValid = isValid || (xdiff === 1 && y2 > y1 && (y2 - secondHeight / 2) < y1);\n                            if (isValid) {\n                                xdiff = 0;\n                            }\n                        }\n                        if (index !== 0) {\n                            result = index;\n                        }\n                        else if (xdiff !== 0) {\n                            result = xdiff;\n                        }\n                        else {\n                            result = this._compare(x1, x2);\n                        }\n                    }\n                    else if (this._tabOrder === _enumerator__WEBPACK_IMPORTED_MODULE_3__.PdfFormFieldsTabOrder.column) {\n                        xdiff = this._compare(x1, x2);\n                        if (index !== 0) {\n                            result = index;\n                        }\n                        else if (xdiff !== 0) {\n                            result = xdiff;\n                        }\n                        else {\n                            result = this._compare(y2, y1);\n                        }\n                    }\n                    else if (this._tabOrder === _enumerator__WEBPACK_IMPORTED_MODULE_3__.PdfFormFieldsTabOrder.manual ||\n                        this._tabOrder === _enumerator__WEBPACK_IMPORTED_MODULE_3__.PdfFormFieldsTabOrder.none ||\n                        this._tabOrder === _enumerator__WEBPACK_IMPORTED_MODULE_3__.PdfFormFieldsTabOrder.structure ||\n                        this._tabOrder === _enumerator__WEBPACK_IMPORTED_MODULE_3__.PdfFormFieldsTabOrder.widget) {\n                        if (field1 instanceof _field__WEBPACK_IMPORTED_MODULE_1__.PdfField && field2 instanceof _field__WEBPACK_IMPORTED_MODULE_1__.PdfField) {\n                            var field1Index = field1.tabIndex;\n                            var field2Index = field2.tabIndex;\n                            xdiff = this._compare(field1Index, field2Index);\n                            if (index !== 0) {\n                                result = index;\n                            }\n                            else {\n                                result = xdiff;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return result;\n    };\n    PdfForm.prototype._getRectangle = function (dictionary) {\n        var rect;\n        if (dictionary && dictionary.has('Rect')) {\n            rect = dictionary.getArray('Rect');\n        }\n        return rect;\n    };\n    PdfForm.prototype._getItemRectangle = function (field) {\n        var result;\n        var dictionary = field._dictionary;\n        if (dictionary.has('Kids')) {\n            var kids = dictionary.getArray('Kids');\n            if ((0,_utils__WEBPACK_IMPORTED_MODULE_2__._isNullOrUndefined)(kids) && kids.length >= 1) {\n                if (kids.length === 1) {\n                    result = this._getRectangle(kids[0]);\n                }\n                else {\n                    if (field && field.itemsCount > 1) {\n                        result = this._getRectangle(field.itemAt(0)._dictionary);\n                    }\n                    else {\n                        result = this._getRectangle(kids[0]);\n                    }\n                }\n            }\n        }\n        return result;\n    };\n    PdfForm.prototype._compare = function (x, y) {\n        if (x > y) {\n            return 1;\n        }\n        else if (x < y) {\n            return -1;\n        }\n        else {\n            return 0;\n        }\n    };\n    PdfForm.prototype._compareKidsElement = function (x, y) {\n        var xDictionary = this._crossReference._fetch(x);\n        var yDictionary = this._crossReference._fetch(y);\n        var xRect = this._getRectangle(xDictionary);\n        var yRect = this._getRectangle(yDictionary);\n        var result;\n        if (xRect && xRect.length >= 2 && yRect && yRect.length >= 2) {\n            var x1 = xRect[0];\n            var y1 = xRect[1];\n            var x2 = yRect[0];\n            var y2 = yRect[1];\n            if (typeof x1 === 'number' && typeof x2 === 'number' &&\n                typeof y1 === 'number' && typeof y2 === 'number') {\n                var xdiff = void 0;\n                if (this._tabOrder === _enumerator__WEBPACK_IMPORTED_MODULE_3__.PdfFormFieldsTabOrder.row) {\n                    xdiff = this._compare(y2, y1);\n                    if (xdiff !== 0) {\n                        result = xdiff;\n                    }\n                    else {\n                        result = this._compare(x1, x2);\n                    }\n                }\n                else if (this._tabOrder === _enumerator__WEBPACK_IMPORTED_MODULE_3__.PdfFormFieldsTabOrder.column) {\n                    xdiff = this._compare(x1, x2);\n                    if (xdiff !== 0) {\n                        result = xdiff;\n                    }\n                    else {\n                        result = this._compare(y2, y1);\n                    }\n                }\n                else {\n                    result = 0;\n                }\n                return result;\n            }\n        }\n        return result;\n    };\n    PdfForm.prototype._sortItemByPageIndex = function (field, hasPageTabOrder) {\n        var page = field.page;\n        var tabOrder = this._tabOrder;\n        this._tabOrder = hasPageTabOrder ? field.page.tabOrder : tabOrder;\n        this._sortFieldItems(field);\n        if (field._isLoaded && field._kidsCount > 1) {\n            page = field.itemAt(0).page;\n        }\n        this._tabOrder = tabOrder;\n        if (typeof page === 'undefined') {\n            page = field.page;\n        }\n        return page;\n    };\n    PdfForm.prototype._sortFieldItems = function (field) {\n        var _this = this;\n        if (field._isLoaded && (field instanceof _field__WEBPACK_IMPORTED_MODULE_1__.PdfTextBoxField ||\n            field instanceof _field__WEBPACK_IMPORTED_MODULE_1__.PdfListBoxField ||\n            field instanceof _field__WEBPACK_IMPORTED_MODULE_1__.PdfCheckBoxField ||\n            field instanceof _field__WEBPACK_IMPORTED_MODULE_1__.PdfRadioButtonListField)) {\n            var collection = field._parseItems(); // eslint-disable-line\n            collection.sort(function (item1, item2) {\n                return _this._compareFieldItem(item1, item2);\n            });\n            field._parsedItems.clear();\n            for (var i = 0; i < collection.length; i++) {\n                field._parsedItems.set(i, collection[Number.parseInt(i.toString(), 10)]);\n            }\n        }\n    };\n    PdfForm.prototype._compareFieldItem = function (item1, item2) {\n        var result = 0;\n        if (typeof item1 !== 'undefined' && typeof item2 !== 'undefined') {\n            var page1 = item1.page;\n            var page2 = item2.page;\n            var array1 = this._getRectangle(item1._dictionary);\n            var array2 = this._getRectangle(item2._dictionary);\n            if (array1 && array2) {\n                var x1 = array1[0];\n                var y1 = array1[1];\n                var x2 = array2[0];\n                var y2 = array2[1];\n                var xdiff = void 0;\n                if (this._tabOrder === _enumerator__WEBPACK_IMPORTED_MODULE_3__.PdfFormFieldsTabOrder.row) {\n                    xdiff = this._compare(page1._pageIndex, page2._pageIndex);\n                    if (xdiff !== 0) {\n                        result = xdiff;\n                    }\n                    else {\n                        xdiff = this._compare(y2, y1);\n                        if (xdiff !== 0) {\n                            result = xdiff;\n                        }\n                        else {\n                            result = this._compare(x1, x2);\n                        }\n                    }\n                }\n                else if (this._tabOrder === _enumerator__WEBPACK_IMPORTED_MODULE_3__.PdfFormFieldsTabOrder.column) {\n                    xdiff = this._compare(page1._pageIndex, page2._pageIndex);\n                    if (xdiff !== 0) {\n                        result = xdiff;\n                    }\n                    else {\n                        xdiff = this._compare(x1, x2);\n                        if (xdiff !== 0) {\n                            result = xdiff;\n                        }\n                        else {\n                            result = this._compare(y2, y1);\n                        }\n                    }\n                }\n            }\n        }\n        return result;\n    };\n    PdfForm.prototype._clear = function () {\n        this._fields = [];\n        this._parsedFields = new Map();\n    };\n    return PdfForm;\n}());\n\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-pdf/src/pdf/core/form/form.js?");

/***/ })

}]);