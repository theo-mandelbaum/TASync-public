"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkej2_vue_samples"] = self["webpackChunkej2_vue_samples"] || []).push([["chunk-vendors-node_modules_syncfusion_ej2-spreadsheet_src_spreadsheet_actions_clipboard_js-2f975be7"],{

/***/ "./node_modules/@syncfusion/ej2-spreadsheet/src/spreadsheet/actions/clipboard.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-spreadsheet/src/spreadsheet/actions/clipboard.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Clipboard: () => (/* binding */ Clipboard)\n/* harmony export */ });\n/* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @syncfusion/ej2-base */ \"./node_modules/@syncfusion/ej2-base/index.js\");\n/* harmony import */ var _workbook_index__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../workbook/index */ \"./node_modules/@syncfusion/ej2-spreadsheet/src/workbook/index.js\");\n/* harmony import */ var _common_index__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../common/index */ \"./node_modules/@syncfusion/ej2-spreadsheet/src/spreadsheet/common/index.js\");\n/* harmony import */ var _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @syncfusion/ej2-data */ \"./node_modules/@syncfusion/ej2-data/index.js\");\n/* harmony import */ var _workbook_common_event__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../workbook/common/event */ \"./node_modules/@syncfusion/ej2-spreadsheet/src/workbook/common/event.js\");\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (undefined && undefined.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * Represents clipboard support for Spreadsheet.\n */\nvar Clipboard = /** @class */ (function () {\n    function Clipboard(parent) {\n        this.parent = parent;\n        this.init();\n        this.addEventListener();\n    }\n    Clipboard.prototype.init = function () {\n        this.parent.element.appendChild(this.parent.createElement('input', { className: 'e-clipboard', attrs: { 'contenteditable': 'true', 'tabindex': '-1', 'aria-hidden': 'true' } }));\n    };\n    Clipboard.prototype.addEventListener = function () {\n        var ele = this.getClipboardEle();\n        this.parent.on(_common_index__WEBPACK_IMPORTED_MODULE_2__.cut, this.cut, this);\n        this.parent.on(_common_index__WEBPACK_IMPORTED_MODULE_2__.copy, this.copy, this);\n        this.parent.on(_common_index__WEBPACK_IMPORTED_MODULE_2__.paste, this.paste, this);\n        this.parent.on(_common_index__WEBPACK_IMPORTED_MODULE_2__.clearCopy, this.clearCopiedInfo, this);\n        this.parent.on(_common_index__WEBPACK_IMPORTED_MODULE_2__.tabSwitch, this.tabSwitchHandler, this);\n        this.parent.on(_common_index__WEBPACK_IMPORTED_MODULE_2__.cMenuBeforeOpen, this.cMenuBeforeOpenHandler, this);\n        this.parent.on(_common_index__WEBPACK_IMPORTED_MODULE_2__.ribbonClick, this.ribbonClickHandler, this);\n        this.parent.on(_common_index__WEBPACK_IMPORTED_MODULE_2__.contentLoaded, this.initCopyIndicator, this);\n        this.parent.on(_common_index__WEBPACK_IMPORTED_MODULE_2__.rowHeightChanged, this.rowHeightChanged, this);\n        this.parent.on(_common_index__WEBPACK_IMPORTED_MODULE_2__.colWidthChanged, this.colWidthChanged, this);\n        this.parent.on(_workbook_index__WEBPACK_IMPORTED_MODULE_1__.refreshClipboard, this.refreshOnInsertDelete, this);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(ele, 'cut', this.cut, this);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(ele, 'copy', this.copy, this);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(ele, 'paste', this.paste, this);\n    };\n    Clipboard.prototype.removeEventListener = function () {\n        var ele = this.getClipboardEle();\n        if (!this.parent.isDestroyed) {\n            this.parent.off(_common_index__WEBPACK_IMPORTED_MODULE_2__.cut, this.cut);\n            this.parent.off(_common_index__WEBPACK_IMPORTED_MODULE_2__.copy, this.copy);\n            this.parent.off(_common_index__WEBPACK_IMPORTED_MODULE_2__.paste, this.paste);\n            this.parent.off(_common_index__WEBPACK_IMPORTED_MODULE_2__.clearCopy, this.clearCopiedInfo);\n            this.parent.off(_common_index__WEBPACK_IMPORTED_MODULE_2__.tabSwitch, this.tabSwitchHandler);\n            this.parent.off(_common_index__WEBPACK_IMPORTED_MODULE_2__.cMenuBeforeOpen, this.cMenuBeforeOpenHandler);\n            this.parent.off(_common_index__WEBPACK_IMPORTED_MODULE_2__.ribbonClick, this.ribbonClickHandler);\n            this.parent.off(_common_index__WEBPACK_IMPORTED_MODULE_2__.contentLoaded, this.initCopyIndicator);\n            this.parent.off(_common_index__WEBPACK_IMPORTED_MODULE_2__.rowHeightChanged, this.rowHeightChanged);\n            this.parent.off(_common_index__WEBPACK_IMPORTED_MODULE_2__.colWidthChanged, this.colWidthChanged);\n            this.parent.off(_workbook_index__WEBPACK_IMPORTED_MODULE_1__.refreshClipboard, this.refreshOnInsertDelete);\n        }\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(ele, 'cut', this.cut);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(ele, 'copy', this.copy);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(ele, 'paste', this.paste);\n    };\n    Clipboard.prototype.ribbonClickHandler = function (args) {\n        var parentId = this.parent.element.id;\n        switch (args.item.id) {\n            case parentId + '_cut':\n                this.cut({ invokeCopy: true });\n                break;\n            case parentId + '_copy':\n                this.copy({ invokeCopy: true });\n                break;\n        }\n    };\n    Clipboard.prototype.tabSwitchHandler = function (args) {\n        if (args.activeTab === 0 && !this.copiedInfo && !this.copiedShapeInfo) {\n            this.hidePaste();\n        }\n    };\n    Clipboard.prototype.cMenuBeforeOpenHandler = function (e) {\n        var sheet = this.parent.getActiveSheet();\n        var l10n = this.parent.serviceLocator.getService(_common_index__WEBPACK_IMPORTED_MODULE_2__.locale);\n        var delRowItems = [];\n        var hideRowItems = [];\n        var delColItems = [];\n        var hideColItems = [];\n        var actCell = sheet.activeCell;\n        var actCellIndex = (0,_workbook_index__WEBPACK_IMPORTED_MODULE_1__.getCellIndexes)(actCell);\n        var cellObj = (0,_workbook_index__WEBPACK_IMPORTED_MODULE_1__.getCell)(actCellIndex[0], actCellIndex[1], sheet);\n        var isLocked = sheet.isProtected && (0,_workbook_index__WEBPACK_IMPORTED_MODULE_1__.isLocked)(cellObj, (0,_workbook_index__WEBPACK_IMPORTED_MODULE_1__.getColumn)(sheet, actCellIndex[1]));\n        var isReadonlyCell = (0,_workbook_index__WEBPACK_IMPORTED_MODULE_1__.isReadOnly)(cellObj, (0,_workbook_index__WEBPACK_IMPORTED_MODULE_1__.getColumn)(sheet, actCellIndex[1]), (0,_workbook_index__WEBPACK_IMPORTED_MODULE_1__.getRow)(sheet, actCellIndex[0]));\n        if (e.target === 'Content' || e.target === 'RowHeader' || e.target === 'ColumnHeader' || e.target === 'SelectAll') {\n            this.parent.enableContextMenuItems([l10n.getConstant('Paste'), l10n.getConstant('PasteSpecial')], (this.copiedInfo ||\n                this.copiedShapeInfo && !isLocked) ? true : false);\n            this.parent.enableContextMenuItems([l10n.getConstant('Cut')], !isLocked);\n        }\n        if (e.target === 'Content') {\n            if (sheet.isProtected) {\n                this.parent.enableContextMenuItems([l10n.getConstant('Filter'), l10n.getConstant('Sort'),\n                    l10n.getConstant('AddNote')], false);\n            }\n            if (isLocked) {\n                this.parent.enableContextMenuItems([l10n.getConstant('Cut'), l10n.getConstant('Hyperlink'),\n                    l10n.getConstant('EditNote'), l10n.getConstant('DeleteNote')], false);\n            }\n            else if (isReadonlyCell) {\n                this.parent.enableContextMenuItems([l10n.getConstant('Cut'), l10n.getConstant('Paste'), l10n.getConstant('PasteSpecial'),\n                    l10n.getConstant('Filter'), l10n.getConstant('Sort'), l10n.getConstant('Hyperlink'), l10n.getConstant('EditHyperlink'),\n                    l10n.getConstant('OpenHyperlink'), l10n.getConstant('RemoveHyperlink'), l10n.getConstant('AddNote')], false);\n            }\n            else if (sheet.isProtected && !sheet.protectSettings.insertLink) {\n                this.parent.enableContextMenuItems([l10n.getConstant('Hyperlink')], false);\n            }\n        }\n        if (sheet.isProtected) {\n            if (e.target === 'ColumnHeader') {\n                delColItems = [l10n.getConstant('DeleteColumn'), l10n.getConstant('DeleteColumns'),\n                    l10n.getConstant('InsertColumn'), l10n.getConstant('InsertColumns')];\n                hideColItems = [l10n.getConstant('HideColumn'), l10n.getConstant('HideColumns'), l10n.getConstant('UnhideColumns')];\n                this.parent.enableContextMenuItems(delColItems, false);\n                this.parent.enableContextMenuItems(hideColItems, sheet.protectSettings.formatColumns);\n            }\n            if (e.target === 'RowHeader') {\n                delRowItems = [l10n.getConstant('DeleteRow'), l10n.getConstant('DeleteRows'),\n                    l10n.getConstant('InsertRow'), l10n.getConstant('InsertRows')];\n                hideRowItems = [l10n.getConstant('HideRow'), l10n.getConstant('HideRows'), l10n.getConstant('UnhideRows')];\n                this.parent.enableContextMenuItems(delRowItems, false);\n                this.parent.enableContextMenuItems(hideRowItems, sheet.protectSettings.formatRows);\n            }\n        }\n    };\n    Clipboard.prototype.rowHeightChanged = function (args) {\n        if (this.copiedInfo) {\n            var ele = this.getCopyIndicator();\n            if (ele) {\n                if (this.copiedInfo.range[0] > args.rowIdx) {\n                    ele.style.top = parseFloat(ele.style.top) + args.threshold + \"px\";\n                }\n                else if ((0,_workbook_index__WEBPACK_IMPORTED_MODULE_1__.inRange)(this.copiedInfo.range, args.rowIdx, this.copiedInfo.range[1])) {\n                    ele.style.height = parseFloat(ele.style.height) + args.threshold + \"px\";\n                }\n            }\n        }\n    };\n    Clipboard.prototype.colWidthChanged = function (args) {\n        if (this.copiedInfo) {\n            var ele = this.getCopyIndicator();\n            if (ele) {\n                if (this.copiedInfo.range[1] > args.colIdx) {\n                    ele.style.left = parseFloat(ele.style.left) + args.threshold + \"px\";\n                }\n                else if ((0,_workbook_index__WEBPACK_IMPORTED_MODULE_1__.inRange)(this.copiedInfo.range, this.copiedInfo.range[0], args.colIdx)) {\n                    ele.style.width = parseFloat(ele.style.width) + args.threshold + \"px\";\n                }\n            }\n        }\n    };\n    Clipboard.prototype.cut = function (args) {\n        this.setCopiedInfo(args, true);\n    };\n    Clipboard.prototype.copy = function (args) {\n        this.setCopiedInfo(args, false);\n    };\n    Clipboard.prototype.paste = function (args) {\n        var _this = this;\n        if (this.parent.isEdit || this.parent.element.getElementsByClassName('e-dlg-overlay').length > 0) {\n            var editEle = this.parent.element.getElementsByClassName('e-spreadsheet-edit')[0];\n            editEle.style.height = 'auto';\n            return;\n        }\n        var rfshRange;\n        var isExternal = ((args && args.clipboardData) || window['clipboardData']);\n        if (isExternal && args.clipboardData && args.clipboardData.getData('isInternalCut').length && !this.copiedInfo) {\n            return; // to prevent multiple cut paste action\n        }\n        if (isExternal || this.copiedShapeInfo || (args.isInternal && this.copiedInfo)) {\n            args.isInternal = !isExternal;\n            var isCut = void 0;\n            var copiedIdx = this.getCopiedIdx();\n            args.isAction = !!isExternal || args.isAction;\n            var cSIdx = args && args.sIdx > -1 ? args.sIdx : this.parent.activeSheetIndex;\n            var curSheet = (0,_workbook_index__WEBPACK_IMPORTED_MODULE_1__.getSheet)(this.parent, cSIdx);\n            var selIdx = (0,_workbook_index__WEBPACK_IMPORTED_MODULE_1__.getSwapRange)(args && args.range || (0,_workbook_index__WEBPACK_IMPORTED_MODULE_1__.getRangeIndexes)(curSheet.selectedRange));\n            var pasteModelArgs = void 0;\n            var rows = void 0;\n            if (isExternal) {\n                pasteModelArgs = this.getExternalCells(args);\n                rows = pasteModelArgs.model;\n                if (!args.isInternal && pasteModelArgs.internal) {\n                    isExternal = false;\n                    if (!this.copiedInfo) {\n                        return;\n                    }\n                }\n                if (!rows || !rows.length) { // If image pasted\n                    if (pasteModelArgs.file) {\n                        this.parent.notify(_common_index__WEBPACK_IMPORTED_MODULE_2__.insertImage, { file: pasteModelArgs.file });\n                        return;\n                    }\n                    else if (this.copiedInfo) {\n                        isExternal = false;\n                    }\n                    else {\n                        return;\n                    }\n                }\n            }\n            pasteModelArgs = pasteModelArgs;\n            var copyInfo = Object.assign({ isExternal: isExternal }, this.copiedInfo);\n            var cIdx_1;\n            var pSheetIdx_1;\n            var column = void 0;\n            var notRemoveMerge = void 0;\n            var isRepeative = void 0;\n            var cSheetSel = void 0;\n            var prevSheet_1;\n            var isRowSelected = void 0;\n            var isColSelected = void 0;\n            if (isExternal) {\n                pSheetIdx_1 = cSIdx;\n                prevSheet_1 = (0,_workbook_index__WEBPACK_IMPORTED_MODULE_1__.getSheet)(this.parent, pSheetIdx_1);\n                column = {};\n                cSheetSel = pasteModelArgs.selection;\n                isRepeative = cSheetSel !== 'Sheet' && (selIdx[2] - selIdx[0] + 1) % pasteModelArgs.rowCount === 0 &&\n                    (selIdx[3] - selIdx[1] + 1) % pasteModelArgs.colCount === 0;\n                cIdx_1 = [0, 0, pasteModelArgs.usedRowIndex, pasteModelArgs.usedColIndex];\n            }\n            else {\n                cIdx_1 = (0,_workbook_index__WEBPACK_IMPORTED_MODULE_1__.getSwapRange)(this.copiedShapeInfo ? (0,_workbook_index__WEBPACK_IMPORTED_MODULE_1__.getRangeIndexes)(curSheet.selectedRange) : this.copiedInfo.range);\n                pSheetIdx_1 = copiedIdx;\n                column = (0,_workbook_index__WEBPACK_IMPORTED_MODULE_1__.getColumn)(curSheet, cIdx_1[1]);\n                notRemoveMerge = (0,_workbook_index__WEBPACK_IMPORTED_MODULE_1__.isSingleCell)(cIdx_1) && this.isRangeMerged(selIdx, curSheet);\n                prevSheet_1 = (0,_workbook_index__WEBPACK_IMPORTED_MODULE_1__.getSheet)(this.parent, pSheetIdx_1);\n                isRepeative = !notRemoveMerge && (selIdx[2] - selIdx[0] + 1) % (cIdx_1[2] - cIdx_1[0] + 1) === 0 &&\n                    (selIdx[3] - selIdx[1] + 1) % (cIdx_1[3] - cIdx_1[1] + 1) === 0;\n                if (prevSheet_1) {\n                    isRowSelected = cIdx_1[1] === 0 && cIdx_1[3] === prevSheet_1.colCount - 1;\n                    isColSelected = cIdx_1[0] === 0 && cIdx_1[2] === prevSheet_1.rowCount - 1;\n                    if (isRowSelected) {\n                        if (isColSelected) {\n                            cSheetSel = 'Sheet';\n                            cIdx_1[2] = prevSheet_1.usedRange.rowIndex;\n                            cIdx_1[3] = prevSheet_1.usedRange.colIndex;\n                        }\n                        else {\n                            cSheetSel = 'Row';\n                            cIdx_1[3] = prevSheet_1.usedRange.colIndex;\n                        }\n                    }\n                    else if (isColSelected) {\n                        cSheetSel = 'Column';\n                        cIdx_1[2] = prevSheet_1.usedRange.rowIndex;\n                    }\n                }\n            }\n            rfshRange = isRepeative ? selIdx : [selIdx[0], selIdx[1]]\n                .concat([selIdx[0] + cIdx_1[2] - cIdx_1[0], selIdx[1] + cIdx_1[3] - cIdx_1[1] || selIdx[1]]);\n            if (cSheetSel) {\n                if ((cSheetSel === 'Sheet' || cSheetSel === 'Column') && rfshRange[2] < curSheet.usedRange.rowIndex) {\n                    rfshRange[2] = curSheet.usedRange.rowIndex;\n                }\n                if ((cSheetSel === 'Sheet' || cSheetSel === 'Row') && rfshRange[3] < curSheet.usedRange.colIndex) {\n                    rfshRange[3] = curSheet.usedRange.colIndex;\n                }\n            }\n            var pasteType = (args && args.type) || 'All';\n            if ((0,_workbook_index__WEBPACK_IMPORTED_MODULE_1__.isReadOnlyCells)(this.parent, rfshRange)) {\n                this.parent.notify(_common_index__WEBPACK_IMPORTED_MODULE_2__.readonlyAlert, null);\n                return;\n            }\n            else if (curSheet.isProtected && (0,_common_index__WEBPACK_IMPORTED_MODULE_2__.isLockedCells)(this.parent, rfshRange)) {\n                this.parent.notify(_common_index__WEBPACK_IMPORTED_MODULE_2__.editAlert, null);\n                return;\n            }\n            if (args.isAction && !this.copiedShapeInfo) {\n                var beginEventArgs = { requestType: 'paste', copiedInfo: this.copiedInfo,\n                    copiedRange: (0,_workbook_index__WEBPACK_IMPORTED_MODULE_1__.getRangeAddress)(cIdx_1), pastedRange: (0,_workbook_index__WEBPACK_IMPORTED_MODULE_1__.getRangeAddress)(rfshRange), type: pasteType, cancel: false };\n                this.parent.notify(_workbook_index__WEBPACK_IMPORTED_MODULE_1__.beginAction, { eventArgs: beginEventArgs, action: 'clipboard' });\n                if (beginEventArgs.cancel) {\n                    return;\n                }\n                selIdx = (0,_workbook_index__WEBPACK_IMPORTED_MODULE_1__.getRangeIndexes)(beginEventArgs.pastedRange);\n                if (isExternal) {\n                    isRepeative = pasteModelArgs.selection !== 'Sheet' && (selIdx[2] - selIdx[0] + 1) % pasteModelArgs.rowCount === 0 &&\n                        (selIdx[3] - selIdx[1] + 1) % pasteModelArgs.colCount === 0;\n                }\n                else {\n                    isRepeative = !notRemoveMerge && !isRowSelected && (selIdx[2] - selIdx[0] + 1) % (cIdx_1[2] - cIdx_1[0] + 1) === 0\n                        && !isColSelected && (selIdx[3] - selIdx[1] + 1) % (cIdx_1[3] - cIdx_1[1] + 1) === 0;\n                }\n                rfshRange = isRepeative ? selIdx : [selIdx[0], selIdx[1]].concat([selIdx[0] + cIdx_1[2] - cIdx_1[0], selIdx[1] + cIdx_1[3] - cIdx_1[1] || selIdx[1]]);\n                pasteType = beginEventArgs.type;\n            }\n            var selectionRange = void 0;\n            if (cSheetSel) {\n                selectionRange = [].concat(rfshRange);\n                if (cSheetSel === 'Sheet' || cSheetSel === 'Column') {\n                    if (rfshRange[2] < curSheet.usedRange.rowIndex) {\n                        rfshRange[2] = curSheet.usedRange.rowIndex;\n                    }\n                    if (cIdx_1[2] < curSheet.usedRange.rowIndex) {\n                        cIdx_1[2] += curSheet.usedRange.rowIndex - cIdx_1[2];\n                    }\n                    if (selectionRange[2] < curSheet.rowCount) {\n                        selectionRange[2] = curSheet.rowCount - 1;\n                    }\n                }\n                if (cSheetSel === 'Sheet' || cSheetSel === 'Row') {\n                    if (rfshRange[3] < curSheet.usedRange.colIndex) {\n                        cIdx_1[3] += curSheet.usedRange.colIndex - rfshRange[3];\n                        rfshRange[3] = curSheet.usedRange.colIndex;\n                    }\n                    if (cIdx_1[3] < curSheet.usedRange.colIndex) {\n                        cIdx_1[3] += curSheet.usedRange.colIndex - cIdx_1[3];\n                    }\n                    if (selectionRange[3] < curSheet.colCount) {\n                        selectionRange[3] = curSheet.colCount - 1;\n                    }\n                }\n            }\n            else {\n                selectionRange = rfshRange;\n            }\n            var cell = void 0;\n            var isExtend = void 0;\n            var prevCell = void 0;\n            var rowIdx = selIdx[0];\n            var mergeCollection = [];\n            if (curSheet.isProtected && (0,_common_index__WEBPACK_IMPORTED_MODULE_2__.isLockedCells)(this.parent, rfshRange)) {\n                this.parent.notify(_common_index__WEBPACK_IMPORTED_MODULE_2__.editAlert, null);\n                return;\n            }\n            if (this.copiedShapeInfo && !this.copiedInfo) {\n                var pictureElem = this.copiedShapeInfo.pictureElem;\n                if (pictureElem.classList.contains('e-datavisualization-chart')) {\n                    this.copiedShapeInfo.chartInfo.top = null;\n                    this.copiedShapeInfo.chartInfo.left = null;\n                    this.parent.notify(_workbook_index__WEBPACK_IMPORTED_MODULE_1__.setChart, {\n                        chart: [this.copiedShapeInfo.chartInfo], isInitCell: true, isUndoRedo: true, isPaste: true,\n                        dataSheetIdx: this.copiedShapeInfo.sheetIdx, isCut: this.copiedShapeInfo.isCut, sheetId: curSheet.id,\n                        range: args.range || curSheet.name + \"!\" + curSheet.selectedRange\n                    });\n                }\n                else {\n                    this.parent.notify(_common_index__WEBPACK_IMPORTED_MODULE_2__.createImageElement, {\n                        options: {\n                            src: pictureElem.style.backgroundImage.replace(/url\\((['\"])?(.*?)\\1\\)/gi, '$2'),\n                            height: this.copiedShapeInfo.height, width: this.copiedShapeInfo.width,\n                            id: this.copiedShapeInfo.isCut ? pictureElem.id : ''\n                        },\n                        range: (0,_workbook_index__WEBPACK_IMPORTED_MODULE_1__.getRangeAddress)([rowIdx, selIdx[1], rowIdx, selIdx[1]]), isPublic: false, isUndoRedo: true\n                    });\n                }\n                var pastedCell = (0,_workbook_index__WEBPACK_IMPORTED_MODULE_1__.getCell)(rowIdx, selIdx[1], curSheet);\n                if (pastedCell && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(pastedCell.image) && pastedCell.image.length > 0) {\n                    var eventArgs = {\n                        requestType: 'imagePaste',\n                        copiedShapeInfo: this.copiedShapeInfo,\n                        pasteSheetIndex: this.parent.activeSheetIndex,\n                        pastedRange: (0,_workbook_index__WEBPACK_IMPORTED_MODULE_1__.getSheetName)(this.parent) + '!' + (0,_workbook_index__WEBPACK_IMPORTED_MODULE_1__.getRangeAddress)([rowIdx, selIdx[1], rowIdx, selIdx[1]]),\n                        pastedPictureElement: document.getElementById(pastedCell.image[pastedCell.image.length - 1].id)\n                    };\n                    this.parent.notify(_common_index__WEBPACK_IMPORTED_MODULE_2__.completeAction, { eventArgs: eventArgs, action: 'clipboard' });\n                }\n            }\n            else {\n                var cRows = [];\n                var isInRange = this.isInRange(cIdx_1, selIdx, copiedIdx);\n                var isFullRowMerge = false;\n                var isFullColMerge = false;\n                var hiddenCount = 0;\n                var cf = [];\n                var cfRule = void 0;\n                var cancel = void 0;\n                if (!isRepeative && pasteType !== 'Values') {\n                    cfRule = this.setCF(cIdx_1, rfshRange, prevSheet_1, curSheet, cf, cfRule);\n                }\n                var isUniqueCell = false;\n                var uniqueCellColl = [];\n                var copyCellArgs = {\n                    sheet: curSheet, isExternal: !!isExternal\n                };\n                var pasteSetCell = this.setCell(copyCellArgs);\n                var cutSetCell_1 = !isExternal && this.copiedInfo.isCut && this.setCell({ sheet: prevSheet_1 });\n                var prevSheetMergeCollection = [];\n                var colValidationCollection = [];\n                for (var i = cIdx_1[0], l = 0; i <= cIdx_1[2]; i++, l++) {\n                    if (!isExternal && !copyInfo.isCut && (0,_workbook_index__WEBPACK_IMPORTED_MODULE_1__.isFilterHidden)(prevSheet_1, i)) {\n                        l--;\n                        hiddenCount++;\n                        continue;\n                    }\n                    if (isInRange) {\n                        cRows[selIdx[0] + l] = { cells: [] };\n                    }\n                    for (var j = cIdx_1[1], k = 0; j <= cIdx_1[3]; j++, k++) {\n                        if (isInRange) {\n                            cRows[selIdx[0] + l].cells[selIdx[1] + k] = (0,_workbook_index__WEBPACK_IMPORTED_MODULE_1__.getCell)(selIdx[0] + l, selIdx[1] + k, prevSheet_1, false, true);\n                        }\n                        cell = isExternal ? (rows[i] && rows[i].cells[j]) || {} :\n                            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)({}, (isInRange && cRows[i] && cRows[i].cells[j]) ?\n                                cRows[i].cells[j] : (0,_workbook_index__WEBPACK_IMPORTED_MODULE_1__.getCell)(i, j, prevSheet_1), null, true);\n                        column = (0,_workbook_index__WEBPACK_IMPORTED_MODULE_1__.getColumn)(prevSheet_1, j);\n                        if (!cell.validation && (0,_workbook_index__WEBPACK_IMPORTED_MODULE_1__.checkColumnValidation)(column, i, j)) {\n                            var validation = Object.assign({}, column.validation);\n                            var prevIdx = [0, cIdx_1[1], 0, cIdx_1[3]];\n                            var value1 = validation.value1;\n                            var value2 = validation.value2;\n                            if ((0,_workbook_index__WEBPACK_IMPORTED_MODULE_1__.checkIsFormula)(value1)) {\n                                validation.value1 = (0,_workbook_index__WEBPACK_IMPORTED_MODULE_1__.getUpdatedFormula)([i, j], prevIdx, prevSheet_1, this.parent, { formula: value1 });\n                            }\n                            if ((0,_workbook_index__WEBPACK_IMPORTED_MODULE_1__.checkIsFormula)(value2)) {\n                                validation.value2 = (0,_workbook_index__WEBPACK_IMPORTED_MODULE_1__.getUpdatedFormula)([i, j], prevIdx, prevSheet_1, this.parent, { formula: value2 });\n                            }\n                            cell.validation = validation;\n                        }\n                        if (cell && cell.isReadOnly) {\n                            delete cell.isReadOnly;\n                        }\n                        if (isRowSelected || isColSelected) {\n                            if (cell && cell.rowSpan) {\n                                if (cell.rowSpan > 0) {\n                                    if ((cell.rowSpan + i) - 1 <= cIdx_1[2]) {\n                                        isFullRowMerge = true;\n                                    }\n                                    else {\n                                        cell = {};\n                                    }\n                                }\n                                else if (!isFullRowMerge) {\n                                    cell = {};\n                                }\n                                else if (cell.rowSpan < 0) {\n                                    var rowSpan = cell.rowSpan;\n                                    var colSpan = cell.colSpan ? cell.colSpan : 0;\n                                    var spanCell = (0,_workbook_index__WEBPACK_IMPORTED_MODULE_1__.getCell)(rowIdx + rowSpan, (selIdx[1] + k) + colSpan, curSheet);\n                                    if (spanCell && !spanCell.rowSpan) {\n                                        cell = {};\n                                    }\n                                }\n                            }\n                            if (cell && cell.colSpan) {\n                                if (cell.colSpan > 0) {\n                                    if ((cell.colSpan + j) - 1 <= cIdx_1[3]) {\n                                        isFullColMerge = true;\n                                    }\n                                    else {\n                                        cell = {};\n                                    }\n                                }\n                                else if (!isFullColMerge) {\n                                    cell = {};\n                                }\n                            }\n                        }\n                        if (cell && pasteType) {\n                            var model = void 0;\n                            switch (pasteType) {\n                                case 'Formats':\n                                    model = { format: cell.format, style: cell.style };\n                                    if (this.copiedInfo && !this.copiedInfo.isCut) {\n                                        if (cell.rowSpan) {\n                                            model.rowSpan = cell.rowSpan;\n                                        }\n                                        if (cell.colSpan) {\n                                            model.colSpan = cell.colSpan;\n                                        }\n                                    }\n                                    cell = model;\n                                    break;\n                                case 'Values':\n                                    cell = { value: cell.value };\n                                    if (cell.value && cell.value.toString().indexOf('\\n') > -1) {\n                                        var ele = this.parent.getCell(selIdx[0], selIdx[1]);\n                                        ele.classList.add('e-alt-unwrap');\n                                    }\n                                    break;\n                            }\n                            isExtend = ['Formats', 'Values'].indexOf(pasteType) > -1;\n                        }\n                        if ((!this.parent.scrollSettings.isFinite && (cIdx_1[2] - cIdx_1[0] > (1048575 - selIdx[0])\n                            || cIdx_1[3] - cIdx_1[1] > (16383 - selIdx[1])))\n                            || (this.parent.scrollSettings.isFinite && (cIdx_1[2] - cIdx_1[0] > (curSheet.rowCount - 1 - selIdx[0])\n                                || cIdx_1[3] - cIdx_1[1] > (curSheet.colCount - 1 - selIdx[1])))) {\n                            this.showDialog();\n                            return;\n                        }\n                        if (isRepeative) {\n                            for (var x = selIdx[0]; x <= selIdx[2]; x += (cIdx_1[2] - cIdx_1[0]) + 1) {\n                                if (!copyInfo.isCut && !hiddenCount && (0,_workbook_index__WEBPACK_IMPORTED_MODULE_1__.isFilterHidden)(curSheet, x + l)) {\n                                    continue;\n                                }\n                                for (var y = selIdx[1]; y <= selIdx[3]; y += (cIdx_1[3] - cIdx_1[1] + 1)) {\n                                    if (i === cIdx_1[0] && j === cIdx_1[1] && (cfRule === undefined || cfRule.length) &&\n                                        pasteType !== 'Values') {\n                                        cfRule = this.setCF(cIdx_1, [x, y, x + (cIdx_1[2] - cIdx_1[0]), y + (cIdx_1[3] - cIdx_1[1])], prevSheet_1, curSheet, cf, cfRule);\n                                    }\n                                    prevCell = (0,_workbook_index__WEBPACK_IMPORTED_MODULE_1__.getCell)(x + l, y + k, curSheet, false, true);\n                                    if (!isExternal && (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(prevCell.colSpan) || !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(prevCell.rowSpan))) {\n                                        if (isRowSelected || isColSelected) {\n                                            continue;\n                                        }\n                                        var merge = { range: [x + l, y + k, x + l, y + k], merge: false, isAction: false, type: 'All',\n                                            sheetIndex: cSIdx, preventRefresh: cSIdx !== this.parent.activeSheetIndex };\n                                        mergeCollection.push(merge);\n                                        this.parent.notify(_workbook_index__WEBPACK_IMPORTED_MODULE_1__.setMerge, merge);\n                                    }\n                                    var colInd = y + k;\n                                    cell = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)({}, cell ? cell : {}, null, true);\n                                    if (!isExtend && this.copiedInfo && !this.copiedInfo.isCut && cell.formula) {\n                                        var newFormula = (0,_workbook_index__WEBPACK_IMPORTED_MODULE_1__.getUpdatedFormula)([x + l, colInd], [i, j], prevSheet_1, this.parent, isInRange ? cell : null);\n                                        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(newFormula)) {\n                                            cell.formula = newFormula;\n                                        }\n                                    }\n                                    if (this.copiedInfo && !this.copiedInfo.isCut && cell.validation) {\n                                        var currIdx = selIdx;\n                                        var prevIdx = cIdx_1;\n                                        var updatedVal = (0,_workbook_index__WEBPACK_IMPORTED_MODULE_1__.getUpdatedFormula)(currIdx, prevIdx, prevSheet_1, this.parent, { formula: cell.validation.value1 });\n                                        cell.validation.value1 = updatedVal;\n                                        if (cell.validation.value2 !== '') {\n                                            updatedVal = (0,_workbook_index__WEBPACK_IMPORTED_MODULE_1__.getUpdatedFormula)(currIdx, prevIdx, prevSheet_1, this.parent, { formula: cell.validation.value2 });\n                                            cell.validation.value2 = updatedVal;\n                                        }\n                                    }\n                                    if (curSheet.isProtected && cell && cell.isLocked !== false) {\n                                        cell.isLocked = prevCell.isLocked;\n                                    }\n                                    if (prevCell && prevCell.formula && prevCell.formula.indexOf('=UNIQUE(') > -1) {\n                                        this.parent.notify(_workbook_common_event__WEBPACK_IMPORTED_MODULE_4__.removeUniquecol, null);\n                                    }\n                                    var uniqueFormulaArgs = {\n                                        cellIdx: [i, j], isUnique: false, uniqueRange: '', sheetName: prevSheet_1.name\n                                    };\n                                    this.parent.notify(_workbook_index__WEBPACK_IMPORTED_MODULE_1__.checkUniqueRange, uniqueFormulaArgs);\n                                    if (uniqueFormulaArgs.isUnique) {\n                                        cell.value = null;\n                                    }\n                                    isUniqueCell = false;\n                                    if (cell && cell.formula && cell.formula.indexOf('=UNIQUE(') > -1) {\n                                        isUniqueCell = true;\n                                        uniqueCellColl.push([x, colInd]);\n                                        cell.value = null;\n                                    }\n                                    cancel = pasteSetCell(x + l, colInd, cell, colInd === selIdx[3], isExtend, isUniqueCell, args.beforeActionData, args.isUndo);\n                                    if (cancel) {\n                                        continue;\n                                    }\n                                    if (cell.formula && this.copiedInfo && this.copiedInfo.isCut) {\n                                        this.parent.notify(_workbook_index__WEBPACK_IMPORTED_MODULE_1__.clearFormulaDependentCells, { cellRef: (0,_workbook_index__WEBPACK_IMPORTED_MODULE_1__.getRangeAddress)([i, j, i, j]) });\n                                    }\n                                }\n                            }\n                        }\n                        else {\n                            if (isExternal || !(0,_common_index__WEBPACK_IMPORTED_MODULE_2__.hasTemplate)(this.parent, i, j, copiedIdx)) {\n                                if (notRemoveMerge) {\n                                    pasteSetCell(rowIdx, selIdx[1] + k, { value: cell.value }, j === cIdx_1[3], true);\n                                }\n                                else {\n                                    pasteSetCell(rowIdx, selIdx[1] + k, cell, j === cIdx_1[3], isExtend);\n                                }\n                            }\n                        }\n                        if (!isExternal && this.copiedInfo.isCut && !((0,_workbook_index__WEBPACK_IMPORTED_MODULE_1__.inRange)(selIdx, i, j) &&\n                            copiedIdx === this.parent.activeSheetIndex)) {\n                            var cell_1 = (0,_workbook_index__WEBPACK_IMPORTED_MODULE_1__.getCell)(i, j, prevSheet_1);\n                            if (cell_1) {\n                                if (cell_1.isReadOnly) {\n                                    continue;\n                                }\n                                if (cell_1.isLocked || (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(cell_1.isLocked)) {\n                                    if ((isRowSelected || isColSelected) && (cell_1.rowSpan !== undefined || cell_1.colSpan !== undefined)) {\n                                        if (cell_1.rowSpan > 1 || cell_1.colSpan > 1) {\n                                            prevSheetMergeCollection.push({ range: [i, j, i, j], rowSpan: cell_1.rowSpan, colSpan: cell_1.colSpan });\n                                            cell_1 = null;\n                                        }\n                                        else {\n                                            continue;\n                                        }\n                                    }\n                                    else {\n                                        if (!cell_1.validation && prevSheet_1.columns[j] && prevSheet_1.columns[j].validation\n                                            && colValidationCollection.indexOf(j) === -1) {\n                                            colValidationCollection.push(j);\n                                        }\n                                        cell_1 = null;\n                                    }\n                                }\n                                else if (cell_1.isLocked === false) {\n                                    if (prevSheet_1.isProtected) {\n                                        cell_1 = { isLocked: false };\n                                    }\n                                    else {\n                                        cell_1 = null;\n                                    }\n                                }\n                            }\n                            cutSetCell_1(i, j, cell_1, j === cIdx_1[3]);\n                        }\n                    }\n                    rowIdx++;\n                }\n                if (prevSheetMergeCollection.length) {\n                    prevSheetMergeCollection.forEach(function (mergeInfo) {\n                        (0,_workbook_index__WEBPACK_IMPORTED_MODULE_1__.setCell)(mergeInfo.range[0], mergeInfo.range[1], prevSheet_1, {\n                            rowSpan: mergeInfo.rowSpan, colSpan: mergeInfo.colSpan\n                        });\n                        var mergeArgs = { range: mergeInfo.range };\n                        _this.parent.notify(_workbook_index__WEBPACK_IMPORTED_MODULE_1__.mergedRange, mergeArgs);\n                        _this.parent.notify(_workbook_index__WEBPACK_IMPORTED_MODULE_1__.setMerge, {\n                            merge: false, range: mergeArgs.range, type: 'All',\n                            sheetIndex: pSheetIdx_1, preventRefresh: pSheetIdx_1 !== _this.parent.activeSheetIndex\n                        });\n                        mergeArgs.range = mergeArgs.range;\n                        for (var sRowIdx = mergeArgs.range[0]; sRowIdx <= mergeArgs.range[2]; sRowIdx++) {\n                            for (var sColIdx = mergeArgs.range[1]; sColIdx <= mergeArgs.range[3]; sColIdx++) {\n                                cutSetCell_1(sRowIdx, sColIdx, null);\n                            }\n                        }\n                    });\n                }\n                if (colValidationCollection.length) {\n                    colValidationCollection.forEach(function (colIdx) {\n                        _this.parent.notify(_workbook_common_event__WEBPACK_IMPORTED_MODULE_4__.cellValidation, { range: prevSheet_1.name + '!' + (0,_workbook_index__WEBPACK_IMPORTED_MODULE_1__.getRangeAddress)([cIdx_1[0], colIdx, cIdx_1[2], colIdx]), isRemoveValidation: true });\n                    });\n                }\n                if (uniqueCellColl.length) {\n                    for (var i = 0; i < uniqueCellColl.length; i++) {\n                        this.parent.serviceLocator.getService('cell').refresh(uniqueCellColl[i][0], uniqueCellColl[i][1]);\n                    }\n                }\n                if (copyCellArgs.isRandFormula && this.parent.calculationMode === 'Automatic') {\n                    this.parent.notify(_workbook_index__WEBPACK_IMPORTED_MODULE_1__.workbookFormulaOperation, { action: 'refreshRandomFormula' });\n                }\n                this.parent.notify(_workbook_index__WEBPACK_IMPORTED_MODULE_1__.refreshRibbonIcons, null);\n                var hiddenDiff = rfshRange[2] - hiddenCount;\n                var selHiddenDiff = selectionRange[2] - hiddenCount;\n                rfshRange[2] = hiddenDiff;\n                selectionRange[2] = selHiddenDiff;\n                this.parent.setUsedRange(rfshRange[2], rfshRange[3]);\n                var selRange = (0,_workbook_index__WEBPACK_IMPORTED_MODULE_1__.getRangeAddress)(selectionRange);\n                if (cSIdx === this.parent.activeSheetIndex && !args.isFromUpdateAction) {\n                    this.parent.notify(_common_index__WEBPACK_IMPORTED_MODULE_2__.selectRange, { address: selRange });\n                }\n                if (!isExternal && this.copiedInfo.isCut) {\n                    isCut = this.copiedInfo.isCut;\n                    if (copiedIdx === this.parent.activeSheetIndex) {\n                        this.parent.serviceLocator.getService('cell').refreshRange(cIdx_1);\n                    }\n                    this.clearCopiedInfo();\n                }\n                if ((isExternal || isInRange) && this.copiedInfo) {\n                    this.clearCopiedInfo();\n                }\n                var clearCFArgs = void 0;\n                if (isCut) {\n                    if (cfRule && cfRule.length && pasteType !== 'Values') {\n                        clearCFArgs = { range: cIdx_1, sheetIdx: pSheetIdx_1, isClear: true };\n                        this.parent.notify(_workbook_index__WEBPACK_IMPORTED_MODULE_1__.clearCFRule, clearCFArgs);\n                    }\n                    //this.updateFilter(copyInfo, rfshRange);\n                    (0,_common_index__WEBPACK_IMPORTED_MODULE_2__.setMaxHgt)(prevSheet_1, cIdx_1[0], cIdx_1[1], (this.parent.getRow(cIdx_1[0], null, this.parent.frozenColCount(prevSheet_1)) || { offsetHeight: 20 }).offsetHeight);\n                    var hgt = (0,_common_index__WEBPACK_IMPORTED_MODULE_2__.getMaxHgt)(prevSheet_1, cIdx_1[0]);\n                    (0,_common_index__WEBPACK_IMPORTED_MODULE_2__.setRowEleHeight)(this.parent, prevSheet_1, hgt, cIdx_1[0]);\n                }\n                if (cf.length && cSIdx === this.parent.activeSheetIndex) {\n                    this.parent.notify(_workbook_index__WEBPACK_IMPORTED_MODULE_1__.applyCF, { cfModel: cf, isAction: true });\n                }\n                var copySheet = (0,_workbook_index__WEBPACK_IMPORTED_MODULE_1__.getSheet)(this.parent, copiedIdx);\n                if (!isExternal && cIdx_1[0] === cIdx_1[2] && cSheetSel === 'Row') {\n                    var hgt = copySheet.rows[cIdx_1[0]].height;\n                    for (var i = selIdx[0]; i <= selIdx[2]; i++) {\n                        (0,_common_index__WEBPACK_IMPORTED_MODULE_2__.setRowEleHeight)(this.parent, this.parent.getActiveSheet(), hgt, i);\n                    }\n                    if (isCut) {\n                        var defaultHeight = copySheet && copySheet.standardHeight ? copySheet.standardHeight : 20;\n                        (0,_common_index__WEBPACK_IMPORTED_MODULE_2__.setRowEleHeight)(this.parent, copySheet, defaultHeight, cIdx_1[0]);\n                    }\n                }\n                if (args.isAction) {\n                    var eventArgs = {\n                        requestType: 'paste',\n                        copiedInfo: copyInfo,\n                        mergeCollection: mergeCollection,\n                        pasteSheetIndex: this.parent.activeSheetIndex,\n                        copiedRange: prevSheet_1.name + '!' + (copyInfo.range ? (0,_workbook_index__WEBPACK_IMPORTED_MODULE_1__.getRangeAddress)(copyInfo.range) : prevSheet_1.selectedRange),\n                        pastedRange: curSheet.name + '!' + (0,_workbook_index__WEBPACK_IMPORTED_MODULE_1__.getRangeAddress)(rfshRange),\n                        type: pasteType || 'All',\n                        selectedRange: selRange\n                    };\n                    if (hiddenCount) {\n                        eventArgs['skipFilterCheck'] = true;\n                    }\n                    if (clearCFArgs && clearCFArgs.cfClearActionArgs) {\n                        eventArgs['cfClearActionArgs'] = clearCFArgs.cfClearActionArgs;\n                    }\n                    if (cf.length) {\n                        eventArgs['cfActionArgs'] = { cfModel: cf, sheetIdx: cSIdx };\n                    }\n                    this.parent.notify(_common_index__WEBPACK_IMPORTED_MODULE_2__.completeAction, { eventArgs: eventArgs, action: 'clipboard' });\n                }\n                if (args.focus) {\n                    (0,_common_index__WEBPACK_IMPORTED_MODULE_2__.focus)(this.parent.element);\n                }\n            }\n        }\n        else {\n            this.getClipboardEle().select();\n        }\n    };\n    Clipboard.prototype.setCF = function (cRange, pRange, cSheet, pSheet, cf, conditionalFormats) {\n        var _this = this;\n        var cfRange;\n        var indexes;\n        var assignCF = function (conditionalFormat) {\n            cfRange = [pRange[0] + (indexes[0] <= cRange[0] ? 0 : indexes[0] - cRange[0]),\n                pRange[1] + (indexes[1] <= cRange[1] ? 0 : indexes[1] - cRange[1]),\n                pRange[2] - (indexes[2] >= cRange[2] ? 0 : cRange[2] - indexes[2]),\n                pRange[3] - (indexes[3] >= cRange[3] ? 0 : cRange[3] - indexes[3])];\n            if (!pSheet.conditionalFormats) {\n                _this.parent.setSheetPropertyOnMute(pSheet, 'conditionalFormats', []);\n            }\n            var cfRule = {\n                range: (0,_workbook_index__WEBPACK_IMPORTED_MODULE_1__.getRangeAddress)(cfRange), type: conditionalFormat.type,\n                cFColor: conditionalFormat.cFColor, value: conditionalFormat.value, format: conditionalFormat.format\n            };\n            pSheet.conditionalFormats.push(cfRule);\n            cf.push(cfRule);\n        };\n        if (conditionalFormats) {\n            for (var i = 0, len = conditionalFormats.length; i < len; i++) {\n                indexes = (0,_workbook_index__WEBPACK_IMPORTED_MODULE_1__.getRangeIndexes)(conditionalFormats[i].range);\n                assignCF(conditionalFormats[i]);\n            }\n        }\n        else {\n            conditionalFormats = [];\n            if (cSheet.conditionalFormats) {\n                for (var i = 0, len = cSheet.conditionalFormats.length; i < len; i++) {\n                    indexes = (0,_workbook_index__WEBPACK_IMPORTED_MODULE_1__.getRangeIndexes)(cSheet.conditionalFormats[i].range);\n                    if ((0,_workbook_index__WEBPACK_IMPORTED_MODULE_1__.checkRange)([cRange], cSheet.conditionalFormats[i].range)) {\n                        conditionalFormats.push(cSheet.conditionalFormats[i]);\n                        assignCF(cSheet.conditionalFormats[i]);\n                    }\n                }\n            }\n        }\n        return conditionalFormats;\n    };\n    Clipboard.prototype.isRangeMerged = function (range, sheet) {\n        var cell = (0,_workbook_index__WEBPACK_IMPORTED_MODULE_1__.getCell)(range[0], range[1], sheet);\n        if (cell && (cell.colSpan > 1 || cell.rowSpan > 1)) {\n            var args = { range: range.slice(2, 4).concat(range.slice(2, 4)) };\n            this.parent.notify(_workbook_index__WEBPACK_IMPORTED_MODULE_1__.activeCellMergedRange, args);\n            return args.range[0] === range[0] && args.range[1] === range[1] && args.range[2] === range[2] && args.range[3] === range[3];\n        }\n        return false;\n    };\n    Clipboard.prototype.updateFilter = function (copyInfo, pastedRange) {\n        var isFilterCut;\n        var diff;\n        this.parent.notify(_workbook_index__WEBPACK_IMPORTED_MODULE_1__.setFilteredCollection, null);\n        for (var i = 0; i < this.parent.sheets.length; i++) {\n            if (this.parent.filterCollection && this.parent.filterCollection[i] &&\n                this.parent.filterCollection[i].sheetIndex === (0,_workbook_index__WEBPACK_IMPORTED_MODULE_1__.getSheetIndexFromId)(this.parent, copyInfo.sId)) {\n                var range = copyInfo.range;\n                var fRange = (0,_workbook_index__WEBPACK_IMPORTED_MODULE_1__.getRangeIndexes)(this.parent.filterCollection[i].filterRange);\n                range = (0,_workbook_index__WEBPACK_IMPORTED_MODULE_1__.getSwapRange)(range);\n                if (fRange[0] === range[0] && fRange[2] === range[2] && fRange[1] === range[1] && fRange[3] === range[3]) {\n                    isFilterCut = true;\n                    diff = [Math.abs(range[0] - fRange[0]), Math.abs(range[1] - fRange[1]),\n                        Math.abs(range[2] - fRange[2]), Math.abs(range[3] - fRange[3])];\n                }\n            }\n        }\n        var cell = this.parent.getCell(copyInfo.range[0], copyInfo.range[1]);\n        cell = cell ? (cell.querySelector('.e-filter-icon') ? cell : this.parent.getCell(copyInfo.range[2], copyInfo.range[3])) : cell;\n        var asc = cell ? cell.querySelector('.e-sortasc-filter') : cell;\n        var desc = cell ? cell.querySelector('.e-sortdesc-filter') : cell;\n        if (isFilterCut) {\n            for (var n = 0; n < this.parent.filterCollection.length; n++) {\n                var filterCol = this.parent.filterCollection[n];\n                var sheetIndex = copyInfo && copyInfo.sId ? (0,_workbook_index__WEBPACK_IMPORTED_MODULE_1__.getSheetIndexFromId)(this.parent, copyInfo.sId) :\n                    this.parent.activeSheetIndex;\n                if (filterCol.sheetIndex === sheetIndex) {\n                    this.parent.notify(_common_index__WEBPACK_IMPORTED_MODULE_2__.initiateFilterUI, { predicates: null, range: filterCol.filterRange, sIdx: sheetIndex, isCut: true });\n                }\n                if (filterCol.sheetIndex === sheetIndex && sheetIndex === this.parent.activeSheetIndex) {\n                    diff = [pastedRange[0] + diff[0], pastedRange[1] + diff[1],\n                        Math.abs(pastedRange[2] - diff[2]), Math.abs(pastedRange[3] - diff[3])];\n                    this.parent.notify(_common_index__WEBPACK_IMPORTED_MODULE_2__.initiateFilterUI, { predicates: null, range: (0,_workbook_index__WEBPACK_IMPORTED_MODULE_1__.getRangeAddress)(diff), sIdx: null, isCut: true });\n                    if (copyInfo.range[3] === copyInfo.range[1]) { // To update sorted icon after pasting.\n                        var filteredCell = this.parent.getCell(pastedRange[0], pastedRange[1]);\n                        if (asc && filteredCell) {\n                            filteredCell.querySelector('.e-filter-icon').classList.add('e-sortasc-filter');\n                        }\n                        if (desc && filteredCell) {\n                            filteredCell.querySelector('.e-filter-icon').classList.add('e-sortdesc-filter');\n                        }\n                    }\n                }\n            }\n        }\n    };\n    Clipboard.prototype.isInRange = function (cRng, pRng, sIdx) {\n        var activeSheetIndex = this.parent.activeSheetIndex;\n        return ((0,_workbook_index__WEBPACK_IMPORTED_MODULE_1__.inRange)(cRng, pRng[0], pRng[1]) && sIdx === activeSheetIndex) ||\n            ((0,_workbook_index__WEBPACK_IMPORTED_MODULE_1__.inRange)(cRng, pRng[2], pRng[3]) && sIdx === activeSheetIndex);\n    };\n    Clipboard.prototype.setCell = function (args) {\n        var _this = this;\n        var sheet = args.sheet;\n        var uiRefresh = sheet.name === this.parent.getActiveSheet().name;\n        return function (rIdx, cIdx, cell, lastCell, isExtend, isUniqueCell, actionData, isUndo) {\n            if (cell && cell.formula && (cell.formula.indexOf('RANDBETWEEN(') > -1 || cell.formula.indexOf('RAND(') > -1 ||\n                cell.formula.indexOf('NOW(') > -1)) {\n                args.isRandFormula = true;\n            }\n            var cancel = (0,_workbook_index__WEBPACK_IMPORTED_MODULE_1__.updateCell)(_this.parent, sheet, {\n                cell: cell, rowIdx: rIdx, colIdx: cIdx, pvtExtend: !isExtend, valChange: !isUniqueCell, lastCell: lastCell,\n                uiRefresh: uiRefresh, requestType: 'paste', skipFormatCheck: !args.isExternal, isRandomFormula: args.isRandFormula\n            }, actionData, isUndo);\n            if (!cancel && cell && cell.style && args.isExternal) {\n                var hgt = (0,_common_index__WEBPACK_IMPORTED_MODULE_2__.getTextHeightWithBorder)(_this.parent, rIdx, cIdx, sheet, cell.style || _this.parent.cellStyle, cell.wrap ? (0,_common_index__WEBPACK_IMPORTED_MODULE_2__.getLines)(_this.parent.getDisplayText(cell), (0,_common_index__WEBPACK_IMPORTED_MODULE_2__.getExcludedColumnWidth)(sheet, rIdx, cIdx, cell.colSpan > 1 ? cIdx + cell.colSpan - 1 : cIdx), cell.style, _this.parent.cellStyle) : 1);\n                hgt = Math.round(hgt);\n                if (hgt < 20) {\n                    hgt = 20; // default height\n                }\n                (0,_common_index__WEBPACK_IMPORTED_MODULE_2__.setMaxHgt)(sheet, rIdx, cIdx, hgt);\n                var prevHeight = (0,_workbook_index__WEBPACK_IMPORTED_MODULE_1__.getRowsHeight)(sheet, rIdx);\n                var maxHgt = (0,_common_index__WEBPACK_IMPORTED_MODULE_2__.getMaxHgt)(sheet, rIdx);\n                var heightChanged = maxHgt > prevHeight;\n                if (heightChanged) {\n                    (0,_common_index__WEBPACK_IMPORTED_MODULE_2__.setRowEleHeight)(_this.parent, sheet, maxHgt, rIdx);\n                }\n            }\n            return cancel;\n        };\n    };\n    Clipboard.prototype.getCopiedIdx = function () {\n        if (this.copiedInfo) {\n            for (var i = 0; i < this.parent.sheets.length; i++) {\n                if (this.parent.sheets[i].id === this.copiedInfo.sId) {\n                    return i;\n                }\n            }\n            this.clearCopiedInfo();\n        }\n        return -1;\n    };\n    Clipboard.prototype.setCopiedInfo = function (args, isCut) {\n        var _this = this;\n        if (this.parent.isEdit) {\n            return;\n        }\n        var deferred = new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_3__.Deferred();\n        args.promise = deferred.promise;\n        var sheet = this.parent.getActiveSheet();\n        var range;\n        if (args && args.range) {\n            var isRowSelected = (args.range[1] === 0 && args.range[3] === sheet.colCount - 1);\n            var isColSelected = (args.range[0] === 0 && args.range[2] === sheet.rowCount - 1);\n            var mergeArgs = { range: args.range };\n            if (!(isRowSelected || isColSelected)) {\n                this.parent.notify(_workbook_index__WEBPACK_IMPORTED_MODULE_1__.mergedRange, mergeArgs);\n            }\n            range = mergeArgs.range;\n        }\n        else {\n            range = (0,_workbook_index__WEBPACK_IMPORTED_MODULE_1__.getRangeIndexes)(sheet.selectedRange);\n        }\n        if (isCut && (0,_workbook_index__WEBPACK_IMPORTED_MODULE_1__.isReadOnlyCells)(this.parent, range)) {\n            this.parent.notify(_common_index__WEBPACK_IMPORTED_MODULE_2__.readonlyAlert, null);\n            return;\n        }\n        if (args && !args.isPublic && !args.clipboardData) {\n            var eventArgs = { copiedRange: sheet.name + \"!\" + (0,_workbook_index__WEBPACK_IMPORTED_MODULE_1__.getRangeAddress)(range), cancel: false, action: isCut ? 'cut' : 'copy' };\n            this.parent.notify(_workbook_index__WEBPACK_IMPORTED_MODULE_1__.beginAction, eventArgs);\n            if (eventArgs.cancel) {\n                return;\n            }\n        }\n        var option = {\n            sheet: sheet, indexes: [0, 0, sheet.rowCount - 1, sheet.colCount - 1], isFinite: this.parent.scrollSettings.isFinite,\n            promise: new Promise(function (resolve) { resolve((function () { })()); })\n        };\n        var pictureElements = document.getElementsByClassName('e-ss-overlay-active');\n        var pictureLen = pictureElements.length;\n        if (sheet.isLocalData && !(args && args.clipboardData) && range[0] === 0 && range[2] === (sheet.rowCount - 1) && !pictureLen) {\n            this.parent.showSpinner();\n            this.parent.notify('updateSheetFromDataSource', option);\n        }\n        this.checkForUncalculatedFormula(range, (args && args.sId) ? args.sId : sheet.id);\n        option.promise.then(function () {\n            if (pictureLen > 0) {\n                var imgRowIdx = {\n                    clientY: pictureElements[0].offsetTop,\n                    isImage: true\n                };\n                _this.parent.notify(_common_index__WEBPACK_IMPORTED_MODULE_2__.getRowIdxFromClientY, imgRowIdx);\n                var imgColIdx = {\n                    clientX: pictureElements[0].offsetLeft,\n                    isImage: true\n                };\n                _this.parent.notify(_common_index__WEBPACK_IMPORTED_MODULE_2__.getColIdxFromClientX, imgColIdx);\n                _this.copiedShapeInfo = {\n                    sId: (args && args.sId) ? args.sId : sheet.id, sheetIdx: sheet.index, isCut: isCut, pictureElem: pictureElements[0], copiedRange: (0,_workbook_index__WEBPACK_IMPORTED_MODULE_1__.getRangeAddress)([imgRowIdx.clientY, imgColIdx.clientX,\n                        imgRowIdx.clientY, imgColIdx.clientX]), height: pictureElements[0].offsetHeight,\n                    width: pictureElements[0].offsetWidth,\n                    chartInfo: _this.getChartElemInfo(pictureElements[0])\n                };\n                if (!pictureElements[0].classList.contains('e-datavisualization-chart')) {\n                    var imgURL = window.getComputedStyle(pictureElements[0]).backgroundImage.slice(5, -2);\n                    _this.addImgToClipboard(imgURL, _this.copiedShapeInfo.height, _this.copiedShapeInfo.width);\n                }\n                _this.hidePaste(true);\n                if (isCut) {\n                    if (pictureElements[0].classList.contains('e-datavisualization-chart')) {\n                        _this.parent.deleteChart(_this.copiedShapeInfo.chartInfo.id);\n                    }\n                    else {\n                        _this.parent.notify(_common_index__WEBPACK_IMPORTED_MODULE_2__.deleteImage, {\n                            id: _this.copiedShapeInfo.pictureElem.id, sheetIdx: _this.copiedShapeInfo.sId,\n                            range: _this.copiedShapeInfo.copiedRange\n                        });\n                    }\n                }\n            }\n            else if (!(args && args.clipboardData)) {\n                if (_this.copiedInfo) {\n                    _this.clearCopiedInfo();\n                }\n                _this.copiedInfo = {\n                    range: range, sId: (args && args.sId) ? args.sId : sheet.id, isCut: isCut\n                };\n                _this.hidePaste(true);\n                if (!args.isFromUpdateAction) {\n                    _this.initCopyIndicator();\n                }\n                if (!_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isIE) {\n                    _this.getClipboardEle().select();\n                }\n                if (args && args.invokeCopy) {\n                    document.execCommand(isCut ? 'cut' : 'copy');\n                }\n                _this.parent.hideSpinner();\n            }\n            if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isIE) {\n                _this.setExternalCells(args, isCut);\n            }\n            deferred.resolve();\n        });\n        if (args && args.clipboardData) {\n            this.setExternalCells(args, isCut);\n            this.getClipboardEle().setAttribute('aria-label', sheet.selectedRange + \" \" + this.parent.serviceLocator.getService(_common_index__WEBPACK_IMPORTED_MODULE_2__.locale).getConstant(isCut ? 'Cut' : 'Copy'));\n        }\n    };\n    Clipboard.prototype.imageToCanvas = function (src, height, width) {\n        return new Promise(function (res) {\n            var canvas = document.createElement('canvas');\n            var canvasCtx = canvas.getContext('2d');\n            var img = new Image();\n            img.src = src;\n            img.crossOrigin = 'anonymous';\n            img.onload = function () {\n                canvas.width = width;\n                canvas.height = height;\n                canvasCtx.drawImage(img, 0, 0, width, height);\n                canvas.toBlob(function (blob) {\n                    res(blob);\n                }, 'image/png');\n            };\n        });\n    };\n    Clipboard.prototype.addImgToClipboard = function (src, height, width) {\n        return __awaiter(this, void 0, void 0, function () {\n            var _a, navigator, imageBlob;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        navigator = window.navigator;\n                        return [4 /*yield*/, this.imageToCanvas(src, height, width)];\n                    case 1:\n                        imageBlob = _b.sent();\n                        return [4 /*yield*/, navigator.clipboard.write([new ClipboardItem((_a = {}, _a[imageBlob.type] = imageBlob, _a))])];\n                    case 2:\n                        _b.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    Clipboard.prototype.checkForUncalculatedFormula = function (range, sheetId) {\n        var cell;\n        var sheetIdx = (0,_workbook_index__WEBPACK_IMPORTED_MODULE_1__.getSheetIndexFromId)(this.parent, sheetId);\n        var sheet = (0,_workbook_index__WEBPACK_IMPORTED_MODULE_1__.getSheet)(this.parent, sheetIdx);\n        for (var i = range[0]; i <= range[2]; i++) {\n            for (var j = range[1]; j <= range[3]; j++) {\n                cell = (0,_workbook_index__WEBPACK_IMPORTED_MODULE_1__.getCell)(i, j, sheet, null, true);\n                if (cell.formula && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isUndefined)(cell.value)) {\n                    this.parent.notify(_workbook_index__WEBPACK_IMPORTED_MODULE_1__.workbookFormulaOperation, {\n                        action: 'refreshCalculate', value: cell.formula, rowIndex: i, colIndex: j, isFormula: (0,_workbook_index__WEBPACK_IMPORTED_MODULE_1__.checkIsFormula)(cell.formula), sheetIndex: sheetIdx\n                    });\n                }\n            }\n        }\n    };\n    Clipboard.prototype.getChartElemInfo = function (overlayEle) {\n        var chartColl = this.parent.chartColl;\n        if (overlayEle.classList.contains('e-datavisualization-chart')) {\n            var chartId = overlayEle.getElementsByClassName('e-control')[0].id;\n            for (var idx = 0; idx < chartColl.length; idx++) {\n                if (chartColl[idx].id === chartId) {\n                    var chart = chartColl[idx];\n                    return chart;\n                }\n            }\n        }\n        return null;\n    };\n    Clipboard.prototype.clearCopiedInfo = function () {\n        if (this.copiedInfo) {\n            if (this.parent.getActiveSheet().id === this.copiedInfo.sId) {\n                this.removeIndicator(this.parent.getSelectAllContent());\n                this.removeIndicator(this.parent.getColumnHeaderContent());\n                this.removeIndicator(this.parent.getRowHeaderContent());\n                this.removeIndicator(this.parent.getMainContent());\n            }\n            this.copiedInfo = null;\n            this.hidePaste();\n        }\n        if (this.copiedShapeInfo) {\n            this.copiedShapeInfo = null;\n            this.hidePaste();\n        }\n    };\n    Clipboard.prototype.removeIndicator = function (ele) {\n        if (ele) {\n            var indicator = ele.getElementsByClassName('e-copy-indicator')[0];\n            if (indicator) {\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)(indicator);\n            }\n        }\n    };\n    Clipboard.prototype.initCopyIndicator = function () {\n        if (this.copiedInfo && this.parent.getActiveSheet().id === this.copiedInfo.sId) {\n            var copyIndicator = this.parent.createElement('div', { className: 'e-copy-indicator' });\n            copyIndicator.appendChild(this.parent.createElement('div', { className: 'e-top' }));\n            copyIndicator.appendChild(this.parent.createElement('div', { className: 'e-bottom' }));\n            copyIndicator.appendChild(this.parent.createElement('div', { className: 'e-left' }));\n            copyIndicator.appendChild(this.parent.createElement('div', { className: 'e-right' }));\n            (0,_common_index__WEBPACK_IMPORTED_MODULE_2__.setPosition)(this.parent, copyIndicator, this.copiedInfo.range, 'e-copy-indicator');\n        }\n    };\n    Clipboard.prototype.showDialog = function () {\n        var _this = this;\n        this.parent.serviceLocator.getService(_common_index__WEBPACK_IMPORTED_MODULE_2__.dialog).show({\n            header: 'Spreadsheet',\n            height: 205, width: 340, isModal: true, showCloseIcon: true,\n            content: this.parent.serviceLocator.getService(_common_index__WEBPACK_IMPORTED_MODULE_2__.locale).getConstant('PasteAlert'),\n            beforeOpen: function (args) {\n                var dlgArgs = {\n                    dialogName: 'PasteDialog',\n                    element: args.element, target: args.target, cancel: args.cancel\n                };\n                _this.parent.trigger('dialogBeforeOpen', dlgArgs);\n                if (dlgArgs.cancel) {\n                    args.cancel = true;\n                }\n            }\n        });\n    };\n    Clipboard.prototype.hidePaste = function (isShow) {\n        if (this.parent.getActiveSheet().isProtected) {\n            isShow = false;\n        }\n        this.parent.notify(_common_index__WEBPACK_IMPORTED_MODULE_2__.enableToolbarItems, [{ items: [this.parent.element.id + '_paste'], enable: isShow || false }]);\n    };\n    Clipboard.prototype.setExternalCells = function (args, isCut) {\n        var cell;\n        var val;\n        var text = '';\n        var cellStyle;\n        var sheet = this.parent.getActiveSheet();\n        var range = (0,_workbook_index__WEBPACK_IMPORTED_MODULE_1__.getSwapRange)(this.copiedInfo.range);\n        var isRowSelected = range[1] === 0 && range[3] === sheet.colCount - 1;\n        var isColSelected = range[0] === 0 && range[2] === sheet.rowCount - 1;\n        var data = '<html><body><table class=\"e-spreadsheet\" xmlns=\"http://www.w3.org/1999/xhtml\" style=\"border-collapse:collapse;\"';\n        if (isRowSelected || isColSelected) {\n            data += \" aria-rowcount=\\\"\" + sheet.usedRange.rowIndex + \"\\\" aria-colcount=\\\"\" + sheet.usedRange.colIndex + \"\\\"\";\n            data += \" aria-label=\\\"\" + (isRowSelected && isColSelected ? 'Sheet' : isRowSelected ? 'Row' : 'Column') + \"\\\"\";\n        }\n        data += '><tbody>';\n        for (var i = range[0]; i <= range[2]; i++) {\n            if (!isCut && (0,_workbook_index__WEBPACK_IMPORTED_MODULE_1__.isFilterHidden)(sheet, i)) {\n                continue;\n            }\n            data += '<tr>';\n            for (var j = range[1]; j <= range[3]; j++) {\n                cell = (0,_workbook_index__WEBPACK_IMPORTED_MODULE_1__.getCell)(i, j, sheet, false, true);\n                if (cell.colSpan < 0 || cell.rowSpan < 0) {\n                    continue;\n                }\n                data += '<td';\n                if (cell.colSpan) {\n                    data += ' colspan=\"' + cell.colSpan + '\"';\n                }\n                if (cell.rowSpan) {\n                    data += ' rowspan=\"' + cell.rowSpan + '\"';\n                }\n                if (cell.style) {\n                    cellStyle = '';\n                    if (!cell.style['whiteSpace']) {\n                        cellStyle += 'white-space:' + (cell.wrap ? 'normal' : 'nowrap') + ';';\n                    }\n                    if (!cell.style.verticalAlign) {\n                        cellStyle += 'vertical-align:bottom;';\n                    }\n                    Object.keys(cell.style).forEach(function (style) {\n                        var cellStyleValue = cell.style[\"\" + style];\n                        if (style.includes('border') && cellStyleValue.includes('dashed') && cellStyleValue.includes('1px')) {\n                            cellStyleValue = cellStyleValue.replace('1px', 'thin');\n                        }\n                        var regex = style.match(/[A-Z]/);\n                        cellStyle += (style === 'backgroundColor' ? 'background' : (regex ? style.replace(regex[0], '-'\n                            + regex[0].toLowerCase()) : style)) + ':' + ((style === 'backgroundColor' || style === 'color')\n                            ? cell.style[\"\" + style].slice(0, 7) : cellStyleValue) + ';';\n                    });\n                    data += cellStyle.includes('\"') ? \" style='\" + cellStyle + \"'\" : \" style=\\\"\" + cellStyle + \"\\\"\";\n                }\n                else {\n                    data += ' style=\"white-space:' + (cell.wrap ? 'normal' : 'nowrap') + ';vertical-align:bottom;\"';\n                }\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(cell.value)) {\n                    val = cell.value;\n                    if (cell.format && cell.format !== 'General') {\n                        data += cell.value.toString().includes('\"') ? ' cell-value=\\'' + val + '\\'' : ' cell-value=\"' + cell.value + '\"';\n                        data += cell.format.includes('\"') ? ' num-format=\\'' + cell.format + '\\'' : ' num-format=\"' + cell.format + '\"';\n                        var eventArgs = { formattedText: val, value: val, format: cell.format, cell: cell, rowIndex: i,\n                            colIndex: j, dataUpdate: true };\n                        this.parent.notify(_workbook_index__WEBPACK_IMPORTED_MODULE_1__.getFormattedCellObject, eventArgs);\n                        val = eventArgs.formattedText;\n                    }\n                    data += '>';\n                    if (typeof val === 'string' && val.includes('\\n')) {\n                        data += val.split('\\n').join('<br>');\n                    }\n                    else {\n                        data += val;\n                    }\n                    text += val;\n                    data += '</td>';\n                }\n                else {\n                    data += '></td>';\n                }\n                text += j === range[3] ? '' : '\\t';\n            }\n            data += '</tr>';\n            text += i === range[2] ? '' : '\\n';\n        }\n        data += '</tbody></table></body></html>';\n        if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isIE) {\n            window['clipboardData'].setData('text', text);\n            if (isCut) {\n                window['clipboardData'].setData('isInternalCut', text);\n            }\n        }\n        else {\n            args.clipboardData.setData('text/html', data);\n            args.clipboardData.setData('text/plain', text);\n            if (isCut) {\n                args.clipboardData.setData('isInternalCut', text);\n            }\n            args.preventDefault();\n        }\n    };\n    Clipboard.prototype.getExternalCells = function (args) {\n        var _this = this;\n        var html;\n        var text;\n        var rows = [];\n        var pasteModelArgs = { model: rows };\n        var ele = this.parent.createElement('span');\n        var clearClipboard = function () { return setTimeout(function () { _this.getClipboardEle().innerHTML = ''; }, 0); };\n        if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isIE) {\n            text = window['clipboardData'].getData('text');\n        }\n        else {\n            html = args.clipboardData.getData('text/html');\n            text = args.clipboardData.getData('text/plain');\n            if (this.copiedInfo && html.includes('<table class=\"e-spreadsheet\"')) {\n                var isFilteredRange = false;\n                if (!this.copiedInfo.isCut) {\n                    var filterArgs = { sheetIdx: (0,_workbook_index__WEBPACK_IMPORTED_MODULE_1__.getSheetIndexFromId)(this.parent, this.copiedInfo.sId) };\n                    this.parent.notify(_common_index__WEBPACK_IMPORTED_MODULE_2__.getFilterRange, filterArgs);\n                    if (filterArgs.isFiltered) {\n                        var indexes = filterArgs.filterRange;\n                        var copyIndexes = this.copiedInfo.range;\n                        isFilteredRange = indexes[0] === copyIndexes[0] && indexes[1] === copyIndexes[1] && indexes[2] === copyIndexes[2] &&\n                            indexes[3] === copyIndexes[3];\n                    }\n                }\n                if (!isFilteredRange) {\n                    clearClipboard();\n                    return { internal: true };\n                }\n            }\n            ele.innerHTML = html;\n        }\n        if (ele.querySelector('table')) {\n            this.generateCells(ele, pasteModelArgs);\n        }\n        else if (ele.querySelector('img')) {\n            var img = ele.querySelector('img');\n            this.parent.notify(_common_index__WEBPACK_IMPORTED_MODULE_2__.createImageElement, { options: { src: img.src, height: img.height, width: img.width }, isPublic: true });\n        }\n        else if (text) {\n            var cells_1 = [];\n            var cellStyle_1;\n            var childArr_1;\n            var filteredChild_1;\n            if (html) {\n                childArr_1 = [].slice.call(ele.children);\n            }\n            var getStyle_1 = this.cellStyle(ele);\n            pasteModelArgs.colCount = 1;\n            text.split('\\n').forEach(function (row) {\n                cellStyle_1 = null;\n                if (html) {\n                    filteredChild_1 = childArr_1.filter(function (elem) { return elem.textContent && elem.textContent.replace(/(\\r\\n|\\n|\\r|\\s)/gm, ' ').trim() === row.trim(); })[0];\n                    if (filteredChild_1) {\n                        cellStyle_1 = getStyle_1(filteredChild_1);\n                        childArr_1.splice(childArr_1.indexOf(filteredChild_1), 1);\n                    }\n                }\n                row.split('\\t').forEach(function (col, j) {\n                    if (col || cellStyle_1) {\n                        cells_1[j] = {};\n                        if (cellStyle_1) {\n                            if (cellStyle_1.whiteSpace &&\n                                cellStyle_1.whiteSpace !== 'nowrap') {\n                                cells_1[j].wrap = true;\n                                delete cellStyle_1['whiteSpace'];\n                                if (Object.keys(cellStyle_1).length) {\n                                    cells_1[j].style = cellStyle_1;\n                                }\n                            }\n                            else {\n                                cells_1[j].style = cellStyle_1;\n                            }\n                        }\n                        if (col) {\n                            if ((0,_workbook_index__WEBPACK_IMPORTED_MODULE_1__.checkIsFormula)(col)) {\n                                cells_1[j].formula = col;\n                            }\n                            else {\n                                cells_1[j].value = (0,_workbook_index__WEBPACK_IMPORTED_MODULE_1__.parseIntValue)(col.trim(), true, true);\n                            }\n                        }\n                    }\n                });\n                rows.push({ cells: cells_1 });\n                pasteModelArgs.colCount = Math.max(pasteModelArgs.colCount, cells_1.length);\n                cells_1 = [];\n            });\n            pasteModelArgs.rowCount = rows.length;\n            pasteModelArgs.usedRowIndex = rows.length - 1;\n            pasteModelArgs.usedColIndex = pasteModelArgs.colCount - 1;\n        }\n        else if (args.clipboardData.files && args.clipboardData.files[0] && args.clipboardData.files[0].type.includes('image')) {\n            clearClipboard();\n            return { file: args.clipboardData.files[0] };\n        }\n        clearClipboard();\n        return pasteModelArgs;\n    };\n    Clipboard.prototype.generateCells = function (ele, pasteModelArgs) {\n        var rows = pasteModelArgs.model;\n        var table = ele.querySelector('table');\n        var isSpreadsheet = table.classList.contains('e-spreadsheet');\n        var tableStyleObj = {};\n        var rowStyleObj = {};\n        pasteModelArgs.usedRowIndex = table.rows.length - 1;\n        pasteModelArgs.rowCount = table.rows.length;\n        if (isSpreadsheet) {\n            pasteModelArgs.selection = table.getAttribute('aria-label');\n            if (pasteModelArgs.selection) {\n                if (pasteModelArgs.selection === 'Sheet') {\n                    pasteModelArgs.usedRowIndex = Number(table.getAttribute('aria-rowcount'));\n                    pasteModelArgs.usedColIndex = Number(table.getAttribute('aria-colcount'));\n                }\n                else if (pasteModelArgs.selection === 'Row') {\n                    pasteModelArgs.usedColIndex = Number(table.getAttribute('aria-colcount'));\n                }\n                else {\n                    pasteModelArgs.usedRowIndex = Number(table.getAttribute('aria-rowcount'));\n                }\n            }\n        }\n        var tableStyles = [];\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(table)) {\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(table.getAttribute('style'))) {\n                tableStyles.push(table.getAttribute('style'));\n                this.generateStyles(tableStyles, tableStyleObj);\n            }\n        }\n        var getStyle = this.cellStyle(ele, isSpreadsheet);\n        var tr;\n        var cells;\n        var cellStyle;\n        var td;\n        var cellCount = 1;\n        var colLen;\n        var formatStr;\n        var curColIdx;\n        pasteModelArgs.colCount = 1;\n        var rowStyles = [];\n        for (var rowIdx = 0, rowLen = pasteModelArgs.usedRowIndex; rowIdx <= rowLen; rowIdx++) {\n            tr = table.rows[rowIdx];\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(tr.getAttribute('style'))) {\n                rowStyles.push(tr.getAttribute('style'));\n                this.generateStyles(rowStyles, rowStyleObj);\n            }\n            if (!rows[rowIdx]) {\n                rows[rowIdx] = { cells: [] };\n            }\n            cells = rows[rowIdx].cells;\n            pasteModelArgs.colCount = Math.max(pasteModelArgs.colCount, tr.cells.length);\n            colLen = pasteModelArgs.usedColIndex < tr.cells.length ? pasteModelArgs.usedColIndex : tr.cells.length - 1;\n            for (var colIdx = 0; colIdx <= colLen; colIdx++) {\n                td = tr.cells[colIdx];\n                curColIdx = colIdx;\n                if (cells[colIdx]) {\n                    colIdx = this.getNewIndex(cells, colIdx);\n                }\n                cells[colIdx] = {};\n                cellStyle = getStyle(td, rowStyleObj, tableStyleObj);\n                td.textContent = td.textContent.replace(/(\\r\\n|\\n|\\r)/gm, '');\n                td.textContent = td.textContent.replace(/\\s+/g, ' ');\n                if (cellStyle.whiteSpace &&\n                    cellStyle.whiteSpace !== 'nowrap') {\n                    cells[colIdx].wrap = true;\n                    delete cellStyle['whiteSpace'];\n                }\n                if (Object.keys(cellStyle).length) {\n                    if (cellStyle.border) {\n                        ['borderBottom', 'borderTop', 'borderLeft', 'borderRight'].forEach(function (prop) {\n                            cellStyle[\"\" + prop] = cellStyle.border;\n                        });\n                        delete cellStyle.border;\n                    }\n                    cells[colIdx].style = cellStyle;\n                }\n                if (td.textContent) {\n                    cells[colIdx].value = (0,_workbook_index__WEBPACK_IMPORTED_MODULE_1__.parseIntValue)(td.textContent.trim(), true, true);\n                }\n                formatStr = isSpreadsheet ? 'num-format' : 'number-format';\n                if (td.getAttribute(formatStr)) {\n                    cells[colIdx].format = td.getAttribute(formatStr);\n                    if (cells[colIdx].value && td.getAttribute('cell-value')) {\n                        cells[colIdx].value = (0,_workbook_index__WEBPACK_IMPORTED_MODULE_1__.parseIntValue)(td.getAttribute('cell-value').trim(), true, true);\n                    }\n                }\n                if (td.getAttribute('colspan') && parseInt(td.getAttribute('colspan'), 10) > 1) {\n                    cells[colIdx].colSpan = parseInt(td.getAttribute('colspan'), 10);\n                }\n                if (td.getAttribute('rowspan') && parseInt(td.getAttribute('rowspan'), 10) > 1) {\n                    cells[colIdx].rowSpan = parseInt(td.getAttribute('rowspan'), 10);\n                }\n                if (cells[colIdx].colSpan > 1 && cells[colIdx].rowSpan > 1) {\n                    var cell = void 0;\n                    for (var k = rowIdx, len = rowIdx + cells[colIdx].rowSpan; k < len; k++) {\n                        for (var l = colIdx, len_1 = colIdx + cells[colIdx].colSpan; l < len_1; l++) {\n                            if (k === rowIdx && l === colIdx) {\n                                continue;\n                            }\n                            cell = cells[colIdx].style ? { style: (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)({}, cells[colIdx].style) } : {};\n                            if (k !== rowIdx) {\n                                cell.rowSpan = rowIdx - k;\n                            }\n                            if (l !== colIdx) {\n                                cell.colSpan = colIdx - l;\n                            }\n                            if (!rows[k]) {\n                                rows[k] = { cells: [] };\n                            }\n                            rows[k].cells[l] = cell;\n                        }\n                    }\n                }\n                else if (cells[colIdx].colSpan > 1) {\n                    for (var k = colIdx + 1, len = colIdx + cells[colIdx].colSpan; k < len; k++) {\n                        cells[k] = { colSpan: colIdx - k, style: (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)({}, cellStyle) };\n                    }\n                }\n                else if (cells[colIdx].rowSpan > 1) {\n                    for (var k = rowIdx + 1, len = rowIdx + cells[colIdx].rowSpan; k < len; k++) {\n                        if (!rows[k]) {\n                            rows[k] = { cells: [] };\n                        }\n                        rows[k].cells[colIdx] = { rowSpan: rowIdx - k, style: (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)({}, cellStyle) };\n                    }\n                }\n                colIdx = curColIdx;\n            }\n            cellCount = Math.max(cellCount, cells.length);\n        }\n        pasteModelArgs.usedColIndex = cellCount - 1;\n    };\n    Clipboard.prototype.getNewIndex = function (cells, index) {\n        if (cells[index]) {\n            index++;\n            index = this.getNewIndex(cells, index);\n        }\n        return index;\n    };\n    Clipboard.prototype.cellStyle = function (ele, isSpreadsheet) {\n        var _this = this;\n        var eleStyle;\n        var commonStyle;\n        if (!isSpreadsheet) {\n            eleStyle = ele.querySelector('style') && ele.querySelector('style').innerHTML;\n            var keys = Object.keys(this.parent.commonCellStyle);\n            if (keys && keys.length && eleStyle) {\n                var tdStyle = eleStyle.includes('td') ? eleStyle.split('td')[1] : eleStyle;\n                tdStyle = tdStyle.includes('{') ? tdStyle.split('{')[1].split('}')[0] : tdStyle.split('}')[0];\n                commonStyle = {};\n                for (var i = 0; i < keys.length; i++) {\n                    var key = keys[i];\n                    var regex = key.match(/[A-Z]/);\n                    if (regex) {\n                        key = key.replace(regex[0], '-' + regex[0].toLowerCase());\n                    }\n                    if (tdStyle.indexOf(key) > -1) {\n                        commonStyle[keys[i]] = tdStyle.split(key + ':')[1].split(';')[0].trim();\n                    }\n                }\n            }\n        }\n        return function (td, rowStyleObj, tableStyleObj) {\n            var cellStyle = {};\n            var styles;\n            if (isSpreadsheet) {\n                if (td.getAttribute('style')) {\n                    styles = td.getAttribute('style').split(';');\n                }\n                else {\n                    return cellStyle;\n                }\n            }\n            else {\n                styles = [];\n                if (eleStyle && td.className && eleStyle.includes(td.classList[0])) {\n                    var styleTagCSS = eleStyle.split(td.classList[0]);\n                    styles.push(styleTagCSS[styleTagCSS.length - 1].split('{')[1].split('}')[0]);\n                }\n                var nodeList = [].slice.call(td.querySelectorAll('*'));\n                nodeList.unshift(td);\n                nodeList.forEach(function (node) {\n                    if (node.getAttribute('style')) {\n                        styles.push(node.getAttribute('style'));\n                    }\n                    if (node.tagName === 'B') {\n                        styles.push('font-weight:bold');\n                    }\n                    if (node.tagName === 'I') {\n                        styles.push('font-style:italic');\n                    }\n                    if (node.tagName === 'U') {\n                        styles.push('text-decoration:underline');\n                    }\n                });\n                Object.assign(cellStyle, tableStyleObj, rowStyleObj, commonStyle);\n            }\n            if (styles.length) {\n                _this.generateStyles(styles, cellStyle);\n            }\n            if (td.querySelector('S')) {\n                cellStyle.textDecoration = cellStyle.textDecoration ? 'underline line-through' : 'line-through';\n            }\n            if (cellStyle.textDecoration &&\n                ['underline', 'line-through', 'underline line-through', 'none'].indexOf(cellStyle.textDecoration) === -1) {\n                cellStyle.textDecoration = 'none';\n            }\n            if (cellStyle.textAlign && ['left', 'center', 'right'].indexOf(cellStyle.textAlign) === -1) {\n                cellStyle.textAlign = 'left';\n            }\n            if (cellStyle.verticalAlign && ['bottom', 'middle', 'top'].indexOf(cellStyle.verticalAlign) === -1) {\n                cellStyle.verticalAlign = 'bottom';\n            }\n            if (cellStyle.fontSize) {\n                cellStyle.fontSize = Math.round(parseFloat((cellStyle.fontSize.indexOf('px') > -1) ? (parseFloat(cellStyle.fontSize) * 0.75).toString() :\n                    ((cellStyle.fontSize.indexOf('em') > -1) ? (parseFloat(cellStyle.fontSize) * 16 / 1.3333).toString() : cellStyle.fontSize))) + 'pt';\n            }\n            if (cellStyle.fontWeight && ['bold', 'normal'].indexOf(cellStyle.fontWeight) === -1) {\n                cellStyle.fontWeight = cellStyle.fontWeight > '599' ? 'bold' : 'normal';\n            }\n            return cellStyle;\n        };\n    };\n    Clipboard.prototype.generateStyles = function (styles, styleObj) {\n        var index;\n        var value;\n        var splitValue;\n        var splitBorder;\n        var borderSize;\n        // `styleAttr` holds the `CSS` property and `styleValue` holds its corresponding `JS` property in same order, common for border.\n        var styleAttr = ['font-family', 'vertical-align', 'text-align', 'text-indent', 'color', 'white-space',\n            'font-weight', 'font-style', 'font-size', 'text-decoration', 'background', 'background-color'];\n        var styleValue = ['fontFamily', 'verticalAlign', 'textAlign', 'textIndent', 'color', 'whiteSpace', 'fontWeight',\n            'fontStyle', 'fontSize', 'textDecoration', 'backgroundColor', 'backgroundColor'];\n        var borderAttr = ['border-bottom', 'border-top', 'border-right', 'border-left', 'border'];\n        var borderValue = ['borderBottom', 'borderTop', 'borderRight', 'borderLeft', 'border'];\n        if (styles && styles.length) {\n            styles.forEach(function (styles) {\n                styles.split(';').forEach(function (style) {\n                    value = style.split(':')[0].trim();\n                    index = styleAttr.indexOf(value);\n                    if (index > -1) {\n                        value = style.split(':')[1].trim();\n                        styleObj[styleValue[index]] = value;\n                    }\n                    else {\n                        index = borderAttr.indexOf(value);\n                        if (index > -1) {\n                            value = style.split(':')[1].trim();\n                            if (value === 'none') {\n                                value = undefined;\n                            }\n                            else if (value.includes('pt')) {\n                                splitValue = value.split('pt');\n                                splitBorder = splitValue[0].split(' ');\n                                for (var i = 0; i < splitBorder.length; i++) {\n                                    borderSize = parseFloat(splitBorder[i]);\n                                    if (borderSize) {\n                                        splitBorder.splice(i, 1);\n                                        splitBorder.unshift((borderSize / 0.75).toFixed(2) + 'px');\n                                        splitValue[0] = splitBorder.join(' ');\n                                        break;\n                                    }\n                                }\n                                value = splitValue.join('');\n                            }\n                            styleObj[borderValue[index]] = value;\n                        }\n                    }\n                });\n            });\n        }\n    };\n    Clipboard.prototype.refreshOnInsertDelete = function (args) {\n        if (this.copiedInfo) {\n            if (args.model.id !== this.copiedInfo.sId) {\n                return;\n            }\n            var range = this.copiedInfo.range;\n            if (args.isInsert) {\n                if (args.modelType === 'Column') {\n                    if (args.start <= range[3]) {\n                        if (args.start <= range[1]) {\n                            var len = args.end - args.start + 1;\n                            range[1] += len;\n                            range[3] += len;\n                        }\n                        else {\n                            range[3] = range[1] + (args.start - range[1] - 1);\n                        }\n                        this.performAction();\n                    }\n                }\n                else {\n                    if (args.start <= range[2]) {\n                        if (args.start <= range[0]) {\n                            var len = args.end - args.start + 1;\n                            range[0] += len;\n                            range[2] += len;\n                        }\n                        else {\n                            range[2] = range[1] + (args.start - range[1] - 1);\n                        }\n                        this.performAction();\n                    }\n                }\n            }\n            else {\n                this.clearCopiedInfo();\n            }\n        }\n    };\n    Clipboard.prototype.performAction = function () {\n        var copyIndicator = this.getCopyIndicator();\n        if (copyIndicator) {\n            (0,_common_index__WEBPACK_IMPORTED_MODULE_2__.setPosition)(this.parent, copyIndicator, this.copiedInfo.range, 'e-copy-indicator');\n        }\n    };\n    Clipboard.prototype.getClipboardEle = function () {\n        return this.parent.element.getElementsByClassName('e-clipboard')[0];\n    };\n    Clipboard.prototype.getCopyIndicator = function () {\n        return this.parent.element.getElementsByClassName('e-copy-indicator')[0];\n    };\n    Clipboard.prototype.getModuleName = function () {\n        return 'clipboard';\n    };\n    Clipboard.prototype.destroy = function () {\n        this.removeEventListener();\n        var ele = this.getClipboardEle();\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)(ele);\n        this.parent = null;\n    };\n    return Clipboard;\n}());\n\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-spreadsheet/src/spreadsheet/actions/clipboard.js?");

/***/ })

}]);