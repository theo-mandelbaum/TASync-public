"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkej2_vue_samples"] = self["webpackChunkej2_vue_samples"] || []).push([["chunk-vendors-node_modules_syncfusion_ej2-ribbon_src_ribbon_modules_ribbon-keytip_js-383cc050"],{

/***/ "./node_modules/@syncfusion/ej2-ribbon/src/ribbon/modules/ribbon-keytip.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-ribbon/src/ribbon/modules/ribbon-keytip.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RibbonKeyTip: () => (/* binding */ RibbonKeyTip)\n/* harmony export */ });\n/* harmony import */ var _base_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../base/utils */ \"./node_modules/@syncfusion/ej2-ribbon/src/ribbon/base/utils.js\");\n/* harmony import */ var _base_index__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../base/index */ \"./node_modules/@syncfusion/ej2-ribbon/src/ribbon/base/index.js\");\n/* harmony import */ var _base_constant__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../base/constant */ \"./node_modules/@syncfusion/ej2-ribbon/src/ribbon/base/constant.js\");\n/* harmony import */ var _syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @syncfusion/ej2-popups */ \"./node_modules/@syncfusion/ej2-popups/index.js\");\n/* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @syncfusion/ej2-base */ \"./node_modules/@syncfusion/ej2-base/index.js\");\n/* harmony import */ var _syncfusion_ej2_splitbuttons__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @syncfusion/ej2-splitbuttons */ \"./node_modules/@syncfusion/ej2-splitbuttons/index.js\");\n\n\n\n\n\n\n/**\n * Defines the keytip of Ribbon.\n */\nvar RibbonKeyTip = /** @class */ (function () {\n    function RibbonKeyTip(parent) {\n        this.isKeytipPopupOpen = false;\n        this.parent = parent;\n    }\n    RibbonKeyTip.prototype.getModuleName = function () {\n        return 'ribbonKeyTip';\n    };\n    RibbonKeyTip.prototype.destroy = function () {\n        this.parent = null;\n    };\n    /**\n     * Creates the keytips.\n     *\n     * @param {string} key - get's the keytip type.\n     * @returns {void}\n     * @hidden\n     */\n    RibbonKeyTip.prototype.createKeytip = function (key) {\n        if (this.parent.keyTipElements) {\n            var keytipData = void 0;\n            if (key === 'tab') {\n                for (var i = 0; i < this.parent.tabs.length; i++) {\n                    if (this.parent.keyTipElements[parseInt(i.toString(), 10)]) {\n                        keytipData = this.parent.keyTipElements[parseInt(i.toString(), 10)][\"\" + key];\n                        this.createKeyTipElement((keytipData[0].id), keytipData[0].keyTip, 'tab', 'center', 'bottom', true);\n                    }\n                }\n                if (this.parent.keyTipElements['filemenu']) {\n                    keytipData = this.parent.keyTipElements['filemenu'];\n                    this.createKeyTipElement((keytipData[0].id), keytipData[0].keyTip, 'filemenu');\n                }\n                if (this.parent.keyTipElements['backstage']) {\n                    keytipData = this.parent.keyTipElements['backstage'];\n                    this.createKeyTipElement((keytipData[0].id), keytipData[0].keyTip, 'backstage');\n                }\n                if (this.parent.keyTipElements['collapse']) {\n                    keytipData = this.parent.keyTipElements['collapse'];\n                    this.createKeyTipElement((keytipData[0].id), keytipData[0].keyTip, 'collapse');\n                }\n                if (this.parent.keyTipElements['taboverflow']) {\n                    keytipData = this.parent.keyTipElements['taboverflow'];\n                    this.createKeyTipElement((keytipData[0].id), keytipData[0].keyTip, 'taboverflow');\n                }\n            }\n            else if (key === 'popupitem') {\n                if (this.parent.keyTipElements[this.parent.selectedTab]['popupitem']) {\n                    var popupKeyTipData = this.parent.keyTipElements[this.parent.selectedTab]['popupitem'];\n                    for (var i = 0; i < Object.keys(this.parent.keyTipElements[this.parent.selectedTab]['popupitem']).length; i++) {\n                        this.createKeyTipElement((popupKeyTipData[parseInt(i.toString(), 10)].id), popupKeyTipData[parseInt(i.toString(), 10)].keyTip, 'popupitem', 'left', 'top', false, true);\n                    }\n                }\n            }\n            else if (key === 'backstageMenu') {\n                if (this.parent.keyTipElements['backstageMenu']) {\n                    var backstageKeyTipData = this.parent.keyTipElements['backstageMenu'];\n                    for (var i = 0; i < Object.keys(this.parent.keyTipElements['backstageMenu']).length; i++) {\n                        this.createKeyTipElement((backstageKeyTipData[parseInt(i.toString(), 10)].id), backstageKeyTipData[parseInt(i.toString(), 10)].keyTip, 'backstageMenu', 'left', 'center');\n                    }\n                }\n            }\n            else if (key === 'grpoverflowpopup' && this.parent.activeLayout === 'Classic') {\n                if (this.parent.keyTipElements[this.parent.selectedTab]['grpoverflowpopup']) {\n                    this.calculateItemPosition(key);\n                }\n                if (this.parent.keyTipElements[this.parent.selectedTab]['launcher']) {\n                    for (var i = 0; i < Object.keys(this.parent.keyTipElements[this.parent.selectedTab]['launcher']).length; i++) {\n                        keytipData = this.parent.keyTipElements[this.parent.selectedTab]['launcher'];\n                        this.createKeyTipElement((keytipData[parseInt(i.toString(), 10)].id), keytipData[parseInt(i.toString(), 10)].keyTip, 'launcher', 'center', 'bottom', false, true);\n                    }\n                }\n            }\n            else {\n                this.calculateItemPosition(key);\n                if (this.parent.activeLayout === 'Classic') {\n                    if (this.parent.keyTipElements[this.parent.selectedTab]['launcher']) {\n                        for (var i = 0; i < Object.keys(this.parent.keyTipElements[this.parent.selectedTab]['launcher']).length; i++) {\n                            keytipData = this.parent.keyTipElements[this.parent.selectedTab]['launcher'];\n                            this.createKeyTipElement((keytipData[parseInt(i.toString(), 10)].id), keytipData[parseInt(i.toString(), 10)].keyTip, 'launcher');\n                        }\n                    }\n                    if (this.parent.keyTipElements[this.parent.selectedTab]['grpoverflow']) {\n                        for (var i = 0; i < Object.keys(this.parent.keyTipElements[this.parent.selectedTab]['grpoverflow']).length; i++) {\n                            keytipData = this.parent.keyTipElements[this.parent.selectedTab]['grpoverflow'];\n                            this.createKeyTipElement((keytipData[parseInt(i.toString(), 10)].id), keytipData[parseInt(i.toString(), 10)].keyTip, 'grpoverflow');\n                        }\n                    }\n                }\n                if (this.parent.activeLayout === 'Simplified') {\n                    if (this.parent.keyTipElements['overflowbtn']) {\n                        keytipData = this.parent.keyTipElements['overflowbtn'];\n                        this.createKeyTipElement((keytipData[0].id), keytipData[0].keyTip, 'overflowbtn');\n                    }\n                    if (this.parent.keyTipElements[this.parent.selectedTab]['grpofbtn']) {\n                        for (var i = 0; i < Object.keys(this.parent.keyTipElements[this.parent.selectedTab]['grpofbtn']).length; i++) {\n                            keytipData = this.parent.keyTipElements[this.parent.selectedTab]['grpofbtn'];\n                            this.createKeyTipElement((keytipData[parseInt(i.toString(), 10)].id), keytipData[parseInt(i.toString(), 10)].keyTip, 'grpofbtn');\n                        }\n                    }\n                }\n            }\n        }\n    };\n    RibbonKeyTip.prototype.calculateItemPosition = function (key, isMethod, keyTip) {\n        if (isMethod === void 0) { isMethod = false; }\n        var xOffset;\n        var yOffset;\n        var keytipData = this.parent.keyTipElements[parseInt(this.parent.selectedTab.toString(), 10)][\"\" + key];\n        if (keytipData) {\n            for (var i = 0; i < Object.keys(this.parent.keyTipElements[parseInt(this.parent.selectedTab.toString(), 10)][\"\" + key]).length; i++) {\n                if ((isMethod && (keytipData[parseInt(i.toString(), 10)].keyTip === keyTip)) || !isMethod) {\n                    var itemID = keytipData[parseInt(i.toString(), 10)].id;\n                    if (keytipData[parseInt(i.toString(), 10)].id.indexOf('_grpbtn') !== -1) {\n                        itemID = keytipData[parseInt(i.toString(), 10)].id.replace(/_grpbtn\\d+/, '');\n                    }\n                    var itemProp = (0,_base_utils__WEBPACK_IMPORTED_MODULE_0__.getItem)(this.parent.tabs, itemID);\n                    if (itemProp && itemProp.group.orientation === 'Column' && itemProp.collection.items.length > 1 && this.parent.activeLayout !== 'Simplified') {\n                        if (itemProp.itemIndex === 0) {\n                            xOffset = 'center';\n                            yOffset = 'top';\n                        }\n                        else if (itemProp.itemIndex === 1) {\n                            xOffset = 'center';\n                            yOffset = 'center';\n                        }\n                        else {\n                            xOffset = 'center';\n                            yOffset = 'bottom';\n                        }\n                    }\n                    else if (itemProp && itemProp.group.orientation === 'Row' && itemProp.group.collections.length > 1 && this.parent.activeLayout !== 'Simplified') {\n                        if (itemProp.collectionIndex === 0) {\n                            xOffset = 'center';\n                            yOffset = 'top';\n                        }\n                        else {\n                            xOffset = 'center';\n                            yOffset = 'bottom';\n                        }\n                    }\n                    if (key === 'item') {\n                        this.createKeyTipElement((keytipData[parseInt(i.toString(), 10)].id), keytipData[parseInt(i.toString(), 10)].keyTip, key, xOffset, yOffset);\n                    }\n                    else {\n                        this.createKeyTipElement((keytipData[parseInt(i.toString(), 10)].id), keytipData[parseInt(i.toString(), 10)].keyTip, key, xOffset, yOffset, false, true);\n                    }\n                }\n            }\n        }\n    };\n    RibbonKeyTip.prototype.createKeyTipElement = function (id, keyTip, type, xOffset, yOffset, isTab, isPopUpItem) {\n        if (xOffset === void 0) { xOffset = 'center'; }\n        if (yOffset === void 0) { yOffset = 'bottom'; }\n        if (isTab === void 0) { isTab = false; }\n        if (isPopUpItem === void 0) { isPopUpItem = false; }\n        var keyEle = document.querySelector('#' + id);\n        var isPopUpPresent = false;\n        var splitBtnID;\n        if (isTab) {\n            keyEle = document.querySelector('#' + id + _base_constant__WEBPACK_IMPORTED_MODULE_2__.HEADER_ID);\n        }\n        if (keyEle) {\n            if (keyEle.closest('.e-ribbon-group-overflow-ddb')) {\n                isPopUpPresent = true;\n            }\n            if ((isTab && isPopUpItem) && keyEle.closest('.e-toolbar-pop')) {\n                isPopUpPresent = true;\n            }\n            if (keyEle.closest('.e-split-btn-wrapper')) {\n                var splitBtn = keyEle.closest('.e-split-btn-wrapper');\n                splitBtnID = splitBtn.closest('.e-ribbon-item').id;\n            }\n            else {\n                if (keyEle.closest('.e-colorpicker-wrapper')) {\n                    keyEle = keyEle.closest('.e-colorpicker-wrapper');\n                    splitBtnID = keyEle.closest('.e-ribbon-item').id;\n                }\n            }\n        }\n        if ((keyEle && keyEle.offsetParent) || (isTab && isPopUpItem)) {\n            if ((isPopUpItem && isPopUpPresent) || !isPopUpItem) {\n                var keytipElement = this.parent.createElement('div', {\n                    className: _base_constant__WEBPACK_IMPORTED_MODULE_2__.RIBBON_KEYTIP,\n                    id: id + _base_constant__WEBPACK_IMPORTED_MODULE_2__.RIBBON_KEYTIP_ID,\n                    attrs: { role: 'dialog', 'aria-label': 'ribbon-keytip' }\n                });\n                document.body.append(keytipElement);\n                var keytipPopup = new _syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_3__.Popup(keytipElement, {\n                    relateTo: '#' + (isTab ? id + _base_constant__WEBPACK_IMPORTED_MODULE_2__.HEADER_ID : splitBtnID ? splitBtnID : id),\n                    content: keyTip,\n                    collision: { X: 'fit', Y: 'flip' },\n                    targetType: 'relative',\n                    position: { X: xOffset, Y: yOffset },\n                    enableRtl: this.parent.enableRtl,\n                    actionOnScroll: 'hide'\n                });\n                keytipPopup.show();\n                this.calculateKeyTipPosition(keyEle, keytipElement, type, yOffset);\n                this.parent.isKeytipOpen = true;\n            }\n        }\n    };\n    RibbonKeyTip.prototype.calculateKeyTipPosition = function (itemEle, keytipElement, type, yOffset) {\n        var position = itemEle.getBoundingClientRect();\n        if (type === 'backstageMenu') {\n            keytipElement.style.top = position.top + ((keytipElement.offsetHeight) / 2) + 'px';\n            keytipElement.style.left = position.left + (itemEle.offsetWidth / 5) + 'px';\n        }\n        else {\n            if (type !== 'popupitem') {\n                keytipElement.style.left = position.left + (position.width - keytipElement.offsetWidth) / 2 + 'px';\n            }\n        }\n        if (type === 'filemenu' || type === 'backstage') {\n            keytipElement.style.top = position.top + ((itemEle.offsetHeight - (itemEle.offsetHeight / 3)) + (keytipElement.offsetHeight / 6)) + 'px';\n        }\n        else if ((type === 'item' && yOffset === 'top')) {\n            keytipElement.style.top = (position.top - (itemEle.offsetHeight) / 2) + 'px';\n        }\n    };\n    /**\n     * Performs keytip action.\n     *\n     * @param {string} keyPress - Gets the keytip text.\n     * @param {boolean} isMethod - Gets the isMethod.\n     * @returns {void}\n     * @hidden\n     */\n    RibbonKeyTip.prototype.keytipPress = function (keyPress, isMethod) {\n        var _this = this;\n        if (isMethod === void 0) { isMethod = false; }\n        this.isKeytipPresent = false;\n        for (var i = 0; ((i < Object.keys(this.parent.keyTipElements).length) && !this.isKeytipPresent); i++) {\n            if (this.parent.keyTipElements[parseInt(i.toString(), 10)]) {\n                for (var j = 0; ((j < Object.keys(this.parent.keyTipElements[parseInt(i.toString(), 10)]).length) &&\n                    !this.isKeytipPresent); j++) {\n                    var keytipData = this.parent.keyTipElements[parseInt(i.toString(), 10)][Object.\n                        keys(this.parent.keyTipElements[parseInt(i.toString(), 10)])[parseInt(j.toString(), 10)]];\n                    for (var k = 0; ((k < Object.keys(keytipData).length) && !this.isKeytipPresent); k++) {\n                        if (keyPress.toUpperCase() === keytipData[parseInt(k.toString(), 10)].keyTip) {\n                            var keyTipElement = document.querySelector('#' + keytipData[parseInt(k.toString(), 10)].id + _base_constant__WEBPACK_IMPORTED_MODULE_2__.RIBBON_KEYTIP_ID);\n                            if (keyTipElement || isMethod) {\n                                this.isKeytipPresent = true;\n                                this.removeKeytip();\n                                if (keytipData[parseInt(k.toString(), 10)].type === 'tab') {\n                                    if (i !== this.parent.selectedTab) {\n                                        this.parent.tabObj.select(i);\n                                        setTimeout(function () {\n                                            var tabOverflow = _this.parent.tabObj.element.querySelector('.e-nav-active');\n                                            if (tabOverflow) {\n                                                tabOverflow.click();\n                                            }\n                                            _this.createKeytip('item');\n                                        }, 600);\n                                    }\n                                    else {\n                                        this.createKeytip('item');\n                                    }\n                                }\n                                else {\n                                    if (keytipData[parseInt(k.toString(), 10)].type === 'item' || keytipData[parseInt(k.toString(), 10)].type === 'grpoverflowpopup' || keytipData[parseInt(k.toString(), 10)].type === 'popupitem') {\n                                        if (document.getElementById(keytipData[parseInt(k.toString(), 10)].id) && document.getElementById(keytipData[parseInt(k.toString(), 10)].id).classList.contains('e-ribbon-group-button')) {\n                                            document.getElementById(keytipData[parseInt(k.toString(), 10)].id).click();\n                                        }\n                                        else {\n                                            var itemProp = void 0;\n                                            if ((keytipData[parseInt(k.toString(), 10)].id).indexOf('_popupButton') !== -1) {\n                                                var galleryID = keytipData[parseInt(k.toString(), 10)].id.replace(/_popupButton/g, '');\n                                                itemProp = (0,_base_utils__WEBPACK_IMPORTED_MODULE_0__.getItem)(this.parent.tabs, galleryID);\n                                            }\n                                            else {\n                                                itemProp = (0,_base_utils__WEBPACK_IMPORTED_MODULE_0__.getItem)(this.parent.tabs, keytipData[parseInt(k.toString(), 10)].id);\n                                            }\n                                            if (!isMethod || (isMethod && itemProp.tabIndex === this.parent.selectedTab)) {\n                                                this.clickItems(itemProp, keytipData, k, false, isMethod);\n                                            }\n                                        }\n                                    }\n                                    else if (keytipData[parseInt(k.toString(), 10)].type === 'grpoverflow' || keytipData[parseInt(k.toString(), 10)].type === 'grpofbtn' || keytipData[parseInt(k.toString(), 10)].type === 'launcher') {\n                                        var keyEle = document.querySelector('#' + keytipData[parseInt(k.toString(), 10)].id);\n                                        this.removeKeytip();\n                                        if (keyEle) {\n                                            var groupID = keytipData[parseInt(k.toString(), 10)].id;\n                                            if (isMethod) {\n                                                if (keytipData[parseInt(k.toString(), 10)].id.indexOf('_launcher') !== -1 || keytipData[parseInt(k.toString(), 10)].id.indexOf('_sim_grp_overflow') !== -1 || keytipData[parseInt(k.toString(), 10)].id.indexOf('_overflow_dropdown') !== -1) {\n                                                    groupID = keytipData[parseInt(k.toString(), 10)].id.replace(/_launcher|_sim_grp_overflow|_overflow_dropdown/g, '');\n                                                    var itemProp = (0,_base_utils__WEBPACK_IMPORTED_MODULE_0__.getGroup)(this.parent.tabs, groupID);\n                                                    if (itemProp.tabIndex === this.parent.selectedTab) {\n                                                        this.clickItems(itemProp, keytipData, k, true, isMethod, keyEle);\n                                                    }\n                                                }\n                                            }\n                                            else {\n                                                this.clickItems(null, keytipData, k, true, isMethod, keyEle);\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            else {\n                if (this.parent.keyTipElements) {\n                    this.commonItemsKeyTipPress(keyPress, Object.keys(this.parent.keyTipElements)[parseInt(i.toString(), 10)], isMethod);\n                }\n            }\n        }\n    };\n    RibbonKeyTip.prototype.clickItems = function (itemProp, keytipData, k, isGroupItems, isMethod, keyEle) {\n        if (isGroupItems) {\n            keyEle.click();\n            if (!(keytipData[parseInt(k.toString(), 10)].type === 'launcher')) {\n                this.isKeytipPopupOpen = true;\n                if (keytipData[parseInt(k.toString(), 10)].type === 'grpoverflow') {\n                    this.createKeytip('grpoverflowpopup');\n                }\n                else {\n                    this.createKeytip('popupitem');\n                }\n            }\n        }\n        else {\n            var itemID = keytipData[parseInt(k.toString(), 10)].id;\n            if (document.querySelector('#' + itemID) && isMethod) {\n                if (this.parent.activeLayout === 'Simplified') {\n                    if (document.querySelector('#' + itemID).closest('#' + itemProp.group.id + '_sim_grp_overflow-popup') && document.querySelector('#' + itemID).closest('#' + itemProp.group.id + '_sim_grp_overflow-popup').classList.contains('e-popup-close')) {\n                        document.querySelector('#' + itemProp.group.id + '_sim_grp_overflow').click();\n                    }\n                    else if (document.querySelector('#' + itemID).closest('#' + this.parent.tabObj.element.id + _base_constant__WEBPACK_IMPORTED_MODULE_2__.OVRLOF_BUTTON_ID + '-popup') && document.querySelector('#' + itemID).closest('#' + this.parent.tabObj.element.id + _base_constant__WEBPACK_IMPORTED_MODULE_2__.OVRLOF_BUTTON_ID + '-popup').classList.contains('e-popup-close')) {\n                        document.querySelector('#' + this.parent.tabObj.element.id + _base_constant__WEBPACK_IMPORTED_MODULE_2__.OVRLOF_BUTTON_ID).click();\n                    }\n                }\n                else {\n                    if (document.querySelector('#' + itemID).closest('#' + itemProp.group.id + _base_constant__WEBPACK_IMPORTED_MODULE_2__.OVERFLOW_ID + _base_constant__WEBPACK_IMPORTED_MODULE_2__.DROPDOWN_ID + '-popup') && document.querySelector('#' + itemID).closest('#' + itemProp.group.id + _base_constant__WEBPACK_IMPORTED_MODULE_2__.OVERFLOW_ID + _base_constant__WEBPACK_IMPORTED_MODULE_2__.DROPDOWN_ID + '-popup').classList.contains('e-popup-close')) {\n                        document.querySelector('#' + itemProp.group.id + _base_constant__WEBPACK_IMPORTED_MODULE_2__.OVERFLOW_ID + _base_constant__WEBPACK_IMPORTED_MODULE_2__.DROPDOWN_ID).click();\n                    }\n                }\n            }\n            var itemType = this.parent.getItemModuleName(itemProp.item);\n            switch (itemType) {\n                case 'btn':\n                    this.parent.ribbonButtonModule.click(itemID);\n                    break;\n                case 'dropdown-btn':\n                    this.parent.ribbonDropDownModule.toggle(itemID);\n                    break;\n                case 'split-btn':\n                    this.parent.ribbonSplitButtonModule.toggle(itemID);\n                    break;\n                case 'checkbox':\n                    this.parent.ribbonCheckBoxModule.click(itemID);\n                    break;\n                case 'colorpicker':\n                    this.parent.ribbonColorPickerModule.toggle(itemID);\n                    break;\n                case 'combobox': {\n                    var itemEle_1 = document.querySelector('#' + itemID);\n                    if (this.isInteractableElement(itemEle_1)) {\n                        setTimeout(function () {\n                            itemEle_1.focus();\n                        }, 100);\n                    }\n                    break;\n                }\n                case 'gallery': {\n                    var galleryEle = document.querySelector('#' + itemID);\n                    if (this.isInteractableElement(galleryEle)) {\n                        galleryEle.click();\n                    }\n                    break;\n                }\n                case 'template': {\n                    var templateEle = document.querySelector('#' + itemID);\n                    if (this.isInteractableElement(templateEle)) {\n                        templateEle.focus();\n                    }\n                    break;\n                }\n                case 'group-btn': {\n                    var itemElement = document.querySelector('#' + itemID);\n                    if (this.isInteractableElement(itemElement)) {\n                        var item = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.getInstance)(itemElement, _syncfusion_ej2_splitbuttons__WEBPACK_IMPORTED_MODULE_5__.DropDownButton);\n                        item.toggle();\n                        for (var i = 0; i < itemProp.item.groupButtonSettings.items.length; i++) {\n                            if (itemProp.item.groupButtonSettings.items[parseInt(i.toString(), 10)].keyTip) {\n                                this.createKeyTipElement(itemID + (_base_constant__WEBPACK_IMPORTED_MODULE_2__.RIBBON_GROUP_BUTTON_ID + i), itemProp.item.groupButtonSettings.items[parseInt(i.toString(), 10)].keyTip, 'item');\n                            }\n                        }\n                    }\n                    break;\n                }\n            }\n        }\n    };\n    RibbonKeyTip.prototype.isInteractableElement = function (element) {\n        return element && !element.closest('.e-ribbon-item').classList.contains('e-disabled');\n    };\n    RibbonKeyTip.prototype.commonItemsKeyTipPress = function (keyPress, key, isMethod) {\n        var _this = this;\n        if (this.parent.keyTipElements[\"\" + key]) {\n            var isKeyPressed = false;\n            var keytipData = this.parent.keyTipElements[\"\" + key];\n            var keyEle = void 0;\n            var keytipElement = void 0;\n            if (keytipData) {\n                if (key === 'backstageMenu') {\n                    for (var i = 0; i < Object.keys(this.parent.keyTipElements[\"\" + key]).length; i++) {\n                        if (keytipData[parseInt(i.toString(), 10)].keyTip === keyPress.toUpperCase()) {\n                            keyEle = document.querySelector('#' + keytipData[parseInt(i.toString(), 10)].id);\n                            keytipElement = document.querySelector('#' + keyEle.id + _base_constant__WEBPACK_IMPORTED_MODULE_2__.RIBBON_KEYTIP_ID);\n                            if (keytipElement || isMethod) {\n                                isKeyPressed = true;\n                                if (isMethod && document.querySelector('.e-ribbon-backstage-popup').classList.contains('e-popup-close')) {\n                                    this.parent.tabObj.element.querySelector('.e-ribbon-backstage').click();\n                                }\n                                break;\n                            }\n                        }\n                    }\n                }\n                else {\n                    if (keytipData[0] && keytipData[0].keyTip === keyPress.toUpperCase()) {\n                        keyEle = document.querySelector('#' + keytipData[0].id);\n                        keytipElement = document.querySelector('#' + keytipData[0].id + _base_constant__WEBPACK_IMPORTED_MODULE_2__.RIBBON_KEYTIP_ID);\n                        if (keytipElement || isMethod) {\n                            isKeyPressed = true;\n                        }\n                    }\n                }\n            }\n            if (isKeyPressed) {\n                this.removeKeytip();\n                this.isKeytipPresent = true;\n                if (keyEle) {\n                    keyEle.click();\n                    if (key === 'backstage') {\n                        this.createKeytip('backstageMenu');\n                    }\n                    else if (key === 'overflowbtn') {\n                        this.isKeytipPopupOpen = true;\n                        this.createKeytip('popupitem');\n                    }\n                    else if (key === 'taboverflow') {\n                        setTimeout(function () {\n                            for (var i = 0; i < Object.keys(_this.parent.keyTipElements).length; i++) {\n                                if (_this.parent.keyTipElements[parseInt(i.toString(), 10)]) {\n                                    var keytipData_1 = _this.parent.keyTipElements[parseInt(i.toString(), 10)]['tab'];\n                                    _this.createKeyTipElement((keytipData_1[0].id), keytipData_1[0].keyTip, 'tab', 'center', 'bottom', true, true);\n                                }\n                            }\n                        }, 600);\n                    }\n                }\n            }\n        }\n    };\n    /**\n     * Removes the keytip.\n     *\n     * @param {string} key - Gets the keyboard key element.\n     * @returns {void}\n     * @hidden\n     */\n    RibbonKeyTip.prototype.removeKeytip = function (key) {\n        var _this = this;\n        var keyTipItems = document.querySelectorAll('.e-ribbon-keytip');\n        var isKeyTipExist = false;\n        this.parent.keysPress = '';\n        var _loop_1 = function (i) {\n            var keyTipItem = keyTipItems[parseInt(i.toString(), 10)];\n            if (key === 'Escape' && this_1.parent.keyTipElements && this_1.parent.keyTipElements[this_1.parent.selectedTab]) {\n                for (var j = 0; j < Object.keys(this_1.parent.keyTipElements[this_1.parent.selectedTab]).length; j++) {\n                    var keyText = (Object.keys(this_1.parent.keyTipElements[parseInt(this_1.parent.selectedTab.toString(), 10)]))[parseInt(j.toString(), 10)];\n                    var keyTipElement = this_1.parent.keyTipElements[parseInt(this_1.parent.selectedTab.toString(), 10)];\n                    var index = (0,_base_index__WEBPACK_IMPORTED_MODULE_1__.getIndex)(keyTipElement[\"\" + keyText], function (e) {\n                        return e.id +\n                            _base_constant__WEBPACK_IMPORTED_MODULE_2__.RIBBON_KEYTIP_ID === keyTipItems[parseInt(i.toString(), 10)].id;\n                    });\n                    if (index !== -1) {\n                        if ((keyText === 'item' && !(this_1.isKeytipPopupOpen)) || (keyText === 'grpoverflow' && this_1.parent.activeLayout === 'Classic')) {\n                            this_1.createKeytip('tab');\n                            key = '';\n                            isKeyTipExist = true;\n                            break;\n                        }\n                        else if (this_1.isKeytipPopupOpen) {\n                            if ((keyText === 'popupitem' && this_1.parent.activeLayout === 'Simplified') || (keyText === 'grpoverflowpopup' && this_1.parent.activeLayout === 'Classic')) {\n                                this_1.createKeytip('item');\n                                key = '';\n                                isKeyTipExist = true;\n                                break;\n                            }\n                        }\n                    }\n                }\n                for (var n = 0; n < Object.keys(this_1.parent.keyTipElements).length; n++) {\n                    if (this_1.parent.keyTipElements[parseInt(n.toString(), 10)]) {\n                        var keytipData = this_1.parent.keyTipElements[parseInt(n.toString(), 10)]['tab'];\n                        for (var j = 0; j < Object.keys(keytipData).length; j++) {\n                            if (keyTipItem.id === keytipData[0].id + _base_constant__WEBPACK_IMPORTED_MODULE_2__.RIBBON_KEYTIP_ID) {\n                                if (document.querySelector('#' + keytipData[0].id + _base_constant__WEBPACK_IMPORTED_MODULE_2__.HEADER_ID).closest('.e-toolbar-pop')) {\n                                    var tabOverflow = this_1.parent.tabObj.element.querySelector('.e-nav-active');\n                                    tabOverflow.click();\n                                    setTimeout(function () {\n                                        _this.createKeytip('tab');\n                                    }, 600);\n                                    key = '';\n                                    isKeyTipExist = true;\n                                    break;\n                                }\n                            }\n                        }\n                        if (isKeyTipExist) {\n                            break;\n                        }\n                    }\n                }\n                if (!isKeyTipExist && this_1.parent.keyTipElements['backstageMenu']) {\n                    var index = (0,_base_index__WEBPACK_IMPORTED_MODULE_1__.getIndex)(this_1.parent.keyTipElements['backstageMenu'], function (e) { return e.id + _base_constant__WEBPACK_IMPORTED_MODULE_2__.RIBBON_KEYTIP_ID === keyTipItems[parseInt(i.toString(), 10)].id; });\n                    if (index !== -1) {\n                        this_1.createKeytip('tab');\n                        key = '';\n                        isKeyTipExist = true;\n                    }\n                }\n            }\n            if (keyTipItem) {\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.remove)(keyTipItem);\n            }\n        };\n        var this_1 = this;\n        for (var i = 0; i < keyTipItems.length; i++) {\n            _loop_1(i);\n        }\n        this.isKeytipPopupOpen = false;\n        if (!isKeyTipExist) {\n            this.parent.isKeytipOpen = false;\n        }\n    };\n    /**\n     * Shows the Keytip dynamically.\n     *\n     * @param  {string} keyAction - Item for which the tooltip is to be shown.\n     * @returns {void}\n     */\n    RibbonKeyTip.prototype.showKeyTips = function (keyAction) {\n        if (this.parent.enableKeyTips) {\n            if (keyAction) {\n                this.keytipPress(keyAction, true);\n            }\n            else {\n                this.createKeytip('tab');\n            }\n        }\n    };\n    /**\n     * Hides the Keytip dynamically.\n     *\n     * @returns {void}\n     */\n    RibbonKeyTip.prototype.hideKeyTips = function () {\n        this.removeKeytip();\n    };\n    return RibbonKeyTip;\n}());\n\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-ribbon/src/ribbon/modules/ribbon-keytip.js?");

/***/ })

}]);