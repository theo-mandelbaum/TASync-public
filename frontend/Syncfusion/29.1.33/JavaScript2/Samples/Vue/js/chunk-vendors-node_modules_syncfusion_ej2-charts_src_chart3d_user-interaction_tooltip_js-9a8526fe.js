"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkej2_vue_samples"] = self["webpackChunkej2_vue_samples"] || []).push([["chunk-vendors-node_modules_syncfusion_ej2-charts_src_chart3d_user-interaction_tooltip_js-9a8526fe"],{

/***/ "./node_modules/@syncfusion/ej2-charts/src/chart3d/user-interaction/tooltip.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-charts/src/chart3d/user-interaction/tooltip.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Chart3DTooltipSettings: () => (/* binding */ Chart3DTooltipSettings),\n/* harmony export */   Tooltip3D: () => (/* binding */ Tooltip3D)\n/* harmony export */ });\n/* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @syncfusion/ej2-base */ \"./node_modules/@syncfusion/ej2-base/index.js\");\n/* harmony import */ var _common_utils_helper__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../common/utils/helper */ \"./node_modules/@syncfusion/ej2-charts/src/common/utils/helper.js\");\n/* harmony import */ var _syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @syncfusion/ej2-svg-base */ \"./node_modules/@syncfusion/ej2-svg-base/index.js\");\n/* harmony import */ var _common_user_interaction_tooltip__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../common/user-interaction/tooltip */ \"./node_modules/@syncfusion/ej2-charts/src/common/user-interaction/tooltip.js\");\n/* harmony import */ var _common_model_constants__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../common/model/constants */ \"./node_modules/@syncfusion/ej2-charts/src/common/model/constants.js\");\n/* harmony import */ var _common_model_base__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../common/model/base */ \"./node_modules/@syncfusion/ej2-charts/src/common/model/base.js\");\n/* harmony import */ var _utils_chart3dRender__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utils/chart3dRender */ \"./node_modules/@syncfusion/ej2-charts/src/chart3d/utils/chart3dRender.js\");\nvar __extends = (undefined && undefined.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\n\n\n\n\n\n\n\n\n/**\n * Configures the ToolTips in the chart.\n *\n * @public\n */\nvar Chart3DTooltipSettings = /** @class */ (function (_super) {\n    __extends(Chart3DTooltipSettings, _super);\n    function Chart3DTooltipSettings() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], Chart3DTooltipSettings.prototype, \"enable\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(true)\n    ], Chart3DTooltipSettings.prototype, \"enableMarker\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(null)\n    ], Chart3DTooltipSettings.prototype, \"fill\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(null)\n    ], Chart3DTooltipSettings.prototype, \"header\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(null)\n    ], Chart3DTooltipSettings.prototype, \"opacity\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({ fontFamily: null, size: '12px', fontStyle: 'Normal', fontWeight: null, color: null }, _common_model_base__WEBPACK_IMPORTED_MODULE_5__.Font)\n    ], Chart3DTooltipSettings.prototype, \"textStyle\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(null)\n    ], Chart3DTooltipSettings.prototype, \"format\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(null)\n    ], Chart3DTooltipSettings.prototype, \"template\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(true)\n    ], Chart3DTooltipSettings.prototype, \"enableAnimation\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(300)\n    ], Chart3DTooltipSettings.prototype, \"duration\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(1000)\n    ], Chart3DTooltipSettings.prototype, \"fadeOutDuration\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('Move')\n    ], Chart3DTooltipSettings.prototype, \"fadeOutMode\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], Chart3DTooltipSettings.prototype, \"enableTextWrap\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({ color: null, width: null }, _common_model_base__WEBPACK_IMPORTED_MODULE_5__.Border)\n    ], Chart3DTooltipSettings.prototype, \"border\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({ x: null, y: null }, _common_model_base__WEBPACK_IMPORTED_MODULE_5__.Location)\n    ], Chart3DTooltipSettings.prototype, \"location\", void 0);\n    return Chart3DTooltipSettings;\n}(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.ChildProperty));\n\n/**\n * The `Tooltip` module is used to render the tooltip for chart series.\n */\nvar Tooltip3D = /** @class */ (function (_super) {\n    __extends(Tooltip3D, _super);\n    /**\n     * Constructor for tooltip module.\n     *\n     * @param {Chart3D} chart - Specifies the chart instance\n     * @private\n     */\n    function Tooltip3D(chart) {\n        var _this = _super.call(this, chart) || this;\n        _this.chart3D = chart;\n        _this.commonXvalues = [];\n        _this.addEventListener();\n        return _this;\n    }\n    /**\n     * Adds event listeners for handling mouse and touch events on the chart.\n     *\n     * @returns {void}\n     * @private\n     */\n    Tooltip3D.prototype.addEventListener = function () {\n        if (this.chart.isDestroyed) {\n            return;\n        }\n        var cancelEvent = _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isPointer ? 'pointerleave' : 'mouseleave';\n        this.chart.on(cancelEvent, this.mouseLeaveHandler, this);\n        this.chart.on('tapHold', this.longPress, this);\n        this.chart.on(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.touchMoveEvent, this.mouseMoveHandler, this);\n        this.chart.on(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.touchEndEvent, this.mouseUpHandler, this);\n    };\n    /**\n     * Unbinding events for selection module.\n     *\n     * @returns {void}\n     */\n    Tooltip3D.prototype.removeEventListener = function () {\n        if (this.chart.isDestroyed) {\n            return;\n        }\n        this.chart.off('pointerleave' || 0, this.mouseLeaveHandler);\n        this.chart.off('tapHold', this.longPress);\n        this.chart.off(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.touchMoveEvent, this.mouseLeaveHandler);\n        this.chart.off(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.touchMoveEvent, this.mouseMoveHandler);\n        this.chart.off(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.touchEndEvent, this.mouseUpHandler);\n    };\n    /**\n     * Handles the mouse up event for the 3D chart.\n     *\n     * @param {MouseEvent | PointerEvent | TouchEvent} event - The mouse or touch event.\n     * @returns {void}\n     * @private\n     */\n    Tooltip3D.prototype.mouseUpHandler = function (event) {\n        var _this = this;\n        var chart = this.control;\n        var data = this.get3dData(event);\n        if (chart.isTouch) {\n            this.tooltip(event);\n            if (chart.tooltip.fadeOutMode === 'Move') {\n                this.removeTooltip(chart.tooltip.fadeOutDuration);\n                clearTimeout(this.timerId);\n                this.timerId = +setTimeout(function () {\n                    _this.removeBlurEffect();\n                }, 500);\n            }\n            if (chart.startMove && chart.tooltip.fadeOutMode === 'Move') {\n                this.removeTooltip(2000);\n                this.removeBlurEffect();\n            }\n        }\n        else if (!this.findData(data, this.previousPoints[0]) && chart.tooltip.fadeOutMode === 'Click') {\n            this.removeTooltip(0);\n            this.removeBlurEffect();\n        }\n    };\n    /**\n     * Handles the mouse leave event for the 3D chart.\n     *\n     * @returns {void}\n     * @private\n     */\n    Tooltip3D.prototype.mouseLeaveHandler = function () {\n        this.removeTooltip(this.chart.tooltip.fadeOutDuration);\n        this.removeBlurEffect();\n    };\n    /**\n     * Handles the mouse move event for the 3D chart.\n     *\n     * @param {MouseEvent | PointerEvent | TouchEvent} event - The mouse move event.\n     * @returns {void}\n     * @public\n     */\n    Tooltip3D.prototype.mouseMoveHandler = function (event) {\n        var chart = this.chart3D;\n        chart.mouseX = chart.mouseX / chart.scaleX;\n        chart.mouseY = chart.mouseY / chart.scaleY;\n        // Tooltip for chart series.\n        if (!chart.disableTrackTooltip && !chart.rotateActivate) {\n            if (!chart.isTouch || (chart.startMove)) {\n                this.tooltip(event);\n            }\n        }\n    };\n    /**\n     * Handles the long press on chart.\n     *\n     * @returns {boolean} false\n     * @private\n     */\n    Tooltip3D.prototype.longPress = function () {\n        return false;\n    };\n    /**\n     * To create Tooltip styles for series\n     *\n     * @returns {void}\n     */\n    Tooltip3D.prototype.seriesStyles = function () {\n        if (!this.styleAdded) {\n            var style = document.createElement('style');\n            style.setAttribute('id', this.element.id + '_ej2_chart_tooltip');\n            style.innerText += ' .' + this.element.id + '_ej2_tooltipDeselected { opacity:' + (0.2) + ';} ';\n            document.body.appendChild(style);\n            this.styleAdded = true;\n        }\n    };\n    /**\n     * Handles the tooltip display for the 3D chart.\n     *\n     * @param {MouseEvent | PointerEvent | TouchEvent | KeyboardEvent} e - The event triggering the tooltip display.\n     * @returns {void}\n     * @public\n     */\n    Tooltip3D.prototype.tooltip = function (e) {\n        var elementId = this.element.id + '_tooltip_svg';\n        var svgElement = this.getElement(elementId);\n        var isTooltip = (svgElement && parseInt(svgElement.getAttribute('opacity'), 10) > 0);\n        var tooltipDiv = this.getTooltipElement(isTooltip);\n        if (this.chart3D.tooltip3DModule) {\n            this.renderSeriesTooltip(this.chart3D, !isTooltip, tooltipDiv, e);\n        }\n    };\n    /**\n     * Finds the header for the tooltip based on the provided Point3D.\n     *\n     * @param {Point3D} data - The Point3D used to find the header.\n     * @returns {string} - The header for the tooltip.\n     * @private\n     */\n    Tooltip3D.prototype.findHeader = function (data) {\n        if (this.header === '') {\n            return '';\n        }\n        this.header = this.parseTemplate(data.point, data.series, this.header, data.series.xAxis, data.series.yAxis);\n        if (this.header.replace(/<b>/g, '').replace(/<\\/b>/g, '').trim() !== '') {\n            return this.header;\n        }\n        return '';\n    };\n    /**\n     * Renders the tooltip for the series in the 3D chart.\n     *\n     * @param {Chart3D} chart - The 3D chart instance.\n     * @param {boolean} isFirst - A boolean indicating whether it is the first series.\n     * @param {HTMLDivElement} tooltipDiv - The tooltip div element.\n     * @param {MouseEvent | PointerEvent | TouchEvent | KeyboardEvent} e - The event that triggered the tooltip.\n     * @returns {void}\n     * @private\n     */\n    Tooltip3D.prototype.renderSeriesTooltip = function (chart, isFirst, tooltipDiv, e) {\n        var data = this.get3dData(e);\n        this.currentPoints = [];\n        if (this.findData(data, this.previousPoints[0]) &&\n            ((this.previousPoints[0] && !((this.previousPoints[0].point.index === data.point.index && this.previousPoints[0].series.index\n                === data.series.index) && this.chart3D.isRemove)) || !this.previousPoints[0])) {\n            if (this.pushData(data, isFirst, tooltipDiv, true)) {\n                this.triggerTooltipRender(data, isFirst, this.getTooltipText(data), this.findHeader(data));\n            }\n        }\n        else if (!data.point && this.chart3D.isRemove && chart.tooltip.fadeOutMode === 'Move') {\n            this.removeTooltip(this.chart.tooltip.fadeOutDuration);\n            this.removeBlurEffect();\n            this.chart3D.isRemove = false;\n        }\n        if (data && data.point) {\n            this.findMouseValue(data, chart);\n        }\n    };\n    /**\n     * Triggers the rendering of the tooltip with the specified point and text information.\n     *\n     * @param {Point3D} point - The data point for which the tooltip is triggered.\n     * @param {boolean} isFirst - A boolean indicating whether it is the first series.\n     * @param {string} textCollection - The text information to be displayed in the tooltip.\n     * @param {string} headerText - The header text for the tooltip.\n     * @returns {void}\n     * @private\n     */\n    Tooltip3D.prototype.triggerTooltipRender = function (point, isFirst, textCollection, headerText) {\n        var _this = this;\n        var tooltipTemplate;\n        var argsData = {\n            cancel: false, text: textCollection, headerText: headerText, template: tooltipTemplate,\n            textStyle: this.textStyle,\n            data: {\n                pointX: point.point.x, pointY: point.point.y, seriesIndex: point.series.index, seriesName: point.series.name,\n                pointIndex: point.point.index, pointText: point.point.text\n            }\n        };\n        var borderWidth = this.chart.border.width;\n        var padding = 3;\n        var chartTooltipSuccess = function (argsData) {\n            if (!argsData.cancel) {\n                _this.headerText = argsData.headerText;\n                _this.formattedText = _this.formattedText.concat(argsData.text);\n                _this.text = _this.formattedText;\n                _this.createTooltip(_this.chart, isFirst, _this.getSymbolLocation(point), point.series.clipRect, point.point, _this.chart3D.tooltip.enableMarker ? ['Circle'] : [], 0, new _syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_2__.Rect(borderWidth, borderWidth, _this.chart.availableSize.width - padding - borderWidth * 2, _this.chart.availableSize.height - padding - borderWidth * 2), false, null, _this.getTemplateText(point), _this.template ? argsData.template : '');\n                _this.blurEffect(_this.chart3D.visibleSeries, point.series);\n            }\n            else {\n                _this.removeHighlight();\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.remove)(_this.getElement(_this.element.id + '_tooltip'));\n            }\n            _this.chart3D.isRemove = true;\n        };\n        chartTooltipSuccess.bind(this, point);\n        this.chart.trigger(_common_model_constants__WEBPACK_IMPORTED_MODULE_4__.tooltipRender, argsData, chartTooltipSuccess);\n    };\n    /**\n     * Applies a blur effect to the specified series while removing the effect from others.\n     *\n     * @param {Chart3DSeries[]} visibleSeries - The array of visible series in the 3D chart.\n     * @param {Chart3DSeries} tooltipSeries - The series associated with the tooltip.\n     * @returns {void}\n     * @private\n     */\n    Tooltip3D.prototype.blurEffect = function (visibleSeries, tooltipSeries) {\n        if (!this.chart3D.highlight3DModule || (this.chart3D.legendSettings.enableHighlight && this.chart3D.highlightMode === 'None')) {\n            var pointElements_1 = [];\n            for (var _i = 0, visibleSeries_1 = visibleSeries; _i < visibleSeries_1.length; _i++) {\n                var series = visibleSeries_1[_i];\n                if (series.visible && series.index !== tooltipSeries.index) {\n                    var elements = document.querySelectorAll(\"[id*=\\\"region-series-\" + series.index + \"\\\"]\");\n                    elements.forEach(function (el) {\n                        pointElements_1.push(el);\n                    });\n                }\n                else if (series.visible) {\n                    var tooltipElements = document.querySelectorAll(\"[id*=\\\"region-series-\" + series.index + \"\\\"]\");\n                    for (var i = 0; i < tooltipElements.length; i++) {\n                        var element = tooltipElements[i];\n                        var elementClassName = element.getAttribute('class') || '';\n                        if (elementClassName.indexOf(this.element.id + '_ej2_tooltipDeselected') > -1) {\n                            element.setAttribute('class', elementClassName.replace(this.element.id + '_ej2_tooltipDeselected', ''));\n                        }\n                        this.chart3D.stopElementAnimation(element, series.index);\n                    }\n                }\n            }\n            for (var i = 0; i < pointElements_1.length; i++) {\n                if (pointElements_1[i]) {\n                    var elementClassName = pointElements_1[i].getAttribute('class') || '';\n                    elementClassName += ((elementClassName !== '') ? ' ' : '');\n                    if (elementClassName.indexOf('_selection_') === -1 && elementClassName.indexOf(this.element.id + '_ej2_tooltipDeselected') === -1) {\n                        pointElements_1[i].setAttribute('class', elementClassName + this.element.id + '_ej2_tooltipDeselected');\n                    }\n                }\n            }\n        }\n    };\n    Tooltip3D.prototype.removeBlurEffect = function () {\n        if (!this.chart3D.highlight3DModule || (this.chart3D.legendSettings.enableHighlight && this.chart3D.highlightMode === 'None')) {\n            var elements = document.getElementsByClassName(this.element.id + '_ej2_tooltipDeselected');\n            while (elements.length > 0) {\n                var element = elements[0];\n                var elementClassName = element.getAttribute('class') || '';\n                if (elementClassName.indexOf(this.element.id + '_ej2_tooltipDeselected') > -1) {\n                    element.setAttribute('class', elementClassName.replace(this.element.id + '_ej2_tooltipDeselected', ''));\n                    var index = parseFloat(element.id.split('-series-')[1].split('-point-')[0]);\n                    this.chart3D.highlightAnimation(element, index, 700, 0.2);\n                }\n            }\n        }\n    };\n    /**\n     * Gets the location of the symbol based on the current mouse position in the chart.\n     *\n     * @param {Point3D} point - The tooltip point.\n     * @returns {ChartLocation} - The location of the tooltip.\n     * @private\n     */\n    Tooltip3D.prototype.getSymbolLocation = function (point) {\n        var rect = document.getElementById(this.element.id + '_svg').getBoundingClientRect();\n        var upperElement;\n        if (point.series.columnFacet === 'Cylinder') {\n            upperElement = document.querySelectorAll('[id*=\"' + this.element.id + '-svg-' + (point.series.type.indexOf('Column') === -1 ? '0' : '1') + '-region-series-' + point.series.index + '-point-' + point.point.index + '\"]');\n        }\n        else {\n            upperElement = document.querySelectorAll('[id*=\"' + this.element.id + '-svg-' + (point.series.type.indexOf('Column') === -1 ? '5' : '2') + '-region-series-' + point.series.index + '-point-' + point.point.index + '\"]');\n        }\n        var tooltipElement;\n        if (upperElement) {\n            if (upperElement.length === 1) {\n                tooltipElement = upperElement[0].getBoundingClientRect();\n            }\n            else {\n                for (var i = 0; i < upperElement.length; i++) {\n                    var element = upperElement[i];\n                    if (element.id.indexOf('-' + point.point.index + '-back-front') !== -1 || element.id.indexOf('-' + point.point.index + '-front-back') !== -1) {\n                        tooltipElement = element.getBoundingClientRect();\n                        break;\n                    }\n                }\n            }\n            if (upperElement.length !== 0 && !tooltipElement) {\n                tooltipElement = upperElement[0].getBoundingClientRect();\n            }\n        }\n        var location = new _common_utils_helper__WEBPACK_IMPORTED_MODULE_1__.ChartLocation((this.chart3D.tooltip.location.x !== null) ? this.chart3D.tooltip.location.x :\n            tooltipElement.left - rect.left + (tooltipElement.width / 2), (this.chart3D.tooltip.location.y !== null) ?\n            this.chart3D.tooltip.location.y : tooltipElement.top - rect.top + (tooltipElement.height / 2));\n        return location;\n    };\n    /**\n     * Gets the tooltip text based on the provided point data.\n     *\n     * @param {Point3D} pointData - The data of the point for which the tooltip is generated.\n     * @returns {string} - The tooltip text.\n     * @private\n     */\n    Tooltip3D.prototype.getTooltipText = function (pointData) {\n        return this.parseTemplate(pointData.point, pointData.series, this.getFormat(this.chart3D, pointData.series), pointData.series.xAxis, pointData.series.yAxis);\n    };\n    /**\n     * Gets the template text based on the provided data.\n     *\n     * @param {Point3D} data - The data object for which the template text is generated.\n     * @returns {Chart3DPoint | Chart3DPoint[]} - The template text.\n     * @private\n     */\n    Tooltip3D.prototype.getTemplateText = function (data) {\n        if (this.template) {\n            var point = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)({}, data.point);\n            point.x = this.formatPointValue(data.point, data.series.xAxis, 'x', true, false);\n            point.y = this.formatPointValue(data.point, data.series.yAxis, 'y', false, true);\n            return point;\n        }\n        else {\n            return data.point;\n        }\n    };\n    /**\n     * Finds the mouse value based on the provided data and chart.\n     *\n     * @param {Point3D} data - The data object containing information about the point.\n     * @param {Chart3D} chart - The Chart3D instance.\n     * @returns {void}\n     * @private\n     */\n    Tooltip3D.prototype.findMouseValue = function (data, chart) {\n        if (!chart.requireInvertedAxis) {\n            this.valueX = (0,_utils_chart3dRender__WEBPACK_IMPORTED_MODULE_6__.valueToCoefficients)(data.point.xValue, data.series.xAxis) *\n                data.series.xAxis.rect.width + data.series.xAxis.rect.x;\n            this.valueY = chart.mouseY;\n        }\n        else {\n            this.valueY = (1 - (0,_utils_chart3dRender__WEBPACK_IMPORTED_MODULE_6__.valueToCoefficients)(data.point.xValue, data.series.xAxis)) * data.series.xAxis.rect.height\n                + data.series.xAxis.rect.y;\n            this.valueX = chart.mouseX;\n        }\n    };\n    /**\n     * Parses the template using the provided point, series, format, xAxis, and yAxis information.\n     *\n     * @param {Chart3DPoint} point - The point for which the template needs to be parsed.\n     * @param {Chart3DSeries} series - The series associated with the point.\n     * @param {string} format - The format string.\n     * @param {Chart3DAxis} xAxis - The X-axis of the chart.\n     * @param {Chart3DAxis} yAxis - The Y-axis of the chart.\n     * @returns {string} - The parsed template string.\n     * @private\n     */\n    Tooltip3D.prototype.parseTemplate = function (point, series, format, xAxis, yAxis) {\n        var val;\n        var textValue;\n        var regExp = RegExp;\n        for (var _i = 0, _a = Object.keys(point); _i < _a.length; _i++) {\n            var dataValue = _a[_i];\n            val = new regExp('${point' + '.' + dataValue + '}', 'gm');\n            format = format.replace(val.source, this.formatPointValue(point, val.source === '${point.x}' ? xAxis : yAxis, dataValue, val.source === '${point.x}', (val.source === '${point.y}')));\n        }\n        for (var _b = 0, _c = Object.keys(Object.getPrototypeOf(series)); _b < _c.length; _b++) {\n            var dataValue = _c[_b];\n            val = new regExp('${series' + '.' + dataValue + '}', 'gm');\n            textValue = series[dataValue];\n            format = format.replace(val.source, textValue);\n        }\n        return format;\n    };\n    /**\n     * Formats the point value based on the provided point, axis, dataValue, and other flags.\n     *\n     * @param {Chart3DPoint} point - The point for which the value needs to be formatted.\n     * @param {Chart3DAxis} axis - The axis associated with the point.\n     * @param {string} dataValue - The data value to be formatted.\n     * @param {boolean} isXPoint - Indicates whether the point is on the X-axis.\n     * @param {boolean} isYPoint - Indicates whether the point is on the Y-axis.\n     * @returns {string} - The formatted point value.\n     * @private\n     */\n    Tooltip3D.prototype.formatPointValue = function (point, axis, dataValue, isXPoint, isYPoint) {\n        var textValue;\n        var customLabelFormat;\n        var value;\n        if (axis.valueType !== 'Category' && isXPoint) {\n            customLabelFormat = axis.labelFormat && axis.labelFormat.match('{value}') !== null;\n            textValue = customLabelFormat ? axis.labelFormat.replace('{value}', axis.format(point[dataValue])) :\n                axis.format(point[dataValue]);\n        }\n        else if (isYPoint && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(point[dataValue])) {\n            customLabelFormat = axis.labelFormat && axis.labelFormat.match('{value}') !== null;\n            value = axis.format(point[dataValue]);\n            textValue = customLabelFormat ? axis.labelFormat.replace('{value}', value) : value;\n        }\n        else {\n            textValue = point[dataValue];\n        }\n        return textValue;\n    };\n    /**\n     * Gets the format for the tooltip based on the provided chart and series.\n     *\n     * @param {Chart3D} chart - The 3D chart instance.\n     * @param {Chart3DSeries} series - The 3D series for which the tooltip format is needed.\n     * @returns {string} - The tooltip format.\n     * @private\n     */\n    Tooltip3D.prototype.getFormat = function (chart, series) {\n        if (series.tooltipFormat) {\n            return series.tooltipFormat;\n        }\n        if (!series.tooltipFormat && chart.tooltip.format) {\n            return chart.tooltip.format;\n        }\n        var textX = '${point.x}';\n        var format = textX;\n        return format + ' : ' + (chart.theme.indexOf('Tailwind3') > -1 ? '${point.y}' : '<b>${point.y}</b>');\n    };\n    /**\n     * Gets the 3D data (point and series) associated with the provided event in the chart.\n     *\n     * @param {MouseEvent | PointerEvent | TouchEvent | KeyboardEvent} event - The event for which to retrieve 3D data.\n     * @returns {Point3D} - The 3D data object containing the point and series information.\n     * @private\n     */\n    Tooltip3D.prototype.get3dData = function (event) {\n        var chart = this.chart3D;\n        var point = null;\n        var series = null;\n        var currentX = this.chart3D.mouseX;\n        var currentY = this.chart3D.mouseY;\n        var rect = this.chart3D.chartAxisLayoutPanel.seriesClipRect;\n        var index;\n        var pointIndex;\n        var seriesIndex;\n        var targetElement = event.target;\n        if (targetElement && currentX > rect.x && currentX < (rect.x + rect.width) &&\n            currentY > rect.y && currentY < (rect.y + rect.height)) {\n            var nodeName = targetElement.nodeName;\n            if ((nodeName === 'shape' || nodeName === 'path') && targetElement.id.indexOf('region') > 1) {\n                index = targetElement.id.match(/(\\d+)/g);\n                pointIndex = parseInt(index[index.length - 1].toString(), 10);\n                seriesIndex = parseInt(index[index.length - 2].toString(), 10);\n            }\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(seriesIndex)) {\n            series = chart.visibleSeries[seriesIndex];\n        }\n        if (series) {\n            if (series.visible) {\n                point = series.points[pointIndex];\n            }\n            if (point) {\n                return new _common_utils_helper__WEBPACK_IMPORTED_MODULE_1__.Point3D(point, series);\n            }\n        }\n        return new _common_utils_helper__WEBPACK_IMPORTED_MODULE_1__.Point3D(point, series);\n    };\n    /**\n     * Finds data based on the provided 3D data and the previous 3D data.\n     *\n     * @param {Point3D} data - The current 3D data.\n     * @param {Point3D} previous - The previous 3D data.\n     * @returns {boolean} - Returns true if the data is found based on the conditions.\n     * @private\n     */\n    Tooltip3D.prototype.findData = function (data, previous) {\n        return data.point && ((!previous || (previous.point !== data.point)) || (previous.point === data.point));\n    };\n    /**\n     * Gets the module name.\n     *\n     * @returns {string} - The module name.\n     */\n    Tooltip3D.prototype.getModuleName = function () {\n        /**\n         * Returns the module name\n         */\n        return 'Tooltip3D';\n    };\n    /**\n     * To destroy the tooltip.\n     *\n     * @returns {void}\n     * @private\n     */\n    Tooltip3D.prototype.destroy = function () {\n        /**\n         * Destroy method performed here\n         */\n        this.removeEventListener();\n    };\n    return Tooltip3D;\n}(_common_user_interaction_tooltip__WEBPACK_IMPORTED_MODULE_3__.BaseTooltip));\n\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-charts/src/chart3d/user-interaction/tooltip.js?");

/***/ })

}]);