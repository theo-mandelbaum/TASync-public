"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkej2_vue_samples"] = self["webpackChunkej2_vue_samples"] || []).push([["chunk-vendors-node_modules_syncfusion_ej2-pivotview_src_pivotfieldlist_base_field-list_js-c03d5907"],{

/***/ "./node_modules/@syncfusion/ej2-pivotview/src/pivotfieldlist/base/field-list.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-pivotview/src/pivotfieldlist/base/field-list.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PivotFieldList: () => (/* binding */ PivotFieldList)\n/* harmony export */ });\n/* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @syncfusion/ej2-base */ \"./node_modules/@syncfusion/ej2-base/index.js\");\n/* harmony import */ var _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @syncfusion/ej2-data */ \"./node_modules/@syncfusion/ej2-data/index.js\");\n/* harmony import */ var _base_engine__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../base/engine */ \"./node_modules/@syncfusion/ej2-pivotview/src/base/engine.js\");\n/* harmony import */ var _common_base_constant__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../common/base/constant */ \"./node_modules/@syncfusion/ej2-pivotview/src/common/base/constant.js\");\n/* harmony import */ var _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../common/base/css-constant */ \"./node_modules/@syncfusion/ej2-pivotview/src/common/base/css-constant.js\");\n/* harmony import */ var _common_base_pivot_common__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../common/base/pivot-common */ \"./node_modules/@syncfusion/ej2-pivotview/src/common/base/pivot-common.js\");\n/* harmony import */ var _renderer_renderer__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../renderer/renderer */ \"./node_modules/@syncfusion/ej2-pivotview/src/pivotfieldlist/renderer/renderer.js\");\n/* harmony import */ var _model_datasourcesettings__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../model/datasourcesettings */ \"./node_modules/@syncfusion/ej2-pivotview/src/model/datasourcesettings.js\");\n/* harmony import */ var _syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @syncfusion/ej2-popups */ \"./node_modules/@syncfusion/ej2-popups/index.js\");\n/* harmony import */ var _base_util__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../base/util */ \"./node_modules/@syncfusion/ej2-pivotview/src/base/util.js\");\n/* harmony import */ var _base_olap_engine__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../base/olap/engine */ \"./node_modules/@syncfusion/ej2-pivotview/src/base/olap/engine.js\");\nvar __extends = (undefined && undefined.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * Represents the PivotFieldList component.\n * ```html\n * <div id=\"pivotfieldlist\"></div>\n * <script>\n *  var pivotfieldlistObj = new PivotFieldList({ });\n *  pivotfieldlistObj.appendTo(\"#pivotfieldlist\");\n * </script>\n * ```\n */\nvar PivotFieldList = /** @class */ (function (_super) {\n    __extends(PivotFieldList, _super);\n    /**\n     * Constructor for creating the widget\n     *\n     * @param  {PivotFieldListModel} options - options\n     * @param  {string|HTMLElement} element - element\n     */\n    function PivotFieldList(options, element) {\n        var _this = _super.call(this, options, element) || this;\n        /** @hidden */\n        _this.pivotChange = false;\n        _this.isRequiredUpdate = true;\n        /** @hidden */\n        _this.lastSortInfo = {};\n        /** @hidden */\n        _this.lastFilterInfo = {};\n        /** @hidden */\n        _this.lastAggregationInfo = {};\n        /** @hidden */\n        _this.lastCalcFieldInfo = {};\n        /** @hidden */\n        _this.isPopupView = false;\n        /** @hidden */\n        _this.enableValueSorting = false;\n        _this.request = typeof window !== 'undefined' ? new XMLHttpRequest() : null;\n        _this.remoteData = [];\n        /** @hidden */\n        _this.actionObj = {};\n        /** @hidden */\n        _this.destroyEngine = false;\n        /** @hidden */\n        _this.defaultFieldListOrder = 'None';\n        /** @hidden */\n        _this.isDeferUpdateApplied = false;\n        _this.isInitial = true;\n        return _this;\n    }\n    /**\n     * To provide the array of modules needed for control rendering\n     *\n     * @returns {ModuleDeclaration[]} - ModuleDeclaration[]\n     * @hidden\n     */\n    PivotFieldList.prototype.requiredModules = function () {\n        var modules = [];\n        if (this.allowCalculatedField) {\n            modules.push({ args: [this], member: 'calculatedField' });\n        }\n        return modules;\n    };\n    /**\n     * @returns {AggregateTypes[]}- AggregateTypes[]\n     * @hidden\n     */\n    PivotFieldList.prototype.getAllSummaryType = function () {\n        return ['Sum', 'Count', 'DistinctCount', 'Product', 'Min', 'Max', 'Avg', 'Median', 'Index',\n            'PopulationVar', 'SampleVar', 'PopulationStDev', 'SampleStDev', 'RunningTotals', 'PercentageOfGrandTotal',\n            'PercentageOfColumnTotal', 'PercentageOfRowTotal', 'PercentageOfParentColumnTotal', 'PercentageOfParentRowTotal',\n            'DifferenceFrom', 'PercentageOfDifferenceFrom', 'PercentageOfParentTotal'];\n    };\n    /**\n     * For internal use only - Initialize the event handler;\n     *\n     * @private\n     */\n    PivotFieldList.prototype.preRender = function () {\n        if (this.dataSourceSettings && this.dataSourceSettings.providerType === 'SSAS') {\n            this.olapEngineModule = new _base_olap_engine__WEBPACK_IMPORTED_MODULE_10__.OlapEngine();\n            this.dataType = 'olap';\n        }\n        else {\n            this.engineModule = new _base_engine__WEBPACK_IMPORTED_MODULE_2__.PivotEngine();\n            this.dataType = 'pivot';\n        }\n        this.isAdaptive = _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice;\n        this.globalize = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Internationalization(this.locale);\n        this.renderModule = new _renderer_renderer__WEBPACK_IMPORTED_MODULE_6__.Render(this);\n        this.defaultLocale = {\n            staticFieldList: 'Pivot Field List',\n            fieldList: 'Field List',\n            dropFilterPrompt: 'Drop filter here',\n            dropColPrompt: 'Drop column here',\n            dropRowPrompt: 'Drop row here',\n            dropValPrompt: 'Drop value here',\n            addPrompt: 'Add field here',\n            adaptiveFieldHeader: 'Choose field',\n            centerHeader: 'Drag fields between axes below:',\n            add: 'Add',\n            drag: 'Drag',\n            filter: 'Filter',\n            filtered: 'Filtered',\n            sort: 'Sort',\n            remove: 'Remove',\n            filters: 'Filters',\n            rows: 'Rows',\n            columns: 'Columns',\n            values: 'Values',\n            CalculatedField: 'Calculated Field',\n            createCalculatedField: 'Create Calculated Field',\n            fieldName: 'Enter the field name',\n            error: 'Error',\n            invalidFormula: 'Invalid formula.',\n            dropText: 'Example: (\"Sum(Order_Count)\" + \"Sum(In_Stock)\") * 250',\n            dropTextMobile: 'Add fields and edit formula here.',\n            dropAction: 'Calculated field cannot be place in any other region except value axis.',\n            search: 'Search',\n            close: 'Close',\n            cancel: 'Cancel',\n            delete: 'Delete',\n            alert: 'Alert',\n            warning: 'Warning',\n            ok: 'OK',\n            allFields: 'All Fields',\n            formula: 'Formula',\n            fieldExist: 'A field already exists in this name. Please enter a different name.',\n            confirmText: 'A calculation field already exists in this name. Do you want to replace it?',\n            noMatches: 'No matches',\n            format: 'Summaries values by',\n            edit: 'Edit',\n            clear: 'Clear',\n            clearCalculatedField: 'Clear edited field info',\n            editCalculatedField: 'Edit calculated field',\n            sortAscending: 'Sort ascending order',\n            sortDescending: 'Sort descending order',\n            sortNone: 'Sort data order',\n            formulaField: 'Drag and drop fields to formula',\n            dragField: 'Drag field to formula',\n            clearFilter: 'Clear',\n            by: 'by',\n            enterValue: 'Enter value',\n            chooseDate: 'Enter date',\n            all: 'All',\n            multipleItems: 'Multiple items',\n            Equals: 'Equals',\n            DoesNotEquals: 'Does Not Equal',\n            BeginWith: 'Begins With',\n            DoesNotBeginWith: 'Does Not Begin With',\n            EndsWith: 'Ends With',\n            DoesNotEndsWith: 'Does Not End With',\n            Contains: 'Contains',\n            DoesNotContains: 'Does Not Contain',\n            GreaterThan: 'Greater Than',\n            GreaterThanOrEqualTo: 'Greater Than Or Equal To',\n            LessThan: 'Less Than',\n            LessThanOrEqualTo: 'Less Than Or Equal To',\n            Between: 'Between',\n            NotBetween: 'Not Between',\n            Before: 'Before',\n            BeforeOrEqualTo: 'Before Or Equal To',\n            After: 'After',\n            AfterOrEqualTo: 'After Or Equal To',\n            member: 'Member',\n            label: 'Label',\n            date: 'Date',\n            value: 'Value',\n            labelTextContent: 'Show the items for which the label',\n            dateTextContent: 'Show the items for which the date',\n            valueTextContent: 'Show the items for which',\n            And: 'and',\n            Sum: 'Sum',\n            Count: 'Count',\n            DistinctCount: 'Distinct Count',\n            Product: 'Product',\n            Avg: 'Avg',\n            Median: 'Median',\n            Min: 'Min',\n            Max: 'Max',\n            Index: 'Index',\n            SampleStDev: 'Sample StDev',\n            PopulationStDev: 'Population StDev',\n            SampleVar: 'Sample Var',\n            PopulationVar: 'Population Var',\n            RunningTotals: 'Running Totals',\n            DifferenceFrom: 'Difference From',\n            PercentageOfDifferenceFrom: '% of Difference From',\n            PercentageOfGrandTotal: '% of Grand Total',\n            PercentageOfColumnTotal: '% of Column Total',\n            PercentageOfRowTotal: '% of Row Total',\n            PercentageOfParentTotal: '% of Parent Total',\n            PercentageOfParentColumnTotal: '% of Parent Column Total',\n            PercentageOfParentRowTotal: '% of Parent Row Total',\n            MoreOption: 'More...',\n            Years: 'Years',\n            Quarters: 'Quarters',\n            Months: 'Months',\n            Days: 'Days',\n            Hours: 'Hours',\n            Minutes: 'Minutes',\n            Seconds: 'Seconds',\n            apply: 'Apply',\n            valueFieldSettings: 'Value field settings',\n            sourceName: 'Field name :',\n            sourceCaption: 'Field caption',\n            summarizeValuesBy: 'Summarize values by',\n            baseField: 'Base field',\n            baseItem: 'Base item',\n            example: 'e.g:',\n            editorDataLimitMsg: ' more items. Search to refine further.',\n            deferLayoutUpdate: 'Defer Layout Update',\n            null: 'null',\n            undefined: 'undefined',\n            groupOutOfRange: 'Out of Range',\n            fieldDropErrorAction: 'The field you are moving cannot be placed in that area of the report',\n            memberType: 'Field Type',\n            selectedHierarchy: 'Parent Hierarchy',\n            formatString: 'Format',\n            expressionField: 'Expression',\n            olapDropText: 'Example: [Measures].[Order Quantity] + ([Measures].[Order Quantity] * 0.10)',\n            customFormat: 'Enter custom format string',\n            numberFormatString: 'Example: C, P, 0000 %, ###0.##0#, etc.',\n            Measure: 'Measure',\n            Dimension: 'Dimension',\n            Standard: 'Standard',\n            Currency: 'Currency',\n            Percent: 'Percent',\n            Custom: 'Custom',\n            blank: '(Blank)',\n            fieldTooltip: 'Drag and drop fields to create an expression. ' +\n                'And, if you want to edit the existing calculated fields! ' +\n                'You can achieve it by simply selecting the field under \"Calculated Members\".',\n            fieldTitle: 'Field Name',\n            QuarterYear: 'Quarter Year',\n            caption: 'Field Caption',\n            copy: 'Copy',\n            of: 'of',\n            group: 'Group',\n            removeCalculatedField: 'Are you sure you want to delete this calculated field?',\n            yes: 'Yes',\n            no: 'No',\n            None: 'None',\n            qtr: 'Qtr',\n            grandTotal: 'Grand Total'\n        };\n        this.localeObj = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.L10n(this.getModuleName(), this.defaultLocale, this.locale);\n        this.isDragging = false;\n        this.isDeferLayoutUpdate = ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.isDeferLayoutUpdate) && !this.isPopupView) ?\n            this.allowDeferLayoutUpdate : this.isDeferLayoutUpdate;\n        this.wireEvent();\n    };\n    /**\n     * It performs to returnssorted headers.\n     *\n     * @param {IOlapField[]} fieldListData - It contains the olap field informations.\n     * @param {fieldList} fieldList - It contains the olap field list informations.\n     * @returns {ICustomProperties | IOlapCustomProperties} - It contains the internal properties that used for engine population.\n     * @hidden\n     */\n    PivotFieldList.prototype.frameCustomProperties = function (fieldListData, fieldList) {\n        if (this.pivotGridModule) {\n            this.pivotGridModule.updatePageSettings(false);\n        }\n        var isTabular = this.pivotGridModule ? this.pivotGridModule.isTabular : false;\n        var pageSettings = this.pivotGridModule ? this.pivotGridModule.pageSettings : this.pageSettings;\n        var isPaging = this.pivotGridModule ? this.pivotGridModule.enablePaging : false;\n        var isVirtualization = this.pivotGridModule ? this.pivotGridModule.enableVirtualization : false;\n        var enableHtmlSanitizer = this.pivotGridModule ? this.pivotGridModule.enableHtmlSanitizer : this.enableHtmlSanitizer;\n        var localeObj = this.pivotGridModule ? this.pivotGridModule.localeObj :\n            (this.staticPivotGridModule ? this.staticPivotGridModule.localeObj : this.localeObj);\n        var isDrillThrough = this.pivotGridModule ?\n            (this.pivotGridModule.allowDrillThrough || this.pivotGridModule.editSettings.allowEditing) : true;\n        var enableValueSorting = this.pivotGridModule ? this.pivotGridModule.enableValueSorting : undefined;\n        var allowDataCompression = this.pivotGridModule && this.pivotGridModule.allowDataCompression ?\n            this.pivotGridModule.allowDataCompression : false;\n        var enableOptimizedRendering = this.pivotGridModule && (this.pivotGridModule.enableVirtualization &&\n            this.pivotGridModule.virtualScrollSettings && this.pivotGridModule.virtualScrollSettings.allowSinglePage);\n        var customProperties;\n        if (this.dataType === 'olap') {\n            customProperties = {\n                mode: '',\n                savedFieldList: fieldList ? fieldList : undefined,\n                savedFieldListData: fieldListData ? fieldListData : undefined,\n                pageSettings: pageSettings,\n                enableValueSorting: enableValueSorting,\n                isDrillThrough: isDrillThrough,\n                localeObj: localeObj,\n                enableVirtualization: isVirtualization,\n                allowDataCompression: allowDataCompression\n            };\n        }\n        else {\n            customProperties = {\n                mode: '',\n                savedFieldList: undefined,\n                pageSettings: pageSettings,\n                enableValueSorting: enableValueSorting,\n                isDrillThrough: isDrillThrough,\n                localeObj: localeObj,\n                clonedReport: this.clonedReport,\n                globalize: this.globalize,\n                currenyCode: this.currencyCode,\n                enablePaging: isPaging,\n                enableVirtualization: isVirtualization,\n                enableHtmlSanitizer: enableHtmlSanitizer,\n                allowDataCompression: allowDataCompression,\n                enableOptimizedRendering: enableOptimizedRendering,\n                isTabularLayout: isTabular\n            };\n        }\n        return customProperties;\n    };\n    /**\n     * Initialize the control rendering\n     *\n     * @returns {void}\n     * @private\n     */\n    PivotFieldList.prototype.render = function () {\n        if (this.dataType === 'pivot' && this.dataSourceSettings.url && this.dataSourceSettings.url !== '') {\n            if (this.dataSourceSettings.mode === 'Server') {\n                this.guid = _base_util__WEBPACK_IMPORTED_MODULE_9__.PivotUtil.generateUUID();\n                this.initialLoad();\n            }\n            else {\n                var request = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Fetch(this.dataSourceSettings.url, 'GET');\n                request.send().then(function (response) { return typeof (response) === 'string' ? response : response.text(); })\n                    .then(this.onReadyStateChange.bind(this));\n            }\n        }\n        else {\n            this.initialLoad();\n        }\n    };\n    /**\n     *\n     * @hidden\n     *\n     */\n    PivotFieldList.prototype.getEngine = function (action, drillItem, sortItem, aggField, cField, filterItem, memberName, rawDataArgs, editArgs) {\n        var _this = this;\n        this.currentAction = action;\n        if (this.pivotGridModule) {\n            this.pivotGridModule.updatePageSettings(false);\n        }\n        var customProperties = {\n            pageSettings: this.pivotGridModule ? JSON.parse(this.pivotGridModule.getPageSettings()).pageSettings : undefined,\n            enableValueSorting: this.pivotGridModule ? this.pivotGridModule.enableValueSorting : undefined,\n            enableDrillThrough: this.pivotGridModule ?\n                (this.pivotGridModule.allowDrillThrough || this.pivotGridModule.editSettings.allowEditing) : true,\n            locale: JSON.stringify(_base_util__WEBPACK_IMPORTED_MODULE_9__.PivotUtil.getLocalizedObject(this)),\n            savedFieldList: (action === 'onDrop' && this.engineModule.fieldList !== null) ?\n                _base_util__WEBPACK_IMPORTED_MODULE_9__.PivotUtil.getClonedFieldList(this.engineModule.fieldList, true) : undefined,\n            enableOptimizedRendering: this.pivotGridModule && (this.pivotGridModule.enableVirtualization &&\n                this.pivotGridModule.virtualScrollSettings && this.pivotGridModule.virtualScrollSettings.allowSinglePage),\n            requestType: 'string',\n            headers: { 'Content-type': 'application/json' }\n        };\n        if (this.request.readyState === XMLHttpRequest.UNSENT || this.request.readyState === XMLHttpRequest.OPENED) {\n            this.request.withCredentials = false;\n        }\n        var params = {\n            request: this.request,\n            dataSourceSettings: JSON.parse(this.getPersistData()).dataSourceSettings,\n            action: action,\n            customProperties: {},\n            internalProperties: customProperties,\n            drillItem: drillItem,\n            sortItem: sortItem,\n            aggregatedItem: aggField,\n            calculatedItem: cField,\n            filterItem: filterItem,\n            memberName: memberName,\n            fetchRawDataArgs: rawDataArgs,\n            editArgs: editArgs,\n            hash: this.pivotGridModule ? this.pivotGridModule.guid : this.staticPivotGridModule ?\n                this.staticPivotGridModule.guid : this.guid,\n            isGroupingUpdated: (this.currentAction === 'onRefresh' && this.dataSourceSettings.groupSettings.length > 0) ? true :\n                ((this.pivotGridModule && this.pivotGridModule.groupingModule) ? this.pivotGridModule.groupingModule.isUpdate : false)\n        };\n        this.trigger(_common_base_constant__WEBPACK_IMPORTED_MODULE_3__.beforeServiceInvoke, params, function (observedArgs) {\n            _this.request = observedArgs.request;\n            params.internalProperties = observedArgs.internalProperties;\n            params.customProperties = observedArgs.customProperties;\n            params.dataSourceSettings = observedArgs.dataSourceSettings;\n            params.calculatedItem = observedArgs.calculatedItem;\n            params.drillItem = observedArgs.drillItem;\n            params.editArgs = observedArgs.editArgs;\n            params.fetchRawDataArgs = observedArgs.fetchRawDataArgs;\n            params.filterItem = observedArgs.filterItem;\n            params.hash = observedArgs.hash;\n            params.memberName = observedArgs.memberName;\n            params.sortItem = observedArgs.sortItem;\n        });\n        this.request.open('POST', this.dataSourceSettings.url, true);\n        this.request.onreadystatechange = this.onSuccess.bind(this);\n        var keys = Object.keys(params.internalProperties.headers);\n        for (var i = 0; i < keys.length; i++) {\n            var headerKey = keys[i];\n            var headerValue = String(params.internalProperties.headers[headerKey]);\n            this.request.setRequestHeader(headerKey, headerValue);\n        }\n        if (params.internalProperties.requestType === 'string') {\n            this.request.send(JSON.stringify(params));\n        }\n        else if (params.internalProperties.requestType === 'base64') {\n            this.request.send(btoa(JSON.stringify(params)));\n        }\n    };\n    PivotFieldList.prototype.onSuccess = function () {\n        if (this.request.readyState === XMLHttpRequest.DONE) {\n            try {\n                var params = {\n                    action: this.currentAction,\n                    response: this.request.responseText\n                };\n                this.trigger(_common_base_constant__WEBPACK_IMPORTED_MODULE_3__.afterServiceInvoke, params);\n                var engine = JSON.parse(this.request.responseText);\n                if (this.currentAction === 'fetchFieldMembers') {\n                    var currentMembers = JSON.parse(engine.members);\n                    var dateMembers = [];\n                    var members = {};\n                    this.engineModule.globalize = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.globalize) ? this.globalize : new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Internationalization();\n                    this.engineModule.formatFields = this.engineModule.setFormattedFields(this.dataSourceSettings.formatSettings);\n                    var isDateField = _base_util__WEBPACK_IMPORTED_MODULE_9__.PivotUtil.isDateField(engine.memberName, this.engineModule);\n                    var isNumberType = this.engineModule.fieldList[engine.memberName].type === 'number';\n                    var keys = Object.keys(currentMembers);\n                    for (var i = 0, j = keys.length; i < j; i++) {\n                        var values = currentMembers[keys[i]];\n                        var formattedValue = isDateField ?\n                            this.engineModule.getFormattedValue(values.Name, engine.memberName) :\n                            { formattedText: values.Caption };\n                        members[keys[i]] = {\n                            index: values.Index, ordinal: values.Ordinal,\n                            isDrilled: values.IsDrilled, caption: formattedValue.formattedText\n                        };\n                        dateMembers.push({\n                            formattedText: formattedValue.formattedText,\n                            actualText: isDateField ? formattedValue.actualText : isNumberType ?\n                                (!isNaN(Number(values.Name)) ? Number(values.Name) : values.Name) : values.Name\n                        });\n                    }\n                    this.engineModule.fieldList[engine.memberName].members = members;\n                    this.engineModule.fieldList[engine.memberName].dateMember = dateMembers;\n                    this.pivotButtonModule.updateFilterEvents();\n                }\n                else {\n                    var fList = _base_util__WEBPACK_IMPORTED_MODULE_9__.PivotUtil.formatFieldList(JSON.parse(engine.fieldList));\n                    if (this.engineModule.fieldList) {\n                        var keys = Object.keys(this.engineModule.fieldList);\n                        for (var i = 0; i < keys.length; i++) {\n                            if (this.engineModule.fieldList[keys[i]] && fList[keys[i]]) {\n                                fList[keys[i]].dateMember = this.engineModule.fieldList[keys[i]].dateMember;\n                                fList[keys[i]].formattedMembers = this.engineModule.fieldList[keys[i]].formattedMembers;\n                                fList[keys[i]].members = this.engineModule.fieldList[keys[i]].members;\n                            }\n                        }\n                    }\n                    this.engineModule.fieldList = fList;\n                    this.engineModule.fields = JSON.parse(engine.fields);\n                    this.engineModule.rowCount = JSON.parse(engine.pivotCount).RowCount;\n                    this.engineModule.columnCount = JSON.parse(engine.pivotCount).ColumnCount;\n                    this.engineModule.rowStartPos = JSON.parse(engine.pivotCount).RowStartPosition;\n                    this.engineModule.colStartPos = JSON.parse(engine.pivotCount).ColumnStartPosition;\n                    this.engineModule.rowFirstLvl = JSON.parse(engine.pivotCount).RowFirstLevel;\n                    this.engineModule.colFirstLvl = JSON.parse(engine.pivotCount).ColumnFirstLevel;\n                    var rowPos = void 0;\n                    var pivotValues = _base_util__WEBPACK_IMPORTED_MODULE_9__.PivotUtil.formatPivotValues(JSON.parse(engine.pivotValue));\n                    for (var rCnt = 0; rCnt < pivotValues.length; rCnt++) {\n                        if (pivotValues[rCnt] && pivotValues[rCnt][0] && pivotValues[rCnt][0].axis === 'row') {\n                            rowPos = rCnt;\n                            break;\n                        }\n                    }\n                    this.engineModule.headerContent = _base_util__WEBPACK_IMPORTED_MODULE_9__.PivotUtil.frameContent(pivotValues, 'header', rowPos, this);\n                    this.engineModule.pageSettings = this.pivotGridModule ? this.pivotGridModule.pageSettings : undefined;\n                    var valueSort = JSON.parse(engine.dataSourceSettings).ValueSortSettings;\n                    this.engineModule.valueSortSettings = {\n                        headerText: valueSort.HeaderText,\n                        headerDelimiter: valueSort.HeaderDelimiter,\n                        sortOrder: valueSort.SortOrder,\n                        columnIndex: valueSort.ColumnIndex\n                    };\n                    this.engineModule.pivotValues = pivotValues;\n                    this.engineModule.isEmptyData = this.dataSourceSettings.values.length === 0 ? true : false;\n                }\n            }\n            catch (error) {\n                this.engineModule.pivotValues = [];\n            }\n            if (this.currentAction !== 'fetchFieldMembers') {\n                if (this.isInitial && !this.isPopupView) {\n                    this.initEngine();\n                    this.isInitial = false;\n                }\n                else {\n                    this.enginePopulatedEventMethod(this, true, false);\n                }\n                if (this.calculatedFieldModule && this.currentAction === 'onCalcOperation') {\n                    this.calculatedFieldModule.endDialog();\n                    if (this.calculatedFieldModule.isRequireUpdate) {\n                        this.calculatedFieldModule.isRequireUpdate = false;\n                    }\n                }\n                if (this.pivotGridModule && this.pivotGridModule.calculatedFieldModule &&\n                    this.pivotGridModule.calculatedFieldModule.isRequireUpdate) {\n                    this.pivotGridModule.calculatedFieldModule.endDialog();\n                    this.pivotGridModule.calculatedFieldModule.isRequireUpdate = false;\n                }\n            }\n        }\n    };\n    PivotFieldList.prototype.onReadyStateChange = function (result) {\n        var dataSource = [];\n        if (this.dataSourceSettings.type === 'CSV') {\n            var jsonObject = result.split(/\\r?\\n|\\r/);\n            for (var i = 0; i < jsonObject.length; i++) {\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(jsonObject[i]) && jsonObject[i] !== '') {\n                    dataSource.push(jsonObject[i].split(','));\n                }\n            }\n        }\n        else {\n            try {\n                dataSource = JSON.parse(result);\n            }\n            catch (error) {\n                dataSource = [];\n            }\n        }\n        if (dataSource && dataSource.length > 0) {\n            this.setProperties({ dataSourceSettings: { dataSource: dataSource } }, true);\n        }\n        this.initialLoad();\n    };\n    PivotFieldList.prototype.initialLoad = function () {\n        var _this = this;\n        var loadArgs = {\n            dataSourceSettings: this.dataSourceSettings,\n            defaultFieldListOrder: this.defaultFieldListOrder\n        };\n        this.trigger(_common_base_constant__WEBPACK_IMPORTED_MODULE_3__.load, loadArgs, function (observedArgs) {\n            _this.dataSourceSettings = observedArgs.dataSourceSettings;\n            _this.defaultFieldListOrder = loadArgs.defaultFieldListOrder;\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([_this.element], _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.ROOT);\n            if (_this.enableRtl) {\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([_this.element], _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.RTL);\n            }\n            else {\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([_this.element], _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.RTL);\n            }\n            if (_this.isAdaptive) {\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([_this.element], _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.DEVICE);\n            }\n            else {\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([_this.element], _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.DEVICE);\n            }\n            if (_this.cssClass) {\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([_this.element], _this.cssClass.split(' '));\n            }\n            _this.notify(_common_base_constant__WEBPACK_IMPORTED_MODULE_3__.initialLoad, {});\n        });\n    };\n    /**\n     *\n     * Binding events to the Pivot Field List element.\n     *\n     * @hidden\n     */\n    PivotFieldList.prototype.wireEvent = function () {\n        this.on(_common_base_constant__WEBPACK_IMPORTED_MODULE_3__.initialLoad, this.generateData, this);\n        this.on(_common_base_constant__WEBPACK_IMPORTED_MODULE_3__.dataReady, this.fieldListRender, this);\n    };\n    /**\n     *\n     * Unbinding events from the element on widget destroy.\n     *\n     * @hidden\n     */\n    PivotFieldList.prototype.unWireEvent = function () {\n        if (this.pivotGridModule && this.pivotGridModule.isDestroyed) {\n            return;\n        }\n        this.off(_common_base_constant__WEBPACK_IMPORTED_MODULE_3__.initialLoad, this.generateData);\n        this.off(_common_base_constant__WEBPACK_IMPORTED_MODULE_3__.dataReady, this.fieldListRender);\n    };\n    /**\n     * Get the properties to be maintained in the persisted state.\n     *\n     * @returns {string}\n     */\n    PivotFieldList.prototype.getPersistData = function () {\n        var keyEntity = ['dataSourceSettings'];\n        return this.addOnPersist(keyEntity);\n    };\n    /**\n     * Get component name.\n     *\n     * @returns string\n     * @private\n     */\n    PivotFieldList.prototype.getModuleName = function () {\n        return 'pivotfieldlist';\n    };\n    /**\n     * Called internally if any of the property value changed.\n     *\n     * @hidden\n     */\n    PivotFieldList.prototype.onPropertyChanged = function (newProp, oldProp) {\n        var requireRefresh = false;\n        for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {\n            var prop = _a[_i];\n            switch (prop) {\n                case 'locale':\n                    _super.prototype.refresh.call(this);\n                    break;\n                case 'dataSourceSettings':\n                    if (newProp.dataSourceSettings && ((!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(newProp.dataSourceSettings.dataSource) &&\n                        this.clonedDataSet !== newProp.dataSourceSettings.dataSource && newProp.dataSourceSettings.groupSettings) ||\n                        (Object.keys(newProp.dataSourceSettings).length === 1 && Object.keys(newProp.dataSourceSettings)[0] === 'dataSource'\n                            && this.dataSourceSettings.groupSettings.length > 0))) {\n                        this.clonedDataSet = newProp.dataSourceSettings.dataSource;\n                        this.engineModule.groupingFields = {};\n                    }\n                    if (newProp.dataSourceSettings && Object.keys(newProp.dataSourceSettings).length === 1\n                        && newProp.dataSourceSettings.groupSettings && this.dataType === 'pivot') {\n                        var control = !this.isPopupView ? this.staticPivotGridModule : this.pivotGridModule;\n                        if (control) {\n                            control.updateGroupingReport(newProp.dataSourceSettings.groupSettings, 'Date');\n                        }\n                    }\n                    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(newProp.dataSourceSettings.dataSource) || (this.dataType === 'olap' && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(newProp.dataSourceSettings.url))) {\n                        if (this.dataType !== 'olap') {\n                            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.savedDataSourceSettings)) {\n                                _base_util__WEBPACK_IMPORTED_MODULE_9__.PivotUtil.updateDataSourceSettings(this.staticPivotGridModule, this.savedDataSourceSettings);\n                                this.savedDataSourceSettings = undefined;\n                            }\n                            if (newProp.dataSourceSettings.dataSource && (newProp.dataSourceSettings.dataSource.length === 0)\n                                && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.staticPivotGridModule)) {\n                                this.savedDataSourceSettings =\n                                    _base_util__WEBPACK_IMPORTED_MODULE_9__.PivotUtil.getClonedDataSourceSettings(this.staticPivotGridModule.dataSourceSettings);\n                                this.staticPivotGridModule.setProperties({ dataSourceSettings: {\n                                        rows: [],\n                                        columns: [],\n                                        values: [],\n                                        filters: []\n                                    } }, true);\n                            }\n                        }\n                        if (this.dataType === 'pivot') {\n                            this.engineModule.fieldList = null;\n                            this.engineModule.isEmptyData = true;\n                            this.engineModule.data = [];\n                            this.engineModule.pivotValues = [];\n                            this.engineModule.groupingFieldsInfo = {};\n                        }\n                        else if (this.dataType === 'olap') {\n                            this.olapEngineModule.fieldList = {};\n                            this.olapEngineModule.fieldListData = undefined;\n                            this.olapEngineModule.isEmptyData = true;\n                        }\n                        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.staticPivotGridModule)) {\n                            this.staticPivotGridModule.pivotValues = [];\n                        }\n                        this.initialLoad();\n                    }\n                    if (_base_util__WEBPACK_IMPORTED_MODULE_9__.PivotUtil.isButtonIconRefesh(prop, oldProp, newProp)) {\n                        if (this.isPopupView && this.pivotGridModule &&\n                            this.pivotGridModule.showGroupingBar && this.pivotGridModule.groupingBarModule) {\n                            var filters = _base_util__WEBPACK_IMPORTED_MODULE_9__.PivotUtil.cloneFieldSettings(this.dataSourceSettings.filters);\n                            var values = _base_util__WEBPACK_IMPORTED_MODULE_9__.PivotUtil.cloneFieldSettings(this.dataSourceSettings.values);\n                            var rows = _base_util__WEBPACK_IMPORTED_MODULE_9__.PivotUtil.cloneFieldSettings(this.dataSourceSettings.rows);\n                            var columns = _base_util__WEBPACK_IMPORTED_MODULE_9__.PivotUtil.cloneFieldSettings(this.dataSourceSettings.columns);\n                            this.pivotGridModule.setProperties({ dataSourceSettings: {\n                                    rows: rows, columns: columns, values: values, filters: filters\n                                } }, true);\n                            this.pivotGridModule.axisFieldModule.render();\n                        }\n                        else if (!this.isPopupView && this.staticPivotGridModule && !this.staticPivotGridModule.isDestroyed) {\n                            var pivot = this.staticPivotGridModule;\n                            if (pivot.showGroupingBar && pivot.groupingBarModule) {\n                                pivot.axisFieldModule.render();\n                            }\n                            if (pivot.showFieldList && pivot.pivotFieldListModule) {\n                                var rows = _base_util__WEBPACK_IMPORTED_MODULE_9__.PivotUtil.cloneFieldSettings(pivot.dataSourceSettings.rows);\n                                var columns = _base_util__WEBPACK_IMPORTED_MODULE_9__.PivotUtil.cloneFieldSettings(pivot.dataSourceSettings.columns);\n                                var values = _base_util__WEBPACK_IMPORTED_MODULE_9__.PivotUtil.cloneFieldSettings(pivot.dataSourceSettings.values);\n                                var filters = _base_util__WEBPACK_IMPORTED_MODULE_9__.PivotUtil.cloneFieldSettings(pivot.dataSourceSettings.filters);\n                                pivot.pivotFieldListModule.setProperties({ dataSourceSettings: {\n                                        rows: rows, columns: columns, values: values, filters: filters\n                                    } }, true);\n                                pivot.pivotFieldListModule.axisFieldModule.render();\n                                if (pivot.pivotFieldListModule.treeViewModule.fieldTable && !pivot.isAdaptive) {\n                                    pivot.pivotFieldListModule.notify(_common_base_constant__WEBPACK_IMPORTED_MODULE_3__.treeViewUpdate, {});\n                                }\n                            }\n                        }\n                        this.axisFieldModule.render();\n                        if (this.treeViewModule.fieldTable && !this.isAdaptive) {\n                            this.notify(_common_base_constant__WEBPACK_IMPORTED_MODULE_3__.treeViewUpdate, {});\n                        }\n                    }\n                    else {\n                        this.remoteData = [];\n                        if (this.dataType === 'pivot' && this.dataSourceSettings.url && this.dataSourceSettings.url !== '' &&\n                            ('type' in newProp.dataSourceSettings || 'url' in newProp.dataSourceSettings)) {\n                            this.engineModule.fieldList = null;\n                            this.render();\n                        }\n                    }\n                    break;\n                case 'aggregateTypes':\n                    if (this.axisFieldModule) {\n                        this.axisFieldModule.render();\n                    }\n                    if (this.pivotGridModule && this.pivotGridModule.axisFieldModule) {\n                        this.pivotGridModule.setProperties({ aggregateTypes: newProp.aggregateTypes }, true);\n                        this.pivotGridModule.axisFieldModule.render();\n                    }\n                    break;\n                case 'showValuesButton':\n                    if (this.axisFieldModule) {\n                        this.axisFieldModule.render();\n                    }\n                    if (this.pivotGridModule && this.pivotGridModule.showGroupingBar &&\n                        this.pivotGridModule.groupingBarModule && this.pivotGridModule.axisFieldModule) {\n                        this.pivotGridModule.setProperties({ showValuesButton: newProp.showValuesButton }, true);\n                        this.pivotGridModule.axisFieldModule.render();\n                    }\n                    break;\n                case 'enableRtl':\n                    if (this.enableRtl) {\n                        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([this.element], _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.RTL);\n                    }\n                    else {\n                        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([this.element], _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.RTL);\n                    }\n                    requireRefresh = true;\n                    break;\n                case 'enableFieldSearching':\n                case 'allowCalculatedField':\n                    this.refresh();\n                    break;\n                case 'allowDeferLayoutUpdate':\n                    this.isDeferLayoutUpdate = this.allowDeferLayoutUpdate;\n                    this.fieldListRender();\n                    break;\n            }\n            if (requireRefresh) {\n                this.fieldListRender();\n            }\n        }\n    };\n    PivotFieldList.prototype.initEngine = function () {\n        var _this = this;\n        if (this.dataType === 'pivot') {\n            var data = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.dataSourceSettings.dataSource) ?\n                this.dataSourceSettings.dataSource[0] : !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.engineModule.data) ?\n                this.engineModule.data[0] : undefined;\n            if (data && this.pivotCommon) {\n                var isArray = Object.prototype.toString.call(data) === '[object Array]';\n                if (isArray && this.dataSourceSettings.type === 'JSON') {\n                    this.pivotCommon.errorDialog.createErrorDialog(this.localeObj.getConstant('error'), this.localeObj.getConstant('invalidJSON'));\n                    return;\n                }\n                else if (!isArray && this.dataSourceSettings.type === 'CSV') {\n                    this.pivotCommon.errorDialog.createErrorDialog(this.localeObj.getConstant('error'), this.localeObj.getConstant('invalidCSV'));\n                    return;\n                }\n            }\n        }\n        var args = {\n            dataSourceSettings: _base_util__WEBPACK_IMPORTED_MODULE_9__.PivotUtil.getClonedDataSourceSettings(this.dataSourceSettings)\n        };\n        var control = this.isPopupView ? this.pivotGridModule : this;\n        control.trigger(_common_base_constant__WEBPACK_IMPORTED_MODULE_3__.enginePopulating, args, function (observedArgs) {\n            _base_util__WEBPACK_IMPORTED_MODULE_9__.PivotUtil.updateDataSourceSettings(_this, observedArgs.dataSourceSettings);\n            if (_this.dataType === 'pivot') {\n                if (_this.dataSourceSettings.groupSettings && _this.dataSourceSettings.groupSettings.length > 0) {\n                    var pivotDataSet = _this.engineModule.data;\n                    _this.clonedDataSet = (_this.clonedDataSet ? _this.clonedDataSet : _this.dataSourceSettings.type === 'CSV' ? _base_util__WEBPACK_IMPORTED_MODULE_9__.PivotUtil.getClonedCSVData(pivotDataSet)\n                        : _base_util__WEBPACK_IMPORTED_MODULE_9__.PivotUtil.getClonedData(pivotDataSet));\n                    var dataSourceSettings = JSON.parse(_this.getPersistData()).dataSourceSettings;\n                    dataSourceSettings.dataSource = [];\n                    _this.clonedReport = _this.clonedReport ? _this.clonedReport : dataSourceSettings;\n                }\n                var customProperties = _this.frameCustomProperties();\n                customProperties.enableValueSorting = _this.staticPivotGridModule ?\n                    _this.staticPivotGridModule.enableValueSorting : _this.enableValueSorting;\n                if (_this.dataSourceSettings.mode !== 'Server') {\n                    _this.engineModule.renderEngine(_this.dataSourceSettings, customProperties, _this.aggregateCellInfo\n                        ? _this.getValueCellInfo.bind(_this) : undefined, _this.onHeadersSort ? _this.getHeaderSortInfo.bind(_this) : undefined);\n                }\n                _this.pivotFieldList = _this.engineModule.fieldList;\n                var eventArgs = {\n                    pivotFieldList: _this.pivotFieldList,\n                    pivotValues: _this.engineModule.pivotValues\n                };\n                var this$_1 = _this;\n                control.trigger(_common_base_constant__WEBPACK_IMPORTED_MODULE_3__.enginePopulated, eventArgs, function (observedArgs) {\n                    this$_1.pivotFieldList = observedArgs.pivotFieldList;\n                    this$_1.engineModule.pivotValues = observedArgs.pivotValues;\n                    this$_1.notify(_common_base_constant__WEBPACK_IMPORTED_MODULE_3__.dataReady, {});\n                    this$_1.trigger(_common_base_constant__WEBPACK_IMPORTED_MODULE_3__.dataBound);\n                });\n            }\n            else if (_this.dataType === 'olap') {\n                _base_util__WEBPACK_IMPORTED_MODULE_9__.PivotUtil.renderOlapEngine(_this);\n                _this.pivotFieldList = _this.olapEngineModule.fieldList;\n                var eventArgs = {\n                    pivotFieldList: _this.pivotFieldList,\n                    pivotValues: _this.olapEngineModule.pivotValues\n                };\n                var this$_2 = _this;\n                control.trigger(_common_base_constant__WEBPACK_IMPORTED_MODULE_3__.enginePopulated, eventArgs, function (observedArgs) {\n                    this$_2.pivotFieldList = observedArgs.pivotFieldList;\n                    this$_2.olapEngineModule.pivotValues = observedArgs.pivotValues;\n                    this$_2.notify(_common_base_constant__WEBPACK_IMPORTED_MODULE_3__.dataReady, {});\n                    this$_2.trigger(_common_base_constant__WEBPACK_IMPORTED_MODULE_3__.dataBound);\n                });\n            }\n        });\n        if (this.defaultFieldListOrder !== 'None') {\n            if (this.treeViewModule.fieldTable && !this.isAdaptive) {\n                this.notify(_common_base_constant__WEBPACK_IMPORTED_MODULE_3__.treeViewUpdate, {});\n            }\n        }\n    };\n    PivotFieldList.prototype.generateData = function () {\n        this.pivotFieldList = {};\n        if (this.dataSourceSettings && (this.dataSourceSettings.dataSource || this.dataSourceSettings.url)) {\n            if ((this.dataSourceSettings.url !== '' && this.dataType === 'olap') ||\n                (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.dataSourceSettings.dataSource) && this.dataSourceSettings.dataSource.length > 0)) {\n                if (this.dataType === 'pivot') {\n                    this.engineModule.data = this.dataSourceSettings.dataSource;\n                }\n                this.initEngine();\n            }\n            else if (this.dataSourceSettings.dataSource instanceof _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__.DataManager) {\n                if (this.dataType === 'pivot' && this.remoteData.length > 0) {\n                    this.engineModule.data = this.remoteData;\n                    this.initEngine();\n                }\n                else {\n                    setTimeout(this.getData.bind(this), 100);\n                }\n            }\n            else {\n                if (this.dataSourceSettings.mode === 'Server') {\n                    this.getEngine('onRefresh');\n                }\n                else {\n                    this.notify(_common_base_constant__WEBPACK_IMPORTED_MODULE_3__.dataReady, {});\n                }\n            }\n        }\n        else {\n            this.notify(_common_base_constant__WEBPACK_IMPORTED_MODULE_3__.dataReady, {});\n            this.trigger(_common_base_constant__WEBPACK_IMPORTED_MODULE_3__.dataBound);\n        }\n    };\n    PivotFieldList.prototype.getValueCellInfo = function (aggregateObj) {\n        var args = aggregateObj;\n        this.trigger(_common_base_constant__WEBPACK_IMPORTED_MODULE_3__.aggregateCellInfo, args);\n        return args;\n    };\n    /**\n     *\n     * @param {HeadersSortEventArgs} sortingObj - It contains the current sorting information.\n     * @returns {void}\n     * @hidden\n     */\n    PivotFieldList.prototype.getHeaderSortInfo = function (sortingObj) {\n        var args = sortingObj;\n        this.trigger(_common_base_constant__WEBPACK_IMPORTED_MODULE_3__.onHeadersSort, args);\n        return args;\n    };\n    PivotFieldList.prototype.getData = function () {\n        if (this.dataSourceSettings.dataSource.defaultQuery) {\n            this.dataSourceSettings.dataSource.executeQuery(this.dataSourceSettings.dataSource\n                .defaultQuery).then(this.executeQuery.bind(this));\n        }\n        else {\n            this.dataSourceSettings.dataSource.executeQuery(new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__.Query()).then(this.executeQuery.bind(this));\n        }\n    };\n    PivotFieldList.prototype.executeQuery = function (e) {\n        this.engineModule.data = e.result;\n        this.initEngine();\n    };\n    PivotFieldList.prototype.fieldListRender = function () {\n        this.element.innerHTML = '';\n        var showDialog;\n        if (this.renderMode === 'Popup' && this.dialogRenderer.fieldListDialog && !this.dialogRenderer.fieldListDialog.isDestroyed) {\n            showDialog = this.dialogRenderer.fieldListDialog.visible;\n            this.dialogRenderer.fieldListDialog.destroy();\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.remove)(document.getElementById(this.element.id + '_Container'));\n        }\n        this.renderModule.render();\n        if (this.renderMode === 'Popup') {\n            this.fieldListSpinnerElement = this.dialogRenderer.fieldListDialog.element;\n            if (showDialog) {\n                this.dialogRenderer.fieldListDialog.show();\n            }\n        }\n        else {\n            this.fieldListSpinnerElement = this.element.querySelector('.e-pivotfieldlist-container');\n        }\n        if (this.spinnerTemplate) {\n            (0,_syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_8__.createSpinner)({\n                target: this.fieldListSpinnerElement, template: this.spinnerTemplate,\n                cssClass: this.cssClass ? this.cssClass : undefined\n            }, this.createElement);\n        }\n        else {\n            (0,_syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_8__.createSpinner)({ target: this.fieldListSpinnerElement, cssClass: this.cssClass ? this.cssClass : undefined }, this.createElement);\n        }\n        var args = {\n            pivotEngine: this.dataType === 'olap' ? this.olapEngineModule : this.engineModule,\n            dataSourceSettings: this.dataSourceSettings,\n            id: this.element.id,\n            element: this.renderMode === 'Popup' ? this.dialogRenderer.fieldListDialog.element : (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('#' + this.element.id + '_Container', this.element),\n            moduleName: this.getModuleName(),\n            enableRtl: this.enableRtl,\n            enableHtmlSanitizer: this.enableHtmlSanitizer,\n            isAdaptive: this.isAdaptive,\n            renderMode: this.renderMode,\n            localeObj: this.localeObj,\n            dataType: this.dataType,\n            cssClass: this.cssClass\n        };\n        this.pivotCommon = new _common_base_pivot_common__WEBPACK_IMPORTED_MODULE_5__.PivotCommon(args);\n        this.pivotCommon.control = this;\n        if (this.allowDeferLayoutUpdate) {\n            this.clonedDataSource = _base_util__WEBPACK_IMPORTED_MODULE_9__.PivotUtil.getClonedDataSourceSettings(this.dataSourceSettings);\n            if (this.dataType === 'olap') {\n                this.clonedFieldListData = _base_util__WEBPACK_IMPORTED_MODULE_9__.PivotUtil.cloneOlapFieldSettings(this.olapEngineModule.fieldListData);\n            }\n            this.clonedFieldList = _base_util__WEBPACK_IMPORTED_MODULE_9__.PivotUtil.getClonedFieldList(this.pivotFieldList);\n        }\n        var control = !this.isPopupView ? this.staticPivotGridModule : this.pivotGridModule;\n        if (control && control.toolbarModule) {\n            _base_util__WEBPACK_IMPORTED_MODULE_9__.PivotUtil.toggleFieldListIconVisibility(control);\n        }\n    };\n    PivotFieldList.prototype.getFieldCaption = function (dataSourceSettings) {\n        var captionData = this.getFields(dataSourceSettings);\n        var engineModule = this.dataType === 'olap' ? this.olapEngineModule : this.engineModule;\n        if (captionData.length > 0 && engineModule && engineModule.fieldList) {\n            var lnt = captionData.length;\n            while (lnt--) {\n                if (captionData[lnt]) {\n                    for (var _i = 0, _a = captionData[lnt]; _i < _a.length; _i++) {\n                        var obj = _a[_i];\n                        if (obj) {\n                            if (engineModule.fieldList[obj.name]) {\n                                if (obj.caption) {\n                                    engineModule.fieldList[obj.name].caption = obj.caption;\n                                }\n                                else {\n                                    engineModule.fieldList[obj.name].caption = obj.name;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        else {\n            return;\n        }\n    };\n    PivotFieldList.prototype.getFields = function (dataSourceSettings) {\n        return [dataSourceSettings.rows, dataSourceSettings.columns, dataSourceSettings.values,\n            dataSourceSettings.filters];\n    };\n    /**\n     * Updates the PivotEngine using dataSource from Pivot Field List component.\n     *\n     * @function updateDataSource\n     * @returns {void}\n     * @hidden\n     */\n    PivotFieldList.prototype.updateDataSource = function (isTreeViewRefresh, isEngineRefresh) {\n        var _this = this;\n        if (this.pivotGridModule) {\n            this.pivotGridModule.showWaitingPopup();\n        }\n        (0,_syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_8__.showSpinner)(this.fieldListSpinnerElement);\n        var pivot = this;\n        var control = pivot.isPopupView ? pivot.pivotGridModule : pivot;\n        //setTimeout(() => {\n        var isOlapDataRefreshed = false;\n        var pageSettings = pivot.pivotGridModule && (pivot.pivotGridModule.enableVirtualization\n            || pivot.pivotGridModule.enablePaging) ? pivot.pivotGridModule.pageSettings : undefined;\n        var isCalcChange = Object.keys(pivot.lastCalcFieldInfo).length > 0 ? true : false;\n        var isSorted = Object.keys(pivot.lastSortInfo).length > 0 ? true : false;\n        var isAggChange = Object.keys(pivot.lastAggregationInfo).length > 0 ? true : false;\n        var isFiltered = Object.keys(pivot.lastFilterInfo).length > 0 ? true : false;\n        var args = {\n            dataSourceSettings: _base_util__WEBPACK_IMPORTED_MODULE_9__.PivotUtil.getClonedDataSourceSettings(pivot.dataSourceSettings)\n        };\n        control.trigger(_common_base_constant__WEBPACK_IMPORTED_MODULE_3__.enginePopulating, args, function (observedArgs) {\n            if (!(pageSettings && (isSorted || isFiltered || isAggChange || isCalcChange))) {\n                _base_util__WEBPACK_IMPORTED_MODULE_9__.PivotUtil.updateDataSourceSettings(pivot, observedArgs.dataSourceSettings);\n                _base_util__WEBPACK_IMPORTED_MODULE_9__.PivotUtil.updateDataSourceSettings(pivot.pivotGridModule, observedArgs.dataSourceSettings);\n            }\n            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(isEngineRefresh)) {\n                var enableValueSorting = isSorted ? false : pivot.staticPivotGridModule ?\n                    pivot.staticPivotGridModule.enableValueSorting : pivot.enableValueSorting;\n                if (isSorted && pivot.dataSourceSettings.valueSortSettings.headerText !== '') {\n                    if (pivot.pivotGridModule) {\n                        pivot.pivotGridModule.setProperties({ dataSourceSettings: { valueSortSettings: { headerText: '' } } }, true);\n                    }\n                    pivot.setProperties({ dataSourceSettings: { valueSortSettings: { headerText: '' } } }, true);\n                }\n                if (pivot.dataType === 'pivot') {\n                    var customProperties = pivot.frameCustomProperties();\n                    customProperties.enableValueSorting = enableValueSorting;\n                    customProperties.savedFieldList = pivot.pivotFieldList;\n                    if (pageSettings && (isSorted || isFiltered || isAggChange || isCalcChange) && !pivot.allowDeferLayoutUpdate) {\n                        if (isSorted) {\n                            if (control.dataSourceSettings.mode === 'Server') {\n                                control.getEngine('onSort', null, pivot.lastSortInfo, null, null, null, null);\n                            }\n                            else {\n                                pivot.engineModule.onSort(pivot.lastSortInfo);\n                            }\n                            pivot.lastSortInfo = {};\n                        }\n                        if (isFiltered) {\n                            if (control.dataSourceSettings.mode === 'Server') {\n                                control.getEngine('onFilter', null, null, null, null, pivot.lastFilterInfo, null);\n                            }\n                            else {\n                                pivot.engineModule.onFilter(pivot.lastFilterInfo, pivot.dataSourceSettings);\n                            }\n                            pivot.lastFilterInfo = {};\n                        }\n                        if (isAggChange) {\n                            if (control.dataSourceSettings.mode === 'Server') {\n                                control.getEngine('onAggregation', null, null, pivot.lastAggregationInfo, null, null, null);\n                            }\n                            else {\n                                pivot.engineModule.onAggregation(pivot.lastAggregationInfo);\n                            }\n                            pivot.lastAggregationInfo = {};\n                        }\n                        if (isCalcChange) {\n                            if (control.dataSourceSettings.mode === 'Server') {\n                                control.getEngine('onCalcOperation', null, null, null, pivot.lastCalcFieldInfo, null, null);\n                            }\n                            else {\n                                pivot.engineModule.onCalcOperation(pivot.lastCalcFieldInfo, pivot.dataSourceSettings);\n                            }\n                            pivot.lastCalcFieldInfo = {};\n                        }\n                    }\n                    else {\n                        if (pivot.dataSourceSettings.mode === 'Server') {\n                            if (isSorted) {\n                                pivot.getEngine('onSort', null, pivot.lastSortInfo, null, null, null, null);\n                            }\n                            else if (isAggChange) {\n                                pivot.getEngine('onAggregation', null, null, pivot.lastAggregationInfo, null, null, null);\n                            }\n                            else if (isCalcChange) {\n                                pivot.getEngine('onCalcOperation', null, null, null, pivot.lastCalcFieldInfo, null, null);\n                            }\n                            else if (isFiltered) {\n                                pivot.getEngine('onFilter', null, null, null, null, pivot.lastFilterInfo, null);\n                            }\n                            else {\n                                pivot.getEngine('onDrop', null, null, null, null, null, null);\n                            }\n                        }\n                        else {\n                            pivot.engineModule.renderEngine(pivot.dataSourceSettings, customProperties, pivot.aggregateCellInfo ?\n                                pivot.getValueCellInfo.bind(pivot) : undefined, pivot.onHeadersSort ?\n                                pivot.getHeaderSortInfo.bind(pivot) : undefined);\n                        }\n                        pivot.lastSortInfo = {};\n                        pivot.lastAggregationInfo = {};\n                        pivot.lastCalcFieldInfo = {};\n                        pivot.lastFilterInfo = {};\n                    }\n                }\n                else {\n                    isOlapDataRefreshed = pivot.updateOlapDataSource(pivot, isSorted, isCalcChange, isOlapDataRefreshed, enableValueSorting, isFiltered);\n                }\n                pivot.getFieldCaption(pivot.dataSourceSettings);\n            }\n            else {\n                pivot.axisFieldModule.render();\n                if (pivot.pivotGridModule) {\n                    pivot.pivotGridModule.notify(_common_base_constant__WEBPACK_IMPORTED_MODULE_3__.uiUpdate, pivot);\n                }\n                pivot.isRequiredUpdate = false;\n            }\n            if (pivot.dataSourceSettings.mode !== 'Server') {\n                pivot.enginePopulatedEventMethod(pivot, isTreeViewRefresh, isOlapDataRefreshed);\n            }\n            else if ((pivot.allowDeferLayoutUpdate && !pivot.isRequiredUpdate) || pivot.isRequiredUpdate) {\n                (0,_syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_8__.hideSpinner)(_this.fieldListSpinnerElement);\n                if (_this.pivotGridModule) {\n                    _this.pivotGridModule.hideWaitingPopup();\n                }\n            }\n        });\n        //});\n    };\n    PivotFieldList.prototype.enginePopulatedEventMethod = function (pivot, isTreeViewRefresh, isOlapDataRefreshed) {\n        var _this = this;\n        var control = pivot.isPopupView ? pivot.pivotGridModule : pivot;\n        var eventArgs = {\n            dataSourceSettings: pivot.dataSourceSettings,\n            pivotFieldList: pivot.dataType === 'pivot' ? pivot.engineModule.fieldList : pivot.olapEngineModule.fieldList,\n            pivotValues: pivot.dataType === 'pivot' ? pivot.engineModule.pivotValues : pivot.olapEngineModule.pivotValues\n        };\n        control.trigger(_common_base_constant__WEBPACK_IMPORTED_MODULE_3__.enginePopulated, eventArgs, function (observedArgs) {\n            pivot.dataSourceSettings = observedArgs.dataSourceSettings;\n            pivot.pivotCommon.dataSourceSettings = pivot.dataSourceSettings;\n            pivot.pivotFieldList = observedArgs.pivotFieldList;\n            if (pivot.dataType === 'olap') {\n                pivot.olapEngineModule.pivotValues = observedArgs.pivotValues;\n                pivot.pivotCommon.engineModule = pivot.olapEngineModule;\n            }\n            else {\n                pivot.engineModule.pivotValues = observedArgs.pivotValues;\n                pivot.pivotCommon.engineModule = pivot.engineModule;\n            }\n            if (!isTreeViewRefresh && pivot.treeViewModule.fieldTable && !pivot.isAdaptive) {\n                pivot.notify(_common_base_constant__WEBPACK_IMPORTED_MODULE_3__.treeViewUpdate, {});\n            }\n            if (pivot.isRequiredUpdate) {\n                if (pivot.allowDeferLayoutUpdate) {\n                    pivot.clonedDataSource = _base_util__WEBPACK_IMPORTED_MODULE_9__.PivotUtil.getClonedDataSourceSettings(pivot.dataSourceSettings);\n                    if (_this.dataType === 'olap') {\n                        _this.clonedFieldListData = _base_util__WEBPACK_IMPORTED_MODULE_9__.PivotUtil.cloneOlapFieldSettings(_this.olapEngineModule.fieldListData);\n                    }\n                    pivot.clonedFieldList = _base_util__WEBPACK_IMPORTED_MODULE_9__.PivotUtil.getClonedFieldList(pivot.pivotFieldList);\n                }\n                pivot.updateView(pivot.pivotGridModule);\n            }\n            else if (_this.isPopupView && (_this.isDeferLayoutUpdate || (pivot.pivotGridModule &&\n                pivot.pivotGridModule.pivotDeferLayoutUpdate))) {\n                pivot.pivotGridModule.engineModule = pivot.engineModule;\n                pivot.pivotGridModule.setProperties({\n                    dataSourceSettings: pivot.dataSourceSettings.properties\n                }, true);\n                pivot.pivotGridModule.notify(_common_base_constant__WEBPACK_IMPORTED_MODULE_3__.uiUpdate, pivot);\n                (0,_syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_8__.hideSpinner)(pivot.fieldListSpinnerElement);\n            }\n            if ((_this.isPopupView && pivot.pivotGridModule && pivot.pivotGridModule.allowDeferLayoutUpdate && !pivot.isRequiredUpdate) ||\n                !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(pivot.pivotGridModule)) {\n                (0,_syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_8__.hideSpinner)(pivot.fieldListSpinnerElement);\n                pivot.pivotGridModule.hideWaitingPopup();\n            }\n            pivot.isRequiredUpdate = true;\n            if (!pivot.pivotGridModule || isOlapDataRefreshed) {\n                (0,_syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_8__.hideSpinner)(pivot.fieldListSpinnerElement);\n            }\n            else {\n                pivot.pivotGridModule.fieldListSpinnerElement = pivot.fieldListSpinnerElement;\n            }\n        });\n        var actionName = this.getActionCompleteName();\n        this.actionObj.actionName = actionName;\n        if (this.actionObj.actionName) {\n            this.actionCompleteMethod();\n        }\n    };\n    PivotFieldList.prototype.updateOlapDataSource = function (pivot, isSorted, isCalcChange, isOlapDataRefreshed, enableValueSorting, isFiltered) {\n        var customProperties = pivot.frameCustomProperties(pivot.olapEngineModule.fieldListData, pivot.olapEngineModule.fieldList);\n        customProperties.enableValueSorting = enableValueSorting;\n        customProperties.savedFieldList = pivot.pivotFieldList;\n        if ((isCalcChange || isSorted) && !isFiltered) {\n            pivot.olapEngineModule.savedFieldList = pivot.pivotFieldList;\n            pivot.olapEngineModule.savedFieldListData = pivot.olapEngineModule.fieldListData;\n            if (isCalcChange) {\n                pivot.olapEngineModule.updateCalcFields(pivot.dataSourceSettings, pivot.lastCalcFieldInfo);\n                pivot.lastCalcFieldInfo = {};\n                isOlapDataRefreshed = pivot.olapEngineModule.dataFields[pivot.lastCalcFieldInfo.name] ? false : true;\n                if (pivot.pivotGridModule) {\n                    pivot.pivotGridModule.hideWaitingPopup();\n                }\n            }\n            else {\n                pivot.olapEngineModule.onSort(pivot.dataSourceSettings);\n            }\n        }\n        else {\n            _base_util__WEBPACK_IMPORTED_MODULE_9__.PivotUtil.renderOlapEngine(pivot, customProperties);\n        }\n        pivot.lastSortInfo = {};\n        pivot.lastAggregationInfo = {};\n        pivot.lastCalcFieldInfo = {};\n        pivot.lastFilterInfo = {};\n        return isOlapDataRefreshed;\n    };\n    /**\n     * Updates the Pivot Field List component using dataSource from PivotView component.\n     *\n     * @function update\n     * @param {PivotView} control - Pass the instance of pivot table component.\n     * @returns {void}\n     */\n    PivotFieldList.prototype.update = function (control) {\n        if (control) {\n            this.clonedDataSet = control.clonedDataSet;\n            this.clonedReport = control.clonedReport;\n            this.setProperties({ dataSourceSettings: control.dataSourceSettings, showValuesButton: control.showValuesButton }, true);\n            this.engineModule = control.engineModule;\n            this.olapEngineModule = control.olapEngineModule;\n            this.dataType = control.dataType;\n            this.pivotFieldList = this.dataType === 'olap' ? control.olapEngineModule.fieldList : control.engineModule.fieldList;\n            if (this.isPopupView) {\n                this.pivotGridModule = control;\n            }\n            else {\n                this.staticPivotGridModule = control;\n            }\n            this.getFieldCaption(control.dataSourceSettings);\n            this.pivotCommon.engineModule = this.dataType === 'olap' ? this.olapEngineModule : this.engineModule;\n            this.pivotCommon.dataSourceSettings = this.dataSourceSettings;\n            this.pivotCommon.control = this;\n            if (this.treeViewModule.fieldTable && !this.isAdaptive) {\n                this.notify(_common_base_constant__WEBPACK_IMPORTED_MODULE_3__.treeViewUpdate, {});\n            }\n            this.axisFieldModule.render();\n            if (!this.isPopupView && this.allowDeferLayoutUpdate) {\n                this.clonedDataSource = _base_util__WEBPACK_IMPORTED_MODULE_9__.PivotUtil.getClonedDataSourceSettings(this.dataSourceSettings);\n                if (this.dataType === 'olap') {\n                    this.clonedFieldListData = _base_util__WEBPACK_IMPORTED_MODULE_9__.PivotUtil.cloneOlapFieldSettings(this.olapEngineModule.fieldListData);\n                }\n                this.clonedFieldList = _base_util__WEBPACK_IMPORTED_MODULE_9__.PivotUtil.getClonedFieldList(this.pivotFieldList);\n            }\n        }\n    };\n    /**\n     * Updates the PivotView component using dataSource from Pivot Field List component.\n     *\n     * @function updateView\n     * @param {PivotView} control - Pass the instance of pivot table component.\n     * @returns {void}\n     */\n    PivotFieldList.prototype.updateView = function (control) {\n        if (control) {\n            var isOlapCalcFieldAdded = this.actionObj.actionName === 'Calculated field applied' && control.dataType === 'olap';\n            if (control.element.querySelector('.e-spin-hide') && !isOlapCalcFieldAdded &&\n                (!(this.allowDeferLayoutUpdate && !this.isDeferUpdateApplied) || (control.isInitial && control.currentView !== 'Chart'))) {\n                control.showWaitingPopup();\n            }\n            control.clonedDataSet = this.clonedDataSet;\n            control.clonedReport = this.clonedReport;\n            control.setProperties({ dataSourceSettings: this.dataSourceSettings, showValuesButton: this.showValuesButton }, true);\n            control.engineModule = this.engineModule;\n            control.olapEngineModule = this.olapEngineModule;\n            control.dataType = this.dataType;\n            if (!this.pivotChange) {\n                control.pivotValues = this.dataType === 'olap' ? this.olapEngineModule.pivotValues : this.engineModule.pivotValues;\n            }\n            var eventArgs = {\n                dataSourceSettings: _base_util__WEBPACK_IMPORTED_MODULE_9__.PivotUtil.getClonedDataSourceSettings(control.dataSourceSettings),\n                pivotValues: control.pivotValues\n            };\n            control.trigger(_common_base_constant__WEBPACK_IMPORTED_MODULE_3__.fieldListRefreshed, eventArgs);\n            if (!this.isPopupView && ((this.dataType === 'olap' ?\n                this.olapEngineModule.isEngineUpdated : this.engineModule.isEngineUpdated) || this.isInitial)) {\n                this.staticPivotGridModule = control;\n                control.isStaticRefresh = true;\n                control.isStaticFieldList = true;\n            }\n            this.isDeferUpdateApplied = false;\n            if (this.staticPivotGridModule) {\n                this.staticPivotGridModule.isServerWaitingPopup = true;\n            }\n            control.dataBind();\n        }\n    };\n    /**\n     * Called internally to trigger populate event.\n     *\n     * @hidden\n     */\n    PivotFieldList.prototype.triggerPopulateEvent = function () {\n        var _this = this;\n        var control = this.isPopupView ? this.pivotGridModule : this;\n        var eventArgs = {\n            dataSourceSettings: this.dataSourceSettings,\n            pivotFieldList: this.dataType === 'olap' ? this.olapEngineModule.fieldList : this.engineModule.fieldList,\n            pivotValues: this.dataType === 'olap' ? this.olapEngineModule.pivotValues : this.engineModule.pivotValues\n        };\n        control.trigger(_common_base_constant__WEBPACK_IMPORTED_MODULE_3__.enginePopulated, eventArgs, function (observedArgs) {\n            _this.dataSourceSettings = observedArgs.dataSourceSettings;\n            _this.pivotFieldList = observedArgs.pivotFieldList;\n            if (_this.dataType === 'olap') {\n                _this.olapEngineModule.pivotValues = observedArgs.pivotValues;\n            }\n            else {\n                _this.engineModule.pivotValues = observedArgs.pivotValues;\n            }\n        });\n    };\n    /** @hidden */\n    PivotFieldList.prototype.actionBeginMethod = function () {\n        var eventArgs = {\n            dataSourceSettings: _base_util__WEBPACK_IMPORTED_MODULE_9__.PivotUtil.getClonedDataSourceSettings(this.dataSourceSettings),\n            actionName: this.actionObj.actionName,\n            fieldInfo: this.actionObj.fieldInfo,\n            cancel: false\n        };\n        var control = this.isPopupView ? this.pivotGridModule : this;\n        control.trigger(_common_base_constant__WEBPACK_IMPORTED_MODULE_3__.actionBegin, eventArgs);\n        return eventArgs.cancel;\n    };\n    /** @hidden */\n    PivotFieldList.prototype.actionCompleteMethod = function () {\n        var eventArgs = {\n            dataSourceSettings: _base_util__WEBPACK_IMPORTED_MODULE_9__.PivotUtil.getClonedDataSourceSettings(this.dataSourceSettings),\n            actionName: this.actionObj.actionName,\n            fieldInfo: this.actionObj.fieldInfo,\n            actionInfo: this.actionObj.actionInfo\n        };\n        var control = this.isPopupView ? this.pivotGridModule : this;\n        control.trigger(_common_base_constant__WEBPACK_IMPORTED_MODULE_3__.actionComplete, eventArgs);\n        this.actionObj.actionName = '';\n        this.actionObj.actionInfo = undefined;\n        this.actionObj.fieldInfo = undefined;\n    };\n    /** @hidden */\n    PivotFieldList.prototype.actionFailureMethod = function (error) {\n        var eventArgs = {\n            actionName: this.actionObj.actionName,\n            errorInfo: error\n        };\n        var control = this.isPopupView ? this.pivotGridModule : this;\n        control.trigger(_common_base_constant__WEBPACK_IMPORTED_MODULE_3__.actionFailure, eventArgs);\n    };\n    /** @hidden */\n    PivotFieldList.prototype.getActionCompleteName = function () {\n        var actionName = (this.actionObj.actionName === _common_base_constant__WEBPACK_IMPORTED_MODULE_3__.openCalculatedField) ? _common_base_constant__WEBPACK_IMPORTED_MODULE_3__.calculatedFieldApplied :\n            (this.actionObj.actionName === _common_base_constant__WEBPACK_IMPORTED_MODULE_3__.editCalculatedField) ? _common_base_constant__WEBPACK_IMPORTED_MODULE_3__.calculatedFieldEdited :\n                (this.actionObj.actionName === _common_base_constant__WEBPACK_IMPORTED_MODULE_3__.sortField) ? _common_base_constant__WEBPACK_IMPORTED_MODULE_3__.fieldSorted : (this.actionObj.actionName === _common_base_constant__WEBPACK_IMPORTED_MODULE_3__.filterField)\n                    ? _common_base_constant__WEBPACK_IMPORTED_MODULE_3__.fieldFiltered : (this.actionObj.actionName === _common_base_constant__WEBPACK_IMPORTED_MODULE_3__.removeField) ? _common_base_constant__WEBPACK_IMPORTED_MODULE_3__.fieldRemoved\n                    : (this.actionObj.actionName === _common_base_constant__WEBPACK_IMPORTED_MODULE_3__.aggregateField) ? _common_base_constant__WEBPACK_IMPORTED_MODULE_3__.fieldAggregated :\n                        this.actionObj.actionName === _common_base_constant__WEBPACK_IMPORTED_MODULE_3__.sortFieldTree ? _common_base_constant__WEBPACK_IMPORTED_MODULE_3__.fieldTreeSorted : this.actionObj.actionName;\n        return actionName;\n    };\n    /**\n     * Destroys the Field Table component.\n     *\n     * @function destroy\n     * @returns {void}\n     */\n    PivotFieldList.prototype.destroy = function () {\n        this.unWireEvent();\n        if (this.engineModule && !this.destroyEngine) {\n            this.engineModule.fieldList = {};\n            this.engineModule.rMembers = null;\n            this.engineModule.cMembers = null;\n            this.engineModule.valueMatrix = [];\n            this.engineModule = {};\n        }\n        if (this.olapEngineModule && !this.destroyEngine) {\n            this.olapEngineModule.fieldList = {};\n            this.olapEngineModule = {};\n        }\n        if (this.pivotFieldList) {\n            this.pivotFieldList = {};\n        }\n        if (this.contextMenuModule) {\n            this.contextMenuModule.destroy();\n        }\n        if (this.treeViewModule) {\n            this.treeViewModule.destroy();\n        }\n        if (this.pivotButtonModule) {\n            this.pivotButtonModule.destroy();\n        }\n        if (this.pivotCommon) {\n            this.pivotCommon.destroy();\n        }\n        if (this.dialogRenderer) {\n            this.dialogRenderer.destroy();\n        }\n        if (this.calculatedFieldModule) {\n            this.calculatedFieldModule.destroy();\n        }\n        _super.prototype.destroy.call(this);\n        if (this.contextMenuModule) {\n            this.contextMenuModule = null;\n        }\n        if (this.treeViewModule) {\n            this.treeViewModule = null;\n        }\n        if (this.pivotButtonModule) {\n            this.pivotButtonModule = null;\n        }\n        if (this.pivotCommon) {\n            this.pivotCommon = null;\n        }\n        if (this.dialogRenderer) {\n            this.dialogRenderer = null;\n        }\n        if (this.calculatedFieldModule) {\n            this.calculatedFieldModule = null;\n        }\n        if (this.axisFieldModule) {\n            this.axisFieldModule = null;\n        }\n        if (this.axisTableModule) {\n            this.axisTableModule = null;\n        }\n        if (this.renderModule) {\n            this.renderModule = null;\n        }\n        if (this.clonedDataSet) {\n            this.clonedDataSet = null;\n        }\n        if (this.clonedReport) {\n            this.clonedReport = null;\n        }\n        if (this.clonedFieldList) {\n            this.clonedFieldList = null;\n        }\n        if (this.clonedFieldListData) {\n            this.clonedFieldListData = null;\n        }\n        if (this.localeObj) {\n            this.localeObj = null;\n        }\n        if (this.defaultLocale) {\n            this.defaultLocale = null;\n        }\n        this.element.innerHTML = '';\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([this.element], _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.ROOT);\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([this.element], _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.RTL);\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([this.element], _common_base_css_constant__WEBPACK_IMPORTED_MODULE_4__.DEVICE);\n    };\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({}, _model_datasourcesettings__WEBPACK_IMPORTED_MODULE_7__.DataSourceSettings)\n    ], PivotFieldList.prototype, \"dataSourceSettings\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('Popup')\n    ], PivotFieldList.prototype, \"renderMode\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)()\n    ], PivotFieldList.prototype, \"target\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('')\n    ], PivotFieldList.prototype, \"cssClass\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], PivotFieldList.prototype, \"enableHtmlSanitizer\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], PivotFieldList.prototype, \"allowCalculatedField\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], PivotFieldList.prototype, \"enableFieldSearching\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], PivotFieldList.prototype, \"showValuesButton\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], PivotFieldList.prototype, \"allowDeferLayoutUpdate\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(1000)\n    ], PivotFieldList.prototype, \"maxNodeLimitInMemberEditor\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(true)\n    ], PivotFieldList.prototype, \"loadOnDemandInMemberEditor\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)()\n    ], PivotFieldList.prototype, \"spinnerTemplate\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(['Sum', 'Count', 'DistinctCount', 'Product', 'Min', 'Max', 'Avg', 'Median', 'Index', 'PopulationVar', 'SampleVar', 'PopulationStDev', 'SampleStDev', 'RunningTotals', 'PercentageOfGrandTotal', 'PercentageOfColumnTotal', 'PercentageOfRowTotal', 'PercentageOfParentColumnTotal', 'PercentageOfParentRowTotal', 'DifferenceFrom', 'PercentageOfDifferenceFrom', 'PercentageOfParentTotal'])\n    ], PivotFieldList.prototype, \"aggregateTypes\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('USD')\n    ], PivotFieldList.prototype, \"currencyCode\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], PivotFieldList.prototype, \"load\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], PivotFieldList.prototype, \"enginePopulating\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], PivotFieldList.prototype, \"memberFiltering\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], PivotFieldList.prototype, \"enginePopulated\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], PivotFieldList.prototype, \"onFieldDropped\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], PivotFieldList.prototype, \"fieldDrop\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], PivotFieldList.prototype, \"fieldDragStart\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], PivotFieldList.prototype, \"aggregateCellInfo\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], PivotFieldList.prototype, \"memberEditorOpen\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], PivotFieldList.prototype, \"calculatedFieldCreate\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], PivotFieldList.prototype, \"aggregateMenuOpen\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], PivotFieldList.prototype, \"fieldRemove\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], PivotFieldList.prototype, \"dataBound\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], PivotFieldList.prototype, \"created\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], PivotFieldList.prototype, \"destroyed\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], PivotFieldList.prototype, \"beforeServiceInvoke\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], PivotFieldList.prototype, \"afterServiceInvoke\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], PivotFieldList.prototype, \"actionBegin\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], PivotFieldList.prototype, \"actionComplete\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], PivotFieldList.prototype, \"actionFailure\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], PivotFieldList.prototype, \"onHeadersSort\", void 0);\n    PivotFieldList = __decorate([\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.NotifyPropertyChanges\n    ], PivotFieldList);\n    return PivotFieldList;\n}(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Component));\n\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-pivotview/src/pivotfieldlist/base/field-list.js?");

/***/ })

}]);