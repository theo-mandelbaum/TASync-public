"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkej2_vue_samples"] = self["webpackChunkej2_vue_samples"] || []).push([["chunk-vendors-node_modules_syncfusion_ej2-charts_src_circularchart3d_user-interaction_selection_js-b-d2126b7a"],{

/***/ "./node_modules/@syncfusion/ej2-charts/src/circularchart3d/user-interaction/selection.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-charts/src/circularchart3d/user-interaction/selection.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CircularChartSelection3D: () => (/* binding */ CircularChartSelection3D)\n/* harmony export */ });\n/* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @syncfusion/ej2-base */ \"./node_modules/@syncfusion/ej2-base/index.js\");\n/* harmony import */ var _common_utils_helper__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../common/utils/helper */ \"./node_modules/@syncfusion/ej2-charts/src/common/utils/helper.js\");\n/* harmony import */ var _common_model_base__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../common/model/base */ \"./node_modules/@syncfusion/ej2-charts/src/common/model/base.js\");\n/* harmony import */ var _common_user_interaction_selection__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../common/user-interaction/selection */ \"./node_modules/@syncfusion/ej2-charts/src/common/user-interaction/selection.js\");\n/* harmony import */ var _common_model_constants__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../common/model/constants */ \"./node_modules/@syncfusion/ej2-charts/src/common/model/constants.js\");\nvar __extends = (undefined && undefined.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * Circular 3D chart selection.\n */\n\n\n\n\n\n/**\n * The `CircularChart3DSelection` module handles the selection for circular 3D chart.\n */\nvar CircularChartSelection3D = /** @class */ (function (_super) {\n    __extends(CircularChartSelection3D, _super);\n    function CircularChartSelection3D(circular3D) {\n        var _this = _super.call(this, circular3D) || this;\n        _this.circular3D = circular3D;\n        _this.renderer = circular3D.renderer;\n        _this.addEventListener();\n        return _this;\n    }\n    /**\n     * Binding events for selection module.\n     *\n     * @returns {void}\n     */\n    CircularChartSelection3D.prototype.addEventListener = function () {\n        if (this.circular3D.isDestroyed) {\n            return;\n        }\n        //let cancelEvent: string = Browser.isPointer ? 'pointerleave' : 'mouseleave';\n        this.circular3D.on(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.touchMoveEvent, this.mouseMove, this);\n        this.circular3D.on('click', this.mouseClick, this);\n    };\n    /**\n     * Unbinding events for selection module.\n     *\n     * @returns {void}\n     */\n    CircularChartSelection3D.prototype.removeEventListener = function () {\n        if (this.circular3D.isDestroyed) {\n            return;\n        }\n        this.circular3D.off(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.touchMoveEvent, this.mouseMove);\n        this.circular3D.off('click', this.mouseClick);\n    };\n    /**\n     * Initializes the private variables for selection and deselection.\n     *\n     * @param {CircularChart3D} circular3D - The instance of the circular 3D chart.\n     * @returns {void}\n     */\n    CircularChartSelection3D.prototype.initPrivateVariables = function (circular3D) {\n        this.styleId = circular3D.element.id + '_ej2_chart_selection';\n        this.unselected = circular3D.element.id + '_ej2_deselected';\n        this.selectedDataIndexes = [];\n        this.rectPoints = null;\n    };\n    /**\n     * Invoke selection by creating selection style for rendered chart.\n     *\n     * @param {CircularChart3D} circular3D - The instance of the circular 3D chart.\n     * @returns {void}\n     */\n    CircularChartSelection3D.prototype.invokeSelection = function (circular3D) {\n        this.initPrivateVariables(circular3D);\n        this.series = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)({}, circular3D.visibleSeries, null, true);\n        this.seriesStyles();\n        this.currentMode = circular3D.selectionMode;\n        this.selectDataIndex(this.concatIndexes(circular3D.selectedDataIndexes, this.selectedDataIndexes), circular3D);\n    };\n    /**\n     * To get the series selection style class name based on the series and point index.\n     *\n     * @param {CircularChart3DSeriesModel} series - Specifies the series model.\n     * @param {number} point - Specifies the point index.\n     * @returns {string} - Returns the style class name.\n     */\n    CircularChartSelection3D.prototype.generateStyle = function (series, point) {\n        return (this.styleId + '_series_' + series.index + '_point_' + point);\n    };\n    /**\n     * Gets series point elements based on the specified series and point index.\n     *\n     * @param {Index} index - Specifies the index of the series.\n     * @returns {Element[]} - Returns the array of elements.\n     */\n    CircularChartSelection3D.prototype.getElementByIndex = function (index) {\n        var _this = this;\n        var pointElements = [];\n        var elements = document.querySelectorAll('[id*=\"-region-series-' + index.series + '-point-' + index.point + '\"]');\n        elements.forEach(function (pointElement) {\n            if (pointElement.id.indexOf(_this.circular3D.element.id + '-') > -1 && _this.indexFinder(pointElement.id).point === index.point) {\n                pointElements.push(pointElement);\n            }\n        });\n        var element = document.getElementById(this.control.element.id + '-svg-data-label-text-' + index.point);\n        var connectorElement = document.getElementById(this.control.element.id + '-datalabel-series-0-connector-' + index.point);\n        var shapeElement = document.getElementById(this.control.element.id + '-svg-data-label-series-0-shape-' + index.point);\n        if (element) {\n            pointElements.push(element);\n        }\n        if (connectorElement) {\n            pointElements.push(connectorElement);\n        }\n        if (shapeElement) {\n            pointElements.push(shapeElement);\n        }\n        return pointElements;\n    };\n    /**\n     * Checks whether the specified element is already selected based on the given event type and optional index.\n     *\n     * @param {Element} targetElement - The target element to be checked for selection status.\n     * @param {string} eventType - The type of event triggering the selection check (e.g., 'mouse move').\n     * @param {Index} [index] - The index to narrow down the selection check for elements with multiple occurrences.\n     * @returns {boolean} - Returns true if the element is already selected; otherwise, returns false.\n     * @private\n     */\n    CircularChartSelection3D.prototype.isAlreadySelected = function (targetElement, eventType, index) {\n        if (eventType === 'mousemove') {\n            this.currentMode = this.circular3D.highlightMode;\n            this.highlightDataIndexes = [];\n            this.styleId = this.circular3D.element.id + '_ej2_chart_highlight';\n        }\n        else if (eventType === 'click' || eventType === 'keyup') {\n            this.currentMode = this.circular3D.selectionMode;\n            this.styleId = this.circular3D.element.id + '_ej2_chart_selection';\n        }\n        if (this.circular3D.highlightMode !== 'None' && this.circular3D.selectionMode === 'None') {\n            if (eventType === 'click') {\n                return false;\n            }\n        }\n        if (((this.circular3D.highlightMode !== 'None' || this.circular3D.legendSettings.enableHighlight) && this.previousSelectedElement && this.previousSelectedElement[0])) {\n            var isElement = void 0;\n            var nodeName = targetElement.nodeName;\n            if (targetElement.parentNode) {\n                isElement = ((nodeName === 'path' || nodeName === 'shape') && targetElement.id.indexOf('region') > 1) ? true : false;\n            }\n            var _loop_1 = function (i) {\n                if (this_1.previousSelectedElement[i].hasAttribute('class')) {\n                    if (this_1.previousSelectedElement[i].getAttribute('class').indexOf('highlight') > -1 &&\n                        (isElement || eventType === 'click' || eventType === 'keyup')) {\n                        var selectionClass_1;\n                        this_1.previousSelectedElement[i].classList.forEach(function (className) {\n                            if (className.indexOf('selection') > -1) {\n                                selectionClass_1 = className;\n                            }\n                        });\n                        this_1.previousSelectedElement[i].removeAttribute('class');\n                        if (selectionClass_1) {\n                            this_1.addSvgClass(this_1.previousSelectedElement[i], selectionClass_1);\n                        }\n                        this_1.previousSelectedElement[i].classList.remove(this_1.styleId + '_series_' + index.series);\n                        this_1.addOrRemoveIndex(this_1.highlightDataIndexes, this_1.indexFinder(this_1.previousSelectedElement[i].id));\n                    }\n                    else if (!isElement && this_1.previousSelectedElement[i].getAttribute('class').indexOf('highlight') > -1) {\n                        this_1.performSelection(this_1.indexFinder(this_1.previousSelectedElement[i].id), this_1.circular3D, this_1.previousSelectedElement[i]);\n                    }\n                }\n            };\n            var this_1 = this;\n            for (var i = 0; i < this.previousSelectedElement.length; i++) {\n                _loop_1(i);\n            }\n        }\n        return true;\n    };\n    /**\n     * Handles mouse click events on the specified circular 3D instance instance.\n     *\n     * @param {CircularChart3D} circular3D - The circular 3D instance where the mouse click event occurred.\n     * @param {Event} event - The mouse click event triggering the action.\n     * @returns {void}\n     */\n    CircularChartSelection3D.prototype.mouseClick = function (circular3D, event) {\n        this.calculateSelectedElements(circular3D, event.target, event.type);\n    };\n    /**\n     * Calculates and processes selected elements based on the specified circular 3D chart instance, target element, and event type.\n     *\n     * @param {CircularChart3D} circular3D - The circular 3D chart instance to be used in the selection calculation.\n     * @param {Element} targetElement - The target element involved in the selection calculation.\n     * @param {string} eventType - The type of event triggering the selection calculation (e.g., 'click').\n     * @returns {void}\n     */\n    CircularChartSelection3D.prototype.calculateSelectedElements = function (circular3D, targetElement, eventType) {\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(targetElement)) {\n            return;\n        }\n        if ((circular3D.selectionMode === 'None' && circular3D.highlightMode === 'None') ||\n            targetElement.id && targetElement.id.indexOf(circular3D.element.id + '-') === -1) {\n            return;\n        }\n        if (targetElement.getAttribute('id').indexOf('_connector_') > -1) {\n            return;\n        }\n        else {\n            this.isAlreadySelected(targetElement, eventType, this.indexFinder(targetElement.id));\n            if (targetElement.id.indexOf('-series-') > -1 || targetElement.id.indexOf('-data-label-') > -1) {\n                this.performSelection(this.indexFinder(targetElement.id), circular3D, targetElement);\n            }\n        }\n    };\n    /**\n     * Finds and returns the index associated with the specified identifier.\n     *\n     * @param {string} id - The identifier used to find the associated index.\n     * @returns {Index} - The index associated with the specified identifier.\n     * @private\n     */\n    CircularChartSelection3D.prototype.indexFinder = function (id) {\n        var ids = ['NaN', 'NaN'];\n        if (id.indexOf('-point-') > -1) {\n            ids = id.split('-series-')[1].split('-point-');\n        }\n        else if (id.indexOf('-border-') > -1) {\n            ids[0] = id.split('-border-')[1];\n        }\n        else if (id.indexOf('data-label-series-0-shape-') > -1 && this.control.series[0].dataLabel.position === 'Inside') {\n            ids[0] = '0';\n            ids[1] = id.split('-shape-')[1];\n        }\n        else if (id.indexOf('-series-') > -1) {\n            ids[0] = id.split('-series-')[1];\n        }\n        else if (id.indexOf('_chart_legend_shape_') > -1) {\n            ids = id.split('_chart_legend_shape_');\n            ids[0] = '0';\n        }\n        else if (id.indexOf('_chart_legend_g_') > -1) {\n            ids = id.split('_chart_legend_g_');\n            ids[0] = '0';\n        }\n        else if (id.indexOf('-data-label-') > -1) {\n            ids[0] = '0';\n            ids[1] = id.split('-data-label-text-')[1];\n        }\n        else if (id.indexOf('-connector-') > -1) {\n            ids[0] = '0';\n            ids[1] = id.split('-connector-')[1];\n        }\n        return new _common_model_base__WEBPACK_IMPORTED_MODULE_2__.Index(parseInt(ids[0], 10), parseInt(ids[1], 10));\n    };\n    /**\n     * Performs the selection based on the specified index, circular 3D instance, and optional element.\n     *\n     * @param {Index} index - The index used for selection, including the point information.\n     * @param {CircularChart3D} circular3D - The circular 3D instance used for the selection operation.\n     * @param {Element | undefined} [element] - The target element for selection.\n     * @returns {void}\n     * @private\n     */\n    CircularChartSelection3D.prototype.performSelection = function (index, circular3D, element) {\n        if (!isNaN(index.point) && this.currentMode === 'Point' && element && this.getElementByIndex(index).length > 0) {\n            this.selection(circular3D, index, this.getElementByIndex(index));\n            this.selectionComplete(circular3D, circular3D.series[0]);\n            this.blurEffect(circular3D.element.id, circular3D.visibleSeries);\n        }\n    };\n    /**\n     * Handles the completion of the selection process in the specified circular 3D chart instance and Circular3DSeries.\n     *\n     * @param {CircularChart3D} circular3D - The circular 3D chart instance where the selection is completed.\n     * @param {CircularChart3DSeries} series - The Circular3DSeries associated with the completed selection.\n     * @returns {void}\n     * @private\n     */\n    CircularChartSelection3D.prototype.selectionComplete = function (circular3D, series) {\n        var pointIndex;\n        var selectedPointValues = [];\n        for (var i = 0; i < this.selectedDataIndexes.length; i++) {\n            pointIndex = this.selectedDataIndexes[i].point;\n            if (!isNaN(pointIndex)) {\n                selectedPointValues.push({\n                    x: series.dataSource[pointIndex][series.xName], y: series.points[pointIndex].y,\n                    seriesIndex: this.selectedDataIndexes[i].series, pointIndex: pointIndex\n                });\n            }\n        }\n        var args = {\n            name: _common_model_constants__WEBPACK_IMPORTED_MODULE_4__.selectionComplete,\n            selectedDataValues: selectedPointValues,\n            cancel: false\n        };\n        circular3D.trigger(_common_model_constants__WEBPACK_IMPORTED_MODULE_4__.selectionComplete, args);\n    };\n    /**\n     * Handles the selection process in the specified circular 3D instance based on the provided index and selected elements.\n     *\n     * @param {CircularChart3D} circular3D - The circular 3D chart instance where the selection is being performed.\n     * @param {Index} index - The index used for selection, including point information.\n     * @param {Element[]} selectedElements - The array of elements that have been selected.\n     * @returns {void}\n     * @private\n     */\n    CircularChartSelection3D.prototype.selection = function (circular3D, index, selectedElements) {\n        if (!circular3D.isMultiSelect && this.styleId.indexOf('highlight') === -1 &&\n            circular3D.selectionMode !== 'None') {\n            this.removeMultiSelectElements(circular3D, this.selectedDataIndexes, index);\n        }\n        var className = selectedElements[0] && (selectedElements[0].getAttribute('class') || '');\n        if (selectedElements[0] && className.indexOf(this.getSelectionClass(selectedElements[0].id)) > -1) {\n            this.removeStyles(selectedElements);\n            if (this.styleId.indexOf('highlight') > 0 && (circular3D.highlightMode !== 'None' || circular3D.legendSettings.enableHighlight)) {\n                this.addOrRemoveIndex(this.highlightDataIndexes, index);\n            }\n            else {\n                this.addOrRemoveIndex(this.selectedDataIndexes, index);\n            }\n        }\n        else {\n            this.previousSelectedElement = circular3D.highlightMode !== 'None' ? selectedElements : [];\n            if (className.indexOf('selection') < 0) {\n                this.applyStyles(selectedElements, index);\n            }\n            if (this.styleId.indexOf('highlight') > 0 && (circular3D.highlightMode !== 'None' || circular3D.legendSettings.enableHighlight)) {\n                this.addOrRemoveIndex(this.highlightDataIndexes, index, true);\n            }\n            else {\n                this.addOrRemoveIndex(this.selectedDataIndexes, index, true);\n            }\n        }\n    };\n    /**\n     * Redraws the selection in the specified circular 3D chart instance based on the selected data indexes.\n     *\n     * @param {CircularChart3D} circular3D - The circular 3D chart  instance where the selection is to be redrawn.\n     * @returns {void}\n     */\n    CircularChartSelection3D.prototype.redrawSelection = function (circular3D) {\n        var selectedDataIndexes = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)([], this.selectedDataIndexes, null, true);\n        var highlightDataIndexes = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)([], this.highlightDataIndexes, null, true);\n        if (this.styleId.indexOf('highlight') > 0 && highlightDataIndexes.length > 0) {\n            this.removeSelectedElements(circular3D, this.highlightDataIndexes);\n            selectedDataIndexes = highlightDataIndexes;\n        }\n        else {\n            this.removeSelectedElements(circular3D, this.selectedDataIndexes);\n        }\n        this.blurEffect(circular3D.element.id, circular3D.visibleSeries);\n        this.selectDataIndex(selectedDataIndexes, circular3D);\n    };\n    /**\n     * Removes the selected elements from the specified circular 3D chart instance based on the given indexes.\n     *\n     * @param {CircularChart3D} circular3D - The circular 3D instance from which selected elements will be removed.\n     * @param {Index[]} indexes - The indexes representing the selected elements to be removed.\n     * @returns {void}\n     * @private\n     */\n    CircularChartSelection3D.prototype.removeSelectedElements = function (circular3D, indexes) {\n        for (var _i = 0, indexes_1 = indexes; _i < indexes_1.length; _i++) {\n            var index = indexes_1[_i];\n            this.removeStyles(this.getElementByIndex(index));\n        }\n        var points = circular3D.visibleSeries[0].points;\n        for (var i = 0; i < points.length; i++) {\n            var index = new _common_model_base__WEBPACK_IMPORTED_MODULE_2__.Index(0, points[i].index);\n            this.removeStyles(this.getElementByIndex(index).length === 0 ? [document.getElementById(this.control.element.id + '_chart_legend_shape_' + index.point)] : this.getElementByIndex(index));\n        }\n    };\n    /**\n     * Handles legend item selection in the specified circular 3D chart based on the target element and event type.\n     *\n     * @param {CircularChart3D} chart - The circular 3D chart instance where legend item selection is being processed.\n     * @param {Element} targetElement - The target element associated with the legend item.\n     * @param {string} eventType - The type of event triggering the legend item selection (e.g., 'mouse move').\n     * @returns {void}\n     */\n    CircularChartSelection3D.prototype.legendSelection = function (chart, targetElement, eventType) {\n        if (eventType === 'mousemove') {\n            if (targetElement.id.indexOf('text') > 1) {\n                targetElement = (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_1__.getElement)(targetElement.id.replace('text', 'shape'));\n            }\n            if (targetElement.id.indexOf('marker') > 1) {\n                targetElement = (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_1__.getElement)(targetElement.id.replace('_marker', ''));\n            }\n            if (targetElement.id.indexOf('g') > 1) {\n                targetElement = (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_1__.getElement)(targetElement.id.replace('_g_', '_shape_'));\n            }\n            if (targetElement.hasAttribute('class') && (targetElement.getAttribute('class').indexOf('highlight') > -1 ||\n                targetElement.getAttribute('class').indexOf('selection') > -1)) {\n                return;\n            }\n            this.currentMode = this.circular3D.highlightMode;\n        }\n        else if (eventType === 'click') {\n            if (targetElement.id.indexOf('text') > 1) {\n                targetElement = (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_1__.getElement)(targetElement.id.replace('text', 'shape'));\n            }\n            if (targetElement.id.indexOf('g') > 1) {\n                targetElement = (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_1__.getElement)(targetElement.id.replace('_g_', '_shape_'));\n            }\n        }\n        var index = this.indexFinder(targetElement.id);\n        var isPreSelected = this.isAlreadySelected(targetElement, eventType, index);\n        if (isPreSelected) {\n            var seriesStyle = this.generateStyle(chart.visibleSeries[index.series], index.point);\n            var selectedElements = (document.querySelectorAll('.' + seriesStyle));\n            var isBlurEffectNeeded = true;\n            if (selectedElements.length > 0) {\n                this.removeSelection(chart, index.series, selectedElements, seriesStyle, isBlurEffectNeeded, index);\n            }\n            else {\n                for (var _i = 0, _a = chart.visibleSeries[0].points; _i < _a.length; _i++) {\n                    var element = _a[_i];\n                    if (element.index !== index.point && (!chart.isMultiSelect || seriesStyle.indexOf('highlight') > 0)) {\n                        seriesStyle = this.generateStyle(chart.visibleSeries[index.series], element.index);\n                        selectedElements = document.querySelectorAll('.' + seriesStyle);\n                        this.removeSelection(chart, index.series, selectedElements, seriesStyle, isBlurEffectNeeded, index);\n                    }\n                }\n                var seriesElements = [];\n                seriesElements = this.getElementByIndex(index);\n                if (seriesElements.length > 0) {\n                    this.checkSelectionElements(seriesElements, seriesStyle, false, index.point);\n                    this.selection(chart, index, seriesElements);\n                    this.blurEffect(chart.element.id, chart.visibleSeries);\n                }\n            }\n        }\n    };\n    /**\n     * Selects elements based on the specified data indexes in the given circular 3D chart instance.\n     *\n     * @param {Index[]} indexes - The data indexes used for element selection.\n     * @param {CircularChart3D} circular3D - The circular 3D instance where elements are to be selected.\n     * @returns {void}\n     * @private\n     */\n    CircularChartSelection3D.prototype.selectDataIndex = function (indexes, circular3D) {\n        var element;\n        for (var _i = 0, indexes_2 = indexes; _i < indexes_2.length; _i++) {\n            var index = indexes_2[_i];\n            element = this.getElementByIndex(index)[0];\n            if (element) {\n                this.performSelection(index, circular3D, element);\n            }\n        }\n    };\n    /**\n     * Removes selection styles for elements in a multi-selection process based on the specified data indexes and current index.\n     *\n     * @param {CircularChart3D} circular3D - The circular 3D chart instance from which selection styles will be removed.\n     * @param {Index[]} index - The data indexes representing the elements to remove selection styles from.\n     * @param {Index} currentIndex - The current index used as a reference during the multi-selection process.\n     * @returns {void}\n     * @private\n     */\n    CircularChartSelection3D.prototype.removeMultiSelectElements = function (circular3D, index, currentIndex) {\n        for (var i = 0; i < index.length; i++) {\n            if (!this.checkEquals(index[i], currentIndex)) {\n                this.removeStyles(this.getElementByIndex(index[i]));\n                index.splice(i, 1);\n                i--;\n            }\n        }\n    };\n    /**\n     * Applies the opacity effect to circular 3D chart series elements based on the specified pieId and visible series.\n     *\n     * @param {string} pieId - The identifier associated with the circular 3D chart series.\n     * @param {CircularChart3DSeries[]} visibleSeries - The array of visible series in the circular 3D chart.\n     * @returns {void}\n     * @private\n     */\n    CircularChartSelection3D.prototype.blurEffect = function (pieId, visibleSeries) {\n        var visibility = (this.checkVisibility(this.highlightDataIndexes) ||\n            this.checkVisibility(this.selectedDataIndexes)); // legend click scenario\n        for (var _i = 0, _a = visibleSeries[0].points; _i < _a.length; _i++) {\n            var point = _a[_i];\n            var pointElements = [];\n            if (point.visible) {\n                pointElements = this.getElementByIndex({ series: 0, point: point.index });\n                this.checkSelectionElements(pointElements, this.generateStyle(visibleSeries[0], point.index), visibility, point.index);\n            }\n        }\n    };\n    /**\n     * Checks for selection elements based on the specified style class name, visibility, and other parameters.\n     *\n     * @param {Element[] | Element} element - The element or array of elements to be checked for selection.\n     * @param {string} className - The style class name used for identifying selection elements.\n     * @param {boolean} visibility - The visibility status of the selection elements.\n     * @param {number} [point=0] - The point value associated with the selection elements.\n     * @returns {void}\n     * @public\n     */\n    CircularChartSelection3D.prototype.checkSelectionElements = function (element, className, visibility, point) {\n        if (point === void 0) { point = 0; }\n        var children = element;\n        if (this.circular3D.selectionMode !== 'None' && (this.circular3D.highlightMode !== 'None' || this.circular3D.legendSettings.enableHighlight)) {\n            children = element;\n        }\n        var elementClassName;\n        var legendShape;\n        var selectElement = element;\n        for (var i = 0; i < children.length; i++) {\n            elementClassName = children[i].getAttribute('class') || '';\n            if (this.circular3D.selectionMode !== 'None' && (this.circular3D.highlightMode !== 'None' || this.circular3D.legendSettings.enableHighlight)) {\n                className = elementClassName.indexOf('selection') > 0 ||\n                    elementClassName.indexOf('highlight') > 0 ? elementClassName : className;\n            }\n            if (elementClassName.indexOf(className) === -1 && visibility) {\n                this.addSvgClass(children[i], this.unselected);\n            }\n            else {\n                selectElement = children[i];\n                if (elementClassName.indexOf(this.unselected) !== -1 && className.indexOf('highlight') > 0) {\n                    this.circular3D.highlightAnimation(children[i], 700, 0.3);\n                }\n                this.removeSvgClass(children[i], this.unselected);\n                this.removeSvgClass(children[i].parentNode, this.unselected);\n            }\n            if (children[i].id.indexOf('-data-label-text-') !== -1 || children[i].id.indexOf('-connector-') !== -1 || children[i].id.indexOf('-data-label-series-0-shape-') !== -1) {\n                if (this.highlightDataIndexes && this.highlightDataIndexes[0] && point === this.highlightDataIndexes[0].point) {\n                    this.removeSvgClass(children[i], this.unselected);\n                }\n                if (this.selectedDataIndexes) {\n                    for (var j = 0; j < this.selectedDataIndexes.length; j++) {\n                        if (point === this.selectedDataIndexes[j].point) {\n                            this.removeSvgClass(children[i], this.unselected);\n                        }\n                    }\n                }\n            }\n        }\n        if (this.control.circularChartLegend3DModule && this.control.legendSettings.visible) {\n            legendShape = (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_1__.getElement)(this.control.element.id + '_chart_legend_shape_' + point);\n            if (legendShape) {\n                if (legendShape.hasAttribute('class')) {\n                    this.removeSvgClass(legendShape, legendShape.getAttribute('class'));\n                }\n                if (selectElement.length > 0) {\n                    elementClassName = selectElement[0].getAttribute('class');\n                }\n                else if (selectElement) {\n                    elementClassName = selectElement.getAttribute('class') || '';\n                }\n                if (elementClassName.indexOf(className) === -1 && visibility) {\n                    this.addSvgClass(legendShape, this.unselected);\n                }\n                else {\n                    this.removeSvgClass(legendShape, this.unselected);\n                    if (elementClassName === '') {\n                        this.removeSvgClass(legendShape, className);\n                    }\n                    else {\n                        this.addSvgClass(legendShape, className);\n                    }\n                }\n            }\n        }\n    };\n    /**\n     * Applies selection style to the specified elements based on the provided data index.\n     *\n     * @param {Element[]} elements - The array of elements to which the selection style will be applied.\n     * @param {Index} index - The data index used for selection.\n     * @returns {void}\n     * @private\n     */\n    CircularChartSelection3D.prototype.applyStyles = function (elements, index) {\n        var circular3DTooltip = this.control.circularChartTooltip3DModule;\n        for (var _i = 0, elements_1 = elements; _i < elements_1.length; _i++) {\n            var element = elements_1[_i];\n            if (element) {\n                this.removeSvgClass(element.parentNode, this.unselected);\n                this.removeSvgClass(element, this.unselected);\n                var opacity = circular3DTooltip && (circular3DTooltip.previousPoints.length > 0 &&\n                    circular3DTooltip.previousPoints[0].point.index !== index.point) ?\n                    circular3DTooltip.svgTooltip.opacity : this.series[index.series].opacity;\n                element.setAttribute('opacity', opacity.toString());\n                if (element.id.indexOf('-data-label-text-') === -1 && element.id.indexOf('-connector-') === -1 && element.id.indexOf('-data-label-series-0-shape-') === -1) {\n                    this.addSvgClass(element, this.getSelectionClass(element.id));\n                }\n                if (this.getSelectionClass(element.id).indexOf('highlight') > 0) {\n                    this.circular3D.stopElementAnimation(element);\n                }\n            }\n        }\n        if (this.control.circularChartLegend3DModule && this.control.legendSettings.visible) {\n            var legendShape = document.getElementById(this.control.element.id + '_chart_legend_shape_' + index.point);\n            this.removeSvgClass(legendShape, legendShape.getAttribute('class'));\n            this.addSvgClass(legendShape, this.getSelectionClass(legendShape.id));\n        }\n    };\n    /**\n     * Retrieves the selection style class name based on the specified element ID.\n     *\n     * @param {string} id - The identifier used to determine the series and point for generating the selection style.\n     * @returns {string} - The selection style class name.\n     * @private\n     */\n    CircularChartSelection3D.prototype.getSelectionClass = function (id) {\n        return this.generateStyle(this.control.series[this.indexFinder(id).series], this.indexFinder(id).point);\n    };\n    /**\n     * Handles the removal of selection style class from the selected point in the circular 3D chart.\n     *\n     * @param {CircularChart3D} chart - The 3D chart instance where the selection needs to be removed.\n     * @param {number} series - The index of the series for which the selection is being removed.\n     * @param {NodeListOf<HTMLElement>} selectedElements - The HTML elements representing the selected items.\n     * @param {string} seriesStyle - The style to be applied to the series after the removal of selection.\n     * @param {boolean} isBlurEffectNeeded - A flag indicating whether a blur effect is needed after the removal of selection.\n     * @param {Index} index - The index representing the specific data point for which selection is being removed (optional).\n     * @returns {void}\n     */\n    CircularChartSelection3D.prototype.removeSelection = function (chart, series, selectedElements, seriesStyle, isBlurEffectNeeded, index) {\n        if (selectedElements.length > 0) {\n            var elements = [];\n            for (var i = 0; i < selectedElements.length; i++) {\n                elements.push(selectedElements[i]);\n            }\n            this.removeStyles(elements);\n            this.addOrRemoveIndex(this.selectedDataIndexes, new _common_model_base__WEBPACK_IMPORTED_MODULE_2__.Index(series, index.point));\n            for (var _i = 0, _a = chart.visibleSeries[0].points; _i < _a.length; _i++) {\n                var value = _a[_i];\n                seriesStyle = this.generateStyle(chart.visibleSeries[0], value.index);\n                if (document.querySelectorAll('.' + seriesStyle).length > 0) {\n                    for (var _b = 0, elements_2 = elements; _b < elements_2.length; _b++) {\n                        var element = elements_2[_b];\n                        this.checkSelectionElements(element, seriesStyle, true, index.point);\n                    }\n                    isBlurEffectNeeded = false;\n                    break;\n                }\n            }\n            if (isBlurEffectNeeded) {\n                this.blurEffect(chart.element.id, chart.visibleSeries);\n            }\n        }\n    };\n    /**\n     * Removes styles associated with the selection from the selected elements.\n     *\n     *\n     * @param {Element[]} elements - An array of chart elements from which selection styles should be removed.\n     * @returns {void}\n     */\n    CircularChartSelection3D.prototype.removeStyles = function (elements) {\n        for (var _i = 0, elements_3 = elements; _i < elements_3.length; _i++) {\n            var element = elements_3[_i];\n            if (element) {\n                this.removeSvgClass(element, this.getSelectionClass(element.id));\n            }\n        }\n    };\n    /**\n     * Adds or removes the specified index from the provided array of indexes based on the 'add' parameter.\n     *\n     * @param {Index[]} indexes - The array of indexes where the specified index will be added or removed.\n     * @param {Index} index - The index to be added or removed.\n     * @param {boolean} [add=true] - Indicates whether to add or remove the index. Defaults to true (add).\n     * @returns {void}\n     * @private\n     */\n    CircularChartSelection3D.prototype.addOrRemoveIndex = function (indexes, index, add) {\n        for (var i = 0; i < indexes.length; i++) {\n            if (this.checkEquals(indexes[i], index)) {\n                indexes.splice(i, 1);\n                i--;\n            }\n        }\n        if (add) {\n            indexes.push(index);\n        }\n    };\n    /**\n     * Checks if two indexes are equal in terms of their point and series values.\n     *\n     * @param {Index} first - The first index to be compared.\n     * @param {Index} second - The second index to be compared.\n     * @returns {boolean} - Returns true if the indexes are equal; otherwise, returns false.\n     * @private\n     */\n    CircularChartSelection3D.prototype.checkEquals = function (first, second) {\n        return ((first.point === second.point) && (first.series === second.series));\n    };\n    /**\n     * Handles the mouse move event in the context of the circular 3D chart.\n     *\n     * @param {PointerEvent | TouchEvent} event - The pointer or touch event triggering the mouse move action.\n     * @returns {void}\n     * @public\n     */\n    CircularChartSelection3D.prototype.mouseMove = function (event) {\n        var circular3D = this.circular3D;\n        var targetElement = event.target;\n        if (!circular3D.rotateActivate && circular3D.circularChartHighlight3DModule && (circular3D.highlightMode !== 'None' || circular3D.legendSettings.enableHighlight)) {\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(targetElement)) {\n                if (event.target.id.indexOf('text') > 1 && event.target.id.indexOf('legend') > -1) {\n                    targetElement = (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_1__.getElement)(event.target.id.replace('text', 'shape'));\n                }\n                if ((targetElement).hasAttribute('class') && ((targetElement).getAttribute('class').indexOf('highlight') > -1 ||\n                    targetElement.getAttribute('class').indexOf('selection') > -1)) {\n                    return;\n                }\n                this.calculateSelectedElements(circular3D, event.target, event.type);\n                if (this.highlightDataIndexes && (targetElement.id.indexOf('_chart_legend_') === -1 || targetElement.id.indexOf('_legend_element') !== -1) &&\n                    this.highlightDataIndexes.length > 0 && targetElement.id.indexOf('-series-') === -1 &&\n                    targetElement.id.indexOf('-data-label-') === -1) {\n                    this.removeLegendHighlightStyles();\n                }\n                return;\n            }\n        }\n        if (circular3D.selectionMode === 'None') {\n            return;\n        }\n    };\n    /**\n     * Removes the highlighted legend and respective points when the legend is not focused.\n     *\n     * @returns {void}\n     * @private\n     */\n    CircularChartSelection3D.prototype.removeLegendHighlightStyles = function () {\n        this.circular3D.circularChartHighlight3DModule.highlightDataIndexes = [];\n        var elementCollection;\n        for (var i = 0; i < this.circular3D.visibleSeries[0].points.length; i++) {\n            elementCollection = document.getElementsByClassName(this.generateStyle(this.circular3D.visibleSeries[0], i));\n            if (this.selectedDataIndexes.length === 0) {\n                elementCollection = document.getElementsByClassName(this.generateStyle(this.circular3D.visibleSeries[0], i));\n                while (elementCollection.length > 0) {\n                    var element = elementCollection[0];\n                    if (element) {\n                        this.removeSvgClass(element, element.getAttribute('class'));\n                    }\n                }\n                elementCollection = document.getElementsByClassName(this.unselected);\n                while (elementCollection.length > 0) {\n                    var element = elementCollection[0];\n                    if (element) {\n                        this.removeSvgClass(element, element.getAttribute('class'));\n                        if (this.generateStyle(this.circular3D.visibleSeries[0], i).indexOf('highlight') > -1) {\n                            this.circular3D.highlightAnimation(element, 700, 0.3);\n                        }\n                    }\n                }\n            }\n            else {\n                elementCollection = document.getElementsByClassName(this.generateStyle(this.circular3D.visibleSeries[0], i));\n                while (elementCollection.length > 0) {\n                    var element = elementCollection[0];\n                    if (element) {\n                        this.removeSvgClass(element, element.getAttribute('class'));\n                        this.addSvgClass(element, this.unselected);\n                    }\n                }\n            }\n        }\n    };\n    /**\n     * Gets the module name for circular 3D chart selection.\n     *\n     * @returns {string} - The module name.\n     * @public\n     */\n    CircularChartSelection3D.prototype.getModuleName = function () {\n        return 'CircularChartSelection3D';\n    };\n    /**\n     * Destroys the `CircularChartSelection3D` module.\n     *\n     * @returns {void}\n     * @private\n     */\n    CircularChartSelection3D.prototype.destroy = function () {\n        // Destroy method performed here\n        this.removeEventListener();\n    };\n    return CircularChartSelection3D;\n}(_common_user_interaction_selection__WEBPACK_IMPORTED_MODULE_3__.BaseSelection));\n\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-charts/src/circularchart3d/user-interaction/selection.js?");

/***/ })

}]);