"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkej2_vue_samples"] = self["webpackChunkej2_vue_samples"] || []).push([["chunk-vendors-node_modules_syncfusion_ej2-grids_src_grid_base_grid_js-993cf1cf"],{

/***/ "./node_modules/@syncfusion/ej2-grids/src/grid/base/grid.js":
/*!******************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-grids/src/grid/base/grid.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EditSettings: () => (/* binding */ EditSettings),\n/* harmony export */   FilterSettings: () => (/* binding */ FilterSettings),\n/* harmony export */   Grid: () => (/* binding */ Grid),\n/* harmony export */   GroupSettings: () => (/* binding */ GroupSettings),\n/* harmony export */   InfiniteScrollSettings: () => (/* binding */ InfiniteScrollSettings),\n/* harmony export */   LoadingIndicator: () => (/* binding */ LoadingIndicator),\n/* harmony export */   Predicate: () => (/* binding */ Predicate),\n/* harmony export */   ResizeSettings: () => (/* binding */ ResizeSettings),\n/* harmony export */   RowDropSettings: () => (/* binding */ RowDropSettings),\n/* harmony export */   SearchSettings: () => (/* binding */ SearchSettings),\n/* harmony export */   SelectionSettings: () => (/* binding */ SelectionSettings),\n/* harmony export */   SortDescriptor: () => (/* binding */ SortDescriptor),\n/* harmony export */   SortSettings: () => (/* binding */ SortSettings),\n/* harmony export */   TextWrapSettings: () => (/* binding */ TextWrapSettings)\n/* harmony export */ });\n/* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @syncfusion/ej2-base */ \"./node_modules/@syncfusion/ej2-base/index.js\");\n/* harmony import */ var _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @syncfusion/ej2-data */ \"./node_modules/@syncfusion/ej2-data/index.js\");\n/* harmony import */ var _syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @syncfusion/ej2-popups */ \"./node_modules/@syncfusion/ej2-popups/index.js\");\n/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./util */ \"./node_modules/@syncfusion/ej2-grids/src/grid/base/util.js\");\n/* harmony import */ var _base_constant__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../base/constant */ \"./node_modules/@syncfusion/ej2-grids/src/grid/base/constant.js\");\n/* harmony import */ var _renderer_render__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../renderer/render */ \"./node_modules/@syncfusion/ej2-grids/src/grid/renderer/render.js\");\n/* harmony import */ var _models_column__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../models/column */ \"./node_modules/@syncfusion/ej2-grids/src/grid/models/column.js\");\n/* harmony import */ var _enum__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./enum */ \"./node_modules/@syncfusion/ej2-grids/src/grid/base/enum.js\");\n/* harmony import */ var _renderer_row_renderer__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../renderer/row-renderer */ \"./node_modules/@syncfusion/ej2-grids/src/grid/renderer/row-renderer.js\");\n/* harmony import */ var _renderer_cell_renderer__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../renderer/cell-renderer */ \"./node_modules/@syncfusion/ej2-grids/src/grid/renderer/cell-renderer.js\");\n/* harmony import */ var _services_cell_render_factory__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../services/cell-render-factory */ \"./node_modules/@syncfusion/ej2-grids/src/grid/services/cell-render-factory.js\");\n/* harmony import */ var _services_service_locator__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../services/service-locator */ \"./node_modules/@syncfusion/ej2-grids/src/grid/services/service-locator.js\");\n/* harmony import */ var _services_value_formatter__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../services/value-formatter */ \"./node_modules/@syncfusion/ej2-grids/src/grid/services/value-formatter.js\");\n/* harmony import */ var _services_renderer_factory__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../services/renderer-factory */ \"./node_modules/@syncfusion/ej2-grids/src/grid/services/renderer-factory.js\");\n/* harmony import */ var _services_width_controller__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../services/width-controller */ \"./node_modules/@syncfusion/ej2-grids/src/grid/services/width-controller.js\");\n/* harmony import */ var _services_aria_service__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../services/aria-service */ \"./node_modules/@syncfusion/ej2-grids/src/grid/services/aria-service.js\");\n/* harmony import */ var _services_focus_strategy__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../services/focus-strategy */ \"./node_modules/@syncfusion/ej2-grids/src/grid/services/focus-strategy.js\");\n/* harmony import */ var _models_page_settings__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../models/page-settings */ \"./node_modules/@syncfusion/ej2-grids/src/grid/models/page-settings.js\");\n/* harmony import */ var _models_column_chooser_settings__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../models/column-chooser-settings */ \"./node_modules/@syncfusion/ej2-grids/src/grid/models/column-chooser-settings.js\");\n/* harmony import */ var _actions_selection__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../actions/selection */ \"./node_modules/@syncfusion/ej2-grids/src/grid/actions/selection.js\");\n/* harmony import */ var _actions_search__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../actions/search */ \"./node_modules/@syncfusion/ej2-grids/src/grid/actions/search.js\");\n/* harmony import */ var _actions_show_hide__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ../actions/show-hide */ \"./node_modules/@syncfusion/ej2-grids/src/grid/actions/show-hide.js\");\n/* harmony import */ var _actions_scroll__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ../actions/scroll */ \"./node_modules/@syncfusion/ej2-grids/src/grid/actions/scroll.js\");\n/* harmony import */ var _actions_print__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ../actions/print */ \"./node_modules/@syncfusion/ej2-grids/src/grid/actions/print.js\");\n/* harmony import */ var _models_aggregate__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ../models/aggregate */ \"./node_modules/@syncfusion/ej2-grids/src/grid/models/aggregate.js\");\n/* harmony import */ var _actions_clipboard__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ../actions/clipboard */ \"./node_modules/@syncfusion/ej2-grids/src/grid/actions/clipboard.js\");\n/* harmony import */ var _actions_logger__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ../actions/logger */ \"./node_modules/@syncfusion/ej2-grids/src/grid/actions/logger.js\");\n/* harmony import */ var _services_row_model_generator__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ../services/row-model-generator */ \"./node_modules/@syncfusion/ej2-grids/src/grid/services/row-model-generator.js\");\n/* harmony import */ var _base_string_literals__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ../base/string-literals */ \"./node_modules/@syncfusion/ej2-grids/src/grid/base/string-literals.js\");\n/* harmony import */ var _renderer_header_cell_renderer__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ../renderer/header-cell-renderer */ \"./node_modules/@syncfusion/ej2-grids/src/grid/renderer/header-cell-renderer.js\");\nvar __extends = (undefined && undefined.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * Represents the field name and direction of sort column.\n */\nvar SortDescriptor = /** @class */ (function (_super) {\n    __extends(SortDescriptor, _super);\n    function SortDescriptor() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)()\n    ], SortDescriptor.prototype, \"field\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)()\n    ], SortDescriptor.prototype, \"direction\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], SortDescriptor.prototype, \"isFromGroup\", void 0);\n    return SortDescriptor;\n}(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.ChildProperty));\n\n/**\n * Configures the sorting behavior of Grid.\n */\nvar SortSettings = /** @class */ (function (_super) {\n    __extends(SortSettings, _super);\n    function SortSettings() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Collection)([], SortDescriptor)\n    ], SortSettings.prototype, \"columns\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(true)\n    ], SortSettings.prototype, \"allowUnsort\", void 0);\n    return SortSettings;\n}(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.ChildProperty));\n\n/**\n * Represents the predicate for the filter column.\n */\nvar Predicate = /** @class */ (function (_super) {\n    __extends(Predicate, _super);\n    function Predicate() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)()\n    ], Predicate.prototype, \"field\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)()\n    ], Predicate.prototype, \"operator\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)()\n    ], Predicate.prototype, \"value\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)()\n    ], Predicate.prototype, \"matchCase\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], Predicate.prototype, \"ignoreAccent\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)()\n    ], Predicate.prototype, \"predicate\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)({})\n    ], Predicate.prototype, \"actualFilterValue\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)({})\n    ], Predicate.prototype, \"actualOperator\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)()\n    ], Predicate.prototype, \"type\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)()\n    ], Predicate.prototype, \"ejpredicate\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)()\n    ], Predicate.prototype, \"uid\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)()\n    ], Predicate.prototype, \"isForeignKey\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)()\n    ], Predicate.prototype, \"condition\", void 0);\n    return Predicate;\n}(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.ChildProperty));\n\n/**\n * Configures the infinite scroll behavior of Grid.\n */\nvar InfiniteScrollSettings = /** @class */ (function (_super) {\n    __extends(InfiniteScrollSettings, _super);\n    function InfiniteScrollSettings() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], InfiniteScrollSettings.prototype, \"enableCache\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(3)\n    ], InfiniteScrollSettings.prototype, \"maxBlocks\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(3)\n    ], InfiniteScrollSettings.prototype, \"initialBlocks\", void 0);\n    return InfiniteScrollSettings;\n}(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.ChildProperty));\n\n/**\n * Configures the filtering behavior of the Grid.\n */\nvar FilterSettings = /** @class */ (function (_super) {\n    __extends(FilterSettings, _super);\n    function FilterSettings() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Collection)([], Predicate)\n    ], FilterSettings.prototype, \"columns\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('FilterBar')\n    ], FilterSettings.prototype, \"type\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('OnEnter')\n    ], FilterSettings.prototype, \"mode\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(true)\n    ], FilterSettings.prototype, \"showFilterBarStatus\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(1500)\n    ], FilterSettings.prototype, \"immediateModeDelay\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)()\n    ], FilterSettings.prototype, \"operators\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], FilterSettings.prototype, \"ignoreAccent\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], FilterSettings.prototype, \"enableInfiniteScrolling\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(50)\n    ], FilterSettings.prototype, \"itemsCount\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('Shimmer')\n    ], FilterSettings.prototype, \"loadingIndicator\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], FilterSettings.prototype, \"enableCaseSensitivity\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], FilterSettings.prototype, \"showFilterBarOperator\", void 0);\n    return FilterSettings;\n}(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.ChildProperty));\n\n/**\n * Configures the selection behavior of the Grid.\n */\nvar SelectionSettings = /** @class */ (function (_super) {\n    __extends(SelectionSettings, _super);\n    function SelectionSettings() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('Row')\n    ], SelectionSettings.prototype, \"mode\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('Flow')\n    ], SelectionSettings.prototype, \"cellSelectionMode\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('Single')\n    ], SelectionSettings.prototype, \"type\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], SelectionSettings.prototype, \"checkboxOnly\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], SelectionSettings.prototype, \"persistSelection\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('Default')\n    ], SelectionSettings.prototype, \"checkboxMode\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], SelectionSettings.prototype, \"enableSimpleMultiRowSelection\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(true)\n    ], SelectionSettings.prototype, \"enableToggle\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], SelectionSettings.prototype, \"allowColumnSelection\", void 0);\n    return SelectionSettings;\n}(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.ChildProperty));\n\n/**\n * Configures the search behavior of the Grid.\n */\nvar SearchSettings = /** @class */ (function (_super) {\n    __extends(SearchSettings, _super);\n    function SearchSettings() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)([])\n    ], SearchSettings.prototype, \"fields\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('')\n    ], SearchSettings.prototype, \"key\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('contains')\n    ], SearchSettings.prototype, \"operator\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(true)\n    ], SearchSettings.prototype, \"ignoreCase\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], SearchSettings.prototype, \"ignoreAccent\", void 0);\n    return SearchSettings;\n}(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.ChildProperty));\n\n/**\n * Configures the row drop settings of the Grid.\n */\nvar RowDropSettings = /** @class */ (function (_super) {\n    __extends(RowDropSettings, _super);\n    function RowDropSettings() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)()\n    ], RowDropSettings.prototype, \"targetID\", void 0);\n    return RowDropSettings;\n}(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.ChildProperty));\n\n/**\n * Configures the text wrap settings of the Grid.\n */\nvar TextWrapSettings = /** @class */ (function (_super) {\n    __extends(TextWrapSettings, _super);\n    function TextWrapSettings() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('Both')\n    ], TextWrapSettings.prototype, \"wrapMode\", void 0);\n    return TextWrapSettings;\n}(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.ChildProperty));\n\n/**\n * Configures the resize behavior of the Grid.\n */\nvar ResizeSettings = /** @class */ (function (_super) {\n    __extends(ResizeSettings, _super);\n    function ResizeSettings() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('Normal')\n    ], ResizeSettings.prototype, \"mode\", void 0);\n    return ResizeSettings;\n}(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.ChildProperty));\n\n/**\n * Configures the group behavior of the Grid.\n */\nvar GroupSettings = /** @class */ (function (_super) {\n    __extends(GroupSettings, _super);\n    function GroupSettings() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(true)\n    ], GroupSettings.prototype, \"showDropArea\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], GroupSettings.prototype, \"allowReordering\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], GroupSettings.prototype, \"showToggleButton\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], GroupSettings.prototype, \"showGroupedColumn\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(true)\n    ], GroupSettings.prototype, \"showUngroupButton\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], GroupSettings.prototype, \"disablePageWiseAggregates\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)([])\n    ], GroupSettings.prototype, \"columns\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)()\n    ], GroupSettings.prototype, \"captionTemplate\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], GroupSettings.prototype, \"enableLazyLoading\", void 0);\n    return GroupSettings;\n}(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.ChildProperty));\n\n/**\n * Configures the edit behavior of the Grid.\n */\nvar EditSettings = /** @class */ (function (_super) {\n    __extends(EditSettings, _super);\n    function EditSettings() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], EditSettings.prototype, \"allowAdding\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], EditSettings.prototype, \"allowEditing\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], EditSettings.prototype, \"allowDeleting\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('Normal')\n    ], EditSettings.prototype, \"mode\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(true)\n    ], EditSettings.prototype, \"allowEditOnDblClick\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(true)\n    ], EditSettings.prototype, \"showConfirmDialog\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], EditSettings.prototype, \"showDeleteConfirmDialog\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)()\n    ], EditSettings.prototype, \"template\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)()\n    ], EditSettings.prototype, \"headerTemplate\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)()\n    ], EditSettings.prototype, \"footerTemplate\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('Top')\n    ], EditSettings.prototype, \"newRowPosition\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)({})\n    ], EditSettings.prototype, \"dialog\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], EditSettings.prototype, \"allowNextRowEdit\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], EditSettings.prototype, \"showAddNewRow\", void 0);\n    return EditSettings;\n}(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.ChildProperty));\n\n/**\n * Configures the Loading Indicator of the Grid.\n */\nvar LoadingIndicator = /** @class */ (function (_super) {\n    __extends(LoadingIndicator, _super);\n    function LoadingIndicator() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('Spinner')\n    ], LoadingIndicator.prototype, \"indicatorType\", void 0);\n    return LoadingIndicator;\n}(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.ChildProperty));\n\n/**\n * Represents the Grid component.\n * ```html\n * <div id=\"grid\"></div>\n * <script>\n *  var gridObj = new Grid({ allowPaging: true });\n *  gridObj.appendTo(\"#grid\");\n * </script>\n * ```\n */\nvar Grid = /** @class */ (function (_super) {\n    __extends(Grid, _super);\n    /**\n     * Constructor for creating the component\n     *\n     * @param {GridModel} options - specifies the options\n     * @param {string | HTMLElement} element - specifies the element\n     * @hidden\n     */\n    function Grid(options, element) {\n        var _this_1 = _super.call(this, options, element) || this;\n        _this_1.isPreventScrollEvent = false;\n        _this_1.inViewIndexes = [];\n        _this_1.keyA = false;\n        _this_1.frozenRightCount = 0;\n        _this_1.freezeColumnRefresh = true;\n        _this_1.rightcount = 0;\n        _this_1.frozenLeftCount = 0;\n        _this_1.leftcount = 0;\n        _this_1.tablesCount = 1;\n        _this_1.movableCount = 0;\n        _this_1.movablecount = 0;\n        _this_1.fixedcount = 0;\n        _this_1.fixedCount = 0;\n        _this_1.visibleFrozenLeft = 0;\n        _this_1.visibleFrozenFixed = 0;\n        _this_1.isPreparedFrozenColumns = false;\n        _this_1.visibleFrozenRight = 0;\n        _this_1.visibleMovable = 0;\n        _this_1.frozenLeftColumns = [];\n        _this_1.frozenRightColumns = [];\n        _this_1.movableColumns = [];\n        _this_1.fixedColumns = [];\n        _this_1.stackedLeft = [];\n        _this_1.stackedRight = [];\n        _this_1.stackedFixed = [];\n        _this_1.stackedMovable = [];\n        _this_1.stackedarrayLeft = [];\n        _this_1.stackedarrayRight = [];\n        _this_1.stackedarrayFixed = [];\n        _this_1.stackedarrayMovable = [];\n        _this_1.media = {};\n        _this_1.autoFitColumnsResize = false;\n        /** @hidden */\n        _this_1.tableIndex = 0;\n        _this_1.componentRefresh = _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Component.prototype.refresh;\n        _this_1.isChangeDataSourceCall = false;\n        _this_1.mergedColumns = false;\n        /** @hidden */\n        _this_1.isVirtualAdaptive = false;\n        /** @hidden */\n        /**\n         * * If `requireTemplateRef` is set to false in the load event, then the template element can't be accessed in grid queryCellInfo, and rowDataBound events.\n         * * By default, React's grid queryCellInfo and rowDataBound events allow access to the template element.\n         * * Avoid accessing the template elements in the grid queryCellInfo and rowDataBound events to improve rendering performance by setting this value as false.\n         *\n         * @default true\n         */\n        _this_1.requireTemplateRef = true;\n        /** @hidden */\n        _this_1.vRows = [];\n        /** @hidden */\n        _this_1.vcRows = [];\n        /** @hidden */\n        _this_1.vGroupOffsets = {};\n        /** @hidden */\n        _this_1.rowUid = 0;\n        /** @hidden */\n        _this_1.translateX = 0;\n        /** @hidden */\n        _this_1.isManualRefresh = false;\n        /** @hidden */\n        _this_1.isAutoFitColumns = false;\n        /** @hidden */\n        _this_1.enableDeepCompare = false;\n        /** @hidden */\n        _this_1.totalDataRecordsCount = 0;\n        /** @hidden */\n        _this_1.disableSelectedRecords = [];\n        /** @hidden */\n        _this_1.partialSelectedRecords = [];\n        /** @hidden */\n        _this_1.isSpan = false;\n        /** @hidden */\n        _this_1.islazyloadRequest = false;\n        /** @hidden */\n        _this_1.isAddNewRow = false;\n        /** @hidden */\n        _this_1.addNewRowFocus = true;\n        /** @hidden */\n        _this_1.lockcolPositionCount = 0;\n        /** @hidden */\n        _this_1.prevPageMoving = false;\n        /** @hidden */\n        _this_1.pageTemplateChange = false;\n        /** @hidden */\n        _this_1.isAutoGen = false;\n        /** @hidden */\n        _this_1.isAutoGenerateColumns = false;\n        /** @hidden */\n        _this_1.pageRequireRefresh = true;\n        _this_1.mediaBindInstance = {};\n        /** @hidden */\n        _this_1.commandDelIndex = undefined;\n        /** @hidden */\n        _this_1.preventAutoFit = false;\n        /** @hidden */\n        _this_1.asyncTimeOut = 50;\n        /** @hidden */\n        _this_1.isExportGrid = false;\n        /** @hidden */\n        _this_1.isWidgetsDestroyed = false;\n        _this_1.enableLogger = false;\n        _this_1.needsID = true;\n        Grid_1.Inject(_actions_selection__WEBPACK_IMPORTED_MODULE_19__.Selection);\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.setValue)('mergePersistData', _this_1.mergePersistGridData, _this_1);\n        return _this_1;\n    }\n    Grid_1 = Grid;\n    /**\n     * Get the properties to be maintained in the persisted state.\n     *\n     * @returns {string} returns the persist data\n     */\n    Grid.prototype.getPersistData = function () {\n        var keyEntity = ['pageSettings', 'sortSettings',\n            'filterSettings', 'groupSettings', 'columns', 'searchSettings', 'selectedRowIndex', 'scrollPosition'];\n        var ignoreOnPersist = {\n            pageSettings: ['template', 'pageSizes', 'enableQueryString', 'totalRecordsCount', 'pageCount'],\n            filterSettings: ['type', 'mode', 'showFilterBarStatus', 'immediateModeDelay', 'ignoreAccent'],\n            groupSettings: ['showDropArea', 'showToggleButton', 'showGroupedColumn', 'showUngroupButton',\n                'disablePageWiseAggregates', 'hideCaptionCount'],\n            searchSettings: ['fields', 'operator', 'ignoreCase'],\n            sortSettings: [], columns: [], selectedRowIndex: [], scrollPosition: []\n        };\n        for (var i = 0; i < keyEntity.length; i++) {\n            var currentObject = this[keyEntity[parseInt(i.toString(), 10)]];\n            for (var _i = 0, _a = ignoreOnPersist[keyEntity[parseInt(i.toString(), 10)]]; _i < _a.length; _i++) {\n                var val = _a[_i];\n                delete currentObject[\"\" + val];\n            }\n        }\n        var temp = this.pageSettings.template;\n        var settings = Object.assign({ template: undefined }, this.pageSettings);\n        if (this.enableVirtualization && this.enablePersistence && this.contentModule &&\n            this.contentModule.getPageFromTop && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.scrollPosition) &&\n            !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.scrollPosition.top)) {\n            settings['properties']['currentPage'] = this.contentModule.getPageFromTop(this.scrollPosition.top, { block: 1 });\n        }\n        this.setProperties({ pageSettings: settings }, true);\n        var captionTemplateRef = this.groupSettings.captionTemplate;\n        var isAngularCaptionTemplate = captionTemplateRef && this.isAngular;\n        if (isAngularCaptionTemplate) {\n            delete this.groupSettings['properties']['captionTemplate'];\n        }\n        this.pageTemplateChange = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.pagerTemplate);\n        var persistData = this.addOnPersist(keyEntity);\n        settings.template = temp;\n        this.setProperties({ pageSettings: settings }, true);\n        if (isAngularCaptionTemplate) {\n            this.groupSettings.captionTemplate = captionTemplateRef;\n        }\n        return persistData;\n    };\n    /**\n     * To provide the array of modules needed for component rendering\n     *\n     * @returns {ModuleDeclaration[]} Returns the module Declaration\n     * @hidden\n     */\n    Grid.prototype.requiredModules = function () {\n        this.setFrozenCount();\n        this.enableInfiniteAggrgate();\n        var modules = [];\n        if (this.isDestroyed) {\n            return modules;\n        }\n        if (this.allowFiltering) {\n            modules.push({\n                member: 'filter',\n                args: [this, this.filterSettings, this.serviceLocator],\n                name: 'Filter'\n            });\n        }\n        if (this.allowExcelExport) {\n            modules.push({\n                member: 'ExcelExport',\n                args: [this, this.serviceLocator],\n                name: 'ExcelExport'\n            });\n        }\n        if (this.allowPdfExport) {\n            modules.push({\n                member: 'PdfExport',\n                args: [this],\n                name: 'PdfExport'\n            });\n        }\n        if (this.allowSorting) {\n            modules.push({\n                member: 'sort',\n                args: [this, this.sortSettings, this.sortedColumns, this.serviceLocator],\n                name: 'Sort'\n            });\n        }\n        if (this.allowPaging) {\n            modules.push({\n                member: 'pager',\n                args: [this, this.pageSettings],\n                name: 'Page'\n            });\n        }\n        if (this.allowSelection) {\n            modules.push({\n                member: 'selection',\n                args: [this, this.selectionSettings, this.serviceLocator],\n                name: 'Selection'\n            });\n        }\n        if (this.resizeCheck()) {\n            modules.push({\n                member: 'resize',\n                args: [this],\n                name: 'Resize'\n            });\n        }\n        if (this.allowReordering) {\n            modules.push({\n                member: 'reorder',\n                args: [this],\n                name: 'Reorder'\n            });\n        }\n        if (this.allowRowDragAndDrop) {\n            modules.push({\n                member: 'rowDragAndDrop',\n                args: [this],\n                name: 'RowDD'\n            });\n        }\n        if (this.allowGrouping) {\n            modules.push({\n                member: 'group',\n                args: [this, this.groupSettings, this.sortedColumns, this.serviceLocator],\n                name: 'Group'\n            });\n        }\n        if (this.aggregates.length) {\n            modules.push({ member: 'aggregate', args: [this, this.serviceLocator], name: 'Aggregate' });\n        }\n        if (this.isDetail()) {\n            modules.push({\n                member: 'detailRow',\n                args: [this, this.serviceLocator],\n                name: 'DetailRow'\n            });\n        }\n        if (this.toolbar || this.toolbarTemplate) {\n            modules.push({\n                member: 'toolbar',\n                args: [this, this.serviceLocator],\n                name: 'Toolbar'\n            });\n        }\n        if (this.enableVirtualization || this.enableColumnVirtualization) {\n            modules.push({\n                member: 'virtualscroll',\n                args: [this, this.serviceLocator],\n                name: 'VirtualScroll'\n            });\n        }\n        if (this.getFrozenColumns() || this.frozenRows || this.frozenRightCount || this.frozenLeftCount) {\n            modules.push({ member: 'freeze', args: [this, this.serviceLocator], name: 'Freeze' });\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.columns) && this.isCommandColumn(this.columns)) {\n            modules.push({\n                member: 'commandColumn',\n                args: [this, this.serviceLocator],\n                name: 'CommandColumn'\n            });\n        }\n        if (this.editSettings.allowAdding || this.editSettings.allowDeleting || this.editSettings.allowEditing) {\n            modules.push({\n                member: 'edit',\n                args: [this, this.serviceLocator],\n                name: 'Edit'\n            });\n        }\n        this.extendRequiredModules(modules);\n        return modules;\n    };\n    Grid.prototype.extendRequiredModules = function (modules) {\n        if (this.enableInfiniteScrolling) {\n            modules.push({\n                member: 'infiniteScroll',\n                args: [this, this.serviceLocator],\n                name: 'InfiniteScroll'\n            });\n        }\n        if (this.groupSettings.enableLazyLoading) {\n            modules.push({\n                member: 'lazyLoadGroup',\n                args: [this, this.serviceLocator],\n                name: 'LazyLoadGroup'\n            });\n        }\n        if (this.contextMenuItems) {\n            modules.push({\n                member: 'contextMenu',\n                args: [this, this.serviceLocator],\n                name: 'ContextMenu'\n            });\n        }\n        if (this.showColumnMenu) {\n            modules.push({\n                member: 'columnMenu',\n                args: [this, this.serviceLocator],\n                name: 'ColumnMenu'\n            });\n        }\n        if (this.showColumnChooser) {\n            modules.push({\n                member: 'columnChooser',\n                args: [this, this.serviceLocator],\n                name: 'ColumnChooser'\n            });\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.columns) && this.isForeignKeyEnabled(this.columns)) {\n            modules.push({ member: 'foreignKey', args: [this, this.serviceLocator], name: 'ForeignKey' });\n        }\n        if (this.enableLogger) {\n            modules.push({ member: 'logger', args: [this], name: 'Logger' });\n        }\n    };\n    Grid.prototype.resizeCheck = function () {\n        var autoFitColumns = this.getColumns().filter(function (c) { return c.autoFit === true; }).length ? true : false;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.columnModel) && this.columnModel.length && !(this.columnModel[0] instanceof _models_column__WEBPACK_IMPORTED_MODULE_6__.Column)) {\n            this.columnModel = [];\n        }\n        var columnMenu = this.showColumnMenu && (!this.columnMenuItems || this.columnMenuItems\n            .filter(function (c) { return c === 'AutoFit' || c === 'AutoFitAll'; }).length) ? true : false;\n        var contextMenu = this.contextMenuItems && this.contextMenuItems\n            .filter(function (c) { return c === 'AutoFit' || c === 'AutoFitAll'; }).length ? true : false;\n        return this.allowResizing || this.autoFitColumnsResize || autoFitColumns || columnMenu || contextMenu;\n    };\n    /**\n     * For internal use only - Initialize the event handler;\n     *\n     * @returns {void}\n     * @private\n     */\n    Grid.prototype.preRender = function () {\n        this.serviceLocator = new _services_service_locator__WEBPACK_IMPORTED_MODULE_11__.ServiceLocator;\n        this.initProperties();\n        this.initializeServices();\n    };\n    Grid.prototype.initProperties = function () {\n        this.isInitial = true;\n        this.sortedColumns = [];\n        this.inViewIndexes = [];\n        this.mediaCol = [];\n        this.isInitialLoad = false;\n        this.allowServerDataBinding = false;\n        this.ignoreCollectionWatch = true;\n        this.mergeCells = {};\n        this.isEdit = false;\n        this.checkAllRows = 'None';\n        this.isCheckBoxSelection = false;\n        this.isPersistSelection = false;\n        this.componentRefresh = _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Component.prototype.refresh;\n        this.freezeColumnRefresh = true;\n        this.filterOperators = {\n            contains: 'contains', endsWith: 'endswith', equal: 'equal', greaterThan: 'greaterthan', greaterThanOrEqual: 'greaterthanorequal',\n            lessThan: 'lessthan', lessThanOrEqual: 'lessthanorequal', notEqual: 'notequal', startsWith: 'startswith', wildCard: 'wildcard',\n            isNull: 'isnull', notNull: 'notnull', like: 'like'\n        };\n        this.defaultLocale = {\n            EmptyRecord: 'No records to display',\n            True: 'true',\n            False: 'false',\n            InvalidFilterMessage: 'Invalid Filter Data',\n            GroupDropArea: 'Drag a column header here to group its column',\n            UnGroup: 'Click here to ungroup',\n            UnGroupButton: 'Click here to ungroup',\n            GroupDisable: 'Grouping is disabled for this column',\n            FilterbarTitle: '\\'s filter bar cell',\n            EmptyDataSourceError: 'DataSource must not be empty at initial load since columns are generated from dataSource in AutoGenerate Column Grid',\n            // Toolbar Items\n            Add: 'Add',\n            Edit: 'Edit',\n            Cancel: 'Cancel',\n            Update: 'Update',\n            Delete: 'Delete',\n            Print: 'Print',\n            Pdfexport: 'PDF Export',\n            Excelexport: 'Excel Export',\n            Wordexport: 'Word Export',\n            Csvexport: 'CSV Export',\n            Search: 'Search',\n            Columnchooser: 'Columns',\n            Save: 'Save',\n            Item: 'item',\n            Items: 'items',\n            EditOperationAlert: 'No records selected for edit operation',\n            DeleteOperationAlert: 'No records selected for delete operation',\n            SaveButton: 'Save',\n            OKButton: 'OK',\n            CancelButton: 'Cancel',\n            EditFormTitle: 'Details of ',\n            AddFormTitle: 'Add New Record',\n            BatchSaveConfirm: 'Are you sure you want to save changes?',\n            BatchSaveLostChanges: 'Unsaved changes will be lost. Are you sure you want to continue?',\n            ConfirmDelete: 'Are you sure you want to Delete Record?',\n            CancelEdit: 'Are you sure you want to Cancel the changes?',\n            ChooseColumns: 'Choose Column',\n            ColumnMenu: 'Column Menu',\n            SearchColumns: 'search columns',\n            Matchs: 'No matches found',\n            FilterButton: 'Filter',\n            FilterTitle: 'Filter',\n            FilterIcon: 'Filter',\n            ClearButton: 'Clear',\n            StartsWith: 'Starts With',\n            NotStartsWith: 'Does Not Start With',\n            Like: 'Like',\n            EndsWith: 'Ends With',\n            NotEndsWith: 'Does Not End With',\n            Contains: 'Contains',\n            NotContains: 'Does Not Contain',\n            IsNull: 'Null',\n            NotNull: 'Not Null',\n            IsEmpty: 'Empty',\n            IsNotEmpty: 'Not Empty',\n            Equal: 'Equal',\n            NotEqual: 'Not Equal',\n            LessThan: 'Less Than',\n            LessThanOrEqual: 'Less Than Or Equal',\n            GreaterThan: 'Greater Than',\n            GreaterThanOrEqual: 'Greater Than Or Equal',\n            In: 'In',\n            NotIn: 'Not In',\n            ChooseDate: 'Choose a Date',\n            EnterValue: 'Enter the value',\n            Copy: 'Copy',\n            Group: 'Group by this column',\n            Ungroup: 'Ungroup by this column',\n            GroupButton: 'Group button',\n            UnGroupAria: 'ungroup button',\n            GroupSeperator: 'Separator for the grouped columns',\n            UnGroupIcon: 'ungroup the grouped column ',\n            GroupedSortIcon: 'sort the grouped column ',\n            GroupedDrag: 'Drag the grouped column',\n            GroupCaption: ' is groupcaption cell',\n            CheckBoxLabel: 'checkbox',\n            SelectAllCheckbox: 'Select all checkbox',\n            SelectRow: 'Select row',\n            autoFitAll: 'Autofit all columns',\n            autoFit: 'Autofit this column',\n            AutoFitAll: 'Autofit all columns',\n            AutoFit: 'Autofit this column',\n            Export: 'Export',\n            FirstPage: 'First Page',\n            LastPage: 'Last Page',\n            PreviousPage: 'Previous Page',\n            NextPage: 'Next Page',\n            SortAscending: 'Sort Ascending',\n            SortDescending: 'Sort Descending',\n            EditRecord: 'Edit Record',\n            DeleteRecord: 'Delete Record',\n            FilterMenu: 'Filter',\n            SelectAll: 'Select All',\n            AddCurrentSelection: 'Add current selection to filter',\n            Blanks: 'Blanks',\n            FilterTrue: 'True',\n            FilterFalse: 'False',\n            NoResult: 'No matches found',\n            ClearFilter: 'Clear Filter',\n            Clear: 'Clear',\n            NumberFilter: 'Number Filters',\n            TextFilter: 'Text Filters',\n            DateFilter: 'Date Filters',\n            DateTimeFilter: 'DateTime Filters',\n            MatchCase: 'Match Case',\n            Between: 'Between',\n            CustomFilter: 'Custom Filter',\n            CustomFilterPlaceHolder: 'Enter the value',\n            CustomFilterDatePlaceHolder: 'Choose a date',\n            AND: 'AND',\n            OR: 'OR',\n            ShowRowsWhere: 'Show rows where:',\n            ToolbarMenuDialogARIA: 'Toolbar menu dialog',\n            FilterMenuDialogARIA: 'Filter menu',\n            ExcelFilterDialogARIA: 'Excel filter',\n            CheckBoxFilterDialogARIA: 'Checkbox filter',\n            DialogEditARIA: 'Edit dialog',\n            ColumnMenuDialogARIA: 'Column menu dialog',\n            CustomFilterDialogARIA: 'Customer filter dialog',\n            SortAtoZ: 'Sort A to Z',\n            SortZtoA: 'Sort Z to A',\n            SortByOldest: 'Sort by Oldest',\n            SortByNewest: 'Sort by Newest',\n            SortSmallestToLargest: 'Sort Smallest to Largest',\n            SortLargestToSmallest: 'Sort Largest to Smallest',\n            Sort: 'Sort',\n            SortIcon: 'Sort',\n            FilterDescription: 'Press Alt Down to open filter Menu',\n            SortDescription: 'Press Enter to sort',\n            ColumnMenuDescription: 'Press Alt Down to open Column Menu',\n            GroupDescription: 'Press Ctrl space to group',\n            ColumnHeader: ' column header ',\n            TemplateCell: ' is template cell',\n            CommandColumnAria: 'is Command column column header ',\n            DialogEdit: 'Dialog edit',\n            ClipBoard: 'clipboard',\n            AscendingText: 'Ascending',\n            DescendingText: 'Descending',\n            NoneText: 'None',\n            Expanded: 'Expanded',\n            Collapsed: 'Collapsed'\n        };\n        this.keyConfigs = {\n            downArrow: 'downarrow',\n            upArrow: 'uparrow',\n            rightArrow: 'rightarrow',\n            leftArrow: 'leftarrow',\n            shiftDown: 'shift+downarrow',\n            shiftUp: 'shift+uparrow',\n            shiftRight: 'shift+rightarrow',\n            shiftLeft: 'shift+leftarrow',\n            home: 'home',\n            end: 'end',\n            escape: 'escape',\n            ctrlHome: 'ctrl+home',\n            ctrlEnd: 'ctrl+end',\n            pageUp: 'pageup',\n            pageDown: 'pagedown',\n            ctrlAltPageUp: 'ctrl+alt+pageup',\n            ctrlAltPageDown: 'ctrl+alt+pagedown',\n            altPageUp: 'alt+pageup',\n            altPageDown: 'alt+pagedown',\n            altDownArrow: 'alt+downarrow',\n            altUpArrow: 'alt+uparrow',\n            ctrlDownArrow: 'ctrl+downarrow',\n            ctrlUpArrow: 'ctrl+uparrow',\n            ctrlPlusA: 'ctrl+A',\n            ctrlPlusP: 'ctrl+P',\n            insert: 'insert',\n            delete: 'delete',\n            f2: 'f2',\n            enter: 'enter',\n            ctrlEnter: 'ctrl+enter',\n            shiftEnter: 'shift+enter',\n            tab: 'tab',\n            shiftTab: 'shift+tab',\n            space: 'space',\n            ctrlPlusC: 'ctrl+C',\n            ctrlShiftPlusH: 'ctrl+shift+H',\n            ctrlSpace: 'ctrl+space',\n            ctrlLeftArrow: 'ctrl+leftarrow',\n            ctrlRightArrow: 'ctrl+rightarrow'\n        };\n    };\n    /**\n     * For internal use only - To Initialize the component rendering.\n     *\n     * @returns {void}\n     * @private\n     */\n    Grid.prototype.render = function () {\n        this.log(['module_missing', 'promise_enabled', 'locale_missing', 'check_datasource_columns']);\n        this.ariaService.setOptions(this.element, { role: 'grid' });\n        (0,_syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_2__.createSpinner)({ target: this.element, cssClass: this.cssClass ? this.cssClass : null }, this.createElement);\n        this.renderModule = new _renderer_render__WEBPACK_IMPORTED_MODULE_5__.Render(this, this.serviceLocator);\n        this.searchModule = new _actions_search__WEBPACK_IMPORTED_MODULE_20__.Search(this);\n        this.scrollModule = new _actions_scroll__WEBPACK_IMPORTED_MODULE_22__.Scroll(this);\n        this.notify(_base_constant__WEBPACK_IMPORTED_MODULE_4__.initialLoad, {});\n        if (this.pageSettings.enableQueryString) {\n            var pageValue = new URL(window.location.href).searchParams.get('page');\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(pageValue) && window.location.href.indexOf('?page=') > 0) {\n                var currentPageValue = parseInt(pageValue, 10);\n                this.setProperties({ pageSettings: { currentPage: currentPageValue } }, true);\n                this.pageSettings.currentPage = currentPageValue;\n            }\n        }\n        if ((this.getDataModule().dataManager.dataSource.offline === true || this.getDataModule().dataManager.dataSource.url === undefined)\n            && !(!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.dataSource) && this.dataSource.result)) {\n            this.isVirtualAdaptive = true;\n        }\n        if (this.aggregateModule && this.aggregates.length) {\n            for (var i = 0; i < this.aggregates.length; i++) {\n                for (var j = 0; j < this.aggregates[parseInt(i.toString(), 10)].columns.length; j++) {\n                    var column = this.aggregates[parseInt(i.toString(), 10)].columns[parseInt(j.toString(), 10)];\n                    if (column['types']) {\n                        column.type = column['types'];\n                    }\n                }\n            }\n        }\n        if (this.isReact) {\n            var args = { requireTemplateRef: this.requireTemplateRef };\n            this.trigger(_base_constant__WEBPACK_IMPORTED_MODULE_4__.load, args);\n            if (!args.requireTemplateRef) {\n                this.requireTemplateRef = args.requireTemplateRef;\n            }\n        }\n        else {\n            this.trigger(_base_constant__WEBPACK_IMPORTED_MODULE_4__.load);\n        }\n        (0,_util__WEBPACK_IMPORTED_MODULE_3__.prepareColumns)(this.columns, this.enableColumnVirtualization, this);\n        if (this.enableColumnVirtualization && this.isChangeDataSourceCall && this.columnModel) {\n            this.columnModel = [];\n            this.updateColumnModel(this.columns);\n        }\n        this.isPreparedFrozenColumns = true;\n        if (this.enablePersistence) {\n            this.notify(_base_constant__WEBPACK_IMPORTED_MODULE_4__.columnsPrepared, {});\n        }\n        this.getMediaColumns();\n        (0,_util__WEBPACK_IMPORTED_MODULE_3__.setColumnIndex)(this.columns);\n        if (this.isFrozenGrid() && !this.mergedColumns) {\n            this.setInitialFrozenColumnIndex(this.columns);\n        }\n        this.checkLockColumns(this.columns);\n        this.getColumns();\n        this.processModel();\n        this.gridRender();\n        this.wireEvents();\n        this.addListener();\n        this.updateDefaultCursor();\n        this.updateStackedFilter();\n        if (this.loadingIndicator.indicatorType === 'Spinner') {\n            this.showSpinner();\n        }\n        this.notify(_base_constant__WEBPACK_IMPORTED_MODULE_4__.initialEnd, {});\n        if (this.loadingIndicator.indicatorType === 'Shimmer') {\n            this.refreshMaskRow();\n        }\n        if (this.refreshing) {\n            this.trigger('created');\n        }\n    };\n    Grid.prototype.setInitialFrozenColumnIndex = function (columns) {\n        for (var i = 0; i < columns.length; i++) {\n            var column = columns[parseInt(i.toString(), 10)];\n            column[\"\" + _base_string_literals__WEBPACK_IMPORTED_MODULE_28__.initialFrozenColumnIndex] = column.index;\n            if (column.columns) {\n                this.setInitialFrozenColumnIndex(column.columns);\n            }\n        }\n    };\n    /**\n     * By default, grid shows the spinner for all its actions. You can use this method to show spinner at your needed time.\n     *\n     * @returns {void}\n     */\n    Grid.prototype.showSpinner = function () {\n        if (!this.isExportGrid) {\n            (0,_syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_2__.showSpinner)(this.element);\n        }\n    };\n    /**\n     * By default, grid shows the spinner for all its actions. You can use this method to show spinner at your needed time.\n     *\n     * @returns {void}\n     */\n    Grid.prototype.hideSpinner = function () {\n        if (!this.isExportGrid) {\n            (0,_syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_2__.hideSpinner)(this.element);\n        }\n    };\n    Grid.prototype.showMaskRow = function (axisDirection, dialogElement) {\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.headerModule) || (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.contentModule)) {\n            return;\n        }\n        var gridHeader = this.getHeaderContent().firstChild;\n        var gridContent = this.getContent().firstChild;\n        var gridFooter = this.getFooterContent();\n        if (dialogElement) {\n            var dialogHolder = dialogElement.querySelector('.e-checkboxlist');\n            var maskRowCount = Math.floor(dialogHolder.getBoundingClientRect().height / this.getRowHeight());\n            var maskTemplate = '<div class=\"e-ftrchk e-mask-ftrchk\">'\n                + '<div class=\"e-checkbox-wrapper\"><input class=\"e-chk-hidden\">'\n                + this.getShimmerTemplate() + this.getShimmerTemplate() + '</div></div>';\n            dialogHolder.innerHTML = '';\n            for (var i = 0; i < maskRowCount; i++) {\n                dialogHolder.innerHTML += maskTemplate;\n                dialogHolder.querySelector('.e-ftrchk.e-mask-ftrchk').style.width = '100%';\n                dialogHolder.querySelector('.e-checkbox-wrapper').style.width = '100%';\n                var maskSpan = [].slice.call(dialogHolder\n                    .querySelectorAll('.e-mask:not(.e-mask-checkbox-filter-intent):not(.e-mask-checkbox-filter-span-intent)'));\n                maskSpan[0].classList.add('e-mask-checkbox-filter-intent');\n                maskSpan[1].classList.add('e-mask-checkbox-filter-span-intent');\n            }\n            return;\n        }\n        if ((!this.enableRtl && !this.getHeaderContent().style.paddingRight)\n            || (this.enableRtl && !this.getHeaderContent().style.paddingLeft)) {\n            gridContent.style.overflowY = 'hidden';\n        }\n        if (!this.isInitialLoad && !this.getColumns().length) {\n            var contentHeight = gridContent.getBoundingClientRect().height;\n            var maskTableHeight = contentHeight === 0 ? this.allowPaging ? this.pageSettings.pageSize * this.getRowHeight()\n                : window.innerHeight : contentHeight;\n            var contentRowCount = Math.ceil(maskTableHeight / this.getRowHeight());\n            if (this.rowRenderingMode !== 'Vertical') {\n                this.headerMaskTable = this.createEmptyMaskTable(gridHeader, 1);\n            }\n            this.contentMaskTable = this.createEmptyMaskTable(gridContent, contentRowCount);\n            return;\n        }\n        this.maskRowContentScroll = (this.enableVirtualization || this.enableColumnVirtualization) && axisDirection ? true : false;\n        if (!this.contentMaskTable) {\n            var content = gridContent;\n            if (this.enableVirtualization || this.enableColumnVirtualization) {\n                content = content.querySelector('.e-virtualtable');\n            }\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(content.querySelector('tbody'))) {\n                this.contentMaskTable = this.createMaskTable(content, this.getContentMaskColumns(), axisDirection);\n            }\n        }\n        if (!this.headerMaskTable && (this.isFrozenGrid() || (this.enableColumnVirtualization && axisDirection === 'X'))) {\n            var content = gridHeader;\n            if (this.enableColumnVirtualization && axisDirection === 'X') {\n                content = content.querySelector('.e-virtualtable');\n            }\n            this.headerMaskTable = this.createMaskTable(content, this.getContentMaskColumns(), axisDirection);\n        }\n        if (gridFooter && gridFooter.querySelector('.e-summaryrow')) {\n            var gridFooterContent = gridFooter.firstChild;\n            if (!this.footerContentMaskTable) {\n                var footerContent = gridFooterContent;\n                this.footerContentMaskTable = this.createMaskTable(footerContent);\n            }\n        }\n        if (!(this.enableVirtualization && axisDirection)) {\n            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(gridContent, 'scroll', this.translateMaskRow, this);\n        }\n    };\n    Grid.prototype.getContentMaskColumns = function () {\n        return this.getColumns();\n    };\n    Grid.prototype.createEmptyMaskTable = function (maskElement, rowCount) {\n        var table = this.createElement('table', { className: 'e-table e-masked-table' });\n        var tbody = this.createElement('tbody', { className: 'e-masked-tbody' });\n        var row = this.createElement('tr', { className: 'e-masked-row e-row' });\n        row.style.height = this.getRowHeight() + \"px\";\n        var cell = this.createElement('td', { className: 'e-masked-cell e-rowcell' });\n        cell.innerHTML = this.getShimmerTemplate();\n        row.appendChild(cell);\n        for (var i = 0; i < rowCount; i++) {\n            tbody.appendChild(row.cloneNode(true));\n        }\n        table.appendChild(tbody);\n        maskElement.appendChild(table);\n        return table;\n    };\n    Grid.prototype.createMaskTable = function (element, columns, axisDirection) {\n        var parentElement = element;\n        var header = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(parentElement, '.e-gridheader') ? true : false;\n        var content = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(parentElement, '.e-gridcontent') ? true : false;\n        var footer = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(parentElement, '.e-gridfooter') ? true : false;\n        var gridContent = this.getContent().firstChild;\n        var gridContentScrollHeight = gridContent.scrollHeight;\n        var table = parentElement.querySelector('table');\n        var maskTable = table.cloneNode();\n        maskTable.removeAttribute('role');\n        maskTable.removeAttribute('id');\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.updateCSSText)(maskTable, \"position: absolute; z-index: 5; width: \" + table.getBoundingClientRect().width + \"px;\");\n        if (header && !(this.enableColumnVirtualization && axisDirection === 'X')) {\n            maskTable.style.transform = 'translate(0px,'\n                + table.querySelector('thead').getBoundingClientRect().height + 'px)';\n        }\n        maskTable.setAttribute('class', 'e-table e-masked-table');\n        var maskColgroup = table.querySelector('colgroup').cloneNode(true);\n        maskColgroup.removeAttribute('id');\n        maskColgroup.setAttribute('class', 'e-masked-colgroup');\n        maskTable.appendChild(maskColgroup);\n        if (header && this.enableColumnVirtualization && axisDirection === 'X') {\n            var row = this.createMaskRow(maskColgroup, columns);\n            if (this.isFrozenGrid()) {\n                var frzTd = [].slice.call(row.querySelectorAll('.e-rowcell'));\n                for (var i = 0; i < frzTd.length; i++) {\n                    if (i < this.frozenLeftCount) {\n                        if (this.frozenLeftCount - 1 === i) {\n                            frzTd[parseInt(i.toString(), 10)].classList.add('e-freezeleftborder');\n                        }\n                        frzTd[parseInt(i.toString(), 10)].classList.add('e-leftfreeze');\n                        frzTd[parseInt(i.toString(), 10)].setAttribute('aria-colindex', (i + 1).toString());\n                        frzTd[parseInt(i.toString(), 10)].style.left = (columns[parseInt(i.toString(), 10)].valueX -\n                            this.translateX) + 'px';\n                    }\n                    else if ((frzTd.length - this.frozenRightCount) <= i && columns[parseInt(i.toString(), 10)]) {\n                        if ((frzTd.length - this.frozenRightCount) === i) {\n                            frzTd[parseInt(i.toString(), 10)].classList.add('e-freezerightborder');\n                        }\n                        frzTd[parseInt(i.toString(), 10)].classList.add('e-rightfreeze');\n                        frzTd[parseInt(i.toString(), 10)].setAttribute('aria-colindex', (i + 1).toString());\n                        frzTd[parseInt(i.toString(), 10)].style.right = (this.translateX +\n                            columns[parseInt(i.toString(), 10)].valueX) + 'px';\n                    }\n                }\n            }\n            var thead = table.querySelector('thead');\n            var rows = [].slice.call(thead.querySelectorAll('tr'));\n            var maskTHead = thead.cloneNode();\n            maskTHead.removeAttribute('role');\n            maskTHead.setAttribute('class', 'e-masked-thead');\n            var rowCount = rows.length;\n            for (var i = 0; i < rowCount; i++) {\n                maskTHead.appendChild(row.cloneNode(true));\n                maskTHead.childNodes[parseInt(i.toString(), 10)].style\n                    .height = rows[parseInt(i.toString(), 10)].getBoundingClientRect().height + 'px';\n            }\n            maskTable.appendChild(maskTHead);\n        }\n        var maskTBody = table.querySelector('tbody').cloneNode();\n        maskTBody.removeAttribute('role');\n        maskTBody.setAttribute('class', 'e-masked-tbody');\n        var tbody = table.querySelector('tbody');\n        if (content || header) {\n            var rowCountElement = gridContent;\n            var rowCount = Math.ceil(rowCountElement.getBoundingClientRect().height / this.getRowHeight());\n            if (this.allowPaging && this.pageSettings.pageSize !== this.currentViewData.length &&\n                this.pagerModule.pagerObj.totalPages !== this.pageSettings.currentPage) {\n                var row = this.createMaskRow(maskColgroup, columns);\n                var altRow = row.cloneNode(true);\n                altRow.classList.add('e-altrow');\n                for (var i = 0; i < this.pageSettings.pageSize - this.currentViewData.length; i++) {\n                    maskTBody.appendChild((i % 2 === 1) ? altRow.cloneNode(true) : row.cloneNode(true));\n                }\n            }\n            if (tbody.querySelector('.e-emptyrow') || !tbody.childNodes.length || (content && this.childGrid)) {\n                var row = this.createMaskRow(maskColgroup, columns);\n                var altRow = row.cloneNode(true);\n                altRow.classList.add('e-altrow');\n                for (var i = 0; i < rowCount; i++) {\n                    var altNumber = 1;\n                    maskTBody.appendChild((i + altNumber) % 2 === 0 ? altRow.cloneNode(true) : row.cloneNode(true));\n                }\n            }\n            else {\n                var rowsQuery = 'tr:not(.e-hide):not([style*=\"display:none\"]):not([style*=\"display: none\"])';\n                var rows = [].slice.call(tbody.querySelectorAll(rowsQuery));\n                var addEditRow = tbody.querySelector('.e-addedrow, .e-editedrow');\n                var addEditRowIndex = void 0;\n                if (addEditRow) {\n                    addEditRowIndex = rows.indexOf(addEditRow);\n                    if (this.isFrozenGrid() && this.enableColumnVirtualization) {\n                        var frzTd = [].slice.call(rows[addEditRowIndex + 1].querySelectorAll('.e-rowcell'));\n                        for (var i = 0; i < frzTd.length; i++) {\n                            if (i < this.frozenLeftCount) {\n                                frzTd[parseInt(i.toString(), 10)].classList.add('e-leftfreeze');\n                                frzTd[parseInt(i.toString(), 10)].setAttribute('aria-colindex', (i + 1).toString());\n                                frzTd[parseInt(i.toString(), 10)].style.left = (columns[parseInt(i.toString(), 10)].valueX - this.translateX) + 'px';\n                            }\n                            else if ((frzTd.length - this.frozenRightCount) <= i && columns[parseInt(i.toString(), 10)]) {\n                                frzTd[parseInt(i.toString(), 10)].classList.add('e-rightfreeze');\n                                frzTd[parseInt(i.toString(), 10)].setAttribute('aria-colindex', (i + 1).toString());\n                                frzTd[parseInt(i.toString(), 10)].style.right = (this.translateX +\n                                    columns[parseInt(i.toString(), 10)].valueX) + 'px';\n                            }\n                        }\n                    }\n                    if (addEditRow.classList.contains('e-addedrow')) {\n                        rows.splice(addEditRowIndex, 2);\n                    }\n                    else {\n                        rows.splice(addEditRowIndex, 1);\n                    }\n                }\n                rowCount = (this.enableVirtualization || this.enableColumnVirtualization) && axisDirection ? rows.length\n                    : rowCount <= rows.length ? rowCount : rows.length;\n                for (var i = 0; i < rowCount; i++) {\n                    maskTBody.appendChild(this.applyMaskRow(rows[parseInt(i.toString(), 10)].cloneNode(true), rows[parseInt(i.toString(), 10)].getBoundingClientRect().height));\n                }\n                if (addEditRow && addEditRow.classList.contains('e-editedrow') && addEditRowIndex < rowCount) {\n                    var addEditMaskRow = maskTBody.childNodes[parseInt(addEditRowIndex.toString(), 10)];\n                    addEditMaskRow.style.height = this.getRowHeight() + 'px';\n                    addEditMaskRow.classList.add('e-row');\n                    if (addEditRow.classList.contains('e-altrow')) {\n                        addEditMaskRow.classList.add('e-altrow');\n                    }\n                }\n            }\n        }\n        maskTable.appendChild(maskTBody);\n        if (footer) {\n            var tfoot = table.querySelector('tfoot');\n            var maskTFoot = tfoot.cloneNode();\n            maskTFoot.setAttribute('class', 'e-masked-tfoot');\n            var rows = [].slice.call(tfoot.querySelectorAll('tr'));\n            for (var i = 0; i < rows.length; i++) {\n                maskTFoot.appendChild(this.applyMaskRow(rows[parseInt(i.toString(), 10)].cloneNode(true), rows[parseInt(i.toString(), 10)].getBoundingClientRect().height));\n            }\n            maskTable.appendChild(maskTFoot);\n        }\n        if (header && this.isFrozenGrid() && !this.enableColumnVirtualization) {\n            this.getHeaderContent().querySelector('.' + _base_string_literals__WEBPACK_IMPORTED_MODULE_28__.headerContent).style.position = 'relative';\n        }\n        parentElement.insertBefore(maskTable, parentElement.firstChild);\n        if (content && !(this.enableVirtualization && axisDirection)) {\n            var minScrollTop = gridContentScrollHeight - maskTable.getBoundingClientRect().height;\n            minScrollTop = minScrollTop < 0 ? 0 : minScrollTop;\n            var scrollTop = gridContent.scrollTop <= minScrollTop ? gridContent.scrollTop : minScrollTop;\n            if (this.enableVirtualization) {\n                scrollTop -= (0,_util__WEBPACK_IMPORTED_MODULE_3__.getTransformValues)((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(parentElement, '.e-virtualtable')).height;\n            }\n            maskTable.style.transform = 'translate(0px,' + scrollTop + 'px)';\n        }\n        return maskTable;\n    };\n    Grid.prototype.applyMaskRow = function (row, rowHeight) {\n        var maskRow = row;\n        maskRow.removeAttribute('role');\n        maskRow.removeAttribute('aria-rowindex');\n        maskRow.removeAttribute('data-uid');\n        maskRow.classList.add('e-masked-row');\n        maskRow.style.height = rowHeight + 'px';\n        var maskCells = [].slice.call(maskRow.childNodes);\n        for (var i = 0; i < maskCells.length; i++) {\n            var maskCell = maskCells[parseInt(i.toString(), 10)];\n            var displayAsCheckBoxCell = maskCell.firstChild && maskCell.firstChild.classList\n                && maskCell.firstChild.classList.contains('e-checkbox-wrapper');\n            maskCell.removeAttribute('role');\n            maskCell.removeAttribute('tabindex');\n            maskCell.removeAttribute('aria-label');\n            if (this.enableColumnVirtualization && maskCell.classList.contains('e-fixedfreeze')) {\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([maskCell], ['e-fixedfreeze', 'e-freezeleftborder', 'e-freezerightborder']);\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([maskCell], ['e-unfreeze']);\n            }\n            maskCell.removeAttribute('aria-colindex');\n            maskCell.removeAttribute('index');\n            maskCell.removeAttribute('ej-mappingname');\n            maskCell.removeAttribute('ej-mappingvalue');\n            maskCell.removeAttribute('e-mappinguid');\n            maskCell.removeAttribute('aria-expanded');\n            maskCell.classList.add('e-masked-cell');\n            maskCell.innerHTML = this.getShimmerTemplate();\n            if (maskCell.classList.contains('e-recordplusexpand') || maskCell.classList.contains('e-recordpluscollapse')) {\n                maskCell.firstChild.classList.add('e-mask-group-intent');\n            }\n            else if (maskCell.classList.contains('e-gridchkbox') || displayAsCheckBoxCell) {\n                maskCell.firstChild.classList.add('e-mask-checkbox-intent');\n            }\n            else if (maskCell.classList.contains('e-rowdragdrop')) {\n                maskCell.firstChild.classList.add('e-mask-drag-intent');\n            }\n            else if (maskCell.classList.contains('e-indentcell')) {\n                maskCell.innerHTML = '';\n            }\n        }\n        return maskRow;\n    };\n    Grid.prototype.createMaskRow = function (refColgroup, refColumns) {\n        var colgroup = refColgroup;\n        var columns = refColumns;\n        var row = this.createElement('tr', { className: 'e-masked-row e-row' });\n        if (this.rowRenderingMode !== 'Vertical') {\n            row.style.height = this.getRowHeight() + 'px';\n        }\n        var td = this.createElement('td', { className: 'e-masked-cell e-rowcell' });\n        for (var i = 0, colIndex = 0; i < colgroup.childNodes.length; i++) {\n            var col = colgroup.childNodes[parseInt(i.toString(), 10)];\n            var localTD = td.cloneNode();\n            localTD.innerHTML = this.getShimmerTemplate();\n            if (!(col.classList.contains('e-group-intent') || col.classList.contains('e-detail-intent')\n                || col.classList.contains('e-drag-intent'))) {\n                if (this.rowRenderingMode === 'Vertical' && columns[parseInt(colIndex.toString(), 10)]) {\n                    localTD.setAttribute('data-cell', columns[parseInt(colIndex.toString(), 10)].headerText ?\n                        columns[parseInt(colIndex.toString(), 10)].headerText : columns[parseInt(colIndex.toString(), 10)].field);\n                }\n                if (col.style.display === 'none') {\n                    localTD.classList.add('e-hide');\n                }\n                else {\n                    localTD.style.textAlign = columns[parseInt(colIndex.toString(), 10)]\n                        && columns[parseInt(colIndex.toString(), 10)].textAlign ?\n                        columns[parseInt(colIndex.toString(), 10)].textAlign.toLowerCase()\n                        : this.enableRtl ? 'right' : 'left';\n                    if (columns[parseInt(colIndex.toString(), 10)] && (columns[parseInt(colIndex.toString(), 10)].type === 'checkbox'\n                        || columns[parseInt(colIndex.toString(), 10)].displayAsCheckBox)) {\n                        localTD.firstChild.classList.add('e-mask-checkbox-intent');\n                    }\n                }\n                colIndex++;\n            }\n            else {\n                if (col.classList.contains('e-group-intent')) {\n                    localTD.firstChild.classList.add('e-mask-group-intent');\n                }\n                else if (col.classList.contains('e-detail-intent')) {\n                    localTD.firstChild.classList.add('e-mask-detail-intent');\n                }\n                else if (col.classList.contains('e-drag-intent')) {\n                    localTD.firstChild.classList.add('e-mask-drag-intent');\n                }\n            }\n            row.appendChild(localTD);\n        }\n        return row;\n    };\n    Grid.prototype.getShimmerTemplate = function () {\n        if (this.maskRowContentScroll) {\n            return '<span class=\"e-mask e-skeleton e-skeleton-text\"></span>';\n        }\n        return '<span class=\"e-mask e-skeleton e-skeleton-text e-shimmer-wave\"></span>';\n    };\n    Grid.prototype.addShimmerEffect = function () {\n        this.maskRowContentScroll = false;\n        var maskSpan = [].slice.call(this.element.querySelectorAll('.e-mask:not(.e-shimmer-wave)'));\n        for (var i = 0; i < maskSpan.length; i++) {\n            if (maskSpan[parseInt(i.toString(), 10)]) {\n                maskSpan[parseInt(i.toString(), 10)].classList.add('e-shimmer-wave');\n            }\n        }\n    };\n    Grid.prototype.translateMaskRow = function (e) {\n        var target = e.target;\n        var maskTables = target.querySelectorAll('.e-masked-table');\n        for (var i = 0; i < maskTables.length; i++) {\n            var maskTable = maskTables[parseInt(i.toString(), 10)];\n            if (maskTable) {\n                var minScrollTop = target.scrollHeight - maskTable.getBoundingClientRect().height;\n                minScrollTop = minScrollTop < 0 ? 0 : minScrollTop;\n                var scrollTop = target.scrollTop <= minScrollTop ? target.scrollTop : minScrollTop;\n                if (this.enableVirtualization) {\n                    scrollTop -= (0,_util__WEBPACK_IMPORTED_MODULE_3__.getTransformValues)((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(maskTable, '.e-virtualtable')).height;\n                }\n                maskTable.style.transform = 'translate(0px,' + scrollTop + 'px)';\n            }\n        }\n    };\n    Grid.prototype.removeMaskRow = function () {\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.contentModule)) {\n            var gridContent = this.getContent().firstChild;\n            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(gridContent, 'scroll', this.translateMaskRow);\n        }\n        if (this.headerMaskTable && this.isFrozenGrid() && !this.enableColumnVirtualization) {\n            this.getHeaderContent().querySelector('.' + _base_string_literals__WEBPACK_IMPORTED_MODULE_28__.headerContent).style.position = '';\n        }\n        var maskTables = [this.headerMaskTable,\n            this.contentMaskTable, this.footerContentMaskTable];\n        for (var i = 0; i < maskTables.length; i++) {\n            var maskTable = maskTables[parseInt(i.toString(), 10)];\n            if (maskTable) {\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.remove)(maskTable);\n            }\n        }\n        this.headerMaskTable = null;\n        this.contentMaskTable = null;\n        this.footerContentMaskTable = null;\n    };\n    Grid.prototype.refreshMaskRow = function () {\n        var gridContent = this.getContent().firstChild;\n        if (!this.isInitialLoad && !this.getColumns().length) {\n            return;\n        }\n        if (this.contentMaskTable && gridContent.querySelector('.e-masked-table')) {\n            var content = gridContent;\n            if (this.enableVirtualization) {\n                content = content.querySelector('.e-virtualtable');\n            }\n            this.refreshMaskRowColgroupWidth(content);\n        }\n    };\n    Grid.prototype.refreshMaskRowColgroupWidth = function (content) {\n        var table = content.querySelector('table:not(.e-masked-table)');\n        var colgroup = table.querySelector(_base_string_literals__WEBPACK_IMPORTED_MODULE_28__.colGroup).cloneNode(true);\n        var maskTable = content.querySelector('.e-masked-table');\n        colgroup.removeAttribute('id');\n        colgroup.setAttribute('class', 'e-masked-colgroup');\n        for (var i = 0; i < colgroup.childNodes.length; i++) {\n            colgroup.childNodes[parseInt(i.toString(), 10)].removeAttribute('class');\n        }\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.remove)(maskTable.querySelector('.e-masked-colgroup'));\n        maskTable.insertBefore(colgroup, maskTable.firstChild);\n        maskTable.style.width = table.getBoundingClientRect().width + 'px';\n    };\n    Grid.prototype.updateStackedFilter = function () {\n        if (this.allowFiltering && this.filterSettings.type === 'FilterBar' &&\n            this.getHeaderContent().getElementsByClassName('e-stackedheadercell').length) {\n            this.getHeaderContent().classList.add('e-stackedfilter');\n        }\n        else {\n            this.getHeaderContent().classList.remove('e-stackedfilter');\n        }\n    };\n    Grid.prototype.getMediaColumns = function () {\n        if (!this.enableColumnVirtualization) {\n            var gcol = this.getColumns();\n            this.getShowHideService = this.serviceLocator.getService('showHideService');\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(gcol)) {\n                for (var index = 0; index < gcol.length; index++) {\n                    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(gcol[parseInt(index.toString(), 10)].hideAtMedia)\n                        && ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(gcol[parseInt(index.toString(), 10)].visible)\n                            || gcol[parseInt(index.toString(), 10)].visible)) {\n                        this.pushMediaColumn(gcol[parseInt(index.toString(), 10)], index);\n                    }\n                }\n            }\n        }\n        this.updateFrozenColumnsWidth();\n    };\n    Grid.prototype.pushMediaColumn = function (col, index) {\n        this.mediaCol.push(col);\n        this.media[col.uid] = window.matchMedia(col.hideAtMedia);\n        this.mediaQueryUpdate(index, this.media[col.uid]);\n        this.mediaBindInstance[parseInt(index.toString(), 10)] = this.mediaQueryUpdate.bind(this, index);\n        this.media[col.uid].addListener(this.mediaBindInstance[parseInt(index.toString(), 10)]);\n    };\n    /**\n     * @param {Column} col - specifies the column\n     * @returns {void}\n     * @hidden\n     */\n    Grid.prototype.updateMediaColumns = function (col) {\n        if (!this.enableColumnVirtualization) {\n            var index = this.getColumnIndexByUid(col.uid);\n            for (var i = 0; i < this.mediaCol.length; i++) {\n                if (col.uid === this.mediaCol[parseInt(i.toString(), 10)].uid) {\n                    this.mediaCol.splice(i, 1);\n                    return;\n                }\n            }\n            this.pushMediaColumn(col, index);\n        }\n    };\n    /**\n     * @param {number} columnIndex - specifies the column index\n     * @param {MediaQueryList} e - specifies the MediaQueryList\n     * @returns {void}\n     * @hidden\n     */\n    Grid.prototype.mediaQueryUpdate = function (columnIndex, e) {\n        var col = this.getColumns()[parseInt(columnIndex.toString(), 10)];\n        if (this.mediaCol.some(function (mediaColumn) { return mediaColumn.uid === col.uid; })) {\n            col.visible = e.matches;\n            if (this.isInitialLoad) {\n                this.invokedFromMedia = true;\n                if (col.visible) {\n                    this.showHider.show(col.headerText, 'headerText');\n                }\n                else {\n                    this.showHider.hide(col.headerText, 'headerText');\n                }\n            }\n        }\n    };\n    Grid.prototype.refreshMediaCol = function () {\n        this.isInitialLoad = true;\n        var footerContent = this.element.querySelector('.' + _base_string_literals__WEBPACK_IMPORTED_MODULE_28__.gridFooter);\n        if (this.aggregates.length && this.element.scrollHeight > parseInt(this.height.toString(), 10) && footerContent) {\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([footerContent], ['e-footerpadding']);\n        }\n        var checkboxColumn = this.getColumns().filter(function (col) { return col.type === 'checkbox'; });\n        if (checkboxColumn.length === 0 || checkboxColumn.length && this.selectionSettings.checkboxMode === 'ResetOnRowClick') {\n            this.isCheckBoxSelection = false;\n        }\n        if (this.rowRenderingMode === 'Vertical') {\n            if (this.enableHover) {\n                this.setProperties({ enableAdaptiveUI: true, enableHover: false }, true);\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([this.element], 'e-gridhover');\n            }\n        }\n        if (this.enableAdaptiveUI && this.scrollModule) {\n            this.scrollModule.refresh();\n        }\n        if (this.isFrozenGrid() && this.isAutoGenerateColumns) {\n            this.widthService.setWidthToColumns();\n            this.isAutoGenerateColumns = false;\n        }\n    };\n    Grid.prototype.removeMediaListener = function () {\n        for (var i = 0; i < this.mediaCol.length; i++) {\n            this.media[this.mediaCol[parseInt(i.toString(), 10)].uid]\n                .removeListener(this.mediaBindInstance[this.mediaCol[parseInt(i.toString(), 10)].index]);\n        }\n    };\n    /**\n     * For internal use only - Initialize the event handler\n     *\n     * @returns {void}\n     * @private\n     */\n    Grid.prototype.eventInitializer = function () {\n        //eventInitializer\n    };\n    /**\n     * Destroys the component (detaches/removes all event handlers, attributes, classes, and empties the component element).\n     *\n     * @function destroy\n     * @returns {void}\n     */\n    Grid.prototype.destroy = function () {\n        var gridElement = this.element;\n        if (!gridElement) {\n            return;\n        }\n        var hasGridChild = gridElement.querySelector('.' + _base_string_literals__WEBPACK_IMPORTED_MODULE_28__.gridHeader) &&\n            gridElement.querySelector('.' + _base_string_literals__WEBPACK_IMPORTED_MODULE_28__.gridContent) ? true : false;\n        if (hasGridChild) {\n            this.unwireEvents();\n        }\n        this.removeListener();\n        this.removeMediaListener();\n        this.notify(_base_constant__WEBPACK_IMPORTED_MODULE_4__.destroy, {});\n        this.destroyDependentModules();\n        if (this.isReact) {\n            this.destroyTemplate(['template']);\n        }\n        if (this.isVue) {\n            this.destroyTemplate();\n        }\n        if (hasGridChild) {\n            _super.prototype.destroy.call(this);\n        }\n        this.toolTipObj.destroy();\n        if (this.isReact && !_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isIE) {\n            this.element.innerHTML = '';\n        }\n        var modules = ['renderModule', 'headerModule', 'contentModule', 'valueFormatterService',\n            'serviceLocator', 'ariaService', 'keyboardModule', 'widthService', 'searchModule', 'showHider',\n            'scrollModule', 'printModule', 'clipboardModule', 'focusModule'];\n        for (var i = 0; i < modules.length; i++) {\n            if (this[modules[parseInt(i.toString(), 10)]]) {\n                this[modules[parseInt(i.toString(), 10)]] = null;\n            }\n        }\n        this.element.innerHTML = '';\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.classList)(this.element, [], ['e-rtl', 'e-gridhover', 'e-responsive', 'e-default', 'e-device', 'e-grid-min-height']);\n    };\n    Grid.prototype.destroyDependentModules = function () {\n        var gridElement = this.element;\n        if (!gridElement || (!gridElement.querySelector('.' + _base_string_literals__WEBPACK_IMPORTED_MODULE_28__.gridHeader) && !gridElement.querySelector('.' + _base_string_literals__WEBPACK_IMPORTED_MODULE_28__.gridContent))) {\n            return;\n        }\n        this.scrollModule.destroy();\n        this.keyboardModule.destroy();\n        this.focusModule.destroy();\n        this.clipboardModule.destroy();\n        this.printModule.destroy();\n    };\n    /**\n     * For internal use only - Get the module name.\n     *\n     * @returns {string} returns the module name\n     * @private\n     */\n    Grid.prototype.getModuleName = function () {\n        return 'grid';\n    };\n    Grid.prototype.enableBoxSelection = function () {\n        if (this.enableAutoFill) {\n            this.selectionSettings.cellSelectionMode = 'BoxWithBorder';\n            this.element.classList.add('e-afenabled');\n        }\n        else {\n            this.element.classList.remove('e-afenabled');\n            this.notify(_base_constant__WEBPACK_IMPORTED_MODULE_4__.destroyAutoFillElements, {});\n        }\n    };\n    Grid.prototype.setCSSClass = function (oldCSSClass) {\n        if (this.cssClass) {\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([this.element], this.cssClass.split(' '));\n        }\n        if (oldCSSClass) {\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([this.element], oldCSSClass.split(' '));\n        }\n    };\n    /**\n     * Called internally if any of the property value changed.\n     *\n     * @param {GridModel} newProp - Defines new properties\n     * @param {GridModel} oldProp - Defines old properties\n     * @returns {void}\n     * @hidden\n     */\n    Grid.prototype.onPropertyChanged = function (newProp, oldProp) {\n        var requireRefresh = false;\n        var requireGridRefresh = false;\n        var freezeRefresh = false;\n        var checkCursor;\n        var args = { requestType: 'refresh' };\n        var childGridParent = null;\n        var parentInstance = null;\n        if (this.isDestroyed) {\n            return;\n        }\n        this.log('module_missing');\n        if (this.isEllipsisTooltip()) {\n            this.toolTipObj.close();\n        }\n        var properties = Object.keys(newProp);\n        if (properties.indexOf('columns') > -1) {\n            if (this.enableColumnVirtualization) {\n                this.columnModel = [];\n            }\n            this.updateColumnObject();\n            requireGridRefresh = true;\n        }\n        for (var _i = 0, properties_1 = properties; _i < properties_1.length; _i++) {\n            var prop = properties_1[_i];\n            switch (prop) {\n                case 'allowPaging':\n                    this.notify(_base_constant__WEBPACK_IMPORTED_MODULE_4__.uiUpdate, { module: 'pager', enable: this.allowPaging });\n                    requireRefresh = true;\n                    if (this.height === '100%') {\n                        this.scrollModule.refresh();\n                    }\n                    break;\n                case 'pageSettings':\n                    if (this.pageTemplateChange) {\n                        this.pageTemplateChange = false;\n                        this.notify(_base_constant__WEBPACK_IMPORTED_MODULE_4__.inBoundModelChanged, { module: 'pager', properties: newProp.pageSettings });\n                        break;\n                    }\n                    if (this.pagerModule && this.pagerModule.isCancel) {\n                        this.pagerModule.isCancel = false;\n                        return;\n                    }\n                    this.notify(_base_constant__WEBPACK_IMPORTED_MODULE_4__.inBoundModelChanged, { module: 'pager', properties: newProp.pageSettings });\n                    if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(newProp.pageSettings.currentPage) && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(newProp.pageSettings.pageSize)\n                        && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(newProp.pageSettings.totalRecordsCount)\n                        || !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(oldProp.pageSettings) &&\n                            ((newProp.pageSettings.currentPage !== oldProp.pageSettings.currentPage)\n                                && !this.enableColumnVirtualization && !this.enableVirtualization && this.pageRequireRefresh\n                                && this.pageSettings.totalRecordsCount <= this.pageSettings.pageSize)) {\n                        requireRefresh = true;\n                    }\n                    if (!this.pageRequireRefresh) {\n                        this.pageRequireRefresh = true;\n                    }\n                    if (this.pagerModule && this.pagerModule.isCancel) {\n                        this.pagerModule.isCancel = false;\n                    }\n                    break;\n                case 'allowSorting':\n                    this.notify(_base_constant__WEBPACK_IMPORTED_MODULE_4__.uiUpdate, { module: 'sort', enable: this.allowSorting });\n                    requireRefresh = true;\n                    checkCursor = true;\n                    break;\n                case 'allowFiltering':\n                    this.updateStackedFilter();\n                    this.notify(_base_constant__WEBPACK_IMPORTED_MODULE_4__.uiUpdate, { module: 'filter', enable: this.allowFiltering });\n                    requireRefresh = true;\n                    if (this.filterSettings.type !== 'FilterBar' || (this.editSettings.showAddNewRow && this.filterSettings.type === 'FilterBar')) {\n                        this.refreshHeader();\n                    }\n                    else {\n                        if (this.height === '100%') {\n                            this.scrollModule.refresh();\n                        }\n                    }\n                    break;\n                case 'height':\n                case 'width':\n                    this.notify(_base_constant__WEBPACK_IMPORTED_MODULE_4__.uiUpdate, { module: 'scroll', properties: { width: newProp.width, height: newProp.height } });\n                    if (this.allowPaging) {\n                        this.pagerModule.refresh();\n                    }\n                    break;\n                case 'allowReordering':\n                    this.headerModule.refreshUI();\n                    checkCursor = true;\n                    break;\n                case 'allowRowDragAndDrop':\n                    this.notify(_base_constant__WEBPACK_IMPORTED_MODULE_4__.uiUpdate, { module: 'rowDragAndDrop', enable: this.allowRowDragAndDrop });\n                    this.renderModule.refresh();\n                    this.headerModule.refreshUI();\n                    break;\n                case 'allowSelection':\n                    this.notify(_base_constant__WEBPACK_IMPORTED_MODULE_4__.uiUpdate, { module: 'selection', enable: this.allowSelection });\n                    this.renderModule.refresh();\n                    break;\n                case 'cssClass':\n                    this.setCSSClass(oldProp.cssClass);\n                    break;\n                case 'enableAutoFill':\n                    if (this.selectionModule) {\n                        this.enableBoxSelection();\n                        this.selectionModule.updateAutoFillPosition();\n                    }\n                    break;\n                case 'rowTemplate':\n                    this.rowTemplateFn = (0,_util__WEBPACK_IMPORTED_MODULE_3__.templateCompiler)(this.rowTemplate);\n                    requireRefresh = true;\n                    break;\n                case 'emptyRecordTemplate':\n                    this.emptyRecordTemplateFn = (0,_util__WEBPACK_IMPORTED_MODULE_3__.templateCompiler)(this.emptyRecordTemplate);\n                    requireRefresh = true;\n                    break;\n                case 'detailTemplate':\n                    this.detailTemplateFn = (0,_util__WEBPACK_IMPORTED_MODULE_3__.templateCompiler)(this.detailTemplate);\n                    requireRefresh = true;\n                    break;\n                case 'allowGrouping':\n                    this.notify(_base_constant__WEBPACK_IMPORTED_MODULE_4__.uiUpdate, { module: 'group', enable: this.allowGrouping });\n                    this.headerModule.refreshUI();\n                    requireRefresh = true;\n                    checkCursor = true;\n                    if (this.height === '100%') {\n                        this.scrollModule.refresh();\n                    }\n                    break;\n                case 'enableInfiniteScrolling':\n                case 'childGrid':\n                    requireRefresh = true;\n                    childGridParent = this.parentDetails ? document.querySelector(\"#\" + this.parentDetails.parentID) : null;\n                    parentInstance = childGridParent ? childGridParent.ej2_instances[0] : null;\n                    if (this.childGrid && parentInstance && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(parentInstance.childGrid.childGrid)) {\n                        var childGridObject = Object.assign({}, parentInstance.childGrid, { childGrid: newProp.childGrid });\n                        parentInstance.setProperties({ childGrid: childGridObject }, true);\n                        while (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(parentInstance.parentDetails)) {\n                            var currentParent = document.querySelector(\"#\" + parentInstance.parentDetails.parentID);\n                            var currentParentInstance = currentParent ? currentParent.ej2_instances[0] : null;\n                            if (currentParentInstance) {\n                                var currentChildObject = Object.assign({}, currentParentInstance.childGrid);\n                                currentChildObject.childGrid = parentInstance.childGrid;\n                                currentParentInstance.setProperties({ childGrid: currentChildObject }, true);\n                            }\n                            parentInstance = currentParentInstance;\n                        }\n                    }\n                    this.headerModule.refreshUI();\n                    break;\n                case 'toolbar':\n                    this.notify(_base_constant__WEBPACK_IMPORTED_MODULE_4__.uiUpdate, { module: 'toolbar' });\n                    if (this.height === '100%') {\n                        this.scrollModule.refresh();\n                    }\n                    break;\n                case 'groupSettings':\n                    this.notify(_base_constant__WEBPACK_IMPORTED_MODULE_4__.inBoundModelChanged, {\n                        module: 'group', properties: newProp.groupSettings,\n                        oldProperties: oldProp.groupSettings\n                    });\n                    break;\n                case 'aggregates':\n                    if (!this.aggregates.length && this.allowGrouping && this.groupSettings.columns.length) {\n                        requireRefresh = true;\n                    }\n                    this.notify(_base_constant__WEBPACK_IMPORTED_MODULE_4__.uiUpdate, { module: 'aggregate', properties: newProp });\n                    if (this.height === '100%') {\n                        this.scrollModule.refresh();\n                    }\n                    break;\n                case 'frozenColumns':\n                case 'frozenRows':\n                case 'enableVirtualization':\n                case 'enableColumnVirtualization':\n                case 'currencyCode':\n                case 'locale':\n                    if (this.isFrozenGrid()) {\n                        this.log('frozen_rows_columns');\n                    }\n                    freezeRefresh = true;\n                    requireGridRefresh = true;\n                    this.addNewRowFocus = true;\n                    break;\n                case 'query':\n                    if (!this.getDataModule().isQueryInvokedFromData) {\n                        requireRefresh = true;\n                    }\n                    this.getDataModule().isQueryInvokedFromData = false;\n                    break;\n                case 'autoFit':\n                    if (this.autoFit) {\n                        this.preventAdjustColumns();\n                    }\n                    else {\n                        this.restoreAdjustColumns();\n                    }\n                    break;\n                default:\n                    this.extendedPropertyChange(prop, newProp, requireGridRefresh);\n            }\n        }\n        if (checkCursor) {\n            this.updateDefaultCursor();\n        }\n        if (requireGridRefresh) {\n            if (freezeRefresh || this.getFrozenColumns() || this.frozenRows\n                || (this.frozenLeftColumns.length || this.frozenRightColumns.length)) {\n                this.freezeRefresh();\n            }\n            else {\n                this.refresh();\n            }\n        }\n        else if (requireRefresh) {\n            this.notify(_base_constant__WEBPACK_IMPORTED_MODULE_4__.modelChanged, args);\n            requireRefresh = false;\n            this.maintainSelection(newProp.selectedRowIndex);\n        }\n    };\n    Grid.prototype.extendedPropertyChange = function (prop, newProp, requireGridRefresh) {\n        switch (prop) {\n            case 'enableRtl':\n                this.updateRTL();\n                if (this.allowPaging) {\n                    this.element.querySelector('.e-gridpager').ej2_instances[0].enableRtl = newProp.enableRtl;\n                    this.element.querySelector('.e-gridpager').ej2_instances[0].dataBind();\n                }\n                if (this.height !== 'auto') {\n                    this.scrollModule.removePadding(!newProp.enableRtl);\n                    this.scrollModule.setPadding();\n                }\n                if (this.toolbar && this.toolbarModule) {\n                    this.toolbarModule.getToolbar().ej2_instances[0].enableRtl = newProp.enableRtl;\n                    this.toolbarModule.getToolbar().ej2_instances[0].dataBind();\n                }\n                if (this.contextMenuItems && this.contextMenuModule) {\n                    this.contextMenuModule.getContextMenu().ej2_instances[0].enableRtl = newProp.enableRtl;\n                    this.contextMenuModule.getContextMenu().ej2_instances[0].dataBind();\n                }\n                if (this.showColumnMenu && this.columnMenuModule && !this.enableAdaptiveUI) {\n                    this.columnMenuModule.getColumnMenu().ej2_instances[0].enableRtl = newProp.enableRtl;\n                    this.columnMenuModule.getColumnMenu().ej2_instances[0].dataBind();\n                }\n                if (this.filterSettings.type === 'FilterBar' && this.filterSettings.showFilterBarOperator) {\n                    this.refreshHeader();\n                }\n                this.notify(_base_constant__WEBPACK_IMPORTED_MODULE_4__.rtlUpdated, {});\n                break;\n            case 'enableAltRow':\n                this.renderModule.refresh();\n                break;\n            case 'allowResizing':\n                if (this.resizeModule) {\n                    this.resizeModule.render();\n                }\n                this.headerModule.refreshUI();\n                this.updateResizeLines();\n                break;\n            case 'rowHeight':\n                if (this.rowHeight) {\n                    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([this.element], 'e-grid-min-height');\n                }\n                else {\n                    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([this.element], 'e-grid-min-height');\n                }\n                this.renderModule.refresh();\n                this.headerModule.refreshUI();\n                break;\n            case 'gridLines':\n                this.updateGridLines();\n                break;\n            case 'showColumnMenu':\n                this.headerModule.refreshUI();\n                this.notify(_base_constant__WEBPACK_IMPORTED_MODULE_4__.uiUpdate, { module: 'columnMenu', enable: true });\n                break;\n            case 'columnMenuItems':\n                this.notify(_base_constant__WEBPACK_IMPORTED_MODULE_4__.uiUpdate, { module: 'columnMenu', enable: this.columnMenuItems });\n                break;\n            case 'contextMenuItems':\n                this.notify(_base_constant__WEBPACK_IMPORTED_MODULE_4__.uiUpdate, { module: 'contextMenu', enable: this.contextMenuItems });\n                break;\n            case 'showColumnChooser':\n                if (this.toolbarModule) {\n                    this.toolbarModule.refreshToolbarItems();\n                }\n                this.notify(_base_constant__WEBPACK_IMPORTED_MODULE_4__.uiUpdate, { module: 'columnChooser', enable: this.showColumnChooser });\n                break;\n            case 'filterSettings':\n                this.updateStackedFilter();\n                this.notify(_base_constant__WEBPACK_IMPORTED_MODULE_4__.inBoundModelChanged, { module: 'filter', properties: newProp.filterSettings });\n                break;\n            case 'searchSettings':\n                this.notify(_base_constant__WEBPACK_IMPORTED_MODULE_4__.inBoundModelChanged, { module: 'search', properties: newProp.searchSettings });\n                break;\n            case 'sortSettings':\n                this.notify(_base_constant__WEBPACK_IMPORTED_MODULE_4__.inBoundModelChanged, { module: 'sort' });\n                break;\n            case 'selectionSettings':\n                this.notify(_base_constant__WEBPACK_IMPORTED_MODULE_4__.inBoundModelChanged, { module: 'selection', properties: newProp.selectionSettings });\n                break;\n            case 'editSettings':\n                this.notify(_base_constant__WEBPACK_IMPORTED_MODULE_4__.inBoundModelChanged, { module: 'edit', properties: newProp.editSettings });\n                break;\n            case 'allowTextWrap':\n            case 'textWrapSettings':\n                if (this.allowTextWrap) {\n                    this.applyTextWrap();\n                }\n                else {\n                    this.removeTextWrap();\n                }\n                this.notify(_base_constant__WEBPACK_IMPORTED_MODULE_4__.freezeRender, { case: 'textwrap', isModeChg: (prop === 'textWrapSettings') });\n                this.refreshHeader();\n                if (this.height === '100%') {\n                    this.scrollModule.refresh();\n                }\n                break;\n            case 'dataSource':\n                // eslint-disable-next-line no-case-declarations\n                var requestPendingState = this.getDataModule().getState();\n                if (this.allowPaging && this.pageSettings.pageSizes && !this.getDataModule().isRemote()\n                    && !(requestPendingState && requestPendingState.isPending)) {\n                    if (this.pagerModule.pagerObj.isAllPage) {\n                        var count = this.dataSource instanceof _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__.DataManager ? this.dataSource.dataSource.json.length :\n                            'result' in this.dataSource ? this.dataSource.count : this.dataSource.length;\n                        var isAllPage = Array.isArray(this.pageSettings.pageSizes) &&\n                            this.pageSettings.pageSizes.indexOf('All') > -1 ? true : this.pageSettings.pageSizes;\n                        if (!isAllPage && this.pageSettings.pageSize !== count) {\n                            this.pagerModule.pagerObj.isAllPage = false;\n                        }\n                        else {\n                            this.setProperties({ pageSettings: { pageSize: count } }, true);\n                            this.pagerModule.pagerObj.setProperties({ pageSize: count }, true);\n                        }\n                    }\n                }\n                if (this.allowSelection && this.isPersistSelection && !(requestPendingState && requestPendingState.isPending)) {\n                    this.clearSelection();\n                }\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.dataSource) && this.dataSource.result) {\n                    this.isVirtualAdaptive = false;\n                }\n                if (Object.getPrototypeOf(newProp).deepWatch) {\n                    var pKeyField = this.getPrimaryKeyFieldNames()[0];\n                    for (var i = 0, props = Object.keys(newProp.dataSource); i < props.length; i++) {\n                        this.setRowData((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)(pKeyField, this.dataSource[props[parseInt(i.toString(), 10)]]), this.dataSource[props[parseInt(i.toString(), 10)]]);\n                    }\n                }\n                else if (requestPendingState.isPending) {\n                    var gResult = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.dataSource) ? this.dataSource.result : [];\n                    var names = (requestPendingState.group || []);\n                    if (names.length && !this.groupSettings.enableLazyLoading && !(gResult.length && gResult[0].field)) {\n                        for (var i = 0; i < names.length; i++) {\n                            gResult = _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__.DataUtil.group(gResult, names[parseInt(i.toString(), 10)], requestPendingState.aggregates\n                                || []);\n                        }\n                    }\n                    this.dataSource = {\n                        result: gResult, count: this.dataSource.count,\n                        aggregates: this.dataSource.aggregates\n                    };\n                    this.getDataModule().setState({});\n                    requestPendingState.resolver(this.dataSource);\n                }\n                else {\n                    if ((!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.dataSource) && this.dataSource.result\n                        && this.dataSource.count && this.groupSettings.columns.length)) {\n                        var gResult = this.dataSource.result;\n                        var names = this.groupSettings.columns;\n                        if (names.length && !(gResult.length && gResult[0].field)) {\n                            for (var i = 0; i < names.length; i++) {\n                                gResult = _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__.DataUtil.group(gResult, names[parseInt(i.toString(), 10)]);\n                            }\n                        }\n                        this.dataSource = {\n                            result: gResult, count: this.dataSource.count\n                        };\n                    }\n                    this.getDataModule().setState({ isDataChanged: false });\n                    this.notify(_base_constant__WEBPACK_IMPORTED_MODULE_4__.dataSourceModified, {});\n                    if (!requireGridRefresh) {\n                        this.renderModule.refresh();\n                        if (this.isCheckBoxSelection) {\n                            this.notify(_base_constant__WEBPACK_IMPORTED_MODULE_4__.beforeRefreshOnDataChange, {});\n                        }\n                    }\n                }\n                this.scrollRefresh();\n                break;\n            case 'enableHover':\n                // eslint-disable-next-line no-case-declarations\n                var action = newProp.enableHover ? _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass : _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass;\n                action([this.element], 'e-gridhover');\n                break;\n            case 'selectedRowIndex':\n                if (!this.isSelectedRowIndexUpdating) {\n                    this.selectRow(newProp.selectedRowIndex);\n                }\n                this.isSelectedRowIndexUpdating = false;\n                break;\n            case 'resizeSettings':\n                this.widthService.setWidthToTable();\n                break;\n            case 'enableAdaptiveUI':\n                this.notify(_base_constant__WEBPACK_IMPORTED_MODULE_4__.setFullScreenDialog, {});\n                break;\n            case 'rowRenderingMode':\n                this.enableVerticalRendering();\n                this.notify(_base_constant__WEBPACK_IMPORTED_MODULE_4__.rowModeChange, {});\n                this.refresh();\n                break;\n            case 'enableStickyHeader':\n                this.scrollModule.addStickyListener(newProp.enableStickyHeader);\n                break;\n            case 'allowPdfExport':\n                if (this.toolbarModule) {\n                    this.toolbarModule.refreshToolbarItems();\n                }\n                break;\n            case 'allowExcelExport':\n                if (this.toolbarModule) {\n                    this.toolbarModule.refreshToolbarItems();\n                }\n                break;\n        }\n    };\n    Grid.prototype.maintainSelection = function (index) {\n        var _this_1 = this;\n        if (index !== -1) {\n            var fn_1 = function () {\n                _this_1.selectRow(index);\n                _this_1.off(_base_constant__WEBPACK_IMPORTED_MODULE_4__.contentReady, fn_1);\n            };\n            this.on(_base_constant__WEBPACK_IMPORTED_MODULE_4__.contentReady, fn_1, this);\n        }\n    };\n    /**\n     * @param {Object} prop - Defines the property\n     * @param {boolean} muteOnChange - Defines the mute on change\n     * @returns {void}\n     * @private\n     */\n    Grid.prototype.setProperties = function (prop, muteOnChange) {\n        _super.prototype.setProperties.call(this, prop, muteOnChange);\n        var filterSettings = 'filterSettings';\n        if (prop[\"\" + filterSettings] && this.filterModule && muteOnChange) {\n            this.filterModule.refreshFilter();\n        }\n    };\n    /**\n     * @hidden\n     * @returns {number} - Returns the tables count\n     */\n    Grid.prototype.getTablesCount = function () {\n        return this.tablesCount;\n    };\n    /**\n     * @hidden\n     * @returns {void}\n     */\n    Grid.prototype.updateDefaultCursor = function () {\n        var headerCells = [].slice.call(this.getHeaderContent().querySelectorAll('.e-headercell:not(.e-stackedheadercell)'));\n        var stdHdrCell = [].slice.call(this.getHeaderContent().getElementsByClassName('e-stackedheadercell'));\n        var cols = this.getColumns();\n        for (var i = 0; i < headerCells.length; i++) {\n            var cell = headerCells[parseInt(i.toString(), 10)];\n            if (this.allowGrouping || this.allowReordering || this.allowSorting) {\n                if (!cols[parseInt(i.toString(), 10)].allowReordering || !cols[parseInt(i.toString(), 10)].allowSorting\n                    || !cols[parseInt(i.toString(), 10)].allowGrouping) {\n                    cell.classList.add('e-defaultcursor');\n                }\n                else {\n                    cell.classList.add('e-mousepointer');\n                }\n            }\n        }\n        for (var count = 0; count < stdHdrCell.length; count++) {\n            if (this.allowReordering) {\n                stdHdrCell[parseInt(count.toString(), 10)].classList.add('e-mousepointer');\n            }\n        }\n    };\n    Grid.prototype.updateColumnModel = function (columns, isRecursion) {\n        for (var i = 0, len = (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(columns) ? columns.length : 0); i < len; i++) {\n            if (columns[parseInt(i.toString(), 10)].columns) {\n                this.updateColumnModel(columns[parseInt(i.toString(), 10)].columns, true);\n            }\n            else {\n                this.columnModel.push(columns[parseInt(i.toString(), 10)]);\n            }\n        }\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(isRecursion) || !isRecursion) {\n            this.updateLockableColumns();\n        }\n    };\n    Grid.prototype.getFrozenLeftCount = function () {\n        return this.getFrozenColumns() || this.getFrozenLeftColumnsCount();\n    };\n    Grid.prototype.isFrozenGrid = function () {\n        return this.getFrozenColumns() !== 0 || this.frozenLeftColumns.length !== 0 || this.frozenRightColumns.length !== 0 ||\n            this.fixedColumns.length !== 0;\n    };\n    Grid.prototype.getFrozenMode = function () {\n        return this.frozenName;\n    };\n    Grid.prototype.updateLockableColumns = function () {\n        var cols = this.columnModel;\n        var frozenCount = 0;\n        var movableCount = 0;\n        var frozenColumns = this.getFrozenColumns();\n        for (var i = 0; i < cols.length; i++) {\n            if (cols[parseInt(i.toString(), 10)].lockColumn) {\n                if (i < frozenColumns) {\n                    cols.splice(frozenCount, 0, cols.splice(i, 1)[0]);\n                    frozenCount++;\n                }\n                else {\n                    cols.splice(frozenColumns + movableCount, 0, cols.splice(i, 1)[0]);\n                    movableCount++;\n                }\n            }\n        }\n    };\n    Grid.prototype.checkLockColumns = function (cols) {\n        for (var i = 0; i < cols.length; i++) {\n            if (cols[parseInt(i.toString(), 10)].columns) {\n                this.checkLockColumns(cols[parseInt(i.toString(), 10)].columns);\n            }\n            else if (cols[parseInt(i.toString(), 10)].lockColumn) {\n                this.lockcolPositionCount++;\n            }\n        }\n    };\n    /**\n     * @param {string} position - specifies position\n     * @returns {number} returns the width\n     * @hidden\n     */\n    Grid.prototype.leftrightColumnWidth = function (position) {\n        var cols = position === 'left' ? this.getFrozenLeftColumns() : position === 'right' ? this.getFrozenRightColumns() : [];\n        var width = 0;\n        cols.filter(function (col) {\n            if (col.visible) {\n                width += parseInt(col.width.toString(), 10);\n            }\n        });\n        return width;\n    };\n    /**\n     * Gets the columns from the Grid.\n     *\n     * @param {boolean} isRefresh - Defines the boolean whether to refresh\n     * @returns {Column[]} - returns the column\n     */\n    Grid.prototype.getColumns = function (isRefresh) {\n        var _this_1 = this;\n        var inview = this.inViewIndexes.map(function (v) { return v - _this_1.groupSettings.columns.length; }).filter(function (v) { return v > -1; });\n        var vLen = inview.length;\n        if (!this.enableColumnVirtualization || (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.columnModel) || this.columnModel.length === 0 || isRefresh) {\n            this.columnModel = [];\n            this.updateColumnModel(this.columns);\n        }\n        var columns = vLen === 0 ? this.columnModel :\n            this.getVisibleColumns().slice(inview[0], inview[vLen - 1] + 1);\n        var left = [];\n        var right = [];\n        var movable = [];\n        var isLeftRightFrozen = this.enableColumnVirtualization && this.isPreparedFrozenColumns && vLen === 0;\n        if (isLeftRightFrozen) {\n            this.frozenRightColumns = [];\n            this.frozenLeftColumns = [];\n        }\n        for (var i = 0; i < columns.length; i++) {\n            if (columns[parseInt(i.toString(), 10)].freeze === 'Left' || columns[parseInt(i.toString(), 10)].isFrozen) {\n                left.push(columns[parseInt(i.toString(), 10)]);\n                if (isLeftRightFrozen) {\n                    this.frozenLeftColumns.push(columns[parseInt(i.toString(), 10)]);\n                }\n            }\n            else if (columns[parseInt(i.toString(), 10)].freeze === 'Right') {\n                right.push(columns[parseInt(i.toString(), 10)]);\n                if (isLeftRightFrozen) {\n                    this.frozenRightColumns.push(columns[parseInt(i.toString(), 10)]);\n                }\n            }\n            else {\n                movable.push(columns[parseInt(i.toString(), 10)]);\n            }\n        }\n        if (this.enableColumnVirtualization && this.isFrozenGrid()) {\n            if (this.frozenLeftColumns.length) {\n                left = this.frozenLeftColumns;\n            }\n            if (this.frozenRightColumns.length) {\n                right = this.frozenRightColumns;\n            }\n        }\n        return left.concat(movable).concat(right);\n    };\n    /**\n     * @private\n     * @param {string} stackedHeader - Defines the stacked header\n     * @param {Column[]} col - Defines the column\n     * @returns {Column} Returns the Column\n     */\n    Grid.prototype.getStackedHeaderColumnByHeaderText = function (stackedHeader, col) {\n        for (var i = 0; i < col.length; i++) {\n            var individualColumn = col[parseInt(i.toString(), 10)];\n            if (individualColumn.field === stackedHeader || individualColumn.headerText === stackedHeader) {\n                this.stackedColumn = individualColumn;\n                break;\n            }\n            else if (individualColumn.columns) {\n                this.getStackedHeaderColumnByHeaderText(stackedHeader, individualColumn.columns);\n            }\n        }\n        return this.stackedColumn;\n    };\n    /**\n     * @private\n     * @returns {number[]} Returns the column indexes\n     */\n    Grid.prototype.getColumnIndexesInView = function () {\n        return this.inViewIndexes;\n    };\n    /**\n     * @private\n     * @returns {Query} - returns the query\n     */\n    Grid.prototype.getQuery = function () {\n        return this.query;\n    };\n    /**\n     * @private\n     * @returns {object} - returns the locale constants\n     */\n    Grid.prototype.getLocaleConstants = function () {\n        return this.defaultLocale;\n    };\n    /**\n     * @param {number[]} indexes - specifies the indexes\n     * @returns {void}\n     * @private\n     */\n    Grid.prototype.setColumnIndexesInView = function (indexes) {\n        this.inViewIndexes = indexes;\n    };\n    /**\n     * Gets the visible columns from the Grid.\n     *\n     * @returns {Column[]} returns the column\n     */\n    Grid.prototype.getVisibleColumns = function () {\n        return this.getCurrentVisibleColumns();\n    };\n    /**\n     * Gets the header div of the Grid.\n     *\n     * @returns {Element} - Returns the element\n     */\n    Grid.prototype.getHeaderContent = function () {\n        return this.headerModule.getPanel();\n    };\n    /**\n     * Sets the header div of the Grid to replace the old header.\n     *\n     * @param  {Element} element - Specifies the Grid header.\n     *\n     * @returns {void}\n     */\n    Grid.prototype.setGridHeaderContent = function (element) {\n        this.headerModule.setPanel(element);\n    };\n    /**\n     * Gets the content table of the Grid.\n     *\n     * @returns {Element} - Returns the element\n     */\n    Grid.prototype.getContentTable = function () {\n        return this.contentModule.getTable();\n    };\n    /**\n     * Sets the content table of the Grid to replace the old content table.\n     *\n     * @param  {Element} element - Specifies the Grid content table.\n     *\n     * @returns {void}\n     */\n    Grid.prototype.setGridContentTable = function (element) {\n        this.contentModule.setTable(element);\n    };\n    /**\n     * Gets the content div of the Grid.\n     *\n     * @returns {Element} Returns the element\n     */\n    Grid.prototype.getContent = function () {\n        return this.contentModule.getPanel();\n    };\n    /**\n     * Sets the content div of the Grid to replace the old Grid content.\n     *\n     * @param  {Element} element - Specifies the Grid content.\n     *\n     * @returns {void}\n     */\n    Grid.prototype.setGridContent = function (element) {\n        this.contentModule.setPanel(element);\n    };\n    /**\n     * Gets the header table element of the Grid.\n     *\n     * @returns {Element} returns the element\n     */\n    Grid.prototype.getHeaderTable = function () {\n        return this.headerModule.getTable();\n    };\n    /**\n     * Sets the header table of the Grid to replace the old one.\n     *\n     * @param  {Element} element - Specifies the Grid header table.\n     *\n     * @returns {void}\n     */\n    Grid.prototype.setGridHeaderTable = function (element) {\n        this.headerModule.setTable(element);\n    };\n    /**\n     * Gets the footer div of the Grid.\n     *\n     * @returns {Element} returns the element\n     */\n    Grid.prototype.getFooterContent = function () {\n        this.footerElement = this.element.getElementsByClassName(_base_string_literals__WEBPACK_IMPORTED_MODULE_28__.gridFooter)[0];\n        return this.footerElement;\n    };\n    /**\n     * Gets the footer table element of the Grid.\n     *\n     * @returns {Element} returns the element\n     */\n    Grid.prototype.getFooterContentTable = function () {\n        this.footerElement = this.element.getElementsByClassName(_base_string_literals__WEBPACK_IMPORTED_MODULE_28__.gridFooter)[0];\n        return this.footerElement.firstChild.firstChild;\n    };\n    /**\n     * Gets the pager of the Grid.\n     *\n     * @returns {Element} returns the element\n     */\n    Grid.prototype.getPager = function () {\n        return this.gridPager; //get element from pager\n    };\n    /**\n     * Sets the pager of the Grid to replace the old pager.\n     *\n     * @param  {Element} element - Specifies the Grid pager.\n     *\n     * @returns {void}\n     */\n    Grid.prototype.setGridPager = function (element) {\n        this.gridPager = element;\n    };\n    /**\n     * Gets a row by index.\n     *\n     * @param  {number} index - Specifies the row index.\n     *\n     * @returns {Element} returns the element\n     */\n    Grid.prototype.getRowByIndex = function (index) {\n        if (this.enableVirtualization && this.groupSettings.enableLazyLoading) {\n            return this.lazyLoadRender.getRowByIndex(index);\n        }\n        else {\n            return this.contentModule.getRowByIndex(index);\n        }\n    };\n    /**\n     * Gets a movable tables row by index.\n     *\n     * @param  {number} index - Specifies the row index.\n     *\n     * @returns {Element} returns the element\n     * @deprecated This method has been marked as deprecated. It is recommended to utilize the `getRowByIndex()` method instead, and apply the `e-unfreeze` class to select the movable cell within the tr element.\n     */\n    Grid.prototype.getMovableRowByIndex = function (index) {\n        return this.contentModule.getRowByIndex(index);\n    };\n    /**\n     * Gets a frozen tables row by index.\n     *\n     * @param  {number} index - Specifies the row index.\n     * @returns {Element} returns the element\n     * @deprecated This method has been marked as deprecated. It is recommended to utilize the `getRowByIndex()` method instead, and apply the `e-leftfreeze` class to select the frozen cell within the tr element.\n     */\n    Grid.prototype.getFrozenRowByIndex = function (index) {\n        return this.contentModule.getRowByIndex(index);\n    };\n    /**\n     * Gets all the data rows of the Grid.\n     *\n     * @returns {Element[]} returns the element\n     */\n    Grid.prototype.getRows = function () {\n        return this.contentModule.getRowElements();\n    };\n    /**\n     * Gets a frozen right tables row element by index.\n     *\n     * @param  {number} index - Specifies the row index.\n     * @returns {Element} returns the element\n     * @deprecated This method has been marked as deprecated. It is recommended to utilize the `getRowByIndex()` method instead, and apply the `e-rightfreeze` class to select the frozen right cell within the tr element.\n     */\n    Grid.prototype.getFrozenRightRowByIndex = function (index) {\n        return this.contentModule.getRowByIndex(index);\n    };\n    /**\n     * Get a row information based on cell\n     *\n     * @param {Element | EventTarget} target - specifies the element\n     *\n     * @returns {RowInfo} returns the row info\n     */\n    Grid.prototype.getRowInfo = function (target) {\n        var ele = target;\n        var args = { target: target };\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(target) && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)((0,_util__WEBPACK_IMPORTED_MODULE_3__.parentsUntil)(ele, 'e-detailrowcollapse')\n            && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)((0,_util__WEBPACK_IMPORTED_MODULE_3__.parentsUntil)(ele, 'e-recordplusexpand')))) {\n            var cell = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(ele, '.' + _base_string_literals__WEBPACK_IMPORTED_MODULE_28__.rowCell);\n            if (!cell) {\n                var row_1 = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(ele, '.' + _base_string_literals__WEBPACK_IMPORTED_MODULE_28__.row);\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(row_1) && !row_1.classList.contains('e-addedrow')) {\n                    var rowObj = this.getRowObjectFromUID(row_1.getAttribute('data-uid'));\n                    var rowIndex = parseInt(row_1.getAttribute(_base_string_literals__WEBPACK_IMPORTED_MODULE_28__.ariaRowIndex), 10) - 1;\n                    args = { row: row_1, rowData: rowObj.data, rowIndex: rowIndex };\n                }\n                return args;\n            }\n            var cellIndex = parseInt(cell.getAttribute(_base_string_literals__WEBPACK_IMPORTED_MODULE_28__.ariaColIndex), 10) - 1;\n            var row_2 = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(cell, '.' + _base_string_literals__WEBPACK_IMPORTED_MODULE_28__.row);\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(cell) && !isNaN(cellIndex) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(row_2)) {\n                var rowIndex = parseInt(row_2.getAttribute(_base_string_literals__WEBPACK_IMPORTED_MODULE_28__.ariaRowIndex), 10) - 1;\n                var rows = this.contentModule.getRows();\n                var index = cellIndex + this.getIndentCount();\n                var rowsObject = rows.filter(function (r) { return r.uid === row_2.getAttribute('data-uid'); });\n                var rowData = {};\n                var column = void 0;\n                if (Object.keys(rowsObject).length) {\n                    rowData = rowsObject[0].data;\n                    column = rowsObject[0].cells[parseInt(index.toString(), 10)].column;\n                }\n                args = { cell: cell, cellIndex: cellIndex, row: row_2, rowIndex: rowIndex, rowData: rowData, column: column, target: target };\n            }\n        }\n        return args;\n    };\n    /**\n     * Gets the Grid's movable content rows from frozen grid.\n     *\n     * @returns {Element[]} returns the element\n     * @deprecated This method has been marked as deprecated. It is recommended to utilize the `getRows()` method instead, and apply the `e-unfreeze` class to select the movable cell within the tr element.\n     */\n    Grid.prototype.getMovableRows = function () {\n        return this.contentModule.getRowElements();\n    };\n    /**\n     * Gets the Grid's frozen right content rows from frozen grid.\n     *\n     * @returns {Element[]} returns the element\n     * @deprecated This method has been marked as deprecated. It is recommended to utilize the `getRows()` method instead, and apply the `e-rightfreeze` class to select the frozen right cell within the tr element.\n     */\n    Grid.prototype.getFrozenRightRows = function () {\n        return this.contentModule.getRowElements();\n    };\n    /**\n     * Gets all the Grid's data rows.\n     *\n     * @returns {Element[]} returns the element\n     */\n    Grid.prototype.getDataRows = function () {\n        return this.getAllDataRows();\n    };\n    /**\n     * @param {boolean} includeAdd - specifies includeAdd\n     * @returns {Element[]} returns the element\n     * @hidden\n     */\n    Grid.prototype.getAllDataRows = function (includeAdd) {\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.getContentTable().querySelector(_base_string_literals__WEBPACK_IMPORTED_MODULE_28__.tbody))) {\n            return [];\n        }\n        var tbody = this.getContentTable().querySelector(_base_string_literals__WEBPACK_IMPORTED_MODULE_28__.tbody);\n        var rows = [].slice.call(tbody.children);\n        if (this.editSettings.showAddNewRow) {\n            if (rows[0].classList.contains('e-addedrow')) {\n                rows.shift();\n            }\n            else if (rows[rows.length - 1].classList.contains('e-addedrow')) {\n                rows.pop();\n            }\n        }\n        if (this.frozenRows) {\n            var hdrTbody = this.getHeaderTable().querySelector(_base_string_literals__WEBPACK_IMPORTED_MODULE_28__.tbody);\n            var freezeRows = [].slice.call(hdrTbody.children);\n            rows = this.addMovableRows(freezeRows, rows);\n            if (this.editSettings.showAddNewRow && freezeRows[0].classList.contains('e-addedrow')) {\n                freezeRows.shift();\n            }\n        }\n        var dataRows = this.generateDataRows(rows, includeAdd);\n        return dataRows;\n    };\n    /**\n     * @param {HTMLElement[]} fRows - Defines the frozen Rows\n     * @param {HTMLElement[]} mrows - Defines the movable Rows\n     * @returns {HTMLElement[]} Returns the element\n     * @hidden\n     */\n    Grid.prototype.addMovableRows = function (fRows, mrows) {\n        for (var i = 0, len = mrows.length; i < len; i++) {\n            fRows.push(mrows[parseInt(i.toString(), 10)]);\n        }\n        return fRows;\n    };\n    Grid.prototype.generateDataRows = function (rows, includAdd) {\n        var dRows = [];\n        for (var i = 0, len = rows.length; i < len; i++) {\n            if (rows[parseInt(i.toString(), 10)].classList.contains(_base_string_literals__WEBPACK_IMPORTED_MODULE_28__.row)\n                && (!rows[parseInt(i.toString(), 10)].classList.contains('e-hiddenrow') || includAdd)) {\n                if (this.isCollapseStateEnabled()) {\n                    dRows[parseInt(rows[parseInt(i.toString(), 10)].getAttribute('aria-rowindex'), 10) - 1] = rows[parseInt(i.toString(), 10)];\n                }\n                else {\n                    dRows.push(rows[parseInt(i.toString(), 10)]);\n                }\n            }\n        }\n        return dRows;\n    };\n    /**\n     * Gets all the Grid's movable table data rows.\n     *\n     * @returns {Element[]} Returns the element\n     * @deprecated This method has been marked as deprecated. It is recommended to utilize the `getDataRows()` method instead, and apply the `e-unfreeze` class to select the movable cell within the tr element.\n     */\n    Grid.prototype.getMovableDataRows = function () {\n        return this.getAllMovableDataRows();\n    };\n    /**\n     * @param {boolean} includeAdd Defines the include add in boolean\n     * @returns {Element[]} Returns the element\n     * @deprecated This method has been marked as deprecated. It is recommended to utilize the `getAllDataRows()` method instead, and apply the `e-unfreeze` class to select the movable cell within the tr element.\n     * @hidden\n     */\n    Grid.prototype.getAllMovableDataRows = function (includeAdd) {\n        return this.getAllDataRows(includeAdd);\n    };\n    /**\n     * Gets all the Grid's frozen table data rows.\n     *\n     * @returns {Element[]} returns the element\n     * @deprecated This method has been marked as deprecated. It is recommended to utilize the `getDataRows()` method instead, and apply the `e-leftfreeze` class to select the frozen cell within the tr element.\n     */\n    Grid.prototype.getFrozenDataRows = function () {\n        return this.getAllFrozenDataRows();\n    };\n    /**\n     * @param {boolean} includeAdd Defines the include add in boolean\n     * @returns {Element[]} Returns the element\n     * @deprecated This method has been marked as deprecated. It is recommended to utilize the `getAllDataRows()` method instead, and apply the `e-leftfreeze` class to select the frozen cell within the tr element.\n     * @hidden\n     */\n    Grid.prototype.getAllFrozenDataRows = function (includeAdd) {\n        return this.getAllDataRows(includeAdd);\n    };\n    /**\n     * Gets all the Grid's frozen right table data rows.\n     *\n     * @returns {Element[]} Returns the Element\n     * @deprecated This method has been marked as deprecated. It is recommended to utilize the `getDataRows()` method instead, and apply the `e-rightfreeze` class to select the frozen right cell within the tr element.\n     */\n    Grid.prototype.getFrozenRightDataRows = function () {\n        return this.getAllFrozenRightDataRows();\n    };\n    /**\n     * @param {boolean} includeAdd Defines the include add in boolean\n     * @returns {Element[]} Returns the element\n     * @deprecated This method has been marked as deprecated. It is recommended to utilize the `getAllDataRows()` method instead, and apply the `e-rightfreeze` class to select the frozen right cell within the tr element.\n     * @hidden\n     */\n    Grid.prototype.getAllFrozenRightDataRows = function (includeAdd) {\n        return this.getAllDataRows(includeAdd);\n    };\n    /**\n     * Updates particular cell value based on the given primary key value.\n     * > Primary key column must be specified using `columns.isPrimaryKey` property.\n     *\n     * @param {string| number} key - Specifies the PrimaryKey value of dataSource.\n     * @param {string } field - Specifies the field name which you want to update.\n     * @param {string | number | boolean | Date} value - To update new value for the particular cell.\n     *\n     * @returns {void}\n     */\n    Grid.prototype.setCellValue = function (key, field, value) {\n        var cells = 'cells';\n        var rowData = 'data';\n        var rowIdx = 'index';\n        var rowuID = 'uid';\n        var pkName = this.getPrimaryKeyFieldNames()[0];\n        var cell = new _renderer_cell_renderer__WEBPACK_IMPORTED_MODULE_9__.CellRenderer(this, this.serviceLocator);\n        var fieldIdx = this.getColumnIndexByField(field);\n        var col = this.getColumnByField(field);\n        var rowObjects = this.contentModule.getRows();\n        var selectedRow = rowObjects.filter(function (r) {\n            return (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)(pkName, r.data) === key;\n        })[0];\n        var tr = selectedRow ? this.element.querySelector('[data-uid=' + selectedRow[\"\" + rowuID] + ']') : null;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(tr)) {\n            if (typeof value === 'string') {\n                value = this.sanitize(value);\n            }\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.setValue)(field, value, selectedRow[\"\" + rowData]);\n            var td = this.enableVirtualization ? tr.children[parseInt(fieldIdx.toString(), 10)]\n                : this.getCellFromIndex(selectedRow[\"\" + rowIdx], fieldIdx);\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(td)) {\n                var Idx = 0;\n                if (this.groupSettings.columns.length) {\n                    fieldIdx = fieldIdx + this.groupSettings.columns.length;\n                }\n                if (this.childGrid || this.detailTemplate) {\n                    fieldIdx++;\n                }\n                if (this.isRowDragable()) {\n                    fieldIdx++;\n                }\n                var sRow = selectedRow[\"\" + cells][fieldIdx - Idx];\n                cell.refreshTD(td, sRow, selectedRow[\"\" + rowData], { index: selectedRow[\"\" + rowIdx] });\n                if (this.isReact) {\n                    td = this.enableVirtualization ? tr.children[parseInt(fieldIdx.toString(), 10)]\n                        : this.getCellFromIndex(selectedRow[\"\" + rowIdx], fieldIdx);\n                }\n                if (this.aggregates.length > 0) {\n                    this.notify(_base_constant__WEBPACK_IMPORTED_MODULE_4__.refreshFooterRenderer, {});\n                    if (this.groupSettings.columns.length > 0) {\n                        this.notify(_base_constant__WEBPACK_IMPORTED_MODULE_4__.groupAggregates, {});\n                    }\n                }\n                /* tslint:disable:no-string-literal */\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(selectedRow) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(selectedRow['changes'])) {\n                    selectedRow['changes'][\"\" + field] = value;\n                }\n                /* tslint:disable:no-string-literal */\n                this.trigger(_base_constant__WEBPACK_IMPORTED_MODULE_4__.queryCellInfo, {\n                    cell: td, column: col, data: selectedRow[\"\" + rowData]\n                });\n                if (this.isReact && td.getAttribute('tabindex') === '0' && td.classList.contains('e-focused')) {\n                    td.focus();\n                }\n            }\n        }\n        else {\n            return;\n        }\n    };\n    /**\n     * @param {string} columnUid - Defines column uid\n     * @param {boolean} renderTemplates - Defines renderTemplates need to invoke\n     * @returns {void}\n     * @hidden\n     */\n    Grid.prototype.refreshReactColumnTemplateByUid = function (columnUid, renderTemplates) {\n        var _this_1 = this;\n        if (this.isReact) {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            this.clearTemplate(['columnTemplate'], undefined, function () {\n                var isChildGrid = _this_1.childGrid && _this_1.element.querySelectorAll('.e-childgrid').length ? true : false;\n                var rows = isChildGrid ? _this_1.getContentTable().querySelectorAll('.e-row') :\n                    _this_1.getDataRows();\n                _this_1.refreshReactTemplateTD(rows, isChildGrid);\n                if (renderTemplates) {\n                    _this_1.renderTemplates();\n                }\n            });\n        }\n    };\n    /**\n     * @param {Element[] | NodeListOf<Element>} rows - Defines the rows\n     * @param {boolean} isChildGrid - Defines whether it is a Hierarchy Grid.\n     * @param {boolean} isFrozen - Defines whether it is a Frozen Grid\n     * @returns {void}\n     * @hidden\n     */\n    Grid.prototype.refreshReactTemplateTD = function (rows, isChildGrid, isFrozen) {\n        var cells = 'cells';\n        var rowIdx = 'index';\n        var indent = this.getIndentCount();\n        var childIndent = 0;\n        var isChildRow = false;\n        for (var j = 0; j < rows.length; j++) {\n            var rowsObj = this.getRowObjectFromUID(rows[parseInt(j.toString(), 10)].getAttribute('data-uid'));\n            if (isChildGrid && !rowsObj && (0,_util__WEBPACK_IMPORTED_MODULE_3__.parentsUntil)(rows[parseInt(j.toString(), 10)], 'e-childgrid')) {\n                var gridObj = (0,_util__WEBPACK_IMPORTED_MODULE_3__.parentsUntil)(rows[parseInt(j.toString(), 10)], 'e-childgrid').ej2_instances[0];\n                rowsObj = gridObj.getRowObjectFromUID(rows[parseInt(j.toString(), 10)].getAttribute('data-uid'));\n                childIndent = gridObj.getIndentCount();\n                isChildRow = true;\n            }\n            if (rowsObj && rowsObj.isDataRow && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(rowsObj.index) &&\n                !rows[parseInt(j.toString(), 10)].classList.contains('e-editedrow')) {\n                for (var i = 0; i < rowsObj[\"\" + cells].length; i++) {\n                    var cell = rowsObj[\"\" + cells][parseInt(i.toString(), 10)];\n                    if (cell.isTemplate) {\n                        var cellRenderer = new _renderer_cell_renderer__WEBPACK_IMPORTED_MODULE_9__.CellRenderer(this, this.serviceLocator);\n                        var td = isChildGrid ? rows[parseInt(j.toString(), 10)]\n                            .children[cell.index + (isChildRow ? childIndent : indent)] : this.getCellFromIndex(j, isFrozen ? cell.index : i - indent);\n                        cellRenderer.refreshTD(td, cell, rowsObj.data, { index: rowsObj[\"\" + rowIdx] });\n                    }\n                }\n            }\n            isChildRow = false;\n        }\n    };\n    /**\n     * @returns {void}\n     * @hidden\n     */\n    Grid.prototype.refreshGroupCaptionFooterTemplate = function () {\n        var isChildGrid = this.childGrid && this.element.querySelectorAll('.e-childgrid').length ? true : false;\n        var rows = this.getContentTable().querySelectorAll('.e-groupcaptionrow, .e-groupfooterrow');\n        for (var i = 0; i < rows.length; i++) {\n            // eslint-disable-next-line @typescript-eslint/no-this-alias\n            var gridObj = this;\n            var rowsObj = this.getRowObjectFromUID(rows[parseInt(i.toString(), 10)].getAttribute('data-uid'));\n            if (isChildGrid && !rowsObj && (0,_util__WEBPACK_IMPORTED_MODULE_3__.parentsUntil)(rows[parseInt(i.toString(), 10)], 'e-childgrid')) {\n                gridObj = (0,_util__WEBPACK_IMPORTED_MODULE_3__.parentsUntil)(rows[parseInt(i.toString(), 10)], 'e-childgrid').ej2_instances[0];\n                rowsObj = gridObj.getRowObjectFromUID(rows[parseInt(i.toString(), 10)].getAttribute('data-uid'));\n            }\n            if (rowsObj) {\n                var cells = rowsObj.cells.filter(function (cell) { return cell.isDataCell; });\n                var args = { cells: cells, data: rowsObj.data, dataUid: rowsObj.uid };\n                gridObj.notify(_base_constant__WEBPACK_IMPORTED_MODULE_4__.refreshAggregateCell, args);\n            }\n        }\n    };\n    /**\n     * @param {string} columnUid - Defines column uid\n     * @returns {void}\n     * @hidden\n     */\n    Grid.prototype.refreshReactHeaderTemplateByUid = function (columnUid) {\n        if (this.isReact) {\n            var cells = 'cells';\n            var rowsObj = this.headerModule.rows;\n            var cellIndex = this.getNormalizedColumnIndex(columnUid);\n            var _loop_1 = function (j) {\n                var cell = rowsObj[parseInt(j.toString(), 10)][\"\" + cells][parseInt(cellIndex.toString(), 10)];\n                if (cell && cell.column.uid === columnUid) {\n                    var headerCellRenderer = new _renderer_header_cell_renderer__WEBPACK_IMPORTED_MODULE_29__.HeaderCellRenderer(this_1, this_1.serviceLocator);\n                    var td = (0,_util__WEBPACK_IMPORTED_MODULE_3__.parentsUntil)(this_1.element.querySelectorAll('[e-mappinguid=' + columnUid + ']')[0], 'e-templatecell');\n                    headerCellRenderer.refresh(cell, td);\n                    var cols = this_1.sortSettings.columns;\n                    var columnIndex = cols.findIndex(function (col) {\n                        return col.field === cell\n                            .column.field;\n                    });\n                    if (columnIndex !== -1) {\n                        var header = this_1.getColumnHeaderByField(cell.column.field);\n                        this_1.ariaService.setSort(header, (cols[parseInt(columnIndex.toString(), 10)].direction).toLowerCase());\n                        if (cols.length > 1) {\n                            header.querySelector('.e-headercelldiv').insertBefore(this_1.createElement('span', { className: 'e-sortnumber', innerHTML: (columnIndex + 1).toString() }), header.querySelector('.e-headertext'));\n                        }\n                        var filterElement = header.querySelector('.e-sortfilterdiv');\n                        if (cols[parseInt(columnIndex.toString(), 10)].direction === 'Ascending') {\n                            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.classList)(filterElement, ['e-ascending', 'e-icon-ascending'], []);\n                        }\n                        else {\n                            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.classList)(filterElement, ['e-descending', 'e-icon-descending'], []);\n                        }\n                    }\n                }\n            };\n            var this_1 = this;\n            for (var j = 0; j < rowsObj.length; j++) {\n                _loop_1(j);\n            }\n        }\n    };\n    /**\n     * Updates and refresh the particular row values based on the given primary key value.\n     * > Primary key column must be specified using `columns.isPrimaryKey` property.\n     *\n     * @param {string| number} key - Specifies the PrimaryKey value of dataSource.\n     * @param {Object} rowData - To update new data for the particular row.\n     *\n     * @returns {void}\n     */\n    Grid.prototype.setRowData = function (key, rowData) {\n        var rowuID = 'uid';\n        var rowObjects = this.contentModule.getRows();\n        var pkName = this.getPrimaryKeyFieldNames()[0];\n        if (this.groupSettings.columns.length > 0 && this.aggregates.length > 0) {\n            rowObjects = rowObjects.filter(function (row) { return row.isDataRow; });\n        }\n        var selectedRow = rowObjects.filter(function (r) {\n            return (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)(pkName, r.data) === key;\n        })[0];\n        var selectRowEle = selectedRow ? [].slice.call(this.element.querySelectorAll('[data-uid=' + selectedRow[\"\" + rowuID] + ']')) : undefined;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(selectedRow) && selectRowEle.length) {\n            selectedRow.changes = rowData;\n            if (this.frozenRows) {\n                var fRowTr = this.getRowsObject()[selectedRow.index];\n                this.setFrozenRowData(fRowTr, rowData);\n            }\n            else {\n                this.setFrozenRowData(selectedRow, rowData);\n            }\n            if (this.aggregates.length > 0) {\n                this.notify(_base_constant__WEBPACK_IMPORTED_MODULE_4__.refreshFooterRenderer, {});\n                if (this.groupSettings.columns.length > 0) {\n                    this.notify(_base_constant__WEBPACK_IMPORTED_MODULE_4__.groupAggregates, {});\n                }\n            }\n        }\n        else {\n            return;\n        }\n    };\n    Grid.prototype.setFrozenRowData = function (fTr, rowData) {\n        var rowRenderer = new _renderer_row_renderer__WEBPACK_IMPORTED_MODULE_8__.RowRenderer(this.serviceLocator, null, this);\n        fTr.changes = rowData;\n        (0,_util__WEBPACK_IMPORTED_MODULE_3__.refreshForeignData)(fTr, this.getForeignKeyColumns(), fTr.changes);\n        rowRenderer.refresh(fTr, this.getColumns(), true);\n    };\n    /**\n     * Gets a cell by row and column index.\n     *\n     * @param  {number} rowIndex - Specifies the row index.\n     * @param  {number} columnIndex - Specifies the column index.\n     *\n     * @returns {Element} Returns the Element\n     */\n    Grid.prototype.getCellFromIndex = function (rowIndex, columnIndex) {\n        var col = this.getColumnByIndex(columnIndex);\n        return (0,_util__WEBPACK_IMPORTED_MODULE_3__.getCellByColAndRowIndex)(this, col, rowIndex, columnIndex);\n    };\n    /**\n     * Gets a movable table cell by row and column index.\n     *\n     * @param  {number} rowIndex - Specifies the row index.\n     * @param  {number} columnIndex - Specifies the column index.\n     *\n     * @returns {Element} Returns the Element\n     * @deprecated This method is deprecated. Use `getCellFromIndex()` method instead\n     */\n    Grid.prototype.getMovableCellFromIndex = function (rowIndex, columnIndex) {\n        return this.getCellFromIndex(rowIndex, columnIndex);\n    };\n    /**\n     * Gets a frozen right table cell by row and column index.\n     *\n     * @param  {number} rowIndex - Specifies the row index.\n     * @param  {number} columnIndex - Specifies the column index.\n     * @returns {Element} Returns the Element\n     * @deprecated This method is deprecated. Use `getCellFromIndex()` method instead.\n     */\n    Grid.prototype.getFrozenRightCellFromIndex = function (rowIndex, columnIndex) {\n        return this.getCellFromIndex(rowIndex, columnIndex);\n    };\n    /**\n     * Gets a column header by column index.\n     *\n     * @param  {number} index - Specifies the column index.\n     *\n     * @returns {Element} Returns the Element\n     */\n    Grid.prototype.getColumnHeaderByIndex = function (index) {\n        return this.getHeaderTable().getElementsByClassName('e-headercell')[parseInt(index.toString(), 10)];\n    };\n    /**\n     * Gets a movable column header by column index.\n     *\n     * @param  {number} index - Specifies the column index.\n     * @returns {Element} Returns the Element\n     * @deprecated This method is deprecated. Use `getColumnHeaderByIndex()` method instead.\n     */\n    Grid.prototype.getMovableColumnHeaderByIndex = function (index) {\n        return this.getColumnHeaderByIndex(index);\n    };\n    /**\n     * Gets a frozen right column header by column index.\n     *\n     * @param  {number} index - Specifies the column index.\n     * @returns {Element} Returns the Element\n     * @deprecated This method is deprecated. Use `getColumnHeaderByIndex()` method instead.\n     */\n    Grid.prototype.getFrozenRightColumnHeaderByIndex = function (index) {\n        return this.getColumnHeaderByIndex(index);\n    };\n    /**\n     * Gets a frozen left column header by column index.\n     *\n     * @param  {number} index - Specifies the column index.\n     * @returns {Element} Returns the Element\n     * @deprecated This method is deprecated. Use `getColumnHeaderByIndex()` method instead.\n     */\n    Grid.prototype.getFrozenLeftColumnHeaderByIndex = function (index) {\n        return this.getColumnHeaderByIndex(index);\n    };\n    /**\n     * @param {string} uid - Defines the uid\n     * @returns {Row<Column>} Returns the row object\n     * @hidden\n     */\n    Grid.prototype.getRowObjectFromUID = function (uid) {\n        var rows = this.contentModule.getRows();\n        var row = this.rowObject(rows, uid);\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(row) && this.enableVirtualization && this.groupSettings.columns.length > 0) {\n            row = this.rowObject(this.vRows, uid);\n            return row;\n        }\n        return row;\n    };\n    Grid.prototype.rowObject = function (rows, uid) {\n        if (rows) {\n            for (var _i = 0, rows_1 = rows; _i < rows_1.length; _i++) {\n                var row = rows_1[_i];\n                if (row.uid === uid) {\n                    return row;\n                }\n            }\n        }\n        return null;\n    };\n    /**\n     * Get an array of row objects.\n     *\n     * @returns {Row<Column>[]} Returns the Row object\n     */\n    Grid.prototype.getRowsObject = function () {\n        return this.contentModule.getRows();\n    };\n    /**\n     * @hidden\n     * @returns {Row<Column>[]} Returns the Row object\n     * @deprecated  This method is deprecated. Use `getRowsObject()` method instead.\n     */\n    Grid.prototype.getMovableRowsObject = function () {\n        return this.contentModule.getRows();\n    };\n    /**\n     * @hidden\n     * @returns {Row<Column>[]} Returns the Row object\n     * @deprecated This method is deprecated. Use `getRowsObject()` method instead.\n     */\n    Grid.prototype.getFrozenRightRowsObject = function () {\n        return this.contentModule.getRows();\n    };\n    /**\n     * Gets a column header by column name.\n     *\n     * @param  {string} field - Specifies the column name.\n     *\n     * @returns {Element} - Returns the element\n     */\n    Grid.prototype.getColumnHeaderByField = function (field) {\n        var column = this.getColumnByField(field);\n        return column ? this.getColumnHeaderByUid(column.uid) : undefined;\n    };\n    /**\n     * Gets a column header by UID.\n     *\n     * @param {string} uid - Specifies the column uid.\n     *\n     * @returns {Element} - Returns the element\n     */\n    Grid.prototype.getColumnHeaderByUid = function (uid) {\n        var element = this.getHeaderContent().querySelector('[e-mappinguid=' + uid + ']');\n        return element ? element.parentElement : undefined;\n    };\n    /**\n     * @hidden\n     * @param {number} index - Defines the index\n     * @returns {Column} Returns the column\n     */\n    Grid.prototype.getColumnByIndex = function (index) {\n        var column;\n        this.getColumns().some(function (col, i) {\n            column = col;\n            return i === index;\n        });\n        return column;\n    };\n    /**\n     * Gets a Column by column name.\n     *\n     * @param  {string} field - Specifies the column name.\n     *\n     * @returns {Column} Returns the column\n     */\n    Grid.prototype.getColumnByField = function (field) {\n        return (0,_util__WEBPACK_IMPORTED_MODULE_3__.iterateArrayOrObject)(this.getColumns(), function (item) {\n            if (item.field === field) {\n                return item;\n            }\n            return undefined;\n        })[0];\n    };\n    /**\n     * Gets a column index by column name.\n     *\n     * @param  {string} field - Specifies the column name.\n     *\n     * @returns {number} Returns the index by field\n     */\n    Grid.prototype.getColumnIndexByField = function (field) {\n        var cols = this.getColumns();\n        for (var i = 0; i < cols.length; i++) {\n            if (cols[parseInt(i.toString(), 10)].field === field) {\n                return i;\n            }\n        }\n        return -1;\n    };\n    /**\n     * Gets a column by UID.\n     *\n     * @param  {string} uid - Specifies the column UID.\n     * @param  {boolean} isColumns - Defines the all columns.\n     *\n     * @returns {Column} Returns the column\n     */\n    Grid.prototype.getColumnByUid = function (uid, isColumns) {\n        var cols = isColumns ? this.columns : this.getColumns();\n        return (0,_util__WEBPACK_IMPORTED_MODULE_3__.iterateArrayOrObject)(cols.concat(this.getStackedColumns(this.columns)), function (item) {\n            if (item.uid === uid) {\n                return item;\n            }\n            return undefined;\n        })[0];\n    };\n    /**\n     * @param {Column[]} columns - Defines the columns\n     * @param {Column[]} stackedColumn - Defines the stacked columns\n     * @returns {Column[]} Returns the columns\n     * @hidden\n     */\n    Grid.prototype.getStackedColumns = function (columns, stackedColumn) {\n        if (stackedColumn === void 0) { stackedColumn = []; }\n        for (var _i = 0, columns_1 = columns; _i < columns_1.length; _i++) {\n            var column = columns_1[_i];\n            if (column.columns) {\n                stackedColumn.push(column);\n                this.getStackedColumns(column.columns, stackedColumn);\n            }\n        }\n        return stackedColumn;\n    };\n    /**\n     * Gets a column index by UID.\n     *\n     * @param  {string} uid - Specifies the column UID.\n     *\n     * @returns {number} Returns the column by index\n     */\n    Grid.prototype.getColumnIndexByUid = function (uid) {\n        var index = (0,_util__WEBPACK_IMPORTED_MODULE_3__.iterateArrayOrObject)(this.getColumns(), function (item, index) {\n            if (item.uid === uid) {\n                return index;\n            }\n            return undefined;\n        })[0];\n        return !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(index) ? index : -1;\n    };\n    /**\n     * Gets UID by column name.\n     *\n     * @param  {string} field - Specifies the column name.\n     *\n     * @returns {string} Returns the column by field\n     */\n    Grid.prototype.getUidByColumnField = function (field) {\n        return (0,_util__WEBPACK_IMPORTED_MODULE_3__.iterateArrayOrObject)(this.getColumns(), function (item) {\n            if (item.field === field) {\n                return item.uid;\n            }\n            return undefined;\n        })[0];\n    };\n    /**\n     * Gets column index by column uid value.\n     *\n     * @private\n     * @param  {string} uid - Specifies the column uid.\n     * @returns {number} Returns the column by field\n     */\n    Grid.prototype.getNormalizedColumnIndex = function (uid) {\n        var index = this.getColumnIndexByUid(uid);\n        return index + this.getIndentCount();\n    };\n    /**\n     * Gets indent cell count.\n     *\n     * @private\n     * @returns {number} Returns the indent count\n     */\n    Grid.prototype.getIndentCount = function () {\n        var index = 0;\n        if (this.allowGrouping) {\n            index += this.groupSettings.columns.length;\n        }\n        if (this.isDetail()) {\n            index++;\n        }\n        if (this.isRowDragable() && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.rowDropSettings.targetID)) {\n            index++;\n        }\n        /**\n         * TODO: index normalization based on the stacked header, grouping and detailTemplate\n         * and frozen should be handled here\n         */\n        return index;\n    };\n    /**\n     * Gets the collection of column fields.\n     *\n     * @returns {string[]} Returns the Field names\n     */\n    Grid.prototype.getColumnFieldNames = function () {\n        var columnNames = [];\n        var column;\n        for (var i = 0, len = this.getColumns().length; i < len; i++) {\n            column = this.getColumns()[parseInt(i.toString(), 10)];\n            if (column.visible) {\n                columnNames.push(column.field);\n            }\n        }\n        return columnNames;\n    };\n    /**\n     * Gets a compiled row template.\n     *\n     * @returns {Function} Returns the row TEmplate\n     * @private\n     */\n    Grid.prototype.getRowTemplate = function () {\n        return this.rowTemplateFn;\n    };\n    /**\n     * Gets a compiled empty Record template.\n     *\n     * @returns {Function} Returns the empty Record template\n     * @private\n     */\n    Grid.prototype.getEmptyRecordTemplate = function () {\n        return this.emptyRecordTemplateFn;\n    };\n    /**\n     * Gets a compiled detail row template.\n     *\n     * @private\n     * @returns {Function} Returns the Detail template\n     */\n    Grid.prototype.getDetailTemplate = function () {\n        return this.detailTemplateFn;\n    };\n    /**\n     * Gets a compiled dialog edit template.\n     *\n     * @private\n     * @returns {Function} Returns the Edit template\n     */\n    Grid.prototype.getEditTemplate = function () {\n        return this.editTemplateFn;\n    };\n    /**\n     * Gets a compiled dialog edit header template.\n     *\n     * @private\n     * @returns {Function} returns template function\n     */\n    Grid.prototype.getEditHeaderTemplate = function () {\n        return this.editHeaderTemplateFn;\n    };\n    /**\n     * Gets a compiled dialog edit footer template.\n     *\n     * @private\n     * @returns {Function} Returns the Footer template\n     */\n    Grid.prototype.getEditFooterTemplate = function () {\n        return this.editFooterTemplateFn;\n    };\n    /**\n     * Gets a compiled column chooser template.\n     *\n     * @private\n     * @returns {Function} Returns the template\n     */\n    Grid.prototype.getColumnChooserTemplate = function () {\n        return this.columnChooserTemplateFn;\n    };\n    /**\n     * Gets a compiled column chooser header template.\n     *\n     * @private\n     * @returns {Function} returns the header template\n     */\n    Grid.prototype.getColumnChooserHeaderTemplate = function () {\n        return this.columnChooserHeaderTemplateFn;\n    };\n    /**\n     * Gets a compiled column chooser footer template.\n     *\n     * @private\n     * @returns {Function} Returns the Footer template\n     */\n    Grid.prototype.getColumnChooserFooterTemplate = function () {\n        return this.columnChooserFooterTemplateFn;\n    };\n    /**\n     * Get the names of the primary key columns of the Grid.\n     *\n     * @returns {string[]} Returns the field names\n     */\n    Grid.prototype.getPrimaryKeyFieldNames = function () {\n        var keys = [];\n        for (var k = 0; k < this.columnModel.length; k++) {\n            if (this.columnModel[parseInt(k.toString(), 10)].isPrimaryKey) {\n                keys.push(this.columnModel[parseInt(k.toString(), 10)].field);\n            }\n        }\n        return keys;\n    };\n    /**\n     * Refreshes the Grid header and content.\n     *\n     * @returns {void}\n     */\n    Grid.prototype.refresh = function () {\n        if (!this.isDestroyed) {\n            this.isManualRefresh = true;\n            this.headerModule.refreshUI();\n            this.updateStackedFilter();\n            this.renderModule.refresh();\n        }\n    };\n    /**\n     * Refreshes the Grid header.\n     *\n     * @returns {void}\n     */\n    Grid.prototype.refreshHeader = function () {\n        this.headerModule.refreshUI();\n    };\n    /**\n     * Gets the collection of selected rows.\n     *\n     * @returns {Element[]} Returns the element\n     */\n    Grid.prototype.getSelectedRows = function () {\n        return this.selectionModule ? this.selectionModule.selectedRecords : [];\n    };\n    /**\n     * Gets the collection of selected row indexes.\n     *\n     * @returns {number[]} Returns the Selected row indexes\n     */\n    Grid.prototype.getSelectedRowIndexes = function () {\n        return this.selectionModule ? this.selectionModule.selectedRowIndexes : [];\n    };\n    /**\n     * Gets the collection of selected row and cell indexes.\n     *\n     * @returns {number[]} Returns the Selected row cell indexes\n     */\n    Grid.prototype.getSelectedRowCellIndexes = function () {\n        return this.selectionModule ? this.selectionModule.selectedRowCellIndexes : [];\n    };\n    /**\n     * Gets the collection of selected records.\n     *\n     * @returns {Object[]} Returns the selected records\n     * @isGenericType true\n     */\n    Grid.prototype.getSelectedRecords = function () {\n        return this.selectionModule ? this.selectionModule.getSelectedRecords() : [];\n    };\n    /**\n     * Gets the collection of selected columns uid.\n     *\n     * @returns {string[]} Returns the selected column uid\n     * @isGenericType true\n     */\n    Grid.prototype.getSelectedColumnsUid = function () {\n        var _this_1 = this;\n        var uid = [];\n        if (this.selectionModule) {\n            this.selectionModule.selectedColumnsIndexes.filter(function (i) { return uid.push(_this_1.getColumns()[parseInt(i.toString(), 10)].uid); });\n        }\n        return uid;\n    };\n    /**\n     * Gets the data module.\n     *\n     * @returns {Data} Returns the data\n     */\n    Grid.prototype.getDataModule = function () {\n        return this.renderModule.data;\n    };\n    /**\n     * Shows a column by its column name.\n     *\n     * @param  {string|string[]} keys - Defines a single or collection of column names.\n     * @param  {string} showBy - Defines the column key either as field name or header text.\n     *\n     * @returns {void}\n     */\n    Grid.prototype.showColumns = function (keys, showBy) {\n        showBy = showBy ? showBy : 'headerText';\n        this.showHider.show(keys, showBy);\n    };\n    /**\n     * Hides a column by column name.\n     *\n     * @param  {string|string[]} keys - Defines a single or collection of column names.\n     * @param  {string} hideBy - Defines the column key either as field name or header text.\n     *\n     * @returns {void}\n     */\n    Grid.prototype.hideColumns = function (keys, hideBy) {\n        hideBy = hideBy ? hideBy : 'headerText';\n        this.showHider.hide(keys, hideBy);\n    };\n    /**\n     * @hidden\n     * @returns {number} Returns the Frozen column\n     */\n    Grid.prototype.getFrozenColumns = function () {\n        return this.frozenColumns + this.getFrozenCount(this.columns, 0, 0);\n    };\n    /**\n     * @hidden\n     * @returns {number} Returns the Frozen Right column count\n     */\n    Grid.prototype.getFrozenRightColumnsCount = function () {\n        return this.frozenRightCount || this.rightcount;\n    };\n    /**\n     * @hidden\n     * @returns {number} Returns the Frozen Left column\n     */\n    Grid.prototype.getFrozenLeftColumnsCount = function () {\n        return this.frozenLeftCount || this.leftcount;\n    };\n    /**\n     * @hidden\n     * @returns {number} Returns the movable column count\n     */\n    Grid.prototype.getMovableColumnsCount = function () {\n        return this.movableCount || this.movablecount;\n    };\n    Grid.prototype.updateFrozenColumnsWidth = function () {\n        if (this.isFrozenGrid() && !this.enableColumnVirtualization) {\n            var gcol = this.getColumns();\n            var isAutoWidth = true;\n            var autoCol_1 = 0;\n            var difference_1 = 0;\n            var autoWidth_1 = 0;\n            var isFrozenAuto = gcol.some(function (data) {\n                return (data.freeze === 'Left' || data.freeze === 'Right'\n                    || data.freeze === 'Fixed' || data.isFrozen) && data.width === 'auto';\n            });\n            var _loop_2 = function (i) {\n                var col = gcol[parseInt(i.toString(), 10)];\n                if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(col.width) && (col.freeze === 'Left' || col.freeze === 'Right' || col.freeze === 'Fixed' || col.isFrozen)) {\n                    col.width = Math.max(200, col.minWidth ? parseFloat(col.minWidth.toString()) : 0);\n                    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(col.maxWidth) && parseFloat(col.maxWidth.toString()) < col.width) {\n                        col.width = col.maxWidth;\n                    }\n                }\n                if (col.width === 'auto' && isFrozenAuto) {\n                    var tWidth_1 = 0;\n                    if (isAutoWidth) {\n                        gcol.filter(function (cols) {\n                            if (cols.visible) {\n                                if (cols.width === 'auto') {\n                                    autoCol_1++;\n                                }\n                                if (cols.width !== 'auto') {\n                                    var width = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(cols.width) ? parseFloat(cols.width.toString()) :\n                                        Math.max(200, cols.minWidth ? parseFloat(cols.minWidth.toString()) : 0);\n                                    tWidth_1 += width;\n                                }\n                            }\n                        });\n                        var gWidth = this_2.isPercentageWidthGrid() || this_2.width === 'auto' ? this_2.element.getBoundingClientRect().width :\n                            parseFloat(this_2.width.toString());\n                        difference_1 = this_2.height === 'auto' ? gWidth - tWidth_1 : ((gWidth - tWidth_1) - (0,_util__WEBPACK_IMPORTED_MODULE_3__.getScrollBarWidth)());\n                        if (difference_1 < 0) {\n                            difference_1 = 0;\n                        }\n                        autoWidth_1 = parseFloat((difference_1 / autoCol_1).toString());\n                        gcol.filter(function (col) {\n                            if (col.visible) {\n                                if (col.minWidth && parseFloat(col.minWidth.toString()) > autoWidth_1) {\n                                    difference_1 = difference_1 - parseFloat(col.minWidth.toString());\n                                    autoCol_1--;\n                                }\n                            }\n                        });\n                        isAutoWidth = false;\n                    }\n                    if (col.minWidth && parseFloat(col.minWidth.toString()) > autoWidth_1) {\n                        col.width = parseFloat(col.minWidth.toString());\n                    }\n                    else {\n                        col.width = difference_1 / autoCol_1;\n                    }\n                }\n            };\n            var this_2 = this;\n            for (var i = 0; i < gcol.length; i++) {\n                _loop_2(i);\n            }\n        }\n    };\n    Grid.prototype.refreshSplitFrozenColumn = function () {\n        this.splitFrozenCount(this.columns);\n        this.updateFrozenColumnsWidth();\n        this.isAutoGenerateColumns = true;\n    };\n    /**\n     * @hidden\n     * @returns {void}\n     */\n    Grid.prototype.setFrozenCount = function () {\n        this.frozenLeftCount = this.frozenRightCount = this.movableCount = 0;\n        this.visibleFrozenLeft = this.visibleFrozenRight = this.visibleMovable = 0;\n        this.frozenLeftColumns = [];\n        this.frozenRightColumns = [];\n        this.movableColumns = [];\n        this.fixedColumns = [];\n        this.splitFrozenCount(this.columns);\n        this.leftcount = this.frozenLeftCount;\n        this.rightcount = this.frozenRightCount;\n        this.movablecount = this.movableCount;\n        // if (this.frozenColumns && (this.frozenLeftCount || this.frozenRightCount)) {\n        //     this.setProperties({ frozenColumns: 0 }, true);\n        // }\n        if (this.frozenLeftCount && !this.frozenRightCount) {\n            this.frozenName = 'Left';\n        }\n        else if (this.frozenRightCount && !this.frozenLeftCount) {\n            this.frozenName = 'Right';\n        }\n        else if (this.frozenLeftCount && this.frozenRightCount) {\n            this.frozenName = 'Left-Right';\n        }\n        else if (this.frozenColumns || this.frozenRows) {\n            this.frozenName = 'Left';\n        }\n        else {\n            this.frozenName = undefined;\n        }\n    };\n    /**\n     * @hidden\n     * @returns {number} Returns the visible Frozen left count\n     */\n    Grid.prototype.getVisibleFrozenLeftCount = function () {\n        return this.visibleFrozenLeft;\n    };\n    /**\n     * @hidden\n     * @returns {number} Returns the visible Frozen Right count\n     */\n    Grid.prototype.getVisibleFrozenRightCount = function () {\n        return this.visibleFrozenRight;\n    };\n    /**\n     * @hidden\n     * @returns {number} Returns the visible movable count\n     */\n    Grid.prototype.getVisibleMovableCount = function () {\n        return this.visibleMovable;\n    };\n    /**\n     * @hidden\n     * @returns {Column[]} Returns the column\n     */\n    Grid.prototype.getFrozenRightColumns = function () {\n        return this.frozenRightColumns;\n    };\n    /**\n     * @hidden\n     * @returns {Column[]} Returns the column\n     */\n    Grid.prototype.getFrozenLeftColumns = function () {\n        return this.frozenLeftColumns;\n    };\n    /**\n     * @hidden\n     * @returns {Column[]} Returns the column\n     */\n    Grid.prototype.getMovableColumns = function () {\n        return this.movableColumns;\n    };\n    Grid.prototype.splitStackedColumns = function (columns) {\n        for (var i = 0; i < columns.length; i++) {\n            if (columns[parseInt(i.toString(), 10)].columns) {\n                this.splitStackedColumns(columns[parseInt(i.toString(), 10)].columns);\n            }\n            else {\n                if (columns[parseInt(i.toString(), 10)].freeze === 'Left' || columns[parseInt(i.toString(), 10)].isFrozen) {\n                    if (columns[parseInt(i.toString(), 10)].visible !== false) {\n                        this.visibleFrozenLeft++;\n                    }\n                    this.leftcount++;\n                }\n                else if (columns[parseInt(i.toString(), 10)].freeze === 'Right') {\n                    if (columns[parseInt(i.toString(), 10)].visible !== false) {\n                        this.visibleFrozenRight++;\n                    }\n                    this.rightcount++;\n                }\n                else if (columns[parseInt(i.toString(), 10)].freeze === 'Fixed') {\n                    if (columns[parseInt(i.toString(), 10)].visible !== false) {\n                        this.visibleFrozenFixed++;\n                    }\n                    this.fixedcount++;\n                }\n                else {\n                    if (columns[parseInt(i.toString(), 10)].visible !== false) {\n                        this.visibleMovable++;\n                    }\n                    this.movablecount++;\n                }\n            }\n        }\n    };\n    Grid.prototype.pushStackedColumns = function (columns, index, arr, col, stackedcol) {\n        arr[parseInt(index.toString(), 10)] = { headerText: col.headerText };\n        if (col.textAlign) {\n            arr[parseInt(index.toString(), 10)].textAlign = col.textAlign;\n        }\n        if (col.customAttributes) {\n            arr[parseInt(index.toString(), 10)].customAttributes = col.customAttributes;\n        }\n        for (var i = 0; i < columns.length; i++) {\n            if (columns[parseInt(i.toString(), 10)].columns) {\n                index = index + 1;\n                this.pushStackedColumns(columns[parseInt(i.toString(), 10)].columns, index, arr, columns[parseInt(i.toString(), 10)], stackedcol);\n                index = index - 1;\n            }\n            else {\n                var stockCol = [];\n                stockCol = arr.slice().slice(0, index + 1);\n                if (columns[parseInt(i.toString(), 10)].freeze === 'Left' || columns[parseInt(i.toString(), 10)].isFrozen) {\n                    this.stackedLeft.push(stockCol);\n                    this.stackedarrayLeft.push(columns[parseInt(i.toString(), 10)]);\n                }\n                else if (columns[parseInt(i.toString(), 10)].freeze === 'Right') {\n                    this.stackedRight.push(stockCol);\n                    this.stackedarrayRight.push(columns[parseInt(i.toString(), 10)]);\n                }\n                else if (columns[parseInt(i.toString(), 10)].freeze === 'Fixed') {\n                    this.stackedFixed.push(stockCol);\n                    this.stackedarrayFixed.push(columns[parseInt(i.toString(), 10)]);\n                }\n                else {\n                    this.stackedMovable.push(stockCol);\n                    this.stackedarrayMovable.push(columns[parseInt(i.toString(), 10)]);\n                }\n            }\n        }\n    };\n    Grid.prototype.pushallcol = function (text, text1, col, columns, isTrue) {\n        if (col.headerText === text1.headerText) {\n            if (isTrue) {\n                col.columns.push(columns);\n            }\n            else {\n                var newColumn = { headerText: text.headerText, columns: [] };\n                if (text.textAlign) {\n                    newColumn.textAlign = text.textAlign;\n                }\n                if (text.customAttributes) {\n                    newColumn.customAttributes = text.customAttributes;\n                }\n                col.columns.push(newColumn);\n            }\n        }\n        else {\n            if (col.columns && col.columns.length) {\n                for (var i = 0; i < col.columns.length; i++) {\n                    this.pushallcol(text, text1, col.columns[parseInt(i.toString(), 10)], columns, isTrue);\n                }\n            }\n        }\n    };\n    Grid.prototype.resetStackedColumns = function (headercol, gridcolumns, freeze) {\n        var col = {};\n        var tempHead = [];\n        for (var i = 1; i <= headercol.length; i++) {\n            var firstcol = headercol[i - 1];\n            for (var j = 0; j < firstcol.length; j++) {\n                if (!col.columns && i === 1) {\n                    col = { headerText: firstcol[parseInt(j.toString(), 10)].headerText,\n                        textAlign: firstcol[parseInt(j.toString(), 10)].textAlign,\n                        customAttributes: firstcol[parseInt(j.toString(), 10)].customAttributes, columns: [] };\n                    tempHead.push(firstcol[parseInt(j.toString(), 10)]);\n                }\n                else {\n                    if (tempHead.indexOf(firstcol[parseInt(j.toString(), 10)]) === -1) {\n                        this.pushallcol(firstcol[parseInt(j.toString(), 10)], firstcol[j - 1], col);\n                        tempHead.push(firstcol[parseInt(j.toString(), 10)]);\n                    }\n                }\n                if (j === firstcol.length - 1) {\n                    this.pushallcol(null, firstcol[parseInt(j.toString(), 10)], col, gridcolumns[i - 1], true);\n                    var count = 0;\n                    while (count !== headercol.length - 1 && i !== headercol.length) {\n                        var firstColHeaders = firstcol.map(function (col) {\n                            return col.headerText;\n                        }).join(', ');\n                        var headerColHeaders = headercol[parseInt(i.toString(), 10)].map(function (item) { return item.headerText; }).join(', ');\n                        if (firstColHeaders === headerColHeaders) {\n                            i++;\n                            this.pushallcol(null, firstcol[parseInt(j.toString(), 10)], col, gridcolumns[i - 1], true);\n                        }\n                        count++;\n                    }\n                }\n            }\n        }\n        if (freeze === 'Left') {\n            this.frozenLeftColumns.push(col);\n        }\n        else if (freeze === 'Right') {\n            this.frozenRightColumns.push(col);\n        }\n        else {\n            this.movableColumns.push(col);\n        }\n    };\n    Grid.prototype.splitFrozenCount = function (columns) {\n        if (this.frozenColumns || (this.changedProperties && this.changedProperties.frozenColumns === 0)) {\n            var cols = !this.enableColumnVirtualization || (this.enableColumnVirtualization && this.isPreparedFrozenColumns) ?\n                this.enableColumnVirtualization && this.columnModel && this.columnModel.length ? this.columnModel :\n                    this.getColumns() : this.columns;\n            if (!this.changedProperties || (this.changedProperties && !this.changedProperties.frozenColumns)) {\n                for (var i = 0; i < cols.length; i++) {\n                    if (this.frozenColumns > i) {\n                        cols[parseInt(i.toString(), 10)].freeze = 'Left';\n                    }\n                    else if (cols[parseInt(i.toString(), 10)].freeze === 'Right' || cols[parseInt(i.toString(), 10)].freeze === 'Fixed') {\n                        cols[parseInt(i.toString(), 10)].freeze = cols[parseInt(i.toString(), 10)].freeze;\n                    }\n                    else {\n                        cols[parseInt(i.toString(), 10)].freeze = undefined;\n                    }\n                }\n            }\n        }\n        for (var i = 0; i < (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(columns) ? columns.length : 0); i++) {\n            if (columns[parseInt(i.toString(), 10)].columns) {\n                this.leftcount = 0;\n                this.rightcount = 0;\n                this.movablecount = 0;\n                this.fixedcount = 0;\n                var arr = [];\n                this.splitStackedColumns(columns[parseInt(i.toString(), 10)].columns);\n                if (this.leftcount && !this.rightcount && !this.movablecount && !this.fixedcount) {\n                    this.frozenLeftCount += this.leftcount;\n                    this.frozenLeftColumns.push(columns[parseInt(i.toString(), 10)]);\n                }\n                else if (this.rightcount && !this.leftcount && !this.movablecount && !this.fixedcount) {\n                    this.frozenRightCount += this.rightcount;\n                    this.frozenRightColumns.push(columns[parseInt(i.toString(), 10)]);\n                }\n                else if (this.movablecount && !this.leftcount && !this.rightcount && !this.fixedcount) {\n                    this.movableCount += this.movablecount;\n                    this.movableColumns.push(columns[parseInt(i.toString(), 10)]);\n                }\n                else if (this.fixedcount && !this.leftcount && !this.rightcount && !this.movablecount) {\n                    this.fixedCount += this.fixedcount;\n                    this.fixedColumns.push(columns[parseInt(i.toString(), 10)]);\n                    this.movableCount += this.movablecount;\n                    this.movableColumns.push(columns[parseInt(i.toString(), 10)]);\n                }\n                else {\n                    this.frozenLeftCount += this.leftcount;\n                    this.frozenRightCount += this.rightcount;\n                    this.movableCount += this.movablecount;\n                    this.fixedCount += this.fixedcount;\n                    this.leftcount = 0;\n                    this.rightcount = 0;\n                    this.movablecount = 0;\n                    this.fixedcount = 0;\n                    this.stackedLeft = [];\n                    this.stackedRight = [];\n                    this.stackedFixed = [];\n                    this.stackedMovable = [];\n                    this.stackedarrayLeft = [];\n                    this.stackedarrayRight = [];\n                    this.stackedarrayFixed = [];\n                    this.stackedarrayMovable = [];\n                    this.pushStackedColumns(columns[parseInt(i.toString(), 10)].columns, 0, arr, columns[parseInt(i.toString(), 10)], { headerText: columns[parseInt(i.toString(), 10)].headerText,\n                        textAlign: columns[parseInt(i.toString(), 10)].textAlign,\n                        customAttributes: columns[parseInt(i.toString(), 10)].customAttributes, columns: [] });\n                    if (this.stackedarrayLeft.length) {\n                        this.resetStackedColumns(this.stackedLeft, this.stackedarrayLeft, 'Left');\n                    }\n                    if (this.stackedarrayRight.length) {\n                        this.resetStackedColumns(this.stackedRight, this.stackedarrayRight, 'Right');\n                    }\n                    if (this.stackedarrayFixed.length) {\n                        this.resetStackedColumns(this.stackedFixed, this.stackedarrayFixed, 'Fixed');\n                    }\n                    if (this.stackedarrayMovable.length) {\n                        this.resetStackedColumns(this.stackedMovable, this.stackedarrayMovable, 'Movable');\n                    }\n                    this.stackedLeft = [];\n                    this.stackedRight = [];\n                    this.stackedMovable = [];\n                    this.stackedFixed = [];\n                    this.stackedarrayLeft = [];\n                    this.stackedarrayRight = [];\n                    this.stackedarrayMovable = [];\n                    this.stackedarrayFixed = [];\n                }\n            }\n            else {\n                if (columns[parseInt(i.toString(), 10)].freeze === 'Right') {\n                    if (columns[parseInt(i.toString(), 10)].visible !== false) {\n                        this.visibleFrozenRight++;\n                    }\n                    this.frozenRightColumns.push(columns[parseInt(i.toString(), 10)]);\n                    this.frozenRightCount++;\n                }\n                else if (columns[parseInt(i.toString(), 10)].freeze === 'Left' || columns[parseInt(i.toString(), 10)].isFrozen) {\n                    if (columns[parseInt(i.toString(), 10)].visible !== false) {\n                        this.visibleFrozenLeft++;\n                    }\n                    this.frozenLeftColumns.push(columns[parseInt(i.toString(), 10)]);\n                    this.frozenLeftCount++;\n                }\n                else if (columns[parseInt(i.toString(), 10)].freeze === 'Fixed') {\n                    this.fixedColumns.push(columns[parseInt(i.toString(), 10)]);\n                    this.fixedCount++;\n                    this.movableColumns.push(columns[parseInt(i.toString(), 10)]);\n                    this.movableCount++;\n                }\n                else {\n                    if (columns[parseInt(i.toString(), 10)].visible !== false) {\n                        this.visibleMovable++;\n                    }\n                    this.movableColumns.push(columns[parseInt(i.toString(), 10)]);\n                    this.movableCount++;\n                }\n            }\n        }\n        if (this.frozenLeftColumns.length) {\n            var cols = this.frozenLeftColumns[this.frozenLeftColumns.length - 1];\n            this.removeBorder(this.frozenLeftColumns);\n            this.frozenLeftBorderColumns(cols instanceof _models_column__WEBPACK_IMPORTED_MODULE_6__.Column ? this.lastVisibleLeftCol(this.frozenLeftColumns) : cols);\n        }\n        if (this.frozenRightColumns.length) {\n            var cols = this.frozenRightColumns[0];\n            this.removeBorder(this.frozenRightColumns);\n            this.frozenRightBorderColumns(cols instanceof _models_column__WEBPACK_IMPORTED_MODULE_6__.Column ? this.firstVisibleRightCol(this.frozenRightColumns) : cols);\n        }\n        if ((this.frozenLeftColumns.length || this.frozenRightColumns.length) && this.freezeColumnRefresh) {\n            var cols = (this.frozenLeftColumns.concat(this.movableColumns)).concat(this.frozenRightColumns);\n            this.setProperties({ columns: cols }, true);\n            this.freezeColumnRefresh = false;\n        }\n    };\n    Grid.prototype.removeBorder = function (columns) {\n        for (var i = 0; i < columns.length; i++) {\n            if (columns[parseInt(i.toString(), 10)].columns && columns[parseInt(i.toString(), 10)].columns.length) {\n                if (columns[parseInt(i.toString(), 10)].border === 'Right' ||\n                    columns[parseInt(i.toString(), 10)].border === 'Left') {\n                    columns[parseInt(i.toString(), 10)].border = undefined;\n                }\n                this.removeBorder(columns[parseInt(i.toString(), 10)].columns);\n            }\n            else {\n                if (columns[parseInt(i.toString(), 10)].border === 'Right' ||\n                    columns[parseInt(i.toString(), 10)].border === 'Left') {\n                    columns[parseInt(i.toString(), 10)].border = undefined;\n                }\n            }\n        }\n    };\n    Grid.prototype.isVisibleColumns = function (column, arr) {\n        if (column.columns && column.columns.length) {\n            for (var i = 0; i < column.columns.length; i++) {\n                this.isVisibleColumns(column.columns[parseInt(i.toString(), 10)], arr);\n                if (column.columns[parseInt(i.toString(), 10)].visible &&\n                    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(column.columns[parseInt(i.toString(), 10)].columns) &&\n                    (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(column.columns[parseInt(i.toString(), 10)].freeze) ||\n                        column.columns[parseInt(i.toString(), 10)].isFrozen)) {\n                    arr.push('true');\n                }\n            }\n        }\n        else {\n            if (column.visible && (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(column.freeze) || column.isFrozen)) {\n                arr.push('true');\n            }\n        }\n    };\n    Grid.prototype.lastVisibleLeftCol = function (columns) {\n        var column;\n        for (var i = columns.length - 1; i >= 0; i--) {\n            var arr = [];\n            this.isVisibleColumns(columns[parseInt(i.toString(), 10)], arr);\n            if (columns[parseInt(i.toString(), 10)].visible && arr.indexOf('true') !== -1) {\n                column = columns[parseInt(i.toString(), 10)];\n                break;\n            }\n        }\n        return column;\n    };\n    Grid.prototype.firstVisibleRightCol = function (columns) {\n        var column;\n        for (var i = 0; i < columns.length; i++) {\n            var arr = [];\n            this.isVisibleColumns(columns[parseInt(i.toString(), 10)], arr);\n            if (columns[parseInt(i.toString(), 10)].visible && arr.indexOf('true') !== -1) {\n                column = columns[parseInt(i.toString(), 10)];\n                break;\n            }\n        }\n        return column;\n    };\n    Grid.prototype.frozenLeftBorderColumns = function (columns) {\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(columns)) {\n            return;\n        }\n        if (columns.columns && columns.columns.length) {\n            columns.border = 'Left';\n            var cols = columns.columns[columns.columns.length - 1];\n            this.frozenLeftBorderColumns(cols instanceof _models_column__WEBPACK_IMPORTED_MODULE_6__.Column && cols.columns ? this.lastVisibleLeftCol(columns.columns) : cols);\n        }\n        else {\n            columns.border = 'Left';\n        }\n    };\n    Grid.prototype.frozenRightBorderColumns = function (columns) {\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(columns)) {\n            return;\n        }\n        if (columns.columns && columns.columns.length) {\n            columns.border = 'Right';\n            var cols = columns.columns[0];\n            this.frozenRightBorderColumns(cols instanceof _models_column__WEBPACK_IMPORTED_MODULE_6__.Column && cols.columns ? this.firstVisibleRightCol(columns.columns) : cols);\n        }\n        else {\n            columns.border = 'Right';\n        }\n    };\n    /**\n     * @hidden\n     * @returns {number} Returns the visible frozen columns count\n     */\n    Grid.prototype.getVisibleFrozenColumns = function () {\n        return this.getVisibleFrozenColumnsCount() + this.getVisibleFrozenCount(this.columns, 0);\n    };\n    /**\n     * Get the current Filter operator and field.\n     *\n     * @returns {FilterUI} Returns the filter UI\n     */\n    Grid.prototype.getFilterUIInfo = function () {\n        return this.filterModule ? this.filterModule.getFilterUIInfo() : {};\n    };\n    Grid.prototype.getVisibleFrozenColumnsCount = function () {\n        var visibleFrozenColumns = 0;\n        var columns = this.columnModel;\n        for (var i = 0; i < this.frozenColumns; i++) {\n            if (columns[parseInt(i.toString(), 10)].visible) {\n                visibleFrozenColumns++;\n            }\n        }\n        if ((this.frozenLeftCount || this.leftcount) || (this.frozenRightCount || this.rightcount)) {\n            for (var i = 0; i < columns.length; i++) {\n                if (columns[parseInt(i.toString(), 10)].visible && (columns[parseInt(i.toString(), 10)].freeze === 'Left'\n                    || columns[parseInt(i.toString(), 10)].freeze === 'Right')) {\n                    visibleFrozenColumns++;\n                }\n            }\n        }\n        return visibleFrozenColumns;\n    };\n    Grid.prototype.getVisibleFrozenCount = function (cols, cnt) {\n        if ((!this.frozenLeftCount && !this.leftcount) && (!this.frozenRightCount || !this.rightcount)) {\n            for (var i = 0, len = cols.length; i < len; i++) {\n                if (cols[parseInt(i.toString(), 10)].columns) {\n                    cnt = this.getVisibleFrozenCount(cols[parseInt(i.toString(), 10)].columns, cnt);\n                }\n                else {\n                    if (cols[parseInt(i.toString(), 10)].isFrozen && cols[parseInt(i.toString(), 10)].visible) {\n                        cnt++;\n                    }\n                }\n            }\n        }\n        return cnt;\n    };\n    Grid.prototype.getFrozenCount = function (cols, cnt, index) {\n        for (var i = 0, len = (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(cols) ? cols.length : 0); i < len; i++) {\n            if (cols[parseInt(i.toString(), 10)].columns) {\n                cnt = this.getFrozenCount(cols[parseInt(i.toString(), 10)].columns, cnt, index);\n            }\n            else {\n                if (cols[parseInt(i.toString(), 10)].isFrozen && index > this.frozenColumns - 1) {\n                    cnt++;\n                }\n                index++;\n            }\n        }\n        return cnt;\n    };\n    /**\n     * Navigates to the specified target page.\n     *\n     * @param  {number} pageNo - Defines the page number to navigate.\n     *\n     * @returns {void}\n     */\n    Grid.prototype.goToPage = function (pageNo) {\n        if (this.pagerModule) {\n            this.pagerModule.goToPage(pageNo);\n        }\n    };\n    /**\n     * Defines the text of external message.\n     *\n     * @param  {string} message - Defines the message to update.\n     *\n     * @returns {void}\n     */\n    Grid.prototype.updateExternalMessage = function (message) {\n        if (this.pagerModule && !this.pagerTemplate) {\n            this.pagerModule.updateExternalMessage(message);\n        }\n    };\n    /**\n     * Sorts a column with the given options.\n     *\n     * @param {string} columnName - Defines the column name to be sorted.\n     * @param {SortDirection} direction - Defines the direction of sorting field.\n     * @param {boolean} isMultiSort - Specifies whether the previous sorted columns are to be maintained.\n     *\n     * @returns {void}\n     */\n    Grid.prototype.sortColumn = function (columnName, direction, isMultiSort) {\n        if (this.sortModule) {\n            this.sortModule.sortColumn(columnName, direction, isMultiSort);\n        }\n    };\n    /**\n     * Remove the existing columns along with the grid actions like sorting, filtering, searching, grouping, aggregate, etc., and grid will refresh with new columns based on the updated new data source.\n     * > * If no columns are specified while changing the data source, then the columns are auto generated in the Grid based on the list of columns in the updated data source.\n     *\n     * @param {Object | DataManager | DataResult} dataSource -  Assign the new datasource.\n     * @param {Column[] | string[] | ColumnModel[]} columns - Defines columns.\n     * @returns {void}\n     *\n     *\n     * ```typescript\n     * <button id=\"btn\">change dataSource </button>\n     * <div id=\"Grid\"></div>\n     * <script>\n     * let gridObj: Grid = new Grid({\n     *     dataSource: employeeData,  // you can define the datamanager here if you are binding a data through datamanager\n     *     columns: [\n     *         { field: 'OrderID', headerText: 'Order ID', width:100 },\n     *         { field: 'EmployeeID', headerText: 'Employee ID' }],\n     * });\n     * gridObj.appendTo('#Grid');\n     * document.getElementById('btn').addEventListener(\"click\", function(){\n     * let newColumn: [\n     *     { field: 'CustomerID', headerText: 'Customer ID', width:100 },\n     *     { field: 'FirstName', headerText: 'Name' }];\n     * gridObj.changeDataSource(customerData, newColumn);\n     * });\n     * </script>\n     * ```\n     *\n     */\n    Grid.prototype.changeDataSource = function (dataSource, columns) {\n        this.isChangeDataSourceCall = true;\n        this.setProperties({ sortSettings: { columns: [] } }, true);\n        this.setProperties({ filterSettings: { columns: [] } }, true);\n        this.setProperties({ searchSettings: { key: '' } }, true);\n        if (this.allowGrouping) {\n            this.setProperties({ groupSettings: { columns: [] } }, true);\n        }\n        if (columns && columns.length) {\n            this.setProperties({ columns: columns }, true);\n        }\n        if (dataSource) {\n            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(columns)) {\n                this.setProperties({ columns: [] }, true);\n            }\n            this.setProperties({ dataSource: dataSource }, true);\n        }\n        this.freezeRefresh();\n        this.isChangeDataSourceCall = false;\n    };\n    /**\n     * Clears all the sorted columns of the Grid.\n     *\n     * @returns {void}\n     */\n    Grid.prototype.clearSorting = function () {\n        if (this.sortModule) {\n            this.sortModule.clearSorting();\n        }\n    };\n    /**\n     * Remove sorted column by field name.\n     *\n     * @param {string} field - Defines the column field name to remove sort.\n     * @returns {void}\n     * @hidden\n     */\n    Grid.prototype.removeSortColumn = function (field) {\n        if (this.sortModule) {\n            this.sortModule.removeSortColumn(field);\n        }\n    };\n    /**\n     * @hidden\n     * @returns {void}\n     */\n    Grid.prototype.clearGridActions = function () {\n        this.setProperties({ sortSettings: { columns: [] } }, true);\n        this.setProperties({ filterSettings: { columns: [] } }, true);\n        this.setProperties({ searchSettings: { key: '' } }, true);\n        if (this.allowGrouping) {\n            this.setProperties({ groupSettings: { columns: [] } }, false);\n        }\n        else {\n            this.freezeRefresh();\n        }\n    };\n    /**\n     * Filters grid row by column name with the given options.\n     *\n     * @param  {string} fieldName - Defines the field name of the column.\n     * @param  {string} filterOperator - Defines the operator to filter records.\n     * @param  {string | number | Date | boolean} filterValue - Defines the value used to filter records.\n     * @param  {string} predicate - Defines the relationship between one filter query and another by using AND or OR predicate.\n     * @param  {boolean} matchCase - If match case is set to true, the grid filters the records with exact match. if false, it filters case\n     * insensitive records (uppercase and lowercase letters treated the same).\n     * @param  {boolean} ignoreAccent - If ignoreAccent set to true,\n     * then filter ignores the diacritic characters or accents while filtering.\n     * @param  {string} actualFilterValue - Defines the actual filter value for the filter column.\n     * @param  {string} actualOperator - Defines the actual filter operator for the filter column.\n     *\n     * @returns {void}\n     */\n    Grid.prototype.filterByColumn = function (fieldName, filterOperator, filterValue, predicate, matchCase, ignoreAccent, actualFilterValue, actualOperator) {\n        if (this.filterModule) {\n            this.filterModule.filterByColumn(fieldName, filterOperator, filterValue, predicate, matchCase, ignoreAccent, actualFilterValue, actualOperator);\n        }\n    };\n    /**\n     * Clears all the filtered rows of the Grid.\n     *\n     * @param {string[]} fields - Defines the Fields\n     * @returns {void}\n     */\n    Grid.prototype.clearFiltering = function (fields) {\n        if (this.filterModule) {\n            this.filterModule.clearFiltering(fields);\n        }\n    };\n    /**\n     * Removes filtered column by field name.\n     *\n     * @param  {string} field - Defines column field name to remove filter.\n     * @param  {boolean} isClearFilterBar -  Specifies whether the filter bar value needs to be cleared.\n     * @returns {void}\n     * @hidden\n     */\n    Grid.prototype.removeFilteredColsByField = function (field, isClearFilterBar) {\n        if (this.filterModule) {\n            this.filterModule.removeFilteredColsByField(field, isClearFilterBar);\n        }\n    };\n    /**\n     * Selects a row by given index.\n     *\n     * @param  {number} index - Defines the row index.\n     * @param  {boolean} isToggle - If set to true, then it toggles the selection.\n     *\n     * @returns {void}\n     */\n    Grid.prototype.selectRow = function (index, isToggle) {\n        if (this.selectionModule) {\n            this.selectionModule.selectRow(index, isToggle);\n        }\n    };\n    /**\n     * Selects a collection of rows by indexes.\n     *\n     * @param  {number[]} rowIndexes - Specifies the row indexes.\n     *\n     * @returns {void}\n     */\n    Grid.prototype.selectRows = function (rowIndexes) {\n        if (this.selectionModule) {\n            this.selectionModule.selectRows(rowIndexes);\n        }\n    };\n    /**\n     * Deselects the current selected rows and cells.\n     *\n     * @returns {void}\n     */\n    Grid.prototype.clearSelection = function () {\n        if (this.selectionModule) {\n            this.selectionModule.clearSelection();\n        }\n    };\n    /**\n     * Selects a cell by the given index.\n     *\n     * @param  {IIndex} cellIndex - Defines the row and column indexes.\n     * @param  {boolean} isToggle - If set to true, then it toggles the selection.\n     *\n     * @returns {void}\n     */\n    Grid.prototype.selectCell = function (cellIndex, isToggle) {\n        if (this.selectionModule) {\n            this.selectionModule.selectCell(cellIndex, isToggle);\n        }\n    };\n    /**\n     * Selects a range of cells from start and end indexes.\n     *\n     * @param  {IIndex} startIndex - Specifies the row and column's start index.\n     * @param  {IIndex} endIndex - Specifies the row and column's end index.\n     *\n     * @returns {void}\n     */\n    Grid.prototype.selectCellsByRange = function (startIndex, endIndex) {\n        this.selectionModule.selectCellsByRange(startIndex, endIndex);\n    };\n    /**\n     * Searches Grid records using the given key.\n     * You can customize the default search option by using the\n     * [`searchSettings`](./#searchsettings/).\n     *\n     * @param  {string} searchString - Defines the key.\n     *\n     * @returns {void}\n     */\n    Grid.prototype.search = function (searchString) {\n        if (this.searchModule) {\n            this.searchModule.search(searchString);\n        }\n    };\n    /**\n     * By default, prints all the pages of the Grid and hides the pager.\n     * > You can customize print options using the\n     * [`printMode`](./#printmode).\n     *\n     * @returns {void}\n     */\n    Grid.prototype.print = function () {\n        if (this.printModule) {\n            this.printModule.print();\n        }\n    };\n    /**\n     * Delete a record with Given options. If fieldname and data is not given then grid will delete the selected record.\n     * > `editSettings.allowDeleting` should be true.\n     *\n     * @param {string} fieldname - Defines the primary key field, 'Name of the column'.\n     * @param {Object} data - Defines the JSON data of the record to be deleted.\n     * @returns {void}\n     */\n    Grid.prototype.deleteRecord = function (fieldname, data) {\n        if (this.editModule) {\n            this.editModule.deleteRecord(fieldname, data);\n        }\n    };\n    /**\n     * Starts edit the selected row. At least one row must be selected before invoking this method.\n     * `editSettings.allowEditing` should be true.\n     * {% codeBlock src='grid/startEdit/index.md' %}{% endcodeBlock %}\n     *\n     * @returns {void}\n     */\n    Grid.prototype.startEdit = function () {\n        if (this.editModule) {\n            this.editModule.startEdit();\n        }\n    };\n    /**\n     * If Grid is in editable state, you can save a record by invoking endEdit.\n     *\n     * @returns {void}\n     */\n    Grid.prototype.endEdit = function () {\n        if (this.editModule) {\n            this.editModule.endEdit();\n        }\n    };\n    /**\n     * Cancels edited state.\n     *\n     * @returns {void}\n     */\n    Grid.prototype.closeEdit = function () {\n        if (this.editModule) {\n            this.editModule.closeEdit();\n        }\n    };\n    /**\n     * Adds a new record to the Grid. Without passing parameters, it adds empty rows.\n     * > `editSettings.allowEditing` should be true.\n     *\n     * @param {Object} data - Defines the new add record data.\n     * @param {number} index - Defines the row index to be added\n     * @returns {void}\n     */\n    Grid.prototype.addRecord = function (data, index) {\n        if (this.editModule) {\n            this.editModule.addRecord(data, index);\n        }\n    };\n    /**\n     * Delete any visible row by TR element.\n     *\n     * @param {HTMLTableRowElement} tr - Defines the table row element.\n     * @returns {void}\n     */\n    Grid.prototype.deleteRow = function (tr) {\n        if (this.editModule) {\n            this.editModule.deleteRow(tr);\n        }\n    };\n    /**\n     * Changes a particular cell into edited state based on the row index and field name provided in the `batch` mode.\n     *\n     * @param {number} index - Defines row index to edit a particular cell.\n     * @param {string} field - Defines the field name of the column to perform batch edit.\n     *\n     * @returns {void}\n     */\n    Grid.prototype.editCell = function (index, field) {\n        if (this.editModule) {\n            this.editModule.editCell(index, field);\n        }\n    };\n    /**\n     * Saves the cell that is currently edited. It does not save the value to the DataSource.\n     *\n     * @returns {void}\n     * {% codeBlock src='grid/saveCell/index.md' %}{% endcodeBlock %}\n     */\n    Grid.prototype.saveCell = function () {\n        if (this.editModule) {\n            this.editModule.saveCell();\n        }\n    };\n    /**\n     * To update the specified cell by given value without changing into edited state.\n     *\n     * @param {number} rowIndex Defines the row index.\n     * @param {string} field Defines the column field.\n     * @param {string | number | boolean | Date} value - Defines the value to be changed.\n     *\n     * @returns {void}\n     */\n    Grid.prototype.updateCell = function (rowIndex, field, value) {\n        if (this.editModule) {\n            this.editModule.updateCell(rowIndex, field, value);\n        }\n    };\n    /**\n     * To update the specified row by given values without changing into edited state.\n     *\n     * {% codeBlock src='grid/updateRow/index.md' %}{% endcodeBlock %}\n     *\n     * @param {number} index Defines the row index.\n     * @param {Object} data Defines the data object to be updated.\n     *\n     * @returns {void}\n     */\n    Grid.prototype.updateRow = function (index, data) {\n        if (this.editModule) {\n            this.editModule.updateRow(index, data);\n        }\n    };\n    /**\n     * Gets the added, edited,and deleted data before bulk save to the DataSource in batch mode.\n     *\n     * @returns {Object} Returns the batch changes\n     */\n    Grid.prototype.getBatchChanges = function () {\n        if (this.editModule) {\n            return this.editModule.getBatchChanges();\n        }\n        return {};\n    };\n    /**\n     * Enables or disables ToolBar items.\n     *\n     * @param {string[]} items - Defines the collection of itemID of ToolBar items.\n     * @param {boolean} isEnable - Defines the items to be enabled or disabled.\n     *\n     * @returns {void}\n     */\n    Grid.prototype.enableToolbarItems = function (items, isEnable) {\n        if (this.toolbarModule) {\n            this.toolbarModule.enableItems(items, isEnable);\n        }\n    };\n    /**\n     * Copy the selected rows or cells data into clipboard.\n     *\n     * @param {boolean} withHeader - Specifies whether the column header text needs to be copied along with rows or cells.\n     * @returns {void}\n     */\n    Grid.prototype.copy = function (withHeader) {\n        if (this.clipboardModule) {\n            this.clipboardModule.copy(withHeader);\n        }\n    };\n    /**\n     * @hidden\n     * @returns {void}\n     */\n    Grid.prototype.recalcIndentWidth = function () {\n        var _this_1 = this;\n        if (!this.getHeaderTable().querySelector('.e-emptycell')) {\n            return;\n        }\n        if ((!this.groupSettings.columns.length && !this.isDetail() && !this.isRowDragable()) ||\n            this.getHeaderTable().querySelector('.e-emptycell.e-indentRefreshed') ||\n            !this.getContentTable()) {\n            return;\n        }\n        var indentWidth = this.getHeaderTable().querySelector('.e-emptycell').parentElement.offsetWidth;\n        var headerCol = [].slice.call(this.getHeaderTable().querySelector(_base_string_literals__WEBPACK_IMPORTED_MODULE_28__.colGroup).childNodes);\n        var contentCol = [].slice.call(this.getContentTable().querySelector(_base_string_literals__WEBPACK_IMPORTED_MODULE_28__.colGroup).childNodes);\n        var perPixel = indentWidth / 30;\n        var i = this.getFrozenMode() === 'Right' ? this.groupSettings.columns.length + this.getColumns().length : 0;\n        var parentOffset = this.element.offsetWidth;\n        var applyWidth = function (index, width) {\n            if ((0,_util__WEBPACK_IMPORTED_MODULE_3__.ispercentageWidth)(_this_1)) {\n                var newWidth = (width / parentOffset * 100).toFixed(1) + '%';\n                headerCol[parseInt(index.toString(), 10)].style.width = newWidth;\n                contentCol[parseInt(index.toString(), 10)].style.width = newWidth;\n            }\n            else {\n                headerCol[parseInt(index.toString(), 10)].style.width = width + 'px';\n                contentCol[parseInt(index.toString(), 10)].style.width = width + 'px';\n            }\n            _this_1.notify(_base_constant__WEBPACK_IMPORTED_MODULE_4__.columnWidthChanged, { index: index, width: width });\n        };\n        if (perPixel >= 1) {\n            indentWidth = (30 / perPixel);\n        }\n        if (indentWidth < 1) {\n            indentWidth = 1;\n        }\n        if (this.enableColumnVirtualization || this.isAutoGen || (this.columns.length === this.groupSettings.columns.length)) {\n            indentWidth = 30;\n        }\n        while (i < this.groupSettings.columns.length) {\n            applyWidth(i, indentWidth);\n            i++;\n        }\n        if (this.isDetail()) {\n            applyWidth(i, indentWidth);\n            i++;\n        }\n        if (this.isRowDragable()) {\n            applyWidth(i, indentWidth);\n        }\n        this.isAutoGen = false;\n        this.getHeaderTable().querySelector('.e-emptycell').classList.add('e-indentRefreshed');\n    };\n    /**\n     * @hidden\n     * @returns {void}\n     */\n    Grid.prototype.resetIndentWidth = function () {\n        if (this.isDestroyed) {\n            return;\n        }\n        if ((0,_util__WEBPACK_IMPORTED_MODULE_3__.ispercentageWidth)(this)) {\n            this.getHeaderTable().querySelector('.e-emptycell').classList.remove('e-indentRefreshed');\n            this.widthService.setWidthToColumns();\n            this.recalcIndentWidth();\n            if (this.autoFit) {\n                this.preventAdjustColumns();\n            }\n        }\n        if ((this.width === 'auto' || typeof (this.width) === 'string' && this.width.indexOf('%') !== -1)\n            && this.getColumns().filter(function (col) { return (!col.width || col.width === 'auto') && col.minWidth; }).length > 0) {\n            var tgridWidth = this.widthService.getTableWidth(this.getColumns(), true);\n            this.widthService.setMinwidthBycalculation(tgridWidth);\n        }\n        if (this.isFrozenGrid() && this.enableColumnVirtualization && this.widthService) {\n            this.widthService.refreshFrozenScrollbar();\n        }\n        if (this.allowTextWrap && this.textWrapSettings.wrapMode !== 'Content') {\n            this.notify(_base_constant__WEBPACK_IMPORTED_MODULE_4__.refreshHandlers, {});\n        }\n        if (this.frozenRows && this.scrollModule) {\n            this.scrollModule.resizeFrozenRowBorder();\n        }\n        if (this.enableStickyHeader) {\n            this.scrollModule.makeStickyHeader();\n        }\n        if (this.enableAutoFill && this.selectionSettings.type === 'Multiple' &&\n            this.selectionSettings.mode === 'Cell' && this.selectionModule.selectedRowCellIndexes.length) {\n            this.selectionModule.updateAutoFillPosition();\n            this.selectionModule.drawBorders();\n        }\n    };\n    /**\n     * @hidden\n     * @returns {boolean} Returns isRowDragable\n     */\n    Grid.prototype.isRowDragable = function () {\n        return this.allowRowDragAndDrop && !this.rowDropSettings.targetID;\n    };\n    /**\n     * Changes the Grid column positions by field names.\n     *\n     * @param  {string} fromFName - Defines the origin field name.\n     * @param  {string} toFName - Defines the destination field name.\n     *\n     * @returns {void}\n     */\n    Grid.prototype.reorderColumns = function (fromFName, toFName) {\n        if (this.reorderModule) {\n            this.reorderModule.reorderColumns(fromFName, toFName);\n        }\n    };\n    /**\n     * Changes the Grid column positions by field index. If you invoke reorderColumnByIndex multiple times,\n     * then you won't get the same results every time.\n     *\n     * @param  {number} fromIndex - Defines the origin field index.\n     * @param  {number} toIndex - Defines the destination field index.\n     *\n     * @returns {void}\n     */\n    Grid.prototype.reorderColumnByIndex = function (fromIndex, toIndex) {\n        if (this.reorderModule) {\n            this.reorderModule.reorderColumnByIndex(fromIndex, toIndex);\n        }\n    };\n    /**\n     * Changes the Grid column positions by field index. If you invoke reorderColumnByTargetIndex multiple times,\n     * then you will get the same results every time.\n     *\n     * @param  {string} fieldName - Defines the field name.\n     * @param  {number} toIndex - Defines the destination field index.\n     *\n     * @returns {void}\n     */\n    Grid.prototype.reorderColumnByTargetIndex = function (fieldName, toIndex) {\n        if (this.reorderModule) {\n            this.reorderModule.reorderColumnByTargetIndex(fieldName, toIndex);\n        }\n    };\n    /**\n     * Changes the Grid Row position with given indexes.\n     *\n     * @param  {number} fromIndexes - Defines the origin Indexes.\n     * @param  {number} toIndex - Defines the destination Index.\n     *\n     * @returns {void}\n     */\n    Grid.prototype.reorderRows = function (fromIndexes, toIndex) {\n        if (this.rowDragAndDropModule) {\n            this.rowDragAndDropModule.reorderRows(fromIndexes, toIndex);\n        }\n    };\n    /**\n     * @param {ReturnType} e - Defines the Return type\n     * @returns {void}\n     * @hidden\n     */\n    Grid.prototype.refreshDataSource = function (e) {\n        this.notify('refreshdataSource', e);\n    };\n    /**\n     * @param {boolean} enable -Defines the enable\n     * @returns {void}\n     * @hidden\n     */\n    Grid.prototype.disableRowDD = function (enable) {\n        var headerTable = this.getHeaderTable();\n        var contentTable = this.getContentTable();\n        var headerRows = headerTable.querySelectorAll('th.e-rowdragheader, th.e-mastercell');\n        var rows = this.getRows();\n        var disValue = enable ? 'none' : '';\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.setStyleAttribute)(headerTable.querySelector(_base_string_literals__WEBPACK_IMPORTED_MODULE_28__.colGroup).childNodes[0], { 'display': disValue });\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.setStyleAttribute)(contentTable.querySelector(_base_string_literals__WEBPACK_IMPORTED_MODULE_28__.colGroup).childNodes[0], { 'display': disValue });\n        for (var i = 0; i < this.getRows().length; i++) {\n            var ele = rows[parseInt(i.toString(), 10)].firstElementChild;\n            if (enable) {\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([ele], 'e-hide');\n            }\n            else {\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([ele], ['e-hide']);\n            }\n        }\n        for (var j = 0; j < headerTable.querySelectorAll('th.e-rowdragheader, th.e-mastercell').length; j++) {\n            var ele = headerRows[parseInt(j.toString(), 10)];\n            if (enable) {\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([ele], 'e-hide');\n            }\n            else {\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([ele], ['e-hide']);\n            }\n        }\n    };\n    /**\n     * Changes the column width to automatically fit its content to ensure that the width shows the content without wrapping/hiding.\n     * > * This method ignores the hidden columns.\n     * > * Uses the `autoFitColumns` method in the `dataBound` event to resize at initial rendering.\n     * > * By specifying the start row index and end row index, providing the range within which the maximum width for that column should be considered when applying `autoFitColumns`.\n     * > * The width of header rows is always calculated. If the width of a header row exceeds the specified range, its width will be allocated to the specific content rows.\n     *\n     * @param  {string |string[]} fieldNames - Defines the column names.\n     * @param  {number} startRowIndex - Specifies the start index of the content row.\n     * @param  {number} endRowIndex - Specifies the end index of content row.\n     * @returns {void}\n     *\n     *\n     * ```typescript\n     * <div id=\"Grid\"></div>\n     * <script>\n     * let gridObj: Grid = new Grid({\n     *     dataSource: employeeData,\n     *     columns: [\n     *         { field: 'OrderID', headerText: 'Order ID', width:100 },\n     *         { field: 'EmployeeID', headerText: 'Employee ID' }],\n     *     dataBound: () => gridObj.autoFitColumns('EmployeeID');\n     * });\n     * gridObj.appendTo('#Grid');\n     * </script>\n     * ```\n     *\n     */\n    Grid.prototype.autoFitColumns = function (fieldNames, startRowIndex, endRowIndex) {\n        var injectedModules = this.getInjectedModules();\n        var resize = injectedModules.find(function (item) {\n            if (typeof item === 'function' && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(item.prototype)) {\n                return item.prototype.getModuleName() === 'resize';\n            }\n            else {\n                return item.name === 'Resize';\n            }\n        });\n        if (!this.resizeModule && resize) {\n            this.autoFitColumnsResize = true;\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            this.injectModules();\n        }\n        if (this.resizeModule) {\n            this.resizeModule.autoFitColumns(fieldNames, startRowIndex, endRowIndex);\n        }\n    };\n    /**\n     * @returns {void}\n     * @hidden\n     */\n    Grid.prototype.preventAdjustColumns = function () {\n        if ((this.enableAdaptiveUI && this.rowRenderingMode === 'Vertical')\n            || (this.allowResizing && this.resizeSettings.mode === 'Auto')) {\n            return;\n        }\n        var columns = this.getColumns();\n        var headerTable = this.getHeaderTable();\n        var tableWidth = 0;\n        for (var i = 0; i < columns.length; i++) {\n            if (columns[parseInt(i.toString(), 10)].visible) {\n                if (this.groupSettings.columns.length\n                    && this.groupSettings.columns.indexOf(columns[parseInt(i.toString(), 10)].field) > -1) {\n                    var headerCol = [].slice.call(headerTable.querySelector('colgroup')\n                        .querySelectorAll(':not(.e-group-intent):not(.e-detail-intent):not(.e-drag-intent)'));\n                    if (headerCol[parseInt(i.toString(), 10)].style.display === 'none') {\n                        continue;\n                    }\n                }\n                if (columns[parseInt(i.toString(), 10)].width) {\n                    tableWidth += parseFloat(columns[parseInt(i.toString(), 10)].width.toString());\n                }\n                else {\n                    tableWidth = 0;\n                    break;\n                }\n            }\n        }\n        if (tableWidth) {\n            var percentageWidth = this.isPercentageWidthGrid();\n            var unit = this.widthUnit(percentageWidth);\n            var contentTable = this.getContentTable();\n            if (this.groupSettings.columns.length || this.isDetail() || this.isRowDragable()) {\n                var indentWidth = this.defaultIndentWidth(percentageWidth);\n                var indentWidthUnitFormat = indentWidth.toString() + unit;\n                var headerIndentCol = [].slice.call(headerTable.querySelector('colgroup')\n                    .querySelectorAll('.e-group-intent, .e-detail-intent, .e-drag-intent'));\n                var contentIndentCol = [].slice.call(contentTable.querySelector('colgroup')\n                    .querySelectorAll('.e-group-intent, .e-detail-intent, .e-drag-intent'));\n                for (var i = 0; i < headerIndentCol.length; i++) {\n                    headerIndentCol[parseInt(i.toString(), 10)].style.setProperty('width', indentWidthUnitFormat);\n                    contentIndentCol[parseInt(i.toString(), 10)].style.setProperty('width', indentWidthUnitFormat);\n                    tableWidth += indentWidth;\n                }\n            }\n            if ((percentageWidth && tableWidth < 100)\n                || (!percentageWidth && tableWidth < contentTable.parentElement.clientWidth)) {\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(contentTable.querySelector('.e-emptyrow'))) {\n                    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([headerTable], ['e-tableborder']);\n                    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([contentTable], ['e-tableborder']);\n                }\n                else {\n                    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([headerTable, contentTable], ['e-tableborder']);\n                }\n            }\n            var tableWidthUnitFormat = tableWidth.toString() + unit;\n            headerTable.style.setProperty('width', tableWidthUnitFormat);\n            contentTable.style.setProperty('width', tableWidthUnitFormat);\n        }\n        else {\n            this.restoreAdjustColumns();\n        }\n    };\n    Grid.prototype.restoreAdjustColumns = function () {\n        if ((this.enableAdaptiveUI && this.rowRenderingMode === 'Vertical')\n            || (this.allowResizing && this.resizeSettings.mode === 'Auto')) {\n            return;\n        }\n        var headerTable = this.getHeaderTable();\n        var contentTable = this.getContentTable();\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([headerTable, contentTable], ['e-tableborder']);\n        headerTable.style.removeProperty('width');\n        contentTable.style.removeProperty('width');\n        if (this.groupSettings.columns.length || this.isDetail() || this.isRowDragable()) {\n            var percentageWidth = this.isPercentageWidthGrid();\n            var indentWidthUnitFormat_1 = this.defaultIndentWidth(percentageWidth).toString() + this.widthUnit(percentageWidth);\n            var headerIndentCol = [].slice.call(headerTable.querySelector('colgroup')\n                .querySelectorAll('.e-group-intent, .e-detail-intent, .e-drag-intent'));\n            headerIndentCol.forEach(function (element) {\n                element.style.setProperty('width', indentWidthUnitFormat_1);\n            });\n            headerTable.querySelector('.e-emptycell').classList.remove('e-indentRefreshed');\n            this.recalcIndentWidth();\n        }\n    };\n    Grid.prototype.widthUnit = function (percentageWidth) {\n        return percentageWidth ? '%' : 'px';\n    };\n    Grid.prototype.defaultIndentWidth = function (percentageWidth) {\n        return percentageWidth ? parseFloat((30 / this.element.offsetWidth * 100).toFixed(1)) : 30;\n    };\n    Grid.prototype.isPercentageWidthGrid = function () {\n        var column = this.getColumns().find(function (col) { return !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(col.width); });\n        return column ? column.width.toString().indexOf('%') > -1 : false;\n    };\n    /**\n     * @param {number} x - Defines the number\n     * @param {number} y - Defines the number\n     * @param {Element} target - Defines the Element\n     * @returns {void}\n     * @hidden\n     */\n    Grid.prototype.createColumnchooser = function (x, y, target) {\n        if (this.columnChooserModule) {\n            this.columnChooserModule.renderColumnChooser(x, y, target);\n        }\n    };\n    Grid.prototype.initializeServices = function () {\n        this.serviceLocator.register('widthService', this.widthService = new _services_width_controller__WEBPACK_IMPORTED_MODULE_14__.ColumnWidthService(this));\n        this.serviceLocator.register('cellRendererFactory', new _services_cell_render_factory__WEBPACK_IMPORTED_MODULE_10__.CellRendererFactory);\n        this.serviceLocator.register('rendererFactory', new _services_renderer_factory__WEBPACK_IMPORTED_MODULE_13__.RendererFactory);\n        this.serviceLocator.register('localization', this.localeObj = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.L10n(this.getModuleName(), this.defaultLocale, this.locale));\n        this.serviceLocator.register('valueFormatter', this.valueFormatterService = new _services_value_formatter__WEBPACK_IMPORTED_MODULE_12__.ValueFormatter(this.locale));\n        this.serviceLocator.register('showHideService', this.showHider = new _actions_show_hide__WEBPACK_IMPORTED_MODULE_21__.ShowHide(this));\n        this.serviceLocator.register('ariaService', this.ariaService = new _services_aria_service__WEBPACK_IMPORTED_MODULE_15__.AriaService());\n        this.serviceLocator.register('focus', this.focusModule = new _services_focus_strategy__WEBPACK_IMPORTED_MODULE_16__.FocusStrategy(this));\n    };\n    Grid.prototype.processModel = function () {\n        var gCols = this.groupSettings.columns;\n        var sCols = this.sortSettings.columns;\n        var flag;\n        var j;\n        if (this.allowGrouping) {\n            var _loop_3 = function (i, len) {\n                flag = false;\n                j = 0;\n                for (var sLen = sCols.length; j < sLen; j++) {\n                    if (sCols[parseInt(j.toString(), 10)].field === gCols[parseInt(i.toString(), 10)]) {\n                        flag = true;\n                        break;\n                    }\n                }\n                if (!flag) {\n                    sCols.push({ field: gCols[parseInt(i.toString(), 10)], direction: 'Ascending', isFromGroup: true });\n                }\n                else {\n                    if (this_3.allowSorting) {\n                        this_3.sortedColumns.push(sCols[parseInt(j.toString(), 10)].field);\n                    }\n                    else {\n                        sCols[parseInt(j.toString(), 10)].direction = 'Ascending';\n                    }\n                }\n                if (!this_3.groupSettings.showGroupedColumn) {\n                    var column = this_3.enableColumnVirtualization ?\n                        this_3.columns.filter(function (c) { return c.field === gCols[parseInt(i.toString(), 10)]; })[0]\n                        : this_3.getColumnByField(gCols[parseInt(i.toString(), 10)]);\n                    if (column) {\n                        column.visible = false;\n                    }\n                    else {\n                        this_3.log('initial_action', { moduleName: 'group', columnName: gCols[parseInt(i.toString(), 10)] });\n                    }\n                }\n            };\n            var this_3 = this;\n            for (var i = 0, len = gCols.length; i < len; i++) {\n                _loop_3(i, len);\n            }\n        }\n        if (!gCols.length) {\n            for (var i = 0; i < sCols.length; i++) {\n                this.sortedColumns.push(sCols[parseInt(i.toString(), 10)].field);\n            }\n        }\n        this.rowTemplateFn = (0,_util__WEBPACK_IMPORTED_MODULE_3__.templateCompiler)(this.rowTemplate);\n        this.emptyRecordTemplateFn = (0,_util__WEBPACK_IMPORTED_MODULE_3__.templateCompiler)(this.emptyRecordTemplate);\n        this.detailTemplateFn = (0,_util__WEBPACK_IMPORTED_MODULE_3__.templateCompiler)(this.detailTemplate);\n        this.editTemplateFn = (0,_util__WEBPACK_IMPORTED_MODULE_3__.templateCompiler)(this.editSettings.template);\n        this.editHeaderTemplateFn = (0,_util__WEBPACK_IMPORTED_MODULE_3__.templateCompiler)(this.editSettings.headerTemplate);\n        this.editFooterTemplateFn = (0,_util__WEBPACK_IMPORTED_MODULE_3__.templateCompiler)(this.editSettings.footerTemplate);\n        this.columnChooserTemplateFn = (0,_util__WEBPACK_IMPORTED_MODULE_3__.templateCompiler)(this.columnChooserSettings.template);\n        this.columnChooserHeaderTemplateFn = (0,_util__WEBPACK_IMPORTED_MODULE_3__.templateCompiler)(this.columnChooserSettings.headerTemplate);\n        this.columnChooserFooterTemplateFn = (0,_util__WEBPACK_IMPORTED_MODULE_3__.templateCompiler)(this.columnChooserSettings.footerTemplate);\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.parentDetails)) {\n            var value = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.parentDetails.parentKeyFieldValue) ? 'undefined' :\n                this.parentDetails.parentKeyFieldValue;\n            this.query.where(this.queryString, 'equal', value, true);\n        }\n        this.initForeignColumn();\n    };\n    Grid.prototype.initForeignColumn = function () {\n        if (this.isForeignKeyEnabled(this.getColumns())) {\n            this.notify(_base_constant__WEBPACK_IMPORTED_MODULE_4__.initForeignKeyColumn, this.getForeignKeyColumns());\n        }\n    };\n    Grid.prototype.enableVerticalRendering = function () {\n        if (this.rowRenderingMode === 'Vertical') {\n            this.element.classList.add('e-row-responsive');\n        }\n        else {\n            this.element.classList.remove('e-row-responsive');\n        }\n    };\n    Grid.prototype.gridRender = function () {\n        var _a;\n        this.updateRTL();\n        if (this.rowRenderingMode === 'Vertical') {\n            this.element.classList.add('e-row-responsive');\n        }\n        if (this.enableHover) {\n            this.element.classList.add('e-gridhover');\n        }\n        if (/^((?!chrome|android).)*safari/i.test(navigator.userAgent) || _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isSafari()) {\n            this.element.classList.add('e-mac-safari');\n        }\n        if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice) {\n            this.element.classList.add('e-device');\n            if (this.adaptiveUIMode === 'Desktop') {\n                this.enableAdaptiveUI = false;\n            }\n        }\n        if (this.adaptiveUIMode === 'Mobile' && !(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice || this.rowRenderingMode === 'Vertical')) {\n            this.enableAdaptiveUI = false;\n        }\n        if (this.rowHeight) {\n            this.element.classList.add('e-grid-min-height');\n        }\n        if (this.cssClass) {\n            if (this.cssClass.indexOf(' ') !== -1) {\n                (_a = this.element.classList).add.apply(_a, this.cssClass.split(' '));\n            }\n            else {\n                this.element.classList.add(this.cssClass);\n            }\n        }\n        // If the below if statement is removed, then drag and drop between grids will not work in firefox browser.\n        if (this.allowRowDragAndDrop && this.rowDropSettings.targetID && _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.info.name === 'mozilla') {\n            this.element.classList.add('e-disableuserselect');\n        }\n        if (this.editSettings.showAddNewRow && (this.enableVirtualization || this.enableInfiniteScrolling)) {\n            this.editSettings.newRowPosition = 'Top';\n        }\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.classList)(this.element, ['e-responsive', 'e-default'], []);\n        var rendererFactory = this.serviceLocator.getService('rendererFactory');\n        this.headerModule = rendererFactory.getRenderer(_enum__WEBPACK_IMPORTED_MODULE_7__.RenderType.Header);\n        this.contentModule = rendererFactory.getRenderer(_enum__WEBPACK_IMPORTED_MODULE_7__.RenderType.Content);\n        this.printModule = new _actions_print__WEBPACK_IMPORTED_MODULE_23__.Print(this, this.scrollModule);\n        this.clipboardModule = new _actions_clipboard__WEBPACK_IMPORTED_MODULE_25__.Clipboard(this, this.serviceLocator);\n        this.renderModule.render();\n        this.eventInitializer();\n        this.createGridPopUpElement();\n        this.widthService.setWidthToColumns();\n        this.updateGridLines();\n        this.applyTextWrap();\n        this.createTooltip(); //for clip mode ellipsis\n        this.enableBoxSelection();\n    };\n    Grid.prototype.dataReady = function () {\n        this.scrollModule.setWidth();\n        this.scrollModule.setHeight();\n        if (this.height !== 'auto') {\n            this.scrollModule.setPadding();\n        }\n    };\n    Grid.prototype.updateRTL = function () {\n        if (this.enableRtl) {\n            this.element.classList.add('e-rtl');\n        }\n        else {\n            this.element.classList.remove('e-rtl');\n        }\n    };\n    Grid.prototype.createGridPopUpElement = function () {\n        var popup = this.createElement('div', { className: 'e-gridpopup' });\n        popup.style.display = 'none';\n        var content = this.createElement('div', { className: _base_string_literals__WEBPACK_IMPORTED_MODULE_28__.content, attrs: { tabIndex: '-1' } });\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.append)([content, this.createElement('div', { className: 'e-uptail e-tail' })], popup);\n        content.appendChild(this.createElement('span'));\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.append)([content, this.createElement('div', { className: 'e-downtail e-tail' })], popup);\n        this.element.appendChild(popup);\n    };\n    Grid.prototype.updateGridLines = function () {\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.classList)(this.element, [], ['e-verticallines', 'e-horizontallines', 'e-hidelines', 'e-bothlines']);\n        switch (this.gridLines) {\n            case 'Horizontal':\n                this.element.classList.add('e-horizontallines');\n                break;\n            case 'Vertical':\n                this.element.classList.add('e-verticallines');\n                break;\n            case 'None':\n                this.element.classList.add('e-hidelines');\n                break;\n            case 'Both':\n                this.element.classList.add('e-bothlines');\n                break;\n        }\n        this.updateResizeLines();\n    };\n    Grid.prototype.updateResizeLines = function () {\n        if (this.allowResizing &&\n            !(this.gridLines === 'Vertical' || this.gridLines === 'Both')) {\n            this.element.classList.add('e-resize-lines');\n        }\n        else {\n            this.element.classList.remove('e-resize-lines');\n        }\n    };\n    /**\n     * The function is used to apply text wrap\n     *\n     * @returns {void}\n     * @hidden\n     */\n    Grid.prototype.applyTextWrap = function () {\n        if (this.allowTextWrap) {\n            var headerRows = [].slice.call(this.element.getElementsByClassName('e-columnheader'));\n            switch (this.textWrapSettings.wrapMode) {\n                case 'Header':\n                    (0,_util__WEBPACK_IMPORTED_MODULE_3__.wrap)(this.element, false);\n                    (0,_util__WEBPACK_IMPORTED_MODULE_3__.wrap)(this.getContent(), false);\n                    (0,_util__WEBPACK_IMPORTED_MODULE_3__.wrap)(headerRows, true);\n                    break;\n                case 'Content':\n                    (0,_util__WEBPACK_IMPORTED_MODULE_3__.wrap)(this.getContent(), true);\n                    (0,_util__WEBPACK_IMPORTED_MODULE_3__.wrap)(this.element, false);\n                    (0,_util__WEBPACK_IMPORTED_MODULE_3__.wrap)(headerRows, false);\n                    break;\n                default:\n                    (0,_util__WEBPACK_IMPORTED_MODULE_3__.wrap)(this.element, true);\n                    (0,_util__WEBPACK_IMPORTED_MODULE_3__.wrap)(this.getContent(), false);\n                    (0,_util__WEBPACK_IMPORTED_MODULE_3__.wrap)(headerRows, false);\n            }\n            if (this.textWrapSettings.wrapMode !== 'Content') {\n                this.notify(_base_constant__WEBPACK_IMPORTED_MODULE_4__.refreshHandlers, {});\n            }\n        }\n    };\n    /**\n     * The function is used to remove text wrap\n     *\n     * @returns {void}\n     * @hidden\n     */\n    Grid.prototype.removeTextWrap = function () {\n        (0,_util__WEBPACK_IMPORTED_MODULE_3__.wrap)(this.element, false);\n        var headerRows = [].slice.call(this.element.getElementsByClassName('e-columnheader'));\n        (0,_util__WEBPACK_IMPORTED_MODULE_3__.wrap)(headerRows, false);\n        (0,_util__WEBPACK_IMPORTED_MODULE_3__.wrap)(this.getContent(), false);\n        if (this.textWrapSettings.wrapMode !== 'Content') {\n            this.notify(_base_constant__WEBPACK_IMPORTED_MODULE_4__.refreshHandlers, {});\n        }\n    };\n    /**\n     * The function is used to add Tooltip to the grid cell that has ellipsiswithtooltip clip mode.\n     *\n     * @returns {void}\n     * @hidden\n     */\n    Grid.prototype.createTooltip = function () {\n        this.toolTipObj = new _syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_2__.Tooltip({\n            opensOn: 'custom',\n            content: '',\n            cssClass: this.cssClass ? this.cssClass : null\n        }, this.element);\n    };\n    /** @hidden\n     * @returns {void}\n     */\n    Grid.prototype.freezeRefresh = function () {\n        if (this.enableVirtualization || this.enableInfiniteScrolling) {\n            this.pageSettings.currentPage = 1;\n        }\n        this.componentRefresh();\n    };\n    Grid.prototype.getTooltipStatus = function (element) {\n        var headerTable = this.getHeaderTable();\n        var headerDivTag = this.enableAdaptiveUI && this.rowRenderingMode === 'Vertical' ? 'e-gridcontent' : 'e-gridheader';\n        var htable = this.createTable(headerTable, headerDivTag, 'header');\n        var ctable = this.createTable(headerTable, headerDivTag, 'content');\n        var table = element.classList.contains('e-headercell') ? htable : ctable;\n        var ele = element.classList.contains('e-headercell') ? 'th' : 'tr';\n        table.querySelector(ele).className = element.className;\n        var targetElement = table.querySelector(ele);\n        targetElement.innerHTML = '';\n        Array.from(element.childNodes).forEach(function (child) {\n            targetElement.appendChild(child.cloneNode(true));\n        });\n        var width = table.querySelector(ele).getBoundingClientRect().width;\n        document.body.removeChild(htable);\n        document.body.removeChild(ctable);\n        if ((width > element.getBoundingClientRect().width && !element.classList.contains('e-editedbatchcell')) ||\n            (this.enableAdaptiveUI && this.rowRenderingMode === 'Vertical' &&\n                width > (element.getBoundingClientRect().width * 0.55) - (this.height !== 'auto' ? 16 : 0))) {\n            // 0.55 - defines the width of adaptive content cell, 16 - defines the scrollbar width\n            return true;\n        }\n        return false;\n    };\n    Grid.prototype.mouseMoveHandler = function (e) {\n        if (this.isEllipsisTooltip()) {\n            var element = (0,_util__WEBPACK_IMPORTED_MODULE_3__.parentsUntil)(e.target, 'e-ellipsistooltip');\n            if (e.type === 'mouseout' && (this.prevElement !== element || element !== (0,_util__WEBPACK_IMPORTED_MODULE_3__.parentsUntil)(e.relatedTarget, 'e-ellipsistooltip'))) {\n                this.toolTipObj.close();\n                this.prevElement = null;\n            }\n            var tagName = e.target.tagName;\n            var elemNames = ['A', 'BUTTON', 'INPUT'];\n            if (element && e.type !== 'mouseout' && !(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice && elemNames.indexOf(tagName) !== -1)) {\n                if (this.getTooltipStatus(element)) {\n                    var col = this.getColumns()[parseInt(element.getAttribute(_base_string_literals__WEBPACK_IMPORTED_MODULE_28__.ariaColIndex), 10) - 1];\n                    var domSetter = col && col.disableHtmlEncode ? 'innerText' : 'innerHTML';\n                    var contentDiv = this.createElement('div');\n                    if (element.getElementsByClassName('e-headertext').length) {\n                        var innerElement = element.getElementsByClassName('e-headertext')[0];\n                        contentDiv[\"\" + domSetter] = this.sanitize(innerElement.innerText);\n                        this.toolTipObj.content = contentDiv;\n                    }\n                    else {\n                        contentDiv[\"\" + domSetter] = this.sanitize(element.innerText);\n                        this.toolTipObj.content = contentDiv;\n                    }\n                    if (this.enableHtmlSanitizer) {\n                        this.toolTipObj.enableHtmlSanitizer = true;\n                    }\n                    if (col && col.disableHtmlEncode) {\n                        this.toolTipObj.enableHtmlParse = false;\n                    }\n                    if (element !== this.prevElement) {\n                        this.toolTipObj['open'](element);\n                    }\n                    this.prevElement = element;\n                }\n            }\n        }\n    };\n    Grid.prototype.isEllipsisTooltip = function () {\n        var cols = this.getColumns();\n        if (this.clipMode === 'EllipsisWithTooltip') {\n            return true;\n        }\n        for (var i = 0; i < cols.length; i++) {\n            if (cols[parseInt(i.toString(), 10)].clipMode === 'EllipsisWithTooltip') {\n                return true;\n            }\n        }\n        return false;\n    };\n    Grid.prototype.scrollHandler = function () {\n        if (this.isEllipsisTooltip()) {\n            this.toolTipObj.close();\n        }\n    };\n    /**\n     * To create table for ellipsiswithtooltip\n     *\n     * @param {Element} table - Defines the table\n     * @param {string} tag - Defines the tag\n     * @param {string} type - Defines the type\n     * @returns {HTMLDivElement} Returns the HTML div ELement\n     * @hidden\n     */\n    Grid.prototype.createTable = function (table, tag, type) {\n        var myTableDiv = this.createElement('div');\n        myTableDiv.className = this.element.className;\n        myTableDiv.style.cssText = 'display: inline-block;visibility:hidden;position:absolute';\n        var mySubDiv = this.createElement('div');\n        mySubDiv.className = tag;\n        var myTable = this.createElement('table');\n        myTable.className = table.className;\n        myTable.style.cssText = 'table-layout: auto;width: auto';\n        var ele = (type === 'header') ? 'th' : 'td';\n        var myTr = this.createElement('tr', { attrs: { role: 'row' } });\n        var mytd = this.createElement(ele);\n        myTr.appendChild(mytd);\n        myTable.appendChild(myTr);\n        mySubDiv.appendChild(myTable);\n        myTableDiv.appendChild(mySubDiv);\n        document.body.appendChild(myTableDiv);\n        return myTableDiv;\n    };\n    Grid.prototype.onKeyPressed = function (e) {\n        if (e.action === 'tab' || e.action === 'shiftTab') {\n            this.toolTipObj.close();\n        }\n    };\n    /**\n     * Binding events to the element while component creation.\n     *\n     * @hidden\n     * @returns {void}\n     */\n    Grid.prototype.wireEvents = function () {\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(this.element, 'click', this.mouseClickHandler, this);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(this.element, 'touchend', this.mouseClickHandler, this);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(this.element, 'focusout', this.focusOutHandler, this);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(this.element, 'dblclick', this.dblClickHandler, this);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(this.element, 'keydown', this.keyPressHandler, this);\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(window, 'resize', this.resetIndentWidth, this);\n        if (this.allowKeyboard) {\n            this.element.tabIndex = this.element.tabIndex === -1 ? 0 : this.element.tabIndex;\n        }\n        this.keyboardModule = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.KeyboardEvents(this.element, {\n            keyAction: this.keyActionHandler.bind(this),\n            keyConfigs: this.keyConfigs,\n            eventName: 'keydown'\n        });\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(this.getContent().firstElementChild, 'scroll', this.scrollHandler, this);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(this.element, 'mouseover', this.mouseMoveHandler, this);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(this.element, 'mouseout', this.mouseMoveHandler, this);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(this.getContent(), 'touchstart', this.tapEvent, this);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(document.body, 'keydown', this.keyDownHandler, this);\n    };\n    /**\n     * Unbinding events from the element while component destroy.\n     *\n     * @hidden\n     * @returns {void}\n     */\n    Grid.prototype.unwireEvents = function () {\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(this.element, 'click', this.mouseClickHandler);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(this.element, 'touchend', this.mouseClickHandler);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(this.element, 'focusout', this.focusOutHandler);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(this.element, 'dblclick', this.dblClickHandler);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(this.getContent().firstElementChild, 'scroll', this.scrollHandler);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(this.element, 'mouseover', this.mouseMoveHandler);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(this.element, 'mouseout', this.mouseMoveHandler);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(this.element, 'keydown', this.keyPressHandler);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(this.getContent(), 'touchstart', this.tapEvent);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(document.body, 'keydown', this.keyDownHandler);\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(window, 'resize', this.resetIndentWidth);\n    };\n    /**\n     * @hidden\n     * @returns {void}\n     */\n    Grid.prototype.addListener = function () {\n        if (this.isDestroyed) {\n            return;\n        }\n        this.on(_base_constant__WEBPACK_IMPORTED_MODULE_4__.dataReady, this.dataReady, this);\n        this.on(_base_constant__WEBPACK_IMPORTED_MODULE_4__.contentReady, this.recalcIndentWidth, this);\n        this.on(_base_constant__WEBPACK_IMPORTED_MODULE_4__.headerRefreshed, this.recalcIndentWidth, this);\n        this.on(_base_constant__WEBPACK_IMPORTED_MODULE_4__.refreshFrozenPosition, this.refreshFrozenPosition, this);\n        this.on(_base_constant__WEBPACK_IMPORTED_MODULE_4__.refreshSplitFrozenColumn, this.refreshSplitFrozenColumn, this);\n        this.dataBoundFunction = this.refreshMediaCol.bind(this);\n        this.addEventListener(_base_constant__WEBPACK_IMPORTED_MODULE_4__.dataBound, this.dataBoundFunction);\n        this.on(_base_constant__WEBPACK_IMPORTED_MODULE_4__.keyPressed, this.onKeyPressed, this);\n    };\n    /**\n     * @hidden\n     * @returns {void}\n     */\n    Grid.prototype.removeListener = function () {\n        if (this.isDestroyed) {\n            return;\n        }\n        this.off(_base_constant__WEBPACK_IMPORTED_MODULE_4__.dataReady, this.dataReady);\n        this.off(_base_constant__WEBPACK_IMPORTED_MODULE_4__.contentReady, this.recalcIndentWidth);\n        this.off(_base_constant__WEBPACK_IMPORTED_MODULE_4__.headerRefreshed, this.recalcIndentWidth);\n        this.on(_base_constant__WEBPACK_IMPORTED_MODULE_4__.refreshFrozenPosition, this.refreshFrozenPosition, this);\n        this.on(_base_constant__WEBPACK_IMPORTED_MODULE_4__.refreshSplitFrozenColumn, this.refreshSplitFrozenColumn, this);\n        this.removeEventListener(_base_constant__WEBPACK_IMPORTED_MODULE_4__.dataBound, this.dataBoundFunction);\n        this.off(_base_constant__WEBPACK_IMPORTED_MODULE_4__.keyPressed, this.onKeyPressed);\n    };\n    /**\n     * Get current visible data of grid.\n     *\n     * @returns {Object[]} Returns the current view records\n     *\n     * @isGenericType true\n     */\n    Grid.prototype.getCurrentViewRecords = function () {\n        if ((0,_util__WEBPACK_IMPORTED_MODULE_3__.isGroupAdaptive)(this)) {\n            return (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.currentViewData.records) ?\n                this.currentViewData : this.currentViewData.records;\n        }\n        if (this.groupSettings.enableLazyLoading) {\n            return this.currentViewData;\n        }\n        return (this.allowGrouping && this.groupSettings.columns.length && this.currentViewData.length\n            && this.currentViewData.records) ? this.currentViewData.records\n            : this.currentViewData;\n    };\n    Grid.prototype.mouseClickHandler = function (e) {\n        if (this.isChildGrid(e) || ((0,_util__WEBPACK_IMPORTED_MODULE_3__.parentsUntil)(e.target, 'e-gridpopup') && e.touches) ||\n            this.element.getElementsByClassName('e-cloneproperties').length || this.checkEdit(e)) {\n            return;\n        }\n        if (((!this.allowRowDragAndDrop && ((0,_util__WEBPACK_IMPORTED_MODULE_3__.parentsUntil)(e.target, _base_string_literals__WEBPACK_IMPORTED_MODULE_28__.gridContent) ||\n            e.target.tagName === 'TD')) || ((0,_util__WEBPACK_IMPORTED_MODULE_3__.parentsUntil)(e.target, 'e-headercell') &&\n            (0,_util__WEBPACK_IMPORTED_MODULE_3__.parentsUntil)(e.target, 'e-headercell').querySelector('.e-checkselectall')) ||\n            (!(this.allowGrouping || this.allowReordering) && (0,_util__WEBPACK_IMPORTED_MODULE_3__.parentsUntil)(e.target, 'e-gridheader'))) &&\n            e.touches) {\n            return;\n        }\n        if ((0,_util__WEBPACK_IMPORTED_MODULE_3__.parentsUntil)(e.target, 'e-gridheader') && this.allowRowDragAndDrop &&\n            !((0,_util__WEBPACK_IMPORTED_MODULE_3__.parentsUntil)(e.target, 'e-filterbarcell')) && (e.target &&\n            ['A', 'BUTTON', 'INPUT'].indexOf(e.target.tagName) === -1)) {\n            e.preventDefault();\n        }\n        var args = this.getRowInfo(e.target);\n        var cancel = 'cancel';\n        args[\"\" + cancel] = false;\n        var isDataRow = false;\n        var tr = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(e.target, 'tr');\n        if (tr && tr.getAttribute('data-uid')) {\n            var rowObj = this.getRowObjectFromUID(tr.getAttribute('data-uid'));\n            isDataRow = rowObj ? rowObj.isDataRow : false;\n        }\n        if (isDataRow) {\n            this.trigger(_base_constant__WEBPACK_IMPORTED_MODULE_4__.recordClick, args);\n        }\n        this.notify(_base_constant__WEBPACK_IMPORTED_MODULE_4__.click, e);\n    };\n    Grid.prototype.checkEdit = function (e) {\n        var tr = (0,_util__WEBPACK_IMPORTED_MODULE_3__.parentsUntil)(e.target, _base_string_literals__WEBPACK_IMPORTED_MODULE_28__.row);\n        var isEdit = this.editSettings.mode !== 'Batch' &&\n            this.isEdit && tr && (tr.classList.contains(_base_string_literals__WEBPACK_IMPORTED_MODULE_28__.editedRow) || (tr.classList.contains(_base_string_literals__WEBPACK_IMPORTED_MODULE_28__.addedRow)) &&\n            !this.editSettings.showAddNewRow);\n        return !(0,_util__WEBPACK_IMPORTED_MODULE_3__.parentsUntil)(e.target, 'e-unboundcelldiv') && (isEdit || ((0,_util__WEBPACK_IMPORTED_MODULE_3__.parentsUntil)(e.target, _base_string_literals__WEBPACK_IMPORTED_MODULE_28__.rowCell) &&\n            (0,_util__WEBPACK_IMPORTED_MODULE_3__.parentsUntil)(e.target, _base_string_literals__WEBPACK_IMPORTED_MODULE_28__.rowCell).classList.contains('e-editedbatchcell')));\n    };\n    Grid.prototype.dblClickHandler = function (e) {\n        var grid = (0,_util__WEBPACK_IMPORTED_MODULE_3__.parentsUntil)(e.target, 'e-grid');\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(grid) || grid.id !== this.element.id || (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(e.target, '.e-unboundcelldiv')) {\n            return;\n        }\n        var dataRow = false;\n        var tr = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(e.target, 'tr');\n        if (tr && tr.getAttribute('data-uid')) {\n            var rowObj = this.getRowObjectFromUID(tr.getAttribute('data-uid'));\n            dataRow = rowObj ? rowObj.isDataRow : false;\n        }\n        var args = this.getRowInfo(e.target);\n        args.target = e.target;\n        if (dataRow) {\n            this.trigger(_base_constant__WEBPACK_IMPORTED_MODULE_4__.recordDoubleClick, args);\n        }\n        this.notify(_base_constant__WEBPACK_IMPORTED_MODULE_4__.dblclick, e);\n    };\n    Grid.prototype.focusOutHandler = function (e) {\n        if (this.isChildGrid(e)) {\n            return;\n        }\n        if (!(0,_util__WEBPACK_IMPORTED_MODULE_3__.parentsUntil)(e.target, 'e-grid')) {\n            this.element.querySelector('.e-gridpopup').style.display = 'None';\n        }\n        var filterClear = this.element.querySelector('.e-cancel:not(.e-hide)');\n        if (filterClear && !filterClear.parentElement.classList.contains('e-tbar-btn')) {\n            filterClear.classList.add('e-hide');\n        }\n        var relatedTarget = e.relatedTarget;\n        var ariaOwns = relatedTarget ? relatedTarget.getAttribute('aria-owns') : null;\n        if ((!relatedTarget || (!(0,_util__WEBPACK_IMPORTED_MODULE_3__.parentsUntil)(relatedTarget, 'e-grid') &&\n            (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(ariaOwns) &&\n                (ariaOwns)) !== e.target.getAttribute('aria-owns')))\n            && !this.keyPress && this.isEdit && !_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice) {\n            if (this.editSettings.mode === 'Batch' && !((((0,_util__WEBPACK_IMPORTED_MODULE_3__.parentsUntil)(relatedTarget, 'e-ddl') || (0,_util__WEBPACK_IMPORTED_MODULE_3__.parentsUntil)(relatedTarget, 'e-ddt')) &&\n                ((0,_util__WEBPACK_IMPORTED_MODULE_3__.parentsUntil)(relatedTarget, 'e-multi-select-list-wrapper') || (0,_util__WEBPACK_IMPORTED_MODULE_3__.parentsUntil)(relatedTarget, 'e-input-filter'))) &&\n                (0,_util__WEBPACK_IMPORTED_MODULE_3__.parentsUntil)(relatedTarget, 'e-input-group')) && ((0,_util__WEBPACK_IMPORTED_MODULE_3__.parentsUntil)(relatedTarget, 'e-uploader') || (!(relatedTarget &&\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)((0,_util__WEBPACK_IMPORTED_MODULE_3__.parentsUntil)(relatedTarget, 'e-input-group'))) && !(0,_util__WEBPACK_IMPORTED_MODULE_3__.parentsUntil)(e.target, 'edit-custom-template')))) {\n                this.editModule.saveCell();\n                this.notify(_base_constant__WEBPACK_IMPORTED_MODULE_4__.editNextValCell, {});\n            }\n            if (this.editSettings.mode === 'Normal' && !this.isWidgetsDestroyed) {\n                this.editModule.editFormValidate();\n            }\n        }\n        if (this.editSettings.showAddNewRow) {\n            this.editModule.isShowAddedRowValidate = false;\n        }\n        this.keyPress = false;\n    };\n    Grid.prototype.isChildGrid = function (e) {\n        var gridElement = (0,_util__WEBPACK_IMPORTED_MODULE_3__.parentsUntil)(e.target, 'e-grid');\n        if ((gridElement && gridElement.id !== this.element.id) || ((0,_util__WEBPACK_IMPORTED_MODULE_3__.parentsUntil)(e.target, 'e-unboundcelldiv') &&\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(gridElement))) {\n            return true;\n        }\n        return false;\n    };\n    /**\n     * @param {Object} persistedData - Defines the persisted data\n     * @returns {void}\n     * @hidden\n     */\n    Grid.prototype.mergePersistGridData = function (persistedData) {\n        var data = this.getLocalData();\n        if (!((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(data) || (data === '')) || !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(persistedData)) {\n            var dataObj = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(persistedData) ? persistedData : JSON.parse(data);\n            var keys = Object.keys(dataObj);\n            this.isProtectedOnChange = true;\n            for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {\n                var key = keys_1[_i];\n                if ((typeof this[\"\" + key] === 'object') && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this[\"\" + key])) {\n                    if (Array.isArray(this[\"\" + key]) && key === 'columns') {\n                        this.setFrozenCount();\n                        (0,_util__WEBPACK_IMPORTED_MODULE_3__.setColumnIndex)(this[\"\" + key]);\n                        this.mergeColumns(dataObj[\"\" + key], this[\"\" + key]);\n                        this.mergedColumns = true;\n                        this[\"\" + key] = dataObj[\"\" + key];\n                    }\n                    else {\n                        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)(this[\"\" + key], dataObj[\"\" + key]);\n                    }\n                }\n                else {\n                    this[\"\" + key] = dataObj[\"\" + key];\n                }\n            }\n            this.isProtectedOnChange = false;\n        }\n    };\n    Grid.prototype.mergeColumns = function (storedColumn, columns) {\n        var storedColumns = storedColumn;\n        var isFrozenGrid = this.isFrozenGrid();\n        var _loop_4 = function (i) {\n            var localCol = columns.filter(function (tCol) { return isFrozenGrid ?\n                tCol.index === storedColumns[parseInt(i.toString(), 10)][\"\" + _base_string_literals__WEBPACK_IMPORTED_MODULE_28__.initialFrozenColumnIndex] :\n                tCol.index === storedColumns[parseInt(i.toString(), 10)].index; })[0];\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(localCol)) {\n                if (isFrozenGrid) {\n                    localCol = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)({}, localCol, {}, true);\n                    localCol.freeze = storedColumns[parseInt(i.toString(), 10)].freeze;\n                }\n                if (localCol.columns && localCol.columns.length) {\n                    this_4.mergeColumns(storedColumns[parseInt(i.toString(), 10)].columns, localCol.columns);\n                    storedColumns[parseInt(i.toString(), 10)] = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)(localCol, storedColumns[parseInt(i.toString(), 10)], {}, true);\n                }\n                else {\n                    storedColumns[parseInt(i.toString(), 10)] = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)(localCol, storedColumns[parseInt(i.toString(), 10)], {}, true);\n                }\n            }\n        };\n        var this_4 = this;\n        for (var i = 0; i < storedColumns.length; i++) {\n            _loop_4(i);\n        }\n    };\n    /**\n     * @hidden\n     * @returns {boolean} Returns the isDetail\n     */\n    Grid.prototype.isDetail = function () {\n        return !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.detailTemplate) || !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.childGrid);\n    };\n    Grid.prototype.isCommandColumn = function (columns) {\n        var _this_1 = this;\n        return columns.some(function (col) {\n            if (col.columns) {\n                return _this_1.isCommandColumn(col.columns);\n            }\n            return !!(col.commands || col.commandsTemplate);\n        });\n    };\n    Grid.prototype.isForeignKeyEnabled = function (columns) {\n        var _this_1 = this;\n        return columns.some(function (col) {\n            if (col.columns) {\n                return _this_1.isForeignKeyEnabled(col.columns);\n            }\n            return !!(col.dataSource && col.foreignKeyValue);\n        });\n    };\n    Grid.prototype.keyPressHandler = function (e) {\n        var presskey = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)(e, { cancel: false });\n        this.trigger('keyPressed', presskey);\n        if (presskey.cancel === true || (this.isEdit && e && (0,_util__WEBPACK_IMPORTED_MODULE_3__.parentsUntil)(e.target, 'e-gridform') &&\n            (0,_util__WEBPACK_IMPORTED_MODULE_3__.parentsUntil)(e.target, 'e-ddl') && e.action === 'open' && e.altKey === true && e.code === 'ArrowDown')) {\n            e.stopImmediatePropagation();\n        }\n    };\n    Grid.prototype.keyDownHandler = function (e) {\n        if (e.altKey) {\n            if (e.keyCode === 74) { //alt j\n                if (this.keyA) { //alt A J\n                    this.notify(_base_constant__WEBPACK_IMPORTED_MODULE_4__.groupCollapse, { target: e.target, collapse: false });\n                    this.keyA = false;\n                }\n                else {\n                    if (this.focusModule && this.focusModule.currentInfo && this.focusModule.currentInfo.element) {\n                        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([this.focusModule.currentInfo.element, this.focusModule.currentInfo.elementToFocus], ['e-focused', 'e-focus']);\n                        this.focusModule.currentInfo.element.tabIndex = -1;\n                    }\n                    if (!this.element.classList.contains('e-childgrid')) {\n                        this.element.focus();\n                    }\n                }\n            }\n            if (e.keyCode === 87) { //alt w\n                var focusModule = this.focusModule;\n                if (focusModule) {\n                    if (!this.currentViewData.length) {\n                        return;\n                    }\n                    focusModule.focusContent();\n                    focusModule.addOutline();\n                }\n            }\n            if (e.keyCode === 65) { //alt A\n                this.keyA = true;\n            }\n            if (e.keyCode === 72 && this.keyA) { //alt A H\n                this.notify(_base_constant__WEBPACK_IMPORTED_MODULE_4__.groupCollapse, { target: e.target, collapse: true });\n                this.keyA = false;\n            }\n        }\n        if (e.keyCode === 13) {\n            this.notify(_base_constant__WEBPACK_IMPORTED_MODULE_4__.enterKeyHandler, e);\n        }\n    };\n    Grid.prototype.keyActionHandler = function (e) {\n        if (this.isChildGrid(e) ||\n            (this.editModule && ((this.editModule.alertDObj && this.editModule.alertDObj.visible) ||\n                (this.editModule.dialogObj && this.editModule.dialogObj.visible))) ||\n            ((this.isEdit && (!this.editSettings.showAddNewRow || (this.editSettings.showAddNewRow &&\n                this.element.querySelector(_base_string_literals__WEBPACK_IMPORTED_MODULE_28__.editedRow)))) && e.action !== 'escape' && e.action !== 'enter'\n                && e.action !== 'shiftEnter' && e.action !== 'tab' && e.action !== 'shiftTab')) {\n            return;\n        }\n        else {\n            this.keyPress = true;\n        }\n        if (this.allowKeyboard) {\n            if (e.action === 'ctrlPlusP') {\n                e.preventDefault();\n                this.print();\n            }\n            this.notify(_base_constant__WEBPACK_IMPORTED_MODULE_4__.keyPressed, e);\n        }\n    };\n    /**\n     * @param {Function[]} modules - Defines the modules\n     * @returns {void}\n     * @hidden\n     */\n    Grid.prototype.setInjectedModules = function (modules) {\n        this.injectedModules = modules;\n    };\n    Grid.prototype.updateColumnObject = function () {\n        (0,_util__WEBPACK_IMPORTED_MODULE_3__.prepareColumns)(this.columns, this.enableColumnVirtualization, this);\n        (0,_util__WEBPACK_IMPORTED_MODULE_3__.setColumnIndex)(this.columns);\n        this.initForeignColumn();\n        this.notify(_base_constant__WEBPACK_IMPORTED_MODULE_4__.autoCol, {});\n    };\n    Grid.prototype.refreshFrozenPosition = function (obj) {\n        if (obj && obj.isModeChg) {\n            this.refreshColumns();\n            this.notify(_base_constant__WEBPACK_IMPORTED_MODULE_4__.refreshResizePosition, {});\n        }\n        else {\n            this.refreshColumns();\n        }\n    };\n    /**\n     * Gets the foreign columns from Grid.\n     *\n     * @returns {Column[]} Returns Foreign key column\n     */\n    Grid.prototype.getForeignKeyColumns = function () {\n        return this.getColumns().filter(function (col) {\n            return col.isForeignColumn();\n        });\n    };\n    /**\n     * @hidden\n     * @returns {number} Returns row height\n     */\n    Grid.prototype.getRowHeight = function () {\n        return this.rowHeight ? this.rowHeight : (0,_util__WEBPACK_IMPORTED_MODULE_3__.getRowHeight)(this.element);\n    };\n    /**\n     * Refreshes the Grid column changes.\n     *\n     * @returns {void}\n     */\n    Grid.prototype.refreshColumns = function () {\n        this.freezeColumnRefresh = true;\n        this.setFrozenCount();\n        this.updateFrozenColumnsWidth();\n        if (this.isFrozenGrid()) {\n            this.isPreventScrollEvent = true;\n        }\n        this.updateColumnObject();\n        this.checkLockColumns(this.getColumns());\n        this.refresh();\n        if (this.isFrozenGrid() && this.enableColumnVirtualization) {\n            var left = this.getContent().querySelector('.e-movablescrollbar').scrollLeft;\n            this.getHeaderContent().querySelector('.' + _base_string_literals__WEBPACK_IMPORTED_MODULE_28__.headerContent).scrollLeft = left;\n            this.getContent().querySelector('.' + _base_string_literals__WEBPACK_IMPORTED_MODULE_28__.content).scrollLeft = left;\n        }\n    };\n    /**\n     * Export Grid data to Excel file(.xlsx).\n     *\n     * @param  {ExcelExportProperties} excelExportProperties - Defines the export properties of the Grid.\n     * @param  {boolean} isMultipleExport - Define to enable multiple export.\n     * @param  {Workbook} workbook - Defines the Workbook if multiple export is enabled.\n     * @param  {boolean} isBlob - If 'isBlob' set to true, then it will be returned as blob data.\n     * @returns {Promise<any>} Returns the excelexport\n     */\n    Grid.prototype.excelExport = function (excelExportProperties, isMultipleExport, \n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    workbook, isBlob) {\n        if (this.exportGrids && this.exportGrids.length) {\n            var gridIds = this.exportGrids.slice();\n            return this.exportMultipleExcelGrids(gridIds, excelExportProperties, isMultipleExport, workbook, isBlob);\n        }\n        else {\n            return this.excelExportModule ?\n                this.excelExportModule.Map(this, excelExportProperties, isMultipleExport, workbook, false, isBlob) : null;\n        }\n    };\n    /**\n     * Export Grid data to CSV file.\n     *\n     * @param  {ExcelExportProperties} excelExportProperties - Defines the export properties of the Grid.\n     * @param  {boolean} isMultipleExport - Define to enable multiple export.\n     * @param  {Workbook} workbook - Defines the Workbook if multiple export is enabled.\n     * @param  {boolean} isBlob - If 'isBlob' set to true, then it will be returned as blob data.\n     * @returns {Promise<any>} Returns csv export\n     */\n    Grid.prototype.csvExport = function (excelExportProperties, \n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    isMultipleExport, workbook, isBlob) {\n        return this.excelExportModule ?\n            this.excelExportModule.Map(this, excelExportProperties, isMultipleExport, workbook, true, isBlob) : null;\n    };\n    /**\n     * Export Grid data to PDF document.\n     *\n     * @param {pdfExportProperties} pdfExportProperties - Defines the export properties of the Grid.\n     * @param {isMultipleExport} isMultipleExport - Define to enable multiple export.\n     * @param {pdfDoc} pdfDoc - Defined the Pdf Document if multiple export is enabled.\n     * @param {boolean} isBlob - If 'isBlob' set to true, then it will be returned as blob data.\n     *\n     * @returns {Promise<any>} Returns pdfexport\n     */\n    Grid.prototype.pdfExport = function (pdfExportProperties, isMultipleExport, pdfDoc, isBlob) {\n        if (this.exportGrids && this.exportGrids.length) {\n            var gridIds = this.exportGrids.slice();\n            return this.exportMultiplePdfGrids(gridIds, pdfExportProperties, isMultipleExport, pdfDoc, isBlob);\n        }\n        else {\n            return this.pdfExportModule ? this.pdfExportModule.Map(this, pdfExportProperties, isMultipleExport, pdfDoc, isBlob) : null;\n        }\n    };\n    Grid.prototype.exportMultiplePdfGrids = function (gridIds, pdfExportProperties, isMultipleExport, \n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    pdfDoc, isBlob) {\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        var _this = this;\n        if (gridIds.length !== 0) {\n            var currentGridId = gridIds.shift();\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            var currentGridInstance = document.getElementById(currentGridId).ej2_instances[0];\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            var exportPromise = currentGridInstance.pdfExportModule ?\n                currentGridInstance.pdfExportModule.Map(currentGridInstance, pdfExportProperties, isMultipleExport, pdfDoc, isBlob)\n                : Promise.resolve();\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            return exportPromise.then(function (exportedGridResults) {\n                isMultipleExport = gridIds.length === 1 ? false : true;\n                return _this.exportMultiplePdfGrids(gridIds, pdfExportProperties, isMultipleExport, exportedGridResults, isBlob);\n            });\n        }\n        return null;\n    };\n    Grid.prototype.exportMultipleExcelGrids = function (gridIds, excelExportProperties, isMultipleExport, \n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    workbook, isBlob) {\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        var _this = this;\n        if (gridIds.length !== 0) {\n            var currentGridId = gridIds.shift();\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            var currentGridInstance = document.getElementById(currentGridId).ej2_instances[0];\n            var exportPromise = currentGridInstance.excelExportModule ?\n                currentGridInstance.excelExportModule.Map(currentGridInstance, excelExportProperties, isMultipleExport, workbook, false, isBlob) : null;\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            return exportPromise.then(function (exportedGridResults) {\n                isMultipleExport = gridIds.length === 1 ? false : true;\n                return _this.exportMultipleExcelGrids(gridIds, excelExportProperties, isMultipleExport, exportedGridResults, isBlob);\n            });\n        }\n        return null;\n    };\n    /**\n     * Groups a column by column name.\n     *\n     * @param  {string} columnName - Defines the column name to group.\n     *\n     * @returns {void}\n     */\n    Grid.prototype.groupColumn = function (columnName) {\n        if (this.groupModule) {\n            this.groupModule.groupColumn(columnName);\n        }\n    };\n    /**\n     * Expands all the grouped rows of the Grid.\n     *\n     * @returns {void}\n     */\n    Grid.prototype.groupExpandAll = function () {\n        if (this.groupModule) {\n            this.groupModule.expandAll();\n        }\n    };\n    /**\n     * Collapses all the grouped rows of the Grid.\n     *\n     * @returns {void}\n     */\n    Grid.prototype.groupCollapseAll = function () {\n        if (this.groupModule) {\n            this.groupModule.collapseAll();\n        }\n    };\n    /**\n     * Expands or collapses grouped rows by target element.\n     *\n     * @param  {Element} target - Defines the target element of the grouped row.\n     * @returns {void}\n     */\n    // public expandCollapseRows(target: Element): void {\n    //     if (this.groupModule) {\n    //         this.groupModule.expandCollapseRows(target);\n    //     }\n    // }\n    /**\n     * Clears all the grouped columns of the Grid.\n     *\n     * @returns {void}\n     */\n    Grid.prototype.clearGrouping = function () {\n        if (this.groupModule) {\n            this.groupModule.clearGrouping();\n        }\n    };\n    /**\n     * Ungroups a column by column name.\n     *\n     * {% codeBlock src='grid/ungroupColumn/index.md' %}{% endcodeBlock %}\n     *\n     * @param  {string} columnName - Defines the column name to ungroup.\n     *\n     * @returns {void}\n     */\n    Grid.prototype.ungroupColumn = function (columnName) {\n        if (this.groupModule) {\n            this.groupModule.ungroupColumn(columnName);\n        }\n    };\n    /**\n     * Column chooser can be displayed on screen by given position(X and Y axis).\n     *\n     * @param {number} x - Defines the X axis.\n     * @param {number} y - Defines the Y axis.\n     *\n     * @returns {void}\n     */\n    Grid.prototype.openColumnChooser = function (x, y) {\n        if (this.columnChooserModule) {\n            this.columnChooserModule.openColumnChooser(x, y);\n        }\n    };\n    Grid.prototype.scrollRefresh = function () {\n        var _this_1 = this;\n        var refresh = function () {\n            _this_1.scrollModule.refresh();\n            _this_1.off(_base_constant__WEBPACK_IMPORTED_MODULE_4__.contentReady, refresh);\n        };\n        this.on(_base_constant__WEBPACK_IMPORTED_MODULE_4__.contentReady, refresh, this);\n    };\n    /**\n     * Collapses a detail row with the given target.\n     *\n     * @param  {Element} target - Defines the expanded element to collapse.\n     * @returns {void}\n     */\n    // public detailCollapse(target: number | Element): void {\n    //     if (this.detailRowModule) {\n    //         this.detailRowModule.collapse(target);\n    //     }\n    // }\n    /**\n     * Collapses all the detail rows of the Grid.\n     *\n     * @returns {void}\n     */\n    Grid.prototype.detailCollapseAll = function () {\n        if (this.detailRowModule) {\n            this.detailRowModule.collapseAll();\n        }\n    };\n    /**\n     * Expands a detail row with the given target.\n     *\n     * @param  {Element} target - Defines the collapsed element to expand.\n     * @returns {void}\n     */\n    // public detailExpand(target: number | Element): void {\n    //     if (this.detailRowModule) {\n    //         this.detailRowModule.expand(target);\n    //     }\n    // }\n    /**\n     * Expands all the detail rows of the Grid.\n     *\n     * @returns {void}\n     */\n    Grid.prototype.detailExpandAll = function () {\n        if (this.detailRowModule) {\n            this.detailRowModule.expandAll();\n        }\n    };\n    /**\n     * Deselects the currently selected cells.\n     *\n     * @returns {void}\n     */\n    Grid.prototype.clearCellSelection = function () {\n        if (this.selectionModule) {\n            this.selectionModule.clearCellSelection();\n        }\n    };\n    /**\n     * Deselects the currently selected rows.\n     *\n     * @returns {void}\n     */\n    Grid.prototype.clearRowSelection = function () {\n        if (this.selectionModule) {\n            this.selectionModule.clearRowSelection();\n        }\n    };\n    /**\n     * Selects a collection of cells by row and column indexes.\n     *\n     * @param  {ISelectedCell[]} rowCellIndexes - Specifies the row and column indexes.\n     *\n     * @returns {void}\n     */\n    Grid.prototype.selectCells = function (rowCellIndexes) {\n        if (this.selectionModule) {\n            this.selectionModule.selectCells(rowCellIndexes);\n        }\n    };\n    /**\n     * Selects a range of rows from start and end row indexes.\n     *\n     * @param  {number} startIndex - Specifies the start row index.\n     * @param  {number} endIndex - Specifies the end row index.\n     *\n     * @returns {void}\n     */\n    Grid.prototype.selectRowsByRange = function (startIndex, endIndex) {\n        if (this.selectionModule) {\n            this.selectionModule.selectRowsByRange(startIndex, endIndex);\n        }\n    };\n    /**\n     * @hidden\n     * @returns {boolean} Returns whether context menu is open or not\n     */\n    Grid.prototype.isContextMenuOpen = function () {\n        return this.contextMenuModule && this.contextMenuModule.isOpen;\n    };\n    /**\n     * @param {Function} module - Defines the module\n     * @returns {boolean} return the injected modules\n     * @hidden\n     */\n    Grid.prototype.ensureModuleInjected = function (module) {\n        return this.getInjectedModules().indexOf(module) >= 0;\n    };\n    /**\n     * Destroys the given template reference.\n     *\n     * @param {string[]} propertyNames - Defines the collection of template name.\n     * @param {any} index - specifies the index\n     *\n     * @returns {void}\n     */\n    // eslint-disable-next-line\n    Grid.prototype.destroyTemplate = function (propertyNames, index) {\n        this.clearTemplate(propertyNames, index);\n    };\n    /**\n     * @param {string | string[]} type - Defines the type\n     * @param {Object} args - Defines the arguments\n     * @returns {void}\n     * @hidden\n     * @private\n     */\n    Grid.prototype.log = function (type, args) {\n        var injectedModules = this.getInjectedModules();\n        var logger = injectedModules.find(function (item) { return item.name === 'Logger'; });\n        if (!logger) {\n            Grid_1.Inject(_actions_logger__WEBPACK_IMPORTED_MODULE_26__.Logger);\n            this.enableLogger = true;\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            this.injectModules();\n        }\n        // eslint-disable-next-line\n        this.loggerModule ? this.loggerModule.log(type, args) : (function () { return 0; })();\n    };\n    /**\n     * @param {Element} element - Defines the element\n     * @returns {void}\n     * @hidden\n     */\n    Grid.prototype.applyBiggerTheme = function (element) {\n        if (this.element.classList.contains('e-bigger')) {\n            element.classList.add('e-bigger');\n        }\n    };\n    /**\n     * @hidden\n     * @returns {Object} Returns the previous row data\n     */\n    Grid.prototype.getPreviousRowData = function () {\n        var previousRowData = this.getRowsObject()[this.getRows().length - 1].data;\n        return previousRowData;\n    };\n    /**\n     * Hides the scrollbar placeholder of Grid content when grid content is not overflown.\n     *\n     * @returns {void}\n     */\n    Grid.prototype.hideScroll = function () {\n        var content = this.getContent().querySelector('.' + _base_string_literals__WEBPACK_IMPORTED_MODULE_28__.content);\n        if (content.scrollHeight <= content.clientHeight) {\n            this.scrollModule.removePadding();\n            content.style.overflowY = 'auto';\n        }\n    };\n    /**\n     * Get row index by primary key or row data.\n     *\n     * @param  {string | Object} value - Defines the primary key value.\n     *\n     * @returns {number} Returns the index\n     */\n    Grid.prototype.getRowIndexByPrimaryKey = function (value) {\n        var pkName = this.getPrimaryKeyFieldNames()[0];\n        value = typeof value === 'object' ? value[\"\" + pkName] : value;\n        var rows = this.getRowsObject();\n        for (var i = 0; i < rows.length; i++) {\n            if (rows[parseInt(i.toString(), 10)].isDetailRow || rows[parseInt(i.toString(), 10)].isCaptionRow) {\n                continue;\n            }\n            var pKvalue = rows[parseInt(i.toString(), 10)].data[\"\" + pkName];\n            if (pkName.split('.').length > 1) {\n                pKvalue = (0,_util__WEBPACK_IMPORTED_MODULE_3__.performComplexDataOperation)(pkName, rows[parseInt(i.toString(), 10)].data);\n            }\n            if (pKvalue === value) {\n                return rows[parseInt(i.toString(), 10)].index;\n            }\n        }\n        return -1;\n    };\n    /**\n     * @param {string} field - Defines the field name\n     * @param {boolean} isForeignKey - Defines the foreign key\n     * @returns {Column} returns the column\n     * @hidden\n     */\n    // Need to have all columns while filtering with ColumnVirtualization.\n    Grid.prototype.grabColumnByFieldFromAllCols = function (field, isForeignKey) {\n        var column;\n        this.columnModel = [];\n        this.updateColumnModel(this.columns);\n        var gCols = this.columnModel;\n        for (var i = 0; i < gCols.length; i++) {\n            if ((!isForeignKey && field === gCols[parseInt(i.toString(), 10)].field) ||\n                (isForeignKey && gCols[parseInt(i.toString(), 10)].isForeignColumn() &&\n                    field === gCols[parseInt(i.toString(), 10)].foreignKeyValue)) {\n                column = gCols[parseInt(i.toString(), 10)];\n                break;\n            }\n        }\n        return column;\n    };\n    /**\n     * @param {string} uid - Defines the uid\n     * @returns {Column} returns the column\n     * @hidden\n     */\n    // Need to have all columns while filtering with ColumnVirtualization.\n    Grid.prototype.grabColumnByUidFromAllCols = function (uid) {\n        var column;\n        this.columnModel = [];\n        this.updateColumnModel(this.columns);\n        var gCols = this.columnModel;\n        for (var i = 0; i < gCols.length; i++) {\n            if (uid === gCols[parseInt(i.toString(), 10)].uid) {\n                column = gCols[parseInt(i.toString(), 10)];\n            }\n        }\n        return column;\n    };\n    /**\n     * Get all filtered records from the Grid and it returns array of objects for the local dataSource, returns a promise object if the Grid has remote data.\n     *\n     * @returns {Object[] | Promise<Object>} Returns the filtered records\n     */\n    Grid.prototype.getFilteredRecords = function () {\n        if ((this.allowFiltering && this.filterSettings.columns.length) || this.searchSettings.key.length) {\n            var query = this.renderModule.data.generateQuery(true);\n            if (this.dataSource && this.renderModule.data.isRemote() && this.dataSource instanceof _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__.DataManager) {\n                return this.renderModule.data.getData(this.dataSource, query);\n            }\n            else {\n                if (this.dataSource instanceof _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__.DataManager) {\n                    return this.dataSource.executeLocal(query);\n                }\n                else {\n                    return new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__.DataManager(this.dataSource, query).executeLocal(query);\n                }\n            }\n        }\n        return [];\n    };\n    Grid.prototype.getUserAgent = function () {\n        var userAgent = _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.userAgent.toLowerCase();\n        return /iphone|ipod|ipad|macintosh/.test(userAgent);\n    };\n    /**\n     * @param {TouchEventArgs} e - Defines the TouchEventArgs\n     * @returns {void}\n     * @hidden\n     */\n    // Need to have all columns while filtering with ColumnVirtualization.\n    // eslint-disable-next-line\n    Grid.prototype.tapEvent = function (e) {\n        if (this.getUserAgent()) {\n            if (!_util__WEBPACK_IMPORTED_MODULE_3__.Global.timer) {\n                _util__WEBPACK_IMPORTED_MODULE_3__.Global.timer = setTimeout(function () {\n                    _util__WEBPACK_IMPORTED_MODULE_3__.Global.timer = null;\n                }, 300);\n            }\n            else {\n                clearTimeout(_util__WEBPACK_IMPORTED_MODULE_3__.Global.timer);\n                _util__WEBPACK_IMPORTED_MODULE_3__.Global.timer = null;\n                this.dblClickHandler(e);\n                this.notify(_base_constant__WEBPACK_IMPORTED_MODULE_4__.doubleTap, e);\n            }\n        }\n    };\n    /**\n     * @param {string} prefix - specifies the prefix\n     * @returns {string} returns the row uid\n     * @hidden\n     */\n    Grid.prototype.getRowUid = function (prefix) {\n        return \"\" + prefix + this.rowUid++;\n    };\n    /**\n     * @param {string} uid - specifies the uid\n     * @returns {Element} returns the element\n     * @hidden\n     */\n    Grid.prototype.getRowElementByUID = function (uid) {\n        var rowEle;\n        var rows = [];\n        var cntRows = [].slice.call(this.getContent().querySelector(_base_string_literals__WEBPACK_IMPORTED_MODULE_28__.tbody).children);\n        if (this.frozenRows) {\n            rows = [].slice.call(this.getHeaderContent().querySelector(_base_string_literals__WEBPACK_IMPORTED_MODULE_28__.tbody).children);\n            rows = rows.concat(cntRows);\n        }\n        else {\n            rows = cntRows;\n        }\n        for (var _i = 0, rows_2 = rows; _i < rows_2.length; _i++) {\n            var row = rows_2[_i];\n            if (row.getAttribute('data-uid') === uid) {\n                rowEle = row;\n                break;\n            }\n        }\n        return rowEle;\n    };\n    /**\n     * Gets the hidden columns from the Grid.\n     *\n     * @returns {Column[]} Returns the Column\n     */\n    Grid.prototype.getHiddenColumns = function () {\n        var cols = [];\n        for (var _i = 0, _a = this.columnModel; _i < _a.length; _i++) {\n            var col = _a[_i];\n            if (col.visible === false) {\n                cols.push(col);\n            }\n        }\n        return cols;\n    };\n    /**\n     * Calculates the page size by parent element height\n     *\n     * @param {number | string } containerHeight - specifies the container height\n     * @returns {number} returns the page size\n     */\n    Grid.prototype.calculatePageSizeByParentHeight = function (containerHeight) {\n        if (this.allowPaging) {\n            if ((this.allowTextWrap && this.textWrapSettings.wrapMode === 'Header') || (!this.allowTextWrap)) {\n                var pagesize = 0;\n                if (containerHeight.indexOf('%') !== -1) {\n                    containerHeight = parseInt(containerHeight, 10) / 100 * this.element.clientHeight;\n                }\n                var nonContentHeight = this.getNoncontentHeight() + this.getRowHeight();\n                if (containerHeight > nonContentHeight) {\n                    var contentHeight = 0;\n                    contentHeight = containerHeight - this.getNoncontentHeight();\n                    pagesize = (contentHeight / this.getRowHeight());\n                }\n                if (pagesize > 0) {\n                    return Math.floor(pagesize);\n                }\n            }\n        }\n        return 0;\n    };\n    Grid.prototype.getNoncontentHeight = function () {\n        var height = 0;\n        if (this.getHeaderContent() && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.getHeaderContent().clientHeight)) {\n            height += this.getHeaderContent().clientHeight;\n        }\n        if (this.toolbar && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.element.querySelector('.e-toolbar').clientHeight)) {\n            height += this.element.querySelector('.e-toolbar').clientHeight;\n        }\n        if (this.allowPaging && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.element.querySelector('.e-gridpager').clientHeight)) {\n            height += this.element.querySelector('.e-gridpager').clientHeight;\n        }\n        if (this.showColumnChooser && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.element.querySelector('.e-columnheader').clientHeight)) {\n            height += this.element.querySelector('.e-columnheader').clientHeight;\n        }\n        if (this.allowGrouping && this.groupSettings.showDropArea && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.element.querySelector('.e-groupdroparea').clientHeight)) {\n            height += this.element.querySelector('.e-groupdroparea').clientHeight;\n        }\n        if (this.aggregates.length > 0 && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.element.querySelector('.e-summaryrow').clientHeight)) {\n            for (var i = 0; i < this.element.getElementsByClassName('e-summaryrow').length; i++) {\n                height += this.element.getElementsByClassName('e-summaryrow')[parseInt(i.toString(), 10)].clientHeight;\n            }\n        }\n        return height;\n    };\n    /**\n     *To perform aggregate operation on a column.\n     *\n     * @param  {AggregateColumnModel} summaryCol - Pass Aggregate Column details.\n     * @param  {Object} summaryData - Pass JSON Array for which its field values to be calculated.\n     *\n     * @returns {number} returns the summary values\n     */\n    Grid.prototype.getSummaryValues = function (summaryCol, summaryData) {\n        return _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__.DataUtil.aggregates[summaryCol.type.toLowerCase()](summaryData, summaryCol.field);\n    };\n    /**\n     * Sends a Post request to export Grid to Excel file in server side.\n     *\n     * @param  {string} url - Pass Url for server side excel export action.\n     *\n     * @param  {ExportHeaders} headers - The headers to include in the export request.\n     *\n     * @returns {void}\n     */\n    Grid.prototype.serverExcelExport = function (url, headers) {\n        this.isExcel = true;\n        this.exportGrid(url, headers);\n    };\n    /**\n     * Sends a Post request to export Grid to Pdf file in server side.\n     *\n     * @param  {string} url - Pass Url for server side pdf export action.\n     *\n     * @param  {ExportHeaders} headers - The headers to include in the export request.\n     *\n     * @returns {void}\n     */\n    Grid.prototype.serverPdfExport = function (url, headers) {\n        this.isExcel = false;\n        this.exportGrid(url, headers);\n    };\n    /**\n     * Sends a Post request to export Grid to CSV file in server side.\n     *\n     * @param  {string} url - Pass Url for server side csv export action.\n     *\n     * @param  {ExportHeaders} headers - The headers to include in the export request.\n     *\n     * @returns {void}\n     */\n    Grid.prototype.serverCsvExport = function (url, headers) {\n        this.isExcel = true;\n        this.exportGrid(url, headers);\n    };\n    /**\n     * @param {string} url - Defines exporting url\n     * @param {ExportHeaders} headers - The optional headers for the export request.\n     * @returns {void}\n     * @hidden\n     */\n    Grid.prototype.exportGrid = function (url, headers) {\n        var _this_1 = this;\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        var grid = this;\n        var query = grid.getDataModule().generateQuery(true);\n        var state = new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__.UrlAdaptor().processQuery(new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__.DataManager({ url: '' }), query);\n        var queries = JSON.parse(state.data);\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        var gridModel = JSON.parse(this.addOnPersist(['allowGrouping', 'allowPaging', 'pageSettings', 'sortSettings', 'allowPdfExport', 'allowExcelExport', 'aggregates',\n            'filterSettings', 'groupSettings', 'columns', 'locale', 'searchSettings']));\n        var include = ['field', 'headerText', 'type', 'format', 'visible', 'foreignKeyValue', 'foreignKeyField',\n            'template', 'index', 'width', 'textAlign', 'headerTextAlign', 'columns'];\n        gridModel.filterSettings.columns = queries.where;\n        gridModel.searchSettings.fields = queries.search && queries.search[0]['fields'] || [];\n        gridModel.sortSettings.columns = queries.sorted;\n        gridModel.columns = this.setHeaderText(gridModel.columns, include);\n        var form = this.createElement('form', { id: 'ExportForm' });\n        form.style.display = 'none';\n        var gridInput = this.createElement('input', { id: 'gridInput', attrs: { name: 'gridModel' } });\n        gridInput.value = JSON.stringify(gridModel);\n        form.method = 'POST';\n        form.action = url;\n        form.appendChild(gridInput);\n        if (headers && headers.headers && Array.isArray(headers.headers)) {\n            headers.headers.forEach(function (header) {\n                Object.keys(header).forEach(function (key) {\n                    var value = typeof header[\"\" + key] === 'string' ? header[\"\" + key] : JSON.stringify(header[\"\" + key]);\n                    var headerInput = _this_1.createElement('input', { attrs: { name: key, value: value, type: 'hidden' } });\n                    form.appendChild(headerInput);\n                });\n            });\n        }\n        document.body.appendChild(form);\n        form.submit();\n        form.remove();\n    };\n    /**\n     * @param {Column[]} columns - Defines array of columns\n     * @param {string[]} include - Defines array of sting\n     * @returns {Column[]} returns array of columns\n     * @hidden\n     */\n    Grid.prototype.setHeaderText = function (columns, include) {\n        for (var i = 0; i < columns.length; i++) {\n            var column = this.getColumnByUid(columns[parseInt(i.toString(), 10)].uid);\n            columns[parseInt(i.toString(), 10)].headerText = column.headerText;\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(column.template)) {\n                columns[parseInt(i.toString(), 10)].template = 'true';\n            }\n            if (columns[parseInt(i.toString(), 10)].format) {\n                columns[parseInt(i.toString(), 10)].format = (0,_util__WEBPACK_IMPORTED_MODULE_3__.getNumberFormat)(this.getFormat(columns[parseInt(i.toString(), 10)].format), columns[parseInt(i.toString(), 10)].type, this.isExcel, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.defaultCurrencyCode);\n            }\n            if (columns[parseInt(i.toString(), 10)].columns) {\n                this.setHeaderText(columns[parseInt(i.toString(), 10)].columns, include);\n            }\n            var keys = Object.keys(columns[parseInt(i.toString(), 10)]);\n            for (var j = 0; j < keys.length; j++) {\n                if (include.indexOf(keys[parseInt(j.toString(), 10)]) < 0) {\n                    delete columns[parseInt(i.toString(), 10)][keys[parseInt(j.toString(), 10)]];\n                }\n            }\n        }\n        return columns;\n    };\n    Grid.prototype.getFormat = function (format) {\n        return typeof (format) === 'object' ? !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(format.format) ?\n            format.format : format.skeleton : format;\n    };\n    /**\n     * @hidden\n     * @returns {boolean} returns the isCollapseStateEnabled\n     */\n    Grid.prototype.isCollapseStateEnabled = function () {\n        var isExpanded = 'isExpanded';\n        return this[\"\" + isExpanded] === false;\n    };\n    /**\n     * @param {number} key - Defines the primary key value.\n     * @param {Object} rowData - Defines the rowData\n     * @returns {void}\n     */\n    Grid.prototype.updateRowValue = function (key, rowData) {\n        var args = {\n            requestType: 'save', data: rowData\n        };\n        this.showSpinner();\n        this.notify(_base_constant__WEBPACK_IMPORTED_MODULE_4__.updateData, args);\n        this.refresh();\n    };\n    /**\n     * @hidden\n     * @returns {void}\n     */\n    Grid.prototype.setForeignKeyData = function () {\n        this.dataBind();\n        var colpending = this.getDataModule().getForeignKeyDataState();\n        if (colpending.isPending) {\n            this.getDataModule().setForeignKeyDataState({});\n            colpending.resolver();\n        }\n        else {\n            this.getDataModule().setForeignKeyDataState({ isDataChanged: false });\n            if (this.contentModule || this.headerModule) {\n                this.renderModule.render();\n            }\n        }\n    };\n    /**\n     * @param {string} field - specifies the field\n     * @returns {void}\n     * @hidden\n     */\n    Grid.prototype.resetFilterDlgPosition = function (field) {\n        var header = this.getColumnHeaderByField(field);\n        if (header) {\n            var target = header.querySelector('.e-filtermenudiv');\n            var filterDlg = this.element.querySelector('.e-filter-popup');\n            if (target) {\n                var gClient = this.element.getBoundingClientRect();\n                var fClient = target.getBoundingClientRect();\n                if (filterDlg) {\n                    if ((filterDlg.offsetWidth + fClient.right) > gClient.right) {\n                        filterDlg.style.left = ((fClient.right - filterDlg.offsetWidth) - gClient.left).toString() + 'px';\n                    }\n                    else {\n                        filterDlg.style.left = (fClient.right - gClient.left).toString() + 'px';\n                    }\n                }\n            }\n        }\n    };\n    /**\n     * @param {any} callBack - specifies the callBack method\n     * @returns {void}\n     * @hidden\n     */\n    // eslint-disable-next-line\n    Grid.prototype.renderTemplates = function (callBack) {\n        var isReactChild = this.parentDetails && this.parentDetails.parentInstObj && this.parentDetails.parentInstObj.isReact;\n        var isReactPrintGrid = this.printGridParent && this.printGridParent.isReact;\n        if ((isReactChild || isReactPrintGrid) && this['portals']) {\n            var parentInstObj = isReactPrintGrid ? this.printGridParent : this.parentDetails.parentInstObj;\n            parentInstObj['portals'] = parentInstObj['portals'].concat(this['portals']);\n            parentInstObj.renderTemplates(callBack);\n            this['portals'] = undefined;\n        }\n        else {\n            var portals = 'portals';\n            this.notify('reactTemplateRender', this[\"\" + portals]);\n            this.renderReactTemplates(callBack);\n        }\n    };\n    /**\n     * Apply the changes to the Grid without refreshing the rows.\n     *\n     * @param  {BatchChanges} changes - Defines changes to be updated.\n     * @returns {void}\n     */\n    Grid.prototype.batchUpdate = function (changes) {\n        this.processRowChanges(changes);\n    };\n    /**\n     * Apply the changes to the Grid in one batch after 50ms without refreshing the rows.\n     *\n     * @param  {BatchChanges} changes - Defines changes to be updated.\n     * @returns {void}\n     */\n    Grid.prototype.batchAsyncUpdate = function (changes) {\n        this.processBulkRowChanges(changes);\n    };\n    Grid.prototype.processBulkRowChanges = function (changes) {\n        var _this_1 = this;\n        if (!this.dataToBeUpdated) {\n            this.dataToBeUpdated = Object.assign({ addedRecords: [], changedRecords: [], deletedRecords: [] }, changes);\n            setTimeout(function () {\n                _this_1.processRowChanges(_this_1.dataToBeUpdated);\n                _this_1.dataToBeUpdated = null;\n            }, this.asyncTimeOut);\n        }\n        else {\n            var loopstring = [_base_string_literals__WEBPACK_IMPORTED_MODULE_28__.addedRecords, _base_string_literals__WEBPACK_IMPORTED_MODULE_28__.changedRecords, _base_string_literals__WEBPACK_IMPORTED_MODULE_28__.deletedRecords];\n            var keyField = this.getPrimaryKeyFieldNames()[0];\n            for (var i = 0; i < loopstring.length; i++) {\n                if (changes[loopstring[parseInt(i.toString(), 10)]]) {\n                    (0,_util__WEBPACK_IMPORTED_MODULE_3__.compareChanges)(this, changes, loopstring[parseInt(i.toString(), 10)], keyField);\n                }\n            }\n        }\n    };\n    Grid.prototype.processRowChanges = function (changes) {\n        var _this_1 = this;\n        var keyField = this.getPrimaryKeyFieldNames()[0];\n        changes = Object.assign({ addedRecords: [], changedRecords: [], deletedRecords: [] }, changes);\n        var promise = this.getDataModule().saveChanges(changes, keyField, {}, this.getDataModule().generateQuery().requiresCount());\n        if (this.getDataModule().isRemote()) {\n            promise.then(function () {\n                _this_1.setNewData();\n            });\n        }\n        else {\n            this.setNewData();\n        }\n    };\n    Grid.prototype.setNewData = function () {\n        var _this_1 = this;\n        var oldValues = JSON.parse(JSON.stringify(this.getCurrentViewRecords()));\n        var getData = this.getDataModule().getData({}, this.getDataModule().generateQuery().requiresCount());\n        getData.then(function (e) {\n            _this_1.bulkRefresh(e.result, oldValues, e.count);\n        });\n    };\n    Grid.prototype.deleteRowElement = function (row) {\n        var tr = this.getRowElementByUID(row.uid);\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.remove)(tr);\n    };\n    Grid.prototype.bulkRefresh = function (result, oldValues, count) {\n        var _this_1 = this;\n        var rowObj = this.getRowsObject();\n        var keyField = this.getPrimaryKeyFieldNames()[0];\n        var _loop_5 = function (i) {\n            if (!result.filter(function (e) { return e[\"\" + keyField] === rowObj[parseInt(i.toString(), 10)].data[\"\" + keyField]; }).length) {\n                this_5.deleteRowElement(rowObj[parseInt(i.toString(), 10)]);\n                rowObj.splice(i, 1);\n                i--;\n            }\n            out_i_1 = i;\n        };\n        var this_5 = this, out_i_1;\n        for (var i = 0; i < rowObj.length; i++) {\n            _loop_5(i);\n            i = out_i_1;\n        }\n        var _loop_6 = function (i) {\n            var isRowExist;\n            oldValues.filter(function (e) {\n                if (e[\"\" + keyField] === result[parseInt(i.toString(), 10)][\"\" + keyField]) {\n                    if (e !== result[parseInt(i.toString(), 10)]) {\n                        _this_1.setRowData(result[parseInt(i.toString(), 10)][\"\" + keyField], result[parseInt(i.toString(), 10)]);\n                    }\n                    isRowExist = true;\n                }\n            });\n            if (!isRowExist) {\n                this_6.renderRowElement(result[parseInt(i.toString(), 10)], i);\n            }\n        };\n        var this_6 = this;\n        for (var i = 0; i < result.length; i++) {\n            _loop_6(i);\n        }\n        this.currentViewData = result;\n        var rows = [].slice.call(this.getContentTable().getElementsByClassName(_base_string_literals__WEBPACK_IMPORTED_MODULE_28__.row));\n        (0,_util__WEBPACK_IMPORTED_MODULE_3__.resetRowIndex)(this, this.getRowsObject(), rows);\n        (0,_util__WEBPACK_IMPORTED_MODULE_3__.setRowElements)(this);\n        if (this.allowPaging) {\n            this.notify(_base_constant__WEBPACK_IMPORTED_MODULE_4__.inBoundModelChanged, { module: 'pager', properties: { totalRecordsCount: count } });\n        }\n    };\n    Grid.prototype.renderRowElement = function (data, index) {\n        var row = new _renderer_row_renderer__WEBPACK_IMPORTED_MODULE_8__.RowRenderer(this.serviceLocator, null, this);\n        var model = new _services_row_model_generator__WEBPACK_IMPORTED_MODULE_27__.RowModelGenerator(this);\n        var modelData = model.generateRows([data]);\n        var tr = row.render(modelData[0], this.getColumns());\n        this.addRowObject(modelData[0], index);\n        var tbody = this.getContentTable().querySelector(_base_string_literals__WEBPACK_IMPORTED_MODULE_28__.tbody);\n        if (tbody.querySelector('.e-emptyrow')) {\n            var emptyRow = tbody.querySelector('.e-emptyrow');\n            emptyRow.parentNode.removeChild(emptyRow);\n            if (this.frozenRows && this.element.querySelector('.e-frozenrow-empty')) {\n                this.element.querySelector('.e-frozenrow-empty').classList.remove('e-frozenrow-empty');\n            }\n        }\n        if (this.frozenRows && index < this.frozenRows) {\n            tbody = this.getHeaderContent().querySelector(_base_string_literals__WEBPACK_IMPORTED_MODULE_28__.tbody);\n        }\n        else {\n            tbody = this.getContent().querySelector(_base_string_literals__WEBPACK_IMPORTED_MODULE_28__.tbody);\n        }\n        tbody = this.getContent().querySelector(_base_string_literals__WEBPACK_IMPORTED_MODULE_28__.tbody);\n        tbody.appendChild(tr);\n    };\n    Grid.prototype.addRowObject = function (row, index) {\n        this.getRowsObject().splice(index, 1, row);\n    };\n    /**\n     * @hidden\n     * @returns {void}\n     */\n    Grid.prototype.updateVisibleExpandCollapseRows = function () {\n        var rows = this.getRowsObject();\n        for (var i = 0, len = rows.length; i < len; i++) {\n            if ((rows[parseInt(i.toString(), 10)].isDataRow || rows[parseInt(i.toString(), 10)].isAggregateRow)\n                && this.getRowElementByUID(rows[parseInt(i.toString(), 10)].uid)\n                && this.getRowElementByUID(rows[parseInt(i.toString(), 10)].uid).style.display === 'none') {\n                rows[parseInt(i.toString(), 10)].visible = false;\n            }\n            else {\n                rows[parseInt(i.toString(), 10)].visible = true;\n            }\n        }\n    };\n    /**\n     * Method to sanitize any suspected untrusted strings and scripts before rendering them.\n     *\n     * @param {string} value - Specifies the html value to sanitize\n     * @returns {string} Returns the sanitized html string\n     * @hidden\n     */\n    Grid.prototype.sanitize = function (value) {\n        if (this.enableHtmlSanitizer) {\n            return _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.SanitizeHtmlHelper.sanitize(value);\n        }\n        return value;\n    };\n    /**\n     * @param {string | number} height - specifies the height\n     * @returns {number | string} - specifies the height number\n     * @hidden\n     */\n    Grid.prototype.getHeight = function (height) {\n        if (!Number.isInteger(height) && height.indexOf('%') !== -1) {\n            height = parseInt(height, 10) / 100 * this.element.clientHeight;\n        }\n        else if (!Number.isInteger(height) && this.height !== 'auto') {\n            height = parseInt(height, 10);\n        }\n        else {\n            height = this.height;\n        }\n        return height;\n    };\n    /**\n     * @hidden\n     * @returns {Element} - returns frozen right content\n     * @deprecated This method is deprecated. Use `getContent()` method instead.\n     */\n    Grid.prototype.getFrozenRightContent = function () {\n        return this.contentModule.getPanel();\n    };\n    /**\n     * @hidden\n     * @returns {Element} - returns frozen right header\n     * @deprecated This method is deprecated. Use `getHeaderContent()` method instead.\n     */\n    Grid.prototype.getFrozenRightHeader = function () {\n        return this.headerModule.getPanel();\n    };\n    /**\n     * @hidden\n     * @returns {Element} - returns movable header tbody\n     * @deprecated This method is deprecated. Use `getHeaderContent().querySelector('tbody')` method instead.\n     */\n    Grid.prototype.getMovableHeaderTbody = function () {\n        return this.getHeaderContent().querySelector(_base_string_literals__WEBPACK_IMPORTED_MODULE_28__.tbody);\n    };\n    /**\n     * @hidden\n     * @returns {Element} - returns movable content tbody\n     * @deprecated This method is deprecated. Use `getContent().querySelector('tbody')` method instead.\n     */\n    Grid.prototype.getMovableContentTbody = function () {\n        return this.getContent().querySelector(_base_string_literals__WEBPACK_IMPORTED_MODULE_28__.tbody);\n    };\n    /**\n     * @hidden\n     * @returns {Element} - returns frozen header tbody\n     * @deprecated This method is deprecated. Use `getHeaderContent().querySelector('tbody')` method instead.\n     */\n    Grid.prototype.getFrozenHeaderTbody = function () {\n        return this.getHeaderContent().querySelector(_base_string_literals__WEBPACK_IMPORTED_MODULE_28__.tbody);\n    };\n    /**\n     * @hidden\n     * @returns {Element} - returns frozen left content tbody\n     * @deprecated This method is deprecated. Use `getContent().querySelector('tbody')` method instead.\n     */\n    Grid.prototype.getFrozenLeftContentTbody = function () {\n        return this.getContent().querySelector(_base_string_literals__WEBPACK_IMPORTED_MODULE_28__.tbody);\n    };\n    /**\n     * @hidden\n     * @returns {Element} - returns frozen right header tbody\n     * @deprecated This method is deprecated. Use `getHeaderContent().querySelector('tbody')` method instead.\n     */\n    Grid.prototype.getFrozenRightHeaderTbody = function () {\n        return this.getHeaderContent().querySelector(_base_string_literals__WEBPACK_IMPORTED_MODULE_28__.tbody);\n    };\n    /**\n     * @returns {Element} returns frozen right content tbody\n     * @deprecated This method is deprecated. Use `getContent().querySelector('tbody')` method instead.\n     * @hidden\n     */\n    Grid.prototype.getFrozenRightContentTbody = function () {\n        return this.getContent().querySelector(_base_string_literals__WEBPACK_IMPORTED_MODULE_28__.tbody);\n    };\n    /**\n     * @param {boolean} isCustom - Defines custom filter dialog open\n     * @returns {void}\n     * @hidden\n     */\n    Grid.prototype.showResponsiveCustomFilter = function (isCustom) {\n        if (this.filterModule) {\n            this.filterModule.showCustomFilter(isCustom || this.rowRenderingMode === 'Vertical');\n        }\n    };\n    /**\n     * @param {boolean} isCustom - Defines custom sort dialog open\n     * @returns {void}\n     * @hidden\n     */\n    Grid.prototype.showResponsiveCustomSort = function (isCustom) {\n        if (this.sortModule) {\n            this.sortModule.showCustomSort(isCustom || this.rowRenderingMode === 'Vertical');\n        }\n    };\n    /**\n     * @param {boolean} isCustom - Defines custom column chooser dialog open\n     * @returns {void}\n     * @hidden\n     */\n    Grid.prototype.showResponsiveCustomColumnChooser = function (isCustom) {\n        if (this.columnChooserModule) {\n            this.columnChooserModule.showCustomColumnChooser(isCustom || this.rowRenderingMode === 'Vertical');\n        }\n    };\n    /**\n     * To manually show the vertical row mode filter dialog\n     *\n     * @returns {void}\n     */\n    Grid.prototype.showAdaptiveFilterDialog = function () {\n        if (this.enableAdaptiveUI) {\n            this.showResponsiveCustomFilter(true);\n        }\n    };\n    /**\n     * To manually show the vertical row sort filter dialog\n     *\n     * @returns {void}\n     */\n    Grid.prototype.showAdaptiveSortDialog = function () {\n        if (this.enableAdaptiveUI) {\n            this.showResponsiveCustomSort(true);\n        }\n    };\n    /**\n     * @param {boolean} isColVirtualization - Defines column virtualization\n     * @returns {Column[]} returns array of column models\n     * @hidden\n     */\n    Grid.prototype.getCurrentVisibleColumns = function (isColVirtualization) {\n        var cols = [];\n        var gridCols = isColVirtualization ? this.getColumns() : this.columnModel;\n        for (var _i = 0, gridCols_1 = gridCols; _i < gridCols_1.length; _i++) {\n            var col = gridCols_1[_i];\n            if (col.visible) {\n                cols.push(col);\n            }\n        }\n        return cols;\n    };\n    Grid.prototype.enableInfiniteAggrgate = function () {\n        if (this.enableInfiniteScrolling && this.groupSettings.columns.length && !this.groupSettings.disablePageWiseAggregates\n            && !this.groupSettings.enableLazyLoading) {\n            this.setProperties({ groupSettings: { disablePageWiseAggregates: true } }, true);\n        }\n    };\n    var Grid_1;\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)([])\n    ], Grid.prototype, \"currentViewData\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)()\n    ], Grid.prototype, \"parentDetails\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)()\n    ], Grid.prototype, \"showHider\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)([])\n    ], Grid.prototype, \"columns\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(true)\n    ], Grid.prototype, \"enableAltRow\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(true)\n    ], Grid.prototype, \"enableHover\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], Grid.prototype, \"enableAutoFill\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(true)\n    ], Grid.prototype, \"allowKeyboard\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], Grid.prototype, \"enableStickyHeader\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], Grid.prototype, \"enableHtmlSanitizer\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], Grid.prototype, \"allowTextWrap\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({}, TextWrapSettings)\n    ], Grid.prototype, \"textWrapSettings\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({}, ResizeSettings)\n    ], Grid.prototype, \"resizeSettings\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], Grid.prototype, \"allowPaging\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({}, _models_page_settings__WEBPACK_IMPORTED_MODULE_17__.PageSettings)\n    ], Grid.prototype, \"pageSettings\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({}, LoadingIndicator)\n    ], Grid.prototype, \"loadingIndicator\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(true)\n    ], Grid.prototype, \"enableVirtualMaskRow\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], Grid.prototype, \"enableVirtualization\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], Grid.prototype, \"enableColumnVirtualization\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], Grid.prototype, \"enableInfiniteScrolling\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({}, SearchSettings)\n    ], Grid.prototype, \"searchSettings\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], Grid.prototype, \"allowSorting\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('Ellipsis')\n    ], Grid.prototype, \"clipMode\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(true)\n    ], Grid.prototype, \"allowMultiSorting\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], Grid.prototype, \"allowExcelExport\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], Grid.prototype, \"allowPdfExport\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({}, SortSettings)\n    ], Grid.prototype, \"sortSettings\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({}, InfiniteScrollSettings)\n    ], Grid.prototype, \"infiniteScrollSettings\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(true)\n    ], Grid.prototype, \"allowSelection\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(-1)\n    ], Grid.prototype, \"selectedRowIndex\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({}, SelectionSettings)\n    ], Grid.prototype, \"selectionSettings\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], Grid.prototype, \"allowFiltering\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('Horizontal')\n    ], Grid.prototype, \"rowRenderingMode\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], Grid.prototype, \"enableAdaptiveUI\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('Both')\n    ], Grid.prototype, \"adaptiveUIMode\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], Grid.prototype, \"allowReordering\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], Grid.prototype, \"allowResizing\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], Grid.prototype, \"allowRowDragAndDrop\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({}, RowDropSettings)\n    ], Grid.prototype, \"rowDropSettings\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({}, FilterSettings)\n    ], Grid.prototype, \"filterSettings\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], Grid.prototype, \"allowGrouping\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], Grid.prototype, \"enableImmutableMode\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], Grid.prototype, \"showColumnMenu\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], Grid.prototype, \"autoFit\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({}, GroupSettings)\n    ], Grid.prototype, \"groupSettings\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({}, EditSettings)\n    ], Grid.prototype, \"editSettings\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Collection)([], _models_aggregate__WEBPACK_IMPORTED_MODULE_24__.AggregateRow)\n    ], Grid.prototype, \"aggregates\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], Grid.prototype, \"showColumnChooser\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({}, _models_column_chooser_settings__WEBPACK_IMPORTED_MODULE_18__.ColumnChooserSettings)\n    ], Grid.prototype, \"columnChooserSettings\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], Grid.prototype, \"enableHeaderFocus\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('auto')\n    ], Grid.prototype, \"height\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('auto')\n    ], Grid.prototype, \"width\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('Default')\n    ], Grid.prototype, \"gridLines\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)()\n    ], Grid.prototype, \"rowTemplate\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)()\n    ], Grid.prototype, \"emptyRecordTemplate\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)()\n    ], Grid.prototype, \"detailTemplate\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)()\n    ], Grid.prototype, \"childGrid\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)()\n    ], Grid.prototype, \"queryString\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('AllPages')\n    ], Grid.prototype, \"printMode\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('Expanded')\n    ], Grid.prototype, \"hierarchyPrintMode\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)([])\n    ], Grid.prototype, \"dataSource\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(null)\n    ], Grid.prototype, \"rowHeight\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)()\n    ], Grid.prototype, \"query\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('USD')\n    ], Grid.prototype, \"currencyCode\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)()\n    ], Grid.prototype, \"exportGrids\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)()\n    ], Grid.prototype, \"toolbar\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)()\n    ], Grid.prototype, \"contextMenuItems\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)()\n    ], Grid.prototype, \"columnMenuItems\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)()\n    ], Grid.prototype, \"toolbarTemplate\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)()\n    ], Grid.prototype, \"pagerTemplate\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(0)\n    ], Grid.prototype, \"frozenRows\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(0)\n    ], Grid.prototype, \"frozenColumns\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('')\n    ], Grid.prototype, \"cssClass\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('All')\n    ], Grid.prototype, \"columnQueryMode\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)({})\n    ], Grid.prototype, \"currentAction\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('')\n    ], Grid.prototype, \"ej2StatePersistenceVersion\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Grid.prototype, \"created\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Grid.prototype, \"destroyed\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Grid.prototype, \"load\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Grid.prototype, \"rowDataBound\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Grid.prototype, \"queryCellInfo\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Grid.prototype, \"headerCellInfo\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Grid.prototype, \"actionBegin\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Grid.prototype, \"actionComplete\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Grid.prototype, \"actionFailure\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Grid.prototype, \"dataBound\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Grid.prototype, \"recordDoubleClick\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Grid.prototype, \"recordClick\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Grid.prototype, \"rowSelecting\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Grid.prototype, \"rowSelected\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Grid.prototype, \"rowDeselecting\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Grid.prototype, \"rowDeselected\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Grid.prototype, \"cellSelecting\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Grid.prototype, \"cellSelected\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Grid.prototype, \"cellDeselecting\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Grid.prototype, \"cellDeselected\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Grid.prototype, \"columnSelecting\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Grid.prototype, \"columnSelected\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Grid.prototype, \"columnDeselecting\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Grid.prototype, \"columnDeselected\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Grid.prototype, \"columnDragStart\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Grid.prototype, \"columnDrag\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Grid.prototype, \"columnDrop\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Grid.prototype, \"printComplete\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Grid.prototype, \"beforePrint\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Grid.prototype, \"pdfQueryCellInfo\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Grid.prototype, \"pdfHeaderQueryCellInfo\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Grid.prototype, \"pdfAggregateQueryCellInfo\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Grid.prototype, \"excelAggregateQueryCellInfo\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Grid.prototype, \"exportDetailDataBound\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Grid.prototype, \"exportDetailTemplate\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Grid.prototype, \"excelQueryCellInfo\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Grid.prototype, \"excelHeaderQueryCellInfo\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Grid.prototype, \"beforeExcelExport\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Grid.prototype, \"excelExportComplete\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Grid.prototype, \"beforePdfExport\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Grid.prototype, \"pdfExportComplete\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Grid.prototype, \"rowDragStartHelper\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Grid.prototype, \"detailDataBound\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Grid.prototype, \"rowDragStart\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Grid.prototype, \"rowDrag\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Grid.prototype, \"rowDrop\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Grid.prototype, \"toolbarClick\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Grid.prototype, \"beforeOpenColumnChooser\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Grid.prototype, \"beforeOpenAdaptiveDialog\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Grid.prototype, \"batchAdd\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Grid.prototype, \"batchDelete\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Grid.prototype, \"batchCancel\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Grid.prototype, \"beforeBatchAdd\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Grid.prototype, \"beforeBatchDelete\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Grid.prototype, \"beforeBatchSave\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Grid.prototype, \"beginEdit\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Grid.prototype, \"commandClick\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Grid.prototype, \"cellEdit\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Grid.prototype, \"cellSave\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Grid.prototype, \"cellSaved\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Grid.prototype, \"resizeStart\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Grid.prototype, \"resizing\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Grid.prototype, \"resizeStop\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Grid.prototype, \"keyPressed\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Grid.prototype, \"beforeDataBound\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Grid.prototype, \"contextMenuOpen\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Grid.prototype, \"contextMenuClick\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Grid.prototype, \"columnMenuOpen\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Grid.prototype, \"columnMenuClick\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Grid.prototype, \"checkBoxChange\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Grid.prototype, \"beforeCopy\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Grid.prototype, \"beforePaste\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Grid.prototype, \"beforeAutoFill\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Grid.prototype, \"columnDataStateChange\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Grid.prototype, \"dataStateChange\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Grid.prototype, \"dataSourceChanged\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Grid.prototype, \"exportGroupCaption\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Grid.prototype, \"lazyLoadGroupExpand\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Grid.prototype, \"lazyLoadGroupCollapse\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Grid.prototype, \"beforeDetailTemplateDetach\", void 0);\n    Grid = Grid_1 = __decorate([\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.NotifyPropertyChanges\n    ], Grid);\n    return Grid;\n}(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Component));\n\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-grids/src/grid/base/grid.js?");

/***/ })

}]);