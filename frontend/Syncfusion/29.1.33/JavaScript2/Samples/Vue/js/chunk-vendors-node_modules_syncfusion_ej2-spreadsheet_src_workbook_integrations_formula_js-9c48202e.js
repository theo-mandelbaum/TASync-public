"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkej2_vue_samples"] = self["webpackChunkej2_vue_samples"] || []).push([["chunk-vendors-node_modules_syncfusion_ej2-spreadsheet_src_workbook_integrations_formula_js-9c48202e"],{

/***/ "./node_modules/@syncfusion/ej2-spreadsheet/src/workbook/integrations/formula.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-spreadsheet/src/workbook/integrations/formula.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   WorkbookFormula: () => (/* binding */ WorkbookFormula)\n/* harmony export */ });\n/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../index */ \"./node_modules/@syncfusion/ej2-spreadsheet/src/workbook/index.js\");\n/* harmony import */ var _common_index__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../common/index */ \"./node_modules/@syncfusion/ej2-spreadsheet/src/workbook/common/index.js\");\n/* harmony import */ var _calculate_index__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../calculate/index */ \"./node_modules/@syncfusion/ej2-spreadsheet/src/calculate/index.js\");\n/* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @syncfusion/ej2-base */ \"./node_modules/@syncfusion/ej2-base/index.js\");\n/* harmony import */ var _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @syncfusion/ej2-data */ \"./node_modules/@syncfusion/ej2-data/index.js\");\n/* harmony import */ var _spreadsheet_common_event__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../spreadsheet/common/event */ \"./node_modules/@syncfusion/ej2-spreadsheet/src/spreadsheet/common/event.js\");\n\n\n\n\n\n\n\n\n\n\n\n/**\n * @hidden\n * The `WorkbookFormula` module is used to handle the formula operation in Workbook.\n */\nvar WorkbookFormula = /** @class */ (function () {\n    /**\n     * Constructor for formula module in Workbook.\n     *\n     * @param {Workbook} workbook - Specifies the workbook.\n     * @private\n     */\n    function WorkbookFormula(workbook) {\n        this.uniqueOBracket = String.fromCharCode(129);\n        this.uniqueCBracket = String.fromCharCode(130);\n        this.uniqueCSeparator = String.fromCharCode(131);\n        this.uniqueCOperator = String.fromCharCode(132);\n        this.uniquePOperator = String.fromCharCode(133);\n        this.uniqueSOperator = String.fromCharCode(134);\n        this.uniqueMOperator = String.fromCharCode(135);\n        this.uniqueDOperator = String.fromCharCode(136);\n        this.uniqueModOperator = String.fromCharCode(137);\n        this.uniqueConcateOperator = String.fromCharCode(138);\n        this.uniqueEqualOperator = String.fromCharCode(139);\n        this.uniqueExpOperator = String.fromCharCode(140);\n        this.uniqueGTOperator = String.fromCharCode(141);\n        this.uniqueLTOperator = String.fromCharCode(142);\n        this.sheetInfo = [];\n        this.parent = workbook;\n        this.init();\n    }\n    WorkbookFormula.prototype.init = function () {\n        var _this = this;\n        this.addEventListener();\n        this.initCalculate();\n        this.registerSheet();\n        this.parent.customFormulaCollection.forEach(function (value, key) {\n            _this.addCustomFunction(value.handler, key, value.description);\n        });\n    };\n    /**\n     * To destroy the formula module.\n     *\n     * @returns {void}\n     * @hidden\n     */\n    WorkbookFormula.prototype.destroy = function () {\n        var _this = this;\n        this.removeEventListener();\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        if (this.parent.refreshing) {\n            this.clearAllUniqueFormulaValue();\n            var formulaCollect = this.calculateInstance.getLibraryFormulas();\n            formulaCollect.forEach(function (value, key) {\n                if (value.isCustom) {\n                    _this.parent.customFormulaCollection.set(key, { handler: value.handler, description: value.description });\n                }\n            });\n        }\n        this.calculateInstance.dispose();\n        this.calculateInstance = null;\n        if (this.sheetInfo) {\n            this.sheetInfo = [];\n        }\n        this.parent = null;\n    };\n    WorkbookFormula.prototype.addEventListener = function () {\n        this.parent.on(_common_index__WEBPACK_IMPORTED_MODULE_1__.workbookFormulaOperation, this.performFormulaOperation, this);\n        this.parent.on(_common_index__WEBPACK_IMPORTED_MODULE_1__.aggregateComputation, this.aggregateComputation, this);\n        this.parent.on(_common_index__WEBPACK_IMPORTED_MODULE_1__.getUniqueRange, this.getUniqueRange, this);\n        this.parent.on(_common_index__WEBPACK_IMPORTED_MODULE_1__.removeUniquecol, this.removeUniquecol, this);\n        this.parent.on(_common_index__WEBPACK_IMPORTED_MODULE_1__.clearFormulaDependentCells, this.clearFormulaDependentCells, this);\n        this.parent.on(_common_index__WEBPACK_IMPORTED_MODULE_1__.formulaInValidation, this.formulaInValidation, this);\n        this.parent.on(_common_index__WEBPACK_IMPORTED_MODULE_1__.refreshInsertDelete, this.refreshInsertDelete, this);\n        this.parent.on(_common_index__WEBPACK_IMPORTED_MODULE_1__.getUpdatedFormulaOnInsertDelete, this.getUpdatedFormulaOnInsertDelete, this);\n        this.parent.on(_index__WEBPACK_IMPORTED_MODULE_0__.checkFormulaRef, this.autoCorrectCellRef, this);\n        this.parent.on(_index__WEBPACK_IMPORTED_MODULE_0__.parseFormulaArgument, this.parseFormulaArgument, this);\n        this.parent.on(_common_index__WEBPACK_IMPORTED_MODULE_1__.getCellRefValue, this.getCellRefValue, this);\n        this.parent.on(_common_index__WEBPACK_IMPORTED_MODULE_1__.commputeFormulaValue, this.commputeFormulaValue, this);\n        this.parent.on(_index__WEBPACK_IMPORTED_MODULE_0__.sheetRenameUpdate, this.renameUpdation, this);\n    };\n    WorkbookFormula.prototype.removeEventListener = function () {\n        if (!this.parent.isDestroyed) {\n            this.parent.off(_common_index__WEBPACK_IMPORTED_MODULE_1__.workbookFormulaOperation, this.performFormulaOperation);\n            this.parent.off(_common_index__WEBPACK_IMPORTED_MODULE_1__.aggregateComputation, this.aggregateComputation);\n            this.parent.off(_common_index__WEBPACK_IMPORTED_MODULE_1__.getUniqueRange, this.getUniqueRange);\n            this.parent.off(_common_index__WEBPACK_IMPORTED_MODULE_1__.removeUniquecol, this.removeUniquecol);\n            this.parent.off(_common_index__WEBPACK_IMPORTED_MODULE_1__.clearFormulaDependentCells, this.clearFormulaDependentCells);\n            this.parent.off(_common_index__WEBPACK_IMPORTED_MODULE_1__.formulaInValidation, this.formulaInValidation);\n            this.parent.off(_common_index__WEBPACK_IMPORTED_MODULE_1__.refreshInsertDelete, this.refreshInsertDelete);\n            this.parent.off(_common_index__WEBPACK_IMPORTED_MODULE_1__.getUpdatedFormulaOnInsertDelete, this.getUpdatedFormulaOnInsertDelete);\n            this.parent.off(_index__WEBPACK_IMPORTED_MODULE_0__.checkFormulaRef, this.autoCorrectCellRef);\n            this.parent.off(_index__WEBPACK_IMPORTED_MODULE_0__.parseFormulaArgument, this.parseFormulaArgument);\n            this.parent.off(_common_index__WEBPACK_IMPORTED_MODULE_1__.getCellRefValue, this.getCellRefValue);\n            this.parent.off(_common_index__WEBPACK_IMPORTED_MODULE_1__.commputeFormulaValue, this.commputeFormulaValue);\n            this.parent.off(_index__WEBPACK_IMPORTED_MODULE_0__.sheetRenameUpdate, this.renameUpdation);\n        }\n    };\n    /**\n     * Get the module name.\n     *\n     * @returns {string} - Get the module name.\n     * @private\n     */\n    WorkbookFormula.prototype.getModuleName = function () {\n        return 'workbookFormula';\n    };\n    WorkbookFormula.prototype.initCalculate = function () {\n        this.calculateInstance = new _calculate_index__WEBPACK_IMPORTED_MODULE_2__.Calculate(this.parent);\n        this.calcID = this.calculateInstance.createSheetFamilyID();\n        this.calculateInstance.setTreatEmptyStringAsZero(true);\n        this.calculateInstance.grid = this.parent.getActiveSheet().id.toString();\n        this.calculateInstance.setParseArgumentSeparator(this.parent.listSeparator);\n        var decimalSeparator = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.getNumericObject)(this.parent.locale).decimal;\n        if (decimalSeparator !== '.' && this.parent.listSeparator !== decimalSeparator) {\n            this.calculateInstance.setParseDecimalSeparator(decimalSeparator);\n        }\n    };\n    WorkbookFormula.prototype.clearFormulaDependentCells = function (args) {\n        if (args.isOpen) {\n            this.calculateInstance.getDependentCells().clear();\n            this.calculateInstance.getFormulaInfoTable().clear();\n            this.calculateInstance.getDependentFormulaCells().clear();\n            return;\n        }\n        var cellRef = args.cellRef.split(':')[0];\n        var sheetId = this.parent.getActiveSheet().id.toString();\n        var family = this.calculateInstance.getSheetFamilyItem(sheetId);\n        if (family.isSheetMember && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(family.parentObjectToToken)) {\n            cellRef = family.parentObjectToToken.get(sheetId) + cellRef;\n        }\n        if (args.clearFormulaInfo && this.calculateInstance.getFormulaInfoTable().has(cellRef)) {\n            this.calculateInstance.getFormulaInfoTable().delete(cellRef);\n        }\n        this.calculateInstance.clearFormulaDependentCells(cellRef);\n    };\n    WorkbookFormula.prototype.formulaInValidation = function (args) {\n        var col = this.calculateInstance.getLibraryFormulas().get(args.value);\n        args.skip = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(col);\n    };\n    WorkbookFormula.prototype.performFormulaOperation = function (args) {\n        var action = args.action;\n        var formulas;\n        var formulaInfo;\n        if (action !== 'refreshCalculate') {\n            formulas = this.calculateInstance.getLibraryFormulas();\n            formulaInfo = (Array.from(formulas.values()));\n        }\n        var collection;\n        var family = this.calculateInstance.getSheetFamilyItem(args.sheetId);\n        switch (action) {\n            case 'getLibraryFormulas':\n                args.formulaCollection = Array.from(formulas.keys());\n                break;\n            case 'getFormulaCategory':\n                collection = ['All'];\n                for (var i = 1; i < Array.from(formulas.values()).length; i++) {\n                    if (collection.indexOf(formulaInfo[i].category) < 0) {\n                        collection.push(formulaInfo[i].category);\n                    }\n                }\n                args.categoryCollection = collection;\n                break;\n            case 'dropDownSelectFormulas':\n                for (var i = 0; i < Array.from(formulas.values()).length; i++) {\n                    if (args.selectCategory === formulaInfo[i].category) {\n                        args.formulaCollection[i] = Array.from(formulas.keys())[i];\n                    }\n                }\n                break;\n            case 'getFormulaDescription':\n                for (var i = 0; i < Array.from(formulas.values()).length; i++) {\n                    if (args.selectedList === Array.from(formulas.keys())[i]) {\n                        args.description = formulaInfo[i].description;\n                        args.isCustom = formulaInfo[i].isCustom;\n                    }\n                }\n                break;\n            case 'registerSheet':\n                this.registerSheet(args.sheetIndex, args.sheetCount);\n                if (args.isImport) {\n                    this.calculateInstance.setParseArgumentSeparator(this.parent.listSeparator);\n                    this.updateSheetInfo();\n                }\n                break;\n            case 'unRegisterSheet':\n                this.unRegisterSheet(args.sheetIndex, args.sheetCount, args.propertyChange);\n                break;\n            case 'initSheetInfo':\n                this.updateSheetInfo();\n                break;\n            case 'refreshCalculate':\n                this.refreshCalculate(args);\n                break;\n            case 'refreshRandomFormula':\n                this.refreshRandomFormula();\n                this.calculateInstance.cell = '';\n                break;\n            case 'setArgumentSeparator':\n                this.calculateInstance.setParseArgumentSeparator(this.parent.listSeparator);\n                break;\n            case 'addDefinedName':\n                args.isAdded = this.addDefinedName(args.definedName, false, args.index, args.isEventTrigger);\n                break;\n            case 'removeDefinedName':\n                args.isRemoved = this.removeDefinedName(args.definedName, args.scope, args.isEventTrigger);\n                break;\n            case 'initiateDefinedNames':\n                this.initiateDefinedNames();\n                break;\n            case 'addSheet':\n                this.sheetInfo.push({ visibleName: args.visibleName, sheet: args.sheetName, index: args.sheetId });\n                break;\n            case 'getSheetInfo':\n                args.sheetInfo = this.sheetInfo;\n                break;\n            case 'deleteSheetTab':\n                for (var i = 0; i < this.sheetInfo.length; i++) {\n                    if (this.sheetInfo[i].index === args.sheetId) {\n                        var visibleName = this.sheetInfo[i].visibleName;\n                        var sheetName = this.sheetInfo[i].sheet;\n                        this.sheetInfo.splice(i, 1);\n                        var id = args.sheetId.toString();\n                        this.sheetDeletion(sheetName, id);\n                        this.calculateInstance.unregisterGridAsSheet(id, id);\n                        this.definedNamesDeletion(visibleName);\n                        break;\n                    }\n                }\n                break;\n            case 'getReferenceError':\n                args.refError = this.referenceError();\n                break;\n            case 'getAlpha':\n                args.col = (0,_calculate_index__WEBPACK_IMPORTED_MODULE_2__.getAlphalabel)(args.col);\n                break;\n            case 'addCustomFunction':\n                this.addCustomFunction(args.functionHandler, args.functionName, args.formulaDescription);\n                break;\n            case 'computeExpression':\n                args.calcValue = this.calculateInstance.computeExpression(args.formula, args.isFromComputeExpression);\n                break;\n            case 'registerGridInCalc':\n                this.calculateInstance.grid = args.sheetID;\n                break;\n            case 'dependentCellsAvailable':\n            case 'checkFormulaAdded':\n                if (family.isSheetMember && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(family.parentObjectToToken)) {\n                    args.address = family.parentObjectToToken.get(args.sheetId) + args.address;\n                }\n                if (action === 'checkFormulaAdded') {\n                    args.added = this.calculateInstance.getFormulaInfoTable().has(args.address);\n                }\n                else {\n                    args.isAvailable = this.calculateInstance.getDependentCells().has(args.address);\n                }\n                break;\n            case 'calculateNow':\n                this.calculateNow(args);\n                break;\n            case 'ClearDependentCellCollection':\n                this.calculateInstance.getDependentFormulaCells().clear();\n                this.calculateInstance.getDependentCells().clear();\n                this.calculateInstance.getFormulaInfoTable().clear();\n                break;\n        }\n    };\n    WorkbookFormula.prototype.definedNamesDeletion = function (sheetName) {\n        var definedNames = this.parent.definedNames;\n        if (definedNames && definedNames.length > 0) {\n            for (var i = definedNames.length - 1; i >= 0; i--) {\n                if (definedNames[i].refersTo.substring(1, definedNames[i].refersTo.lastIndexOf('!')).split('\\'').join('') === sheetName) {\n                    this.removeDefinedName(definedNames[i].name, definedNames[i].scope);\n                }\n            }\n        }\n    };\n    WorkbookFormula.prototype.referenceError = function () {\n        return this.calculateInstance.getErrorStrings()[_calculate_index__WEBPACK_IMPORTED_MODULE_2__.CommonErrors.Ref];\n    };\n    WorkbookFormula.prototype.getSheetInfo = function () {\n        return this.sheetInfo;\n    };\n    WorkbookFormula.prototype.addCustomFunction = function (functionHandler, functionName, formulaDescription) {\n        this.calculateInstance.defineFunction(functionName, functionHandler, formulaDescription);\n    };\n    WorkbookFormula.prototype.updateSheetInfo = function () {\n        var _this = this;\n        this.sheetInfo = [];\n        this.parent.sheets.forEach(function (sheet) {\n            _this.sheetInfo.push({ visibleName: sheet.name, sheet: 'Sheet' + sheet.id, index: sheet.id });\n        });\n    };\n    WorkbookFormula.prototype.getSheetRefUpdateOnDelete = function () {\n        var _this = this;\n        var definedNames = this.calculateInstance.namedRanges;\n        var keyArray;\n        var valueArray;\n        var isDefinedNamesAvail;\n        if (definedNames && definedNames.size) {\n            isDefinedNamesAvail = true;\n            keyArray = Array.from(definedNames.keys());\n            valueArray = Array.from(definedNames.values());\n        }\n        return function (delSheetName, formula) {\n            var isNamedRange;\n            if (isDefinedNamesAvail && !formula.includes(delSheetName)) {\n                formula = formula.replace(/\\w+/g, function (key) {\n                    var index = keyArray.indexOf(key);\n                    if (index !== -1) {\n                        isNamedRange = true;\n                        return valueArray[index];\n                    }\n                    return key;\n                });\n            }\n            var sheetName = delSheetName.toUpperCase();\n            formula = formula.toUpperCase();\n            var idx = formula.indexOf(sheetName);\n            while (idx > -1) {\n                formula = formula.split((formula[idx - 1] === '\\'' && formula[idx + sheetName.length] === '\\'' ? \"'\" + sheetName + \"'\" : sheetName) +\n                    _this.calculateInstance.sheetToken).join(_this.referenceError());\n                idx = formula.indexOf(sheetName);\n            }\n            return { value: formula, isNamedRange: isNamedRange };\n        };\n    };\n    WorkbookFormula.prototype.sheetDeletion = function (delSheetName, sheetId) {\n        var _this = this;\n        var dependentCell = this.calculateInstance.getDependentCells();\n        var fInfo;\n        var token;\n        var family = this.calculateInstance.getSheetFamilyItem(sheetId);\n        var updateSheetRef = this.getSheetRefUpdateOnDelete();\n        var updatedInfo;\n        dependentCell.forEach(function (dependentCellRefs, cellRef) {\n            dependentCellRefs.forEach(function (dependentCellRef) {\n                fInfo = _this.calculateInstance.getFormulaInfoTable().get(dependentCellRef);\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(fInfo)) {\n                    updatedInfo = updateSheetRef(delSheetName, fInfo.formulaText);\n                    if (updatedInfo.value !== fInfo.formulaText) {\n                        token = dependentCellRef.slice(0, dependentCellRef.lastIndexOf(_this.calculateInstance.sheetToken) + 1);\n                        updatedInfo.sheetId = family.tokenToParentObject.has(token) ? Number(family.tokenToParentObject.get(token)) :\n                            parseInt(dependentCellRef.split('!')[1], 10) + 1;\n                        _this.updateDataContainer([_this.calculateInstance.rowIndex(dependentCellRef) - 1, _this.calculateInstance.colIndex(dependentCellRef) - 1], updatedInfo);\n                        _this.calculateInstance.refresh(fInfo.getParsedFormula());\n                    }\n                }\n                token = cellRef.slice(0, cellRef.lastIndexOf(_this.calculateInstance.sheetToken) + 1);\n                if (sheetId === (family.tokenToParentObject.has(token) ? family.tokenToParentObject.get(token) :\n                    cellRef.split('!')[1])) {\n                    _this.calculateInstance.getFormulaInfoTable().delete(cellRef);\n                    _this.calculateInstance.clearFormulaDependentCells(cellRef);\n                }\n            });\n        });\n    };\n    WorkbookFormula.prototype.renameUpdation = function (args) {\n        var _this = this;\n        var name = args.value;\n        var pName = args.pName;\n        var sheet;\n        var cell;\n        var uPName = args.pName.toUpperCase();\n        var escapeRegx = new RegExp('[!@#$%^&()+=\\';,.{}|\\\\\":<>~_-]', 'g');\n        var exp = '(?=[\\'!])(?=[^\"]*(?:\"[^\"]*\"[^\"]*)*$)';\n        var regExp = RegExp;\n        var regx = new regExp(pName.replace(escapeRegx, '\\\\$&') + exp, 'gi');\n        var renameValidationSheetRef = function (validation) {\n            if ((0,_common_index__WEBPACK_IMPORTED_MODULE_1__.checkIsFormula)(validation.value1) && validation.value1.toUpperCase().includes(uPName) && validation.value1.match(regx)) {\n                validation.value1 = validation.value1.replace(regx, name);\n            }\n            if ((0,_common_index__WEBPACK_IMPORTED_MODULE_1__.checkIsFormula)(validation.value2) && validation.value2.toUpperCase().includes(uPName) && validation.value2.match(regx)) {\n                validation.value2 = validation.value2.replace(regx, name);\n            }\n        };\n        this.sheetInfo.forEach(function (info, index) {\n            sheet = (0,_index__WEBPACK_IMPORTED_MODULE_0__.getSheet)(_this.parent, index);\n            if (sheet && sheet.rows && sheet.rows.length) {\n                for (var i = 0, rowLen = sheet.rows.length; i < rowLen; i++) {\n                    if (sheet.rows[i] && sheet.rows[i].cells) {\n                        for (var j = 0, cellsLen = sheet.rows[i].cells.length; j < cellsLen; j++) {\n                            cell = (0,_index__WEBPACK_IMPORTED_MODULE_0__.getCell)(i, j, sheet, false, true);\n                            if (cell.formula && (0,_common_index__WEBPACK_IMPORTED_MODULE_1__.checkIsFormula)(cell.formula) && cell.formula.toUpperCase().includes(uPName) &&\n                                cell.formula.match(regx)) {\n                                cell.formula = cell.formula.replace(regx, name);\n                            }\n                            if (cell.validation) {\n                                renameValidationSheetRef(cell.validation);\n                            }\n                        }\n                    }\n                }\n            }\n            if (sheet && sheet.columns && sheet.columns.length) {\n                var column = void 0;\n                for (var i = 0, colsLen = sheet.columns.length; i < colsLen; i++) {\n                    column = sheet.columns[i];\n                    if (column && column.validation) {\n                        renameValidationSheetRef(column.validation);\n                    }\n                }\n            }\n            var definedNames = _this.parent.definedNames;\n            for (var i = 0; i < definedNames.length; i++) {\n                if ((0,_common_index__WEBPACK_IMPORTED_MODULE_1__.checkIsFormula)(definedNames[i].refersTo) && definedNames[i].refersTo.includes(pName) &&\n                    definedNames[i].refersTo.match(regx)) {\n                    definedNames[i].refersTo = definedNames[i].refersTo.replace(regx, name);\n                    if (definedNames[i].scope.includes(pName)) {\n                        definedNames[i].scope = name;\n                    }\n                }\n            }\n            _this.calculateInstance.updateNamedRange(pName, name);\n            if (info.visibleName === pName) {\n                info.visibleName = name;\n            }\n        });\n    };\n    WorkbookFormula.prototype.updateDataContainer = function (indexes, data) {\n        var sheet;\n        var rowData;\n        var colObj;\n        for (var i = 0, len = this.parent.sheets.length; i < len; i++) {\n            sheet = (0,_index__WEBPACK_IMPORTED_MODULE_0__.getSheet)(this.parent, i);\n            if (sheet.id === data.sheetId) {\n                if (indexes[0] in sheet.rows) {\n                    rowData = sheet.rows[indexes[0]];\n                    if (indexes[1] in rowData.cells) {\n                        colObj = rowData.cells[indexes[1]];\n                        colObj.formula = data.isNamedRange ? colObj.formula : data.value;\n                        if (data.visible) {\n                            if (i === this.parent.activeSheetIndex && sheet.activeCell === (0,_common_index__WEBPACK_IMPORTED_MODULE_1__.getCellAddress)(indexes[0], indexes[1])) {\n                                this.parent.notify(_common_index__WEBPACK_IMPORTED_MODULE_1__.selectionComplete, {});\n                            }\n                        }\n                        else if (this.parent.calculationMode === 'Automatic') {\n                            colObj.value = this.referenceError();\n                        }\n                    }\n                    else {\n                        rowData.cells[indexes[1]] = colObj = {};\n                    }\n                }\n                else {\n                    rowData = sheet.rows[indexes[0]] = {};\n                    rowData[indexes[1]] = colObj = {};\n                }\n                break;\n            }\n        }\n    };\n    WorkbookFormula.prototype.parseSheetRef = function (value, addSheetQuotes) {\n        var regx;\n        // eslint-disable-next-line no-useless-escape\n        var escapeRegx = new RegExp('[!@#$%^&()+=\\';,.{}|\\\":<>~_-]', 'g');\n        var i = 0;\n        var sheetInfo = this.getSheetInfo();\n        var sheetCount = sheetInfo.length;\n        var temp = [];\n        temp.length = 0;\n        var regxTemp;\n        var searchIdx;\n        var idx;\n        var valSearchIdx;\n        var regxVisible;\n        var exp = '(?=[\\'!])(?=[^\"]*(?:\"[^\"]*\"[^\"]*)*$)';\n        var regExp = RegExp;\n        for (i = 0; i < sheetCount; i++) {\n            if (sheetInfo[i].sheet !== sheetInfo[i].visibleName) {\n                regx = new regExp(sheetInfo[i].visibleName.replace(escapeRegx, '\\\\$&') + exp, 'gi');\n                idx = i;\n                if (value.match(regx)) {\n                    for (var j = i + 1; j < sheetCount; j++) {\n                        if (sheetInfo[j].visibleName.includes(sheetInfo[i].visibleName)) {\n                            regxTemp = new regExp(sheetInfo[j].visibleName.replace(escapeRegx, '\\\\$&') + exp, 'gi');\n                            searchIdx = value.search(regxTemp);\n                            valSearchIdx = value.search(regx);\n                            if (searchIdx > -1 && (searchIdx < valSearchIdx || (searchIdx === valSearchIdx &&\n                                sheetInfo[j].visibleName.length > sheetInfo[i].visibleName.length))) {\n                                regxVisible = new RegExp('Sheet', 'gi');\n                                if (sheetInfo[j].visibleName.search(regxVisible) !== 0) {\n                                    regx = regxTemp;\n                                    idx = j;\n                                }\n                            }\n                        }\n                    }\n                    value = value.replace(regx, idx + '/');\n                    temp.push(idx);\n                }\n            }\n        }\n        i = 0;\n        var sheetRef;\n        while (i < temp.length) {\n            regx = new regExp(temp[i] + '/' + exp, 'gi');\n            sheetRef = addSheetQuotes ? '`' + sheetInfo[temp[i]].sheet + '`' : sheetInfo[temp[i]].sheet;\n            value = value.replace(regx, sheetRef);\n            i++;\n        }\n        return value;\n    };\n    WorkbookFormula.prototype.registerSheet = function (sheetIndex, sheetCount) {\n        if (sheetIndex === void 0) { sheetIndex = 0; }\n        if (sheetCount === void 0) { sheetCount = this.parent.sheets.length; }\n        var id;\n        while (sheetIndex < sheetCount) {\n            id = (0,_index__WEBPACK_IMPORTED_MODULE_0__.getSheet)(this.parent, sheetIndex).id + '';\n            this.calculateInstance.registerGridAsSheet(id, id, this.calcID);\n            sheetIndex++;\n        }\n    };\n    WorkbookFormula.prototype.unRegisterSheet = function (sheetIndex, sheetCount, propertyChange) {\n        if (sheetIndex === void 0) { sheetIndex = 0; }\n        if (sheetCount === void 0) { sheetCount = this.parent.sheets.length; }\n        var id;\n        this.calculateInstance.tokenCount = 0;\n        if (propertyChange) {\n            this.calculateInstance.unregisterGridAsSheet(id, id, propertyChange);\n        }\n        else {\n            while (sheetIndex < sheetCount) {\n                id = (0,_index__WEBPACK_IMPORTED_MODULE_0__.getSheet)(this.parent, sheetIndex).id + '';\n                this.calculateInstance.unregisterGridAsSheet(id, id);\n                sheetIndex++;\n            }\n        }\n    };\n    WorkbookFormula.prototype.getUniqueRange = function (args) {\n        args.range = this.calculateInstance.uniqueRange;\n    };\n    WorkbookFormula.prototype.removeUniquecol = function (args) {\n        if (args && args.clearAll) {\n            this.clearAllUniqueFormulaValue();\n            return;\n        }\n        var sheet = this.parent.getActiveSheet();\n        for (var i = 0; i < this.calculateInstance.uniqueRange.length; i++) {\n            var uniqRngAddress = this.calculateInstance.uniqueRange[i].split(':')[0].split('!');\n            if (uniqRngAddress[0] === sheet.name && uniqRngAddress[1] === sheet.activeCell) {\n                var range = (0,_common_index__WEBPACK_IMPORTED_MODULE_1__.getRangeIndexes)(this.calculateInstance.uniqueRange[i]);\n                this.calculateInstance.uniqueRange.splice(i, 1);\n                for (var j = range[0]; j <= range[2]; j++) {\n                    for (var k = range[1]; k <= range[3]; k++) {\n                        var cell = (0,_index__WEBPACK_IMPORTED_MODULE_0__.getCell)(j, k, this.parent.getActiveSheet());\n                        cell.formula = '';\n                        this.parent.updateCellDetails({ value: '', formula: '' }, (0,_common_index__WEBPACK_IMPORTED_MODULE_1__.getRangeAddress)([j, k]), undefined, undefined, true);\n                    }\n                }\n            }\n        }\n    };\n    /**\n     * Perform the formula calculation.\n     *\n     * @param {FormulaCalculateArgs} args - Specifies the formula calculation options.\n     * @param {number} args.rowIndex - The index of the row.\n     * @param {number} args.colIndex - The index of the column.\n     * @param {string} args.value - The value of the cell.\n     * @param {boolean} args.isFormula - A flag indicating whether the value is a formula.\n     * @param {number} args.sheetIdx - The index of the sheet.\n     * @param {boolean} args.isRefreshing - A flag indicating whether the calculation is being refreshed.\n     * @param {boolean} [args.isDependentRefresh] - An optional flag indicating whether the refresh is dependent.\n     * @param {boolean} [args.isRandomFormula] - An optional flag indicating whether the formula is random.\n     * @param {boolean} [args.isDelete] - An optional flag indicating whether is from delete cells.\n     * @param {number[]} [args.deletedRange] - An optional range array indicating the deleted cells.\n     * @returns {void}\n     * @private\n     */\n    WorkbookFormula.prototype.refreshCalculate = function (args) {\n        args.sheet = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(args.sheetIndex) ? this.parent.getActiveSheet() : (0,_index__WEBPACK_IMPORTED_MODULE_0__.getSheet)(this.parent, args.sheetIndex);\n        var sheetId = args.sheet.id + '';\n        var family = this.calculateInstance.getSheetFamilyItem(sheetId);\n        var cellRef = (0,_common_index__WEBPACK_IMPORTED_MODULE_1__.getColumnHeaderText)(args.colIndex + 1) + (args.rowIndex + 1);\n        if (family.isSheetMember && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(family.parentObjectToToken)) {\n            cellRef = family.parentObjectToToken.get(sheetId) + cellRef;\n        }\n        if (args.isFormula) {\n            this.calculateFormula(args, cellRef);\n        }\n        else {\n            if (this.calculateInstance.getFormulaInfoTable().has(cellRef)) {\n                this.calculateInstance.getFormulaInfoTable().delete(cellRef);\n                this.calculateInstance.clearFormulaDependentCells(cellRef);\n            }\n            this.calculateInstance.refresh(cellRef, null, null, null, args.isDelete, args.deletedRange);\n            if (this.parent.calculationMode === 'Automatic') {\n                this.calculateInstance.refreshRandValues(cellRef);\n            }\n        }\n        this.calculateInstance.cell = '';\n        args.isFormulaDependent = this.calculateInstance.getDependentCells().has(cellRef);\n        if (args.value) {\n            args.value = args.value.toString().split('^+').join('^').split('&+').join('&');\n        }\n    };\n    WorkbookFormula.prototype.calculateFormula = function (args, cellRef) {\n        var _this = this;\n        var sheet = args.sheet;\n        this.autoCorrectFormula(args, sheet);\n        var value = args.value;\n        if (args.isClipboard && value.toUpperCase().includes('UNIQUE')) {\n            (0,_index__WEBPACK_IMPORTED_MODULE_0__.setCell)(args.rowIndex, args.colIndex, sheet, { value: '' }, true);\n        }\n        var formula = value;\n        value = this.parseSheetRef(value);\n        var cellArgs = new _calculate_index__WEBPACK_IMPORTED_MODULE_2__.ValueChangedArgs(args.rowIndex + 1, args.colIndex + 1, value);\n        var usedRange = [sheet.usedRange.rowIndex, sheet.usedRange.colIndex];\n        this.calculateInstance.valueChanged(sheet.id.toString(), cellArgs, true, usedRange, args.isRefreshing, sheet.name, args.isRandomFormula, null, args.isDelete, args.deletedRange, args.isDependentRefresh, args.action);\n        if (this.calculateInstance.isRandomVal === true && !args.isRandomFormula && this.parent.calculationMode === 'Automatic') {\n            this.refreshRandomFormula();\n        }\n        var updatedCell = (0,_index__WEBPACK_IMPORTED_MODULE_0__.getCell)(args.rowIndex, args.colIndex, sheet);\n        if (updatedCell && formula && !args.isDependentRefresh) {\n            formula = formula.toUpperCase();\n            var formulaStr = void 0;\n            if (formula.indexOf('=SUM(') === 0) {\n                formulaStr = '=SUM(';\n            }\n            else if (formula.indexOf('=AVERAGE(') === 0) {\n                formulaStr = '=AVERAGE(';\n            }\n            else if (formula.indexOf('=ROUNDDOWN(') === 0) {\n                formulaStr = '=ROUNDDOWN(';\n            }\n            else if (formula.indexOf('=ROUNDUP(') === 0) {\n                formulaStr = '=ROUNDUP(';\n            }\n            else if (formula.indexOf('=MOD(') === 0) {\n                formulaStr = '=MOD(';\n            }\n            if (formulaStr) {\n                formula = formula.replace(formulaStr, '');\n                if (formula.includes(')')) {\n                    formula = formula.slice(0, formula.lastIndexOf(')'));\n                    var fStr = void 0;\n                    var idx = void 0;\n                    while (formula.includes('(') && formula.includes(')')) {\n                        idx = formula.indexOf('(');\n                        fStr = formula.slice(idx + 1);\n                        formula = formula.slice(0, idx) + (fStr.includes(')') ? fStr.slice(fStr.indexOf(')') + 1) : fStr);\n                    }\n                }\n                var cellRefArr = formula.split(this.calculateInstance.getParseArgumentSeparator());\n                var cellRef_1;\n                var fCell = void 0;\n                var model = void 0;\n                var sheetIdx = void 0;\n                var sheetName = void 0;\n                var index = void 0;\n                var _loop_1 = function (idx) {\n                    cellRef_1 = cellRefArr[idx].split(':')[0];\n                    if (cellRef_1.includes('!')) {\n                        sheetName = cellRef_1.substring(0, cellRef_1.lastIndexOf('!')).split('\\'').join('');\n                        cellRef_1 = cellRef_1.substring(cellRef_1.lastIndexOf('!') + 1);\n                    }\n                    else {\n                        sheetName = '';\n                    }\n                    if ((0,_common_index__WEBPACK_IMPORTED_MODULE_1__.isCellReference)(cellRef_1)) {\n                        if (sheetName) {\n                            sheetIdx = (0,_index__WEBPACK_IMPORTED_MODULE_0__.getSheetIndex)(this_1.parent, sheetName);\n                            model = sheetIdx !== undefined ? (0,_index__WEBPACK_IMPORTED_MODULE_0__.getSheet)(this_1.parent, sheetIdx) : sheet;\n                        }\n                        else {\n                            model = sheet;\n                        }\n                        index = (0,_common_index__WEBPACK_IMPORTED_MODULE_1__.getRangeIndexes)(cellRef_1);\n                        fCell = (0,_index__WEBPACK_IMPORTED_MODULE_0__.getCell)(index[0], index[1], model);\n                        var format_1 = (0,_index__WEBPACK_IMPORTED_MODULE_0__.getTypeFromFormat)(updatedCell.format);\n                        var excludedFormats = ['Number', 'Currency', 'LongDate', 'Time'];\n                        if (fCell && fCell.format && (!updatedCell.format || (!args.fillType &&\n                            (excludedFormats.every(function (fmt) { return format_1 !== fmt; }) &&\n                                (0,_index__WEBPACK_IMPORTED_MODULE_0__.getTypeFromFormat)(fCell.format) !== 'Number')))) {\n                            updatedCell.format = fCell.format;\n                            return \"break\";\n                        }\n                    }\n                };\n                var this_1 = this;\n                for (var idx = 0; idx < cellRefArr.length; idx++) {\n                    var state_1 = _loop_1(idx);\n                    if (state_1 === \"break\")\n                        break;\n                }\n            }\n            else {\n                var depCells = this.calculateInstance.getDependentFormulaCells().get(cellRef);\n                if (depCells && depCells.size && this.calculateInstance.getFormulaInfoTable().has(cellRef) &&\n                    this.calculateInstance.getFormulaInfoTable().get(cellRef).getParsedFormula().lastIndexOf('q') === -1 &&\n                    !updatedCell.format) {\n                    var format_2;\n                    var fCell_1;\n                    var sheetRef_1;\n                    var model_1;\n                    var sheetIdx_1;\n                    var idx_1;\n                    var family_1 = this.calculateInstance.getSheetFamilyItem(null, this.calcID);\n                    depCells.forEach(function (cellRef) {\n                        if (!format_2) {\n                            sheetRef_1 = cellRef.slice(0, cellRef.lastIndexOf('!') + 1);\n                            cellRef = cellRef.replace(sheetRef_1, '');\n                            if ((0,_common_index__WEBPACK_IMPORTED_MODULE_1__.isCellReference)(cellRef)) {\n                                idx_1 = (0,_common_index__WEBPACK_IMPORTED_MODULE_1__.getRangeIndexes)(cellRef);\n                                if (family_1.tokenToParentObject.has(sheetRef_1)) {\n                                    sheetIdx_1 = (0,_index__WEBPACK_IMPORTED_MODULE_0__.getSheetIndexFromId)(_this.parent, Number(family_1.tokenToParentObject.get(sheetRef_1)));\n                                    model_1 = sheetIdx_1 !== undefined ? (0,_index__WEBPACK_IMPORTED_MODULE_0__.getSheet)(_this.parent, sheetIdx_1) : sheet;\n                                }\n                                else {\n                                    model_1 = sheet;\n                                }\n                                fCell_1 = (0,_index__WEBPACK_IMPORTED_MODULE_0__.getCell)(idx_1[0], idx_1[1], model_1);\n                                if (fCell_1 && fCell_1.format) {\n                                    format_2 = fCell_1.format;\n                                }\n                            }\n                        }\n                    });\n                    if (format_2) {\n                        updatedCell.format = format_2;\n                    }\n                }\n            }\n        }\n    };\n    WorkbookFormula.prototype.refreshRandomFormula = function () {\n        var rowId;\n        var colId;\n        var refValue = '';\n        var referenceCollection = this.calculateInstance.randCollection;\n        if (this.calculateInstance.randomValues.size > 1 && this.calculateInstance.randomValues.size ===\n            referenceCollection.length) {\n            for (var i = 0; i < this.calculateInstance.randomValues.size; i++) {\n                rowId = this.calculateInstance.rowIndex(referenceCollection[i]);\n                colId = this.calculateInstance.colIndex(referenceCollection[i]);\n                refValue = this.calculateInstance.randomValues.get(referenceCollection[i]);\n                var sheetId = (parseFloat(this.calculateInstance.getSheetToken(referenceCollection[i]).split(this.calculateInstance.sheetToken).join('')) + 1).toString();\n                var sheet = (0,_index__WEBPACK_IMPORTED_MODULE_0__.getSheet)(this.parent, (0,_index__WEBPACK_IMPORTED_MODULE_0__.getSheetIndexFromId)(this.parent, Number(sheetId)));\n                if (sheet && (0,_index__WEBPACK_IMPORTED_MODULE_0__.getCell)(rowId - 1, colId - 1, sheet).formula) {\n                    var tempArgs = new _calculate_index__WEBPACK_IMPORTED_MODULE_2__.ValueChangedArgs(rowId, colId, refValue);\n                    this.calculateInstance.valueChanged(sheetId, tempArgs, true, undefined, undefined, undefined, false, true);\n                }\n            }\n        }\n    };\n    WorkbookFormula.prototype.autoCorrectFormula = function (args, sheet) {\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(args.value)) {\n            var formula = args.value;\n            formula = this.autoCorrectCellRef({ formula: args.value });\n            formula = formula.toString();\n            if (formula.split('(').length === 2 && formula.indexOf(')') < 0) {\n                formula += ')';\n            }\n            var isEqual = void 0;\n            if (formula.indexOf('=') === 0) {\n                formula = formula.slice(1);\n                isEqual = true;\n            }\n            var lessEq = formula.match(/</g);\n            var greaterEq = formula.match(/>/g);\n            var equal = formula.match(/=/g);\n            if (lessEq) {\n                var lessOp = '';\n                for (var i = 0; i < lessEq.length; i++) {\n                    lessOp = lessOp + lessEq[i];\n                }\n                formula = formula.replace(lessOp, '<');\n            }\n            if (greaterEq) {\n                var greaterOp = '';\n                for (var j = 0; j < greaterEq.length; j++) {\n                    greaterOp = greaterOp + greaterEq[j];\n                }\n                formula = formula.replace(greaterOp, '>');\n            }\n            if (equal) {\n                var equalOp = '';\n                for (var c = 0; c < equal.length; c++) {\n                    equalOp = equalOp + equal[c];\n                }\n                formula = formula.split(equalOp).join('=');\n            }\n            formula = isEqual ? '=' + formula : formula;\n            if (lessEq || greaterEq || equal) {\n                (0,_index__WEBPACK_IMPORTED_MODULE_0__.getCell)(args.rowIndex, args.colIndex, sheet).formula = formula;\n            }\n            args.value = formula;\n        }\n    };\n    WorkbookFormula.prototype.correctCellReference = function (cellRef) {\n        var _this = this;\n        var cellRefArr = cellRef.split(':');\n        var refArr;\n        var sheetRefArr;\n        var oprMatchArr;\n        var isInvalid;\n        var updatedRef;\n        cellRefArr.forEach(function (cellAddr, idx) {\n            sheetRefArr = cellAddr.split('!');\n            cellRef = sheetRefArr[1] || cellAddr;\n            updatedRef = null;\n            if (cellRef.includes('&')) {\n                refArr = cellRef.split('&');\n                if (_this.calculateInstance.isCellReference(refArr[1].split('$').join(''))) {\n                    refArr[1] = _this.getUpdatedCellRef(refArr[1]);\n                    updatedRef = refArr.join('&');\n                }\n            }\n            else if (_this.calculateInstance.isCellReference(cellRef.split('$').join(''))) {\n                updatedRef = _this.getUpdatedCellRef(cellRef);\n                if (sheetRefArr.length > 1) {\n                    updatedRef = sheetRefArr[0] + '!' + updatedRef;\n                }\n            }\n            else {\n                oprMatchArr = cellAddr.match(/[/+\\-*^><>=<=<>]+/g);\n                if (oprMatchArr) {\n                    refArr = cellAddr.split(oprMatchArr[0]);\n                    for (var refIdx = 0; refIdx < refArr.length; refIdx++) {\n                        sheetRefArr = refArr[refIdx].split('!');\n                        cellRef = sheetRefArr[1] || sheetRefArr[0];\n                        if (_this.calculateInstance.isCellReference(cellRef.split('$').join(''))) {\n                            refArr[refIdx] = _this.getUpdatedCellRef(cellRef);\n                            if (sheetRefArr.length > 1) {\n                                refArr[refIdx] = sheetRefArr[0] + '!' + refArr[refIdx];\n                            }\n                        }\n                    }\n                    updatedRef = refArr.join(oprMatchArr[0]);\n                }\n            }\n            if (updatedRef && updatedRef !== cellAddr) {\n                isInvalid = true;\n                cellRefArr[idx] = updatedRef;\n            }\n        });\n        return { isInvalid: isInvalid, ref: cellRefArr.join(':') };\n    };\n    WorkbookFormula.prototype.autoCorrectCellRef = function (args) {\n        var rightParens = args.formula.lastIndexOf(')');\n        var refCorrectObj;\n        if (rightParens > -1 && args.formula.split(')').length === 2) {\n            var leftParens = rightParens - 1;\n            while (leftParens > -1 && args.formula[leftParens] !== '(') {\n                if (args.formula[leftParens] === ')') {\n                    return args.formula;\n                }\n                leftParens--;\n            }\n            if (leftParens > -1) {\n                var formulaArgs = args.formula.substring(leftParens + 1, rightParens);\n                var listSeparator = this.calculateInstance.getParseArgumentSeparator();\n                var formulaArgsArr = formulaArgs.split(listSeparator);\n                var isInValidRef = void 0;\n                for (var argsIdx = 0; argsIdx < formulaArgsArr.length; argsIdx++) {\n                    refCorrectObj = this.correctCellReference(formulaArgsArr[argsIdx]);\n                    if (refCorrectObj.isInvalid) {\n                        isInValidRef = true;\n                        formulaArgsArr[argsIdx] = refCorrectObj.ref;\n                    }\n                }\n                if (isInValidRef) {\n                    args.formula = args.formula.split(formulaArgs).join(formulaArgsArr.join(listSeparator));\n                    args.isInvalid = true;\n                }\n            }\n        }\n        else if (args.formula.startsWith('=') && !args.formula.includes(')')) {\n            refCorrectObj = this.correctCellReference(args.formula.substring(1, args.formula.length));\n            if (refCorrectObj.isInvalid) {\n                args.formula = '=' + refCorrectObj.ref;\n                args.isInvalid = true;\n            }\n        }\n        return args.formula;\n    };\n    WorkbookFormula.prototype.getUpdatedCellRef = function (cellRef) {\n        var orgCellRef = cellRef;\n        cellRef = cellRef.trim();\n        var isAbsolute = cellRef.indexOf('$') === 0;\n        var alphabetStartIdx = cellRef.search(/[a-zA-Z]/);\n        var digitStartIdx = cellRef.search(/\\d/);\n        alphabetStartIdx = isAbsolute ? alphabetStartIdx - 1 : alphabetStartIdx;\n        if ((isAbsolute ? digitStartIdx > 1 : digitStartIdx > 0) && (0,_common_index__WEBPACK_IMPORTED_MODULE_1__.isNumber)(cellRef.substring(digitStartIdx, cellRef.length))) {\n            return orgCellRef;\n        }\n        else {\n            return cellRef.substring(alphabetStartIdx, cellRef.length) + cellRef.substring(0, alphabetStartIdx);\n        }\n    };\n    WorkbookFormula.prototype.initiateDefinedNames = function () {\n        var definedNames = this.parent.definedNames;\n        var i = 0;\n        while (i < definedNames.length) {\n            var definedname = definedNames[i];\n            var refersTo = this.parseSheetRef(definedname.refersTo);\n            var range = (0,_common_index__WEBPACK_IMPORTED_MODULE_1__.getRangeFromAddress)(refersTo);\n            var cellRef = false;\n            var isLink = refersTo.indexOf('http:') > -1 ? true : (refersTo.indexOf('https:') > -1 ? true : false);\n            range = range.split('$').join('');\n            range = range.split('=').join('');\n            if (range.indexOf(':') > -1) {\n                var rangeSplit = range.split(':');\n                if (((0,_common_index__WEBPACK_IMPORTED_MODULE_1__.isCellReference)(rangeSplit[0]) && (0,_common_index__WEBPACK_IMPORTED_MODULE_1__.isCellReference)(rangeSplit[1])) ||\n                    ((rangeSplit[0].match(/[0-9]/) && rangeSplit[1].match(/[0-9]/)) ||\n                        (rangeSplit[0].toUpperCase().match(/[A-Z]/) && rangeSplit[1].toUpperCase().match(/[A-Z]/)))) {\n                    cellRef = true;\n                }\n            }\n            else if (range.indexOf(':') < 0) {\n                if ((0,_common_index__WEBPACK_IMPORTED_MODULE_1__.isCellReference)(range)) {\n                    cellRef = true;\n                }\n            }\n            if (isLink) {\n                cellRef = false;\n            }\n            if (cellRef) {\n                this.addDefinedName(definedname, true, undefined, true);\n            }\n            else {\n                this.removeDefinedName(definedname.name, definedname.scope, true);\n                i--;\n            }\n            i++;\n        }\n    };\n    /**\n     * @hidden\n     * Used to add defined name to workbook.\n     *\n     * @param {DefineNameModel} definedName - Define named range.\n     * @param {boolean} isValidate - Specify the boolean value.\n     * @param {number} index - Define named index.\n     * @param {boolean} isEventTrigger - Specify the boolean value.\n     * @returns {boolean} - Used to add defined name to workbook.\n     */\n    WorkbookFormula.prototype.addDefinedName = function (definedName, isValidate, index, isEventTrigger) {\n        if (index === undefined || index < -1) {\n            index = this.parent.definedNames.length;\n        }\n        var isAdded = true;\n        var sheetIdx;\n        var name = definedName.name;\n        if (definedName.refersTo.indexOf('!') < 0) {\n            var sheetName = (0,_index__WEBPACK_IMPORTED_MODULE_0__.getSheetName)(this.parent);\n            sheetName = sheetName.indexOf(' ') !== -1 ? '\\'' + sheetName + '\\'' : sheetName;\n            definedName.refersTo = sheetName + '!' + ((definedName.refersTo.indexOf('=') < 0) ?\n                definedName.refersTo : definedName.refersTo.split('=')[1]);\n        }\n        var visibleRefersTo = definedName.refersTo;\n        var refersTo = this.parseSheetRef(definedName.refersTo);\n        if (definedName.scope) {\n            sheetIdx = (0,_index__WEBPACK_IMPORTED_MODULE_0__.getSheetIndex)(this.parent, definedName.scope);\n            if (sheetIdx > -1) {\n                name = (0,_index__WEBPACK_IMPORTED_MODULE_0__.getSheetName)(this.parent, sheetIdx) + '!' + name;\n            }\n        }\n        else {\n            definedName.scope = 'Workbook';\n        }\n        if (!definedName.comment) {\n            definedName.comment = '';\n        }\n        //need to extend once internal sheet value changes done.\n        if (!isValidate && this.checkIsNameExist(definedName.name, definedName.scope)) {\n            isAdded = false;\n        }\n        else {\n            this.calculateInstance.addNamedRange(name, refersTo[0] === '=' ? refersTo.substr(1) : refersTo);\n            if (refersTo[0] !== '=') {\n                definedName.refersTo = '=' + visibleRefersTo;\n            }\n            if (this.parent.definedNames.indexOf(definedName) < 0) {\n                this.parent.definedNames.splice(index, 0, definedName);\n                this.parent.notify(_spreadsheet_common_event__WEBPACK_IMPORTED_MODULE_5__.formulaBarOperation, { action: 'setNameBoxValue', definedName: definedName });\n            }\n        }\n        var eventArgs = { name: definedName.name, scope: definedName.scope, comment: definedName.comment,\n            refersTo: definedName.refersTo, cancel: false };\n        if (!isEventTrigger) {\n            this.parent.notify('actionComplete', { eventArgs: eventArgs, action: 'addDefinedName' });\n        }\n        return isAdded;\n    };\n    /**\n     * @hidden\n     * Used to remove defined name from workbook.\n     *\n     * @param {string} name - Specifies the defined name.\n     * @param {string} scope - Specifies the scope of the define name.\n     * @param {boolean} isEventTrigger - Specify the boolean value.\n     * @returns {boolean} - To Return the bool value.\n     */\n    WorkbookFormula.prototype.removeDefinedName = function (name, scope, isEventTrigger) {\n        var isRemoved = false;\n        var scopeVal = !scope ? 'Workbook' : scope;\n        var index = this.getIndexFromNameColl(name, scopeVal);\n        if (index > -1) {\n            var calcName = name;\n            if (scope) {\n                var sheetIdx = (0,_index__WEBPACK_IMPORTED_MODULE_0__.getSheetIndex)(this.parent, scope);\n                if (sheetIdx > -1) {\n                    calcName = (0,_index__WEBPACK_IMPORTED_MODULE_0__.getSheetName)(this.parent, sheetIdx) + '!' + name;\n                }\n            }\n            this.calculateInstance.removeNamedRange(calcName);\n            var removedName = this.parent.definedNames.splice(index, 1);\n            this.parent.notify(_spreadsheet_common_event__WEBPACK_IMPORTED_MODULE_5__.formulaBarOperation, { action: 'setNameBoxValue', definedName: removedName[0], isRemove: true });\n            if (!isEventTrigger) {\n                var eventArgs = { name: name, scope: scopeVal, cancel: false };\n                this.parent.notify('actionComplete', { eventArgs: eventArgs, action: 'removeDefinedName' });\n            }\n            isRemoved = true;\n        }\n        return isRemoved;\n    };\n    WorkbookFormula.prototype.checkIsNameExist = function (name, sheetName) {\n        var isExist = this.parent.definedNames.some(function (key) {\n            return key.name === name && (sheetName ? key.scope === sheetName : key.scope === '');\n        });\n        return isExist;\n    };\n    WorkbookFormula.prototype.getIndexFromNameColl = function (definedName, scope) {\n        if (scope === void 0) { scope = ''; }\n        var index = -1;\n        this.parent.definedNames.filter(function (name, idx) {\n            if (name.name === definedName && name.scope === scope) {\n                index = idx;\n            }\n        });\n        return index;\n    };\n    WorkbookFormula.prototype.calculateNow = function (args) {\n        var _this = this;\n        var deferred = new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_4__.Deferred();\n        args.promise = deferred.promise;\n        var dependentCells;\n        var initCalculate = function () {\n            var family;\n            var token;\n            var sheetId;\n            var cellRef;\n            var options = { isRefreshing: true, action: 'calculate' };\n            var formulaInfo = _this.calculateInstance.getFormulaInfoTable();\n            args.sheets.forEach(function (sheet) {\n                sheetId = sheet.id.toString();\n                family = _this.calculateInstance.getSheetFamilyItem(sheetId);\n                token = family.isSheetMember ? family.parentObjectToToken.get(sheetId) : '';\n                _this.parent.setSheetPropertyOnMute(sheet, 'isSheetCalculated', true);\n                options.sheet = sheet;\n                sheet.rows.forEach(function (row, rowIdx) {\n                    options.rowIndex = rowIdx;\n                    if (row && row.cells) {\n                        row.cells.forEach(function (cell, colIdx) {\n                            if (cell && (0,_common_index__WEBPACK_IMPORTED_MODULE_1__.checkIsFormula)(cell.formula)) {\n                                cellRef = token + (0,_common_index__WEBPACK_IMPORTED_MODULE_1__.getColumnHeaderText)(colIdx + 1) + (rowIdx + 1);\n                                if (cell.value === undefined || cell.value === null || !formulaInfo.has(cellRef) || (dependentCells &&\n                                    dependentCells[cellRef])) {\n                                    options.colIndex = colIdx;\n                                    options.value = cell.formula;\n                                    _this.calculateFormula(options, cellRef);\n                                }\n                            }\n                        });\n                    }\n                });\n            });\n            deferred.resolve();\n            _this.calculateInstance.cell = '';\n        };\n        var totalLoadCount = args.sheets.length;\n        var loadCompleteHandler = function () {\n            totalLoadCount--;\n            if (!totalLoadCount) {\n                initCalculate();\n                if (_this.parent.calculationMode === 'Automatic' && args.scope === 'CalculateWorkbook') {\n                    _this.parent.setProperties({ calculationMode: 'Manual' }, true);\n                }\n                var sheet = _this.parent.getActiveSheet();\n                if (sheet.conditionalFormats && sheet.conditionalFormats.length) {\n                    _this.parent.notify(_common_index__WEBPACK_IMPORTED_MODULE_1__.applyCF, { indexes: [], isAction: true, refreshAll: true, isEdit: true });\n                }\n            }\n        };\n        var getDependentCellsCheckFn = function (sheet) {\n            var sheetId = sheet.id.toString();\n            var family = _this.calculateInstance.getSheetFamilyItem(sheetId);\n            var token = family.isSheetMember ? family.parentObjectToToken.get(sheetId) : '';\n            dependentCells = {};\n            var dependentCellsInfo = _this.calculateInstance.getDependentCells();\n            return function (rowIdx, colIdx) {\n                var cellAddr = token + (0,_common_index__WEBPACK_IMPORTED_MODULE_1__.getCellAddress)(rowIdx, colIdx);\n                if (dependentCellsInfo.has(cellAddr)) {\n                    dependentCellsInfo.get(cellAddr).forEach(function (cellRef) {\n                        if (!dependentCells[cellRef]) {\n                            dependentCells[cellRef] = true;\n                        }\n                    });\n                }\n            };\n        };\n        args.sheets.forEach(function (sheet) {\n            if (sheet.ranges.some(function (range) { return range.dataSource && (!range.info || !range.info.loadedRange ||\n                !range.info.loadedRange.length); })) {\n                _this.parent.notify(_common_index__WEBPACK_IMPORTED_MODULE_1__.updateSheetFromDataSource, { sheet: sheet, autoDetectFormat: true, loadFromStartCell: true,\n                    updateDependentCellsCallback: getDependentCellsCheckFn(sheet), loadComplete: loadCompleteHandler });\n            }\n            else {\n                loadCompleteHandler();\n            }\n        });\n    };\n    WorkbookFormula.prototype.toFixed = function (value) {\n        var num = Number(value);\n        if (Math.round(num) !== num) {\n            value = num.toFixed(2);\n        }\n        return value;\n    };\n    WorkbookFormula.prototype.commputeFormulaValue = function (args) {\n        var parsedSheetValue = this.parseSheetRef(args.value);\n        args.value = this.calculateInstance.computeExpression(parsedSheetValue).toString();\n    };\n    WorkbookFormula.prototype.getCellRefValue = function (args) {\n        var sheetId;\n        var sheetInfo = this.getSheetInfo();\n        var sheetCount = sheetInfo.length;\n        var token = this.calculateInstance.sheetToken;\n        var value = args.value;\n        var tokenIndex = value.lastIndexOf(token);\n        if (tokenIndex !== -1) {\n            var sheetName = value.substring(0, tokenIndex);\n            if (sheetName.length > 0 && sheetName[0] === this.calculateInstance.getFormulaCharacter()) {\n                sheetName = sheetName.substring(1, args.value.length); // To get the sheetname without '=' symbol\n            }\n            for (var i = 0; i < sheetCount; i++) {\n                if (sheetName.toUpperCase() === sheetInfo[i].visibleName.toUpperCase()) {\n                    sheetId = i;\n                    break;\n                }\n            }\n            args.value = this.calculateInstance.getValueFromArg(token + sheetId + token + value.substring(tokenIndex + 1).toUpperCase());\n        }\n        else if (value.length > 0 && value[0] === this.calculateInstance.getFormulaCharacter()) {\n            args.value = this.calculateInstance.getValueFromArg(value.substring(1, args.value.length).toUpperCase());\n        }\n    };\n    WorkbookFormula.prototype.aggregateComputation = function (args) {\n        var sheet = this.parent.getActiveSheet();\n        var range = (0,_index__WEBPACK_IMPORTED_MODULE_0__.getSingleSelectedRange)(sheet);\n        var indexes = (0,_common_index__WEBPACK_IMPORTED_MODULE_1__.getRangeIndexes)(range.split(':')[1]);\n        if (indexes[0] + 1 === sheet.rowCount && indexes[1] + 1 === sheet.colCount) {\n            range = \"A1:\" + (0,_common_index__WEBPACK_IMPORTED_MODULE_1__.getCellAddress)(sheet.usedRange.rowIndex, sheet.usedRange.colIndex);\n        }\n        var calcValue;\n        var i;\n        var cellCol = this.calculateInstance.getCellCollection(range);\n        for (i = 0; i < cellCol.length; i++) {\n            calcValue = this.calculateInstance.getValueFromArg(cellCol[i]);\n            if ((0,_common_index__WEBPACK_IMPORTED_MODULE_1__.isNumber)(calcValue)) {\n                args.countOnly = false;\n                break;\n            }\n        }\n        args.Count = this.calculateInstance.getFunction('COUNTA')(range, 'isAggregate');\n        if (!args.Count || args.countOnly) {\n            return;\n        }\n        var formulaVal = ['SUM', 'AVERAGE', 'MIN', 'MAX'];\n        var formatedValues = [];\n        var index = (0,_common_index__WEBPACK_IMPORTED_MODULE_1__.getRangeIndexes)(sheet.activeCell);\n        var cell = (0,_index__WEBPACK_IMPORTED_MODULE_0__.getCell)(index[0], index[1], sheet, false, true);\n        for (i = 0; i < 4; i++) {\n            calcValue = this.toFixed(this.calculateInstance.getFunction(formulaVal[i])(range, 'isAggregate'));\n            if (cell.format) {\n                var eventArgs = { formattedText: calcValue, value: calcValue, format: cell.format,\n                    cell: { value: calcValue, format: cell.format } };\n                this.parent.notify(_common_index__WEBPACK_IMPORTED_MODULE_1__.getFormattedCellObject, eventArgs);\n                calcValue = eventArgs.formattedText;\n            }\n            formatedValues.push(calcValue);\n        }\n        args.Sum = formatedValues[0];\n        args.Avg = formatedValues[1];\n        args.Min = formatedValues[2];\n        args.Max = formatedValues[3];\n    };\n    WorkbookFormula.prototype.refreshInsertDelete = function (args) {\n        var _this = this;\n        if (args.modelType === 'Sheet') {\n            return;\n        }\n        var formulaDependentCells = this.calculateInstance.getDependentFormulaCells();\n        var cell;\n        var sheetIndex = (0,_index__WEBPACK_IMPORTED_MODULE_0__.getSheetIndexFromId)(this.parent, args.sheet.id);\n        this.parent.sheets.forEach(function (sheet, index) {\n            for (var i = 0, rowLen = sheet.usedRange.rowIndex; i <= rowLen; i++) {\n                for (var j = 0, colLen = sheet.usedRange.colIndex; j <= colLen; j++) {\n                    cell = (0,_index__WEBPACK_IMPORTED_MODULE_0__.getCell)(i, j, sheet, false, true);\n                    if (cell.formula && (0,_common_index__WEBPACK_IMPORTED_MODULE_1__.checkIsFormula)(cell.formula)) {\n                        if (index === sheetIndex) {\n                            if (args.isInsert || !(args.modelType === 'Row' ? i >= args.startIndex && i <= args.endIndex :\n                                j >= args.startIndex && j <= args.endIndex)) {\n                                _this.updateFormula(args, cell, i, j, sheetIndex);\n                            }\n                        }\n                        else if (cell.formula.includes(args.sheet.name)) {\n                            _this.updateFormula(args, cell, i, j, sheetIndex, true, sheet);\n                        }\n                    }\n                }\n            }\n        });\n        formulaDependentCells.clear();\n        this.calculateInstance.getDependentCells().clear();\n        this.calculateInstance.getFormulaInfoTable().clear();\n        this.refreshNamedRange(args);\n    };\n    WorkbookFormula.prototype.getUpdatedFormulaOnInsertDelete = function (args) {\n        if (args.sheetNames) {\n            if (!args.updateSheetRef) {\n                args.updateSheetRef = this.getSheetRefUpdateOnDelete();\n            }\n            var previousFormula = this.parseSheetRef(args.cell.formula, false);\n            var formula_1 = previousFormula;\n            args.sheetNames.forEach(function (sheetName) {\n                formula_1 = args.updateSheetRef(sheetName, formula_1).value;\n            });\n            if (formula_1 !== previousFormula) {\n                args.cell.formula = formula_1;\n            }\n        }\n        else {\n            this.updateFormula(args.insertDeleteArgs, args.cell, args.row, args.col, args.sheetIdx, args.otherSheet, args.formulaSheet);\n        }\n    };\n    WorkbookFormula.prototype.updateFormula = function (args, cell, row, col, sheetIdx, otherSheet, formulaSheet) {\n        var ref;\n        var pVal;\n        var index;\n        var updated;\n        var isRangeFormula;\n        var containAlphabetAndDigit = new RegExp(/^(?=.*[a-zA-Z])(?=.*\\d)/g);\n        var isValidCellReference;\n        var isFullColumn;\n        if (cell.formula && cell.formula.includes('UNIQUE') && row !== undefined) {\n            this.clearUniqueRange(row, col, formulaSheet || args.sheet);\n        }\n        var getAddress = function () {\n            var range = (isAbsoluteRef ? '$' : '') + (0,_common_index__WEBPACK_IMPORTED_MODULE_1__.getColumnHeaderText)(index[1] + 1) + (isAbsoluteRef ? '$' : '') + (index[0] + 1);\n            if (index[0] !== index[2] || index[1] !== index[3]) {\n                range += ':' + (isAbsoluteRef ? '$' : '') + (0,_common_index__WEBPACK_IMPORTED_MODULE_1__.getColumnHeaderText)(index[3] + 1) + (isAbsoluteRef ? '$' : '') + (index[2] + 1);\n            }\n            return range;\n        };\n        var formulaArr = this.parseFormulaArgument({ formula: this.parseSheetRef(cell.formula, true), rangeRef: true });\n        var sheetInfo = this.getSheetInfo();\n        var sheetName;\n        var refChanged;\n        var isAbsoluteRef;\n        var isSingleRangeRef = !cell.formula.includes(this.parent.listSeparator);\n        for (var i = 0; i < formulaArr.length; i++) {\n            ref = formulaArr[i].trim();\n            isAbsoluteRef = ref.includes('$');\n            if (isAbsoluteRef) {\n                ref = ref.replace(/[$]/g, '');\n            }\n            isValidCellReference = true;\n            if (this.calculateInstance.isCellReference(ref)) {\n                isRangeFormula = ref.includes(':');\n                pVal = i && formulaArr[i - 1].trim();\n                if (pVal && pVal[pVal.length - 1] === '!') {\n                    pVal = pVal.replace(/['!]/g, '');\n                    sheetName = sheetInfo[sheetIdx].sheet === sheetInfo[sheetIdx].visibleName ? args.sheet.name :\n                        '`' + sheetInfo[sheetIdx].sheet + '`';\n                    if (pVal !== sheetName) {\n                        continue;\n                    }\n                }\n                else if (otherSheet) {\n                    continue;\n                }\n                if (!containAlphabetAndDigit.test(ref) && ref.indexOf(':') > -1) {\n                    isValidCellReference = false;\n                    isFullColumn = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(ref.match(/[0-9]/)) ? true : false;\n                }\n                index = (0,_common_index__WEBPACK_IMPORTED_MODULE_1__.getSwapRange)((0,_common_index__WEBPACK_IMPORTED_MODULE_1__.getRangeIndexes)(ref));\n                updated = this.parent.updateRangeOnInsertDelete(args, index, isRangeFormula, row, col, isAbsoluteRef, isSingleRangeRef);\n                if (updated) {\n                    formulaArr[i] = index[2] < index[0] || index[3] < index[1] ?\n                        this.calculateInstance.getErrorStrings()[_calculate_index__WEBPACK_IMPORTED_MODULE_2__.CommonErrors.Ref] : !isValidCellReference ?\n                        (isFullColumn ? (0,_common_index__WEBPACK_IMPORTED_MODULE_1__.getRangeAddress)(index).replace(/\\d/g, '') : (0,_common_index__WEBPACK_IMPORTED_MODULE_1__.getRangeAddress)(index).replace(/[a-zA-Z]/g, '')) : getAddress();\n                    refChanged = true;\n                }\n            }\n        }\n        var newFormula = '=' + formulaArr.join('');\n        if (refChanged) {\n            var regx_1;\n            var regExp_1 = RegExp;\n            sheetInfo.forEach(function (info) {\n                if (newFormula.includes('`' + info.sheet + '`')) {\n                    regx_1 = new regExp_1('`' + info.sheet + '`', 'gi');\n                    newFormula = newFormula.replace(regx_1, info.visibleName);\n                }\n            });\n            if (cell.formula !== newFormula) {\n                cell.formula = newFormula;\n                if (!(this.parent.calculationMode === 'Manual' && (args.isInsert || args.isDelete))) {\n                    cell.value = null;\n                }\n            }\n        }\n    };\n    WorkbookFormula.prototype.clearUniqueRange = function (row, col, sheet) {\n        var uniqueArgs = { cellIdx: [row, col, row, col], isUnique: false, uniqueRange: '', sheetName: sheet.name };\n        this.parent.notify(_common_index__WEBPACK_IMPORTED_MODULE_1__.checkUniqueRange, uniqueArgs);\n        var range = (0,_common_index__WEBPACK_IMPORTED_MODULE_1__.getRangeIndexes)(uniqueArgs.uniqueRange);\n        for (var i = range[0]; i <= range[2]; i++) {\n            for (var j = range[1]; j <= range[3]; j++) {\n                delete (0,_index__WEBPACK_IMPORTED_MODULE_0__.getCell)(i, j, sheet, false, true).value;\n            }\n        }\n    };\n    WorkbookFormula.prototype.clearAllUniqueFormulaValue = function () {\n        var ranges = this.calculateInstance.uniqueRange;\n        var cell;\n        var sheet;\n        var range;\n        for (var i = 0; i < ranges.length; i++) {\n            var lastIndex = ranges[i].lastIndexOf('!');\n            sheet = (0,_index__WEBPACK_IMPORTED_MODULE_0__.getSheet)(this.parent, (0,_index__WEBPACK_IMPORTED_MODULE_0__.getSheetIndex)(this.parent, ranges[i].substring(0, lastIndex)));\n            range = (0,_common_index__WEBPACK_IMPORTED_MODULE_1__.getRangeIndexes)(ranges[i].substring(lastIndex + 1));\n            cell = (0,_index__WEBPACK_IMPORTED_MODULE_0__.getCell)(range[0], range[1], sheet);\n            if (cell && cell.value === '#SPILL!') {\n                continue;\n            }\n            for (var j = range[0]; j <= range[2]; j++) {\n                for (var k = range[1]; k <= range[3]; k++) {\n                    cell = (0,_index__WEBPACK_IMPORTED_MODULE_0__.getCell)(j, k, sheet);\n                    if (cell && cell.value) {\n                        delete cell.value;\n                    }\n                }\n            }\n        }\n    };\n    WorkbookFormula.prototype.parseFormulaArgument = function (args) {\n        var temp;\n        var str;\n        var i = 0;\n        var arr = [];\n        var formulaVal = this.markSpecialChar(args.formula.replace('=', ''), args.rangeRef);\n        var regExp = RegExp;\n        var validCharRegx = new regExp(args.rangeRef ? /\\(|\\)|=|\\^|>|<|\\+|-|\\*|\\/|%|&/g : /\\(|\\)|=|\\^|>|<|:|\\+|-|\\*|\\/|%|&/g);\n        var sepRegx = new regExp(this.parent.listSeparator, 'g');\n        formulaVal = formulaVal.split(new regExp(validCharRegx.source + '|' + sepRegx.source, 'g'));\n        var len = formulaVal.length;\n        while (i < len) {\n            temp = formulaVal[i];\n            if (!temp) {\n                i++;\n                continue;\n            }\n            if (temp.length === 1) {\n                arr.push(this.isUniqueChar(temp) ? this.getUniqueCharVal(temp) : temp);\n            }\n            else {\n                str = temp[0];\n                if (temp.indexOf('!') > 0) {\n                    if (this.isUniqueChar(str)) {\n                        arr.push(this.getUniqueCharVal(str));\n                        temp = temp.substr(1);\n                    }\n                    str = temp.indexOf('!') + 1;\n                    arr.push(temp.substring(0, str));\n                    temp = temp.substring(str);\n                    str = temp.indexOf(':');\n                    if (str > -1 && temp.indexOf('!') > str) {\n                        arr.push(temp.substring(0, str));\n                        arr.push(':');\n                        temp = temp.substring(str + 1);\n                        str = temp.indexOf('!') + 1;\n                        arr.push(temp.substring(0, str));\n                        arr.push(temp.substring(str));\n                    }\n                    else {\n                        arr.push(temp);\n                    }\n                }\n                else if (this.isUniqueChar(str)) {\n                    arr.push(this.getUniqueCharVal(str));\n                    arr.push(temp.substr(1));\n                }\n                else {\n                    arr.push(temp);\n                }\n            }\n            i++;\n        }\n        args.formulaArr = arr;\n        return arr;\n    };\n    WorkbookFormula.prototype.getUniqueCharVal = function (formula) {\n        switch (formula) {\n            case this.uniqueOBracket:\n                return '(';\n            case this.uniqueCBracket:\n                return ')';\n            case this.uniqueCSeparator:\n                return this.parent.listSeparator;\n            case this.uniqueCOperator:\n                return ':';\n            case this.uniquePOperator:\n                return '+';\n            case this.uniqueSOperator:\n                return '-';\n            case this.uniqueMOperator:\n                return '*';\n            case this.uniqueDOperator:\n                return '/';\n            case this.uniqueModOperator:\n                return '%';\n            case this.uniqueConcateOperator:\n                return '&';\n            case this.uniqueEqualOperator:\n                return '=';\n            case this.uniqueExpOperator:\n                return '^';\n            case this.uniqueGTOperator:\n                return '>';\n            case this.uniqueLTOperator:\n                return '<';\n        }\n        return '';\n    };\n    WorkbookFormula.prototype.isUniqueChar = function (formula) {\n        var code = formula.charCodeAt(formula);\n        return code >= 129 && code <= 142;\n    };\n    WorkbookFormula.prototype.markSpecialChar = function (formula, rangeRef) {\n        formula = formula.replace(/\\(/g, '(' + this.uniqueOBracket).replace(/\\)/g, ')' + this.uniqueCBracket);\n        var regEx = RegExp;\n        if (rangeRef) {\n            formula = formula.replace(new regEx(this.parent.listSeparator, 'g'), this.parent.listSeparator + this.uniqueCSeparator);\n        }\n        else {\n            formula = formula.replace(new regEx(this.parent.listSeparator, 'g'), this.parent.listSeparator + this.uniqueCSeparator).replace(/:/g, \":\" + this.uniqueCOperator);\n        }\n        formula = formula.replace(/\\+/g, '+' + this.uniquePOperator).replace(/-/g, '-' + this.uniqueSOperator);\n        formula = formula.replace(/\\*/g, '*' + this.uniqueMOperator).replace(/\\//g, '/' + this.uniqueDOperator);\n        formula = formula.replace(/&/g, '&' + this.uniqueConcateOperator);\n        formula = formula.replace(/=/g, '=' + this.uniqueEqualOperator);\n        formula = formula.replace(/\\^/g, '^' + this.uniqueExpOperator);\n        formula = formula.replace(/>/g, '>' + this.uniqueGTOperator).replace(/</g, '<' + this.uniqueLTOperator);\n        return formula.replace(/%/g, '%' + this.uniqueModOperator);\n    };\n    WorkbookFormula.prototype.refreshNamedRange = function (args) {\n        var _this = this;\n        if (args.definedNames && args.definedNames.length) {\n            args.definedNames.forEach(function (definedName) {\n                _this.parent.removeDefinedName(definedName.name, definedName.scope);\n                _this.parent.addDefinedName(definedName);\n            });\n            return;\n        }\n        var len = this.parent.definedNames.length;\n        if (!len) {\n            return;\n        }\n        var definedNames = Object.assign({}, this.parent.definedNames);\n        var range;\n        var sheetName;\n        var refAddress;\n        var definedName;\n        var updated;\n        var checkSheetName;\n        var rangeAddress;\n        var containAlphabetAndDigit = new RegExp(/^(?=.*[a-zA-Z])(?=.*\\d)/g);\n        var isValidCellReference;\n        var isFullColumn;\n        for (var i = 0; i < len; i++) {\n            isValidCellReference = true;\n            definedName = definedNames[i];\n            var lastIndex = definedName.refersTo.lastIndexOf('!');\n            refAddress = definedName.refersTo.substring(lastIndex + 1);\n            sheetName = definedName.refersTo.substring(1, lastIndex);\n            checkSheetName = sheetName;\n            if (checkSheetName.match(/'/g)) {\n                checkSheetName = checkSheetName.slice(1, -1);\n            }\n            if (checkSheetName !== args.sheet.name) {\n                continue;\n            }\n            if (!containAlphabetAndDigit.test(refAddress) && refAddress.indexOf(':') > -1) {\n                isValidCellReference = false;\n                isFullColumn = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(refAddress.match(/[0-9]/)) ? true : false;\n            }\n            range = (0,_common_index__WEBPACK_IMPORTED_MODULE_1__.getRangeIndexes)(refAddress);\n            updated = this.parent.updateRangeOnInsertDelete(args, range);\n            if (!isValidCellReference) {\n                rangeAddress = isFullColumn ? (0,_common_index__WEBPACK_IMPORTED_MODULE_1__.getRangeAddress)(range).replace(/\\d/g, '') : (0,_common_index__WEBPACK_IMPORTED_MODULE_1__.getRangeAddress)(range).replace(/[a-zA-Z]/g, '');\n            }\n            else {\n                rangeAddress = (0,_common_index__WEBPACK_IMPORTED_MODULE_1__.getRangeAddress)(range);\n            }\n            if (args.isInsert) {\n                this.updateDefinedNames(definedName, sheetName, rangeAddress, updated);\n            }\n            else {\n                if (args.modelType === 'Row') {\n                    this.updateDefinedNames(definedName, sheetName, rangeAddress, updated, [range[0], range[2]], args);\n                }\n                else if (args.modelType === 'Column') {\n                    this.updateDefinedNames(definedName, sheetName, rangeAddress, updated, [range[1], range[3]], args);\n                }\n            }\n        }\n    };\n    WorkbookFormula.prototype.updateDefinedNames = function (definedName, sheetName, rangeAddress, changed, idx, args) {\n        if (!changed) {\n            return;\n        }\n        var index = this.parent.definedNames.indexOf(definedName);\n        var eventArgs = {\n            action: 'removeDefinedName',\n            isRemoved: false,\n            definedName: definedName.name,\n            scope: definedName.scope,\n            isEventTrigger: true\n        };\n        this.parent.notify(_common_index__WEBPACK_IMPORTED_MODULE_1__.workbookFormulaOperation, eventArgs);\n        if (idx) {\n            var oldDefinedName = { name: definedName.name, comment: definedName.comment, refersTo: definedName.refersTo,\n                scope: definedName.scope };\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            oldDefinedName = new _common_index__WEBPACK_IMPORTED_MODULE_1__.DefineName(this.parent, 'definedNames', oldDefinedName, true);\n            if (args.definedNames) {\n                args.definedNames.push(oldDefinedName);\n            }\n            else {\n                args.definedNames = [oldDefinedName];\n            }\n            if (idx[1] < idx[0]) {\n                return;\n            }\n        }\n        definedName.refersTo = sheetName + '!' + rangeAddress;\n        this.parent.notify(_common_index__WEBPACK_IMPORTED_MODULE_1__.workbookFormulaOperation, { action: 'addDefinedName', definedName: definedName, isAdded: false, index: index, isEventTrigger: true });\n        var refreshArgs = { name: definedName.name, scope: definedName.scope, comment: definedName.comment,\n            refersTo: definedName.refersTo, cancel: false };\n        this.parent.notify('actionComplete', { eventArgs: refreshArgs, action: 'refreshNamedRange' });\n    };\n    return WorkbookFormula;\n}());\n\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-spreadsheet/src/workbook/integrations/formula.js?");

/***/ })

}]);