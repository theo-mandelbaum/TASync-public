"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkej2_vue_samples"] = self["webpackChunkej2_vue_samples"] || []).push([["chunk-vendors-node_modules_syncfusion_ej2-charts_src_chart3d_axis_axis_js-f11ff27a"],{

/***/ "./node_modules/@syncfusion/ej2-charts/src/chart3d/axis/axis.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-charts/src/chart3d/axis/axis.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Chart3DAxis: () => (/* binding */ Chart3DAxis),\n/* harmony export */   Chart3DColumn: () => (/* binding */ Chart3DColumn),\n/* harmony export */   Chart3DMajorGridLines: () => (/* binding */ Chart3DMajorGridLines),\n/* harmony export */   Chart3DMajorTickLines: () => (/* binding */ Chart3DMajorTickLines),\n/* harmony export */   Chart3DMinorGridLines: () => (/* binding */ Chart3DMinorGridLines),\n/* harmony export */   Chart3DMinorTickLines: () => (/* binding */ Chart3DMinorTickLines),\n/* harmony export */   Chart3DRow: () => (/* binding */ Chart3DRow),\n/* harmony export */   Visible3DLabels: () => (/* binding */ Visible3DLabels)\n/* harmony export */ });\n/* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @syncfusion/ej2-base */ \"./node_modules/@syncfusion/ej2-base/index.js\");\n/* harmony import */ var _common_utils_helper__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../common/utils/helper */ \"./node_modules/@syncfusion/ej2-charts/src/common/utils/helper.js\");\n/* harmony import */ var _syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @syncfusion/ej2-svg-base */ \"./node_modules/@syncfusion/ej2-svg-base/index.js\");\n/* harmony import */ var _axis_double_axis__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../axis/double-axis */ \"./node_modules/@syncfusion/ej2-charts/src/chart3d/axis/double-axis.js\");\n/* harmony import */ var _common_model_constants__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../common/model/constants */ \"./node_modules/@syncfusion/ej2-charts/src/common/model/constants.js\");\n/* harmony import */ var _model_chart3d_Interface__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../model/chart3d-Interface */ \"./node_modules/@syncfusion/ej2-charts/src/chart3d/model/chart3d-Interface.js\");\n/* harmony import */ var _utils_chart3dRender__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utils/chart3dRender */ \"./node_modules/@syncfusion/ej2-charts/src/chart3d/utils/chart3dRender.js\");\nvar __extends = (undefined && undefined.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\n\n\n\n\n\n\n\n\n/**\n * Configures the `rows` of the chart.\n */\nvar Chart3DRow = /** @class */ (function (_super) {\n    __extends(Chart3DRow, _super);\n    function Chart3DRow() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        /** @private */\n        _this.axes = [];\n        /** @private */\n        _this.nearSizes = [];\n        /** @private */\n        _this.farSizes = [];\n        return _this;\n    }\n    /**\n     * Computes the size for a three-dimensional axis, row, or column within the 3D chart.\n     *\n     * @param {Chart3DAxis} axis - The three-dimensional axis to compute the size for.\n     * @param {Chart3D} chart - The 3D chart containing the axis and data definitions.\n     * @returns {void}\n     */\n    Chart3DRow.prototype.computeSize = function (axis, chart) {\n        var width = 0;\n        var innerPadding = 5;\n        if (axis.visible && axis.internalVisibility) {\n            width += (axis.majorTickLines.height +\n                axis.findLabelSize(innerPadding, chart));\n        }\n        if (axis.isAxisOpposedPosition) {\n            this.farSizes.push(width);\n        }\n        else {\n            this.nearSizes.push(width);\n        }\n    };\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('100%')\n    ], Chart3DRow.prototype, \"height\", void 0);\n    return Chart3DRow;\n}(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.ChildProperty));\n\n/**\n * Configures the `columns` of the chart.\n */\nvar Chart3DColumn = /** @class */ (function (_super) {\n    __extends(Chart3DColumn, _super);\n    function Chart3DColumn() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        /** @private */\n        _this.axes = [];\n        /** @private */\n        _this.nearSizes = [];\n        /** @private */\n        _this.farSizes = [];\n        return _this;\n    }\n    /**\n     * Computes the size for a three-dimensional axis, row, or column within the 3D chart.\n     *\n     * @param {Chart3DAxis} axis - The three-dimensional axis to compute the size for.\n     * @param {Chart3D} chart - The 3D chart containing the axis and data definitions.\n     * @returns {void}\n     */\n    Chart3DColumn.prototype.computeSize = function (axis, chart) {\n        var height = 0;\n        var innerPadding = 5;\n        if (axis.visible && axis.internalVisibility) {\n            height += (axis.majorTickLines.height +\n                axis.findLabelSize(innerPadding, chart));\n        }\n        if (axis.isAxisOpposedPosition) {\n            this.farSizes.push(height);\n        }\n        else {\n            this.nearSizes.push(height);\n        }\n    };\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('100%')\n    ], Chart3DColumn.prototype, \"width\", void 0);\n    return Chart3DColumn;\n}(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.ChildProperty));\n\n/**\n * Configures the major grid lines in the `axis`.\n */\nvar Chart3DMajorGridLines = /** @class */ (function (_super) {\n    __extends(Chart3DMajorGridLines, _super);\n    function Chart3DMajorGridLines() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(1)\n    ], Chart3DMajorGridLines.prototype, \"width\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(null)\n    ], Chart3DMajorGridLines.prototype, \"color\", void 0);\n    return Chart3DMajorGridLines;\n}(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.ChildProperty));\n\n/**\n * Configures the minor grid lines in the `axis`.\n */\nvar Chart3DMinorGridLines = /** @class */ (function (_super) {\n    __extends(Chart3DMinorGridLines, _super);\n    function Chart3DMinorGridLines() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(0.7)\n    ], Chart3DMinorGridLines.prototype, \"width\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(null)\n    ], Chart3DMinorGridLines.prototype, \"color\", void 0);\n    return Chart3DMinorGridLines;\n}(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.ChildProperty));\n\n/**\n * Configures the major tick lines.\n */\nvar Chart3DMajorTickLines = /** @class */ (function (_super) {\n    __extends(Chart3DMajorTickLines, _super);\n    function Chart3DMajorTickLines() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(0)\n    ], Chart3DMajorTickLines.prototype, \"width\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(5)\n    ], Chart3DMajorTickLines.prototype, \"height\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(null)\n    ], Chart3DMajorTickLines.prototype, \"color\", void 0);\n    return Chart3DMajorTickLines;\n}(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.ChildProperty));\n\n/**\n * Configures the minor tick lines.\n */\nvar Chart3DMinorTickLines = /** @class */ (function (_super) {\n    __extends(Chart3DMinorTickLines, _super);\n    function Chart3DMinorTickLines() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(0)\n    ], Chart3DMinorTickLines.prototype, \"width\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(5)\n    ], Chart3DMinorTickLines.prototype, \"height\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(null)\n    ], Chart3DMinorTickLines.prototype, \"color\", void 0);\n    return Chart3DMinorTickLines;\n}(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.ChildProperty));\n\n/**\n * Configures the axes in the chart.\n *\n * @public\n */\nvar Chart3DAxis = /** @class */ (function (_super) {\n    __extends(Chart3DAxis, _super);\n    function Chart3DAxis(parent, propName, defaultValue, isArray) {\n        var _this = _super.call(this, parent, propName, defaultValue, isArray) || this;\n        /** @private */\n        _this.visibleLabels = [];\n        /** @private */\n        _this.series = [];\n        /** @private */\n        _this.rect = new _syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_2__.Rect(undefined, undefined, 0, 0);\n        /** @private */\n        _this.isStack100 = false;\n        /** @private */\n        _this.updatedRect = null;\n        /** @private */\n        _this.isIntervalInDecimal = true;\n        /** @private */\n        _this.intervalDivs = [10, 5, 2, 1];\n        /** @private */\n        _this.titleCollection = [];\n        /** @private */\n        _this.titleSize = new _syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_2__.Size(0, 0);\n        /**\n         * This property used to hide the axis when series hide from legend click.\n         *\n         * @private\n         */\n        _this.internalVisibility = true;\n        /**\n         * This property is used to place the vertical axis in opposed position and horizontal axis in inversed.\n         * when RTL is enabled in chart\n         *\n         * @private */\n        _this.isRTLEnabled = false;\n        _this.angle = _this.labelRotation;\n        return _this;\n    }\n    /**\n     * Finds the size of labels with specified inner padding within the 3D chart.\n     *\n     * @param {number} innerPadding - The inner padding value for labels.\n     * @param {Chart3D} chart - The 3D chart for which label size is calculated.\n     * @returns {number} - The size of labels accounting for the inner padding.\n     */\n    Chart3DAxis.prototype.findLabelSize = function (innerPadding, chart) {\n        var titleSize = 0;\n        var isHorizontal = this.orientation === 'Horizontal';\n        if (this.title) {\n            var angle = this.titleRotation;\n            if (((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(angle))) {\n                this.titleSize = (0,_syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_2__.measureText)(this.title, this.titleStyle, chart.themeStyle.axisTitleFont);\n                titleSize = this.titleSize.height + innerPadding;\n            }\n            else {\n                this.titleSize = (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_1__.rotateTextSize)(this.titleStyle, this.title, angle, chart, chart.themeStyle.axisTitleFont);\n                titleSize = (this.orientation === 'Vertical' ? this.titleSize.width : this.titleSize.height) + innerPadding;\n            }\n            if (this.rect.width || this.rect.height) {\n                var length_1 = isHorizontal ? this.rect.width : this.rect.height;\n                this.titleCollection = (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_1__.getTitle)(this.title, this.titleStyle, length_1, chart.enableRtl, chart.themeStyle.axisTitleFont);\n                titleSize = (titleSize * this.titleCollection.length);\n            }\n        }\n        var labelSize = titleSize + innerPadding + this.titlePadding + this.labelPadding +\n            ((this.orientation === 'Vertical') ? this.maxLabelSize.width : this.maxLabelSize.height);\n        return labelSize;\n    };\n    /**\n     * Triggers the axis range calculated event with specified minimum, maximum, and interval values.\n     *\n     * @param {Chart3D} chart - The 3D chart for which the range is being calculated.\n     * @param {number} minimum - The minimum value of the range.\n     * @param {number} maximum - The maximum value of the range.\n     * @param {number} interval - The interval value for the range.\n     * @returns {void}\n     */\n    Chart3DAxis.prototype.triggerRangeRender = function (chart, minimum, maximum, interval) {\n        var argsData = {\n            cancel: false, axis: this,\n            minimum: minimum, maximum: maximum, interval: interval\n        };\n        chart.trigger(_common_model_constants__WEBPACK_IMPORTED_MODULE_4__.axisRangeCalculated, argsData);\n        if (!argsData.cancel) {\n            this.visibleRange = {\n                min: argsData.minimum, max: argsData.maximum, interval: argsData.interval,\n                delta: argsData.maximum - argsData.minimum\n            };\n        }\n    };\n    /**\n     * Calculate padding for the axis.\n     *\n     * @param {Chart3D} chart - Chart instance.\n     * @returns {string} - Padding value.\n     * @private\n     */\n    Chart3DAxis.prototype.getRangePadding = function (chart) {\n        var padding = this.rangePadding;\n        if (padding !== 'Auto') {\n            return padding;\n        }\n        switch (this.orientation) {\n            case 'Horizontal':\n                if (chart.requireInvertedAxis) {\n                    padding = (this.isStack100 ? 'Round' : 'Normal');\n                }\n                else {\n                    padding = 'None';\n                }\n                break;\n            case 'Vertical':\n                if (!chart.requireInvertedAxis) {\n                    padding = (this.isStack100 ? 'Round' : 'Normal');\n                }\n                else {\n                    padding = 'None';\n                }\n                break;\n        }\n        return padding;\n    };\n    /**\n     * Calculate maximum label width for the axis.\n     *\n     * @param {Chart3D} chart - Chart instance.\n     * @returns {void}\n     * @private\n     */\n    Chart3DAxis.prototype.getMaxLabelWidth = function (chart) {\n        var pointX;\n        var previousEnd = 0;\n        var isIntersect = false;\n        var isAxisLabelBreak;\n        this.angle = this.labelRotation;\n        this.maxLabelSize = new _syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_2__.Size(0, 0);\n        var action = this.labelIntersectAction;\n        var label;\n        for (var i = 0, len = this.visibleLabels.length; i < len; i++) {\n            label = this.visibleLabels[i];\n            isAxisLabelBreak = (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_1__.isBreakLabel)(label.originalText);\n            if (isAxisLabelBreak) {\n                label.size = (0,_syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_2__.measureText)(label.originalText.replace(/<br>/g, ' '), this.labelStyle, chart.themeStyle.axisLabelFont);\n                label.breakLabelSize = (0,_syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_2__.measureText)(this.enableTrim ? label.text.join('<br>') : label.originalText, this.labelStyle, chart.themeStyle.axisLabelFont);\n            }\n            else {\n                label.size = (0,_syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_2__.measureText)(label.text, this.labelStyle, chart.themeStyle.axisLabelFont);\n            }\n            var width = isAxisLabelBreak ? label.breakLabelSize.width : label.size.width;\n            if (width > this.maxLabelSize.width) {\n                this.maxLabelSize.width = width;\n                this.rotatedLabel = label.text;\n            }\n            var height = isAxisLabelBreak ? label.breakLabelSize.height : label.size.height;\n            if (height > this.maxLabelSize.height) {\n                this.maxLabelSize.height = height;\n            }\n            if (isAxisLabelBreak) {\n                label.text = this.enableTrim ? label.text : label.originalText.split('<br>');\n            }\n            if (action === 'None' || action === 'Hide' || action === 'Trim') {\n                continue;\n            }\n            if ((action !== 'None' || this.angle % 360 === 0) && this.orientation === 'Horizontal' &&\n                this.rect.width > 0 && !isIntersect) {\n                var width1 = isAxisLabelBreak ? label.breakLabelSize.width : label.size.width;\n                pointX = ((0,_utils_chart3dRender__WEBPACK_IMPORTED_MODULE_6__.valueToCoefficients)(label.value, this) * this.rect.width) + this.rect.x;\n                pointX -= width1 / 2;\n                if (this.edgeLabelPlacement === 'Shift') {\n                    if (i === 0 && pointX < this.rect.x) {\n                        pointX = this.rect.x;\n                    }\n                    if (i === this.visibleLabels.length - 1 && ((pointX + width1) > (this.rect.x + this.rect.width))) {\n                        pointX = this.rect.x + this.rect.width - width1;\n                    }\n                }\n                switch (action) {\n                    case 'MultipleRows':\n                        if (i > 0) {\n                            this.findMultiRows(i, pointX, label, isAxisLabelBreak);\n                        }\n                        break;\n                    case 'Rotate45':\n                    case 'Rotate90':\n                        if (i > 0 && (!this.isAxisInverse ? pointX <= previousEnd : pointX + width1 >= previousEnd)) {\n                            this.angle = (action === 'Rotate45') ? 45 : 90;\n                            isIntersect = true;\n                        }\n                        break;\n                    default: {\n                        if (isAxisLabelBreak) {\n                            var result = void 0;\n                            var result1 = [];\n                            var str = void 0;\n                            for (var index = 0; index < label.text.length; index++) {\n                                result = (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_1__.textWrap)(label.text[index], this.rect.width / this.visibleLabels.length, this.labelStyle, chart.enableRtl, null, null, chart.themeStyle.axisLabelFont);\n                                if (result.length > 1) {\n                                    for (var j = 0; j < result.length; j++) {\n                                        str = result[j];\n                                        result1.push(str);\n                                    }\n                                }\n                                else {\n                                    result1.push(result[0]);\n                                }\n                            }\n                            label.text = result1;\n                        }\n                        else {\n                            label.text = (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_1__.textWrap)(label.text, this.rect.width / this.visibleLabels.length, this.labelStyle, chart.enableRtl, null, null, chart.themeStyle.axisLabelFont);\n                        }\n                        var height_1 = (label.size.height * label.text.length);\n                        if (height_1 > this.maxLabelSize.height) {\n                            this.maxLabelSize.height = height_1;\n                        }\n                        break;\n                    }\n                }\n                previousEnd = this.isAxisInverse ? pointX : pointX + width1;\n            }\n        }\n        if (this.angle !== 0 && this.orientation === 'Horizontal') {\n            this.rotatedLabel = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.rotatedLabel) ? '' : this.rotatedLabel;\n            var isHorizontalAngle = this.angle === -360 || this.angle === 0 || this.angle === -180 ||\n                this.angle === 180 || this.angle === 360;\n            if (!isHorizontalAngle && (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_1__.isBreakLabel)(this.rotatedLabel)) {\n                this.maxLabelSize = new _syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_2__.Size(this.maxLabelSize.height, this.maxLabelSize.width);\n            }\n            this.maxLabelSize = (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_1__.rotateTextSize)(this.labelStyle, this.rotatedLabel, this.angle, chart, chart.themeStyle.axisLabelFont);\n        }\n        else if (this.angle !== 0 && this.orientation === 'Vertical') {\n            this.rotatedLabel = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.rotatedLabel) ? '' : this.rotatedLabel;\n            var isHorizontalAngle = this.angle === -360 || this.angle === 0 || this.angle === -180 ||\n                this.angle === 180 || this.angle === 360;\n            // To avoid overlap axis label with chart title or chart legend when it is outside.\n            if (!isHorizontalAngle && (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_1__.isBreakLabel)(this.rotatedLabel)) {\n                this.maxLabelSize = new _syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_2__.Size(this.maxLabelSize.height, this.maxLabelSize.width);\n            }\n            this.maxLabelSize = (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_1__.rotateTextSize)(this.labelStyle, this.rotatedLabel, this.angle, chart, chart.themeStyle.axisLabelFont);\n        }\n    };\n    /**\n     * Finds and manages multiple rows for labels within the 3D chart axis.\n     *\n     * @param {number} length - The length of the labels to be considered.\n     * @param {number} currentX - The current X position.\n     * @param {Visible3DLabels} currentLabel - The label for which multiple rows are being determined.\n     * @param {boolean} isBreakLabels - Indicates whether the labels are break labels.\n     * @returns {void}\n     */\n    Chart3DAxis.prototype.findMultiRows = function (length, currentX, currentLabel, isBreakLabels) {\n        var label;\n        var pointX;\n        var width2;\n        var store = [];\n        var isMultiRows;\n        for (var i = length - 1; i >= 0; i--) {\n            label = this.visibleLabels[i];\n            width2 = isBreakLabels ? label.breakLabelSize.width : label.size.width;\n            pointX = ((0,_utils_chart3dRender__WEBPACK_IMPORTED_MODULE_6__.valueToCoefficients)(label.value, this) * this.rect.width) + this.rect.x;\n            isMultiRows = !this.isAxisInverse ? currentX < (pointX + width2 * 0.5) :\n                currentX + currentLabel.size.width > (pointX - width2 * 0.5);\n            if (isMultiRows) {\n                store.push(label.index);\n                currentLabel.index = (currentLabel.index > label.index) ? currentLabel.index : label.index + 1;\n            }\n            else {\n                currentLabel.index = store.indexOf(label.index) > -1 ? currentLabel.index : label.index;\n            }\n        }\n        var height = ((isBreakLabels ? currentLabel.breakLabelSize.height : currentLabel.size.height) * currentLabel.index) +\n            (5 * (currentLabel.index - 1));\n        if (height > this.maxLabelSize.height) {\n            this.maxLabelSize.height = height;\n        }\n    };\n    /**\n     * Finds the default module for axis.\n     *\n     * @param {Chart3D} chart - Chart instance.\n     * @returns {void}\n     * @private\n     */\n    Chart3DAxis.prototype.getModule = function (chart) {\n        if (this.valueType === 'Double') {\n            this.baseModule = new _axis_double_axis__WEBPACK_IMPORTED_MODULE_3__.Double3D(chart);\n        }\n        else {\n            this.baseModule = chart[(0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_1__.firstToLowerCase)(this.valueType) + '3DModule'];\n        }\n    };\n    /**\n     * Set the axis `opposedPosition` and `isInversed` properties.\n     *\n     * @returns {void}\n     * @private\n     */\n    Chart3DAxis.prototype.setIsInversedAndOpposedPosition = function () {\n        this.isAxisOpposedPosition = this.opposedPosition || (this.isRTLEnabled && this.orientation === 'Vertical');\n        this.isAxisInverse = this.isInversed || (this.isRTLEnabled && this.orientation === 'Horizontal');\n    };\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({ fontFamily: null, size: '12px', fontStyle: 'Normal', fontWeight: '400', color: null }, _model_chart3d_Interface__WEBPACK_IMPORTED_MODULE_5__.Chart3DTextFont)\n    ], Chart3DAxis.prototype, \"labelStyle\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('')\n    ], Chart3DAxis.prototype, \"title\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({ fontFamily: null, size: null, fontStyle: null, fontWeight: null, color: null }, _model_chart3d_Interface__WEBPACK_IMPORTED_MODULE_5__.Chart3DTextFont)\n    ], Chart3DAxis.prototype, \"titleStyle\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('')\n    ], Chart3DAxis.prototype, \"labelFormat\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('')\n    ], Chart3DAxis.prototype, \"skeleton\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('DateTime')\n    ], Chart3DAxis.prototype, \"skeletonType\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(0)\n    ], Chart3DAxis.prototype, \"plotOffset\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(null)\n    ], Chart3DAxis.prototype, \"plotOffsetLeft\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(null)\n    ], Chart3DAxis.prototype, \"plotOffsetTop\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(null)\n    ], Chart3DAxis.prototype, \"plotOffsetRight\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(null)\n    ], Chart3DAxis.prototype, \"plotOffsetBottom\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], Chart3DAxis.prototype, \"isIndexed\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(10)\n    ], Chart3DAxis.prototype, \"logBase\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(0)\n    ], Chart3DAxis.prototype, \"columnIndex\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(0)\n    ], Chart3DAxis.prototype, \"rowIndex\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(1)\n    ], Chart3DAxis.prototype, \"span\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(null)\n    ], Chart3DAxis.prototype, \"desiredIntervals\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(3)\n    ], Chart3DAxis.prototype, \"maximumLabels\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], Chart3DAxis.prototype, \"opposedPosition\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('Auto')\n    ], Chart3DAxis.prototype, \"rangePadding\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('Double')\n    ], Chart3DAxis.prototype, \"valueType\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('None')\n    ], Chart3DAxis.prototype, \"edgeLabelPlacement\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('Auto')\n    ], Chart3DAxis.prototype, \"intervalType\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('OnTicks')\n    ], Chart3DAxis.prototype, \"labelPlacement\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('')\n    ], Chart3DAxis.prototype, \"name\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(true)\n    ], Chart3DAxis.prototype, \"visible\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(0)\n    ], Chart3DAxis.prototype, \"minorTicksPerInterval\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(0)\n    ], Chart3DAxis.prototype, \"labelRotation\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(null)\n    ], Chart3DAxis.prototype, \"titleRotation\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(null)\n    ], Chart3DAxis.prototype, \"minimum\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(null)\n    ], Chart3DAxis.prototype, \"maximum\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(null)\n    ], Chart3DAxis.prototype, \"interval\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(34)\n    ], Chart3DAxis.prototype, \"maximumLabelWidth\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], Chart3DAxis.prototype, \"enableTrim\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(5)\n    ], Chart3DAxis.prototype, \"labelPadding\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(5)\n    ], Chart3DAxis.prototype, \"titlePadding\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({}, Chart3DMajorTickLines)\n    ], Chart3DAxis.prototype, \"majorTickLines\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({}, Chart3DMinorTickLines)\n    ], Chart3DAxis.prototype, \"minorTickLines\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({}, Chart3DMajorGridLines)\n    ], Chart3DAxis.prototype, \"majorGridLines\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({}, Chart3DMinorGridLines)\n    ], Chart3DAxis.prototype, \"minorGridLines\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice ? 'Rotate45' : 'Trim')\n    ], Chart3DAxis.prototype, \"labelIntersectAction\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], Chart3DAxis.prototype, \"isInversed\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(true)\n    ], Chart3DAxis.prototype, \"startFromZero\", void 0);\n    return Chart3DAxis;\n}(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.ChildProperty));\n\n/**\n * Calculates the axis visible labels.\n *\n * @private\n */\nvar Visible3DLabels = /** @class */ (function () {\n    function Visible3DLabels(text, value, labelStyle, originalText, size, breakLabelSize, index) {\n        if (size === void 0) { size = new _syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_2__.Size(0, 0); }\n        if (breakLabelSize === void 0) { breakLabelSize = new _syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_2__.Size(0, 0); }\n        if (index === void 0) { index = 1; }\n        this.text = text;\n        this.originalText = originalText;\n        this.value = value;\n        this.labelStyle = labelStyle;\n        this.size = size;\n        this.breakLabelSize = breakLabelSize;\n        this.index = index;\n    }\n    return Visible3DLabels;\n}());\n\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-charts/src/chart3d/axis/axis.js?");

/***/ })

}]);