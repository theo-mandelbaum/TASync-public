"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkej2_vue_samples"] = self["webpackChunkej2_vue_samples"] || []).push([["chunk-vendors-node_modules_syncfusion_ej2-grids_src_grid_renderer_ce"],{

/***/ "./node_modules/@syncfusion/ej2-grids/src/grid/renderer/cell-renderer.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-grids/src/grid/renderer/cell-renderer.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CellRenderer: () => (/* binding */ CellRenderer)\n/* harmony export */ });\n/* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @syncfusion/ej2-base */ \"./node_modules/@syncfusion/ej2-base/index.js\");\n/* harmony import */ var _base_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../base/util */ \"./node_modules/@syncfusion/ej2-grids/src/grid/base/util.js\");\n/* harmony import */ var _syncfusion_ej2_buttons__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @syncfusion/ej2-buttons */ \"./node_modules/@syncfusion/ej2-buttons/index.js\");\n/* harmony import */ var _base_constant__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../base/constant */ \"./node_modules/@syncfusion/ej2-grids/src/grid/base/constant.js\");\n/* harmony import */ var _base_enum__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../base/enum */ \"./node_modules/@syncfusion/ej2-grids/src/grid/base/enum.js\");\n/* harmony import */ var _base_string_literals__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../base/string-literals */ \"./node_modules/@syncfusion/ej2-grids/src/grid/base/string-literals.js\");\n\n\n\n\n\n\n\n/**\n * CellRenderer class which responsible for building cell content.\n *\n * @hidden\n */\nvar CellRenderer = /** @class */ (function () {\n    function CellRenderer(parent, locator) {\n        this.localizer = locator.getService('localization');\n        this.formatter = locator.getService('valueFormatter');\n        this.parent = parent;\n        this.element = this.parent.createElement('TD', { className: _base_string_literals__WEBPACK_IMPORTED_MODULE_5__.rowCell, attrs: { role: 'gridcell', tabindex: '-1' } });\n        this.rowChkBox = this.parent.createElement('input', { className: 'e-checkselect', attrs: { 'type': 'checkbox', 'aria-label': this.localizer.getConstant('SelectRow') } });\n    }\n    /**\n     * Function to return the wrapper for the TD content\n     *\n     * @returns {string | Element} returns the string\n     */\n    CellRenderer.prototype.getGui = function () {\n        return '';\n    };\n    /**\n     * Function to format the cell value.\n     *\n     * @param  {Column} column - specifies the column\n     * @param  {Object} value - specifies the value\n     * @param  {Object} data - specifies the data\n     * @returns {string} returns the format\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    CellRenderer.prototype.format = function (column, value, data) {\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(column.format)) {\n            if (column.type === 'number' && isNaN(parseInt(value, 10))) {\n                value = null;\n            }\n            if (column.type === 'dateonly' && typeof value === 'string' && value) {\n                var arr = value.split(/[^0-9.]/);\n                value = new Date(parseInt(arr[0], 10), parseInt(arr[1], 10) - 1, parseInt(arr[2], 10));\n            }\n            value = this.formatter.toView(value, column.getFormatter());\n        }\n        return (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(value) ? '' : value.toString();\n    };\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    CellRenderer.prototype.evaluate = function (node, cell, data, attributes, fData, isEdit) {\n        var _a;\n        var result;\n        if (cell.column.template) {\n            var isReactCompiler = this.parent.isReact && typeof (cell.column.template) !== 'string' && !(cell.column.template.prototype && cell.column.template.prototype.CSPTemplate);\n            var isReactChild = this.parent.parentDetails && this.parent.parentDetails.parentInstObj &&\n                this.parent.parentDetails.parentInstObj.isReact;\n            var isReactPrintGrid = this.parent.printGridParent && this.parent.printGridParent.isReact;\n            var literals_1 = ['index'];\n            var dummyData = (0,_base_util__WEBPACK_IMPORTED_MODULE_1__.extendObjWithFn)({}, data, (_a = {}, _a[_base_constant__WEBPACK_IMPORTED_MODULE_3__.foreignKeyData] = fData, _a.column = cell.column, _a));\n            var templateID = this.parent.element.id + cell.column.uid;\n            var str = 'isStringTemplate';\n            if (isReactCompiler || isReactChild || isReactPrintGrid) {\n                var copied = { 'index': attributes[literals_1[0]] };\n                cell.column.getColumnTemplate()((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)(copied, dummyData), this.parent, 'columnTemplate', templateID, this.parent[\"\" + str], null, node);\n            }\n            else {\n                result = cell.column.getColumnTemplate()((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)({ 'index': attributes[literals_1[0]] }, dummyData), this.parent, 'template', templateID, this.parent[\"\" + str], undefined, undefined, this.parent['root']);\n            }\n            if (!isReactCompiler && !isReactChild && !isReactPrintGrid) {\n                (0,_base_util__WEBPACK_IMPORTED_MODULE_1__.appendChildren)(node, result);\n            }\n            this.parent.notify('template-result', { template: result });\n            result = null;\n            if (cell.column.templateOptions.enableAriaLabel) {\n                node.setAttribute('aria-label', node.innerText + this.localizer.getConstant('TemplateCell') +\n                    this.localizer.getConstant('ColumnHeader') + cell.column.headerText);\n            }\n            return false;\n        }\n        return true;\n    };\n    /**\n     * Function to invoke the custom formatter available in the column object.\n     *\n     * @param  {Column} column - specifies the column\n     * @param  {Object} value - specifies the value\n     * @param  {Object} data - specifies the data\n     * @returns {Object} returns the object\n     */\n    CellRenderer.prototype.invokeFormatter = function (column, value, data) {\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(column.formatter)) {\n            if ((0,_base_util__WEBPACK_IMPORTED_MODULE_1__.doesImplementInterface)(column.formatter, 'getValue')) {\n                var formatter = column.formatter;\n                value = new formatter().getValue(column, data);\n            }\n            else if (typeof column.formatter === 'function') {\n                value = column.formatter(column, data);\n            }\n            else {\n                value = column.formatter.getValue(column, data);\n            }\n        }\n        return value;\n    };\n    /**\n     * Function to render the cell content based on Column object.\n     *\n     * @param {Cell<Column>} cell - specifies the cell\n     * @param {Object} data - specifies the data\n     * @param {Object} attributes - specifies the attributes\n     * @param {boolean} isExpand - specifies the boolean for expand\n     * @param {boolean} isEdit - specifies the boolean for edit\n     * @returns {Element} returns the element\n     */\n    CellRenderer.prototype.render = function (cell, data, attributes, isExpand, isEdit) {\n        return this.refreshCell(cell, data, attributes, isEdit);\n    };\n    /**\n     * Function to refresh the cell content based on Column object.\n     *\n     * @param {Element} td - specifies the element\n     * @param {Cell<Column>} cell - specifies the cell\n     * @param {Object} data - specifies the data\n     * @param {Object} attributes - specifies the attribute\n     * @returns {void}\n     */\n    CellRenderer.prototype.refreshTD = function (td, cell, data, attributes) {\n        var isEdit = this.parent.editSettings.mode === 'Batch' && td.classList.contains('e-editedbatchcell');\n        if (this.parent.isReact) {\n            var cellIndex = td.cellIndex;\n            var parentRow = td.parentElement;\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.remove)(td);\n            var newTD = this.refreshCell(cell, data, attributes, isEdit);\n            this.cloneAttributes(newTD, td);\n            if (parentRow.cells.length !== cellIndex - 1) {\n                parentRow.insertBefore(newTD, parentRow.cells[parseInt(cellIndex.toString(), 10)]);\n            }\n            else {\n                parentRow.appendChild(newTD);\n            }\n        }\n        else {\n            var node = this.refreshCell(cell, data, attributes, isEdit);\n            td.innerHTML = '';\n            var arialabelText = node.getAttribute('aria-label');\n            // eslint-disable-next-line @typescript-eslint/no-unused-expressions\n            arialabelText ? td.setAttribute('aria-label', arialabelText) : null;\n            var elements = [].slice.call(node.childNodes);\n            for (var _i = 0, elements_1 = elements; _i < elements_1.length; _i++) {\n                var elem = elements_1[_i];\n                td.appendChild(elem);\n            }\n        }\n    };\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    CellRenderer.prototype.cloneAttributes = function (target, source) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        var attrs = source.attributes;\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        var i = attrs.length;\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        var attr;\n        while (i--) {\n            attr = attrs[parseInt(i.toString(), 10)];\n            target.setAttribute(attr.name, attr.value);\n        }\n    };\n    CellRenderer.prototype.refreshCell = function (cell, data, attributes, isEdit) {\n        var _a;\n        var node = this.element.cloneNode();\n        var column = cell.column;\n        var fData;\n        if (cell.isForeignKey) {\n            fData = cell.foreignKeyData[0] || (_a = {}, _a[column.foreignKeyValue] = column.format ? null : '', _a);\n        }\n        //Prepare innerHtml\n        var innerHtml = this.getGui();\n        var value = cell.isForeignKey ? this.getValue(column.foreignKeyValue, fData, column) :\n            this.getValue(column.field, data, column);\n        if ((column.type === 'date' || column.type === 'datetime') && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(value)) {\n            value = new Date(value);\n        }\n        if (column.type === 'dateonly' && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(value) && typeof value === 'string') {\n            var arr = value.split(/[^0-9.]/);\n            value = new Date(parseInt(arr[0], 10), parseInt(arr[1], 10) - 1, parseInt(arr[2], 10));\n        }\n        value = this.format(column, value, data);\n        innerHtml = value.toString();\n        if (column.type === 'boolean' && !column.displayAsCheckBox) {\n            var localeStr = (value !== 'true' && value !== 'false') ? null : value === 'true' ? 'True' : 'False';\n            innerHtml = localeStr ? this.localizer.getConstant(localeStr) : innerHtml;\n        }\n        var fromFormatter = this.invokeFormatter(column, value, data);\n        innerHtml = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(column.formatter) ? (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(fromFormatter) ? '' : fromFormatter.toString() : innerHtml;\n        if (this.evaluate(node, cell, data, attributes, fData, isEdit) && column.type !== 'checkbox') {\n            this.appendHtml(node, this.parent.sanitize(innerHtml), column.getDomSetter ? column.getDomSetter() : 'innerHTML');\n        }\n        else if (column.type === 'checkbox') {\n            node.classList.add(_base_string_literals__WEBPACK_IMPORTED_MODULE_5__.gridChkBox);\n            if (this.parent.selectionSettings.persistSelection) {\n                value = value === 'true';\n            }\n            else {\n                value = false;\n            }\n            var checkWrap = (0,_syncfusion_ej2_buttons__WEBPACK_IMPORTED_MODULE_2__.createCheckBox)(this.parent.createElement, false, { checked: value, label: ' ' });\n            if (this.parent.cssClass) {\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([checkWrap], [this.parent.cssClass]);\n            }\n            this.rowChkBox.id = 'checkbox-' + cell.rowID;\n            checkWrap.insertBefore(this.rowChkBox.cloneNode(), checkWrap.firstChild);\n            node.appendChild(checkWrap);\n        }\n        if (this.parent.checkAllRows === 'Check' && this.parent.enableVirtualization) {\n            cell.isSelected = true;\n        }\n        this.setAttributes(node, cell, attributes);\n        if (column.type === 'boolean' && column.displayAsCheckBox) {\n            var checked = isNaN(parseInt(value.toString(), 10)) ? value === 'true' : parseInt(value.toString(), 10) > 0;\n            var checkWrap = (0,_syncfusion_ej2_buttons__WEBPACK_IMPORTED_MODULE_2__.createCheckBox)(this.parent.createElement, false, { checked: checked, label: ' ' });\n            node.innerHTML = '';\n            node.classList.add('e-gridchkbox-cell');\n            checkWrap.classList.add('e-checkbox-disabled');\n            if (this.parent.cssClass) {\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([checkWrap], [this.parent.cssClass]);\n            }\n            node.appendChild(checkWrap);\n        }\n        if (node.classList.contains('e-summarycell') && !data.key) {\n            var uid = node.getAttribute('e-mappinguid');\n            column = this.parent.getColumnByUid(uid);\n            node.setAttribute('aria-label', innerHtml + this.localizer.getConstant('ColumnHeader') + cell.column.headerText);\n        }\n        if (this.parent.isFrozenGrid() && (!data || (data && !data.key))) {\n            (0,_base_util__WEBPACK_IMPORTED_MODULE_1__.addStickyColumnPosition)(this.parent, column, node);\n        }\n        return node;\n    };\n    /**\n     * Function to specifies how the result content to be placed in the cell.\n     *\n     * @param {Element} node - specifies the node\n     * @param {string|Element} innerHtml - specifies the innerHTML\n     * @param {string} property - specifies the element\n     * @returns {Element} returns the element\n     */\n    CellRenderer.prototype.appendHtml = function (node, innerHtml, property) {\n        if (property === void 0) { property = 'innerHTML'; }\n        node[\"\" + property] = innerHtml;\n        return node;\n    };\n    /**\n     * @param {HTMLElement} node - specifies the node\n     * @param {cell<Column>} cell - specifies the cell\n     * @param {Object} attributes - specifies the attributes\n     * @returns {void}\n     * @hidden\n     */\n    CellRenderer.prototype.setAttributes = function (node, cell, attributes) {\n        var column = cell.column;\n        this.buildAttributeFromCell(node, cell, column.type === 'checkbox');\n        (0,_base_util__WEBPACK_IMPORTED_MODULE_1__.setStyleAndAttributes)(node, attributes);\n        (0,_base_util__WEBPACK_IMPORTED_MODULE_1__.setStyleAndAttributes)(node, cell.attributes);\n        if (column.customAttributes) {\n            (0,_base_util__WEBPACK_IMPORTED_MODULE_1__.setStyleAndAttributes)(node, column.customAttributes);\n        }\n        if (this.parent.rowRenderingMode === 'Vertical') {\n            (0,_base_util__WEBPACK_IMPORTED_MODULE_1__.setStyleAndAttributes)(node, { 'data-cell': column.headerText });\n        }\n        if (column.textAlign) {\n            var alignmentClassMap = { right: 'e-rightalign', left: 'e-leftalign', center: 'e-centeralign', justify: 'e-justifyalign' };\n            if (alignmentClassMap[column.textAlign.toLowerCase()]) {\n                node.classList.add(alignmentClassMap[column.textAlign.toLowerCase()]);\n            }\n        }\n        if (column.clipMode === 'Clip' || (!column.clipMode && this.parent.clipMode === 'Clip')) {\n            node.classList.add('e-gridclip');\n        }\n        else if (column.clipMode === 'EllipsisWithTooltip' || (!column.clipMode && this.parent.clipMode === 'EllipsisWithTooltip')\n            && !(this.parent.allowTextWrap && (this.parent.textWrapSettings.wrapMode === 'Content'\n                || this.parent.textWrapSettings.wrapMode === 'Both'))) {\n            if (column.type !== 'checkbox') {\n                node.classList.add('e-ellipsistooltip');\n            }\n        }\n    };\n    CellRenderer.prototype.buildAttributeFromCell = function (node, cell, isCheckBoxType) {\n        var attr = {};\n        var classes = [];\n        if (cell.colSpan) {\n            attr.colSpan = cell.colSpan;\n        }\n        if (cell.rowSpan) {\n            attr.rowSpan = cell.rowSpan;\n        }\n        if (cell.isTemplate) {\n            classes.push('e-templatecell');\n        }\n        if (cell.isSelected) {\n            classes.push.apply(classes, ['e-selectionbackground', 'e-active']);\n            if (isCheckBoxType) {\n                node.querySelector('.e-frame').classList.add('e-check');\n            }\n        }\n        if (cell.isColumnSelected) {\n            classes.push.apply(classes, ['e-columnselection']);\n        }\n        if (cell.cellType === _base_enum__WEBPACK_IMPORTED_MODULE_4__.CellType.Header) {\n            attr[_base_string_literals__WEBPACK_IMPORTED_MODULE_5__.ariaColIndex] = cell.colIndex + 1;\n        }\n        else if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(cell.index)) {\n            attr[_base_string_literals__WEBPACK_IMPORTED_MODULE_5__.ariaColIndex] = cell.index + 1;\n        }\n        if (!cell.visible) {\n            classes.push('e-hide');\n        }\n        attr.class = classes;\n        (0,_base_util__WEBPACK_IMPORTED_MODULE_1__.setStyleAndAttributes)(node, attr);\n    };\n    CellRenderer.prototype.getValue = function (field, data, column) {\n        return column.valueAccessor(field, data, column);\n    };\n    return CellRenderer;\n}());\n\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-grids/src/grid/renderer/cell-renderer.js?");

/***/ }),

/***/ "./node_modules/@syncfusion/ej2-grids/src/grid/renderer/combobox-edit-cell.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-grids/src/grid/renderer/combobox-edit-cell.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ComboboxEditCell: () => (/* binding */ ComboboxEditCell)\n/* harmony export */ });\n/* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @syncfusion/ej2-base */ \"./node_modules/@syncfusion/ej2-base/index.js\");\n/* harmony import */ var _syncfusion_ej2_dropdowns__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @syncfusion/ej2-dropdowns */ \"./node_modules/@syncfusion/ej2-dropdowns/index.js\");\n/* harmony import */ var _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @syncfusion/ej2-data */ \"./node_modules/@syncfusion/ej2-data/index.js\");\n/* harmony import */ var _base_util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../base/util */ \"./node_modules/@syncfusion/ej2-grids/src/grid/base/util.js\");\n/* harmony import */ var _edit_cell_base__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./edit-cell-base */ \"./node_modules/@syncfusion/ej2-grids/src/grid/renderer/edit-cell-base.js\");\nvar __extends = (undefined && undefined.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n\n\n\n\n\n/**\n * `ComboBoxEditCell` is used to handle ComboBoxEdit cell type editing.\n *\n * @hidden\n */\nvar ComboboxEditCell = /** @class */ (function (_super) {\n    __extends(ComboboxEditCell, _super);\n    function ComboboxEditCell() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    ComboboxEditCell.prototype.write = function (args) {\n        this.column = args.column;\n        var isInlineMode = this.parent.editSettings.mode !== 'Dialog';\n        this.obj = new _syncfusion_ej2_dropdowns__WEBPACK_IMPORTED_MODULE_1__.ComboBox((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)({\n            dataSource: this.parent.dataSource instanceof _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_2__.DataManager ?\n                this.parent.dataSource : new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_2__.DataManager(this.parent.dataSource),\n            query: new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_2__.Query().select(args.column.field),\n            fields: { value: args.column.field },\n            value: (0,_base_util__WEBPACK_IMPORTED_MODULE_3__.getObject)(args.column.field, args.rowData),\n            enableRtl: this.parent.enableRtl, actionComplete: this.finalValue.bind(this),\n            placeholder: isInlineMode ? '' : args.column.headerText,\n            floatLabelType: isInlineMode ? 'Never' : 'Always',\n            enabled: (0,_base_util__WEBPACK_IMPORTED_MODULE_3__.isEditable)(args.column, args.requestType, args.element),\n            cssClass: this.parent.cssClass ? this.parent.cssClass : null\n        }, args.column.edit.params));\n        this.obj.appendTo(args.element);\n    };\n    ComboboxEditCell.prototype.finalValue = function (val) {\n        val.result = _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_2__.DataUtil.distinct(val.result, this.obj.fields.value, true);\n        if (this.column.dataSource) {\n            this.column.dataSource.dataSource.json = val.result;\n        }\n    };\n    return ComboboxEditCell;\n}(_edit_cell_base__WEBPACK_IMPORTED_MODULE_4__.EditCellBase));\n\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-grids/src/grid/renderer/combobox-edit-cell.js?");

/***/ }),

/***/ "./node_modules/@syncfusion/ej2-grids/src/grid/renderer/command-column-renderer.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-grids/src/grid/renderer/command-column-renderer.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CommandColumnRenderer: () => (/* binding */ CommandColumnRenderer)\n/* harmony export */ });\n/* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @syncfusion/ej2-base */ \"./node_modules/@syncfusion/ej2-base/index.js\");\n/* harmony import */ var _syncfusion_ej2_buttons__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @syncfusion/ej2-buttons */ \"./node_modules/@syncfusion/ej2-buttons/index.js\");\n/* harmony import */ var _cell_renderer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./cell-renderer */ \"./node_modules/@syncfusion/ej2-grids/src/grid/renderer/cell-renderer.js\");\n/* harmony import */ var _base_util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../base/util */ \"./node_modules/@syncfusion/ej2-grids/src/grid/base/util.js\");\n/* harmony import */ var _base_constant__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../base/constant */ \"./node_modules/@syncfusion/ej2-grids/src/grid/base/constant.js\");\nvar __extends = (undefined && undefined.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n\n\n\n\n\n/**\n * `CommandColumn` used to render command column in grid\n *\n * @hidden\n */\nvar CommandColumnRenderer = /** @class */ (function (_super) {\n    __extends(CommandColumnRenderer, _super);\n    function CommandColumnRenderer(parent, locator) {\n        var _this = _super.call(this, parent, locator) || this;\n        _this.buttonElement = _this.parent.createElement('button', {});\n        _this.unbounDiv = _this.parent.createElement('div', { className: 'e-unboundcelldiv' });\n        _this.childRefs = [];\n        _this.element = _this.parent.createElement('TD', {\n            className: 'e-rowcell e-unboundcell', attrs: {\n                tabindex: '-1', role: 'gridcell'\n            }\n        });\n        _this.parent.on(_base_constant__WEBPACK_IMPORTED_MODULE_4__.destroy, _this.destroyButtons, _this);\n        _this.parent.on(_base_constant__WEBPACK_IMPORTED_MODULE_4__.commandColumnDestroy, _this.destroyButtons, _this);\n        return _this;\n    }\n    CommandColumnRenderer.prototype.destroyButtons = function (args) {\n        for (var i = 0; i < this.childRefs.length; i++) {\n            if (this.childRefs[parseInt(i.toString(), 10)] && !this.childRefs[parseInt(i.toString(), 10)].isDestroyed\n                && !(this.parent.editSettings.showAddNewRow && this.parent.enableVirtualization\n                    && (0,_base_util__WEBPACK_IMPORTED_MODULE_3__.parentsUntil)(this.childRefs[parseInt(i.toString(), 10)].element, 'e-addedrow'))) {\n                this.childRefs[parseInt(i.toString(), 10)].destroy();\n                if (this.childRefs[parseInt(i.toString(), 10)].element) {\n                    this.childRefs[parseInt(i.toString(), 10)].element.innerHTML = '';\n                }\n            }\n        }\n        this.childRefs = [];\n        if (args.type === 'refreshCommandColumn') {\n            var elem = this.parent.element.querySelectorAll('.e-gridcontent .e-unboundcell');\n            if (elem.length) {\n                for (var i = 0; i < elem.length; i++) {\n                    if (elem[parseInt(i.toString(), 10)] && !(this.parent.editSettings.showAddNewRow && this.parent.enableVirtualization\n                        && (0,_base_util__WEBPACK_IMPORTED_MODULE_3__.parentsUntil)(elem[parseInt(i.toString(), 10)], 'e-addedrow'))) {\n                        if (elem[parseInt(i.toString(), 10)].querySelector('.e-unboundcelldiv')) {\n                            elem[parseInt(i.toString(), 10)].querySelector('.e-unboundcelldiv').innerHTML = '';\n                        }\n                        elem[parseInt(i.toString(), 10)].innerHTML = '';\n                    }\n                }\n                elem = null;\n            }\n        }\n        else {\n            this.parent.off(_base_constant__WEBPACK_IMPORTED_MODULE_4__.destroy, this.destroyButtons);\n            this.parent.off(_base_constant__WEBPACK_IMPORTED_MODULE_4__.commandColumnDestroy, this.destroyButtons);\n        }\n    };\n    /**\n     * Function to render the cell content based on Column object.\n     *\n     * @param {cell<Column>} cell - specifies the cell\n     * @param {Object} data - specifies the data\n     * @param {Object} attributes - specifies the attributes\n     * @param {boolean} isVirtualEdit - specifies virtual scroll editing\n     * @returns {Element} returns the element\n     */\n    CommandColumnRenderer.prototype.render = function (cell, data, attributes, isVirtualEdit) {\n        var node = this.element.cloneNode();\n        var uid = 'uid';\n        node.appendChild(this.unbounDiv.cloneNode());\n        node.setAttribute('aria-label', this.localizer.getConstant('CommandColumnAria') + cell.column.headerText);\n        if (cell.column.commandsTemplate) {\n            if (this.parent.isReact && typeof (cell.column.commandsTemplate) !== 'string' && !(cell.column.commandsTemplate.prototype &&\n                cell.column.commandsTemplate.prototype.CSPTemplate)) {\n                var tempID = this.parent + 'commandsTemplate';\n                cell.column.getColumnTemplate()(data, this.parent, 'commandsTemplate', tempID, null, null, node.firstElementChild);\n                this.parent.renderTemplates();\n            }\n            else {\n                (0,_base_util__WEBPACK_IMPORTED_MODULE_3__.appendChildren)(node.firstElementChild, cell.column.getColumnTemplate()(data, this.parent, 'commandsTemplate', null, null, null, null, this.parent.root));\n            }\n        }\n        else {\n            for (var _i = 0, _a = cell.commands; _i < _a.length; _i++) {\n                var command = _a[_i];\n                node = this.renderButton(node, command, attributes.index, command[\"\" + uid]);\n            }\n        }\n        this.setAttributes(node, cell, attributes);\n        if ((!this.parent.enableVirtualization && (this.parent.isEdit && (!this.parent.editSettings.showAddNewRow ||\n            (this.parent.editSettings.showAddNewRow && (!this.parent.element.querySelector('.e-editedrow')))))) || isVirtualEdit) {\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([].slice.call(node.getElementsByClassName('e-edit-delete')), 'e-hide');\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([].slice.call(node.getElementsByClassName('e-save-cancel')), 'e-hide');\n        }\n        else {\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([].slice.call(node.getElementsByClassName('e-save-cancel')), 'e-hide');\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([].slice.call(node.getElementsByClassName('e-edit-delete')), 'e-hide');\n        }\n        if (this.parent.isFrozenGrid()) {\n            (0,_base_util__WEBPACK_IMPORTED_MODULE_3__.addStickyColumnPosition)(this.parent, cell.column, node);\n        }\n        return node;\n    };\n    CommandColumnRenderer.prototype.renderButton = function (node, buttonOption, index, uid) {\n        var button = this.buttonElement.cloneNode();\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.attributes)(button, {\n            'id': this.parent.element.id + (buttonOption.type || '') + '_' + index + '_' + uid, 'type': 'button',\n            title: !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(buttonOption.title) ? buttonOption.title :\n                buttonOption.buttonOption.content || this.localizer.getConstant(buttonOption.type) || buttonOption.type,\n            'data-uid': uid\n        });\n        button.onclick = buttonOption.buttonOption.click;\n        buttonOption.buttonOption.cssClass = this.parent.cssClass ?\n            buttonOption.buttonOption.cssClass + ' ' + this.parent.cssClass : buttonOption.buttonOption.cssClass;\n        var buttonObj = new _syncfusion_ej2_buttons__WEBPACK_IMPORTED_MODULE_1__.Button(buttonOption.buttonOption, button);\n        this.childRefs.push(buttonObj);\n        buttonObj.commandType = buttonOption.type;\n        node.firstElementChild.appendChild(buttonObj.element);\n        switch (buttonOption.type) {\n            case 'Edit':\n            case 'Delete':\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([button], ['e-edit-delete', 'e-' + buttonOption.type.toLowerCase() + 'button']);\n                break;\n            case 'Cancel':\n            case 'Save':\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([button], ['e-save-cancel', 'e-' + buttonOption.type.toLowerCase() + 'button']);\n                break;\n        }\n        return node;\n    };\n    return CommandColumnRenderer;\n}(_cell_renderer__WEBPACK_IMPORTED_MODULE_2__.CellRenderer));\n\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-grids/src/grid/renderer/command-column-renderer.js?");

/***/ })

}]);