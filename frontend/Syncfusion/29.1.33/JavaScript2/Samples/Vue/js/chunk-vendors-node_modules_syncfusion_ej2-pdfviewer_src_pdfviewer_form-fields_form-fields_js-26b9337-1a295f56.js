"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkej2_vue_samples"] = self["webpackChunkej2_vue_samples"] || []).push([["chunk-vendors-node_modules_syncfusion_ej2-pdfviewer_src_pdfviewer_form-fields_form-fields_js-26b9337-1a295f56"],{

/***/ "./node_modules/@syncfusion/ej2-pdfviewer/src/pdfviewer/form-fields/form-fields.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-pdfviewer/src/pdfviewer/form-fields/form-fields.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FormFields: () => (/* binding */ FormFields)\n/* harmony export */ });\n/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../index */ \"./node_modules/@syncfusion/ej2-pdfviewer/src/pdfviewer/index.js\");\n/* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @syncfusion/ej2-base */ \"./node_modules/@syncfusion/ej2-base/index.js\");\n/* harmony import */ var _syncfusion_ej2_drawings__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @syncfusion/ej2-drawings */ \"./node_modules/@syncfusion/ej2-drawings/index.js\");\n/* harmony import */ var _syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @syncfusion/ej2-popups */ \"./node_modules/@syncfusion/ej2-popups/index.js\");\nvar __assign = (undefined && undefined.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\n\n\n\n\n/**\n * The `FormFields` module is to render formfields in the PDF document.\n *\n * @hidden\n */\nvar FormFields = /** @class */ (function () {\n    /**\n     * @param {PdfViewer} viewer - It describes about the viewer\n     * @param {PdfViewerBase} base - It describes about the base\n     * @private\n     * @returns {void}\n     */\n    function FormFields(viewer, base) {\n        this.maintainTabIndex = {};\n        this.maintanMinTabindex = {};\n        this.isSignatureField = false;\n        /**\n         * @private\n         */\n        this.paddingDifferenceValue = 10;\n        this.indicatorPaddingValue = 4;\n        this.isKeyDownCheck = false;\n        /**\n         * @private\n         */\n        this.signatureFontSizeConstent = 1.35;\n        /**\n         * @private\n         */\n        this.readOnlyCollection = [];\n        this.isSignatureRendered = false;\n        /**\n         * @private\n         */\n        this.signatureFieldCollection = [];\n        this.selectedIndex = [];\n        /**\n         * @private\n         */\n        this.renderedPageList = [];\n        this.pdfViewer = viewer;\n        this.pdfViewerBase = base;\n    }\n    /**\n     * @param {number} pageIndex - It describes about the page index\n     * @param {boolean} isImportFormField - It describes about the isImportFormField\n     * @private\n     * @returns {void}\n     */\n    FormFields.prototype.renderFormFields = function (pageIndex, isImportFormField) {\n        this.maxTabIndex = 0;\n        this.minTabIndex = -1;\n        if (this.renderedPageList.indexOf(pageIndex) !== -1 && !isImportFormField) {\n            this.data = this.pdfViewerBase.getItemFromSessionStorage('_formDesigner');\n            if (!this.data || this.data === '[]') {\n                this.data = this.pdfViewerBase.getItemFromSessionStorage('_formfields');\n            }\n        }\n        else {\n            this.data = this.pdfViewerBase.getItemFromSessionStorage('_formfields');\n        }\n        if (this.data) {\n            this.formFieldsData = JSON.parse(this.data);\n            if (this.formFieldsData[0] === '[') {\n                this.formFieldsData = JSON.parse(this.formFieldsData);\n            }\n            var textLayer = document.getElementById(this.pdfViewer.element.id + '_textLayer_' + pageIndex);\n            var canvasElement = document.getElementById(this.pdfViewer.element.id + '_pageCanvas_' + pageIndex);\n            var count = void 0;\n            if (this.formFieldsData !== null && canvasElement !== null && textLayer !== null) {\n                var flag = false;\n                for (var i = 0; i < this.formFieldsData.length; i++) {\n                    var formField = this.formFieldsData[parseInt(i.toString(), 10)];\n                    if (!flag && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(formField.ActualFieldName) && formField.PageIndex === pageIndex) {\n                        count = parseInt(formField.FieldName.slice(formField.FieldName.lastIndexOf('_') + 1), 10);\n                        flag = true;\n                    }\n                }\n                if (this.renderedPageList.indexOf(pageIndex) === -1) {\n                    this.renderedPageList.push(pageIndex);\n                }\n                var _loop_1 = function (i) {\n                    var currentData = this_1.formFieldsData[parseInt(i.toString(), 10)];\n                    if (currentData.FieldName !== '') {\n                        if (currentData.IsInitialField) {\n                            currentData.Name = 'InitialField';\n                        }\n                        var font = currentData['Font'];\n                        if (this_1.pdfViewer.formDesigner) {\n                            if (parseFloat(currentData['PageIndex']) === pageIndex) {\n                                var fontFamily = void 0;\n                                var fontStyle = void 0;\n                                var fontSize = void 0;\n                                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(font) && font.Height) {\n                                    fontFamily = font.Name;\n                                    if (font.Italic) {\n                                        fontStyle = 'Italic';\n                                    }\n                                    if (font.Bold) {\n                                        fontStyle = 'Bold';\n                                    }\n                                    if (font.Strikeout) {\n                                        fontStyle = 'Strikethrough';\n                                    }\n                                    if (font.Underline) {\n                                        fontStyle = 'Underline';\n                                    }\n                                    fontSize = this_1.ConvertPointToPixel(font.Size);\n                                }\n                                var textAlignment = currentData.Alignment === 2 ? 'right' : (currentData.Alignment === 1 ? 'center' : 'left');\n                                var backgroundColor = currentData['BackColor'];\n                                var bounds = currentData['LineBounds'];\n                                var backColor = 'rgba(' + backgroundColor.R + ',' + backgroundColor.G + ',' + backgroundColor.B + ',' + 1 + ')';\n                                if (currentData.IsTransparent === true) {\n                                    backColor = 'rgba(0,0,0,0)';\n                                }\n                                backColor = this_1.rgbaToHex(backColor);\n                                // set default color if field have black color as bg.\n                                if (backColor === '#000000ff') {\n                                    backColor = '#daeaf7ff';\n                                }\n                                var fontColor = currentData['FontColor'];\n                                var left = this_1.ConvertPointToPixel(bounds.X);\n                                var top_1 = this_1.ConvertPointToPixel(bounds.Y);\n                                var width = this_1.ConvertPointToPixel(bounds.Width);\n                                var height = this_1.ConvertPointToPixel(bounds.Height);\n                                var boundArray = { left: left, top: top_1, width: width, height: height };\n                                var isFieldRotated = false;\n                                var rotateFieldAngle = 0;\n                                if (currentData['Rotation'] !== 0) {\n                                    if (currentData['RotationAngle'] === -90 || currentData['RotationAngle'] === -270 || currentData['RotationAngle'] === -180) {\n                                        boundArray = this_1.getBounds(boundArray, pageIndex, 0, isFieldRotated);\n                                    }\n                                }\n                                else {\n                                    isFieldRotated = true;\n                                    boundArray = this_1.getBounds(boundArray, pageIndex, 0, isFieldRotated);\n                                    rotateFieldAngle = this_1.getAngle(pageIndex);\n                                }\n                                var foreColor = 'rgba(' + fontColor.R + ',' + fontColor.G + ',' + fontColor.B + ',' + 1 + ')';\n                                foreColor = this_1.rgbaToHex(foreColor);\n                                var borderColor = currentData['BorderColor'];\n                                var borderRGB = void 0;\n                                if (currentData.IsTansparentBorderColor) {\n                                    borderRGB = 'rgba(' + borderColor.R + ',' + borderColor.G + ',' + borderColor.B + ',' + 0 + ')';\n                                }\n                                else {\n                                    borderRGB = 'rgba(' + borderColor.R + ',' + borderColor.G + ',' + borderColor.B + ',' + 1 + ')';\n                                }\n                                borderRGB = this_1.rgbaToHex(borderRGB);\n                                var borderWidth = currentData['BorderWidth'];\n                                this_1.selectedIndex = [];\n                                var elementValue = '';\n                                if (currentData.Name === 'RadioButton' || currentData.Name === 'CheckBox') {\n                                    elementValue = currentData['Text'] ? currentData['Text'] : currentData['Value'];\n                                }\n                                else {\n                                    elementValue = currentData['Text'];\n                                }\n                                var indicatorSettings = (currentData['Name'] === 'SignatureField') ? this_1.pdfViewer.signatureFieldSettings.signatureIndicatorSettings : this_1.pdfViewer.initialFieldSettings.initialIndicatorSettings;\n                                var fieldProperties = {\n                                    bounds: { X: boundArray.left, Y: boundArray.top, Width: boundArray.width,\n                                        Height: boundArray.height }, pageNumber: parseFloat(currentData['PageIndex']) + 1,\n                                    name: currentData['ActualFieldName'] ? currentData['ActualFieldName'] : currentData['FieldName'],\n                                    tooltip: currentData['ToolTip'], value: elementValue, insertSpaces: currentData['InsertSpaces'],\n                                    isChecked: currentData['Selected'], isSelected: currentData['Selected'], fontFamily: fontFamily,\n                                    fontStyle: fontStyle, backgroundColor: backColor, color: foreColor, borderColor: borderRGB,\n                                    thickness: borderWidth, fontSize: fontSize, isMultiline: currentData.Multiline,\n                                    rotateAngle: rotateFieldAngle, isReadOnly: currentData['IsReadonly'],\n                                    isRequired: currentData['IsRequired'], alignment: textAlignment,\n                                    options: this_1.getListValues(currentData), selectedIndex: this_1.selectedIndex,\n                                    maxLength: currentData.MaxLength, visibility: currentData.Visible === 1 ? 'hidden' : 'visible',\n                                    font: { isItalic: !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(font) ? font.Italic : false, isBold: !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(font) ?\n                                            font.Bold : false, isStrikeout: !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(font) ? font.Strikeout : false,\n                                        isUnderline: !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(font) ? font.Underline : false },\n                                    isTransparent: currentData.IsTransparent,\n                                    customData: !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(currentData['CustomData']) ? typeof currentData['CustomData'] === 'object'\n                                        ? currentData['CustomData'] : currentData['CustomData'].trim() !== ''\n                                        ? JSON.parse(currentData['CustomData']) : '' : '',\n                                    signatureIndicatorSettings: indicatorSettings\n                                };\n                                if (!currentData.id && this_1.pdfViewer.formFieldCollections[parseInt(i.toString(), 10)] && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(currentData['ActualFieldName'])) {\n                                    fieldProperties.id = this_1.pdfViewer.formFieldCollections[parseInt(i.toString(), 10)].id;\n                                }\n                                if (currentData.Name === 'DropDown' || currentData.Name === 'ListBox') {\n                                    fieldProperties.value = currentData['SelectedValue'];\n                                }\n                                var fieldType = this_1.getFormFieldType(currentData);\n                                if (currentData.Name !== 'SignatureText' || currentData.Name !== 'SignatureImage') {\n                                    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(this_1.getFormFieldType(currentData))) {\n                                        if (currentData.IsRequired) {\n                                            var thickness = fieldProperties.thickness;\n                                            thickness = thickness > 0 ? thickness : 1;\n                                            fieldProperties.thickness = thickness;\n                                        }\n                                        var addedElement1 = this_1.pdfViewer.formDesignerModule.\n                                            addField(fieldType, fieldProperties, false, fieldProperties.id);\n                                        if (addedElement1 && addedElement1.parentElement) {\n                                            currentData.id = addedElement1.parentElement.id.split('_')[0];\n                                        }\n                                        if (addedElement1 && addedElement1.style.visibility === 'hidden') {\n                                            addedElement1.childNodes[0].disabled = true;\n                                        }\n                                    }\n                                }\n                                if (fieldType === 'SignatureField' || fieldType === 'InitialField') {\n                                    this_1.addSignaturePath(currentData, count);\n                                    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(currentData.Value) && currentData.Value !== '') {\n                                        this_1.renderExistingAnnnot(currentData, parseFloat(currentData['PageIndex']) + 1, null, isFieldRotated);\n                                        this_1.isSignatureRendered = true;\n                                        count++;\n                                    }\n                                }\n                                if (currentData.ActualFieldName == null && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(currentData.FieldName) && this_1.formFieldsData.filter(function (item) { return !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(item.FieldName) && item.FieldName.includes(currentData.FieldName.replace(/_\\d$/, '')); }).filter(function (value) { return value.Name !== 'ink'; }).length === 0) {\n                                    this_1.renderExistingAnnnot(currentData, parseFloat(currentData['PageIndex']) + 1, null, isFieldRotated);\n                                    this_1.pdfViewerBase.signatureModule.storeSignatureData(pageIndex, currentData);\n                                    this_1.isSignatureRendered = true;\n                                    count++;\n                                }\n                                this_1.pdfViewerBase.isLoadedFormFieldAdded = true;\n                            }\n                        }\n                        else {\n                            if (parseFloat(currentData['PageIndex']) === pageIndex) {\n                                var field = this_1.createFormFields(currentData, pageIndex, i, null, count);\n                                var inputField = field.currentField;\n                                var signCount = field.count;\n                                var isFieldRotated = false;\n                                if (currentData.ActualFieldName === null && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(currentData.FieldName) && this_1.formFieldsData.filter(function (item) { return !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(item.FieldName) && item.FieldName.includes(currentData.FieldName.replace(/_\\d$/, '')); }).filter(function (value) { return value.Name !== 'ink'; }).length === 0) {\n                                    this_1.renderExistingAnnnot(currentData, parseFloat(currentData['PageIndex']) + 1, null, isFieldRotated);\n                                    this_1.pdfViewerBase.signatureModule.storeSignatureData(pageIndex, currentData);\n                                    this_1.isSignatureRendered = true;\n                                    count++;\n                                }\n                                if (inputField) {\n                                    var divElement = this_1.createParentElement(currentData, pageIndex);\n                                    var bounds = currentData['LineBounds'];\n                                    var font_1 = currentData['Font'];\n                                    var rotateAngle = 0;\n                                    if (currentData['Rotation'] === 0) {\n                                        isFieldRotated = true;\n                                        rotateAngle = this_1.getAngle(pageIndex);\n                                        if (divElement) {\n                                            divElement.style.transform = 'rotate(' + rotateAngle + 'deg)';\n                                        }\n                                        else {\n                                            inputField.style.transform = 'rotate(' + rotateAngle + 'deg)';\n                                        }\n                                    }\n                                    else {\n                                        if (divElement) {\n                                            divElement.style.transform = 'rotate(' + rotateAngle + 'deg)';\n                                        }\n                                        else {\n                                            inputField.style.transform = 'rotate(' + rotateAngle + 'deg)';\n                                        }\n                                    }\n                                    this_1.applyPosition(inputField, bounds, font_1, pageIndex, 0, isFieldRotated);\n                                    inputField.InsertSpaces = currentData.InsertSpaces;\n                                    if (inputField.InsertSpaces) {\n                                        var zoomFactor = this_1.pdfViewerBase.getZoomFactor();\n                                        var font_2 = ((parseInt(inputField.style.width, 10) / inputField.maxLength)\n                                            - (parseFloat(inputField.style.fontSize) / 2)) - (0.6 * zoomFactor);\n                                        inputField.style.letterSpacing = '' + font_2 + 'px';\n                                        inputField.style.fontFamily = 'monospace';\n                                        inputField.style.paddingLeft = (font_2 / 2) + 'px';\n                                    }\n                                    currentData['uniqueID'] = this_1.pdfViewer.element.id + 'input_' + pageIndex + '_' + i;\n                                    for (var j = 0; j < this_1.pdfViewer.formFieldCollections.length; j++) {\n                                        if ((inputField.type === 'text' || inputField.type === 'password' || inputField.type === 'textarea') && currentData.Name !== 'SignatureField') {\n                                            if (currentData['uniqueID'] === this_1.pdfViewer.formFieldCollections[parseInt(j.toString(), 10)].id) {\n                                                this_1.pdfViewer.formFieldCollections[parseInt(j.toString(), 10)].value = currentData['Text'];\n                                            }\n                                        }\n                                    }\n                                    if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(currentData.Value)) {\n                                        currentData.Value = currentData['Text'];\n                                    }\n                                    if (currentData.ToolTip) {\n                                        this_1.setToolTip(currentData.ToolTip, inputField);\n                                    }\n                                    this_1.applyCommonProperties(inputField, pageIndex, i, currentData, isFieldRotated);\n                                    this_1.checkIsReadonly(currentData, inputField);\n                                    this_1.applyTabIndex(currentData, inputField, pageIndex);\n                                    this_1.checkIsRequiredField(currentData, inputField);\n                                    this_1.applyDefaultColor(inputField);\n                                    this_1.updateFormFieldsCollection(currentData);\n                                    if (divElement) {\n                                        divElement.appendChild(inputField);\n                                        textLayer.appendChild(divElement);\n                                    }\n                                    else {\n                                        inputField.style.position = 'absolute';\n                                        textLayer.appendChild(inputField);\n                                    }\n                                    inputField.addEventListener('focus', this_1.focusFormFields.bind(this_1));\n                                    inputField.addEventListener('blur', this_1.blurFormFields.bind(this_1));\n                                    inputField.addEventListener('click', this_1.updateFormFields.bind(this_1));\n                                    inputField.addEventListener('change', this_1.changeFormFields.bind(this_1));\n                                    inputField.addEventListener('keydown', this_1.updateFormFieldsValue.bind(this_1));\n                                    inputField.addEventListener('keyup', this_1.updateSameFieldsValue.bind(this_1));\n                                    count = signCount;\n                                }\n                            }\n                        }\n                    }\n                };\n                var this_1 = this;\n                for (var i = 0; i < this.formFieldsData.length; i++) {\n                    _loop_1(i);\n                }\n                if (!this.pdfViewer.formDesigner) {\n                    _index__WEBPACK_IMPORTED_MODULE_0__.PdfViewerBase.sessionStorageManager.removeItem(this.pdfViewerBase.documentId + '_formfields');\n                    this.pdfViewerBase.setItemInSessionStorage(this.formFieldsData, '_formfields');\n                }\n            }\n        }\n        if (this.pdfViewerBase.isFocusField && this.pdfViewerBase.focusField) {\n            var currentField = document.getElementById(this.pdfViewerBase.focusField.id);\n            if (currentField) {\n                if ((this.pdfViewerBase.focusField.type === 'SignatureField' || this.pdfViewerBase.focusField.type === 'InitialField') && this.pdfViewer.formDesignerModule) {\n                    var y = this.pdfViewerBase.focusField.bounds.y;\n                    var height = this.pdfViewerBase.pageSize[parseInt(pageIndex.toString(), 10)].height;\n                    this.pdfViewer.bookmark.goToBookmark(this.pdfViewerBase.focusField.pageIndex, height - y);\n                }\n                else {\n                    currentField.focus();\n                }\n                this.pdfViewerBase.isFocusField = false;\n                this.pdfViewerBase.focusField = [];\n            }\n        }\n    };\n    FormFields.prototype.setToolTip = function (tooltipContent, targetElement) {\n        //initialize tooltip component\n        var tooltip = new _syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_3__.Tooltip({\n            content: (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.initializeCSPTemplate)(function () { return tooltipContent; })\n        });\n        // render initialized tooltip\n        tooltip.appendTo(targetElement);\n    };\n    FormFields.prototype.trim = function (str) {\n        return str.replace(/^\\s+|\\s+$/gm, '');\n    };\n    FormFields.prototype.rgbaToHex = function (rgba) {\n        var inParts = rgba.substring(rgba.indexOf('(')).split(',');\n        var r = parseInt(this.trim(inParts[0].substring(1)), 10);\n        var g = parseInt(this.trim(inParts[1]), 10);\n        var b = parseInt(this.trim(inParts[2]), 10);\n        var a = parseFloat(parseFloat(this.trim(inParts[3].substring(0, inParts[3].length - 1))).toFixed(2));\n        var outParts = [\n            r.toString(16),\n            g.toString(16),\n            b.toString(16),\n            Math.round(a * 255).toString(16).substring(0, 2)\n        ];\n        // Pad single-digit output values\n        outParts.forEach(function (part, i) {\n            if (part.length === 1) {\n                outParts[parseInt(i.toString(), 10)] = '0' + part;\n            }\n        });\n        return ('#' + outParts.join(''));\n    };\n    FormFields.prototype.getListValues = function (currentData) {\n        var listItem = currentData['TextList'];\n        var options = [];\n        if (this.getFormFieldType(currentData) === 'DropDown') {\n            listItem = currentData['ComboBoxList'];\n            for (var i = 0; i < listItem.length; i++) {\n                var itemValue = listItem[parseInt(i.toString(), 10)].itemValue ? listItem[parseInt(i.toString(), 10)].itemValue\n                    : listItem[parseInt(i.toString(), 10)].ItemValue;\n                var itemName = listItem[parseInt(i.toString(), 10)].itemName ? listItem[parseInt(i.toString(), 10)].itemName\n                    : listItem[parseInt(i.toString(), 10)].ItemName;\n                if (itemName === currentData['SelectedValue']) {\n                    this.selectedIndex.push(i);\n                }\n                options.push({ itemName: itemName, itemValue: itemValue });\n            }\n        }\n        else {\n            for (var i = 0; i < listItem.length; i++) {\n                if (listItem[parseInt(i.toString(), 10)] === currentData['SelectedValue']) {\n                    this.selectedIndex.push(i);\n                }\n                options.push({ itemName: listItem[parseInt(i.toString(), 10)], itemValue: listItem[parseInt(i.toString(), 10)] });\n            }\n        }\n        if (this.getFormFieldType(currentData) === 'ListBox') {\n            this.selectedIndex = currentData['SelectedList'];\n        }\n        return options;\n    };\n    FormFields.prototype.createParentElement = function (data, pageIndex) {\n        var divElement;\n        if (data['Name'] === 'Textbox' || data['Name'] === 'Password') {\n            divElement = document.createElement('div');\n            divElement.style.background = 'white';\n            if (data.InsertSpaces) {\n                divElement.style.background = 'transparent';\n            }\n            var bounds = data['LineBounds'];\n            var font = data['Font'];\n            divElement.style.position = 'absolute';\n            var isFieldRotated = false;\n            if (data['Rotation'] === 0) {\n                isFieldRotated = true;\n            }\n            this.applyPosition(divElement, bounds, font, pageIndex, 0, isFieldRotated);\n        }\n        return divElement;\n    };\n    /**\n     * @param {number} pageIndex -  It describes about the page index\n     * @private\n     * @returns {number} - number\n     */\n    FormFields.prototype.getAngle = function (pageIndex) {\n        var angle = 0;\n        var pageDetails = this.pdfViewerBase.pageSize[parseInt(pageIndex.toString(), 10)];\n        if (pageDetails && pageDetails.rotation) {\n            switch (pageDetails.rotation) {\n                case 0:\n                    angle = 0;\n                    break;\n                case 1:\n                    angle = 90;\n                    break;\n                case 2:\n                    angle = 180;\n                    break;\n                case 3:\n                    angle = 270;\n                    break;\n            }\n        }\n        return angle;\n    };\n    FormFields.prototype.nextField = function () {\n        this.signatureFieldNavigate(true);\n    };\n    FormFields.prototype.previousField = function () {\n        this.signatureFieldNavigate(false);\n    };\n    FormFields.prototype.signatureFieldNavigate = function (nextSign) {\n        var isNextSignField = nextSign;\n        var signatureFields = this.signatureFieldCollection;\n        var collectionData = this.pdfViewer.formFieldCollections;\n        if (signatureFields.length === 0) {\n            signatureFields = this.pdfViewerBase.signatureModule.getSignField();\n        }\n        var currentField;\n        if (this.currentTarget) {\n            if (this.pdfViewer.formDesignerModule) {\n                for (var i = 0; i < collectionData.length; i++) {\n                    currentField = collectionData[parseInt(i.toString(), 10)];\n                    if (this.currentTarget.id === currentField.id) {\n                        this.currentTarget = document.getElementById(currentField.id);\n                        this.getSignatureIndex(i, collectionData.length, isNextSignField);\n                        break;\n                    }\n                }\n            }\n            else {\n                for (var i = 0; i < signatureFields.length; i++) {\n                    currentField = this.pdfViewer.formDesignerModule ? signatureFields[parseInt(i.toString(), 10)].\n                        FormField : signatureFields[parseInt(i.toString(), 10)];\n                    if (this.currentTarget.id === currentField.uniqueID) {\n                        this.currentTarget = document.getElementById(currentField.uniqueID);\n                        this.getSignatureIndex(i, signatureFields.length, isNextSignField);\n                        break;\n                    }\n                }\n            }\n        }\n        else {\n            if (nextSign) {\n                if (this.pdfViewer.formDesignerModule) {\n                    currentField = signatureFields[0];\n                    if (currentField.id) {\n                        this.currentTarget = document.getElementById(currentField.id);\n                        this.getSignatureIndex(0, signatureFields.length, isNextSignField, true);\n                    }\n                }\n                else {\n                    currentField = signatureFields[0];\n                    if (currentField.uniqueID) {\n                        this.currentTarget = document.getElementById(currentField.uniqueID);\n                        this.getSignatureIndex(0, signatureFields.length, isNextSignField, true);\n                    }\n                }\n            }\n        }\n    };\n    FormFields.prototype.getSignatureIndex = function (currentSignatureIndex, signatureCount, isNextSign, isFirstNavigate) {\n        var signatureIndex = currentSignatureIndex;\n        if (!isFirstNavigate) {\n            if (isNextSign) {\n                signatureIndex++;\n            }\n            else {\n                signatureIndex--;\n            }\n        }\n        if (signatureCount === 1) {\n            this.renderSignatureField(0);\n        }\n        else {\n            if (signatureIndex < signatureCount && signatureIndex >= 0) {\n                this.renderSignatureField(signatureIndex);\n            }\n            else {\n                if (isNextSign) {\n                    if (signatureIndex >= signatureCount) {\n                        this.renderSignatureField(0);\n                    }\n                }\n                else {\n                    if (signatureIndex <= 0) {\n                        this.renderSignatureField(signatureCount - 1);\n                    }\n                }\n            }\n        }\n    };\n    FormFields.prototype.renderSignatureField = function (currentSignIndex) {\n        var curSignIndex = currentSignIndex;\n        var signatureFields = this.signatureFieldCollection;\n        var collectionData = this.pdfViewer.formFieldCollections;\n        var currentField;\n        if (curSignIndex < collectionData.length) {\n            for (var i = 0; i < collectionData.length; i++) {\n                if (this.pdfViewer.formDesignerModule) {\n                    var curSignIndexId = collectionData[parseInt(curSignIndex.toString(), 10)].id;\n                    var signatureFieldData = collectionData[parseInt(i.toString(), 10)];\n                    if (curSignIndexId === signatureFieldData.id) {\n                        var pageIndex = signatureFieldData.pageIndex >= 0 ? signatureFieldData.pageIndex :\n                            signatureFieldData.pageNumber;\n                        var isRender = this.pdfViewer.annotationModule.findRenderPageList(pageIndex);\n                        if (!isRender) {\n                            this.pdfViewer.navigation.goToPage(pageIndex + 1);\n                            this.renderFormFields(pageIndex, false);\n                        }\n                        this.currentTarget = document.getElementById(signatureFieldData.id);\n                        currentField = signatureFieldData;\n                        break;\n                    }\n                }\n                else {\n                    var curSignIndexId = this.pdfViewer.formDesignerModule ?\n                        signatureFields[parseInt(curSignIndex.toString(), 10)].FormField.uniqueID :\n                        signatureFields[parseInt(curSignIndex.toString(), 10)].uniqueID;\n                    var signatureFieldData = this.pdfViewer.formDesignerModule ? signatureFields[parseInt(i.toString(), 10)].\n                        FormField : signatureFields[parseInt(i.toString(), 10)];\n                    if (curSignIndexId === signatureFieldData.uniqueID) {\n                        var pageIndex = signatureFieldData.PageIndex >= 0 ? signatureFieldData.PageIndex :\n                            signatureFieldData.pageNumber;\n                        var isRender = this.pdfViewer.annotationModule.findRenderPageList(pageIndex);\n                        if (!isRender) {\n                            this.pdfViewer.navigation.goToPage(pageIndex + 1);\n                            this.renderFormFields(pageIndex, false);\n                        }\n                        this.currentTarget = document.getElementById(signatureFieldData.uniqueID);\n                        currentField = signatureFieldData;\n                        break;\n                    }\n                }\n            }\n            if (this.currentTarget === null) {\n                var pageIndex = currentField.PageIndex >= 0 ? currentField.PageIndex : currentField.pageNumber;\n                this.pdfViewer.navigation.goToPage(pageIndex);\n                this.currentTarget = document.getElementById(currentField.uniqueID);\n            }\n            if (this.currentTarget) {\n                if (this.currentTarget.className === 'e-pdfviewer-signatureformfields-signature' && !(this.pdfViewer.formDesignerModule)) {\n                    document.getElementById(this.currentTarget.id).focus();\n                    this.pdfViewer.select([this.currentTarget.id], null);\n                }\n                else if (this.currentTarget.className === 'e-pdfviewer-signatureformfields' || this.currentTarget.className === 'e-pdfviewer-signatureformfields-signature') {\n                    if (this.pdfViewer.formDesignerModule) {\n                        document.getElementById(this.currentTarget.id).parentElement.focus();\n                    }\n                    else {\n                        document.getElementById(this.currentTarget.id).focus();\n                    }\n                }\n            }\n        }\n    };\n    /**\n     * @private\n     * @returns {void}\n     */\n    FormFields.prototype.formFieldCollections = function () {\n        var data = this.pdfViewerBase.getItemFromSessionStorage('_formfields');\n        if (data) {\n            var formFieldsData = JSON.parse(data);\n            for (var i = 0; i < formFieldsData.length; i++) {\n                var currentData = formFieldsData[parseInt(i.toString(), 10)];\n                var type = currentData['Name'];\n                if (this.pdfViewer.formDesignerModule) {\n                    if (currentData.Name !== 'ink' && currentData.Name !== 'SignatureImage' && currentData.Name !== 'SignatureText') {\n                        this.retreiveFormFieldsData(currentData, true);\n                    }\n                }\n                else {\n                    if (currentData.Name !== 'ink') {\n                        var bounds = void 0;\n                        if (currentData.LineBounds) {\n                            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(currentData.Bounds)) {\n                                bounds = this.updateBoundsValue(currentData.LineBounds);\n                            }\n                            else {\n                                bounds = currentData.Bounds;\n                            }\n                        }\n                        var formFieldCollection = {\n                            name: this.retriveFieldName(currentData),\n                            id: this.pdfViewer.element.id + 'input_' + parseFloat(currentData['PageIndex']) + '_' + i,\n                            isReadOnly: false, type: currentData.IsInitialField ? 'InitialField' : type,\n                            value: this.retriveCurrentValue(currentData), fontName: '', isRequired: currentData.IsRequired, bounds: bounds\n                        };\n                        this.pdfViewer.formFieldCollections.push(formFieldCollection);\n                    }\n                }\n            }\n        }\n    };\n    FormFields.prototype.retreiveFormFieldsData = function (currentData, isCollection) {\n        var fontFamily;\n        var fontStyle;\n        var fontSize;\n        if (currentData.FieldName !== '') {\n            if (currentData.IsInitialField) {\n                currentData.Name = 'InitialField';\n            }\n            var font = currentData['Font'];\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(font) && font.Height) {\n                fontFamily = font.Name;\n                if (font.Italic) {\n                    fontStyle = 'Italic';\n                }\n                if (font.Bold) {\n                    fontStyle = 'Bold';\n                }\n                if (font.Strikeout) {\n                    fontStyle = 'Strikethrough';\n                }\n                if (font.Underline) {\n                    fontStyle = 'Underline';\n                }\n                fontSize = this.ConvertPointToPixel(font.Size);\n            }\n            var textAlignment = currentData.Alignment === 2 ? 'right' : (currentData.Alignment === 1 ? 'center' : 'left');\n            var backgroundColor = currentData['BackColor'];\n            var bounds = currentData['LineBounds'];\n            var backColor = 'rgba(' + backgroundColor.R + ',' + backgroundColor.G + ',' + backgroundColor.B + ',' + 1 + ')';\n            backColor = this.rgbaToHex(backColor);\n            // set default color if field have black color as bg.\n            if (currentData.IsTransparent === true) {\n                backColor = 'rgba(0,0,0,0)';\n            }\n            else if (backColor === '#000000ff') {\n                backColor = '#daeaf7ff';\n            }\n            var fontColor = currentData['FontColor'];\n            var left = this.ConvertPointToPixel(bounds.X);\n            var top_2 = this.ConvertPointToPixel(bounds.Y);\n            var width = this.ConvertPointToPixel(bounds.Width);\n            var height = this.ConvertPointToPixel(bounds.Height);\n            var boundArray = { left: left, top: top_2, width: width, height: height };\n            var foreColor = 'rgba(' + fontColor.R + ',' + fontColor.G + ',' + fontColor.B + ',' + 1 + ')';\n            foreColor = this.rgbaToHex(foreColor);\n            var borderColor = currentData['BorderColor'];\n            var borderRGB = 'rgba(' + borderColor.R + ',' + borderColor.G + ',' + borderColor.B + ',' + 1 + ')';\n            borderRGB = this.rgbaToHex(borderRGB);\n            if (currentData.IsTansparentBorderColor === true) {\n                borderRGB = 'rgba(0,0,0,0)';\n            }\n            var borderWidth = currentData['BorderWidth'];\n            this.selectedIndex = [];\n            var fieldProperties = {\n                bounds: { X: boundArray.left, Y: boundArray.top, Width: boundArray.width, Height: boundArray.height },\n                pageNumber: parseFloat(currentData['PageIndex']) + 1, name: currentData['ActualFieldName'], tooltip: currentData['ToolTip'],\n                value: currentData['Text'], isChecked: currentData['Selected'], isSelected: currentData['Selected'], fontFamily: fontFamily,\n                fontStyle: fontStyle, backgroundColor: backColor, color: foreColor, borderColor: borderRGB, thickness: borderWidth,\n                fontSize: fontSize, isMultiline: currentData.Multiline,\n                isReadOnly: currentData['IsReadonly'], isRequired: currentData['IsRequired'], insertSpaces: currentData['InsertSpaces'],\n                alignment: textAlignment, options: this.getListValues(currentData), selectedIndex: this.selectedIndex,\n                maxLength: currentData.MaxLength, visibility: currentData.Visible === 1 ? 'hidden' : 'visible',\n                font: { isItalic: !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(font) ? font.Italic : false, isBold: !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(font) ? font.Bold : false,\n                    isStrikeout: !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(font) ? font.Strikeout : false, isUnderline: !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(font) ?\n                        font.Underline : false }, pageIndex: currentData['PageIndex'], isTransparent: currentData['IsTransparent'],\n                rotationAngle: currentData['RotationAngle'], signatureType: currentData['SignatureType'] ? currentData['SignatureType'] : '',\n                signatureIndicatorSettings: currentData['SignatureIndicatorSettings'], zIndex: currentData['zIndex'],\n                customData: !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(currentData['CustomData']) ? typeof currentData['CustomData'] === 'object'\n                    ? currentData['CustomData'] : currentData['CustomData'].trim() !== ''\n                    ? JSON.parse(currentData['CustomData']) : '' : ''\n            };\n            if (currentData.Name === 'DropDown' || currentData.Name === 'ListBox') {\n                fieldProperties.value = currentData['SelectedValue'];\n            }\n            if (currentData.Name === 'RadioButton') {\n                fieldProperties.value = currentData['Value'];\n            }\n            var fieldType = this.getFormFieldType(currentData);\n            if (fieldType === 'SignatureField' || fieldType === 'InitialField') {\n                this.addSignaturePath(currentData);\n                if (this.isSignatureField) {\n                    fieldProperties.value = currentData.Value;\n                }\n            }\n            var addedElement = this.pdfViewer.formDesignerModule.addField(fieldType, fieldProperties, isCollection);\n            return addedElement;\n        }\n        return null;\n    };\n    FormFields.prototype.updateBoundsValue = function (lineBounds) {\n        var bounds = {\n            x: this.ConvertPointToPixel(lineBounds.X), y: this.ConvertPointToPixel(lineBounds.Y),\n            width: this.ConvertPointToPixel(lineBounds.Width), height: this.ConvertPointToPixel(lineBounds.Height)\n        };\n        return bounds;\n    };\n    /**\n     * @param {any} formField - It describes about the form field\n     * @private\n     * @returns {void}\n     */\n    FormFields.prototype.updateFormFieldsCollection = function (formField) {\n        var type = formField['Name'];\n        var bounds;\n        if (formField.LineBounds) {\n            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(formField.Bounds)) {\n                bounds = this.updateBoundsValue(formField.LineBounds);\n            }\n            else {\n                bounds = formField.Bounds;\n            }\n        }\n        var textList = (formField.Name === 'DropDown') ? formField.ComboBoxList : formField.TextList;\n        var formFieldCollection = {\n            name: this.retriveFieldName(formField), id: formField.uniqueID, isReadOnly: formField.IsReadonly,\n            isRequired: formField.IsRequired, isSelected: formField.Selected,\n            isChecked: type === 'RadioButton' ? false : formField.Selected, type: type, value: type === 'ListBox' || type === 'DropDown' ?\n                formField.SelectedValue : formField.Value, fontName: formField.FontFamily ? formField.FontFamily : '',\n            pageIndex: formField.PageIndex, pageNumber: formField.PageIndex + 1, isMultiline: formField.isMultiline ?\n                formField.isMultiline : formField.Multiline, insertSpaces: formField.insertSpaces ?\n                formField.insertSpaces : formField.InsertSpaces, isTransparent: formField.isTransparent ? formField.isTransparent :\n                formField.IsTransparent, rotateAngle: formField.rotateAngle ? formField.rotateAngle : formField.RotationAngle,\n            selectedIndex: formField.selectedIndex ? formField.selectedIndex : formField.SelectedList,\n            options: formField.options ? formField.options : textList ? textList : [], bounds: bounds,\n            signatureType: formField.signatureType ? formField.signatureType : '', zIndex: formField.zIndex, tooltip: formField.tooltip ?\n                formField.tooltip : formField.ToolTip ? formField.ToolTip : '', signatureIndicatorSettings: formField.signatureIndicatorSettings ?\n                formField.signatureIndicatorSettings : ''\n        };\n        this.pdfViewer.formFieldCollections[this.pdfViewer.formFieldCollections.\n            findIndex(function (el) { return el.id === formFieldCollection.id; })] = formFieldCollection;\n    };\n    FormFields.prototype.updateFormFieldValues = function (formFields) {\n        this.readOnlyCollection.push(formFields.id);\n        if (formFields) {\n            var currentElement = document.getElementById(formFields.id);\n            if (currentElement) {\n                if (formFields.isReadOnly) {\n                    currentElement.disabled = true;\n                    currentElement.style.backgroundColor = '';\n                    currentElement.style.cursor = 'default';\n                }\n                else {\n                    if (currentElement.style.backgroundColor === '') {\n                        currentElement.style.backgroundColor = 'rgba(0, 20, 200, 0.2)';\n                    }\n                    currentElement.disabled = false;\n                    currentElement.style.cursor = '';\n                }\n            }\n            this.updateDataInSession(currentElement);\n        }\n    };\n    /**\n     * @param {any} currentData - It describes about the current data\n     * @private\n     * @returns {string} - string\n     */\n    FormFields.prototype.retriveFieldName = function (currentData) {\n        var currentField;\n        switch (currentData['Name']) {\n            case 'Textbox':\n            case 'Password':\n            case 'SignatureField':\n            case 'InitialField':\n                currentField = currentData.FieldName;\n                break;\n            case 'RadioButton':\n            case 'CheckBox':\n                currentField = currentData.GroupName;\n                break;\n            case 'DropDown':\n                currentField = currentData.ActualFieldName;\n                break;\n            case 'ListBox':\n                currentField = currentData.Text;\n                break;\n        }\n        return currentField;\n    };\n    FormFields.prototype.retriveCurrentValue = function (currentData) {\n        var currentField;\n        switch (currentData['Name']) {\n            case 'Textbox':\n            case 'Password':\n                currentField = currentData.Text;\n                break;\n            case 'SignatureField':\n                currentField = currentData.Value;\n                break;\n            case 'RadioButton':\n            case 'CheckBox':\n                currentField = currentData.Selected;\n                break;\n            case 'DropDown':\n                currentField = currentData.SelectedValue;\n                break;\n            case 'ListBox':\n                currentField = currentData.SelectedList;\n                break;\n        }\n        return currentField;\n    };\n    FormFields.prototype.getSignatureBounds = function (LineBounds, bounds, pageIndex) {\n        var pageDetails = this.pdfViewerBase.pageSize[parseInt(pageIndex.toString(), 10)];\n        var bound = 0;\n        switch (pageDetails.rotation) {\n            case 0:\n                bound = bounds;\n                break;\n            case 1:\n                bound = { x: bounds.x + LineBounds.Width + (bounds.width / 3.5), y: pageDetails.width - LineBounds.X + (bounds.height / 4) };\n                break;\n            case 2:\n                bound = { x: pageDetails.width - bounds.x - bounds.width, y: pageDetails.height - bounds.y - bounds.height };\n                break;\n            case 3:\n                bound = { x: bounds.y - (bounds.width / 2) + bounds.height, y: bounds.x + (bounds.width / 3) };\n                break;\n        }\n        return bound;\n    };\n    /**\n     * @private\n     * @returns {any} - any\n     */\n    FormFields.prototype.downloadFormFieldsData = function () {\n        var data = this.pdfViewerBase.getItemFromSessionStorage('_formfields');\n        if (data) {\n            var formFieldsData = JSON.parse(data);\n            var datas = {};\n            var fieldDatas = [];\n            for (var m = 0; m < formFieldsData.length; m++) {\n                var currentData = formFieldsData[parseInt(m.toString(), 10)];\n                var isRequired = currentData.IsRequired;\n                if (currentData.Name === 'Textbox' || currentData.Name === 'Password' || currentData.Multiline) {\n                    if (isRequired && (currentData.Text === '' || currentData.Text === null)) {\n                        this.pdfViewerBase.validateForm = true;\n                        this.pdfViewerBase.nonFillableFields[currentData.FieldName] = currentData.Text;\n                    }\n                    else {\n                        delete (this.pdfViewerBase.nonFillableFields[currentData.FieldName]);\n                    }\n                    fieldDatas = { fieldValue: currentData.Text, isReadOnly: currentData.IsReadonly };\n                    datas[currentData.FieldName] = fieldDatas;\n                }\n                else if (currentData.Name === 'RadioButton' && currentData.Selected) {\n                    if (isRequired && currentData.Selected === false) {\n                        this.pdfViewerBase.validateForm = true;\n                        this.pdfViewerBase.nonFillableFields[currentData.GroupName] = currentData.Value;\n                    }\n                    else {\n                        delete (this.pdfViewerBase.nonFillableFields[currentData.GroupName]);\n                    }\n                    fieldDatas = { fieldValue: currentData.Value, isReadOnly: currentData.IsReadonly };\n                    datas[currentData.GroupName] = fieldDatas;\n                }\n                else if (currentData.Name === 'CheckBox') {\n                    if (isRequired && currentData.Selected === false) {\n                        this.pdfViewerBase.validateForm = true;\n                        this.pdfViewerBase.nonFillableFields[currentData.GroupName] = currentData.Selected;\n                    }\n                    else {\n                        delete (this.pdfViewerBase.nonFillableFields[currentData.GroupName]);\n                    }\n                    var currentCheckBoxIndex = currentData.CheckBoxIndex ? currentData.CheckBoxIndex :\n                        currentData.CheckboxIndex ? currentData.CheckboxIndex : null;\n                    if (currentCheckBoxIndex && currentData.Selected) {\n                        fieldDatas = { isSelected: currentCheckBoxIndex, isReadOnly: currentData.IsReadonly,\n                            fieldValue: !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(currentData.Value) ? currentData.Value : '' };\n                        datas[currentData.GroupName] = fieldDatas;\n                    }\n                    else if (datas[currentData.GroupName] === undefined || datas[currentData.GroupName] === null) {\n                        fieldDatas = { isSelected: currentData.Selected, isReadOnly: currentData.IsReadonly, fieldValue: currentData.Value };\n                        datas[currentData.GroupName] = fieldDatas;\n                    }\n                }\n                else if (currentData.Name === 'DropDown') {\n                    if (isRequired && currentData.SelectedValue === '') {\n                        this.pdfViewerBase.validateForm = true;\n                        this.pdfViewerBase.nonFillableFields[currentData.Text] = currentData.SelectedValue;\n                    }\n                    else {\n                        delete (this.pdfViewerBase.nonFillableFields[currentData.Text]);\n                    }\n                    fieldDatas = { fieldValue: currentData.SelectedValue, isReadOnly: currentData.IsReadonly };\n                    datas[currentData.FieldName] = fieldDatas;\n                }\n                else if (currentData.Name === 'ListBox') {\n                    var childItems = currentData['TextList'];\n                    var childItemsText = [];\n                    for (var m_1 = 0; m_1 < currentData.SelectedList.length; m_1++) {\n                        var currentElement = currentData.SelectedList[parseInt(m_1.toString(), 10)];\n                        childItemsText.push(childItems[\"\" + currentElement]);\n                    }\n                    fieldDatas = { fieldValue: JSON.stringify(childItemsText), isReadOnly: currentData.IsReadonly };\n                    datas[currentData.Text] = fieldDatas;\n                }\n                else if (currentData.Name === 'SignatureField' || currentData.Name === 'InitialField') {\n                    var csData = void 0;\n                    if (isRequired && (currentData.Value === null || currentData.Value === '')) {\n                        this.addSignaturePath(currentData);\n                    }\n                    if (currentData.Value && currentData.Value !== '') {\n                        csData = currentData.Value;\n                        var fontFamily = currentData.fontFamily ? currentData.fontFamily : currentData.FontFamily;\n                        if (fontFamily) {\n                            datas[currentData.FieldName + 'fontName'] = fontFamily;\n                            datas[currentData.FieldName + 'fontSize'] = currentData.fontSize ? currentData.fontSize : currentData.FontSize;\n                        }\n                        else if (currentData.Value.split('base64,')[1]) {\n                            datas[currentData.FieldName + 'ImageData'] = true;\n                        }\n                        else {\n                            var collectionData = (0,_syncfusion_ej2_drawings__WEBPACK_IMPORTED_MODULE_2__.processPathData)(currentData.Value);\n                            csData = (0,_syncfusion_ej2_drawings__WEBPACK_IMPORTED_MODULE_2__.splitArrayCollection)(collectionData);\n                        }\n                    }\n                    if (isRequired && (currentData.Value === null || currentData.Value === '')) {\n                        this.pdfViewerBase.validateForm = true;\n                        this.pdfViewerBase.nonFillableFields[currentData.FieldName] = JSON.stringify(csData);\n                    }\n                    else {\n                        delete (this.pdfViewerBase.nonFillableFields[currentData.FieldName]);\n                    }\n                    datas[currentData.FieldName] = JSON.stringify(csData);\n                    if (currentData.Bounds) {\n                        var bounds = this.getSignatureBounds(currentData.LineBounds, currentData.Bounds, currentData.PageIndex);\n                        currentData.Bounds.x = bounds.x;\n                        currentData.Bounds.y = bounds.y;\n                        datas[currentData.FieldName + 'bounds'] = JSON.stringify(currentData.Bounds);\n                    }\n                    else {\n                        var lineBounds = currentData.LineBounds;\n                        var bounds = { x: this.ConvertPointToPixel(lineBounds.X), y: this.ConvertPointToPixel(lineBounds.Y),\n                            width: this.ConvertPointToPixel(lineBounds.Width), height: this.ConvertPointToPixel(lineBounds.Height) };\n                        datas[currentData.FieldName + 'bounds'] = JSON.stringify(bounds);\n                    }\n                    datas[currentData.FieldName + 'isReadOnly'] = currentData.IsReadonly;\n                }\n            }\n            return (JSON.stringify(datas));\n        }\n    };\n    FormFields.prototype.focusFormFields = function (event) {\n        var currentTarget = event.target;\n        if (currentTarget && (currentTarget.className !== 'e-pdfviewer-signatureformfields' && currentTarget.className !== 'e-pdfviewer-signatureformfields e-pv-signature-focus')) {\n            var backgroundcolor = currentTarget.style.backgroundColor;\n            var currentIndex = backgroundcolor.lastIndexOf(',');\n            var currentColor = backgroundcolor.slice(0, currentIndex + 1) + 0 + ')';\n            currentTarget.style.backgroundColor = currentColor;\n            if (currentTarget.type === 'checkbox') {\n                currentTarget.style.webkitAppearance = '';\n            }\n            currentTarget.style.boxShadow = '0 0 5px ' + (currentTarget.style.borderColor === 'transparent' ? '#000000' : currentTarget.style.borderColor);\n        }\n        else if (currentTarget) {\n            if (currentTarget.className === 'e-pdfviewer-signatureformfields' || currentTarget.className === 'e-pdfviewer-signatureformfields-signature' || currentTarget.className === 'e-pdfviewer-signatureformfields e-pv-signature-focus' || currentTarget.className === 'e-pdfviewer-signatureformfields-signature  e-pv-signature-focus') {\n                this.pdfViewerBase.signatureModule.setFocus(currentTarget.id);\n            }\n        }\n    };\n    FormFields.prototype.blurFormFields = function (event) {\n        var currentTarget = event.target;\n        if (currentTarget.InsertSpaces && this.isKeyDownCheck) {\n            var font = parseInt(currentTarget.style.width, 10) - (parseInt(currentTarget.style.height, 10) / 2);\n            currentTarget.style.width = '' + font + 'px';\n            this.isKeyDownCheck = false;\n        }\n        if (currentTarget.type === 'checkbox') {\n            this.pdfViewer.fireFocusOutFormField(currentTarget.name, currentTarget.checked);\n        }\n        else {\n            this.pdfViewer.fireFocusOutFormField(currentTarget.name, currentTarget.value);\n        }\n        var backgroundcolor = currentTarget.style.backgroundColor;\n        var currentIndex = backgroundcolor.lastIndexOf(',');\n        var currentColor = backgroundcolor.slice(0, currentIndex + 1) + 0.2 + ')';\n        currentTarget.style.backgroundColor = currentColor;\n        currentTarget.style.boxShadow = 'none';\n        if ((currentTarget.type === 'checkbox') && !currentTarget.checked) {\n            currentTarget.style.webkitAppearance = 'none';\n        }\n        else {\n            currentTarget.style.webkitAppearance = '';\n        }\n    };\n    FormFields.prototype.updateFormFields = function (event) {\n        var currentTarget = event.target;\n        if (this.pdfViewerBase.isDeviceiOS && currentTarget.type === 'checkbox') {\n            currentTarget.focus();\n        }\n        if (currentTarget.className === 'e-pdfviewer-ListBox') {\n            currentTarget = currentTarget.parentElement;\n            this.updateDataInSession(currentTarget);\n        }\n        else if (currentTarget.className === 'e-pdfviewer-signatureformfields' || currentTarget.className === 'e-pdfviewer-signatureformfields e-pv-signature-focus') {\n            this.currentTarget = currentTarget;\n        }\n        else if (currentTarget.className === 'e-pv-buttonItem' || currentTarget.type === 'button') {\n            this.pdfViewer.fireButtonFieldClickEvent(currentTarget.value, currentTarget.name, currentTarget.id);\n        }\n        for (var m = 0; m < this.pdfViewer.formFieldCollections.length; m++) {\n            if (currentTarget.id === this.pdfViewer.formFieldCollections[parseInt(m.toString(), 10)].id) {\n                if (this.pdfViewer.formDesignerModule || this.pdfViewer.annotationModule) {\n                    this.pdfViewer.fireFormFieldClickEvent('formFieldClicked', this.pdfViewer.formFieldCollections[parseInt(m.toString(), 10)]);\n                }\n                if (currentTarget.className === 'e-pdfviewer-signatureformfields' || currentTarget.className === 'e-pdfviewer-signatureformfields-signature' || currentTarget.className === 'e-pdfviewer-signatureformfields e-pv-signature-focus' || currentTarget.className === 'e-pdfviewer-signatureformfields-signature  e-pv-signature-focus') {\n                    this.pdfViewerBase.signatureModule.setFocus(currentTarget.id);\n                }\n            }\n        }\n    };\n    /**\n     * @param {string} signatureType - It describes about the signature type\n     * @param {string} value - It describes about the value\n     * @param {any} target - It describes about the target\n     * @param {string} fontname - It describes about the font name\n     * @param {any} signBounds - It contains a signatureBounds\n     * @private\n     * @returns {void}\n     */\n    FormFields.prototype.drawSignature = function (signatureType, value, target, fontname, signBounds) {\n        var annot;\n        // eslint-disable-next-line\n        var proxy = this;\n        var bounds;\n        var targetBounds;\n        var parentElementBounds;\n        var data;\n        if (this.pdfViewer.formDesigner) {\n            data = this.pdfViewerBase.getItemFromSessionStorage('_formDesigner');\n        }\n        else {\n            data = this.pdfViewerBase.getItemFromSessionStorage('_formfields');\n        }\n        var formFieldsData = JSON.parse(data);\n        var targetName;\n        if (this.pdfViewer.formDesignerModule) {\n            targetName = this.currentTarget && this.currentTarget.offsetParent ? this.currentTarget.offsetParent.name :\n                this.currentTarget ? this.currentTarget.name : target.name ? target.name : target.offsetParent.name;\n        }\n        else {\n            targetName = this.currentTarget ? this.currentTarget.name : target.name ? target.name : target.offsetParent.name;\n        }\n        var _loop_2 = function (i) {\n            var fieldName = this_2.pdfViewer.formDesigner ? formFieldsData[parseInt(i.toString(), 10)].\n                FormField.name : formFieldsData[parseInt(i.toString(), 10)].FieldName;\n            if (this_2.pdfViewer.formDesigner ? fieldName === targetName : fieldName === targetName &&\n                (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(formFieldsData[parseInt(i.toString(), 10)].ActualFieldName))) {\n                target = this_2.pdfViewer.formDesigner ? document.getElementById(formFieldsData[parseInt(i.toString(), 10)].Key.split('_')[0]) : document.getElementById(formFieldsData[parseInt(i.toString(), 10)].uniqueID);\n                var currentField_1 = target;\n                var signatureAdd_1 = true;\n                this_2.pdfViewer.annotations.filter(function (item) {\n                    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(currentField_1) && item.id === target.id + '_content') {\n                        signatureAdd_1 = false;\n                    }\n                });\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(currentField_1)) {\n                    var elementId = currentField_1.offsetParent.offsetParent.id.split('_')[0];\n                    var signatureField_1 = this_2.pdfViewer.nameTable[\"\" + elementId];\n                    if (target && target.offsetParent && signatureField_1) {\n                        targetBounds = target.getBoundingClientRect();\n                        parentElementBounds = target.offsetParent.offsetParent.offsetParent.getBoundingClientRect();\n                        this_2.pdfViewerBase.drawSignatureWithTool = true;\n                        if (target.nextSibling && target.nextSibling.id.indexOf('initial') !== -1) {\n                            this_2.pdfViewer.isInitialFieldToolbarSelection = true;\n                        }\n                    }\n                    var currentValue_1 = value ? value : this_2.pdfViewerBase.signatureModule.outputString;\n                    if (signatureType === 'Path' && !this_2.pdfViewer.drawing.isPasted) {\n                        if (value && this_2.pdfViewerBase.signatureModule.outputString === '') {\n                            var parsenew = JSON.parse(currentValue_1);\n                            var newArray = (0,_syncfusion_ej2_drawings__WEBPACK_IMPORTED_MODULE_2__.splitArrayCollection)(parsenew);\n                            currentValue_1 = (0,_syncfusion_ej2_drawings__WEBPACK_IMPORTED_MODULE_2__.getPathString)(newArray);\n                        }\n                    }\n                    var currentFont = fontname ? fontname : this_2.pdfViewerBase.signatureModule.fontName;\n                    var zoomvalue = this_2.pdfViewerBase.getZoomFactor();\n                    var currentWidth = this_2.pdfViewerBase.drawSignatureWithTool ?\n                        targetBounds.width / zoomvalue : parseFloat(currentField_1.style.width) / zoomvalue;\n                    var currentHeight = this_2.pdfViewerBase.drawSignatureWithTool ?\n                        targetBounds.height / zoomvalue : parseFloat(currentField_1.style.height) / zoomvalue;\n                    var currentLeft = this_2.pdfViewerBase.drawSignatureWithTool ?\n                        ((targetBounds.left - parentElementBounds.left)) / zoomvalue : parseFloat(currentField_1.style.left) / zoomvalue;\n                    var currentTop = this_2.pdfViewerBase.drawSignatureWithTool ?\n                        ((targetBounds.top - parentElementBounds.top)) / zoomvalue : parseFloat(currentField_1.style.top) / zoomvalue;\n                    var currentPage_1 = this_2.pdfViewerBase.drawSignatureWithTool ? target.nextElementSibling ? parseFloat(target.nextElementSibling.id.split('_')[1]) : parseFloat(currentField_1.id.split('_')[1]) : parseFloat(currentField_1.id.split('_')[1]);\n                    var currentIndex = this_2.pdfViewerBase.drawSignatureWithTool ? target.nextElementSibling ? parseFloat(target.nextElementSibling.id.split('_')[2]) : parseFloat(currentField_1.id.split('_')[2]) : parseFloat(currentField_1.id.split('_')[2]);\n                    var signString_1 = this_2.pdfViewerBase.signatureModule.saveImageString;\n                    var signatureFontFamily_1;\n                    var signatureFontSize_1;\n                    var rotateAngleString = currentField_1.offsetParent.offsetParent.style.transform ?\n                        currentField_1.offsetParent.offsetParent.style.transform : currentField_1.style.transform;\n                    rotateAngleString = rotateAngleString.substring(rotateAngleString.indexOf('(') + 1, rotateAngleString.indexOf('d'));\n                    var rotateAngle_1 = rotateAngleString ? parseInt(rotateAngleString, 10) : 0;\n                    if (signatureType === 'Type' || signatureType === 'Text') {\n                        if (!currentFont) {\n                            currentFont = 'Helvetica';\n                        }\n                        bounds = this_2.getSignBounds(currentIndex, rotateAngle_1, currentPage_1, zoomvalue, currentLeft, currentTop, currentWidth, currentHeight);\n                        if (this_2.pdfViewer.signatureFitMode === 'Default') {\n                            bounds = this_2.getDefaultBoundsforSign(bounds);\n                        }\n                        annot = {\n                            id: currentField_1.id, bounds: { x: bounds.x, y: bounds.y, width: bounds.width, height: bounds.height }, pageIndex: currentPage_1, data: currentValue_1, modifiedDate: '',\n                            shapeAnnotationType: 'SignatureText', opacity: 1, rotateAngle: rotateAngle_1, annotName: 'SignatureText', comments: [], review: { state: '', stateModel: '', modifiedDate: '', author: '' }, fontFamily: currentFont, fontSize: bounds.height / this_2.signatureFontSizeConstent\n                        };\n                        if (annot.shapeAnnotationType === 'SignatureText') {\n                            var textWidth = this_2.getTextWidth(annot.data, annot.fontSize, annot.fontFamily);\n                            var widthRatio = 1;\n                            if (textWidth > bounds.width) {\n                                widthRatio = bounds.width / textWidth;\n                            }\n                            annot.fontSize = this_2.getFontSize(Math.floor((annot.fontSize * widthRatio)));\n                        }\n                        signString_1 = annot.data;\n                        signatureFontFamily_1 = annot.fontFamily;\n                        signatureFontSize_1 = annot.fontSize;\n                    }\n                    else if (signatureType === 'Image') {\n                        bounds = this_2.getSignBounds(currentIndex, rotateAngle_1, currentPage_1, zoomvalue, currentLeft, currentTop, currentWidth, currentHeight);\n                        var newBounds_1 = Object.freeze(bounds);\n                        var image_1 = new Image();\n                        var currentTarget_1 = target;\n                        image_1.src = currentValue_1;\n                        image_1.onload = function () {\n                            var editableBounds = Object.isFrozen(newBounds_1) ? __assign({}, newBounds_1) : newBounds_1;\n                            proxy.imageOnLoad(editableBounds, image_1, currentValue_1, currentPage_1, rotateAngle_1, currentField_1, signatureField_1, signString_1, signatureFontFamily_1, signatureFontSize_1, currentTarget_1);\n                        };\n                    }\n                    else {\n                        if ((currentValue_1.indexOf('base64')) !== -1) {\n                            bounds = this_2.getSignBounds(currentIndex, rotateAngle_1, currentPage_1, zoomvalue, currentLeft, currentTop, currentWidth, currentHeight);\n                            if (this_2.pdfViewer.signatureFitMode === 'Default') {\n                                bounds = this_2.getDefaultBoundsforSign(bounds);\n                            }\n                            annot = {\n                                id: currentField_1.id, bounds: { x: bounds.x, y: bounds.y, width: bounds.width, height: bounds.height }, pageIndex: currentPage_1, data: currentValue_1, modifiedDate: '',\n                                shapeAnnotationType: 'SignatureImage', opacity: 1, rotateAngle: rotateAngle_1, annotName: 'SignatureField', comments: [], review: { state: '', stateModel: '', modifiedDate: '', author: '' }\n                            };\n                            signString_1 = annot.data;\n                        }\n                        else {\n                            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(signBounds)) {\n                                bounds = signBounds;\n                            }\n                            else if (this_2.pdfViewer.signatureFitMode === 'Default') {\n                                var signatureBounds = this_2.pdfViewerBase.signatureModule.\n                                    updateSignatureAspectRatio(currentValue_1, false, currentField_1);\n                                bounds = this_2.getSignBounds(currentIndex, rotateAngle_1, currentPage_1, zoomvalue, currentLeft, currentTop, signatureBounds.width, signatureBounds.height, true);\n                                bounds.x = bounds.x + signatureBounds.left;\n                                bounds.y = bounds.y + signatureBounds.top;\n                            }\n                            else {\n                                bounds = this_2.getSignBounds(currentIndex, rotateAngle_1, currentPage_1, zoomvalue, currentLeft, currentTop, currentWidth, currentHeight);\n                            }\n                            annot = {\n                                id: currentField_1.id, bounds: { x: bounds.x, y: bounds.y, width: bounds.width, height: bounds.height }, pageIndex: currentPage_1, data: currentValue_1, modifiedDate: '',\n                                shapeAnnotationType: 'Path', opacity: 1, rotateAngle: rotateAngle_1, annotName: 'SignatureField', comments: [], review: { state: '', stateModel: '', modifiedDate: '', author: '' }\n                            };\n                        }\n                    }\n                    if (this_2.pdfViewerBase.drawSignatureWithTool && signatureField_1 && signatureType !== 'Image') {\n                        annot.id = signatureField_1.id + '_content';\n                        var obj = this_2.pdfViewer.add(annot);\n                        if (signatureField_1.wrapper.children[1] && obj.wrapper.id === signatureField_1.wrapper.children[1].id) {\n                            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(signatureField_1.wrapper.children[1]) && signatureField_1.wrapper.children[1].relativeMode === 'Point') {\n                                signatureField_1.wrapper.children.splice(1, 1);\n                            }\n                        }\n                        signatureField_1.wrapper.children.push(obj.wrapper);\n                    }\n                    else if (signatureType !== 'Image') {\n                        this_2.pdfViewer.add(annot);\n                    }\n                    if (annot && annot.shapeAnnotationType === 'Path' && currentValue_1 !== '') {\n                        this_2.pdfViewerBase.currentSignatureAnnot = annot;\n                        var position = { currentHeight: currentHeight, currentWidth: currentWidth,\n                            currentLeft: currentLeft, currentTop: currentTop };\n                        this_2.pdfViewerBase.signatureModule.addSignatureCollection(bounds, position);\n                        signString_1 = this_2.pdfViewerBase.signatureModule.saveImageString;\n                        this_2.pdfViewerBase.currentSignatureAnnot = null;\n                    }\n                    if (signatureType !== 'Image') {\n                        var canvass = this_2.pdfViewerBase.getAnnotationCanvas('_annotationCanvas_', currentPage_1);\n                        this_2.pdfViewer.renderDrawing(canvass, currentPage_1);\n                        this_2.pdfViewerBase.signatureModule.showSignatureDialog(false);\n                        if (currentField_1.className === 'e-pdfviewer-signatureformfields e-pv-signature-focus') {\n                            currentField_1.className = 'e-pdfviewer-signatureformfields-signature e-pv-signature-focus';\n                        }\n                        else {\n                            currentField_1.className = 'e-pdfviewer-signatureformfields-signature';\n                        }\n                        if (this_2.pdfViewerBase.drawSignatureWithTool && signatureField_1) {\n                            var key = target.offsetParent.offsetParent.id.split('_')[0] + '_content';\n                            annot.bounds = { x: bounds.x * zoomvalue, y: bounds.y * zoomvalue,\n                                width: bounds.width * zoomvalue, height: bounds.height * zoomvalue };\n                            this_2.updateSignatureDataInSession(annot, key);\n                        }\n                        else {\n                            this_2.updateDataInSession(currentField_1, annot.data, annot.bounds, signatureFontFamily_1, signatureFontSize_1);\n                        }\n                        currentField_1.style.pointerEvents = 'none';\n                        if (this_2.pdfViewer.annotation) {\n                            this_2.pdfViewer.annotation.addAction(annot.pageIndex, null, annot, 'FormField Value Change', '', annot, annot);\n                        }\n                        if (annot.shapeAnnotationType === 'Path' || annot.shapeAnnotationType === 'SignatureText') {\n                            this_2.pdfViewer.fireSignatureAdd(annot.pageIndex, annot.id, annot.shapeAnnotationType, annot.bounds, annot.opacity, null, null, signString_1);\n                        }\n                        this_2.pdfViewer.fireFocusOutFormField(currentField_1.name, currentValue_1);\n                    }\n                }\n            }\n        };\n        var this_2 = this;\n        for (var i = 0; i < formFieldsData.length; i++) {\n            _loop_2(i);\n        }\n        if (signatureType !== 'Image') {\n            this.pdfViewerBase.signatureModule.hideSignaturePanel();\n            this.pdfViewerBase.drawSignatureWithTool = false;\n            this.pdfViewer.isInitialFieldToolbarSelection = false;\n        }\n    };\n    //  EJ2-62918- Image signature width is wrong while adding programmatically and it is fixed by adding an onload event.\n    //  A function was added and it was called\n    FormFields.prototype.imageOnLoad = function (bounds, image, currentValue, currentPage, rotateAngle, currentField, signatureField, signString, signatureFontFamily, signatureFontSize, target) {\n        if (target && target.offsetParent && signatureField) {\n            this.pdfViewerBase.drawSignatureWithTool = true;\n            if (target.nextSibling && target.nextSibling.id.indexOf('initial') !== -1) {\n                this.pdfViewer.isInitialFieldToolbarSelection = true;\n            }\n        }\n        if (this.pdfViewer.signatureFitMode === 'Default') {\n            var padding = Math.min(bounds.height / this.paddingDifferenceValue, bounds.width / this.paddingDifferenceValue);\n            var maxHeight = bounds.height - padding;\n            var maxWidth = bounds.width - padding;\n            var imageWidth = image.width;\n            var imageHeight = image.height;\n            var beforeWidth = bounds.width;\n            var beforeHeight = bounds.height;\n            var ratio = Math.min(maxWidth / imageWidth, maxHeight / imageHeight);\n            bounds.width = imageWidth * ratio;\n            bounds.height = imageHeight * ratio;\n            bounds.x = bounds.x + (beforeWidth - bounds.width) / 2;\n            bounds.y = bounds.y + (beforeHeight - bounds.height) / 2;\n        }\n        var annot = {\n            id: currentField.id, bounds: { x: bounds.x, y: bounds.y, width: bounds.width, height: bounds.height }, pageIndex: currentPage, data: currentValue, modifiedDate: '',\n            shapeAnnotationType: 'SignatureImage', opacity: 1, rotateAngle: rotateAngle, annotName: 'SignatureField', comments: [], review: { state: '', stateModel: '', modifiedDate: '', author: '' }\n        };\n        signString = annot.data;\n        if (this.pdfViewerBase.drawSignatureWithTool && signatureField) {\n            annot.id = signatureField.id + '_content';\n            var obj = this.pdfViewer.add(annot);\n            if (signatureField.wrapper.children[1] && obj.wrapper.id === signatureField.wrapper.children[1].id) {\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(signatureField.wrapper.children[1]) && signatureField.wrapper.children[1].relativeMode === 'Point') {\n                    signatureField.wrapper.children.splice(1, 1);\n                }\n            }\n            signatureField.wrapper.children.push(obj.wrapper);\n        }\n        else {\n            this.pdfViewer.add(annot);\n        }\n        var canvass = this.pdfViewerBase.getAnnotationCanvas('_annotationCanvas_', currentPage);\n        this.pdfViewer.renderDrawing(canvass, currentPage);\n        this.pdfViewerBase.signatureModule.showSignatureDialog(false);\n        if (currentField.className === 'e-pdfviewer-signatureformfields e-pv-signature-focus') {\n            currentField.className = 'e-pdfviewer-signatureformfields-signature e-pv-signature-focus';\n        }\n        else {\n            currentField.className = 'e-pdfviewer-signatureformfields-signature';\n        }\n        if (this.pdfViewerBase.drawSignatureWithTool && signatureField) {\n            var zoomvalue = this.pdfViewerBase.getZoomFactor();\n            var key = target.offsetParent.offsetParent.id.split('_')[0] + '_content';\n            annot.bounds = { x: bounds.x * zoomvalue, y: bounds.y * zoomvalue, width: bounds.width * zoomvalue,\n                height: bounds.height * zoomvalue };\n            this.updateSignatureDataInSession(annot, key);\n        }\n        else {\n            this.updateDataInSession(currentField, annot.data, annot.bounds, signatureFontFamily, signatureFontSize);\n        }\n        currentField.style.pointerEvents = 'none';\n        if (this.pdfViewer.annotation) {\n            this.pdfViewer.annotation.addAction(annot.pageIndex, null, annot, 'FormField Value Change', '', annot, annot);\n        }\n        if (annot.shapeAnnotationType === 'SignatureImage') {\n            this.pdfViewer.fireSignatureAdd(annot.pageIndex, annot.id, annot.shapeAnnotationType, annot.bounds, annot.opacity, null, null, signString);\n        }\n        this.pdfViewer.fireFocusOutFormField(currentField.name, currentValue);\n        this.pdfViewerBase.signatureModule.hideSignaturePanel();\n        this.pdfViewerBase.drawSignatureWithTool = false;\n        this.pdfViewer.isInitialFieldToolbarSelection = false;\n    };\n    FormFields.prototype.updateSignatureDataInSession = function (annot, key) {\n        var data = this.pdfViewerBase.getItemFromSessionStorage('_formDesigner');\n        var formFieldsData = JSON.parse(data);\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(formFieldsData)) {\n            var _loop_3 = function (i) {\n                if (formFieldsData[parseInt(i.toString(), 10)].Key === key) {\n                    var formFieldIndex = this_3.pdfViewer.formFieldCollection.findIndex(function (el) { return el.id === formFieldsData[parseInt(i.toString(), 10)].FormField.id.split('_')[0]; });\n                    if (annot.shapeAnnotationType === 'SignatureText') {\n                        formFieldsData[parseInt(i.toString(), 10)].FormField.signatureType = 'Text';\n                        this_3.pdfViewer.nameTable[(\"\" + key).split('_')[0]].signatureType = 'Text';\n                        this_3.pdfViewerBase.formFieldCollection[parseInt(i.toString(), 10)].FormField.signatureType = 'Text';\n                        this_3.pdfViewer.nameTable[\"\" + key].signatureType = 'Text';\n                        formFieldsData[parseInt(i.toString(), 10)].FormField.fontFamily = annot.fontFamily === 'TimesRoman' ? 'Times New Roman' : annot.fontFamily;\n                        this_3.pdfViewerBase.formFieldCollection[parseInt(i.toString(), 10)].FormField.fontFamily = annot.fontFamily;\n                        this_3.pdfViewer.nameTable[\"\" + key].fontFamily = annot.fontFamily;\n                        this_3.pdfViewer.nameTable[(\"\" + key).split('_')[0]].fontFamily = annot.fontFamily;\n                        formFieldsData[parseInt(i.toString(), 10)].FormField.fontSize = annot.fontSize;\n                        this_3.pdfViewerBase.formFieldCollection[parseInt(i.toString(), 10)].FormField.fontSize = annot.fontSize;\n                        this_3.pdfViewer.nameTable[\"\" + key].fontSize = annot.fontSize;\n                        this_3.pdfViewer.nameTable[(\"\" + key).split('_')[0]].fontSize = annot.fontSize;\n                        if (formFieldIndex > -1) {\n                            this_3.pdfViewer.formFieldCollection[parseInt(formFieldIndex.toString(), 10)].signatureType = 'Text';\n                        }\n                    }\n                    else if (annot.shapeAnnotationType === 'SignatureImage') {\n                        formFieldsData[parseInt(i.toString(), 10)].FormField.signatureType = 'Image';\n                        this_3.pdfViewerBase.formFieldCollection[parseInt(i.toString(), 10)].FormField.signatureType = 'Image';\n                        this_3.pdfViewer.nameTable[\"\" + key].signatureType = 'Image';\n                        if (formFieldIndex > -1) {\n                            this_3.pdfViewer.formFieldCollection[parseInt(formFieldIndex.toString(), 10)].signatureType = 'Image';\n                        }\n                    }\n                    else {\n                        formFieldsData[parseInt(i.toString(), 10)].FormField.signatureType = 'Path';\n                        this_3.pdfViewerBase.formFieldCollection[parseInt(i.toString(), 10)].FormField.signatureType = 'Path';\n                        this_3.pdfViewer.nameTable[\"\" + key].signatureType = 'Path';\n                        if (formFieldIndex > -1) {\n                            this_3.pdfViewer.formFieldCollection[parseInt(formFieldIndex.toString(), 10)].signatureType = 'Path';\n                        }\n                    }\n                    formFieldsData[parseInt(i.toString(), 10)].FormField.signatureBound = annot.bounds;\n                    this_3.pdfViewerBase.formFieldCollection[parseInt(i.toString(), 10)].FormField.signatureBound = annot.bounds;\n                    this_3.pdfViewer.nameTable[\"\" + key].signatureBound = annot.bounds;\n                    if (formFieldIndex > -1) {\n                        this_3.pdfViewer.formFieldCollection[parseInt(formFieldIndex.toString(), 10)].signatureBound = annot.bounds;\n                    }\n                    if (annot.shapeAnnotationType === 'Path') {\n                        var collectionData = (0,_syncfusion_ej2_drawings__WEBPACK_IMPORTED_MODULE_2__.processPathData)(annot.data);\n                        var csData = (0,_syncfusion_ej2_drawings__WEBPACK_IMPORTED_MODULE_2__.splitArrayCollection)(collectionData);\n                        formFieldsData[parseInt(i.toString(), 10)].FormField.value = JSON.stringify(csData);\n                        this_3.pdfViewer.nameTable[\"\" + key].value = annot.data;\n                        this_3.pdfViewer.nameTable[key.split('_')[0]].value = annot.data;\n                        this_3.pdfViewerBase.formFieldCollection[parseInt(i.toString(), 10)].FormField.value = JSON.stringify(csData);\n                        if (formFieldIndex > -1) {\n                            this_3.pdfViewer.formFieldCollection[parseInt(formFieldIndex.toString(), 10)].value = JSON.stringify(csData);\n                        }\n                    }\n                    else {\n                        formFieldsData[parseInt(i.toString(), 10)].FormField.value = annot.data;\n                        this_3.pdfViewerBase.formFieldCollection[parseInt(i.toString(), 10)].FormField.value = annot.data;\n                        this_3.pdfViewer.nameTable[key.split('_')[0]].value = annot.data;\n                        this_3.pdfViewer.nameTable[\"\" + key].value = annot.data;\n                        if (formFieldIndex > -1) {\n                            this_3.pdfViewer.formFieldCollection[parseInt(formFieldIndex.toString(), 10)].value = annot.data;\n                        }\n                    }\n                    this_3.pdfViewer.formDesigner.updateFormFieldCollections(formFieldsData[parseInt(i.toString(), 10)].FormField);\n                    this_3.pdfViewer.formDesigner.updateFormFieldPropertiesChanges('formFieldPropertiesChange', formFieldsData[parseInt(i.toString(), 10)].FormField, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, '', formFieldsData[parseInt(i.toString(), 10)].FormField.value);\n                }\n                if (formFieldsData[parseInt(i.toString(), 10)].Key === annot.id) {\n                    formFieldsData[parseInt(i.toString(), 10)].FormField.signatureBound = annot.bounds;\n                }\n            };\n            var this_3 = this;\n            for (var i = 0; i < formFieldsData.length; i++) {\n                _loop_3(i);\n            }\n        }\n        this.pdfViewerBase.setItemInSessionStorage(formFieldsData, '_formDesigner');\n    };\n    /**\n     * @param {any} bounds - It describes about the bounds\n     * @private\n     * @returns {any} - any\n     */\n    FormFields.prototype.getDefaultBoundsforSign = function (bounds) {\n        return { x: bounds.x + 4, y: bounds.y + 4, width: bounds.width - 8, height: bounds.height - 8 };\n    };\n    /**\n     * @param {number} currentIndex - It describes about the current index\n     * @param {number} rotateAngle - It describes about the rorate angle\n     * @param {number} currentPage - It describes about the current page\n     * @param {number} zoomvalue - It describes about the zoom value\n     * @param {number} currentLeft - It describes about the current left\n     * @param {number} currentTop - It describes about the current top\n     * @param {number} currentWidth - It describes about the current width\n     * @param {number} currentHeight - It describes about the current height\n     * @param {boolean} isDraw - It describes about the isDraw\n     * @private\n     * @returns {any} - any\n     */\n    FormFields.prototype.getSignBounds = function (currentIndex, rotateAngle, currentPage, zoomvalue, currentLeft, currentTop, currentWidth, currentHeight, isDraw) {\n        var bounds;\n        var signatureId = this.pdfViewer.isInitialFieldToolbarSelection ? 'initialIcon' : 'signIcon';\n        var signIcon = document.getElementById(signatureId + '_' + currentPage + '_' + currentIndex);\n        var signLeft = signIcon ? parseFloat(signIcon.style.left) * zoomvalue : 0;\n        var difference = (currentLeft * zoomvalue) - (signLeft / zoomvalue);\n        if (rotateAngle === 90 || rotateAngle === 270) {\n            this.rotateAngle = 0;\n            if (signIcon.style.left !== '') {\n                if (isDraw) {\n                    return bounds = { x: currentLeft - (difference / zoomvalue) - zoomvalue,\n                        y: currentTop + (difference / zoomvalue) + zoomvalue, width: currentWidth, height: currentHeight };\n                }\n                else {\n                    return bounds = { x: currentLeft - (difference / zoomvalue) - zoomvalue,\n                        y: currentTop + (difference / zoomvalue) + zoomvalue, width: currentHeight, height: currentWidth };\n                }\n            }\n            else {\n                difference = 10;\n                if (isDraw) {\n                    return bounds = { x: currentLeft - currentWidth, y: currentTop + currentWidth,\n                        width: currentHeight, height: currentWidth };\n                }\n                else {\n                    return bounds = { x: currentLeft - currentWidth - difference / 2, y: currentTop + currentWidth + difference,\n                        width: currentHeight, height: currentWidth };\n                }\n            }\n        }\n        else {\n            this.rotateAngle = 0;\n            return bounds = { x: currentLeft, y: currentTop, width: currentWidth, height: currentHeight };\n        }\n    };\n    FormFields.prototype.updateSameFieldsValue = function (event) {\n        if (this.formFieldsData) {\n            for (var i = 0; i < this.formFieldsData.length; i++) {\n                var currentField = this.formFieldsData[parseInt(i.toString(), 10)];\n                if (event.target.name === currentField.FieldName && event.target.id !== currentField.uniqueID) {\n                    var currentTarget = document.getElementById(this.formFieldsData[parseInt(i.toString(), 10)].uniqueID);\n                    if (currentTarget) {\n                        currentTarget.value = event.target.value;\n                    }\n                    else {\n                        currentField.Text = event.target.value;\n                        this.updateDataInSession(currentField, null, null, null, null, true);\n                    }\n                }\n            }\n        }\n    };\n    FormFields.prototype.updateFormFieldsValue = function (event) {\n        var currentTarget = event.target;\n        var fieldIndex;\n        var nextFields;\n        if (currentTarget.InsertSpaces && !this.isKeyDownCheck) {\n            var font = parseInt(currentTarget.style.width, 10) + (parseInt(currentTarget.style.height, 10) / 2);\n            currentTarget.style.width = '' + font + 'px';\n            this.isKeyDownCheck = true;\n        }\n        if (event.which === 9 && currentTarget && (currentTarget.className === 'e-pdfviewer-formFields' || currentTarget.className === 'e-pdfviewer-signatureformfields e-pv-signature-focus' || currentTarget.className === 'e-pdfviewer-signatureformfields-signature')) {\n            var id = currentTarget.id.split('input_')[1].split('_')[0];\n            var textLayer = document.getElementById(this.pdfViewer.element.id + '_textLayer_' + parseInt(id, 10));\n            var currentFields = textLayer.getElementsByClassName('e-pdfviewer-formFields');\n            var istabindexed = true;\n            fieldIndex = this.pdfViewer.formFieldCollections.findIndex(function (field) { return field.id === currentTarget.id; });\n            if ((!event.shiftKey && event.key === 'Tab')) {\n                nextFields = fieldIndex + 1 < this.pdfViewer.formFieldCollections.length ?\n                    this.pdfViewer.formFieldCollections[fieldIndex + 1] : this.pdfViewer.formFieldCollections[0];\n            }\n            this.pdfViewer.focusFormField(nextFields);\n            istabindexed = true;\n            event.preventDefault();\n            var tabindex = currentTarget.tabIndex + 1;\n            while (!istabindexed) {\n                for (var l = 0; l < currentFields.length; l++) {\n                    istabindexed = false;\n                    if (currentFields[parseInt(l.toString(), 10)].tabIndex === (tabindex)) {\n                        currentFields[parseInt(l.toString(), 10)].focus();\n                        istabindexed = true;\n                        event.preventDefault();\n                        break;\n                    }\n                }\n                if (this.maintainTabIndex[\"\" + id] === tabindex) {\n                    istabindexed = true;\n                }\n                tabindex = tabindex + 1;\n            }\n        }\n        if ((event.shiftKey && event.key === 'Tab')) {\n            var fieldIndex_1 = this.pdfViewer.formFieldCollections.findIndex(function (field) { return field.id === currentTarget.id; });\n            var nextField = fieldIndex_1 > 0 ? this.pdfViewer.formFieldCollections[fieldIndex_1 - 1] :\n                this.pdfViewer.formFieldCollections[this.pdfViewer.formFieldCollections.length - 1];\n            this.pdfViewer.focusFormField(nextField);\n            event.preventDefault();\n        }\n        if (event.currentTarget.classList.contains('e-pdfviewer-signatureformfields') ||\n            event.currentTarget.classList.contains('e-pdfviewer-signatureformfields-signature')) {\n            if (event.key === 'Enter') {\n                var currentTarget_2 = event.target;\n                for (var m = 0; m < this.pdfViewer.formFieldCollections.length; m++) {\n                    if (currentTarget_2.id === this.pdfViewer.formFieldCollections[parseInt(m.toString(), 10)].id) {\n                        this.pdfViewerBase.signatureModule.setFocus(currentTarget_2.id);\n                        this.pdfViewer.fireFormFieldClickEvent('formFieldClicked', this.pdfViewer.formFieldCollections[parseInt(m.toString(), 10)]);\n                    }\n                }\n            }\n            else {\n                event.preventDefault();\n            }\n        }\n    };\n    FormFields.prototype.changeFormFields = function (event) {\n        var currentTarget = event.target;\n        this.updateDataInSession(currentTarget);\n    };\n    /**\n     * @param {any} target - It describes about the target\n     * @param {any} signaturePath - It describes about the signature path\n     * @param {any} signatureBounds - It describes about the signature bounds\n     * @param {string} signatureFontFamily - It describes about the signature font family\n     * @param {number} signatureFontSize   - It describes about the signature font size\n     * @param {boolean} isUpdateSameField - It describes about the isUpdateSameField\n     * @private\n     * @returns {void}\n     */\n    FormFields.prototype.updateDataInSession = function (target, signaturePath, signatureBounds, signatureFontFamily, signatureFontSize, isUpdateSameField) {\n        if (isUpdateSameField === void 0) { isUpdateSameField = false; }\n        this.pdfViewerBase.updateDocumentEditedProperty(true);\n        var filterFields = [];\n        var fieldsByName = ' ';\n        var filterFieldName = [];\n        var filterArrayLength = 0;\n        var data = this.pdfViewerBase.getItemFromSessionStorage('_formfields');\n        if (data && !this.pdfViewer.formDesignerModule) {\n            var FormFieldsData = JSON.parse(data);\n            filterFields = FormFieldsData.filter(function (item) { return item.uniqueID === target.id; });\n            if (filterFields.length > 0) {\n                fieldsByName = filterFields[0].FieldName;\n                filterFieldName = FormFieldsData.filter(function (item) { return item.FieldName === fieldsByName; });\n                filterArrayLength = filterFieldName.length;\n            }\n            for (var m = 0; m < FormFieldsData.length; m++) {\n                var currentData = FormFieldsData[parseInt(m.toString(), 10)];\n                if (currentData.uniqueID === target.id || fieldsByName === currentData.FieldName) {\n                    if (target && target.type === 'text' || target.type === 'password' || target.type === 'textarea') {\n                        var signField = target;\n                        if (signField.classList.contains('e-pdfviewer-signatureformfields') || signField.classList.contains('e-pdfviewer-signatureformfields-signature')) {\n                            if (signaturePath) {\n                                currentData.Value = signaturePath;\n                            }\n                            if (signatureBounds) {\n                                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(currentData.uniqueID) && fieldsByName === currentData.FieldName\n                                    && target.id === currentData.uniqueID) {\n                                    currentData.Bounds = signatureBounds;\n                                }\n                                else {\n                                    var boundWidth = this.ConvertPointToPixel(currentData.LineBounds.Width);\n                                    var boundHeight = this.ConvertPointToPixel(currentData.LineBounds.Height);\n                                    var boundX = this.ConvertPointToPixel(currentData.LineBounds.X);\n                                    var boundY = this.ConvertPointToPixel(currentData.LineBounds.Y);\n                                    var currentHeight = signatureBounds.height;\n                                    var currenWidth = signatureBounds.width;\n                                    var newX = boundX + ((boundWidth - currenWidth) / 2);\n                                    var newY = boundY + ((boundHeight - currentHeight) / 2);\n                                    currentData.Bounds = { x: newX, y: newY, height: currentHeight, width: currenWidth };\n                                }\n                            }\n                            if (signatureFontFamily) {\n                                currentData.FontFamily = signatureFontFamily;\n                                currentData.FontSize = signatureFontSize;\n                            }\n                        }\n                        else {\n                            currentData.Text = target.value;\n                            currentData.Value = target.value;\n                            currentData.Multiline = target.multiline;\n                        }\n                    }\n                    else if (target.type === 'radio') {\n                        if (currentData.uniqueID === target.id) {\n                            var targetRadioButton = target.id;\n                            var filterRadioButtonSameName = FormFieldsData.filter(function (sameNameRadioButtonField) { return (sameNameRadioButtonField.GroupName === target.name) && sameNameRadioButtonField.Name === 'RadioButton'; });\n                            for (var l = 0; l < filterRadioButtonSameName.length; l++) {\n                                var currentType = filterRadioButtonSameName[parseInt(l.toString(), 10)];\n                                if (currentType.uniqueID !== targetRadioButton) {\n                                    currentType.Selected = false;\n                                }\n                                var currentTarget = document.getElementById(currentType.uniqueID);\n                                if (currentTarget) {\n                                    if (targetRadioButton !== currentTarget.id) {\n                                        currentTarget.Selected = false;\n                                    }\n                                }\n                            }\n                            if (currentData.Value === '' || currentData.Value !== target.value) {\n                                currentData.Value = target.value;\n                            }\n                            if (target.value === currentData.Value || target.id === currentData.uniqueID) {\n                                currentData.Selected = true;\n                                break;\n                            }\n                            else {\n                                currentData.Selected = false;\n                            }\n                        }\n                    }\n                    else if (target.type === 'checkbox') {\n                        var targetCheckBox = target.id;\n                        var filterCheckBoxSameName = FormFieldsData.filter(function (sameNameCheckboxField) { return (sameNameCheckboxField.GroupName === target.name) && sameNameCheckboxField.Name === 'CheckBox'; });\n                        for (var l = 0; l < filterCheckBoxSameName.length; l++) {\n                            var currentType = filterCheckBoxSameName[parseInt(l.toString(), 10)];\n                            if (currentType.uniqueID !== targetCheckBox) {\n                                currentType.Selected = false;\n                                currentType.checked = false;\n                            }\n                            var currentTarget = document.getElementById(currentType.uniqueID);\n                            if (currentTarget) {\n                                if (targetCheckBox !== currentTarget.id) {\n                                    currentTarget.Selected = false;\n                                    currentTarget.checked = false;\n                                    currentTarget.style.webkitAppearance = 'none';\n                                }\n                            }\n                        }\n                        if (target.checked && target.id === currentData.uniqueID) {\n                            currentData.Selected = true;\n                        }\n                        else {\n                            currentData.Selected = false;\n                        }\n                        if (currentData.Value === '') {\n                            currentData.Value = target.value;\n                        }\n                    }\n                    else if (target.type === 'select-one' && target.size === 0) {\n                        if (target.selectedIndex < 0) {\n                            target.selectedIndex = currentData.selectedIndex;\n                        }\n                        var currentValue = target.options[target.selectedIndex].text;\n                        var childrens = target.children;\n                        for (var k = 0; k < childrens.length; k++) {\n                            if (childrens[parseInt(k.toString(), 10)].text === currentValue) {\n                                currentData.SelectedValue = currentValue;\n                                currentData.selectedIndex = target.selectedIndex;\n                            }\n                        }\n                    }\n                    else if (target.type === 'select-multiple' || target.size > 0) {\n                        var currentValue = target.selectedOptions;\n                        currentData.SelectedList = [];\n                        for (var z = 0; z < currentValue.length; z++) {\n                            var childrens = target.children;\n                            for (var k = 0; k < childrens.length; k++) {\n                                if (childrens[parseInt(k.toString(), 10)] === currentValue[parseInt(z.toString(), 10)]) {\n                                    currentData.SelectedList.push(k);\n                                }\n                            }\n                        }\n                        currentData.SelectedValue = target.value;\n                        var index = currentData.TextList ? currentData.TextList.indexOf(target.value) : 0;\n                        currentData.selectedIndex = index > -1 ? index : 0;\n                        currentData.SelectedList = [currentData.selectedIndex];\n                    }\n                    if (target.disabled) {\n                        currentData.IsReadonly = true;\n                    }\n                    currentData.IsRequired = target.Required ? target.Required : (target.required ? target.required : false);\n                    currentData.ToolTip = target.tooltip ? target.tooltip : '';\n                    this.updateFormFieldsCollection(currentData);\n                    filterArrayLength--;\n                    if (filterArrayLength === 0) {\n                        break;\n                    }\n                }\n                else if (!isUpdateSameField) {\n                    if (target && target.getAttribute('list') != null && target.type === 'text' && currentData.uniqueID === target.list.id) {\n                        currentData.SelectedValue = target.value;\n                    }\n                }\n                else if (isUpdateSameField) {\n                    currentData.SelectedValue = target.Text;\n                }\n                this.updateFormFieldsCollection(currentData);\n            }\n            _index__WEBPACK_IMPORTED_MODULE_0__.PdfViewerBase.sessionStorageManager.removeItem(this.pdfViewerBase.documentId + '_formfields');\n            this.pdfViewerBase.setItemInSessionStorage(FormFieldsData, '_formfields');\n        }\n        if (this.pdfViewer.formDesignerModule && target && target.id) {\n            var selectedItem = this.pdfViewer.nameTable[target.id.split('_')[0]];\n            if (selectedItem && selectedItem.wrapper && selectedItem.wrapper.children[0]) {\n                selectedItem.value = target.value;\n                var point = (0,_syncfusion_ej2_drawings__WEBPACK_IMPORTED_MODULE_2__.cornersPointsBeforeRotation)(selectedItem.wrapper.children[0]).topLeft;\n                this.pdfViewer.formDesignerModule.\n                    updateFormDesignerFieldInSessionStorage(point, selectedItem.wrapper.children[0], selectedItem.formFieldAnnotationType, selectedItem);\n            }\n        }\n    };\n    /**\n     * @private\n     * @returns {void}\n     */\n    FormFields.prototype.removeExistingFormFields = function () {\n        var data = this.pdfViewerBase.getItemFromSessionStorage('_formDesigner');\n        var formFieldsData = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(data) ? JSON.parse(data) : null;\n        if (formFieldsData) {\n            for (var i = 0; i < formFieldsData.length; i++) {\n                if (formFieldsData[parseInt(i.toString(), 10)].FormField.formFieldAnnotationType === 'RadioButton') {\n                    var buttonItem = [];\n                    buttonItem = formFieldsData[parseInt(i.toString(), 10)].FormField.radiobuttonItem;\n                    var sameButtonItemId = formFieldsData[parseInt(i.toString(), 10)].FormField.id.split('_')[0];\n                    for (var j = 0; j < buttonItem.length; j++) {\n                        var otherButton = buttonItem[parseInt(j.toString(), 10)];\n                        if (otherButton.id.split('_')[0] !== sameButtonItemId) {\n                            this.pdfViewer.formDesignerModule.deleteFormField(otherButton.id.split('_')[0]);\n                        }\n                    }\n                }\n                if (formFieldsData[parseInt(i.toString(), 10)].Key) {\n                    this.pdfViewer.formDesignerModule.deleteFormField(formFieldsData[parseInt(i.toString(), 10)].Key.split('_')[0]);\n                }\n            }\n        }\n    };\n    FormFields.prototype.applyCommonProperties = function (inputdiv, pageIndex, index, currentData, isFieldRotated) {\n        var inputField = document.getElementById(this.pdfViewer.element.id + 'input_' + pageIndex + '_' + index);\n        if (inputField) {\n            var textLayer = document.getElementById(this.pdfViewer.element.id + '_textLayer_' + pageIndex);\n            if (inputdiv.type === 'text' && inputField.parentElement !== textLayer) {\n                inputField.parentElement.remove();\n            }\n            if (!(inputField.className === 'e-pdfviewer-signatureformfields e-pv-signature-focus')) {\n                inputField.remove();\n            }\n        }\n        var signIcon = document.getElementById('signIcon_' + pageIndex + '_' + index);\n        var left = parseFloat(inputdiv.style.left);\n        var top = parseInt(inputdiv.style.top, 10);\n        var width = parseFloat(inputdiv.style.width);\n        var height = parseFloat(inputdiv.style.height);\n        var signIconWidth;\n        var signIconHeght;\n        var hightDifference;\n        var widthDifference;\n        var zoomvalue = this.pdfViewerBase.getZoomFactor();\n        if (signIcon && !isFieldRotated) {\n            signIconWidth = parseFloat(signIcon.style.width);\n            signIconHeght = parseFloat(signIcon.style.height);\n            if (signIcon.style.transform === 'rotate(90deg)') {\n                signIcon.style.transform = 'rotate(0deg)';\n                hightDifference = height / 2;\n                widthDifference = signIconWidth * zoomvalue;\n                signIcon.style.left = ((left - (hightDifference - (signIconWidth * zoomvalue))) + (widthDifference / 2)) + 'px';\n            }\n            if (signIcon.style.transform === 'rotate(180deg)') {\n                signIcon.style.transform = 'rotate(0deg)';\n                signIcon.style.left = left + 'px';\n                signIcon.style.top = (top) + 'px';\n            }\n            if (signIcon.style.transform === 'rotate(270deg)') {\n                signIcon.style.transform = 'rotate(0deg)';\n                hightDifference = height / 2;\n                widthDifference = signIconWidth * zoomvalue;\n                signIcon.style.left = ((left - (hightDifference - widthDifference)) + (widthDifference / 2)) + 'px';\n                signIcon.style.top = (top) + 'px';\n            }\n        }\n        if (currentData.IsSignatureField && this.isSignatureField) {\n            inputdiv.className = 'e-pdfviewer-signatureformfields-signature';\n            inputdiv.style.pointerEvents = 'none';\n        }\n        else if (currentData.IsSignatureField) {\n            if (currentData.Value) {\n                inputdiv.className = 'e-pdfviewer-signatureformfields-signature';\n                inputdiv.style.pointerEvents = 'none';\n            }\n            else {\n                inputdiv.className = 'e-pdfviewer-signatureformfields';\n            }\n        }\n        else if (currentData.Name !== 'Button') {\n            inputdiv.className = 'e-pdfviewer-formFields';\n        }\n        inputdiv.id = this.pdfViewer.element.id + 'input_' + pageIndex + '_' + index;\n        inputdiv.ariaLabel = this.pdfViewer.element.id + 'input_' + pageIndex;\n        inputdiv.style.zIndex = 1000;\n    };\n    /**\n     * @param {any} currentData - It describes about the current data\n     * @param {number} pageIndex - It describes about the page index\n     * @param {number} index - It describes about the index\n     * @param {any} printContainer - It describes about the print container\n     * @param {number} count - It describes about the count\n     * @private\n     * @returns {any} - any\n     */\n    FormFields.prototype.createFormFields = function (currentData, pageIndex, index, printContainer, count) {\n        var currentField;\n        switch (currentData['Name']) {\n            case 'Textbox':\n                currentField = this.createTextBoxField(currentData, pageIndex, 'text');\n                break;\n            case 'Password':\n                currentField = this.createTextBoxField(currentData, pageIndex, 'password');\n                break;\n            case 'RadioButton':\n                currentField = this.createRadioBoxField(currentData, pageIndex, 'radio');\n                break;\n            case 'CheckBox':\n                currentField = this.createRadioBoxField(currentData, pageIndex, 'checkbox', printContainer);\n                break;\n            case 'DropDown':\n                currentField = this.createDropDownField(currentData, pageIndex, index, printContainer);\n                break;\n            case 'ListBox':\n                currentField = this.createListBoxField(currentData, pageIndex);\n                break;\n            case 'InitialField':\n            case 'SignatureField': {\n                currentField = this.createSignatureField(currentData, pageIndex, index, printContainer, count);\n                var isFieldRotated = false;\n                if (currentData['Rotation'] === 0) {\n                    isFieldRotated = true;\n                }\n                if (currentData.Value && currentData.Value !== '') {\n                    this.renderExistingAnnnot(currentData, index, printContainer, isFieldRotated);\n                    this.isSignatureRendered = true;\n                    count++;\n                }\n                break;\n            }\n            case 'Button':\n                currentField = this.createButtonField(currentData, pageIndex);\n                break;\n            case 'ink':\n                if (this.pdfViewer.formDesignerModule) {\n                    if (currentData.Value && currentData.Value !== '' && !this.isSignatureRendered) {\n                        this.renderExistingAnnnot(currentData, index, printContainer);\n                    }\n                }\n                break;\n            case 'SignatureText':\n            case 'SignatureImage':\n                if (currentData.Value && currentData.Value !== '' && !this.isSignatureRendered) {\n                    this.renderExistingAnnnot(currentData, index, printContainer);\n                }\n                break;\n        }\n        return { currentField: currentField, count: count };\n    };\n    FormFields.prototype.getFormFieldType = function (currentData) {\n        var currentField;\n        switch (currentData['Name']) {\n            case 'Textbox':\n                currentField = 'Textbox';\n                break;\n            case 'Password':\n                currentField = 'Password';\n                break;\n            case 'RadioButton':\n                currentField = 'RadioButton';\n                break;\n            case 'CheckBox':\n                currentField = 'CheckBox';\n                break;\n            case 'DropDown':\n                currentField = 'DropDown';\n                break;\n            case 'ListBox':\n                currentField = 'ListBox';\n                break;\n            case 'SignatureField':\n                currentField = 'SignatureField';\n                if (currentData.IsInitialField) {\n                    currentField = 'InitialField';\n                }\n                break;\n            case 'InitialField':\n                currentField = 'InitialField';\n                break;\n        }\n        return currentField;\n    };\n    FormFields.prototype.createButtonField = function (data, pageIndex) {\n        var inputField = document.createElement('input');\n        if (data.Value && (this.isBase64(data.Value) || this.isURL(data.Value))) {\n            inputField.type = 'image';\n            inputField.src = data.Value;\n        }\n        else {\n            inputField.type = 'button';\n        }\n        inputField.className = 'e-pv-buttonItem';\n        if (data.Text !== '') {\n            inputField.value = data.Text;\n        }\n        else {\n            inputField.value = '';\n        }\n        inputField.name = data.FieldName;\n        return inputField;\n    };\n    /**\n     * Returns the boolean value based on the imgae source base64\n     *\n     * @param {string} imageSrc - Passing the image source.\n     * @returns {boolean} - boolean\n     */\n    FormFields.prototype.isBase64 = function (imageSrc) {\n        return /^data:([a-zA-Z]*\\/[a-zA-Z+.-]*);base64,/.test(imageSrc);\n    };\n    /**\n     * Returns the boolean value based on the imgae source URL\n     *\n     * @param {string} imageSrc - Passing the image source.\n     * @returns {boolean} - boolean\n     */\n    FormFields.prototype.isURL = function (imageSrc) {\n        try {\n            new URL(imageSrc);\n            return true;\n        }\n        catch (_a) {\n            return false;\n        }\n    };\n    FormFields.prototype.createTextBoxField = function (data, pageIndex, type) {\n        var inputField;\n        if (data.Visible === 1) {\n            return;\n        }\n        if (data.Multiline) {\n            inputField = document.createElement('textarea');\n            inputField.style.resize = 'none';\n        }\n        else {\n            inputField = document.createElement('input');\n            inputField.type = type;\n        }\n        if (data.MaxLength > 0) {\n            inputField.maxLength = data.MaxLength;\n        }\n        this.addAlignmentPropety(data, inputField);\n        if (data.Text !== '') {\n            inputField.value = data.Text;\n        }\n        else {\n            inputField.value = '';\n        }\n        if (!this.pdfViewer.enableAutoComplete) {\n            inputField.autocomplete = 'off';\n        }\n        inputField.name = data.FieldName;\n        return inputField;\n    };\n    FormFields.prototype.checkIsReadonly = function (data, inputField) {\n        var isReadonly = false;\n        for (var n = 0; n < this.readOnlyCollection.length; n++) {\n            if (inputField.id === this.readOnlyCollection[parseInt(n.toString(), 10)]) {\n                isReadonly = true;\n                break;\n            }\n        }\n        if (!this.pdfViewer.formDesignerModule && !this.pdfViewer.annotationModule && (data.IsInitialField || data.IsSignatureField)) {\n            isReadonly = true;\n        }\n        if (data.IsReadonly || (!this.pdfViewer.enableFormFields) || isReadonly) {\n            inputField.disabled = true;\n            inputField.style.cursor = 'default';\n            inputField.style.backgroundColor = 'transparent';\n        }\n        else {\n            var borderColor = data.BackColor;\n            if (data.Name !== 'Button') {\n                inputField.style.backgroundColor = 'rgba(' + borderColor.R + ',' + borderColor.G + ',' + borderColor.B + ',' + 0.2 + ')';\n            }\n            else {\n                var opacity = data.Opacity;\n                if (opacity) {\n                    inputField.style.backgroundColor = 'rgba(' + borderColor.R + ',' + borderColor.G + ',' + borderColor.B + ',' + opacity + ')';\n                }\n                else {\n                    inputField.style.backgroundColor = 'rgb(' + borderColor.R + ',' + borderColor.G + ',' + borderColor.B + ')';\n                }\n            }\n            var fontColor = data.FontColor;\n            inputField.style.color = 'rgba(' + fontColor.R + ',' + fontColor.G + ',' + fontColor.B + ',' + 1 + ')';\n        }\n    };\n    /**\n     * @param {boolean} isReadonly - It describes about the isReadOnly value\n     * @private\n     * @returns {void}\n     */\n    FormFields.prototype.formFieldsReadOnly = function (isReadonly) {\n        var formFields = document.getElementsByClassName('e-pdfviewer-formFields');\n        this.makeformFieldsReadonly(formFields, isReadonly);\n        var signatureFields = document.getElementsByClassName('e-pdfviewer-signatureformfields');\n        this.makeformFieldsReadonly(signatureFields, isReadonly);\n    };\n    FormFields.prototype.makeformFieldsReadonly = function (formFields, isReadonly) {\n        for (var i = 0; i < formFields.length; i++) {\n            if (formFields[parseInt(i.toString(), 10)]) {\n                var inputField = formFields[parseInt(i.toString(), 10)];\n                if (!isReadonly) {\n                    inputField.disabled = true;\n                    inputField.style.cursor = 'default';\n                }\n                else {\n                    inputField.disabled = false;\n                }\n            }\n        }\n    };\n    FormFields.prototype.applyTabIndex = function (data, inputField, pageIndex) {\n        inputField.tabIndex = data.TabIndex;\n        this.maxTabIndex = Math.max(this.maxTabIndex, inputField.tabIndex);\n        if (this.minTabIndex === -1) {\n            this.minTabIndex = inputField.tabIndex;\n        }\n        this.minTabIndex = Math.min(this.minTabIndex, inputField.tabIndex);\n        this.maintainTabIndex[pageIndex.toString()] = this.maxTabIndex;\n        this.maintanMinTabindex[pageIndex.toString()] = this.minTabIndex;\n    };\n    FormFields.prototype.checkIsRequiredField = function (data, inputField) {\n        if (data.IsRequired) {\n            inputField.required = true;\n            inputField.style.border = '1px solid red';\n        }\n        else {\n            var borderColor = data.BorderColor;\n            inputField.style.border = data.BorderWidth;\n            inputField.style.borderColor = 'rgba(' + borderColor.R + ',' + borderColor.G + ',' + borderColor.B + ',' + 1 + ')';\n        }\n        if (inputField.type !== 'checkbox' && inputField.type !== 'radio') {\n            var borderStyle = data.BorderStyle;\n            this.addBorderStylePropety(borderStyle, inputField);\n        }\n    };\n    FormFields.prototype.applyDefaultColor = function (inputField) {\n        if (inputField.type !== 'button' && (inputField.style.backgroundColor === 'rgba(255, 255, 255, 0.2)' || inputField.style.backgroundColor === 'rgba(0, 0, 0, 0.2)') || inputField.style.backgroundColor === 'rgba(218, 234, 247, 0.2)') {\n            inputField.style.backgroundColor = 'rgba(0, 20, 200, 0.2)';\n        }\n        if (inputField.style.color === 'rgba(255, 255, 255, 0.2)') {\n            inputField.style.color = 'black';\n        }\n    };\n    FormFields.prototype.addAlignmentPropety = function (data, inputField) {\n        var alignment = data.Alignment;\n        switch (alignment) {\n            case 0:\n                inputField.style.textAlign = 'left';\n                break;\n            case 1:\n                inputField.style.textAlign = 'center';\n                break;\n            case 2:\n                inputField.style.textAlign = 'right';\n                break;\n            case 3:\n                inputField.style.textAlign = 'justify';\n                break;\n        }\n    };\n    FormFields.prototype.addBorderStylePropety = function (borderStyle, inputField) {\n        switch (borderStyle) {\n            case 0:\n                inputField.style.borderStyle = 'solid';\n                break;\n            case 1:\n                inputField.style.borderStyle = 'dashed';\n                break;\n            case 2:\n                inputField.style.borderStyle = 'outset';\n                break;\n            case 3:\n                inputField.style.borderStyle = 'inset';\n                break;\n            case 4:\n                inputField.style.borderStyle = 'outset';\n                break;\n            case 5:\n                inputField.style.borderStyle = 'dotted';\n                break;\n            case 6:\n                inputField.style.borderStyle = 'inset';\n                break;\n        }\n    };\n    FormFields.prototype.createRadioBoxField = function (data, pageIndex, type, printContainer) {\n        var inputField = document.createElement('input');\n        inputField.type = type;\n        if (data.Selected) {\n            inputField.checked = true;\n        }\n        else if (type === 'checkbox' && !printContainer) {\n            inputField.style.webkitAppearance = 'none';\n        }\n        inputField.name = data.GroupName;\n        inputField.value = data.Value;\n        return inputField;\n    };\n    FormFields.prototype.createDropDownField = function (data, pageIndex, index, printContainer) {\n        var inputField = document.createElement('select');\n        var childItems = (data.Name === 'DropDown') ? data['ComboBoxList'] : data['TextList'];\n        if (data.Selected && !printContainer) {\n            var previousField = document.getElementById('editableDropdown' + pageIndex + '_' + index);\n            if (previousField) {\n                previousField.remove();\n            }\n            var inputFields = document.createElement('input');\n            inputFields.id = 'editableDropdown' + pageIndex + '_' + index;\n            inputFields.setAttribute('list', this.pdfViewer.element.id + 'input_' + pageIndex + '_' + index);\n            var bounds = data['LineBounds'];\n            var font = data['Font'];\n            inputFields.style.position = 'absolute';\n            inputFields.style.border = '0px';\n            this.applyPosition(inputFields, bounds, font, pageIndex, data['Rotation']);\n            inputFields.style.backgroundColor = 'rgba(0, 20, 200, 0.2)';\n            inputFields.className = 'e-pdfviewer-formFields';\n            if (data.selectedIndex === -1) {\n                inputFields.value = data.SelectedValue;\n            }\n            if (printContainer) {\n                printContainer.appendChild(inputFields);\n            }\n            else {\n                var textLayer = document.getElementById(this.pdfViewer.element.id + '_textLayer_' + pageIndex);\n                textLayer.appendChild(inputFields);\n            }\n            inputFields.addEventListener('focus', this.focusFormFields.bind(this));\n            inputFields.addEventListener('blur', this.blurFormFields.bind(this));\n            inputFields.addEventListener('click', this.updateFormFields.bind(this));\n            inputFields.addEventListener('change', this.changeFormFields.bind(this));\n            inputFields.addEventListener('keydown', this.updateFormFieldsValue.bind(this));\n            inputField = document.createElement('DATALIST');\n        }\n        for (var j = 0; j < childItems.length; j++) {\n            var option = document.createElement('option');\n            option.className = 'e-dropdownSelect';\n            var itemName = childItems[parseInt(j.toString(), 10)].itemName ?\n                childItems[parseInt(j.toString(), 10)].itemName : childItems[parseInt(j.toString(), 10)].ItemName;\n            var itemValue = childItems[parseInt(j.toString(), 10)].itemValue ?\n                childItems[parseInt(j.toString(), 10)].itemValue : childItems[parseInt(j.toString(), 10)].ItemValue;\n            if (data.SelectedValue === itemName || data.selectedIndex === j) {\n                option.selected = true;\n            }\n            else {\n                option.selected = false;\n            }\n            option.value = itemValue;\n            option.innerHTML = itemName;\n            inputField.appendChild(option);\n        }\n        inputField.name = data.Text;\n        return inputField;\n    };\n    FormFields.prototype.createListBoxField = function (data, pageIndex) {\n        var inputField = document.createElement('select');\n        var childItems = data['TextList'];\n        if (data.MultiSelect) {\n            inputField.multiple = true;\n        }\n        else {\n            inputField.multiple = false;\n            inputField.size = childItems.length;\n        }\n        for (var j = 0; j < childItems.length; j++) {\n            var option = document.createElement('option');\n            option.className = 'e-pdfviewer-ListBox';\n            for (var k = 0; k < data.SelectedList.length; k++) {\n                if (data.SelectedList[parseInt(k.toString(), 10)] === j) {\n                    option.selected = true;\n                }\n            }\n            option.innerHTML = childItems[parseInt(j.toString(), 10)];\n            inputField.appendChild(option);\n        }\n        inputField.name = data.Text;\n        return inputField;\n    };\n    FormFields.prototype.createSignatureField = function (data, pageIndex, index, printContainer, count) {\n        var inputField = document.createElement('input');\n        inputField.type = 'text';\n        inputField.name = data.FieldName;\n        var zoomvalue = this.pdfViewerBase.getZoomFactor();\n        var previousField = document.getElementById('signIcon_' + pageIndex + '_' + index);\n        if (previousField && !printContainer) {\n            previousField.remove();\n        }\n        this.pdfViewerBase.isInitialField = data.IsInitialField;\n        var signIndicator = this.pdfViewerBase.isInitialField ? 'Initial' : 'Sign';\n        //check whether the width for sign indicator has default value or not and then set the default width value for initial field.\n        var signatureFieldIndicatorWidth = this.pdfViewer.signatureFieldSettings.signatureIndicatorSettings ?\n            (this.pdfViewer.signatureFieldSettings.signatureIndicatorSettings.width === 19 ?\n                (this.pdfViewerBase.isInitialField ? 27 : 19) :\n                this.pdfViewer.signatureFieldSettings.signatureIndicatorSettings.width) : 19;\n        var span = document.createElement('span');\n        var textLayer = document.getElementById(this.pdfViewer.element.id + '_textLayer_' + pageIndex);\n        var bounds = data['LineBounds'];\n        var left = this.ConvertPointToPixel(bounds.X);\n        var top = this.ConvertPointToPixel(bounds.Y);\n        var indicatorWidth = this.ConvertPointToPixel(bounds.Width);\n        var indicatorHeight = this.ConvertPointToPixel(bounds.Height);\n        var height = this.pdfViewer.signatureFieldSettings.signatureIndicatorSettings ?\n            (this.pdfViewer.signatureFieldSettings.signatureIndicatorSettings.height > indicatorHeight * zoomvalue / 2 ?\n                indicatorHeight * zoomvalue / 2 : this.pdfViewer.signatureFieldSettings.signatureIndicatorSettings.height) :\n            indicatorHeight * zoomvalue / 2;\n        var width = signatureFieldIndicatorWidth > indicatorWidth * zoomvalue / 2 ? indicatorWidth * zoomvalue / 2 :\n            signatureFieldIndicatorWidth;\n        var size = this.pdfViewer.signatureFieldSettings.signatureIndicatorSettings ?\n            (this.pdfViewer.signatureFieldSettings.signatureIndicatorSettings.fontSize > height / 2 ? 10 :\n                this.pdfViewer.signatureFieldSettings.signatureIndicatorSettings.fontSize) : 10;\n        var fontSize = size > width ? width / 2 : (size > height ? height / 2 : size);\n        span.style.position = 'absolute';\n        span.id = 'signIcon_' + pageIndex + '_' + index;\n        var rotation = this.getAngle(pageIndex);\n        var annotBounds = { left: left, top: top, width: width, height: height };\n        var fieldBounds = this.getBounds(annotBounds, pageIndex);\n        span.style.transform = 'rotate(' + rotation + 'deg)';\n        span.style.left = fieldBounds.left * zoomvalue + 'px';\n        span.style.top = fieldBounds.top * zoomvalue + 'px';\n        if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.Browser.isDevice && !this.pdfViewer.enableDesktopMode) {\n            span.style.height = 5 + 'px';\n            span.style.width = 10 + 'px';\n            span.style.fontSize = '3px';\n        }\n        else {\n            span.style.height = height + 'px';\n            span.style.width = width + 'px';\n            span.style.fontSize = fontSize + 'px';\n            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isBlazor)()) {\n                span.style.fontSize = (fontSize - 1) + 'px';\n            }\n        }\n        if (!((height + this.indicatorPaddingValue) > indicatorHeight * zoomvalue) &&\n            !((width + this.indicatorPaddingValue) > indicatorWidth * zoomvalue)) {\n            span.style.padding = '2px';\n        }\n        span.style.textAlign = 'center';\n        span.style.boxSizing = 'content-box';\n        span.innerHTML = this.pdfViewer.signatureFieldSettings.signatureIndicatorSettings ?\n            (this.pdfViewer.signatureFieldSettings.signatureIndicatorSettings.text ?\n                this.pdfViewer.signatureFieldSettings.signatureIndicatorSettings.text : signIndicator) : signIndicator;\n        span.style.color = this.pdfViewer.signatureFieldSettings.signatureIndicatorSettings ? (this.pdfViewer.signatureFieldSettings.signatureIndicatorSettings.color ? this.pdfViewer.signatureFieldSettings.signatureIndicatorSettings.color : 'black') : 'black';\n        span.style.backgroundColor = this.pdfViewer.signatureFieldSettings.signatureIndicatorSettings ? (this.pdfViewer.signatureFieldSettings.signatureIndicatorSettings.backgroundColor ? this.pdfViewer.signatureFieldSettings.signatureIndicatorSettings.backgroundColor : 'orange') : 'orange';\n        span.style.opacity = this.pdfViewer.signatureFieldSettings.signatureIndicatorSettings ?\n            (this.pdfViewer.signatureFieldSettings.signatureIndicatorSettings.opacity ?\n                this.pdfViewer.signatureFieldSettings.signatureIndicatorSettings.opacity : 1) : 1;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(textLayer)) {\n            textLayer.appendChild(span);\n        }\n        this.addSignaturePath(data, count);\n        return inputField;\n    };\n    FormFields.prototype.addSignaturePath = function (signData, count) {\n        this.isSignatureField = false;\n        var data = this.pdfViewerBase.getItemFromSessionStorage('_formfields');\n        if (data) {\n            var formFieldsData = JSON.parse(data);\n            if (typeof formFieldsData === 'string') {\n                formFieldsData = JSON.parse(formFieldsData);\n            }\n            for (var m = 0; m < formFieldsData.length; m++) {\n                var currentData = formFieldsData[parseInt(m.toString(), 10)];\n                if (currentData.ActualFieldName === null && count && (currentData.Name === 'ink' || currentData.Name === 'SignatureField' || currentData.Name === 'SignatureImage' || currentData.Name === 'SignatureText') && (this.pdfViewer.formDesigner ? ((currentData.FieldName.split('_')[0]) === (signData.ActualFieldName) || (currentData.FieldName.split('_')[0]) === (signData.FieldName)) : ((currentData.FieldName.split('_')[0] === (signData.FieldName)) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(signData.ActualFieldName)) && currentData.Value && currentData.Value !== '')) {\n                    if (signData.PageIndex === currentData.PageIndex) {\n                        signData.Value = currentData.Value;\n                        signData.FontFamily = currentData.FontFamily;\n                        signData.FontSize = currentData.FontSize;\n                        this.isSignatureField = true;\n                        signData.Bounds = currentData.LineBounds;\n                    }\n                }\n                if (currentData.ActualFieldName === null && count && (currentData.Name === 'ink' || currentData.Name === 'SignatureField' || currentData.Name === 'SignatureImage' || currentData.Name === 'SignatureText') && this.pdfViewer.formDesigner ? currentData.FieldName === signData.ActualFieldName + '_' + count || currentData.FieldName === signData.FieldName + '_' + count : ((currentData.FieldName === signData.FieldName + '_' + count || currentData.FieldName === signData.ActualFieldName + '_' + count) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(signData.ActualFieldName)) && currentData.Value && currentData.Value !== '') {\n                    signData.Value = currentData.Value;\n                    signData.FontFamily = currentData.FontFamily;\n                    signData.FontSize = currentData.FontSize;\n                    this.isSignatureField = true;\n                    if (!signData.Bounds) {\n                        signData.Bounds = currentData.LineBounds;\n                    }\n                    break;\n                }\n            }\n        }\n        return this.isSignatureField;\n    };\n    FormFields.prototype.getBounds = function (bound, pageIndex, rotation, isFieldRotated) {\n        var pageDetails = this.pdfViewerBase.pageSize[parseInt(pageIndex.toString(), 10)];\n        var bounds;\n        if (rotation > 0) {\n            bounds = this.getBoundsPosition(rotation, bound, pageDetails, isFieldRotated);\n        }\n        else {\n            bounds = this.getBoundsPosition(pageDetails.rotation, bound, pageDetails, isFieldRotated);\n        }\n        return bounds;\n    };\n    FormFields.prototype.getBoundsPosition = function (rotation, bound, pageDetails, isFieldRotated) {\n        var bounds;\n        if (!isFieldRotated) {\n            switch (rotation) {\n                case 90:\n                    bounds = { left: pageDetails.width - bound.top - bound.height, top: bound.left, width: bound.height, height: bound.width };\n                    break;\n                case 180:\n                    bounds = { left: pageDetails.width - bound.left - bound.width, top: pageDetails.height - bound.top - bound.height,\n                        width: bound.width, height: bound.height };\n                    break;\n                case 270:\n                    bounds = { left: bound.top, top: pageDetails.height - bound.left - bound.width, width: bound.height, height: bound.width };\n                    break;\n                case 0:\n                    bounds = bound;\n                    break;\n                case 1:\n                    bounds = { left: pageDetails.width - bound.top - bound.height, top: bound.left, width: bound.height, height: bound.width };\n                    break;\n                case 2:\n                    bounds = { left: pageDetails.width - bound.left - bound.width, top: pageDetails.height - bound.top - bound.height,\n                        width: bound.width, height: bound.height };\n                    break;\n                case 3:\n                    bounds = { left: bound.top, top: pageDetails.height - bound.left - bound.width, width: bound.height, height: bound.width };\n                    break;\n            }\n            if (!bounds) {\n                bounds = bound;\n            }\n        }\n        else {\n            switch (rotation) {\n                case 0:\n                    bounds = bound;\n                    break;\n                case 1:\n                    bounds = { left: pageDetails.width - bound.top - bound.height - (bound.width / 2 - bound.height / 2),\n                        top: bound.left + (bound.width / 2 - bound.height / 2), width: bound.width, height: bound.height };\n                    break;\n                case 2:\n                    bounds = { left: pageDetails.width - bound.left - bound.width, top: pageDetails.height - bound.top - bound.height,\n                        width: bound.width, height: bound.height };\n                    break;\n                case 3:\n                    bounds = { left: bound.top - (bound.width / 2 - bound.height / 2), top: (pageDetails.height - bound.left -\n                            bound.width + (bound.width / 2 - bound.height / 2)), width: bound.width, height: bound.height };\n                    break;\n            }\n            if (!bounds) {\n                bounds = bound;\n            }\n        }\n        return bounds;\n    };\n    FormFields.prototype.applyPosition = function (inputField, bounds, font, pageIndex, rotation, isFieldRotated) {\n        if (bounds) {\n            var left = this.ConvertPointToPixel(bounds.X);\n            var top_3 = this.ConvertPointToPixel(bounds.Y);\n            var width = this.ConvertPointToPixel(bounds.Width);\n            var height = this.ConvertPointToPixel(bounds.Height);\n            var fontHeight = 0;\n            var fieldBounds = { left: left, top: top_3, width: width, height: height };\n            var annotBounds = this.getBounds(fieldBounds, pageIndex, rotation, isFieldRotated);\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(font) && font.Height) {\n                inputField.style.fontFamily = font.Name;\n                if (font.Italic) {\n                    inputField.style.fontStyle = 'italic';\n                }\n                if (font.Bold) {\n                    inputField.style.fontWeight = 'Bold';\n                }\n                fontHeight = this.ConvertPointToPixel(font.Size);\n            }\n            this.pdfViewerBase.setStyleToTextDiv(inputField, annotBounds.left, annotBounds.top, fontHeight, annotBounds.width, annotBounds.height, false);\n        }\n    };\n    FormFields.prototype.renderExistingAnnnot = function (data, index, printContainer, isFieldRotated) {\n        if (!printContainer) {\n            var bounds = void 0;\n            if (data.Bounds && data.Name !== 'ink') {\n                bounds = data.Bounds;\n            }\n            else {\n                bounds = data.LineBounds;\n            }\n            var currentLeft = void 0;\n            var currentTop = void 0;\n            var currentWidth = void 0;\n            var currentHeight = void 0;\n            if (bounds.x || bounds.y || bounds.width || bounds.height) {\n                currentLeft = bounds.x;\n                currentTop = bounds.y;\n                currentWidth = bounds.width;\n                currentHeight = bounds.height;\n            }\n            else {\n                currentLeft = this.ConvertPointToPixel(bounds.X);\n                currentTop = this.ConvertPointToPixel(bounds.Y);\n                currentWidth = this.ConvertPointToPixel(bounds.Width);\n                currentHeight = this.ConvertPointToPixel(bounds.Height);\n            }\n            var currentPage = parseFloat(data['PageIndex']);\n            var bound = { left: currentLeft, top: currentTop, width: currentWidth, height: currentHeight };\n            var newBounds = this.updateSignatureBounds(bound, currentPage, isFieldRotated);\n            var annot_1;\n            var fontFamily = data.FontFamily ? data.FontFamily : data.fontFamily;\n            if ((this.pdfViewerBase.isSignatureImageData(data.Value))) {\n                annot_1 = {\n                    id: this.pdfViewer.element.id + 'input_' + currentPage + '_' + index, bounds: newBounds, pageIndex: currentPage, data: data.Value, modifiedDate: '',\n                    shapeAnnotationType: 'SignatureImage', opacity: 1, rotateAngle: isFieldRotated ? this.getAngle(currentPage) : 0, annotName: 'SignatureField', comments: [], review: { state: '', stateModel: '', modifiedDate: '', author: '' }\n                };\n            }\n            else if (this.pdfViewerBase.isSignaturePathData(data.Value)) {\n                var bound_1 = newBounds;\n                var tempBounds = { left: newBounds.x, top: newBounds.y, width: newBounds.width, height: newBounds.height };\n                bound_1 = this.updateSignatureBounds(tempBounds, currentPage, false);\n                annot_1 = {\n                    id: this.pdfViewer.element.id + 'input_' + currentPage + '_' + index, bounds: bound_1, pageIndex: currentPage, data: data.Value, modifiedDate: '',\n                    shapeAnnotationType: 'Path', opacity: 1, rotateAngle: 0, annotName: 'SignatureField', comments: [], review: { state: '', stateModel: '', modifiedDate: '', author: '' }\n                };\n            }\n            else {\n                annot_1 = {\n                    id: this.pdfViewer.element.id + 'input_' + currentPage + '_' + index, bounds: newBounds, pageIndex: currentPage, data: data.Value, modifiedDate: '',\n                    shapeAnnotationType: 'SignatureText', opacity: 1, rotateAngle: isFieldRotated ? this.getAngle(currentPage) : 0, annotName: 'SignatureField', comments: [], review: { state: '', stateModel: '', modifiedDate: '', author: '' }, fontFamily: data.FontFamily, fontSize: data.FontSize\n                };\n                annot_1.fontFamily = fontFamily === 'TimesRoman' ? 'Times New Roman' : fontFamily;\n                annot_1.fontSize = data.FontSize ? data.FontSize : data.fontSize;\n            }\n            if ((data.Name === 'SignatureField' || data.Name === 'InitialField') && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(data.id)) {\n                var elementId = data.id;\n                var signatureFieldElement = document.getElementById(elementId + '_content_html_element');\n                var signatureField = this.pdfViewer.nameTable[\"\" + elementId];\n                annot_1.id = signatureField.id + '_content';\n                var obj_1 = this.pdfViewer.add(annot_1);\n                signatureField.wrapper.children.push(obj_1.wrapper);\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(signatureFieldElement) && this.isSignatureField) {\n                    var inputField = signatureFieldElement.children[0].children[0];\n                    inputField.style.pointerEvents = 'none';\n                    inputField.className = 'e-pdfviewer-signatureformfields-signature';\n                    inputField.parentElement.style.pointerEvents = 'none';\n                }\n                else if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(signatureFieldElement) && data.Value) {\n                    var inputField = signatureFieldElement.children[0].children[0];\n                    inputField.style.pointerEvents = 'none';\n                    inputField.className = 'e-pdfviewer-signatureformfields-signature';\n                    inputField.parentElement.style.pointerEvents = 'none';\n                }\n            }\n            else {\n                var target = document.getElementById(annot_1.id);\n                if (target && target.classList.contains('e-pdfviewer-signatureformfields-signature')) {\n                    this.pdfViewer.annotation.deleteAnnotationById(annot_1.id);\n                }\n                this.pdfViewer.add(annot_1);\n                if (target) {\n                    this.updateDataInSession(target, annot_1.data, annot_1.bounds);\n                    this.pdfViewer.fireSignatureAdd(annot_1.pageIndex, annot_1.id, annot_1.shapeAnnotationType, annot_1.bounds, annot_1.opacity, annot_1.strokeColor, annot_1.thickness, annot_1.data);\n                }\n            }\n            data.Bounds = annot_1.bounds;\n            if (this.pdfViewer.formDesignerModule) {\n                var zoomvalue = this.pdfViewerBase.getZoomFactor();\n                annot_1.bounds = { x: currentLeft * zoomvalue, y: currentTop * zoomvalue, width: currentWidth * zoomvalue,\n                    height: currentHeight * zoomvalue };\n                this.updateSignatureDataInSession(annot_1, annot_1.id);\n            }\n            var canvass = this.pdfViewerBase.getAnnotationCanvas('_annotationCanvas_', currentPage);\n            var obj = this.pdfViewer.formFieldCollection.filter(function (field) { return annot_1.id.split('_')[0] === field.id; });\n            if (obj.length > 0 && obj[0].visibility !== 'hidden' || !this.pdfViewer.formDesignerModule) {\n                this.pdfViewer.renderDrawing(canvass, currentPage);\n            }\n        }\n    };\n    /**\n     * @param {any} bound - It describes about the bound\n     * @param {number} pageIndex - It describes about the page index\n     * @param {boolean} isFieldRotated - It describes about the isFieldRotated\n     * @private\n     * @returns {any} - any\n     */\n    FormFields.prototype.updateSignatureBounds = function (bound, pageIndex, isFieldRotated) {\n        var pageDetails = this.pdfViewerBase.pageSize[parseInt(pageIndex.toString(), 10)];\n        if (pageDetails) {\n            if (!isFieldRotated) {\n                if (pageDetails.rotation === 1) {\n                    return { x: pageDetails.width - bound.top - bound.height, y: bound.left, width: bound.height, height: bound.width };\n                }\n                else if (pageDetails.rotation === 2) {\n                    return { x: pageDetails.width - bound.left - bound.width, y: pageDetails.height - bound.top - bound.height,\n                        width: bound.width, height: bound.height };\n                }\n                else if (pageDetails.rotation === 3) {\n                    return { x: bound.top, y: (pageDetails.height - bound.left - bound.width), width: bound.height, height: bound.width };\n                }\n                else {\n                    return { x: bound.left, y: bound.top, width: bound.width, height: bound.height };\n                }\n            }\n            else {\n                if (pageDetails.rotation === 1) {\n                    return { x: pageDetails.width - bound.top - bound.height - (bound.width / 2 - bound.height / 2),\n                        y: bound.left + (bound.width / 2 - bound.height / 2), width: bound.width, height: bound.height };\n                }\n                else if (pageDetails.rotation === 2) {\n                    return { x: pageDetails.width - bound.left - bound.width, y: pageDetails.height - bound.top - bound.height,\n                        width: bound.width, height: bound.height };\n                }\n                else if (pageDetails.rotation === 3) {\n                    return { x: bound.top - (bound.width / 2 - bound.height / 2), y: (pageDetails.height - bound.left - bound.width +\n                            (bound.width / 2 - bound.height / 2)), width: bound.width, height: bound.height };\n                }\n                else {\n                    return { x: bound.left, y: bound.top, width: bound.width, height: bound.height };\n                }\n            }\n        }\n        else {\n            return { x: bound.left, y: bound.top, width: bound.width, height: bound.height };\n        }\n    };\n    FormFields.prototype.resetFormFields = function () {\n        var formFieldData = this.pdfViewer.formFieldCollections;\n        for (var i = 0; i < formFieldData.length; i++) {\n            var currentData = formFieldData[parseInt(i.toString(), 10)];\n            this.currentTarget = document.getElementById(currentData.id);\n            if (currentData.type === 'Textbox') {\n                this.currentTarget.value = currentData.value;\n            }\n            else if (currentData.type === 'RadioButton') {\n                this.currentTarget.checked = currentData.value;\n                if (currentData.value) {\n                    this.updateDataInSession(this.currentTarget);\n                }\n            }\n            else if (currentData.type === 'DropDown') {\n                this.currentTarget.value = currentData.value;\n            }\n            else if (currentData.type === 'CheckBox') {\n                this.currentTarget.checked = currentData.value;\n            }\n            else if (currentData.type === 'SignatureField') {\n                var annotation = this.pdfViewer.nameTable[currentData.id];\n                if (annotation) {\n                    if (this.currentTarget && this.currentTarget.className === 'e-pdfviewer-signatureformfields-signature') {\n                        this.currentTarget.className = 'e-pdfviewer-signatureformfields';\n                        this.currentTarget.style.pointerEvents = '';\n                        this.updateDataInSession(this.currentTarget, '');\n                    }\n                    this.pdfViewer.remove(annotation);\n                    this.pdfViewer.renderDrawing();\n                }\n            }\n            if (currentData.type !== 'RadioButton' && currentData.type !== 'SignatureField') {\n                this.updateDataInSession(this.currentTarget);\n            }\n        }\n    };\n    /**\n     * @private\n     * @returns {void}\n     */\n    FormFields.prototype.clearFormFieldStorage = function () {\n        var sessionSize = _index__WEBPACK_IMPORTED_MODULE_0__.PdfViewerBase.sessionStorageManager.getWindowSessionStorageSize();\n        var maxSessionSize = 4500;\n        if (this.pdfViewerBase.isDeviceiOS || this.pdfViewerBase.isMacSafari) {\n            maxSessionSize = 2000;\n        }\n        if (this.pdfViewerBase.isStorageExceed) {\n            var storageLength = _index__WEBPACK_IMPORTED_MODULE_0__.PdfViewerBase.sessionStorageManager.getSessionLength();\n            var formFieldsList = [];\n            for (var i = 0; i < storageLength; i++) {\n                if (_index__WEBPACK_IMPORTED_MODULE_0__.PdfViewerBase.sessionStorageManager.getKey(i) && _index__WEBPACK_IMPORTED_MODULE_0__.PdfViewerBase.sessionStorageManager.getKey(i).split('_')[3]) {\n                    if (_index__WEBPACK_IMPORTED_MODULE_0__.PdfViewerBase.sessionStorageManager.getKey(i).split('_')[3] === 'formfields') {\n                        this.pdfViewerBase.formFieldStorage[_index__WEBPACK_IMPORTED_MODULE_0__.PdfViewerBase.sessionStorageManager.getKey(i)] =\n                            _index__WEBPACK_IMPORTED_MODULE_0__.PdfViewerBase.sessionStorageManager.getItem(_index__WEBPACK_IMPORTED_MODULE_0__.PdfViewerBase.sessionStorageManager.getKey(i));\n                        formFieldsList.push(_index__WEBPACK_IMPORTED_MODULE_0__.PdfViewerBase.sessionStorageManager.getKey(i));\n                    }\n                    else if (_index__WEBPACK_IMPORTED_MODULE_0__.PdfViewerBase.sessionStorageManager.getKey(i).split('_')[3] === 'formDesigner') {\n                        this.pdfViewerBase.formFieldStorage[_index__WEBPACK_IMPORTED_MODULE_0__.PdfViewerBase.sessionStorageManager.getKey(i)] =\n                            _index__WEBPACK_IMPORTED_MODULE_0__.PdfViewerBase.sessionStorageManager.getItem(_index__WEBPACK_IMPORTED_MODULE_0__.PdfViewerBase.sessionStorageManager.getKey(i));\n                        formFieldsList.push(_index__WEBPACK_IMPORTED_MODULE_0__.PdfViewerBase.sessionStorageManager.getKey(i));\n                    }\n                }\n            }\n            if (formFieldsList) {\n                for (var i = 0; i < formFieldsList.length; i++) {\n                    _index__WEBPACK_IMPORTED_MODULE_0__.PdfViewerBase.sessionStorageManager.removeItem(formFieldsList[parseInt(i.toString(), 10)]);\n                }\n            }\n        }\n    };\n    FormFields.prototype.clearFormFields = function (formField) {\n        var data = this.pdfViewerBase.getItemFromSessionStorage('_formfields');\n        if (data) {\n            var formFieldsData = void 0;\n            if (formField) {\n                formFieldsData = [formField];\n            }\n            else {\n                formFieldsData = JSON.parse(data);\n            }\n            var isFirstRadio = true;\n            for (var m = 0; m < formFieldsData.length; m++) {\n                var currentData = formFieldsData[parseInt(m.toString(), 10)];\n                if (formField) {\n                    currentData.uniqueID = formField.id;\n                    currentData.Name = formField.type;\n                }\n                this.currentTarget = document.getElementById(currentData.uniqueID);\n                if (currentData.Name === 'Textbox') {\n                    this.currentTarget.value = '';\n                }\n                else if (currentData.Name === 'RadioButton') {\n                    if (isFirstRadio) {\n                        this.currentTarget.checked = true;\n                        this.updateDataInSession(this.currentTarget);\n                        isFirstRadio = false;\n                    }\n                }\n                else if (currentData.Name === 'DropDown') {\n                    this.currentTarget.value = currentData.TextList[0];\n                }\n                else if (currentData.Name === 'CheckBox') {\n                    this.currentTarget.checked = false;\n                }\n                else if (currentData.Name === 'SignatureField' || currentData.Name === 'InitialField') {\n                    var annotation = this.pdfViewer.nameTable[currentData.uniqueID];\n                    if (annotation.propName !== 'annotations') {\n                        annotation = this.pdfViewer.nameTable[currentData.uniqueID + '_content'];\n                    }\n                    if (annotation) {\n                        if (this.currentTarget && this.currentTarget.className === 'e-pdfviewer-signatureformfields-signature') {\n                            this.currentTarget.className = 'e-pdfviewer-signatureformfields';\n                            this.currentTarget.style.pointerEvents = '';\n                            this.currentTarget.parentElement.style.pointerEvents = '';\n                            this.updateDataInSession(this.currentTarget, '');\n                            if (formField) {\n                                formField.value = '';\n                                formField.signatureType = [formField.signatureType];\n                                formField.signatureType[0] = '';\n                            }\n                        }\n                        this.pdfViewer.annotation.deleteAnnotationById(annotation.id);\n                        this.currentTarget = null;\n                    }\n                }\n                if (currentData.Name !== 'SignatureField' && currentData.Name !== 'ink' && currentData.Name !== 'RadioButton') {\n                    this.updateDataInSession(this.currentTarget);\n                }\n            }\n        }\n    };\n    /**\n     * @param {any} number - It describes about the number\n     * @private\n     * @returns {number} - number\n     */\n    FormFields.prototype.ConvertPointToPixel = function (number) {\n        return (number * (96 / 72));\n    };\n    /**\n     * @private\n     * @returns {void}\n     */\n    FormFields.prototype.destroy = function () {\n        this.currentTarget = null;\n        this.readOnlyCollection = [];\n        if (this.pdfViewerBase && this.pdfViewerBase.signatureModule) {\n            this.pdfViewerBase.signatureModule.destroy();\n        }\n    };\n    /**\n     * @private\n     * @returns {string} - string\n     */\n    FormFields.prototype.getModuleName = function () {\n        return 'FormFields';\n    };\n    /**\n     * @private\n     * @param {any} text - It describes about the text\n     * @param {any} font - It describes about the font\n     * @param {any} fontFamily - It describes about the font family\n     * @returns {number} - number\n     */\n    FormFields.prototype.getTextWidth = function (text, font, fontFamily) {\n        var canvas = document.createElement('canvas');\n        var context = canvas.getContext('2d');\n        var fontName;\n        if (font) {\n            fontName = font + 'px' + ' ' + fontFamily;\n        }\n        context.font = fontName || getComputedStyle(document.body).font;\n        var textWidth = context.measureText(text).width;\n        this.pdfViewerBase.releaseCanvas(canvas);\n        return textWidth;\n    };\n    /**\n     * @private\n     * @param {number} fontSize - Font size.\n     * @returns {number} - Returns the font size.\n     */\n    FormFields.prototype.getFontSize = function (fontSize) {\n        return fontSize;\n    };\n    return FormFields;\n}());\n\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-pdfviewer/src/pdfviewer/form-fields/form-fields.js?");

/***/ })

}]);