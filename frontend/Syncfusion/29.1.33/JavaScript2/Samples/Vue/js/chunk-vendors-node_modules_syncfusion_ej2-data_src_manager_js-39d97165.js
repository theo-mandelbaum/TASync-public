"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkej2_vue_samples"] = self["webpackChunkej2_vue_samples"] || []).push([["chunk-vendors-node_modules_syncfusion_ej2-data_src_manager_js-39d97165"],{

/***/ "./node_modules/@syncfusion/ej2-data/src/manager.js":
/*!**********************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-data/src/manager.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DataManager: () => (/* binding */ DataManager),\n/* harmony export */   Deferred: () => (/* binding */ Deferred)\n/* harmony export */ });\n/* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @syncfusion/ej2-base */ \"./node_modules/@syncfusion/ej2-base/index.js\");\n/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util */ \"./node_modules/@syncfusion/ej2-data/src/util.js\");\n/* harmony import */ var _query__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./query */ \"./node_modules/@syncfusion/ej2-data/src/query.js\");\n/* harmony import */ var _adaptors__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./adaptors */ \"./node_modules/@syncfusion/ej2-data/src/adaptors.js\");\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (undefined && undefined.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\n/* eslint-disable valid-jsdoc */\n/* eslint-disable security/detect-object-injection */\n\n\n\n\n\n/**\n * DataManager is used to manage and manipulate relational data.\n */\nvar DataManager = /** @class */ (function () {\n    /**\n     * Constructor for DataManager class\n     *\n     * @param {DataOptions|JSON[]} dataSource?\n     * @param {Query} query?\n     * @param {AdaptorOptions|string} adaptor?\n     * @param dataSource\n     * @param query\n     * @param adaptor\n     * @hidden\n     */\n    function DataManager(dataSource, query, adaptor) {\n        var _this = this;\n        /** @hidden */\n        this.dateParse = true;\n        /** @hidden */\n        this.timeZoneHandling = true;\n        this.persistQuery = {};\n        this.isInitialLoad = false;\n        this.requests = [];\n        this.isEnableCache = false;\n        this.isInitialLoad = true;\n        this.isEnableCache = false;\n        if (!dataSource && !this.dataSource) {\n            dataSource = [];\n        }\n        adaptor = adaptor || dataSource.adaptor;\n        if (dataSource && dataSource.timeZoneHandling === false) {\n            this.timeZoneHandling = dataSource.timeZoneHandling;\n        }\n        var data;\n        if (dataSource instanceof Array) {\n            data = {\n                json: dataSource,\n                offline: true\n            };\n        }\n        else if (typeof dataSource === 'object') {\n            if (!dataSource.json) {\n                dataSource.json = [];\n            }\n            if (!dataSource.enablePersistence) {\n                dataSource.enablePersistence = false;\n            }\n            if (!dataSource.id) {\n                dataSource.id = '';\n            }\n            if (!dataSource.ignoreOnPersist) {\n                dataSource.ignoreOnPersist = [];\n            }\n            data = {\n                url: dataSource.url,\n                insertUrl: dataSource.insertUrl,\n                removeUrl: dataSource.removeUrl,\n                updateUrl: dataSource.updateUrl,\n                crudUrl: dataSource.crudUrl,\n                batchUrl: dataSource.batchUrl,\n                json: dataSource.json,\n                headers: dataSource.headers,\n                accept: dataSource.accept,\n                data: dataSource.data,\n                enableCache: dataSource.enableCache,\n                timeTillExpiration: dataSource.timeTillExpiration,\n                cachingPageSize: dataSource.cachingPageSize,\n                enableCaching: dataSource.enableCaching,\n                requestType: dataSource.requestType,\n                key: dataSource.key,\n                crossDomain: dataSource.crossDomain,\n                jsonp: dataSource.jsonp,\n                dataType: dataSource.dataType,\n                offline: dataSource.offline !== undefined ? dataSource.offline\n                    : dataSource.adaptor instanceof _adaptors__WEBPACK_IMPORTED_MODULE_3__.RemoteSaveAdaptor || dataSource.adaptor instanceof _adaptors__WEBPACK_IMPORTED_MODULE_3__.CustomDataAdaptor ?\n                        false : dataSource.url ? false : true,\n                requiresFormat: dataSource.requiresFormat,\n                enablePersistence: dataSource.enablePersistence,\n                id: dataSource.id,\n                ignoreOnPersist: dataSource.ignoreOnPersist\n            };\n        }\n        else {\n            _util__WEBPACK_IMPORTED_MODULE_1__.DataUtil.throwError('DataManager: Invalid arguments');\n        }\n        if (data.requiresFormat === undefined && !_util__WEBPACK_IMPORTED_MODULE_1__.DataUtil.isCors()) {\n            data.requiresFormat = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(data.crossDomain) ? true : data.crossDomain;\n        }\n        if (data.dataType === undefined) {\n            data.dataType = 'json';\n        }\n        this.isEnableCache = data.enableCache;\n        this.dataSource = data;\n        this.defaultQuery = query;\n        if (this.dataSource.enablePersistence && this.dataSource.id) {\n            window.addEventListener('unload', this.setPersistData.bind(this));\n        }\n        if (data.url && data.offline && !data.json.length) {\n            this.isDataAvailable = false;\n            this.adaptor = adaptor || new _adaptors__WEBPACK_IMPORTED_MODULE_3__.ODataAdaptor();\n            this.dataSource.offline = false;\n            this.ready = this.executeQuery(query || new _query__WEBPACK_IMPORTED_MODULE_2__.Query());\n            this.ready.then(function (e) {\n                _this.dataSource.offline = true;\n                _this.isDataAvailable = true;\n                data.json = e.result;\n                _this.adaptor = new _adaptors__WEBPACK_IMPORTED_MODULE_3__.JsonAdaptor();\n            });\n        }\n        else {\n            this.adaptor = data.offline ? new _adaptors__WEBPACK_IMPORTED_MODULE_3__.JsonAdaptor() : new _adaptors__WEBPACK_IMPORTED_MODULE_3__.ODataAdaptor();\n        }\n        if (!data.jsonp && this.adaptor instanceof _adaptors__WEBPACK_IMPORTED_MODULE_3__.ODataAdaptor) {\n            data.jsonp = 'callback';\n        }\n        this.adaptor = adaptor || this.adaptor;\n        if (this.isEnableCache) {\n            this.guidId = _util__WEBPACK_IMPORTED_MODULE_1__.DataUtil.getGuid('cacheAdaptor');\n            var obj = { keys: [], results: [] };\n            window.localStorage.setItem(this.guidId, JSON.stringify(obj));\n        }\n        if (data.enableCaching) {\n            this.adaptor = new _adaptors__WEBPACK_IMPORTED_MODULE_3__.CacheAdaptor(this.adaptor, data.timeTillExpiration, data.cachingPageSize);\n        }\n        return this;\n    }\n    Object.defineProperty(DataManager.prototype, \"moduleName\", {\n        /** @hidden */\n        get: function () { return 'datamanager'; },\n        enumerable: true,\n        configurable: true\n    });\n    ;\n    /**\n     * Get the queries maintained in the persisted state.\n     * @param {string} id - The identifier of the persisted query to retrieve.\n     * @returns {object} The persisted data object.\n     */\n    DataManager.prototype.getPersistedData = function (id) {\n        var persistedData = localStorage.getItem(id || this.dataSource.id);\n        return JSON.parse(persistedData);\n    };\n    /**\n    * Set the queries to be maintained in the persisted state.\n    * @param {Event} e - The event parameter that triggers the setPersistData method.\n    * @param {string} id - The identifier of the persisted query to set.\n    * @param {object} persistData - The data to be persisted.\n    * @returns {void} .\n    */\n    DataManager.prototype.setPersistData = function (e, id, persistData) {\n        localStorage.setItem(id || this.dataSource.id, JSON.stringify(persistData || this.persistQuery));\n    };\n    DataManager.prototype.setPersistQuery = function (query) {\n        var _this = this;\n        var persistedQuery = this.getPersistedData();\n        if (this.isInitialLoad && persistedQuery && Object.keys(persistedQuery).length) {\n            this.persistQuery = persistedQuery;\n            this.persistQuery.queries = this.persistQuery.queries.filter(function (query) {\n                if (_this.dataSource.ignoreOnPersist && _this.dataSource.ignoreOnPersist.length) {\n                    if (query.fn && _this.dataSource.ignoreOnPersist.some(function (keyword) { return query.fn === keyword; })) {\n                        return false; // Exclude the matching query\n                    }\n                }\n                if (query.fn === 'onWhere') {\n                    var e = query.e;\n                    if (e && e.isComplex && e.predicates instanceof Array) {\n                        var allPredicates = e.predicates.map(function (predicateObj) {\n                            if (predicateObj.predicates && predicateObj.predicates instanceof Array) {\n                                // Process nested predicate array\n                                var nestedPredicates = predicateObj.predicates.map(function (nestedPredicate) {\n                                    var field = nestedPredicate.field, operator = nestedPredicate.operator, value = nestedPredicate.value, ignoreCase = nestedPredicate.ignoreCase, ignoreAccent = nestedPredicate.ignoreAccent, matchCase = nestedPredicate.matchCase;\n                                    return new _query__WEBPACK_IMPORTED_MODULE_2__.Predicate(field, operator, value, ignoreCase, ignoreAccent, matchCase);\n                                });\n                                return predicateObj.condition === 'and' ? _query__WEBPACK_IMPORTED_MODULE_2__.Predicate.and(nestedPredicates) : _query__WEBPACK_IMPORTED_MODULE_2__.Predicate.or(nestedPredicates);\n                            }\n                            else {\n                                // Process individual predicate\n                                var field = predicateObj.field, operator = predicateObj.operator, value = predicateObj.value, ignoreCase = predicateObj.ignoreCase, ignoreAccent = predicateObj.ignoreAccent, matchCase = predicateObj.matchCase;\n                                return new _query__WEBPACK_IMPORTED_MODULE_2__.Predicate(field, operator, value, ignoreCase, ignoreAccent, matchCase);\n                            }\n                        });\n                        query.e = new _query__WEBPACK_IMPORTED_MODULE_2__.Predicate(allPredicates[0], e.condition, allPredicates.slice(1));\n                    }\n                }\n                return true; // Keep all other queries\n            });\n            var newQuery = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)(new _query__WEBPACK_IMPORTED_MODULE_2__.Query(), this.persistQuery);\n            this.isInitialLoad = false;\n            return (newQuery);\n        }\n        else {\n            this.persistQuery = query;\n            this.isInitialLoad = false;\n            return query;\n        }\n    };\n    /**\n     * Overrides DataManager's default query with given query.\n     *\n     * @param  {Query} query - Defines the new default query.\n     */\n    DataManager.prototype.setDefaultQuery = function (query) {\n        this.defaultQuery = query;\n        return this;\n    };\n    /**\n     * Executes the given query with local data source.\n     *\n     * @param  {Query} query - Defines the query to retrieve data.\n     */\n    DataManager.prototype.executeLocal = function (query) {\n        if (!this.defaultQuery && !(query instanceof _query__WEBPACK_IMPORTED_MODULE_2__.Query)) {\n            _util__WEBPACK_IMPORTED_MODULE_1__.DataUtil.throwError('DataManager - executeLocal() : A query is required to execute');\n        }\n        if (!this.dataSource.json) {\n            _util__WEBPACK_IMPORTED_MODULE_1__.DataUtil.throwError('DataManager - executeLocal() : Json data is required to execute');\n        }\n        if (this.dataSource.enablePersistence && this.dataSource.id) {\n            query = this.setPersistQuery(query);\n        }\n        query = query || this.defaultQuery;\n        var result = this.adaptor.processQuery(this, query);\n        if (query.subQuery) {\n            var from = query.subQuery.fromTable;\n            var lookup = query.subQuery.lookups;\n            var res = query.isCountRequired ? result.result :\n                result;\n            if (lookup && lookup instanceof Array) {\n                _util__WEBPACK_IMPORTED_MODULE_1__.DataUtil.buildHierarchy(query.subQuery.fKey, from, res, lookup, query.subQuery.key);\n            }\n            for (var j = 0; j < res.length; j++) {\n                if (res[j][from] instanceof Array) {\n                    res[j] = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)({}, {}, res[j]);\n                    res[j][from] = this.adaptor.processResponse(query.subQuery.using(new DataManager(res[j][from].slice(0))).executeLocal(), this, query);\n                }\n            }\n        }\n        return this.adaptor.processResponse(result, this, query);\n    };\n    /**\n     * Executes the given query with either local or remote data source.\n     * It will be executed as asynchronously and returns Promise object which will be resolved or rejected after action completed.\n     *\n     * @param  {Query|Function} query - Defines the query to retrieve data.\n     * @param  {Function} done - Defines the callback function and triggers when the Promise is resolved.\n     * @param  {Function} fail - Defines the callback function and triggers when the Promise is rejected.\n     * @param  {Function} always - Defines the callback function and triggers when the Promise is resolved or rejected.\n     */\n    DataManager.prototype.executeQuery = function (query, done, fail, always) {\n        var _this = this;\n        var makeRequest = 'makeRequest';\n        if (this.dataSource.enablePersistence && this.dataSource.id) {\n            query = this.setPersistQuery(query);\n        }\n        if (typeof query === 'function') {\n            always = fail;\n            fail = done;\n            done = query;\n            query = null;\n        }\n        if (!query) {\n            query = this.defaultQuery;\n        }\n        if (!(query instanceof _query__WEBPACK_IMPORTED_MODULE_2__.Query)) {\n            _util__WEBPACK_IMPORTED_MODULE_1__.DataUtil.throwError('DataManager - executeQuery() : A query is required to execute');\n        }\n        var deffered = new Deferred();\n        var args = { query: query };\n        if (!this.dataSource.offline && (this.dataSource.url !== undefined && this.dataSource.url !== '')\n            || (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.adaptor[makeRequest])) || this.isCustomDataAdaptor(this.adaptor)) {\n            var result = this.isEnableCache ? this.processQuery(query) : this.adaptor.processQuery(this, query);\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.adaptor[makeRequest])) {\n                this.adaptor[makeRequest](result, deffered, args, query);\n            }\n            else if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(result.url) || this.isCustomDataAdaptor(this.adaptor)) {\n                this.requests = [];\n                this.makeRequest(result, deffered, args, query);\n            }\n            else {\n                args = DataManager.getDeferedArgs(query, result, args);\n                deffered.resolve(args);\n            }\n        }\n        else {\n            DataManager.nextTick(function () {\n                var res = _this.executeLocal(query);\n                args = DataManager.getDeferedArgs(query, res, args);\n                deffered.resolve(args);\n            });\n        }\n        if (done || fail) {\n            deffered.promise.then(done, fail);\n        }\n        if (always) {\n            deffered.promise.then(always, always);\n        }\n        return deffered.promise;\n    };\n    DataManager.prototype.getQueryRequest = function (query) {\n        var req = { sorts: [], groups: [], filters: [], searches: [], aggregates: [] };\n        req.sorts = _query__WEBPACK_IMPORTED_MODULE_2__.Query.filterQueries(query.queries, 'onSortBy');\n        req.groups = _query__WEBPACK_IMPORTED_MODULE_2__.Query.filterQueries(query.queries, 'onGroup');\n        req.filters = _query__WEBPACK_IMPORTED_MODULE_2__.Query.filterQueries(query.queries, 'onWhere');\n        req.searches = _query__WEBPACK_IMPORTED_MODULE_2__.Query.filterQueries(query.queries, 'onSearch');\n        req.aggregates = _query__WEBPACK_IMPORTED_MODULE_2__.Query.filterQueries(query.queries, 'onAggregates');\n        return req;\n    };\n    DataManager.prototype.generateKey = function (url, query) {\n        var queries = this.getQueryRequest(query);\n        var singles = _query__WEBPACK_IMPORTED_MODULE_2__.Query.filterQueryLists(query.queries, ['onSelect', 'onPage', 'onSkip', 'onTake', 'onRange']);\n        var key = url;\n        var page = 'onPage';\n        queries.sorts.forEach(function (obj) {\n            key += obj.e.direction + obj.e.fieldName;\n        });\n        queries.groups.forEach(function (obj) {\n            key += obj.e.fieldName;\n        });\n        queries.searches.forEach(function (obj) {\n            key += obj.e.searchKey;\n        });\n        for (var filter = 0; filter < queries.filters.length; filter++) {\n            var currentFilter = queries.filters[filter];\n            if (currentFilter.e.isComplex) {\n                var newQuery = query.clone();\n                newQuery.queries = [];\n                for (var i = 0; i < currentFilter.e.predicates.length; i++) {\n                    newQuery.queries.push({ fn: 'onWhere', e: currentFilter.e.predicates[i], filter: query.queries.filter });\n                }\n                key += currentFilter.e.condition + this.generateKey(url, newQuery);\n            }\n            else {\n                key += currentFilter.e.field + currentFilter.e.operator + currentFilter.e.value;\n            }\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.previousCacheQuery) && this.previousCacheQuery !== key) {\n            var obj = { keys: [], results: [] };\n            window.localStorage.setItem(this.guidId, JSON.stringify(obj));\n        }\n        this.previousCacheQuery = key;\n        if (page in singles) {\n            key += singles[page].pageIndex;\n        }\n        return key;\n    };\n    DataManager.prototype.processQuery = function (query) {\n        var key = this.generateKey(this.dataSource.url, query);\n        var cachedItems = JSON.parse(window.localStorage.getItem(this.guidId));\n        var data = cachedItems ? cachedItems.results[cachedItems.keys.indexOf(key)] : null;\n        if (data != null) {\n            return _util__WEBPACK_IMPORTED_MODULE_1__.DataUtil.parse.parseJson(data);\n        }\n        return this.adaptor.processQuery(this, query);\n    };\n    DataManager.getDeferedArgs = function (query, result, args) {\n        if (query.isCountRequired) {\n            args.result = result.result;\n            args.count = result.count;\n            args.aggregates = result.aggregates;\n        }\n        else {\n            args.result = result;\n        }\n        return args;\n    };\n    DataManager.nextTick = function (fn) {\n        /* eslint-disable @typescript-eslint/no-explicit-any */\n        // tslint:disable-next-line:no-any\n        (window.setImmediate || window.setTimeout)(fn, 0);\n        /* eslint-enable @typescript-eslint/no-explicit-any */\n    };\n    DataManager.prototype.extendRequest = function (url, fnSuccess, fnFail) {\n        return (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)({}, {\n            type: 'GET',\n            dataType: this.dataSource.dataType,\n            crossDomain: this.dataSource.crossDomain,\n            jsonp: this.dataSource.jsonp,\n            cache: true,\n            processData: false,\n            onSuccess: fnSuccess,\n            onFailure: fnFail\n        }, url);\n    };\n    // tslint:disable-next-line:max-func-body-length\n    DataManager.prototype.makeRequest = function (url, deffered, args, query) {\n        var _this = this;\n        var isSelector = !!query.subQuerySelector;\n        var fnFail = function (e) {\n            args.error = e;\n            deffered.reject(args);\n        };\n        var process = function (data, count, xhr, request, actual, aggregates, virtualSelectRecords) {\n            args.xhr = xhr;\n            args.count = count ? parseInt(count.toString(), 10) : 0;\n            args.result = data;\n            args.request = request;\n            args.aggregates = aggregates;\n            args.actual = actual;\n            args.virtualSelectRecords = virtualSelectRecords;\n            deffered.resolve(args);\n        };\n        var fnQueryChild = function (data, selector) {\n            var subDeffer = new Deferred();\n            var childArgs = { parent: args };\n            query.subQuery.isChild = true;\n            var subUrl = _this.adaptor.processQuery(_this, query.subQuery, data ? _this.adaptor.processResponse(data) : selector);\n            var childReq = _this.makeRequest(subUrl, subDeffer, childArgs, query.subQuery);\n            if (!isSelector) {\n                subDeffer.then(function (subData) {\n                    if (data) {\n                        _util__WEBPACK_IMPORTED_MODULE_1__.DataUtil.buildHierarchy(query.subQuery.fKey, query.subQuery.fromTable, data, subData, query.subQuery.key);\n                        process(data, subData.count, subData.xhr);\n                    }\n                }, fnFail);\n            }\n            return childReq;\n        };\n        var fnSuccess = function (data, request) {\n            if (_this.isGraphQLAdaptor(_this.adaptor)) {\n                // tslint:disable-next-line:no-string-literal\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(data['errors'])) {\n                    // tslint:disable-next-line:no-string-literal\n                    return fnFail(data['errors'], request);\n                }\n            }\n            if (_this.isCustomDataAdaptor(_this.adaptor)) {\n                request = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)({}, _this.fetchReqOption, request);\n            }\n            if (request.contentType.indexOf('xml') === -1 && _this.dateParse && !_this.isEnableCache) {\n                data = _util__WEBPACK_IMPORTED_MODULE_1__.DataUtil.parse.parseJson(data);\n            }\n            var result;\n            var promise = _this.afterReponseRequest(data);\n            promise.then(function (data) {\n                result = _this.adaptor.processResponse(data, _this, query, request.fetchRequest, request);\n                if (_this.isEnableCache) {\n                    /* eslint-enable prefer-spread */\n                    var key = query ? _this.generateKey(_this.dataSource.url, query) : _this.dataSource.url;\n                    var obj = {};\n                    obj = JSON.parse(window.localStorage.getItem(_this.guidId));\n                    var index = obj.keys.indexOf(key);\n                    if (index !== -1) {\n                        obj.results.splice(index, 1);\n                        obj.keys.splice(index, 1);\n                    }\n                    obj.results[obj.keys.push(key) - 1] = { keys: key, result: result.result, timeStamp: new Date(), count: result.count };\n                    window.localStorage.setItem(_this.guidId, JSON.stringify(obj));\n                }\n                if (request.contentType.indexOf('xml') === -1 && _this.dateParse && _this.isEnableCache) {\n                    result = _util__WEBPACK_IMPORTED_MODULE_1__.DataUtil.parse.parseJson(result);\n                }\n                var count = 0;\n                var aggregates = null;\n                var virtualSelectRecords = 'virtualSelectRecords';\n                var virtualRecords = data[virtualSelectRecords];\n                if (query.isCountRequired) {\n                    count = result.count;\n                    aggregates = result.aggregates;\n                    result = result.result;\n                }\n                if (!query.subQuery) {\n                    process(result, count, request.fetchRequest, request.type, data, aggregates, virtualRecords);\n                    return;\n                }\n                if (!isSelector) {\n                    fnQueryChild(result, request);\n                }\n                ;\n            }).catch(function (e) { return _this.dataManagerFailure(e, deffered, args); });\n        };\n        var req = this.extendRequest(url, fnSuccess, fnFail);\n        if (!this.isCustomDataAdaptor(this.adaptor)) {\n            var promise = this.useMiddleware(req);\n            var fetch_1;\n            promise.then(function (response) {\n                fetch_1 = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Fetch(req);\n                fetch_1.beforeSend = function () {\n                    _this.beforeSend(fetch_1.fetchRequest, fetch_1, response);\n                };\n                req = fetch_1.send();\n                req.catch(function (e) { return true; });\n                _this.requests.push(fetch_1);\n            }).catch(function (e) { return _this.dataManagerFailure(e, deffered, args); });\n        }\n        else {\n            this.fetchReqOption = req;\n            var request = req;\n            this.adaptor.options.getData({\n                data: request.data,\n                onSuccess: request.onSuccess, onFailure: request.onFailure\n            });\n        }\n        if (isSelector) {\n            var promise = void 0;\n            var res = query.subQuerySelector.call(this, { query: query.subQuery, parent: query });\n            if (res && res.length) {\n                promise = Promise.all([req, fnQueryChild(null, res)]);\n                promise.then(function () {\n                    var args = [];\n                    for (var _i = 0; _i < arguments.length; _i++) {\n                        args[_i] = arguments[_i];\n                    }\n                    var result = args[0];\n                    var pResult = _this.adaptor.processResponse(result[0], _this, query, _this.requests[0].fetchRequest, _this.requests[0]);\n                    var count = 0;\n                    if (query.isCountRequired) {\n                        count = pResult.count;\n                        pResult = pResult.result;\n                    }\n                    var cResult = _this.adaptor.processResponse(result[1], _this, query.subQuery, _this.requests[1].fetchRequest, _this.requests[1]);\n                    count = 0;\n                    if (query.subQuery.isCountRequired) {\n                        count = cResult.count;\n                        cResult = cResult.result;\n                    }\n                    _util__WEBPACK_IMPORTED_MODULE_1__.DataUtil.buildHierarchy(query.subQuery.fKey, query.subQuery.fromTable, pResult, cResult, query.subQuery.key);\n                    isSelector = false;\n                    process(pResult, count, _this.requests[0].fetchRequest);\n                });\n            }\n            else {\n                isSelector = false;\n            }\n        }\n        return req;\n    };\n    /**\n     * @param {Error} e - specifies the string\n     * @param {Deferred} deffered - specifies the deffered\n     * @param {RequestOptions} args - specifies the RequestOptions\n     * @hidden\n     */\n    DataManager.prototype.dataManagerFailure = function (e, deffered, args) {\n        args.error = e;\n        deffered.reject(args);\n    };\n    DataManager.prototype.afterReponseRequest = function (data) {\n        return __awaiter(this, void 0, void 0, function () {\n            var reponse, deffered;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.applyPostRequestMiddlewares(data)];\n                    case 1:\n                        reponse = _a.sent();\n                        deffered = new Deferred();\n                        deffered.resolve(reponse);\n                        return [2 /*return*/, deffered.promise];\n                }\n            });\n        });\n    };\n    /**\n     * Processes the middleware stack after receiving the response.\n     * @param {Response} response - The response object.\n     * @returns {Response} - The potentially modified response.\n     */\n    DataManager.prototype.applyPostRequestMiddlewares = function (response) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                return [2 /*return*/, response];\n            });\n        });\n    };\n    /**\n     * Registers a new middleware in the DataManager.\n     * @param {Middleware} middleware - The middleware instance to register.\n     * @returns {void}\n     */\n    DataManager.prototype.useMiddleware = function (request) {\n        return __awaiter(this, void 0, void 0, function () {\n            var reponse, deffered;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.applyPreRequestMiddlewares(request)];\n                    case 1:\n                        reponse = _a.sent();\n                        deffered = new Deferred();\n                        deffered.resolve(reponse);\n                        return [2 /*return*/, deffered.promise];\n                }\n            });\n        });\n    };\n    /**\n     * Processes the middleware stack before sending the request.\n     * @param {Request} request - The request object.\n     * @returns {Request} - The potentially modified request.\n     */\n    DataManager.prototype.applyPreRequestMiddlewares = function (request) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                return [2 /*return*/, request];\n            });\n        });\n    };\n    DataManager.prototype.beforeSend = function (request, settings, response) {\n        this.adaptor.beforeSend(this, request, settings);\n        var headers = [];\n        if (this.dataSource.headers) {\n            headers = headers.concat(this.dataSource.headers);\n        }\n        var props;\n        if (response && response.headers) {\n            headers = headers.concat(response.headers);\n        }\n        for (var i = 0; headers && i < headers.length; i++) {\n            props = [];\n            var keys = Object.keys(headers[i]);\n            for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {\n                var prop = keys_1[_i];\n                props.push(prop);\n                request.headers.set(prop, headers[i][prop]);\n            }\n        }\n    };\n    /**\n     * Save bulk changes to the given table name.\n     * User can add a new record, edit an existing record, and delete a record at the same time.\n     * If the datasource from remote, then updated in a single post.\n     *\n     * @param {Object} changes - Defines the CrudOptions.\n     * @param {string} key - Defines the column field.\n     * @param {string|Query} tableName - Defines the table name.\n     * @param {Query} query - Sets default query for the DataManager.\n     * @param original\n     */\n    DataManager.prototype.saveChanges = function (changes, key, tableName, query, original) {\n        var _this = this;\n        if (tableName instanceof _query__WEBPACK_IMPORTED_MODULE_2__.Query) {\n            query = tableName;\n            tableName = null;\n        }\n        var args = {\n            url: tableName,\n            key: key || this.dataSource.key\n        };\n        var req = this.adaptor.batchRequest(this, changes, args, query || new _query__WEBPACK_IMPORTED_MODULE_2__.Query(), original);\n        var dofetchRequest = 'dofetchRequest';\n        if (this.dataSource.offline) {\n            return req;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.adaptor[dofetchRequest])) {\n            return this.adaptor[dofetchRequest](req);\n        }\n        else if (!this.isCustomDataAdaptor(this.adaptor)) {\n            var deff_1 = new Deferred();\n            var fetch_2 = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Fetch(req);\n            fetch_2.beforeSend = function () {\n                _this.beforeSend(fetch_2.fetchRequest, fetch_2);\n            };\n            fetch_2.onSuccess = function (data, request) {\n                if (_this.isGraphQLAdaptor(_this.adaptor)) {\n                    // tslint:disable-next-line:no-string-literal\n                    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(data['errors'])) {\n                        // tslint:disable-next-line:no-string-literal\n                        fetch_2.onFailure(JSON.stringify(data['errors']));\n                    }\n                }\n                deff_1.resolve(_this.adaptor.processResponse(data, _this, null, request.fetchRequest, request, changes, args));\n            };\n            fetch_2.onFailure = function (e) {\n                deff_1.reject([{ error: e }]);\n            };\n            fetch_2.send().catch(function (e) { return true; }); // to handle the failure requests.\n            return deff_1.promise;\n        }\n        else {\n            return this.dofetchRequest(req, this.adaptor.options.batchUpdate, changes);\n        }\n    };\n    /**\n     * Inserts new record in the given table.\n     *\n     * @param {Object} data - Defines the data to insert.\n     * @param {string|Query} tableName - Defines the table name.\n     * @param {Query} query - Sets default query for the DataManager.\n     * @param position\n     */\n    DataManager.prototype.insert = function (data, tableName, query, position) {\n        if (tableName instanceof _query__WEBPACK_IMPORTED_MODULE_2__.Query) {\n            query = tableName;\n            tableName = null;\n        }\n        var req = this.adaptor.insert(this, data, tableName, query, position);\n        var dofetchRequest = 'dofetchRequest';\n        if (this.dataSource.offline) {\n            return req;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.adaptor[dofetchRequest])) {\n            return this.adaptor[dofetchRequest](req);\n        }\n        else {\n            return this.dofetchRequest(req, this.adaptor.options.addRecord);\n        }\n    };\n    /**\n     * Removes data from the table with the given key.\n     *\n     * @param  {string} keyField - Defines the column field.\n     * @param  {Object} value - Defines the value to find the data in the specified column.\n     * @param  {string|Query} tableName - Defines the table name\n     * @param  {Query} query - Sets default query for the DataManager.\n     */\n    DataManager.prototype.remove = function (keyField, value, tableName, query) {\n        if (typeof value === 'object') {\n            value = _util__WEBPACK_IMPORTED_MODULE_1__.DataUtil.getObject(keyField, value);\n        }\n        if (tableName instanceof _query__WEBPACK_IMPORTED_MODULE_2__.Query) {\n            query = tableName;\n            tableName = null;\n        }\n        var res = this.adaptor.remove(this, keyField, value, tableName, query);\n        var dofetchRequest = 'dofetchRequest';\n        if (this.dataSource.offline) {\n            return res;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.adaptor[dofetchRequest])) {\n            return this.adaptor[dofetchRequest](res);\n        }\n        else {\n            var remove = this.adaptor.options.deleteRecord;\n            return this.dofetchRequest(res, remove);\n        }\n    };\n    /**\n     * Updates existing record in the given table.\n     *\n     * @param {string} keyField - Defines the column field.\n     * @param {Object} value - Defines the value to find the data in the specified column.\n     * @param {string|Query} tableName - Defines the table name\n     * @param {Query} query - Sets default query for the DataManager.\n     * @param original\n     */\n    DataManager.prototype.update = function (keyField, value, tableName, query, original) {\n        if (tableName instanceof _query__WEBPACK_IMPORTED_MODULE_2__.Query) {\n            query = tableName;\n            tableName = null;\n        }\n        if (this.isEnableCache) {\n            this.cacheQuery = this.generateKey(this.dataSource.url, query);\n        }\n        var res = this.adaptor.update(this, keyField, value, tableName, query, original);\n        var dofetchRequest = 'dofetchRequest';\n        if (this.dataSource.offline) {\n            return res;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.adaptor[dofetchRequest])) {\n            return this.adaptor[dofetchRequest](res);\n        }\n        else {\n            var update = this.adaptor.options.updateRecord;\n            return this.dofetchRequest(res, update);\n        }\n    };\n    DataManager.prototype.isCustomDataAdaptor = function (dataSource) {\n        return this.adaptor.getModuleName &&\n            this.adaptor.getModuleName() === 'CustomDataAdaptor';\n    };\n    DataManager.prototype.isGraphQLAdaptor = function (dataSource) {\n        return this.adaptor.getModuleName &&\n            this.adaptor.getModuleName() === 'GraphQLAdaptor';\n    };\n    DataManager.prototype.successFunc = function (record, request, changes) {\n        if (this.isGraphQLAdaptor(this.adaptor)) {\n            var data = typeof record === 'object' ? record : JSON.parse(record);\n            // tslint:disable-next-line:no-string-literal\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(data['errors'])) {\n                // tslint:disable-next-line:no-string-literal\n                this.failureFunc(JSON.stringify(data['errors']));\n            }\n        }\n        if (this.isCustomDataAdaptor(this.adaptor)) {\n            request = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)({}, this.fetchReqOption, request);\n        }\n        try {\n            _util__WEBPACK_IMPORTED_MODULE_1__.DataUtil.parse.parseJson(record);\n        }\n        catch (e) {\n            record = [];\n        }\n        if (this.isEnableCache) {\n            var requests = JSON.parse(request.data);\n            if (requests.action === 'insert' || requests.action === 'remove') {\n                var obj = { keys: [], results: [] };\n                window.localStorage.setItem(this.guidId, JSON.stringify(obj));\n            }\n            else if (requests.action === 'update') {\n                var cachedItems = JSON.parse(window.localStorage.getItem(this.guidId));\n                var data = cachedItems ? cachedItems.results[cachedItems.keys.indexOf(this.cacheQuery)] : null;\n                if (data && data.result) {\n                    var cacheData = data.result;\n                    for (var i = 0; i < cacheData.length; i++) {\n                        if (cacheData[i][requests.keyColumn] === requests.key) {\n                            cacheData[i] = requests.value;\n                            window.localStorage.setItem(this.guidId, JSON.stringify(cachedItems));\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n        record = this.adaptor.processResponse(_util__WEBPACK_IMPORTED_MODULE_1__.DataUtil.parse.parseJson(record), this, null, request.fetchRequest, request, changes);\n        this.fetchDeffered.resolve(record);\n    };\n    DataManager.prototype.failureFunc = function (e) {\n        if (this.isEnableCache) {\n            this.cacheQuery = '';\n        }\n        this.fetchDeffered.reject([{ error: e }]);\n    };\n    DataManager.prototype.dofetchRequest = function (res, fetchFunc, changes) {\n        var _this = this;\n        res = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)({}, {\n            type: 'POST',\n            contentType: 'application/json; charset=utf-8',\n            processData: false\n        }, res);\n        this.fetchDeffered = new Deferred();\n        if (!this.isCustomDataAdaptor(this.adaptor)) {\n            var fetch_3 = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Fetch(res);\n            fetch_3.beforeSend = function () {\n                _this.beforeSend(fetch_3.fetchRequest, fetch_3);\n            };\n            fetch_3.onSuccess = this.successFunc.bind(this);\n            fetch_3.onFailure = this.failureFunc.bind(this);\n            fetch_3.send().catch(function (e) { return true; }); // to handle the failure requests.\n        }\n        else {\n            this.fetchReqOption = res;\n            fetchFunc.call(this, {\n                data: res.data, onSuccess: this.successFunc.bind(this),\n                onFailure: this.failureFunc.bind(this),\n                changes: changes\n            });\n        }\n        return this.fetchDeffered.promise;\n    };\n    DataManager.prototype.clearPersistence = function () {\n        window.removeEventListener('unload', this.setPersistData.bind(this));\n        this.dataSource.enablePersistence = false;\n        this.persistQuery = {};\n        window.localStorage.setItem(this.dataSource.id, '[]');\n    };\n    return DataManager;\n}());\n\n/**\n * Deferred is used to handle asynchronous operation.\n */\nvar Deferred = /** @class */ (function () {\n    function Deferred() {\n        var _this = this;\n        /**\n         * Promise is an object that represents a value that may not be available yet, but will be resolved at some point in the future.\n         */\n        this.promise = new Promise(function (resolve, reject) {\n            _this.resolve = resolve;\n            _this.reject = reject;\n        });\n        /**\n         * Defines the callback function triggers when the Deferred object is resolved.\n         */\n        this.then = this.promise.then.bind(this.promise);\n        /**\n         * Defines the callback function triggers when the Deferred object is rejected.\n         */\n        this.catch = this.promise.catch.bind(this.promise);\n    }\n    return Deferred;\n}());\n\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-data/src/manager.js?");

/***/ })

}]);