"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkej2_vue_samples"] = self["webpackChunkej2_vue_samples"] || []).push([["chunk-vendors-node_modules_syncfusion_ej2-pivotview_src_common_actions_pivot-button_js-eaeb6233"],{

/***/ "./node_modules/@syncfusion/ej2-pivotview/src/common/actions/pivot-button.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-pivotview/src/common/actions/pivot-button.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PivotButton: () => (/* binding */ PivotButton)\n/* harmony export */ });\n/* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @syncfusion/ej2-base */ \"./node_modules/@syncfusion/ej2-base/index.js\");\n/* harmony import */ var _pivotfieldlist_base_field_list__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../pivotfieldlist/base/field-list */ \"./node_modules/@syncfusion/ej2-pivotview/src/pivotfieldlist/base/field-list.js\");\n/* harmony import */ var _common_base_css_constant__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../common/base/css-constant */ \"./node_modules/@syncfusion/ej2-pivotview/src/common/base/css-constant.js\");\n/* harmony import */ var _common_base_constant__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../common/base/constant */ \"./node_modules/@syncfusion/ej2-pivotview/src/common/base/constant.js\");\n/* harmony import */ var _syncfusion_ej2_buttons__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @syncfusion/ej2-buttons */ \"./node_modules/@syncfusion/ej2-buttons/index.js\");\n/* harmony import */ var _syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @syncfusion/ej2-popups */ \"./node_modules/@syncfusion/ej2-popups/index.js\");\n/* harmony import */ var _popups_aggregate_menu__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../popups/aggregate-menu */ \"./node_modules/@syncfusion/ej2-pivotview/src/common/popups/aggregate-menu.js\");\n/* harmony import */ var _pivotfieldlist_renderer_axis_field_renderer__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../pivotfieldlist/renderer/axis-field-renderer */ \"./node_modules/@syncfusion/ej2-pivotview/src/pivotfieldlist/renderer/axis-field-renderer.js\");\n/* harmony import */ var _syncfusion_ej2_dropdowns__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @syncfusion/ej2-dropdowns */ \"./node_modules/@syncfusion/ej2-dropdowns/index.js\");\n/* harmony import */ var _base_util__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../base/util */ \"./node_modules/@syncfusion/ej2-pivotview/src/base/util.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * Module to render Pivot button\n */\n/** @hidden */\nvar PivotButton = /** @class */ (function () {\n    /**\n     * Constructor for render module.\n     *\n     * @param {PivotView | PivotFieldList} parent - Component instance.\n     */\n    function PivotButton(parent) {\n        this.parent = parent;\n        this.menuOption = new _popups_aggregate_menu__WEBPACK_IMPORTED_MODULE_6__.AggregateMenu(this.parent);\n        this.parent.pivotButtonModule = this;\n        this.addEventListener();\n        if (this.parent instanceof _pivotfieldlist_base_field_list__WEBPACK_IMPORTED_MODULE_1__.PivotFieldList) {\n            this.axisField = new _pivotfieldlist_renderer_axis_field_renderer__WEBPACK_IMPORTED_MODULE_7__.AxisFieldRenderer(this.parent);\n        }\n        this.isDestroyed = false;\n    }\n    PivotButton.prototype.renderPivotButton = function (args) {\n        var _this = this;\n        var _a;\n        this.parentElement = this.parent.getModuleName() === 'pivotview' ? this.parent.element :\n            document.getElementById(this.parent.element.id + '_Container');\n        var currentAxisElements = Array.prototype.slice.call(this.parentElement.querySelectorAll('.e-group-' + args.axis));\n        var axisElement;\n        if (args.axis === 'rows' && this.parent.showGroupingBar && this.parent.groupingBarModule\n            && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.parentElement.querySelector('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_2__.GROUP_PIVOT_ROW))) {\n            currentAxisElements.push(this.parent.groupingBarModule.rowPanel);\n            axisElement = this.parent.groupingBarModule.rowPanel;\n        }\n        var field = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)([], args.field, null, true);\n        var axis = args.axis;\n        var valuePos = -1;\n        var showValuesButton = (this.parent.dataType === 'pivot' ? (this.parent.getModuleName() === 'pivotfieldlist' &&\n            this.parent.pivotGridModule) ?\n            this.parent.pivotGridModule.showValuesButton : this.parent.showValuesButton : false);\n        if (((this.parent.dataSourceSettings.valueAxis === 'row' && args.axis === 'rows') ||\n            (this.parent.dataSourceSettings.valueAxis === 'column' && args.axis === 'columns')) && showValuesButton && this.parent.dataSourceSettings.values.length > 1) {\n            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(_base_util__WEBPACK_IMPORTED_MODULE_9__.PivotUtil.getFieldByName('[Measures]', field))) {\n                var measureField = _base_util__WEBPACK_IMPORTED_MODULE_9__.PivotUtil.getFieldByName('[Measures]', this.parent.dataSourceSettings.fieldMapping);\n                var valueField = {\n                    name: '[Measures]', caption: this.parent.localeObj.getConstant('values'),\n                    axis: args.axis,\n                    showRemoveIcon: (measureField && 'showRemoveIcon' in measureField) ? measureField.showRemoveIcon : true,\n                    allowDragAndDrop: (measureField && 'allowDragAndDrop' in measureField) ? measureField.allowDragAndDrop : true\n                };\n                if ((this.parent.dataSourceSettings.valueIndex === -1 || this.parent.dataSourceSettings.valueIndex > field.length)) {\n                    valuePos = field.length;\n                    field.push(valueField);\n                    this.parent.setProperties({ dataSourceSettings: { valueIndex: -1 } }, true);\n                }\n                else {\n                    valuePos = this.parent.dataSourceSettings.valueIndex;\n                    field.splice(valuePos, 0, valueField);\n                }\n            }\n        }\n        if (this.parent.getModuleName() === 'pivotfieldlist') {\n            this.parentElement = document.getElementById(this.parent.element.id + '_Container');\n            if (this.parentElement.querySelector('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_2__.FIELD_LIST_CLASS + '-' + axis)) {\n                var axisPrompt = this.parentElement.querySelector('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_2__.FIELD_LIST_CLASS + '-' + axis)\n                    .querySelector('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_2__.AXIS_PROMPT_CLASS);\n                if (field.length === 0) {\n                    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([axisPrompt], _common_base_css_constant__WEBPACK_IMPORTED_MODULE_2__.ICON_DISABLE);\n                }\n                else {\n                    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([axisPrompt], _common_base_css_constant__WEBPACK_IMPORTED_MODULE_2__.ICON_DISABLE);\n                }\n                axisElement =\n                    this.parentElement.querySelector('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_2__.FIELD_LIST_CLASS + '-' + axis).querySelector('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_2__.AXIS_CONTENT_CLASS);\n            }\n            else {\n                return;\n            }\n        }\n        else {\n            this.parentElement = this.parent.element;\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.parentElement.querySelector('.e-group-' + axis))) {\n                axisElement = this.parentElement.querySelector('.e-group-' + axis);\n            }\n        }\n        if (axisElement) {\n            if (this.parent.getModuleName() === 'pivotview' && field.length === 0) {\n                for (var i = 0; i < currentAxisElements.length; i++) {\n                    var element = currentAxisElements[i];\n                    if (!element.classList.contains(_common_base_css_constant__WEBPACK_IMPORTED_MODULE_2__.GROUP_CHART_VALUE) && !element.classList.contains(_common_base_css_constant__WEBPACK_IMPORTED_MODULE_2__.GROUP_CHART_COLUMN)) {\n                        var axisPrompt = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('span', {\n                            className: _common_base_css_constant__WEBPACK_IMPORTED_MODULE_2__.AXIS_PROMPT_CLASS\n                        });\n                        axisPrompt.innerText = (this.parent.groupingBarSettings.allowDragAndDrop ? axis === 'rows' ? this.parent.localeObj.getConstant('rowAxisPrompt') :\n                            axis === 'columns' ? this.parent.localeObj.getConstant('columnAxisPrompt') :\n                                axis === 'values' ? this.parent.localeObj.getConstant('valueAxisPrompt') :\n                                    axis === 'filters' ? this.parent.localeObj.getConstant('filterAxisPrompt') :\n                                        this.parent.localeObj.getConstant('allFields') : '');\n                        element.appendChild(axisPrompt);\n                    }\n                }\n            }\n            else {\n                for (var i = 0, cnt = field.length; i < cnt; i++) {\n                    var elements = this.parent.getModuleName() === 'pivotfieldlist' ?\n                        [axisElement] : currentAxisElements;\n                    for (var j = 0; j < elements.length; j++) {\n                        var element = elements[j];\n                        if ((this.parent.olapEngineModule && (this.parent.olapEngineModule.fieldList[field[i].name] ||\n                            field[i].name === '[Measures]')) || this.parent.engineModule) {\n                            var isMeasureAvail = (this.parent.dataType === 'olap' && (field[i].name.toLowerCase() === '[measures]' || axis === 'values'));\n                            var isMeasureFieldsAvail = (this.parent.dataType === 'olap' && axis === 'values');\n                            if (!element.classList.contains(_common_base_css_constant__WEBPACK_IMPORTED_MODULE_2__.GROUP_CHART_VALUE) && !element.classList.contains(_common_base_css_constant__WEBPACK_IMPORTED_MODULE_2__.GROUP_CHART_COLUMN)) {\n                                var buttonWrapper = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div', {\n                                    className: _common_base_css_constant__WEBPACK_IMPORTED_MODULE_2__.PIVOT_BUTTON_WRAPPER_CLASS + (i === 0 && axis !== 'all-fields' ? ' e-first-btn' : '') + (this.parent.isTabular ? (' ' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_2__.TABULAR_PIVOT_BUTTON) : ''),\n                                    attrs: { 'data-tag': axis + ':' + field[i].name }\n                                });\n                                if (this.parent.isTabular) {\n                                    buttonWrapper.style.width = 'auto';\n                                }\n                                var buttonCaption = field[i].caption ? field[i].caption :\n                                    field[i].name;\n                                buttonCaption = this.parent.enableHtmlSanitizer ?\n                                    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.SanitizeHtmlHelper.sanitize(buttonCaption) : buttonCaption;\n                                var buttonElement = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div', {\n                                    id: this.parent.element.id + '_' + field[i].name, className: _common_base_css_constant__WEBPACK_IMPORTED_MODULE_2__.PIVOT_BUTTON_CLASS + ' ' + field[i].name.replace(/[^A-Z0-9]/ig, '') + (this.parent.isTabular ? (' ' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_2__.TABULAR_ROW_BUTTON) : ''),\n                                    attrs: {\n                                        'data-uid': field[i].name,\n                                        'tabindex': (this.parent.getModuleName() === 'pivotview' && this.parent.grid && axis === 'rows' && !element.classList.contains(_common_base_css_constant__WEBPACK_IMPORTED_MODULE_2__.GROUP_CHART_ROW)) ? '-1' : '0',\n                                        'isvalue': (i === valuePos || isMeasureAvail && !isMeasureFieldsAvail) ? 'true' : 'false',\n                                        'aria-disabled': 'false', 'aria-label': buttonCaption,\n                                        'data-type': (this.parent.dataType === 'olap' ? isMeasureFieldsAvail ? 'isMeasureFieldsAvail' : isMeasureAvail ? 'isMeasureAvail' : field[i].type : field[i].type),\n                                        'data-caption': buttonCaption,\n                                        'data-basefield': this.parent.enableHtmlSanitizer ? _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.SanitizeHtmlHelper.sanitize(field[i].baseField) : field[i].baseField,\n                                        'data-baseitem': this.parent.enableHtmlSanitizer ? _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.SanitizeHtmlHelper.sanitize(field[i].baseItem) : field[i].baseItem,\n                                        'role': 'button'\n                                    }\n                                });\n                                var dropIndicatorElement = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('span', {\n                                    attrs: { 'tabindex': '-1', 'aria-disabled': 'false' },\n                                    className: _common_base_css_constant__WEBPACK_IMPORTED_MODULE_2__.DROP_INDICATOR_CLASS\n                                });\n                                var dropLastIndicatorElement = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('span', {\n                                    attrs: { 'tabindex': '-1', 'aria-disabled': 'false' },\n                                    className: _common_base_css_constant__WEBPACK_IMPORTED_MODULE_2__.DROP_INDICATOR_CLASS + '-last'\n                                });\n                                var dragWrapper = this.createButtonDragIcon(field[i], buttonElement);\n                                var contentElement = this.createButtonText(field, i, axis, valuePos);\n                                buttonElement.appendChild(contentElement);\n                                if (axis !== 'all-fields') {\n                                    if (!isMeasureAvail && !field[i].isNamedSet && !field[i].isCalculatedField) {\n                                        if (['filters', 'values'].indexOf(axis) === -1 && valuePos !== i &&\n                                            !(this.parent.dataType === 'olap' && ((this.parent.getModuleName() === 'pivotview' &&\n                                                this.parent.enableVirtualization) || (this.parent.getModuleName() === 'pivotfieldlist' &&\n                                                this.parent.pivotGridModule !== undefined &&\n                                                this.parent.pivotGridModule.enableVirtualization)))) {\n                                            this.createSortOption(buttonElement, field[i].name, field[i]);\n                                        }\n                                        if (axis !== 'values' && valuePos !== i) {\n                                            this.createFilterOption(buttonElement, field[i].name, axis, field[i]);\n                                        }\n                                        if (axis === 'values') {\n                                            this.getTypeStatus(field, i, buttonElement);\n                                        }\n                                    }\n                                    if ((field[i].isCalculatedField || field[i].type === 'CalculatedField')) {\n                                        var calcElement = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('span', {\n                                            attrs: { 'tabindex': '-1', 'aria-disabled': 'false', 'title': this.parent.localeObj.getConstant('editCalculatedField') },\n                                            className: _common_base_css_constant__WEBPACK_IMPORTED_MODULE_2__.ICON + ' ' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_2__.CALC_EDIT\n                                        });\n                                        if (this.parent.allowCalculatedField && this.parent.calculatedFieldModule &&\n                                            (field[i].showEditIcon || field[i].showEditIcon === undefined)) {\n                                            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([calcElement], _common_base_css_constant__WEBPACK_IMPORTED_MODULE_2__.ICON_DISABLE);\n                                        }\n                                        else {\n                                            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([calcElement], _common_base_css_constant__WEBPACK_IMPORTED_MODULE_2__.ICON_DISABLE);\n                                        }\n                                        buttonElement.appendChild(calcElement);\n                                    }\n                                    var removeElement = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('span', {\n                                        attrs: { 'tabindex': '-1', 'aria-disabled': 'false', 'title': this.parent.localeObj.getConstant('remove') },\n                                        className: _common_base_css_constant__WEBPACK_IMPORTED_MODULE_2__.ICON + ' ' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_2__.REMOVE_CLASS\n                                    });\n                                    if (this.parent.getModuleName() === 'pivotview') {\n                                        if ((this.parent.groupingBarSettings.showRemoveIcon &&\n                                            (field[i].showRemoveIcon || field[i].showRemoveIcon === undefined))) {\n                                            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([removeElement], _common_base_css_constant__WEBPACK_IMPORTED_MODULE_2__.ICON_DISABLE);\n                                        }\n                                        else {\n                                            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([removeElement], _common_base_css_constant__WEBPACK_IMPORTED_MODULE_2__.ICON_DISABLE);\n                                        }\n                                    }\n                                    else {\n                                        if (field[i].showRemoveIcon || field[i].showRemoveIcon === undefined) {\n                                            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([removeElement], _common_base_css_constant__WEBPACK_IMPORTED_MODULE_2__.ICON_DISABLE);\n                                        }\n                                        else {\n                                            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([removeElement], _common_base_css_constant__WEBPACK_IMPORTED_MODULE_2__.ICON_DISABLE);\n                                        }\n                                    }\n                                    buttonElement.appendChild(removeElement);\n                                    buttonWrapper.appendChild(dropIndicatorElement);\n                                    buttonWrapper.appendChild(buttonElement);\n                                    buttonWrapper.appendChild(dropLastIndicatorElement);\n                                }\n                                else {\n                                    buttonWrapper.appendChild(dropIndicatorElement);\n                                    buttonWrapper.appendChild(buttonElement);\n                                }\n                                element.appendChild(buttonWrapper);\n                                var pivotButton = new _syncfusion_ej2_buttons__WEBPACK_IMPORTED_MODULE_4__.Button({\n                                    enableRtl: this.parent.enableRtl, locale: this.parent.locale,\n                                    enableHtmlSanitizer: this.parent.enableHtmlSanitizer, cssClass: this.parent.cssClass\n                                });\n                                pivotButton.isStringTemplate = true;\n                                pivotButton.appendTo(buttonElement);\n                                this.unWireEvent(buttonWrapper, i === valuePos && axis !== 'all-fields' ? 'values' : axis, isMeasureAvail);\n                                this.wireEvent(buttonWrapper, i === valuePos && axis !== 'all-fields' ? 'values' : axis, isMeasureAvail);\n                                if ((this.parent.getModuleName() === 'pivotview' && !this.parent.isAdaptive) ||\n                                    this.parent.getModuleName() === 'pivotfieldlist') {\n                                    this.createDraggable(field[i], this.parent.getModuleName() === 'pivotview' ? contentElement : dragWrapper);\n                                    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getInstance)(buttonElement.querySelector('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_2__.BUTTON_DRAGGABLE), _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Draggable).enableAutoScroll = false;\n                                }\n                            }\n                        }\n                    }\n                }\n                if (axis === 'values') {\n                    var valueFiedDropDownList = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_2__.GROUP_CHART_VALUE_DROPDOWN_DIV, this.parentElement) ?\n                        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getInstance)((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_2__.GROUP_CHART_VALUE_DROPDOWN_DIV, this.parentElement), _syncfusion_ej2_dropdowns__WEBPACK_IMPORTED_MODULE_8__.DropDownList) : null;\n                    var _loop_1 = function (i) {\n                        var element = currentAxisElements[i];\n                        if (element.classList.contains(_common_base_css_constant__WEBPACK_IMPORTED_MODULE_2__.GROUP_CHART_VALUE) && this_1.parent.pivotChartModule) {\n                            var valueData = field.map(function (item) {\n                                return { text: item.caption ? item.caption : item.name, value: item.name };\n                            });\n                            var parent_1 = this_1.parent;\n                            if (valueFiedDropDownList && element.querySelector('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_2__.GROUP_CHART_VALUE_DROPDOWN_DIV)) {\n                                valueFiedDropDownList.dataSource = valueData;\n                                valueFiedDropDownList.value = !parent_1.chartSettings.enableMultipleAxis ?\n                                    parent_1.pivotChartModule.currentMeasure : valueData[0].value;\n                            }\n                            else {\n                                var ddlDiv = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div', { className: _common_base_css_constant__WEBPACK_IMPORTED_MODULE_2__.GROUP_CHART_VALUE_DROPDOWN_DIV });\n                                element.appendChild(ddlDiv);\n                                valueFiedDropDownList = new _syncfusion_ej2_dropdowns__WEBPACK_IMPORTED_MODULE_8__.DropDownList({\n                                    dataSource: valueData,\n                                    enableRtl: this_1.parent.enableRtl,\n                                    locale: this_1.parent.locale,\n                                    value: !parent_1.chartSettings.enableMultipleAxis ?\n                                        parent_1.pivotChartModule.currentMeasure : valueData[0].value,\n                                    width: this_1.parent.isAdaptive ? 150 : 200,\n                                    fields: { value: 'value', text: 'text' },\n                                    cssClass: _common_base_css_constant__WEBPACK_IMPORTED_MODULE_2__.GROUP_CHART_VALUE_DROPDOWN + (this_1.parent.cssClass ? (' ' + this_1.parent.cssClass) : ''),\n                                    change: function (args) {\n                                        if (args.e && args.e !== null) {\n                                            parent_1.chartSettings.value = args.value;\n                                        }\n                                    }\n                                });\n                                valueFiedDropDownList.isStringTemplate = true;\n                                valueFiedDropDownList.appendTo(ddlDiv);\n                            }\n                        }\n                    };\n                    var this_1 = this;\n                    for (var i = 0; i < currentAxisElements.length; i++) {\n                        _loop_1(i);\n                    }\n                }\n                else if (axis === 'columns') {\n                    var availColindex = undefined;\n                    var columnFieldDropDownList = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_2__.GROUP_CHART_COLUMN_DROPDOWN_DIV, this.parentElement) ?\n                        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getInstance)((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_2__.GROUP_CHART_COLUMN_DROPDOWN_DIV, this.parentElement), _syncfusion_ej2_dropdowns__WEBPACK_IMPORTED_MODULE_8__.DropDownList) : null;\n                    for (var i = 0; i < currentAxisElements.length; i++) {\n                        var element = currentAxisElements[i];\n                        if (element.classList.contains(_common_base_css_constant__WEBPACK_IMPORTED_MODULE_2__.GROUP_CHART_COLUMN) && this.parent.pivotChartModule) {\n                            var currentMeasure = this.parent.pivotChartModule.currentMeasure;\n                            var delimiter = this.parent.chartSettings.columnDelimiter ? this.parent.chartSettings.columnDelimiter : '-';\n                            var columnHeader = (this.parent.chartSettings.columnHeader && this.parent.chartSettings.columnHeader !== '') ?\n                                this.parent.chartSettings.columnHeader.split(delimiter).join(' - ') : '';\n                            var engineModule = this.parent.dataType === 'olap' ? this.parent.olapEngineModule : this.parent.engineModule;\n                            var pivotValues = engineModule.pivotValues;\n                            var totColIndex = this.parent.pivotChartModule.getColumnTotalIndex(pivotValues);\n                            var rKeys = Object.keys(pivotValues);\n                            var columnData = [];\n                            var firstValueRow = false;\n                            for (var _i = 0, rKeys_1 = rKeys; _i < rKeys_1.length; _i++) {\n                                var rKey = rKeys_1[_i];\n                                if (firstValueRow) {\n                                    break;\n                                }\n                                var rowIndex = Number(rKey);\n                                if (pivotValues[rowIndex][0] && pivotValues[rowIndex][0].axis === 'row' &&\n                                    (this.parent.dataSourceSettings.rows.length === 0 ? true : pivotValues[rowIndex][0].type !== 'grand sum')) {\n                                    var firstRowCell = pivotValues[rowIndex][0];\n                                    var tupInfo = this.parent.dataType === 'olap' ?\n                                        engineModule.tupRowInfo[firstRowCell.ordinal] : undefined;\n                                    var rows = pivotValues[rowIndex];\n                                    var cKeys = Object.keys(rows);\n                                    for (var _b = 0, cKeys_1 = cKeys; _b < cKeys_1.length; _b++) {\n                                        var cKey = cKeys_1[_b];\n                                        var cellIndex = Number(cKey);\n                                        var cell = pivotValues[rowIndex][cellIndex];\n                                        var actualText = (this.parent.dataType === 'olap' && tupInfo && tupInfo.measureName) ?\n                                            tupInfo.measureName : cell.actualText;\n                                        if (!totColIndex[cell.colIndex] && cell.axis === 'value' && firstRowCell.type !== 'header' &&\n                                            actualText !== '' && actualText === currentMeasure) {\n                                            firstValueRow = true;\n                                            var columnSeries = this.parent.dataType === 'olap' ? cell.columnHeaders.toString().split(/~~|::/).join(' - ')\n                                                : cell.columnHeaders.toString().split(this.parent.dataSourceSettings.valueSortSettings.headerDelimiter).join(' - ');\n                                            columnData.push({ value: columnSeries, text: columnSeries, title: (_a = {}, _a['title'] = columnSeries, _a) });\n                                            if (columnSeries === columnHeader) {\n                                                availColindex = columnData.length;\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                            if (columnFieldDropDownList && element.querySelector('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_2__.GROUP_CHART_COLUMN_DROPDOWN_DIV)) {\n                                columnFieldDropDownList.dataSource = columnData;\n                                if (availColindex !== undefined) {\n                                    columnFieldDropDownList.value = columnData[availColindex - 1].value;\n                                }\n                                else {\n                                    columnFieldDropDownList.value = columnData[0].value;\n                                }\n                            }\n                            else {\n                                var ddlDiv = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div', { className: _common_base_css_constant__WEBPACK_IMPORTED_MODULE_2__.GROUP_CHART_COLUMN_DROPDOWN_DIV });\n                                element.appendChild(ddlDiv);\n                                columnFieldDropDownList = new _syncfusion_ej2_dropdowns__WEBPACK_IMPORTED_MODULE_8__.DropDownList({\n                                    dataSource: columnData,\n                                    enableRtl: this.parent.enableRtl,\n                                    locale: this.parent.locale,\n                                    value: availColindex ? columnData[availColindex - 1].value : (columnData[0] ? columnData[0].value : ''),\n                                    width: '200',\n                                    fields: { value: 'value', text: 'text', htmlAttributes: 'title' },\n                                    cssClass: _common_base_css_constant__WEBPACK_IMPORTED_MODULE_2__.GROUP_CHART_COLUMN_DROPDOWN + (this.parent.cssClass ? (' ' + this.parent.cssClass) : ''),\n                                    change: function (args) {\n                                        if (args.e && args.e !== null) {\n                                            var delimiter_1 = _this.parent.chartSettings.columnDelimiter ? _this.parent.chartSettings.columnDelimiter : '-';\n                                            _this.parent.chartSettings.columnHeader = args.value.split(' - ').join(delimiter_1);\n                                        }\n                                    }\n                                });\n                                columnFieldDropDownList.isStringTemplate = true;\n                                columnFieldDropDownList.appendTo(ddlDiv);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        else {\n            return;\n        }\n    };\n    PivotButton.prototype.createButtonText = function (field, i, axis, valuePos) {\n        var aggregation;\n        var filterMem;\n        if (axis === 'filters') {\n            filterMem = this.updateButtontext(field[i].name);\n        }\n        var engineModule;\n        if (this.parent.dataType === 'olap') {\n            engineModule = this.parent.olapEngineModule;\n        }\n        else {\n            engineModule = this.parent.engineModule;\n        }\n        if (engineModule.fieldList && engineModule.fieldList[field[i].name] !== undefined) {\n            aggregation = engineModule.fieldList[field[i].name].aggregateType;\n            if ((aggregation !== 'DistinctCount') && (engineModule.fieldList[field[i].name].type !== 'number' || engineModule.fieldList[field[i].name].type === 'include' ||\n                engineModule.fieldList[field[i].name].type === 'exclude')) {\n                aggregation = 'Count';\n            }\n            else {\n                aggregation = aggregation === undefined ? 'Sum' :\n                    engineModule.fieldList[field[i].name].aggregateType;\n            }\n        }\n        var text = field[i].caption ? field[i].caption : field[i].name;\n        text = this.parent.enableHtmlSanitizer ? _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.SanitizeHtmlHelper.sanitize(text) : text;\n        var buttonText = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('span', {\n            attrs: {\n                title: axis === 'filters' ? (this.parent.dataType === 'olap' && engineModule.fieldList[field[i].name].type === 'CalculatedField') ?\n                    text : (text + ' (' + filterMem + ')') : (this.parent.dataType === 'olap' ?\n                    text : (((!this.parent.dataSourceSettings.showAggregationOnValueField || axis !== 'values' || aggregation === 'CalculatedField') ?\n                    text : this.parent.localeObj.getConstant(aggregation) + ' ' + this.parent.localeObj.getConstant('of') + ' ' + text))),\n                'tabindex': '-1', 'aria-disabled': 'false', 'oncontextmenu': 'return false;',\n                'data-type': valuePos === i ? '' : aggregation\n            },\n            className: _common_base_css_constant__WEBPACK_IMPORTED_MODULE_2__.PIVOT_BUTTON_CONTENT_CLASS + ' ' +\n                (this.parent.getModuleName() === 'pivotview' ?\n                    this.parent.groupingBarSettings.allowDragAndDrop && (field[i].allowDragAndDrop || field[i].allowDragAndDrop === undefined) ? '' : _common_base_css_constant__WEBPACK_IMPORTED_MODULE_2__.DRAG_DISABLE_CLASS : '')\n        });\n        buttonText.innerText = axis === 'filters' ? (this.parent.dataType === 'olap' && engineModule.fieldList[field[i].name].type === 'CalculatedField') ?\n            text : (text + ' (' + filterMem + ')') : (this.parent.dataType === 'olap' ?\n            text : (!this.parent.dataSourceSettings.showAggregationOnValueField || axis !== 'values' || aggregation === 'CalculatedField' ?\n            text : this.parent.localeObj.getConstant(aggregation) + ' ' + this.parent.localeObj.getConstant('of') + ' ' + text));\n        return buttonText;\n    };\n    PivotButton.prototype.getTypeStatus = function (field, i, buttonElement) {\n        var engineModule;\n        if (this.parent.dataType === 'olap') {\n            engineModule = this.parent.olapEngineModule;\n        }\n        else {\n            engineModule = this.parent.engineModule;\n        }\n        if (engineModule.fieldList) {\n            var fieldListItem = engineModule.fieldList[field[i].name];\n            if (fieldListItem && fieldListItem.aggregateType !== 'CalculatedField' && this.validateDropdown(fieldListItem.type)) {\n                this.createSummaryType(buttonElement, field[i].name, field[i]);\n            }\n        }\n    };\n    PivotButton.prototype.validateDropdown = function (type) {\n        var aggregateType = this.parent.aggregateTypes;\n        if (type !== 'number') {\n            return (aggregateType.indexOf('Count') > -1 || aggregateType.indexOf('DistinctCount') > -1);\n        }\n        else {\n            for (var i = 0; i < aggregateType.length; i++) {\n                if (this.parent.getAllSummaryType().indexOf(aggregateType[i]) > -1) {\n                    return true;\n                }\n            }\n            return false;\n        }\n    };\n    PivotButton.prototype.createSummaryType = function (pivotButton, fieldName, field) {\n        var spanElement = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('span', {\n            attrs: { 'tabindex': '-1', 'aria-disabled': 'false', 'title': this.parent.localeObj.getConstant('format') },\n            className: _common_base_css_constant__WEBPACK_IMPORTED_MODULE_2__.ICON + ' ' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_2__.AXISFIELD_ICON_CLASS\n        });\n        if (this.parent.getModuleName() === 'pivotview') {\n            if (this.parent.groupingBarSettings.showValueTypeIcon && field.showValueTypeIcon) {\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([spanElement], _common_base_css_constant__WEBPACK_IMPORTED_MODULE_2__.ICON_DISABLE);\n            }\n            else {\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([spanElement], _common_base_css_constant__WEBPACK_IMPORTED_MODULE_2__.ICON_DISABLE);\n            }\n        }\n        else {\n            if (field.showValueTypeIcon) {\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([spanElement], _common_base_css_constant__WEBPACK_IMPORTED_MODULE_2__.ICON_DISABLE);\n            }\n            else {\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([spanElement], _common_base_css_constant__WEBPACK_IMPORTED_MODULE_2__.ICON_DISABLE);\n            }\n        }\n        pivotButton.appendChild(spanElement);\n        return spanElement;\n    };\n    PivotButton.prototype.createMenuOption = function (args) {\n        this.menuOption.render(args, this.parentElement);\n        this.parent.pivotButtonModule = this;\n    };\n    PivotButton.prototype.openCalculatedFieldDialog = function (args) {\n        var fieldName = args.target.parentElement.getAttribute('data-uid');\n        var fieldInfo = _base_util__WEBPACK_IMPORTED_MODULE_9__.PivotUtil.getFieldInfo(fieldName, this.parent);\n        this.parent.actionObj.actionName = _common_base_constant__WEBPACK_IMPORTED_MODULE_3__.editCalculatedField;\n        this.parent.actionObj.fieldInfo = fieldInfo;\n        if (this.parent.actionBeginMethod()) {\n            return;\n        }\n        try {\n            if (this.parent.getModuleName() === 'pivotview') {\n                if (this.parent.isAdaptive && (this.parent.showFieldList &&\n                    this.parent.pivotFieldListModule &&\n                    !this.parent.pivotFieldListModule.isDestroyed)) {\n                    this.parent.pivotFieldListModule.element\n                        .querySelector('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_2__.TOGGLE_FIELD_LIST_CLASS).click();\n                    this.parent.pivotFieldListModule.dialogRenderer.adaptiveElement.select(4);\n                    (this.parent.pivotFieldListModule.calculatedFieldModule).updateAdaptiveCalculatedField(true, fieldName);\n                }\n                else {\n                    if (!this.parent.isAdaptive) {\n                        this.parent.calculatedFieldModule.buttonCall = true;\n                    }\n                    this.parent.notify(_common_base_constant__WEBPACK_IMPORTED_MODULE_3__.initCalculatedField, { edit: true, fieldName: fieldName });\n                }\n            }\n            else if (this.parent.getModuleName() === 'pivotfieldlist') {\n                if (this.parent.isAdaptive) {\n                    this.parent.dialogRenderer.adaptiveElement.select(4);\n                    (this.parent.calculatedFieldModule).updateAdaptiveCalculatedField(true, fieldName);\n                    this.parent.calculatedFieldModule.buttonCall = true;\n                }\n                else {\n                    if (this.parent.dialogRenderer.fieldListDialog) {\n                        this.parent.dialogRenderer.fieldListDialog.hide();\n                        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([this.parent.element.querySelector('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_2__.TOGGLE_FIELD_LIST_CLASS)], _common_base_css_constant__WEBPACK_IMPORTED_MODULE_2__.ICON_HIDDEN);\n                    }\n                    this.parent.notify(_common_base_constant__WEBPACK_IMPORTED_MODULE_3__.initCalculatedField, { edit: true, fieldName: fieldName });\n                    if (this.parent.calculatedFieldModule) {\n                        this.parent.calculatedFieldModule.buttonCall = true;\n                    }\n                }\n            }\n        }\n        catch (execption) {\n            this.parent.actionFailureMethod(execption);\n        }\n    };\n    PivotButton.prototype.createDraggable = function (field, target) {\n        this.draggable = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Draggable(target, {\n            clone: true,\n            enableTailMode: true,\n            enableAutoScroll: true,\n            helper: this.createDragClone.bind(this),\n            dragStart: this.onDragStart.bind(this),\n            drag: this.onDragging.bind(this),\n            dragStop: this.onDragStop.bind(this),\n            abort: (this.parent.getModuleName() === 'pivotview' ?\n                !(this.parent.groupingBarSettings.allowDragAndDrop && field.allowDragAndDrop) ?\n                    '.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_2__.PIVOT_BUTTON_CLASS : '' : !field.allowDragAndDrop ? '.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_2__.PIVOT_BUTTON_CLASS : '')\n        });\n    };\n    PivotButton.prototype.createButtonDragIcon = function (field, pivotButton) {\n        var dragWrapper = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('span', {\n            attrs: { 'tabindex': '-1', 'aria-disabled': 'false' }\n        });\n        var dragElement = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('span', {\n            attrs: {\n                'tabindex': '-1', 'aria-disabled': 'false', 'title': this.parent.localeObj.getConstant('drag')\n            },\n            className: _common_base_css_constant__WEBPACK_IMPORTED_MODULE_2__.ICON + ' ' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_2__.DRAG_CLASS + ' ' + ((field.allowDragAndDrop || field.allowDragAndDrop === undefined) ? '' : _common_base_css_constant__WEBPACK_IMPORTED_MODULE_2__.DRAG_DISABLE_CLASS)\n        });\n        dragWrapper.appendChild(dragElement);\n        if (this.parent.getModuleName() === 'pivotfieldlist') {\n            pivotButton.appendChild(dragWrapper);\n        }\n        return dragWrapper;\n    };\n    PivotButton.prototype.createSortOption = function (pivotButton, fieldName, field) {\n        var sortCLass;\n        var spanElement;\n        var engineModule;\n        if (this.parent.dataType === 'olap') {\n            engineModule = this.parent.olapEngineModule;\n        }\n        else {\n            engineModule = this.parent.engineModule;\n        }\n        if (this.parent.isDeferLayoutUpdate === false || (this.parent.pivotGridModule &&\n            this.parent.pivotGridModule.pivotDeferLayoutUpdate === false)) {\n            sortCLass = engineModule.fieldList[fieldName].sort === 'Descending' ? _common_base_css_constant__WEBPACK_IMPORTED_MODULE_2__.SORT_DESCEND_CLASS : '';\n        }\n        else {\n            sortCLass = '';\n            for (var i = 0; i < this.parent.dataSourceSettings.sortSettings.length; i++) {\n                if (this.parent.dataSourceSettings.sortSettings[i].name === fieldName) {\n                    sortCLass = this.parent.dataSourceSettings.sortSettings[i].order === 'Descending' ? _common_base_css_constant__WEBPACK_IMPORTED_MODULE_2__.SORT_DESCEND_CLASS : '';\n                }\n            }\n        }\n        if (engineModule.fieldList && engineModule.fieldList[fieldName].sort === 'None') {\n            spanElement = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('span', {\n                attrs: { 'tabindex': '-1', 'aria-disabled': 'false', 'title': this.parent.localeObj.getConstant('sort') },\n                className: _common_base_css_constant__WEBPACK_IMPORTED_MODULE_2__.ICON\n            });\n        }\n        else {\n            spanElement = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('span', {\n                attrs: { 'tabindex': '-1', 'aria-disabled': 'false', 'title': this.parent.localeObj.getConstant('sort') },\n                className: _common_base_css_constant__WEBPACK_IMPORTED_MODULE_2__.ICON + ' ' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_2__.SORT_CLASS + ' ' + sortCLass\n            });\n        }\n        if (this.parent.dataSourceSettings.enableSorting) {\n            if (this.parent.getModuleName() === 'pivotview') {\n                if (field.showSortIcon && this.parent.groupingBarSettings.showSortIcon) {\n                    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([spanElement], _common_base_css_constant__WEBPACK_IMPORTED_MODULE_2__.ICON_DISABLE);\n                }\n                else {\n                    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([spanElement], _common_base_css_constant__WEBPACK_IMPORTED_MODULE_2__.ICON_DISABLE);\n                }\n            }\n            else {\n                if (field.showSortIcon) {\n                    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([spanElement], _common_base_css_constant__WEBPACK_IMPORTED_MODULE_2__.ICON_DISABLE);\n                }\n                else {\n                    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([spanElement], _common_base_css_constant__WEBPACK_IMPORTED_MODULE_2__.ICON_DISABLE);\n                }\n            }\n        }\n        else {\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([spanElement], _common_base_css_constant__WEBPACK_IMPORTED_MODULE_2__.ICON_DISABLE);\n        }\n        pivotButton.appendChild(spanElement);\n        return spanElement;\n    };\n    PivotButton.prototype.createFilterOption = function (pivotButton, fieldName, axis, field) {\n        var filterCLass;\n        var engineModule;\n        if (this.parent.dataType === 'olap') {\n            engineModule = this.parent.olapEngineModule;\n        }\n        else {\n            engineModule = this.parent.engineModule;\n        }\n        var filterField = _base_util__WEBPACK_IMPORTED_MODULE_9__.PivotUtil.getFieldByName(fieldName, this.parent.dataSourceSettings.filterSettings);\n        if (this.parent.isDeferLayoutUpdate === false || (this.parent.pivotGridModule &&\n            this.parent.pivotGridModule.pivotDeferLayoutUpdate === false)) {\n            engineModule.fieldList[fieldName].filter = engineModule.fieldList[fieldName].filter === null ?\n                [] : engineModule.fieldList[fieldName].filter;\n            filterCLass = ((this.parent.dataSourceSettings.mode === 'Server' && !filterField) ||\n                (this.parent.dataSourceSettings.mode === 'Local' && engineModule.fieldList[fieldName].filter.length === 0)) ?\n                !engineModule.fieldList[fieldName].isExcelFilter ? _common_base_css_constant__WEBPACK_IMPORTED_MODULE_2__.FILTER_CLASS : _common_base_css_constant__WEBPACK_IMPORTED_MODULE_2__.FILTERED_CLASS : _common_base_css_constant__WEBPACK_IMPORTED_MODULE_2__.FILTERED_CLASS;\n        }\n        else {\n            filterCLass = _common_base_css_constant__WEBPACK_IMPORTED_MODULE_2__.FILTER_CLASS;\n            for (var i = 0; i < this.parent.dataSourceSettings.filterSettings.length; i++) {\n                if (this.parent.dataSourceSettings.filterSettings[i].name === fieldName) {\n                    filterCLass = _common_base_css_constant__WEBPACK_IMPORTED_MODULE_2__.FILTERED_CLASS;\n                }\n            }\n        }\n        var spanElement = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('span', {\n            attrs: {\n                'tabindex': '-1', 'aria-disabled': 'false', 'title': this.parent.localeObj.getConstant('filter')\n            },\n            className: _common_base_css_constant__WEBPACK_IMPORTED_MODULE_2__.FILTER_COMMON_CLASS + ' ' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_2__.ICON + ' ' + filterCLass\n        });\n        if ((((this.parent.dataSourceSettings.allowLabelFilter || this.parent.dataSourceSettings.allowValueFilter) &&\n            axis !== 'filters') || this.parent.dataSourceSettings.allowMemberFilter)) {\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([spanElement], _common_base_css_constant__WEBPACK_IMPORTED_MODULE_2__.ICON_DISABLE);\n        }\n        else {\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([spanElement], _common_base_css_constant__WEBPACK_IMPORTED_MODULE_2__.ICON_DISABLE);\n        }\n        if (this.parent.getModuleName() === 'pivotview') {\n            if ((((this.parent.dataSourceSettings.allowLabelFilter || this.parent.dataSourceSettings.allowValueFilter) &&\n                axis !== 'filters') || this.parent.dataSourceSettings.allowMemberFilter) &&\n                this.parent.groupingBarSettings.showFilterIcon && field.showFilterIcon) {\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([spanElement], _common_base_css_constant__WEBPACK_IMPORTED_MODULE_2__.ICON_DISABLE);\n            }\n            else {\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([spanElement], _common_base_css_constant__WEBPACK_IMPORTED_MODULE_2__.ICON_DISABLE);\n            }\n        }\n        else {\n            if (field.showFilterIcon && (((this.parent.dataSourceSettings.allowLabelFilter ||\n                this.parent.dataSourceSettings.allowValueFilter) && axis !== 'filters') ||\n                this.parent.dataSourceSettings.allowMemberFilter)) {\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([spanElement], _common_base_css_constant__WEBPACK_IMPORTED_MODULE_2__.ICON_DISABLE);\n            }\n            else {\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([spanElement], _common_base_css_constant__WEBPACK_IMPORTED_MODULE_2__.ICON_DISABLE);\n            }\n        }\n        pivotButton.appendChild(spanElement);\n        return spanElement;\n    };\n    // To update button text\n    PivotButton.prototype.updateButtontext = function (fieldName) {\n        var engineModule;\n        if (this.parent.dataType === 'olap') {\n            engineModule = this.parent.olapEngineModule;\n        }\n        else {\n            engineModule = this.parent.engineModule;\n        }\n        var filterCount = engineModule.fieldList[fieldName].filter.length;\n        var filterType = engineModule.fieldList[fieldName].filterType;\n        var memLen = engineModule.fieldList[fieldName].dateMember.length;\n        var filterMem;\n        var firstNode = engineModule.fieldList[fieldName].filter[0];\n        if (this.parent.dataType === 'olap') {\n            filterMem = this.updateOlapButtonText(engineModule, fieldName, firstNode, filterCount);\n        }\n        else if (filterType === 'include') {\n            if (filterCount === 1) {\n                filterMem = firstNode;\n            }\n            else if (filterCount > 1) {\n                if (filterCount === memLen) {\n                    filterMem = this.parent.localeObj.getConstant('all');\n                }\n                else {\n                    filterMem = this.parent.localeObj.getConstant('multipleItems');\n                }\n            }\n        }\n        else if (filterType === 'exclude') {\n            if (filterCount === 1) {\n                if (memLen === 2) {\n                    if (firstNode !== engineModule.fieldList[fieldName].dateMember[0].actualText) {\n                        filterMem = firstNode;\n                    }\n                    else {\n                        filterMem = engineModule.fieldList[fieldName].dateMember[0].actualText;\n                    }\n                }\n                else {\n                    filterMem = this.parent.localeObj.getConstant('multipleItems');\n                }\n            }\n            else if (filterCount > 1) {\n                var j = void 0;\n                var allNodes = Object.keys(engineModule.fieldList[fieldName].members);\n                var filteredItems = engineModule.fieldList[fieldName].filter;\n                if (filterCount === (allNodes.length - 1)) {\n                    for (j = 0; j < allNodes.length; j++) {\n                        var test = allNodes[j];\n                        var x = filteredItems.indexOf(test);\n                        if (x === -1) {\n                            filterMem = allNodes[j];\n                            break;\n                        }\n                    }\n                }\n                else {\n                    filterMem = this.parent.localeObj.getConstant('multipleItems');\n                }\n            }\n        }\n        else {\n            filterMem = this.parent.localeObj.getConstant('all');\n        }\n        return filterMem;\n    };\n    PivotButton.prototype.updateOlapButtonText = function (engineModule, fieldName, firstNode, filterCount) {\n        var filterMem;\n        var filterItems = engineModule.fieldList[fieldName].actualFilter;\n        if (filterItems.length > 0) {\n            var cMembers = engineModule.fieldList[fieldName].members;\n            var actualFilterItems = [];\n            if (engineModule.fieldList[fieldName].filterMembers.length > 0) {\n                var dummyfilterItems = {};\n                for (var _i = 0, filterItems_1 = filterItems; _i < filterItems_1.length; _i++) {\n                    var item = filterItems_1[_i];\n                    dummyfilterItems[item] = item;\n                    if (cMembers[item]) {\n                        dummyfilterItems = this.parent.pivotCommon.eventBase.getParentNode(fieldName, item, dummyfilterItems);\n                    }\n                }\n                var updatedFilterItems = dummyfilterItems ? Object.keys(dummyfilterItems) : [];\n                for (var _a = 0, updatedFilterItems_1 = updatedFilterItems; _a < updatedFilterItems_1.length; _a++) {\n                    var item = updatedFilterItems_1[_a];\n                    if (cMembers[item].isSelected) {\n                        if (!(cMembers[item].parent && cMembers[cMembers[item].parent].isSelected)) {\n                            actualFilterItems.push(item);\n                        }\n                    }\n                }\n                firstNode = actualFilterItems.length === 1 ? cMembers[actualFilterItems[0]].caption : firstNode;\n            }\n            filterCount = actualFilterItems.length === 0 ? filterCount : actualFilterItems.length;\n        }\n        if (filterCount === 0) {\n            filterMem = (engineModule.fieldList[fieldName].allMember ?\n                engineModule.fieldList[fieldName].allMember : this.parent.localeObj.getConstant('all'));\n        }\n        else if (filterCount === 1) {\n            filterMem = firstNode;\n        }\n        else if (filterCount > 1) {\n            filterMem = this.parent.localeObj.getConstant('multipleItems');\n        }\n        return filterMem;\n    };\n    PivotButton.prototype.createDragClone = function (args) {\n        var element = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(args.element, '.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_2__.PIVOT_BUTTON_CLASS);\n        var cloneElement = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div', {\n            id: this.parent.element.id + '_DragClone',\n            className: _common_base_css_constant__WEBPACK_IMPORTED_MODULE_2__.DRAG_CLONE_CLASS + (this.parent.cssClass ? (' ' + this.parent.cssClass) : '')\n        });\n        var contentElement = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('span', {\n            className: _common_base_css_constant__WEBPACK_IMPORTED_MODULE_2__.TEXT_CONTENT_CLASS\n        });\n        contentElement.innerText = this.parent.enableHtmlSanitizer ? _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.SanitizeHtmlHelper.sanitize(element.textContent) : element.textContent;\n        cloneElement.appendChild(contentElement);\n        document.body.appendChild(cloneElement);\n        return cloneElement;\n    };\n    PivotButton.prototype.onDragStart = function (e) {\n        var _this = this;\n        var element = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(e.element, '.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_2__.PIVOT_BUTTON_CLASS);\n        var dragItem = document.getElementById(this.parent.element.id + '_DragClone');\n        var fieldInfo = _base_util__WEBPACK_IMPORTED_MODULE_9__.PivotUtil.getFieldInfo(element.getAttribute('data-uid'), this.parent);\n        var dragEventArgs = {\n            fieldName: fieldInfo.fieldName,\n            fieldItem: fieldInfo.fieldItem,\n            axis: fieldInfo.axis,\n            dataSourceSettings: _base_util__WEBPACK_IMPORTED_MODULE_9__.PivotUtil.getClonedDataSourceSettings(this.parent.dataSourceSettings),\n            cancel: false\n        };\n        var control = this.parent.getModuleName() === 'pivotfieldlist' &&\n            this.parent.isPopupView ? this.parent.pivotGridModule : this.parent;\n        control.trigger(_common_base_constant__WEBPACK_IMPORTED_MODULE_3__.fieldDragStart, dragEventArgs, function (observedArgs) {\n            if (!observedArgs.cancel) {\n                _this.parent.isDragging = true;\n                var engineModule = void 0;\n                if (_this.parent.dataType === 'olap') {\n                    engineModule = _this.parent.olapEngineModule;\n                }\n                else {\n                    engineModule = _this.parent.engineModule;\n                }\n                var data = engineModule.fieldList[element.getAttribute('data-uid')];\n                var axis = [_common_base_css_constant__WEBPACK_IMPORTED_MODULE_2__.ROW_AXIS_CLASS, _common_base_css_constant__WEBPACK_IMPORTED_MODULE_2__.COLUMN_AXIS_CLASS, _common_base_css_constant__WEBPACK_IMPORTED_MODULE_2__.FILTER_AXIS_CLASS];\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([element], _common_base_css_constant__WEBPACK_IMPORTED_MODULE_2__.SELECTED_NODE_CLASS);\n                if (dragItem && (_this.parent.getModuleName() === 'pivotfieldlist' &&\n                    _this.parent.renderMode) === 'Popup') {\n                    var fieldListPopup = _this.parent;\n                    dragItem.style.zIndex = (fieldListPopup.dialogRenderer.fieldListDialog.zIndex + 1).toString();\n                }\n                if (data && data.aggregateType === 'CalculatedField') {\n                    for (var _i = 0, axis_1 = axis; _i < axis_1.length; _i++) {\n                        var axisContent = axis_1[_i];\n                        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([_this.parentElement.querySelector('.' + axisContent)], _common_base_css_constant__WEBPACK_IMPORTED_MODULE_2__.NO_DRAG_CLASS);\n                        var pivotButtons = _this.parentElement.querySelector('.' + axisContent).querySelectorAll('.e-pivot-button');\n                        pivotButtons.forEach(function (button) {\n                            button.style.cursor = 'no-drop';\n                        });\n                    }\n                }\n            }\n            else {\n                _this.parent.isDragging = false;\n                _this.draggable.intDestroy(e.event);\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)(dragItem);\n            }\n        });\n    };\n    PivotButton.prototype.onDragging = function (e) {\n        this.draggable.setProperties({ cursorAt: { top: (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(e.event.targetTouches) || _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice) ? 60 : -20 } });\n    };\n    PivotButton.prototype.onDragStop = function (args) {\n        this.parent.isDragging = false;\n        if (args.target && args.element && ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(args.element, '.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_2__.GROUP_ALL_FIELDS_CLASS) &&\n            !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(args.target, '.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_2__.DROPPABLE_CLASS))) {\n            args.cancel = true;\n        }\n        var element = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(args.element, '.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_2__.PIVOT_BUTTON_CLASS);\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([].slice.call(this.parentElement.querySelectorAll('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_2__.PIVOT_BUTTON_CLASS)), _common_base_css_constant__WEBPACK_IMPORTED_MODULE_2__.SELECTED_NODE_CLASS);\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([].slice.call(this.parentElement.querySelectorAll('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_2__.DROP_INDICATOR_CLASS)), _common_base_css_constant__WEBPACK_IMPORTED_MODULE_2__.INDICATOR_HOVER_CLASS);\n        var axis = [_common_base_css_constant__WEBPACK_IMPORTED_MODULE_2__.ROW_AXIS_CLASS, _common_base_css_constant__WEBPACK_IMPORTED_MODULE_2__.COLUMN_AXIS_CLASS, _common_base_css_constant__WEBPACK_IMPORTED_MODULE_2__.FILTER_AXIS_CLASS];\n        for (var _i = 0, axis_2 = axis; _i < axis_2.length; _i++) {\n            var axisContent = axis_2[_i];\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([this.parentElement.querySelector('.' + axisContent)], _common_base_css_constant__WEBPACK_IMPORTED_MODULE_2__.NO_DRAG_CLASS);\n            var pivotButtons = this.parentElement.querySelector('.' + axisContent).querySelectorAll('.e-pivot-button');\n            pivotButtons.forEach(function (button) {\n                button.style.cursor = 'default';\n            });\n        }\n        if (this.parent.pivotCommon.filterDialog.dialogPopUp) {\n            this.parent.pivotCommon.filterDialog.dialogPopUp.close();\n        }\n        if (document.getElementById(this.parent.element.id + '_DragClone')) {\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.remove)(document.getElementById(this.parent.element.id + '_DragClone'));\n        }\n        document.body.style.cursor = 'auto';\n        if (!this.isButtonDropped(args.target, element) || args.cancel) {\n            return;\n        }\n        this.parent.pivotCommon.dataSourceUpdate.control = this.parent.getModuleName() === 'pivotview' ? this.parent :\n            (this.parent.pivotGridModule ? this.parent.pivotGridModule : this.parent);\n        if (this.parent.pivotCommon.nodeStateModified.onStateModified(args, element.getAttribute('data-uid'))) {\n            this.updateDataSource();\n            var thisObj = this;\n            thisObj.parent.axisFieldModule.render();\n        }\n    };\n    PivotButton.prototype.isButtonDropped = function (dropTarget, target) {\n        var axisPanel = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(target, '.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_2__.DROPPABLE_CLASS);\n        var droppableElement = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(dropTarget, '.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_2__.DROPPABLE_CLASS);\n        var isDropped = true;\n        if (axisPanel && axisPanel === droppableElement) {\n            var pivotButtons = [].slice.call(axisPanel.querySelectorAll('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_2__.PIVOT_BUTTON_CLASS));\n            var droppableTarget = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(dropTarget, '.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_2__.PIVOT_BUTTON_WRAPPER_CLASS);\n            var sourcePosition = void 0;\n            var droppedPosition = -1;\n            for (var i = 0, n = pivotButtons.length; i < n; i++) {\n                if (pivotButtons[i].id === target.id) {\n                    sourcePosition = i;\n                }\n                if (droppableTarget) {\n                    var droppableButton = droppableTarget.querySelector('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_2__.PIVOT_BUTTON_CLASS);\n                    if (pivotButtons[i].id === droppableButton.id) {\n                        droppedPosition = i;\n                    }\n                }\n            }\n            if (sourcePosition === droppedPosition || (sourcePosition === (pivotButtons.length - 1) && droppedPosition === -1)) {\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([].slice.call(this.parentElement.querySelectorAll('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_2__.DROP_INDICATOR_CLASS)), _common_base_css_constant__WEBPACK_IMPORTED_MODULE_2__.INDICATOR_HOVER_CLASS);\n                isDropped = false;\n            }\n        }\n        return isDropped;\n    };\n    PivotButton.prototype.updateSorting = function (args) {\n        var buttonElement = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(args.target, '.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_2__.PIVOT_BUTTON_CLASS);\n        var fieldInfo = _base_util__WEBPACK_IMPORTED_MODULE_9__.PivotUtil.getFieldInfo((buttonElement ? buttonElement.getAttribute('data-uid') : ''), this.parent);\n        if (!(args.target.classList.contains(_common_base_css_constant__WEBPACK_IMPORTED_MODULE_2__.FILTER_COMMON_CLASS)) &&\n            !(args.target.classList.contains(_common_base_css_constant__WEBPACK_IMPORTED_MODULE_2__.REMOVE_CLASS)) &&\n            !(args.target.classList.contains(_common_base_css_constant__WEBPACK_IMPORTED_MODULE_2__.DRAG_CLASS)) &&\n            (buttonElement && fieldInfo.fieldItem && (fieldInfo.fieldItem.showSortIcon ||\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(fieldInfo.fieldItem.showSortIcon)) && !fieldInfo.fieldItem.isCalculatedField)) {\n            this.parent.actionObj.actionName = _common_base_constant__WEBPACK_IMPORTED_MODULE_3__.sortField;\n            this.parent.actionObj.fieldInfo = fieldInfo;\n            if (this.parent.actionBeginMethod()) {\n                return;\n            }\n            try {\n                if ((this.parent instanceof _pivotfieldlist_base_field_list__WEBPACK_IMPORTED_MODULE_1__.PivotFieldList || this.parent.groupingBarSettings.showSortIcon) &&\n                    this.parent.dataSourceSettings.enableSorting &&\n                    !(this.parent.dataType === 'olap' && ((this.parent.getModuleName() === 'pivotfieldlist' &&\n                        this.parent.pivotGridModule !== undefined &&\n                        this.parent.pivotGridModule.enableVirtualization) ||\n                        (this.parent.getModuleName() === 'pivotview' && this.parent.enableVirtualization)))) {\n                    this.parent.pivotCommon.eventBase.updateSorting(args);\n                    if (this.parent.staticPivotGridModule) {\n                        this.parent.staticPivotGridModule.actionObj = this.parent.actionObj;\n                    }\n                    if (this.parent.isDeferLayoutUpdate === false || (this.parent.pivotGridModule\n                        && this.parent.pivotGridModule.pivotDeferLayoutUpdate === false) ||\n                        this.parent.getModuleName() !== 'pivotfieldlist') {\n                        var actionInfo = {\n                            sortInfo: this.parent.lastSortInfo\n                        };\n                        this.parent.actionObj.actionInfo = actionInfo;\n                        this.updateDataSource(true);\n                    }\n                    var thisObj = this;\n                    if (thisObj.parent instanceof _pivotfieldlist_base_field_list__WEBPACK_IMPORTED_MODULE_1__.PivotFieldList) {\n                        thisObj.axisField.render();\n                        if (this.parent.isPopupView && this.parent.pivotGridModule) {\n                            this.parent.pivotGridModule.notify(_common_base_constant__WEBPACK_IMPORTED_MODULE_3__.uiUpdate, this);\n                        }\n                        else if (this.parent.staticPivotGridModule) {\n                            this.parent.staticPivotGridModule.notify(_common_base_constant__WEBPACK_IMPORTED_MODULE_3__.uiUpdate, this);\n                        }\n                    }\n                }\n            }\n            catch (execption) {\n                this.parent.actionFailureMethod(execption);\n            }\n        }\n    };\n    /**\n     *\n     * @param {boolean} isRefreshGrid - It contains isRefreshGrid\n     * @returns {void}\n     * @hidden */\n    PivotButton.prototype.updateDataSource = function (isRefreshGrid) {\n        if (this.parent.isDeferLayoutUpdate === false || (this.parent.pivotGridModule\n            && this.parent.pivotGridModule.pivotDeferLayoutUpdate === false) ||\n            this.parent.getModuleName() === 'pivotview') {\n            this.parent.updateDataSource(isRefreshGrid);\n        }\n        else {\n            if (this.parent.getModuleName() === 'pivotfieldlist' && this.parent.isPopupView && this.parent.pivotGridModule) {\n                if (this.parent.dataType === 'olap') {\n                    this.parent.pivotGridModule.olapEngineModule = this.parent.olapEngineModule;\n                }\n                else {\n                    this.parent.pivotGridModule.engineModule = this.parent.engineModule;\n                }\n                this.parent.pivotGridModule.notify(_common_base_constant__WEBPACK_IMPORTED_MODULE_3__.uiUpdate, this);\n                this.parent.pivotGridModule.setProperties({\n                    dataSourceSettings: this.parent.dataSourceSettings.properties\n                }, true);\n            }\n            else {\n                this.parent.triggerPopulateEvent();\n            }\n        }\n    };\n    PivotButton.prototype.updateFiltering = function (args) {\n        var pivotObj = this.parent.pivotGridModule ?\n            this.parent.pivotGridModule : this.parent;\n        var fieldName = args.target.parentElement.getAttribute('data-uid');\n        var fieldInfo = _base_util__WEBPACK_IMPORTED_MODULE_9__.PivotUtil.getFieldInfo(fieldName, this.parent);\n        this.parent.actionObj.actionName = _common_base_constant__WEBPACK_IMPORTED_MODULE_3__.filterField;\n        this.parent.actionObj.fieldInfo = fieldInfo;\n        if (this.parent.actionBeginMethod()) {\n            return;\n        }\n        try {\n            if (pivotObj.getModuleName() === 'pivotfieldlist') {\n                (0,_syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_5__.showSpinner)(pivotObj.fieldListSpinnerElement);\n            }\n            else {\n                pivotObj.showWaitingPopup();\n            }\n            pivotObj.mouseEventArgs = args;\n            pivotObj.filterTargetID = this.parent.pivotCommon.moduleName !== 'pivotfieldlist' ?\n                this.parent.element : document.getElementById(this.parent.pivotCommon.parentID + '_Container');\n            if (pivotObj.dataSourceSettings.mode === 'Server') {\n                if (this.parent.engineModule.fieldList[fieldName].members &&\n                    Object.keys(this.parent.engineModule.fieldList[fieldName].members).length > 0) {\n                    this.updateFilterEvents();\n                }\n                else {\n                    this.parent.getEngine('fetchFieldMembers', null, null, null, null, null, fieldName);\n                }\n            }\n            else {\n                if (pivotObj.dataType === 'pivot' && !this.parent.engineModule.fieldList[fieldName].isMembersFilled) {\n                    this.parent.engineModule.fetchFieldMembers(fieldName);\n                }\n                this.updateFilterEvents();\n            }\n        }\n        catch (execption) {\n            this.parent.actionFailureMethod(execption);\n        }\n    };\n    /**\n     *\n     * @returns {void}\n     * @hidden */\n    PivotButton.prototype.updateFilterEvents = function () {\n        var pivotObj = this.parent.pivotGridModule ?\n            this.parent.pivotGridModule : this.parent;\n        this.parent.pivotCommon.eventBase.updateFiltering(pivotObj.mouseEventArgs);\n        var target = pivotObj.mouseEventArgs.target;\n        this.fieldName = target.parentElement.getAttribute('data-uid');\n        if (this.parent.pivotCommon.filterDialog.dialogPopUp) {\n            this.bindDialogEvents();\n        }\n        if (pivotObj.getModuleName() === 'pivotfieldlist') {\n            (0,_syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_5__.hideSpinner)(pivotObj.fieldListSpinnerElement);\n        }\n        else {\n            pivotObj.hideWaitingPopup();\n        }\n    };\n    PivotButton.prototype.bindDialogEvents = function () {\n        if (this.parent.pivotCommon.filterDialog.allowExcelLikeFilter && this.parent.pivotCommon.filterDialog.tabObj) {\n            this.index = this.parent.pivotCommon.filterDialog.tabObj.selectedItem;\n            this.updateDialogButtonEvents();\n            this.parent.pivotCommon.filterDialog.dialogPopUp.buttons = this.buttonModel();\n            this.parent.pivotCommon.filterDialog.dialogPopUp.dataBind();\n            this.parent.pivotCommon.filterDialog.tabObj.selected = this.tabSelect.bind(this);\n        }\n        else if (this.parent.dataSourceSettings.allowMemberFilter) {\n            this.index = 0;\n            this.updateDialogButtonEvents();\n        }\n    };\n    PivotButton.prototype.buttonModel = function () {\n        return [\n            {\n                isFlat: false,\n                buttonModel: {\n                    cssClass: 'e-clear-filter-button' + (this.parent.pivotCommon.filterDialog.allowExcelLikeFilter ? '' : ' ' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_2__.ICON_DISABLE) + (this.parent.cssClass ? (' ' + this.parent.cssClass) : ''),\n                    iconCss: 'e-icons e-clear-filter-icon', enableRtl: this.parent.enableRtl,\n                    content: this.parent.localeObj.getConstant('clearFilter'), disabled: (this.parent.pivotCommon.filterDialog.filterObject ? false : true)\n                },\n                click: this.ClearFilter.bind(this)\n            },\n            {\n                isFlat: false,\n                buttonModel: {\n                    cssClass: _common_base_css_constant__WEBPACK_IMPORTED_MODULE_2__.OK_BUTTON_CLASS + (this.parent.cssClass ? (' ' + this.parent.cssClass) : ''), content: this.parent.localeObj.getConstant('ok'), isPrimary: true\n                },\n                click: (this.index === 0 ? this.updateFilterState.bind(this, this.fieldName) : this.updateCustomFilter.bind(this))\n            },\n            {\n                isFlat: false,\n                click: this.parent.pivotCommon.filterDialog.closeFilterDialog.bind(this.parent.pivotCommon.filterDialog),\n                buttonModel: { cssClass: _common_base_css_constant__WEBPACK_IMPORTED_MODULE_2__.CANCEL_BUTTON_CLASS + (this.parent.cssClass ? (' ' + this.parent.cssClass) : ''), content: this.parent.localeObj.getConstant('cancel') }\n            }\n        ];\n    };\n    PivotButton.prototype.tabSelect = function (e) {\n        this.index = e.selectedIndex;\n        this.updateDialogButtonEvents();\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([].slice.call(this.parent.pivotCommon.filterDialog.dialogPopUp.element.querySelectorAll('.e-selected-tab')), 'e-selected-tab');\n        if (e.selectedIndex > 0) {\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([this.parent.pivotCommon.filterDialog.dialogPopUp.element.querySelector('.e-filter-div-content' + '.' + (e.selectedIndex === 1 && this.parent.dataSourceSettings.allowLabelFilter ? 'e-label-filter' : 'e-value-filter'))], 'e-selected-tab');\n        }\n        if (e.selectedIndex === 0) {\n            this.parent.pivotCommon.filterDialog.updateCheckedState();\n        }\n        else {\n            this.parent.pivotCommon.filterDialog.dialogPopUp.buttons[0].buttonModel.disabled = false;\n            this.parent.pivotCommon.filterDialog.dialogPopUp.element.querySelector('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_2__.OK_BUTTON_CLASS).removeAttribute('disabled');\n        }\n    };\n    PivotButton.prototype.updateDialogButtonEvents = function () {\n        this.parent.pivotCommon.filterDialog.dialogPopUp.buttons = this.buttonModel();\n        this.parent.pivotCommon.filterDialog.dialogPopUp.dataBind();\n    };\n    PivotButton.prototype.updateCustomFilter = function () {\n        var _this = this;\n        var dialogElement = this.parent.pivotCommon.filterDialog.dialogPopUp.element.querySelector('.e-selected-tab');\n        var fieldName = dialogElement.getAttribute('data-fieldname');\n        var levelName = dialogElement.getAttribute('data-selectedField');\n        var filterType = dialogElement.getAttribute('data-type');\n        var measure = dialogElement.getAttribute('data-measure');\n        var operator = dialogElement.getAttribute('data-operator');\n        var operand1 = dialogElement.getAttribute('data-value1');\n        var operand2 = dialogElement.getAttribute('data-value2');\n        var type = ((filterType === 'value') ? 'Value' : (filterType === 'date') ? 'Date' :\n            (filterType === 'number') ? 'Number' : 'Label');\n        var filterItem = {\n            name: fieldName,\n            type: type,\n            measure: measure,\n            condition: operator,\n            value1: filterType === 'date' ? new Date(operand1) : operand1,\n            value2: filterType === 'date' ? new Date(operand2) : operand2\n        };\n        var filterObject;\n        if (this.parent.dataType === 'olap') {\n            filterItem.selectedField = levelName;\n            this.removeDataSourceSettings(fieldName, levelName, type);\n            var filterItems = this.parent.dataSourceSettings.filterSettings;\n            for (var _i = 0, filterItems_2 = filterItems; _i < filterItems_2.length; _i++) {\n                var item = filterItems_2[_i];\n                if (item.name === fieldName && item.selectedField === levelName) {\n                    filterObject = item;\n                }\n            }\n        }\n        else {\n            filterObject = _base_util__WEBPACK_IMPORTED_MODULE_9__.PivotUtil.getFilterItemByName(fieldName, this.parent.dataSourceSettings.filterSettings);\n        }\n        if (((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(operand1) || operand1 === '') ||\n            (['Between', 'NotBetween'].indexOf(operator) > -1 && ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(operand2) || operand2 === ''))) {\n            var inputElementString = (type.toLowerCase() + (((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(operand1) || operand1 === '') ? '_input_option_1' : '_input_option_2'));\n            var focusElement = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('#' + this.parent.element.id + '_' + inputElementString, dialogElement);\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([focusElement], _common_base_css_constant__WEBPACK_IMPORTED_MODULE_2__.EMPTY_FIELD);\n            focusElement.focus();\n            return;\n        }\n        var filterEventArgs = {\n            cancel: false,\n            filterSettings: filterItem,\n            dataSourceSettings: _base_util__WEBPACK_IMPORTED_MODULE_9__.PivotUtil.getClonedDataSourceSettings(this.parent.dataSourceSettings)\n        };\n        var control = this.parent.getModuleName() === 'pivotfieldlist' &&\n            this.parent.isPopupView ? this.parent.pivotGridModule : this.parent;\n        control.trigger(_common_base_constant__WEBPACK_IMPORTED_MODULE_3__.memberFiltering, filterEventArgs, function (observedArgs) {\n            if (!observedArgs.cancel) {\n                filterItem = observedArgs.filterSettings;\n                if (filterObject) {\n                    // this.removeDataSourceSettings(fieldName);\n                    filterObject = filterObject.properties ?\n                        filterObject.properties : filterObject;\n                    filterObject.type = filterItem.type;\n                    filterObject.measure = filterItem.measure;\n                    filterObject.condition = filterItem.condition;\n                    filterObject.value1 = filterItem.value1;\n                    filterObject.value2 = filterItem.value2;\n                    if (_this.parent.dataType === 'olap') {\n                        filterObject.selectedField = filterItem.selectedField;\n                    }\n                }\n                else {\n                    _this.parent.dataSourceSettings.filterSettings.push(filterItem);\n                }\n            }\n            if (type !== 'Value') {\n                _this.parent.lastFilterInfo = _base_util__WEBPACK_IMPORTED_MODULE_9__.PivotUtil.getFilterItemByName(fieldName, _this.parent.dataSourceSettings.filterSettings);\n                _this.parent.lastFilterInfo = _this.parent.lastFilterInfo.properties ?\n                    _this.parent.lastFilterInfo.properties : _this.parent.lastFilterInfo;\n            }\n            _this.parent.pivotCommon.filterDialog.dialogPopUp.close();\n            if (!observedArgs.cancel) {\n                _this.refreshPivotButtonState(fieldName, true);\n                _this.updateDataSource(true);\n            }\n        });\n    };\n    PivotButton.prototype.ClearFilter = function () {\n        var dialogElement = this.parent.pivotCommon.filterDialog.dialogPopUp.element;\n        var fieldName = dialogElement.getAttribute('data-fieldname');\n        var tabElement = dialogElement.querySelector('.e-selected-tab');\n        this.parent.pivotCommon.filterDialog.dialogPopUp.close();\n        if (this.parent.dataType === 'olap' && tabElement) {\n            var levelName = tabElement.getAttribute('data-selectedField');\n            this.removeDataSourceSettings(fieldName, levelName);\n        }\n        else {\n            this.removeDataSourceSettings(fieldName);\n        }\n        var filterObject = _base_util__WEBPACK_IMPORTED_MODULE_9__.PivotUtil.getFilterItemByName(fieldName, this.parent.dataSourceSettings.filterSettings);\n        this.refreshPivotButtonState(fieldName, filterObject ? true : false);\n        this.updateDataSource(true);\n    };\n    PivotButton.prototype.removeButton = function (args) {\n        var _this = this;\n        var target = args.target;\n        var fieldName = target.parentElement.getAttribute('data-uid');\n        var fieldInfo = _base_util__WEBPACK_IMPORTED_MODULE_9__.PivotUtil.getFieldInfo(fieldName, this.parent);\n        this.parent.actionObj.actionName = _common_base_constant__WEBPACK_IMPORTED_MODULE_3__.removeField;\n        this.parent.actionObj.fieldInfo = fieldInfo;\n        if (this.parent.actionBeginMethod()) {\n            return;\n        }\n        var removeFieldArgs = {\n            cancel: false, fieldName: fieldName,\n            dataSourceSettings: _base_util__WEBPACK_IMPORTED_MODULE_9__.PivotUtil.getClonedDataSourceSettings(this.parent.dataSourceSettings),\n            fieldItem: fieldInfo.fieldItem, axis: fieldInfo.axis\n        };\n        try {\n            var control = this.parent.getModuleName() === 'pivotfieldlist' &&\n                this.parent.isPopupView ? this.parent.pivotGridModule : this.parent;\n            control.trigger(_common_base_constant__WEBPACK_IMPORTED_MODULE_3__.fieldRemove, removeFieldArgs, function (observedArgs) {\n                if (!observedArgs.cancel) {\n                    if (target.parentElement.getAttribute('isvalue') === 'true') {\n                        _this.parent.setProperties({ dataSourceSettings: { values: [] } }, true);\n                        if (_this.parent.dataType === 'olap') {\n                            _this.parent.pivotCommon.dataSourceUpdate.removeFieldFromReport('[Measures]');\n                        }\n                    }\n                    else {\n                        _this.parent.pivotCommon.dataSourceUpdate.removeFieldFromReport(fieldName);\n                        if (_this.parent.dataType === 'pivot' && _this.parent.showValuesButton && _this.parent.dataSourceSettings.values.length > 1 &&\n                            fieldInfo.position < _this.parent.dataSourceSettings.valueIndex && ((_this.parent.dataSourceSettings.valueAxis === 'row' &&\n                            observedArgs.axis === 'rows') || (_this.parent.dataSourceSettings.valueAxis === 'column' && observedArgs.axis === 'columns'))) {\n                            _this.parent.setProperties({\n                                dataSourceSettings: { valueIndex: _this.parent.dataSourceSettings.valueIndex - 1 }\n                            }, true);\n                        }\n                        if (_this.parent.dataType === 'olap' && _this.parent.dataSourceSettings.values.length === 0) {\n                            _this.parent.pivotCommon.dataSourceUpdate.removeFieldFromReport('[Measures]');\n                        }\n                    }\n                    if (_this.parent.getModuleName() === 'pivotfieldlist') {\n                        _this.parent.axisFieldModule.render();\n                    }\n                    _this.updateDataSource();\n                }\n            });\n        }\n        catch (execption) {\n            this.parent.actionFailureMethod(execption);\n        }\n    };\n    /**\n     *\n     * @param {NodeCheckEventArgs} args - It contains args value.\n     * @returns {void}\n     * @hidden */\n    PivotButton.prototype.nodeStateModified = function (args) {\n        var target = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(args.node, 'li');\n        var fieldName = target.getAttribute('data-fieldname');\n        if (target.getAttribute('data-memberId') === 'all') {\n            this.parent.pivotCommon.filterDialog.memberTreeView.nodeChecked = null;\n            if (args.action === 'check') {\n                this.parent.pivotCommon.filterDialog.memberTreeView.checkAll();\n            }\n            else {\n                this.parent.pivotCommon.filterDialog.memberTreeView.uncheckAll();\n            }\n            if (this.parent.dataType === 'olap' && this.parent.olapEngineModule &&\n                !this.parent.olapEngineModule.fieldList[fieldName].isHierarchy) {\n                this.updateNodeStates(this.parent.pivotCommon.filterDialog.memberTreeView.getAllCheckedNodes(), fieldName);\n            }\n            this.checkedStateAll(args.action);\n            this.parent.pivotCommon.filterDialog.memberTreeView.nodeChecked = this.nodeStateModified.bind(this);\n        }\n        else {\n            if (this.parent.dataType === 'olap' && this.parent.olapEngineModule &&\n                !this.parent.olapEngineModule.fieldList[fieldName].isHierarchy) {\n                // let st1: number = new Date().getTime();\n                var checkedNodes = this.parent.pivotCommon.filterDialog.memberTreeView.getAllCheckedNodes();\n                // let st2: number = (new Date().getTime() - st1) / 1000;\n                // console.log('getAllCheckedNodes:' + st2);\n                this.updateNodeStates(checkedNodes, fieldName);\n            }\n            var pos = this.parent.pivotCommon.currentTreeItemsPos[target.getAttribute('data-memberId')].index;\n            if (this.parent.pivotCommon.currentTreeItems[pos]) {\n                this.parent.pivotCommon.currentTreeItems[pos].isSelected = args.action === 'check';\n                this.parent.pivotCommon.currentTreeItemsPos[target.getAttribute('data-memberId')].isSelected = args.action === 'check';\n            }\n        }\n        this.parent.pivotCommon.filterDialog.updateCheckedState();\n    };\n    PivotButton.prototype.checkedStateAll = function (state) {\n        var searchItemObj = {};\n        for (var _i = 0, _a = this.parent.pivotCommon.searchTreeItems; _i < _a.length; _i++) {\n            var item = _a[_i];\n            item.isSelected = state === 'check';\n            searchItemObj[item.htmlAttributes['data-memberId']] = item.htmlAttributes['data-memberId'];\n        }\n        for (var _b = 0, _c = this.parent.pivotCommon.currentTreeItems; _b < _c.length; _b++) {\n            var item = _c[_b];\n            if (searchItemObj[item.htmlAttributes['data-memberId']] !== undefined) {\n                item.isSelected = state === 'check';\n                this.parent.pivotCommon.currentTreeItemsPos[item.htmlAttributes['data-memberId']].isSelected = state === 'check';\n            }\n        }\n    };\n    PivotButton.prototype.updateNodeStates = function (checkedNodes, fieldName) {\n        var fieldList = this.parent.pivotCommon.engineModule.fieldList[fieldName];\n        var currentMembers = fieldList.members;\n        var searchMembers = fieldList.currrentMembers;\n        if (fieldList.searchMembers.length > 0) {\n            var members = Object.keys(searchMembers);\n            for (var _i = 0, members_1 = members; _i < members_1.length; _i++) {\n                var member = members_1[_i];\n                if (searchMembers[member]) {\n                    searchMembers[member].isSelected = false;\n                }\n                if (currentMembers[member]) {\n                    currentMembers[member].isSelected = false;\n                    if (this.parent.pivotCommon.filterDialog.memberTreeView.element.querySelector('li[data-memberId=\"' + member + '\"]')) {\n                        var element = this.parent.pivotCommon.filterDialog.memberTreeView.element.querySelector('li[data-memberId=\"' + member + '\"]');\n                        if (element && !element.querySelector('ul')) {\n                            this.parent.pivotCommon.eventBase.updateChildNodeStates(fieldList.filterMembers, fieldName, member, false);\n                        }\n                    }\n                }\n            }\n            for (var _a = 0, checkedNodes_1 = checkedNodes; _a < checkedNodes_1.length; _a++) {\n                var node = checkedNodes_1[_a];\n                if (currentMembers[node]) {\n                    if (this.parent.pivotCommon.filterDialog.memberTreeView.element.querySelector('li[data-memberId=\"' + node + '\"]')) {\n                        var element = this.parent.pivotCommon.filterDialog.memberTreeView.element.querySelector('li[data-memberId=\"' + node + '\"]');\n                        if (element && !element.querySelector('ul')) {\n                            currentMembers[node].isSelected = true;\n                            this.parent.pivotCommon.eventBase.updateChildNodeStates(fieldList.filterMembers, fieldName, node, true);\n                        }\n                    }\n                }\n                if (searchMembers[node]) {\n                    searchMembers[node].isSelected = true;\n                }\n            }\n        }\n        else {\n            var members = Object.keys(currentMembers);\n            for (var _b = 0, members_2 = members; _b < members_2.length; _b++) {\n                var member = members_2[_b];\n                if (currentMembers[member].isSelected) {\n                    currentMembers[member].isSelected = false;\n                }\n            }\n            for (var _c = 0, checkedNodes_2 = checkedNodes; _c < checkedNodes_2.length; _c++) {\n                var node = checkedNodes_2[_c];\n                if (currentMembers[node]) {\n                    currentMembers[node].isSelected = true;\n                    this.parent.pivotCommon.eventBase.updateChildNodeStates(fieldList.filterMembers, fieldName, node, true);\n                }\n            }\n        }\n    };\n    PivotButton.prototype.updateFilterState = function (fieldName) {\n        var _this = this;\n        var isNodeUnChecked = false;\n        var filterItem = { items: [], name: fieldName, type: 'Include' };\n        var engineModule = this.parent.dataType === 'olap' ? this.parent.olapEngineModule : this.parent.engineModule;\n        if (this.parent.dataType === 'olap' && engineModule &&\n            !engineModule.fieldList[fieldName].isHierarchy) {\n            var cMembers = engineModule.fieldList[fieldName].members;\n            var sMembers = engineModule.fieldList[fieldName].currrentMembers;\n            filterItem.items = this.parent.pivotCommon.filterDialog.memberTreeView.getAllCheckedNodes();\n            filterItem.levelCount = engineModule.fieldList[fieldName].levelCount;\n            isNodeUnChecked = (filterItem.items.length ===\n                this.parent.pivotCommon.filterDialog.memberTreeView.fields.dataSource.length ?\n                false : true);\n            if (engineModule.fieldList[fieldName].searchMembers.length > 0 && !isNodeUnChecked) {\n                var cNodeLength = Object.keys(cMembers).length;\n                var sNodeLength = Object.keys(sMembers).length;\n                isNodeUnChecked = cNodeLength === sNodeLength && cNodeLength === filterItem.items.length ? false : true;\n            }\n            var filterItems = filterItem.items;\n            for (var _i = 0, filterItems_3 = filterItems; _i < filterItems_3.length; _i++) {\n                var node = filterItems_3[_i];\n                if (engineModule.fieldList[fieldName].searchMembers.length > 0 && sMembers[node]) {\n                    sMembers[node].isSelected = true;\n                }\n                else if (cMembers[node]) {\n                    cMembers[node].isSelected = true;\n                }\n            }\n        }\n        else {\n            for (var _a = 0, _b = this.parent.pivotCommon.searchTreeItems; _a < _b.length; _a++) {\n                var item = _b[_a];\n                if (item.isSelected) {\n                    if (this.parent.pivotCommon.isDateField) {\n                        filterItem.items.push(this.parent.dataSourceSettings.mode === 'Server' ? item.actualText : item.name);\n                    }\n                    else {\n                        filterItem.items.push(item.htmlAttributes['data-memberId']);\n                    }\n                }\n            }\n            isNodeUnChecked = (filterItem.items.length === this.parent.pivotCommon.currentTreeItems.length ?\n                false : true);\n        }\n        if (this.parent.dataType === 'olap') {\n            this.removeDataSourceSettings(fieldName);\n        }\n        if (this.parent.allowDeferLayoutUpdate) {\n            engineModule.fieldList[filterItem.name].filterType = filterItem.type.toLowerCase();\n            engineModule.fieldList[filterItem.name].filter = [];\n            for (var i = 0; i < filterItem.items.length; i++) {\n                engineModule.fieldList[filterItem.name].filter.push(filterItem.items[i]);\n            }\n        }\n        var filterEventArgs = {\n            filterSettings: filterItem,\n            dataSourceSettings: _base_util__WEBPACK_IMPORTED_MODULE_9__.PivotUtil.getClonedDataSourceSettings(this.parent.dataSourceSettings),\n            cancel: false\n        };\n        var control = this.parent.getModuleName() === 'pivotfieldlist' &&\n            this.parent.isPopupView ? this.parent.pivotGridModule : this.parent;\n        control.trigger(_common_base_constant__WEBPACK_IMPORTED_MODULE_3__.memberFiltering, filterEventArgs, function (observedArgs) {\n            filterItem = observedArgs.filterSettings;\n            if (!observedArgs.cancel) {\n                var filterObject = _base_util__WEBPACK_IMPORTED_MODULE_9__.PivotUtil.getFilterItemByName(fieldName, _this.parent.dataSourceSettings.filterSettings);\n                if (filterObject) {\n                    for (var i = 0; i < _this.parent.dataSourceSettings.filterSettings.length; i++) {\n                        if (_this.parent.dataSourceSettings.filterSettings[i].name === fieldName) {\n                            _this.parent.dataSourceSettings.filterSettings.splice(i, 1);\n                            break;\n                        }\n                    }\n                }\n                _this.parent.dataSourceSettings.filterSettings.push(filterItem);\n            }\n            _this.parent.pivotCommon.filterDialog.dialogPopUp.close();\n            if (!observedArgs.cancel) {\n                _this.refreshPivotButtonState(fieldName, isNodeUnChecked);\n                if (!isNodeUnChecked) {\n                    _this.removeDataSourceSettings(fieldName);\n                    filterItem = {};\n                }\n                _this.parent.lastFilterInfo = filterItem;\n                var actionInfo = {\n                    filterInfo: _this.parent.lastFilterInfo\n                };\n                _this.parent.actionObj.actionInfo = actionInfo;\n                _this.updateDataSource(true);\n                var thisObj = _this;\n                //setTimeout(() => {\n                if (thisObj.parent instanceof _pivotfieldlist_base_field_list__WEBPACK_IMPORTED_MODULE_1__.PivotFieldList) {\n                    thisObj.axisField.render();\n                }\n                //});\n            }\n            var pivotButtons = [].slice.call(_this.parentElement.querySelectorAll('.e-pivot-button'));\n            for (var _i = 0, pivotButtons_1 = pivotButtons; _i < pivotButtons_1.length; _i++) {\n                var item = pivotButtons_1[_i];\n                if (item.getAttribute('data-uid') === fieldName) {\n                    item.focus();\n                    break;\n                }\n            }\n        });\n    };\n    PivotButton.prototype.refreshPivotButtonState = function (fieldName, isFiltered) {\n        var pivotButtons = [].slice.call(this.parentElement.querySelectorAll('.e-pivot-button'));\n        var selectedButton;\n        for (var _i = 0, pivotButtons_2 = pivotButtons; _i < pivotButtons_2.length; _i++) {\n            var item = pivotButtons_2[_i];\n            if (item.getAttribute('data-uid') === fieldName) {\n                selectedButton = item.querySelector('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_2__.FILTER_COMMON_CLASS);\n                break;\n            }\n        }\n        if (selectedButton) {\n            if (isFiltered) {\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([selectedButton], _common_base_css_constant__WEBPACK_IMPORTED_MODULE_2__.FILTER_CLASS);\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([selectedButton], _common_base_css_constant__WEBPACK_IMPORTED_MODULE_2__.FILTERED_CLASS);\n            }\n            else {\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([selectedButton], _common_base_css_constant__WEBPACK_IMPORTED_MODULE_2__.FILTERED_CLASS);\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([selectedButton], _common_base_css_constant__WEBPACK_IMPORTED_MODULE_2__.FILTER_CLASS);\n            }\n        }\n    };\n    PivotButton.prototype.removeDataSourceSettings = function (fieldName, selectedField, type) {\n        var filterSettings = this.parent.dataSourceSettings.filterSettings;\n        for (var len = 0, lnt = filterSettings.length; len < lnt; len++) {\n            if (this.parent.dataType === 'olap' && selectedField) {\n                if (!type && filterSettings[len].name === fieldName &&\n                    filterSettings[len].selectedField === selectedField) {\n                    filterSettings.splice(len, 1);\n                    break;\n                }\n                else if (type) {\n                    if (filterSettings[len].type !== type &&\n                        filterSettings[len].name === fieldName) {\n                        filterSettings.splice(len, 1);\n                        lnt--;\n                        len--;\n                    }\n                }\n            }\n            else {\n                if (filterSettings[len].name === fieldName) {\n                    filterSettings.splice(len, 1);\n                    if (this.parent.dataType !== 'olap') {\n                        break;\n                    }\n                    lnt--;\n                    len--;\n                }\n            }\n        }\n    };\n    PivotButton.prototype.updateDropIndicator = function (e) {\n        if (this.parent.isDragging) {\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([].slice.call(this.parentElement.querySelectorAll('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_2__.DROP_INDICATOR_CLASS + '-last')), _common_base_css_constant__WEBPACK_IMPORTED_MODULE_2__.INDICATOR_HOVER_CLASS);\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([].slice.call(this.parentElement.querySelectorAll('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_2__.DROP_INDICATOR_CLASS)), _common_base_css_constant__WEBPACK_IMPORTED_MODULE_2__.INDICATOR_HOVER_CLASS);\n            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(e.target, '.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_2__.DROPPABLE_CLASS)) {\n                var element = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(e.target, '.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_2__.PIVOT_BUTTON_WRAPPER_CLASS);\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([element.querySelector('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_2__.DROP_INDICATOR_CLASS)], _common_base_css_constant__WEBPACK_IMPORTED_MODULE_2__.INDICATOR_HOVER_CLASS);\n            }\n        }\n    };\n    PivotButton.prototype.wireEvent = function (element, axis, isMeasureAvail) {\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(element, 'mouseover', this.updateDropIndicator, this);\n        if (!isMeasureAvail) {\n            if (['filters', 'values'].indexOf(axis) === -1 && element.querySelector('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_2__.PIVOT_BUTTON_CLASS) !== null) {\n                _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(element.querySelector('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_2__.PIVOT_BUTTON_CLASS), 'click', this.updateSorting, this);\n            }\n            if (axis !== 'values' && element.querySelector('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_2__.FILTER_COMMON_CLASS) !== null) {\n                _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(element.querySelector('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_2__.FILTER_COMMON_CLASS), 'click', this.updateFiltering, this);\n            }\n            if (axis === 'values' && element.querySelector('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_2__.AXISFIELD_ICON_CLASS) !== null) {\n                _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(element.querySelector('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_2__.AXISFIELD_ICON_CLASS), 'click', this.createMenuOption, this);\n            }\n        }\n        if (element.querySelector('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_2__.CALC_EDIT) !== null) {\n            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(element.querySelector('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_2__.CALC_EDIT), 'click', this.openCalculatedFieldDialog, this);\n        }\n        if (element.querySelector('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_2__.REMOVE_CLASS) !== null) {\n            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(element.querySelector('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_2__.REMOVE_CLASS), 'click', this.removeButton, this);\n        }\n    };\n    PivotButton.prototype.unWireEvent = function (element, axis, isMeasureAvail) {\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(element, 'mouseover', this.updateDropIndicator);\n        if (!isMeasureAvail) {\n            if (['filters', 'values'].indexOf(axis) === -1 && element.querySelector('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_2__.PIVOT_BUTTON_CLASS) !== null) {\n                _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(element.querySelector('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_2__.PIVOT_BUTTON_CLASS), 'click', this.updateSorting);\n            }\n            if (axis !== 'values' && element.querySelector('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_2__.FILTER_COMMON_CLASS) !== null) {\n                _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(element.querySelector('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_2__.FILTER_COMMON_CLASS), 'click', this.updateFiltering);\n            }\n            if (axis === 'values' && element.querySelector('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_2__.AXISFIELD_ICON_CLASS) !== null) {\n                _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(element.querySelector('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_2__.AXISFIELD_ICON_CLASS), 'click', this.createMenuOption);\n            }\n        }\n        if (element.querySelector('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_2__.CALC_EDIT) !== null) {\n            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(element.querySelector('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_2__.CALC_EDIT), 'click', this.openCalculatedFieldDialog);\n        }\n        if (element.querySelector('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_2__.REMOVE_CLASS) !== null) {\n            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(element.querySelector('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_2__.REMOVE_CLASS), 'click', this.removeButton);\n        }\n    };\n    /**\n     *\n     * @returns {void}\n     * @hidden\n     */\n    PivotButton.prototype.addEventListener = function () {\n        this.handlers = {\n            load: this.renderPivotButton\n        };\n        if (this.parent.isDestroyed) {\n            return;\n        }\n        this.parent.on(_common_base_constant__WEBPACK_IMPORTED_MODULE_3__.pivotButtonUpdate, this.handlers.load, this);\n    };\n    /**\n     *\n     * @returns {void}\n     * @hidden\n     */\n    PivotButton.prototype.removeEventListener = function () {\n        if (this.parent.isDestroyed) {\n            return;\n        }\n        this.parent.off(_common_base_constant__WEBPACK_IMPORTED_MODULE_3__.pivotButtonUpdate, this.handlers.load);\n    };\n    /**\n     * To destroy the pivot button event listener\n     *\n     * @returns {void}\n     * @hidden\n     */\n    PivotButton.prototype.destroy = function () {\n        if (this.menuOption) {\n            this.menuOption.destroy();\n            this.menuOption = null;\n        }\n        var element = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_2__.GROUP_CHART_VALUE_DROPDOWN_DIV, this.parentElement);\n        var valueFiedDropDownList = element ? (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getInstance)(element, _syncfusion_ej2_dropdowns__WEBPACK_IMPORTED_MODULE_8__.DropDownList) : null;\n        if (valueFiedDropDownList && !valueFiedDropDownList.isDestroyed) {\n            valueFiedDropDownList.destroy();\n        }\n        element = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_2__.GROUP_CHART_COLUMN_DROPDOWN_DIV, this.parentElement);\n        var columnFieldDropDownList = element ? (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getInstance)(element, _syncfusion_ej2_dropdowns__WEBPACK_IMPORTED_MODULE_8__.DropDownList) : null;\n        if (columnFieldDropDownList && !columnFieldDropDownList.isDestroyed) {\n            columnFieldDropDownList.destroy();\n            columnFieldDropDownList = null;\n        }\n        if (this.draggable && !this.draggable.isDestroyed) {\n            this.draggable.destroy();\n            this.draggable = null;\n        }\n        if (this.axisField) {\n            this.axisField = null;\n        }\n        this.removeEventListener();\n        this.isDestroyed = true;\n    };\n    return PivotButton;\n}());\n\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-pivotview/src/common/actions/pivot-button.js?");

/***/ })

}]);