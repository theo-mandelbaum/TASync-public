"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkej2_vue_samples"] = self["webpackChunkej2_vue_samples"] || []).push([["chunk-vendors-node_modules_syncfusion_ej2-charts_src_chart_series_spline-r"],{

/***/ "./node_modules/@syncfusion/ej2-charts/src/chart/series/spline-range-area-series.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-charts/src/chart/series/spline-range-area-series.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SplineRangeAreaSeries: () => (/* binding */ SplineRangeAreaSeries)\n/* harmony export */ });\n/* harmony import */ var _common_utils_helper__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../common/utils/helper */ \"./node_modules/@syncfusion/ej2-charts/src/common/utils/helper.js\");\n/* harmony import */ var _syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @syncfusion/ej2-svg-base */ \"./node_modules/@syncfusion/ej2-svg-base/index.js\");\n/* harmony import */ var _spline_base__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./spline-base */ \"./node_modules/@syncfusion/ej2-charts/src/chart/series/spline-base.js\");\nvar __extends = (undefined && undefined.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n\n\n\n/**\n * The `SplineRangeAreaSeries` module is used to render the spline range area series.\n */\nvar SplineRangeAreaSeries = /** @class */ (function (_super) {\n    __extends(SplineRangeAreaSeries, _super);\n    function SplineRangeAreaSeries() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.borderDirection = '';\n        return _this;\n    }\n    /**\n     * Render SplineRangeArea Series.\n     *\n     * @param {Series} series - The series to be rendered.\n     * @param {Axis} xAxis - The x-axis of the chart.\n     * @param {Axis} yAxis - The y-axis of the chart.\n     * @param {boolean} inverted - Specifies whether the chart is inverted.\n     * @param {boolean} pointAnimate - Specifies whether the point has to be animated or not.\n     * @param {boolean} pointUpdate - Specifies whether the point has to be updated or not.\n     * @returns {void}\n     * @private\n     */\n    SplineRangeAreaSeries.prototype.render = function (series, xAxis, yAxis, inverted, pointAnimate, pointUpdate) {\n        var point;\n        var direction = '';\n        var closed = undefined;\n        var firstPoint = null;\n        var pt;\n        var betweenPt1;\n        var betweenPt2;\n        var highControlPt1;\n        var highControlPt2;\n        var realPoint = [];\n        var points = [];\n        var Index = 0;\n        var borderWidth = series.border.width ? series.border.width : 0;\n        var borderColor = series.border.color ? series.border.color : series.interior;\n        var lastPoint = '';\n        realPoint = this.filterEmptyPoints(series);\n        for (var i = 0; i < realPoint.length; i++) {\n            point = realPoint[i];\n            if (point.x === null || point.x === '') {\n                continue;\n            }\n            else {\n                point.index = Index;\n                Index++;\n                points.push(point);\n            }\n        }\n        var previous;\n        var next;\n        var visiblePoint = this.enableComplexProperty(series);\n        var length = visiblePoint.length;\n        for (var i = 0; i < length; i++) {\n            point = visiblePoint[i];\n            point.regions = [];\n            point.symbolLocations = [];\n            next = this.getNextIndex(points, point.index - 1, series);\n            previous = this.getPreviousIndex(points, point.index - 1, series);\n            var lowPoint = Math.min(point.low, point.high);\n            var highPoint = Math.max(point.low, point.high);\n            if (yAxis.isAxisInverse) {\n                var temp = lowPoint;\n                lowPoint = highPoint;\n                highPoint = temp;\n            }\n            var lowPtCoordinate = (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_0__.getPoint)(point.xValue, lowPoint, xAxis, yAxis, inverted);\n            var highPtCoordinate = (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_0__.getPoint)(point.xValue, highPoint, xAxis, yAxis, inverted);\n            point.symbolLocations.push(highPtCoordinate);\n            point.symbolLocations.push(lowPtCoordinate);\n            var rect1 = new _syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_1__.Rect(Math.min(lowPtCoordinate.x, highPtCoordinate.x), Math.min(lowPtCoordinate.y, highPtCoordinate.y), Math.max(Math.abs(highPtCoordinate.x - lowPtCoordinate.x), series.marker.width), Math.max(Math.abs(highPtCoordinate.y - lowPtCoordinate.y), series.marker.width));\n            if (!inverted) {\n                rect1.x -= series.marker.width / 2;\n            }\n            else {\n                rect1.y -= series.marker.width / 2;\n            }\n            point.regions.push(rect1);\n            //Path to connect the high points\n            if (point.visible &&\n                (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_0__.withInRange)(visiblePoint[previous], point, visiblePoint[next], series)) {\n                if (firstPoint) {\n                    highControlPt1 = series.drawPoints[previous].controlPoint1;\n                    highControlPt2 = series.drawPoints[previous].controlPoint2;\n                    pt = (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_0__.getPoint)(point.xValue, point.high > point.low ? point.high : point.low, xAxis, yAxis, inverted);\n                    betweenPt1 = (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_0__.getPoint)(highControlPt1.x, highControlPt1.y, xAxis, yAxis, inverted);\n                    betweenPt2 = (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_0__.getPoint)(highControlPt2.x, highControlPt2.y, xAxis, yAxis, inverted);\n                    direction = direction.concat('C ' + betweenPt1.x + ' '\n                        + betweenPt1.y + ' ' + betweenPt2.x + ' ' + betweenPt2.y + ' ' + pt.x + ' ' + pt.y + ' ');\n                    this.borderDirection += 'C ' + betweenPt1.x + ' '\n                        + betweenPt1.y + ' ' + betweenPt2.x + ' ' + betweenPt2.y + ' ' + pt.x + ' ' + pt.y + ' ';\n                }\n                else {\n                    if (yAxis.isAxisInverse) {\n                        direction = direction.concat('M ' + (highPtCoordinate.x) + ' ' + (highPtCoordinate.y) + ' ' + 'L ' + (lowPtCoordinate.x) + ' ' + (lowPtCoordinate.y) + ' ');\n                        this.borderDirection += 'M ' + (highPtCoordinate.x) + ' ' + (highPtCoordinate.y) + ' ';\n                        lastPoint = 'L ' + (lowPtCoordinate.x) + ' ' + (lowPtCoordinate.y);\n                    }\n                    else {\n                        direction = direction.concat('M ' + (lowPtCoordinate.x) + ' ' + (lowPtCoordinate.y) + ' ' + 'L ' + (highPtCoordinate.x) + ' ' + (highPtCoordinate.y) + ' ');\n                        this.borderDirection += 'M ' + (highPtCoordinate.x) + ' ' + (highPtCoordinate.y) + ' ';\n                        lastPoint = 'L ' + (lowPtCoordinate.x) + ' ' + (lowPtCoordinate.y);\n                    }\n                    closed = false;\n                }\n                if ((i + 1 < visiblePoint.length && !visiblePoint[i + 1].visible)\n                    || i === visiblePoint.length - 1) {\n                    // Path to connect the low points\n                    direction = this.closeSplineRangeAreaPath(visiblePoint, point, series, direction, i, xAxis, yAxis, inverted);\n                    this.borderDirection += lastPoint;\n                    lastPoint = '';\n                    direction = direction.concat(' ' + 'Z');\n                    closed = true;\n                }\n                firstPoint = point;\n            }\n            else {\n                if (closed === false && i !== 0) {\n                    direction = this.closeSplineRangeAreaPath(visiblePoint, point, series, direction, i, xAxis, yAxis, inverted);\n                    closed = true;\n                }\n                firstPoint = null;\n                point.symbolLocations = [];\n            }\n        }\n        var name1 = series.category === 'Indicator' ? series.chart.element.id + '_Indicator_' + series.index + '_' + series.name :\n            series.chart.element.id + '_Series_' + series.index;\n        var options = new _syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_1__.PathOption(name1, series.interior, 0, 'transparent', series.opacity, series.dashArray, direction);\n        this[pointAnimate ? 'addPath' : 'appendLinePath'](options, series, '');\n        /**\n         * To draw border for the path directions of area\n         */\n        if (series.border.width !== 0) {\n            this[pointAnimate ? 'addPath' : 'appendLinePath'](new _syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_1__.PathOption(series.chart.element.id + '_Series_border_' + series.index, 'transparent', borderWidth, borderColor, 1, series.border.dashArray, this.borderDirection), series, '');\n            this.borderDirection = '';\n        }\n        if (!pointUpdate) {\n            this.renderMarker(series);\n        }\n    };\n    /**\n     * path for rendering the low points in SplineRangeArea\n     *\n     * @returns {void}.\n     * @private\n     */\n    SplineRangeAreaSeries.prototype.closeSplineRangeAreaPath = function (visiblePoint, point, series, direction, i, xAxis, yAxis, inverted) {\n        var firstPoint = null;\n        var pt;\n        var betweenPt1;\n        var betweenPt2;\n        var lowControlPt1;\n        var lowControlPt2;\n        for (var j = i; j > 0; j--) {\n            if (visiblePoint[j].visible) {\n                point = visiblePoint[j];\n                var low = Math.min(point.low, point.high);\n                var high = Math.max(point.low, point.high);\n                if (yAxis.isAxisInverse) {\n                    var temp = low;\n                    low = high;\n                    high = temp;\n                }\n                var lowPtCoordinate = (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_0__.getPoint)(point.xValue, low, xAxis, yAxis, inverted);\n                var highPtCoordinate = (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_0__.getPoint)(point.xValue, high, xAxis, yAxis, inverted);\n                if (firstPoint) {\n                    lowControlPt1 = series.lowDrawPoints[j].controlPoint1;\n                    lowControlPt2 = series.lowDrawPoints[j].controlPoint2;\n                    pt = (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_0__.getPoint)(point.xValue, point.low < point.high ? point.low : point.high, xAxis, yAxis, inverted);\n                    betweenPt1 = (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_0__.getPoint)(lowControlPt1.x, lowControlPt1.y, xAxis, yAxis, inverted);\n                    betweenPt2 = (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_0__.getPoint)(lowControlPt2.x, lowControlPt2.y, xAxis, yAxis, inverted);\n                    if (!isNaN(betweenPt1.y) || !isNaN(betweenPt2.y)) {\n                        direction = direction.concat('C ' + betweenPt2.x + ' '\n                            + betweenPt2.y + ' ' + betweenPt1.x + ' ' + betweenPt1.y + ' ' + pt.x + ' ' + pt.y + ' ');\n                        this.borderDirection += 'C ' + betweenPt2.x + ' '\n                            + betweenPt2.y + ' ' + betweenPt1.x + ' ' + betweenPt1.y + ' ' + pt.x + ' ' + pt.y + ' ';\n                    }\n                }\n                else {\n                    if (yAxis.isAxisInverse) {\n                        direction = direction.concat('L ' + (highPtCoordinate.x) + ' ' + (highPtCoordinate.y) + ' ');\n                        this.borderDirection += 'M ' + (highPtCoordinate.x) + ' ' + (highPtCoordinate.y) + ' ';\n                    }\n                    else {\n                        direction = direction.concat('L ' + (lowPtCoordinate.x) + ' ' + (lowPtCoordinate.y) + ' ');\n                        this.borderDirection += 'M ' + (lowPtCoordinate.x) + ' ' + (lowPtCoordinate.y) + ' ';\n                    }\n                }\n            }\n            else {\n                break;\n            }\n            firstPoint = point;\n        }\n        return direction;\n    };\n    /**\n     * To animate point for spline range area series.\n     *\n     * @param {Series} series - Specifies the series.\n     * @param {number} point - Specifies the point.\n     * @returns {void}\n     * @private\n     */\n    SplineRangeAreaSeries.prototype.updateDirection = function (series, point) {\n        this.render(series, series.xAxis, series.yAxis, series.chart.requireInvertedAxis, false, true);\n        var _loop_1 = function (i) {\n            if (series.marker && series.marker.visible) {\n                series.points[i].symbolLocations.map(function (location, index) {\n                    series.chart.markerRender.renderMarker(series, series.points[point[i]], location, index, true);\n                });\n            }\n            if (series.marker.dataLabel.visible && series.chart.dataLabelModule) {\n                series.chart.dataLabelModule.commonId = series.chart.element.id + '_Series_' + series.index + '_Point_';\n                series.chart.dataLabelModule.renderDataLabel(series, series.points[point[i]], null, series.marker.dataLabel);\n            }\n        };\n        for (var i = 0; i < point.length; i++) {\n            _loop_1(i);\n        }\n    };\n    /**\n     * Adds a area path to equate the start and end paths.\n     *\n     * @param {PathOption} options - The options for the path.\n     * @param {Series} series - The series to which the path belongs.\n     * @param {string} clipRect - The clip rectangle for the path.\n     * @returns {void}\n     * @private\n     */\n    SplineRangeAreaSeries.prototype.addPath = function (options, series, clipRect) {\n        var points = this.appendPathElement(options, series, clipRect);\n        if (points.previousDirection !== '' && options.d !== '') {\n            var startPathCommands = points.previousDirection.match(/[MLHVCSQTAZ][^MLHVCSQTAZ]*/g);\n            var endPathCommands = (options.d).match(/[MLHVCSQTAZ][^MLHVCSQTAZ]*/g);\n            var maxLength = Math.max(startPathCommands.length, endPathCommands.length);\n            var minLength = Math.min(startPathCommands.length, endPathCommands.length);\n            if (startPathCommands.length < endPathCommands.length) {\n                for (var i = startPathCommands.length; i < endPathCommands.length; i++) {\n                    if (endPathCommands.length !== startPathCommands.length) {\n                        startPathCommands.splice(((startPathCommands.length) / 2) + 1, 0, 'C ' + ((startPathCommands[(startPathCommands.length - 1) / 2].split(' ')).slice(5, 7)).join(' ') + ' ' + ((startPathCommands[(startPathCommands.length - 1) / 2].split(' ')).slice(5, 7)).join(' ') + ' ' + ((startPathCommands[(startPathCommands.length - 1) / 2].split(' ')).slice(5, 7)).join(' '));\n                        startPathCommands.splice((startPathCommands.length / 2) + 2, 0, 'C ' + (startPathCommands[(startPathCommands.length / 2) + 1].split(' ')).slice(1, 3).join(' ') + ' ' + (startPathCommands[(startPathCommands.length / 2) + 1].split(' ')).slice(1, 3).join(' ') + ' ' + (startPathCommands[(startPathCommands.length / 2) + 1].split(' ')).slice(1, 3).join(' '));\n                    }\n                }\n                (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_0__.animateAddPoints)(points.element, options.d, series.chart.redraw, startPathCommands.join(' '), this.chart.duration);\n            }\n            else if (startPathCommands.length > endPathCommands.length) {\n                for (var i = minLength; i < maxLength; i++) {\n                    if (endPathCommands.length !== startPathCommands.length) {\n                        endPathCommands.splice(2, 0, 'C ' + endPathCommands[1].split(' ').slice(-3).join(' ') + endPathCommands[1].split(' ').slice(-3).join(' ') + endPathCommands[1].split(' ').slice(-3).join(' '));\n                        endPathCommands.splice(endPathCommands.length - 1, 0, 'C ' + endPathCommands[endPathCommands.length - 2].split(' ').slice(-4).join(' ') + endPathCommands[endPathCommands.length - 2].split(' ').slice(-4).join(' ') + endPathCommands[endPathCommands.length - 2].split(' ').slice(-4).join(' '));\n                    }\n                }\n                (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_0__.animateAddPoints)(points.element, endPathCommands.join(''), series.chart.redraw, points.previousDirection, this.chart.duration, options.d);\n            }\n            else {\n                (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_0__.animateAddPoints)(points.element, options.d, series.chart.redraw, points.previousDirection, this.chart.duration);\n            }\n        }\n    };\n    /**\n     * Animates the series.\n     *\n     * @param  {Series} series - Defines the series to animate.\n     * @returns {void}\n     * @private\n     */\n    SplineRangeAreaSeries.prototype.doAnimation = function (series) {\n        var option = series.animation;\n        this.doLinearAnimation(series, option);\n    };\n    /**\n     * Get module name.\n     *\n     * @returns {string} - Returns the module name.\n     */\n    SplineRangeAreaSeries.prototype.getModuleName = function () {\n        /**\n         * Returns the module name of the series.\n         */\n        return 'SplineRangeAreaSeries';\n    };\n    /**\n     * To destroy the line series.\n     *\n     * @returns {void}\n     * @private\n     */\n    SplineRangeAreaSeries.prototype.destroy = function () {\n        /**\n         * Destroys range area series.\n         */\n    };\n    return SplineRangeAreaSeries;\n}(_spline_base__WEBPACK_IMPORTED_MODULE_2__.SplineBase));\n\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-charts/src/chart/series/spline-range-area-series.js?");

/***/ }),

/***/ "./node_modules/@syncfusion/ej2-charts/src/chart/series/spline-series.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-charts/src/chart/series/spline-series.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SplineSeries: () => (/* binding */ SplineSeries)\n/* harmony export */ });\n/* harmony import */ var _common_utils_helper__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../common/utils/helper */ \"./node_modules/@syncfusion/ej2-charts/src/common/utils/helper.js\");\n/* harmony import */ var _syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @syncfusion/ej2-svg-base */ \"./node_modules/@syncfusion/ej2-svg-base/index.js\");\n/* harmony import */ var _spline_base__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./spline-base */ \"./node_modules/@syncfusion/ej2-charts/src/chart/series/spline-base.js\");\nvar __extends = (undefined && undefined.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n\n\n\n/**\n * The `SplineSeries` module is used to render the spline series.\n */\nvar SplineSeries = /** @class */ (function (_super) {\n    __extends(SplineSeries, _super);\n    function SplineSeries() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * Render the spline series.\n     *\n     * @param {Series} series - The series to be rendered.\n     * @param {Axis} xAxis - The x-axis of the chart.\n     * @param {Axis} yAxis - The y-axis of the chart.\n     * @param {boolean} isInverted - Specifies whether the chart is inverted.\n     * @param {boolean} pointAnimate - Specifies whether the chart is inverted.\n     * @param {boolean} pointUpdate - Specifies whether the chart is inverted.\n     * @returns {void}\n     * @private\n     */\n    SplineSeries.prototype.render = function (series, xAxis, yAxis, isInverted, pointAnimate, pointUpdate) {\n        var firstPoint = null;\n        var direction = '';\n        var startPoint = 'M';\n        var points = [];\n        var tempPoints = series.category === 'TrendLine' ? series.points : this.enableComplexProperty(series);\n        points = this.filterEmptyPoints(series, tempPoints);\n        var previous;\n        var getCoordinate = series.chart.chartAreaType === 'PolarRadar' ? _common_utils_helper__WEBPACK_IMPORTED_MODULE_0__.TransformToVisible : _common_utils_helper__WEBPACK_IMPORTED_MODULE_0__.getPoint;\n        for (var _i = 0, points_1 = points; _i < points_1.length; _i++) {\n            var point = points_1[_i];\n            if (point.index === 1) {\n                direction = '';\n            }\n            previous = this.getPreviousIndex(points, point.index - 1, series);\n            point.symbolLocations = [];\n            point.regions = [];\n            if (point.visible) {\n                if ((0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_0__.withInRange)(points[previous], point, points[this.getNextIndex(points, point.index - 1, series)], series)) {\n                    if (firstPoint !== null) {\n                        direction = this.getSplineDirection(series.drawPoints[previous], firstPoint, point, xAxis, yAxis, isInverted, series, startPoint, getCoordinate, direction);\n                        startPoint = 'L';\n                    }\n                    this.storePointLocation(point, series, isInverted, getCoordinate);\n                    if (direction === '' && points.length === 1) {\n                        direction = 'M ' + point.symbolLocations[0].x + ' ' + point.symbolLocations[0].y;\n                    }\n                    if (firstPoint === null && direction !== '' && (point.index === points.length - 1 || (points[point.index + 1] && !points[point.index + 1].visible))) {\n                        direction += 'M ' + point.symbolLocations[0].x + ' ' + point.symbolLocations[0].y + ' ';\n                    }\n                }\n                firstPoint = point;\n            }\n            else {\n                startPoint = 'M';\n                firstPoint = null;\n                point.symbolLocations = [];\n            }\n        }\n        if ((points.length > 0 && series.drawPoints.length > 0) && series.chart.chartAreaType === 'PolarRadar' && series.isClosed) {\n            var connectPoints = this.getFirstLastVisiblePoint(points);\n            direction = this.getSplineDirection(series.drawPoints[series.drawPoints.length - 1], connectPoints.last, { xValue: connectPoints.first.xValue, yValue: connectPoints.first.yValue }, xAxis, yAxis, isInverted, series, startPoint, getCoordinate, direction);\n            startPoint = 'L';\n        }\n        var name = series.category === 'TrendLine' ? series.chart.element.id + '_Series_' + series.sourceIndex + '_TrendLine_' + series.index :\n            series.chart.element.id + '_Series_' + series.index;\n        var options = new _syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_1__.PathOption(name, 'transparent', series.width, series.interior, series.opacity, series.dashArray, direction);\n        this[pointAnimate ? 'addPath' : 'appendLinePath'](options, series, '');\n        if (!pointUpdate) {\n            this.renderMarker(series);\n        }\n    };\n    /**\n     * To find the direct of spline using points.\n     *\n     * @param {ControlPoints} data data\n     * @param {Points} firstPoint firstPoint\n     * @param {Points} point point\n     * @param {Axis} xAxis xAxis\n     * @param {Axis} yAxis yAxis\n     * @param {boolean} isInverted isInverted\n     * @param {Series} series series\n     * @param {string} startPoint startPoint\n     * @param {Function} getCoordinate getCoordinate\n     * @param {string} direction direction\n     * @returns {string} - Returns the direct of spline using points.\n     * @private\n     */\n    SplineSeries.prototype.getSplineDirection = function (data, firstPoint, point, xAxis, yAxis, isInverted, series, startPoint, getCoordinate, direction) {\n        var controlPoint1 = data.controlPoint1;\n        var controlPoint2 = data.controlPoint2;\n        var pt1 = getCoordinate(firstPoint.xValue, firstPoint.yValue, xAxis, yAxis, isInverted, series);\n        var pt2 = getCoordinate(point.xValue, point.yValue, xAxis, yAxis, isInverted, series);\n        var bpt1 = getCoordinate(controlPoint1.x, controlPoint1.y, xAxis, yAxis, isInverted, series);\n        var bpt2 = getCoordinate(controlPoint2.x, controlPoint2.y, xAxis, yAxis, isInverted, series);\n        return direction.concat((startPoint + ' ' + (pt1.x) + ' ' + (pt1.y) + ' ' + 'C' + ' ' + (bpt1.x) + ' '\n            + (bpt1.y) + ' ' + (bpt2.x) + ' ' + (bpt2.y) + ' ' + (pt2.x) + ' ' + (pt2.y) + ' '));\n    };\n    SplineSeries.prototype.updateDirection = function (series, point) {\n        this.render(series, series.xAxis, series.yAxis, series.chart.requireInvertedAxis, false, true);\n        for (var i = 0; i < point.length; i++) {\n            if (series.marker && series.marker.visible) {\n                series.chart.markerRender.renderMarker(series, series.points[point[i]], series.points[point[i]].symbolLocations[0], null, true);\n            }\n            if (series.marker.dataLabel.visible && series.chart.dataLabelModule) {\n                series.chart.dataLabelModule.commonId = series.chart.element.id + '_Series_' + series.index + '_Point_';\n                series.chart.dataLabelModule.renderDataLabel(series, series.points[point[i]], null, series.marker.dataLabel);\n            }\n        }\n    };\n    /**\n     * Adds a area path to equate the start and end paths.\n     *\n     * @param {PathOption} options - The options for the path.\n     * @param {Series} series - The series to which the path belongs.\n     * @param {string} clipRect - The clip rectangle for the path.\n     * @param {ChartLocation[]} [firstSymbol] - The location of the first symbol.\n     * @returns {void}\n     * @private\n     */\n    SplineSeries.prototype.addPath = function (options, series, clipRect) {\n        var points = this.appendPathElement(options, series, clipRect);\n        if (points.previousDirection !== '' && options.d !== '') {\n            var startPathCommands = points.previousDirection.match(/[MLHVCSQTAZ][^MLHVCSQTAZ]*/g);\n            var endPathCommands = (options.d).match(/[MLHVCSQTAZ][^MLHVCSQTAZ]*/g);\n            var maxLength = Math.max(startPathCommands.length, endPathCommands.length);\n            var minLength = Math.min(startPathCommands.length, endPathCommands.length);\n            if (series.removedPointIndex === 0 && startPathCommands.length > endPathCommands.length && startPathCommands[2] && startPathCommands[2].indexOf('M') === 0) {\n                startPathCommands.splice(0, startPathCommands.length - endPathCommands.length);\n                points.previousDirection = startPathCommands.join('');\n            }\n            if (startPathCommands.length < endPathCommands.length) {\n                for (var i = startPathCommands.length; i < endPathCommands.length; i++) {\n                    if (endPathCommands.length !== startPathCommands.length) {\n                        if (endPathCommands.length === startPathCommands.length + 1 && endPathCommands[endPathCommands.length - 1].indexOf('M') === 0) {\n                            startPathCommands.push(endPathCommands[endPathCommands.length - 1]);\n                        }\n                        else if (startPathCommands[startPathCommands.length - 1].indexOf('C') === 0) {\n                            startPathCommands.push('L ' + ((startPathCommands[startPathCommands.length - 1]).split(' ').slice(-3)).join(' '));\n                        }\n                        else if (startPathCommands[startPathCommands.length - 1].indexOf('L') === 0) {\n                            var points_2 = ((startPathCommands[startPathCommands.length - 1])).split(' ').slice(-3);\n                            startPathCommands.push('C ' + points_2.join(' ') + points_2.join(' ') + points_2.join(' '));\n                        }\n                        else {\n                            var points_3 = (startPathCommands[startPathCommands.length - 1]).replace('M', '');\n                            startPathCommands.push('C' + points_3 + points_3 + points_3);\n                        }\n                    }\n                }\n                (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_0__.animateAddPoints)(points.element, options.d, series.chart.redraw, startPathCommands.join(' '), this.chart.duration);\n            }\n            else if (startPathCommands.length > endPathCommands.length) {\n                for (var i = minLength; i < maxLength; i++) {\n                    if (series.removedPointIndex === series.points.length && endPathCommands.length !== startPathCommands.length) {\n                        if (endPathCommands[endPathCommands.length - 1].indexOf('C') === 0) {\n                            endPathCommands.push('L ' + ((endPathCommands[endPathCommands.length - 1]).split(' ').slice(-3)).join(' '));\n                        }\n                        else if (endPathCommands[endPathCommands.length - 1].indexOf('L') === 0) {\n                            var points_4 = ((endPathCommands[endPathCommands.length - 1])).split(' ').slice(-3);\n                            endPathCommands.push('C ' + points_4.join(' ') + points_4.join(' ') + points_4.join(' '));\n                        }\n                        else {\n                            var points_5 = (endPathCommands[endPathCommands.length - 1]).replace('M', '');\n                            endPathCommands.push('C' + points_5 + points_5 + points_5);\n                        }\n                    }\n                    else {\n                        if (endPathCommands.length === 1) {\n                            var points_6 = (endPathCommands[endPathCommands.length - 1]).replace('M', '');\n                            endPathCommands.push('C' + points_6 + points_6 + points_6);\n                        }\n                        else if (endPathCommands.length !== startPathCommands.length) {\n                            endPathCommands.splice(1, 0, 'C ' + endPathCommands[0].split(' ').slice(-3).join(' ') + endPathCommands[0].split(' ').slice(-3).join(' ') + endPathCommands[0].split(' ').slice(-3).join(' '), endPathCommands[0].replace('M', 'L'));\n                        }\n                    }\n                }\n                (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_0__.animateAddPoints)(points.element, endPathCommands.join(''), series.chart.redraw, points.previousDirection, this.chart.duration, options.d);\n            }\n            else {\n                (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_0__.animateAddPoints)(points.element, options.d, series.chart.redraw, points.previousDirection, this.chart.duration);\n            }\n        }\n    };\n    /**\n     * Get module name.\n     *\n     * @returns {string} - Returns the module name.\n     */\n    SplineSeries.prototype.getModuleName = function () {\n        /**\n         * Returns the module name of the series.\n         */\n        return 'SplineSeries';\n    };\n    /**\n     * To destroy the spline.\n     *\n     * @returns {void}\n     * @private\n     */\n    SplineSeries.prototype.destroy = function () {\n        /**\n         * Destroy method calling here.\n         */\n    };\n    return SplineSeries;\n}(_spline_base__WEBPACK_IMPORTED_MODULE_2__.SplineBase));\n\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-charts/src/chart/series/spline-series.js?");

/***/ })

}]);