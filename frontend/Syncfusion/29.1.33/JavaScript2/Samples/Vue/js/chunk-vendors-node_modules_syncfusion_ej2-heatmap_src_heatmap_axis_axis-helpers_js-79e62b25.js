"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkej2_vue_samples"] = self["webpackChunkej2_vue_samples"] || []).push([["chunk-vendors-node_modules_syncfusion_ej2-heatmap_src_heatmap_axis_axis-helpers_js-79e62b25"],{

/***/ "./node_modules/@syncfusion/ej2-heatmap/src/heatmap/axis/axis-helpers.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-heatmap/src/heatmap/axis/axis-helpers.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AxisHelper: () => (/* binding */ AxisHelper)\n/* harmony export */ });\n/* harmony import */ var _utils_helper__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/helper */ \"./node_modules/@syncfusion/ej2-heatmap/src/heatmap/utils/helper.js\");\n/* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @syncfusion/ej2-base */ \"./node_modules/@syncfusion/ej2-base/index.js\");\n\n\n\nvar AxisHelper = /** @class */ (function () {\n    function AxisHelper(heatMap) {\n        this.heatMap = heatMap;\n        this.padding = 10;\n        this.drawSvgCanvas = new _utils_helper__WEBPACK_IMPORTED_MODULE_0__.DrawSvgCanvas(heatMap);\n    }\n    /**\n     * To render the x and y axis.\n     *\n     * @private\n     */\n    AxisHelper.prototype.renderAxes = function () {\n        this.initialClipRect = this.heatMap.initialClipRect;\n        var heatMap = this.heatMap;\n        var axisElement;\n        var element;\n        if (!heatMap.enableCanvasRendering) {\n            axisElement = this.heatMap.renderer.createGroup({ id: heatMap.element.id + 'AxisCollection' });\n        }\n        var axes = this.heatMap.axisCollections;\n        for (var i = 0, len = axes.length; i < len; i++) {\n            var axis = axes[i];\n            if (axis.orientation === 'Horizontal') {\n                if (!heatMap.enableCanvasRendering) {\n                    element = this.heatMap.renderer.createGroup({ id: heatMap.element.id + 'XAxisGroup' });\n                }\n                this.drawXAxisLine(element, axis);\n                this.drawXAxisTitle(axis, element, axis.rect);\n                this.drawXAxisLabels(axis, element, axis.rect);\n            }\n            else {\n                element = heatMap.renderer.createGroup({ id: heatMap.element.id + 'YAxisGroup' });\n                this.drawYAxisLine(element, axis);\n                this.drawYAxisTitle(axis, element, axis.rect);\n                this.drawYAxisLabels(axis, element, axis.rect);\n            }\n            if (axis.multiLevelLabels.length > 0) {\n                this.drawMultiLevels(element, axis);\n            }\n            if (!heatMap.enableCanvasRendering) {\n                axisElement.appendChild(element);\n            }\n        }\n        if (!heatMap.enableCanvasRendering) {\n            this.heatMap.svgObject.appendChild(axisElement);\n        }\n    };\n    AxisHelper.prototype.drawXAxisLine = function (parent, axis) {\n        var y = this.initialClipRect.y + (!axis.opposedPosition ? this.initialClipRect.height : 0);\n        var line = new _utils_helper__WEBPACK_IMPORTED_MODULE_0__.LineOption(this.heatMap.element.id + '_XAxisLine', new _utils_helper__WEBPACK_IMPORTED_MODULE_0__.Line(this.initialClipRect.x, y, this.initialClipRect.x + this.initialClipRect.width, y), 'transparent', 0);\n        this.drawSvgCanvas.drawLine(line, parent);\n    };\n    AxisHelper.prototype.drawYAxisLine = function (parent, axis) {\n        var x = this.initialClipRect.x + ((!axis.opposedPosition) ? 0 : this.initialClipRect.width);\n        var line = new _utils_helper__WEBPACK_IMPORTED_MODULE_0__.LineOption(this.heatMap.element.id + '_YAxisLine', new _utils_helper__WEBPACK_IMPORTED_MODULE_0__.Line(x, this.initialClipRect.y, x, this.initialClipRect.height + this.initialClipRect.y), 'transparent', 0);\n        this.drawSvgCanvas.drawLine(line, parent);\n    };\n    AxisHelper.prototype.drawXAxisTitle = function (axis, parent, rect) {\n        var titlepadding = (axis.textStyle.size === '0px' ? 0 : 10);\n        var y = rect.y + (!axis.opposedPosition ? (axis.maxLabelSize.height + titlepadding +\n            (0,_utils_helper__WEBPACK_IMPORTED_MODULE_0__.sum)(axis.xAxisMultiLabelHeight)) : -(axis.maxLabelSize.height + titlepadding + (0,_utils_helper__WEBPACK_IMPORTED_MODULE_0__.sum)(axis.xAxisMultiLabelHeight)));\n        if (axis.title.text) {\n            var heatMap = this.heatMap;\n            var title = axis.title;\n            var axisTitleText = this.heatMap.enableHtmlSanitizer ? (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.SanitizeHtmlHelper.sanitize(title.text)) : title.text;\n            var elementSize = (0,_utils_helper__WEBPACK_IMPORTED_MODULE_0__.measureText)(axisTitleText, title.textStyle);\n            var padding = this.padding;\n            var anchor = title.textStyle.textAlignment === 'Near' ? 'start' :\n                title.textStyle.textAlignment === 'Far' ? 'end' : 'middle';\n            padding = axis.opposedPosition ? -(padding + elementSize.height / 4) : (padding + (3 * elementSize.height / 4));\n            var options = new _utils_helper__WEBPACK_IMPORTED_MODULE_0__.TextOption(heatMap.element.id + '_XAxisTitle', new _utils_helper__WEBPACK_IMPORTED_MODULE_0__.TextBasic(rect.x + (0,_utils_helper__WEBPACK_IMPORTED_MODULE_0__.titlePositionX)(rect.width, 0, 0, title.textStyle), y + padding, anchor, axisTitleText), title.textStyle, title.textStyle.color || heatMap.themeStyle.axisTitle);\n            this.drawSvgCanvas.createText(options, parent, axisTitleText);\n        }\n    };\n    AxisHelper.prototype.drawYAxisTitle = function (axis, parent, rect) {\n        if (axis.title.text) {\n            var title = axis.title;\n            var heatMap = this.heatMap;\n            var labelRotation = (axis.opposedPosition) ? 90 : -90;\n            var anchor = title.textStyle.textAlignment === 'Near' ? 'start' :\n                title.textStyle.textAlignment === 'Far' ? 'end' : 'middle';\n            var padding = 10;\n            padding = axis.opposedPosition ? padding : -padding;\n            var titlepadding = (axis.textStyle.size === '0px' ? 0 : padding);\n            var x = rect.x + titlepadding + ((axis.opposedPosition) ? axis.maxLabelSize.width + (0,_utils_helper__WEBPACK_IMPORTED_MODULE_0__.sum)(axis.yAxisMultiLabelHeight) :\n                -(axis.maxLabelSize.width + (0,_utils_helper__WEBPACK_IMPORTED_MODULE_0__.sum)(axis.yAxisMultiLabelHeight)));\n            var y = rect.y + (0,_utils_helper__WEBPACK_IMPORTED_MODULE_0__.titlePositionY)(rect, 0, 0, title.textStyle) + (axis.opposedPosition ? this.padding : -this.padding);\n            var axisTitleText = this.heatMap.enableHtmlSanitizer ? (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.SanitizeHtmlHelper.sanitize(title.text)) : title.text;\n            var options = new _utils_helper__WEBPACK_IMPORTED_MODULE_0__.TextOption(heatMap.element.id + '_YAxisTitle', new _utils_helper__WEBPACK_IMPORTED_MODULE_0__.TextBasic(x, y - this.padding, anchor, axisTitleText, labelRotation, 'rotate(' + labelRotation + ',' + (x) + ',' + (y) + ')', 'auto'), title.textStyle, title.textStyle.color || heatMap.themeStyle.axisTitle);\n            if (!this.heatMap.enableCanvasRendering) {\n                this.drawSvgCanvas.createText(options, parent, axisTitleText);\n            }\n            else {\n                this.drawSvgCanvas.canvasDrawText(options, axisTitleText, x, y);\n            }\n        }\n    };\n    /**\n     * Get the visible labels for both x and y axis\n     *\n     * @private\n     */\n    AxisHelper.prototype.calculateVisibleLabels = function () {\n        var heatmap = this.heatMap;\n        var axis;\n        var axisCollection = heatmap.axisCollections;\n        var data = this.heatMap.dataSourceSettings;\n        var processLabels = !(data && data.isJsonData && data.adaptorType === 'Cell');\n        for (var i = 0, len = axisCollection.length; i < len; i++) {\n            axis = axisCollection[i];\n            if (axis.valueType === 'Numeric' && processLabels) {\n                axis.clearAxisLabel();\n                axis.calculateNumericAxisLabels(this.heatMap);\n            }\n            else if (axis.valueType === 'DateTime' && processLabels) {\n                axis.clearAxisLabel();\n                axis.calculateDateTimeAxisLabel(this.heatMap);\n            }\n            else if (axis.valueType === 'Category') {\n                axis.clearAxisLabel();\n                axis.calculateCategoryAxisLabels();\n            }\n            axis.tooltipLabels = axis.isInversed ? axis.tooltipLabels.reverse() : axis.tooltipLabels;\n        }\n    };\n    /**\n     * Measure the title and labels rendering position for both X and Y axis.\n     *\n     * @param rect\n     * @private\n     */\n    AxisHelper.prototype.measureAxis = function (rect) {\n        var heatmap = this.heatMap;\n        var axis;\n        var axisCollection = heatmap.axisCollections;\n        for (var i = axisCollection.length - 1; i >= 0; i--) {\n            axis = axisCollection[i];\n            var padding = axis.textStyle.size === '0px' ? 0 : this.padding;\n            axis.nearSizes = [];\n            axis.farSizes = [];\n            axis.computeSize(axis, heatmap, rect);\n            if (!axis.opposedPosition) {\n                if (axis.orientation === 'Horizontal') {\n                    rect.height -= ((0,_utils_helper__WEBPACK_IMPORTED_MODULE_0__.sum)(axis.nearSizes) + padding);\n                }\n                else {\n                    rect.x += (0,_utils_helper__WEBPACK_IMPORTED_MODULE_0__.sum)(axis.nearSizes) + padding;\n                    rect.width -= (0,_utils_helper__WEBPACK_IMPORTED_MODULE_0__.sum)(axis.nearSizes) + padding;\n                }\n            }\n            else {\n                if (axis.orientation === 'Horizontal') {\n                    rect.y += (0,_utils_helper__WEBPACK_IMPORTED_MODULE_0__.sum)(axis.farSizes) + padding;\n                    rect.height -= (0,_utils_helper__WEBPACK_IMPORTED_MODULE_0__.sum)(axis.farSizes) + padding;\n                }\n                else {\n                    rect.width -= (0,_utils_helper__WEBPACK_IMPORTED_MODULE_0__.sum)(axis.farSizes) + padding;\n                }\n            }\n        }\n    };\n    /**\n     * Calculate the X and Y axis line position\n     *\n     * @param rect\n     * @private\n     */\n    AxisHelper.prototype.calculateAxisSize = function (rect) {\n        var heatmap = this.heatMap;\n        var axisCollection = heatmap.axisCollections;\n        for (var i = 0, len = axisCollection.length; i < len; i++) {\n            var axis = axisCollection[i];\n            axis.rect = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.extend)({}, rect, null, true);\n            if (axis.orientation === 'Horizontal' && axis.multiLevelLabels.length !== 0) {\n                if (axis.opposedPosition) {\n                    axis.rect.y += (axis.angle === 0 || axis.angle === 180 || axis.angle === 360 ? 0 : this.padding);\n                    this.heatMap.initialClipRect.y += (axis.angle === 0 || axis.angle === 180 || axis.angle === 360 ? 0 : this.padding);\n                }\n                rect.height -= (axis.angle === 0 || axis.angle === 180 || axis.angle === 360 ? 0 : this.padding);\n            }\n            if (axis.orientation === 'Horizontal' && !axis.opposedPosition) {\n                axis.rect.y = rect.y + rect.height;\n                axis.rect.height = 0;\n            }\n            if (axis.orientation === 'Vertical' && axis.opposedPosition) {\n                axis.rect.x = rect.x + rect.width;\n                axis.rect.width = 0;\n            }\n            axis.multiLevelPosition = [];\n            for (var i_1 = 0; i_1 < axis.multiLevelLabels.length; i_1++) {\n                var multiPosition = axis.multiPosition(axis, i_1);\n                axis.multiLevelPosition.push(multiPosition);\n            }\n        }\n    };\n    AxisHelper.prototype.drawXAxisLabels = function (axis, parent, rect) {\n        var heatMap = this.heatMap;\n        var labels = axis.axisLabels;\n        var isLineBreak = false;\n        var borderWidth = this.heatMap.cellSettings.border.width > 5 ? (this.heatMap.cellSettings.border.width / 2) : 0;\n        var interval = (rect.width - borderWidth) / axis.axisLabelSize;\n        var compactInterval = 0;\n        var axisInterval = axis.interval ? axis.interval : 1;\n        var tempintervel = rect.width / (axis.axisLabelSize / axis.axisLabelInterval);\n        var temp = axis.axisLabelInterval;\n        if (tempintervel > 0) {\n            while (tempintervel < parseInt(axis.textStyle.size, 10)) {\n                temp = temp + 1;\n                tempintervel = rect.width / (axis.axisLabelSize / temp);\n            }\n        }\n        else {\n            temp = axis.tooltipLabels.length;\n        }\n        if (axis.axisLabelInterval < temp) {\n            compactInterval = temp;\n            labels = axis.tooltipLabels;\n            axisInterval = temp;\n        }\n        var y;\n        var padding = 10;\n        var lableStrtX = rect.x + (!axis.isInversed ? 0 : rect.width);\n        var labelPadding;\n        var angle = axis.angle;\n        padding = this.padding;\n        var labelElement;\n        var borderElement;\n        if (!heatMap.enableCanvasRendering) {\n            labelElement = this.heatMap.renderer.createGroup({ id: heatMap.element.id + 'XAxisLabels' });\n            borderElement = this.heatMap.renderer.createGroup({ id: heatMap.element.id + 'XAxisLabelBorder' });\n        }\n        if (axis.isInversed && axis.labelIntersectAction === 'MultipleRows') {\n            axis.multipleRow.reverse();\n        }\n        isLineBreak = (0,_utils_helper__WEBPACK_IMPORTED_MODULE_0__.getIsLineBreakLabel)(labels);\n        for (var i = 0, len = labels.length; i < len; i++) {\n            var lableRect = new _utils_helper__WEBPACK_IMPORTED_MODULE_0__.Rect(lableStrtX, rect.y, interval, rect.height);\n            var elementSize = (0,_utils_helper__WEBPACK_IMPORTED_MODULE_0__.measureText)(labels[i], axis.textStyle);\n            var label = (axis.textStyle.textOverflow !== 'Wrap' && !(isLineBreak) && axis.textStyle.textOverflow !== 'Trim' && axis.labelIntersectAction === 'Trim' && (axis.isIntersect || elementSize.width > interval)) ? axis.valueType !== 'DateTime' ||\n                axis.showLabelOn === 'None' ? (0,_utils_helper__WEBPACK_IMPORTED_MODULE_0__.textTrim)(interval * axisInterval, labels[i], axis.textStyle) :\n                (0,_utils_helper__WEBPACK_IMPORTED_MODULE_0__.textTrim)(axis.dateTimeAxisLabelInterval[i] * interval, labels[i], axis.textStyle) : labels[i];\n            label = ((axis.enableTrim || axis.textStyle.textOverflow === 'Trim') && !isLineBreak) ? (0,_utils_helper__WEBPACK_IMPORTED_MODULE_0__.textTrim)((axis.textStyle.textOverflow === 'Trim' ? interval - (axis.border.width / 2) : axis.maxLabelLength), labels[i], axis.textStyle) : label;\n            if (heatMap.enableHtmlSanitizer) {\n                label = _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.SanitizeHtmlHelper.sanitize(label);\n            }\n            var wrappedLabel = label;\n            var wrappedlabels = [];\n            var rotateSize = new _utils_helper__WEBPACK_IMPORTED_MODULE_0__.Size(0, 0);\n            if ((axis.textStyle.textOverflow === 'Wrap' || isLineBreak) && !axis.enableTrim) {\n                wrappedlabels = this.getLabels(wrappedLabel, interval - (axis.border.width / 2), axis, isLineBreak);\n                wrappedLabel = this.getMaxLabel(wrappedlabels, axis);\n            }\n            else {\n                if (isLineBreak && axis.enableTrim) {\n                    wrappedlabels = this.getLabels(wrappedLabel, interval - (axis.border.width / 2), axis, isLineBreak);\n                    wrappedLabel = (0,_utils_helper__WEBPACK_IMPORTED_MODULE_0__.textTrim)(axis.maxLabelLength, wrappedlabels[0], axis.textStyle);\n                    wrappedLabel = (label.indexOf('<br>') !== -1 || label.indexOf('<br/>') !== -1) && wrappedLabel.indexOf('...') === -1 ? wrappedLabel + '...' : wrappedLabel;\n                    wrappedlabels = [];\n                }\n                wrappedlabels.push(wrappedLabel);\n            }\n            elementSize = (0,_utils_helper__WEBPACK_IMPORTED_MODULE_0__.measureText)(wrappedLabel, axis.textStyle);\n            var transform = void 0;\n            labelPadding = (axis.opposedPosition) ? -(padding) : (padding + ((angle % 360) === 0 ? (elementSize.height / 2) : 0));\n            elementSize.width = axis.isInversed ? (elementSize.width > interval ? interval : elementSize.width) : elementSize.width;\n            var x = lableRect.x + ((!axis.isInversed) ?\n                (lableRect.width / 2) - (elementSize.width / 2) : -((lableRect.width / 2) + (elementSize.width / 2)));\n            if (axis.textStyle.textAlignment === 'Near') {\n                x = lableRect.x - ((!axis.isInversed) ? 0 : lableRect.width);\n            }\n            else if (axis.textStyle.textAlignment === 'Far') {\n                x = lableRect.x + ((!axis.isInversed) ?\n                    (lableRect.width - elementSize.width) : -(elementSize.width));\n            }\n            if (axis.labelIntersectAction === 'Trim') {\n                x = (!axis.isInversed) ? (x >= lableRect.x ? x : lableRect.x) : (x > (lableStrtX - interval) ? x : (lableStrtX - interval));\n            }\n            else if (angle % 180 === 0) {\n                x = x < rect.x ? rect.x : x;\n                x = ((x + elementSize.width) > (rect.x + rect.width)) ? (rect.x + rect.width - elementSize.width) : x;\n            }\n            if ((axis.textStyle.textOverflow === 'Wrap' || isLineBreak) && !axis.isInversed) {\n                x = x < lableRect.x ? lableRect.x : x;\n            }\n            if (axis.labelIntersectAction === 'MultipleRows' && axis.textStyle.textOverflow !== 'Wrap' && axis.textStyle.textOverflow !== 'Trim' && axis.labelRotation === 0) {\n                var a = axis.opposedPosition ? -(axis.multipleRow[i].index - 1) :\n                    (axis.multipleRow[i].index - 1);\n                if (axis.multipleRow[i].index > 1) {\n                    y = rect.y + labelPadding + (elementSize.height * a) + (axis.opposedPosition ?\n                        -(((elementSize.height * 0.5) / 2) * axis.multipleRow[i].index) :\n                        (((elementSize.height * 0.5) / 2) * axis.multipleRow[i].index));\n                }\n                else {\n                    y = rect.y + labelPadding + (axis.opposedPosition ? -((elementSize.height * 0.5) / 2) :\n                        ((elementSize.height * 0.5) / 2));\n                }\n            }\n            else {\n                y = rect.y + ((axis.textStyle.textOverflow === 'Wrap' || isLineBreak) && axis.opposedPosition && angle % 360 === 0 ? -(axis.farSizes.length >= 1 ? axis.farSizes[1] : 0) + padding : labelPadding);\n            }\n            this.drawXAxisBorder(axis, borderElement, axis.rect, x, elementSize.width, i);\n            x = (axis.textStyle.textAlignment === 'Center' && wrappedlabels.length > 1) ? x + (elementSize.width / 2) : axis.textStyle.textAlignment === 'Near' ? x + padding / 2 : axis.textStyle.textAlignment === 'Far' ? x - padding / 2 : x;\n            if (angle % 360 !== 0) {\n                angle = (angle > 360) ? angle % 360 : angle;\n                rotateSize = (0,_utils_helper__WEBPACK_IMPORTED_MODULE_0__.rotateTextSize)(axis.textStyle, wrappedlabels, angle);\n                /* eslint-disable max-len */\n                x = lableRect.x + (axis.isInversed ? -(lableRect.width / 2) : (lableRect.width / 2)) + (angle === 90 ? (elementSize.height * ((wrappedlabels.length - 1) / 2)) : angle === 270 ? -(elementSize.height * (wrappedlabels.length - 1) / 2) : 0);\n                /* eslint-disable max-len */\n                y = y + (axis.opposedPosition ? (((axis.textStyle.textOverflow === 'Wrap' || isLineBreak) && !axis.enableTrim ? (((angle % 360) === 180) ? padding : 0) + (rotateSize.height / 2) - (axis.farSizes.length >= 1 ? axis.farSizes[1] : 0) : -(rotateSize.height / 2)) + (axis.border.width / 2)) :\n                    (((angle % 360) === 0) ? 0 : ((angle % 360) === 180) ? (rotateSize.height / 2) - (axis.border.width) + padding : (rotateSize.height / 2) - (axis.border.width)));\n                if (wrappedlabels.length > 1) {\n                    y = y - ((angle > 0 && angle < 80) || (angle > 300 && angle < 360) ? elementSize.height * ((wrappedlabels.length - 1) / 2) : (angle > 120 && angle < 240) && angle !== 180 && wrappedlabels.length > 2 ? -(elementSize.height * ((wrappedlabels.length - 2) / 2)) : 0);\n                    x = x + ((angle > 0 && angle < 70) ? elementSize.height * ((wrappedlabels.length - 1) / 2) : 0);\n                }\n                transform = 'rotate(' + angle + ',' + x + ',' + y + ')';\n            }\n            if (this.heatMap.cellSettings.border.width > 5 && axis.opposedPosition) {\n                y = y - (this.heatMap.cellSettings.border.width / 2);\n            }\n            if (this.heatMap.yAxis.opposedPosition && this.heatMap.cellSettings.border.width > 5) {\n                x = x + (this.heatMap.cellSettings.border.width / 2);\n            }\n            if (this.heatMap.xAxis.isInversed && this.heatMap.cellSettings.border.width > 5) {\n                x = x - (this.heatMap.cellSettings.border.width / 2);\n            }\n            if (elementSize.width >= interval) {\n                x = axis.border.width ? x + (axis.border.width / 2) : x;\n            }\n            x = axis.textStyle.textAlignment === 'Near' ? x + (axis.border.width / 2) : axis.textStyle.textAlignment === 'Far' ?\n                x - (axis.border.width / 2) : x;\n            x = (angle % 360 === 0) && axis.textStyle.textAlignment === 'Center' && elementSize.width > interval ? lableRect.x + ((!axis.isInversed) ?\n                (elementSize.width / 2) : -((elementSize.width / 2))) : x;\n            var options = new _utils_helper__WEBPACK_IMPORTED_MODULE_0__.TextOption(heatMap.element.id + '_XAxis_Label' + i, new _utils_helper__WEBPACK_IMPORTED_MODULE_0__.TextBasic(x, y, (angle % 360 === 0) ? (axis.textStyle.textAlignment === 'Center' && wrappedlabels.length > 1) ? 'middle' : 'start' : 'middle', label, angle, transform), axis.textStyle, axis.textStyle.color || heatMap.themeStyle.axisLabel);\n            /* eslint-disable max-len */\n            options.text = isLineBreak ? wrappedlabels : (0,_utils_helper__WEBPACK_IMPORTED_MODULE_0__.getTitle)(options.text, axis.textStyle, lableRect.width - (axis.border.width / 2));\n            if (angle !== 0 && this.heatMap.enableCanvasRendering) {\n                this.drawSvgCanvas.canvasDrawText(options, null, null, null, wrappedlabels, elementSize.height, true);\n            }\n            else {\n                if (axis.textStyle.textOverflow === 'Wrap' || isLineBreak) {\n                    this.drawSvgCanvas.createWrapText(options, axis.textStyle, labelElement);\n                }\n                else {\n                    this.drawSvgCanvas.createText(options, labelElement, label);\n                }\n            }\n            if (compactInterval === 0) {\n                var labelInterval = (axis.valueType === 'DateTime' && axis.showLabelOn !== 'None') ?\n                    axis.dateTimeAxisLabelInterval[i] : axis.axisLabelInterval;\n                lableStrtX = lableStrtX + (!axis.isInversed ? (labelInterval * interval) :\n                    -(labelInterval * interval));\n            }\n            else {\n                lableStrtX = lableStrtX + (!axis.isInversed ? (compactInterval * interval) : -(compactInterval * interval));\n            }\n            if (wrappedLabel.indexOf('...') !== -1) {\n                var xValue = axis.angle % 360 !== 0 ? x - (rotateSize.width / 2) : (axis.textStyle.textAlignment === 'Center' ? x - (elementSize.width / 2) : x);\n                var yValue = y - (axis.angle % 360 !== 0 ? (rotateSize.height / 2) : elementSize.height);\n                label = labels[i].indexOf('<br>') !== -1 || labels[i].indexOf('<br/>') !== -1 ? labels[i].replace(/<br\\s*\\/?>/g, ' ') : labels[i];\n                this.heatMap.tooltipCollection.push(new _utils_helper__WEBPACK_IMPORTED_MODULE_0__.CanvasTooltip(label, new _utils_helper__WEBPACK_IMPORTED_MODULE_0__.Rect(xValue, yValue, axis.angle % 360 !== 0 ? rotateSize.width : elementSize.width, axis.angle % 360 !== 0 ? rotateSize.height : elementSize.height * wrappedlabels.length)));\n            }\n            if (compactInterval !== 0) {\n                i = i + (compactInterval - 1);\n            }\n        }\n        if (!heatMap.enableCanvasRendering) {\n            parent.appendChild(labelElement);\n            parent.appendChild(borderElement);\n        }\n    };\n    AxisHelper.prototype.getWrappedLabels = function (wrappedLabel, labelInterval, axis) {\n        var wrappedlabels = wrappedLabel.split(/<br\\s*\\/?>/, -1);\n        for (var i = 0; i < wrappedlabels.length; i++) {\n            var label = wrappedlabels[i];\n            wrappedlabels[i] = (0,_utils_helper__WEBPACK_IMPORTED_MODULE_0__.textTrim)(labelInterval, label, axis.textStyle);\n        }\n        return wrappedlabels;\n    };\n    AxisHelper.prototype.getMaxLabel = function (wrappedlabels, axis) {\n        var label = '';\n        var labelWidth = 0;\n        var wrappedlabelSize = new _utils_helper__WEBPACK_IMPORTED_MODULE_0__.Size(0, 0);\n        for (var index = 0; index < wrappedlabels.length; index++) {\n            wrappedlabelSize = (0,_utils_helper__WEBPACK_IMPORTED_MODULE_0__.measureText)(wrappedlabels[index], axis.textStyle);\n            if (wrappedlabelSize.width > labelWidth) {\n                labelWidth = wrappedlabelSize.width;\n                label = wrappedlabels[index];\n            }\n        }\n        return label;\n    };\n    AxisHelper.prototype.getLabels = function (label, labelInterval, axis, isLineBreak) {\n        var wrappedlabels = [];\n        if (isLineBreak) {\n            wrappedlabels = this.getWrappedLabels(label, labelInterval, axis);\n        }\n        else {\n            wrappedlabels = (0,_utils_helper__WEBPACK_IMPORTED_MODULE_0__.textWrap)(label, labelInterval, axis.textStyle);\n        }\n        return wrappedlabels;\n    };\n    AxisHelper.prototype.drawYAxisLabels = function (axis, parent, rect) {\n        var heatMap = this.heatMap;\n        var labels = axis.axisLabels;\n        var interval = rect.height / axis.axisLabelSize;\n        var compactInterval = 0;\n        var tempintervel = rect.height / (axis.axisLabelSize / axis.axisLabelInterval);\n        var temp = axis.axisLabelInterval;\n        var label;\n        if (tempintervel > 0) {\n            while (tempintervel < parseInt(axis.textStyle.size, 10)) {\n                temp = temp + 1;\n                tempintervel = rect.height / (axis.axisLabelSize / temp);\n            }\n        }\n        else {\n            temp = axis.tooltipLabels.length;\n        }\n        if (axis.axisLabelInterval < temp) {\n            compactInterval = temp;\n            labels = axis.tooltipLabels;\n        }\n        var padding = 10;\n        var labelPadding = 5;\n        var lableStartY = rect.y + (axis.isInversed ? 0 : rect.height);\n        var anchor = axis.opposedPosition ? 'start' : 'end';\n        padding = axis.opposedPosition ? padding : -padding;\n        var labelElement;\n        var borderElement;\n        if (!heatMap.enableCanvasRendering) {\n            labelElement = this.heatMap.renderer.createGroup({ id: heatMap.element.id + 'YAxisLabels' });\n            borderElement = this.heatMap.renderer.createGroup({ id: heatMap.element.id + 'YAxisLabelBorder' });\n        }\n        var isLineBreak = (0,_utils_helper__WEBPACK_IMPORTED_MODULE_0__.getIsLineBreakLabel)(labels);\n        for (var i = 0, len = labels.length; i < len; i++) {\n            var labelRect = new _utils_helper__WEBPACK_IMPORTED_MODULE_0__.Rect(rect.x, lableStartY, rect.width, interval);\n            var position = axis.isInversed ? labelRect.height / 2 : -(labelRect.height / 2); //titlePositionY(lableRect, 0, 0, axis.textStyle);\n            var axisWidth = this.heatMap.cellSettings.border.width >= 20 ? (this.heatMap.cellSettings.border.width / 2) : 0;\n            var indexValue = this.heatMap.cellSettings.border.width > 5 ?\n                (((this.heatMap.cellSettings.border.width / 2) / len) * (axis.isInversed ? (i) : (len - i))) : 0;\n            label = (axis.enableTrim || axis.textStyle.textOverflow === 'Trim') && !isLineBreak ? (0,_utils_helper__WEBPACK_IMPORTED_MODULE_0__.textTrim)(axis.maxLabelLength, labels[i], axis.textStyle) : labels[i];\n            if (heatMap.enableHtmlSanitizer) {\n                label = _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.SanitizeHtmlHelper.sanitize(label);\n            }\n            var elementSize = (0,_utils_helper__WEBPACK_IMPORTED_MODULE_0__.measureText)(label, axis.textStyle);\n            var labelLength = 1;\n            var wrappedLabel = [];\n            var rotateSize = new _utils_helper__WEBPACK_IMPORTED_MODULE_0__.Size(0, 0);\n            if ((axis.textStyle.textOverflow === 'Wrap' || isLineBreak) && !axis.enableTrim) {\n                wrappedLabel = this.getLabels(label, axis.maxLabelLength, axis, isLineBreak);\n                for (var index = 0; index < wrappedLabel.length; index++) {\n                    if ((elementSize.height * wrappedLabel.length) > (tempintervel + (labelPadding)) && wrappedLabel.length > 0 && (axis.angle !== 90 && axis.angle !== 270)) {\n                        wrappedLabel.pop();\n                        if (wrappedLabel.length > 0) {\n                            wrappedLabel[wrappedLabel.length - 1] = wrappedLabel[wrappedLabel.length - 1] + '...';\n                            /* eslint-disable max-len */\n                            wrappedLabel[wrappedLabel.length - 1] = (0,_utils_helper__WEBPACK_IMPORTED_MODULE_0__.textTrim)(axis.maxLabelLength, wrappedLabel[wrappedLabel.length - 1], axis.textStyle);\n                        }\n                    }\n                }\n                if (!(isLineBreak)) {\n                    label = wrappedLabel.length !== 0 ? '' : label;\n                    for (var labelIndex = 0; labelIndex < wrappedLabel.length; labelIndex++) {\n                        label = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(label) ? wrappedLabel[labelIndex] : label + ' ' + wrappedLabel[labelIndex];\n                    }\n                }\n                labelLength = wrappedLabel.length;\n            }\n            else {\n                if (isLineBreak && axis.enableTrim) {\n                    wrappedLabel = this.getLabels(label, axis.maxLabelLength, axis, isLineBreak);\n                    var trimmedLabel = (0,_utils_helper__WEBPACK_IMPORTED_MODULE_0__.textTrim)(axis.maxLabelLength, wrappedLabel[0], axis.textStyle);\n                    label = (label.indexOf('<br>') !== -1 || label.indexOf('<br/>') !== -1) && trimmedLabel.indexOf('...') === -1 ? trimmedLabel + '...' : trimmedLabel;\n                    wrappedLabel = [];\n                }\n                wrappedLabel.push(label);\n            }\n            var x = labelRect.x + padding + (axis.opposedPosition ? (axis.textStyle.textOverflow === 'Wrap' && axis.angle % 360 !== 0 ? labelLength * (elementSize.height / 2) : 0) + axisWidth : -axisWidth);\n            if (axis.textStyle.textAlignment === 'Far' && axis.angle % 360 === 0) {\n                /* eslint-disable max-len */\n                position = axis.isInversed ? labelRect.height - (labelLength > 1 ? (elementSize.height * labelLength) - (elementSize.height / 2) : (elementSize.height / 2)) :\n                    -(labelLength > 1 ? (elementSize.height * labelLength) - (elementSize.height / 2) : (elementSize.height / 2));\n            }\n            else if (axis.textStyle.textAlignment === 'Near' && axis.angle % 360 === 0) {\n                /* eslint-disable max-len */\n                position = (axis.isInversed ? elementSize.height / 2 : ((elementSize.height / 2) - labelRect.height)) + (axis.border.width / 2);\n            }\n            var y = (labelRect.y - indexValue) + position - ((labelLength > 1 && axis.textStyle.textAlignment === 'Center') || (axis.angle % 360 !== 0 && axis.opposedPosition) ? (((elementSize.height * labelLength) / 2) - (elementSize.height / 2)) : 0);\n            if (axis.angle % 360 !== 0) {\n                anchor = 'middle';\n                axis.angle = (axis.angle > 360) ? axis.angle % 360 : axis.angle;\n                rotateSize = (0,_utils_helper__WEBPACK_IMPORTED_MODULE_0__.rotateTextSize)(axis.textStyle, wrappedLabel, axis.angle);\n                x = labelRect.x + (axis.opposedPosition ? (rotateSize.width / 2 + padding) : -(rotateSize.width / 2 - padding)) + (axis.angle === 90 ? (elementSize.height * ((wrappedLabel.length - 1) / 2)) : axis.angle === 270 ? -(elementSize.height * (wrappedLabel.length - 1) / 2) : 0);\n                y = labelRect.y + (axis.isInversed ? (labelRect.height / 2) : (-labelRect.height / 2)) + (axis.angle === 180 ? (elementSize.height * ((wrappedLabel.length - 1) / 2)) : 0);\n                if (wrappedLabel.length > 1) {\n                    var value = elementSize.height * ((wrappedLabel.length - 1) / 2);\n                    y = y - ((axis.angle > 0 && axis.angle < 60) || (axis.angle > 290 && axis.angle < 360) ? value : (axis.angle > 115 && axis.angle < 240) && axis.angle !== 180 ? -value : 0);\n                    x = x + (axis.angle > 20 && axis.angle < 160 && axis.angle !== 90 ? value : axis.angle > 200 && axis.angle < 330 && axis.angle !== 270 ? -value - (axis.angle > 200 && axis.angle < 240 && !axis.opposedPosition && wrappedLabel.length > 2 ? -(elementSize.height * ((wrappedLabel.length - 2) / 2)) : 0) :\n                        (axis.angle >= 330 && axis.angle < 350 ? -value / 2 : 0));\n                }\n            }\n            var options = new _utils_helper__WEBPACK_IMPORTED_MODULE_0__.TextOption(heatMap.element.id + '_YAxis_Label' + i, new _utils_helper__WEBPACK_IMPORTED_MODULE_0__.TextBasic(x, y, anchor, label, axis.angle, 'rotate(' + axis.angle + ',' + (x) + ',' + (y) + ')', 'middle'), axis.textStyle, axis.textStyle.color || heatMap.themeStyle.axisLabel);\n            if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.Browser.isIE && !heatMap.enableCanvasRendering) {\n                options.dy = '1ex';\n            }\n            options.text = isLineBreak ? wrappedLabel : (0,_utils_helper__WEBPACK_IMPORTED_MODULE_0__.getTitle)(options.text, axis.textStyle, axis.maxLabelLength);\n            if (axis.angle !== 0 && this.heatMap.enableCanvasRendering) {\n                this.drawSvgCanvas.canvasDrawText(options, null, null, null, wrappedLabel, elementSize.height, true);\n            }\n            else {\n                if (axis.textStyle.textOverflow === 'Wrap' || isLineBreak) {\n                    this.drawSvgCanvas.createWrapText(options, axis.textStyle, labelElement);\n                }\n                else {\n                    this.drawSvgCanvas.createText(options, labelElement, label);\n                }\n            }\n            if (compactInterval === 0) {\n                var labelInterval = (axis.valueType === 'DateTime' && axis.showLabelOn !== 'None') ?\n                    axis.dateTimeAxisLabelInterval[i] : axis.axisLabelInterval;\n                lableStartY = lableStartY + (axis.isInversed ? (labelInterval * interval) :\n                    -(labelInterval * interval));\n            }\n            else {\n                lableStartY = lableStartY + (axis.isInversed ? (compactInterval * interval) : -(compactInterval * interval));\n                i = i + (compactInterval - 1);\n            }\n            this.drawYAxisBorder(axis, borderElement, axis.rect, y, elementSize.height, i);\n            label = this.getMaxLabel(wrappedLabel, axis);\n            if (label.indexOf('...') !== -1) {\n                var xValue = axis.opposedPosition ? x : (x - (axis.angle % 360 !== 0 ? (rotateSize.width / 2) : elementSize.width));\n                var yValue = y - (axis.angle % 360 !== 0 ? (rotateSize.height / 2) : elementSize.height);\n                label = labels[i].indexOf('<br>') !== -1 || labels[i].indexOf('<br/>') !== -1 ? labels[i].replace(/<br\\s*\\/?>/g, ' ') : labels[i];\n                this.heatMap.tooltipCollection.push(new _utils_helper__WEBPACK_IMPORTED_MODULE_0__.CanvasTooltip(label, new _utils_helper__WEBPACK_IMPORTED_MODULE_0__.Rect(xValue, yValue, (axis.angle % 360 !== 0 ? rotateSize.width : elementSize.width), (axis.angle % 360 !== 0 ? rotateSize.height : elementSize.height * wrappedLabel.length))));\n            }\n        }\n        if (!heatMap.enableCanvasRendering) {\n            parent.appendChild(labelElement);\n            parent.appendChild(borderElement);\n        }\n    };\n    AxisHelper.prototype.drawXAxisBorder = function (axis, parent, rect, lableX, width, index) {\n        var interval = rect.width / axis.axisLabelSize;\n        var path = '';\n        var padding = 10;\n        var axisInterval = axis.interval ? axis.interval : 1;\n        var startX = axis.isInversed ? rect.x + rect.width - (interval * index * axisInterval) :\n            rect.x + (interval * index * axisInterval);\n        var startY = rect.y;\n        var endX;\n        var endY;\n        endY = startY + (axis.opposedPosition ? -(axis.maxLabelSize.height + padding) : axis.maxLabelSize.height + padding);\n        // eslint-disable-next-line prefer-const\n        endX = axis.isInversed ? startX - interval : startX + interval;\n        var endY1 = axis.isInversed ? (lableX + width + padding) : (lableX - padding);\n        var endY2 = axis.isInversed ? (lableX - padding) : (lableX + width + padding);\n        endY2 = axis.textStyle.textAlignment === 'Near' && axis.isInversed ? endY2 + padding : axis.textStyle.textAlignment === 'Far' && !axis.isInversed ? endY2 - padding : endY2;\n        endY1 = axis.textStyle.textAlignment === 'Far' && axis.isInversed ? endY1 - padding : axis.textStyle.textAlignment === 'Near' && !axis.isInversed ? endY1 + padding : endY1;\n        switch (axis.border.type) {\n            case 'Rectangle':\n                path = ('M' + ' ' + startX + ' ' + startY + ' ' + 'L' + ' ' + startX + ' ' + endY + ' ' +\n                    'L' + ' ' + endX + ' ' + endY + ' ' + 'L' + ' ' + endX + ' ' + startY + ' ' + 'L' + ' ' + startX + ' ' + startY);\n                break;\n            case 'WithoutTopBorder':\n                path = 'M' + ' ' + startX + ' ' + startY + ' ' + 'L' + ' ' + startX + ' ' + endY + ' ' +\n                    'L' + ' ' + endX + ' ' + endY + ' ' + 'L' + ' ' + endX + ' ' + startY + ' ';\n                break;\n            case 'WithoutBottomBorder':\n                path = 'M' + ' ' + startX + ' ' + endY + ' ' + 'L' + ' ' + startX + ' ' + startY + ' ' +\n                    'L' + ' ' + endX + ' ' + startY + ' ' + 'L' + ' ' + endX + ' ' + endY + ' ';\n                break;\n            case 'WithoutTopandBottomBorder':\n                path = 'M' + ' ' + startX + ' ' + startY + ' ' + 'L' + ' ' + startX + ' ' + endY + ' ' +\n                    'M' + ' ' + endX + ' ' + startY + ' ' + 'L' + ' ' + endX + ' ' + endY + ' ';\n                break;\n            case 'Brace':\n                endY = startY + ((endY - startY) / 2) + (axis.opposedPosition ? 0 : 5);\n                path = 'M' + ' ' + startX + ' ' + startY + ' ' + 'L' + ' ' + startX + ' ' + endY + ' ' +\n                    'L' + ' ' + endY1 + ' ' + endY + ' ' + 'M' + ' ' + endY2 +\n                    ' ' + endY + ' ' + 'L' +\n                    ' ' + endX + ' ' + endY + ' ' + 'L' + ' ' + endX + ' ' + startY + ' ';\n                break;\n        }\n        if (axis.border.width > 0 && axis.border.type !== 'WithoutBorder') {\n            this.createAxisBorderElement(axis, path, parent, index);\n        }\n    };\n    AxisHelper.prototype.drawYAxisBorder = function (axis, parent, rect, lableY, height, index) {\n        var interval = rect.height / axis.axisLabelSize;\n        var path = '';\n        var padding = 20;\n        var axisInterval = axis.interval ? axis.interval : 1;\n        var startX = rect.x;\n        var startY = axis.isInversed ? rect.y + (interval * index * axisInterval) :\n            rect.y + rect.height - (interval * index * axisInterval);\n        var endX;\n        var endY;\n        endX = startX + (!axis.opposedPosition ? -(axis.maxLabelSize.width + padding) : axis.maxLabelSize.width + padding);\n        // eslint-disable-next-line prefer-const\n        endY = axis.isInversed ? startY + interval : startY - interval;\n        var endY1 = axis.isInversed ? lableY - height / 2 : lableY + height / 2;\n        var endY2 = axis.isInversed ? lableY + height / 2 : lableY - height / 2;\n        switch (axis.border.type) {\n            case 'Rectangle':\n                path = 'M' + ' ' + startX + ' ' + startY + ' ' + 'L' + ' ' + startX + ' ' + endY + ' ' +\n                    'L' + ' ' + endX + ' ' + endY + ' ' + 'L' + ' ' + endX + ' ' + startY + ' ' + 'L' + ' ' + startX + ' ' + startY;\n                break;\n            case 'WithoutTopBorder':\n                path = 'M' + ' ' + startX + ' ' + startY + ' ' + 'L' + ' ' + endX + ' ' + startY + ' ' +\n                    'L' + ' ' + endX + ' ' + endY + ' ' + 'L' + ' ' + startX + ' ' + endY + ' ';\n                break;\n            case 'WithoutBottomBorder':\n                path = 'M' + ' ' + endX + ' ' + startY + ' ' + 'L' + ' ' + startX + ' ' + startY + ' ' +\n                    'L' + ' ' + startX + ' ' + endY + ' ' + 'L' + ' ' + endX + ' ' + endY + ' ';\n                break;\n            case 'WithoutTopandBottomBorder':\n                path = 'M' + ' ' + startX + ' ' + startY + ' ' + 'L' + ' ' + endX + ' ' + startY + ' ' +\n                    'M' + ' ' + endX + ' ' + endY + ' ' + 'L' + ' ' + startX + ' ' + endY + ' ';\n                break;\n            case 'Brace':\n                endX = startX - (startX - endX) / 2;\n                path = 'M' + ' ' + startX + ' ' + startY + ' ' + 'L' + ' ' + endX + ' ' + startY + ' ' +\n                    'L' + ' ' + endX + ' ' + endY1 + ' ' + 'M' + ' ' +\n                    endX + ' ' + endY2 + ' ' + 'L' + ' ' + endX + ' ' + endY + ' ' +\n                    'L' + ' ' + startX + ' ' + endY;\n                break;\n        }\n        if (axis.border.width > 0 && axis.border.type !== 'WithoutBorder') {\n            this.createAxisBorderElement(axis, path, parent, index);\n        }\n    };\n    /**\n     * To create border element for axis.\n     *\n     * @returns {void}\n     * @private\n     */\n    AxisHelper.prototype.createAxisBorderElement = function (axis, labelBorder, parent, index) {\n        var canvasTranslate;\n        var id = axis.orientation === 'Horizontal' ? '_XAxis_Label_Border' : '_YAxis_Label_Border';\n        var pathOptions = new _utils_helper__WEBPACK_IMPORTED_MODULE_0__.PathOption(this.heatMap.element.id + id + index, 'transparent', axis.border.width, axis.border.color, 1, 'none', labelBorder);\n        if (!this.heatMap.enableCanvasRendering) {\n            var borderElement = this.heatMap.renderer.drawPath(pathOptions);\n            parent.appendChild(borderElement);\n        }\n        else {\n            this.heatMap.canvasRenderer.drawPath(pathOptions, canvasTranslate);\n        }\n    };\n    AxisHelper.prototype.drawMultiLevels = function (parent, axis) {\n        var element;\n        if (!this.heatMap.enableCanvasRendering) {\n            element = this.heatMap.renderer.createGroup({ id: this.heatMap.element.id + '_' + axis.orientation + '_MultiLevelLabel' });\n        }\n        if (axis.orientation === 'Horizontal') {\n            this.renderXAxisMultiLevelLabels(axis, element);\n        }\n        else {\n            this.renderYAxisMultiLevelLabels(axis, element);\n        }\n        if (!this.heatMap.enableCanvasRendering) {\n            parent.appendChild(element);\n        }\n    };\n    /**\n     * render x axis multi level labels\n     *\n     * @private\n     * @returns {void}\n     */\n    AxisHelper.prototype.renderXAxisMultiLevelLabels = function (axis, parent) {\n        var _this = this;\n        var x = 0;\n        var y;\n        var padding = 10;\n        var startX;\n        var startY;\n        var endX = 0;\n        var tooltip;\n        var start;\n        var end;\n        var labelSize;\n        var anchor;\n        var isInversed = axis.isInversed;\n        var labelElement;\n        var opposedPosition = axis.opposedPosition;\n        var pathRect = '';\n        var gap;\n        var textLength;\n        var position = (isInversed ? axis.rect.width : 0) + axis.rect.x;\n        axis.multiLevelLabels.map(function (multiLevel, level) {\n            labelElement = _this.heatMap.renderer.createGroup({ id: _this.heatMap.element.id + '_XAxisMultiLevelLabel' + level });\n            multiLevel.categories.map(function (categoryLabel, i) {\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(categoryLabel.start) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(categoryLabel.end)) {\n                    if (_this.heatMap.theme === 'Tailwind' || _this.heatMap.theme === 'TailwindDark') {\n                        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                        multiLevel.setProperties({ textStyle: { fontFamily: 'Inter' } }, true);\n                    }\n                    if (_this.heatMap.theme === 'Tailwind3' || _this.heatMap.theme === 'Tailwind3Dark') {\n                        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                        multiLevel.setProperties({ textStyle: { color: _this.heatMap.themeStyle.axisLabel, fontFamily: 'Inter', fontWeight: '400' } }, true);\n                    }\n                    if (_this.heatMap.theme === 'Material3' || _this.heatMap.theme === 'Material3Dark') {\n                        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                        multiLevel.setProperties({ textStyle: { fontFamily: 'Roboto' } }, true);\n                    }\n                    if (_this.heatMap.theme === 'Fluent' || _this.heatMap.theme === 'FluentDark') {\n                        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                        multiLevel.setProperties({ textStyle: { fontFamily: '\"Segoe UI\", -apple-system, BlinkMacSystemFont, \"Roboto\", \"Helvetica Neue\", sans-serif' } }, true);\n                    }\n                    if (_this.heatMap.theme === 'Fluent2') {\n                        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                        multiLevel.setProperties({ textStyle: { color: '#242424', size: '12px', fontWeight: '400', fontFamily: 'Segoe UI' } }, true);\n                    }\n                    if (_this.heatMap.theme === 'Fluent2Dark' || _this.heatMap.theme === 'Fluent2HighContrast') {\n                        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                        multiLevel.setProperties({ textStyle: { color: '#FFFFFF', size: '12px', fontWeight: '400', fontFamily: 'Segoe UI' } }, true);\n                    }\n                    if (_this.heatMap.theme === 'Bootstrap5') {\n                        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                        multiLevel.setProperties({ textStyle: { color: '#212529', size: '12px', fontWeight: '400', fontFamily: 'Segoe UI' } }, true);\n                    }\n                    if (_this.heatMap.theme === 'Bootstrap5Dark') {\n                        //eslint-disable-next-line @typescript-eslint/no-explicit-any\n                        multiLevel.setProperties({ textStyle: { color: '#DEE2E6', size: '12px', fontWeight: '400', fontFamily: 'Segoe UI' } }, true);\n                    }\n                    tooltip = false;\n                    start = typeof categoryLabel.start === 'number' ? categoryLabel.start : Number(new Date(categoryLabel.start));\n                    end = typeof categoryLabel.end === 'number' ? categoryLabel.end : Number(new Date(categoryLabel.end));\n                    startX = position + _this.calculateLeftPosition(axis, start, categoryLabel.start, axis.rect);\n                    startY = axis.multiLevelPosition[level].y;\n                    endX = position + _this.calculateWidth(axis, categoryLabel.end, end, axis.rect);\n                    var text = _this.heatMap.enableHtmlSanitizer ? _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.SanitizeHtmlHelper.sanitize(categoryLabel.text) : categoryLabel.text;\n                    labelSize = (0,_utils_helper__WEBPACK_IMPORTED_MODULE_0__.measureText)(text, multiLevel.textStyle);\n                    gap = ((categoryLabel.maximumTextWidth === null) ? Math.abs(endX - startX) : categoryLabel.maximumTextWidth) - padding;\n                    y = startY + (opposedPosition ? -((axis.xAxisMultiLabelHeight[level] - labelSize.height)) : labelSize.height);\n                    x = !isInversed ? startX + padding : startX - gap;\n                    if (multiLevel.alignment === 'Center') {\n                        x = ((endX - startX) / 2) + startX;\n                        x -= (labelSize.width > gap ? gap : labelSize.width) / 2;\n                    }\n                    else if (multiLevel.alignment === 'Far') {\n                        x = !isInversed ? endX - padding : startX - padding;\n                        x -= (labelSize.width > gap ? gap : labelSize.width);\n                    }\n                    else {\n                        x = !isInversed ? startX + padding : endX + padding;\n                    }\n                    if (multiLevel.overflow === 'None' && labelSize.width > Math.abs(endX - startX)) {\n                        x = !isInversed ? startX + padding : startX - labelSize.width - padding;\n                        anchor = 'start';\n                    }\n                    var textBasic = new _utils_helper__WEBPACK_IMPORTED_MODULE_0__.TextBasic(x, y, anchor, text, 0, 'translate(0,0)');\n                    var options = new _utils_helper__WEBPACK_IMPORTED_MODULE_0__.TextOption(_this.heatMap.element.id + '_XAxis_MultiLevel' + level + '_Text' + i, textBasic, multiLevel.textStyle, multiLevel.textStyle.color || _this.heatMap.themeStyle.axisLabel);\n                    if (multiLevel.overflow === 'Wrap') {\n                        options.text = (0,_utils_helper__WEBPACK_IMPORTED_MODULE_0__.textWrap)(text, gap, multiLevel.textStyle);\n                        textLength = options.text.length;\n                    }\n                    else if (multiLevel.overflow === 'Trim') {\n                        options.text = (0,_utils_helper__WEBPACK_IMPORTED_MODULE_0__.textTrim)(gap, text, multiLevel.textStyle);\n                        textLength = 1;\n                    }\n                    if (multiLevel.overflow === 'Wrap' && options.text.length > 1) {\n                        _this.drawSvgCanvas.createWrapText(options, multiLevel.textStyle, labelElement);\n                        for (var i_2 = 0; i_2 < options.text.length; i_2++) {\n                            if (options.text[i_2].indexOf('...') !== -1) {\n                                tooltip = true;\n                                break;\n                            }\n                        }\n                    }\n                    else {\n                        _this.drawSvgCanvas.createText(options, labelElement, options.text);\n                    }\n                    if (!_this.heatMap.enableCanvasRendering) {\n                        parent.appendChild(labelElement);\n                    }\n                    if (options.text.indexOf('...') !== -1 || options.text[0].indexOf('...') !== -1 || tooltip) {\n                        _this.heatMap.tooltipCollection.push(new _utils_helper__WEBPACK_IMPORTED_MODULE_0__.CanvasTooltip(categoryLabel.text, new _utils_helper__WEBPACK_IMPORTED_MODULE_0__.Rect(x, y - labelSize.height, gap, labelSize.height * textLength)));\n                    }\n                    if (multiLevel.border.width > 0 && multiLevel.border.type !== 'WithoutBorder') {\n                        pathRect = _this.renderXAxisLabelBorder(level, axis, startX, startY, endX, pathRect, level, labelSize, gap, x);\n                    }\n                }\n            });\n            if (pathRect !== '') {\n                _this.createBorderElement(level, axis, pathRect, parent);\n                pathRect = '';\n            }\n        });\n        if (!this.heatMap.enableCanvasRendering) {\n            parent.appendChild(labelElement);\n        }\n    };\n    /**\n     * render x axis multi level labels border\n     *\n     * @private\n     * @returns {void}\n     */\n    AxisHelper.prototype.renderXAxisLabelBorder = function (labelIndex, axis, startX, startY, endX, path, level, labelSize, gap, x) {\n        var path1;\n        var path2;\n        var endY = startY + (axis.opposedPosition ? -(axis.xAxisMultiLabelHeight[labelIndex]) :\n            axis.xAxisMultiLabelHeight[labelIndex]);\n        var padding = 3;\n        switch (axis.multiLevelLabels[level].border.type) {\n            case 'Rectangle':\n                path += 'M' + ' ' + startX + ' ' + startY + ' ' + 'L' + ' ' + startX + ' ' + endY + ' ' +\n                    'L' + ' ' + endX + ' ' + endY + ' ' + 'L' + ' ' + endX + ' ' + startY + ' ' + 'L' + ' ' + startX + ' ' + startY + ' ';\n                break;\n            case 'WithoutTopBorder':\n                path += 'M' + ' ' + startX + ' ' + startY + ' ' + 'L' + ' ' + startX + ' ' + endY + ' ' +\n                    'L' + ' ' + endX + ' ' + endY + ' ' + 'L' + ' ' + endX + ' ' + startY + ' ';\n                break;\n            case 'WithoutBottomBorder':\n                path += 'M' + ' ' + startX + ' ' + endY + ' ' + 'L' + ' ' + startX + ' ' + startY + ' ' +\n                    'L' + ' ' + endX + ' ' + startY + ' ' + 'L' + ' ' + endX + ' ' + endY + ' ';\n                break;\n            case 'WithoutTopandBottomBorder':\n                path += 'M' + ' ' + startX + ' ' + startY + ' ' + 'L' + ' ' + startX + ' ' + endY + ' ' +\n                    'M' + ' ' + endX + ' ' + startY + ' ' + 'L' + ' ' + endX + ' ' + endY + ' ';\n                break;\n            case 'Brace':\n                path1 = axis.isInversed ? (labelSize.width > gap ? gap : labelSize.width) + x + padding : x - padding;\n                path2 = axis.isInversed ? x - padding : (labelSize.width > gap ? gap : labelSize.width) + x + padding;\n                path += 'M' + ' ' + startX + ' ' + startY + ' ' + 'L' + ' ' + startX + ' ' + (startY + (endY - startY) / 2) + ' ' +\n                    'L' + ' ' + path1 + ' ' + (startY + (endY - startY) / 2) + ' ' + 'M' + ' ' + path2 + ' ' + (startY +\n                    (endY - startY) / 2) + ' ' + 'L' + ' ' + endX + ' ' + (startY + (endY - startY) / 2) +\n                    ' ' + 'L' + ' ' + endX + ' ' + startY + ' ';\n                break;\n        }\n        return path;\n    };\n    /**\n     * render y axis multi level labels\n     *\n     * @private\n     * @returns {void}\n     */\n    AxisHelper.prototype.renderYAxisMultiLevelLabels = function (axis, parent) {\n        var _this = this;\n        var x = 0;\n        var y;\n        var padding = 10;\n        var startX;\n        var startY;\n        var endY;\n        var start;\n        var end;\n        var labelSize;\n        var isInversed = axis.isInversed;\n        var labelElement;\n        var pathRect = '';\n        var gap;\n        var text;\n        var position = (!isInversed ? axis.rect.height : 0) + axis.rect.y;\n        axis.multiLevelLabels.map(function (multiLevel, level) {\n            startY = axis.multiLevelPosition[level].y;\n            labelElement = _this.heatMap.renderer.createGroup({ id: _this.heatMap.element.id + '_YAxisMultiLevelLabel' + level });\n            multiLevel.categories.map(function (categoryLabel, i) {\n                if (_this.heatMap.theme === 'Tailwind' || _this.heatMap.theme === 'TailwindDark') {\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    multiLevel.setProperties({ textStyle: { fontFamily: 'Inter' } }, true);\n                }\n                if (_this.heatMap.theme === 'Tailwind3' || _this.heatMap.theme === 'Tailwind3Dark') {\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    multiLevel.setProperties({ textStyle: { color: _this.heatMap.themeStyle.axisLabel, fontFamily: 'Inter', fontWeight: '400' } }, true);\n                }\n                if (_this.heatMap.theme === 'Material3' || _this.heatMap.theme === 'Material3Dark') {\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    multiLevel.setProperties({ textStyle: { fontFamily: 'Roboto' } }, true);\n                }\n                if (_this.heatMap.theme === 'Bootstrap5' || _this.heatMap.theme === 'Bootstrap5Dark') {\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    multiLevel.setProperties({ textStyle: { fontFamily: 'Segoe UI' } }, true);\n                }\n                if (_this.heatMap.theme === 'Fluent2') {\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    multiLevel.setProperties({ textStyle: { color: '#242424', size: '12px', fontWeight: '400', fontFamily: 'Segoe UI' } }, true);\n                }\n                if (_this.heatMap.theme === 'Fluent2Dark' || _this.heatMap.theme === 'Fluent2HighContrast') {\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    multiLevel.setProperties({ textStyle: { color: '#FFFFFF', size: '12px', fontWeight: '400', fontFamily: 'Segoe UI' } }, true);\n                }\n                start = typeof categoryLabel.start === 'number' ? categoryLabel.start : Number(new Date(categoryLabel.start));\n                end = typeof categoryLabel.end === 'number' ? categoryLabel.end : Number(new Date(categoryLabel.end));\n                startY = position + _this.calculateLeftPosition(axis, start, categoryLabel.start, axis.rect);\n                startX = axis.multiLevelPosition[level].x;\n                endY = position + _this.calculateWidth(axis, categoryLabel.start, end, axis.rect);\n                var categoryText = _this.heatMap.enableHtmlSanitizer ? _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.SanitizeHtmlHelper.sanitize(categoryLabel.text) : categoryLabel.text;\n                labelSize = (0,_utils_helper__WEBPACK_IMPORTED_MODULE_0__.measureText)(categoryText, multiLevel.textStyle);\n                gap = ((categoryLabel.maximumTextWidth === null) ? Math.abs(startX) : categoryLabel.maximumTextWidth) - padding;\n                var maxWidth = Math.abs(startX - (startX - axis.multiLevelSize[level].width - 2 * padding)) / 2 -\n                    (labelSize.width / 2);\n                x = (axis.opposedPosition ? startX : startX - axis.multiLevelSize[level].width - 2 * padding) + maxWidth;\n                y = startY + padding;\n                if (multiLevel.overflow !== 'None') {\n                    if (multiLevel.overflow === 'Wrap') {\n                        text = (0,_utils_helper__WEBPACK_IMPORTED_MODULE_0__.textWrap)(categoryText, gap, multiLevel.textStyle);\n                    }\n                    else {\n                        text = (0,_utils_helper__WEBPACK_IMPORTED_MODULE_0__.textTrim)(gap, categoryText, multiLevel.textStyle);\n                    }\n                }\n                if (multiLevel.alignment === 'Center') {\n                    y += ((endY - startY) / 2 - (text.length * labelSize.height) / 2);\n                }\n                else if (multiLevel.alignment === 'Far') {\n                    y = isInversed ? endY - labelSize.height / 2 : y - labelSize.height;\n                }\n                else {\n                    y = isInversed ? y + labelSize.height / 2 : endY + labelSize.height;\n                }\n                if (multiLevel.border.width > 0 && multiLevel.border.type !== 'WithoutBorder') {\n                    pathRect = _this.renderYAxisLabelBorder(level, axis, startX, startY, endY, pathRect, level, labelSize, gap, y);\n                }\n                var textBasic = new _utils_helper__WEBPACK_IMPORTED_MODULE_0__.TextBasic(x, y, 'start', _this.heatMap.enableHtmlSanitizer ? _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.SanitizeHtmlHelper.sanitize(categoryLabel.text) : categoryLabel.text, 0, 'translate(0,0)');\n                var options = new _utils_helper__WEBPACK_IMPORTED_MODULE_0__.TextOption(_this.heatMap.element.id + '_YAxis_MultiLevel' + level + '_Text' + i, textBasic, multiLevel.textStyle, multiLevel.textStyle.color || _this.heatMap.themeStyle.axisLabel);\n                options.text = text;\n                _this.drawSvgCanvas.createText(options, labelElement, options.text);\n                if (options.text.indexOf('...') !== -1) {\n                    _this.heatMap.tooltipCollection.push(new _utils_helper__WEBPACK_IMPORTED_MODULE_0__.CanvasTooltip(categoryLabel.text, new _utils_helper__WEBPACK_IMPORTED_MODULE_0__.Rect(x, y - labelSize.height, gap, labelSize.height)));\n                }\n                if (!_this.heatMap.enableCanvasRendering) {\n                    parent.appendChild(labelElement);\n                }\n            });\n            if (pathRect !== '') {\n                _this.createBorderElement(level, axis, pathRect, parent);\n                pathRect = '';\n            }\n        });\n        if (!this.heatMap.enableCanvasRendering) {\n            parent.appendChild(labelElement);\n        }\n    };\n    /**\n     * render x axis multi level labels border\n     *\n     * @private\n     * @returns {void}\n     */\n    AxisHelper.prototype.renderYAxisLabelBorder = function (labelIndex, axis, startX, startY, endY, path, level, labelSize, gap, y) {\n        var padding = 20;\n        var path1;\n        var path2;\n        var endX = startX - (axis.opposedPosition ? -(axis.multiLevelSize[labelIndex].width + padding) :\n            (axis.multiLevelSize[labelIndex].width + padding));\n        switch (axis.multiLevelLabels[level].border.type) {\n            case 'Rectangle':\n                path += 'M' + ' ' + startX + ' ' + startY + ' ' + 'L' + ' ' + endX + ' ' + startY + ' ' +\n                    'L' + ' ' + endX + ' ' + endY + ' ' + 'L' + ' ' + startX + ' ' + endY + ' ' + 'L' + ' ' + startX + ' ' + startY + ' ';\n                break;\n            case 'WithoutTopBorder':\n                path += 'M' + ' ' + startX + ' ' + startY + ' ' + 'L' + ' ' + endX + ' ' + startY + ' ' +\n                    'L' + ' ' + endX + ' ' + endY + ' ' + 'L' + ' ' + startX + ' ' + endY + ' ';\n                break;\n            case 'WithoutBottomBorder':\n                path += 'M' + ' ' + endX + ' ' + startY + ' ' + 'L' + ' ' + startX + ' ' + startY + ' ' +\n                    'L' + ' ' + startX + ' ' + endY + ' ' + 'L' + ' ' + endX + ' ' + endY + ' ';\n                break;\n            case 'WithoutTopandBottomBorder':\n                path += 'M' + ' ' + startX + ' ' + startY + ' ' + 'L' + ' ' + endX + ' ' + startY + ' ' +\n                    'M' + ' ' + startX + ' ' + endY + ' ' + 'L' + ' ' + endX + ' ' + endY + ' ';\n                break;\n            case 'Brace':\n                padding = 10;\n                path1 = axis.isInversed ? (y - padding - 5) : (y + (labelSize.height) - padding);\n                path2 = axis.isInversed ? (y + (labelSize.height) - padding) : (y - padding - 5);\n                path += 'M' + ' ' + startX + ' ' + startY + ' ' + 'L' + ' ' + (startX + (endX - startX) / 2) + ' ' + startY + ' ' +\n                    'L' + ' ' + (startX + (endX - startX) / 2) + ' ' + path1 + ' ' + 'M' + ' ' + (startX + (endX - startX) / 2) +\n                    ' ' + path2 + ' ' + 'L' + ' ' + (startX + (endX - startX) / 2) + ' ' +\n                    endY + ' ' + 'L' + ' ' + startX + ' ' + endY + ' ';\n                break;\n        }\n        return path;\n    };\n    /**\n     * create borer element\n     *\n     * @returns {void}\n     * @private\n     */\n    AxisHelper.prototype.createBorderElement = function (borderIndex, axis, path, parent) {\n        var canvasTranslate;\n        var id = axis.orientation === 'Horizontal' ? 'XAxis' : 'YAxis';\n        var pathOptions = new _utils_helper__WEBPACK_IMPORTED_MODULE_0__.PathOption(this.heatMap.element.id + '_' + id + '_MultiLevel_Rect_' + borderIndex, 'Transparent', axis.multiLevelLabels[borderIndex].border.width, axis.multiLevelLabels[borderIndex].border.color, 1, '', path);\n        var borderElement = this.heatMap.renderer.drawPath(pathOptions);\n        if (!this.heatMap.enableCanvasRendering) {\n            parent.appendChild(borderElement);\n        }\n        else {\n            this.heatMap.canvasRenderer.drawPath(pathOptions, canvasTranslate);\n        }\n    };\n    /**\n     * calculate left position of border element\n     *\n     * @private\n     */\n    AxisHelper.prototype.calculateLeftPosition = function (axis, start, label, rect) {\n        var value;\n        var interval;\n        if (typeof label === 'number') {\n            if (axis.valueType === 'Numeric' && (axis.minimum || axis.maximum)) {\n                var min = axis.minimum ? axis.minimum : 0;\n                start -= min;\n            }\n            var size = axis.orientation === 'Horizontal' ? rect.width : rect.height;\n            interval = size / (axis.axisLabelSize * axis.increment);\n            value = (axis.isInversed ? -1 : 1) * start * interval;\n            value = axis.orientation === 'Horizontal' ? value : -value;\n        }\n        else {\n            interval = this.calculateNumberOfDays(start, axis, true, rect);\n            value = axis.isInversed ? -interval : interval;\n            value = axis.orientation === 'Horizontal' ? value : -value;\n        }\n        return value;\n    };\n    /**\n     * calculate width of border element\n     *\n     * @private\n     */\n    AxisHelper.prototype.calculateWidth = function (axis, label, end, rect) {\n        var interval;\n        var value;\n        if (typeof label === 'number') {\n            if (axis.valueType === 'Numeric' && (axis.minimum || axis.maximum)) {\n                var min = axis.minimum ? axis.minimum : 0;\n                end -= min;\n            }\n            var size = axis.orientation === 'Horizontal' ? rect.width : rect.height;\n            interval = size / (axis.axisLabelSize * axis.increment);\n            value = (axis.isInversed ? -1 : 1) * (end + 1) * interval;\n            value = axis.orientation === 'Horizontal' ? value : -value;\n        }\n        else {\n            interval = this.calculateNumberOfDays(end, axis, false, rect);\n            value = interval;\n            value = axis.isInversed ? -value : value;\n            value = axis.orientation === 'Horizontal' ? value : -value;\n        }\n        return value;\n    };\n    AxisHelper.prototype.calculateNumberOfDays = function (date, axis, start, rect) {\n        var oneDay = 24 * 60 * 60 * 1000; // hours*minutes*seconds*milliseconds\n        var oneMinute = 60 * 1000;\n        var firstDate;\n        var secondDate;\n        var labels = axis.labelValue;\n        var position;\n        var interval = (axis.orientation === 'Horizontal' ? rect.width : rect.height) / axis.axisLabelSize;\n        var givenDate = new Date(Number(date));\n        var days = 0;\n        for (var index = 0; index < axis.axisLabelSize; index++) {\n            firstDate = new Date(Number(labels[index]));\n            secondDate = axis.isInversed ? new Date(Number(labels[index - 1])) : new Date(Number(labels[index + 1]));\n            if (index === (axis.isInversed ? 0 : axis.axisLabelSize - 1)) {\n                secondDate = new Date(Number(labels[index]));\n                if (axis.intervalType === 'Hours') {\n                    secondDate = new Date(Number(secondDate.setHours(secondDate.getHours() + 1)));\n                }\n                else if ((axis.intervalType === 'Minutes')) {\n                    secondDate = new Date(Number(secondDate.setMinutes(secondDate.getMinutes() + 1)));\n                }\n                else if ((axis.intervalType === 'Days')) {\n                    secondDate = new Date(Number(secondDate.setDate(secondDate.getDate() + 1)));\n                }\n                else {\n                    var numberOfDays = axis.intervalType === 'Months' ?\n                        new Date(secondDate.getFullYear(), secondDate.getMonth() + 1, 0).getDate() :\n                        secondDate.getFullYear() % 4 === 0 ? 366 : 365;\n                    secondDate = new Date(Number(secondDate.setDate(secondDate.getDate() + numberOfDays)));\n                }\n            }\n            if (Number(firstDate) <= date && Number(secondDate) >= date) {\n                if (axis.intervalType === 'Minutes' || axis.intervalType === 'Hours') {\n                    var totalMinutes = Math.round(Math.abs((firstDate.getTime() - secondDate.getTime()) / (oneMinute)));\n                    var minutesInHours = Math.abs((firstDate.getTime() - givenDate.getTime()) / (oneMinute));\n                    days = (interval / totalMinutes) * minutesInHours;\n                    index = axis.isInversed ? axis.axisLabelSize - 1 - index : index;\n                    position = index * interval + days;\n                    break;\n                }\n                else {\n                    var numberOfDays = Math.round(Math.abs((firstDate.getTime() - secondDate.getTime()) / (oneDay)));\n                    // eslint-disable-next-line\n                    start ? givenDate.getDate() : givenDate.setDate(givenDate.getDate() + 1);\n                    if (numberOfDays !== 0) {\n                        days = (interval / numberOfDays) * (Math.abs((firstDate.getTime() - givenDate.getTime()) / (oneDay)));\n                    }\n                    index = axis.isInversed ? axis.axisLabelSize - 1 - index : index;\n                    position = index * interval + days;\n                    break;\n                }\n            }\n        }\n        return position;\n    };\n    /**\n     * @returns {void}\n     * @private\n     */\n    AxisHelper.prototype.destroy = function () {\n        this.drawSvgCanvas = null;\n        this.element = null;\n        this.htmlObject = null;\n        this.initialClipRect = null;\n        this.heatMap = null;\n    };\n    return AxisHelper;\n}());\n\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-heatmap/src/heatmap/axis/axis-helpers.js?");

/***/ })

}]);