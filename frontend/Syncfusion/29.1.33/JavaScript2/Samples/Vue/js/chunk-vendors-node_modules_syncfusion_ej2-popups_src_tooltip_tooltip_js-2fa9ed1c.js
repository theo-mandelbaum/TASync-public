"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkej2_vue_samples"] = self["webpackChunkej2_vue_samples"] || []).push([["chunk-vendors-node_modules_syncfusion_ej2-popups_src_tooltip_tooltip_js-2fa9ed1c"],{

/***/ "./node_modules/@syncfusion/ej2-popups/src/tooltip/tooltip.js":
/*!********************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-popups/src/tooltip/tooltip.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Animation: () => (/* binding */ Animation),\n/* harmony export */   Tooltip: () => (/* binding */ Tooltip)\n/* harmony export */ });\n/* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @syncfusion/ej2-base */ \"./node_modules/@syncfusion/ej2-base/index.js\");\n/* harmony import */ var _popup_popup__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../popup/popup */ \"./node_modules/@syncfusion/ej2-popups/src/popup/popup.js\");\n/* harmony import */ var _common_position__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../common/position */ \"./node_modules/@syncfusion/ej2-popups/src/common/position.js\");\n/* harmony import */ var _common_collision__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../common/collision */ \"./node_modules/@syncfusion/ej2-popups/src/common/collision.js\");\nvar __extends = (undefined && undefined.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\n\n\n\n\n\n\n\nvar TOUCHEND_HIDE_DELAY = 1500;\nvar TAPHOLD_THRESHOLD = 500;\nvar SHOW_POINTER_TIP_GAP = 0;\nvar HIDE_POINTER_TIP_GAP = 8;\nvar MOUSE_TRAIL_GAP = 2;\nvar POINTER_ADJUST = 2;\nvar ROOT = 'e-tooltip';\nvar RTL = 'e-rtl';\nvar DEVICE = 'e-bigger';\nvar ICON = 'e-icons';\nvar CLOSE = 'e-tooltip-close';\nvar TOOLTIP_WRAP = 'e-tooltip-wrap';\nvar CONTENT = 'e-tip-content';\nvar ARROW_TIP = 'e-arrow-tip';\nvar ARROW_TIP_OUTER = 'e-arrow-tip-outer';\nvar ARROW_TIP_INNER = 'e-arrow-tip-inner';\nvar TIP_BOTTOM = 'e-tip-bottom';\nvar TIP_TOP = 'e-tip-top';\nvar TIP_LEFT = 'e-tip-left';\nvar TIP_RIGHT = 'e-tip-right';\nvar POPUP_ROOT = 'e-popup';\nvar POPUP_OPEN = 'e-popup-open';\nvar POPUP_CLOSE = 'e-popup-close';\nvar POPUP_LIB = 'e-lib';\nvar HIDE_POPUP = 'e-hidden';\nvar POPUP_CONTAINER = 'e-tooltip-popup-container';\nvar Animation = /** @class */ (function (_super) {\n    __extends(Animation, _super);\n    function Animation() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)({ effect: 'FadeIn', duration: 150, delay: 0 })\n    ], Animation.prototype, \"open\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)({ effect: 'FadeOut', duration: 150, delay: 0 })\n    ], Animation.prototype, \"close\", void 0);\n    return Animation;\n}(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.ChildProperty));\n\n/**\n * Represents the Tooltip component that displays a piece of information about the target element on mouse hover.\n * ```html\n * <div id=\"tooltip\">Show Tooltip</div>\n * ```\n * ```typescript\n * <script>\n *   var tooltipObj = new Tooltip({ content: 'Tooltip text' });\n *   tooltipObj.appendTo(\"#tooltip\");\n * </script>\n * ```\n */\nvar Tooltip = /** @class */ (function (_super) {\n    __extends(Tooltip, _super);\n    /**\n     * Constructor for creating the Tooltip Component\n     *\n     * @param {TooltipModel} options - specifies the options for the constructor\n     * @param {string| HTMLElement} element - specifies the element for the constructor\n     *\n     */\n    function Tooltip(options, element) {\n        var _this = _super.call(this, options, element) || this;\n        _this.mouseMoveEvent = null;\n        _this.mouseMoveTarget = null;\n        _this.containerElement = null;\n        _this.isBodyContainer = true;\n        return _this;\n    }\n    Tooltip.prototype.initialize = function () {\n        this.formatPosition();\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([this.element], ROOT);\n    };\n    Tooltip.prototype.formatPosition = function () {\n        var _a, _b;\n        if (!this.position) {\n            return;\n        }\n        if (this.position.indexOf('Top') === 0 || this.position.indexOf('Bottom') === 0) {\n            _a = this.position.split(/(?=[A-Z])/), this.tooltipPositionY = _a[0], this.tooltipPositionX = _a[1];\n        }\n        else {\n            _b = this.position.split(/(?=[A-Z])/), this.tooltipPositionX = _b[0], this.tooltipPositionY = _b[1];\n        }\n    };\n    Tooltip.prototype.renderArrow = function () {\n        this.setTipClass(this.position);\n        var tip = this.createElement('div', { className: ARROW_TIP + ' ' + this.tipClass });\n        tip.appendChild(this.createElement('div', { className: ARROW_TIP_OUTER + ' ' + this.tipClass }));\n        tip.appendChild(this.createElement('div', { className: ARROW_TIP_INNER + ' ' + this.tipClass }));\n        this.tooltipEle.appendChild(tip);\n    };\n    Tooltip.prototype.setTipClass = function (position) {\n        if (position.indexOf('Right') === 0) {\n            this.tipClass = TIP_LEFT;\n        }\n        else if (position.indexOf('Bottom') === 0) {\n            this.tipClass = TIP_TOP;\n        }\n        else if (position.indexOf('Left') === 0) {\n            this.tipClass = TIP_RIGHT;\n        }\n        else {\n            this.tipClass = TIP_BOTTOM;\n        }\n    };\n    Tooltip.prototype.renderPopup = function (target) {\n        var elePos = this.mouseTrail ? { top: 0, left: 0 } : this.getTooltipPosition(target);\n        this.tooltipEle.classList.remove(POPUP_LIB);\n        this.popupObj = new _popup_popup__WEBPACK_IMPORTED_MODULE_1__.Popup(this.tooltipEle, {\n            height: this.height,\n            width: this.width,\n            position: { X: elePos.left, Y: elePos.top },\n            enableRtl: this.enableRtl,\n            open: this.openPopupHandler.bind(this),\n            close: this.closePopupHandler.bind(this)\n        });\n    };\n    Tooltip.prototype.getScalingFactor = function (target) {\n        if (!target) {\n            return { x: 1, y: 1 };\n        }\n        var scalingFactors = { x: 1, y: 1 };\n        var elementsWithTransform = target.closest('[style*=\"transform: scale\"]');\n        if (elementsWithTransform && elementsWithTransform !== this.tooltipEle && elementsWithTransform.contains(this.tooltipEle)) {\n            var computedStyle = window.getComputedStyle(elementsWithTransform);\n            var transformValue = computedStyle.getPropertyValue('transform');\n            var matrixValues = transformValue.match(/matrix\\(([^)]+)\\)/)[1].split(',').map(parseFloat);\n            scalingFactors.x = matrixValues[0];\n            scalingFactors.y = matrixValues[3];\n        }\n        return scalingFactors;\n    };\n    Tooltip.prototype.getTooltipPosition = function (target) {\n        this.tooltipEle.style.display = 'block';\n        var parentWithZoomStyle = this.element.closest('[style*=\"zoom\"]');\n        if (parentWithZoomStyle) {\n            if (!parentWithZoomStyle.contains(this.tooltipEle)) {\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                this.tooltipEle.style.zoom = getComputedStyle(parentWithZoomStyle).zoom;\n            }\n        }\n        var pos = (0,_common_position__WEBPACK_IMPORTED_MODULE_2__.calculatePosition)(target, this.tooltipPositionX, this.tooltipPositionY, !this.isBodyContainer, this.isBodyContainer ? null : this.containerElement.getBoundingClientRect());\n        var scalingFactors = this.getScalingFactor(target);\n        var offsetPos = this.calculateTooltipOffset(this.position, scalingFactors.x, scalingFactors.y);\n        var collisionPosition = this.calculateElementPosition(pos, offsetPos);\n        var collisionLeft = collisionPosition[0];\n        var collisionTop = collisionPosition[1];\n        var elePos = this.collisionFlipFit(target, collisionLeft, collisionTop);\n        elePos.left = elePos.left / scalingFactors.x;\n        elePos.top = elePos.top / scalingFactors.y;\n        this.tooltipEle.style.display = '';\n        return elePos;\n    };\n    Tooltip.prototype.windowResize = function () {\n        this.reposition(this.findTarget());\n    };\n    Tooltip.prototype.reposition = function (target) {\n        if (this.popupObj && target) {\n            var elePos = this.getTooltipPosition(target);\n            this.popupObj.position = { X: elePos.left, Y: elePos.top };\n            this.popupObj.dataBind();\n        }\n    };\n    Tooltip.prototype.openPopupHandler = function () {\n        if (!this.mouseTrail && this.needTemplateReposition()) {\n            this.reposition(this.findTarget());\n        }\n        this.trigger('afterOpen', this.tooltipEventArgs);\n        this.tooltipEventArgs = null;\n    };\n    Tooltip.prototype.closePopupHandler = function () {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        if (this.isReact && !(this.opensOn === 'Click' || typeof (this.content) === 'function')) {\n            this.clearTemplate(['content']);\n        }\n        this.clear();\n        var tooltipAfterCloseEventArgs = {\n            type: this.tooltipEventArgs.event ? this.tooltipEventArgs.event.type : null, cancel: false,\n            target: this.tooltipEventArgs.target, event: this.tooltipEventArgs.event ? this.tooltipEventArgs.event : null,\n            element: this.tooltipEle, isInteracted: !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.tooltipEventArgs.event)\n        };\n        this.trigger('afterClose', tooltipAfterCloseEventArgs);\n        tooltipAfterCloseEventArgs = null;\n    };\n    Tooltip.prototype.calculateTooltipOffset = function (position, xScalingFactor, yScalingFactor) {\n        if (xScalingFactor === void 0) { xScalingFactor = 1; }\n        if (yScalingFactor === void 0) { yScalingFactor = 1; }\n        var pos = { top: 0, left: 0 };\n        var tipWidth;\n        var tipHeight;\n        var tooltipEleWidth;\n        var tooltipEleHeight;\n        var arrowEle;\n        var tipAdjust;\n        var tipHeightAdjust;\n        var tipWidthAdjust;\n        if (xScalingFactor !== 1 || yScalingFactor !== 1) {\n            var tooltipEleRect = this.tooltipEle.getBoundingClientRect();\n            var arrowEleRect = void 0;\n            tooltipEleWidth = Math.round(tooltipEleRect.width);\n            tooltipEleHeight = Math.round(tooltipEleRect.height);\n            arrowEle = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('.' + ARROW_TIP, this.tooltipEle);\n            if (arrowEle) {\n                arrowEleRect = arrowEle.getBoundingClientRect();\n            }\n            tipWidth = arrowEle ? Math.round(arrowEleRect.width) : 0;\n            tipHeight = arrowEle ? Math.round(arrowEleRect.height) : 0;\n            tipAdjust = (this.showTipPointer ? SHOW_POINTER_TIP_GAP : HIDE_POINTER_TIP_GAP);\n            tipHeightAdjust = (tipHeight / 2) + POINTER_ADJUST + (tooltipEleHeight - (this.tooltipEle.clientHeight * yScalingFactor));\n            tipWidthAdjust = (tipWidth / 2) + POINTER_ADJUST + (tooltipEleWidth - (this.tooltipEle.clientWidth * xScalingFactor));\n        }\n        else {\n            tooltipEleWidth = this.tooltipEle.offsetWidth;\n            tooltipEleHeight = this.tooltipEle.offsetHeight;\n            arrowEle = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('.' + ARROW_TIP, this.tooltipEle);\n            tipWidth = arrowEle ? arrowEle.offsetWidth : 0;\n            tipHeight = arrowEle ? arrowEle.offsetHeight : 0;\n            tipAdjust = (this.showTipPointer ? SHOW_POINTER_TIP_GAP : HIDE_POINTER_TIP_GAP);\n            tipHeightAdjust = (tipHeight / 2) + POINTER_ADJUST + (this.tooltipEle.offsetHeight - this.tooltipEle.clientHeight);\n            tipWidthAdjust = (tipWidth / 2) + POINTER_ADJUST + (this.tooltipEle.offsetWidth - this.tooltipEle.clientWidth);\n        }\n        if (this.mouseTrail) {\n            tipAdjust += MOUSE_TRAIL_GAP;\n        }\n        switch (position) {\n            case 'RightTop':\n                pos.left += tipWidth + tipAdjust;\n                pos.top -= tooltipEleHeight - tipHeightAdjust;\n                break;\n            case 'RightCenter':\n                pos.left += tipWidth + tipAdjust;\n                pos.top -= (tooltipEleHeight / 2);\n                break;\n            case 'RightBottom':\n                pos.left += tipWidth + tipAdjust;\n                pos.top -= (tipHeightAdjust);\n                break;\n            case 'BottomRight':\n                pos.top += (tipHeight + tipAdjust);\n                pos.left -= (tipWidthAdjust);\n                break;\n            case 'BottomCenter':\n                pos.top += (tipHeight + tipAdjust);\n                pos.left -= (tooltipEleWidth / 2);\n                break;\n            case 'BottomLeft':\n                pos.top += (tipHeight + tipAdjust);\n                pos.left -= (tooltipEleWidth - tipWidthAdjust);\n                break;\n            case 'LeftBottom':\n                pos.left -= (tipWidth + tooltipEleWidth + tipAdjust);\n                pos.top -= (tipHeightAdjust);\n                break;\n            case 'LeftCenter':\n                pos.left -= (tipWidth + tooltipEleWidth + tipAdjust);\n                pos.top -= (tooltipEleHeight / 2);\n                break;\n            case 'LeftTop':\n                pos.left -= (tipWidth + tooltipEleWidth + tipAdjust);\n                pos.top -= (tooltipEleHeight - tipHeightAdjust);\n                break;\n            case 'TopLeft':\n                pos.top -= (tooltipEleHeight + tipHeight + tipAdjust);\n                pos.left -= (tooltipEleWidth - tipWidthAdjust);\n                break;\n            case 'TopRight':\n                pos.top -= (tooltipEleHeight + tipHeight + tipAdjust);\n                pos.left -= (tipWidthAdjust);\n                break;\n            default:\n                pos.top -= (tooltipEleHeight + tipHeight + tipAdjust);\n                pos.left -= (tooltipEleWidth / 2);\n                break;\n        }\n        pos.left += this.offsetX;\n        pos.top += this.offsetY;\n        return pos;\n    };\n    Tooltip.prototype.updateTipPosition = function (position) {\n        var selEle = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.selectAll)('.' + ARROW_TIP + ',.' + ARROW_TIP_OUTER + ',.' + ARROW_TIP_INNER, this.tooltipEle);\n        var removeList = [TIP_BOTTOM, TIP_TOP, TIP_LEFT, TIP_RIGHT];\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)(selEle, removeList);\n        this.setTipClass(position);\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)(selEle, this.tipClass);\n    };\n    Tooltip.prototype.adjustArrow = function (target, position, tooltipPositionX, tooltipPositionY) {\n        var arrowEle = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('.' + ARROW_TIP, this.tooltipEle);\n        if (this.showTipPointer === false || arrowEle === null) {\n            return;\n        }\n        this.updateTipPosition(position);\n        var leftValue;\n        var topValue;\n        this.tooltipEle.style.display = 'block';\n        var tooltipWidth = this.tooltipEle.clientWidth;\n        var tooltipHeight = this.tooltipEle.clientHeight;\n        var arrowInnerELe = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('.' + ARROW_TIP_INNER, this.tooltipEle);\n        var tipWidth = arrowEle.offsetWidth;\n        var tipHeight = arrowEle.offsetHeight;\n        this.tooltipEle.style.display = '';\n        if (this.tipClass === TIP_BOTTOM || this.tipClass === TIP_TOP) {\n            if (this.tipClass === TIP_BOTTOM) {\n                topValue = '99.9%';\n                // Arrow icon aligned -2px height from ArrowOuterTip div\n                arrowInnerELe.style.top = '-' + (tipHeight - 2) + 'px';\n            }\n            else {\n                topValue = -(tipHeight - 1) + 'px';\n                // Arrow icon aligned -6px height from ArrowOuterTip div\n                arrowInnerELe.style.top = '-' + (tipHeight - 6) + 'px';\n            }\n            if (target) {\n                var tipPosExclude = tooltipPositionX !== 'Center' || (tooltipWidth > target.offsetWidth) || this.mouseTrail;\n                if ((tipPosExclude && tooltipPositionX === 'Left') || (!tipPosExclude && this.tipPointerPosition === 'End')) {\n                    leftValue = (tooltipWidth - tipWidth - POINTER_ADJUST) + 'px';\n                }\n                else if ((tipPosExclude && tooltipPositionX === 'Right') || (!tipPosExclude && this.tipPointerPosition === 'Start')) {\n                    leftValue = POINTER_ADJUST + 'px';\n                }\n                else if ((tipPosExclude) && (this.tipPointerPosition === 'End' || this.tipPointerPosition === 'Start')) {\n                    leftValue = (this.tipPointerPosition === 'End') ? ((target.offsetWidth + ((this.tooltipEle.offsetWidth - target.offsetWidth) / 2)) - (tipWidth / 2)) - POINTER_ADJUST + 'px'\n                        : ((this.tooltipEle.offsetWidth - target.offsetWidth) / 2) - (tipWidth / 2) + POINTER_ADJUST + 'px';\n                }\n                else {\n                    leftValue = ((tooltipWidth / 2) - (tipWidth / 2)) + 'px';\n                }\n            }\n        }\n        else {\n            if (this.tipClass === TIP_RIGHT) {\n                leftValue = '99.9%';\n                // Arrow icon aligned -2px left from ArrowOuterTip div\n                arrowInnerELe.style.left = '-' + (tipWidth - 2) + 'px';\n            }\n            else {\n                leftValue = -(tipWidth - 1) + 'px';\n                // Arrow icon aligned -2px from ArrowOuterTip width\n                arrowInnerELe.style.left = (-(tipWidth) + (tipWidth - 2)) + 'px';\n            }\n            var tipPosExclude = tooltipPositionY !== 'Center' || (tooltipHeight > target.offsetHeight) || this.mouseTrail;\n            if ((tipPosExclude && tooltipPositionY === 'Top') || (!tipPosExclude && this.tipPointerPosition === 'End')) {\n                topValue = (tooltipHeight - tipHeight - POINTER_ADJUST) + 'px';\n            }\n            else if ((tipPosExclude && tooltipPositionY === 'Bottom') || (!tipPosExclude && this.tipPointerPosition === 'Start')) {\n                topValue = POINTER_ADJUST + 'px';\n            }\n            else {\n                topValue = ((tooltipHeight / 2) - (tipHeight / 2)) + 'px';\n            }\n        }\n        arrowEle.style.top = topValue;\n        arrowEle.style.left = leftValue;\n    };\n    Tooltip.prototype.renderContent = function (target) {\n        var _this = this;\n        var tooltipContent = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('.' + CONTENT, this.tooltipEle);\n        if (this.cssClass) {\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([this.tooltipEle], this.cssClass.split(' '));\n        }\n        if (target && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(target.getAttribute('title'))) {\n            target.setAttribute('data-content', target.getAttribute('title'));\n            target.removeAttribute('title');\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.content)) {\n            tooltipContent.innerHTML = '';\n            if (this.content instanceof HTMLElement) {\n                tooltipContent.appendChild(this.content);\n            }\n            else if (typeof this.content === 'string') {\n                if (this.isAngular) {\n                    this.setProperties({ content: _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.SanitizeHtmlHelper.sanitize(this.content) }, true);\n                }\n                else {\n                    this.content = (this.enableHtmlSanitizer) ? _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.SanitizeHtmlHelper.sanitize(this.content) : this.content;\n                }\n                if (this.enableHtmlParse) {\n                    var tempFunction = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.compile)(this.content);\n                    var tempArr = tempFunction({}, this, 'content', this.element.id + 'content', undefined, undefined, tooltipContent, this.root);\n                    if (tempArr) {\n                        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.append)(tempArr, tooltipContent);\n                    }\n                }\n                else {\n                    tooltipContent['textContent'] = this.content;\n                }\n            }\n            else {\n                var templateFunction = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.compile)(this.content);\n                var tempArr = templateFunction({}, this, 'content', this.element.id + 'content', undefined, undefined, tooltipContent);\n                if (tempArr) {\n                    if (this.isAngular) {\n                        setTimeout(function () {\n                            _this.reposition(target);\n                        }, 1);\n                    }\n                    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.append)(tempArr, tooltipContent);\n                }\n                this.renderReactTemplates();\n            }\n        }\n        else {\n            if (target && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(target.getAttribute('data-content'))) {\n                tooltipContent.innerHTML = target.getAttribute('data-content');\n            }\n        }\n    };\n    Tooltip.prototype.renderCloseIcon = function () {\n        if (!this.isSticky) {\n            var existingCloseIcon = this.tooltipEle.querySelector('.' + ICON + '.' + CLOSE);\n            if (existingCloseIcon) {\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.remove)(existingCloseIcon);\n            }\n            return;\n        }\n        var tipClose = this.createElement('div', { className: ICON + ' ' + CLOSE, attrs: { role: 'button', 'aria-label': 'Press escape to close the Tooltip' } });\n        this.tooltipEle.appendChild(tipClose);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(tipClose, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.touchStartEvent, this.onStickyClose, this);\n    };\n    Tooltip.prototype.addDescribedBy = function (target, id) {\n        var describedby = (target.getAttribute('aria-describedby') || '').split(/\\s+/);\n        if (describedby.indexOf(id) < 0) {\n            describedby.push(id);\n        }\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.attributes)(target, { 'aria-describedby': describedby.join(' ').trim(), 'data-tooltip-id': id });\n    };\n    Tooltip.prototype.removeDescribedBy = function (target) {\n        var id = target.getAttribute('data-tooltip-id');\n        var describedby = (target.getAttribute('aria-describedby') || '').split(/\\s+/);\n        var index = describedby.indexOf(id);\n        if (index !== -1) {\n            describedby.splice(index, 1);\n        }\n        target.removeAttribute('data-tooltip-id');\n        var orgdescribedby = describedby.join(' ').trim();\n        if (orgdescribedby) {\n            target.setAttribute('aria-describedby', orgdescribedby);\n        }\n        else {\n            target.removeAttribute('aria-describedby');\n        }\n    };\n    Tooltip.prototype.tapHoldHandler = function (evt) {\n        clearTimeout(this.autoCloseTimer);\n        this.targetHover(evt.originalEvent);\n    };\n    Tooltip.prototype.touchEndHandler = function () {\n        var _this = this;\n        if (this.isSticky) {\n            return;\n        }\n        var close = function () {\n            _this.close();\n        };\n        this.autoCloseTimer = setTimeout(close, TOUCHEND_HIDE_DELAY);\n    };\n    Tooltip.prototype.targetClick = function (e) {\n        var target;\n        if (this.target) {\n            target = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(e.target, this.target);\n        }\n        else {\n            target = this.element;\n        }\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(target)) {\n            return;\n        }\n        var mouseEvent = e;\n        if (target.getAttribute('data-tooltip-id') === null) {\n            if (!(mouseEvent.type === 'mousedown' && mouseEvent.button === 2)) {\n                this.targetHover(e);\n            }\n        }\n        else if (!this.isSticky) {\n            this.hideTooltip(this.animation.close, e, target);\n        }\n    };\n    Tooltip.prototype.targetHover = function (e) {\n        var target;\n        if (this.target) {\n            target = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(e.target, this.target);\n        }\n        else {\n            target = this.element;\n        }\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(target) || (target.getAttribute('data-tooltip-id') !== null && this.closeDelay === 0)) {\n            return;\n        }\n        var targetList = [].slice.call((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.selectAll)('[data-tooltip-id= \"' + this.ctrlId + '_content\"]', document));\n        for (var _i = 0, targetList_1 = targetList; _i < targetList_1.length; _i++) {\n            var target_1 = targetList_1[_i];\n            this.restoreElement(target_1);\n        }\n        this.showTooltip(target, this.animation.open, e);\n    };\n    Tooltip.prototype.mouseMoveBeforeOpen = function (e) {\n        this.mouseMoveEvent = e;\n    };\n    Tooltip.prototype.mouseMoveBeforeRemove = function () {\n        if (this.mouseMoveTarget) {\n            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(this.mouseMoveTarget, 'mousemove touchstart', this.mouseMoveBeforeOpen);\n        }\n    };\n    Tooltip.prototype.showTooltip = function (target, showAnimation, e) {\n        var _this = this;\n        clearTimeout(this.showTimer);\n        clearTimeout(this.hideTimer);\n        if (this.openDelay && this.mouseTrail) {\n            this.mouseMoveBeforeRemove();\n            this.mouseMoveTarget = target;\n            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(this.mouseMoveTarget, 'mousemove touchstart', this.mouseMoveBeforeOpen, this);\n        }\n        this.tooltipEventArgs = {\n            type: e ? e.type : null, cancel: false, target: target, event: e ? e : null,\n            element: this.tooltipEle, isInteracted: !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(e)\n        };\n        var observeCallback = function (beforeRenderArgs) {\n            _this.beforeRenderCallback(beforeRenderArgs, target, e, showAnimation);\n        };\n        this.trigger('beforeRender', this.tooltipEventArgs, observeCallback.bind(this));\n    };\n    Tooltip.prototype.beforeRenderCallback = function (beforeRenderArgs, target, e, showAnimation) {\n        if (beforeRenderArgs.cancel) {\n            this.isHidden = true;\n            this.clear();\n            this.mouseMoveBeforeRemove();\n        }\n        else {\n            this.isHidden = false;\n            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.tooltipEle)) {\n                this.ctrlId = this.element.getAttribute('id') ?\n                    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getUniqueID)(this.element.getAttribute('id')) : (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getUniqueID)('tooltip');\n                this.tooltipEle = this.createElement('div', {\n                    className: TOOLTIP_WRAP + ' ' + POPUP_ROOT + ' ' + POPUP_LIB, attrs: {\n                        role: 'tooltip', 'aria-hidden': 'false', 'id': this.ctrlId + '_content'\n                    }\n                });\n                this.tooltipEle.style.width = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.formatUnit)(this.width);\n                this.tooltipEle.style.height = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.formatUnit)(this.height);\n                this.tooltipEle.style.position = 'absolute';\n                this.tooltipBeforeRender(target, this);\n                this.tooltipAfterRender(target, e, showAnimation, this);\n            }\n            else {\n                if (target) {\n                    this.adjustArrow(target, this.position, this.tooltipPositionX, this.tooltipPositionY);\n                    this.addDescribedBy(target, this.ctrlId + '_content');\n                    this.renderContent(target);\n                    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Animation.stop(this.tooltipEle);\n                    this.reposition(target);\n                    this.tooltipAfterRender(target, e, showAnimation, this);\n                }\n            }\n        }\n    };\n    Tooltip.prototype.appendContainer = function (ctrlObj) {\n        if (typeof this.container == 'string') {\n            if (this.container === 'body') {\n                this.containerElement = document.body;\n            }\n            else {\n                this.isBodyContainer = false;\n                this.containerElement = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)(this.container, document);\n            }\n        }\n        else if (this.container instanceof HTMLElement) {\n            this.containerElement = this.container;\n            this.isBodyContainer = this.containerElement.tagName === 'BODY';\n        }\n        if (!this.isBodyContainer) {\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([this.containerElement], POPUP_CONTAINER);\n        }\n        this.containerElement.appendChild(ctrlObj.tooltipEle);\n    };\n    Tooltip.prototype.tooltipBeforeRender = function (target, ctrlObj) {\n        if (target) {\n            if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice) {\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([ctrlObj.tooltipEle], DEVICE);\n            }\n            if (ctrlObj.width !== 'auto') {\n                ctrlObj.tooltipEle.style.maxWidth = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.formatUnit)(ctrlObj.width);\n            }\n            ctrlObj.tooltipEle.appendChild(ctrlObj.createElement('div', { className: CONTENT }));\n            this.appendContainer(ctrlObj);\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([ctrlObj.tooltipEle], HIDE_POPUP);\n            ctrlObj.addDescribedBy(target, ctrlObj.ctrlId + '_content');\n            ctrlObj.renderContent(target);\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([ctrlObj.tooltipEle], POPUP_OPEN);\n            if (ctrlObj.showTipPointer) {\n                ctrlObj.renderArrow();\n            }\n            ctrlObj.renderCloseIcon();\n            ctrlObj.renderPopup(target);\n            ctrlObj.adjustArrow(target, ctrlObj.position, ctrlObj.tooltipPositionX, ctrlObj.tooltipPositionY);\n            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Animation.stop(ctrlObj.tooltipEle);\n            ctrlObj.reposition(target);\n        }\n    };\n    Tooltip.prototype.tooltipAfterRender = function (target, e, showAnimation, ctrlObj) {\n        if (target) {\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([ctrlObj.tooltipEle], POPUP_OPEN);\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([ctrlObj.tooltipEle], POPUP_CLOSE);\n            ctrlObj.tooltipEventArgs = {\n                type: e ? e.type : null, cancel: false, target: target, event: e ? e : null,\n                element: ctrlObj.tooltipEle, isInteracted: !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(e)\n            };\n            if (ctrlObj.needTemplateReposition() && !ctrlObj.mouseTrail && (showAnimation.effect === 'None' || showAnimation.effect === 'FadeIn' ||\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                (this.isReact && typeof ctrlObj.content != 'string'))) {\n                ctrlObj.tooltipEle.style.display = 'none';\n            }\n            var observeCallback = function (observedArgs) {\n                ctrlObj.beforeOpenCallback(observedArgs, target, showAnimation, e);\n            };\n            ctrlObj.trigger('beforeOpen', ctrlObj.tooltipEventArgs, observeCallback.bind(ctrlObj));\n        }\n    };\n    Tooltip.prototype.beforeOpenCallback = function (observedArgs, target, showAnimation, e) {\n        var _this = this;\n        if (observedArgs.cancel) {\n            this.isHidden = true;\n            this.clear();\n            this.mouseMoveBeforeRemove();\n            this.restoreElement(target);\n        }\n        else {\n            var openAnimation_1 = {\n                name: (showAnimation.effect === 'None' && _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.animationMode === 'Enable') ? 'FadeIn' : this.animation.open.effect,\n                duration: showAnimation.duration,\n                delay: showAnimation.delay,\n                timingFunction: 'easeOut'\n            };\n            if (showAnimation.effect === 'None') {\n                openAnimation_1 = undefined;\n            }\n            if (this.openDelay > 0) {\n                var show = function () {\n                    if (_this.mouseTrail) {\n                        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(target, 'mousemove touchstart mouseenter', _this.onMouseMove, _this);\n                    }\n                    if (_this.popupObj) {\n                        _this.popupObj.show(openAnimation_1, target);\n                        if (_this.mouseMoveEvent && _this.mouseTrail) {\n                            _this.onMouseMove(_this.mouseMoveEvent);\n                        }\n                    }\n                };\n                this.showTimer = setTimeout(show, this.openDelay);\n            }\n            else {\n                if (this.popupObj) {\n                    this.popupObj.show(openAnimation_1, target);\n                }\n            }\n        }\n        if (e) {\n            this.wireMouseEvents(e, target);\n        }\n    };\n    Tooltip.prototype.needTemplateReposition = function () {\n        // eslint-disable-next-line\n        var tooltip = this;\n        return !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(tooltip.viewContainerRef)\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            && typeof tooltip.viewContainerRef !== 'string' || this.isReact;\n    };\n    Tooltip.prototype.checkCollision = function (target, x, y) {\n        var elePos = {\n            left: x, top: y, position: this.position,\n            horizontal: this.tooltipPositionX, vertical: this.tooltipPositionY\n        };\n        var affectedPos = (0,_common_collision__WEBPACK_IMPORTED_MODULE_3__.isCollide)(this.tooltipEle, this.checkCollideTarget(), x, y);\n        if (affectedPos.length > 0) {\n            elePos.horizontal = affectedPos.indexOf('left') >= 0 ? 'Right' : affectedPos.indexOf('right') >= 0 ? 'Left' :\n                this.tooltipPositionX;\n            elePos.vertical = affectedPos.indexOf('top') >= 0 ? 'Bottom' : affectedPos.indexOf('bottom') >= 0 ? 'Top' :\n                this.tooltipPositionY;\n        }\n        return elePos;\n    };\n    Tooltip.prototype.calculateElementPosition = function (pos, offsetPos) {\n        return [this.isBodyContainer ? pos.left + offsetPos.left :\n                (pos.left - this.containerElement.getBoundingClientRect().left) +\n                    offsetPos.left + window.pageXOffset + this.containerElement.scrollLeft,\n            this.isBodyContainer ? pos.top + offsetPos.top :\n                (pos.top - this.containerElement.getBoundingClientRect().top) +\n                    offsetPos.top + window.pageYOffset + this.containerElement.scrollTop];\n    };\n    Tooltip.prototype.collisionFlipFit = function (target, x, y) {\n        var elePos = this.checkCollision(target, x, y);\n        var newpos = elePos.position;\n        if (this.tooltipPositionY !== elePos.vertical) {\n            newpos = ((this.position.indexOf('Bottom') === 0 || this.position.indexOf('Top') === 0) ?\n                elePos.vertical + this.tooltipPositionX : this.tooltipPositionX + elePos.vertical);\n        }\n        if (this.tooltipPositionX !== elePos.horizontal) {\n            if (newpos.indexOf('Left') === 0) {\n                elePos.vertical = (newpos === 'LeftTop' || newpos === 'LeftCenter') ? 'Top' : 'Bottom';\n                newpos = (elePos.vertical + 'Left');\n            }\n            if (newpos.indexOf('Right') === 0) {\n                elePos.vertical = (newpos === 'RightTop' || newpos === 'RightCenter') ? 'Top' : 'Bottom';\n                newpos = (elePos.vertical + 'Right');\n            }\n            elePos.horizontal = this.tooltipPositionX;\n        }\n        this.tooltipEventArgs = {\n            type: null, cancel: false, target: target, event: null,\n            element: this.tooltipEle, collidedPosition: newpos\n        };\n        this.trigger('beforeCollision', this.tooltipEventArgs);\n        if (this.tooltipEventArgs.cancel) {\n            newpos = this.position;\n        }\n        else {\n            var elePosVertical = elePos.vertical;\n            var elePosHorizontal = elePos.horizontal;\n            if (elePos.position !== newpos) {\n                var pos = (0,_common_position__WEBPACK_IMPORTED_MODULE_2__.calculatePosition)(target, elePosHorizontal, elePosVertical, !this.isBodyContainer, this.isBodyContainer ? null : this.containerElement.getBoundingClientRect());\n                this.adjustArrow(target, newpos, elePosHorizontal, elePosVertical);\n                var scalingFactors = this.getScalingFactor(target);\n                var offsetPos = this.calculateTooltipOffset(newpos, scalingFactors.x, scalingFactors.y);\n                offsetPos.top -= this.getOffSetPosition('TopBottom', newpos, this.offsetY);\n                offsetPos.left -= this.getOffSetPosition('RightLeft', newpos, this.offsetX);\n                elePos.position = newpos;\n                var elePosition = this.calculateElementPosition(pos, offsetPos);\n                elePos.left = elePosition[0];\n                elePos.top = elePosition[1];\n            }\n            else {\n                this.adjustArrow(target, newpos, elePosHorizontal, elePosVertical);\n            }\n        }\n        var eleOffset = { left: elePos.left, top: elePos.top };\n        var position = this.isBodyContainer ?\n            (0,_common_collision__WEBPACK_IMPORTED_MODULE_3__.fit)(this.tooltipEle, this.checkCollideTarget(), { X: true, Y: this.windowCollision }, eleOffset) : eleOffset;\n        this.tooltipEle.style.display = 'block';\n        var arrowEle = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('.' + ARROW_TIP, this.tooltipEle);\n        if (this.showTipPointer && arrowEle != null && (newpos.indexOf('Bottom') === 0 || newpos.indexOf('Top') === 0)) {\n            var arrowleft = parseInt(arrowEle.style.left, 10) - (position.left - elePos.left);\n            if (arrowleft < 0) {\n                arrowleft = 0;\n            }\n            else if ((arrowleft + arrowEle.offsetWidth) > this.tooltipEle.clientWidth) {\n                arrowleft = this.tooltipEle.clientWidth - arrowEle.offsetWidth;\n            }\n            arrowEle.style.left = arrowleft.toString() + 'px';\n        }\n        this.tooltipEle.style.display = '';\n        eleOffset.left = position.left;\n        eleOffset.top = position.top;\n        return eleOffset;\n    };\n    Tooltip.prototype.getOffSetPosition = function (positionString, newPos, offsetType) {\n        return ((positionString.indexOf(this.position.split(/(?=[A-Z])/)[0]) !== -1) &&\n            (positionString.indexOf(newPos.split(/(?=[A-Z])/)[0]) !== -1)) ? (2 * offsetType) : 0;\n    };\n    Tooltip.prototype.checkCollideTarget = function () {\n        return !this.windowCollision && this.target ? this.element : null;\n    };\n    Tooltip.prototype.hideTooltip = function (hideAnimation, e, targetElement) {\n        var _this = this;\n        if (this.closeDelay > 0) {\n            clearTimeout(this.hideTimer);\n            clearTimeout(this.showTimer);\n            var hide = function () {\n                if (_this.closeDelay && _this.tooltipEle && _this.isTooltipOpen) {\n                    return;\n                }\n                _this.tooltipHide(hideAnimation, e, targetElement);\n            };\n            this.hideTimer = setTimeout(hide, this.closeDelay);\n        }\n        else {\n            this.tooltipHide(hideAnimation, e, targetElement);\n        }\n    };\n    Tooltip.prototype.tooltipHide = function (hideAnimation, e, targetElement) {\n        var _this = this;\n        var target;\n        if (e) {\n            target = this.target ? (targetElement || e.target) : this.element;\n        }\n        else {\n            target = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('[data-tooltip-id= \"' + this.ctrlId + '_content\"]', document);\n        }\n        this.tooltipEventArgs = {\n            type: e ? e.type : null, cancel: false, target: target, event: e ? e : null,\n            element: this.tooltipEle, isInteracted: !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(e)\n        };\n        // this line commented for close the tooltip popup element even the target element destroyed in a page.\n        //if (isNullOrUndefined(target)) { return; }\n        this.trigger('beforeClose', this.tooltipEventArgs, function (observedArgs) {\n            if (!observedArgs.cancel) {\n                _this.mouseMoveBeforeRemove();\n                _this.popupHide(hideAnimation, target, e);\n            }\n            else {\n                _this.isHidden = false;\n            }\n        });\n    };\n    Tooltip.prototype.popupHide = function (hideAnimation, target, e) {\n        if (target && e) {\n            this.restoreElement(target);\n        }\n        this.isHidden = true;\n        var closeAnimation = {\n            name: (hideAnimation.effect === 'None' && _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.animationMode === 'Enable') ? 'FadeOut' : this.animation.close.effect,\n            duration: hideAnimation.duration,\n            delay: hideAnimation.delay,\n            timingFunction: 'easeIn'\n        };\n        if (hideAnimation.effect === 'None') {\n            closeAnimation = undefined;\n        }\n        if (this.popupObj) {\n            this.popupObj.hide(closeAnimation);\n        }\n    };\n    Tooltip.prototype.restoreElement = function (target) {\n        this.unwireMouseEvents(target);\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(target.getAttribute('data-content'))) {\n            target.setAttribute('title', target.getAttribute('data-content'));\n            target.removeAttribute('data-content');\n        }\n        this.removeDescribedBy(target);\n    };\n    Tooltip.prototype.clear = function () {\n        var target = this.findTarget();\n        if (target) {\n            this.restoreElement(target);\n        }\n        if (this.tooltipEle) {\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([this.tooltipEle], POPUP_CLOSE);\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([this.tooltipEle], POPUP_OPEN);\n        }\n        if (this.isHidden) {\n            if (this.popupObj) {\n                this.popupObj.destroy();\n            }\n            if (this.tooltipEle) {\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.remove)(this.tooltipEle);\n            }\n            this.tooltipEle = null;\n            this.popupObj = null;\n        }\n    };\n    Tooltip.prototype.tooltipHover = function () {\n        if (this.tooltipEle) {\n            this.isTooltipOpen = true;\n        }\n    };\n    Tooltip.prototype.tooltipMouseOut = function (e) {\n        this.isTooltipOpen = false;\n        this.hideTooltip(this.animation.close, e, this.findTarget());\n    };\n    Tooltip.prototype.onMouseOut = function (e) {\n        var enteredElement = e.relatedTarget;\n        // don't close the tooltip only if it is tooltip content element\n        if (enteredElement && !this.mouseTrail) {\n            var checkForTooltipElement = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(enteredElement, \".\" + TOOLTIP_WRAP + \".\" + POPUP_LIB + \".\" + POPUP_ROOT);\n            if (checkForTooltipElement) {\n                _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(checkForTooltipElement, 'mouseleave', this.tooltipElementMouseOut, this);\n            }\n            else {\n                this.hideTooltip(this.animation.close, e, this.findTarget());\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                if (this.closeDelay === 0 && (this.animation.close.effect === 'None' || (this.isReact && typeof this.content != 'string'))) {\n                    this.clear();\n                }\n            }\n        }\n        else {\n            this.hideTooltip(this.animation.close, e, this.findTarget());\n            this.clear();\n        }\n        if (this.popupObj && !this.popupObj.element.classList.contains(POPUP_OPEN)) {\n            this.clear();\n        }\n    };\n    Tooltip.prototype.tooltipElementMouseOut = function (e) {\n        this.hideTooltip(this.animation.close, e, this.findTarget());\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(this.element, 'mouseleave', this.tooltipElementMouseOut);\n        this.clear();\n    };\n    Tooltip.prototype.onStickyClose = function () {\n        this.close();\n    };\n    Tooltip.prototype.onMouseMove = function (event) {\n        var eventPageX = 0;\n        var eventPageY = 0;\n        if (event.type.indexOf('touch') > -1) {\n            event.preventDefault();\n            eventPageX = event.touches[0].pageX;\n            eventPageY = event.touches[0].pageY;\n        }\n        else {\n            eventPageX = event.pageX;\n            eventPageY = event.pageY;\n        }\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.tooltipEle)) {\n            return;\n        }\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Animation.stop(this.tooltipEle);\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([this.tooltipEle], POPUP_CLOSE);\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([this.tooltipEle], POPUP_OPEN);\n        this.adjustArrow(event.target, this.position, this.tooltipPositionX, this.tooltipPositionY);\n        var scalingFactors = this.getScalingFactor(event.target);\n        var pos = this.calculateTooltipOffset(this.position, scalingFactors.x, scalingFactors.y);\n        var x = eventPageX + pos.left + this.offsetX;\n        var y = eventPageY + pos.top + this.offsetY;\n        var elePos = this.checkCollision(event.target, x, y);\n        if (this.tooltipPositionX !== elePos.horizontal || this.tooltipPositionY !== elePos.vertical) {\n            var newpos = (this.position.indexOf('Bottom') === 0 || this.position.indexOf('Top') === 0) ?\n                elePos.vertical + elePos.horizontal : elePos.horizontal + elePos.vertical;\n            elePos.position = newpos;\n            this.adjustArrow(event.target, elePos.position, elePos.horizontal, elePos.vertical);\n            var colpos = this.calculateTooltipOffset(elePos.position, scalingFactors.x, scalingFactors.y);\n            elePos.left = eventPageX + colpos.left - this.offsetX;\n            elePos.top = eventPageY + colpos.top - this.offsetY;\n        }\n        this.tooltipEle.style.left = elePos.left + 'px';\n        this.tooltipEle.style.top = elePos.top + 'px';\n    };\n    Tooltip.prototype.keyDown = function (event) {\n        if (this.tooltipEle && event.keyCode === 27) {\n            this.close();\n        }\n    };\n    Tooltip.prototype.touchEnd = function (e) {\n        if (this.tooltipEle && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(e.target, '.' + ROOT) === null && !this.isSticky) {\n            this.close();\n        }\n    };\n    Tooltip.prototype.scrollHandler = function (e) {\n        if (this.tooltipEle && !this.isSticky) {\n            if (!((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(e.target, \".\" + TOOLTIP_WRAP + \".\" + POPUP_LIB + \".\" + POPUP_ROOT))\n                && !this.isSticky) {\n                this.close();\n            }\n        }\n    };\n    /**\n     * Core method that initializes the control rendering.\n     *\n     * @private\n     * @returns {void}\n     */\n    Tooltip.prototype.render = function () {\n        this.initialize();\n        this.wireEvents(this.opensOn);\n        this.renderComplete();\n    };\n    /**\n     * Initializes the values of private members.\n     *\n     * @private\n     * @returns {void}\n     */\n    Tooltip.prototype.preRender = function () {\n        this.tipClass = TIP_BOTTOM;\n        this.tooltipPositionX = 'Center';\n        this.tooltipPositionY = 'Top';\n        this.isHidden = true;\n    };\n    /**\n     * Binding events to the Tooltip element.\n     *\n     * @hidden\n     * @param {string} trigger - specify the trigger string to the function\n     * @returns {void}\n     *\n     */\n    Tooltip.prototype.wireEvents = function (trigger) {\n        var triggerList = this.getTriggerList(trigger);\n        for (var _i = 0, triggerList_1 = triggerList; _i < triggerList_1.length; _i++) {\n            var opensOn = triggerList_1[_i];\n            if (opensOn === 'Custom') {\n                return;\n            }\n            if (opensOn === 'Focus') {\n                this.wireFocusEvents();\n            }\n            if (opensOn === 'Click') {\n                _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(this.element, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.touchStartEvent, this.targetClick, this);\n            }\n            if (opensOn === 'Hover') {\n                if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice) {\n                    this.touchModule = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Touch(this.element, {\n                        tapHoldThreshold: TAPHOLD_THRESHOLD,\n                        tapHold: this.tapHoldHandler.bind(this)\n                    });\n                    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(this.element, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.touchEndEvent, this.touchEndHandler, this);\n                }\n                else {\n                    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(this.element, 'mouseover', this.targetHover, this);\n                }\n            }\n        }\n        this.windowResizeBound = this.windowResize.bind(this);\n        this.keyDownBound = this.keyDown.bind(this);\n        this.touchEndBound = this.touchEnd.bind(this);\n        this.scrollWheelBound = this.scrollHandler.bind(this);\n        document.addEventListener('wheel', this.scrollWheelBound);\n        document.addEventListener('scroll', this.scrollWheelBound);\n        document.addEventListener('touchend', this.touchEndBound);\n        document.addEventListener('keydown', this.keyDownBound);\n        window.addEventListener('resize', this.windowResizeBound);\n    };\n    Tooltip.prototype.getTriggerList = function (trigger) {\n        if (!trigger) {\n            return [];\n        }\n        if (trigger === 'Auto') {\n            trigger = (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice) ? 'Hover' : 'Hover Focus';\n        }\n        return trigger.split(' ');\n    };\n    Tooltip.prototype.wireFocusEvents = function () {\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.target)) {\n            var targetList = [].slice.call((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.selectAll)(this.target, this.element));\n            this.targetsList = targetList;\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.targetsList) && this.targetsList.length > 0) {\n                for (var _i = 0, targetList_2 = targetList; _i < targetList_2.length; _i++) {\n                    var target = targetList_2[_i];\n                    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(target, 'focus', this.targetHover, this);\n                }\n            }\n            else {\n                _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(this.element, 'focusin', this.targetHover, this);\n            }\n        }\n        else {\n            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(this.element, 'focusin', this.targetHover, this);\n        }\n    };\n    Tooltip.prototype.wireMouseEvents = function (e, target) {\n        if (this.tooltipEle) {\n            if (!this.isSticky) {\n                if (e.type === 'focus') {\n                    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(target, 'blur', this.onMouseOut, this);\n                }\n                if (e.type === 'focusin') {\n                    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(target, 'focusout', this.onMouseOut, this);\n                }\n                if (e.type === 'mouseover') {\n                    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(target, 'mouseleave', this.onMouseOut, this);\n                }\n                if (this.closeDelay) {\n                    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(this.tooltipEle, 'mouseenter', this.tooltipHover, this);\n                    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(this.tooltipEle, 'mouseleave', this.tooltipMouseOut, this);\n                }\n            }\n            if (this.mouseTrail && this.openDelay === 0) {\n                _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(target, 'mousemove touchstart mouseenter', this.onMouseMove, this);\n            }\n        }\n    };\n    /**\n     * Unbinding events from the element on widget destroy.\n     *\n     * @hidden\n     *\n     * @param {string} trigger - specify the trigger string to the function\n     * @returns {void}\n     *\n     */\n    Tooltip.prototype.unwireEvents = function (trigger) {\n        var triggerList = this.getTriggerList(trigger);\n        for (var _i = 0, triggerList_2 = triggerList; _i < triggerList_2.length; _i++) {\n            var opensOn = triggerList_2[_i];\n            if (opensOn === 'Custom') {\n                return;\n            }\n            if (opensOn === 'Focus') {\n                this.unwireFocusEvents();\n            }\n            if (opensOn === 'Click') {\n                _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(this.element, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.touchStartEvent, this.targetClick);\n            }\n            if (opensOn === 'Hover') {\n                if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice) {\n                    if (this.touchModule) {\n                        this.touchModule.destroy();\n                    }\n                    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(this.element, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.touchEndEvent, this.touchEndHandler);\n                }\n                else {\n                    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(this.element, 'mouseover', this.targetHover);\n                }\n            }\n        }\n        document.removeEventListener('touchend', this.touchEndBound);\n        this.touchEndBound = null;\n        document.removeEventListener('wheel', this.scrollWheelBound);\n        document.removeEventListener('scroll', this.scrollWheelBound);\n        this.scrollWheelBound = null;\n        window.removeEventListener('resize', this.windowResizeBound);\n        this.windowResizeBound = null;\n        document.removeEventListener('keydown', this.keyDownBound);\n        this.keyDownBound = null;\n    };\n    Tooltip.prototype.unwireFocusEvents = function () {\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.target)) {\n            var targetList = [].slice.call((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.selectAll)(this.target, this.element));\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.targetsList) && this.targetsList.length > 0) {\n                for (var _i = 0, targetList_3 = targetList; _i < targetList_3.length; _i++) {\n                    var target = targetList_3[_i];\n                    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(target, 'focus', this.targetHover);\n                }\n            }\n            else {\n                _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(this.element, 'focusin', this.targetHover);\n            }\n        }\n        else {\n            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(this.element, 'focusin', this.targetHover);\n        }\n    };\n    Tooltip.prototype.unwireMouseEvents = function (target) {\n        if (!this.isSticky) {\n            var triggerList = this.getTriggerList(this.opensOn);\n            for (var _i = 0, triggerList_3 = triggerList; _i < triggerList_3.length; _i++) {\n                var opensOn = triggerList_3[_i];\n                if (opensOn === 'Focus') {\n                    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(target, 'blur', this.onMouseOut);\n                    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(target, 'focusout', this.onMouseOut);\n                }\n                if (opensOn === 'Hover' && !_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice) {\n                    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(target, 'mouseleave', this.onMouseOut);\n                }\n            }\n            if (this.closeDelay) {\n                _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(target, 'mouseenter', this.tooltipHover);\n                _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(target, 'mouseleave', this.tooltipMouseOut);\n            }\n        }\n        if (this.mouseTrail) {\n            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(target, 'mousemove touchstart mouseenter', this.onMouseMove);\n        }\n    };\n    Tooltip.prototype.findTarget = function () {\n        var target = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('[data-tooltip-id= \"' + this.ctrlId + '_content\"]', document);\n        return target;\n    };\n    /**\n     * Core method to return the component name.\n     *\n     * @private\n     *\n     * @returns {string} - this method returns module name.\n     */\n    Tooltip.prototype.getModuleName = function () {\n        return 'tooltip';\n    };\n    /**\n     * Returns the properties to be maintained in the persisted state.\n     *\n     * @private\n     *\n     * @returns {string} - this method returns persisted data.\n     */\n    Tooltip.prototype.getPersistData = function () {\n        return this.addOnPersist([]);\n    };\n    /**\n     * Called internally, if any of the property value changed.\n     *\n     * @private\n     *\n     * @param {TooltipModel} newProp - this param gives new property values to the method\n     * @param {TooltipModel} oldProp - this param gives old property values to the method\n     * @returns {void}\n     *\n     */\n    Tooltip.prototype.onPropertyChanged = function (newProp, oldProp) {\n        var targetElement = this.findTarget();\n        for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {\n            var prop = _a[_i];\n            switch (prop) {\n                case 'width':\n                    if (this.tooltipEle && targetElement) {\n                        this.tooltipEle.style.width = this.tooltipEle.style.maxWidth = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.formatUnit)(newProp.width);\n                        this.reposition(targetElement);\n                    }\n                    break;\n                case 'height':\n                    if (this.tooltipEle && targetElement) {\n                        this.tooltipEle.style.height = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.formatUnit)(newProp.height);\n                        this.reposition(targetElement);\n                    }\n                    break;\n                case 'content':\n                    if (this.tooltipEle) {\n                        this.renderContent();\n                    }\n                    break;\n                case 'opensOn':\n                    this.unwireEvents(oldProp.opensOn);\n                    this.wireEvents(newProp.opensOn);\n                    break;\n                case 'position':\n                    this.formatPosition();\n                    if (this.tooltipEle && targetElement) {\n                        var arrowInnerELe = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('.' + ARROW_TIP_INNER, this.tooltipEle);\n                        if (arrowInnerELe) {\n                            arrowInnerELe.style.top = arrowInnerELe.style.left = null;\n                        }\n                        this.reposition(targetElement);\n                    }\n                    break;\n                case 'tipPointerPosition':\n                    if (this.tooltipEle && targetElement) {\n                        this.reposition(targetElement);\n                    }\n                    break;\n                case 'offsetX':\n                    if (this.tooltipEle) {\n                        var x = newProp.offsetX - oldProp.offsetX;\n                        this.tooltipEle.style.left = (parseInt(this.tooltipEle.style.left, 10) + (x)).toString() + 'px';\n                    }\n                    break;\n                case 'offsetY':\n                    if (this.tooltipEle) {\n                        var y = newProp.offsetY - oldProp.offsetY;\n                        this.tooltipEle.style.top = (parseInt(this.tooltipEle.style.top, 10) + (y)).toString() + 'px';\n                    }\n                    break;\n                case 'cssClass':\n                    if (this.tooltipEle) {\n                        if (oldProp.cssClass) {\n                            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([this.tooltipEle], oldProp.cssClass.split(' '));\n                        }\n                        if (newProp.cssClass) {\n                            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([this.tooltipEle], newProp.cssClass.split(' '));\n                        }\n                    }\n                    break;\n                case 'enableRtl':\n                    if (this.tooltipEle) {\n                        if (this.enableRtl) {\n                            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([this.tooltipEle], RTL);\n                        }\n                        else {\n                            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([this.tooltipEle], RTL);\n                        }\n                    }\n                    break;\n                case 'isSticky':\n                    if (this.tooltipEle && targetElement) {\n                        this.renderCloseIcon();\n                        this.reposition(targetElement);\n                    }\n                    break;\n                case 'container':\n                    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.containerElement)) {\n                        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([this.containerElement], POPUP_CONTAINER);\n                    }\n                    this.container = newProp.container;\n                    if (this.tooltipEle && targetElement) {\n                        this.appendContainer(this);\n                        this.reposition(targetElement);\n                    }\n            }\n        }\n    };\n    /**\n     * It is used to show the Tooltip on the specified target with specific animation settings.\n     *\n     * @param {HTMLElement} element - Target element where the Tooltip is to be displayed. (It is an optional parameter)\n     * @param {TooltipAnimationSettings} animation - Sets the specific animation, while showing the Tooltip on the screen. (It is an optional parameter)\n     * @returns {void}\n     */\n    Tooltip.prototype.open = function (element, animation) {\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(animation)) {\n            animation = this.animation.open;\n        }\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(element)) {\n            element = this.element;\n        }\n        if (element.style.display === 'none') {\n            return;\n        }\n        this.showTooltip(element, animation);\n    };\n    /**\n     * It is used to hide the Tooltip with specific animation effect.\n     *\n     * @param {TooltipAnimationSettings} animation - Sets the specific animation when hiding Tooltip from the screen. (It is an optional parameter)\n     * @returns {void}\n     */\n    Tooltip.prototype.close = function (animation) {\n        if (!animation) {\n            animation = this.animation.close;\n        }\n        this.hideTooltip(animation);\n    };\n    /**\n     * It is used to refresh the Tooltip content and its position.\n     *\n     * @param {HTMLElement} target - Target element where the Tooltip content or position needs to be refreshed.\n     * @returns {void}\n     */\n    Tooltip.prototype.refresh = function (target) {\n        if (this.tooltipEle) {\n            this.renderContent(target);\n        }\n        if (this.popupObj && target) {\n            this.reposition(target);\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.targetsList) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.target)) {\n            var target_2 = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.selectAll)(this.target, this.element);\n            if (target_2.length !== this.targetsList.length) {\n                this.unwireEvents(this.opensOn);\n                this.wireEvents(this.opensOn);\n            }\n        }\n    };\n    /**\n     *\n     * It is used to destroy the Tooltip component.\n     *\n     * @method destroy\n     * @returns {void}\n     * @memberof Tooltip\n     */\n    Tooltip.prototype.destroy = function () {\n        _super.prototype.destroy.call(this);\n        if (this.tooltipEle) {\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.remove)(this.tooltipEle);\n        }\n        if (this.popupObj) {\n            this.popupObj.destroy();\n        }\n        (0,_common_collision__WEBPACK_IMPORTED_MODULE_3__.destroy)();\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([this.element], ROOT);\n        this.unwireEvents(this.opensOn);\n        this.unwireMouseEvents(this.element);\n        this.tooltipEle = null;\n        this.popupObj = null;\n        var currentTarget = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.selectAll)('[data-tooltip-id= \"' + this.ctrlId + '_content\"]', this.element);\n        for (var _i = 0, currentTarget_1 = currentTarget; _i < currentTarget_1.length; _i++) {\n            var target = currentTarget_1[_i];\n            this.restoreElement(target);\n        }\n        this.containerElement = null;\n        this.tipClass = null;\n        this.tooltipPositionX = null;\n        this.tooltipPositionY = null;\n        this.ctrlId = null;\n        this.tooltipEventArgs = null;\n        this.touchModule = null;\n        this.mouseMoveEvent = null;\n        this.mouseMoveTarget = null;\n        this.containerElement = null;\n        this.targetsList = null;\n    };\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('auto')\n    ], Tooltip.prototype, \"width\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('auto')\n    ], Tooltip.prototype, \"height\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)()\n    ], Tooltip.prototype, \"content\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('body')\n    ], Tooltip.prototype, \"container\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)()\n    ], Tooltip.prototype, \"target\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('TopCenter')\n    ], Tooltip.prototype, \"position\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(0)\n    ], Tooltip.prototype, \"offsetX\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(0)\n    ], Tooltip.prototype, \"offsetY\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(true)\n    ], Tooltip.prototype, \"showTipPointer\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(true)\n    ], Tooltip.prototype, \"enableHtmlParse\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], Tooltip.prototype, \"windowCollision\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('Auto')\n    ], Tooltip.prototype, \"tipPointerPosition\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('Auto')\n    ], Tooltip.prototype, \"opensOn\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], Tooltip.prototype, \"mouseTrail\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], Tooltip.prototype, \"isSticky\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({}, Animation)\n    ], Tooltip.prototype, \"animation\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(0)\n    ], Tooltip.prototype, \"openDelay\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(0)\n    ], Tooltip.prototype, \"closeDelay\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)()\n    ], Tooltip.prototype, \"cssClass\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(true)\n    ], Tooltip.prototype, \"enableHtmlSanitizer\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('')\n    ], Tooltip.prototype, \"htmlAttributes\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Tooltip.prototype, \"beforeRender\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Tooltip.prototype, \"beforeOpen\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Tooltip.prototype, \"afterOpen\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Tooltip.prototype, \"beforeClose\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Tooltip.prototype, \"afterClose\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Tooltip.prototype, \"beforeCollision\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Tooltip.prototype, \"created\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Tooltip.prototype, \"destroyed\", void 0);\n    Tooltip = __decorate([\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.NotifyPropertyChanges\n    ], Tooltip);\n    return Tooltip;\n}(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Component));\n\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-popups/src/tooltip/tooltip.js?");

/***/ })

}]);