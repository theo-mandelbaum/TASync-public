"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkej2_vue_samples"] = self["webpackChunkej2_vue_samples"] || []).push([["chunk-vendors-node_modules_syncfusion_ej2-buttons_src_check-box_check-box_js-94ebd0ba"],{

/***/ "./node_modules/@syncfusion/ej2-buttons/src/check-box/check-box.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-buttons/src/check-box/check-box.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CheckBox: () => (/* binding */ CheckBox)\n/* harmony export */ });\n/* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @syncfusion/ej2-base */ \"./node_modules/@syncfusion/ej2-base/index.js\");\n/* harmony import */ var _common_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./../common/common */ \"./node_modules/@syncfusion/ej2-buttons/src/common/common.js\");\nvar __extends = (undefined && undefined.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\n\n\n\nvar CHECK = 'e-check';\nvar DISABLED = 'e-checkbox-disabled';\nvar FRAME = 'e-frame';\nvar INDETERMINATE = 'e-stop';\nvar LABEL = 'e-label';\nvar RIPPLE = 'e-ripple-container';\nvar RIPPLECHECK = 'e-ripple-check';\nvar RIPPLEINDETERMINATE = 'e-ripple-stop';\nvar RTL = 'e-rtl';\nvar WRAPPER = 'e-checkbox-wrapper';\nvar containerAttr = ['title', 'class', 'style', 'disabled', 'readonly', 'name', 'value', 'id', 'tabindex', 'aria-label', 'required'];\n/**\n * The CheckBox is a graphical user interface element that allows you to select one or more options from the choices.\n * It contains checked, unchecked, and indeterminate states.\n * ```html\n * <input type=\"checkbox\" id=\"checkbox\"/>\n * <script>\n * var checkboxObj = new CheckBox({ label: \"Default\" });\n * checkboxObj.appendTo(\"#checkbox\");\n * </script>\n * ```\n */\nvar CheckBox = /** @class */ (function (_super) {\n    __extends(CheckBox, _super);\n    /**\n     * Constructor for creating the widget\n     *\n     * @private\n     * @param {CheckBoxModel} options - Specifies checkbox model\n     * @param {string | HTMLInputElement} element - Specifies target element\n     */\n    function CheckBox(options, element) {\n        var _this = _super.call(this, options, element) || this;\n        _this.isFocused = false;\n        _this.isMouseClick = false;\n        _this.clickTriggered = false;\n        _this.validCheck = true;\n        _this.type = 'checkbox';\n        return _this;\n    }\n    CheckBox.prototype.changeState = function (state, isInitialize, isInterAction) {\n        var wrapper = this.getWrapper();\n        var rippleSpan = null;\n        var frameSpan = null;\n        if (wrapper) {\n            frameSpan = wrapper.getElementsByClassName(FRAME)[0];\n            if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isRippleEnabled) {\n                rippleSpan = wrapper.getElementsByClassName(RIPPLE)[0];\n            }\n        }\n        if (state === 'check') {\n            if (frameSpan) {\n                frameSpan.classList.remove(INDETERMINATE);\n                frameSpan.classList.add(CHECK);\n            }\n            if (rippleSpan) {\n                rippleSpan.classList.remove(RIPPLEINDETERMINATE);\n                rippleSpan.classList.add(RIPPLECHECK);\n            }\n            this.element.checked = true;\n            if ((this.element.required || (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(this.element, 'form') && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(this.element, 'form').classList.contains('e-formvalidator')) && this.validCheck && !isInitialize && isInterAction) {\n                this.element.checked = false;\n                this.validCheck = false;\n            }\n            else if (this.element.required || (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(this.element, 'form') && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(this.element, 'form').classList.contains('e-formvalidator')) {\n                this.validCheck = true;\n            }\n        }\n        else if (state === 'uncheck') {\n            if (frameSpan) {\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([frameSpan], [CHECK, INDETERMINATE]);\n            }\n            if (rippleSpan) {\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([rippleSpan], [RIPPLECHECK, RIPPLEINDETERMINATE]);\n            }\n            this.element.checked = false;\n            if ((this.element.required || (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(this.element, 'form') && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(this.element, 'form').classList.contains('e-formvalidator')) && this.validCheck && !isInitialize && isInterAction) {\n                this.element.checked = true;\n                this.validCheck = false;\n            }\n            else if (this.element.required || (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(this.element, 'form') && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(this.element, 'form').classList.contains('e-formvalidator')) {\n                this.validCheck = true;\n            }\n        }\n        else {\n            if (frameSpan) {\n                frameSpan.classList.remove(CHECK);\n                frameSpan.classList.add(INDETERMINATE);\n            }\n            if (rippleSpan) {\n                rippleSpan.classList.remove(RIPPLECHECK);\n                rippleSpan.classList.add(RIPPLEINDETERMINATE);\n            }\n            this.element.indeterminate = true;\n            this.indeterminate = true;\n        }\n    };\n    CheckBox.prototype.clickHandler = function (event) {\n        if (event.target.tagName === 'INPUT' && this.clickTriggered) {\n            this.changeState(this.checked ? 'check' : 'uncheck');\n            this.clickTriggered = false;\n            return;\n        }\n        if (event.target.tagName === 'SPAN' || event.target.tagName === 'LABEL' ||\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(event.target, '.e-label')) {\n            this.clickTriggered = true;\n        }\n        if (this.isMouseClick) {\n            this.focusOutHandler();\n            this.isMouseClick = false;\n        }\n        if (this.indeterminate) {\n            this.changeState(this.checked ? 'check' : 'uncheck', false, true);\n            this.indeterminate = false;\n            this.element.indeterminate = false;\n        }\n        else if (this.checked) {\n            this.changeState('uncheck', false, true);\n            this.checked = false;\n        }\n        else {\n            this.changeState('check', false, true);\n            this.checked = true;\n        }\n        var changeEventArgs = { checked: this.updateVueArrayModel(false), event: event };\n        this.trigger('change', changeEventArgs);\n        event.stopPropagation();\n    };\n    /**\n     * Destroys the widget.\n     *\n     * @returns {void}\n     */\n    CheckBox.prototype.destroy = function () {\n        var _this = this;\n        var wrapper = this.getWrapper();\n        _super.prototype.destroy.call(this);\n        if (this.wrapper) {\n            wrapper = this.wrapper;\n            if (!this.disabled) {\n                this.unWireEvents();\n            }\n            if (this.tagName === 'INPUT') {\n                if (this.getWrapper() && wrapper.parentNode) {\n                    wrapper.parentNode.insertBefore(this.element, wrapper);\n                }\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)(wrapper);\n                this.element.checked = false;\n                if (this.indeterminate) {\n                    this.element.indeterminate = false;\n                }\n                ['name', 'value', 'disabled'].forEach(function (key) {\n                    _this.element.removeAttribute(key);\n                });\n            }\n            else {\n                ['class'].forEach(function (key) {\n                    wrapper.removeAttribute(key);\n                });\n                wrapper.innerHTML = '';\n                this.element = wrapper;\n                if (this.refreshing) {\n                    ['e-control', 'e-checkbox', 'e-lib'].forEach(function (key) {\n                        _this.element.classList.add(key);\n                    });\n                    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.setValue)('ej2_instances', [this], this.element);\n                }\n            }\n        }\n    };\n    CheckBox.prototype.focusHandler = function () {\n        this.isFocused = true;\n    };\n    CheckBox.prototype.focusOutHandler = function () {\n        var wrapper = this.getWrapper();\n        if (wrapper) {\n            wrapper.classList.remove('e-focus');\n        }\n        this.isFocused = false;\n    };\n    /**\n     * Gets the module name.\n     *\n     * @private\n     * @returns {string} - Module Name\n     */\n    CheckBox.prototype.getModuleName = function () {\n        return 'checkbox';\n    };\n    /**\n     * Gets the properties to be maintained in the persistence state.\n     *\n     * @private\n     * @returns {string} - Persist Data\n     */\n    CheckBox.prototype.getPersistData = function () {\n        return this.addOnPersist(['checked', 'indeterminate']);\n    };\n    CheckBox.prototype.getWrapper = function () {\n        if (this.element && this.element.parentElement) {\n            return this.element.parentElement.parentElement;\n        }\n        else {\n            return null;\n        }\n    };\n    CheckBox.prototype.getLabel = function () {\n        if (this.element) {\n            return this.element.parentElement;\n        }\n        else {\n            return null;\n        }\n    };\n    CheckBox.prototype.initialize = function () {\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.initialCheckedValue)) {\n            this.initialCheckedValue = this.checked;\n        }\n        if (this.name) {\n            this.element.setAttribute('name', this.name);\n        }\n        this.element.setAttribute('tabindex', '0');\n        if (this.value) {\n            this.element.setAttribute('value', this.value);\n            if (this.isVue && typeof this.value === 'boolean' && this.value === true) {\n                this.setProperties({ 'checked': true }, true);\n            }\n        }\n        if (this.checked) {\n            this.changeState('check', true);\n        }\n        if (this.indeterminate) {\n            this.changeState();\n        }\n        if (this.disabled) {\n            this.setDisabled();\n        }\n    };\n    CheckBox.prototype.initWrapper = function () {\n        var wrapper = this.element.parentElement;\n        if (!wrapper.classList.contains(WRAPPER)) {\n            wrapper = this.createElement('div', {\n                className: WRAPPER\n            });\n            if (this.element.parentNode) {\n                this.element.parentNode.insertBefore(wrapper, this.element);\n            }\n        }\n        var label = this.createElement('label', { attrs: { for: this.htmlAttributes.id ? this.htmlAttributes.id : this.element.id } });\n        var frameSpan = this.createElement('span', { className: 'e-icons ' + FRAME });\n        wrapper.classList.add('e-wrapper');\n        if (this.enableRtl) {\n            wrapper.classList.add(RTL);\n        }\n        if (this.cssClass) {\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([wrapper], this.cssClass.replace(/\\s+/g, ' ').trim().split(' '));\n        }\n        wrapper.appendChild(label);\n        label.appendChild(this.element);\n        (0,_common_common__WEBPACK_IMPORTED_MODULE_1__.setHiddenInput)(this, label);\n        label.appendChild(frameSpan);\n        if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isRippleEnabled) {\n            var rippleSpan = this.createElement('span', { className: RIPPLE });\n            if (this.labelPosition === 'Before') {\n                label.appendChild(rippleSpan);\n            }\n            else {\n                label.insertBefore(rippleSpan, frameSpan);\n            }\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.rippleEffect)(rippleSpan, { duration: 400, isCenterRipple: true });\n        }\n        if (this.label) {\n            this.setText(this.label);\n        }\n    };\n    CheckBox.prototype.keyUpHandler = function () {\n        if (this.isFocused) {\n            this.getWrapper().classList.add('e-focus');\n        }\n    };\n    CheckBox.prototype.labelMouseDownHandler = function (e) {\n        this.isMouseClick = true;\n        var rippleSpan = this.getWrapper().getElementsByClassName(RIPPLE)[0];\n        (0,_common_common__WEBPACK_IMPORTED_MODULE_1__.rippleMouseHandler)(e, rippleSpan);\n    };\n    CheckBox.prototype.labelMouseLeaveHandler = function (e) {\n        var rippleSpan = this.getLabel().getElementsByClassName(RIPPLE)[0];\n        if (rippleSpan) {\n            var rippleElem = rippleSpan.querySelectorAll('.e-ripple-element');\n            for (var i = rippleElem.length - 1; i > 0; i--) {\n                rippleSpan.removeChild(rippleSpan.childNodes[i]);\n            }\n            (0,_common_common__WEBPACK_IMPORTED_MODULE_1__.rippleMouseHandler)(e, rippleSpan);\n        }\n    };\n    CheckBox.prototype.labelMouseUpHandler = function (e) {\n        this.isMouseClick = true;\n        var rippleSpan = this.getWrapper().getElementsByClassName(RIPPLE)[0];\n        if (rippleSpan) {\n            var rippleElem = rippleSpan.querySelectorAll('.e-ripple-element');\n            for (var i = 0; i < rippleElem.length - 1; i++) {\n                rippleSpan.removeChild(rippleSpan.childNodes[i]);\n            }\n            (0,_common_common__WEBPACK_IMPORTED_MODULE_1__.rippleMouseHandler)(e, rippleSpan);\n        }\n    };\n    /**\n     * Called internally if any of the property value changes.\n     *\n     * @private\n     * @param {CheckBoxModel} newProp - Specifies new Properties\n     * @param {CheckBoxModel} oldProp - Specifies old Properties\n     *\n     * @returns {void}\n     */\n    CheckBox.prototype.onPropertyChanged = function (newProp, oldProp) {\n        var wrapper = this.getWrapper();\n        for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {\n            var prop = _a[_i];\n            switch (prop) {\n                case 'checked':\n                    this.indeterminate = false;\n                    this.element.indeterminate = false;\n                    this.changeState(newProp.checked ? 'check' : 'uncheck');\n                    break;\n                case 'indeterminate':\n                    if (newProp.indeterminate) {\n                        this.changeState();\n                    }\n                    else {\n                        this.element.indeterminate = false;\n                        this.changeState(this.checked ? 'check' : 'uncheck');\n                    }\n                    break;\n                case 'disabled':\n                    if (newProp.disabled) {\n                        this.setDisabled();\n                        this.wrapper = this.getWrapper();\n                        this.unWireEvents();\n                    }\n                    else {\n                        this.element.disabled = false;\n                        wrapper.classList.remove(DISABLED);\n                        wrapper.setAttribute('aria-disabled', 'false');\n                        this.wireEvents();\n                    }\n                    break;\n                case 'cssClass':\n                    if (oldProp.cssClass) {\n                        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([wrapper], oldProp.cssClass.split(/\\s+/).filter(function (c) { return c.length > 0; }));\n                    }\n                    if (newProp.cssClass) {\n                        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([wrapper], newProp.cssClass.replace(/\\s+/g, ' ').trim().split(' '));\n                    }\n                    break;\n                case 'enableRtl':\n                    if (newProp.enableRtl) {\n                        wrapper.classList.add(RTL);\n                    }\n                    else {\n                        wrapper.classList.remove(RTL);\n                    }\n                    break;\n                case 'label':\n                    this.setText(newProp.label);\n                    break;\n                case 'labelPosition': {\n                    var label = wrapper.getElementsByClassName(LABEL)[0];\n                    var labelWrap = wrapper.getElementsByTagName('label')[0];\n                    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)(label);\n                    if (newProp.labelPosition === 'After') {\n                        labelWrap.appendChild(label);\n                    }\n                    else {\n                        labelWrap.insertBefore(label, wrapper.getElementsByClassName(FRAME)[0]);\n                    }\n                    break;\n                }\n                case 'name':\n                    this.element.setAttribute('name', newProp.name);\n                    break;\n                case 'value':\n                    if (this.isVue && typeof newProp.value === 'object') {\n                        break;\n                    }\n                    this.element.setAttribute('value', newProp.value);\n                    break;\n                case 'htmlAttributes':\n                    this.updateHtmlAttributeToWrapper();\n                    break;\n            }\n        }\n    };\n    /**\n     * Initialize Angular, React and Unique ID support.\n     *\n     * @private\n     * @returns {void}\n     */\n    CheckBox.prototype.preRender = function () {\n        var element = this.element;\n        this.tagName = this.element.tagName;\n        element = (0,_common_common__WEBPACK_IMPORTED_MODULE_1__.wrapperInitialize)(this.createElement, 'EJS-CHECKBOX', 'checkbox', element, WRAPPER, 'checkbox');\n        this.element = element;\n        if (this.element.getAttribute('type') !== 'checkbox') {\n            this.element.setAttribute('type', 'checkbox');\n        }\n        if (!this.element.id) {\n            this.element.id = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getUniqueID)('e-' + this.getModuleName());\n        }\n    };\n    /**\n     * Initialize the control rendering.\n     *\n     * @private\n     * @returns {void}\n     */\n    CheckBox.prototype.render = function () {\n        this.initWrapper();\n        this.initialize();\n        if (!this.disabled) {\n            this.wireEvents();\n        }\n        this.updateHtmlAttributeToWrapper();\n        this.updateVueArrayModel(true);\n        this.renderComplete();\n        this.wrapper = this.getWrapper();\n    };\n    CheckBox.prototype.setDisabled = function () {\n        var wrapper = this.getWrapper();\n        this.element.disabled = true;\n        wrapper.classList.add(DISABLED);\n        wrapper.setAttribute('aria-disabled', 'true');\n    };\n    CheckBox.prototype.setText = function (text) {\n        var wrapper = this.getWrapper();\n        if (!wrapper) {\n            return;\n        }\n        var label = wrapper.getElementsByClassName(LABEL)[0];\n        if (label) {\n            label.innerHTML = (this.enableHtmlSanitizer) ? _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.SanitizeHtmlHelper.sanitize(text) : text;\n        }\n        else {\n            text = (this.enableHtmlSanitizer) ? _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.SanitizeHtmlHelper.sanitize(text) : text;\n            label = this.createElement('span', { className: LABEL, innerHTML: text });\n            var labelWrap = wrapper.getElementsByTagName('label')[0];\n            if (this.labelPosition === 'Before') {\n                labelWrap.insertBefore(label, wrapper.getElementsByClassName(FRAME)[0]);\n            }\n            else {\n                labelWrap.appendChild(label);\n            }\n        }\n    };\n    CheckBox.prototype.changeHandler = function (e) {\n        e.stopPropagation();\n    };\n    CheckBox.prototype.formResetHandler = function () {\n        this.checked = this.initialCheckedValue;\n        this.element.checked = this.initialCheckedValue;\n    };\n    CheckBox.prototype.unWireEvents = function () {\n        var wrapper = this.wrapper;\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(wrapper, 'click', this.clickHandler);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(this.element, 'keyup', this.keyUpHandler);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(this.element, 'focus', this.focusHandler);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(this.element, 'focusout', this.focusOutHandler);\n        var label = wrapper.getElementsByTagName('label')[0];\n        if (label) {\n            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(label, 'mousedown', this.labelMouseDownHandler);\n            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(label, 'mouseup', this.labelMouseUpHandler);\n            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(label, 'mouseleave', this.labelMouseLeaveHandler);\n        }\n        var formElem = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(this.element, 'form');\n        if (formElem) {\n            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(formElem, 'reset', this.formResetHandler);\n        }\n        if (this.tagName === 'EJS-CHECKBOX') {\n            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(this.element, 'change', this.changeHandler);\n        }\n    };\n    CheckBox.prototype.wireEvents = function () {\n        var wrapper = this.getWrapper();\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(wrapper, 'click', this.clickHandler, this);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(this.element, 'keyup', this.keyUpHandler, this);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(this.element, 'focus', this.focusHandler, this);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(this.element, 'focusout', this.focusOutHandler, this);\n        var label = wrapper.getElementsByTagName('label')[0];\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(label, 'mousedown', this.labelMouseDownHandler, this);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(label, 'mouseup', this.labelMouseUpHandler, this);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(label, 'mouseleave', this.labelMouseLeaveHandler, this);\n        var formElem = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(this.element, 'form');\n        if (formElem) {\n            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(formElem, 'reset', this.formResetHandler, this);\n        }\n        if (this.tagName === 'EJS-CHECKBOX') {\n            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(this.element, 'change', this.changeHandler, this);\n        }\n    };\n    CheckBox.prototype.updateVueArrayModel = function (init) {\n        if (this.isVue && typeof this.value === 'object') {\n            var value = this.element.value;\n            if (value && this.value) {\n                if (init) {\n                    for (var i = 0; i < this.value.length; i++) {\n                        if (value === this.value[i]) {\n                            this.changeState('check');\n                            this.setProperties({ 'checked': true }, true);\n                        }\n                    }\n                }\n                else {\n                    var index = this.value.indexOf(value);\n                    if (this.checked) {\n                        if (index < 0) {\n                            this.value.push(value);\n                        }\n                    }\n                    else {\n                        if (index > -1) {\n                            this.value.splice(index, 1);\n                        }\n                    }\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    return this.value;\n                }\n            }\n        }\n        return this.validCheck ? this.element.checked : !this.element.checked;\n    };\n    CheckBox.prototype.updateHtmlAttributeToWrapper = function () {\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.htmlAttributes)) {\n            for (var _i = 0, _a = Object.keys(this.htmlAttributes); _i < _a.length; _i++) {\n                var key = _a[_i];\n                var wrapper = this.getWrapper();\n                if (containerAttr.indexOf(key) > -1) {\n                    if (key === 'class') {\n                        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([wrapper], this.htmlAttributes[\"\" + key].split(' '));\n                    }\n                    else if (key === 'title') {\n                        wrapper.setAttribute(key, this.htmlAttributes[\"\" + key]);\n                    }\n                    else if (key === 'style') {\n                        var frameSpan = this.getWrapper().getElementsByClassName(FRAME)[0];\n                        frameSpan.setAttribute(key, this.htmlAttributes[\"\" + key]);\n                    }\n                    else if (key === 'disabled') {\n                        if (this.htmlAttributes[\"\" + key] === 'true') {\n                            this.setDisabled();\n                        }\n                        this.element.setAttribute(key, this.htmlAttributes[\"\" + key]);\n                    }\n                    else {\n                        this.element.setAttribute(key, this.htmlAttributes[\"\" + key]);\n                    }\n                }\n                else {\n                    wrapper.setAttribute(key, this.htmlAttributes[\"\" + key]);\n                }\n            }\n        }\n    };\n    /**\n     * Click the CheckBox element\n     * its native method\n     *\n     * @public\n     * @returns {void}\n     */\n    CheckBox.prototype.click = function () {\n        this.element.click();\n    };\n    /**\n     * Sets the focus to CheckBox\n     * its native method\n     *\n     * @public\n     * @returns {void}\n     */\n    CheckBox.prototype.focusIn = function () {\n        this.element.focus();\n    };\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], CheckBox.prototype, \"change\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], CheckBox.prototype, \"created\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], CheckBox.prototype, \"checked\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('')\n    ], CheckBox.prototype, \"cssClass\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], CheckBox.prototype, \"disabled\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], CheckBox.prototype, \"indeterminate\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('')\n    ], CheckBox.prototype, \"label\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('After')\n    ], CheckBox.prototype, \"labelPosition\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('')\n    ], CheckBox.prototype, \"name\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('')\n    ], CheckBox.prototype, \"value\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(true)\n    ], CheckBox.prototype, \"enableHtmlSanitizer\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)({})\n    ], CheckBox.prototype, \"htmlAttributes\", void 0);\n    CheckBox = __decorate([\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.NotifyPropertyChanges\n    ], CheckBox);\n    return CheckBox;\n}(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Component));\n\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-buttons/src/check-box/check-box.js?");

/***/ })

}]);