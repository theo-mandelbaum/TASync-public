"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkej2_vue_samples"] = self["webpackChunkej2_vue_samples"] || []).push([["chunk-vendors-node_modules_syncfusion_ej2-pdfviewer_src_pdfviewer_base_signature_js-cb7e393a"],{

/***/ "./node_modules/@syncfusion/ej2-pdfviewer/src/pdfviewer/base/signature.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-pdfviewer/src/pdfviewer/base/signature.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Signature: () => (/* binding */ Signature)\n/* harmony export */ });\n/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../index */ \"./node_modules/@syncfusion/ej2-pdfviewer/src/pdfviewer/index.js\");\n/* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @syncfusion/ej2-base */ \"./node_modules/@syncfusion/ej2-base/index.js\");\n/* harmony import */ var _syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @syncfusion/ej2-popups */ \"./node_modules/@syncfusion/ej2-popups/index.js\");\n/* harmony import */ var _syncfusion_ej2_drawings__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @syncfusion/ej2-drawings */ \"./node_modules/@syncfusion/ej2-drawings/index.js\");\n/* harmony import */ var _syncfusion_ej2_inputs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @syncfusion/ej2-inputs */ \"./node_modules/@syncfusion/ej2-inputs/index.js\");\n/* harmony import */ var _drawing_drawing_util__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../drawing/drawing-util */ \"./node_modules/@syncfusion/ej2-pdfviewer/src/pdfviewer/drawing/drawing-util.js\");\n/* harmony import */ var _syncfusion_ej2_buttons__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @syncfusion/ej2-buttons */ \"./node_modules/@syncfusion/ej2-buttons/index.js\");\n/* harmony import */ var _syncfusion_ej2_navigations__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @syncfusion/ej2-navigations */ \"./node_modules/@syncfusion/ej2-navigations/index.js\");\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./types */ \"./node_modules/@syncfusion/ej2-pdfviewer/src/pdfviewer/base/types.js\");\n\n\n\n\n\n\n\n\n\n\n/* eslint-disable valid-jsdoc */\n/**\n *\n * @param {Event} e - The event object.\n * @param {any} args - Additional arguments passed to the event handler.\n * @hidden\n * @returns {void}\n */\nvar Signature = /** @class */ (function () {\n    /**\n     * Initialize the constructor of blazorUIadapater.\n     *\n     * @private\n     * @param { PdfViewer } pdfViewer - Specified PdfViewer class.\n     * @param { PdfViewerBase } pdfViewerBase - The pdfViewerBase.\n     */\n    function Signature(pdfViewer, pdfViewerBase) {\n        var _this = this;\n        this.mouseMoving = true;\n        this.canvasTouched = false;\n        this.imageSignatureDataUrl = '';\n        this.drawSignatureDataUrl = '';\n        this.newObject = [];\n        /**\n         * @private\n         */\n        this.outputString = '';\n        /**\n         * @private\n         */\n        this.drawOutputString = '';\n        /**\n         * @private\n         */\n        this.imageOutputString = '';\n        /**\n         * @private\n         */\n        this.signaturecollection = [];\n        /**\n         * @private\n         */\n        this.outputcollection = [];\n        /**\n         * @private\n         */\n        this.signAnnotationIndex = [];\n        this.fontsign = [];\n        this.signfontStyle = [];\n        this.isSaveSignature = false;\n        this.isSaveInitial = false;\n        this.isInitialFiledSaveSignature = false;\n        this.isSignatureFieldsSaveSignature = false;\n        this.issaveTypeSignature = false;\n        this.issaveImageSignature = false;\n        this.issaveTypeInitial = false;\n        this.issaveImageInitial = false;\n        this.saveSignatureTypeString = '';\n        this.saveInitialTypeString = '';\n        this.saveTypeString = '';\n        this.signatureTypeString = '';\n        this.initialTypeString = '';\n        this.saveUploadString = '';\n        this.saveSignatureUploadString = '';\n        this.saveInitialUploadString = '';\n        this.signatureUploadString = '';\n        this.initialUploadString = '';\n        this.clearUploadString = false;\n        this.textValue = '';\n        this.signatureDrawString = '';\n        this.initialDrawString = '';\n        this.signatureTextContentTop = 0.2;\n        this.signatureTextContentLeft = 0.7;\n        this.saveSignatureString = '';\n        this.saveInitialString = '';\n        /**\n         * @private\n         */\n        this.saveImageString = '';\n        this.signatureFieldCollection = [];\n        this.signatureImageString = '';\n        this.initialImageString = '';\n        /**\n         * @private\n         */\n        this.maxSaveLimit = 5;\n        this.select = function (e) {\n            if (this.canvasTouched) {\n                this.mouseMoving = true;\n                this.canvasTouched = false;\n            }\n            if (e.isSwiped && this.signaturetype === 'Draw' && this.mouseMoving) {\n                e.cancel = true;\n                this.mouseMoving = false;\n            }\n        };\n        this.addStampImage = function (args) {\n            // eslint-disable-next-line\n            var proxy = _this;\n            var upoadedFiles = args.target.files;\n            if (args.target.files[0] !== null) {\n                var uploadedFile = upoadedFiles[0];\n                if (uploadedFile.type.split('/')[0] === 'image') {\n                    var reader = new FileReader();\n                    reader.onload = function (e) {\n                        var canvas = document.getElementById(_this.pdfViewer.element.id + '_signatureuploadCanvas_');\n                        var context = canvas.getContext('2d');\n                        var image = new Image();\n                        // eslint-disable-next-line\n                        var proxy = _this;\n                        image.onload = function () {\n                            var signbutton = document.getElementById(_this.pdfViewer.element.id + '_e-pv-upload-button');\n                            signbutton.style.visibility = 'hidden';\n                            context.drawImage(image, 0, 0, canvas.width, canvas.height);\n                            proxy.enableCreateButton(false);\n                            proxy.outputString = image.src;\n                            proxy.signatureImageHeight = image.naturalHeight;\n                            proxy.signatureImageWidth = image.naturalWidth;\n                        };\n                        image.src = e.currentTarget.result;\n                        proxy.outputString = e.currentTarget.result;\n                        proxy.switchTabImageSignature = e.currentTarget.result;\n                    };\n                    reader.readAsDataURL(uploadedFile);\n                }\n            }\n            args.target.value = '';\n            args.currentTarget.value = '';\n        };\n        this.pdfViewer = pdfViewer;\n        this.pdfViewerBase = pdfViewerBase;\n    }\n    /**\n     * @private\n     * @returns {void}\n     */\n    Signature.prototype.createSignaturePanel = function () {\n        var _this = this;\n        var maximumWidth = 750;\n        this.imageSignatureDataUrl = '';\n        this.drawSignatureDataUrl = '';\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isBlazor)()) {\n            var elementID = this.pdfViewer.element.id;\n            var dialogDiv = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.createElement)('div', { id: elementID + '_signature_window', className: 'e-pv-signature-window' });\n            dialogDiv.style.display = 'block';\n            this.pdfViewerBase.pageContainer.appendChild(dialogDiv);\n            var appearanceTab = this.createSignatureCanvas();\n            var signaturePanelHeader = void 0;\n            if (!this.pdfViewerBase.isToolbarSignClicked) {\n                if (this.pdfViewerBase.isInitialField) {\n                    signaturePanelHeader = this.pdfViewer.localeObj.getConstant('HandwrittenInitialDialogHeaderText');\n                }\n                else {\n                    signaturePanelHeader = this.pdfViewer.localeObj.getConstant('HandwrittenSignatureDialogHeaderText');\n                }\n            }\n            else {\n                if (this.pdfViewerBase.isInitialField) {\n                    signaturePanelHeader = this.pdfViewer.localeObj.getConstant('InitialFieldDialogHeaderText');\n                }\n                else {\n                    signaturePanelHeader = this.pdfViewer.localeObj.getConstant('SignatureFieldDialogHeaderText');\n                }\n            }\n            if (this.signatureDialog) {\n                this.signatureDialog.content = appearanceTab;\n            }\n            else {\n                this.signatureDialog = new _syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_2__.Dialog({\n                    showCloseIcon: true, closeOnEscape: false, isModal: true, header: signaturePanelHeader, cssClass: 'e-pv-signature-dialog-height',\n                    target: this.pdfViewerBase.mainContainer, content: appearanceTab, width: '750px', visible: true, allowDragging: true,\n                    beforeClose: function () {\n                        _this.clearSignatureCanvas();\n                        _this.signatureDialog.destroy();\n                        _this.signatureDialog = null;\n                        if (_this.tabObj) {\n                            _this.tabObj.destroy();\n                        }\n                        var signatureWindow = document.getElementById(_this.pdfViewer.element.id + '_signature_window');\n                        if (signatureWindow) {\n                            if (signatureWindow.parentNode) {\n                                signatureWindow.parentNode.removeChild(signatureWindow);\n                            }\n                            else {\n                                signatureWindow.parentElement.removeChild(signatureWindow);\n                            }\n                        }\n                        if (!_this.pdfViewerBase.isToolbarSignClicked && !_this.pdfViewerBase.drawSignatureWithTool &&\n                            !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(_this.pdfViewer.formFieldsModule.currentTarget)) {\n                            _this.pdfViewer.fireFocusOutFormField(_this.pdfViewer.formFieldsModule.currentTarget.name, '');\n                        }\n                        _this.pdfViewerBase.isToolbarSignClicked = false;\n                        _this.setFocus();\n                    }\n                });\n                this.signatureDialog.buttons = [\n                    { buttonModel: { content: this.pdfViewer.localeObj.getConstant('Clear'), disabled: true, cssClass: 'e-pv-clearbtn' }, click: this.clearSignatureCanvas.bind(this) },\n                    { buttonModel: { content: this.pdfViewer.localeObj.getConstant('Cancel'), cssClass: 'e-pv-cancelbtn' }, click: this.closeSignaturePanel.bind(this) },\n                    { buttonModel: { content: this.pdfViewer.localeObj.getConstant('Create'), isPrimary: true, disabled: true, cssClass: 'e-pv-createbtn' }, click: this.addSignatureInPage.bind(this) }\n                ];\n                this.signatureDialog.appendTo(dialogDiv);\n            }\n            if (this.pdfViewer.element.offsetWidth < maximumWidth) {\n                this.updateCanvasSize();\n            }\n            if (this.pdfViewer.enableRtl) {\n                this.signatureDialog.enableRtl = this.pdfViewer.enableRtl;\n            }\n            var checkboxItem = this.signatureDialog.content.ej2_instances[0].items[0];\n            if (checkboxItem.header.label === 'DRAW') {\n                var drawCheckbox = document.getElementById('checkbox');\n                this.hideSignatureCheckbox(drawCheckbox);\n            }\n            else if (checkboxItem.header.label === 'TYPE') {\n                var typeCheckbox = document.getElementById('checkbox1');\n                this.hideSignatureCheckbox(typeCheckbox);\n            }\n            else {\n                var imageCheckbox = document.getElementById('checkbox2');\n                this.hideSignatureCheckbox(imageCheckbox);\n            }\n            this.setSignatureCanvasWidth();\n        }\n        else {\n            var canvas = document.getElementById(this.pdfViewer.element.id + '_signatureCanvas_');\n            if (canvas) {\n                if (!this.pdfViewerBase.pageContainer.querySelector('.e-pv-signature-window')) {\n                    var elementID = this.pdfViewer.element.id;\n                    var dialogDiv = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.createElement)('div', { id: elementID + '_signature_window', className: 'e-pv-signature-window' });\n                    dialogDiv.style.display = 'block';\n                    this.pdfViewerBase.pageContainer.appendChild(dialogDiv);\n                }\n                canvas.addEventListener('mousedown', this.signaturePanelMouseDown.bind(this));\n                canvas.addEventListener('mousemove', this.signaturePanelMouseMove.bind(this));\n                canvas.addEventListener('mouseup', this.signaturePanelMouseUp.bind(this));\n                canvas.addEventListener('mouseleave', this.signaturePanelMouseUp.bind(this));\n                canvas.addEventListener('touchstart', this.signaturePanelMouseDown.bind(this));\n                canvas.addEventListener('touchmove', this.signaturePanelMouseMove.bind(this));\n                canvas.addEventListener('touchend', this.signaturePanelMouseUp.bind(this));\n                this.clearSignatureCanvas();\n            }\n            this.pdfViewer._dotnetInstance.invokeMethodAsync('OpenSignaturePanel', this.pdfViewerBase.isToolbarSignClicked);\n        }\n        this.drawSavedSignature();\n    };\n    Signature.prototype.setSignatureCanvasWidth = function () {\n        var appearanceElement = document.getElementById(this.pdfViewer.element.id + 'Signature_appearance');\n        if (appearanceElement) {\n            var apperanceTabWidth = appearanceElement.clientWidth;\n            var pathcanvas = document.getElementById(this.pdfViewer.element.id + '_signatureCanvas_');\n            if (pathcanvas) {\n                pathcanvas.width = apperanceTabWidth;\n                pathcanvas.style.width = apperanceTabWidth + 'px';\n            }\n            var uploadCanvas = document.getElementById(this.pdfViewer.element.id + '_signatureuploadCanvas_');\n            if (uploadCanvas) {\n                uploadCanvas.width = apperanceTabWidth;\n                uploadCanvas.style.width = apperanceTabWidth + 'px';\n            }\n            var textDiv = document.getElementById(this.pdfViewer.element.id + '_font_appearance');\n            if (textDiv) {\n                textDiv.width = apperanceTabWidth;\n                textDiv.style.width = apperanceTabWidth + 'px';\n            }\n        }\n    };\n    Signature.prototype.drawSavedSignature = function () {\n        if (!this.pdfViewerBase.isToolbarSignClicked && (this.isSaveSignature || this.isSaveInitial)) {\n            if (!this.pdfViewerBase.isInitialField && this.isSaveSignature) {\n                this.outputString = this.saveSignatureString;\n            }\n            else if (this.pdfViewerBase.isInitialField && this.isSaveInitial) {\n                this.outputString = this.saveInitialString;\n            }\n            var canvas = document.getElementById(this.pdfViewer.element.id + '_signatureCanvas_');\n            var context_1 = canvas.getContext('2d');\n            var image_1 = new Image();\n            image_1.onload = function () {\n                context_1.drawImage(image_1, 0, 0);\n            };\n            if (!this.pdfViewerBase.isInitialField && this.isSaveSignature) {\n                image_1.src = this.signatureDrawString;\n            }\n            else if (this.pdfViewerBase.isInitialField && this.isSaveInitial) {\n                image_1.src = this.initialDrawString;\n            }\n            var checkbox = document.getElementById(this.pdfViewer.element.id + '_signatureCheckBox');\n            if (checkbox) {\n                checkbox.checked = true;\n            }\n            this.enableCreateButton(false);\n            this.enableClearbutton(false);\n        }\n    };\n    Signature.prototype.drawSavedTypeSignature = function () {\n        var output = '';\n        if (!this.pdfViewerBase.isToolbarSignClicked && (this.issaveTypeSignature || this.issaveTypeInitial)) {\n            if (!this.pdfViewerBase.isInitialField && this.issaveTypeSignature) {\n                output = this.saveSignatureTypeString;\n            }\n            else {\n                output = this.saveInitialTypeString;\n            }\n        }\n        return output;\n    };\n    Signature.prototype.drawSavedImageSignature = function () {\n        var output = '';\n        if (!this.pdfViewerBase.isToolbarSignClicked && (this.issaveImageSignature || this.issaveImageInitial)) {\n            if (!this.pdfViewerBase.isInitialField && this.issaveImageSignature) {\n                output = this.saveSignatureUploadString;\n            }\n            else {\n                output = this.saveInitialUploadString;\n            }\n        }\n        return output;\n    };\n    Signature.prototype.hideSignatureCheckbox = function (checkbox) {\n        if (this.pdfViewerBase.isToolbarSignClicked) {\n            if (this.pdfViewerBase.isInitialField) {\n                if (this.pdfViewer.handWrittenSignatureSettings.initialDialogSettings &&\n                    this.pdfViewer.handWrittenSignatureSettings.initialDialogSettings.hideSaveSignature) {\n                    this.hideCheckboxParent(checkbox);\n                }\n            }\n            else if (this.pdfViewer.handWrittenSignatureSettings.signatureDialogSettings &&\n                this.pdfViewer.handWrittenSignatureSettings.signatureDialogSettings.hideSaveSignature) {\n                this.hideCheckboxParent(checkbox);\n            }\n        }\n        else {\n            if (this.pdfViewerBase.isInitialField) {\n                if (this.pdfViewer.initialFieldSettings.initialDialogSettings &&\n                    this.pdfViewer.initialFieldSettings.initialDialogSettings.hideSaveSignature) {\n                    this.hideCheckboxParent(checkbox);\n                }\n            }\n            else {\n                if (this.pdfViewer.signatureFieldSettings.signatureDialogSettings &&\n                    this.pdfViewer.signatureFieldSettings.signatureDialogSettings.hideSaveSignature) {\n                    this.hideCheckboxParent(checkbox);\n                }\n            }\n        }\n    };\n    Signature.prototype.saveSignatureCheckbox = function () {\n        if (this.pdfViewerBase.isToolbarSignClicked) {\n            return false;\n        }\n        else {\n            if (this.pdfViewerBase.isInitialField) {\n                if (this.pdfViewer.initialFieldSettings.initialDialogSettings &&\n                    this.pdfViewer.initialFieldSettings.initialDialogSettings.hideSaveSignature) {\n                    return false;\n                }\n                else {\n                    return this.isInitialFiledSaveSignature;\n                }\n            }\n            else {\n                if (this.pdfViewer.signatureFieldSettings.signatureDialogSettings &&\n                    this.pdfViewer.signatureFieldSettings.signatureDialogSettings.hideSaveSignature) {\n                    return false;\n                }\n                else {\n                    return this.isSignatureFieldsSaveSignature;\n                }\n            }\n        }\n    };\n    Signature.prototype.hideCheckboxParent = function (checkbox) {\n        if (checkbox) {\n            checkbox.parentElement.style.display = 'none';\n        }\n    };\n    Signature.prototype.saveSignatureImage = function () {\n        var checkbox = document.getElementById(this.pdfViewer.element.id + '_signatureCheckBox');\n        if (checkbox && checkbox.checked) {\n            if (this.outputString !== '') {\n                if (!this.pdfViewerBase.isInitialField) {\n                    this.isSaveSignature = true;\n                    this.saveSignatureString = this.outputString;\n                }\n                else {\n                    this.isSaveInitial = true;\n                    this.saveInitialString = this.outputString;\n                }\n                var canvas = document.getElementById(this.pdfViewer.element.id + '_signatureCanvas_');\n                this.saveImageString = canvas.toDataURL();\n                if (!this.pdfViewerBase.isInitialField) {\n                    this.signatureImageString = this.saveImageString;\n                }\n                else {\n                    this.initialImageString = this.saveImageString;\n                }\n            }\n        }\n        else {\n            if (this.isSaveSignature && !this.pdfViewerBase.isInitialField) {\n                this.isSaveSignature = false;\n                this.saveSignatureString = '';\n                this.saveImageString = '';\n                this.signatureImageString = '';\n            }\n            else if (this.isSaveInitial && this.pdfViewerBase.isInitialField) {\n                this.isSaveInitial = false;\n                this.saveInitialString = '';\n                this.saveImageString = '';\n                this.initialImageString = '';\n            }\n            this.clearSignatureCanvas();\n        }\n    };\n    /**\n     * @param {any} type - It describes about the type\n     * @private\n     * @returns {void}\n     */\n    Signature.prototype.addSignature = function (type) {\n        var annot;\n        if (this.pdfViewerBase.isToolbarSignClicked) {\n            var annotationName = this.pdfViewer.annotation.createGUID();\n            this.pdfViewerBase.currentSignatureAnnot = null;\n            this.pdfViewerBase.isSignatureAdded = true;\n            var pageIndex = this.pdfViewerBase.currentPageNumber - 1;\n            var thickness = this.pdfViewer.handWrittenSignatureSettings.thickness ?\n                this.pdfViewer.handWrittenSignatureSettings.thickness : 1;\n            var opacity = this.pdfViewer.handWrittenSignatureSettings.opacity ?\n                this.pdfViewer.handWrittenSignatureSettings.opacity : 1;\n            var strokeColor = this.pdfViewer.handWrittenSignatureSettings.strokeColor ? this.pdfViewer.handWrittenSignatureSettings.strokeColor : '#000000';\n            var fontSize = 16;\n            var fontFamily = 'Helvetica';\n            var signatureBounds = this.updateSignatureAspectRatio(this.outputString, true);\n            var canvas = document.getElementById(this.pdfViewer.element.id + '_signatureCanvas_');\n            this.saveImageString = canvas.toDataURL();\n            if (!this.pdfViewerBase.isInitialField) {\n                this.signatureImageString = this.saveImageString;\n            }\n            else {\n                this.initialImageString = this.saveImageString;\n            }\n            annot = {\n                id: 'sign' + this.pdfViewerBase.signatureCount, bounds: signatureBounds, pageIndex: pageIndex, data: this.outputString, fontFamily: fontFamily, fontSize: fontSize,\n                shapeAnnotationType: 'HandWrittenSignature', opacity: opacity, strokeColor: strokeColor, thickness: thickness, signatureName: annotationName\n            };\n            this.pdfViewerBase.currentSignatureAnnot = annot;\n            var checkbox = void 0;\n            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isBlazor)()) {\n                checkbox = document.getElementById(this.pdfViewer.element.id + '_signatureCheckBox');\n            }\n            else {\n                checkbox = document.getElementById('checkbox');\n            }\n            if (checkbox && checkbox.checked) {\n                this.addSignatureCollection();\n            }\n            this.hideSignaturePanel();\n            this.pdfViewerBase.isToolbarSignClicked = false;\n        }\n        else {\n            var checkbox = document.getElementById('checkbox');\n            var typeCheckbox = document.getElementById('checkbox1');\n            var imageCheckbox = document.getElementById('checkbox2');\n            var isSignatureAdded = false;\n            if (!isSignatureAdded) {\n                var canvas = document.getElementById(this.pdfViewer.element.id + '_signatureCanvas_');\n                this.saveImageString = canvas.toDataURL();\n                if (checkbox) {\n                    if (checkbox.checked) {\n                        if (!this.pdfViewerBase.isInitialField) {\n                            this.isSaveSignature = true;\n                            this.signatureDrawString = this.saveImageString;\n                            this.saveSignatureString = this.outputString;\n                        }\n                        else {\n                            this.isSaveInitial = true;\n                            this.initialDrawString = this.saveImageString;\n                            this.saveInitialString = this.outputString;\n                        }\n                        this.checkSaveFiledSign(this.pdfViewerBase.isInitialField, true);\n                    }\n                    else {\n                        if (!this.pdfViewerBase.isInitialField) {\n                            this.isSaveSignature = false;\n                            this.saveSignatureString = '';\n                        }\n                        else {\n                            this.isSaveInitial = false;\n                            this.saveInitialString = '';\n                        }\n                        this.checkSaveFiledSign(this.pdfViewerBase.isInitialField, false);\n                    }\n                }\n                this.saveTypeSignature(typeCheckbox);\n                this.saveUploadSignature(imageCheckbox);\n                if (!this.pdfViewerBase.isInitialField) {\n                    this.signatureImageString = this.saveImageString;\n                }\n                else {\n                    this.initialImageString = this.saveImageString;\n                }\n                this.pdfViewer.formFieldsModule.drawSignature(null, null, this.pdfViewerBase.currentTarget, null);\n                isSignatureAdded = true;\n            }\n        }\n    };\n    /**\n     * @param {any} data - It describes about the data\n     * @param {boolean} isSignature - It describes about the whether the isSignature is true or not\n     * @param {any} currentField - It describes about the current field\n     * @param {any} currentData - It describes about the current data\n     * @private\n     * @returns {any} - any\n     */\n    Signature.prototype.updateSignatureAspectRatio = function (data, isSignature, currentField, currentData) {\n        var collectionData = (0,_syncfusion_ej2_drawings__WEBPACK_IMPORTED_MODULE_3__.processPathData)(data);\n        var csData = (0,_syncfusion_ej2_drawings__WEBPACK_IMPORTED_MODULE_3__.splitArrayCollection)(collectionData);\n        var minimumX = -1;\n        var minimumY = -1;\n        var maximumX = -1;\n        var maximumY = -1;\n        var signatureCanvas = document.getElementById(this.pdfViewer.element.id + '_signatureCanvas_');\n        var signatureCavasWidth = 0;\n        var signatureCavasHeight = 0;\n        for (var m = 0; m < csData.length; m++) {\n            var val = csData[parseInt(m.toString(), 10)];\n            if (minimumX === -1) {\n                minimumX = parseFloat(val['x'].toString());\n                maximumX = parseFloat(val['x'].toString());\n                minimumY = parseFloat(val['y'].toString());\n                maximumY = parseFloat(val['y'].toString());\n            }\n            else {\n                var point1 = parseFloat(val['x'].toString());\n                var point2 = parseFloat(val['y'].toString());\n                if (minimumX >= point1) {\n                    minimumX = point1;\n                }\n                if (minimumY >= point2) {\n                    minimumY = point2;\n                }\n                if (maximumX <= point1) {\n                    maximumX = point1;\n                }\n                if (maximumY <= point2) {\n                    maximumY = point2;\n                }\n            }\n        }\n        signatureCavasWidth = signatureCanvas ? signatureCanvas.clientWidth : 650;\n        signatureCavasHeight = signatureCanvas ? signatureCanvas.clientHeight : 300;\n        var newdifferenceX = maximumX - minimumX;\n        var newdifferenceY = maximumY - minimumY;\n        var signBounds = this.calculateSignatureBounds(signatureCavasWidth, signatureCavasHeight, newdifferenceX, newdifferenceY, isSignature, currentField, currentData);\n        if (isSignature) {\n            var zoomvalue = this.pdfViewerBase.getZoomFactor();\n            var pageIndex = this.pdfViewerBase.currentPageNumber - 1;\n            var pageDiv = document.getElementById(this.pdfViewer.element.id + '_pageDiv_' + pageIndex);\n            var currentLeft = ((parseFloat(pageDiv.style.width) / 2) - (signBounds.currentWidth / 2)) / zoomvalue;\n            var currentTop = ((parseFloat(pageDiv.style.height) / 2) - (signBounds.currentHeight / 2)) / zoomvalue;\n            return { x: currentLeft, y: currentTop, width: signBounds.currentWidth, height: signBounds.currentHeight };\n        }\n        else {\n            return { left: signBounds.currentLeftDiff, top: signBounds.currentTopDiff, width: signBounds.currentWidth,\n                height: signBounds.currentHeight };\n        }\n    };\n    Signature.prototype.calculateSignatureBounds = function (signatureCavasWidth, signatureCavasHeight, newdifferenceX, newdifferenceY, isSignature, currentField, currentData) {\n        var ratioX = newdifferenceX / signatureCavasWidth;\n        var ratioY = newdifferenceY / signatureCavasHeight;\n        var zoomvalue = this.pdfViewerBase.getZoomFactor();\n        var currentWidth = 0;\n        var currentHeight = 0;\n        var isSignatureStretched = false;\n        var isHeightStretched = false;\n        var leftDifference = 0;\n        var topDifference = 0;\n        if (isSignature) {\n            currentWidth = this.pdfViewer.handWrittenSignatureSettings.width ? this.pdfViewer.handWrittenSignatureSettings.width : 150;\n            currentHeight = this.pdfViewer.handWrittenSignatureSettings.height ? this.pdfViewer.handWrittenSignatureSettings.height : 100;\n        }\n        else {\n            var fieldWidth = currentField ? currentField.style.width === '100%' ? currentField.clientWidth : parseFloat(currentField.style.width) : this.ConvertPointToPixel(currentData.LineBounds.Width);\n            var fieldHeight = currentField ? currentField.style.height === '100%' ? currentField.clientHeight : parseFloat(currentField.style.height) : this.ConvertPointToPixel(currentData.LineBounds.Height);\n            var fieldWidthRatio = fieldWidth / fieldHeight;\n            var fieldHeightRatio = fieldHeight / fieldWidth;\n            var canvasWidthRatio = signatureCavasWidth / signatureCavasHeight;\n            var canvasHeightRatio = signatureCavasHeight / signatureCavasWidth;\n            var fieldRotation = currentField ? currentField.offsetParent.offsetParent.style.transform ?\n                currentField.offsetParent.offsetParent.style.transform : currentField.style.transform : currentData.RotationAngle;\n            if ((fieldWidthRatio > canvasWidthRatio) || (fieldHeightRatio > canvasWidthRatio) ||\n                ((Math.abs(fieldWidthRatio - fieldHeightRatio)) <= 1)) {\n                var ratioDifference = 0;\n                if ((fieldHeightRatio > canvasWidthRatio) || ((Math.abs(fieldWidthRatio - fieldHeightRatio)) <= 1)) {\n                    isHeightStretched = true;\n                    ratioDifference = fieldHeightRatio / canvasHeightRatio;\n                }\n                else {\n                    isSignatureStretched = true;\n                    ratioDifference = fieldWidthRatio / canvasWidthRatio;\n                }\n                if (fieldRotation === 'rotate(90deg)' || fieldRotation === 'rotate(270deg)') {\n                    currentWidth = fieldHeight / zoomvalue;\n                    currentHeight = fieldWidth / zoomvalue;\n                }\n                else {\n                    if (isSignatureStretched) {\n                        leftDifference = fieldWidth / zoomvalue;\n                        currentWidth = (fieldWidth / ratioDifference) / zoomvalue;\n                        currentHeight = fieldHeight / zoomvalue;\n                    }\n                    if (isHeightStretched) {\n                        topDifference = fieldHeight / zoomvalue;\n                        currentWidth = fieldWidth / zoomvalue;\n                        currentHeight = (fieldHeight / ratioDifference) / zoomvalue;\n                    }\n                }\n            }\n            else {\n                if (fieldRotation === 'rotate(90deg)' || fieldRotation === 'rotate(270deg)') {\n                    currentWidth = fieldHeight / zoomvalue;\n                    currentHeight = fieldWidth / zoomvalue;\n                }\n                else {\n                    currentWidth = fieldWidth / zoomvalue;\n                    currentHeight = fieldHeight / zoomvalue;\n                }\n            }\n        }\n        var currentLeftDiff = (signatureCavasWidth - newdifferenceX) / 2;\n        var currentTopDiff = (signatureCavasHeight - newdifferenceY) / 2;\n        if (isSignatureStretched) {\n            currentLeftDiff = (currentLeftDiff / signatureCavasWidth) * leftDifference;\n            var leftValueDiff = ((leftDifference * ratioX) - (currentWidth * ratioX)) / 2;\n            currentLeftDiff = currentLeftDiff + leftValueDiff;\n            currentTopDiff = (currentTopDiff / signatureCavasHeight) * currentHeight;\n        }\n        else if (isHeightStretched) {\n            currentLeftDiff = (currentLeftDiff / signatureCavasWidth) * currentWidth;\n            currentTopDiff = (currentTopDiff / signatureCavasHeight) * topDifference;\n            var topValueDiff = ((topDifference * ratioY) - (currentHeight * ratioY)) / 2;\n            currentTopDiff = currentTopDiff + topValueDiff;\n        }\n        else {\n            currentLeftDiff = (currentLeftDiff / signatureCavasWidth) * currentWidth;\n            currentTopDiff = (currentTopDiff / signatureCavasHeight) * currentHeight;\n        }\n        if (this.pdfViewer.signatureFitMode !== 'Stretch') {\n            currentWidth = currentWidth * ratioX;\n            currentHeight = currentHeight * ratioY;\n        }\n        return { currentLeftDiff: currentLeftDiff, currentTopDiff: currentTopDiff, currentWidth: currentWidth,\n            currentHeight: currentHeight };\n    };\n    /**\n     * @param {string} id - It describes about the id value\n     * @private\n     * @returns {void}\n     */\n    Signature.prototype.setFocus = function (id) {\n        if (!id) {\n            if (this.currentTarget) {\n                document.getElementById(this.currentTarget.id).focus();\n            }\n        }\n        else {\n            this.removeFocus();\n            var signatureElement = document.getElementById(id);\n            signatureElement.classList.add('e-pv-signature-focus');\n        }\n    };\n    /**\n     * @private\n     * @returns {void}\n     */\n    Signature.prototype.removeFocus = function () {\n        if (this.signatureFieldCollection) {\n            var signatureFields = this.signatureFieldCollection;\n            if (signatureFields.length === 0) {\n                signatureFields = this.getSignField();\n            }\n            for (var i = 0; i < this.signatureFieldCollection.length; i++) {\n                var signatureFieldId = this.pdfViewer.formDesignerModule ?\n                    this.signatureFieldCollection[parseInt(i.toString(), 10)].FormField.uniqueID :\n                    this.signatureFieldCollection[parseInt(i.toString(), 10)].uniqueID;\n                var signatureElement = document.getElementById(signatureFieldId);\n                if (signatureElement) {\n                    signatureElement.classList.remove('e-pv-signature-focus');\n                }\n            }\n            if (this.pdfViewer.formFieldsModule.currentTarget) {\n                this.pdfViewer.formFieldsModule.currentTarget.classList.remove('e-pv-signature-focus');\n            }\n        }\n    };\n    Signature.prototype.getSignField = function () {\n        if (this.pdfViewer.formDesignerModule) {\n            this.signatureFieldCollection =\n                this.pdfViewer.formDesignerModule.getFormDesignerSignField(this.signatureFieldCollection);\n        }\n        else {\n            this.signatureFieldCollection = this.getFormFieldSignField();\n        }\n        return this.signatureFieldCollection;\n    };\n    Signature.prototype.getFormFieldSignField = function () {\n        var data = this.pdfViewerBase.getItemFromSessionStorage('_formfields');\n        var currentData;\n        if (data) {\n            var formFieldsData = JSON.parse(data);\n            for (var i = 0; i < formFieldsData.length; i++) {\n                currentData = formFieldsData[parseInt(i.toString(), 10)];\n                if (currentData.Name === 'SignatureField' || currentData.Name === 'InitialField') {\n                    currentData['uniqueID'] = this.pdfViewer.element.id + 'input_' + currentData.PageIndex + '_' + i;\n                    this.signatureFieldCollection.push(formFieldsData[parseInt(i.toString(), 10)]);\n                }\n            }\n        }\n        return this.signatureFieldCollection;\n    };\n    Signature.prototype.checkSaveFiledSign = function (initialField, saveSign) {\n        if (initialField) {\n            this.isInitialFiledSaveSignature = saveSign;\n        }\n        else {\n            this.isSignatureFieldsSaveSignature = saveSign;\n        }\n    };\n    Signature.prototype.addSignatureInPage = function () {\n        if (this.signaturetype === 'Draw') {\n            this.addSignature();\n        }\n        else if (this.signaturetype === 'Type') {\n            this.typeAddSignature();\n        }\n        else {\n            this.imageAddSignature();\n        }\n        this.drawOutputString = '';\n        this.imageOutputString = '';\n    };\n    Signature.prototype.typeAddSignature = function (type) {\n        if (this.pdfViewerBase.isToolbarSignClicked) {\n            var zoomvalue = this.pdfViewerBase.getZoomFactor();\n            var annot = null;\n            var annotationName = this.pdfViewer.annotation.createGUID();\n            this.pdfViewerBase.currentSignatureAnnot = null;\n            this.pdfViewerBase.isSignatureAdded = true;\n            var pageIndex = this.pdfViewerBase.currentPageNumber - 1;\n            var pageDiv = document.getElementById(this.pdfViewer.element.id + '_pageDiv_' + pageIndex);\n            var thickness = this.pdfViewer.handWrittenSignatureSettings.thickness ?\n                this.pdfViewer.handWrittenSignatureSettings.thickness : 1;\n            var opacity = this.pdfViewer.handWrittenSignatureSettings.opacity ?\n                this.pdfViewer.handWrittenSignatureSettings.opacity : 1;\n            var strokeColor = this.pdfViewer.handWrittenSignatureSettings.strokeColor ? this.pdfViewer.handWrittenSignatureSettings.strokeColor : '#000000';\n            var fontSize = 16;\n            var currentLeft = 0;\n            var currentTop = 0;\n            var currentHeight = 65;\n            var currentWidth = 200;\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(this.pdfViewer.handWrittenSignatureSettings.height) && (this.pdfViewer.signatureFitMode === 'Stretch')) {\n                currentHeight = this.pdfViewer.handWrittenSignatureSettings.height;\n            }\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(this.pdfViewer.handWrittenSignatureSettings.width) && (this.pdfViewer.signatureFitMode === 'Stretch')) {\n                currentWidth = this.pdfViewer.handWrittenSignatureSettings.width;\n            }\n            currentLeft = ((parseFloat(pageDiv.style.width) / 2) - (currentWidth / 2)) / zoomvalue;\n            currentTop = ((parseFloat(pageDiv.style.height) / 2) - (currentHeight / 2)) / zoomvalue;\n            var zoomFactor = this.pdfViewerBase.getZoomFactor();\n            if (!this.signtypevalue) {\n                this.updateSignatureTypeValue(true);\n            }\n            var inputValue = this.signtypevalue;\n            if (this.pdfViewer.enableHtmlSanitizer && this.outputString) {\n                this.outputString = _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.SanitizeHtmlHelper.sanitize(this.outputString);\n            }\n            annot = {\n                id: 'Typesign' + this.pdfViewerBase.signatureCount, bounds: {\n                    left: currentLeft / zoomFactor, top: currentTop / zoomFactor, x: currentLeft / zoomFactor,\n                    y: currentTop / zoomFactor, width: currentWidth, height: currentHeight\n                }, pageIndex: pageIndex, dynamicText: inputValue, data: this.pdfViewerBase.signatureModule.outputString, shapeAnnotationType: 'SignatureText',\n                opacity: opacity, strokeColor: strokeColor, thickness: thickness, fontSize: fontSize, fontFamily: this.fontName,\n                signatureName: annotationName\n            };\n            this.pdfViewerBase.currentSignatureAnnot = annot;\n            var checkbox = void 0;\n            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isBlazor)()) {\n                checkbox = document.getElementById(this.pdfViewer.element.id + '_signatureCheckBox');\n            }\n            else {\n                checkbox = document.getElementById('checkbox1');\n            }\n            if (checkbox && checkbox.checked) {\n                this.addSignatureCollection();\n            }\n            this.signtypevalue = '';\n            this.hideSignaturePanel();\n            this.pdfViewerBase.isToolbarSignClicked = false;\n        }\n        else {\n            var checkbox = document.getElementById('checkbox');\n            var typeCheckbox = document.getElementById('checkbox1');\n            var imageCheckbox = document.getElementById('checkbox2');\n            var isSignatureAdded = false;\n            if (!isSignatureAdded) {\n                this.saveDrawSignature(checkbox);\n                this.saveUploadSignature(imageCheckbox);\n                var canvas = document.getElementById(this.pdfViewer.element.id + '_signatureCanvas_');\n                if (canvas) {\n                    this.saveTypeString = canvas.toDataURL();\n                }\n                this.updateSignatureTypeValue();\n                if (this.pdfViewer.enableHtmlSanitizer && this.textValue) {\n                    this.textValue = _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.SanitizeHtmlHelper.sanitize(this.textValue);\n                }\n                if (typeCheckbox && typeCheckbox.checked) {\n                    if (!this.pdfViewerBase.isInitialField) {\n                        this.isSaveSignature = true;\n                        this.signatureImageString = this.saveTypeString;\n                        this.saveSignatureTypeString = this.textValue;\n                        this.issaveTypeSignature = true;\n                    }\n                    else {\n                        this.isSaveInitial = true;\n                        this.initialImageString = this.saveTypeString;\n                        this.saveInitialTypeString = this.textValue;\n                        this.issaveTypeInitial = true;\n                    }\n                }\n                else {\n                    if (!this.pdfViewerBase.isInitialField) {\n                        this.isSaveSignature = false;\n                        this.saveSignatureTypeString = '';\n                        this.issaveTypeSignature = false;\n                    }\n                    else {\n                        this.isSaveInitial = false;\n                        this.saveInitialTypeString = '';\n                        this.issaveTypeInitial = false;\n                    }\n                }\n                if (!this.pdfViewerBase.isInitialField) {\n                    this.signatureTypeString = this.saveTypeString;\n                }\n                else {\n                    this.initialTypeString = this.saveTypeString;\n                }\n                this.pdfViewer.formFieldsModule.drawSignature('Type', this.textValue, this.pdfViewerBase.currentTarget);\n                isSignatureAdded = true;\n                this.hideSignaturePanel();\n            }\n        }\n    };\n    Signature.prototype.imageAddSignature = function (type) {\n        if (this.pdfViewerBase.isToolbarSignClicked) {\n            var zoomvalue = this.pdfViewerBase.getZoomFactor();\n            var annot = null;\n            var annotationName = this.pdfViewer.annotation.createGUID();\n            this.pdfViewerBase.currentSignatureAnnot = null;\n            this.pdfViewerBase.isSignatureAdded = true;\n            var pageIndex = this.pdfViewerBase.currentPageNumber - 1;\n            var pageDiv = document.getElementById(this.pdfViewer.element.id + '_pageDiv_' + pageIndex);\n            var thickness = this.pdfViewer.handWrittenSignatureSettings.thickness ?\n                this.pdfViewer.handWrittenSignatureSettings.thickness : 1;\n            var opacity = this.pdfViewer.handWrittenSignatureSettings.opacity ?\n                this.pdfViewer.handWrittenSignatureSettings.opacity : 1;\n            var strokeColor = this.pdfViewer.handWrittenSignatureSettings.strokeColor ? this.pdfViewer.handWrittenSignatureSettings.strokeColor : '#000000';\n            var fontSize = 16;\n            var currentLeft = 0;\n            var currentTop = 0;\n            var standardImageRatio = 100;\n            var currentHeight = 0;\n            var currentWidth = 0;\n            if (this.pdfViewer.enableHtmlSanitizer && this.outputString) {\n                this.outputString = _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.SanitizeHtmlHelper.sanitize(this.outputString);\n            }\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(this.pdfViewer.handWrittenSignatureSettings.height) && (this.pdfViewer.signatureFitMode === 'Stretch')) {\n                currentHeight = this.pdfViewer.handWrittenSignatureSettings.height;\n            }\n            else if (this.signatureImageHeight >= this.signatureImageWidth) {\n                currentHeight = ((this.signatureImageHeight / this.signatureImageHeight) * standardImageRatio);\n            }\n            else {\n                currentHeight = ((this.signatureImageHeight / this.signatureImageWidth) * standardImageRatio);\n            }\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(this.pdfViewer.handWrittenSignatureSettings.width) && (this.pdfViewer.signatureFitMode === 'Stretch')) {\n                currentWidth = this.pdfViewer.handWrittenSignatureSettings.width;\n            }\n            else if (this.signatureImageHeight >= this.signatureImageWidth) {\n                currentWidth = ((this.signatureImageWidth / this.signatureImageHeight) * standardImageRatio);\n            }\n            else {\n                currentWidth = ((this.signatureImageWidth / this.signatureImageWidth) * standardImageRatio);\n            }\n            currentLeft = ((parseFloat(pageDiv.style.width) / 2) - (currentWidth / 2)) / zoomvalue;\n            currentTop = ((parseFloat(pageDiv.style.height) / 2) - (currentHeight / 2)) / zoomvalue;\n            var zoomFactor = this.pdfViewerBase.getZoomFactor();\n            var inputValue = this.signtypevalue;\n            annot = {\n                id: 'Typesign' + this.pdfViewerBase.signatureCount, bounds: {\n                    left: currentLeft / zoomFactor, top: currentTop / zoomFactor, x: currentLeft / zoomFactor,\n                    y: currentTop / zoomFactor, width: currentWidth, height: currentHeight\n                }, pageIndex: pageIndex, dynamicText: inputValue, data: this.pdfViewerBase.signatureModule.outputString, shapeAnnotationType: 'SignatureImage',\n                opacity: opacity, strokeColor: strokeColor, thickness: thickness, fontSize: fontSize, fontFamily: this.fontName,\n                signatureName: annotationName\n            };\n            this.pdfViewerBase.currentSignatureAnnot = annot;\n            var checkbox = void 0;\n            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isBlazor)()) {\n                checkbox = document.getElementById(this.pdfViewer.element.id + '_signatureCheckBox');\n            }\n            else {\n                checkbox = document.getElementById('checkbox2');\n            }\n            if (checkbox && checkbox.checked) {\n                this.addSignatureCollection();\n            }\n            this.hideSignaturePanel();\n            this.pdfViewerBase.isToolbarSignClicked = false;\n        }\n        else {\n            var checkbox = document.getElementById('checkbox');\n            var typeCheckbox = document.getElementById('checkbox1');\n            var imageCheckbox = document.getElementById('checkbox2');\n            var isSignatureAdded = false;\n            if (!isSignatureAdded) {\n                this.saveDrawSignature(checkbox);\n                this.saveTypeSignature(typeCheckbox);\n                var canvas = document.getElementById(this.pdfViewer.element.id + '_signatureCanvas_');\n                if (canvas) {\n                    this.saveUploadString = canvas.toDataURL();\n                }\n                if (this.pdfViewer.enableHtmlSanitizer && this.outputString) {\n                    this.outputString = _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.SanitizeHtmlHelper.sanitize(this.outputString);\n                }\n                if (imageCheckbox && imageCheckbox.checked) {\n                    if (!this.pdfViewerBase.isInitialField) {\n                        this.isSaveSignature = true;\n                        this.signatureImageString = this.saveUploadString;\n                        this.saveSignatureUploadString = this.outputString;\n                        this.issaveImageSignature = true;\n                    }\n                    else {\n                        this.isSaveInitial = true;\n                        this.initialImageString = this.saveUploadString;\n                        this.saveInitialUploadString = this.outputString;\n                        this.issaveImageInitial = true;\n                    }\n                }\n                else {\n                    if (!this.pdfViewerBase.isInitialField) {\n                        this.isSaveSignature = false;\n                        this.saveSignatureUploadString = '';\n                        this.issaveImageSignature = false;\n                    }\n                    else {\n                        this.isSaveInitial = false;\n                        this.saveInitialUploadString = '';\n                        this.issaveImageInitial = false;\n                    }\n                }\n                if (!this.pdfViewerBase.isInitialField) {\n                    this.signatureUploadString = this.saveUploadString;\n                }\n                else {\n                    this.initialUploadString = this.saveUploadString;\n                }\n                this.pdfViewer.formFieldsModule.drawSignature('Image', '', this.pdfViewerBase.currentTarget);\n                isSignatureAdded = true;\n                this.hideSignaturePanel();\n            }\n        }\n    };\n    Signature.prototype.saveDrawSignature = function (checkbox) {\n        if (checkbox) {\n            if (checkbox.checked) {\n                if (this.drawOutputString !== '') {\n                    var canvas = document.getElementById(this.pdfViewer.element.id + '_signatureCanvas_');\n                    this.saveImageString = canvas.toDataURL();\n                    if (!this.pdfViewerBase.isInitialField) {\n                        this.saveSignatureString = this.drawOutputString;\n                        this.signatureDrawString = this.saveImageString;\n                    }\n                    else {\n                        this.saveInitialString = this.drawOutputString;\n                        this.initialDrawString = this.saveImageString;\n                    }\n                    this.checkSaveFiledSign(this.pdfViewerBase.isInitialField, true);\n                }\n            }\n            else {\n                if (!this.pdfViewerBase.isInitialField) {\n                    this.saveSignatureString = '';\n                }\n                else {\n                    this.saveInitialString = '';\n                }\n                this.checkSaveFiledSign(this.pdfViewerBase.isInitialField, false);\n            }\n        }\n    };\n    Signature.prototype.saveTypeSignature = function (typeCheckbox) {\n        if (typeCheckbox) {\n            if (typeCheckbox.checked) {\n                this.updateSignatureTypeValue();\n                if (this.textValue !== '') {\n                    if (!this.pdfViewerBase.isInitialField) {\n                        this.issaveTypeSignature = true;\n                        this.saveSignatureTypeString = this.textValue;\n                    }\n                    else {\n                        this.issaveTypeInitial = true;\n                        this.saveInitialTypeString = this.textValue;\n                    }\n                }\n            }\n            else {\n                if (!this.pdfViewerBase.isInitialField) {\n                    this.saveSignatureTypeString = '';\n                    this.issaveTypeSignature = false;\n                }\n                else {\n                    this.saveInitialTypeString = '';\n                    this.issaveTypeInitial = false;\n                }\n            }\n        }\n    };\n    Signature.prototype.saveUploadSignature = function (imageCheckbox) {\n        if (imageCheckbox) {\n            if (imageCheckbox.checked) {\n                var imageCanvas = document.getElementById(this.pdfViewer.element.id + '_signatureuploadCanvas_');\n                var uploadString = imageCanvas.toDataURL();\n                var imageString = document.getElementById(this.pdfViewer.element.id + '_e-pv-upload-button').style.visibility === 'hidden' ? uploadString : '';\n                if (imageString !== '') {\n                    if (!this.pdfViewerBase.isInitialField) {\n                        this.issaveImageSignature = true;\n                        this.saveSignatureUploadString = imageString;\n                    }\n                    else {\n                        this.issaveImageInitial = true;\n                        this.saveInitialUploadString = imageString;\n                    }\n                }\n            }\n            else {\n                if (!this.pdfViewerBase.isInitialField) {\n                    this.saveSignatureUploadString = '';\n                    this.issaveImageSignature = false;\n                }\n                else {\n                    this.saveInitialUploadString = '';\n                    this.issaveImageInitial = false;\n                }\n            }\n        }\n    };\n    Signature.prototype.updateSignatureTypeValue = function (isType) {\n        var fontElements = document.querySelectorAll('.e-pv-font-sign');\n        if (fontElements) {\n            for (var j = 0; j < fontElements.length; j++) {\n                if (fontElements[parseInt(j.toString(), 10)] && fontElements[parseInt(j.toString(), 10)].style.borderColor === 'red') {\n                    if (this.pdfViewerBase.isToolbarSignClicked) {\n                        if (isType) {\n                            this.signtypevalue = fontElements[parseInt(j.toString(), 10)].textContent;\n                            this.outputString = fontElements[parseInt(j.toString(), 10)].textContent;\n                        }\n                        else {\n                            this.outputString = fontElements[parseInt(j.toString(), 10)].textContent;\n                        }\n                    }\n                    else {\n                        if (isType) {\n                            this.signtypevalue = fontElements[parseInt(j.toString(), 10)].textContent;\n                            this.textValue = fontElements[parseInt(j.toString(), 10)].textContent;\n                        }\n                        else {\n                            this.textValue = fontElements[parseInt(j.toString(), 10)].textContent;\n                        }\n                    }\n                    try {\n                        this.fontName = JSON.parse(fontElements[parseInt(j.toString(), 10)].style.fontFamily);\n                    }\n                    catch (e) {\n                        this.fontName = fontElements[parseInt(j.toString(), 10)].style.fontFamily;\n                    }\n                }\n            }\n        }\n    };\n    /**\n     * @private\n     * @returns {void}\n     */\n    Signature.prototype.hideSignaturePanel = function () {\n        if (this.signatureDialog) {\n            this.signatureDialog.hide();\n        }\n    };\n    Signature.prototype.bindTypeSignatureClickEvent = function () {\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isBlazor)()) {\n            for (var i = 0; i < 4; i++) {\n                var fontElement = document.querySelector('#' + this.pdfViewer.element.id + '_font_signature' + i);\n                if (fontElement) {\n                    fontElement.addEventListener('click', this.typeSignatureclicked.bind(this));\n                }\n            }\n        }\n    };\n    Signature.prototype.bindDrawSignatureClickEvent = function () {\n        var canvas = document.getElementById(this.pdfViewer.element.id + '_signatureCanvas_');\n        if (canvas) {\n            canvas.addEventListener('mousedown', this.signaturePanelMouseDown.bind(this));\n            canvas.addEventListener('mousemove', this.signaturePanelMouseMove.bind(this));\n            canvas.addEventListener('mouseup', this.signaturePanelMouseUp.bind(this));\n            canvas.addEventListener('mouseleave', this.signaturePanelMouseUp.bind(this));\n            canvas.addEventListener('touchstart', this.signaturePanelMouseDown.bind(this));\n            canvas.addEventListener('touchmove', this.signaturePanelMouseMove.bind(this));\n            canvas.addEventListener('touchend', this.signaturePanelMouseUp.bind(this));\n        }\n    };\n    Signature.prototype.typeSignatureclicked = function (event) {\n        var eventTarget = event.target;\n        if (eventTarget) {\n            for (var i = 0; i < 4; i++) {\n                var fontElement = document.querySelector('#' + this.pdfViewer.element.id + '_font_signature' + i);\n                if (fontElement) {\n                    fontElement.style.borderColor = '';\n                }\n            }\n            eventTarget.style.borderColor = 'red';\n            this.outputString = eventTarget.textContent;\n            try {\n                this.fontName = JSON.parse(eventTarget.style.fontFamily);\n            }\n            catch (e) {\n                this.fontName = eventTarget.style.fontFamily;\n            }\n            this.enableCreateButton(false);\n        }\n    };\n    Signature.prototype.createSignatureCanvas = function () {\n        var previousField = document.getElementById(this.pdfViewer.element.id + '_signatureCanvas_');\n        var field = document.getElementById(this.pdfViewer.element.id + 'Signature_appearance');\n        if (previousField) {\n            previousField.remove();\n        }\n        if (field) {\n            field.remove();\n        }\n        var canvasHeight = 305;\n        var viewerHeight = this.pdfViewer.element.clientHeight;\n        if (viewerHeight <= 500) {\n            canvasHeight = 250;\n        }\n        else if (viewerHeight > 500 && viewerHeight <= 750) {\n            canvasHeight = 275;\n        }\n        var appearanceDiv = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.createElement)('div', { id: this.pdfViewer.element.id + 'Signature_appearance', className: 'e-pv-signature-apperance', styles: 'margin-top:30px' });\n        var canvas = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.createElement)('canvas', { id: this.pdfViewer.element.id + '_signatureCanvas_', className: 'e-pv-signature-canvas' });\n        canvas.classList.add('e-pv-canvas-signature');\n        canvas.height = canvasHeight;\n        canvas.style.height = canvasHeight + 'px';\n        canvas.style.border = '1px dotted #bdbdbd';\n        canvas.style.backgroundColor = 'white';\n        canvas.style.boxSizing = 'border-box';\n        canvas.style.borderRadius = '2px';\n        canvas.addEventListener('mousedown', this.signaturePanelMouseDown.bind(this));\n        canvas.addEventListener('mousemove', this.signaturePanelMouseMove.bind(this));\n        canvas.addEventListener('mouseup', this.signaturePanelMouseUp.bind(this));\n        canvas.addEventListener('mouseleave', this.signaturePanelMouseLeave.bind(this));\n        canvas.addEventListener('touchstart', this.signaturePanelMouseDown.bind(this));\n        canvas.addEventListener('touchmove', this.signaturePanelMouseMove.bind(this));\n        canvas.addEventListener('touchend', this.signaturePanelMouseUp.bind(this));\n        appearanceDiv.appendChild(canvas);\n        var checkBoxObj;\n        var input;\n        var saveCheckBoxContent;\n        if (this.pdfViewerBase.isToolbarSignClicked && !this.pdfViewerBase.isInitialField) {\n            saveCheckBoxContent = this.pdfViewer.localeObj.getConstant('Save Signature');\n        }\n        else {\n            saveCheckBoxContent = this.pdfViewerBase.isInitialField ? this.pdfViewer.localeObj.getConstant('Save Initial') : this.pdfViewer.localeObj.getConstant('Save Signature');\n        }\n        if (!this.pdfViewer.hideSaveSignature) {\n            input = document.createElement('input');\n            input.type = 'checkbox';\n            input.id = 'checkbox';\n            appearanceDiv.appendChild(input);\n            checkBoxObj = new _syncfusion_ej2_buttons__WEBPACK_IMPORTED_MODULE_6__.CheckBox({ label: saveCheckBoxContent, disabled: false, checked: false });\n            checkBoxObj.appendTo(input);\n        }\n        if (!this.pdfViewerBase.isInitialField) {\n            this.isSaveSignature = this.saveSignatureCheckbox();\n        }\n        else {\n            this.isSaveInitial = this.saveSignatureCheckbox();\n        }\n        if (this.isSaveSignature && !this.pdfViewerBase.isInitialField) {\n            checkBoxObj.checked = true;\n        }\n        else if (this.isSaveInitial && this.pdfViewerBase.isInitialField) {\n            checkBoxObj.checked = true;\n        }\n        //if (!this.pdfViewerBase.isToolbarSignClicked) {\n        var typeDiv = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.createElement)('div', { id: this.pdfViewer.element.id + 'type_appearance', className: 'e-pv-signature-apperance', styles: 'margin-top:6px' });\n        var inputText = document.createElement('input');\n        if (!this.pdfViewerBase.isInitialField && this.issaveTypeSignature && !this.pdfViewerBase.isToolbarSignClicked) {\n            inputText.value = this.drawSavedTypeSignature();\n        }\n        else if (this.pdfViewerBase.isInitialField && this.issaveTypeInitial && !this.pdfViewerBase.isToolbarSignClicked) {\n            inputText.value = this.drawSavedTypeSignature();\n        }\n        inputText.type = 'text';\n        inputText.id = this.pdfViewer.element.id + '_e-pv-Signtext-box';\n        typeDiv.appendChild(inputText);\n        var inputobj = new _syncfusion_ej2_inputs__WEBPACK_IMPORTED_MODULE_4__.TextBox({\n            placeholder: this.pdfViewer.localeObj.getConstant('Enter Signature as Name'),\n            floatLabelType: 'Auto'\n        });\n        inputobj.appendTo(inputText);\n        var fontDiv = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.createElement)('div', { id: this.pdfViewer.element.id + '_font_appearance', className: 'e-pv-font-appearance-style' });\n        fontDiv.classList.add('e-pv-canvas-signature');\n        fontDiv.style.height = (canvasHeight - 35) + 'px';\n        fontDiv.style.border = '1px dotted #bdbdbd';\n        fontDiv.style.boxSizing = 'border-box';\n        fontDiv.style.borderRadius = '2px';\n        fontDiv.style.backgroundColor = 'white';\n        fontDiv.style.color = 'black';\n        fontDiv.style.marginTop = '8px';\n        fontDiv.style.paddingRight = '0px';\n        typeDiv.appendChild(fontDiv);\n        input = document.createElement('input');\n        input.type = 'checkbox';\n        input.id = 'checkbox1';\n        typeDiv.appendChild(input);\n        checkBoxObj = new _syncfusion_ej2_buttons__WEBPACK_IMPORTED_MODULE_6__.CheckBox({ label: saveCheckBoxContent, disabled: false, checked: false });\n        checkBoxObj.appendTo(input);\n        if (this.issaveTypeSignature && !this.pdfViewerBase.isInitialField && !this.pdfViewerBase.isToolbarSignClicked) {\n            checkBoxObj.checked = true;\n        }\n        else if (this.issaveTypeInitial && this.pdfViewerBase.isInitialField && !this.pdfViewerBase.isToolbarSignClicked) {\n            checkBoxObj.checked = true;\n        }\n        inputobj.addEventListener('input', this.renderSignatureText.bind(this));\n        this.enableCreateButton(true);\n        var tab = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.createElement)('div', { id: this.pdfViewer.element.id + 'Signature_tab' });\n        var uploadDiv = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.createElement)('div', { id: this.pdfViewer.element.id + 'upload_appearance', className: 'e-pv-signature-apperance', styles: 'padding-top:30px' });\n        var button = document.createElement('div');\n        button.id = this.pdfViewer.element.id + '_e-pv-upload-button';\n        uploadDiv.appendChild(button);\n        var uploadButton = new _syncfusion_ej2_buttons__WEBPACK_IMPORTED_MODULE_6__.Button({ cssClass: 'e-pv-sign-upload', content: this.pdfViewer.localeObj.getConstant('Browse Signature Image') });\n        uploadButton.appendTo(button);\n        uploadButton.element.style.position = 'absolute';\n        var uploadCanvas = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.createElement)('canvas', { id: this.pdfViewer.element.id + '_signatureuploadCanvas_', className: 'e-pv-signature-uploadcanvas' });\n        if (this.pdfViewer.element.offsetWidth > 750) {\n            uploadCanvas.width = 714;\n        }\n        else {\n            uploadCanvas.width = this.pdfViewer.element.offsetWidth - 35;\n        }\n        uploadCanvas.classList.add('e-pv-canvas-signature');\n        uploadCanvas.height = canvasHeight;\n        uploadCanvas.style.height = canvasHeight + 'px';\n        uploadButton.element.style.left = ((uploadCanvas.width / 2) - 50) + 'px';\n        uploadButton.element.style.top = ((parseFloat(uploadCanvas.style.height) / 2) + 20) + 'px';\n        uploadCanvas.style.border = '1px dotted #bdbdbd';\n        uploadCanvas.style.backgroundColor = 'transparent';\n        uploadCanvas.style.boxSizing = 'border-box';\n        uploadCanvas.style.borderRadius = '2px';\n        uploadCanvas.style.zIndex = '0';\n        var imageUploadString = '';\n        if (!this.pdfViewerBase.isInitialField && this.issaveImageSignature && !this.pdfViewerBase.isToolbarSignClicked) {\n            imageUploadString = this.drawSavedImageSignature();\n        }\n        else if (this.pdfViewerBase.isInitialField && this.issaveImageInitial && !this.pdfViewerBase.isToolbarSignClicked) {\n            imageUploadString = this.drawSavedImageSignature();\n        }\n        if (imageUploadString !== '' && !this.pdfViewerBase.isToolbarSignClicked) {\n            this.clearUploadString = false;\n            var ctx_1 = uploadCanvas.getContext('2d');\n            var image_2 = new Image();\n            image_2.src = imageUploadString;\n            image_2.onload = function () {\n                ctx_1.drawImage(image_2, 0, 0, uploadCanvas.width, uploadCanvas.height);\n            };\n            uploadButton.element.style.display = 'hidden';\n        }\n        uploadDiv.appendChild(uploadCanvas);\n        input = document.createElement('input');\n        input.type = 'checkbox';\n        input.id = 'checkbox2';\n        uploadDiv.appendChild(input);\n        checkBoxObj = new _syncfusion_ej2_buttons__WEBPACK_IMPORTED_MODULE_6__.CheckBox({ label: saveCheckBoxContent, disabled: false, checked: false });\n        checkBoxObj.appendTo(input);\n        if (this.issaveImageSignature && !this.pdfViewerBase.isInitialField && !this.pdfViewerBase.isToolbarSignClicked) {\n            checkBoxObj.checked = true;\n        }\n        else if (this.issaveImageInitial && this.pdfViewerBase.isInitialField && !this.pdfViewerBase.isToolbarSignClicked) {\n            checkBoxObj.checked = true;\n        }\n        button.addEventListener('click', this.uploadSignatureImage.bind(this));\n        this.signfontStyle = [{ FontName: 'Helvetica' }, { FontName: 'Times New Roman' }, { FontName: 'Courier' }, { FontName: 'Symbol' }];\n        var fontSignature = [];\n        if (this.pdfViewerBase.isToolbarSignClicked && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(this.pdfViewer.handWrittenSignatureSettings.typeSignatureFonts)) {\n            for (var j = 0; j < 4; j++) {\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(this.pdfViewer.handWrittenSignatureSettings.typeSignatureFonts[parseInt(j.toString(), 10)])) {\n                    this.signfontStyle[parseInt(j.toString(), 10)].FontName =\n                        this.pdfViewer.handWrittenSignatureSettings.typeSignatureFonts[parseInt(j.toString(), 10)];\n                }\n            }\n        }\n        this.setCustomFonts();\n        for (var i = 0; i < this.signfontStyle.length; i++) {\n            fontSignature[parseInt(i.toString(), 10)] = document.createElement('div');\n            fontSignature[parseInt(i.toString(), 10)].id = '_font_signature' + i + '';\n            fontSignature[parseInt(i.toString(), 10)].classList.add('e-pv-font-sign');\n            if (canvasHeight === 275) {\n                fontSignature[parseInt(i.toString(), 10)].style.fontSize = '13px';\n                fontSignature[parseInt(i.toString(), 10)].style.paddingTop = '30px';\n                fontSignature[parseInt(i.toString(), 10)].style.height = '78px';\n            }\n            else if (canvasHeight === 250) {\n                fontSignature[parseInt(i.toString(), 10)].style.fontSize = '12px';\n                fontSignature[parseInt(i.toString(), 10)].style.paddingTop = '25px';\n                fontSignature[parseInt(i.toString(), 10)].style.height = '68px';\n            }\n        }\n        this.fontsign = fontSignature;\n        // eslint-disable-next-line\n        var proxy = this;\n        var items = [];\n        if (this.pdfViewerBase.isToolbarSignClicked) {\n            if (this.pdfViewerBase.isInitialField) {\n                items = this.showHideSignatureTab((this.pdfViewer.handWrittenSignatureSettings.initialDialogSettings ?\n                    this.pdfViewer.handWrittenSignatureSettings.initialDialogSettings : this.pdfViewer.initialDialogSettings) &&\n                    (this.pdfViewer.handWrittenSignatureSettings.initialDialogSettings ?\n                        this.pdfViewer.handWrittenSignatureSettings.initialDialogSettings.displayMode :\n                        this.pdfViewer.initialDialogSettings.displayMode), appearanceDiv, typeDiv, uploadDiv);\n            }\n            else {\n                items = this.showHideSignatureTab((this.pdfViewer.handWrittenSignatureSettings.signatureDialogSettings ?\n                    this.pdfViewer.handWrittenSignatureSettings.signatureDialogSettings :\n                    this.pdfViewer.signatureDialogSettings) && (this.pdfViewer.handWrittenSignatureSettings.signatureDialogSettings ?\n                    this.pdfViewer.handWrittenSignatureSettings.signatureDialogSettings.displayMode :\n                    this.pdfViewer.signatureDialogSettings.displayMode), appearanceDiv, typeDiv, uploadDiv);\n            }\n        }\n        else {\n            if (this.pdfViewerBase.isInitialField) {\n                items = this.showHideSignatureTab((this.pdfViewer.initialFieldSettings.initialDialogSettings ?\n                    this.pdfViewer.initialFieldSettings.initialDialogSettings.displayMode : 7), appearanceDiv, typeDiv, uploadDiv);\n            }\n            else {\n                items = this.showHideSignatureTab((this.pdfViewer.signatureFieldSettings.signatureDialogSettings ?\n                    this.pdfViewer.signatureFieldSettings.signatureDialogSettings.displayMode : 7), appearanceDiv, typeDiv, uploadDiv);\n            }\n        }\n        this.tabObj = new _syncfusion_ej2_navigations__WEBPACK_IMPORTED_MODULE_7__.Tab({\n            selected: function (args) {\n                proxy.handleSelectEvent(args);\n            },\n            selecting: function (args) {\n                proxy.select(args);\n            },\n            items: items\n        });\n        this.tabObj.appendTo(tab);\n        if (items[0].header.label === 'DRAW') {\n            this.signaturetype = 'Draw';\n        }\n        else if (items[0].header.label === 'TYPE') {\n            this.signaturetype = 'Type';\n        }\n        else {\n            this.signaturetype = 'Image';\n        }\n        return tab;\n        // } else {\n        //     return appearanceDiv;\n        // }\n    };\n    //to set custom fonts for specific settings\n    Signature.prototype.setCustomFonts = function () {\n        if (!this.pdfViewerBase.isToolbarSignClicked && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(this.pdfViewer.signatureFieldSettings.typeSignatureFonts)) {\n            if (!this.pdfViewerBase.isInitialField) {\n                for (var j = 0; j < 4; j++) {\n                    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(this.pdfViewer.signatureFieldSettings.typeSignatureFonts[parseInt(j.toString(), 10)])) {\n                        this.signfontStyle[parseInt(j.toString(), 10)].FontName =\n                            this.pdfViewer.signatureFieldSettings.typeSignatureFonts[parseInt(j.toString(), 10)];\n                    }\n                }\n            }\n        }\n        if (!this.pdfViewerBase.isToolbarSignClicked && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(this.pdfViewer.initialFieldSettings.typeInitialFonts)) {\n            if (this.pdfViewerBase.isInitialField) {\n                for (var j = 0; j < 4; j++) {\n                    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(this.pdfViewer.initialFieldSettings.typeInitialFonts[parseInt(j.toString(), 10)])) {\n                        this.signfontStyle[parseInt(j.toString(), 10)].FontName =\n                            this.pdfViewer.initialFieldSettings.typeInitialFonts[parseInt(j.toString(), 10)];\n                    }\n                }\n            }\n        }\n    };\n    Signature.prototype.handleSelectEvent = function (e) {\n        var headerText = '';\n        var maximumWidth = 750;\n        var tabInstance = document.getElementById(this.pdfViewer.element.id + 'Signature_tab').ej2_instances[0];\n        if (tabInstance) {\n            if (tabInstance.items.length > 0) {\n                for (var i = 0; i < tabInstance.items.length; i++) {\n                    var headerValue = tabInstance.items[parseInt(i.toString(), 10)].header.text;\n                    if (headerValue === e.selectedItem.textContent) {\n                        headerText = tabInstance.items[parseInt(i.toString(), 10)].header.label;\n                    }\n                }\n            }\n        }\n        this.clearSignatureCanvas(e);\n        if (headerText.toLocaleLowerCase() === 'draw') {\n            this.signaturetype = 'Draw';\n            this.enableCreateSignatureButton();\n            var drawCheckbox = document.getElementById('checkbox');\n            this.hideSignatureCheckbox(drawCheckbox);\n        }\n        else if (headerText.toLocaleLowerCase() === 'type') {\n            var canvas = document.getElementById(this.pdfViewer.element.id + '_signatureCanvas_');\n            if (canvas) {\n                this.drawSignatureDataUrl = canvas.toDataURL();\n            }\n            this.updateSignatureTypeValue();\n            this.signaturetype = 'Type';\n            this.enableCreateSignatureButton();\n            var typeCheckbox = document.getElementById('checkbox1');\n            this.hideSignatureCheckbox(typeCheckbox);\n            var textbox = document.getElementById(this.pdfViewer.element.id + '_e-pv-Signtext-box');\n            if (!this.pdfViewerBase.isInitialField && this.saveSignatureTypeString !== '' && textbox.value !== '' && !this.pdfViewerBase.isToolbarSignClicked) {\n                this.renderSignatureText();\n            }\n            else if (this.pdfViewerBase.isInitialField && this.saveInitialTypeString !== '' && textbox.value !== '' && !this.pdfViewerBase.isToolbarSignClicked) {\n                this.renderSignatureText();\n            }\n        }\n        else if (headerText.toLocaleLowerCase() === 'upload') {\n            var canvas = document.getElementById(this.pdfViewer.element.id + '_signatureCanvas_');\n            if (canvas) {\n                this.drawSignatureDataUrl = canvas.toDataURL();\n            }\n            this.signaturetype = 'Image';\n            this.enableCreateSignatureButton();\n            var imageCheckbox = document.getElementById('checkbox2');\n            this.hideSignatureCheckbox(imageCheckbox);\n            var signbutton = document.getElementById(this.pdfViewer.element.id + '_e-pv-upload-button');\n            if (this.saveSignatureUploadString !== '' && !this.pdfViewerBase.isInitialField && !this.clearUploadString && !this.pdfViewerBase.isToolbarSignClicked) {\n                this.enableCreateButton(false);\n                signbutton.style.visibility = 'hidden';\n                this.outputString = this.saveSignatureUploadString;\n            }\n            if (this.saveInitialUploadString !== '' && this.pdfViewerBase.isInitialField && !this.clearUploadString && !this.pdfViewerBase.isToolbarSignClicked) {\n                this.enableCreateButton(false);\n                signbutton.style.visibility = 'hidden';\n                this.outputString = this.saveInitialUploadString;\n            }\n        }\n        if (this.pdfViewer.element.offsetWidth < maximumWidth) {\n            this.updateCanvasSize();\n        }\n        this.drawSignOnTabSwitch();\n        if (headerText.toLocaleLowerCase() === 'upload' && this.imageSignatureDataUrl) {\n            this.imageSignOnTabSwitch();\n        }\n    };\n    Signature.prototype.enableCreateSignatureButton = function () {\n        if (this.pdfViewerBase.isToolbarSignClicked || this.signaturetype !== 'Type') {\n            if (this.outputString !== '') {\n                this.enableCreateButton(false);\n            }\n            else {\n                this.enableCreateButton(true);\n            }\n        }\n        else {\n            if (this.textValue !== '') {\n                this.enableCreateButton(false);\n            }\n            else {\n                this.enableCreateButton(true);\n            }\n        }\n    };\n    Signature.prototype.showHideSignatureTab = function (displayMode, appearanceDiv, typeDiv, uploadDiv) {\n        var items = [];\n        if (displayMode & _types__WEBPACK_IMPORTED_MODULE_8__.DisplayMode.Draw) {\n            items.push({\n                header: { 'text': this.pdfViewer.localeObj.getConstant('Draw-hand Signature'), 'label': 'DRAW' },\n                content: appearanceDiv\n            });\n        }\n        if (displayMode & _types__WEBPACK_IMPORTED_MODULE_8__.DisplayMode.Text) {\n            items.push({\n                header: { 'text': this.pdfViewer.localeObj.getConstant('Type Signature'), 'label': 'TYPE' },\n                content: typeDiv\n            });\n        }\n        if (displayMode & _types__WEBPACK_IMPORTED_MODULE_8__.DisplayMode.Upload) {\n            items.push({\n                header: { 'text': this.pdfViewer.localeObj.getConstant('Upload Signature'), 'label': 'UPLOAD' },\n                content: uploadDiv\n            });\n        }\n        return items;\n    };\n    /**\n     * @private\n     * @returns {void}\n     */\n    Signature.prototype.createSignatureFileElement = function () {\n        var signImage = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.createElement)('input', { id: this.pdfViewer.element.id + '_signElement', attrs: { 'type': 'file' } });\n        signImage.setAttribute('accept', '.jpg,.jpeg,.png');\n        signImage.style.position = 'absolute';\n        signImage.style.left = '0px';\n        signImage.style.top = '0px';\n        signImage.style.visibility = 'hidden';\n        document.body.appendChild(signImage);\n        signImage.addEventListener('change', this.addStampImage);\n    };\n    Signature.prototype.uploadSignatureImage = function () {\n        var signImage = document.getElementById(this.pdfViewer.element.id + '_signElement');\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(signImage)) {\n            this.createSignatureFileElement();\n            signImage = document.getElementById(this.pdfViewer.element.id + '_signElement');\n        }\n        if (signImage) {\n            signImage.click();\n        }\n    };\n    Signature.prototype.renderSignatureText = function () {\n        var maximumWidth = 750;\n        var enableButtons;\n        var fontDiv = document.getElementById(this.pdfViewer.element.id + '_font_appearance');\n        var textBox = document.getElementById(this.pdfViewer.element.id + '_e-pv-Signtext-box');\n        for (var i = 0; i < this.signfontStyle.length; i++) {\n            this.fontsign[parseInt(i.toString(), 10)].innerHTML = textBox.value;\n            this.fontsign[parseInt(i.toString(), 10)].style.fontFamily = this.signfontStyle[parseInt(i.toString(), 10)].FontName;\n            if (this.fontName !== '' && this.signfontStyle[parseInt(i.toString(), 10)].FontName === this.fontName) {\n                this.fontsign[parseInt(i.toString(), 10)].classList.add('e-pv-selected-fontdiv');\n                this.fontsign[parseInt(i.toString(), 10)].style.borderColor = 'red';\n            }\n            else if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(this.fontName) &&\n                !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(this.signfontStyle[parseInt(i.toString(), 10)].FontName) && i === 0) {\n                this.fontsign[parseInt(i.toString(), 10)].classList.add('e-pv-selected-fontdiv');\n                this.fontsign[parseInt(i.toString(), 10)].style.borderColor = 'red';\n            }\n            fontDiv.appendChild(this.fontsign[parseInt(i.toString(), 10)]);\n        }\n        for (var i = 0; i < this.signfontStyle.length; i++) {\n            var clickSign = document.getElementById('_font_signature' + i + '');\n            clickSign.addEventListener('click', this.typeSignatureclick.bind(this));\n        }\n        if (textBox.value.trim() === '') {\n            enableButtons = true;\n        }\n        else {\n            enableButtons = false;\n        }\n        this.enableCreateButton(enableButtons);\n        this.enableClearbutton(enableButtons);\n        if (this.pdfViewer.element.offsetWidth < maximumWidth) {\n            this.updateCanvasSize();\n        }\n        this.drawSignOnTabSwitch();\n    };\n    Signature.prototype.typeSignatureclick = function () {\n        var eventTarget = event.target;\n        if (eventTarget.textContent.trim() !== '') {\n            var createButton = document.getElementsByClassName('e-pv-createbtn')[0];\n            createButton.disabled = false;\n            for (var i = 0; i < 4; i++) {\n                var fontElement = document.getElementById('_font_signature' + i + '');\n                if (fontElement) {\n                    fontElement.style.borderColor = '';\n                    fontElement.classList.remove('e-pv-selected-fontdiv');\n                }\n            }\n            eventTarget.classList.add('e-pv-selected-fontdiv');\n            eventTarget.style.borderColor = 'red';\n            this.outputString = eventTarget.textContent;\n            try {\n                this.fontName = JSON.parse(eventTarget.style.fontFamily);\n            }\n            catch (e) {\n                this.fontName = eventTarget.style.fontFamily;\n            }\n        }\n    };\n    /**\n     * @param {any} bounds - It describes about the bounds value\n     * @param {any} position - It describes about the position\n     * @private\n     * @returns {void}\n     */\n    Signature.prototype.addSignatureCollection = function (bounds, position) {\n        var minimumX = -1;\n        var minimumY = -1;\n        var maximumX = -1;\n        var maximumY = -1;\n        var collectionData = (0,_syncfusion_ej2_drawings__WEBPACK_IMPORTED_MODULE_3__.processPathData)(this.outputString);\n        var newCanvas = document.createElement('canvas');\n        var context = newCanvas.getContext('2d');\n        var imageString;\n        var signatureType = this.pdfViewerBase.currentSignatureAnnot.shapeAnnotationType;\n        if (signatureType === 'HandWrittenSignature') {\n            if (collectionData.length !== 0) {\n                for (var k = 0; k < collectionData.length; k++) {\n                    var val = collectionData[parseInt(k.toString(), 10)];\n                    if (minimumX === -1) {\n                        minimumX = (val['x']);\n                        maximumX = (val['x']);\n                        minimumY = (val['y']);\n                        maximumY = (val['y']);\n                    }\n                    else {\n                        var point1 = (val['x']);\n                        var point2 = (val['y']);\n                        if (minimumX >= point1) {\n                            minimumX = point1;\n                        }\n                        if (minimumY >= point2) {\n                            minimumY = point2;\n                        }\n                        if (maximumX <= point1) {\n                            maximumX = point1;\n                        }\n                        if (maximumY <= point2) {\n                            maximumY = point2;\n                        }\n                    }\n                }\n                var newdifferenceX = maximumX - minimumX;\n                var newdifferenceY = maximumY - minimumY;\n                var differenceX = newdifferenceX / 100;\n                var differenceY = newdifferenceY / 100;\n                var left = 0;\n                var top_1 = 0;\n                if (bounds) {\n                    newCanvas.width = position.currentWidth;\n                    newCanvas.height = position.currentHeight;\n                    differenceX = newdifferenceX / (bounds.width);\n                    differenceY = newdifferenceY / (bounds.height);\n                    left = bounds.x - position.currentLeft;\n                    top_1 = bounds.y - position.currentTop;\n                }\n                else {\n                    newCanvas.width = 100;\n                    newCanvas.height = 100;\n                }\n                context.beginPath();\n                for (var n = 0; n < collectionData.length; n++) {\n                    var val = collectionData[parseInt(n.toString(), 10)];\n                    var point1 = ((val['x'] - minimumX) / differenceX) + left;\n                    var point2 = ((val['y'] - minimumY) / differenceY) + top_1;\n                    if (val['command'] === 'M') {\n                        context.moveTo(point1, point2);\n                    }\n                    else if (val['command'] === 'L') {\n                        context.lineTo(point1, point2);\n                    }\n                }\n                context.stroke();\n                context.closePath();\n                imageString = newCanvas.toDataURL();\n            }\n        }\n        else if (signatureType === 'SignatureText') {\n            imageString = this.outputString;\n        }\n        else {\n            imageString = this.outputString;\n        }\n        if (bounds) {\n            this.saveImageString = imageString;\n        }\n        else {\n            var signCollection = {};\n            signCollection['sign_' + this.pdfViewerBase.imageCount] = this.outputString;\n            this.outputcollection.push(signCollection);\n            var signBounds = {};\n            signBounds['height'] = this.pdfViewerBase.currentSignatureAnnot.bounds.height;\n            signBounds['width'] = this.pdfViewerBase.currentSignatureAnnot.bounds.width;\n            var signature = [];\n            signature.push({ id: 'sign_' + this.pdfViewerBase.imageCount, imageData: imageString, signatureType: signatureType, fontFamily: this.pdfViewerBase.currentSignatureAnnot.fontFamily, bounds: signBounds });\n            this.signaturecollection.push({ image: signature, isInitial: this.pdfViewerBase.isInitialField });\n            this.pdfViewerBase.imageCount++;\n        }\n    };\n    /**\n     * @private]\n     * @param {number} limit - The limit.\n     * @returns {number} - Returns number.\n     */\n    Signature.prototype.getSaveLimit = function (limit) {\n        if (limit > this.maxSaveLimit) {\n            limit = this.maxSaveLimit;\n        }\n        else if (limit < 1) {\n            limit = 1;\n        }\n        return limit;\n    };\n    /**\n     * @private\n     * @returns {void}\n     */\n    Signature.prototype.RenderSavedSignature = function () {\n        this.pdfViewerBase.signatureCount++;\n        var zoomvalue = this.pdfViewerBase.getZoomFactor();\n        var annot;\n        if (this.pdfViewerBase.isAddedSignClicked) {\n            var annotationName = this.pdfViewer.annotation.createGUID();\n            this.pdfViewerBase.currentSignatureAnnot = null;\n            this.pdfViewerBase.isSignatureAdded = true;\n            var pageIndex = this.pdfViewerBase.currentPageNumber - 1;\n            var pageDiv = document.getElementById(this.pdfViewer.element.id + '_pageDiv_' + pageIndex);\n            var currentLeft = 0;\n            var currentTop = 0;\n            var currentWidth = this.pdfViewer.handWrittenSignatureSettings.width ?\n                this.pdfViewer.handWrittenSignatureSettings.width : 100;\n            var currentHeight = this.pdfViewer.handWrittenSignatureSettings.height ?\n                this.pdfViewer.handWrittenSignatureSettings.height : 100;\n            var thickness = this.pdfViewer.handWrittenSignatureSettings.thickness ?\n                this.pdfViewer.handWrittenSignatureSettings.thickness : 1;\n            var opacity = this.pdfViewer.handWrittenSignatureSettings.opacity ?\n                this.pdfViewer.handWrittenSignatureSettings.opacity : 1;\n            var strokeColor = this.pdfViewer.handWrittenSignatureSettings.strokeColor ? this.pdfViewer.handWrittenSignatureSettings.strokeColor : '#000000';\n            currentLeft = ((parseFloat(pageDiv.style.width) / 2) - (currentWidth / 2)) / zoomvalue;\n            currentTop = ((parseFloat(pageDiv.style.height) / 2) - (currentHeight / 2)) / zoomvalue;\n            var keyString = '';\n            var signatureType = void 0;\n            var signatureFontFamily = void 0;\n            var bounds = void 0;\n            for (var collection = 0; collection < this.outputcollection.length; collection++) {\n                var collectionAddedsign = this.outputcollection[parseInt(collection.toString(), 10)];\n                var eventTarget = event.target;\n                if (eventTarget && eventTarget.id === 'sign_' + collection || eventTarget && eventTarget.id === 'sign_border' + collection) {\n                    keyString = collectionAddedsign['sign_' + collection];\n                    break;\n                }\n            }\n            for (var signatureIndex = 0; signatureIndex < this.signaturecollection.length; signatureIndex++) {\n                var eventTarget = event.target;\n                var signatureId = this.signaturecollection[parseInt(signatureIndex.toString(), 10)].image[0].id.split('_')[1];\n                if (eventTarget && eventTarget.id === 'sign_' + signatureId || eventTarget && eventTarget.id === 'sign_border' + signatureId) {\n                    signatureType = this.signaturecollection[parseInt(signatureIndex.toString(), 10)].image[0].signatureType;\n                    signatureFontFamily = this.signaturecollection[parseInt(signatureIndex.toString(), 10)].image[0].fontFamily;\n                    bounds = this.signaturecollection[parseInt(signatureIndex.toString(), 10)].image[0].bounds;\n                    break;\n                }\n            }\n            if (signatureType === 'HandWrittenSignature') {\n                var signatureBounds = this.updateSignatureAspectRatio(keyString, true);\n                if (bounds.width !== signatureBounds.width && bounds.height !== signatureBounds.height) {\n                    currentWidth = bounds.width;\n                    currentHeight = bounds.height;\n                }\n                else {\n                    currentWidth = signatureBounds.width ? signatureBounds.width : currentWidth;\n                    currentHeight = signatureBounds.height ? signatureBounds.height : currentHeight;\n                }\n            }\n            else {\n                currentWidth = bounds.width;\n                currentHeight = bounds.height;\n            }\n            annot = {\n                id: 'sign' + this.pdfViewerBase.signatureCount, bounds: { x: currentLeft, y: currentTop, width: currentWidth, height: currentHeight }, pageIndex: pageIndex, data: keyString,\n                shapeAnnotationType: signatureType, opacity: opacity, fontFamily: signatureFontFamily, strokeColor: strokeColor,\n                thickness: thickness, signatureName: annotationName\n            };\n            this.pdfViewerBase.currentSignatureAnnot = annot;\n            this.pdfViewerBase.isAddedSignClicked = false;\n        }\n        else {\n            this.pdfViewer.formFieldsModule.drawSignature();\n        }\n    };\n    /**\n     * @private\n     * @returns {void}\n     */\n    Signature.prototype.updateCanvasSize = function () {\n        var canvas = document.getElementById(this.pdfViewer.element.id + '_signatureCanvas_');\n        this.setTabItemWidth(canvas);\n        var uploadCanvas = document.getElementById(this.pdfViewer.element.id + '_signatureuploadCanvas_');\n        this.setTabItemWidth(uploadCanvas);\n        var fontAppearance = document.getElementById(this.pdfViewer.element.id + '_font_appearance');\n        this.setTabItemWidth(fontAppearance);\n    };\n    Signature.prototype.setTabItemWidth = function (canvas) {\n        var padding = 2;\n        var maximumWidth = 750;\n        var canvasWidth = 714;\n        var margin = 50;\n        var elem = document.querySelector('.e-dlg-content');\n        if (elem) {\n            var style = getComputedStyle(elem);\n            padding = padding + parseInt(style.paddingLeft, 10) + parseInt(style.paddingRight, 10);\n        }\n        if (canvas && this.signatureDialog && this.signatureDialog.visible) {\n            if (canvas.tagName !== 'DIV') {\n                var context_2 = canvas.getContext('2d');\n                var canvasContent = canvas.toDataURL();\n                var image_3 = new Image();\n                image_3.src = canvasContent;\n                image_3.onload = function () {\n                    context_2.drawImage(image_3, 0, 0, canvas.width, canvas.height);\n                };\n            }\n            if (this.pdfViewer.element.parentElement.clientWidth > maximumWidth) {\n                canvas.width = canvasWidth;\n                canvas.style.width = canvasWidth + 'px';\n            }\n            else {\n                canvas.width = this.pdfViewer.element.parentElement.clientWidth - padding;\n                canvas.style.width = canvas.width + 'px';\n            }\n        }\n        var fontInnerDiv = document.getElementsByClassName('e-pv-font-sign');\n        if (canvas && fontInnerDiv && fontInnerDiv.length > 0) {\n            for (var i = 0; i < fontInnerDiv.length; i++) {\n                var fontDiv = fontInnerDiv[parseInt(i.toString(), 10)];\n                fontDiv.style.width = ((canvas.width / 2) - margin) + 'px';\n            }\n        }\n    };\n    Signature.prototype.drawSignOnTabSwitch = function () {\n        // eslint-disable-next-line\n        var proxy = this;\n        var image = new Image();\n        image.onload = function () {\n            var canvas = document.getElementById(proxy.pdfViewer.element.id + '_signatureCanvas_');\n            if (canvas) {\n                var context = canvas.getContext('2d');\n                context.drawImage(image, 0, 0);\n            }\n        };\n        image.src = this.drawSignatureDataUrl;\n    };\n    Signature.prototype.imageSignOnTabSwitch = function () {\n        // eslint-disable-next-line\n        var proxy = this;\n        var image = new Image();\n        image.onload = function () {\n            var canvas = document.getElementById(proxy.pdfViewer.element.id + '_signatureuploadCanvas_');\n            if (canvas) {\n                var context = canvas.getContext('2d');\n                var signbutton = document.getElementById(proxy.pdfViewer.element.id + '_e-pv-upload-button');\n                signbutton.style.visibility = 'hidden';\n                context.drawImage(image, 0, 0, canvas.width, canvas.height);\n                proxy.enableCreateButton(false);\n                proxy.signatureImageHeight = image.naturalHeight;\n                proxy.signatureImageWidth = image.naturalWidth;\n            }\n        };\n        image.src = this.imageSignatureDataUrl;\n    };\n    Signature.prototype.signaturePanelMouseDown = function (e) {\n        if (e.type !== 'contextmenu') {\n            e.preventDefault();\n            this.findMousePosition(e);\n            this.mouseDetection = true;\n            this.oldX = this.mouseX;\n            this.oldY = this.mouseY;\n            this.newObject = [];\n            this.drawMousePosition(e);\n            this.mouseMoving = true;\n        }\n    };\n    Signature.prototype.enableCreateButton = function (isEnable) {\n        var createbtn = document.getElementsByClassName('e-pv-createbtn')[0];\n        if (createbtn) {\n            createbtn.disabled = isEnable;\n        }\n        this.enableClearbutton(isEnable);\n    };\n    Signature.prototype.enableClearbutton = function (isEnable) {\n        var clearbtn = document.getElementsByClassName('e-pv-clearbtn')[0];\n        if (clearbtn) {\n            clearbtn.disabled = isEnable;\n        }\n    };\n    Signature.prototype.signaturePanelMouseMove = function (e) {\n        if (this.mouseDetection && this.signaturetype === 'Draw') {\n            this.findMousePosition(e);\n            this.enableCreateButton(false);\n            this.drawMousePosition(e);\n        }\n    };\n    Signature.prototype.findMousePosition = function (event) {\n        var offsetX;\n        var offsetY;\n        if (event.type.indexOf('touch') !== -1) {\n            event = event;\n            var element = event.target;\n            var currentRect = element.getBoundingClientRect();\n            this.mouseX = event.changedTouches[0].clientX - currentRect.left;\n            this.mouseY = event.changedTouches[0].clientY - currentRect.top;\n        }\n        else {\n            event = event;\n            this.mouseX = event.offsetX;\n            this.mouseY = event.offsetY;\n        }\n    };\n    Signature.prototype.drawMousePosition = function (event) {\n        if (this.mouseDetection) {\n            this.drawSignatureInCanvas();\n            this.oldX = this.mouseX;\n            this.oldY = this.mouseY;\n        }\n    };\n    Signature.prototype.drawSignatureInCanvas = function () {\n        var canvas = document.getElementById(this.pdfViewer.element.id + '_signatureCanvas_');\n        var context = canvas.getContext('2d');\n        context.beginPath();\n        context.moveTo(this.oldX, this.oldY);\n        context.lineTo(this.mouseX, this.mouseY);\n        context.stroke();\n        context.lineWidth = 2;\n        context.arc(this.oldX, this.oldY, 2 / 2, 0, Math.PI * 2, true);\n        context.closePath();\n        this.newObject.push(this.mouseX, this.mouseY);\n    };\n    Signature.prototype.signaturePanelMouseUp = function () {\n        if (this.mouseDetection) {\n            this.convertToPath(this.newObject);\n        }\n        this.mouseDetection = false;\n        if (event.type === 'touchend') {\n            this.canvasTouched = true;\n        }\n    };\n    Signature.prototype.signaturePanelMouseLeave = function () {\n        if (this.mouseDetection) {\n            this.convertToPath(this.newObject);\n        }\n        this.mouseDetection = false;\n        this.mouseMoving = false;\n    };\n    Signature.prototype.convertToPath = function (newObject) {\n        this.movePath(newObject[0], newObject[1]);\n        this.linePath(newObject[0], newObject[1]);\n        for (var n = 2; n < newObject.length; n = n + 2) {\n            this.linePath(newObject[parseInt(n.toString(), 10)], newObject[n + 1]);\n        }\n    };\n    Signature.prototype.linePath = function (x, y) {\n        this.outputString += 'L' + x + ',' + y + ' ';\n    };\n    Signature.prototype.movePath = function (x, y) {\n        this.outputString += 'M' + x + ',' + y + ' ';\n    };\n    /**\n     * @param {any} type - It describes about the type\n     * @private\n     * @returns {void}\n     */\n    Signature.prototype.clearSignatureCanvas = function (type) {\n        var isCanvasClear = true;\n        var drawObject = [];\n        if (type && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(type.previousIndex) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(type.selectedIndex)) {\n            isCanvasClear = false;\n            if (type.previousIndex === 0) {\n                this.drawOutputString = this.outputString;\n                drawObject = this.newObject;\n            }\n            else if (type.previousIndex === 2) {\n                this.imageOutputString = this.outputString;\n            }\n            this.outputString = '';\n            this.newObject = [];\n            if (type.selectedIndex === 0) {\n                this.outputString = this.drawOutputString;\n                this.newObject = drawObject;\n            }\n            else if (type.selectedIndex === 2) {\n                this.outputString = this.imageOutputString;\n            }\n        }\n        else {\n            this.outputString = '';\n            this.newObject = [];\n        }\n        var isClearDrawTab = false;\n        var isClearTypeTab = false;\n        var isClearImageTab = false;\n        if (type && type.currentTarget && type.currentTarget.classList.contains('e-pv-clearbtn')) {\n            isCanvasClear = false;\n            if (this.signaturetype === 'Draw') {\n                isClearDrawTab = true;\n                var checkbox = document.getElementById('checkbox');\n                var checkBoxElement = document.getElementById('checkbox');\n                if (checkbox && checkBoxElement.nextElementSibling) {\n                    checkBoxElement.nextElementSibling.classList.remove('e-check');\n                    checkbox.checked = false;\n                }\n            }\n            else if (this.signaturetype === 'Type') {\n                isClearTypeTab = true;\n                var checkbox = document.getElementById('checkbox1');\n                var checkBoxElement = document.getElementById('checkbox1');\n                if (checkbox && checkBoxElement.nextElementSibling) {\n                    checkBoxElement.nextElementSibling.classList.remove('e-check');\n                    checkbox.checked = false;\n                    this.textValue = '';\n                }\n            }\n            else {\n                isClearImageTab = true;\n                this.clearUploadString = true;\n                var checkbox = document.getElementById('checkbox2');\n                var checkBoxElement = document.getElementById('checkbox2');\n                if (checkbox && checkBoxElement.nextElementSibling) {\n                    checkBoxElement.nextElementSibling.classList.remove('e-check');\n                    checkbox.checked = false;\n                }\n            }\n        }\n        var canvas = document.getElementById(this.pdfViewer.element.id + '_signatureCanvas_');\n        if ((canvas && isCanvasClear) || (isClearDrawTab)) {\n            var context = canvas.getContext('2d');\n            context.clearRect(0, 0, canvas.width, canvas.height);\n        }\n        var imageCanvas = document.getElementById(this.pdfViewer.element.id + '_signatureuploadCanvas_');\n        if (imageCanvas && isCanvasClear || (isClearImageTab)) {\n            var context = imageCanvas.getContext('2d');\n            context.clearRect(0, 0, imageCanvas.width, imageCanvas.height);\n            var signbutton = document.getElementById(this.pdfViewer.element.id + '_e-pv-upload-button');\n            if (signbutton) {\n                signbutton.style.visibility = '';\n            }\n        }\n        var fontdiv = document.getElementById(this.pdfViewer.element.id + '_font_appearance');\n        var textbox = document.getElementById(this.pdfViewer.element.id + '_e-pv-Signtext-box');\n        if ((fontdiv && textbox && isCanvasClear) || (isClearTypeTab)) {\n            textbox.value = '';\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isBlazor)()) {\n                fontdiv.innerHTML = '';\n            }\n        }\n        this.enableCreateButton(true);\n    };\n    /**\n     * @private\n     * @returns {void}\n     */\n    Signature.prototype.closeSignaturePanel = function () {\n        if (this.pdfViewerBase.currentTarget) {\n            this.pdfViewerBase.drawSignatureWithTool = true;\n        }\n        this.clearSignatureCanvas();\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isBlazor)()) {\n            this.signatureDialog.hide();\n        }\n        this.pdfViewerBase.isToolbarSignClicked = false;\n        this.pdfViewerBase.drawSignatureWithTool = false;\n        this.drawOutputString = '';\n        this.imageOutputString = '';\n    };\n    /**\n     * @private\n     * @returns {string} - Returns the string.\n     */\n    Signature.prototype.saveSignature = function () {\n        var storeObject = null;\n        if (this.pdfViewerBase.isStorageExceed) {\n            storeObject = this.pdfViewerBase.annotationStorage[this.pdfViewerBase.documentId + '_annotations_sign'];\n        }\n        else {\n            storeObject = _index__WEBPACK_IMPORTED_MODULE_0__.PdfViewerBase.sessionStorageManager.getItem(this.pdfViewerBase.documentId + '_annotations_sign');\n        }\n        var annotations = [];\n        for (var j = 0; j < this.pdfViewerBase.pageCount; j++) {\n            annotations[parseInt(j.toString(), 10)] = [];\n        }\n        if (storeObject) {\n            var annotationCollection = JSON.parse(storeObject);\n            for (var i = 0; i < annotationCollection.length; i++) {\n                var newArray = [];\n                var pageAnnotationObject = annotationCollection[parseInt(i.toString(), 10)];\n                if (pageAnnotationObject) {\n                    for (var z = 0; pageAnnotationObject.annotations.length > z; z++) {\n                        if (this.pdfViewer.isSignatureEditable) {\n                            var signatureSettings = this.pdfViewer.handWrittenSignatureSettings;\n                            var annotationSettings = this.pdfViewer.annotationSettings;\n                            var annotationAuthor = (signatureSettings.author !== 'Guest') ? signatureSettings.author : annotationSettings.author ? annotationSettings.author : 'Guest';\n                            pageAnnotationObject.annotations[parseInt(z.toString(), 10)].author = annotationAuthor;\n                        }\n                        var strokeColorString = pageAnnotationObject.annotations[parseInt(z.toString(), 10)].strokeColor ? pageAnnotationObject.annotations[parseInt(z.toString(), 10)].strokeColor : 'black';\n                        pageAnnotationObject.annotations[parseInt(z.toString(), 10)].strokeColor =\n                            JSON.stringify(this.getRgbCode(strokeColorString));\n                        pageAnnotationObject.annotations[parseInt(z.toString(), 10)].bounds =\n                            JSON.stringify(this.pdfViewer.annotation.\n                                getBounds(pageAnnotationObject.annotations[parseInt(z.toString(), 10)].bounds, pageAnnotationObject.pageIndex));\n                        if (pageAnnotationObject.annotations[parseInt(z.toString(), 10)].shapeAnnotationType === 'HandWrittenSignature' || pageAnnotationObject.annotations[parseInt(z.toString(), 10)].signatureName === 'ink') {\n                            var collectionData = (0,_syncfusion_ej2_drawings__WEBPACK_IMPORTED_MODULE_3__.processPathData)(pageAnnotationObject.annotations[parseInt(z.toString(), 10)].data);\n                            var csData = (0,_syncfusion_ej2_drawings__WEBPACK_IMPORTED_MODULE_3__.splitArrayCollection)(collectionData);\n                            pageAnnotationObject.annotations[parseInt(z.toString(), 10)].data = JSON.stringify(csData);\n                        }\n                        else {\n                            if (pageAnnotationObject.annotations[parseInt(z.toString(), 10)].shapeAnnotationType === 'SignatureText' && !this.checkDefaultFont(pageAnnotationObject.annotations[parseInt(z.toString(), 10)].fontFamily)) {\n                                var signTypeCanvas = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.createElement)('canvas');\n                                var bounds = JSON.parse(pageAnnotationObject.annotations[parseInt(z.toString(), 10)].bounds);\n                                signTypeCanvas.width = (bounds && bounds.width) || 150;\n                                signTypeCanvas.height = (bounds && bounds.height) ||\n                                    pageAnnotationObject.annotations[parseInt(z.toString(), 10)].fontSize * 2;\n                                var canvasContext = signTypeCanvas.getContext('2d');\n                                var x = signTypeCanvas.width / 2;\n                                var y = (signTypeCanvas.height / 2) +\n                                    pageAnnotationObject.annotations[parseInt(z.toString(), 10)].fontSize / 2 - 10;\n                                canvasContext.textAlign = 'center';\n                                canvasContext.font = pageAnnotationObject.annotations[parseInt(z.toString(), 10)].fontSize + 'px ' + pageAnnotationObject.annotations[parseInt(z.toString(), 10)].fontFamily;\n                                canvasContext.fillText(pageAnnotationObject.annotations[parseInt(z.toString(), 10)].data, x, y);\n                                pageAnnotationObject.annotations[parseInt(z.toString(), 10)].data = JSON.stringify(signTypeCanvas.toDataURL('image/png'));\n                                pageAnnotationObject.annotations[parseInt(z.toString(), 10)].shapeAnnotationType = 'SignatureImage';\n                            }\n                            else {\n                                pageAnnotationObject.annotations[parseInt(z.toString(), 10)].data =\n                                    JSON.stringify(pageAnnotationObject.annotations[parseInt(z.toString(), 10)].data);\n                            }\n                        }\n                    }\n                    newArray = pageAnnotationObject.annotations;\n                }\n                annotations[pageAnnotationObject.pageIndex] = newArray;\n            }\n        }\n        return JSON.stringify(annotations);\n    };\n    /**\n     *\n     * @private\n     * @returns {boolean}\n     */\n    Signature.prototype.checkDefaultFont = function (fontName) {\n        if (fontName === 'Helvetica' || fontName === 'Times New Roman' || fontName === 'Courier' || fontName === 'Symbol') {\n            return true;\n        }\n        return false;\n    };\n    /**\n     * @param {string} colorString - It describes about the color string value\n     * @private\n     * @returns {any} - any\n     */\n    Signature.prototype.getRgbCode = function (colorString) {\n        /* eslint-disable-next-line security/detect-unsafe-regex */\n        if (!colorString.match(/#([a-z0-9]+)/gi) && !colorString.match(/^rgba?\\((\\d+),\\s*(\\d+),\\s*(\\d+)(?:,\\s*(\\d+(?:\\.\\d+)?))?\\)$/)) {\n            colorString = this.pdfViewer.annotationModule.nameToHash(colorString);\n        }\n        var stringArray = colorString.split(',');\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(stringArray[1])) {\n            colorString = this.pdfViewer.annotationModule.getValue(colorString, 'rgba');\n            stringArray = colorString.split(',');\n        }\n        var r = parseInt(stringArray[0].split('(')[1], 10);\n        var g = parseInt(stringArray[1], 10);\n        var b = parseInt(stringArray[2], 10);\n        var a = parseInt(stringArray[3], 10);\n        return { r: r, g: g, b: b, a: a };\n    };\n    /**\n     * @private\n     * @param {number} left - The left.\n     * @param {number} top - The top.\n     * @returns {void}\n     */\n    Signature.prototype.renderSignature = function (left, top) {\n        var annot;\n        var signatureData = '';\n        var currentAnnotation = this.pdfViewerBase.currentSignatureAnnot;\n        var annotationName = currentAnnotation.signatureName;\n        if (annotationName === '' || (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(annotationName)) {\n            annotationName = this.pdfViewer.annotation.createGUID();\n        }\n        if (currentAnnotation) {\n            if (this.pdfViewerBase.currentSignatureAnnot.shapeAnnotationType === 'HandWrittenSignature') {\n                annot = {\n                    id: currentAnnotation.id, bounds: { x: left, y: top, width: currentAnnotation.bounds.width,\n                        height: currentAnnotation.bounds.height }, pageIndex: currentAnnotation.pageIndex, data: currentAnnotation.data,\n                    shapeAnnotationType: 'HandWrittenSignature', opacity: currentAnnotation.opacity, fontFamily: currentAnnotation.fontFamily, fontSize: currentAnnotation.fontSize, strokeColor: currentAnnotation.strokeColor, thickness: currentAnnotation.thickness, signatureName: annotationName\n                };\n            }\n            if (this.pdfViewerBase.currentSignatureAnnot.shapeAnnotationType === 'SignatureText') {\n                annot = {\n                    id: currentAnnotation.id, bounds: { x: left, y: top, width: currentAnnotation.bounds.width,\n                        height: currentAnnotation.bounds.height }, pageIndex: currentAnnotation.pageIndex, data: currentAnnotation.data,\n                    shapeAnnotationType: 'SignatureText', opacity: currentAnnotation.opacity, fontFamily: currentAnnotation.fontFamily, fontSize: currentAnnotation.fontSize, strokeColor: currentAnnotation.strokeColor, thickness: currentAnnotation.thickness, signatureName: annotationName\n                };\n            }\n            else if (this.pdfViewerBase.currentSignatureAnnot.shapeAnnotationType === 'SignatureImage') {\n                annot = {\n                    id: currentAnnotation.id, bounds: { x: left, y: top, width: currentAnnotation.bounds.width,\n                        height: currentAnnotation.bounds.height }, pageIndex: currentAnnotation.pageIndex, data: currentAnnotation.data,\n                    shapeAnnotationType: 'SignatureImage', opacity: currentAnnotation.opacity, fontFamily: currentAnnotation.fontFamily, fontSize: currentAnnotation.fontSize, strokeColor: currentAnnotation.strokeColor, thickness: currentAnnotation.thickness, signatureName: annotationName\n                };\n            }\n            var obj = this.pdfViewer.add(annot);\n            var canvass = this.pdfViewerBase.getAnnotationCanvas('_annotationCanvas_', currentAnnotation.pageIndex);\n            this.pdfViewer.renderDrawing(canvass, currentAnnotation.pageIndex);\n            if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.Browser.isDevice && !this.pdfViewer.enableDesktopMode) {\n                this.pdfViewer.select([obj.id]);\n            }\n            this.pdfViewerBase.signatureAdded = true;\n            this.storeSignatureData(currentAnnotation.pageIndex, annot);\n            if (this.signaturetype === 'Draw') {\n                signatureData = this.saveImageString;\n            }\n            else {\n                signatureData = currentAnnotation.data;\n            }\n            this.pdfViewer.fireSignatureAdd(currentAnnotation.pageIndex, annotationName, currentAnnotation.shapeAnnotationType, currentAnnotation.bounds, currentAnnotation.opacity, currentAnnotation.strokeColor, currentAnnotation.thickness, signatureData);\n            if (this.pdfViewer.annotation) {\n                this.pdfViewer.annotation.onAnnotationMouseDown();\n            }\n            this.pdfViewerBase.currentSignatureAnnot = null;\n            this.pdfViewerBase.signatureCount++;\n        }\n    };\n    /**\n     * @param {any} annotationCollection - It describes about the annotation collection\n     * @param {number} pageIndex - It describes about the page index\n     * @param {boolean} isImport - It describes about the whether the isImport is true or not\n     * @private\n     * @returns {void}\n     */\n    Signature.prototype.renderExistingSignature = function (annotationCollection, pageIndex, isImport) {\n        var annot;\n        var isAnnotationAdded = false;\n        if (!isImport) {\n            for (var p = 0; p < this.signAnnotationIndex.length; p++) {\n                if (this.signAnnotationIndex[parseInt(p.toString(), 10)] === pageIndex) {\n                    isAnnotationAdded = true;\n                    break;\n                }\n            }\n        }\n        if (annotationCollection && !isAnnotationAdded) {\n            if (annotationCollection.length > 0 && this.signAnnotationIndex.indexOf(pageIndex) === -1) {\n                this.signAnnotationIndex.push(pageIndex);\n            }\n            for (var n = 0; n < annotationCollection.length; n++) {\n                var currentAnnotation = annotationCollection[parseInt(n.toString(), 10)];\n                if (currentAnnotation) {\n                    var data = currentAnnotation.PathData;\n                    if (isImport) {\n                        if (currentAnnotation.IsSignature) {\n                            data = currentAnnotation.PathData;\n                        }\n                        else if (currentAnnotation.AnnotationType === 'SignatureImage' || currentAnnotation.AnnotationType === 'SignatureText') {\n                            data = JSON.parse(JSON.stringify(currentAnnotation.PathData));\n                        }\n                        else {\n                            if (data.includes('command')) {\n                                data = (0,_syncfusion_ej2_drawings__WEBPACK_IMPORTED_MODULE_3__.getPathString)(JSON.parse(currentAnnotation.PathData));\n                            }\n                            else {\n                                data = currentAnnotation.PathData;\n                            }\n                        }\n                    }\n                    this.outputString = data;\n                    var calculateInkPosition = this.pdfViewer.annotationModule.inkAnnotationModule.\n                        calculateInkSize(this.outputString);\n                    this.outputString = '';\n                    var rectDiff = 0;\n                    var rectDifference = 1;\n                    var bounds = currentAnnotation.Bounds;\n                    if (calculateInkPosition && (currentAnnotation.AnnotationType === 'Ink' ||\n                        currentAnnotation.AnnotationType === 'signature' || currentAnnotation.AnnotationType === 'Signature')) {\n                        if (calculateInkPosition.height < 1) {\n                            rectDiff = bounds.Height ? bounds.Height : bounds.height;\n                            rectDifference = bounds.Height ? bounds.Height : bounds.height;\n                        }\n                        else if (calculateInkPosition.width < 1) {\n                            rectDiff = bounds.Width ? bounds.Width : bounds.width;\n                            rectDifference = bounds.Width ? bounds.Width : bounds.width;\n                        }\n                    }\n                    var currentLeft = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(bounds.X) ? bounds.X + (rectDiff / 2) : bounds.x + (rectDiff / 2);\n                    var currentTop = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(bounds.Y) ? bounds.Y + (rectDiff / 2) : bounds.y + (rectDiff / 2);\n                    var currentWidth = bounds.Width ? bounds.Width - (rectDifference - 1) : bounds.width - (rectDifference - 1);\n                    var currentHeight = bounds.Height ? bounds.Height - (rectDifference - 1) :\n                        bounds.height - (rectDifference - 1);\n                    if (currentAnnotation.AnnotationType === 'SignatureText') {\n                        annot = {\n                            id: 'sign' + this.pdfViewerBase.signatureCount, bounds: { x: currentLeft, y: currentTop, width: currentWidth, height: currentHeight }, pageIndex: pageIndex, data: data, fontFamily: currentAnnotation.FontFamily, fontSize: currentAnnotation.FontSize,\n                            shapeAnnotationType: 'SignatureText', opacity: currentAnnotation.Opacity, strokeColor: currentAnnotation.StrokeColor, thickness: currentAnnotation.Thickness, signatureName: currentAnnotation.SignatureName\n                        };\n                    }\n                    else if (currentAnnotation.AnnotationType === 'SignatureImage') {\n                        annot = {\n                            id: 'sign' + this.pdfViewerBase.signatureCount, bounds: { x: currentLeft, y: currentTop, width: currentWidth, height: currentHeight }, pageIndex: pageIndex, data: data, shapeAnnotationType: 'SignatureImage', opacity: currentAnnotation.Opacity, strokeColor: currentAnnotation.StrokeColor, thickness: currentAnnotation.Thickness, signatureName: currentAnnotation.SignatureName\n                        };\n                    }\n                    else {\n                        annot = {\n                            id: 'sign' + this.pdfViewerBase.signatureCount, bounds: { x: currentLeft, y: currentTop, width: currentWidth, height: currentHeight }, pageIndex: pageIndex, data: data, shapeAnnotationType: 'HandWrittenSignature', opacity: currentAnnotation.Opacity, strokeColor: currentAnnotation.StrokeColor, thickness: currentAnnotation.Thickness, signatureName: currentAnnotation.SignatureName ? currentAnnotation.SignatureName : 'ink'\n                        };\n                    }\n                }\n                this.pdfViewer.add(annot);\n                if (this.isAddAnnotationProgramatically) {\n                    this.pdfViewer.fireSignatureAdd(annot.pageIndex, annot.signatureName, annot.shapeAnnotationType, annot.bounds, annot.opacity, annot.strokeColor, annot.thickness, annot.data);\n                }\n                var canvasPageIndex = currentAnnotation.pageIndex ? currentAnnotation.pageIndex : currentAnnotation.PageNumber;\n                var canvass = this.pdfViewerBase.getAnnotationCanvas('_annotationCanvas_', canvasPageIndex);\n                this.pdfViewer.renderDrawing(canvass, annot.pageIndex);\n                this.storeSignatureData(annot.pageIndex, annot);\n                this.pdfViewerBase.currentSignatureAnnot = null;\n                this.pdfViewerBase.signatureCount++;\n            }\n        }\n    };\n    /**\n     * @param {number} pageNumber -It describes about the page number value\n     * @param {any} annotations - It describes about the annotations\n     * @private\n     * @returns {void}\n     */\n    Signature.prototype.storeSignatureData = function (pageNumber, annotations) {\n        this.pdfViewer.annotation.addAction(!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(annotations.pageIndex) ? annotations.pageIndex : annotations.PageIndex, null, annotations, 'Addition', '', annotations, annotations);\n        var annotation = null;\n        var left;\n        var top;\n        var width;\n        var height;\n        var pageIndex;\n        var zoomvalue = this.pdfViewerBase.getZoomFactor();\n        if (annotations.bounds) {\n            left = annotations.bounds.left ? annotations.bounds.left : annotations.bounds.x;\n            top = annotations.bounds.top ? annotations.bounds.top : annotations.bounds.y;\n            width = annotations.bounds.width;\n            height = annotations.bounds.height;\n            pageIndex = annotations.pageIndex;\n        }\n        else {\n            left = annotations.Bounds.left ? annotations.Bounds.left : annotations.Bounds.x;\n            top = annotations.Bounds.top ? annotations.Bounds.top : annotations.Bounds.y;\n            width = annotations.LineBounds.Width;\n            height = annotations.LineBounds.Height;\n            pageIndex = annotations.PageIndex;\n        }\n        if (annotations.wrapper && annotations.wrapper.bounds) {\n            left = annotations.wrapper.bounds.left;\n            top = annotations.wrapper.bounds.top;\n        }\n        if (annotations.shapeAnnotationType === 'SignatureText' && annotations.wrapper && annotations.wrapper.children && annotations.wrapper.children.length > 1 && annotations.wrapper.children[1]) {\n            left = left + annotations.wrapper.pivot.x + (this.signatureTextContentLeft - (this.signatureTextContentTop *\n                (zoomvalue - (zoomvalue / this.signatureTextContentLeft))));\n            top = top + ((annotations.wrapper.children[1].bounds.y - top) - (annotations.wrapper.children[1].bounds.y - top) / 3) +\n                annotations.wrapper.pivot.y + (this.signatureTextContentTop * zoomvalue);\n        }\n        annotation = {\n            id: annotations.id ? annotations.id : null, bounds: { left: left, top: top, width: width, height: height }, shapeAnnotationType: annotations.shapeAnnotationType ? annotations.shapeAnnotationType : 'ink', opacity: annotations.opacity ? annotations.opacity : 1, thickness: annotations.thickness ? annotations.thickness : 1, strokeColor: annotations.strokeColor ? annotations.strokeColor : null, pageIndex: pageIndex, data: annotations.data ? annotations.data : annotations.Value, fontSize: annotations.fontSize ? annotations.fontSize : null, fontFamily: annotations.fontFamily ? annotations.fontFamily : null, signatureName: annotations.signatureName ? annotations.signatureName : annotations.Name\n        };\n        var sessionSize = _index__WEBPACK_IMPORTED_MODULE_0__.PdfViewerBase.sessionStorageManager.getWindowSessionStorageSize();\n        var currentAnnotation = Math.round(JSON.stringify(annotation).length / 1024);\n        if ((sessionSize + currentAnnotation) > 4500) {\n            this.pdfViewerBase.isStorageExceed = true;\n            this.pdfViewer.annotationModule.clearAnnotationStorage();\n            if (!(this.pdfViewerBase.isFormStorageExceed)) {\n                this.pdfViewer.formFieldsModule.clearFormFieldStorage();\n            }\n        }\n        var storeObject = _index__WEBPACK_IMPORTED_MODULE_0__.PdfViewerBase.sessionStorageManager.getItem(this.pdfViewerBase.documentId + '_annotations_sign');\n        var index = 0;\n        if (!storeObject) {\n            this.storeSignatureCollections(annotation, pageNumber);\n            var shapeAnnotation = { pageIndex: pageNumber, annotations: [] };\n            shapeAnnotation.annotations.push(annotation);\n            index = shapeAnnotation.annotations.indexOf(annotation);\n            var annotationCollection = [];\n            annotationCollection.push(shapeAnnotation);\n            var annotationStringified = JSON.stringify(annotationCollection);\n            if (this.pdfViewerBase.isStorageExceed) {\n                this.pdfViewerBase.annotationStorage[this.pdfViewerBase.documentId + '_annotations_sign'] = annotationStringified;\n            }\n            else {\n                _index__WEBPACK_IMPORTED_MODULE_0__.PdfViewerBase.sessionStorageManager.setItem(this.pdfViewerBase.documentId + '_annotations_sign', annotationStringified);\n            }\n        }\n        else {\n            this.storeSignatureCollections(annotation, pageNumber);\n            var annotObject = JSON.parse(storeObject);\n            _index__WEBPACK_IMPORTED_MODULE_0__.PdfViewerBase.sessionStorageManager.removeItem(this.pdfViewerBase.documentId + '_annotations_sign');\n            var pageIndex_1 = this.pdfViewer.annotationModule.getPageCollection(annotObject, pageNumber);\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(pageIndex_1) && annotObject[parseInt(pageIndex_1.toString(), 10)]) {\n                annotObject[parseInt(pageIndex_1.toString(), 10)].annotations.push(annotation);\n                index = annotObject[parseInt(pageIndex_1.toString(), 10)].annotations.indexOf(annotation);\n            }\n            else {\n                var markupAnnotation = { pageIndex: pageNumber, annotations: [] };\n                markupAnnotation.annotations.push(annotation);\n                index = markupAnnotation.annotations.indexOf(annotation);\n                annotObject.push(markupAnnotation);\n            }\n            var annotationStringified = JSON.stringify(annotObject);\n            if (this.pdfViewerBase.isStorageExceed) {\n                this.pdfViewerBase.annotationStorage[this.pdfViewerBase.documentId + '_annotations_sign'] = annotationStringified;\n            }\n            else {\n                _index__WEBPACK_IMPORTED_MODULE_0__.PdfViewerBase.sessionStorageManager.setItem(this.pdfViewerBase.documentId + '_annotations_sign', annotationStringified);\n            }\n        }\n    };\n    /**\n     * @param {string} property - It describes about the property value\n     * @param {number} pageNumber - It describes about the page number\n     * @param {any} annotationBase - It describes about the annotation base\n     * @param {boolean} isSignatureEdited - It describes about the whether the isSignatureEdited is true or not\n     * @private\n     * @returns {ISignAnnotation} - Isignannotation\n     */\n    Signature.prototype.modifySignatureCollection = function (property, pageNumber, annotationBase, isSignatureEdited) {\n        this.pdfViewerBase.updateDocumentEditedProperty(true);\n        var currentAnnotObject = null;\n        var pageAnnotations = this.getAnnotations(pageNumber, null);\n        var zoomvalue = this.pdfViewerBase.getZoomFactor();\n        if (pageAnnotations != null && annotationBase) {\n            for (var i = 0; i < pageAnnotations.length; i++) {\n                if (annotationBase.id === pageAnnotations[parseInt(i.toString(), 10)].id) {\n                    if (property === 'bounds') {\n                        var top_2 = void 0;\n                        var left = void 0;\n                        if (annotationBase.shapeAnnotationType === 'SignatureText' && annotationBase.wrapper && annotationBase.wrapper.children[1]) {\n                            top_2 = annotationBase.wrapper.children[0].bounds.y;\n                            left = annotationBase.wrapper.children[0].bounds.x + annotationBase.wrapper.pivot.x +\n                                (this.signatureTextContentLeft - (this.signatureTextContentTop * (zoomvalue -\n                                    (zoomvalue / this.signatureTextContentLeft))));\n                            top_2 = top_2 + ((annotationBase.wrapper.children[1].bounds.y - top_2) -\n                                (annotationBase.wrapper.children[1].bounds.y - top_2) / 3) + annotationBase.wrapper.pivot.y +\n                                (this.signatureTextContentTop * zoomvalue);\n                            pageAnnotations[parseInt(i.toString(), 10)].bounds =\n                                { left: left, top: top_2, width: annotationBase.bounds.width, height: annotationBase.bounds.height };\n                        }\n                        else {\n                            pageAnnotations[parseInt(i.toString(), 10)].bounds =\n                                { left: annotationBase.wrapper.bounds.left, top: annotationBase.wrapper.bounds.top,\n                                    width: annotationBase.bounds.width, height: annotationBase.bounds.height };\n                        }\n                        pageAnnotations[parseInt(i.toString(), 10)].fontSize = annotationBase.fontSize;\n                    }\n                    else if (property === 'stroke') {\n                        pageAnnotations[parseInt(i.toString(), 10)].strokeColor = annotationBase.wrapper.children[0].style.strokeColor;\n                    }\n                    else if (property === 'opacity') {\n                        pageAnnotations[parseInt(i.toString(), 10)].opacity = annotationBase.wrapper.children[0].style.opacity;\n                    }\n                    else if (property === 'thickness') {\n                        pageAnnotations[parseInt(i.toString(), 10)].thickness = annotationBase.wrapper.children[0].style.strokeWidth;\n                    }\n                    else if (property === 'delete') {\n                        this.updateSignatureCollection(pageAnnotations[parseInt(i.toString(), 10)]);\n                        currentAnnotObject = pageAnnotations.splice(i, 1)[0];\n                        break;\n                    }\n                    if (property && property !== 'delete') {\n                        this.storeSignatureCollections(pageAnnotations[parseInt(i.toString(), 10)], pageNumber);\n                    }\n                    if (isSignatureEdited) {\n                        pageAnnotations[parseInt(i.toString(), 10)].opacity = annotationBase.wrapper.children[0].style.opacity;\n                        pageAnnotations[parseInt(i.toString(), 10)].strokeColor = annotationBase.wrapper.children[0].style.strokeColor;\n                        pageAnnotations[parseInt(i.toString(), 10)].thickness = annotationBase.wrapper.children[0].style.strokeWidth;\n                        this.storeSignatureCollections(pageAnnotations[parseInt(i.toString(), 10)], pageNumber);\n                        break;\n                    }\n                }\n            }\n            this.manageAnnotations(pageAnnotations, pageNumber);\n        }\n        return currentAnnotObject;\n    };\n    /**\n     * @param {any} annotation - It describes about the annotation\n     * @param {number} pageNumber - It describes about the page number\n     * @private\n     * @returns {void}\n     */\n    Signature.prototype.storeSignatureCollections = function (annotation, pageNumber) {\n        var collectionDetails = this.checkSignatureCollection(annotation);\n        var selectAnnotation = (0,_drawing_drawing_util__WEBPACK_IMPORTED_MODULE_5__.cloneObject)(annotation);\n        selectAnnotation.annotationId = annotation.signatureName;\n        selectAnnotation.pageNumber = pageNumber;\n        delete selectAnnotation.annotName;\n        if (annotation.id) {\n            selectAnnotation.uniqueKey = annotation.id;\n            delete selectAnnotation.id;\n        }\n        if (collectionDetails.isExisting) {\n            this.pdfViewer.signatureCollection.splice(collectionDetails.position, 0, selectAnnotation);\n        }\n        else {\n            this.pdfViewer.signatureCollection.push(selectAnnotation);\n        }\n    };\n    Signature.prototype.checkSignatureCollection = function (signature) {\n        var collections = this.pdfViewer.signatureCollection;\n        if (collections && signature) {\n            for (var i = 0; i < collections.length; i++) {\n                if (collections[parseInt(i.toString(), 10)].annotationId === signature.signatureName) {\n                    this.pdfViewer.signatureCollection.splice(i, 1);\n                    return { isExisting: true, position: i };\n                }\n            }\n        }\n        return { isExisting: false, position: null };\n    };\n    /**\n     * @param {any} signature - It describes about the signature\n     * @private\n     * @returns {void}\n     */\n    Signature.prototype.updateSignatureCollection = function (signature) {\n        var collections = this.pdfViewer.signatureCollection;\n        if (collections && signature) {\n            for (var i = 0; i < collections.length; i++) {\n                if (collections[parseInt(i.toString(), 10)].annotationId === signature.signatureName) {\n                    this.pdfViewer.signatureCollection.splice(i, 1);\n                    break;\n                }\n            }\n        }\n    };\n    /**\n     * @param {number} pageNumber - It describes about the page number\n     * @param {any} signature - It describes about the signature\n     * @private\n     * @returns {void}\n     */\n    Signature.prototype.addInCollection = function (pageNumber, signature) {\n        if (signature) {\n            this.storeSignatureCollections(signature, pageNumber);\n            var pageSignatures = this.getAnnotations(pageNumber, null);\n            if (pageSignatures) {\n                pageSignatures.push(signature);\n            }\n            this.manageAnnotations(pageSignatures, pageNumber);\n        }\n    };\n    /**\n     * @param {number} pageIndex - This is current page number\n     * @param {any[]}  shapeAnnotations - This is annotations\n     * @private\n     * @returns {any[]}\n     */\n    Signature.prototype.getAnnotations = function (pageIndex, shapeAnnotations) {\n        var annotationCollection;\n        var storeObject = null;\n        if (this.pdfViewerBase.isStorageExceed) {\n            storeObject = this.pdfViewerBase.annotationStorage[this.pdfViewerBase.documentId + '_annotations_sign'];\n        }\n        else {\n            storeObject = _index__WEBPACK_IMPORTED_MODULE_0__.PdfViewerBase.sessionStorageManager.getItem(this.pdfViewerBase.documentId + '_annotations_sign');\n        }\n        if (storeObject) {\n            var annotObject = JSON.parse(storeObject);\n            var index = this.pdfViewer.annotationModule.getPageCollection(annotObject, pageIndex);\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(index) && annotObject[parseInt(index.toString(), 10)]) {\n                annotationCollection = annotObject[parseInt(index.toString(), 10)].annotations;\n            }\n            else {\n                annotationCollection = shapeAnnotations;\n            }\n        }\n        else {\n            annotationCollection = shapeAnnotations;\n        }\n        return annotationCollection;\n    };\n    /**\n     * @param {ISignAnnotation[]} pageAnnotations - This is annotation\n     * @param {number}  pageNumber - This is current page number\n     * @private\n     * @returns {void}\n     */\n    Signature.prototype.manageAnnotations = function (pageAnnotations, pageNumber) {\n        var storeObject = null;\n        if (this.pdfViewerBase.isStorageExceed) {\n            storeObject = this.pdfViewerBase.annotationStorage[this.pdfViewerBase.documentId + '_annotations_sign'];\n        }\n        else {\n            storeObject = _index__WEBPACK_IMPORTED_MODULE_0__.PdfViewerBase.sessionStorageManager.getItem(this.pdfViewerBase.documentId + '_annotations_sign');\n        }\n        if (storeObject) {\n            var annotObject = JSON.parse(storeObject);\n            _index__WEBPACK_IMPORTED_MODULE_0__.PdfViewerBase.sessionStorageManager.removeItem(this.pdfViewerBase.documentId + '_annotations_sign');\n            var index = this.pdfViewer.annotationModule.getPageCollection(annotObject, pageNumber);\n            if (index != null && annotObject[parseInt(index.toString(), 10)]) {\n                annotObject[parseInt(index.toString(), 10)].annotations = pageAnnotations;\n            }\n            var annotationStringified = JSON.stringify(annotObject);\n            if (this.pdfViewerBase.isStorageExceed) {\n                this.pdfViewerBase.annotationStorage[this.pdfViewerBase.documentId + '_annotations_sign'] = annotationStringified;\n            }\n            else {\n                _index__WEBPACK_IMPORTED_MODULE_0__.PdfViewerBase.sessionStorageManager.setItem(this.pdfViewerBase.documentId + '_annotations_sign', annotationStringified);\n            }\n        }\n    };\n    /**\n     * @private\n     * @param {boolean} isShow - Returns the true or false.\n     * @returns {void}\n     */\n    Signature.prototype.showSignatureDialog = function (isShow) {\n        if (isShow) {\n            this.createSignaturePanel();\n        }\n    };\n    /**\n     * @private\n     * @returns {void}\n     */\n    Signature.prototype.setAnnotationMode = function () {\n        this.pdfViewerBase.isToolbarSignClicked = true;\n        this.pdfViewerBase.isInitialField = false;\n        this.showSignatureDialog(true);\n    };\n    /**\n     * @private\n     * @returns {void}\n     */\n    Signature.prototype.setInitialMode = function () {\n        this.pdfViewerBase.isToolbarSignClicked = true;\n        this.pdfViewerBase.isInitialField = true;\n        this.showSignatureDialog(true);\n    };\n    /**\n     * @param {any} number - Number value\n     * @private\n     * @returns {number} - number\n     */\n    Signature.prototype.ConvertPointToPixel = function (number) {\n        return (number * (96 / 72));\n    };\n    /**\n     * @param {any} signature - It describes about the signature\n     * @param {number} pageIndex - It describes about the page index\n     * @param {boolean} isImport - It describes about the whether the isImport is true or not\n     * @private\n     * @returns {PdfAnnotationBaseModel} - PdfAnnotationBaseModel\n     */\n    Signature.prototype.updateSignatureCollections = function (signature, pageIndex, isImport) {\n        var annot;\n        if (signature) {\n            var bounds = signature.Bounds;\n            var currentLeft = bounds.X;\n            var currentTop = bounds.Y;\n            var currentWidth = bounds.Width;\n            var currentHeight = bounds.Height;\n            var data = signature.PathData;\n            if (isImport) {\n                data = (0,_syncfusion_ej2_drawings__WEBPACK_IMPORTED_MODULE_3__.getPathString)(JSON.parse(signature.PathData));\n            }\n            annot = {\n                id: 'sign' + signature.SignatureName, bounds: { x: currentLeft, y: currentTop, width: currentWidth, height: currentHeight }, pageIndex: pageIndex, data: data,\n                shapeAnnotationType: 'HandWrittenSignature', opacity: signature.Opacity, strokeColor: signature.StrokeColor, thickness: signature.Thickness, signatureName: signature.SignatureName\n            };\n            return annot;\n        }\n    };\n    /**\n     * @private\n     * @returns {void}\n     */\n    Signature.prototype.destroy = function () {\n        _index__WEBPACK_IMPORTED_MODULE_0__.PdfViewerBase.sessionStorageManager.removeItem('_annotations_sign');\n        var signImage = document.getElementById(this.pdfViewer.element.id + '_signElement');\n        if (signImage) {\n            signImage.removeEventListener('change', this.addStampImage);\n            if (signImage.parentElement) {\n                signImage.parentElement.removeChild(signImage);\n            }\n        }\n        if (this.signatureDialog) {\n            this.signatureDialog.destroy();\n        }\n    };\n    /**\n     * This method was used to add signature programmatically\n     *\n     * @param {HandWrittenSignatureSettings} annotationObject - It describes type of annotation object\n     * @param {IPoint} offset - It describes about the signature bounds or location\n     * @param {number} pageNumber - It describes about the signature page number\n     * @returns {object} - object\n     * @private\n     */\n    Signature.prototype.updateSignatureDetails = function (annotationObject, offset, pageNumber) {\n        //Creating new object if annotationObject is null\n        if (!annotationObject) {\n            annotationObject = { offset: { x: 10, y: 10 }, pageNumber: 0,\n                width: undefined, height: undefined };\n            offset = annotationObject.offset;\n        }\n        else if (!annotationObject.offset) {\n            offset = { x: 10, y: 10 };\n        }\n        else {\n            offset = annotationObject.offset;\n        }\n        var signatureId = this.pdfViewer.annotation.createGUID();\n        var annotationSettings = this.pdfViewer.annotation.updateSettings(this.pdfViewer.handWrittenSignatureSettings);\n        var annotationSelectorSettings = this.pdfViewer.handWrittenSignatureSettings.annotationSelectorSettings;\n        this.pdfViewerBase.updateSelectorSettings(annotationSelectorSettings);\n        annotationObject.width = annotationObject.width ? annotationObject.width :\n            this.pdfViewer.handWrittenSignatureSettings.width ? this.pdfViewer.handWrittenSignatureSettings.width : 150;\n        annotationObject.height =\n            annotationObject.height ? annotationObject.height : this.pdfViewer.handWrittenSignatureSettings.height ?\n                this.pdfViewer.handWrittenSignatureSettings.height : 100;\n        annotationObject.thickness =\n            annotationObject.thickness ? annotationObject.thickness : this.pdfViewer.handWrittenSignatureSettings.thickness ?\n                this.pdfViewer.handWrittenSignatureSettings.thickness : 1;\n        annotationObject.opacity =\n            annotationObject.opacity ? annotationObject.opacity : this.pdfViewer.handWrittenSignatureSettings.opacity ?\n                this.pdfViewer.handWrittenSignatureSettings.opacity : 1;\n        annotationObject.strokeColor = annotationObject.strokeColor ? annotationObject.strokeColor : this.pdfViewer.handWrittenSignatureSettings.strokeColor ? this.pdfViewer.handWrittenSignatureSettings.strokeColor : '#000000';\n        annotationObject.path = annotationObject.path ? annotationObject.path : this.pdfViewer.handWrittenSignatureSettings.path ? this.pdfViewer.handWrittenSignatureSettings.path : '';\n        annotationObject.canSave = annotationObject.canSave ? annotationObject.canSave : false;\n        annotationObject.signatureItem = annotationObject.signatureItem ? annotationObject.signatureItem : ['Signature'];\n        annotationObject.fontFamily = annotationObject.fontFamily ? annotationObject.fontFamily : 'Helvetica';\n        var displayMode;\n        var signatureLimit;\n        var initialLimit;\n        if (annotationObject.signatureItem[0] === 'Initial') {\n            displayMode = annotationObject.initialDialogSettings.displayMode ? annotationObject.initialDialogSettings.displayMode : 1;\n            initialLimit = annotationObject.saveInitialLimit ? annotationObject.saveInitialLimit :\n                this.pdfViewer.handWrittenSignatureSettings.saveInitialLimit;\n            this.pdfViewer.handWrittenSignatureSettings.saveInitialLimit =\n                this.pdfViewer.handWrittenSignatureSettings.saveInitialLimit < initialLimit ? initialLimit :\n                    this.pdfViewer.handWrittenSignatureSettings.saveInitialLimit;\n        }\n        else {\n            displayMode = annotationObject.signatureDialogSettings.displayMode ? annotationObject.signatureDialogSettings.displayMode : 1;\n            signatureLimit = annotationObject.saveSignatureLimit ? annotationObject.saveSignatureLimit :\n                this.pdfViewer.handWrittenSignatureSettings.saveSignatureLimit;\n            this.pdfViewer.handWrittenSignatureSettings.saveSignatureLimit =\n                this.pdfViewer.handWrittenSignatureSettings.saveSignatureLimit < signatureLimit ? signatureLimit :\n                    this.pdfViewer.handWrittenSignatureSettings.saveSignatureLimit;\n        }\n        var signatureAnnotation = [];\n        var annotType;\n        if (displayMode === 1) {\n            annotType = 'signature';\n            var pathData = annotationObject.path ? annotationObject.path : '';\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(pathData)) {\n                // Check whether the given path of the ink annotation is starts with Move path or Line path.\n                if (pathData[0] === 'M' || pathData[0] === 'L') {\n                    var collectionData = (0,_syncfusion_ej2_drawings__WEBPACK_IMPORTED_MODULE_3__.processPathData)(pathData);\n                    var csData = (0,_syncfusion_ej2_drawings__WEBPACK_IMPORTED_MODULE_3__.splitArrayCollection)(collectionData);\n                    pathData = JSON.stringify(csData);\n                }\n                else {\n                    pathData = (0,_syncfusion_ej2_drawings__WEBPACK_IMPORTED_MODULE_3__.getPathString)(JSON.parse(pathData));\n                }\n            }\n            annotationObject.path = pathData;\n        }\n        if (displayMode === 2) {\n            annotationObject.height = 65;\n            annotType = 'SignatureText';\n        }\n        if (displayMode === 4) {\n            annotType = 'SignatureImage';\n        }\n        //Adding the annotation object to an array and return it\n        var signature = {\n            SignatureName: signatureId,\n            AnnotationSettings: annotationSettings,\n            AnnotationType: annotType,\n            AnnotationSelectorSettings: annotationObject.annotationSelectorSettings ?\n                annotationObject.annotationSelectorSettings : annotationSelectorSettings,\n            Opacity: annotationObject.opacity,\n            PathData: annotationObject.path,\n            PageNumber: pageNumber,\n            FontFamily: annotationObject.fontFamily,\n            FontSize: 32,\n            StrokeColor: annotationObject.strokeColor,\n            Thickness: annotationObject.thickness,\n            Bounds: { x: offset.x, y: offset.y, width: annotationObject.width, height: annotationObject.height }\n        };\n        signatureAnnotation[0] = signature;\n        //To save the programmatically added signature\n        if (annotationObject.canSave) {\n            var bounds = { x: offset.x, y: offset.y, width: annotationObject.width, height: annotationObject.height };\n            this.pdfViewerBase.currentSignatureAnnot = null;\n            this.outputString = annotationObject.path;\n            this.pdfViewerBase.isInitialField = annotationObject.signatureItem[0] === 'Initial' ? true : false;\n            var annot = void 0;\n            if (displayMode === 1) {\n                annot = {\n                    id: 'sign' + this.pdfViewerBase.signatureCount, bounds: bounds, pageIndex: annotationObject.pageNumber, data: this.outputString,\n                    shapeAnnotationType: 'HandWrittenSignature', opacity: annotationObject.opacity, strokeColor: annotationObject.strokeColor, thickness: annotationObject.thickness, signatureName: signatureId\n                };\n            }\n            else if (displayMode === 2) {\n                annot = {\n                    id: 'sign' + this.pdfViewerBase.signatureCount, bounds: bounds, pageIndex: annotationObject.pageNumber, data: this.outputString, fontFamily: annotationObject.fontFamily, fontSize: 32,\n                    shapeAnnotationType: 'SignatureText', signatureName: signatureId\n                };\n            }\n            else if (displayMode === 4) {\n                annot = {\n                    id: 'sign' + this.pdfViewerBase.signatureCount, bounds: bounds, pageIndex: annotationObject.pageNumber, data: this.outputString,\n                    shapeAnnotationType: 'SignatureImage', signatureName: signatureId\n                };\n            }\n            this.pdfViewerBase.currentSignatureAnnot = annot;\n            this.addSignatureCollection();\n            this.outputString = '';\n        }\n        return { signatureAnnotation: signatureAnnotation };\n    };\n    return Signature;\n}());\n\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-pdfviewer/src/pdfviewer/base/signature.js?");

/***/ })

}]);