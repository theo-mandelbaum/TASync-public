"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkej2_vue_samples"] = self["webpackChunkej2_vue_samples"] || []).push([["chunk-vendors-node_modules_syncfusion_ej2-treegrid_src_treegrid_actions_rowdragdrop_js-5581c50b"],{

/***/ "./node_modules/@syncfusion/ej2-treegrid/src/treegrid/actions/rowdragdrop.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-treegrid/src/treegrid/actions/rowdragdrop.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RowDD: () => (/* binding */ RowDD)\n/* harmony export */ });\n/* harmony import */ var _syncfusion_ej2_grids__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @syncfusion/ej2-grids */ \"./node_modules/@syncfusion/ej2-grids/index.js\");\n/* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @syncfusion/ej2-base */ \"./node_modules/@syncfusion/ej2-base/index.js\");\n/* harmony import */ var _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @syncfusion/ej2-data */ \"./node_modules/@syncfusion/ej2-data/index.js\");\n/* harmony import */ var _base_constant__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../base/constant */ \"./node_modules/@syncfusion/ej2-treegrid/src/treegrid/base/constant.js\");\n/* harmony import */ var _crud_actions__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./crud-actions */ \"./node_modules/@syncfusion/ej2-treegrid/src/treegrid/actions/crud-actions.js\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils */ \"./node_modules/@syncfusion/ej2-treegrid/src/treegrid/utils.js\");\n\n\n\n\n\n\n\n/**\n * TreeGrid RowDragAndDrop module\n *\n * @hidden\n */\nvar RowDD = /** @class */ (function () {\n    /**\n     * Constructor for render module\n     *\n     * @param {TreeGrid} parent - Tree Grid instance\n     */\n    function RowDD(parent) {\n        /** @hidden\n         * Indicates whether a row can be dropped into the current target position during a drag-and-drop operation.\n         */\n        this.canDrop = true;\n        /** @hidden\n         * Indicates whether the current drag operation includes child records of the dragged item.\n         */\n        this.isDraggedWithChild = false;\n        /** @hidden\n         * Indicates whether multiple TreeGrid instances are being managed or displayed.\n         */\n        this.modifiedRecords = 'modifiedRecords';\n        /** @hidden\n         * Represents the currently selected item in the TreeGrid.\n         */\n        this.selectedRecords = 'selectedRecords';\n        /** @hidden\n         * Holds an array of currently selected records in the TreeGrid.\n         */\n        this.selectedRows = 'selectedRows';\n        /** @hidden\n         * Indicates whether there is a droppable item in the TreeGrid.\n         */\n        this.hasDropItem = true;\n        /** @hidden\n         * Indicates whether the item is being added to the bottom of the TreeGrid.\n         */\n        this.isaddtoBottom = false;\n        _syncfusion_ej2_grids__WEBPACK_IMPORTED_MODULE_0__.Grid.Inject(_syncfusion_ej2_grids__WEBPACK_IMPORTED_MODULE_0__.RowDD);\n        this.parent = parent;\n        this.addEventListener();\n    }\n    /**\n     * Retrieves child records for a specified parent ID in the TreeGrid.\n     *\n     * @param {string} id - The unique ID of the parent record for which to retrieve child records.\n     * @returns {ITreeData[]} An array of child records corresponding to the specified parent ID.\n     */\n    RowDD.prototype.getChildrecordsByParentID = function (id) {\n        var treeGridDataSource;\n        if (this.parent.dataSource instanceof _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_2__.DataManager && (0,_utils__WEBPACK_IMPORTED_MODULE_5__.isOffline)(this.parent)) {\n            treeGridDataSource = this.parent.grid.dataSource.dataSource.json;\n        }\n        else {\n            treeGridDataSource = this.parent.grid.dataSource;\n        }\n        var record = treeGridDataSource.filter(function (e) {\n            return e.uniqueID === id;\n        });\n        return record;\n    };\n    /**\n     * @hidden\n     * @returns {void}\n     */\n    RowDD.prototype.addEventListener = function () {\n        this.parent.on(_base_constant__WEBPACK_IMPORTED_MODULE_3__.rowdraging, this.Rowdraging, this);\n        this.parent.on(_base_constant__WEBPACK_IMPORTED_MODULE_3__.rowDropped, this.rowDropped, this);\n        this.parent.on(_base_constant__WEBPACK_IMPORTED_MODULE_3__.rowsAdd, this.rowsAdded, this);\n        this.parent.on(_base_constant__WEBPACK_IMPORTED_MODULE_3__.rowsRemove, this.rowsRemoved, this);\n    };\n    /**\n     * Reorder the rows based on given indexes and position\n     *\n     * @returns {void}\n     * @param {number[]} fromIndexes - source indexes of rows to be re-ordered\n     * @param {number} toIndex - Destination row index\n     * @param {string} position - Drop position as above or below or child\n     */\n    RowDD.prototype.reorderRows = function (fromIndexes, toIndex, position) {\n        var tObj = this.parent;\n        if (fromIndexes[0] === toIndex || ['above', 'below', 'child'].indexOf(position) === -1) {\n            return;\n        }\n        var action = 'action';\n        var dropPosition = 'dropPosition';\n        if (fromIndexes[0] !== toIndex && ['above', 'below', 'child'].indexOf(position) !== -1) {\n            if (position === 'above') {\n                this.dropPosition = 'topSegment';\n            }\n            if (position === 'below') {\n                this.dropPosition = 'bottomSegment';\n            }\n            if (position === 'child') {\n                this.dropPosition = 'middleSegment';\n            }\n            this.parent[\"\" + dropPosition] = this.dropPosition;\n            var data = [];\n            for (var i = 0; i < fromIndexes.length; i++) {\n                var index = this.parent.getRowByIndex(fromIndexes[parseInt(i.toString(), 10)]).rowIndex;\n                data[parseInt(i.toString(), 10)] = this.parent.getCurrentViewRecords()[parseInt(index.toString(), 10)];\n            }\n            var isByMethod = true;\n            var args = {\n                data: data,\n                dropIndex: toIndex\n            };\n            if (!(0,_utils__WEBPACK_IMPORTED_MODULE_5__.isCountRequired)(this.parent)) {\n                this.dropRows(args, isByMethod);\n            }\n            //this.refreshGridDataSource();\n            if (tObj.isLocalData) {\n                tObj.flatData = this.orderToIndex(tObj.flatData);\n            }\n            if (this.parent[\"\" + action] === 'outdenting') {\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(data[0].parentItem)) {\n                    data[0].level = data[0].parentItem.level + 1;\n                }\n            }\n            this.parent.grid.refresh();\n            if (this.parent.enableImmutableMode && this.dropPosition === 'middleSegment') {\n                var index = this.parent.allowRowDragAndDrop\n                    ? this.parent.treeColumnIndex + 1\n                    : (this.parent[\"\" + action] === 'indenting' ? this.parent.treeColumnIndex : undefined);\n                var row = this.parent.getRows()[fromIndexes[0]];\n                var dropData = args.data[0];\n                var totalRecord = [];\n                var rows = [];\n                totalRecord.push(dropData);\n                rows.push(row);\n                var parentUniqueID = 'parentUniqueID';\n                var parentData = (0,_utils__WEBPACK_IMPORTED_MODULE_5__.getParentData)(this.parent, args.data[0][\"\" + parentUniqueID]);\n                var parentrow = this.parent.getRows()[parseInt(toIndex.toString(), 10)];\n                totalRecord.push(parentData);\n                rows.push(parentrow);\n                this.updateRowAndCellElements(totalRecord, rows, index);\n            }\n            if (this.parent.enableImmutableMode && this.parent[\"\" + action] === 'outdenting') {\n                var index = this.parent.allowRowDragAndDrop\n                    ? this.parent.treeColumnIndex + 1\n                    : (this.parent[\"\" + action] === 'outdenting' ? this.parent.treeColumnIndex : undefined);\n                var record = args.data[0];\n                var row = this.parent.getRows()[fromIndexes[0]];\n                var totalRecord = [];\n                var rows = [];\n                totalRecord.push(record);\n                rows.push(row);\n                this.updateRowAndCellElements(totalRecord, rows, index);\n            }\n        }\n    };\n    /**\n     * Updates the rows and cells\n     *\n     * @param {Object[]} records - Updates the given records\n     * @param {HTMLTableRowElement[]} rows - Updates the given rows\n     * @param {number} index -  Updates the given cell index\n     * @returns {void}\n     */\n    RowDD.prototype.updateRowAndCellElements = function (records, rows, index) {\n        for (var i = 0; i < records.length; i++) {\n            this.parent.renderModule.cellRender({\n                data: records[parseInt(i.toString(), 10)], cell: rows[parseInt(i.toString(), 10)].cells[parseInt(index.toString(), 10)],\n                column: this.parent.grid.getColumns()[this.parent.treeColumnIndex],\n                requestType: 'rowDragAndDrop'\n            });\n            if (this.parent['action'] === 'indenting' || this.parent['action'] === 'outdenting') {\n                this.parent.renderModule.RowModifier({\n                    data: records[parseInt(i.toString(), 10)], row: rows[parseInt(i.toString(), 10)]\n                });\n            }\n        }\n    };\n    /**\n     * Performs indent or outdent actions on selected records in the TreeGrid.\n     *\n     * @param {ITreeData} [record] - The record to be indented or outdented. If undefined, the method operates on the currently selected record.\n     * @param {string} [request] - The action to perform, either 'indent' or 'outdent'.\n     * @returns {void}\n     */\n    RowDD.prototype.indentOutdentAction = function (record, request) {\n        var tObj = this.parent;\n        var action = 'action';\n        var droppedIndex = 'dropIndex';\n        var selectedItemIndex = -1;\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(record) && this.parent.selectedRowIndex === -1) {\n            return;\n        }\n        else {\n            if (this.parent.enableVirtualization && this.parent.selectedRowIndex !== -1) {\n                selectedItemIndex = this.parent.getSelectedRows()[0].rowIndex;\n            }\n            else if (this.parent.selectedRowIndex !== -1) {\n                selectedItemIndex = this.parent.selectedRowIndex;\n            }\n            this.selectedItem = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(record) ?\n                tObj.getCurrentViewRecords()[parseInt(selectedItemIndex.toString(), 10)] : record;\n            var primaryKeyField = this.parent.getPrimaryKeyFieldNames()[0];\n            var rowIndex = this.parent.grid.getRowIndexByPrimaryKey(this.selectedItem[\"\" + primaryKeyField]);\n            this.selectedRow = this.parent[this.selectedRows] = selectedItemIndex !== -1 ?\n                this.parent.getSelectedRows()[0]\n                : this.parent.grid.getRowByIndex(rowIndex);\n            this.selectedRecord = this.parent[this.selectedRecords] = selectedItemIndex !== -1 ?\n                tObj.getCurrentViewRecords()[parseInt(selectedItemIndex.toString(), 10)]\n                : this.selectedItem;\n            if (request === 'indent') {\n                var record_1 = tObj.getCurrentViewRecords()[this.selectedRow.rowIndex - 1];\n                var dropIndex = void 0;\n                if (this.selectedRow.rowIndex === 0 || this.selectedRow.rowIndex === -1 ||\n                    tObj.getCurrentViewRecords()[this.selectedRow.rowIndex].level - record_1.level === 1) {\n                    return;\n                }\n                if (record_1.level > this.selectedRecord.level) {\n                    for (var i = 0; i < tObj.getCurrentViewRecords().length; i++) {\n                        if (tObj.getCurrentViewRecords()[parseInt(i.toString(), 10)].taskData ===\n                            record_1.parentItem.taskData) {\n                            dropIndex = i;\n                            if (tObj.enableVirtualization) {\n                                dropIndex = parseInt(tObj.getRows()[parseInt(i.toString(), 10)].getAttribute('aria-rowindex'), 10) - 1;\n                            }\n                        }\n                    }\n                }\n                else {\n                    dropIndex = this.selectedRow.rowIndex - 1;\n                }\n                if (this.parent.enableVirtualization && this.selectedRecord && !(record_1.level > this.selectedRecord.level)) {\n                    dropIndex = parseInt(this.selectedRow.getAttribute('aria-rowindex'), 10) - 2;\n                }\n                tObj[\"\" + action] = 'indenting';\n                tObj[\"\" + droppedIndex] = dropIndex;\n                this.eventTrigger('indenting', dropIndex);\n            }\n            else if (request === 'outdent') {\n                var isInvalidSelection = this.selectedRow.rowIndex === -1 || this.selectedRow.rowIndex === 0;\n                var isRootLevel = tObj.getCurrentViewRecords()[this.selectedRow.rowIndex].level === 0;\n                if (isInvalidSelection || isRootLevel) {\n                    return;\n                }\n                var parentItem_1 = this.selectedRecord.parentItem;\n                var records = tObj.getCurrentViewRecords();\n                var dropIndex = records.findIndex(function (record) { return record.uniqueID === parentItem_1.uniqueID; });\n                if (dropIndex === -1) {\n                    return;\n                }\n                if (this.parent.enableVirtualization && this.selectedRecord) {\n                    var ariaRowIndex = this.parent.getRows()[parseInt(dropIndex.toString(), 10)].getAttribute('aria-rowindex');\n                    dropIndex = parseInt(ariaRowIndex, 10) - 1;\n                }\n                tObj[\"\" + action] = 'outdenting';\n                tObj[\"\" + droppedIndex] = dropIndex;\n                this.eventTrigger('outdenting', dropIndex);\n            }\n        }\n    };\n    /**\n     * Triggers a specified event for the TreeGrid, notifying subscribers about the event occurrence.\n     *\n     * @param {string} action - The action to be triggered, either 'indenting' or 'outdenting'.\n     * @param {number} dropIndex - The index at which the row should be dropped.\n     * @returns {void}\n     */\n    RowDD.prototype.eventTrigger = function (action, dropIndex) {\n        var _this = this;\n        var actionArgs = {\n            action: action,\n            cancel: false,\n            data: [this.parent[this.selectedRecords]],\n            row: this.parent[this.selectedRows]\n        };\n        this.parent.trigger(_base_constant__WEBPACK_IMPORTED_MODULE_3__.actionBegin, actionArgs, function (actionArgs) {\n            if (!actionArgs.cancel) {\n                if (actionArgs.action === 'indenting') {\n                    if (_this.parent.enableVirtualization) {\n                        _this.reorderRows([parseInt(_this.selectedRow.getAttribute('aria-rowindex'), 10) - 1], dropIndex, 'child');\n                    }\n                    else {\n                        _this.reorderRows([_this.selectedRow.rowIndex], dropIndex, 'child');\n                    }\n                }\n                else if (actionArgs.action === 'outdenting') {\n                    if (_this.parent.enableVirtualization) {\n                        _this.reorderRows([parseInt(_this.selectedRow.getAttribute('aria-rowindex'), 10) - 1], dropIndex, 'below');\n                    }\n                    else {\n                        _this.reorderRows([_this.selectedRow.rowIndex], dropIndex, 'below');\n                    }\n                }\n            }\n        });\n    };\n    /**\n     * Reorders the flat data array of the TreeGrid and updates the index of each record.\n     *\n     * @param {ITreeData[]} currentData - The array of tree data records to reorder.\n     * @returns {ITreeData[]} The updated array of tree data records with indices set.\n     */\n    RowDD.prototype.orderToIndex = function (currentData) {\n        for (var i = 0; i < currentData.length; i++) {\n            currentData[parseInt(i.toString(), 10)].index = i;\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(currentData[parseInt(i.toString(), 10)].parentItem)) {\n                var updatedParent = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.getValue)('uniqueIDCollection.' + currentData[parseInt(i.toString(), 10)].parentUniqueID, this.parent);\n                currentData[parseInt(i.toString(), 10)].parentItem.index = updatedParent.index;\n            }\n        }\n        return currentData;\n    };\n    /**\n     * Handles the addition of new rows to the TreeGrid.\n     *\n     * @param {Object} e - The event object containing information about the rows being added.\n     * @param {number} e.toIndex - The index at which the new rows should be added in the TreeGrid.\n     * @param {Object[]} e.records - An array of the records to be added to the TreeGrid.\n     *\n     * @returns {void} This function does not return any value.\n     */\n    RowDD.prototype.rowsAdded = function (e) {\n        var draggedRecord;\n        var dragRecords = e.records;\n        for (var i = e.records.length - 1; i > -1; i--) {\n            draggedRecord = dragRecords[parseInt(i.toString(), 10)];\n            if (draggedRecord.parentUniqueID) {\n                var record = dragRecords.filter(function (data) {\n                    return data.uniqueID === draggedRecord.parentUniqueID;\n                });\n                if (record.length) {\n                    var index = record[0].childRecords.indexOf(draggedRecord);\n                    var parentRecord = record[0];\n                    if (index !== -1) {\n                        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(this.parent.idMapping)) {\n                            parentRecord.childRecords.splice(index, 1);\n                            if (!parentRecord.childRecords.length) {\n                                parentRecord.hasChildRecords = false;\n                                parentRecord.hasFilteredChildRecords = false;\n                            }\n                        }\n                        this.isDraggedWithChild = true;\n                    }\n                }\n            }\n        }\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(this.parent.dataSource) || !this.parent.dataSource.length) {\n            var tObj = this.parent;\n            var draggedRecord_1;\n            var dragRecords_1 = e.records;\n            var dragLength = e.records.length;\n            for (var i = dragLength - 1; i > -1; i--) {\n                draggedRecord_1 = dragRecords_1[parseInt(i.toString(), 10)];\n                if (!i && draggedRecord_1.hasChildRecords) {\n                    draggedRecord_1.taskData[this.parent.parentIdMapping] = null;\n                }\n                var recordIndex1 = 0;\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(tObj.parentIdMapping)) {\n                    tObj.childMapping = null;\n                }\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(draggedRecord_1.taskData) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(tObj.childMapping) &&\n                    !Object.prototype.hasOwnProperty.call(draggedRecord_1.taskData, tObj.childMapping)) {\n                    draggedRecord_1.taskData[tObj.childMapping] = [];\n                }\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(draggedRecord_1[tObj.childMapping])) {\n                    if (Object.prototype.hasOwnProperty.call(draggedRecord_1, tObj.childMapping) &&\n                        (draggedRecord_1[tObj.childMapping]).length && !this.isDraggedWithChild &&\n                        !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(tObj.parentIdMapping)) {\n                        var childData = (draggedRecord_1[tObj.childMapping]);\n                        for (var j = 0; j < childData.length; j++) {\n                            if (dragRecords_1.indexOf(childData[parseInt(j.toString(), 10)]) === -1) {\n                                dragRecords_1.splice(j, 0, childData[parseInt(j.toString(), 10)]);\n                                childData[parseInt(j.toString(), 10)].taskData = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.extend)({}, childData[parseInt(j.toString(), 10)]);\n                                i += 1;\n                            }\n                        }\n                    }\n                }\n                if (Object.prototype.hasOwnProperty.call(draggedRecord_1, tObj.parentIdMapping)\n                    && draggedRecord_1[tObj.parentIdMapping] !== null\n                    && !this.isDraggedWithChild) {\n                    draggedRecord_1.taskData[tObj.parentIdMapping] = null;\n                    delete draggedRecord_1.parentItem;\n                    delete draggedRecord_1.parentUniqueID;\n                }\n                if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(tObj.dataSource)) {\n                    tObj.dataSource = [];\n                }\n                tObj.dataSource.splice(recordIndex1, 0, draggedRecord_1.taskData);\n            }\n            tObj.setProperties({ dataSource: tObj.dataSource }, false);\n        }\n        else {\n            for (var i = 0; i < dragRecords.length; i++) {\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.setValue)('uniqueIDCollection.' + dragRecords[parseInt(i.toString(), 10)].uniqueID, dragRecords[parseInt(i.toString(), 10)], this.parent);\n            }\n            var args = { data: e.records, dropIndex: e.toIndex };\n            if (this.parent.dataSource instanceof _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_2__.DataManager) {\n                this.treeGridData = this.parent.dataSource.dataSource.json;\n                this.treeData = this.parent.dataSource.dataSource.json;\n            }\n            else {\n                this.treeGridData = this.parent.grid.dataSource;\n                this.treeData = this.parent.dataSource;\n            }\n            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(this.dropPosition)) {\n                this.dropPosition = 'bottomSegment';\n                args.dropIndex = this.parent.getCurrentViewRecords().length > 1 ? this.parent.getCurrentViewRecords().length - 1 :\n                    args.dropIndex;\n                args.data = args.data.map(function (i) {\n                    if (i.hasChildRecords && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(i.parentItem)) {\n                        i.level = 0;\n                        return i;\n                    }\n                    else {\n                        delete i.parentItem;\n                        delete i.parentUniqueID;\n                        i.level = 0;\n                        return i;\n                    }\n                });\n            }\n            this.dropRows(args);\n        }\n    };\n    /**\n     * Handles the removal of specified rows from the TreeGrid.\n     *\n     * @param {Object} e - The event object containing information about the removed rows.\n     * @param {number[]} e.indexes - An array of indexes of the rows that were removed.\n     * @param {Object[]} e.records - An array of the records corresponding to the removed rows.\n     *\n     * @returns {void} This function does not return any value.\n     */\n    RowDD.prototype.rowsRemoved = function (e) {\n        for (var i = 0; i < e.records.length; i++) {\n            this.draggedRecord = e.records[parseInt(i.toString(), 10)];\n            if (this.draggedRecord.hasChildRecords || this.draggedRecord.parentItem &&\n                this.parent.grid.dataSource.\n                    indexOf(this.getChildrecordsByParentID(this.draggedRecord.parentUniqueID)[0]) !== -1 ||\n                this.draggedRecord.level === 0) {\n                this.deleteDragRow();\n            }\n        }\n    };\n    /**\n     * Refreshes the data source of the TreeGrid.\n     *\n     * @returns {void} This function does not return any value.\n     */\n    RowDD.prototype.refreshGridDataSource = function () {\n        var draggedRecord = this.draggedRecord;\n        var droppedRecord = this.droppedRecord;\n        var proxy = this.parent;\n        var temporaryDataSource;\n        var indexOfDroppedRecord;\n        if (this.parent.dataSource instanceof _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_2__.DataManager && (0,_utils__WEBPACK_IMPORTED_MODULE_5__.isOffline)(this.parent)) {\n            temporaryDataSource = proxy.dataSource.dataSource.json;\n        }\n        else {\n            temporaryDataSource = proxy.dataSource;\n        }\n        if (temporaryDataSource && (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(droppedRecord) && !droppedRecord.parentItem)\n            && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(droppedRecord.taskData)) {\n            var keys = Object.keys(temporaryDataSource);\n            for (var i = 0; i < keys.length; i++) {\n                if (temporaryDataSource[parseInt(i.toString(), 10)][this.parent.childMapping] ===\n                    droppedRecord.taskData[this.parent.childMapping]) {\n                    indexOfDroppedRecord = i;\n                }\n            }\n            if (!this.parent.idMapping) {\n                var positionAdjustment = this.dropPosition === 'topSegment' ? 0 : 1;\n                if (this.dropPosition === 'topSegment' || this.dropPosition === 'bottomSegment') {\n                    temporaryDataSource.splice(indexOfDroppedRecord + positionAdjustment, 0, draggedRecord.taskData);\n                }\n            }\n        }\n        else if (!this.parent.parentIdMapping && (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(droppedRecord) && droppedRecord.parentItem)) {\n            if (this.dropPosition === 'topSegment' || this.dropPosition === 'bottomSegment') {\n                var record = this.getChildrecordsByParentID(droppedRecord.parentUniqueID)[0];\n                var childRecords = record.childRecords;\n                for (var i = 0; i < childRecords.length; i++) {\n                    droppedRecord.parentItem.taskData[this.parent.childMapping][parseInt(i.toString(), 10)]\n                        = childRecords[parseInt(i.toString(), 10)].taskData;\n                }\n            }\n        }\n        if (this.parent.parentIdMapping) {\n            if (draggedRecord.parentItem) {\n                if (this.dropPosition === 'topSegment' || this.dropPosition === 'bottomSegment') {\n                    draggedRecord[this.parent.parentIdMapping] = droppedRecord[this.parent.parentIdMapping];\n                    draggedRecord.taskData[this.parent.parentIdMapping] = droppedRecord[this.parent.parentIdMapping];\n                }\n                else {\n                    draggedRecord[this.parent.parentIdMapping] = droppedRecord[this.parent.idMapping];\n                    draggedRecord.taskData[this.parent.parentIdMapping] = droppedRecord[this.parent.idMapping];\n                }\n            }\n            else {\n                draggedRecord.taskData[this.parent.parentIdMapping] = null;\n                draggedRecord[this.parent.parentIdMapping] = null;\n            }\n        }\n    };\n    /**\n     * Removes the border from the first row of the TreeGrid.\n     *\n     * @param {HTMLTableRowElement} element - The table row element from which to remove the border.\n     * @returns {void} This function does not return any value.\n     */\n    RowDD.prototype.removeFirstrowBorder = function (element) {\n        var canremove = this.dropPosition === 'bottomSegment';\n        if (this.parent.element.getElementsByClassName('e-firstrow-border').length > 0 && element &&\n            (element.rowIndex !== 0 || canremove)) {\n            this.parent.element.getElementsByClassName('e-firstrow-border')[0].remove();\n        }\n    };\n    /**\n     * Removes the border from the last row of the TreeGrid.\n     *\n     * @param {HTMLTableRowElement} element - The row element from which to remove the last row border.\n     * @returns {void}\n     */\n    RowDD.prototype.removeLastrowBorder = function (element) {\n        if (!element) {\n            return;\n        }\n        var isEmptyRow = element.classList.contains('e-emptyrow') ||\n            element.classList.contains('e-columnheader') ||\n            element.classList.contains('e-detailrow');\n        if (isEmptyRow) {\n            return;\n        }\n        var lastRow = this.parent.enableVirtualization ?\n            this.parent.getRows()[this.parent.getCurrentViewRecords().length - 1] :\n            this.parent.getRowByIndex(this.parent.getCurrentViewRecords().length - 1);\n        var isNotLastRow = lastRow.getAttribute('data-uid') !== element.getAttribute('data-uid');\n        var canRemove = isNotLastRow || this.dropPosition === 'topSegment';\n        var lastRowBorderElement = this.parent.element.getElementsByClassName('e-lastrow-border')[0];\n        if (lastRowBorderElement && canRemove) {\n            lastRowBorderElement.remove();\n        }\n    };\n    /**\n     * Updates the icons associated with the specified rows in the TreeGrid.\n     *\n     * @param {Element[]} row - The array of row elements to update the icons for.\n     * @param {number} index - The index of the row being updated.\n     * @param {RowDragEventArgs} args - The event arguments associated with the row drag operation.\n     * @returns {string} The drop position ('topSegment', 'middleSegment', 'bottomSegment', or 'Invalid').\n     */\n    RowDD.prototype.updateIcon = function (row, index, args) {\n        var rowEle = args.target ? (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.closest)(args.target, 'tr') : null;\n        this.dropPosition = undefined;\n        var rowPositionHeight = 0;\n        this.removeFirstrowBorder(rowEle);\n        this.removeLastrowBorder(rowEle);\n        for (var i = 0; i < args.rows.length; i++) {\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(rowEle) && rowEle.getAttribute('data-uid') === args.rows[parseInt(i.toString(), 10)].getAttribute('data-uid')\n                || !(0,_syncfusion_ej2_grids__WEBPACK_IMPORTED_MODULE_0__.parentsUntil)(args.target, 'e-gridcontent')) {\n                this.dropPosition = 'Invalid';\n                this.addErrorElem();\n                if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(this.parent.rowDropSettings.targetID)) {\n                    this.removetopOrBottomBorder();\n                    this.removeChildBorder();\n                }\n            }\n        }\n        // To get the corresponding drop position related to mouse position\n        var tObj = this.parent;\n        var rowTop = 0;\n        var roundOff = 0;\n        var toolHeight = tObj.toolbar && tObj.toolbar.length ?\n            document.getElementById(tObj.element.id + '_gridcontrol_toolbarItems').offsetHeight : 0;\n        // tObj.lastRow = tObj.getRowByIndex(tObj.getCurrentViewRecords().length - 1);\n        var positionOffSet = this.getOffset(tObj.element);\n        // let contentHeight1: number = (tObj.element.offsetHeight  - (tObj.getContent() as HTMLElement).offsetHeight) + positionOffSet.top;\n        var contentHeight = tObj.getHeaderContent().offsetHeight + positionOffSet.top + toolHeight;\n        var scrollTop = tObj.getContent().firstElementChild.scrollTop;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(rowEle)) {\n            rowPositionHeight = rowEle.offsetTop - scrollTop;\n        }\n        // let scrollTop = (tObj.grid.scrollModule as any).content.scrollTop;\n        if (this.parent.enableVirtualization) {\n            rowTop = rowEle.getBoundingClientRect().top;\n        }\n        else {\n            rowTop = rowPositionHeight + contentHeight + roundOff;\n        }\n        var rowBottom = row[0].offsetHeight !== 0 && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(rowEle) ?\n            rowTop + row[0].offsetHeight : rowTop + rowEle.offsetHeight;\n        var difference = rowBottom - rowTop;\n        var divide = difference / 3;\n        var topRowSegment = rowTop + divide;\n        var middleRowSegment = topRowSegment + divide;\n        var bottomRowSegment = middleRowSegment + divide;\n        var mouseEvent = (0,_syncfusion_ej2_grids__WEBPACK_IMPORTED_MODULE_0__.getObject)('originalEvent.event', args);\n        var touchEvent = (0,_syncfusion_ej2_grids__WEBPACK_IMPORTED_MODULE_0__.getObject)('originalEvent.event', args);\n        var posy = (mouseEvent.type === 'mousemove') ? mouseEvent.pageY : ((!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(touchEvent) &&\n            !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(touchEvent.changedTouches)) ? touchEvent.changedTouches[0].pageY : null);\n        if (this.parent.enableVirtualization) {\n            posy = (mouseEvent.type === 'mousemove') ? mouseEvent.clientY : ((!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(touchEvent) &&\n                !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(touchEvent.changedTouches)) ? touchEvent.changedTouches[0].clientY : null);\n        }\n        var isTopSegment = posy <= topRowSegment;\n        var isMiddleRowSegment = (posy > topRowSegment && posy <= middleRowSegment);\n        var isBottomRowSegment = (posy > middleRowSegment && posy <= bottomRowSegment);\n        var isBorderNeed = true;\n        if (isTopSegment || isMiddleRowSegment || isBottomRowSegment) {\n            if (isTopSegment && this.dropPosition !== 'Invalid') {\n                this.removeChildBorder();\n                this.dropPosition = 'topSegment';\n                this.removetopOrBottomBorder();\n                this.addFirstrowBorder(rowEle);\n                this.removeErrorElem();\n                this.removeLastrowBorder(rowEle);\n            }\n            if (isMiddleRowSegment && this.dropPosition !== 'Invalid') {\n                this.removetopOrBottomBorder();\n                this.dropPosition = 'middleSegment';\n                this.addLastRowborder(rowEle);\n                this.addFirstrowBorder(rowEle);\n            }\n            if (isBottomRowSegment && this.dropPosition !== 'Invalid') {\n                this.removeErrorElem();\n                this.removetopOrBottomBorder();\n                this.removeChildBorder();\n                this.dropPosition = 'bottomSegment';\n                this.addLastRowborder(rowEle);\n                this.removeFirstrowBorder(rowEle);\n            }\n            if ((isTopSegment || isBottomRowSegment) && this.dropPosition !== 'Invalid') {\n                isBorderNeed = this.updateBorderStatus(row, index);\n                this.topOrBottomBorder(args.target, isBorderNeed);\n            }\n            else if (isMiddleRowSegment && this.dropPosition !== 'Invalid') {\n                var rowElement = [];\n                var element = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.closest)(args.target, 'tr');\n                rowElement = [].slice.call(element.querySelectorAll('.e-rowcell,.e-rowdragdrop,.e-detailrowcollapse'));\n                isBorderNeed = this.updateBorderStatus(row, index);\n                if (rowElement.length > 0 && isBorderNeed) {\n                    this.addRemoveClasses(rowElement, true, 'e-childborder');\n                }\n            }\n        }\n        return this.dropPosition;\n    };\n    /**\n     * Updates the border status for a specified row and index.\n     *\n     * @private\n     * @param {Element[]} row - The array of row elements to be updated.\n     * @param {number} index - The index of the row element for which the border status is to be updated.\n     * @returns {boolean} - Returns true if the border status was successfully updated, otherwise false.\n     */\n    RowDD.prototype.updateBorderStatus = function (row, index) {\n        var _this = this;\n        var isBorderNeed = true;\n        var rows = this.parent.grid.getRows();\n        var childRows = [];\n        var hasDetailTemplate = false;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(this.parent.detailTemplate)) {\n            rows = this.parent.getDataRows();\n            hasDetailTemplate = true;\n        }\n        var treegridColumnIndex = this.parent.treeColumnIndex;\n        var treeColIndex = this.parent.allowRowDragAndDrop ?\n            (hasDetailTemplate ? treegridColumnIndex + 2 : treegridColumnIndex + 1) :\n            (hasDetailTemplate ? treegridColumnIndex + 1 : treegridColumnIndex);\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(this.parent.rowDropSettings.targetID)) {\n            treeColIndex = treegridColumnIndex;\n        }\n        var dragRows = row;\n        var targetRow = [rows[\"\" + index]];\n        if (this.dropPosition === 'topSegment') {\n            row.filter(function (e) {\n                if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(e) || (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(e.cells) || (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(targetRow[0]) ||\n                    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(targetRow[0].cells)) {\n                    return true;\n                }\n                var regex = /index(\\d+)|level(\\d+)/g;\n                var parentIndexLevel = e === null || e === undefined ? undefined : e.cells[\"\" + treeColIndex].className.match(regex);\n                var dropIndexLevel = targetRow[0].cells[\"\" + treeColIndex].className.match(regex);\n                if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(dropIndexLevel) || (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(dropIndexLevel)) {\n                    return true;\n                }\n                var parentLevel = +parentIndexLevel[1].match(/\\d+/)[0];\n                var dropParentLevel = +dropIndexLevel[1].match(/\\d+/)[0];\n                var InDraggedRowIndex = false;\n                if (parentLevel !== 0 && parentLevel !== dropParentLevel) {\n                    return true;\n                }\n                for (var i = 0; i < rows.length; i++) {\n                    if (rows[parseInt(i.toString(), 10)] === dragRows[0]) {\n                        InDraggedRowIndex = true;\n                    }\n                    if (InDraggedRowIndex && rows[parseInt(i.toString(), 10)] !== dragRows[0]) {\n                        var parentIndexLevelInRow = rows[parseInt(i.toString(), 10)].cells[\"\" + treeColIndex].className.match(regex);\n                        var parentLevelInRow = +parentIndexLevelInRow[1].match(/\\d+/)[0];\n                        if (parentLevelInRow !== parentLevel && parentLevelInRow > parentLevel) {\n                            childRows.push(rows[parseInt(i.toString(), 10)]);\n                        }\n                        else {\n                            break;\n                        }\n                    }\n                }\n                if (parentLevel === dropParentLevel && ((childRows.length > 0 && parseInt(row[0].getAttribute('aria-rowindex'), 10) - 1 === index - (childRows.length + 1)) || (childRows.length === 0 && parseInt(row[0].getAttribute('aria-rowindex'), 10) - 1 === index - 1))) {\n                    isBorderNeed = false;\n                }\n                return true;\n            });\n            isBorderNeed = (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(row) && childRows.length === 0 && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(row[0].getAttribute('aria-rowindex')) && parseInt(row[0].getAttribute('aria-rowindex'), 10) - 1 === index - 1) && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(row[0]) ? false : isBorderNeed;\n        }\n        if (this.dropPosition === 'bottomSegment') {\n            targetRow.filter(function (e) {\n                if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(e) || (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(e.cells) || (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(dragRows[0]) ||\n                    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(dragRows[0].cells)) {\n                    return true;\n                }\n                var regex = /index(\\d+)|level(\\d+)/g;\n                var parentIndexLevel = e === null || e === undefined ? undefined : e.cells[\"\" + treeColIndex].className.match(regex);\n                var dragIndexLevel = dragRows[0].cells[\"\" + treeColIndex].className.match(regex);\n                if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(dragIndexLevel) || (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(parentIndexLevel)) {\n                    return true;\n                }\n                var parentLevel = +parentIndexLevel[1].match(/\\d+/)[0];\n                var dragParentLevel = +dragIndexLevel[1].match(/\\d+/)[0];\n                var InDraggedRowIndex = false;\n                if (parentLevel !== 0 && parentLevel !== dragParentLevel) {\n                    return true;\n                }\n                for (var i = 0; i < rows.length; i++) {\n                    if (rows[parseInt(i.toString(), 10)] === targetRow[0]) {\n                        InDraggedRowIndex = true;\n                    }\n                    if (InDraggedRowIndex && rows[parseInt(i.toString(), 10)] !== targetRow[0]) {\n                        var parentIndexLevelInRow = rows[parseInt(i.toString(), 10)].cells[\"\" + treeColIndex].className.match(regex);\n                        var parentLevelInRow = +parentIndexLevelInRow[1].match(/\\d+/)[0];\n                        if (parentLevelInRow !== parentLevel && parentLevelInRow > parentLevel) {\n                            childRows.push(rows[parseInt(i.toString(), 10)]);\n                        }\n                        else {\n                            break;\n                        }\n                    }\n                }\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(row) && parentLevel === dragParentLevel && ((childRows.length > 0 && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(row[0].getAttribute('aria-rowindex')) && parseInt(row[0].getAttribute('aria-rowindex'), 10) - 1 === index + (childRows.length + 1)) || (childRows.length === 0 && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(row[0].getAttribute('aria-rowindex')) && parseInt(row[0].getAttribute('aria-rowindex'), 10) - 1 === index + 1))) {\n                    isBorderNeed = false;\n                }\n                return true;\n            });\n            isBorderNeed = (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(row) && childRows.length === 0 && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(row[0].getAttribute('aria-rowindex')) && parseInt(row[0].getAttribute('aria-rowindex'), 10) - 1 === index + 1) && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(row[0]) ? false : isBorderNeed;\n        }\n        if (this.dropPosition === 'middleSegment') {\n            targetRow.filter(function (e) {\n                if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(e) || (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(e.cells) || (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(dragRows[0]) ||\n                    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(dragRows[0].cells)) {\n                    return true;\n                }\n                for (var i = 0; i < dragRows.length; i++) {\n                    var regex = /index(\\d+)|level(\\d+)/g;\n                    var dropActualIndex = targetRow[0].rowIndex;\n                    var dragIndexLevel = dragRows[parseInt(i.toString(), 10)].cells[\"\" + treeColIndex].className.match(regex);\n                    if (!dragIndexLevel) {\n                        return true;\n                    }\n                    var dragIndex = parseInt(dragIndexLevel.find(function (item) { return item.includes('index'); }).match(/\\d+/)[0] || '0', 10);\n                    if (hasDetailTemplate) {\n                        dropActualIndex = dropActualIndex / 2;\n                    }\n                    if (dragIndex === dropActualIndex && !_this.parent.rowDropSettings.targetID) {\n                        isBorderNeed = false;\n                    }\n                    else {\n                        isBorderNeed = true;\n                        break;\n                    }\n                }\n                if (!isBorderNeed) {\n                    _this.dropPosition = 'Invalid';\n                    _this.addErrorElem();\n                }\n                return isBorderNeed;\n            });\n        }\n        this.canDrop = isBorderNeed;\n        return isBorderNeed;\n    };\n    /**\n     * Removes the visual border from all child rows within the TreeGrid.\n     *\n     * @returns {void} No return value.\n     */\n    RowDD.prototype.removeChildBorder = function () {\n        var borderElem = [];\n        borderElem = [].slice.call(this.parent.element.querySelectorAll('.e-childborder'));\n        if (borderElem.length > 0) {\n            this.addRemoveClasses(borderElem, false, 'e-childborder');\n        }\n    };\n    /**\n     * Adds a visual border to the first row of the TreeGrid.\n     *\n     * @param {HTMLTableRowElement} targetRow - The target row element to which the border will be added, if it is the first row.\n     * @returns {void} No return value.\n     */\n    RowDD.prototype.addFirstrowBorder = function (targetRow) {\n        var node = this.parent.element;\n        var tObj = this.parent;\n        if (targetRow && targetRow.rowIndex === 0 && !targetRow.classList.contains('e-emptyrow')) {\n            var div = this.parent.createElement('div', { className: 'e-firstrow-border' });\n            var gridheaderEle = this.parent.getHeaderContent();\n            var toolbarHeight = 0;\n            if (tObj.toolbar) {\n                toolbarHeight = tObj.toolbarModule.getToolbar().offsetHeight;\n            }\n            var multiplegrid = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(this.parent.rowDropSettings.targetID);\n            if (multiplegrid) {\n                div.style.top = this.parent.grid.element.getElementsByClassName('e-gridheader')[0].offsetHeight\n                    + toolbarHeight + 'px';\n            }\n            div.style.width = multiplegrid ? node.offsetWidth + 'px' :\n                node.offsetWidth - this.getScrollWidth() + 'px';\n            if (!gridheaderEle.querySelectorAll('.e-firstrow-border').length) {\n                gridheaderEle.appendChild(div);\n            }\n        }\n    };\n    /**\n     * Adds a visual border to the last row of the TreeGrid.\n     *\n     * @param {HTMLTableRowElement} trElement - The table row element to which the border will be added, if it is the last row.\n     * @returns {void} No return value.\n     */\n    RowDD.prototype.addLastRowborder = function (trElement) {\n        if (!trElement) {\n            return;\n        }\n        var isEmptyRow = trElement && (trElement.classList.contains('e-emptyrow') ||\n            trElement.classList.contains('e-columnheader') || trElement.classList.contains('e-detailrow'));\n        if (isEmptyRow) {\n            return;\n        }\n        if (trElement && !isEmptyRow && this.parent.getRows()[this.parent.getCurrentViewRecords().length - 1].getAttribute('data-uid') ===\n            trElement.getAttribute('data-uid')) {\n            var bottomborder = this.parent.createElement('div', { className: 'e-lastrow-border' });\n            var gridcontentEle = this.parent.getContent();\n            bottomborder.style.width = this.parent.element.offsetWidth - this.getScrollWidth() + 'px';\n            if (!gridcontentEle.querySelectorAll('.e-lastrow-border').length) {\n                gridcontentEle.classList.add('e-treegrid-relative');\n                gridcontentEle.appendChild(bottomborder);\n                bottomborder.style.bottom = this.getScrollWidth() + 'px';\n            }\n        }\n    };\n    /**\n     * Retrieves the total scroll width of the TreeGrid content area.\n     *\n     * @returns {number} The width of the scrollbar if content overflows, otherwise 0.\n     */\n    RowDD.prototype.getScrollWidth = function () {\n        var scrollElem = this.parent.getContent().firstElementChild;\n        return scrollElem.scrollWidth > scrollElem.offsetWidth ? _syncfusion_ej2_grids__WEBPACK_IMPORTED_MODULE_0__.Scroll.getScrollBarWidth() : 0;\n    };\n    /**\n     * Adds an error element to the dragged row element during a row drag-and-drop operation.\n     *\n     * @returns {void} No return value.\n     */\n    RowDD.prototype.addErrorElem = function () {\n        var dragelem = document.getElementsByClassName('e-cloneproperties')[0];\n        var errorelemCount = dragelem.querySelectorAll('.e-errorelem').length;\n        var sanitize = 'sanitize';\n        if (!errorelemCount && !this.parent.rowDropSettings.targetID) {\n            var errorContainer = document.createElement('div');\n            errorContainer.classList.add('e-errorcontainer', 'e-icons', 'e-errorelem');\n            var rowCell = dragelem.querySelector('.e-rowcell');\n            var errorVal = dragelem.querySelector('.errorValue');\n            var content = rowCell.innerHTML;\n            if (errorVal) {\n                content = this.parent[\"\" + sanitize](errorVal.innerHTML);\n                errorVal.parentNode.removeChild(errorVal);\n            }\n            rowCell.innerHTML = '';\n            var spanContent = document.createElement('span');\n            spanContent.className = 'errorValue';\n            spanContent.style.paddingLeft = '16px';\n            spanContent.innerHTML = this.parent[\"\" + sanitize](content);\n            rowCell.appendChild(errorContainer);\n            rowCell.appendChild(spanContent);\n            var dropItemSpan = document.querySelector('.e-dropitemscount');\n            if (this.hasDropItem && dropItemSpan) {\n                var dropItemLeft = parseInt(dropItemSpan.style.left, 10) + errorContainer.offsetWidth + 16;\n                var spanLeft = !this.parent.enableRtl ? dropItemLeft : 0;\n                dropItemSpan.style.left = spanLeft + \"px\";\n                this.hasDropItem = false;\n            }\n        }\n    };\n    /**\n     * Removes the error element from the DOM and adjusts the position of the drop item count if necessary.\n     *\n     * @returns {void} No return value.\n     */\n    RowDD.prototype.removeErrorElem = function () {\n        var errorelem = document.querySelector('.e-errorelem');\n        var errorValue = document.querySelector('.errorValue');\n        var dropItemSpan = document.querySelector('.e-dropitemscount');\n        if (errorelem) {\n            if (dropItemSpan) {\n                var dropItemLeft = parseInt(dropItemSpan.style.left, 10) - errorelem.offsetWidth - 16;\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.setStyleAttribute)(errorValue, {\n                    paddingLeft: '0px'\n                });\n                if (!this.parent.enableRtl) {\n                    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.setStyleAttribute)(dropItemSpan, {\n                        left: dropItemLeft + \"px\"\n                    });\n                }\n            }\n            errorelem.remove();\n        }\n        this.hasDropItem = true;\n    };\n    /**\n     * Applies drop border styles to row elements based on the current drop position ('topSegment' or 'bottomSegment').\n     *\n     * @param {Element} target - The target element where the drop action is taking place.\n     * @param {boolean} [isBorderNeed=true] - Indicates whether a border is needed during the drop action. Defaults to `true`.\n     * @returns {void} No return value.\n     */\n    RowDD.prototype.topOrBottomBorder = function (target, isBorderNeed) {\n        if (isBorderNeed === void 0) { isBorderNeed = true; }\n        var element = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.closest)(target, 'tr');\n        var rowElements = element ?\n            Array.from(element.querySelectorAll('.e-rowcell, .e-rowdragdrop, .e-detailrowcollapse')) : [];\n        if (!rowElements.length) {\n            return;\n        }\n        var classAction = isBorderNeed ? this.addRemoveClasses.bind(this, rowElements, true) : this.addRemoveClasses.bind(this, rowElements, false, 'e-dragborder');\n        if (this.dropPosition === 'topSegment') {\n            classAction('e-droptop');\n            var lastRowDragBorder = this.parent.element.querySelector('.e-lastrow-dragborder');\n            if (lastRowDragBorder) {\n                lastRowDragBorder.remove();\n            }\n        }\n        if (this.dropPosition === 'bottomSegment') {\n            classAction('e-dropbottom');\n        }\n    };\n    /**\n     * Removes the drop border classes ('e-dropbottom' and 'e-droptop') from the parent element if present.\n     *\n     * @returns {void} No return value.\n     */\n    RowDD.prototype.removetopOrBottomBorder = function () {\n        var border = [];\n        border = [].slice.call(this.parent.element.querySelectorAll('.e-dropbottom, .e-droptop'));\n        if (border.length) {\n            this.addRemoveClasses(border, false, 'e-dropbottom');\n            this.addRemoveClasses(border, false, 'e-droptop');\n        }\n    };\n    /**\n     * Adds or removes a specified class from a list of HTML elements.\n     *\n     * @param {Element[]} cells - The list of HTML elements to which the class will be added or removed.\n     * @param {boolean} add - A flag indicating whether to add (`true`) or remove (`false`) the class.\n     * @param {string} className - The class name to be added or removed from each element in `cells`.\n     * @returns {void} No return value.\n     */\n    RowDD.prototype.addRemoveClasses = function (cells, add, className) {\n        for (var i = 0, len = cells.length; i < len; i++) {\n            if (add) {\n                cells[parseInt(i.toString(), 10)].classList.add(className);\n            }\n            else {\n                cells[parseInt(i.toString(), 10)].classList.remove(className);\n            }\n        }\n    };\n    /**\n     * Calculates the offset position of the specified HTML element relative to the document.\n     *\n     * @param {Element} element - The HTML element for which the offset position is calculated.\n     * @returns {PositionOffSet} The offset position containing `top` and `left` values.\n     */\n    RowDD.prototype.getOffset = function (element) {\n        var box = element.getBoundingClientRect();\n        var body = document.body;\n        var docElem = document.documentElement;\n        var scrollTop = window.pageYOffset || docElem.scrollTop || body.scrollTop;\n        var scrollLeft = window.pageXOffset || docElem.scrollLeft || body.scrollLeft;\n        var clientTop = docElem.clientTop || body.clientTop || 0;\n        var clientLeft = docElem.clientLeft || body.clientLeft || 0;\n        var top = box.top + scrollTop - clientTop;\n        var left = box.left + scrollLeft - clientLeft;\n        return { top: Math.round(top), left: Math.round(left) };\n    };\n    /**\n     * Handles the dragging of rows in the TreeGrid.\n     *\n     * @param {RowDragEventArgs} args - The event arguments for the row drag action.\n     * @returns {void} This function does not return a value.\n     */\n    RowDD.prototype.Rowdraging = function (args) {\n        var tObj = this.parent;\n        var cloneElement = this.parent.element.querySelector('.e-cloneproperties');\n        if (!cloneElement) {\n            return;\n        }\n        cloneElement.style.cursor = '';\n        var rowEle = args.target ? (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.closest)(args.target, 'tr') : null;\n        var rowIdx = -1;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(this.parent.detailTemplate)) {\n            rowIdx = rowEle ? this.parent.getDataRows().indexOf(rowEle) : -1;\n        }\n        else {\n            rowIdx = rowEle ? rowEle.rowIndex : -1;\n        }\n        if (rowIdx === -1) {\n            this.canDrop = false;\n            this.addErrorElem();\n            this.removetopOrBottomBorder();\n            this.removeChildBorder();\n            return;\n        }\n        var dragRecords = Array.isArray(args.data) ? args.data : [args.data];\n        var droppedRecord = tObj.getCurrentViewRecords()[parseInt(rowIdx.toString(), 10)];\n        if (tObj.rowDropSettings.targetID) {\n            var dropElement = (0,_syncfusion_ej2_grids__WEBPACK_IMPORTED_MODULE_0__.parentsUntil)(args.target, 'e-treegrid');\n            if (dropElement && dropElement.id === this.parent.rowDropSettings.targetID) {\n                var srcControl = dropElement.ej2_instances[0];\n                droppedRecord = srcControl.getCurrentViewRecords()[parseInt(rowIdx.toString(), 10)];\n            }\n        }\n        this.removeErrorElem();\n        this.canDrop = true;\n        this.ensuredropPosition(dragRecords, droppedRecord);\n        if (!tObj.rowDropSettings.targetID && this.canDrop && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(args.rows[0])) {\n            tObj.rowDragAndDropModule.updateIcon(args.rows, rowIdx, args);\n        }\n        if (tObj.rowDropSettings.targetID) {\n            var dropElement = (0,_syncfusion_ej2_grids__WEBPACK_IMPORTED_MODULE_0__.parentsUntil)(args.target, 'e-treegrid');\n            if (dropElement && dropElement.id === this.parent.rowDropSettings.targetID) {\n                var srcControl = dropElement.ej2_instances[0];\n                srcControl.rowDragAndDropModule.updateIcon(args.rows, rowIdx, args);\n            }\n        }\n        if (args.target && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.closest)(args.target, '#' + tObj.rowDropSettings.targetID)) {\n            var dropElement = (0,_syncfusion_ej2_grids__WEBPACK_IMPORTED_MODULE_0__.parentsUntil)(args.target, 'e-treegrid');\n            if (!dropElement) {\n                cloneElement.style.cursor = 'default';\n            }\n        }\n    };\n    /**\n     * Handles the row drop event for the TreeGrid.\n     *\n     * @param {RowDropEventArgs} args - The event arguments for the row drop action.\n     * @returns {void} This function does not return a value.\n     */\n    RowDD.prototype.rowDropped = function (args) {\n        var tObj = this.parent;\n        var parentItem = 'parentItem';\n        if (!tObj.rowDropSettings.targetID) {\n            if ((0,_syncfusion_ej2_grids__WEBPACK_IMPORTED_MODULE_0__.parentsUntil)(args.target, 'e-content') || (this.dropPosition === 'Invalid' || !this.canDrop)) {\n                if (this.parent.element.querySelector('.e-errorelem') || !this.canDrop) {\n                    this.dropPosition = 'Invalid';\n                }\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.setValue)('dropPosition', this.dropPosition, args);\n                tObj.trigger(_base_constant__WEBPACK_IMPORTED_MODULE_3__.rowDrop, args);\n                if (!args.cancel) {\n                    if (!(0,_utils__WEBPACK_IMPORTED_MODULE_5__.isCountRequired)(this.parent) && (this.dropPosition === 'Invalid' && !this.canDrop)) {\n                        return;\n                    }\n                    if (!(0,_utils__WEBPACK_IMPORTED_MODULE_5__.isCountRequired)(this.parent)) {\n                        this.dropRows(args);\n                    }\n                    if (tObj.isLocalData) {\n                        tObj.flatData = this.orderToIndex(tObj.flatData);\n                    }\n                    tObj.grid.refresh();\n                    this.removeRowBorders();\n                }\n            }\n        }\n        else {\n            if (args.target && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.closest)(args.target, '#' + tObj.rowDropSettings.targetID) || (0,_syncfusion_ej2_grids__WEBPACK_IMPORTED_MODULE_0__.parentsUntil)(args.target, 'e-treegrid') &&\n                (0,_syncfusion_ej2_grids__WEBPACK_IMPORTED_MODULE_0__.parentsUntil)(args.target, 'e-treegrid').id === tObj.rowDropSettings.targetID || args.target && document.getElementById(tObj.rowDropSettings.targetID)) {\n                if (this.parent.element.querySelector('.e-errorelem') || !this.canDrop) {\n                    this.dropPosition = 'Invalid';\n                }\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.setValue)('dropPosition', this.dropPosition, args);\n                tObj.trigger(_base_constant__WEBPACK_IMPORTED_MODULE_3__.rowDrop, args);\n                if (!args.cancel && tObj.rowDropSettings.targetID) {\n                    if (this.dropPosition === 'Invalid' && !this.canDrop) {\n                        return;\n                    }\n                    this.dragDropGrid(args);\n                    if (tObj.isLocalData) {\n                        tObj.flatData = this.orderToIndex(tObj.flatData);\n                    }\n                }\n            }\n        }\n        this.removetopOrBottomBorder();\n        this.removeChildBorder();\n        this.removeRowBorders();\n        if (this.parent.enableImmutableMode && !this.parent.allowPaging && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(args.data[0][\"\" + parentItem])) {\n            var index = this.parent.treeColumnIndex;\n            index = index + 1;\n            var primaryKeyField = this.parent.getPrimaryKeyFieldNames()[0];\n            var rowIndex = this.parent.grid.getRowIndexByPrimaryKey(args.data[0][\"\" + primaryKeyField]);\n            var row = this.parent.getRows()[parseInt(rowIndex.toString(), 10)];\n            var data = args.data[0];\n            if (this.dropPosition === 'middleSegment') {\n                var record = [];\n                var rows = [];\n                record.push(data);\n                rows.push(row);\n                var parentUniqueID = 'parentUniqueID';\n                data = (0,_utils__WEBPACK_IMPORTED_MODULE_5__.getParentData)(this.parent, args.data[0][\"\" + parentUniqueID]);\n                rowIndex = this.parent.grid.getRowIndexByPrimaryKey(data[\"\" + primaryKeyField]);\n                var parentrow = this.parent.getRows()[parseInt(rowIndex.toString(), 10)];\n                record.push(data);\n                rows.push(parentrow);\n                for (var i = 0; i < record.length; i++) {\n                    this.parent.renderModule.cellRender({\n                        data: record[parseInt(i.toString(), 10)],\n                        cell: rows[parseInt(i.toString(), 10)].cells[parseInt(index.toString(), 10)],\n                        column: this.parent.grid.getColumns()[this.parent.treeColumnIndex],\n                        requestType: 'rowDragAndDrop'\n                    });\n                }\n                var targetEle = parentrow.getElementsByClassName('e-treegridcollapse')[0];\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(targetEle)) {\n                    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.removeClass)([targetEle], 'e-treegridcollapse');\n                    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.addClass)([targetEle], 'e-treegridexpand');\n                }\n            }\n            else {\n                this.parent.renderModule.cellRender({\n                    data: data, cell: row.cells[parseInt(index.toString(), 10)],\n                    column: this.parent.grid.getColumns()[this.parent.treeColumnIndex],\n                    requestType: 'rowDragAndDrop'\n                });\n            }\n        }\n    };\n    /**\n     * Removes the border elements for the first and last rows of the TreeGrid.\n     *\n     * @returns {void} This function does not return a value.\n     */\n    RowDD.prototype.removeRowBorders = function () {\n        var _this = this;\n        ['e-firstrow-border', 'e-lastrow-border'].forEach(function (className) {\n            var element = _this.parent.element.getElementsByClassName(className)[0];\n            if (element) {\n                element.remove();\n            }\n        });\n    };\n    /**\n     * Handles the drag-and-drop operation between TreeGrids, updating the source and target grids.\n     *\n     * @param {RowDropEventArgs} args - The arguments related to the row drop event, including target information and data being dropped.\n     * @returns {void} - This function does not return any value.\n     */\n    RowDD.prototype.dragDropGrid = function (args) {\n        var tObj = this.parent;\n        var targetRow = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.closest)(args.target, 'tr');\n        var targetIndex = isNaN(this.getTargetIdx(targetRow)) ? 0 : this.getTargetIdx(targetRow);\n        var dropElement = (0,_syncfusion_ej2_grids__WEBPACK_IMPORTED_MODULE_0__.parentsUntil)(args.target, 'e-treegrid');\n        var srcControl;\n        if (dropElement && dropElement.id === this.parent.rowDropSettings.targetID && !(0,_utils__WEBPACK_IMPORTED_MODULE_5__.isRemoteData)(this.parent)\n            && !(0,_utils__WEBPACK_IMPORTED_MODULE_5__.isCountRequired)(this.parent)) {\n            srcControl = dropElement.ej2_instances[0];\n            var records = tObj.getSelectedRecords();\n            var indexes = [];\n            for (var i = 0; i < records.length; i++) {\n                indexes[parseInt(i.toString(), 10)] = records[parseInt(i.toString(), 10)].index;\n            }\n            var data = srcControl.dataSource;\n            if (this.parent.idMapping !== null && ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(this.dropPosition) || this.dropPosition === 'bottomSegment' || this.dropPosition === 'Invalid') && !(data.length)) {\n                var actualData = [];\n                for (var i = 0; i < records.length; i++) {\n                    if (records[parseInt(i.toString(), 10)].hasChildRecords) {\n                        actualData.push(records[parseInt(i.toString(), 10)]);\n                        var child = (0,_utils__WEBPACK_IMPORTED_MODULE_5__.findChildrenRecords)(records[parseInt(i.toString(), 10)]);\n                        for (var i_1 = 0; i_1 < child.length; i_1++) {\n                            actualData.push(child[parseInt(i_1.toString(), 10)]); // push child records to drop the parent record along with its child records\n                        }\n                    }\n                }\n                if (actualData.length) {\n                    records = actualData;\n                }\n            }\n            tObj.notify(_base_constant__WEBPACK_IMPORTED_MODULE_3__.rowsRemove, { indexes: indexes, records: records });\n            srcControl.notify(_base_constant__WEBPACK_IMPORTED_MODULE_3__.rowsAdd, { toIndex: targetIndex, records: records });\n            var srcControlFlatData = srcControl.rowDragAndDropModule.treeGridData;\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(srcControlFlatData)) {\n                for (var i = 0; i < srcControlFlatData.length; i++) {\n                    srcControlFlatData[parseInt(i.toString(), 10)].index = i;\n                    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(srcControlFlatData[parseInt(i.toString(), 10)].parentItem)) {\n                        var actualIndex = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.getValue)('uniqueIDCollection.' + srcControlFlatData[parseInt(i.toString(), 10)].parentUniqueID + '.index', srcControl);\n                        srcControlFlatData[parseInt(i.toString(), 10)].parentItem.index = actualIndex;\n                    }\n                }\n            }\n            tObj.grid.refresh();\n            srcControl.grid.refresh();\n            if (srcControl.grid.dataSource.length > 1) {\n                srcControl.grid.refresh();\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(srcControl.getHeaderContent().querySelector('.e-firstrow-border'))) {\n                    srcControl.getHeaderContent().querySelector('.e-firstrow-border').remove();\n                }\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(srcControl.getContent().querySelector('.e-lastrow-border'))) {\n                    srcControl.getContent().querySelector('.e-lastrow-border').remove();\n                }\n            }\n        }\n        if ((0,_utils__WEBPACK_IMPORTED_MODULE_5__.isCountRequired)(this.parent)) {\n            srcControl = dropElement.ej2_instances[0];\n            tObj.grid.refresh();\n            srcControl.grid.refresh();\n        }\n    };\n    /**\n     * Retrieves the index of the target row based on its 'aria-rowindex' attribute.\n     *\n     * @param {Element} targetRow - The target row element from which to retrieve the index.\n     * @returns {number} - The index of the target row, or 0 if the targetRow is null or undefined.\n     */\n    RowDD.prototype.getTargetIdx = function (targetRow) {\n        return targetRow ? parseInt(targetRow.getAttribute('aria-rowindex'), 10) - 1 : 0;\n    };\n    /**\n     * Retrieves the parent data of a given record during a row drag-and-drop operation.\n     *\n     * @param {ITreeData} record - The record for which to retrieve the parent data.\n     * @param {Object[]} [data] - Optional data array containing additional information related to the drop operation.\n     * @returns {void} - This function does not return any value.\n     */\n    RowDD.prototype.getParentData = function (record, data) {\n        var parentItem = record.parentItem;\n        var selectedItemIndex = -1;\n        if (this.parent.enableVirtualization && this.parent.selectedRowIndex !== -1) {\n            selectedItemIndex = this.parent.getSelectedRows()[0].rowIndex;\n        }\n        else if (this.parent.selectedRowIndex !== -1) {\n            selectedItemIndex = this.parent.selectedRowIndex;\n        }\n        if (this.dropPosition === 'bottomSegment') {\n            var primaryKeyField = this.parent.getPrimaryKeyFieldNames()[0];\n            var rowIndex = selectedItemIndex === -1 ?\n                (this.parent.grid.getRowIndexByPrimaryKey(data[0][\"\" + primaryKeyField]))\n                : this.parent.getSelectedRowIndexes()[0];\n            var selectedRecord = this.parent.getCurrentViewRecords()[parseInt(rowIndex.toString(), 10)];\n            this.droppedRecord = (0,_utils__WEBPACK_IMPORTED_MODULE_5__.getParentData)(this.parent, selectedRecord.parentItem.uniqueID);\n        }\n        if (this.dropPosition === 'middleSegment') {\n            var level = this.parent.getCurrentViewRecords()[parseInt(selectedItemIndex.toString(), 10)].level;\n            if (level === parentItem.level) {\n                this.droppedRecord = (0,_utils__WEBPACK_IMPORTED_MODULE_5__.getParentData)(this.parent, parentItem.uniqueID);\n            }\n            else {\n                this.getParentData(parentItem);\n            }\n        }\n    };\n    /**\n     * Handles the row drop operation for the tree grid.\n     *\n     * @param {RowDropEventArgs} args - The event arguments containing details about the drop operation, including the target index and data.\n     * @param {boolean} [isByMethod=false] - Optional flag indicating if the drop operation is triggered by a method.\n     * @returns {void} - This function does not return any value.\n     */\n    RowDD.prototype.dropRows = function (args, isByMethod) {\n        if (this.dropPosition !== 'Invalid' && !(0,_utils__WEBPACK_IMPORTED_MODULE_5__.isRemoteData)(this.parent)) {\n            var tObj = this.parent;\n            var draggedRecord_2;\n            var droppedRecord = void 0;\n            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(args.dropIndex)) {\n                var primaryKeyField = this.parent.getPrimaryKeyFieldNames()[0];\n                var rowIndex = tObj.selectedRowIndex === -1 ?\n                    (this.parent.grid.getRowIndexByPrimaryKey(args.data[0][\"\" + primaryKeyField])) - 1\n                    : tObj.getSelectedRowIndexes()[0] - 1;\n                var record = tObj.getCurrentViewRecords()[parseInt(rowIndex.toString(), 10)];\n                this.getParentData(record, args.data);\n            }\n            else {\n                args.dropIndex = args.dropIndex === args.fromIndex ? this.getTargetIdx(args.target.parentElement) : args.dropIndex;\n                if (this.parent.enableVirtualization) {\n                    var index = this.parent.getRowByIndex(args.dropIndex).rowIndex;\n                    this.droppedRecord = tObj.getCurrentViewRecords()[parseInt(index.toString(), 10)];\n                }\n                else {\n                    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(this.parent.rowDropSettings.targetID)) {\n                        var rowsObject = this.parent.grid.getRowsObject();\n                        this.droppedRecord = rowsObject.length > 0 ? rowsObject[args.dropIndex].data : undefined;\n                    }\n                    else {\n                        this.droppedRecord = tObj.getCurrentViewRecords()[args.dropIndex];\n                    }\n                }\n            }\n            var dragRecords = [];\n            droppedRecord = this.droppedRecord;\n            if (!args.data[0]) {\n                dragRecords.push(args.data);\n            }\n            else {\n                dragRecords = args.data;\n            }\n            this.parent[this.modifiedRecords].push(args.data[0], droppedRecord);\n            var count = 0;\n            var multiplegrid = this.parent.rowDropSettings.targetID;\n            this.isMultipleGrid = multiplegrid;\n            if (!multiplegrid) {\n                this.ensuredropPosition(dragRecords, droppedRecord);\n            }\n            else {\n                this.isaddtoBottom = multiplegrid && this.isDraggedWithChild;\n            }\n            var dragLength = dragRecords.length;\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(this.parent.idMapping)) {\n                dragRecords.reverse();\n            }\n            var _loop_1 = function (i) {\n                draggedRecord_2 = dragRecords[parseInt(i.toString(), 10)];\n                this_1.draggedRecord = draggedRecord_2;\n                if (!this_1.draggedRecord.hasChildRecords) {\n                    for (var _i = 0, dragRecords_2 = dragRecords; _i < dragRecords_2.length; _i++) {\n                        var dragRecord = dragRecords_2[_i];\n                        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(dragRecord.childRecords) &&\n                            dragRecord.childRecords.indexOf(this_1.draggedRecord) !== -1) {\n                            this_1.draggedRecord = undefined;\n                        }\n                    }\n                }\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(this_1.draggedRecord)) {\n                    if (this_1.dropPosition !== 'Invalid' && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(this_1.droppedRecord)) {\n                        if (!tObj.rowDropSettings.targetID || isByMethod) {\n                            this_1.deleteDragRow();\n                        }\n                        if (this_1.draggedRecord === this_1.droppedRecord) {\n                            var correctIndex = this_1.getTargetIdx(args.target.offsetParent.parentElement);\n                            if (isNaN(correctIndex)) {\n                                correctIndex = this_1.getTargetIdx(args.target.parentElement);\n                            }\n                            args.dropIndex = correctIndex;\n                            droppedRecord = this_1.droppedRecord = this_1.parent.getCurrentViewRecords()[args.dropIndex];\n                        }\n                        if (droppedRecord.parentItem || this_1.dropPosition === 'middleSegment') {\n                            var parentRecords = tObj.parentData;\n                            var newParentIndex = parentRecords.indexOf(this_1.draggedRecord);\n                            if (newParentIndex !== -1) {\n                                parentRecords.splice(newParentIndex, 1);\n                            }\n                        }\n                        var recordIndex1 = this_1.treeGridData.indexOf(droppedRecord);\n                        this_1.dropAtTop(recordIndex1);\n                        if (this_1.dropPosition === 'bottomSegment') {\n                            if (!droppedRecord.hasChildRecords) {\n                                if (this_1.parent.parentIdMapping) {\n                                    this_1.treeData.splice(recordIndex1 + 1, 0, this_1.draggedRecord.taskData);\n                                }\n                                this_1.treeGridData.splice(recordIndex1 + 1, 0, this_1.draggedRecord);\n                            }\n                            else {\n                                count = this_1.getChildCount(droppedRecord, 0);\n                                if (this_1.parent.parentIdMapping) {\n                                    this_1.treeData.splice(recordIndex1 + count + 1, 0, this_1.draggedRecord.taskData);\n                                }\n                                this_1.treeGridData.splice(recordIndex1 + count + 1, 0, this_1.draggedRecord);\n                            }\n                            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(droppedRecord.parentItem)) {\n                                delete draggedRecord_2.parentItem;\n                                delete draggedRecord_2.parentUniqueID;\n                                draggedRecord_2.level = 0;\n                                if (this_1.parent.parentIdMapping) {\n                                    draggedRecord_2[this_1.parent.parentIdMapping] = null;\n                                }\n                            }\n                            if (droppedRecord.parentItem) {\n                                var rec = this_1.getChildrecordsByParentID(droppedRecord.parentUniqueID);\n                                var childRecords = rec[0].childRecords;\n                                var droppedRecordIndex = childRecords.indexOf(droppedRecord) + 1;\n                                childRecords.splice(droppedRecordIndex, 0, draggedRecord_2);\n                                draggedRecord_2.parentItem = droppedRecord.parentItem;\n                                draggedRecord_2.parentUniqueID = droppedRecord.parentUniqueID;\n                                draggedRecord_2.level = droppedRecord.level;\n                                if (this_1.parent.parentIdMapping) {\n                                    draggedRecord_2[this_1.parent.parentIdMapping] = droppedRecord[this_1.parent.parentIdMapping];\n                                    draggedRecord_2.parentItem = droppedRecord.parentItem;\n                                    draggedRecord_2.level = droppedRecord.level;\n                                }\n                            }\n                            if (draggedRecord_2.hasChildRecords) {\n                                var level = 1;\n                                this_1.updateChildRecordLevel(draggedRecord_2, level);\n                                this_1.updateChildRecord(draggedRecord_2, recordIndex1 + count + 1);\n                            }\n                        }\n                        this_1.dropMiddle(recordIndex1);\n                    }\n                    if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(draggedRecord_2.parentItem)) {\n                        var parentRecords = tObj.parentData;\n                        var newParentIndex = parentRecords.indexOf(this_1.droppedRecord);\n                        var nonRepeat_1 = 0;\n                        parentRecords.filter(function (e) {\n                            if (draggedRecord_2.uniqueID === e.uniqueID) {\n                                nonRepeat_1++;\n                            }\n                        });\n                        if (this_1.dropPosition === 'bottomSegment' && nonRepeat_1 === 0) {\n                            parentRecords.splice(newParentIndex + 1, 0, draggedRecord_2);\n                        }\n                        else if (this_1.dropPosition === 'topSegment' && nonRepeat_1 === 0) {\n                            parentRecords.splice(newParentIndex, 0, draggedRecord_2);\n                        }\n                    }\n                    tObj.rowDragAndDropModule.refreshGridDataSource();\n                }\n            };\n            var this_1 = this;\n            for (var i = 0; i < dragLength; i++) {\n                _loop_1(i);\n            }\n        }\n    };\n    /**\n     * Handles the logic for inserting a dragged record into the middle of a parent record's child records.\n     *\n     * @param {number} recordIndex - The index at which to insert the dragged record relative to the parent record's child records.\n     * @returns {void} - This function does not return any value.\n     */\n    RowDD.prototype.dropMiddle = function (recordIndex) {\n        var tObj = this.parent;\n        var childRecords = (0,_utils__WEBPACK_IMPORTED_MODULE_5__.findChildrenRecords)(this.droppedRecord);\n        var childRecordsLength = ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(childRecords) ||\n            childRecords.length === 0) ? recordIndex + 1 :\n            childRecords.length + recordIndex + 1;\n        if (this.dropPosition === 'middleSegment') {\n            if (tObj.parentIdMapping) {\n                this.treeData.splice(childRecordsLength, 0, this.draggedRecord.taskData);\n                this.treeGridData.splice(childRecordsLength, 0, this.draggedRecord);\n            }\n            else {\n                this.treeGridData.splice(childRecordsLength, 0, this.draggedRecord);\n            }\n            this.recordLevel();\n            if (this.draggedRecord.hasChildRecords) {\n                this.updateChildRecord(this.draggedRecord, childRecordsLength);\n            }\n        }\n    };\n    /**\n     * Handles the logic for inserting a dragged record at the top of a parent record's child records.\n     *\n     * @param {number} recordIndex1 - The index at which to insert the dragged record in the tree grid data.\n     * @returns {void} - This function does not return any value.\n     */\n    RowDD.prototype.dropAtTop = function (recordIndex1) {\n        var tObj = this.parent;\n        if (this.dropPosition === 'topSegment') {\n            if (tObj.parentIdMapping) {\n                this.treeData.splice(recordIndex1, 0, this.draggedRecord.taskData);\n            }\n            var targetRecord = this.treeGridData[parseInt(recordIndex1.toString(), 10)];\n            this.draggedRecord.parentItem = targetRecord.parentItem;\n            this.draggedRecord.parentUniqueID = targetRecord.parentUniqueID;\n            this.draggedRecord.level = targetRecord.level;\n            // Insert dragged record into the grid data\n            this.treeGridData.splice(parseInt(recordIndex1.toString(), 10), 0, this.draggedRecord);\n            if (this.draggedRecord.hasChildRecords) {\n                var level = 1;\n                this.updateChildRecord(this.draggedRecord, recordIndex1);\n                this.updateChildRecordLevel(this.draggedRecord, level);\n            }\n            if (this.droppedRecord.parentItem) {\n                var rec = this.getChildrecordsByParentID(this.droppedRecord.parentUniqueID);\n                var childRecords = rec[0].childRecords;\n                var droppedRecordIndex = childRecords.indexOf(this.droppedRecord);\n                // Insert the dragged record into the child records at the appropriate position\n                childRecords.splice(droppedRecordIndex, 0, this.draggedRecord);\n            }\n        }\n    };\n    /**\n     * Updates the level and hierarchy of the dragged record based on the drop position.\n     *\n     * @returns {void} - This function does not return any value.\n     */\n    RowDD.prototype.recordLevel = function () {\n        var tObj = this.parent;\n        var draggedRecord = this.draggedRecord;\n        var droppedRecord = this.droppedRecord;\n        var childItem = tObj.childMapping;\n        if (!droppedRecord.hasChildRecords) {\n            droppedRecord.hasChildRecords = true;\n            droppedRecord.hasFilteredChildRecords = true;\n            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(droppedRecord.childRecords) || droppedRecord.childRecords.length === 0) {\n                droppedRecord.childRecords = [];\n                if (!tObj.parentIdMapping && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(droppedRecord.taskData[\"\" + childItem])) {\n                    droppedRecord.taskData[\"\" + childItem] = [];\n                }\n            }\n        }\n        if (this.dropPosition === 'middleSegment') {\n            var parentItem = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.extend)({}, droppedRecord);\n            delete parentItem.childRecords;\n            draggedRecord.parentItem = parentItem;\n            draggedRecord.parentUniqueID = droppedRecord.uniqueID;\n            droppedRecord.childRecords.splice(droppedRecord.childRecords.length, 0, draggedRecord);\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.setValue)('uniqueIDCollection.' + draggedRecord.uniqueID, draggedRecord, tObj);\n            var isSelfReference = 'isSelfReference';\n            if (tObj[\"\" + isSelfReference]) {\n                droppedRecord[tObj.childMapping] = [];\n                droppedRecord[tObj.childMapping].splice(droppedRecord[tObj.childMapping].length, 0, draggedRecord);\n            }\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(draggedRecord) && !tObj.parentIdMapping && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(droppedRecord.taskData[\"\" + childItem])) {\n                droppedRecord.taskData[tObj.childMapping].splice(droppedRecord.childRecords.length, 0, draggedRecord.taskData);\n            }\n            if (!draggedRecord.hasChildRecords) {\n                draggedRecord.level = droppedRecord.level + 1;\n            }\n            else {\n                var level = 1;\n                draggedRecord.level = droppedRecord.level + 1;\n                this.updateChildRecordLevel(draggedRecord, level);\n            }\n            droppedRecord.expanded = true;\n        }\n    };\n    /**\n     * Deletes the currently dragged row from the TreeGrid.\n     *\n     * @returns {void} - This function does not return any value.\n     */\n    RowDD.prototype.deleteDragRow = function () {\n        if (this.parent.dataSource instanceof _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_2__.DataManager && (0,_utils__WEBPACK_IMPORTED_MODULE_5__.isOffline)(this.parent)) {\n            this.treeGridData = this.parent.grid.dataSource.dataSource.json;\n            this.treeData = this.parent.dataSource.dataSource.json;\n        }\n        else {\n            this.treeGridData = this.parent.grid.dataSource;\n            this.treeData = this.parent.dataSource;\n        }\n        var deletedRow = (0,_utils__WEBPACK_IMPORTED_MODULE_5__.getParentData)(this.parent, this.draggedRecord.uniqueID);\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(deletedRow.childRecords) && deletedRow.childRecords.length) {\n            deletedRow.hasChildRecords = true;\n        }\n        this.removeRecords(deletedRow);\n    };\n    /**\n     * Updates the child records of a specified parent record in the TreeGrid.\n     *\n     * @param {ITreeData} record - The parent record whose child records will be updated.\n     * @param {number} count - The initial count to keep track of record positioning.\n     * @returns {number} - The updated count after processing all child records.\n     */\n    RowDD.prototype.updateChildRecord = function (record, count) {\n        var currentRecord;\n        var tObj = this.parent;\n        var length = 0;\n        if (!record.hasChildRecords) {\n            return 0;\n        }\n        length = record.childRecords.length;\n        for (var i = 0; i < length; i++) {\n            if (!this.isMultipleGrid) {\n                currentRecord = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.getValue)('uniqueIDCollection.' + record.childRecords[parseInt(i.toString(), 10)].uniqueID, tObj);\n            }\n            else {\n                currentRecord = record.childRecords[parseInt(i.toString(), 10)];\n            }\n            count++;\n            tObj.flatData.splice(count, 0, currentRecord);\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.setValue)('uniqueIDCollection.' + currentRecord.uniqueID, currentRecord, this.parent);\n            if (tObj.parentIdMapping) {\n                this.treeData.splice(count, 0, currentRecord.taskData);\n            }\n            if (currentRecord.hasChildRecords) {\n                count = this.updateChildRecord(currentRecord, count);\n            }\n        }\n        return count;\n    };\n    /**\n     * Updates the level of child records for a specified parent record in the TreeGrid.\n     *\n     * @param {ITreeData} record - The parent record whose child records' levels will be updated.\n     * @param {number} level - The current level of the parent record.\n     * @returns {number} - The updated level after processing all child records.\n     */\n    RowDD.prototype.updateChildRecordLevel = function (record, level) {\n        var length = 0;\n        var currentRecord;\n        level++;\n        if (!record.hasChildRecords) {\n            return 0;\n        }\n        length = record.childRecords.length;\n        for (var i = 0; i < length; i++) {\n            if (!this.isMultipleGrid) {\n                currentRecord = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.getValue)('uniqueIDCollection.' + record.childRecords[parseInt(i.toString(), 10)].uniqueID, this.parent);\n            }\n            else {\n                currentRecord = record.childRecords[parseInt(i.toString(), 10)];\n            }\n            var parentData = void 0;\n            if (record.parentItem) {\n                parentData = (0,_utils__WEBPACK_IMPORTED_MODULE_5__.getParentData)(this.parent, record.parentItem.uniqueID);\n            }\n            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(parentData) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(record.parentItem)) {\n                parentData = record.parentItem;\n            }\n            currentRecord.level = record.parentItem ? parentData.level + level : record.level + 1;\n            if (currentRecord.hasChildRecords) {\n                level--;\n                level = this.updateChildRecordLevel(currentRecord, level);\n            }\n        }\n        return level;\n    };\n    /**\n     * Removes specified records from the TreeGrid data source.\n     *\n     * @param {ITreeData} record - The record to be removed, including any child records if applicable.\n     * @returns {void} - This method does not return a value.\n     */\n    RowDD.prototype.removeRecords = function (record) {\n        var tObj = this.parent;\n        var dataSource;\n        if (this.parent.dataSource instanceof _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_2__.DataManager && (0,_utils__WEBPACK_IMPORTED_MODULE_5__.isOffline)(this.parent)) {\n            dataSource = this.parent.dataSource.dataSource.json;\n        }\n        else {\n            dataSource = this.parent.dataSource;\n        }\n        var deletedRow = record;\n        var isSelfReference = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(tObj.parentIdMapping);\n        var flatParentData = this.getChildrecordsByParentID(deletedRow.parentUniqueID)[0];\n        if (deletedRow) {\n            if (deletedRow.parentItem) {\n                var childRecords = flatParentData ? flatParentData.childRecords : [];\n                var childIndex = 0;\n                if (childRecords && childRecords.length > 0) {\n                    childIndex = childRecords.indexOf(deletedRow);\n                    flatParentData.childRecords.splice(childIndex, 1);\n                    if (!this.parent.parentIdMapping || tObj.enableImmutableMode) {\n                        (0,_crud_actions__WEBPACK_IMPORTED_MODULE_4__.editAction)({ value: deletedRow, action: 'delete' }, this.parent, isSelfReference, deletedRow.index, deletedRow.index);\n                    }\n                }\n            }\n            if (tObj.parentIdMapping) {\n                if (deletedRow.hasChildRecords && deletedRow.childRecords.length > 0) {\n                    this.removeChildItem(deletedRow);\n                }\n                var idx = void 0;\n                var idz = void 0;\n                var treeGridData = dataSource;\n                for (var i = 0; i < treeGridData.length; i++) {\n                    if (treeGridData[parseInt(i.toString(), 10)][this.parent.idMapping] === deletedRow.taskData[this.parent.idMapping]) {\n                        idx = i;\n                    }\n                }\n                for (var i = 0; i < this.treeGridData.length; i++) {\n                    if (this.treeGridData[parseInt(i.toString(), 10)][this.parent.idMapping]\n                        === deletedRow.taskData[this.parent.idMapping]) {\n                        idz = i;\n                    }\n                }\n                if (idx !== -1 && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(idx)) {\n                    dataSource.splice(idx, 1);\n                }\n                if (idz !== -1 && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(idz)) {\n                    this.treeGridData.splice(idz, 1);\n                }\n            }\n            var recordIndex = this.treeGridData.indexOf(deletedRow);\n            if (!tObj.parentIdMapping) {\n                var parentIndex = this.parent.parentData.indexOf(deletedRow);\n                if (parentIndex !== -1) {\n                    tObj.parentData.splice(parentIndex, 1);\n                    dataSource.splice(parentIndex, 1);\n                }\n            }\n            if (recordIndex === -1 && !tObj.parentIdMapping) {\n                var primaryKeyField = tObj.getPrimaryKeyFieldNames()[0];\n                for (var j = 0; j < this.treeGridData.length; j++) {\n                    if (this.treeGridData[parseInt(j.toString(), 10)][\"\" + primaryKeyField] === deletedRow[\"\" + primaryKeyField]) {\n                        recordIndex = j;\n                    }\n                }\n            }\n            if (!tObj.parentIdMapping) {\n                var deletedRecordCount = this.getChildCount(deletedRow, 0);\n                this.treeGridData.splice(recordIndex, deletedRecordCount + 1);\n            }\n            if (deletedRow.parentItem && flatParentData && flatParentData.childRecords && !flatParentData.childRecords.length) {\n                flatParentData.expanded = false;\n                flatParentData.hasChildRecords = false;\n                flatParentData.hasFilteredChildRecords = false;\n            }\n            if (this.parent[this.modifiedRecords].indexOf(flatParentData) === -1 && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(flatParentData)) {\n                this.parent[this.modifiedRecords].push(flatParentData);\n            }\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(flatParentData)) {\n                this.updateModifiedRecords(flatParentData);\n            }\n        }\n    };\n    /**\n     * Updates the records in the TreeGrid data source that have been modified.\n     *\n     * @param {ITreeData} record - The record to update, along with its parent records if applicable.\n     * @returns {void} - This method does not return a value.\n     */\n    RowDD.prototype.updateModifiedRecords = function (record) {\n        var parentData = (0,_utils__WEBPACK_IMPORTED_MODULE_5__.getParentData)(this.parent, record.parentUniqueID);\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(parentData)) {\n            this.parent[this.modifiedRecords].push(parentData);\n            this.updateModifiedRecords(parentData);\n        }\n    };\n    /**\n     * Recursively removes child records from the specified record and updates the data source.\n     *\n     * @param {ITreeData} record - The parent record whose child records are to be removed.\n     * @returns {void} - This method does not return a value.\n     */\n    RowDD.prototype.removeChildItem = function (record) {\n        var currentRecord;\n        var idx;\n        var idz;\n        var dataSource;\n        if (this.parent.dataSource instanceof _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_2__.DataManager && (0,_utils__WEBPACK_IMPORTED_MODULE_5__.isOffline)(this.parent)) {\n            dataSource = this.parent.dataSource.dataSource.json;\n        }\n        else {\n            dataSource = this.parent.dataSource;\n        }\n        for (var i = 0; i < record.childRecords.length; i++) {\n            currentRecord = record.childRecords[parseInt(i.toString(), 10)];\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(currentRecord.childRecords) && currentRecord.childRecords.length) {\n                currentRecord.hasChildRecords = true;\n            }\n            var treeGridData = void 0;\n            if (this.parent.dataSource instanceof _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_2__.DataManager && (0,_utils__WEBPACK_IMPORTED_MODULE_5__.isOffline)(this.parent)) {\n                treeGridData = this.parent.dataSource.dataSource.json;\n            }\n            else {\n                treeGridData = this.parent.dataSource;\n            }\n            for (var i_2 = 0; i_2 < treeGridData.length; i_2++) {\n                if (treeGridData[parseInt(i_2.toString(), 10)][this.parent.idMapping] === currentRecord.taskData[this.parent.idMapping]) {\n                    idx = i_2;\n                }\n            }\n            for (var i_3 = 0; i_3 < this.treeGridData.length; i_3++) {\n                if (this.treeGridData[parseInt(i_3.toString(), 10)][this.parent.idMapping]\n                    === currentRecord.taskData[this.parent.idMapping]) {\n                    idz = i_3;\n                    break;\n                }\n            }\n            if (idx !== -1 && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(idx)) {\n                dataSource.splice(idx, 1);\n            }\n            if (idz !== -1 && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(idz)) {\n                this.treeGridData.splice(idz, 1);\n            }\n            if (currentRecord.hasChildRecords) {\n                this.removeChildItem(currentRecord);\n            }\n        }\n    };\n    /**\n     * Retrieves the count of child records associated with the specified parent record.\n     *\n     * @param {ITreeData} record - The parent record for which child count is to be calculated.\n     * @param {number} count - The initial count to start with, usually passed as 0.\n     * @returns {number} - The total count of child records.\n     */\n    RowDD.prototype.getChildCount = function (record, count) {\n        var currentRecord;\n        if (!record.hasChildRecords) {\n            return 0;\n        }\n        for (var i = 0; i < record.childRecords.length; i++) {\n            currentRecord = record.childRecords[parseInt(i.toString(), 10)];\n            count++;\n            if (currentRecord.hasChildRecords) {\n                count = this.getChildCount(currentRecord, count);\n            }\n        }\n        return count;\n    };\n    /**\n     * Ensures the validity of the drop position for the dragged records by verifying the hierarchy and position constraints.\n     * If the current record is found in the dragged records' children, sets the drop position to 'Invalid'.\n     *\n     * @param {ITreeData[]} draggedRecords - The array of dragged records being verified.\n     * @param {ITreeData} currentRecord - The current record to check against dragged records.\n     * @returns {void} - This function does not return a value.\n     */\n    RowDD.prototype.ensuredropPosition = function (draggedRecords, currentRecord) {\n        var _this = this;\n        draggedRecords.filter(function (e) {\n            if (e.hasChildRecords && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(e.childRecords)) {\n                var valid = e.childRecords.indexOf(currentRecord);\n                if (valid === -1) {\n                    _this.ensuredropPosition(e.childRecords, currentRecord);\n                }\n                else {\n                    _this.dropPosition = 'Invalid';\n                    _this.addErrorElem();\n                    _this.canDrop = false;\n                    if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(_this.parent.rowDropSettings.targetID)) {\n                        _this.removetopOrBottomBorder();\n                        _this.removeChildBorder();\n                    }\n                    return;\n                }\n            }\n        });\n    };\n    RowDD.prototype.isDuplicateData = function (currentData) {\n        var primaryKeys = this.parent.getPrimaryKeyFieldNames();\n        if (primaryKeys.length === 0) {\n            return false;\n        }\n        return this.parent.flatData.some(function (data) {\n            // eslint-disable-next-line\n            return primaryKeys.every(function (key) { return data[key] === currentData[key]; });\n        });\n    };\n    /**\n     * Cleans up resources, event listeners, and DOM elements when the TreeGrid component is destroyed.\n     *\n     * @returns {void}\n     */\n    RowDD.prototype.destroy = function () {\n        this.removeEventListener();\n    };\n    /**\n     * @hidden\n     * @returns {void}\n     */\n    RowDD.prototype.removeEventListener = function () {\n        if (this.parent.isDestroyed) {\n            return;\n        }\n        this.parent.off(_base_constant__WEBPACK_IMPORTED_MODULE_3__.rowdraging, this.Rowdraging);\n        this.parent.off(_base_constant__WEBPACK_IMPORTED_MODULE_3__.rowDropped, this.rowDropped);\n        this.parent.off(_base_constant__WEBPACK_IMPORTED_MODULE_3__.rowsAdd, this.rowsAdded);\n        this.parent.off(_base_constant__WEBPACK_IMPORTED_MODULE_3__.rowsRemove, this.rowsRemoved);\n    };\n    /**\n     * hidden\n     */\n    /**\n     * For internal use only - Get the module name.\n     *\n     * @private\n     * @returns {string} Returns RowDragAndDrop module name\n     */\n    RowDD.prototype.getModuleName = function () {\n        return 'rowDragAndDrop';\n    };\n    return RowDD;\n}());\n\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-treegrid/src/treegrid/actions/rowdragdrop.js?");

/***/ })

}]);