"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkej2_vue_samples"] = self["webpackChunkej2_vue_samples"] || []).push([["chunk-vendors-node_modules_syncfusion_ej2-gantt_src_gantt_base_date-processor_js-a5343089"],{

/***/ "./node_modules/@syncfusion/ej2-gantt/src/gantt/base/date-processor.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-gantt/src/gantt/base/date-processor.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DateProcessor: () => (/* binding */ DateProcessor)\n/* harmony export */ });\n/* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @syncfusion/ej2-base */ \"./node_modules/@syncfusion/ej2-base/index.js\");\n\n/**\n *  Date processor is used to handle date of task data.\n */\nvar DateProcessor = /** @class */ (function () {\n    function DateProcessor(parent) {\n        this.fromSegments = false;\n        this.mondayTimeRangeLength = 0;\n        this.tuesdayTimeRangeLength = 0;\n        this.wednesdayTimeRangeLength = 0;\n        this.thursdayTimeRangeLength = 0;\n        this.fridayTimeRangeLength = 0;\n        this.saturdayTimeRangeLength = 0;\n        this.sundayTimeRangeLength = 0;\n        this.parent = parent;\n    }\n    /**\n     * @param {ITaskData} ganttProp .\n     * @returns {boolean} .\n     */\n    DateProcessor.prototype.isValidateNonWorkDays = function (ganttProp) {\n        return (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(ganttProp) && ganttProp.isAutoSchedule &&\n            (!this.parent.includeWeekend || this.parent.totalHolidayDates.length > 0)) ||\n            ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(ganttProp) && (!this.parent.includeWeekend || this.parent.totalHolidayDates.length > 0));\n    };\n    /**\n     * Method to convert given date value as valid start date\n     *\n     * @param {Date} date .\n     * @param {ITaskData} ganttProp .\n     * @param {boolean} validateAsMilestone .\n     * @param {boolean} isLoad .\n     * @returns {Date} .\n     * @private\n     */\n    DateProcessor.prototype.checkStartDate = function (date, ganttProp, validateAsMilestone, isLoad) {\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(date)) {\n            return null;\n        }\n        var currentDay = new Date(date.getTime());\n        var dayStartTime = this.parent['getCurrentDayStartTime'](currentDay);\n        var dayEndTime = this.parent['getCurrentDayEndTime'](currentDay);\n        var cloneStartDate = new Date(date.getTime());\n        var hour = this.getSecondsInDecimal(cloneStartDate);\n        validateAsMilestone = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(validateAsMilestone) ? !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(ganttProp) ?\n            ganttProp.isMilestone : false : validateAsMilestone;\n        if (hour < dayStartTime && (!validateAsMilestone || isLoad)) {\n            this.setTime(dayStartTime, cloneStartDate);\n        }\n        else if (hour < dayStartTime && validateAsMilestone) {\n            this.setTime(dayStartTime, cloneStartDate);\n        }\n        else if ((hour === dayEndTime && (!ganttProp || !validateAsMilestone)) || hour > dayEndTime) {\n            cloneStartDate.setDate(cloneStartDate.getDate() + 1);\n            dayStartTime = this.parent['getCurrentDayStartTime'](cloneStartDate);\n            this.setTime(dayStartTime, cloneStartDate);\n        }\n        else if (hour > dayStartTime && hour < dayEndTime) {\n            var workingRange = this.parent.workingTimeRanges;\n            if (this.parent.weekWorkingTime.length > 0) {\n                workingRange = this.parent['getWorkingRange'](cloneStartDate);\n            }\n            for (var index = 0; index < workingRange.length; index++) {\n                var value = workingRange[index];\n                if (hour >= value.to && (workingRange[index + 1] &&\n                    hour < workingRange[index + 1].from)) {\n                    // milestone can fall at end any interval time\n                    if ((hour === value.to && (!ganttProp || !validateAsMilestone)) || hour !== value.to) {\n                        this.setTime(workingRange[index + 1].from, cloneStartDate);\n                    }\n                    break;\n                }\n            }\n        }\n        var tStartDate;\n        if (this.parent.autoCalculateDateScheduling && !(this.parent.isLoad && this.parent.treeGrid.loadChildOnDemand &&\n            this.parent.taskFields.hasChildMapping)) {\n            do {\n                tStartDate = new Date(cloneStartDate.getTime());\n                var holidayLength = this.parent.totalHolidayDates.length;\n                // check holidays and weekends\n                if (this.isValidateNonWorkDays(ganttProp)) {\n                    dayStartTime = this.parent['getCurrentDayStartTime'](tStartDate);\n                    if (ganttProp) {\n                        dayEndTime = this.parent['getCurrentDayEndTime'](ganttProp.endDate ? ganttProp.isAutoSchedule ? ganttProp.endDate : ganttProp.autoEndDate : tStartDate);\n                    }\n                    var startTime = (!validateAsMilestone || isLoad) ? dayStartTime : dayEndTime;\n                    if (!this.parent.includeWeekend) {\n                        var tempDate = new Date(cloneStartDate.getTime());\n                        cloneStartDate = this.getNextWorkingDay(cloneStartDate);\n                        startTime = this.parent['getCurrentDayStartTime'](cloneStartDate);\n                        if (tempDate.getTime() !== cloneStartDate.getTime() && !validateAsMilestone) {\n                            this.setTime(startTime, cloneStartDate);\n                        }\n                    }\n                    for (var count = 0; count < holidayLength; count++) {\n                        var holidayFrom = this.getDateFromFormat(new Date(this.parent.totalHolidayDates[count]));\n                        var holidayTo = new Date(holidayFrom.getTime());\n                        holidayFrom.setHours(0, 0, 0, 0);\n                        holidayTo.setHours(23, 59, 59, 59);\n                        if (cloneStartDate.getTime() >= holidayFrom.getTime() && cloneStartDate.getTime() < holidayTo.getTime()) {\n                            cloneStartDate.setDate(cloneStartDate.getDate() + 1);\n                            startTime = this.parent['getCurrentDayStartTime'](cloneStartDate);\n                            this.setTime(startTime, cloneStartDate);\n                        }\n                    }\n                }\n            } while (tStartDate.getTime() !== cloneStartDate.getTime());\n            return new Date(cloneStartDate.getTime());\n        }\n        else {\n            return new Date(cloneStartDate.getTime());\n        }\n    };\n    /**\n     * To update given date value to valid end date\n     *\n     * @param {Date} date .\n     * @param {ITaskData} ganttProp .\n     * @param {boolean} validateAsMilestone .\n     * @returns {Date} .\n     * @private\n     */\n    DateProcessor.prototype.checkEndDate = function (date, ganttProp, validateAsMilestone) {\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(date)) {\n            return null;\n        }\n        var dayStartTime;\n        var dayEndTime;\n        if (this.parent.weekWorkingTime.length > 0) {\n            var currentDay = date;\n            if (!this.parent.includeWeekend && ganttProp && ganttProp.isAutoSchedule || (this.parent.editModule\n                && this.parent.editModule.taskbarEditModule && this.parent.editModule.taskbarEditModule.taskBarEditRecord\n                && !this.parent.editModule.taskbarEditModule.taskBarEditRecord.ganttProperties.isAutoSchedule)) {\n                currentDay = this.getNextWorkingDay(date);\n            }\n            dayStartTime = this.parent['getStartTime'](currentDay);\n            dayEndTime = this.parent['getEndTime'](currentDay);\n        }\n        else {\n            dayStartTime = this.parent.defaultStartTime;\n            dayEndTime = this.parent.defaultEndTime;\n        }\n        var cloneEndDate = new Date(date.getTime());\n        var hour = this.getSecondsInDecimal(cloneEndDate);\n        if (hour > dayEndTime) {\n            this.setTime(dayEndTime, cloneEndDate);\n        }\n        else if (hour <= dayStartTime && !validateAsMilestone) {\n            var taskfields = this.parent.taskFields;\n            if (this.parent.editModule && this.parent.editModule['editedRecord'] && (!this.parent.editModule['editedRecord'][taskfields.startDate] && this.parent.editModule['editedRecord'][taskfields.endDate])) {\n                cloneEndDate.setDate(cloneEndDate.getDate());\n            }\n            else {\n                cloneEndDate.setDate(cloneEndDate.getDate() - 1);\n            }\n            dayEndTime = this.parent['getCurrentDayEndTime'](cloneEndDate);\n            this.setTime(dayEndTime, cloneEndDate);\n        }\n        else if (hour > dayStartTime && hour < dayEndTime) {\n            for (var index = 0; index < this.parent.workingTimeRanges.length; index++) {\n                var value = this.parent.workingTimeRanges[index];\n                if (hour > value.to && (this.parent.workingTimeRanges[index + 1] &&\n                    hour <= this.parent.workingTimeRanges[index + 1].from)) {\n                    this.setTime(this.parent.workingTimeRanges[index].to, cloneEndDate);\n                    break;\n                }\n            }\n        }\n        var tempCheckDate;\n        if (this.parent.autoCalculateDateScheduling && !(this.parent.isLoad && this.parent.treeGrid.loadChildOnDemand &&\n            this.parent.taskFields.hasChildMapping)) {\n            do {\n                tempCheckDate = new Date(cloneEndDate.getTime());\n                var holidayLength = this.parent.totalHolidayDates.length;\n                if (this.isValidateNonWorkDays(ganttProp)) {\n                    if (!this.parent.includeWeekend) {\n                        var tempDate = new Date(cloneEndDate.getTime());\n                        cloneEndDate = this.getPreviousWorkingDay(cloneEndDate);\n                        dayEndTime = this.parent['getCurrentDayEndTime'](cloneEndDate);\n                        if (tempDate.getTime() !== cloneEndDate.getTime()) {\n                            this.setTime(dayEndTime, cloneEndDate);\n                        }\n                    }\n                    for (var count = 0; count < holidayLength; count++) {\n                        var holidayFrom = this.getDateFromFormat(new Date(this.parent.totalHolidayDates[count]));\n                        var holidayTo = new Date(holidayFrom.getTime());\n                        var tempHoliday = new Date(cloneEndDate.getTime());\n                        tempHoliday.setMinutes(cloneEndDate.getMilliseconds() - 2);\n                        holidayFrom.setHours(0, 0, 0, 0);\n                        holidayTo.setHours(23, 59, 59, 59);\n                        if (cloneEndDate.getTime() >= holidayFrom.getTime() && cloneEndDate.getTime() < holidayTo.getTime() ||\n                            tempHoliday.getTime() >= holidayFrom.getTime() && tempHoliday.getTime() < holidayTo.getTime()) {\n                            cloneEndDate.setDate(cloneEndDate.getDate() - 1);\n                            dayEndTime = this.parent['getCurrentDayEndTime'](cloneEndDate);\n                            if (!(cloneEndDate.getTime() === holidayFrom.getTime() && dayEndTime === 86400 &&\n                                this.getSecondsInDecimal(cloneEndDate) === 0)) {\n                                this.setTime(dayEndTime, cloneEndDate);\n                            }\n                        }\n                    }\n                }\n            } while (tempCheckDate.getTime() !== cloneEndDate.getTime());\n            return new Date(cloneEndDate.getTime());\n        }\n        else {\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(cloneEndDate)) {\n                dayEndTime = this.parent['getCurrentDayEndTime'](date);\n                this.setTime(dayEndTime, cloneEndDate);\n            }\n            return new Date(cloneEndDate.getTime());\n        }\n    };\n    /**\n     * To validate the baseline start date\n     *\n     * @param {Date} date .\n     * @param {ITaskData} ganttProp .\n     * @returns {Date} .\n     * @private\n     */\n    DateProcessor.prototype.checkBaselineStartDate = function (date, ganttProp) {\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(date)) {\n            return null;\n        }\n        else {\n            var dayStartTime = this.parent['getCurrentDayStartTime'](date);\n            var dayEndTime = this.parent['getCurrentDayEndTime'](ganttProp ? ganttProp.endDate ? ganttProp.isAutoSchedule ? ganttProp.endDate : ganttProp.autoEndDate : date : date);\n            var cloneDate = new Date(date.getTime());\n            var hour = this.getSecondsInDecimal(cloneDate);\n            if (hour < dayStartTime) {\n                this.setTime(dayStartTime, cloneDate);\n            }\n            else if (hour > dayEndTime) {\n                cloneDate.setDate(cloneDate.getDate() + 1);\n                if (this.parent.weekWorkingTime.length > 0) {\n                    dayStartTime = this.parent['getStartTime'](cloneDate);\n                }\n                else {\n                    dayStartTime = this.parent.defaultStartTime;\n                }\n                this.setTime(dayStartTime, cloneDate);\n            }\n            else if (hour > dayStartTime && hour < dayEndTime) {\n                for (var i = 0; i < this.parent.workingTimeRanges.length; i++) {\n                    var value = this.parent.workingTimeRanges[i];\n                    if (hour > value.to && (this.parent.workingTimeRanges[i + 1] &&\n                        hour < this.parent.workingTimeRanges[i + 1].from)) {\n                        this.setTime(this.parent.workingTimeRanges[i + 1].from, cloneDate);\n                        break;\n                    }\n                }\n            }\n            return cloneDate;\n        }\n    };\n    /**\n     * To validate baseline end date\n     *\n     * @param {Date} date .\n     * @param {ITaskData} ganttProp .\n     * @returns {Date} .\n     * @private\n     */\n    DateProcessor.prototype.checkBaselineEndDate = function (date, ganttProp) {\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(date)) {\n            return null;\n        }\n        else {\n            var dayEndTime = this.parent['getCurrentDayEndTime'](date);\n            var dayStartTime = this.parent['getCurrentDayStartTime'](ganttProp ? ganttProp.startDate ? ganttProp.isAutoSchedule ? ganttProp.startDate : ganttProp.autoStartDate : date : date);\n            var cloneDate = new Date(date.getTime());\n            var hour = this.getSecondsInDecimal(cloneDate);\n            if (hour > dayEndTime) {\n                this.setTime(dayEndTime, cloneDate);\n            }\n            else if (hour < dayStartTime && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(ganttProp) && !ganttProp.isMilestone) {\n                cloneDate.setDate(cloneDate.getDate() - 1);\n                dayEndTime = this.parent['getCurrentDayEndTime'](cloneDate);\n                this.setTime(dayEndTime, cloneDate);\n            }\n            else if (hour > dayStartTime && hour < dayEndTime) {\n                for (var i = 0; i < this.parent.workingTimeRanges.length; i++) {\n                    var value = this.parent.workingTimeRanges[i];\n                    if (hour > value.to && (this.parent.workingTimeRanges[i + 1] && hour <= this.parent.workingTimeRanges[i + 1].from)) {\n                        this.setTime(this.parent.workingTimeRanges[i].to, cloneDate);\n                        break;\n                    }\n                }\n            }\n            if (ganttProp && ganttProp.baselineStartDate && cloneDate &&\n                ganttProp.baselineStartDate.getTime() > cloneDate.getTime()) {\n                cloneDate.setDate(cloneDate.getDate() + 1);\n            }\n            return cloneDate;\n        }\n    };\n    /**\n     * To calculate start date value from duration and end date\n     *\n     * @param {IGanttData} ganttData - Defines the gantt data.\n     * @returns {void} .\n     * @private\n     */\n    DateProcessor.prototype.calculateStartDate = function (ganttData) {\n        var ganttProp = ganttData.ganttProperties;\n        var tempStartDate = null;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(ganttProp.endDate) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(ganttProp.duration)) {\n            tempStartDate = this.getStartDate(ganttProp.endDate, ganttProp.duration, ganttProp.durationUnit, ganttProp);\n        }\n        this.parent.setRecordValue('startDate', tempStartDate, ganttProp, true);\n        if (this.parent.taskFields.startDate) {\n            this.parent.dataOperation.updateMappingData(ganttData, 'startDate');\n        }\n    };\n    /**\n     *\n     * @param {IGanttData} ganttData - Defines the gantt data.\n     * @returns {void} .\n     * @private\n     */\n    DateProcessor.prototype.calculateEndDate = function (ganttData) {\n        var ganttProp = ganttData.ganttProperties;\n        var tempEndDate = null;\n        var dayStartTime;\n        var dayEndTime;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(ganttProp.startDate)) {\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(ganttProp.endDate) && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(ganttProp.duration)) {\n                if (this.compareDates(ganttProp.startDate, ganttProp.endDate) === 1) {\n                    this.parent.setRecordValue('startDate', new Date(ganttProp.endDate.getTime()), ganttProp, true);\n                    dayStartTime = this.parent['getCurrentDayStartTime'](ganttProp.isAutoSchedule ? ganttProp.autoStartDate : ganttProp.startDate);\n                    dayEndTime = this.parent['getCurrentDayEndTime'](ganttProp.isAutoSchedule ? ganttProp.autoEndDate : ganttProp.endDate);\n                    this.setTime(dayStartTime, ganttProp.startDate);\n                }\n                this.calculateDuration(ganttData);\n            }\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(ganttProp.duration)) {\n                var duration = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(ganttProp.segments) && ganttProp.segments.length > 1 ?\n                    this.totalDuration(ganttProp.segments) : ganttProp.duration;\n                tempEndDate = this.getEndDate(ganttProp.startDate, duration, ganttProp.durationUnit, ganttProp, false);\n            }\n            this.parent.setRecordValue('endDate', tempEndDate, ganttProp, true);\n        }\n        else {\n            tempEndDate = ganttData[this.parent.taskFields.endDate];\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(tempEndDate)) {\n                dayEndTime = this.parent['getCurrentDayEndTime'](tempEndDate);\n                this.setTime(dayEndTime, tempEndDate);\n            }\n            this.parent.setRecordValue('endDate', tempEndDate, ganttProp, true);\n        }\n        if (this.parent.taskFields.endDate) {\n            this.parent.dataOperation.updateMappingData(ganttData, 'endDate');\n        }\n    };\n    DateProcessor.prototype.totalDuration = function (segments) {\n        var duration = 0;\n        for (var i = 0; i < segments.length; i++) {\n            duration += segments[i].duration + segments[i].offsetDuration;\n        }\n        return duration;\n    };\n    /**\n     * To calculate duration from start date and end date\n     *\n     * @param {IGanttData} ganttData - Defines the gantt data.\n     * @returns {void} .\n     */\n    DateProcessor.prototype.calculateDuration = function (ganttData) {\n        var ganttProperties = ganttData.ganttProperties;\n        var tDuration;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(ganttProperties.segments) && ganttProperties.segments.length > 0 &&\n            !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.parent.editModule.taskbarEditModule)) {\n            tDuration = this.parent.editModule.taskbarEditModule.sumOfDuration(ganttProperties.segments);\n        }\n        else {\n            if ((!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.parent.taskFields.milestone)) && (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(ganttProperties.startDate))\n                && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(ganttProperties.endDate) &&\n                (ganttProperties.startDate).getTime() === (ganttProperties.endDate).getTime()\n                && (ganttData.taskData[this.parent.taskFields.milestone] === false)) {\n                tDuration = 1;\n            }\n            else {\n                tDuration = this.getDuration(ganttProperties.startDate, ganttProperties.endDate, ganttProperties.durationUnit, ganttProperties.isAutoSchedule, ganttProperties.isMilestone);\n            }\n        }\n        this.parent.setRecordValue('duration', tDuration, ganttProperties, true);\n        var col = this.parent.columnByField[this.parent.columnMapping.duration];\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.parent.editModule) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.parent.editModule.cellEditModule) &&\n            !this.parent.editModule.cellEditModule.isCellEdit && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(col)) {\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(col.edit) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(col.edit.read)) {\n                var dialog = this.parent.editModule.dialogModule.dialog;\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(dialog)) {\n                    var textBox = dialog.querySelector('#' + this.parent.element.id + 'Duration')\n                        .ej2_instances[0];\n                    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(textBox) && textBox.value !== tDuration.toString()) {\n                        textBox.value = tDuration.toString();\n                        textBox.dataBind();\n                    }\n                }\n            }\n            if (this.parent.taskFields.duration) {\n                this.parent.dataOperation.updateMappingData(ganttData, 'duration');\n                if (this.parent.taskFields.durationUnit) {\n                    this.parent.dataOperation.updateMappingData(ganttData, 'durationUnit');\n                }\n            }\n        }\n    };\n    /**\n     *\n     * @param {Date} sDate Method to get total nonworking time between two date values\n     * @param {Date} eDate .\n     * @param {boolean} isAutoSchedule .\n     * @param {boolean} isCheckTimeZone .\n     * @returns {number} .\n     */\n    DateProcessor.prototype.getNonworkingTime = function (sDate, eDate, isAutoSchedule, isCheckTimeZone) {\n        isCheckTimeZone = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(isCheckTimeZone) ? true : isCheckTimeZone;\n        var weekendCount = (!this.parent.includeWeekend && this.parent.autoCalculateDateScheduling && !(this.parent.isLoad &&\n            this.parent.treeGrid.loadChildOnDemand && this.parent.taskFields.hasChildMapping)) && isAutoSchedule ?\n            this.getWeekendCount(sDate, eDate) : 0;\n        var totalHours = this.getNumberOfSeconds(sDate, eDate, isCheckTimeZone);\n        var holidaysCount = (isAutoSchedule && this.parent.autoCalculateDateScheduling &&\n            !(this.parent.isLoad && this.parent.treeGrid.loadChildOnDemand && this.parent.taskFields.hasChildMapping)) ? this.getHolidaysCount(sDate, eDate) : 0;\n        var totWorkDays = (totalHours - (weekendCount * 86400) - (holidaysCount * 86400)) / 86400; // working days between two dates\n        var nonWorkHours = this.getNonWorkingSecondsOnDate(sDate, eDate, isAutoSchedule);\n        var totalNonWorkTime = (this.parent.weekWorkingTime.length > 0 ?\n            this.nonWorkingSeconds(sDate, eDate, isAutoSchedule, totWorkDays) : (totWorkDays * (86400 - this.parent.secondsPerDay))) +\n            (weekendCount * 86400) + (holidaysCount * 86400) + nonWorkHours;\n        return totalNonWorkTime;\n    };\n    DateProcessor.prototype.nonWorkingSeconds = function (sDate, eDate, isAutoSchedule, workDays, fromDuration) {\n        var newStartDate = sDate.getTime() > eDate.getTime() ? new Date(eDate.getTime()) : new Date(sDate.getTime());\n        var newEndDate = sDate.getTime() > eDate.getTime() ? new Date(sDate.getTime()) : new Date(eDate.getTime());\n        var timeDiff = 0;\n        var count = 0;\n        if (fromDuration) {\n            var dayStartTime = this.parent['getCurrentDayStartTime'](newStartDate);\n            var dayEndTime = this.parent['getCurrentDayEndTime'](newStartDate);\n            if (!(newStartDate.getHours() < dayEndTime / 3600 && newStartDate.getHours() >= dayStartTime / 3600)) {\n                newStartDate.setDate(newStartDate.getDate() + 1);\n            }\n        }\n        else {\n            newStartDate.setDate(newStartDate.getDate() + 1);\n            newStartDate.setHours(0, 0, 0, 0);\n            newEndDate.setHours(0, 0, 0, 0);\n        }\n        if (workDays > 0 || (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(workDays)) {\n            while ((fromDuration && newStartDate.getTime() <= newEndDate.getTime())\n                || (!fromDuration && newStartDate.getTime() < newEndDate.getTime())) {\n                if (isAutoSchedule) {\n                    if (this.isOnHolidayOrWeekEnd(newStartDate, true)) {\n                        do {\n                            newStartDate.setDate(newStartDate.getDate() + 1);\n                        } while (this.isOnHolidayOrWeekEnd(newStartDate, true));\n                    }\n                    if (!this.parent.includeWeekend) {\n                        this.getNextWorkingDay(newStartDate);\n                    }\n                }\n                if (newStartDate.getTime() <= newEndDate.getTime()) {\n                    count++;\n                    var currentDaySeconds = this.parent['getSecondsPerDay'](newStartDate);\n                    if (fromDuration) {\n                        timeDiff += currentDaySeconds;\n                    }\n                    else {\n                        timeDiff += 86400 - currentDaySeconds;\n                    }\n                    newStartDate.setDate(newStartDate.getDate() + 1);\n                    if (isAutoSchedule) {\n                        if (this.isOnHolidayOrWeekEnd(newStartDate, true)) {\n                            do {\n                                newStartDate.setDate(newStartDate.getDate() + 1);\n                            } while (this.isOnHolidayOrWeekEnd(newStartDate, true));\n                        }\n                        if (!this.parent.includeWeekend) {\n                            this.getNextWorkingDay(newStartDate);\n                        }\n                    }\n                }\n            }\n        }\n        else {\n            return 0;\n        }\n        if (fromDuration) {\n            if (timeDiff > 0) {\n                timeDiff = timeDiff / count;\n            }\n            else {\n                timeDiff = this.parent.secondsPerDay;\n            }\n        }\n        return timeDiff;\n    };\n    /**\n     *\n     * @param {Date} startDate .\n     * @param {Date} endDate .\n     * @param {string} durationUnit .\n     * @param {boolean} isAutoSchedule .\n     * @param {boolean} isMilestone .\n     * @param {boolean} isCheckTimeZone .\n     * @returns {number} .\n     * @private\n     */\n    DateProcessor.prototype.getDuration = function (startDate, endDate, durationUnit, isAutoSchedule, isMilestone, isCheckTimeZone) {\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(startDate) || (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(endDate)) {\n            return null;\n        }\n        isCheckTimeZone = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(isCheckTimeZone) ? true : isCheckTimeZone;\n        var durationValue = 0;\n        var timeDiff = this.getTimeDifference(startDate, endDate, isCheckTimeZone) / 1000;\n        var nonWorkHours = this.getNonworkingTime(startDate, endDate, isAutoSchedule, isCheckTimeZone);\n        var durationHours = timeDiff - nonWorkHours;\n        var totSeconds;\n        if (this.parent.weekWorkingTime.length > 0) {\n            totSeconds = this.nonWorkingSeconds(startDate, endDate, isAutoSchedule, undefined, true);\n        }\n        else {\n            totSeconds = this.parent.secondsPerDay;\n        }\n        if (isMilestone && this.parent.getFormatedDate(startDate) === this.parent.getFormatedDate(endDate)) {\n            durationValue = 0;\n        }\n        else {\n            if (!durationUnit || durationUnit === 'day') {\n                durationValue = durationHours / totSeconds;\n            }\n            else if (durationUnit === 'minute') {\n                durationValue = durationHours / 60;\n            }\n            else {\n                durationValue = durationHours / 3600;\n            }\n        }\n        return parseFloat(durationValue.toString());\n    };\n    /**\n     *\n     * @param {number} duration .\n     * @param {string} durationUnit .\n     * @param {Date} date .\n     *  @returns {number} .\n     */\n    DateProcessor.prototype.getDurationAsSeconds = function (duration, durationUnit, date) {\n        var value = 0;\n        var totSeconds;\n        if (this.parent.weekWorkingTime.length > 0) {\n            totSeconds = this.parent['getSecondsPerDay'](date);\n        }\n        else {\n            totSeconds = this.parent.secondsPerDay;\n        }\n        if (!durationUnit || durationUnit.toLocaleLowerCase() === 'day') {\n            value = totSeconds * duration;\n        }\n        else if (durationUnit.toLocaleLowerCase() === 'hour') {\n            value = duration * 3600;\n        }\n        else {\n            value = duration * 60;\n        }\n        return value;\n    };\n    /**\n     * To get date from start date and duration\n     *\n     * @param {Date} startDate .\n     * @param {number} duration .\n     * @param {string} durationUnit .\n     * @param {ITaskData} ganttProp .\n     * @param {boolean} validateAsMilestone .\n     * @returns {Date} .\n     * @private\n     */\n    DateProcessor.prototype.getEndDate = function (startDate, duration, durationUnit, ganttProp, validateAsMilestone) {\n        var tempStart = new Date(startDate.getTime());\n        var endDate = new Date(startDate.getTime());\n        var sDate = new Date(startDate.getTime());\n        var secondDuration;\n        if (this.parent.weekWorkingTime.length > 0 && (!durationUnit || durationUnit.toLocaleLowerCase() === 'day')) {\n            secondDuration = this.calculateSecondDuration(duration, sDate, secondDuration, startDate, true);\n        }\n        else {\n            secondDuration = this.getDurationAsSeconds(duration, durationUnit, startDate);\n        }\n        var nonWork = 0;\n        var workHours = 0;\n        while (secondDuration > 0) {\n            endDate.setSeconds(endDate.getSeconds() + secondDuration);\n            nonWork = this.getNonworkingTime(tempStart, endDate, ganttProp.isAutoSchedule, true);\n            workHours = secondDuration - nonWork;\n            secondDuration = secondDuration - workHours;\n            if (secondDuration > 0) {\n                endDate = this.checkStartDate(endDate, ganttProp, validateAsMilestone);\n            }\n            tempStart = new Date(endDate.getTime());\n        }\n        return endDate;\n    };\n    /**\n     * Calculate start date based on end date and duration.\n     *\n     * @param {Date} endDate - To calculate start date value from end date and duration.\n     * @param {number} duration - The duration value.\n     * @param {string} durationUnit - The unit of duration.\n     * @param {ITaskData} ganttProp - The Gantt task properties.\n     * @param {boolean} fromValidation - A flag indicating if the calculation is from validation.\n     * @returns {Date} The calculated start date.\n     * @private\n     */\n    DateProcessor.prototype.getStartDate = function (endDate, duration, durationUnit, ganttProp, fromValidation) {\n        var tempEnd = new Date(endDate.getTime());\n        var startDate = new Date(endDate.getTime());\n        var secondDuration;\n        var eDate = new Date(tempEnd.getTime());\n        if (this.parent.weekWorkingTime.length > 0) {\n            secondDuration = this.calculateSecondDuration(duration, eDate, secondDuration, tempEnd, false);\n        }\n        else {\n            secondDuration = this.getDurationAsSeconds(duration, durationUnit, tempEnd);\n        }\n        var nonWork = 0;\n        var workHours = 0;\n        while (secondDuration > 0) {\n            startDate.setSeconds(startDate.getSeconds() - secondDuration);\n            nonWork = this.getNonworkingTime(startDate, tempEnd, ganttProp.isAutoSchedule, true);\n            workHours = secondDuration - nonWork;\n            secondDuration = secondDuration - workHours;\n            if (secondDuration > 0) {\n                tempEnd = this.checkEndDate(startDate, ganttProp);\n            }\n            tempEnd = new Date(startDate.getTime());\n        }\n        /* To render the milestone in proper date while loading */\n        if (fromValidation && ganttProp.isMilestone) {\n            startDate.setDate(startDate.getDate() - 1);\n            var dayEndTime = this.parent['getCurrentDayEndTime'](ganttProp.endDate ? ganttProp.isAutoSchedule ? ganttProp.endDate : ganttProp.autoEndDate : startDate);\n            this.parent.dateValidationModule.setTime(dayEndTime, startDate);\n            startDate = this.parent.dateValidationModule.checkStartDate(startDate, ganttProp, true);\n        }\n        return startDate;\n    };\n    DateProcessor.prototype.calculateSecondDuration = function (duration, sDate, secondDuration, startDate, fromEndDate) {\n        if (duration < 1) {\n            secondDuration = this.parent['getSecondsPerDay'](sDate) * duration;\n        }\n        else {\n            secondDuration = 0;\n            var durationValue = duration;\n            var dayStartTime = this.parent['getCurrentDayStartTime'](sDate);\n            var dayEndTime = this.parent['getCurrentDayEndTime'](sDate);\n            if (!(sDate.getHours() < dayEndTime / 3600 && sDate.getHours() > dayStartTime / 3600) && this.fromSegments) {\n                if (fromEndDate) {\n                    sDate.setDate(sDate.getDate() + 1);\n                }\n                else {\n                    sDate.setDate(sDate.getDate() - 1);\n                }\n            }\n            while (durationValue > 0) {\n                if (this.isOnHolidayOrWeekEnd(sDate, true)) {\n                    do {\n                        if (fromEndDate) {\n                            sDate.setDate(sDate.getDate() + 1);\n                        }\n                        else {\n                            sDate.setDate(sDate.getDate() - 1);\n                        }\n                    } while (this.isOnHolidayOrWeekEnd(sDate, true));\n                }\n                if (!this.parent.includeWeekend) {\n                    sDate = fromEndDate ? this.getNextWorkingDay(sDate) : this.getPreviousWorkingDay(sDate);\n                }\n                var totSeconds = this.parent['getSecondsPerDay'](sDate);\n                var num = 0;\n                if (this.getSecondsInDecimal(startDate) !== this.parent['getStartTime'](startDate) && !Number.isInteger(durationValue)) {\n                    var deciNumber = duration.toString().split('.');\n                    num = parseFloat('.' + deciNumber[1]);\n                    totSeconds = totSeconds * num;\n                    durationValue = durationValue - num;\n                }\n                if (durationValue < 1) {\n                    totSeconds = totSeconds * durationValue;\n                }\n                secondDuration = secondDuration + totSeconds;\n                if (fromEndDate) {\n                    sDate.setDate(sDate.getDate() + 1);\n                }\n                else {\n                    sDate.setDate(sDate.getDate() - 1);\n                }\n                if (!num) {\n                    durationValue--;\n                }\n            }\n        }\n        return secondDuration;\n    };\n    /**\n     * @param {ITaskData} ganttProp .\n     * @param {boolean} isLoad .\n     * @returns {Date} .\n     * @private\n     */\n    DateProcessor.prototype.getProjectStartDate = function (ganttProp, isLoad) {\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.parent.cloneProjectStartDate)) {\n            if (typeof this.parent.cloneProjectStartDate === 'string') {\n                this.parent.cloneProjectStartDate = this.getDateFromFormat(this.parent.cloneProjectStartDate);\n            }\n            var cloneStartDate = this.checkStartDate(this.parent.cloneProjectStartDate);\n            this.parent.cloneProjectStartDate = cloneStartDate;\n            return new Date(cloneStartDate.getTime());\n        }\n        else if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.parent.projectStartDate)) {\n            var cloneStartDate = this.getDateFromFormat(this.parent.projectStartDate);\n            this.parent.cloneProjectStartDate = this.checkStartDate(cloneStartDate);\n        }\n        else if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(isLoad)) {\n            var flatData = this.parent.flatData;\n            var minStartDate = void 0;\n            if (flatData.length > 0) {\n                minStartDate = flatData[0].ganttProperties.startDate;\n            }\n            else {\n                minStartDate = new Date();\n                minStartDate.setHours(0, 0, 0, 0);\n            }\n            for (var index = 1; index < flatData.length; index++) {\n                var startDate = flatData[index].ganttProperties.startDate;\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(startDate) && this.compareDates(startDate, minStartDate) === -1) {\n                    minStartDate = startDate;\n                }\n            }\n            this.parent.cloneProjectStartDate = this.checkStartDate(minStartDate, ganttProp);\n        }\n        else {\n            return null;\n        }\n        return new Date(this.parent.cloneProjectStartDate.getTime());\n    };\n    /**\n     * @param {ITaskData} ganttProp .\n     * @param {boolean} isAuto .\n     * @returns {Date} .\n     * @private\n     */\n    DateProcessor.prototype.getValidStartDate = function (ganttProp, isAuto) {\n        var sDate = null;\n        var startDate = isAuto ? ganttProp.autoStartDate : ganttProp.startDate;\n        var endDate = isAuto ? ganttProp.autoEndDate : ganttProp.endDate;\n        var duration = !ganttProp.isAutoSchedule && ganttProp.autoDuration ? ganttProp.autoDuration : ganttProp.duration;\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(startDate)) {\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(endDate)) {\n                sDate = new Date(endDate.getTime());\n                var dayStartTime = this.parent['getCurrentDayStartTime'](sDate);\n                this.setTime(dayStartTime, sDate);\n            }\n            else if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(duration)) {\n                var ganttTask = this.parent.getTaskByUniqueID(ganttProp.uniqueID);\n                if (this.parent.allowUnscheduledTasks && ganttTask &&\n                    ganttTask.parentItem && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(startDate) && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(endDate)) {\n                    var parentTask = this.parent.getParentTask(ganttTask.parentItem);\n                    while (parentTask && !parentTask.ganttProperties.startDate) {\n                        parentTask = this.parent.getParentTask(parentTask.parentItem);\n                    }\n                    sDate = (!parentTask || !parentTask.ganttProperties.startDate) ? this.parent.cloneProjectStartDate\n                        : parentTask.ganttProperties.startDate;\n                }\n                else {\n                    sDate = this.getProjectStartDate(ganttProp);\n                }\n            }\n        }\n        else {\n            sDate = new Date(startDate.getTime());\n        }\n        return sDate;\n    };\n    /**\n     *\n     * @param {ITaskData} ganttProp .\n     * @param {boolean} isAuto .\n     * @returns {Date} .\n     * @private\n     */\n    DateProcessor.prototype.getValidEndDate = function (ganttProp, isAuto) {\n        var eDate = null;\n        var startDate = isAuto ? ganttProp.autoStartDate : ganttProp.startDate;\n        var endDate = isAuto ? ganttProp.autoEndDate : ganttProp.endDate;\n        var duration = isAuto ? ganttProp.autoDuration : ganttProp.duration;\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(endDate)) {\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(startDate)) {\n                if (ganttProp.isMilestone) {\n                    eDate = this.checkStartDate(startDate);\n                }\n                else {\n                    eDate = new Date(startDate.getTime());\n                    var dayEndTime = this.parent['getCurrentDayEndTime'](endDate ? endDate : eDate);\n                    this.setTime(dayEndTime, eDate);\n                }\n            }\n            else if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(duration)) {\n                var sDate = this.getValidStartDate(ganttProp);\n                if (sDate) {\n                    eDate = this.getEndDate(sDate, duration, ganttProp.durationUnit, ganttProp, false);\n                }\n            }\n        }\n        else {\n            eDate = new Date(endDate.getTime());\n        }\n        return eDate;\n    };\n    DateProcessor.prototype.getWorkingTime = function (day, currentRange, startDate, totalSeconds, count, nonWorkingHours, workingTimeRanges, nonWorkingTimeRanges) {\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(currentRange.from) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(currentRange.to)) {\n            startDate.setHours(0, 0, 0, 0);\n            var tempDate = new Date(startDate.getTime());\n            startDate.setTime(startDate.getTime() + (currentRange.from * 3600000));\n            var startHour = new Date(startDate.getTime());\n            if (currentRange.to === 24) {\n                var currentRangeTo = 24 * 60 * 60 * 1000;\n                tempDate.setTime(tempDate.getTime() + (currentRangeTo));\n            }\n            else {\n                tempDate.setTime(tempDate.getTime() + (currentRange.to * 3600000));\n            }\n            var endHour = new Date(tempDate.getTime());\n            var timeDiff = endHour.getTime() - startHour.getTime();\n            var sdSeconds = this.getSecondsInDecimal(startHour);\n            var edSeconds = this.getSecondsInDecimal(endHour);\n            if (edSeconds === 0) {\n                edSeconds = 86400;\n            }\n            totalSeconds += timeDiff / 1000;\n            if (count === 0) {\n                this.parent.defaultStartTime = sdSeconds;\n                if (this.parent.weekWorkingTime.length > 0) {\n                    this.assignStartTime(day, sdSeconds);\n                }\n            }\n            if (count === this[day.toLowerCase() + 'TimeRangeLength'] - 1 || day === '') {\n                this.parent.defaultEndTime = edSeconds;\n                if (this.parent.weekWorkingTime.length > 0) {\n                    this.assignEndTime(day, edSeconds);\n                }\n            }\n            if (count > 0) {\n                if (day === '') {\n                    nonWorkingHours.push(nonWorkingHours[nonWorkingHours.length - 1] +\n                        sdSeconds - workingTimeRanges[count - 1].to);\n                    if (workingTimeRanges[count - 1].to < sdSeconds) {\n                        nonWorkingTimeRanges.push({\n                            from: workingTimeRanges[count - 1].to, to: sdSeconds, isWorking: false,\n                            interval: (sdSeconds - workingTimeRanges[count - 1].to)\n                        });\n                    }\n                }\n                else {\n                    this.parent[day.toLowerCase() + 'NonWorkingHours'].push(this.parent[day.toLowerCase() + 'NonWorkingHours'][this.parent[day.toLowerCase() + 'NonWorkingHours'].length - 1] +\n                        sdSeconds - this.parent[day.toLowerCase() + 'NonWorkingTimeRanges'][count - 1].to);\n                    if (this.parent[day.toLowerCase() + 'WorkingTimeRanges'][count - 1].to < sdSeconds) {\n                        this.parent[day.toLowerCase() + 'NonWorkingTimeRanges'].push({\n                            from: this.parent[day.toLowerCase() + 'WorkingTimeRanges'][count - 1].to, to: sdSeconds, isWorking: false,\n                            interval: (sdSeconds - this.parent[day.toLowerCase() + 'WorkingTimeRanges'][count - 1].to)\n                        });\n                    }\n                }\n            }\n            else {\n                if (day === '') {\n                    nonWorkingHours.push(0);\n                    nonWorkingTimeRanges.push({ from: 0, to: sdSeconds, isWorking: false, interval: sdSeconds });\n                }\n                else {\n                    this.parent[day.toLowerCase() + 'NonWorkingHours'].push(0);\n                    this.parent[day.toLowerCase() + 'NonWorkingTimeRanges'].push({ from: 0, to: sdSeconds, isWorking: false, interval: sdSeconds });\n                }\n            }\n            if (day === '') {\n                workingTimeRanges.push({ from: sdSeconds, to: edSeconds });\n                nonWorkingTimeRanges.push({\n                    from: sdSeconds, to: edSeconds, isWorking: true, interval: (edSeconds - sdSeconds)\n                });\n            }\n            else {\n                this.parent[day.toLowerCase() + 'WorkingTimeRanges'].push({ from: sdSeconds, to: edSeconds });\n                this.parent[day.toLowerCase() + 'NonWorkingTimeRanges'].push({\n                    from: sdSeconds, to: edSeconds, isWorking: true, interval: (edSeconds - sdSeconds)\n                });\n            }\n        }\n        return totalSeconds;\n    };\n    DateProcessor.prototype.assignStartTime = function (day, sdSeconds) {\n        switch (day) {\n            case 'Monday':\n                this.parent.mondayDefaultStartTime = sdSeconds;\n                break;\n            case 'Tuesday':\n                this.parent.tuesdayDefaultStartTime = sdSeconds;\n                break;\n            case 'Wednesday':\n                this.parent.wednesdayDefaultStartTime = sdSeconds;\n                break;\n            case 'Thursday':\n                this.parent.thursdayDefaultStartTime = sdSeconds;\n                break;\n            case 'Friday':\n                this.parent.fridayDefaultStartTime = sdSeconds;\n                break;\n            case 'Saturday':\n                this.parent.saturdayDefaultStartTime = sdSeconds;\n                break;\n            case 'Sunday':\n                this.parent.sundayDefaultStartTime = sdSeconds;\n                break;\n            default:\n                break;\n        }\n    };\n    DateProcessor.prototype.assignEndTime = function (day, edSeconds) {\n        switch (day) {\n            case 'Monday':\n                this.parent.mondayDefaultEndTime = edSeconds;\n                break;\n            case 'Tuesday':\n                this.parent.tuesdayDefaultEndTime = edSeconds;\n                break;\n            case 'Wednesday':\n                this.parent.wednesdayDefaultEndTime = edSeconds;\n                break;\n            case 'Thursday':\n                this.parent.thursdayDefaultEndTime = edSeconds;\n                break;\n            case 'Friday':\n                this.parent.fridayDefaultEndTime = edSeconds;\n                break;\n            case 'Saturday':\n                this.parent.saturdayDefaultEndTime = edSeconds;\n                break;\n            case 'Sunday':\n                this.parent.sundayDefaultEndTime = edSeconds;\n                break;\n            default:\n                break;\n        }\n    };\n    DateProcessor.prototype.calculateWeekWorkTime = function (day, currentDay, startDate, totalSeconds, nonWorkingHours, workingTimeRanges, nonWorkingTimeRanges) {\n        var seconds = 0;\n        for (var j = 0; j < currentDay.length; j++) {\n            var currentRange = currentDay[j];\n            seconds = seconds + this.getWorkingTime(day, currentRange, startDate, totalSeconds, j, nonWorkingHours, workingTimeRanges, nonWorkingTimeRanges);\n        }\n        if (this.parent[day.toLowerCase() + 'DefaultStartTime'] / 3600 !== 24) {\n            this.parent[day.toLowerCase() + 'NonWorkingTimeRanges'].push({\n                from: this.parent[day.toLowerCase() + 'DefaultEndTime'], to: 86400,\n                isWorking: false, interval: 86400 - this.parent[day.toLowerCase() + 'DefaultEndTime']\n            });\n        }\n        return seconds;\n    };\n    /**\n     * @returns {number} .\n     * @private\n     */\n    DateProcessor.prototype.getSecondsPerDay = function () {\n        var totalSeconds = 0;\n        var startDate = new Date('10/11/2018');\n        this.parent.nonWorkingHours = [];\n        var nonWorkingHours = this.parent.nonWorkingHours;\n        this.parent.workingTimeRanges = [];\n        this.parent.workingTimeRanges = [];\n        var workingTimeRanges = this.parent.workingTimeRanges;\n        this.parent.nonWorkingTimeRanges = [];\n        var nonWorkingTimeRanges = this.parent.nonWorkingTimeRanges;\n        for (var _i = 0, _a = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']; _i < _a.length; _i++) {\n            var day = _a[_i];\n            this[day.toLowerCase() + \"TimeRangeLength\"] = this.parent.dayWorkingTime.length;\n        }\n        if (this.parent.weekWorkingTime.length > 0) {\n            for (var i = 0; i < this.parent.weekWorkingTime.length; i++) {\n                this[this.parent.weekWorkingTime[i].dayOfWeek.toLowerCase() + 'TimeRangeLength']\n                    = this.parent.weekWorkingTime[i].timeRange.length;\n            }\n            var weekWorkingTime = this.parent.weekWorkingTime;\n            var dayWorkingTime_1 = this.parent.dayWorkingTime;\n            for (var _b = 0, weekWorkingTime_1 = weekWorkingTime; _b < weekWorkingTime_1.length; _b++) {\n                var weekDay = weekWorkingTime_1[_b];\n                if (weekDay.timeRange && weekDay.timeRange.length > 0) {\n                    var seconds_1 = this.calculateWeekWorkTime(weekDay.dayOfWeek, weekDay.timeRange, startDate, totalSeconds, nonWorkingHours, workingTimeRanges, nonWorkingTimeRanges);\n                    this.parent[weekDay.dayOfWeek.toLowerCase() + \"Seconds\"] = seconds_1;\n                }\n            }\n            for (var _c = 0, _d = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']; _c < _d.length; _c++) {\n                var day = _d[_c];\n                var dayDefaultStartTime = this.parent[day.toLowerCase() + \"DefaultStartTime\"];\n                if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(dayDefaultStartTime)) {\n                    var seconds_2 = this.calculateWeekWorkTime(day, dayWorkingTime_1, startDate, totalSeconds, nonWorkingHours, workingTimeRanges, nonWorkingTimeRanges);\n                    this.parent[day.toLowerCase() + \"Seconds\"] = seconds_2;\n                }\n            }\n        }\n        var dayWorkingTime = this.parent.dayWorkingTime;\n        var length = dayWorkingTime.length;\n        var seconds = 0;\n        for (var count = 0; count < length; count++) {\n            var currentRange = dayWorkingTime[count];\n            seconds = seconds + this.getWorkingTime('', currentRange, startDate, totalSeconds, count, nonWorkingHours, workingTimeRanges, nonWorkingTimeRanges);\n        }\n        if (this.parent.defaultEndTime / 3600 !== 24) {\n            nonWorkingTimeRanges.push({\n                from: this.parent.defaultEndTime, to: 86400,\n                isWorking: false, interval: 86400 - this.parent.defaultEndTime\n            });\n        }\n        totalSeconds = seconds;\n        return totalSeconds;\n    };\n    /**\n     *\n     * @param {string} value .\n     * @param {boolean} isFromDialog .\n     * @returns {object} .\n     * @private\n     */\n    // eslint-disable-next-line\n    DateProcessor.prototype.getDurationValue = function (value, isFromDialog) {\n        var durationUnit = null;\n        var duration = null;\n        if (typeof value === 'string') {\n            var values = value.match(/(\\d*\\.*\\d+|.+$)/g);\n            if (values && values.length <= 2) {\n                duration = parseFloat(values[0].toString().trim());\n                var unit = values[1] ? values[1].toString().trim().toLowerCase() : null;\n                if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('minute', this.parent.durationUnitEditText).indexOf(unit) !== -1) {\n                    durationUnit = 'minute';\n                }\n                else if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('hour', this.parent.durationUnitEditText).indexOf(unit) !== -1) {\n                    durationUnit = 'hour';\n                }\n                else if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('day', this.parent.durationUnitEditText).indexOf(unit) !== -1) {\n                    durationUnit = 'day';\n                }\n            }\n        }\n        else {\n            duration = value;\n            durationUnit = null;\n        }\n        var output = {\n            duration: duration,\n            durationUnit: durationUnit\n        };\n        return output;\n    };\n    /**\n     *\n     * @param {Date} date .\n     * @returns {Date} .\n     */\n    DateProcessor.prototype.getNextWorkingDay = function (date) {\n        var dayIndex = date.getDay();\n        if (this.parent.nonWorkingDayIndex.indexOf(dayIndex) !== -1) {\n            date.setDate(date.getDate() + 1);\n            date = this.getNextWorkingDay(date);\n            return date;\n        }\n        else {\n            return date;\n        }\n    };\n    /**\n     * get weekend days between two dates without including args dates\n     *\n     * @param {Date} startDate .\n     * @param {Date} endDate .\n     * @returns {number} .\n     */\n    DateProcessor.prototype.getWeekendCount = function (startDate, endDate) {\n        var weekendCount = 0;\n        var sDate = new Date(startDate.getTime());\n        var eDate = new Date(endDate.getTime());\n        sDate.setHours(0, 0, 0, 0);\n        sDate.setDate(sDate.getDate() + 1);\n        eDate.setHours(0, 0, 0, 0);\n        while (sDate.getTime() < eDate.getTime()) {\n            if (this.parent.nonWorkingDayIndex.indexOf(sDate.getDay()) !== -1) {\n                weekendCount += 1;\n            }\n            sDate.setDate(sDate.getDate() + 1);\n        }\n        return weekendCount;\n    };\n    /**\n     *\n     * @param {Date} startDate .\n     * @param {Date} endDate .\n     * @param {boolean} isCheckTimeZone .\n     * @returns {number} .\n     */\n    DateProcessor.prototype.getNumberOfSeconds = function (startDate, endDate, isCheckTimeZone) {\n        var sDate = new Date(startDate.getTime());\n        var eDate = new Date(endDate.getTime());\n        var timeDiff = 0;\n        sDate.setDate(sDate.getDate() + 1);\n        sDate.setHours(0, 0, 0, 0);\n        eDate.setHours(0, 0, 0, 0);\n        if (sDate.getTime() < eDate.getTime()) {\n            timeDiff = (this.getTimeDifference(sDate, eDate, isCheckTimeZone)) / 1000;\n        }\n        if (timeDiff % 86400 !== 0) {\n            timeDiff = timeDiff - (timeDiff % 86400) + 86400;\n        }\n        return timeDiff;\n    };\n    /**\n     *\n     * @param {Date} startDate .\n     * @param {Date} endDate .\n     * @returns {number} .\n     */\n    DateProcessor.prototype.getHolidaysCount = function (startDate, endDate) {\n        var holidaysCount = 0;\n        var holidays = this.parent.totalHolidayDates;\n        var sDate = new Date(startDate.getTime());\n        var eDate = new Date(endDate.getTime());\n        sDate.setDate(sDate.getDate() + 1);\n        sDate.setHours(0, 0, 0, 0);\n        eDate.setHours(0, 0, 0, 0);\n        if (sDate.getTime() < eDate.getTime()) {\n            for (var i = 0; i < holidays.length; i++) {\n                var currentHoliday = this.getDateFromFormat(new Date(holidays[i]));\n                if (sDate.getTime() <= currentHoliday.getTime() && eDate.getTime() > currentHoliday.getTime()) {\n                    if ((!this.parent.includeWeekend && this.parent.nonWorkingDayIndex.indexOf(currentHoliday.getDay()) === -1) ||\n                        this.parent.includeWeekend) {\n                        holidaysCount += 1;\n                    }\n                }\n            }\n        }\n        return holidaysCount;\n    };\n    /**\n     * @returns {number[]} .\n     * @private\n     */\n    DateProcessor.prototype.getHolidayDates = function () {\n        var holidays = this.parent.holidays;\n        var holidayDates = [];\n        for (var i = 0; i < holidays.length; i++) {\n            var from = this.getDateFromFormat(holidays[i].from);\n            var to = this.getDateFromFormat(holidays[i].to);\n            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(from) && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(to)) {\n                continue;\n            }\n            else if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(from) || (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(to)) {\n                var tempDate = from ? from : to;\n                tempDate.setHours(0, 0, 0, 0);\n                if (holidayDates.indexOf(tempDate.getTime()) === -1) {\n                    holidayDates.push(tempDate.getTime());\n                }\n            }\n            else {\n                while (from <= to) {\n                    from.setHours(0, 0, 0, 0);\n                    if (holidayDates.indexOf(from.getTime()) === -1) {\n                        holidayDates.push(from.getTime());\n                    }\n                    from.setDate(from.getDate() + 1);\n                }\n            }\n        }\n        return holidayDates;\n    };\n    /**\n     * @param {Date} date .\n     * @param {boolean} checkWeekEnd .\n     * @returns {boolean} .\n     * @private\n     */\n    /*Check given date is on holidays*/\n    DateProcessor.prototype.isOnHolidayOrWeekEnd = function (date, checkWeekEnd) {\n        checkWeekEnd = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(checkWeekEnd) ? checkWeekEnd : this.parent.includeWeekend;\n        if (!this.parent.autoCalculateDateScheduling && !(this.parent.isLoad && this.parent.treeGrid.loadChildOnDemand &&\n            this.parent.taskFields.hasChildMapping)) {\n            checkWeekEnd = true;\n        }\n        if (!checkWeekEnd && this.parent.nonWorkingDayIndex.indexOf(date.getDay()) !== -1) {\n            return true;\n        }\n        var holidays = this.parent.totalHolidayDates;\n        for (var count = 0; count < holidays.length; count++) {\n            var holidayFrom = this.getDateFromFormat(new Date(holidays[count]));\n            var holidayTo = new Date(holidayFrom.getTime());\n            holidayFrom.setHours(0, 0, 0, 0);\n            holidayTo.setHours(23, 59, 59, 59);\n            if (date.getTime() >= holidayFrom.getTime() && date.getTime() < holidayTo.getTime()) {\n                return true;\n            }\n        }\n        return false;\n    };\n    /**\n     * To calculate non working times in given date\n     *\n     * @param {Date} startDate .\n     * @param {Date} endDate .\n     * @param {boolean} isAutoSchedule .\n     * @returns {number} .\n     */\n    DateProcessor.prototype.getNonWorkingSecondsOnDate = function (startDate, endDate, isAutoSchedule) {\n        var sHour = this.getSecondsInDecimal(startDate);\n        var eHour = this.getSecondsInDecimal(endDate);\n        var startRangeIndex = -1;\n        var endRangeIndex = -1;\n        var totNonWrkSecs = 0;\n        var startOnHoliday = (isAutoSchedule && this.parent.autoCalculateDateScheduling &&\n            !(this.parent.isLoad && this.parent.treeGrid.loadChildOnDemand && this.parent.taskFields.hasChildMapping)) ? this.isOnHolidayOrWeekEnd(startDate, null) : false;\n        var endOnHoliday = (isAutoSchedule && this.parent.autoCalculateDateScheduling &&\n            !(this.parent.isLoad && this.parent.treeGrid.loadChildOnDemand && this.parent.taskFields.hasChildMapping)) ? this.isOnHolidayOrWeekEnd(endDate, null) : false;\n        var startnonWorkingTimeRange;\n        var endnonWorkingTimeRange;\n        if (this.parent.weekWorkingTime.length > 0) {\n            startnonWorkingTimeRange = this.parent['getNonWorkingRange'](startDate);\n            for (var i = 0; i < startnonWorkingTimeRange.length; i++) {\n                var val = startnonWorkingTimeRange[i];\n                if (sHour >= val.from && sHour <= val.to) {\n                    startRangeIndex = i;\n                }\n            }\n            endnonWorkingTimeRange = this.parent['getNonWorkingRange'](endDate);\n            for (var i = 0; i < endnonWorkingTimeRange.length; i++) {\n                var val = endnonWorkingTimeRange[i];\n                if (eHour >= val.from && eHour <= val.to) {\n                    endRangeIndex = i;\n                }\n            }\n        }\n        else {\n            startnonWorkingTimeRange = this.parent.nonWorkingTimeRanges;\n            endnonWorkingTimeRange = this.parent.nonWorkingTimeRanges;\n            for (var i = 0; i < startnonWorkingTimeRange.length; i++) {\n                var val = startnonWorkingTimeRange[i];\n                if (sHour >= val.from && sHour <= val.to) {\n                    startRangeIndex = i;\n                }\n                if (eHour >= val.from && eHour <= val.to) {\n                    endRangeIndex = i;\n                }\n            }\n        }\n        if (startDate.getDate() !== endDate.getDate() || startDate.getMonth() !== endDate.getMonth() ||\n            startDate.getFullYear() !== endDate.getFullYear()) {\n            if (!startOnHoliday) {\n                for (var i = startRangeIndex; i < startnonWorkingTimeRange.length; i++) {\n                    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(startnonWorkingTimeRange[i]) && !startnonWorkingTimeRange[i].isWorking) {\n                        if (i === startRangeIndex) {\n                            totNonWrkSecs += (startnonWorkingTimeRange[i].to - sHour);\n                        }\n                        else {\n                            totNonWrkSecs += (startnonWorkingTimeRange[i].interval);\n                        }\n                    }\n                }\n            }\n            else {\n                totNonWrkSecs += (86400 - sHour);\n            }\n            if (!endOnHoliday) {\n                for (var i = 0; i <= endRangeIndex; i++) {\n                    if (!endnonWorkingTimeRange[i].isWorking) {\n                        if (i === endRangeIndex) {\n                            totNonWrkSecs += (eHour - endnonWorkingTimeRange[i].from);\n                        }\n                        else {\n                            totNonWrkSecs += endnonWorkingTimeRange[i].interval;\n                        }\n                    }\n                }\n            }\n            else {\n                totNonWrkSecs += eHour;\n            }\n        }\n        else {\n            if (startRangeIndex !== endRangeIndex) {\n                if (!endOnHoliday) {\n                    for (var i = startRangeIndex; i <= endRangeIndex; i++) {\n                        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(startnonWorkingTimeRange[i]) && !startnonWorkingTimeRange[i].isWorking) {\n                            if (i === startRangeIndex) {\n                                totNonWrkSecs += (startnonWorkingTimeRange[i].to - sHour);\n                            }\n                            else if (i === endRangeIndex) {\n                                totNonWrkSecs += (eHour - startnonWorkingTimeRange[i].from);\n                            }\n                            else {\n                                totNonWrkSecs += startnonWorkingTimeRange[i].interval;\n                            }\n                        }\n                    }\n                }\n                else {\n                    totNonWrkSecs += (eHour - sHour);\n                }\n            }\n            else {\n                if (!endOnHoliday) {\n                    var range = startnonWorkingTimeRange[startRangeIndex];\n                    if (!range.isWorking) {\n                        totNonWrkSecs = eHour - sHour;\n                    }\n                }\n                else {\n                    totNonWrkSecs += (eHour - sHour);\n                }\n            }\n        }\n        return totNonWrkSecs;\n    };\n    /**\n     *\n     * @param {Date} date .\n     * @returns {Date} .\n     */\n    DateProcessor.prototype.getPreviousWorkingDay = function (date) {\n        var dayIndex = date.getDay();\n        var previousIndex = (dayIndex === 0) ? 6 : dayIndex - 1;\n        var dayEndTime = this.parent['getCurrentDayEndTime'](date);\n        if (this.parent.nonWorkingDayIndex.indexOf(dayIndex) !== -1 || (this.parent.nonWorkingDayIndex.indexOf(previousIndex) !== -1\n            && dayEndTime === 86400 && this.getSecondsInDecimal(date) === 0)) {\n            date.setDate(date.getDate() - 1);\n            if (this.parent.nonWorkingDayIndex.indexOf(date.getDay()) !== -1) {\n                date = this.getPreviousWorkingDay(date);\n            }\n            return date;\n        }\n        else {\n            return date;\n        }\n    };\n    /**\n     * To get non-working day indexes.\n     *\n     * @returns {void} .\n     * @private\n     */\n    DateProcessor.prototype.getNonWorkingDayIndex = function () {\n        var weekDay = ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday'];\n        var weekDayLength = weekDay.length;\n        if (this.parent.workWeek.length === 0) {\n            this.parent.workWeek = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'];\n        }\n        var workWeek = this.parent.workWeek.slice();\n        var length = workWeek.length;\n        for (var i = 0; i < length; i++) {\n            workWeek[i] = workWeek[i].toLowerCase();\n        }\n        this.parent.nonWorkingDayIndex = [];\n        for (var i = 0; i < weekDayLength; i++) {\n            if (workWeek.indexOf(weekDay[i]) === -1) {\n                this.parent.nonWorkingDayIndex.push(i);\n            }\n        }\n    };\n    /**\n     *\n     * @param {number} seconds .\n     * @param {Date} date .\n     * @returns {void} .\n     * @private\n     */\n    DateProcessor.prototype.setTime = function (seconds, date) {\n        /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n        var hour = seconds / 3600;\n        hour = parseInt(hour, 10);\n        /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n        var min = (seconds - (hour * 3600)) / 60;\n        min = parseInt(min, 10);\n        var sec = seconds - (hour * 3600) - (min * 60);\n        date.setHours(hour, min, sec);\n    };\n    /**\n     * @param {Date} startDate .\n     * @param {Date} endDate .\n     * @param {boolean} isCheckTimeZone .\n     * @returns {number} .\n     */\n    DateProcessor.prototype.getTimeDifference = function (startDate, endDate, isCheckTimeZone) {\n        var sDate = new Date(startDate.getTime());\n        var eDate = new Date(endDate.getTime());\n        if (isCheckTimeZone) {\n            this.updateDateWithTimeZone(sDate, eDate);\n        }\n        return eDate.getTime() - sDate.getTime();\n    };\n    /**\n     * @param {Date} sDate .\n     * @param {Date} eDate .\n     * @returns {void} .\n     */\n    DateProcessor.prototype.updateDateWithTimeZone = function (sDate, eDate) {\n        var sTZ = sDate.getTimezoneOffset();\n        var eTZ = eDate.getTimezoneOffset();\n        var uTZ;\n        var uDate;\n        if (sTZ !== eTZ) {\n            var standardTZ = new Date(new Date().getFullYear(), 0, 1).getTimezoneOffset();\n            if (standardTZ !== sTZ) {\n                uDate = sDate;\n                uTZ = sTZ;\n            }\n            else if (standardTZ !== eTZ) {\n                uDate = eDate;\n                uTZ = eTZ;\n            }\n            if (standardTZ < 0) {\n                var tzDiff = standardTZ - uTZ;\n                uDate.setTime(uDate.getTime() + (tzDiff * 60 * 1000));\n            }\n            else if (standardTZ >= 0) {\n                var tzDiff = uTZ - standardTZ;\n                uDate.setTime(uDate.getTime() - (tzDiff * 60 * 1000));\n            }\n        }\n    };\n    /**\n     *\n     * @param {Date} date .\n     * @returns {number} .\n     */\n    DateProcessor.prototype.getSecondsInDecimal = function (date) {\n        return (date.getHours() * 60 * 60) + (date.getMinutes() * 60) + date.getSeconds() + (date.getMilliseconds() / 1000);\n    };\n    /**\n     * @param {Date} date .\n     * @param {number} localOffset .\n     * @param {string} timezone .\n     * @returns {number} .\n     * @private\n     */\n    DateProcessor.prototype.offset = function (date, timezone) {\n        var localOffset = date.getTimezoneOffset();\n        try {\n            var convertedDate = new Date(date.toLocaleString('en-US', { timeZone: timezone }));\n            if (!isNaN(convertedDate.getTime())) {\n                return ((date.getTime() - convertedDate.getTime()) / 60000) + localOffset;\n            }\n            return 0;\n        }\n        catch (error) {\n            return 0;\n        }\n    };\n    DateProcessor.prototype.remove = function (date, timezone) {\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(date)) {\n            date = this.reverse(date, timezone, date.getTimezoneOffset());\n        }\n        return date;\n    };\n    DateProcessor.prototype.reverse = function (date, fromOffset, toOffset) {\n        if (typeof fromOffset === 'string') {\n            fromOffset = this.offset(date, fromOffset);\n        }\n        if (typeof toOffset === 'string') {\n            toOffset = this.offset(date, toOffset);\n        }\n        var fromLocalOffset = date.getTimezoneOffset();\n        date = new Date(date.getTime() + (fromOffset - toOffset) * 60000);\n        var toLocalOffset = date.getTimezoneOffset();\n        return new Date(date.getTime() + (toLocalOffset - fromLocalOffset) * 60000);\n    };\n    /**\n     * @param {Date} date .\n     * @param {string} timezone .\n     * @returns {Date} .\n     * @private\n     */\n    DateProcessor.prototype.convert = function (date, timezone) {\n        var fromOffset = date.getTimezoneOffset();\n        var toOffset = this.offset(date, timezone);\n        if (typeof fromOffset === 'string') {\n            fromOffset = this.offset(date, fromOffset);\n        }\n        if (typeof toOffset === 'string') {\n            toOffset = this.offset(date, toOffset);\n        }\n        var fromLocalOffset = date.getTimezoneOffset();\n        date = new Date(date.getTime() + (fromOffset - toOffset) * 60000);\n        var toLocalOffset = date.getTimezoneOffset();\n        return new Date(date.getTime() + (toLocalOffset - fromLocalOffset) * 60000);\n    };\n    /**\n     * @param {string | Date} date .\n     * @param {boolean} toConvert .\n     * @returns {Date} .\n     * @private\n     */\n    DateProcessor.prototype.getDateFromFormat = function (date, toConvert) {\n        var updatedDate;\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(date)) {\n            return null;\n        }\n        else if (date instanceof Date) {\n            updatedDate = new Date(date.getTime());\n        }\n        else {\n            var dateObject = this.parent.globalize.parseDate(date, { format: this.parent.getDateFormat(), type: 'dateTime' });\n            updatedDate = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(dateObject) && !isNaN(new Date(date).getTime()) ? new Date(date) : dateObject;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.parent.timezone) && toConvert) {\n            var convertedDate = this.convert(updatedDate, this.parent.timezone);\n            return convertedDate;\n        }\n        else {\n            return updatedDate;\n        }\n    };\n    /**\n     * @param {Date} date1 .\n     * @param {Date} date2 .\n     * @returns {number} .\n     * @private\n     */\n    DateProcessor.prototype.compareDates = function (date1, date2) {\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(date1) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(date2)) {\n            return (date1.getTime() > date2.getTime()) ? 1 : (date1.getTime() < date2.getTime()) ? -1 : 0;\n        }\n        else if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(date1) && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(date2)) {\n            return 1;\n        }\n        else if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(date1) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(date2)) {\n            return -1;\n        }\n        else {\n            return null;\n        }\n    };\n    /**\n     *\n     * @param {number} duration .\n     * @param {string} durationUnit .\n     * @returns {string} .\n     * @private\n     */\n    DateProcessor.prototype.getDurationString = function (duration, durationUnit) {\n        var value = '';\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(duration)) {\n            value += parseFloat(duration.toFixed(2)) + ' ';\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(durationUnit)) {\n                var plural = duration !== 1;\n                if (durationUnit === 'day') {\n                    value += plural ? this.parent.localeObj.getConstant('days') : this.parent.localeObj.getConstant('day');\n                }\n                else if (durationUnit === 'hour') {\n                    value += plural ? this.parent.localeObj.getConstant('hours') : this.parent.localeObj.getConstant('hour');\n                }\n                else if (durationUnit === 'minute') {\n                    value += plural ? this.parent.localeObj.getConstant('minutes') :\n                        this.parent.localeObj.getConstant('minute');\n                }\n            }\n        }\n        return value;\n    };\n    /**\n     * Method to get work with value and unit.\n     *\n     * @param {number} work .\n     * @param {string} workUnit .\n     * @returns {string} .\n     * @private\n     */\n    DateProcessor.prototype.getWorkString = function (work, workUnit) {\n        var value = '';\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(work)) {\n            value += parseFloat(work).toFixed(2) + ' ';\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(workUnit)) {\n                var plural = work !== 1;\n                if (workUnit === 'day') {\n                    value += plural ? this.parent.localeObj.getConstant('days') : this.parent.localeObj.getConstant('day');\n                }\n                else if (workUnit === 'hour') {\n                    value += plural ? this.parent.localeObj.getConstant('hours') : this.parent.localeObj.getConstant('hour');\n                }\n                else if (workUnit === 'minute') {\n                    value += plural ? this.parent.localeObj.getConstant('minutes') :\n                        this.parent.localeObj.getConstant('minute');\n                }\n            }\n        }\n        return value;\n    };\n    /**\n     *\n     * @param {object} editArgs .\n     * @returns {void} .\n     * @private\n     */\n    // eslint-disable-next-line\n    DateProcessor.prototype.calculateProjectDatesForValidatedTasks = function (editArgs) {\n        var _this = this;\n        var projectStartDate = typeof this.parent.projectStartDate === 'string' ?\n            new Date(this.parent.projectStartDate) : this.parent.projectStartDate;\n        var projectEndDate = typeof this.parent.projectEndDate === 'string' ?\n            new Date(this.parent.projectEndDate) : this.parent.projectEndDate;\n        var minStartDate = null;\n        var maxEndDate = null;\n        var flatData = ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('dataOperation.dataArray', this.parent));\n        if ((!projectStartDate || !projectEndDate) && (flatData && flatData.length === 0)) {\n            minStartDate = this.getDateFromFormat(new Date());\n            maxEndDate = this.getDateFromFormat(new Date(minStartDate.getTime()));\n        }\n        else if (flatData.length > 0) {\n            var sortedStartDate = flatData.slice().sort(function (a, b) {\n                return ((new Date(a[_this.parent.taskFields.startDate])).getTime() -\n                    (new Date(b[_this.parent.taskFields.startDate])).getTime());\n            });\n            var sortedEndDate = flatData.slice().sort(function (a, b) {\n                return ((new Date(b[_this.parent.taskFields.endDate])).getTime() - (new Date(a[_this.parent.taskFields.endDate])).getTime());\n            });\n            minStartDate = sortedStartDate[0][this.parent.taskFields.startDate];\n            maxEndDate = sortedEndDate[sortedEndDate.length - 1][this.parent.taskFields.endDate];\n        }\n        this.parent.cloneProjectStartDate = projectStartDate ? new Date(projectStartDate.getTime()) :\n            typeof minStartDate === 'string' ? new Date(minStartDate) : minStartDate;\n        this.parent.cloneProjectEndDate = projectEndDate ? new Date(projectEndDate.getTime()) :\n            typeof maxEndDate === 'string' ? new Date(maxEndDate) : maxEndDate;\n    };\n    /**\n     *\n     * @param {object} editArgs .\n     * @returns {void} .\n     * @private\n     */\n    DateProcessor.prototype.calculateProjectDates = function (editArgs) {\n        var _this = this;\n        if (this.parent.isLoad && this.parent.enablePersistence &&\n            this.parent.cloneProjectStartDate && this.parent.cloneProjectEndDate) {\n            this.parent.cloneProjectStartDate = this.getDateFromFormat(this.parent.cloneProjectStartDate);\n            this.parent.cloneProjectEndDate = this.getDateFromFormat(this.parent.cloneProjectEndDate);\n            return;\n        }\n        var sDate = typeof this.parent.projectStartDate === 'string' ?\n            new Date(this.parent.projectStartDate) : this.parent.projectStartDate;\n        var eDate = typeof this.parent.projectEndDate === 'string' ?\n            new Date(this.parent.projectEndDate) : this.parent.projectEndDate;\n        var projectStartDate = this.parent.timelineModule.isZooming && this.parent.cloneProjectStartDate\n            ? this.getDateFromFormat(this.parent.cloneProjectStartDate) : this.getDateFromFormat(sDate);\n        var projectEndDate = this.parent.timelineModule.isZooming && this.parent.cloneProjectEndDate\n            ? this.getDateFromFormat(this.parent.cloneProjectEndDate) : this.getDateFromFormat(eDate);\n        var minStartDate = null;\n        var maxEndDate = null;\n        var flatData = this.parent.flatData;\n        var currentViewData = this.parent.currentViewData;\n        var taskRange = [];\n        var addDateToList = function (date) {\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(date)) {\n                taskRange.push(date);\n            }\n        };\n        var sortDates = function (dates) {\n            if (dates.length > 0) {\n                dates.sort(function (a, b) {\n                    return a.getTime() - b.getTime();\n                });\n                minStartDate = new Date(dates[0].getTime());\n                maxEndDate = dates.length > 1 ? new Date(dates[dates.length - 1].getTime()) : null;\n            }\n        };\n        if (((!projectStartDate || !projectEndDate) && flatData.length > 0) || editArgs || this.parent.timelineModule.isZoomToFit) {\n            var viewData = void 0;\n            if (currentViewData.length > 0 && this.parent.timelineModule.isZoomToFit &&\n                this.parent.treeGrid.filterModule &&\n                this.parent.treeGrid.filterModule.filteredResult.length > 0) {\n                viewData = currentViewData;\n            }\n            else {\n                viewData = flatData;\n            }\n            viewData.forEach(function (data) {\n                taskRange = [];\n                var task = data.ganttProperties;\n                var tempStartDate;\n                var tempEndDate;\n                if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(task.startDate) && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(task.endDate)) {\n                    tempStartDate = null;\n                    tempEndDate = null;\n                }\n                else {\n                    tempStartDate = _this.getValidStartDate(task);\n                    tempEndDate = _this.getValidEndDate(task);\n                }\n                addDateToList(minStartDate);\n                addDateToList(maxEndDate);\n                addDateToList(tempStartDate);\n                addDateToList(tempEndDate);\n                if (_this.parent.renderBaseline && !_this.parent.timelineModule.isZoomToFit) {\n                    addDateToList(task.baselineStartDate);\n                    addDateToList(task.baselineEndDate);\n                }\n                if (task.indicators && task.indicators.length > 0 && !_this.parent.timelineModule.isZoomToFit) {\n                    task.indicators.forEach(function (item) {\n                        addDateToList(_this.getDateFromFormat(item.date));\n                    });\n                }\n                sortDates(taskRange);\n            });\n            taskRange = [];\n            addDateToList(minStartDate);\n            addDateToList(maxEndDate);\n            //update schedule dates as per holiday and strip line collection\n            if (this.parent.eventMarkers.length > 0 && !this.parent.timelineModule.isZoomToFit) {\n                var eventMarkers = this.parent.eventMarkers;\n                // eslint-disable-next-line\n                eventMarkers.forEach(function (marker, index) {\n                    addDateToList(_this.getDateFromFormat(marker.day));\n                });\n            }\n            if (this.parent.totalHolidayDates.length > 0 && !this.parent.timelineModule.isZoomToFit) {\n                var holidays = this.parent.totalHolidayDates;\n                // eslint-disable-next-line\n                holidays.forEach(function (holiday, index) {\n                    addDateToList(new Date(holiday));\n                });\n            }\n            sortDates(taskRange);\n            if (!minStartDate || !maxEndDate) {\n                if (!minStartDate) {\n                    minStartDate = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(minStartDate) ? this.getDateFromFormat(new Date()) : minStartDate;\n                    minStartDate.setHours(0, 0, 0, 0);\n                }\n                else {\n                    minStartDate = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(minStartDate) ? this.getDateFromFormat(new Date()) : minStartDate;\n                }\n                maxEndDate = this.getDateFromFormat(new Date(minStartDate.getTime()));\n                maxEndDate.setDate(maxEndDate.getDate() + 20);\n            }\n        }\n        else if ((!projectStartDate || !projectEndDate) && flatData.length === 0) {\n            minStartDate = this.getDateFromFormat(new Date());\n            maxEndDate = this.getDateFromFormat(new Date(minStartDate.getTime()));\n        }\n        if (!editArgs) {\n            this.prevProjectStartDate = this.parent.cloneProjectStartDate;\n            this.parent.cloneProjectStartDate = minStartDate ? (!this.parent.timelineModule.isZoomToFit) ?\n                (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(projectStartDate)) ? new Date(projectStartDate.getTime()) :\n                    minStartDate : minStartDate : new Date(projectStartDate.getTime());\n            this.parent.cloneProjectEndDate = maxEndDate ? (!this.parent.timelineModule.isZoomToFit) ?\n                (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(projectEndDate)) ? new Date(projectEndDate.getTime()) :\n                    maxEndDate : maxEndDate : new Date(projectEndDate.getTime());\n        }\n        else {\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.setValue)('minStartDate', minStartDate, editArgs);\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.setValue)('maxEndDate', maxEndDate, editArgs);\n        }\n        this.parent['isProjectDateUpdated'] = true;\n    };\n    /**\n     *\n     * @param {ITaskSegment} segments .\n     * @returns {number} .\n     * @private\n     */\n    DateProcessor.prototype.splitTasksDuration = function (segments) {\n        var duration = 0;\n        var sDate = segments[0].startDate;\n        var eDate = segments[segments.length - 1].endDate;\n        if (this.parent.timelineModule.bottomTier === 'Hour') {\n            duration += Math.ceil(this.getTimeDifference(sDate, eDate) / (1000 * 60 * 60));\n        }\n        else if (this.parent.timelineModule.bottomTier === 'Minutes') {\n            duration += Math.ceil(this.getTimeDifference(sDate, eDate) / (1000 * 60));\n        }\n        else {\n            duration += Math.ceil(this.getTimeDifference(sDate, eDate) / (1000 * 60 * 60 * 24));\n        }\n        return duration;\n    };\n    return DateProcessor;\n}());\n\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-gantt/src/gantt/base/date-processor.js?");

/***/ })

}]);