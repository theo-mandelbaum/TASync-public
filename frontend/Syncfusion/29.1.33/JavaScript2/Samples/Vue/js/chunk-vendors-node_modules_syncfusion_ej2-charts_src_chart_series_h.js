"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkej2_vue_samples"] = self["webpackChunkej2_vue_samples"] || []).push([["chunk-vendors-node_modules_syncfusion_ej2-charts_src_chart_series_h"],{

/***/ "./node_modules/@syncfusion/ej2-charts/src/chart/series/hilo-series.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-charts/src/chart/series/hilo-series.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HiloSeries: () => (/* binding */ HiloSeries)\n/* harmony export */ });\n/* harmony import */ var _common_utils_helper__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../common/utils/helper */ \"./node_modules/@syncfusion/ej2-charts/src/common/utils/helper.js\");\n/* harmony import */ var _column_base__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./column-base */ \"./node_modules/@syncfusion/ej2-charts/src/chart/series/column-base.js\");\nvar __extends = (undefined && undefined.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n\n\n/**\n * The `HiloSeries` module is used to render the hilo series.\n */\nvar HiloSeries = /** @class */ (function (_super) {\n    __extends(HiloSeries, _super);\n    function HiloSeries() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.sideBySideInfo = [];\n        return _this;\n    }\n    /**\n     * Render Hiloseries.\n     *\n     * @returns {void}\n     * @private\n     */\n    HiloSeries.prototype.render = function (series) {\n        this.sideBySideInfo[series.index] = this.getSideBySideInfo(series);\n        for (var _i = 0, _a = series.points; _i < _a.length; _i++) {\n            var point = _a[_i];\n            this.renderPoint(series, point, this.sideBySideInfo[series.index]);\n        }\n    };\n    HiloSeries.prototype.renderPoint = function (series, point, sideBySideInfo) {\n        point.symbolLocations = [];\n        point.regions = [];\n        var region;\n        if (point.visible &&\n            (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_0__.withInRange)(series.points[point.index - 1], point, series.points[point.index + 1], series)) {\n            region = this.getRectangle(point.xValue + sideBySideInfo.median, point.high, point.xValue + sideBySideInfo.median, point.low, series);\n            var argsData = this.triggerPointRenderEvent(series, point);\n            if (!argsData.cancel) {\n                if (!series.chart.requireInvertedAxis) {\n                    region.width = argsData.border.width;\n                    region.x = region.x - (region.width / 2);\n                }\n                else {\n                    region.height = argsData.border.width;\n                    region.y = region.y - (region.height / 2);\n                }\n                argsData.border.width = 0;\n                this.updateSymbolLocation(point, region, series);\n                this.drawRectangle(series, point, region, argsData);\n            }\n        }\n    };\n    HiloSeries.prototype.updateDirection = function (series, point) {\n        for (var i = 0; i < point.length; i++) {\n            this.renderPoint(series, series.points[point[i]], this.sideBySideInfo[series.index]);\n            if (series.marker.dataLabel.visible && series.chart.dataLabelModule) {\n                series.chart.dataLabelModule.commonId = series.chart.element.id + '_Series_' + series.index + '_Point_';\n                series.chart.dataLabelModule.renderDataLabel(series, series.points[point[i]], null, series.marker.dataLabel);\n            }\n        }\n    };\n    /**\n     * Triggers the point render event for the specified series and data point.\n     *\n     * @param {Series} series - The series associated with the point.\n     * @param {Points} point - The data point.\n     * @returns {IPointRenderEventArgs} The event arguments.\n     */\n    HiloSeries.prototype.triggerPointRenderEvent = function (series, point) {\n        var border = { color: series.fill, width: Math.max(series.border.width, 2) };\n        return _super.prototype.triggerEvent.call(this, series, point, series.interior, border);\n    };\n    /**\n     * Get module name.\n     *\n     * @returns {string} - Returns the module name.\n     */\n    HiloSeries.prototype.getModuleName = function () {\n        return 'HiloSeries';\n        /**\n         * return the module name.\n         */\n    };\n    /**\n     * Animates the series.\n     *\n     * @param  {Series} series - Defines the series to animate.\n     * @returns {void}\n     * @private\n     */\n    HiloSeries.prototype.doAnimation = function (series) {\n        this.animate(series);\n    };\n    /**\n     * To destroy the Hilo series.\n     *\n     * @returns {void}\n     * @private\n     */\n    HiloSeries.prototype.destroy = function () {\n        /**\n         * Destroys the Hilo Series.\n         */\n    };\n    return HiloSeries;\n}(_column_base__WEBPACK_IMPORTED_MODULE_1__.ColumnBase));\n\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-charts/src/chart/series/hilo-series.js?");

/***/ }),

/***/ "./node_modules/@syncfusion/ej2-charts/src/chart/series/histogram-series.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-charts/src/chart/series/histogram-series.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HistogramSeries: () => (/* binding */ HistogramSeries)\n/* harmony export */ });\n/* harmony import */ var _common_utils_helper__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../common/utils/helper */ \"./node_modules/@syncfusion/ej2-charts/src/common/utils/helper.js\");\n/* harmony import */ var _syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @syncfusion/ej2-svg-base */ \"./node_modules/@syncfusion/ej2-svg-base/index.js\");\n/* harmony import */ var _column_series__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./column-series */ \"./node_modules/@syncfusion/ej2-charts/src/chart/series/column-series.js\");\n/* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @syncfusion/ej2-base */ \"./node_modules/@syncfusion/ej2-base/index.js\");\nvar __extends = (undefined && undefined.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n\n\n\n\n/**\n * The `HistogramSeries` module is used to render the histogram series.\n */\nvar HistogramSeries = /** @class */ (function (_super) {\n    __extends(HistogramSeries, _super);\n    function HistogramSeries() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * Render Histogram series.\n     *\n     * @param {Series} series - The series to render.\n     * @returns {void}\n     * @private\n     */\n    HistogramSeries.prototype.render = function (series) {\n        _super.prototype.render.call(this, series);\n        if (series.showNormalDistribution) {\n            this.renderNormalDistribution(series);\n        }\n    };\n    /**\n     * To calculate bin interval for Histogram series.\n     *\n     * @param {number[]} yValues - The y values of the series.\n     * @param {Series} series - The series for which the bin interval is calculated.\n     * @returns {void}\n     * @private\n     */\n    HistogramSeries.prototype.calculateBinInterval = function (yValues, series) {\n        var mean = (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_0__.sum)(yValues) / yValues.length;\n        var sumValue = 0;\n        for (var _i = 0, yValues_1 = yValues; _i < yValues_1.length; _i++) {\n            var value = yValues_1[_i];\n            sumValue += (value - mean) * (value - mean);\n        }\n        series.histogramValues.mean = mean;\n        series.histogramValues.sDValue = Math.sqrt(Math.abs(sumValue / yValues.length));\n        series.histogramValues.binWidth = series.binInterval ||\n            Math.round((3.5 * series.histogramValues.sDValue) / Math.pow(yValues.length, 1 / 3)) || 1;\n    };\n    /**\n     * Processes the internal data for the series.\n     *\n     * @param {Object[]} data - The internal data to be processed.\n     * @param {Series} series - The series for which the internal data is processed.\n     * @returns {Object[]} - The processed internal data.\n     * @private\n     */\n    HistogramSeries.prototype.processInternalData = function (data, series) {\n        var _a;\n        var updatedData = [];\n        var yValues = [];\n        var keys = Object.keys(data);\n        for (var i = 0; i < keys.length; i++) {\n            var key = keys[i];\n            yValues.push(data[key][series.yName]);\n        }\n        series.histogramValues = {\n            yValues: yValues\n        };\n        var min = Math.min.apply(Math, series.histogramValues.yValues);\n        var max = Math.max.apply(Math, series.histogramValues.yValues);\n        this.calculateBinInterval(series.histogramValues.yValues, series);\n        var binWidth = series.histogramValues.binWidth;\n        var yCount;\n        for (var j = 0; j < data.length;) {\n            yCount = yValues.filter(function (y) { return y >= min && y < (min + (binWidth)); }).length;\n            if ((min + binWidth) === max) {\n                yCount += yValues.filter(function (y) { return y >= max; }).length;\n            }\n            updatedData.push((_a = {\n                    'x': min + binWidth / 2\n                },\n                _a[series.yName] = yCount,\n                _a));\n            min = min + binWidth;\n            j += yCount;\n        }\n        return updatedData;\n    };\n    /**\n     * Calculates the bin values for the series.\n     *\n     * @param {Series} series - The series for which the bin values are calculated.\n     * @returns {void}\n     * @private\n     */\n    HistogramSeries.prototype.calculateBinValues = function (series) {\n        var yValuesCount = series.histogramValues.yValues.length;\n        var binWidth = series.histogramValues.binWidth;\n        var mean = series.histogramValues.mean;\n        var sDValue = series.histogramValues.sDValue;\n        var pointsCount = 500;\n        var min = series.xAxis.minimum ? parseInt(series.xAxis.minimum.toString(), 10) : series.xMin;\n        var max = series.xAxis.maximum ? parseInt(series.xAxis.maximum.toString(), 10) : series.xMax;\n        var points = series.points.length;\n        var xValue;\n        var yValue;\n        var del = (max - min) / (pointsCount - 1);\n        if (points) {\n            for (var i = 0; i < pointsCount; i++) {\n                xValue = min + i * del;\n                yValue = (Math.exp(-(xValue - mean) * (xValue - mean) / (2 * sDValue * sDValue)) /\n                    (sDValue * Math.sqrt(2 * Math.PI))) * binWidth * yValuesCount;\n                series.yMin = series.yMin > yValue ? yValue : series.yMin;\n                series.yMax = series.yMax < yValue ? yValue : series.yMax;\n            }\n        }\n    };\n    /**\n     * Render Normal Distribution for Histogram series.\n     *\n     * @param {Series} series - The series for which the normal distribution is rendered.\n     * @returns {void}\n     * @private\n     */\n    HistogramSeries.prototype.renderNormalDistribution = function (series) {\n        var min = series.xAxis.actualRange.min;\n        var max = series.xAxis.actualRange.max;\n        var xValue;\n        var pointLocation;\n        var yValue;\n        var direction = '';\n        var startPoint = 'M';\n        var yValuesCount = series.histogramValues.yValues.length;\n        var binWidth = series.histogramValues.binWidth;\n        var mean = series.histogramValues.mean;\n        var sDValue = series.histogramValues.sDValue;\n        var pointsCount = 500;\n        var del = (max - min) / (pointsCount - 1);\n        var points = series.points.length;\n        if (points) {\n            for (var i = 0; i < pointsCount; i++) {\n                xValue = min + i * del;\n                yValue = Math.exp(-(xValue - mean) * (xValue - mean) / (2 * sDValue * sDValue)) /\n                    (sDValue * Math.sqrt(2 * Math.PI));\n                pointLocation = (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_0__.getPoint)(xValue, yValue * binWidth * yValuesCount, series.xAxis, series.yAxis, series.chart.requireInvertedAxis);\n                direction += startPoint + ' ' + (pointLocation.x) + ' ' + (pointLocation.y) + ' ';\n                startPoint = 'L';\n            }\n        }\n        var distributionLine = series.chart.renderer.drawPath(new _syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_1__.PathOption(series.chart.element.id + '_Series_' + series.index + '_NDLine', 'transparent', 2, series.chart.themeStyle.histogram || series.chart.themeStyle.errorBar, series.opacity, series.dashArray, direction), new Int32Array([series.clipRect.x, series.clipRect.y]));\n        distributionLine.style.visibility = (!series.chart.enableCanvas) ? ((((series.animation.enable && _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.animationMode !== 'Disable') || _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.animationMode === 'Enable') &&\n            series.chart.animateSeries) ? 'hidden' : 'visible') : null;\n        if (!series.chart.enableCanvas) {\n            series.seriesElement.appendChild(distributionLine);\n        }\n    };\n    /**\n     * Animates the series.\n     *\n     * @param  {Series} series - Defines the series to animate.\n     * @returns {void}\n     * @private\n     */\n    HistogramSeries.prototype.doAnimation = function (series) {\n        _super.prototype.doAnimation.call(this, series);\n        if (series.showNormalDistribution) {\n            (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_0__.templateAnimate)(series.seriesElement.lastElementChild, ((series.animation.duration === 0) ? 1000 : series.animation.duration), 500, 'FadeIn');\n        }\n    };\n    /**\n     * Updates the direction of rendering for the specified series.\n     *\n     * @param {Series} series - The series to be rendered.\n     * @returns {void}\n     * @private\n     */\n    HistogramSeries.prototype.updateDirection = function (series) {\n        this.render(series);\n        if (series.marker.visible) {\n            (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_0__.appendChildElement)(series.chart.enableCanvas, series.chart.seriesElements, series.symbolElement, true);\n        }\n        if (series.marker.dataLabel.visible && series.chart.dataLabelModule) {\n            series.chart.dataLabelCollections = [];\n            series.chart.dataLabelModule.render(series, series.chart, series.marker.dataLabel);\n            if (series.textElement) {\n                (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_0__.appendChildElement)(series.chart.enableCanvas, series.chart.dataLabelElements, series.shapeElement, true);\n                (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_0__.appendChildElement)(series.chart.enableCanvas, series.chart.dataLabelElements, series.textElement, true);\n            }\n        }\n    };\n    /**\n     * Get module name.\n     *\n     * @returns {string} - Returns the module name.\n     */\n    HistogramSeries.prototype.getModuleName = function () {\n        return 'HistogramSeries';\n        /**\n         * return the module name.\n         */\n    };\n    /**\n     * To destroy the histogram series.\n     *\n     * @returns {void}\n     * @private\n     */\n    HistogramSeries.prototype.destroy = function () {\n        /**\n         * Destroy method performed here.\n         */\n    };\n    return HistogramSeries;\n}(_column_series__WEBPACK_IMPORTED_MODULE_2__.ColumnSeries));\n\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-charts/src/chart/series/histogram-series.js?");

/***/ }),

/***/ "./node_modules/@syncfusion/ej2-charts/src/chart/series/line-series.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-charts/src/chart/series/line-series.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LineSeries: () => (/* binding */ LineSeries)\n/* harmony export */ });\n/* harmony import */ var _common_utils_helper__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../common/utils/helper */ \"./node_modules/@syncfusion/ej2-charts/src/common/utils/helper.js\");\n/* harmony import */ var _syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @syncfusion/ej2-svg-base */ \"./node_modules/@syncfusion/ej2-svg-base/index.js\");\n/* harmony import */ var _line_base__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./line-base */ \"./node_modules/@syncfusion/ej2-charts/src/chart/series/line-base.js\");\nvar __extends = (undefined && undefined.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n\n\n\n/**\n * The `LineSeries` module is used to render the line series.\n */\nvar LineSeries = /** @class */ (function (_super) {\n    __extends(LineSeries, _super);\n    function LineSeries() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * Renders the line series based on the provided axis and inversion status.\n     *\n     * @param {Series} series - The series to render.\n     * @param {Axis} xAxis - The X-axis associated with the series.\n     * @param {Axis} yAxis - The Y-axis associated with the series.\n     * @param {boolean} isInverted - Specifies whether the chart is inverted.\n     * @param {boolean} pointAnimate - Specifies whether the point has to be animated or not.\n     * @param {boolean} pointUpdate - Specifies whether the point has to be updated or not.\n     * @returns {void}\n     * @private\n     */\n    LineSeries.prototype.render = function (series, xAxis, yAxis, isInverted, pointAnimate, pointUpdate) {\n        var point1;\n        var point2;\n        var direction = '';\n        var prevPoint = null;\n        var startPoint = 'M';\n        var isPolar = (series.chart && series.chart.chartAreaType === 'PolarRadar');\n        var isDrop = (series.emptyPointSettings && series.emptyPointSettings.mode === 'Drop');\n        var getCoordinate = isPolar ? _common_utils_helper__WEBPACK_IMPORTED_MODULE_0__.TransformToVisible : _common_utils_helper__WEBPACK_IMPORTED_MODULE_0__.getPoint;\n        var visiblePoints = series.category === 'TrendLine' ? series.points : this.enableComplexProperty(series);\n        for (var _i = 0, visiblePoints_1 = visiblePoints; _i < visiblePoints_1.length; _i++) {\n            var point = visiblePoints_1[_i];\n            point.regions = [];\n            point.symbolLocations = [];\n            if (point.visible && (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_0__.withInRange)(visiblePoints[point.index - 1], point, visiblePoints[point.index + 1], series)) {\n                direction += this.getLineDirection(prevPoint, point, series, isInverted, getCoordinate, startPoint);\n                startPoint = prevPoint ? 'L' : startPoint;\n                prevPoint = point;\n                this.storePointLocation(point, series, isInverted, getCoordinate);\n                if (direction === '' && visiblePoints.length === 1) {\n                    direction = 'M ' + point.symbolLocations[0].x + ' ' + point.symbolLocations[0].y;\n                }\n            }\n            else {\n                prevPoint = isDrop ? prevPoint : null;\n                startPoint = isDrop ? startPoint : 'M';\n            }\n        }\n        if (isPolar) {\n            if (series.isClosed) {\n                var points = this.getFirstLastVisiblePoint(visiblePoints);\n                point2 = getCoordinate(points.last.xValue, points.last.yValue, xAxis, yAxis, isInverted, series);\n                point1 = getCoordinate(points.first.xValue, points.first.yValue, xAxis, yAxis, isInverted, series);\n                direction = direction.concat(startPoint + ' ' + point2.x + ' ' + point2.y + ' ' + 'L' + ' ' + point1.x + ' ' + point1.y);\n            }\n        }\n        var name = series.category === 'Indicator' ? series.chart.element.id + '_Indicator_' + series.index + '_' + series.name :\n            series.category === 'TrendLine' ? series.chart.element.id + '_Series_' + series.sourceIndex + '_TrendLine_' + series.index :\n                series.chart.element.id + '_Series_' + (series.index === undefined ? series.category : series.index);\n        var options = new _syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_1__.PathOption(name, 'none', series.width, series.interior, series.opacity, series.dashArray, direction);\n        this[pointAnimate ? 'addPath' : 'appendLinePath'](options, series, '');\n        if (!pointUpdate) {\n            this.renderMarker(series);\n        }\n    };\n    /**\n     * To animate point for line series.\n     *\n     * @returns {void}\n     * @private\n     */\n    LineSeries.prototype.updateDirection = function (series, point) {\n        this.render(series, series.xAxis, series.yAxis, series.chart.requireInvertedAxis, false, true);\n        for (var i = 0; i < point.length; i++) {\n            if (series.marker && series.marker.visible) {\n                series.chart.markerRender.renderMarker(series, series.points[point[i]], series.points[point[i]].symbolLocations[0], null, true);\n            }\n            if (series.marker.dataLabel.visible && series.chart.dataLabelModule) {\n                series.chart.dataLabelModule.commonId = series.chart.element.id + '_Series_' + series.index + '_Point_';\n                series.chart.dataLabelModule.renderDataLabel(series, series.points[point[i]], null, series.marker.dataLabel);\n            }\n        }\n    };\n    /**\n     * Animates the series.\n     *\n     * @param  {Series} series - Defines the series to animate.\n     * @returns {void}\n     * @private\n     */\n    LineSeries.prototype.doAnimation = function (series) {\n        var option = series.animation;\n        this.doProgressiveAnimation(series, option);\n    };\n    /**\n     * Get module name.\n     *\n     * @returns {string} - Returns the module name.\n     */\n    LineSeries.prototype.getModuleName = function () {\n        /**\n         * Returns the module name of the series\n         */\n        return 'LineSeries';\n    };\n    /**\n     * To destroy the line series.\n     *\n     * @returns {void}\n     * @private\n     */\n    LineSeries.prototype.destroy = function () {\n        /**\n         * Destroy method performed here.\n         */\n    };\n    return LineSeries;\n}(_line_base__WEBPACK_IMPORTED_MODULE_2__.LineBase));\n\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-charts/src/chart/series/line-series.js?");

/***/ })

}]);