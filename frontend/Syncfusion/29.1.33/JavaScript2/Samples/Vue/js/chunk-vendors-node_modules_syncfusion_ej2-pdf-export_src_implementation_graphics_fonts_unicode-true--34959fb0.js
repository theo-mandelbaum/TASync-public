"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkej2_vue_samples"] = self["webpackChunkej2_vue_samples"] || []).push([["chunk-vendors-node_modules_syncfusion_ej2-pdf-export_src_implementation_graphics_fonts_unicode-true--34959fb0"],{

/***/ "./node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/fonts/unicode-true-type-font.js":
/*!*************************************************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/fonts/unicode-true-type-font.js ***!
  \*************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   UnicodeTrueTypeFont: () => (/* binding */ UnicodeTrueTypeFont)\n/* harmony export */ });\n/* harmony import */ var _graphics_images_index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./../../graphics/images/index */ \"./node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/images/index.js\");\n/* harmony import */ var _ttf_reader__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ttf-reader */ \"./node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/fonts/ttf-reader.js\");\n/* harmony import */ var _primitives_pdf_dictionary__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./../../primitives/pdf-dictionary */ \"./node_modules/@syncfusion/ej2-pdf-export/src/implementation/primitives/pdf-dictionary.js\");\n/* harmony import */ var _primitives_pdf_stream__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./../../primitives/pdf-stream */ \"./node_modules/@syncfusion/ej2-pdf-export/src/implementation/primitives/pdf-stream.js\");\n/* harmony import */ var _primitives_pdf_array__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./../../primitives/pdf-array */ \"./node_modules/@syncfusion/ej2-pdf-export/src/implementation/primitives/pdf-array.js\");\n/* harmony import */ var _primitives_pdf_name__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./../../primitives/pdf-name */ \"./node_modules/@syncfusion/ej2-pdf-export/src/implementation/primitives/pdf-name.js\");\n/* harmony import */ var _primitives_pdf_number__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./../../primitives/pdf-number */ \"./node_modules/@syncfusion/ej2-pdf-export/src/implementation/primitives/pdf-number.js\");\n/* harmony import */ var _primitives_pdf_string__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./../../primitives/pdf-string */ \"./node_modules/@syncfusion/ej2-pdf-export/src/implementation/primitives/pdf-string.js\");\n/* harmony import */ var _primitives_pdf_reference__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./../../primitives/pdf-reference */ \"./node_modules/@syncfusion/ej2-pdf-export/src/implementation/primitives/pdf-reference.js\");\n/* harmony import */ var _pdf_font_metrics__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./pdf-font-metrics */ \"./node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/fonts/pdf-font-metrics.js\");\n/* harmony import */ var _input_output_pdf_dictionary_properties__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./../../input-output/pdf-dictionary-properties */ \"./node_modules/@syncfusion/ej2-pdf-export/src/implementation/input-output/pdf-dictionary-properties.js\");\n/* harmony import */ var _collections_dictionary__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./../../collections/dictionary */ \"./node_modules/@syncfusion/ej2-pdf-export/src/implementation/collections/dictionary.js\");\n/* harmony import */ var _enum__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./enum */ \"./node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/fonts/enum.js\");\n/* harmony import */ var _drawing_pdf_drawing__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./../../drawing/pdf-drawing */ \"./node_modules/@syncfusion/ej2-pdf-export/src/implementation/drawing/pdf-drawing.js\");\n/* harmony import */ var _input_output_pdf_operators__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./../../input-output/pdf-operators */ \"./node_modules/@syncfusion/ej2-pdf-export/src/implementation/input-output/pdf-operators.js\");\n/**\n * TrueTypeFont.ts class for EJ2-PDF\n */\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar UnicodeTrueTypeFont = /** @class */ (function () {\n    /* tslint:enable */\n    //Constructors\n    /**\n     * Initializes a new instance of the `PdfTrueTypeFont` class.\n     * @private\n     */\n    function UnicodeTrueTypeFont(base64String, size) {\n        // Fields\n        this.nameString = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n        /**\n         * Specifies the Internal variable to store fields of `PdfDictionaryProperties`.\n         * @private\n         */\n        this.dictionaryProperties = new _input_output_pdf_dictionary_properties__WEBPACK_IMPORTED_MODULE_10__.DictionaryProperties();\n        /**\n         * Indicates whether the font program is compressed or not.\n         * @private\n         */\n        this.isCompress = false;\n        /**\n         * Indicates whether the font is embedded or not.\n         */\n        this.isEmbedFont = false;\n        /**\n         * Cmap table's start prefix.\n         */\n        /* tslint:disable */\n        this.cmapPrefix = '/CIDInit /ProcSet findresource begin\\n12 dict begin\\nbegincmap' + _input_output_pdf_operators__WEBPACK_IMPORTED_MODULE_14__.Operators.newLine + '/CIDSystemInfo << /Registry (Adobe)/Ordering (UCS)/Supplement 0>> def\\n/CMapName ' + '/Adobe-Identity-UCS def\\n/CMapType 2 def\\n1 begincodespacerange' + _input_output_pdf_operators__WEBPACK_IMPORTED_MODULE_14__.Operators.newLine;\n        /* tslint:enable */\n        /**\n         * Cmap table's start suffix.\n         */\n        this.cmapEndCodespaceRange = 'endcodespacerange' + _input_output_pdf_operators__WEBPACK_IMPORTED_MODULE_14__.Operators.newLine;\n        /**\n         * Cmap's begin range marker.\n         */\n        this.cmapBeginRange = 'beginbfrange' + _input_output_pdf_operators__WEBPACK_IMPORTED_MODULE_14__.Operators.newLine;\n        /**\n         * Cmap's end range marker.\n         */\n        this.cmapEndRange = 'endbfrange' + _input_output_pdf_operators__WEBPACK_IMPORTED_MODULE_14__.Operators.newLine;\n        /**\n         * Cmap table's end\n         */\n        /* tslint:disable */\n        this.cmapSuffix = 'endbfrange\\nendcmap\\nCMapName currentdict ' + '/CMap defineresource pop\\nend end' + _input_output_pdf_operators__WEBPACK_IMPORTED_MODULE_14__.Operators.newLine;\n        if (base64String === null || base64String === undefined) {\n            throw new Error('ArgumentNullException:base64String');\n        }\n        this.fontSize = size;\n        this.fontString = base64String;\n        this.Initialize();\n    }\n    //Implementation\n    /**\n     * Returns width of the char symbol.\n     */\n    UnicodeTrueTypeFont.prototype.getCharWidth = function (charCode) {\n        var codeWidth = this.ttfReader.getCharWidth(charCode);\n        return codeWidth;\n    };\n    /**\n     * Returns width of the text line.\n     */\n    UnicodeTrueTypeFont.prototype.getLineWidth = function (line) {\n        // if (line == null) {\n        //     throw new Error('ArgumentNullException : line');\n        // }\n        var width = 0;\n        for (var i = 0, len = line.length; i < len; i++) {\n            var ch = line[i];\n            var charWidth = this.getCharWidth(ch);\n            width += charWidth;\n        }\n        return width;\n    };\n    /**\n     * Initializes a new instance of the `PdfTrueTypeFont` class.\n     * @private\n     */\n    UnicodeTrueTypeFont.prototype.Initialize = function () {\n        var byteArray = new _graphics_images_index__WEBPACK_IMPORTED_MODULE_0__.ByteArray(this.fontString.length);\n        byteArray.writeFromBase64String(this.fontString);\n        this.fontData = byteArray.internalBuffer;\n        this.ttfReader = new _ttf_reader__WEBPACK_IMPORTED_MODULE_1__.TtfReader(this.fontData);\n        this.ttfMetrics = this.ttfReader.metrics;\n    };\n    UnicodeTrueTypeFont.prototype.createInternals = function () {\n        this.fontDictionary = new _primitives_pdf_dictionary__WEBPACK_IMPORTED_MODULE_2__.PdfDictionary();\n        this.fontProgram = new _primitives_pdf_stream__WEBPACK_IMPORTED_MODULE_3__.PdfStream();\n        this.cmap = new _primitives_pdf_stream__WEBPACK_IMPORTED_MODULE_3__.PdfStream();\n        this.descendantFont = new _primitives_pdf_dictionary__WEBPACK_IMPORTED_MODULE_2__.PdfDictionary();\n        this.metrics = new _pdf_font_metrics__WEBPACK_IMPORTED_MODULE_9__.PdfFontMetrics();\n        this.ttfReader.createInternals();\n        this.ttfMetrics = this.ttfReader.metrics;\n        this.initializeMetrics();\n        // Create all the dictionaries of the font.\n        this.subsetName = this.getFontName();\n        this.createDescendantFont();\n        this.createCmap();\n        this.createFontDictionary();\n        this.createFontProgram();\n    };\n    UnicodeTrueTypeFont.prototype.getInternals = function () {\n        return this.fontDictionary;\n    };\n    /**\n     * Initializes metrics.\n     */\n    UnicodeTrueTypeFont.prototype.initializeMetrics = function () {\n        var ttfMetrics = this.ttfReader.metrics;\n        this.metrics.ascent = ttfMetrics.macAscent;\n        this.metrics.descent = ttfMetrics.macDescent;\n        this.metrics.height = ttfMetrics.macAscent - ttfMetrics.macDescent + ttfMetrics.lineGap;\n        this.metrics.name = ttfMetrics.fontFamily;\n        this.metrics.postScriptName = ttfMetrics.postScriptName;\n        this.metrics.size = this.fontSize;\n        this.metrics.widthTable = new _pdf_font_metrics__WEBPACK_IMPORTED_MODULE_9__.StandardWidthTable(ttfMetrics.widthTable);\n        this.metrics.lineGap = ttfMetrics.lineGap;\n        this.metrics.subScriptSizeFactor = ttfMetrics.subScriptSizeFactor;\n        this.metrics.superscriptSizeFactor = ttfMetrics.superscriptSizeFactor;\n        this.metrics.isBold = ttfMetrics.isBold;\n    };\n    /**\n     * Gets random string.\n     */\n    UnicodeTrueTypeFont.prototype.getFontName = function () {\n        var builder = '';\n        var name;\n        // if (this.isEmbed === false) {\n        for (var i = 0; i < 6; i++) {\n            var index = Math.floor(Math.random() * (25 - 0 + 1)) + 0;\n            builder += this.nameString[index];\n        }\n        builder += '+';\n        // }\n        builder += this.ttfReader.metrics.postScriptName;\n        name = builder.toString();\n        // if (name === '') {\n        //     name = this.ttfReader.metrics.fontFamily;\n        // }\n        name = this.formatName(name);\n        return name;\n    };\n    /**\n     * Generates name of the font.\n     */\n    UnicodeTrueTypeFont.prototype.formatName = function (fontName) {\n        // if (fontName === null) {\n        //     throw new Error('ArgumentNullException : fontName');\n        // }\n        // if (fontName === '') {\n        //     throw new Error('ArgumentOutOfRangeException : fontName, Parameter can not be empty');\n        // }\n        var ret = fontName.replace('(', '#28');\n        ret = ret.replace(')', '#29');\n        ret = ret.replace('[', '#5B');\n        ret = ret.replace(']', '#5D');\n        ret = ret.replace('<', '#3C');\n        ret = ret.replace('>', '#3E');\n        ret = ret.replace('{', '#7B');\n        ret = ret.replace('}', '#7D');\n        ret = ret.replace('/', '#2F');\n        ret = ret.replace('%', '#25');\n        return ret.replace(' ', '#20');\n    };\n    /**\n     * Creates descendant font.\n     */\n    UnicodeTrueTypeFont.prototype.createDescendantFont = function () {\n        // Set property used to clone Font every time\n        this.descendantFont.isResource = true;\n        this.descendantFont.descendantFontBeginSave = new _primitives_pdf_dictionary__WEBPACK_IMPORTED_MODULE_2__.SaveDescendantFontEventHandler(this);\n        this.descendantFont.items.setValue(this.dictionaryProperties.type, new _primitives_pdf_name__WEBPACK_IMPORTED_MODULE_5__.PdfName(this.dictionaryProperties.font));\n        this.descendantFont.items.setValue(this.dictionaryProperties.subtype, new _primitives_pdf_name__WEBPACK_IMPORTED_MODULE_5__.PdfName(this.dictionaryProperties.cIDFontType2));\n        this.descendantFont.items.setValue(this.dictionaryProperties.baseFont, new _primitives_pdf_name__WEBPACK_IMPORTED_MODULE_5__.PdfName(this.subsetName));\n        this.descendantFont.items.setValue(this.dictionaryProperties.cIDToGIDMap, new _primitives_pdf_name__WEBPACK_IMPORTED_MODULE_5__.PdfName(this.dictionaryProperties.identity));\n        this.descendantFont.items.setValue(this.dictionaryProperties.dw, new _primitives_pdf_number__WEBPACK_IMPORTED_MODULE_6__.PdfNumber(1000));\n        this.fontDescriptor = this.createFontDescriptor();\n        this.descendantFont.items.setValue(this.dictionaryProperties.fontDescriptor, new _primitives_pdf_reference__WEBPACK_IMPORTED_MODULE_8__.PdfReferenceHolder(this.fontDescriptor));\n        var systemInfo = this.createSystemInfo();\n        this.descendantFont.items.setValue(this.dictionaryProperties.cIDSystemInfo, systemInfo);\n    };\n    /**\n     * Creates font descriptor.\n     */\n    UnicodeTrueTypeFont.prototype.createFontDescriptor = function () {\n        var descriptor = new _primitives_pdf_dictionary__WEBPACK_IMPORTED_MODULE_2__.PdfDictionary();\n        var metrics = this.ttfReader.metrics;\n        // Set property used to clone Font every time\n        descriptor.isResource = true;\n        descriptor.items.setValue(this.dictionaryProperties.type, new _primitives_pdf_name__WEBPACK_IMPORTED_MODULE_5__.PdfName(this.dictionaryProperties.fontDescriptor));\n        descriptor.items.setValue(this.dictionaryProperties.fontName, new _primitives_pdf_name__WEBPACK_IMPORTED_MODULE_5__.PdfName(this.subsetName));\n        descriptor.items.setValue(this.dictionaryProperties.flags, new _primitives_pdf_number__WEBPACK_IMPORTED_MODULE_6__.PdfNumber(this.getDescriptorFlags()));\n        descriptor.items.setValue(this.dictionaryProperties.fontBBox, _primitives_pdf_array__WEBPACK_IMPORTED_MODULE_4__.PdfArray.fromRectangle(this.getBoundBox()));\n        descriptor.items.setValue(this.dictionaryProperties.missingWidth, new _primitives_pdf_number__WEBPACK_IMPORTED_MODULE_6__.PdfNumber(metrics.widthTable[32]));\n        descriptor.items.setValue(this.dictionaryProperties.stemV, new _primitives_pdf_number__WEBPACK_IMPORTED_MODULE_6__.PdfNumber(metrics.stemV));\n        descriptor.items.setValue(this.dictionaryProperties.italicAngle, new _primitives_pdf_number__WEBPACK_IMPORTED_MODULE_6__.PdfNumber(metrics.italicAngle));\n        descriptor.items.setValue(this.dictionaryProperties.capHeight, new _primitives_pdf_number__WEBPACK_IMPORTED_MODULE_6__.PdfNumber(metrics.capHeight));\n        descriptor.items.setValue(this.dictionaryProperties.ascent, new _primitives_pdf_number__WEBPACK_IMPORTED_MODULE_6__.PdfNumber(metrics.winAscent));\n        descriptor.items.setValue(this.dictionaryProperties.descent, new _primitives_pdf_number__WEBPACK_IMPORTED_MODULE_6__.PdfNumber(metrics.winDescent));\n        descriptor.items.setValue(this.dictionaryProperties.leading, new _primitives_pdf_number__WEBPACK_IMPORTED_MODULE_6__.PdfNumber(metrics.leading));\n        descriptor.items.setValue(this.dictionaryProperties.avgWidth, new _primitives_pdf_number__WEBPACK_IMPORTED_MODULE_6__.PdfNumber(metrics.widthTable[32]));\n        descriptor.items.setValue(this.dictionaryProperties.fontFile2, new _primitives_pdf_reference__WEBPACK_IMPORTED_MODULE_8__.PdfReferenceHolder(this.fontProgram));\n        descriptor.items.setValue(this.dictionaryProperties.maxWidth, new _primitives_pdf_number__WEBPACK_IMPORTED_MODULE_6__.PdfNumber(metrics.widthTable[32]));\n        descriptor.items.setValue(this.dictionaryProperties.xHeight, new _primitives_pdf_number__WEBPACK_IMPORTED_MODULE_6__.PdfNumber(0));\n        descriptor.items.setValue(this.dictionaryProperties.stemH, new _primitives_pdf_number__WEBPACK_IMPORTED_MODULE_6__.PdfNumber(0));\n        return descriptor;\n    };\n    /**\n     * Generates cmap.\n     * @private\n     */\n    UnicodeTrueTypeFont.prototype.createCmap = function () {\n        this.cmap.cmapBeginSave = new _primitives_pdf_stream__WEBPACK_IMPORTED_MODULE_3__.SaveCmapEventHandler(this);\n    };\n    /**\n     * Generates font dictionary.\n     */\n    UnicodeTrueTypeFont.prototype.createFontDictionary = function () {\n        // Set property used to clone Font every time\n        this.fontDictionary.isResource = true;\n        this.fontDictionary.fontDictionaryBeginSave = new _primitives_pdf_dictionary__WEBPACK_IMPORTED_MODULE_2__.SaveFontDictionaryEventHandler(this);\n        this.fontDictionary.items.setValue(this.dictionaryProperties.type, new _primitives_pdf_name__WEBPACK_IMPORTED_MODULE_5__.PdfName(this.dictionaryProperties.font));\n        this.fontDictionary.items.setValue(this.dictionaryProperties.baseFont, new _primitives_pdf_name__WEBPACK_IMPORTED_MODULE_5__.PdfName(this.subsetName));\n        this.fontDictionary.items.setValue(this.dictionaryProperties.subtype, new _primitives_pdf_name__WEBPACK_IMPORTED_MODULE_5__.PdfName(this.dictionaryProperties.type0));\n        this.fontDictionary.items.setValue(this.dictionaryProperties.encoding, new _primitives_pdf_name__WEBPACK_IMPORTED_MODULE_5__.PdfName(this.dictionaryProperties.identityH));\n        var descFonts = new _primitives_pdf_array__WEBPACK_IMPORTED_MODULE_4__.PdfArray();\n        var reference = new _primitives_pdf_reference__WEBPACK_IMPORTED_MODULE_8__.PdfReferenceHolder(this.descendantFont);\n        // Set property used to clone Font every time\n        descFonts.isFont = true;\n        descFonts.add(reference);\n        this.fontDictionary.items.setValue(this.dictionaryProperties.descendantFonts, descFonts);\n    };\n    /**\n     * Creates font program.\n     */\n    UnicodeTrueTypeFont.prototype.createFontProgram = function () {\n        this.fontProgram.fontProgramBeginSave = new _primitives_pdf_stream__WEBPACK_IMPORTED_MODULE_3__.SaveFontProgramEventHandler(this);\n    };\n    /**\n     * Creates system info dictionary for CID font.\n     * @private\n     */\n    UnicodeTrueTypeFont.prototype.createSystemInfo = function () {\n        var systemInfo = new _primitives_pdf_dictionary__WEBPACK_IMPORTED_MODULE_2__.PdfDictionary();\n        systemInfo.items.setValue(this.dictionaryProperties.registry, new _primitives_pdf_string__WEBPACK_IMPORTED_MODULE_7__.PdfString('Adobe'));\n        systemInfo.items.setValue(this.dictionaryProperties.ordering, new _primitives_pdf_string__WEBPACK_IMPORTED_MODULE_7__.PdfString(this.dictionaryProperties.identity));\n        systemInfo.items.setValue(this.dictionaryProperties.supplement, new _primitives_pdf_number__WEBPACK_IMPORTED_MODULE_6__.PdfNumber(0));\n        return systemInfo;\n    };\n    /**\n     * Runs before font Dictionary will be saved.\n     */\n    UnicodeTrueTypeFont.prototype.descendantFontBeginSave = function () {\n        if (this.usedChars !== null && this.usedChars !== undefined && this.usedChars.size() > 0) {\n            var width = this.getDescendantWidth();\n            if (width !== null) {\n                this.descendantFont.items.setValue(this.dictionaryProperties.w, width);\n            }\n        }\n    };\n    /**\n     * Runs before font Dictionary will be saved.\n     */\n    UnicodeTrueTypeFont.prototype.cmapBeginSave = function () {\n        this.generateCmap();\n    };\n    /**\n     * Runs before font Dictionary will be saved.\n     */\n    /* tslint:disable */\n    UnicodeTrueTypeFont.prototype.fontDictionaryBeginSave = function () {\n        if (this.usedChars !== null && this.usedChars !== undefined && this.usedChars.size() > 0 && !this.fontDictionary.containsKey(this.dictionaryProperties.toUnicode)) {\n            this.fontDictionary.items.setValue(this.dictionaryProperties.toUnicode, new _primitives_pdf_reference__WEBPACK_IMPORTED_MODULE_8__.PdfReferenceHolder(this.cmap));\n        }\n    };\n    /* tslint:enable */\n    /**\n     * Runs before font program stream save.\n     */\n    UnicodeTrueTypeFont.prototype.fontProgramBeginSave = function () {\n        this.isCompress = true;\n        this.generateFontProgram();\n    };\n    /**\n     * Gets width description pad array for c i d font.\n     */\n    UnicodeTrueTypeFont.prototype.getDescendantWidth = function () {\n        var array = new _primitives_pdf_array__WEBPACK_IMPORTED_MODULE_4__.PdfArray();\n        if (this.usedChars !== null && this.usedChars !== undefined && this.usedChars.size() > 0) {\n            var glyphInfo = [];\n            // if (!this.isEmbedFont) {\n            var keys = this.usedChars.keys();\n            for (var i = 0; i < keys.length; i++) {\n                var chLen = keys[i];\n                var glyph = this.ttfReader.getGlyph(chLen);\n                if (glyph.empty) {\n                    continue;\n                }\n                glyphInfo.push(glyph);\n            }\n            // } else {\n            //     glyphInfo = this.ttfReader.getAllGlyphs();\n            // }\n            glyphInfo.sort(function (a, b) { return a.index - b.index; });\n            var firstGlyphIndex = 0;\n            var lastGlyphIndex = 0;\n            var firstGlyphIndexWasSet = false;\n            var widthDetails = new _primitives_pdf_array__WEBPACK_IMPORTED_MODULE_4__.PdfArray();\n            // if (!this.isEmbedFont) {\n            for (var i = 0; i < glyphInfo.length; i++) {\n                var glyph = glyphInfo[i];\n                if (!firstGlyphIndexWasSet) {\n                    firstGlyphIndexWasSet = true;\n                    firstGlyphIndex = glyph.index;\n                    lastGlyphIndex = glyph.index - 1;\n                }\n                if ((lastGlyphIndex + 1 !== glyph.index || (i + 1 === glyphInfo.length)) && glyphInfo.length > 1) {\n                    // Add glyph index / width.\n                    array.add(new _primitives_pdf_number__WEBPACK_IMPORTED_MODULE_6__.PdfNumber(firstGlyphIndex));\n                    if (i !== 0) {\n                        array.add(widthDetails);\n                    }\n                    firstGlyphIndex = glyph.index;\n                    widthDetails = new _primitives_pdf_array__WEBPACK_IMPORTED_MODULE_4__.PdfArray();\n                }\n                widthDetails.add(new _primitives_pdf_number__WEBPACK_IMPORTED_MODULE_6__.PdfNumber(glyph.width));\n                if (i + 1 === glyphInfo.length) {\n                    array.add(new _primitives_pdf_number__WEBPACK_IMPORTED_MODULE_6__.PdfNumber(firstGlyphIndex));\n                    array.add(widthDetails);\n                }\n                lastGlyphIndex = glyph.index;\n            }\n            // } else {\n            //     for (let i : number = 0; i < glyphInfo.length; i++) {\n            //         let glyph : TtfGlyphInfo = glyphInfo[i];\n            //         if (!firstGlyphIndexWasSet) {\n            //             firstGlyphIndexWasSet = true;\n            //             lastGlyphIndex = glyph.index - 1;\n            //         }\n            //         firstGlyphIndex = glyph.index;\n            //         if ((lastGlyphIndex + 1 === glyph.index || (i + 1 === glyphInfo.length)) && glyphInfo.length > 1) {\n            //             // Add glyph index / width.\n            //             widthDetails.add(new PdfNumber(glyph.width));\n            //             array.add(new PdfNumber(firstGlyphIndex));\n            //             array.add(widthDetails);\n            //             widthDetails = new PdfArray();\n            //         }\n            //         lastGlyphIndex = glyph.index;\n            //     }\n            // }\n        }\n        return array;\n    };\n    /**\n     * Creates cmap.\n     */\n    UnicodeTrueTypeFont.prototype.generateCmap = function () {\n        if (this.usedChars !== null && this.usedChars !== undefined && this.usedChars.size() > 0) {\n            var glyphChars = this.ttfReader.getGlyphChars(this.usedChars);\n            if (glyphChars.size() > 0) {\n                var keys = glyphChars.keys().sort();\n                // add first and last glyph indexes\n                var first = keys[0];\n                var last = keys[keys.length - 1];\n                var middlePart = this.toHexString(first, false) + this.toHexString(last, false) + _input_output_pdf_operators__WEBPACK_IMPORTED_MODULE_14__.Operators.newLine;\n                var builder = '';\n                builder += this.cmapPrefix;\n                builder += middlePart;\n                builder += this.cmapEndCodespaceRange;\n                var nextRange = 0;\n                for (var i = 0; i < keys.length; i++) {\n                    if (nextRange === 0) {\n                        if (i !== 0) {\n                            builder += this.cmapEndRange;\n                        }\n                        nextRange = Math.min(100, keys.length - i);\n                        builder += nextRange;\n                        builder += _input_output_pdf_operators__WEBPACK_IMPORTED_MODULE_14__.Operators.whiteSpace;\n                        builder += this.cmapBeginRange;\n                    }\n                    nextRange -= 1;\n                    var key = keys[i];\n                    /* tslint:disable */\n                    builder += this.toHexString(key, true) + this.toHexString(key, true) + this.toHexString(glyphChars.getValue(key), true) + '\\n';\n                    /* tslint:enable */\n                }\n                builder += this.cmapSuffix;\n                this.cmap.clearStream();\n                this.cmap.isResource = true;\n                this.cmap.write(builder);\n            }\n        }\n    };\n    /**\n     * Generates font program.\n     */\n    UnicodeTrueTypeFont.prototype.generateFontProgram = function () {\n        var fontProgram = null;\n        this.usedChars = (this.usedChars === null || this.usedChars === undefined) ? new _collections_dictionary__WEBPACK_IMPORTED_MODULE_11__.Dictionary() : this.usedChars;\n        this.ttfReader.setOffset(0);\n        fontProgram = this.ttfReader.readFontProgram(this.usedChars);\n        this.fontProgram.clearStream();\n        this.fontProgram.isResource = true;\n        this.fontProgram.writeBytes(fontProgram);\n    };\n    /**\n     * Calculates flags for the font descriptor.\n     * @private\n     */\n    UnicodeTrueTypeFont.prototype.getDescriptorFlags = function () {\n        var flags = 0;\n        var metrics = this.ttfReader.metrics;\n        if (metrics.isFixedPitch) {\n            flags |= _enum__WEBPACK_IMPORTED_MODULE_12__.FontDescriptorFlags.FixedPitch;\n        }\n        if (metrics.isSymbol) {\n            flags |= _enum__WEBPACK_IMPORTED_MODULE_12__.FontDescriptorFlags.Symbolic;\n        }\n        else {\n            flags |= _enum__WEBPACK_IMPORTED_MODULE_12__.FontDescriptorFlags.Nonsymbolic;\n        }\n        if (metrics.isItalic) {\n            flags |= _enum__WEBPACK_IMPORTED_MODULE_12__.FontDescriptorFlags.Italic;\n        }\n        if (metrics.isBold) {\n            flags |= _enum__WEBPACK_IMPORTED_MODULE_12__.FontDescriptorFlags.ForceBold;\n        }\n        return flags;\n    };\n    /**\n     * Calculates BoundBox of the descriptor.\n     * @private\n     */\n    UnicodeTrueTypeFont.prototype.getBoundBox = function () {\n        var rect = this.ttfReader.metrics.fontBox;\n        var width = Math.abs(rect.right - rect.left);\n        var height = Math.abs(rect.top - rect.bottom);\n        var rectangle = new _drawing_pdf_drawing__WEBPACK_IMPORTED_MODULE_13__.RectangleF(rect.left, rect.bottom, width, height);\n        return rectangle;\n    };\n    /**\n     * Converts integer of decimal system to hex integer.\n     */\n    UnicodeTrueTypeFont.prototype.toHexString = function (n, isCaseChange) {\n        var s = n.toString(16);\n        if (isCaseChange) {\n            s = s.toUpperCase();\n        }\n        return '<0000'.substring(0, 5 - s.length) + s + '>';\n    };\n    /**\n     * Stores used symbols.\n     */\n    UnicodeTrueTypeFont.prototype.setSymbols = function (text) {\n        if (text === null) {\n            throw new Error('Argument Null Exception : text');\n        }\n        if (this.usedChars === null || this.usedChars === undefined) {\n            this.usedChars = new _collections_dictionary__WEBPACK_IMPORTED_MODULE_11__.Dictionary();\n        }\n        for (var i = 0; i < text.length; i++) {\n            var ch = text[i];\n            this.usedChars.setValue(ch, String.fromCharCode(0));\n        }\n        // else {\n        //     if (text === null) {\n        //         throw new Error('Argument Null Exception : glyphs');\n        //     }\n        //     if (this.usedChars === null || this.usedChars === undefined) {\n        //             this.usedChars = new Dictionary<string, string>();\n        //     }\n        //     for (let i : number = 0; i < text.length; i++) {\n        //         let glyphIndex : number = text[i];\n        //         let glyph : TtfGlyphInfo =  this.ttfReader.getGlyph(glyphIndex);\n        //         if (!glyph == null) {\n        //             let c : string = glyph.charCode.toLocaleString();\n        //             this.usedChars.setValue(c, String.fromCharCode(0));\n        //         }\n        //     }\n        // }\n        if (this.isEmbedFont === false) {\n            this.getDescendantWidth();\n        }\n    };\n    return UnicodeTrueTypeFont;\n}());\n\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/fonts/unicode-true-type-font.js?");

/***/ })

}]);