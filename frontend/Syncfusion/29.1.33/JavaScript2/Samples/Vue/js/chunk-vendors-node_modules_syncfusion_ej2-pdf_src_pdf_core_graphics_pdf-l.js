"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkej2_vue_samples"] = self["webpackChunkej2_vue_samples"] || []).push([["chunk-vendors-node_modules_syncfusion_ej2-pdf_src_pdf_core_graphics_pdf-l"],{

/***/ "./node_modules/@syncfusion/ej2-pdf/src/pdf/core/graphics/pdf-layouter.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-pdf/src/pdf/core/graphics/pdf-layouter.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PdfLayoutFormat: () => (/* binding */ PdfLayoutFormat),\n/* harmony export */   PdfLayoutResult: () => (/* binding */ PdfLayoutResult),\n/* harmony export */   _PageLayoutResult: () => (/* binding */ _PageLayoutResult),\n/* harmony export */   _PdfLayoutParameters: () => (/* binding */ _PdfLayoutParameters)\n/* harmony export */ });\n/* harmony import */ var _enumerator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../enumerator */ \"./node_modules/@syncfusion/ej2-pdf/src/pdf/core/enumerator.js\");\n\n/**\n * Represent the layout format class for pagination\n * // Load an existing PDF document\n * let document: PdfDocument = new PdfDocument(data);\n * // Access the first page\n * let page: PdfPage = document.getPage(0);\n * // Create an instance of list item collection by passing the string array\n * let items: PdfListItemCollection = new PdfListItemCollection(['Excel', 'Power', 'Point', 'Word', 'PDF']);\n * // Create a new PDF ordered list\n * let list: PdfOrderedList = new PdfOrderedList(items);\n * // Create an instance for PDF layout format\n * let layout: PdfLayoutFormat = new PdfLayoutFormat();\n * // Set the layout format\n * layout.break = PdfLayoutBreakType.fitPage;\n * layout.layout = pdfLayoutType.paginate;\n * // Draw the items using specified bounds and layout format\n * list.draw(page, 0, 20, layout);\n * // Save the document\n * document.save('output.pdf');\n * // Destroy the document\n * document.destroy();\n * ````\n */\nvar PdfLayoutFormat = /** @class */ (function () {\n    /**\n     * Initializes a new instance of the `PdfLayoutFormat` class.\n     *\n     * @param {PdfLayoutFormat}  format Format for pagination.\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data);\n     * // Access the first page of document\n     * let page: PdfPage = document.getPage(0);\n     * // Add the items to list item collection by passing the array of products\n     * let items: PdfListItemCollection = new PdfListItemCollection(['Excel', 'Power', 'Point', 'Word', 'PDF']);\n     * // Create an instance of ordered list\n     * let list: PdfOrderedList = new PdfOrderedList(items);\n     * // Create an instance for layout format for drawing\n     * let layout: PdfLayoutFormat = new PdfLayoutFormat();\n     * // Set the layout format\n     * layout.break = PdfLayoutBreakType.fitPage;\n     * layout.layout = pdfLayoutType.paginate;\n     * // Draw the items using specified bounds and layout format\n     * list.draw(page, 0, 20, layout);\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ````\n     */\n    function PdfLayoutFormat(format) {\n        this._boundSet = false;\n        this._paginateBounds = [];\n        if (format) {\n            this.break = format.break;\n            this.layout = format.layout;\n            this.paginateBounds = format.paginateBounds;\n            this._boundSet = format._boundSet;\n        }\n        else {\n            this.layout = _enumerator__WEBPACK_IMPORTED_MODULE_0__.PdfLayoutType.paginate;\n            this.break = _enumerator__WEBPACK_IMPORTED_MODULE_0__.PdfLayoutBreakType.fitPage;\n        }\n    }\n    Object.defineProperty(PdfLayoutFormat.prototype, \"layout\", {\n        /**\n         * Gets the layout type of the page.\n         *\n         * @returns {PdfLayoutType} The layout type of the page.\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data);\n         * // Access the first page of the document\n         * let page: PdfPage = document.getPage(0);\n         * // Add the items to list item collection by passing the array of products\n         * let items: PdfListItemCollection = new PdfListItemCollection(['Excel', 'Power', 'Point', 'Word', 'PDF']);\n         * // Create a ordered list\n         * let list: PdfOrderedList = new PdfOrderedList(items);\n         * // Create a layout format for drawing\n         * let pageLayout: PdfLayoutFormat = new PdfLayoutFormat();\n         * // Draw the items on the page with specified bounds and layout format\n         * list.draw(page, 0, 20, 500, 700, pageLayout);\n         * // Retrieve the layout type applied to the page layout format\n         * let layoutType: PdfLayoutType = pageLayout.layout;\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ````\n         */\n        get: function () {\n            return this._layout;\n        },\n        /**\n         * Sets the layout type of the page.\n         *\n         * @param {PdfLayoutType} value the  layout type of the page.\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data);\n         * // Access the first page of the document\n         * let page: PdfPage = document.getPage(0);\n         * // Initialize an array of string items\n         * // Add the items to list item collection by passing the array of products\n         * let items: PdfListItemCollection = new PdfListItemCollection(['Excel', 'Power', 'Point', 'Word', 'PDF']);\n         * // Create a new ordered list\n         * let list: PdfOrderedList = new PdfOrderedList(items);\n         * // Create a layout format for drawing\n         * let pageLayout: PdfLayoutFormat = new PdfLayoutFormat();\n         * // Set the layout type to paginate for the page layout format\n         * pageLayout.layout = PdfLayoutType.paginate;\n         * // Draw the items on the page with specified bounds and layout format\n         * list.draw(page, 0, 20, 500, 700, pageLayout);\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ````\n         */\n        set: function (value) {\n            this._layout = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfLayoutFormat.prototype, \"break\", {\n        /**\n         * Gets the layout break type of the page.\n         *\n         * @returns {PdfLayoutBreakType} The layout break type of the page.\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data);\n         * // Access the first page\n         * let page: PdfPage = document.getPage(0);\n         * // Define an array of products\n         * let products: string[] = ['Excel', 'Power', 'Point', 'Word', 'PDF'];\n         * // Add the items to list item collection by passing the array of products\n         * let items: PdfListItemCollection = new PdfListItemCollection(products);\n         * // Create an instance of ordered list\n         * let list: PdfOrderedList = new PdfOrderedList(items);\n         * // Create an layout format for drawing\n         * let pageLayout: PdfLayoutFormat = new PdfLayoutFormat();\n         * // Draw the items on the page\n         * list.draw(page, 0, 20, 500, 700, pageLayout);\n         * // Get the layout break type of the list\n         * let layoutType: PdfLayoutBreakType = pageLayout.break;\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ````\n         */\n        get: function () {\n            return this._break;\n        },\n        /**\n         * Sets the layout break type for the page.\n         *\n         * @param {PdfLayoutBreakType} value The layout break type to set for the page.\n         * ```typescript\n         * //Load an existing document\n         * let document: PdfDocument = new PdfDocument(data);\n         * // Access the first page\n         * let page: PdfPage = document.getPage(0);\n         * // Add the items to list item collection by passing the array of products\n         * let items: PdfListItemCollection = new PdfListItemCollection(['Excel', 'Power', 'Point', 'Word', 'PDF']);\n         * // Create a ordered list\n         * let list: PdfOrderedList = new PdfOrderedList(items);\n         * // Create an layout format for drawing\n         * let pageLayout: PdfLayoutFormat = new PdfLayoutFormat();\n         * // Set the layout break type for the page\n         * pageLayout.break = PdfLayoutBreakType.fitPage;\n         * // Draw the items on the page\n         * list.draw(page, 0, 20, 500, 700, pageLayout);\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ````\n         */\n        set: function (value) {\n            this._break = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfLayoutFormat.prototype, \"paginateBounds\", {\n        /**\n         * Gets the paginate bounds of the page.\n         *\n         * @returns {number[]} Array containing the paginate bounds.\n         * ```typescript\n         * // Load the existing document\n         * let document: PdfDocument = new PdfDocument(data);\n         * // Access the first page\n         * let page: PdfPage = document.getPage(0);\n         * // Add the items to list item collection by passing the array of products\n         * let items: PdfListItemCollection = new PdfListItemCollection(['Excel', 'Power', 'Point', 'Word', 'PDF']);\n         * // Create an ordered list\n         * let list: PdfOrderedList = new PdfOrderedList(items);\n         * // Create an layout format for drawing\n         * let pageLayout: PdfLayoutFormat = new PdfLayoutFormat();\n         * // Draw the items on the page\n         * list.draw(page, 0, 20, 500, 700, pageLayout);\n         * // Get the paginate bounds\n         * let layoutType: paginateBounds = pageLayout.paginateBounds;\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ````\n         */\n        get: function () {\n            return this._paginateBounds;\n        },\n        /**\n         * Sets the paginate bounds for the page.\n         *\n         * @param {number[]} value Array representing the paginate bounds to set for the page.\n         * ```typescript\n         * // Load the existing document\n         * let document: PdfDocument = new PdfDocument(data);\n         * // Access the first page\n         * let page: PdfPage = document.getPage(0);\n         * // Add the items to list item collection by passing the array of products\n         * let items: PdfListItemCollection = new PdfListItemCollection(['Excel', 'Power', 'Point', 'Word', 'PDF']);\n         * // Create a ordered list\n         * let list: PdfOrderedList = new PdfOrderedList(items);\n         * // Create an layout format for page layout settings\n         * let pageLayout: PdfLayoutFormat = new PdfLayoutFormat();\n         * // Set the paginate bounds for the page\n         * pageLayout.paginateBounds = [0, 0, 500, 700];\n         * // Draw the items on the page\n         * list.draw(page, 0, 20, 500, 700, pageLayout);\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ````\n         */\n        set: function (value) {\n            this._paginateBounds = value;\n            this._boundSet = true;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfLayoutFormat.prototype, \"usePaginateBounds\", {\n        /**\n         * Gets whether to use paginate bounds for pagination.\n         *\n         * @returns {boolean} Whether pagination bounds are used.\n         * ```typescript\n         * // Load the existing document\n         * let document: PdfDocument = new PdfDocument(data);\n         * // Access the first page\n         * let page: PdfPage = document.getPage(0);\n         * // Add the items to list item collection by passing the array of products\n         * let items: PdfListItemCollection = new PdfListItemCollection(['Excel', 'Power', 'Point', 'Word', 'PDF']);\n         * // Create an instance of ordered list\n         * let list: PdfOrderedList = new PdfOrderedList(items);\n         * // Create an layout format for drawing\n         * let pageLayout: PdfLayoutFormat = new PdfLayoutFormat();\n         * // Draw the items on the page\n         * list.draw(page, 0, 20, 500, 700, pageLayout);\n         * // Get whether paginate bounds are used\n         * let usePaginate:  boolean = pageLayout.usePaginateBounds;\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ````\n         */\n        get: function () {\n            return this._boundSet;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return PdfLayoutFormat;\n}());\n\n/**\n * Represents a class for layout result in PDF generation.\n * ```typescript\n * // Load an existing document\n * let document: PdfDocument = new PdfDocument(data);\n * // Access the first page\n * let page: PdfPage = document.getPage(0);\n * // Add the items to list item collection by passing the array of products\n * let items: PdfListItemCollection = new PdfListItemCollection(['Excel', 'Power', 'Point', 'Word', 'PDF']);\n * // Create a new ordered list\n * let list: PdfOrderedList = new PdfOrderedList(items);\n * // Draw the list and access the layout result\n * let result: PdfLayoutResult = list.draw(result.page, result.bounds[0], result.bounds[1], result.bounds[2], result.bounds[3]);\n * // Save the document\n * document.save('output.pdf');\n * // Destroy the document\n * document.destroy();\n * ```\n */\nvar PdfLayoutResult = /** @class */ (function () {\n    /**\n     * Initializes a new instance of the `PdfLayoutResult` class.\n     * Remarks: Internal constructor used to create a new instance of a PDF layout result.\n     *\n     * @param {PdfPage} page The page where the circle annotation is to be placed.\n     * @param {number[]} bounds The bounds within which the list has been drawn.\n     * ```typescript\n     * // Load an existing document\n     * let document: PdfDocument = new PdfDocument(data);\n     * // Access the first page\n     * let page: PdfPage = document.getPage(0);\n     * // Add the items to list item collection by passing the array of products\n     * let items: PdfListItemCollection = new PdfListItemCollection(['Excel', 'Power', 'Point', 'Word', 'PDF']);\n     * // Create a new ordered list\n     * let list: PdfOrderedList = new PdfOrderedList(items);\n     * // Draw the list and access the layout result\n     * let result: PdfLayoutResult = list.draw(result.page, result.bounds[0], result.bounds[1], result.bounds[2], result.bounds[3]);\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    function PdfLayoutResult(page, bounds) {\n        this._page = page;\n        this._bounds = bounds;\n    }\n    Object.defineProperty(PdfLayoutResult.prototype, \"Page\", {\n        /**\n         * Gets the page associated with the layout result.\n         *\n         * @returns {PdfPage} value of the layout result.\n         * ```typescript\n         * // Load an existing document\n         * let document: PdfDocument = new PdfDocument(data);\n         * // Access the first page\n         * let page: PdfPage = document.getPage(0);\n         * // Add the items to list item collection by passing the array of products\n         * let items: PdfListItemCollection = new PdfListItemCollection(['Excel', 'Power', 'Point', 'Word', 'PDF']);\n         * // Create a new ordered list\n         * let list: PdfOrderedList = new PdfOrderedList(items);\n         * // Draw the list and access the layout result\n         * let result: PdfLayoutResult = list.draw(result.page, result.bounds[0], result.bounds[1], result.bounds[2], result.bounds[3]);\n         * // Access the page from the layout result\n         * let resultPage: PdfPage = result.page;\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        get: function () {\n            return this._page;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfLayoutResult.prototype, \"bounds\", {\n        /**\n         * Gets the bounds associated with the layout result.\n         *\n         * @returns {number[]} The bounds of the layout result.\n         * ```typescript\n         * // Load an existing document\n         * let document: PdfDocument = new PdfDocument(data);\n         * // Access the first page\n         * let page: PdfPage = document.getPage(0);\n         * // Add the items to list item collection by passing the array of products\n         * let items: PdfListItemCollection = new PdfListItemCollection(['Excel', 'Power', 'Point', 'Word', 'PDF']);\n         * // Create a new ordered list\n         * let list: PdfOrderedList = new PdfOrderedList(items);\n         * // Draw the list and access the layout result\n         * let result: PdfLayoutResult = list.draw(result.page, result.bounds[0], result.bounds[1], result.bounds[2], result.bounds[3]);\n         * // Access the bounds associated with layout result\n         * let bounds: number[] = result.bounds;\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        get: function () {\n            return this._bounds;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return PdfLayoutResult;\n}());\n\nvar _PageLayoutResult = /** @class */ (function () {\n    function _PageLayoutResult() {\n        this.markerWrote = false;\n        this.markerWidth = 0;\n        this.markerX = 0;\n    }\n    return _PageLayoutResult;\n}());\n\nvar _PdfLayoutParameters = /** @class */ (function () {\n    function _PdfLayoutParameters() {\n    }\n    return _PdfLayoutParameters;\n}());\n\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-pdf/src/pdf/core/graphics/pdf-layouter.js?");

/***/ }),

/***/ "./node_modules/@syncfusion/ej2-pdf/src/pdf/core/graphics/pdf-stream-writer.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-pdf/src/pdf/core/graphics/pdf-stream-writer.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   _PdfStreamWriter: () => (/* binding */ _PdfStreamWriter)\n/* harmony export */ });\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./../utils */ \"./node_modules/@syncfusion/ej2-pdf/src/pdf/core/utils.js\");\n/* harmony import */ var _enumerator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../enumerator */ \"./node_modules/@syncfusion/ej2-pdf/src/pdf/core/enumerator.js\");\n\n\nvar _PdfStreamWriter = /** @class */ (function () {\n    function _PdfStreamWriter(stream) {\n        this._newLine = '\\r\\n';\n        this._whiteSpace = ' ';\n        this._stream = stream;\n    }\n    _PdfStreamWriter.prototype._writeOperator = function (value) {\n        this._stream.write(value);\n        this._stream.write(this._newLine);\n    };\n    _PdfStreamWriter.prototype._saveGraphicsState = function () {\n        this._writeOperator('q');\n    };\n    _PdfStreamWriter.prototype._restoreGraphicsState = function () {\n        this._writeOperator('Q');\n    };\n    _PdfStreamWriter.prototype._writeComment = function (comment) {\n        if (comment && comment.length > 0) {\n            this._writeOperator('% ' + comment);\n        }\n    };\n    _PdfStreamWriter.prototype._setGraphicsState = function (value) {\n        this._stream.write(\"/\" + (0,_utils__WEBPACK_IMPORTED_MODULE_0__._escapePdfName)(value.name) + \" \");\n        this._writeOperator('gs');\n    };\n    _PdfStreamWriter.prototype._modifyCtm = function (matrix) {\n        this._stream.write(matrix._toString() + \" \");\n        this._writeOperator('cm');\n    };\n    _PdfStreamWriter.prototype._modifyTM = function (matrix) {\n        this._stream.write(matrix._toString() + \" \");\n        this._writeOperator('Tm');\n    };\n    _PdfStreamWriter.prototype._setColorSpace = function (value, arg2, arg3) {\n        if (typeof value === 'string' && typeof arg2 === 'boolean') {\n            this._stream.write(\"/\" + value + \" \");\n            this._writeOperator(arg2 ? 'CS' : 'cs');\n        }\n        else if (Array.isArray(value) && typeof arg2 === 'number' && typeof arg3 === 'boolean') {\n            var colorSpaceName = void 0;\n            switch (arg2) {\n                case _enumerator__WEBPACK_IMPORTED_MODULE_1__._PdfColorSpace.rgb:\n                    colorSpaceName = 'DeviceRGB';\n                    break;\n                case _enumerator__WEBPACK_IMPORTED_MODULE_1__._PdfColorSpace.cmyk:\n                    colorSpaceName = 'DeviceCMYK';\n                    break;\n                case _enumerator__WEBPACK_IMPORTED_MODULE_1__._PdfColorSpace.grayScale:\n                    colorSpaceName = 'DeviceGray';\n                    break;\n                default:\n                    colorSpaceName = 'DeviceRGB';\n                    break;\n            }\n            this._stream.write(\"/\" + colorSpaceName + \" \");\n            this._writeOperator(arg3 ? 'CS' : 'cs');\n            this._setColor(value, arg3);\n        }\n    };\n    _PdfStreamWriter.prototype._setColor = function (color, forStroking) {\n        this._stream.write((color[0] / 255).toFixed(3) + \" \" + (color[1] / 255).toFixed(3) + \" \" + (color[2] / 255).toFixed(3) + \" \");\n        this._writeOperator(forStroking ? 'RG' : 'rg');\n    };\n    _PdfStreamWriter.prototype._appendRectangle = function (x, y, width, height) {\n        this._writePoint(x, y);\n        this._writePoint(width, height);\n        this._writeOperator('re');\n    };\n    _PdfStreamWriter.prototype._writePoint = function (x, y) {\n        this._stream.write(x.toFixed(3) + \" \" + (-y).toFixed(3) + \" \");\n    };\n    _PdfStreamWriter.prototype._clipPath = function (isEvenOdd) {\n        this._stream.write((isEvenOdd ? 'W*' : 'W') + \" n\" + this._newLine);\n    };\n    _PdfStreamWriter.prototype._fillPath = function (isEvenOdd) {\n        this._writeOperator(isEvenOdd ? 'f*' : 'f');\n    };\n    _PdfStreamWriter.prototype._closeFillPath = function (isEvenOdd) {\n        this._writeOperator('h');\n        this._fillPath(isEvenOdd);\n    };\n    _PdfStreamWriter.prototype._strokePath = function () {\n        this._writeOperator('S');\n    };\n    _PdfStreamWriter.prototype._closeStrokePath = function () {\n        this._writeOperator('s');\n    };\n    _PdfStreamWriter.prototype._fillStrokePath = function (isEvenOdd) {\n        this._writeOperator(isEvenOdd ? 'B*' : 'B');\n    };\n    _PdfStreamWriter.prototype._closeFillStrokePath = function (isEvenOdd) {\n        this._writeOperator(isEvenOdd ? 'b*' : 'b');\n    };\n    _PdfStreamWriter.prototype._endPath = function () {\n        this._writeOperator('n');\n    };\n    _PdfStreamWriter.prototype._setFont = function (name, size) {\n        this._stream.write(\"/\" + name + \" \" + size.toFixed(3) + \" \");\n        this._writeOperator('Tf');\n    };\n    _PdfStreamWriter.prototype._setTextScaling = function (textScaling) {\n        this._stream.write(textScaling.toFixed(3) + \" \");\n        this._writeOperator('Tz');\n    };\n    _PdfStreamWriter.prototype._closePath = function () {\n        this._writeOperator('h');\n    };\n    _PdfStreamWriter.prototype._startNextLine = function (x, y) {\n        if (typeof x === 'undefined') {\n            this._writeOperator('T*');\n        }\n        else {\n            this._writePoint(x, y);\n            this._writeOperator('Td');\n        }\n    };\n    _PdfStreamWriter.prototype._setLeading = function (leading) {\n        this._write(leading.toFixed(3) + \" \");\n        this._write(this._whiteSpace);\n        this._writeOperator('TL');\n    };\n    _PdfStreamWriter.prototype._showText = function (text) {\n        this._writeText(text);\n        this._writeOperator('Tj');\n    };\n    _PdfStreamWriter.prototype._write = function (string) {\n        var builder = '';\n        builder += string;\n        builder += '\\r\\n';\n        this._writeOperator(builder);\n    };\n    _PdfStreamWriter.prototype._writeText = function (text) {\n        var result = '';\n        var data = this._escapeSymbols(text);\n        for (var i = 0; i < data.length; i++) {\n            result += String.fromCharCode(data[i]); // eslint-disable-line\n        }\n        result = '(' + result + ')';\n        this._stream.write(result);\n    };\n    _PdfStreamWriter.prototype._beginText = function () {\n        this._writeOperator('BT');\n    };\n    _PdfStreamWriter.prototype._endText = function () {\n        this._writeOperator('ET');\n    };\n    _PdfStreamWriter.prototype._beginPath = function (x, y) {\n        this._writePoint(x, y);\n        this._writeOperator('m');\n    };\n    _PdfStreamWriter.prototype._appendLineSegment = function (x, y) {\n        this._writePoint(x, y);\n        this._writeOperator('l');\n    };\n    _PdfStreamWriter.prototype._appendBezierSegment = function (x1, y1, x2, y2, x3, y3) {\n        this._writePoint(x1, y1);\n        this._writePoint(x2, y2);\n        this._writePoint(x3, y3);\n        this._writeOperator('c');\n    };\n    _PdfStreamWriter.prototype._setTextRenderingMode = function (renderingMode) {\n        this._stream.write(renderingMode.toString() + \" \");\n        this._writeOperator('Tr');\n    };\n    _PdfStreamWriter.prototype._setCharacterSpacing = function (charSpacing) {\n        this._stream.write(charSpacing.toFixed(3) + \" \");\n        this._writeOperator('Tc');\n    };\n    _PdfStreamWriter.prototype._setWordSpacing = function (wordSpacing) {\n        this._stream.write(wordSpacing.toFixed(3) + \" \");\n        this._writeOperator('Tw');\n    };\n    _PdfStreamWriter.prototype._showNextLineText = function (text, unicode) {\n        if (unicode !== null && typeof unicode !== 'undefined' && unicode) {\n            this._writeText(text);\n            this._writeOperator('\\'');\n        }\n        else {\n            this._stream.write(text);\n            this._writeOperator('\\'');\n        }\n    };\n    _PdfStreamWriter.prototype._setLineDashPattern = function (pattern, patternOffset) {\n        var tempPattern = '[';\n        if (pattern.length > 1) {\n            for (var index = 0; index < pattern.length; index++) {\n                if (index === pattern.length - 1) {\n                    tempPattern += pattern[index].toString(); // eslint-disable-line\n                }\n                else {\n                    tempPattern += pattern[index].toString() + ' '; // eslint-disable-line\n                }\n            }\n        }\n        tempPattern += '] ';\n        tempPattern += patternOffset.toString();\n        tempPattern += ' d';\n        this._writeOperator(tempPattern);\n    };\n    _PdfStreamWriter.prototype._setMiterLimit = function (miterLimit) {\n        this._stream.write(miterLimit.toFixed(3) + \" \");\n        this._writeOperator('M');\n    };\n    _PdfStreamWriter.prototype._setLineWidth = function (width) {\n        this._stream.write(width.toFixed(3) + \" \");\n        this._writeOperator('w');\n    };\n    _PdfStreamWriter.prototype._setLineCap = function (lineCapStyle) {\n        this._stream.write(lineCapStyle + \" \");\n        this._writeOperator('J');\n    };\n    _PdfStreamWriter.prototype._setLineJoin = function (lineJoinStyle) {\n        this._stream.write(lineJoinStyle + \" \");\n        this._writeOperator('j');\n    };\n    _PdfStreamWriter.prototype._executeObject = function (name) {\n        this._stream.write(\"/\" + name.name + \" \");\n        this._writeOperator('Do');\n    };\n    _PdfStreamWriter.prototype._beginMarkupSequence = function (name) {\n        this._stream.write(\"/\" + name + \" \");\n        this._writeOperator('BMC');\n    };\n    _PdfStreamWriter.prototype._endMarkupSequence = function () {\n        this._writeOperator('EMC');\n    };\n    _PdfStreamWriter.prototype._clear = function () {\n        this._stream._bytes = [];\n    };\n    _PdfStreamWriter.prototype._escapeSymbols = function (value) {\n        var data = [];\n        for (var i = 0; i < value.length; i++) {\n            var currentData = value.charCodeAt(i);\n            switch (currentData) {\n                case 40:\n                case 41:\n                    data.push(92);\n                    data.push(currentData);\n                    break;\n                case 13:\n                    data.push(92);\n                    data.push(114);\n                    break;\n                case 92:\n                    data.push(92);\n                    data.push(currentData);\n                    break;\n                default:\n                    data.push(currentData);\n                    break;\n            }\n        }\n        return data;\n    };\n    return _PdfStreamWriter;\n}());\n\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-pdf/src/pdf/core/graphics/pdf-stream-writer.js?");

/***/ }),

/***/ "./node_modules/@syncfusion/ej2-pdf/src/pdf/core/graphics/pdf-template.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-pdf/src/pdf/core/graphics/pdf-template.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PdfTemplate: () => (/* binding */ PdfTemplate)\n/* harmony export */ });\n/* harmony import */ var _pdf_primitives__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./../pdf-primitives */ \"./node_modules/@syncfusion/ej2-pdf/src/pdf/core/pdf-primitives.js\");\n/* harmony import */ var _base_stream__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./../base-stream */ \"./node_modules/@syncfusion/ej2-pdf/src/pdf/core/base-stream.js\");\n/* harmony import */ var _pdf_graphics__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./pdf-graphics */ \"./node_modules/@syncfusion/ej2-pdf/src/pdf/core/graphics/pdf-graphics.js\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./../utils */ \"./node_modules/@syncfusion/ej2-pdf/src/pdf/core/utils.js\");\n/* harmony import */ var _import_export_json_document__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./../import-export/json-document */ \"./node_modules/@syncfusion/ej2-pdf/src/pdf/core/import-export/json-document.js\");\n\n\n\n\n\n/**\n * `PdfTemplate` class represents the template of the PDF.\n * ```typescript\n * // Load an existing PDF document\n * let document: PdfDocument = new PdfDocument(data, password);\n * // Get the first page\n * let page: PdfPage = document.getPage(0) as PdfPage;\n * // Create a new rubber stamp annotation\n * const annotation: PdfRubberStampAnnotation = new PdfRubberStampAnnotation(50, 100, 100, 50);\n * // Get the normal appearance of the annotation\n * let normalAppearance: PdfTemplate = annotation.appearance.normal;\n * // Create new image object by using JPEG image data as Base64 string format\n * let image: PdfImage = new PdfBitmap('/9j/4AAQSkZJRgABAQEAkACQAAD/4....QB//Z');\n * // Draw the image as the custom appearance for the annotation\n * normalAppearance.graphics.drawImage(image, 0, 0, 100, 50);\n * // Add annotation to the page\n * page.annotations.add(annotation);\n * // Save the document\n * document.save('output.pdf');\n * // Destroy the document\n * document.destroy();\n * ```\n */\nvar PdfTemplate = /** @class */ (function () {\n    function PdfTemplate(value, crossReference) {\n        this._isExported = false;\n        this._isResourceExport = false;\n        this._isSignature = false;\n        this._crossReference = crossReference;\n        if (value instanceof _base_stream__WEBPACK_IMPORTED_MODULE_1__._PdfBaseStream) {\n            this._content = value;\n            if (!this._content.dictionary.has('Type') || !this._content.dictionary.has('Subtype')) {\n                this._initialize();\n            }\n            var bounds = this._content.dictionary.getArray('BBox');\n            if (bounds && bounds.length > 3) {\n                var rect = (0,_utils__WEBPACK_IMPORTED_MODULE_3__._toRectangle)(bounds);\n                this._size = [rect.width, rect.height];\n                this._templateOriginalSize = this._size;\n            }\n            this._isReadOnly = true;\n        }\n        else {\n            if (typeof value !== 'undefined') {\n                this._size = [value[2], value[3]];\n                this._content = new _base_stream__WEBPACK_IMPORTED_MODULE_1__._PdfContentStream([]);\n                this._content.dictionary._crossReference = this._crossReference;\n                this._initialize();\n                this._content.dictionary.set('BBox', [value[0], value[1], value[0] + value[2], value[1] + value[3]]);\n            }\n            else {\n                this._isReadOnly = true;\n            }\n        }\n        this._writeTransformation = true;\n    }\n    Object.defineProperty(PdfTemplate.prototype, \"graphics\", {\n        /**\n         * Get the graphics of the PDF template. (Read only)\n         *\n         * @returns {PdfGraphics} The graphics object of the PDF template.\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data, password);\n         * // Get the first page\n         * let page: PdfPage = document.getPage(0) as PdfPage;\n         * // Create a new rubber stamp annotation\n         * const annotation: PdfRubberStampAnnotation = new PdfRubberStampAnnotation(50, 100, 100, 50);\n         * // Access the graphics of the normal appearance\n         * let graphics: PdfGraphics = annotation.appearance.normal.graphics;\n         * // Create new image object by using JPEG image data as Base64 string format\n         * let image: PdfImage = new PdfBitmap('/9j/4AAQSkZJRgABAQEAkACQAAD/4....QB//Z');\n         * // Draw the image as the custom appearance for the annotation\n         * graphics.drawImage(image, 0, 0, 100, 50);\n         * // Add annotation to the page\n         * page.annotations.add(annotation);\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        get: function () {\n            if (this._isReadOnly) {\n                return null;\n            }\n            if (typeof this._g === 'undefined') {\n                this._g = new _pdf_graphics__WEBPACK_IMPORTED_MODULE_2__.PdfGraphics(this._size, this._content, this._crossReference, this);\n                if (this._writeTransformation) {\n                    this._g._initializeCoordinates();\n                }\n                this._g._isTemplateGraphics = true;\n            }\n            return this._g;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfTemplate.prototype, \"size\", {\n        /**\n         * Get the size of the PDF template. (Read only)\n         *\n         * @returns {number[]} Template width and height as number array.\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data, password);\n         * // Get the first page\n         * let page: PdfPage = document.getPage(0) as PdfPage;\n         * // Create a new rubber stamp annotation\n         * const annotation: PdfRubberStampAnnotation = new PdfRubberStampAnnotation(50, 100, 100, 50);\n         * // Access the normal template of the appearance\n         * let template: PdfTemplate = appearance.normal;\n         * // Get the width and height of the PDF template as number array.\n         * let size: number[] = template.size;\n         * // Create new image object by using JPEG image data as Base64 string format\n         * let image: PdfImage = new PdfBitmap('/9j/4AAQSkZJRgABAQEAkACQAAD/4....QB//Z');\n         * // Draw the image as the custom appearance for the annotation\n         * template.graphics.drawImage(image, 0, 0, size[0], size[1]);\n         * // Add annotation to the page\n         * page.annotations.add(annotation);\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        get: function () {\n            return this._size;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfTemplate.prototype, \"_originalSize\", {\n        /**\n         * Get the original size of the PDF template. (Read only)\n         *\n         * Remarks: The `_originalSize` property is internal and provides access to the original dimensions of the PDF template.\n         *\n         * @returns {number[]} Template original width and height as number array.\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data, password);\n         * // Get the first page\n         * let page: PdfPage = document.getPage(0) as PdfPage;\n         * // Create a new rubber stamp annotation\n         * const annotation: PdfRubberStampAnnotation = new PdfRubberStampAnnotation(50, 100, 100, 50);\n         * // Access the normal template of the appearance\n         * let template: PdfTemplate = appearance.normal;\n         * // Get the width and height of the PDF template as number array\n         * let size: number[] = template._originalSize;\n         * // Create new image object by using JPEG image data as Base64 string format\n         * let image: PdfImage = new PdfBitmap('/9j/4AAQSkZJRgABAQEAkACQAAD/4....QB//Z');\n         * // Draw the image as the custom appearance for the annotation\n         * template.graphics.drawImage(image, 0, 0, size[0], size[1]);\n         * // Add annotation to the page\n         * page.annotations.add(annotation);\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        get: function () {\n            return this._templateOriginalSize;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    PdfTemplate.prototype._initialize = function () {\n        this._content.dictionary.set('Type', _pdf_primitives__WEBPACK_IMPORTED_MODULE_0__._PdfName.get('XObject'));\n        this._content.dictionary.set('Subtype', _pdf_primitives__WEBPACK_IMPORTED_MODULE_0__._PdfName.get('Form'));\n    };\n    PdfTemplate.prototype._exportStream = function (dictionary, crossReference) {\n        var jsonDocument = new _import_export_json_document__WEBPACK_IMPORTED_MODULE_4__._JsonDocument();\n        jsonDocument._crossReference = crossReference;\n        jsonDocument._isAnnotationExport = true;\n        var resourceTable = new Map();\n        jsonDocument._writeObject(resourceTable, dictionary.get('N'), dictionary, 'normal');\n        this._appearance = jsonDocument._convertToJson(resourceTable);\n        jsonDocument._dispose();\n    };\n    PdfTemplate.prototype._importStream = function (hasCrossReference, isResourceExport) {\n        var jsonDocument = new _import_export_json_document__WEBPACK_IMPORTED_MODULE_4__._JsonDocument();\n        if (hasCrossReference) {\n            jsonDocument._crossReference = this._crossReference;\n        }\n        var json = JSON.parse(this._appearance); // eslint-disable-line    \n        if (json) {\n            var entryKey = isResourceExport ? 'resources' : 'normal'; // eslint-disable-line\n            var entry = json[entryKey]; // eslint-disable-line    \n            if (entry) {\n                if (isResourceExport) {\n                    var resourceDictionary = jsonDocument._parseDictionary(entry['dict']);\n                    if (hasCrossReference) {\n                        this._content.dictionary.update('Resources', resourceDictionary);\n                    }\n                }\n                else {\n                    this._content = jsonDocument._parseStream(entry['stream']);\n                    if (hasCrossReference) {\n                        this._content.dictionary._crossReference = this._crossReference;\n                        this._content.dictionary._updated = true;\n                    }\n                }\n            }\n        }\n        jsonDocument._dispose();\n    };\n    PdfTemplate.prototype._updatePendingResource = function (crossReference) {\n        if (this._content._pendingResources && this._content._pendingResources !== '') {\n            var jsonDocument = new _import_export_json_document__WEBPACK_IMPORTED_MODULE_4__._JsonDocument();\n            jsonDocument._crossReference = crossReference;\n            jsonDocument._parseStreamElements(this._content);\n            this._content._pendingResources = '';\n            jsonDocument._dispose();\n        }\n    };\n    return PdfTemplate;\n}());\n\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-pdf/src/pdf/core/graphics/pdf-template.js?");

/***/ })

}]);