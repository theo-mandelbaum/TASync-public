"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkej2_vue_samples"] = self["webpackChunkej2_vue_samples"] || []).push([["chunk-vendors-node_modules_syncfusion_ej2-layouts_src_splitter_splitter_js-49e77ac5"],{

/***/ "./node_modules/@syncfusion/ej2-layouts/src/splitter/splitter.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-layouts/src/splitter/splitter.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PaneProperties: () => (/* binding */ PaneProperties),\n/* harmony export */   Splitter: () => (/* binding */ Splitter)\n/* harmony export */ });\n/* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @syncfusion/ej2-base */ \"./node_modules/@syncfusion/ej2-base/index.js\");\nvar __extends = (undefined && undefined.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\n\n\n\nvar ROOT = 'e-splitter';\nvar HORIZONTAL_PANE = 'e-splitter-horizontal';\nvar VERTICAL_PANE = 'e-splitter-vertical';\nvar PANE = 'e-pane';\nvar SPLIT_H_PANE = 'e-pane-horizontal';\nvar SPLIT_V_PANE = 'e-pane-vertical';\nvar SPLIT_BAR = 'e-split-bar';\nvar SPLIT_H_BAR = 'e-split-bar-horizontal';\nvar SPLIT_V_BAR = 'e-split-bar-vertical';\nvar STATIC_PANE = 'e-static-pane';\nvar SCROLL_PANE = 'e-scrollable';\nvar RESIZE_BAR = 'e-resize-handler';\nvar RESIZABLE_BAR = 'e-resizable-split-bar';\nvar SPLIT_BAR_HOVER = 'e-split-bar-hover';\nvar SPLIT_BAR_ACTIVE = 'e-split-bar-active';\nvar HIDE_HANDLER = 'e-hide-handler';\nvar SPLIT_TOUCH = 'e-splitter-touch';\nvar DISABLED = 'e-disabled';\nvar RTL = 'e-rtl';\nvar E_ICONS = 'e-icons';\nvar COLLAPSIBLE = 'e-collapsible';\nvar NAVIGATE_ARROW = 'e-navigate-arrow';\nvar ARROW_RIGHT = 'e-arrow-right';\nvar ARROW_LEFT = 'e-arrow-left';\nvar ARROW_UP = 'e-arrow-up';\nvar ARROW_DOWN = 'e-arrow-down';\nvar HIDE_ICON = 'e-icon-hidden';\nvar EXPAND_PANE = 'e-expanded';\nvar COLLAPSE_PANE = 'e-collapsed';\nvar PANE_HIDDEN = 'e-pane-hidden';\nvar RESIZABLE_PANE = 'e-resizable';\nvar LAST_BAR = 'e-last-bar';\nvar BAR_SIZE_DEFAULT = 1;\n/**\n * Interface to configure pane properties such as its content, size, min, max, resizable, collapsed and collapsible.\n */\nvar PaneProperties = /** @class */ (function (_super) {\n    __extends(PaneProperties, _super);\n    function PaneProperties() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)()\n    ], PaneProperties.prototype, \"size\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], PaneProperties.prototype, \"collapsible\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], PaneProperties.prototype, \"collapsed\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(true)\n    ], PaneProperties.prototype, \"resizable\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(null)\n    ], PaneProperties.prototype, \"min\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(null)\n    ], PaneProperties.prototype, \"max\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)()\n    ], PaneProperties.prototype, \"content\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('')\n    ], PaneProperties.prototype, \"cssClass\", void 0);\n    return PaneProperties;\n}(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.ChildProperty));\n\n/**\n * Splitter is a layout user interface (UI) control that has resizable and collapsible split panes.\n * The container can be split into multiple panes, which are oriented horizontally or vertically.\n * The separator (divider) splits the panes and resizes and expands/collapses the panes.\n * The splitter is placed inside the split pane to make a nested layout user interface.\n *\n * ```html\n * <div id=\"splitter\">\n *  <div> Left Pane </div>\n *  <div> Center Pane </div>\n *  <div> Right Pane </div>\n * </div>\n * ```\n * ```typescript\n * <script>\n *   var splitterObj = new Splitter({ width: '300px', height: '200px'});\n *   splitterObj.appendTo('#splitter');\n * </script>\n * ```\n */\nvar Splitter = /** @class */ (function (_super) {\n    __extends(Splitter, _super);\n    /**\n     * Initializes a new instance of the Splitter class.\n     *\n     * @param options  - Specifies Splitter model properties as options.\n     * @param element  - Specifies the element that is rendered as an Splitter.\n     */\n    function Splitter(options, element) {\n        var _this = _super.call(this, options, element) || this;\n        _this.needsID = true;\n        return _this;\n    }\n    /**\n     * Gets called when the model property changes.The data that describes the old and new values of the property that changed.\n     *\n     * @param  {SplitterModel} newProp - specifies the new property\n     * @param  {SplitterModel} oldProp - specifies the old property\n     * @returns {void}\n     * @private\n     */\n    Splitter.prototype.onPropertyChanged = function (newProp, oldProp) {\n        if (!this.element.classList.contains(ROOT)) {\n            return;\n        }\n        for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {\n            var prop = _a[_i];\n            switch (prop) {\n                case 'height':\n                    this.setSplitterSize(this.element, newProp.height, 'height');\n                    break;\n                case 'width':\n                    this.setSplitterSize(this.element, newProp.width, 'width');\n                    break;\n                case 'cssClass':\n                    this.setCssClass(this.element, newProp.cssClass);\n                    break;\n                case 'enabled':\n                    this.isEnabled(this.enabled);\n                    break;\n                case 'enableReversePanes':\n                    this.setReversePane();\n                    break;\n                case 'separatorSize':\n                    this.setSeparatorSize(newProp.separatorSize);\n                    break;\n                case 'orientation':\n                    this.changeOrientation(newProp.orientation);\n                    break;\n                case 'paneSettings': {\n                    if (!(newProp.paneSettings instanceof Array && oldProp.paneSettings instanceof Array)) {\n                        var paneCounts = Object.keys(newProp.paneSettings);\n                        var isPaneContentChanged = paneCounts.some(function (count) {\n                            return !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(newProp.paneSettings[count].content);\n                        });\n                        if (this.isReact && isPaneContentChanged) {\n                            var cPaneCount = 0;\n                            for (var k = 0; k < this.paneSettings.length; k++) {\n                                if (typeof (this.paneSettings[k].content) === 'function') {\n                                    cPaneCount = cPaneCount + 1;\n                                }\n                            }\n                            var hasAllContent = cPaneCount === this.paneSettings.length;\n                            if (hasAllContent) {\n                                this.clearTemplate();\n                            }\n                        }\n                        for (var i = 0; i < paneCounts.length; i++) {\n                            var index = parseInt(Object.keys(newProp.paneSettings)[i], 10);\n                            var changedPropsCount = Object.keys(newProp.paneSettings[index]).length;\n                            for (var j = 0; j < changedPropsCount; j++) {\n                                var property = Object.keys(newProp.paneSettings[index])[j];\n                                switch (property) {\n                                    case 'content': {\n                                        var newValue = Object(newProp.paneSettings[index])[\"\" + property];\n                                        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(newValue)) {\n                                            this.allPanes[index].innerHTML = '';\n                                            this.setTemplate(newValue, this.allPanes[index]);\n                                        }\n                                        break;\n                                    }\n                                    case 'resizable': {\n                                        var newVal = Object(newProp.paneSettings[index])[\"\" + property];\n                                        this.resizableModel(index, newVal);\n                                        break;\n                                    }\n                                    case 'collapsible':\n                                        this.collapsibleModelUpdate(index);\n                                        break;\n                                    case 'collapsed':\n                                        if (newProp.paneSettings[index].collapsed) {\n                                            this.isCollapsed(index);\n                                        }\n                                        else {\n                                            this.collapsedOnchange(index);\n                                        }\n                                        break;\n                                    case 'cssClass':\n                                        this.setCssClass(this.allPanes[index], newProp.paneSettings[index].cssClass);\n                                        break;\n                                    case 'size': {\n                                        var newValSize = Object(newProp.paneSettings[index])[\"\" + property];\n                                        if (newValSize !== '' && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(newValSize)) {\n                                            this.updatePaneSize(newValSize, index);\n                                        }\n                                        break;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    else {\n                        this.clearTemplate();\n                        this.destroyPaneSettings();\n                        this.allBars = [];\n                        this.allPanes = [];\n                        this.createSplitPane(this.element);\n                        this.addSeparator(this.element);\n                        this.getPanesDimensions();\n                        this.setRTL(this.enableRtl);\n                        this.isCollapsed();\n                    }\n                    break;\n                }\n                case 'enableRtl':\n                    this.setRTL(newProp.enableRtl);\n                    break;\n            }\n        }\n    };\n    Splitter.prototype.updatePaneSize = function (newValSize, index) {\n        this.allPanes[index].style.flexBasis = newValSize;\n        var flexPaneIndexes = [];\n        var staticPaneWidth;\n        var flexCount = 0;\n        for (var i = 0; i < this.allPanes.length; i++) {\n            if (!this.paneSettings[i].size && !(this.allPanes[i].innerText === '')) {\n                flexPaneIndexes[flexCount] = i;\n                flexCount++;\n            }\n            else if (this.paneSettings[i].size) {\n                staticPaneWidth = this.orientation === 'Horizontal' ? this.allPanes[index].offsetWidth : this.allPanes[index].offsetHeight;\n            }\n        }\n        staticPaneWidth = this.orientation === 'Horizontal' ? (this.allBars[0].offsetWidth * this.allBars.length) + staticPaneWidth :\n            (this.allBars[0].offsetHeight * this.allBars.length) + staticPaneWidth;\n        var flexPaneWidth = (this.orientation === 'Horizontal' ? this.element.offsetWidth : this.element.offsetHeight)\n            - staticPaneWidth - (this.border * 2);\n        var avgDiffWidth = flexPaneWidth / flexPaneIndexes.length;\n        for (var j = 0; j < flexPaneIndexes.length; j++) {\n            if (this.allPanes[flexPaneIndexes[j]].style.flexBasis !== '') {\n                this.allPanes[flexPaneIndexes[j]].style.flexBasis = avgDiffWidth + 'px';\n            }\n        }\n        this.allPanes[index].classList.add(STATIC_PANE);\n    };\n    Splitter.prototype.initializeValues = function () {\n        this.allPanes = [];\n        this.paneOrder = [];\n        this.separatorOrder = [];\n        this.allBars = [];\n        this.previousCoordinates = {};\n        this.currentCoordinates = {};\n        this.updatePrePaneInPercentage = false;\n        this.updateNextPaneInPercentage = false;\n        this.panesDimensions = [];\n        this.border = 0;\n        this.validDataAttributes = ['data-size', 'data-min', 'data-max', 'data-collapsible',\n            'data-resizable', 'data-content', 'data-collapsed'];\n        this.validElementAttributes = ['data-orientation', 'data-width', 'data-height'];\n        this.iconsDelay = 300;\n        this.templateElement = [];\n        this.collapseFlag = false;\n        this.expandFlag = true;\n    };\n    Splitter.prototype.preRender = function () {\n        this.initializeValues();\n        this.onReportWindowSize = this.reportWindowSize.bind(this);\n        this.onMouseMoveHandler = this.onMouseMove.bind(this);\n        this.onMouseUpHandler = this.onMouseUp.bind(this);\n        this.onTouchMoveHandler = this.onMouseMove.bind(this);\n        this.onTouchEndHandler = this.onMouseUp.bind(this);\n        this.wrapper = this.element.cloneNode(true);\n        this.wrapperParent = this.element.parentElement;\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([this.wrapper], ['e-control', 'e-lib', ROOT]);\n        var orientation = this.orientation === 'Horizontal' ? HORIZONTAL_PANE : VERTICAL_PANE;\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([this.element], orientation);\n        var name = _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.info.name;\n        var css = (name === 'msie') ? 'e-ie' : '';\n        this.setCssClass(this.element, css);\n        if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice) {\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([this.element], SPLIT_TOUCH);\n        }\n    };\n    Splitter.prototype.getPersistData = function () {\n        return this.addOnPersist(['paneSettings']);\n    };\n    /**\n     * Returns the current module name.\n     *\n     * @returns {string} - returns the string value\n     * @private\n     */\n    Splitter.prototype.getModuleName = function () {\n        return 'splitter';\n    };\n    /**\n     * To Initialize the control rendering\n     *\n     * @returns {void}\n     * @private\n     */\n    Splitter.prototype.render = function () {\n        this.checkDataAttributes();\n        this.setCssClass(this.element, this.cssClass);\n        this.isEnabled(this.enabled);\n        this.setDimension(this.getHeight(this.element), this.getWidth(this.element));\n        this.createSplitPane(this.element);\n        this.addSeparator(this.element);\n        this.getPanesDimensions();\n        this.setPaneSettings();\n        this.setRTL(this.enableRtl);\n        if (this.enableReversePanes) {\n            this.setReversePane();\n        }\n        this.collapseFlag = true;\n        this.isCollapsed();\n        this.collapseFlag = false;\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(document, 'touchstart click', this.onDocumentClick, this);\n        this.renderComplete();\n        this.element.ownerDocument.defaultView.addEventListener('resize', this.onReportWindowSize, true);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(this.element, 'keydown', this.onMove, this);\n    };\n    Splitter.prototype.onDocumentClick = function (e) {\n        if (!e.target.classList.contains(SPLIT_BAR) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.currentSeparator)) {\n            this.currentSeparator.classList.remove(SPLIT_BAR_HOVER);\n            this.currentSeparator.classList.remove(SPLIT_BAR_ACTIVE);\n        }\n    };\n    Splitter.prototype.checkPaneSize = function (e) {\n        var prePaneSize = this.orientation === 'Horizontal' ? this.previousPane.offsetWidth : this.previousPane.offsetHeight;\n        var nextPaneSize = this.orientation === 'Horizontal' ? this.nextPane.offsetWidth : this.nextPane.offsetHeight;\n        var splitBarSize = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.separatorSize) ? BAR_SIZE_DEFAULT : this.separatorSize;\n        if ((this.previousPane.style.flexBasis.indexOf('%') > 0 || this.previousPane.style.flexBasis.indexOf('p') > 0 || this.nextPane.style.flexBasis.indexOf('%') > 0)) {\n            var previousFlexBasis = this.updatePaneFlexBasis(this.previousPane);\n            var nextFlexBasis = this.updatePaneFlexBasis(this.nextPane);\n            this.totalPercent = previousFlexBasis + nextFlexBasis;\n            this.totalWidth = this.convertPercentageToPixel(this.totalPercent + '%');\n            if (e.type === 'keydown' && (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(e.keyCode))) {\n                if ((e.keyCode === 39 || (e.keyCode === 40)) && nextPaneSize > 0 &&\n                    (this.getMinInPixel(this.paneSettings[this.nextPaneIndex].min) <\n                        this.convertPercentageToPixel((nextFlexBasis - 1) + '%'))) {\n                    this.previousPane.style.flexBasis = (previousFlexBasis + 1) + '%';\n                    this.nextPane.style.flexBasis = (nextFlexBasis - 1) + '%';\n                }\n                else if ((e.keyCode === 37 || (e.keyCode === 38)) && prePaneSize > 0 &&\n                    (this.getMinInPixel(this.paneSettings[this.prevPaneIndex].min) <\n                        this.convertPercentageToPixel((previousFlexBasis - 1) + '%'))) {\n                    this.previousPane.style.flexBasis = (previousFlexBasis - 1) + '%';\n                    this.nextPane.style.flexBasis = (nextFlexBasis + 1) + '%';\n                }\n            }\n        }\n        else {\n            this.totalWidth = (this.orientation === 'Horizontal') ? this.previousPane.offsetWidth + this.nextPane.offsetWidth :\n                this.previousPane.offsetHeight + this.nextPane.offsetHeight;\n            if (e.type === 'keydown' && (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(e.keyCode))) {\n                if ((e.keyCode === 39 || (e.keyCode === 40)) && nextPaneSize > 0 &&\n                    (this.getMinInPixel(this.paneSettings[this.nextPaneIndex].min) < (nextPaneSize + splitBarSize))) {\n                    this.addStaticPaneClass();\n                    this.previousPane.style.flexBasis = (prePaneSize + splitBarSize) + 'px';\n                    this.nextPane.style.flexBasis = (nextPaneSize < splitBarSize) ? '0px' :\n                        (nextPaneSize - splitBarSize) + 'px';\n                }\n                else if ((e.keyCode === 37 || (e.keyCode === 38)) && prePaneSize > 0 &&\n                    (this.getMinInPixel(this.paneSettings[this.prevPaneIndex].min) < (prePaneSize - splitBarSize))) {\n                    this.addStaticPaneClass();\n                    this.previousPane.style.flexBasis = (prePaneSize < splitBarSize) ? '0px' :\n                        (prePaneSize - splitBarSize) + 'px';\n                    this.nextPane.style.flexBasis = (nextPaneSize + splitBarSize) + 'px';\n                }\n            }\n        }\n    };\n    Splitter.prototype.onMove = function (event) {\n        if (this.allPanes.length > 1) {\n            var index = this.getSeparatorIndex(this.currentSeparator);\n            var isPrevpaneCollapsed = this.previousPane.classList.contains(COLLAPSE_PANE);\n            var isPrevpaneExpanded = this.previousPane.classList.contains(EXPAND_PANE);\n            var isNextpaneCollapsed = this.nextPane.classList.contains(COLLAPSE_PANE);\n            if (((this.orientation !== 'Horizontal' && event.keyCode === 38) || (this.orientation === 'Horizontal' &&\n                event.keyCode === 39) ||\n                (this.orientation === 'Horizontal' && event.keyCode === 37) || (this.orientation !== 'Horizontal' && event.keyCode === 40))\n                && (!isPrevpaneExpanded && !isNextpaneCollapsed && !isPrevpaneCollapsed || (isPrevpaneExpanded) && !isNextpaneCollapsed) &&\n                document.activeElement.classList.contains(SPLIT_BAR) && (this.paneSettings[index].resizable &&\n                this.paneSettings[index + 1].resizable)) {\n                event.preventDefault();\n                this.checkPaneSize(event);\n                this.triggerResizing(event);\n            }\n            else if (event.keyCode === 13 && this.paneSettings[index].collapsible &&\n                document.activeElement.classList.contains(SPLIT_BAR) && this.currentSeparator.classList.contains(SPLIT_BAR_ACTIVE)) {\n                if (!this.previousPane.classList.contains(COLLAPSE_PANE)) {\n                    this.collapse(index);\n                    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([this.currentSeparator], SPLIT_BAR_ACTIVE);\n                }\n                else {\n                    this.expand(index);\n                    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([this.currentSeparator], SPLIT_BAR_ACTIVE);\n                }\n            }\n        }\n    };\n    Splitter.prototype.getMinInPixel = function (minValue) {\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(minValue)) {\n            return 0;\n        }\n        var paneMinRange = this.convertPixelToNumber(minValue.toString());\n        if (minValue.indexOf('%') > 0) {\n            paneMinRange = this.convertPercentageToPixel(minValue);\n        }\n        var min = this.convertPixelToNumber((paneMinRange).toString());\n        return min;\n    };\n    /**\n     * @param {string} value - specifies the string value\n     * @returns {string} returns the string\n     * @hidden\n     */\n    Splitter.prototype.sanitizeHelper = function (value) {\n        if (this.enableHtmlSanitizer) {\n            var item = _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.SanitizeHtmlHelper.beforeSanitize();\n            var beforeEvent = {\n                cancel: false,\n                helper: null\n            };\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)(item, item, beforeEvent);\n            this.trigger('beforeSanitizeHtml', item);\n            if (item.cancel && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(item.helper)) {\n                value = item.helper(value);\n            }\n            else if (!item.cancel) {\n                value = _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.SanitizeHtmlHelper.serializeValue(item, value);\n            }\n        }\n        return value;\n    };\n    Splitter.prototype.checkDataAttributes = function () {\n        var api;\n        var value;\n        // Element values\n        for (var dataIndex = 0; dataIndex < this.validElementAttributes.length; dataIndex++) {\n            value = this.element.getAttribute(this.validElementAttributes[dataIndex]);\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(value)) {\n                api = this.removeDataPrefix(this.validElementAttributes[dataIndex]);\n                // eslint-disable-next-line\n                this[api] = value;\n            }\n        }\n        // Pane values\n        for (var paneIndex = 0; paneIndex < this.element.children.length; paneIndex++) {\n            for (var dataAttr = 0; dataAttr < this.validDataAttributes.length; dataAttr++) {\n                value = this.element.children[paneIndex].getAttribute(this.validDataAttributes[dataAttr]);\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(value)) {\n                    api = this.removeDataPrefix(this.validDataAttributes[dataAttr]);\n                    value = (api === 'collapsible' || api === 'resizable') ? (value === 'true') : value;\n                    if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.paneSettings[paneIndex])) {\n                        this.paneSettings[paneIndex] = {\n                            size: '',\n                            min: null,\n                            max: null,\n                            content: '',\n                            resizable: true,\n                            collapsible: false,\n                            collapsed: false\n                        };\n                    }\n                    // eslint-disable-next-line\n                    var paneAPI = this.paneSettings[paneIndex][api];\n                    if (api === 'resizable' || api === 'collapsible' || api === 'collapsed') {\n                        // eslint-disable-next-line\n                        this.paneSettings[paneIndex][api] = value;\n                    }\n                    if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(paneAPI) || paneAPI === '') {\n                        // eslint-disable-next-line\n                        this.paneSettings[paneIndex][api] = value;\n                    }\n                }\n            }\n        }\n    };\n    Splitter.prototype.destroyPaneSettings = function () {\n        [].slice.call(this.element.children).forEach(function (el) {\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)(el);\n        });\n        this.restoreElem();\n    };\n    Splitter.prototype.setPaneSettings = function () {\n        var childCount = this.allPanes.length;\n        var paneCollection = [];\n        var paneValue = {\n            size: '',\n            min: null,\n            max: null,\n            content: '',\n            resizable: true,\n            collapsed: false,\n            collapsible: false,\n            cssClass: ''\n        };\n        for (var i = 0; i < childCount; i++) {\n            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.paneSettings[i])) {\n                paneCollection[i] = paneValue;\n            }\n            else {\n                paneCollection[i] = this.paneSettings[i];\n            }\n        }\n        this.setProperties({ 'paneSettings': paneCollection }, true);\n    };\n    Splitter.prototype.checkArrow = function (paneIndex, targetArrow) {\n        return (this.allBars[paneIndex].querySelector('.' + NAVIGATE_ARROW + '.' + targetArrow));\n    };\n    Splitter.prototype.removeDataPrefix = function (attribute) {\n        return attribute.slice(attribute.lastIndexOf('-') + 1);\n    };\n    Splitter.prototype.setRTL = function (rtl) {\n        if (rtl) {\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([this.element], RTL);\n        }\n        else {\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([this.element], RTL);\n        }\n    };\n    Splitter.prototype.setReversePane = function () {\n        this.allPanes = this.allPanes.reverse();\n        this.allBars = this.allBars.reverse();\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([this.allBars[this.allBars.length - 1]], LAST_BAR);\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([this.allBars[0]], LAST_BAR);\n        this.setProperties({ 'paneSettings': this.paneSettings.reverse() }, true);\n        if (this.enableReversePanes) {\n            this.element.setAttribute('dir', 'rtl');\n        }\n        else {\n            this.element.removeAttribute('dir');\n        }\n    };\n    Splitter.prototype.setSplitterSize = function (element, size, property) {\n        var style = property === 'width' ? { 'width': (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.formatUnit)(size) } : { 'height': (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.formatUnit)(size) };\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.setStyleAttribute)(element, style);\n    };\n    Splitter.prototype.getPanesDimensions = function () {\n        for (var index = 0; index < this.allPanes.length; index++) {\n            if (this.orientation === 'Horizontal') {\n                this.panesDimensions.push(this.allPanes[index].getBoundingClientRect().width);\n            }\n            else {\n                this.panesDimensions.push(this.allPanes[index].getBoundingClientRect().height);\n            }\n        }\n    };\n    Splitter.prototype.setCssClass = function (element, className) {\n        if (className) {\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([element], className.split(className.indexOf(',') > -1 ? ',' : ' '));\n        }\n    };\n    Splitter.prototype.hideResizer = function (target) {\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('.' + RESIZE_BAR, target)], HIDE_HANDLER);\n    };\n    Splitter.prototype.showResizer = function (target) {\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.previousPane) && this.previousPane.classList.contains(RESIZABLE_PANE) &&\n            !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.nextPane) && this.nextPane.classList.contains(RESIZABLE_PANE)) {\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('.' + RESIZE_BAR, target)], HIDE_HANDLER);\n        }\n    };\n    Splitter.prototype.resizableModel = function (index, newVal) {\n        var paneIndex = (index === (this.allBars.length)) ? (index - 1) : index;\n        var i = index;\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(this.allBars[paneIndex], 'mousedown', this.onMouseDown);\n        if (newVal) {\n            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(this.allBars[paneIndex], 'mousedown', this.onMouseDown, this);\n            if (this.isResizable()) {\n                this.showResizer(this.allBars[paneIndex]);\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('.' + RESIZE_BAR, this.allBars[paneIndex])], HIDE_HANDLER);\n                this.allBars[paneIndex].classList.add(RESIZABLE_BAR);\n                if (index === (this.allBars.length)) {\n                    this.allPanes[index].classList.add(RESIZABLE_PANE);\n                }\n                else {\n                    this.allPanes[paneIndex].classList.add(RESIZABLE_PANE);\n                }\n                this.updateResizablePanes(i);\n            }\n        }\n        else {\n            this.updateResizablePanes(i);\n            this.hideResizer(this.allBars[paneIndex]);\n            this.allBars[paneIndex].classList.remove(RESIZABLE_BAR);\n            if (index === (this.allBars.length)) {\n                this.allPanes[index].classList.remove(RESIZABLE_PANE);\n            }\n            else {\n                this.allPanes[paneIndex].classList.remove(RESIZABLE_PANE);\n            }\n        }\n    };\n    Splitter.prototype.collapsibleModelUpdate = function (index) {\n        var paneIndex = index === (this.allBars.length) ? (index - 1) : index;\n        var arrow2 = (this.orientation === 'Horizontal')\n            ? this.checkArrow(paneIndex, ARROW_LEFT) : this.checkArrow(paneIndex, ARROW_UP);\n        var arrow1 = (this.orientation === 'Horizontal')\n            ? this.checkArrow(paneIndex, ARROW_RIGHT) : this.checkArrow(paneIndex, ARROW_DOWN);\n        this.paneCollapsible(this.allPanes[index], index);\n        this.updateCollapseIcons(paneIndex, arrow1, arrow2);\n    };\n    Splitter.prototype.collapseArrow = function (barIndex, arrow) {\n        return (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.selectAll)('.' + arrow, this.allBars[barIndex])[0];\n    };\n    Splitter.prototype.updateIsCollapsed = function (index, collapseArrow, lastBarArrow) {\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(index)) {\n            var targetEle = void 0;\n            var lastBarIndex = (index === this.allBars.length);\n            var barIndex = lastBarIndex ? index - 1 : index;\n            if (!lastBarIndex && this.allPanes[index + 1].classList.contains(COLLAPSE_PANE) && index !== 0) {\n                targetEle = this.collapseArrow(barIndex - 1, lastBarArrow);\n            }\n            else {\n                targetEle = (lastBarIndex) ? this.collapseArrow(barIndex, lastBarArrow) : this.collapseArrow(barIndex, collapseArrow);\n            }\n            targetEle.click();\n        }\n    };\n    Splitter.prototype.isCollapsed = function (index) {\n        var _this = this;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(index) && this.paneSettings[index].collapsed\n            && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.allPanes[index].classList.contains(COLLAPSE_PANE))) {\n            return;\n        }\n        this.expandFlag = false;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(index)) {\n            this.collapseFlag = true;\n            var targetEle = void 0;\n            var lastBarIndex = (index === this.allBars.length);\n            var barIndex = lastBarIndex ? index - 1 : index;\n            if (!lastBarIndex && this.allPanes[index + 1].classList.contains(COLLAPSE_PANE) && index !== 0) {\n                targetEle = this.collapseArrow(barIndex - 1, this.targetArrows().lastBarArrow);\n            }\n            else {\n                targetEle = (lastBarIndex) ? this.collapseArrow(barIndex, this.targetArrows().lastBarArrow) :\n                    this.collapseArrow(barIndex, this.targetArrows().collapseArrow);\n            }\n            var event_1 = { target: targetEle };\n            var eventArgs = this.beforeAction(event_1);\n            this.trigger('beforeCollapse', eventArgs, function (beforeCollapseArgs) {\n                if (!beforeCollapseArgs.cancel) {\n                    var collapsedindex = [];\n                    collapsedindex[0] = index;\n                    var j = 1;\n                    for (var i = 0; i < _this.allPanes.length; i++) {\n                        if (_this.allPanes[i].classList.contains(COLLAPSE_PANE)) {\n                            collapsedindex[j] = i;\n                            j++;\n                        }\n                    }\n                    collapsedindex = collapsedindex.sort();\n                    _this.updateIsCollapsed(index, _this.targetArrows().collapseArrow, _this.targetArrows().lastBarArrow);\n                    for (var i = 0; i < collapsedindex.length; i++) {\n                        if (!_this.allPanes[collapsedindex[i]].classList.contains(COLLAPSE_PANE)) {\n                            _this.updateIsCollapsed(collapsedindex[i], _this.targetArrows().collapseArrow, _this.targetArrows().lastBarArrow);\n                        }\n                    }\n                    for (var i = collapsedindex.length; i > 0; i--) {\n                        if (!_this.allPanes[collapsedindex[i - 1]].classList.contains(COLLAPSE_PANE)) {\n                            var targetArrow = _this.targetArrows();\n                            _this.updateIsCollapsed(collapsedindex[i - 1], targetArrow.collapseArrow, targetArrow.lastBarArrow);\n                        }\n                    }\n                    var collapseEventArgs = _this.afterAction(event_1);\n                    _this.trigger('collapsed', collapseEventArgs);\n                    _this.collapseFlag = false;\n                }\n            });\n        }\n        else {\n            for (var m = 0; m < this.allPanes.length; m++) {\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.paneSettings[m]) && this.paneSettings[m].collapsed) {\n                    this.updateIsCollapsed(m, this.targetArrows().collapseArrow, this.targetArrows().lastBarArrow);\n                }\n            }\n            for (var m = this.allPanes.length - 1; m >= 0; m--) {\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.paneSettings[m]) && this.paneSettings[m].collapsed &&\n                    !this.allPanes[m].classList.contains(COLLAPSE_PANE)) {\n                    var collapseArrow = this.orientation === 'Horizontal' ? ARROW_RIGHT : ARROW_DOWN;\n                    if (m !== 0) {\n                        var targetEle = this.collapseArrow(m - 1, collapseArrow);\n                        targetEle.click();\n                    }\n                    if (!this.nextPane.classList.contains(COLLAPSE_PANE)) {\n                        var targetEle = this.collapseArrow(m - 1, collapseArrow);\n                        targetEle.click();\n                    }\n                }\n            }\n        }\n        this.expandFlag = true;\n    };\n    Splitter.prototype.targetArrows = function () {\n        this.splitterProperty();\n        return {\n            collapseArrow: (this.orientation === 'Horizontal') ? ARROW_LEFT : ARROW_UP,\n            lastBarArrow: (this.orientation === 'Vertical') ? ARROW_DOWN : ARROW_RIGHT\n        };\n    };\n    Splitter.prototype.collapsedOnchange = function (index) {\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.paneSettings[index]) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.paneSettings[index].collapsed)\n            && this.allPanes[index].classList.contains(COLLAPSE_PANE)) {\n            this.updateIsCollapsed(index, this.targetArrows().lastBarArrow, this.targetArrows().collapseArrow);\n        }\n    };\n    Splitter.prototype.isEnabled = function (enabled) {\n        if (enabled) {\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([this.element], DISABLED);\n        }\n        else {\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([this.element], DISABLED);\n        }\n    };\n    Splitter.prototype.setSeparatorSize = function (size) {\n        var sizeValue = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(size) ? 'auto' : size + 'px';\n        var separator = this.orientation === 'Horizontal' ? SPLIT_H_BAR : SPLIT_V_BAR;\n        for (var index = 0; index < this.allBars.length; index++) {\n            var splitBar = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.selectAll)('.' + separator, this.element)[index];\n            var resizeBar = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.selectAll)('.' + RESIZE_BAR, splitBar)[0];\n            if (this.orientation === 'Horizontal') {\n                splitBar.style.width = sizeValue;\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(resizeBar)) {\n                    resizeBar.style.width = sizeValue;\n                }\n            }\n            else {\n                splitBar.style.height = sizeValue;\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(resizeBar)) {\n                    resizeBar.style.height = sizeValue;\n                }\n            }\n        }\n    };\n    Splitter.prototype.changeOrientation = function (orientation) {\n        var isVertical = orientation === 'Vertical';\n        this.element.classList.remove(isVertical ? HORIZONTAL_PANE : VERTICAL_PANE);\n        this.element.classList.add(isVertical ? VERTICAL_PANE : HORIZONTAL_PANE);\n        for (var index = 0; index < this.allPanes.length; index++) {\n            this.allPanes[index].classList.remove(isVertical ? SPLIT_H_PANE : SPLIT_V_PANE);\n            this.allPanes[index].classList.add(isVertical ? SPLIT_V_PANE : SPLIT_H_PANE);\n        }\n        for (var index = 0; index < this.allBars.length; index++) {\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)(this.allBars[index]);\n        }\n        this.allBars = [];\n        this.addSeparator(this.element);\n    };\n    Splitter.prototype.checkSplitPane = function (currentBar, elementIndex) {\n        var paneEle = this.collectPanes(currentBar.parentElement.children)[elementIndex];\n        return paneEle;\n    };\n    Splitter.prototype.collectPanes = function (childNodes) {\n        var elements = [];\n        for (var i = 0; i < childNodes.length; i++) {\n            if (childNodes[i].classList.contains(PANE)) {\n                elements.push(childNodes[i]);\n            }\n        }\n        return elements;\n    };\n    Splitter.prototype.getPrevPane = function (order) {\n        return this.enableReversePanes ? this.getOrderPane(order + 1) : this.getOrderPane(order - 1);\n    };\n    Splitter.prototype.getNextPane = function (order) {\n        return this.enableReversePanes ? this.getOrderPane(order - 1) : this.getOrderPane(order + 1);\n    };\n    Splitter.prototype.getOrderPane = function (order) {\n        var pane;\n        for (var i = 0; i < this.element.children.length; i++) {\n            if (parseInt(this.element.children[i].style.order, 10) === order) {\n                pane = this.element.children[i];\n            }\n        }\n        return pane;\n    };\n    Splitter.prototype.getOrderIndex = function (order, type) {\n        var index;\n        var panes;\n        if (type === 'pane') {\n            panes = this.allPanes;\n        }\n        else {\n            panes = this.allBars;\n        }\n        for (var i = 0; i < panes.length; i++) {\n            if (parseInt(panes[i].style.order, 10) === order) {\n                index = i;\n            }\n        }\n        return index;\n    };\n    Splitter.prototype.updateSeparatorSize = function (resizeHanlder) {\n        var sizeValue = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.separatorSize) ? '1px' : this.separatorSize + 'px';\n        if (this.orientation === 'Horizontal') {\n            resizeHanlder.style.width = sizeValue;\n        }\n        else {\n            resizeHanlder.style.height = sizeValue;\n        }\n    };\n    Splitter.prototype.addResizeHandler = function (currentBar) {\n        var resizeHanlder = this.createElement('div');\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([resizeHanlder], [RESIZE_BAR, E_ICONS]);\n        this.updateSeparatorSize(resizeHanlder);\n        currentBar.appendChild(resizeHanlder);\n    };\n    Splitter.prototype.getHeight = function (target) {\n        var height = this.height;\n        height = target.style.height !== '' && this.height === '100%' ? target.style.height : this.height;\n        return height;\n    };\n    Splitter.prototype.getWidth = function (target) {\n        var width = this.width;\n        width = target.style.width !== '' && this.width === '100%' ? target.style.width : this.width;\n        return width;\n    };\n    Splitter.prototype.setDimension = function (height, width) {\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.setStyleAttribute)(this.element, { 'height': height, 'width': width });\n    };\n    Splitter.prototype.updateCollapseIcons = function (index, arrow1, arrow2) {\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.paneSettings[index])) {\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.paneSettings[index].collapsible)) {\n                if (this.paneSettings[index].collapsible) {\n                    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([arrow2], [HIDE_ICON]);\n                }\n                else {\n                    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([arrow2], [HIDE_ICON]);\n                }\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.paneSettings[index + 1])) {\n                    if (this.paneSettings[index + 1].collapsible) {\n                        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([arrow1], [HIDE_ICON]);\n                    }\n                    else {\n                        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([arrow1], [HIDE_ICON]);\n                    }\n                }\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.paneSettings[index + 1])) {\n                    if ((this.paneSettings[index + 1].collapsible)) {\n                        if (this.paneSettings[index + 1].collapsible) {\n                            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([arrow1], [HIDE_ICON]);\n                        }\n                        else {\n                            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([arrow1], [HIDE_ICON]);\n                        }\n                    }\n                }\n            }\n        }\n    };\n    Splitter.prototype.updateIconClass = function () {\n        if (this.orientation === 'Horizontal') {\n            this.leftArrow = ARROW_LEFT;\n            this.rightArrow = ARROW_RIGHT;\n        }\n        else {\n            this.leftArrow = ARROW_UP;\n            this.rightArrow = ARROW_DOWN;\n        }\n    };\n    Splitter.prototype.createSeparator = function (i) {\n        var separator = this.createElement('div');\n        this.allBars.push(separator);\n        var arrow1 = this.createElement('button');\n        var arrow2 = this.createElement('button');\n        arrow1.setAttribute('tabindex', '-1');\n        arrow2.setAttribute('tabindex', '-1');\n        arrow1.setAttribute('aria-label', 'Toggle navigation');\n        arrow2.setAttribute('aria-label', 'Toggle navigation');\n        arrow1.setAttribute('type', 'button');\n        arrow2.setAttribute('type', 'button');\n        var size = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.separatorSize) ? '1px' : this.separatorSize + 'px';\n        var proxy =  false || this;\n        if (this.orientation === 'Horizontal') {\n            this.updateIconClass();\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([arrow2], [NAVIGATE_ARROW, ARROW_LEFT, HIDE_ICON]);\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([arrow1], [NAVIGATE_ARROW, ARROW_RIGHT, HIDE_ICON]);\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([separator], [SPLIT_BAR, SPLIT_H_BAR]);\n            separator.style.width = size;\n        }\n        else {\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([arrow1], [NAVIGATE_ARROW, ARROW_DOWN, HIDE_ICON]);\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([arrow2], [NAVIGATE_ARROW, ARROW_UP, HIDE_ICON]);\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([separator], [SPLIT_BAR, SPLIT_V_BAR]);\n            this.updateIconClass();\n            separator.style.height = size;\n        }\n        this.addMouseActions(separator);\n        separator.appendChild(arrow2);\n        this.addResizeHandler(separator);\n        separator.appendChild(arrow1);\n        this.updateCollapseIcons(i, arrow1, arrow2);\n        separator.setAttribute('tabindex', '-1');\n        separator.setAttribute('aria-hidden', 'true');\n        if (this.enableReversePanes) {\n            separator.setAttribute('dir', 'ltr');\n        }\n        else {\n            separator.removeAttribute('dir');\n        }\n        separator.addEventListener('focus', function () {\n            separator.classList.add(SPLIT_BAR_ACTIVE);\n            proxy.currentSeparator = separator;\n            proxy.getPaneDetails();\n        });\n        separator.addEventListener('blur', function () {\n            separator.classList.remove(SPLIT_BAR_ACTIVE);\n        });\n        return separator;\n    };\n    Splitter.prototype.updateResizablePanes = function (index) {\n        this.getPaneDetails();\n        if (this.isResizable()) {\n            this.allPanes[index].classList.add(RESIZABLE_PANE);\n        }\n        else {\n            this.allPanes[index].classList.remove(RESIZABLE_PANE);\n        }\n    };\n    Splitter.prototype.addSeparator = function (target) {\n        var childCount = this.allPanes.length;\n        var clonedEle = target.children;\n        var separator;\n        for (var i = 0; i < childCount; i++) {\n            if (i < childCount - 1) {\n                separator = this.createSeparator(i);\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.setStyleAttribute)(separator, { 'order': (i * 2) + 1 });\n                this.separatorOrder.push((i * 2) + 1);\n                clonedEle[i].parentNode.appendChild(separator);\n                this.currentSeparator = separator;\n                separator.setAttribute('role', 'separator');\n                separator.setAttribute('aria-valuenow', i.toString());\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.orientation)) {\n                    separator.setAttribute('aria-orientation', this.orientation.toLowerCase());\n                }\n                this.wireClickEvents();\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(separator)) {\n                    if (this.isResizable()) {\n                        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(separator, 'mousedown', this.onMouseDown, this);\n                        var eventName = (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.info.name === 'msie') ? 'pointerdown' : 'touchstart';\n                        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(separator, eventName, this.onMouseDown, this);\n                        separator.classList.add(RESIZABLE_BAR);\n                        this.updateResizablePanes(i);\n                    }\n                    else {\n                        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('.' + RESIZE_BAR, separator)], HIDE_HANDLER);\n                    }\n                }\n            }\n            else {\n                if (separator) {\n                    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([separator], LAST_BAR);\n                }\n                if (childCount > 1) {\n                    this.updateResizablePanes(i);\n                }\n            }\n        }\n        if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.info.name === 'msie') {\n            var allBar = this.element.querySelectorAll('.e-splitter .e-resize-handler');\n            for (var i = 0; i < allBar.length; i++) {\n                var sepSize = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.separatorSize) ? 1 : this.separatorSize;\n                allBar[i].style.paddingLeft = sepSize / 2 + 'px';\n                allBar[i].style.paddingRight = sepSize / 2 + 'px';\n            }\n        }\n    };\n    Splitter.prototype.isResizable = function () {\n        var resizable = false;\n        if ((!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.paneSettings[this.getPreviousPaneIndex()]) &&\n            this.paneSettings[this.getPreviousPaneIndex()].resizable &&\n            !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.paneSettings[this.getNextPaneIndex()]) &&\n            this.paneSettings[this.getNextPaneIndex()].resizable) ||\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.paneSettings[this.getNextPaneIndex()])) {\n            resizable = true;\n        }\n        return resizable;\n    };\n    Splitter.prototype.addMouseActions = function (separator) {\n        var _this = this;\n        var sTout;\n        var hoverTimeOut;\n        separator.addEventListener('mouseenter', function () {\n            /* istanbul ignore next */\n            sTout = setTimeout(function () {\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([separator], [SPLIT_BAR_HOVER]);\n            }, _this.iconsDelay);\n        });\n        separator.addEventListener('mouseleave', function () {\n            clearTimeout(sTout);\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([separator], [SPLIT_BAR_HOVER]);\n        });\n        separator.addEventListener('mouseout', function () {\n            clearTimeout(hoverTimeOut);\n        });\n        separator.addEventListener('mouseover', function () {\n            /* istanbul ignore next */\n            hoverTimeOut = setTimeout(function () {\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([separator], [SPLIT_BAR_HOVER]);\n            });\n        });\n    };\n    Splitter.prototype.getEventType = function (e) {\n        return (e.indexOf('mouse') > -1) ? 'mouse' : 'touch';\n    };\n    Splitter.prototype.updateCurrentSeparator = function (target) {\n        this.currentSeparator = this.isSeparator(target) ? target.parentElement : target;\n    };\n    Splitter.prototype.isSeparator = function (target) {\n        return (target.classList.contains(SPLIT_BAR) ? false : true);\n    };\n    Splitter.prototype.isMouseEvent = function (e) {\n        var isMouse = false;\n        if (this.getEventType(e.type) === 'mouse' || (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(e.pointerType) &&\n            this.getEventType(e.pointerType) === 'mouse')) {\n            isMouse = true;\n        }\n        return isMouse;\n    };\n    Splitter.prototype.updateCursorPosition = function (e, type) {\n        if (this.isMouseEvent(e)) {\n            this.changeCoordinates({ x: e.pageX, y: e.pageY }, type);\n        }\n        else {\n            var eventType = _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.info.name !== 'msie' ? e.touches[0] : e;\n            this.changeCoordinates({ x: eventType.pageX, y: eventType.pageY }, type);\n        }\n    };\n    Splitter.prototype.changeCoordinates = function (coordinates, type) {\n        if (type === 'previous') {\n            this.previousCoordinates = coordinates;\n        }\n        else {\n            this.currentCoordinates = coordinates;\n        }\n    };\n    Splitter.prototype.reportWindowSize = function () {\n        var _this = this;\n        var paneCount = this.allPanes.length;\n        if (!document.body.contains(this.element)) {\n            document.defaultView.removeEventListener('resize', this.onReportWindowSize);\n            return;\n        }\n        for (var i = 0; i < paneCount; i++) {\n            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.paneSettings[i].size)) {\n                this.allPanes[i].classList.remove(STATIC_PANE);\n            }\n            if (paneCount - 1 === i) {\n                var staticPaneCount = this.element.querySelectorAll('.' + STATIC_PANE).length;\n                if (staticPaneCount === paneCount) {\n                    if (this.allPanes[i].style.flexBasis === '') {\n                        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([this.allPanes[i]], STATIC_PANE);\n                    }\n                }\n            }\n        }\n        if (paneCount > 0) {\n            setTimeout(function () {\n                _this.updateSplitterSize(true);\n            }, 200);\n        }\n    };\n    Splitter.prototype.updateSplitterSize = function (iswindowResize) {\n        var totalWidth = 0;\n        var flexPaneIndexes = [];\n        var flexCount = 0;\n        var children = this.element.children;\n        for (var i = 0, len = children.length; i < len; i++) {\n            totalWidth += this.orientation === 'Horizontal' ? children[i].offsetWidth :\n                children[i].offsetHeight;\n        }\n        for (var j = 0, len = this.allBars.length; j < len; j++) {\n            totalWidth += this.orientation === 'Horizontal' ? parseInt(getComputedStyle(this.allBars[j]).marginLeft, 10) +\n                parseInt(getComputedStyle(this.allBars[j]).marginLeft, 10) :\n                parseInt(getComputedStyle(this.allBars[j]).marginTop, 10) +\n                    parseInt(getComputedStyle(this.allBars[j]).marginBottom, 10);\n        }\n        var diff = this.orientation === 'Horizontal' ? this.element.offsetWidth -\n            ((this.border * 2) + totalWidth) :\n            this.element.offsetHeight - ((this.border * 2) + totalWidth);\n        for (var i = 0, len = this.allPanes.length; i < len; i++) {\n            if (this.allPanes[i].innerText === '' ? !(this.paneSettings[i].size) || !(this.allPanes[i].innerText === '')\n                : !(this.paneSettings[i].size) && !(this.allPanes[i].innerText === '')) {\n                flexPaneIndexes[flexCount] = i;\n                flexCount++;\n            }\n        }\n        var avgDiffWidth = diff / flexPaneIndexes.length;\n        for (var j = 0, len = flexPaneIndexes.length; j < len; j++) {\n            if (this.allPanes[flexPaneIndexes[j]].style.flexBasis !== '') {\n                this.allPanes[flexPaneIndexes[j]].style.flexBasis = this.orientation === 'Horizontal' ?\n                    (this.allPanes[flexPaneIndexes[j]].offsetWidth + avgDiffWidth) + 'px' :\n                    (this.allPanes[flexPaneIndexes[j]].offsetHeight + avgDiffWidth) + 'px';\n            }\n        }\n        if (this.allPanes.length === 2 && iswindowResize) {\n            var paneCount = this.allPanes.length;\n            var minValue = void 0;\n            var paneMinRange = void 0;\n            var paneIndex = 0;\n            var updatePane = void 0;\n            var flexPane = void 0;\n            for (var i = 0; i < paneCount; i++) {\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.paneSettings[i].min)) {\n                    paneMinRange = this.convertPixelToNumber((this.paneSettings[i].min).toString());\n                    if (this.paneSettings[i].min.indexOf('%') > 0) {\n                        paneMinRange = this.convertPercentageToPixel(this.paneSettings[i].min);\n                    }\n                    minValue = this.convertPixelToNumber((paneMinRange).toString());\n                    if ((this.orientation === 'Horizontal' ? this.allPanes[i].offsetWidth : this.allPanes[i].offsetHeight) < minValue) {\n                        if (i === paneIndex) {\n                            updatePane = this.allPanes[i];\n                            flexPane = this.allPanes[i + 1];\n                        }\n                        else {\n                            updatePane = this.allPanes[i];\n                            flexPane = this.allPanes[i - 1];\n                        }\n                        var sizeDiff = minValue - (this.orientation === 'Horizontal' ?\n                            this.allPanes[i].offsetWidth : this.allPanes[i].offsetHeight);\n                        var isPercent = updatePane.style.flexBasis.indexOf('%') > -1;\n                        var updatePaneOffset = this.orientation === 'Horizontal' ? updatePane.offsetWidth : updatePane.offsetHeight;\n                        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(updatePane) && updatePane.style.flexBasis !== '' && updatePane.classList.contains(STATIC_PANE)) {\n                            updatePane.style.flexBasis = isPercent ? this.convertPixelToPercentage(updatePaneOffset + sizeDiff) + '%'\n                                : (updatePaneOffset + sizeDiff) + 'px';\n                        }\n                        var flexPaneOffset = this.orientation === 'Horizontal' ? flexPane.offsetWidth : flexPane.offsetHeight;\n                        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(flexPane) && flexPane.style.flexBasis !== '' && !flexPane.classList.contains(STATIC_PANE)) {\n                            flexPane.style.flexBasis = flexPane.style.flexBasis.indexOf('%') > -1 ?\n                                this.convertPixelToPercentage(flexPaneOffset - sizeDiff) + '%' : (flexPaneOffset - sizeDiff) + 'px';\n                        }\n                    }\n                }\n            }\n        }\n    };\n    Splitter.prototype.wireResizeEvents = function () {\n        document.addEventListener('mousemove', this.onMouseMoveHandler, true);\n        document.addEventListener('mouseup', this.onMouseUpHandler, true);\n        var touchMoveEvent = (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.info.name === 'msie') ? 'pointermove' : 'touchmove';\n        var touchEndEvent = (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.info.name === 'msie') ? 'pointerup' : 'touchend';\n        document.addEventListener(touchMoveEvent, this.onTouchMoveHandler, true);\n        document.addEventListener(touchEndEvent, this.onTouchEndHandler, true);\n    };\n    Splitter.prototype.unwireResizeEvents = function () {\n        this.element.ownerDocument.defaultView.removeEventListener('resize', this.onReportWindowSize);\n        var touchMoveEvent = (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.info.name === 'msie') ? 'pointermove' : 'touchmove';\n        var touchEndEvent = (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.info.name === 'msie') ? 'pointerup' : 'touchend';\n        document.removeEventListener('mousemove', this.onMouseMoveHandler, true);\n        document.removeEventListener('mouseup', this.onMouseUpHandler, true);\n        document.removeEventListener(touchMoveEvent, this.onTouchMoveHandler, true);\n        document.removeEventListener(touchEndEvent, this.onTouchEndHandler, true);\n    };\n    Splitter.prototype.wireClickEvents = function () {\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(this.currentSeparator, 'touchstart click', this.clickHandler, this);\n    };\n    Splitter.prototype.clickHandler = function (e) {\n        if (!e.target.classList.contains(NAVIGATE_ARROW)) {\n            var hoverBars = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.selectAll)('.' + ROOT + ' > .' + SPLIT_BAR + '.' + SPLIT_BAR_HOVER);\n            if (hoverBars.length > 0) {\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)(hoverBars, SPLIT_BAR_HOVER);\n            }\n            e.target.classList.add(SPLIT_BAR_HOVER);\n        }\n        this.splitterDetails(e);\n        var icon = e.target;\n        if (icon.classList.contains(ARROW_LEFT) || icon.classList.contains(ARROW_RIGHT) ||\n            icon.classList.contains(ARROW_DOWN) || icon.classList.contains(ARROW_UP)) {\n            if (!this.nextPane.classList.contains(PANE_HIDDEN) && !this.previousPane.classList.contains(PANE_HIDDEN)) {\n                this.collapseAction(e);\n            }\n            else {\n                this.expandAction(e);\n            }\n            this.updateSplitterSize();\n        }\n    };\n    Splitter.prototype.expandAction = function (e) {\n        var _this = this;\n        var eventArgs = this.beforeAction(e);\n        if (this.expandFlag) {\n            this.trigger('beforeExpand', eventArgs, function (beforeExpandArgs) {\n                if (!beforeExpandArgs.cancel) {\n                    _this.expandPane(e);\n                }\n                var expandEventArgs = _this.afterAction(e);\n                _this.trigger('expanded', expandEventArgs);\n            });\n        }\n        else {\n            this.expandPane(e);\n        }\n    };\n    Splitter.prototype.getIcon = function (e) {\n        var targetClass = e.target.className.split(' ').filter(function (className) {\n            return className !== NAVIGATE_ARROW && className !== HIDE_ICON;\n        });\n        return targetClass[0];\n    };\n    Splitter.prototype.expandPane = function (e) {\n        this.removeStaticPanes();\n        var collapseCount = this.element.querySelectorAll('.' + COLLAPSE_PANE).length;\n        var flexStatus = (!this.previousPane.classList.contains(COLLAPSE_PANE) &&\n            this.previousPane.classList.contains(STATIC_PANE) && !this.nextPane.classList.contains(COLLAPSE_PANE) &&\n            !this.nextPane.classList.contains(EXPAND_PANE) && this.nextPane.nextElementSibling.classList.contains(PANE) &&\n            !this.nextPane.nextElementSibling.classList.contains(STATIC_PANE) && !(collapseCount === this.allPanes.length - 2));\n        var collapseClass = [COLLAPSE_PANE, PANE_HIDDEN];\n        var icon = this.getIcon(e);\n        var isLeftOrUp = icon === ARROW_LEFT || icon === ARROW_UP;\n        var collapsePane = isLeftOrUp ? this.nextPane : this.previousPane;\n        var expandPane = isLeftOrUp ? this.previousPane : this.nextPane;\n        var expandPaneIndex = isLeftOrUp ? this.nextPaneIndex : this.prevPaneIndex;\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([collapsePane], collapseClass);\n        collapsePane.setAttribute('aria-hidden', 'false');\n        // cCount is calculated after removing the COLLAPSE_PANE\n        var cCount = this.element.querySelectorAll('.' + COLLAPSE_PANE).length;\n        if (cCount > 0) {\n            if (!expandPane.classList.contains(COLLAPSE_PANE)) {\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([expandPane], EXPAND_PANE);\n                expandPane.setAttribute('aria-expanded', 'true');\n            }\n        }\n        else if (cCount === 0) {\n            for (var i = 0; i < this.allPanes.length; i++) {\n                if (!this.allPanes[i].classList.contains(COLLAPSE_PANE)) {\n                    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([this.allPanes[i]], EXPAND_PANE);\n                    this.allPanes[i].setAttribute('aria-expanded', 'false');\n                }\n            }\n        }\n        if (this.expandFlag) {\n            this.updatePaneSettings(expandPaneIndex, false);\n        }\n        this.updateIconsOnExpand(e, icon);\n        this.updateFlexGrow();\n        if (flexStatus) {\n            this.previousPane.classList.remove(EXPAND_PANE);\n            this.previousPane.setAttribute('aria-expanded', 'false');\n            this.previousPane.style.flexGrow = '';\n        }\n    };\n    Splitter.prototype.updateFlexGrow = function () {\n        var collapseCount = 0;\n        for (var j = 0; j < this.element.children.length; j++) {\n            if (this.element.children[j].classList.contains(COLLAPSE_PANE)) {\n                collapseCount = collapseCount + 1;\n            }\n        }\n        var visiblePane = collapseCount === this.allPanes.length - 2;\n        var panes = this.allPanes;\n        for (var i = 0; i < panes.length; i++) {\n            panes[i].style.flexGrow = '';\n            if (visiblePane && this.allPanes[i].classList.contains(COLLAPSE_PANE) && this.paneSettings[i].size &&\n                i !== this.allPanes.length - 1) {\n                panes[i].style.flexGrow = '';\n            }\n            if (panes[i].classList.contains(EXPAND_PANE)) {\n                panes[i].style.flexGrow = '1';\n            }\n            else if (panes[i].classList.contains(COLLAPSE_PANE)) {\n                panes[i].style.flexGrow = '0';\n            }\n        }\n    };\n    Splitter.prototype.hideTargetBarIcon = function (targetBar, targetArrow) {\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('.' + targetArrow, targetBar)], HIDE_ICON);\n    };\n    Splitter.prototype.showTargetBarIcon = function (targetBar, targetArrow) {\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('.' + targetArrow, targetBar)], HIDE_ICON);\n    };\n    Splitter.prototype.updateIconsOnCollapse = function (e, targetIcon) {\n        this.splitterProperty();\n        var removeIcon = this.arrow;\n        var otherBar = this.currentBarIndex === (this.allBars.length - 1) ? this.prevBar : this.nextBar;\n        var otherBarIndex = this.currentBarIndex === (this.allBars.length - 1) ? this.currentBarIndex - 1\n            : this.currentBarIndex + 1;\n        if (!e.target.classList.contains(HIDE_ICON)) {\n            if (this.splitInstance.prevPaneCollapsed || this.splitInstance.nextPaneCollapsed) {\n                if (this.paneSettings[this.prevPaneIndex].collapsible && this.paneSettings[this.nextPaneIndex].collapsible) {\n                    this.resizableModel(this.currentBarIndex, false);\n                    this.hideTargetBarIcon(this.currentSeparator, targetIcon);\n                    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(otherBar)) {\n                        var otherPrevPaneIndex = otherBarIndex;\n                        var otherNextPaneIndex = otherBarIndex + 1;\n                        var collapsecount = this.getCollapseCount(otherPrevPaneIndex, otherNextPaneIndex);\n                        if (this.paneSettings[otherPrevPaneIndex].collapsible &&\n                            this.paneSettings[otherNextPaneIndex].collapsible) {\n                            if (collapsecount === 1) {\n                                this.hideTargetBarIcon(otherBar, removeIcon);\n                                this.resizableModel(otherBarIndex, false);\n                            }\n                            else if (collapsecount === 2) {\n                                this.hideBarIcons(otherBar);\n                                this.resizableModel(otherBarIndex, false);\n                            }\n                            if (!this.paneSettings[otherPrevPaneIndex].collapsible ||\n                                !this.paneSettings[otherNextPaneIndex].collapsible) {\n                                this.hideTargetBarIcon(otherBar, targetIcon);\n                            }\n                        }\n                    }\n                }\n                else {\n                    this.showTargetBarIcon(this.currentSeparator, removeIcon);\n                    this.hideTargetBarIcon(this.currentSeparator, targetIcon);\n                    this.resizableModel(this.currentBarIndex, false);\n                }\n            }\n        }\n        else {\n            this.resizableModel(this.currentBarIndex, false);\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(otherBar)) {\n                this.resizableModel(otherBarIndex, true);\n            }\n            if (!this.paneSettings[this.prevPaneIndex].collapsible || !this.paneSettings[this.nextPaneIndex].collapsible) {\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(otherBar)) {\n                    this.hideTargetBarIcon(otherBar, targetIcon);\n                }\n                this.hideTargetBarIcon(this.currentSeparator, removeIcon);\n            }\n            else {\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(otherBar)) {\n                    this.hideTargetBarIcon(otherBar, removeIcon);\n                }\n                this.showTargetBarIcon(this.currentSeparator, removeIcon);\n            }\n        }\n    };\n    Splitter.prototype.collapseAction = function (e) {\n        var _this = this;\n        var eventArgs = this.beforeAction(e);\n        if (this.collapseFlag) {\n            this.collapsePane(e);\n        }\n        else {\n            this.trigger('beforeCollapse', eventArgs, function (beforeCollapseArgs) {\n                if (!beforeCollapseArgs.cancel) {\n                    _this.collapsePane(e);\n                    var collapseEventArgs = _this.afterAction(e);\n                    _this.trigger('collapsed', collapseEventArgs);\n                }\n            });\n        }\n    };\n    Splitter.prototype.collapsePane = function (e) {\n        this.removeStaticPanes();\n        var collapseCount = this.element.querySelectorAll('.' + COLLAPSE_PANE).length;\n        var flexStatus = (this.previousPane.classList.contains(STATIC_PANE) &&\n            !this.previousPane.classList.contains(COLLAPSE_PANE) && !this.nextPane.classList.contains(COLLAPSE_PANE) &&\n            this.nextPane.nextElementSibling.classList.contains(PANE) &&\n            !this.nextPane.nextElementSibling.classList.contains(STATIC_PANE) &&\n            !this.nextPane.nextElementSibling.classList.contains(COLLAPSE_PANE) &&\n            !(collapseCount === this.allPanes.length - 2)) || (this.nextPane.classList.contains(COLLAPSE_PANE) &&\n            !this.previousPane.classList.contains(STATIC_PANE) && this.nextPane.classList.contains(STATIC_PANE));\n        var collapseClass = [COLLAPSE_PANE, PANE_HIDDEN];\n        var icon = this.getIcon(e);\n        var isLeftOrUp = icon === ARROW_LEFT || icon === ARROW_UP;\n        var collapsePane = isLeftOrUp ? this.previousPane : this.nextPane;\n        var expandPane = isLeftOrUp ? this.nextPane : this.previousPane;\n        var collapsePaneIndex = isLeftOrUp ? this.prevPaneIndex : this.nextPaneIndex;\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([collapsePane], EXPAND_PANE);\n        collapsePane.setAttribute('aria-expanded', 'false');\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([collapsePane], collapseClass);\n        collapsePane.setAttribute('aria-hidden', 'true');\n        var isFlexPane = collapsePane.style.flexBasis === '';\n        if (isFlexPane) {\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([expandPane], EXPAND_PANE);\n            expandPane.setAttribute('aria-expanded', 'true');\n        }\n        else {\n            var isFlexPaneHidden = true;\n            for (var i = 0; i < this.allPanes.length; i++) {\n                if (!this.allPanes[i].classList.contains(COLLAPSE_PANE)) {\n                    if (this.allPanes[i].style.flexBasis === '' && !this.allPanes[i].classList.contains(COLLAPSE_PANE)\n                        && !this.allPanes[i].classList.contains(EXPAND_PANE)) {\n                        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([this.allPanes[i]], EXPAND_PANE);\n                        this.allPanes[i].setAttribute('aria-expanded', 'true');\n                        isFlexPaneHidden = false;\n                        break;\n                    }\n                }\n            }\n            if (isFlexPaneHidden) {\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([expandPane], EXPAND_PANE);\n                expandPane.setAttribute('aria-expanded', 'true');\n            }\n        }\n        if (!this.collapseFlag) {\n            this.updatePaneSettings(collapsePaneIndex, true);\n        }\n        this.updateIconsOnCollapse(e, icon);\n        this.updateFlexGrow();\n        if (flexStatus) {\n            this.nextPane.classList.remove(EXPAND_PANE);\n            this.nextPane.style.flexGrow = '';\n        }\n    };\n    Splitter.prototype.removeStaticPanes = function () {\n        for (var i = 0; i < this.allPanes.length; i++) {\n            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.paneSettings[i].size)) {\n                this.allPanes[i].classList.remove(STATIC_PANE);\n            }\n        }\n    };\n    Splitter.prototype.beforeAction = function (e) {\n        var eventArgs = {\n            element: this.element,\n            event: e,\n            pane: [this.previousPane, this.nextPane],\n            index: [this.prevPaneIndex, this.nextPaneIndex],\n            separator: this.currentSeparator,\n            cancel: false\n        };\n        return eventArgs;\n    };\n    Splitter.prototype.updatePaneSettings = function (index, collapsed) {\n        var paneValues = this.paneSettings;\n        paneValues[index].collapsed = collapsed;\n        this.setProperties({ 'paneSettings': paneValues }, true);\n    };\n    Splitter.prototype.splitterProperty = function () {\n        this.splitInstance = {\n            currentBarIndex: this.currentBarIndex,\n            nextPaneCollapsible: this.nextPane.classList.contains(COLLAPSIBLE),\n            prevPaneCollapsible: this.previousPane.classList.contains(COLLAPSIBLE),\n            prevPaneExpanded: this.previousPane.classList.contains(EXPAND_PANE),\n            nextPaneExpanded: this.nextPane.classList.contains(EXPAND_PANE),\n            nextPaneCollapsed: this.nextPane.classList.contains(COLLAPSE_PANE),\n            prevPaneCollapsed: this.previousPane.classList.contains(COLLAPSE_PANE),\n            nextPaneIndex: this.getNextPaneIndex(),\n            prevPaneIndex: this.getPreviousPaneIndex(),\n            nextPaneNextEle: this.nextPane.nextElementSibling,\n            prevPanePreEle: this.previousPane.previousElementSibling\n        };\n    };\n    Splitter.prototype.showCurrentBarIcons = function () {\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('.' + this.arrow, this.currentSeparator)], HIDE_ICON);\n    };\n    Splitter.prototype.hideBarIcons = function (bar) {\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('.' + this.arrow, bar)], HIDE_ICON);\n    };\n    Splitter.prototype.getCollapseCount = function (prevPaneIndex, nextPaneIndex) {\n        var collapsecount = 0;\n        if (this.allPanes[prevPaneIndex].classList.contains(COLLAPSE_PANE)) {\n            collapsecount = collapsecount + 1;\n        }\n        if (this.allPanes[nextPaneIndex].classList.contains(COLLAPSE_PANE)) {\n            collapsecount = collapsecount + 1;\n        }\n        return collapsecount;\n    };\n    Splitter.prototype.checkResizableProp = function (prevPaneIndex, nextPaneIndex) {\n        if (this.paneSettings[prevPaneIndex].resizable && this.paneSettings[nextPaneIndex].resizable) {\n            return true;\n        }\n        else {\n            return false;\n        }\n    };\n    Splitter.prototype.updateIconsOnExpand = function (e, targetIcon) {\n        this.splitterProperty();\n        var showIcon = this.arrow;\n        var otherBar = this.currentBarIndex === (this.allBars.length - 1) ? this.prevBar : this.nextBar;\n        var otherBarIndex = this.currentBarIndex === (this.allBars.length - 1) ?\n            this.currentBarIndex - 1 : this.currentBarIndex + 1;\n        if (!e.target.classList.contains(HIDE_ICON)) {\n            // prevPane ! collapsed && nextPane ! collapsed\n            if (!this.splitInstance.prevPaneCollapsed && !this.splitInstance.nextPaneCollapsed) {\n                if (this.paneSettings[this.prevPaneIndex].collapsible && this.paneSettings[this.nextPaneIndex].collapsible) {\n                    this.showCurrentBarIcons();\n                    if (this.checkResizableProp(this.prevPaneIndex, this.nextPaneIndex)) {\n                        this.resizableModel(this.currentBarIndex, true);\n                    }\n                    else {\n                        this.resizableModel(this.currentBarIndex, false);\n                    }\n                    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(otherBar)) {\n                        var otherPrevPaneIndex = otherBarIndex;\n                        var otherNextPaneIndex = otherBarIndex + 1;\n                        var collapsecount = this.getCollapseCount(otherPrevPaneIndex, otherNextPaneIndex);\n                        if (this.paneSettings[otherPrevPaneIndex].collapsible &&\n                            this.paneSettings[otherNextPaneIndex].collapsible) {\n                            if (collapsecount === 0) {\n                                this.showTargetBarIcon(otherBar, targetIcon);\n                                this.showTargetBarIcon(otherBar, showIcon);\n                                if (this.checkResizableProp(otherPrevPaneIndex, otherNextPaneIndex)) {\n                                    this.resizableModel(otherBarIndex, true);\n                                }\n                            }\n                            else if (collapsecount === 1) {\n                                this.hideBarIcons(otherBar);\n                                // If condition Edge case in flexible cases\n                                if (this.allPanes[otherPrevPaneIndex].classList.contains(EXPAND_PANE) ||\n                                    this.allPanes[otherNextPaneIndex].classList.contains(EXPAND_PANE)) {\n                                    this.showTargetBarIcon(otherBar, showIcon);\n                                }\n                                else {\n                                    // Common case\n                                    this.showTargetBarIcon(otherBar, targetIcon);\n                                }\n                                this.resizableModel(otherBarIndex, false);\n                            }\n                        }\n                    }\n                }\n                else {\n                    this.hideTargetBarIcon(this.currentSeparator, targetIcon);\n                    this.showTargetBarIcon(this.currentSeparator, showIcon);\n                    if (!this.splitInstance.prevPaneCollapsed && !this.splitInstance.nextPaneCollapsed) {\n                        if (this.checkResizableProp(this.prevPaneIndex, this.nextPaneIndex)) {\n                            this.resizableModel(this.currentBarIndex, true);\n                        }\n                    }\n                    else {\n                        this.resizableModel(this.currentBarIndex, false);\n                    }\n                }\n            }\n        }\n        else {\n            if (!this.paneSettings[this.prevPaneIndex].collapsible && !this.paneSettings[this.nextPaneIndex].collapsible) {\n                if (this.checkResizableProp(this.prevPaneIndex, this.nextPaneIndex)) {\n                    this.resizableModel(this.currentBarIndex, true);\n                }\n            }\n        }\n    };\n    Splitter.prototype.afterAction = function (e) {\n        var eventArgs = {\n            element: this.element,\n            event: e,\n            pane: [this.previousPane, this.nextPane],\n            index: [this.prevPaneIndex, this.nextPaneIndex],\n            separator: this.currentSeparator\n        };\n        return eventArgs;\n    };\n    Splitter.prototype.currentIndex = function (e) {\n        this.currentBarIndex = this.getOrderIndex(parseInt(e.target.parentElement.style.order, 10), 'splitbar');\n    };\n    Splitter.prototype.getSeparatorIndex = function (target) {\n        var array = [].slice.call(this.allBars);\n        array = this.enableReversePanes ? array.reverse() : array;\n        return array.indexOf(target);\n    };\n    Splitter.prototype.getPrevBar = function (currentBar) {\n        var prevbar = this.allBars[(currentBar - 1)];\n        return prevbar;\n    };\n    Splitter.prototype.getNextBar = function (currentBar) {\n        var prevbar = this.allBars[(currentBar + 1)];\n        return prevbar;\n    };\n    Splitter.prototype.updateBars = function (index) {\n        this.prevBar = this.getPrevBar(index);\n        this.nextBar = this.getNextBar(index);\n    };\n    Splitter.prototype.splitterDetails = function (e) {\n        if (this.orientation === 'Horizontal') {\n            this.arrow = e.target.classList.contains(ARROW_LEFT) ? ARROW_RIGHT : ARROW_LEFT;\n        }\n        else {\n            this.arrow = e.target.classList.contains(ARROW_UP) ? ARROW_DOWN : ARROW_UP;\n        }\n        this.updateCurrentSeparator(e.target);\n        this.currentIndex(e);\n        this.updateBars(this.currentBarIndex);\n        this.getPaneDetails();\n    };\n    Splitter.prototype.triggerResizing = function (e) {\n        var eventArgs = {\n            element: this.element,\n            event: e,\n            pane: [this.previousPane, this.nextPane],\n            index: [this.prevPaneIndex, this.nextPaneIndex],\n            paneSize: [this.prePaneDimenson, this.nextPaneDimension],\n            separator: this.currentSeparator\n        };\n        this.trigger('resizing', eventArgs);\n    };\n    Splitter.prototype.onMouseDown = function (e) {\n        var _this = this;\n        e.preventDefault();\n        var target = e.target;\n        if (target.classList.contains(NAVIGATE_ARROW)) {\n            return;\n        }\n        this.updateCurrentSeparator(target);\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([this.currentSeparator], SPLIT_BAR_ACTIVE);\n        this.updateCursorPosition(e, 'previous');\n        this.getPaneDetails();\n        var eventArgs = {\n            element: this.element,\n            event: e,\n            pane: [this.previousPane, this.nextPane],\n            index: [this.getPreviousPaneIndex(), this.getNextPaneIndex()],\n            separator: this.currentSeparator,\n            cancel: false\n        };\n        for (var i = 0; i < this.element.querySelectorAll('iframe').length; i++) {\n            this.element.querySelectorAll('iframe')[i].style.pointerEvents = 'none';\n        }\n        this.trigger('resizeStart', eventArgs, function (resizeStartArgs) {\n            if (!resizeStartArgs.cancel) {\n                _this.wireResizeEvents();\n                _this.checkPaneSize(e);\n            }\n        });\n    };\n    Splitter.prototype.updatePaneFlexBasis = function (pane) {\n        var previous;\n        if (pane.style.flexBasis.indexOf('%') > 0) {\n            previous = this.removePercentageUnit(pane.style.flexBasis);\n        }\n        else {\n            if (pane.style.flexBasis !== '') {\n                previous = this.convertPixelToPercentage(this.convertPixelToNumber(pane.style.flexBasis));\n            }\n            else {\n                var offset = (this.orientation === 'Horizontal') ? (pane.offsetWidth) : (pane.offsetHeight);\n                previous = this.convertPixelToPercentage(offset);\n            }\n        }\n        return previous;\n    };\n    Splitter.prototype.removePercentageUnit = function (value) {\n        return parseFloat(value.slice(0, value.indexOf('%')));\n    };\n    Splitter.prototype.convertPercentageToPixel = function (value, targetElement) {\n        var percentage = value.toString();\n        var convertedValue;\n        if (percentage.indexOf('%') > -1) {\n            convertedValue = parseFloat(percentage.slice(0, percentage.indexOf('%')));\n            var offsetValue = void 0;\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(targetElement)) {\n                offsetValue = this.panesDimensions[this.allPanes.indexOf(targetElement)];\n            }\n            else {\n                offsetValue = (this.orientation === 'Horizontal') ? this.element.offsetWidth : this.element.offsetHeight;\n            }\n            convertedValue = Math.ceil(offsetValue * (convertedValue / 100));\n        }\n        else {\n            convertedValue = parseInt(percentage, 10);\n        }\n        return convertedValue;\n    };\n    Splitter.prototype.convertPixelToPercentage = function (value) {\n        var offsetValue = (this.orientation === 'Horizontal') ? this.element.offsetWidth : this.element.offsetHeight;\n        return (value / offsetValue) * 100;\n    };\n    Splitter.prototype.convertPixelToNumber = function (value) {\n        value = value.toString();\n        if (value.indexOf('p') > -1) {\n            return parseFloat(value.slice(0, value.indexOf('p')));\n        }\n        else {\n            return parseFloat(value);\n        }\n    };\n    Splitter.prototype.calcDragPosition = function (rectValue, offsetValue) {\n        var separatorPosition = this.orientation === 'Horizontal' ? (this.currentCoordinates.x - rectValue) :\n            (this.currentCoordinates.y - rectValue);\n        var separator;\n        separator = separatorPosition / offsetValue;\n        separator = (separator > 1) ? 1 : (separator < 0) ? 0 : separator;\n        return separator * offsetValue;\n    };\n    Splitter.prototype.getSeparatorPosition = function (e) {\n        this.updateCursorPosition(e, 'current');\n        var rectBound = (this.orientation === 'Horizontal') ? this.element.getBoundingClientRect().left + window.scrollX :\n            this.element.getBoundingClientRect().top + window.scrollY;\n        var offSet = (this.orientation === 'Horizontal') ? this.element.offsetWidth : this.element.offsetHeight;\n        return this.calcDragPosition(rectBound, offSet);\n    };\n    Splitter.prototype.getMinMax = function (paneIndex, target, selection) {\n        var defaultVal = selection === 'min' ? 0 : null;\n        // eslint-disable-next-line\n        var paneValue = null;\n        if (selection === 'min') {\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.paneSettings[paneIndex]) &&\n                !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.paneSettings[paneIndex].min)) {\n                paneValue = this.paneSettings[paneIndex].min;\n            }\n        }\n        else {\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.paneSettings[paneIndex]) &&\n                !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.paneSettings[paneIndex].max)) {\n                paneValue = this.paneSettings[paneIndex].max;\n            }\n        }\n        if (this.paneSettings.length > 0 && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.paneSettings[paneIndex]) &&\n            !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(paneValue)) {\n            if (paneValue.indexOf('%') > 0) {\n                paneValue = this.convertPercentageToPixel(paneValue).toString();\n            }\n            return this.convertPixelToNumber(paneValue);\n        }\n        else {\n            return defaultVal;\n        }\n    };\n    Splitter.prototype.getPreviousPaneIndex = function () {\n        var separatorIndex = this.enableReversePanes ? parseInt(this.currentSeparator.style.order, 10) + 1 :\n            parseInt(this.currentSeparator.style.order, 10) - 1;\n        return this.getOrderIndex(separatorIndex, 'pane');\n    };\n    Splitter.prototype.getNextPaneIndex = function () {\n        var separatorIndex = this.enableReversePanes ? parseInt(this.currentSeparator.style.order, 10) - 1 :\n            parseInt(this.currentSeparator.style.order, 10) + 1;\n        return this.getOrderIndex(separatorIndex, 'pane');\n    };\n    Splitter.prototype.getPaneDetails = function () {\n        var prevPane = null;\n        var nextPane = null;\n        this.order = parseInt(this.currentSeparator.style.order, 10);\n        if (this.allPanes.length > 1) {\n            prevPane = this.getPrevPane(this.order);\n            nextPane = this.getNextPane(this.order);\n        }\n        if (prevPane && nextPane) {\n            this.previousPane = prevPane;\n            this.nextPane = nextPane;\n            this.prevPaneIndex = this.getPreviousPaneIndex();\n            this.nextPaneIndex = this.getNextPaneIndex();\n        }\n        else {\n            return;\n        }\n    };\n    Splitter.prototype.getPaneHeight = function (pane) {\n        return ((this.orientation === 'Horizontal') ? pane.offsetWidth.toString() :\n            pane.offsetHeight.toString());\n    };\n    Splitter.prototype.isValidSize = function (paneIndex) {\n        var isValid = false;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.paneSettings[paneIndex]) &&\n            !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.paneSettings[paneIndex].size) &&\n            this.paneSettings[paneIndex].size.indexOf('%') > -1) {\n            isValid = true;\n        }\n        return isValid;\n    };\n    Splitter.prototype.getPaneDimensions = function () {\n        this.previousPaneHeightWidth = (this.previousPane.style.flexBasis === '') ? this.getPaneHeight(this.previousPane) :\n            this.previousPane.style.flexBasis;\n        this.nextPaneHeightWidth = (this.nextPane.style.flexBasis === '') ? this.getPaneHeight(this.nextPane) :\n            this.nextPane.style.flexBasis;\n        if (this.isValidSize(this.prevPaneIndex)) {\n            this.previousPaneHeightWidth = this.convertPercentageToPixel(this.previousPaneHeightWidth).toString();\n            this.updatePrePaneInPercentage = true;\n        }\n        if (this.isValidSize(this.nextPaneIndex)) {\n            this.nextPaneHeightWidth = this.convertPercentageToPixel(this.nextPaneHeightWidth).toString();\n            this.updateNextPaneInPercentage = true;\n        }\n        this.prePaneDimenson = this.convertPixelToNumber(this.previousPaneHeightWidth.toString());\n        this.nextPaneDimension = this.convertPixelToNumber(this.nextPaneHeightWidth.toString());\n    };\n    Splitter.prototype.checkCoordinates = function (pageX, pageY) {\n        var coordinatesChanged = true;\n        if ((pageX === this.previousCoordinates.x && pageY === this.previousCoordinates.y)) {\n            coordinatesChanged = false;\n        }\n        return coordinatesChanged;\n    };\n    Splitter.prototype.isCursorMoved = function (e) {\n        var cursorMoved = true;\n        if (this.getEventType(e.type) === 'mouse' || (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(e.pointerType)) &&\n            this.getEventType(e.pointerType) === 'mouse') {\n            cursorMoved = this.checkCoordinates(e.pageX, e.pageY);\n        }\n        else {\n            cursorMoved = (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.info.name !== 'msie') ?\n                this.checkCoordinates(e.touches[0].pageX, e.touches[0].pageY) :\n                this.checkCoordinates(e.pageX, e.pageY);\n        }\n        return cursorMoved;\n    };\n    Splitter.prototype.getBorder = function () {\n        this.border = 0;\n        var border = this.orientation === 'Horizontal' ? ((this.element.offsetWidth - this.element.clientWidth) / 2) :\n            (this.element.offsetHeight - this.element.clientHeight) / 2;\n        this.border = _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.info.name !== 'chrome' ? this.border : border;\n    };\n    Splitter.prototype.onMouseMove = function (e) {\n        if (!this.isCursorMoved(e)) {\n            return;\n        }\n        this.getPaneDetails();\n        this.getPaneDimensions();\n        this.triggerResizing(e);\n        var left = this.validateDraggedPosition(this.getSeparatorPosition(e), this.prePaneDimenson, this.nextPaneDimension);\n        var separatorNewPosition;\n        this.getBorder();\n        if (this.orientation === 'Horizontal') {\n            separatorNewPosition = (this.element.getBoundingClientRect().left + left) -\n                this.currentSeparator.getBoundingClientRect().left + this.border;\n        }\n        else {\n            separatorNewPosition = (this.element.getBoundingClientRect().top + left) -\n                this.currentSeparator.getBoundingClientRect().top + this.border;\n        }\n        this.nextPaneHeightWidth =\n            (typeof (this.nextPaneHeightWidth) === 'string' && this.nextPaneHeightWidth.indexOf('p') > -1) ?\n                this.convertPixelToNumber(this.nextPaneHeightWidth) : parseInt(this.nextPaneHeightWidth, 10);\n        this.previousPaneHeightWidth =\n            (typeof (this.previousPaneHeightWidth) === 'string' && this.previousPaneHeightWidth.indexOf('p') > -1) ?\n                this.convertPixelToNumber(this.previousPaneHeightWidth) : parseInt(this.previousPaneHeightWidth, 10);\n        this.prevPaneCurrentWidth = separatorNewPosition + this.previousPaneHeightWidth;\n        this.nextPaneCurrentWidth = this.nextPaneHeightWidth - separatorNewPosition;\n        this.validateMinMaxValues();\n        if (this.nextPaneCurrentWidth < 0) {\n            this.nextPaneCurrentWidth = 0;\n        }\n        /* istanbul ignore next */\n        if (this.prevPaneCurrentWidth < 0) {\n            this.prevPaneCurrentWidth = 0;\n        }\n        if ((this.nextPaneCurrentWidth + this.prevPaneCurrentWidth) > this.totalWidth) {\n            if (this.nextPaneCurrentWidth < this.prevPaneCurrentWidth) {\n                this.prevPaneCurrentWidth = this.prevPaneCurrentWidth - ((this.nextPaneCurrentWidth + this.prevPaneCurrentWidth)\n                    - this.totalWidth);\n            }\n            else {\n                this.nextPaneCurrentWidth = this.nextPaneCurrentWidth - ((this.nextPaneCurrentWidth + this.prevPaneCurrentWidth)\n                    - this.totalWidth);\n            }\n        }\n        /* istanbul ignore next */\n        if ((this.nextPaneCurrentWidth + this.prevPaneCurrentWidth) < this.totalWidth) {\n            var difference = this.totalWidth - ((this.nextPaneCurrentWidth + this.prevPaneCurrentWidth));\n            this.nextPaneCurrentWidth = this.nextPaneCurrentWidth + difference;\n        }\n        this.calculateCurrentDimensions();\n        this.addStaticPaneClass();\n        var flexPaneCount = 0;\n        for (var i = 0; i < this.paneSettings.length; i++) {\n            if (this.paneSettings[i].size === '') {\n                flexPaneCount = flexPaneCount + 1;\n            }\n            else if (this.allPanes[i].style.flexBasis !== '') {\n                this.paneSettings[i].size = this.allPanes[i].style.flexBasis;\n            }\n        }\n        var allFlexiblePanes = flexPaneCount === this.allPanes.length;\n        // Two flexible Pane Case.\n        if (this.previousPane.style.flexBasis === '' && this.nextPane.style.flexBasis === '' && !allFlexiblePanes) {\n            var middlePaneIndex = this.allPanes.length % this.allBars.length;\n            if (this.prevPaneIndex === middlePaneIndex) {\n                this.nextPane.style.flexBasis = this.nextPaneCurrentWidth;\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([this.nextPane], STATIC_PANE);\n            }\n            else if (this.nextPaneIndex === middlePaneIndex) {\n                this.previousPane.style.flexBasis = this.prevPaneCurrentWidth;\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([this.previousPane], STATIC_PANE);\n            }\n            else {\n                this.nextPane.style.flexBasis = this.nextPaneCurrentWidth;\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([this.nextPane], STATIC_PANE);\n            }\n        } // All panes are flexible\n        else if (allFlexiblePanes) {\n            this.previousPane.style.flexBasis = this.prevPaneCurrentWidth;\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([this.previousPane], STATIC_PANE);\n            this.nextPane.style.flexBasis = this.nextPaneCurrentWidth;\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([this.nextPane], STATIC_PANE);\n        } // Two Panesa are Static Pane\n        else {\n            if (this.previousPane.style.flexBasis !== '' && this.previousPane.classList.contains(STATIC_PANE)) {\n                this.previousPane.style.flexBasis = this.prevPaneCurrentWidth;\n            }\n            if (this.nextPane.style.flexBasis !== '' && this.nextPane.classList.contains(STATIC_PANE)) {\n                this.nextPane.style.flexBasis = this.nextPaneCurrentWidth;\n            }\n        }\n        var isStaticPanes = this.previousPane.style.flexBasis !== '' && this.nextPane.style.flexBasis !== '';\n        if (!(this.allPanes.length > 2) && isStaticPanes) {\n            this.updateSplitterSize();\n        }\n    };\n    Splitter.prototype.validateMinRange = function (paneIndex, paneCurrentWidth) {\n        var paneMinRange = null;\n        var paneMinDimensions;\n        var difference = 0;\n        var validatedVal;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.paneSettings[paneIndex]) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.paneSettings[paneIndex].min)) {\n            paneMinRange = this.paneSettings[paneIndex].min.toString();\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(paneMinRange)) {\n            if (paneMinRange.indexOf('%') > 0) {\n                paneMinRange = this.convertPercentageToPixel(paneMinRange).toString();\n            }\n            paneMinDimensions = this.convertPixelToNumber(paneMinRange);\n            if (paneCurrentWidth < paneMinDimensions) {\n                difference = (paneCurrentWidth - paneMinDimensions) <= 0 ? 0 :\n                    (paneCurrentWidth - paneMinDimensions);\n                this.totalWidth = this.totalWidth - difference;\n                this.totalPercent = this.convertPixelToPercentage(this.totalWidth);\n                validatedVal = paneMinDimensions;\n            }\n        }\n        return (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(validatedVal) ? paneCurrentWidth : validatedVal;\n    };\n    Splitter.prototype.validateMaxRange = function (paneIndex, paneCurrentWidth) {\n        var paneMaxRange = null;\n        var paneMaxDimensions;\n        var validatedVal;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.paneSettings[paneIndex]) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.paneSettings[paneIndex].max)) {\n            paneMaxRange = this.paneSettings[paneIndex].max.toString();\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(paneMaxRange)) {\n            if (paneMaxRange.indexOf('%') > 0) {\n                paneMaxRange = this.convertPercentageToPixel(paneMaxRange).toString();\n            }\n            paneMaxDimensions = this.convertPixelToNumber(paneMaxRange);\n            if (paneCurrentWidth > paneMaxDimensions) {\n                this.totalWidth = this.totalWidth - (paneCurrentWidth - paneMaxDimensions);\n                this.totalPercent = this.convertPixelToPercentage(this.totalWidth);\n                validatedVal = paneMaxDimensions;\n            }\n        }\n        return (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(validatedVal) ? paneCurrentWidth : validatedVal;\n    };\n    Splitter.prototype.validateMinMaxValues = function () {\n        //validate previous pane minimum range\n        this.prevPaneCurrentWidth = this.validateMinRange(this.prevPaneIndex, this.prevPaneCurrentWidth);\n        // Validate next pane minimum range\n        this.nextPaneCurrentWidth = this.validateMinRange(this.nextPaneIndex, this.nextPaneCurrentWidth);\n        // validate previous pane maximum range\n        this.prevPaneCurrentWidth = this.validateMaxRange(this.prevPaneIndex, this.prevPaneCurrentWidth);\n        // validate next pane maximum range\n        this.nextPaneCurrentWidth = this.validateMaxRange(this.nextPaneIndex, this.nextPaneCurrentWidth);\n    };\n    Splitter.prototype.equatePaneWidths = function () {\n        var difference;\n        if ((this.prevPaneCurrentWidth + this.nextPaneCurrentWidth) > this.totalPercent) {\n            difference = (this.prevPaneCurrentWidth + this.nextPaneCurrentWidth) - this.totalPercent;\n            this.prevPaneCurrentWidth = this.prevPaneCurrentWidth - (difference / 2) + '%';\n            this.nextPaneCurrentWidth = this.nextPaneCurrentWidth - (difference / 2) + '%';\n        }\n        if ((this.prevPaneCurrentWidth + this.nextPaneCurrentWidth) < this.totalPercent) {\n            difference = this.totalPercent - (this.prevPaneCurrentWidth + this.nextPaneCurrentWidth);\n            this.prevPaneCurrentWidth = this.prevPaneCurrentWidth + (difference / 2) + '%';\n            this.nextPaneCurrentWidth = this.nextPaneCurrentWidth + (difference / 2) + '%';\n        }\n    };\n    Splitter.prototype.calculateCurrentDimensions = function () {\n        if (this.updatePrePaneInPercentage || this.updateNextPaneInPercentage) {\n            this.prevPaneCurrentWidth = Math.round(Number(Math.round(this.convertPixelToPercentage(this.prevPaneCurrentWidth)\n                * 10) / 10));\n            this.nextPaneCurrentWidth = Math.round(Number(Math.round(this.convertPixelToPercentage(this.nextPaneCurrentWidth)\n                * 10) / 10));\n            if (this.prevPaneCurrentWidth === 0) {\n                this.nextPaneCurrentWidth = this.totalPercent;\n            }\n            if (this.nextPaneCurrentWidth === 0) {\n                this.prevPaneCurrentWidth = this.totalPercent;\n            }\n            if (this.prevPaneCurrentWidth + this.nextPaneCurrentWidth !== this.totalPercent) {\n                this.equatePaneWidths();\n            }\n            else {\n                this.prevPaneCurrentWidth = this.prevPaneCurrentWidth + '%';\n                this.nextPaneCurrentWidth = this.nextPaneCurrentWidth + '%';\n            }\n            this.prevPaneCurrentWidth = (this.updatePrePaneInPercentage) ? this.prevPaneCurrentWidth :\n                this.convertPercentageToPixel(this.prevPaneCurrentWidth) + 'px';\n            this.nextPaneCurrentWidth = (this.updateNextPaneInPercentage) ? this.nextPaneCurrentWidth :\n                this.convertPercentageToPixel(this.nextPaneCurrentWidth) + 'px';\n            this.updatePrePaneInPercentage = false;\n            this.updateNextPaneInPercentage = false;\n        }\n        else {\n            this.prevPaneCurrentWidth = this.prevPaneCurrentWidth + 'px';\n            this.nextPaneCurrentWidth = this.nextPaneCurrentWidth + 'px';\n        }\n    };\n    Splitter.prototype.addStaticPaneClass = function () {\n        if (!this.previousPane.classList.contains(STATIC_PANE) && !(this.previousPane.style.flexBasis === '') && !this.previousPane.classList.contains(EXPAND_PANE)) {\n            this.previousPane.classList.add(STATIC_PANE);\n        }\n        if (!this.nextPane.classList.contains(STATIC_PANE) && !(this.nextPane.style.flexBasis === '') && !this.nextPane.classList.contains(EXPAND_PANE)) {\n            this.nextPane.classList.add(STATIC_PANE);\n        }\n    };\n    Splitter.prototype.validateDraggedPosition = function (draggedPos, prevPaneHeightWidth, nextPaneHeightWidth) {\n        var separatorTopLeft = (this.orientation === 'Horizontal') ? this.currentSeparator.offsetLeft :\n            this.currentSeparator.offsetTop;\n        var prePaneRange = separatorTopLeft - prevPaneHeightWidth;\n        var nextPaneRange = nextPaneHeightWidth + separatorTopLeft;\n        var pane1MinSize = this.getMinMax(this.prevPaneIndex, this.previousPane, 'min');\n        var pane2MinSize = this.getMinMax(this.nextPaneIndex, this.nextPane, 'min');\n        var pane1MaxSize = this.getMinMax(this.prevPaneIndex, this.previousPane, 'max');\n        var pane2MaxSize = this.getMinMax(this.nextPaneIndex, this.nextPane, 'max');\n        var validatedSize = draggedPos;\n        if (draggedPos > nextPaneRange - pane2MinSize) {\n            validatedSize = nextPaneRange - pane2MinSize;\n        }\n        else if (draggedPos < prePaneRange + pane1MinSize) {\n            validatedSize = prePaneRange + pane1MinSize;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(pane1MaxSize)) {\n            if (draggedPos > prePaneRange + pane1MaxSize) {\n                validatedSize = prePaneRange + pane1MaxSize;\n            }\n        }\n        else if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(pane2MaxSize)) {\n            if (draggedPos < nextPaneRange - pane2MaxSize) {\n                validatedSize = nextPaneRange - pane2MaxSize;\n            }\n        }\n        return validatedSize;\n    };\n    Splitter.prototype.onMouseUp = function (e) {\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([this.currentSeparator], SPLIT_BAR_ACTIVE);\n        this.unwireResizeEvents();\n        var eventArgs = {\n            event: e,\n            element: this.element,\n            pane: [this.previousPane, this.nextPane],\n            index: [this.prevPaneIndex, this.nextPaneIndex],\n            separator: this.currentSeparator,\n            paneSize: [this.prePaneDimenson, this.nextPaneDimension]\n        };\n        for (var i = 0; i < this.element.querySelectorAll('iframe').length; i++) {\n            this.element.querySelectorAll('iframe')[i].style.pointerEvents = 'auto';\n        }\n        this.trigger('resizeStop', eventArgs);\n        if (this.enablePersistence) {\n            var paneValues = this.paneSettings;\n            paneValues[this.getPreviousPaneIndex()].size = this.allPanes[this.getPreviousPaneIndex()].style.flexBasis;\n            paneValues[this.getNextPaneIndex()].size = this.allPanes[this.getNextPaneIndex()].style.flexBasis;\n            this.setProperties({ 'paneSettings': paneValues }, true);\n        }\n    };\n    Splitter.prototype.panesDimension = function (index, child) {\n        var childCount = child.length;\n        var size;\n        parseInt(this.getHeight(this.element), 10);\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.paneSettings[index])) {\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.paneSettings[index].size)) {\n                size = this.paneSettings[index].size;\n                if (index < childCount) {\n                    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.setStyleAttribute)(child[index], { 'flex-basis': size, 'order': index * 2 });\n                    if (index < childCount - 1 && this.paneSettings[index].size !== '') {\n                        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([child[index]], STATIC_PANE);\n                    }\n                    else if (!this.sizeFlag) {\n                        child[index].style.flexBasis = null;\n                    }\n                    if ((index === childCount - 1) && this.sizeFlag && this.paneSettings[index].size !== '') {\n                        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([child[index]], STATIC_PANE);\n                    }\n                }\n            }\n            else {\n                this.sizeFlag = true;\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.setStyleAttribute)(child[index], { 'order': index * 2 });\n            }\n        }\n        else {\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.setStyleAttribute)(child[index], { 'order': index * 2 });\n        }\n        this.paneOrder.push(index * 2);\n    };\n    Splitter.prototype.setTemplate = function (template, toElement) {\n        toElement.innerHTML = '';\n        template = typeof (template) === 'string' ? this.sanitizeHelper(template) : template;\n        this.templateCompile(toElement, template);\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        if (this.isReact) {\n            this.renderReactTemplates();\n        }\n    };\n    // eslint-disable-next-line\n    Splitter.prototype.templateCompile = function (ele, cnt) {\n        // eslint-disable-next-line\n        var blazorContain = Object.keys(window);\n        var tempEle = this.createElement('div');\n        this.compileElement(tempEle, cnt, 'content');\n        if (tempEle.childNodes.length !== 0) {\n            [].slice.call(tempEle.childNodes).forEach(function (childEle) {\n                ele.appendChild(childEle);\n            });\n        }\n    };\n    Splitter.prototype.compileElement = function (ele, val, prop) {\n        // eslint-disable-next-line\n        var blazorContain = Object.keys(window);\n        if (typeof (val) === 'string') {\n            if (val[0] === '.' || val[0] === '#') {\n                var eleVal = document.querySelector(val);\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(eleVal)) {\n                    this.templateElement.push(eleVal);\n                    if (eleVal.style.display === 'none') {\n                        eleVal.style.removeProperty('display');\n                    }\n                    if (eleVal.getAttribute('style') === '') {\n                        eleVal.removeAttribute('style');\n                    }\n                    ele.appendChild(eleVal);\n                    return;\n                }\n                else {\n                    val = val.trim();\n                }\n            }\n            else {\n                val = val.trim();\n            }\n        }\n        var templateFn;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(val.outerHTML)) {\n            templateFn = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.compile)(val.outerHTML);\n        }\n        else {\n            templateFn = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.compile)(val);\n        }\n        var templateFUN;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(templateFn)) {\n            templateFUN = templateFn({}, this, prop, this.element.id + 'content' + this.allPanes.length.toString(), true);\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(templateFn) && templateFUN && templateFUN.length > 0) {\n            [].slice.call(templateFUN).forEach(function (el) {\n                ele.appendChild(el);\n            });\n        }\n    };\n    Splitter.prototype.paneCollapsible = function (pane, index) {\n        // eslint-disable-next-line\n        this.paneSettings[index].collapsible ? (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([pane], COLLAPSIBLE) : (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([pane], COLLAPSIBLE);\n    };\n    Splitter.prototype.createSplitPane = function (target) {\n        var childCount = target.children.length;\n        for (var i = 0; i < this.paneSettings.length; i++) {\n            if (childCount < this.paneSettings.length) {\n                var childElement = this.createElement('div');\n                this.element.appendChild(childElement);\n                childCount = childCount + 1;\n            }\n        }\n        childCount = target.children.length;\n        var child = [].slice.call(target.children);\n        this.sizeFlag = false;\n        if (childCount > 0) {\n            for (var i = 0; i < childCount; i++) {\n                // To accept only div and span element as pane\n                if (child[i].nodeName === 'DIV' || child[i].nodeName === 'SPAN') {\n                    this.allPanes.push(child[i]);\n                    if (this.orientation === 'Horizontal') {\n                        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([child[i]], [PANE, SPLIT_H_PANE, SCROLL_PANE]);\n                        this.panesDimension(i, child);\n                    }\n                    else {\n                        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([child[i]], [PANE, SPLIT_V_PANE, SCROLL_PANE]);\n                        this.panesDimension(i, child);\n                    }\n                    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.paneSettings[i]) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.paneSettings[i].content)) {\n                        this.setTemplate(this.paneSettings[i].content, child[i]);\n                    }\n                    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.paneSettings[i]) && this.paneSettings[i].cssClass) {\n                        this.setCssClass(child[i], this.paneSettings[i].cssClass);\n                    }\n                    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.paneSettings[i])) {\n                        this.paneCollapsible(child[i], i);\n                    }\n                }\n            }\n        }\n    };\n    /**\n     * expands corresponding pane based on the index is passed.\n     *\n     * @param { number } index - Specifies the index value of the corresponding pane to be expanded at initial rendering of splitter.\n     * @returns {void}\n     */\n    Splitter.prototype.expand = function (index) {\n        this.collapsedOnchange(index);\n        this.updatePaneSettings(index, false);\n    };\n    /**\n     * collapses corresponding pane based on the index is passed.\n     *\n     * @param { number } index - Specifies the index value of the corresponding pane to be collapsed at initial rendering of splitter.\n     * @returns {void}\n     */\n    Splitter.prototype.collapse = function (index) {\n        this.isCollapsed(index);\n        this.updatePaneSettings(index, true);\n    };\n    /**\n     * Removes the control from the DOM and also removes all its related events.\n     *\n     * @returns {void}\n     */\n    Splitter.prototype.destroy = function () {\n        if (!this.isDestroyed) {\n            _super.prototype.destroy.call(this);\n            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(document, 'touchstart click', this.onDocumentClick);\n            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(this.element, 'keydown', this.onMove);\n            this.element.ownerDocument.defaultView.removeEventListener('resize', this.onReportWindowSize, true);\n            while (this.element.attributes.length > 0) {\n                this.element.removeAttribute(this.element.attributes[0].name);\n            }\n            for (var i = 0; i < this.wrapper.attributes.length; i++) {\n                this.element.setAttribute(this.wrapper.attributes[i].name, this.wrapper.attributes[i].value);\n            }\n            if (this.refreshing) {\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([this.element], ['e-control', 'e-lib', ROOT]);\n                this.allBars = [];\n                this.allPanes = [];\n            }\n            this.restoreElem();\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            if (this.isReact) {\n                this.clearTemplate();\n            }\n            var separators = this.element.querySelectorAll('.e-split-bar');\n            if (separators.length > 0) {\n                for (var i = 0; i < separators.length; i++) {\n                    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(separators[i], 'touchstart', this.clickHandler);\n                    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(separators[i], 'touchstart', this.onMouseDown);\n                    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(separators[i], 'click', this.clickHandler);\n                    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(separators[i], 'mousedown', this.onMouseDown);\n                    separators[i].parentNode.removeChild(separators[i]); // Use parentNode for broader compatibility\n                }\n            }\n            var panes = this.element.querySelectorAll('.e-pane');\n            if (panes.length > 0) {\n                for (var i = 0; i < panes.length; i++) {\n                    panes[i].classList.remove(SPLIT_H_PANE, SPLIT_V_PANE, STATIC_PANE, SCROLL_PANE, PANE, RESIZABLE_PANE, HIDE_HANDLER, COLLAPSIBLE, EXPAND_PANE, PANE_HIDDEN);\n                    while (panes[i].attributes.length > 0) {\n                        panes[i].removeAttribute(panes[i].attributes[0].name);\n                    }\n                }\n            }\n            this.allBars = [];\n            this.allBars = null;\n            this.allPanes = [];\n            this.allPanes = null;\n            this.previousPane = null;\n            this.nextPane = null;\n            this.currentSeparator = null;\n            this.wrapper = null;\n            this.prevBar = null;\n            this.nextBar = null;\n            this.templateElement = null;\n        }\n    };\n    Splitter.prototype.restoreElem = function () {\n        if (this.templateElement.length > 0) {\n            for (var i = 0; i < this.templateElement.length; i++) {\n                this.templateElement[i].style.display = 'none';\n                document.body.appendChild(this.templateElement[i]);\n            }\n        }\n    };\n    Splitter.prototype.addPaneClass = function (pane) {\n        if (this.orientation === 'Horizontal') {\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([pane], [PANE, SPLIT_H_PANE, SCROLL_PANE]);\n        }\n        else {\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([pane], [PANE, SPLIT_V_PANE, SCROLL_PANE]);\n        }\n        return pane;\n    };\n    Splitter.prototype.removePaneOrders = function (paneClass) {\n        var childNodes = this.element.childNodes;\n        var panes = [];\n        for (var i = 0; childNodes.length < 0; i++) {\n            if (childNodes[i].classList.contains(paneClass)) {\n                panes.push(childNodes[i]);\n            }\n        }\n        for (var i = 0; i < panes.length; i++) {\n            panes[i].style.removeProperty('order');\n        }\n    };\n    Splitter.prototype.setPaneOrder = function () {\n        for (var i = 0; i < this.allPanes.length; i++) {\n            this.panesDimension(i, this.allPanes);\n        }\n    };\n    Splitter.prototype.removeSeparator = function () {\n        for (var i = 0; i < this.allBars.length; i++) {\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)(this.allBars[i]);\n        }\n        this.allBars = [];\n    };\n    Splitter.prototype.updatePanes = function () {\n        this.setPaneOrder();\n        this.removeSeparator();\n        this.addSeparator(this.element);\n    };\n    /**\n     * Allows you to add a pane dynamically to the specified index position by passing the pane properties.\n     *\n     * @param { PanePropertiesModel } paneProperties - Specifies the pane’s properties that apply to new pane.\n     * @param { number } index - Specifies the index where the pane will be inserted.\n     * @returns {void}\n     */\n    Splitter.prototype.addPane = function (paneProperties, index) {\n        var newPane = this.createElement('div');\n        newPane = this.addPaneClass(newPane);\n        index = (index > this.allPanes.length + 1) ? this.allPanes.length : index;\n        var paneDetails = {\n            size: (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(paneProperties.size) ? '' : paneProperties.size,\n            min: (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(paneProperties.min) ? null : paneProperties.min,\n            max: (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(paneProperties.max) ? null : paneProperties.max,\n            content: (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(paneProperties.content) ? '' : paneProperties.content,\n            resizable: (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(paneProperties.resizable) ? true : paneProperties.resizable,\n            collapsible: (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(paneProperties.collapsible) ? false : paneProperties.collapsible,\n            collapsed: (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(paneProperties.collapsed) ? false : paneProperties.collapsed,\n            cssClass: (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(paneProperties.cssClass) ? '' : paneProperties.cssClass\n        };\n        this.paneSettings.splice(index, 0, paneDetails);\n        this.setProperties({ 'paneSettings': this.paneSettings }, true);\n        if (this.orientation === 'Horizontal') {\n            this.element.insertBefore(newPane, this.element.querySelectorAll('.' + SPLIT_H_PANE)[index]);\n            this.removePaneOrders(SPLIT_H_PANE);\n        }\n        else {\n            this.element.insertBefore(newPane, this.element.querySelectorAll('.' + SPLIT_V_PANE)[index]);\n            this.removePaneOrders(SPLIT_V_PANE);\n        }\n        this.allPanes.splice(index, 0, newPane);\n        this.updatePanes();\n        this.setTemplate(this.paneSettings[index].content, newPane);\n        this.setCssClass(this.allPanes[index], paneProperties.cssClass);\n        this.allPanes[this.allPanes.length - 1].classList.remove(STATIC_PANE);\n    };\n    /**\n     * Allows you to remove the specified pane dynamically by passing its index value.\n     *\n     * @param { number } index - Specifies the index value to remove the corresponding pane.\n     * @returns {void}\n     */\n    Splitter.prototype.removePane = function (index) {\n        index = (index > this.allPanes.length + 1) ? this.allPanes.length : index;\n        var elementClass = (this.orientation === 'Horizontal') ? SPLIT_H_PANE : SPLIT_V_PANE;\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.element.querySelectorAll('.' + elementClass)[index])) {\n            return;\n        }\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)(this.element.querySelectorAll('.' + elementClass)[index]);\n        this.allPanes.splice(index, 1);\n        this.removePaneOrders(elementClass);\n        this.updatePanes();\n        this.paneSettings.splice(index, 1);\n        this.setProperties({ 'paneSettings': this.paneSettings }, true);\n        if (this.allPanes.length > 0) {\n            this.allPanes[this.allPanes.length - 1].classList.remove(STATIC_PANE);\n        }\n    };\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('100%')\n    ], Splitter.prototype, \"height\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], Splitter.prototype, \"enableReversePanes\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('100%')\n    ], Splitter.prototype, \"width\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], Splitter.prototype, \"enablePersistence\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Collection)([], PaneProperties)\n    ], Splitter.prototype, \"paneSettings\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('Horizontal')\n    ], Splitter.prototype, \"orientation\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('')\n    ], Splitter.prototype, \"cssClass\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(true)\n    ], Splitter.prototype, \"enabled\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(true)\n    ], Splitter.prototype, \"enableHtmlSanitizer\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(null)\n    ], Splitter.prototype, \"separatorSize\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Splitter.prototype, \"beforeSanitizeHtml\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Splitter.prototype, \"created\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Splitter.prototype, \"resizeStart\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Splitter.prototype, \"resizing\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Splitter.prototype, \"resizeStop\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Splitter.prototype, \"beforeCollapse\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Splitter.prototype, \"beforeExpand\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Splitter.prototype, \"collapsed\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Splitter.prototype, \"expanded\", void 0);\n    Splitter = __decorate([\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.NotifyPropertyChanges\n    ], Splitter);\n    return Splitter;\n}(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Component));\n\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-layouts/src/splitter/splitter.js?");

/***/ })

}]);