"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkej2_vue_samples"] = self["webpackChunkej2_vue_samples"] || []).push([["chunk-vendors-node_modules_syncfusion_ej2-charts_src_chart_technical-indicators_a"],{

/***/ "./node_modules/@syncfusion/ej2-charts/src/chart/technical-indicators/ad-indicator.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-charts/src/chart/technical-indicators/ad-indicator.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AccumulationDistributionIndicator: () => (/* binding */ AccumulationDistributionIndicator)\n/* harmony export */ });\n/* harmony import */ var _indicator_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./indicator-base */ \"./node_modules/@syncfusion/ej2-charts/src/chart/technical-indicators/indicator-base.js\");\nvar __extends = (undefined && undefined.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n\n/**\n * The `AccumulationDistributionIndicator` module is used to render the accumulation distribution indicator.\n */\nvar AccumulationDistributionIndicator = /** @class */ (function (_super) {\n    __extends(AccumulationDistributionIndicator, _super);\n    function AccumulationDistributionIndicator() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * Defines the predictions using accumulation distribution approach.\n     *\n     * @private\n     * @param {TechnicalIndicator} indicator - The technical indicator for which the data source is to be initialized.\n     * @returns {void}\n     */\n    AccumulationDistributionIndicator.prototype.initDataSource = function (indicator) {\n        var adPoints = [];\n        var validData = indicator.points;\n        if (validData.length > 0 && validData.length > indicator.period) {\n            adPoints = this.calculateADPoints(indicator, validData);\n        }\n        this.setSeriesRange(adPoints, indicator);\n    };\n    /**\n     * Calculates the accumulation distribution (AD) points for a technical indicator.\n     *\n     * @param {TechnicalIndicator} indicator - The technical indicator for which the AD points are calculated.\n     * @param {Points[]} validData - The valid data points used for calculation.\n     * @returns {Points[]} - The calculated accumulation distribution (AD) points.\n     */\n    AccumulationDistributionIndicator.prototype.calculateADPoints = function (indicator, validData) {\n        var temp = [];\n        var sum = 0;\n        var i = 0;\n        var value = 0;\n        var high = 0;\n        var low = 0;\n        var close = 0;\n        var signalSeries = indicator.targetSeries[0];\n        for (i = 0; i < validData.length; i++) {\n            high = Number(validData[i].high);\n            low = Number(validData[i].low);\n            close = Number(validData[i].close);\n            /**\n             * Money Flow Multiplier = [(Close -  Low) - (High - Close)] /(High - Low)\n             * Money Flow Volume = Money Flow Multiplier x Volume for the Period\n             * ADL = Previous ADL + Current Period's Money Flow Volume\n             */\n            value = ((close - low) - (high - close)) / ((high - low) ? (high - low) : 1);\n            /**\n             * Sum is to calculate the Y values of the Accumulation distribution indicator\n             */\n            sum = sum + value * Number(validData[i].volume);\n            /**\n             * To calculate the x and y values for the Accumulation distribution indicator\n             */\n            temp[i] = this.getDataPoint(validData[i].x, sum, validData[i], signalSeries, temp.length);\n        }\n        return temp;\n    };\n    /**\n     * To destroy the Accumulation Distribution Technical Indicator.\n     *\n     * @returns {void}\n     * @private\n     */\n    AccumulationDistributionIndicator.prototype.destroy = function () {\n        /**\n         * Destroys the Accumulation Distribution Technical indicator.\n         */\n    };\n    /**\n     * Get module name.\n     *\n     * @returns {string} - Returns the module name.\n     */\n    AccumulationDistributionIndicator.prototype.getModuleName = function () {\n        /**\n         * Returns the module name of the Indicator.\n         */\n        return 'AccumulationDistributionIndicator';\n    };\n    return AccumulationDistributionIndicator;\n}(_indicator_base__WEBPACK_IMPORTED_MODULE_0__.TechnicalAnalysis));\n\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-charts/src/chart/technical-indicators/ad-indicator.js?");

/***/ }),

/***/ "./node_modules/@syncfusion/ej2-charts/src/chart/technical-indicators/atr-indicator.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-charts/src/chart/technical-indicators/atr-indicator.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AtrIndicator: () => (/* binding */ AtrIndicator)\n/* harmony export */ });\n/* harmony import */ var _indicator_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./indicator-base */ \"./node_modules/@syncfusion/ej2-charts/src/chart/technical-indicators/indicator-base.js\");\nvar __extends = (undefined && undefined.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n\n/**\n * The `AtrIndicator` module is used to render the Average True Range indicator.\n */\nvar AtrIndicator = /** @class */ (function (_super) {\n    __extends(AtrIndicator, _super);\n    function AtrIndicator() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * Defines the predictions using Average True Range approach\n     *\n     * @private\n     * @param {TechnicalIndicator} indicator - The technical indicator for which the data source is to be initialized.\n     * @returns {void}\n     */\n    AtrIndicator.prototype.initDataSource = function (indicator) {\n        var validData = indicator.points;\n        if (validData.length > 0 && validData.length > indicator.period) {\n            this.calculateATRPoints(indicator, validData);\n        }\n    };\n    /**\n     * Calculates the Average True Range (ATR) points for a technical indicator.\n     *\n     * @param {TechnicalIndicator} indicator - The technical indicator for which the ATR points are calculated.\n     * @param {Points[]} validData - The valid data points used for calculation.\n     * @returns {void}\n     */\n    AtrIndicator.prototype.calculateATRPoints = function (indicator, validData) {\n        var average = 0;\n        var highLow = 0;\n        var highClose = 0;\n        var lowClose = 0;\n        var trueRange = 0;\n        var points = [];\n        var temp = [];\n        var period = indicator.period;\n        var sum = 0;\n        var y = 'y';\n        var signalSeries = indicator.targetSeries[0];\n        for (var i = 0; i < validData.length; i++) {\n            /**\n             * Current High less the current Low\n             * Current High less the previous Close (absolute value)\n             * Current Low less the previous Close (absolute value)\n             */\n            highLow = Number(validData[i].high) - Number(validData[i].low);\n            if (i > 0) {\n                //\n                highClose = Math.abs(Number(validData[i].high) - Number(validData[i - 1].close));\n                lowClose = Math.abs(Number(validData[i].low) - Number(validData[i - 1].close));\n            }\n            /**\n             * To find the maximum of highLow, highClose, lowClose\n             */\n            trueRange = Math.max(highLow, highClose, lowClose);\n            sum = sum + trueRange;\n            /**\n             * Push the x and y values for the Average true range indicator\n             */\n            if (i >= period) {\n                average = (Number(temp[i - 1][y]) * (period - 1) + trueRange) / period;\n                points.push(this.getDataPoint(validData[i].x, average, validData[i], signalSeries, points.length));\n            }\n            else {\n                average = sum / period;\n                if (i === period - 1) {\n                    points.push(this.getDataPoint(validData[i].x, average, validData[i], signalSeries, points.length));\n                }\n            }\n            temp[i] = { x: validData[i].x, y: average };\n        }\n        this.setSeriesRange(points, indicator);\n    };\n    /**\n     * To destroy the Average true range indicator.\n     *\n     * @returns {void}\n     * @private\n     */\n    AtrIndicator.prototype.destroy = function () {\n        /**\n         * Destroy the Average true range indicator.\n         */\n    };\n    /**\n     * Get module name.\n     *\n     * @returns {string} - Returns the module name.\n     */\n    AtrIndicator.prototype.getModuleName = function () {\n        /**\n         * Returns the module name of the Indicator.\n         */\n        return 'AtrIndicator';\n    };\n    return AtrIndicator;\n}(_indicator_base__WEBPACK_IMPORTED_MODULE_0__.TechnicalAnalysis));\n\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-charts/src/chart/technical-indicators/atr-indicator.js?");

/***/ }),

/***/ "./node_modules/@syncfusion/ej2-charts/src/chart/technical-indicators/bollinger-bands.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-charts/src/chart/technical-indicators/bollinger-bands.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BollingerBands: () => (/* binding */ BollingerBands)\n/* harmony export */ });\n/* harmony import */ var _series_chart_series__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../series/chart-series */ \"./node_modules/@syncfusion/ej2-charts/src/chart/series/chart-series.js\");\n/* harmony import */ var _indicator_base__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./indicator-base */ \"./node_modules/@syncfusion/ej2-charts/src/chart/technical-indicators/indicator-base.js\");\nvar __extends = (undefined && undefined.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n\n\n/**\n * The `BollingerBands` module is used to render the Bollinger Band indicator.\n */\nvar BollingerBands = /** @class */ (function (_super) {\n    __extends(BollingerBands, _super);\n    function BollingerBands() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * Initializes the series collection for a technical indicator.\n     *\n     * @param {TechnicalIndicator} indicator - The technical indicator for which the series collection is initialized.\n     * @param {Chart} chart - The chart associated with the technical indicator.\n     * @returns {void}\n     * @private\n     */\n    BollingerBands.prototype.initSeriesCollection = function (indicator, chart) {\n        indicator.targetSeries = [];\n        var rangeArea = new _series_chart_series__WEBPACK_IMPORTED_MODULE_0__.Series(indicator, 'targetSeries', {}, true);\n        rangeArea.type = 'RangeArea';\n        if (indicator.bandColor !== 'transparent' && indicator.bandColor !== 'none') {\n            this.setSeriesProperties(rangeArea, indicator, 'BollingerBand', indicator.bandColor, 0, chart);\n        }\n        var signalLine = new _series_chart_series__WEBPACK_IMPORTED_MODULE_0__.Series(indicator, 'targetSeries', {}, true);\n        this.setSeriesProperties(signalLine, indicator, 'BollingerBand', indicator.fill, indicator.width, chart);\n        var upperLine = new _series_chart_series__WEBPACK_IMPORTED_MODULE_0__.Series(indicator, 'targetSeries', {}, true);\n        this.setSeriesProperties(upperLine, indicator, 'UpperLine', indicator.upperLine.color, indicator.upperLine.width, chart);\n        var lowerLine = new _series_chart_series__WEBPACK_IMPORTED_MODULE_0__.Series(indicator, 'targetSeries', {}, true);\n        this.setSeriesProperties(lowerLine, indicator, 'LowerLine', indicator.lowerLine.color, indicator.lowerLine.width, chart);\n    };\n    /**\n     * Defines the predictions using Bollinger Band Approach\n     *\n     * @private\n     * @param {TechnicalIndicator} indicator - The technical indicator for which the data source is to be initialized.\n     * @returns {void}\n     */\n    BollingerBands.prototype.initDataSource = function (indicator) {\n        var enableBand = indicator.bandColor !== 'transparent' && indicator.bandColor !== 'none';\n        var start = enableBand ? 1 : 0;\n        var signalCollection = [];\n        var upperCollection = [];\n        var lowerCollection = [];\n        var bandCollection = [];\n        var upperSeries = indicator.targetSeries[start + 1];\n        var lowerSeries = indicator.targetSeries[start + 2];\n        var signalSeries = indicator.targetSeries[start];\n        var rangeAreaSeries = enableBand ? indicator.targetSeries[0] : null;\n        //prepare data\n        var validData = indicator.points;\n        if (validData.length && validData.length >= indicator.period) {\n            var sum = 0;\n            var deviationSum = 0;\n            var multiplier = indicator.standardDeviation;\n            var limit = validData.length;\n            var length_1 = Math.round(indicator.period);\n            var smaPoints = [];\n            var deviations = [];\n            var bollingerPoints = [];\n            for (var i_1 = 0; i_1 < length_1; i_1++) {\n                sum += Number(validData[i_1].close);\n            }\n            var sma = sum / indicator.period;\n            for (var i_2 = 0; i_2 < limit; i_2++) {\n                var y = Number(validData[i_2].close);\n                if (i_2 >= length_1 - 1 && i_2 < limit) {\n                    if (i_2 - indicator.period >= 0) {\n                        var diff = y - Number(validData[i_2 - length_1].close);\n                        sum = sum + diff;\n                        sma = sum / (indicator.period);\n                        smaPoints[i_2] = sma;\n                        deviations[i_2] = Math.pow(y - sma, 2);\n                        deviationSum += deviations[i_2] - deviations[i_2 - length_1];\n                    }\n                    else {\n                        smaPoints[i_2] = sma;\n                        deviations[i_2] = Math.pow(y - sma, 2);\n                        deviationSum += deviations[i_2];\n                    }\n                    var range = Math.sqrt(deviationSum / (indicator.period));\n                    var lowerBand = smaPoints[i_2] - (multiplier * range);\n                    var upperBand = smaPoints[i_2] + (multiplier * range);\n                    if (i_2 + 1 === length_1) {\n                        for (var j_1 = 0; j_1 < length_1 - 1; j_1++) {\n                            bollingerPoints[j_1] = {\n                                'X': validData[j_1].x, 'mb': smaPoints[i_2],\n                                'lb': lowerBand, 'ub': upperBand, visible: true\n                            };\n                        }\n                    }\n                    bollingerPoints[i_2] = {\n                        'X': validData[i_2].x, 'mb': smaPoints[i_2],\n                        'lb': lowerBand, 'ub': upperBand, visible: true\n                    };\n                }\n                else {\n                    if (i_2 < indicator.period - 1) {\n                        smaPoints[i_2] = sma;\n                        deviations[i_2] = Math.pow(y - sma, 2);\n                        deviationSum += deviations[i_2];\n                    }\n                }\n            }\n            var i = -1;\n            var j = -1;\n            for (var k = 0; k < limit; k++) {\n                if (k >= (length_1 - 1)) {\n                    var ub = 'ub';\n                    var lb = 'lb';\n                    var mb = 'mb';\n                    upperCollection.push(this.getDataPoint(validData[k].x, bollingerPoints[k][ub], validData[k], upperSeries, upperCollection.length));\n                    lowerCollection.push(this.getDataPoint(validData[k].x, bollingerPoints[k][lb], validData[k], lowerSeries, lowerCollection.length));\n                    signalCollection.push(this.getDataPoint(validData[k].x, bollingerPoints[k][mb], validData[k], signalSeries, signalCollection.length));\n                    if (enableBand) {\n                        bandCollection.push(this.getRangePoint(validData[k].x, upperCollection[++i].y, lowerCollection[++j].y, validData[k], rangeAreaSeries, bandCollection.length));\n                    }\n                }\n            }\n        }\n        if (enableBand) {\n            this.setSeriesRange(bandCollection, indicator, indicator.targetSeries[0]);\n        }\n        this.setSeriesRange(signalCollection, indicator, indicator.targetSeries[start]);\n        this.setSeriesRange(upperCollection, indicator, indicator.targetSeries[start + 1]);\n        this.setSeriesRange(lowerCollection, indicator, indicator.targetSeries[start + 2]);\n    };\n    /**\n     * To destroy the Bollinger Band.\n     *\n     * @returns {void}\n     * @private\n     */\n    BollingerBands.prototype.destroy = function () {\n        /**\n         * Destroys the bollinger band.\n         */\n    };\n    /**\n     * Get module name.\n     *\n     * @returns {string} - Returns the module name.\n     */\n    BollingerBands.prototype.getModuleName = function () {\n        /**\n         * Returns the module name of the series.\n         */\n        return 'BollingerBandsIndicator';\n    };\n    return BollingerBands;\n}(_indicator_base__WEBPACK_IMPORTED_MODULE_1__.TechnicalAnalysis));\n\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-charts/src/chart/technical-indicators/bollinger-bands.js?");

/***/ }),

/***/ "./node_modules/@syncfusion/ej2-charts/src/chart/technical-indicators/ema-indicator.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-charts/src/chart/technical-indicators/ema-indicator.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EmaIndicator: () => (/* binding */ EmaIndicator)\n/* harmony export */ });\n/* harmony import */ var _common_utils_helper__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../common/utils/helper */ \"./node_modules/@syncfusion/ej2-charts/src/common/utils/helper.js\");\n/* harmony import */ var _indicator_base__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./indicator-base */ \"./node_modules/@syncfusion/ej2-charts/src/chart/technical-indicators/indicator-base.js\");\nvar __extends = (undefined && undefined.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n\n\n/**\n * The `EmaIndicator` module is used to render the Exponential Moving Average indicator.\n */\nvar EmaIndicator = /** @class */ (function (_super) {\n    __extends(EmaIndicator, _super);\n    function EmaIndicator() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * Defines the predictions based on EMA approach.\n     *\n     * @private\n     * @param {TechnicalIndicator} indicator - The technical indicator for which the data source is to be initialized.\n     * @returns {void}\n     */\n    EmaIndicator.prototype.initDataSource = function (indicator) {\n        var field = (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_0__.firstToLowerCase)(indicator.field);\n        var xField = 'x';\n        var emaPoints = [];\n        var signalSeries = indicator.targetSeries[0];\n        //prepare data\n        var validData = indicator.points;\n        if (validData && validData.length && validData.length >= indicator.period) {\n            //find initial average\n            var sum = 0;\n            var average = 0;\n            //smoothing factor\n            var k = (2 / (indicator.period + 1));\n            for (var i = 0; i < indicator.period; i++) {\n                sum += validData[i][field];\n            }\n            average = sum / indicator.period;\n            emaPoints.push(this.getDataPoint(validData[indicator.period - 1][xField], average, validData[indicator.period - 1], signalSeries, emaPoints.length));\n            var index = indicator.period;\n            while (index < validData.length) {\n                //previous average\n                var prevAverage = emaPoints[index - indicator.period][signalSeries.yName];\n                var yValue = (validData[index][field] - prevAverage) * k + prevAverage;\n                emaPoints.push(this.getDataPoint(validData[index][xField], yValue, validData[index], signalSeries, emaPoints.length));\n                index++;\n            }\n        }\n        this.setSeriesRange(emaPoints, indicator);\n    };\n    /**\n     * To destroy the EMA Indicator.\n     *\n     * @returns {void}\n     * @private\n     */\n    EmaIndicator.prototype.destroy = function () {\n        /**\n         * Destroys the EMA Indicator.\n         */\n    };\n    /**\n     * Get module name.\n     *\n     * @returns {string} - Returns the module name.\n     */\n    EmaIndicator.prototype.getModuleName = function () {\n        /**\n         * Returns the module name of the series.\n         */\n        return 'EmaIndicator';\n    };\n    return EmaIndicator;\n}(_indicator_base__WEBPACK_IMPORTED_MODULE_1__.TechnicalAnalysis));\n\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-charts/src/chart/technical-indicators/ema-indicator.js?");

/***/ }),

/***/ "./node_modules/@syncfusion/ej2-charts/src/chart/technical-indicators/indicator-base.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-charts/src/chart/technical-indicators/indicator-base.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TechnicalAnalysis: () => (/* binding */ TechnicalAnalysis)\n/* harmony export */ });\n/* harmony import */ var _series_line_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../series/line-base */ \"./node_modules/@syncfusion/ej2-charts/src/chart/series/line-base.js\");\n/* harmony import */ var _series_chart_series__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../series/chart-series */ \"./node_modules/@syncfusion/ej2-charts/src/chart/series/chart-series.js\");\n/* harmony import */ var _common_utils_helper__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../common/utils/helper */ \"./node_modules/@syncfusion/ej2-charts/src/common/utils/helper.js\");\n/* harmony import */ var _syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @syncfusion/ej2-svg-base */ \"./node_modules/@syncfusion/ej2-svg-base/index.js\");\nvar __extends = (undefined && undefined.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n\n\n\n\n\n/**\n * The `TechnicalAnalysis` module helps predict market trends.\n *\n * @private\n */\nvar TechnicalAnalysis = /** @class */ (function (_super) {\n    __extends(TechnicalAnalysis, _super);\n    function TechnicalAnalysis() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * Defines the collection of series, that are used to represent the given technical indicator\n     *\n     * @private\n     * @param {TechnicalIndicator} indicator - The technical indicator for which the series collection is initialized.\n     * @param {Chart} chart - The chart associated with the technical indicator.\n     * @returns {void}\n     */\n    TechnicalAnalysis.prototype.initSeriesCollection = function (indicator, chart) {\n        indicator.targetSeries = [];\n        var signalLine = new _series_chart_series__WEBPACK_IMPORTED_MODULE_1__.Series(indicator, 'targetSeries', {}, true);\n        this.setSeriesProperties(signalLine, indicator, indicator.type, indicator.fill, indicator.width, chart);\n    };\n    /**\n     * Sets properties for a series associated with a technical indicator.\n     *\n     * @protected\n     * @param {Series} series - The series for which properties are to be set.\n     * @param {TechnicalIndicator} indicator - The technical indicator associated with the series.\n     * @param {string} name - The name of the series.\n     * @param {string} fill - The fill color of the series.\n     * @param {number} width - The width of the series line.\n     * @param {Chart} chart - The chart associated with the series.\n     * @returns {void}\n     */\n    TechnicalAnalysis.prototype.setSeriesProperties = function (series, indicator, name, fill, width, chart) {\n        series.name = name.length <= 4 ? name.toLocaleUpperCase() : name;\n        series.xName = 'x';\n        series.yName = 'y';\n        series.fill = fill || '#606eff';\n        series.dashArray = indicator.dashArray;\n        series.width = width;\n        series.xAxisName = indicator.xAxisName;\n        series.animation = indicator.animation;\n        series.yAxisName = indicator.yAxisName;\n        series.clipRectElement = indicator.clipRectElement;\n        series.points = [];\n        series.enableTooltip = true;\n        series.interior = series.fill;\n        series.category = 'Indicator';\n        series.index = indicator.index;\n        series.chart = chart;\n        series.xMin = Infinity;\n        series.xMax = -Infinity;\n        series.yMin = Infinity;\n        series.yMax = -Infinity;\n        series.xData = [];\n        series.yData = [];\n        series.marker.visible = false;\n        indicator.targetSeries.push(series);\n    };\n    /**\n     * Creates elements for a technical indicator in the chart.\n     *\n     * @private\n     * @param {Chart} chart - The chart in which the indicator elements are to be created.\n     * @param {TechnicalIndicator} indicator - The technical indicator for which elements are to be created.\n     * @param {number} index - The index of the indicator.\n     * @returns {void}\n     */\n    TechnicalAnalysis.prototype.createIndicatorElements = function (chart, indicator, index) {\n        if (indicator.seriesName || indicator.dataSource) {\n            (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_2__.findClipRect)(indicator.targetSeries[0]);\n        }\n        var clipRect = new _syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_3__.Rect(0, 0, 0, 0);\n        if (indicator.seriesName || indicator.dataSource) {\n            clipRect = indicator.targetSeries[0].clipRect;\n        }\n        var options = new _common_utils_helper__WEBPACK_IMPORTED_MODULE_2__.RectOption(chart.element.id + '_ChartIndicatorClipRect_' + index, 'transparent', { width: 1, color: 'Gray' }, 1, {\n            x: 0, y: 0, width: clipRect.width,\n            height: clipRect.height\n        });\n        var clipRectElement = (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_2__.appendClipElement)(chart.redraw, options, chart.renderer);\n        //defines the clip rect element\n        //creates the group for an indicator\n        indicator.indicatorElement = chart.renderer.createGroup({\n            'id': chart.element.id + 'IndicatorGroup' + index,\n            'transform': 'translate(' + clipRect.x + ',' + clipRect.y + ')',\n            'clip-path': 'url(#' + chart.element.id + '_ChartIndicatorClipRect_' + index + ')'\n        });\n        if (indicator.indicatorElement) {\n            indicator.indicatorElement.setAttribute('role', indicator.accessibility.accessibilityRole ? indicator.accessibility.accessibilityRole : '');\n            indicator.indicatorElement.setAttribute('tabindex', indicator.accessibility.focusable ? String(indicator.accessibility.tabIndex) : '-1');\n            if (indicator.accessibility.focusable) {\n                indicator.indicatorElement.style.outline = 'none';\n            }\n            indicator.indicatorElement.setAttribute('aria-label', indicator.accessibility.accessibilityDescription ? indicator.accessibility.accessibilityDescription : '');\n            indicator.indicatorElement.appendChild(clipRectElement);\n        }\n        //Defines a group for each series in a technical indicator\n        for (var _i = 0, _a = indicator.targetSeries; _i < _a.length; _i++) {\n            var series = _a[_i];\n            series.clipRectElement = clipRectElement;\n            var element = series.chart.renderer.createGroup({\n                'id': series.chart.element.id + '_Indicator_' +\n                    indicator.index + '_' + series.name + '_Group'\n            });\n            if (indicator.indicatorElement) {\n                indicator.indicatorElement.appendChild(element);\n            }\n            series.seriesElement = element;\n        }\n        if (chart.indicatorElements) {\n            chart.indicatorElements.appendChild(indicator.indicatorElement);\n        }\n    };\n    TechnicalAnalysis.prototype.getDataPoint = function (x, y, sourcePoint, series, index, indicator) {\n        if (indicator === void 0) { indicator = null; }\n        var point = new _series_chart_series__WEBPACK_IMPORTED_MODULE_1__.Points();\n        point.x = x;\n        point.y = y;\n        point.xValue = sourcePoint.xValue;\n        point.color = series.fill;\n        point.index = index;\n        point.yValue = y;\n        point.visible = true;\n        series.xMin = Math.min(series.xMin, point.xValue);\n        series.yMin = Math.min(series.yMin, point.yValue);\n        series.xMax = Math.max(series.xMax, point.xValue);\n        series.yMax = Math.max(series.yMax, point.yValue);\n        series.xData.push(point.xValue);\n        if (indicator && indicator.type === 'Macd' && series.type === 'Column') {\n            if (point.y >= 0) {\n                point.color = indicator.macdPositiveColor;\n            }\n            else {\n                point.color = indicator.macdNegativeColor;\n            }\n        }\n        return point;\n    };\n    TechnicalAnalysis.prototype.getRangePoint = function (x, high, low, sourcePoint, series, index) {\n        var point = new _series_chart_series__WEBPACK_IMPORTED_MODULE_1__.Points();\n        point.x = x;\n        point.high = high;\n        point.low = low;\n        point.xValue = sourcePoint.xValue;\n        point.color = series.fill;\n        point.index = index;\n        point.visible = true;\n        series.xData.push(point.xValue);\n        return point;\n    };\n    TechnicalAnalysis.prototype.setSeriesRange = function (points, indicator, series) {\n        if (series === void 0) { series = null; }\n        if (!series) {\n            indicator.targetSeries[0].points = points;\n        }\n        else {\n            series.points = points;\n        }\n    };\n    return TechnicalAnalysis;\n}(_series_line_base__WEBPACK_IMPORTED_MODULE_0__.LineBase));\n\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-charts/src/chart/technical-indicators/indicator-base.js?");

/***/ }),

/***/ "./node_modules/@syncfusion/ej2-charts/src/chart/technical-indicators/macd-indicator.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-charts/src/chart/technical-indicators/macd-indicator.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MacdIndicator: () => (/* binding */ MacdIndicator)\n/* harmony export */ });\n/* harmony import */ var _series_chart_series__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../series/chart-series */ \"./node_modules/@syncfusion/ej2-charts/src/chart/series/chart-series.js\");\n/* harmony import */ var _indicator_base__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./indicator-base */ \"./node_modules/@syncfusion/ej2-charts/src/chart/technical-indicators/indicator-base.js\");\nvar __extends = (undefined && undefined.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n\n\n/**\n * The `MacdIndicator` module is used to render the Moving Average Convergence Divergence indicator.\n */\nvar MacdIndicator = /** @class */ (function (_super) {\n    __extends(MacdIndicator, _super);\n    function MacdIndicator() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * Defines the collection of series to represent the MACD indicator\n     *\n     * @private\n     * @param {TechnicalIndicator} indicator - The technical indicator for which the series collection is initialized.\n     * @param {Chart} chart - The chart associated with the technical indicator.\n     * @returns {void}\n     */\n    MacdIndicator.prototype.initSeriesCollection = function (indicator, chart) {\n        _super.prototype.initSeriesCollection.call(this, indicator, chart);\n        if (indicator.macdType === 'Line' || indicator.macdType === 'Both') {\n            var macdSeries = new _series_chart_series__WEBPACK_IMPORTED_MODULE_0__.Series(indicator, 'targetSeries', {}, true);\n            this.setSeriesProperties(macdSeries, indicator, 'MacdLine', indicator.macdLine.color, indicator.macdLine.width, chart);\n        }\n        if (indicator.macdType === 'Histogram' || indicator.macdType === 'Both') {\n            var histogramSeries = new _series_chart_series__WEBPACK_IMPORTED_MODULE_0__.Series(indicator, 'targetSeries', {}, true);\n            histogramSeries.type = 'Column';\n            this.setSeriesProperties(histogramSeries, indicator, 'Histogram', indicator.macdPositiveColor, indicator.width, chart);\n        }\n    };\n    /**\n     * Defines the predictions using MACD approach.\n     *\n     * @private\n     * @param {TechnicalIndicator} indicator - The technical indicator for which the data source is to be initialized.\n     * @returns {void}\n     */\n    MacdIndicator.prototype.initDataSource = function (indicator) {\n        var signalCollection = [];\n        var fastPeriod = indicator.fastPeriod;\n        var slowPeriod = indicator.slowPeriod;\n        var trigger = indicator.period;\n        var length = fastPeriod + trigger;\n        var macdCollection = [];\n        var histogramCollection = [];\n        var validData = indicator.points;\n        var signalSeries = indicator.targetSeries[0];\n        var histogramSeries;\n        var macdLineSeries;\n        if (indicator.macdType === 'Histogram') {\n            histogramSeries = indicator.targetSeries[1];\n        }\n        else {\n            macdLineSeries = indicator.targetSeries[1];\n            if (indicator.macdType === 'Both') {\n                histogramSeries = indicator.targetSeries[2];\n            }\n        }\n        if (validData && length < validData.length && slowPeriod <= fastPeriod &&\n            slowPeriod > 0 && (length - 2) >= 0) {\n            var shortEMA = this.calculateEMAValues(slowPeriod, validData, 'close');\n            var longEMA = this.calculateEMAValues(fastPeriod, validData, 'close');\n            var macdValues = this.getMACDVales(indicator, shortEMA, longEMA);\n            macdCollection = this.getMACDPoints(indicator, macdValues, validData, macdLineSeries || signalSeries);\n            var signalEMA = this.calculateEMAValues(trigger, macdCollection, 'y');\n            signalCollection = this.getSignalPoints(indicator, signalEMA, validData, signalSeries);\n            if (histogramSeries) {\n                histogramCollection = this.getHistogramPoints(indicator, macdValues, signalEMA, validData, histogramSeries);\n            }\n        }\n        this.setSeriesRange(signalCollection, indicator, indicator.targetSeries[0]);\n        if (histogramSeries) {\n            this.setSeriesRange(histogramCollection, indicator, histogramSeries);\n        }\n        if (macdLineSeries) {\n            this.setSeriesRange(macdCollection, indicator, macdLineSeries);\n        }\n    };\n    /**\n     * Calculates Exponential Moving Average (EMA) values for the given period and valid data points.\n     *\n     * @private\n     * @param {number} period - The period for which EMA values are to be calculated.\n     * @param {Points[]} validData - The valid data points used for calculating EMA.\n     * @param {string} field - The field of the data points to be used for EMA calculation.\n     * @returns {number[]} - An array containing the calculated EMA values.\n     */\n    MacdIndicator.prototype.calculateEMAValues = function (period, validData, field) {\n        var sum = 0;\n        var initialEMA = 0;\n        var emaValues = [];\n        var emaPercent = (2 / (period + 1));\n        for (var i = 0; i < period; i++) {\n            sum += Number(validData[i][field]);\n        }\n        initialEMA = (sum / period);\n        emaValues.push(initialEMA);\n        var emaAvg = initialEMA;\n        for (var j = period; j < validData.length; j++) {\n            emaAvg = (Number(validData[j][field]) - emaAvg) * emaPercent + emaAvg;\n            emaValues.push(emaAvg);\n        }\n        return emaValues;\n    };\n    /**\n     * Calculates Moving Average Convergence Divergence (MACD) points based on the provided MACD values,\n     * valid data points, and series information.\n     *\n     * @private\n     * @param {TechnicalIndicator} indicator - The MACD indicator.\n     * @param {number[]} macdPoints - The array of MACD values.\n     * @param {Points[]} validData - The valid data points used for calculating MACD.\n     * @param {Series} series - The series information.\n     * @returns {Points[]} - An array containing the calculated MACD points.\n     */\n    MacdIndicator.prototype.getMACDPoints = function (indicator, macdPoints, validData, series) {\n        var macdCollection = [];\n        var dataMACDIndex = indicator.fastPeriod - 1;\n        var macdIndex = 0;\n        while (dataMACDIndex < validData.length) {\n            macdCollection.push(this.getDataPoint(validData[dataMACDIndex].x, macdPoints[macdIndex], validData[dataMACDIndex], series, macdCollection.length));\n            dataMACDIndex++;\n            macdIndex++;\n        }\n        return macdCollection;\n    };\n    /**\n     * Calculates the signal line points for the Moving Average Convergence Divergence (MACD) indicator\n     * based on the provided signal EMA values, valid data points, and series information.\n     *\n     * @private\n     * @param {TechnicalIndicator} indicator - The MACD indicator.\n     * @param {number[]} signalEma - The array of signal EMA values.\n     * @param {Points[]} validData - The valid data points used for calculating MACD.\n     * @param {Series} series - The series information.\n     * @returns {Points[]} - An array containing the calculated signal line points.\n     */\n    MacdIndicator.prototype.getSignalPoints = function (indicator, signalEma, validData, series) {\n        var dataSignalIndex = indicator.fastPeriod + indicator.period - 2;\n        var signalIndex = 0;\n        var signalCollection = [];\n        while (dataSignalIndex < validData.length) {\n            signalCollection.push(this.getDataPoint(validData[dataSignalIndex].x, signalEma[signalIndex], validData[dataSignalIndex], series, signalCollection.length));\n            dataSignalIndex++;\n            signalIndex++;\n        }\n        return signalCollection;\n    };\n    /**\n     * Calculates the Moving Average Convergence Divergence (MACD) values based on the provided short EMA\n     * and long EMA values for the MACD indicator.\n     *\n     * @private\n     * @param {TechnicalIndicator} indicator - The MACD indicator.\n     * @param {number[]} shortEma - The array of short EMA values.\n     * @param {number[]} longEma - The array of long EMA values.\n     * @returns {number[]} - An array containing the calculated MACD values.\n     */\n    MacdIndicator.prototype.getMACDVales = function (indicator, shortEma, longEma) {\n        var macdPoints = [];\n        var diff = indicator.fastPeriod - indicator.slowPeriod;\n        for (var i = 0; i < longEma.length; i++) {\n            macdPoints.push((shortEma[i + diff] - longEma[i]));\n        }\n        return macdPoints;\n    };\n    /**\n     * Calculates the histogram points for the MACD indicator based on the provided MACD values and signal EMA values.\n     *\n     * @private\n     * @param {TechnicalIndicator} indicator - The MACD indicator.\n     * @param {number[]} macdPoints - The array of MACD values.\n     * @param {number[]} signalEma - The array of signal EMA values.\n     * @param {Points[]} validData - The array of valid data points.\n     * @param {Series} series - The series associated with the MACD indicator.\n     * @returns {Points[]} - An array containing the calculated histogram points.\n     */\n    MacdIndicator.prototype.getHistogramPoints = function (indicator, macdPoints, signalEma, validData, series) {\n        var dataHistogramIndex = indicator.fastPeriod + indicator.period - 2;\n        var histogramIndex = 0;\n        var histogramCollection = [];\n        while (dataHistogramIndex < validData.length) {\n            histogramCollection.push(this.getDataPoint(validData[dataHistogramIndex].x, macdPoints[histogramIndex + (indicator.period - 1)] -\n                signalEma[histogramIndex], validData[dataHistogramIndex], series, histogramCollection.length, indicator));\n            dataHistogramIndex++;\n            histogramIndex++;\n        }\n        return histogramCollection;\n    };\n    /**\n     * To destroy the MACD Indicator.\n     *\n     * @returns {void}\n     * @private\n     */\n    MacdIndicator.prototype.destroy = function () {\n        /**\n         * Destroys the MACD indicator.\n         */\n    };\n    /**\n     * Get module name.\n     *\n     * @returns {string} - Returns the module name.\n     */\n    MacdIndicator.prototype.getModuleName = function () {\n        /**\n         * Returns the module name of the series.\n         */\n        return 'MacdIndicator';\n    };\n    return MacdIndicator;\n}(_indicator_base__WEBPACK_IMPORTED_MODULE_1__.TechnicalAnalysis));\n\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-charts/src/chart/technical-indicators/macd-indicator.js?");

/***/ })

}]);