"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkej2_vue_samples"] = self["webpackChunkej2_vue_samples"] || []).push([["chunk-vendors-node_modules_syncfusion_ej2-diagrams_src_diagram_load-utility_c"],{

/***/ "./node_modules/@syncfusion/ej2-diagrams/src/diagram/load-utility/connectorProperties.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-diagrams/src/diagram/load-utility/connectorProperties.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ConnectorProperties: () => (/* binding */ ConnectorProperties)\n/* harmony export */ });\n/* harmony import */ var _enum_enum__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../enum/enum */ \"./node_modules/@syncfusion/ej2-diagrams/src/diagram/enum/enum.js\");\n\nvar ConnectorProperties = /** @class */ (function () {\n    function ConnectorProperties(labelProperties) {\n        this.labelProperties = labelProperties;\n    }\n    //(EJ2-272287) Provide support to convert the EJ1 diagram to EJ2 diagram\n    //Convert and render the connector collection from EJ1 to EJ2\n    ConnectorProperties.prototype.renderConnectorsCollection = function (convertedData, data) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        convertedData.connectors = [];\n        var connectors = [];\n        for (var i = 0; i < data.connectors.length; i++) {\n            var connector = data.connectors[parseInt(i.toString(), 10)];\n            var newConnector = this.convertToConnector(connector);\n            connectors.push(newConnector);\n        }\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        convertedData.connectors = connectors;\n    };\n    //(EJ2-272287) Provide support to convert the EJ1 diagram to EJ2 diagram\n    //Convert and render the connector properties from EJ1 to EJ2\n    ConnectorProperties.prototype.convertToConnector = function (connector) {\n        var newConnector = {};\n        newConnector.style = {};\n        if (connector.name) {\n            newConnector.id = connector.name;\n        }\n        if (connector.addInfo) {\n            newConnector.addInfo = connector.addInfo;\n        }\n        if (connector.bridgeSpace) {\n            newConnector.bridgeSpace = connector.bridgeSpace;\n        }\n        if (connector.constraints) {\n            newConnector.constraints = this.setConnectorConstraints(connector.constraints);\n        }\n        if (connector.cornerRadius) {\n            newConnector.cornerRadius = connector.cornerRadius;\n        }\n        if (connector.labels) {\n            newConnector.annotations = this.labelProperties.setLabelProperties(connector.labels, connector);\n        }\n        if (connector.lineColor) {\n            newConnector.style.fill = connector.lineColor;\n        }\n        if (connector.lineWidth) {\n            newConnector.style.strokeWidth = connector.lineWidth;\n        }\n        if (connector.lineDashArray) {\n            newConnector.style.strokeDashArray = connector.lineDashArray;\n        }\n        if (connector.opacity) {\n            newConnector.style.opacity = connector.opacity;\n        }\n        if (connector.lineHitPadding) {\n            newConnector.hitPadding = connector.lineHitPadding;\n        }\n        if (connector.margin) {\n            // eslint-disable-next-line max-len\n            newConnector.margin = { left: connector.margin.left, right: connector.margin.right, top: connector.margin.top, bottom: connector.margin.bottom };\n        }\n        if (connector.segments) {\n            newConnector.type = connector.segments[0].type.charAt(0).toUpperCase() + (connector.segments[0].type).slice(1);\n            newConnector.segments = this.setConnectorSegments(connector.segments);\n        }\n        if (connector.shape) {\n            newConnector.shape = this.getConnectorShape(connector.shape);\n        }\n        if (connector.sourceDecorator) {\n            newConnector.sourceDecorator = {\n                height: connector.sourceDecorator.height,\n                width: connector.sourceDecorator.width,\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                shape: (this.getDecoratorShape(connector.sourceDecorator.shape)),\n                pathData: connector.sourceDecorator.pathData,\n                style: {\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    fill: connector.sourceDecorator.fillColor,\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    strokeColor: connector.sourceDecorator.lineColor,\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    strokeWidth: connector.sourceDecorator.lineWidth\n                }\n            };\n        }\n        if (connector.targetDecorator) {\n            newConnector.targetDecorator = {\n                height: connector.targetDecorator.height,\n                width: connector.targetDecorator.width,\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                shape: this.getDecoratorShape(connector.targetDecorator.shape),\n                pathData: connector.targetDecorator.pathData,\n                style: {\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    fill: connector.targetDecorator.fillColor,\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    strokeColor: connector.targetDecorator.lineColor,\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    strokeWidth: connector.targetDecorator.lineWidth\n                }\n            };\n        }\n        if (connector.sourceNode) {\n            newConnector.sourceID = connector.sourceNode;\n        }\n        if (connector.targetNode) {\n            newConnector.targetID = connector.targetNode;\n        }\n        if (connector.sourcePoint) {\n            newConnector.sourcePoint = { x: connector.sourcePoint.x, y: connector.sourcePoint.y };\n        }\n        if (connector.targetPoint) {\n            newConnector.targetPoint = { x: connector.targetPoint.x, y: connector.targetPoint.y };\n        }\n        if (connector.sourcePort) {\n            newConnector.sourcePortID = connector.sourcePort;\n        }\n        if (connector.targetPort) {\n            newConnector.targetPortID = connector.targetPort;\n        }\n        if (connector.tooltip) {\n            newConnector.tooltip = {\n                content: connector.tooltip.content,\n                relativeMode: connector.tooltip.relativeMode\n            };\n        }\n        if (connector.visible) {\n            newConnector.visible = connector.visible;\n        }\n        if (connector.zOrder) {\n            newConnector.zIndex = connector.zOrder;\n        }\n        return newConnector;\n    };\n    //(EJ2-272287) Provide support to convert the EJ1 diagram to EJ2 diagram\n    //Convert and assign the connector shapes from EJ1 to EJ2\n    ConnectorProperties.prototype.getConnectorShape = function (shape) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        var connectorShape = null;\n        if (shape) {\n            if (shape.type === 'bpmn') {\n                connectorShape = {\n                    type: 'Bpmn',\n                    flow: (shape.flow).charAt(0).toUpperCase() + (shape.flow).slice(1)\n                };\n                if (shape.flow === 'sequence') {\n                    connectorShape.sequence = (shape.sequence).charAt(0).toUpperCase() + (shape.sequence).slice(1);\n                }\n                else if (shape.flow === 'association') {\n                    connectorShape.association = (shape.association).charAt(0).toUpperCase() + (shape.association).slice(1);\n                }\n                else {\n                    connectorShape.message = (shape.message).charAt(0).toUpperCase() + (shape.message).slice(1);\n                }\n            }\n            if (shape.type === 'umlclassifier') {\n                connectorShape = {\n                    type: 'UmlClassifier',\n                    relationship: (shape.relationship).charAt(0).toUpperCase() + (shape.relationship).slice(1),\n                    multiplicity: {\n                        type: (shape.multiplicity.type).charAt(0).toUpperCase() + (shape.multiplicity.type).slice(1),\n                        source: {\n                            upperBounds: shape.multiplicity.source.upperBounds,\n                            optional: shape.multiplicity.source.optional,\n                            lowerBounds: shape.multiplicity.source.lowerBounds\n                        },\n                        target: {\n                            upperBounds: shape.multiplicity.target.upperBounds,\n                            optional: shape.multiplicity.target.optional,\n                            lowerBounds: shape.multiplicity.target.lowerBounds\n                        }\n                    }\n                };\n            }\n            if (shape.type === 'umlactivity') {\n                connectorShape = {\n                    type: 'UmlActivity',\n                    flow: (shape.flow).charAt(0).toUpperCase() + (shape.flow).slice(1)\n                };\n            }\n        }\n        return connectorShape;\n    };\n    //(EJ2-272287) Provide support to convert the EJ1 diagram to EJ2 diagram\n    //Sets the connector decorator shapes from EJ1 to EJ2\n    ConnectorProperties.prototype.getDecoratorShape = function (shape) {\n        var decoratorShape = 'None';\n        if (shape === 'path') {\n            decoratorShape = 'Custom';\n        }\n        else {\n            decoratorShape = (shape).charAt(0).toUpperCase() + (shape).slice(1);\n        }\n        return decoratorShape;\n    };\n    //(EJ2-272287) Provide support to convert the EJ1 diagram to EJ2 diagram\n    //Convert and render the connector collection from EJ1 to EJ2\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    ConnectorProperties.prototype.setConnectorSegments = function (segments) {\n        var connectorSegments = [];\n        if (segments.length > 0) {\n            for (var i = 0; i < segments.length; i++) {\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                var segment = {};\n                var segmentProp = segments[parseInt(i.toString(), 10)];\n                // eslint-disable-next-line max-len\n                segment.direction = segmentProp.direction ? segmentProp.direction.charAt(0).toUpperCase() + segmentProp.direction.slice(1) : segmentProp._direction ? segmentProp._direction.charAt(0).toUpperCase() + segmentProp._direction.slice(1) : null;\n                segment.length = segmentProp.length ? segmentProp.length : segmentProp._length ? segmentProp._length : null;\n                segment.point = segmentProp.point ? { x: segmentProp.point.x, y: segmentProp.point.y } : null;\n                segment.point1 = segmentProp.point1 ? { x: segmentProp.point1.x, y: segmentProp.point1.y } : null;\n                segment.point2 = segmentProp.point2 ? { x: segmentProp.point2.x, y: segmentProp.point2.y } : null;\n                // eslint-disable-next-line max-len\n                segment.vector1 = segmentProp.vector1 ? { angle: segmentProp.vector1.angle, distance: segmentProp.vector1.distance } : null;\n                // eslint-disable-next-line max-len\n                segment.vector2 = segmentProp.vector2 ? { angle: segmentProp.vector2.angle, distance: segmentProp.vector2.distance } : null;\n                if (segmentProp.points) {\n                    segment.points = this.getSegmentPoints(segmentProp.points);\n                }\n                if (segmentProp.type) {\n                    segment.type = (segmentProp.type).charAt(0).toUpperCase() + (segmentProp.type).slice(1);\n                }\n                connectorSegments.push(segment);\n            }\n        }\n        return connectorSegments;\n    };\n    //(EJ2-272287) Provide support to convert the EJ1 diagram to EJ2 diagram\n    //Render the connector Segment points from EJ1 to EJ2\n    ConnectorProperties.prototype.getSegmentPoints = function (points) {\n        var pointsCollection = [];\n        if (points.length > 0) {\n            for (var i = 0; i < points.length; i++) {\n                var newPoint = {};\n                var point = points[parseInt(i.toString(), 10)];\n                newPoint.x = point.x;\n                newPoint.y = point.y;\n                pointsCollection.push(newPoint);\n            }\n        }\n        return pointsCollection;\n    };\n    //(EJ2-272287) Provide support to convert the EJ1 diagram to EJ2 diagram\n    //Sets the connector constraints\n    ConnectorProperties.prototype.setConnectorConstraints = function (constraints) {\n        var connectorConstraints = _enum_enum__WEBPACK_IMPORTED_MODULE_0__.ConnectorConstraints.None;\n        if (constraints & _enum_enum__WEBPACK_IMPORTED_MODULE_0__.ConnectorConstraints.Select) {\n            connectorConstraints = connectorConstraints | _enum_enum__WEBPACK_IMPORTED_MODULE_0__.ConnectorConstraints.Select;\n        }\n        if (constraints & _enum_enum__WEBPACK_IMPORTED_MODULE_0__.ConnectorConstraints.Delete) {\n            connectorConstraints = connectorConstraints | _enum_enum__WEBPACK_IMPORTED_MODULE_0__.ConnectorConstraints.Delete;\n        }\n        if (constraints & _enum_enum__WEBPACK_IMPORTED_MODULE_0__.ConnectorConstraints.Drag) {\n            connectorConstraints = connectorConstraints | _enum_enum__WEBPACK_IMPORTED_MODULE_0__.ConnectorConstraints.Drag;\n        }\n        if (constraints & _enum_enum__WEBPACK_IMPORTED_MODULE_0__.ConnectorConstraints.DragSourceEnd) {\n            connectorConstraints = connectorConstraints | _enum_enum__WEBPACK_IMPORTED_MODULE_0__.ConnectorConstraints.DragSourceEnd;\n        }\n        if (constraints & _enum_enum__WEBPACK_IMPORTED_MODULE_0__.ConnectorConstraints.DragTargetEnd) {\n            connectorConstraints = connectorConstraints | _enum_enum__WEBPACK_IMPORTED_MODULE_0__.ConnectorConstraints.DragTargetEnd;\n        }\n        if (constraints & _enum_enum__WEBPACK_IMPORTED_MODULE_0__.ConnectorConstraints.DragSegmentThumb) {\n            connectorConstraints = connectorConstraints | _enum_enum__WEBPACK_IMPORTED_MODULE_0__.ConnectorConstraints.DragSegmentThumb;\n        }\n        if (constraints & _enum_enum__WEBPACK_IMPORTED_MODULE_0__.ConnectorConstraints.Bridging) {\n            connectorConstraints = connectorConstraints | _enum_enum__WEBPACK_IMPORTED_MODULE_0__.ConnectorConstraints.Bridging;\n        }\n        if (constraints & _enum_enum__WEBPACK_IMPORTED_MODULE_0__.ConnectorConstraints.InheritBridging) {\n            connectorConstraints = connectorConstraints | _enum_enum__WEBPACK_IMPORTED_MODULE_0__.ConnectorConstraints.InheritBridging;\n        }\n        if (constraints & _enum_enum__WEBPACK_IMPORTED_MODULE_0__.ConnectorConstraints.AllowDrop) {\n            connectorConstraints = connectorConstraints | _enum_enum__WEBPACK_IMPORTED_MODULE_0__.ConnectorConstraints.AllowDrop;\n        }\n        if (constraints & _enum_enum__WEBPACK_IMPORTED_MODULE_0__.ConnectorConstraints.InheritTooltip) {\n            connectorConstraints = connectorConstraints | _enum_enum__WEBPACK_IMPORTED_MODULE_0__.ConnectorConstraints.InheritTooltip;\n        }\n        if (constraints & _enum_enum__WEBPACK_IMPORTED_MODULE_0__.ConnectorConstraints.PointerEvents) {\n            connectorConstraints = connectorConstraints | _enum_enum__WEBPACK_IMPORTED_MODULE_0__.ConnectorConstraints.PointerEvents;\n        }\n        if (constraints & _enum_enum__WEBPACK_IMPORTED_MODULE_0__.ConnectorConstraints.BridgeObstacle) {\n            connectorConstraints = connectorConstraints | _enum_enum__WEBPACK_IMPORTED_MODULE_0__.ConnectorConstraints.BridgeObstacle;\n        }\n        if (constraints & _enum_enum__WEBPACK_IMPORTED_MODULE_0__.ConnectorConstraints.Interaction) {\n            connectorConstraints = connectorConstraints | _enum_enum__WEBPACK_IMPORTED_MODULE_0__.ConnectorConstraints.Interaction;\n        }\n        if (constraints & _enum_enum__WEBPACK_IMPORTED_MODULE_0__.ConnectorConstraints.Default) {\n            connectorConstraints = connectorConstraints | _enum_enum__WEBPACK_IMPORTED_MODULE_0__.ConnectorConstraints.Default;\n        }\n        return connectorConstraints;\n    };\n    /**\n     * Get module name.\n     *\n     * @returns {string} Returns the module name\n     */\n    ConnectorProperties.prototype.getModuleName = function () {\n        /**\n         * Returns the module name\n         */\n        return 'ConnectorProperties';\n    };\n    return ConnectorProperties;\n}());\n\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-diagrams/src/diagram/load-utility/connectorProperties.js?");

/***/ }),

/***/ "./node_modules/@syncfusion/ej2-diagrams/src/diagram/load-utility/labelProperties.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-diagrams/src/diagram/load-utility/labelProperties.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LabelProperties: () => (/* binding */ LabelProperties)\n/* harmony export */ });\n/* harmony import */ var _enum_enum__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../enum/enum */ \"./node_modules/@syncfusion/ej2-diagrams/src/diagram/enum/enum.js\");\n\nvar LabelProperties = /** @class */ (function () {\n    function LabelProperties(modelProperties) {\n        this.modelProperties = modelProperties;\n    }\n    //(EJ2-272287) Provide support to convert the EJ1 diagram to EJ2 diagram\n    //Update and assign the annotation properties from EJ1 to EJ2\n    LabelProperties.prototype.setLabelProperties = function (oldLabels, item) {\n        var labelCollection = [];\n        if (oldLabels.length > 0) {\n            for (var i = 0; i < oldLabels.length; i++) {\n                var label = oldLabels[parseInt(i.toString(), 10)];\n                var newLabel = {};\n                (newLabel).style = {};\n                // 930796: EJ1's Annotation id is not applied properly in EJ2 diagram\n                if (label.name) {\n                    var annotationId = label.name.split('_');\n                    var id = annotationId[annotationId.length - 1];\n                    newLabel.id = id;\n                }\n                if (label.addInfo) {\n                    newLabel.addInfo = label.addInfo;\n                }\n                if (label.text) {\n                    newLabel.content = label.text;\n                }\n                if (label.constraints) {\n                    newLabel.constraints = this.setLabelConstraints(label.constraints);\n                }\n                if (label.readOnly) {\n                    newLabel.constraints = newLabel.constraints | _enum_enum__WEBPACK_IMPORTED_MODULE_0__.AnnotationConstraints.ReadOnly;\n                }\n                if (label.dragLimit) {\n                    newLabel.dragLimit = {\n                        left: label.dragLimit.left, right: label.dragLimit.right,\n                        top: label.dragLimit.top, bottom: label.dragLimit.bottom\n                    };\n                }\n                if (label.height) {\n                    newLabel.height = label.height;\n                }\n                if (label.horizontalAlignment) {\n                    newLabel.horizontalAlignment = label.horizontalAlignment.charAt(0).toUpperCase() +\n                        label.horizontalAlignment.slice(1).toLowerCase();\n                }\n                if (label.verticalAlignment) {\n                    newLabel.verticalAlignment = label.verticalAlignment.charAt(0).toUpperCase() +\n                        label.verticalAlignment.slice(1).toLowerCase();\n                }\n                if (label.hyperlink) {\n                    newLabel.hyperlink = { link: label.hyperlink, color: 'blue' };\n                }\n                if (label.margin) {\n                    newLabel.margin = {\n                        left: label.margin.left, right: label.margin.right,\n                        top: label.margin.top, bottom: label.margin.bottom\n                    };\n                }\n                newLabel.rotateAngle = label.rotateAngle;\n                if (label.offset) {\n                    if (item) {\n                        newLabel.offset = label.offset.x;\n                    }\n                    else {\n                        newLabel.offset = { x: label.offset.x, y: label.offset.y };\n                    }\n                }\n                newLabel.style.color = label.fontColor;\n                newLabel.style.fontFamily = label.fontFamily;\n                newLabel.style.fontSize = label.fontSize;\n                newLabel.style.italic = label.italic;\n                newLabel.style.bold = label.bold;\n                if (label.borderColor) {\n                    newLabel.style.strokeColor = label.borderColor;\n                }\n                if (label.borderWidth) {\n                    newLabel.style.strokeWidth = label.borderWidth;\n                }\n                // 930796: EJ1's Annotation wrapping and text overflow style is not applied properly in EJ2 diagram\n                if (label.wrapping) {\n                    switch (label.wrapping) {\n                        case 'wrap':\n                            newLabel.style.textWrapping = 'Wrap';\n                            break;\n                        case 'nowrap':\n                            newLabel.style.textWrapping = 'NoWrap';\n                            break;\n                        case 'wrapwithoverflow':\n                            newLabel.style.textWrapping = 'WrapWithOverflow';\n                            break;\n                    }\n                }\n                if (label.textOverflow && label.overflowType) {\n                    newLabel.style.textOverflow = (label.overflowType.charAt(0).toUpperCase() +\n                        (label.overflowType).slice(1));\n                }\n                if (label.textAlign) {\n                    newLabel.style.textAlign = label.textAlign.charAt(0).toUpperCase() +\n                        label.textAlign.slice(1).toLowerCase();\n                }\n                if (label.textDecoration) {\n                    newLabel.style.textDecoration = label.textDecoration.charAt(0).toUpperCase() +\n                        label.textDecoration.slice(1).toLowerCase();\n                    if (newLabel.style.textDecoration === 'Linethrough') {\n                        newLabel.style.textDecoration = 'LineThrough';\n                    }\n                }\n                var appearance = this.setLabelAppearance(newLabel, label);\n                newLabel.style.fill = appearance.fill;\n                newLabel.style.opacity = appearance.opacity;\n                //  if (label.templateId)\n                //  newLabel.template = getTemplateContent(label.templateId);\n                newLabel.visibility = appearance.visibility;\n                if (label.width) {\n                    newLabel.width = label.width;\n                }\n                labelCollection.push(newLabel);\n            }\n        }\n        return labelCollection;\n    };\n    LabelProperties.prototype.setLabelAppearance = function (newLabel, label) {\n        var appearance = {};\n        if (label.fillColor) {\n            appearance.fill = label.fillColor === 'white' ? 'transparent' : label.fillColor;\n        }\n        if (label.opacity) {\n            appearance.opacity = label.opacity;\n        }\n        //  if (label.templateId)\n        //  newLabel.template = getTemplateContent(label.templateId);\n        if (label.visible) {\n            appearance.visibility = label.visible;\n        }\n        return appearance;\n    };\n    //(EJ2-272287) Provide support to convert the EJ1 diagram to EJ2 diagram\n    //Update the annotation constraints from EJ1 to EJ2\n    LabelProperties.prototype.setLabelConstraints = function (constraints) {\n        var annotationConstraints = _enum_enum__WEBPACK_IMPORTED_MODULE_0__.AnnotationConstraints.None;\n        if (constraints & _enum_enum__WEBPACK_IMPORTED_MODULE_0__.AnnotationConstraints.Select) {\n            annotationConstraints = annotationConstraints | _enum_enum__WEBPACK_IMPORTED_MODULE_0__.AnnotationConstraints.Select;\n        }\n        if (constraints & _enum_enum__WEBPACK_IMPORTED_MODULE_0__.AnnotationConstraints.Drag) {\n            annotationConstraints = annotationConstraints | _enum_enum__WEBPACK_IMPORTED_MODULE_0__.AnnotationConstraints.Drag;\n        }\n        if (constraints & _enum_enum__WEBPACK_IMPORTED_MODULE_0__.AnnotationConstraints.Resize) {\n            annotationConstraints = annotationConstraints | _enum_enum__WEBPACK_IMPORTED_MODULE_0__.AnnotationConstraints.Resize;\n        }\n        if (constraints & _enum_enum__WEBPACK_IMPORTED_MODULE_0__.AnnotationConstraints.Rotate) {\n            annotationConstraints = annotationConstraints | _enum_enum__WEBPACK_IMPORTED_MODULE_0__.AnnotationConstraints.Rotate;\n        }\n        return annotationConstraints;\n    };\n    /**\n     * Get module name.\n     * @returns {string} returns Module name\n     */\n    LabelProperties.prototype.getModuleName = function () {\n        /**\n         * Returns the module name\n         */\n        return 'LabelProperties';\n    };\n    return LabelProperties;\n}());\n\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-diagrams/src/diagram/load-utility/labelProperties.js?");

/***/ }),

/***/ "./node_modules/@syncfusion/ej2-diagrams/src/diagram/load-utility/portProperties.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-diagrams/src/diagram/load-utility/portProperties.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PortProperties: () => (/* binding */ PortProperties)\n/* harmony export */ });\n/* harmony import */ var _enum_enum__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../enum/enum */ \"./node_modules/@syncfusion/ej2-diagrams/src/diagram/enum/enum.js\");\n\nvar PortProperties = /** @class */ (function () {\n    function PortProperties(modelProperties) {\n        this.modelProperties = modelProperties;\n    }\n    //(EJ2-272287) Provide support to convert the EJ1 diagram to EJ2 diagram\n    //Convert and assign EJ1 to EJ2 port properties\n    PortProperties.prototype.setPortProperties = function (oldPorts) {\n        var portCollection = [];\n        if (oldPorts.length > 0) {\n            for (var i = 0; i < oldPorts.length; i++) {\n                var port = oldPorts[parseInt(i.toString(), 10)];\n                var newPort = {};\n                newPort.style = {};\n                newPort.id = port.name;\n                if (port.addInfo) {\n                    newPort.addInfo = port.addInfo;\n                }\n                newPort.height = port.size;\n                newPort.width = port.size;\n                if (port.horizontalAlignment) {\n                    newPort.horizontalAlignment = port.horizontalAlignment.charAt(0).toUpperCase() +\n                        port.horizontalAlignment.slice(1);\n                }\n                if (port.verticalAlignment) {\n                    newPort.verticalAlignment = port.verticalAlignment.charAt(0).toUpperCase() +\n                        port.verticalAlignment.slice(1);\n                }\n                // 925993: Unable to load an EJ1 diagram JSON into EJ2 Diagram because of port margin undefined.\n                if (port.margin) {\n                    // eslint-disable-next-line max-len\n                    newPort.margin = { left: port.margin.left, right: port.margin.right, top: port.margin.top, bottom: port.margin.bottom };\n                }\n                newPort.offset = { x: port.offset.x, y: port.offset.y };\n                newPort.style.strokeColor = port.borderColor;\n                newPort.style.strokeWidth = port.borderWidth;\n                newPort.style.fill = port.fillColor;\n                newPort.constraints = this.setPortConstraints(port.constraints);\n                if (port.pathData) {\n                    newPort.pathData = port.pathData;\n                }\n                if (port.shape === 'path') {\n                    newPort.shape = 'Custom';\n                }\n                else {\n                    // 930796: EJ1 Diagram Fails to Load in EJ2 Diagram Builder when port shape is undefined\n                    if (port.shape) {\n                        newPort.shape = port.shape.charAt(0).toUpperCase() + (port.shape).slice(1);\n                    }\n                    else {\n                        newPort.shape = 'Square';\n                    }\n                }\n                newPort.visibility = this.setPortVisibility(port.visibility);\n                portCollection.push(newPort);\n            }\n        }\n        return portCollection;\n    };\n    //(EJ2-272287) Provide support to convert the EJ1 diagram to EJ2 diagram\n    //Sets the port constraints from EJ1 to EJ2\n    PortProperties.prototype.setPortConstraints = function (constraints) {\n        var portConstraints = _enum_enum__WEBPACK_IMPORTED_MODULE_0__.PortConstraints.Default;\n        // if (constraints & PortConstraints.Drag) {\n        //     portConstraints = portConstraints | PortConstraints.Drag;\n        // }\n        if (constraints & _enum_enum__WEBPACK_IMPORTED_MODULE_0__.PortConstraints.Draw) {\n            portConstraints = portConstraints | _enum_enum__WEBPACK_IMPORTED_MODULE_0__.PortConstraints.Draw;\n        }\n        if (constraints & _enum_enum__WEBPACK_IMPORTED_MODULE_0__.PortConstraints.None) {\n            portConstraints = _enum_enum__WEBPACK_IMPORTED_MODULE_0__.PortConstraints.None;\n        }\n        return portConstraints;\n    };\n    //(EJ2-272287) Provide support to convert the EJ1 diagram to EJ2 diagram\n    //Sets the portVisibility from EJ1 to EJ2\n    PortProperties.prototype.setPortVisibility = function (visibility) {\n        var portVisibility;\n        if (visibility & _enum_enum__WEBPACK_IMPORTED_MODULE_0__.PortVisibility.Visible) {\n            portVisibility = portVisibility | _enum_enum__WEBPACK_IMPORTED_MODULE_0__.PortVisibility.Visible;\n        }\n        if (visibility & _enum_enum__WEBPACK_IMPORTED_MODULE_0__.PortVisibility.Hidden) {\n            portVisibility = portVisibility | _enum_enum__WEBPACK_IMPORTED_MODULE_0__.PortVisibility.Hidden;\n        }\n        if (visibility & _enum_enum__WEBPACK_IMPORTED_MODULE_0__.PortVisibility.Hover) {\n            portVisibility = portVisibility | _enum_enum__WEBPACK_IMPORTED_MODULE_0__.PortVisibility.Hover;\n        }\n        if (visibility & _enum_enum__WEBPACK_IMPORTED_MODULE_0__.PortVisibility.Connect) {\n            portVisibility = portVisibility | _enum_enum__WEBPACK_IMPORTED_MODULE_0__.PortVisibility.Connect;\n        }\n        return portVisibility;\n    };\n    /**\n     * Get module name.\n     * @returns {string} Returns the module name\n     */\n    PortProperties.prototype.getModuleName = function () {\n        /**\n         * Returns the module name\n         */\n        return 'PortProperties';\n    };\n    return PortProperties;\n}());\n\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-diagrams/src/diagram/load-utility/portProperties.js?");

/***/ })

}]);