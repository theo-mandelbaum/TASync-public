"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkej2_vue_samples"] = self["webpackChunkej2_vue_samples"] || []).push([["chunk-vendors-node_modules_syncfusion_ej2-documenteditor_src_document-editor_implementation_selectio-4088e8e6"],{

/***/ "./node_modules/@syncfusion/ej2-documenteditor/src/document-editor/implementation/selection/selection-format.js":
/*!**********************************************************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-documenteditor/src/document-editor/implementation/selection/selection-format.js ***!
  \**********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SelectionBorder: () => (/* binding */ SelectionBorder),\n/* harmony export */   SelectionBorders: () => (/* binding */ SelectionBorders),\n/* harmony export */   SelectionCellFormat: () => (/* binding */ SelectionCellFormat),\n/* harmony export */   SelectionCharacterFormat: () => (/* binding */ SelectionCharacterFormat),\n/* harmony export */   SelectionColumnFormat: () => (/* binding */ SelectionColumnFormat),\n/* harmony export */   SelectionHeaderFooter: () => (/* binding */ SelectionHeaderFooter),\n/* harmony export */   SelectionImageFormat: () => (/* binding */ SelectionImageFormat),\n/* harmony export */   SelectionParagraphFormat: () => (/* binding */ SelectionParagraphFormat),\n/* harmony export */   SelectionRowFormat: () => (/* binding */ SelectionRowFormat),\n/* harmony export */   SelectionSectionFormat: () => (/* binding */ SelectionSectionFormat),\n/* harmony export */   SelectionTableFormat: () => (/* binding */ SelectionTableFormat)\n/* harmony export */ });\n/* harmony import */ var _base_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../base/types */ \"./node_modules/@syncfusion/ej2-documenteditor/src/document-editor/base/types.js\");\n/* harmony import */ var _format_index__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../format/index */ \"./node_modules/@syncfusion/ej2-documenteditor/src/document-editor/implementation/format/index.js\");\n/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../index */ \"./node_modules/@syncfusion/ej2-documenteditor/src/document-editor/implementation/index.js\");\n/* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @syncfusion/ej2-base */ \"./node_modules/@syncfusion/ej2-base/index.js\");\n/* harmony import */ var _list_list__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../list/list */ \"./node_modules/@syncfusion/ej2-documenteditor/src/document-editor/implementation/list/list.js\");\n/* harmony import */ var _list_abstract_list__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../list/abstract-list */ \"./node_modules/@syncfusion/ej2-documenteditor/src/document-editor/implementation/list/abstract-list.js\");\n/* harmony import */ var _list_list_level__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../list/list-level */ \"./node_modules/@syncfusion/ej2-documenteditor/src/document-editor/implementation/list/list-level.js\");\n\n\n\n\n\n\n\n/* eslint-disable */\n/**\n * Selection character format implementation\n */\nvar SelectionCharacterFormat = /** @class */ (function () {\n    /**\n     * @param selection\n     * @private\n     */\n    function SelectionCharacterFormat(selection) {\n        this.boldIn = undefined;\n        this.italicIn = undefined;\n        this.underlineIn = undefined;\n        this.strikeThroughIn = undefined;\n        this.baselineAlignmentIn = undefined;\n        this.highlightColorIn = undefined;\n        this.fontSizeIn = 0;\n        this.scriptType = _base_types__WEBPACK_IMPORTED_MODULE_0__.FontScriptType.English;\n        this.fontColorIn = undefined;\n        this.allCapsIn = undefined;\n        /**\n         * @private\n         */\n        this.boldBidi = undefined;\n        /**\n         * @private\n         */\n        this.italicBidi = undefined;\n        /**\n         * @private\n         */\n        this.complexScript = undefined;\n        /**\n         * @private\n         */\n        this.fontSizeBidi = 0;\n        /**\n         * @private\n         */\n        this.bidi = undefined;\n        /**\n         * @private\n         */\n        this.bdo = undefined;\n        this.selection = selection;\n    }\n    Object.defineProperty(SelectionCharacterFormat.prototype, \"fontSize\", {\n        /**\n         * Gets the font size of selected contents.\n         *\n         * @aspType int\n         */\n        get: function () {\n            return this.fontSizeIn;\n        },\n        /**\n         * Sets the font size of selected contents.\n         *\n         * @aspType int\n         */\n        set: function (value) {\n            if (value === this.fontSizeIn) {\n                return;\n            }\n            this.fontSizeIn = value;\n            this.notifyPropertyChanged('fontSize');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionCharacterFormat.prototype, \"renderedFontFamily\", {\n        get: function () {\n            return this.renderedFontFamilyIn;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionCharacterFormat.prototype, \"fontFamily\", {\n        /**\n         * Gets or sets the font family of selected contents.\n         *\n         * @aspType string\n         */\n        get: function () {\n            return this.fontFamilyIn;\n        },\n        /**\n         * Sets the font family of selected contents.\n         *\n         * @aspType string\n         */\n        set: function (value) {\n            if (value === this.fontFamilyIn) {\n                return;\n            }\n            this.fontFamilyIn = this.renderedFontFamilyIn = value;\n            this.notifyPropertyChanged('fontFamily');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionCharacterFormat.prototype, \"fontColor\", {\n        /**\n         * Gets or sets the font color of selected contents.\n         *\n         * @aspType string\n         */\n        get: function () {\n            return this.fontColorIn;\n        },\n        /**\n         * Sets the font color of selected contents.\n         *\n         * @aspType string\n         */\n        set: function (value) {\n            if (value === this.fontColorIn) {\n                return;\n            }\n            this.fontColorIn = value;\n            this.notifyPropertyChanged('fontColor');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionCharacterFormat.prototype, \"bold\", {\n        /**\n         * Gets or sets the bold formatting of selected contents.\n         *\n         * @aspType bool\n         */\n        get: function () {\n            return this.boldIn;\n        },\n        /**\n         * Sets the bold formatting of selected contents.\n         *\n         * @aspType bool\n         */\n        set: function (value) {\n            if (value === this.boldIn) {\n                return;\n            }\n            this.boldIn = value;\n            this.notifyPropertyChanged('bold');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionCharacterFormat.prototype, \"italic\", {\n        /**\n         * Gets or sets the italic formatting of selected contents.\n         *\n         * @aspType bool\n         */\n        get: function () {\n            return this.italicIn;\n        },\n        /**\n         * Sets the italic formatting of selected contents.\n         *\n         * @aspType bool\n         */\n        set: function (value) {\n            if (value === this.italic) {\n                return;\n            }\n            this.italicIn = value;\n            this.notifyPropertyChanged('italic');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionCharacterFormat.prototype, \"strikethrough\", {\n        /**\n         * Gets or sets the strikethrough property of selected contents.\n         */\n        get: function () {\n            return this.strikeThroughIn;\n        },\n        /**\n         * Sets the strikethrough property of selected contents.\n         */\n        set: function (value) {\n            if (value === this.strikeThroughIn) {\n                return;\n            }\n            this.strikeThroughIn = value;\n            this.notifyPropertyChanged('strikethrough');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionCharacterFormat.prototype, \"baselineAlignment\", {\n        /**\n         * Gets or sets the baseline alignment property of selected contents.\n         */\n        get: function () {\n            return this.baselineAlignmentIn;\n        },\n        /**\n         * Sets the baseline alignment property of selected contents.\n         */\n        set: function (value) {\n            if (value === this.baselineAlignmentIn) {\n                return;\n            }\n            this.baselineAlignmentIn = value;\n            this.notifyPropertyChanged('baselineAlignment');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionCharacterFormat.prototype, \"underline\", {\n        /**\n         * Gets or sets the underline style of selected contents.\n         */\n        get: function () {\n            return this.underlineIn;\n        },\n        /**\n         * Sets the underline style of selected contents.\n         */\n        set: function (value) {\n            if (value === this.underlineIn) {\n                return;\n            }\n            this.underlineIn = value;\n            this.notifyPropertyChanged('underline');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionCharacterFormat.prototype, \"highlightColor\", {\n        /**\n         * Gets or sets the highlight color of selected contents.\n         */\n        get: function () {\n            return this.highlightColorIn;\n        },\n        /**\n         * Sets the highlight color of selected contents.\n         */\n        set: function (value) {\n            if (value === this.highlightColorIn && value !== \"NoColor\") {\n                return;\n            }\n            this.highlightColorIn = value;\n            this.notifyPropertyChanged('highlightColor');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionCharacterFormat.prototype, \"allCaps\", {\n        /**\n         * Gets or sets the allCaps formatting of selected contents.\n         *\n         * @aspType bool\n         */\n        get: function () {\n            return this.allCapsIn;\n        },\n        /**\n         * Sets the allCaps formatting of selected contents.\n         *\n         * @aspType bool\n         */\n        set: function (value) {\n            if (value === this.allCapsIn) {\n                return;\n            }\n            this.allCapsIn = value;\n            this.notifyPropertyChanged('allCaps');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    SelectionCharacterFormat.prototype.getPropertyValue = function (property) {\n        switch (property) {\n            case 'bold':\n                return this.bold;\n            case 'italic':\n                return this.italic;\n            case 'fontSize':\n                if (this.fontSize >= 1) {\n                    return this.fontSize;\n                }\n                return undefined;\n            case 'fontFamily':\n                return this.fontFamily;\n            case 'strikethrough':\n                return this.strikethrough;\n            case 'baselineAlignment':\n                return this.baselineAlignment;\n            case 'highlightColor':\n                return this.highlightColor;\n            case 'underline':\n                return this.underline;\n            case 'fontColor':\n                return this.fontColor;\n            case 'allCaps':\n                return this.allCaps;\n            default:\n                return undefined;\n        }\n    };\n    /**\n     * Notifies whenever property gets changed.\n     *\n     * @param {string} propertyName\n     */\n    SelectionCharacterFormat.prototype.notifyPropertyChanged = function (propertyName) {\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(this.selection) && (this.selection.isCleared || (this.selection.owner.isReadOnlyMode && !this.selection.isInlineFormFillMode()) ||\n            !this.selection.owner.isDocumentLoaded || this.selection.owner.isPastingContent) && !this.selection.isRetrieveFormatting) {\n            return;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(this.selection) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(this.selection.start) && !this.selection.isRetrieveFormatting) {\n            var propertyValue = this.getPropertyValue(propertyName);\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(propertyValue)) {\n                this.selection.owner.editorModule.onApplyCharacterFormat(propertyName, propertyValue);\n            }\n        }\n    };\n    /**\n     * Copies the source format.\n     *\n     * @param {WCharacterFormat} format\n     * @returns {void}\n     * @private\n     */\n    SelectionCharacterFormat.prototype.copyFormat = function (format, renderFontFamily) {\n        this.styleName = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(format.baseCharStyle) ? format.baseCharStyle.name : 'Default Paragraph Font';\n        this.fontSize = format.fontSize;\n        this.fontFamily = format.fontFamily;\n        this.renderedFontFamilyIn = renderFontFamily;\n        this.bold = format.bold;\n        this.italic = format.italic;\n        this.baselineAlignment = format.baselineAlignment;\n        this.underline = format.underline;\n        this.fontColor = format.fontColor;\n        this.highlightColor = format.highlightColor;\n        this.strikethrough = format.strikethrough;\n        this.bidi = format.bidi;\n        this.bdo = format.bdo;\n        this.boldBidi = format.boldBidi;\n        this.italicBidi = format.italicBidi;\n        this.fontFamilyBidi = format.fontFamilyBidi;\n        this.fontSizeBidi = format.fontSizeBidi;\n        this.allCaps = format.allCaps;\n        this.complexScript = format.complexScript;\n    };\n    /**\n     * Combines the format.\n     *\n     * @param {WCharacterFormat} format\n     * @private\n     */\n    SelectionCharacterFormat.prototype.combineFormat = function (format, renderFontFamily) {\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(this.bold) && this.bold !== format.bold) {\n            this.bold = undefined;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(this.italic) && this.italic !== format.italic) {\n            this.italic = undefined;\n        }\n        if (this.fontSize !== 0 && this.fontSize !== format.fontSize) {\n            this.fontSize = 0;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(this.renderedFontFamily) && this.renderedFontFamily !== renderFontFamily) {\n            this.renderedFontFamilyIn = undefined;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(this.fontFamily) && this.fontFamily !== format.fontFamily) {\n            this.fontFamily = undefined;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(this.highlightColor) && this.highlightColor !== format.highlightColor) {\n            this.highlightColor = undefined;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(this.baselineAlignment) && this.baselineAlignment !== format.baselineAlignment) {\n            this.baselineAlignment = undefined;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(this.fontColor) && (this.fontColor !== format.fontColor)) {\n            this.fontColor = undefined;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(this.underline) && this.underline !== format.underline) {\n            this.underline = undefined;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(this.strikethrough) && this.strikethrough !== format.strikethrough) {\n            this.strikethrough = undefined;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(this.boldBidi) && this.boldBidi !== format.boldBidi) {\n            this.boldBidi = undefined;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(this.italicBidi) && this.italicBidi !== format.italicBidi) {\n            this.italicBidi = undefined;\n        }\n        if (this.fontSizeBidi !== 0 && this.fontSizeBidi !== format.fontSizeBidi) {\n            this.fontSizeBidi = 0;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(this.fontFamilyBidi) && this.fontFamilyBidi !== format.fontFamilyBidi) {\n            this.fontFamilyBidi = undefined;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(this.bidi) && this.bidi !== format.bidi) {\n            this.bidi = undefined;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(this.bdo) && this.bdo !== format.bdo) {\n            this.bdo = undefined;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(this.allCaps) && this.allCaps !== format.allCaps) {\n            this.allCaps = undefined;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(this.complexScript) && this.complexScript !== format.complexScript) {\n            this.complexScript = undefined;\n        }\n    };\n    /**\n     * @private\n     */\n    SelectionCharacterFormat.prototype.canRetrieveNextCharacterFormat = function () {\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(this.bold) && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(this.italic) && this.fontSize === 0 && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(this.fontFamily) && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(this.highlightColor)\n            && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(this.baselineAlignment) && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(this.fontColor) && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(this.underline) && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(this.strikethrough) && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(this.boldBidi)\n            && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(this.italicBidi) && this.fontSizeBidi === 0 && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(this.fontFamilyBidi) && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(this.bdo) && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(this.allCaps)) {\n            return false;\n        }\n        return true;\n    };\n    /**\n     * Clones the format.\n     *\n     * @param {SelectionCharacterFormat} selectionCharacterFormat\n     * @returns {void}\n     * @private\n     */\n    SelectionCharacterFormat.prototype.cloneFormat = function (selectionCharacterFormat) {\n        this.bold = selectionCharacterFormat.bold;\n        this.italic = selectionCharacterFormat.italic;\n        this.underline = selectionCharacterFormat.underline;\n        this.strikethrough = selectionCharacterFormat.strikethrough;\n        this.baselineAlignment = selectionCharacterFormat.baselineAlignment;\n        this.highlightColor = selectionCharacterFormat.highlightColor;\n        this.fontSize = selectionCharacterFormat.fontSize;\n        this.fontFamily = selectionCharacterFormat.fontFamily;\n        this.fontColor = selectionCharacterFormat.fontColor;\n        this.styleName = selectionCharacterFormat.styleName;\n        this.bidi = selectionCharacterFormat.bidi;\n        this.bdo = selectionCharacterFormat.bdo;\n        this.boldBidi = selectionCharacterFormat.boldBidi;\n        this.italicBidi = selectionCharacterFormat.italicBidi;\n        this.fontSizeBidi = selectionCharacterFormat.fontSizeBidi;\n        this.fontFamilyBidi = selectionCharacterFormat.fontFamilyBidi;\n        this.allCaps = selectionCharacterFormat.allCaps;\n        this.complexScript = selectionCharacterFormat.complexScript;\n    };\n    /**\n     * Checks whether current format is equal to the source format or not.\n     *\n     * @param {SelectionCharacterFormat} format\n     * @returns boolean\n     * @private\n     */\n    SelectionCharacterFormat.prototype.isEqualFormat = function (format) {\n        return (this.fontSize === format.fontSize\n            && this.strikethrough === format.strikethrough\n            && this.bold === format.bold\n            && this.fontFamily === format.fontFamily\n            && this.underline === format.underline\n            && this.highlightColor === format.highlightColor\n            && this.italic === format.italic\n            && this.baselineAlignment === format.baselineAlignment\n            && this.fontColor === format.fontColor\n            && this.allCaps === format.allCaps);\n    };\n    /**\n     * Clears the format.\n     *\n     * @returns {void}\n     * @private\n     */\n    SelectionCharacterFormat.prototype.clearFormat = function () {\n        this.fontSizeIn = 0;\n        this.boldIn = undefined;\n        this.italicIn = undefined;\n        this.fontFamilyIn = undefined;\n        this.fontColorIn = undefined;\n        this.underlineIn = undefined;\n        this.strikeThroughIn = undefined;\n        this.highlightColorIn = undefined;\n        this.baselineAlignmentIn = undefined;\n        this.styleName = undefined;\n        this.bidi = undefined;\n        this.bdo = undefined;\n        this.boldBidi = undefined;\n        this.italicBidi = undefined;\n        this.fontFamilyBidi = undefined;\n        this.fontSizeBidi = undefined;\n        this.allCapsIn = undefined;\n        this.complexScript = undefined;\n    };\n    /**\n     * Destroys the maintained resources.\n     *\n     * @returns {void}\n     * @private\n     */\n    SelectionCharacterFormat.prototype.destroy = function () {\n        this.fontSizeIn = undefined;\n        this.boldIn = undefined;\n        this.italicIn = undefined;\n        this.fontFamilyIn = undefined;\n        this.fontColorIn = undefined;\n        this.underlineIn = undefined;\n        this.strikeThroughIn = undefined;\n        this.baselineAlignmentIn = undefined;\n        this.highlightColorIn = undefined;\n        this.selection = undefined;\n        this.styleName = undefined;\n        this.bidi = undefined;\n        this.bdo = undefined;\n        this.boldBidi = undefined;\n        this.italicBidi = undefined;\n        this.fontFamilyBidi = undefined;\n        this.fontSizeBidi = undefined;\n        this.allCapsIn = undefined;\n        this.complexScript = undefined;\n    };\n    return SelectionCharacterFormat;\n}());\n\n/**\n * Selection Border implementation\n */\nvar SelectionBorder = /** @class */ (function () {\n    /**\n     * @param SelectionBorders\n     * @private\n     */\n    function SelectionBorder(selection, borderType, node) {\n        this.colorIn = undefined;\n        this.lineStyleIn = undefined;\n        this.lineWidthIn = undefined;\n        this.shadowIn = undefined;\n        this.spaceIn = undefined;\n        this.borderType = borderType;\n        this.ownerBase = node;\n        this.selection = selection;\n    }\n    Object.defineProperty(SelectionBorder.prototype, \"color\", {\n        /**\n         * Gets or sets the color for selected paragraph borders.\n         *\n         * @default undefined\n         * @aspType string\n         */\n        get: function () {\n            return this.colorIn;\n        },\n        /**\n         * Sets the color for selected paragraph borders.\n         *\n         * @default undefined\n         * @aspType string\n         */\n        set: function (value) {\n            if (value === this.colorIn) {\n                return;\n            }\n            this.colorIn = value;\n            this.notifyPropertyChanged(\"color\");\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionBorder.prototype, \"lineStyle\", {\n        /**\n         * Gets or sets the lineStyle for selected paragraph borders.\n         *\n         * @default undefined\n         * @aspType LineStyle\n         */\n        get: function () {\n            return this.lineStyleIn;\n        },\n        /**\n         * Sets the lineStyle for selected paragraph borders.\n         *\n         * @default undefined\n         * @aspType LineStyle\n         */\n        set: function (value) {\n            if (value === this.lineStyleIn) {\n                return;\n            }\n            this.lineStyleIn = value;\n            this.notifyPropertyChanged(\"lineStyle\");\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionBorder.prototype, \"lineWidth\", {\n        /**\n         * Gets or sets the lineWidth for selected paragraph borders.\n         *\n         * @default undefined\n         * @aspType number\n         */\n        get: function () {\n            return this.lineWidthIn;\n        },\n        /**\n         * Sets the lineWidth for selected paragraphs borders.\n         *\n         * @default undefined\n         * @aspType number\n         */\n        set: function (value) {\n            if (value === this.lineWidthIn) {\n                return;\n            }\n            this.lineWidthIn = value;\n            this.notifyPropertyChanged(\"lineWidth\");\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionBorder.prototype, \"shadow\", {\n        /**\n         * Gets or sets the shadow for selected paragraph borders.\n         *\n         * @default undefined\n         * @aspType boolean\n         */\n        get: function () {\n            return this.shadowIn;\n        },\n        /**\n         * Sets the shadow for selected paragraphs borders.\n         *\n         * @default undefined\n         * @aspType boolean\n         */\n        set: function (value) {\n            if (value === this.shadowIn) {\n                return;\n            }\n            this.shadowIn = value;\n            this.notifyPropertyChanged(\"shadow\");\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionBorder.prototype, \"space\", {\n        /**\n         * Gets or sets the space for selected paragraphs borders.\n         *\n         * @default undefined\n         * @aspType number\n         */\n        get: function () {\n            return this.spaceIn;\n        },\n        /**\n         * Sets the space for selected paragraphs borders.\n         *\n         * @default undefined\n         * @aspType number\n         */\n        set: function (value) {\n            if (value === this.spaceIn) {\n                return;\n            }\n            this.spaceIn = value;\n            this.notifyPropertyChanged('space');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     *Copies the format.\n     *\n     * @param {WBorder} border\n     * @returns {void}\n     * @private\n     */\n    SelectionBorder.prototype.copyFormat = function (border) {\n        this.color = border.color;\n        this.lineStyle = border.lineStyle;\n        this.lineWidth = border.lineWidth;\n        this.shadow = border.shadow;\n        this.space = border.space;\n    };\n    /**\n     * Combines the format.\n     *\n     * @param {WBorder} border\n     * @returns {void}\n     * @private\n     */\n    SelectionBorder.prototype.combineFormat = function (border) {\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(this.color) && this.color !== border.color) {\n            this.color = undefined;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(this.lineStyle) && this.lineStyle !== border.lineStyle) {\n            this.lineStyle = undefined;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(this.lineWidth) && this.lineWidth !== border.lineWidth) {\n            this.lineWidth = undefined;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(this.shadow) && this.shadow !== border.shadow) {\n            this.shadow = undefined;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(this.space) && this.space !== border.space) {\n            this.space = undefined;\n        }\n    };\n    SelectionBorder.prototype.getPropertyValue = function (property) {\n        switch (property) {\n            case 'color':\n                return this.color;\n            case 'lineStyle':\n                return this.lineStyle;\n            case 'lineWidth':\n                return this.lineWidth;\n            case 'space':\n                return this.space;\n            case 'shadow':\n                return this.shadow;\n        }\n        return undefined;\n    };\n    /**\n     * Notifies whenever the property gets changed.\n     * @param {string} propertyName\n     * @returns {void}\n     */\n    SelectionBorder.prototype.notifyPropertyChanged = function (propertyName) {\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(this.selection) &&\n            ((this.selection.owner.isReadOnlyMode && !this.selection.isInlineFormFillMode()) || !this.selection.owner.isDocumentLoaded)\n            && !this.selection.isRetrieveFormatting) {\n            return;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(this.selection) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(this.selection.start) && !this.selection.isRetrieveFormatting) {\n            var editor = this.selection.owner.editorModule;\n            var propertyValue = this.getPropertyValue(propertyName);\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(propertyValue)) {\n                editor.applyParagraphBorders(propertyName, this.borderType, propertyValue);\n            }\n        }\n    };\n    /**\n     * Destroys the managed resources.\n     *\n     * @returns {void}\n     * @private\n     */\n    SelectionBorder.prototype.destroy = function () {\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(this.colorIn)) {\n            this.colorIn = undefined;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(this.lineStyleIn)) {\n            this.lineStyleIn = undefined;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(this.lineWidthIn)) {\n            this.lineWidthIn = undefined;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(this.spaceIn)) {\n            this.spaceIn = undefined;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(this.shadowIn)) {\n            this.shadowIn = undefined;\n        }\n    };\n    return SelectionBorder;\n}());\n\n/**\n * Selection Borders implementation\n */\nvar SelectionBorders = /** @class */ (function () {\n    /**\n     * @param Object\n     * @private\n     */\n    function SelectionBorders(selection, node) {\n        this.ownerBase = undefined;\n        this.ownerBase = node;\n        this.selection = selection;\n        this.topIn = new SelectionBorder(this.selection, 'topBorder', this);\n        this.bottomIn = new SelectionBorder(this.selection, 'bottomBorder', this);\n        this.rightIn = new SelectionBorder(this.selection, 'rightBorder', this);\n        this.leftIn = new SelectionBorder(this.selection, 'leftBorder', this);\n        this.horizontalIn = new SelectionBorder(this.selection, 'horizontalBorder', this);\n        this.verticalIn = new SelectionBorder(this.selection, 'verticalBorder', this);\n    }\n    Object.defineProperty(SelectionBorders.prototype, \"top\", {\n        /**\n         * Gets the top Border for selected paragraphs.\n         *\n         * @default undefined\n         * @aspType SelectionBorder\n         */\n        get: function () {\n            return this.topIn;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionBorders.prototype, \"bottom\", {\n        /**\n         * Gets the bottom Border for selected paragraphs.\n         *\n         * @default undefined\n         * @aspType SelectionBorder\n         */\n        get: function () {\n            return this.bottomIn;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionBorders.prototype, \"left\", {\n        /**\n         * Gets the left Border for selected paragraphs.\n         *\n         * @default undefined\n         * @aspType SelectionBorder\n         */\n        get: function () {\n            return this.leftIn;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionBorders.prototype, \"right\", {\n        /**\n         * Gets the right Border for selected paragraphs.\n         *\n         * @default undefined\n         * @aspType SelectionBorder\n         */\n        get: function () {\n            return this.rightIn;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionBorders.prototype, \"horizontal\", {\n        /**\n         * Gets the horizontal Border for selected paragraphs.\n         *\n         * @default undefined\n         * @aspType SelectionBorder\n         */\n        get: function () {\n            return this.horizontalIn;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionBorders.prototype, \"vertical\", {\n        /**\n         * Gets the vertical Border for selected paragraphs.\n         *\n         * @default undefined\n         * @aspType SelectionBorder\n         */\n        get: function () {\n            return this.verticalIn;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Copies the format.\n     *\n     * @param {WBorders} borders\n     * @returns {void}\n     * @private\n     */\n    SelectionBorders.prototype.copyFormat = function (borders) {\n        this.top.copyFormat(borders.top);\n        this.bottom.copyFormat(borders.bottom);\n        this.left.copyFormat(borders.left);\n        this.right.copyFormat(borders.right);\n        this.horizontal.copyFormat(borders.horizontal);\n        this.vertical.copyFormat(borders.vertical);\n    };\n    /**\n     * Combines the format.\n     *\n     * @param {WBorders} borders\n     * @private\n     */\n    SelectionBorders.prototype.combineFormat = function (borders) {\n        this.top.combineFormat(borders.top);\n        this.bottom.combineFormat(borders.bottom);\n        this.left.combineFormat(borders.left);\n        this.right.combineFormat(borders.right);\n        this.vertical.combineFormat(borders.vertical);\n        this.horizontal.combineFormat(borders.horizontal);\n    };\n    /**\n     * Destroys the managed resources.\n     *\n     * @returns {void}\n     * @private\n     */\n    SelectionBorders.prototype.destroy = function () {\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(this.topIn)) {\n            this.topIn.destroy();\n            this.topIn = undefined;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(this.topIn)) {\n            this.bottomIn.destroy();\n            this.bottomIn = undefined;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(this.leftIn)) {\n            this.leftIn.destroy();\n            this.leftIn = undefined;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(this.rightIn)) {\n            this.rightIn.destroy();\n            this.rightIn = undefined;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(this.horizontalIn)) {\n            this.horizontalIn.destroy();\n            this.horizontalIn = undefined;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(this.verticalIn)) {\n            this.verticalIn.destroy();\n            this.verticalIn = undefined;\n        }\n    };\n    return SelectionBorders;\n}());\n\n/**\n * Selection paragraph format implementation\n */\nvar SelectionParagraphFormat = /** @class */ (function () {\n    /**\n     * @param selection\n     * @param documentHelper\n     * @private\n     */\n    function SelectionParagraphFormat(selection, documentHelper) {\n        // Declaring the character format properties.\n        this.leftIndentIn = 0;\n        this.rightIndentIn = 0;\n        this.beforeSpacingIn = 0;\n        this.afterSpacingIn = 0;\n        this.spaceAfterAutoIn = undefined;\n        this.spaceBeforeAutoIn = undefined;\n        this.textAlignmentIn = undefined;\n        this.outlineLevelIn = undefined;\n        this.firstLineIndentIn = 0;\n        this.lineSpacingIn = 1;\n        this.lineSpacingTypeIn = undefined;\n        this.bidiIn = undefined;\n        this.keepWithNextIn = undefined;\n        this.keepLinesTogetherIn = undefined;\n        this.widowControlIn = undefined;\n        this.contextualSpacingIn = undefined;\n        this.listLevelNumberIn = -1;\n        this.selection = selection;\n        this.documentHelper = documentHelper;\n        this.bordersIn = new SelectionBorders(this.selection, this);\n    }\n    Object.defineProperty(SelectionParagraphFormat.prototype, \"borders\", {\n        /**\n         * Gets the borders for selected paragraphs.\n         *\n         * @default undefined\n         * @aspType SelectionBorders\n         */\n        get: function () {\n            return this.bordersIn;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionParagraphFormat.prototype, \"leftIndent\", {\n        /**\n         * Gets or Sets the left indent for selected paragraphs.\n         *\n         * @default undefined\n         * @aspType int\n         */\n        get: function () {\n            return this.leftIndentIn;\n        },\n        /**\n         * Sets the left indent for selected paragraphs.\n         *\n         * @default undefined\n         * @aspType int\n         */\n        set: function (value) {\n            if (value === this.leftIndentIn) {\n                return;\n            }\n            this.leftIndentIn = value;\n            this.notifyPropertyChanged('leftIndent');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionParagraphFormat.prototype, \"rightIndent\", {\n        /**\n         * Gets or Sets the right indent for selected paragraphs.\n         *\n         * @default undefined\n         * @aspType int\n         */\n        get: function () {\n            return this.rightIndentIn;\n        },\n        /**\n         * Sets the right indent for selected paragraphs.\n         *\n         * @default undefined\n         * @aspType int\n         */\n        set: function (value) {\n            if (value === this.rightIndentIn) {\n                return;\n            }\n            this.rightIndentIn = value;\n            this.notifyPropertyChanged('rightIndent');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionParagraphFormat.prototype, \"firstLineIndent\", {\n        /**\n         * Gets or Sets the first line indent for selected paragraphs.\n         *\n         * @default undefined\n         * @aspType int\n         */\n        get: function () {\n            return this.firstLineIndentIn;\n        },\n        /**\n         * Sets the first line indent for selected paragraphs.\n         *\n         * @default undefined\n         * @aspType int\n         */\n        set: function (value) {\n            if (value === this.firstLineIndentIn) {\n                return;\n            }\n            this.firstLineIndentIn = value;\n            this.notifyPropertyChanged('firstLineIndent');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionParagraphFormat.prototype, \"textAlignment\", {\n        /**\n         * Gets or Sets the text alignment for selected paragraphs.\n         *\n         * @default undefined\n         */\n        get: function () {\n            return this.textAlignmentIn;\n        },\n        /**\n         * Sets the text alignment for selected paragraphs.\n         *\n         * @default undefined\n         */\n        set: function (value) {\n            if (value === this.textAlignmentIn) {\n                return;\n            }\n            this.textAlignmentIn = value;\n            this.notifyPropertyChanged('textAlignment');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionParagraphFormat.prototype, \"outlineLevel\", {\n        /**\n         * Gets or Sets the outline level for selected paragraphs.\n         *\n         * @default undefined\n         */\n        get: function () {\n            return this.outlineLevelIn;\n        },\n        /**\n         * Sets the outline level for selected paragraphs.\n         *\n         * @default undefined\n         */\n        set: function (value) {\n            if (value === this.outlineLevelIn) {\n                return;\n            }\n            this.outlineLevelIn = value;\n            this.notifyPropertyChanged('outlineLevel');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionParagraphFormat.prototype, \"afterSpacing\", {\n        /**\n         * Sets the after spacing for selected paragraphs.\n         *\n         * @default undefined\n         * @aspType int\n         */\n        get: function () {\n            return this.afterSpacingIn;\n        },\n        /**\n         * Gets or Sets the after spacing for selected paragraphs.\n         *\n         * @default undefined\n         * @aspType int\n         */\n        set: function (value) {\n            if (value === this.afterSpacingIn) {\n                return;\n            }\n            this.afterSpacingIn = value;\n            this.notifyPropertyChanged('afterSpacing');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionParagraphFormat.prototype, \"beforeSpacing\", {\n        /**\n         * Gets or Sets the before spacing for selected paragraphs.\n         *\n         * @default undefined\n         * @aspType int\n         */\n        get: function () {\n            return this.beforeSpacingIn;\n        },\n        /**\n         * Sets the before spacing for selected paragraphs.\n         *\n         * @default undefined\n         * @aspType int\n         */\n        set: function (value) {\n            if (value === this.beforeSpacingIn) {\n                return;\n            }\n            this.beforeSpacingIn = value;\n            this.notifyPropertyChanged('beforeSpacing');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionParagraphFormat.prototype, \"spaceAfterAuto\", {\n        /**\n         * Gets or Sets the space after auto for selected paragraphs.\n         *\n         * @default false\n         * @aspType bool\n         */\n        get: function () {\n            return this.spaceAfterAutoIn;\n        },\n        /**\n         *  Sets the space after auto for selected paragraphs.\n         *\n         * @aspType bool\n         * @blazorType bool\n         */\n        set: function (value) {\n            if (value === this.spaceAfterAutoIn) {\n                return;\n            }\n            this.spaceAfterAutoIn = value;\n            this.notifyPropertyChanged('spaceAfterAuto');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionParagraphFormat.prototype, \"spaceBeforeAuto\", {\n        /**\n         * Gets or Sets the space before auto for selected paragraphs.\n         *\n         * @default false\n         * @aspType bool\n         */\n        get: function () {\n            return this.spaceBeforeAutoIn;\n        },\n        /**\n         *  Sets the space before auto for selected paragraphs.\n         *\n         * @aspType bool\n         * @blazorType bool\n         */\n        set: function (value) {\n            if (value === this.spaceBeforeAutoIn) {\n                return;\n            }\n            this.spaceBeforeAutoIn = value;\n            this.notifyPropertyChanged('spaceBeforeAuto');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionParagraphFormat.prototype, \"lineSpacing\", {\n        /**\n         * Gets or Sets the line spacing for selected paragraphs.\n         *\n         * @default undefined\n         * @aspType int\n         */\n        get: function () {\n            return this.lineSpacingIn;\n        },\n        /**\n         * Sets the line spacing for selected paragraphs.\n         *\n         * @default undefined\n         * @aspType int\n         */\n        set: function (value) {\n            if (value === this.lineSpacingIn) {\n                return;\n            }\n            this.lineSpacingIn = value;\n            this.notifyPropertyChanged('lineSpacing');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionParagraphFormat.prototype, \"lineSpacingType\", {\n        /**\n         * Gets or Sets the line spacing type for selected paragraphs.\n         *\n         * @default undefined\n         */\n        get: function () {\n            return this.lineSpacingTypeIn;\n        },\n        /**\n         * Gets or Sets the line spacing type for selected paragraphs.\n         *\n         * @default undefined\n         */\n        set: function (value) {\n            if (value === this.lineSpacingTypeIn) {\n                return;\n            }\n            this.lineSpacingTypeIn = value;\n            this.notifyPropertyChanged('lineSpacingType');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionParagraphFormat.prototype, \"listLevelNumber\", {\n        /**\n         * Sets the list level number for selected paragraphs.\n         *\n         * @default undefined\n         * @aspType int\n         */\n        get: function () {\n            return this.listLevelNumberIn;\n        },\n        /**\n         * Gets or Sets the list level number for selected paragraphs.\n         *\n         * @default undefined\n         * @aspType int\n         */\n        set: function (value) {\n            if (value === this.listLevelNumberIn) {\n                return;\n            }\n            this.listLevelNumberIn = value;\n            this.notifyPropertyChanged('listLevelNumber');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionParagraphFormat.prototype, \"bidi\", {\n        /**\n         * Gets or Sets the bidirectional property for selected paragraphs\n         *\n         * @aspType bool\n         */\n        get: function () {\n            return this.bidiIn;\n        },\n        /**\n         * Sets the bidirectional property for selected paragraphs\n         *\n         * @aspType bool\n         */\n        set: function (value) {\n            this.bidiIn = value;\n            this.notifyPropertyChanged('bidi');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionParagraphFormat.prototype, \"keepWithNext\", {\n        /**\n         * Gets or sets a value indicating whether the specified paragraph remains on the same page as the paragraph that follows it while paginating the document.\n         *\n         * @default false\n         * @aspType bool\n         * @returns {boolean} - `true` if the specified paragraph remains on the same page as the paragraph that follows it; otherwise, `false`.\n         */\n        get: function () {\n            return this.keepWithNextIn;\n        },\n        /**\n         * Sets a value indicating whether the specified paragraph remains on the same page as the paragraph that follows it while paginating the document.\n         *\n         * @aspType bool\n         * @blazorType bool\n         */\n        set: function (value) {\n            this.keepWithNextIn = value;\n            this.notifyPropertyChanged('keepWithNext');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionParagraphFormat.prototype, \"keepLinesTogether\", {\n        /**\n         * Gets or sets a value indicating whether all lines in the specified paragraphs remain on the same page while paginating the document.\n         *\n         * @default false\n         * @aspType bool\n         * @returns {boolean} - `true` if all lines in the specified paragraphs remain on the same page; otherwise, `false`.\n         */\n        get: function () {\n            return this.keepLinesTogetherIn;\n        },\n        /**\n         * Sets a value indicating whether all lines in the specified paragraphs remain on the same page while paginating the document.\n         *\n         * @aspType bool\n         * @blazorType bool\n         */\n        set: function (value) {\n            this.keepLinesTogetherIn = value;\n            this.notifyPropertyChanged('keepLinesTogether');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionParagraphFormat.prototype, \"widowControl\", {\n        /**\n         * Gets or sets a value indicating whether the first and last lines of the paragraph are to remain on the same page as the rest of the paragraph when paginating the document.\n         *\n         * @default true\n         * @aspType bool\n         * @returns {boolean} - `true` if the first and last lines of the paragraph are to remain on the same page; otherwise, `false`.\n         */\n        get: function () {\n            return this.widowControlIn;\n        },\n        /**\n         * Sets a value indicating whether the first and last lines of the paragraph are to remain on the same page as the rest of the paragraph when paginating the document.\n         *\n         * @default true\n         * @aspType bool\n         */\n        set: function (value) {\n            this.widowControlIn = value;\n            this.notifyPropertyChanged('widowControl');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionParagraphFormat.prototype, \"contextualSpacing\", {\n        /**\n         * Gets or sets a value indicating whether to add space between the paragraphs of same style.\n         *\n         * @aspType bool\n         */\n        get: function () {\n            return this.contextualSpacingIn;\n        },\n        /**\n         * Sets a value indicating whether to add space between the paragraphs of same style.\n         *\n         * @aspType bool\n         */\n        set: function (value) {\n            this.contextualSpacingIn = value;\n            this.notifyPropertyChanged('contextualSpacing');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    SelectionParagraphFormat.prototype.validateLineSpacing = function () {\n        if (this.lineSpacingType !== 'Multiple' && this.lineSpacingIn < 12) {\n            return true;\n        }\n        return false;\n    };\n    Object.defineProperty(SelectionParagraphFormat.prototype, \"listText\", {\n        /**\n         * Gets the list text for selected paragraphs.\n         *\n         * @aspType string\n         */\n        get: function () {\n            var listFormat = undefined;\n            var list = this.documentHelper.getListById(this.listId);\n            if (list instanceof _list_list__WEBPACK_IMPORTED_MODULE_4__.WList && this.listLevelNumberIn > -1 && this.listLevelNumberIn < 9) {\n                var listLevel = list.getListLevel(this.listLevelNumber);\n                if (listLevel instanceof _list_list_level__WEBPACK_IMPORTED_MODULE_6__.WListLevel) {\n                    if (listLevel.listLevelPattern === 'Bullet') {\n                        listFormat = listLevel.numberFormat;\n                    }\n                    else {\n                        listFormat = listLevel.numberFormat;\n                        for (var i = 0; i < 9; i++) {\n                            var levelPattern = '%' + (i + 1);\n                            if (listFormat.indexOf(levelPattern) > -1) {\n                                var level = i === this.listLevelNumberIn ? listLevel : list.getListLevel(i);\n                                var listTextElement = this.selection.getListTextElementBox(this.selection.start.paragraph);\n                                var listText = listTextElement ? listTextElement.text : '';\n                                listFormat = listText;\n                            }\n                        }\n                    }\n                }\n            }\n            return listFormat;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    SelectionParagraphFormat.prototype.getPropertyValue = function (property) {\n        switch (property) {\n            case 'leftIndent':\n                return this.leftIndent;\n            case 'rightIndent':\n                return this.rightIndent;\n            case 'firstLineIndent':\n                return this.firstLineIndent;\n            case 'beforeSpacing':\n                return this.beforeSpacing;\n            case 'afterSpacing':\n                return this.afterSpacing;\n            case 'spaceAfterAuto':\n                return this.spaceAfterAuto;\n            case 'spaceBeforeAuto':\n                return this.spaceBeforeAuto;\n            case 'textAlignment':\n                return this.textAlignment;\n            case 'lineSpacing':\n                return this.lineSpacing;\n            case 'lineSpacingType':\n                return this.lineSpacingType;\n            case 'bidi':\n                return this.bidi;\n            case 'contextualSpacing':\n                return this.contextualSpacing;\n            case 'keepWithNext':\n                return this.keepWithNext;\n            case 'keepLinesTogether':\n                return this.keepLinesTogether;\n            case 'widowControl':\n                return this.widowControl;\n            case 'outlineLevel':\n                return this.outlineLevel;\n            default:\n                return undefined;\n        }\n    };\n    /**\n     * Notifies whenever the property gets changed.\n     *\n     * @param {string} propertyName\n     */\n    SelectionParagraphFormat.prototype.notifyPropertyChanged = function (propertyName) {\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(this.selection) &&\n            ((this.selection.owner.isReadOnlyMode && !this.selection.isInlineFormFillMode()) || !this.selection.owner.isDocumentLoaded)\n            && !this.selection.isRetrieveFormatting) {\n            return;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(this.selection) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(this.selection.start) && !this.selection.isRetrieveFormatting) {\n            var editorModule = this.selection.owner.editorModule;\n            if (propertyName === 'lineSpacing' || propertyName === 'lineSpacingType') {\n                var editorHistory = this.selection.owner.editorHistoryModule;\n                if (!(editorHistory && (editorHistory.isUndoing || editorHistory.isRedoing)) && this.validateLineSpacing()) {\n                    this.selection.owner.editorHistoryModule.initComplexHistory(this.selection, 'LineSpacing');\n                    if (propertyName === 'lineSpacing') {\n                        this.lineSpacingTypeIn = 'Multiple';\n                        var value_1 = this.getPropertyValue('lineSpacingType');\n                        editorModule.onApplyParagraphFormat('lineSpacingType', value_1, false, false);\n                        editorModule.onApplyParagraphFormat(propertyName, this.getPropertyValue(propertyName), false, false);\n                    }\n                    else {\n                        editorModule.onApplyParagraphFormat(propertyName, this.getPropertyValue(propertyName), false, false);\n                        this.lineSpacingIn = 12;\n                        editorModule.onApplyParagraphFormat('lineSpacing', this.getPropertyValue('lineSpacing'), false, false);\n                    }\n                    this.selection.owner.editorHistoryModule.updateComplexHistory();\n                    return;\n                }\n            }\n            var value = this.getPropertyValue(propertyName);\n            if ((propertyName === 'leftIndent' || propertyName === 'rightIndent' || propertyName === 'firstLineIndent')\n                && !(value >= -1056 && value < 1056)) {\n                return;\n            }\n            if (propertyName === 'listLevelNumber') {\n                editorModule.onApplyListInternal(this.documentHelper.getListById(this.listId), this.listLevelNumber);\n            }\n            else {\n                editorModule.onApplyParagraphFormat(propertyName, value, propertyName === 'textAlignment' ? true : false, false);\n            }\n        }\n    };\n    /**\n     * Copies the format.\n     *\n     * @param {WParagraphFormat} format\n     * @returns {void}\n     * @private\n     */\n    SelectionParagraphFormat.prototype.copyFormat = function (format) {\n        this.styleName = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(format.baseStyle) ? format.baseStyle.name : 'Normal';\n        this.leftIndent = format.leftIndent;\n        this.rightIndent = format.rightIndent;\n        this.firstLineIndent = format.firstLineIndent;\n        this.afterSpacing = format.afterSpacing;\n        this.beforeSpacing = format.beforeSpacing;\n        this.spaceAfterAuto = format.spaceAfterAuto;\n        this.spaceBeforeAuto = format.spaceBeforeAuto;\n        this.lineSpacing = format.lineSpacing;\n        this.lineSpacingType = format.lineSpacingType;\n        this.textAlignment = format.textAlignment;\n        this.outlineLevel = format.outlineLevel;\n        this.bidi = format.bidi;\n        this.keepLinesTogether = format.keepLinesTogether;\n        this.keepWithNext = format.keepWithNext;\n        this.widowControl = format.widowControl;\n        this.contextualSpacing = format.contextualSpacing;\n        this.borders.copyFormat(format.borders);\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(format.listFormat) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(format.listFormat.listId)) {\n            this.listId = format.listFormat.listId;\n            this.listLevelNumber = format.listFormat.listLevelNumber;\n        }\n        else {\n            this.listId = undefined;\n            this.listLevelNumber = 0;\n        }\n    };\n    /**\n     * Copies to format.\n     *\n     * @param {WParagraphFormat} format\n     * @private\n     */\n    SelectionParagraphFormat.prototype.copyToFormat = function (format) {\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(format)) {\n            return;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(this.afterSpacing)) {\n            format.afterSpacing = this.afterSpacing;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(this.beforeSpacing)) {\n            format.beforeSpacing = this.beforeSpacing;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(this.spaceAfterAuto)) {\n            format.spaceAfterAuto = this.spaceAfterAuto;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(this.spaceBeforeAuto)) {\n            format.spaceBeforeAuto = this.spaceBeforeAuto;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(this.leftIndent)) {\n            format.leftIndent = this.leftIndent;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(this.rightIndent)) {\n            format.rightIndent = this.rightIndent;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(this.textAlignment)) {\n            format.textAlignment = this.textAlignment;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(this.outlineLevel)) {\n            format.outlineLevel = this.outlineLevel;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(this.lineSpacing)) {\n            format.lineSpacing = this.lineSpacing;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(this.lineSpacingType)) {\n            format.lineSpacingType = this.lineSpacingType;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(this.firstLineIndent)) {\n            format.firstLineIndent = this.firstLineIndent;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(this.bidi)) {\n            format.bidi = this.bidi;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(this.keepWithNext)) {\n            format.keepWithNext = this.keepWithNext;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(this.keepLinesTogether)) {\n            format.keepLinesTogether = this.keepLinesTogether;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(this.widowControl)) {\n            format.widowControl = this.widowControl;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(this.contextualSpacing)) {\n            format.contextualSpacing = this.contextualSpacing;\n        }\n    };\n    /**\n     * Combines the format.\n     *\n     * @param {WParagraphFormat} format\n     * @private\n     */\n    SelectionParagraphFormat.prototype.combineFormat = function (format) {\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(this.leftIndent) && this.leftIndent !== format.leftIndent) {\n            this.leftIndent = undefined;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(this.rightIndent) && this.rightIndent !== format.rightIndent) {\n            this.rightIndent = undefined;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(this.firstLineIndent) && this.firstLineIndent !== format.firstLineIndent) {\n            this.firstLineIndent = undefined;\n        }\n        if (this.lineSpacing !== 0 && this.lineSpacing !== format.lineSpacing) {\n            this.lineSpacing = 0;\n        }\n        if (this.beforeSpacing !== -1 && this.beforeSpacing !== format.beforeSpacing) {\n            this.beforeSpacing = -1;\n        }\n        if (this.afterSpacing !== -1 && this.afterSpacing !== format.afterSpacing) {\n            this.afterSpacing = -1;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(this.spaceAfterAuto) && this.spaceAfterAuto !== format.spaceAfterAuto) {\n            this.spaceAfterAuto = undefined;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(this.spaceBeforeAuto) && this.spaceBeforeAuto !== format.spaceBeforeAuto) {\n            this.spaceBeforeAuto = undefined;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(this.lineSpacingType) && this.lineSpacingType !== format.lineSpacingType) {\n            this.lineSpacingType = undefined;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(this.textAlignment) && this.textAlignment !== format.textAlignment) {\n            this.textAlignment = undefined;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(this.outlineLevel) && this.outlineLevel !== format.outlineLevel) {\n            this.outlineLevel = undefined;\n        }\n        if (this.listLevelNumber >= 0 && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(this.listId) && ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(format.listFormat) || format.listFormat.listLevelNumber !== this.listLevelNumber)) {\n            this.listLevelNumber = -1;\n        }\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(format.listFormat) || (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(format.listFormat.listId) || (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(this.listId) && this.listId !== format.listFormat.listId)) {\n            this.listId = undefined;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(this.bidi) && this.bidi !== format.bidi) {\n            this.bidi = undefined;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(this.keepLinesTogether) && this.keepLinesTogether !== format.keepLinesTogether) {\n            this.keepLinesTogether = undefined;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(this.keepWithNext) && this.keepWithNext !== format.keepWithNext) {\n            this.keepWithNext = undefined;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(this.widowControl) && this.widowControl !== format.widowControl) {\n            this.widowControl = undefined;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(this.contextualSpacing) && this.contextualSpacing !== format.contextualSpacing) {\n            this.contextualSpacing = undefined;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(this.styleName) && format.baseStyle && this.styleName !== format.baseStyle.name) {\n            this.styleName = undefined;\n        }\n        this.borders.combineFormat(format.borders);\n    };\n    /**\n     * Clears the format.\n     *\n     * @returns {void}\n     * @private\n     */\n    SelectionParagraphFormat.prototype.clearFormat = function () {\n        this.leftIndent = 0;\n        this.rightIndent = 0;\n        this.beforeSpacing = 0;\n        this.afterSpacing = 0;\n        this.spaceAfterAuto = undefined;\n        this.spaceBeforeAuto = undefined;\n        this.firstLineIndent = 0;\n        this.lineSpacing = 1;\n        this.textAlignment = undefined;\n        this.lineSpacingType = undefined;\n        this.listId = undefined;\n        this.listLevelNumber = -1;\n        this.styleName = undefined;\n        this.bidi = undefined;\n        this.contextualSpacing = undefined;\n    };\n    /**\n     * Gets the clone of list at current selection.\n     *\n     * @returns WList\n     * @private\n     */\n    SelectionParagraphFormat.prototype.getList = function () {\n        var list = this.documentHelper.getListById(this.listId);\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(list)) {\n            var listAdv = new _list_list__WEBPACK_IMPORTED_MODULE_4__.WList();\n            var abstractList = new _list_abstract_list__WEBPACK_IMPORTED_MODULE_5__.WAbstractList();\n            var currentAbstractList = this.documentHelper.getAbstractListById(list.abstractListId);\n            var editor = this.selection.owner.editorModule;\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(currentAbstractList)) {\n                for (var i = 0; i < currentAbstractList.levels.length; i++) {\n                    var level = editor.cloneListLevel(currentAbstractList.levels[i]);\n                    abstractList.levels.push(level);\n                    level.ownerBase = abstractList;\n                }\n            }\n            else {\n                abstractList.levels.push(new _list_list_level__WEBPACK_IMPORTED_MODULE_6__.WListLevel(abstractList));\n            }\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(list.levelOverrides)) {\n                for (var i = 0; i < list.levelOverrides.length; i++) {\n                    var levelOverride = editor.cloneLevelOverride(list.levelOverrides[i]);\n                    listAdv.levelOverrides.push(levelOverride);\n                }\n            }\n            listAdv.abstractList = abstractList;\n            listAdv.abstractListId = abstractList.abstractListId;\n            listAdv.sourceListId = list.listId;\n            return listAdv;\n        }\n        return undefined;\n    };\n    /**\n     * Modifies the list at current selection.\n     *\n     * @param {WList} listAdv\n     * @private\n     */\n    SelectionParagraphFormat.prototype.setList = function (listAdv, isListDialog) {\n        if ((this.documentHelper.owner.isReadOnlyMode && !this.selection.isInlineFormFillMode()) || !this.documentHelper.owner.isDocumentLoaded || (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(this.selection) && this.selection.checkContentControlLocked(true))) {\n            return;\n        }\n        var list = this.documentHelper.getListById(this.listId);\n        var collection = undefined;\n        var currentAbstractList = listAdv ? this.documentHelper.getAbstractListById(listAdv.abstractListId) : undefined;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(list) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(listAdv)\n            && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(currentAbstractList) && listAdv.sourceListId === list.listId) {\n            var history_1 = this.documentHelper.owner.editorHistoryModule;\n            var listLevel = this.documentHelper.layout.getListLevel(list, 1);\n            this.selection.owner.isLayoutEnabled = false;\n            this.documentHelper.owner.editorModule.setOffsetValue(this.selection);\n            if (history_1) {\n                collection = history_1.updateListChangesInHistory(currentAbstractList, list);\n            }\n            this.documentHelper.owner.editorModule.updateListParagraphs();\n            if (history_1) {\n                history_1.applyListChanges(this.selection, collection);\n            }\n            this.selection.owner.isLayoutEnabled = true;\n            this.documentHelper.renderedLists.clear();\n            this.documentHelper.renderedLevelOverrides = [];\n            if (isListDialog) {\n                this.documentHelper.layout.clearInvalidList(listAdv);\n            }\n            this.documentHelper.owner.editorModule.layoutWholeDocument();\n            this.documentHelper.owner.editorModule.updateSelectionTextPosition(false);\n            if (history_1 && history_1.currentBaseHistoryInfo) {\n                if (history_1.currentBaseHistoryInfo.modifiedProperties.length > 0) {\n                    history_1.currentBaseHistoryInfo.updateSelection();\n                }\n                history_1.updateHistory();\n            }\n            this.documentHelper.owner.editorModule.fireContentChange();\n        }\n        else if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(listAdv)) {\n            this.selection.owner.isLayoutEnabled = false;\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(currentAbstractList) && this.documentHelper.abstractLists.indexOf(currentAbstractList) === -1) {\n                this.documentHelper.abstractLists.push(currentAbstractList);\n            }\n            if (this.documentHelper.lists.indexOf(listAdv) === -1) {\n                this.documentHelper.lists.push(listAdv);\n            }\n            //currentAbstractList.listType = 'Numbering';\n            this.selection.owner.isLayoutEnabled = true;\n            this.selection.owner.editorModule.onApplyList(listAdv);\n        }\n        else {\n            this.selection.owner.editorModule.onApplyList(undefined);\n        }\n    };\n    /**\n     * Destroys the managed resources.\n     *\n     * @returns {void}\n     * @private\n     */\n    SelectionParagraphFormat.prototype.destroy = function () {\n        this.leftIndentIn = undefined;\n        this.rightIndentIn = undefined;\n        this.beforeSpacingIn = undefined;\n        this.afterSpacingIn = undefined;\n        this.spaceBeforeAutoIn = undefined;\n        this.spaceAfterAutoIn = undefined;\n        this.firstLineIndentIn = undefined;\n        this.lineSpacingIn = undefined;\n        this.textAlignmentIn = undefined;\n        this.lineSpacingTypeIn = undefined;\n        this.listId = undefined;\n        this.listLevelNumberIn = undefined;\n        this.documentHelper = undefined;\n        this.selection = undefined;\n        this.styleName = undefined;\n        this.bidi = undefined;\n        this.contextualSpacing = undefined;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(this.bordersIn)) {\n            this.bordersIn.destroy();\n            this.bordersIn = undefined;\n        }\n    };\n    return SelectionParagraphFormat;\n}());\n\nvar SelectionHeaderFooter = /** @class */ (function () {\n    function SelectionHeaderFooter(selection) {\n        this.linkToPreviousIn = true;\n        this.selection = selection;\n    }\n    Object.defineProperty(SelectionHeaderFooter.prototype, \"linkToPrevious\", {\n        get: function () {\n            return this.linkToPreviousIn;\n        },\n        /**\n         * Gets or sets a value indicating whether this header footer is linked to the previous section header footer in the document.\n         *\n         * @default true\n         * @aspType bool\n         * @returns {boolean} Returns `true` if the header footer is linked to the previous section header footer; Otherwise `false`.\n         */\n        set: function (value) {\n            this.linkToPreviousIn = value;\n            this.notifyPropertyChanged('linkToPrevious');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    SelectionHeaderFooter.prototype.notifyPropertyChanged = function (propertyName) {\n        var selection = this.selection;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(selection) && (selection.isCleared || selection.owner.isPastingContent\n            || selection.owner.isReadOnlyMode || !selection.owner.isDocumentLoaded)\n            && !selection.isRetrieveFormatting) {\n            return;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(selection) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(selection.start) && !selection.isRetrieveFormatting) {\n            var value = this.getPropertyvalue(propertyName);\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(value)) {\n                var headerFooterWidget = selection.start.paragraph.bodyWidget;\n                var sectionIndex = headerFooterWidget.sectionIndex;\n                var headerFooterType = headerFooterWidget.headerFooterType;\n                selection.owner.editorModule.removeInlineHeaderFooterWidget(sectionIndex, headerFooterType, propertyName, value);\n            }\n        }\n    };\n    SelectionHeaderFooter.prototype.getPropertyvalue = function (propertyName) {\n        if (propertyName == \"linkToPrevious\") {\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(this.linkToPrevious)) {\n                return this.linkToPrevious;\n            }\n        }\n        return undefined;\n    };\n    return SelectionHeaderFooter;\n}());\n\n/**\n * Selection section format implementation\n */\nvar SelectionSectionFormat = /** @class */ (function () {\n    /**\n     * @param selection\n     * @private\n     */\n    function SelectionSectionFormat(selection) {\n        this.differentFirstPageIn = undefined;\n        this.differentOddAndEvenPagesIn = undefined;\n        /**\n         * private\n         */\n        this.bidi = undefined;\n        this.selection = selection;\n        this.firstPageHeaderIn = new SelectionHeaderFooter(selection);\n        this.firstPageFooterIn = new SelectionHeaderFooter(selection);\n        this.oddPageHeaderIn = new SelectionHeaderFooter(selection);\n        this.oddPageFooterIn = new SelectionHeaderFooter(selection);\n        this.evenPageHeaderIn = new SelectionHeaderFooter(selection);\n        this.evenPageFooterIn = new SelectionHeaderFooter(selection);\n    }\n    Object.defineProperty(SelectionSectionFormat.prototype, \"pageHeight\", {\n        /**\n         * Gets or sets the page height.\n         *\n         * @aspType int\n         */\n        get: function () {\n            return this.pageHeightIn;\n        },\n        /**\n         * Gets or sets the page height.\n         *\n         * @aspType int\n         */\n        set: function (value) {\n            this.pageHeightIn = value;\n            this.notifyPropertyChanged('pageHeight');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionSectionFormat.prototype, \"pageWidth\", {\n        /**\n         * Gets or sets the page width.\n         *\n         * @aspType int\n         */\n        get: function () {\n            return this.pageWidthIn;\n        },\n        /**\n         * Gets or sets the page width.\n         *\n         * @aspType int\n         */\n        set: function (value) {\n            this.pageWidthIn = value;\n            this.notifyPropertyChanged('pageWidth');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionSectionFormat.prototype, \"leftMargin\", {\n        /**\n         * Gets or sets the page left margin.\n         *\n         * @aspType int\n         */\n        get: function () {\n            return this.leftMarginIn;\n        },\n        /**\n         * Gets or sets the page left margin.\n         *\n         * @aspType int\n         */\n        set: function (value) {\n            this.leftMarginIn = value;\n            this.notifyPropertyChanged('leftMargin');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionSectionFormat.prototype, \"bottomMargin\", {\n        /**\n         * Gets or sets the page bottom margin.\n         *\n         * @aspType int\n         */\n        get: function () {\n            return this.bottomMarginIn;\n        },\n        /**\n         * Gets or sets the page bottom margin.\n         *\n         * @aspType int\n         */\n        set: function (value) {\n            this.bottomMarginIn = value;\n            this.notifyPropertyChanged('bottomMargin');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionSectionFormat.prototype, \"topMargin\", {\n        /**\n         * Gets or sets the page top margin.\n         *\n         * @aspType int\n         */\n        get: function () {\n            return this.topMarginIn;\n        },\n        /**\n         * Gets or sets the page top margin.\n         *\n         * @aspType int\n         */\n        set: function (value) {\n            this.topMarginIn = value;\n            this.notifyPropertyChanged('topMargin');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionSectionFormat.prototype, \"rightMargin\", {\n        /**\n         * Gets or sets the page right margin.\n         *\n         * @aspType int\n         */\n        get: function () {\n            return this.rightMarginIn;\n        },\n        /**\n         * Gets or sets the page right margin.\n         *\n         * @aspType int\n         */\n        set: function (value) {\n            this.rightMarginIn = value;\n            this.notifyPropertyChanged('rightMargin');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionSectionFormat.prototype, \"headerDistance\", {\n        /**\n         * Gets or sets the header distance.\n         *\n         * @aspType int\n         */\n        get: function () {\n            return this.headerDistanceIn;\n        },\n        /**\n         * Gets or sets the header distance.\n         *\n         * @aspType int\n         */\n        set: function (value) {\n            this.headerDistanceIn = value;\n            this.notifyPropertyChanged('headerDistance');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionSectionFormat.prototype, \"firstPageHeader\", {\n        get: function () {\n            return this.firstPageHeaderIn;\n        },\n        /**\n         * Gets the first page header of the section.\n         *\n         * @aspType SelectionHeaderFooter\n         */\n        set: function (value) {\n            this.firstPageHeaderIn = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionSectionFormat.prototype, \"firstPageFooter\", {\n        get: function () {\n            return this.firstPageFooterIn;\n        },\n        /**\n         * Gets the first page footer of the section.\n         *\n         * @aspType SelectionHeaderFooter\n         */\n        set: function (value) {\n            this.firstPageFooterIn = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionSectionFormat.prototype, \"oddPageHeader\", {\n        get: function () {\n            return this.oddPageHeaderIn;\n        },\n        /**\n         * Gets the odd page header of the section.\n         *\n         * @aspType SelectionHeaderFooter\n         */\n        set: function (value) {\n            this.oddPageHeaderIn = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionSectionFormat.prototype, \"oddPageFooter\", {\n        get: function () {\n            return this.oddPageFooterIn;\n        },\n        /**\n         * Gets the odd page footer of the section.\n         *\n         * @aspType SelectionHeaderFooter\n         */\n        set: function (value) {\n            this.oddPageFooterIn = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionSectionFormat.prototype, \"evenPageHeader\", {\n        get: function () {\n            return this.evenPageHeaderIn;\n        },\n        /**\n         * Gets the even page header of the section.\n         *\n         * @aspType SelectionHeaderFooter\n         */\n        set: function (value) {\n            this.evenPageHeaderIn = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionSectionFormat.prototype, \"evenPageFooter\", {\n        get: function () {\n            return this.evenPageFooterIn;\n        },\n        /**\n         * Gets the even page footer of the section.\n         *\n         * @aspType SelectionHeaderFooter\n         */\n        set: function (value) {\n            this.evenPageFooterIn = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionSectionFormat.prototype, \"pageStartingNumber\", {\n        /**\n         * Gets or sets the starting page number.\n         *\n         * @aspType int\n         */\n        get: function () {\n            return this.pageStartingNumberIn;\n        },\n        /**\n         * Gets or sets the starting page number.\n         *\n         * @aspType int\n         */\n        set: function (value) {\n            this.pageStartingNumberIn = value;\n            this.notifyPropertyChanged('pageStartingNumber');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionSectionFormat.prototype, \"restartPageNumbering\", {\n        /**\n         * Gets or sets a value indicating whether to restart page numbering.\n         *\n         * @aspType bool\n         */\n        get: function () {\n            return this.restartPageNumberingIn;\n        },\n        /**\n         * Gets or sets a value indicating whether to restart page numbering.\n         *\n         * @aspType bool\n         */\n        set: function (value) {\n            this.restartPageNumberingIn = value;\n            this.notifyPropertyChanged('restartPageNumbering');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionSectionFormat.prototype, \"footerDistance\", {\n        /**\n         * Gets or sets the footer distance.\n         *\n         * @aspType int\n         */\n        get: function () {\n            return this.footerDistanceIn;\n        },\n        /**\n         * Gets or sets the footer distance.\n         *\n         * @aspType int\n         */\n        set: function (value) {\n            this.footerDistanceIn = value;\n            this.notifyPropertyChanged('footerDistance');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionSectionFormat.prototype, \"differentFirstPage\", {\n        /**\n         * Gets or sets a value indicating whether the section has different first page.\n         *\n         * @aspType bool\n         */\n        get: function () {\n            return this.differentFirstPageIn;\n        },\n        /**\n         * Gets or sets a value indicating whether the section has different first page.\n         *\n         * @aspType bool\n         */\n        set: function (value) {\n            this.differentFirstPageIn = value;\n            this.notifyPropertyChanged('differentFirstPage');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionSectionFormat.prototype, \"differentOddAndEvenPages\", {\n        /**\n         * Gets or sets a value indicating whether the section has different odd and even page.\n         *\n         * @aspType bool\n         */\n        get: function () {\n            return this.differentOddAndEvenPagesIn;\n        },\n        /**\n         * Gets or sets a value indicating whether the section has different odd and even page.\n         *\n         * @aspType bool\n         */\n        set: function (value) {\n            this.differentOddAndEvenPagesIn = value;\n            this.notifyPropertyChanged('differentOddAndEvenPages');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionSectionFormat.prototype, \"endnoteNumberFormat\", {\n        /**\n         * Gets or sets the number format of endnote.\n         */\n        get: function () {\n            return this.endnoteNumberFormatIn;\n        },\n        /**\n         * Gets or sets the number format of endnote.\n         */\n        set: function (value) {\n            this.endnoteNumberFormatIn = value;\n            this.notifyPropertyChanged('endnoteNumberFormat');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionSectionFormat.prototype, \"footNoteNumberFormat\", {\n        /**\n         * Gets or sets the number format of footnote.\n         */\n        get: function () {\n            return this.footNoteNumberFormatIn;\n        },\n        /**\n         * Gets or sets the number format of footnote.\n         */\n        set: function (value) {\n            this.footNoteNumberFormatIn = value;\n            this.notifyPropertyChanged('footNoteNumberFormat');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionSectionFormat.prototype, \"initialFootNoteNumber\", {\n        /**\n         * Gets or sets the number format of footnote.\n         */\n        get: function () {\n            return this.initialFootNoteNumberIn;\n        },\n        /**\n         * Gets or sets the number format of footnote.\n         */\n        set: function (value) {\n            this.initialFootNoteNumberIn = value;\n            this.notifyPropertyChanged('initialFootNoteNumber');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionSectionFormat.prototype, \"initialEndNoteNumber\", {\n        /**\n         * Gets or sets the number format of footnote.\n         */\n        get: function () {\n            return this.initialEndNoteNumberIn;\n        },\n        /**\n         * Gets or sets the number format of footnote.\n         */\n        set: function (value) {\n            this.initialEndNoteNumberIn = value;\n            this.notifyPropertyChanged('initialEndNoteNumber');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionSectionFormat.prototype, \"restartIndexForFootnotes\", {\n        /**\n         * Gets or sets the restart index of footnote\n         */\n        get: function () {\n            return this.restartIndexForFootnotesIn;\n        },\n        /**\n         * Gets or sets the restart index of footnote\n         */\n        set: function (value) {\n            this.restartIndexForFootnotesIn = value;\n            this.notifyPropertyChanged('restartIndexForFootnotes');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionSectionFormat.prototype, \"restartIndexForEndnotes\", {\n        /**\n         * Gets or sets the restart index of endnote\n         */\n        get: function () {\n            return this.restartIndexForEndnotesIn;\n        },\n        /**\n         * Gets or sets the restart index of endnote\n         */\n        set: function (value) {\n            this.restartIndexForEndnotesIn = value;\n            this.notifyPropertyChanged('restartIndexForEndnotes');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionSectionFormat.prototype, \"numberOfColumns\", {\n        /**\n         * Gets the number of columns on a page.\n         */\n        get: function () {\n            return this.columns.length == 0 ? 1 : this.columns.length;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionSectionFormat.prototype, \"equalWidth\", {\n        /**\n         * Gets or sets a value indicating whether all the columns on a page has even width and space.\n         */\n        get: function () {\n            return this.equalWidthIn;\n        },\n        /**\n         * Gets or sets a value indicating whether all the columns on a page has even width and space.\n         */\n        set: function (value) {\n            this.equalWidthIn = value;\n            this.notifyPropertyChanged('equalWidth');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionSectionFormat.prototype, \"lineBetweenColumns\", {\n        /**\n         * Gets or sets a value indicating whether the vertical lines appear between all the columns.\n         */\n        get: function () {\n            return this.lineBetweenColumnsIn;\n        },\n        /**\n         * Gets or sets a value indicating whether the vertical lines appear between all the columns.\n         */\n        set: function (value) {\n            this.lineBetweenColumnsIn = value;\n            this.notifyPropertyChanged('lineBetweenColumns');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionSectionFormat.prototype, \"columns\", {\n        /**\n         * Gets or sets the columns.\n         */\n        get: function () {\n            return this.columnsIn;\n        },\n        /**\n         * Gets or sets the columns.\n         */\n        set: function (value) {\n            this.columnsIn = value;\n            var selection = this.selection;\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(selection) && (selection.isCleared || selection.owner.isPastingContent\n                || selection.owner.isReadOnlyMode || !selection.owner.isDocumentLoaded)\n                && !selection.isRetrieveFormatting) {\n                return;\n            }\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(selection) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(selection.start) && !selection.isRetrieveFormatting) {\n                this.selection.owner.editorModule.onApplyColumnFormat('columns', value);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionSectionFormat.prototype, \"breakCode\", {\n        /**\n         * Gets or sets the breakCode.\n         *\n         * @aspType int\n         */\n        get: function () {\n            return this.breakCodeIn;\n        },\n        /**\n         * Gets or sets the breakCode.\n         *\n         * @aspType int\n         */\n        set: function (value) {\n            this.breakCodeIn = value;\n            this.notifyPropertyChanged('breakCode');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Copies the format.\n     *\n     * @param {WSectionFormat} format\n     * @returns {void}\n     * @private\n     */\n    SelectionSectionFormat.prototype.copyFormat = function (format) {\n        this.pageHeight = format.pageHeight;\n        this.pageWidth = format.pageWidth;\n        this.leftMargin = format.leftMargin;\n        this.topMargin = format.topMargin;\n        this.rightMargin = format.rightMargin;\n        this.bottomMargin = format.bottomMargin;\n        this.headerDistance = format.headerDistance;\n        this.footerDistance = format.footerDistance;\n        this.differentFirstPage = format.differentFirstPage;\n        this.differentOddAndEvenPages = format.differentOddAndEvenPages;\n        this.bidi = format.bidi;\n        this.pageStartingNumber = format.pageStartingNumber;\n        this.restartPageNumbering = format.restartPageNumbering;\n        this.endnoteNumberFormat = format.endnoteNumberFormat;\n        this.footNoteNumberFormat = format.footNoteNumberFormat;\n        this.restartIndexForEndnotes = format.restartIndexForEndnotes;\n        this.restartIndexForFootnotes = format.restartIndexForFootnotes;\n        this.initialEndNoteNumber = format.initialEndNoteNumber;\n        this.initialFootNoteNumber = format.initialFootNoteNumber;\n        this.equalWidth = format.equalWidth;\n        this.lineBetweenColumns = format.lineBetweenColumns;\n        this.columns = [];\n        for (var _i = 0, _a = format.columns; _i < _a.length; _i++) {\n            var col = _a[_i];\n            var selectCol = new SelectionColumnFormat(this.selection);\n            selectCol.width = _index__WEBPACK_IMPORTED_MODULE_2__.HelperMethods.convertPixelToPoint(col.width);\n            selectCol.space = _index__WEBPACK_IMPORTED_MODULE_2__.HelperMethods.convertPixelToPoint(col.space);\n            this.columns.push(selectCol);\n        }\n        this.breakCode = format.breakCode;\n        if (this.selection.owner.enableHeaderAndFooter) {\n            var headerFootersColletion = this.selection.documentHelper.headersFooters;\n            var headerFooterWidget = this.selection.start.paragraph.containerWidget;\n            var sectionIndex = headerFooterWidget.sectionIndex;\n            var headerFooterType = headerFooterWidget.headerFooterType;\n            var isLinkedToPrevious = false;\n            if (sectionIndex == 0) {\n                this.oddPageHeader.linkToPrevious = false;\n                this.oddPageFooter.linkToPrevious = false;\n                this.evenPageHeader.linkToPrevious = false;\n                this.evenPageFooter.linkToPrevious = false;\n                this.firstPageHeader.linkToPrevious = false;\n                this.firstPageFooter.linkToPrevious = false;\n            }\n            else if (headerFootersColletion[sectionIndex]) {\n                var index = this.selection.viewer.getHeaderFooter(headerFooterType);\n                var headerFooterWidget_1 = headerFootersColletion[sectionIndex][index];\n                if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(headerFooterWidget_1)) {\n                    isLinkedToPrevious = true;\n                }\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(headerFooterWidget_1) || isLinkedToPrevious) {\n                    switch (headerFooterType) {\n                        case \"OddHeader\":\n                            if (isLinkedToPrevious) {\n                                this.oddPageHeader.linkToPrevious = true;\n                            }\n                            else {\n                                this.oddPageHeader.linkToPrevious = false;\n                            }\n                            break;\n                        case \"OddFooter\":\n                            if (isLinkedToPrevious) {\n                                this.oddPageFooter.linkToPrevious = true;\n                            }\n                            else {\n                                this.oddPageFooter.linkToPrevious = false;\n                            }\n                            break;\n                        case \"EvenHeader\":\n                            if (isLinkedToPrevious) {\n                                this.evenPageHeader.linkToPrevious = true;\n                            }\n                            else {\n                                this.evenPageHeader.linkToPrevious = false;\n                            }\n                            break;\n                        case \"EvenFooter\":\n                            if (isLinkedToPrevious) {\n                                this.evenPageFooter.linkToPrevious = true;\n                            }\n                            else {\n                                this.evenPageFooter.linkToPrevious = false;\n                            }\n                            break;\n                        case \"FirstPageHeader\":\n                            if (isLinkedToPrevious) {\n                                this.firstPageHeader.linkToPrevious = true;\n                            }\n                            else {\n                                this.firstPageHeader.linkToPrevious = false;\n                            }\n                            break;\n                        case \"FirstPageFooter\":\n                            if (isLinkedToPrevious) {\n                                this.firstPageFooter.linkToPrevious = true;\n                            }\n                            else {\n                                this.firstPageFooter.linkToPrevious = false;\n                            }\n                            break;\n                    }\n                }\n            }\n        }\n    };\n    SelectionSectionFormat.prototype.applyColumnFormat = function () {\n    };\n    SelectionSectionFormat.prototype.notifyPropertyChanged = function (propertyName) {\n        var selection = this.selection;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(selection) && (selection.isCleared || selection.owner.isPastingContent\n            || selection.owner.isReadOnlyMode || !selection.owner.isDocumentLoaded)\n            && !selection.isRetrieveFormatting) {\n            return;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(selection) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(selection.start) && !selection.isRetrieveFormatting) {\n            var value = this.getPropertyvalue(propertyName);\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(value)) {\n                selection.owner.editorModule.onApplySectionFormat(propertyName, value);\n            }\n        }\n    };\n    SelectionSectionFormat.prototype.getPropertyvalue = function (propertyName) {\n        switch (propertyName) {\n            case 'pageHeight':\n                if (this.pageHeight > 0) {\n                    return this.pageHeight;\n                }\n                return undefined;\n            case 'pageWidth':\n                if (this.pageWidth > 0) {\n                    return this.pageWidth;\n                }\n                return undefined;\n            case 'leftMargin':\n                if (this.leftMargin >= 0) {\n                    return this.leftMargin;\n                }\n                return undefined;\n            case 'rightMargin':\n                if (this.rightMargin >= 0) {\n                    return this.rightMargin;\n                }\n                return undefined;\n            case 'topMargin':\n                if (this.topMargin >= 0) {\n                    return this.topMargin;\n                }\n                return undefined;\n            case 'bottomMargin':\n                if (this.bottomMargin >= 0) {\n                    return this.bottomMargin;\n                }\n                return undefined;\n            case 'differentFirstPage':\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(this.differentFirstPage)) {\n                    return this.differentFirstPage;\n                }\n                return undefined;\n            case 'differentOddAndEvenPages':\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(this.differentOddAndEvenPages)) {\n                    return this.differentOddAndEvenPages;\n                }\n                return undefined;\n            case 'headerDistance':\n                return this.headerDistanceIn;\n            case 'footerDistance':\n                return this.footerDistance;\n            case 'pageStartingNumber':\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(this.pageStartingNumber)) {\n                    return this.pageStartingNumber;\n                }\n                return undefined;\n            case 'restartPageNumbering':\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(this.restartPageNumbering)) {\n                    return this.restartPageNumbering;\n                }\n                return undefined;\n            case 'endnoteNumberFormat':\n                return this.endnoteNumberFormatIn;\n            case 'restartIndexForEndnotes':\n                return this.restartIndexForEndnotesIn;\n            case 'restartIndexForFootnotes':\n                return this.restartIndexForFootnotesIn;\n            case 'footNoteNumberFormat':\n                return this.footNoteNumberFormatIn;\n            case 'initialFootNoteNumber':\n                return this.initialFootNoteNumber;\n            case 'initialEndNoteNumber':\n                return this.initialEndNoteNumber;\n            case 'equalWidth':\n                return this.equalWidthIn;\n            case 'lineBetweenColumns':\n                return this.lineBetweenColumnsIn;\n            case 'columns':\n                return this.columnsIn;\n            case 'breakCode':\n                return this.breakCodeIn;\n            default:\n                return undefined;\n        }\n    };\n    /**\n     * Combines the format.\n     *\n     * @param {WSectionFormat} format\n     * @private\n     */\n    SelectionSectionFormat.prototype.combineFormat = function (format) {\n        if (this.pageHeight > 0 && this.pageHeight !== format.pageHeight) {\n            this.pageHeight = 0;\n        }\n        if (this.pageWidth > 0 && this.pageWidth !== format.pageWidth) {\n            this.pageWidth = 0;\n        }\n        if (this.leftMargin > -1 && this.leftMargin !== format.leftMargin) {\n            this.leftMargin = -1;\n        }\n        if (this.topMargin > -1 && this.topMargin !== format.topMargin) {\n            this.topMargin = -1;\n        }\n        if (this.rightMargin > -1 && this.rightMargin !== format.rightMargin) {\n            this.rightMargin = -1;\n        }\n        if (this.bottomMargin > -1 && this.bottomMargin !== format.bottomMargin) {\n            this.bottomMargin = -1;\n        }\n        if (this.headerDistance !== 0 && this.headerDistance !== format.headerDistance) {\n            this.headerDistance = 0;\n        }\n        if (this.footerDistance !== 0 && this.footerDistance !== format.footerDistance) {\n            this.footerDistance = 0;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(this.differentFirstPage) && this.differentFirstPage !== format.differentFirstPage) {\n            this.differentFirstPage = undefined;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(this.pageStartingNumber) && this.pageStartingNumber !== format.pageStartingNumber) {\n            this.pageStartingNumber = undefined;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(this.restartPageNumbering) && this.restartPageNumbering !== format.restartPageNumbering) {\n            this.restartPageNumbering = undefined;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(this.differentOddAndEvenPages) && this.differentOddAndEvenPages !== format.differentOddAndEvenPages) {\n            this.differentOddAndEvenPages = undefined;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(this.bidi) && this.bidi !== format.bidi) {\n            this.bidi = undefined;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(this.endnoteNumberFormat) && this.endnoteNumberFormat !== format.endnoteNumberFormat) {\n            this.endnoteNumberFormat = undefined;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(this.restartIndexForEndnotes) && this.restartIndexForEndnotes !== format.restartIndexForEndnotes) {\n            this.restartIndexForEndnotes = undefined;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(this.restartIndexForFootnotes) && this.restartIndexForFootnotes !== format.restartIndexForFootnotes) {\n            this.restartIndexForFootnotes = undefined;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(this.footNoteNumberFormat) && this.footNoteNumberFormat !== format.footNoteNumberFormat) {\n            this.footNoteNumberFormat = undefined;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(this.initialFootNoteNumber) && this.initialFootNoteNumber !== format.initialFootNoteNumber) {\n            this.initialFootNoteNumber = undefined;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(this.initialEndNoteNumber) && this.initialEndNoteNumber !== format.initialEndNoteNumber) {\n            this.initialEndNoteNumber = undefined;\n        }\n    };\n    /**\n     * Clears the format.\n     *\n     * @returns {void}\n     * @private\n     */\n    SelectionSectionFormat.prototype.clearFormat = function () {\n        this.headerDistance = 0;\n        this.footerDistance = 0;\n        this.pageHeight = 0;\n        this.pageWidth = 0;\n        this.leftMargin = -1;\n        this.rightMargin = -1;\n        this.topMargin = -1;\n        this.bottomMargin = -1;\n        this.differentFirstPage = undefined;\n        this.differentOddAndEvenPages = undefined;\n        this.bidi = undefined;\n        this.pageStartingNumber = undefined;\n        this.restartPageNumbering = undefined;\n        this.endnoteNumberFormat = undefined;\n        this.footNoteNumberFormat = undefined;\n        this.restartIndexForFootnotes = undefined;\n        this.restartIndexForEndnotes = undefined;\n        this.initialFootNoteNumber = 1;\n        this.initialEndNoteNumber = 1;\n    };\n    /**\n     * Destroys the managed resources.\n     *\n     * @returns {void}\n     * @private\n     */\n    SelectionSectionFormat.prototype.destroy = function () {\n        this.headerDistanceIn = undefined;\n        this.footerDistanceIn = undefined;\n        this.pageHeightIn = undefined;\n        this.pageWidthIn = undefined;\n        this.leftMarginIn = undefined;\n        this.rightMarginIn = undefined;\n        this.topMarginIn = undefined;\n        this.bottomMarginIn = undefined;\n        this.differentFirstPageIn = undefined;\n        this.differentOddAndEvenPagesIn = undefined;\n        this.selection = undefined;\n        this.bidi = undefined;\n        this.pageStartingNumberIn = undefined;\n        this.restartPageNumberingIn = undefined;\n        this.endnoteNumberFormatIn = undefined;\n        this.footNoteNumberFormatIn = undefined;\n        this.restartIndexForFootnotesIn = undefined;\n        this.restartIndexForEndnotesIn = undefined;\n        this.initialEndNoteNumber = undefined;\n        this.initialFootNoteNumber = undefined;\n        this.firstPageHeaderIn = undefined;\n        this.firstPageFooterIn = undefined;\n        this.oddPageHeaderIn = undefined;\n        this.oddPageFooterIn = undefined;\n        this.evenPageHeaderIn = undefined;\n        this.evenPageFooterIn = undefined;\n    };\n    return SelectionSectionFormat;\n}());\n\n/**\n * Selection table format implementation\n */\nvar SelectionTableFormat = /** @class */ (function () {\n    /**\n     * @param selection\n     * @private\n     */\n    function SelectionTableFormat(selection) {\n        this.leftIndentIn = 0;\n        this.backgroundIn = undefined;\n        this.tableAlignmentIn = undefined;\n        this.cellSpacingIn = 0;\n        this.leftMarginIn = 0;\n        this.rightMarginIn = 0;\n        this.topMarginIn = 0;\n        this.bottomMarginIn = 0;\n        this.preferredWidthIn = 0;\n        this.bidiIn = undefined;\n        this.selection = selection;\n    }\n    Object.defineProperty(SelectionTableFormat.prototype, \"table\", {\n        /**\n         * Gets or sets the table.\n         *\n         * @private\n         */\n        get: function () {\n            return this.tableIn;\n        },\n        set: function (value) {\n            this.tableIn = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionTableFormat.prototype, \"title\", {\n        /**\n         * Gets or sets the title of the selected table.\n         *\n         * @aspType string\n         */\n        get: function () {\n            return this.titleIn;\n        },\n        /**\n         * Gets or sets the title of the selected table.\n         *\n         * @aspType string\n         */\n        set: function (value) {\n            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(this.table)) {\n                return;\n            }\n            this.titleIn = value;\n            this.notifyPropertyChanged('title');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionTableFormat.prototype, \"description\", {\n        /**\n         * Gets or sets the description of the selected table.\n         *\n         * @aspType string\n         */\n        get: function () {\n            return this.descriptionIn;\n        },\n        /**\n         * Gets or sets the description of the selected table.\n         *\n         * @aspType string\n         */\n        set: function (value) {\n            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(this.table)) {\n                return;\n            }\n            this.descriptionIn = value;\n            this.notifyPropertyChanged('description');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionTableFormat.prototype, \"leftIndent\", {\n        /**\n         * Gets or Sets the left indent for selected table.\n         *\n         * @aspType int\n         */\n        get: function () {\n            return this.leftIndentIn;\n        },\n        /**\n         * Gets or Sets the left indent for selected table.\n         *\n         * @aspType int\n         */\n        set: function (value) {\n            if (value === this.leftIndentIn) {\n                return;\n            }\n            this.leftIndentIn = value;\n            this.notifyPropertyChanged('leftIndent');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionTableFormat.prototype, \"topMargin\", {\n        /**\n         * Gets or Sets the default top margin of cell for selected table.\n         *\n         * @default undefined\n         * @aspType int\n         */\n        get: function () {\n            return this.topMarginIn;\n        },\n        /**\n         * Gets or Sets the default top margin of cell for selected table.\n         *\n         * @default undefined\n         * @aspType int\n         */\n        set: function (value) {\n            if (value === this.topMarginIn) {\n                return;\n            }\n            this.topMarginIn = value;\n            this.notifyPropertyChanged('topMargin');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionTableFormat.prototype, \"background\", {\n        /**\n         * Gets or Sets the background for selected table.\n         *\n         * @default undefined\n         * @aspType string\n         */\n        get: function () {\n            return this.backgroundIn;\n        },\n        /**\n         * Gets or Sets the background for selected table.\n         *\n         * @default undefined\n         * @aspType string\n         */\n        set: function (value) {\n            if (value === this.backgroundIn) {\n                return;\n            }\n            this.backgroundIn = value;\n            this.notifyPropertyChanged('background');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionTableFormat.prototype, \"tableAlignment\", {\n        /**\n         * Gets or Sets the table alignment for selected table.\n         *\n         * @default undefined\n         */\n        get: function () {\n            return this.tableAlignmentIn;\n        },\n        /**\n         * Gets or Sets the table alignment for selected table.\n         *\n         * @default undefined\n         */\n        set: function (value) {\n            if (value === this.tableAlignmentIn) {\n                return;\n            }\n            this.tableAlignmentIn = value;\n            this.notifyPropertyChanged('tableAlignment');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionTableFormat.prototype, \"leftMargin\", {\n        /**\n         * Gets or Sets the default left margin of cell for selected table.\n         *\n         * @default undefined\n         * @aspType int\n         */\n        get: function () {\n            return this.leftMarginIn;\n        },\n        /**\n         * Gets or Sets the default left margin of cell for selected table.\n         *\n         * @default undefined\n         * @aspType int\n         */\n        set: function (value) {\n            if (value === this.leftMarginIn) {\n                return;\n            }\n            this.leftMarginIn = value;\n            this.notifyPropertyChanged('leftMargin');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionTableFormat.prototype, \"bottomMargin\", {\n        /**\n         * Gets or Sets the default bottom margin of cell for selected table.\n         *\n         * @default undefined\n         * @aspType int\n         */\n        get: function () {\n            return this.bottomMarginIn;\n        },\n        /**\n         * Gets or Sets the default bottom margin of cell for selected table.\n         *\n         * @default undefined\n         * @aspType int\n         */\n        set: function (value) {\n            if (value === this.bottomMarginIn) {\n                return;\n            }\n            this.bottomMarginIn = value;\n            this.notifyPropertyChanged('bottomMargin');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionTableFormat.prototype, \"cellSpacing\", {\n        /**\n         * Gets or Sets the cell spacing for selected table.\n         *\n         * @default undefined\n         * @aspType int\n         */\n        get: function () {\n            return this.cellSpacingIn;\n        },\n        /**\n         * Gets or Sets the cell spacing for selected table.\n         *\n         * @default undefined\n         * @aspType int\n         */\n        set: function (value) {\n            if (value === this.cellSpacingIn) {\n                return;\n            }\n            this.cellSpacingIn = value;\n            this.notifyPropertyChanged('cellSpacing');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionTableFormat.prototype, \"rightMargin\", {\n        /**\n         * Gets or Sets the default right margin of cell for selected table.\n         *\n         * @default undefined\n         * @aspType int\n         */\n        get: function () {\n            return this.rightMarginIn;\n        },\n        /**\n         * Gets or Sets the default right margin of cell for selected table.\n         *\n         * @default undefined\n         * @aspType int\n         */\n        set: function (value) {\n            if (value === this.rightMarginIn) {\n                return;\n            }\n            this.rightMarginIn = value;\n            this.notifyPropertyChanged('rightMargin');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionTableFormat.prototype, \"preferredWidth\", {\n        /**\n         * Gets or Sets the preferred width for selected table.\n         *\n         * @default undefined\n         * @aspType int\n         */\n        get: function () {\n            return this.preferredWidthIn;\n        },\n        /**\n         * Gets or Sets the preferred width for selected table.\n         *\n         * @default undefined\n         * @aspType int\n         */\n        set: function (value) {\n            if (value === this.preferredWidthIn) {\n                return;\n            }\n            this.preferredWidthIn = value;\n            this.notifyPropertyChanged('preferredWidth');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionTableFormat.prototype, \"preferredWidthType\", {\n        /**\n         * Gets or Sets the preferred width type for selected table.\n         *\n         * @default undefined\n         */\n        get: function () {\n            return this.preferredWidthTypeIn;\n        },\n        /**\n         * Gets or Sets the preferred width type for selected table.\n         *\n         * @default undefined\n         */\n        set: function (value) {\n            if (value === this.preferredWidthTypeIn) {\n                return;\n            }\n            this.preferredWidthTypeIn = value;\n            this.notifyPropertyChanged('preferredWidthType');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionTableFormat.prototype, \"bidi\", {\n        /**\n         * Gets or sets the bidi property\n         *\n         * @aspType bool\n         */\n        get: function () {\n            return this.bidiIn;\n        },\n        /**\n         * Gets or sets the bidi property\n         *\n         * @aspType bool\n         */\n        set: function (value) {\n            this.bidiIn = value;\n            this.notifyPropertyChanged('bidi');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    SelectionTableFormat.prototype.getPropertyValue = function (propertyName) {\n        switch (propertyName) {\n            case 'tableAlignment':\n                return this.tableAlignment;\n            case 'leftIndent':\n                return this.leftIndent;\n            case 'cellSpacing':\n                return this.cellSpacing;\n            case 'leftMargin':\n                return this.leftMargin;\n            case 'rightMargin':\n                return this.rightMargin;\n            case 'topMargin':\n                return this.topMargin;\n            case 'bottomMargin':\n                return this.bottomMargin;\n            case 'background':\n                var shading = new _format_index__WEBPACK_IMPORTED_MODULE_1__.WShading();\n                shading.backgroundColor = this.background;\n                return shading;\n            case 'preferredWidth':\n                return this.preferredWidth;\n            case 'preferredWidthType':\n                return this.preferredWidthType;\n            case 'bidi':\n                return this.bidi;\n            case 'title':\n                return this.title;\n            case 'description':\n                return this.description;\n            default:\n                return undefined;\n        }\n    };\n    SelectionTableFormat.prototype.notifyPropertyChanged = function (propertyName) {\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(this.selection) && (this.selection.isCleared\n            || !this.selection.owner.isDocumentLoaded || this.selection.owner.isReadOnlyMode\n            || this.selection.owner.isPastingContent) && !this.selection.isRetrieveFormatting) {\n            return;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(this.selection) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(this.selection.start) && !this.selection.isRetrieveFormatting) {\n            var value = this.getPropertyValue(propertyName);\n            if (propertyName === 'background') {\n                propertyName = 'shading';\n            }\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(value)) {\n                this.selection.owner.editorModule.onApplyTableFormat(propertyName, value);\n            }\n        }\n    };\n    /**\n     * Copies the format.\n     *\n     * @param {WTableFormat} format Format to copy.\n     * @returns {void}\n     * @private\n     */\n    SelectionTableFormat.prototype.copyFormat = function (format) {\n        this.leftIndent = format.leftIndent;\n        this.background = format.shading.backgroundColor;\n        this.tableAlignment = format.tableAlignment;\n        this.leftMargin = format.leftMargin;\n        this.rightMargin = format.rightMargin;\n        this.topMargin = format.topMargin;\n        this.bottomMargin = format.bottomMargin;\n        this.cellSpacing = format.cellSpacing;\n        this.preferredWidth = format.preferredWidth;\n        this.preferredWidthType = format.preferredWidthType;\n        this.bidi = format.bidi;\n        this.title = format.title;\n        this.description = format.description;\n    };\n    /**\n     * Clears the format.\n     *\n     * @returns {void}\n     * @private\n     */\n    SelectionTableFormat.prototype.clearFormat = function () {\n        this.table = undefined;\n        this.leftIndent = 0;\n        this.background = undefined;\n        this.leftIndent = 0;\n        this.leftMargin = 0;\n        this.rightMargin = 0;\n        this.topMargin = 0;\n        this.bottomMargin = 0;\n        this.cellSpacing = 0;\n        this.tableAlignment = undefined;\n        this.bidi = undefined;\n    };\n    /**\n     * Destroys the managed resources.\n     *\n     * @returns {void}\n     * @private\n     */\n    SelectionTableFormat.prototype.destroy = function () {\n        this.leftIndentIn = undefined;\n        this.backgroundIn = undefined;\n        this.leftIndentIn = undefined;\n        this.leftMarginIn = undefined;\n        this.rightMarginIn = undefined;\n        this.topMarginIn = undefined;\n        this.bottomMarginIn = undefined;\n        this.cellSpacingIn = undefined;\n        this.tableAlignmentIn = undefined;\n        this.tableIn = undefined;\n        this.selection = undefined;\n        this.bidi = undefined;\n    };\n    return SelectionTableFormat;\n}());\n\n/**\n * Selection cell format implementation\n */\nvar SelectionCellFormat = /** @class */ (function () {\n    /**\n     * @private\n     */\n    function SelectionCellFormat(selection) {\n        this.verticalAlignmentIn = undefined;\n        this.leftMarginIn = 0;\n        this.rightMarginIn = 0;\n        this.topMarginIn = 0;\n        this.bottomMarginIn = 0;\n        this.backgroundIn = undefined;\n        this.preferredWidthTypeIn = undefined;\n        this.selection = selection;\n    }\n    Object.defineProperty(SelectionCellFormat.prototype, \"verticalAlignment\", {\n        /**\n         * Gets or sets the vertical alignment of the selected cells.\n         *\n         * @default undefined\n         */\n        get: function () {\n            return this.verticalAlignmentIn;\n        },\n        /**\n         * Gets or sets the vertical alignment of the selected cells.\n         *\n         * @default undefined\n         */\n        set: function (value) {\n            if (value === this.verticalAlignmentIn) {\n                return;\n            }\n            this.verticalAlignmentIn = value;\n            this.notifyPropertyChanged('verticalAlignment');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionCellFormat.prototype, \"leftMargin\", {\n        /**\n         * Gets or Sets the left margin for selected cells.\n         *\n         * @default undefined\n         * @aspType int\n         */\n        /* eslint-disable */\n        get: function () {\n            return this.leftMarginIn;\n        },\n        /**\n         * Gets or Sets the left margin for selected cells.\n         * @default undefined\n         * @aspType int\n         */\n        set: function (value) {\n            if (value === this.leftMarginIn) {\n                return;\n            }\n            this.leftMarginIn = value;\n            this.notifyPropertyChanged('leftMargin');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionCellFormat.prototype, \"rightMargin\", {\n        /**\n         * Gets or Sets the right margin for selected cells.\n         * @default undefined\n         * @aspType int\n         */\n        get: function () {\n            return this.rightMarginIn;\n        },\n        /**\n         * Gets or Sets the right margin for selected cells.\n         * @default undefined\n         * @aspType int\n         */\n        set: function (value) {\n            if (value === this.rightMarginIn) {\n                return;\n            }\n            this.rightMarginIn = value;\n            this.notifyPropertyChanged('rightMargin');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionCellFormat.prototype, \"topMargin\", {\n        /**\n         * Gets or Sets the top margin for selected cells.\n         * @default undefined\n         * @aspType int\n         */\n        get: function () {\n            return this.topMarginIn;\n        },\n        /**\n         * Gets or Sets the top margin for selected cells.\n         * @default undefined\n         * @aspType int\n         */\n        set: function (value) {\n            if (value === this.topMarginIn) {\n                return;\n            }\n            this.topMarginIn = value;\n            this.notifyPropertyChanged('topMargin');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionCellFormat.prototype, \"bottomMargin\", {\n        /**\n         * Gets or Sets the bottom margin for selected cells.\n         * @default undefined\n         * @aspType int\n         */\n        get: function () {\n            return this.bottomMarginIn;\n        },\n        /**\n         * Gets or Sets the bottom margin for selected cells.\n         * @default undefined\n         * @aspType int\n         */\n        set: function (value) {\n            if (value === this.bottomMarginIn) {\n                return;\n            }\n            this.bottomMarginIn = value;\n            this.notifyPropertyChanged('bottomMargin');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionCellFormat.prototype, \"background\", {\n        /**\n         * Gets or Sets the background for selected cells.\n         * @default undefined\n         * @aspType string\n         */\n        get: function () {\n            return this.backgroundIn;\n        },\n        /**\n         * Gets or Sets the background for selected cells.\n         * @default undefined\n         * @aspType string\n         */\n        set: function (value) {\n            if (value === this.backgroundIn) {\n                return;\n            }\n            this.backgroundIn = value;\n            this.notifyPropertyChanged('background');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionCellFormat.prototype, \"preferredWidthType\", {\n        /**\n         * Gets or Sets the preferred width type for selected cells.\n         * @default undefined\n         */\n        get: function () {\n            return this.preferredWidthTypeIn;\n        },\n        /**\n         * Gets or Sets the preferred width type for selected cells.\n         * @default undefined\n         */\n        set: function (value) {\n            if (value === this.preferredWidthTypeIn) {\n                return;\n            }\n            this.preferredWidthTypeIn = value;\n            this.notifyPropertyChanged('preferredWidthType');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionCellFormat.prototype, \"preferredWidth\", {\n        /**\n         * Gets or Sets the preferred width  for selected cells.\n         * @default undefined\n         * @aspType int\n         */\n        get: function () {\n            return this.preferredWidthIn;\n        },\n        /**\n         * Gets or Sets the preferred width  for selected cells.\n         * @default undefined\n         * @aspType int\n         */\n        set: function (value) {\n            if (value === this.preferredWidthIn) {\n                return;\n            }\n            this.preferredWidthIn = value;\n            this.notifyPropertyChanged('preferredWidth');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    SelectionCellFormat.prototype.notifyPropertyChanged = function (propertyName) {\n        var selection = this.selection;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(selection)) {\n            if ((selection.isCleared || !selection.owner.isDocumentLoaded\n                || selection.owner.isReadOnlyMode || selection.owner.isPastingContent) && !selection.isRetrieveFormatting) {\n                return;\n            }\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(this.selection.start) && !this.selection.isRetrieveFormatting) {\n                var value = this.getPropertyValue(propertyName);\n                if (propertyName === 'background') {\n                    propertyName = 'shading';\n                }\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(value)) {\n                    this.selection.owner.editorModule.onApplyTableCellFormat(propertyName, value);\n                }\n            }\n        }\n    };\n    SelectionCellFormat.prototype.getPropertyValue = function (propertyName) {\n        switch (propertyName) {\n            case 'verticalAlignment':\n                return this.verticalAlignment;\n            case 'leftMargin':\n                return this.leftMargin;\n            case 'rightMargin':\n                return this.rightMargin;\n            case 'topMargin':\n                return this.topMargin;\n            case 'bottomMargin':\n                return this.bottomMargin;\n            case 'preferredWidth':\n                return this.preferredWidth;\n            case 'preferredWidthType':\n                return this.preferredWidthType;\n            case 'background':\n                var shading = new _format_index__WEBPACK_IMPORTED_MODULE_1__.WShading();\n                shading.backgroundColor = this.background;\n                return shading;\n            default:\n                return undefined;\n        }\n    };\n    /**\n     * Copies the format.\n     *\n     * @private\n     * @param {WCellFormat} format - Source Format to copy.\n     * @returns {void}\n     */\n    SelectionCellFormat.prototype.copyFormat = function (format) {\n        this.leftMargin = format.leftMargin;\n        this.rightMargin = format.rightMargin;\n        this.topMargin = format.topMargin;\n        this.bottomMargin = format.bottomMargin;\n        this.background = format.shading.backgroundColor;\n        if (format.shading.hasValue('foregroundColor') && format.shading.textureStyle !== 'TextureNone') {\n            this.background = format.shading.foregroundColor;\n        }\n        this.verticalAlignment = format.verticalAlignment;\n        this.preferredWidth = format.preferredWidth;\n        this.preferredWidthType = format.preferredWidthType;\n    };\n    /**\n     * Clears the format.\n     *\n     * @private\n     * @returns {void}\n     */\n    SelectionCellFormat.prototype.clearCellFormat = function () {\n        this.leftMargin = undefined;\n        this.rightMargin = undefined;\n        this.topMargin = undefined;\n        this.bottomMargin = undefined;\n        this.background = undefined;\n        this.verticalAlignment = undefined;\n    };\n    /**\n     * Combines the format.\n     *\n     * @param {WCellFormat} format - Returns cell format\n     * @private\n     */\n    SelectionCellFormat.prototype.combineFormat = function (format) {\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(this.leftMargin) && this.leftMargin !== format.leftMargin) {\n            this.leftMargin = undefined;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(this.topMargin) && this.topMargin !== format.topMargin) {\n            this.topMargin = undefined;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(this.rightMargin) && this.rightMargin !== format.rightMargin) {\n            this.rightMargin = undefined;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(this.bottomMargin) && this.bottomMargin !== format.bottomMargin) {\n            this.bottomMargin = undefined;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(this.background) && this.background !== format.shading.backgroundColor) {\n            this.background = undefined;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(this.verticalAlignment) && this.verticalAlignment !== format.verticalAlignment) {\n            this.verticalAlignment = undefined;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(this.preferredWidth) && this.preferredWidth !== format.preferredWidth) {\n            this.preferredWidth = undefined;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(this.preferredWidthType) && this.preferredWidthType !== format.preferredWidthType) {\n            this.preferredWidthType = undefined;\n        }\n    };\n    /**\n     * Clears the format.\n     *\n     * @private\n     * @returns {void}\n     */\n    SelectionCellFormat.prototype.clearFormat = function () {\n        this.background = undefined;\n        this.bottomMargin = 0;\n        this.leftMargin = 0;\n        this.rightMargin = 0;\n        this.topMargin = 0;\n        this.verticalAlignment = undefined;\n    };\n    /**\n     * Destroys the manages resources.\n     *\n     * @private\n     * @returns {void}\n     */\n    SelectionCellFormat.prototype.destroy = function () {\n        this.backgroundIn = undefined;\n        this.verticalAlignmentIn = undefined;\n        this.bottomMarginIn = undefined;\n        this.leftMarginIn = undefined;\n        this.rightMarginIn = undefined;\n        this.topMarginIn = undefined;\n        this.selection = undefined;\n    };\n    return SelectionCellFormat;\n}());\n\n/**\n * Selection row format implementation\n */\nvar SelectionRowFormat = /** @class */ (function () {\n    /**\n     * @param {Selection} selection - Specifies the selection\n     * @private\n     */\n    function SelectionRowFormat(selection) {\n        this.heightIn = undefined;\n        this.heightTypeIn = undefined;\n        this.isHeaderIn = undefined;\n        this.allowRowBreakAcrossPagesIn = undefined;\n        this.selection = selection;\n    }\n    Object.defineProperty(SelectionRowFormat.prototype, \"height\", {\n        /**\n         * Gets or Sets the height for selected rows.\n         *\n         * @default undefined\n         * @aspType int\n         * @returns {number} - Returns the height\n         */\n        get: function () {\n            return this.heightIn;\n        },\n        /**\n         * Gets or Sets the height for selected rows.\n         *\n         * @default undefined\n         * @aspType int\n         * @param {number} value - Specified the value\n         */\n        set: function (value) {\n            if (value === this.heightIn) {\n                return;\n            }\n            this.heightIn = value;\n            this.notifyPropertyChanged('height');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionRowFormat.prototype, \"heightType\", {\n        /**\n         * Gets or Sets the height type for selected rows.\n         *\n         * @default undefined\n         * @returns {HeightType} - Returns height type\n         */\n        get: function () {\n            return this.heightTypeIn;\n        },\n        /**\n         * Gets or Sets the height type for selected rows.\n         *\n         * @default undefined\n         * @param {HeightType} value - Specified the value\n         */\n        set: function (value) {\n            if (value === this.heightTypeIn) {\n                return;\n            }\n            this.heightTypeIn = value;\n            this.notifyPropertyChanged('heightType');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionRowFormat.prototype, \"isHeader\", {\n        /**\n         * Gets or Sets a value indicating whether the selected rows are header rows or not.\n         *\n         * @default undefined\n         * @aspType bool\n         * @returns {boolean} - Returns the is header\n         */\n        get: function () {\n            return this.isHeaderIn;\n        },\n        /**\n         * Gets or Sets a value indicating whether the selected rows are header rows or not.\n         *\n         * @default undefined\n         * @aspType bool\n         * @param {boolean} value - Specified the value\n         */\n        set: function (value) {\n            if (value === this.isHeaderIn) {\n                return;\n            }\n            this.isHeaderIn = value;\n            this.notifyPropertyChanged('isHeader');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionRowFormat.prototype, \"allowBreakAcrossPages\", {\n        /**\n         * Gets or Sets a value indicating whether to allow break across pages for selected rows.\n         *\n         * @default undefined\n         * @aspType bool\n         * @returns {boolean} - Returns the allow break across page\n         */\n        get: function () {\n            return this.allowRowBreakAcrossPagesIn;\n        },\n        /**\n         * Gets or Sets a value indicating whether to allow break across pages for selected rows.\n         *\n         * @default undefined\n         * @param {boolean} value - Specified the value\n         * @aspType bool\n         */\n        set: function (value) {\n            if (value === this.allowRowBreakAcrossPagesIn) {\n                return;\n            }\n            this.allowRowBreakAcrossPagesIn = value;\n            this.notifyPropertyChanged('allowBreakAcrossPages');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    SelectionRowFormat.prototype.notifyPropertyChanged = function (propertyName) {\n        var selection = this.selection;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(selection) && (selection.isCleared || selection.owner.isReadOnlyMode\n            || !selection.owner.isDocumentLoaded || selection.owner.isPastingContent) && !selection.isRetrieveFormatting) {\n            return;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(selection) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(selection.start) && !selection.isRetrieveFormatting) {\n            var value = this.getPropertyValue(propertyName);\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(value)) {\n                selection.owner.editorModule.onApplyTableRowFormat(propertyName, value);\n            }\n        }\n    };\n    SelectionRowFormat.prototype.getPropertyValue = function (propertyName) {\n        switch (propertyName) {\n            case 'height':\n                return this.height;\n            case 'heightType':\n                return this.heightType;\n            case 'isHeader':\n                return this.isHeader;\n            case 'allowBreakAcrossPages':\n                return this.allowBreakAcrossPages;\n            default:\n                return undefined;\n        }\n    };\n    /**\n     * Copies the format.\n     *\n     * @param {WRowFormat} format - Specified row format\n     * @private\n     * @returns {void}\n     */\n    SelectionRowFormat.prototype.copyFormat = function (format) {\n        this.height = format.height;\n        this.heightType = format.heightType;\n        this.allowBreakAcrossPages = format.allowBreakAcrossPages;\n        this.isHeader = format.isHeader;\n    };\n    /**\n     * Combines the format.\n     *\n     * @param {WRowFormat} format - Secifies row format\n     * @private\n     */\n    SelectionRowFormat.prototype.combineFormat = function (format) {\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(this.height) && this.height !== format.height) {\n            this.height = undefined;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(this.heightType) && this.heightType !== format.heightType) {\n            this.heightType = undefined;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(this.allowBreakAcrossPages) && this.allowBreakAcrossPages !== format.allowBreakAcrossPages) {\n            this.allowBreakAcrossPages = undefined;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(this.isHeader) && this.isHeader !== format.isHeader) {\n            this.isHeader = undefined;\n        }\n    };\n    /**\n     * Clears the row format.\n     *\n     * @private\n     * @returns {void}\n     */\n    SelectionRowFormat.prototype.clearRowFormat = function () {\n        this.height = undefined;\n        this.heightType = undefined;\n        this.allowBreakAcrossPages = undefined;\n        this.isHeader = undefined;\n    };\n    /**\n     * Clears the format.\n     *\n     * @private\n     * @returns {void}\n     */\n    SelectionRowFormat.prototype.clearFormat = function () {\n        this.height = 0;\n        this.heightType = undefined;\n        this.allowBreakAcrossPages = undefined;\n        this.isHeader = undefined;\n    };\n    /**\n     * Destroys the managed resources.\n     *\n     * @private\n     * @returns {void}\n     */\n    SelectionRowFormat.prototype.destroy = function () {\n        this.heightIn = undefined;\n        this.heightTypeIn = undefined;\n        this.allowRowBreakAcrossPagesIn = undefined;\n        this.isHeaderIn = undefined;\n        this.selection = undefined;\n    };\n    return SelectionRowFormat;\n}());\n\n/**\n * Selection image format implementation\n */\nvar SelectionImageFormat = /** @class */ (function () {\n    /**\n     * @param {Selection} selection - Specifies selecion module\n     * @private\n     */\n    function SelectionImageFormat(selection) {\n        this.selection = selection;\n    }\n    Object.defineProperty(SelectionImageFormat.prototype, \"width\", {\n        /**\n         * Gets the width of the image.\n         *\n         * @aspType int\n         * @returns {number} - Returns image width\n         */\n        get: function () {\n            if (this.image) {\n                return this.image.width;\n            }\n            return 0;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionImageFormat.prototype, \"height\", {\n        /**\n         * Gets the height of the image.\n         *\n         * @aspType int\n         * @returns {number} - Returns image height\n         */\n        get: function () {\n            if (this.image) {\n                return this.image.height;\n            }\n            return 0;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionImageFormat.prototype, \"alternateText\", {\n        /**\n         * Gets the alternateText of the image.\n         *\n         * @aspType string\n         * @returns {string} - Returns image alternateText\n         */\n        get: function () {\n            if (this.image) {\n                return this.image.alternateText;\n            }\n            return null;\n        },\n        /**\n         * Sets the alternateText of the image.\n         *\n         * @aspType string\n         * @returns {string} - Returns image alternateText\n         */\n        set: function (value) {\n            if (value === this.alternateText) {\n                return;\n            }\n            this.image.alternateText = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Resizes the image based on given size.\n     *\n     * @param {number} width - Specified the image width\n     * @param {number} height - Specifies the image height\n     * @private\n     * @returns {void}\n     */\n    SelectionImageFormat.prototype.resize = function (width, height) {\n        this.updateImageFormat(width, height, this.alternateText);\n    };\n    /**\n     * update the image based on given alternateText.\n     *\n     * @param {string} alternateText - Specified the image alternateText\n     * @private\n     * @returns {void}\n     */\n    SelectionImageFormat.prototype.applyImageAlternativeText = function (alternateText) {\n        this.updateImageFormat(this.width, this.height, alternateText);\n    };\n    /**\n     * Update image width and height\n     *\n     * @param {number} width - Specified the image width\n     * @param {number} height - Specifies the image height\n     * @param {string} alternateText - Specofies the image alternateText\n     * @private\n     * @returns {void}\n     */\n    SelectionImageFormat.prototype.updateImageFormat = function (width, height, alternateText) {\n        if (this.image) {\n            if (this.selection.owner.editorModule) {\n                this.selection.owner.editorModule.onImageFormat(this.image, width, height, alternateText);\n            }\n        }\n    };\n    /**\n     * @param {ImageElementBox} image - Specifies image element box\n     * @private\n     * @returns {void}\n     */\n    SelectionImageFormat.prototype.copyImageFormat = function (image) {\n        this.image = image;\n    };\n    /**\n     * @private\n     * @returns {void}\n     */\n    SelectionImageFormat.prototype.clearImageFormat = function () {\n        this.image = undefined;\n    };\n    return SelectionImageFormat;\n}());\n\n/**\n * Selection column format\n */\nvar SelectionColumnFormat = /** @class */ (function () {\n    /**\n     * @param selection\n     * @private\n     */\n    function SelectionColumnFormat(selection) {\n        this.widthIn = 0;\n        this.spaceIn = 0;\n        this.selection = selection;\n    }\n    /**\n     * Copies the format.\n     *\n     * @private\n     * @param {WColumnFormat} format - Source Format to copy.\n     * @returns {void}\n     */\n    SelectionColumnFormat.prototype.copyFormat = function (format) {\n        this.width = format.width;\n        this.space = format.space;\n    };\n    Object.defineProperty(SelectionColumnFormat.prototype, \"width\", {\n        /**\n         * Gets or sets the width of the column.\n         */\n        get: function () {\n            return this.widthIn;\n        },\n        /**\n         * Gets or sets the width of the column.\n         */\n        set: function (value) {\n            if (value === this.widthIn) {\n                return;\n            }\n            this.widthIn = value;\n            //this.notifyPropertyChanged('width');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionColumnFormat.prototype, \"space\", {\n        /**\n         * Gets or sets the space in between this column and next column.\n         */\n        get: function () {\n            return this.spaceIn;\n        },\n        /**\n         * Gets or sets the space in between this column and next column.\n         */\n        set: function (value) {\n            if (value === this.spaceIn) {\n                return;\n            }\n            this.spaceIn = value;\n            //this.notifyPropertyChanged('space');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    SelectionColumnFormat.prototype.getPropertyValue = function (property) {\n        switch (property) {\n            case 'space':\n                return this.space;\n            case 'width':\n                return this.width;\n            default:\n                return undefined;\n        }\n    };\n    SelectionColumnFormat.prototype.notifyPropertyChanged = function (propertyName) {\n        var selection = this.selection;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(selection)) {\n            this.selection.owner.editorModule.onApplyColumnFormat('columns', this.selection.sectionFormat.columns);\n        }\n    };\n    /**\n     * Clears the format.\n     *\n     * @private\n     * @returns {void}\n     */\n    SelectionColumnFormat.prototype.clearFormat = function () {\n        this.widthIn = 0;\n        this.spaceIn = 0;\n    };\n    /**\n     * Destroys the manages resources.\n     *\n     * @private\n     * @returns {void}\n     */\n    SelectionColumnFormat.prototype.destroy = function () {\n        this.widthIn = undefined;\n        this.spaceIn = undefined;\n    };\n    return SelectionColumnFormat;\n}());\n\n/* eslint-enable */\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-documenteditor/src/document-editor/implementation/selection/selection-format.js?");

/***/ })

}]);