"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkej2_vue_samples"] = self["webpackChunkej2_vue_samples"] || []).push([["chunk-vendors-node_modules_syncfusion_ej2-diagrams_src_diagram_utility_constraints-util_js-381799f8"],{

/***/ "./node_modules/@syncfusion/ej2-diagrams/src/diagram/utility/constraints-util.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-diagrams/src/diagram/utility/constraints-util.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   avoidDrawSelector: () => (/* binding */ avoidDrawSelector),\n/* harmony export */   canAllowDrop: () => (/* binding */ canAllowDrop),\n/* harmony export */   canApiInteract: () => (/* binding */ canApiInteract),\n/* harmony export */   canBridge: () => (/* binding */ canBridge),\n/* harmony export */   canContinuousDraw: () => (/* binding */ canContinuousDraw),\n/* harmony export */   canDelete: () => (/* binding */ canDelete),\n/* harmony export */   canDrag: () => (/* binding */ canDrag),\n/* harmony export */   canDragSegmentThumb: () => (/* binding */ canDragSegmentThumb),\n/* harmony export */   canDragSourceEnd: () => (/* binding */ canDragSourceEnd),\n/* harmony export */   canDragTargetEnd: () => (/* binding */ canDragTargetEnd),\n/* harmony export */   canDraw: () => (/* binding */ canDraw),\n/* harmony export */   canDrawOnce: () => (/* binding */ canDrawOnce),\n/* harmony export */   canDrawThumbs: () => (/* binding */ canDrawThumbs),\n/* harmony export */   canEnablePointerEvents: () => (/* binding */ canEnablePointerEvents),\n/* harmony export */   canEnableRouting: () => (/* binding */ canEnableRouting),\n/* harmony export */   canEnableToolTip: () => (/* binding */ canEnableToolTip),\n/* harmony export */   canInConnect: () => (/* binding */ canInConnect),\n/* harmony export */   canMove: () => (/* binding */ canMove),\n/* harmony export */   canMultiSelect: () => (/* binding */ canMultiSelect),\n/* harmony export */   canOutConnect: () => (/* binding */ canOutConnect),\n/* harmony export */   canPageEditable: () => (/* binding */ canPageEditable),\n/* harmony export */   canPan: () => (/* binding */ canPan),\n/* harmony export */   canPanX: () => (/* binding */ canPanX),\n/* harmony export */   canPanY: () => (/* binding */ canPanY),\n/* harmony export */   canPortInConnect: () => (/* binding */ canPortInConnect),\n/* harmony export */   canPortOutConnect: () => (/* binding */ canPortOutConnect),\n/* harmony export */   canPreventClearSelection: () => (/* binding */ canPreventClearSelection),\n/* harmony export */   canResize: () => (/* binding */ canResize),\n/* harmony export */   canRotate: () => (/* binding */ canRotate),\n/* harmony export */   canSelect: () => (/* binding */ canSelect),\n/* harmony export */   canShadow: () => (/* binding */ canShadow),\n/* harmony export */   canSingleSelect: () => (/* binding */ canSingleSelect),\n/* harmony export */   canUserInteract: () => (/* binding */ canUserInteract),\n/* harmony export */   canVitualize: () => (/* binding */ canVitualize),\n/* harmony export */   canZoom: () => (/* binding */ canZoom),\n/* harmony export */   canZoomPan: () => (/* binding */ canZoomPan),\n/* harmony export */   canZoomTextEdit: () => (/* binding */ canZoomTextEdit),\n/* harmony export */   defaultTool: () => (/* binding */ defaultTool),\n/* harmony export */   enableReadOnly: () => (/* binding */ enableReadOnly)\n/* harmony export */ });\n/* harmony import */ var _objects_node__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./../objects/node */ \"./node_modules/@syncfusion/ej2-diagrams/src/diagram/objects/node.js\");\n/* harmony import */ var _enum_enum__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../enum/enum */ \"./node_modules/@syncfusion/ej2-diagrams/src/diagram/enum/enum.js\");\n/* harmony import */ var _objects_connector__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./../objects/connector */ \"./node_modules/@syncfusion/ej2-diagrams/src/diagram/objects/connector.js\");\n/* harmony import */ var _objects_annotation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../objects/annotation */ \"./node_modules/@syncfusion/ej2-diagrams/src/diagram/objects/annotation.js\");\n/* harmony import */ var _objects_port__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../objects/port */ \"./node_modules/@syncfusion/ej2-diagrams/src/diagram/objects/port.js\");\n\n\n\n\n\n\n\n/**\n * constraints-util module contains the common constraints \\\n *\n * @returns { number }   constraints-util module contains the common constraints  .\\\n *\n * @param {ConnectorModel | NodeModel | PathAnnotationModel | ShapeAnnotationModel} node - Provide the DiagramElement value.\n * @private\n */\nfunction canSelect(node) {\n    if (node) {\n        var state = 0;\n        if ((node instanceof _objects_annotation__WEBPACK_IMPORTED_MODULE_3__.ShapeAnnotation) || (node instanceof _objects_annotation__WEBPACK_IMPORTED_MODULE_3__.PathAnnotation)) {\n            state = node.constraints & _enum_enum__WEBPACK_IMPORTED_MODULE_1__.AnnotationConstraints.Select;\n        }\n        else if (node instanceof _objects_connector__WEBPACK_IMPORTED_MODULE_2__.Connector) {\n            state = node.constraints & _enum_enum__WEBPACK_IMPORTED_MODULE_1__.ConnectorConstraints.Select;\n        }\n        else {\n            state = node.constraints & _enum_enum__WEBPACK_IMPORTED_MODULE_1__.NodeConstraints.Select;\n        }\n        return state;\n    }\n    return 1;\n}\n/**\n * Used to check whether we can move the objects ot not\\\n *\n * @returns { number }   Used to check whether we can move the objects ot not  .\\\n *\n * @param {ConnectorModel | NodeModel | PathAnnotationModel | ShapeAnnotationModel} node - Used to check whether we can move the objects ot not.\n * @private\n */\nfunction canMove(node) {\n    if (node) {\n        var state = 0;\n        if ((node instanceof _objects_annotation__WEBPACK_IMPORTED_MODULE_3__.ShapeAnnotation) || (node instanceof _objects_annotation__WEBPACK_IMPORTED_MODULE_3__.PathAnnotation)) {\n            state = node.constraints & _enum_enum__WEBPACK_IMPORTED_MODULE_1__.AnnotationConstraints.Drag;\n        }\n        else if (node instanceof _objects_connector__WEBPACK_IMPORTED_MODULE_2__.Connector) {\n            state = node.constraints & _enum_enum__WEBPACK_IMPORTED_MODULE_1__.ConnectorConstraints.Drag;\n        }\n        else if (node instanceof _objects_node__WEBPACK_IMPORTED_MODULE_0__.Selector) {\n            state = 1;\n        }\n        else {\n            state = node.constraints & _enum_enum__WEBPACK_IMPORTED_MODULE_1__.NodeConstraints.Drag;\n        }\n        return state;\n    }\n    return 1;\n}\n/**\n * Used to check the canEnablePointerEvents\\\n *\n * @returns { number }   Used to check whether we can move the objects ot not  .\\\n *\n * @param {ConnectorModel | NodeModel} node - Used to check whether we can move the objects ot not.\n * @param {Diagram} diagram - Used to check whether we can move the objects ot not.\n * @private\n */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nfunction canEnablePointerEvents(node, diagram) {\n    var state = 0;\n    if (node instanceof _objects_connector__WEBPACK_IMPORTED_MODULE_2__.Connector) {\n        state = node.constraints & _enum_enum__WEBPACK_IMPORTED_MODULE_1__.ConnectorConstraints.PointerEvents;\n    }\n    else {\n        state = node.constraints & _enum_enum__WEBPACK_IMPORTED_MODULE_1__.NodeConstraints.PointerEvents;\n    }\n    return state;\n}\n/**\n * Used to check the canDelete of the element \\\n *\n * @returns { number }   Used to check the canDelete of the element   .\\\n *\n * @param {ConnectorModel | NodeModel} node - Used to check whether we can move the objects ot not.\n * @private\n */\nfunction canDelete(node) {\n    var state = 0;\n    if (node instanceof _objects_connector__WEBPACK_IMPORTED_MODULE_2__.Connector) {\n        state = node.constraints & _enum_enum__WEBPACK_IMPORTED_MODULE_1__.ConnectorConstraints.Delete;\n    }\n    else {\n        state = node.constraints & _enum_enum__WEBPACK_IMPORTED_MODULE_1__.NodeConstraints.Delete;\n    }\n    return state;\n}\n/**\n * Used to check the bridging of the element \\\n *\n * @returns { number }   Used to check the bridging of the element   .\\\n *\n * @param {ConnectorModel | NodeModel} connector - provide the connector value.\n * @param {ConnectorModel | NodeModel} diagram - provide the diagram value.\n * @private\n */\nfunction canBridge(connector, diagram) {\n    var state = 0;\n    if (connector.constraints & _enum_enum__WEBPACK_IMPORTED_MODULE_1__.ConnectorConstraints.Bridging) {\n        state = connector.constraints & _enum_enum__WEBPACK_IMPORTED_MODULE_1__.ConnectorConstraints.Bridging;\n    }\n    else if (connector.constraints & _enum_enum__WEBPACK_IMPORTED_MODULE_1__.ConnectorConstraints.InheritBridging) {\n        state = diagram.constraints & _enum_enum__WEBPACK_IMPORTED_MODULE_1__.DiagramConstraints.Bridging;\n    }\n    else {\n        state = 0;\n    }\n    return state;\n}\n/**\n * Used to check the routing  of the element \\\n *\n * @returns { number }   Used to check the routing  of the element .\\\n *\n * @param {ConnectorModel | NodeModel} connector - provide the connector value.\n * @param {ConnectorModel | NodeModel} diagram - provide the diagram value.\n * @private\n */\nfunction canEnableRouting(connector, diagram) {\n    var state = 0;\n    if (connector.constraints & _enum_enum__WEBPACK_IMPORTED_MODULE_1__.ConnectorConstraints.LineRouting) {\n        state = connector.constraints & _enum_enum__WEBPACK_IMPORTED_MODULE_1__.ConnectorConstraints.LineRouting;\n    }\n    else if (connector.constraints & _enum_enum__WEBPACK_IMPORTED_MODULE_1__.ConnectorConstraints.InheritLineRouting) {\n        state = diagram.constraints & _enum_enum__WEBPACK_IMPORTED_MODULE_1__.DiagramConstraints.LineRouting;\n    }\n    return state;\n}\n/**\n * Used to check the  source end dragof the element \\\n *\n * @returns { number }   Used to check the  source end dragof the element. \\\n *\n * @param {ConnectorModel | NodeModel} connector - provide the connector value.\n * @private\n */\nfunction canDragSourceEnd(connector) {\n    return connector.constraints & _enum_enum__WEBPACK_IMPORTED_MODULE_1__.ConnectorConstraints.DragSourceEnd;\n}\n/**\n * Used to check the target end drag   of the element \\\n *\n * @returns { number }   Used to check the target end drag   of the element .\\\n *\n * @param {ConnectorModel | NodeModel} connector - provide the connector value.\n * @private\n */\nfunction canDragTargetEnd(connector) {\n    return connector.constraints & _enum_enum__WEBPACK_IMPORTED_MODULE_1__.ConnectorConstraints.DragTargetEnd;\n}\n/**\n * Used to check the segment  drag   of the element \\\n *\n * @returns { number }   Used to check the segment  drag   of the element .\\\n *\n * @param {ConnectorModel | NodeModel} connector - provide the connector value.\n * @private\n */\nfunction canDragSegmentThumb(connector) {\n    return connector.constraints & _enum_enum__WEBPACK_IMPORTED_MODULE_1__.ConnectorConstraints.DragSegmentThumb;\n}\n/**\n * Used to check the routing  drag   of the element \\\n *\n * @returns { number }   Used to check the segment  drag   of the element .\\\n *\n * @param {NodeModel | ShapeAnnotationModel | PathAnnotationModel} node - provide the connector value.\n * @private\n */\nfunction canRotate(node) {\n    if ((node instanceof _objects_annotation__WEBPACK_IMPORTED_MODULE_3__.ShapeAnnotation) || (node instanceof _objects_annotation__WEBPACK_IMPORTED_MODULE_3__.PathAnnotation)) {\n        return node.constraints & _enum_enum__WEBPACK_IMPORTED_MODULE_1__.AnnotationConstraints.Rotate;\n    }\n    else {\n        return node.constraints & _enum_enum__WEBPACK_IMPORTED_MODULE_1__.NodeConstraints.Rotate;\n    }\n}\n/**\n * Used to check shadown constraints   of the element \\\n *\n * @returns { number }   Used to check shadown constraints   of the element .\\\n *\n * @param {NodeModel} node - provide the connector value.\n * @private\n */\nfunction canShadow(node) {\n    return node.constraints & _enum_enum__WEBPACK_IMPORTED_MODULE_1__.NodeConstraints.Shadow;\n}\n/**\n * Used to check canInConnect constraints   of the element \\\n *\n * @returns { number }   Used to check canInConnect constraints   of the element .\\\n *\n * @param {NodeModel} node - provide the node value.\n * @private\n */\nfunction canInConnect(node) {\n    if ((node instanceof _objects_node__WEBPACK_IMPORTED_MODULE_0__.Node) && (node.constraints & _enum_enum__WEBPACK_IMPORTED_MODULE_1__.NodeConstraints.InConnect)) {\n        return node.constraints & _enum_enum__WEBPACK_IMPORTED_MODULE_1__.NodeConstraints.InConnect;\n    }\n    return 0;\n}\n/**\n * Used to check canPortInConnect constraints   of the element \\\n *\n * @returns { number }   Used to check canInConnect constraints   of the element .\\\n *\n * @param {PointPortModel} port - provide the PointPortModel value.\n * @private\n */\nfunction canPortInConnect(port) {\n    if (port && port.constraints) {\n        if (!(port.constraints & _enum_enum__WEBPACK_IMPORTED_MODULE_1__.PortConstraints.None) && (port.constraints & _enum_enum__WEBPACK_IMPORTED_MODULE_1__.PortConstraints.InConnect)) {\n            return port.constraints & _enum_enum__WEBPACK_IMPORTED_MODULE_1__.PortConstraints.InConnect;\n        }\n    }\n    return 0;\n}\n/**\n * Used to check canOutConnect constraints   of the element \\\n *\n * @returns { number }   Used to check canInConnect constraints   of the element .\\\n *\n * @param {NodeModel} node - provide the node value.\n * @private\n */\nfunction canOutConnect(node) {\n    if ((node instanceof _objects_node__WEBPACK_IMPORTED_MODULE_0__.Node) && (node.constraints & _enum_enum__WEBPACK_IMPORTED_MODULE_1__.NodeConstraints.OutConnect)) {\n        return node.constraints & _enum_enum__WEBPACK_IMPORTED_MODULE_1__.NodeConstraints.OutConnect;\n    }\n    return 0;\n}\n/**\n * Used to check canPortOutConnect constraints   of the element \\\n *\n * @returns { number }   Used to check canInConnect constraints   of the element .\\\n *\n * @param {PointPortModel} port - provide the node value.\n * @private\n */\nfunction canPortOutConnect(port) {\n    if (port && port.constraints) {\n        if (!(port.constraints & _enum_enum__WEBPACK_IMPORTED_MODULE_1__.PortConstraints.None) && (port.constraints & _enum_enum__WEBPACK_IMPORTED_MODULE_1__.PortConstraints.OutConnect)) {\n            return port.constraints & _enum_enum__WEBPACK_IMPORTED_MODULE_1__.PortConstraints.OutConnect;\n        }\n    }\n    return 0;\n}\n/**\n * Used to check canResize constraints   of the element \\\n *\n * @returns { number }   Used to check canInConnect constraints   of the element .\\\n *\n * @param {NodeModel | ShapeAnnotationModel | PathAnnotationModel} node - provide the node value.\n * @param {NodeModel | ShapeAnnotationModel | PathAnnotationModel} direction - provide the node value.\n * @private\n */\nfunction canResize(node, direction) {\n    var returnValue = 0;\n    if (node instanceof _objects_annotation__WEBPACK_IMPORTED_MODULE_3__.ShapeAnnotation || node instanceof _objects_annotation__WEBPACK_IMPORTED_MODULE_3__.PathAnnotation) {\n        returnValue = node.constraints & _enum_enum__WEBPACK_IMPORTED_MODULE_1__.AnnotationConstraints.Resize;\n    }\n    else if (node) {\n        if (direction === 'SouthEast') {\n            returnValue = node.constraints & _enum_enum__WEBPACK_IMPORTED_MODULE_1__.NodeConstraints.ResizeSouthEast;\n        }\n        else if (direction === 'East') {\n            returnValue = node.constraints & _enum_enum__WEBPACK_IMPORTED_MODULE_1__.NodeConstraints.ResizeEast;\n        }\n        else if (direction === 'NorthEast') {\n            returnValue = node.constraints & _enum_enum__WEBPACK_IMPORTED_MODULE_1__.NodeConstraints.ResizeNorthEast;\n        }\n        else if (direction === 'South') {\n            returnValue = node.constraints & _enum_enum__WEBPACK_IMPORTED_MODULE_1__.NodeConstraints.ResizeSouth;\n        }\n        else if (direction === 'North') {\n            returnValue = node.constraints & _enum_enum__WEBPACK_IMPORTED_MODULE_1__.NodeConstraints.ResizeNorth;\n        }\n        else if (direction === 'SouthWest') {\n            returnValue = node.constraints & _enum_enum__WEBPACK_IMPORTED_MODULE_1__.NodeConstraints.ResizeSouthWest;\n        }\n        else if (direction === 'West') {\n            returnValue = node.constraints & _enum_enum__WEBPACK_IMPORTED_MODULE_1__.NodeConstraints.ResizeWest;\n        }\n        else if (direction === 'NorthWest') {\n            returnValue = node.constraints & _enum_enum__WEBPACK_IMPORTED_MODULE_1__.NodeConstraints.ResizeNorthWest;\n        }\n    }\n    return returnValue;\n}\n/**\n * Used to check canAllowDrop constraints   of the element \\\n *\n * @returns { number }   Used to check canInConnect constraints   of the element .\\\n *\n * @param {ConnectorModel | NodeModel} node - provide the node value.\n * @private\n */\nfunction canAllowDrop(node) {\n    var state = 0;\n    if (node instanceof _objects_connector__WEBPACK_IMPORTED_MODULE_2__.Connector) {\n        state = node.constraints & _enum_enum__WEBPACK_IMPORTED_MODULE_1__.ConnectorConstraints.AllowDrop;\n    }\n    else {\n        state = node.constraints & _enum_enum__WEBPACK_IMPORTED_MODULE_1__.NodeConstraints.AllowDrop;\n    }\n    return state;\n}\n/**\n * Used to check canVitualize constraints   of the element \\\n *\n * @returns { number }   Used to check canInConnect constraints   of the element .\\\n *\n * @param {Diagram} diagram - provide the Diagram value.\n * @private\n */\nfunction canVitualize(diagram) {\n    return diagram.constraints & _enum_enum__WEBPACK_IMPORTED_MODULE_1__.DiagramConstraints.Virtualization;\n}\n/**\n * Used to check canEnableToolTip constraints   of the element \\\n *\n * @returns { number }   Used to check canInConnect constraints   of the element .\\\n *\n * @param {ConnectorModel | NodeModel} node - provide the node value.\n * @param {Diagram} diagram - provide the Diagram value.\n * @private\n */\nfunction canEnableToolTip(node, diagram) {\n    var state = 0;\n    if (node instanceof _objects_connector__WEBPACK_IMPORTED_MODULE_2__.Connector) {\n        if (node.constraints & _enum_enum__WEBPACK_IMPORTED_MODULE_1__.ConnectorConstraints.Tooltip) {\n            state = node.constraints & _enum_enum__WEBPACK_IMPORTED_MODULE_1__.ConnectorConstraints.Tooltip;\n        }\n        else if (node.constraints & _enum_enum__WEBPACK_IMPORTED_MODULE_1__.ConnectorConstraints.InheritTooltip) {\n            state = diagram.constraints & _enum_enum__WEBPACK_IMPORTED_MODULE_1__.DiagramConstraints.Tooltip;\n        }\n    }\n    else if (node instanceof _objects_port__WEBPACK_IMPORTED_MODULE_4__.PointPort || node instanceof _objects_port__WEBPACK_IMPORTED_MODULE_4__.PathPort) {\n        if (node.constraints & _enum_enum__WEBPACK_IMPORTED_MODULE_1__.PortConstraints.ToolTip) {\n            state = node.constraints & _enum_enum__WEBPACK_IMPORTED_MODULE_1__.PortConstraints.ToolTip;\n        }\n        else if (node.constraints & _enum_enum__WEBPACK_IMPORTED_MODULE_1__.PortConstraints.InheritTooltip) {\n            state = diagram.constraints & _enum_enum__WEBPACK_IMPORTED_MODULE_1__.DiagramConstraints.Tooltip;\n        }\n    }\n    else if (node instanceof _objects_annotation__WEBPACK_IMPORTED_MODULE_3__.ShapeAnnotation || node instanceof _objects_annotation__WEBPACK_IMPORTED_MODULE_3__.PathAnnotation) {\n        if (node.constraints & _enum_enum__WEBPACK_IMPORTED_MODULE_1__.AnnotationConstraints.Tooltip) {\n            state = node.constraints & _enum_enum__WEBPACK_IMPORTED_MODULE_1__.AnnotationConstraints.Tooltip;\n        }\n    }\n    else {\n        if (node.constraints & _enum_enum__WEBPACK_IMPORTED_MODULE_1__.NodeConstraints.Tooltip) {\n            state = node.constraints & _enum_enum__WEBPACK_IMPORTED_MODULE_1__.NodeConstraints.Tooltip;\n        }\n        else if (node.constraints & _enum_enum__WEBPACK_IMPORTED_MODULE_1__.NodeConstraints.InheritTooltip) {\n            state = diagram.constraints & _enum_enum__WEBPACK_IMPORTED_MODULE_1__.DiagramConstraints.Tooltip;\n        }\n    }\n    return state;\n}\n/**\n * Used to check canSingleSelect constraints   of the element \\\n *\n * @returns { number }   Used to check canInConnect constraints   of the element .\\\n *\n * @param {Diagram} model - provide the Diagram value.\n * @private\n */\nfunction canSingleSelect(model) {\n    return model.tool & _enum_enum__WEBPACK_IMPORTED_MODULE_1__.DiagramTools.SingleSelect;\n}\n/**\n * Used to check canMultiSelect constraints   of the element \\\n *\n * @returns { number }   Used to check canInConnect constraints   of the element .\\\n *\n * @param {Diagram} model - provide the Diagram value.\n * @private\n */\nfunction canMultiSelect(model) {\n    return model.tool & _enum_enum__WEBPACK_IMPORTED_MODULE_1__.DiagramTools.MultipleSelect;\n}\n/**\n * Used to check canZoomPan constraints   of the element \\\n *\n * @returns { number }   Used to check canInConnect constraints   of the element .\\\n *\n * @param {Diagram} model - provide the Diagram value.\n * @private\n */\nfunction canZoomPan(model) {\n    return model.tool & _enum_enum__WEBPACK_IMPORTED_MODULE_1__.DiagramTools.ZoomPan;\n}\n/**\n * Used to check canContinuousDraw constraints   of the element \\\n *\n * @returns { number }   Used to check canInConnect constraints   of the element .\\\n *\n * @param {Diagram} model - provide the Diagram value.\n * @private\n */\nfunction canContinuousDraw(model) {\n    return model.tool & _enum_enum__WEBPACK_IMPORTED_MODULE_1__.DiagramTools.ContinuousDraw;\n}\n/**\n * Used to check canDrawOnce constraints   of the element \\\n *\n * @returns { number }   Used to check canInConnect constraints   of the element .\\\n *\n * @param {Diagram} model - provide the Diagram value.\n * @private\n */\nfunction canDrawOnce(model) {\n    return model.tool & _enum_enum__WEBPACK_IMPORTED_MODULE_1__.DiagramTools.DrawOnce;\n}\n/**\n * Used to check defaultTool constraints   of the element \\\n *\n * @returns { number }   Used to check canInConnect constraints   of the element .\\\n *\n * @param {Diagram} model - provide the Diagram value.\n * @private\n */\nfunction defaultTool(model) {\n    return (model.tool & _enum_enum__WEBPACK_IMPORTED_MODULE_1__.DiagramTools.SingleSelect) || (model.tool & _enum_enum__WEBPACK_IMPORTED_MODULE_1__.DiagramTools.MultipleSelect);\n}\n/**\n * Used to check canZoom constraints   of the element \\\n *\n * @returns { number }   Used to check canInConnect constraints   of the element .\\\n *\n * @param {Diagram} model - provide the Diagram value.\n * @private\n */\nfunction canZoom(model) {\n    return model.constraints & _enum_enum__WEBPACK_IMPORTED_MODULE_1__.DiagramConstraints.Zoom;\n}\n/**\n * Used to check canPan constraints   of the element \\\n *\n * @returns { number }   Used to check canInConnect constraints   of the element .\\\n *\n * @param {Diagram} model - provide the Diagram value.\n * @private\n */\nfunction canPan(model) {\n    return model.constraints & _enum_enum__WEBPACK_IMPORTED_MODULE_1__.DiagramConstraints.Pan;\n}\n/**\n * Used to check canUserInteract constraints   of the element \\\n *\n * @returns { number }   Used to check canInConnect constraints   of the element .\\\n *\n * @param {Diagram} model - provide the Diagram value.\n * @private\n */\nfunction canUserInteract(model) {\n    return model.constraints & _enum_enum__WEBPACK_IMPORTED_MODULE_1__.DiagramConstraints.UserInteraction;\n}\n/**\n * Used to check canApiInteract constraints   of the element \\\n *\n * @returns { number }   Used to check canInConnect constraints   of the element .\\\n *\n * @param {Diagram} model - provide the Diagram value.\n * @private\n */\nfunction canApiInteract(model) {\n    return model.constraints & _enum_enum__WEBPACK_IMPORTED_MODULE_1__.DiagramConstraints.ApiUpdate;\n}\n/**\n * Used to check canPanX constraints   of the element \\\n *\n * @returns { number }   Used to check canInConnect constraints   of the element .\\\n *\n * @param {Diagram} model - provide the Diagram value.\n * @private\n */\nfunction canPanX(model) {\n    return ((model.constraints & _enum_enum__WEBPACK_IMPORTED_MODULE_1__.DiagramConstraints.PanX));\n}\n/**\n * Used to check canPanY constraints   of the element \\\n *\n * @returns { number }   Used to check canInConnect constraints   of the element .\\\n *\n * @param {Diagram} model - provide the Diagram value.\n * @private\n */\nfunction canPanY(model) {\n    return ((model.constraints & _enum_enum__WEBPACK_IMPORTED_MODULE_1__.DiagramConstraints.PanY));\n}\n/**\n * Used to check canZoomTextEdit constraints   of the element \\\n *\n * @returns { number }   Used to check canInConnect constraints   of the element .\\\n *\n * @param {Diagram} diagram - provide the Diagram value.\n * @private\n */\nfunction canZoomTextEdit(diagram) {\n    return ((diagram.constraints & _enum_enum__WEBPACK_IMPORTED_MODULE_1__.DiagramConstraints.ZoomTextEdit));\n}\n/**\n * Used to check canPageEditable constraints   of the element \\\n *\n * @returns { number }   Used to check canInConnect constraints   of the element .\\\n *\n * @param {Diagram} model - provide the Diagram value.\n * @private\n */\nfunction canPageEditable(model) {\n    return canApiInteract(model) || (model.diagramActions & _enum_enum__WEBPACK_IMPORTED_MODULE_1__.DiagramAction.ToolAction);\n}\n/**\n * Used to check enableReadOnly constraints   of the element \\\n *\n * @returns { number }   Used to check canInConnect constraints   of the element .\\\n *\n * @param {Diagram} annotation - provide the annotation value.\n * @param {Diagram} node - provide the node value.\n * @private\n */\nfunction enableReadOnly(annotation, node) {\n    var enumValue = 0;\n    enumValue = (node instanceof _objects_connector__WEBPACK_IMPORTED_MODULE_2__.Connector) ? _enum_enum__WEBPACK_IMPORTED_MODULE_1__.ConnectorConstraints.ReadOnly : _enum_enum__WEBPACK_IMPORTED_MODULE_1__.NodeConstraints.ReadOnly;\n    if (node.shape.type === 'Text') {\n        return node.constraints & _enum_enum__WEBPACK_IMPORTED_MODULE_1__.NodeConstraints.ReadOnly;\n    }\n    else if (node.constraints & enumValue) {\n        if (annotation.constraints & _enum_enum__WEBPACK_IMPORTED_MODULE_1__.AnnotationConstraints.InheritReadOnly) {\n            return 1;\n        }\n        else {\n            return 0;\n        }\n    }\n    else if (annotation.constraints & _enum_enum__WEBPACK_IMPORTED_MODULE_1__.AnnotationConstraints.ReadOnly) {\n        return 1;\n    }\n    return 0;\n}\n/**\n * Used to check canDraw constraints   of the element \\\n *\n * @returns { number }   Used to check canInConnect constraints   of the element .\\\n *\n * @param {PointPortModel | NodeModel} port - provide the Diagram value.\n * @param {Diagram} diagram - provide the Diagram value.\n * @private\n */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nfunction canDraw(port, diagram) {\n    return port.constraints & _enum_enum__WEBPACK_IMPORTED_MODULE_1__.PortConstraints.Draw;\n}\n/**\n * Used to check canDrag constraints   of the element \\\n *\n * @returns { number }   Used to check canInConnect constraints   of the element .\\\n *\n * @param {PointPortModel | NodeModel} port - provide the Diagram value.\n * @param {Diagram} diagram - provide the Diagram value.\n * @private\n */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nfunction canDrag(port, diagram) {\n    return port.constraints & _enum_enum__WEBPACK_IMPORTED_MODULE_1__.PortConstraints.Drag;\n}\n/**\n * Used to check canPreventClearSelection constraints   of the element \\\n *\n * @returns { boolean }   Used to check canInConnect constraints   of the element .\\\n *\n * @param {PointPortModel | NodeModel} diagramActions - provide the diagramActions value.\n * @private\n */\nfunction canPreventClearSelection(diagramActions) {\n    if (diagramActions & _enum_enum__WEBPACK_IMPORTED_MODULE_1__.DiagramAction.PreventClearSelection) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n/**\n * Used to check canDrawThumbs \\\n *\n * @returns { boolean }   Used to check canInConnect constraints   of the element .\\\n *\n * @param {RendererAction} rendererActions - provide the RendererAction value.\n * @private\n */\nfunction canDrawThumbs(rendererActions) {\n    if (!(rendererActions & _enum_enum__WEBPACK_IMPORTED_MODULE_1__.RendererAction.DrawSelectorBorder)) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n/**\n * Used to check avoidDrawSelector \\\n *\n * @returns { boolean }   Used to check canInConnect constraints   of the element .\\\n *\n * @param {RendererAction} rendererActions - provide the RendererAction value.\n * @private\n */\nfunction avoidDrawSelector(rendererActions) {\n    if ((rendererActions & _enum_enum__WEBPACK_IMPORTED_MODULE_1__.RendererAction.PreventRenderSelector)) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-diagrams/src/diagram/utility/constraints-util.js?");

/***/ })

}]);