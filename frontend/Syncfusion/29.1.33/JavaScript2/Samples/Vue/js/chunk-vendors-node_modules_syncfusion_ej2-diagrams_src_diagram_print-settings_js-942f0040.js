"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkej2_vue_samples"] = self["webpackChunkej2_vue_samples"] || []).push([["chunk-vendors-node_modules_syncfusion_ej2-diagrams_src_diagram_print-settings_js-942f0040"],{

/***/ "./node_modules/@syncfusion/ej2-diagrams/src/diagram/print-settings.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-diagrams/src/diagram/print-settings.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PrintAndExport: () => (/* binding */ PrintAndExport)\n/* harmony export */ });\n/* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @syncfusion/ej2-base */ \"./node_modules/@syncfusion/ej2-base/index.js\");\n/* harmony import */ var _rendering_canvas_renderer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./rendering/canvas-renderer */ \"./node_modules/@syncfusion/ej2-diagrams/src/diagram/rendering/canvas-renderer.js\");\n/* harmony import */ var _rendering_renderer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./rendering/renderer */ \"./node_modules/@syncfusion/ej2-diagrams/src/diagram/rendering/renderer.js\");\n/* harmony import */ var _primitives_size__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./primitives/size */ \"./node_modules/@syncfusion/ej2-diagrams/src/diagram/primitives/size.js\");\n/* harmony import */ var _enum_enum__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./enum/enum */ \"./node_modules/@syncfusion/ej2-diagrams/src/diagram/enum/enum.js\");\n/* harmony import */ var _utility_dom_util__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./utility/dom-util */ \"./node_modules/@syncfusion/ej2-diagrams/src/diagram/utility/dom-util.js\");\n/* harmony import */ var _primitives_rect__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./primitives/rect */ \"./node_modules/@syncfusion/ej2-diagrams/src/diagram/primitives/rect.js\");\n/* harmony import */ var _utility_diagram_util__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./utility/diagram-util */ \"./node_modules/@syncfusion/ej2-diagrams/src/diagram/utility/diagram-util.js\");\n/* harmony import */ var _core_elements_html_element__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./core/elements/html-element */ \"./node_modules/@syncfusion/ej2-diagrams/src/diagram/core/elements/html-element.js\");\n/* harmony import */ var _core_elements_native_element__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./core/elements/native-element */ \"./node_modules/@syncfusion/ej2-diagrams/src/diagram/core/elements/native-element.js\");\n/* harmony import */ var _core_appearance__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./core/appearance */ \"./node_modules/@syncfusion/ej2-diagrams/src/diagram/core/appearance.js\");\n/* eslint-disable jsdoc/require-param */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable @typescript-eslint/ban-types */\n/* eslint-disable valid-jsdoc */\n/* eslint-disable jsdoc/require-returns */\n/* eslint-disable @typescript-eslint/no-this-alias */\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar storeFormat;\n/**\n * Print and Export Settings\n */\nvar PrintAndExport = /** @class */ (function () {\n    function PrintAndExport(diagram) {\n        var _this = this;\n        this.printWindow = undefined;\n        //833683 - Method for closing the newly opened print window.\n        this.closePrintWindow = function () {\n            if (_this.printWindow && !_this.printWindow.closed) {\n                _this.printWindow.close();\n            }\n        };\n        this.diagram = diagram;\n    }\n    /**\n     * To Export the diagram\n     *\n     * @private\n     */\n    PrintAndExport.prototype.exportDiagram = function (options) {\n        var fileType;\n        var customBounds;\n        var content;\n        var content1 = '';\n        var data = 'data';\n        //let mode: string;\n        var buffers = [];\n        var margin = options.margin || {};\n        var region = options && options.region ? options.region : 'Content';\n        // isBlazor code removed\n        var mode = options && options.mode ? options.mode : 'Download';\n        var bounds = this.getDiagramBounds(region, options);\n        if (options.bounds) {\n            customBounds = true;\n            bounds.x = options.bounds.x ? options.bounds.x : bounds.x;\n            bounds.y = options.bounds.y ? options.bounds.y : bounds.y;\n            bounds.width = options.bounds.width || bounds.width;\n            bounds.height = options.bounds.height || bounds.height;\n        }\n        margin = {\n            top: margin.top !== undefined ? margin.top : 25,\n            bottom: margin.bottom !== undefined ? margin.bottom : 25,\n            right: margin.right !== undefined ? margin.right : 25,\n            left: margin.left !== undefined ? margin.left : 25\n        };\n        var nodes = this.diagram.nodes;\n        if (region !== 'PageSettings') {\n            bounds.x -= margin.left;\n            bounds.y -= margin.top;\n            bounds.width += margin.left + margin.right;\n            bounds.height += margin.top + margin.bottom;\n        }\n        var fileName = options.fileName || 'diagram';\n        if (options.format !== 'SVG') {\n            data = this.setCanvas(options, bounds, margin, mode, customBounds, region, fileName);\n            if (data !== null) {\n                return data;\n            }\n        }\n        else {\n            fileType = options.format;\n            options.bounds = bounds;\n            options.margin = margin;\n            var svg = content = this.diagramAsSvg(options, margin);\n            if (mode === 'Data') {\n                // isBlazor code removed\n                return content;\n            }\n            var buffer = new XMLSerializer().serializeToString(svg);\n            buffers.push(buffer);\n        }\n        if (mode === 'Download' && data !== null) {\n            var browserInfo = void 0;\n            // Ensure this for Safari\n            // if (Browser.info.name === 'msie' && Number(Browser.info.version) < 10 || Browser.info.name === 'webkit') {\n            //     let info: string = Browser.info.name === 'webkit' ? 'Safari' : 'IE-9';\n            //     alert('Downloading option is not supported in ' + info + ', Please use the returned data');\n            //     return content;\n            // } else {\n            for (var b = 0; b < buffers.length; b++) {\n                var blob = new Blob([buffers[parseInt(b.toString(), 10)]], { type: 'application/octet-stream' });\n                if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.info.name === 'msie') {\n                    window.navigator.msSaveOrOpenBlob(blob, fileName + '.' + fileType);\n                }\n                else {\n                    var pom = (0,_utility_dom_util__WEBPACK_IMPORTED_MODULE_5__.createHtmlElement)('a', { 'download': fileName + '.' + fileType });\n                    var url = URL.createObjectURL(blob);\n                    pom.href = url;\n                    var e = document.createEvent('MouseEvents');\n                    e.initMouseEvent('click', true, true, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null);\n                    pom.dispatchEvent(e);\n                }\n            }\n        }\n        return null;\n    };\n    PrintAndExport.prototype.setCanvas = function (options, bounds, margin, mode, customBounds, region, fileName) {\n        var content;\n        options.bounds = bounds;\n        options.region = region;\n        var scaleX = 'scaleX';\n        var scaleY = 'scaleY';\n        var scaleOffsetX = 'scaleOffsetX';\n        var scaleOffsetY = 'scaleOffsetY';\n        this.setScaleValueforCanvas(options, bounds);\n        var canvas = this.diagramAsCanvas({\n            bounds: bounds, margin: margin, region: region, scaleX: options[\"\" + scaleX],\n            scaleY: options[\"\" + scaleY], scaleOffsetX: options[\"\" + scaleOffsetX], scaleOffsetY: options[\"\" + scaleOffsetY]\n        }, customBounds);\n        var image;\n        if (options.format === 'JPG') {\n            image = content = storeFormat = canvas.toDataURL('image/jpeg');\n        }\n        else if (options.format === 'BMP') {\n            image = content = storeFormat = canvas.toDataURL('image/bmp');\n        }\n        else {\n            image = content = storeFormat = canvas.toDataURL();\n        }\n        if (mode === 'Data') {\n            return content;\n        }\n        this.canvasMultiplePage(options, canvas, margin, image, fileName);\n        return null;\n    };\n    PrintAndExport.prototype.canvasMultiplePage = function (options, canvas, margin, image, fileName) {\n        var _this = this;\n        var images = [];\n        var imageData = image.substring(image.indexOf(':') + 1, image.indexOf(';'));\n        var imageFormat = imageData.substring(imageData.indexOf('/') + 1);\n        if (imageFormat === 'jpeg') {\n            imageFormat = undefined;\n        }\n        else {\n            imageFormat = imageFormat.toUpperCase();\n        }\n        var fileType = imageFormat || 'JPG';\n        if (options.multiplePage) {\n            options.pageHeight = options.pageHeight ? options.pageHeight : this.diagram.pageSettings.height;\n            options.pageWidth = options.pageWidth ? options.pageWidth : this.diagram.pageSettings.width;\n            options.pageHeight = options.pageHeight ? options.pageHeight : canvas.width;\n            options.pageWidth = options.pageWidth ? options.pageWidth : canvas.height;\n            margin = options.margin || {};\n            if (options.pageOrientation) {\n                if ((options.pageOrientation === 'Landscape' && options.pageHeight > options.pageWidth) ||\n                    options.pageOrientation === 'Portrait' && options.pageWidth > options.pageHeight) {\n                    var temp = options.pageWidth;\n                    options.pageWidth = options.pageHeight;\n                    options.pageHeight = temp;\n                }\n            }\n            options.margin = {\n                top: !isNaN(margin.top) ? margin.top : 0,\n                bottom: !isNaN(margin.bottom) ? margin.bottom : 0,\n                left: !isNaN(margin.left) ? margin.left : 0,\n                right: !isNaN(margin.right) ? margin.right : 0\n            };\n            var attr = {\n                'id': this.diagram.element.id + '_printImage',\n                'src': image\n            };\n            var img_1 = (0,_utility_dom_util__WEBPACK_IMPORTED_MODULE_5__.createHtmlElement)('img', attr);\n            img_1.onload = function () {\n                images = _this.getMultipleImage(img_1, options, true);\n                _this.exportImage(images, fileName, fileType, image);\n            };\n        }\n        else {\n            images = [image];\n            this.exportImage(images, fileName, fileType, image);\n        }\n    };\n    PrintAndExport.prototype.exportImage = function (images, fileName, fileType, image) {\n        var buffers = [];\n        var length = (!(images instanceof HTMLElement)) ? images.length : 0;\n        for (var g = 0; g < length; g++) {\n            image = images[parseInt(g.toString(), 10)];\n            image = image.replace(/^data:[a-z]*;,/, '');\n            var image1 = image.split(',');\n            var byteString = atob(image1[1]);\n            var buffer = new ArrayBuffer(byteString.length);\n            var intArray = new Uint8Array(buffer);\n            for (var i = 0; i < byteString.length; i++) {\n                intArray[parseInt(i.toString(), 10)] = byteString.charCodeAt(i);\n            }\n            buffers.push(buffer);\n        }\n        var _loop_1 = function (j) {\n            var b = new Blob([buffers[parseInt(j.toString(), 10)]], { type: 'application/octet-stream' });\n            if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.info.name === 'msie') {\n                window.navigator.msSaveOrOpenBlob(b, fileName + '.' + fileType);\n            }\n            else {\n                var htmlElement_1 = (0,_utility_dom_util__WEBPACK_IMPORTED_MODULE_5__.createHtmlElement)('a', { 'download': fileName + '.' + fileType });\n                var urlLink = URL.createObjectURL(b);\n                htmlElement_1.href = urlLink;\n                var mouseEvent_1 = document.createEvent('MouseEvents');\n                mouseEvent_1.initMouseEvent('click', true, true, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null);\n                setTimeout(function () {\n                    htmlElement_1.dispatchEvent(mouseEvent_1);\n                }, ((j + 1) * 5));\n            }\n        };\n        // Ensure this for safari\n        // if (Browser.info.name === 'msie' && Number(Browser.info.version) < 10 || Browser.info.name === 'webkit') {\n        //     let browserInfo: string = Browser.info.name === 'webkit' ? 'Safari' : 'IE-9';\n        //     alert('Downloading option is not supported in ' + browserInfo + ', Please use the returned data');\n        //     return content;\n        // } else {\n        for (var j = 0; j < buffers.length; j++) {\n            _loop_1(j);\n        }\n    };\n    /**   @private  */\n    PrintAndExport.prototype.getObjectsBound = function (options) {\n        var nodes = this.diagram.nodes;\n        var nodebounds;\n        for (var _i = 0, nodes_1 = nodes; _i < nodes_1.length; _i++) {\n            var node = nodes_1[_i];\n            if (node.visible) {\n                if (((options.format !== 'SVG' && !(node instanceof _core_elements_native_element__WEBPACK_IMPORTED_MODULE_9__.DiagramNativeElement) && !(node instanceof _core_elements_html_element__WEBPACK_IMPORTED_MODULE_8__.DiagramHtmlElement))\n                    || (options.format === 'SVG' && !(node instanceof _core_elements_html_element__WEBPACK_IMPORTED_MODULE_8__.DiagramHtmlElement)))) {\n                    if (!nodebounds) {\n                        nodebounds = node.wrapper.outerBounds;\n                    }\n                    else {\n                        nodebounds = nodebounds.uniteRect(node.wrapper.outerBounds);\n                    }\n                }\n            }\n        }\n        var connectors = this.diagram.connectors;\n        for (var _a = 0, connectors_1 = connectors; _a < connectors_1.length; _a++) {\n            var connector = connectors_1[_a];\n            if (connector.visible) {\n                if (!nodebounds) {\n                    nodebounds = connector.wrapper.outerBounds;\n                }\n                else {\n                    nodebounds = nodebounds.uniteRect(connector.wrapper.outerBounds);\n                }\n            }\n        }\n        return nodebounds || new _primitives_rect__WEBPACK_IMPORTED_MODULE_6__.Rect(0, 0, 0, 0);\n    };\n    /**   @private  */\n    PrintAndExport.prototype.getDiagramBounds = function (mode, options) {\n        var rect = this.getObjectsBound(options);\n        var left = rect.left;\n        var top = rect.top;\n        var right = rect.right - rect.left;\n        var bottom = rect.bottom - rect.top;\n        if (mode !== 'Content') {\n            if (this.diagram.pageSettings && this.diagram.pageSettings.multiplePage) {\n                left = rect.left;\n                top = rect.top;\n                if (this.diagram.pageSettings.width) {\n                    left = Math.floor(left / this.diagram.pageSettings.width) * this.diagram.pageSettings.width;\n                    right = Math.ceil(rect.right / this.diagram.pageSettings.width) * this.diagram.pageSettings.width - left;\n                }\n                if (this.diagram.pageSettings.height) {\n                    top = Math.floor(top / this.diagram.pageSettings.height) * this.diagram.pageSettings.height;\n                    bottom = Math.ceil(rect.bottom / this.diagram.pageSettings.height) * this.diagram.pageSettings.height - top;\n                }\n                if ((rect.width === 0) && this.diagram.pageSettings.width !== null) {\n                    right = this.diagram.pageSettings.width;\n                }\n                if ((rect.height === 0) && this.diagram.pageSettings.height !== null) {\n                    bottom = this.diagram.pageSettings.height;\n                }\n            }\n            else {\n                if (this.diagram.pageSettings.width) {\n                    left = 0;\n                    right = this.diagram.pageSettings.width;\n                }\n                if (this.diagram.pageSettings.height) {\n                    top = 0;\n                    bottom = this.diagram.pageSettings.height;\n                }\n            }\n        }\n        //884801-After zooming and exporting the HTML content, the scroll Padding value is not considered\n        if (this.diagram.scrollSettings.padding) {\n            var scrollpadding = this.diagram.scrollSettings.padding;\n            left -= scrollpadding.left;\n            top -= scrollpadding.top;\n            right += (scrollpadding.left + scrollpadding.right);\n            bottom += (scrollpadding.top + scrollpadding.bottom);\n        }\n        var svgBounds = new _primitives_rect__WEBPACK_IMPORTED_MODULE_6__.Rect();\n        svgBounds.x = left;\n        svgBounds.y = top;\n        svgBounds.width = right;\n        svgBounds.height = bottom;\n        return svgBounds;\n    };\n    PrintAndExport.prototype.setScaleValueforCanvas = function (options, bounds) {\n        var scaleX = 'scaleX';\n        var scaleY = 'scaleY';\n        var scaleOffsetX = 'scaleOffsetX';\n        var scaleOffsetY = 'scaleOffsetY';\n        options[\"\" + scaleX] = 1;\n        options[\"\" + scaleY] = 1;\n        options[\"\" + scaleOffsetX] = 0;\n        options[\"\" + scaleOffsetY] = 0;\n        options.pageHeight = options.pageHeight || this.diagram.pageSettings.height;\n        options.pageWidth = options.pageWidth || this.diagram.pageSettings.width;\n        var pageOrientation = options.pageOrientation || this.diagram.pageSettings.orientation;\n        if (!pageOrientation) {\n            pageOrientation = 'Portrait';\n        }\n        if (pageOrientation === 'Portrait') {\n            if (options.pageWidth > options.pageHeight) {\n                var temp = options.pageHeight;\n                options.pageHeight = options.pageWidth;\n                options.pageWidth = temp;\n            }\n        }\n        else {\n            if (options.pageHeight > options.pageWidth) {\n                var temp = options.pageWidth;\n                options.pageWidth = options.pageHeight;\n                options.pageHeight = temp;\n            }\n        }\n        if (options.pageWidth && options.pageHeight && !options.multiplePage) {\n            options.stretch = 'Meet';\n        }\n        var height = options.pageHeight || bounds.height;\n        var width = options.pageWidth || bounds.width;\n        if (options.stretch === 'Stretch' || options.stretch === 'Meet' || options.stretch === 'Slice') {\n            options[\"\" + scaleX] = width / bounds.width;\n            options[\"\" + scaleY] = height / bounds.height;\n            if (options.stretch === 'Meet') {\n                options[\"\" + scaleX] = options[\"\" + scaleY] = Math.min(options[\"\" + scaleX], options[\"\" + scaleY]);\n                options[\"\" + scaleOffsetY] = (options.pageHeight - bounds.height * options[\"\" + scaleX]) / 2;\n                options[\"\" + scaleOffsetX] = (options.pageWidth - bounds.width * options[\"\" + scaleX]) / 2;\n            }\n            else if (options.stretch === 'Slice') {\n                options[\"\" + scaleX] = options[\"\" + scaleY] = Math.max(options[\"\" + scaleX], options[\"\" + scaleY]);\n            }\n            bounds.width = width;\n            bounds.height = height;\n        }\n        bounds.x *= options[\"\" + scaleX];\n        bounds.y *= options[\"\" + scaleY];\n    };\n    PrintAndExport.prototype.diagramAsSvg = function (options, margin) {\n        var svg = this.diagram.createSvg(this.diagram.element.id + '_diagram_svg', options.bounds.width, options.bounds.height);\n        document.body.appendChild(svg);\n        var g = (0,_utility_dom_util__WEBPACK_IMPORTED_MODULE_5__.createSvgElement)('g', { 'id': this.diagram.element.id + '_pageBackground' });\n        var region = options && options.region ? options.region : 'Content';\n        var bounds = this.getDiagramBounds(region, options);\n        var left = bounds.x;\n        var top = bounds.y;\n        var width = bounds.width;\n        var height = bounds.height;\n        svg.appendChild(g);\n        var attr = {\n            'x': String(left),\n            'y': String(top), 'width': String(width), 'height': String(height)\n        };\n        (0,_utility_dom_util__WEBPACK_IMPORTED_MODULE_5__.setAttributeSvg)(g, attr);\n        this.setTransform(g, options.bounds, margin);\n        var gradient = document.getElementById(this.diagram.element.id + 'gradient_pattern');\n        if (gradient) {\n            // 914031: Export function breaks gradient background of nodes in the diagram\n            svg.appendChild(gradient.cloneNode(true));\n        }\n        attr = {\n            'x': String(left),\n            'y': String(top), 'width': String(width + margin.left + margin.right), 'height': String(height + margin.top + margin.bottom)\n        };\n        var backimage = document.getElementById(this.diagram.element.id + '_backgroundImageLayer').cloneNode(true);\n        (0,_utility_dom_util__WEBPACK_IMPORTED_MODULE_5__.setAttributeSvg)(backimage, attr);\n        svg.appendChild(backimage);\n        this.setTransform(backimage, bounds, margin);\n        var backRect = document.getElementById(this.diagram.element.id + '_backgroundLayerrect').cloneNode(true);\n        (0,_utility_dom_util__WEBPACK_IMPORTED_MODULE_5__.setAttributeSvg)(backRect, attr);\n        svg.appendChild(backRect);\n        this.setTransform(backRect, bounds, margin);\n        if (this.diagram.mode === 'SVG') {\n            var element = void 0;\n            var i = void 0;\n            var diagramLayerSVG = (0,_utility_dom_util__WEBPACK_IMPORTED_MODULE_5__.getDiagramLayerSvg)(this.diagram.element.id);\n            svg.appendChild(diagramLayerSVG.getElementById(this.diagram.diagramLayer.id).cloneNode(true));\n            for (i = 0; i < svg.childNodes.length; i++) {\n                element = svg.childNodes[parseInt(i.toString(), 10)];\n                if (element.id === this.diagram.element.id + '_diagramLayer') {\n                    this.setTransform(element, bounds, margin);\n                }\n            }\n        }\n        else {\n            g = (0,_utility_dom_util__WEBPACK_IMPORTED_MODULE_5__.createSvgElement)('g', { 'id': this.diagram.element.id + '_diagramLayer' });\n            svg.appendChild(g);\n            this.setTransform(g, options.bounds, margin);\n            //renderLabels\n            var renderer = new _rendering_renderer__WEBPACK_IMPORTED_MODULE_2__.DiagramRenderer('', null, true);\n            var htmlLayer = (0,_utility_dom_util__WEBPACK_IMPORTED_MODULE_5__.getHTMLLayer)(this.diagram.element.id);\n            this.diagram.renderDiagramElements(svg, renderer, htmlLayer, false);\n        }\n        document.body.removeChild(svg);\n        return svg;\n    };\n    PrintAndExport.prototype.setTransform = function (element, bounds, margin) {\n        element.setAttribute('transform', 'translate(' + (-bounds.x + margin.left) + ', ' +\n            (-bounds.y + margin.top) + ')');\n    };\n    PrintAndExport.prototype.diagramAsCanvas = function (options, customBounds) {\n        var scaleX = 'scaleX';\n        var scaleY = 'scaleY';\n        var scaleOffsetX = 'scaleOffsetX';\n        var scaleOffsetY = 'scaleOffsetY';\n        var element;\n        var elements = [];\n        var region = options.bounds;\n        var margin = options.margin;\n        var mode = options.region;\n        var pageBounds = this.getDiagramBounds(mode, options);\n        var bgColor = this.diagram.pageSettings.background.color;\n        var canvas = _rendering_canvas_renderer__WEBPACK_IMPORTED_MODULE_1__.CanvasRenderer.createCanvas(this.diagram.element.id + '_diagram', options.bounds.width, options.bounds.height);\n        //canvas.setAttribute('style', 'position:absolute;top:135px;left:160px;');\n        var context = canvas.getContext('2d');\n        context.translate(-region.x, -region.y);\n        context.save();\n        context.fillStyle = (this.diagram.pageSettings.background.color === 'transparent') ? 'white' :\n            this.diagram.pageSettings.background.color;\n        region = mode === 'Content' ? pageBounds : region;\n        context.fillRect(region.x, region.y, region.width, region.height);\n        var bgImg = this.diagram.pageSettings.background;\n        if (bgImg && bgImg.source) {\n            pageBounds = this.getDiagramBounds(mode, options);\n            var image = new Image();\n            image.src = bgImg.source;\n            var proportionX = pageBounds.width / image.width;\n            var proportionY = pageBounds.height / image.height;\n            var x = pageBounds.x;\n            var y = pageBounds.y;\n            var width = pageBounds.width;\n            var height = pageBounds.height;\n            var exportable = this.isImageExportable(bgImg);\n            if (bgImg.scale !== 'None' && bgImg.align !== 'None') {\n                var proportion = bgImg.scale === 'Meet' ? Math.min(proportionX, proportionY) : Math.max(proportionX, proportionY);\n                width = proportion * image.width;\n                height = proportion * image.height;\n                if (bgImg.align.indexOf('xmid') > -1) {\n                    x += (pageBounds.width - width) / 2;\n                }\n                else if (bgImg.align.indexOf('xmax') > -1) {\n                    x = x + pageBounds.width - width;\n                }\n                if (bgImg.align.indexOf('ymid') > -1) {\n                    y += (pageBounds.height - height) / 2;\n                }\n                else if (bgImg.align.indexOf('ymax') > -1) {\n                    y = y + pageBounds.height - height;\n                }\n                if (this.diagram.pageSettings.background.color === 'none' || this.diagram.pageSettings.background.color === 'transparent') {\n                    context.fillStyle = 'white';\n                    context.fillRect(pageBounds.x * options[\"\" + scaleX], pageBounds.y * options[\"\" + scaleY], pageBounds.width * options[\"\" + scaleX], pageBounds.height * options[\"\" + scaleY]);\n                }\n                if (exportable) {\n                    context.drawImage(image, x, y, proportion * image.width, proportion * image.height);\n                }\n            }\n            else if (exportable) {\n                context.drawImage(image, x, y, pageBounds.width, pageBounds.height);\n            }\n        }\n        else {\n            context.fillStyle = bgColor === 'transparent' ? 'white' : bgColor;\n            context.fillRect((pageBounds.x * options[\"\" + scaleX]) - margin.left, (pageBounds.y * options[\"\" + scaleY]) - margin.top, (pageBounds.width * options[\"\" + scaleX]) + margin.left + margin.right, (options[\"\" + scaleY] * pageBounds.height) + margin.top + margin.bottom);\n        }\n        var brColor = this.diagram.pageSettings.background.color;\n        var brWidth = this.diagram.pageSettings.width;\n        if (brWidth) {\n            context.strokeStyle = brColor === 'none' ? 'transparent' : brColor;\n            context.lineWidth = brWidth;\n            context.strokeRect(pageBounds.x * options[\"\" + scaleX], pageBounds.y * options[\"\" + scaleY], pageBounds.width * options[\"\" + scaleX], pageBounds.height * options[\"\" + scaleY]);\n        }\n        context.restore();\n        var htmlLayer = (0,_utility_dom_util__WEBPACK_IMPORTED_MODULE_5__.getHTMLLayer)(this.diagram.element.id);\n        var renderer = new _rendering_renderer__WEBPACK_IMPORTED_MODULE_2__.DiagramRenderer('', null, false);\n        this.updateObjectValue(options[\"\" + scaleX], options[\"\" + scaleOffsetX], options[\"\" + scaleOffsetY], true);\n        this.diagram.renderDiagramElements(canvas, renderer, htmlLayer, false, true);\n        this.updateObjectValue(options[\"\" + scaleX], options[\"\" + scaleOffsetX], options[\"\" + scaleOffsetY], false);\n        return canvas;\n    };\n    PrintAndExport.prototype.updateWrapper = function (canvas, value, scaleOffsetX, scaleOffsetY, isExport) {\n        if (canvas && canvas.length > 0) {\n            for (var j = 0; j < canvas.length; j++) {\n                if (canvas[parseInt(j.toString(), 10)].children) {\n                    this.updateWrapper(canvas[parseInt(j.toString(), 10)].children, value, scaleOffsetX, scaleOffsetY, isExport);\n                }\n                canvas[parseInt(j.toString(), 10)].exportScaleValue.x = value;\n                canvas[parseInt(j.toString(), 10)].exportScaleValue.y = value;\n                canvas[parseInt(j.toString(), 10)].exportScaleOffset.x = scaleOffsetX;\n                canvas[parseInt(j.toString(), 10)].exportScaleOffset.y = scaleOffsetY;\n                canvas[parseInt(j.toString(), 10)].isExport = isExport;\n            }\n        }\n    };\n    PrintAndExport.prototype.scaleGradientValue = function (node, scaleValue, isExport) {\n        if (node.style.gradient.stops.length > 0) {\n            var gradients = node.style.gradient;\n            if (node.style.gradient instanceof _core_appearance__WEBPACK_IMPORTED_MODULE_10__.LinearGradient) {\n                gradients.x1 = isExport ? gradients.x1 * scaleValue : gradients.x1 / scaleValue;\n                gradients.y1 = isExport ? gradients.y1 * scaleValue : gradients.y1 / scaleValue;\n                gradients.x2 = isExport ? gradients.x2 * scaleValue : gradients.x2 / scaleValue;\n                gradients.y2 = isExport ? gradients.y2 * scaleValue : gradients.y2 / scaleValue;\n            }\n            else {\n                gradients.fx = isExport ? gradients.fx * scaleValue : gradients.fx / scaleValue;\n                gradients.fy = isExport ? gradients.fy * scaleValue : gradients.fy / scaleValue;\n                gradients.cx = isExport ? gradients.cx * scaleValue : gradients.cx / scaleValue;\n                gradients.cy = isExport ? gradients.cy * scaleValue : gradients.cy / scaleValue;\n                gradients.r = isExport ? gradients.r * scaleValue : gradients.r / scaleValue;\n            }\n        }\n    };\n    PrintAndExport.prototype.updateObjectValue = function (value, scaleOffsetX, scaleOffsetY, isExport) {\n        var wrapper;\n        for (var i = 0; i < this.diagram.nodes.length; i++) {\n            wrapper = this.diagram.nodes[parseInt(i.toString(), 10)].wrapper;\n            this.scaleGradientValue(this.diagram.nodes[parseInt(i.toString(), 10)], value, isExport);\n            this.updateWrapper(wrapper.children, value, scaleOffsetX, scaleOffsetY, isExport);\n            wrapper.exportScaleValue.x = value;\n            wrapper.exportScaleValue.y = value;\n            wrapper.exportScaleOffset.x = scaleOffsetX;\n            wrapper.exportScaleOffset.y = scaleOffsetY;\n            wrapper.isExport = isExport;\n        }\n        for (var j = 0; j < this.diagram.connectors.length; j++) {\n            wrapper = this.diagram.connectors[parseInt(j.toString(), 10)].wrapper;\n            for (var k = 0; k < wrapper.children.length; k++) {\n                wrapper.children[parseInt(k.toString(), 10)].isExport = isExport;\n                if (isExport) {\n                    wrapper.children[parseInt(k.toString(), 10)].exportScaleValue.x = value;\n                    wrapper.children[parseInt(k.toString(), 10)].exportScaleValue.y = value;\n                    wrapper.children[parseInt(k.toString(), 10)].exportScaleOffset.x = scaleOffsetX;\n                    wrapper.children[parseInt(k.toString(), 10)].exportScaleOffset.y = scaleOffsetY;\n                }\n            }\n        }\n    };\n    PrintAndExport.prototype.isImageExportable = function (backgroundImage) {\n        var state = true;\n        var content;\n        var canvas;\n        if (backgroundImage.source) {\n            try {\n                canvas = _rendering_canvas_renderer__WEBPACK_IMPORTED_MODULE_1__.CanvasRenderer.createCanvas(this.diagram.element.id + 'temp_canvas', 100, 100);\n                var ctx = canvas.getContext('2d');\n                ctx.save();\n                var image = new Image();\n                image.src = backgroundImage.source;\n                ctx.drawImage(image, 0, 0, 100, 100);\n                ctx.restore();\n                content = canvas.toDataURL();\n            }\n            catch (e) {\n                state = false;\n            }\n        }\n        return state;\n    };\n    PrintAndExport.prototype.getPrintCanvasStyle = function (img, options) {\n        var width = 0;\n        var height = 0;\n        var size = new _primitives_size__WEBPACK_IMPORTED_MODULE_3__.Size();\n        width = img.width;\n        height = img.height;\n        if (options.pageHeight || options.pageWidth) {\n            height = options.pageHeight ? options.pageHeight : height;\n            width = options.pageWidth ? options.pageWidth : width;\n        }\n        if (options.pageOrientation) {\n            if ((options.pageOrientation === 'Landscape' && height > width) || options.pageOrientation === 'Portrait' && width > height) {\n                var temp = width;\n                width = height;\n                height = temp;\n            }\n        }\n        size.height = height;\n        size.width = width;\n        return size;\n    };\n    PrintAndExport.prototype.getMultipleImage = function (img, options, isExport) {\n        var imageArray = [];\n        var div = (0,_utility_dom_util__WEBPACK_IMPORTED_MODULE_5__.createHtmlElement)('div', {});\n        var pageSize = this.getPrintCanvasStyle(img, options);\n        //let pageWidth: number;\n        //let pageHeight: number;\n        var margin = options.margin;\n        var mLeft = margin.left;\n        var mTop = margin.top;\n        var mRight = margin.right;\n        var mBottom = margin.bottom;\n        var x = 0;\n        var y = 0;\n        var pageWidth = pageSize.width + x;\n        var pageHeight = pageSize.height + y;\n        var drawnX = 0;\n        var drawnY = 0;\n        if (options && options.multiplePage) {\n            div.style.height = 'auto';\n            div.style.width = 'auto';\n            var imgHeight = img.height;\n            var imgWidth = img.width;\n            //if (img) {\n            var i = 0;\n            var j = 0;\n            var url = void 0;\n            var clipWidth = 0;\n            var clipHeight = 0;\n            var ctx = void 0;\n            var canvas = void 0;\n            do {\n                do {\n                    clipWidth = pageSize.width;\n                    clipHeight = pageSize.height;\n                    if ((drawnX + pageSize.width) >= imgWidth) {\n                        clipWidth = (imgWidth - drawnX);\n                    }\n                    if ((drawnY + pageSize.height) >= imgHeight) {\n                        clipHeight = (imgHeight - drawnY);\n                    }\n                    canvas = _rendering_canvas_renderer__WEBPACK_IMPORTED_MODULE_1__.CanvasRenderer.createCanvas(this.diagram.element.id + '_multiplePrint', pageSize.width, pageSize.height);\n                    ctx = canvas.getContext('2d');\n                    ctx.drawImage(img, x + drawnX + mLeft, y + drawnY + mTop, clipWidth - mRight - mLeft, clipHeight - mBottom - mTop, 0 + mLeft, 0 + mTop, clipWidth - mRight - mLeft, clipHeight - mBottom - mTop);\n                    if ((drawnX + pageSize.width) >= imgWidth) {\n                        drawnX -= (drawnX - imgWidth);\n                    }\n                    url = canvas.toDataURL();\n                    ctx.restore();\n                    drawnX += pageWidth;\n                    if (isExport) {\n                        imageArray.push(url);\n                    }\n                    else {\n                        this.printImage(div, url, i + '' + j, pageWidth + 'px;', pageHeight + 'px;');\n                    }\n                    i++;\n                } while (drawnX < imgWidth);\n                j++;\n                i = x = drawnX = 0;\n                if ((drawnY + pageSize.height) >= imgHeight) {\n                    drawnY -= (drawnY - imgHeight);\n                }\n                drawnY += pageHeight;\n            } while (drawnY < imgHeight);\n            //}\n        }\n        else {\n            var x_1 = 0;\n            var y_1 = 0;\n            var pageSize_1 = this.getPrintCanvasStyle(img, options);\n            ///let pageWidth: number; let pageHeight: number;\n            var pageWidth_1 = pageSize_1.width;\n            var pageHeight_1 = pageSize_1.height;\n            //let ctx: CanvasRenderingContext2D;\n            //let canvas: HTMLCanvasElement;\n            //let url: string;\n            var canvas = _rendering_canvas_renderer__WEBPACK_IMPORTED_MODULE_1__.CanvasRenderer.createCanvas(this.diagram.element.id + '_diagram', pageWidth_1, pageHeight_1);\n            var ctx = canvas.getContext('2d');\n            ctx.drawImage(img, x_1 + mLeft, y_1 + mTop, img.width - (mRight + mLeft), img.height - (mTop + mBottom), 0 + mLeft, 0 + mTop, pageWidth_1 - (mRight + mLeft), pageHeight_1 - (mTop + mBottom));\n            var url = canvas.toDataURL();\n            ctx.restore();\n            if (isExport) {\n                imageArray.push(url);\n            }\n            else {\n                this.printImage(div, url, 0);\n            }\n        }\n        if (isExport) {\n            return imageArray;\n        }\n        else {\n            return div;\n        }\n    };\n    PrintAndExport.prototype.printImage = function (div, url, i, pageWidth, pageHeight) {\n        var attr = { 'class': 'e-diagram-print-page', 'style': 'width:' + pageWidth + 'height:' + pageHeight };\n        var img = (0,_utility_dom_util__WEBPACK_IMPORTED_MODULE_5__.createHtmlElement)('img', attr);\n        var innerDiv = (0,_utility_dom_util__WEBPACK_IMPORTED_MODULE_5__.createHtmlElement)('div', attr);\n        attr = { 'id': this.diagram.element.id + '_multiplePrint_img' + i, 'style': 'float:left', 'src': url };\n        (0,_utility_dom_util__WEBPACK_IMPORTED_MODULE_5__.setAttributeHtml)(img, attr);\n        innerDiv.appendChild(img);\n        div.appendChild(innerDiv);\n    };\n    /**\n     * To print the image\n     *\n     * @private\n     */\n    PrintAndExport.prototype.print = function (options) {\n        options.mode = 'Data';\n        var url = this.exportDiagram(options);\n        this.printImages(url, options);\n    };\n    PrintAndExport.prototype.printImages = function (url, options) {\n        var _this = this;\n        var attr = {\n            'id': this.diagram.element.id + '_printImage',\n            'src': url\n        };\n        options.margin = { top: 0, bottom: 0, right: 0, left: 0 };\n        var img = (0,_utility_dom_util__WEBPACK_IMPORTED_MODULE_5__.createHtmlElement)('img', attr);\n        img.onload = function () {\n            var div = _this.getMultipleImage(img, options);\n            // specify window parameters\n            var printWind = window.open('');\n            _this.printWindow = printWind;\n            if (printWind != null) {\n                if ((div instanceof HTMLElement)) {\n                    printWind.document.write('<html><head><style> body{margin:0px;}  @media print { .e-diagram-print-page' +\n                        '{page-break-after: left; }.e-diagram-print-page:last-child {page-break-after: avoid;}}' +\n                        '</style><title></title></head>');\n                    //833683-Need to close print window after closing the parent window\n                    window.addEventListener('beforeunload', _this.closePrintWindow);\n                    printWind.addEventListener('load', function () {\n                        setTimeout(function () {\n                            printWind.window.print();\n                            //To close new window once print window is closed\n                            printWind.close();\n                        }, 3000);\n                    });\n                    printWind.document.write('<center>' + div.innerHTML + '</center>');\n                    printWind.document.close();\n                }\n            }\n        };\n    };\n    PrintAndExport.prototype.getContent = function (styleSheets) {\n        var snapConstraints = this.diagram.snapSettings.constraints;\n        this.diagram.snapSettings.constraints = (this.diagram.snapSettings.constraints & ~_enum_enum__WEBPACK_IMPORTED_MODULE_4__.SnapConstraints.ShowLines);\n        this.diagram.dataBind();\n        this.diagram.clearSelection();\n        styleSheets = styleSheets || document.styleSheets;\n        var styleSheetRef = '';\n        for (var i = 0; i < styleSheets.length; i++) {\n            if (styleSheets[parseInt(i.toString(), 10)].href || typeof styleSheets[parseInt(i.toString(), 10)] === 'string') {\n                styleSheetRef += '<link href=\\'' + (styleSheets[parseInt(i.toString(), 10)].href || styleSheets[parseInt(i.toString(), 10)]) + '\\' rel=\\'stylesheet\\' />';\n            }\n        }\n        var htmlData = document.getElementById(this.diagram.element.id + 'content').innerHTML;\n        var marginStyle = 'margin-left:' + 0 + 'px;margin-top:' + 0 + 'px;margin-right:'\n            + 0 + 'px;margin-bottom:' + 0 + 'px;';\n        htmlData = styleSheetRef + '<body style=\"margin: 0px; padding: 0px\"><div style=\\'' +\n            marginStyle + '\\'>' + htmlData + '</div></body>';\n        htmlData = htmlData.replace(/ transform: t/g, ' -webkit-transform: t');\n        this.diagram.snapSettings.constraints = snapConstraints;\n        this.diagram.dataBind();\n        return htmlData;\n    };\n    /** @private */\n    PrintAndExport.prototype.getDiagramContent = function (styleSheets) {\n        if (this.diagram.scroller.currentZoom === 1) {\n            var htmlData = this.getContent(styleSheets);\n            /* tslint:disable */\n            // eslint-disable-next-line quotes\n            return (0,_utility_diagram_util__WEBPACK_IMPORTED_MODULE_7__.checkBrowserInfo)() ? htmlData.replace(\"url(\" + location.protocol + '//' + location.host + location.pathname + \"#diagram_pattern \", \"url(#diagram_pattern)\") : htmlData;\n            /* tslint:enable */\n        }\n        else {\n            var container = document.getElementById(this.diagram.element.id + 'content');\n            var scrollerX = container.scrollLeft;\n            var scrollerY = container.scrollTop;\n            var oldZoom = this.diagram.scrollSettings.currentZoom;\n            var oldHorizontalOffset = this.diagram.scroller.horizontalOffset;\n            var oldVerticalOffset = this.diagram.scroller.verticalOffset;\n            var oldWidth = Number(String(this.diagram.width).split('%')[0]) ?\n                container.clientWidth : Number(String(this.diagram.width).split('px')[0]);\n            var oldHeight = Number(String(this.diagram.height).split('%')[0]) ?\n                container.clientHeight : Number(String(this.diagram.height).split('px')[0]);\n            var bounds = this.getDiagramBounds('', {});\n            this.diagram.scroller.zoom((1 / oldZoom));\n            var scrollX_1 = 0;\n            var scrollY_1 = 0;\n            scrollX_1 = bounds.x;\n            scrollY_1 = bounds.y;\n            this.diagram.scroller.transform = {\n                tx: -scrollX_1,\n                ty: -scrollY_1,\n                scale: this.diagram.scroller.currentZoom\n            };\n            this.diagram.scroller.horizontalOffset = -scrollX_1;\n            this.diagram.scroller.verticalOffset = -scrollY_1;\n            this.diagram.scroller.setSize();\n            this.diagram.setSize(bounds.width, bounds.height);\n            var htmlData = this.getContent(styleSheets);\n            this.diagram.setSize(oldWidth, oldHeight);\n            this.diagram.scroller.zoom(oldZoom / this.diagram.scrollSettings.currentZoom);\n            this.diagram.dataBind();\n            if (scrollerX || scrollerY) {\n                this.diagram.setOffset(scrollerX, scrollerY);\n            }\n            else {\n                this.diagram.scroller.transform = {\n                    tx: (oldHorizontalOffset) / this.diagram.scroller.currentZoom,\n                    ty: (oldVerticalOffset) / this.diagram.scroller.currentZoom,\n                    scale: this.diagram.scroller.currentZoom\n                };\n                this.diagram.scroller.horizontalOffset = oldHorizontalOffset;\n                this.diagram.scroller.verticalOffset = oldVerticalOffset;\n            }\n            this.diagram.renderSelector(false);\n            /* tslint:disable */\n            // eslint-disable-next-line quotes\n            return (0,_utility_diagram_util__WEBPACK_IMPORTED_MODULE_7__.checkBrowserInfo)() ? htmlData.replace(\"url(\" + location.protocol + '//' + location.host + location.pathname + \"#diagram_pattern \", \"url(#diagram_pattern)\") : htmlData;\n            /* tslint:enable */\n        }\n    };\n    /** @private */\n    PrintAndExport.prototype.exportImages = function (image, options) {\n        var _this = this;\n        var region = options && options.region ? options.region : 'Content';\n        var margin = options.margin || {};\n        margin = {\n            top: !isNaN(margin.top) ? margin.top : 0,\n            bottom: !isNaN(margin.bottom) ? margin.bottom : 0,\n            left: !isNaN(margin.left) ? margin.left : 0,\n            right: !isNaN(margin.right) ? margin.right : 0\n        };\n        var bounds = this.getDiagramBounds(region, {});\n        if (options.bounds) {\n            bounds.x = (!isNaN(options.bounds.x) ? options.bounds.x : bounds.x);\n            bounds.y = (!isNaN(options.bounds.y) ? options.bounds.y : bounds.y);\n            bounds.width = (options.bounds.width || bounds.width);\n            bounds.height = (options.bounds.height || bounds.height);\n        }\n        var img = document.createElement('img');\n        var attr = {\n            'src': image\n        };\n        (0,_utility_dom_util__WEBPACK_IMPORTED_MODULE_5__.setAttributeHtml)(img, attr);\n        var context = this;\n        img.onload = function () {\n            var canvas = _rendering_canvas_renderer__WEBPACK_IMPORTED_MODULE_1__.CanvasRenderer.createCanvas(context.diagram.element.id + 'innerImage', bounds.width + (margin.left + margin.right), bounds.height + (margin.top + margin.bottom));\n            var ctx = canvas.getContext('2d');\n            ctx.fillStyle = context.diagram.pageSettings.background.color;\n            ctx.fillRect(0, 0, bounds.width + (margin.left + margin.right), bounds.height + (margin.top + margin.bottom));\n            ctx.drawImage(img, 0, 0, bounds.width, bounds.height, margin.left, margin.top, bounds.width, bounds.height);\n            //898304 - exportImage function export images only in \"png\" format\n            if (image && options.format === 'JPG') {\n                image = canvas.toDataURL('image/jpeg');\n            }\n            else {\n                image = canvas.toDataURL();\n            }\n            if (options.printOptions) {\n                context.printImages(image, options);\n                return;\n            }\n            ctx.restore();\n            var fileName = options.fileName || 'diagram';\n            _this.canvasMultiplePage(options, canvas, margin, image, fileName);\n        };\n        //898304 - exportImage function export images only in \"png\" format\n        if (options.format === 'SVG') {\n            this.exportDiagram(options);\n        }\n    };\n    /**\n     *To destroy the ruler\n     *\n     * @returns {void} To destroy the ruler\n     */\n    PrintAndExport.prototype.destroy = function () {\n        /**\n         * Destroys the Print and Export module\n         */\n        //833683 - unwire beforeunload event on destroy\n        window.removeEventListener('beforeunload', this.closePrintWindow);\n        this.printWindow = undefined;\n    };\n    /**\n     * Get module name.\n     */\n    PrintAndExport.prototype.getModuleName = function () {\n        /**\n         * Returns the module name\n         */\n        return 'PrintandExport';\n    };\n    return PrintAndExport;\n}());\n\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-diagrams/src/diagram/print-settings.js?");

/***/ })

}]);